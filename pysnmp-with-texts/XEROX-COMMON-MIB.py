"""SNMP MIB module (XEROX-COMMON-MIB) expressed in pysnmp data model.

This Python module is designed to be imported and executed by the
pysnmp library.

See https://www.pysnmp.com/pysnmp for further information.

Notes
-----
ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/XEROX-COMMON-MIB
Produced by pysmi-1.3.3 at Sun Mar 10 12:03:04 2024
On host MacBook-Pro.local platform Darwin version 23.4.0 by user lextm
Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]
"""
if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(ProductID,
 hrDeviceIndex,
 hrSWInstalledIndex,
 hrSWRunIndex,
 InternationalDisplayString,
 hrStorageIndex,
 hrDeviceStatus) = mibBuilder.importSymbols(
    "HOST-RESOURCES-MIB",
    "ProductID",
    "hrDeviceIndex",
    "hrSWInstalledIndex",
    "hrSWRunIndex",
    "InternationalDisplayString",
    "hrStorageIndex",
    "hrDeviceStatus")

(IANACharset,) = mibBuilder.importSymbols(
    "IANA-CHARSET-MIB",
    "IANACharset")

(jmJobEntry,
 jmJobState,
 jmJobStateReasons1,
 jmJobKOctetsProcessed,
 jmJobImpressionsCompleted,
 jmJobKOctetsPerCopyRequested,
 jmNumberOfInterveningJobs,
 jmJobImpressionsPerCopyRequested) = mibBuilder.importSymbols(
    "Job-Monitoring-MIB",
    "jmJobEntry",
    "jmJobState",
    "jmJobStateReasons1",
    "jmJobKOctetsProcessed",
    "jmJobImpressionsCompleted",
    "jmJobKOctetsPerCopyRequested",
    "jmNumberOfInterveningJobs",
    "jmJobImpressionsPerCopyRequested")

(prtOutputEntry,
 prtInterpreterEntry,
 PresentOnOff,
 prtGeneralEntry,
 prtInterpreterIndex,
 prtChannelEntry,
 prtInputEntry) = mibBuilder.importSymbols(
    "Printer-MIB",
    "prtOutputEntry",
    "prtInterpreterEntry",
    "PresentOnOff",
    "prtGeneralEntry",
    "prtInterpreterIndex",
    "prtChannelEntry",
    "prtInputEntry")

(NotificationGroup,
 ObjectGroup,
 ModuleCompliance) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "NotificationGroup",
    "ObjectGroup",
    "ModuleCompliance")

(Counter64,
 Counter32,
 mgmt,
 NotificationType,
 ObjectIdentity,
 Integer32,
 Gauge32,
 enterprises,
 TimeTicks,
 IpAddress,
 ModuleIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 Bits,
 MibIdentifier,
 iso,
 Unsigned32) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Counter64",
    "Counter32",
    "mgmt",
    "NotificationType",
    "ObjectIdentity",
    "Integer32",
    "Gauge32",
    "enterprises",
    "TimeTicks",
    "IpAddress",
    "ModuleIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "Bits",
    "MibIdentifier",
    "iso",
    "Unsigned32")

(AutonomousType,
 DateAndTime,
 TruthValue,
 TextualConvention,
 RowStatus,
 DisplayString) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "AutonomousType",
    "DateAndTime",
    "TruthValue",
    "TextualConvention",
    "RowStatus",
    "DisplayString")


# MODULE-IDENTITY

xerox = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 253)
)
xerox.setLastUpdated("0209170000Z")
if mibBuilder.loadTexts:
    xerox.setOrganization("""\
Xerox Corporation - Xerox Common Management Interface Working Group
""")
xerox.setContactInfo("""\
 XCMI Editors E-Mail coherence@crt.xerox.com
""")
if mibBuilder.loadTexts:
    xerox.setDescription("""\
Xerox Common MIB Root Module, Version 5.10.pub. Copyright (C) 1997-2002 Xerox
Corporation. All Rights Reserved.
""")


# Types definitions



class DisplayString(OctetString):
    """Custom type DisplayString based on OctetString"""




class PhysAddress(OctetString):
    """Custom type PhysAddress based on OctetString"""



# TEXTUAL-CONVENTIONS



class Cardinal16(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )

    if mibBuilder.loadTexts:
        description = """\
 The representation for non-negative integers. Used for indices in small tables
where 0 means not specified. It avoids use of the sign bit.
"""


class Cardinal32(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The representation for non-negative integers. Used for indices in large tables
where 0 means not specified. Same size as ISO 10175 (avoids use of sign bit).
"""


class Cardinal64High(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The high-order 31 bits of a 62-bit non-negative integer (0..2**62-1). A
manager must get or set the high and low parts in the same operation.
"""


class Cardinal64Low(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The low-order 31 bits of a 62-bit non-negative integer (0..2**62-1). A manager
must get or set the high and low parts in the same operation.
"""


class CodedCountry(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2),
    )

    if mibBuilder.loadTexts:
        description = """\
 A two character country or territory abbreviation from ISO/IEC 3166:1993 -
Codes for the Representation of Names of Countries. Examples: US, FR, DE A null
string SHALL indicate that the country or territory is not defined.
"""


class CodedLanguage(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2),
    )

    if mibBuilder.loadTexts:
        description = """\
 A two character language abbreviation as defined in ISO/IEC 639:1988 - Codes
For the Representation of Names of Languages. Examples EN, GB, CA, FR, DE. An
empty string SHALL indicate that the language is not defined.
"""


class CodeIndexedStringIndex(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The representation of string data which the agent can provide in one or more
character sets (but not further localized). Typically this representation is
used because the string data is relatively dynamic, changing too rapidly for
full localization; or because the data exists inherently in only one or a
limited number of character sets and cannot meaningfully be further localized.
The value is an index into a single global string table,
xcmGenCodeIndexedStringTable. A subsidiary index into the
xcmGenCodeIndexedStringTable is the IANA registered enum (see the CodedCharSet
textual-convention in RFC 1759) for the coded character set desired by the
management station (from among the coded character sets supported by the SNMP
agent). A 0 index value SHALL indicate that there is no associated entry in the
string table. 32 bits are needed because Jobs can use up 10-12 code-indexed
strings per job.
"""


class Counter64High(TextualConvention, Counter32):
    status = "current"
    if mibBuilder.loadTexts:
        description = """\
 The high-order 32 bits of a 63-bit counter (0..2**63-1). A manager must get or
set the high and low parts in the same operation.
"""


class Counter64Low(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The low-order 31 bits of a 63-bit counter (0..2**63-1). A manager must get or
set the high and low parts in the same operation.
"""


class Gauge64High(TextualConvention, Gauge32):
    status = "current"
    if mibBuilder.loadTexts:
        description = """\
 The high-order 32 bits of a 63-bit gauge (0..2**63-1). A manager must get or
set the high and low parts in the same operation.
"""


class Gauge64Low(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The low-order 31 bits of a 63-bit gauge (0..2**63-1). A manager must get or
set the high and low parts in the same operation.
"""


class Integer64High(TextualConvention, Integer32):
    status = "current"
    if mibBuilder.loadTexts:
        description = """\
 The high-order 32 bits of a 63-bit signed integer (-2**62..2**62-1). A manager
must get or set the high and low parts in the same operation.
"""


class Integer64Low(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The low-order 31 bits of a 63-bit signed integer (-2**62..2**62-1). A manager
must get or set the high and low parts in the same operation.
"""


class Ordinal16(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32767),
    )

    if mibBuilder.loadTexts:
        description = """\
 The representation for positive integers. Used for indices in small tables
where 0 is illegal. It avoids use of the sign bit..
"""


class Ordinal32(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The representation for positive integers. Same size as ISO 10175 (avoids use
of sign bit).
"""


class Ordinal64High(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The high-order 31 bits of a 62-bit positive integer (1..2**62-1). A manager
must get or set the high and low parts in the same operation.
"""


class Ordinal64Low(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The low-order 31 bits of a 62-bit positive integer (1..2**62-1). A manager
must get or set the high and low parts in the same operation.
"""


class XcmFixedLocaleDisplayString(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
 This data type is used to model textual information in some localization
(language, country, and character set), which is fixed (ie, NOT capable of
being altered by management station request). This textual information SHALL be
represented in the localization which is indicated by the current value of
'xcmGenFixedLocalizationIndex'.
"""


class XcmFixedLocaleUtf8String(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
 This data type is used to model textual information in the UTF-8 character set
and some locale (language/country), which is fixed (ie, NOT capable of being
altered by management station request). This textual information SHALL be
represented in UTF-8 and the locale which is indicated by the current value of
'xcmGenFixedLocalizationIndex'.
"""


class XcmNamedLocaleUtf8String(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
 This data type is used to model textual information in the UTF-8 character set
and some locale (language/country), which is named (ie, explicitly named by a
parallel column or attribute or by the operation context).
"""


class XcmGenGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI General MIB object groups which are supported by this management
agent implementation (ie, version) on this host system, specified in a bit-
mask. The current set of values (which MAY be extended in the future) is given
below: 1 : xcmGenCurrentLocalizationGroup 2 : xcmGenLocalizationGroup 4 :
xcmGenCodeIndexedStringGroup 8 : xcmGenCodedCharSetGroup 16 :
xcmGenFixedLocalizationGroup 32 : xcmGenLockGroup 64 : xcmGenReconfGroup 128 :
xcmGenOptionGroup 256 : xcmGenClientDataGroup 512 : xcmGenTrapClientGroup 1024
: xcmGenTrapViewGroup 2048 : xcmGenBaseGroup 4096 : xcmGenMessageMapGroup 8192
: xcmGenMessageTextGroup 16384 : xcmGenNotifyRuleGroup 32768 :
xcmGenNotifyDetailGroup Usage: Conforming management agents SHALL accurately
report their support for XCMI General MIB object groups.
"""


class XcmGenLogFullPolicy(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disableAndPauseService", 4),
          ("disableService", 3),
          ("enableServiceAndFlushLog", 5),
          ("enableServiceAndFlushOldest", 6),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 The current policy for handling job/request/event log 'full' (in MIBs, in
shared RAM, on disk, etc), on this host system.
"""


class XcmGenMessageMapStringLabel(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )

    if mibBuilder.loadTexts:
        description = """\
 This syntax is used to specify a Xerox standard or experiemental message
string label associated with the current value of the message string pointed to
by 'xcmGenMessageMapStringIndexOID'. Usage: Experimental message string labels
SHOULD NOT be used in shipping versions of Xerox-branded products or services.
They exist solely to facilitate rapid product development cycles. Usage: All
Xerox message string label values SHALL be specified using display (NOT space)
characters from the IANA registered charset 'utf-8' (ie, the UTF-8 octet-stream
encoding of ISO-10646 UCS-4, described in RFC 2279). Usage: All Xerox message
string label values SHALL contain no more than 64 UTF-8 display characters AND
no more than 128 total octets (in some scripts, less than 64 characters in
UTF-8 octet-stream encoding). Usage: All Xerox message string label values
SHALL conform to the syntax specified below. A 'format', 'namespace', 'module',
or 'field' component SHALL NOT contain hyphens. A 'format', 'namespace', or
'module' component SHALL use lowercase. A 'field' or 'qualifier' component MAY
use mixed case (see examples below). A 'field' component MAY be use an
abbreviated MIB object tag or other standardized identifier. ONLY a terminal
'qualifier' component MAY contain hyphens. Each component SHALL be separated by
a hyphen '-' character. msg_label = format '-' namespace '-' module '-' field
'-' qualifier msg_label = std_label / exp_label Usage: All Xerox standard
message string label values SHALL conform to the refined syntax specified
below. std_label = std_fmt '-' std_ns '-' module '-' field '-' qualifier
std_fmt = 'xs' / 'x?' std_ns = 'ansi' / 'dmtf' / 'ecma' / 'ieee' / 'ietf' /
'iso' / 'itu' / 'omg' / 'pwg' / 'xcmi' / 'xopen' / 'w3c' module = field =
qualifier = Examples of well-formed standard message string labels: xs-
iso-10175-mediaSize-iso-a4 xs-iso-10175-mediaSize-iso-b4 xs-
iso-10175-mediaType-envelope xs-iso-10175-mediaType-transparency xs-
iso-10175-mediaColor-white xs-iso-10175-mediaColor-yellow xs-ietf-
rfc1759-alertDescription-coverOpen xs-pwg-jobmon-processingMessage-completed
xs-xcmi-11hostx-deviceDescription-dc230ST Usage: All Xerox experimental message
string label values SHALL conform to the refined syntax specified below.
exp_label = exp_fmt '-' exp_ns '-' module '-' field '-' qualifier exp_fmt =
'xx' exp_ns = std_ns '.' prod_ns std_ns = prod_ns = module = field = qualifier
= Examples of well-formed experimental message string labels: xx-
ietf.dcs265-rfc1759-alertDescription-skyIsFalling xx-xcmi.dc230-11hostx-
deviceDescription-dc230ST xx-xcmi.belize-11hostx-systemFaultString-
missingWidgets Note: New or refined message label syntaxes MAY be defined in
future versions of this XCMI General TC.
"""


class XcmGenNotifyDetailType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              20,
              21,
              22,
              23,
              30,
              31,
              32,
              33)
        )
    )
    namedValues = NamedValues(
        *(("notifyEventDelay", 21),
          ("notifyEventNames", 20),
          ("notifyMessageContentKeys", 32),
          ("notifyMessageContentText", 33),
          ("notifyMessageHeaderKeys", 30),
          ("notifyMessageHeaderText", 31),
          ("notifyRecipientURI", 10),
          ("notifySeverityFilter", 22),
          ("notifyTrainingFilter", 23),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 The type of notify detail stored in this conceptual row in
'xcmGenNotifyDetailTable'. Usage: Conforming XCMI management stations and
agents SHALL encode notify details as UTF-8 strings (like SLPv2, RFC 2608). -
Integers SHALL be encoded as (signed) decimal strings. - Booleans SHALL be
encoded as 'true' or 'false' strings. - Strings SHALL be encoded as UTF-8
character strings. - Binary data (e.g., 'userCertificate') SHALL be stored in
SLPv2 opaque encoding (leading '\FF' and escaped octets). Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information in
'xcmGenNotifyDetailString'.
"""


class XcmGenNotifySchemeSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The terse conformance statement of ALL notification URI schemes which are
supported by this management agent implementation (ie, version) on this host
system, specified in a bit-mask. The current set of values (which MAY be
extended in the future) is given below: 1 : uriNotifySNMP 2 : uriNotifyMailto 4
: uriNotifyHTTP 8 : uriNotifyHTTPS 16 : uriNotifyFTP Usage: Conforming
management agents SHALL accurately report their support for notification URI
schemes.
"""


class XcmGenNotifySeverityFilter(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 This type is used to specify a notification severity filter supported by this
management agent for notification traffic in ALL domains specified by
'xcmGenBaseSNMPDomainSupport' and 'xcmGenBaseNotifySchemeSupport' (for URI-
based notification), specified in a bit-mask. The current set of values (which
MAY be extended in the future) is given below: 1 : severityReport 2 :
severityWarning 4 : severitySoftError 8 : severityHardError 16 :
severityTestReport 32 : severityTestWarning 64 : severityTestSoftError 128 :
severityTestHardError 256 : severityInternalError Usage: The terminology
'report', 'warning', and 'error' is coherent with the IETF IPP event
notification work-in-progress and with the IETF Printer MIB (RFC 1759). Usage:
Individual trap definitions MAY further constrain which notifications are 'in
scope'. Usage: Conforming management agents SHALL accurately report their
support for notification severity filters.
"""


class XcmGenNotifyTrainingFilter(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 This type is used to specify a notification training filter supported by this
management agent for notification traffic in ALL domains specified by
'xcmGenBaseSNMPDomainSupport' and 'xcmGenBaseNotifySchemeSupport' (for URI-
based notification), specified in a bit-mask. The current set of values (which
MAY be extended in the future) is given below: 1 : trainingOther 2 :
trainingUnknown 4 : trainingNone 8 : trainingTrained 16 : trainingFieldService
32 : trainingManagement 64 : trainingNoIntervention Usage: The terminology used
here is coherent with the IETF Printer MIB (RFC 1759). Usage: Individual trap
definitions MAY further constrain which notifications are 'in scope'. Usage:
Conforming management agents SHALL accurately report their support for
notification training filters.
"""


class XcmGenOptionValueSyntax(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("integerCounter", 4),
          ("integerEnum", 5),
          ("integerGauge", 6),
          ("integerIndex", 7),
          ("integerNumber", 3),
          ("integerTruthValue", 8),
          ("oidAutonomous", 10),
          ("oidObject", 9),
          ("other", 1),
          ("stringBinary", 11),
          ("stringCodedCharSet", 14),
          ("stringDisplay", 12),
          ("stringDynamicLocalization", 15),
          ("stringLocalization", 13),
          ("stringUtf8Localization", 16),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 A reconfiguration option, device detail, storage detail, service detail, or
security profile detail value syntax, used by system administrators and end
users to specify the correct value syntax for this option or detail. Usage:
This option or detail value syntax is used to select which of the three value
objects SHALL be used to contain the value of this option or detail. * An
option or detail value syntax of 'oidObject' indicates that 'xcm...ValueOID'
SHALL be used to specify an actual object type, defined with 'OBJECT-TYPE'. *
An option or detail value syntax of 'oidAutonomous' indicates that
'xcm...ValueOID' SHALL be used to specify an autonomous object type, defined
with 'OBJECT-IDENTITY' or simply 'OBJECT IDENTIFIER'. * An option or detail
value syntax of 'stringBinary' indicates that 'xcm...ValueString' SHALL be used
to specify a (possibly) 'binary' (or 'non-printing') value string. * An option
or detail value syntax of 'stringDisplay' indicates that 'xcm...ValueString'
SHALL be used to specify a 'displayable' (or 'printing') value string. * An
option or detail value syntax of 'stringLocalization' indicates that
'xcm...ValueLocalization' (for options) or 'xcmGenFixedLocalizationIndex' (for
details) SHALL be used to control the localization of the value string (with an
underlying type of 'XcmGenFixedLocaleDisplayString'). * An option or detail
value syntax of 'stringCodedCharSet' indicates that 'xcm...ValueCodedCharSet'
(for options) or 'xcmGenFixedLocalizationIndex' (for details) SHALL be used to
control the character set ONLY of the value string (with an underlying type of
'CodeIndexedStringIndex'). * An option or detail value syntax of
'stringDynamicLocalization' indicates that 'xcmGenCurrentLocalization' SHALL be
used to control the localization of the value string (with an underlying type
of 'InternationalDisplayString'). * An option or detail value syntax of
'stringUtf8Localization' indicates that 'xcm...ValueLocalization' (for options)
or 'xcmGenFixedLocalizationIndex' (for details) SHALL be used to control the
localization of the value string (with an underlying type of
'XcmGenFixedLocaleUtf8String').
"""


class XcmGenReconfOptionState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("activateForImmediateChange", 6),
          ("activateForImmediateReboot", 8),
          ("activateForRebootChange", 7),
          ("activateInProgress", 9),
          ("idle", 1),
          ("validateForImmediateChange", 2),
          ("validateForImmediateReboot", 4),
          ("validateForRebootChange", 3),
          ("validateInProgress", 5))
    )

    if mibBuilder.loadTexts:
        description = """\
 The processing state of ALL pending reconfiguration options of this host
system. A write to this object by an (authorized) management station invokes a
request for validation (or activation) of ALL pending reconfiguration options
of this host system. A read of this object returns 'idle',
'validateInProgress', or 'activateInProgress' to report the processing state of
the last 'validate...' or 'activate...' request. It is mandatory that a
conforming management agent ensure that, at system initialization, this object
SHALL be set to a value of 'idle'. * 'idle' - NO processing is 'in progress'
for either 'validate...' or 'activate...' of any pending reconfiguration
options. * 'validateForImmediateChange' - this management agent (and host
system) SHALL perform ALL possible and appropriate validation of ALL pending
reconfiguration options (reporting the FIRST error encountered during
validation), so that reconfiguration could be performed successfully via
'activateForImmediateChange'. * 'validateForRebootChange' - this management
agent (and host system) SHALL perform ALL possible and appropriate validation
of ALL pending reconfiguration options (reporting the FIRST error encountered
during validation), so that reconfiguration could be performed successfully via
'activateForRebootChange'. * 'validateForImmediateReboot' - this management
agent (and host system) SHALL perform ALL possible and appropriate validation
of ALL pending reconfiguration options (reporting the FIRST error encountered
during validation), so that reconfiguration could be performed successfully via
'activateForImmediateReboot'. * 'validateInProgress' - indicates that this
management agent (and host system) are currently performing validation of ALL
pending reconfiguration options. Note: Conforming implementations NEED NOT
support more than ONE of the above three 'validation...' operations. *
'activateForImmediateChange' - this management agent (and host system) SHALL
perform immediate reconfiguration, NOT reboot, for ALL pending reconfiguration
options (reporting the FIRST error encountered during validation). For all
conforming implementations, this reconfiguration SHALL ALWAYS take effect
immediately, WITHOUT host system reboot! Note: Conforming implementations are
STRONGLY encouraged to consider supporting 'benign' reconfiguration in this
manner. * 'activateForRebootChange' - this management agent (and host system)
SHALL perform delayed reconfiguration, NOT reboot, for ALL pending
reconfiguration options (reporting the FIRST error encountered during
validation). For all conforming implementations, this reconfiguration SHALL
ALWAYS take effect delayed, AFTER subsequent host system reboot! Note:
Conforming implementations NEED NOT support 'caching' of multiple outstanding
'sets of reconfiguration' in this manner. * 'activateForImmediateReboot' - this
management agent (and host system) SHALL perform immediate reconfiguration, AND
reboot, for ALL pending reconfiguration options (reporting the FIRST error
encountered during validation). For all conforming implementations, this
reconfiguration SHALL ALWAYS take effect immediately, WITH host system reboot!
Note: Conforming implementations are STRONGLY encouraged to consider secure
alternatives (eg, Device Mgmt) for system reset. * 'activateInProgress' -
indicates that this management agent (and host system) are currently performing
activation of ALL pending reconfiguration options. Note: Conforming
implementations NEED NOT support more than ONE of the above three
'activation...' operations.
"""


class XcmGenRowPersistence(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("nonvolatile", 4),
          ("other", 1),
          ("permanent", 5),
          ("readonly", 6),
          ("unknown", 2),
          ("volatile", 3))
    )

    if mibBuilder.loadTexts:
        description = """\
 This type is used to specify the persistence of this conceptual row in a
table. Usage: Conforming management agents SHALL interpret persistence as
follows: 1) 'volatile' rows NEED NOT be saved across power cycles, MAY contain
one or more 'read-[create|write|only]' objects, and their underlying storage
MAY be removable, and conforming management agents NEED NOT delete such rows
(eg, a block in RAM, PCMCIA card, etc); 2) 'nonvolatile' rows SHALL be saved
across power cycles, MAY contain one or more 'read-[write|only]' objects, and
their underlying storage MAY be removable, and conforming management agents MAY
delete such rows (eg, a sector on CD-ROM, font cartridge, hard disk, etc); 3)
'permanent' rows SHALL be saved across power cycles, MAY contain one or more
'read-[write|only]' objects, and their underlying storage SHALL NOT be
removable, and conforming management agents SHALL NOT delete such rows (eg, a
sector on EEPROM, battery-backed RAM, bubble, etc); 4) 'readonly' rows SHALL be
saved across power cycles, SHALL contain exclusively 'read-only' objects, and
their underlying storage SHALL NOT be removable, and conforming management
agents SHALL NOT delete such rows (eg, a sector on ROM, ASIC, etc). Usage:
Dynamically created rows MAY ONLY be given 'volatile' or 'nonvolatile'
persistence. Note: Equivalent to SNMPv2 'StorageType' textual convention, which
has an unfortunately ambiguous name.
"""


class XcmGenSNMPDomain(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              10,
              11,
              20,
              21,
              30)
        )
    )
    namedValues = NamedValues(
        *(("snmpCLNSDomain", 2),
          ("snmpCONSDomain", 3),
          ("snmpDDPDomain", 4),
          ("snmpIPHostNameDomain", 21),
          ("snmpIPXDomain", 5),
          ("snmpNetBEUIDomain", 11),
          ("snmpNetBIOSDomain", 10),
          ("snmpTCPDomain", 20),
          ("snmpUDPDomain", 1),
          ("uriNotifyDomain", 30))
    )

    if mibBuilder.loadTexts:
        description = """\
 This type is used to specify a transport domain (address and name space) which
is supported by this management agent for SNMP protocol traffic (SNMP
responses, SNMP traps, etc), in ALL versions specified by
'xcmGenBaseSNMPVersionSupport'. This type is also used to allow the
'xcmGenTrapClientTable' to be used with any URI scheme (e.g., 'mailto:') for
notifications, by specifying 'uriNotifyDomain'.
"""


class XcmGenSNMPVersion(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("other", 2),
          ("snmpV1Community", 3),
          ("snmpV1Party", 4),
          ("snmpV2Community", 6),
          ("snmpV2Party", 5),
          ("snmpV2Secure", 9),
          ("snmpV2Star", 8),
          ("snmpV2Usec", 7),
          ("snmpV3Secure", 10),
          ("unknown", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
 This type is used to specify an SNMP version (RFC 1157, RFC 1905, etc) which
is supported by this management agent for SNMP protocol traffic (SNMP
responses, SNMP traps, etc), in ALL domains specified by
'xcmGenBaseSNMPDomainSupport'.
"""


class XcmGenSNMPv2ErrorStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("authorizationError", 16),
          ("badValue", 3),
          ("commitFailed", 14),
          ("failedDueToPowerSaverState", 19),
          ("genErr", 5),
          ("inconsistentName", 18),
          ("inconsistentValue", 12),
          ("noAccess", 6),
          ("noCreation", 11),
          ("noError", 0),
          ("noSuchName", 2),
          ("notWritable", 17),
          ("readOnly", 4),
          ("requestTimedOut", 20),
          ("resourceUnavailable", 13),
          ("tooBig", 1),
          ("undoFailed", 15),
          ("wrongEncoding", 9),
          ("wrongLength", 8),
          ("wrongType", 7),
          ("wrongValue", 10))
    )

    if mibBuilder.loadTexts:
        description = """\
 Usage: This type specifies the SMIv2 equivalent of the SMIv1 'ErrorStatus'
textual convention as an enumerated type. Note: The enum of '0' (zero) in this
textual convention is illegal in strict SMIv1 (see section 3.2.1.1 of RFC
1155), so this TC must be converted to an integer range for pure SMIv1.
"""


class XcmGlobalUniqueID(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
 A management station or management agent specifies an object of type
'GlobalUniqueID' to uniquely label a client job request, a system
administration request, or ANY other managed object (or set of managed objects)
which are required to be unambiguously identified in a distributed network
environment. An object of type 'GlobalUniqueID' SHALL be a textual string
representation in standard 'dotted decimal' form of an OID. An object of type
'GlobalUniqueID' SHALL be composed of three mandatory sections (plus zero or
more optional sections), as follows: nodeID.userID.seqID[[.subID1]...[.subIDn]]
Each of the sections SHALL be separated by a dot ('.'). The three mandatory
sections and any specified optional sections (in left to right order) SHALL be:
1) A globally unambiguous (within at least the network domain of the Requestor
and Responder host systems) dotted decimal 'nodeID' of the Requestor host
system which explicitly or implicitly labelled this managed object, either: a)
A domain specific network layer address (eg, IETF IP address for
'nodeIDTypeIP'); OR b) A domain specific datalink MAC sublayer address (eg, ISO
8802-5 MAC address for 'nodeIDType88025'). 2) A locally unambiguous (within at
least the Requestor and/or Responder host systems) dotted decimal 'userID' (ie,
user identifier) of the user who explicitly or implicitly labelled this managed
object. 3) A locally unambiguous (within at least the Requestor and/or
Responder host systems) dotted decimal 'seqID' (ie, sequence identifier)
assigned by the host system or user who explicitly or implicitly labelled this
managed object. 4) A locally unambiguous (within at least the Requestor and/or
Responder host systems) dotted decimal 'subID' (ie, sequence sub-identifier)
assigned by the host system or user who explicitly or implicitly labelled this
managed object. Usage: Conforming implementations MAY use one or more optional
sections in an 'XcmGlobalUniqueID', for example to assign a sub-job identifier
for job distribution services (e.g., fax to multiple destinations specified in
the PDL of an input 'print' job - using an original 'xcmJobClientId' which is
augmented by the server that splits up the destinations into separate jobs).
Usage: Conforming implementations SHALL NOT specify BOTH the first ('nodeID')
and second ('userID') sections as 'empty', but one OR the other section MAY
take on an 'empty' value (see below). The third ('seqID') section SHALL NOT be
'empty'. Each of the three mandatory sections and any optional sections SHALL
be composed of one mandatory and two optional subsections, as follows:
sectionLength.sectionType.sectionValue Each of the subsections SHALL be
separated by a dot ('.'). The three subsections (in left to right order) SHALL
be: 1) A mandatory 'sectionLength', which specifies the decimal count of dotted
decimal 'components' in the associated 'sectionValue' - this 'sectionLength'
SHALL NOT be self-inclusive and SHALL NOT include the single 'component' of the
'sectionType' - a 'sectionLength' of decimal zero ('0') SHALL indicate an
'empty' section, and the associated two subsections ('sectionType' and
'sectionValue') SHALL be omitted. 2) An optional 'sectionType', selected from
the standard 'sectionType' choices applicable to this section (below). 3) An
optional 'sectionValue', specified as a dotted decimal string of 'components',
each 'component' separated by a dot ('.'). The standard 'sectionType' choices
(one set for each section) SHALL be as follows: 1) 'nodeIDType' 1 :
nodeIDTypeOther 2 : nodeIDTypeUnknown 11 : nodeIDTypeIP 12 : nodeIDTypeCLNS 13
: nodeIDTypeCONS 14 : nodeIDTypeDDP 15 : nodeIDTypeIPX 16 : nodeIDTypeNetBIOS
31 : nodeIDType88023 32 : nodeIDType88024 33 : nodeIDType88025 34 :
nodeIDType88026 2) 'userIDType' 1 : userIDTypeOther 2 : userIDTypeUnknown 11 :
userIDTypeSystem 12 : userIDTypeSubnet 13 : userIDTypeNetwork 14 :
userIDTypeGlobal 3) 'seqIDType' 1 : seqIDTypeOther 2 : seqIDTypeUnknown 11 :
seqIDTypeSystem 12 : seqIDTypeProcess 13 : seqIDTypeThread 4) 'subIDType' 1 :
subIDTypeOther 2 : subIDTypeUnknown 11 : subIDTypeSystem 12 : subIDTypeProcess
13 : subIDTypeThread Usage: A 'seqID' of any type SHALL be system-unique.
Usage: A 'seqID' of type 'seqIDTypeProcess' SHALL be prefixed (if necessary) by
a system-unique dotted decimal 'processID'. Usage: A 'seqID' of type
'seqIDTypeThread' SHALL be prefixed (if necessary) by a system-unique dotted
decimal 'threadID' (possibly itself prefixed by a system-unique 'processID').
Example: A request submitted from a client end system running the IETF Internet
Protocol Suite (IPS), with an IP address of '13.240.128.21', without a
specified dotted decimal 'userID', might include an 'xcmJobClientId' of the
following form: '4.11.13.240.128.21.0.1.11.3045.1.11.23' [GlobalUniqueID]
|---------1--------|2|----3----|---4---| [Sections] 1) The mandatory first
section ('nodeID') consists of: a) 'sectionLength' of '4'; b) 'sectionType' of
'11' ('nodeIDTypeIP'); and c) 'sectionValue' of '13.240.128.21' (4 components).
2) The mandatory second section ('userID') consists of: a) 'sectionLength' of
'0' (ie, 'empty' section). 3) The mandatory third section ('seqID') consists
of: a) 'sectionLength' of '1'; b) 'sectionType' of '11' ('seqIDTypeSystem');
and c) 'sectionValue' of '3045' (one component). 4) The optional fourth section
('subID') consists of: a) 'sectionLength' of '1'; b) 'sectionType' of '11'
('subIDTypeSystem'); and c) 'sectionValue' of '23' (one component).
"""


class XcmHrDevCalendarDayOfWeek(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("businessClosedDay", 10),
          ("businessHoliday", 11),
          ("businessOpenDay", 9),
          ("everyDay", 8),
          ("friday", 5),
          ("monday", 1),
          ("saturday", 6),
          ("sunday", 7),
          ("thursday", 4),
          ("tuesday", 2),
          ("wednesday", 3))
    )

    if mibBuilder.loadTexts:
        description = """\
The day of week when the command specified in a conceptual row in the
'xcmHrDevCalendarTable' SHALL be invoked.
"""


class XcmHrDevCalendarTimeOfDay(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10000, 12359),
    )

    if mibBuilder.loadTexts:
        description = """\
The time of day when the command specified in a conceptual row in the
'xcmHrDevCalendarTable' SHALL be invoked, specified as hours (0..23) multiplied
by 100, added to minutes (0..59), added to a constant bias of 10000 (avoids an
index value of zero in 'xcmHrDevCalendarTimeOfDay').
"""


class XcmHrDevDetailType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              41,
              42,
              43,
              44,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              130,
              140,
              160,
              161,
              162,
              163,
              170,
              180,
              181,
              191,
              192,
              193,
              194,
              200,
              201,
              202,
              203,
              204,
              210,
              211,
              212,
              213,
              220,
              221,
              230,
              231,
              232,
              235,
              240,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              260,
              270,
              280,
              281,
              500,
              501,
              502,
              503)
        )
    )
    namedValues = NamedValues(
        *(("deviceAccountingUsage", 30),
          ("deviceAlias", 4),
          ("deviceAlienJobPolicy", 201),
          ("deviceCPMenuControl", 235),
          ("deviceCancelDocSupport", 76),
          ("deviceConfigurationSetting", 180),
          ("deviceContext", 9),
          ("deviceDaysUntilMaximumMsg", 28),
          ("deviceDaysUntilReorderMsg", 25),
          ("deviceDaysUntilReplaceMsg", 27),
          ("deviceDaysUntilWarningMsg", 26),
          ("deviceDeltaServiceUsage", 231),
          ("deviceDescription", 6),
          ("deviceDiskStorageAccess", 160),
          ("deviceDiskStorageCapacity", 163),
          ("deviceDiskStorageMedia", 161),
          ("deviceDiskStorageRemovable", 162),
          ("deviceEnergyStarSuspendMode", 125),
          ("deviceEventLogFullPolicy", 202),
          ("deviceFaxCountry", 280),
          ("deviceFaxDialType", 281),
          ("deviceFeatureInstallationKeyAvailability", 501),
          ("deviceFeatureInstallationKeyDate", 503),
          ("deviceFeatureInstallationKeyDisablement", 502),
          ("deviceFeedResolutionSupport", 86),
          ("deviceFontIndexReady", 101),
          ("deviceFontIndexSupport", 100),
          ("deviceForeignJobsVisible", 77),
          ("deviceGuestJobPolicy", 200),
          ("deviceHelpAddress", 61),
          ("deviceHelpDescription", 62),
          ("deviceHelpLocation", 63),
          ("deviceHelpName", 60),
          ("deviceHelpURI", 64),
          ("deviceID", 7),
          ("deviceInitialValueDocDefault", 79),
          ("deviceInitialValueDocSupport", 74),
          ("deviceInitialValueJobDefault", 78),
          ("deviceInitialValueJobSupport", 73),
          ("deviceInputMaxSpeed", 82),
          ("deviceInputMaxSpeedTimeUnit", 81),
          ("deviceInputMaxSpeedTrafficUnit", 80),
          ("deviceInstallDate", 260),
          ("deviceInstallationKeyCSVPrintSubmission", 500),
          ("deviceJobHistoryDeviceIndex", 99),
          ("deviceJobHoldDeleteTimeout", 193),
          ("deviceJobIncompleteTimeout", 191),
          ("deviceJobLogFullPolicy", 203),
          ("deviceJobPauseResumeTimeout", 194),
          ("deviceJobProgrammingTimeout", 192),
          ("deviceJobServiceDeviceIndex", 98),
          ("deviceLifeRemainingPercent", 251),
          ("deviceLifetimeAvgCoverage", 250),
          ("deviceLifetimeErrorCount", 35),
          ("deviceLifetimeErrorLimit", 36),
          ("deviceLifetimeMsgDisplay", 29),
          ("deviceLifetimeUsage", 20),
          ("deviceLifetimeWarningCount", 37),
          ("deviceLifetimeWarningLimit", 38),
          ("deviceLogicalIndexReady", 97),
          ("deviceLogicalIndexSupport", 96),
          ("deviceLogicalNameReady", 93),
          ("deviceLogicalNameSupport", 92),
          ("deviceManufacturer", 10),
          ("deviceManufacturerURI", 220),
          ("deviceMaximumLifetimeLimit", 24),
          ("deviceMaximumMsgSentDate", 54),
          ("deviceMaximumOnDate", 34),
          ("deviceMemorySize", 170),
          ("deviceModel", 11),
          ("deviceModelDescription", 212),
          ("deviceModelName", 211),
          ("deviceModelNumber", 213),
          ("deviceModelURI", 221),
          ("deviceMultipleDocSupport", 75),
          ("deviceName", 3),
          ("deviceNetworkIfIndex", 140),
          ("deviceNextCoolerModeIndex", 124),
          ("deviceNextWarmerModeIndex", 123),
          ("deviceOutputMaxSpeed", 85),
          ("deviceOutputMaxSpeedTimeUnit", 84),
          ("deviceOutputMaxSpeedTrafficUnit", 83),
          ("devicePhysicalIndexReady", 95),
          ("devicePhysicalIndexSupport", 94),
          ("devicePhysicalNameReady", 91),
          ("devicePhysicalNameSupport", 90),
          ("devicePowerCoolerDelay", 119),
          ("devicePowerCoolerDuration", 120),
          ("devicePowerCoolerSupport", 116),
          ("devicePowerCoolerTrigger", 122),
          ("devicePowerModeDescription", 112),
          ("devicePowerModeName", 110),
          ("devicePowerModeSupport", 113),
          ("devicePowerModeType", 111),
          ("devicePowerTimeUnit", 114),
          ("devicePowerWarmerDelay", 117),
          ("devicePowerWarmerDuration", 118),
          ("devicePowerWarmerSupport", 115),
          ("devicePowerWarmerTrigger", 121),
          ("deviceProcessorFrwID", 130),
          ("deviceRemainingImpressions", 252),
          ("deviceReorderConfirmDate", 56),
          ("deviceReorderLifetimeLimit", 21),
          ("deviceReorderMsgSentDate", 51),
          ("deviceReorderOnDate", 31),
          ("deviceReorderToVendorDate", 55),
          ("deviceReplaceByCustomer", 16),
          ("deviceReplaceByWarranty", 19),
          ("deviceReplaceDate", 57),
          ("deviceReplaceLifetimeLimit", 23),
          ("deviceReplaceMsgSentDate", 53),
          ("deviceReplaceOnDate", 33),
          ("deviceReplaceSystemUsage", 58),
          ("deviceReplaceWithGeneric", 59),
          ("deviceRequestLogFullPolicy", 204),
          ("deviceResourceIndexReady", 103),
          ("deviceResourceIndexSupport", 102),
          ("deviceRolloverValue", 232),
          ("deviceSchedulerReady", 89),
          ("deviceSchedulerSupport", 88),
          ("deviceSerialNumber", 12),
          ("deviceServiceByCustomer", 15),
          ("deviceServicePlanName", 17),
          ("deviceServicePlanPassword", 18),
          ("deviceServiceUsage", 230),
          ("deviceStatus", 270),
          ("deviceSuppliesClass", 253),
          ("deviceSuppliesCurrentLevel", 256),
          ("deviceSuppliesMaxCapacity", 255),
          ("deviceSupplyUnit", 254),
          ("deviceTimezone", 181),
          ("deviceTranslatorReady", 72),
          ("deviceTranslatorSupport", 71),
          ("deviceTree", 8),
          ("deviceTriggerDaysForMaximum", 44),
          ("deviceTriggerDaysForReorder", 41),
          ("deviceTriggerDaysForReplace", 43),
          ("deviceTriggerDaysForWarning", 42),
          ("deviceType", 5),
          ("deviceUniversalProductCode", 210),
          ("deviceUsageWarningThreshold", 240),
          ("deviceVendor", 13),
          ("deviceVersion", 14),
          ("deviceWarningLifetimeLimit", 22),
          ("deviceWarningMsgSentDate", 52),
          ("deviceWarningOnDate", 32),
          ("deviceXFeedResolutionSupport", 87),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The type of the device detail information specified in this conceptual row in
the 'xcmHrDevDetailTable'. Usage: Conforming management stations and management
agents SHALL implement specified semantics for device detail types.
"""


class XcmHrDevDetailUnitClass(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29)
        )
    )
    namedValues = NamedValues(
        *(("classDateAndTime", 4),
          ("classGenOptionValueSyntax", 3),
          ("classHrDevCalendarDayOfWeek", 5),
          ("classHrDevCalendarTimeOfDay", 6),
          ("classHrDevInfoStatus", 14),
          ("classHrDevInfoStatusMask", 15),
          ("classHrDevInfoXStatus", 16),
          ("classHrDevMgmtCommandRequest", 7),
          ("classHrDevPowerTimeUnit", 8),
          ("classHrDevTrafficUnit", 9),
          ("classHrDpaAvailability", 19),
          ("classHrDpaConditions", 18),
          ("classHrDpaJobValidateSupport", 21),
          ("classHrDpaObjectClassSupport", 20),
          ("classHrDpaState", 17),
          ("classJMJobState", 22),
          ("classJMJobStateMask", 23),
          ("classLogFullPolicy", 12),
          ("classLogFullPolicyMask", 13),
          ("classRowPersistence", 10),
          ("classRowPersistenceMask", 11),
          ("classSecGuestJobPolicy", 24),
          ("classSecGuestJobPolicyMask", 25),
          ("classSecPosixRights", 26),
          ("classSecPosixVerbs", 27),
          ("classSvcMonAttachmentPDLSupport", 29),
          ("classSvcMonJobConfirmSupport", 28),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The value unit class of the device detail information specified in this
conceptual row in the 'xcmHrDevDetailTable'. Usage: Used to select a textual
convention for specifying the units of this device detail value. Usage: Some of
the value unit class enumerations specify that the actual unit is REQUIRED to
be selected in '...DetailUnit' and REQUIRE '...DetailValueString' contains a
value in units (and are commented as such below). Usage: Some of the value unit
class enumerations specify the actual unit DIRECTLY and REQUIRE that
'...DetailUnit' be zero and REQUIRE '...DetailValueString' contains a value in
the named textual convention (or a bit-mask derived from it) (and are commented
as such below). Usage: Some of the value unit class enumerations specify that
'...DetailValueString' SHALL contain a bit-mask which is formed via the bit-
wise OR of '2**(n)', where (n) is each selected enumerated value in the named
textual convention. (see 'xcmGenBaseSNMPDomainSupport' object in XCMI General
MIB).
"""


class XcmHrDevInfoRealization(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("logical", 12),
          ("logicalAndPhysical", 13),
          ("other", 1),
          ("physical", 11),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
An extended device type (or device 'realization'), used by system
administrators and end users of this device. Usage: The use of either 'other'
or 'unknown' is uninformative and SHOULD be avoided by conforming
implementations. * 'physical' - 'real' device installed on this managed system;
* 'logical' - 'virtual' device configured on this managed system; *
'logicalAndPhysical' - 'combined' device (from ISO DPA ??).
"""


class XcmHrDevInfoStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("down", 5),
          ("running", 2),
          ("testing", 4),
          ("unknown", 1),
          ("warning", 3))
    )

    if mibBuilder.loadTexts:
        description = """\
The current operational state of the device described by this row of the table.
A value 'unknown(1)' indicates that the current state of the device is unknown.
'running(2)' indicates that the device is up and running and that no unusual
error conditions are known. The 'warning(3)' state indicates that agent has
been informed of an unusual error condition by the operational software (eg, a
disk device driver) but that the device is still 'operational'. An example
would be a high number of soft errors on a disk. A value of 'testing(4)',
indicates that the device is not available for use because it is in the testing
state. The state of 'down(5)' is used only when the agent has been informed
that the device is not available for any use. Usage: Conforming implementations
SHALL NOT 'bubble up' status from 'physical' devices to associated 'logical'
devices. All devices SHALL report their own status ONLY. Usage: Devices in the
'down' state SHOULD NOT be accepting new work (or still processing old work).
Devices in the 'running' state SHOULD be prepared to accept new work. Usage:
The use of the state 'unknown' is uninformative and SHOULD be avoided by
conforming implementations. Usage: This is a textual convention representation
of the 'hrDeviceStatus' enumeration in the IETF Host Resources MIB (RFC 2790),
rewritten from SMIv1 style (RFCs 1155 and 1212) into SMIv2 style (RFCs
1902/2578, 1903/2579, and 1904/2580).
"""


class XcmHrDevInfoXStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              99,
              100,
              200,
              300,
              400,
              500,
              501,
              502,
              503,
              504,
              505,
              506,
              507,
              508,
              509,
              510,
              511,
              512,
              513,
              600,
              1000,
              1100,
              1200,
              1300,
              1400,
              1500,
              1600,
              1700,
              1800,
              1900,
              2000,
              2100,
              10100,
              10200,
              10300,
              10400,
              10500,
              11100,
              11200,
              11300,
              11400,
              11500,
              11600,
              11700,
              11800,
              11900,
              12000,
              12100,
              12200,
              12300,
              20000,
              20001,
              20002,
              20003,
              20004,
              20005,
              20006,
              40000)
        )
    )
    namedValues = NamedValues(
        *(("accountingInterfaceNone", 12300),
          ("audioNone", 1100),
          ("clockNone", 1900),
          ("commonLast", 99),
          ("commonNone", 0),
          ("commonOther", 1),
          ("commonUnknown", 2),
          ("copierNone", 10300),
          ("coprocessorNone", 1200),
          ("cruFault", 20006),
          ("cruNone", 20000),
          ("cruOther", 20001),
          ("cruReady", 20003),
          ("cruReorder", 20004),
          ("cruReplace", 20005),
          ("cruUnknown", 20002),
          ("diskStorageNone", 600),
          ("embeddedFaxNone", 12000),
          ("faxNone", 10400),
          ("finisher3rdPartyNone", 11500),
          ("finisherBFMNone", 11200),
          ("finisherMFFNone", 11300),
          ("finisherXIMNone", 11400),
          ("foreignInterfaceNone", 12100),
          ("hostSystemNone", 10100),
          ("internetFaxNone", 11800),
          ("interposerNone", 11700),
          ("keyboardNone", 1300),
          ("mailboxNone", 10500),
          ("markerNone", 11100),
          ("modemNone", 1400),
          ("networkNone", 400),
          ("nonVolatileMemoryNone", 2100),
          ("otherNone", 100),
          ("parallelPortNone", 1500),
          ("paymentInterfaceNone", 11600),
          ("pointingNone", 1600),
          ("printerConnectingToPrinter", 513),
          ("printerIdle", 503),
          ("printerJobEndWait", 509),
          ("printerJobPasswordWait", 511),
          ("printerJobStartWait", 508),
          ("printerNeedsAttention", 505),
          ("printerNeedsKeyOperator", 510),
          ("printerNone", 500),
          ("printerOther", 501),
          ("printerPaused", 506),
          ("printerPrinting", 504),
          ("printerShutdown", 507),
          ("printerTimedOut", 512),
          ("printerUnknown", 502),
          ("processorNone", 300),
          ("reserved", 40000),
          ("scannerNone", 10200),
          ("securityInterfaceNone", 12200),
          ("serialPortNone", 1700),
          ("serverFaxNone", 11900),
          ("tapeNone", 1800),
          ("unknownNone", 200),
          ("videoNone", 1000),
          ("volatileMemoryNone", 2000))
    )

    if mibBuilder.loadTexts:
        description = """\
An extended device status, used by system administrators and end users of this
device (here, read 'state' for 'status'). Usage: Conforming implementations
SHALL NOT 'bubble up' status from 'physical' devices to associated 'logical'
devices. All devices SHALL report their own status ONLY. Usage: Exactly one
enumeration of extended device status SHALL be defined, with ranges for each
basic device type (eg, 'hrDevicePrinter'). The legal range for extended device
status for a given device type (either defined by RFC 2790 or by this MIB) is
found by multiplying the final arc of the the device type OID by 100 - the
result is the device specific range base - the end of the device specific range
is 99 larger. These device specific extended device status values SHALL be
reissued periodically in the 'XcmHrDevInfoXStatus' textual convention.
"""


class XcmHrDevInfoConditions(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
A relatively generic description of the current 'conditions' of this device,
specified in a bit-mask. 1 : startupInProgress 2 : resetWarningInProgresss 4 :
testInProgress 8 : shutdownInProgress 16 : quiesceInProgress 32 :
resetCountersInProgress 64 : resetWarmInProgress 128 : resetColdInProgress 256
: resetFactoryInProgress 512 : flushInputInProgress 1024 :
flushOutputInProgress 2048 : flushInOutInProgress 4096 : manageInProgress The
above basic 'conditions' record the original intent of the current command,
when it results in delayed state transitions before arriving at the 'target'
state. They augment the state information available from 'hrDeviceStatus'. 8192
: warmUpDelayInProgress 16384 : warmUpCycleInProgress 32768 : readyMode 65536 :
coolDownDelayInProgress 131072 : coolDownCycleInProgress 262144 : standbyMode
524288 : energySaveDelayInProgress 1048576 : energySaveCycleInProgress 2097152
: sleepMode 4194304 : wakeUpDelayInProgress 8388608 : wakeUpCycleInProgress
16777216 : powerToReadyInProgress 33554432 : powerToStandbyInProgress 67108864
: powerToSleepInProgress The above optional 'conditions' record the progress of
device 'warm up', 'cool down', 'energy save', and 'wake up' power mgmt cycles
and also define the device 'readyMode', 'standbyMode', and 'sleepMode'
qualifiers to the generic 'hrDeviceStatus' of 'running(2)', 'warning(3)', or
'testing(4)' (but NOT 'down(5)'). See the power management cycle feature
support and feature time objects in the Device Power Group of the Host
Resources Ext MIB. Usage: It is desirable that the implementor report
'conditions' of all devices corresponding to conceptual rows in the
'hrDeviceTable' as accurately as feasible. 'Conditions' occur within or across
'states' in a finite state machine (FSM) implementation of a device. They
represent both short term and long term conditions. Usage: A device with
'hrDeviceStatus' of 'running(2)' might have 'xcmHrDevInfoConditions' of
'quiesceInProgress', indicating that the device will soon transition to
'hrDeviceStatus' of 'down(5)'. Usage: A multi-bit example of
'xcmHrDevInfoConditions' is 'quiesceInProgress' concurrently with
'standbyMode', ie, the device has previously 'cooled down' and will soon
transition from 'hrDeviceStatus' of 'running(2)' to 'down(5)'.
"""


class XcmHrDevInfoXConditions(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
A device specific description of the extended 'conditions' of this device,
specified in a bit-mask. Usage: For FUTURE expansion. Usage: Exactly one bit
mask of extended device conditions SHALL be defined for each basic device type
(eg, 'hrDevicePrinter'). These device specific extended device conditions
values SHALL be reissued periodically in the 'XcmHrDevInfoXConditions' textual
convention. These device specific extended device conditions are mutually
exclusive and 'overloaded' in the single reporting object
'xcmHrDevInfoXConditions'.
"""


class XcmHrDeviceStatusType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ok", 2),
          ("supplyMissing", 6),
          ("supplyReorder", 3),
          ("supplyReplace", 5),
          ("unknown", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
Used to describe the device status. Usage: used in xcmHrDetailTable for
supplies. Required because supplies are not in the hrDeviceTable and therefore
hrDeviceStatus cannot be used. Modeled after hrDeviceStatus where 2=running,
3=warning and 5=down.
"""


class XcmHrDevMgmtCommandRequest(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              1301,
              1302,
              1303,
              1304,
              1305,
              1306,
              1307,
              1308,
              1309,
              1310,
              1311,
              1312,
              1901,
              1902,
              1903,
              1904,
              1905,
              1906,
              1907,
              1908,
              1909,
              1910,
              1911,
              1912,
              2301,
              2302,
              2321,
              2322,
              2323,
              2324,
              2325,
              2326,
              2331,
              2332,
              2333,
              2334,
              2335,
              2336,
              2341,
              2342,
              2343,
              2901,
              2902,
              2921,
              2922,
              2923,
              2924,
              2925,
              2926,
              2931,
              2932,
              2933,
              2934,
              2935,
              2936,
              2941,
              2942)
        )
    )
    namedValues = NamedValues(
        *(("coolDown", 17),
          ("deviceBackup", 2323),
          ("deviceClean", 1305),
          ("deviceConfigure", 2325),
          ("deviceCreate", 1301),
          ("deviceDelete", 1302),
          ("deviceDiagnose", 2326),
          ("deviceDisable", 1306),
          ("deviceDiskOverwrite", 2343),
          ("deviceEnable", 1307),
          ("deviceFormat", 2335),
          ("deviceInstall", 2321),
          ("deviceJobCreate", 1312),
          ("deviceList", 1303),
          ("deviceLogin", 2341),
          ("deviceLogout", 2342),
          ("deviceManage", 2301),
          ("devicePause", 1308),
          ("deviceQueueList", 1311),
          ("deviceRefresh", 2336),
          ("deviceResetCold", 2333),
          ("deviceResetCounters", 2331),
          ("deviceResetFactory", 2334),
          ("deviceResetWarm", 2332),
          ("deviceRestart", 2302),
          ("deviceRestore", 2324),
          ("deviceResume", 1309),
          ("deviceSet", 1304),
          ("deviceShutdown", 1310),
          ("deviceUpgrade", 2322),
          ("energySave", 18),
          ("entityBackup", 2923),
          ("entityClean", 1905),
          ("entityConfigure", 2925),
          ("entityCreate", 1901),
          ("entityDelete", 1902),
          ("entityDiagnose", 2926),
          ("entityDisable", 1906),
          ("entityEnable", 1907),
          ("entityFormat", 2935),
          ("entityInstall", 2921),
          ("entityJobCreate", 1912),
          ("entityList", 1903),
          ("entityLogin", 2941),
          ("entityLogout", 2942),
          ("entityManage", 2901),
          ("entityPause", 1908),
          ("entityQueueList", 1911),
          ("entityRefresh", 2936),
          ("entityResetCold", 2933),
          ("entityResetCounters", 2931),
          ("entityResetFactory", 2934),
          ("entityResetWarm", 2932),
          ("entityRestart", 2902),
          ("entityRestore", 2924),
          ("entityResume", 1909),
          ("entitySet", 1904),
          ("entityShutdown", 1910),
          ("entityUpgrade", 2922),
          ("flushInOut", 13),
          ("flushInput", 11),
          ("flushOutput", 12),
          ("manage", 14),
          ("none", 1),
          ("powerToReady", 20),
          ("powerToSleep", 22),
          ("powerToStandby", 21),
          ("quiesce", 6),
          ("refresh", 15),
          ("resetCold", 9),
          ("resetCounters", 7),
          ("resetFactory", 10),
          ("resetWarm", 8),
          ("resetWarning", 3),
          ("shutdown", 5),
          ("startup", 2),
          ("test", 4),
          ("wakeUp", 19),
          ("warmUp", 16))
    )

    if mibBuilder.loadTexts:
        description = """\
A write of this type by an (authorized) management station invokes a command
for this device. A read of this type always returns the command currently in
progress or last completed. It is mandatory that a conforming management agent
ensure that the contents of this object remain 'in bounds' - an undefined value
SHALL be replaced by 'none' - ie, although rejected with error in the
SetResponse PDU, this object SHALL NOT contain any such undefined value. At
system initialization, this object SHALL contain 'none'. * 'none' - NO
action(s) SHALL be taken, except to clear '...CommandData' and set
'...CommandStatus' to 'noError'. * 'test' or 'manage' - the associated
'...CommandData' object SHOULD/SHALL be specified in the same SetRequest PDU. *
all other commands - the associated '...CommandData' object MAY be specified in
the same SetRequest PDU. * 'startup', 'resetWarm', 'resetCold', or
'resetFactory' - the final state SHALL be 'running' (after cycle completes) -
the sequence of states SHOULD be 'down' -> 'testing' -> 'running' - the final
power mode SHALL be 'ready'. * 'startup' - this device SHALL transition from
the 'down' state to the 'running' state and 'ready' power mode. *
'resetWarning' - this device SHALL transition from the 'warning' state to the
'running' state (because a management station has acknowledged the management
agent's previous warning). * 'test' - this device SHALL transition immediately
(ie, without attempting graceful quiesce) to the 'testing' state; it is a local
matter (ie, device specific) how this command is processed; however,
'...CommandData' SHOULD be specified. * 'shutdown' - this device SHALL
transition immediately (ie, without attempting graceful quiesce) to the 'down'
state and 'off' power mode. * 'quiesce' - this device MAY transition gracefully
to the 'down' state, or it MAY choose to treat a 'quiesce' as 'shutdown'. *
'resetCounters' - all device counters SHALL be reset to zero and the device
SHALL remain in the same state and power mode. * 'resetWarm' - a device 'warm
restart' SHALL be performed (ie, without a power cycle reset). * 'resetCold' -
a device 'cold restart' SHALL be performed (ie, with a power cycle reset). *
'resetFactory' - all factory defaults SHALL be restored, and a device 'cold
restart' SHALL be performed (ie, with a power cycle reset). * 'flushInput' -
all device input (in progress or internally queued) SHALL be gracefully
flushed. * 'flushOutput' - all device output (in progress or internally queued)
SHALL be gracefully flushed. * 'flushInOut' - all device input and output
output (in progress or internally queued) SHALL be gracefully flushed. *
'manage' - it is a local matter (ie, device specific) how this command is
processed; however, '...CommandData' SHALL be specified. * 'refresh' - the
device SHALL promptly read all of its manageable configuration parameters, but
SHALL NOT perform a reset. * 'warmUp' - the device SHALL transition from the
'standby' mode to the 'ready' mode - invalid from any other power mode
(optional command for remote device power management). * 'coolDown' - the
device SHALL transition from the 'ready' mode to the 'standby' mode - invalid
from any other power mode (optional command for remote device power
management). * 'energySave' - the device SHALL transition from the 'standby'
mode to the 'sleep' mode - invalid from any other power mode (optional command
for remote device power management). * 'wakeUp' - the device SHALL transition
from the 'sleep' mode to the 'standby' mode - invalid from any other power mode
(optional command for remote device power management). * 'powerToReady' - the
device SHALL transition from the 'standby' mode or the 'sleep' mode to the
'ready' mode (optional command for remote device power management). *
'powerToStandby' - the device SHALL transition from the 'ready' mode or the
'sleep' mode to the 'standby' mode (optional command for remote device power
management). * 'powerToSleep' - the device SHALL transition from the 'ready'
mode or the 'standby' mode to the 'sleep' mode (optional command for remote
device power management). Note: All of the POSIX and XCMI device level
operations are taken from the POSIX System Admin std (IEEE 1387.4) and aligned
with the high-end XCMI System Admin MIB.
"""


class XcmHrDevMgmtCommandData(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
A write of this type specifies: a) a 'test' command subtype and any
accompanying 'test' device specific data; or b) a 'manage' command subtype and
any accompanying 'manage' device specific data; or c) device specific data
accompanying any other command. A read of this type always returns the data (if
any) which accompanied the current or last completed command.
"""


class XcmHrDevMgmtCommandDataTag(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )

    if mibBuilder.loadTexts:
        description = """\
XCMI device management commands are passed as enumerated types in
'xcmHrDevMgmtCommandRequest' in the XCMI HRX MIB. Other XCMI management
commands are passed as enumerated types in 'xcmCommsMgmtCommandRequest',
'xcmSimpleJobMgmtOperation', etc, in the XCMI Comms Engine, Simple Job Mgmt,
and other MIBs. XCMI management commands MAY also require one or more arguments
(in addition to any specific variable bindings of MIB objects). Required
arguments are passed as 'tagged string arguments' in 'xcmHrDevMgmtCommandData',
'xcmSimpleJobMgmtData', etc. Each 'tagged string argument' substring is of the
form: 'TT=value:' where: 'TT' two-character 'tag', naming argument type '='
literal equal sign, beginning argument value 'value' human-readable string,
encoding argument value ':' literal colon, terminating argument value XCMI
conforming management stations SHALL terminate ALL 'tagged string argument'
substrings properly with colon (':'). XCMI standard 'tagged string arguments'
MAY pass colon (':') in their 'value' by escaping it with backslash ('\'). XCMI
conforming management agents SHALL interpret backslash followed by ANY other
character as the literal value of the second character (ie, backslash is
permitted, and is NOT restricted to certain following characters). XCMI
standard 'tags' for data in 'tagged string arguments', (in
'xcmHrDevMgmtCommandData', 'xcmSimpleJobMgmtData', etc) are as follows: * SC
[Sub-Command - domain-specific, must be FIRST tag present] * OI [Object
Identifier - no object mapping] * OV [Object Value - no object mapping] * DT
[Date and Time - no object mapping] * NI [Noise Information - no object
mapping] * SI [Sequence Identifier - no object mapping] * AI
'xcmSecAccountIndex' * AN 'xcmSecAccountName' * AC 'xcmSecAccountPasscode' * AW
'xcmSecAccountPassword' * UI 'xcmSecUserIndex' * UN 'xcmSecUserName' * UC
'xcmSecUserPasscode' * UW 'xcmSecUserPassword' * ZD 'sysDescr' * ZI
'sysObjectID' * ZS 'sysServices' * IX 'ifIndex' * ID 'ifDescr' * IY 'ifType' *
IM 'ifMtu' * IS 'ifSpeed' * IP 'ifPhysAddress' * IZ 'ifSpecific' * ZA
'hrSystemDate' * ZL 'hrSystemInitialLoadDevice' * ZP
'hrSystemInitialLoadParameters' * ZM 'hrSystemMaxProcesses' * SX
'hrStorageIndex' * SY 'hrStorageType' * SD 'hrStorageDescr' * SU
'hrStorageAllocationUnits' * SS 'hrStorageSize' * DX 'hrDeviceIndex' * DY
'hrDeviceType' * DD 'hrDeviceDescr' * DI 'hrDeviceID' * PI 'hrProcessorFrwID' *
NI 'hrNetworkIfIndex' * KA 'hrDiskStorageAccess' * KM 'hrDiskStorageMedia' * KR
'hrDiskStorageRemoveble' * KC 'hrDiskStorageCapacity' * XX 'hrPartitionIndex' *
XL 'hrPartitionLabel' * XI 'hrPartitionID' * XS 'hrPartitionSize' * XF
'hrPartitionFSIndex' * FX 'hrFSIndex' * FM 'hrFSMountPoint' * FR
'hrFSRemoteMountPoint' * FY 'hrFSType' * FA 'hrFSAccess' * FB 'hrFSBootable' *
FS 'hrFSStorageIndex' * RO 'hrSWOSIndex' * RX 'hrSWRunIndex' * RN 'hrSWRunName'
* RI 'hrSWRunID' * RF 'hrSWRunPath' * RP 'hrSWRunParameters' * RY 'hrSWRunType'
* WX 'hrSWInstalledIndex' * WN 'hrSWInstalledName' * WI 'hrSWInstalledID' * WY
'hrSWInstalledType' * CN [Color Name - no object mapping] * CV [Color Value -
no object mapping] * CO [Community Name Ordinal - no direct object mapping] *
CR 'xcmGenBaseSNMPReadCommunity' * CW 'xcmGenBaseSNMPWriteCommunity' * CT
'xcmGenBaseSNMPTrapCommunity' * JA 'xcmJobSubmittingApplication' * JC
'xcmJobClientId' * JD 'xcmDocName' * JF 'xcmDocFileName' * JH 'jobHoldSet' in
'xcmJobStateReasons' * JM 'xcmJobMessageFromAdministrator' * JN 'xcmJobName' *
JO 'xcmJobOwner' * JP 'xcmJobPriority' * JR 'xcmJobRetentionPeriod' * JS
'xcmJobServiceType' * JT 'xcmJobProcessAfter' * JU 'xcmJobComment' * JW
['system job' standard type - no object mapping] * JX ['system job' extended
type - no object mapping] XCMI standard 'system job' types for use in 'JW'
arguments (in 'xcmHrDevMgmtCommandData' and 'xcmSimpleJobMgmtData') and for the
value of 'xcmJobName' (unless 'JN' tag is specified) are as follows: * ACCT
(basic) accounting report * AEXT (extended) accounting report * CONF (basic)
system configuration report * CEXT (extended) system configuration report *
CMEM (installed) memory configuration report * CMSR media (supported and ready)
configuration report * CNET network interfaces configuration report * COPT
(installed) optional devices configuration report * CPDL (JCL and/or PDL)
interpreters configuration report * CPRO network protocols configuration report
* CSWI (installed) software configuration report * DEMO (basic) demo job * DEXT
(extended) demo job * FONT (basic) fonts report * FEXT (extended) fonts report
* FPCL (installed) HP PCL fonts report * FPSX (installed) Adobe PostScript
fonts report * LIST list tree of disk directories (but NOT contents) * LALL
list tree of disk directories (including all files) * LDIR list (specific) disk
directory * LERR list system error file * LLOG list system log file * LFIL list
(specific) file * MENU (basic) local UI menu tree report * MEXT (extended)
local UI menu tree report * RSRC (basic) document resources report * REXT
(extended) document resources report * TEST (basic) system test * TEXT
(extended) system test * TMEM (installed) memory verfication test report * TNET
network interfaces verification test report * TOPT (installed) optional devices
test report * TPAT print test pattern (especially for printers and copiers) *
TPDL (JCL and/or PDL) interpreters system test report * TPRO network protocols
verification test report * TSWI (installed) software verfication test report *
TCAC print automatic color chart (auto calibration) * TCBC print balance chart
(manual calibration) * TCCC print corrected color chart (color calibration) *
TCSC scan automatic color chart (auto calibration) * TCTC print tone chart
(manual calibration) * TCUC print uncorrected color chart (color calibration) *
TCBV set balance values (manual calibration) * TCTV set tone values (manual
calibration) * USER (basic) configured users report * UEXT (extended)
configured users report The above XCMI standard 'tags' MAY be extended in the
future.
"""


class XcmHrDevPowerModeType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("offMode", 6),
          ("other", 1),
          ("readyMode", 3),
          ("sleepMode", 5),
          ("standbyMode", 4),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
A device power mode type, used by system administrators of this device for
power management details. Usage: Used in 'devicePowerModeType' Device Detail,
to clearly identify the referenced power mode (without resort to strings).
"""


class XcmHrDevPowerTimeUnit(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("day", 10),
          ("hour", 9),
          ("kilosecond", 6),
          ("megasecond", 7),
          ("microsecond", 3),
          ("millisecond", 4),
          ("minute", 8),
          ("month", 12),
          ("other", 1),
          ("second", 5),
          ("unknown", 2),
          ("week", 11),
          ("year", 13))
    )

    if mibBuilder.loadTexts:
        description = """\
A device power cycle time unit, used by system administrators of this device
for power management cycle times. Usage: Used to scale the values in the Device
Power group, for convenience and (optional) high resolution.
"""


class XcmHrDevTrafficUnit(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              100,
              101)
        )
    )
    namedValues = NamedValues(
        *(("area100Sheet", 67),
          ("area100SqFoot", 65),
          ("area10SqMeter", 66),
          ("areaSheet", 59),
          ("areaSqCentimeter", 56),
          ("areaSqFoot", 51),
          ("areaSqInch", 50),
          ("areaSqKilometer", 58),
          ("areaSqMeter", 57),
          ("areaSqMicrometer", 54),
          ("areaSqMile", 53),
          ("areaSqMillimeter", 55),
          ("areaSqYard", 52),
          ("binaryBit", 11),
          ("binaryLine", 14),
          ("binaryNibble", 12),
          ("binaryOctet", 13),
          ("document", 68),
          ("inkStick", 100),
          ("length100Foot", 63),
          ("length100Meter", 64),
          ("lengthCentimeter", 35),
          ("lengthFoot", 30),
          ("lengthInch", 29),
          ("lengthKilometer", 37),
          ("lengthMeter", 36),
          ("lengthMicrometer", 33),
          ("lengthMile", 32),
          ("lengthMillimeter", 34),
          ("lengthYard", 31),
          ("media100Image", 60),
          ("media100Impression", 61),
          ("media100Sheet", 62),
          ("mediaBlock", 20),
          ("mediaCell", 25),
          ("mediaColumn", 23),
          ("mediaImage", 26),
          ("mediaImpression", 27),
          ("mediaPacket", 24),
          ("mediaRow", 22),
          ("mediaSector", 21),
          ("mediaSheet", 28),
          ("other", 1),
          ("textCharacter", 15),
          ("textLine", 17),
          ("textParagraph", 19),
          ("textSentence", 18),
          ("textWord", 16),
          ("totalItemsConsumed", 101),
          ("unknown", 2),
          ("volumeKiloliter", 41),
          ("volumeLiter", 40),
          ("volumeMicroliter", 38),
          ("volumeMilliliter", 39),
          ("weightGram", 44),
          ("weightKilogram", 45),
          ("weightMicrogram", 42),
          ("weightMilligram", 43))
    )

    if mibBuilder.loadTexts:
        description = """\
The type of traffic unit used to measure input and/or output traffic for this
device. Usage: The use of either 'other' or 'unknown' is uninformative and
SHOULD be avoided by conforming implementations. Usage: 'mediaImage' - SHOULD
be used ONLY for softcopy INPUT page images (scan, copy, fax, etc.).
'mediaImpression' - SHOULD be used ONLY for hardcopy OUTPUT page impressions
(print, copy, fax, etc.) 'mediaSheet' - SHOULD be used ONLY for hardcopy OUTPUT
and does NOT always equal output pages (e.g., duplex or N-up printing).
"""


class XcmHrGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional IETF Host Resources MIB (RFC 2790) and XCMI Ext to Host Resources MIB
objects which are supported by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. The current set of
values (which MAY be extended in the future) is given below: 1 : hrSystemGroup
2 : hrStorageGroup 4 : hrDeviceGroup 8 : hrSWRunGroup 16 : hrSWRunPerfGroup 32
: hrSWInstalledGroup 64 : xcmHrDevInfoGroup 128 : xcmHrDevHelpGroup 256 :
xcmHrDevMgmtGroup 512 : xcmHrDevPowerGroup 1024 : xcmHrDevTrafficGroup 2048 :
xcmHrSystemFaultGroup 4096 : xcmHrGeneralGroup 8192 : xcmHrDevCalendarGroup
16384 : xcmHrSWRunGroup 32768 : xcmHrSWInstalledGroup 65536 :
xcmHrDevDetailGroup 131072 : xcmHrStorageExtGroup 262144 :
xcmHrStorageDetailGroup 524288 : xcmHrDevCoverGroup 1048576 :
xcmHrDevAlertGroup 2097152 : xcmHrConsoleScreenGroup 4194304 :
xcmHrConsoleTabGroup 33554432 : hrProcessorTable 67108864 : hrNetworkTable
134217728 : hrPrinterTable 268435456 : hrDiskStorageTable 536870912 :
hrPartitionTable 1073741824 : hrFSTable Usage: Conforming management agents
SHALL accurately report their support for IETF Host Resources MIB (RFC 2790)
and XCMI Ext to Host Resources MIB object groups.
"""


class XcmHrSWRunXStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
An extended software status, used by system administrators and end users of
this software (here, read 'state' for 'status'). Note: This extended software
status is present for future extensions.
"""


class XcmHrStorageDetailType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              20,
              21,
              22,
              23,
              24,
              30,
              31,
              32,
              33,
              40,
              41,
              42)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("storageAlias", 4),
          ("storageAllocationUnits", 7),
          ("storageBaseAddress", 40),
          ("storageContext", 9),
          ("storageDescription", 6),
          ("storageFontCache", 20),
          ("storageFormCache", 21),
          ("storageHeapMemory", 30),
          ("storageImageBuffer", 12),
          ("storageInputBuffer", 10),
          ("storageLogoCache", 22),
          ("storageMacroCache", 23),
          ("storageMarkerBuffer", 13),
          ("storageName", 3),
          ("storageOutputBuffer", 11),
          ("storagePageBuffer", 14),
          ("storagePageSize", 42),
          ("storagePrefixMemory", 31),
          ("storageStackMemory", 32),
          ("storageStyleCache", 24),
          ("storageTranslationBuffer", 15),
          ("storageTree", 8),
          ("storageType", 5),
          ("storageWordSize", 41),
          ("storageWorkingBuffer", 16),
          ("storageWorkingMemory", 33),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The type of the storage detail information specified in this conceptual row in
the 'xcmHrStorageDetailTable'. Usage: Used to describe system-, program-, or
thread-level memory allocations/reservations. Usage: 'hrStorageEntry' and
(optionally) 'xcmHrStorageEntry' MAY be referenced via
'xcmSecServiceHrStorageIndex' in the Service group of the XCMI Security MIB.
Usage: Conforming management stations and management agents SHALL implement
specified semantics for storage detail types.
"""


class XcmHrStorageRealization(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11,
              12,
              20,
              21,
              22)
        )
    )
    namedValues = NamedValues(
        *(("logicalProgram", 21),
          ("logicalSystem", 20),
          ("logicalThread", 22),
          ("other", 1),
          ("physicalProgram", 11),
          ("physicalSystem", 10),
          ("physicalThread", 12),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
An extended storage type (or storage 'realization'), used by system
administrators and end users of this storage. Usage: The use of either 'other'
or 'unknown' is uninformative and SHOULD be avoided by conforming
implementations. * 'physicalSystem' - 'real' memory installed on a 'system'
whose product is found via 'xcmHrStorageProductDeviceIndex' and whose CPU is
found via 'xcmHrStoragePlatformDeviceIndex' and whose self is found via
'xcmHrStorageMatchingDeviceIndex'; * 'physicalProgram' - 'real' memory assigned
to a 'program' (memory which is 'pinned' and is NOT paged to disk storage)
whose program is found via 'xcmHrStorageSWRunIndex'; * 'physicalThread' -
'real' memory assigned to a 'thread' (memory which is 'pinned' and is NOT paged
to disk storage) whose program/thread is found via 'xcmHrStorageSWRunIndex'; *
'logicalSystem' - 'virtual' memory assigned to a 'system' (memory which is NOT
'pinned' and MAY be paged to disk storage) whose product is found via
'xcmHrStorageProductDeviceIndex' and whose CPU is found via
'xcmHrStoragePlatformDeviceIndex' and whose self is found via
'xcmHrStorageMatchingDeviceIndex'; * 'logicalProgram' - 'virtual' memory
assigned to a 'program' (memory which is NOT 'pinned' and MAY be paged to disk
storage) whose program is found via 'xcmHrStorageSWRunIndex'; * 'logicalThread'
- 'virtual' memory assigned to a 'thread' (memory which is NOT 'pinned' and MAY
be paged to disk storage) whose program/thread is found via
'xcmHrStorageSWRunIndex'.
"""


class XcmHrDpaAvailability(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 3),
          ("none", 5),
          ("normal", 2),
          ("unknown", 6))
    )

    if mibBuilder.loadTexts:
        description = """\
The generic availability of this system, device, service, etc.
"""


class XcmHrDpaConditions(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The generic conditions (ie, state reasons) of this system, device, service,
etc, specified in a bit-mask. 1 : cleanedByOperator 2 : cleanedBySystem 4 :
disabledByOperator 8 : disabledBySystem 16 : pausedByOperator 32 :
pausedBySystem 64 : shutdownByOperator 128 : shutdownBySystem 256 :
diagnosedByOperator 512 : diagnosedBySystem 1024 : resetByOperator 2048 :
resetBySystem 4096 : startedByOperator 8192 : startedBySystem 65536 :
activeCopy 131072 : activePrint 262144 : activeScan 524288 : activeFaxReceive
1048576 : activeFaxSend 2097152 : activeFileReceive 4194304 : activeFileSend
8388608 : activeMailReceive 16777216 : activeMailSend 33554432 :
activeImageProcess 67108864 : activeOCR 134217728 : activeDistribute Usage: The
above 'conditions' augment the service state in
'xcmSvcMonService[Current|Previous]State' and the service mgmt information in
'xcmSvcMonServiceMgmt[Operation|InProgress]'. Usage: Conforming management
agents SHALL report all 'conditions' of entities accurately. 'Conditions' occur
within or across 'states' in a finite state machine implementation of a system,
device, service, etc. Usage: A service with 'xcmSvcMonServiceCurrentState' of
'ready(1)' might have 'xcmSvcMonServiceConditions' of 'disabledByOperator',
indicating that the service will not accept new jobs. Usage: Multi-bit examples
of 'xcmSvcMonServiceConditions' are 'disabledByOperator' concurrently with
'pausedByOperator' and 'activePrint' concurrently with 'activeMailSend'.
"""


class XcmHrDpaJobValidateSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The job validation support of this system, service, etc, specified in a bit-
mask. The current set of values (which MAY be extended in the future) is given
below: 1 : validateAndProcess 2 : validateSubmitOnly 4 : validateSyntaxOnly 8 :
validateSemanticsOnly 16 : validateLocalOnly 32 : validateDistributed 64 :
validateCreateLocal 128 : validateCreateRemote Usage: Conforming management
agents SHALL accurately report their support for job validation modes.
"""


class XcmHrDpaObjectClassSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The object class support of this system, service, etc, specified in a bit-mask.
The current set of values (which MAY be extended in the future) is given below:
1 : generic 2 : job 4 : printer 8 : server 16 : medium 32 : font 256 :
transferMethod 512 : deliveryMethod 1024 : auxiliarySheet 2048 : finishing 4096
: output 8192 : imposition 16384 : scheduler 32768 : document 65536 : resource
131072 : initialValueJob 262144 : initialValueDocument 524288 : resourceContext
1048576 : auxiliarySheetPackage 16777216 : deviceHostSystem 33554432 :
deviceScanner 67108864 : deviceCopier 134217728 : deviceFax 268435456 :
deviceMailbox 536870912 : deviceFinisher 1073741824 : deviceCRU Usage:
Conforming management agents SHALL accurately report their support for object
classes (ISO DPA and XCMI).
"""


class XcmHrDpaState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("busy", 5),
          ("initializing", 6),
          ("onRequest", 2),
          ("ready", 1),
          ("terminating", 7),
          ("unavailable", 3),
          ("unknown", 4))
    )

    if mibBuilder.loadTexts:
        description = """\
The generic state of this object (system, device, service, etc.). The following
standard values are defined (in section 9.1.6.4 'State' of ISO 10175-1): *
'ready' - This object is ready to be used without human intervention. *
'onRequest' - This object requires human intervention in order to be used. *
'unavailable' - This object is NOT available for use even with human
intervention. * 'unknown' - This state of this object is NOT known. * 'busy' -
This object is temporarily inaccessible due to dynamic constraints, but will
become 'ready' without human intervention. * 'initializing' - This object is
being initialized (and is therefore temporarily inaccessible). * 'terminating'
- This object is being terminated (and is therefore permanently inaccessible).
"""


class XcmHrSuppliesClassTC(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("customerReplacable", 4),
          ("notReplacable", 7),
          ("other", 1),
          ("rarelyReplaced", 6),
          ("replenishable", 3),
          ("serviceReplacable", 5),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The type of a supply.
"""


class XcmHrDetailTableEnumTC(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("finisherSuppliesTable", 3),
          ("markerSuppliesTable", 2),
          ("suppliesTable", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
The table referenced by a row in the xcmHrDetail table. Add additional tables
as details are required.
"""


class XcmHrConsoleDefaultService(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("copyService", 1),
          ("faxService", 3),
          ("printService", 4),
          ("scanService", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The default service shown on the console user interface.
"""


class XcmPrtAuxSheetContent(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("concise", 5),
          ("notSpecified", 3),
          ("other", 1),
          ("unknown", 2),
          ("verbose", 6))
    )

    if mibBuilder.loadTexts:
        description = """\
 Auxiliary sheets are added by the printing system and are not part of the
actual print job. Examples include error pages and banner pages. This textual
convention is used to specify the information content of auxiliary sheets.
"""


class XcmPrtAuxSheetType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-3,
              -2,
              -1,
              1,
              2,
              101,
              102)
        )
    )
    namedValues = NamedValues(
        *(("jobErrorSheet", 102),
          ("jobSetEnd", 2),
          ("jobSetStart", 1),
          ("notSpecified", -3),
          ("other", -1),
          ("printerStartupSheet", 101),
          ("unknown", -2))
    )

    if mibBuilder.loadTexts:
        description = """\
 Auxiliary sheets are added by the printing system and are not part of the
actual print job. This attribute uniquely identifies an auxiliary-sheet, which
includes the types jobErrorSheet and printerStartupSheet. 'printerStartupSheet'
is a sheet printed shortly after power-up when the device is ready. Typical
startup pages include test patterns and/or printer configuration information.
'jobErrorSheet' is a sheet printed with error messages generated during the
printing of a job-result-set that is to be printed with the hardcopy output of
that job-result-set, and should be printed on an ending sheet of the job-
result-set, or some similar sheet. These sheets are not a part of any job-copy.
If no error messages have been generated, the device need not print an extra
page. The default for this page type should be 'On'. The following Auxiliary-
sheet-package types can be specified either for a job component (job result set
or job copy) or document (document result set or document copy). For now, only
the jobSetStart package has been enumerated. 'jobSetStart' - Auxiliary-sheet
starts each result-set Sometimes referred to as a jobBanner sheet 'jobSetEnd' -
Auxiliary-sheet at the end of a result set
"""


class XcmPrtChannelType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              26,
              27,
              28,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("chAppSocket", 12),
          ("chAppleTalkADSP", 40),
          ("chAppleTalkPAP", 7),
          ("chBidirPortTCP", 38),
          ("chCPAP", 21),
          ("chDECLAT", 32),
          ("chDLCLLCPort", 15),
          ("chFTP", 13),
          ("chFax", 18),
          ("chIBM3270", 16),
          ("chIBM5250", 17),
          ("chIEEE1284Port", 5),
          ("chIEEE1394", 19),
          ("chIRDA", 35),
          ("chLPDServer", 8),
          ("chNDPS", 43),
          ("chNPAP", 33),
          ("chNetwarePServer", 10),
          ("chNetwareRPrinter", 9),
          ("chPCPrint", 26),
          ("chPSM", 28),
          ("chParallelPort", 4),
          ("chPort9100", 11),
          ("chPortHTTP", 42),
          ("chPortSPX", 41),
          ("chPortTCP", 37),
          ("chPrintXChange", 36),
          ("chSCSIPort", 6),
          ("chSerialPort", 3),
          ("chServerMessageBlock", 27),
          ("chSystemObjectManager", 31),
          ("chTFTP", 14),
          ("chTransport1", 20),
          ("chUNPP", 39),
          ("chUSB", 34),
          ("other", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
 This enumeration indicates the type of channel that is receiving jobs. This
enumeration is being added to the IETF Printer MIB. This is an IETF type 2
enum.
"""


class XcmPrtGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional Printer MIB Extension object groups, specified in a bit-mask. The
current set of values (which may be extended in the future) is given below: 1 :
xcmPrtBaseGroup 2 : xcmPrtGeneralGroup 4 : xcmPrtInputGroup 8 :
xcmPrtOutputGroup 16 : xcmPrtChannelGroup 32 : xcmPrtInterpreterGroup 64 :
xcmPrtInputAliasGroup 128 : xcmPrtGeneralAuxSheetGroup 256 :
xcmPrtGeneralProdSpecificGroup 512 : xcmPrtAuxPackageGroup 1024 :
xcmPrtChannelProdSpecificGroup 2048 : xcmPrtInterpProdSpecificGroup 4096 :
xcmPrtInterpPCLGroup 8192 : xcmPrtInterpPCLProdSpecificGroup 16384 :
xcmPrtMediumTypeSupportedGroup 32768 : xcmPrtGeneralInstalledOptionsGroup
Usage: Conforming management agents shall ALWAYS accurately report their
support for XCMI Printer MIB Extensions object groups.
"""


class XcmPrtIETFPrintMIBGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional IETF Printer MIB object groups, specified in a bit-mask. The current
set of values (which may be extended in the future) is given below: 1 :
prtGeneralGroup 2 : prtResponsiblePartyGroup 4 : prtInputGroup 8 :
prtExtendedInputGroup 16 : prtInputMediaGroup 32 : prtOutputGroup 64 :
prtExtendedOutputGroup 128 : prtOutputDimensionsGroup 256 :
prtOutputFeaturesGroup 512 : prtMarkerGroup 1024 : prtMarkerSuppliesGroup 2048
: prtMarkerColorantGroup 4096 : prtMediaPathGroup 8192 : prtChannelGroup 16384
: prtInterpreterGroup 32768 : prtConsoleGroup 65536 : prtAlertTableGroup 131072
: prtAuxiliarySheetGroup 262144 : prtInputSwitchingGroup Usage: Conforming
management agents shall ALWAYS accurately report their support for IETF Printer
MIB object groups.
"""


class XcmPrtInterpreterLangFamily(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58)
        )
    )
    namedValues = NamedValues(
        *(("langART", 48),
          ("langAutomatic", 37),
          ("langCCITT", 26),
          ("langCPAP", 28),
          ("langCaPSL", 43),
          ("langCodeV", 22),
          ("langDDIF", 11),
          ("langDOC", 32),
          ("langDSCDSE", 23),
          ("langDecPPL", 29),
          ("langDiagnostic", 41),
          ("langEXCL", 44),
          ("langEpson", 10),
          ("langEscapeP", 9),
          ("langHPGL", 4),
          ("langIDP", 52),
          ("langIGP", 21),
          ("langIPDS", 7),
          ("langISO6429", 13),
          ("langIntermecIPL", 56),
          ("langInterpress", 12),
          ("langLCDS", 45),
          ("langLIPS", 39),
          ("langLN03", 25),
          ("langLineData", 14),
          ("langLinePrinter", 51),
          ("langMODCA", 15),
          ("langNEC201PL", 36),
          ("langNPAP", 31),
          ("langNPDL", 35),
          ("langPCL", 3),
          ("langPCLXL", 47),
          ("langPDF", 54),
          ("langPDS", 20),
          ("langPJL", 5),
          ("langPPDS", 8),
          ("langPS", 6),
          ("langPSPrinter", 42),
          ("langPages", 38),
          ("langPinwriter", 34),
          ("langPrescribe", 50),
          ("langQUIC", 27),
          ("langREGIS", 16),
          ("langRPDL", 55),
          ("langSCS", 17),
          ("langSPDL", 18),
          ("langSimpleText", 30),
          ("langTEK4014", 19),
          ("langTIFF", 40),
          ("langTIPSI", 49),
          ("langUBIDirectProtocol", 58),
          ("langUBIFingerprint", 57),
          ("langWPS", 24),
          ("langXES", 46),
          ("langXJCL", 53),
          ("langimPress", 33),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 This enumeration indicates the type of interpreter that is receiving jobs.
This enumeration is being added to the IETF Printer MIB. This value is an IETF
type 2 enumeration.
"""


class XcmPrtMediaTypeErrorPolicy(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              11)
        )
    )
    namedValues = NamedValues(
        *(("abortJob", 4),
          ("ignore", 5),
          ("ignoreAfterTimeout", 11),
          ("interactWithOperator", 6),
          ("notSpecified", 3),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 Controls interpreter behavior when the requested Media Type is not currently
available. * The values 'other' and 'unknown' are deprecated for conforming
implementations. * 'abortJob' will cause the interpreter to abort the job with
an appropriate error condition. * 'ignore' will cause the job to be printed on
the default media as specified by xcmPrtInterpInputIndexDefault OR
xcmPrtInterpPaperSizeDefault OR any available media deemed appropriate by the
implementation. No adjustment will be made to the image size. Exact semantics
of this setting are product specific. * 'interactWithOperator' will cause the
printer to interact with the operator to determine what to do. For example,
display a message at the operator console requesting the desired media. The
semantics of this policy vary among different products and environments. *
'ignoreAfterTimeout' will cause the job to be ignored same as 'ignore' above,
but not till after xcmPrtInterpErrorPolicyTimeout expires.
"""


class XcmPrtMediumClassType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("iso", 5),
          ("jis", 6),
          ("northAmerica", 4),
          ("notSpecified", 3),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 Paper size classes for a printer.
"""


class XcmPrtMediumSize(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              10,
              1000,
              1001,
              1002,
              1003,
              1004,
              1005,
              1006,
              1007,
              1008,
              1009,
              1010,
              1011,
              1012,
              1013,
              1014,
              1015,
              1016,
              1020,
              1021,
              1022,
              1023,
              1024,
              1025,
              1026,
              1027,
              1028,
              1029,
              1030,
              1040,
              1041,
              1042,
              1043,
              1044,
              1045,
              1046,
              1047,
              1048,
              1049,
              1050,
              1063,
              1064,
              1065,
              1066,
              1067,
              1080,
              1081,
              1082,
              1083,
              1084,
              1085,
              1086,
              1087,
              1088,
              1089,
              1090,
              1100,
              1101,
              1102,
              1103,
              1104)
        )
    )
    namedValues = NamedValues(
        *(("a", 1011),
          ("b", 1012),
          ("c", 1013),
          ("d", 1014),
          ("e", 1015),
          ("executive", 1100),
          ("folio", 1101),
          ("invoice", 1102),
          ("isoA0", 1020),
          ("isoA1", 1021),
          ("isoA10", 1030),
          ("isoA2", 1022),
          ("isoA3", 1023),
          ("isoA4", 1024),
          ("isoA5", 1025),
          ("isoA6", 1026),
          ("isoA7", 1027),
          ("isoA8", 1028),
          ("isoA9", 1029),
          ("isoB0", 1040),
          ("isoB1", 1041),
          ("isoB10", 1050),
          ("isoB2", 1042),
          ("isoB3", 1043),
          ("isoB4", 1044),
          ("isoB5", 1045),
          ("isoB6", 1046),
          ("isoB7", 1047),
          ("isoB8", 1048),
          ("isoB9", 1049),
          ("isoC3", 1063),
          ("isoC4", 1064),
          ("isoC5", 1065),
          ("isoC6", 1066),
          ("isoDesignatedLong", 1067),
          ("jisB0", 1080),
          ("jisB1", 1081),
          ("jisB10", 1090),
          ("jisB2", 1082),
          ("jisB3", 1083),
          ("jisB4", 1084),
          ("jisB5", 1085),
          ("jisB6", 1086),
          ("jisB7", 1087),
          ("jisB8", 1088),
          ("jisB9", 1089),
          ("ledger", 1103),
          ("mediumSize13x18", 10),
          ("monarchEnvelope", 1016),
          ("na10x13Envelope", 1002),
          ("na10x14Envelope", 1007),
          ("na10x15Envelope", 1010),
          ("na6x9Envelope", 1009),
          ("na7x9Envelope", 1005),
          ("na9x11Envelope", 1006),
          ("na9x12Envelope", 1003),
          ("naLegal", 1001),
          ("naLetter", 1000),
          ("naNumber10Envelope", 1004),
          ("naNumber9Envelope", 1008),
          ("notSpecified", 3),
          ("other", 1),
          ("quarto", 1104),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 This attribute specifies the size of this medium by means of a pre-defined
value. The medium size specified in this manner may be one of the standard
sizes to which object identifiers have been assigned in ISO/IEC 10175 (DPA), or
another applicable standard, or for which a value has been created.
Enumerations for DPA defined medium sizes are derived by adding 1000 to the
ISO/IEC 10175 enumerations. XCMI defined enumerations start at 10.
"""


class XcmPrtOutputOffsetStackingType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("noOffset", 4),
          ("notSpecified", 3),
          ("offsetOnJob", 5),
          ("offsetOnJobandCopy", 6),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 Offset stacking types further refining that specified by the object
prtOutputOffsetStacking in the Printer MIB. - offsetOnJob means that each job
is offset but copies within the job are not offset. - offsetOnJobAndCopy means
that there is an offset on job and copy boundaries.
"""


class XcmPrtOutputStaplePosition(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
 This Textual Convention enumerates possible staple positions. The staple
positions enumerated are relative to the physical layout of the finishing
device. The observer is on the front side of the finisher which is defined as
for sheets passing through the finisher. The 'front' side is the side from
which staples are pushed. The physical corners of the finishing device are
specified by designating the corner of the finisher where a portrait long-edge
fed sheet with english/left-to-right text is stapled as staplePosCorner1, and
then the other corners are numbered in a counter-clockwise direction with the
observer on the front side of the finisher. 'staplePosCorner1',
'staplePosCorner2', 'staplePosCorner3', and 'staplePosCorner4' indicate a
single staple in the specified corner. This object does not specify the angle
of the staple, e.g. 90, 45 or zero degrees. 'stapleEdge...' indicates multiple
staples on the edge specified. 'stapleEdge12' is the edge which include Corner1
and Corner2. The current set of values (which may be extended in the future) is
given below: 1 : staplePosCorner1 2 : staplePosCorner2 4 : staplePosCorner3 8 :
staplePosCorner4 16 : stapleEdge12 32 : stapleEdge23 64 : stapleEdge34 128 :
stapleEdge14 -- 2**7
"""


class XcmPrtPageSizeErrorPolicy(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("abortJob", 4),
          ("ignore", 5),
          ("ignoreAfterTimeout", 11),
          ("interactWithOperator", 6),
          ("notSpecified", 3),
          ("other", 1),
          ("unknown", 2),
          ("useNearest", 9),
          ("useNearestAndAdjust", 7),
          ("useNextLarger", 10),
          ("useNextLargerAndAdjust", 8))
    )

    if mibBuilder.loadTexts:
        description = """\
 Controls interpreter behavior when the requested Page Size is not currently
available. * The values 'other' and 'unknown' are deprecated for conforming
implementations. * 'abortJob' will cause the interpreter to abort the job with
an appropriate error condition. * 'ignore' will cause the job to be printed on
the default media as specified by xcmPrtInterpInputIndexDefault OR
xcmPrtInterpPaperSizeDefault OR any available media deemed appropriate by the
implementation. No adjustment will be made to the image size. Exact semantics
of this setting are product specific. * 'interactWithOperator' will cause the
printer to interact with the operator to determine what to do. For example,
display a message at the operator console requesting the desired media. The
semantics of this policy vary among different products and environments. *
'useNearestAndAdjust' will cause the job to be printed on the nearest available
media (as described below). The interpreter will adjust the image size (by
scaling and centering) to fit. * 'useNextLargerAndAdjust' will cause the job to
be printed on the next larger available media (as described below). The
interpreter will adjust the image size (by scaling and centering) to fit. *
'useNearest' will cause the job to be printed on the nearest available media
(as described below). No adjustment will be made to the image size. *
'useNextLarger' will cause the job to be printed on the next larger available
media (as described below). No adjustment will be made to the image size. *
'ignoreAfterTimeout' will cause the job to be ignored same as ignore' above,
but not till after xcmPrtInterpErrorPolicyTimeout expires. In the above
descriptions, nearest size is defined as the one closest in area to the
requested size. The next larger size is the one that is at least as large as
the requested size in both width and height and is smallest in area. To adjust
the page means to scale the page image (if necessary) to fit the medium, then
center the image on the medium.
"""


class XcmPrtPCLFontSource(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              20,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              80)
        )
    )
    namedValues = NamedValues(
        *(("cartridge1", 61),
          ("cartridge2", 62),
          ("cartridge3", 63),
          ("cartridge4", 64),
          ("cartridge5", 65),
          ("cartridge6", 66),
          ("cartridge7", 67),
          ("cartridge8", 68),
          ("cartridge9", 69),
          ("internal", 20),
          ("notSpecified", 3),
          ("other", 1),
          ("permanentSoft", 80),
          ("romSimm1", 41),
          ("romSimm2", 42),
          ("romSimm3", 43),
          ("romSimm4", 44),
          ("romSimm5", 45),
          ("romSimm6", 46),
          ("romSimm7", 47),
          ("romSimm8", 48),
          ("romSimm9", 49),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\

"""


class XcmPrtPlex(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
 This Textual Convention enumerates plex modes which may be supported by a
printer or interpreter. A plex mode specifies whether pages are to be printed
one-sided or two-sided, as well as the content orientation between consecutive
pages. For the XcmPrtPlex TC, the following definitions apply: 'one-sided' -
Print on only one side of each sheet. 'two-sided' - Print on both sides of each
sheet. 'simplex' - The document pages are to be oriented so as to condition
them for one-sided printing. 'long-edge-bind' - The document pages are to be
oriented so as to condition them for two-sided printing, bound along the length
(the longer edge) of the physical page. 'short-edge-bind' - The document pages
are to be oriented so as to condition them for two-sided printing, bound along
the width (the shorter edge) of the physical page. XcmPrtPlex's representation
is bit-encoded, so that a device may show multiple plex modes supported. The
value zero shall mean notSpecified. The following XcmPrtPlex values and
meanings are defined: 0x001 simplex, one-sided 0X002 simplex, two-sided 0x010
long-edge-bind, one-sided 0x020 long-edge-bind, two-sided 0x040 short-edge-
bind, one-sided 0x080 short-edge-bind, two-sided The following describes the
relationship of the xcmPrtPlex modes to DPA, PostScript and PCL. DPA: In DPA,
Plex specifies whether the page images of the output document are to be
conditioned for (eventual) one-sided or two-sided printing, and also specifies
whether the relative orientation between consecutive page-images is to be
altered. In DPA, the Plex modes specified are named 'Simplex', 'Duplex' and
'Tumble'. However, 'Duplex' would more accurately be named bindLongEdge, and
'Tumble' would more accurately be named bindShortEdge. As written in DPA,
'Whether the images are portrait or landscape, the binding edge is parallel to:
the y axis for 'duplex', and the x axis for 'tumble'. This last observation is
important for understanding when to use 'tumble'. If the binding edge of the
document is along the y-axis, the plex is 'duplex', whether the orientation is
portrait or landscape, and if the binding-edge is along the x-axis, the plex is
'tumble', whether the orientation is portrait or landscape. In DPA, a separate
attribute, 'Sides', specifies 1-sided or 2-sided printing. In DPA, the value of
this attribute may also be used by the presentation processes of some document
formats to determine whether or not to print certain designated pages (e.g. the
extra blank pages needed in two-sided printing to cause sections to begin on
the righthand side of a book, or recto page). The following enumerations are
relevant to DPA: simplexOneSided, simplexTwoSided, bindLongEdgeOneSided,
bindLongEdgeTwoSided, bindShortEdgeOneSided, bindShortEdgeTwoSided. PostScript:
In PostScript, the keys 'duplex' and 'tumble' are booleans which specify
relative orientation between consecutive pages, and to the number of sides
printed. If 'Duplex' is False, pages are printed 1-sided, i.e. 'simplex'. If
'Duplex' is True, pages are printed 2-sided. (For most PostScript interpreters,
only when 'Duplex' is set to True) 'Tumble' specifies how the page images on
opposite sides of a sheet are oriented with respect to each other. If 'Tumble'
is False, the default user spaces of the two pages are oriented such that the
highest value of y in the two spaces lie along the same edge of the media.
Informally, a Tumble value of False produces output suitable for binding on the
left or right. When the default user space is set to a portrait 'pagesize',
setting Tumble to false is the same as using the XcmPrtPlex attribute
longEdgeBind. When the default user space is set to a landscape 'pagesize',
setting Tumble to false is the same as using the XcmPrtPlex attribute
shortEdgeBind. If 'Tumble' is True, the default user spaces of the two pages
are oriented such that the highest value of y in the two spaces lie along
opposite edges of the media. Informally, a Tumble value of True produces output
suitable for binding on the top or bottom. When the default user space is set
to a landscape 'pagesize', setting Tumble to true is the same as using the
XcmPrtPlex attribute shortEdgeBind. When the default user space is set to a
landscape 'pagesize', setting Tumble to true is the same as using the
XcmPrtPlex attribute longEdgeBind. The following XcmPrtPlex enumerations are
relevant to PostScript: bindLongEdgeOneSided, bindLongEdgeTwoSided,
bindShortEdgeOneSided, bindShortEdgeTwoSided. Typically (ie, for a Portrait
default user space): OneSided maps to the duplex boolean set to false TwoSided
maps to the duplex boolean set to true bindEdgeLong maps to the tumble boolean
set to false bindEdgeShort maps to the tumble boolean set to true PCL: In PCL,
the attributes simplex, duplex long-edge-binding, and duplex short-edge-
binding, along with content orientation, landscape or portrait, detail the
number of sides to be printed, content orientation, and relative orientation
between consecutive pages. The PCL model matches that of DPA. The following
XcmPrtPlex enumerations are relevant to PCL: simplexOneSided,
bindLongEdgeTwoSided, bindShortEdgeTwoSided.
"""


class XcmPrtPrintQuality(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("draft", 4),
          ("high", 6),
          ("normal", 5),
          ("notSpecified", 3),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 These attributes specify the output quality of the printed document. Some
printers have programmatically controlled output quality. This attribute allows
the user to specify the level of output quality desired from printers. The
following standard values are defined: - 'draft' means lowest quality available
on the printer. Uses include increasing the printer's speed and saving toner. -
'normal' means normal or intermediate quality on the printer. - 'high' means
highest quality available on the printer.
"""


class XcmPrtPrintScreen(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("mode850", 5),
          ("mode852", 6),
          ("notSpecified", 3),
          ("off", 4),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
 This Textual-Convention enumerates special modes for 80 character screen dumps
onto A4 size paper, which is usually 77 characters wide. This function is
useful when printing the 80 characters per line width of computer displays. The
PrintScreen mode enables characters to be printed as shown on the display when
PrintScreen is executed from the host. When mode850 or mode852 is set, the
following is done: - Symbol set value changed to PC-850 or PC-852. with the
current Symbol set value being stored. - A4 size horizontal printable area
expanded to being 80 characters wide. When the special mode is returned to Off,
the following is done: - Symbol set value returned to the stored SymbolSet
Value. - A4 size horizontal printable area returned to being 77 characters.
"""


class XcmPrtTraySwitch(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notSpecified", 3),
          ("off", 4),
          ("other", 1),
          ("unknown", 2),
          ("useXcmPrtInputAliasTable", 6),
          ("useXcmPrtInputNextPrtInputIndex", 5))
    )

    if mibBuilder.loadTexts:
        description = """\
 This Textual-Convention enumerates which tray switching declaration mechanism
is used.
"""


class XcmPrtGeneralMonoPrintOpt(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 5),
          ("optimizeForEconomy", 4),
          ("optimizeForSpeed", 3),
          ("other", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
 These attributes specify the printing performance / economy mode setting.
"""


class XcmPrtOutputPunchPosition(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
 This Textual Convention enumerates possible punch positions. The punch
positions enumerated are the number of punch positions that can be supported by
the finishing device. punchPos2Hole is used to indicate a two-hole punch
option. punchPos3Hole is used to indicate a three-hole punch option.
punchPos4Hole is used to indicate a four-hole punch option. The current set of
values (which may be extended in the future) is given below: 1 : punchPos2Hole
2 : punchPos3Hole 4 : punchPos4Hole -- 2**2
"""


class XcmPrtInputTraysConfiguration(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("fiveTrays", 5),
          ("fiveTraysAndOneBypass", 12),
          ("fiveTraysAndOneBypassAndOneHCF", 15),
          ("fiveTraysAndOneHCF", 9),
          ("fourTrays", 4),
          ("fourTraysAndOneBypass", 11),
          ("fourTraysAndOneBypassAndOneHCF", 14),
          ("fourTraysAndOneHCF", 8),
          ("oneFeederWithFourTrays", 18),
          ("oneFeederWithTwoTrays", 16),
          ("oneTray", 1),
          ("sixTrays", 6),
          ("threeTrays", 3),
          ("threeTraysAndOneBypass", 10),
          ("threeTraysAndOneBypassAndOneHCF", 13),
          ("threeTraysAndOneHCF", 7),
          ("twoFeedersWithEightTrays", 19),
          ("twoFeedersWithFourTrays", 17),
          ("twoTrays", 2),
          ("undefined", 0))
    )

    if mibBuilder.loadTexts:
        description = """\
 This Textual Convention identifies all possible input tray combinations for a
print device.
"""


class XcmPrtFinisherDFAType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dfaFinisher", 3),
          ("notInstalled", 2),
          ("other", 1),
          ("sbm", 4))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of Finisher DFA
modules that could be installed within a print device.
"""


class XcmPrtHighCapacityFeederType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("hcf", 3),
          ("hcfOversized", 4),
          ("hcfOversized2Trays", 5),
          ("notInstalled", 2),
          ("other", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of High Capacity
Feeders that could be installed within a print device.
"""


class XcmPrtHolePunchUnitType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 2),
          ("other", 1),
          ("punch2And3And4HoleStack", 24),
          ("punch2And3And5HoleNASheet", 21),
          ("punch2And3HoleNAStack", 10),
          ("punch2And3HoleStack", 22),
          ("punch2And4HoleEUStack", 11),
          ("punch2And4HoleStack", 23),
          ("punch2HoleEUSheet", 5),
          ("punch2HoleEUStack", 14),
          ("punch2HoleNASheet", 4),
          ("punch2HoleNAStack", 13),
          ("punch2HoleSheet", 3),
          ("punch2HoleStack", 12),
          ("punch3HoleNASheet", 6),
          ("punch3HoleNAStack", 16),
          ("punch3HoleStack", 15),
          ("punch4HoleEUSheet", 8),
          ("punch4HoleEUStack", 18),
          ("punch4HoleSheet", 7),
          ("punch4HoleStack", 17),
          ("punch4HoleSwedishSheet", 9),
          ("punch4HoleSwedishStack", 19),
          ("punch5HoleNASheet", 20))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of Hole Punch
Units that could be installed within a print device.
"""


class XcmPrtFaxOutType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("faxLanAndIp", 5),
          ("faxWithsip", 4),
          ("installed", 3),
          ("notPresent", 2),
          ("other", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of Fax Out Units
that could be installed within a print device.
"""


class XcmPrtPhaserModuleType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("b", 3),
          ("dn", 5),
          ("dp", 9),
          ("dt", 6),
          ("dx", 7),
          ("dxf", 10),
          ("gx", 8),
          ("n", 4),
          ("notSpecified", 2),
          ("other", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of configurations
for a Phaser print device.
"""


class XcmPrtPrintEngineType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dual", 3),
          ("other", 1),
          ("single", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of print engine
configurations that could be supported by a print device.
"""


class XcmPrtAsciiJobTicketType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("asciiJobTicketAllowed", 4),
          ("asciiJobTicketRequired", 3),
          ("notPresent", 2),
          ("other", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of ASCII Job
Tickets that could be supported by a print device.
"""


class XcmPrtAuthenticationModeType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("commonAccessCardPiv", 3),
          ("notPresent", 2),
          ("other", 1),
          ("password", 6),
          ("pin", 5),
          ("s3", 4),
          ("smartCard", 7))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of Authentication
Modes that could be supported by a print device.
"""


class XcmPrtHoldForAuthenModeType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 2),
          ("other", 1),
          ("pin", 3),
          ("userId", 4))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of Hold for
Authentication Modes that could be supported by a print device.
"""


class XcmPrtAccountingSystemType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("accountingGreenAccountOnly", 6),
          ("accountingGreenAll", 9),
          ("accountingGreenBillingOnly", 7),
          ("accountingGreenUserAndAccount", 8),
          ("accountingGreenUserOnly", 5),
          ("network", 4),
          ("notPresent", 2),
          ("other", 1),
          ("standard", 3))
    )

    if mibBuilder.loadTexts:
        description = """\
This collection of enumerations indicate the posssible types of Accounting
Systems that could be supported by a print device.
"""


class XcmRsrcGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
Indicators for each primary object group of the Document Resources MIB, used to
indicate which groups are supported by this host system, specified by a bit-
mask: 1 : xcmRsrcGeneral 2 : xcmRsrcInfo 4 : xcmFontInfo 8 : xcmFontPCLInfo --
2**3 : PCL font group
"""


class XcmRsrcType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("font", 3),
          ("form", 5),
          ("image", 6),
          ("logo", 4),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The type of this resource, from the given enumeration.
"""


class XcmRsrcPersistence(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("nonvolatile", 4),
          ("other", 1),
          ("permanent", 5),
          ("unknown", 2),
          ("volatile", 3))
    )

    if mibBuilder.loadTexts:
        description = """\
Describes the persistence of this resource. Permanent, or resident, resources
are built into the device and cannot be removed. They may, for example, be in
ROM, or on hard disk with read-only access. (Note that HP PCL considers a
resource to be 'permanent' if it persists across jobs, but such resources are
not necessarily permanent by the definition used here.) Nonvolatile resources
may be removed by appropriate action, but otherwise persist indefinitely,
including across device power cycles. They may, for example, be on hard disk,
or in a ROM cartridge. (The type of action required to remove the resource,
e.g. file deletion or ROM cartridge removal, can generally be deduced from the
hrStorageType of the storage device containing the resource.) Volatile
resources are lost across device power cycles. They are typically in RAM.
Reference: 'xcmRsrcHrStorageIndex' in this Resources MIB; and 'hrStorageType'
in IETF Host Resources MIB (RFC 1514, September 1993) on page 8 (which directly
relate to the actual level of 'persistence').
"""


class XcmFontType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("pclIntellifont", 11),
          ("pclSoftFont", 10),
          ("psCIDType0", 7),
          ("psCIDType1", 8),
          ("psCIDType2", 9),
          ("psType0", 5),
          ("psType1", 3),
          ("psType14", 13),
          ("psType2", 14),
          ("psType3", 4),
          ("psType42", 6),
          ("unknown", 2),
          ("xeroxICF", 12))
    )

    if mibBuilder.loadTexts:
        description = """\
The representation type or format of this font, from the given enumeration.
"""


class XcmFontSpacing(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fixedSpacing", 3),
          ("other", 1),
          ("proportionalSpacing", 4),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The kind of spacing of the characters in this font, from the given enumeration.
"""


class XcmFontPCLStyle(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("compressed", 7),
          ("condensed", 5),
          ("condensedItalic", 6),
          ("expanded", 8),
          ("inline", 10),
          ("italic", 4),
          ("other", 1),
          ("outline", 9),
          ("outlineShadowed", 12),
          ("shadowed", 11),
          ("unknown", 2),
          ("upright", 3))
    )

    if mibBuilder.loadTexts:
        description = """\
The style of the font, from the given enumeration. See: 'PCL 5 Printer Language
Technical Reference Manual' and 'PCL 5 Comparision Guide' by Hewlett-Packard
Corporation.
"""


class XcmFontPCLStrokeWeight(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("black", 15),
          ("bold", 13),
          ("demiBold", 12),
          ("demiLight", 8),
          ("extraBlack", 16),
          ("extraBold", 14),
          ("extraLight", 6),
          ("extraThin", 4),
          ("light", 7),
          ("medium", 10),
          ("other", 1),
          ("semiBold", 11),
          ("semiLight", 9),
          ("thin", 5),
          ("ultraBlack", 17),
          ("ultraThin", 3),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The PCL stroke weight of the font, from the given enumeration. These
enumeration values are generally equal to the usual PCL stroke weight values +
10. See: 'PCL 5 Printer Language Technical Reference Manual' and 'PCL 5
Comparision Guide' by Hewlett-Packard Corporation.
"""


class XcmJMJobServiceTypeOID(TextualConvention, ObjectIdentifier):
    status = "current"
    if mibBuilder.loadTexts:
        description = """\
Specifies the type of service to which the job has been submitted. The service
type is represented as a single OID, rather than as an OID for a source-type
and an OID for a destination-type, so that more general and arbitrary service
types can be created, such as services with more than one destination type, or
ones with only a source or only a destination.
"""


class XcmJMJobState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              6,
              7,
              8,
              11,
              12,
              13,
              14,
              17,
              18)
        )
    )
    namedValues = NamedValues(
        *(("completed", 17),
          ("created", 3),
          ("held", 12),
          ("interrupted", 8),
          ("other", 1),
          ("paused", 13),
          ("pending", 6),
          ("printing", 18),
          ("processing", 7),
          ("retained", 11),
          ("terminating", 14),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
A job may be in any of the states defined by this textual- convention. The
Xerox Job model is a refinement of the ISO DPA standard and generalizes to non-
printing devices. The textual definitions given here are an abbreviation of the
full specification of the semantics of the job states given in the Xerox Job
Model specification. Agent implementers of this MIB need to refer to the Xerox
Job Model specification in addition to this textual convention. Traps shall be
generated when a job performs a job state transition. In order to reduce
network traffic, it is recommended, but not required, that an implementation
suppress traps for self-loops. The xcmJobPreviousState can be used to detect
self-loops and suppress self-loop traps by not sending traps when the value of
the xcmJobPreviousState is the same as the value of the xcmJobCurrentState.
When a job is in the processing state, the state of the assigned device(s) is
needed to fully represent the state of the job. In addition, the job-state-
reasons attributes provides additional, more abstract, user feedback about what
is happening to the job when the job is in many of its states. See the Xerox
Job Model Specification, Phase 1 or later for the specification of which job-
state-reasons values may be used with which job states.. ISO DPA: Job-current-
state Standard values are defined for the current-job-state and previous-job-
state attributes of the DPA job object, as follows: unknown The job state is
not known, or is indeterminate, or is not returned by the operation. (id-val-
job-state-unknown) creating The job has been created on the server by the
create-job sub-operation of the Submit request, but a Submit request with
neither (1) a TRUE value for the job-submission-complete component of the
SubmitArgument nor (2) a TRUE value for the job-process-before-completely-
specified (long jobs) job attribute has not yet been received and no document
has started processing. The job maybe in the process of being checked by the
server for attributes, defaults being applied, a device being selected, etc.
[Renamed from ISO DPA pre-processing state, but kept the same enum code, since
the semantics are identical.] (id-val-job- state-pre-processing) NOTE: The
Xerox Job Model transitory state: evaluate-hold shall not be visible to
requesters, and therefore is not in the Job Monitoring MIB. held The job is
waiting to be released for scheduling for any number of reasons as specified by
the value of the job's job- state-reasons attribute. (id-val-job- state-held)
See the Xerox Job Model Specification, Phase 1 or later for the specification
of which job-state-reasons values may be used when the job is in the held
state. pending The job is waiting to start processing on a device and has no
shared system resources assigned to it yet. (id-val-job-state-pending) [The ISO
DPA processing and printing states have been combined into a single job state,
called processing, which includes any device activity, so that the job life
cycle can be used for all kinds of jobs, not just printing jobs, and have the
same life cycle. The printing state is DEPRECATED. In addition, the difference
between the ISO DPA processing state and printing state was one of user feed
back only. The standard specified no differences in job state transitions
between the processing and printing states. Therefore, ISO DPA should have used
the device- state-of-devices-assigned mechanism to provide the user feedback
distinction between the processing and printing states. In fact, neither
Novell's NDPS nor IBM's PSM DPA products implement the printing state, only the
processing state. Only Printxchange implements the printing state (as well as
the processing state). So we will propose to ISO DPA that the DPA printing
state be deprecated. [For convenience in understanding the difference between
ISO DPA and the Job Monitoring MIB (and the Xerox Job Model), the ISO DPA
processing and printing specifications are given here first, followed by the
new (Xerox) definition of processing which incorporates the semantics of the
ISO DPA processing and printing states, and extends these semantics to sub-
jobs.] [ISO DPA processing specification: The server is processing the job, or
has made the job ready for printing, but the output device is not yet printing
it, either because the job hasn't reached the output device or because the job
is queued in the output device or some other spooler, awaiting the output
device to print it.] [ISO DPA printing state specification which is DEPRECATED
by the Job Monitoring MIB: The server has completed processing the job and the
output device is currently printing the job on at least one printer. That is, a
print engine is either printing pages of the job, or failing in its attempt to
print pages of the job because of some wait state, such as, start-wait, end-
wait, needs-attention, etc. The complete job state includes the detailed status
represented in the printers' printer- state attribute(s).] [The following Xerox
definition of the 'processing' job state combines the ISO DPA processing and
printing states into a single state, called 'processing', which can be used
with any kind of device: processing The server is: (1) processing the job, or
(2) has made the job ready for processing, but the device is not yet processing
it, either: (a) because the job hasn't reached the device or (b) because the
job is queued in the device or some other spooler, awaiting the device to
process it or (3) has completed processing the job and the device is currently
processing (printing, scanning, sending-fax, receiving-fax, sending-e-mail,
filing, or retrieving) the job on at least one device. That is, a device is
either performing input-output of the job, or failing in its attempt to perform
input-output of the job because of some wait state, such as, start-wait, end-
wait, needs-attention, etc. Additional information about the job's current
state is also given in the job's job-state-reasons attribute for when the job
is in any of its states, including processing. See the Xerox Job Model for
which values of the job's job-state-reasons attribute may be used when the job
is in the processing state. NOTE: DPA does not yet have any job-state-reasons
defined for the processing/printing states. (id-val-job-state-processing)]
paused The job has been paused as a result of a PauseJob request. NOTE: The
Xerox Job Model has renamed the PauseJob and ResumeJob operations to HoldJob
and ReleaseJob and has changed the semantics to put the job back into the held
state, with the job-hold attribute set to TRUE and the job-hold-set value added
to the job-state-reasons attribute instead of putting into the paused state. So
the paused state remains only for use with ISO DPA systems that have
implemented the paused state. (id-val-job-state-paused) interrupted The job was
interrupted by the InterruptJob request for an intervening job, and shall
resume processing automatically once the intervening job has completed. The
interrupted job may relinquish shared resources and devices to the interrupting
job, but not to other jobs. (id-val-job-state-interrupted) terminating The job
has been cancelled by a CancelJob request or aborted by the server and is in
the process of terminating. The job's job- state-reasons attribute contains the
reasons that the job is being terminated. (id-val-job-state-terminating)
retained The job is being retained at the server as a result of the job's job-
retention-period being non-zero. The job has (1) completed successfully or with
warnings or errors, (2) been aborted while [processing] printing by the server,
or (3) been cancelled by the CancelJob request before or during processing. The
job's job-state-reasons attribute contains the reasons that the job has been
retained. While in the retained state, all of the job's document data (and
resources, if any) shall be retained by the server; thus a job in the retained
state [could be resubmitted using the Resubmit request in ISO DPA Part 3.].
ResubmitJob shall create a new job object instance and assign a new job-
identifier. See the Xerox Job Model spec. (id-val-job-state-retained) completed
The job has either: (1) completed successfully or with warnings or errors, (2)
been aborted by the server while processing, or (3) been cancelled by the
CancelJob request, AND the job's: (1) job-retention-period was zero or has
expired, or (2) job-discard-time has arrived. OR a ResubmitJob operation has
been issued which forces the old job to the completed state and makes a new job
object instance with a new job identifier. See the Xerox Job Model
specification. The job's job-state-reasons attribute contains the reason(s)
that the job has been completed. While in the completed state, a job's document
data (and resources if any) need not be retained by the server; thus a job in
the completed state could not be resubmitted. The length of time that a job may
be in this state, before transitioning to unknown, is implementation-dependent.
However, servers that implement the completed job-state shall retain, as a
minimum, the following attributes for any job in the completed state: job-
identifier, job-owner, job-name, current-job-state, devices-assigned, and job-
state-reasons, plus as a Xerox extension, the accounting attributes:
xcmJobAccountingUserName, xcmJobAccountingInformation,
xcmJobStartedProcessingTime, xcmJobImpressionsCompleted,
xcmJobMediaSheetsCompleted, xcmJobCompletionTime, xcmJobWorkUnitType
XcmHrDevTrafficUnit, and xcmJobUnitsOfWorkCompleted so that an accounting
management application can copy the accounting data from the MIB before the job
is deleted from the MIB. Jobs that have been moved to the OPTIONAL 'Job
History' device SHALL be in the 'completed' state (or 'aborted' or 'canceled'
states with the PWG Job Mon MIB). (id-val-job-state-completed) This is a type 2
enum.
"""


class XcmJMJobStateReasons(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
This representation is bit-encoded, so that multiple reasons can occur at once.
Each bit corresponds to an ISO DPA OID for the same reason. The MIB enum value
is given by: value = 2 ** (last arc of DPA id-val-reasons-xxx OID -1) id-val-
reasons-documents-needed = 1.0.10175.1.6.19.1 See the Xerox Job Model
Specification, Phase 1 or later for the specification of which job-state-
reasons values may be used with which job states. ISO DPA: Job-state-reasons
This attribute identifies the reason or reasons that the job is in the held,
[processing,] terminating, retained, or completed state. The server shall
indicate the particular reason(s) by setting the value of the job-state-reasons
attribute. When the job is not in any of these states, the server shall set the
value of the job-state-reasons attribute to the empty set. The following
standard values are defined: jobIncoming 0x1 The job has been accepted by the
server or device, but the server or device is expecting (1) additional
operations from the client to finish creating the job and/or (2) is
accessing/accepting document data. NOTE - this reason has been renamed from the
ISO DPA 'documents-needed' to the IPP 'job-incoming' which has been generalized
to include the condition before the job has been closed by the client. (id-val-
reasons-documents-needed) jobHoldSet 0x2 The value of the job's job-hold
attribute is TRUE. (id-val- reasons-job-hold-set) jobProcessAfterSpecified 0x4
The value of the job's job-process-after attribute has specified a time
specification that has not yet occurred. Renamed from ISO DPA job-print-after-
specified. (id-val- reasons-job-process-after-specified)
requiredResourcesNotReady 0x8 At least one of the resources needed by the job,
such as media, fonts, resource objects, etc., is not ready on any of the
physical device's for which the job is a candidate. (id-val-reasons-required-
resources-not-ready) successfulCompletion 0x10 The job completed successfully.
(id-val-reasons-successful completion) completedWithWarnings 0x20 The job
completed with warnings. (id-val-reasons-completed- with-warnings)
completedWithErrors 0x40 The job completed with errors (and possibly warnings
too). (id-val-reasons-completed-with-errors) cancelledByUser 0x80 The job was
cancelled by the user using the CancelJob request. (id-val-reasons-cancelled-
by-user) cancelledByOperator 0x100 The job was cancelled by the operator using
the CancelJob request. (id-val-reasons-cancelled-by-operator) abortedBySystem
0x200 The job was aborted by the system. (id-val-reasons-aborted- by-system)
logfilePending 0x400 The job's logfile is pending file transfer. (id-val-
reasons-logfile-pending) logfileTransferring 0x800 The job's logfile is being
transferred. (id-val-reasons- logfile-transferring) The following bits are from
IPP (and start at the high end of the bits definitions): jobOutgoing 0x40000000
Configuration 2 only: The server is transmitting the job to the device. The
remaining bits are reserved for future standardization and shall not be used by
conforming implementations. This is the equivalent of a type 2 enum.
"""


class XcmJMJobXStateReasons(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
This representation is bit-encoded, so that multiple reasons can occur at once.
Each bit corresponds to a Xerox OID for the same Xerox extension to the ISO DPA
job state reason. In a DPA protocol, the DPA and Xerox OID can be intermixed.
But in a bit encoded SNMP information object, we need to keep the bit encodings
separate. The MIB enum value is given by: value = 2 ** (last arc of Xerox xid-
val-reasons-xxx OID) xid-val-reasons-cascaded = 1.2.840.113550.1.6.19.0 The
last arc is shown in parens in the description. ISO DPA: Job-state-reasons This
attribute identifies the reason or reasons that the job is in the held,
[processing] terminating, retained, or completed state. The server shall
indicate the particular reason(s) by setting the value of the job-state-reasons
[xcmJobStateReasons, xcmJobXStateReasons, and xcmX2StateReasons objects]
attribute. When the job is not in any of these states, the server shall set the
value of the job-state-reasons attribute to the empty set. The following values
are defined as Xerox extensions. The specification is copied from the Xerox Job
Model, Phase 1, updated to version 0.67, 12/20/96. NOTE: In the Xerox Job
Model, the acronym JSP stands for Job Service Provider. In ISO DPA and this MIB
the term server is used equivalently to JSP. The extensions defined by
Printxchange: cascaded 0x1 (0) After the outbound gateway retrieves all job and
document attributes and data, it stores the information into a spool directory.
Once it has done this, it sends the supervisor a job-processing event with this
job-state-reason which tells the supervisor to transition to a new job state.
deletedByAdministrator 0x2 (1) The administrator has issued a Delete operation
on the job or a Clean operation on the server or queue containing the job;
therefore the job may have been cancelled before or during processing, and will
have no retention-period or completion-period. discardTimeArrived 0x4 (2) The
job has been deleted (cancelled with the job- retention-period set to 0) due to
the fact that the time specified by the job's job-discard-time has arrived [if
the job had already completed, the only action that would have occurred is that
the job-retention-period would be set to 0 and the job is deleted].
postprintFailed 0x8 (3) The post-processing agent failed while trying to log
accounting attributes for the job; therefore the job has been placed into
retained state for a system-defined period of time (Printxchange, 5 minutes),
so the administrator can examine it, resubmit it, etc. The post-processing
agent is a plug-and-play mechanism which the system and the customer uses to
add functionality that is executed after a job has finished processing.
submissionInterrupted 0x10 (4) Indicates that the job was not completely
submitted for the following reasons: (1) the server has crashed before the job
was closed by the client. The server shall put the job into the completed state
(and shall not process the job). (2) the server or the document transfer method
has crashed in some non-recoverable way before the document data was entirely
transferred to the server. The server shall put the job into the completed
state (and shall not process the job). (3) the client crashed or failed to
close the job before the time-out period (Printxchange, 20 minutes). The server
shall close the job and put the job into the held state with job-state-reasons
of submission-interrupted and job-hold-set and with the job's job-hold
attribute set to TRUE. The user may release the job for scheduling by issuing
the ReleaseJob operation. maxJobFaultCountExceeded 0x20 (5) The job has been
faulted and returned by the server several times and that the job-fault-count
exceeded the device's (or server's, if not defined for the device) cfg- max-
job-fault-count. The job is automatically put into the held state regardless of
the hold-jobs-interrupted-by- device-failure attribute. This job-state-reasons
value is used in conjunction with the job-interrupted-by-device- failure value.
Job timed-out while processing (optional): Implementation option: The following
values of job-state- reasons are derived from ISO DPA printer states for use
when the system moves a processing job to the held state because a site-
settable time-out condition was exceeded while the job was in the processing
state: devicesNeedAttentionTimeOut 0x40 (6) One or more document transforms
that the job is using needs human intervention in order for the job to make
progress, but the human intervention did not occur within the site-settable
time-out value and the JSP has transitioned the job to the held state.
needsKeyOperatorTimeOut 0x80 (7) One or more devices or document transforms
that the job is using need a specially trained operator (who may need a key to
unlock the device and gain access) in order for the job to make progress, but
the key operator intervention did not occur within the site-settable time-out
value and the JSP has transitioned the job to the held state.
jobStartWaitTimeOut 0x100 (8) The JSP has stopped the job at the beginning of
processing to await human action, such as installing a special cartridge or
special non-standard media, but the job was not resumed within the site-
settable time-out value and the JSP has transitioned the job to the held state.
Normally, the job is resumed by means outside the job model, such as some local
function on the device. jobEndWaitTimeOut 0x200 (9) The JSP has stopped the job
at the end of processing to await human action, such as removing a special
cartridge or restoring standard media, but the job was not resumed within the
site-settable time-out value and the JSP has transitioned the job to the
retained state. Normally, the job is resumed by means outside the job model,
such as some local function on the device, whereupon the job shall transition
immediately to the terminating state. jobPasswordWaitTimeOut 0x400 DEPRECATED:
(10) The JSP has stopped the job at the beginning of processing to await input
of the job's password, but the human intervention did not occur within the
site-settable time-out value and the JSP has transitioned the job to the held
state. Normally, the password is input and the job is resumed by means outside
the job model, such as some local function on the device. This value is
DEPRECATED because the JSP shall move Secure Jobs from processing to held when
they are the next to run and set the jobPasswordWait job-state-reason, so that
the device is not blocked. deviceTimedOut 0x800 (11) A device that the job was
using has not responded in a period specified by the device's site-settable
device- timeout-period attribute (In ISO DPA the printer's printer- timeout-
period attribute). connectingToDeviceTimeOut 0x1000 (12) The JSP is attempting
to connect to one or more devices which may be dial-up, polled, or queued, and
so may be busy with traffic from other systems, but JSP was unable to connect
to the device within the site-settable time-out value and the JSP has
transitioned the job to the held state Reasons used when the job is in
processing state: The following values for the job-state-reasons attribute have
been added by the Job Model team to give requesters feedback about the job when
the job is in the processing state: transferring 0x2000 (13) The job is being
transferred to a down stream server or device. queueInDevice 0x4000 (14) The
job has been queued in a down stream server or device. jobCleanup 0x8000 (15)
The JSP is performing cleanup activity as part of ending normal processing.
processingToStopPoint 0x10000 (16) The requester has issued an InterruptJob
operation and the JSP is processing up until the specified stop point occurs.
Other reasons added by the Xerox Job Model: The following values for the job's
job-state-reasons attribute have been added by the Xerox Job Model team:
jobPasswordWait 0x20000 (17) Either: (1) The JSP has selected the Secure Job to
be next to process, but instead of assigning resources and starting the job
processing, the JSP has transitioned the job to the held state to await entry
of a password (and dispatched another job, if there is one) OR (2) the JSP has
interpreted (ripped) the Secure Job and the marker is scheduled separately, so
that the JSP transitions the job to the held state to await entry of a password
(and dispatched another job, if there is one). The user resumes the job either
locally or by issuing a ReleaseJob supplying a job-password=secret-code input
parameter that SHALL match the job's job-password attribute. validating 0x40000
(18) The job is validating the job after a CreateJob operation. The job state
may be creating, held, pending, or processing. queueHeld 0x80000 (19) The
operator has held the entire queue by means outside the scope of the Job model.
jobProofWait 0x100000 (20) The job has produced a single proof copy and is in
the held state waiting for the requester to issue the ReleaseJob operation to
release the job to print normally, obeying the job-copies and copy-count job
and document attributes that were originally submitted. heldForDiagnostics
0x200000 (21) The system is running intrusive diagnostics, so the all jobs are
being held. serviceOffLine 0x400000 (22) The service/document transform is off-
line and accepting no jobs. All pending jobs are put into the held state. This
could be true if its input is impaired or broken. noSpaceOnServer 0x800000 (23)
The job is held because there is no room on the server to store all of the job.
For example, there is no room for the document data or a scan-to-file job.
pinRequired 0x1000000 (24) The device requires that a pin be entered in order
to proceed, because the PIN was not supplied with the document or job.
exceededAccountLimit 0x2000000 (25) The account for which this job is drawn has
exceeded its limit. This condition should be detected before the job is
scheduled so that the user does not wait until his/her job is scheduled only to
find that the account is overdrawn. This condition may also occur while the job
is processing either as processing begins or part way through processing. An
overdraft mechanism should be included to be user- friendly, so as to minimize
the chances that the job cannot finish or that media is wasted. For example,
the JSP should finish the current copy for a job with collated document copies,
rather than stopping in the middle of the current document copy.
jobHeldForRetry 0x4000000 (26) The job encountered some errors that the JSP
could not recover from with its normal retry procedures, but the error is worth
trying the job later, such as phone number busy or remote file system in-
accessible. For such a situation, the JSP shall add the held-for-retry value to
the job's job- state-reasons attribute and transition the job from the
processing to the held (via the evaluate-hold internal momentary state), rather
than to the retained state. The remaining bits are reserved for future
standardization and shall not be used by conforming implementations. This is
the equivalent of a type 2 enum.
"""


class XcmJMJobX2StateReasons(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
This representation is bit-encoded, so that multiple reasons can occur at once.
Each bit corresponds to a Xerox OID for the same Xerox extension to the ISO DPA
job state reason. In a DPA protocol, the DPA and Xerox OID can be intermixed.
But in a bit encoded SNMP information object, we need to keep the bit encodings
separate. XcmJMJobX2StateReasons provides an additional 31 bits for Xerox
extensions in addition to the 31 bits provided for by XcmJMJobXStateReasons.
The MIB enum value is given by: value = 2 ** (last arc of Xerox xid-val-
reasons-xxx OID -30) xid-val-reasons-xxx = 1.2.840.113550.1.6.19.30 jobPrinting
0x1 (30) At least one of the output device to which the job is assigned is
marking media. This value is useful for servers and output devices which spend
a great deal of time processing (1) when no marking is happening and then want
to show that marking is now happening or (2) when the job is in the process of
being canceled or aborted while the job remains in the 'processing' state, but
the marking has not yet stopped so that impression or sheet counts are still
increasing for the job. This job-state-reason value is defined in the PWG Job
Monitoring MIB and IPP. It has been generalized here for jobs that use more
than one device. This job-state-reason value should be used instead of the
'printing' which has been deprecated in this MIB (and is recommended against in
ISO DPA in a corrigenda). jobInterpreting 0x2 (31) The job is interpreting
document data. This job-state-reason value is defined in the PWG Job Monitoring
MIB and IPP. It has been generalized here for jobs that use more than one
device and for devices that can be interpreting more than one job at a time.
jobScanning 0x4 (32) At least one of the input devices to which the job is
assigned is scanning document data. jobFaxReceiving 0x8 (33) At least one of
the FAX devices to which the job is assigned is receiving FAX document data.
jobFaxSending 0x10 (34) At least one of the FAX devices to which the job is
assigned is sending FAX document data. jobFileReceiving 0x20 (35) The job is
receiving files or document data. jobFileSending 0x40 (36) The job is sending
files or document data. jobMailReceiving 0x80 (37) The job is receiving
electronic mail document data. jobMailSending 0x100 (38) The job is sending
electronic mail document data. value = 2 ** (30 - last arc of PSIS pid-val-
reasons-xxx OID) pid-val-reasons-cancelled-by-shutdown =
1.2.826.0.1050.8.1.6.19.0 NOTE: the Xerox extensions to DPA work from right to
left and X/Open PSIS extensions work from left to right, avoiding the sign bit.
The remaining bits (in the middle) are reserved for future standardization and
shall not be used by conforming implementations. The following PSIS bits are
defined using the PSIS extensions to ISO DPA starting with the left-most bit,
not counting the sign bit. These definitions are taken from the August 28,
1995, version 5.0 of the X/Open PSIS specification. [Text in brackets indicates
additions and clarifications made for the Job Monitoring MIB.]
cancelledByShutdown 0x40000000 the job was cancelled because the server or
device was shutdown before completing the job. The job shall be placed in the
pending state [if the job was not started, else the job shall be placed in the
terminating state]. deviceUnavailable 0x20000000 This job was aborted by the
system because the device is currently unable to accept jobs. This reason
[shall be] used in conjunction with the reason aborted-by-system. The job shall
be placed in the pending state. wrongDevice 0x10000000 This job was aborted by
the system because the device is unable to handle this particular job; the
spooler should try another device. This reason [shall be] used in conjunction
with the reason aborted-by-system. The job shall be pending if the queue
contains other physical devices that the job could process on, and the spooler
is capable of not sending the job back to a physical device that has rejected
the job for this job-state-reasons value. Otherwise, [the job] shall be
retained. badJob 0x8000000 This job was aborted by the system because this job
has a major problem[, such as an ill-formed PDL]; the spooler should not even
try another printer. This reason [shall be] used in conjunction with the reason
aborted-by-system. The job shall be placed in the [terminating] state.
jobInterruptedByDeviceFailure 0x4000000 The device or supervisor failed while
the job was [processing/]printing. The spooler is keeping the job in the held
state until an operator can determine what to do with the job. This is the
equivalent of a type 2 enum.
"""


class XcmJMDocType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("font", 4),
          ("other", 1),
          ("printable", 3),
          ("resource", 5),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
Jobs contain contained-documents. Contained-documents may be printable, font,
or resource objects. This had been deleted due to object deletions from
41jobmon.mib, but has been restored along with those objects. ISO DPA:
Document-type The following standard values are defined: printable Specifies
that this document is to be printed on the assigned printer. (id-val-document-
type- printable) font Specifies that this document is a font resource which may
be required by one or more of the printable documents associated with the
print- job. See the font object class. (id-val- document-type-font) resource
Specifies that this document contains resource data, of some type other than
font, which may be required to print one or more of the printable documents
associated with the print-job. See the resource object class. (id-val-document-
type-resource) This is a type 2 enum.
"""


class XcmJMDocFileNameType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33)
        )
    )
    namedValues = NamedValues(
        *(("fntAutomatic", 3),
          ("fntBindery", 13),
          ("fntCDS", 7),
          ("fntDCE", 6),
          ("fntDECNS", 10),
          ("fntDNS", 9),
          ("fntInternetMail", 11),
          ("fntMVS", 28),
          ("fntNDS", 14),
          ("fntNIS", 8),
          ("fntNT", 27),
          ("fntNetWare", 33),
          ("fntOS2", 25),
          ("fntOS400", 30),
          ("fntPCDOS", 26),
          ("fntPOSIX", 23),
          ("fntUNC", 32),
          ("fntUNIX", 24),
          ("fntURL", 15),
          ("fntVM", 29),
          ("fntVMS", 31),
          ("fntX500", 4),
          ("fntXFN", 5),
          ("fntXNS", 12),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The type of file name syntax from which a document is obtained for an output
job, such as print, or for which a document is produced for an input job, such
as scan- to-file. The file name syntax types are taken from ISO DPA for the
DistinguishedNameStringSyntax data type. This had been deleted due to object
deletions from 41jobmon.mib, but has been restored along with those objects.
ISO DPA: distinguished-name-syntax The following standard values are defined:
automatic server recognizes the syntax X-500 ISO 9594 Directory Service XFN
X/OPEN Federated Names DCE Distributed Computing Environment includes X.500 and
CDS CDS Cell Directory Service - part of DCE NIS Network Information Service
DNS Domain Name Service DEC-NS Digital Name Service Internet-mail Internet Mail
address XNS Xerox Network System Bindery Bindery example:
FILE_SERVER_NAME\OBJECT_NAME NDS Novell Directory Service example:
.objectName.container.organization or
.cn=objectName.ou=container.o=organization URL HTTP Universal Resource Locator
examples: http://www.organization-name.org/homepage.htm ftp://ftp-
out.external.hp.com/snmpmib/dpa/dpa-00.doc POSIX POSIX file name (ISO 9945-1)
UNIX UNIX(TM) file name OS/2 OS/2 file name PC-DOS PC DOS file name NT NT file
name MVS MVS file name VM VM file name OS/400 OS/400 file name VMS VMS file
name UNC Microsoft Universal Name Convention example:
\\fileservername\volume\filepath\filename.ext NetWare NetWare file path name
example: servername\volume\filepath\filename.ext This is a type 2 enum.
"""


class XcmJMDocState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("completed", 6),
          ("other", 1),
          ("pending", 4),
          ("printing", 7),
          ("processing", 5),
          ("transferPending", 3),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The following standard values are defined for the state of contained-documents:
transferPending The server has created the document object, but the data
transfer of the document data has not started or completed (id-val-document-
state-transfer-pending) pending The server has received the document data and
the document is waiting for processing to begin. The job may already be in the
processing state, if the job's job-scheduling attribute is not after-complete
(see the current-job-state and job-scheduling job attributes. (id-val-document-
state- pending) processing The server has started processing this document, or
has made the document ready for processing by a device, but the device is not
yet processing it, either because the document hasn't reached the device or
because the document is queued in the device or some other spooler, awaiting
the device to process it, or the device has finished processingthe document and
some additional processing is needed, such as image processing after scanning.
(id-val-document-state- processing) printing The server has completed
processing the document and the output device is currently printing the
document on at least one printer. That is, a print engine is either printing
pages of the document, or failing in its attempt to print pages of the document
because of some wait state, such as, start-wait, end-wait, needs-attention,
etc. The complete document state includes the detailed status represented in
the devices' device-state attribute(s). NOTE: Other job-service-type-specific
states will be added in the future, such as scanning. completed The server has
completed this document. The job may still be in the processing state, or may
be in the retained state. The job shall move to the retained state when all
documents are completed (id-val-document-state-completed) This is a type 2
enum.
"""


class XcmJMDocOutputMethod(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )

    if mibBuilder.loadTexts:
        description = """\
This object is bit coded, so that multiple document output requests may be made
for the document. Each bit corresponds to one of the ISO DPA output OIDs. ISO
DPA: Output This attribute identifies the output processing for the media on
which the document is to be printed. The following standard values are defined.
The value of the bit is given by the formula: bit value = 2 ** (last OID arc)
id-val-output-page-collate = 1.0.10175.1.6.115.0 pageCollate 0x1 This value
specifies that the pages of a document are to be in sequence, when multiple
copies of the document are specified by the copy-count attribute (possibly up
to some implementation-defined maximum number of copies). Whether this effect
is achieved by placing copies of the document in multiple output bins or in the
same output bin with implementation-defined document separation is
implementation-dependent. Also whether it is achieved by making multiple passes
over the document or by using an output sorter is implementation-dependent.
Either pageCollate or noPageCollate shall be set, but not both. If both
pageCollate and noPageCollate are set, the noPageCollate value shall be
ignored. (id-val-output-page- collate) noPageCollate 0x2 This value specifies
that the copies of the pages of a document are to follow one another when
multiple copies are specified by the copy-count attribute. That is, if 3 copies
are specified, three copies of page 1 are printed then three copies of page 2,
etc., and no collating of these pages is desired. This may be useful in some
implementations where multiple copies requires re-interpretation of the
document format and the document contains some compute intensive pages (such as
images) (id-val-output-no page-collate) decollate 0x10 The parts of a multi-
part form are to be separated and sorted into stacks for each part. Either
decollate or noDecollate shall be set, but not both. If both decollate and
noDecollate are set, the noDecollate value shall be ignored. (id-val-output-
decollate) noDecollate 0x20 The parts of a multi-part form are to remain intact
(id- val-output-no decollate) burst 0x40 Continuous media is to be separated
into individual sheets, generally by bursting along perforations. Either burst
or noBurst shall be set, but not both. If both burst and noBurst are set, the
noBurst value shall be ignored. (id-val-output-burst) noBurst 0x80 Continuous
media is to remain continuous, no bursting is desired (id-val-output-no burst)
stackingDefault 0x400 A site-defined output-stacking operation is to be applied
(id-val-output-stacking-default) This is the equivalent of a type 2 enum.
"""


class XcmJMGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Job Monitoring MIB groups supported by this management agent
implementation (i.e., version) on this host system, specified in a bit-mask.
The current set of values (which may be extended in the future) is given below:
1 : xcmJMBaseGroup 2 : xcmJMJobGenBasicGroup 4 : xcmJMDevicesAssignedGroup 8 :
xcmJMClientIdMapGroup 32 : xcmJMJobGenExtGroup 128 : xcmJMDocGenBasicGroup 256
: xcmJMDocPrintExtGroup 512 : xcmJMJobGenSpoolingBasicGroup 1024 :
xcmJMJobGenSpoolingExtGroup 2048 : xcmJMJobGenAccountingBasicGroup 4096 :
xcmJMMediaConsumedGroup 8192 : xcmJMColorImpsConsumedGroup 16384 :
xcmJMJobAlertGroup 32768 : xcmJMDocAlertGroup 65536 :
xcmJMJobImpsByMediumSizeGroup Note: The following had been deprecated, but have
been made current starting with version 4.00: xcmJMJobGenExtGroup,
xcmJMJobGenSpoolingBasicGroup, xcmJMJobGenAccountingBasicGroup,
xcmJMMediaConsumedGroup, and xcmJMJobImpsByMediumSizeGroup. The following had
been deleted, but are restored as of version 4.01: xcmJMDocGenBasicGroup,
xcmJMDocPrintExtGroup, xcmJMJobGenSpoolingExtGroup,
xcmJMColorImpsConsumedGroup, and xcmJMDocAlertGroup. The following were deleted
in v2.51: xcmJMJobStateMsgGroup and xcmJMJobTreeBasicGroup. Usage: Conforming
management agents shall ALWAYS accurately report their support for XCMI Job
Monitoring MIB groups.
"""


class XcmJMImpsCountType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              5,
              6,
              7,
              11,
              19,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("blackAndWhiteCount", 5),
          ("fourColorantCount", 24),
          ("fullColorCount", 7),
          ("highlightColorCount", 6),
          ("limitedVisibleColorCount", 19),
          ("oneColorantCount", 21),
          ("oneVisibleColorCount", 11),
          ("other", 1),
          ("threeColorantCount", 23),
          ("totalCount", 4),
          ("twoColorantCount", 22))
    )

    if mibBuilder.loadTexts:
        description = """\
 The recognized impression counting types for impressions produced by the jobs.
The following standard values are defined for the count-type. total count Count
all impressions. black and white count Count impressions requiring only black
colorant. highlight color count Count impressions requiring black plus one
other colorant. full color count Count impressions requiring 3 or more
colorants. one visible color count Count impressions for which one visible
color is printed. This is determined when a printer driver converts a document
to PDL formatted data. This is related in a specific accounting method rather
than consumed colorants. The differentiation between a 'one visible color'
impression from an impression of another type is device dependent, i.e., a
device might consider 'one visible', 'black and white', and 'highlight' to be
three different types. limited visible color count Count impressions for which
multiple visible colors are printed, but when the impression should not be
considered 'full color'. This is determined when a printer driver converts a
document to PDL formatted data. This is related in a specific accounting method
rather than consumed colorants. The choice of a number of colors that
differentiates a 'limited color' impression from a 'full color' (or other type
of) impression is device dependent. one colorant count Count impressions on
which any one colorant is used, whether black or any other color. two colorant
count Count impressions on which any two colorants are used, whether or not
black is used. three colorant count Count impressions on which any three
colorants are used, whether or not black is used. four colorant count Count
impressions on which any four colorants are used, whether or not black is used.
NOTE: Other count-type may be added in the future according to the requirements
of accounting services.
"""


class XcmJMMediumType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              100,
              101,
              102,
              103)
        )
    )
    namedValues = NamedValues(
        *(("coated", 101),
          ("continuousLong", 7),
          ("continuousShort", 8),
          ("coverStock", 16),
          ("drilled", 100),
          ("envelope", 5),
          ("envelopePlain", 6),
          ("envelopeWindow", 12),
          ("heavyWeight", 103),
          ("labels", 11),
          ("letterhead", 15),
          ("multiLayer", 13),
          ("multiPartForm", 10),
          ("other", 1),
          ("prePrinted", 14),
          ("recycled", 102),
          ("stationery", 3),
          ("tabStock", 9),
          ("transparency", 4),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The recognized types of media. NOTE: For this MIB, these values are enums,
instead of strings. This departure from the IETF Printer MIB where medium-types
are strings is so that the medium types can be more easily localized. Also the
xcmJMMediaConsumedGroup accounting group also has the media names as string
values so that accounting systems can use either the enum type or the medium
name. ISO DPA: Medium-type This attribute identifies the type of this medium.
(e.g. stationery, envelope, transparency, etc.) The following standard values
are defined: stationery Separately cut sheets of an opaque material (id-val-
medium- type-stationery)Sometimes called 'standard'. transparency Separately
cut sheets of a transparent material (id-val- medium-type-transparency)
envelope Envelopes that can be used for conventional mailing purposes (id-val-
medium-type-envelope) envelopePlain Envelopes that are not pre-printed and have
no windows (id- val-medium-type-envelope-plain) envelopeWindow Envelopes that
have windows for addressing purposes (id- val-medium-type-envelope-window)
continuousLong Continuously connected sheets of an opaque material connected
along the long edge (id-val-medium-type- continuous-long) continuousShort
Continuously connected sheets of an opaque material connected along the short
edge (id-val-medium-type- continuous-short) tabStock Media with tabs (id-val-
medium-type-tab) multiPartForm Form medium composed of multiple layers not pre-
attached to one another; each sheet may be drawn separately from an input
source (id-val-medium-multi-part-form) labels Label-stock (id-val-medium-
labels) multiLayer Form medium composed of multiple layers which are pre-
attached to one another, e.g. for use with impact printers (id-val-medium-type-
multi-layer). The following are additional types that are being proposed to ISO
DPA and so continue with the same enum and OID assignments: prePrinted pre-
printed medium, other than letterhead letterhead pre-printed letterhead
coverStock cover medium The following are additional types that are orthogonal
to media- type and so will not be proposed to ISO DPA as additional media-
type. Instead, these will be proposed as separate attributes of the medium
object. Therefore, they will be assigned as Xerox extension bits for use in the
Job Monitoring MIB: drilled Medium with holes. (Corresponds to the existing ISO
DPA medium-holes attribute) coated Medium with some coating. (Will be proposed
to ISO DPA as a separate medium object attribute, possibly Boolean). recycled
recycled medium. (Will be proposed to ISO DPA as a separate medium object
attribute, possibly Boolean). heavyWeight heavy-weight medium. (Corresponds to
the existing ISO DPA medium-weight attribute). This is a type 2 enum.
"""


class XcmSimpleJobMgmtGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Simple Job Mgmt MIB groups supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask. The
current set of values (which may be extended in the future) is given below: 1 :
simpleJobBaseGroup 2 : simpleJobMgmtGroup 4 : simpleJobInterceptGroup Usage:
Conforming management agents shall ALWAYS accurately report their support for
XCMI Simple Job Mgmt MIB groups.
"""


class XcmSimpleJobMgmtOperation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              1401,
              1402,
              1403,
              1404,
              1408,
              1409,
              1411,
              1412,
              1413,
              1414,
              1415,
              1502,
              1503,
              1504,
              1512,
              1514,
              2401,
              2501)
        )
    )
    namedValues = NamedValues(
        *(("docDelete", 1502),
          ("docList", 1503),
          ("docManage", 2501),
          ("docModify", 1512),
          ("docRemove", 1514),
          ("docSet", 1504),
          ("jobCreate", 1401),
          ("jobDelete", 1402),
          ("jobInterrupt", 1411),
          ("jobList", 1403),
          ("jobManage", 2401),
          ("jobModify", 1412),
          ("jobPause", 1408),
          ("jobPromote", 1413),
          ("jobRemove", 1414),
          ("jobResubmit", 1415),
          ("jobResume", 1409),
          ("jobSet", 1404),
          ("none", 0),
          ("other", 1),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The simple job management operation associated with this conceptual row in the
'xcmSimpleJobMgmtTable' and the 'xcmJobGenBasicTable' (XCMI Job Monitoring
MIB), OR this conceptual row in the 'xcmSimpleJobInterceptTable' and the
'xcmJobClientId' object (XCMI Job Monitoring MIB). Note: The enum of '0' (zero)
in this textual convention is illegal in strict SMIv1 (see section 3.2.1.1 of
RFC 1155), so this TC must be converted to an integer range for pure SMIv1.
"""


class XcmSimpleJobMgmtData(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
The simple job management data associated with this conceptual row in the
'xcmSimpleJobMgmtTable' and the 'xcmJobGenBasicTable' (XCMI Job Monitoring
MIB), OR this conceptual row in the 'xcmSimpleJobInterceptTable' and the
'xcmJobClientId' object (XCMI Job Monitoring MIB).
"""


class XcmJmxGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional PWG Job Monitoring MIB (RFC 2707) and XCMI Ext to PWG Job Monitoring
MIB objects which are supported by this management agent implementation (i.e.,
version) on this host system, specified in a bit-mask. The current set of
values (which may be extended in the future) is given below: 1 : jmGeneralGroup
2 : jmJobIDGroup 4 : jmJobGroup 8 : jmAttributeGroup 16 : jmxGeneralGroup 32 :
jmxJobAdminGroup 64 : jmxJobTrapsGroup 128 : jmxJobOperationTrapsGroup Usage:
Conforming management agents shall ALWAYS accurately report their support for
PWG Job Monitoring MIB (RFC 2707) and XCMI Ext to PWG Job Monitoring MIB object
groups.
"""


class XcmJmxJobAdminOperation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("cancelJob", 3),
          ("holdJob", 4),
          ("other", 1),
          ("promoteJob", 10),
          ("releaseJob", 5),
          ("reprocessJob", 7),
          ("restartJob", 6),
          ("resumeJob", 9),
          ("suspendJob", 8),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The current or most recent administrative operation on this job (submitted via
SNMP, IPP, or any other job control protocol).
"""


class XcmJmxJobAccntSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 5),
          ("off", 4),
          ("on", 3),
          ("other", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
Presence and configuration of a Job Accounting on the device. Note: This
enumeration may be extended for more granularity in the future.
"""


class XcmCommsMgmtCommandRequest(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              1701,
              1702,
              1703,
              1704,
              1705,
              1706,
              1707,
              1708,
              1709,
              1710,
              2701,
              2702,
              2721,
              2722,
              2723,
              2724,
              2725,
              2726,
              2731,
              2732,
              2733,
              2734,
              2741,
              2742)
        )
    )
    namedValues = NamedValues(
        *(("close", 5),
          ("commsBackup", 2723),
          ("commsClean", 1705),
          ("commsConfigure", 2725),
          ("commsCreate", 1701),
          ("commsDelete", 1702),
          ("commsDiagnose", 2726),
          ("commsDisable", 1706),
          ("commsEnable", 1707),
          ("commsInstall", 2721),
          ("commsList", 1703),
          ("commsLogin", 2741),
          ("commsLogout", 2742),
          ("commsManage", 2701),
          ("commsPause", 1708),
          ("commsResetCold", 2733),
          ("commsResetCounters", 2731),
          ("commsResetFactory", 2734),
          ("commsResetWarm", 2732),
          ("commsRestart", 2702),
          ("commsRestore", 2724),
          ("commsResume", 1709),
          ("commsSet", 1704),
          ("commsShutdown", 1710),
          ("commsUpgrade", 2722),
          ("disable", 2),
          ("enable", 4),
          ("flushInOut", 15),
          ("flushInput", 13),
          ("flushOutput", 14),
          ("manage", 16),
          ("none", 1),
          ("open", 7),
          ("quiesce", 8),
          ("recover", 6),
          ("resetCold", 11),
          ("resetCounters", 9),
          ("resetFactory", 12),
          ("resetWarm", 10),
          ("test", 3))
    )

    if mibBuilder.loadTexts:
        description = """\
A write to this object by an (authorized) management station SHALL invokes a
command for this protocol entity. A read of this object SHALL return the
command currently in progress or last completed. It is mandatory that a
conforming management agent ensure that the contents of this object remain 'in
bounds' - an undefined value SHALL be replaced by 'none' - ie, although
rejected with error in the SetResponse PDU, this object SHALL NOT contain any
such undefined value. At system initialization, this object SHALL contain
'none'. * 'none' - NO action(s) SHALL be taken, except agent SHALL clear
'...CommandData' and set '...CommandStatus' to 'noError'. * 'test' or 'manage'
- the associated '...CommandData' object SHALL be specified in the same
SetRequest PDU. * all other commands - the associated '...CommandData' object
MAY be specified in the same SetRequest PDU. * 'disable' - this protocol SHALL
transition immediately (ie, without attempting graceful quiesce) to the
'inoperative' state. * 'enable', 'resetWarm', 'resetCold', or 'resetFactory' -
the final state SHALL be either 'closed' or 'opened'. * 'test' - this protocol
SHALL transition immediately to the 'testing' state; otherwise, it is a local
matter (ie, protocol specific) how this command is processed; however, the
associated '...CommandData' object SHALL be specified. * 'enable' - it is a
local matter (ie, protocol specific) whether the final state SHALL be 'closed'
or 'opened'; however, if 'closed' results, an 'open' SHALL yield 'opened'. *
'close', 'recover', or 'open' - this protocol SHALL make a 'best effort' to
make an orderly transition to the requested final state. * 'quiesce' - this
protocol SHALL make a 'best effort' to make a graceful transition to the
'closed' state. * 'resetCounters' - all comms counters SHALL be reset to zero.
* 'resetWarm' - a comms 'warm restart' SHALL be performed. * 'resetCold' - a
comms 'cold restart' SHALL be performed (ie, a power cycle reset). *
'resetFactory' - all factory defaults SHALL be restored, and a comms 'cold
restart' SHALL be performed (ie, a power cycle reset). * 'flushInput' - all
comms input (in progress or internally queued) SHALL be gracefully flushed *
'flushOutput' - all comms output (in progress or internally queued) SHALL be
gracefully flushed * 'flushInOut' - all comms input and output output (in
progress or internally queued) SHALL be gracefully flushed * 'manage' - it is a
local matter (ie, product specific) how this command is processed; however, the
associated '...CommandData' object SHALL be specified. Note: All of the POSIX
and XCMI comms level operations are taken from the POSIX System Admin std (IEEE
1387.4) and aligned with the high-end XCMI System Admin MIB.
"""


class XcmCommsMgmtCommandData(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
A write to this object specifies: a) a 'test' command subtype and any
accompanying 'test' protocol specific data; or b) a 'manage' command subtype
and any accompanying 'manage' protocol specific data; or c) protocol specific
data accompanying any other command. A read of this object SHALL return the
data (if any) which accompanied the current or last completed command. Note:
Conforming implementations are STRONGLY encouraged to consider support of
encrypted password writes in this object.
"""


class XcmCommsMgmtState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("closed", 5),
          ("closing", 6),
          ("inoperative", 3),
          ("opened", 9),
          ("opening", 7),
          ("other", 1),
          ("recovering", 8),
          ("testing", 4),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
A relatively generic description of the current state of this communications
entity. Usage: It is desirable that the implementor report the states of all
stack layers corresponding to conceptual rows in the 'xcmCommsStackTable'
accurately. The use of the value 'unknown' SHOULD NOT be the general case,
unless the host system has NO local instrumentation of the stack layers (such
as the DMTF DMI, Desktop Management Interface) - when ANY local instrumentation
of the stack layers is available, the implementor SHOULD accurately report
stack layer states.
"""


class XcmCommsMgmtConditions(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
A relatively generic description of the current conditions of this
communications entity. The definition of 'conditions' is partially entity
specific and is NOT completely amenable to generalization. However, a base set
of values (which MAY be extended for each entity type) is given below: 1 :
disableInProgress (normally NOT used) 2 : testInProgress (optional) 4 :
enableInProgress 8 : closeInProgress 16 : recoverInProgress (optional) 32 :
openInProgress 64 : quiesceInProgress (optional) 128 : resetCountersInProgress
(normally NOT used) 256 : resetWarmInProgress (current defaults) 512 :
resetColdInProgress (current defaults) 1024 : resetFactoryInProgress (factory
defaults) 2048 : manageInProgress (optional) 4096 : incomingTestInProgress
(optional) 8192 : outgoingTestInProgress (optional) 16384 :
incomingAuthorizeInProgress (optional) 32768 : outgoingAuthorizeInProgress
(optional) 65536 : incomingFlowControlInProgress (optional) 131072 :
outgoingFlowControlInProgress (optional) The above basic 'conditions' remember
the original intent of the current command, when it results in several state
transitions before arriving at the 'final' state. They augment the state info
available from a variable of type 'XcmCommsMgmtState', by graphing the
'progress' of a command through the states. Usage: It is desirable that the
implementor report 'conditions' of all stack layers corresponding to conceptual
rows in the 'xcmCommsStackTable' accurately. 'Conditions' occur within or
across 'states' in a finite state machine (FSM) implementation of a
communications entity. They represent both transient and long term constraints
and circumstances.
"""


class XcmCommsStackPosition(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              8,
              9,
              10,
              12,
              16,
              17,
              18,
              20,
              25,
              26,
              28)
        )
    )
    namedValues = NamedValues(
        *(("bottom", 1),
          ("bottomAndTop", 5),
          ("bottomBothMux", 25),
          ("bottomLowerMux", 9),
          ("bottomUpperMux", 17),
          ("lowerMux", 8),
          ("middle", 2),
          ("middleBothMux", 26),
          ("middleLowerMux", 10),
          ("middleUpperMux", 18),
          ("top", 4),
          ("topBothMux", 28),
          ("topLowerMux", 12),
          ("topUpperMux", 20),
          ("upperMux", 16))
    )

    if mibBuilder.loadTexts:
        description = """\
A relatively generic description of the current position of this protocol
entity (ie, this layer) in a protocol stack. Composed of one or more of the
following position descriptors, arithmetically added together: bottom : 1
middle : 2 top : 4 lowerMux : 8 upperMux : 16 Usage: A conceptual row in
'xcmCommsStackTable', which occupies a 'bottom' position in a protocol stack
AND has a corresponding row in the 'xcmCommsStackXrefTable', SHOULD have valid
references in 'xcmCommsStackXrefIfIndex' (to IETF MIB-II) and
'xcmCommsStackXrefHrCommDevIndex' (to IETF Host Resources MIB). Usage: A
conceptual row in 'xcmCommsStackTable' which occupies a 'lowerMux' and/or an
'upperMux' position in a protocol stack SHALL have one (or two) valid
corresponding conceptual rows in the 'xcmCommsMuxTable', as the conventionally
used 'xcmStack[Lower|Upper]StackIndex' objects take on zero values for
multiplexors (thus breaking the graph of the stack layers, without the use of
the 'xcmCommsMuxTable'). Note: In many real open systems which are internet
attached, IETF IP (connectionless mode) network layer has a position of: a)
'middle' - neither top nor bottom; b) 'lowerMux' - above both OSI LLC (ISO
8802-2) and OSI CONP (CCITT X.25 over LAPB) datalinks; and c) 'upperMux' -
below both IETF TCP (connection mode) and IETF UDP (connectionless mode)
transports.
"""


class XcmCommsStackExtPurpose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("layerDataTransfer", 12),
          ("layerInterWorkingUnit", 15),
          ("layerManagement", 13),
          ("layerOther", 11),
          ("layerSecurity", 14),
          ("other", 1),
          ("systemDataTransfer", 17),
          ("systemInterWorkingUnit", 20),
          ("systemManagement", 18),
          ("systemOther", 16),
          ("systemSecurity", 19),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
A relatively generic description of the current purpose of this stack
layer/sublayer during normal operation. Usage: Please note that
'layerInterWorkingUnit' would correctly describe: a datalink MAC sublayer
bridge (eg, IEEE 802.1D); a network layer relay (X.25 backbone switch); a
network layer gateway (eg, X.25 <--> Telex IWU); or a transport layer gateway
(eg, OSI COTP over X.25 <--> OSI COTP over OSI CLNP). Also note that
'systemInterWorkingUnit' would correctly describe an application layer gateway
(eg, X/Open XDPA <--> Novell NDPS, for print services based on DPA, ISO 10175).
"""


class XcmCommsStackExtRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("client", 15),
          ("multicaster", 14),
          ("other", 1),
          ("peer", 11),
          ("primary", 12),
          ("secondary", 13),
          ("server", 16),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
A relatively generic description of the current role of this stack
layer/sublayer during normal operation. Usage: The values 'peer', 'primary',
and 'secondary' are standard roles for non-application layer protocols. The
value 'multicaster' indicates a role of multicast host (ie, all remote systems
would play roles of 'secondary'). The values 'client' and 'server', which are
analogous to 'primary' and 'secondary', are normally used to refer to
application layer protocols, along with 'peer' (eg, IBM SNA APPC applications).
"""


class XcmCommsStackExtSuite(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30)
        )
    )
    namedValues = NamedValues(
        *(("appletalk", 18),
          ("decnet", 17),
          ("directPrint", 29),
          ("ibmbisync", 16),
          ("ibmsna", 15),
          ("internet", 14),
          ("lanmanager", 23),
          ("lanserver", 22),
          ("lantastic", 21),
          ("netbeui", 26),
          ("netbios", 25),
          ("netware", 19),
          ("ntas", 24),
          ("osilan", 11),
          ("osiman", 12),
          ("osiwan", 13),
          ("other", 1),
          ("parallel", 28),
          ("serial", 27),
          ("unknown", 2),
          ("usb", 30),
          ("vines", 20))
    )

    if mibBuilder.loadTexts:
        description = """\
The current protocol suite of this protocol entity (stack layer or sublayer).
"""


class XcmCommsStackExtSuiteVersion(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              110101,
              120101,
              130101,
              140101,
              150101,
              160101,
              170101,
              180101,
              181999,
              182999,
              190101,
              192999,
              193999,
              194999,
              200101,
              210101,
              220101,
              230101,
              240101,
              250101,
              260101,
              270101,
              280101,
              290101,
              300101)
        )
    )
    namedValues = NamedValues(
        *(("appletalkPhase1", 181999),
          ("appletalkPhase2", 182999),
          ("appletalkVersions", 180101),
          ("decnetVersions", 170101),
          ("directPrintVersions", 290101),
          ("ibmbisyncVersions", 160101),
          ("ibmsnaVersions", 150101),
          ("internetVersions", 140101),
          ("lanmanagerVersions", 230101),
          ("lanserverVersions", 220101),
          ("lantasticVersions", 210101),
          ("netbeuiVersions", 260101),
          ("netbiosVersions", 250101),
          ("netware2x", 192999),
          ("netware3x", 193999),
          ("netware4x", 194999),
          ("netwareVersions", 190101),
          ("ntasVersions", 240101),
          ("osilanVersions", 110101),
          ("osimanVersions", 120101),
          ("osiwanVersions", 130101),
          ("other", 1),
          ("parallelVersions", 280101),
          ("serialVersions", 270101),
          ("unknown", 2),
          ("usbVersions", 300101),
          ("vinesVersions", 200101))
    )

    if mibBuilder.loadTexts:
        description = """\
The current protocol suite version of this protocol entity (stack layer or
sublayer). Usage: The following enumeration is used to unambiguously identify a
specific protocol suite version (or generic version), without resort to textual
strings. Note: The following enumeration values are composed of two N-digit
elements (left-to-right): a) First, the two-digit enumeration value of the
protocol suite (from 'XcmCommsStackExtSuite'); and b) Second, a unique four-
digit identifier.
"""


class XcmCommsStackExtLayer(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("application", 17),
          ("datalink", 12),
          ("network", 13),
          ("other", 1),
          ("physical", 11),
          ("presentation", 16),
          ("session", 15),
          ("transport", 14),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The closest approximate layer in the OSI Reference Model (CCITT X.200 | ISO
7498) to the current behavior of this stack layer or sublayer. Usage: Note that
this value MAY NOT be strictly accurate. A number of legacy proprietary
protocol suites use unusual and irregular names for their protocols (eg,
frequent assignment of relatively simplistic transport protocols to the OSI
Reference Model session layer in some protocol suites). Note: The following
enumeration values are biased by ten (10), for ease of use, from the original
OSI Reference Model.
"""


class XcmCommsStackExtProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              110101,
              111103,
              111104,
              111105,
              111107,
              111108,
              111113,
              111114,
              111115,
              111117,
              111118,
              111203,
              111204,
              111205,
              111207,
              111208,
              111215,
              111217,
              111218,
              111221,
              111222,
              111232,
              111234,
              111241,
              120101,
              121106,
              121116,
              121206,
              121216,
              130101,
              131201,
              131202,
              131203,
              131211,
              131212,
              131213,
              131221,
              131224,
              131241,
              131251,
              131261,
              131301,
              131302,
              131303,
              131304,
              131401,
              131402,
              131501,
              131502,
              131601,
              131602,
              131701,
              131702,
              131703,
              131704,
              131713,
              131714,
              131716,
              131740,
              131750,
              131751,
              131752,
              131770,
              131771,
              131780,
              140101,
              141201,
              141202,
              141301,
              141302,
              141303,
              141304,
              141305,
              141306,
              141310,
              141401,
              141402,
              141404,
              141405,
              141406,
              141501,
              141502,
              141503,
              141504,
              141505,
              141506,
              141507,
              141508,
              141509,
              141510,
              141511,
              141512,
              141513,
              141514,
              141515,
              141516,
              141519,
              141520,
              141521,
              141522,
              141523,
              141524,
              141525,
              141530,
              141531,
              141532,
              141533,
              141540,
              141551,
              141552,
              141561,
              141570,
              141571,
              141572,
              141591,
              141592,
              141593,
              150101,
              151201,
              151211,
              151221,
              151301,
              151401,
              151501,
              151502,
              151503,
              151504,
              151601,
              151602,
              151603,
              151604,
              151605,
              160101,
              161201,
              161601,
              161602,
              161603,
              161604,
              170101,
              180101,
              181201,
              181202,
              181203,
              181301,
              181303,
              181401,
              181402,
              181403,
              181404,
              181501,
              181502,
              181503,
              181507,
              181510,
              181511,
              181512,
              181513,
              181601,
              190101,
              191301,
              191402,
              191403,
              191404,
              191501,
              191502,
              191503,
              191504,
              191505,
              191507,
              191508,
              191509,
              191510,
              191511,
              191512,
              191513,
              191591,
              200101,
              201301,
              201302,
              201303,
              201311,
              201312,
              201313,
              201314,
              201401,
              201402,
              201411,
              201412,
              201501,
              201502,
              201503,
              201701,
              201702,
              201703,
              201704,
              210101,
              220101,
              230101,
              240101,
              250101,
              251501,
              251510,
              251511,
              251512,
              251513,
              251520,
              251521,
              251522,
              251591,
              251701,
              251702,
              251703,
              251704,
              251705,
              260101,
              261201,
              261221,
              261231,
              270101,
              280101,
              290101,
              300101)
        )
    )
    namedValues = NamedValues(
        *(("appletalkAARP", 181303),
          ("appletalkADSP", 181402),
          ("appletalkAEP", 181404),
          ("appletalkAFP", 181601),
          ("appletalkASP", 181501),
          ("appletalkATP", 181401),
          ("appletalkDDP", 181301),
          ("appletalkELAP", 181202),
          ("appletalkLLAP", 181201),
          ("appletalkNBP", 181507),
          ("appletalkPAP", 181503),
          ("appletalkRTMP", 181403),
          ("appletalkSNMP", 181510),
          ("appletalkSNMPv1", 181511),
          ("appletalkSNMPv2", 181512),
          ("appletalkSNMPv3", 181513),
          ("appletalkSuite", 180101),
          ("appletalkTLAP", 181203),
          ("appletalkZIP", 181502),
          ("decnetSuite", 170101),
          ("directPrintSuite", 290101),
          ("ibmbisync3270PS", 161602),
          ("ibmbisync5250PS", 161603),
          ("ibmbisyncDLC", 161201),
          ("ibmbisyncPS", 161601),
          ("ibmbisyncRJE", 161604),
          ("ibmbisyncSuite", 160101),
          ("ibmsna3270PS", 151602),
          ("ibmsna5250PS", 151603),
          ("ibmsnaAPPC", 151605),
          ("ibmsnaCSC", 151502),
          ("ibmsnaDFC", 151501),
          ("ibmsnaDLC", 151211),
          ("ibmsnaDLS", 151221),
          ("ibmsnaLUNS", 151504),
          ("ibmsnaPC", 151301),
          ("ibmsnaPS", 151601),
          ("ibmsnaPUNS", 151503),
          ("ibmsnaRJE", 151604),
          ("ibmsnaSDLC", 151201),
          ("ibmsnaSuite", 150101),
          ("ibmsnaTC", 151401),
          ("internetARP", 141303),
          ("internetBOOTP", 141305),
          ("internetCLDAP", 141552),
          ("internetDHCP", 141304),
          ("internetDNS", 141507),
          ("internetFTP", 141504),
          ("internetFax", 141516),
          ("internetHTTP", 141509),
          ("internetICMP", 141302),
          ("internetIMAP4", 141515),
          ("internetIP", 141301),
          ("internetIPP", 141502),
          ("internetIPv6", 141310),
          ("internetLDAP", 141551),
          ("internetLPR", 141503),
          ("internetOsfDceCDS", 141531),
          ("internetOsfDceKerberos", 141533),
          ("internetOsfDceRPC", 141532),
          ("internetOsfDceSuite", 141530),
          ("internetOsfDmeSuite", 141540),
          ("internetPOP3", 141514),
          ("internetPPP", 141202),
          ("internetPing", 141404),
          ("internetRARP", 141306),
          ("internetRaw", 141501),
          ("internetSLIP", 141201),
          ("internetSLP", 141591),
          ("internetSLPv1", 141592),
          ("internetSLPv2", 141593),
          ("internetSMTP", 141505),
          ("internetSNMP", 141510),
          ("internetSNMPv1", 141511),
          ("internetSNMPv2", 141512),
          ("internetSNMPv3", 141513),
          ("internetSSL3", 141405),
          ("internetSalutation", 141561),
          ("internetSuite", 140101),
          ("internetSunOncNIS", 141521),
          ("internetSunOncPlusNIS", 141522),
          ("internetSunOncPlusRPC", 141524),
          ("internetSunOncRPC", 141523),
          ("internetSunOncSuite", 141520),
          ("internetSunTiRPC", 141525),
          ("internetTCP", 141402),
          ("internetTFTP", 141508),
          ("internetTLS", 141406),
          ("internetTelnet", 141506),
          ("internetUDP", 141401),
          ("internetUpnpGENA", 141572),
          ("internetUpnpSSDP", 141571),
          ("internetUpnpSuite", 141570),
          ("internetWINS", 141519),
          ("lanmanagerSuite", 230101),
          ("lanserverSuite", 220101),
          ("lantasticSuite", 210101),
          ("netbeuiDLC", 261231),
          ("netbeuiDatalink", 261201),
          ("netbeuiLLC", 261221),
          ("netbeuiSuite", 260101),
          ("netbiosFClient", 251704),
          ("netbiosFServer", 251705),
          ("netbiosIntDistServer", 251522),
          ("netbiosIntEndNode", 251520),
          ("netbiosIntNameServer", 251521),
          ("netbiosNBP", 251501),
          ("netbiosPClient", 251702),
          ("netbiosPServer", 251703),
          ("netbiosSAP", 251591),
          ("netbiosSMB", 251701),
          ("netbiosSNMP", 251510),
          ("netbiosSNMPv1", 251511),
          ("netbiosSNMPv2", 251512),
          ("netbiosSNMPv3", 251513),
          ("netbiosSuite", 250101),
          ("netwareBindery", 191507),
          ("netwareEcho", 191404),
          ("netwareFServer", 191504),
          ("netwareIPX", 191301),
          ("netwareMHS", 191505),
          ("netwareNCP", 191501),
          ("netwareNDS", 191508),
          ("netwareNetbios", 191502),
          ("netwarePServer", 191503),
          ("netwareRIP", 191403),
          ("netwareRPrinter", 191509),
          ("netwareSAP", 191591),
          ("netwareSNMP", 191510),
          ("netwareSNMPv1", 191511),
          ("netwareSNMPv2", 191512),
          ("netwareSNMPv3", 191513),
          ("netwareSPX", 191402),
          ("netwareSuite", 190101),
          ("ntasSuite", 240101),
          ("osilan80210SDE", 111241),
          ("osilan80211MAC", 111208),
          ("osilan80211PHY", 111118),
          ("osilan80211PMD", 111108),
          ("osilan80211SMT", 111218),
          ("osilan8021BLMMP", 111232),
          ("osilan8021DBRG", 111234),
          ("osilan8022LLC", 111221),
          ("osilan8022LLCSNAP", 111222),
          ("osilan8023MAC", 111203),
          ("osilan8023PHY", 111113),
          ("osilan8023PMD", 111103),
          ("osilan8024MAC", 111204),
          ("osilan8024PHY", 111114),
          ("osilan8024PMD", 111104),
          ("osilan8025MAC", 111205),
          ("osilan8025PHY", 111115),
          ("osilan8025PMD", 111105),
          ("osilan8025SMT", 111215),
          ("osilanFDDIMAC", 111207),
          ("osilanFDDIPHY", 111117),
          ("osilanFDDIPMD", 111107),
          ("osilanFDDISMT", 111217),
          ("osilanSuite", 110101),
          ("osiman8026MAC", 121206),
          ("osiman8026PHY", 121116),
          ("osiman8026PMD", 121106),
          ("osiman8026SMT", 121216),
          ("osimanSuite", 120101),
          ("osiwanACSE", 131701),
          ("osiwanCCR", 131704),
          ("osiwanCLNP", 131301),
          ("osiwanCLPP", 131601),
          ("osiwanCLSP", 131501),
          ("osiwanCLTP", 131401),
          ("osiwanCMIP", 131771),
          ("osiwanCONP", 131302),
          ("osiwanCOPP", 131602),
          ("osiwanCOSP", 131502),
          ("osiwanCOTP", 131402),
          ("osiwanDAP", 131751),
          ("osiwanDPA", 131713),
          ("osiwanDS", 131750),
          ("osiwanDSP", 131752),
          ("osiwanESIS", 131303),
          ("osiwanFTAM", 131714),
          ("osiwanFax", 131241),
          ("osiwanHdlcABM", 131201),
          ("osiwanHdlcABME", 131211),
          ("osiwanHdlcARM", 131202),
          ("osiwanHdlcARME", 131212),
          ("osiwanHdlcLAPB", 131221),
          ("osiwanHdlcLAPD", 131224),
          ("osiwanHdlcNRM", 131203),
          ("osiwanHdlcNRME", 131213),
          ("osiwanISDN", 131261),
          ("osiwanISIS", 131304),
          ("osiwanMHS", 131740),
          ("osiwanMgmt", 131770),
          ("osiwanPSTN", 131251),
          ("osiwanROSE", 131703),
          ("osiwanRTSE", 131702),
          ("osiwanSec", 131780),
          ("osiwanSuite", 130101),
          ("osiwanVT", 131716),
          ("other", 1),
          ("parallelSuite", 280101),
          ("serialSuite", 270101),
          ("unknown", 2),
          ("usbSuite", 300101),
          ("vinesARP", 201313),
          ("vinesFiling", 201702),
          ("vinesICMP", 201312),
          ("vinesIP", 201311),
          ("vinesMail", 201703),
          ("vinesNetRPC", 201501),
          ("vinesNetbios", 201503),
          ("vinesPrint", 201701),
          ("vinesSocket", 201502),
          ("vinesStreetTalk", 201704),
          ("vinesSuite", 200101),
          ("vinesTCP", 201412),
          ("vinesUDP", 201411),
          ("vinesVARP", 201303),
          ("vinesVICP", 201302),
          ("vinesVIP", 201301),
          ("vinesVIPC", 201401),
          ("vinesVRTP", 201314),
          ("vinesVSPP", 201402))
    )

    if mibBuilder.loadTexts:
        description = """\
The specific protocol (within a given protocol suite) currently configured for
this stack layer or sublayer. Usage: The following enumeration is used to
unambiguously identify a specific protocol (within a given protocol suite),
without resort to textual strings. Note: The following enumeration values are
composed of three two-digit elements (left-to-right): a) First, the two-digit
enumeration value of the protocol suite (from 'XcmCommsStackExtSuite'); b)
Second, the two-digit enumeration value of the OSI Reference Model layer (from
'XcmCommsStackExtLayer'); and c) Third, a unique two-digit identifier.
"""


class XcmCommsAddressExtForm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18)
        )
    )
    namedValues = NamedValues(
        *(("email", 16),
          ("fax", 14),
          ("fullName", 17),
          ("other", 1),
          ("packet", 15),
          ("postal", 11),
          ("relName", 18),
          ("telex", 13),
          ("unknown", 2),
          ("voice", 12))
    )

    if mibBuilder.loadTexts:
        description = """\
The current address form of this protocol entity.
"""


class XcmCommsAddressExtScope(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("network", 13),
          ("other", 1),
          ("region", 12),
          ("subnet", 11),
          ("universe", 14),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The current address scope of this protocol entity.
"""


class XcmCommsAddressExtFanout(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 13),
          ("broadcastMask", 17),
          ("multicast", 12),
          ("multicastMask", 16),
          ("other", 1),
          ("unicast", 11),
          ("unicastMask", 15),
          ("universe", 14),
          ("universeMask", 18),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The current address fan out of this protocol entity.
"""


class XcmCommsEngineGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Comms Engine MIB object groups supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask. The
current set of values (which MAY be extended in the future) is given below: 1 :
commsEngineGroup 2 : commsEngineExtGroup 4 : commsStackGroup 8 :
commsStackExtGroup 16 : commsStackXrefGroup 32 : commsMuxGroup 64 :
commsMuxExtGroup 128 : commsAddressGroup 256 : commsAddressExtGroup 512 :
commsTrafficGroup 1024 : commsAccessGroup 2048 : commsMgmtGroup Usage:
Conforming management agents SHALL accurately report their support for XCMI
Comms Engine MIB object groups.
"""


class XcmSnmpNetbiosAddress(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )

    if mibBuilder.loadTexts:
        description = """\
The canonical NetBIOS transport address. The corresponding SNMP over NetBIOS
transport domain is 'xcmSnmpNetbiosDomain'. The canonical NetBIOS transport
address (registered as a NetBIOS session layer name via 'AddName'): Octets
Contents Encoding ---- 1-12 MAC-address ASCII hexadecimal (uppercase) [IEEE
802.x] ('0'-'9', 'A'-'F') 13-14 XCMI-reserved ASCII decimal zeros [XCMI future]
('0' - 0x30) 15-16 NetBIOS-port binary network-byte order [XCMI std port]
(high-order byte first)
"""


class XcmSnmpIPHostnameAddress(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(255, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
The transport address. The corresponding transport domain is
'xcmSnmpIPHostnameDomain'. Octets Contents Encoding ---- 1 Host Name Length
unsigned char 0-255 2-n FQDN n+1, n+2 UDP Port
"""


class XcmCommsConfigGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Comms Config MIB object groups supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask. The
current set of values (which MAY be extended in the future) is given below: 1 :
commsConfigGroup 2 : commsOptionGroup 4 : commsDirRecordGroup 8 :
commsDirAttributeGroup 16 : commsDirStringGroup 32 : commsProtocolGroup Usage:
Conforming management agents SHALL accurately report their support for XCMI
Comms Config MIB object groups.
"""


class XcmCommsDirRecordType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              100,
              101,
              200,
              201,
              300,
              301,
              400,
              401,
              500,
              501,
              600,
              601,
              700,
              701,
              800,
              801,
              900,
              901)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("recordAccount", 200),
          ("recordAccountGroup", 201),
          ("recordButtonDial", 800),
          ("recordButtonDialGroup", 801),
          ("recordDepartment", 300),
          ("recordDepartmentGroup", 301),
          ("recordMailbox", 400),
          ("recordMailboxGroup", 401),
          ("recordRepository", 900),
          ("recordRepositoryGroup", 901),
          ("recordResource", 500),
          ("recordResourceGroup", 501),
          ("recordService", 100),
          ("recordServiceGroup", 101),
          ("recordSpeedDial", 600),
          ("recordSpeedDialGroup", 601),
          ("recordUser", 700),
          ("recordUserGroup", 701),
          ("top", 10),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The type of the directory record specified in this conceptual row in the
'xcmCommsDirRecordTable'. Usage: Directory records of type 'recordXxxGroup'
SHALL contain only 'xxxIndex' directory attributes (ie, pointers to individual
'recordXxx' directory records).
"""


class XcmCommsDirAttributeType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11,
              12,
              13,
              20,
              21,
              22,
              23,
              30,
              31,
              32,
              33,
              100,
              101,
              102,
              103,
              110,
              111,
              112,
              120,
              121,
              122,
              123,
              124,
              125,
              130,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              160,
              161,
              162,
              163,
              170,
              171,
              172,
              173,
              180,
              181,
              182,
              183,
              200,
              201,
              202,
              203,
              210,
              211,
              212,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              260,
              261,
              300,
              301,
              350,
              351,
              352,
              360,
              361,
              400,
              401,
              450,
              451,
              452,
              460,
              461,
              500,
              501,
              502,
              503,
              510,
              511,
              512,
              540,
              541,
              542,
              543,
              544,
              545,
              546,
              547,
              550,
              551,
              552,
              553,
              554,
              555,
              556,
              557,
              560,
              561,
              600,
              601,
              650,
              651,
              652,
              660,
              661,
              700,
              701,
              702,
              703,
              710,
              711,
              712,
              740,
              741,
              742,
              743,
              744,
              745,
              746,
              747,
              750,
              751,
              752,
              753,
              754,
              755,
              756,
              757,
              760,
              761,
              800,
              801,
              850,
              851,
              852,
              860,
              861,
              900,
              901,
              902,
              903,
              911,
              912,
              950,
              951,
              952,
              953,
              954,
              955,
              956,
              957,
              960,
              961,
              1000,
              1001,
              1002,
              1003,
              1004,
              1010,
              1011,
              1030,
              1510,
              1511,
              1512,
              1513,
              1514,
              1515,
              1520,
              1521,
              1522,
              1523,
              1530,
              1531,
              1532,
              1533,
              1534,
              1535,
              1536,
              1537,
              1540,
              1541,
              1542,
              1543,
              1544,
              1550,
              1551,
              1552,
              1553,
              1554,
              1560,
              1561,
              1562,
              1570,
              1571,
              1572,
              1580,
              1581,
              1582,
              1583,
              1584,
              1585,
              1590,
              1591,
              1592,
              1593,
              1600,
              1601,
              1602,
              1603,
              1604,
              1605,
              1606,
              1610,
              1611,
              1620,
              1621,
              1622,
              1623,
              1624,
              1625,
              1626,
              1627,
              1628,
              1630,
              1631,
              2000,
              2001,
              2002,
              2003,
              2004,
              2005,
              2006,
              2007,
              2010,
              2011,
              2012,
              2013,
              2014,
              2015,
              2020,
              2021,
              2022,
              2023,
              2030,
              2031,
              2032,
              2033,
              2040,
              3000)
        )
    )
    namedValues = NamedValues(
        *(("accountAlias", 255),
          ("accountCode", 252),
          ("accountDescription", 260),
          ("accountFullName", 251),
          ("accountGroupIndex", 201),
          ("accountIndex", 200),
          ("accountLifetimeErrorCount", 244),
          ("accountLifetimeErrorLimit", 245),
          ("accountLifetimeLimit", 243),
          ("accountLifetimeUnit", 242),
          ("accountLifetimeUnitClass", 241),
          ("accountLifetimeUsage", 240),
          ("accountLifetimeWarningCount", 246),
          ("accountLifetimeWarningLimit", 247),
          ("accountLocation", 261),
          ("accountLoginDate", 256),
          ("accountLogoutDate", 257),
          ("accountName", 250),
          ("accountPasscode", 254),
          ("accountPassword", 253),
          ("accountPosixRights", 202),
          ("accountPosixVerbs", 203),
          ("accountRole", 210),
          ("accountScope", 212),
          ("accountSkill", 211),
          ("buttonDialCode", 852),
          ("buttonDialDescription", 860),
          ("buttonDialFullName", 851),
          ("buttonDialGroupIndex", 801),
          ("buttonDialIndex", 800),
          ("buttonDialLocation", 861),
          ("buttonDialName", 850),
          ("childGroupRecordIndex", 33),
          ("childGroupRecordType", 32),
          ("childRecordIndex", 31),
          ("childRecordType", 30),
          ("departmentCode", 352),
          ("departmentDescription", 360),
          ("departmentFullName", 351),
          ("departmentGroupIndex", 301),
          ("departmentIndex", 300),
          ("departmentLocation", 361),
          ("departmentName", 350),
          ("mailboxCode", 452),
          ("mailboxDescription", 460),
          ("mailboxFullName", 451),
          ("mailboxGroupIndex", 401),
          ("mailboxIndex", 400),
          ("mailboxLocation", 461),
          ("mailboxName", 450),
          ("other", 1),
          ("parentGroupRecordIndex", 13),
          ("parentGroupRecordType", 12),
          ("parentRecordIndex", 11),
          ("parentRecordType", 10),
          ("peerGroupRecordIndex", 23),
          ("peerGroupRecordType", 22),
          ("peerRecordIndex", 21),
          ("peerRecordType", 20),
          ("protocolAutoSwitch", 1583),
          ("protocolBidirectional", 1534),
          ("protocolBinaryPS", 1584),
          ("protocolCableAdaptive", 1515),
          ("protocolCableType", 1514),
          ("protocolConnectorAdaptive", 1511),
          ("protocolConnectorType", 1510),
          ("protocolDefaultPDL", 1585),
          ("protocolDeviceIndex", 1010),
          ("protocolDirection", 1535),
          ("protocolFlowControl", 1536),
          ("protocolFrameAdaptive", 1521),
          ("protocolFrameType", 1520),
          ("protocolInputFlowWindow", 1541),
          ("protocolInputPrime", 1542),
          ("protocolInputTimeout", 1540),
          ("protocolInterfaceIndex", 1011),
          ("protocolJobTimeout", 1582),
          ("protocolLayer", 1004),
          ("protocolListen", 1570),
          ("protocolListenInterval", 1572),
          ("protocolListenSocket", 1571),
          ("protocolMaxConnections", 1537),
          ("protocolMaxFrameSize", 1523),
          ("protocolMaxInputChars", 1544),
          ("protocolMaxOutputChars", 1554),
          ("protocolMaxRetries", 1560),
          ("protocolMaxSpeed", 1533),
          ("protocolMaxSpool", 1581),
          ("protocolMinFrameSize", 1522),
          ("protocolMinInputChars", 1543),
          ("protocolMinOutputChars", 1553),
          ("protocolMinSpeed", 1532),
          ("protocolOutputFlowWindow", 1551),
          ("protocolOutputPrime", 1552),
          ("protocolOutputTimeout", 1550),
          ("protocolPollInterval", 1562),
          ("protocolPriority", 1030),
          ("protocolPurpose", 1001),
          ("protocolReceiveAutoReduce", 1626),
          ("protocolReceiveCollate", 1628),
          ("protocolReceiveCoverSheet", 1621),
          ("protocolReceiveEndTime", 1593),
          ("protocolReceiveErrorCorrection", 1631),
          ("protocolReceiveFooter", 1622),
          ("protocolReceiveLineNumber", 1620),
          ("protocolReceiveManual", 1624),
          ("protocolReceiveOverflow", 1627),
          ("protocolReceiveResolution", 1630),
          ("protocolReceiveSecurity", 1625),
          ("protocolReceiveStartTime", 1592),
          ("protocolReceiveToMemory", 1623),
          ("protocolRetryInterval", 1561),
          ("protocolRole", 1002),
          ("protocolSendConfirmPrint", 1603),
          ("protocolSendCoverSheet", 1601),
          ("protocolSendEndTime", 1591),
          ("protocolSendErrorCorrection", 1611),
          ("protocolSendHeader", 1602),
          ("protocolSendLineNumber", 1600),
          ("protocolSendManual", 1604),
          ("protocolSendResolution", 1610),
          ("protocolSendSecurity", 1605),
          ("protocolSendStartTime", 1590),
          ("protocolSendStoreTime", 1606),
          ("protocolSignalAdaptive", 1513),
          ("protocolSignalType", 1512),
          ("protocolSpeed", 1530),
          ("protocolSpeedAdaptive", 1531),
          ("protocolSpool", 1580),
          ("protocolSuite", 1003),
          ("protocolType", 1000),
          ("protocolTypedAcceptAddress", 2020),
          ("protocolTypedAcceptSubnet", 2021),
          ("protocolTypedAddress", 2010),
          ("protocolTypedBroadcastAddress", 2011),
          ("protocolTypedConfirmAddress", 2014),
          ("protocolTypedConfirmURL", 2015),
          ("protocolTypedDescription", 2006),
          ("protocolTypedDeviceName", 2040),
          ("protocolTypedFullName", 2001),
          ("protocolTypedHostName", 2003),
          ("protocolTypedListenAddress", 2012),
          ("protocolTypedLocation", 2007),
          ("protocolTypedMulticastAddress", 2013),
          ("protocolTypedName", 2000),
          ("protocolTypedPassword", 2002),
          ("protocolTypedQueueName", 2004),
          ("protocolTypedRejectAddress", 2022),
          ("protocolTypedRejectSubnet", 2023),
          ("protocolTypedServerName", 2005),
          ("protocolTypedURC", 2030),
          ("protocolTypedURI", 2031),
          ("protocolTypedURL", 2032),
          ("protocolTypedURN", 2033),
          ("repositoryAlias", 955),
          ("repositoryCode", 952),
          ("repositoryDescription", 960),
          ("repositoryFullName", 951),
          ("repositoryGroupIndex", 901),
          ("repositoryIndex", 900),
          ("repositoryLocation", 961),
          ("repositoryLoginDate", 956),
          ("repositoryLogoutDate", 957),
          ("repositoryName", 950),
          ("repositoryPasscode", 954),
          ("repositoryPassword", 953),
          ("repositoryPosixRights", 902),
          ("repositoryPosixVerbs", 903),
          ("repositoryScope", 912),
          ("repositorySkill", 911),
          ("reserved", 3000),
          ("resourceAlias", 555),
          ("resourceCode", 552),
          ("resourceDescription", 560),
          ("resourceFullName", 551),
          ("resourceGroupIndex", 501),
          ("resourceIndex", 500),
          ("resourceLifetimeErrorCount", 544),
          ("resourceLifetimeErrorLimit", 545),
          ("resourceLifetimeLimit", 543),
          ("resourceLifetimeUnit", 542),
          ("resourceLifetimeUnitClass", 541),
          ("resourceLifetimeUsage", 540),
          ("resourceLifetimeWarningCount", 546),
          ("resourceLifetimeWarningLimit", 547),
          ("resourceLocation", 561),
          ("resourceLoginDate", 556),
          ("resourceLogoutDate", 557),
          ("resourceName", 550),
          ("resourcePasscode", 554),
          ("resourcePassword", 553),
          ("resourcePosixRights", 502),
          ("resourcePosixVerbs", 503),
          ("resourceScope", 512),
          ("resourceSkill", 511),
          ("resourceType", 510),
          ("serviceAlias", 155),
          ("serviceCharsetConfigured", 172),
          ("serviceCharsetSupported", 173),
          ("serviceCode", 152),
          ("serviceContext", 181),
          ("serviceDescription", 160),
          ("serviceExternalDeviceIndex", 122),
          ("serviceFullName", 151),
          ("serviceGroupIndex", 101),
          ("serviceIndex", 100),
          ("serviceLanguageConfigured", 170),
          ("serviceLanguageSupported", 171),
          ("serviceLifetimeErrorCount", 144),
          ("serviceLifetimeErrorLimit", 145),
          ("serviceLifetimeLimit", 143),
          ("serviceLifetimeUnit", 142),
          ("serviceLifetimeUnitClass", 141),
          ("serviceLifetimeUsage", 140),
          ("serviceLifetimeWarningCount", 146),
          ("serviceLifetimeWarningLimit", 147),
          ("serviceLocation", 161),
          ("serviceLogicalDeviceIndex", 121),
          ("serviceLoginDate", 156),
          ("serviceLogoutDate", 157),
          ("serviceName", 150),
          ("servicePasscode", 154),
          ("servicePassword", 153),
          ("servicePath", 183),
          ("servicePhysicalDeviceIndex", 120),
          ("servicePosixRights", 102),
          ("servicePosixVerbs", 103),
          ("servicePriority", 130),
          ("serviceProductID", 163),
          ("serviceSWInstalledIndex", 124),
          ("serviceSWRunIndex", 123),
          ("serviceScope", 112),
          ("serviceSkill", 111),
          ("serviceStorageIndex", 125),
          ("serviceTree", 180),
          ("serviceType", 110),
          ("serviceTypeOID", 162),
          ("serviceVolume", 182),
          ("speedDialCode", 652),
          ("speedDialDescription", 660),
          ("speedDialFullName", 651),
          ("speedDialGroupIndex", 601),
          ("speedDialIndex", 600),
          ("speedDialLocation", 661),
          ("speedDialName", 650),
          ("unknown", 2),
          ("userAlias", 755),
          ("userCode", 752),
          ("userDescription", 760),
          ("userFullName", 751),
          ("userGroupIndex", 701),
          ("userIndex", 700),
          ("userLifetimeErrorCount", 744),
          ("userLifetimeErrorLimit", 745),
          ("userLifetimeLimit", 743),
          ("userLifetimeUnit", 742),
          ("userLifetimeUnitClass", 741),
          ("userLifetimeUsage", 740),
          ("userLifetimeWarningCount", 746),
          ("userLifetimeWarningLimit", 747),
          ("userLocation", 761),
          ("userLoginDate", 756),
          ("userLogoutDate", 757),
          ("userName", 750),
          ("userPasscode", 754),
          ("userPassword", 753),
          ("userPosixRights", 702),
          ("userPosixVerbs", 703),
          ("userRole", 710),
          ("userScope", 712),
          ("userSkill", 711))
    )

    if mibBuilder.loadTexts:
        description = """\
A directory attribute type, used to identify this integer-valued directory
attribute, which MAY have a matching string-valued directory attribute in
'xcmCommsDirStringTable'. Usage: When directory attribute type indicates
integer-valued, the value of 'xcmCommsDirAttributeValue' SHALL be the actual
value of this directory attribute. Usage: When directory attribute type
indicates string-valued, the value of 'xcmCommsDirAttributeValue' SHALL be
zero, EXCEPT for a directory attribute type of 'protocolTyped...', when the
protocol type SHALL be specified as the integer value. The actual string-valued
attribute SHALL be specified in an exactly matching row of
'xcmCommsDirStringTable'. Usage: Matching directory attributes (string-valued)
SHALL be specified in an exactly matching row of 'xcmCommsDirStringTable'.
Matching rows have EXACTLY the SAME values of 'xcmCommsDirRecordType',
'xcmCommsDirRecordIndex', 'xcmCommsDirAttributeType', and
'xcmCommsDirAttributeIndex'. Usage: Parallel directory attributes (peers of
this one) SHALL be specified in parallel (NOT matching) rows of
'xcmCommsDirAttributeTable' (integer-valued attributes) or
'xcmCommsDirStringTable' (string-valued attributes). Parallel rows have EXACTLY
the SAME values of 'xcmCommsDirRecordType', 'xcmCommsDirRecordIndex', and
'xcmCommsDirAttributeIndex', but MUST have a DIFFERENT value of
'xcmCommsDirAttributeType'. Usage: When directory attribute type is
'protocolTyped...' the particular protocol layer SHALL be specified by placing
a a value from the enumeration 'XcmCommsStackExtProtocol' in
'xcmCommsDirAttributeValue' for this row.
"""


class XcmCommsLDAPAttributeType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              121,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              138,
              143,
              145,
              146,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              300)
        )
    )
    namedValues = NamedValues(
        *(("associatedDomain", 127),
          ("associatedName", 128),
          ("audio", 145),
          ("authorityRevocationList", 38),
          ("buildingName", 138),
          ("businessCategory", 15),
          ("caCertificate", 37),
          ("carLicense", 201),
          ("certificateRevocationList", 39),
          ("city", 7),
          ("commonName", 3),
          ("country", 6),
          ("crossCertificatePair", 40),
          ("deltaRevocationList", 53),
          ("departmentNumber", 202),
          ("description", 13),
          ("destinationIndicator", 27),
          ("displayName", 203),
          ("distinguishedName", 49),
          ("dmdName", 54),
          ("dnQualifier", 46),
          ("documentAuthor", 114),
          ("documentIdentifier", 111),
          ("documentLocation", 115),
          ("documentPublisher", 146),
          ("documentTitle", 112),
          ("documentVersion", 113),
          ("domainComponent", 121),
          ("employeeNumber", 204),
          ("employeeType", 205),
          ("enhancedSearchGuide", 47),
          ("favoriteDrink", 105),
          ("faxNumber", 23),
          ("friendlyCountry", 133),
          ("generationQualifier", 44),
          ("givenName", 42),
          ("homePhone", 116),
          ("homePostalAddress", 129),
          ("host", 109),
          ("houseIdentifier", 51),
          ("info", 104),
          ("initials", 43),
          ("isdnNumber", 25),
          ("jpegPhoto", 206),
          ("labeledURI", 300),
          ("mail", 103),
          ("manager", 110),
          ("member", 31),
          ("mobile", 131),
          ("name", 41),
          ("office", 19),
          ("org", 10),
          ("orgStatus", 135),
          ("orgUnit", 11),
          ("other", 1),
          ("otherMailbox", 118),
          ("owner", 32),
          ("pager", 132),
          ("personalSignature", 143),
          ("personalTitle", 130),
          ("photo", 107),
          ("postOfficeBox", 18),
          ("postalAddress", 16),
          ("postalCode", 17),
          ("preferredDeliveryMethod", 28),
          ("preferredLanguage", 207),
          ("presentationAddress", 29),
          ("protocolInformation", 48),
          ("registeredAddress", 26),
          ("role", 33),
          ("roomNumber", 106),
          ("searchGuide", 14),
          ("secretary", 117),
          ("seeAlso", 34),
          ("serialNumber", 5),
          ("state", 8),
          ("streetAddress", 9),
          ("supportedAlgorithms", 52),
          ("supportedContext", 30),
          ("surname", 4),
          ("telephoneNumber", 20),
          ("teletexTerminal", 22),
          ("telexNumber", 21),
          ("textEncodedORAddress", 102),
          ("title", 12),
          ("uid", 101),
          ("uniqueIdentifier", 134),
          ("uniqueMember", 50),
          ("unknown", 2),
          ("userCertificate", 36),
          ("userClass", 108),
          ("userPKCS12", 209),
          ("userPassword", 35),
          ("userSMIMECertificate", 208),
          ("x121Address", 24),
          ("x500UniqueIdentifier", 45))
    )

    if mibBuilder.loadTexts:
        description = """\
The type of LDAP attribute stored in this communications, device, or service
detail conceptual row. Usage: Conforming XCMI management stations and agents
SHALL encode LDAP attributes as UTF-8 strings (like SLPv2, RFC 2608). -
Integers SHALL be encoded as (signed) decimal strings. - Booleans SHALL be
encoded as 'true' or 'false' strings. - Binary data (e.g., 'userCertificate')
SHALL be stored in SLPv2 opaque encoding (leading '\FF' and escaped octets).
"""


class XcmSvcMonGroupSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Service Monitoring MIB groups supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask. The
current set of values (which MAY be extended in the future) is given below: 1 :
svcMonGeneralGroup 2 : svcMonQueueGroup 4 : svcMonQueueExtGroup 8 :
svcMonServiceGroup 16 : svcMonServiceDetailGroup 32 : svcMonServiceMgmtGroup
Usage: Conforming management agents SHALL accurately report their support for
XCMI Service Monitoring MIB groups.
"""


class XcmSvcMonJobConfirmSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
The support for handling job confirmation reports and/or job notifications on
this host system, specified in a bit-mask. The current set of values (which MAY
be extended in the future) is given below: 1 : confirmOnError 2 :
confirmOnWarning 4 : confirmOnAbort 8 : confirmOnCancel 16 : confirmOnComplete
32 : confirmOnReceive 64 : confirmOnDeliver 128 : confirmOnStateChange 256 :
confirmOnStateReasonChange Usage: Conforming management agents SHALL accurately
report their support for job confirmation reports.
"""


class XcmSvcMonAttachmentPDLSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )

    if mibBuilder.loadTexts:
        description = """\
 This bit-mask defines a set of Page Description Languages which are acceptable
for email attachments. The current set of values (which MAY be extended in the
future) is given below: 1 : attachmentTIFF 2 : attachmentPDF 4 : attachmentPS 8
: attachmentTXT 16 : attachmentPCL 32 : attachmentPRN 64 : attachmentJPG 128 :
attachmentXPS 256 : attachmentPDFA Usage: The set of accepted attachment types
is specified by adding together the various PDL values.
"""


class XcmSvcMonServiceMgmtOperation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              1201,
              1202,
              1203,
              1204,
              1205,
              1206,
              1207,
              1208,
              1209,
              1210,
              2201,
              2202,
              2221,
              2222,
              2223,
              2224,
              2225,
              2226,
              2231,
              2232,
              2233,
              2234,
              2241,
              2242)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("other", 1),
          ("serviceBackup", 2223),
          ("serviceClean", 1205),
          ("serviceConfigure", 2225),
          ("serviceCreate", 1201),
          ("serviceDelete", 1202),
          ("serviceDiagnose", 2226),
          ("serviceDisable", 1206),
          ("serviceEnable", 1207),
          ("serviceInstall", 2221),
          ("serviceList", 1203),
          ("serviceLogin", 2241),
          ("serviceLogout", 2242),
          ("serviceManage", 2201),
          ("servicePause", 1208),
          ("serviceResetCold", 2233),
          ("serviceResetCounters", 2231),
          ("serviceResetFactory", 2234),
          ("serviceResetWarm", 2232),
          ("serviceRestart", 2202),
          ("serviceRestore", 2224),
          ("serviceResume", 1209),
          ("serviceSet", 1204),
          ("serviceShutdown", 1210),
          ("serviceUpgrade", 2222),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
The most recent service management operation specified for this conceptual row
in the 'xcmSvcMonServiceMgmtTable'. Usage: The operations specified in this
textual convention are derived from the 'object' and 'server' operations
specified in the POSIX.3 standard. Note: The enum of '0' (zero) in this textual
convention is illegal in strict SMIv1 (see section 3.2.1.1 of RFC 1155), so
this TC must be converted to an integer range for pure SMIv1.
"""


class XcmSvcMonServiceMgmtData(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )

    if mibBuilder.loadTexts:
        description = """\
The most recent simple service management data specified for this conceptual
row in the 'xcmSvcMonServiceMgmtTable'. XCMI service management commands are
passed as strings in 'xcmSvcMonServiceMgmtData' in the XCMI Service Monitoring
MIB. XCMI management commands MAY also require one or more arguments (in
addition to any specific variable bindings of MIB objects). Required arguments
are passed as 'tagged string arguments' in 'xcmSvcMonServiceMgmtData'. XCMI
standard 'tags' for data in 'tagged string arguments', are specified in
'XcmHrDevMgmtCommandDataTag', or are as follows * DT [Date and Time] XCMI
standard 'system operation' types for use in 'SO' arguments (in
'xcmSvcMonServiceMgmtData') are as follows. The form of SO requests is
'SO=...'. This tagged data includes an extension to XcmHrDevMgmtCommandDataTag.
Each 'tagged string argument' substring is of the form: 'TT=value:' where: 'TT'
two-character 'tag', naming argument type '=' literal equal sign, beginning
argument value 'value' human-readable string, encoding argument value ':'
literal colon, terminating argument value Some tags require a qualifier. For
example, see 'CreatePublicFolder'. * SO (Service Operation - no object mapping)
* TP (Type - no object mapping) * TM (Time - no object mapping) * FN (Filename
- no object mapping) * CreatePublicFolder * DeleteAllPublicFiles *
DeleteAllPublicFolders * DeletePublicFile * DeletePublicFolder * Disable *
DiskOverwrite * S2DPrivateAccessPasswordOn * S2DPrivateAutoDeleteInterval *
S2DPrivateAutoDeleteOn * S2DPrivateScanPasswordOn * S2DPublicAutoDeleteInterval
* S2DPublicAutoDeleteOn * S2DPublicState * PrintCollationOff * PrintCollationOn
* PrintMedia2ndSide * PrintMediaCardStock * PrintMediaColoredPaper *
PrintMediaEnvelope * PrintMediaLabel * PrintMediaLetterhead *
PrintMediaPlainPaper * PrintMediaPreprinted * PrintMediaPrepunched *
PrintMediaSpecial * PrintMediaTransparency * PrintOrientationLandScape *
PrintOrientationPortrait * PrintPlexOff * PrintPlexOn * PrintStaplingOff *
PrintStaplingOn The above XCMI standard 'tags' MAY be extended in the future.
"""


class XcmSvcMonServiceDetailClass(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              200,
              201,
              202,
              203,
              250,
              251,
              252,
              253,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              400,
              401,
              402,
              403,
              404,
              450,
              451,
              452,
              453,
              454,
              500,
              501,
              562,
              563,
              564,
              570,
              600)
        )
    )
    namedValues = NamedValues(
        *(("localAccountingServer", 100),
          ("localApplicationRelay", 307),
          ("localApplicationServer", 101),
          ("localAutomaticDiagnosticService", 570),
          ("localDatalinkRelay", 302),
          ("localDevice", 600),
          ("localDocumentServer", 102),
          ("localFileServer", 103),
          ("localJobAccountingServer", 200),
          ("localJobLoggingServer", 201),
          ("localJobProcessingServer", 202),
          ("localJobTemplateServer", 203),
          ("localLoggingServer", 104),
          ("localMailServer", 108),
          ("localNameServer", 105),
          ("localNetMgmtAgent", 400),
          ("localNetMgmtEventSource", 401),
          ("localNetMgmtEventTarget", 402),
          ("localNetMgmtProxy", 403),
          ("localNetMgmtStation", 404),
          ("localNetworkRelay", 303),
          ("localNotificationServer", 106),
          ("localOther", 3),
          ("localPhysicalRelay", 301),
          ("localPresentationRelay", 306),
          ("localProtocolConfigurationServer", 109),
          ("localSecurityServer", 107),
          ("localSessionRelay", 305),
          ("localTransportRelay", 304),
          ("other", 1),
          ("remoteAccountingServer", 150),
          ("remoteApplicationRelay", 357),
          ("remoteApplicationServer", 151),
          ("remoteDatalinkRelay", 352),
          ("remoteDirectlyConnectHost", 501),
          ("remoteDocumentServer", 152),
          ("remoteFileServer", 153),
          ("remoteJobAccountingServer", 250),
          ("remoteJobLoggingServer", 251),
          ("remoteJobProcessingServer", 252),
          ("remoteJobTemplateServer", 253),
          ("remoteLoggingServer", 154),
          ("remoteMailServer", 158),
          ("remoteNameServer", 155),
          ("remoteNetMgmtAgent", 450),
          ("remoteNetMgmtEventSource", 451),
          ("remoteNetMgmtEventTarget", 452),
          ("remoteNetMgmtProxy", 453),
          ("remoteNetMgmtStation", 454),
          ("remoteNetworkRelay", 353),
          ("remoteNetworkedHost", 500),
          ("remoteNotificationServer", 156),
          ("remoteOther", 4),
          ("remotePhysicalRelay", 351),
          ("remotePresentationRelay", 356),
          ("remoteSecurityServer", 157),
          ("remoteSessionRelay", 355),
          ("remoteTransportRelay", 354),
          ("remoteValidationServer", 159),
          ("unknown", 2),
          ("wsPrintService", 563),
          ("wsScanService", 564),
          ("xeroxResourceService", 562))
    )

    if mibBuilder.loadTexts:
        description = """\
A service detail class, used by system administrators and end users to specify
the correct class for this service detail.
"""


class XcmSvcMonServiceDetailType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              101,
              102,
              103,
              104,
              105,
              106,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              135,
              136,
              137,
              140,
              141,
              142,
              143,
              150,
              151,
              152,
              153,
              154,
              155,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              250,
              251,
              252,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              281,
              282,
              283,
              284,
              285,
              287,
              288,
              291,
              292,
              293,
              294,
              295,
              299,
              301,
              302,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              400,
              401,
              402,
              403,
              404,
              405,
              500,
              501,
              502,
              503,
              504,
              510,
              515,
              520,
              550,
              551,
              570,
              571,
              600,
              601,
              602,
              603,
              604,
              610,
              700,
              701,
              702,
              703,
              704,
              705,
              706,
              720,
              721,
              722,
              723,
              730,
              731,
              732,
              733,
              740,
              741,
              742,
              743,
              744,
              745,
              746,
              747)
        )
    )
    namedValues = NamedValues(
        *(("accessPasswordRequired", 602),
          ("answerDelay", 721),
          ("autoDeleteEnabled", 600),
          ("autoDeleteInterval", 601),
          ("autoResendCount", 704),
          ("autoResendPolicy", 703),
          ("createPasswordRequired", 603),
          ("faxAutoActivityReportOn", 733),
          ("faxCountryCode", 743),
          ("faxFileFormat", 742),
          ("faxLineName", 745),
          ("faxLineNumber", 744),
          ("faxLineOptions", 746),
          ("faxReceiveHeader", 747),
          ("faxReceiveOn", 720),
          ("faxReducedImageOn", 732),
          ("faxRule", 740),
          ("faxRuleName", 741),
          ("faxSendOn", 700),
          ("faxStartingRate", 705),
          ("faxTransmissionHeader", 706),
          ("faxTransmissionReportOn", 730),
          ("faxTransmissionReportType", 731),
          ("junkFaxPrevention", 722),
          ("other", 1),
          ("redialCount", 701),
          ("redialTimeInterval", 702),
          ("scanMailboxName", 604),
          ("secureFaxOn", 723),
          ("systemAccountingEnabled", 341),
          ("systemAccountingUsage", 250),
          ("systemActivityReportEnabled", 340),
          ("systemAddress", 114),
          ("systemAlias", 126),
          ("systemAlienJobPolicy", 501),
          ("systemAuthMethod", 136),
          ("systemAuthSupport", 137),
          ("systemAvailability", 142),
          ("systemBillingConfiguration", 570),
          ("systemBillingSequenceNumber", 571),
          ("systemCancelDocSupport", 186),
          ("systemCertificateRequired", 105),
          ("systemChannelCopy", 319),
          ("systemChannelDiagnostic", 310),
          ("systemChannelFax", 311),
          ("systemChannelFileTransfer", 312),
          ("systemChannelImageProcess", 313),
          ("systemChannelMail", 314),
          ("systemChannelMultifunction", 315),
          ("systemChannelOCR", 318),
          ("systemChannelOther", 301),
          ("systemChannelPrint", 316),
          ("systemChannelScan", 317),
          ("systemChannelUnknown", 302),
          ("systemColorPassword", 610),
          ("systemConditions", 141),
          ("systemConfigurationSetting", 515),
          ("systemContext", 116),
          ("systemCurrentLocale", 119),
          ("systemCustomPaperTypeFileURI", 226),
          ("systemDescription", 112),
          ("systemDeviceStatusSupport", 179),
          ("systemDeviceXStatusSupport", 180),
          ("systemDirectoryAddressBookDefault", 389),
          ("systemDirectoryLDAPAttribute", 384),
          ("systemDirectoryLDAPObjectClass", 383),
          ("systemDirectoryLDAPSearchEnabled", 385),
          ("systemDirectoryLDAPServerType", 382),
          ("systemDirectoryLocalSearchEnabled", 386),
          ("systemDirectoryMaxSearchResult", 380),
          ("systemDirectorySearchFilter", 387),
          ("systemDirectorySearchSortKey", 388),
          ("systemDirectorySearchTimeout", 381),
          ("systemDiskCapacityAvailable", 348),
          ("systemEnabled", 143),
          ("systemEventLogFullPolicy", 502),
          ("systemEventSupport", 171),
          ("systemExcludeEventInteger", 401),
          ("systemExcludeEventOID", 403),
          ("systemExcludeEventString", 405),
          ("systemFaultLogFileURI", 224),
          ("systemFileDateTime", 222),
          ("systemFilePageCount", 223),
          ("systemFileSystemType", 200),
          ("systemFilename", 210),
          ("systemFilenameAccessRights", 221),
          ("systemFilenameConsole", 218),
          ("systemFilenameDefault", 215),
          ("systemFilenameDevice", 219),
          ("systemFilenameDirectory", 220),
          ("systemFilenameExtension", 212),
          ("systemFilenameHardLink", 217),
          ("systemFilenameIncrement", 213),
          ("systemFilenameOther", 201),
          ("systemFilenameRoot", 211),
          ("systemFilenameSoftLink", 216),
          ("systemFilenameUnknown", 202),
          ("systemFilenameWildcards", 214),
          ("systemForeignJobsVisible", 187),
          ("systemGuestJobPolicy", 500),
          ("systemHelpAddress", 131),
          ("systemHelpDescription", 132),
          ("systemHelpLocation", 133),
          ("systemHelpName", 130),
          ("systemIncludeEventInteger", 400),
          ("systemIncludeEventOID", 402),
          ("systemIncludeEventString", 404),
          ("systemInitialValDocSupport", 184),
          ("systemInitialValJobSupport", 183),
          ("systemJobAttributeDefault", 239),
          ("systemJobAttributeSupport", 238),
          ("systemJobAutoSuppression", 338),
          ("systemJobBlackColorBalance", 347),
          ("systemJobConfirmContent", 191),
          ("systemJobConfirmEnabled", 190),
          ("systemJobConfirmPolicy", 193),
          ("systemJobConfirmSheetColor", 198),
          ("systemJobConfirmSheetType", 199),
          ("systemJobConfirmSupport", 192),
          ("systemJobCopySenderEnabled", 299),
          ("systemJobCoverSheetContent", 272),
          ("systemJobCoverSheetContentKey", 273),
          ("systemJobCoverSheetContentOID", 274),
          ("systemJobCoverSheetContentText", 275),
          ("systemJobCoverSheetEnabled", 271),
          ("systemJobCyanColorBalance", 339),
          ("systemJobDayOfMonth", 324),
          ("systemJobDayOfWeek", 323),
          ("systemJobDefaultColorMode", 336),
          ("systemJobDefaultDepthResolution", 197),
          ("systemJobDefaultFeedResolution", 195),
          ("systemJobDefaultOriginalType", 337),
          ("systemJobDefaultPDL", 194),
          ("systemJobDefaultTray", 327),
          ("systemJobDefaultXFeedResolution", 196),
          ("systemJobErrorSheetContent", 282),
          ("systemJobErrorSheetContentKey", 283),
          ("systemJobErrorSheetContentOID", 284),
          ("systemJobErrorSheetContentText", 285),
          ("systemJobErrorSheetEnabled", 281),
          ("systemJobFinishingDefault", 231),
          ("systemJobFinishingSupport", 230),
          ("systemJobFrequency", 322),
          ("systemJobHoldDeleteTimeout", 333),
          ("systemJobIncompleteTimeout", 331),
          ("systemJobLogFullPolicy", 503),
          ("systemJobLogUserInformation", 320),
          ("systemJobLtrA4Substitution", 326),
          ("systemJobMagentaColorBalance", 345),
          ("systemJobMediaDefault", 237),
          ("systemJobMediaSupport", 236),
          ("systemJobOrientationDefault", 235),
          ("systemJobOrientationSupport", 234),
          ("systemJobPCLDraftMode", 328),
          ("systemJobPauseResumeTimeout", 334),
          ("systemJobPrintQuality", 329),
          ("systemJobProgrammingTimeout", 332),
          ("systemJobReceiveAttachmentType", 288),
          ("systemJobReceiveContentKey", 287),
          ("systemJobShowSenderContent", 292),
          ("systemJobShowSenderContentKey", 293),
          ("systemJobShowSenderContentOID", 294),
          ("systemJobShowSenderContentText", 295),
          ("systemJobShowSenderEnabled", 291),
          ("systemJobSidesDefault", 233),
          ("systemJobSidesSupport", 232),
          ("systemJobStateSupport", 177),
          ("systemJobTemplateAutoUpdate", 269),
          ("systemJobTemplateConfirmContent", 264),
          ("systemJobTemplateConfirmPolicy", 266),
          ("systemJobTemplateConfirmSheet", 263),
          ("systemJobTemplateConfirmSheetColor", 267),
          ("systemJobTemplateConfirmSheetType", 268),
          ("systemJobTemplateConfirmSupport", 265),
          ("systemJobTemplateCurrentCount", 262),
          ("systemJobTemplateMaxCount", 261),
          ("systemJobTemplateMaxStorage", 260),
          ("systemJobTemplateOther", 251),
          ("systemJobTemplateStatus", 270),
          ("systemJobTemplateUnknown", 252),
          ("systemJobTime", 325),
          ("systemJobUserDefinedScrns", 335),
          ("systemJobValidateSupport", 172),
          ("systemJobYellowColorBalance", 346),
          ("systemLifetimeErrorCount", 242),
          ("systemLifetimeErrorLimit", 243),
          ("systemLifetimeLimit", 241),
          ("systemLifetimeUsage", 240),
          ("systemLifetimeWarningCount", 244),
          ("systemLifetimeWarningLimit", 245),
          ("systemLocaleSupport", 175),
          ("systemLocation", 127),
          ("systemLoggingEnabled", 342),
          ("systemLogicalIndexReady", 167),
          ("systemLogicalIndexSupport", 166),
          ("systemLogicalNameReady", 163),
          ("systemLogicalNameSupport", 162),
          ("systemLoginCredentialsSource", 104),
          ("systemLoginDate", 124),
          ("systemLoginName", 122),
          ("systemLoginPassword", 123),
          ("systemLogoutDate", 125),
          ("systemMailAddress", 368),
          ("systemMailConfirmReply", 365),
          ("systemMailConfirmRequest", 364),
          ("systemMailConfirmTimeout", 366),
          ("systemMailFeatureReply", 367),
          ("systemMailImageQualityType", 378),
          ("systemMailMaxInAttachments", 371),
          ("systemMailMaxInFragments", 369),
          ("systemMailMaxInputAttach", 361),
          ("systemMailMaxInputSize", 373),
          ("systemMailMaxInputText", 360),
          ("systemMailMaxOutAttachments", 372),
          ("systemMailMaxOutFragments", 370),
          ("systemMailMaxOutputAttach", 363),
          ("systemMailMaxOutputSize", 374),
          ("systemMailMaxOutputText", 362),
          ("systemMailOutputUsage", 379),
          ("systemMailSenderGuestAuthSupport", 376),
          ("systemMailSenderNetAuthSupport", 375),
          ("systemMailSenderNoAuthSupport", 377),
          ("systemMailSignatureLine", 351),
          ("systemMailSubject", 350),
          ("systemModifyDocSupport", 173),
          ("systemMultipleDocSupport", 185),
          ("systemName", 113),
          ("systemNotificationEnabled", 343),
          ("systemOS", 110),
          ("systemOSVersion", 111),
          ("systemObjectClassSupport", 170),
          ("systemOperatorMessage", 128),
          ("systemOther", 101),
          ("systemPath", 118),
          ("systemPersonalName", 344),
          ("systemPhysicalIndexReady", 165),
          ("systemPhysicalIndexSupport", 164),
          ("systemPhysicalNameReady", 161),
          ("systemPhysicalNameSupport", 160),
          ("systemPollingEnabled", 155),
          ("systemPollingInterval", 154),
          ("systemPollingLastDate", 152),
          ("systemPollingLastTime", 153),
          ("systemPollingStartDate", 150),
          ("systemPollingStartTime", 151),
          ("systemPosixVerbsSupport", 176),
          ("systemPriority", 349),
          ("systemProblemMessage", 129),
          ("systemProtocol", 120),
          ("systemProtocolDetail", 121),
          ("systemProtocolSecurity", 135),
          ("systemRequestLogFullPolicy", 504),
          ("systemScanJobImageQualityType", 550),
          ("systemScanJobOriginalType", 551),
          ("systemScriptName", 510),
          ("systemServerTimeout", 103),
          ("systemServiceTypeSupport", 108),
          ("systemState", 140),
          ("systemTransferMethodSupport", 174),
          ("systemTranslatorReady", 182),
          ("systemTranslatorSupport", 181),
          ("systemTree", 115),
          ("systemURI", 109),
          ("systemUnknown", 102),
          ("systemUsageLogFileURI", 225),
          ("systemUseProxy", 106),
          ("systemValidationUserID", 520),
          ("systemVolume", 117),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
A system, service, or profile detail type, used by system administrators and
end users to specify the correct type for this service detail. Usage:
Conforming management stations and management agents SHALL implement specified
semantics for service detail types.
"""


class XcmSvcMonServiceType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              500,
              501,
              502,
              503,
              504,
              505,
              506,
              507,
              508,
              550,
              560,
              561,
              600,
              601,
              602,
              603,
              604,
              605,
              606,
              607,
              700,
              701,
              702,
              703,
              704,
              705,
              706,
              707,
              708)
        )
    )
    namedValues = NamedValues(
        *(("adminCommsService", 207),
          ("adminDeviceService", 203),
          ("adminDocService", 205),
          ("adminJobService", 204),
          ("adminObjectService", 201),
          ("adminSecurityService", 206),
          ("adminServerService", 202),
          ("automaticMeterReadService", 603),
          ("automaticPagePackService", 607),
          ("automaticRemoteDiagnosticService", 606),
          ("automaticRemoteMonitoringService", 605),
          ("automaticSuppliesReplenishmentService", 604),
          ("jobServiceAnalogFax", 121),
          ("jobServiceCapturePrintSaveReprintService", 122),
          ("jobServiceCopy", 111),
          ("jobServiceFaxToFile", 105),
          ("jobServiceFaxToMailList", 107),
          ("jobServiceFaxToPrint", 106),
          ("jobServiceFileToFax", 109),
          ("jobServiceFileToFile", 112),
          ("jobServiceFileToMailList", 110),
          ("jobServiceMultifunction", 113),
          ("jobServicePrint", 108),
          ("jobServicePrintToAnalogFax", 120),
          ("jobServiceScanFromApplication", 123),
          ("jobServiceScanToAnalogFax", 116),
          ("jobServiceScanToFax", 103),
          ("jobServiceScanToFile", 101),
          ("jobServiceScanToHostFile", 118),
          ("jobServiceScanToInternetFax", 114),
          ("jobServiceScanToLocalFile", 119),
          ("jobServiceScanToMailList", 104),
          ("jobServiceScanToNetworkFile", 117),
          ("jobServiceScanToPrint", 102),
          ("jobServiceScanToServerFax", 115),
          ("localAccountingService", 400),
          ("localApplicationService", 401),
          ("localCBRService", 561),
          ("localDeviceBillingService", 415),
          ("localDiscoveryService", 560),
          ("localDiskEncryptionSecurityService", 410),
          ("localDocumentService", 402),
          ("localECommerceService", 550),
          ("localFileService", 403),
          ("localIDCardCopyService", 411),
          ("localImmediateDiskOverwriteSecurityService", 408),
          ("localLoggingService", 404),
          ("localNameService", 405),
          ("localNotificationService", 406),
          ("localOnDemandDiskOverwriteCompletionStatus", 414),
          ("localOnDemandDiskOverwriteCompletionTime", 413),
          ("localOnDemandDiskOverwriteSecurityService", 409),
          ("localSecurityService", 407),
          ("localTieredBillingService", 412),
          ("other", 1),
          ("remoteAccountingService", 500),
          ("remoteApplicationService", 501),
          ("remoteDeviceAuthenticationService", 508),
          ("remoteDocumentService", 502),
          ("remoteFileService", 503),
          ("remoteLoggingService", 504),
          ("remoteNameService", 505),
          ("remoteNotificationService", 506),
          ("remoteSecurityService", 507),
          ("systemBaseBusinessServices", 312),
          ("systemServiceAutoSoftwareUpgrade", 310),
          ("systemServiceCopy", 309),
          ("systemServiceDiagnostic", 300),
          ("systemServiceFax", 301),
          ("systemServiceFileTransfer", 302),
          ("systemServiceImageProcess", 303),
          ("systemServiceMail", 304),
          ("systemServiceMultifunction", 305),
          ("systemServiceOCR", 308),
          ("systemServicePrint", 306),
          ("systemServiceScan", 307),
          ("systemServiceSoftwareUpgrade", 311),
          ("unknown", 2),
          ("webClientCustomUIService", 601),
          ("webClientMetadataValidationService", 602),
          ("webClientTemplateManagementService", 600),
          ("webServerBillingService", 703),
          ("webServerCustomUIService", 701),
          ("webServerMcAfeeSecurityService", 707),
          ("webServerMetadataValidationService", 702),
          ("webServerProtocolConfigurationService", 705),
          ("webServerRemoteServicesConfigurationService", 708),
          ("webServerSecurityConfigurationService", 704),
          ("webServerServices", 706),
          ("webServerTemplateManagementService", 700))
    )

    if mibBuilder.loadTexts:
        description = """\
The explicit type of this system and/or end-user service.
"""


class XcmSvcMonServiceStateDetail(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42)
        )
    )
    namedValues = NamedValues(
        *(("communicationFaultWithHost", 27),
          ("communicationWithHostManuallyDisabled", 28),
          ("criticalFaultImpactingService", 40),
          ("deregistrationPending", 32),
          ("hardwareOptionNotEnabled", 10),
          ("internalError", 33),
          ("noFaultsImpactingService", 42),
          ("nonCriticalFaultDegradingService", 41),
          ("notRegistered", 25),
          ("other", 1),
          ("proxyModeOnly", 24),
          ("rebootRequiredToDisableService", 13),
          ("rebootRequiredToEnableService", 12),
          ("registeredServiceNotEnabled", 26),
          ("registrationPending", 31),
          ("rejectedByHostAlreadyRegistered", 29),
          ("rejectedByHostInvalidSerialNo", 30),
          ("requestPending", 34),
          ("requiredHardwareNotInstalled", 8),
          ("requiredSoftwareNotInstalled", 9),
          ("serviceNotConfigured", 15),
          ("serviceNotStarted", 14),
          ("softwareOptionNotEnabled", 11),
          ("undefined16", 16),
          ("undefined17", 17),
          ("undefined18", 18),
          ("undefined19", 19),
          ("undefined20", 20),
          ("undefined21", 21),
          ("undefined22", 22),
          ("undefined23", 23),
          ("undefined3", 3),
          ("undefined35", 35),
          ("undefined36", 36),
          ("undefined37", 37),
          ("undefined38", 38),
          ("undefined39", 39),
          ("undefined4", 4),
          ("undefined5", 5),
          ("undefined6", 6),
          ("undefined7", 7),
          ("unknown", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
This TC represents a list of possible faults which further clarify the service
status information exposed via the current state, previous state, and
conditions objects.
"""


class XcmSvcMonSystemMailSenderNetAuthSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ldapEditableOnEither", 4),
          ("ldapEditableOnFailure", 3),
          ("ldapEditableOnSuccess", 2),
          ("ldapNotEditable", 1),
          ("nonLdapAuthEditable", 6),
          ("nonLdapAuthNotEditable", 5))
    )

    if mibBuilder.loadTexts:
        description = """\
The various values for the systemMailSenderNetAuthSupport attribute in the
xcmHrDevDetailTable.
"""


class XcmImageQualityType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("auto", 5),
          ("halftone", 4),
          ("map", 7),
          ("newspaperMagazine", 6),
          ("photo", 1),
          ("phototext", 3),
          ("text", 2))
    )

    if mibBuilder.loadTexts:
        description = """\
Used to describe the different image quality types.
"""


class XcmOriginalType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("inkjetOriginal", 4),
          ("none", 0),
          ("photocopiedOriginal", 2),
          ("photograph", 3),
          ("printedOriginal", 1),
          ("solidInkOriginal", 5))
    )

    if mibBuilder.loadTexts:
        description = """\
Used to describe the different original types.
"""


class XcmOutputUsage(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("archivalRecord", 3),
          ("custom", 5),
          ("highQualityPrinting", 2),
          ("ocr", 4),
          ("sharingAndPrinting", 1),
          ("simpleScan", 6))
    )

    if mibBuilder.loadTexts:
        description = """\
Used to describe the ways that the output may be used.
"""


class XcmLoginCredentialsSource(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("domainUser", 5),
          ("none", 0),
          ("promptAlways", 3),
          ("promptIfNeeded", 4),
          ("system", 2),
          ("user", 1))
    )

    if mibBuilder.loadTexts:
        description = """\
Used to describe the Login Credentials source.
"""


# MIB Managed Objects in the order of their OIDs

_ZeroDotZero_ObjectIdentity = ObjectIdentity
zeroDotZero = _ZeroDotZero_ObjectIdentity(
    (0, 0)
)
_XcmGenZeroDotZero_ObjectIdentity = ObjectIdentity
xcmGenZeroDotZero = _XcmGenZeroDotZero_ObjectIdentity(
    (0, 0, 0)
)
if mibBuilder.loadTexts:
    xcmGenZeroDotZero.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenZeroDotZero.setDescription("""\
 A value used for null object identifiers prior to XCMI v5.1. Do not use.
Instead use the standard definition in RFC 1902/2578 - 'zeroDotZero' - left
here for compatibility.
""")
_XcmGenZeroDummy_ObjectIdentity = ObjectIdentity
xcmGenZeroDummy = _XcmGenZeroDummy_ObjectIdentity(
    (0, 0, 51)
)
_XcmHrZeroDummy_ObjectIdentity = ObjectIdentity
xcmHrZeroDummy = _XcmHrZeroDummy_ObjectIdentity(
    (0, 0, 53)
)
_XcmJobZeroDummy_ObjectIdentity = ObjectIdentity
xcmJobZeroDummy = _XcmJobZeroDummy_ObjectIdentity(
    (0, 0, 59)
)
_XcmCommsEngineZeroDummy_ObjectIdentity = ObjectIdentity
xcmCommsEngineZeroDummy = _XcmCommsEngineZeroDummy_ObjectIdentity(
    (0, 0, 61)
)
_XcmCommsConfigZeroDummy_ObjectIdentity = ObjectIdentity
xcmCommsConfigZeroDummy = _XcmCommsConfigZeroDummy_ObjectIdentity(
    (0, 0, 64)
)
_XcmSvcMonZeroDummy_ObjectIdentity = ObjectIdentity
xcmSvcMonZeroDummy = _XcmSvcMonZeroDummy_ObjectIdentity(
    (0, 0, 74)
)
_Mib_2_ObjectIdentity = ObjectIdentity
mib_2 = _Mib_2_ObjectIdentity(
    (1, 3, 6, 1, 2, 1)
)
_System_ObjectIdentity = ObjectIdentity
system = _System_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 1)
)
_Interfaces_ObjectIdentity = ObjectIdentity
interfaces = _Interfaces_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 2)
)
_IfNumber_Type = Integer32
_IfNumber_Object = MibScalar
ifNumber = _IfNumber_Object(
    (1, 3, 6, 1, 2, 1, 2, 1),
    _IfNumber_Type()
)
ifNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifNumber.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifNumber.setDescription("""\
The number of network interfaces (regardless of their current state) present on
this system.
""")
_IfTable_Object = MibTable
ifTable = _IfTable_Object(
    (1, 3, 6, 1, 2, 1, 2, 2)
)
if mibBuilder.loadTexts:
    ifTable.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifTable.setDescription("""\
A list of interface entries. The number of entries is given by the value of
ifNumber.
""")
_IfEntry_Object = MibTableRow
ifEntry = _IfEntry_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1)
)
ifEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    ifEntry.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifEntry.setDescription("""\
An interface entry containing objects at the subnetwork layer and below for a
particular interface.
""")
_IfIndex_Type = Integer32
_IfIndex_Object = MibTableColumn
ifIndex = _IfIndex_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 1),
    _IfIndex_Type()
)
ifIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifIndex.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifIndex.setDescription("""\
A unique value for each interface. Its value ranges between 1 and the value of
ifNumber. The value for each interface must remain constant at least from one
re-initialization of the entity's network management system to the next re-
initialization.
""")


class _IfDescr_Type(DisplayString):
    """Custom type ifDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_IfDescr_Type.__name__ = "DisplayString"
_IfDescr_Object = MibTableColumn
ifDescr = _IfDescr_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 2),
    _IfDescr_Type()
)
ifDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifDescr.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifDescr.setDescription("""\
A textual string containing information about the interface. This string should
include the name of the manufacturer, the product name and the version of the
hardware interface.
""")


class _IfType_Type(Integer32):
    """Custom type ifType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32)
        )
    )
    namedValues = NamedValues(
        *(("basicISDN", 20),
          ("ddn-x25", 4),
          ("ds1", 18),
          ("ds3", 30),
          ("e1", 19),
          ("eon", 25),
          ("ethernet-3Mbit", 26),
          ("ethernet-csmacd", 6),
          ("fddi", 15),
          ("frame-relay", 32),
          ("hdh1822", 3),
          ("hyperchannel", 14),
          ("iso88023-csmacd", 7),
          ("iso88024-tokenBus", 8),
          ("iso88025-tokenRing", 9),
          ("iso88026-man", 10),
          ("lapb", 16),
          ("nsip", 27),
          ("other", 1),
          ("ppp", 23),
          ("primaryISDN", 21),
          ("propPointToPointSerial", 22),
          ("proteon-10Mbit", 12),
          ("proteon-80Mbit", 13),
          ("regular1822", 2),
          ("rfc877-x25", 5),
          ("sdlc", 17),
          ("sip", 31),
          ("slip", 28),
          ("softwareLoopback", 24),
          ("starLan", 11),
          ("ultra", 29))
    )


_IfType_Type.__name__ = "Integer32"
_IfType_Object = MibTableColumn
ifType = _IfType_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 3),
    _IfType_Type()
)
ifType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifType.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifType.setDescription("""\
The type of interface, distinguished according to the physical/link protocol(s)
immediately `below' the network layer in the protocol stack.
""")
_IfMtu_Type = Integer32
_IfMtu_Object = MibTableColumn
ifMtu = _IfMtu_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 4),
    _IfMtu_Type()
)
ifMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifMtu.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifMtu.setDescription("""\
The size of the largest datagram which can be sent/received on the interface,
specified in octets. For interfaces that are used for transmitting network
datagrams, this is the size of the largest network datagram that can be sent on
the interface.
""")
_IfSpeed_Type = Gauge32
_IfSpeed_Object = MibTableColumn
ifSpeed = _IfSpeed_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 5),
    _IfSpeed_Type()
)
ifSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifSpeed.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifSpeed.setDescription("""\
An estimate of the interface's current bandwidth in bits per second. For
interfaces which do not vary in bandwidth or for those where no accurate
estimation can be made, this object should contain the nominal bandwidth.
""")
_IfPhysAddress_Type = PhysAddress
_IfPhysAddress_Object = MibTableColumn
ifPhysAddress = _IfPhysAddress_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 6),
    _IfPhysAddress_Type()
)
ifPhysAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifPhysAddress.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifPhysAddress.setDescription("""\
The interface's address at the protocol layer immediately `below' the network
layer in the protocol stack. For interfaces which do not have such an address
(e.g., a serial line), this object should contain an octet string of zero
length.
""")


class _IfAdminStatus_Type(Integer32):
    """Custom type ifAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_IfAdminStatus_Type.__name__ = "Integer32"
_IfAdminStatus_Object = MibTableColumn
ifAdminStatus = _IfAdminStatus_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 7),
    _IfAdminStatus_Type()
)
ifAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ifAdminStatus.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifAdminStatus.setDescription("""\
The desired state of the interface. The testing(3) state indicates that no
operational packets can be passed.
""")


class _IfOperStatus_Type(Integer32):
    """Custom type ifOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_IfOperStatus_Type.__name__ = "Integer32"
_IfOperStatus_Object = MibTableColumn
ifOperStatus = _IfOperStatus_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 8),
    _IfOperStatus_Type()
)
ifOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifOperStatus.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifOperStatus.setDescription("""\
The current operational state of the interface. The testing(3) state indicates
that no operational packets can be passed.
""")
_IfLastChange_Type = TimeTicks
_IfLastChange_Object = MibTableColumn
ifLastChange = _IfLastChange_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 9),
    _IfLastChange_Type()
)
ifLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifLastChange.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifLastChange.setDescription("""\
The value of sysUpTime at the time the interface entered its current
operational state. If the current state was entered prior to the last re-
initialization of the local network management subsystem, then this object
contains a zero value.
""")
_IfInOctets_Type = Counter32
_IfInOctets_Object = MibTableColumn
ifInOctets = _IfInOctets_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 10),
    _IfInOctets_Type()
)
ifInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifInOctets.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifInOctets.setDescription("""\
The total number of octets received on the interface, including framing
characters.
""")
_IfInUcastPkts_Type = Counter32
_IfInUcastPkts_Object = MibTableColumn
ifInUcastPkts = _IfInUcastPkts_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 11),
    _IfInUcastPkts_Type()
)
ifInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifInUcastPkts.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifInUcastPkts.setDescription("""\
The number of subnetwork-unicast packets delivered to a higher-layer protocol.
""")
_IfInNUcastPkts_Type = Counter32
_IfInNUcastPkts_Object = MibTableColumn
ifInNUcastPkts = _IfInNUcastPkts_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 12),
    _IfInNUcastPkts_Type()
)
ifInNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifInNUcastPkts.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifInNUcastPkts.setDescription("""\
The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast)
packets delivered to a higher-layer protocol.
""")
_IfInDiscards_Type = Counter32
_IfInDiscards_Object = MibTableColumn
ifInDiscards = _IfInDiscards_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 13),
    _IfInDiscards_Type()
)
ifInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifInDiscards.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifInDiscards.setDescription("""\
The number of inbound packets which were chosen to be discarded even though no
errors had been detected to prevent their being deliverable to a higher-layer
protocol. One possible reason for discarding such a packet could be to free up
buffer space.
""")
_IfInErrors_Type = Counter32
_IfInErrors_Object = MibTableColumn
ifInErrors = _IfInErrors_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 14),
    _IfInErrors_Type()
)
ifInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifInErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifInErrors.setDescription("""\
The number of inbound packets that contained errors preventing them from being
deliverable to a higher-layer protocol.
""")
_IfInUnknownProtos_Type = Counter32
_IfInUnknownProtos_Object = MibTableColumn
ifInUnknownProtos = _IfInUnknownProtos_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 15),
    _IfInUnknownProtos_Type()
)
ifInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifInUnknownProtos.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifInUnknownProtos.setDescription("""\
The number of packets received via the interface which were discarded because
of an unknown or unsupported protocol.
""")
_IfOutOctets_Type = Counter32
_IfOutOctets_Object = MibTableColumn
ifOutOctets = _IfOutOctets_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 16),
    _IfOutOctets_Type()
)
ifOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifOutOctets.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifOutOctets.setDescription("""\
The total number of octets transmitted out of the interface, including framing
characters.
""")
_IfOutUcastPkts_Type = Counter32
_IfOutUcastPkts_Object = MibTableColumn
ifOutUcastPkts = _IfOutUcastPkts_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 17),
    _IfOutUcastPkts_Type()
)
ifOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifOutUcastPkts.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifOutUcastPkts.setDescription("""\
The total number of packets that higher-level protocols requested be
transmitted to a subnetwork-unicast address, including those that were
discarded or not sent.
""")
_IfOutNUcastPkts_Type = Counter32
_IfOutNUcastPkts_Object = MibTableColumn
ifOutNUcastPkts = _IfOutNUcastPkts_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 18),
    _IfOutNUcastPkts_Type()
)
ifOutNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifOutNUcastPkts.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifOutNUcastPkts.setDescription("""\
The total number of packets that higher-level protocols requested be
transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-
multicast) address, including those that were discarded or not sent.
""")
_IfOutDiscards_Type = Counter32
_IfOutDiscards_Object = MibTableColumn
ifOutDiscards = _IfOutDiscards_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 19),
    _IfOutDiscards_Type()
)
ifOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifOutDiscards.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifOutDiscards.setDescription("""\
The number of outbound packets which were chosen to be discarded even though no
errors had been detected to prevent their being transmitted. One possible
reason for discarding such a packet could be to free up buffer space.
""")
_IfOutErrors_Type = Counter32
_IfOutErrors_Object = MibTableColumn
ifOutErrors = _IfOutErrors_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 20),
    _IfOutErrors_Type()
)
ifOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifOutErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifOutErrors.setDescription("""\
The number of outbound packets that could not be transmitted because of errors.
""")
_IfOutQLen_Type = Gauge32
_IfOutQLen_Object = MibTableColumn
ifOutQLen = _IfOutQLen_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 21),
    _IfOutQLen_Type()
)
ifOutQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifOutQLen.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifOutQLen.setDescription("""\
The length of the output packet queue (in packets).
""")
_IfSpecific_Type = ObjectIdentifier
_IfSpecific_Object = MibTableColumn
ifSpecific = _IfSpecific_Object(
    (1, 3, 6, 1, 2, 1, 2, 2, 1, 22),
    _IfSpecific_Type()
)
ifSpecific.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifSpecific.setStatus("mandatory")
if mibBuilder.loadTexts:
    ifSpecific.setDescription("""\
A reference to MIB definitions specific to the particular media being used to
realize the interface. For example, if the interface is realized by an
ethernet, then the value of this object refers to a document defining objects
specific to ethernet. If this information is not present, its value should be
set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object
identifier, and any conformant implementation of ASN.1 and BER must be able to
generate and recognize this value.
""")
_At_ObjectIdentity = ObjectIdentity
at = _At_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 3)
)
_AtTable_Object = MibTable
atTable = _AtTable_Object(
    (1, 3, 6, 1, 2, 1, 3, 1)
)
if mibBuilder.loadTexts:
    atTable.setStatus("deprecated")
if mibBuilder.loadTexts:
    atTable.setDescription("""\
The Address Translation tables contain the NetworkAddress to `physical' address
equivalences. Some interfaces do not use translation tables for determining
address equivalences (e.g., DDN-X.25 has an algorithmic method); if all
interfaces are of this type, then the Address Translation table is empty, i.e.,
has zero entries.
""")
_AtEntry_Object = MibTableRow
atEntry = _AtEntry_Object(
    (1, 3, 6, 1, 2, 1, 3, 1, 1)
)
atEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "atIfIndex"),
    (0, "XEROX-COMMON-MIB", "atNetAddress"),
)
if mibBuilder.loadTexts:
    atEntry.setStatus("deprecated")
if mibBuilder.loadTexts:
    atEntry.setDescription("""\
Each entry contains one NetworkAddress to `physical' address equivalence.
""")
_AtIfIndex_Type = Integer32
_AtIfIndex_Object = MibTableColumn
atIfIndex = _AtIfIndex_Object(
    (1, 3, 6, 1, 2, 1, 3, 1, 1, 1),
    _AtIfIndex_Type()
)
atIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atIfIndex.setStatus("deprecated")
if mibBuilder.loadTexts:
    atIfIndex.setDescription("""\
The interface on which this entry's equivalence is effective. The interface
identified by a particular value of this index is the same interface as
identified by the same value of ifIndex.
""")
_AtPhysAddress_Type = PhysAddress
_AtPhysAddress_Object = MibTableColumn
atPhysAddress = _AtPhysAddress_Object(
    (1, 3, 6, 1, 2, 1, 3, 1, 1, 2),
    _AtPhysAddress_Type()
)
atPhysAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atPhysAddress.setStatus("deprecated")
if mibBuilder.loadTexts:
    atPhysAddress.setDescription("""\
The media-dependent `physical' address. Setting this object to a null string
(one of zero length) has the effect of invaliding the corresponding entry in
the atTable object. That is, it effectively dissasociates the interface
identified with said entry from the mapping identified with said entry. It is
an implementation-specific matter as to whether the agent removes an
invalidated entry from the table. Accordingly, management stations must be
prepared to receive tabular information from agents that corresponds to entries
not currently in use. Proper interpretation of such entries requires
examination of the relevant atPhysAddress object.
""")
_AtNetAddress_Type = IpAddress
_AtNetAddress_Object = MibTableColumn
atNetAddress = _AtNetAddress_Object(
    (1, 3, 6, 1, 2, 1, 3, 1, 1, 3),
    _AtNetAddress_Type()
)
atNetAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atNetAddress.setStatus("deprecated")
if mibBuilder.loadTexts:
    atNetAddress.setDescription("""\
The NetworkAddress (e.g., the IP address) corresponding to the media-dependent
`physical' address.
""")
_Ip_ObjectIdentity = ObjectIdentity
ip = _Ip_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 4)
)


class _IpForwarding_Type(Integer32):
    """Custom type ipForwarding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forwarding", 1),
          ("not-forwarding", 2))
    )


_IpForwarding_Type.__name__ = "Integer32"
_IpForwarding_Object = MibScalar
ipForwarding = _IpForwarding_Object(
    (1, 3, 6, 1, 2, 1, 4, 1),
    _IpForwarding_Type()
)
ipForwarding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipForwarding.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipForwarding.setDescription("""\
The indication of whether this entity is acting as an IP gateway in respect to
the forwarding of datagrams received by, but not addressed to, this entity. IP
gateways forward datagrams. IP hosts do not (except those source-routed via the
host). Note that for some managed nodes, this object may take on only a subset
of the values possible. Accordingly, it is appropriate for an agent to return a
`badValue' response if a management station attempts to change this object to
an inappropriate value.
""")
_IpDefaultTTL_Type = Integer32
_IpDefaultTTL_Object = MibScalar
ipDefaultTTL = _IpDefaultTTL_Object(
    (1, 3, 6, 1, 2, 1, 4, 2),
    _IpDefaultTTL_Type()
)
ipDefaultTTL.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipDefaultTTL.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipDefaultTTL.setDescription("""\
The default value inserted into the Time-To-Live field of the IP header of
datagrams originated at this entity, whenever a TTL value is not supplied by
the transport layer protocol.
""")
_IpInReceives_Type = Counter32
_IpInReceives_Object = MibScalar
ipInReceives = _IpInReceives_Object(
    (1, 3, 6, 1, 2, 1, 4, 3),
    _IpInReceives_Type()
)
ipInReceives.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInReceives.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipInReceives.setDescription("""\
The total number of input datagrams received from interfaces, including those
received in error.
""")
_IpInHdrErrors_Type = Counter32
_IpInHdrErrors_Object = MibScalar
ipInHdrErrors = _IpInHdrErrors_Object(
    (1, 3, 6, 1, 2, 1, 4, 4),
    _IpInHdrErrors_Type()
)
ipInHdrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInHdrErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipInHdrErrors.setDescription("""\
The number of input datagrams discarded due to errors in their IP headers,
including bad checksums, version number mismatch, other format errors, time-to-
live exceeded, errors discovered in processing their IP options, etc.
""")
_IpInAddrErrors_Type = Counter32
_IpInAddrErrors_Object = MibScalar
ipInAddrErrors = _IpInAddrErrors_Object(
    (1, 3, 6, 1, 2, 1, 4, 5),
    _IpInAddrErrors_Type()
)
ipInAddrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInAddrErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipInAddrErrors.setDescription("""\
The number of input datagrams discarded because the IP address in their IP
header's destination field was not a valid address to be received at this
entity. This count includes invalid addresses (e.g., 0.0.0.0) and addresses of
unsupported Classes (e.g., Class E). For entities which are not IP Gateways and
therefore do not forward datagrams, this counter includes datagrams discarded
because the destination address was not a local address.
""")
_IpForwDatagrams_Type = Counter32
_IpForwDatagrams_Object = MibScalar
ipForwDatagrams = _IpForwDatagrams_Object(
    (1, 3, 6, 1, 2, 1, 4, 6),
    _IpForwDatagrams_Type()
)
ipForwDatagrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipForwDatagrams.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipForwDatagrams.setDescription("""\
The number of input datagrams for which this entity was not their final IP
destination, as a result of which an attempt was made to find a route to
forward them to that final destination. In entities which do not act as IP
Gateways, this counter will include only those packets which were Source-Routed
via this entity, and the Source- Route option processing was successful.
""")
_IpInUnknownProtos_Type = Counter32
_IpInUnknownProtos_Object = MibScalar
ipInUnknownProtos = _IpInUnknownProtos_Object(
    (1, 3, 6, 1, 2, 1, 4, 7),
    _IpInUnknownProtos_Type()
)
ipInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInUnknownProtos.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipInUnknownProtos.setDescription("""\
The number of locally-addressed datagrams received successfully but discarded
because of an unknown or unsupported protocol.
""")
_IpInDiscards_Type = Counter32
_IpInDiscards_Object = MibScalar
ipInDiscards = _IpInDiscards_Object(
    (1, 3, 6, 1, 2, 1, 4, 8),
    _IpInDiscards_Type()
)
ipInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInDiscards.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipInDiscards.setDescription("""\
The number of input IP datagrams for which no problems were encountered to
prevent their continued processing, but which were discarded (e.g., for lack of
buffer space). Note that this counter does not include any datagrams discarded
while awaiting re-assembly.
""")
_IpInDelivers_Type = Counter32
_IpInDelivers_Object = MibScalar
ipInDelivers = _IpInDelivers_Object(
    (1, 3, 6, 1, 2, 1, 4, 9),
    _IpInDelivers_Type()
)
ipInDelivers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInDelivers.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipInDelivers.setDescription("""\
The total number of input datagrams successfully delivered to IP user-protocols
(including ICMP).
""")
_IpOutRequests_Type = Counter32
_IpOutRequests_Object = MibScalar
ipOutRequests = _IpOutRequests_Object(
    (1, 3, 6, 1, 2, 1, 4, 10),
    _IpOutRequests_Type()
)
ipOutRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOutRequests.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipOutRequests.setDescription("""\
The total number of IP datagrams which local IP user-protocols (including ICMP)
supplied to IP in requests for transmission. Note that this counter does not
include any datagrams counted in ipForwDatagrams.
""")
_IpOutDiscards_Type = Counter32
_IpOutDiscards_Object = MibScalar
ipOutDiscards = _IpOutDiscards_Object(
    (1, 3, 6, 1, 2, 1, 4, 11),
    _IpOutDiscards_Type()
)
ipOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOutDiscards.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipOutDiscards.setDescription("""\
The number of output IP datagrams for which no problem was encountered to
prevent their transmission to their destination, but which were discarded
(e.g., for lack of buffer space). Note that this counter would include
datagrams counted in ipForwDatagrams if any such packets met this
(discretionary) discard criterion.
""")
_IpOutNoRoutes_Type = Counter32
_IpOutNoRoutes_Object = MibScalar
ipOutNoRoutes = _IpOutNoRoutes_Object(
    (1, 3, 6, 1, 2, 1, 4, 12),
    _IpOutNoRoutes_Type()
)
ipOutNoRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOutNoRoutes.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipOutNoRoutes.setDescription("""\
The number of IP datagrams discarded because no route could be found to
transmit them to their destination. Note that this counter includes any packets
counted in ipForwDatagrams which meet this `no-route' criterion. Note that this
includes any datagarms which a host cannot route because all of its default
gateways are down.
""")
_IpReasmTimeout_Type = Integer32
_IpReasmTimeout_Object = MibScalar
ipReasmTimeout = _IpReasmTimeout_Object(
    (1, 3, 6, 1, 2, 1, 4, 13),
    _IpReasmTimeout_Type()
)
ipReasmTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipReasmTimeout.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipReasmTimeout.setDescription("""\
The maximum number of seconds which received fragments are held while they are
awaiting reassembly at this entity.
""")
_IpReasmReqds_Type = Counter32
_IpReasmReqds_Object = MibScalar
ipReasmReqds = _IpReasmReqds_Object(
    (1, 3, 6, 1, 2, 1, 4, 14),
    _IpReasmReqds_Type()
)
ipReasmReqds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipReasmReqds.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipReasmReqds.setDescription("""\
The number of IP fragments received which needed to be reassembled at this
entity.
""")
_IpReasmOKs_Type = Counter32
_IpReasmOKs_Object = MibScalar
ipReasmOKs = _IpReasmOKs_Object(
    (1, 3, 6, 1, 2, 1, 4, 15),
    _IpReasmOKs_Type()
)
ipReasmOKs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipReasmOKs.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipReasmOKs.setDescription("""\
The number of IP datagrams successfully re- assembled.
""")
_IpReasmFails_Type = Counter32
_IpReasmFails_Object = MibScalar
ipReasmFails = _IpReasmFails_Object(
    (1, 3, 6, 1, 2, 1, 4, 16),
    _IpReasmFails_Type()
)
ipReasmFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipReasmFails.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipReasmFails.setDescription("""\
The number of failures detected by the IP re- assembly algorithm (for whatever
reason: timed out, errors, etc). Note that this is not necessarily a count of
discarded IP fragments since some algorithms (notably the algorithm in RFC 815)
can lose track of the number of fragments by combining them as they are
received.
""")
_IpFragOKs_Type = Counter32
_IpFragOKs_Object = MibScalar
ipFragOKs = _IpFragOKs_Object(
    (1, 3, 6, 1, 2, 1, 4, 17),
    _IpFragOKs_Type()
)
ipFragOKs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFragOKs.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipFragOKs.setDescription("""\
The number of IP datagrams that have been successfully fragmented at this
entity.
""")
_IpFragFails_Type = Counter32
_IpFragFails_Object = MibScalar
ipFragFails = _IpFragFails_Object(
    (1, 3, 6, 1, 2, 1, 4, 18),
    _IpFragFails_Type()
)
ipFragFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFragFails.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipFragFails.setDescription("""\
The number of IP datagrams that have been discarded because they needed to be
fragmented at this entity but could not be, e.g., because their Don't Fragment
flag was set.
""")
_IpFragCreates_Type = Counter32
_IpFragCreates_Object = MibScalar
ipFragCreates = _IpFragCreates_Object(
    (1, 3, 6, 1, 2, 1, 4, 19),
    _IpFragCreates_Type()
)
ipFragCreates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFragCreates.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipFragCreates.setDescription("""\
The number of IP datagram fragments that have been generated as a result of
fragmentation at this entity.
""")
_IpAddrTable_Object = MibTable
ipAddrTable = _IpAddrTable_Object(
    (1, 3, 6, 1, 2, 1, 4, 20)
)
if mibBuilder.loadTexts:
    ipAddrTable.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipAddrTable.setDescription("""\
The table of addressing information relevant to this entity's IP addresses.
""")
_IpAddrEntry_Object = MibTableRow
ipAddrEntry = _IpAddrEntry_Object(
    (1, 3, 6, 1, 2, 1, 4, 20, 1)
)
ipAddrEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "ipAdEntAddr"),
)
if mibBuilder.loadTexts:
    ipAddrEntry.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipAddrEntry.setDescription("""\
The addressing information for one of this entity's IP addresses.
""")
_IpAdEntAddr_Type = IpAddress
_IpAdEntAddr_Object = MibTableColumn
ipAdEntAddr = _IpAdEntAddr_Object(
    (1, 3, 6, 1, 2, 1, 4, 20, 1, 1),
    _IpAdEntAddr_Type()
)
ipAdEntAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAdEntAddr.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipAdEntAddr.setDescription("""\
The IP address to which this entry's addressing information pertains.
""")
_IpAdEntIfIndex_Type = Integer32
_IpAdEntIfIndex_Object = MibTableColumn
ipAdEntIfIndex = _IpAdEntIfIndex_Object(
    (1, 3, 6, 1, 2, 1, 4, 20, 1, 2),
    _IpAdEntIfIndex_Type()
)
ipAdEntIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAdEntIfIndex.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipAdEntIfIndex.setDescription("""\
The index value which uniquely identifies the interface to which this entry is
applicable. The interface identified by a particular value of this index is the
same interface as identified by the same value of ifIndex.
""")
_IpAdEntNetMask_Type = IpAddress
_IpAdEntNetMask_Object = MibTableColumn
ipAdEntNetMask = _IpAdEntNetMask_Object(
    (1, 3, 6, 1, 2, 1, 4, 20, 1, 3),
    _IpAdEntNetMask_Type()
)
ipAdEntNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAdEntNetMask.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipAdEntNetMask.setDescription("""\
The subnet mask associated with the IP address of this entry. The value of the
mask is an IP address with all the network bits set to 1 and all the hosts bits
set to 0.
""")
_IpAdEntBcastAddr_Type = Integer32
_IpAdEntBcastAddr_Object = MibTableColumn
ipAdEntBcastAddr = _IpAdEntBcastAddr_Object(
    (1, 3, 6, 1, 2, 1, 4, 20, 1, 4),
    _IpAdEntBcastAddr_Type()
)
ipAdEntBcastAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAdEntBcastAddr.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipAdEntBcastAddr.setDescription("""\
The value of the least-significant bit in the IP broadcast address used for
sending datagrams on the (logical) interface associated with the IP address of
this entry. For example, when the Internet standard all-ones broadcast address
is used, the value will be 1. This value applies to both the subnet and network
broadcasts addresses used by the entity on this (logical) interface.
""")


class _IpAdEntReasmMaxSize_Type(Integer32):
    """Custom type ipAdEntReasmMaxSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IpAdEntReasmMaxSize_Type.__name__ = "Integer32"
_IpAdEntReasmMaxSize_Object = MibTableColumn
ipAdEntReasmMaxSize = _IpAdEntReasmMaxSize_Object(
    (1, 3, 6, 1, 2, 1, 4, 20, 1, 5),
    _IpAdEntReasmMaxSize_Type()
)
ipAdEntReasmMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAdEntReasmMaxSize.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipAdEntReasmMaxSize.setDescription("""\
The size of the largest IP datagram which this entity can re-assemble from
incoming IP fragmented datagrams received on this interface.
""")
_IpRouteTable_Object = MibTable
ipRouteTable = _IpRouteTable_Object(
    (1, 3, 6, 1, 2, 1, 4, 21)
)
if mibBuilder.loadTexts:
    ipRouteTable.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteTable.setDescription("""\
This entity's IP Routing table.
""")
_IpRouteEntry_Object = MibTableRow
ipRouteEntry = _IpRouteEntry_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1)
)
ipRouteEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "ipRouteDest"),
)
if mibBuilder.loadTexts:
    ipRouteEntry.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteEntry.setDescription("""\
A route to a particular destination.
""")
_IpRouteDest_Type = IpAddress
_IpRouteDest_Object = MibTableColumn
ipRouteDest = _IpRouteDest_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 1),
    _IpRouteDest_Type()
)
ipRouteDest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteDest.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteDest.setDescription("""\
The destination IP address of this route. An entry with a value of 0.0.0.0 is
considered a default route. Multiple routes to a single destination can appear
in the table, but access to such multiple entries is dependent on the table-
access mechanisms defined by the network management protocol in use.
""")
_IpRouteIfIndex_Type = Integer32
_IpRouteIfIndex_Object = MibTableColumn
ipRouteIfIndex = _IpRouteIfIndex_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 2),
    _IpRouteIfIndex_Type()
)
ipRouteIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteIfIndex.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteIfIndex.setDescription("""\
The index value which uniquely identifies the local interface through which the
next hop of this route should be reached. The interface identified by a
particular value of this index is the same interface as identified by the same
value of ifIndex.
""")
_IpRouteMetric1_Type = Integer32
_IpRouteMetric1_Object = MibTableColumn
ipRouteMetric1 = _IpRouteMetric1_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 3),
    _IpRouteMetric1_Type()
)
ipRouteMetric1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteMetric1.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteMetric1.setDescription("""\
The primary routing metric for this route. The semantics of this metric are
determined by the routing-protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to -1.
""")
_IpRouteMetric2_Type = Integer32
_IpRouteMetric2_Object = MibTableColumn
ipRouteMetric2 = _IpRouteMetric2_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 4),
    _IpRouteMetric2_Type()
)
ipRouteMetric2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteMetric2.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteMetric2.setDescription("""\
An alternate routing metric for this route. The semantics of this metric are
determined by the routing-protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to -1.
""")
_IpRouteMetric3_Type = Integer32
_IpRouteMetric3_Object = MibTableColumn
ipRouteMetric3 = _IpRouteMetric3_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 5),
    _IpRouteMetric3_Type()
)
ipRouteMetric3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteMetric3.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteMetric3.setDescription("""\
An alternate routing metric for this route. The semantics of this metric are
determined by the routing-protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to -1.
""")
_IpRouteMetric4_Type = Integer32
_IpRouteMetric4_Object = MibTableColumn
ipRouteMetric4 = _IpRouteMetric4_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 6),
    _IpRouteMetric4_Type()
)
ipRouteMetric4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteMetric4.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteMetric4.setDescription("""\
An alternate routing metric for this route. The semantics of this metric are
determined by the routing-protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to -1.
""")
_IpRouteNextHop_Type = IpAddress
_IpRouteNextHop_Object = MibTableColumn
ipRouteNextHop = _IpRouteNextHop_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 7),
    _IpRouteNextHop_Type()
)
ipRouteNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteNextHop.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteNextHop.setDescription("""\
The IP address of the next hop of this route. (In the case of a route bound to
an interface which is realized via a broadcast media, the value of this field
is the agent's IP address on that interface.)
""")


class _IpRouteType_Type(Integer32):
    """Custom type ipRouteType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("direct", 3),
          ("indirect", 4),
          ("invalid", 2),
          ("other", 1))
    )


_IpRouteType_Type.__name__ = "Integer32"
_IpRouteType_Object = MibTableColumn
ipRouteType = _IpRouteType_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 8),
    _IpRouteType_Type()
)
ipRouteType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteType.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteType.setDescription("""\
The type of route. Note that the values direct(3) and indirect(4) refer to the
notion of direct and indirect routing in the IP architecture. Setting this
object to the value invalid(2) has the effect of invalidating the corresponding
entry in the ipRouteTable object. That is, it effectively dissasociates the
destination identified with said entry from the route identified with said
entry. It is an implementation-specific matter as to whether the agent removes
an invalidated entry from the table. Accordingly, management stations must be
prepared to receive tabular information from agents that corresponds to entries
not currently in use. Proper interpretation of such entries requires
examination of the relevant ipRouteType object.
""")


class _IpRouteProto_Type(Integer32):
    """Custom type ipRouteProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("bbnSpfIgp", 12),
          ("bgp", 14),
          ("ciscoIgrp", 11),
          ("egp", 5),
          ("es-is", 10),
          ("ggp", 6),
          ("hello", 7),
          ("icmp", 4),
          ("is-is", 9),
          ("local", 2),
          ("netmgmt", 3),
          ("ospf", 13),
          ("other", 1),
          ("rip", 8))
    )


_IpRouteProto_Type.__name__ = "Integer32"
_IpRouteProto_Object = MibTableColumn
ipRouteProto = _IpRouteProto_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 9),
    _IpRouteProto_Type()
)
ipRouteProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteProto.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteProto.setDescription("""\
The routing mechanism via which this route was learned. Inclusion of values for
gateway routing protocols is not intended to imply that hosts should support
those protocols.
""")
_IpRouteAge_Type = Integer32
_IpRouteAge_Object = MibTableColumn
ipRouteAge = _IpRouteAge_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 10),
    _IpRouteAge_Type()
)
ipRouteAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteAge.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteAge.setDescription("""\
The number of seconds since this route was last updated or otherwise determined
to be correct. Note that no semantics of `too old' can be implied except
through knowledge of the routing protocol by which the route was learned.
""")
_IpRouteMask_Type = IpAddress
_IpRouteMask_Object = MibTableColumn
ipRouteMask = _IpRouteMask_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 11),
    _IpRouteMask_Type()
)
ipRouteMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteMask.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteMask.setDescription("""\
Indicate the mask to be logical-ANDed with the destination address before being
compared to the value in the ipRouteDest field. For those systems that do not
support arbitrary subnet masks, an agent constructs the value of the
ipRouteMask by determining whether the value of the correspondent ipRouteDest
field belong to a class-A, B, or C network, and then using one of: mask network
255.0.0.0 class-A 255.255.0.0 class-B 255.255.255.0 class-C If the value of the
ipRouteDest is 0.0.0.0 (a default route), then the mask value is also 0.0.0.0.
It should be noted that all IP routing subsystems implicitly use this
mechanism.
""")
_IpRouteMetric5_Type = Integer32
_IpRouteMetric5_Object = MibTableColumn
ipRouteMetric5 = _IpRouteMetric5_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 12),
    _IpRouteMetric5_Type()
)
ipRouteMetric5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipRouteMetric5.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteMetric5.setDescription("""\
An alternate routing metric for this route. The semantics of this metric are
determined by the routing-protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to -1.
""")
_IpRouteInfo_Type = ObjectIdentifier
_IpRouteInfo_Object = MibTableColumn
ipRouteInfo = _IpRouteInfo_Object(
    (1, 3, 6, 1, 2, 1, 4, 21, 1, 13),
    _IpRouteInfo_Type()
)
ipRouteInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfo.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRouteInfo.setDescription("""\
A reference to MIB definitions specific to the particular routing protocol
which is responsible for this route, as determined by the value specified in
the route's ipRouteProto value. If this information is not present, its value
should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid
object identifier, and any conformant implementation of ASN.1 and BER must be
able to generate and recognize this value.
""")
_IpNetToMediaTable_Object = MibTable
ipNetToMediaTable = _IpNetToMediaTable_Object(
    (1, 3, 6, 1, 2, 1, 4, 22)
)
if mibBuilder.loadTexts:
    ipNetToMediaTable.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipNetToMediaTable.setDescription("""\
The IP Address Translation table used for mapping from IP addresses to physical
addresses.
""")
_IpNetToMediaEntry_Object = MibTableRow
ipNetToMediaEntry = _IpNetToMediaEntry_Object(
    (1, 3, 6, 1, 2, 1, 4, 22, 1)
)
ipNetToMediaEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "ipNetToMediaIfIndex"),
    (0, "XEROX-COMMON-MIB", "ipNetToMediaNetAddress"),
)
if mibBuilder.loadTexts:
    ipNetToMediaEntry.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipNetToMediaEntry.setDescription("""\
Each entry contains one IpAddress to `physical' address equivalence.
""")
_IpNetToMediaIfIndex_Type = Integer32
_IpNetToMediaIfIndex_Object = MibTableColumn
ipNetToMediaIfIndex = _IpNetToMediaIfIndex_Object(
    (1, 3, 6, 1, 2, 1, 4, 22, 1, 1),
    _IpNetToMediaIfIndex_Type()
)
ipNetToMediaIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNetToMediaIfIndex.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipNetToMediaIfIndex.setDescription("""\
The interface on which this entry's equivalence is effective. The interface
identified by a particular value of this index is the same interface as
identified by the same value of ifIndex.
""")
_IpNetToMediaPhysAddress_Type = PhysAddress
_IpNetToMediaPhysAddress_Object = MibTableColumn
ipNetToMediaPhysAddress = _IpNetToMediaPhysAddress_Object(
    (1, 3, 6, 1, 2, 1, 4, 22, 1, 2),
    _IpNetToMediaPhysAddress_Type()
)
ipNetToMediaPhysAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNetToMediaPhysAddress.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipNetToMediaPhysAddress.setDescription("""\
The media-dependent `physical' address.
""")
_IpNetToMediaNetAddress_Type = IpAddress
_IpNetToMediaNetAddress_Object = MibTableColumn
ipNetToMediaNetAddress = _IpNetToMediaNetAddress_Object(
    (1, 3, 6, 1, 2, 1, 4, 22, 1, 3),
    _IpNetToMediaNetAddress_Type()
)
ipNetToMediaNetAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNetToMediaNetAddress.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipNetToMediaNetAddress.setDescription("""\
The IpAddress corresponding to the media- dependent `physical' address.
""")


class _IpNetToMediaType_Type(Integer32):
    """Custom type ipNetToMediaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 3),
          ("invalid", 2),
          ("other", 1),
          ("static", 4))
    )


_IpNetToMediaType_Type.__name__ = "Integer32"
_IpNetToMediaType_Object = MibTableColumn
ipNetToMediaType = _IpNetToMediaType_Object(
    (1, 3, 6, 1, 2, 1, 4, 22, 1, 4),
    _IpNetToMediaType_Type()
)
ipNetToMediaType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNetToMediaType.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipNetToMediaType.setDescription("""\
The type of mapping. Setting this object to the value invalid(2) has the effect
of invalidating the corresponding entry in the ipNetToMediaTable. That is, it
effectively dissasociates the interface identified with said entry from the
mapping identified with said entry. It is an implementation-specific matter as
to whether the agent removes an invalidated entry from the table. Accordingly,
management stations must be prepared to receive tabular information from agents
that corresponds to entries not currently in use. Proper interpretation of such
entries requires examination of the relevant ipNetToMediaType object.
""")
_IpRoutingDiscards_Type = Counter32
_IpRoutingDiscards_Object = MibScalar
ipRoutingDiscards = _IpRoutingDiscards_Object(
    (1, 3, 6, 1, 2, 1, 4, 23),
    _IpRoutingDiscards_Type()
)
ipRoutingDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRoutingDiscards.setStatus("mandatory")
if mibBuilder.loadTexts:
    ipRoutingDiscards.setDescription("""\
The number of routing entries which were chosen to be discarded even though
they are valid. One possible reason for discarding such an entry could be to
free-up buffer space for other routing entries.
""")
_Icmp_ObjectIdentity = ObjectIdentity
icmp = _Icmp_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 5)
)
_IcmpInMsgs_Type = Counter32
_IcmpInMsgs_Object = MibScalar
icmpInMsgs = _IcmpInMsgs_Object(
    (1, 3, 6, 1, 2, 1, 5, 1),
    _IcmpInMsgs_Type()
)
icmpInMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInMsgs.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInMsgs.setDescription("""\
The total number of ICMP messages which the entity received. Note that this
counter includes all those counted by icmpInErrors.
""")
_IcmpInErrors_Type = Counter32
_IcmpInErrors_Object = MibScalar
icmpInErrors = _IcmpInErrors_Object(
    (1, 3, 6, 1, 2, 1, 5, 2),
    _IcmpInErrors_Type()
)
icmpInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInErrors.setDescription("""\
The number of ICMP messages which the entity received but determined as having
ICMP-specific errors (bad ICMP checksums, bad length, etc.).
""")
_IcmpInDestUnreachs_Type = Counter32
_IcmpInDestUnreachs_Object = MibScalar
icmpInDestUnreachs = _IcmpInDestUnreachs_Object(
    (1, 3, 6, 1, 2, 1, 5, 3),
    _IcmpInDestUnreachs_Type()
)
icmpInDestUnreachs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInDestUnreachs.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInDestUnreachs.setDescription("""\
The number of ICMP Destination Unreachable messages received.
""")
_IcmpInTimeExcds_Type = Counter32
_IcmpInTimeExcds_Object = MibScalar
icmpInTimeExcds = _IcmpInTimeExcds_Object(
    (1, 3, 6, 1, 2, 1, 5, 4),
    _IcmpInTimeExcds_Type()
)
icmpInTimeExcds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInTimeExcds.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInTimeExcds.setDescription("""\
The number of ICMP Time Exceeded messages received.
""")
_IcmpInParmProbs_Type = Counter32
_IcmpInParmProbs_Object = MibScalar
icmpInParmProbs = _IcmpInParmProbs_Object(
    (1, 3, 6, 1, 2, 1, 5, 5),
    _IcmpInParmProbs_Type()
)
icmpInParmProbs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInParmProbs.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInParmProbs.setDescription("""\
The number of ICMP Parameter Problem messages received.
""")
_IcmpInSrcQuenchs_Type = Counter32
_IcmpInSrcQuenchs_Object = MibScalar
icmpInSrcQuenchs = _IcmpInSrcQuenchs_Object(
    (1, 3, 6, 1, 2, 1, 5, 6),
    _IcmpInSrcQuenchs_Type()
)
icmpInSrcQuenchs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInSrcQuenchs.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInSrcQuenchs.setDescription("""\
The number of ICMP Source Quench messages received.
""")
_IcmpInRedirects_Type = Counter32
_IcmpInRedirects_Object = MibScalar
icmpInRedirects = _IcmpInRedirects_Object(
    (1, 3, 6, 1, 2, 1, 5, 7),
    _IcmpInRedirects_Type()
)
icmpInRedirects.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInRedirects.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInRedirects.setDescription("""\
The number of ICMP Redirect messages received.
""")
_IcmpInEchos_Type = Counter32
_IcmpInEchos_Object = MibScalar
icmpInEchos = _IcmpInEchos_Object(
    (1, 3, 6, 1, 2, 1, 5, 8),
    _IcmpInEchos_Type()
)
icmpInEchos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInEchos.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInEchos.setDescription("""\
The number of ICMP Echo (request) messages received.
""")
_IcmpInEchoReps_Type = Counter32
_IcmpInEchoReps_Object = MibScalar
icmpInEchoReps = _IcmpInEchoReps_Object(
    (1, 3, 6, 1, 2, 1, 5, 9),
    _IcmpInEchoReps_Type()
)
icmpInEchoReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInEchoReps.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInEchoReps.setDescription("""\
The number of ICMP Echo Reply messages received.
""")
_IcmpInTimestamps_Type = Counter32
_IcmpInTimestamps_Object = MibScalar
icmpInTimestamps = _IcmpInTimestamps_Object(
    (1, 3, 6, 1, 2, 1, 5, 10),
    _IcmpInTimestamps_Type()
)
icmpInTimestamps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInTimestamps.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInTimestamps.setDescription("""\
The number of ICMP Timestamp (request) messages received.
""")
_IcmpInTimestampReps_Type = Counter32
_IcmpInTimestampReps_Object = MibScalar
icmpInTimestampReps = _IcmpInTimestampReps_Object(
    (1, 3, 6, 1, 2, 1, 5, 11),
    _IcmpInTimestampReps_Type()
)
icmpInTimestampReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInTimestampReps.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInTimestampReps.setDescription("""\
The number of ICMP Timestamp Reply messages received.
""")
_IcmpInAddrMasks_Type = Counter32
_IcmpInAddrMasks_Object = MibScalar
icmpInAddrMasks = _IcmpInAddrMasks_Object(
    (1, 3, 6, 1, 2, 1, 5, 12),
    _IcmpInAddrMasks_Type()
)
icmpInAddrMasks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInAddrMasks.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInAddrMasks.setDescription("""\
The number of ICMP Address Mask Request messages received.
""")
_IcmpInAddrMaskReps_Type = Counter32
_IcmpInAddrMaskReps_Object = MibScalar
icmpInAddrMaskReps = _IcmpInAddrMaskReps_Object(
    (1, 3, 6, 1, 2, 1, 5, 13),
    _IcmpInAddrMaskReps_Type()
)
icmpInAddrMaskReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpInAddrMaskReps.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpInAddrMaskReps.setDescription("""\
The number of ICMP Address Mask Reply messages received.
""")
_IcmpOutMsgs_Type = Counter32
_IcmpOutMsgs_Object = MibScalar
icmpOutMsgs = _IcmpOutMsgs_Object(
    (1, 3, 6, 1, 2, 1, 5, 14),
    _IcmpOutMsgs_Type()
)
icmpOutMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutMsgs.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutMsgs.setDescription("""\
The total number of ICMP messages which this entity attempted to send. Note
that this counter includes all those counted by icmpOutErrors.
""")
_IcmpOutErrors_Type = Counter32
_IcmpOutErrors_Object = MibScalar
icmpOutErrors = _IcmpOutErrors_Object(
    (1, 3, 6, 1, 2, 1, 5, 15),
    _IcmpOutErrors_Type()
)
icmpOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutErrors.setDescription("""\
The number of ICMP messages which this entity did not send due to problems
discovered within ICMP such as a lack of buffers. This value should not include
errors discovered outside the ICMP layer such as the inability of IP to route
the resultant datagram. In some implementations there may be no types of error
which contribute to this counter's value.
""")
_IcmpOutDestUnreachs_Type = Counter32
_IcmpOutDestUnreachs_Object = MibScalar
icmpOutDestUnreachs = _IcmpOutDestUnreachs_Object(
    (1, 3, 6, 1, 2, 1, 5, 16),
    _IcmpOutDestUnreachs_Type()
)
icmpOutDestUnreachs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutDestUnreachs.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutDestUnreachs.setDescription("""\
The number of ICMP Destination Unreachable messages sent.
""")
_IcmpOutTimeExcds_Type = Counter32
_IcmpOutTimeExcds_Object = MibScalar
icmpOutTimeExcds = _IcmpOutTimeExcds_Object(
    (1, 3, 6, 1, 2, 1, 5, 17),
    _IcmpOutTimeExcds_Type()
)
icmpOutTimeExcds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutTimeExcds.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutTimeExcds.setDescription("""\
The number of ICMP Time Exceeded messages sent.
""")
_IcmpOutParmProbs_Type = Counter32
_IcmpOutParmProbs_Object = MibScalar
icmpOutParmProbs = _IcmpOutParmProbs_Object(
    (1, 3, 6, 1, 2, 1, 5, 18),
    _IcmpOutParmProbs_Type()
)
icmpOutParmProbs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutParmProbs.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutParmProbs.setDescription("""\
The number of ICMP Parameter Problem messages sent.
""")
_IcmpOutSrcQuenchs_Type = Counter32
_IcmpOutSrcQuenchs_Object = MibScalar
icmpOutSrcQuenchs = _IcmpOutSrcQuenchs_Object(
    (1, 3, 6, 1, 2, 1, 5, 19),
    _IcmpOutSrcQuenchs_Type()
)
icmpOutSrcQuenchs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutSrcQuenchs.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutSrcQuenchs.setDescription("""\
The number of ICMP Source Quench messages sent.
""")
_IcmpOutRedirects_Type = Counter32
_IcmpOutRedirects_Object = MibScalar
icmpOutRedirects = _IcmpOutRedirects_Object(
    (1, 3, 6, 1, 2, 1, 5, 20),
    _IcmpOutRedirects_Type()
)
icmpOutRedirects.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutRedirects.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutRedirects.setDescription("""\
The number of ICMP Redirect messages sent. For a host, this object will always
be zero, since hosts do not send redirects.
""")
_IcmpOutEchos_Type = Counter32
_IcmpOutEchos_Object = MibScalar
icmpOutEchos = _IcmpOutEchos_Object(
    (1, 3, 6, 1, 2, 1, 5, 21),
    _IcmpOutEchos_Type()
)
icmpOutEchos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutEchos.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutEchos.setDescription("""\
The number of ICMP Echo (request) messages sent.
""")
_IcmpOutEchoReps_Type = Counter32
_IcmpOutEchoReps_Object = MibScalar
icmpOutEchoReps = _IcmpOutEchoReps_Object(
    (1, 3, 6, 1, 2, 1, 5, 22),
    _IcmpOutEchoReps_Type()
)
icmpOutEchoReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutEchoReps.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutEchoReps.setDescription("""\
The number of ICMP Echo Reply messages sent.
""")
_IcmpOutTimestamps_Type = Counter32
_IcmpOutTimestamps_Object = MibScalar
icmpOutTimestamps = _IcmpOutTimestamps_Object(
    (1, 3, 6, 1, 2, 1, 5, 23),
    _IcmpOutTimestamps_Type()
)
icmpOutTimestamps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutTimestamps.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutTimestamps.setDescription("""\
The number of ICMP Timestamp (request) messages sent.
""")
_IcmpOutTimestampReps_Type = Counter32
_IcmpOutTimestampReps_Object = MibScalar
icmpOutTimestampReps = _IcmpOutTimestampReps_Object(
    (1, 3, 6, 1, 2, 1, 5, 24),
    _IcmpOutTimestampReps_Type()
)
icmpOutTimestampReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutTimestampReps.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutTimestampReps.setDescription("""\
The number of ICMP Timestamp Reply messages sent.
""")
_IcmpOutAddrMasks_Type = Counter32
_IcmpOutAddrMasks_Object = MibScalar
icmpOutAddrMasks = _IcmpOutAddrMasks_Object(
    (1, 3, 6, 1, 2, 1, 5, 25),
    _IcmpOutAddrMasks_Type()
)
icmpOutAddrMasks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutAddrMasks.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutAddrMasks.setDescription("""\
The number of ICMP Address Mask Request messages sent.
""")
_IcmpOutAddrMaskReps_Type = Counter32
_IcmpOutAddrMaskReps_Object = MibScalar
icmpOutAddrMaskReps = _IcmpOutAddrMaskReps_Object(
    (1, 3, 6, 1, 2, 1, 5, 26),
    _IcmpOutAddrMaskReps_Type()
)
icmpOutAddrMaskReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpOutAddrMaskReps.setStatus("mandatory")
if mibBuilder.loadTexts:
    icmpOutAddrMaskReps.setDescription("""\
The number of ICMP Address Mask Reply messages sent.
""")
_Tcp_ObjectIdentity = ObjectIdentity
tcp = _Tcp_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 6)
)


class _TcpRtoAlgorithm_Type(Integer32):
    """Custom type tcpRtoAlgorithm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("constant", 2),
          ("other", 1),
          ("rsre", 3),
          ("vanj", 4))
    )


_TcpRtoAlgorithm_Type.__name__ = "Integer32"
_TcpRtoAlgorithm_Object = MibScalar
tcpRtoAlgorithm = _TcpRtoAlgorithm_Object(
    (1, 3, 6, 1, 2, 1, 6, 1),
    _TcpRtoAlgorithm_Type()
)
tcpRtoAlgorithm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpRtoAlgorithm.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpRtoAlgorithm.setDescription("""\
The algorithm used to determine the timeout value used for retransmitting
unacknowledged octets.
""")
_TcpRtoMin_Type = Integer32
_TcpRtoMin_Object = MibScalar
tcpRtoMin = _TcpRtoMin_Object(
    (1, 3, 6, 1, 2, 1, 6, 2),
    _TcpRtoMin_Type()
)
tcpRtoMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpRtoMin.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpRtoMin.setDescription("""\
The minimum value permitted by a TCP implementation for the retransmission
timeout, measured in milliseconds. More refined semantics for objects of this
type depend upon the algorithm used to determine the retransmission timeout. In
particular, when the timeout algorithm is rsre(3), an object of this type has
the semantics of the LBOUND quantity described in RFC 793.
""")
_TcpRtoMax_Type = Integer32
_TcpRtoMax_Object = MibScalar
tcpRtoMax = _TcpRtoMax_Object(
    (1, 3, 6, 1, 2, 1, 6, 3),
    _TcpRtoMax_Type()
)
tcpRtoMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpRtoMax.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpRtoMax.setDescription("""\
The maximum value permitted by a TCP implementation for the retransmission
timeout, measured in milliseconds. More refined semantics for objects of this
type depend upon the algorithm used to determine the retransmission timeout. In
particular, when the timeout algorithm is rsre(3), an object of this type has
the semantics of the UBOUND quantity described in RFC 793.
""")
_TcpMaxConn_Type = Integer32
_TcpMaxConn_Object = MibScalar
tcpMaxConn = _TcpMaxConn_Object(
    (1, 3, 6, 1, 2, 1, 6, 4),
    _TcpMaxConn_Type()
)
tcpMaxConn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpMaxConn.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpMaxConn.setDescription("""\
The limit on the total number of TCP connections the entity can support. In
entities where the maximum number of connections is dynamic, this object should
contain the value -1.
""")
_TcpActiveOpens_Type = Counter32
_TcpActiveOpens_Object = MibScalar
tcpActiveOpens = _TcpActiveOpens_Object(
    (1, 3, 6, 1, 2, 1, 6, 5),
    _TcpActiveOpens_Type()
)
tcpActiveOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpActiveOpens.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpActiveOpens.setDescription("""\
The number of times TCP connections have made a direct transition to the SYN-
SENT state from the CLOSED state.
""")
_TcpPassiveOpens_Type = Counter32
_TcpPassiveOpens_Object = MibScalar
tcpPassiveOpens = _TcpPassiveOpens_Object(
    (1, 3, 6, 1, 2, 1, 6, 6),
    _TcpPassiveOpens_Type()
)
tcpPassiveOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpPassiveOpens.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpPassiveOpens.setDescription("""\
The number of times TCP connections have made a direct transition to the SYN-
RCVD state from the LISTEN state.
""")
_TcpAttemptFails_Type = Counter32
_TcpAttemptFails_Object = MibScalar
tcpAttemptFails = _TcpAttemptFails_Object(
    (1, 3, 6, 1, 2, 1, 6, 7),
    _TcpAttemptFails_Type()
)
tcpAttemptFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpAttemptFails.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpAttemptFails.setDescription("""\
The number of times TCP connections have made a direct transition to the CLOSED
state from either the SYN-SENT state or the SYN-RCVD state, plus the number of
times TCP connections have made a direct transition to the LISTEN state from
the SYN-RCVD state.
""")
_TcpEstabResets_Type = Counter32
_TcpEstabResets_Object = MibScalar
tcpEstabResets = _TcpEstabResets_Object(
    (1, 3, 6, 1, 2, 1, 6, 8),
    _TcpEstabResets_Type()
)
tcpEstabResets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpEstabResets.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpEstabResets.setDescription("""\
The number of times TCP connections have made a direct transition to the CLOSED
state from either the ESTABLISHED state or the CLOSE-WAIT state.
""")
_TcpCurrEstab_Type = Gauge32
_TcpCurrEstab_Object = MibScalar
tcpCurrEstab = _TcpCurrEstab_Object(
    (1, 3, 6, 1, 2, 1, 6, 9),
    _TcpCurrEstab_Type()
)
tcpCurrEstab.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpCurrEstab.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpCurrEstab.setDescription("""\
The number of TCP connections for which the current state is either ESTABLISHED
or CLOSE- WAIT.
""")
_TcpInSegs_Type = Counter32
_TcpInSegs_Object = MibScalar
tcpInSegs = _TcpInSegs_Object(
    (1, 3, 6, 1, 2, 1, 6, 10),
    _TcpInSegs_Type()
)
tcpInSegs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpInSegs.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpInSegs.setDescription("""\
The total number of segments received, including those received in error. This
count includes segments received on currently established connections.
""")
_TcpOutSegs_Type = Counter32
_TcpOutSegs_Object = MibScalar
tcpOutSegs = _TcpOutSegs_Object(
    (1, 3, 6, 1, 2, 1, 6, 11),
    _TcpOutSegs_Type()
)
tcpOutSegs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpOutSegs.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpOutSegs.setDescription("""\
The total number of segments sent, including those on current connections but
excluding those containing only retransmitted octets.
""")
_TcpRetransSegs_Type = Counter32
_TcpRetransSegs_Object = MibScalar
tcpRetransSegs = _TcpRetransSegs_Object(
    (1, 3, 6, 1, 2, 1, 6, 12),
    _TcpRetransSegs_Type()
)
tcpRetransSegs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpRetransSegs.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpRetransSegs.setDescription("""\
The total number of segments retransmitted - that is, the number of TCP
segments transmitted containing one or more previously transmitted octets.
""")
_TcpConnTable_Object = MibTable
tcpConnTable = _TcpConnTable_Object(
    (1, 3, 6, 1, 2, 1, 6, 13)
)
if mibBuilder.loadTexts:
    tcpConnTable.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpConnTable.setDescription("""\
A table containing TCP connection-specific information.
""")
_TcpConnEntry_Object = MibTableRow
tcpConnEntry = _TcpConnEntry_Object(
    (1, 3, 6, 1, 2, 1, 6, 13, 1)
)
tcpConnEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "tcpConnLocalAddress"),
    (0, "XEROX-COMMON-MIB", "tcpConnLocalPort"),
    (0, "XEROX-COMMON-MIB", "tcpConnRemAddress"),
    (0, "XEROX-COMMON-MIB", "tcpConnRemPort"),
)
if mibBuilder.loadTexts:
    tcpConnEntry.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpConnEntry.setDescription("""\
Information about a particular current TCP connection. An object of this type
is transient, in that it ceases to exist when (or soon after) the connection
makes the transition to the CLOSED state.
""")


class _TcpConnState_Type(Integer32):
    """Custom type tcpConnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("closeWait", 8),
          ("closed", 1),
          ("closing", 10),
          ("deleteTCB", 12),
          ("established", 5),
          ("finWait1", 6),
          ("finWait2", 7),
          ("lastAck", 9),
          ("listen", 2),
          ("synReceived", 4),
          ("synSent", 3),
          ("timeWait", 11))
    )


_TcpConnState_Type.__name__ = "Integer32"
_TcpConnState_Object = MibTableColumn
tcpConnState = _TcpConnState_Object(
    (1, 3, 6, 1, 2, 1, 6, 13, 1, 1),
    _TcpConnState_Type()
)
tcpConnState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tcpConnState.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpConnState.setDescription("""\
The state of this TCP connection. The only value which may be set by a
management station is deleteTCB(12). Accordingly, it is appropriate for an
agent to return a `badValue' response if a management station attempts to set
this object to any other value. If a management station sets this object to the
value deleteTCB(12), then this has the effect of deleting the TCB (as defined
in RFC 793) of the corresponding connection on the managed node, resulting in
immediate termination of the connection. As an implementation-specific option,
a RST segment may be sent from the managed node to the other TCP endpoint (note
however that RST segments are not sent reliably).
""")
_TcpConnLocalAddress_Type = IpAddress
_TcpConnLocalAddress_Object = MibTableColumn
tcpConnLocalAddress = _TcpConnLocalAddress_Object(
    (1, 3, 6, 1, 2, 1, 6, 13, 1, 2),
    _TcpConnLocalAddress_Type()
)
tcpConnLocalAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpConnLocalAddress.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpConnLocalAddress.setDescription("""\
The local IP address for this TCP connection. In the case of a connection in
the listen state which is willing to accept connections for any IP interface
associated with the node, the value 0.0.0.0 is used.
""")


class _TcpConnLocalPort_Type(Integer32):
    """Custom type tcpConnLocalPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_TcpConnLocalPort_Type.__name__ = "Integer32"
_TcpConnLocalPort_Object = MibTableColumn
tcpConnLocalPort = _TcpConnLocalPort_Object(
    (1, 3, 6, 1, 2, 1, 6, 13, 1, 3),
    _TcpConnLocalPort_Type()
)
tcpConnLocalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpConnLocalPort.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpConnLocalPort.setDescription("""\
The local port number for this TCP connection.
""")
_TcpConnRemAddress_Type = IpAddress
_TcpConnRemAddress_Object = MibTableColumn
tcpConnRemAddress = _TcpConnRemAddress_Object(
    (1, 3, 6, 1, 2, 1, 6, 13, 1, 4),
    _TcpConnRemAddress_Type()
)
tcpConnRemAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpConnRemAddress.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpConnRemAddress.setDescription("""\
The remote IP address for this TCP connection.
""")


class _TcpConnRemPort_Type(Integer32):
    """Custom type tcpConnRemPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_TcpConnRemPort_Type.__name__ = "Integer32"
_TcpConnRemPort_Object = MibTableColumn
tcpConnRemPort = _TcpConnRemPort_Object(
    (1, 3, 6, 1, 2, 1, 6, 13, 1, 5),
    _TcpConnRemPort_Type()
)
tcpConnRemPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpConnRemPort.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpConnRemPort.setDescription("""\
The remote port number for this TCP connection.
""")
_TcpInErrs_Type = Counter32
_TcpInErrs_Object = MibScalar
tcpInErrs = _TcpInErrs_Object(
    (1, 3, 6, 1, 2, 1, 6, 14),
    _TcpInErrs_Type()
)
tcpInErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpInErrs.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpInErrs.setDescription("""\
The total number of segments received in error (e.g., bad TCP checksums).
""")
_TcpOutRsts_Type = Counter32
_TcpOutRsts_Object = MibScalar
tcpOutRsts = _TcpOutRsts_Object(
    (1, 3, 6, 1, 2, 1, 6, 15),
    _TcpOutRsts_Type()
)
tcpOutRsts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpOutRsts.setStatus("mandatory")
if mibBuilder.loadTexts:
    tcpOutRsts.setDescription("""\
The number of TCP segments sent containing the RST flag.
""")
_Udp_ObjectIdentity = ObjectIdentity
udp = _Udp_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 7)
)
_UdpInDatagrams_Type = Counter32
_UdpInDatagrams_Object = MibScalar
udpInDatagrams = _UdpInDatagrams_Object(
    (1, 3, 6, 1, 2, 1, 7, 1),
    _UdpInDatagrams_Type()
)
udpInDatagrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpInDatagrams.setStatus("mandatory")
if mibBuilder.loadTexts:
    udpInDatagrams.setDescription("""\
The total number of UDP datagrams delivered to UDP users.
""")
_UdpNoPorts_Type = Counter32
_UdpNoPorts_Object = MibScalar
udpNoPorts = _UdpNoPorts_Object(
    (1, 3, 6, 1, 2, 1, 7, 2),
    _UdpNoPorts_Type()
)
udpNoPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpNoPorts.setStatus("mandatory")
if mibBuilder.loadTexts:
    udpNoPorts.setDescription("""\
The total number of received UDP datagrams for which there was no application
at the destination port.
""")
_UdpInErrors_Type = Counter32
_UdpInErrors_Object = MibScalar
udpInErrors = _UdpInErrors_Object(
    (1, 3, 6, 1, 2, 1, 7, 3),
    _UdpInErrors_Type()
)
udpInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpInErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    udpInErrors.setDescription("""\
The number of received UDP datagrams that could not be delivered for reasons
other than the lack of an application at the destination port.
""")
_UdpOutDatagrams_Type = Counter32
_UdpOutDatagrams_Object = MibScalar
udpOutDatagrams = _UdpOutDatagrams_Object(
    (1, 3, 6, 1, 2, 1, 7, 4),
    _UdpOutDatagrams_Type()
)
udpOutDatagrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpOutDatagrams.setStatus("mandatory")
if mibBuilder.loadTexts:
    udpOutDatagrams.setDescription("""\
The total number of UDP datagrams sent from this entity.
""")
_UdpTable_Object = MibTable
udpTable = _UdpTable_Object(
    (1, 3, 6, 1, 2, 1, 7, 5)
)
if mibBuilder.loadTexts:
    udpTable.setStatus("mandatory")
if mibBuilder.loadTexts:
    udpTable.setDescription("""\
A table containing UDP listener information.
""")
_UdpEntry_Object = MibTableRow
udpEntry = _UdpEntry_Object(
    (1, 3, 6, 1, 2, 1, 7, 5, 1)
)
udpEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "udpLocalAddress"),
    (0, "XEROX-COMMON-MIB", "udpLocalPort"),
)
if mibBuilder.loadTexts:
    udpEntry.setStatus("mandatory")
if mibBuilder.loadTexts:
    udpEntry.setDescription("""\
Information about a particular current UDP listener.
""")
_UdpLocalAddress_Type = IpAddress
_UdpLocalAddress_Object = MibTableColumn
udpLocalAddress = _UdpLocalAddress_Object(
    (1, 3, 6, 1, 2, 1, 7, 5, 1, 1),
    _UdpLocalAddress_Type()
)
udpLocalAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpLocalAddress.setStatus("mandatory")
if mibBuilder.loadTexts:
    udpLocalAddress.setDescription("""\
The local IP address for this UDP listener. In the case of a UDP listener which
is willing to accept datagrams for any IP interface associated with the node,
the value 0.0.0.0 is used.
""")


class _UdpLocalPort_Type(Integer32):
    """Custom type udpLocalPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_UdpLocalPort_Type.__name__ = "Integer32"
_UdpLocalPort_Object = MibTableColumn
udpLocalPort = _UdpLocalPort_Object(
    (1, 3, 6, 1, 2, 1, 7, 5, 1, 2),
    _UdpLocalPort_Type()
)
udpLocalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpLocalPort.setStatus("mandatory")
if mibBuilder.loadTexts:
    udpLocalPort.setDescription("""\
The local port number for this UDP listener.
""")
_Egp_ObjectIdentity = ObjectIdentity
egp = _Egp_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 8)
)
_EgpInMsgs_Type = Counter32
_EgpInMsgs_Object = MibScalar
egpInMsgs = _EgpInMsgs_Object(
    (1, 3, 6, 1, 2, 1, 8, 1),
    _EgpInMsgs_Type()
)
egpInMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpInMsgs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpInMsgs.setDescription("""\
The number of EGP messages received without error.
""")
_EgpInErrors_Type = Counter32
_EgpInErrors_Object = MibScalar
egpInErrors = _EgpInErrors_Object(
    (1, 3, 6, 1, 2, 1, 8, 2),
    _EgpInErrors_Type()
)
egpInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpInErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpInErrors.setDescription("""\
The number of EGP messages received that proved to be in error.
""")
_EgpOutMsgs_Type = Counter32
_EgpOutMsgs_Object = MibScalar
egpOutMsgs = _EgpOutMsgs_Object(
    (1, 3, 6, 1, 2, 1, 8, 3),
    _EgpOutMsgs_Type()
)
egpOutMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpOutMsgs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpOutMsgs.setDescription("""\
The total number of locally generated EGP messages.
""")
_EgpOutErrors_Type = Counter32
_EgpOutErrors_Object = MibScalar
egpOutErrors = _EgpOutErrors_Object(
    (1, 3, 6, 1, 2, 1, 8, 4),
    _EgpOutErrors_Type()
)
egpOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpOutErrors.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpOutErrors.setDescription("""\
The number of locally generated EGP messages not sent due to resource
limitations within an EGP entity.
""")
_EgpNeighTable_Object = MibTable
egpNeighTable = _EgpNeighTable_Object(
    (1, 3, 6, 1, 2, 1, 8, 5)
)
if mibBuilder.loadTexts:
    egpNeighTable.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighTable.setDescription("""\
The EGP neighbor table.
""")
_EgpNeighEntry_Object = MibTableRow
egpNeighEntry = _EgpNeighEntry_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1)
)
egpNeighEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "egpNeighAddr"),
)
if mibBuilder.loadTexts:
    egpNeighEntry.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighEntry.setDescription("""\
Information about this entity's relationship with a particular EGP neighbor.
""")


class _EgpNeighState_Type(Integer32):
    """Custom type egpNeighState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("acquisition", 2),
          ("cease", 5),
          ("down", 3),
          ("idle", 1),
          ("up", 4))
    )


_EgpNeighState_Type.__name__ = "Integer32"
_EgpNeighState_Object = MibTableColumn
egpNeighState = _EgpNeighState_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 1),
    _EgpNeighState_Type()
)
egpNeighState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighState.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighState.setDescription("""\
The EGP state of the local system with respect to this entry's EGP neighbor.
Each EGP state is represented by a value that is one greater than the numerical
value associated with said state in RFC 904.
""")
_EgpNeighAddr_Type = IpAddress
_EgpNeighAddr_Object = MibTableColumn
egpNeighAddr = _EgpNeighAddr_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 2),
    _EgpNeighAddr_Type()
)
egpNeighAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighAddr.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighAddr.setDescription("""\
The IP address of this entry's EGP neighbor.
""")
_EgpNeighAs_Type = Integer32
_EgpNeighAs_Object = MibTableColumn
egpNeighAs = _EgpNeighAs_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 3),
    _EgpNeighAs_Type()
)
egpNeighAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighAs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighAs.setDescription("""\
The autonomous system of this EGP peer. Zero should be specified if the
autonomous system number of the neighbor is not yet known.
""")
_EgpNeighInMsgs_Type = Counter32
_EgpNeighInMsgs_Object = MibTableColumn
egpNeighInMsgs = _EgpNeighInMsgs_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 4),
    _EgpNeighInMsgs_Type()
)
egpNeighInMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighInMsgs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighInMsgs.setDescription("""\
The number of EGP messages received without error from this EGP peer.
""")
_EgpNeighInErrs_Type = Counter32
_EgpNeighInErrs_Object = MibTableColumn
egpNeighInErrs = _EgpNeighInErrs_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 5),
    _EgpNeighInErrs_Type()
)
egpNeighInErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighInErrs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighInErrs.setDescription("""\
The number of EGP messages received from this EGP peer that proved to be in
error (e.g., bad EGP checksum).
""")
_EgpNeighOutMsgs_Type = Counter32
_EgpNeighOutMsgs_Object = MibTableColumn
egpNeighOutMsgs = _EgpNeighOutMsgs_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 6),
    _EgpNeighOutMsgs_Type()
)
egpNeighOutMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighOutMsgs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighOutMsgs.setDescription("""\
The number of locally generated EGP messages to this EGP peer.
""")
_EgpNeighOutErrs_Type = Counter32
_EgpNeighOutErrs_Object = MibTableColumn
egpNeighOutErrs = _EgpNeighOutErrs_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 7),
    _EgpNeighOutErrs_Type()
)
egpNeighOutErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighOutErrs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighOutErrs.setDescription("""\
The number of locally generated EGP messages not sent to this EGP peer due to
resource limitations within an EGP entity.
""")
_EgpNeighInErrMsgs_Type = Counter32
_EgpNeighInErrMsgs_Object = MibTableColumn
egpNeighInErrMsgs = _EgpNeighInErrMsgs_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 8),
    _EgpNeighInErrMsgs_Type()
)
egpNeighInErrMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighInErrMsgs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighInErrMsgs.setDescription("""\
The number of EGP-defined error messages received from this EGP peer.
""")
_EgpNeighOutErrMsgs_Type = Counter32
_EgpNeighOutErrMsgs_Object = MibTableColumn
egpNeighOutErrMsgs = _EgpNeighOutErrMsgs_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 9),
    _EgpNeighOutErrMsgs_Type()
)
egpNeighOutErrMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighOutErrMsgs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighOutErrMsgs.setDescription("""\
The number of EGP-defined error messages sent to this EGP peer.
""")
_EgpNeighStateUps_Type = Counter32
_EgpNeighStateUps_Object = MibTableColumn
egpNeighStateUps = _EgpNeighStateUps_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 10),
    _EgpNeighStateUps_Type()
)
egpNeighStateUps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighStateUps.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighStateUps.setDescription("""\
The number of EGP state transitions to the UP state with this EGP peer.
""")
_EgpNeighStateDowns_Type = Counter32
_EgpNeighStateDowns_Object = MibTableColumn
egpNeighStateDowns = _EgpNeighStateDowns_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 11),
    _EgpNeighStateDowns_Type()
)
egpNeighStateDowns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighStateDowns.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighStateDowns.setDescription("""\
The number of EGP state transitions from the UP state to any other state with
this EGP peer.
""")
_EgpNeighIntervalHello_Type = Integer32
_EgpNeighIntervalHello_Object = MibTableColumn
egpNeighIntervalHello = _EgpNeighIntervalHello_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 12),
    _EgpNeighIntervalHello_Type()
)
egpNeighIntervalHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighIntervalHello.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighIntervalHello.setDescription("""\
The interval between EGP Hello command retransmissions (in hundredths of a
second). This represents the t1 timer as defined in RFC 904.
""")
_EgpNeighIntervalPoll_Type = Integer32
_EgpNeighIntervalPoll_Object = MibTableColumn
egpNeighIntervalPoll = _EgpNeighIntervalPoll_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 13),
    _EgpNeighIntervalPoll_Type()
)
egpNeighIntervalPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighIntervalPoll.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighIntervalPoll.setDescription("""\
The interval between EGP poll command retransmissions (in hundredths of a
second). This represents the t3 timer as defined in RFC 904.
""")


class _EgpNeighMode_Type(Integer32):
    """Custom type egpNeighMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_EgpNeighMode_Type.__name__ = "Integer32"
_EgpNeighMode_Object = MibTableColumn
egpNeighMode = _EgpNeighMode_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 14),
    _EgpNeighMode_Type()
)
egpNeighMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpNeighMode.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighMode.setDescription("""\
The polling mode of this EGP entity, either passive or active.
""")


class _EgpNeighEventTrigger_Type(Integer32):
    """Custom type egpNeighEventTrigger based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("start", 1),
          ("stop", 2))
    )


_EgpNeighEventTrigger_Type.__name__ = "Integer32"
_EgpNeighEventTrigger_Object = MibTableColumn
egpNeighEventTrigger = _EgpNeighEventTrigger_Object(
    (1, 3, 6, 1, 2, 1, 8, 5, 1, 15),
    _EgpNeighEventTrigger_Type()
)
egpNeighEventTrigger.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egpNeighEventTrigger.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpNeighEventTrigger.setDescription("""\
A control variable used to trigger operator- initiated Start and Stop events.
When read, this variable always returns the most recent value that
egpNeighEventTrigger was set to. If it has not been set since the last
initialization of the network management subsystem on the node, it returns a
value of `stop'. When set, this variable causes a Start or Stop event on the
specified neighbor, as specified on pages 8-10 of RFC 904. Briefly, a Start
event causes an Idle peer to begin neighbor acquisition and a non-Idle peer to
reinitiate neighbor acquisition. A stop event causes a non-Idle peer to return
to the Idle state until a Start event occurs, either via egpNeighEventTrigger
or otherwise.
""")
_EgpAs_Type = Integer32
_EgpAs_Object = MibScalar
egpAs = _EgpAs_Object(
    (1, 3, 6, 1, 2, 1, 8, 6),
    _EgpAs_Type()
)
egpAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egpAs.setStatus("mandatory")
if mibBuilder.loadTexts:
    egpAs.setDescription("""\
The autonomous system number of this EGP entity.
""")
_Transmission_ObjectIdentity = ObjectIdentity
transmission = _Transmission_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 10)
)
_Snmp_ObjectIdentity = ObjectIdentity
snmp = _Snmp_ObjectIdentity(
    (1, 3, 6, 1, 2, 1, 11)
)
_XeroxCommonMIB_ObjectIdentity = ObjectIdentity
xeroxCommonMIB = _XeroxCommonMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8)
)
if mibBuilder.loadTexts:
    xeroxCommonMIB.setStatus("current")
if mibBuilder.loadTexts:
    xeroxCommonMIB.setDescription("""\
The root of the Xerox Common MIB module. xeroxCommonMIB ::= { iso(1) org(3)
dod(6) internet(1) private(4) enterprises(1) Xerox(253) 8 }
""")
_XcmGeneralTC_ObjectIdentity = ObjectIdentity
xcmGeneralTC = _XcmGeneralTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 50)
)
if mibBuilder.loadTexts:
    xcmGeneralTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmGeneralTC.setDescription("""\
 Version: 5.601.pub Xerox General Textual Conventions See section 9
'Supplement' of XCMI General TC for implementation and conformance guidance for
this TC module. Copyright (C) 1995-2005 Xerox Corporation. All Rights Reserved.
""")
_XCmGeneralDummy_ObjectIdentity = ObjectIdentity
xCmGeneralDummy = _XCmGeneralDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999)
)
_XCmGenCardinal16_Type = Cardinal16
_XCmGenCardinal16_Object = MibScalar
xCmGenCardinal16 = _XCmGenCardinal16_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 1),
    _XCmGenCardinal16_Type()
)
xCmGenCardinal16.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCardinal16.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCardinal16.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenCardinal32_Type = Cardinal32
_XCmGenCardinal32_Object = MibScalar
xCmGenCardinal32 = _XCmGenCardinal32_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 2),
    _XCmGenCardinal32_Type()
)
xCmGenCardinal32.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCardinal32.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCardinal32.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenCardinal64High_Type = Cardinal64High
_XCmGenCardinal64High_Object = MibScalar
xCmGenCardinal64High = _XCmGenCardinal64High_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 3),
    _XCmGenCardinal64High_Type()
)
xCmGenCardinal64High.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCardinal64High.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCardinal64High.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenCardinal64Low_Type = Cardinal64Low
_XCmGenCardinal64Low_Object = MibScalar
xCmGenCardinal64Low = _XCmGenCardinal64Low_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 4),
    _XCmGenCardinal64Low_Type()
)
xCmGenCardinal64Low.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCardinal64Low.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCardinal64Low.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenCodedCountry_Type = CodedCountry
_XCmGenCodedCountry_Object = MibScalar
xCmGenCodedCountry = _XCmGenCodedCountry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 5),
    _XCmGenCodedCountry_Type()
)
xCmGenCodedCountry.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCodedCountry.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCodedCountry.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenCodedLanguage_Type = CodedLanguage
_XCmGenCodedLanguage_Object = MibScalar
xCmGenCodedLanguage = _XCmGenCodedLanguage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 6),
    _XCmGenCodedLanguage_Type()
)
xCmGenCodedLanguage.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCodedLanguage.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCodedLanguage.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenCodeIndexedStringIndex_Type = CodeIndexedStringIndex
_XCmGenCodeIndexedStringIndex_Object = MibScalar
xCmGenCodeIndexedStringIndex = _XCmGenCodeIndexedStringIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 7),
    _XCmGenCodeIndexedStringIndex_Type()
)
xCmGenCodeIndexedStringIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCodeIndexedStringIndex.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCodeIndexedStringIndex.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenCounter64High_Type = Counter64High
_XCmGenCounter64High_Object = MibScalar
xCmGenCounter64High = _XCmGenCounter64High_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 8),
    _XCmGenCounter64High_Type()
)
xCmGenCounter64High.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCounter64High.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCounter64High.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenCounter64Low_Type = Counter64Low
_XCmGenCounter64Low_Object = MibScalar
xCmGenCounter64Low = _XCmGenCounter64Low_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 9),
    _XCmGenCounter64Low_Type()
)
xCmGenCounter64Low.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenCounter64Low.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenCounter64Low.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenGauge64High_Type = Gauge64High
_XCmGenGauge64High_Object = MibScalar
xCmGenGauge64High = _XCmGenGauge64High_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 10),
    _XCmGenGauge64High_Type()
)
xCmGenGauge64High.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenGauge64High.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenGauge64High.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenGauge64Low_Type = Gauge64Low
_XCmGenGauge64Low_Object = MibScalar
xCmGenGauge64Low = _XCmGenGauge64Low_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 11),
    _XCmGenGauge64Low_Type()
)
xCmGenGauge64Low.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenGauge64Low.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenGauge64Low.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenInteger64High_Type = Integer64High
_XCmGenInteger64High_Object = MibScalar
xCmGenInteger64High = _XCmGenInteger64High_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 12),
    _XCmGenInteger64High_Type()
)
xCmGenInteger64High.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenInteger64High.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenInteger64High.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenInteger64Low_Type = Integer64Low
_XCmGenInteger64Low_Object = MibScalar
xCmGenInteger64Low = _XCmGenInteger64Low_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 13),
    _XCmGenInteger64Low_Type()
)
xCmGenInteger64Low.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenInteger64Low.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenInteger64Low.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenOrdinal16_Type = Ordinal16
_XCmGenOrdinal16_Object = MibScalar
xCmGenOrdinal16 = _XCmGenOrdinal16_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 14),
    _XCmGenOrdinal16_Type()
)
xCmGenOrdinal16.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenOrdinal16.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenOrdinal16.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenOrdinal32_Type = Ordinal32
_XCmGenOrdinal32_Object = MibScalar
xCmGenOrdinal32 = _XCmGenOrdinal32_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 15),
    _XCmGenOrdinal32_Type()
)
xCmGenOrdinal32.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenOrdinal32.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenOrdinal32.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenOrdinal64High_Type = Ordinal64High
_XCmGenOrdinal64High_Object = MibScalar
xCmGenOrdinal64High = _XCmGenOrdinal64High_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 16),
    _XCmGenOrdinal64High_Type()
)
xCmGenOrdinal64High.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenOrdinal64High.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenOrdinal64High.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenOrdinal64Low_Type = Ordinal64Low
_XCmGenOrdinal64Low_Object = MibScalar
xCmGenOrdinal64Low = _XCmGenOrdinal64Low_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 17),
    _XCmGenOrdinal64Low_Type()
)
xCmGenOrdinal64Low.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenOrdinal64Low.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenOrdinal64Low.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenFixedLocaleDisplayString_Type = XcmFixedLocaleDisplayString
_XCmGenFixedLocaleDisplayString_Object = MibScalar
xCmGenFixedLocaleDisplayString = _XCmGenFixedLocaleDisplayString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 18),
    _XCmGenFixedLocaleDisplayString_Type()
)
xCmGenFixedLocaleDisplayString.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenFixedLocaleDisplayString.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenFixedLocaleDisplayString.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenGroupSupport_Type = XcmGenGroupSupport
_XCmGenGroupSupport_Object = MibScalar
xCmGenGroupSupport = _XCmGenGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 19),
    _XCmGenGroupSupport_Type()
)
xCmGenGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenLogFullPolicy_Type = XcmGenLogFullPolicy
_XCmGenLogFullPolicy_Object = MibScalar
xCmGenLogFullPolicy = _XCmGenLogFullPolicy_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 20),
    _XCmGenLogFullPolicy_Type()
)
xCmGenLogFullPolicy.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenLogFullPolicy.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenLogFullPolicy.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenOptionValueSyntax_Type = XcmGenOptionValueSyntax
_XCmGenOptionValueSyntax_Object = MibScalar
xCmGenOptionValueSyntax = _XCmGenOptionValueSyntax_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 21),
    _XCmGenOptionValueSyntax_Type()
)
xCmGenOptionValueSyntax.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenOptionValueSyntax.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenOptionValueSyntax.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenReconfOptionState_Type = XcmGenReconfOptionState
_XCmGenReconfOptionState_Object = MibScalar
xCmGenReconfOptionState = _XCmGenReconfOptionState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 22),
    _XCmGenReconfOptionState_Type()
)
xCmGenReconfOptionState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenReconfOptionState.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenReconfOptionState.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenRowPersistence_Type = XcmGenRowPersistence
_XCmGenRowPersistence_Object = MibScalar
xCmGenRowPersistence = _XCmGenRowPersistence_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 23),
    _XCmGenRowPersistence_Type()
)
xCmGenRowPersistence.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenRowPersistence.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenRowPersistence.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenSNMPDomain_Type = XcmGenSNMPDomain
_XCmGenSNMPDomain_Object = MibScalar
xCmGenSNMPDomain = _XCmGenSNMPDomain_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 24),
    _XCmGenSNMPDomain_Type()
)
xCmGenSNMPDomain.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenSNMPDomain.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenSNMPDomain.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenSNMPVersion_Type = XcmGenSNMPVersion
_XCmGenSNMPVersion_Object = MibScalar
xCmGenSNMPVersion = _XCmGenSNMPVersion_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 25),
    _XCmGenSNMPVersion_Type()
)
xCmGenSNMPVersion.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenSNMPVersion.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenSNMPVersion.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenSNMPv2ErrorStatus_Type = XcmGenSNMPv2ErrorStatus
_XCmGenSNMPv2ErrorStatus_Object = MibScalar
xCmGenSNMPv2ErrorStatus = _XCmGenSNMPv2ErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 26),
    _XCmGenSNMPv2ErrorStatus_Type()
)
xCmGenSNMPv2ErrorStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenSNMPv2ErrorStatus.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenSNMPv2ErrorStatus.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenGlobalUniqueID_Type = XcmGlobalUniqueID
_XCmGenGlobalUniqueID_Object = MibScalar
xCmGenGlobalUniqueID = _XCmGenGlobalUniqueID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 27),
    _XCmGenGlobalUniqueID_Type()
)
xCmGenGlobalUniqueID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenGlobalUniqueID.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenGlobalUniqueID.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenFixedLocaleUtf8String_Type = XcmFixedLocaleUtf8String
_XCmGenFixedLocaleUtf8String_Object = MibScalar
xCmGenFixedLocaleUtf8String = _XCmGenFixedLocaleUtf8String_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 28),
    _XCmGenFixedLocaleUtf8String_Type()
)
xCmGenFixedLocaleUtf8String.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenFixedLocaleUtf8String.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenFixedLocaleUtf8String.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenMessageMapStringLabel_Type = XcmGenMessageMapStringLabel
_XCmGenMessageMapStringLabel_Object = MibScalar
xCmGenMessageMapStringLabel = _XCmGenMessageMapStringLabel_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 29),
    _XCmGenMessageMapStringLabel_Type()
)
xCmGenMessageMapStringLabel.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenMessageMapStringLabel.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenMessageMapStringLabel.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenNamedLocaleUtf8String_Type = XcmNamedLocaleUtf8String
_XCmGenNamedLocaleUtf8String_Object = MibScalar
xCmGenNamedLocaleUtf8String = _XCmGenNamedLocaleUtf8String_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 30),
    _XCmGenNamedLocaleUtf8String_Type()
)
xCmGenNamedLocaleUtf8String.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenNamedLocaleUtf8String.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenNamedLocaleUtf8String.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenNotifySchemeSupport_Type = XcmGenNotifySchemeSupport
_XCmGenNotifySchemeSupport_Object = MibScalar
xCmGenNotifySchemeSupport = _XCmGenNotifySchemeSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 31),
    _XCmGenNotifySchemeSupport_Type()
)
xCmGenNotifySchemeSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenNotifySchemeSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenNotifySchemeSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenNotifySeverityFilter_Type = XcmGenNotifySeverityFilter
_XCmGenNotifySeverityFilter_Object = MibScalar
xCmGenNotifySeverityFilter = _XCmGenNotifySeverityFilter_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 32),
    _XCmGenNotifySeverityFilter_Type()
)
xCmGenNotifySeverityFilter.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenNotifySeverityFilter.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenNotifySeverityFilter.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenNotifyTrainingFilter_Type = XcmGenNotifyTrainingFilter
_XCmGenNotifyTrainingFilter_Object = MibScalar
xCmGenNotifyTrainingFilter = _XCmGenNotifyTrainingFilter_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 33),
    _XCmGenNotifyTrainingFilter_Type()
)
xCmGenNotifyTrainingFilter.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenNotifyTrainingFilter.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenNotifyTrainingFilter.setDescription("""\
Dummy - DO NOT USE
""")
_XCmGenNotifyDetailType_Type = XcmGenNotifyDetailType
_XCmGenNotifyDetailType_Object = MibScalar
xCmGenNotifyDetailType = _XCmGenNotifyDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 50, 999, 34),
    _XCmGenNotifyDetailType_Type()
)
xCmGenNotifyDetailType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmGenNotifyDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xCmGenNotifyDetailType.setDescription("""\
Dummy - DO NOT USE
""")
_XcmGeneralMIB_ObjectIdentity = ObjectIdentity
xcmGeneralMIB = _XcmGeneralMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51)
)
if mibBuilder.loadTexts:
    xcmGeneralMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmGeneralMIB.setDescription("""\
 Version: 5.402.pub Xerox General MIB See section 9 'Supplement' of XCMI
General TC for implementation and conformance guidance for this MIB module.
Copyright (C) 1995-2005 Xerox Corporation. All Rights Reserved.
""")
_XcmGenBase_ObjectIdentity = ObjectIdentity
xcmGenBase = _XcmGenBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1)
)
_XcmGenBaseTable_Object = MibTable
xcmGenBaseTable = _XcmGenBaseTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2)
)
if mibBuilder.loadTexts:
    xcmGenBaseTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseTable.setDescription("""\
 A table of general counters and capabilities for ease of use of the XCMI
General MIB on this host system. Usage: The ONLY valid row in the
'xcmGenBaseTable' SHALL have an 'xcmGenBaseIndex' of one ('1').
""")
_XcmGenBaseEntry_Object = MibTableRow
xcmGenBaseEntry = _XcmGenBaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1)
)
xcmGenBaseEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenBaseIndex"),
)
if mibBuilder.loadTexts:
    xcmGenBaseEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseEntry.setDescription("""\
 An entry of general counters and capabilities for ease of use of the XCMI
General MIB on this host system. Usage: The ONLY valid row in the
'xcmGenBaseTable' SHALL have an 'xcmGenBaseIndex' of one ('1').
""")
_XcmGenBaseIndex_Type = Ordinal32
_XcmGenBaseIndex_Object = MibTableColumn
xcmGenBaseIndex = _XcmGenBaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 1),
    _XcmGenBaseIndex_Type()
)
xcmGenBaseIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenBaseIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseIndex.setDescription("""\
 A unique value used by this host system to identify this conceptual row in the
'xcmGenBaseTable'. Usage: The ONLY valid row in the 'xcmGenBaseTable' SHALL
have an 'xcmGenBaseIndex' of one ('1').
""")
_XcmGenBaseRowStatus_Type = RowStatus
_XcmGenBaseRowStatus_Object = MibTableColumn
xcmGenBaseRowStatus = _XcmGenBaseRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 2),
    _XcmGenBaseRowStatus_Type()
)
xcmGenBaseRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseRowStatus.setDescription("""\
 This object is used to display status of the ONLY valid conceptual row in the
'xcmGenBaseTable'. Usage: 'xcmGenBaseRowStatus' is 'read-only' because the ONLY
valid conceptual row SHALL NOT be deleted.
""")
_XcmGenBaseSystemHrDeviceIndex_Type = Cardinal32
_XcmGenBaseSystemHrDeviceIndex_Object = MibTableColumn
xcmGenBaseSystemHrDeviceIndex = _XcmGenBaseSystemHrDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 3),
    _XcmGenBaseSystemHrDeviceIndex_Type()
)
xcmGenBaseSystemHrDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseSystemHrDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSystemHrDeviceIndex.setReference("""\
 See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790). See: 'xcmHrStoragePlatformDeviceIndex' in the Storage Ext group of the
XCMI Host Resources Ext MIB.
""")
if mibBuilder.loadTexts:
    xcmGenBaseSystemHrDeviceIndex.setDescription("""\
 The value of 'hrDeviceIndex' corresponding to the platform associated
conceptual row in the 'hrDeviceTable' representing the CPU device (of type
'hrDeviceProcessor'), which currently supports the executing process/thread of
this management agent.
""")


class _XcmGenBaseGroupSupport_Type(XcmGenGroupSupport):
    """Custom type xcmGenBaseGroupSupport based on XcmGenGroupSupport"""
    defaultValue = 3584


_XcmGenBaseGroupSupport_Object = MibTableColumn
xcmGenBaseGroupSupport = _XcmGenBaseGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 4),
    _XcmGenBaseGroupSupport_Type()
)
xcmGenBaseGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseGroupSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI General MIB object groups which are supported by this management
agent implementation (ie, version) on this host system, specified in a bit-
mask. Usage: Conforming management agents SHALL accurately report their support
for the XCMI General MIB object groups.
""")


class _XcmGenBaseGroupCreateSupport_Type(XcmGenGroupSupport):
    """Custom type xcmGenBaseGroupCreateSupport based on XcmGenGroupSupport"""
    defaultValue = 1536


_XcmGenBaseGroupCreateSupport_Object = MibTableColumn
xcmGenBaseGroupCreateSupport = _XcmGenBaseGroupCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 5),
    _XcmGenBaseGroupCreateSupport_Type()
)
xcmGenBaseGroupCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseGroupCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseGroupCreateSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI General MIB object groups which are supported for dynamic row
creation (via '...RowStatus') by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. Usage: Conforming
management agents SHALL accurately report their support for the XCMI General
MIB object groups.
""")


class _XcmGenBaseGroupUpdateSupport_Type(XcmGenGroupSupport):
    """Custom type xcmGenBaseGroupUpdateSupport based on XcmGenGroupSupport"""
    defaultValue = 3584


_XcmGenBaseGroupUpdateSupport_Object = MibTableColumn
xcmGenBaseGroupUpdateSupport = _XcmGenBaseGroupUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 6),
    _XcmGenBaseGroupUpdateSupport_Type()
)
xcmGenBaseGroupUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseGroupUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseGroupUpdateSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI General MIB object groups which are supported for existing row
update (via SNMP Set-Request PDUs) by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. Usage: Conforming
management agents SHALL accurately report their support for the XCMI General
MIB object groups.
""")
_XcmGenBaseClientDataMaxSupport_Type = Cardinal32
_XcmGenBaseClientDataMaxSupport_Object = MibTableColumn
xcmGenBaseClientDataMaxSupport = _XcmGenBaseClientDataMaxSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 7),
    _XcmGenBaseClientDataMaxSupport_Type()
)
xcmGenBaseClientDataMaxSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseClientDataMaxSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseClientDataMaxSupport.setReference("""\
 See: 'xcmGenClientDataLength'
""")
if mibBuilder.loadTexts:
    xcmGenBaseClientDataMaxSupport.setDescription("""\
 The maximum 'xcmGenClientDataLength' supported for ANY conceptual row in the
'xcmGenClientDataTable'. Usage: Conforming implementations NEED NOT support
maximum 'xcmGenClientDataLength' greater than 1 octet.
""")
_XcmGenBaseOptionSyntaxSupport_Type = Cardinal32
_XcmGenBaseOptionSyntaxSupport_Object = MibTableColumn
xcmGenBaseOptionSyntaxSupport = _XcmGenBaseOptionSyntaxSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 8),
    _XcmGenBaseOptionSyntaxSupport_Type()
)
xcmGenBaseOptionSyntaxSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseOptionSyntaxSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseOptionSyntaxSupport.setReference("""\
 See: 'XcmGenOptionValueSyntax' in the XCMI General TC
""")
if mibBuilder.loadTexts:
    xcmGenBaseOptionSyntaxSupport.setDescription("""\
 The 'xcmGenOptionValueSyntax' values supported for ANY conceptual row in the
'xcmGenOptionTable'. Usage: Conforming management agents SHALL report their
supported values as a 'bit-mask' formed via the bit-wise OR of '2**(n)', where
(n) is each supported enumerated value in the in the 'XcmGenOptionValueSyntax'
textual convention.
""")
_XcmGenBaseReconfStateSupport_Type = Cardinal32
_XcmGenBaseReconfStateSupport_Object = MibTableColumn
xcmGenBaseReconfStateSupport = _XcmGenBaseReconfStateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 9),
    _XcmGenBaseReconfStateSupport_Type()
)
xcmGenBaseReconfStateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseReconfStateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseReconfStateSupport.setReference("""\
 See: 'XcmGenReconfOptionState' in the XCMI General TC
""")
if mibBuilder.loadTexts:
    xcmGenBaseReconfStateSupport.setDescription("""\
 The 'xcmGenReconfOptionState' values supported for ANY conceptual row in the
'xcmGenReconfTable'. Usage: Conforming management agents SHALL report their
supported values as a 'bit-mask' formed via the bit-wise OR of '2**(n)', where
(n) is each supported enumerated value in the in the 'XcmGenReconfOptionState'
textual convention.
""")
_XcmGenBaseSNMPDomainSupport_Type = Cardinal32
_XcmGenBaseSNMPDomainSupport_Object = MibTableColumn
xcmGenBaseSNMPDomainSupport = _XcmGenBaseSNMPDomainSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 10),
    _XcmGenBaseSNMPDomainSupport_Type()
)
xcmGenBaseSNMPDomainSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPDomainSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPDomainSupport.setReference("""\
 See: 'XcmGenSNMPDomain' in the XCMI General TC See:
'xcmGenTrapClientSNMP[Domain|Version]'.
""")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPDomainSupport.setDescription("""\
 This object is used to specify ALL transport domains (address and name spaces)
which are supported by this management agent for SNMP protocol traffic (SNMP
responses, SNMP traps, etc), in ALL versions specified by
'xcmGenBaseSNMPVersionSupport'. This object is also used to allow the
'xcmGenTrapClientTable' to be used with any URI scheme (e.g., 'mailto:') for
notifications, by specifying 'uriNotifyDomain'. Usage: Conforming management
agents SHALL report their supported values as a 'bit-mask' formed via the bit-
wise OR of '2**(n)', where (n) is each supported enumerated value in the in the
'XcmGenSNMPDomain' textual convention.
""")
_XcmGenBaseSNMPTrapSupport_Type = TruthValue
_XcmGenBaseSNMPTrapSupport_Object = MibTableColumn
xcmGenBaseSNMPTrapSupport = _XcmGenBaseSNMPTrapSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 11),
    _XcmGenBaseSNMPTrapSupport_Type()
)
xcmGenBaseSNMPTrapSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPTrapSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPTrapSupport.setReference("""\
 See: 'xcmGenBaseGroupSupport' for 'xcmGenTrapClientTable'
""")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPTrapSupport.setDescription("""\
 This object SHALL be 'true' if this management agent supports SNMP traps (in
any SNMP domain and SNMP version) and MAY support the 'xcmGenTrapClientTable'.
This object SHALL be 'false' if this management agent does NOT support SNMP
traps (in any SNMP domain and SNMP version) and does NOT support the
'xcmGenTrapClientTable'.
""")
_XcmGenBaseSNMPVersionSupport_Type = Cardinal32
_XcmGenBaseSNMPVersionSupport_Object = MibTableColumn
xcmGenBaseSNMPVersionSupport = _XcmGenBaseSNMPVersionSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 12),
    _XcmGenBaseSNMPVersionSupport_Type()
)
xcmGenBaseSNMPVersionSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPVersionSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPVersionSupport.setReference("""\
 See: 'XcmGenSNMPVersion' in the XCMI General TC See:
'xcmGenTrapClientSNMP[Domain|Version]'.
""")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPVersionSupport.setDescription("""\
 This object is used to specify ALL SNMP versions (RFC 1157, RFC 1905, etc)
which are supported by this management agent for SNMP protocol traffic (SNMP
responses, SNMP traps, etc), in ALL domains specified by
'xcmGenBaseSNMPDomainSupport'. Usage: Conforming management agents SHALL report
their supported values as a 'bit-mask' formed via the bit-wise OR of '2**(n)',
where (n) is each supported enumerated value in the in the 'XcmGenSNMPVersion'
textual convention.
""")


class _XcmGenBaseSNMPReadCommunity_Type(OctetString):
    """Custom type xcmGenBaseSNMPReadCommunity based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_XcmGenBaseSNMPReadCommunity_Type.__name__ = "OctetString"
_XcmGenBaseSNMPReadCommunity_Object = MibTableColumn
xcmGenBaseSNMPReadCommunity = _XcmGenBaseSNMPReadCommunity_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 13),
    _XcmGenBaseSNMPReadCommunity_Type()
)
xcmGenBaseSNMPReadCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPReadCommunity.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPReadCommunity.setReference("""\
 See: SNMPv1c (RFC 1157) and SNMPv2c (RFC 1905). See: 'Coexistence between
SNMPv1, SNMPv2, and SNMPv3' RFC 2576, March 2000. See:
'xcmGenBaseSNMP[Write|Trap]Community'.
""")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPReadCommunity.setDescription("""\
 This object is used to specify a 'read community name' valid for use in
SNMPv1c and SNMPv2c 'Get|GetNext|GetBulk' PDUs received (SNMP requests) and
generated (SNMP responses) by this management agent. Usage: Note that the
object 'xcmGenBaseSNMPWriteCommunity' SHALL ALSO be used to specify a 'read
community name' valid for use in SNMPv1c and SNMPv2c 'Get|GetNext|GetBulk' PDUs
received (SNMP requests) and generated (SNMP responses) by this management
agent. Note however that the object 'xcmGenBaseSNMPTrapCommunity' SHALL NOT be
used to specify a 'read community name' valid in SNMP 'Get|GetNext|GetBulk'.
Note: XCMI-defined community name objects support 64 octets maximum length and
configurable charsets, for consistency with the 'snmpCommunityName' object
defined in the SNMP Community MIB defined in RFC 2576 (March 2000). Note:
Products MAY ship with a market-specific factory default locale with a charset
other than 'utf-8', eg, in Japan a product might factory default to 'shift-
jis(17)' or 'iso-2022-jp(39)'. Such products MUST implement the
'xcmGenFixedLocalizationTable', to prevent ambiguity about the factory default
charset. Usage: For best interworking with the ('utf-8' charset ONLY) closely
related 'snmpCommunitySecurityName' object in RFC 2576, conforming management
stations and management agents SHOULD NOT configure community names longer than
32 octets. Usage: For best interworking with third-party applications,
conforming management stations and management agents SHOULD NOT configure empty
(zero-length or all spaces) community names. Usage: All XCMI conforming
management agents SHALL treat a valid 'write community name' as a valid 'read
community name' and SHALL NOT increment 'snmpInBadCommunityNames' (unknown
name) or 'snmpInBadCommunityUses' (wrong community name for operation) counters
in the SNMPv2 Agent MIB (RFC 1907). Usage: All XCMI conforming management
agents are STRONGLY RECOMMENDED to support an authenticated SNMP SetRequest to
this object, changing the system 'read community name' (for best interworking
with third-party management stations). Usage: All XCMI conforming management
agents: a) SHALL return a zero length string in response to an SNMP GetRequest
of this object; b) are STRONGLY RECOMMENDED to default this object to the
string 'public' (in the static charset); and c) MAY support multiple valid
'read community names' (by using 'xcmGenBaseReadCommunity' as a 'window' to a
community list via 'device[Set|List]' device operations in the Device Mgmt
group of the XCMI Host Resources Ext MIB). Usage: This object is of type
'XcmFixedLocaleDisplayString', with an (opaque) locale and an explicit charset
which is specified in the 'xcmGenLocalizationCharSet' object indexed by
'hrDeviceIndex' per 'xcmGenBaseSystemHrDeviceIndex' and
'xcmGenLocalizationIndex' per 'xcmGenFixedLocalizationIndex'. If
'xcmGenLocalizationTable' or 'xcmGenFixedLocalizationTable' are not implemented
on this host system, then the charset SHALL be 'utf-8(106)', ISO 10646-1 in
'UTF-8' stream encoding. Usage: All XCMI conforming management agents SHALL
allow any defined character in the configured charset of this object. All XCMI
conforming management stations SHOULD NOT write control characters or other
non-display characters into this object. WARNING: Changing the only valid 'read
community name' of an SNMP management agent will cause a COMPLETE loss of
communications unless all associated SNMP management stations (clients) ALSO
change over to the new 'read community name'!!!
""")


class _XcmGenBaseSNMPWriteCommunity_Type(OctetString):
    """Custom type xcmGenBaseSNMPWriteCommunity based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_XcmGenBaseSNMPWriteCommunity_Type.__name__ = "OctetString"
_XcmGenBaseSNMPWriteCommunity_Object = MibTableColumn
xcmGenBaseSNMPWriteCommunity = _XcmGenBaseSNMPWriteCommunity_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 14),
    _XcmGenBaseSNMPWriteCommunity_Type()
)
xcmGenBaseSNMPWriteCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPWriteCommunity.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPWriteCommunity.setReference("""\
 See: SNMPv1c (RFC 1157) and SNMPv2c (RFC 1905). See: 'Coexistence between
SNMPv1, SNMPv2, and SNMPv3' RFC 2576, March 2000. See:
'xcmGenBaseSNMP[Read|Trap]Community'.
""")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPWriteCommunity.setDescription("""\
 This object is used to specify a 'write community name' valid for use in
SNMPv1c and SNMPv2c 'Set' PDUs received (SNMP requests) and generated (SNMP
responses) by this management agent. Usage: Note that the object
'xcmGenBaseSNMPWriteCommunity' SHALL ALSO be used to specify a 'read community
name' valid for use in SNMPv1c and SNMPv2c 'Get|GetNext|GetBulk' PDUs received
(SNMP requests) and generated (SNMP responses) by this management agent. Note
however that the object 'xcmGenBaseSNMPTrapCommunity' SHALL NOT be used to
specify a 'read community name' valid in SNMP 'Get|GetNext|GetBulk'. Usage: All
XCMI conforming management agents SHALL treat a valid 'write community name' as
a valid 'read community name' and SHALL NOT increment 'snmpInBadCommunityNames'
(unknown name) or 'snmpInBadCommunityUses' (wrong community name for operation)
counters in the SNMPv2 Agent MIB (RFC 1907). Note: XCMI-defined community name
objects support 64 octets maximum length and configurable charsets, for
consistency with the 'snmpCommunityName' object defined in the SNMP Community
MIB defined in RFC 2576 (March 2000). Note: Products MAY ship with a market-
specific factory default locale with a charset other than 'utf-8', eg, in Japan
a product might factory default to 'shift-jis(17)' or 'iso-2022-jp(39)'. Such
products MUST implement the 'xcmGenFixedLocalizationTable', to prevent
ambiguity about the factory default charset. Usage: For best interworking with
the ('utf-8' charset ONLY) closely related 'snmpCommunitySecurityName' object
in RFC 2576, conforming management stations and management agents SHOULD NOT
configure community names longer than 32 octets. Usage: For best interworking
with third-party applications, conforming management stations and management
agents SHOULD NOT configure empty (zero-length or all spaces) community names.
Usage: All XCMI conforming management agents are STRONGLY RECOMMENDED to
support an authenticated SNMP SetRequest to this object, changing the system
'write community name' (for best interworking with third-party management
stations). Usage: All XCMI conforming management agents: a) SHALL return a zero
length string in response to an SNMP GetRequest of this object; b) are STRONGLY
RECOMMENDED to default this object to the string 'public' (in the static
charset); and c) MAY support multiple valid 'write community names' (by using
'xcmGenBaseWriteCommunity' as a 'window' to a community list via
'device[Set|List]' device operations in the Device Mgmt group of the XCMI Host
Resources Ext MIB). Usage: This object is of type 'XcmFixedLocaleDisplayString'
(see DESCRIPTION of 'xcmGenBaseSNMPReadCommunity' above). If
'xcmGenLocalizationTable' or 'xcmGenFixedLocalizationTable' are not implemented
on this host system, then the charset SHALL be 'utf-8(106)', ISO 10646-1 in
'UTF-8' stream encoding. Usage: All XCMI conforming management agents SHALL
allow any defined character in the configured charset of this object. All XCMI
conforming management stations SHOULD NOT write control characters or other
non-display characters into this object. Usage: When an SNMP management
stations CHANGES the value of this 'write community name', an XCMI conforming
management agent SHALL use the old (previous) 'write community name' when
generating the SNMP response to the 'Set' PDU, for consistency. WARNING:
Changing the only valid 'write community name' of an SNMP management agent will
cause a COMPLETE loss of communications unless all associated SNMP management
stations (clients) ALSO change over to the new 'write community name'!!!
""")


class _XcmGenBaseSNMPTrapCommunity_Type(OctetString):
    """Custom type xcmGenBaseSNMPTrapCommunity based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_XcmGenBaseSNMPTrapCommunity_Type.__name__ = "OctetString"
_XcmGenBaseSNMPTrapCommunity_Object = MibTableColumn
xcmGenBaseSNMPTrapCommunity = _XcmGenBaseSNMPTrapCommunity_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 15),
    _XcmGenBaseSNMPTrapCommunity_Type()
)
xcmGenBaseSNMPTrapCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPTrapCommunity.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPTrapCommunity.setReference("""\
 See: SNMPv1c (RFC 1157) and SNMPv2c (RFC 1905). See: 'Coexistence between
SNMPv1, SNMPv2, and SNMPv3' RFC 2576, March 2000. See:
'xcmGenBaseSNMP[Read|Write]Community'. See: 'xcmGenTrapClientSNMPCommunity'.
""")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPTrapCommunity.setDescription("""\
 This object is used to specify a 'trap community name' valid for use in
SNMPv1c and SNMPv2c 'Inform|Trap' PDUs received (SNMP requests) and generated
(SNMP traps) by this management agent. Usage: Note that the object
'xcmGenBaseSNMPWriteCommunity' SHALL ALSO be used to specify a 'read community
name' valid for use in SNMPv1c and SNMPv2c 'Get|GetNext|GetBulk' PDUs received
(SNMP requests) and generated (SNMP responses) by this management agent. Note
however that the object 'xcmGenBaseSNMPTrapCommunity' SHALL NOT be used to
specify a 'read community name' valid in SNMP 'Get|GetNext|GetBulk'. Note:
XCMI-defined community name objects support 64 octets maximum length and
configurable charsets, for consistency with the 'snmpCommunityName' object
defined in the SNMP Community MIB defined in RFC 2576 (March 2000). Note:
Products MAY ship with a market-specific factory default locale with a charset
other than 'utf-8', eg, in Japan a product might factory default to 'shift-
jis(17)' or 'iso-2022-jp(39)'. Such products MUST implement the
'xcmGenFixedLocalizationTable', to prevent ambiguity about the factory default
charset. Usage: For best interworking with the ('utf-8' charset ONLY) closely
related 'snmpCommunitySecurityName' object in RFC 2576, conforming management
stations and management agents SHOULD NOT configure community names longer than
32 octets. Usage: For best interworking with third-party applications,
conforming management stations and management agents SHOULD NOT configure empty
(zero-length or all spaces) community names. Usage: All XCMI conforming
management agents are STRONGLY RECOMMENDED to support an authenticated SNMP
SetRequest to this object, changing the system 'trap community name' (for best
interworking with third-party management stations). Usage: All XCMI conforming
management agents: a) SHALL return a zero length string in response to an SNMP
GetRequest of this object; b) are STRONGLY RECOMMENDED to default this object
to the string 'public' (in the static charset); and c) MAY support multiple
valid 'trap community names' (by using 'xcmGenBaseTrapCommunity' as a 'window'
to a community list via 'device[Set|List]' device operations in the Device Mgmt
group of the XCMI Host Resources Ext MIB). Usage: This object is of type
'XcmFixedLocaleDisplayString' (see DESCRIPTION of 'xcmGenBaseSNMPReadCommunity'
above). If 'xcmGenLocalizationTable' or 'xcmGenFixedLocalizationTable' are not
implemented on this host system, then the charset SHALL be 'utf-8(106)', ISO
10646-1 in 'UTF-8' stream encoding. Usage: All XCMI conforming management
agents SHALL allow any defined character in the configured charset of this
object. All XCMI conforming management stations SHOULD NOT write control
characters or other non-display characters into this object. WARNING: Changing
the only valid 'trap community name' of an SNMP management agent will cause a
COMPLETE loss of communications unless all associated SNMP management stations
(clients) ALSO change over to the new 'trap community name'!!!
""")


class _XcmGenBaseGroupWalkHidden_Type(XcmGenGroupSupport):
    """Custom type xcmGenBaseGroupWalkHidden based on XcmGenGroupSupport"""
    defaultValue = 12288


_XcmGenBaseGroupWalkHidden_Object = MibTableColumn
xcmGenBaseGroupWalkHidden = _XcmGenBaseGroupWalkHidden_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 16),
    _XcmGenBaseGroupWalkHidden_Type()
)
xcmGenBaseGroupWalkHidden.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmGenBaseGroupWalkHidden.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseGroupWalkHidden.setDescription("""\
 The terse control/report vector of ALL mandatory, conditionally mandatory, and
optional XCMI General MIB object groups which are hidden from MIB walks (via
SNMP GetNext or GetBulk PDUs) by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. Usage: When an object
group is currently 'hidden' via 'xcmGenBaseGroupWalkHidden', XCMI conforming
management agents SHALL skip over that object group to the next
lexicographically higher object for GetNext or GetBulk requests. Usage:
Conforming management agents SHOULD hide the Message Map Message Text object
groups from MIB walks (as they MAY contain thousands of conceptual rows in
typical implementations). Usage: Conforming management agents SHALL accurately
report their hidden MIB walk XCMI General MIB object groups.
""")


class _XcmGenBaseNotifySchemeSupport_Type(XcmGenNotifySchemeSupport):
    """Custom type xcmGenBaseNotifySchemeSupport based on XcmGenNotifySchemeSupport"""
    defaultValue = 1


_XcmGenBaseNotifySchemeSupport_Object = MibTableColumn
xcmGenBaseNotifySchemeSupport = _XcmGenBaseNotifySchemeSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 17),
    _XcmGenBaseNotifySchemeSupport_Type()
)
xcmGenBaseNotifySchemeSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseNotifySchemeSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseNotifySchemeSupport.setReference("""\
 See: 'XcmGenNotifySchemeSupport' in XCMI General TC. See:
'xcmGenBaseSNMPDomainSupport' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmGenBaseNotifySchemeSupport.setDescription("""\
 The terse conformance statement of ALL notification URI schemes which are
supported by this management agent implementation (ie, version) on this host
system, specified in a bit-mask. Usage: Conforming management agents SHALL
accurately report their support for notification URI schemes.
""")


class _XcmGenBaseNotifySeveritySupport_Type(XcmGenNotifySeverityFilter):
    """Custom type xcmGenBaseNotifySeveritySupport based on XcmGenNotifySeverityFilter"""
    defaultValue = 15


_XcmGenBaseNotifySeveritySupport_Object = MibTableColumn
xcmGenBaseNotifySeveritySupport = _XcmGenBaseNotifySeveritySupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 18),
    _XcmGenBaseNotifySeveritySupport_Type()
)
xcmGenBaseNotifySeveritySupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseNotifySeveritySupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseNotifySeveritySupport.setReference("""\
 See: 'prtAlertSeverityLevel' in IETF Printer MIB (RFC 1759). See:
'XcmGenNotifySeverityFilter' in XCMI General TC. See:
'xcmGenTrapViewNotifySeverity' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmGenBaseNotifySeveritySupport.setDescription("""\
 The terse conformance statement of ALL notification severity filters supported
by this management agent implementation (ie, version) on this host system,
specified in a bit-mask. Usage: Individual trap definitions MAY further
constrain which notifications are 'in scope'. Usage: Conforming management
agents SHALL accurately report their support for notification severity filters.
""")


class _XcmGenBaseNotifyTrainingSupport_Type(XcmGenNotifyTrainingFilter):
    """Custom type xcmGenBaseNotifyTrainingSupport based on XcmGenNotifyTrainingFilter"""
    defaultValue = 60


_XcmGenBaseNotifyTrainingSupport_Object = MibTableColumn
xcmGenBaseNotifyTrainingSupport = _XcmGenBaseNotifyTrainingSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 19),
    _XcmGenBaseNotifyTrainingSupport_Type()
)
xcmGenBaseNotifyTrainingSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseNotifyTrainingSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseNotifyTrainingSupport.setReference("""\
 See: 'prtAlertTrainingLevel' in IETF Printer MIB (RFC 1759). See:
'XcmGenNotifyTrainingFilter' in XCMI General TC. See:
'xcmGenTrapViewNotifyTraining' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmGenBaseNotifyTrainingSupport.setDescription("""\
 The terse conformance statement of ALL notification training filters supported
by this management agent implementation (ie, version) on this host system,
specified in a bit-mask. Usage: Individual trap definitions MAY further
constrain which notifications are 'in scope'. Usage: Conforming management
agents SHALL accurately report their support for notification training filters.
""")


class _XcmGenBaseSystem1284DeviceId_Type(DisplayString):
    """Custom type xcmGenBaseSystem1284DeviceId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenBaseSystem1284DeviceId_Type.__name__ = "DisplayString"
_XcmGenBaseSystem1284DeviceId_Object = MibTableColumn
xcmGenBaseSystem1284DeviceId = _XcmGenBaseSystem1284DeviceId_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 20),
    _XcmGenBaseSystem1284DeviceId_Type()
)
xcmGenBaseSystem1284DeviceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenBaseSystem1284DeviceId.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSystem1284DeviceId.setDescription("""\
 The value of this variable MUST exactly match the IEEE 1284-2000 Device ID
string, except the length field MUST NOT be specified. The value is assigned by
the Printer vendor and MUST NOT be localized by the agent. The IEEE 1284-2000
Device ID is a length field followed by a case-sensitive string of ASCII
characters defining peripheral characteristics and/or capabilities. For the
purposes of this specification, the length bytes MUST NOT be included. The
Device ID sequence is composed of a series of keys and values of the form: key:
value {,value} repeated for each key As indicated, each key will have one
value, and MAY have more than one value. The minimum necessary keys (case-
sensitive) are MANUFACTURER, COMMAND SET, and MODEL. (These keys MAY be
abbreviated as MFG, CMD, and MDL respectively.) Each implementation MUST supply
these three keys and possibly additional ones as well. Each key (and each
value) is a string of characters. Any characters except colon (:), comma (,),
and semi-colon (;) MAY be included as part of the key (or value) string. Any
leading or trailing white space in the string is ignored by the parsing program
(but is still counted as part of the overall length of the sequence). An
example ID String, showing optional comment and active command set keys and
their associated values (the text is actually all on one line): MFG:Xerox;
CMD:PCL,POSTSCRIPT,PJL; MDL:WorkCentre Pro 32C; CLS:PRINTER; DES: Xerox
WorkCentre Pro 32C
""")


class _XcmGenBaseSNMPWarningTrapSupport_Type(TruthValue):
    """Custom type xcmGenBaseSNMPWarningTrapSupport based on TruthValue"""


_XcmGenBaseSNMPWarningTrapSupport_Object = MibTableColumn
xcmGenBaseSNMPWarningTrapSupport = _XcmGenBaseSNMPWarningTrapSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 1, 2, 1, 21),
    _XcmGenBaseSNMPWarningTrapSupport_Type()
)
xcmGenBaseSNMPWarningTrapSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPWarningTrapSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseSNMPWarningTrapSupport.setDescription("""\
 This object SHALL be 'true' if this management agent supports sending SNMP
warning traps. This object SHALL be 'false'if this management agent does NOT
support sending SNMP warning traps. This does not change the behavior of
support for sending 'Error Cleared' traps such sending a trap when an
alertRemovalOfBinaryChangeEntry is added to the Alert Table.
""")
_XcmGeneralMIBConformance_ObjectIdentity = ObjectIdentity
xcmGeneralMIBConformance = _XcmGeneralMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2)
)
_XcmGeneralMIBGroups_ObjectIdentity = ObjectIdentity
xcmGeneralMIBGroups = _XcmGeneralMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2)
)
_XcmGenCurrentLocalization_ObjectIdentity = ObjectIdentity
xcmGenCurrentLocalization = _XcmGenCurrentLocalization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 3)
)
_XcmGenCurrentLocalizationTable_Object = MibTable
xcmGenCurrentLocalizationTable = _XcmGenCurrentLocalizationTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 3, 1)
)
if mibBuilder.loadTexts:
    xcmGenCurrentLocalizationTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCurrentLocalizationTable.setDescription("""\
 A table of general localization information per device. It is put in a table
so it can be per device using the hrDeviceIndex.
""")
_XcmGenCurrentLocalizationEntry_Object = MibTableRow
xcmGenCurrentLocalizationEntry = _XcmGenCurrentLocalizationEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 3, 1, 1)
)
xcmGenCurrentLocalizationEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmGenCurrentLocalizationEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCurrentLocalizationEntry.setDescription("""\
 Contains the scalar objects that we want to be per device.
""")
_XcmGenCurrentLocalizationIndex_Type = Ordinal16
_XcmGenCurrentLocalizationIndex_Object = MibTableColumn
xcmGenCurrentLocalizationIndex = _XcmGenCurrentLocalizationIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 3, 1, 1, 1),
    _XcmGenCurrentLocalizationIndex_Type()
)
xcmGenCurrentLocalizationIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenCurrentLocalizationIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCurrentLocalizationIndex.setDescription("""\
 The value of the 'xcmGenLocalizationIndex' corresponding to the current
language, country, and character set which SHALL be used for all objects of
type 'InternationalDisplayString' in all legacy MIBs. Note the Printer MIB has
a similar mechanism which controls only objects (of type OCTET STRING) which
are in the Printer MIB.
""")
_XcmGenCurrLocalizationRowStatus_Type = RowStatus
_XcmGenCurrLocalizationRowStatus_Object = MibTableColumn
xcmGenCurrLocalizationRowStatus = _XcmGenCurrLocalizationRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 3, 1, 1, 2),
    _XcmGenCurrLocalizationRowStatus_Type()
)
xcmGenCurrLocalizationRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenCurrLocalizationRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCurrLocalizationRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenCurrLocalizationRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenCurrentLocalizationTable'. Usage: Conforming implementations which
support static rows SHALL support 'active' and 'notInService' writes to this
'xcmGenCurrLocalizationRowStatus' row status object; and SHALL clear the
'xcmGenCurrentLocalizationGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations which support dynamic rows
SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenCurrLocalizationRowStatus' row status object; and SHALL set the
'xcmGenCurrentLocalizationGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations NEED NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: Conforming implementations MAY support a single, static
conceptual row, but SHALL allocate that row with an 'hrDeviceIndex' value of
one ('1'). Usage: This row status SHALL be set, to 'active(1)' (for static
rows) or 'createAndGo(4)' (for dynamic rows), in the same PDU which sets the
current locale in 'xcmGenCurrentLocalizationIndex' (thus activating/allocating
this conceptual row). Usage: To explicitly release this conceptual row, a
management station SHALL set 'xcmGenCurrLocalizationRowStatus' to
'notInService(2)' (for static rows) or 'destroy(6)' (for dynamic rows). Usage:
See section 3.4 'Secure Modes of Operation' and section 3.5 'Secure SNMP
Get/Set Requests' in XCMI Security TC, for details of secure modes of access to
this row status object.
""")
_XcmGenLocalization_ObjectIdentity = ObjectIdentity
xcmGenLocalization = _XcmGenLocalization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4)
)
_XcmGenLocalizationTable_Object = MibTable
xcmGenLocalizationTable = _XcmGenLocalizationTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1)
)
if mibBuilder.loadTexts:
    xcmGenLocalizationTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationTable.setDescription("""\
 The available localizations in this device.
""")
_XcmGenLocalizationEntry_Object = MibTableRow
xcmGenLocalizationEntry = _XcmGenLocalizationEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1, 1)
)
xcmGenLocalizationEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmGenLocalizationIndex"),
)
if mibBuilder.loadTexts:
    xcmGenLocalizationEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationEntry.setDescription("""\
 An entry exists in this table for each Localization, i.e. for each combination
of Language, Country (or Territory) and Coded Character Set, that is supported
in some objects of type 'InternationalDisplayString',
'XcmFixedLocaleDisplayString', 'XcmFixedLocaleUtf8String', or
'XcmNamedLocaleUtf8String' for each device on this managed system.
""")
_XcmGenLocalizationIndex_Type = Ordinal16
_XcmGenLocalizationIndex_Object = MibTableColumn
xcmGenLocalizationIndex = _XcmGenLocalizationIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1, 1, 1),
    _XcmGenLocalizationIndex_Type()
)
xcmGenLocalizationIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenLocalizationIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationIndex.setDescription("""\
 A unique value used by the device to identify this localization entry.
""")
_XcmGenLocalizationRowStatus_Type = RowStatus
_XcmGenLocalizationRowStatus_Object = MibTableColumn
xcmGenLocalizationRowStatus = _XcmGenLocalizationRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1, 1, 2),
    _XcmGenLocalizationRowStatus_Type()
)
xcmGenLocalizationRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLocalizationRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenLocalizationRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenLocalizationTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmGenLocalizationRowStatus' row status object; and SHALL clear the
'xcmGenLocalizationGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations which support dynamic rows
SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenLocalizationRowStatus' row status object; and SHALL set the
'xcmGenLocalizationGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: See section 3.4 'Secure Modes of Operation' and
section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of
secure modes of access to this row status object.
""")


class _XcmGenLocalizationASCIIName_Type(DisplayString):
    """Custom type xcmGenLocalizationASCIIName based on DisplayString"""
    defaultHexValue = ""

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenLocalizationASCIIName_Type.__name__ = "DisplayString"
_XcmGenLocalizationASCIIName_Object = MibTableColumn
xcmGenLocalizationASCIIName = _XcmGenLocalizationASCIIName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1, 1, 3),
    _XcmGenLocalizationASCIIName_Type()
)
xcmGenLocalizationASCIIName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLocalizationASCIIName.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationASCIIName.setDescription("""\
 The unlocalized human readable name in NVT ASCII of the localization with the
language, followed by the country (or territory), followed by the character
set. Example: English US ASCII
""")


class _XcmGenLocalizationName_Type(InternationalDisplayString):
    """Custom type xcmGenLocalizationName based on InternationalDisplayString"""
    defaultHexValue = ""

    subtypeSpec = InternationalDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenLocalizationName_Type.__name__ = "InternationalDisplayString"
_XcmGenLocalizationName_Object = MibTableColumn
xcmGenLocalizationName = _XcmGenLocalizationName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1, 1, 4),
    _XcmGenLocalizationName_Type()
)
xcmGenLocalizationName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLocalizationName.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationName.setDescription("""\
 The localized human readable name of the localization with the language,
followed by the country (or territory), followed by the character set. Example:
Japanese Japan Kanji (Represented with Kanji chars.)
""")


class _XcmGenLocalizationLanguage_Type(CodedLanguage):
    """Custom type xcmGenLocalizationLanguage based on CodedLanguage"""
    defaultHexValue = ""


_XcmGenLocalizationLanguage_Object = MibTableColumn
xcmGenLocalizationLanguage = _XcmGenLocalizationLanguage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1, 1, 5),
    _XcmGenLocalizationLanguage_Type()
)
xcmGenLocalizationLanguage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLocalizationLanguage.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationLanguage.setDescription("""\
 A two character language abreviation from ISO 639:1988 - Codes For the
Representation of Names of Languages. Examples EN, GB, CA, FR, DE.
""")


class _XcmGenLocalizationCountry_Type(CodedCountry):
    """Custom type xcmGenLocalizationCountry based on CodedCountry"""
    defaultHexValue = ""


_XcmGenLocalizationCountry_Object = MibTableColumn
xcmGenLocalizationCountry = _XcmGenLocalizationCountry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1, 1, 6),
    _XcmGenLocalizationCountry_Type()
)
xcmGenLocalizationCountry.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLocalizationCountry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationCountry.setDescription("""\
 A two character country or territory abbreviation from ISO 3166:1993 - Codes
for the Representation of Names of Countries. Examples: US, FR, DE, ...
""")


class _XcmGenLocalizationCharSet_Type(IANACharset):
    """Custom type xcmGenLocalizationCharSet based on IANACharset"""


_XcmGenLocalizationCharSet_Object = MibTableColumn
xcmGenLocalizationCharSet = _XcmGenLocalizationCharSet_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 4, 1, 1, 7),
    _XcmGenLocalizationCharSet_Type()
)
xcmGenLocalizationCharSet.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLocalizationCharSet.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationCharSet.setDescription("""\
 The charset used for this localization. The value is the enum for the charset
registered with IANA. See the 'IANACharset' textual-convention in the Printer
MIB (RFC 1759).
""")
_XcmGenCodeIndexedString_ObjectIdentity = ObjectIdentity
xcmGenCodeIndexedString = _XcmGenCodeIndexedString_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 5)
)
_XcmGenCodeIndexedStringTable_Object = MibTable
xcmGenCodeIndexedStringTable = _XcmGenCodeIndexedStringTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 5, 1)
)
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringTable.setDescription("""\
 The current charset-indexed strings for this device.
""")
_XcmGenCodeIndexedStringEntry_Object = MibTableRow
xcmGenCodeIndexedStringEntry = _XcmGenCodeIndexedStringEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 5, 1, 1)
)
xcmGenCodeIndexedStringEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmGenCodeIndexedStringIndex"),
    (0, "XEROX-COMMON-MIB", "xcmGenCodeIndexedStringCharSet"),
)
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringEntry.setDescription("""\
 An entry exists in this table containing a charset-indexed string in a
particular charset. There are separate sets of charset-indexed strings for each
device. If an agent supports multiple charset representations of a charset-
indexed string, including code conversion between, there will be a separate
entry for each such charset representation. Usage:
'xcmGenCodeIndexedStringCharSet' selects which charset representation is to be
returned. The value of 'xcmGenCodeIndexedStringCharSet' is the charset enum
registered with IANA. See the 'IANACharset' textual-convention in the Printer
MIB (RFC 1759). Usage: Conforming management agents SHALL NOT 'reuse' values of
'xcmGenCodeIndexedStringIndex' until its' 32-bit value wraps. This prevents
access to 'xcmGenCodeIndexedStringData' contents via 'stale' pointers
(previously cached from XCMI Job Monitoring MIB or XCMI Resources MIB). Note:
Conforming management stations SHOULD interwork with earlier (pre-XCMI 3.1)
management agents which MAY 'reuse' values of 'xcmGenCodeIndexedStringIndex'.
By first reading the pointer object in XCMI Job Monitoring MIB or XCMI
Resources MIB, the manager will avoid 'stale' pointer processing errors.
""")


class _XcmGenCodeIndexedStringIndex_Type(CodeIndexedStringIndex):
    """Custom type xcmGenCodeIndexedStringIndex based on CodeIndexedStringIndex"""
    subtypeSpec = CodeIndexedStringIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_XcmGenCodeIndexedStringIndex_Type.__name__ = "CodeIndexedStringIndex"
_XcmGenCodeIndexedStringIndex_Object = MibTableColumn
xcmGenCodeIndexedStringIndex = _XcmGenCodeIndexedStringIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 5, 1, 1, 1),
    _XcmGenCodeIndexedStringIndex_Type()
)
xcmGenCodeIndexedStringIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringIndex.setDescription("""\
 A unique value used by the device, along with the following
'xcmGenCodeIndexedStringCharSet', to identify this charset-indexed string
entry. Usage: Conforming management agents SHALL NOT 'reuse' values of
'xcmGenCodeIndexedStringIndex' until its' 32-bit value wraps. This prevents
access to 'xcmGenCodeIndexedStringData' contents via 'stale' pointers
(previously cached from XCMI Job Monitoring MIB or XCMI Resources MIB). Note:
Conforming management stations SHOULD interwork with earlier (pre-XCMI 3.1)
management agents which MAY 'reuse' values of 'xcmGenCodeIndexedStringIndex'.
By first reading the pointer object in XCMI Job Monitoring MIB or XCMI
Resources MIB, the manager will avoid 'stale' pointer processing errors.
""")
_XcmGenCodeIndexedStringCharSet_Type = IANACharset
_XcmGenCodeIndexedStringCharSet_Object = MibTableColumn
xcmGenCodeIndexedStringCharSet = _XcmGenCodeIndexedStringCharSet_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 5, 1, 1, 2),
    _XcmGenCodeIndexedStringCharSet_Type()
)
xcmGenCodeIndexedStringCharSet.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringCharSet.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringCharSet.setDescription("""\
 The charset used for this charset-indexed string entry. Usage: The value is
the enum for the charset registered with IANA. See the 'IANACharset' textual-
convention in the Printer MIB (RFC 1759).
""")
_XcmGenCodeIndexedStringRowStat_Type = RowStatus
_XcmGenCodeIndexedStringRowStat_Object = MibTableColumn
xcmGenCodeIndexedStringRowStat = _XcmGenCodeIndexedStringRowStat_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 5, 1, 1, 3),
    _XcmGenCodeIndexedStringRowStat_Type()
)
xcmGenCodeIndexedStringRowStat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringRowStat.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringRowStat.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringRowStat.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenCodeIndexedStringTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmGenCodeIndexedStringRowStat' row status object; and SHALL clear the
'xcmGenCodeIndexedStringGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations which support dynamic rows
SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenCodeIndexedStringRowStat' row status object; and SHALL set the
'xcmGenCodeIndexedStringGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: See section 3.4 'Secure Modes of Operation' and
section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of
secure modes of access to this row status object.
""")


class _XcmGenCodeIndexedStringData_Type(OctetString):
    """Custom type xcmGenCodeIndexedStringData based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenCodeIndexedStringData_Type.__name__ = "OctetString"
_XcmGenCodeIndexedStringData_Object = MibTableColumn
xcmGenCodeIndexedStringData = _XcmGenCodeIndexedStringData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 5, 1, 1, 4),
    _XcmGenCodeIndexedStringData_Type()
)
xcmGenCodeIndexedStringData.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringData.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringData.setDescription("""\
 This is the actual charset-indexed string data, in the charset identified by
'xcmGenCodeIndexedStringCharSet'.
""")
_XcmGenCodedCharSet_ObjectIdentity = ObjectIdentity
xcmGenCodedCharSet = _XcmGenCodedCharSet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 6)
)
_XcmGenCodedCharSetTable_Object = MibTable
xcmGenCodedCharSetTable = _XcmGenCodedCharSetTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 6, 1)
)
if mibBuilder.loadTexts:
    xcmGenCodedCharSetTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetTable.setDescription("""\
 The supported charsets for this device.
""")
_XcmGenCodedCharSetEntry_Object = MibTableRow
xcmGenCodedCharSetEntry = _XcmGenCodedCharSetEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 6, 1, 1)
)
xcmGenCodedCharSetEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmGenCodedCharSetCharSet"),
)
if mibBuilder.loadTexts:
    xcmGenCodedCharSetEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetEntry.setDescription("""\
 An entry exists in this table for each charset supported in some objects of
'CodeIndexedStringIndex' type for each device.
""")
_XcmGenCodedCharSetCharSet_Type = IANACharset
_XcmGenCodedCharSetCharSet_Object = MibTableColumn
xcmGenCodedCharSetCharSet = _XcmGenCodedCharSetCharSet_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 6, 1, 1, 1),
    _XcmGenCodedCharSetCharSet_Type()
)
xcmGenCodedCharSetCharSet.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetCharSet.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetCharSet.setReference("""\
 See the 'IANACharset' textual-convention in the Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetCharSet.setDescription("""\
 The supported charset enum identifier, used an index for this table. The value
is the enum for the charset registered with IANA.
""")
_XcmGenCodedCharSetRowStatus_Type = RowStatus
_XcmGenCodedCharSetRowStatus_Object = MibTableColumn
xcmGenCodedCharSetRowStatus = _XcmGenCodedCharSetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 6, 1, 1, 2),
    _XcmGenCodedCharSetRowStatus_Type()
)
xcmGenCodedCharSetRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenCodedCharSetTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmGenCodedCharSetRowStatus' row status object; and SHALL clear the
'xcmGenCodedCharSetGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations which support dynamic rows
SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenCodedCharSetRowStatus' row status object; and SHALL set the
'xcmGenCodedCharSetGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations NEED NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmGenCodedCharSetASCIIName_Type(DisplayString):
    """Custom type xcmGenCodedCharSetASCIIName based on DisplayString"""
    defaultHexValue = ""

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenCodedCharSetASCIIName_Type.__name__ = "DisplayString"
_XcmGenCodedCharSetASCIIName_Object = MibTableColumn
xcmGenCodedCharSetASCIIName = _XcmGenCodedCharSetASCIIName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 6, 1, 1, 3),
    _XcmGenCodedCharSetASCIIName_Type()
)
xcmGenCodedCharSetASCIIName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetASCIIName.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetASCIIName.setDescription("""\
 The unlocalized human readable name in ASCII of the charset. Example: 'ASCII'
""")
_XcmGenFixedLocalization_ObjectIdentity = ObjectIdentity
xcmGenFixedLocalization = _XcmGenFixedLocalization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 7)
)
_XcmGenFixedLocalizationTable_Object = MibTable
xcmGenFixedLocalizationTable = _XcmGenFixedLocalizationTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 7, 1)
)
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationTable.setReference("""\
 See: 'XcmFixedLocale[Display|Utf8]String' in the XCMI General TC.
""")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationTable.setDescription("""\
 A table of fixed localization information per device. It is put in a table so
it can be per device using the hrDeviceIndex.
""")
_XcmGenFixedLocalizationEntry_Object = MibTableRow
xcmGenFixedLocalizationEntry = _XcmGenFixedLocalizationEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 7, 1, 1)
)
xcmGenFixedLocalizationEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationEntry.setReference("""\
 See: 'XcmFixedLocale[Display|Utf8]String' in the XCMI General TC.
""")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationEntry.setDescription("""\
 An entry of fixed localization information per device.
""")
_XcmGenFixedLocalizationIndex_Type = Ordinal16
_XcmGenFixedLocalizationIndex_Object = MibTableColumn
xcmGenFixedLocalizationIndex = _XcmGenFixedLocalizationIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 7, 1, 1, 1),
    _XcmGenFixedLocalizationIndex_Type()
)
xcmGenFixedLocalizationIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationIndex.setReference("""\
 See: 'XcmFixedLocale[Display|Utf8]String' in the XCMI General TC. See: 'UTF-8,
a transformation of ISO 10646' (RFC 2279) and 'IETF Policy on Character Sets
and Languages' (RFC 2277).
""")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationIndex.setDescription("""\
 The value of the 'xcmGenLocalizationIndex' corresponding to the current
language, country, and character set which SHALL be used for all objects of
type 'XcmFixedLocaleDisplayString' in all current and future MIBs. Also, the
value of the 'xcmGenLocalizationIndex' corresponding to the language and
country (but FIXED UTF-8) which SHALL be used for all objects of type
'XcmFixedLocaleUtf8String' in all current and future MIBs.
""")
_XcmGenFixedLocalizationRowStat_Type = RowStatus
_XcmGenFixedLocalizationRowStat_Object = MibTableColumn
xcmGenFixedLocalizationRowStat = _XcmGenFixedLocalizationRowStat_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 7, 1, 1, 2),
    _XcmGenFixedLocalizationRowStat_Type()
)
xcmGenFixedLocalizationRowStat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationRowStat.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationRowStat.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationRowStat.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenFixedLocalizationTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmGenFixedLocalizationRowStat' row status object; and SHALL clear the
'xcmGenFixedLocalizationGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations which support dynamic rows
SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenFixedLocalizationRowStat' row status object; and SHALL set the
'xcmGenFixedLocalizationGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations NEED NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: Conforming implementations MAY support a single, static
conceptual row, but SHALL allocate that row with an 'hrDeviceIndex' value of
one ('1'). Usage: This row status SHALL be set, to 'active(1)' (for static
rows) or 'createAndGo(4)' (for dynamic rows), in the same PDU which sets the
fixed locale in 'xcmGenFixedLocalizationIndex' (thus activating/allocating this
conceptual row). Usage: To explicitly release this conceptual row, a management
station SHALL set 'xcmGenFixedLocalizationRowStat' to 'notInService(2)' (for
static rows) or 'destroy(6)' (for dynamic rows). Usage: See section 3.4 'Secure
Modes of Operation' and section 3.5 'Secure SNMP Get/Set Requests' in XCMI
Security TC, for details of secure modes of access to this row status object.
""")
_XcmGenLock_ObjectIdentity = ObjectIdentity
xcmGenLock = _XcmGenLock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8)
)
_XcmGenLockSimple_ObjectIdentity = ObjectIdentity
xcmGenLockSimple = _XcmGenLockSimple_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 1)
)
if mibBuilder.loadTexts:
    xcmGenLockSimple.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockSimple.setDescription("""\
 This subtree is current. Subordinate objects are leaf objects.
""")
_XcmGenLockSupportMaxTimer_Type = Cardinal32
_XcmGenLockSupportMaxTimer_Object = MibScalar
xcmGenLockSupportMaxTimer = _XcmGenLockSupportMaxTimer_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 1, 1),
    _XcmGenLockSupportMaxTimer_Type()
)
xcmGenLockSupportMaxTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenLockSupportMaxTimer.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockSupportMaxTimer.setUnits("seconds")
if mibBuilder.loadTexts:
    xcmGenLockSupportMaxTimer.setReference("""\
 See: 'xcmGenLockCurrentMaxTimer' and 'xcmGenLockOwnerTimer'
""")
if mibBuilder.loadTexts:
    xcmGenLockSupportMaxTimer.setDescription("""\
 The advisory lock supported max owner timer (in seconds) for use for ANY
advisory lock in the 'xcmGenLockTable'. Usage: The value zero ('0') represents
'no limit'. Usage: This supported max timer represents an XCMI enhancement to
the traditional advisory lock mechanism used in existing IETF MIB modules (eg,
RFC 1573). It provides reliable information to a management station contending
for advisory locks, about the MAXIMUM time supported (ie, permitted) for ANY
advisory lock by the management agent on this host system.
""")
_XcmGenLockCurrentMaxTimer_Type = Cardinal32
_XcmGenLockCurrentMaxTimer_Object = MibScalar
xcmGenLockCurrentMaxTimer = _XcmGenLockCurrentMaxTimer_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 1, 2),
    _XcmGenLockCurrentMaxTimer_Type()
)
xcmGenLockCurrentMaxTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenLockCurrentMaxTimer.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockCurrentMaxTimer.setUnits("seconds")
if mibBuilder.loadTexts:
    xcmGenLockCurrentMaxTimer.setReference("""\
 See: 'xcmGenLockSupportMaxTimer' and 'xcmGenLockOwnerTimer'
""")
if mibBuilder.loadTexts:
    xcmGenLockCurrentMaxTimer.setDescription("""\
 The advisory lock current max owner timer (in seconds) in use for ANY advisory
lock in the 'xcmGenLockTable'. Usage: This current max timer represents an XCMI
enhancement to the traditional advisory lock mechanism used in existing IETF
MIB modules (eg, RFC 1573). It provides reliable information to a management
station contending for advisory locks, about the current MAXIMUM time until
expiration for ALL advisory locks for the management agent on this host system.
Note: To acquire an advisory lock on an ENTIRE host system, a conforming
management station (or management agent) SHALL examine
'xcmGenLockCurrentMaxTimer', add an appropriate delta for eventual processing,
and lock the 'xcmGenLockTable' itself. When 'xcmGenLockCurrentLockCount'
subsequently becomes one (1), the requesting management station (or management
agent) has acquired a lock on the ENTIRE host system (since no OTHER entity MAY
acquire any further lock, because 'xcmGenLockTable' has become 'read-only' to
all other entities), and MAY proceed accordingly.
""")
_XcmGenLockCurrentLockCount_Type = Cardinal32
_XcmGenLockCurrentLockCount_Object = MibScalar
xcmGenLockCurrentLockCount = _XcmGenLockCurrentLockCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 1, 3),
    _XcmGenLockCurrentLockCount_Type()
)
xcmGenLockCurrentLockCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenLockCurrentLockCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockCurrentLockCount.setReference("""\
 See: 'xcmGenLockHighestLockIndex'
""")
if mibBuilder.loadTexts:
    xcmGenLockCurrentLockCount.setDescription("""\
 The count of entries (rows) which are currently in the 'active' state in
'xcmGenLockTable'. Usage: This current lock count represents an XCMI
enhancement to the traditional advisory lock mechanism used in existing IETF
MIB modules (eg, RFC 1573).
""")
_XcmGenLockHighestLockIndex_Type = Cardinal32
_XcmGenLockHighestLockIndex_Object = MibScalar
xcmGenLockHighestLockIndex = _XcmGenLockHighestLockIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 1, 4),
    _XcmGenLockHighestLockIndex_Type()
)
xcmGenLockHighestLockIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenLockHighestLockIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockHighestLockIndex.setReference("""\
 See: 'xcmGenLockCurrentLockCount'
""")
if mibBuilder.loadTexts:
    xcmGenLockHighestLockIndex.setDescription("""\
 The highest advisory lock index which has been active in the
'xcmGenLockTable'. Usage: This highest lock index represents an XCMI
enhancement to the traditional advisory lock mechanism used in existing IETF
MIB modules (eg, RFC 1573).
""")
_XcmGenLockSupportMaxCount_Type = Cardinal32
_XcmGenLockSupportMaxCount_Object = MibScalar
xcmGenLockSupportMaxCount = _XcmGenLockSupportMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 1, 5),
    _XcmGenLockSupportMaxCount_Type()
)
xcmGenLockSupportMaxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenLockSupportMaxCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockSupportMaxCount.setReference("""\
 See: 'xcmGenLockCurrentLockCount'
""")
if mibBuilder.loadTexts:
    xcmGenLockSupportMaxCount.setDescription("""\
 The maximum number of simultaneous entries (rows) supported for the
'xcmGenLockTable'. Usage: The value zero ('0') represents 'no limit'.
""")
_XcmGenLockTable_Object = MibTable
xcmGenLockTable = _XcmGenLockTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 2)
)
if mibBuilder.loadTexts:
    xcmGenLockTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockTable.setReference("""\
 See: 'ifTestOwner' and the 'OwnerString' textual convention in Evolution of
the Interfaces Group of MIB-II (RFC 1573).
""")
if mibBuilder.loadTexts:
    xcmGenLockTable.setDescription("""\
 A table containing 'advisory contention lock' objects for various subtrees of
MIB objects from the complete set of IETF and XCMI MIB modules implemented by
this host system. Note: To acquire an advisory lock on an ENTIRE host system, a
conforming management station (or management agent) SHALL examine
'xcmGenLockCurrentMaxTimer', add an appropriate delta for eventual processing,
and lock the 'xcmGenLockTable' itself. When 'xcmGenLockCurrentLockCount'
subsequently becomes one (1), the requesting management station (or management
agent) has acquired a lock on the ENTIRE host system (since no OTHER entity MAY
acquire any further lock, because 'xcmGenLockTable' has become 'read-only' to
all other entities), and MAY proceed accordingly.
""")
_XcmGenLockEntry_Object = MibTableRow
xcmGenLockEntry = _XcmGenLockEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 2, 1)
)
xcmGenLockEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenLockIndex"),
)
if mibBuilder.loadTexts:
    xcmGenLockEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockEntry.setDescription("""\
 An entry containing 'advisory contention lock' objects for one specific
subtree of MIB objects from the complete set of IETF and XCMI MIB modules
implemented by this host system.
""")
_XcmGenLockIndex_Type = Ordinal32
_XcmGenLockIndex_Object = MibTableColumn
xcmGenLockIndex = _XcmGenLockIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 2, 1, 1),
    _XcmGenLockIndex_Type()
)
xcmGenLockIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenLockIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockIndex.setReference("""\
 See: 'XcmGenLockIndex' textual convention
""")
if mibBuilder.loadTexts:
    xcmGenLockIndex.setDescription("""\
 A unique value used by this host system to identify this conceptual row in the
'xcmGenLockTable' - each conceptual row in the 'xcmGenLockTable' represents an
'advisory contention lock' on a specific subtree of MIB objects from the
complete set of IETF and XCMI MIB modules implemented by this host system.
""")
_XcmGenLockRowStatus_Type = RowStatus
_XcmGenLockRowStatus_Object = MibTableColumn
xcmGenLockRowStatus = _XcmGenLockRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 2, 1, 2),
    _XcmGenLockRowStatus_Type()
)
xcmGenLockRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLockRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See:
'xcmGenLockSupportMaxCount' (limit object). See: 'RowStatus' in IETF SNMPv2 TC
(RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX MIB and
'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenLockRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenLockTable'. Usage: Conforming implementations which support static rows
SHALL support 'active' and 'notInService' writes to this 'xcmGenLockRowStatus'
row status object; and SHALL clear the 'xcmGenLockGroup' bit in
'xcmGenBaseGroupCreateSupport' in the 'xcmGenBaseTable'. Usage: Conforming
implementations which support dynamic rows SHALL support 'createAndGo' and
'destroy' writes to this 'xcmGenLockRowStatus' row status object; and SHALL set
the 'xcmGenLockGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations NEED NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: Conforming implementations MAY support a single, static
conceptual row, but SHALL allocate that row with an 'xcmGenLockIndex' value of
one ('1'). Usage: Conforming management stations, when they first create or
activate rows in this table, SHALL set 'xcmGenLockRowStatus' to 'active(1)'
(for static rows) or 'createAndGo(4)' (for dynamic rows),
'xcmGenLockOwnerString' (if an owner string is available),
'xcmGenLockOwnerSubtree' (if not 'zeroDotZero'), and 'xcmGenLockOwnerTimer' (to
a suitable value) SIMULTANEOUSLY (in the same SNMP Set-Request PDU). Usage:
Conforming management agents SHALL NOT accept sets to 'xcmGenLockOwnerString',
or 'xcmGenLockOwnerSubtree' AFTER row creation (these objects are 'write-
once'). Usage: To explicitly release this advisory lock, the current lock owner
(management station or management agent) SHALL set 'xcmGenLockRowStatus' in
this row to 'notInService(2)' (for static rows) or 'destroy(6)' (for dynamic
rows). Usage: See section 3.4 'Secure Modes of Operation' and section 3.5
'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure modes
of access to this row status object.
""")


class _XcmGenLockOwnerString_Type(OctetString):
    """Custom type xcmGenLockOwnerString based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenLockOwnerString_Type.__name__ = "OctetString"
_XcmGenLockOwnerString_Object = MibTableColumn
xcmGenLockOwnerString = _XcmGenLockOwnerString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 2, 1, 3),
    _XcmGenLockOwnerString_Type()
)
xcmGenLockOwnerString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLockOwnerString.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockOwnerString.setReference("""\
 See: 'xcmGenLockRowStatus', 'xcmGenLockOwnerSubtree', and
'xcmGenLockOwnerTimer'. See: 'ifTestOwner' and the 'OwnerString' textual
convention in Evolution of the Interfaces Group of MIB-II (RFC 1573).
""")
if mibBuilder.loadTexts:
    xcmGenLockOwnerString.setDescription("""\
 The advisory lock owner string corresponding to the current 'owner' of this
advisory lock. Usage: Conforming management stations, when they first create or
activate rows in this table, SHALL set 'xcmGenLockRowStatus' to 'active(1)'
(for static rows) or 'createAndGo(4)' (for dynamic rows),
'xcmGenLockOwnerString' (if an owner string is available),
'xcmGenLockOwnerSubtree' (if not 'zeroDotZero'), and 'xcmGenLockOwnerTimer' (to
a suitable value) SIMULTANEOUSLY (in the same SNMP Set-Request PDU). Usage:
Conforming management agents SHALL NOT accept sets to 'xcmGenLockOwnerString',
or 'xcmGenLockOwnerSubtree' AFTER row creation (these objects are 'write-
once'). Usage: This owner string SHALL contain one or more of the following: a)
Textual form of the management station's transport address; b) Management
station name (eg, domain name); and/or c) Network management person's name,
location, or phone. In the instance that the management agent itself is the
'owner', this object SHALL be set to a string beginning with 'agent' (in
English). Usage: This object is of type 'XcmFixedLocaleDisplayString'.
""")


class _XcmGenLockOwnerSubtree_Type(ObjectIdentifier):
    """Custom type xcmGenLockOwnerSubtree based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmGenLockOwnerSubtree_Object = MibTableColumn
xcmGenLockOwnerSubtree = _XcmGenLockOwnerSubtree_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 2, 1, 4),
    _XcmGenLockOwnerSubtree_Type()
)
xcmGenLockOwnerSubtree.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLockOwnerSubtree.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockOwnerSubtree.setReference("""\
 See: 'xcmGenLockRowStatus', 'xcmGenLockOwnerString', and
'xcmGenLockOwnerTimer'.
""")
if mibBuilder.loadTexts:
    xcmGenLockOwnerSubtree.setDescription("""\
 The advisory lock owner subtree (ie, scope) for the current 'owner' of this
advisory lock. Usage: Conforming management stations, when they first create or
activate rows in this table, SHALL set 'xcmGenLockRowStatus' to 'active(1)'
(for static rows) or 'createAndGo(4)' (for dynamic rows),
'xcmGenLockOwnerString' (if an owner string is available),
'xcmGenLockOwnerSubtree' (if not 'zeroDotZero'), and 'xcmGenLockOwnerTimer' (to
a suitable value) SIMULTANEOUSLY (in the same SNMP Set-Request PDU). Usage:
Conforming management agents SHALL NOT accept sets to 'xcmGenLockOwnerString',
or 'xcmGenLockOwnerSubtree' AFTER row creation (these objects are 'write-
once'). Usage: This owner subtree represents an XCMI enhancement to the
traditional advisory lock mechanism used in existing IETF MIB modules (eg, RFC
1573).
""")
_XcmGenLockOwnerTimer_Type = Cardinal32
_XcmGenLockOwnerTimer_Object = MibTableColumn
xcmGenLockOwnerTimer = _XcmGenLockOwnerTimer_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 8, 2, 1, 5),
    _XcmGenLockOwnerTimer_Type()
)
xcmGenLockOwnerTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenLockOwnerTimer.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockOwnerTimer.setUnits("seconds")
if mibBuilder.loadTexts:
    xcmGenLockOwnerTimer.setReference("""\
 See: 'xcmGenLockRowStatus', 'xcmGenLockOwnerSubtree', and
'xcmGenLockOwnerSubtree'.
""")
if mibBuilder.loadTexts:
    xcmGenLockOwnerTimer.setDescription("""\
 The advisory lock owner lock time remaining for the current 'owner' of this
advisory lock (in seconds). Usage: A conforming management agent MAY choose to
reduce the 'credit' granted as a result of a set to this owner lock timer, at
its sole discretion (see 'xcmGenLockSupportMaxTimer' object). Usage: Conforming
management stations, when they first create or activate rows in this table,
SHALL set 'xcmGenLockRowStatus' to 'active(1)' (for static rows) or
'createAndGo(4)' (for dynamic rows), 'xcmGenLockOwnerString' (if an owner
string is available), 'xcmGenLockOwnerSubtree' (if not 'zeroDotZero'), and
'xcmGenLockOwnerTimer' (to a suitable value) SIMULTANEOUSLY (in the same SNMP
Set-Request PDU). Usage: Conforming management agents SHALL NOT accept sets to
'xcmGenLockOwnerString', or 'xcmGenLockOwnerSubtree' AFTER row creation (these
objects are 'write-once'). Usage: A conforming management station MAY choose to
increase or reduce the value of this owner lock timer, subsequent to initial
row creation, for example to 'refresh' the timer for an additional time
interval. Usage: A conforming management station SHALL NOT reduce the value of
this owner lock timer to zero (as an indirect 'destroy' operation). A
conforming management agent SHALL reject any such set to zero of this owner
lock timer. Usage: This owner lock timer represents an XCMI enhancement to the
traditional advisory lock mechanism used in existing IETF MIB modules (eg, RFC
1573). It provides reliable information to a management station (or management
agent) contending for this advisory lock, about the MAXIMUM time until this
advisory lock lock will be released (either by explicit action of the owner of
the advisory lock or by 'timeout' handling of the management agent itself).
""")
_XcmGenReconf_ObjectIdentity = ObjectIdentity
xcmGenReconf = _XcmGenReconf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9)
)
_XcmGenReconfSimple_ObjectIdentity = ObjectIdentity
xcmGenReconfSimple = _XcmGenReconfSimple_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 1)
)
if mibBuilder.loadTexts:
    xcmGenReconfSimple.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfSimple.setDescription("""\
 This subtree is current. Subordinate objects are leaf objects.
""")
_XcmGenReconfActivations_Type = Counter32
_XcmGenReconfActivations_Object = MibScalar
xcmGenReconfActivations = _XcmGenReconfActivations_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 1, 1),
    _XcmGenReconfActivations_Type()
)
xcmGenReconfActivations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenReconfActivations.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfActivations.setReference("""\
 See: 'xcmGenReconfOptionState'
""")
if mibBuilder.loadTexts:
    xcmGenReconfActivations.setDescription("""\
 The count of SUCCESSFUL 'activations' of reconfiguration for this host system:
invoked by SUCCESSFUL writes to the 'xcmGenReconfOptionState' reconfiguration
invocation object of
'activateFor[ImmediateChange|RebootChange|ImmediateReboot]'; and followed by
SUCCESSFUL completions of 'activation' (without errors reports in
'xcmGenReconfError[Index|Status]'). Usage: Although no default value ('DEFVAL'
clause) is permitted (by IETF SMIv2) for this counter, conforming host systems
SHALL zero this counter upon conceptual row creation.
""")
_XcmGenReconfEntryCount_Type = Counter32
_XcmGenReconfEntryCount_Object = MibScalar
xcmGenReconfEntryCount = _XcmGenReconfEntryCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 1, 2),
    _XcmGenReconfEntryCount_Type()
)
xcmGenReconfEntryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenReconfEntryCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfEntryCount.setDescription("""\
 The count of entries (rows) which are currently in the 'active' state in
'xcmGenReconfTable'.
""")
_XcmGenReconfSupportMaxCount_Type = Cardinal32
_XcmGenReconfSupportMaxCount_Object = MibScalar
xcmGenReconfSupportMaxCount = _XcmGenReconfSupportMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 1, 3),
    _XcmGenReconfSupportMaxCount_Type()
)
xcmGenReconfSupportMaxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenReconfSupportMaxCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfSupportMaxCount.setDescription("""\
 The maximum number of simultaneous entries (rows) supported for the
'xcmGenReconfTable'. Usage: The value zero ('0') represents 'no limit'.
""")
_XcmGenReconfTable_Object = MibTable
xcmGenReconfTable = _XcmGenReconfTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 2)
)
if mibBuilder.loadTexts:
    xcmGenReconfTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfTable.setDescription("""\
 A table containing information on a 'reconfiguration request', for use in
atomic reconfiguration of this host system. Usage: A conforming management
station (or management agent) SHALL lock 'xcmGenReconfTable' and
'xcmGenOptionTable' before attempting to perform any 'reconfiguration request'
on a host system (via the 'xcmGenLockTable').
""")
_XcmGenReconfEntry_Object = MibTableRow
xcmGenReconfEntry = _XcmGenReconfEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 2, 1)
)
xcmGenReconfEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmGenReconfIndex"),
)
if mibBuilder.loadTexts:
    xcmGenReconfEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfEntry.setDescription("""\
 An entry containing information on a 'reconfiguration request', for use in
atomic reconfiguration of this host system. Usage: The ONLY valid row in the
'xcmGenReconfTable' for each supported device ('hrDeviceIndex') SHALL have an
'xcmGenReconfIndex' of one ('1').
""")
_XcmGenReconfIndex_Type = Ordinal32
_XcmGenReconfIndex_Object = MibTableColumn
xcmGenReconfIndex = _XcmGenReconfIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 2, 1, 1),
    _XcmGenReconfIndex_Type()
)
xcmGenReconfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenReconfIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfIndex.setReference("""\
 See: System, Device, and Software Installed/Running groups in the IETF Host
Resources MIB (RFC 2790). See: Device Info, Device Mgmt, and Device Detail
groups in the XCMI Host Resources Ext MIB.
""")
if mibBuilder.loadTexts:
    xcmGenReconfIndex.setDescription("""\
 A unique value used by this host system to identify this conceptual row in the
'xcmGenReconfTable'. Usage: The ONLY valid row in the 'xcmGenReconfTable' for
each supported device ('hrDeviceIndex') SHALL have an 'xcmGenReconfIndex' of
one ('1').
""")
_XcmGenReconfRowStatus_Type = RowStatus
_XcmGenReconfRowStatus_Object = MibTableColumn
xcmGenReconfRowStatus = _XcmGenReconfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 2, 1, 2),
    _XcmGenReconfRowStatus_Type()
)
xcmGenReconfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenReconfRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See:
'xcmGenReconfSupportMaxCount' (limit object). See: 'RowStatus' in IETF SNMPv2
TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX MIB and
'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenReconfRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenReconfTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmGenReconfRowStatus' row status object; and SHALL clear the
'xcmGenReconfGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations which support dynamic rows
SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenReconfRowStatus' row status object; and SHALL set the
'xcmGenReconfGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming management agents SHALL support
'active(1)' and SHOULD support 'notInService(2)' or 'destroy(6)' (to 'release'
the 'reconfiguration request'). Usage: Conforming management agents NEED NOT
support 'createAndGo(4)', and SHOULD NOT support 'notReady(3)' or
'createAndWait(5)'. Usage: See section 3.4 'Secure Modes of Operation' and
section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of
secure modes of access to this row status object.
""")
_XcmGenReconfOptionIndex_Type = Cardinal32
_XcmGenReconfOptionIndex_Object = MibTableColumn
xcmGenReconfOptionIndex = _XcmGenReconfOptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 2, 1, 3),
    _XcmGenReconfOptionIndex_Type()
)
xcmGenReconfOptionIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenReconfOptionIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfOptionIndex.setReference("""\
 See: 'xcmGenReconfActiveOptionIndex'
""")
if mibBuilder.loadTexts:
    xcmGenReconfOptionIndex.setDescription("""\
 The value of 'xcmGenOptionIndex' corresponding to the first pending
reconfiguration option (in 'xcmGenOptionTable'), or zero if there are no
pending reconfiguration options for this host system. Usage: This 'chain'
represents pending reconfiguration options of this host system.
""")


class _XcmGenReconfOptionState_Type(XcmGenReconfOptionState):
    """Custom type xcmGenReconfOptionState based on XcmGenReconfOptionState"""


_XcmGenReconfOptionState_Object = MibTableColumn
xcmGenReconfOptionState = _XcmGenReconfOptionState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 2, 1, 4),
    _XcmGenReconfOptionState_Type()
)
xcmGenReconfOptionState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenReconfOptionState.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfOptionState.setReference("""\
 See: 'xcmGenReconfError[Index|Status]' See: 'XcmGenReconfOptionState', in the
companion XCMI CC TC, for details of 'validation' and 'activation' operations.
See: 'xcmHrDevMgmtCommandData' in XCMI HRX MIB and 'xcmSecUserMgmtData' in XCMI
Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenReconfOptionState.setDescription("""\
 The processing state of ALL pending reconfiguration options of this host
system. A write to this object by an (authorized) management station invokes a
request for validation (or activation) of ALL pending reconfiguration options
of this host system. A read of this object returns 'idle',
'validateInProgress', or 'activateInProgress' to report the processing state of
the last 'validate...' or 'activate...' request. It is mandatory that a
conforming management agent ensure that, at system initialization, this object
SHALL be set to a value of 'idle'. Usage: Conforming management agents SHALL
'reject' any SNMP Set-Request to 'xcmGenReconfOptionState' while another
management operation is already in progress (ie, while
'xcmGenReconfOptionState' is NOT equal to 'idle') with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: See section 3.4 'Secure Modes of
Operation' and section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC,
for details of secure modes of access to this option state object.
""")
_XcmGenReconfErrorIndex_Type = Cardinal32
_XcmGenReconfErrorIndex_Object = MibTableColumn
xcmGenReconfErrorIndex = _XcmGenReconfErrorIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 2, 1, 5),
    _XcmGenReconfErrorIndex_Type()
)
xcmGenReconfErrorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenReconfErrorIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfErrorIndex.setReference("""\
 See: 'xcmGenReconfErrorStatus'
""")
if mibBuilder.loadTexts:
    xcmGenReconfErrorIndex.setDescription("""\
 The value of 'xcmGenOptionIndex' corresponding to the first pending
reconfiguration option (in 'xcmGenOptionTable') which was found to be 'in
error' (during 'validate' or 'activate' reconfiguration processing for this
host system), or zero if no error was found (eg, consistency, range, etc).
""")
_XcmGenReconfErrorStatus_Type = XcmGenSNMPv2ErrorStatus
_XcmGenReconfErrorStatus_Object = MibTableColumn
xcmGenReconfErrorStatus = _XcmGenReconfErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 9, 2, 1, 6),
    _XcmGenReconfErrorStatus_Type()
)
xcmGenReconfErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenReconfErrorStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfErrorStatus.setReference("""\
 See: 'xcmGenReconfErrorIndex'
""")
if mibBuilder.loadTexts:
    xcmGenReconfErrorStatus.setDescription("""\
 The reconfiguration error status corresponding to the first pending
reconfiguration option (in 'xcmGenOptionTable') which was found to be 'in
error' (during 'validate' or 'activate' reconfiguration processing for this
host system), or 'noError' if no error was found (eg, consistency, range, etc).
""")
_XcmGenOption_ObjectIdentity = ObjectIdentity
xcmGenOption = _XcmGenOption_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10)
)
_XcmGenOptionSimple_ObjectIdentity = ObjectIdentity
xcmGenOptionSimple = _XcmGenOptionSimple_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 1)
)
if mibBuilder.loadTexts:
    xcmGenOptionSimple.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionSimple.setDescription("""\
 This subtree is current. Subordinate objects are leaf objects.
""")
_XcmGenOptionOperation_ObjectIdentity = ObjectIdentity
xcmGenOptionOperation = _XcmGenOptionOperation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 1, 1)
)
_XcmGenOptionOperationInsert_ObjectIdentity = ObjectIdentity
xcmGenOptionOperationInsert = _XcmGenOptionOperationInsert_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 1, 1, 1)
)
_XcmGenOptionOperationDelete_ObjectIdentity = ObjectIdentity
xcmGenOptionOperationDelete = _XcmGenOptionOperationDelete_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 1, 1, 2)
)
_XcmGenOptionOperationReplace_ObjectIdentity = ObjectIdentity
xcmGenOptionOperationReplace = _XcmGenOptionOperationReplace_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 1, 1, 3)
)
_XcmGenOptionEntryCount_Type = Counter32
_XcmGenOptionEntryCount_Object = MibScalar
xcmGenOptionEntryCount = _XcmGenOptionEntryCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 1, 2),
    _XcmGenOptionEntryCount_Type()
)
xcmGenOptionEntryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenOptionEntryCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionEntryCount.setDescription("""\
 The count of entries (rows) which are currently in the 'active' state in
'xcmGenOptionTable'.
""")
_XcmGenOptionSupportMaxCount_Type = Cardinal32
_XcmGenOptionSupportMaxCount_Object = MibScalar
xcmGenOptionSupportMaxCount = _XcmGenOptionSupportMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 1, 3),
    _XcmGenOptionSupportMaxCount_Type()
)
xcmGenOptionSupportMaxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenOptionSupportMaxCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionSupportMaxCount.setDescription("""\
 The maximum number of simultaneous entries (rows) supported for the
'xcmGenOptionTable'. Usage: The value zero ('0') represents 'no limit'.
""")
_XcmGenOptionTable_Object = MibTable
xcmGenOptionTable = _XcmGenOptionTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2)
)
if mibBuilder.loadTexts:
    xcmGenOptionTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionTable.setDescription("""\
 A table containing information on reconfiguration options, for use in atomic
reconfiguration of this host system. Usage: A conforming management station (or
management agent) SHALL lock 'xcmGenReconfTable' and 'xcmGenOptionTable' before
attempting to perform any 'reconfiguration request' on a host system (via the
'xcmGenLockTable'). Note: The 'xcmGenOptionTable' is indexed by
'hrDeviceIndex', so the 'hrDeviceIndex' element of a columnar object instance
ID (ie, fully specified object identifier) NEED NOT be specified in
'xcmGenOptionTypeOID'. To reconfigure objects indexed by several devices in
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790), a conforming
management station SHALL use several rows in 'xcmGenReconfTable' and several
trees of objects in 'xcmGenOptionTable' with appropriate 'hrDeviceIndex'
values. To reconfigure objects which are actually NOT indexed by
'hrDeviceIndex', it is RECOMMENDED that rows be used in 'xcmGenOptionTable'
which are indexed by 'hrDeviceIndex' for an 'hrDeviceType' of
'hrDeviceUnknown'.
""")
_XcmGenOptionEntry_Object = MibTableRow
xcmGenOptionEntry = _XcmGenOptionEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1)
)
xcmGenOptionEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmGenOptionIndex"),
)
if mibBuilder.loadTexts:
    xcmGenOptionEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionEntry.setDescription("""\
 An entry containing information on a reconfiguration option, for use in atomic
reconfiguration of this host system.
""")
_XcmGenOptionIndex_Type = Ordinal32
_XcmGenOptionIndex_Object = MibTableColumn
xcmGenOptionIndex = _XcmGenOptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 1),
    _XcmGenOptionIndex_Type()
)
xcmGenOptionIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenOptionIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionIndex.setDescription("""\
 A unique value used by this host system to identify this conceptual row in the
'xcmGenOptionTable'.
""")
_XcmGenOptionRowStatus_Type = RowStatus
_XcmGenOptionRowStatus_Object = MibTableColumn
xcmGenOptionRowStatus = _XcmGenOptionRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 2),
    _XcmGenOptionRowStatus_Type()
)
xcmGenOptionRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See:
'xcmGenOptionSupportMaxCount' (limit object). See: 'RowStatus' in IETF SNMPv2
TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX MIB and
'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenOptionRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenOptionTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmGenOptionRowStatus' row status object; and SHALL clear the
'xcmGenOptionGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations which support dynamic rows
SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenOptionRowStatus' row status object; and SHALL set the
'xcmGenOptionGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming management agents SHALL support
'active(1)' and SHOULD support 'notInService(2)' or 'destroy(6)' (to 'release'
the 'reconfiguration option'). Usage: Conforming management agents NEED NOT
support 'createAndGo(4)', and SHOULD NOT support 'notReady(3)' or
'createAndWait(5)'. Usage: See section 3.4 'Secure Modes of Operation' and
section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of
secure modes of access to this row status object.
""")


class _XcmGenOptionTypeOID_Type(ObjectIdentifier):
    """Custom type xcmGenOptionTypeOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmGenOptionTypeOID_Object = MibTableColumn
xcmGenOptionTypeOID = _XcmGenOptionTypeOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 3),
    _XcmGenOptionTypeOID_Type()
)
xcmGenOptionTypeOID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionTypeOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionTypeOID.setDescription("""\
 An unambiguous reconfiguration option type, used by system administrators and
end users to identify this reconfiguration option. Usage: Since this
reconfiguration option type is specified as an object identifier, it MAY be
taken from any IETF, Xerox, third- party, or product-specific MIB, or it MAY
simply be any IETF SMIv2-style 'autonomous type'.
""")


class _XcmGenOptionValueSyntax_Type(XcmGenOptionValueSyntax):
    """Custom type xcmGenOptionValueSyntax based on XcmGenOptionValueSyntax"""


_XcmGenOptionValueSyntax_Object = MibTableColumn
xcmGenOptionValueSyntax = _XcmGenOptionValueSyntax_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 4),
    _XcmGenOptionValueSyntax_Type()
)
xcmGenOptionValueSyntax.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionValueSyntax.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionValueSyntax.setDescription("""\
 A reconfiguration option value syntax, used by system administrators and end
users to specify the correct value syntax for this reconfiguration option.
Usage: This reconfiguration option value syntax is used to select which of the
following three objects SHALL be used to contain the value of this
reconfiguration option.
""")
_XcmGenOptionValueInteger_Type = Integer32
_XcmGenOptionValueInteger_Object = MibTableColumn
xcmGenOptionValueInteger = _XcmGenOptionValueInteger_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 5),
    _XcmGenOptionValueInteger_Type()
)
xcmGenOptionValueInteger.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionValueInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionValueInteger.setReference("""\
 See: 'xcmGenOptionValueSyntax' and 'xcmGenOptionTypeOID'
""")
if mibBuilder.loadTexts:
    xcmGenOptionValueInteger.setDescription("""\
 A reconfiguration option value integer, used by system administrators and end
users to specify the current value for a reconfiguration option with a base
value syntax of 'INTEGER'. Note: This object has the type 'Integer32', rather
than 'INTEGER'. This a work-around to compiler warnings which occur when
'INTEGER' is used without a range specification. And if we had range qualified,
it would have been identical to the SNMP 'Integer32' type. In SNMPv2, only the
'Counter64 is an integer type wider 32 bits, and for backward compatibility we
depricated the use of Counter64.
""")


class _XcmGenOptionValueOID_Type(ObjectIdentifier):
    """Custom type xcmGenOptionValueOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmGenOptionValueOID_Object = MibTableColumn
xcmGenOptionValueOID = _XcmGenOptionValueOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 6),
    _XcmGenOptionValueOID_Type()
)
xcmGenOptionValueOID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionValueOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionValueOID.setReference("""\
 See: 'xcmGenOptionValueSyntax' and 'xcmGenOptionTypeOID'
""")
if mibBuilder.loadTexts:
    xcmGenOptionValueOID.setDescription("""\
 A reconfiguration option value OID (object identifier), used by system
administrators and end users to specify the current value for a reconfiguration
option with a base value syntax of 'OBJECT IDENTIFIER'.
""")


class _XcmGenOptionValueString_Type(OctetString):
    """Custom type xcmGenOptionValueString based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenOptionValueString_Type.__name__ = "OctetString"
_XcmGenOptionValueString_Object = MibTableColumn
xcmGenOptionValueString = _XcmGenOptionValueString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 7),
    _XcmGenOptionValueString_Type()
)
xcmGenOptionValueString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionValueString.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionValueString.setReference("""\
See: 'xcmGenOptionValueSyntax' and 'xcmGenOptionTypeOID' See:
'xcmGenFixedLocalizationIndex' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmGenOptionValueString.setDescription("""\
A reconfiguration option value string, used by system administrators and end
users to specify the current value for a reconfiguration option with a base
value syntax of 'OCTET STRING'. Usage: This object is of type
'XcmFixedLocaleDisplayString' (if 'xcmGenOptionValueLocalization' is zero) or
'XcmNamedLocaleUtf8String' (if 'xcmGenOptionValueLocalization' is non-zero).
""")
_XcmGenOptionValueLocalization_Type = Cardinal32
_XcmGenOptionValueLocalization_Object = MibTableColumn
xcmGenOptionValueLocalization = _XcmGenOptionValueLocalization_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 8),
    _XcmGenOptionValueLocalization_Type()
)
xcmGenOptionValueLocalization.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionValueLocalization.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionValueLocalization.setReference("""\
See: 'xcmGenOptionValueSyntax' and 'xcmGenOptionTypeOID'. See:
'xcmGenFixedLocalizationIndex' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmGenOptionValueLocalization.setDescription("""\
A reconfiguration option value localization, used by system administrators and
end users to specify the ALTERNATE localization for a reconfiguration option
(different from 'xcmGenFixedLocalizationIndex'), so that
'xcmGenOptionValueString' becomes 'XcmNamedLocaleUtf8String'. Usage: For a
reconfiguration option string to which POSIX-style localization (territory,
language, character set) is applicable (non-keyword) this object MAY contain a
suitable index value for 'xcmGenLocalizationIndex' from the XCMI General MIB,
or zero to indicate 'none'.
""")


class _XcmGenOptionValueCodedCharSet_Type(IANACharset):
    """Custom type xcmGenOptionValueCodedCharSet based on IANACharset"""


_XcmGenOptionValueCodedCharSet_Object = MibTableColumn
xcmGenOptionValueCodedCharSet = _XcmGenOptionValueCodedCharSet_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 9),
    _XcmGenOptionValueCodedCharSet_Type()
)
xcmGenOptionValueCodedCharSet.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionValueCodedCharSet.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionValueCodedCharSet.setReference("""\
See: 'xcmGenOptionValueSyntax' and 'xcmGenOptionTypeOID'. See: 'IANACharset' in
IETF Printer MIB (RFC 1759). See: 'xcmGenCodedCharSetTable' in XCMI General
MIB.
""")
if mibBuilder.loadTexts:
    xcmGenOptionValueCodedCharSet.setDescription("""\
A reconfiguration option value character set, used by system administrators and
end users to specify the ALTERNATE character set for a reconfiguration option
(different from 'xcmGenFixedLocalizationIndex'), so that
'xcmGenOptionValueString' is unambiguous. Usage: XCMI conforming management
agents SHALL ONLY allow Sets of this object to 'other' (none) or 'utf-8'
(Unicode/ ISO-10646 in the UTF-8 encoding, a proper superset of US-ASCII), for
consistency with the Xerox Unicode Coherence Standard.
""")
_XcmGenOptionNextIndex_Type = Cardinal32
_XcmGenOptionNextIndex_Object = MibTableColumn
xcmGenOptionNextIndex = _XcmGenOptionNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 10),
    _XcmGenOptionNextIndex_Type()
)
xcmGenOptionNextIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionNextIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionNextIndex.setDescription("""\
 The value of 'xcmGenOptionIndex' corresponding to the next 'chained'
conceptual row in the 'xcmGenOptionTable', or zero if this is the last
associated conceptual row in a particular vertical 'chain' within a given set.
Usage: Generally, reconfiguration options (of similar or unlike type) are
'chained' vertically via '...[Next|Previous]Index'. But, in the case where
particular communications options MUST be 'tightly coupled', they SHOULD be
'shelved' horizontally via '...[Family|Previous]Index' (eg, an IP address and
an IP subnet mask).
""")
_XcmGenOptionPreviousIndex_Type = Cardinal32
_XcmGenOptionPreviousIndex_Object = MibTableColumn
xcmGenOptionPreviousIndex = _XcmGenOptionPreviousIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 11),
    _XcmGenOptionPreviousIndex_Type()
)
xcmGenOptionPreviousIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionPreviousIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionPreviousIndex.setDescription("""\
 The value of 'xcmGenOptionIndex' corresponding to a previous associated
conceptual row in the 'xcmGenOptionTable', or zero if this is the first
associated conceptual row in a given set. Usage: This object provides common
'backward' linkage for BOTH the 'xcmGenOptionNextIndex' and
'xcmGenOptionFamilyIndex' linkage objects. A previous conceptual row MAY
'forward' reference this conceptual row via either '...NextIndex' or
'...FamilyIndex' - ie, a given conceptual row MAY 'forward' reference EXACTLY
zero, one, or two 'later' conceptual rows.
""")
_XcmGenOptionFamilyIndex_Type = Cardinal32
_XcmGenOptionFamilyIndex_Object = MibTableColumn
xcmGenOptionFamilyIndex = _XcmGenOptionFamilyIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 10, 2, 1, 12),
    _XcmGenOptionFamilyIndex_Type()
)
xcmGenOptionFamilyIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenOptionFamilyIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionFamilyIndex.setDescription("""\
 The value of 'xcmGenOptionIndex' corresponding to a next 'family' conceptual
row in the 'xcmGenOptionTable', or zero if this conceptual row has no
associated 'family' members. Usage: Generally, reconfiguration options (of
similar or unlike type) are 'chained' vertically via '...[Next|Previous]Index'.
But, in the case where particular reconfiguration options MUST be 'tightly
coupled', they SHOULD be 'shelved' horizontally via '...FamilyIndex' (eg, an IP
address and an IP subnet mask).
""")
_XcmGenClientData_ObjectIdentity = ObjectIdentity
xcmGenClientData = _XcmGenClientData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11)
)
_XcmGenClientDataSimple_ObjectIdentity = ObjectIdentity
xcmGenClientDataSimple = _XcmGenClientDataSimple_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 1)
)
if mibBuilder.loadTexts:
    xcmGenClientDataSimple.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataSimple.setDescription("""\
 This subtree is current. Subordinate objects are leaf objects.
""")
_XcmGenClientDataEntryCount_Type = Counter32
_XcmGenClientDataEntryCount_Object = MibScalar
xcmGenClientDataEntryCount = _XcmGenClientDataEntryCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 1, 1),
    _XcmGenClientDataEntryCount_Type()
)
xcmGenClientDataEntryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenClientDataEntryCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataEntryCount.setDescription("""\
 The count of entries (rows) which are currently in the 'active' state in
'xcmGenClientDataTable'.
""")
_XcmGenClientDataLastIndex_Type = Cardinal32
_XcmGenClientDataLastIndex_Object = MibScalar
xcmGenClientDataLastIndex = _XcmGenClientDataLastIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 1, 2),
    _XcmGenClientDataLastIndex_Type()
)
xcmGenClientDataLastIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenClientDataLastIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataLastIndex.setDescription("""\
 The last entry index (regardless of its current state) in the
'xcmGenClientDataTable' of this General MIB, on this host system. Usage: This
last entry index explicitly bounds the valid range of 'xcmGenClientDataIndex'.
""")
_XcmGenClientDataSupportMaxCount_Type = Cardinal32
_XcmGenClientDataSupportMaxCount_Object = MibScalar
xcmGenClientDataSupportMaxCount = _XcmGenClientDataSupportMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 1, 3),
    _XcmGenClientDataSupportMaxCount_Type()
)
xcmGenClientDataSupportMaxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenClientDataSupportMaxCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataSupportMaxCount.setDescription("""\
 The maximum number of simultaneous entries (rows) supported for the
'xcmGenClientDataTable'. Usage: The value zero ('0') represents 'no limit'.
""")
_XcmGenClientDataTable_Object = MibTable
xcmGenClientDataTable = _XcmGenClientDataTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2)
)
if mibBuilder.loadTexts:
    xcmGenClientDataTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataTable.setDescription("""\
 A table containing 'client data' objects for use by conforming management
stations/agents, particularly during installation of this host system. Usage:
For managed systems which support static rows (ie, 'read-write'), a management
station (or management agent) SHALL search 'xcmGenClientDataRowStatus', to
determine the appropriate value of 'xcmGenClientDataIndex' to use when
allocating an existing row in the 'xcmGenClientDataTable'. Usage: For managed
systems which support dynamic rows (ie, 'read-create'), a management station
(or management agent) SHALL examine 'xcmGenClientDataLastIndex', to determine
the appropriate value of 'xcmGenClientDataIndex' to use when creating a new row
in the 'xcmGenClientDataTable'. Usage: Throughout this specification, the term
'stable storage' refers to storage which is reliable over long durations
(years) and is NOT destroyed by host system reboot (eg, battery-backed DRAM is
'stable storage' - while simple DRAM is NOT 'stable storage'). Examples of
valid 'stable storage' include: NVRAM, hard disk, EEPROM, etc. Usage:
Conforming implementations SHALL preserve active 'client data' objects across
management agent power cycles, and SHALL implement one of the following two
methods: 1) The agent SHALL store 'client data' objects directly in 'stable
storage'; or 2) The agent SHALL automatically checkpoint all active 'client
data' objects to 'stable storage' with reasonable frequency (either due to a
write to some 'client data' object, or upon expiration of a product-specific
timeout). Usage: Conforming implementations MAY (optionally) support one of the
following two 'checkpoint protocols': 1) A client sends a 'Set' of
'xcmGenClientDataRowStatus' to 'active(1)', to request that a 'checkpoint' be
performed; 2a) An agent which supports 'rapid checkpoint', completes the
checkpoint to 'stable storage', and sends a 'SetResponse' with 'noError(0)';
<or> 2b) An agent which supports 'delayed checkpoint', changes
'xcmGenClientDataRowStatus' to 'notInService(2)', sends a 'SetResponse' with
'noError(0)', completes the checkpoint to 'stable storage', and later changes
'xcmGenClientDataRowStatus' back to 'active(1)'.
""")
_XcmGenClientDataEntry_Object = MibTableRow
xcmGenClientDataEntry = _XcmGenClientDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2, 1)
)
xcmGenClientDataEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenClientDataIndex"),
)
if mibBuilder.loadTexts:
    xcmGenClientDataEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataEntry.setDescription("""\
 An entry containing 'client data' objects for use by conforming management
stations/agents, particularly during installation of this host system.
""")
_XcmGenClientDataIndex_Type = Ordinal32
_XcmGenClientDataIndex_Object = MibTableColumn
xcmGenClientDataIndex = _XcmGenClientDataIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2, 1, 1),
    _XcmGenClientDataIndex_Type()
)
xcmGenClientDataIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenClientDataIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataIndex.setDescription("""\
 A unique value used by this host system to identify this conceptual row in the
'xcmGenClientDataTable'. Usage: Conforming implementations which only support a
single, statically allocated row, SHALL allocate that row with an
'xcmGenClientDataIndex' value of one (1).
""")
_XcmGenClientDataRowStatus_Type = RowStatus
_XcmGenClientDataRowStatus_Object = MibTableColumn
xcmGenClientDataRowStatus = _XcmGenClientDataRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2, 1, 2),
    _XcmGenClientDataRowStatus_Type()
)
xcmGenClientDataRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenClientDataRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See:
'xcmGenClientDataSupportMaxCount' (limit object). See: 'RowStatus' in IETF
SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX MIB
and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenClientDataRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenClientDataTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmGenClientDataRowStatus' row status object; and SHALL clear the
'xcmGenClientDataGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations which support dynamic rows
SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenClientDataRowStatus' row status object; and SHALL set the
'xcmGenClientDataGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming implementations NEED NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: Conforming implementations MAY support a single, static
conceptual row, but SHALL allocate that row with an 'xcmGenClientDataIndex'
value of one ('1'). Usage: Conforming management stations, when they first
create or activate rows in this table, SHALL set 'xcmGenClientDataRowStatus' to
'active(1)' (for static rows) or 'createAndGo(4)' (for dynamic rows),
'xcmGenClientDataRequestID' (to a suitable client global ID),
'xcmGenClientDataProductID' (to a suitable client product ID),
'xcmGenClientDataLength' (to a suitable client data length) SIMULTANEOUSLY (in
the same SNMP Set-Request PDU). Usage: Conforming management agents SHALL NOT
accept sets to 'xcmGenClientDataRequestID', 'xcmGenClientDataProductID', or
'xcmGenClientDataLength' AFTER row creation (these objects are 'write-once').
Usage: To explicitly release this conceptual row, the client data owner SHALL
set 'xcmGenClientDataRowStatus' to 'notInService(2)' (for static rows) or
'destroy(6)' (for dynamic rows). Usage: See section 3.4 'Secure Modes of
Operation' and section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC,
for details of secure modes of access to this row status object.
""")


class _XcmGenClientDataRequestDate_Type(DateAndTime):
    """Custom type xcmGenClientDataRequestDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmGenClientDataRequestDate_Object = MibTableColumn
xcmGenClientDataRequestDate = _XcmGenClientDataRequestDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2, 1, 3),
    _XcmGenClientDataRequestDate_Type()
)
xcmGenClientDataRequestDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenClientDataRequestDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataRequestDate.setReference("""\
 See: 'xcmGenClientDataRowStatus'
""")
if mibBuilder.loadTexts:
    xcmGenClientDataRequestDate.setDescription("""\
 The client data request date which uniquely timestamps the creation of this
conceptual row in the 'xcmGenClientDataTable'. Usage: This request date SHALL
be set (to a suitable value) by conforming management agents during creation of
each conceptual row in the 'xcmGenClientDataTable'. Usage: Conforming
implementations which have a source of time, SHALL set a meaningful value in
this object. ONLY those implementations which do NOT have a source of time,
SHALL return the following DEFVAL.
""")


class _XcmGenClientDataRequestID_Type(XcmGlobalUniqueID):
    """Custom type xcmGenClientDataRequestID based on XcmGlobalUniqueID"""
    defaultHexValue = ""


_XcmGenClientDataRequestID_Object = MibTableColumn
xcmGenClientDataRequestID = _XcmGenClientDataRequestID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2, 1, 4),
    _XcmGenClientDataRequestID_Type()
)
xcmGenClientDataRequestID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenClientDataRequestID.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataRequestID.setReference("""\
 See: 'xcmGenClientDataRowStatus'
""")
if mibBuilder.loadTexts:
    xcmGenClientDataRequestID.setDescription("""\
 The client data owner request ID which uniquely identifies the creation of
this conceptual row in the 'xcmGenClientDataTable'. Usage: Conforming
management stations, when they first create or activate rows in this table,
SHALL set 'xcmGenClientDataRowStatus' to 'active(1)' (for static rows) or
'createAndGo(4)' (for dynamic rows), 'xcmGenClientDataRequestID' (to a suitable
client global ID), 'xcmGenClientDataProductID' (to a suitable client product
ID), 'xcmGenClientDataLength' (to a suitable client data length) SIMULTANEOUSLY
(in the same SNMP Set-Request PDU). Usage: Conforming management agents SHALL
NOT accept sets to 'xcmGenClientDataRequestID', 'xcmGenClientDataProductID', or
'xcmGenClientDataLength' AFTER row creation (these objects are 'write-once').
""")


class _XcmGenClientDataProductID_Type(ProductID):
    """Custom type xcmGenClientDataProductID based on ProductID"""
    defaultValue = "(0, 0)"


_XcmGenClientDataProductID_Object = MibTableColumn
xcmGenClientDataProductID = _XcmGenClientDataProductID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2, 1, 5),
    _XcmGenClientDataProductID_Type()
)
xcmGenClientDataProductID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenClientDataProductID.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataProductID.setReference("""\
 See: 'xcmGenClientDataRowStatus' See: 'ProductID' in IETF Host Resources MIB
(RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmGenClientDataProductID.setDescription("""\
 The client data owner product ID corresponding to the current 'owner' of this
client data. Usage: Conforming management stations, when they first create or
activate rows in this table, SHALL set 'xcmGenClientDataRowStatus' to
'active(1)' (for static rows) or 'createAndGo(4)' (for dynamic rows),
'xcmGenClientDataRequestID' (to a suitable client global ID),
'xcmGenClientDataProductID' (to a suitable client product ID),
'xcmGenClientDataLength' (to a suitable client data length) SIMULTANEOUSLY (in
the same SNMP Set-Request PDU). Usage: Conforming management agents SHALL NOT
accept sets to 'xcmGenClientDataRequestID', 'xcmGenClientDataProductID', or
'xcmGenClientDataLength' AFTER row creation (these objects are 'write-once').
""")
_XcmGenClientDataLength_Type = Cardinal32
_XcmGenClientDataLength_Object = MibTableColumn
xcmGenClientDataLength = _XcmGenClientDataLength_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2, 1, 6),
    _XcmGenClientDataLength_Type()
)
xcmGenClientDataLength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenClientDataLength.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataLength.setReference("""\
 See: 'xcmGenClientDataRowStatus'
""")
if mibBuilder.loadTexts:
    xcmGenClientDataLength.setDescription("""\
 The client data length requested/granted for this conceptual row in the
'xcmGenClientDataTable'. Usage: Conforming implementations NEED NOT support
maximum client data length greater than 1 octet. Usage: Conforming management
stations, when they first create or activate rows in this table, SHALL set
'xcmGenClientDataRowStatus' to 'active(1)' (for static rows) or
'createAndGo(4)' (for dynamic rows), 'xcmGenClientDataRequestID' (to a suitable
client global ID), 'xcmGenClientDataProductID' (to a suitable client product
ID), 'xcmGenClientDataLength' (to a suitable client data length) SIMULTANEOUSLY
(in the same SNMP Set-Request PDU). Usage: Conforming management agents SHALL
NOT accept sets to 'xcmGenClientDataRequestID', 'xcmGenClientDataProductID', or
'xcmGenClientDataLength' AFTER row creation (these objects are 'write-once').
""")


class _XcmGenClientDataString_Type(OctetString):
    """Custom type xcmGenClientDataString based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenClientDataString_Type.__name__ = "OctetString"
_XcmGenClientDataString_Object = MibTableColumn
xcmGenClientDataString = _XcmGenClientDataString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 11, 2, 1, 7),
    _XcmGenClientDataString_Type()
)
xcmGenClientDataString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenClientDataString.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataString.setReference("""\
 See: 'xcmGenClientDataRowStatus'
""")
if mibBuilder.loadTexts:
    xcmGenClientDataString.setDescription("""\
 The client data string currently set into this conceptual row in the
'xcmGenClientDataTable'. Usage: Conforming implementations NEED NOT support
maximum client data length greater than 1 octet. Usage: This data string NEED
NOT be set (to a suitable value) by the client data owner, in the same PDU
which creates each conceptual row in the 'xcmGenClientDataTable'.
""")
_XcmGenTrapClient_ObjectIdentity = ObjectIdentity
xcmGenTrapClient = _XcmGenTrapClient_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13)
)
_XcmGenTrapClientSimple_ObjectIdentity = ObjectIdentity
xcmGenTrapClientSimple = _XcmGenTrapClientSimple_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 1)
)
if mibBuilder.loadTexts:
    xcmGenTrapClientSimple.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientSimple.setDescription("""\
 This subtree is current. Subordinate objects are leaf objects.
""")
_XcmGenTrapClientEntryCount_Type = Counter32
_XcmGenTrapClientEntryCount_Object = MibScalar
xcmGenTrapClientEntryCount = _XcmGenTrapClientEntryCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 1, 1),
    _XcmGenTrapClientEntryCount_Type()
)
xcmGenTrapClientEntryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenTrapClientEntryCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientEntryCount.setDescription("""\
 The count of entries (rows) which are currently in the 'active' state in
'xcmGenTrapClientTable'.
""")
_XcmGenTrapClientSupportMaxCount_Type = Cardinal32
_XcmGenTrapClientSupportMaxCount_Object = MibScalar
xcmGenTrapClientSupportMaxCount = _XcmGenTrapClientSupportMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 1, 2),
    _XcmGenTrapClientSupportMaxCount_Type()
)
xcmGenTrapClientSupportMaxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenTrapClientSupportMaxCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientSupportMaxCount.setDescription("""\
 The maximum number of simultaneous entries (rows) supported for the
'xcmGenTrapClientTable'. Usage: The value zero ('0') represents 'no limit'.
""")
_XcmGenTrapClientTable_Object = MibTable
xcmGenTrapClientTable = _XcmGenTrapClientTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2)
)
if mibBuilder.loadTexts:
    xcmGenTrapClientTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientTable.setReference("""\
 See: Party group in Historic SNMPv2 Party MIB (RFC 1447).
""")
if mibBuilder.loadTexts:
    xcmGenTrapClientTable.setDescription("""\
 A table of SNMP trap clients (management stations or proxies) registered for
trap delivery from this host system. Usage: SNMP version/transport independent
trap registration. Usage: Conforming management stations SHALL create at least
one subordinate row in the 'xcmGenTrapViewTable' for each trap client that they
register in the 'xcmGenTrapClientTable'. Conforming management agents SHOULD
interpret a dangling row in the 'xcmGenTrapClientTable' (no children) as 'NO
traps in view' (existing implementations of both clients and devices are known
to consider dangling rows invalid). To register for all device traps, use a
single view of 'iso(1).org(3).dod(6).internet(1)'. Usage: Conforming management
agents SHALL delete any rows in the 'xcmGenTrapViewTable' which were
subordinate to a deleted row in the 'xcmGenTrapClientTable'.
""")
_XcmGenTrapClientEntry_Object = MibTableRow
xcmGenTrapClientEntry = _XcmGenTrapClientEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2, 1)
)
xcmGenTrapClientEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenTrapClientSNMPDomain"),
    (0, "XEROX-COMMON-MIB", "xcmGenTrapClientSNMPAddress"),
)
if mibBuilder.loadTexts:
    xcmGenTrapClientEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientEntry.setDescription("""\
 An entry for an SNMP trap client (management station or proxy) registered for
trap delivery from this host system.
""")
_XcmGenTrapClientSNMPDomain_Type = XcmGenSNMPDomain
_XcmGenTrapClientSNMPDomain_Object = MibTableColumn
xcmGenTrapClientSNMPDomain = _XcmGenTrapClientSNMPDomain_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2, 1, 1),
    _XcmGenTrapClientSNMPDomain_Type()
)
xcmGenTrapClientSNMPDomain.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPDomain.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPDomain.setReference("""\
 See: 'xcmGenBaseSNMP[Domain|Version]Support'. See: 'XcmGenSNMPDomain' textual
convention in the XCMI General TC. See: 'snmp...Domain' object identifiers in
the IETF SNMPv2 Transport Mappings (RFC 1449/1906).
""")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPDomain.setDescription("""\
 This object is used to specify the transport domain (address and name space)
which SHALL be used by this management agent for SNMP protocol traffic
(transmission of SNMP traps), in the version specified by
'xcmGenTrapClientSNMPVersion', to the trap client (management station or
proxy). This object is also used to allow the 'xcmGenTrapClientTable' to be
used with any URI scheme (e.g., 'mailto:') for notifications, by specifying
'uriNotifyDomain'.
""")


class _XcmGenTrapClientSNMPAddress_Type(OctetString):
    """Custom type xcmGenTrapClientSNMPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenTrapClientSNMPAddress_Type.__name__ = "OctetString"
_XcmGenTrapClientSNMPAddress_Object = MibTableColumn
xcmGenTrapClientSNMPAddress = _XcmGenTrapClientSNMPAddress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2, 1, 2),
    _XcmGenTrapClientSNMPAddress_Type()
)
xcmGenTrapClientSNMPAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPAddress.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPAddress.setReference("""\
 See: 'xcmGenBaseSNMP[Domain|Version]Support'. See: 'SnmpUDPAddress' (IP addr,
UDP port - Internet), 'SNMPOSIAddress' (len, NSAP addr, TSelector - OSI),
'SNMPNBPAddress' (object, type, zone - AppleTalk), and 'SNMPIPXAddress' (net
no, MAC addr, socket - NetWare) textual conventions in the IETF SNMPv2
Transport Mappings (RFC 1449/1906). See: 'XcmSNMPNetbiosAddress' (MAC addr,
port - NetBIOS) textual conventions in the XCMI Comms Config TC. See:
'XcmSnmpIPHostnameAddress' textual convention in the XCMI Comms Config TC.
""")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPAddress.setDescription("""\
 This object is used to specify the transport address (below SNMP) which SHALL
be used by this management agent to deliver SNMP traps to the trap client
(management station or proxy). Usage: This transport address usually consists
of an underlying network layer address with a suffixed transport selector.
Usage: This object is of type 'XcmFixedLocaleDisplayString'.
""")
_XcmGenTrapClientRowStatus_Type = RowStatus
_XcmGenTrapClientRowStatus_Object = MibTableColumn
xcmGenTrapClientRowStatus = _XcmGenTrapClientRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2, 1, 3),
    _XcmGenTrapClientRowStatus_Type()
)
xcmGenTrapClientRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenTrapClientRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See:
'xcmGenTrapClientSupportMaxCount' (limit object). See: 'RowStatus' in IETF
SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX MIB
and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenTrapClientRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenTrapClientTable'. Usage: It is conformant to implement this object as
read-only, however, conforming management agents are STRONGLY RECOMMENDED to
support at least read-write access to this object. Usage: Conforming management
stations, when they first create new rows in this table, SHALL set
'xcmGenTrapClientRowStatus' (to 'createAndGo'),
'xcmGenTrapClientRowPersistence' (if not 'volatile'),
'xcmGenTrapClientSNMPVersion' (if not 'snmpV1Community'), and
'xcmGenTrapClientSNMPCommunity' (if not the current managed system default in
'xcmGenBaseSNMPTrapCommunity') SIMULTANEOUSLY (in the same SNMP Set-Request
PDU). Usage: Conforming management agents SHALL NOT accept sets to
'xcmGenTrapClientRowPersistence', 'xcmGenTrapClientSNMPVersion', or
'xcmGenTrapClientSNMPCommunity' AFTER row creation (these objects are 'write-
once'). Usage: Conforming implementations which support dynamic rows SHALL
support 'createAndGo' and 'destroy' writes to this 'xcmGenTrapClientRowStatus'
row status object; and SHALL set the 'xcmGenTrapClientGroup' bit in
'xcmGenBaseGroupCreateSupport' in the 'xcmGenBaseTable'. Usage: Conforming
management agents SHOULD NOT support 'notInService(2)', 'notReady(3)', or
'createAndWait(5)'. Usage: See section 3.4 'Secure Modes of Operation' and
section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of
secure modes of access to this row status object.
""")
_XcmGenTrapClientIndex_Type = Ordinal32
_XcmGenTrapClientIndex_Object = MibTableColumn
xcmGenTrapClientIndex = _XcmGenTrapClientIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2, 1, 4),
    _XcmGenTrapClientIndex_Type()
)
xcmGenTrapClientIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenTrapClientIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientIndex.setDescription("""\
 A unique value ASSIGNED by this host system to identify this conceptual row in
the 'xcmGenTrapClientTable'. This object is used to specify the unique client
index which was chosen FOR the trap client registered in this conceptual row
(management station or proxy) at row creation and which SHALL be used by the
trap client to create any associated conceptual rows in the
'xcmGenTrapViewTable'. Usage: Conforming management agents NEED NOT preserve
the value of this object across power cycles for 'nonvolatile' rows in the
'xcmGenTrapClientTable', but SHALL preserve the configured associations with
(any) subordinate rows in the 'xcmGenTrapViewTable'.
""")


class _XcmGenTrapClientRowPersistence_Type(XcmGenRowPersistence):
    """Custom type xcmGenTrapClientRowPersistence based on XcmGenRowPersistence"""


_XcmGenTrapClientRowPersistence_Object = MibTableColumn
xcmGenTrapClientRowPersistence = _XcmGenTrapClientRowPersistence_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2, 1, 5),
    _XcmGenTrapClientRowPersistence_Type()
)
xcmGenTrapClientRowPersistence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenTrapClientRowPersistence.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientRowPersistence.setDescription("""\
 This object is used to specify the persistence of this conceptual row in the
'xcmGenTrapClientTable' (and associated conceptual rows in the
'xcmGenTrapViewTable'). Usage: It is conformant to implement this object as
read-only, however, conforming management agents are STRONGLY RECOMMENDED to
support at least read-write access to this object. Usage: Conforming management
stations, when they first create new rows in this table, SHALL set
'xcmGenTrapClientRowStatus' (to 'createAndGo'),
'xcmGenTrapClientRowPersistence' (if not 'volatile'),
'xcmGenTrapClientSNMPVersion' (if not 'snmpV1Community'), and
'xcmGenTrapClientSNMPCommunity' (if not the current managed system default in
'xcmGenBaseSNMPTrapCommunity') SIMULTANEOUSLY (in the same SNMP Set-Request
PDU). Usage: Conforming management agents SHALL NOT accept sets to
'xcmGenTrapClientRowPersistence', 'xcmGenTrapClientSNMPVersion', or
'xcmGenTrapClientSNMPCommunity' AFTER row creation (these objects are 'write-
once'). Usage: Dynamically created rows SHALL be given 'volatile' or
'nonvolatile' persistence. Usage: Conforming management agents SHALL support
'volatile' (lost across power cycles). Usage: Conforming management agents are
STRONGLY RECOMMENDED to support 'nonvolatile' (preserved across power cycles),
but NEED NOT support any other levels of persistence.
""")


class _XcmGenTrapClientSNMPVersion_Type(XcmGenSNMPVersion):
    """Custom type xcmGenTrapClientSNMPVersion based on XcmGenSNMPVersion"""


_XcmGenTrapClientSNMPVersion_Object = MibTableColumn
xcmGenTrapClientSNMPVersion = _XcmGenTrapClientSNMPVersion_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2, 1, 6),
    _XcmGenTrapClientSNMPVersion_Type()
)
xcmGenTrapClientSNMPVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPVersion.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPVersion.setReference("""\
 See: 'xcmGenBaseSNMP[Domain|Version]Support'.
""")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPVersion.setDescription("""\
 This object is used to specify the SNMP version (RFC 1157, RFC 1905, etc)
which SHALL be used by this management agent for SNMP protocol traffic
(transmission of SNMP traps), in the domain specified by
'xcmGenTrapClientSNMPDomain', to the trap client (management station or proxy).
Usage: Conforming management stations, when they first create new rows in this
table, SHALL set 'xcmGenTrapClientRowStatus' (to 'createAndGo'),
'xcmGenTrapClientRowPersistence' (if not 'volatile'),
'xcmGenTrapClientSNMPVersion' (if not 'snmpV1Community'), and
'xcmGenTrapClientSNMPCommunity' (if not the current managed system default in
'xcmGenBaseSNMPTrapCommunity') SIMULTANEOUSLY (in the same SNMP Set-Request
PDU). Usage: Conforming management agents SHALL NOT accept sets to
'xcmGenTrapClientRowPersistence', 'xcmGenTrapClientSNMPVersion', or
'xcmGenTrapClientSNMPCommunity' AFTER row creation (these objects are 'write-
once').
""")


class _XcmGenTrapClientSNMPCommunity_Type(OctetString):
    """Custom type xcmGenTrapClientSNMPCommunity based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_XcmGenTrapClientSNMPCommunity_Type.__name__ = "OctetString"
_XcmGenTrapClientSNMPCommunity_Object = MibTableColumn
xcmGenTrapClientSNMPCommunity = _XcmGenTrapClientSNMPCommunity_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 13, 2, 1, 7),
    _XcmGenTrapClientSNMPCommunity_Type()
)
xcmGenTrapClientSNMPCommunity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPCommunity.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPCommunity.setReference("""\
 See: SNMPv1c (RFC 1157) and SNMPv2c (RFC 1905). See: 'Coexistence between
SNMPv1, SNMPv2, and SNMPv3' RFC 2576, March 2000. See:
'xcmGenBaseSNMPTrapCommunity'.
""")
if mibBuilder.loadTexts:
    xcmGenTrapClientSNMPCommunity.setDescription("""\
 This object is used to specify the 'trap community name' used in all SNMPv1c
and SNMPv2c 'Inform|Trap' PDUs which SHALL be generated by this SNMP management
agent, in the domain specified by 'xcmGenTrapClientSNMPDomain', to the trap
client (management station or proxy). Note: XCMI-defined community name objects
support 64 octets maximum length and configurable charsets, for consistency
with the 'snmpCommunityName' object defined in the SNMP Community MIB defined
in RFC 2576 (March 2000). Note: Products MAY ship with a market-specific
factory default locale with a charset other than 'utf-8', eg, in Japan a
product might factory default to 'shift-jis(17)' or 'iso-2022-jp(39)'. Such
products MUST implement the 'xcmGenFixedLocalizationTable', to prevent
ambiguity about the factory default charset. Usage: For best interworking with
the ('utf-8' charset ONLY) closely related 'snmpCommunitySecurityName' object
in RFC 2576, conforming management stations and management agents SHOULD NOT
configure community names longer than 32 octets. Usage: For best interworking
with third-party applications, conforming management stations and management
agents SHOULD NOT configure empty (zero-length or all spaces) community names.
Usage: Conforming management stations, when they first create new rows in this
table, SHALL set 'xcmGenTrapClientRowStatus' (to 'createAndGo'),
'xcmGenTrapClientRowPersistence' (if not 'volatile'),
'xcmGenTrapClientSNMPVersion' (if not 'snmpV1Community'), and
'xcmGenTrapClientSNMPCommunity' (if not the current managed system default in
'xcmGenBaseSNMPTrapCommunity') SIMULTANEOUSLY (in the same SNMP Set-Request
PDU). Usage: Conforming management agents SHALL NOT accept sets to
'xcmGenTrapClientRowPersistence', 'xcmGenTrapClientSNMPVersion', or
'xcmGenTrapClientSNMPCommunity' AFTER row creation (these objects are 'write-
once'). Usage: This object SHALL be set by all XCMI conforming SNMP trap
generators (managed host systems) to the default value of
'xcmGenBaseSNMPTrapCommunity', when NOT supplied by the requesting SNMP trap
client (management station or proxy) at the time of row creation. Usage: This
object is of type 'XcmFixedLocaleDisplayString' (see DESCRIPTION of
'xcmGenBaseSNMPReadCommunity' above). If 'xcmGenLocalizationTable' or
'xcmGenFixedLocalizationTable' are not implemented on this host system, then
the charset SHALL be 'utf-8(106)', ISO 10646-1 in 'UTF-8' stream encoding.
Usage: All XCMI conforming management agents SHALL allow any defined character
in the configured charset of this object. All XCMI conforming management
stations SHOULD NOT write control characters or other non-display characters
into this object. WARNING: Changing the configured 'trap community name' of an
SNMP trap client registration will cause a COMPLETE loss of communications
unless the associated SNMP management station (client) ALSO changes over to the
new 'trap community name'!!!
""")
_XcmGenTrapView_ObjectIdentity = ObjectIdentity
xcmGenTrapView = _XcmGenTrapView_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14)
)
_XcmGenTrapViewSimple_ObjectIdentity = ObjectIdentity
xcmGenTrapViewSimple = _XcmGenTrapViewSimple_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 1)
)
if mibBuilder.loadTexts:
    xcmGenTrapViewSimple.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewSimple.setDescription("""\
 This subtree is current. Subordinate objects are leaf objects.
""")
_XcmGenTrapViewEntryCount_Type = Counter32
_XcmGenTrapViewEntryCount_Object = MibScalar
xcmGenTrapViewEntryCount = _XcmGenTrapViewEntryCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 1, 1),
    _XcmGenTrapViewEntryCount_Type()
)
xcmGenTrapViewEntryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenTrapViewEntryCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewEntryCount.setDescription("""\
 The count of entries (rows) which are currently in the 'active' state in
'xcmGenTrapViewTable'.
""")
_XcmGenTrapViewSupportMaxCount_Type = Cardinal32
_XcmGenTrapViewSupportMaxCount_Object = MibScalar
xcmGenTrapViewSupportMaxCount = _XcmGenTrapViewSupportMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 1, 2),
    _XcmGenTrapViewSupportMaxCount_Type()
)
xcmGenTrapViewSupportMaxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenTrapViewSupportMaxCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewSupportMaxCount.setDescription("""\
 The maximum number of simultaneous entries (rows) supported for the
'xcmGenTrapViewTable'. Usage: The value zero ('0') represents 'no limit'.
""")
_XcmGenTrapViewTable_Object = MibTable
xcmGenTrapViewTable = _XcmGenTrapViewTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 2)
)
if mibBuilder.loadTexts:
    xcmGenTrapViewTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewTable.setReference("""\
 See: View group in Historic SNMPv2 Party MIB (RFC 1447).
""")
if mibBuilder.loadTexts:
    xcmGenTrapViewTable.setDescription("""\
 A table of SNMP trap object subtrees (ie, trap scopes) registered for trap
delivery from this host system to the associated trap client (management
station or proxy). Usage: SNMP version/transport independent trap registration.
Usage: Conforming management stations SHALL create at least one subordinate row
in the 'xcmGenTrapViewTable' for each trap client that they register in the
'xcmGenTrapClientTable'. Conforming management agents SHOULD interpret a
dangling row in the 'xcmGenTrapClientTable' (no children) as 'NO traps in view'
(existing implementations of both clients and devices are known to consider
dangling rows invalid). To register for all device traps, use a single view of
'iso(1).org(3).dod(6).internet(1)'. Usage: Conforming management agents SHALL
delete any rows in the 'xcmGenTrapViewTable' which were subordinate to a
deleted row in the 'xcmGenTrapClientTable'.
""")
_XcmGenTrapViewEntry_Object = MibTableRow
xcmGenTrapViewEntry = _XcmGenTrapViewEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 2, 1)
)
xcmGenTrapViewEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenTrapClientIndex"),
    (0, "XEROX-COMMON-MIB", "xcmGenTrapViewObjectSubtree"),
)
if mibBuilder.loadTexts:
    xcmGenTrapViewEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewEntry.setDescription("""\
 An entry for an SNMP trap object subtree (ie, trap scope) registered for trap
delivery from this host system to the associated trap client (management
station or proxy).
""")
_XcmGenTrapViewObjectSubtree_Type = ObjectIdentifier
_XcmGenTrapViewObjectSubtree_Object = MibTableColumn
xcmGenTrapViewObjectSubtree = _XcmGenTrapViewObjectSubtree_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 2, 1, 1),
    _XcmGenTrapViewObjectSubtree_Type()
)
xcmGenTrapViewObjectSubtree.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenTrapViewObjectSubtree.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewObjectSubtree.setDescription("""\
 This object is used to specify the object subtree (within MIBs) which is 'in
scope' for this trap view.
""")
_XcmGenTrapViewRowStatus_Type = RowStatus
_XcmGenTrapViewRowStatus_Object = MibTableColumn
xcmGenTrapViewRowStatus = _XcmGenTrapViewRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 2, 1, 2),
    _XcmGenTrapViewRowStatus_Type()
)
xcmGenTrapViewRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenTrapViewRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewRowStatus.setReference("""\
 See: 'xcmGenBaseGroupCreateSupport' in 'xcmGenBaseTable'. See:
'xcmGenTrapViewSupportMaxCount' (limit object). See: 'RowStatus' in IETF SNMPv2
TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX MIB and
'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenTrapViewRowStatus.setDescription("""\
 This object manages the row status of this conceptual row in the
'xcmGenTrapViewTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmGenTrapViewRowStatus' row status object; and SHALL set the
'xcmGenTrapViewGroup' bit in 'xcmGenBaseGroupCreateSupport' in the
'xcmGenBaseTable'. Usage: Conforming management agents SHOULD NOT support
'notInService(2)', 'notReady(3)', or 'createAndWait(5)'. Usage: See section 3.4
'Secure Modes of Operation' and section 3.5 'Secure SNMP Get/Set Requests' in
XCMI Security TC, for details of secure modes of access to this row status
object.
""")


class _XcmGenTrapViewNotifySeverity_Type(XcmGenNotifySeverityFilter):
    """Custom type xcmGenTrapViewNotifySeverity based on XcmGenNotifySeverityFilter"""
    defaultValue = 15


_XcmGenTrapViewNotifySeverity_Object = MibTableColumn
xcmGenTrapViewNotifySeverity = _XcmGenTrapViewNotifySeverity_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 2, 1, 3),
    _XcmGenTrapViewNotifySeverity_Type()
)
xcmGenTrapViewNotifySeverity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenTrapViewNotifySeverity.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewNotifySeverity.setReference("""\
 See: 'prtAlertSeverityLevel' in IETF Printer MIB (RFC 1759). See:
'XcmGenNotifySeverityFilter' in XCMI General TC. See:
'xcmGenBaseNotifySeveritySupport'.
""")
if mibBuilder.loadTexts:
    xcmGenTrapViewNotifySeverity.setDescription("""\
 This object is used to specify the notification severity filter used to
'screen' notifications 'in scope' for this trap view. Usage: Individual trap
definitions MAY further constrain which notifications are 'in scope'.
""")


class _XcmGenTrapViewNotifyTraining_Type(XcmGenNotifyTrainingFilter):
    """Custom type xcmGenTrapViewNotifyTraining based on XcmGenNotifyTrainingFilter"""
    defaultValue = 60


_XcmGenTrapViewNotifyTraining_Object = MibTableColumn
xcmGenTrapViewNotifyTraining = _XcmGenTrapViewNotifyTraining_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 14, 2, 1, 4),
    _XcmGenTrapViewNotifyTraining_Type()
)
xcmGenTrapViewNotifyTraining.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenTrapViewNotifyTraining.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewNotifyTraining.setReference("""\
 See: 'prtAlertTrainingLevel' in IETF Printer MIB (RFC 1759). See:
'XcmGenNotifyTrainingFilter' in XCMI General TC. See:
'xcmGenBaseNotifyTrainingSupport'.
""")
if mibBuilder.loadTexts:
    xcmGenTrapViewNotifyTraining.setDescription("""\
 This object is used to specify the notification training filter used to
'screen' notifications 'in scope' for this trap view. Usage: Individual trap
definitions MAY further constrain which notifications are 'in scope'.
""")
_XcmGenMessageMap_ObjectIdentity = ObjectIdentity
xcmGenMessageMap = _XcmGenMessageMap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 15)
)
_XcmGenMessageMapTable_Object = MibTable
xcmGenMessageMapTable = _XcmGenMessageMapTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 15, 2)
)
if mibBuilder.loadTexts:
    xcmGenMessageMapTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageMapTable.setReference("""\
 See: 'XcmGenMessageMapStringLabel' in XCMI General TC.
""")
if mibBuilder.loadTexts:
    xcmGenMessageMapTable.setDescription("""\
 A table of message string labels for the current contents of static (agent-
generated) message string objects, in all MIBs implemented by this host system.
Usage: Exposes the server's message catalog for indirect search via source
message object OIDs, yielding message string labels. Usage: Supports reliable
translation by clients (managers) of static (agent-generated) message strings,
INDEPENDENT of the current language/country/charset of the message strings on
the managed host system in the conventional MIB objects. Conformance: XCMI
conforming management agents SHALL support SNMP Get requests to the
'xcmGenMessageMapTable' (ie, agents must respond to valid explicit EXACT
requests). When 'xcmGenMessageMapTable' is currently 'hidden' via
'xcmGenBaseGroupWalkHidden', XCMI conforming management agents SHALL skip over
'xcmGenMessageMapTable' to the next lexicographically higher object for GetNext
or GetBulk requests - 'xcmGenMessageMapTable' SHOULD be invisible to MIB walks,
to avoid undesirable performance degradation with third-party network
management stations and other monitoring tools.
""")
_XcmGenMessageMapEntry_Object = MibTableRow
xcmGenMessageMapEntry = _XcmGenMessageMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 15, 2, 1)
)
xcmGenMessageMapEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenMessageMapStringIndexOID"),
)
if mibBuilder.loadTexts:
    xcmGenMessageMapEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageMapEntry.setDescription("""\
 A entry for a message string label for the current contents of a static
(agent-generated) message string object, in some MIB implemented by this host
system. Conformance: XCMI conforming management agents SHALL support SNMP Get
requests to the 'xcmGenMessageMapTable' (ie, agents must respond to valid
explicit EXACT requests). When 'xcmGenMessageMapTable' is currently 'hidden'
via 'xcmGenBaseGroupWalkHidden', XCMI conforming management agents SHALL skip
over 'xcmGenMessageMapTable' to the next lexicographically higher object for
GetNext or GetBulk requests - 'xcmGenMessageMapTable' SHOULD be invisible to
MIB walks, to avoid undesirable performance degradation with third-party
network management stations and other monitoring tools.
""")
_XcmGenMessageMapStringIndexOID_Type = ObjectIdentifier
_XcmGenMessageMapStringIndexOID_Object = MibTableColumn
xcmGenMessageMapStringIndexOID = _XcmGenMessageMapStringIndexOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 15, 2, 1, 1),
    _XcmGenMessageMapStringIndexOID_Type()
)
xcmGenMessageMapStringIndexOID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenMessageMapStringIndexOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageMapStringIndexOID.setReference("""\
 See: 'XcmGenMessageMapStringLabel' in XCMI General TC.
""")
if mibBuilder.loadTexts:
    xcmGenMessageMapStringIndexOID.setDescription("""\
 This object is used to specify the fully qualified object identifer (w/
instance suffix) of a message string object, which contains a Xerox registered
standard or experimental message string value associated with the current
message string label specified in 'xcmGenMessageMapStringLabel'.
""")
_XcmGenMessageMapStringLabel_Type = XcmGenMessageMapStringLabel
_XcmGenMessageMapStringLabel_Object = MibTableColumn
xcmGenMessageMapStringLabel = _XcmGenMessageMapStringLabel_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 15, 2, 1, 2),
    _XcmGenMessageMapStringLabel_Type()
)
xcmGenMessageMapStringLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenMessageMapStringLabel.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageMapStringLabel.setReference("""\
 See: 'XcmGenMessageMapStringLabel' in XCMI General TC.
""")
if mibBuilder.loadTexts:
    xcmGenMessageMapStringLabel.setDescription("""\
 This object is used to specify a Xerox standard or experiemental message
string label associated with the current value of the message string pointed to
by 'xcmGenMessageMapStringIndexOID'. Usage: Experimental message string labels
SHOULD NOT be used in shipping versions of Xerox-branded products or services.
They exist solely to facilitate rapid product development cycles. Usage: All
Xerox message string label values SHALL be specified using display (NOT space)
characters from the IANA registered charset 'utf-8' (ie, the UTF-8 octet-stream
encoding of ISO-10646 UCS-4, described in RFC 2279). Usage: All Xerox message
string label values SHALL contain no more than 64 UTF-8 display characters AND
no more than 128 total octets (in some scripts, less than 64 characters in
UTF-8 octet-stream encoding). Note: New or refined message label syntaxes MAY
be defined in future versions of the XCMI General TC.
""")
_XcmGenMessageText_ObjectIdentity = ObjectIdentity
xcmGenMessageText = _XcmGenMessageText_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 16)
)
_XcmGenMessageTextTable_Object = MibTable
xcmGenMessageTextTable = _XcmGenMessageTextTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 16, 2)
)
if mibBuilder.loadTexts:
    xcmGenMessageTextTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageTextTable.setReference("""\
 See: 'xcmGenMessageTextTable'
""")
if mibBuilder.loadTexts:
    xcmGenMessageTextTable.setDescription("""\
 A table of message string translations for all target locales of static
(agent-generated) message string objects, in various known (agent-supported)
source message locales. Usage: Exposes the server's message catalog for
indirect search via source message object OIDs, yielding target string values.
Usage: Supports reliable translation by servers (agents) of static (agent-
generated) message strings, INDEPENDENT of the current language/country/charset
of the message strings on the managed host system in the conventional MIB
objects. Conformance: XCMI conforming management agents SHALL support SNMP Get
requests to the 'xcmGenMessageTextTable' (ie, agents must respond to valid
explicit EXACT requests). When 'xcmGenMessageTextTable' is currently 'hidden'
via 'xcmGenBaseGroupWalkHidden', XCMI conforming management agents SHALL skip
over 'xcmGenMessageTextTable' to the next lexicographically higher object for
GetNext or GetBulk requests - 'xcmGenMessageTextTable' SHOULD be invisible to
MIB walks, to avoid undesirable performance degradation with third-party
network management stations and other monitoring tools.
""")
_XcmGenMessageTextEntry_Object = MibTableRow
xcmGenMessageTextEntry = _XcmGenMessageTextEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 16, 2, 1)
)
xcmGenMessageTextEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenMessageTextStringIndexOID"),
    (0, "XEROX-COMMON-MIB", "xcmGenMessageTextTargetLocale"),
)
if mibBuilder.loadTexts:
    xcmGenMessageTextEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageTextEntry.setReference("""\
 See: 'xcmGenMessageMapTable'
""")
if mibBuilder.loadTexts:
    xcmGenMessageTextEntry.setDescription("""\
 An entry for a message string translation for one target locale of a static
(agent-generated) message string object, in some MIB implemented by this host
system. Conformance: XCMI conforming management agents SHALL support SNMP Get
requests to the 'xcmGenMessageTextTable' (ie, agents must respond to valid
explicit EXACT requests). When 'xcmGenMessageTextTable' is currently 'hidden'
via 'xcmGenBaseGroupWalkHidden', XCMI conforming management agents SHALL skip
over 'xcmGenMessageTextTable' to the next lexicographically higher object for
GetNext or GetBulk requests - 'xcmGenMessageTextTable' SHOULD be invisible to
MIB walks, to avoid undesirable performance degradation with third-party
network management stations and other monitoring tools.
""")
_XcmGenMessageTextStringIndexOID_Type = ObjectIdentifier
_XcmGenMessageTextStringIndexOID_Object = MibTableColumn
xcmGenMessageTextStringIndexOID = _XcmGenMessageTextStringIndexOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 16, 2, 1, 1),
    _XcmGenMessageTextStringIndexOID_Type()
)
xcmGenMessageTextStringIndexOID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenMessageTextStringIndexOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageTextStringIndexOID.setReference("""\
 See: 'xcmGenMessageTextTargetLocale' See: 'xcmGenMessageTextTargetString'
""")
if mibBuilder.loadTexts:
    xcmGenMessageTextStringIndexOID.setDescription("""\
 This object is used to specify the fully qualified object identifer (w/
instance suffix) of a message string object, which contains a Xerox registered
standard or experimental message string value equivalent to the target message
string translation specified in 'xcmGenMessageTextTargetString'. The locale of
this source message string is immaterial.
""")
_XcmGenMessageTextTargetLocale_Type = Ordinal32
_XcmGenMessageTextTargetLocale_Object = MibTableColumn
xcmGenMessageTextTargetLocale = _XcmGenMessageTextTargetLocale_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 16, 2, 1, 2),
    _XcmGenMessageTextTargetLocale_Type()
)
xcmGenMessageTextTargetLocale.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenMessageTextTargetLocale.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageTextTargetLocale.setReference("""\
 See: 'xcmGenMessageTextStringIndexOID' See: 'xcmGenMessageTextTargetString'
""")
if mibBuilder.loadTexts:
    xcmGenMessageTextTargetLocale.setDescription("""\
 This object is used to specify the locale (language/country), as a value of
'xcmGenLocalizationIndex', of the message string translation in
'xcmGenMessageTextTargetString'.
""")


class _XcmGenMessageTextTargetString_Type(XcmNamedLocaleUtf8String):
    """Custom type xcmGenMessageTextTargetString based on XcmNamedLocaleUtf8String"""
    subtypeSpec = XcmNamedLocaleUtf8String.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenMessageTextTargetString_Type.__name__ = "XcmNamedLocaleUtf8String"
_XcmGenMessageTextTargetString_Object = MibTableColumn
xcmGenMessageTextTargetString = _XcmGenMessageTextTargetString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 16, 2, 1, 3),
    _XcmGenMessageTextTargetString_Type()
)
xcmGenMessageTextTargetString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenMessageTextTargetString.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageTextTargetString.setReference("""\
 See: 'xcmGenMessageTextStringIndexOID' See: 'xcmGenMessageTextTargetLocale'
""")
if mibBuilder.loadTexts:
    xcmGenMessageTextTargetString.setDescription("""\
 This object is used to specify a translated Xerox registered message string
value associated with the current value of the message string pointed to by
'xcmGenMessageMapStringIndexOID', in the locale specified by
'xcmGenMessageTextTargetLocale'. Usage: All Xerox registered message string
values SHALL contain no more than 128 UTF-8 display characters AND no more than
255 total octets (in some scripts, less than 128 characters in UTF-8 octet-
stream encoding).
""")
_XcmGenNotifyRule_ObjectIdentity = ObjectIdentity
xcmGenNotifyRule = _XcmGenNotifyRule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17)
)
_XcmGenNotifyRuleSimple_ObjectIdentity = ObjectIdentity
xcmGenNotifyRuleSimple = _XcmGenNotifyRuleSimple_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 1)
)
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSimple.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSimple.setDescription("""\
 This subtree is current. Subordinate objects are leaf objects.
""")
_XcmGenNotifyRuleEntryCount_Type = Counter32
_XcmGenNotifyRuleEntryCount_Object = MibScalar
xcmGenNotifyRuleEntryCount = _XcmGenNotifyRuleEntryCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 1, 1),
    _XcmGenNotifyRuleEntryCount_Type()
)
xcmGenNotifyRuleEntryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEntryCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEntryCount.setDescription("""\
 The count of entries (rows) which are currently in the 'active' state in
'xcmGenNotifyRuleTable'.
""")
_XcmGenNotifyRuleSupportMaxCount_Type = Cardinal32
_XcmGenNotifyRuleSupportMaxCount_Object = MibScalar
xcmGenNotifyRuleSupportMaxCount = _XcmGenNotifyRuleSupportMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 1, 2),
    _XcmGenNotifyRuleSupportMaxCount_Type()
)
xcmGenNotifyRuleSupportMaxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSupportMaxCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSupportMaxCount.setDescription("""\
 The maximum number of simultaneous entries (rows) supported for the
'xcmGenNotifyRuleTable'. Usage: The value zero ('0') represents 'no limit'.
""")
_XcmGenNotifyRuleTable_Object = MibTable
xcmGenNotifyRuleTable = _XcmGenNotifyRuleTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2)
)
if mibBuilder.loadTexts:
    xcmGenNotifyRuleTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleTable.setReference("""\
 See: Section 5 'Subscription Object' and Section 5.3 'Subscription Template
Attributes' and section 5.4 'Subscription Description Attributes' in IPP Notify
(draft-ietf-ipp-not-spec-06.txt).
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleTable.setDescription("""\
 A table of notification rules (recipient/event lists) registered for event
delivery from this host system. Note: In this MIB, the term 'notification rule'
is equivalent to the term 'Subscription object' in IPP Notifications. Usage:
Conforming management agents SHALL NOT accept sets to any other columnar object
in 'xcmGenNotifyRuleTable' when 'xcmGenNotifyRuleRowStatus' is 'active'.
Dynamic rows must be deleted (with 'destroy') and then recreated (with
'createAndGo') with new columnar values. Static rows must be released (with
'notInService') and then then reallocated (with 'active') with new columnar
values. Thus only a row status transition to 'active' indicates a new
notification registration by a conforming management station. Usage: Conforming
management agents SHALL delete any rows in the 'xcmGenNotifyDetailTable' which
were subordinate to a deleted row in the 'xcmGenNotifyRuleTable'.
""")
_XcmGenNotifyRuleEntry_Object = MibTableRow
xcmGenNotifyRuleEntry = _XcmGenNotifyRuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1)
)
xcmGenNotifyRuleEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenNotifyRuleIndex"),
)
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEntry.setDescription("""\
 An entry for a notification rule (recipient/event list) registered for event
delivery from this host system.
""")
_XcmGenNotifyRuleIndex_Type = Ordinal32
_XcmGenNotifyRuleIndex_Object = MibTableColumn
xcmGenNotifyRuleIndex = _XcmGenNotifyRuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 1),
    _XcmGenNotifyRuleIndex_Type()
)
xcmGenNotifyRuleIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleIndex.setReference("""\
 See: Section 5.4.1 'notify-subscription-id' in IPP Notify.
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleIndex.setDescription("""\
 A unique value used by this host system to identify this conceptual row in the
'xcmGenNotifyRuleTable'.
""")
_XcmGenNotifyRuleRowStatus_Type = RowStatus
_XcmGenNotifyRuleRowStatus_Object = MibTableColumn
xcmGenNotifyRuleRowStatus = _XcmGenNotifyRuleRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 2),
    _XcmGenNotifyRuleRowStatus_Type()
)
xcmGenNotifyRuleRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRowStatus.setReference("""\
 See: Section 11 'Operations for Notification' in IPP Notify. See: 'RowStatus'
in IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI
HRX MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRowStatus.setDescription("""\
 This object is used to display the status of this conceptual row in the
'xcmGenNotifyRuleTable'. Usage: This object MAY be used to create
('createAndGo') and delete ('destroy') dynamic rows in the
'xcmGenNotifyRuleTable'. Also used to enable ('active') and disable
('notInService') static rows in the 'xcmGenNotifyRuleTable'. Usage: Conforming
management agents SHOULD NOT support the intermediate values 'notReady(3)' or
'createAndWait(5)'. Usage: See section 3.4 'Secure Modes of Operation' and
section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of
secure modes of access to this row status object.
""")


class _XcmGenNotifyRuleRowPersistence_Type(XcmGenRowPersistence):
    """Custom type xcmGenNotifyRuleRowPersistence based on XcmGenRowPersistence"""


_XcmGenNotifyRuleRowPersistence_Object = MibTableColumn
xcmGenNotifyRuleRowPersistence = _XcmGenNotifyRuleRowPersistence_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 3),
    _XcmGenNotifyRuleRowPersistence_Type()
)
xcmGenNotifyRuleRowPersistence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRowPersistence.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRowPersistence.setReference("""\
 See: Section 5.3.7 'notify-lease-duration' in IPP Notify. See: Section 5.4.3
'lease-expiration-time' in IPP Notify.
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRowPersistence.setDescription("""\
 This object is used to specify the persistence of this conceptual row in the
'xcmGenNotifyRuleTable' (and associated conceptual rows in the
'xcmGenNotifyRuleDetailTable'). Usage: Dynamically created rows SHALL be given
'volatile' or 'nonvolatile' persistence. Usage: Conforming management agents
SHALL NOT accept sets to 'xcmGenNotifyRuleRowPersistence' AFTER row creation
(this object is 'write-once'). Usage: Conforming management agents SHALL
support 'volatile' (lost across power cycles), but NEED NOT support any other
levels of persistence.
""")


class _XcmGenNotifyRuleRecipientURI_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmGenNotifyRuleRecipientURI based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenNotifyRuleRecipientURI_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmGenNotifyRuleRecipientURI_Object = MibTableColumn
xcmGenNotifyRuleRecipientURI = _XcmGenNotifyRuleRecipientURI_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 4),
    _XcmGenNotifyRuleRecipientURI_Type()
)
xcmGenNotifyRuleRecipientURI.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRecipientURI.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRecipientURI.setReference("""\
 See: Section 5.3.1 'notify-recipient-uri' in IPP Notify. See: Generic URI
Syntax (RFC 2396). See: The 'mailto:' URL Scheme (RFC 2368). See: Minimal PSTN
address in Internet Mail (RFC 2303). See: Minimal FAX address in Internet Mail
(RFC 2304).
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleRecipientURI.setDescription("""\
 This object is used to specify a single recipient URI (Uniform Resource
Identifier, per Generic URI Syntax, RFC 2396) for event delivery for this
notification rule (list of events), eg, - 'mailto:joe@sample.com' (Email) -
'mailto:VOICE=+3940226338@samplevoice.com' (Voice Mail) -
'mailto:FAX=+1.800.5553000/T33S=6377@sampleserv.com' (IFax) -
'ftp://machine.sample.com/pub/event_logs' (FTP logging) Usage: 'ftp:' and
'http:' URLs specify paths for event logs. Usage: MAY include parameters for
SNMP and other URL schemes (eg,
'snmp://machine.sample.com;version=2c;community=public' for SNMPv2c delivery
with community-name of 'public'). Usage: For additional recipients, use
'notifyRecipientURI' notify details in the 'xcmGenNotifyRuleDetailTable'.
""")


class _XcmGenNotifyRuleEventNames_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmGenNotifyRuleEventNames based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenNotifyRuleEventNames_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmGenNotifyRuleEventNames_Object = MibTableColumn
xcmGenNotifyRuleEventNames = _XcmGenNotifyRuleEventNames_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 5),
    _XcmGenNotifyRuleEventNames_Type()
)
xcmGenNotifyRuleEventNames.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEventNames.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEventNames.setReference("""\
 See: Section 5.3.2 'notify-events' in IPP Notify. See: TRAP-TYPE and
NOTIFICATION-TYPE names in IETF/XCMI MIBs. See: 'hrDeviceStatus' in IETF HR MIB
(RFC 2790). See: 'xcmHrDevInfoXStatus' in XCMI HRX MIB. See:
'xcmHrDevInfoConditions' in XCMI HRX MIB. See: 'hrPrinterDetectedErrorState' in
IETF HR MIB (RFC 2790). See: 'prtAlertCode' in IETF Printer MIB (RFC 1759).
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEventNames.setDescription("""\
 This object is used to specify the subscribed events for this notification
rule, as a comma-delimited list of (standard) keywords or (vendor or site-
specific) names. Usage: Keywords of IPP 'notify-events' and SNMP traps and and
SNMP state/alert enumeration keywords are interoperable (eg, 'lowPaper,jammed'
from IETF HR MIB, RFC 2790). ` Usage: Standard keywords MAY be scoped with
their source, eg, 'notify-events.job-
stopped,hrPrinterDetectedErrorState.jammed', for clarity. Usage: Conforming
management stations and management agents SHALL prefix non-standard names with
'x-' for compatibility.
""")
_XcmGenNotifyRuleEventDelay_Type = Cardinal32
_XcmGenNotifyRuleEventDelay_Object = MibTableColumn
xcmGenNotifyRuleEventDelay = _XcmGenNotifyRuleEventDelay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 6),
    _XcmGenNotifyRuleEventDelay_Type()
)
xcmGenNotifyRuleEventDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEventDelay.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEventDelay.setReference("""\
 See: Section 5.3.8 'notify-time-interval' in IPP Notify.
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleEventDelay.setDescription("""\
 This object is used to specify a delay timer in seconds for event delivery
that rate-limits (buffers) frequent events. This timer is the minimum number of
seconds between events delivered for this notification rule
('xcmGenNotifyRuleIndex'). Usage: Conforming management agents (network
devices) SHOULD support server-side buffering of events for interoperability
(and improved performance) via 'xcmGenNotifyRuleEventDelay'. Usage: Conforming
management stations (recipients) SHOULD support client-side buffering of events
for interoperability (and not depend on this 'xcmGenNotifyRuleEventDelay'
object).
""")


class _XcmGenNotifyRuleSeverityFilter_Type(XcmGenNotifySeverityFilter):
    """Custom type xcmGenNotifyRuleSeverityFilter based on XcmGenNotifySeverityFilter"""
    defaultValue = 15


_XcmGenNotifyRuleSeverityFilter_Object = MibTableColumn
xcmGenNotifyRuleSeverityFilter = _XcmGenNotifyRuleSeverityFilter_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 7),
    _XcmGenNotifyRuleSeverityFilter_Type()
)
xcmGenNotifyRuleSeverityFilter.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSeverityFilter.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSeverityFilter.setReference("""\
 See: 'prtAlertSeverityLevel' in IETF Printer MIB (RFC 1759). See:
'XcmGenNotifySeverityFilter' in XCMI General TC. See:
'xcmGenBaseNotifySeveritySupport' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSeverityFilter.setDescription("""\
 This object is used to specify the notification severity filter used to
'screen' notifications for event delivery. Usage: Notification details MAY
further constrain which notifications are 'in scope'.
""")


class _XcmGenNotifyRuleTrainingFilter_Type(XcmGenNotifyTrainingFilter):
    """Custom type xcmGenNotifyRuleTrainingFilter based on XcmGenNotifyTrainingFilter"""
    defaultValue = 60


_XcmGenNotifyRuleTrainingFilter_Object = MibTableColumn
xcmGenNotifyRuleTrainingFilter = _XcmGenNotifyRuleTrainingFilter_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 8),
    _XcmGenNotifyRuleTrainingFilter_Type()
)
xcmGenNotifyRuleTrainingFilter.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleTrainingFilter.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleTrainingFilter.setReference("""\
 See: 'prtAlertTrainingLevel' in IETF Printer MIB (RFC 1759). See:
'XcmGenNotifyTrainingFilter' in XCMI General TC. See:
'xcmGenBaseNotifyTrainingSupport' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleTrainingFilter.setDescription("""\
 This object is used to specify the notification training filter used to
'screen' notifications for event delivery. Usage: Notification details MAY
further constrain which notifications are 'in scope'.
""")


class _XcmGenNotifyRuleCharset_Type(IANACharset):
    """Custom type xcmGenNotifyRuleCharset based on IANACharset"""


_XcmGenNotifyRuleCharset_Object = MibTableColumn
xcmGenNotifyRuleCharset = _XcmGenNotifyRuleCharset_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 9),
    _XcmGenNotifyRuleCharset_Type()
)
xcmGenNotifyRuleCharset.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleCharset.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleCharset.setReference("""\
 See: Section 4.1.7 'charset' and section 4.4.17 'charset-configured' in
IPP/1.1 (RFC 2911). See: Section 5.3.5 'notify-charset' in IPP Notify. See:
IANA Charset Registration Procedures (RFC 2978). See: Codes for Representation
of Names of Charsets, ISO 3166 See: Codes for Representation of Names of
Countries, ISO 639
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleCharset.setDescription("""\
 This object is used to specify the notification charset used for notification
text in event messages, specified as an IANA registered charset identifier, eg,
'MIBenum' value (per RFC 2978). Usage: If 'xcmGenNotifyRuleCharset' is
'other(1)', then the value of 'xcmGenFixedLocalizationIndex' SHALL be used for
a notification rule locale specifier for charset.
""")


class _XcmGenNotifyRuleNaturalLanguage_Type(DisplayString):
    """Custom type xcmGenNotifyRuleNaturalLanguage based on DisplayString"""
    defaultHexValue = ""


_XcmGenNotifyRuleNaturalLanguage_Object = MibTableColumn
xcmGenNotifyRuleNaturalLanguage = _XcmGenNotifyRuleNaturalLanguage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 10),
    _XcmGenNotifyRuleNaturalLanguage_Type()
)
xcmGenNotifyRuleNaturalLanguage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleNaturalLanguage.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleNaturalLanguage.setReference("""\
 See: Section 4.1.8 'naturalLanguage' and section 4.4.19 'natural-language-
configured' in IPP/1.1 (RFC 2911). See: Section 5.3.6 'notify-natural-language'
in IPP Notify. See: IETF Tags for Identification of Languages (RFC 3066). See:
Codes for Representation of Names of Languages, ISO 3166 See: Codes for
Representation of Names of Countries, ISO 639
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleNaturalLanguage.setDescription("""\
 This object is used to specify the notification natural language used for
notification text in event messages, specified as an IETF 'language tag' (per
RFC 3066). Usage: If 'xcmGenNotifyRuleNaturalLanguage' is empty, then the value
of 'xcmGenFixedLocalizationIndex' SHALL be used for a notification rule locale
specifier for natural language.
""")
_XcmGenNotifyRuleSequenceNumber_Type = Cardinal32
_XcmGenNotifyRuleSequenceNumber_Object = MibTableColumn
xcmGenNotifyRuleSequenceNumber = _XcmGenNotifyRuleSequenceNumber_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 17, 2, 1, 11),
    _XcmGenNotifyRuleSequenceNumber_Type()
)
xcmGenNotifyRuleSequenceNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSequenceNumber.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSequenceNumber.setReference("""\
 See: Section 5.4.2 'notify-sequence-number' in IPP Notify.
""")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleSequenceNumber.setDescription("""\
 This object is used to specify the notification sequence number last used for
event delivery for this notification rule. Usage: Conforming management agents
SHOULD include the value of 'xcmGenNotifyRuleSequenceNumber' in all event
messages.
""")
_XcmGenNotifyDetail_ObjectIdentity = ObjectIdentity
xcmGenNotifyDetail = _XcmGenNotifyDetail_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18)
)
_XcmGenNotifyDetailSimple_ObjectIdentity = ObjectIdentity
xcmGenNotifyDetailSimple = _XcmGenNotifyDetailSimple_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 1)
)
if mibBuilder.loadTexts:
    xcmGenNotifyDetailSimple.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailSimple.setDescription("""\
 This subtree is current. Subordinate objects are leaf objects.
""")
_XcmGenNotifyDetailEntryCount_Type = Counter32
_XcmGenNotifyDetailEntryCount_Object = MibScalar
xcmGenNotifyDetailEntryCount = _XcmGenNotifyDetailEntryCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 1, 1),
    _XcmGenNotifyDetailEntryCount_Type()
)
xcmGenNotifyDetailEntryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailEntryCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailEntryCount.setDescription("""\
 The count of entries (rows) which are currently in the 'active' state in
'xcmGenNotifyDetailTable'.
""")
_XcmGenNotifyDetailSupportMax_Type = Cardinal32
_XcmGenNotifyDetailSupportMax_Object = MibScalar
xcmGenNotifyDetailSupportMax = _XcmGenNotifyDetailSupportMax_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 1, 2),
    _XcmGenNotifyDetailSupportMax_Type()
)
xcmGenNotifyDetailSupportMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailSupportMax.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailSupportMax.setDescription("""\
 The maximum number of simultaneous entries (rows) supported for the
'xcmGenNotifyDetailTable'. Usage: The value zero ('0') represents 'no limit'.
""")
_XcmGenNotifyDetailTable_Object = MibTable
xcmGenNotifyDetailTable = _XcmGenNotifyDetailTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 2)
)
if mibBuilder.loadTexts:
    xcmGenNotifyDetailTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailTable.setReference("""\
 See: Section 5 'Subscription Object' and Section 5.3 'Subscription Template
Attributes' and section 5.4 'Subscription Description Attributes' in IPP Notify
(draft-ietf-ipp-not-spec-06.txt).
""")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailTable.setDescription("""\
 A 'sparse' table of notification detail information for notification rules
configured on this host system, augmenting the basic entries in the
'xcmGenNotifyTable'. Usage: UNLIKE the 'xcmGenOptionTable' in the XCMI General
MIB (which is a unique exception), this table of 'dictionary-based' notify
details is used with DIRECT create/update operations.
""")
_XcmGenNotifyDetailEntry_Object = MibTableRow
xcmGenNotifyDetailEntry = _XcmGenNotifyDetailEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 2, 1)
)
xcmGenNotifyDetailEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmGenNotifyRuleIndex"),
    (0, "XEROX-COMMON-MIB", "xcmGenNotifyDetailType"),
    (0, "XEROX-COMMON-MIB", "xcmGenNotifyDetailIndex"),
)
if mibBuilder.loadTexts:
    xcmGenNotifyDetailEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailEntry.setDescription("""\
 An entry of notification detail information for one of the notification rules
configured on this host system, augmenting the basic entry in the
'xcmGenNotifyTable'.
""")
_XcmGenNotifyDetailType_Type = XcmGenNotifyDetailType
_XcmGenNotifyDetailType_Object = MibTableColumn
xcmGenNotifyDetailType = _XcmGenNotifyDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 2, 1, 1),
    _XcmGenNotifyDetailType_Type()
)
xcmGenNotifyDetailType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailType.setReference("""\
 See: Section 5 'Subscription Object' and Section 5.3 'Subscription Template
Attributes' and section 5.4 'Subscription Description Attributes' in IPP Notify
(draft-ietf-ipp-not-spec-06.txt). See: Section 5 'Service Attributes' (encoding
rules) in Service Location Protocol v2 (RFC 2608).
""")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailType.setDescription("""\
 The type of notify detail stored in this conceptual row in
'xcmGenNotifyDetailTable'. Usage: Conforming XCMI management stations and
agents SHALL encode notify details as UTF-8 strings (like SLPv2, RFC 2608). -
Integers SHALL be encoded as (signed) decimal strings. - Booleans SHALL be
encoded as 'true' or 'false' strings. - Strings SHALL be encoded as UTF-8
character strings. - Binary data (e.g., 'userCertificate') SHALL be stored in
SLPv2 opaque encoding (leading '\FF' and escaped octets). Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information in
'xcmGenNotifyDetailString'.
""")
_XcmGenNotifyDetailIndex_Type = Ordinal32
_XcmGenNotifyDetailIndex_Object = MibTableColumn
xcmGenNotifyDetailIndex = _XcmGenNotifyDetailIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 2, 1, 2),
    _XcmGenNotifyDetailIndex_Type()
)
xcmGenNotifyDetailIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailIndex.setDescription("""\
 A unique value used by this host system to identify this conceptual row in the
'xcmGenNotifyDetailTable', OR a common value shared across a set of related
conceptual rows (with different values of 'xcmGenNotifyDetailType'.
""")
_XcmGenNotifyDetailRowStatus_Type = RowStatus
_XcmGenNotifyDetailRowStatus_Object = MibTableColumn
xcmGenNotifyDetailRowStatus = _XcmGenNotifyDetailRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 2, 1, 3),
    _XcmGenNotifyDetailRowStatus_Type()
)
xcmGenNotifyDetailRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailRowStatus.setReference("""\
 See: Section 11 'Operations for Notification' in IPP Notify. See: 'RowStatus'
in IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI
HRX MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailRowStatus.setDescription("""\
 This object is used to display the status of this conceptual row in the
'xcmGenNotifyDetailTable'. Usage: This object MAY be used to create
('createAndGo') and delete ('destroy') dynamic rows in
'xcmGenNotifyDetailTable'. Also used to enable ('active') and disable
('notInService') static rows in the 'xcmGenNotifyTable'. Usage: Conforming
management agents SHOULD NOT support the intermediate values 'notReady(3)' or
'createAndWait(5)'. Usage: See section 3.4 'Secure Modes of Operation' and
section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of
secure modes of access to this row status object.
""")


class _XcmGenNotifyDetailString_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmGenNotifyDetailString based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmGenNotifyDetailString_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmGenNotifyDetailString_Object = MibTableColumn
xcmGenNotifyDetailString = _XcmGenNotifyDetailString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 18, 2, 1, 4),
    _XcmGenNotifyDetailString_Type()
)
xcmGenNotifyDetailString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailString.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailString.setReference("""\
 See: Section 5 'Subscription Object' and Section 5.3 'Subscription Template
Attributes' and section 5.4 'Subscription Description Attributes' in IPP Notify
(draft-ietf-ipp-not-spec-06.txt). See: Section 5 'Service Attributes' (encoding
rules) in Service Location Protocol v2 (RFC 2608).
""")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailString.setDescription("""\
 The string notify detail value stored in this conceptual row in
'xcmGenNotifyDetailTable'. Usage: Conforming XCMI management stations and
agents SHALL encode notify details as UTF-8 strings (like SLPv2, RFC 2608). -
Integers SHALL be encoded as (signed) decimal strings. - Booleans SHALL be
encoded as 'true' or 'false' strings. - Strings SHALL be encoded as UTF-8
character strings. - Binary data (e.g., 'userCertificate') SHALL be stored in
SLPv2 opaque encoding (leading '\FF' and escaped octets). Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information in
'xcmGenNotifyDetailString'.
""")
_XcmHrTC_ObjectIdentity = ObjectIdentity
xcmHrTC = _XcmHrTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52)
)
if mibBuilder.loadTexts:
    xcmHrTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrTC.setDescription("""\
Version: 6.001.pub The TC module for textual conventions, enumerated types,
OIDs, and other volatile elements of the companion Host Resources Extensions
MIB ('xcmHrMIB'), which supports extended configuration and management of
various host resources for network accessible host systems. These modules
augment and extend the original IETF Host Resources MIB (RFC 2790). Usage: This
MIB module introduces support for the 'realization' of both 'physical' and
'logical' devices, consistent with ISO DPA (Document Printing Application),
ISO/IEC 10175, as reflected in the object 'xcmHrDevInfoRealization'. Note:
Conforming implementations SHALL NOT 'bubble up' status from 'physical' devices
to associated 'logical' devices. All devices SHALL report their own status
ONLY. See: Section 9 'Supplement' in XCMI Extensions to IETF Host Resources TC,
for implementation guidance for this TC module. Copyright (C) 1995-2009 Xerox
Corporation. All Rights Reserved.
""")
_XcmHrDeviceTypes_ObjectIdentity = ObjectIdentity
xcmHrDeviceTypes = _XcmHrDeviceTypes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2)
)
if mibBuilder.loadTexts:
    xcmHrDeviceTypes.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceTypes.setDescription("""\
The root of all additional device types defined in HRX TC.
""")
_XcmHrDevicePrinterHistory_ObjectIdentity = ObjectIdentity
xcmHrDevicePrinterHistory = _XcmHrDevicePrinterHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 55)
)
if mibBuilder.loadTexts:
    xcmHrDevicePrinterHistory.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevicePrinterHistory.setReference("""\
See: 'hrDevicePrinter' in the IETF HR MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevicePrinterHistory.setDescription("""\
Printer history device type - manufacturer independent.
""")
_XcmHrDeviceHostSystem_ObjectIdentity = ObjectIdentity
xcmHrDeviceHostSystem = _XcmHrDeviceHostSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 101)
)
if mibBuilder.loadTexts:
    xcmHrDeviceHostSystem.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceHostSystem.setReference("""\
See: 'xcmHrDeviceHostSystemHistory' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceHostSystem.setDescription("""\
Host system device type - manufacturer independent. For host systems which
instrument multiple devices and support MIBs with tables INDEXed by
'hrDeviceIndex', the single 'xcmHrDeviceHostSystem' device represents the
'root' device which MAY be used to manage overall host system defaults,
configuration, status, etc.
""")
_XcmHrDeviceScanner_ObjectIdentity = ObjectIdentity
xcmHrDeviceScanner = _XcmHrDeviceScanner_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 102)
)
if mibBuilder.loadTexts:
    xcmHrDeviceScanner.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceScanner.setReference("""\
See: 'xcmHrDeviceScannerHistory' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceScanner.setDescription("""\
Scanner device type - manufacturer independent. An 'xcmHrDeviceScanner' device
with 'xcmHrDevInfoRealization' of 'physical' is a 'real' input device (eg, a
'scan channel' on a multifunction printer). An 'xcmHrDeviceScanner' device with
'xcmHrDevInfoRealization' of 'logical' is a 'virtual' input device (eg, a
'personality' of a 'scan channel' on a multifunction printer).
""")
_XcmHrDeviceCopier_ObjectIdentity = ObjectIdentity
xcmHrDeviceCopier = _XcmHrDeviceCopier_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 103)
)
if mibBuilder.loadTexts:
    xcmHrDeviceCopier.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceCopier.setReference("""\
See: 'xcmHrDeviceCopierHistory' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceCopier.setDescription("""\
Copier device type - manufacturer independent. An 'xcmHrDeviceCopier' device
with 'xcmHrDevInfoRealization' of 'physical' is a 'real' I/O device (eg, a
'copier' on a multifunction printer). An 'xcmHrDeviceCopier' device with
'xcmHrDevInfoRealization' of 'logical' is a 'virtual' I/O device (eg, a
'personality' of a 'copier' on a multifunction printer).
""")
_XcmHrDeviceFax_ObjectIdentity = ObjectIdentity
xcmHrDeviceFax = _XcmHrDeviceFax_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 104)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFax.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFax.setReference("""\
See: 'xcmHrDeviceFaxHistory' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceFax.setDescription("""\
Fax device type - manufacturer independent. xcmHrDeviceFax is maintained for
legacy products. It is recommended that the hrDeviceType is explicitly defined
using xcmHrDeviceEmbeddedFax, xcmHrDeviceServerFax or xcmHrDeviceInternetFax.
An 'xcmHrDeviceFax' device with 'xcmHrDevInfoRealization' of 'physical' is a
'real' I/O device (eg, a 'fax channel' on a multifunction printer). An
'xcmHrDeviceFax' device with 'xcmHrDevInfoRealization' of 'logical' is a
'virtual' I/O device (eg, a 'personality' of a 'fax channel' on a multifunction
printer).
""")
_XcmHrDeviceMailbox_ObjectIdentity = ObjectIdentity
xcmHrDeviceMailbox = _XcmHrDeviceMailbox_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 105)
)
if mibBuilder.loadTexts:
    xcmHrDeviceMailbox.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceMailbox.setReference("""\
See: 'xcmHrDeviceMailboxSorter' and 'xcmHrDeviceSorter'.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceMailbox.setDescription("""\
Mailbox device type - manufacturer independent. An 'xcmHrDeviceMailbox' device
is a 'multi-bin' output device, with each 'bin' assigned to a user, group,
account, etc, and (optionally) physical security associated with each 'bin'. An
'xcmHrDeviceMailbox' device with 'xcmHrDevInfoRealization' of 'physical' is a
'real' output device (eg, a 'tower mailbox' on a high-end printer). An
'xcmHrDeviceMailbox' device with 'xcmHrDevInfoRealization' of 'logical' is a
'virtual' output device (eg, a 'personality' of a 'tower mailbox' on a high-end
printer). An 'xcmHrDeviceMailbox' device with 'xcmHrDevInfoRealization' of
'logical' MAY also indicate the current configuration of a 'physical' device of
type 'xcmHrDeviceMailboxSorter'.
""")
_XcmHrDeviceFinisher_ObjectIdentity = ObjectIdentity
xcmHrDeviceFinisher = _XcmHrDeviceFinisher_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 106)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFinisher.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFinisher.setDescription("""\
Finisher device type - manufacturer independent. An 'xcmHrDeviceFinisher'
device is an output finishing device. An 'xcmHrDeviceFinisher' device with
'xcmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a
'stapler' on a high-end printer). An 'xcmHrDeviceFinisher' device with
'xcmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a
'personality' of a 'stapler' on a high-end printer).
""")
_XcmHrDeviceFeeder_ObjectIdentity = ObjectIdentity
xcmHrDeviceFeeder = _XcmHrDeviceFeeder_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 107)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFeeder.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFeeder.setDescription("""\
Feeder device type - manufacturer independent. An 'xcmHrDeviceFeeder' device is
an input device. An 'xcmHrDeviceFeeder' device with 'xcmHrDevInfoRealization'
of 'physical' is a 'real' output device (eg, a 'high-capacity feeder' on a
high-end printer). An 'xcmHrDeviceFeeder' device with 'xcmHrDevInfoRealization'
of 'logical' is a 'virtual' output device (eg, a 'personality' of a 'high-
capacity feeder' on a high-end printer).
""")
_XcmHrDeviceSorter_ObjectIdentity = ObjectIdentity
xcmHrDeviceSorter = _XcmHrDeviceSorter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 108)
)
if mibBuilder.loadTexts:
    xcmHrDeviceSorter.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceSorter.setReference("""\
See: 'xcmHrDeviceMailboxSorter' and 'xcmHrDeviceMailbox'.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceSorter.setDescription("""\
Sorter device type - manufacturer independent. An 'xcmHrDeviceSorter' device is
a 'multi-bin' output device, with each 'bin' assigned to a copy of the current
job, and NO physical security associated with each 'bin'. An
'xcmHrDeviceSorter' device with 'xcmHrDevInfoRealization' of 'physical' is a
'real' output device (eg, a '10-bin sorter' on a mid-range printer). An
'xcmHrDeviceSorter' device with 'xcmHrDevInfoRealization' of 'logical' is a
'virtual' output device (eg, a 'personality' of a '10-bin sorter' on a mid-
range printer). An 'xcmHrDeviceSorter' device with 'xcmHrDevInfoRealization' of
'logical' MAY also indicate the current configuration of a 'physical' device of
type 'xcmHrDeviceMailboxSorter'.
""")
_XcmHrDeviceMailboxSorter_ObjectIdentity = ObjectIdentity
xcmHrDeviceMailboxSorter = _XcmHrDeviceMailboxSorter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 109)
)
if mibBuilder.loadTexts:
    xcmHrDeviceMailboxSorter.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceMailboxSorter.setDescription("""\
MailboxSorter device type - manufacturer independent. An
'xcmHrDeviceMailboxSorter' is a 'multi-bin' output device, which MAY be
configured as either a 'mailbox' or a 'sorter', by a system adminstrator or by
default product configuration. An 'xcmHrDeviceMailboxSorter' with
'xcmHrDevInfoRealization' of 'physical' is a 'real' output device and
associated with associated with exactly two 'logical' output devices of types
'xcmHrDeviceMailbox' and 'xcmHrDeviceSorter' - one of these 'logical' devices
MAY be 'running' (currently configured) - at least one SHALL be 'down' (NOT
currently configured).
""")
_XcmHrDevicePrintAppliance_ObjectIdentity = ObjectIdentity
xcmHrDevicePrintAppliance = _XcmHrDevicePrintAppliance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 110)
)
if mibBuilder.loadTexts:
    xcmHrDevicePrintAppliance.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevicePrintAppliance.setReference("""\
See: 'hrDevicePrinter' in IETF Host Resources MIB (RFC 2790). See:
'xcmHrDevicePrinterHistory' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDevicePrintAppliance.setDescription("""\
Print appliance device type - manufacturer independent. An
'xcmHrDevicePrintAppliance' is a network printing appliance with
'xcmHrDevInfoRealization' of 'physical'. An 'xcmHrDevicePrintAppliance' SHALL
statically and/or actively discover available network printers and SHOULD
advertise them as supported output devices, using rows in 'hrDeviceTable' of
IETF HR MIB (RFC 2790) and 'prtGeneralTable' of the Printer MIB (RFC 1759 or
successor), with 'hrDeviceType' set to 'hrDevicePrinter'. An
'xcmHrDevicePrintAppliance' SHALL NOT use 'hrDeviceIndex' of '1' (first row)
for an 'hrDevicePrinter' row, because a network printing appliance is an
enhanced spooler and NOT a printer.
""")
_XcmHrDeviceMarker_ObjectIdentity = ObjectIdentity
xcmHrDeviceMarker = _XcmHrDeviceMarker_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 111)
)
if mibBuilder.loadTexts:
    xcmHrDeviceMarker.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceMarker.setDescription("""\
Marker Engine device type - manufacturer independent. An 'xcmHrDeviceMarker'
device with 'xcmHrDevInfoRealization' of 'physical' is a 'real' output device
(eg, the 'marking engine' on a multifunction printer or copier). The marking
engine is the module that accepts a print ready image and physical media as
input and outputs physical media with a physical representation of the print
ready input image. The 'xcmHrDeviceMarker' is a single module within a group of
modules that cumulatively are represented by 'hrDevicePrinter'. The marker
shall represent the whole marker as a single physical unit and should maintain
a single entry in the 'hrDeviceTable' for all products that support a single
marking engine regardless of internal engine mark points. (e.g. B&W, Highlight
Color and Full Color Presses shall have a single entry in 'hrDeviceTable').
Multiple entries of 'xcmHrDeviceMarker' may exist in the 'hrDeviceTable' if the
system supports multiple print engines whether chained, in parallel or in any
other configuration. An 'xcmHrDeviceMarker' SHALL NOT use 'hrDeviceIndex' of
'1' (first row). The index 1 is reserved for an 'hrDevicePrinter' row.
""")
_XcmHrDeviceFinisherBFM_ObjectIdentity = ObjectIdentity
xcmHrDeviceFinisherBFM = _XcmHrDeviceFinisherBFM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 112)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFinisherBFM.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFinisherBFM.setDescription("""\
Basic Finisher Module device type - manufacturer independent. An
'xcmHrDeviceFinisherBFM' device is a basic output finishing device. An
'xcmHrDeviceFinisherBFM' device with 'xcmHrDevInfoRealization' of 'physical' is
a 'real' output device (eg, a 'stapler' on a high-end printer). An
'xcmHrDeviceFinisherBFM' device with 'xcmHrDevInfoRealization' of 'logical' is
a 'virtual' output device (eg, a 'personality' of a 'stapler' on a high-end
printer).
""")
_XcmHrDeviceFinisherMFF_ObjectIdentity = ObjectIdentity
xcmHrDeviceFinisherMFF = _XcmHrDeviceFinisherMFF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 113)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFinisherMFF.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFinisherMFF.setDescription("""\
Multi-Function Finisher device type - manufacturer independent. An
'xcmHrDeviceFinisherMFF' device is a multi-function output finishing device. An
'xcmHrDeviceFinisherMFF' device with 'xcmHrDevInfoRealization' of 'physical' is
a 'real' output device (eg, a 'saddle stitcher', 'C-Folder', 'Z-Folder', 'Hole
Puncher' on a high-end printer). An 'xcmHrDeviceFinisherMFF' device with
'xcmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a
'personality' of a 'saddle stitcher', 'C-Folder', 'Z-Folder', 'Hole Puncher' on
a high-end printer).
""")
_XcmHrDeviceFinisherXIM_ObjectIdentity = ObjectIdentity
xcmHrDeviceFinisherXIM = _XcmHrDeviceFinisherXIM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 114)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFinisherXIM.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFinisherXIM.setDescription("""\
eXternal Interface Module Finisher device type. An 'xcmHrDeviceFinisherXIM'
device is a hardware interface used to pass media from a Xerox printing device
to a 3rd party finishing devices. The 'xcmHrDeviceFinihserXIM' may or may not
contain its own output trays or finishing capabilities. An
'xcmHrDeviceFinisherXIM' device with 'xcmHrDevInfoRealization' of 'physical' is
a 'real' output device (e.g., an 'output bridge' on a high-end printer).
""")
_XcmHrDeviceFinisher3rdParty_ObjectIdentity = ObjectIdentity
xcmHrDeviceFinisher3rdParty = _XcmHrDeviceFinisher3rdParty_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 115)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFinisher3rdParty.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFinisher3rdParty.setDescription("""\
3rd Party Finisher device type - manufacturer independent. An
'xcmHrDeviceFinisher3rdParty' device is an output finishing device. An
'xcmHrDeviceFinisher3rdParty' device with 'xcmHrDevInfoRealization' of
'physical' is a 'real' output device (eg, a 'stapler' on a high-end printer).
An 'xcmHrDeviceFinisher3rdParty' device with 'xcmHrDevInfoRealization' of
'logical' is a 'virtual' output device (eg, a 'personality' of a 'stapler' on a
high-end printer).
""")
_XcmHrDevicePaymentInterface_ObjectIdentity = ObjectIdentity
xcmHrDevicePaymentInterface = _XcmHrDevicePaymentInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 116)
)
if mibBuilder.loadTexts:
    xcmHrDevicePaymentInterface.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevicePaymentInterface.setDescription("""\
Payment Interface device type - manufacturer independent. An
'xcmHrDevicePaymentInterface' device is an payment authorization device. An
'xcmHrDevicePaymentInterface' device with 'xcmHrDevInfoRealization' of
'physical' is a 'real' point of purchase validation device (eg, a 'coin
operated', 'smart card' or other form of point of purchase payment for services
rendered on a multi-function printer or copier). An
'xcmHrDevicePaymentInterface' device with 'xcmHrDevInfoRealization' of
'logical' is a 'virtual' point of purchase validation device (eg, a software
service that accepts payment through the Web or some other form of remote point
of purchase payment for services rendered on a multi-function printer or
copier).
""")
_XcmHrDeviceInterposer_ObjectIdentity = ObjectIdentity
xcmHrDeviceInterposer = _XcmHrDeviceInterposer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 117)
)
if mibBuilder.loadTexts:
    xcmHrDeviceInterposer.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceInterposer.setDescription("""\
Interposer device type - manufacturer independent. An 'xcmHrDeviceInterposer'
device is an input device which physically resides downstream of the print
engine amongst finishing modules. An 'xcmHrDeviceInterposer' device with
'xcmHrDevInfoRealization' of 'physical' is a 'real' input device (eg, a 'high-
capacity Interposing feeder' that physically resides amongst finishing modules
on a high-end printer). An 'xcmHrDeviceInterposer' device with
'xcmHrDevInfoRealization' of 'logical' is a 'virtual' input device (eg, a
'personality' of a 'high-capacity Interposing feeder' that physically resides
amongst finishing modules on a high-end printer). Interposers are essentially
feeders that are placed downstream of the print engine paper path and upstream
of finishing devices. Interposer fed media is not marked by the print engine;
instead media fed from an interposer is inserted before, between or after
marked pages. The media constitutes covers, separators etc.
""")
_XcmHrDeviceInternetFax_ObjectIdentity = ObjectIdentity
xcmHrDeviceInternetFax = _XcmHrDeviceInternetFax_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 118)
)
if mibBuilder.loadTexts:
    xcmHrDeviceInternetFax.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceInternetFax.setReference("""\
See: 'xcmHrDeviceFax' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceInternetFax.setDescription("""\
Internet Fax device type - manufacturer independent. A local Fax service which
sends and/or receives faxes over the internet
""")
_XcmHrDeviceServerFax_ObjectIdentity = ObjectIdentity
xcmHrDeviceServerFax = _XcmHrDeviceServerFax_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 119)
)
if mibBuilder.loadTexts:
    xcmHrDeviceServerFax.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceServerFax.setReference("""\
See: 'xcmHrDeviceFax' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceServerFax.setDescription("""\
Server Fax device type - manufacturer independent. A Fax service which works
with a server on the network to send and/or receive faxes over a remote modem
and phone lines
""")
_XcmHrDeviceEmbeddedFax_ObjectIdentity = ObjectIdentity
xcmHrDeviceEmbeddedFax = _XcmHrDeviceEmbeddedFax_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 120)
)
if mibBuilder.loadTexts:
    xcmHrDeviceEmbeddedFax.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceEmbeddedFax.setReference("""\
See: 'xcmHrDeviceFax' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceEmbeddedFax.setDescription("""\
Embedded Fax device type - manufacturer independent. A local fax service which
sends and/or receives fax directly over a modem and phone lines.
""")
_XcmHrDeviceForeignInterface_ObjectIdentity = ObjectIdentity
xcmHrDeviceForeignInterface = _XcmHrDeviceForeignInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 121)
)
if mibBuilder.loadTexts:
    xcmHrDeviceForeignInterface.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceForeignInterface.setDescription("""\
Foreign Interface device type - manufacturer independent. A physical connection
provided by a device for the purpose of connecting an external accessory. This
accessory may be capable of tracking data (e.g. Auditron) or may enable/
disable device operation (e.g. card reader, coin operator, etc.). This device
type shall only be used when the device cannot detect the type of external
accessory that is physically connected. If the device can detect the type of
external accessory which can be physically connected, then the appropriate
device type for that interface should be used instead. (e.g.
xcmHrDevicePaymentInterface, xcmHrDeviceSecurityInterface, or
xcmHrDeviceAccountingInterface
""")
_XcmHrDeviceSecurityInterface_ObjectIdentity = ObjectIdentity
xcmHrDeviceSecurityInterface = _XcmHrDeviceSecurityInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 122)
)
if mibBuilder.loadTexts:
    xcmHrDeviceSecurityInterface.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceSecurityInterface.setDescription("""\
Security device type - manufacturer independent. A physical connection provided
by a device for the purpose of connecting an external security-related
accessory. This accessory may consist of a card reader or biometric device
which would restrict access to a machine to only authorized users.
""")
_XcmHrDeviceAccountingInterface_ObjectIdentity = ObjectIdentity
xcmHrDeviceAccountingInterface = _XcmHrDeviceAccountingInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 123)
)
if mibBuilder.loadTexts:
    xcmHrDeviceAccountingInterface.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceAccountingInterface.setDescription("""\
Accounting device type - manufacturer independent. A physical connection
provided by a device for the purpose of connecting an external accounting-
related accessory. This accessory would provide the capability to track machine
usage but would not restrict access to the machine as would an accessory
defined by type xcmHrDevicePaymentInterface.
""")
_XcmHrDeviceFeederSFM_ObjectIdentity = ObjectIdentity
xcmHrDeviceFeederSFM = _XcmHrDeviceFeederSFM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 124)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFeederSFM.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFeederSFM.setDescription("""\
Feeder device type - Xerox Substraite Feeding Module An 'xcmHrDeviceFeederSFM'
device is an input device. An 'xcmHrDeviceFeederSFM' device with
'xcmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a 'high-
capacity feeder' on a high-end printer). An 'xcmHrDeviceFeeder' device with
'xcmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a
'personality' of a 'high-capacity feeder' on a high-end printer).
""")
_XcmHrDeviceFeederLFF_ObjectIdentity = ObjectIdentity
xcmHrDeviceFeederLFF = _XcmHrDeviceFeederLFF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 125)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFeederLFF.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFeederLFF.setDescription("""\
Feeder device type - Xerox Large Format Feeder. An 'xcmHrDeviceFeederLFF'
device is an input device. An 'xcmHrDeviceFeeder' device with
'xcmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a 'high-
capacity large format feeder' on a high-end printer). An 'xcmHrDeviceFeeder'
device with 'xcmHrDevInfoRealization' of 'logical' is a 'virtual' output device
(eg, a 'personality' of a 'high-capacity large format feeder' on a high-end
printer).
""")
_XcmHrDeviceScannerADF_ObjectIdentity = ObjectIdentity
xcmHrDeviceScannerADF = _XcmHrDeviceScannerADF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 126)
)
if mibBuilder.loadTexts:
    xcmHrDeviceScannerADF.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceScannerADF.setReference("""\
See: 'xcmHrDeviceScannerHistory' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceScannerADF.setDescription("""\
Scanner device type - manufacturer independent automatic document feeding
scanner. An 'xcmHrDeviceScannerADF' device with 'xcmHrDevInfoRealization' of
'physical' is a 'real' input device (eg, a 'scan channel' on a multifunction
printer). An 'xcmHrDeviceScannerADF' device with 'xcmHrDevInfoRealization' of
'logical' is a 'virtual' input device (eg, a 'personality' of a 'scan channel'
on a multifunction printer).
""")
_XcmHrDeviceScannerPlaten_ObjectIdentity = ObjectIdentity
xcmHrDeviceScannerPlaten = _XcmHrDeviceScannerPlaten_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 127)
)
if mibBuilder.loadTexts:
    xcmHrDeviceScannerPlaten.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceScannerPlaten.setReference("""\
See: 'xcmHrDeviceScannerHistory' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceScannerPlaten.setDescription("""\
Scanner device type - manufacturer independent platen glass scanner. An
'xcmHrDeviceScannerPlaten' device with 'xcmHrDevInfoRealization' of 'physical'
is a 'real' input device (eg, a 'scan channel' on a multifunction printer). An
'xcmHrDeviceScannerPlaten' device with 'xcmHrDevInfoRealization' of 'logical'
is a 'virtual' input device (eg, a 'personality' of a 'scan channel' on a
multifunction printer).
""")
_XcmHrDeviceColorScanningCard_ObjectIdentity = ObjectIdentity
xcmHrDeviceColorScanningCard = _XcmHrDeviceColorScanningCard_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 128)
)
if mibBuilder.loadTexts:
    xcmHrDeviceColorScanningCard.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceColorScanningCard.setDescription("""\
An xcmHrDeviceColorScanningCard is a physical card that allows for scanning of
color, or monochrome, images from the printer to a remote device.
""")
_XcmHrDeviceHostSystemHistory_ObjectIdentity = ObjectIdentity
xcmHrDeviceHostSystemHistory = _XcmHrDeviceHostSystemHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 151)
)
if mibBuilder.loadTexts:
    xcmHrDeviceHostSystemHistory.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceHostSystemHistory.setReference("""\
See: 'xcmHrDeviceHostSystem' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceHostSystemHistory.setDescription("""\
Host system history device type - manufacturer independent.
""")
_XcmHrDeviceScannerHistory_ObjectIdentity = ObjectIdentity
xcmHrDeviceScannerHistory = _XcmHrDeviceScannerHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 152)
)
if mibBuilder.loadTexts:
    xcmHrDeviceScannerHistory.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceScannerHistory.setReference("""\
See: 'xcmHrDeviceScanner' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceScannerHistory.setDescription("""\
Scanner history device type - manufacturer independent.
""")
_XcmHrDeviceCopierHistory_ObjectIdentity = ObjectIdentity
xcmHrDeviceCopierHistory = _XcmHrDeviceCopierHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 153)
)
if mibBuilder.loadTexts:
    xcmHrDeviceCopierHistory.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceCopierHistory.setReference("""\
See: 'xcmHrDeviceCopier' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceCopierHistory.setDescription("""\
Copier history device type - manufacturer independent.
""")
_XcmHrDeviceFaxHistory_ObjectIdentity = ObjectIdentity
xcmHrDeviceFaxHistory = _XcmHrDeviceFaxHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 154)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFaxHistory.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFaxHistory.setReference("""\
See: 'xcmHrDeviceFax' in this XCMI HRX TC.
""")
if mibBuilder.loadTexts:
    xcmHrDeviceFaxHistory.setDescription("""\
Fax history device type - manufacturer independent.
""")
_XcmHrCruXerographicModule_ObjectIdentity = ObjectIdentity
xcmHrCruXerographicModule = _XcmHrCruXerographicModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 201)
)
if mibBuilder.loadTexts:
    xcmHrCruXerographicModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruXerographicModule.setDescription("""\
CRU xerographic module - manufacturer independent. An
'xcmHrCruXerographicModule' device is a customer replaceable unit, with
'xcmHrDevInfoRealization' of 'physical'.
""")
_XcmHrCruFuserModule_ObjectIdentity = ObjectIdentity
xcmHrCruFuserModule = _XcmHrCruFuserModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 202)
)
if mibBuilder.loadTexts:
    xcmHrCruFuserModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruFuserModule.setDescription("""\
CRU fuser module - manufacturer independent. An 'xcmHrCruFuserModule' device is
a customer replaceable unit, with 'xcmHrDevInfoRealization' of 'physical'.
""")
_XcmHrCruTonerBottleModule_ObjectIdentity = ObjectIdentity
xcmHrCruTonerBottleModule = _XcmHrCruTonerBottleModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 203)
)
if mibBuilder.loadTexts:
    xcmHrCruTonerBottleModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruTonerBottleModule.setDescription("""\
CRU toner bottle module - manufacturer independent. An
'xcmHrCruTonerBottleModule' device is a customer replaceable unit, with
'xcmHrDevInfoRealization' of 'physical'.
""")
_XcmHrCruCollectorBottleModule_ObjectIdentity = ObjectIdentity
xcmHrCruCollectorBottleModule = _XcmHrCruCollectorBottleModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 204)
)
if mibBuilder.loadTexts:
    xcmHrCruCollectorBottleModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruCollectorBottleModule.setDescription("""\
CRU (developer) collector bottle - manufacturer independent. An
'xcmHrCruCollectorBottleModule' device is a customer replaceable unit, with
'xcmHrDevInfoRealization' of 'physical'.
""")
_XcmHrCruTrayFeedHeadModule_ObjectIdentity = ObjectIdentity
xcmHrCruTrayFeedHeadModule = _XcmHrCruTrayFeedHeadModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 205)
)
if mibBuilder.loadTexts:
    xcmHrCruTrayFeedHeadModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruTrayFeedHeadModule.setDescription("""\
CRU tray feed head module - manufacturer independent. An
'xcmHrCruTrayFeedHeadModule' device is a customer replaceable unit, with
'xcmHrDevInfoRealization' of 'physical'.
""")
_XcmHrCruAdfFeedHeadModule_ObjectIdentity = ObjectIdentity
xcmHrCruAdfFeedHeadModule = _XcmHrCruAdfFeedHeadModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 206)
)
if mibBuilder.loadTexts:
    xcmHrCruAdfFeedHeadModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruAdfFeedHeadModule.setDescription("""\
CRU ADF feed head module - manufacturer independent. An
'xcmHrCruAdfFeedHeadModule' device is a customer replaceable unit, with
'xcmHrDevInfoRealization' of 'physical'. Note: ADF is an acronym for 'automatic
document feeder'.
""")
_XcmHrCruFuserWebModule_ObjectIdentity = ObjectIdentity
xcmHrCruFuserWebModule = _XcmHrCruFuserWebModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 207)
)
if mibBuilder.loadTexts:
    xcmHrCruFuserWebModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruFuserWebModule.setDescription("""\
CRU fuser web module - manufacturer independent. An 'xcmHrCruFuserWebModule'
device is a customer replaceable unit, with 'xcmHrDevInfoRealization' of
'physical'. Note: A 'fuser web' is an oil-soaked fiber roll in a fuser, which
prevents toner from getting on the fuser roll. The 'fuser web' device would
normally be replaced several times before the actual fuser device
('xcmHrCRUFuserModule') is replaced.
""")
_XcmHrCruFilterModule_ObjectIdentity = ObjectIdentity
xcmHrCruFilterModule = _XcmHrCruFilterModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 208)
)
if mibBuilder.loadTexts:
    xcmHrCruFilterModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruFilterModule.setDescription("""\
CRU filter module - manufacturer independent. An 'xcmHrCruFilterModule' device
is a customer replaceable filter or filter unit, with 'xcmHrDevInfoRealization'
of 'physical'.
""")
_XcmHrCruCleanerUnitModule_ObjectIdentity = ObjectIdentity
xcmHrCruCleanerUnitModule = _XcmHrCruCleanerUnitModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 209)
)
if mibBuilder.loadTexts:
    xcmHrCruCleanerUnitModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruCleanerUnitModule.setReference("""\
See: 'cleanerUnit' in 'PrtMarkerSuppliesTypeTC' in the Printer MIB v2.
""")
if mibBuilder.loadTexts:
    xcmHrCruCleanerUnitModule.setDescription("""\
CRU cleaner unit module - manufacturer independent. An
'xcmHrCruCleanerUnitModule' device is a customer replaceable cleaner unit, with
'xcmHrDevInfoRealization' of 'physical' (eg, a belt cleaner or a photoreceptor
cleaner).
""")
_XcmHrCruTransferUnitModule_ObjectIdentity = ObjectIdentity
xcmHrCruTransferUnitModule = _XcmHrCruTransferUnitModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 210)
)
if mibBuilder.loadTexts:
    xcmHrCruTransferUnitModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruTransferUnitModule.setReference("""\
See: 'transferUnit' in 'PrtMarkerSuppliesTypeTC' in the Printer MIB v2.
""")
if mibBuilder.loadTexts:
    xcmHrCruTransferUnitModule.setDescription("""\
CRU transfer unit module - manufacturer independent. An
'xcmHrCruTransferUnitModule' device is a customer replaceable transfer unit,
with 'xcmHrDevInfoRealization' of 'physical'.
""")
_XcmHrCruTransferRollerModule_ObjectIdentity = ObjectIdentity
xcmHrCruTransferRollerModule = _XcmHrCruTransferRollerModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 211)
)
if mibBuilder.loadTexts:
    xcmHrCruTransferRollerModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruTransferRollerModule.setReference("""\
See: 'transferUnit' in 'PrtMarkerSuppliesTypeTC' in the Printer MIB v2.
""")
if mibBuilder.loadTexts:
    xcmHrCruTransferRollerModule.setDescription("""\
CRU transfer roller module - manufacturer independent. An
'xcmHrCruTransferRollerModule' device is a customer replaceable transfer
roller, with 'xcmHrDevInfoRealization' of 'physical' (eg, a biased transfer
roller).
""")
_XcmHrCruPFPFeedRollModule_ObjectIdentity = ObjectIdentity
xcmHrCruPFPFeedRollModule = _XcmHrCruPFPFeedRollModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 212)
)
if mibBuilder.loadTexts:
    xcmHrCruPFPFeedRollModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruPFPFeedRollModule.setDescription("""\
CRU Paper Feed Platform module - manufacturer independent. An
'xcmHrCruPaperFeedModule' device is a customer replaceable unit, with
'xcmHrDevInfoRealization' of 'physical'.
""")
_XcmHrCruPFPRetardRollModule_ObjectIdentity = ObjectIdentity
xcmHrCruPFPRetardRollModule = _XcmHrCruPFPRetardRollModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 213)
)
if mibBuilder.loadTexts:
    xcmHrCruPFPRetardRollModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrCruPFPRetardRollModule.setDescription("""\
CRU PFP Retard Roll module - manufacturer independent. An
'xcmHrCruPFPRetardRollModule' device is a customer replaceable unit, with
'xcmHrDevInfoRealization' of 'physical'.
""")
_XcmHrDeviceUSBPort_ObjectIdentity = ObjectIdentity
xcmHrDeviceUSBPort = _XcmHrDeviceUSBPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 250)
)
if mibBuilder.loadTexts:
    xcmHrDeviceUSBPort.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceUSBPort.setDescription("""\
The device type identifier used for a Universal Serial Bus port.
""")
_XcmHrDeviceFlashDIMMFileStore_ObjectIdentity = ObjectIdentity
xcmHrDeviceFlashDIMMFileStore = _XcmHrDeviceFlashDIMMFileStore_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 260)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFlashDIMMFileStore.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFlashDIMMFileStore.setDescription("""\
The device type identifier used for a Flash DIMM that contains a file system
that is used to store files such as font files. opposed to a Flash DIMM that
contains a boot loader.
""")
_XcmHrDeviceFlashDIMMBootLoader_ObjectIdentity = ObjectIdentity
xcmHrDeviceFlashDIMMBootLoader = _XcmHrDeviceFlashDIMMBootLoader_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 261)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFlashDIMMBootLoader.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFlashDIMMBootLoader.setDescription("""\
The device type identifier used for a Flash DIMM that contains the boot loader
for a device. Files may or may not be stored o this device. As opposed to a
Flash DIMM that contains a file store system.
""")
_XcmHrDeviceFlashDrive_ObjectIdentity = ObjectIdentity
xcmHrDeviceFlashDrive = _XcmHrDeviceFlashDrive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 2, 262)
)
if mibBuilder.loadTexts:
    xcmHrDeviceFlashDrive.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDeviceFlashDrive.setDescription("""\
The device type identifier used for a Flash Drive for a device Files may or may
not be stored on this device. As opposed to a Flash DIMM that contains a file
store system or a bootloader.
""")
_XcmHrAdminServiceTypes_ObjectIdentity = ObjectIdentity
xcmHrAdminServiceTypes = _XcmHrAdminServiceTypes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 3)
)
if mibBuilder.loadTexts:
    xcmHrAdminServiceTypes.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminServiceTypes.setReference("""\
See: 'XcmSecPosixVerbs' and 'xcmSecServiceTypeOID' in XCMI Security TC/MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminServiceTypes.setDescription("""\
The root of all host system management service types (classes) defined in the
Host Resources Extensions TC.
""")
_XcmHrAdminObjectService_ObjectIdentity = ObjectIdentity
xcmHrAdminObjectService = _XcmHrAdminObjectService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 3, 1)
)
if mibBuilder.loadTexts:
    xcmHrAdminObjectService.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminObjectService.setReference("""\
See: 'xcmSysAdminObject...' in XCMI System Admin MIB. See: 'XcmSecPosixVerbs'
and 'xcmSecServiceTypeOID' in XCMI Security TC/MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminObjectService.setDescription("""\
The host system object management service.
""")
_XcmHrAdminServerService_ObjectIdentity = ObjectIdentity
xcmHrAdminServerService = _XcmHrAdminServerService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 3, 2)
)
if mibBuilder.loadTexts:
    xcmHrAdminServerService.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminServerService.setReference("""\
See: 'xcmSysAdminServer...' in XCMI System Admin MIB,
'hrSW[Running|Installed]Table' in IETF HR MIB, and
'xcmHrSW[Running|Installed]ExtTable' in XCMI HRX MIB. See: 'XcmSecPosixVerbs'
and 'xcmSecServiceTypeOID' in XCMI Security TC/MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminServerService.setDescription("""\
The host system server management service.
""")
_XcmHrAdminDeviceService_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceService = _XcmHrAdminDeviceService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 3, 3)
)
if mibBuilder.loadTexts:
    xcmHrAdminDeviceService.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminDeviceService.setReference("""\
See: 'xcmSysAdminDevice...' in XCMI System Admin MIB, 'hrDeviceTable' in IETF
HR MIB, and 'xcmHrDev[Info|Help|Mgmt|Power|Traffic|Calendar]Table' in XCMI HRX
MIB. See: 'XcmSecPosixVerbs' and 'xcmSecServiceTypeOID' in XCMI Security
TC/MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminDeviceService.setDescription("""\
The host system device management service.
""")
_XcmHrAdminJobService_ObjectIdentity = ObjectIdentity
xcmHrAdminJobService = _XcmHrAdminJobService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 3, 4)
)
if mibBuilder.loadTexts:
    xcmHrAdminJobService.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminJobService.setReference("""\
See: 'xcmSysAdminJob...' in XCMI System Admin MIB, and 'xcmJob[...]Table' in
XCMI Job Monitoring MIB. See: 'XcmSecPosixVerbs' and 'xcmSecServiceTypeOID' in
XCMI Security TC/MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminJobService.setDescription("""\
The host system job management service.
""")
_XcmHrAdminDocService_ObjectIdentity = ObjectIdentity
xcmHrAdminDocService = _XcmHrAdminDocService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 3, 5)
)
if mibBuilder.loadTexts:
    xcmHrAdminDocService.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminDocService.setReference("""\
See: 'xcmSysAdminDoc...' in XCMI System Admin MIB, and 'xcmDoc[...]Table' in
XCMI Job Monitoring MIB. See: 'XcmSecPosixVerbs' and 'xcmSecServiceTypeOID' in
XCMI Security TC/MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminDocService.setDescription("""\
The host system document management service.
""")
_XcmHrAdminSecurityService_ObjectIdentity = ObjectIdentity
xcmHrAdminSecurityService = _XcmHrAdminSecurityService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 3, 6)
)
if mibBuilder.loadTexts:
    xcmHrAdminSecurityService.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminSecurityService.setReference("""\
See: 'xcmSysAdminSecurity...' in XCMI System Admin MIB. See: 'XcmSecPosixVerbs'
and 'xcmSecServiceTypeOID' in XCMI Security TC/MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminSecurityService.setDescription("""\
The host system security management service.
""")
_XcmHrAdminCommsService_ObjectIdentity = ObjectIdentity
xcmHrAdminCommsService = _XcmHrAdminCommsService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 3, 7)
)
if mibBuilder.loadTexts:
    xcmHrAdminCommsService.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminCommsService.setReference("""\
See: 'xcmSysAdminComms...' in XCMI System Admin MIB and XCMI Comms Config and
Comms Engine MIBs. See: 'XcmSecPosixVerbs' and 'xcmSecServiceTypeOID' in XCMI
Security TC/MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminCommsService.setDescription("""\
The host system communications management service.
""")
_XcmHrAdminDeviceOperationTypes_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceOperationTypes = _XcmHrAdminDeviceOperationTypes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4)
)
if mibBuilder.loadTexts:
    xcmHrAdminDeviceOperationTypes.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrAdminDeviceOperationTypes.setReference("""\
See: 'xcmSec[Master|Policy]VerbTypeOID' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrAdminDeviceOperationTypes.setDescription("""\
The root of all host resources admin device operation types defined in the Host
Resources Extensions TC. Usage: The following OIDs support access control for
the simple device admin operations defined in 'XcmHrDevMgmtCommandRequest' and
used in 'xcmHrDevMgmtCommandRequest' in the XCMI HRX MIB, via
'xcmSec[Master|Policy]VerbTypeOID' in the XCMI Security MIB, WITHOUT requiring
implementation of the XCMI System Admin MIB.
""")
_XcmHrAdminDeviceNone_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceNone = _XcmHrAdminDeviceNone_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 1)
)
_XcmHrAdminDeviceStartup_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceStartup = _XcmHrAdminDeviceStartup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 2)
)
_XcmHrAdminDeviceResetWarning_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceResetWarning = _XcmHrAdminDeviceResetWarning_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 3)
)
_XcmHrAdminDeviceTest_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceTest = _XcmHrAdminDeviceTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 4)
)
_XcmHrAdminDeviceShutdown_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceShutdown = _XcmHrAdminDeviceShutdown_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 5)
)
_XcmHrAdminDeviceQuiesce_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceQuiesce = _XcmHrAdminDeviceQuiesce_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 6)
)
_XcmHrAdminDeviceResetCounters_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceResetCounters = _XcmHrAdminDeviceResetCounters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 7)
)
_XcmHrAdminDeviceResetWarm_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceResetWarm = _XcmHrAdminDeviceResetWarm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 8)
)
_XcmHrAdminDeviceResetCold_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceResetCold = _XcmHrAdminDeviceResetCold_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 9)
)
_XcmHrAdminDeviceResetFactory_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceResetFactory = _XcmHrAdminDeviceResetFactory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 10)
)
_XcmHrAdminDeviceFlushInput_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceFlushInput = _XcmHrAdminDeviceFlushInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 11)
)
_XcmHrAdminDeviceFlushOutput_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceFlushOutput = _XcmHrAdminDeviceFlushOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 12)
)
_XcmHrAdminDeviceFlushInOut_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceFlushInOut = _XcmHrAdminDeviceFlushInOut_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 13)
)
_XcmHrAdminDeviceManage_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceManage = _XcmHrAdminDeviceManage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 14)
)
_XcmHrAdminDeviceRefresh_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceRefresh = _XcmHrAdminDeviceRefresh_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 15)
)
_XcmHrAdminDeviceWarmUp_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceWarmUp = _XcmHrAdminDeviceWarmUp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 16)
)
_XcmHrAdminDeviceCoolDown_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceCoolDown = _XcmHrAdminDeviceCoolDown_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 17)
)
_XcmHrAdminDeviceEnergySave_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceEnergySave = _XcmHrAdminDeviceEnergySave_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 18)
)
_XcmHrAdminDeviceWakeUp_ObjectIdentity = ObjectIdentity
xcmHrAdminDeviceWakeUp = _XcmHrAdminDeviceWakeUp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 19)
)
_XcmHrAdminDevicePowerToReady_ObjectIdentity = ObjectIdentity
xcmHrAdminDevicePowerToReady = _XcmHrAdminDevicePowerToReady_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 20)
)
_XcmHrAdminDevicePowerToStandby_ObjectIdentity = ObjectIdentity
xcmHrAdminDevicePowerToStandby = _XcmHrAdminDevicePowerToStandby_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 21)
)
_XcmHrAdminDevicePowerToSleep_ObjectIdentity = ObjectIdentity
xcmHrAdminDevicePowerToSleep = _XcmHrAdminDevicePowerToSleep_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 4, 22)
)
_XCmHrDummy_ObjectIdentity = ObjectIdentity
xCmHrDummy = _XCmHrDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999)
)
_XCmHrDevCalendarDayOfWeek_Type = XcmHrDevCalendarDayOfWeek
_XCmHrDevCalendarDayOfWeek_Object = MibScalar
xCmHrDevCalendarDayOfWeek = _XCmHrDevCalendarDayOfWeek_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 1),
    _XCmHrDevCalendarDayOfWeek_Type()
)
xCmHrDevCalendarDayOfWeek.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevCalendarDayOfWeek.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevCalendarDayOfWeek.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevCalendarTimeOfDay_Type = XcmHrDevCalendarTimeOfDay
_XCmHrDevCalendarTimeOfDay_Object = MibScalar
xCmHrDevCalendarTimeOfDay = _XCmHrDevCalendarTimeOfDay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 2),
    _XCmHrDevCalendarTimeOfDay_Type()
)
xCmHrDevCalendarTimeOfDay.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevCalendarTimeOfDay.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevCalendarTimeOfDay.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevDetailType_Type = XcmHrDevDetailType
_XCmHrDevDetailType_Object = MibScalar
xCmHrDevDetailType = _XCmHrDevDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 3),
    _XCmHrDevDetailType_Type()
)
xCmHrDevDetailType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevDetailType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevDetailUnitClass_Type = XcmHrDevDetailUnitClass
_XCmHrDevDetailUnitClass_Object = MibScalar
xCmHrDevDetailUnitClass = _XCmHrDevDetailUnitClass_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 4),
    _XCmHrDevDetailUnitClass_Type()
)
xCmHrDevDetailUnitClass.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevDetailUnitClass.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevDetailUnitClass.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevInfoRealization_Type = XcmHrDevInfoRealization
_XCmHrDevInfoRealization_Object = MibScalar
xCmHrDevInfoRealization = _XCmHrDevInfoRealization_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 5),
    _XCmHrDevInfoRealization_Type()
)
xCmHrDevInfoRealization.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevInfoRealization.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevInfoRealization.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevInfoStatus_Type = XcmHrDevInfoStatus
_XCmHrDevInfoStatus_Object = MibScalar
xCmHrDevInfoStatus = _XCmHrDevInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 6),
    _XCmHrDevInfoStatus_Type()
)
xCmHrDevInfoStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevInfoStatus.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevInfoStatus.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevInfoXStatus_Type = XcmHrDevInfoXStatus
_XCmHrDevInfoXStatus_Object = MibScalar
xCmHrDevInfoXStatus = _XCmHrDevInfoXStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 7),
    _XCmHrDevInfoXStatus_Type()
)
xCmHrDevInfoXStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevInfoXStatus.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevInfoXStatus.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevInfoConditions_Type = XcmHrDevInfoConditions
_XCmHrDevInfoConditions_Object = MibScalar
xCmHrDevInfoConditions = _XCmHrDevInfoConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 8),
    _XCmHrDevInfoConditions_Type()
)
xCmHrDevInfoConditions.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevInfoConditions.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevInfoConditions.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevInfoXConditions_Type = XcmHrDevInfoXConditions
_XCmHrDevInfoXConditions_Object = MibScalar
xCmHrDevInfoXConditions = _XCmHrDevInfoXConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 9),
    _XCmHrDevInfoXConditions_Type()
)
xCmHrDevInfoXConditions.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevInfoXConditions.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevInfoXConditions.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevMgmtCommandRequest_Type = XcmHrDevMgmtCommandRequest
_XCmHrDevMgmtCommandRequest_Object = MibScalar
xCmHrDevMgmtCommandRequest = _XCmHrDevMgmtCommandRequest_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 10),
    _XCmHrDevMgmtCommandRequest_Type()
)
xCmHrDevMgmtCommandRequest.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevMgmtCommandRequest.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevMgmtCommandRequest.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevMgmtCommandData_Type = XcmHrDevMgmtCommandData
_XCmHrDevMgmtCommandData_Object = MibScalar
xCmHrDevMgmtCommandData = _XCmHrDevMgmtCommandData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 11),
    _XCmHrDevMgmtCommandData_Type()
)
xCmHrDevMgmtCommandData.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevMgmtCommandData.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevMgmtCommandData.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevMgmtCommandDataTag_Type = XcmHrDevMgmtCommandDataTag
_XCmHrDevMgmtCommandDataTag_Object = MibScalar
xCmHrDevMgmtCommandDataTag = _XCmHrDevMgmtCommandDataTag_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 12),
    _XCmHrDevMgmtCommandDataTag_Type()
)
xCmHrDevMgmtCommandDataTag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevMgmtCommandDataTag.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevMgmtCommandDataTag.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevPowerModeType_Type = XcmHrDevPowerModeType
_XCmHrDevPowerModeType_Object = MibScalar
xCmHrDevPowerModeType = _XCmHrDevPowerModeType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 13),
    _XCmHrDevPowerModeType_Type()
)
xCmHrDevPowerModeType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevPowerModeType.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevPowerModeType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevPowerTimeUnit_Type = XcmHrDevPowerTimeUnit
_XCmHrDevPowerTimeUnit_Object = MibScalar
xCmHrDevPowerTimeUnit = _XCmHrDevPowerTimeUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 14),
    _XCmHrDevPowerTimeUnit_Type()
)
xCmHrDevPowerTimeUnit.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevPowerTimeUnit.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevPowerTimeUnit.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDevTrafficUnit_Type = XcmHrDevTrafficUnit
_XCmHrDevTrafficUnit_Object = MibScalar
xCmHrDevTrafficUnit = _XCmHrDevTrafficUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 15),
    _XCmHrDevTrafficUnit_Type()
)
xCmHrDevTrafficUnit.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDevTrafficUnit.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDevTrafficUnit.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrGroupSupport_Type = XcmHrGroupSupport
_XCmHrGroupSupport_Object = MibScalar
xCmHrGroupSupport = _XCmHrGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 16),
    _XCmHrGroupSupport_Type()
)
xCmHrGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrSWRunXStatus_Type = XcmHrSWRunXStatus
_XCmHrSWRunXStatus_Object = MibScalar
xCmHrSWRunXStatus = _XCmHrSWRunXStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 17),
    _XCmHrSWRunXStatus_Type()
)
xCmHrSWRunXStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrSWRunXStatus.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrSWRunXStatus.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrStorageDetailType_Type = XcmHrStorageDetailType
_XCmHrStorageDetailType_Object = MibScalar
xCmHrStorageDetailType = _XCmHrStorageDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 18),
    _XCmHrStorageDetailType_Type()
)
xCmHrStorageDetailType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrStorageDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrStorageDetailType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrStorageRealization_Type = XcmHrStorageRealization
_XCmHrStorageRealization_Object = MibScalar
xCmHrStorageRealization = _XCmHrStorageRealization_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 19),
    _XCmHrStorageRealization_Type()
)
xCmHrStorageRealization.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrStorageRealization.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrStorageRealization.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDpaAvailability_Type = XcmHrDpaAvailability
_XCmHrDpaAvailability_Object = MibScalar
xCmHrDpaAvailability = _XCmHrDpaAvailability_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 20),
    _XCmHrDpaAvailability_Type()
)
xCmHrDpaAvailability.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDpaAvailability.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDpaAvailability.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDpaConditions_Type = XcmHrDpaConditions
_XCmHrDpaConditions_Object = MibScalar
xCmHrDpaConditions = _XCmHrDpaConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 21),
    _XCmHrDpaConditions_Type()
)
xCmHrDpaConditions.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDpaConditions.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDpaConditions.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDpaJobValidateSupport_Type = XcmHrDpaJobValidateSupport
_XCmHrDpaJobValidateSupport_Object = MibScalar
xCmHrDpaJobValidateSupport = _XCmHrDpaJobValidateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 22),
    _XCmHrDpaJobValidateSupport_Type()
)
xCmHrDpaJobValidateSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDpaJobValidateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDpaJobValidateSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDpaObjectClassSupport_Type = XcmHrDpaObjectClassSupport
_XCmHrDpaObjectClassSupport_Object = MibScalar
xCmHrDpaObjectClassSupport = _XCmHrDpaObjectClassSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 23),
    _XCmHrDpaObjectClassSupport_Type()
)
xCmHrDpaObjectClassSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDpaObjectClassSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDpaObjectClassSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDpaState_Type = XcmHrDpaState
_XCmHrDpaState_Object = MibScalar
xCmHrDpaState = _XCmHrDpaState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 24),
    _XCmHrDpaState_Type()
)
xCmHrDpaState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDpaState.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDpaState.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrDetailTableEnumTC_Type = XcmHrDetailTableEnumTC
_XCmHrDetailTableEnumTC_Object = MibScalar
xCmHrDetailTableEnumTC = _XCmHrDetailTableEnumTC_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 25),
    _XCmHrDetailTableEnumTC_Type()
)
xCmHrDetailTableEnumTC.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrDetailTableEnumTC.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrDetailTableEnumTC.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrSuppliesClassTC_Type = XcmHrSuppliesClassTC
_XCmHrSuppliesClassTC_Object = MibScalar
xCmHrSuppliesClassTC = _XCmHrSuppliesClassTC_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 26),
    _XCmHrSuppliesClassTC_Type()
)
xCmHrSuppliesClassTC.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrSuppliesClassTC.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrSuppliesClassTC.setDescription("""\
Dummy - DO NOT USE
""")
_XCmHrConsoleDefaultService_Type = XcmHrConsoleDefaultService
_XCmHrConsoleDefaultService_Object = MibScalar
xCmHrConsoleDefaultService = _XCmHrConsoleDefaultService_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 52, 999, 27),
    _XCmHrConsoleDefaultService_Type()
)
xCmHrConsoleDefaultService.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmHrConsoleDefaultService.setStatus("current")
if mibBuilder.loadTexts:
    xCmHrConsoleDefaultService.setDescription("""\
Dummy - DO NOT USE
""")
_XcmHrMIB_ObjectIdentity = ObjectIdentity
xcmHrMIB = _XcmHrMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53)
)
if mibBuilder.loadTexts:
    xcmHrMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrMIB.setDescription("""\
Version: 5.602.pub The MIB module for extended configuration and management of
various host resources for network accessible host systems. This module
augments and extends the original IETF Host Resources MIB (RFC 2790). Usage:
This MIB module introduces support for the 'realization' of both 'physical' and
'logical' devices, consistent with the Document Printing Application (DPA),
ISO/IEC 10175, as reflected in the object 'xcmHrDevInfoRealization'. Note:
Conforming implementations SHALL NOT 'bubble up' status from 'physical' devices
to associated 'logical' devices. All devices SHALL report their own status
ONLY. See: Section 9 'Supplement' in XCMI Extensions to IETF Host Resources TC,
for implementation guidance for this MIB module. Copyright (C) 1995-2006 Xerox
Corporation. All Rights Reserved.
""")
_XcmHrMIBConformance_ObjectIdentity = ObjectIdentity
xcmHrMIBConformance = _XcmHrMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2)
)
_XcmHrMIBGroups_ObjectIdentity = ObjectIdentity
xcmHrMIBGroups = _XcmHrMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2)
)
_XcmHrDevInfo_ObjectIdentity = ObjectIdentity
xcmHrDevInfo = _XcmHrDevInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3)
)
_XcmHrDevInfoV1EventOID_ObjectIdentity = ObjectIdentity
xcmHrDevInfoV1EventOID = _XcmHrDevInfoV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 1)
)
if mibBuilder.loadTexts:
    xcmHrDevInfoV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever a
device status variable changes. See SNMPv2 trap definition
'xcmHrDevInfoV2Event' below for 'special semantics'.
""")
_XcmHrDevInfoV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmHrDevInfoV2EventPrefix = _XcmHrDevInfoV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 1, 0)
)
_XcmHrDevInfoTable_Object = MibTable
xcmHrDevInfoTable = _XcmHrDevInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevInfoTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoTable.setDescription("""\
A 'sparse' table containing device info objects for installed and (possibly)
active devices on this host system, augmenting the basic entries in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790). Usage: Although this
group is Mandatory in this MIB module, this table is 'sparse' because
conforming management agents need NOT implement an entry in 'xcmHrDevInfoTable'
for ALL of the installed (and instrumented) devices in 'hrDeviceTable'. Usage:
Conforming management agents SHALL implement an entry in 'xcmHrDevInfoTable'
for the following device types (if they are installed devices in
'hrDeviceTable'): 'hrDevicePrinter' (from IETF Host Resource MIB, RFC 2790);
and 'xcmHrDeviceHostSystem', 'xcmHrDeviceScanner', 'xcmHrDeviceCopier',
'xcmHrDeviceFax', and 'xcmHrDeviceMailbox' (from XCMI HRX TC).
""")
_XcmHrDevInfoEntry_Object = MibTableRow
xcmHrDevInfoEntry = _XcmHrDevInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1)
)
xcmHrDevInfoEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDevInfoEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoEntry.setDescription("""\
A 'sparse' entry containing device info objects for an installed and (possibly)
active device on this host system, augmenting a basic entry in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevInfoRowStatus_Type = RowStatus
_XcmHrDevInfoRowStatus_Object = MibTableColumn
xcmHrDevInfoRowStatus = _XcmHrDevInfoRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 1),
    _XcmHrDevInfoRowStatus_Type()
)
xcmHrDevInfoRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrDevInfoTable' and ALSO manages the row status of the associated
conceptual row in the 'hrDeviceTable' of the IETF Host Resources MIB (RFC
2790). Usage: Conforming implementations which support static rows SHALL
support 'active' and 'notInService' writes to this 'xcmHrDevInfoRowStatus' row
status object; and SHALL clear the 'xcmHrDevInfoGroup' bit in
'xcmHrGeneralCreateSupport' in the 'xcmHrGeneralTable'. Usage: Conforming
implementations which support dynamic rows SHALL support 'createAndGo' and
'destroy' writes to this 'xcmHrDevInfoRowStatus' row status object; and SHALL
set the 'xcmHrDevInfoGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrDevInfoName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevInfoName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevInfoName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevInfoName_Object = MibTableColumn
xcmHrDevInfoName = _XcmHrDevInfoName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 2),
    _XcmHrDevInfoName_Type()
)
xcmHrDevInfoName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoName.setReference("""\
See: 'hrDeviceDescr' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoName.setDescription("""\
Human-readable device name, used by system administrators and end users to
identify this device for systems management. Usage: This device name SHALL be
the one normally used in a CLI/GUI/API for control of this system or device
(eg, 'showstopper.sample.com' or 'showstopper.sample.com/lpt1:') Usage:
Conforming management agents, which ALSO implement the the Printer MIB v2,
SHALL set 'xcmHrDevInfoName' to the SAME value as 'prtGeneralPrinterName' for
the SAME 'hrDevicePrinter' row (i.e., the values of these two objects SHALL be
interlocked).
""")


class _XcmHrDevInfoSerialNumber_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevInfoSerialNumber based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevInfoSerialNumber_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevInfoSerialNumber_Object = MibTableColumn
xcmHrDevInfoSerialNumber = _XcmHrDevInfoSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 3),
    _XcmHrDevInfoSerialNumber_Type()
)
xcmHrDevInfoSerialNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoSerialNumber.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoSerialNumber.setReference("""\
See: 'hrDeviceDescr' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoSerialNumber.setDescription("""\
Human-readable serial number, used by system administrators and end users to
identify this device for systems management. Usage: Conforming management
agents, which ALSO implement the the Printer MIB v2, SHALL set
'xcmHrDevInfoSerialNumber' to the SAME value as 'prtGeneralSerialNumber' for
the SAME 'hrDevicePrinter' row (i.e., the values of these two objects SHALL be
interlocked).
""")


class _XcmHrDevInfoRealization_Type(XcmHrDevInfoRealization):
    """Custom type xcmHrDevInfoRealization based on XcmHrDevInfoRealization"""


_XcmHrDevInfoRealization_Object = MibTableColumn
xcmHrDevInfoRealization = _XcmHrDevInfoRealization_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 4),
    _XcmHrDevInfoRealization_Type()
)
xcmHrDevInfoRealization.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoRealization.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoRealization.setReference("""\
See: 'hrDeviceType' in the Device group of the IETF Host Resources MIB (RFC
2790). See: Section 9.4 (pages 181 to 184) of DPA (Document Printing
Application) ISO/IEC 10175 (Final Text, March 1996) for a discussion of
'printer realizations' of 'physical', 'logical', and 'logical-and-physical'
types (the latter peculiar to DPA).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoRealization.setDescription("""\
An extended device type (or device 'realization'), used by system
administrators and end users of this device.
""")
_XcmHrDevInfoXStatus_Type = XcmHrDevInfoXStatus
_XcmHrDevInfoXStatus_Object = MibTableColumn
xcmHrDevInfoXStatus = _XcmHrDevInfoXStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 5),
    _XcmHrDevInfoXStatus_Type()
)
xcmHrDevInfoXStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevInfoXStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoXStatus.setReference("""\
See: Section 9.4.9 'Printer-state' (page 185) of DPA (Document Printing
Application) ISO/IEC 10175 (Final Text, March 1996) for a discussion of the
printer states used here. Note that the DPA state 'connecting-to-printer' has
no meaning in the context of a 'physical' printer device, but only in the
context of an intermediate DP-Server presenting a 'logical' printer device.
See: 'hrPrinterStatus' and 'hrPrinterDetectedErrorState' in IETF Host Resources
MIB (RFC 2790). See: 'hrDeviceStatus' in the Device group of the IETF Host
Resources MIB (RFC 2790). See: 'xcmHrDevInfoConditions' and
'xcmHrDevInfoXConditions' in the Host Resources Extensions MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoXStatus.setDescription("""\
An extended device status, used by system administrators and end users of this
device (here, read 'state' for 'status'). Usage: Conforming implementations
SHALL NOT 'bubble up' status from 'physical' devices to associated 'logical'
devices. All devices SHALL report their own status ONLY. Usage: Exactly one
enumeration of extended device status SHALL be defined, with ranges for each
basic device type (eg, 'hrDevicePrinter'). The legal range for extended device
status for a given device type (either defined by RFC 2790 or by this MIB) is
found by multiplying the final arc of the the device type OID by 100 - the
result is the device specific range base - the end of the device specific range
is 99 larger. These device specific extended device status values SHALL be
reissued periodically in the 'XcmHrDevInfoXStatus' textual convention.
""")
_XcmHrDevInfoConditions_Type = XcmHrDevInfoConditions
_XcmHrDevInfoConditions_Object = MibTableColumn
xcmHrDevInfoConditions = _XcmHrDevInfoConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 6),
    _XcmHrDevInfoConditions_Type()
)
xcmHrDevInfoConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevInfoConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoConditions.setReference("""\
See: 'hrDeviceStatus' in the Device group of the IETF Host Resources MIB (RFC
2790). See: 'xcmHrDevInfoXStatus' and 'xcmHrDevInfoXConditions' in the Host
Resources Extensions MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoConditions.setDescription("""\
A relatively generic description of the current 'conditions' of this device,
specified in a bit-mask. Usage: It is desirable that the implementor report
'conditions' of all devices corresponding to conceptual rows in the
'hrDeviceTable' as accurately as feasible. 'Conditions' occur within or across
'states' in a finite state machine (FSM) implementation of a device. They
represent both short term and long term conditions.
""")
_XcmHrDevInfoXConditions_Type = XcmHrDevInfoXConditions
_XcmHrDevInfoXConditions_Object = MibTableColumn
xcmHrDevInfoXConditions = _XcmHrDevInfoXConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 7),
    _XcmHrDevInfoXConditions_Type()
)
xcmHrDevInfoXConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevInfoXConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoXConditions.setReference("""\
See: 'hrDeviceStatus' in the Device group of the IETF Host Resources MIB (RFC
2790). See: 'xcmHrDevInfoXStatus' and 'xcmHrDevInfoConditions' in the Host
Resources Extensions MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoXConditions.setDescription("""\
A device specific description of the extended 'conditions' of this device,
specified in a bit-mask. Usage: For FUTURE expansion. Usage: Exactly one bit
mask of extended device conditions SHALL be defined for each basic device type
(eg, 'hrDevicePrinter'). These device specific extended device conditions
values SHALL be reissued periodically in the 'XcmHrDevInfoXConditions' textual
convention. These device specific extended device conditions are mutually
exclusive and 'overloaded' in the single reporting object
'xcmHrDevInfoXConditions'.
""")


class _XcmHrDevInfoInstallDate_Type(DateAndTime):
    """Custom type xcmHrDevInfoInstallDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmHrDevInfoInstallDate_Object = MibTableColumn
xcmHrDevInfoInstallDate = _XcmHrDevInfoInstallDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 8),
    _XcmHrDevInfoInstallDate_Type()
)
xcmHrDevInfoInstallDate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoInstallDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoInstallDate.setReference("""\
See: 'hrDeviceDescr' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoInstallDate.setDescription("""\
The date of the most recent install or upgrade of the device represented by
this conceptual row in the 'hrDeviceTable'.
""")


class _XcmHrDevInfoResetDate_Type(DateAndTime):
    """Custom type xcmHrDevInfoResetDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmHrDevInfoResetDate_Object = MibTableColumn
xcmHrDevInfoResetDate = _XcmHrDevInfoResetDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 9),
    _XcmHrDevInfoResetDate_Type()
)
xcmHrDevInfoResetDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevInfoResetDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoResetDate.setReference("""\
See: 'hrDeviceDescr' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoResetDate.setDescription("""\
The date of the most recent auto or managed reset of the device represented by
this conceptual row in the 'hrDeviceTable'.
""")
_XcmHrDevInfoNextDeviceIndex_Type = Cardinal32
_XcmHrDevInfoNextDeviceIndex_Object = MibTableColumn
xcmHrDevInfoNextDeviceIndex = _XcmHrDevInfoNextDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 10),
    _XcmHrDevInfoNextDeviceIndex_Type()
)
xcmHrDevInfoNextDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoNextDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoNextDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoNextDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to: a) the next associated row in
the 'hrDeviceTable'; or b) zero if this is the last associated conceptual row
in a given set; or c) zero if this conceptual row is NOT part of a set.
""")
_XcmHrDevInfoPreviousDeviceIndex_Type = Cardinal32
_XcmHrDevInfoPreviousDeviceIndex_Object = MibTableColumn
xcmHrDevInfoPreviousDeviceIndex = _XcmHrDevInfoPreviousDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 11),
    _XcmHrDevInfoPreviousDeviceIndex_Type()
)
xcmHrDevInfoPreviousDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoPreviousDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoPreviousDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoPreviousDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to: a) the previous associated row
in the 'hrDeviceTable'; or b) zero if this is the first associated conceptual
row in a given set; or c) zero if this conceptual row is NOT part of a set.
""")
_XcmHrDevInfoPhysicalDeviceIndex_Type = Cardinal32
_XcmHrDevInfoPhysicalDeviceIndex_Object = MibTableColumn
xcmHrDevInfoPhysicalDeviceIndex = _XcmHrDevInfoPhysicalDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 12),
    _XcmHrDevInfoPhysicalDeviceIndex_Type()
)
xcmHrDevInfoPhysicalDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoPhysicalDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoPhysicalDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoPhysicalDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the directly associated
conceptual row in the 'hrDeviceTable' representing: a) the first underlying
'physical' device (if any), if this row has 'xcmHrDevInfoRealization' of
'logical'; or b) the first subordinate 'physical' device (if any), if this row
has 'xcmHrDevInfoRealization' of 'physical' or 'logicalAndPhysical'; or c) zero
if there is no underlying or subordinate 'physical' device associated with this
row (ie, this device).
""")


class _XcmHrDevInfoPriority_Type(Integer32):
    """Custom type xcmHrDevInfoPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XcmHrDevInfoPriority_Type.__name__ = "Integer32"
_XcmHrDevInfoPriority_Object = MibTableColumn
xcmHrDevInfoPriority = _XcmHrDevInfoPriority_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 13),
    _XcmHrDevInfoPriority_Type()
)
xcmHrDevInfoPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoPriority.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoPriority.setReference("""\
See: 'xcmSvcMonServicePriority' in XCMI Service Monitoring MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoPriority.setDescription("""\
The current priority of this device. Usage: The scheduling priority of this
device, where '0' is unspecified (default), '1' is lowest, and '100' is
highest.
""")


class _XcmHrDevInfoXeroxAssetTagNumber_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevInfoXeroxAssetTagNumber based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_XcmHrDevInfoXeroxAssetTagNumber_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevInfoXeroxAssetTagNumber_Object = MibTableColumn
xcmHrDevInfoXeroxAssetTagNumber = _XcmHrDevInfoXeroxAssetTagNumber_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 14),
    _XcmHrDevInfoXeroxAssetTagNumber_Type()
)
xcmHrDevInfoXeroxAssetTagNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoXeroxAssetTagNumber.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoXeroxAssetTagNumber.setReference("""\
See: 'hrDeviceDescr' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoXeroxAssetTagNumber.setDescription("""\
Human-readable, alpha-numeric ID used by Xerox and Xerox managed service
providers to uniquely identify a device ACROSS back-end financial, printer
management, asset management, and help desk system applications. The Asset Tag
Number is an infra- structure management de facto standard for asset
identification for use by Xerox and Xerox managed service providers. Usage:
Conforming management agents SHALL set 'xcmHrDevInfoXeroxAssetTagNumber' to the
SAME value as entered at a device's local UI, at a device's web UI interface,
and as shown on the device's configuration sheet.
""")


class _XcmHrDevInfoCustomerAssetNumber_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevInfoCustomerAssetNumber based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_XcmHrDevInfoCustomerAssetNumber_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevInfoCustomerAssetNumber_Object = MibTableColumn
xcmHrDevInfoCustomerAssetNumber = _XcmHrDevInfoCustomerAssetNumber_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 15),
    _XcmHrDevInfoCustomerAssetNumber_Type()
)
xcmHrDevInfoCustomerAssetNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoCustomerAssetNumber.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoCustomerAssetNumber.setReference("""\
See: 'hrDeviceDescr' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoCustomerAssetNumber.setDescription("""\
Human-readable, alpha-numeric ID used by customers of Xerox. This ID is used
system administrators and their designated managed service providers to
uniquely identify a device for customers' internal financial management,
printer management, asset management, and help desk system applications. Usage:
Conforming management agents SHALL set 'xcmHrDevInfoCustomerAssetNumber' to the
SAME value as entered at a device's local UI, at a device's web UI interface,
and as shown on the device's configuration sheet.
""")


class _XcmHrDevInfoPagePackPIN_Type(OctetString):
    """Custom type xcmHrDevInfoPagePackPIN based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_XcmHrDevInfoPagePackPIN_Type.__name__ = "OctetString"
_XcmHrDevInfoPagePackPIN_Object = MibTableColumn
xcmHrDevInfoPagePackPIN = _XcmHrDevInfoPagePackPIN_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 16),
    _XcmHrDevInfoPagePackPIN_Type()
)
xcmHrDevInfoPagePackPIN.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackPIN.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackPIN.setReference("""\
See: 'XcmSvcMonServiceType' in 'Service Monitoring TC'.
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackPIN.setDescription("""\
An alpha-numeric ID used by Xerox and Xerox authorized resellers to enable
devices to use a PagePack model of device distribution. PagePack is a cost per
page contract model - which includes consumables, supplies and service - on
both printer and multifunction systems The PIN number is used to change a
device from purchased consumables device to a PagePack device. Usage: The
device may return a NULL string or the word 'authorized' if the PIN value has
been sent and the device does not want to expose the value to the PIN to
unauthorized viewing. If no PIN has been sent or this functionality is not
supported then a NULL string is returned
""")


class _XcmHrDevInfoPagePackReset_Type(Integer32):
    """Custom type xcmHrDevInfoPagePackReset based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_XcmHrDevInfoPagePackReset_Type.__name__ = "Integer32"
_XcmHrDevInfoPagePackReset_Object = MibTableColumn
xcmHrDevInfoPagePackReset = _XcmHrDevInfoPagePackReset_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 17),
    _XcmHrDevInfoPagePackReset_Type()
)
xcmHrDevInfoPagePackReset.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackReset.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackReset.setReference("""\
See: 'xcmHrDevInfoPagePackPIN' in this mib.
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackReset.setDescription("""\
An enumeration used to get and set the page pack settings. Usage: The device
will return enabled when page pack has been enabled and return disabled when
page pack has been disabled. enabled (1) disabled (2)
""")


class _XcmHrDevInfoPagePackTimer_Type(Integer32):
    """Custom type xcmHrDevInfoPagePackTimer based on Integer32"""
    defaultValue = -1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-2, 2147483647),
    )


_XcmHrDevInfoPagePackTimer_Type.__name__ = "Integer32"
_XcmHrDevInfoPagePackTimer_Object = MibTableColumn
xcmHrDevInfoPagePackTimer = _XcmHrDevInfoPagePackTimer_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 2, 1, 18),
    _XcmHrDevInfoPagePackTimer_Type()
)
xcmHrDevInfoPagePackTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackTimer.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackTimer.setReference("""\
See: 'xcmHrDevInfoPagePackPIN' in this mib.
""")
if mibBuilder.loadTexts:
    xcmHrDevInfoPagePackTimer.setDescription("""\
An timer value for page pack. Usage: The value (-1) means timer not enabled and
a value 0..2147483647 means the timer has been enabled
""")
_XcmHrDevHelp_ObjectIdentity = ObjectIdentity
xcmHrDevHelp = _XcmHrDevHelp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 4)
)
_XcmHrDevHelpTable_Object = MibTable
xcmHrDevHelpTable = _XcmHrDevHelpTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 4, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevHelpTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevHelpTable.setReference("""\
See: 'hrProcessorTable', 'hrNetworkTable', 'hrPrinterTable' in the IETF Host
Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevHelpTable.setDescription("""\
A 'sparse' table containing device help objects for installed and (possibly)
active devices on this host system, augmenting the basic entries in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevHelpEntry_Object = MibTableRow
xcmHrDevHelpEntry = _XcmHrDevHelpEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 4, 2, 1)
)
xcmHrDevHelpEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDevHelpEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevHelpEntry.setDescription("""\
A 'sparse' entry containing device help objects for an installed and (possibly)
active device on this host system, augmenting a basic entry in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevHelpRowStatus_Type = RowStatus
_XcmHrDevHelpRowStatus_Object = MibTableColumn
xcmHrDevHelpRowStatus = _XcmHrDevHelpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 4, 2, 1, 1),
    _XcmHrDevHelpRowStatus_Type()
)
xcmHrDevHelpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevHelpRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevHelpRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevHelpRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrDevHelpTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmHrDevHelpRowStatus' row status object; and SHALL clear the
'xcmHrDevHelpGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrDevHelpRowStatus' row status object; and SHALL set the
'xcmHrDevHelpGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrDevHelpOperatorMessage_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevHelpOperatorMessage based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevHelpOperatorMessage_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevHelpOperatorMessage_Object = MibTableColumn
xcmHrDevHelpOperatorMessage = _XcmHrDevHelpOperatorMessage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 4, 2, 1, 2),
    _XcmHrDevHelpOperatorMessage_Type()
)
xcmHrDevHelpOperatorMessage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevHelpOperatorMessage.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevHelpOperatorMessage.setReference("""\
See: 'hrDeviceDescr' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevHelpOperatorMessage.setDescription("""\
Human-readable operator message, used by system operators and system
administrators to display an operator message for end users of this device. For
example, 'Out to lunch - back at 1pm'.
""")


class _XcmHrDevHelpProblemMessage_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevHelpProblemMessage based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevHelpProblemMessage_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevHelpProblemMessage_Object = MibTableColumn
xcmHrDevHelpProblemMessage = _XcmHrDevHelpProblemMessage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 4, 2, 1, 3),
    _XcmHrDevHelpProblemMessage_Type()
)
xcmHrDevHelpProblemMessage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevHelpProblemMessage.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevHelpProblemMessage.setReference("""\
See: 'hrDeviceDescr' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevHelpProblemMessage.setDescription("""\
Human-readable problem message, used by system operators and system
administrators to display a problem message for end users of this device. For
example, 'Toner low - only small jobs accepted'.
""")
_XcmHrDevHelpCommsAddressIndex_Type = Cardinal32
_XcmHrDevHelpCommsAddressIndex_Object = MibTableColumn
xcmHrDevHelpCommsAddressIndex = _XcmHrDevHelpCommsAddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 4, 2, 1, 4),
    _XcmHrDevHelpCommsAddressIndex_Type()
)
xcmHrDevHelpCommsAddressIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevHelpCommsAddressIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevHelpCommsAddressIndex.setReference("""\
See: Comms Address group of the XCMI Comms Engine MIB, for details of
specification of device help contact info. See: 'XcmSecUserRole' in XCMI
Security TC, for appropriate values for 'xcmCommsAddressUserRole'. See:
'sysContact' in the IETF MIB-II (RFC 1213), for details of specification of
'simple' host system contact info.
""")
if mibBuilder.loadTexts:
    xcmHrDevHelpCommsAddressIndex.setDescription("""\
The value of 'xcmCommsAddressIndex' corresponding to the first associated
conceptual row in the 'xcmCommsAddressTable', or zero if this
'xcmHrDevHelpEntry' does NOT require such information. This 'chain' of address
entries provides device help contact info for end users of this device. For
example, 'system operator' or 'supplies' contact info.
""")
_XcmHrDevMgmt_ObjectIdentity = ObjectIdentity
xcmHrDevMgmt = _XcmHrDevMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5)
)
_XcmHrDevMgmtV1EventOID_ObjectIdentity = ObjectIdentity
xcmHrDevMgmtV1EventOID = _XcmHrDevMgmtV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 1)
)
if mibBuilder.loadTexts:
    xcmHrDevMgmtV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever an
'xcmHrDevMgmtCommandRequest' completes. See SNMPv2 trap definition
'xcmHrDevMgmtV2Event' below for 'special semantics'.
""")
_XcmHrDevMgmtV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmHrDevMgmtV2EventPrefix = _XcmHrDevMgmtV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 1, 0)
)
_XcmHrDevMgmtTable_Object = MibTable
xcmHrDevMgmtTable = _XcmHrDevMgmtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevMgmtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtTable.setReference("""\
See: 'hrProcessorTable', 'hrNetworkTable', 'hrPrinterTable' in the IETF Host
Resources MIB (RFC 2790). See: 'xcmSysAdminRequestTable' in XCMI System Admin
MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtTable.setDescription("""\
A 'sparse' table containing management control objects for installed and
(possibly) active devices on this host system, augmenting the basic entries in
the 'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevMgmtEntry_Object = MibTableRow
xcmHrDevMgmtEntry = _XcmHrDevMgmtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1)
)
xcmHrDevMgmtEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDevMgmtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtEntry.setDescription("""\
A 'sparse' entry containing management control objects for an installed and
(possibly) active device on this host system, augmenting a basic entry in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevMgmtRowStatus_Type = RowStatus
_XcmHrDevMgmtRowStatus_Object = MibTableColumn
xcmHrDevMgmtRowStatus = _XcmHrDevMgmtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 1),
    _XcmHrDevMgmtRowStatus_Type()
)
xcmHrDevMgmtRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrDevMgmtTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmHrDevMgmtRowStatus' row status object; and SHALL clear the
'xcmHrDevMgmtGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrDevMgmtRowStatus' row status object; and SHALL set the
'xcmHrDevMgmtGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrDevMgmtCommandRequest_Type(XcmHrDevMgmtCommandRequest):
    """Custom type xcmHrDevMgmtCommandRequest based on XcmHrDevMgmtCommandRequest"""


_XcmHrDevMgmtCommandRequest_Object = MibTableColumn
xcmHrDevMgmtCommandRequest = _XcmHrDevMgmtCommandRequest_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 2),
    _XcmHrDevMgmtCommandRequest_Type()
)
xcmHrDevMgmtCommandRequest.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandRequest.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandRequest.setReference("""\
See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE
1387.4 / Draft 8, October 1994). See: 'hrDeviceStatus' in the Device group of
the IETF Host Resources MIB (RFC 2790). See: OBJECT clause in MODULE-COMPLIANCE
macro of XCMI Ext to Host Resources MIB, for compliance info. See:
'XcmHrDevMgmtCommandDataTag' textual convention, Section 3.4 'XCMI Standard
Tagged Management Data', and Section 3.5 'Simple Device Management Requests' in
XCMI Ext to Host Resources TC. See: Section 3.5.3 'Secure Simple Device Mgmt
Requests' in XCMI Security TC. See:
'xcmHrDevMgmtCommand[Data|Status|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandRequest.setDescription("""\
The most recent device management command request specified for this conceptual
row in the 'xcmHrDevMgmtTable'. Usage: Conforming management agents SHALL
'reject' any SNMP Set-Request to 'xcmHrDevMgmtCommand[Request|Data]' while
another management operation is already in progress (ie, while
'xcmHrDevMgmtCommandInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: Conforming management stations SHALL
set 'xcmHrDevMgmtCommandRequest' (mgmt operation) and 'xcmHrDevMgmtCommandData'
(mgmt arguments) SIMULTANEOUSLY (in the same SNMP Set-Request PDU).
""")


class _XcmHrDevMgmtCommandData_Type(XcmHrDevMgmtCommandData):
    """Custom type xcmHrDevMgmtCommandData based on XcmHrDevMgmtCommandData"""
    defaultHexValue = ""

    subtypeSpec = XcmHrDevMgmtCommandData.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevMgmtCommandData_Type.__name__ = "XcmHrDevMgmtCommandData"
_XcmHrDevMgmtCommandData_Object = MibTableColumn
xcmHrDevMgmtCommandData = _XcmHrDevMgmtCommandData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 3),
    _XcmHrDevMgmtCommandData_Type()
)
xcmHrDevMgmtCommandData.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandData.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandData.setReference("""\
See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE
1387.4 / Draft 8, October 1994). See: 'hrDeviceStatus' in the Device group of
the IETF Host Resources MIB (RFC 2790). See: 'XcmHrDevMgmtCommandDataTag'
textual convention, Section 3.4 'XCMI Standard Tagged Management Data', and
Section 3.5 'Simple Device Management Requests' in XCMI Ext to Host Resources
TC. See: Section 3.5.3 'Secure Simple Device Mgmt Requests' in XCMI Security
TC. See: 'xcmHrDevMgmtCommand[Request|Status|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandData.setDescription("""\
The most recent device management command data (if any) specified for this
conceptual row in the 'xcmHrDevMgmtTable'. Usage: Conforming management agents
SHALL 'reject' any SNMP Set-Request to 'xcmHrDevMgmtCommand[Request|Data]'
while another management operation is already in progress (ie, while
'xcmHrDevMgmtCommandInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: Conforming management stations SHALL
set 'xcmHrDevMgmtCommandRequest' (mgmt operation) and 'xcmHrDevMgmtCommandData'
(mgmt arguments) SIMULTANEOUSLY (in the same SNMP Set-Request PDU). Usage:
Conformant implementations MUST encrypt passwords, keys, and other security
information stored in this string object.
""")
_XcmHrDevMgmtCommandStatus_Type = XcmGenSNMPv2ErrorStatus
_XcmHrDevMgmtCommandStatus_Object = MibTableColumn
xcmHrDevMgmtCommandStatus = _XcmHrDevMgmtCommandStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 4),
    _XcmHrDevMgmtCommandStatus_Type()
)
xcmHrDevMgmtCommandStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandStatus.setReference("""\
See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE
1387.4 / Draft 8, October 1994). See: 'hrDeviceStatus' in the Device group of
the IETF Host Resources MIB (RFC 2790). See: 'XcmHrDevMgmtCommandDataTag'
textual convention, Section 3.4 'XCMI Standard Tagged Management Data', and
Section 3.5 'Simple Device Management Requests' in XCMI Ext to Host Resources
TC. See: Section 3.5.3 'Secure Simple Device Mgmt Requests' in XCMI Security
TC. See: 'xcmHrDevMgmtCommand[Operation|Data|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandStatus.setDescription("""\
The simple device management error status associated with this conceptual row
in 'xcmHrDevMgmtTable'. Usage: Conforming management agents SHALL set this
object to the value returned in an SNMP Set-Response PDU when a simple device
management operation is 'accepted', ie, when 'xcmHrDevMgmtCommandInProgress'
goes from 'false' to 'true'. Usage: Conforming management agents SHALL set this
object to the value of the completion status of the (possibly deferred) simple
device management operation, when 'xcmHrDevMgmtCommandInProgress' goes from
'true' to 'false'.
""")


class _XcmHrDevMgmtUserPassword_Type(OctetString):
    """Custom type xcmHrDevMgmtUserPassword based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevMgmtUserPassword_Type.__name__ = "OctetString"
_XcmHrDevMgmtUserPassword_Object = MibTableColumn
xcmHrDevMgmtUserPassword = _XcmHrDevMgmtUserPassword_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 5),
    _XcmHrDevMgmtUserPassword_Type()
)
xcmHrDevMgmtUserPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtUserPassword.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtUserPassword.setReference("""\
See: 'xcmHrDevMgmt[Operator|Admin]Password' See: Section 3.5.2 'Secure Password
Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable' in XCMI
System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB. See: Both the
X/Open PSIS (Printing Systems Interoperability Specification) and the new Part
3 'Systems Management' of DPA (ISO/IEC 10175) use the simple three-role scheme
specified here. In Appendix D 'Roles of Users' (pages 108 to 109) of Printer
MIB v1 (RFC 1759), Jay Martin provided an excellent discussion of a number of
user 'role models', including the following ones: User (USER) - A person or
application that submits print jobs to the printer; typically viewed as the
'end user' within the overall printing environment. Operator (OP) - A person
responsible for maintaining a printer on a day-to-day basis, including such
tasks as filling empty media trays, emptying full output trays, replacing toner
cartridges, etc. System Manager (MGR) - A person responsible for configuration
and troubleshooting of components involved in the overall printing environment,
including printers, print queues and network connectivity issues. This person
is typically responsible for ensuring the overall operational integrity of the
print system components, and is typically viewed as the central point of
coordination among all other Role Models.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtUserPassword.setDescription("""\
A protected end user password for this device. Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information
stored in this string object. Usage: All XCMI conforming management agents: a)
SHOULD always return a zero length string in response to an SNMP GetRequest of
this object; b) SHALL NOT return the contents of this object in cleartext (ie,
unencrypted) in response to an SNMP GetRequest; c) SHOULD support (ie, accept)
an authenticated SNMP SetRequest changing the system 'end user password' in
this object. Usage: Conforming management stations and management agents SHOULD
support authentication of SNMP SetRequests via values of
'xcmHrDevMgmt[User|Operator|Admin]Password' in ciphertext (ie, encrypted)
written in 'xcmHrDevMgmtCommandData'. Usage: Conforming management stations MAY
support client-side authentication of user roles and rights via checking values
of 'xcmHrDevMgmt[User|Operator|Admin]Password' presented in client applications
(eg, install tools). WARNING: Such authentication mechanisms do NOT protect
managed systems from attack by other SNMP client applications that do NOT
perform such client-side authentication and are thus inherently weak.
""")


class _XcmHrDevMgmtOperatorPassword_Type(OctetString):
    """Custom type xcmHrDevMgmtOperatorPassword based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevMgmtOperatorPassword_Type.__name__ = "OctetString"
_XcmHrDevMgmtOperatorPassword_Object = MibTableColumn
xcmHrDevMgmtOperatorPassword = _XcmHrDevMgmtOperatorPassword_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 6),
    _XcmHrDevMgmtOperatorPassword_Type()
)
xcmHrDevMgmtOperatorPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtOperatorPassword.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtOperatorPassword.setReference("""\
See: 'xcmHrDevMgmt[User|Admin]Password' See: Section 3.5.2 'Secure Password
Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable' in XCMI
System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtOperatorPassword.setDescription("""\
A protected system operator password for this device. Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information
stored in this string object. Usage: All XCMI conforming management agents: a)
SHOULD always return a zero length string in response to an SNMP GetRequest of
this object; b) SHALL NOT return the contents of this object in cleartext (ie,
unencrypted) in response to an SNMP GetRequest; c) SHOULD support (ie, accept)
an authenticated SNMP SetRequest changing the system 'operator password' in
this object. Usage: Conforming management stations and management agents SHOULD
support authentication of SNMP SetRequests via values of
'xcmHrDevMgmt[User|Operator|Admin]Password' in ciphertext (ie, encrypted)
written in 'xcmHrDevMgmtCommandData'. Usage: Conforming management stations MAY
support client-side authentication of user roles and rights via checking values
of 'xcmHrDevMgmt[User|Operator|Admin]Password' presented in client applications
(eg, install tools). WARNING: Such authentication mechanisms do NOT protect
managed systems from attack by other SNMP client applications that do NOT
perform such client-side authentication and are thus inherently weak.
""")


class _XcmHrDevMgmtAdminPassword_Type(OctetString):
    """Custom type xcmHrDevMgmtAdminPassword based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevMgmtAdminPassword_Type.__name__ = "OctetString"
_XcmHrDevMgmtAdminPassword_Object = MibTableColumn
xcmHrDevMgmtAdminPassword = _XcmHrDevMgmtAdminPassword_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 7),
    _XcmHrDevMgmtAdminPassword_Type()
)
xcmHrDevMgmtAdminPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtAdminPassword.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtAdminPassword.setReference("""\
See: 'xcmHrDevMgmt[User|Operator]Password' See: Section 3.5.2 'Secure Password
Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable' in XCMI
System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtAdminPassword.setDescription("""\
A protected system administrator password for this device. Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information
stored in this string object. Usage: All XCMI conforming management agents: a)
SHOULD always return a zero length string in response to an SNMP GetRequest of
this object; b) SHALL NOT return the contents of this object in cleartext (ie,
unencrypted) in response to an SNMP GetRequest; c) SHOULD support (ie, accept)
an authenticated SNMP SetRequest changing the system 'administrator password'
in this object. Usage: Conforming management stations and management agents
SHOULD support authentication of SNMP SetRequests via values of
'xcmHrDevMgmt[User|Operator|Admin]Password' in ciphertext (ie, encrypted)
written in 'xcmHrDevMgmtCommandData'. Usage: Conforming management stations MAY
support client-side authentication of user roles and rights via checking values
of 'xcmHrDevMgmt[User|Operator|Admin]Password' presented in client applications
(eg, install tools). WARNING: Such authentication mechanisms do NOT protect
managed systems from attack by other SNMP client applications that do NOT
perform such client-side authentication and are thus inherently weak.
""")


class _XcmHrDevMgmtCommandInProgress_Type(TruthValue):
    """Custom type xcmHrDevMgmtCommandInProgress based on TruthValue"""


_XcmHrDevMgmtCommandInProgress_Object = MibTableColumn
xcmHrDevMgmtCommandInProgress = _XcmHrDevMgmtCommandInProgress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 8),
    _XcmHrDevMgmtCommandInProgress_Type()
)
xcmHrDevMgmtCommandInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandInProgress.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandInProgress.setReference("""\
See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE
1387.4 / Draft 8, October 1994). See: 'hrDeviceStatus' in the Device group of
the IETF Host Resources MIB (RFC 2790). See: 'XcmHrDevMgmtCommandDataTag'
textual convention, Section 3.4 'XCMI Standard Tagged Management Data', and
Section 3.5 'Simple Device Management Requests' in XCMI Ext to Host Resources
TC. See: Section 3.5.3 'Secure Simple Device Mgmt Requests' in XCMI Security
TC. See: 'xcmHrDevMgmtCommand[Request|Data|Status]'
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCommandInProgress.setDescription("""\
The device management in progress status associated with this conceptual row in
'xcmHrDevMgmtTable'. Usage: Conforming management agents SHALL 'reject' any
SNMP Set-Request to 'xcmHrDevMgmtCommand[Request|Data]' while another
management operation is already in progress (ie, while
'xcmHrDevMgmtCommandInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3).
""")


class _XcmHrDevMgmtUserName_Type(OctetString):
    """Custom type xcmHrDevMgmtUserName based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevMgmtUserName_Type.__name__ = "OctetString"
_XcmHrDevMgmtUserName_Object = MibTableColumn
xcmHrDevMgmtUserName = _XcmHrDevMgmtUserName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 9),
    _XcmHrDevMgmtUserName_Type()
)
xcmHrDevMgmtUserName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtUserName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtUserName.setReference("""\
See: 'xcmHrDevMgmt[Operator|Admin]Name' See: Section 3.5.2 'Secure Password
Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable' in XCMI
System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB. See: Both the
X/Open PSIS (Printing Systems Interoperability Specification) and the new Part
3 'Systems Management' of DPA (ISO/IEC 10175) use the simple three-role scheme
specified here In Appendix D 'Roles of Users' (pages 108 to 109) of Printer MI
v1 (RFC 1759), Jay Martin provided an excellent discussion of a number of user
'role models', including the following ones: User (USER) - A person or
application that submits print jobs to the printer; typically viewed as the
'end user' within the overall printing environment. Operator (OP) - A person
responsible for maintaining a printer on a day-to-day basis, including such
tasks as filling empty media trays, emptying full output trays, replacing toner
cartridges, etc. System Manager (MGR) - A person responsible for configuration
and troubleshooting of components involved in the overall printing environment,
including printers, print queues and network connectivity issues. This person
is typically responsible for ensuring the overall operational integrity of the
print system components, and is typically viewed as the central point of
coordination among all other Role Models.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtUserName.setDescription("""\
A protected end user Name for this device. Usage: Conformant implementations
MUST encrypt passwords, keys, and other security information stored in this
string object. Usage: All XCMI conforming management agents: a) SHOULD always
return a zero length string in response to an SNMP GetRequest of this object;
b) SHALL NOT return the contents of this object in cleartext (ie, unencrypted)
in response to an SNMP GetRequest; c) SHOULD support (ie, accept) an
authenticated SNMP SetRequest changing the system 'end user Name' in this
object. Usage: Conforming management stations and management agents SHOULD
support authentication of SNMP SetRequests via values of
'xcmHrDevMgmt[User|Operator|Admin]Name' in ciphertext (ie, encrypted) written
in 'xcmHrDevMgmtCommandData'. Usage: Conforming management stations MAY support
client-side authentication of user roles and rights via checking values of
'xcmHrDevMgmt[User|Operator|Admin]Name' presented in client applications (eg,
install tools). WARNING: Such authentication mechanisms do NOT protect managed
systems from attack by other SNMP client applications that do NOT perform such
client-side authentication and are thus inherently weak.
""")


class _XcmHrDevMgmtOperatorName_Type(OctetString):
    """Custom type xcmHrDevMgmtOperatorName based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevMgmtOperatorName_Type.__name__ = "OctetString"
_XcmHrDevMgmtOperatorName_Object = MibTableColumn
xcmHrDevMgmtOperatorName = _XcmHrDevMgmtOperatorName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 10),
    _XcmHrDevMgmtOperatorName_Type()
)
xcmHrDevMgmtOperatorName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtOperatorName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtOperatorName.setReference("""\
See: 'xcmHrDevMgmt[User|Admin]Name' See: Section 3.5.2 'Secure Password Change
Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable' in XCMI System
Admin MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtOperatorName.setDescription("""\
A protected system operator Name for this device. Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information
stored in this string object. Usage: All XCMI conforming management agents: a)
SHOULD always return a zero length string in response to an SNMP GetRequest of
this object; b) SHALL NOT return the contents of this object in cleartext (ie,
unencrypted) in response to an SNMP GetRequest; c) SHOULD support (ie, accept)
an authenticated SNMP SetRequest changing the system 'operator Name' in this
object. Usage: Conforming management stations and management agents SHOULD
support authentication of SNMP SetRequests via values of
'xcmHrDevMgmt[User|Operator|Admin]Name' in ciphertext (ie, encrypted) written
in 'xcmHrDevMgmtCommandData'. Usage: Conforming management stations MAY support
client-side authentication of user roles and rights via checking values of
'xcmHrDevMgmt[User|Operator|Admin]Name' presented in client applications (eg,
install tools). WARNING: Such authentication mechanisms do NOT protect managed
systems from attack by other SNMP client applications that do NOT perform such
client-side authentication and are thus inherently weak.
""")


class _XcmHrDevMgmtAdminName_Type(OctetString):
    """Custom type xcmHrDevMgmtAdminName based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevMgmtAdminName_Type.__name__ = "OctetString"
_XcmHrDevMgmtAdminName_Object = MibTableColumn
xcmHrDevMgmtAdminName = _XcmHrDevMgmtAdminName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 11),
    _XcmHrDevMgmtAdminName_Type()
)
xcmHrDevMgmtAdminName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtAdminName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtAdminName.setReference("""\
See: 'xcmHrDevMgmt[User|Operator]Name' See: Section 3.5.2 'Secure Password
Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable' in XCMI
System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtAdminName.setDescription("""\
A protected system administrator Name for this device. Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information
stored in this string object. Usage: All XCMI conforming management agents: a)
SHOULD always return a zero length string in response to an SNMP GetRequest of
this object; b) SHALL NOT return the contents of this object in cleartext (ie,
unencrypted) in response to an SNMP GetRequest; c) SHOULD support (ie, accept)
an authenticated SNMP SetRequest changing the system 'administrator Name' in
this object. Usage: Conforming management stations and management agents SHOULD
support authentication of SNMP SetRequests via values of
'xcmHrDevMgmt[User|Operator|Admin]Name' in ciphertext (ie, encrypted) written
in 'xcmHrDevMgmtCommandData'. Usage: Conforming management stations MAY support
client-side authentication of user roles and rights via checking values of
'xcmHrDevMgmt[User|Operator|Admin]Name' presented in client applications (eg,
install tools). WARNING: Such authentication mechanisms do NOT protect managed
systems from attack by other SNMP client applications that do NOT perform such
client-side authentication and are thus inherently weak.
""")


class _XcmHrDevMgmtCustomPassword_Type(OctetString):
    """Custom type xcmHrDevMgmtCustomPassword based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevMgmtCustomPassword_Type.__name__ = "OctetString"
_XcmHrDevMgmtCustomPassword_Object = MibTableColumn
xcmHrDevMgmtCustomPassword = _XcmHrDevMgmtCustomPassword_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 2, 1, 12),
    _XcmHrDevMgmtCustomPassword_Type()
)
xcmHrDevMgmtCustomPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCustomPassword.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCustomPassword.setReference("""\
See: 'xcmHrDevMgmt[User|Operator|Admin]Password' See: Section 3.5.2 'Secure
Password Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable'
in XCMI System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevMgmtCustomPassword.setDescription("""\
A protected PDL password for this device. Usage: Conformant implementations
MUST encrypt passwords, keys, and other security information stored in this
string object. Usage: All XCMI conforming management agents: a) SHOULD always
return an encoded string in response to an SNMP GetRequest of this object; b)
SHALL NOT return the contents of this object in cleartext (ie, unencrypted) in
response to an SNMP GetRequest; c) SHOULD support (ie, accept) an unencoded
SNMP SetRequest changing the system 'custom password' in this object. Usage:
Conforming management stations and management agents SHOULD support
authentication of SNMP SetRequests via values of
'xcmHrDevMgmt[User|Operator|Admin|Custom]Password' in written cleartext in
'xcmHrDevMgmtCommandData'. Usage: Conforming management stations MAY support
client-side authentication of user roles and rights via checking values of
'xcmHrDevMgmt[User|Operator|Admin|Custom]Password' presented in client
applications (eg, install tools). WARNING: Such mechanisms do NOT protect
managed systems from attack by other authentication SNMP client applications
that do NOT perform such client-side authentication and are thus inherently
weak.
""")
_XcmHrDevPower_ObjectIdentity = ObjectIdentity
xcmHrDevPower = _XcmHrDevPower_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6)
)
_XcmHrDevPowerTable_Object = MibTable
xcmHrDevPowerTable = _XcmHrDevPowerTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevPowerTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerTable.setReference("""\
See: 'hrProcessorTable', 'hrNetworkTable', 'hrPrinterTable' in the IETF Host
Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerTable.setDescription("""\
A 'sparse' table containing power management cycle objects for installed and
(possibly) active devices on this host system, augmenting the basic entries in
the 'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevPowerEntry_Object = MibTableRow
xcmHrDevPowerEntry = _XcmHrDevPowerEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1)
)
xcmHrDevPowerEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDevPowerEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerEntry.setDescription("""\
A 'sparse' entry containing power management cycle objects for an installed and
(possibly) active device on this host system, augmenting a basic entry in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevPowerRowStatus_Type = RowStatus
_XcmHrDevPowerRowStatus_Object = MibTableColumn
xcmHrDevPowerRowStatus = _XcmHrDevPowerRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 1),
    _XcmHrDevPowerRowStatus_Type()
)
xcmHrDevPowerRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrDevPowerTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmHrDevPowerRowStatus' row status object; and SHALL clear the
'xcmHrDevPowerGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrDevPowerRowStatus' row status object; and SHALL set the
'xcmHrDevPowerGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrDevPowerWarmUpSupport_Type(PresentOnOff):
    """Custom type xcmHrDevPowerWarmUpSupport based on PresentOnOff"""


_XcmHrDevPowerWarmUpSupport_Object = MibTableColumn
xcmHrDevPowerWarmUpSupport = _XcmHrDevPowerWarmUpSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 2),
    _XcmHrDevPowerWarmUpSupport_Type()
)
xcmHrDevPowerWarmUpSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpSupport.setReference("""\
See: 'xcmHrDevPowerWarmUp[Delay|Duration]'
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpSupport.setDescription("""\
A device 'warm up' feature support management object, used by system
administrators of this device. Usage: This object specifies the support present
(if any) for a device 'warm up' feature ('standbyMode' to 'readyMode'). For
example, a photocopier might want to 'warm up' (as a system) (to 'readyMode')
some time after a user presses a button. * 'other(1)' - DEPRECATED - SHALL NOT
be used by conforming implementations * 'on(3)' - device 'warm up' feature is
present and enabled both '...WarmUpDelay' and '...WarmUpDuration' are used - if
'...WarmUpDelay' is zero, then 'warm up' cycle begins immediately after trigger
event - if '...WarmUpDelay' is non-zero, then 'warm up' cycle is delayed for
specified time - if '...WarmUpDuration' is zero, then 'warm up' cycle completes
immediately after initiation - if '...WarmUpDuration' is non-zero, then 'warm
up' cycle requires specified time to complete * 'off(4)' - device 'warm up'
feature is present but disabled both '...WarmUpDelay' and '...WarmUpDuration'
NOT used * 'notPresent(5)' - device 'warm up' feature NOT present on this host
system both '...WarmUpDelay' and '...WarmUpDuration' NOT used
""")


class _XcmHrDevPowerCoolDownSupport_Type(PresentOnOff):
    """Custom type xcmHrDevPowerCoolDownSupport based on PresentOnOff"""


_XcmHrDevPowerCoolDownSupport_Object = MibTableColumn
xcmHrDevPowerCoolDownSupport = _XcmHrDevPowerCoolDownSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 3),
    _XcmHrDevPowerCoolDownSupport_Type()
)
xcmHrDevPowerCoolDownSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownSupport.setReference("""\
See: 'xcmHrDevPowerCoolDown[Delay|Duration]'
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownSupport.setDescription("""\
A device 'cool down' feature support management object, used by system
administrators of this device. Usage: This object specifies the support present
(if any) for a device 'cool down' feature ('readyMode' to 'standbyMode'). For
example, a printer might want to 'cool down' a motor (to 'standbyMode') some
time after the last page printed. * 'other(1)' - DEPRECATED - SHALL NOT be used
by conforming implementations * 'on(3)' - device 'cool down' feature is present
and enabled both '...CoolDownDelay' and '...CoolDownDuration' are used - if
'...CoolDownDelay' is zero, then 'cool down' cycle begins immediately after
trigger event - if '...CoolDownDelay' is non-zero, then 'cool down' cycle is
delayed for specified time - if '...CoolDownDuration' is zero, then 'cool down'
cycle completes immediately after initiation - if '...CoolDownDuration' is non-
zero, then 'cool down' cycle requires specified time to complete * 'off(4)' -
device 'cool down' feature is present but disabled both '...CoolDownDelay' and
'...CoolDownDuration' NOT used * 'notPresent(5)' - device 'cool down' feature
NOT present on this host system both '...CoolDownDelay' and
'...CoolDownDuration' NOT used
""")


class _XcmHrDevPowerEnergySaveSupport_Type(PresentOnOff):
    """Custom type xcmHrDevPowerEnergySaveSupport based on PresentOnOff"""


_XcmHrDevPowerEnergySaveSupport_Object = MibTableColumn
xcmHrDevPowerEnergySaveSupport = _XcmHrDevPowerEnergySaveSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 4),
    _XcmHrDevPowerEnergySaveSupport_Type()
)
xcmHrDevPowerEnergySaveSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveSupport.setReference("""\
See: 'xcmHrDevPowerEnergySave[Delay|Duration]'
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveSupport.setDescription("""\
A device 'energy save' feature support management object, used by system
administrators of this device. Usage: This object specifies the support present
(if any) for a device 'energy save' feature ('standbyMode' to 'sleepMode'). For
example, a printer might want to 'energy save' transition (to 'sleepMode') some
time after the last 'cool down' (to 'standbyMode') completion. * 'other(1)' -
DEPRECATED - SHALL NOT be used by conforming implementations * 'on(3)' - device
'energy save' feature is present and enabled both '...EnergySaveDelay' and
'...EnergySaveDuration' are used - if '...EnergySaveDelay' is zero, then
'energy save' cycle begins immediately after trigger event - if
'...EnergySaveDelay' is non-zero, then 'energy save' cycle is delayed for
specified time - if '...EnergySaveDuration' is zero, then 'energy save' cycle
completes immediately after initiation - if '...EnergySaveDuration' is non-
zero, then 'energy save' cycle requires specified time to complete * 'off(4)' -
device 'energy save' feature is present but disabled both '...EnergySaveDelay'
and '...EnergySaveDuration' NOT used * 'notPresent(5)' - device 'energy save'
feature NOT present on this host system both '...EnergySaveDelay' and
'...EnergySaveDuration' NOT used
""")


class _XcmHrDevPowerTimeUnit_Type(XcmHrDevPowerTimeUnit):
    """Custom type xcmHrDevPowerTimeUnit based on XcmHrDevPowerTimeUnit"""


_XcmHrDevPowerTimeUnit_Object = MibTableColumn
xcmHrDevPowerTimeUnit = _XcmHrDevPowerTimeUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 5),
    _XcmHrDevPowerTimeUnit_Type()
)
xcmHrDevPowerTimeUnit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerTimeUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerTimeUnit.setDescription("""\
A device power cycle time unit, used by system administrators of this device
for power management cycle times. Usage: Used to scale the values in the Device
Power group, for convenience and (optional) high resolution.
""")
_XcmHrDevPowerWarmUpDelay_Type = Integer32
_XcmHrDevPowerWarmUpDelay_Object = MibTableColumn
xcmHrDevPowerWarmUpDelay = _XcmHrDevPowerWarmUpDelay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 6),
    _XcmHrDevPowerWarmUpDelay_Type()
)
xcmHrDevPowerWarmUpDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpDelay.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpDelay.setReference("""\
See: 'xcmHrDevPowerWarmUpSupport' for feature details and
'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for device
'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpDelay.setDescription("""\
A device 'warm up' feature delay time, or zero if none, used by system
administrators of this device. Usage: The time delay after last 'warm up'
trigger event (eg, arrival of a job, some local user action, etc) before the
'warm up' cycle will begin (to power 'readyMode' in 'xcmHrDevInfoConditions').
""")
_XcmHrDevPowerWarmUpDuration_Type = Integer32
_XcmHrDevPowerWarmUpDuration_Object = MibTableColumn
xcmHrDevPowerWarmUpDuration = _XcmHrDevPowerWarmUpDuration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 7),
    _XcmHrDevPowerWarmUpDuration_Type()
)
xcmHrDevPowerWarmUpDuration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpDuration.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpDuration.setReference("""\
See: 'xcmHrDevPowerWarmUpSupport' for feature details and
'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for device
'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerWarmUpDuration.setDescription("""\
A device 'warm up' feature duration, or zero if none, used by system
administrators of this device. Usage: The time after last 'warm up' initiation
before the 'warm up' will complete (to power 'readyMode' in
'xcmHrDevInfoConditions').
""")
_XcmHrDevPowerCoolDownDelay_Type = Integer32
_XcmHrDevPowerCoolDownDelay_Object = MibTableColumn
xcmHrDevPowerCoolDownDelay = _XcmHrDevPowerCoolDownDelay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 8),
    _XcmHrDevPowerCoolDownDelay_Type()
)
xcmHrDevPowerCoolDownDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownDelay.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownDelay.setReference("""\
See: 'xcmHrDevPowerCoolDownSupport' for feature details and
'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for device
'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownDelay.setDescription("""\
A device 'cool down' feature delay time, or zero if none, used by system
administrators of this device. Usage: The time delay after last 'cool down'
trigger event (eg, completion of a job, some local user action, etc) before the
'cool down' cycle will begin (to power 'standbyMode' in
'xcmHrDevInfoConditions').
""")
_XcmHrDevPowerCoolDownDuration_Type = Integer32
_XcmHrDevPowerCoolDownDuration_Object = MibTableColumn
xcmHrDevPowerCoolDownDuration = _XcmHrDevPowerCoolDownDuration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 9),
    _XcmHrDevPowerCoolDownDuration_Type()
)
xcmHrDevPowerCoolDownDuration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownDuration.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownDuration.setReference("""\
See: 'xcmHrDevPowerCoolDownSupport' for feature details and
'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for device
'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerCoolDownDuration.setDescription("""\
A device 'cool down' feature duration, or zero if none, used by system
administrators of this device. Usage: The time after last 'cool down'
initiation before the 'cool down' will complete (to power 'standbyMode' in
'xcmHrDevInfoConditions').
""")
_XcmHrDevPowerEnergySaveDelay_Type = Integer32
_XcmHrDevPowerEnergySaveDelay_Object = MibTableColumn
xcmHrDevPowerEnergySaveDelay = _XcmHrDevPowerEnergySaveDelay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 10),
    _XcmHrDevPowerEnergySaveDelay_Type()
)
xcmHrDevPowerEnergySaveDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveDelay.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveDelay.setReference("""\
See: 'xcmHrDevPowerEnergySaveSupport' for feature details and
'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for device
'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveDelay.setDescription("""\
A device 'energy save' feature delay time, or zero if none, used by system
administrators of this device. Usage: The time delay after last 'energy save'
trigger event (eg, completion of the last 'cool down' cycle to 'standbyMode')
before the 'energy save' cycle will begin (to power 'sleepMode' in
'xcmHrDevInfoConditions').
""")
_XcmHrDevPowerEnergySaveDuration_Type = Integer32
_XcmHrDevPowerEnergySaveDuration_Object = MibTableColumn
xcmHrDevPowerEnergySaveDuration = _XcmHrDevPowerEnergySaveDuration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 11),
    _XcmHrDevPowerEnergySaveDuration_Type()
)
xcmHrDevPowerEnergySaveDuration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveDuration.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveDuration.setReference("""\
See: 'xcmHrDevPowerEnergySaveSupport' for feature details and
'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for device
'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerEnergySaveDuration.setDescription("""\
A device 'energy save' feature duration, or zero if none, used by system
administrators of this device. Usage: The time after last 'energy save'
initiation before the 'energy save' will complete (to power 'sleepMode' in
'xcmHrDevInfoConditions').
""")


class _XcmHrDevPowerWakeUpSupport_Type(PresentOnOff):
    """Custom type xcmHrDevPowerWakeUpSupport based on PresentOnOff"""


_XcmHrDevPowerWakeUpSupport_Object = MibTableColumn
xcmHrDevPowerWakeUpSupport = _XcmHrDevPowerWakeUpSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 12),
    _XcmHrDevPowerWakeUpSupport_Type()
)
xcmHrDevPowerWakeUpSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpSupport.setReference("""\
See: 'xcmHrDevPowerWakeUp[Delay|Duration]'
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpSupport.setDescription("""\
A device 'wake up' feature support management object, used by system
administrators of this device. Usage: This object specifies the support present
(if any) for a device 'wake up' feature ('sleepMode' to 'standbyMode'). For
example, a photocopier might want to 'wake up' (as a system) (to 'standbyMode')
some time after a user presses a button. * 'other(1)' - DEPRECATED - SHALL NOT
be used by conforming implementations * 'on(3)' - device 'wake up' feature is
present and enabled both '...WakeUpDelay' and '...WakeUpDuration' are used - if
'...WakeUpDelay' is zero, then 'wake up' cycle begins immediately after trigger
event - if '...WakeUpDelay' is non-zero, then 'wake up' cycle is delayed for
specified time - if '...WakeUpDuration' is zero, then 'wake up' cycle completes
immediately after initiation - if '...WakeUpDuration' is non-zero, then 'wake
up' cycle requires specified time to complete * 'off(4)' - device 'wake up'
feature is present but disabled both '...WakeUpDelay' and '...WakeUpDuration'
NOT used * 'notPresent(5)' - device 'wake up' feature NOT present on this host
system both '...WakeUpDelay' and '...WakeUpDuration' NOT used
""")
_XcmHrDevPowerWakeUpDelay_Type = Integer32
_XcmHrDevPowerWakeUpDelay_Object = MibTableColumn
xcmHrDevPowerWakeUpDelay = _XcmHrDevPowerWakeUpDelay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 13),
    _XcmHrDevPowerWakeUpDelay_Type()
)
xcmHrDevPowerWakeUpDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpDelay.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpDelay.setReference("""\
See: 'xcmHrDevPowerWakeUpSupport' for feature details and
'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for device
'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpDelay.setDescription("""\
A device 'wake up' feature delay time, or zero if none, used by system
administrators of this device. Usage: The time delay after last 'wake up'
trigger event (eg, arrival of a job, some local user action, etc) before the
'wake up' cycle will begin (to power 'standbyMode' in
'xcmHrDevInfoConditions').
""")
_XcmHrDevPowerWakeUpDuration_Type = Integer32
_XcmHrDevPowerWakeUpDuration_Object = MibTableColumn
xcmHrDevPowerWakeUpDuration = _XcmHrDevPowerWakeUpDuration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 14),
    _XcmHrDevPowerWakeUpDuration_Type()
)
xcmHrDevPowerWakeUpDuration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpDuration.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpDuration.setReference("""\
See: 'xcmHrDevPowerWakeUpSupport' for feature details and
'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for device
'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerWakeUpDuration.setDescription("""\
A device 'wake up' feature duration, or zero if none, used by system
administrators of this device. Usage: The time after last 'wake up' initiation
before the 'wake up' will complete (to power 'standbyMode' in
'xcmHrDevInfoConditions').
""")
_XcmHrDevPowerShutdownDelay_Type = Integer32
_XcmHrDevPowerShutdownDelay_Object = MibTableColumn
xcmHrDevPowerShutdownDelay = _XcmHrDevPowerShutdownDelay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 15),
    _XcmHrDevPowerShutdownDelay_Type()
)
xcmHrDevPowerShutdownDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerShutdownDelay.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerShutdownDelay.setReference("""\
See: 'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for
device 'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerShutdownDelay.setDescription("""\
A device 'shutdown' feature delay time, or zero if none, used by system
administrators of this device. Usage: The time delay after last 'shutdown'
trigger event (eg, completion of the last 'energy save' cycle to 'sleepMode')
before the 'shutdown' cycle will begin (to power 'offMode' in
'xcmHrDevInfoConditions' and 'down' in 'hrDeviceStatus').
""")
_XcmHrDevPowerShutdownDuration_Type = Integer32
_XcmHrDevPowerShutdownDuration_Object = MibTableColumn
xcmHrDevPowerShutdownDuration = _XcmHrDevPowerShutdownDuration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 16),
    _XcmHrDevPowerShutdownDuration_Type()
)
xcmHrDevPowerShutdownDuration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerShutdownDuration.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerShutdownDuration.setReference("""\
See: 'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for
device 'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerShutdownDuration.setDescription("""\
A device 'shutdown' feature duration, or zero if none, used by system
administrators of this device. Usage: The time after last 'shutdown' initiation
before the 'shutdown' cycle will complete (to power 'offMode' in
'xcmHrDevInfoConditions' and 'down' in 'hrDeviceStatus').
""")
_XcmHrDevPowerStartupDelay_Type = Integer32
_XcmHrDevPowerStartupDelay_Object = MibTableColumn
xcmHrDevPowerStartupDelay = _XcmHrDevPowerStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 17),
    _XcmHrDevPowerStartupDelay_Type()
)
xcmHrDevPowerStartupDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerStartupDelay.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerStartupDelay.setReference("""\
See: 'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for
device 'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerStartupDelay.setDescription("""\
A device 'startup' feature delay time, or zero if none, used by system
administrators of this device. Usage: The time delay after last 'startup'
trigger event (eg, 'xcmHrDevCalendarCommandRequest' or local user action)
before the 'startup' cycle will begin (to power 'readyMode' in
'xcmHrDevInfoConditions' and 'running' in 'hrDeviceStatus').
""")
_XcmHrDevPowerStartupDuration_Type = Integer32
_XcmHrDevPowerStartupDuration_Object = MibTableColumn
xcmHrDevPowerStartupDuration = _XcmHrDevPowerStartupDuration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 6, 2, 1, 18),
    _XcmHrDevPowerStartupDuration_Type()
)
xcmHrDevPowerStartupDuration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevPowerStartupDuration.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerStartupDuration.setReference("""\
See: 'xcmHrDevPowerTimeUnit' for time unit and 'xcmHrDevInfoConditions' for
device 'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevPowerStartupDuration.setDescription("""\
A device 'startup' feature duration, or zero if none, used by system
administrators of this device. Usage: The time after last 'startup' initiation
before the 'startup' cycle will complete (to power 'readyMode' in
'xcmHrDevInfoConditions' and 'running' in 'hrDeviceStatus').
""")
_XcmHrDevTraffic_ObjectIdentity = ObjectIdentity
xcmHrDevTraffic = _XcmHrDevTraffic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7)
)
_XcmHrDevTrafficTable_Object = MibTable
xcmHrDevTrafficTable = _XcmHrDevTrafficTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevTrafficTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficTable.setReference("""\
See: 'hrProcessorTable', 'hrNetworkTable', 'hrPrinterTable' in the IETF Host
Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevTrafficTable.setDescription("""\
A 'sparse' table containing traffic information objects for installed and
(possibly) active devices on this host system, augmenting the basic entries in
the 'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevTrafficEntry_Object = MibTableRow
xcmHrDevTrafficEntry = _XcmHrDevTrafficEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1)
)
xcmHrDevTrafficEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDevTrafficEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficEntry.setDescription("""\
A 'sparse' entry containing traffic information objects for an installed and
(possibly) active device on this host system, augmenting a basic entry in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevTrafficRowStatus_Type = RowStatus
_XcmHrDevTrafficRowStatus_Object = MibTableColumn
xcmHrDevTrafficRowStatus = _XcmHrDevTrafficRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 1),
    _XcmHrDevTrafficRowStatus_Type()
)
xcmHrDevTrafficRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevTrafficRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrDevTrafficTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmHrDevTrafficRowStatus' row status object; and SHALL clear the
'xcmHrDevTrafficGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrDevTrafficRowStatus' row status object; and SHALL set the
'xcmHrDevTrafficGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrDevTrafficInputSupport_Type(PresentOnOff):
    """Custom type xcmHrDevTrafficInputSupport based on PresentOnOff"""


_XcmHrDevTrafficInputSupport_Object = MibTableColumn
xcmHrDevTrafficInputSupport = _XcmHrDevTrafficInputSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 2),
    _XcmHrDevTrafficInputSupport_Type()
)
xcmHrDevTrafficInputSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputSupport.setReference("""\
See: 'xcmHrDevTrafficInputTimeout'.
""")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputSupport.setDescription("""\
A device input traffic support management object, used by system administrators
of this device. Usage: This object specifies the support present (if any) for
device input traffic (I/O). For example, a ROM only supports input traffic (ie,
reads). * 'other(1)' - DEPRECATED - SHALL NOT be used by conforming
implementations * 'on(3)' - device 'input I/O' feature is present and enabled
and '...InputTimeout' is meaningful - if '...InputTimeout' is zero, then 'input
I/O' cycle MAY proceed for an infinite time - if '...InputTimeout' is non-zero,
then 'input I/O' cycle is limited to the specified time * 'off(4)' - device
'input I/O' feature is present but disabled and '...InputTimeout' is ignored *
'notPresent(5)' - device 'input I/O' feature NOT present on this host system
and '...InputTimeout' is ignored
""")


class _XcmHrDevTrafficOutputSupport_Type(PresentOnOff):
    """Custom type xcmHrDevTrafficOutputSupport based on PresentOnOff"""


_XcmHrDevTrafficOutputSupport_Object = MibTableColumn
xcmHrDevTrafficOutputSupport = _XcmHrDevTrafficOutputSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 3),
    _XcmHrDevTrafficOutputSupport_Type()
)
xcmHrDevTrafficOutputSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputSupport.setReference("""\
See: 'xcmHrDevTrafficOutputTimeout'.
""")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputSupport.setDescription("""\
A device output traffic support management object, used by system
administrators of this device. Usage: This object specifies the support present
(if any) for device output traffic (I/O). For example, a ROM does NOT support
output traffic (ie, writes). * 'other(1)' - DEPRECATED - SHALL NOT be used by
conforming implementations * 'on(3)' - device 'output I/O' feature is present
and enabled and '...OutputTimeout' is meaningful - if '...OutputTimeout' is
zero, then 'output I/O' cycle MAY proceed for an infinite time - if
'...OutputTimeout' is non-zero, then 'output I/O' cycle is limited to the
specified time * 'off(4)' - device 'output I/O' feature is present but disabled
and '...OutputTimeout' is ignored * 'notPresent(5)' - device 'output I/O'
feature NOT present on this host system and '...OutputTimeout' is ignored
""")


class _XcmHrDevTrafficInputUnit_Type(XcmHrDevTrafficUnit):
    """Custom type xcmHrDevTrafficInputUnit based on XcmHrDevTrafficUnit"""


_XcmHrDevTrafficInputUnit_Object = MibTableColumn
xcmHrDevTrafficInputUnit = _XcmHrDevTrafficInputUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 4),
    _XcmHrDevTrafficInputUnit_Type()
)
xcmHrDevTrafficInputUnit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputUnit.setDescription("""\
A device input unit, used by system administrators of this device for input
traffic counters. Usage: For example, a disk drive might use 'mediaBlock'.
Usage: Thanks to XCMI WG members for stimulating the following discussion.
There are three reasonable ways for using the
'xcmHrDevTraffic[Input|Output]Unit' objects: a) 'read-only' and set up by the
management agent according to the sole appropriate (fixed) units at time of row
creation; b) 'write-once' by the management station, at time of row creation
(possibly selecting from among several possible valid units); and c) 'write-
many' by the management station (to dynamically request the management agent to
'convert' the 'xcmHrDevTraffic[Input|Output]Count' objects into the appropriate
units). Conforming implementations need NOT support more than one of the above
three scenarios. Usage: 'mediaImage' - SHOULD be used ONLY for softcopy INPUT
page images (scan, copy, fax, etc.). 'mediaImpression' - SHOULD be used ONLY
for hardcopy OUTPUT page impressions (print, copy, fax, etc.) 'mediaSheet' -
SHOULD be used ONLY for hardcopy OUTPUT and does NOT always equal output pages
(e.g., duplex or N-up printing).
""")


class _XcmHrDevTrafficOutputUnit_Type(XcmHrDevTrafficUnit):
    """Custom type xcmHrDevTrafficOutputUnit based on XcmHrDevTrafficUnit"""


_XcmHrDevTrafficOutputUnit_Object = MibTableColumn
xcmHrDevTrafficOutputUnit = _XcmHrDevTrafficOutputUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 5),
    _XcmHrDevTrafficOutputUnit_Type()
)
xcmHrDevTrafficOutputUnit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputUnit.setDescription("""\
A device output unit, used by system administrators of this device for output
traffic counters. Usage: For example, a terminal might use 'textLine'. Usage:
'mediaImage' - SHOULD be used ONLY for softcopy INPUT page images (scan, copy,
fax, etc.). 'mediaImpression' - SHOULD be used ONLY for hardcopy OUTPUT page
impressions (print, copy, fax, etc.) 'mediaSheet' - SHOULD be used ONLY for
hardcopy OUTPUT and does NOT always equal output pages (e.g., duplex or N-up
printing).
""")
_XcmHrDevTrafficInputCount_Type = Counter32
_XcmHrDevTrafficInputCount_Object = MibTableColumn
xcmHrDevTrafficInputCount = _XcmHrDevTrafficInputCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 6),
    _XcmHrDevTrafficInputCount_Type()
)
xcmHrDevTrafficInputCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputCount.setReference("""\
See: 'hrDeviceErrors' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputCount.setDescription("""\
A device input traffic count, used by system administrators and end users of
this device. Usage: Although no default value ('DEFVAL' clause) is permitted
(by IETF SMIv2) for this counter, conforming host systems SHALL zero this
counter upon conceptual row creation.
""")
_XcmHrDevTrafficOutputCount_Type = Counter32
_XcmHrDevTrafficOutputCount_Object = MibTableColumn
xcmHrDevTrafficOutputCount = _XcmHrDevTrafficOutputCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 7),
    _XcmHrDevTrafficOutputCount_Type()
)
xcmHrDevTrafficOutputCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputCount.setReference("""\
See: 'hrDeviceErrors' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputCount.setDescription("""\
A device output traffic count, used by system administrators and end users of
this device. Usage: Although no default value ('DEFVAL' clause) is permitted
(by IETF SMIv2) for this counter, conforming host systems SHALL zero this
counter upon conceptual row creation.
""")
_XcmHrDevTrafficInputMaxSize_Type = Cardinal32
_XcmHrDevTrafficInputMaxSize_Object = MibTableColumn
xcmHrDevTrafficInputMaxSize = _XcmHrDevTrafficInputMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 8),
    _XcmHrDevTrafficInputMaxSize_Type()
)
xcmHrDevTrafficInputMaxSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputMaxSize.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputMaxSize.setDescription("""\
A device input maximum size, or zero if infinite, used by system administrators
and end users of this device. Usage: It is device specific how (or if) this
limit object is used (eg, disk with 'xcmHrDevTrafficInputUnit' of 'mediaBlock'
might limit block count of a single disk read to '50').
""")
_XcmHrDevTrafficOutputMaxSize_Type = Cardinal32
_XcmHrDevTrafficOutputMaxSize_Object = MibTableColumn
xcmHrDevTrafficOutputMaxSize = _XcmHrDevTrafficOutputMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 9),
    _XcmHrDevTrafficOutputMaxSize_Type()
)
xcmHrDevTrafficOutputMaxSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputMaxSize.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputMaxSize.setDescription("""\
A device output maximum size, or zero if infinite, used by system
administrators and end users of this device. Usage: It is device specific how
(or if) this limit object is used (eg, disk with 'xcmHrDevTrafficOutputUnit' of
'mediaBlock' might limit block count of a single disk write to '50').
""")
_XcmHrDevTrafficInputTimeout_Type = Integer32
_XcmHrDevTrafficInputTimeout_Object = MibTableColumn
xcmHrDevTrafficInputTimeout = _XcmHrDevTrafficInputTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 10),
    _XcmHrDevTrafficInputTimeout_Type()
)
xcmHrDevTrafficInputTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputTimeout.setUnits("seconds")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputTimeout.setReference("""\
See: 'xcmHrDevTrafficInputSupport' for feature details and
'xcmHrDevInfoConditions' for device 'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevTrafficInputTimeout.setDescription("""\
A device input traffic timeout (in seconds), or zero if none, used by system
administrators of this device. Usage: This object specifies the timeout to be
used (if any) for device input traffic (I/O). For example, a disk drive might
want to timeout disk reads.
""")
_XcmHrDevTrafficOutputTimeout_Type = Integer32
_XcmHrDevTrafficOutputTimeout_Object = MibTableColumn
xcmHrDevTrafficOutputTimeout = _XcmHrDevTrafficOutputTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 7, 2, 1, 11),
    _XcmHrDevTrafficOutputTimeout_Type()
)
xcmHrDevTrafficOutputTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputTimeout.setUnits("seconds")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputTimeout.setReference("""\
See: 'xcmHrDevTrafficOutputSupport' for feature details and
'xcmHrDevInfoConditions' for device 'mode' conditions
""")
if mibBuilder.loadTexts:
    xcmHrDevTrafficOutputTimeout.setDescription("""\
A device output traffic timeout (in seconds), or zero if none, used by system
administrators of this device. Usage: This object specifies the timeout to be
used (if any) for device output traffic (I/O). For example, a terminal might
want to timeout screen writes.
""")
_XcmHrSystemFault_ObjectIdentity = ObjectIdentity
xcmHrSystemFault = _XcmHrSystemFault_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8)
)
_XcmHrSystemFaultTable_Object = MibTable
xcmHrSystemFaultTable = _XcmHrSystemFaultTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2)
)
if mibBuilder.loadTexts:
    xcmHrSystemFaultTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultTable.setDescription("""\
A table of the system faults which have been recorded (logged) on this host
system. Usage: Conforming implementations SHALL ensure that this table contains
(up to) a product specific number of the most 'recent' faults on this host
system. Usage: Conforming implementations which also implement Device Alert
group, SHALL record in 'xcmHrDevAlertTable' each persistent system fault when
it occurs and is recorded in 'xcmHrSystemFaultTable'. Usage: Conforming
implementations MAY 'age' older entries out of 'xcmHrSystemFaultTable' (by an
algorithm outside the scope of XCMI specifications).
""")
_XcmHrSystemFaultEntry_Object = MibTableRow
xcmHrSystemFaultEntry = _XcmHrSystemFaultEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2, 1)
)
xcmHrSystemFaultEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmHrSystemFaultIndex"),
)
if mibBuilder.loadTexts:
    xcmHrSystemFaultEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultEntry.setDescription("""\
An entry for a system fault which has been recorded (logged) on this host
system.
""")
_XcmHrSystemFaultIndex_Type = Ordinal32
_XcmHrSystemFaultIndex_Object = MibTableColumn
xcmHrSystemFaultIndex = _XcmHrSystemFaultIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2, 1, 1),
    _XcmHrSystemFaultIndex_Type()
)
xcmHrSystemFaultIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrSystemFaultIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrSystemFaultTable'. Usage: Conforming implementations SHALL NOT 'reuse'
values of 'xcmHrSystemFaultIndex' until its' 32-bit value wraps. Even in the
case of eventual wrap, the entries SHALL be strictly sequenced by the
associated value of 'xcmHrSystemFaultDate'. Usage: Conforming implementations
are strongly encouraged to preserve the last used value of
'xcmHrSystemFaultIndex' across system power cycles.
""")
_XcmHrSystemFaultRowStatus_Type = RowStatus
_XcmHrSystemFaultRowStatus_Object = MibTableColumn
xcmHrSystemFaultRowStatus = _XcmHrSystemFaultRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2, 1, 2),
    _XcmHrSystemFaultRowStatus_Type()
)
xcmHrSystemFaultRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSystemFaultRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrSystemFaultRowStatus.setDescription("""\
This object is used to create (by management agent) and delete (by management
station and/or management agent) individual conceptual rows in the
'xcmHrSystemFaultTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmHrSystemFaultRowStatus' row status object; and SHALL clear the
'xcmHrSystemFaultGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrSystemFaultRowStatus' row status object; and SHALL set the
'xcmHrSystemFaultGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")
_XcmHrSystemFaultCode_Type = Integer32
_XcmHrSystemFaultCode_Object = MibTableColumn
xcmHrSystemFaultCode = _XcmHrSystemFaultCode_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2, 1, 3),
    _XcmHrSystemFaultCode_Type()
)
xcmHrSystemFaultCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSystemFaultCode.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultCode.setDescription("""\
Encoded fault code of the system fault which is recorded in this conceptual row
in the 'xcmHrSystemFaultTable'.
""")


class _XcmHrSystemFaultString_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrSystemFaultString based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrSystemFaultString_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrSystemFaultString_Object = MibTableColumn
xcmHrSystemFaultString = _XcmHrSystemFaultString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2, 1, 4),
    _XcmHrSystemFaultString_Type()
)
xcmHrSystemFaultString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSystemFaultString.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultString.setDescription("""\
Human-readable fault string of the system fault which is recorded in this
conceptual row in the 'xcmHrSystemFaultTable'.
""")


class _XcmHrSystemFaultReferenceOID_Type(ObjectIdentifier):
    """Custom type xcmHrSystemFaultReferenceOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmHrSystemFaultReferenceOID_Object = MibTableColumn
xcmHrSystemFaultReferenceOID = _XcmHrSystemFaultReferenceOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2, 1, 5),
    _XcmHrSystemFaultReferenceOID_Type()
)
xcmHrSystemFaultReferenceOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSystemFaultReferenceOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultReferenceOID.setDescription("""\
An (optional) unambiguous system object reference (which MAY include instance
suffix information), used by system administrators and end users to qualify
this system fault. Usage: Since this system object reference is specified as an
object identifier, it MAY be taken from any IETF, Xerox, third- party, or
product-specific MIB, or it MAY simply be any IETF SMIv2-style 'autonomous
type'.
""")
_XcmHrSystemFaultHrDeviceIndex_Type = Cardinal32
_XcmHrSystemFaultHrDeviceIndex_Object = MibTableColumn
xcmHrSystemFaultHrDeviceIndex = _XcmHrSystemFaultHrDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2, 1, 6),
    _XcmHrSystemFaultHrDeviceIndex_Type()
)
xcmHrSystemFaultHrDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSystemFaultHrDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultHrDeviceIndex.setReference("""\
See: 'hrDeviceIndex' and 'hrDeviceType' objects in the IETF Host Resources MIB
(RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrSystemFaultHrDeviceIndex.setDescription("""\
An (optional) device index (ie, value of 'hrDeviceIndex'), used by system
administrators and end users to qualify this system fault.
""")


class _XcmHrSystemFaultDate_Type(DateAndTime):
    """Custom type xcmHrSystemFaultDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmHrSystemFaultDate_Object = MibTableColumn
xcmHrSystemFaultDate = _XcmHrSystemFaultDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 8, 2, 1, 7),
    _XcmHrSystemFaultDate_Type()
)
xcmHrSystemFaultDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSystemFaultDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultDate.setDescription("""\
The time stamp for the system fault which is recorded in this conceptual row in
the 'xcmHrSystemFaultTable'.
""")
_XcmHrGeneral_ObjectIdentity = ObjectIdentity
xcmHrGeneral = _XcmHrGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9)
)
_XcmHrGeneralTable_Object = MibTable
xcmHrGeneralTable = _XcmHrGeneralTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2)
)
if mibBuilder.loadTexts:
    xcmHrGeneralTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralTable.setDescription("""\
A table of general counters and information for ease of use of the XCMI Ext to
IETF Host Resources MIB and the IETF Host Resources MIB (RFC 2790) on this host
system. Usage: The ONLY valid row in the 'xcmHrGeneralTable' SHALL have an
'xcmHrGeneralIndex' of one ('1').
""")
_XcmHrGeneralEntry_Object = MibTableRow
xcmHrGeneralEntry = _XcmHrGeneralEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1)
)
xcmHrGeneralEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmHrGeneralIndex"),
)
if mibBuilder.loadTexts:
    xcmHrGeneralEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralEntry.setDescription("""\
An entry of general counters and information for ease of use of the XCMI Ext to
IETF Host Resources MIB and the IETF Host Resources MIB (RFC 2790) on this host
system. Usage: The ONLY valid row in the 'xcmHrGeneralTable' SHALL have an
'xcmHrGeneralIndex' of one ('1').
""")
_XcmHrGeneralIndex_Type = Ordinal32
_XcmHrGeneralIndex_Object = MibTableColumn
xcmHrGeneralIndex = _XcmHrGeneralIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 1),
    _XcmHrGeneralIndex_Type()
)
xcmHrGeneralIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrGeneralIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrGeneralTable'. Usage: The ONLY valid row in the 'xcmHrGeneralTable' SHALL
have an 'xcmHrGeneralIndex' of one ('1').
""")
_XcmHrGeneralRowStatus_Type = RowStatus
_XcmHrGeneralRowStatus_Object = MibTableColumn
xcmHrGeneralRowStatus = _XcmHrGeneralRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 2),
    _XcmHrGeneralRowStatus_Type()
)
xcmHrGeneralRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralRowStatus.setDescription("""\
This object is used to display status of the ONLY valid conceptual row in the
'xcmHrGeneralTable'. Usage: 'xcmHrGeneralRowStatus' is 'read-only' because the
ONLY valid conceptual row SHALL NOT be deleted.
""")


class _XcmHrGeneralVersionID_Type(ProductID):
    """Custom type xcmHrGeneralVersionID based on ProductID"""
    defaultValue = "(0, 0)"


_XcmHrGeneralVersionID_Object = MibTableColumn
xcmHrGeneralVersionID = _XcmHrGeneralVersionID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 3),
    _XcmHrGeneralVersionID_Type()
)
xcmHrGeneralVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralVersionID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralVersionID.setReference("""\
See: 'hrSW[Installed|Run]ID' in the Software Installed and Software Running
groups of the IETF HR MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrGeneralVersionID.setDescription("""\
The software product ID of the SNMP sub-agent which implements the IETF Host
Resources MIB (RFC 2790) and XCMI Extensions to Host Resources MIB on this host
system. Usage: This object SHALL specify the software product ID of an SNMP
sub-agent (possibly also found in a conceptual row in the 'hrSWRunTable' and/or
'hrSWInstalledTable' in the IETF HR MIB). This object SHALL NOT specify a
particular release of the IETF HR MIB, the XCMI HRX MIB, or the whole host
system product. Note: Contrast with 'sysObjectID' for the whole SNMP agent in
the IETF MIB-II (RFC 1213) and 'hrDeviceID' for the whole device (or whole
product, in the case of 'xcmHrDevice...') in the IETF Host Resources MIB (RFC
2790).
""")


class _XcmHrGeneralVersionDate_Type(DateAndTime):
    """Custom type xcmHrGeneralVersionDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmHrGeneralVersionDate_Object = MibTableColumn
xcmHrGeneralVersionDate = _XcmHrGeneralVersionDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 4),
    _XcmHrGeneralVersionDate_Type()
)
xcmHrGeneralVersionDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralVersionDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralVersionDate.setReference("""\
See: 'hrSW[Installed|Run]ID' in the Software Installed and Software Running
groups of the IETF HR MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrGeneralVersionDate.setDescription("""\
The software build date of the SNMP sub-agent which implements the IETF Host
Resources MIB (RFC 2790) and XCMI Extensions to Host Resources MIB on this host
system. Usage: This object SHALL specify the BUILD date of the SNMP sub-agent
software (not available elsewhere in IETF/XCMI MIBs). This object SHALL NOT
specify the INSTALL date of the SNMP sub-agent software on this host system,
nor the RESET date. Note: Contrast with 'hrSWInstalledDate' in the Software
Installed group of the IETF Host Resources MIB (RFC 2790), and
'xcmHrDevInfoResetDate' in the Device Info group of the XCMI Host Resources
Extensions MIB.
""")


class _XcmHrGeneralGroupSupport_Type(XcmHrGroupSupport):
    """Custom type xcmHrGeneralGroupSupport based on XcmHrGroupSupport"""
    defaultValue = 71


_XcmHrGeneralGroupSupport_Object = MibTableColumn
xcmHrGeneralGroupSupport = _XcmHrGeneralGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 5),
    _XcmHrGeneralGroupSupport_Type()
)
xcmHrGeneralGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralGroupSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional IETF Host Resources MIB (RFC 2790) and XCMI Ext to IETF Host Resources
MIB objects which are supported by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. Usage: Conforming
management agents SHALL accurately report their support for IETF Host Resources
MIB (RFC 2790) and XCMI Ext to IETF Host Resources MIB object groups.
""")
_XcmHrGeneralStorageLast_Type = Cardinal32
_XcmHrGeneralStorageLast_Object = MibTableColumn
xcmHrGeneralStorageLast = _XcmHrGeneralStorageLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 6),
    _XcmHrGeneralStorageLast_Type()
)
xcmHrGeneralStorageLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralStorageLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralStorageLast.setDescription("""\
The last entry index (regardless of its current state) in the 'hrStorageTable'
of the IETF Host Resources MIB, on this host system. Usage: The last entry
index explicitly bounds the valid range of 'hrStorageIndex'.
""")
_XcmHrGeneralDeviceLast_Type = Cardinal32
_XcmHrGeneralDeviceLast_Object = MibTableColumn
xcmHrGeneralDeviceLast = _XcmHrGeneralDeviceLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 7),
    _XcmHrGeneralDeviceLast_Type()
)
xcmHrGeneralDeviceLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralDeviceLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralDeviceLast.setDescription("""\
The last entry index (regardless of its current state) in the 'hrDeviceTable'
of the IETF Host Resources MIB, on this host system. Usage: The last entry
index explicitly bounds the valid range of 'hrDeviceIndex'.
""")
_XcmHrGeneralFSLast_Type = Cardinal32
_XcmHrGeneralFSLast_Object = MibTableColumn
xcmHrGeneralFSLast = _XcmHrGeneralFSLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 8),
    _XcmHrGeneralFSLast_Type()
)
xcmHrGeneralFSLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralFSLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralFSLast.setDescription("""\
The last entry index (regardless of its current state) in the 'hrFSTable' of
the IETF Host Resources MIB, on this host system. Usage: The last entry index
explicitly bounds the valid range of 'hrFSIndex'.
""")
_XcmHrGeneralSWRunLast_Type = Cardinal32
_XcmHrGeneralSWRunLast_Object = MibTableColumn
xcmHrGeneralSWRunLast = _XcmHrGeneralSWRunLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 9),
    _XcmHrGeneralSWRunLast_Type()
)
xcmHrGeneralSWRunLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralSWRunLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralSWRunLast.setDescription("""\
The last entry index (regardless of its current state) in the 'hrSWRunTable' of
the IETF Host Resources MIB, on this host system. Usage: The last entry index
explicitly bounds the valid range of 'hrSWRunIndex'.
""")
_XcmHrGeneralSWInstalledLast_Type = Cardinal32
_XcmHrGeneralSWInstalledLast_Object = MibTableColumn
xcmHrGeneralSWInstalledLast = _XcmHrGeneralSWInstalledLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 10),
    _XcmHrGeneralSWInstalledLast_Type()
)
xcmHrGeneralSWInstalledLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralSWInstalledLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralSWInstalledLast.setDescription("""\
The last entry index (regardless of its current state) in the
'hrSWInstalledTable' of the IETF Host Resources MIB, on this host system.
Usage: The last entry index explicitly bounds the valid range of
'hrSWInstalledIndex'.
""")
_XcmHrGeneralSystemFaultLast_Type = Cardinal32
_XcmHrGeneralSystemFaultLast_Object = MibTableColumn
xcmHrGeneralSystemFaultLast = _XcmHrGeneralSystemFaultLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 11),
    _XcmHrGeneralSystemFaultLast_Type()
)
xcmHrGeneralSystemFaultLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralSystemFaultLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralSystemFaultLast.setDescription("""\
The last entry index (regardless of its current state) in the
'xcmHrSystemFaultTable' of this XCMI Ext to Host Resources MIB, on this host
system. Usage: The last entry index explicitly bounds the valid range of
'xcmHrSystemFaultIndex'.
""")
_XcmHrGeneralCreateSupport_Type = XcmHrGroupSupport
_XcmHrGeneralCreateSupport_Object = MibTableColumn
xcmHrGeneralCreateSupport = _XcmHrGeneralCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 12),
    _XcmHrGeneralCreateSupport_Type()
)
xcmHrGeneralCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralCreateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional IETF Host Resources MIB (RFC 2790) and XCMI Ext to IETF Host Resources
MIB objects which are supported for dynamic row creation (via '...RowStatus')
by this management agent implementation (ie, version) on this host system,
specified in a bit-mask. Usage: Conforming management agents SHALL accurately
report their support for IETF Host Resources MIB (RFC 2790) and XCMI Ext to
IETF Host Resources MIB object groups.
""")
_XcmHrGeneralUpdateSupport_Type = XcmHrGroupSupport
_XcmHrGeneralUpdateSupport_Object = MibTableColumn
xcmHrGeneralUpdateSupport = _XcmHrGeneralUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 9, 2, 1, 13),
    _XcmHrGeneralUpdateSupport_Type()
)
xcmHrGeneralUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrGeneralUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralUpdateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional IETF Host Resources MIB (RFC 2790) and XCMI Ext to IETF Host Resources
MIB objects which are supported for existing row update (via SNMP Set-Request
PDUs) by this management agent implementation (ie, version) on this host
system, specified in a bit-mask. Usage: Conforming management agents SHALL
accurately report their support for IETF Host Resources MIB (RFC 2790) and XCMI
Ext to IETF Host Resources MIB object groups.
""")
_XcmHrDevCalendar_ObjectIdentity = ObjectIdentity
xcmHrDevCalendar = _XcmHrDevCalendar_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10)
)
_XcmHrDevCalendarTable_Object = MibTable
xcmHrDevCalendarTable = _XcmHrDevCalendarTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevCalendarTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarTable.setDescription("""\
A 'sparse' table containing calendar management objects for installed and
(possibly) active devices on this host system, augmenting the basic entries in
the 'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevCalendarEntry_Object = MibTableRow
xcmHrDevCalendarEntry = _XcmHrDevCalendarEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10, 2, 1)
)
xcmHrDevCalendarEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrDevCalendarDayOfWeek"),
    (0, "XEROX-COMMON-MIB", "xcmHrDevCalendarTimeOfDay"),
)
if mibBuilder.loadTexts:
    xcmHrDevCalendarEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarEntry.setDescription("""\
A 'sparse' entry containing calendar management objects for an installed and
(possibly) active device on this host system, augmenting a basic entry in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevCalendarDayOfWeek_Type = XcmHrDevCalendarDayOfWeek
_XcmHrDevCalendarDayOfWeek_Object = MibTableColumn
xcmHrDevCalendarDayOfWeek = _XcmHrDevCalendarDayOfWeek_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10, 2, 1, 1),
    _XcmHrDevCalendarDayOfWeek_Type()
)
xcmHrDevCalendarDayOfWeek.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrDevCalendarDayOfWeek.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarDayOfWeek.setDescription("""\
The day of week when the command specified in this conceptual row in the
'xcmHrDevCalendarTable' SHALL be invoked.
""")
_XcmHrDevCalendarTimeOfDay_Type = XcmHrDevCalendarTimeOfDay
_XcmHrDevCalendarTimeOfDay_Object = MibTableColumn
xcmHrDevCalendarTimeOfDay = _XcmHrDevCalendarTimeOfDay_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10, 2, 1, 2),
    _XcmHrDevCalendarTimeOfDay_Type()
)
xcmHrDevCalendarTimeOfDay.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrDevCalendarTimeOfDay.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarTimeOfDay.setDescription("""\
The time of day when the command specified in this conceptual row in the
'xcmHrDevCalendarTable' SHALL be invoked, specified as hours (0..23) multiplied
by 100, added to minutes (0..59), added to a constant bias of 10000 (avoids an
index value of zero in 'xcmHrDevCalendarTimeOfDay').
""")
_XcmHrDevCalendarRowStatus_Type = RowStatus
_XcmHrDevCalendarRowStatus_Object = MibTableColumn
xcmHrDevCalendarRowStatus = _XcmHrDevCalendarRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10, 2, 1, 3),
    _XcmHrDevCalendarRowStatus_Type()
)
xcmHrDevCalendarRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCalendarRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevCalendarRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrDevCalendarTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmHrDevCalendarRowStatus' row status object; and SHALL clear the
'xcmHrDevCalendarGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrDevCalendarRowStatus' row status object; and SHALL set the
'xcmHrDevCalendarGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrDevCalendarExplicitDate_Type(DateAndTime):
    """Custom type xcmHrDevCalendarExplicitDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmHrDevCalendarExplicitDate_Object = MibTableColumn
xcmHrDevCalendarExplicitDate = _XcmHrDevCalendarExplicitDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10, 2, 1, 4),
    _XcmHrDevCalendarExplicitDate_Type()
)
xcmHrDevCalendarExplicitDate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCalendarExplicitDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarExplicitDate.setDescription("""\
The explicit date when the command specified in this conceptual row in the
'xcmHrDevCalendarTable' SHALL be invoked. Usage: When
'xcmHrDevCalendarExplicitDate' is used, the value of
'xcmHrDevCalendarDayOfWeek' SHALL be 'everyDay' and the value of
'xcmHrDevCalendarTimeOfDay' SHALL be arbitrary (to provide uniqueness for this
conceptual row).
""")


class _XcmHrDevCalendarCommandRequest_Type(XcmHrDevMgmtCommandRequest):
    """Custom type xcmHrDevCalendarCommandRequest based on XcmHrDevMgmtCommandRequest"""


_XcmHrDevCalendarCommandRequest_Object = MibTableColumn
xcmHrDevCalendarCommandRequest = _XcmHrDevCalendarCommandRequest_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10, 2, 1, 5),
    _XcmHrDevCalendarCommandRequest_Type()
)
xcmHrDevCalendarCommandRequest.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCalendarCommandRequest.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarCommandRequest.setReference("""\
See: 'hrDeviceStatus' in the Device group of the IETF Host Resources MIB (RFC
2790). See: 'xcmHrDevCalendarCommandData'
""")
if mibBuilder.loadTexts:
    xcmHrDevCalendarCommandRequest.setDescription("""\
The management command request specified in this conceptual row in the
'xcmHrDevCalendarTable', which SHALL be invoked based on
'xcmHrDevCalendarDayOfWeek', 'xcmHrDevCalendarTimeOfDay', and (optionally)
'xcmHrDevCalendarExplicitDate'.
""")


class _XcmHrDevCalendarCommandData_Type(XcmHrDevMgmtCommandData):
    """Custom type xcmHrDevCalendarCommandData based on XcmHrDevMgmtCommandData"""
    defaultHexValue = ""


_XcmHrDevCalendarCommandData_Object = MibTableColumn
xcmHrDevCalendarCommandData = _XcmHrDevCalendarCommandData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 10, 2, 1, 6),
    _XcmHrDevCalendarCommandData_Type()
)
xcmHrDevCalendarCommandData.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCalendarCommandData.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarCommandData.setReference("""\
See: Security Config, Account, and User groups in XCMI Security MIB. See:
Section 6.6 'Security in DPA' (pages 38 to 39) of DPA (ISO 10175-1 / Final
Text, March 1996). See: 'hrDeviceStatus' in the Device group of the IETF Host
Resources MIB (RFC 2790). See: 'xcmHrDevCalendarCommandRequest'
""")
if mibBuilder.loadTexts:
    xcmHrDevCalendarCommandData.setDescription("""\
The management command data specified in this conceptual row in the
'xcmHrDevCalendarTable', which SHALL be invoked based on
'xcmHrDevCalendarDayOfWeek', 'xcmHrDevCalendarTimeOfDay', and (optionally)
'xcmHrDevCalendarExplicitDate'. Usage: Conformant implementations MUST encrypt
passwords, keys, and other security information stored in this string object.
""")
_XcmHrSWRun_ObjectIdentity = ObjectIdentity
xcmHrSWRun = _XcmHrSWRun_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11)
)
_XcmHrSWRunTable_Object = MibTable
xcmHrSWRunTable = _XcmHrSWRunTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2)
)
if mibBuilder.loadTexts:
    xcmHrSWRunTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunTable.setDescription("""\
A 'sparse' table containing software info objects for loaded and (possibly)
active software on this host system, augmenting the basic entries in the
'hrSWRunTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrSWRunEntry_Object = MibTableRow
xcmHrSWRunEntry = _XcmHrSWRunEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1)
)
xcmHrSWRunEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrSWRunIndex"),
)
if mibBuilder.loadTexts:
    xcmHrSWRunEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunEntry.setDescription("""\
A 'sparse' entry containing software info objects for loaded and (possibly)
active software on this host system, augmenting a basic entry in the
'hrSWRunTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrSWRunRowStatus_Type = RowStatus
_XcmHrSWRunRowStatus_Object = MibTableColumn
xcmHrSWRunRowStatus = _XcmHrSWRunRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1, 1),
    _XcmHrSWRunRowStatus_Type()
)
xcmHrSWRunRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWRunRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrSWRunRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrSWRunTable' and ALSO manages the row status of the associated conceptual
row in the 'hrSWRunTable' of the IETF Host Resources MIB. Usage: Conforming
implementations which support static rows SHALL support 'active' and
'notInService' writes to this 'xcmHrSWRunRowStatus' row status object; and
SHALL clear the 'xcmHrSWRunGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrSWRunRowStatus' row status object; and SHALL set the 'xcmHrSWRunGroup'
bit in 'xcmHrGeneralCreateSupport' in the 'xcmHrGeneralTable'. Usage:
Conforming implementations need NOT support dynamic row creation (via
'createAndGo(4)') nor dynamic row deletion (via 'destroy(6)'). Usage: See
section 3.4 'Secure Modes of Operation' and section 3.5 'Secure SNMP Get/Set
Requests' in XCMI Security TC, for details of secure modes of access to this
row status object.
""")


class _XcmHrSWRunAdminName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrSWRunAdminName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrSWRunAdminName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrSWRunAdminName_Object = MibTableColumn
xcmHrSWRunAdminName = _XcmHrSWRunAdminName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1, 2),
    _XcmHrSWRunAdminName_Type()
)
xcmHrSWRunAdminName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWRunAdminName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunAdminName.setReference("""\
See: 'hrSWRunName' in the Software Running Group of the IETF Host Resources MIB
(RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrSWRunAdminName.setDescription("""\
Human-readable software name, used by system administrators and end users to
identify this software for systems management. Usage: This software name SHALL
be the one normally used in a CLI/GUI/API for control of this software. Note:
The 'hrSWRunName' object in 'hrSWRunTable' of the IETF Host Resources MIB (RFC
2790) has MANDATORY content of 'manufacturer, revision, and the name by which
[the software] is commonly known'. Thus, conforming implementations SHALL NOT
set a 'simple name' into 'hrSWRunName'. Therefore, this 'xcmHrSWRunAdminName'
object is needed for management.
""")
_XcmHrSWRunXStatus_Type = XcmHrSWRunXStatus
_XcmHrSWRunXStatus_Object = MibTableColumn
xcmHrSWRunXStatus = _XcmHrSWRunXStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1, 3),
    _XcmHrSWRunXStatus_Type()
)
xcmHrSWRunXStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSWRunXStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunXStatus.setReference("""\
See: 'hrSWRunStatus' in the Software Running Group of the IETF Host Resources
MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrSWRunXStatus.setDescription("""\
An extended software status, used by system administrators and end users of
this software (here, read 'state' for 'status'). Note: This extended software
status is present for future extensions.
""")


class _XcmHrSWRunRowCreateDate_Type(DateAndTime):
    """Custom type xcmHrSWRunRowCreateDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmHrSWRunRowCreateDate_Object = MibTableColumn
xcmHrSWRunRowCreateDate = _XcmHrSWRunRowCreateDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1, 4),
    _XcmHrSWRunRowCreateDate_Type()
)
xcmHrSWRunRowCreateDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSWRunRowCreateDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunRowCreateDate.setDescription("""\
The date and time when this conceptual row was created.
""")
_XcmHrSWRunPhysicalDeviceIndex_Type = Cardinal32
_XcmHrSWRunPhysicalDeviceIndex_Object = MibTableColumn
xcmHrSWRunPhysicalDeviceIndex = _XcmHrSWRunPhysicalDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1, 5),
    _XcmHrSWRunPhysicalDeviceIndex_Type()
)
xcmHrSWRunPhysicalDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWRunPhysicalDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunPhysicalDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790). See: Section 9.5.6 'Physical-printers-supported' of DPA (ISO 10175-1,
Final Text, March 1996).
""")
if mibBuilder.loadTexts:
    xcmHrSWRunPhysicalDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the first associated conceptual
row in the 'hrDeviceTable' representing a supported and (possibly) ready
'physical' device, which has 'xcmHrDevInfoRealization' of 'physical' or
'logicalAndPhysical', or zero, if there is no supported and subordinate
'physical' device associated with this row (ie, this running software).
""")
_XcmHrSWRunLogicalDeviceIndex_Type = Cardinal32
_XcmHrSWRunLogicalDeviceIndex_Object = MibTableColumn
xcmHrSWRunLogicalDeviceIndex = _XcmHrSWRunLogicalDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1, 6),
    _XcmHrSWRunLogicalDeviceIndex_Type()
)
xcmHrSWRunLogicalDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWRunLogicalDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunLogicalDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790). See: Section 9.5.8 'Logical-printers-supported' of DPA (ISO 10175-1,
Final Text, March 1996).
""")
if mibBuilder.loadTexts:
    xcmHrSWRunLogicalDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the first associated conceptual
row in the 'hrDeviceTable' representing a supported and (possibly) ready
'logical' device, which has 'xcmHrDevInfoRealization' of 'logical' or
'logicalAndPhysical', or zero, if there is no supported and subordinate
'logical' device associated with this row (ie, this running software).
""")
_XcmHrSWRunNextIndex_Type = Cardinal32
_XcmHrSWRunNextIndex_Object = MibTableColumn
xcmHrSWRunNextIndex = _XcmHrSWRunNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1, 7),
    _XcmHrSWRunNextIndex_Type()
)
xcmHrSWRunNextIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWRunNextIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunNextIndex.setDescription("""\
The value of 'hrSWRunIndex' corresponding to the next associated row in the
'hrSWRunTable', or zero if this is the last associated conceptual row in a
given set.
""")
_XcmHrSWRunPreviousIndex_Type = Cardinal32
_XcmHrSWRunPreviousIndex_Object = MibTableColumn
xcmHrSWRunPreviousIndex = _XcmHrSWRunPreviousIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 11, 2, 1, 8),
    _XcmHrSWRunPreviousIndex_Type()
)
xcmHrSWRunPreviousIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWRunPreviousIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunPreviousIndex.setDescription("""\
The value of 'hrSWRunIndex' corresponding to the previous associated row in the
'hrSWRunTable', or zero if this is the first associated conceptual row in a
given set.
""")
_XcmHrSWInstalled_ObjectIdentity = ObjectIdentity
xcmHrSWInstalled = _XcmHrSWInstalled_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12)
)
_XcmHrSWInstalledTable_Object = MibTable
xcmHrSWInstalledTable = _XcmHrSWInstalledTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2)
)
if mibBuilder.loadTexts:
    xcmHrSWInstalledTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledTable.setDescription("""\
A 'sparse' table containing software info objects for installed and (possibly)
active software on this host system, augmenting the basic entries in the
'hrSWInstalledTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrSWInstalledEntry_Object = MibTableRow
xcmHrSWInstalledEntry = _XcmHrSWInstalledEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1)
)
xcmHrSWInstalledEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrSWInstalledIndex"),
)
if mibBuilder.loadTexts:
    xcmHrSWInstalledEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledEntry.setDescription("""\
A 'sparse' entry containing software info objects for installed and (possibly)
active software on this host system, augmenting a basic entry in the
'hrSWInstalledTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrSWInstalledRowStatus_Type = RowStatus
_XcmHrSWInstalledRowStatus_Object = MibTableColumn
xcmHrSWInstalledRowStatus = _XcmHrSWInstalledRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1, 1),
    _XcmHrSWInstalledRowStatus_Type()
)
xcmHrSWInstalledRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWInstalledRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrSWInstalledRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrSWInstalledTable' and ALSO manages the row status of the associated
conceptual row in the 'hrSWInstalledTable' of the IETF Host Resources MIB (RFC
2790). Usage: Conforming implementations which support static rows SHALL
support 'active' and 'notInService' writes to this 'xcmHrSWInstalledRowStatus'
row status object; and SHALL clear the 'xcmHrSWInstalledGroup' bit in
'xcmHrGeneralCreateSupport' in the 'xcmHrGeneralTable'. Usage: Conforming
implementations which support dynamic rows SHALL support 'createAndGo' and
'destroy' writes to this 'xcmHrSWInstalledRowStatus' row status object; and
SHALL set the 'xcmHrSWInstalledGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrSWInstalledAdminName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrSWInstalledAdminName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrSWInstalledAdminName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrSWInstalledAdminName_Object = MibTableColumn
xcmHrSWInstalledAdminName = _XcmHrSWInstalledAdminName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1, 2),
    _XcmHrSWInstalledAdminName_Type()
)
xcmHrSWInstalledAdminName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWInstalledAdminName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledAdminName.setReference("""\
See: 'hrSWInstalledName' in the Software Installed Group of the IETF Host
Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrSWInstalledAdminName.setDescription("""\
Human-readable software name, used by system administrators and end users to
identify this software for systems management. Usage: This software name SHALL
be the one normally used in a CLI/GUI/API for control of this software. Note:
The 'hrSWInstalledName' object in 'hrSWInstalledTable' of the IETF Host
Resources MIB (RFC 2790) has MANDATORY content of 'manufacturer, revision, and
the name by which [the software] is commonly known'. Thus, conforming
implementations SHALL NOT set a 'simple name' into 'hrSWInstalledName'.
Therefore, this 'xcmHrSWInstalledAdminName' object is needed for management.
""")
_XcmHrSWInstalledXStatus_Type = XcmHrSWRunXStatus
_XcmHrSWInstalledXStatus_Object = MibTableColumn
xcmHrSWInstalledXStatus = _XcmHrSWInstalledXStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1, 3),
    _XcmHrSWInstalledXStatus_Type()
)
xcmHrSWInstalledXStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSWInstalledXStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledXStatus.setReference("""\
See: 'hrSWRunStatus' in the Software Running Group of the IETF Host Resources
MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrSWInstalledXStatus.setDescription("""\
An extended software status, used by system administrators and end users of
this software (here, read 'state' for 'status'). Note: This extended software
status is present for future extensions.
""")


class _XcmHrSWInstalledRowCreateDate_Type(DateAndTime):
    """Custom type xcmHrSWInstalledRowCreateDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmHrSWInstalledRowCreateDate_Object = MibTableColumn
xcmHrSWInstalledRowCreateDate = _XcmHrSWInstalledRowCreateDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1, 4),
    _XcmHrSWInstalledRowCreateDate_Type()
)
xcmHrSWInstalledRowCreateDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSWInstalledRowCreateDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledRowCreateDate.setDescription("""\
The date and time when this conceptual row was created.
""")
_XcmHrSWInstalledPhysicalIndex_Type = Cardinal32
_XcmHrSWInstalledPhysicalIndex_Object = MibTableColumn
xcmHrSWInstalledPhysicalIndex = _XcmHrSWInstalledPhysicalIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1, 5),
    _XcmHrSWInstalledPhysicalIndex_Type()
)
xcmHrSWInstalledPhysicalIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWInstalledPhysicalIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledPhysicalIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790). See: Section 9.5.6 'Physical-printers-supported' of DPA (ISO 10175-1,
Final Text, March 1996).
""")
if mibBuilder.loadTexts:
    xcmHrSWInstalledPhysicalIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the first associated conceptual
row in the 'hrDeviceTable' representing a supported and (possibly) ready
'physical' device, which has 'xcmHrDevInfoRealization' of 'physical' or
'logicalAndPhysical', or zero, if there is no supported and subordinate
'physical' device associated with this row (ie, this installed software).
""")
_XcmHrSWInstalledLogicalIndex_Type = Cardinal32
_XcmHrSWInstalledLogicalIndex_Object = MibTableColumn
xcmHrSWInstalledLogicalIndex = _XcmHrSWInstalledLogicalIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1, 6),
    _XcmHrSWInstalledLogicalIndex_Type()
)
xcmHrSWInstalledLogicalIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWInstalledLogicalIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledLogicalIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790). See: Section 9.5.8 'Logical-printers-supported' of DPA (ISO 10175-1,
Final Text, March 1996).
""")
if mibBuilder.loadTexts:
    xcmHrSWInstalledLogicalIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the first associated conceptual
row in the 'hrDeviceTable' representing a supported and (possibly) ready
'logical' device, which has 'xcmHrDevInfoRealization' of 'logical' or
'logicalAndPhysical', or zero, if there is no supported and subordinate
'logical' device associated with this row (ie, this installed software).
""")
_XcmHrSWInstalledNextIndex_Type = Cardinal32
_XcmHrSWInstalledNextIndex_Object = MibTableColumn
xcmHrSWInstalledNextIndex = _XcmHrSWInstalledNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1, 7),
    _XcmHrSWInstalledNextIndex_Type()
)
xcmHrSWInstalledNextIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWInstalledNextIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledNextIndex.setDescription("""\
The value of 'hrSWInstalledIndex' corresponding to the next associated row in
the 'hrSWInstalledTable', or zero if this is the last associated conceptual row
in a given set.
""")
_XcmHrSWInstalledPreviousIndex_Type = Cardinal32
_XcmHrSWInstalledPreviousIndex_Object = MibTableColumn
xcmHrSWInstalledPreviousIndex = _XcmHrSWInstalledPreviousIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 12, 2, 1, 8),
    _XcmHrSWInstalledPreviousIndex_Type()
)
xcmHrSWInstalledPreviousIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrSWInstalledPreviousIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledPreviousIndex.setDescription("""\
The value of 'hrSWInstalledIndex' corresponding to the previous associated row
in the 'hrSWInstalledTable', or zero if this is the first associated conceptual
row in a given set.
""")
_XcmHrDevDetail_ObjectIdentity = ObjectIdentity
xcmHrDevDetail = _XcmHrDevDetail_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13)
)
_XcmHrDevDetailV1EventOID_ObjectIdentity = ObjectIdentity
xcmHrDevDetailV1EventOID = _XcmHrDevDetailV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 1)
)
if mibBuilder.loadTexts:
    xcmHrDevDetailV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever a
device detail usage or time limit is reached. See SNMPv2 trap definition
'xcmHrDevDetailV2Event' below for 'special semantics'.
""")
_XcmHrDevDetailV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmHrDevDetailV2EventPrefix = _XcmHrDevDetailV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 1, 0)
)
_XcmHrDevDetailTable_Object = MibTable
xcmHrDevDetailTable = _XcmHrDevDetailTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevDetailTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailTable.setReference("""\
See: 'hrProcessorTable', 'hrNetworkTable', 'hrPrinterTable' in the IETF Host
Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevDetailTable.setDescription("""\
A 'sparse' table containing device detail information for installed and
(possibly) active devices on this host system, augmenting the basic entries in
the 'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790). Usage: UNLIKE
the 'xcmGenOptionTable' in the XCMI General MIB (which is a unique exception),
this table of 'dictionary-based' device details is used with DIRECT
create/update operations.
""")
_XcmHrDevDetailEntry_Object = MibTableRow
xcmHrDevDetailEntry = _XcmHrDevDetailEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1)
)
xcmHrDevDetailEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrDevDetailType"),
    (0, "XEROX-COMMON-MIB", "xcmHrDevDetailIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDevDetailEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailEntry.setDescription("""\
A 'sparse' entry containing device detail information for an installed and
(possibly) active device on this host system, augmenting a basic entry in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790). Usage: An entry in
this table MAY be used to store specialized information for a device, such as
'lifetime' information for a CRU ('customer replaceable unit'), eg, a paper
tray feed head.
""")
_XcmHrDevDetailType_Type = XcmHrDevDetailType
_XcmHrDevDetailType_Object = MibTableColumn
xcmHrDevDetailType = _XcmHrDevDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 1),
    _XcmHrDevDetailType_Type()
)
xcmHrDevDetailType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailType.setDescription("""\
The type of the device detail information specified in this conceptual row in
the 'xcmHrDevDetailTable'.
""")
_XcmHrDevDetailIndex_Type = Ordinal32
_XcmHrDevDetailIndex_Object = MibTableColumn
xcmHrDevDetailIndex = _XcmHrDevDetailIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 2),
    _XcmHrDevDetailIndex_Type()
)
xcmHrDevDetailIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevDetailIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrDevDetailTable', OR a common value shared across a set of related
conceptual rows (with different values of 'xcmHrDevDetailType'. Usage: For
device detail types which are single-valued, this index SHALL be used to
correlate related single-valued details. Usage: For device detail types which
are multi-valued, this index SHALL be used to enumerate lists of multi-valued
details.
""")
_XcmHrDevDetailRowStatus_Type = RowStatus
_XcmHrDevDetailRowStatus_Object = MibTableColumn
xcmHrDevDetailRowStatus = _XcmHrDevDetailRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 3),
    _XcmHrDevDetailRowStatus_Type()
)
xcmHrDevDetailRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevDetailRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevDetailRowStatus.setDescription("""\
This object manages the row status of this conceptual row in in the
'xcmHrDevDetailTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmHrDevDetailRowStatus' row status object; and SHALL clear the
'xcmHrDevDetailGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrDevDetailRowStatus' row status object; and SHALL set the
'xcmHrDevDetailGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrDevDetailUnitClass_Type(XcmHrDevDetailUnitClass):
    """Custom type xcmHrDevDetailUnitClass based on XcmHrDevDetailUnitClass"""


_XcmHrDevDetailUnitClass_Object = MibTableColumn
xcmHrDevDetailUnitClass = _XcmHrDevDetailUnitClass_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 4),
    _XcmHrDevDetailUnitClass_Type()
)
xcmHrDevDetailUnitClass.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevDetailUnitClass.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailUnitClass.setReference("""\
See: 'xcmHrDevDetailUnit'
""")
if mibBuilder.loadTexts:
    xcmHrDevDetailUnitClass.setDescription("""\
The value unit class of the detail information specified in this conceptual row
in the 'xcmHrDevDetailTable'. Usage: Used to select a textual convention for
specifying the value unit of this device detail. Usage: The
'xcmHrDevDetail[UnitClass|Class]' objects are used to specify the value syntax
AND the value unit of the 'xcmHrDevDetail[Integer|OID|String]' value objects.
""")
_XcmHrDevDetailUnit_Type = Cardinal32
_XcmHrDevDetailUnit_Object = MibTableColumn
xcmHrDevDetailUnit = _XcmHrDevDetailUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 5),
    _XcmHrDevDetailUnit_Type()
)
xcmHrDevDetailUnit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevDetailUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailUnit.setReference("""\
See: 'xcmHrDevDetailUnitClass'
""")
if mibBuilder.loadTexts:
    xcmHrDevDetailUnit.setDescription("""\
The value unit of the detail information specified in this conceptual row in
the 'xcmHrDevDetailTable'. Usage: Used to select an enumerated choice from a
textual convention to specify the value unit of this device detail. Usage: The
'xcmHrDevDetail[UnitClass|Class]' objects are used to specify the value syntax
AND the value unit of the 'xcmHrDevDetail[Integer|OID|String]' value objects.
""")
_XcmHrDevDetailValueInteger_Type = Integer32
_XcmHrDevDetailValueInteger_Object = MibTableColumn
xcmHrDevDetailValueInteger = _XcmHrDevDetailValueInteger_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 6),
    _XcmHrDevDetailValueInteger_Type()
)
xcmHrDevDetailValueInteger.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueInteger.setReference("""\
See: 'xcmHrDevDetailValueOID' and 'xcmHrDevDetailValueString' See:
'xcmHrDevDetailUnitClass' and 'xcmHrDevDetailUnit' for syntax of detail value
""")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueInteger.setDescription("""\
A device detail value integer, used by system administrators and end users to
specify the current value for a device detail with a base value syntax of
'INTEGER'.
""")


class _XcmHrDevDetailValueOID_Type(ObjectIdentifier):
    """Custom type xcmHrDevDetailValueOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmHrDevDetailValueOID_Object = MibTableColumn
xcmHrDevDetailValueOID = _XcmHrDevDetailValueOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 7),
    _XcmHrDevDetailValueOID_Type()
)
xcmHrDevDetailValueOID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueOID.setReference("""\
See: 'xcmHrDevDetailValueInteger' and 'xcmHrDevDetailValueString' See:
'xcmHrDevDetailUnitClass' and 'xcmHrDevDetailUnit' for syntax of detail value
""")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueOID.setDescription("""\
A device detail value OID (object identifier), used by system administrators
and end users to specify the current value for a device detail with a base
value syntax of 'OBJECT IDENTIFIER'.
""")


class _XcmHrDevDetailValueString_Type(OctetString):
    """Custom type xcmHrDevDetailValueString based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevDetailValueString_Type.__name__ = "OctetString"
_XcmHrDevDetailValueString_Object = MibTableColumn
xcmHrDevDetailValueString = _XcmHrDevDetailValueString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 8),
    _XcmHrDevDetailValueString_Type()
)
xcmHrDevDetailValueString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueString.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueString.setReference("""\
See: 'xcmHrDevDetailValueInteger' and 'xcmHrDevDetailValueOID' See:
'xcmHrDevDetailUnitClass' and 'xcmHrDevDetailUnit' for syntax of detail value
""")
if mibBuilder.loadTexts:
    xcmHrDevDetailValueString.setDescription("""\
A device detail value string, used by system administrators and end users to
specify the current value for a device detail with a base value syntax of
'OCTET STRING'. Usage: This object is of type 'XcmFixedLocaleDisplayString'.
Usage: Conformant implementations MUST encrypt passwords, keys, and other
security information stored in this string object.
""")


class _XcmHrDevDetailDescription_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevDetailDescription based on XcmFixedLocaleDisplayString"""
    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevDetailDescription_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevDetailDescription_Object = MibTableColumn
xcmHrDevDetailDescription = _XcmHrDevDetailDescription_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 2, 1, 9),
    _XcmHrDevDetailDescription_Type()
)
xcmHrDevDetailDescription.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevDetailDescription.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailDescription.setDescription("""\
This object is used to provide a description of the detail. It is NOT expected
to be parsed by the management application.
""")
_XcmHrStorage_ObjectIdentity = ObjectIdentity
xcmHrStorage = _XcmHrStorage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14)
)
_XcmHrStorageTable_Object = MibTable
xcmHrStorageTable = _XcmHrStorageTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2)
)
if mibBuilder.loadTexts:
    xcmHrStorageTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageTable.setDescription("""\
A 'sparse' table containing storage info objects for 'logical' or 'physical'
storage elements on this host system, augmenting the basic entries in the
'hrStorageTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrStorageEntry_Object = MibTableRow
xcmHrStorageEntry = _XcmHrStorageEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1)
)
xcmHrStorageEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrStorageIndex"),
)
if mibBuilder.loadTexts:
    xcmHrStorageEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageEntry.setDescription("""\
A 'sparse' entry containing storage info objects for a 'logical' or 'physical'
storage element on this host system, augmenting a basic entry in the
'hrStorageTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrStorageRowStatus_Type = RowStatus
_XcmHrStorageRowStatus_Object = MibTableColumn
xcmHrStorageRowStatus = _XcmHrStorageRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 1),
    _XcmHrStorageRowStatus_Type()
)
xcmHrStorageRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrStorageRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrStorageTable' and ALSO manages the row status of the associated
conceptual row in the 'hrStorageTable' of the IETF Host Resources MIB (RFC
2790). Usage: Conforming implementations which support static rows SHALL
support 'active' and 'notInService' writes to this 'xcmHrStorageRowStatus' row
status object; and SHALL clear the 'xcmHrStorageGroup' bit in
'xcmHrGeneralCreateSupport' in the 'xcmHrGeneralTable'. Usage: Conforming
implementations which support dynamic rows SHALL support 'createAndGo' and
'destroy' writes to this 'xcmHrStorageRowStatus' row status object; and SHALL
set the 'xcmHrStorageGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrStorageRealization_Type(XcmHrStorageRealization):
    """Custom type xcmHrStorageRealization based on XcmHrStorageRealization"""


_XcmHrStorageRealization_Object = MibTableColumn
xcmHrStorageRealization = _XcmHrStorageRealization_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 2),
    _XcmHrStorageRealization_Type()
)
xcmHrStorageRealization.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageRealization.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageRealization.setReference("""\
See: 'XcmHrDevInfoRealization' textual convention in the XCMI Ext to Host
Resources TC. See: 'xcmHrDevInfoRealization' in the Device Info group of the
XCMI Ext to Host Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmHrStorageRealization.setDescription("""\
An extended storage type (or storage 'realization'), used by system
administrators and end users of this storage. Usage: The use of either 'other'
or 'unknown' is uninformative and SHOULD be avoided by conforming
implementations.
""")


class _XcmHrStorageStatus_Type(XcmHrDevInfoStatus):
    """Custom type xcmHrStorageStatus based on XcmHrDevInfoStatus"""


_XcmHrStorageStatus_Object = MibTableColumn
xcmHrStorageStatus = _XcmHrStorageStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 3),
    _XcmHrStorageStatus_Type()
)
xcmHrStorageStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrStorageStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageStatus.setReference("""\
See: 'XcmHrDevInfoStatus' textual convention in the XCMI Ext to Host Resources
TC. See: 'hrDeviceStatus' in the Device group of the IETF Host Resources MIB
(RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrStorageStatus.setDescription("""\
A storage status, used by system administrators and end users of this storage
(here, read 'state' for 'status'). Usage: Conforming implementations SHALL NOT
'bubble up' status from 'physical' storage to associated 'logical' storage. All
storage SHALL report its own status ONLY.
""")
_XcmHrStorageProductDeviceIndex_Type = Cardinal32
_XcmHrStorageProductDeviceIndex_Object = MibTableColumn
xcmHrStorageProductDeviceIndex = _XcmHrStorageProductDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 4),
    _XcmHrStorageProductDeviceIndex_Type()
)
xcmHrStorageProductDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageProductDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageProductDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrStorageProductDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the product associated conceptual
row in the 'hrDeviceTable' representing the product (container) device (eg, of
type 'hrDevicePrinter'), which uses this storage.
""")
_XcmHrStoragePlatformDeviceIndex_Type = Cardinal32
_XcmHrStoragePlatformDeviceIndex_Object = MibTableColumn
xcmHrStoragePlatformDeviceIndex = _XcmHrStoragePlatformDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 5),
    _XcmHrStoragePlatformDeviceIndex_Type()
)
xcmHrStoragePlatformDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStoragePlatformDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStoragePlatformDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrStoragePlatformDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the platform associated
conceptual row in the 'hrDeviceTable' representing the CPU device (of type
'hrDeviceProcessor'), which manages this storage.
""")
_XcmHrStoragePagingDeviceIndex_Type = Cardinal32
_XcmHrStoragePagingDeviceIndex_Object = MibTableColumn
xcmHrStoragePagingDeviceIndex = _XcmHrStoragePagingDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 6),
    _XcmHrStoragePagingDeviceIndex_Type()
)
xcmHrStoragePagingDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStoragePagingDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStoragePagingDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790). See: 'storagePageSize' in the 'XcmHrStorageDetailType' textual
convention in the XCMI Ext to Host Resources TC.
""")
if mibBuilder.loadTexts:
    xcmHrStoragePagingDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the paging associated conceptual
row in the 'hrDeviceTable' representing the paging device (usually of type
'hrDeviceDiskStorage'), which provides secondary storage for swapping of this
storage.
""")
_XcmHrStorageMatchingDeviceIndex_Type = Cardinal32
_XcmHrStorageMatchingDeviceIndex_Object = MibTableColumn
xcmHrStorageMatchingDeviceIndex = _XcmHrStorageMatchingDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 7),
    _XcmHrStorageMatchingDeviceIndex_Type()
)
xcmHrStorageMatchingDeviceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageMatchingDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageMatchingDeviceIndex.setReference("""\
See: 'hrDeviceIndex' in the Device group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrStorageMatchingDeviceIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the matching associated
conceptual row in the 'hrDeviceTable' representing the matching device (eg, of
type 'hrDeviceDiskStorage'), which corresponds to this storage.
""")
_XcmHrStorageSWRunIndex_Type = Cardinal32
_XcmHrStorageSWRunIndex_Object = MibTableColumn
xcmHrStorageSWRunIndex = _XcmHrStorageSWRunIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 8),
    _XcmHrStorageSWRunIndex_Type()
)
xcmHrStorageSWRunIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageSWRunIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageSWRunIndex.setReference("""\
See: 'hrSWRunIndex' in the Software Running group of the IETF Host Resources
MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrStorageSWRunIndex.setDescription("""\
The value of 'hrSWRunIndex' corresponding to the superior associated conceptual
row in the 'hrSWRunTable' representing the running software which manages this
storage.
""")
_XcmHrStorageSWInstalledIndex_Type = Cardinal32
_XcmHrStorageSWInstalledIndex_Object = MibTableColumn
xcmHrStorageSWInstalledIndex = _XcmHrStorageSWInstalledIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 9),
    _XcmHrStorageSWInstalledIndex_Type()
)
xcmHrStorageSWInstalledIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageSWInstalledIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageSWInstalledIndex.setReference("""\
See: 'hrSWInstalledIndex' in the Software Installed group of the IETF Host
Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrStorageSWInstalledIndex.setDescription("""\
The value of 'hrSWInstalledIndex' corresponding to the superior associated
conceptual row in the 'hrSWInstalledTable' representing the installed software
which manages this storage.
""")
_XcmHrStorageNextIndex_Type = Cardinal32
_XcmHrStorageNextIndex_Object = MibTableColumn
xcmHrStorageNextIndex = _XcmHrStorageNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 10),
    _XcmHrStorageNextIndex_Type()
)
xcmHrStorageNextIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageNextIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageNextIndex.setReference("""\
See: 'hrStorageIndex' in the Storage group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrStorageNextIndex.setDescription("""\
The value of 'hrStorageIndex' corresponding to: a) the next associated row in
the 'hrStorageTable'; or b) zero if this is the last associated conceptual row
in a given set; or c) zero if this conceptual row is NOT part of a set.
""")
_XcmHrStoragePreviousIndex_Type = Cardinal32
_XcmHrStoragePreviousIndex_Object = MibTableColumn
xcmHrStoragePreviousIndex = _XcmHrStoragePreviousIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 11),
    _XcmHrStoragePreviousIndex_Type()
)
xcmHrStoragePreviousIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStoragePreviousIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStoragePreviousIndex.setReference("""\
See: 'hrStorageIndex' in the Storage group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrStoragePreviousIndex.setDescription("""\
The value of 'hrStorageIndex' corresponding to: a) the previous associated row
in the 'hrStorageTable'; or b) zero if this is the first associated conceptual
row in a given set; or c) zero if this conceptual row is NOT part of a set.
""")
_XcmHrStoragePhysicalIndex_Type = Cardinal32
_XcmHrStoragePhysicalIndex_Object = MibTableColumn
xcmHrStoragePhysicalIndex = _XcmHrStoragePhysicalIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 14, 2, 1, 12),
    _XcmHrStoragePhysicalIndex_Type()
)
xcmHrStoragePhysicalIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStoragePhysicalIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStoragePhysicalIndex.setReference("""\
See: 'hrStorageIndex' in the Storage group of the IETF Host Resources MIB (RFC
2790).
""")
if mibBuilder.loadTexts:
    xcmHrStoragePhysicalIndex.setDescription("""\
The value of 'hrStorageIndex' corresponding to the directly associated
conceptual row in the 'hrStorageTable' representing: a) the first underlying
'physical' storage (if any), if this row has 'xcmHrStorageRealization' of
'logical...'; or b) the first subordinate 'physical' storage (if any), if this
row has 'xcmHrStorageRealization' of 'physical...'; or c) zero if there is no
underlying or subordinate 'physical' storage associated with this row (ie, this
storage).
""")
_XcmHrStorageDetail_ObjectIdentity = ObjectIdentity
xcmHrStorageDetail = _XcmHrStorageDetail_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15)
)
_XcmHrStorageDetailTable_Object = MibTable
xcmHrStorageDetailTable = _XcmHrStorageDetailTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2)
)
if mibBuilder.loadTexts:
    xcmHrStorageDetailTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailTable.setDescription("""\
A 'sparse' table containing storage detail information for 'logical' or
'physical' storage elements on this host system, augmenting a basic entry in
the 'hrStorageTable' of the IETF Host Resources MIB (RFC 2790). Usage: UNLIKE
the 'xcmGenOptionTable' in the XCMI General MIB (which is a unique exception),
this table of 'dictionary-based' storage details is used with DIRECT
create/update operations.
""")
_XcmHrStorageDetailEntry_Object = MibTableRow
xcmHrStorageDetailEntry = _XcmHrStorageDetailEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1)
)
xcmHrStorageDetailEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrStorageIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrStorageDetailType"),
    (0, "XEROX-COMMON-MIB", "xcmHrStorageDetailIndex"),
)
if mibBuilder.loadTexts:
    xcmHrStorageDetailEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailEntry.setDescription("""\
A 'sparse' entry containing storage detail information for a 'logical' or
'physical' storage element on this host system, augmenting a basic entry in the
'hrStorageTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrStorageDetailType_Type = XcmHrStorageDetailType
_XcmHrStorageDetailType_Object = MibTableColumn
xcmHrStorageDetailType = _XcmHrStorageDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1, 1),
    _XcmHrStorageDetailType_Type()
)
xcmHrStorageDetailType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrStorageDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailType.setDescription("""\
The type of the storage detail information specified in this conceptual row in
the 'xcmHrStorageDetailTable'.
""")
_XcmHrStorageDetailIndex_Type = Ordinal32
_XcmHrStorageDetailIndex_Object = MibTableColumn
xcmHrStorageDetailIndex = _XcmHrStorageDetailIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1, 2),
    _XcmHrStorageDetailIndex_Type()
)
xcmHrStorageDetailIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrStorageDetailIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrStorageDetailTable', OR a common value shared across a set of related
conceptual rows (with different values of 'xcmHrStorageDetailType'. Usage: For
storage detail types which are single-valued, this index SHALL be used to
correlate related single-valued details. Usage: For storage detail types which
are multi-valued, this index SHALL be used to enumerate lists of multi-valued
details.
""")
_XcmHrStorageDetailRowStatus_Type = RowStatus
_XcmHrStorageDetailRowStatus_Object = MibTableColumn
xcmHrStorageDetailRowStatus = _XcmHrStorageDetailRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1, 3),
    _XcmHrStorageDetailRowStatus_Type()
)
xcmHrStorageDetailRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageDetailRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrStorageDetailRowStatus.setDescription("""\
This object manages the row status of this conceptual row in in the
'xcmHrStorageDetailTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmHrStorageDetailRowStatus' row status object; and SHALL clear the
'xcmHrStorageDetailGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrStorageDetailRowStatus' row status object; and SHALL set the
'xcmHrStorageDetailGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrStorageDetailUnitClass_Type(XcmHrDevDetailUnitClass):
    """Custom type xcmHrStorageDetailUnitClass based on XcmHrDevDetailUnitClass"""


_XcmHrStorageDetailUnitClass_Object = MibTableColumn
xcmHrStorageDetailUnitClass = _XcmHrStorageDetailUnitClass_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1, 4),
    _XcmHrStorageDetailUnitClass_Type()
)
xcmHrStorageDetailUnitClass.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageDetailUnitClass.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailUnitClass.setReference("""\
See: 'xcmHrStorageDetailUnit'
""")
if mibBuilder.loadTexts:
    xcmHrStorageDetailUnitClass.setDescription("""\
The value unit class of the detail information specified in this conceptual row
in the 'xcmHrStorageDetailTable'. Usage: Used to select a textual convention
for specifying the value unit of this storage detail. Usage: The
'xcmHrStorageDetail[UnitClass|Class]' objects are used to specify the value
syntax AND the value unit of the 'xcmHrStorageDetail[Integer|OID|String]' value
objects.
""")
_XcmHrStorageDetailUnit_Type = Cardinal32
_XcmHrStorageDetailUnit_Object = MibTableColumn
xcmHrStorageDetailUnit = _XcmHrStorageDetailUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1, 5),
    _XcmHrStorageDetailUnit_Type()
)
xcmHrStorageDetailUnit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageDetailUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailUnit.setReference("""\
See: 'xcmHrStorageDetailUnitClass'
""")
if mibBuilder.loadTexts:
    xcmHrStorageDetailUnit.setDescription("""\
The value unit of the detail information specified in this conceptual row in
the 'xcmHrStorageDetailTable'. Usage: Used to select an enumerated choice from
a textual convention to specify the value unit of this storage detail. Usage:
The 'xcmHrStorageDetail[UnitClass|Class]' objects are used to specify the value
syntax AND the value unit of the 'xcmHrStorageDetail[Integer|OID|String]' value
objects.
""")
_XcmHrStorageDetailValueInteger_Type = Integer32
_XcmHrStorageDetailValueInteger_Object = MibTableColumn
xcmHrStorageDetailValueInteger = _XcmHrStorageDetailValueInteger_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1, 6),
    _XcmHrStorageDetailValueInteger_Type()
)
xcmHrStorageDetailValueInteger.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueInteger.setReference("""\
See: 'xcmHrStorageDetailValueOID' and 'xcmHrStorageDetailValueString' See:
'xcmHrStorageDetailUnitClass' and 'xcmHrStorageDetailUnit' for syntax of detail
value
""")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueInteger.setDescription("""\
A storage detail value integer, used by system administrators and end users to
specify the current value for a storage detail with a base value syntax of
'INTEGER'.
""")


class _XcmHrStorageDetailValueOID_Type(ObjectIdentifier):
    """Custom type xcmHrStorageDetailValueOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmHrStorageDetailValueOID_Object = MibTableColumn
xcmHrStorageDetailValueOID = _XcmHrStorageDetailValueOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1, 7),
    _XcmHrStorageDetailValueOID_Type()
)
xcmHrStorageDetailValueOID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueOID.setReference("""\
See: 'xcmHrStorageDetailValueInteger' and 'xcmHrStorageDetailValueString' See:
'xcmHrStorageDetailUnitClass' and 'xcmHrStorageDetailUnit' for syntax of detail
value
""")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueOID.setDescription("""\
A storage detail value OID (object identifier), used by system administrators
and end users to specify the current value for a storage detail with a base
value syntax of 'OBJECT IDENTIFIER'.
""")


class _XcmHrStorageDetailValueString_Type(OctetString):
    """Custom type xcmHrStorageDetailValueString based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrStorageDetailValueString_Type.__name__ = "OctetString"
_XcmHrStorageDetailValueString_Object = MibTableColumn
xcmHrStorageDetailValueString = _XcmHrStorageDetailValueString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 15, 2, 1, 8),
    _XcmHrStorageDetailValueString_Type()
)
xcmHrStorageDetailValueString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueString.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueString.setReference("""\
See: 'xcmHrStorageDetailValueInteger' and 'xcmHrStorageDetailValueOID' See:
'xcmHrStorageDetailUnitClass' and 'xcmHrStorageDetailUnit' for syntax of detail
value
""")
if mibBuilder.loadTexts:
    xcmHrStorageDetailValueString.setDescription("""\
A storage detail value string, used by system administrators and end users to
specify the current value for a storage detail with a base value syntax of
'OCTET STRING'. Usage: This object is of type 'XcmFixedLocaleDisplayString'.
Usage: Conformant implementations MUST encrypt passwords, keys, and other
security information stored in this string object.
""")
_XcmHrDevCover_ObjectIdentity = ObjectIdentity
xcmHrDevCover = _XcmHrDevCover_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16)
)
_XcmHrDevCoverTable_Object = MibTable
xcmHrDevCoverTable = _XcmHrDevCoverTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevCoverTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverTable.setReference("""\
See: 'prtCoverTable' in the Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevCoverTable.setDescription("""\
A 'sparse' table containing cover and/or interlock info for installed and
(possibly) active devices on this host system, augmenting the basic entries in
the 'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevCoverEntry_Object = MibTableRow
xcmHrDevCoverEntry = _XcmHrDevCoverEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16, 2, 1)
)
xcmHrDevCoverEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrDevCoverIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDevCoverEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverEntry.setDescription("""\
A 'sparse' entry containing cover and/or interlock info for an installed and
(possibly) active device on this host system, augmenting a basic entry in the
'hrDeviceTable' of the IETF Host Resources MIB (RFC 2790).
""")
_XcmHrDevCoverIndex_Type = Ordinal32
_XcmHrDevCoverIndex_Object = MibTableColumn
xcmHrDevCoverIndex = _XcmHrDevCoverIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16, 2, 1, 1),
    _XcmHrDevCoverIndex_Type()
)
xcmHrDevCoverIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrDevCoverIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrDevCoverTable'.
""")
_XcmHrDevCoverRowStatus_Type = RowStatus
_XcmHrDevCoverRowStatus_Object = MibTableColumn
xcmHrDevCoverRowStatus = _XcmHrDevCoverRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16, 2, 1, 2),
    _XcmHrDevCoverRowStatus_Type()
)
xcmHrDevCoverRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCoverRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevCoverRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmHrDevCoverTable'. Usage: Conforming implementations which support static
rows SHALL support 'active' and 'notInService' writes to this
'xcmHrDevCoverRowStatus' row status object; and SHALL clear the
'xcmHrDevCoverGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmHrDevCoverRowStatus' row status object; and SHALL set the
'xcmHrDevCoverGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations need NOT support dynamic
row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmHrDevCoverName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevCoverName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevCoverName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevCoverName_Object = MibTableColumn
xcmHrDevCoverName = _XcmHrDevCoverName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16, 2, 1, 3),
    _XcmHrDevCoverName_Type()
)
xcmHrDevCoverName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCoverName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverName.setReference("""\
See: 'xcmHrDevCoverDescription' (below). See: 'prtCoverDescription' in the
Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevCoverName.setDescription("""\
Human-readable name of this device cover or interlock specified in this
conceptual row in the 'xcmHrDevCoverTable'. Usage: This name SHALL be locally
unambiguous (if specified) on this managed host system and SHALL be the one
normally used in a CLI/GUI/API for identification of this device cover or
interlock (eg, 'Cover1'). Usage: The the Printer MIB combines the name of a
device cover or device interlock with the description, in one object -
'xcmHrDevCover[Name|Description]' add clarity.
""")


class _XcmHrDevCoverDescription_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevCoverDescription based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevCoverDescription_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevCoverDescription_Object = MibTableColumn
xcmHrDevCoverDescription = _XcmHrDevCoverDescription_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16, 2, 1, 4),
    _XcmHrDevCoverDescription_Type()
)
xcmHrDevCoverDescription.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCoverDescription.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverDescription.setReference("""\
See: 'xcmHrDevCoverName' (above). See: 'prtCoverDescription' in the Printer
MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevCoverDescription.setDescription("""\
Human-readable description of this device cover or interlock specified in this
conceptual row in the 'xcmHrDevCoverTable'. Usage: This description MAY contain
the manufacturer's name, the color, the physical location, etc, of this device
cover or interlock (eg, 'Top front blue cover'). Usage: The the Printer MIB
combines the name of a device cover or device interlock with the description,
in one object - 'xcmHrDevCover[Name|Description]' add clarity.
""")


class _XcmHrDevCoverTypeCover_Type(TruthValue):
    """Custom type xcmHrDevCoverTypeCover based on TruthValue"""


_XcmHrDevCoverTypeCover_Object = MibTableColumn
xcmHrDevCoverTypeCover = _XcmHrDevCoverTypeCover_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16, 2, 1, 5),
    _XcmHrDevCoverTypeCover_Type()
)
xcmHrDevCoverTypeCover.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCoverTypeCover.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverTypeCover.setReference("""\
See: 'xcmHrDevCoverStatusOpen' (below). See: 'prtCoverStatus' in the Printer
MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevCoverTypeCover.setDescription("""\
The type of the device cover or interlock specified in this conceptual row in
the 'xcmHrDevCoverTable'. * 'true' - this is a device cover conceptual row; *
'false' - this is a device interlock conceptual row. Usage: The the Printer MIB
combines the identity of cover versus interlock with the status of open versus
closed, in one object - 'xcmHrDevCover[TypeCover|StatusOpen]' add clarity.
""")


class _XcmHrDevCoverStatusOpen_Type(TruthValue):
    """Custom type xcmHrDevCoverStatusOpen based on TruthValue"""


_XcmHrDevCoverStatusOpen_Object = MibTableColumn
xcmHrDevCoverStatusOpen = _XcmHrDevCoverStatusOpen_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 16, 2, 1, 6),
    _XcmHrDevCoverStatusOpen_Type()
)
xcmHrDevCoverStatusOpen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevCoverStatusOpen.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverStatusOpen.setReference("""\
See: 'xcmHrDevCoverTypeCover' (above). See: 'prtCoverStatus' in the Printer
MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevCoverStatusOpen.setDescription("""\
The status of the device cover or interlock specified in this conceptual row in
the 'xcmHrDevCoverTable'. * 'true' - this cover/interlock is currently open; *
'false' - this cover/interlock is currently closed. Usage: The the Printer MIB
combines the choice of cover versus interlock with the status of open versus
closed, in one object - 'xcmHrDevCover[TypeCover|StatusOpen]' add clarity.
""")
_XcmHrDevAlert_ObjectIdentity = ObjectIdentity
xcmHrDevAlert = _XcmHrDevAlert_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17)
)
_XcmHrDevAlertV1EventOID_ObjectIdentity = ObjectIdentity
xcmHrDevAlertV1EventOID = _XcmHrDevAlertV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 1)
)
if mibBuilder.loadTexts:
    xcmHrDevAlertV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever a
device alert row transitions to 'active' row status or (optionally) transitions
to 'notInService' row status in 'xcmHrDevAlertTable'. See SNMPv2 trap
definition 'xcmHrDevAlertV2Event' below for 'special semantics'.
""")
_XcmHrDevAlertV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmHrDevAlertV2EventPrefix = _XcmHrDevAlertV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 1, 0)
)
_XcmHrDevAlertTable_Object = MibTable
xcmHrDevAlertTable = _XcmHrDevAlertTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2)
)
if mibBuilder.loadTexts:
    xcmHrDevAlertTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertTable.setReference("""\
See: 'prtAlertTable' in the Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertTable.setDescription("""\
A table of the device alerts which have been generated and recorded on this
host system. Certain devices can be associated with specific alert tables
defined industry wide for the specific device. This general alert table is
designed to work with these other alert tables. At this time, the only device
specific alert table is prtAlertTable in the printer MIB. See
xcmHrDevAlertCodeInteger and xcmHrDevAlertDevAlertIndex for connections to the
device specific alert table. Usage: Conforming implementations SHALL ensure
that this table contains (up to) a product-specific number of the most 'recent'
device alerts on this host system. Usage: When an event occurs that should be
reported through the Alert table, the implementation SHALL create an alert for
each device impacted by the event. This SHOULD include all logical devices
containing the impacted device. All such alerts SHALL have the same index
'xcmHrDevAlertIndex.' Usage: If the hrDeviceIndex is an hrDevicePrinter, then
the product SHALL also generate an alert in the IETF 'prtAlertTable.' The index
'prtAlertIndex' for the associated printer alert table entry SHALL be returned
in 'xcmHrDevAlertDevAlertIndex' for the 'hrDevicePrinter' index. Management
tools can use the value of 'xcmHrDevAlertDevAlertIndex' to associate printer
alerts with alerts in this table. Usage: Conforming implementations which also
implement the System Fault group SHALL record in 'xcmHrSystemFaultTable' each
persistent system fault when it occurs and is recorded in 'xcmHrDevAlertTable'.
Usage: Conforming implementations MAY 'age' older entries out of
'xcmHrDevAlertTable' based on algorithms which depend on the age of the entry
and the particular alert. When the number of alerts in the table exceeds the
product-specific maximum number of alerts, the oldest non-critical alert SHALL
be removed. If there are no non-critical alerts, then the oldest critical alert
SHALL be removed.
""")
_XcmHrDevAlertEntry_Object = MibTableRow
xcmHrDevAlertEntry = _XcmHrDevAlertEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1)
)
xcmHrDevAlertEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrDevAlertIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDevAlertEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertEntry.setReference("""\
See: 'prtAlertEntry' in the Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertEntry.setDescription("""\
An entry for a device alert which has been generated and recorded on this host
system.
""")
_XcmHrDevAlertIndex_Type = Ordinal32
_XcmHrDevAlertIndex_Object = MibTableColumn
xcmHrDevAlertIndex = _XcmHrDevAlertIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 1),
    _XcmHrDevAlertIndex_Type()
)
xcmHrDevAlertIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrDevAlertIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrDevAlertTable'. Usage: Conforming implementations SHALL NOT 'reuse'
values of 'xcmHrDevAlertIndex' until its' 32-bit value wraps. Even in the case
of eventual wrap, the entries SHALL be strictly sequenced by the associated
value of 'xcmHrDevAlertDateAndTime.' Usage: When an event causes an alert on
several devices, all such alerts SHALL have the same 'xcmHrDevAlertIndex.'
Usage: Conforming implementations are strongly encouraged to preserve the last
used value of 'xcmHrDevAlertIndex' across system power cycles.
""")
_XcmHrDevAlertRowStatus_Type = RowStatus
_XcmHrDevAlertRowStatus_Object = MibTableColumn
xcmHrDevAlertRowStatus = _XcmHrDevAlertRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 2),
    _XcmHrDevAlertRowStatus_Type()
)
xcmHrDevAlertRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevAlertRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertRowStatus.setReference("""\
See: 'xcmHrGeneralCreateSupport' in 'xcmHrGeneralTable'. See: 'RowStatus' in
IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI HRX
MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertRowStatus.setDescription("""\
This object is used to create (by management agent) and delete (by management
station and/or management agent) individual conceptual rows in the
'xcmHrDevAlertTable'. Usage: Management stations can not create rows in the
alert table. Conforming implementations SHALL support 'active' and
'notInService' writes to this 'xcmHrDevAlertRowStatus' row status object; and
SHALL clear the 'xcmHrDevAlertGroup' bit in 'xcmHrGeneralCreateSupport' in the
'xcmHrGeneralTable'. Usage: Conforming implementations MAY support dynamic row
deletion via 'destroy(6)'. This allows management stations to delete any any
obsolete unary non-critical alerts.
""")
_XcmHrDevAlertSeverityLevel_Type = XcmGenNotifySeverityFilter
_XcmHrDevAlertSeverityLevel_Object = MibTableColumn
xcmHrDevAlertSeverityLevel = _XcmHrDevAlertSeverityLevel_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 3),
    _XcmHrDevAlertSeverityLevel_Type()
)
xcmHrDevAlertSeverityLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertSeverityLevel.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertSeverityLevel.setReference("""\
See: 'prtAlertSeverityLevel' in the Printer MIB. See:
'XcmGenNotifySeverityFilter' in XCMI General TC and
'xcmGenTrapViewNotifySeverity' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertSeverityLevel.setDescription("""\
Device-specific severity level for the device alert which is recorded in this
conceptual row in the 'xcmHrDevAlertTable'. Usage: Conforming management agents
SHALL set one bit (specific severity level) or zero bits (no severity level
reported) in this object.
""")
_XcmHrDevAlertTrainingLevel_Type = XcmGenNotifyTrainingFilter
_XcmHrDevAlertTrainingLevel_Object = MibTableColumn
xcmHrDevAlertTrainingLevel = _XcmHrDevAlertTrainingLevel_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 4),
    _XcmHrDevAlertTrainingLevel_Type()
)
xcmHrDevAlertTrainingLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertTrainingLevel.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertTrainingLevel.setReference("""\
See: 'prtAlertTrainingLevel' in the Printer MIB. See:
'XcmGenNotifyTrainingFilter' in XCMI General TC and
'xcmGenTrapViewNotifyTraining' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertTrainingLevel.setDescription("""\
Device-specific training level for the device alert which is recorded in this
conceptual row in the 'xcmHrDevAlertTable'. Usage: Conforming management agents
SHALL set one bit (specific training level) or zero bits (no training level
reported) in this object.
""")
_XcmHrDevAlertCodeInteger_Type = Integer32
_XcmHrDevAlertCodeInteger_Object = MibTableColumn
xcmHrDevAlertCodeInteger = _XcmHrDevAlertCodeInteger_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 5),
    _XcmHrDevAlertCodeInteger_Type()
)
xcmHrDevAlertCodeInteger.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertCodeInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertCodeInteger.setReference("""\
See: 'prtAlertCode' in the Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertCodeInteger.setDescription("""\
Device-specific code for the device alert which is recorded in this conceptual
row in the 'xcmHrDevAlertTable'. Usage: Conforming implementations SHALL use
the values specified in any device-specific alert table. For devices of type
'hrDevicePrinter', this value SHALL be the same as the 'PrtAlertCodeTC'
returned in 'prtAlertCode.' The value of 0 means that no code has been assigned
to this alert. This value is intended for internal use by management
applications rather than for human display. It should not be confused with
'xcmHrDevAlertCodeString;' the two values are generally NOT the same and there
is no assumed mapping from one to the other. All values in the range 1..99999
are reserved for definition within a device specific MIB. Values 100000..199999
will be defined within this MIB in future versions. Individual products may
define values 200000 and larger.
""")


class _XcmHrDevAlertCodeString_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevAlertCodeString based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevAlertCodeString_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevAlertCodeString_Object = MibTableColumn
xcmHrDevAlertCodeString = _XcmHrDevAlertCodeString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 6),
    _XcmHrDevAlertCodeString_Type()
)
xcmHrDevAlertCodeString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertCodeString.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertCodeString.setDescription("""\
Product-specific 'reportable alert code' string for the device alert which is
recorded in this conceptual row in the 'xcmHrDevAlertTable'. This is a product-
specific value used in documentation when describing this alert. Usage: This
value is intended for human display, and typically contains an alphanumeric
code or keyword phrase. It should not be confused with
'xcmHrDevAlertCodeInteger;' the two values are generally NOT the same and there
is no assumed mapping from one to the other. Usage: Often this string is not
translated since it has no specific meaning.
""")


class _XcmHrDevAlertDescription_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevAlertDescription based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevAlertDescription_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevAlertDescription_Object = MibTableColumn
xcmHrDevAlertDescription = _XcmHrDevAlertDescription_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 7),
    _XcmHrDevAlertDescription_Type()
)
xcmHrDevAlertDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertDescription.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertDescription.setReference("""\
See: 'prtAlertDescription' in the Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertDescription.setDescription("""\
Human-readable alert description for the device alert which is recorded in this
conceptual row in the 'xcmHrDevAlertTable'. Usage: This is a human-readable
string, not intended for machine parsing. Management stations SHOULD obtain the
alert-specific fault code and severity level from the 'xcmHrDevAlertCodeString'
and 'xcmHrDevAlertSeverityLevel' and the current status from 'hrDeviceStatus'
objects rather than trying to interpret this string. Implementators are
strongly encouraged to include in this description: - a description of the
problem, - a description of the corrective action or a statement that no
corrective action is required, - a description of the impact on device
operations. Implementors SHOULD NOT include in this description a statement of
the current operating state of the device, since the device state may be
changed by some other event unrelated to this alert, making any such statement
invalid. A statement such as 'Device operation may continue' or 'This problem
must be corrected before the device can resume operation' is acceptable. Usage:
Conforming implementations SHALL provide BOTH detailed
'xcmHrDevAlertDescription' AND terse 'xcmHrDevAlertTitle' descriptions for each
critical alert and for each alert which requires human intervention.
Implementations MAY provide the same text for both strings. Usage:
Implementations SHALL provide localized translations of this string via the
'xcmGenMessageTextTable.' Usage: For devices of type 'hrDevicePrinter', this
SHOULD be the same description provided in 'prtAlertDescription' in the IETF
Printer MIB alert table. Implementations MAY choose to make these descriptions
different in order to differentiate between IETF-only and XCMI-aware management
applications.
""")


class _XcmHrDevAlertReferenceOID_Type(ObjectIdentifier):
    """Custom type xcmHrDevAlertReferenceOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmHrDevAlertReferenceOID_Object = MibTableColumn
xcmHrDevAlertReferenceOID = _XcmHrDevAlertReferenceOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 8),
    _XcmHrDevAlertReferenceOID_Type()
)
xcmHrDevAlertReferenceOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceOID.setReference("""\
See: 'prtAlertGroup', 'prtAlertGroupIndex' and 'prtAlertLocation' in the
Printer MIB. See: 'xcmHrSystemFaultReferenceOID' in XCMI HRX MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceOID.setDescription("""\
An (optional) unambiguous system object reference (which MAY include an object
instance qualifier suffix), used to specify supplemental information for this
device alert. Usage: Since this system object reference is specified as an
ASN.1 object identifier, it MAY be taken from any IETF, Xerox, third-party, or
product-specific MIB, or it MAY simply be any IETF SMIv2-style 'autonomous
type'. Usage: If 'xcmHrDevAlertReferenceIndex' is greater than 0, then it is an
index into a table referenced by 'xcmHrDevAlertReferenceOID.' Usage: Devices of
type 'hrDevicePrinter' SHALL set 'xcmHrDevAlertReferenceOID' to the OID of the
table or group referred to by 'prtAlertGroup' in the IETF printer alert table.
(This may be a table or group in the host resources MIB, printer MIB, finisher
MIB, or other MIB as enumerated by 'PrtAlertGroupTC'.) Note: Given the
flexibility this object provides, the information is only valuable to the
Management Station if the OID is a well known OID.
""")


class _XcmHrDevAlertDateAndTime_Type(DateAndTime):
    """Custom type xcmHrDevAlertDateAndTime based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmHrDevAlertDateAndTime_Object = MibTableColumn
xcmHrDevAlertDateAndTime = _XcmHrDevAlertDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 9),
    _XcmHrDevAlertDateAndTime_Type()
)
xcmHrDevAlertDateAndTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertDateAndTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertDateAndTime.setReference("""\
See: 'prtAlertTime' in the Printer MIB. See: 'hrSystemDate' in IETF Host
Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertDateAndTime.setDescription("""\
The date and time stamp for the device alert which is recorded in this
conceptual row in the 'xcmHrDevAlertTable'.
""")


class _XcmHrDevAlertTitle_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDevAlertTitle based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_XcmHrDevAlertTitle_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDevAlertTitle_Object = MibTableColumn
xcmHrDevAlertTitle = _XcmHrDevAlertTitle_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 10),
    _XcmHrDevAlertTitle_Type()
)
xcmHrDevAlertTitle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertTitle.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertTitle.setReference("""\
See: 'xcmHrDevAlertDescription' which contains both a description of the alert
and the repair plan. See: 'xcmHrDevAlertCodeString' which contains an alert
code used in product documentation. See: 'xcmHrDevAlertHelpReference' which
contains an alert code used by a management station to locate help.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertTitle.setDescription("""\
A terse description of the problem or corrective action associated with the
device alert which is recorded in this conceptual row in the
'xcmHrDevAlertTable'. Usage: This is a human-readable string, not intended for
machine parsing. This message should be constructed for display in a navigation
tree or other contexts where the management station's user interface may have
strict limits on message length and complexity. The message should identify the
general type and area of the alert but omit most details in the interest of
brevity, e.g. 'tray empty' or 'replace toner' but not 'load A4 Transparency in
top tray' or 'replace cyan toner cartridge.' Implementations are strongly
encouraged to supply more detailed information in 'xcmHrDevAlertDescription'
but may simply supply the same text for both strings. Usage: Conforming
implementations SHALL provide both detailed 'xcmHrDevAlertDescription' and
terse 'xcmHrDevAlertTitle' descriptions for each critical alert and for each
alert which requires human intervention. Usage: Implementations SHALL provide
localized translations of this string via the 'xcmGenMessageTextTable.'
""")


class _XcmHrDevAlertHelpReference_Type(OctetString):
    """Custom type xcmHrDevAlertHelpReference based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDevAlertHelpReference_Type.__name__ = "OctetString"
_XcmHrDevAlertHelpReference_Object = MibTableColumn
xcmHrDevAlertHelpReference = _XcmHrDevAlertHelpReference_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 11),
    _XcmHrDevAlertHelpReference_Type()
)
xcmHrDevAlertHelpReference.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertHelpReference.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertHelpReference.setReference("""\
See: 'xcmHrDevAlertDescription' which contains both a description of the alert
and the repair plan. See: 'xcmHrDevAlertCodeString' which contains an alert
code used in product documentation. See: 'xcmHrDevAlertDescription' which
contains a description and repair actions.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertHelpReference.setDescription("""\
A key into a help reference. This key is intended for machine usage as either a
key into a database or as part of a path name to additional information. Usage:
This string may be used by a management station to construct the complete URL
or pathname of a file which may be stored on the management station, the
managed device, a customer's server or a Xerox web server. The mechanism by
which the URL or pathname should be constructed, including any requested
localization, is product- and application- dependent. For example, if the
device returns a string containing two path components <product-name>/<info-
path>, a host-based management application might construct either the pathname
'<install-dir>/<product-name>/<info-path>.<locale>' or '<install-
dir>/<locale>/<product-name>/<info-path>' depending on how the author wanted to
organize and distribute help files for various products and locales. A web-
based application with knowledge of the managed device's embedded web server
might be able to construct the URL 'http://<device-address>/alert-
info/<product-name>/<info-path>' and request a specific localization via the
HTTP 'accept- language' and 'accept-charset' headers. Usage: Implementors SHALL
use only the US-ASCII alphanumeric characters 'A'-'Z', 'a'-'z', '0'-'9' and the
punctuation marks underscore ('_'), hyphen ('-'), and forward slash ('/'). The
first and last characters must be alphanumeric. Implementors should note that
some hosts distinguish between upper- and lower-case letters in pathnames and
others don't. Therefore, different help paths should differ by more than just
letter case, and product documentation MUST accurately reflect the strings
returned in 'xcmHrDevAlertHelpReference', including letter case. Rationale:
Limiting the character set in this way ensures that the string can be used to
construct a valid pathname or URL on the widest variety of host systems. Note
that the file name is not localized (although the contents may be) and not
generally displayed for users, so there is little need to support characters
outside of this basic US-ASCII set.
""")


class _XcmHrDevAlertReferenceIndex_Type(Integer32):
    """Custom type xcmHrDevAlertReferenceIndex based on Integer32"""
    defaultValue = -1


_XcmHrDevAlertReferenceIndex_Object = MibTableColumn
xcmHrDevAlertReferenceIndex = _XcmHrDevAlertReferenceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 12),
    _XcmHrDevAlertReferenceIndex_Type()
)
xcmHrDevAlertReferenceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceIndex.setReference("""\
See: 'prtAlertGroupIndex' in the Printer MIB. See: 'xcmHrDevAlertReferenceOID'.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceIndex.setDescription("""\
An (optional) index into a system table used to specify supplemental
information for this device alert. Usage: When xcmHrDevAlertReferenceOID is a
table, xcmHrDevAlertReferenceIndex can be an index into that table. Note: If
the ReferenceOID table has multiple indices, the management table must
recognize the table and must know which index is given by this ReferenceIndex.
Usage: Use -1 if no index is required.
""")


class _XcmHrDevAlertReferenceLocation_Type(Integer32):
    """Custom type xcmHrDevAlertReferenceLocation based on Integer32"""
    defaultValue = -2


_XcmHrDevAlertReferenceLocation_Object = MibTableColumn
xcmHrDevAlertReferenceLocation = _XcmHrDevAlertReferenceLocation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 13),
    _XcmHrDevAlertReferenceLocation_Type()
)
xcmHrDevAlertReferenceLocation.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceLocation.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceLocation.setReference("""\
See: 'prtAlertGroupLocation' in the Printer MIB. See:
'xcmHrDevAlertReferenceOID'. See: 'xcmHrDevAlertReferenceIndex'.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertReferenceLocation.setDescription("""\
A product-specific refinement of the source of an alert. The value
'unknown(-2)' indicates that the device has no additional information to
provide.
""")
_XcmHrDevAlertDevAlertIndex_Type = Integer32
_XcmHrDevAlertDevAlertIndex_Object = MibTableColumn
xcmHrDevAlertDevAlertIndex = _XcmHrDevAlertDevAlertIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 14),
    _XcmHrDevAlertDevAlertIndex_Type()
)
xcmHrDevAlertDevAlertIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevAlertDevAlertIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertDevAlertIndex.setReference("""\
See: 'prtAlertIndex' in the Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertDevAlertIndex.setDescription("""\
An index into a device-specific alert table. When 'hrDeviceIndex' is of type
'hrDevicePrinter', then this field SHALL be the value of 'prtAlertIndex' for
the same alert.
""")
_XcmHrDevAlertPriority_Type = Integer32
_XcmHrDevAlertPriority_Object = MibTableColumn
xcmHrDevAlertPriority = _XcmHrDevAlertPriority_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 2, 1, 15),
    _XcmHrDevAlertPriority_Type()
)
xcmHrDevAlertPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrDevAlertPriority.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertPriority.setReference("""\
See: 'prtAlertIndex' in the Printer MIB.
""")
if mibBuilder.loadTexts:
    xcmHrDevAlertPriority.setDescription("""\
A sorting hint for user interfaces displaying device alerts. Usage: this field
allows a device to suggest, for instance, that the 'replace fuser' alert should
be displayed before the 'close door' alert in a list or navigation tree. Alert
priorities are ordinal numbers, with 1 indicating the highest priority for
display. A value of zero means 'no priority hint available'.
""")
_XcmHrDevAlertLastAlertIndex_Type = Cardinal32
_XcmHrDevAlertLastAlertIndex_Object = MibScalar
xcmHrDevAlertLastAlertIndex = _XcmHrDevAlertLastAlertIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 3),
    _XcmHrDevAlertLastAlertIndex_Type()
)
xcmHrDevAlertLastAlertIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertLastAlertIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertLastAlertIndex.setDescription("""\
The value of 'xcmHrDevAlertIndex' for the most recently-added alert (critical
or non-critical) in the alert table. This value only reflects the most recently
added alert; if the alert is subsequently cleared, the value of
'xcmHrDevAlertAllEvents' SHALL NOT be changed as a result. Compliant
implementations SHALL report zero if no alerts have been added to the table. A
management tool may use the fact that this value has not changed to avoid
checking for new alerts. Note that the value of this object will 'wrap' when
the first alert is added to the table after 'xcmHrDevAlertIndex' has reached
2**32 - 1 and 'wrapped' to 1.
""")
_XcmHrDevAlertLastCriticalAlertIndex_Type = Cardinal32
_XcmHrDevAlertLastCriticalAlertIndex_Object = MibScalar
xcmHrDevAlertLastCriticalAlertIndex = _XcmHrDevAlertLastCriticalAlertIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 4),
    _XcmHrDevAlertLastCriticalAlertIndex_Type()
)
xcmHrDevAlertLastCriticalAlertIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDevAlertLastCriticalAlertIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertLastCriticalAlertIndex.setDescription("""\
The value of 'xcmHrDevAlertIndex' for the most recently-added critical alert in
the alert table. This value only reflects the most recently added alert; if the
alert is subsequently cleared, the value of
'xcmHrDevAlertLastCriticalAlertIndex' SHALL NOT be changed as a result.
Compliant implementations SHALL report zero if no critical alerts have been
added to the table. A management tool may use the fact that this value has not
changed to avoid checking for new critical alerts. Note that the value of this
object will 'wrap' when the first critical alert is added to the table after
'xcmHrDevAlertIndex' has reached 2**32 - 1 and 'wrapped' to 1.
""")
_XcmHrConsoleScreen_ObjectIdentity = ObjectIdentity
xcmHrConsoleScreen = _XcmHrConsoleScreen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18)
)
_XcmHrConsoleScreenTable_Object = MibTable
xcmHrConsoleScreenTable = _XcmHrConsoleScreenTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18, 2)
)
if mibBuilder.loadTexts:
    xcmHrConsoleScreenTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenTable.setReference("""\
See: 'prtConsoleDisplayBufferTable' and 'prtConsoleLightTable' in the Printer
MIB.
""")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenTable.setDescription("""\
A table containing system local console screen (page) info for an installed
local user interface console on this host system.
""")
_XcmHrConsoleScreenEntry_Object = MibTableRow
xcmHrConsoleScreenEntry = _XcmHrConsoleScreenEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18, 2, 1)
)
xcmHrConsoleScreenEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrConsoleScreenIndex"),
)
if mibBuilder.loadTexts:
    xcmHrConsoleScreenEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenEntry.setDescription("""\
An entry containing system local console screen (page) info for an installed
local user interface console on this host system. Usage: Conforming management
agents SHOULD report local console info via 'hrDeviceIndex' for
'hrDevicePrinter' - consistent with 'prtConsoleDisplayBufferTable' in the
Printer MIB - or 'hrDeviceIndex' for 'xcmHrDeviceHostSystem' in XCMI HRX TC.
""")
_XcmHrConsoleScreenIndex_Type = Ordinal32
_XcmHrConsoleScreenIndex_Object = MibTableColumn
xcmHrConsoleScreenIndex = _XcmHrConsoleScreenIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18, 2, 1, 1),
    _XcmHrConsoleScreenIndex_Type()
)
xcmHrConsoleScreenIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrConsoleScreenTable'.
""")


class _XcmHrConsoleScreenName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrConsoleScreenName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrConsoleScreenName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrConsoleScreenName_Object = MibTableColumn
xcmHrConsoleScreenName = _XcmHrConsoleScreenName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18, 2, 1, 2),
    _XcmHrConsoleScreenName_Type()
)
xcmHrConsoleScreenName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenName.setDescription("""\
Human-readable name of this local console screen (page), used by system
administrators and end users to identify this screen for systems management.
Usage: Conforming management agents SHOULD NOT report the same value of
'xcmHrConsoleScreenName' for different screens (pages). Screens (pages) are
always uniquely labelled by their indices of 'xcmHrDeviceIndex' and
'xcmHrConsoleScreenIndex'.
""")


class _XcmHrConsoleScreenDescription_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrConsoleScreenDescription based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrConsoleScreenDescription_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrConsoleScreenDescription_Object = MibTableColumn
xcmHrConsoleScreenDescription = _XcmHrConsoleScreenDescription_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18, 2, 1, 3),
    _XcmHrConsoleScreenDescription_Type()
)
xcmHrConsoleScreenDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenDescription.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenDescription.setDescription("""\
Human-readable description of this local console screen.
""")
_XcmHrConsoleScreenParentIndex_Type = Cardinal32
_XcmHrConsoleScreenParentIndex_Object = MibTableColumn
xcmHrConsoleScreenParentIndex = _XcmHrConsoleScreenParentIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18, 2, 1, 4),
    _XcmHrConsoleScreenParentIndex_Type()
)
xcmHrConsoleScreenParentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenParentIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenParentIndex.setDescription("""\
Parent console screen index associated with this local console screen (page),
or zero (if none). Usage: Value of 'xcmHrConsoleScreenIndex' for parent screen.
This object MAY be used to report tree or forest relationships between local
console screens. Trees have a single root screen. Forests have two or more root
screens (w/ no parent screen).
""")


class _XcmHrConsoleScreenPriority_Type(Integer32):
    """Custom type xcmHrConsoleScreenPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XcmHrConsoleScreenPriority_Type.__name__ = "Integer32"
_XcmHrConsoleScreenPriority_Object = MibTableColumn
xcmHrConsoleScreenPriority = _XcmHrConsoleScreenPriority_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18, 2, 1, 5),
    _XcmHrConsoleScreenPriority_Type()
)
xcmHrConsoleScreenPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenPriority.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenPriority.setReference("""\
See: 'xcmHrDevInfoPriority' in XCMI Ext to Host Resources MIB 'xcmJobPriority'
in XCMI Job Mon MIB. 'xcmSvcMonServicePriority' in XCMI Svc Mon MIB.
""")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenPriority.setDescription("""\
The display priority of this local console screen (page). Usage: The display
priority of this screen (page), where '0' is unspecified (default), '1' is
lowest, and '100' is highest. When two screens (pages) have equal priority, the
first (lowest) value of 'xcmHrConsoleScreenIndex' (lexicographical order) SHALL
have the highest display priority.
""")
_XcmHrConsoleScreenTabCount_Type = Cardinal32
_XcmHrConsoleScreenTabCount_Object = MibTableColumn
xcmHrConsoleScreenTabCount = _XcmHrConsoleScreenTabCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 18, 2, 1, 6),
    _XcmHrConsoleScreenTabCount_Type()
)
xcmHrConsoleScreenTabCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenTabCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenTabCount.setDescription("""\
Number of tabs (buttons) on this local console screen (page). Usage: Conforming
management agents SHALL report values of 'xcmHrConsoleTabIndex' that are less
than or equal to the value of 'xcmHrConsoleScreenTabCount' for the SAME value
of 'xcmHrConsoleScreenIndex' (enclosing screen).
""")
_XcmHrConsoleTab_ObjectIdentity = ObjectIdentity
xcmHrConsoleTab = _XcmHrConsoleTab_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 19)
)
_XcmHrConsoleTabTable_Object = MibTable
xcmHrConsoleTabTable = _XcmHrConsoleTabTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 19, 2)
)
if mibBuilder.loadTexts:
    xcmHrConsoleTabTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTabTable.setReference("""\
See: 'prtConsoleDisplayBufferTable' and 'prtConsoleLightTable' in the Printer
MIB.
""")
if mibBuilder.loadTexts:
    xcmHrConsoleTabTable.setDescription("""\
A table containing system local console tab (button) info for an installed
local user interface console on this host system.
""")
_XcmHrConsoleTabEntry_Object = MibTableRow
xcmHrConsoleTabEntry = _XcmHrConsoleTabEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 19, 2, 1)
)
xcmHrConsoleTabEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrConsoleScreenIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrConsoleTabIndex"),
)
if mibBuilder.loadTexts:
    xcmHrConsoleTabEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTabEntry.setDescription("""\
An entry containing system local console tab (button) info for an installed
local user interface console on this host system. Usage: Conforming management
agents SHOULD report local console info via 'hrDeviceIndex' for
'hrDevicePrinter' - consistent with 'prtConsoleDisplayBufferTable' in the
Printer MIB - or 'hrDeviceIndex' for 'xcmHrDeviceHostSystem' in XCMI HRX TC.
""")
_XcmHrConsoleTabIndex_Type = Ordinal32
_XcmHrConsoleTabIndex_Object = MibTableColumn
xcmHrConsoleTabIndex = _XcmHrConsoleTabIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 19, 2, 1, 1),
    _XcmHrConsoleTabIndex_Type()
)
xcmHrConsoleTabIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrConsoleTabIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTabIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrConsoleTabTable'.
""")


class _XcmHrConsoleTabName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrConsoleTabName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrConsoleTabName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrConsoleTabName_Object = MibTableColumn
xcmHrConsoleTabName = _XcmHrConsoleTabName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 19, 2, 1, 2),
    _XcmHrConsoleTabName_Type()
)
xcmHrConsoleTabName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrConsoleTabName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTabName.setDescription("""\
Human-readable name of this local console tab (button), within the enclosing
local console screen (page), used by system administrators and end users to
identify this tab for systems management. Usage: Conforming management agents
MAY report the same value of 'xcmHrConsoleTabName' for different tabs
(buttons). Tabs (buttons) are always uniquely labelled by their indices of
'xcmHrDeviceIndex', 'xcmHrConsoleScreenIndex', and 'xcmHrConsoleTabIndex'.
""")


class _XcmHrConsoleTabDescription_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrConsoleTabDescription based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrConsoleTabDescription_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrConsoleTabDescription_Object = MibTableColumn
xcmHrConsoleTabDescription = _XcmHrConsoleTabDescription_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 19, 2, 1, 3),
    _XcmHrConsoleTabDescription_Type()
)
xcmHrConsoleTabDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrConsoleTabDescription.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTabDescription.setDescription("""\
Human-readable description of this local console tab (button), within the
enclosing local console screen (page).
""")
_XcmHrConsoleTabScreenIndex_Type = Cardinal32
_XcmHrConsoleTabScreenIndex_Object = MibTableColumn
xcmHrConsoleTabScreenIndex = _XcmHrConsoleTabScreenIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 19, 2, 1, 4),
    _XcmHrConsoleTabScreenIndex_Type()
)
xcmHrConsoleTabScreenIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrConsoleTabScreenIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTabScreenIndex.setDescription("""\
New local console screen selected by this local console tab (button). Usage:
Value of 'xcmHrConsoleScreenIndex' for the new screen.
""")


class _XcmHrConsoleTabPriority_Type(Integer32):
    """Custom type xcmHrConsoleTabPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XcmHrConsoleTabPriority_Type.__name__ = "Integer32"
_XcmHrConsoleTabPriority_Object = MibTableColumn
xcmHrConsoleTabPriority = _XcmHrConsoleTabPriority_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 19, 2, 1, 5),
    _XcmHrConsoleTabPriority_Type()
)
xcmHrConsoleTabPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmHrConsoleTabPriority.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTabPriority.setReference("""\
See: 'xcmHrDevInfoPriority' in XCMI Ext to Host Resources MIB 'xcmJobPriority'
in XCMI Job Mon MIB. 'xcmSvcMonServicePriority' in XCMI Svc Mon MIB.
""")
if mibBuilder.loadTexts:
    xcmHrConsoleTabPriority.setDescription("""\
The display priority of this local console tab (button) within the enclosing
local console screen (page). Usage: The display priority of this tab (button),
where '0' is unspecified (default), '1' is lowest, and '100' is highest. When
two tabs (buttons) have equal priority, the first (lowest) value of
'xcmHrConsoleTabIndex' (lexicographical order), for the SAME value of
'xcmHrConsoleScreenIndex' (enclosing screen), SHALL have the highest display
priority.
""")
_XcmHrSupplies_ObjectIdentity = ObjectIdentity
xcmHrSupplies = _XcmHrSupplies_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20)
)
_XcmHrSuppliesTable_Object = MibTable
xcmHrSuppliesTable = _XcmHrSuppliesTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 1)
)
if mibBuilder.loadTexts:
    xcmHrSuppliesTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesTable.setDescription("""\
A table containing information on all supplies for the managed system. Usage:
Rows of the table are created by the agent. Certain values in the rows can be
set by a management tool.
""")
_XcmHrSuppliesEntry_Object = MibTableRow
xcmHrSuppliesEntry = _XcmHrSuppliesEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 1, 1)
)
xcmHrSuppliesEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmHrSuppliesIndex"),
)
if mibBuilder.loadTexts:
    xcmHrSuppliesEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesEntry.setDescription("""\
See xcmHrSuppliesTable
""")


class _XcmHrSuppliesIndex_Type(Ordinal32):
    """Custom type xcmHrSuppliesIndex based on Ordinal32"""
    subtypeSpec = Ordinal32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_XcmHrSuppliesIndex_Type.__name__ = "Ordinal32"
_XcmHrSuppliesIndex_Object = MibTableColumn
xcmHrSuppliesIndex = _XcmHrSuppliesIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 1, 1, 1),
    _XcmHrSuppliesIndex_Type()
)
xcmHrSuppliesIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrSuppliesIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesIndex.setDescription("""\
A unique value used by the agent to identify this supply. Although these values
may change due to a major reconfiguration of the device (e.g. the addition of
new finishing module to the printer), values SHOULD remain stable across
successive printer power cycles.
""")
_XcmHrSuppliesReferenceOID_Type = ObjectIdentifier
_XcmHrSuppliesReferenceOID_Object = MibTableColumn
xcmHrSuppliesReferenceOID = _XcmHrSuppliesReferenceOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 1, 1, 2),
    _XcmHrSuppliesReferenceOID_Type()
)
xcmHrSuppliesReferenceOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSuppliesReferenceOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesReferenceOID.setDescription("""\
A system object reference (which SHALL include an object instance qualifier
suffix), used to specify an object in another table related to this supply.
Usage: If the supply also appears in the prtMarkerSuppliesTable, then this
referenceOID SHALL be the OID for the prtMarkerSuppliesDescription for this
supply. Usage: If the supply also appears in the finSupplyTable, then this
referenceOID SHALL be the OID for the finSupplyDescription for this supply.
Usage: If the supply also appears in some other table (such as a scanner
supplies table), then this referenceOID SHALL be the OID for the description
column for this supply if a description column exists. Otherwise it SHALL be
the first column of the other table as the reference OID. Usage: If the supply
does not appear in any other table, then this referenceOID SHALL be the OID for
hrDeviceDescr for the physical device requiring or using this supply. Usage: If
no physical device in the hrDeviceTable requires the supply, then the
hrDeviceTable is not complete. Note: Given the flexibility this object
provides, the information is only valuable to the Management Station if the OID
is a well-known OID. Note: This object has no default value since it must be
filled in.
""")
_XcmHrSuppliesType_Type = AutonomousType
_XcmHrSuppliesType_Object = MibTableColumn
xcmHrSuppliesType = _XcmHrSuppliesType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 1, 1, 3),
    _XcmHrSuppliesType_Type()
)
xcmHrSuppliesType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSuppliesType.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesType.setDescription("""\
An indication of the type of device. Use device type OIDs.
""")
_XcmHrSuppliesClass_Type = XcmHrSuppliesClassTC
_XcmHrSuppliesClass_Object = MibTableColumn
xcmHrSuppliesClass = _XcmHrSuppliesClass_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 1, 1, 4),
    _XcmHrSuppliesClass_Type()
)
xcmHrSuppliesClass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSuppliesClass.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesClass.setDescription("""\
This object describes how this type is replaced. Values range from 'it never
breaks' to 'untrained user'. A value of 'Unknown(2)' should never be used. Use
the least restrictive type if it is not clear. For example, if a part is
usually replaced by service, but a customer can order it and replace it on
their own, then the supply would be 'CustomerReplaceable(4)'.
""")
_XcmHrSuppliesDescr_Type = OctetString
_XcmHrSuppliesDescr_Object = MibTableColumn
xcmHrSuppliesDescr = _XcmHrSuppliesDescr_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 1, 1, 5),
    _XcmHrSuppliesDescr_Type()
)
xcmHrSuppliesDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSuppliesDescr.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesDescr.setDescription("""\
A description of this supply. This name MUST match the name of the supply as it
will be exposed on www.xerox.com, within the printer's web UI, within the
printer's local UI and within all configuration pages that can be generated by
the printer.
""")
_XcmHrSuppliesPartNumber_Type = OctetString
_XcmHrSuppliesPartNumber_Object = MibTableColumn
xcmHrSuppliesPartNumber = _XcmHrSuppliesPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 1, 1, 6),
    _XcmHrSuppliesPartNumber_Type()
)
xcmHrSuppliesPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrSuppliesPartNumber.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesPartNumber.setDescription("""\
The part number used to order this supply. This part number may depend on the
location of the machine. If no part number is associated with this supply, then
the value will be blank (null).
""")
_XcmHrDetailTable_Object = MibTable
xcmHrDetailTable = _XcmHrDetailTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2)
)
if mibBuilder.loadTexts:
    xcmHrDetailTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailTable.setDescription("""\
A 'sparse' table containing detail information for rows of other SNMP tables'
Usage: Rows of the table are created by the agent. Certain values in the rows
can be set by a management tool. Usage: OSI ASN.1 encoding rules (ISO 8825) and
IETF SNMP rules REQUIRE that when object identifiers (OIDs) are used as table
indices, the first arc (sub- identifier) of each object identifier MUST be
preceded by the count of arcs (sub- identifiers) in the object identifier (see
'Mapping of the INDEX clause' in SNMPv2-SMI, RFC 2578), unless the index is
rightmost (low-order) and specified with the IMPLIED keyword. Thus, the
xcmHrDetailTableIndex index of xcmHrDetailEntry MUST be preceded by an arcs
count in SNMP request/response PDUs. So, if we wanted the Total Black
Impressions using the third xcmHrSupplies row (lets assume that is the toner
cartridge) we would do an SNMP Get on the object
1.3.6.1.4.1.253.8.51.1.3.1.7.1.1.3.20.34 Because 1.3.6.1.4.1.253.8.51.1.3.1.7
is the OID of xcmHrDetailValueInteger. 1 is the enumeration for the
xcmHrSuppliesTable. 3 is the index into the xcmHrSupplies table for this
cartridge (and there is 1 arcs there). 20 is the detail type for lifetime
usage. And 34 is the index from table 22 of the XMIG for 'Total Black
Impressions'.
""")
_XcmHrDetailEntry_Object = MibTableRow
xcmHrDetailEntry = _XcmHrDetailEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1)
)
xcmHrDetailEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmHrDetailTableRef"),
    (0, "XEROX-COMMON-MIB", "xcmHrDetailTableIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrDetailType"),
    (0, "XEROX-COMMON-MIB", "xcmHrDetailIndex"),
)
if mibBuilder.loadTexts:
    xcmHrDetailEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailEntry.setDescription("""\
See xcmHrDetailTable
""")
_XcmHrDetailTableRef_Type = XcmHrDetailTableEnumTC
_XcmHrDetailTableRef_Object = MibTableColumn
xcmHrDetailTableRef = _XcmHrDetailTableRef_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 1),
    _XcmHrDetailTableRef_Type()
)
xcmHrDetailTableRef.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrDetailTableRef.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailTableRef.setDescription("""\
This object is used to identify the table that this detail is qualifying.
Usage: To provide additional information on supplies that are defined in the
xcmHrSuppliesTable, prtMarkerSuppliesTable or finSupplyTable.
""")
_XcmHrDetailTableIndex_Type = ObjectIdentifier
_XcmHrDetailTableIndex_Object = MibTableColumn
xcmHrDetailTableIndex = _XcmHrDetailTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 2),
    _XcmHrDetailTableIndex_Type()
)
xcmHrDetailTableIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrDetailTableIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailTableIndex.setDescription("""\
This object is used to provide the index of the specific row in the table
referenced by xcmHrDetailTableRef. Usage: To identify a supply in the
xcmHrSuppliesTable, use the single octet xcmHrSuppliesIndex. Usage: To identify
a supply in the prtMarkerSuppliesTable, use the single octet
prtMarkerSuppliesIndex. Usage: To identify a supply in the finSupplyTable, use
the single octet finSupplyIndex.
""")
_XcmHrDetailType_Type = XcmHrDevDetailType
_XcmHrDetailType_Object = MibTableColumn
xcmHrDetailType = _XcmHrDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 3),
    _XcmHrDetailType_Type()
)
xcmHrDetailType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailType.setDescription("""\
The type of the detail information specified in this row of the table.
""")
_XcmHrDetailIndex_Type = Ordinal32
_XcmHrDetailIndex_Object = MibTableColumn
xcmHrDetailIndex = _XcmHrDetailIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 4),
    _XcmHrDetailIndex_Type()
)
xcmHrDetailIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrDetailIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailIndex.setDescription("""\
This object supports details which have multiple values and can also be used to
correlate related values of different types. Usage: For distinct detail types
which are related, this index SHALL be equal for related detail values. Usage:
For detail types which are multi-valued, this index SHALL be used to enumerate
the list of details.
""")


class _XcmHrDetailUnitClass_Type(XcmHrDevDetailUnitClass):
    """Custom type xcmHrDetailUnitClass based on XcmHrDevDetailUnitClass"""


_XcmHrDetailUnitClass_Object = MibTableColumn
xcmHrDetailUnitClass = _XcmHrDetailUnitClass_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 5),
    _XcmHrDetailUnitClass_Type()
)
xcmHrDetailUnitClass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmHrDetailUnitClass.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailUnitClass.setDescription("""\
The value/unit class of the detail information specified in this row of the
table. Usage: Used to select a textual convention for specifying the value unit
of this device detail. Usage: Also used to specify which of
xcmHrDetailValue[Integer|OID|String] are used to contain the detail value.
Usage: Typically the value of xcmHrDetailUnitClass is listed explicitly in the
description of the XcmHrDevDetailType enumeration. In that case, the agent
SHALL populate this object with the listed enumeration and a management tool
does not have to check this object to determine the unit class.
""")
_XcmHrDetailUnit_Type = Cardinal32
_XcmHrDetailUnit_Object = MibTableColumn
xcmHrDetailUnit = _XcmHrDetailUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 6),
    _XcmHrDetailUnit_Type()
)
xcmHrDetailUnit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmHrDetailUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailUnit.setDescription("""\
This object makes explicit the units in which this detail value is being
specified. Usage: Used to select an enumerated choice from a textual convention
to specify the value unit of this device detail. The specific textual
convention is identified by xcmHrDetailUnitClass.
""")
_XcmHrDetailValueInteger_Type = Integer32
_XcmHrDetailValueInteger_Object = MibTableColumn
xcmHrDetailValueInteger = _XcmHrDetailValueInteger_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 7),
    _XcmHrDetailValueInteger_Type()
)
xcmHrDetailValueInteger.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmHrDetailValueInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailValueInteger.setDescription("""\
The current value for a device detail with a base value syntax 'INTEGER'.
""")
_XcmHrDetailValueOID_Type = ObjectIdentifier
_XcmHrDetailValueOID_Object = MibTableColumn
xcmHrDetailValueOID = _XcmHrDetailValueOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 8),
    _XcmHrDetailValueOID_Type()
)
xcmHrDetailValueOID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmHrDetailValueOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailValueOID.setDescription("""\
The current value for a device detail with a base value syntax 'OID'.
""")
_XcmHrDetailValueString_Type = OctetString
_XcmHrDetailValueString_Object = MibTableColumn
xcmHrDetailValueString = _XcmHrDetailValueString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 9),
    _XcmHrDetailValueString_Type()
)
xcmHrDetailValueString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmHrDetailValueString.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailValueString.setDescription("""\
The current value for a device detail with a base value syntax 'STRING'. This
object is also used to provide secondary information when the base value syntax
is 'INTEGER' or 'OID'. Typically this is a string version of the value of the
detail.
""")


class _XcmHrDetailDescription_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmHrDetailDescription based on XcmFixedLocaleDisplayString"""
    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrDetailDescription_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmHrDetailDescription_Object = MibTableColumn
xcmHrDetailDescription = _XcmHrDetailDescription_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 20, 2, 1, 10),
    _XcmHrDetailDescription_Type()
)
xcmHrDetailDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmHrDetailDescription.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailDescription.setDescription("""\
This object is used to provide a description of the detail.
""")
_XcmHrConsole_ObjectIdentity = ObjectIdentity
xcmHrConsole = _XcmHrConsole_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21)
)
_XcmHrConsoleTable_Object = MibTable
xcmHrConsoleTable = _XcmHrConsoleTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2)
)
if mibBuilder.loadTexts:
    xcmHrConsoleTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTable.setReference("""\
See: 'prtConsoleDisplayBufferTable' and 'prtConsoleLightTable' in the Printer
MIB.
""")
if mibBuilder.loadTexts:
    xcmHrConsoleTable.setDescription("""\
A table containing system local console information for an installed local user
interface console on this host system.
""")
_XcmHrConsoleEntry_Object = MibTableRow
xcmHrConsoleEntry = _XcmHrConsoleEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1)
)
xcmHrConsoleEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmHrConsoleIndex"),
)
if mibBuilder.loadTexts:
    xcmHrConsoleEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleEntry.setDescription("""\
An entry containing system local console information for an installed local
user interface console on this host system. Usage: Conforming management agents
SHOULD report local console info via 'hrDeviceIndex' for 'hrDevicePrinter' -
consistent with 'prtConsoleDisplayBufferTable' in the Printer MIB - or
'hrDeviceIndex' for 'xcmHrDeviceHostSystem' in XCMI HRX TC.
""")
_XcmHrConsoleIndex_Type = Ordinal32
_XcmHrConsoleIndex_Object = MibTableColumn
xcmHrConsoleIndex = _XcmHrConsoleIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 1),
    _XcmHrConsoleIndex_Type()
)
xcmHrConsoleIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmHrConsoleIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmHrConsoleTable'.
""")


class _XcmHrConsoleDefaultService_Type(XcmHrConsoleDefaultService):
    """Custom type xcmHrConsoleDefaultService based on XcmHrConsoleDefaultService"""


_XcmHrConsoleDefaultService_Object = MibTableColumn
xcmHrConsoleDefaultService = _XcmHrConsoleDefaultService_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 2),
    _XcmHrConsoleDefaultService_Type()
)
xcmHrConsoleDefaultService.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleDefaultService.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleDefaultService.setDescription("""\
The default service shown on the console user interface. This is used to change
the meaning of the Green Button on the front panel of many devices.
""")


class _XcmHrConsoleBrightness_Type(Integer32):
    """Custom type xcmHrConsoleBrightness based on Integer32"""
    defaultValue = 5


_XcmHrConsoleBrightness_Object = MibTableColumn
xcmHrConsoleBrightness = _XcmHrConsoleBrightness_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 3),
    _XcmHrConsoleBrightness_Type()
)
xcmHrConsoleBrightness.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleBrightness.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleBrightness.setDescription("""\
The console brightness level. Often this a number from 1 to 10 where 1 is
dimmest and 10 is brightest.
""")


class _XcmHrConsoleContrast_Type(Integer32):
    """Custom type xcmHrConsoleContrast based on Integer32"""
    defaultValue = 5


_XcmHrConsoleContrast_Object = MibTableColumn
xcmHrConsoleContrast = _XcmHrConsoleContrast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 4),
    _XcmHrConsoleContrast_Type()
)
xcmHrConsoleContrast.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleContrast.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleContrast.setDescription("""\
The console contrast level. Often this a number from 1 to 10 where 1 is least
contrast and 10 is most contrast.
""")


class _XcmHrConsoleAccessibility_Type(TruthValue):
    """Custom type xcmHrConsoleAccessibility based on TruthValue"""


_XcmHrConsoleAccessibility_Object = MibTableColumn
xcmHrConsoleAccessibility = _XcmHrConsoleAccessibility_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 5),
    _XcmHrConsoleAccessibility_Type()
)
xcmHrConsoleAccessibility.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleAccessibility.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleAccessibility.setDescription("""\
Turns On/off control panel accessibility mode. When On, value=true, the console
does not timeout and key repeating is off. When Off, value=false, the console
panel times out after specified period of no activity and key repeating is on.
""")


class _XcmHrConsoleAutoClearTime_Type(Integer32):
    """Custom type xcmHrConsoleAutoClearTime based on Integer32"""
    defaultValue = 60


_XcmHrConsoleAutoClearTime_Object = MibTableColumn
xcmHrConsoleAutoClearTime = _XcmHrConsoleAutoClearTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 6),
    _XcmHrConsoleAutoClearTime_Type()
)
xcmHrConsoleAutoClearTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleAutoClearTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleAutoClearTime.setDescription("""\
The automatic clear timeout for the console. Often this a numbe 0 to 120 where
0 is console never times out and 120 means the console times out after 120
seconds of no activity.
""")


class _XcmHrConsoleInsertTimeout_Type(Integer32):
    """Custom type xcmHrConsoleInsertTimeout based on Integer32"""
    defaultValue = 60


_XcmHrConsoleInsertTimeout_Object = MibTableColumn
xcmHrConsoleInsertTimeout = _XcmHrConsoleInsertTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 7),
    _XcmHrConsoleInsertTimeout_Type()
)
xcmHrConsoleInsertTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleInsertTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleInsertTimeout.setDescription("""\
The insertion timeout for console prompts. Often this a number 0, 60 or -1
where 0 is console never prompts, 60 means the console prompts the user for 60
seconds than stops and -1 means the console prompt is displayed for an infinite
amount of time.
""")


class _XcmHrConsoleTray1Timeout_Type(Integer32):
    """Custom type xcmHrConsoleTray1Timeout based on Integer32"""
    defaultValue = 60


_XcmHrConsoleTray1Timeout_Object = MibTableColumn
xcmHrConsoleTray1Timeout = _XcmHrConsoleTray1Timeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 8),
    _XcmHrConsoleTray1Timeout_Type()
)
xcmHrConsoleTray1Timeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleTray1Timeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTray1Timeout.setDescription("""\
The insertion timeout for console prompts for tray 1 events. Often this a
number 0, 60 or -1 where 0 is console never prompts, 60 means the console
prompts the user for 60 seconds than stops and -1 means the console prompt is
displayed for an infinite amount of time.
""")


class _XcmHrConsoleTray2nTimeout_Type(Integer32):
    """Custom type xcmHrConsoleTray2nTimeout based on Integer32"""
    defaultValue = 60


_XcmHrConsoleTray2nTimeout_Object = MibTableColumn
xcmHrConsoleTray2nTimeout = _XcmHrConsoleTray2nTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 9),
    _XcmHrConsoleTray2nTimeout_Type()
)
xcmHrConsoleTray2nTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleTray2nTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTray2nTimeout.setDescription("""\
The insertion timeout in seconds for console prompts for trays 2 through n
events. Often this a number 0, 60 or -1 where 0 is console never prompts, 60
means the console prompts the user for 1 minute than stops and -1 means the
console prompt is displayed for an infinite amount of time.
""")


class _XcmHrConsoleLoadTimeout_Type(Integer32):
    """Custom type xcmHrConsoleLoadTimeout based on Integer32"""
    defaultValue = 60


_XcmHrConsoleLoadTimeout_Object = MibTableColumn
xcmHrConsoleLoadTimeout = _XcmHrConsoleLoadTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 10),
    _XcmHrConsoleLoadTimeout_Type()
)
xcmHrConsoleLoadTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleLoadTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleLoadTimeout.setDescription("""\
The amount of time in minutes the system waits for before using the default
media source for the device.
""")


class _XcmHrConsoleSoundVolume_Type(Integer32):
    """Custom type xcmHrConsoleSoundVolume based on Integer32"""
    defaultValue = 2


_XcmHrConsoleSoundVolume_Object = MibTableColumn
xcmHrConsoleSoundVolume = _XcmHrConsoleSoundVolume_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 11),
    _XcmHrConsoleSoundVolume_Type()
)
xcmHrConsoleSoundVolume.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleSoundVolume.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleSoundVolume.setDescription("""\
The console sound volume control. This is often used to control how loud the
fax modem telephone line sound is. This is often a number 0 through 10 where 0
is console sounds are off, 1 is the lowest volume and 10 is the highest volume.
""")


class _XcmHrConsoleSoundDuration_Type(Integer32):
    """Custom type xcmHrConsoleSoundDuration based on Integer32"""
    defaultValue = 15


_XcmHrConsoleSoundDuration_Object = MibTableColumn
xcmHrConsoleSoundDuration = _XcmHrConsoleSoundDuration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 21, 2, 1, 12),
    _XcmHrConsoleSoundDuration_Type()
)
xcmHrConsoleSoundDuration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrConsoleSoundDuration.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleSoundDuration.setDescription("""\
The console sound duration. This is often used to control how long the sound
will last when the fax modem telephone line soun is on. This is often a number
1 through 255 where 1 means the console sounds are on for 1 second and 255
means the console sounds are on for 255 seconds.
""")
_XcmHrGenericParamGroup_ObjectIdentity = ObjectIdentity
xcmHrGenericParamGroup = _XcmHrGenericParamGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 22)
)


class _XcmHrGenericParamName_Type(OctetString):
    """Custom type xcmHrGenericParamName based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrGenericParamName_Type.__name__ = "OctetString"
_XcmHrGenericParamName_Object = MibScalar
xcmHrGenericParamName = _XcmHrGenericParamName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 22, 1),
    _XcmHrGenericParamName_Type()
)
xcmHrGenericParamName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrGenericParamName.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGenericParamName.setDescription("""\
 This object provides a name of a parameter that can be returned and modified
by SNMP. Usage: Conforming management agents SHALL 'reject' any SNMP Set-
request to xcmHrGenericParamName if the parameter name is invalid, with 'bad
Value' error. Usage: Conforming management stations can set
'xcmHrGenericParamName', i.e. the parameter name and 'xcmHrGenericParamValue',
i.e. the parameter value SIMULTANEOUSLY in the same SNMP Set-Request PDU using
a BULK-SET request. The order in the BULK-SET must be 'xcmHrGenericParamName',
followed by 'xcmHrGenericParamValue'
""")


class _XcmHrGenericParamValue_Type(OctetString):
    """Custom type xcmHrGenericParamValue based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmHrGenericParamValue_Type.__name__ = "OctetString"
_XcmHrGenericParamValue_Object = MibScalar
xcmHrGenericParamValue = _XcmHrGenericParamValue_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 22, 2),
    _XcmHrGenericParamValue_Type()
)
xcmHrGenericParamValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmHrGenericParamValue.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGenericParamValue.setDescription("""\
 This object provides a value for a parameter that can be returned and modified
by SNMP. To get a parameter value the manager will need to SET
'xcmHrGenericParamName' to inform the agent what parameter value is desired.
Then a GET request on this object will return the value for the parameter
requested. Usage: Conformant implementations MUST encrypt passwords, keys, and
other security information in SET requests made to this object. Usage:
Conformant implementations MUST NOT return passwords, keys, and other security
information in response to GET requests made to this object. Usage: Conforming
management stations can set 'xcmHrGenericParamValue', i.e. the parameter value
and 'xcmHrGenericParamName', i.e. the parameter name SIMULTANEOUSLY in the same
SNMP Set-Request PDU using a BULK-SET request. The order in the BULK-SET must
be 'xcmHrGenericParamName', followed by 'xcmHrGenericParamValue'
""")
_XcmPrintTC_ObjectIdentity = ObjectIdentity
xcmPrintTC = _XcmPrintTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 54)
)
if mibBuilder.loadTexts:
    xcmPrintTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrintTC.setDescription("""\
 Version: 6.004.pub XCMI Extensions to Printer MIB Textual Conventions. This
Module provides Xerox extensions of the IETF Printer MIB. Copyright (C)
1997-2013 Xerox Corporation. All Rights Reserved.
""")
_XCmPrintTCDummy_ObjectIdentity = ObjectIdentity
xCmPrintTCDummy = _XCmPrintTCDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999)
)
_XCmPrtTCAuxSheetContent_Type = XcmPrtAuxSheetContent
_XCmPrtTCAuxSheetContent_Object = MibScalar
xCmPrtTCAuxSheetContent = _XCmPrtTCAuxSheetContent_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 1),
    _XCmPrtTCAuxSheetContent_Type()
)
xCmPrtTCAuxSheetContent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCAuxSheetContent.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCAuxSheetContent.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCXcmPrtAuxSheetType_Type = XcmPrtAuxSheetType
_XCmPrtTCXcmPrtAuxSheetType_Object = MibScalar
xCmPrtTCXcmPrtAuxSheetType = _XCmPrtTCXcmPrtAuxSheetType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 2),
    _XCmPrtTCXcmPrtAuxSheetType_Type()
)
xCmPrtTCXcmPrtAuxSheetType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCXcmPrtAuxSheetType.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCXcmPrtAuxSheetType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCTCChannelType_Type = XcmPrtChannelType
_XCmPrtTCTCChannelType_Object = MibScalar
xCmPrtTCTCChannelType = _XCmPrtTCTCChannelType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 3),
    _XCmPrtTCTCChannelType_Type()
)
xCmPrtTCTCChannelType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCTCChannelType.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCTCChannelType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCGroupSupport_Type = XcmPrtGroupSupport
_XCmPrtTCGroupSupport_Object = MibScalar
xCmPrtTCGroupSupport = _XCmPrtTCGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 4),
    _XCmPrtTCGroupSupport_Type()
)
xCmPrtTCGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCIETFPrintMIBGroupSupport_Type = XcmPrtIETFPrintMIBGroupSupport
_XCmPrtTCIETFPrintMIBGroupSupport_Object = MibScalar
xCmPrtTCIETFPrintMIBGroupSupport = _XCmPrtTCIETFPrintMIBGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 5),
    _XCmPrtTCIETFPrintMIBGroupSupport_Type()
)
xCmPrtTCIETFPrintMIBGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCIETFPrintMIBGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCIETFPrintMIBGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCInterpreterLangFamily_Type = XcmPrtInterpreterLangFamily
_XCmPrtTCInterpreterLangFamily_Object = MibScalar
xCmPrtTCInterpreterLangFamily = _XCmPrtTCInterpreterLangFamily_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 6),
    _XCmPrtTCInterpreterLangFamily_Type()
)
xCmPrtTCInterpreterLangFamily.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCInterpreterLangFamily.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCInterpreterLangFamily.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCMediaTypeErrorPolicy_Type = XcmPrtMediaTypeErrorPolicy
_XCmPrtTCMediaTypeErrorPolicy_Object = MibScalar
xCmPrtTCMediaTypeErrorPolicy = _XCmPrtTCMediaTypeErrorPolicy_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 7),
    _XCmPrtTCMediaTypeErrorPolicy_Type()
)
xCmPrtTCMediaTypeErrorPolicy.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCMediaTypeErrorPolicy.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCMediaTypeErrorPolicy.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCMediumClassType_Type = XcmPrtMediumClassType
_XCmPrtTCMediumClassType_Object = MibScalar
xCmPrtTCMediumClassType = _XCmPrtTCMediumClassType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 8),
    _XCmPrtTCMediumClassType_Type()
)
xCmPrtTCMediumClassType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCMediumClassType.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCMediumClassType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCMediumSize_Type = XcmPrtMediumSize
_XCmPrtTCMediumSize_Object = MibScalar
xCmPrtTCMediumSize = _XCmPrtTCMediumSize_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 9),
    _XCmPrtTCMediumSize_Type()
)
xCmPrtTCMediumSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCMediumSize.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCMediumSize.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCOutputOffsetStackingType_Type = XcmPrtOutputOffsetStackingType
_XCmPrtTCOutputOffsetStackingType_Object = MibScalar
xCmPrtTCOutputOffsetStackingType = _XCmPrtTCOutputOffsetStackingType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 10),
    _XCmPrtTCOutputOffsetStackingType_Type()
)
xCmPrtTCOutputOffsetStackingType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCOutputOffsetStackingType.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCOutputOffsetStackingType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtOutputStaplePosition_Type = XcmPrtOutputStaplePosition
_XCmPrtOutputStaplePosition_Object = MibScalar
xCmPrtOutputStaplePosition = _XCmPrtOutputStaplePosition_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 11),
    _XCmPrtOutputStaplePosition_Type()
)
xCmPrtOutputStaplePosition.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtOutputStaplePosition.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtOutputStaplePosition.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCPageSizeErrorPolicy_Type = XcmPrtPageSizeErrorPolicy
_XCmPrtTCPageSizeErrorPolicy_Object = MibScalar
xCmPrtTCPageSizeErrorPolicy = _XCmPrtTCPageSizeErrorPolicy_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 12),
    _XCmPrtTCPageSizeErrorPolicy_Type()
)
xCmPrtTCPageSizeErrorPolicy.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCPageSizeErrorPolicy.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCPageSizeErrorPolicy.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCPCLFontSource_Type = XcmPrtPCLFontSource
_XCmPrtTCPCLFontSource_Object = MibScalar
xCmPrtTCPCLFontSource = _XCmPrtTCPCLFontSource_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 13),
    _XCmPrtTCPCLFontSource_Type()
)
xCmPrtTCPCLFontSource.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCPCLFontSource.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCPCLFontSource.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCPlex_Type = XcmPrtPlex
_XCmPrtTCPlex_Object = MibScalar
xCmPrtTCPlex = _XCmPrtTCPlex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 14),
    _XCmPrtTCPlex_Type()
)
xCmPrtTCPlex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCPlex.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCPlex.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCPrintQuality_Type = XcmPrtPrintQuality
_XCmPrtTCPrintQuality_Object = MibScalar
xCmPrtTCPrintQuality = _XCmPrtTCPrintQuality_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 15),
    _XCmPrtTCPrintQuality_Type()
)
xCmPrtTCPrintQuality.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCPrintQuality.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCPrintQuality.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCPrintScreen_Type = XcmPrtPrintScreen
_XCmPrtTCPrintScreen_Object = MibScalar
xCmPrtTCPrintScreen = _XCmPrtTCPrintScreen_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 16),
    _XCmPrtTCPrintScreen_Type()
)
xCmPrtTCPrintScreen.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCPrintScreen.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCPrintScreen.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCTraySwitch_Type = XcmPrtTraySwitch
_XCmPrtTCTraySwitch_Object = MibScalar
xCmPrtTCTraySwitch = _XCmPrtTCTraySwitch_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 17),
    _XCmPrtTCTraySwitch_Type()
)
xCmPrtTCTraySwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCTraySwitch.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCTraySwitch.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtTCGeneralMonoPrintOpt_Type = XcmPrtGeneralMonoPrintOpt
_XCmPrtTCGeneralMonoPrintOpt_Object = MibScalar
xCmPrtTCGeneralMonoPrintOpt = _XCmPrtTCGeneralMonoPrintOpt_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 18),
    _XCmPrtTCGeneralMonoPrintOpt_Type()
)
xCmPrtTCGeneralMonoPrintOpt.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtTCGeneralMonoPrintOpt.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtTCGeneralMonoPrintOpt.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtOutputPunchPosition_Type = XcmPrtOutputPunchPosition
_XCmPrtOutputPunchPosition_Object = MibScalar
xCmPrtOutputPunchPosition = _XCmPrtOutputPunchPosition_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 19),
    _XCmPrtOutputPunchPosition_Type()
)
xCmPrtOutputPunchPosition.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtOutputPunchPosition.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtOutputPunchPosition.setDescription("""\
Dummy - DO NOT USE
""")
_XCmPrtInputTraysConfiguration_Type = XcmPrtInputTraysConfiguration
_XCmPrtInputTraysConfiguration_Object = MibScalar
xCmPrtInputTraysConfiguration = _XCmPrtInputTraysConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 54, 999, 20),
    _XCmPrtInputTraysConfiguration_Type()
)
xCmPrtInputTraysConfiguration.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmPrtInputTraysConfiguration.setStatus("current")
if mibBuilder.loadTexts:
    xCmPrtInputTraysConfiguration.setDescription("""\
Dummy - DO NOT USE
""")
_XcmPrintMIB_ObjectIdentity = ObjectIdentity
xcmPrintMIB = _XcmPrintMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55)
)
if mibBuilder.loadTexts:
    xcmPrintMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrintMIB.setDescription("""\
 Version: 6.006.pub Xerox XCMI Extension to IETF Printer MIB Module. This
Module provides extension to the IETF Printer MIB. Copyright (C) 1997-2013
Xerox Corporation. All Rights Reserved.
""")
_XcmPrtBase_ObjectIdentity = ObjectIdentity
xcmPrtBase = _XcmPrtBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1)
)
_XcmPrtBaseTable_Object = MibTable
xcmPrtBaseTable = _XcmPrtBaseTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPrtBaseTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseTable.setDescription("""\
A table of general counters and information for ease of use of the XCMI
Extension to IETF Printer MIB Module and the IETF Printer MIB on this host
system. Usage: The ONLY valid row in the 'xcmPrtBaseTable' shall ALWAYS have an
'xcmPrtBaseIndex' of one ('1').
""")
_XcmPrtBaseEntry_Object = MibTableRow
xcmPrtBaseEntry = _XcmPrtBaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1)
)
xcmPrtBaseEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmPrtBaseIndex"),
)
if mibBuilder.loadTexts:
    xcmPrtBaseEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseEntry.setDescription("""\
An entry of general counters and information for ease of use of the XCMI
Extension to IETF Printer MIB Module and the IETF Printer MIB on this host
system. Usage: The ONLY valid row in the 'xcmPrtBaseTable' shall ALWAYS have an
'xcmPrtBaseIndex' of one ('1').
""")
_XcmPrtBaseIndex_Type = Ordinal32
_XcmPrtBaseIndex_Object = MibTableColumn
xcmPrtBaseIndex = _XcmPrtBaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1, 1),
    _XcmPrtBaseIndex_Type()
)
xcmPrtBaseIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmPrtBaseIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmPrtBaseTable'. Usage: The ONLY valid row in the 'xcmPrtBaseTable' shall
ALWAYS have an 'xcmPrtBaseIndex' of one ('1').
""")
_XcmPrtBaseRowStatus_Type = RowStatus
_XcmPrtBaseRowStatus_Object = MibTableColumn
xcmPrtBaseRowStatus = _XcmPrtBaseRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1, 2),
    _XcmPrtBaseRowStatus_Type()
)
xcmPrtBaseRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtBaseRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseRowStatus.setDescription("""\
This object is used to display status of the ONLY valid conceptual row in the
'xcmPrtBaseTable'. Usage: 'xcmPrtBaseRowStatus' is 'read-only' because the ONLY
valid conceptual row shall NOT be deleted.
""")
_XcmPrtBaseGroupSupport_Type = XcmPrtGroupSupport
_XcmPrtBaseGroupSupport_Object = MibTableColumn
xcmPrtBaseGroupSupport = _XcmPrtBaseGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1, 3),
    _XcmPrtBaseGroupSupport_Type()
)
xcmPrtBaseGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtBaseGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseGroupSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional module objects which are supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask.
""")
_XcmPrtBaseUpdateSupport_Type = XcmPrtGroupSupport
_XcmPrtBaseUpdateSupport_Object = MibTableColumn
xcmPrtBaseUpdateSupport = _XcmPrtBaseUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1, 4),
    _XcmPrtBaseUpdateSupport_Type()
)
xcmPrtBaseUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtBaseUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseUpdateSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional module objects which are supported for existing row update (via SNMP
Set-Request PDUs) by this management agent implementation (ie, version) on this
host system, specified in a bit-mask.
""")
_XcmPrtBaseCreateSupport_Type = XcmPrtGroupSupport
_XcmPrtBaseCreateSupport_Object = MibTableColumn
xcmPrtBaseCreateSupport = _XcmPrtBaseCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1, 5),
    _XcmPrtBaseCreateSupport_Type()
)
xcmPrtBaseCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtBaseCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseCreateSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional module objects which are supported for dynamic row creation (via
'...RowStatus') by this management agent implementation (ie, version) on this
host system, specified in a bit-mask.
""")


class _XcmPrtBaseIETFMIBGroupSupport_Type(XcmPrtIETFPrintMIBGroupSupport):
    """Custom type xcmPrtBaseIETFMIBGroupSupport based on XcmPrtIETFPrintMIBGroupSupport"""
    defaultValue = 127525


_XcmPrtBaseIETFMIBGroupSupport_Object = MibTableColumn
xcmPrtBaseIETFMIBGroupSupport = _XcmPrtBaseIETFMIBGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1, 6),
    _XcmPrtBaseIETFMIBGroupSupport_Type()
)
xcmPrtBaseIETFMIBGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBGroupSupport.setReference("""\
See: IETF Printer MIB
""")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBGroupSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional module objects in the IETF Printer MIB which are supported by this
management agent implementation (ie, version) on this host system, specified in
a bit-mask.
""")
_XcmPrtBaseIETFMIBUpdateSupport_Type = XcmPrtIETFPrintMIBGroupSupport
_XcmPrtBaseIETFMIBUpdateSupport_Object = MibTableColumn
xcmPrtBaseIETFMIBUpdateSupport = _XcmPrtBaseIETFMIBUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1, 7),
    _XcmPrtBaseIETFMIBUpdateSupport_Type()
)
xcmPrtBaseIETFMIBUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBUpdateSupport.setReference("""\
See: IETF Printer MIB
""")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBUpdateSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional module objects in the IETF Printer MIB supported for existing row
update (via SNMP Set-Request PDUs) by this management agent implementation (ie,
version) on this host system, specified in a bit-mask.
""")
_XcmPrtBaseIETFMIBCreateSupport_Type = XcmPrtIETFPrintMIBGroupSupport
_XcmPrtBaseIETFMIBCreateSupport_Object = MibTableColumn
xcmPrtBaseIETFMIBCreateSupport = _XcmPrtBaseIETFMIBCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 1, 2, 1, 8),
    _XcmPrtBaseIETFMIBCreateSupport_Type()
)
xcmPrtBaseIETFMIBCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBCreateSupport.setReference("""\
See: IETF Printer MIB
""")
if mibBuilder.loadTexts:
    xcmPrtBaseIETFMIBCreateSupport.setDescription("""\
 The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional module objects in the IETF Printer MIB supported for dynamic row
creation (via '...RowStatus') by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. Currently there are no
groups within the IETF Printer MIB which provide for dynamic row creation, and
this object shall always return '0'. Dynamic row creation is provided to these
groups through the XCMI Extension to IETF Printer MIB Module, but CreateSupport
should be reflected in xcmPrtBaseCreateSupport. This object is included for
completeness.
""")
_XcmPrtMIBConformance_ObjectIdentity = ObjectIdentity
xcmPrtMIBConformance = _XcmPrtMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2)
)
_XcmPrtMIBGroups_ObjectIdentity = ObjectIdentity
xcmPrtMIBGroups = _XcmPrtMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2)
)
_XcmPrtGeneral_ObjectIdentity = ObjectIdentity
xcmPrtGeneral = _XcmPrtGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5)
)
_XcmPrtGeneralTable_Object = MibTable
xcmPrtGeneralTable = _XcmPrtGeneralTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPrtGeneralTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralTable.setDescription("""\
 A table of general information per printer. This table augments the
prtGeneralTable.
""")
_XcmPrtGeneralEntry_Object = MibTableRow
xcmPrtGeneralEntry = _XcmPrtGeneralEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1)
)
prtGeneralEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmPrtGeneralEntry")
)
xcmPrtGeneralEntry.setIndexNames(*prtGeneralEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmPrtGeneralEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralEntry.setDescription("""\
 An entry exists in this table for each device entry in the hostmib device
table whose type is printer.
""")
_XcmPrtGeneralRowStatus_Type = RowStatus
_XcmPrtGeneralRowStatus_Object = MibTableColumn
xcmPrtGeneralRowStatus = _XcmPrtGeneralRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 1),
    _XcmPrtGeneralRowStatus_Type()
)
xcmPrtGeneralRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtGeneralTable.
""")
_XcmPrtGeneralAuxSheetPackage_Type = Cardinal32
_XcmPrtGeneralAuxSheetPackage_Object = MibTableColumn
xcmPrtGeneralAuxSheetPackage = _XcmPrtGeneralAuxSheetPackage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 2),
    _XcmPrtGeneralAuxSheetPackage_Type()
)
xcmPrtGeneralAuxSheetPackage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralAuxSheetPackage.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralAuxSheetPackage.setReference("""\
 See: xcmPrtInterpAuxSheetPackage See: xcmPrtChannelAuxSheetPackage See:
xcmPrtGeneralAuxSheetGroup - xcmPrtGeneralStartupPage See:
xcmPrtGeneralAuxSheetGroup - xcmPrtGeneralBannerPage See:
xcmPrtGeneralAuxSheetGroup - xcmPrtGeneralEndBannerPage
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralAuxSheetPackage.setDescription("""\
 This object is an index into the xcmPrtAuxPackageTable. This table is used to
enable or disable printing of auxiliary sheets at the printer box level. The
value zero shall mean not specified.
""")


class _XcmPrtGeneralManualFeedTimeout_Type(Integer32):
    """Custom type xcmPrtGeneralManualFeedTimeout based on Integer32"""
    defaultValue = -1


_XcmPrtGeneralManualFeedTimeout_Object = MibTableColumn
xcmPrtGeneralManualFeedTimeout = _XcmPrtGeneralManualFeedTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 3),
    _XcmPrtGeneralManualFeedTimeout_Type()
)
xcmPrtGeneralManualFeedTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralManualFeedTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralManualFeedTimeout.setUnits("Seconds")
if mibBuilder.loadTexts:
    xcmPrtGeneralManualFeedTimeout.setReference("""\
 This object copied from the April 1996 Printer MIB prtInputManualFeedTimeout
object. This object is currently in the prtInputTable. The XCMI WG will push in
June 1996 to move this object the prtGeneralTable as done here.
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralManualFeedTimeout.setDescription("""\
 The duration in seconds after which the printer shall either: (a) switch to
another input subunit, if the value of prtInputNextIndex is non-zero and
prtGeneralAutoSwitch is on or (b) abort any job waiting for manually fed input,
if the value value of prtInputNextIndex is zero or prtGeneralAutoSwitch is off
or notPresent. The event which causes the printer to enter the waiting state is
product specific. A value of (-1) implies 'other' or 'infinite' which
translates to 'this input subunit doesn't support manual feed'. A value of (-2)
implies 'unknown'.
""")


class _XcmPrtGeneralInputAutoSwitch_Type(PresentOnOff):
    """Custom type xcmPrtGeneralInputAutoSwitch based on PresentOnOff"""


_XcmPrtGeneralInputAutoSwitch_Object = MibTableColumn
xcmPrtGeneralInputAutoSwitch = _XcmPrtGeneralInputAutoSwitch_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 4),
    _XcmPrtGeneralInputAutoSwitch_Type()
)
xcmPrtGeneralInputAutoSwitch.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralInputAutoSwitch.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralInputAutoSwitch.setReference("""\
 This object copied from the April 1996 Printer MIB prtInputAutoSwitch object.
This object is currently in the prtInputTable. The XCMI WG will push in June
1996, to move this object the prtGeneralTable as done here.
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralInputAutoSwitch.setDescription("""\
 Indicates the state of the auto input switching feature. The value notPresent
indicates the feature is not currently supported. Exact behavior of this
feature is product specific.
""")


class _XcmPrtGeneralOutputAutoSwitch_Type(PresentOnOff):
    """Custom type xcmPrtGeneralOutputAutoSwitch based on PresentOnOff"""


_XcmPrtGeneralOutputAutoSwitch_Object = MibTableColumn
xcmPrtGeneralOutputAutoSwitch = _XcmPrtGeneralOutputAutoSwitch_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 5),
    _XcmPrtGeneralOutputAutoSwitch_Type()
)
xcmPrtGeneralOutputAutoSwitch.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralOutputAutoSwitch.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralOutputAutoSwitch.setDescription("""\
 Indicates the state of the auto output tray switching feature. The value
notPresent indicates the feature is not currently supported. Exact behavior of
this feature is product specific.
""")


class _XcmPrtGeneralMediumClassDefault_Type(XcmPrtMediumClassType):
    """Custom type xcmPrtGeneralMediumClassDefault based on XcmPrtMediumClassType"""


_XcmPrtGeneralMediumClassDefault_Object = MibTableColumn
xcmPrtGeneralMediumClassDefault = _XcmPrtGeneralMediumClassDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 6),
    _XcmPrtGeneralMediumClassDefault_Type()
)
xcmPrtGeneralMediumClassDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralMediumClassDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralMediumClassDefault.setDescription("""\
 This object sets the default medium size class for the printer. This object
sets the medium size for printer management functions such as printing the
configuration sheet. It may affect any media related object, such as form
length.
""")
_XcmPrtGeneralDarknessLevels_Type = Cardinal32
_XcmPrtGeneralDarknessLevels_Object = MibTableColumn
xcmPrtGeneralDarknessLevels = _XcmPrtGeneralDarknessLevels_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 7),
    _XcmPrtGeneralDarknessLevels_Type()
)
xcmPrtGeneralDarknessLevels.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralDarknessLevels.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralDarknessLevels.setDescription("""\
 This value indicates the maximum number of darkness levels supported by this
printer. The level settings range from 1 to xcmPrtGeneralDarknessLevels where 1
represents the lightest level and xcmPrtGeneralDarknessLevels represents the
darkest level. The value 1 implies no user settables. The value 0 means
unspecified. The selection of a darkness levels specifies that the printer
shall process the page images so that they appear either 'lighter' or 'darker'.
""")
_XcmPrtGeneralDarknessLevelNorm_Type = Cardinal32
_XcmPrtGeneralDarknessLevelNorm_Object = MibTableColumn
xcmPrtGeneralDarknessLevelNorm = _XcmPrtGeneralDarknessLevelNorm_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 8),
    _XcmPrtGeneralDarknessLevelNorm_Type()
)
xcmPrtGeneralDarknessLevelNorm.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralDarknessLevelNorm.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralDarknessLevelNorm.setDescription("""\
 The normal setting for the darkness printing object. The value 0 means
unspecified.
""")


class _XcmPrtGeneralDarknessLevelDflt_Type(Integer32):
    """Custom type xcmPrtGeneralDarknessLevelDflt based on Integer32"""
    defaultValue = -2


_XcmPrtGeneralDarknessLevelDflt_Object = MibTableColumn
xcmPrtGeneralDarknessLevelDflt = _XcmPrtGeneralDarknessLevelDflt_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 9),
    _XcmPrtGeneralDarknessLevelDflt_Type()
)
xcmPrtGeneralDarknessLevelDflt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralDarknessLevelDflt.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralDarknessLevelDflt.setReference("""\
 See: PJL Technical Reference Manual - DENSITY
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralDarknessLevelDflt.setDescription("""\
 The default setting for the density printing option. The value (-2) indicates
unknown. The value (-4) indicates the auto setting.
""")


class _XcmPrtGeneralHexDumpEnable_Type(PresentOnOff):
    """Custom type xcmPrtGeneralHexDumpEnable based on PresentOnOff"""


_XcmPrtGeneralHexDumpEnable_Object = MibTableColumn
xcmPrtGeneralHexDumpEnable = _XcmPrtGeneralHexDumpEnable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 10),
    _XcmPrtGeneralHexDumpEnable_Type()
)
xcmPrtGeneralHexDumpEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralHexDumpEnable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralHexDumpEnable.setReference("""\
 See: Printer MIB prtInterpreterLangFamily - langDiagnostic(41)
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralHexDumpEnable.setDescription("""\
 This object controls whether the printer is in a special diagnostic mode
wherein all received print data is printed in hexadecimal format. Whether a
reset or power-cycles turns xcmPrtGeneralHexDumpEnable to Off is product
dependent.
""")


class _XcmPrtGeneralStartupPage_Type(PresentOnOff):
    """Custom type xcmPrtGeneralStartupPage based on PresentOnOff"""


_XcmPrtGeneralStartupPage_Object = MibTableColumn
xcmPrtGeneralStartupPage = _XcmPrtGeneralStartupPage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 11),
    _XcmPrtGeneralStartupPage_Type()
)
xcmPrtGeneralStartupPage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralStartupPage.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralStartupPage.setReference("""\
 This object copied directly from the April 1996 version of the Printer MIB's
prtGeneralStartupPage object.
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralStartupPage.setDescription("""\
 Used to enable or disable printing a startup page. If enabled, a startup page
will be printed shortly after power-up, when the device is ready. Typical
startup pages include test patterns and/or printer configuration information.
Usage: Conforming management agents, which ALSO implement the the Printer MIB
v2, SHALL set 'xcmPrtGeneralStartupPage' to the SAME value as
'prtAuxiliarySheetStartupPage' (i.e., the values of these two objects SHALL be
interlocked).
""")


class _XcmPrtGeneralBannerPage_Type(PresentOnOff):
    """Custom type xcmPrtGeneralBannerPage based on PresentOnOff"""


_XcmPrtGeneralBannerPage_Object = MibTableColumn
xcmPrtGeneralBannerPage = _XcmPrtGeneralBannerPage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 12),
    _XcmPrtGeneralBannerPage_Type()
)
xcmPrtGeneralBannerPage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralBannerPage.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralBannerPage.setReference("""\
 This object copied directly from the April 1996 version of the Printer MIB's
prtGeneralBannerPage object.
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralBannerPage.setDescription("""\
 Used to enable or disable printing banner pages at the beginning of jobs. This
is a master switch which applies to all jobs, regardless of interpreter. Usage:
Conforming management agents, which ALSO implement the the Printer MIB v2,
SHALL set 'xcmPrtGeneralBannerPage' to the SAME value as
'prtAuxiliarySheetBannerPage' (i.e., the values of these two objects SHALL be
interlocked).
""")


class _XcmPrtGeneralTonerLowStop_Type(PresentOnOff):
    """Custom type xcmPrtGeneralTonerLowStop based on PresentOnOff"""


_XcmPrtGeneralTonerLowStop_Object = MibTableColumn
xcmPrtGeneralTonerLowStop = _XcmPrtGeneralTonerLowStop_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 13),
    _XcmPrtGeneralTonerLowStop_Type()
)
xcmPrtGeneralTonerLowStop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralTonerLowStop.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralTonerLowStop.setDescription("""\
 Indicates the action taken when a low toner condition exists. 'on' indicates
that the printer will stop printing when then toner is low 'off' indicates that
printing will continue when the toner is low 'notPresent' indicates that the
printer has no selectable option for action under a low toner condition.
""")


class _XcmPrtGeneralEndBannerPage_Type(PresentOnOff):
    """Custom type xcmPrtGeneralEndBannerPage based on PresentOnOff"""


_XcmPrtGeneralEndBannerPage_Object = MibTableColumn
xcmPrtGeneralEndBannerPage = _XcmPrtGeneralEndBannerPage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 14),
    _XcmPrtGeneralEndBannerPage_Type()
)
xcmPrtGeneralEndBannerPage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralEndBannerPage.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralEndBannerPage.setDescription("""\
 Used to enable or disable printing banner pages at the end of jobs. This is a
master switch which applies to all jobs, regardless of interpreter.
""")


class _XcmPrtGeneralTrayLowWarning_Type(PresentOnOff):
    """Custom type xcmPrtGeneralTrayLowWarning based on PresentOnOff"""


_XcmPrtGeneralTrayLowWarning_Object = MibTableColumn
xcmPrtGeneralTrayLowWarning = _XcmPrtGeneralTrayLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 15),
    _XcmPrtGeneralTrayLowWarning_Type()
)
xcmPrtGeneralTrayLowWarning.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralTrayLowWarning.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralTrayLowWarning.setDescription("""\
 Indicates the action taken when a input tray paper condition 'on' indicates
that the printer will report the warning over the user interfaces: Control
Panel, CWIS, SNMP, etc. 'off' indicates that printing will not report the
warning 'notPresent' indicates that the printer has no selectable option for a
low paper condition.
""")


class _XcmPrtGeneralScanlineCompaction_Type(PresentOnOff):
    """Custom type xcmPrtGeneralScanlineCompaction based on PresentOnOff"""


_XcmPrtGeneralScanlineCompaction_Object = MibTableColumn
xcmPrtGeneralScanlineCompaction = _XcmPrtGeneralScanlineCompaction_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 50),
    _XcmPrtGeneralScanlineCompaction_Type()
)
xcmPrtGeneralScanlineCompaction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralScanlineCompaction.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralScanlineCompaction.setReference("""\
 See: xcmPrtInterpPageProtect See: DocuPrint 4517 Network Laser Printers User
Guide, Pg. D-12
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralScanlineCompaction.setDescription("""\
 This object enables a printing mode wherein the printer compresses selected
scanlines of raster image data as they are received and holds them in
compressed form until they are to be printed. This allows particular jobs to be
processed with less memory, but often reduced performance as well. On some
Printers, turning this feature Off is referred to as 'PerformanceEnhancement'.
When xcmInterpPageProtect is set to Off, some complex jobs may not print
successfully with minimum memory. The ScanlineCompaction feature enables
printing some complex jobs without resorting to reserving additional memory by
turning on the PageProtect option or installing additional memory.
""")


class _XcmPrtGeneralMonoPrintOptimization_Type(XcmPrtGeneralMonoPrintOpt):
    """Custom type xcmPrtGeneralMonoPrintOptimization based on XcmPrtGeneralMonoPrintOpt"""


_XcmPrtGeneralMonoPrintOptimization_Object = MibTableColumn
xcmPrtGeneralMonoPrintOptimization = _XcmPrtGeneralMonoPrintOptimization_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 51),
    _XcmPrtGeneralMonoPrintOptimization_Type()
)
xcmPrtGeneralMonoPrintOptimization.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtGeneralMonoPrintOptimization.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralMonoPrintOptimization.setReference("""\
 See: Phaser 7750 User Guide... for more information
""")
if mibBuilder.loadTexts:
    xcmPrtGeneralMonoPrintOptimization.setDescription("""\
 This object enables a printing mode wherein the printer can be set to either
one of two modes overall. Mode 1 is Optimized for Speed, Mode 2 is Optimized
for Economy. This setting affects the overall performance of the printer and
thus affects all print quality modes.
""")


class _XcmPrtGeneralInstalledFeeder_Type(OctetString):
    """Custom type xcmPrtGeneralInstalledFeeder based on OctetString"""
    defaultValue = OctetString("none")

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtGeneralInstalledFeeder_Type.__name__ = "OctetString"
_XcmPrtGeneralInstalledFeeder_Object = MibTableColumn
xcmPrtGeneralInstalledFeeder = _XcmPrtGeneralInstalledFeeder_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 70),
    _XcmPrtGeneralInstalledFeeder_Type()
)
xcmPrtGeneralInstalledFeeder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtGeneralInstalledFeeder.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralInstalledFeeder.setDescription("""\
 This object uniquely specifies the currently installed Feeder hardware. Its
purpose is to allow clients to determine via a single MIB object the number and
type of input trays and feeding options available, based exclusively on the
feeder that is installed.
""")


class _XcmPrtGeneralInstalledFinisher_Type(OctetString):
    """Custom type xcmPrtGeneralInstalledFinisher based on OctetString"""
    defaultValue = OctetString("none")

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtGeneralInstalledFinisher_Type.__name__ = "OctetString"
_XcmPrtGeneralInstalledFinisher_Object = MibTableColumn
xcmPrtGeneralInstalledFinisher = _XcmPrtGeneralInstalledFinisher_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 71),
    _XcmPrtGeneralInstalledFinisher_Type()
)
xcmPrtGeneralInstalledFinisher.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtGeneralInstalledFinisher.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralInstalledFinisher.setDescription("""\
 This object uniquely specifies the currently installed Finisher hardware. Its
purpose is to allow clients to determine via a single MIB object the number and
type of output trays and finishing options available, based exclusively on the
finisher that is installed.
""")


class _XcmPrtGeneralInstalledAnalogFax_Type(OctetString):
    """Custom type xcmPrtGeneralInstalledAnalogFax based on OctetString"""
    defaultValue = OctetString("none")

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtGeneralInstalledAnalogFax_Type.__name__ = "OctetString"
_XcmPrtGeneralInstalledAnalogFax_Object = MibTableColumn
xcmPrtGeneralInstalledAnalogFax = _XcmPrtGeneralInstalledAnalogFax_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 1, 1, 72),
    _XcmPrtGeneralInstalledAnalogFax_Type()
)
xcmPrtGeneralInstalledAnalogFax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtGeneralInstalledAnalogFax.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralInstalledAnalogFax.setDescription("""\
 This object uniquely specifies the currently installed analog fax card. Its
purpose is to allow clients to determine via a single MIB object whether an
analog fax card is installed, and the options that are available based on the
fax card that is installed.
""")
_XcmPrtGeneralConsoleLocalizationV1EventOID_ObjectIdentity = ObjectIdentity
xcmPrtGeneralConsoleLocalizationV1EventOID = _XcmPrtGeneralConsoleLocalizationV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 2)
)
if mibBuilder.loadTexts:
    xcmPrtGeneralConsoleLocalizationV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralConsoleLocalizationV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever
'prtConsoleLocalization' in the industry standard printer mib is updated. See
SNMPv2 trap definition 'xcmPrtGeneralConsoleLocalizationV2Event' below.
""")
_XcmPrtGeneralConsoleLocalizationV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmPrtGeneralConsoleLocalizationV2EventPrefix = _XcmPrtGeneralConsoleLocalizationV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 2, 0)
)
_XcmPrtDriverOptions_ObjectIdentity = ObjectIdentity
xcmPrtDriverOptions = _XcmPrtDriverOptions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6)
)
_XcmPrtDrvrHwdOptStapler_Type = PresentOnOff
_XcmPrtDrvrHwdOptStapler_Object = MibScalar
xcmPrtDrvrHwdOptStapler = _XcmPrtDrvrHwdOptStapler_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 1),
    _XcmPrtDrvrHwdOptStapler_Type()
)
xcmPrtDrvrHwdOptStapler.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptStapler.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptStapler.setDescription("""\
Object that indicates if a Stapler Unit is installed within the print device.
""")
_XcmPrtDrvrHwdOptDuplexUnit_Type = PresentOnOff
_XcmPrtDrvrHwdOptDuplexUnit_Object = MibScalar
xcmPrtDrvrHwdOptDuplexUnit = _XcmPrtDrvrHwdOptDuplexUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 2),
    _XcmPrtDrvrHwdOptDuplexUnit_Type()
)
xcmPrtDrvrHwdOptDuplexUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptDuplexUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptDuplexUnit.setDescription("""\
Object that indicates if a Duplex Unit is installed within the print device.
""")
_XcmPrtDrvrHwdOptPhaserBookletMaker_Type = PresentOnOff
_XcmPrtDrvrHwdOptPhaserBookletMaker_Object = MibScalar
xcmPrtDrvrHwdOptPhaserBookletMaker = _XcmPrtDrvrHwdOptPhaserBookletMaker_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 3),
    _XcmPrtDrvrHwdOptPhaserBookletMaker_Type()
)
xcmPrtDrvrHwdOptPhaserBookletMaker.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptPhaserBookletMaker.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptPhaserBookletMaker.setDescription("""\
Object that indicates if a Booklet Maker Module is installed within the Phaser
print device.
""")
_XcmPrtDrvrHwdOptEnvelopeTray_Type = PresentOnOff
_XcmPrtDrvrHwdOptEnvelopeTray_Object = MibScalar
xcmPrtDrvrHwdOptEnvelopeTray = _XcmPrtDrvrHwdOptEnvelopeTray_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 4),
    _XcmPrtDrvrHwdOptEnvelopeTray_Type()
)
xcmPrtDrvrHwdOptEnvelopeTray.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptEnvelopeTray.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptEnvelopeTray.setDescription("""\
Object that indicates if an Envelope Tray is installed within the print device.
""")
_XcmPrtDrvrHwdOptCoilPunchUnit_Type = PresentOnOff
_XcmPrtDrvrHwdOptCoilPunchUnit_Object = MibScalar
xcmPrtDrvrHwdOptCoilPunchUnit = _XcmPrtDrvrHwdOptCoilPunchUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 5),
    _XcmPrtDrvrHwdOptCoilPunchUnit_Type()
)
xcmPrtDrvrHwdOptCoilPunchUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptCoilPunchUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptCoilPunchUnit.setDescription("""\
Object that indicates if a Coil Punch Unit is installed within the print
device.
""")
_XcmPrtDrvrHwdOptFinisherDFA_Type = XcmPrtFinisherDFAType
_XcmPrtDrvrHwdOptFinisherDFA_Object = MibScalar
xcmPrtDrvrHwdOptFinisherDFA = _XcmPrtDrvrHwdOptFinisherDFA_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 6),
    _XcmPrtDrvrHwdOptFinisherDFA_Type()
)
xcmPrtDrvrHwdOptFinisherDFA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptFinisherDFA.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptFinisherDFA.setDescription("""\
Object that indicates the type of Finisher DFA that is installed within the
print device.
""")
_XcmPrtDrvrHwdOptHighCapacityFeeder_Type = XcmPrtHighCapacityFeederType
_XcmPrtDrvrHwdOptHighCapacityFeeder_Object = MibScalar
xcmPrtDrvrHwdOptHighCapacityFeeder = _XcmPrtDrvrHwdOptHighCapacityFeeder_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 7),
    _XcmPrtDrvrHwdOptHighCapacityFeeder_Type()
)
xcmPrtDrvrHwdOptHighCapacityFeeder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptHighCapacityFeeder.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptHighCapacityFeeder.setDescription("""\
Object that indicates the type of High Capacity Feeder that is installed within
the print device.
""")


class _XcmPrtDriverOutputDeliveryUnit_Type(OctetString):
    """Custom type xcmPrtDriverOutputDeliveryUnit based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtDriverOutputDeliveryUnit_Type.__name__ = "OctetString"
_XcmPrtDriverOutputDeliveryUnit_Object = MibScalar
xcmPrtDriverOutputDeliveryUnit = _XcmPrtDriverOutputDeliveryUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 8),
    _XcmPrtDriverOutputDeliveryUnit_Type()
)
xcmPrtDriverOutputDeliveryUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDriverOutputDeliveryUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDriverOutputDeliveryUnit.setDescription("""\
Object used to indicate the type of Output Delivery Units that are installed
within the print device. The contents of this object shall expose a string of
valid Output Delivery Unit name which are seperated by a comma. Valid Output
Delivery Unit type include: 'notInstalled' 'installed' 'phStacker' 'phAdvanced'
'phProfessional' 'offsetCatchTray' 'simpleCatchTray' 'outputBin500Support'
'octMailbox' 'sctMailbox' 'octMailboxStapler' 'sctMailboxStapler'
'basicOfficeFinisher' 'officeFinisher' 'advancedOfficeFinisher'
'standardFinisher' 'professionalFinisher' 'dClassFinisher' 'dBookletMaker'
'dBookletMakerFold' 'd3ClassFinisher' 'd3ClassFinisherHcs' 'sbm' 'standardMff'
'professionalMff' 'bfm' 'ftm' 'bfmBfm' 'bfmBfmFtm' 'hcs' 'ehcs' 'hvf' 'hvfBm'
'bTypeFinisher' 'cTypeFinisher' 'cTypeFinisherBookletMaker' 'phProfessional2'
'dfaCompliant' 'hcss' 'dClassFinisherAdvanced' 'dClassFinisherProfessional'
'dClassFinisherProduction' 'cClassFinisherAdvanced'
'cClassFinisherProfessional' 'sbmFolder' 'standardFinisherMain'
'standardFinisherSb' 'dfaCompliantMain' 'dfaCompliantSb' 'dfaCompliantCustom'
'ehcs80' 'ehcss80' 'hcsDfa' 'hcsHcs' 'hcsHcsDfa' 'D3ClassFinisherHcsHcs' 'css'
'professionalPlusMff' 'bfmFtm' 'aTypeFinisher' 'typeSb' 'typeSbBookletMaker'
'professionalMffMohican' 'ftms' 'bfmFtms' 'ftmsFtms' 'bfmFtmsFtms' 'bfmBfmFtms'
'dFold' 'mainTray' An example: dClassFinisherProduction,dBookletMaker
""")
_XcmPrtDrvrHwdOptHardDrive_Type = PresentOnOff
_XcmPrtDrvrHwdOptHardDrive_Object = MibScalar
xcmPrtDrvrHwdOptHardDrive = _XcmPrtDrvrHwdOptHardDrive_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 9),
    _XcmPrtDrvrHwdOptHardDrive_Type()
)
xcmPrtDrvrHwdOptHardDrive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptHardDrive.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptHardDrive.setDescription("""\
Object that indicates if a Hard Drive is installed within the print device.
""")
_XcmPrtDrvrHwdOptHolePunchUnit_Type = XcmPrtHolePunchUnitType
_XcmPrtDrvrHwdOptHolePunchUnit_Object = MibScalar
xcmPrtDrvrHwdOptHolePunchUnit = _XcmPrtDrvrHwdOptHolePunchUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 10),
    _XcmPrtDrvrHwdOptHolePunchUnit_Type()
)
xcmPrtDrvrHwdOptHolePunchUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptHolePunchUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptHolePunchUnit.setDescription("""\
Object used to indicate the type of Hole Punch Unit that is installed within
the print device.
""")


class _XcmPrtDriverInputPaperTrays_Type(OctetString):
    """Custom type xcmPrtDriverInputPaperTrays based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtDriverInputPaperTrays_Type.__name__ = "OctetString"
_XcmPrtDriverInputPaperTrays_Object = MibScalar
xcmPrtDriverInputPaperTrays = _XcmPrtDriverInputPaperTrays_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 11),
    _XcmPrtDriverInputPaperTrays_Type()
)
xcmPrtDriverInputPaperTrays.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDriverInputPaperTrays.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDriverInputPaperTrays.setDescription("""\
Object used to indicate the type of Paper Trays that are installed within the
print device. The contents of this object shall expose a string of valid Paper
Tray names which are seperated by a comma. Valid paper tray types include:
'notInstalled' 'traysInstalled' '1Tray' '2Trays' '3Trays' '3TraysHighCapacity'
'4Trays' '4TraysHighCapacityTandemTray' '5Trays' '6Trays'
'extraTraysNotInstalled' '1ExtraTray' '2ExtraTrays' '3ExtraTrays' '4ExtraTrays'
'5TraysHighCapacityTandemTray' '6TraysHighCapacity'
'6TraysHighCapacityTandemTray' An example: 6Trays,2ExtraTrays
""")
_XcmPrtDrvrHwdOptInserterUnit_Type = PresentOnOff
_XcmPrtDrvrHwdOptInserterUnit_Object = MibScalar
xcmPrtDrvrHwdOptInserterUnit = _XcmPrtDrvrHwdOptInserterUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 12),
    _XcmPrtDrvrHwdOptInserterUnit_Type()
)
xcmPrtDrvrHwdOptInserterUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptInserterUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptInserterUnit.setDescription("""\
Object that indicates if an Inserter Unit is installed within the print device.
""")
_XcmPrtDrvrHwdOptJobAccountingFdi_Type = PresentOnOff
_XcmPrtDrvrHwdOptJobAccountingFdi_Object = MibScalar
xcmPrtDrvrHwdOptJobAccountingFdi = _XcmPrtDrvrHwdOptJobAccountingFdi_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 13),
    _XcmPrtDrvrHwdOptJobAccountingFdi_Type()
)
xcmPrtDrvrHwdOptJobAccountingFdi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptJobAccountingFdi.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptJobAccountingFdi.setDescription("""\
Object that indicates if a Job Accounting FDI Unit is installedthe print
device.
""")
_XcmPrtDrvrHwdOptFaxOut_Type = XcmPrtFaxOutType
_XcmPrtDrvrHwdOptFaxOut_Object = MibScalar
xcmPrtDrvrHwdOptFaxOut = _XcmPrtDrvrHwdOptFaxOut_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 14),
    _XcmPrtDrvrHwdOptFaxOut_Type()
)
xcmPrtDrvrHwdOptFaxOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptFaxOut.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptFaxOut.setDescription("""\
Object that indicates if a Fax Out Unit is installed within the print device.
""")
_XcmPrtDrvrHwdOptMemoryInMBs_Type = Integer32
_XcmPrtDrvrHwdOptMemoryInMBs_Object = MibScalar
xcmPrtDrvrHwdOptMemoryInMBs = _XcmPrtDrvrHwdOptMemoryInMBs_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 15),
    _XcmPrtDrvrHwdOptMemoryInMBs_Type()
)
xcmPrtDrvrHwdOptMemoryInMBs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptMemoryInMBs.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptMemoryInMBs.setDescription("""\
Object that indicates the size of physical memory in units of Megabytes
installed within the print device. A value of zero indicates that no memory is
installed.
""")
_XcmPrtDrvrHwdOptOutputBinSide_Type = PresentOnOff
_XcmPrtDrvrHwdOptOutputBinSide_Object = MibScalar
xcmPrtDrvrHwdOptOutputBinSide = _XcmPrtDrvrHwdOptOutputBinSide_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 16),
    _XcmPrtDrvrHwdOptOutputBinSide_Type()
)
xcmPrtDrvrHwdOptOutputBinSide.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptOutputBinSide.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptOutputBinSide.setDescription("""\
Object that indicates if a Side Output Bin is installed within the print
device.
""")
_XcmPrtDrvrHwdOptOutputBinCenter_Type = PresentOnOff
_XcmPrtDrvrHwdOptOutputBinCenter_Object = MibScalar
xcmPrtDrvrHwdOptOutputBinCenter = _XcmPrtDrvrHwdOptOutputBinCenter_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 17),
    _XcmPrtDrvrHwdOptOutputBinCenter_Type()
)
xcmPrtDrvrHwdOptOutputBinCenter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptOutputBinCenter.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptOutputBinCenter.setDescription("""\
Object that indicates if a Center Output Bin is installed within the print
device.
""")
_XcmPrtDrvrHwdOptPhaserModule_Type = XcmPrtPhaserModuleType
_XcmPrtDrvrHwdOptPhaserModule_Object = MibScalar
xcmPrtDrvrHwdOptPhaserModule = _XcmPrtDrvrHwdOptPhaserModule_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 18),
    _XcmPrtDrvrHwdOptPhaserModule_Type()
)
xcmPrtDrvrHwdOptPhaserModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptPhaserModule.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptPhaserModule.setDescription("""\
Object that indentifies the configuration of the Phaser print device.
""")
_XcmPrtDrvrHwdOptPrintEngine_Type = XcmPrtPrintEngineType
_XcmPrtDrvrHwdOptPrintEngine_Object = MibScalar
xcmPrtDrvrHwdOptPrintEngine = _XcmPrtDrvrHwdOptPrintEngine_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 19),
    _XcmPrtDrvrHwdOptPrintEngine_Type()
)
xcmPrtDrvrHwdOptPrintEngine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptPrintEngine.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptPrintEngine.setDescription("""\
Object that indicates if the print device contains a single print engine or has
two print engines.
""")
_XcmPrtDrvrHwdOptSquareFoldTrimmer_Type = PresentOnOff
_XcmPrtDrvrHwdOptSquareFoldTrimmer_Object = MibScalar
xcmPrtDrvrHwdOptSquareFoldTrimmer = _XcmPrtDrvrHwdOptSquareFoldTrimmer_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 20),
    _XcmPrtDrvrHwdOptSquareFoldTrimmer_Type()
)
xcmPrtDrvrHwdOptSquareFoldTrimmer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptSquareFoldTrimmer.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptSquareFoldTrimmer.setDescription("""\
Object that indicates if a Square Fold Trimmer Unit is installed within the
print device.
""")
_XcmPrtDrvrHwdOptTriFold_Type = PresentOnOff
_XcmPrtDrvrHwdOptTriFold_Object = MibScalar
xcmPrtDrvrHwdOptTriFold = _XcmPrtDrvrHwdOptTriFold_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 21),
    _XcmPrtDrvrHwdOptTriFold_Type()
)
xcmPrtDrvrHwdOptTriFold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptTriFold.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrHwdOptTriFold.setDescription("""\
Object that indicates if a Tri-Fold Unit is installed within the print device.
""")
_XcmPrtDrvrFntCollation_Type = PresentOnOff
_XcmPrtDrvrFntCollation_Object = MibScalar
xcmPrtDrvrFntCollation = _XcmPrtDrvrFntCollation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 50),
    _XcmPrtDrvrFntCollation_Type()
)
xcmPrtDrvrFntCollation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntCollation.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntCollation.setDescription("""\
Object that indicates if the Collation function is supported by the print
device.
""")
_XcmPrtDrvrFntAsciiJobTicket_Type = XcmPrtAsciiJobTicketType
_XcmPrtDrvrFntAsciiJobTicket_Object = MibScalar
xcmPrtDrvrFntAsciiJobTicket = _XcmPrtDrvrFntAsciiJobTicket_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 51),
    _XcmPrtDrvrFntAsciiJobTicket_Type()
)
xcmPrtDrvrFntAsciiJobTicket.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntAsciiJobTicket.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntAsciiJobTicket.setDescription("""\
Object that indicates if an ACSII Job Ticket function is supported by the print
device.
""")
_XcmPrtDrvrFntAuthenticationMode_Type = XcmPrtAuthenticationModeType
_XcmPrtDrvrFntAuthenticationMode_Object = MibScalar
xcmPrtDrvrFntAuthenticationMode = _XcmPrtDrvrFntAuthenticationMode_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 52),
    _XcmPrtDrvrFntAuthenticationMode_Type()
)
xcmPrtDrvrFntAuthenticationMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntAuthenticationMode.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntAuthenticationMode.setDescription("""\
Object that indicates the type of Authentication Mode function that is
supported by the print device.
""")
_XcmPrtDrvrFntHoldForAuthenMode_Type = XcmPrtHoldForAuthenModeType
_XcmPrtDrvrFntHoldForAuthenMode_Object = MibScalar
xcmPrtDrvrFntHoldForAuthenMode = _XcmPrtDrvrFntHoldForAuthenMode_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 53),
    _XcmPrtDrvrFntHoldForAuthenMode_Type()
)
xcmPrtDrvrFntHoldForAuthenMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntHoldForAuthenMode.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntHoldForAuthenMode.setDescription("""\
Object that indicates the type of Hold for Authentication Mode function that is
supported by the print device.
""")
_XcmPrtDrvrFntEnhancedImageQualityMode_Type = PresentOnOff
_XcmPrtDrvrFntEnhancedImageQualityMode_Object = MibScalar
xcmPrtDrvrFntEnhancedImageQualityMode = _XcmPrtDrvrFntEnhancedImageQualityMode_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 54),
    _XcmPrtDrvrFntEnhancedImageQualityMode_Type()
)
xcmPrtDrvrFntEnhancedImageQualityMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntEnhancedImageQualityMode.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntEnhancedImageQualityMode.setDescription("""\
Object that indicates if the Enhanced Image Quality function is supported by
the print device.
""")
_XcmPrtDrvrFntProductivityPack_Type = PresentOnOff
_XcmPrtDrvrFntProductivityPack_Object = MibScalar
xcmPrtDrvrFntProductivityPack = _XcmPrtDrvrFntProductivityPack_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 55),
    _XcmPrtDrvrFntProductivityPack_Type()
)
xcmPrtDrvrFntProductivityPack.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntProductivityPack.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntProductivityPack.setDescription("""\
Object that indicates if the Productivity Pack function is supported by the
print device.
""")
_XcmPrtDrvrFntJobStorage_Type = PresentOnOff
_XcmPrtDrvrFntJobStorage_Object = MibScalar
xcmPrtDrvrFntJobStorage = _XcmPrtDrvrFntJobStorage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 56),
    _XcmPrtDrvrFntJobStorage_Type()
)
xcmPrtDrvrFntJobStorage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntJobStorage.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntJobStorage.setDescription("""\
Object that indicates if the Job Storage software function is supported by the
print device.
""")
_XcmPrtDrvrFntJobAccountingSystem_Type = XcmPrtAccountingSystemType
_XcmPrtDrvrFntJobAccountingSystem_Object = MibScalar
xcmPrtDrvrFntJobAccountingSystem = _XcmPrtDrvrFntJobAccountingSystem_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 6, 57),
    _XcmPrtDrvrFntJobAccountingSystem_Type()
)
xcmPrtDrvrFntJobAccountingSystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntJobAccountingSystem.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDrvrFntJobAccountingSystem.setDescription("""\
Object that indicates the type of Job Accounting System that is supported by
the print device.
""")
_XcmPrtInput_ObjectIdentity = ObjectIdentity
xcmPrtInput = _XcmPrtInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8)
)
_XcmPrtInputTable_Object = MibTable
xcmPrtInputTable = _XcmPrtInputTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 1)
)
if mibBuilder.loadTexts:
    xcmPrtInputTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputTable.setDescription("""\
 This table logically augments the Printer MIB's prtInputTable.
""")
_XcmPrtInputEntry_Object = MibTableRow
xcmPrtInputEntry = _XcmPrtInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 1, 1)
)
prtInputEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmPrtInputEntry")
)
xcmPrtInputEntry.setIndexNames(*prtInputEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmPrtInputEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputEntry.setDescription("""\
 Entries may exist for each entry in the prtInputTable.
""")
_XcmPrtInputRowStatus_Type = RowStatus
_XcmPrtInputRowStatus_Object = MibTableColumn
xcmPrtInputRowStatus = _XcmPrtInputRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 1, 1, 1),
    _XcmPrtInputRowStatus_Type()
)
xcmPrtInputRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtInputTable.
""")
_XcmPrtInputNextPrtInputIndex_Type = Integer32
_XcmPrtInputNextPrtInputIndex_Object = MibTableColumn
xcmPrtInputNextPrtInputIndex = _XcmPrtInputNextPrtInputIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 1, 1, 2),
    _XcmPrtInputNextPrtInputIndex_Type()
)
xcmPrtInputNextPrtInputIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputNextPrtInputIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputNextPrtInputIndex.setReference("""\
 See: xcmPrtInputAliasGroup See: xcmPrtInterpTraySwitch
""")
if mibBuilder.loadTexts:
    xcmPrtInputNextPrtInputIndex.setDescription("""\
 The value of prtInputIndex corresponding to the input subunit which will be
used when this input subunit is emptied. The value of zero indicates that auto
input switching will not occur when this input subunit is emptied. Two
different mechanisms for input tray switching, xcmPrtNextPrtInputIndex and
xcmPrtInputAliasGroup, are provided. A device agent may make use of one or the
other, none, or both. Use the model that fits best for the given application.
Usage: Conforming management agents, which ALSO implement the the Printer MIB
v2, SHALL set 'xcmPrtInputNextPrtInputIndex' to the SAME value as
'prtInputNextIndex' (i.e., the values of these two objects SHALL be
interlocked).
""")


class _XcmPrtInputUseCustomSize_Type(PresentOnOff):
    """Custom type xcmPrtInputUseCustomSize based on PresentOnOff"""


_XcmPrtInputUseCustomSize_Object = MibTableColumn
xcmPrtInputUseCustomSize = _XcmPrtInputUseCustomSize_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 1, 1, 3),
    _XcmPrtInputUseCustomSize_Type()
)
xcmPrtInputUseCustomSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputUseCustomSize.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputUseCustomSize.setReference("""\
 See: xcmPrtInputCustDimFeedDirDecl See: xcmPrtInputCustDimXFeedDirDecl
""")
if mibBuilder.loadTexts:
    xcmPrtInputUseCustomSize.setDescription("""\
 Specifies how this input subunit determines the paper size to use. If the
value is 'Off' this input subunit uses the paper size automatically sensed by
the subunit. If the value is 'On' this input subunit uses the custom dimensions
provided by xcmPrtInputCustDimFeedDirDecl and xcmPrtInputCustDimXFeedDirDecl.
""")
_XcmPrtInputCustDimFeedDirDecl_Type = Integer32
_XcmPrtInputCustDimFeedDirDecl_Object = MibTableColumn
xcmPrtInputCustDimFeedDirDecl = _XcmPrtInputCustDimFeedDirDecl_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 1, 1, 4),
    _XcmPrtInputCustDimFeedDirDecl_Type()
)
xcmPrtInputCustDimFeedDirDecl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputCustDimFeedDirDecl.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputCustDimFeedDirDecl.setReference("""\
 See: xcmPrtInputUseCustomSize See: xcmPrtInputCustDimXFeedDirDecl
""")
if mibBuilder.loadTexts:
    xcmPrtInputCustDimFeedDirDecl.setDescription("""\
 Provides the dimension, in the feed direction, of the media in this input
subunit, when the value of xcmPrtInputUseCustomSize is set to 'On'. When
xcmPrtInputUseCustomSize is set to On, this value is copied to
prtInputMediaDimFeedDirDeclared and prtInputMediaDimFeedDirChosen.
""")
_XcmPrtInputCustDimXFeedDirDecl_Type = Integer32
_XcmPrtInputCustDimXFeedDirDecl_Object = MibTableColumn
xcmPrtInputCustDimXFeedDirDecl = _XcmPrtInputCustDimXFeedDirDecl_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 1, 1, 5),
    _XcmPrtInputCustDimXFeedDirDecl_Type()
)
xcmPrtInputCustDimXFeedDirDecl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputCustDimXFeedDirDecl.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputCustDimXFeedDirDecl.setReference("""\
 See: xcmPrtInputUseCustomSize See: xcmPrtInputCustDimFeedDirDecl
""")
if mibBuilder.loadTexts:
    xcmPrtInputCustDimXFeedDirDecl.setDescription("""\
 Provides the dimension, in the feed direction, of the media in this input
subunit, when the value of xcmPrtInputUseCustomSize is set to 'On'. When
xcmPrtInputUseCustomSize is set to 'On', this value is copied to
prtInputMediaDimFeedDirDeclared and prtInputMediaDimFeedDirChosen.
""")
_XcmPrtInputTrayPriority_Type = Integer32
_XcmPrtInputTrayPriority_Object = MibTableColumn
xcmPrtInputTrayPriority = _XcmPrtInputTrayPriority_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 1, 1, 6),
    _XcmPrtInputTrayPriority_Type()
)
xcmPrtInputTrayPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputTrayPriority.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputTrayPriority.setReference("""\
 See: xcmPrtNextPrtInputIndex See: xcmPrtInputAliasGroup
""")
if mibBuilder.loadTexts:
    xcmPrtInputTrayPriority.setDescription("""\
 The current priority of this tray. This value/mechanism is independent of
xcmPrtNextPrtInputIndex and xcmPrtInputAliasGroup. Usage: The priority of this
device, where '0' is unspecified (default), '1' is lowest, and '100' is
highest.
""")
_XcmPrtInputTrayTable_Object = MibTable
xcmPrtInputTrayTable = _XcmPrtInputTrayTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 2)
)
if mibBuilder.loadTexts:
    xcmPrtInputTrayTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputTrayTable.setDescription("""\
 This table logically augments the Printer MIB's Input Group.
""")
_XcmPrtInputTrayEntry_Object = MibTableRow
xcmPrtInputTrayEntry = _XcmPrtInputTrayEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 2, 1)
)
xcmPrtInputTrayEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmPrtInputTrayEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputTrayEntry.setDescription("""\
 Entries may exist for each unique hrDeviceIndex entry in the prtInputTable.
""")
_XcmPrtInputTraysRowStatus_Type = RowStatus
_XcmPrtInputTraysRowStatus_Object = MibTableColumn
xcmPrtInputTraysRowStatus = _XcmPrtInputTraysRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 2, 1, 1),
    _XcmPrtInputTraysRowStatus_Type()
)
xcmPrtInputTraysRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputTraysRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputTraysRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtInputTrayTable.
""")


class _XcmPrtInputTraysInstalled_Type(Integer32):
    """Custom type xcmPrtInputTraysInstalled based on Integer32"""
    defaultValue = 1


_XcmPrtInputTraysInstalled_Object = MibTableColumn
xcmPrtInputTraysInstalled = _XcmPrtInputTraysInstalled_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 2, 1, 2),
    _XcmPrtInputTraysInstalled_Type()
)
xcmPrtInputTraysInstalled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputTraysInstalled.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputTraysInstalled.setDescription("""\
 The number of printer input trays installed on this device. This is read-only
on devices that are able to determine this value at The value is read-write on
devices that do not know how many inpu trays are installed on the device. The
value reported must match the number of rows in prtInputTable for each unique
hrDeviceIndex in that table. Input trays for finisher units are not reported by
this value.
""")


class _XcmPrtInputTraysConfiguration_Type(XcmPrtInputTraysConfiguration):
    """Custom type xcmPrtInputTraysConfiguration based on XcmPrtInputTraysConfiguration"""


_XcmPrtInputTraysConfiguration_Object = MibTableColumn
xcmPrtInputTraysConfiguration = _XcmPrtInputTraysConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 8, 2, 1, 3),
    _XcmPrtInputTraysConfiguration_Type()
)
xcmPrtInputTraysConfiguration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmPrtInputTraysConfiguration.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputTraysConfiguration.setDescription("""\
 This single object represents the input tray configuration for the entire
machine. The value exposed by this object will be utilized by Xerox print
driver software and the Microsoft OS.
""")
_XcmPrtOutput_ObjectIdentity = ObjectIdentity
xcmPrtOutput = _XcmPrtOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9)
)
_XcmPrtOutputTable_Object = MibTable
xcmPrtOutputTable = _XcmPrtOutputTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPrtOutputTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputTable.setDescription("""\
 This table logically augments the prtOutputTable in the Printer MIB.
""")
_XcmPrtOutputEntry_Object = MibTableRow
xcmPrtOutputEntry = _XcmPrtOutputEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1)
)
prtOutputEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmPrtOutputEntry")
)
xcmPrtOutputEntry.setIndexNames(*prtOutputEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmPrtOutputEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputEntry.setDescription("""\
 Entries may exist for each entry in the prtOutputTable.
""")
_XcmPrtOutputRowStatus_Type = RowStatus
_XcmPrtOutputRowStatus_Object = MibTableColumn
xcmPrtOutputRowStatus = _XcmPrtOutputRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 1),
    _XcmPrtOutputRowStatus_Type()
)
xcmPrtOutputRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtOutputTable.
""")
_XcmPrtOutputNextIndex_Type = Integer32
_XcmPrtOutputNextIndex_Object = MibTableColumn
xcmPrtOutputNextIndex = _XcmPrtOutputNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 2),
    _XcmPrtOutputNextIndex_Type()
)
xcmPrtOutputNextIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputNextIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputNextIndex.setDescription("""\
 The value of prtOutputIndex corresponding to the output subunit which will be
used when this output subunit is filled. A value of zero(0) indicates that auto
output switching will not occur when this output subunit is filled.
""")


class _XcmPrtOutputPassword_Type(OctetString):
    """Custom type xcmPrtOutputPassword based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtOutputPassword_Type.__name__ = "OctetString"
_XcmPrtOutputPassword_Object = MibTableColumn
xcmPrtOutputPassword = _XcmPrtOutputPassword_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 3),
    _XcmPrtOutputPassword_Type()
)
xcmPrtOutputPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputPassword.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputPassword.setReference("""\
See: prtOutputSecurity.
""")
if mibBuilder.loadTexts:
    xcmPrtOutputPassword.setDescription("""\
 This object is used as the password for an Output Tray, e.g. an output
mailbox. It is the value that must be entered to open the output tray.
""")


class _XcmPrtOutputOffsetStackingType_Type(XcmPrtOutputOffsetStackingType):
    """Custom type xcmPrtOutputOffsetStackingType based on XcmPrtOutputOffsetStackingType"""


_XcmPrtOutputOffsetStackingType_Object = MibTableColumn
xcmPrtOutputOffsetStackingType = _XcmPrtOutputOffsetStackingType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 4),
    _XcmPrtOutputOffsetStackingType_Type()
)
xcmPrtOutputOffsetStackingType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputOffsetStackingType.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputOffsetStackingType.setReference("""\
 See: prtOutputOffsetStacking See: xcmPrtInterpOffsetStackingType
""")
if mibBuilder.loadTexts:
    xcmPrtOutputOffsetStackingType.setDescription("""\
 This object further refines the type of offset stacking from that specified by
the object prtOutputOffsetStacking in the Printer MIB.
""")


class _XcmPrtOutputTrayTimeoutSupport_Type(PresentOnOff):
    """Custom type xcmPrtOutputTrayTimeoutSupport based on PresentOnOff"""


_XcmPrtOutputTrayTimeoutSupport_Object = MibTableColumn
xcmPrtOutputTrayTimeoutSupport = _XcmPrtOutputTrayTimeoutSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 5),
    _XcmPrtOutputTrayTimeoutSupport_Type()
)
xcmPrtOutputTrayTimeoutSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputTrayTimeoutSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputTrayTimeoutSupport.setReference("""\
See: xcmPrtOutputTrayTimeout
""")
if mibBuilder.loadTexts:
    xcmPrtOutputTrayTimeoutSupport.setDescription("""\
 Determines whether the printer should wait before sending the printed output
to another output destination when the selected or default destination is full.
'On' indicates that would should wait as specified by xcmPrtOutputTrayTimeout.
'Off' indicates this feature is off and should immediately seek to send the
printed output to another destination. The value 'other' shall mean not
specified.
""")
_XcmPrtOutputTrayTimeout_Type = Cardinal32
_XcmPrtOutputTrayTimeout_Object = MibTableColumn
xcmPrtOutputTrayTimeout = _XcmPrtOutputTrayTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 6),
    _XcmPrtOutputTrayTimeout_Type()
)
xcmPrtOutputTrayTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputTrayTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputTrayTimeout.setUnits("Seconds")
if mibBuilder.loadTexts:
    xcmPrtOutputTrayTimeout.setDescription("""\
 Determines how long the printer should wait before sending the printed output
to another output destination when the selected or default destination is full.
A value of (0) implies 'other' or 'infinite' which translates to this input
subunit does not support this feature.
""")


class _XcmPrtOutputStaple_Type(PresentOnOff):
    """Custom type xcmPrtOutputStaple based on PresentOnOff"""


_XcmPrtOutputStaple_Object = MibTableColumn
xcmPrtOutputStaple = _XcmPrtOutputStaple_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 100),
    _XcmPrtOutputStaple_Type()
)
xcmPrtOutputStaple.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputStaple.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputStaple.setReference("""\
 See: 'xcmPrtOutputStapleDefault See: 'xcmPrtOutputStaplePosSupported' See:
'xcmPrtOutputStaplePosDefault'
""")
if mibBuilder.loadTexts:
    xcmPrtOutputStaple.setDescription("""\
 This object declares whether the printer has the ability to staple multi-page
documents delivered to the specified output destination, and whether this
ability is currently turned on. 'on' indicates stapling is supported to this
output destination, and that it is turned on. 'off' indicates this printer
supports stapling to this output destination, but that it is turned off. If a
job calls for a staple, none will be given. 'notPresent' indicates that this
printer does not support stapling to this output destination. The value 'other'
shall mean not specified.
""")
_XcmPrtOutputStaplePosSupported_Type = XcmPrtOutputStaplePosition
_XcmPrtOutputStaplePosSupported_Object = MibTableColumn
xcmPrtOutputStaplePosSupported = _XcmPrtOutputStaplePosSupported_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 101),
    _XcmPrtOutputStaplePosSupported_Type()
)
xcmPrtOutputStaplePosSupported.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputStaplePosSupported.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputStaplePosSupported.setReference("""\
 See: 'xcmPrtOutputStaple' See: 'xcmPrtOutputStapleDefault' See:
'xcmPrtOutputStaplePosDefault'
""")
if mibBuilder.loadTexts:
    xcmPrtOutputStaplePosSupported.setDescription("""\
 This object declares the stapling positions supported.
""")


class _XcmPrtOutputStapleDefault_Type(PresentOnOff):
    """Custom type xcmPrtOutputStapleDefault based on PresentOnOff"""


_XcmPrtOutputStapleDefault_Object = MibTableColumn
xcmPrtOutputStapleDefault = _XcmPrtOutputStapleDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 102),
    _XcmPrtOutputStapleDefault_Type()
)
xcmPrtOutputStapleDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputStapleDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputStapleDefault.setReference("""\
 See: 'xcmPrtOutputStaple See: 'xcmPrtOutputStaplePosSupported' See:
'xcmPrtOutputStaplePosDefault'
""")
if mibBuilder.loadTexts:
    xcmPrtOutputStapleDefault.setDescription("""\
 This object declares for the cases where the job-stream does not specify
whether to staple a particular job, whether the printer should apply the
default staple specified in xcmPrtOutputStaplePosDefault for this output
destination. 'on' indicates the staple default feature is supported for this
output destination, and that a job not specifying whether to staple should be
supplied a staple per the 'xcmPrtOutputStaplePosDefault' object. If stapling is
disabled, the document will not be stapled. 'off' indicates the staple default
feature is supported for this output destination, but that it is turned off.
Jobs not specifying whether to staple, will not be stapled. 'notPresent'
indicates the staple default feature is not supported. Jobs not specifying
whether to staple, will not be stapled. The value 'other' shall mean not
specified.
""")
_XcmPrtOutputStaplePosDefault_Type = XcmPrtOutputStaplePosition
_XcmPrtOutputStaplePosDefault_Object = MibTableColumn
xcmPrtOutputStaplePosDefault = _XcmPrtOutputStaplePosDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 103),
    _XcmPrtOutputStaplePosDefault_Type()
)
xcmPrtOutputStaplePosDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputStaplePosDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputStaplePosDefault.setReference("""\
 See: 'xcmPrtOutputStaple' See: 'xcmPrtOutputStapleDefault' See:
'xcmPrtOutputStaplePosSupported'
""")
if mibBuilder.loadTexts:
    xcmPrtOutputStaplePosDefault.setDescription("""\
 This object controls the default staple position to be used when stapling is
enabled, and the job-stream does not specify whether to staple the particular
job or the job-stream specifies to apply a staple, but does not specify where.
Only one staple position may be declared. The value of zero indicates a default
of not staple.
""")


class _XcmPrtOutputPunch_Type(PresentOnOff):
    """Custom type xcmPrtOutputPunch based on PresentOnOff"""


_XcmPrtOutputPunch_Object = MibTableColumn
xcmPrtOutputPunch = _XcmPrtOutputPunch_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 104),
    _XcmPrtOutputPunch_Type()
)
xcmPrtOutputPunch.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputPunch.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputPunch.setDescription("""\
 This object declares whether the printer has the ability to punch holes in
documents delivered to the specified output destination, and whether this
ability is currently turned on. 'on' indicates hole punching is supported to
this output destination and that it is turned on 'off' indicates this printer
supports hole punching to this output destination, but that it is turned off.
If a job calls for punched output, no punching will occur. 'not Present'
indicates that this printer does not support hole punching.
""")


class _XcmPrtOutputPunchDefault_Type(PresentOnOff):
    """Custom type xcmPrtOutputPunchDefault based on PresentOnOff"""


_XcmPrtOutputPunchDefault_Object = MibTableColumn
xcmPrtOutputPunchDefault = _XcmPrtOutputPunchDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 105),
    _XcmPrtOutputPunchDefault_Type()
)
xcmPrtOutputPunchDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputPunchDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputPunchDefault.setDescription("""\
 This object declares whether the printer will punch the job when the print
stream does not specify a punch requirement. 'on' indicates hole punching is
supported to this output destination and that the job will be punched if the
data stream contains no job punch information 'off' indicates this printer
supports hole punching to this output destination, and that the job will not be
punched if the data stream contains no job punch information 'not Present'
indicates that this printer does not support hole punching.
""")
_XcmPrtOutputPunchPosSupported_Type = XcmPrtOutputPunchPosition
_XcmPrtOutputPunchPosSupported_Object = MibTableColumn
xcmPrtOutputPunchPosSupported = _XcmPrtOutputPunchPosSupported_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 106),
    _XcmPrtOutputPunchPosSupported_Type()
)
xcmPrtOutputPunchPosSupported.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputPunchPosSupported.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputPunchPosSupported.setReference("""\
 See: 'xcmPrtOutputPunch'
""")
if mibBuilder.loadTexts:
    xcmPrtOutputPunchPosSupported.setDescription("""\
 This object declares the punch positions supported.
""")


class _XcmPrtOutputBookletFoldStaple_Type(PresentOnOff):
    """Custom type xcmPrtOutputBookletFoldStaple based on PresentOnOff"""


_XcmPrtOutputBookletFoldStaple_Object = MibTableColumn
xcmPrtOutputBookletFoldStaple = _XcmPrtOutputBookletFoldStaple_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 9, 1, 1, 107),
    _XcmPrtOutputBookletFoldStaple_Type()
)
xcmPrtOutputBookletFoldStaple.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtOutputBookletFoldStaple.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputBookletFoldStaple.setDescription("""\
 This object declares whether the device has the ability to fold and or staple
booklet documents delivered to the specifie output destination, and whether
this ability is currently turn on indicates booklet folding and/or stapling is
supported to output destination and that it is turned on. off indicates booklet
folding and/or stapling is supported to but that it is turned off. If a job
calls for a booklet folding and/or staple, none will be given. notPresent
indicates booklet folding and/or stapling is not supported. The value other
shall mean not specified.
""")
_XcmPrtChannel_ObjectIdentity = ObjectIdentity
xcmPrtChannel = _XcmPrtChannel_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14)
)
_XcmPrtChannelTable_Object = MibTable
xcmPrtChannelTable = _XcmPrtChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1)
)
if mibBuilder.loadTexts:
    xcmPrtChannelTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelTable.setDescription("""\
 This table logically augments Printer MIB's prtChannelTable.
""")
_XcmPrtChannelEntry_Object = MibTableRow
xcmPrtChannelEntry = _XcmPrtChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1)
)
prtChannelEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmPrtChannelEntry")
)
xcmPrtChannelEntry.setIndexNames(*prtChannelEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmPrtChannelEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelEntry.setDescription("""\
 An entry exists corresponding to each entry in the prtChannelTable.
""")
_XcmPrtChannelRowStatus_Type = RowStatus
_XcmPrtChannelRowStatus_Object = MibTableColumn
xcmPrtChannelRowStatus = _XcmPrtChannelRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1, 1),
    _XcmPrtChannelRowStatus_Type()
)
xcmPrtChannelRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtChannelRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtChannelTable.
""")
_XcmPrtChannelEOJTimeout_Type = Cardinal32
_XcmPrtChannelEOJTimeout_Object = MibTableColumn
xcmPrtChannelEOJTimeout = _XcmPrtChannelEOJTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1, 2),
    _XcmPrtChannelEOJTimeout_Type()
)
xcmPrtChannelEOJTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtChannelEOJTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelEOJTimeout.setUnits("Seconds")
if mibBuilder.loadTexts:
    xcmPrtChannelEOJTimeout.setDescription("""\
 Defines the number of seconds that the channel waits before timing out. For
example, this may be used for the parallel channel. The value zero means
infinite or no timeout on the channel.
""")
_XcmPrtChannelAuxSheetPackage_Type = Cardinal32
_XcmPrtChannelAuxSheetPackage_Object = MibTableColumn
xcmPrtChannelAuxSheetPackage = _XcmPrtChannelAuxSheetPackage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1, 3),
    _XcmPrtChannelAuxSheetPackage_Type()
)
xcmPrtChannelAuxSheetPackage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtChannelAuxSheetPackage.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelAuxSheetPackage.setReference("""\
 See: xcmPrtGeneralAuxSheetPackage See: xcmPrtInterpAuxSheetPackage
""")
if mibBuilder.loadTexts:
    xcmPrtChannelAuxSheetPackage.setDescription("""\
 This object is an index into the xcmPrtAuxPackageTable. This table is used to
enable or disable printing of auxiliary sheets by this channel. The value zero
shall mean not specified.
""")


class _XcmPrtChannelSpoolingEnable_Type(PresentOnOff):
    """Custom type xcmPrtChannelSpoolingEnable based on PresentOnOff"""


_XcmPrtChannelSpoolingEnable_Object = MibTableColumn
xcmPrtChannelSpoolingEnable = _XcmPrtChannelSpoolingEnable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1, 4),
    _XcmPrtChannelSpoolingEnable_Type()
)
xcmPrtChannelSpoolingEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtChannelSpoolingEnable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelSpoolingEnable.setReference("""\
 DocuPrint 4517 Network Laser Printers User Guide, pg. D-5.
""")
if mibBuilder.loadTexts:
    xcmPrtChannelSpoolingEnable.setDescription("""\
 This object controls spooling to a large data store such as a hard disk. When
set to On, data received and waiting to be processed from any port is spooled
onto the large data store and later retrieved for processing. This allows the
printer to receive the data more rapidly, thus freeing the data source sooner.
It may also increase throughput by having the next job's print data already
local for processing. When set to Off, the spooling feature is disabled. Data
received is not spooled to the large data store, and is accepted by the printer
only as needed for printing. You may want to disable this spooling feature if
spooling is already done outside the printer; having the spooling done on the
printer as well, may not add value, and may create error recovery and queue
monitoring difficulties. The value 'other' shall mean not specified.
""")


class _XcmPrtChannelLangSensing_Type(PresentOnOff):
    """Custom type xcmPrtChannelLangSensing based on PresentOnOff"""


_XcmPrtChannelLangSensing_Object = MibTableColumn
xcmPrtChannelLangSensing = _XcmPrtChannelLangSensing_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1, 5),
    _XcmPrtChannelLangSensing_Type()
)
xcmPrtChannelLangSensing.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtChannelLangSensing.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelLangSensing.setReference("""\
 See: Printer MIB prtInterpreterLangFamily
""")
if mibBuilder.loadTexts:
    xcmPrtChannelLangSensing.setDescription("""\
 This object indicates whether the channel supports detection of the input PDL
language type, and if so, whether the feature is enabled. Currently, the
prtChannelDefaultPageDescLangIndex points to the Page Description Language
Interpreter for this channel. One of the PDL types enumerated in the
prtInterpreterLangFamily object is langAutomatic(37), to be used for automatic
PDL sensing; however, if the language sensing fails there is no fallback
language for the channel. Conforming implementations shall use
xcmPrtChannelLangSensing for each channel and deprecate use of the
langAutomatic(37) enum in favor of the literal default language in the
prtInterpreterLangFamily object. The value 'other' shall mean not specified.
""")


class _XcmPrtChannelBinaryPostScript_Type(PresentOnOff):
    """Custom type xcmPrtChannelBinaryPostScript based on PresentOnOff"""


_XcmPrtChannelBinaryPostScript_Object = MibTableColumn
xcmPrtChannelBinaryPostScript = _XcmPrtChannelBinaryPostScript_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1, 6),
    _XcmPrtChannelBinaryPostScript_Type()
)
xcmPrtChannelBinaryPostScript.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtChannelBinaryPostScript.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelBinaryPostScript.setReference("""\
 See: Printer MIB prtInterpreterLangFamily See: xcmPrtChannelBinaryPostScriptZ
""")
if mibBuilder.loadTexts:
    xcmPrtChannelBinaryPostScript.setDescription("""\
 If 'On' PostScript received over this channel is processed as pure binary
data. If 'Off' PostScript is interpretted as ASCII or TBCP data. The value
'other' shall mean not specified.
""")


class _XcmPrtChannelAutoJobEnd_Type(PresentOnOff):
    """Custom type xcmPrtChannelAutoJobEnd based on PresentOnOff"""


_XcmPrtChannelAutoJobEnd_Object = MibTableColumn
xcmPrtChannelAutoJobEnd = _XcmPrtChannelAutoJobEnd_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1, 80),
    _XcmPrtChannelAutoJobEnd_Type()
)
xcmPrtChannelAutoJobEnd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtChannelAutoJobEnd.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelAutoJobEnd.setReference("""\
 See: xcmPrtChannelEOJTimeout See: Xerox 4517+ User Guide See: Xerox 4505 User
Guide
""")
if mibBuilder.loadTexts:
    xcmPrtChannelAutoJobEnd.setDescription("""\
 Controls automatic ending of a print job that does not finish printing. When
'On', after the current print job has paused long enough to exceed the
xcmPrtChannelEOJTimeout interval, the current print job will be stopped. When
'Off', the print job does not end after the timeout interval. Instead, the
printer waits to continue until another print job is received on any port. A
partial page will remain unprinted until the next print job is received. The
current job will then be stopped. The value 'other' shall indicate not
specified.
""")


class _XcmPrtChannelBinaryPostScriptZ_Type(PresentOnOff):
    """Custom type xcmPrtChannelBinaryPostScriptZ based on PresentOnOff"""


_XcmPrtChannelBinaryPostScriptZ_Object = MibTableColumn
xcmPrtChannelBinaryPostScriptZ = _XcmPrtChannelBinaryPostScriptZ_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 14, 1, 1, 81),
    _XcmPrtChannelBinaryPostScriptZ_Type()
)
xcmPrtChannelBinaryPostScriptZ.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtChannelBinaryPostScriptZ.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelBinaryPostScriptZ.setReference("""\
 See: xcmPrtChannelBinaryPostScript See: Printer MIB prtInterpreterLangFamily
""")
if mibBuilder.loadTexts:
    xcmPrtChannelBinaryPostScriptZ.setDescription("""\
 If 'On' PostScript received over this channel is processed as pure binary
data. If 'Off' PostScript is interpretted as ASCII or TBCP data. The value
'other' shall mean not specified. Devices should NOT implement this object,
should instead implement the equivalent object xcmPrtChannelBinaryPostScript.
This xcmPrtChannelBinaryPostScriptZ object appears for backward compatibility
support only, since some few devices implemented the object at this OID.
Clients/managers wishing to support those devices should try to access both
objects (which generally can be done with a single SNMP message packet
combining requests for both object OIDs) and use whichever object is present in
the device.
""")
_XcmPrtInterpreter_ObjectIdentity = ObjectIdentity
xcmPrtInterpreter = _XcmPrtInterpreter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15)
)
_XcmPrtInterpreterTable_Object = MibTable
xcmPrtInterpreterTable = _XcmPrtInterpreterTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1)
)
if mibBuilder.loadTexts:
    xcmPrtInterpreterTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpreterTable.setDescription("""\
 This table logically augments the Printer MIB's prtInterpreterTable.
""")
_XcmPrtInterpreterEntry_Object = MibTableRow
xcmPrtInterpreterEntry = _XcmPrtInterpreterEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1)
)
prtInterpreterEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmPrtInterpreterEntry")
)
xcmPrtInterpreterEntry.setIndexNames(*prtInterpreterEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmPrtInterpreterEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpreterEntry.setDescription("""\
 An entry exists corresponding to each entry in the prtInterpreterTable.
""")
_XcmPrtInterpRowStatus_Type = RowStatus
_XcmPrtInterpRowStatus_Object = MibTableColumn
xcmPrtInterpRowStatus = _XcmPrtInterpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 1),
    _XcmPrtInterpRowStatus_Type()
)
xcmPrtInterpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtInterpreterTable.
""")
_XcmPrtInterpAuxSheetPackage_Type = Cardinal32
_XcmPrtInterpAuxSheetPackage_Object = MibTableColumn
xcmPrtInterpAuxSheetPackage = _XcmPrtInterpAuxSheetPackage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 2),
    _XcmPrtInterpAuxSheetPackage_Type()
)
xcmPrtInterpAuxSheetPackage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpAuxSheetPackage.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpAuxSheetPackage.setReference("""\
 See: xcmPrtGeneralAuxSheetPackage See: xcmPrtChannelAuxSheetPackage
""")
if mibBuilder.loadTexts:
    xcmPrtInterpAuxSheetPackage.setDescription("""\
 This object is an index into the xcmPrtAuxPackageTable. This table is used to
enable or disable printing of auxiliary sheets by this interpreter. The value
zero shall mean not specified.
""")


class _XcmPrtInterpContextSaving_Type(PresentOnOff):
    """Custom type xcmPrtInterpContextSaving based on PresentOnOff"""


_XcmPrtInterpContextSaving_Object = MibTableColumn
xcmPrtInterpContextSaving = _XcmPrtInterpContextSaving_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 3),
    _XcmPrtInterpContextSaving_Type()
)
xcmPrtInterpContextSaving.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpContextSaving.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpContextSaving.setReference("""\
 DocuPrint 4517 Network Laser Printers User Guide, Pg. D-16.
""")
if mibBuilder.loadTexts:
    xcmPrtInterpContextSaving.setDescription("""\
 Enables reserving memory for saving permanently downloaded fonts and macros,
when the printer switches between this and another interpreter. The effect is
to save the memory for a subsequent job using this interpreter. When set to
Off, all permanently downloaded fonts and macros are cleared from memory when
switching PDLs. They must be downloaded again when the printer switches back to
using the current PDL. When set to On, permanently downloaded fonts and macros
are stored in printer memory. You eliminate the time to download them again
when the printer switches back to the current PDL. In PCL, this is referred to
as Resource Savings. The value 'other' shall mean not specified.
""")


class _XcmPrtInterpEdgeEnhancement_Type(PresentOnOff):
    """Custom type xcmPrtInterpEdgeEnhancement based on PresentOnOff"""


_XcmPrtInterpEdgeEnhancement_Object = MibTableColumn
xcmPrtInterpEdgeEnhancement = _XcmPrtInterpEdgeEnhancement_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 4),
    _XcmPrtInterpEdgeEnhancement_Type()
)
xcmPrtInterpEdgeEnhancement.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpEdgeEnhancement.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpEdgeEnhancement.setDescription("""\
 Specifies whether the printer should perform EdgeEnhancement of the image of
the printed document for this interpreter. The value 'other' shall mean not
specified.
""")


class _XcmPrtInterpFontIndexDefault_Type(Integer32):
    """Custom type xcmPrtInterpFontIndexDefault based on Integer32"""
    defaultValue = -2


_XcmPrtInterpFontIndexDefault_Object = MibTableColumn
xcmPrtInterpFontIndexDefault = _XcmPrtInterpFontIndexDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 5),
    _XcmPrtInterpFontIndexDefault_Type()
)
xcmPrtInterpFontIndexDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpFontIndexDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpFontIndexDefault.setDescription("""\
 The value of xcmFontIndex corresponding to the xcmFontEntry which represents
the default font for this Interpreter. A value of (-1) means 'other'. A value
of (-2) means 'unknown'. A value of (-3) means 'notPresent'. A value of 'other'
(-3) should be used for those interpreters which have no default font (e.g.
PostScript). For agents that choose not to implement the Resources MIB, this
object specifies the ID of the default font. This use of this object is
significant only to the specific product.
""")
_XcmPrtInterpGrayLevels_Type = Cardinal32
_XcmPrtInterpGrayLevels_Object = MibTableColumn
xcmPrtInterpGrayLevels = _XcmPrtInterpGrayLevels_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 6),
    _XcmPrtInterpGrayLevels_Type()
)
xcmPrtInterpGrayLevels.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpGrayLevels.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpGrayLevels.setDescription("""\
 This object describes the gray levels supported by this interpreter. This may
represent gray levels within a color plane. The value zero means not specified
for this interpreter.
""")
_XcmPrtInterpGrayLevelDefault_Type = Cardinal32
_XcmPrtInterpGrayLevelDefault_Object = MibTableColumn
xcmPrtInterpGrayLevelDefault = _XcmPrtInterpGrayLevelDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 7),
    _XcmPrtInterpGrayLevelDefault_Type()
)
xcmPrtInterpGrayLevelDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpGrayLevelDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpGrayLevelDefault.setReference("""\
See: xcmPrtInterpGrayLevels
""")
if mibBuilder.loadTexts:
    xcmPrtInterpGrayLevelDefault.setDescription("""\
 This object controls the number of gray scales for this interpreter. The value
zero means not specified for this interpreter.
""")


class _XcmPrtInterpJamRecovery_Type(PresentOnOff):
    """Custom type xcmPrtInterpJamRecovery based on PresentOnOff"""


_XcmPrtInterpJamRecovery_Object = MibTableColumn
xcmPrtInterpJamRecovery = _XcmPrtInterpJamRecovery_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 8),
    _XcmPrtInterpJamRecovery_Type()
)
xcmPrtInterpJamRecovery.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpJamRecovery.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpJamRecovery.setReference("""\
 DocuPrint 4517 Network Laser Printers User Guide, Pg. D-9.
""")
if mibBuilder.loadTexts:
    xcmPrtInterpJamRecovery.setDescription("""\
 This object controls how the printer recovers from a paper jam. When set to
On, the printer reprints any pages in the printer at the time of the jam, after
the jam has been cleared. The printer does this by using a portion of memory to
store print data. This may slow throughput. When set to Off, some pages may be
lost after the jam has been cleared. The print job must be re-sent, specifying
those pages that did not print as a result of the paper jam. The value 'other'
shall mean not specified.
""")


class _XcmPrtInterpJobCopiesDefault_Type(Ordinal32):
    """Custom type xcmPrtInterpJobCopiesDefault based on Ordinal32"""
    defaultValue = 1


_XcmPrtInterpJobCopiesDefault_Object = MibTableColumn
xcmPrtInterpJobCopiesDefault = _XcmPrtInterpJobCopiesDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 9),
    _XcmPrtInterpJobCopiesDefault_Type()
)
xcmPrtInterpJobCopiesDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpJobCopiesDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpJobCopiesDefault.setReference("""\
 See: ISO/IEC 10175-1:1996(E) - Section 9.2.2.1: Results-profile job-copies
See: PJL Technical Reference Manual - COPIES See: PCL 5 Printer Language
Technical Reference Manual - Number of Copies Command
""")
if mibBuilder.loadTexts:
    xcmPrtInterpJobCopiesDefault.setDescription("""\
 This defines the default number of job copies to be printed by this
interpreter. If set incorrectly, this object may cause difficulties at customer
sites. Agent developers should consider making this object read-only,
permanently set to one copy.
""")


class _XcmPrtInterpLineWrap_Type(PresentOnOff):
    """Custom type xcmPrtInterpLineWrap based on PresentOnOff"""


_XcmPrtInterpLineWrap_Object = MibTableColumn
xcmPrtInterpLineWrap = _XcmPrtInterpLineWrap_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 10),
    _XcmPrtInterpLineWrap_Type()
)
xcmPrtInterpLineWrap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpLineWrap.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpLineWrap.setReference("""\
 Adobe PostScript Language Reference Manual Supplement.
""")
if mibBuilder.loadTexts:
    xcmPrtInterpLineWrap.setDescription("""\
 This object controls whether long lines are wrapped or truncated. If On, long
lines wrap to the next line. If Off, long lines are truncated. Note the meaning
of 'long' depends on the orientation and the current page size. The value
'other' shall mean not specified.
""")


class _XcmPrtInterpMediumSizeDefault_Type(XcmPrtMediumSize):
    """Custom type xcmPrtInterpMediumSizeDefault based on XcmPrtMediumSize"""


_XcmPrtInterpMediumSizeDefault_Object = MibTableColumn
xcmPrtInterpMediumSizeDefault = _XcmPrtInterpMediumSizeDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 11),
    _XcmPrtInterpMediumSizeDefault_Type()
)
xcmPrtInterpMediumSizeDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpMediumSizeDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpMediumSizeDefault.setReference("""\
 See: PCL 5 Printer Language Technical Reference Manual See: PJL Technical
Reference Manual - PAPER See: xcmPrtGeneralMediumClassDefault
""")
if mibBuilder.loadTexts:
    xcmPrtInterpMediumSizeDefault.setDescription("""\
 This object specifies the default medium size for an interpreter. It is used
if no medium size is specified. For PCL, this object sets the General PJL
Environment variable 'Paper'. The xcmPrtInterpMediumSizeDefault object may be
affected by setting the xcmPrtGeneralMediumClassDefault object.
""")


class _XcmPrtInterpPageProtect_Type(PresentOnOff):
    """Custom type xcmPrtInterpPageProtect based on PresentOnOff"""


_XcmPrtInterpPageProtect_Object = MibTableColumn
xcmPrtInterpPageProtect = _XcmPrtInterpPageProtect_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 12),
    _XcmPrtInterpPageProtect_Type()
)
xcmPrtInterpPageProtect.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPageProtect.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPageProtect.setReference("""\
 DocuPrint 4517 Network Laser Printers User Guide, Pg. D-11.
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPageProtect.setDescription("""\
 This object enables reserving sufficient memory for printing complex pages,
thus avoiding Page Too Complex errors. The amount of memory reserved is
implementation specific. When this feature is turned on, printer performance
may be slowed. The value 'other' shall mean not specified.
""")


class _XcmPrtInterpPageProtectSize_Type(XcmPrtMediumSize):
    """Custom type xcmPrtInterpPageProtectSize based on XcmPrtMediumSize"""


_XcmPrtInterpPageProtectSize_Object = MibTableColumn
xcmPrtInterpPageProtectSize = _XcmPrtInterpPageProtectSize_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 13),
    _XcmPrtInterpPageProtectSize_Type()
)
xcmPrtInterpPageProtectSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPageProtectSize.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPageProtectSize.setReference("""\
 See: Printer Job Language Technical Reference Manual - General PJL Environment
Variable 'PAGEPROTECT'
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPageProtectSize.setDescription("""\
 This object sets the PageSize to be used by this interpreter in reserving
sufficient memory for printing complex pages, thus avoiding Page Too Complex
Errors. The actual amount of memory to be reserved as a function of the
specified page size is implementation specific. When this feature is turned on,
printer performance may be slowed. In PCL, this object supports the General PJL
Environment Variable 'PAGEPROTECT'. This object the sets the page protection
configuration. The page protection feature reserves a block of printer memory
to prevent printer overrun errors when formatting very dense or complex images.
This variable may be set to any legal value at any time, regardless of the
current amount of free memory or the currently set resolution. When a job is
sent, if there is not enough memory to print correctly with the current
resolution and page protection configuration, the system temporarily overrides
the resolution and/or page protect values to run the job. When the page
protection status is changed, memory may be reconfigured, and all downloaded
fonts, PCL macros, and PostScript dictionaries may be lost. The value
notSpecified shall also mean Off.
""")


class _XcmPrtInterpPageSizeErrorPolicy_Type(XcmPrtPageSizeErrorPolicy):
    """Custom type xcmPrtInterpPageSizeErrorPolicy based on XcmPrtPageSizeErrorPolicy"""


_XcmPrtInterpPageSizeErrorPolicy_Object = MibTableColumn
xcmPrtInterpPageSizeErrorPolicy = _XcmPrtInterpPageSizeErrorPolicy_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 14),
    _XcmPrtInterpPageSizeErrorPolicy_Type()
)
xcmPrtInterpPageSizeErrorPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPageSizeErrorPolicy.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPageSizeErrorPolicy.setReference("""\
 See: xcmPrtInterpMediaTypeErrPolicy See: xcmPrtInterpErrorPolicyTimeout
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPageSizeErrorPolicy.setDescription("""\
 Controls interpreter behavior when the requested Page Size is not currently
available.
""")
_XcmPrtInterpPlexSupported_Type = XcmPrtPlex
_XcmPrtInterpPlexSupported_Object = MibTableColumn
xcmPrtInterpPlexSupported = _XcmPrtInterpPlexSupported_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 15),
    _XcmPrtInterpPlexSupported_Type()
)
xcmPrtInterpPlexSupported.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPlexSupported.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPlexSupported.setDescription("""\
 This object specifies the Plex modes supported by this interpreter. These Plex
modes specify the relative orientations between consecutive pages, and
capabilities of printing one-side, two-sided or both.
""")
_XcmPrtInterpPlexDefault_Type = XcmPrtPlex
_XcmPrtInterpPlexDefault_Object = MibTableColumn
xcmPrtInterpPlexDefault = _XcmPrtInterpPlexDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 16),
    _XcmPrtInterpPlexDefault_Type()
)
xcmPrtInterpPlexDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPlexDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPlexDefault.setReference("""\
See: xcmPrtInterpPlexSupported
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPlexDefault.setDescription("""\
 This object specifies the default plex for this interpreter. The device shall
set no more than one bit. The value zero shall indicate not specified.
""")


class _XcmPrtInterpPrintEdgeToEdge_Type(PresentOnOff):
    """Custom type xcmPrtInterpPrintEdgeToEdge based on PresentOnOff"""


_XcmPrtInterpPrintEdgeToEdge_Object = MibTableColumn
xcmPrtInterpPrintEdgeToEdge = _XcmPrtInterpPrintEdgeToEdge_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 17),
    _XcmPrtInterpPrintEdgeToEdge_Type()
)
xcmPrtInterpPrintEdgeToEdge.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPrintEdgeToEdge.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPrintEdgeToEdge.setDescription("""\
 Enables edge to edge printing for interpreters that try to enforce a
coordinate system that is offset from the edge of the paper, e.g., PCL. When
On, jobs are printed to the edge of the paper. When Off, jobs are printed in
normal printable area of page. The value 'other' shall mean not specified.
""")


class _XcmPrtInterpPrintQuality_Type(XcmPrtPrintQuality):
    """Custom type xcmPrtInterpPrintQuality based on XcmPrtPrintQuality"""


_XcmPrtInterpPrintQuality_Object = MibTableColumn
xcmPrtInterpPrintQuality = _XcmPrtInterpPrintQuality_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 18),
    _XcmPrtInterpPrintQuality_Type()
)
xcmPrtInterpPrintQuality.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPrintQuality.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPrintQuality.setDescription("""\
 Sets the default output quality of the printed document for this interpreter.
Some printers have programmatically controlled output quality.
""")
_XcmPrtInterpPrtInputIndexDflt_Type = Cardinal32
_XcmPrtInterpPrtInputIndexDflt_Object = MibTableColumn
xcmPrtInterpPrtInputIndexDflt = _XcmPrtInterpPrtInputIndexDflt_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 19),
    _XcmPrtInterpPrtInputIndexDflt_Type()
)
xcmPrtInterpPrtInputIndexDflt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPrtInputIndexDflt.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPrtInputIndexDflt.setDescription("""\
 Sets the default input source for the interpreter. It is the index to the
prtInputGroup. The value zero means not specified.
""")
_XcmPrtInterpPrtOutputIndexDflt_Type = Cardinal32
_XcmPrtInterpPrtOutputIndexDflt_Object = MibTableColumn
xcmPrtInterpPrtOutputIndexDflt = _XcmPrtInterpPrtOutputIndexDflt_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 20),
    _XcmPrtInterpPrtOutputIndexDflt_Type()
)
xcmPrtInterpPrtOutputIndexDflt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPrtOutputIndexDflt.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPrtOutputIndexDflt.setReference("""\
See: Printer MIB prtOutputDefaultIndex
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPrtOutputIndexDflt.setDescription("""\
 The value of the index of the default Output bin for this interpreter. If
specified, this object overrides the box level object prtOutputDefaultIndex.
The value zero means unspecified.
""")
_XcmPrtInterpResFeedDirDefault_Type = Cardinal32
_XcmPrtInterpResFeedDirDefault_Object = MibTableColumn
xcmPrtInterpResFeedDirDefault = _XcmPrtInterpResFeedDirDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 21),
    _XcmPrtInterpResFeedDirDefault_Type()
)
xcmPrtInterpResFeedDirDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpResFeedDirDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpResFeedDirDefault.setReference("""\
See: Printer MIB prtInterpreterFeedAddressability
""")
if mibBuilder.loadTexts:
    xcmPrtInterpResFeedDirDefault.setDescription("""\
 This object specifies for this interpreter, the default resolution in the Feed
direction in 10000 units of measure specified by prtMarkerAddressabilityUnit
for this interpreter. A related object is the Printer MIB
prtInterpreterFeedAddressability object which describes the maximum interpreter
addressability in the feed direction. The value zero shall mean not specified.
If this object has a value other than unspecified, this object takes precedence
over xcmPrtInterpFeedResIndexDefault.
""")
_XcmPrtInterpResXFeedDirDefault_Type = Cardinal32
_XcmPrtInterpResXFeedDirDefault_Object = MibTableColumn
xcmPrtInterpResXFeedDirDefault = _XcmPrtInterpResXFeedDirDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 22),
    _XcmPrtInterpResXFeedDirDefault_Type()
)
xcmPrtInterpResXFeedDirDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpResXFeedDirDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpResXFeedDirDefault.setReference("""\
See: Printer MIB prtInterpreterXFeedAddressability
""")
if mibBuilder.loadTexts:
    xcmPrtInterpResXFeedDirDefault.setDescription("""\
 This object specifies for this interpreter, the default resolution in the
Cross Feed direction in 10000 units of measure specified by
prtMarkerAddressabilityUnit for this interpreter. A related object is the
Printer MIB prtInterpreterFeedAddressability object which describes the maximum
interpreter addressability in the cross feed direction. The value zero means
unspecified. If this object has a value other than unspecified, this object
takes precedence over xcmPrtInterpFeedResIndexDefault.
""")
_XcmPrtInterpResIPResIndex_Type = Cardinal32
_XcmPrtInterpResIPResIndex_Object = MibTableColumn
xcmPrtInterpResIPResIndex = _XcmPrtInterpResIPResIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 23),
    _XcmPrtInterpResIPResIndex_Type()
)
xcmPrtInterpResIPResIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpResIPResIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpResIPResIndex.setDescription("""\
 This object shall provide an index into the xcmIPResTable. The xcmIPResTable
shall be used to list available resolutions supported by this interpreter. Each
row includes objects for Feed Resolution (pixels per inch), XFeed Resolution
(pixels per inch), Bits Per Pixel Supported, and Number of Color Planes
Supported. The value zero means unspecified.
""")
_XcmPrtInterpResIPResIndexDflt_Type = Cardinal32
_XcmPrtInterpResIPResIndexDflt_Object = MibTableColumn
xcmPrtInterpResIPResIndexDflt = _XcmPrtInterpResIPResIndexDflt_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 24),
    _XcmPrtInterpResIPResIndexDflt_Type()
)
xcmPrtInterpResIPResIndexDflt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpResIPResIndexDflt.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpResIPResIndexDflt.setDescription("""\
 This object which is a pointer into the xcmIPResTable sets the print
resolution for this interpreter. The value zero means unspecified.
""")
_XcmPrtInterpTextFormLength_Type = Cardinal32
_XcmPrtInterpTextFormLength_Object = MibTableColumn
xcmPrtInterpTextFormLength = _XcmPrtInterpTextFormLength_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 25),
    _XcmPrtInterpTextFormLength_Type()
)
xcmPrtInterpTextFormLength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpTextFormLength.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpTextFormLength.setReference("""\
 See: PJL Technical Reference Manual - FORMLINES
""")
if mibBuilder.loadTexts:
    xcmPrtInterpTextFormLength.setDescription("""\
 This object sets the maximum number of lines per page for a text file that is
being printed using this interpreter. For PCL Interpreters, this object
provides the General PJL Environment Variable FORMLINES. This variable is tied
to both the PJL Environment Variables PAPER and ORIENTATION. If the value of
either of those variables is changed, then the FORMLINES variable automatically
is updated to maintain the same line spacing. The value zero means not
specified.
""")
_XcmPrtInterpTimeoutJob_Type = Cardinal32
_XcmPrtInterpTimeoutJob_Object = MibTableColumn
xcmPrtInterpTimeoutJob = _XcmPrtInterpTimeoutJob_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 26),
    _XcmPrtInterpTimeoutJob_Type()
)
xcmPrtInterpTimeoutJob.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpTimeoutJob.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpTimeoutJob.setUnits("Seconds")
if mibBuilder.loadTexts:
    xcmPrtInterpTimeoutJob.setDescription("""\
 This object sets how long printer will wait for correct end of job from the
interpreter. This setting lets you adjust how long the printer will wait to
receive the data it needs to complete a job before terminating it prematurely.
The value zero means infinite.
""")
_XcmPrtInterpTimeoutPage_Type = Cardinal32
_XcmPrtInterpTimeoutPage_Object = MibTableColumn
xcmPrtInterpTimeoutPage = _XcmPrtInterpTimeoutPage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 27),
    _XcmPrtInterpTimeoutPage_Type()
)
xcmPrtInterpTimeoutPage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpTimeoutPage.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpTimeoutPage.setUnits("Seconds")
if mibBuilder.loadTexts:
    xcmPrtInterpTimeoutPage.setDescription("""\
 This object sets how long printer will wait for correct end of page from the
interpreter. If, for example, a print job contains a page without the correct
end of page code, the job will stall. This setting lets you adjust how long the
printer will wait to receive the data it needs to complete a page before
terminating it prematurely. The value zero means infinite.
""")
_XcmPrtInterpInputAliasIndexDflt_Type = Cardinal32
_XcmPrtInterpInputAliasIndexDflt_Object = MibTableColumn
xcmPrtInterpInputAliasIndexDflt = _XcmPrtInterpInputAliasIndexDflt_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 28),
    _XcmPrtInterpInputAliasIndexDflt_Type()
)
xcmPrtInterpInputAliasIndexDflt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpInputAliasIndexDflt.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpInputAliasIndexDflt.setReference("""\
 See: xcmPrtInputAliasTable
""")
if mibBuilder.loadTexts:
    xcmPrtInterpInputAliasIndexDflt.setDescription("""\
 Sets the default input tray alias for this interpreter. It is the
xcmPrtInputAliasIndex to the xcmPrtInputAlias table. The value zero means 'not
specified'.
""")


class _XcmPrtInterpTraySwitch_Type(XcmPrtTraySwitch):
    """Custom type xcmPrtInterpTraySwitch based on XcmPrtTraySwitch"""


_XcmPrtInterpTraySwitch_Object = MibTableColumn
xcmPrtInterpTraySwitch = _XcmPrtInterpTraySwitch_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 29),
    _XcmPrtInterpTraySwitch_Type()
)
xcmPrtInterpTraySwitch.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpTraySwitch.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpTraySwitch.setReference("""\
 See: xcmPrtInputNextPrtInputIndex See: xcmPrtInputAliasGroup
""")
if mibBuilder.loadTexts:
    xcmPrtInterpTraySwitch.setDescription("""\
 This object declares for this interpreter the tray switching declaration
mechanism used. Note: The tray switching declaration mechanisms do not specify
how or when or whether a printer switches back to using an earlier emptied tray
after that tray is refilled. For example, assume a printer is set up to first
use Tray 1, then when emptied Tray 2, then Tray 3. If just after tray 1 becomes
empty and the printer switches to Tray 2, the operator refills Tray 1; the
printer may select which tray to pull the next sheet from using a variety of
algorithms: - The printer may switch back immediately to use tray 1. This may
be particularly appropriate if tray 1 is the high capacity feeder. - The
printer may pull sheets from tray 2 until it is empty and then switch back to
tray 1. - The printer may pull sheets from tray 2 until it is empty and then
continue to tray 3, before switching back to tray 1. Again, implementation of
how the input tray switching programs behave when empty trays are refilled is
considered printer specific.
""")


class _XcmPrtInterpMediumTypeDefault_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmPrtInterpMediumTypeDefault based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtInterpMediumTypeDefault_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmPrtInterpMediumTypeDefault_Object = MibTableColumn
xcmPrtInterpMediumTypeDefault = _XcmPrtInterpMediumTypeDefault_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 30),
    _XcmPrtInterpMediumTypeDefault_Type()
)
xcmPrtInterpMediumTypeDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpMediumTypeDefault.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpMediumTypeDefault.setDescription("""\
 Specifies the paper type used to print a page if no paper type is specified by
the software application Typical paper types could include Plain, Preprinted,
etc.
""")


class _XcmPrtInterpMediaTypeErrPolicy_Type(XcmPrtMediaTypeErrorPolicy):
    """Custom type xcmPrtInterpMediaTypeErrPolicy based on XcmPrtMediaTypeErrorPolicy"""


_XcmPrtInterpMediaTypeErrPolicy_Object = MibTableColumn
xcmPrtInterpMediaTypeErrPolicy = _XcmPrtInterpMediaTypeErrPolicy_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 31),
    _XcmPrtInterpMediaTypeErrPolicy_Type()
)
xcmPrtInterpMediaTypeErrPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpMediaTypeErrPolicy.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpMediaTypeErrPolicy.setReference("""\
 See: xcmPrtInterpPageSizeErrorPolicy See: xcmPrtInterpErrorPolicyTimeout
""")
if mibBuilder.loadTexts:
    xcmPrtInterpMediaTypeErrPolicy.setDescription("""\
 Controls interpreter behavior when the requested Media Type is not currently
available.
""")
_XcmPrtInterpErrorPolicyTimeout_Type = Cardinal32
_XcmPrtInterpErrorPolicyTimeout_Object = MibTableColumn
xcmPrtInterpErrorPolicyTimeout = _XcmPrtInterpErrorPolicyTimeout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 32),
    _XcmPrtInterpErrorPolicyTimeout_Type()
)
xcmPrtInterpErrorPolicyTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpErrorPolicyTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpErrorPolicyTimeout.setUnits("Seconds")
if mibBuilder.loadTexts:
    xcmPrtInterpErrorPolicyTimeout.setReference("""\
 See: xcmPrtInterpPageSizeErrorPolicy See: xcmPrtInterpMediaTypeErrPolicy
""")
if mibBuilder.loadTexts:
    xcmPrtInterpErrorPolicyTimeout.setDescription("""\
 Provides the timeout for ErrorPolicy enumerations requiring one, e.g.
'ignoreAfterTimeout' The value zero shall mean infinite or not supported.
""")


class _XcmPrtInterpLineTerm_Type(PresentOnOff):
    """Custom type xcmPrtInterpLineTerm based on PresentOnOff"""


_XcmPrtInterpLineTerm_Object = MibTableColumn
xcmPrtInterpLineTerm = _XcmPrtInterpLineTerm_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 33),
    _XcmPrtInterpLineTerm_Type()
)
xcmPrtInterpLineTerm.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpLineTerm.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpLineTerm.setDescription("""\
 Enables adding a Carriage Return after every Line Feed. The value 'On'
indicates that a Carriage Return will be added after every Line Feed. Usage
example: This is a useful feature when printing text jobs via PCL through a
standard queue in UNIX. The value 'other' shall mean not specified.
""")


class _XcmPrtInterpEnhancedResolution_Type(PresentOnOff):
    """Custom type xcmPrtInterpEnhancedResolution based on PresentOnOff"""


_XcmPrtInterpEnhancedResolution_Object = MibTableColumn
xcmPrtInterpEnhancedResolution = _XcmPrtInterpEnhancedResolution_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 34),
    _XcmPrtInterpEnhancedResolution_Type()
)
xcmPrtInterpEnhancedResolution.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpEnhancedResolution.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpEnhancedResolution.setDescription("""\
 This value determines whether the value of prtMarkerAddressabilityFeedDir and
prtMarkerAddressabilityXFeedDir is generated directly or generated by enhancing
a lower resolution via interpolation techniques. The value 'other' shall mean
not specified.
""")


class _XcmPrtInterpAutoContinue_Type(PresentOnOff):
    """Custom type xcmPrtInterpAutoContinue based on PresentOnOff"""


_XcmPrtInterpAutoContinue_Object = MibTableColumn
xcmPrtInterpAutoContinue = _XcmPrtInterpAutoContinue_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 50),
    _XcmPrtInterpAutoContinue_Type()
)
xcmPrtInterpAutoContinue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpAutoContinue.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpAutoContinue.setReference("""\
 DocuPrint 4517 Network Laser Printers User Guide, Pg. D-3.
""")
if mibBuilder.loadTexts:
    xcmPrtInterpAutoContinue.setDescription("""\
 This object controls whether the printer resumes printing after a system error
occurs. When set to Off, the printer does not automatically resume. Manual
intervention must occur for the printer to resume. When set to On, the printer
automatically resumes operation after certain system errors. The On setting is
useful in a networked environment. The value 'other' shall mean not specified.
""")


class _XcmPrtInterpEnvFeederSize_Type(XcmPrtMediumSize):
    """Custom type xcmPrtInterpEnvFeederSize based on XcmPrtMediumSize"""


_XcmPrtInterpEnvFeederSize_Object = MibTableColumn
xcmPrtInterpEnvFeederSize = _XcmPrtInterpEnvFeederSize_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 51),
    _XcmPrtInterpEnvFeederSize_Type()
)
xcmPrtInterpEnvFeederSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpEnvFeederSize.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpEnvFeederSize.setReference("""\
 DocuPrint 4517 Network Laser Printers User Guide, Pg. D-16.
""")
if mibBuilder.loadTexts:
    xcmPrtInterpEnvFeederSize.setDescription("""\
 This object informs the printer what size of envelope is currently loaded in
the envelope feeder. Because the input tray feeding envelopes may not have a
size sensor, this setting is required so that the printer is able to know when
the size of envelope requested for printing is different than that loaded. When
the sizes do not match, and xcmPrtInterpPageSizeErrorPolicy is set to Off, the
printer displays a message asking for a change of envelope size. The
XcmPrtPaperSize selected should be that of an envelope.
""")


class _XcmPrtInterpManualFeedPgSize_Type(XcmPrtMediumSize):
    """Custom type xcmPrtInterpManualFeedPgSize based on XcmPrtMediumSize"""


_XcmPrtInterpManualFeedPgSize_Object = MibTableColumn
xcmPrtInterpManualFeedPgSize = _XcmPrtInterpManualFeedPgSize_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 52),
    _XcmPrtInterpManualFeedPgSize_Type()
)
xcmPrtInterpManualFeedPgSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpManualFeedPgSize.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpManualFeedPgSize.setReference("""\
 DocuPrint 4517 Network Laser Printers User Guide, Pg. D-10.
""")
if mibBuilder.loadTexts:
    xcmPrtInterpManualFeedPgSize.setDescription("""\
 This object sets the default medium size of the manual input tray for this
interpreter.
""")


class _XcmPrtInterpOffsetStackingType_Type(XcmPrtOutputOffsetStackingType):
    """Custom type xcmPrtInterpOffsetStackingType based on XcmPrtOutputOffsetStackingType"""


_XcmPrtInterpOffsetStackingType_Object = MibTableColumn
xcmPrtInterpOffsetStackingType = _XcmPrtInterpOffsetStackingType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 53),
    _XcmPrtInterpOffsetStackingType_Type()
)
xcmPrtInterpOffsetStackingType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpOffsetStackingType.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpOffsetStackingType.setReference("""\
 See: prtOutputOffsetStacking. See: xcmPrtOutputOffsetStackingType
""")
if mibBuilder.loadTexts:
    xcmPrtInterpOffsetStackingType.setDescription("""\
 This object further refines the type of offset stacking from that specified by
the object prtOutputOffsetStacking in the Printer MIB. Printers who need to
specify OffsetStackingType by interpreter shall set this object to 'other'. To
specify OffsetStackingType by interpreter, use the object
xcmPrtOutputOffsetStackingType.
""")


class _XcmPrtInterpProcessBarcodes_Type(PresentOnOff):
    """Custom type xcmPrtInterpProcessBarcodes based on PresentOnOff"""


_XcmPrtInterpProcessBarcodes_Object = MibTableColumn
xcmPrtInterpProcessBarcodes = _XcmPrtInterpProcessBarcodes_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 15, 1, 1, 54),
    _XcmPrtInterpProcessBarcodes_Type()
)
xcmPrtInterpProcessBarcodes.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpProcessBarcodes.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpProcessBarcodes.setDescription("""\
 Specifies whether the 'extra' barcode processing within the interpreter should
be used.
""")
_XcmPrtInputAlias_ObjectIdentity = ObjectIdentity
xcmPrtInputAlias = _XcmPrtInputAlias_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 50)
)
_XcmPrtInputAliasTable_Object = MibTable
xcmPrtInputAliasTable = _XcmPrtInputAliasTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 50, 1)
)
if mibBuilder.loadTexts:
    xcmPrtInputAliasTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputAliasTable.setDescription("""\
 This table defines one or more aliases for input sub-units defined in the
Input Group.
""")
_XcmPrtInputAliasEntry_Object = MibTableRow
xcmPrtInputAliasEntry = _XcmPrtInputAliasEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 50, 1, 1)
)
xcmPrtInputAliasEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "Printer-MIB", "prtInterpreterIndex"),
    (0, "XEROX-COMMON-MIB", "xcmPrtInputAliasIndex"),
)
if mibBuilder.loadTexts:
    xcmPrtInputAliasEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputAliasEntry.setDescription("""\
 One or more entries may exist corresponding to each entry in the
prtInputTable.
""")
_XcmPrtInputAliasIndex_Type = Cardinal32
_XcmPrtInputAliasIndex_Object = MibTableColumn
xcmPrtInputAliasIndex = _XcmPrtInputAliasIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 50, 1, 1, 1),
    _XcmPrtInputAliasIndex_Type()
)
xcmPrtInputAliasIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmPrtInputAliasIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputAliasIndex.setDescription("""\
 A unique value used to identify this row in the xcmPrtInputAliasTable.
""")
_XcmPrtInputAliasRowStatus_Type = RowStatus
_XcmPrtInputAliasRowStatus_Object = MibTableColumn
xcmPrtInputAliasRowStatus = _XcmPrtInputAliasRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 50, 1, 1, 2),
    _XcmPrtInputAliasRowStatus_Type()
)
xcmPrtInputAliasRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputAliasRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputAliasRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtInputAliasTable.
""")


class _XcmPrtInputAliasName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmPrtInputAliasName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_XcmPrtInputAliasName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmPrtInputAliasName_Object = MibTableColumn
xcmPrtInputAliasName = _XcmPrtInputAliasName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 50, 1, 1, 3),
    _XcmPrtInputAliasName_Type()
)
xcmPrtInputAliasName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputAliasName.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputAliasName.setDescription("""\
 Defines an alternate name for the input source. This is in addition to the
prtInputName from the Input Group. Typical usage is to map an interpreter
specific name to the sub-unit name in the Input Group, e.g., PCL's 'upper' to
the device input name 'main'.
""")


class _XcmPrtInputAliasSwitchProgram_Type(DisplayString):
    """Custom type xcmPrtInputAliasSwitchProgram based on DisplayString"""
    defaultHexValue = ""

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtInputAliasSwitchProgram_Type.__name__ = "DisplayString"
_XcmPrtInputAliasSwitchProgram_Object = MibTableColumn
xcmPrtInputAliasSwitchProgram = _XcmPrtInputAliasSwitchProgram_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 50, 1, 1, 4),
    _XcmPrtInputAliasSwitchProgram_Type()
)
xcmPrtInputAliasSwitchProgram.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInputAliasSwitchProgram.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputAliasSwitchProgram.setDescription("""\
 The input tray switching program for this 'InputAliasName' presented in a '.'
separated list of prtInputIndex values. For example, the string '1.4.3'
indicates start with the input tray represented by prtInputIndex 1, if it
becomes empty switch to prtInputIndex 4, when it becomes empty switch to
prtInputIndex 3, if it becomes empty then wait for operator intervention. An
empty string shall indicate unspecified.
""")
_XcmPrtAuxSheet_ObjectIdentity = ObjectIdentity
xcmPrtAuxSheet = _XcmPrtAuxSheet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 52)
)
_XcmPrtAuxPackage_ObjectIdentity = ObjectIdentity
xcmPrtAuxPackage = _XcmPrtAuxPackage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60)
)
_XcmPrtAuxPackageTable_Object = MibTable
xcmPrtAuxPackageTable = _XcmPrtAuxPackageTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60, 1)
)
if mibBuilder.loadTexts:
    xcmPrtAuxPackageTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageTable.setDescription("""\
 This table lists Auxiliary Sheets enabled for this printer.
""")
_XcmPrtAuxPackageEntry_Object = MibTableRow
xcmPrtAuxPackageEntry = _XcmPrtAuxPackageEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60, 1, 1)
)
xcmPrtAuxPackageEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmPrtAuxPackageIndex"),
)
if mibBuilder.loadTexts:
    xcmPrtAuxPackageEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageEntry.setDescription("""\
 An entry exists corresponding to each entry in the xcmPrtAuxPackageTable.
""")
_XcmPrtAuxPackageIndex_Type = Cardinal32
_XcmPrtAuxPackageIndex_Object = MibTableColumn
xcmPrtAuxPackageIndex = _XcmPrtAuxPackageIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60, 1, 1, 1),
    _XcmPrtAuxPackageIndex_Type()
)
xcmPrtAuxPackageIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageIndex.setDescription("""\
 A unique value used by the printer to identify this Auxiliary Sheet.
""")
_XcmPrtAuxPackageRowStatus_Type = RowStatus
_XcmPrtAuxPackageRowStatus_Object = MibTableColumn
xcmPrtAuxPackageRowStatus = _XcmPrtAuxPackageRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60, 1, 1, 2),
    _XcmPrtAuxPackageRowStatus_Type()
)
xcmPrtAuxPackageRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtAuxPackageTable.
""")
_XcmPrtAuxPackageType_Type = XcmPrtAuxSheetType
_XcmPrtAuxPackageType_Object = MibTableColumn
xcmPrtAuxPackageType = _XcmPrtAuxPackageType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60, 1, 1, 3),
    _XcmPrtAuxPackageType_Type()
)
xcmPrtAuxPackageType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageType.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageType.setDescription("""\
 Specifies the Auxiliary Sheet type associated with this row. Note: DEFVAL
commented out due to the negative enum definition in 15prtxtc being illegal in
strict SMIv1 (see section 3.2.1.1 of RFC 1155).
""")


class _XcmPrtAuxPackageContent_Type(XcmPrtAuxSheetContent):
    """Custom type xcmPrtAuxPackageContent based on XcmPrtAuxSheetContent"""


_XcmPrtAuxPackageContent_Object = MibTableColumn
xcmPrtAuxPackageContent = _XcmPrtAuxPackageContent_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60, 1, 1, 4),
    _XcmPrtAuxPackageContent_Type()
)
xcmPrtAuxPackageContent.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageContent.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageContent.setDescription("""\
 Specifies the information content of this auxiliary sheet. The value zero
shall mean notSpecified.
""")
_XcmPrtAuxPackagePrtInputIndex_Type = Cardinal32
_XcmPrtAuxPackagePrtInputIndex_Object = MibTableColumn
xcmPrtAuxPackagePrtInputIndex = _XcmPrtAuxPackagePrtInputIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60, 1, 1, 5),
    _XcmPrtAuxPackagePrtInputIndex_Type()
)
xcmPrtAuxPackagePrtInputIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtAuxPackagePrtInputIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackagePrtInputIndex.setDescription("""\
 Specifies the input tray the printer shall use in printing this auxiliary
sheet. The value zero shall mean notSpecified.
""")
_XcmPrtAuxPackageNext_Type = Cardinal32
_XcmPrtAuxPackageNext_Object = MibTableColumn
xcmPrtAuxPackageNext = _XcmPrtAuxPackageNext_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 60, 1, 1, 6),
    _XcmPrtAuxPackageNext_Type()
)
xcmPrtAuxPackageNext.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageNext.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageNext.setDescription("""\
 Provides the index of the next Auxiliary Sheet declared for this printer. This
provides a linking mechanism to group auxiliary pages. The last auxiliary page
to be declared will set this xcmPrtAuxPackageNext object to zero, meaning no
further sheets. The value zero shall mean notPresent.
""")
_XcmPrtInterpPCL_ObjectIdentity = ObjectIdentity
xcmPrtInterpPCL = _XcmPrtInterpPCL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70)
)
_XcmPrtInterpPCLTable_Object = MibTable
xcmPrtInterpPCLTable = _XcmPrtInterpPCLTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1)
)
if mibBuilder.loadTexts:
    xcmPrtInterpPCLTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLTable.setDescription("""\
 This table is an extension to the prtInterpPCLTable.
""")
_XcmPrtInterpPCLEntry_Object = MibTableRow
xcmPrtInterpPCLEntry = _XcmPrtInterpPCLEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1)
)
xcmPrtInterpPCLEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "Printer-MIB", "prtInterpreterIndex"),
)
if mibBuilder.loadTexts:
    xcmPrtInterpPCLEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLEntry.setDescription("""\
 An entry exists corresponding to each entry in the xcmPrtInterpPCLTable.
""")
_XcmPrtInterpPCLRowStatus_Type = RowStatus
_XcmPrtInterpPCLRowStatus_Object = MibTableColumn
xcmPrtInterpPCLRowStatus = _XcmPrtInterpPCLRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1, 1),
    _XcmPrtInterpPCLRowStatus_Type()
)
xcmPrtInterpPCLRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLRowStatus.setDescription("""\
 Manages the status of this conceptual row in the xcmPrtInterpPCLTable.
""")


class _XcmPrtInterpPCLFontSourceDflt_Type(XcmPrtPCLFontSource):
    """Custom type xcmPrtInterpPCLFontSourceDflt based on XcmPrtPCLFontSource"""


_XcmPrtInterpPCLFontSourceDflt_Object = MibTableColumn
xcmPrtInterpPCLFontSourceDflt = _XcmPrtInterpPCLFontSourceDflt_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1, 2),
    _XcmPrtInterpPCLFontSourceDflt_Type()
)
xcmPrtInterpPCLFontSourceDflt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLFontSourceDflt.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLFontSourceDflt.setReference("""\
 See: PJL Technical Reference Manual- FONTSOURCE
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLFontSourceDflt.setDescription("""\
 This object provides the PCL-specific PJL variable 'FONTSOURCE'. 'FONTSOURCE'
specifies the device location of the default font in PCL.
""")
_XcmPrtInterpPCLFontNumberDflt_Type = Cardinal32
_XcmPrtInterpPCLFontNumberDflt_Object = MibTableColumn
xcmPrtInterpPCLFontNumberDflt = _XcmPrtInterpPCLFontNumberDflt_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1, 3),
    _XcmPrtInterpPCLFontNumberDflt_Type()
)
xcmPrtInterpPCLFontNumberDflt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLFontNumberDflt.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLFontNumberDflt.setReference("""\
 See: PJL Technical Reference Manual - FONTNUMBER
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLFontNumberDflt.setDescription("""\
 This object provides the PCL-specific PJL variable 'FONTNUMBER'. In PCL,
'FONTNUMBER' specifies the ID of the default font within the default
FONTSOURCE.
""")
_XcmPrtInterpPCLPitchNumerator_Type = Cardinal32
_XcmPrtInterpPCLPitchNumerator_Object = MibTableColumn
xcmPrtInterpPCLPitchNumerator = _XcmPrtInterpPCLPitchNumerator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1, 4),
    _XcmPrtInterpPCLPitchNumerator_Type()
)
xcmPrtInterpPCLPitchNumerator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPitchNumerator.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPitchNumerator.setReference("""\
 See: PCL 5 Printer Language Technical Reference Manual See: PJL Technical
Reference Manual - PITCH See: xcmPrtInterpPCLPitchDenominator
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPitchNumerator.setDescription("""\
 This object along with xcmPrtInterpPCLPitchDenominator sets the default for
the PCL-specific PJL variable 'PITCH. These two object sets the default pitch
size for the PCL default font defined in xcmPrtInterpreterPCLFontNumberDflt.
This variable only applies when the default font specified is a scalable fixed
pitch font. A value of zero shall mean not specified.
""")


class _XcmPrtInterpPCLPitchDenominator_Type(Cardinal32):
    """Custom type xcmPrtInterpPCLPitchDenominator based on Cardinal32"""
    defaultValue = 100


_XcmPrtInterpPCLPitchDenominator_Object = MibTableColumn
xcmPrtInterpPCLPitchDenominator = _XcmPrtInterpPCLPitchDenominator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1, 5),
    _XcmPrtInterpPCLPitchDenominator_Type()
)
xcmPrtInterpPCLPitchDenominator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPitchDenominator.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPitchDenominator.setReference("""\
 See: PCL 5 Printer Language Technical Reference Manual See: PJL Technical
Reference Manual - PITCH See: xcmPrtInterpPCLPitchNumerator
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPitchDenominator.setDescription("""\
 This object along with xcmPrtInterpPCLPitchNumerator sets the default for the
PCL-specific PJL variable 'PITCH'. These two object sets the default pitch size
for the PCL default font defined in xcmPrtInterpreterPCLFontNumberDflt. The
PITCH variable only applies when the default font specified is a scalable fixed
pitch font. A value of zero shall mean not specified. It is expected that a
typical application will set xcmPrtInterpPCLPitchDenominator to 100.
""")
_XcmPrtInterpPCLPtSizeNumerator_Type = Cardinal32
_XcmPrtInterpPCLPtSizeNumerator_Object = MibTableColumn
xcmPrtInterpPCLPtSizeNumerator = _XcmPrtInterpPCLPtSizeNumerator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1, 6),
    _XcmPrtInterpPCLPtSizeNumerator_Type()
)
xcmPrtInterpPCLPtSizeNumerator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPtSizeNumerator.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPtSizeNumerator.setReference("""\
 See: PJL Technical Reference Manual - PTSIZE See: PCL 5 Printer Language
Technical Reference Manual See: xcmPrtInterpPCLPtSizeDenominatr
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPtSizeNumerator.setDescription("""\
 This object along with xcmPrtInterpPCLPtSizeDenominatr sets the default for
the PCL-specific PJL variable 'PTSIZE'. The PTSIZE variable only applies when
the FONTNUMBER setting specifies a scalable proportionally-spaced font. The
size is in units of printer's points, which units are here considered to be
exactly 1/72 of an inch. The value zero shall mean not specified.
""")


class _XcmPrtInterpPCLPtSizeDenominatr_Type(Cardinal32):
    """Custom type xcmPrtInterpPCLPtSizeDenominatr based on Cardinal32"""
    defaultValue = 4


_XcmPrtInterpPCLPtSizeDenominatr_Object = MibTableColumn
xcmPrtInterpPCLPtSizeDenominatr = _XcmPrtInterpPCLPtSizeDenominatr_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1, 7),
    _XcmPrtInterpPCLPtSizeDenominatr_Type()
)
xcmPrtInterpPCLPtSizeDenominatr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPtSizeDenominatr.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPtSizeDenominatr.setReference("""\
 See: PCL 5 Printer Language Technical Reference Manual See: PJL Technical
Reference Manual - PTSIZE See: xcmPrtInterpPCLPtSizeNumerator
""")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPtSizeDenominatr.setDescription("""\
 This object along with xcmPrtInterpPCLPtSizeNumerator sets the default for the
PCL-specific PJL variable 'PTSIZE'. The PTSIZE variable only applies when the
FONTNUMBER setting specifies a scalable proportionally-spaced font. The value
zero shall mean not specified. It is expected that a typical application will
set this object to the value 4. For example, if the denominator is set to 4,
describe a PtSize of 8.5, xcmPrtInterpPCLPtSizeNominator must be set to 34.
""")


class _XcmPrtInterpPCLPrintScreen_Type(XcmPrtPrintScreen):
    """Custom type xcmPrtInterpPCLPrintScreen based on XcmPrtPrintScreen"""


_XcmPrtInterpPCLPrintScreen_Object = MibTableColumn
xcmPrtInterpPCLPrintScreen = _XcmPrtInterpPCLPrintScreen_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 70, 1, 1, 50),
    _XcmPrtInterpPCLPrintScreen_Type()
)
xcmPrtInterpPCLPrintScreen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPrintScreen.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLPrintScreen.setDescription("""\
 This object sets a special mode for 80 character screen dumps.
""")
_XcmPrtMediumTypeSupported_ObjectIdentity = ObjectIdentity
xcmPrtMediumTypeSupported = _XcmPrtMediumTypeSupported_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75)
)
_XcmPrtMedmTypeSupTable_Object = MibTable
xcmPrtMedmTypeSupTable = _XcmPrtMedmTypeSupTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2)
)
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupTable.setDescription("""\
 A table of specific and general medium 'types' which are associated with this
host system.
""")
_XcmPrtMedmTypeSupEntry_Object = MibTableRow
xcmPrtMedmTypeSupEntry = _XcmPrtMedmTypeSupEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1)
)
xcmPrtMedmTypeSupEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmPrtMedmTypeSupIndex"),
)
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupEntry.setDescription("""\
 An entry for a specific or general medium 'types' which is associated with
this host system.
""")
_XcmPrtMedmTypeSupIndex_Type = Ordinal32
_XcmPrtMedmTypeSupIndex_Object = MibTableColumn
xcmPrtMedmTypeSupIndex = _XcmPrtMedmTypeSupIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1, 1),
    _XcmPrtMedmTypeSupIndex_Type()
)
xcmPrtMedmTypeSupIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupIndex.setDescription("""\
 A unique value used to identify this medium type supported.
""")
_XcmPrtMedmTypeSupRowStatus_Type = RowStatus
_XcmPrtMedmTypeSupRowStatus_Object = MibTableColumn
xcmPrtMedmTypeSupRowStatus = _XcmPrtMedmTypeSupRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1, 2),
    _XcmPrtMedmTypeSupRowStatus_Type()
)
xcmPrtMedmTypeSupRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupRowStatus.setDescription("""\
 Manages the status of this conceptual row in the 'xcmPrtMedmTypeSupTable'.
""")


class _XcmPrtMedmTypeSupRowPersistence_Type(XcmGenRowPersistence):
    """Custom type xcmPrtMedmTypeSupRowPersistence based on XcmGenRowPersistence"""


_XcmPrtMedmTypeSupRowPersistence_Object = MibTableColumn
xcmPrtMedmTypeSupRowPersistence = _XcmPrtMedmTypeSupRowPersistence_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1, 3),
    _XcmPrtMedmTypeSupRowPersistence_Type()
)
xcmPrtMedmTypeSupRowPersistence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupRowPersistence.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupRowPersistence.setDescription("""\
 Indicates persistence of this row, from the given enumeration.
""")


class _XcmPrtMedmTypeSupName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmPrtMedmTypeSupName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtMedmTypeSupName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmPrtMedmTypeSupName_Object = MibTableColumn
xcmPrtMedmTypeSupName = _XcmPrtMedmTypeSupName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1, 4),
    _XcmPrtMedmTypeSupName_Type()
)
xcmPrtMedmTypeSupName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupName.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupName.setReference("""\
 See: prtInputMediaType
""")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupName.setDescription("""\
 Named 'type' of this medium instance. This can be the name of the media type
provided by a user.
""")


class _XcmPrtMedmTypeSupFuserTemp_Type(Integer32):
    """Custom type xcmPrtMedmTypeSupFuserTemp based on Integer32"""
    defaultValue = 50


_XcmPrtMedmTypeSupFuserTemp_Object = MibTableColumn
xcmPrtMedmTypeSupFuserTemp = _XcmPrtMedmTypeSupFuserTemp_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1, 5),
    _XcmPrtMedmTypeSupFuserTemp_Type()
)
xcmPrtMedmTypeSupFuserTemp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupFuserTemp.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupFuserTemp.setDescription("""\
 Indicates the relative fuser temperature for this medium type. The range is 1
- 100. A value to '50' indciates the 'normal' fuser temperature. Values higher
than 50 indicate higher fuser temperatures. Values lower than 50 indicate lower
fuser temperatures. The value to use is device specific.
""")


class _XcmPrtMedmTypeSupPaperType_Type(OctetString):
    """Custom type xcmPrtMedmTypeSupPaperType based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtMedmTypeSupPaperType_Type.__name__ = "OctetString"
_XcmPrtMedmTypeSupPaperType_Object = MibTableColumn
xcmPrtMedmTypeSupPaperType = _XcmPrtMedmTypeSupPaperType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1, 6),
    _XcmPrtMedmTypeSupPaperType_Type()
)
xcmPrtMedmTypeSupPaperType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupPaperType.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupPaperType.setReference("""\
 See: prtInputMediaType
""")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupPaperType.setDescription("""\
 The paper type for this xcmPrtMedmTypeSupName.
""")


class _XcmPrtMedmTypeSupPDLString_Type(OctetString):
    """Custom type xcmPrtMedmTypeSupPDLString based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmPrtMedmTypeSupPDLString_Type.__name__ = "OctetString"
_XcmPrtMedmTypeSupPDLString_Object = MibTableColumn
xcmPrtMedmTypeSupPDLString = _XcmPrtMedmTypeSupPDLString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1, 7),
    _XcmPrtMedmTypeSupPDLString_Type()
)
xcmPrtMedmTypeSupPDLString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupPDLString.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupPDLString.setReference("""\
 See: prtInputMediaType
""")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupPDLString.setDescription("""\
 The string used in the print stream for this xcmPrtMedmTypeSupName.
""")


class _XcmPrtMedmTypeSupFuserHide_Type(TruthValue):
    """Custom type xcmPrtMedmTypeSupFuserHide based on TruthValue"""


_XcmPrtMedmTypeSupFuserHide_Object = MibTableColumn
xcmPrtMedmTypeSupFuserHide = _XcmPrtMedmTypeSupFuserHide_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 75, 2, 1, 8),
    _XcmPrtMedmTypeSupFuserHide_Type()
)
xcmPrtMedmTypeSupFuserHide.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupFuserHide.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMedmTypeSupFuserHide.setDescription("""\
 Indicates if the custom type has to be hidden in host drivers. True means the
media type is not displayed. False means the media type can be selected for a
print job
""")
_XcmRsrcTC_ObjectIdentity = ObjectIdentity
xcmRsrcTC = _XcmRsrcTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 56)
)
if mibBuilder.loadTexts:
    xcmRsrcTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcTC.setDescription("""\
 XCMI Document Resources MIB Textual Conventions, Version 5.10.pub. Copyright
(C) 1997-2002 Xerox Corporation. All Rights Reserved.
""")
_XCmRsrcDummy_ObjectIdentity = ObjectIdentity
xCmRsrcDummy = _XCmRsrcDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 56, 999)
)
_XCmRsrcGroupSupport_Type = XcmRsrcGroupSupport
_XCmRsrcGroupSupport_Object = MibScalar
xCmRsrcGroupSupport = _XCmRsrcGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 56, 999, 1),
    _XCmRsrcGroupSupport_Type()
)
xCmRsrcGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmRsrcGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmRsrcGroupSupport.setDescription("""\
Dummy object - DO NOT USE
""")
_XCmRsrcType_Type = XcmRsrcType
_XCmRsrcType_Object = MibScalar
xCmRsrcType = _XCmRsrcType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 56, 999, 2),
    _XCmRsrcType_Type()
)
xCmRsrcType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmRsrcType.setStatus("current")
if mibBuilder.loadTexts:
    xCmRsrcType.setDescription("""\
Dummy object - DO NOT USE
""")
_XCmRsrcPersistence_Type = XcmRsrcPersistence
_XCmRsrcPersistence_Object = MibScalar
xCmRsrcPersistence = _XCmRsrcPersistence_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 56, 999, 3),
    _XCmRsrcPersistence_Type()
)
xCmRsrcPersistence.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmRsrcPersistence.setStatus("current")
if mibBuilder.loadTexts:
    xCmRsrcPersistence.setDescription("""\
Dummy object - DO NOT USE
""")
_XCmFontType_Type = XcmFontType
_XCmFontType_Object = MibScalar
xCmFontType = _XCmFontType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 56, 999, 4),
    _XCmFontType_Type()
)
xCmFontType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmFontType.setStatus("current")
if mibBuilder.loadTexts:
    xCmFontType.setDescription("""\
Dummy object - DO NOT USE
""")
_XCmFontSpacing_Type = XcmFontSpacing
_XCmFontSpacing_Object = MibScalar
xCmFontSpacing = _XCmFontSpacing_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 56, 999, 5),
    _XCmFontSpacing_Type()
)
xCmFontSpacing.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmFontSpacing.setStatus("current")
if mibBuilder.loadTexts:
    xCmFontSpacing.setDescription("""\
Dummy object - DO NOT USE
""")
_XCmFontPCLStyle_Type = XcmFontPCLStyle
_XCmFontPCLStyle_Object = MibScalar
xCmFontPCLStyle = _XCmFontPCLStyle_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 56, 999, 6),
    _XCmFontPCLStyle_Type()
)
xCmFontPCLStyle.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmFontPCLStyle.setStatus("current")
if mibBuilder.loadTexts:
    xCmFontPCLStyle.setDescription("""\
Dummy object - DO NOT USE
""")
_XCmFontPCLStrokeWeight_Type = XcmFontPCLStrokeWeight
_XCmFontPCLStrokeWeight_Object = MibScalar
xCmFontPCLStrokeWeight = _XCmFontPCLStrokeWeight_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 56, 999, 7),
    _XCmFontPCLStrokeWeight_Type()
)
xCmFontPCLStrokeWeight.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmFontPCLStrokeWeight.setStatus("current")
if mibBuilder.loadTexts:
    xCmFontPCLStrokeWeight.setDescription("""\
Dummy object - DO NOT USE
""")
_XcmRsrcMIB_ObjectIdentity = ObjectIdentity
xcmRsrcMIB = _XcmRsrcMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57)
)
if mibBuilder.loadTexts:
    xcmRsrcMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcMIB.setDescription("""\
 XCMI Document Resources MIB, Version 5.12.pub. Copyright (C) 1997-2002 Xerox
Corporation. All Rights Reserved.
""")
_XcmRsrcGeneral_ObjectIdentity = ObjectIdentity
xcmRsrcGeneral = _XcmRsrcGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1)
)
_XcmRsrcGeneralTable_Object = MibTable
xcmRsrcGeneralTable = _XcmRsrcGeneralTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1)
)
if mibBuilder.loadTexts:
    xcmRsrcGeneralTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralTable.setDescription("""\
A table of general counters and summary information for ease of use of the
overall Document Resources MIB on this host system. This Document Resources
General table has exactly one row, with an xcmRsrcGeneralIndex value of 1.
""")
_XcmRsrcGeneralEntry_Object = MibTableRow
xcmRsrcGeneralEntry = _XcmRsrcGeneralEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1)
)
xcmRsrcGeneralEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmRsrcGeneralIndex"),
)
if mibBuilder.loadTexts:
    xcmRsrcGeneralEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralEntry.setDescription("""\
A row entry of general counters and summary information for ease of use of the
overall Document Resources MIB on this host system. The Document Resources
General table has exactly one row entry, with an xcmRsrcGeneralIndex value of
1.
""")
_XcmRsrcGeneralIndex_Type = Ordinal32
_XcmRsrcGeneralIndex_Object = MibTableColumn
xcmRsrcGeneralIndex = _XcmRsrcGeneralIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 1),
    _XcmRsrcGeneralIndex_Type()
)
xcmRsrcGeneralIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmRsrcGeneralIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralIndex.setDescription("""\
An identifier of this conceptual row in the xcmRsrcGeneralTable. The
xcmRsrcGeneralTable has exactly one row, with an xcmRsrcGeneralIndex value of
1.
""")
_XcmRsrcGeneralRowStatus_Type = RowStatus
_XcmRsrcGeneralRowStatus_Object = MibTableColumn
xcmRsrcGeneralRowStatus = _XcmRsrcGeneralRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 2),
    _XcmRsrcGeneralRowStatus_Type()
)
xcmRsrcGeneralRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmRsrcGeneralRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralRowStatus.setDescription("""\
Displays the status of this conceptual row in the xcmRsrcGeneralTable. The
xcmRsrcGeneralTable has exactly one row, with an xcmRsrcGeneralIndex value of
1.
""")


class _XcmRsrcGeneralGroupSupport_Type(XcmRsrcGroupSupport):
    """Custom type xcmRsrcGeneralGroupSupport based on XcmRsrcGroupSupport"""
    defaultValue = 2


_XcmRsrcGeneralGroupSupport_Object = MibTableColumn
xcmRsrcGeneralGroupSupport = _XcmRsrcGeneralGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 3),
    _XcmRsrcGeneralGroupSupport_Type()
)
xcmRsrcGeneralGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmRsrcGeneralGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralGroupSupport.setDescription("""\
Indicates which object groups of the Document Resources MIB are supported by
this host system, specified in a bit-mask.
""")
_XcmRsrcGeneralCreateSupport_Type = XcmRsrcGroupSupport
_XcmRsrcGeneralCreateSupport_Object = MibTableColumn
xcmRsrcGeneralCreateSupport = _XcmRsrcGeneralCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 4),
    _XcmRsrcGeneralCreateSupport_Type()
)
xcmRsrcGeneralCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmRsrcGeneralCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralCreateSupport.setDescription("""\
Indicates which object groups of the Document Resources MIB are supported by
this host system for dynamic row creation (via '...RowStatus'), specified in a
bit-mask.
""")
_XcmRsrcGeneralUpdateSupport_Type = XcmRsrcGroupSupport
_XcmRsrcGeneralUpdateSupport_Object = MibTableColumn
xcmRsrcGeneralUpdateSupport = _XcmRsrcGeneralUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 5),
    _XcmRsrcGeneralUpdateSupport_Type()
)
xcmRsrcGeneralUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmRsrcGeneralUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralUpdateSupport.setDescription("""\
Indicates which object groups of the Document Resources MIB are supported by
this host system for existing row update (via SNMP Set-Request PDUs), specified
in a bit-mask.
""")


class _XcmRsrcGeneralRsrcTypeAccept_Type(OctetString):
    """Custom type xcmRsrcGeneralRsrcTypeAccept based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_XcmRsrcGeneralRsrcTypeAccept_Type.__name__ = "OctetString"
_XcmRsrcGeneralRsrcTypeAccept_Object = MibTableColumn
xcmRsrcGeneralRsrcTypeAccept = _XcmRsrcGeneralRsrcTypeAccept_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 6),
    _XcmRsrcGeneralRsrcTypeAccept_Type()
)
xcmRsrcGeneralRsrcTypeAccept.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmRsrcGeneralRsrcTypeAccept.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralRsrcTypeAccept.setReference("""\
See: 'XcmRsrcType' in XCMI Document Resources TC; 'hrPrinterDetectedErrorState'
in IETF Host Resources MIB (RFC 1514/2790); Section 7.1.4 'The BITS construct'
in IETF SMIv2 (RFC 2578); Section 8 'Serialization using the BER' in IETF
Transport Mappings for SNMPv2 (RFC 1908).
""")
if mibBuilder.loadTexts:
    xcmRsrcGeneralRsrcTypeAccept.setDescription("""\
Indicates all of the document resource types which are accepted for dynamic
delivery to and use by this host system, specified in a bit-array. Usage: This
bit-array is constructed from the set of supported values from 'XcmRsrcType',
used as powers of 2 with big-endian rules - the high-order bit of the first
octet corresponds to a resource type of '0' (reserved) - the low-order bit of
the first octet corresponds to a resource type of '7'. Similar to the BITS
pseudotype defined in IETF SMIv2 (RFC 2578), which has the same bit ordering
rules but requires definitions for contiguous enumerated bits.
""")


class _XcmRsrcGeneralFontTypeAccept_Type(OctetString):
    """Custom type xcmRsrcGeneralFontTypeAccept based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_XcmRsrcGeneralFontTypeAccept_Type.__name__ = "OctetString"
_XcmRsrcGeneralFontTypeAccept_Object = MibTableColumn
xcmRsrcGeneralFontTypeAccept = _XcmRsrcGeneralFontTypeAccept_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 7),
    _XcmRsrcGeneralFontTypeAccept_Type()
)
xcmRsrcGeneralFontTypeAccept.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmRsrcGeneralFontTypeAccept.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralFontTypeAccept.setReference("""\
See: 'XcmFontType' in XCMI Document Resources TC; 'hrPrinterDetectedErrorState'
in IETF Host Resources MIB (RFC 1514/2790); Section 7.1.4 'The BITS construct'
in IETF SMIv2 (RFC 2578); Section 8 'Serialization using the BER' in IETF
Transport Mappings for SNMPv2 (RFC 1908).
""")
if mibBuilder.loadTexts:
    xcmRsrcGeneralFontTypeAccept.setDescription("""\
Indicates all of the font types which are accepted for dynamic delivery to and
use by this host system, specified in a bit-array. Usage: This bit-array is
constructed from the set of supported values from 'XcmFontType', used as powers
of 2 with big-endian rules - the high-order bit of the first octet corresponds
to a font type of '0' (reserved) - the low-order bit of the first octet
corresponds to a font type of '7'. Similar to the BITS pseudotype defined in
IETF SMIv2 (RFC 2578), which has the same bit ordering rules but requires
definitions for contiguous enumerated bits.
""")


class _XcmRsrcGeneralRsrcTypeSupport_Type(OctetString):
    """Custom type xcmRsrcGeneralRsrcTypeSupport based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_XcmRsrcGeneralRsrcTypeSupport_Type.__name__ = "OctetString"
_XcmRsrcGeneralRsrcTypeSupport_Object = MibTableColumn
xcmRsrcGeneralRsrcTypeSupport = _XcmRsrcGeneralRsrcTypeSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 8),
    _XcmRsrcGeneralRsrcTypeSupport_Type()
)
xcmRsrcGeneralRsrcTypeSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmRsrcGeneralRsrcTypeSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralRsrcTypeSupport.setReference("""\
See: 'XcmRsrcType' in XCMI Document Resources TC; 'hrPrinterDetectedErrorState'
in IETF Host Resources MIB (RFC 1514/2790); Section 7.1.4 'The BITS construct'
in IETF SMIv2 (RFC 2578); Section 8 'Serialization using the BER' in IETF
Transport Mappings for SNMPv2 (RFC 1908).
""")
if mibBuilder.loadTexts:
    xcmRsrcGeneralRsrcTypeSupport.setDescription("""\
Indicates all of the document resource types which are supported for use by
this host system, specified in a bit-array. Usage: This bit-array is
constructed from the set of supported values from 'XcmRsrcType', used as powers
of 2 with big-endian rules - the high-order bit of the first octet corresponds
to a resource type of '0' (reserved) - the low-order bit of the first octet
corresponds to a resource type of '7'. Similar to the BITS pseudotype defined
in IETF SMIv2 (RFC 2578), which has the same bit ordering rules but requires
definitions for contiguous enumerated bits.
""")


class _XcmRsrcGeneralFontTypeSupport_Type(OctetString):
    """Custom type xcmRsrcGeneralFontTypeSupport based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_XcmRsrcGeneralFontTypeSupport_Type.__name__ = "OctetString"
_XcmRsrcGeneralFontTypeSupport_Object = MibTableColumn
xcmRsrcGeneralFontTypeSupport = _XcmRsrcGeneralFontTypeSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 1, 1, 1, 9),
    _XcmRsrcGeneralFontTypeSupport_Type()
)
xcmRsrcGeneralFontTypeSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmRsrcGeneralFontTypeSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralFontTypeSupport.setReference("""\
See: 'XcmFontType' in XCMI Document Resources TC; 'hrPrinterDetectedErrorState'
in IETF Host Resources MIB (RFC 1514/2790); Section 7.1.4 'The BITS construct'
in IETF SMIv2 (RFC 2578); Section 8 'Serialization using the BER' in IETF
Transport Mappings for SNMPv2 (RFC 1908).
""")
if mibBuilder.loadTexts:
    xcmRsrcGeneralFontTypeSupport.setDescription("""\
Indicates all of the font types which are supported for use by this host
system, specified in a bit-array. Usage: This bit-array is constructed from the
set of supported values from 'XcmFontType', used as powers of 2 with big-endian
rules - the high-order bit of the first octet corresponds to a font type of '0'
(reserved) - the low-order bit of the first octet corresponds to a font type of
'7'. Similar to the BITS pseudotype defined in IETF SMIv2 (RFC 2578), which has
the same bit ordering rules but requires definitions for contiguous enumerated
bits.
""")
_XcmRsrcMIBConformance_ObjectIdentity = ObjectIdentity
xcmRsrcMIBConformance = _XcmRsrcMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 2)
)
_XcmRsrcMIBGroups_ObjectIdentity = ObjectIdentity
xcmRsrcMIBGroups = _XcmRsrcMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 2, 2)
)
_XcmRsrcInfo_ObjectIdentity = ObjectIdentity
xcmRsrcInfo = _XcmRsrcInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3)
)
_XcmRsrcTable_Object = MibTable
xcmRsrcTable = _XcmRsrcTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1)
)
if mibBuilder.loadTexts:
    xcmRsrcTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcTable.setDescription("""\
This table should contain an entry for each unique resource available in the
printer or multi-functional device.
""")
_XcmRsrcEntry_Object = MibTableRow
xcmRsrcEntry = _XcmRsrcEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1)
)
xcmRsrcEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmRsrcIndex"),
)
if mibBuilder.loadTexts:
    xcmRsrcEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcEntry.setDescription("""\
Entries exist in the table for each available resource on each present device.
""")
_XcmRsrcIndex_Type = Ordinal32
_XcmRsrcIndex_Object = MibTableColumn
xcmRsrcIndex = _XcmRsrcIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 1),
    _XcmRsrcIndex_Type()
)
xcmRsrcIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmRsrcIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcIndex.setDescription("""\
A unique value for each available resource on each present device. These values
may change upon addition and deletion of a resource; however, index values
should not change for existing resources at least within a power cycle; and
index values should not be re-used for different resources at least within a
power cycle.
""")
_XcmRsrcRowStatus_Type = RowStatus
_XcmRsrcRowStatus_Object = MibTableColumn
xcmRsrcRowStatus = _XcmRsrcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 2),
    _XcmRsrcRowStatus_Type()
)
xcmRsrcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcRowStatus.setDescription("""\
Manages the status of this conceptual row in the xcmRsrcTable. Note that the
status of a row in the table should reflect the status of the corresponding
resource, not actually drive the status of the resource; in particular,
removing a row from the table should not itself cause the removal of the
corresponding resource from the device.
""")


class _XcmRsrcType_Type(XcmRsrcType):
    """Custom type xcmRsrcType based on XcmRsrcType"""


_XcmRsrcType_Object = MibTableColumn
xcmRsrcType = _XcmRsrcType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 3),
    _XcmRsrcType_Type()
)
xcmRsrcType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcType.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcType.setDescription("""\
The type of this resource, from the given enumeration.
""")


class _XcmRsrcInterpreterLangFamily_Type(XcmPrtInterpreterLangFamily):
    """Custom type xcmRsrcInterpreterLangFamily based on XcmPrtInterpreterLangFamily"""


_XcmRsrcInterpreterLangFamily_Object = MibTableColumn
xcmRsrcInterpreterLangFamily = _XcmRsrcInterpreterLangFamily_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 4),
    _XcmRsrcInterpreterLangFamily_Type()
)
xcmRsrcInterpreterLangFamily.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcInterpreterLangFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcInterpreterLangFamily.setDescription("""\
The print interpreter language or other family of imaging mechanism with which
this resource is associated, from the given enumeration.
""")
_XcmRsrcName_Type = CodeIndexedStringIndex
_XcmRsrcName_Object = MibTableColumn
xcmRsrcName = _XcmRsrcName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 5),
    _XcmRsrcName_Type()
)
xcmRsrcName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcName.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcName.setDescription("""\
The resource name, the human-readable name usually used to identify the
resource by and to the device. Being of type CodeIndexedString, the resource
name may be present in multiple character sets, although it will commonly be
present in only one preferred character set, e.g. only in ASCII for the name of
a PostScript font. For a font resource, the resource name is the name of the
font, the deliverable resource which informs how to image the included set of
characters. The font is generally named in accord with the page description
language or other imaging mechanism with which the font is associated. Often
but not always, the font's name is the same as or similar to the name of the
font's typeface, its design. Typical PostScript font names include 'Helvetica'
(i.e. the medium, upright version) and 'Times-BoldItalic'. Typical PCL font
names include 'Courier10' or 'TmsRmn'. However, it should be noted that PCL
font names are normally just comments, not used for machine identification of
the font resource.
""")
_XcmRsrcDescription_Type = CodeIndexedStringIndex
_XcmRsrcDescription_Object = MibTableColumn
xcmRsrcDescription = _XcmRsrcDescription_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 6),
    _XcmRsrcDescription_Type()
)
xcmRsrcDescription.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcDescription.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcDescription.setDescription("""\
A description of the resource, as complete as practical, including resource
type and sub-type and other significant attributes. For example, 'PostScript
Type 1 font for Times Bold Italic'.
""")
_XcmRsrcCopyright_Type = CodeIndexedStringIndex
_XcmRsrcCopyright_Object = MibTableColumn
xcmRsrcCopyright = _XcmRsrcCopyright_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 7),
    _XcmRsrcCopyright_Type()
)
xcmRsrcCopyright.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcCopyright.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcCopyright.setDescription("""\
A human readable copyright message for the resource, e.g. as may be required by
the resource's licensor. May also be null, or indicate that no rights are
claimed, e.g. 'public domain'.
""")


class _XcmRsrcPersistence_Type(XcmRsrcPersistence):
    """Custom type xcmRsrcPersistence based on XcmRsrcPersistence"""


_XcmRsrcPersistence_Object = MibTableColumn
xcmRsrcPersistence = _XcmRsrcPersistence_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 8),
    _XcmRsrcPersistence_Type()
)
xcmRsrcPersistence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcPersistence.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcPersistence.setDescription("""\
The persistence of this resource, from the given enumeration.
""")
_XcmRsrcHrStorageIndex_Type = Cardinal32
_XcmRsrcHrStorageIndex_Object = MibTableColumn
xcmRsrcHrStorageIndex = _XcmRsrcHrStorageIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 9),
    _XcmRsrcHrStorageIndex_Type()
)
xcmRsrcHrStorageIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcHrStorageIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcHrStorageIndex.setReference("""\
See: 'hrStorageIndex' in IETF Host Resources MIB (RFC 1514, September 1993) on
page 8 - which indexes the Host Resources Storage Group (mandatory for all host
systems in HR MIB).
""")
if mibBuilder.loadTexts:
    xcmRsrcHrStorageIndex.setDescription("""\
The hrStorageIndex of the storage device or other storage resource which
contains this document resource. A hrStorageIndex points to a hrStorageEntry in
the hrStorageTable in the Host Resource MIB. Each hrStorageEntry is a sequence
of hrStorageIndex, hrStorageType, hrStorageDescr, hrStorageAllocationUnits,
hrStorageSize, hrStorageUsed, hrStorageAllocationFailures. The hrStorageType
includes hrStorageOther, hrStorageRam, hrStorageVirtualMemory,
hrStorageFixedDisk, hrStorageRemovableDisk, hrStorageFloppyDisk. A 0 index
value indicates no hrStorageEntry.
""")


class _XcmRsrcSizeHigh_Type(Integer64High):
    """Custom type xcmRsrcSizeHigh based on Integer64High"""
    defaultValue = -1


_XcmRsrcSizeHigh_Object = MibTableColumn
xcmRsrcSizeHigh = _XcmRsrcSizeHigh_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 10),
    _XcmRsrcSizeHigh_Type()
)
xcmRsrcSizeHigh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcSizeHigh.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcSizeHigh.setDescription("""\
The high-order part of the data storage size of this document resource itself,
in units of bytes. A xcmRsrcSizeHigh value of -1 indicates unknown size.
""")
_XcmRsrcSizeLow_Type = Integer64Low
_XcmRsrcSizeLow_Object = MibTableColumn
xcmRsrcSizeLow = _XcmRsrcSizeLow_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 11),
    _XcmRsrcSizeLow_Type()
)
xcmRsrcSizeLow.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcSizeLow.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcSizeLow.setDescription("""\
The low-order part of the data storage size of this document resource itself,
in units of bytes. A xcmRsrcSizeHigh value of -1 indicates unknown size.
""")
_XcmRsrcID_Type = CodeIndexedStringIndex
_XcmRsrcID_Object = MibTableColumn
xcmRsrcID = _XcmRsrcID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 12),
    _XcmRsrcID_Type()
)
xcmRsrcID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcID.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcID.setDescription("""\
An ID, or identifier, for the resource, complementary to the resource name, as
appropriate to the resource type and sub-type. For example, for a PostScript
font or PCL font, this resource ID would be the PostScript or PCL font ID.
Where the ID is inherently an integer or other number, e.g. as for a PCL font
ID, it is nonetheless represented here as a string, e.g. '253'.
""")
_XcmRsrcVersion_Type = CodeIndexedStringIndex
_XcmRsrcVersion_Object = MibTableColumn
xcmRsrcVersion = _XcmRsrcVersion_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 1, 1, 13),
    _XcmRsrcVersion_Type()
)
xcmRsrcVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmRsrcVersion.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcVersion.setDescription("""\
The version of the resource, as appropriate to the resource type and sub-type.
Where the version is inherently an integer or other number, it is nonetheless
represented here as a string, e.g. '3'.
""")
_XcmRsrcV1EventOID_ObjectIdentity = ObjectIdentity
xcmRsrcV1EventOID = _XcmRsrcV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 2)
)
if mibBuilder.loadTexts:
    xcmRsrcV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever a
resource entry or a subordinate entry changes. See SNMPv2 trap definition
'xcmRsrcV2Event' below for 'special semantics'.
""")
_XcmRsrcV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmRsrcV2EventPrefix = _XcmRsrcV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 2, 0)
)
_XcmFontInfo_ObjectIdentity = ObjectIdentity
xcmFontInfo = _XcmFontInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4)
)
_XcmFontTable_Object = MibTable
xcmFontTable = _XcmFontTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1)
)
if mibBuilder.loadTexts:
    xcmFontTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontTable.setDescription("""\
This table should contain an entry for each unique font available in the
device. If a font is available to multiple interpreters, there should be
multiple entries for that font, one per interpreter.
""")
_XcmFontEntry_Object = MibTableRow
xcmFontEntry = _XcmFontEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1, 1)
)
xcmFontEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmRsrcIndex"),
)
if mibBuilder.loadTexts:
    xcmFontEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontEntry.setDescription("""\
Entries exist in the table for each font available to an interpreter in the
device.
""")
_XcmFontRowStatus_Type = RowStatus
_XcmFontRowStatus_Object = MibTableColumn
xcmFontRowStatus = _XcmFontRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1, 1, 1),
    _XcmFontRowStatus_Type()
)
xcmFontRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontRowStatus.setDescription("""\
Manages the status of this conceptual row in the xcmFontTable.
""")


class _XcmFontType_Type(XcmFontType):
    """Custom type xcmFontType based on XcmFontType"""


_XcmFontType_Object = MibTableColumn
xcmFontType = _XcmFontType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1, 1, 2),
    _XcmFontType_Type()
)
xcmFontType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontType.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontType.setDescription("""\
The type of this font, from the given enumeration.
""")


class _XcmFontPointsMinNumerator_Type(Integer32):
    """Custom type xcmFontPointsMinNumerator based on Integer32"""
    defaultValue = -2


_XcmFontPointsMinNumerator_Object = MibTableColumn
xcmFontPointsMinNumerator = _XcmFontPointsMinNumerator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1, 1, 3),
    _XcmFontPointsMinNumerator_Type()
)
xcmFontPointsMinNumerator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPointsMinNumerator.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPointsMinNumerator.setDescription("""\
The numerator of a fraction indicating the body size, or the minimum of the
supported range of body sizes, of the font. The size is in units of printer's
points, which units are here considered to be exactly 1/72 of an inch. Values
of -1 indicate 'infinite,' while values of -2 indicate 'unknown.'
""")


class _XcmFontPointsMaxNumerator_Type(Integer32):
    """Custom type xcmFontPointsMaxNumerator based on Integer32"""
    defaultValue = -2


_XcmFontPointsMaxNumerator_Object = MibTableColumn
xcmFontPointsMaxNumerator = _XcmFontPointsMaxNumerator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1, 1, 4),
    _XcmFontPointsMaxNumerator_Type()
)
xcmFontPointsMaxNumerator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPointsMaxNumerator.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPointsMaxNumerator.setDescription("""\
The numerator of a fraction indicating the body size, or the maximum of the
supported range of body sizes, of the font. The size is in units of printer's
points, which units are here considered to be exactly 1/72 of an inch. Values
of -1 indicate 'infinite,' while values of -2 indicate 'unknown.'
""")


class _XcmFontPointsDenominator_Type(Integer32):
    """Custom type xcmFontPointsDenominator based on Integer32"""
    defaultValue = -2


_XcmFontPointsDenominator_Object = MibTableColumn
xcmFontPointsDenominator = _XcmFontPointsDenominator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1, 1, 5),
    _XcmFontPointsDenominator_Type()
)
xcmFontPointsDenominator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPointsDenominator.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPointsDenominator.setDescription("""\
The denominator of both minimum and maximum body size. The denominator is
typically chosen to give a convenient scale and precision for expressing the
sizes. Values of -1 indicate 'infinite,' while values of -2 indicate 'unknown.'
""")


class _XcmFontSpacing_Type(XcmFontSpacing):
    """Custom type xcmFontSpacing based on XcmFontSpacing"""


_XcmFontSpacing_Object = MibTableColumn
xcmFontSpacing = _XcmFontSpacing_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1, 1, 6),
    _XcmFontSpacing_Type()
)
xcmFontSpacing.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontSpacing.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontSpacing.setDescription("""\
The kind of spacing of the characters in this font, from the given enumeration.
""")


class _XcmFontCharSet_Type(IANACharset):
    """Custom type xcmFontCharSet based on IANACharset"""


_XcmFontCharSet_Object = MibTableColumn
xcmFontCharSet = _XcmFontCharSet_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 4, 1, 1, 7),
    _XcmFontCharSet_Type()
)
xcmFontCharSet.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontCharSet.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontCharSet.setDescription("""\
The character set of this font resource. The value is the enum for the IANA-
registered coded character set, per the IANACharset textual-convention in the
Printer MIB (RFC 1759). For more info. about character sets and coded character
sets, see RFCs 2277 and 2278.
""")
_XcmFontPCLInfo_ObjectIdentity = ObjectIdentity
xcmFontPCLInfo = _XcmFontPCLInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5)
)
_XcmFontPCLTable_Object = MibTable
xcmFontPCLTable = _XcmFontPCLTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1)
)
if mibBuilder.loadTexts:
    xcmFontPCLTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLTable.setDescription("""\
This table should contain an entry for each unique font available in the
device. If a font is available to multiple interpreters, there should be
multiple entries for that font here, one entry per interpreter.
""")
_XcmFontPCLEntry_Object = MibTableRow
xcmFontPCLEntry = _XcmFontPCLEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1)
)
xcmFontPCLEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmRsrcIndex"),
)
if mibBuilder.loadTexts:
    xcmFontPCLEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLEntry.setDescription("""\
Entries exist in the table for each PCL font.
""")
_XcmFontPCLRowStatus_Type = RowStatus
_XcmFontPCLRowStatus_Object = MibTableColumn
xcmFontPCLRowStatus = _XcmFontPCLRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1, 1),
    _XcmFontPCLRowStatus_Type()
)
xcmFontPCLRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPCLRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLRowStatus.setDescription("""\
Manages the status of this conceptual row in the xcmFontPCLTable.
""")


class _XcmFontPCLTypefaceValue_Type(Integer32):
    """Custom type xcmFontPCLTypefaceValue based on Integer32"""
    defaultValue = -1


_XcmFontPCLTypefaceValue_Object = MibTableColumn
xcmFontPCLTypefaceValue = _XcmFontPCLTypefaceValue_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1, 2),
    _XcmFontPCLTypefaceValue_Type()
)
xcmFontPCLTypefaceValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPCLTypefaceValue.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLTypefaceValue.setReference("""\
See: 'PCL 5 Printer Language Technical Reference Manual' and 'PCL 5 Comparision
Guide' by Hewlett-Packard Corporation.
""")
if mibBuilder.loadTexts:
    xcmFontPCLTypefaceValue.setDescription("""\
The integer value specifying the PCL 'typeface' (really family) of the font.
For example, 3 normally indicates Courier, 4 indicates 'Helv'. A value of -1
indicates unknown typeface value.
""")


class _XcmFontPCLSymbolSetValue_Type(Integer32):
    """Custom type xcmFontPCLSymbolSetValue based on Integer32"""
    defaultValue = -1


_XcmFontPCLSymbolSetValue_Object = MibTableColumn
xcmFontPCLSymbolSetValue = _XcmFontPCLSymbolSetValue_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1, 3),
    _XcmFontPCLSymbolSetValue_Type()
)
xcmFontPCLSymbolSetValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPCLSymbolSetValue.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLSymbolSetValue.setReference("""\
See: 'PCL 5 Printer Language Technical Reference Manual' and 'PCL 5 Comparision
Guide' by Hewlett-Packard Corporation.
""")
if mibBuilder.loadTexts:
    xcmFontPCLSymbolSetValue.setDescription("""\
The integer value specifying the PCL symbol set of the font. For example, 21
normally indicates ASCII, 277 indicates the HP Roman-8 set. A value of -1
indicates unknown symbol set value.
""")


class _XcmFontPCLStyle_Type(XcmFontPCLStyle):
    """Custom type xcmFontPCLStyle based on XcmFontPCLStyle"""


_XcmFontPCLStyle_Object = MibTableColumn
xcmFontPCLStyle = _XcmFontPCLStyle_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1, 4),
    _XcmFontPCLStyle_Type()
)
xcmFontPCLStyle.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPCLStyle.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLStyle.setReference("""\
See: 'PCL 5 Printer Language Technical Reference Manual' and 'PCL 5 Comparision
Guide' by Hewlett-Packard Corporation.
""")
if mibBuilder.loadTexts:
    xcmFontPCLStyle.setDescription("""\
The style of the font, from the given enumeration.
""")


class _XcmFontPCLPitchMinNumerator_Type(Integer32):
    """Custom type xcmFontPCLPitchMinNumerator based on Integer32"""
    defaultValue = -2


_XcmFontPCLPitchMinNumerator_Object = MibTableColumn
xcmFontPCLPitchMinNumerator = _XcmFontPCLPitchMinNumerator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1, 5),
    _XcmFontPCLPitchMinNumerator_Type()
)
xcmFontPCLPitchMinNumerator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPCLPitchMinNumerator.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLPitchMinNumerator.setDescription("""\
The numerator of a fraction indicating the pitch, or the minimum of the
supported range of pitches, of the font. The pitch is in units of characters
per inch. Values of -1 indicate 'infinite,' while values of -2 indicate
'unknown.'
""")


class _XcmFontPCLPitchMaxNumerator_Type(Integer32):
    """Custom type xcmFontPCLPitchMaxNumerator based on Integer32"""
    defaultValue = -2


_XcmFontPCLPitchMaxNumerator_Object = MibTableColumn
xcmFontPCLPitchMaxNumerator = _XcmFontPCLPitchMaxNumerator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1, 6),
    _XcmFontPCLPitchMaxNumerator_Type()
)
xcmFontPCLPitchMaxNumerator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPCLPitchMaxNumerator.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLPitchMaxNumerator.setDescription("""\
The numerator of a fraction indicating the pitch, or the maximum of the
supported range of pitches, of the font. The pitch is in units of characters
per inch. Values of -1 indicate 'infinite,' while values of -2 indicate
'unknown.'
""")


class _XcmFontPCLPitchDenominator_Type(Integer32):
    """Custom type xcmFontPCLPitchDenominator based on Integer32"""
    defaultValue = -2


_XcmFontPCLPitchDenominator_Object = MibTableColumn
xcmFontPCLPitchDenominator = _XcmFontPCLPitchDenominator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1, 7),
    _XcmFontPCLPitchDenominator_Type()
)
xcmFontPCLPitchDenominator.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPCLPitchDenominator.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLPitchDenominator.setDescription("""\
The denominator of both minimum and maximum pitch. The denominator is typically
chosen to give a convenient scale and precision for expressing the pitches.
Values of -1 indicate 'infinite,' while values of -2 indicate 'unknown.'
""")


class _XcmFontPCLStrokeWeight_Type(XcmFontPCLStrokeWeight):
    """Custom type xcmFontPCLStrokeWeight based on XcmFontPCLStrokeWeight"""


_XcmFontPCLStrokeWeight_Object = MibTableColumn
xcmFontPCLStrokeWeight = _XcmFontPCLStrokeWeight_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 5, 1, 1, 8),
    _XcmFontPCLStrokeWeight_Type()
)
xcmFontPCLStrokeWeight.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmFontPCLStrokeWeight.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLStrokeWeight.setReference("""\
See: 'PCL 5 Printer Language Technical Reference Manual' and 'PCL 5 Comparision
Guide' by Hewlett-Packard Corporation.
""")
if mibBuilder.loadTexts:
    xcmFontPCLStrokeWeight.setDescription("""\
The PCL stroke weight of the font, from the given enumeration.
""")
_XcmJobMonTC_ObjectIdentity = ObjectIdentity
xcmJobMonTC = _XcmJobMonTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58)
)
if mibBuilder.loadTexts:
    xcmJobMonTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonTC.setDescription("""\
 File: 40jobtc.dfm, .mib, .pdf, .txt Version: 5.11.pub This textual-convention
module defines textual- conventions for use with the Job Monitoring MIB,
module: XEROX-JOB-MONITORING-MIB. Also the explanatory material with this
module explains the Job Monitoring MIB. These textual-conventions and
explanations are in a separate module from the Job Monitoring MIB, so that they
may be republished when additional enums are added or more explanatory material
is added without needing to republish the Job Monitoring MIB, thus increasing
the stability of the Job Monitoring MIB. Copyright 1996-2002 Xerox Corporation.
All Rights Reserved.
""")
_XcmJobServiceTypesOID_ObjectIdentity = ObjectIdentity
xcmJobServiceTypesOID = _XcmJobServiceTypesOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2)
)
if mibBuilder.loadTexts:
    xcmJobServiceTypesOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceTypesOID.setDescription("""\
The root of all job service type OIDs defined in the Job Monitoring MIB TC.
Also use these same OIDs for Xerox extensions to ISO DPA.
""")
_XcmJobServiceScanToFileOID_ObjectIdentity = ObjectIdentity
xcmJobServiceScanToFileOID = _XcmJobServiceScanToFileOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 1)
)
if mibBuilder.loadTexts:
    xcmJobServiceScanToFileOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceScanToFileOID.setDescription("""\
Scan-to-file The scan-to-file job service scans one or more documents and
stores the result in one or more (1) local files, (2) files in a distributed
file system or (3) files in a document repository, depending on the
prescriptive instructions submitted with the job service request.
""")
_XcmJobServiceScanToPrintOID_ObjectIdentity = ObjectIdentity
xcmJobServiceScanToPrintOID = _XcmJobServiceScanToPrintOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 2)
)
if mibBuilder.loadTexts:
    xcmJobServiceScanToPrintOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceScanToPrintOID.setReference("""\
See: 'xcmJobServiceCopyOID' below
""")
if mibBuilder.loadTexts:
    xcmJobServiceScanToPrintOID.setDescription("""\
Scan-to-print The scan-to-print job service scans one or more documents and
prints the results on a local printer or on a network printer, depending on the
prescriptive instructions submitted with the job service request.
""")
_XcmJobServiceScanToFaxOID_ObjectIdentity = ObjectIdentity
xcmJobServiceScanToFaxOID = _XcmJobServiceScanToFaxOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 3)
)
if mibBuilder.loadTexts:
    xcmJobServiceScanToFaxOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceScanToFaxOID.setDescription("""\
Scan-to-fax The scan-to-fax job service scans one or more documents and faxes
the results using a local fax or on a network fax, depending on the
prescriptive instructions submitted with the job service request.
""")
_XcmJobServiceScanToMailListOID_ObjectIdentity = ObjectIdentity
xcmJobServiceScanToMailListOID = _XcmJobServiceScanToMailListOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 4)
)
if mibBuilder.loadTexts:
    xcmJobServiceScanToMailListOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceScanToMailListOID.setDescription("""\
Scan-to-mail-list The scan-to-mail-list job service scans one or more documents
and distributes the results using the distribution list specified by the
prescriptive instructions submitted with the job service request.
""")
_XcmJobServiceFaxToFileOID_ObjectIdentity = ObjectIdentity
xcmJobServiceFaxToFileOID = _XcmJobServiceFaxToFileOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 5)
)
if mibBuilder.loadTexts:
    xcmJobServiceFaxToFileOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceFaxToFileOID.setDescription("""\
Fax-to-file The fax-to-file job service accepts one or more documents via
inbound fax and stores the result in one or more: (1) local files, (2) files in
a distributed file system or (3) files in a document repository, depending on
the prescriptive instructions submitted with the job service request.
""")
_XcmJobServiceFaxToPrintOID_ObjectIdentity = ObjectIdentity
xcmJobServiceFaxToPrintOID = _XcmJobServiceFaxToPrintOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 6)
)
if mibBuilder.loadTexts:
    xcmJobServiceFaxToPrintOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceFaxToPrintOID.setDescription("""\
Fax-to-print The fax-to-print job service accepts one or more documents via
inbound fax and prints the results on a local printer or on a network printer,
depending on the prescriptive instructions submitted with the job service
request.
""")
_XcmJobServiceFaxToMailListOID_ObjectIdentity = ObjectIdentity
xcmJobServiceFaxToMailListOID = _XcmJobServiceFaxToMailListOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 7)
)
if mibBuilder.loadTexts:
    xcmJobServiceFaxToMailListOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceFaxToMailListOID.setDescription("""\
Fax-to-mail-list The fax-to-mail-list job service accepts one or more documents
via inbound fax and distributes the results using the distribution list
specified by the prescriptive instructions submitted with the job service
request.
""")
_XcmJobServicePrintOID_ObjectIdentity = ObjectIdentity
xcmJobServicePrintOID = _XcmJobServicePrintOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 8)
)
if mibBuilder.loadTexts:
    xcmJobServicePrintOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServicePrintOID.setDescription("""\
Print The print job service accepts one or more documents submitted with the
job print service request, referenced from the job request in a distributed
file system or document repository and prints on a network printer, depending
on the prescriptive instructions submitted with the job service request.
""")
_XcmJobServiceFileToFaxOID_ObjectIdentity = ObjectIdentity
xcmJobServiceFileToFaxOID = _XcmJobServiceFileToFaxOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 9)
)
if mibBuilder.loadTexts:
    xcmJobServiceFileToFaxOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceFileToFaxOID.setDescription("""\
File-to-fax The file-to-fax job service accepts one or more documents submitted
with the job print service request, referenced from the job request in a
distributed file system or document repository and faxes the results using a
local fax or on a network fax, depending on the prescriptive instructions
submitted with the job service request.
""")
_XcmJobServiceFileToMailListOID_ObjectIdentity = ObjectIdentity
xcmJobServiceFileToMailListOID = _XcmJobServiceFileToMailListOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 10)
)
if mibBuilder.loadTexts:
    xcmJobServiceFileToMailListOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceFileToMailListOID.setDescription("""\
File-to-mail-list The file-to-mail-list job service accepts one or more
documents submitted with the job service request, referenced from the job
request in a distributed file system or document repository and distributes the
results using the distribution list specified by the prescriptive instructions
submitted with the job service request. The file-to-mail-list service permits a
user to compose a compound job whose sub-job produces a file, such as a scan-
to-file, and whose subsequent sub-jobs use the file as input, such as a sub-job
to file-to-mail-list and a second (parallel) sub-job to print from the same
file.
""")
_XcmJobServiceCopyOID_ObjectIdentity = ObjectIdentity
xcmJobServiceCopyOID = _XcmJobServiceCopyOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 11)
)
if mibBuilder.loadTexts:
    xcmJobServiceCopyOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceCopyOID.setReference("""\
See: 'xcmJobServiceScanToPrintOID' above
""")
if mibBuilder.loadTexts:
    xcmJobServiceCopyOID.setDescription("""\
Copy The copy job service reads images (via xerography, scanner, etc.) and
writes (prints) those images (with a pipeline delay of zero or more images) on
a local marker sub-unit (copy service need NOT write a disk or other secondary
storage file of the copy images). Compare with 'xcmJobServiceScanToPrint'
(strictly used for digital scanners - scan to print service shall ALWAYS write
a disk or other secondary storage file of the whole document, i.e., the set of
copy images). The key distinction, from an Image Processing point of is that,
for a copy (or local copy) job the IIT (input - scan) and IOT (output - marker)
are WELL-TUNED with respect to each other to produce the best quality and the
best performance. Whereas for ScantoPrint the target IOT (or the its
capabilities) are not assumed to be known at the time scanning and in order to
achieve best quality, there is often an additional step of image processing
that the systems needs to go through (often called Image Interoperability
Services). Usage: A copy job service shall ALWAYS expose an 'xcmHrDeviceCopier'
(scanner and marker are invisible) in the IETF HR MIB, XCMI HRX MIB, and XCMI
Job Monitoring MIB. Usage: A scan to print job service shall ALWAYS expose an
'xcmHrDeviceScanner' and an 'hrDevicePrinter' (marker) in the IETF HR MIB, XCMI
HRX MIB, and XCMI Job Monitoring MIB.
""")
_XcmJobServiceFileToFileOID_ObjectIdentity = ObjectIdentity
xcmJobServiceFileToFileOID = _XcmJobServiceFileToFileOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 2, 12)
)
if mibBuilder.loadTexts:
    xcmJobServiceFileToFileOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceFileToFileOID.setDescription("""\
File-to-file The file-to-file job service accepts one or more documents
submitted with the job print service request, referenced from the job request
in a distributed file system or document repository and stores the result in
one or more: (1) local files, (2) files in a distributed file system or (3)
files in a document repository, depending on the prescriptive instructions
submitted with the job service request. The initial intent of this job service
is support the transfer of a file to a device's hard drive. When the file
transfer is complete, the file-to-file job is complete. It is expected that a
user will eventually process the file from the device hard drive, but that
action starts a new job. This service might be used in the processing of a
secure-print action.
""")
_XCmJobMonTCDummy_ObjectIdentity = ObjectIdentity
xCmJobMonTCDummy = _XCmJobMonTCDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999)
)
_XCmJobMonTCJobServiceTypeOID_Type = XcmJMJobServiceTypeOID
_XCmJobMonTCJobServiceTypeOID_Object = MibScalar
xCmJobMonTCJobServiceTypeOID = _XCmJobMonTCJobServiceTypeOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 1),
    _XCmJobMonTCJobServiceTypeOID_Type()
)
xCmJobMonTCJobServiceTypeOID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCJobServiceTypeOID.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCJobServiceTypeOID.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCJobState_Type = XcmJMJobState
_XCmJobMonTCJobState_Object = MibScalar
xCmJobMonTCJobState = _XCmJobMonTCJobState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 2),
    _XCmJobMonTCJobState_Type()
)
xCmJobMonTCJobState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCJobState.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCJobState.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCJobStateReasons_Type = XcmJMJobStateReasons
_XCmJobMonTCJobStateReasons_Object = MibScalar
xCmJobMonTCJobStateReasons = _XCmJobMonTCJobStateReasons_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 3),
    _XCmJobMonTCJobStateReasons_Type()
)
xCmJobMonTCJobStateReasons.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCJobStateReasons.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCJobStateReasons.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCJobXStateReasons_Type = XcmJMJobXStateReasons
_XCmJobMonTCJobXStateReasons_Object = MibScalar
xCmJobMonTCJobXStateReasons = _XCmJobMonTCJobXStateReasons_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 4),
    _XCmJobMonTCJobXStateReasons_Type()
)
xCmJobMonTCJobXStateReasons.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCJobXStateReasons.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCJobXStateReasons.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCJobX2StateReasons_Type = XcmJMJobX2StateReasons
_XCmJobMonTCJobX2StateReasons_Object = MibScalar
xCmJobMonTCJobX2StateReasons = _XCmJobMonTCJobX2StateReasons_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 5),
    _XCmJobMonTCJobX2StateReasons_Type()
)
xCmJobMonTCJobX2StateReasons.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCJobX2StateReasons.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCJobX2StateReasons.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCDocType_Type = XcmJMDocType
_XCmJobMonTCDocType_Object = MibScalar
xCmJobMonTCDocType = _XCmJobMonTCDocType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 6),
    _XCmJobMonTCDocType_Type()
)
xCmJobMonTCDocType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCDocType.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCDocType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCDocFileNameType_Type = XcmJMDocFileNameType
_XCmJobMonTCDocFileNameType_Object = MibScalar
xCmJobMonTCDocFileNameType = _XCmJobMonTCDocFileNameType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 7),
    _XCmJobMonTCDocFileNameType_Type()
)
xCmJobMonTCDocFileNameType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCDocFileNameType.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCDocFileNameType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCDocState_Type = XcmJMDocState
_XCmJobMonTCDocState_Object = MibScalar
xCmJobMonTCDocState = _XCmJobMonTCDocState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 8),
    _XCmJobMonTCDocState_Type()
)
xCmJobMonTCDocState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCDocState.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCDocState.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCDocOutputMethod_Type = XcmJMDocOutputMethod
_XCmJobMonTCDocOutputMethod_Object = MibScalar
xCmJobMonTCDocOutputMethod = _XCmJobMonTCDocOutputMethod_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 9),
    _XCmJobMonTCDocOutputMethod_Type()
)
xCmJobMonTCDocOutputMethod.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCDocOutputMethod.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCDocOutputMethod.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCGroupSupport_Type = XcmJMGroupSupport
_XCmJobMonTCGroupSupport_Object = MibScalar
xCmJobMonTCGroupSupport = _XCmJobMonTCGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 10),
    _XCmJobMonTCGroupSupport_Type()
)
xCmJobMonTCGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCImpsCountType_Type = XcmJMImpsCountType
_XCmJobMonTCImpsCountType_Object = MibScalar
xCmJobMonTCImpsCountType = _XCmJobMonTCImpsCountType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 11),
    _XCmJobMonTCImpsCountType_Type()
)
xCmJobMonTCImpsCountType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCImpsCountType.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCImpsCountType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmJobMonTCMediumType_Type = XcmJMMediumType
_XCmJobMonTCMediumType_Object = MibScalar
xCmJobMonTCMediumType = _XCmJobMonTCMediumType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 58, 999, 12),
    _XCmJobMonTCMediumType_Type()
)
xCmJobMonTCMediumType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmJobMonTCMediumType.setStatus("current")
if mibBuilder.loadTexts:
    xCmJobMonTCMediumType.setDescription("""\
Dummy - DO NOT USE
""")
_XcmJobMonMIB_ObjectIdentity = ObjectIdentity
xcmJobMonMIB = _XcmJobMonMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59)
)
if mibBuilder.loadTexts:
    xcmJobMonMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonMIB.setDescription("""\
 File: 41jobmon.dfm, .mib, .txt, .pdf Version: 4.03.pub This MIB specifies job
and document objects for monitoring print jobs, including accounting, of print
jobs. This MIB does not provide for management and control of print jobs, such
as cancelling or modifying them. If job control is desired, another MIB that
augments this one should be developed. The groups in this MIB are arranged so
that an additional MIB may be developed that supports monitoring of
multifunction jobs (print, scan, FAX, etc.), including scan-only jobs. Such a
MIB is intended to augment this MIB. See the companion Job Monitoring MIB
textual conventions module: XEROX-JOB-MONITORING-TC for the textual conventions
and for an explanation of the use of this MIB (see file 40jobtc.txt). The
specification for many of the objects in this MIB is taken directly from the
ISO 10175 Document Printing Application (DPA) standard, clause 9.2, Job
Attributes and clause 9.3, Document Attributes. Such direct inclusions are
explicitly indicated. However, this MIB is intended to be used with non-DPA
implementations, so only a small set of general DPA attributes have been
included in the Job Monitoring MIB. In addition, a single print-centric group
is included. Finally, some of the ISO DPA specifications have been generalized
so that they may be used with non-print job services. For example, changing the
names and descriptions from 'printer' to 'device'. All such changes to ISO DPA
text are indicated inside square brackets to make it clear how this Job
Monitoring MIB differs from ISO DPA. Copyright 1996-2002 Xerox Corporation. All
Rights Reserved. REFERENCES See 40jobtc.txt for the conformance requirements
and textual conventions for use with this MIB module.
""")
_XcmJobMonBase_ObjectIdentity = ObjectIdentity
xcmJobMonBase = _XcmJobMonBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1)
)
_XcmJobMonBaseTable_Object = MibTable
xcmJobMonBaseTable = _XcmJobMonBaseTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2)
)
if mibBuilder.loadTexts:
    xcmJobMonBaseTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseTable.setDescription("""\
A table of general counters and capabilities for ease of use of the XCMI Job
Monitoring MIB on this host system. Usage: The ONLY valid row in the
'xcmJobMonBaseTable' shall ALWAYS have an 'xcmJobMonBaseIndex' of one ('1').
""")
_XcmJobMonBaseEntry_Object = MibTableRow
xcmJobMonBaseEntry = _XcmJobMonBaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2, 1)
)
xcmJobMonBaseEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmJobMonBaseIndex"),
)
if mibBuilder.loadTexts:
    xcmJobMonBaseEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseEntry.setDescription("""\
An entry of general counters and capabilities for ease of use of the XCMI Job
Monitoring MIB on this host system. Usage: The ONLY valid row in the
'xcmJobMonBaseTable' shall ALWAYS have an 'xcmJobMonBaseIndex' of one ('1').
""")
_XcmJobMonBaseIndex_Type = Ordinal32
_XcmJobMonBaseIndex_Object = MibTableColumn
xcmJobMonBaseIndex = _XcmJobMonBaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2, 1, 1),
    _XcmJobMonBaseIndex_Type()
)
xcmJobMonBaseIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmJobMonBaseIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmJobMonBaseTable'. Usage: The ONLY valid row in the 'xcmJobMonBaseTable'
shall ALWAYS have an 'xcmJobMonBaseIndex' of one ('1').
""")
_XcmJobMonBaseRowStatus_Type = RowStatus
_XcmJobMonBaseRowStatus_Object = MibTableColumn
xcmJobMonBaseRowStatus = _XcmJobMonBaseRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2, 1, 2),
    _XcmJobMonBaseRowStatus_Type()
)
xcmJobMonBaseRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMonBaseRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseRowStatus.setDescription("""\
This object is used to display status of the ONLY valid conceptual row in the
'xcmJobMonBaseTable'. Usage: 'xcmJobMonBaseRowStatus' is 'read-only' because
the ONLY valid conceptual row shall NOT be deleted.
""")


class _XcmJobMonBaseVersionID_Type(ProductID):
    """Custom type xcmJobMonBaseVersionID based on ProductID"""
    defaultValue = "(0, 0)"


_XcmJobMonBaseVersionID_Object = MibTableColumn
xcmJobMonBaseVersionID = _XcmJobMonBaseVersionID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2, 1, 3),
    _XcmJobMonBaseVersionID_Type()
)
xcmJobMonBaseVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMonBaseVersionID.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseVersionID.setReference("""\
See: 'hrSW[Installed|Run]ID' in the Software Installed and Software Running
groups of the IETF HR MIB (RFC 1514).
""")
if mibBuilder.loadTexts:
    xcmJobMonBaseVersionID.setDescription("""\
The software product ID of the SNMP sub-agent which implements the XCMI Job
Monitoring MIB on this host system. Usage: This object shall specify the
software product ID of an SNMP sub-agent (possibly also found in a conceptual
row in the 'hrSWRunTable' and/or 'hrSWInstalledTable' in the IETF HR MIB). This
object shall NOT specify a particular release of the XCMI Job Monitoring MIB,
or the whole host system product. Note: Contrast with 'sysObjectID' for the
whole SNMP agent in the IETF MIB-II (RFC 1213) and 'hrDeviceID' for the whole
device (or whole product, in the case of 'xcmHrDevice...') in the IETF Host
Resources MIB (RFC 1514).
""")


class _XcmJobMonBaseVersionDate_Type(DateAndTime):
    """Custom type xcmJobMonBaseVersionDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmJobMonBaseVersionDate_Object = MibTableColumn
xcmJobMonBaseVersionDate = _XcmJobMonBaseVersionDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2, 1, 4),
    _XcmJobMonBaseVersionDate_Type()
)
xcmJobMonBaseVersionDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMonBaseVersionDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseVersionDate.setReference("""\
See: 'hrSW[Installed|Run]ID' in the Software Installed and Software Running
groups of the IETF HR MIB (RFC 1514).
""")
if mibBuilder.loadTexts:
    xcmJobMonBaseVersionDate.setDescription("""\
The software build date of the SNMP sub-agent which implements the XCMI Job
Monitoring MIB on this host system. Usage: This object shall specify the BUILD
date of the SNMP sub-agent software (not available elsewhere in IETF/XCMI
MIBs). This object shall NOT specify the INSTALL date of the SNMP sub-agent
software on this host system, nor the RESET date. Note: Contrast with
'hrSWInstalledDate' in the Software Installed group of the IETF Host Resources
MIB (RFC 1514), and 'xcmHrDevInfoResetDate' in the Device Info group of the
XCMI Host Resources Extensions MIB.
""")


class _XcmJobMonBaseGroupSupport_Type(XcmJMGroupSupport):
    """Custom type xcmJobMonBaseGroupSupport based on XcmJMGroupSupport"""
    defaultValue = 3


_XcmJobMonBaseGroupSupport_Object = MibTableColumn
xcmJobMonBaseGroupSupport = _XcmJobMonBaseGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2, 1, 5),
    _XcmJobMonBaseGroupSupport_Type()
)
xcmJobMonBaseGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMonBaseGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseGroupSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Job Monitoring MIB groups supported by this management agent
implementation (i.e., version) on this host system, specified in a bit-mask.
Usage: Conforming management agents shall ALWAYS accurately report their
support for XCMI Job Monitoring MIB groups.
""")
_XcmJobMonBaseCreateSupport_Type = XcmJMGroupSupport
_XcmJobMonBaseCreateSupport_Object = MibTableColumn
xcmJobMonBaseCreateSupport = _XcmJobMonBaseCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2, 1, 6),
    _XcmJobMonBaseCreateSupport_Type()
)
xcmJobMonBaseCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMonBaseCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseCreateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Job Monitoring MIB groups supported for dynamic row creation (via
'...RowStatus') by this management agent implementation (i.e., version) on this
host system, specified in a bit-mask. Usage: Conforming management agents shall
ALWAYS accurately report their support for XCMI Job Monitoring MIB groups.
""")
_XcmJobMonBaseUpdateSupport_Type = XcmJMGroupSupport
_XcmJobMonBaseUpdateSupport_Object = MibTableColumn
xcmJobMonBaseUpdateSupport = _XcmJobMonBaseUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 1, 2, 1, 7),
    _XcmJobMonBaseUpdateSupport_Type()
)
xcmJobMonBaseUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMonBaseUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMonBaseUpdateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Job Monitoring MIB groups supported for existing row update (via
SNMP Set-Request PDUs) by this management agent implementation (i.e., version)
on this host system, specified in a bit-mask. Usage: Conforming management
agents shall ALWAYS accurately report their support for XCMI Job Monitoring MIB
groups.
""")
_XcmJobMonMIBConformance_ObjectIdentity = ObjectIdentity
xcmJobMonMIBConformance = _XcmJobMonMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2)
)
_XcmJobMonMIBGroups_ObjectIdentity = ObjectIdentity
xcmJobMonMIBGroups = _XcmJobMonMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3)
)
_XcmJobGenBasic_ObjectIdentity = ObjectIdentity
xcmJobGenBasic = _XcmJobGenBasic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6)
)
_XcmJobGenBasicTable_Object = MibTable
xcmJobGenBasicTable = _XcmJobGenBasicTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1)
)
if mibBuilder.loadTexts:
    xcmJobGenBasicTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenBasicTable.setDescription("""\
A table of general mandatory job information per (logical or physical) device
that is independent of the type of device (printer, scanner, fax, ...) and that
does not require a spooling implementation (though a spooling implementation
shall also implement this group, in which case spooled jobs shall also appear
in the job table). Job information applies to the job as a whole or to all its
documents. The specification for most objects is taken directly from the ISO
10175 Document Printing Application (DPA) standard clause 9.2, Job Attributes.
However, this MIB is intended to be used with non-DPA implementations, so only
a small set of general DPA attributes have been included here.
""")
_XcmJobGenBasicEntry_Object = MibTableRow
xcmJobGenBasicEntry = _XcmJobGenBasicEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1)
)
xcmJobGenBasicEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
)
if mibBuilder.loadTexts:
    xcmJobGenBasicEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenBasicEntry.setDescription("""\
An entry exists in this table for each job in the device, no matter what the
state of the job is. Each device is represented as a separate device entry in
the Host Resources MIB device table as a device of type 'printer', 'scanner',
'fax', .... The management station references each job using the
xcmJobIdentifierOnSystem assigned by the system (printer, server, supervisor,
spooler) that accepted the job submission (by some other protocol).
""")


class _XcmJobIdentifierOnSystem_Type(DisplayString):
    """Custom type xcmJobIdentifierOnSystem based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmJobIdentifierOnSystem_Type.__name__ = "DisplayString"
_XcmJobIdentifierOnSystem_Object = MibTableColumn
xcmJobIdentifierOnSystem = _XcmJobIdentifierOnSystem_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 1),
    _XcmJobIdentifierOnSystem_Type()
)
xcmJobIdentifierOnSystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobIdentifierOnSystem.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobIdentifierOnSystem.setReference("""\
See note on maximum length of trap var bind that xcmJobIdentifierOnSystem
contributes to: 'xcmJobV2AlertPrefixNew' in the Job Alert Group of this MIB.
""")
if mibBuilder.loadTexts:
    xcmJobIdentifierOnSystem.setDescription("""\
The job identifier generated on the system that the agent is instrumenting. The
job identifier is generated by the job service provider when it accepts a
submit job request from a job service requester using whatever job submission
protocol that the job service provider supports. This job identifier is for
each job and sub job submitted. The job service provider promote a simple job
request to a compound job, if the job service needs access to multiple devices,
such as a scanner and a printer or to two printers, or to a printer and a fax.
See the textual conventions for a more complete description of compound jobs.
The xcmJobIdentifierOnSystem is used as one of the indexes into each job and
document table, along with the HrDeviceIndex from the Host Resources MIB which
is an index value for each different job service instance (analogous to each
instance of a logical printer in ISO DPA). NOTE: Different jobs on different
systems may have the same job identifier. Additional information is needed to
make the job identifier unique in the network, such as the server or system
component name. See also xcmJobIdentifierUpstream in this group. ISO DPA: Job-
identifier This attribute provides the job-identifier for this job on the
server. The server shall generate a job-identifier value that is unique on that
server, but need not be unique across the distributed environment. [In other
words, the server's name need not be part of the job-identifier.] The value of
the job-identifier attribute shall be returned by the server as part of the
PrintResult in the first Print operation for the job (see 8.2.1). The client
shall pass its value as part of the PrintArgument in subsequent Print
operations for the same job.
""")


class _XcmJobIdentifierUpstream_Type(DisplayString):
    """Custom type xcmJobIdentifierUpstream based on DisplayString"""
    defaultHexValue = ""

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmJobIdentifierUpstream_Type.__name__ = "DisplayString"
_XcmJobIdentifierUpstream_Object = MibTableColumn
xcmJobIdentifierUpstream = _XcmJobIdentifierUpstream_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 2),
    _XcmJobIdentifierUpstream_Type()
)
xcmJobIdentifierUpstream.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobIdentifierUpstream.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobIdentifierUpstream.setDescription("""\
Uniquely identifies the job on the immediately upstream client, server or
device as generated by that client, server or device. The server or device is
specified by hrDeviceIndex. For an agent representing a spooling system, this
object is the identifier generated by the submitting client and hrDeviceIndex
identifies a logical device. NOTE: Since multiple clients may each generate the
same identifier for the job, the xcmJobIdentifierUpstream is not necessarily
unique on the server. Client implementers are encouraged to generate client job
ids that are unique. In some cases, the xcmJobSourceChannelType may help to
disambiguate client job ids. NOTE: This object in this MIB is a generalization
of the corresponding ISO DPA attribute: job-identifier-on-client which is
printer-centric. ISO DPA: Job-identifier-on-client[-upstream] This attribute
provides the job-identifier for this job to uniquely identify the job on the
client submitting the job, and the value shall be assigned by that client. The
client shall supply the value of the job-identifier-on- client[-upstream]
attribute at the time that the client submits the job to the server, if such
client has its own job-identifier for the job. NOTE - This attribute is
intended for jobs submitted from legacy servers which have their own job-
identifier for the job. If a job passes through a chain of servers between the
client initiating the job and the output device, the value of the job attribute
job-identifier-on-client shall be the value of the job's job-identifier on the
immediate upstream server and the value of the job attribute job-identifier-on-
printer[-device] shall be the value of the job's job-identifier on the
immediate downstream server or printer. NOTE - A job has attributes for
identifying itself on the current server, on the immediate upstream server
(where the job came from), and on the immediate downstream server or printer
(where the job went). These attributes are job-identifier [job-identifier-on-
system] job-identifier-on-client [job-identifier-upstream] job-identifier-on-
printer [job-identifier-downstream] respectively.
""")


class _XcmJobClientId_Type(OctetString):
    """Custom type xcmJobClientId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmJobClientId_Type.__name__ = "OctetString"
_XcmJobClientId_Object = MibTableColumn
xcmJobClientId = _XcmJobClientId_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 3),
    _XcmJobClientId_Type()
)
xcmJobClientId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobClientId.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobClientId.setReference("""\
See note on maximum length of trap var bind that xcmJobClientId contributes to:
'xcmJobV2AlertPrefixNew' in the Job Alert Group of this MIB.
""")
if mibBuilder.loadTexts:
    xcmJobClientId.setDescription("""\
A client end system supplies the 'xcmJobClientId' attribute to clearly identify
jobs which that client has submitted to the server. This attribute is used as
one of the indices into the ClientIdMap table. There are two types of job-
submitting clients: 1. XCMI-conforming job submitting clients 2. non-XCMI-
conforming job submitting clients For XCMI-conforming job submitting clients,
the 'xcmJobClientId' shall be a globally unique job id. This globally unique
job id shall be a textual string representation in standard dotted decimal form
of an OID (used in traps related to this job generated by this host system).
See XcmGlobalUniqueID in the Xerox General textual conventions in 06gentc.mib
for a description of the contents required for XCMI-conforming job submitting
clients. For non-XCMI-conforming job submitting clients, the job id may be any
textual string and may not necessarily be unique, even if the job submitter is
a strictly conforming ISO DPA client. ISO DPA: Job-client-id This attribute
supplies a human-readable descriptor for the job. This descriptor may be
printed by the server on auxiliary sheets to help identify the user's printed
output, and discriminate between different jobs. Use and treatment of this
attribute is implementation and site specific. If the client specifies the
value of the job attribute job- client-id, no server shall change it. If the
client does not specify the value of the job attribute job-client-id, the first
server shall set it to the value of the job attribute job- identifier, so that
no downstream server shall change it. These rules ensure that if an
implementation prints the value of the job-client-id on an auxiliary sheet, it
has a value that is meaningful to the client originally submitting the job, no
matter how many servers the job passes through. For example, client A submits a
job to server B and does not specify a value for the job attribute job-client-
id. Server B assigns a job-identifier of 123 to the job, and forwards this job
to server C. Server C assigns a job-identifier of 456 to the job and forwards
this job to printer D. Printer D is not a DPA server, but it has its own queue
and assigns a job-id of 789 to the job. The following table shows the value of
the relevant job attributes in the two servers B and C: job- job- job- job-
client-id identifier- identifier identifier- on-client on-printer -------
server B 123 unspecified 123 456 server C 123 123 456 789* * If printer D did
not assign a job-id to its jobs, then the value of the job attribute job-
identifier-on-printer for server C would be unspecified.
""")


class _XcmJobServiceType_Type(XcmJMJobServiceTypeOID):
    """Custom type xcmJobServiceType based on XcmJMJobServiceTypeOID"""
    defaultValue = "(0, 0)"


_XcmJobServiceType_Object = MibTableColumn
xcmJobServiceType = _XcmJobServiceType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 4),
    _XcmJobServiceType_Type()
)
xcmJobServiceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobServiceType.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceType.setDescription("""\
Job-service-type (ISO DPA extension) This attribute specifies the type of the
service to which this job was submitted. The value of this object is filled in
by the job service provider, not by the job service requester, depending on the
service-name-requested (instance) parameter supplied by the job service
requester in the create-job operation. The value is an OBJECT IDENTIFIER, so
the implementers, third parties, and customers can add their own service types.
Values are scan-to-file, scan-to-print, print, etc. NOTE - the Host Resources
Extension MIB defines OIDs for device types, which are closely related to job-
service-types. However, job-service-types are related to one or more device
types.
""")
_XcmJobName_Type = CodeIndexedStringIndex
_XcmJobName_Object = MibTableColumn
xcmJobName = _XcmJobName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 5),
    _XcmJobName_Type()
)
xcmJobName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobName.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobName.setDescription("""\
ISO DPA: Job-name This attribute supplies a human readable string for the
print- job. This string is used for naming the print-job in human- readable
'free-form' fashion. This attribute is intended for enabling a user or the
user's application to convey a job name that may be printed on a start sheet,
returned in a ListObjectAttributes result, or used in notification or logging
messages. If this attribute is not specified, no job name is assumed, but
implementation specific defaults are allowed, such as the value of the
document-name attribute of the first document in the job.
""")
_XcmJobOwner_Type = CodeIndexedStringIndex
_XcmJobOwner_Object = MibTableColumn
xcmJobOwner = _XcmJobOwner_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 6),
    _XcmJobOwner_Type()
)
xcmJobOwner.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobOwner.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobOwner.setDescription("""\
ISO DPA: Job-owner This attribute supplies the name of the human owner of the
print-job. The value of job-owner will often be the same as job- originator.
The job-owner will be different from job-originator when the job has been
submitted by the originator on behalf of the owner. This attribute is not to
take the place of the security parameters or the access-and-accounting
attributes. If this attribute is not specified, the value of user-name or job-
originator should be used for any circumstances which require a value for job-
owner.
""")


class _XcmJobSourceChannelType_Type(XcmPrtChannelType):
    """Custom type xcmJobSourceChannelType based on XcmPrtChannelType"""


_XcmJobSourceChannelType_Object = MibTableColumn
xcmJobSourceChannelType = _XcmJobSourceChannelType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 7),
    _XcmJobSourceChannelType_Type()
)
xcmJobSourceChannelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobSourceChannelType.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobSourceChannelType.setDescription("""\
Job-source-channel-type (ISO DPA extension) This attribute specifies the type
of channel that is receiving the job from the input device. See XCMI Printer
Extensions TC for values defined by the Printer MIB (RFC 1759).
""")
_XcmJobSubmittedLocaleIndex_Type = Cardinal32
_XcmJobSubmittedLocaleIndex_Object = MibTableColumn
xcmJobSubmittedLocaleIndex = _XcmJobSubmittedLocaleIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 8),
    _XcmJobSubmittedLocaleIndex_Type()
)
xcmJobSubmittedLocaleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobSubmittedLocaleIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobSubmittedLocaleIndex.setDescription("""\
Job-submitted-locale (ISO DPA extension) This object is the locale (country,
territory, and language) index into the xcmGenLocalizationTable specifying the
locale of the submitting user. This object permits a management station to
determine the exact coded character set that the submitting client used, in
case the code conversion that the agent might perform to a different coded
character set is not sufficient. This object also allows the system and the
accounting package to determine the language that the submitting user used for
selecting media. NOTE: ISO DPA has an operation-locale attribute which is
passed as common arguments of every ISO DPA operation. ISO DPA should be
amended to indicate that the server may copy the operation-locale attribute to
the job object, so that the server can remember the locale that the client
specified. Then an agent could copy the value of the coded character set from
the job's operation-locale attribute in order to return as the value of
xcmJobSubmittedLocaleIndex.
""")


class _XcmJobCurrentState_Type(XcmJMJobState):
    """Custom type xcmJobCurrentState based on XcmJMJobState"""


_XcmJobCurrentState_Object = MibTableColumn
xcmJobCurrentState = _XcmJobCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 9),
    _XcmJobCurrentState_Type()
)
xcmJobCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobCurrentState.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobCurrentState.setDescription("""\
ISO DPA: Current-job-state This attribute identifies the current state of the
job (pending, processing, held, etc.) Print clients and DP-Servers shall be
prepared to receive all the standard job states. DP-Servers are not required to
generate all job states, only those which are appropriate for the particular
implementation. It is not conformant for an agent to return the unknown value
if the job's state can be determined. If a server implementation or policy is
to start processing documents before the last Print request (with a TRUE value
for the job-submission-complete parameter) and the value of the job's job-
scheduling attribute is not after-complete, the server shall change the job's
current-job-state from pre- processing [building] directly to the processing
state when the server begins processing any of the job's documents.
""")
_XcmJobStateReasons_Type = XcmJMJobStateReasons
_XcmJobStateReasons_Object = MibTableColumn
xcmJobStateReasons = _XcmJobStateReasons_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 10),
    _XcmJobStateReasons_Type()
)
xcmJobStateReasons.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobStateReasons.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobStateReasons.setDescription("""\
This object is bit-encoded, so that multiple reasons can occur at once. Each
bit corresponds to an ISO DPA OID for the same reason. See textual conventions.
ISO DPA: Job-state-reasons This attribute identifies the reason or reasons that
the job is in the held, terminating, retained, or completed state. The server
shall indicate the particular reason(s) by setting the value of the job-state-
reasons attribute. When the job is not in any of these states, the server shall
set the value of the job-state-reasons attribute to the empty set.
""")
_XcmJobXStateReasons_Type = XcmJMJobXStateReasons
_XcmJobXStateReasons_Object = MibTableColumn
xcmJobXStateReasons = _XcmJobXStateReasons_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 11),
    _XcmJobXStateReasons_Type()
)
xcmJobXStateReasons.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobXStateReasons.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobXStateReasons.setDescription("""\
This object is bit-encoded, so that multiple reasons can occur at once. Each
bit corresponds to a Xerox extension OID for the same reason. See textual
conventions. ISO DPA: Job-state-reasons (extended with Xerox OIDs) This
attribute identifies the reason or reasons that the job is in the held,
[processing,] terminating, retained, or completed state. The server shall
indicate the particular reason(s) by setting the value of the job-state-reasons
attribute. When the job is not in any of these states, the server shall set the
value of the job-state-reasons attribute to the empty set. See the Xerox Job
Model Specification for the specification of which reasons can be used in which
job states.
""")
_XcmJobX2StateReasons_Type = XcmJMJobX2StateReasons
_XcmJobX2StateReasons_Object = MibTableColumn
xcmJobX2StateReasons = _XcmJobX2StateReasons_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 6, 1, 1, 12),
    _XcmJobX2StateReasons_Type()
)
xcmJobX2StateReasons.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobX2StateReasons.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobX2StateReasons.setDescription("""\
This object is bit-encoded, so that multiple reasons can occur at once. Each
bit corresponds to a second set of 31 Xerox extension OIDs for the same reason.
See textual conventions. ISO DPA: Job-state-reasons (extended with Xerox OIDs)
This attribute identifies the reason or reasons that the job is in the held,
[processing,] terminating, retained, or completed state. The server shall
indicate the particular reason(s) by setting the value of the job-state-reasons
attribute. When the job is not in any of these states, the server shall set the
value of the job-state-reasons attribute to the empty set. See the Xerox Job
Model Specification for the specification of which reasons can be used in which
job states.
""")
_XcmDevicesAssigned_ObjectIdentity = ObjectIdentity
xcmDevicesAssigned = _XcmDevicesAssigned_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 7)
)
_XcmDevicesAssignedTable_Object = MibTable
xcmDevicesAssignedTable = _XcmDevicesAssignedTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 7, 1)
)
if mibBuilder.loadTexts:
    xcmDevicesAssignedTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmDevicesAssignedTable.setDescription("""\
This table contains the hrDeviceIndex values and states of the device(s) to
which this job has been assigned, if the job has been assigned to a physical
device by the job service provider. If the job service provider has not (yet)
assigned the job to a device, there shall not be any rows in this table for the
job. Some implementations assign jobs to physical devices when the job is
submitted which is called early binding. Other implementations delay assigning
jobs to physical devices until the physical device is ready to accept another
job which is called late binding. Late binding is used when load balancing
between several physical devices. NOTE: Some systems may assign a job to more
than one device and progress part of the job on each. Therefore, the device
state is represented as a table. For example, print systems that only assign a
job to a single printer, need only implement a single row of this table. As
another example, multifunction devices/systems that scan and print, in order to
implement a copy service may either: 1. assign a simple job to at least two
devices: a scanner and a printer or 2. create a compound job with a single
device assigned to each contained sub-job.
""")
_XcmDevicesAssignedEntry_Object = MibTableRow
xcmDevicesAssignedEntry = _XcmDevicesAssignedEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 7, 1, 1)
)
xcmDevicesAssignedEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
    (0, "XEROX-COMMON-MIB", "xcmDevicesAssignedHrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmDevicesAssignedEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmDevicesAssignedEntry.setDescription("""\
Entries may exist in the table for each device index whose device type is
'printer', 'scanner', etc. and for each job. See Host Resources MIB and the
XCMI Host Resources Extension MIB where OIDs are assigned for device types.
""")
_XcmDevicesAssignedHrDeviceIndex_Type = Ordinal32
_XcmDevicesAssignedHrDeviceIndex_Object = MibTableColumn
xcmDevicesAssignedHrDeviceIndex = _XcmDevicesAssignedHrDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 7, 1, 1, 1),
    _XcmDevicesAssignedHrDeviceIndex_Type()
)
xcmDevicesAssignedHrDeviceIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmDevicesAssignedHrDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmDevicesAssignedHrDeviceIndex.setDescription("""\
The hrDeviceIndex of one of the [physical] devices (printers, scanners, FAX,
etc. to which the job has been assigned. For devices and systems that ensure
that jobs are not lost across crashes and power cycles, these index values
shall remain stable across successive device power cycles. However, if a (low-
end) device is not ensuring that job are persistent across crashes and power
cycles, these index values need not remain stable across such crashes or power
cycles. The representation of the assigned device(s)is an index into the Host
Resources MIB device table, rather than being the distinguished name of the
physical printer as in the ISO DPA printers-assigned attribute. NOTE - The name
of the physical printer [or scanner] is contained in the XCMI Host Resources
Extension MIB table for this device. ISO DPA: Printers-assigned This attribute
identifies the physical [devices] printer or printers to which this job has
been assigned, if any. When the job is first submitted and the server has not
yet assigned any printers to the job, the [table] shall be empty. If the server
intends to use a single printer for the job, and the server has assigned a
printer to the job, [each row] shall contain just that [device]. If a server
has split the job into multiple pieces and assigned each piece to a different
printer, the table shall contain n rows, one for each assigned device. A job
with multiple job-result-sets is an example of a job that would be easy to
split into multiple pieces. A table with no elements shall be returned if this
attribute is supported, but this job has not yet been assigned to any physical
printers [or other devices]. The number of rows in the table for this attribute
shall be the same as the number of rows in the table for the associated job
attribute printer-state-of-printers-assigned [number of rows for the
xcmDeviceStateOfDevicesAssigned table]. In addition, the ith element of each of
these associated attributes shall be a value that pertains to the printer named
by the ith element of printers-assigned. The printers-assigned value shall not
be the same as the printer requested by the user if the job's printer-name-
requested attribute specified a logical printer that supports one or more
different physical printers. The printers-assigned value might differ also if
the job has been re-assigned by an operator to ensure successful completion of
the job, allowing the user to find out where a job has been re-assigned (when
necessary). The value of the job's printers-assigned attribute shall remain
after the job has completed, so that users can determine the physical
printer(s) on which the job was printed.
""")
_XcmDeviceStateOfDevicesAssigned_Type = XcmHrDevInfoXStatus
_XcmDeviceStateOfDevicesAssigned_Object = MibTableColumn
xcmDeviceStateOfDevicesAssigned = _XcmDeviceStateOfDevicesAssigned_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 7, 1, 1, 2),
    _XcmDeviceStateOfDevicesAssigned_Type()
)
xcmDeviceStateOfDevicesAssigned.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDeviceStateOfDevicesAssigned.setStatus("current")
if mibBuilder.loadTexts:
    xcmDeviceStateOfDevicesAssigned.setDescription("""\
For the MIB, the object applies to scanners, Faxes, etc., as well as printers.
For job services that are purely software or that have software document
transforms that the implementation wishes to expose the state of the software
'engine' may also include rows in this table. The purpose of the
xcmDeviceStateOfDevicesAssigned is to give more detailed information about the
state of a job when the job is in the processing state. Consequently, the value
of this object shall reflect the state of the device only when the job is in
the processing state. When the job is in any other state, the value of the
xcmDeviceStateOfDevicesAssigned object shall be 'unknown'. Changes of the
values of xcmDeviceStateOfDevicesAssigned shall generate a trap. Since the
value of this object shall change only when the job is in the processing state,
traps shall only be generated for changes in xcmDeviceStateOfDevicesAssigned
while the job is in the processing state. Therefore, the
xcmDeviceStateOfDevicesAssigned object shall not generate a trap when the job
is not in the processing state. NOTE: the xcmDeviceStateOfDevicesAssigned is a
duplicate of an object in the Host Resources Extension MIB. But since that
object is in an optional group, xcmDeviceStateOfDevicesAssigned is duplicated
in this deprecated table, so that implementers are not forced to implement the
entire optional group in the HRX MIB, such to get this state of the device that
is part of the overall job state. NOTE: This group and table has been
DEPRECATED, because some devices can be processing more than one job at a time.
However, if the device stops, only one of those jobs is actually affected. So
the deviceStopped bit in the PWG Job Monitoring MIB should be used (on a per
job basis) to indicate that the device has a problem. ISO DPA: Printer-state-
of-printers-assigned This attribute identifies the current state of each
assigned [device] printer. This attribute gives the client access to
information within each assigned printer. Because this attribute contains a
value that is updated within the printer, the server may choose to update the
value of this attribute only when a client [or management station] queries its
value. See the [devices-assigned] printers-assigned attribute for the
correspondence between elements of this attribute and those of [devices-
assigned] printers-assigned.
""")


class _XcmJobIdentifierDownstream_Type(DisplayString):
    """Custom type xcmJobIdentifierDownstream based on DisplayString"""
    defaultHexValue = ""

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmJobIdentifierDownstream_Type.__name__ = "DisplayString"
_XcmJobIdentifierDownstream_Object = MibTableColumn
xcmJobIdentifierDownstream = _XcmJobIdentifierDownstream_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 7, 1, 1, 3),
    _XcmJobIdentifierDownstream_Type()
)
xcmJobIdentifierDownstream.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobIdentifierDownstream.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobIdentifierDownstream.setDescription("""\
Uniquely identifies the job(s) on the immediately downstream server or device
as generated by that server or device that this system has submitted in order
to perform this job. The downstream server or device is specified by its own
value of hrDeviceIndex. For an agent representing a spooling system, this
object is the identifier generated by that spooling system and hrDeviceIndex
identifies a logical device. NOTE: This object in this MIB is a generalization
of the corresponding ISO DPA attribute: job-identifier-on-printer which is
printer-centric. ISO DPA: job-identifier-on-printer This attribute provides the
job-identifier for this job to uniquely identify it on the printer or next
server downstream, and it shall be assigned by that printer or server. The
value of the job-identifier-on-printer attribute shall be the job-identifier
that the printer or the next server downstream generates at the time the server
submits the job to the printer or the next server downstream. If the printer or
the next server downstream does not generate its own job identifier, the server
shall leave the value of this attribute unspecified. NOTE - This attribute is
intended for jobs submitted to other servers, such as a gateway to a legacy
server, or to printers which have their own internal queue and assign their own
job identifiers.
""")
_XcmClientIdMap_ObjectIdentity = ObjectIdentity
xcmClientIdMap = _XcmClientIdMap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 8)
)
_XcmClientIdMapTable_Object = MibTable
xcmClientIdMapTable = _XcmClientIdMapTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 8, 1)
)
if mibBuilder.loadTexts:
    xcmClientIdMapTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmClientIdMapTable.setDescription("""\
A table that maps 1) job identifiers generated by the client that submitted the
job to 2) job identifiers generated by the server that accepted the job.
""")
_XcmClientIdMapEntry_Object = MibTableRow
xcmClientIdMapEntry = _XcmClientIdMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 8, 1, 1)
)
xcmClientIdMapEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmJobClientId"),
    (0, "XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
)
if mibBuilder.loadTexts:
    xcmClientIdMapEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmClientIdMapEntry.setDescription("""\
Entries exist in this table for each device entry in the Host Resources MIB
device table whose type is 'printer', 'scanner', 'fax', etc. Such a device may
represent a logical, a physical, or a logical-and-physical device, as specified
in the xcmHrDevInfoRealiszation object in the Host Resources Extension MIB. The
Host Resources Extension MIB has OIDs added for use in hrDeviceType. NOTE - The
map table is indexed by both the xcmJobClientId (which the submitting job
service requester may, optionally, supply to identify the job or the client or
user that submitted the job) and the xcmJobIdentifierOnSystem (which the
accepting job service provider shall supply to uniquely identifier the job on
the accepting system. Thus the job service provider guarantees that each map
entry has a unique pair of indices.
""")
_XcmClientIdMapHrDeviceIndex_Type = Ordinal32
_XcmClientIdMapHrDeviceIndex_Object = MibTableColumn
xcmClientIdMapHrDeviceIndex = _XcmClientIdMapHrDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 8, 1, 1, 2),
    _XcmClientIdMapHrDeviceIndex_Type()
)
xcmClientIdMapHrDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmClientIdMapHrDeviceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmClientIdMapHrDeviceIndex.setDescription("""\
The device index from the Host Resources MIB, so that the client can determine
to which (logical or physical) device this job has been submitted.
""")
_XcmJobGenExt_ObjectIdentity = ObjectIdentity
xcmJobGenExt = _XcmJobGenExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10)
)
_XcmJobGenExtTable_Object = MibTable
xcmJobGenExtTable = _XcmJobGenExtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1)
)
if mibBuilder.loadTexts:
    xcmJobGenExtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenExtTable.setDescription("""\
A table of general job information per (logical or physical) device that is
independent of the type of device and that does not require a spooling
implementation (though a spooling implementation shall also implement this
group, in which case spooled jobs shall also appear in the job table). Job
information applies to the job as a whole or to all its documents. The
specification for most objects is taken directly from the ISO 10175 Document
Printing Application (DPA) standard clause 9.2, Job Attributes. However, this
MIB is intended to be used with non-DPA implementations, so only a small set of
general DPA attributes have been included here.
""")
_XcmJobGenExtEntry_Object = MibTableRow
xcmJobGenExtEntry = _XcmJobGenExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1)
)
xcmJobGenBasicEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmJobGenExtEntry")
)
xcmJobGenExtEntry.setIndexNames(*xcmJobGenBasicEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmJobGenExtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenExtEntry.setDescription("""\
An entry exists in this table for each job in the device, no matter what the
state of the job is. Each device is represented as a separate device entry in
the Host Resources MIB device table as a device of type 'printer', 'scanner',
'fax', etc. The management station references each job using the
xcmJobIdentifierOnSystem assigned by this (logical for spooling or physical for
non-spooling) device that accepted the job submission (by some other protocol).
This table augments the Job General Basic table in this MIB.
""")
_XcmJobOriginator_Type = CodeIndexedStringIndex
_XcmJobOriginator_Object = MibTableColumn
xcmJobOriginator = _XcmJobOriginator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 1),
    _XcmJobOriginator_Type()
)
xcmJobOriginator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobOriginator.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobOriginator.setDescription("""\
ISO DPA: Job-originator This attribute supplies the name of the human or
programmatic originator of the print-job. If this attribute is not specified,
no value for job originator is assumed, but implementation specific defaults
are allowed. NOTE - This attribute may be different from job-owner (1) when a
program submits the print-job on behalf of a user or (2) when an operator must
resubmit a misprinted job on behalf of the original job owner. However, an
operation to resubmit a print- job is outside the scope of this part of ISO/IEC
10175.
""")
_XcmJobSubmittingApplication_Type = CodeIndexedStringIndex
_XcmJobSubmittingApplication_Object = MibTableColumn
xcmJobSubmittingApplication = _XcmJobSubmittingApplication_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 2),
    _XcmJobSubmittingApplication_Type()
)
xcmJobSubmittingApplication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobSubmittingApplication.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobSubmittingApplication.setDescription("""\
ISO DPA: (ISO DPA extension) This attribute supplies the name of the
programmatic originator of the print-job, i.e., name of the program that
submitted the job on behalf of the end-user. If this attribute is not
specified, no value for job programmatic originator is assumed, but
implementation-specific defaults are allowed.
""")
_XcmJobComment_Type = CodeIndexedStringIndex
_XcmJobComment_Object = MibTableColumn
xcmJobComment = _XcmJobComment_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 3),
    _XcmJobComment_Type()
)
xcmJobComment.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobComment.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobComment.setDescription("""\
ISO DPA: Job-comment This attribute supplies an arbitrary human-readable text
string associated with the print-job. This attribute is intended for enabling a
user to convey a text string that may be printed on a job start sheet, for
example, in an implementation-dependent manner.
""")


class _XcmJobCopies_Type(Ordinal32):
    """Custom type xcmJobCopies based on Ordinal32"""
    defaultValue = 1


_XcmJobCopies_Object = MibTableColumn
xcmJobCopies = _XcmJobCopies_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 4),
    _XcmJobCopies_Type()
)
xcmJobCopies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobCopies.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobCopies.setDescription("""\
For the MIB: this object is generalized so that it applies to scanning as well
as printing. ISO DPA: job-copies (an element of results-profile attribute)
Total number of job copies in the job, i.e., number of job copies summed across
the job-result-sets. If a job contains documents A, B, C, a job-copies value of
2 results in: A, B, C, A, B, C. See ISO DPA results-profile attribute
description for the specification of a job result set and the definition of
job-copies. NOTE - In ISO DPA, job-copies is a separate value for each job
result set, not the summation. But it didn't seem worth the effort to make job-
copies a table since not many systems support multiple job results sets for a
single job.
""")
_XcmJobCopiesCompleted_Type = Counter32
_XcmJobCopiesCompleted_Object = MibTableColumn
xcmJobCopiesCompleted = _XcmJobCopiesCompleted_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 5),
    _XcmJobCopiesCompleted_Type()
)
xcmJobCopiesCompleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobCopiesCompleted.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobCopiesCompleted.setDescription("""\
For the MIB: this object is generalized so that it applies to scanning as well
as printing. ISO DPA: Job-copies-completed This attribute indicates the number
of job-copies of the job that the printer(s) have completed printing. The
server shall not reset its value during the processing of multiple print-job
results that are part of the same job (see the results-profile job attribute).
Since this attribute is intended to measure the progress of a job, the value
shall include repeated job- copies due to multiple print-job results for the
same job. The accuracy of this value is implementation-dependent. It is
expected that the value reported is never greater than the actual value. This
attribute may not be supported for all printers and all page description
languages. The value of this attribute shall be 0 if printing has not started
for this job.
""")
_XcmJobOutputBinIndex_Type = Integer32
_XcmJobOutputBinIndex_Object = MibTableColumn
xcmJobOutputBinIndex = _XcmJobOutputBinIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 6),
    _XcmJobOutputBinIndex_Type()
)
xcmJobOutputBinIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobOutputBinIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobOutputBinIndex.setDescription("""\
ISO DPA: output-bin Special MIB definition: specifies the index of the output
subunit table for the job. NOTE - ISO DPA allows the output-bin to be specified
differently for each job result set in a job. However, it doesn't seem worth
the effort to make output-bin a table, since multiple job-result-sets is an
unlikely feature to be supported and/or used, especially with different output-
bins.
""")
_XcmJobServiceNameRequested_Type = CodeIndexedStringIndex
_XcmJobServiceNameRequested_Object = MibTableColumn
xcmJobServiceNameRequested = _XcmJobServiceNameRequested_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 7),
    _XcmJobServiceNameRequested_Type()
)
xcmJobServiceNameRequested.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobServiceNameRequested.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobServiceNameRequested.setDescription("""\
Specifies the job service name instance on which the job is to be processed as
specified by the job service requester when the job was submitted. NOTE: this
object has been generalized for use in this MIB from ISO DPA where the
attribute is only a logical or physical printer, not a job service instance,
such as a scan-to-file service instance. ISO DPA: Printer-name-requested This
attribute identifies the printer to be used for printing the job. The client
shall specify the value of this attribute with the first invocation of the
Print operation for the print- job as the explicit printer-name component of
the PrintArgument, rather than as an attribute (see 8.2.1.1). NOTES 1. To cause
a server to select a printer according to other attributes, the System
Administrator should define a logical printer that supports ALL of the physical
printers supported by the server. 2. For the server that supports only a single
printer, the logical printer name may be the same as the server name, as long
as they cannot be confused for each other in the name service directory. 3.
Initial-value-job objects should have the value of their printer-name-requested
attribute specified as an empty value in order to indicate that no printer-name
is defaulted.
""")


class _XcmJobPreviousState_Type(XcmJMJobState):
    """Custom type xcmJobPreviousState based on XcmJMJobState"""


_XcmJobPreviousState_Object = MibTableColumn
xcmJobPreviousState = _XcmJobPreviousState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 8),
    _XcmJobPreviousState_Type()
)
xcmJobPreviousState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobPreviousState.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobPreviousState.setDescription("""\
This object permits the management application to display the previous job
state to the user without having to monitor all job state changes. For example,
when a job completes, the previous state indicates what the job was doing just
before completing. If the job was printing, then the completion was normal. If
the previous state was terminating, then the completion was abnormal. Another
example, is when a job is paused. The xcmJobPreviousState indicates the state
that the job was in when the job was paused. ISO DPA: job-previous-state This
attribute identifies the state of the job (pending, processing, held, etc.)
before the last change of job state. Standard values are defined in the
specification for the current-job-state [xcmJobCurrentState] job-status
attribute. See textual-conventions.
""")


class _XcmJobEstimatedCompletionTime_Type(DateAndTime):
    """Custom type xcmJobEstimatedCompletionTime based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmJobEstimatedCompletionTime_Object = MibTableColumn
xcmJobEstimatedCompletionTime = _XcmJobEstimatedCompletionTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 9),
    _XcmJobEstimatedCompletionTime_Type()
)
xcmJobEstimatedCompletionTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobEstimatedCompletionTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobEstimatedCompletionTime.setDescription("""\
Job Monitoring MIB: If the estimated completion time is unknown, the agent
should return the DEFVAL. This object is a 'best efforts' object, so any
estimate based on any data such as the octet-count or the number of pages
(perhaps obtained from the PostScript commenting conventions up front) is far
preferable than returning the DEFVAL. A learning algorithm based on recent job
sizes and their times could be used. ISO DPA: Estimated-completion-time This
attribute indicates the estimated time by which this job will be completed. The
time to complete one job is dependent on the time required to complete all
other jobs that the scheduling algorithm determines must be printed before this
job may be printed. The time to complete each individual job may depend on when
on- request resources are available. The time to print each individual job is
dependent on the characteristics of the document formats in which the
individual documents of the job are encoded and on the complexities and other
characteristics of the documents themselves. This attribute is highly
implementation-dependent. The estimated-completion-time may be easy to
calculate for some combinations of document formats and scheduling algorithms.
It may be impossible to calculate for other combinations. It is recommended
that, where possible, document creators provide system hints to the print
system (perhaps appropriately encoded in document format headers) that help the
print system understand which features of the document formats the document
will be exercising.
""")


class _XcmJobSubmissionTime_Type(DateAndTime):
    """Custom type xcmJobSubmissionTime based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmJobSubmissionTime_Object = MibTableColumn
xcmJobSubmissionTime = _XcmJobSubmissionTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 10),
    _XcmJobSubmissionTime_Type()
)
xcmJobSubmissionTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobSubmissionTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobSubmissionTime.setDescription("""\
ISO DPA: Submission-time This attribute indicates the time at which the latest
Print request for this job was accepted by the server. An implementation that
can tell time shall return a valid value for this object. Only a device that
cannot tell time shall return the DEFVAL.
""")
_XcmJobPagesCompleted_Type = Counter32
_XcmJobPagesCompleted_Object = MibTableColumn
xcmJobPagesCompleted = _XcmJobPagesCompleted_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 11),
    _XcmJobPagesCompleted_Type()
)
xcmJobPagesCompleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobPagesCompleted.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobPagesCompleted.setDescription("""\
For the MIB: this object is generalized so that it applies to scanning as well
as printing. ISO DPA: Pages-completed This attribute indicates the number of
pages of the job that the printer(s) have completed printing. NOTE - The number
of source pages, impressions and sheets of media may differ. The following
examples illustrate how they may differ when attributes, rather than the
document contents, control the printing. If number-up is 0 or 1, there is one
source page per impression, and if number-up is 2, there are two source pages
per impression. If sides is 1, there is one impression per sheet of media, but
if sides is 2, there are two impressions per sheet of media. By inference, if
number-up is 4 and sides is 2, there are 4 source pages per impression and 8
source pages per sheet of media. The server shall not reset its value during
the processing of multiple copies of documents or the job. Since this attribute
is intended to measure the progress of a job, the value shall include repeated
pages due to multiple copies. When the job completes, this attribute should
contain the value of the total number of source pages that the printer
processed for the print-job. The accuracy of this value is implementation-
dependent. It is expected that the value reported is never greater than the
actual value. This attribute may not be supported for all printers and all page
description languages. The value of this attribute shall be 0 if printing has
not started for this job.
""")
_XcmJobOctetsCompletedHigh_Type = Cardinal64High
_XcmJobOctetsCompletedHigh_Object = MibTableColumn
xcmJobOctetsCompletedHigh = _XcmJobOctetsCompletedHigh_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 12),
    _XcmJobOctetsCompletedHigh_Type()
)
xcmJobOctetsCompletedHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobOctetsCompletedHigh.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobOctetsCompletedHigh.setDescription("""\
For the Job Monitoring MIB: two objects are used to represent a full 62-bit
value. The sign bit of each half is not used. This object is generalized for
use with input devices as well. ISO DPA: Octets-completed [high 31 bits] This
attribute indicates the number of octets of the job that the printer(s)
[devices(s)] have completed printing [processing]. The server shall not reset
its value during the processing of multiple copies of documents or the job.
Since this attribute is intended to measure the progress of a job, the value
shall include repeated pages due to multiple copies. The accuracy of this value
is implementation-dependent. It may be approximated by the number of octets
conveyed to the printer [device]. This attribute may not be supported for all
printers and all page description languages. The value of this attribute shall
be 0 if the device has not started this job.
""")
_XcmJobOctetsCompletedLow_Type = Cardinal64Low
_XcmJobOctetsCompletedLow_Object = MibTableColumn
xcmJobOctetsCompletedLow = _XcmJobOctetsCompletedLow_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 13),
    _XcmJobOctetsCompletedLow_Type()
)
xcmJobOctetsCompletedLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobOctetsCompletedLow.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobOctetsCompletedLow.setDescription("""\
ISO DPA: Octets-completed [low 31 bits] See explanation of
xcmJobOctetsCompletedHigh.
""")
_XcmJobErrorCount_Type = Counter32
_XcmJobErrorCount_Object = MibTableColumn
xcmJobErrorCount = _XcmJobErrorCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 14),
    _XcmJobErrorCount_Type()
)
xcmJobErrorCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobErrorCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobErrorCount.setDescription("""\
ISO DPA: Error-count This attribute provides the number of error events
occurring while processing the job.
""")
_XcmJobWarningCount_Type = Counter32
_XcmJobWarningCount_Object = MibTableColumn
xcmJobWarningCount = _XcmJobWarningCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 15),
    _XcmJobWarningCount_Type()
)
xcmJobWarningCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobWarningCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobWarningCount.setDescription("""\
ISO DPA: Warning-count This attribute provides the number of warning events
occurring while processing the job.
""")
_XcmJobProcessingTime_Type = Counter32
_XcmJobProcessingTime_Object = MibTableColumn
xcmJobProcessingTime = _XcmJobProcessingTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 16),
    _XcmJobProcessingTime_Type()
)
xcmJobProcessingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobProcessingTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobProcessingTime.setUnits("seconds")
if mibBuilder.loadTexts:
    xcmJobProcessingTime.setDescription("""\
ISO DPA: Processing-time This attribute indicates how long an individual job
has been processing [in seconds].
""")
_XcmJobNumberOfDocuments_Type = Cardinal32
_XcmJobNumberOfDocuments_Object = MibTableColumn
xcmJobNumberOfDocuments = _XcmJobNumberOfDocuments_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 17),
    _XcmJobNumberOfDocuments_Type()
)
xcmJobNumberOfDocuments.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobNumberOfDocuments.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobNumberOfDocuments.setDescription("""\
ISO DPA: Number-of-documents This attribute indicates the number of documents
in the job. The number indicates how many Print operations that specified a
document (of any document-type have been submitted for printing until job
submission has been completed; at that point this attribute shall then indicate
the total number of printable documents, fonts, and resource objects submitted
by the client in the job. If the first Print operation does not contain a
first-document component (see 8.2.1), the value of this attribute shall be 0.
The server shall count fonts and resource objects passed to the server by means
of Print operation invocations, as documents for the purposes of this
attribute.
""")
_XcmJobAuthorizationUserName_Type = CodeIndexedStringIndex
_XcmJobAuthorizationUserName_Object = MibTableColumn
xcmJobAuthorizationUserName = _XcmJobAuthorizationUserName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 10, 1, 1, 18),
    _XcmJobAuthorizationUserName_Type()
)
xcmJobAuthorizationUserName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobAuthorizationUserName.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobAuthorizationUserName.setReference("""\
See XCMI security MIB (62sectc.txt and 63sec.txt).
""")
if mibBuilder.loadTexts:
    xcmJobAuthorizationUserName.setDescription("""\
The user's name for authorization purposes. The value of
xcmJobAuthorizationUserName may be the same or may be different than the value
of the xcmJobAccountingUserName object, depending on the security system and
the accounting system being used. ISO DPA: User-name This attribute specifies
the name of the user requesting access to print [or other] service operations.
The usage of this attribute may be mandatory, depending upon the local security
policy used.
""")
_XcmDocGenBasic_ObjectIdentity = ObjectIdentity
xcmDocGenBasic = _XcmDocGenBasic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12)
)
_XcmDocGenBasicTable_Object = MibTable
xcmDocGenBasicTable = _XcmDocGenBasicTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1)
)
if mibBuilder.loadTexts:
    xcmDocGenBasicTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocGenBasicTable.setDescription("""\
A table of general mandatory document information that is per document which in
turn is per job and which in turn is per (logical or physical) device and is
independent of the type of device (printer, scanner, fax, ...) and that does
not require a spooling implementation (though a spooling implementations shall
also implement this group, in which case spooled jobs shall also appear in the
job table). Document information applies to an individual document contained in
a job. The specification for most objects is taken directly from the ISO 10175
Document Printing Application (DPA) standard clause 9.3, Document Attributes.
However, this MIB is intended to be used with non-DPA implementations, so only
a small set of general DPA attributes have been included here.
""")
_XcmDocGenBasicEntry_Object = MibTableRow
xcmDocGenBasicEntry = _XcmDocGenBasicEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1)
)
xcmDocGenBasicEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
    (0, "XEROX-COMMON-MIB", "xcmDocSequenceNumber"),
)
if mibBuilder.loadTexts:
    xcmDocGenBasicEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocGenBasicEntry.setDescription("""\
An entry exists in this table for each document in each job, no matter what the
state of the job is. Each printer is represented as a separate device entry in
the Host Resources MIB device table as a device of type 'printer', 'scanner', o
'fax', etc. The management station references each job using the
xcmJobIdentifierOnSystem assigned by this (logical for spooling or physical for
non-spooling) device that accepted the job submission (by some other protocol).
""")
_XcmDocSequenceNumber_Type = Ordinal32
_XcmDocSequenceNumber_Object = MibTableColumn
xcmDocSequenceNumber = _XcmDocSequenceNumber_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 1),
    _XcmDocSequenceNumber_Type()
)
xcmDocSequenceNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocSequenceNumber.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocSequenceNumber.setDescription("""\
For the MIB, a row shall not exist in this table if the job does not (yet) have
any documents. A 32-bit index is required, since the ISO DPA has a 2**31-1
maximum-value integer for the document-sequence-number attribute. ISO DPA:
Document-sequence-number This attribute specifies the number of this document
in relation to the set of documents in this job. The first document in the job
is numbered 1. The document-sequence-number is not passed as an input attribute
in the print operation. Documents are assumed to be submitted in order (i.e.,
document number 1 followed by document number 2, etc.). [If the job service
requester does not submit a document on the first create-job call, no document
row shall be added to this table. The rest of this ISO DPA paragraph does not
apply:] A server shall return a value of 0 for this attribute if the first
Print operation has not submitted a document (e.g., the first-document element
is omitted in the create-job element of the Print operation). If a document is
cancelled in a multi-document job, the document-sequence numbers of the other
documents shall not change.
""")
_XcmDocName_Type = CodeIndexedStringIndex
_XcmDocName_Object = MibTableColumn
xcmDocName = _XcmDocName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 2),
    _XcmDocName_Type()
)
xcmDocName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocName.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocName.setDescription("""\
For the MIB, the single xcmDocName object is both the document name for scan-
to-file and the document name for file-to-print. ISO DPA: Document-name This
attribute supplies a human readable string for the document. This string is
used for naming the document in a human-readable 'free-form' fashion. This
attribute is intended for enabling a user or the user's application to convey a
document name that may be printed on a start sheet, returned in a
ListObjectAttributes result, or used in notification or logging messages. If
this attribute is not specified, no document name is assumed, but
implementation specific defaults are allowed, such as the simple-name part of
the value of the document-file-name attribute. It is suggested, however, that
the server not supply additional text for this attribute when printing its
value (e.g. on a start sheet). This string only has meaning to the clients and
can therefore take several forms, e.g. the name of a mail folder, name of a
revisable document, the file specification minus the file path, the title of a
document, etc.
""")
_XcmDocFileName_Type = CodeIndexedStringIndex
_XcmDocFileName_Object = MibTableColumn
xcmDocFileName = _XcmDocFileName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 3),
    _XcmDocFileName_Type()
)
xcmDocFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocFileName.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocFileName.setDescription("""\
For the MIB, the single xcmDocFileName object is both the document file name
for scan-to-file and the document file name for file-to-print. If this
attribute is specified for a scan-to-print job, the result of the scan is also
copied to the file specified by xcmDocFileName as a side-effect of the scan-to-
print operation. ISO DPA: Document-file-name This attribute specifies the file
name of the document, if the document came from a file. The file name may
include the full path to the file, in which case the name-syntax element of the
DistinguishedNameString data type shall specify the syntax of the file name. If
the document did not come from a file, the client should not specify this
attribute.
""")
_XcmDocFileNameType_Type = XcmJMDocFileNameType
_XcmDocFileNameType_Object = MibTableColumn
xcmDocFileNameType = _XcmDocFileNameType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 4),
    _XcmDocFileNameType_Type()
)
xcmDocFileNameType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocFileNameType.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocFileNameType.setDescription("""\
The type of file name syntax from which a document is obtained for an output
job, such as print, or for which a document is produced for an input job, such
as scan- to-file. The file name syntax types are taken from ISO DPA for the
DistinguishedNameStringSyntax data type. ISO DPA: distinguished-name-syntax
data type, name-syntax element. See textual-conventions.
""")
_XcmDocType_Type = XcmJMDocType
_XcmDocType_Object = MibTableColumn
xcmDocType = _XcmDocType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 5),
    _XcmDocType_Type()
)
xcmDocType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocType.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocType.setDescription("""\
ISO DPA: Document-type This attribute indicates that the document being passed
by the current Print abstract-operation is either a printable document, a font,
or a resource. How resources are managed during the printing process is
necessarily dependent on the characteristics of the server and printer
implementations. These methods are considered implementation-specific, and
shall not be dictated by ISO/IEC 10175. In particular, ISO/IEC 10175 does not
require that resources be passed in advance of the documents that use them;
i.e., resources may be passed to the server in any order within the job,
subject only to the requirement that the resources be present at the server
before processing begins on the documents that use them.
""")
_XcmDocFormat_Type = XcmPrtInterpreterLangFamily
_XcmDocFormat_Object = MibTableColumn
xcmDocFormat = _XcmDocFormat_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 6),
    _XcmDocFormat_Type()
)
xcmDocFormat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocFormat.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocFormat.setDescription("""\
The interpreter language family enum value registered by IANA is used according
to the Printer MIB (RFC 1759). See prtInterpreterLangFamily. For the Job
Monitoring MIB, an index into the prtInterpreterTable is not used, since the
exact format of the document need not conform exactly to one of the printer's
intepreters and, furthermore, the device need not even be a printer (so that
the Printer MIB need not be used for non-printers). For scan-to-file jobs, the
xcmDocFormat object specifies the document format desired as a result of the
scan. ISO DPA: Document-format This attribute identifies the overall print
document format used for the document. It consists of three elements, a
document-format, a document-format-variants and a document- format-version. The
latter two elements are optional. The document-format element identifies a
particular family of document formats, of which there may exist several
versions or variants. The document-format-variants and document-format- version
elements identify a specific instance of a document format. The variant refers
to a particular functional subset of a format. For example, the format
PostScript has variants of level 1 and level 2, and the format PCL has several
variants, including PCL4 and PCL5. The version distinguishes among successive
releases of the same basic format and variant. For example, successive versions
of Xerox Interpress include versions 2.0, 2.1, 3.0, 3.1, etc.
""")
_XcmDocFormatVariants_Type = CodeIndexedStringIndex
_XcmDocFormatVariants_Object = MibTableColumn
xcmDocFormatVariants = _XcmDocFormatVariants_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 7),
    _XcmDocFormatVariants_Type()
)
xcmDocFormatVariants.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocFormatVariants.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocFormatVariants.setDescription("""\
For scan-to-file jobs, the xcmDocFormatVariants object specifies the document
format variant desired as a result of the scan. ISO DPA: Document-format-
variants The document-format-variants and document-format-version elements
identify a specific instance of a document format. The variant refers to a
particular functional subset of a format. For example, the format PostScript
has variants of level 1 and level 2, and the format PCL has several variants,
including PCL4 and PCL5. The document-format-variants element consists of a
single text string. If it is necessary to identify more than one variant, the
respective variant values shall all be contained in the document-format-
variants element, separated from one another by commas. If the client omits the
document-format-variants or document- format-version elements, the server may
supply a format- specific default which will restrict the outcome of the rules
described in the next paragraph. This rule shall not cause a job to fail in
validation if it would have succeeded with the rules of the next paragraph. If
the client omits the document-format-variants element, the server shall print
the document if the requested printer's document-formats-supported attribute
contains a DocFormat which differs from the specified document-format only in
the value of its document-format-variants. If the document-format-variants is
omitted from the printer document-formats-supported attribute, the printer
shall accept documents with any variant of the specified format. Similar rules
apply if the document-format-version element is omitted. If the client omits
the document-format-variants or document- format-version elements, the server
may supply a format- specific default. Such a default shall be one that could
have matched a document-format according to the rules of the preceding
paragraph. Proprietary values for the document-format, document-format-
variants, and document-format-version elements are assigned by the owners of
those formats. Annex F contains a set of document-formats and variants for
various commercially available formats and variants that are currently in
common use.
""")
_XcmDocFormatVersion_Type = CodeIndexedStringIndex
_XcmDocFormatVersion_Object = MibTableColumn
xcmDocFormatVersion = _XcmDocFormatVersion_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 8),
    _XcmDocFormatVersion_Type()
)
xcmDocFormatVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocFormatVersion.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocFormatVersion.setDescription("""\
For scan-to-file jobs, the xcmDocFormatVersion object specifies the document
format version desired as a result of the scan. ISO DPA: Document-format-
version The version distinguishes among successive releases of the same basic
format and variant. For example, successive versions of Xerox Interpress
include versions 2.0, 2.1, 3.0, 3.1, etc.
""")
_XcmDocOctetCount_Type = Cardinal32
_XcmDocOctetCount_Object = MibTableColumn
xcmDocOctetCount = _XcmDocOctetCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 9),
    _XcmDocOctetCount_Type()
)
xcmDocOctetCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocOctetCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocOctetCount.setDescription("""\
For the MIB, the value of the xcmDocOctetCount is used for both scan-to-file
and file-to-print jobs. In the case of scan-to-file jobs, the value starts at 0
and counts the number of octets scanned. ISO DPA: Octet-count This attribute
specifies the size of the document in octets.
""")
_XcmDocState_Type = XcmJMDocState
_XcmDocState_Object = MibTableColumn
xcmDocState = _XcmDocState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 12, 1, 1, 10),
    _XcmDocState_Type()
)
xcmDocState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocState.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocState.setDescription("""\
For the MIB, if the document is being scanned and printed in the same simple
job, the xcmDocState object represents the state of the document being printed,
since level 1 scan-to-print jobs must scan directly to the printer. ISO DPA:
Document-state This attribute identifies the current state of the document
[whether being scanned or printed.].
""")
_XcmDocPrintExt_ObjectIdentity = ObjectIdentity
xcmDocPrintExt = _XcmDocPrintExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13)
)
_XcmDocPrintExtTable_Object = MibTable
xcmDocPrintExtTable = _XcmDocPrintExtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1)
)
if mibBuilder.loadTexts:
    xcmDocPrintExtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintExtTable.setDescription("""\
A table of print-centric document information which is per document which in
turn is per job and which in turn is per (logical or physical) printer.
Document information applies to an individual document contained in the job.
The specification for most objects is taken directly from the ISO 10175
Document Printing Application (DPA) standard clause 9.3, Document Attributes
and is print-centric. However, this MIB is intended to be used with non-DPA
implementations, so only a small set of general DPA attributes have been
included here.
""")
_XcmDocPrintExtEntry_Object = MibTableRow
xcmDocPrintExtEntry = _XcmDocPrintExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1)
)
xcmDocPrintExtEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
    (0, "XEROX-COMMON-MIB", "xcmDocSequenceNumber"),
)
if mibBuilder.loadTexts:
    xcmDocPrintExtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintExtEntry.setDescription("""\
An entry exists in this table for each job in the device, no matter what the
state of the job is. Each printer is represented as a separate device entry in
the Host Resources MIB device table as a device of type 'printer'. The
management station references each job using the xcmJobIdentifierOnSystem
assigned by this (logical for spooling or physical for non-spooling) device
that accepted the job submission (by some other protocol). The management
station accesses each document in the job using the xcmDocSequenceNumber from
the xcmDocGenBasicTable. This table extends (for print jobs only) the Document
General Basic table in this MIB.
""")


class _XcmDocPrintDefaultMediumName_Type(InternationalDisplayString):
    """Custom type xcmDocPrintDefaultMediumName based on InternationalDisplayString"""
    subtypeSpec = InternationalDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmDocPrintDefaultMediumName_Type.__name__ = "InternationalDisplayString"
_XcmDocPrintDefaultMediumName_Object = MibTableColumn
xcmDocPrintDefaultMediumName = _XcmDocPrintDefaultMediumName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1, 1),
    _XcmDocPrintDefaultMediumName_Type()
)
xcmDocPrintDefaultMediumName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocPrintDefaultMediumName.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintDefaultMediumName.setDescription("""\
The value of this object is the name of the medium that is the default medium
for this document. A null string indicates that neither the submitting client,
nor the system, nor the printer has specified a default medium for this
document. NOTE: This attribute that is supplied by the job service requester is
localizable by the job service provider, since the job service provider must
understand and support the specified value. ISO DPA: Default-medium This
attribute identifies a medium that the server shall use as the medium default
for the pages of the document that require a specification. Standard values are
defined in the specification of the medium- identifier medium attribute. If the
page-media-select attribute is specified (either by the client or by a server
default, i.e., the page-media-select attribute of the initial-value-job object
specified by the logical or physical printer), then the server shall use the
page-media-select value to override the default-medium specification on a page
by page basis. The default-medium attribute may contain a value of id-val-
generic-none (see DPA 9.1.2) indicating that the server shall not use a default
medium. Instead, the server shall rely on lower precedence document attributes
(such as default-input- tray) for the media specification. If the document
data, itself, specifies media, such specification shall override the default-
medium attribute on a page by page basis. If the document data specifies media
which are not also values of media-used, then a printer may receive a document
which requires media that are not ready. In such a case, an implementation may
either abort the document or try printing the document on some alternative
medium, such as the default medium. A client has numerous ways to specify the
media to be used when printing a document and different document pages can be
specified in different ways. The client can specify the media in the document
contents or with attributes. Some attributes override the document contents,
and other attributes may be overridden by the document contents. In addition,
the client can specify the media by name or by the input-tray containing it.
Before printing each page of a document, the server determines the medium or
input-tray for that page by finding the first condition in the list of numbered
steps below that is satisfied. For this discussion, either the medium or the
input- tray is sufficient information: a) If page-media-select has a medium
value for the current page, use that medium, regardless of document contents
and other attributes. b) If input-tray-select has a value, use that tray. c) If
the document contents specify a medium, and that medium is the same as the
value of one of the original-medium elements in the media-substitution
attribute, then use the corresponding substitution-medium in the media-
substitution attribute. d) If the document contents specify a medium, use that
medium. e) If the document contents specify an input-tray, use that input-tray.
f) If the default-medium has a value, and the document format interpreter
allows its use, and that medium is the same as the value of one of the
original-medium elements in media- substitution attribute, then use the
corresponding substitution-medium in the media-substitution attribute. g) If
the default-medium has a value and the document format interpreter allows its
use, use the default-medium. h) If the default-input-tray has a value and the
document format interpreter allows its use, use the default-input-tray. i) Use
the medium or input-tray selected by the document format processor in the
printer. This selection is implementation-dependent.
""")
_XcmDocPrintDefaultInputIndex_Type = Cardinal16
_XcmDocPrintDefaultInputIndex_Object = MibTableColumn
xcmDocPrintDefaultInputIndex = _XcmDocPrintDefaultInputIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1, 2),
    _XcmDocPrintDefaultInputIndex_Type()
)
xcmDocPrintDefaultInputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocPrintDefaultInputIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintDefaultInputIndex.setDescription("""\
The value of this object is the index of the input sub-unit in the
prtInputTable in the printer MIB that is the default input tray for this
document. An index value of 0 indicates that neither the submitting client, the
print server, nor printer has specified a default input tray for this document.
The Printer MIB (RFC 1759) requires that input sub-unit indices remain stable
across successive device power cycles. ISO DPA: Default-input-tray This
attribute identifies an input-tray that the server shall use as the input-tray
default for the pages of the document that require a specification. The
correspondence between the simple-name of an input-tray (alphanumeric or
numeric) and the actual tray in the printer is printer-dependent, and a tray
named by such a simple-name may also have an OBJECT IDENTIFIER that names it as
well. A server may try to convert a simple-name received from a client to one
of the server's OIDs, depending on implementation. However, a server shall
always return an input- tray as an OID to the client if the server identifies
the input-tray using an OID. Examples: The simple-name strings: envelope, top,
2, or 02, or the OID value: id-val-input-tray-top. If the default-medium
attribute is specified (either by the client or by a server default, i.e., the
default-medium attribute of the initial-value-job object specified by the
logical or physical printer), then the server shall use the default-medium
value and shall ignore the default-input-tray attribute, if specified. If the
page-media-select attribute is specified (either by the client or by a server
default, i.e., the page-media-select attribute of the initial-value-job object
specified by the logical or physical printer), then the server shall use the
page-media-select value to override the default- input-tray specification on a
page by page basis. If the document data, itself, specifies media or input
trays, such specification shall override the default-input-tray attribute on a
page by page basis. If the document data specifies media or input-trays which
are not also values of media-used or input-trays-used, respectively, then a
printer may receive a document which requires media or input-trays which are
not ready. In such a case, an implementation may either abort the document or
try printing the document using some alternative input-tray, such as the
default input-tray. The following standard values are defined: top The top
input tray in the printer. (id- val-input-tray-top) middle The middle input
tray in the printer. (id- val-input-tray-middle) bottom The bottom input tray
in the printer. (id- val-input-tray-bottom) envelope The envelope input tray in
the printer. (id-val-input-tray-envelope) manual The manual feed input tray in
the printer. (id-val-input-tray-manual) large-capacity The large capacity input
tray in the printer. (id-val-input-tray-large- capacity) main The main input
tray (id-val-input-tray- main) side The side input tray (id-val-input-tray-
side)
""")


class _XcmDocPrintFinishing_Type(InternationalDisplayString):
    """Custom type xcmDocPrintFinishing based on InternationalDisplayString"""
    subtypeSpec = InternationalDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmDocPrintFinishing_Type.__name__ = "InternationalDisplayString"
_XcmDocPrintFinishing_Object = MibTableColumn
xcmDocPrintFinishing = _XcmDocPrintFinishing_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1, 3),
    _XcmDocPrintFinishing_Type()
)
xcmDocPrintFinishing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocPrintFinishing.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintFinishing.setDescription("""\
Specifies finishing to be performed on the document. NOTE: This attribute that
is supplied by the job service requester is localizable by the job service
provider, since the job service provider must understand and support the
specified value.
""")
_XcmDocPrintOutputMethod_Type = XcmJMDocOutputMethod
_XcmDocPrintOutputMethod_Object = MibTableColumn
xcmDocPrintOutputMethod = _XcmDocPrintOutputMethod_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1, 4),
    _XcmDocPrintOutputMethod_Type()
)
xcmDocPrintOutputMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocPrintOutputMethod.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintOutputMethod.setDescription("""\
This object is bit coded, so that multiple document output requests may be made
for the document. Each bit corresponds to one of the ISO DPA output OIDs. See
XcmJMDocOutputMethod textual convention for the algorithm that maps DPA OIDs to
bits. ISO DPA: Output This attribute identifies the output processing for the
media on which the document is to be printed.
""")


class _XcmDocPrintNumberUp_Type(InternationalDisplayString):
    """Custom type xcmDocPrintNumberUp based on InternationalDisplayString"""
    subtypeSpec = InternationalDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmDocPrintNumberUp_Type.__name__ = "InternationalDisplayString"
_XcmDocPrintNumberUp_Object = MibTableColumn
xcmDocPrintNumberUp = _XcmDocPrintNumberUp_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1, 5),
    _XcmDocPrintNumberUp_Type()
)
xcmDocPrintNumberUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocPrintNumberUp.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintNumberUp.setDescription("""\
For the MIB: this object is specified as a text string which can be a number,
e.g., '2' meaning the number of logical pages per side, or a name, e.g.,
'simple-2-up' meaning an imposition object in the system that specifies 2
logical pages per side. NOTE: This attribute that is supplied by the job
service requester is localizable by the job service provider, since the job
service provider must understand and support the specified value. ISO DPA:
number-up (excerpted) This attribute specifies the number of source page-images
to impose upon a single instance of a selected medium. The attribute can be
specified either by a number directly or by naming an imposition object which
specifies some particular number-up imposition. In general, only certain all-
numeric text values are valid for this attribute, depending upon the server and
printer implementations to which the print-request is directed. A text value of
'0' or 'none' shall suppress any server default number up, if any. This
attribute primarily controls the translation, scaling and rotation of page
images, but a site may choose to add embellishments, such as borders to each
logical page. A site may even choose to add an attribute to control the
presence or characteristics of such embellishments. The following standard text
values are defined: '0' This value suppresses any number-up operation or its
embellishments. '1' This value specifies that 1 logical page is to be imaged on
one surface of the medium, possibly with embellishments. '2' This value
specifies that 2 logical pages are to be imaged on one surface of the medium,
possibly with embellishments. '4' This value specifies that 4 logical pages are
to be imaged on one surface of the medium, possibly with embellishments. NOTE -
The value '0' or 'none' specifies that no convenience imposition functions
shall be performed; '0' or 'none' is needed to suppress any special number-up
operation because a value of '1' or 'simple-1-up' for some sites may cause the
server to alter the placement, or size of the page image, or to add
embellishments, such as borders or to rotate the page depending on content-
orientation. See ISO DPA number-up description for further details on the
semantics of number-up, including figures.
""")


class _XcmDocPrintSides_Type(Integer32):
    """Custom type xcmDocPrintSides based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_XcmDocPrintSides_Type.__name__ = "Integer32"
_XcmDocPrintSides_Object = MibTableColumn
xcmDocPrintSides = _XcmDocPrintSides_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1, 6),
    _XcmDocPrintSides_Type()
)
xcmDocPrintSides.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocPrintSides.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintSides.setDescription("""\
NOTE - The xcmDocPrintSides attribute is for print jobs. A scanner-specific
object, xcmDocScanSides is needed to be added when scanning is supported, so
that input and output sides can be specified independently. ISO DPA: Sides This
attribute specifies the number of printable surfaces of the medium to be
imaged.
""")
_XcmDocPrintCopyCount_Type = Cardinal32
_XcmDocPrintCopyCount_Object = MibTableColumn
xcmDocPrintCopyCount = _XcmDocPrintCopyCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1, 7),
    _XcmDocPrintCopyCount_Type()
)
xcmDocPrintCopyCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocPrintCopyCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintCopyCount.setDescription("""\
ISO DPA: Copy-count This attribute specifies the number of copies of the
documents, or of the selected pages of the document, to be printed. A value of
1 for copy-count shall generate a single human perceptible copy of the
electronic document. If a value of 0 is supplied [by the job service requester
and is supported by the job service provider], the job may be processed
normally, but no print output shall be produced or the server shall return an
unsupported-attribute-value AttributeError [to the job service requester, if a
copy-count of 0 is not supported].
""")
_XcmDocPrintCopiesCompleted_Type = Counter32
_XcmDocPrintCopiesCompleted_Object = MibTableColumn
xcmDocPrintCopiesCompleted = _XcmDocPrintCopiesCompleted_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 13, 1, 1, 8),
    _XcmDocPrintCopiesCompleted_Type()
)
xcmDocPrintCopiesCompleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmDocPrintCopiesCompleted.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocPrintCopiesCompleted.setDescription("""\
For the MIB: on job recovery after power failure or a crash, the value of
xcmDocPrintCopiesCompleted may be set to a lower value which would normally
violate the SNMP constraints of a Counter32 type. ISO DPA: Copies-completed
This attribute indicates the number of complete copies of this document that
have been printed. Some printers print multiple copies of each individual page
of a document, completing the printing of all copies at the same time, printing
as many of these pages as necessary to satisfy the copy count. The value of
copies-completed is 0 if printing has not started for this document.
""")
_XcmJobGenSpoolingBasic_ObjectIdentity = ObjectIdentity
xcmJobGenSpoolingBasic = _XcmJobGenSpoolingBasic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 14)
)
_XcmJobGenSpoolingBasicTable_Object = MibTable
xcmJobGenSpoolingBasicTable = _XcmJobGenSpoolingBasicTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 14, 1)
)
if mibBuilder.loadTexts:
    xcmJobGenSpoolingBasicTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenSpoolingBasicTable.setDescription("""\
A table of general job information per (logical or physical) device that is
independent of the type of device (printer, scanner, fax, ...) but does require
spooling of job (and document) instructions, but not necessarily of document-
content data. Job information applies to the job as a whole or to all its
documents. The specification for most objects is taken directly from the ISO
10175 Document Printing Application (DPA) standard clause 9.2, Job Attributes.
However, this MIB is intended to be used with non-DPA implementations, so only
a small set of general DPA attributes have been included here.
""")
_XcmJobGenSpoolingBasicEntry_Object = MibTableRow
xcmJobGenSpoolingBasicEntry = _XcmJobGenSpoolingBasicEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 14, 1, 1)
)
xcmJobGenBasicEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmJobGenSpoolingBasicEntry")
)
xcmJobGenSpoolingBasicEntry.setIndexNames(*xcmJobGenBasicEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmJobGenSpoolingBasicEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenSpoolingBasicEntry.setDescription("""\
An entry exists in this table for each job in the device, no matter what the
state of the job is. Each device is represented as a separate device entry in
the Host Resources MIB device table as a device of type 'printer', 'scanner',
'fax', etc. The management station references each job using the
xcmJobIdentifierOnSystem assigned by this logical (for spooling) device that
accepted the job submission (by some other protocol).
""")


class _XcmJobNumberOfJobResultSets_Type(Ordinal32):
    """Custom type xcmJobNumberOfJobResultSets based on Ordinal32"""
    defaultValue = 1


_XcmJobNumberOfJobResultSets_Object = MibTableColumn
xcmJobNumberOfJobResultSets = _XcmJobNumberOfJobResultSets_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 14, 1, 1, 1),
    _XcmJobNumberOfJobResultSets_Type()
)
xcmJobNumberOfJobResultSets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobNumberOfJobResultSets.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobNumberOfJobResultSets.setDescription("""\
ISO DPA: number-of-job-result-sets The hardcopy output of a print-job consists
of one or more job sets, each of which may be specified to be delivered to, or
held for, one particular recipient who is not necessarily the job creator. Each
job set may be specified to contain one or more job copies. Each job copy shall
contain one or more copies of each of the documents specified by means of the
Print operations that compose the job. For example, consider the following job
being submitted: results-profile: {delivery-address=Jones, job-copies=1},
{delivery-address=Smith, job-copies=2} documentA with copy-count=1 documentB
with copy-count=2
+-------------------------------------------------------------+ |
+----------------------------+ | | | +-------------+ | | | | | document A | | |
| | +-------------+ | | | | | document B | job copy | job result set #1 for
Jones | | | +-------------+ | | | | | document B | | | | | +-------------+ | |
| +----------------------------+ |
+-------------------------------------------------------------+
+-------------------------------------------------------------+ |
+----------------------------+ | | | +-------------+ | | | | | document A | | |
| | +-------------+ | | | | | document B | job copy | | | | +-------------+ | |
| | | document B | | | | | +-------------+ | | | +----------------------------+
| job result set #2 for Smith | | +----------------------------+ | | |
+-------------+ | | | | | document A | | | | | +-------------+ | | | | |
document B | job copy | | | | +-------------+ | | | | | document B | | | | |
+-------------+ | | | +----------------------------+ |
+-------------------------------------------------------------+
""")


class _XcmJobPriority_Type(Integer32):
    """Custom type xcmJobPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XcmJobPriority_Type.__name__ = "Integer32"
_XcmJobPriority_Object = MibTableColumn
xcmJobPriority = _XcmJobPriority_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 14, 1, 1, 2),
    _XcmJobPriority_Type()
)
xcmJobPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobPriority.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobPriority.setDescription("""\
For the MIB: A value of 0 means that the priority was not specified by the job
service requester and the system did not specify a default value. ISO DPA: Job-
priority This attribute specifies a priority for scheduling the print- job. It
is used by servers that employ a priority-based scheduling algorithm. A higher
value specifies a higher priority. The value 1 is defined to indicate the
lowest possible priority (a job which a priority-based scheduling algorithm
shall pass over in favor of higher priority jobs). The value 100 is defined to
indicate the highest possible priority. Priority is expected to be evenly or
'normally' distributed across this range. The mapping of vendor-defined
priority over this range is implementation- specific. [The following DPA
sentence is covered by the value of 0, since the DPA range is 1..100. A value
of 0 returned by an SNMP agent indicates the same semantics as ISO DPA
returning the job object without the job-priority attribute present:] The
omission of this attribute implies that the user places no constraints
concerning priority on the scheduling of the print-job.
""")
_XcmJobTotalOctetsHigh_Type = Cardinal64High
_XcmJobTotalOctetsHigh_Object = MibTableColumn
xcmJobTotalOctetsHigh = _XcmJobTotalOctetsHigh_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 14, 1, 1, 3),
    _XcmJobTotalOctetsHigh_Type()
)
xcmJobTotalOctetsHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobTotalOctetsHigh.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobTotalOctetsHigh.setDescription("""\
For the Job Monitoring MIB: two objects are used to represent a full 62-bit
value. The sign bit of each half is not used. This object is generalized for
use with input devices as well. ISO DPA: Total-job-octets [high 31 bits] This
attribute indicates the size of the job in octets, including document and job
copies. The server may update the value of this attribute after each document
has been transferred to the server or the server may provide this value after
all documents have been transferred to the server, depending on implementation.
In other words, while the job is in the pre-processing [building] state and
when the job is in the held state with the job-state-reasons containing a
document-needed value, the value of the total-job-octets job status attribute
depends on implementation and may not correctly reflect the size of the job. In
computing this value, the server shall include the multiplicative factors
contributed by the (1) copy-count document attribute, (2) the results-
profile.job-copies job attribute element and (3) multiple values of the
results- profile job attribute, independent of whether the printer can process
multiple copies of the job or document without making multiple passes over the
job or document data and independent of the value of the output document
attribute (page-collate vs. no-page-collate). Thus the server computation is
independent of the printer implementation and shall be: a) Document
contribution: Multiply each copy-count by the size of the document in octets.
b) Add each document contribution together c) Job result contribution: Multiply
the job size by the number job-copies in the result set. d) Add each job result
contribution together e) Multiply the value by the number of values in the
job's result-profile attribute.
""")
_XcmJobTotalOctetsLow_Type = Cardinal64Low
_XcmJobTotalOctetsLow_Object = MibTableColumn
xcmJobTotalOctetsLow = _XcmJobTotalOctetsLow_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 14, 1, 1, 4),
    _XcmJobTotalOctetsLow_Type()
)
xcmJobTotalOctetsLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobTotalOctetsLow.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobTotalOctetsLow.setDescription("""\
ISO DPA: Total-job-octets [low 31 bits] This attribute indicates the size of
the job in octets, including document and job copies. See xcmJobTotalOctetsHigh
for the specification.
""")


class _XcmJobInterveningJobs_Type(Integer32):
    """Custom type xcmJobInterveningJobs based on Integer32"""
    defaultValue = -2


_XcmJobInterveningJobs_Object = MibTableColumn
xcmJobInterveningJobs = _XcmJobInterveningJobs_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 14, 1, 1, 5),
    _XcmJobInterveningJobs_Type()
)
xcmJobInterveningJobs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobInterveningJobs.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobInterveningJobs.setDescription("""\
The number of jobs that are expected to complete before this job is completed
according to the implementation's queuing and processing algorithm if no other
jobs were to be submitted. In other words, this value is the job's queue
position. The agent SHALL return a value of 0 for this object when there are no
other jobs that are expected to complete before this job. A value of (-2) shall
be used when the number of intervening jobs is unknown. NOTE the ISO DPA
language does not include the case when multiple jobs are in the 'processing'
(or printing) state: ISO DPA: Intervening-jobs This attribute indicates the
number of other jobs to be processed before this job may be scheduled for
processing. The server shall set the value of this attribute to 0 when the job
begins processing.
""")
_XcmJobGenSpoolingExt_ObjectIdentity = ObjectIdentity
xcmJobGenSpoolingExt = _XcmJobGenSpoolingExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15)
)
_XcmJobGenSpoolingExtTable_Object = MibTable
xcmJobGenSpoolingExtTable = _XcmJobGenSpoolingExtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1)
)
if mibBuilder.loadTexts:
    xcmJobGenSpoolingExtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenSpoolingExtTable.setDescription("""\
A table of general extended job information per device that is independent of
the type of device but that does require a spooling implementation. Job
information applies to the job as a whole or to all its documents. The
specification for each object is taken directly from the ISO 10175 Document
Printing Application (DPA) standard clause 9.2, Job Attributes. However, this
MIB is intended to be used with non-DPA implementations, so only a small set of
general DPA attributes have been included here.
""")
_XcmJobGenSpoolingExtEntry_Object = MibTableRow
xcmJobGenSpoolingExtEntry = _XcmJobGenSpoolingExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1)
)
xcmJobGenBasicEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmJobGenSpoolingExtEntry")
)
xcmJobGenSpoolingExtEntry.setIndexNames(*xcmJobGenBasicEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmJobGenSpoolingExtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenSpoolingExtEntry.setDescription("""\
An entry exists in this table for each job in the (logical) device, no matter
what the state of the job is. Each device is represented as a separate device
entry in the Host Resources MIB device table as a device of type 'printer',
'scanner', 'fax', etc. The management station references each job using the
xcmJobIdentifierOnSystem assigned by this (logical) device that accepted the
job submission (by some other protocol). This table augments the Job General
Basic table in this MIB.
""")


class _XcmJobProcessAfter_Type(DateAndTime):
    """Custom type xcmJobProcessAfter based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmJobProcessAfter_Object = MibTableColumn
xcmJobProcessAfter = _XcmJobProcessAfter_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1, 1),
    _XcmJobProcessAfter_Type()
)
xcmJobProcessAfter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobProcessAfter.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobProcessAfter.setDescription("""\
Specifies the calendar date and time of day after which the server is to
process the job on the specified device. The server shall hold the job in the
held state until the specified date and time. NOTE: In this MIB, this object
applies to any type of job, not just print jobs and so this object is a
generalization of the ISO DPA attribute which is only for print jobs. ISO DPA:
Job-print-after This attribute specifies the calendar date and time of day
after which the print-job shall become a candidate to be scheduled for printing
[processing]. If the value of this attribute is in the future, the server shall
set the value of the job's current-job-state to held and add the job-print-
after-specified value to the job's job-state- reasons attribute and shall not
schedule the print-job for printing until the specified date and time has
passed. When the specified date and time arrives, the server shall remove the
job-print-after-specified value from the job's job-state- reason attribute and,
if no other reasons remain, shall change the job's current-job-state to pending
so that the job becomes a candidate for being scheduled on printer(s). [For
purposes of this MIB, the agent shall return the DEFVAL if the job did not
specify this attribute and disregard the next paragraph.] The server shall
assign an empty value (see DPA 9.1.2) to the job-print-after attribute when no
print after time has been assigned, so that the job shall be a candidate for
scheduling immediately.
""")


class _XcmJobDeadlineTime_Type(DateAndTime):
    """Custom type xcmJobDeadlineTime based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmJobDeadlineTime_Object = MibTableColumn
xcmJobDeadlineTime = _XcmJobDeadlineTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1, 3),
    _XcmJobDeadlineTime_Type()
)
xcmJobDeadlineTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobDeadlineTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobDeadlineTime.setDescription("""\
ISO DPA: job-deadline-time This attribute specifies the calendar date and time
of day by which the user desires the print-job to be completed. This attribute
is treated as a scheduling hint only. If the specified deadline time arrives
before completion of the job, the server shall generate the error-past-deadline
event for the job, but the current-job-state shall not be changed. This
attribute is intended for use by servers that implement some form of deadline
scheduling. [For purposes of this MIB, the agent shall return the DEFVAL if the
job did not specify this attribute and disregard the next paragraph.] The
server shall assign an empty value (see DPA 9.1.2) to the job-deadline-time
attribute when there is no deadline for the job.
""")


class _XcmJobDiscardTime_Type(DateAndTime):
    """Custom type xcmJobDiscardTime based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmJobDiscardTime_Object = MibTableColumn
xcmJobDiscardTime = _XcmJobDiscardTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1, 4),
    _XcmJobDiscardTime_Type()
)
xcmJobDiscardTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobDiscardTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobDiscardTime.setDescription("""\
ISO DPA: job-discard-time This attribute specifies the calendar date and time
of day at which the print-job should be discarded, whether or not the job has
printed. If this attribute is supported and the discard time has not arrived,
the server shall retain job and document attributes and status; the server is
not required to retain job document files if the job has completed processing
and has exceeded the job's job-retention-period. When the job-discard-time
arrives, the server shall set the job's job-retention-period to zero and shall
perform a CancelJob operation on the specified job. Whether or not the print-
job is discarded if the error-past-discard event occurs while the job is being
printed is implementation-dependent. [For purposes of this MIB, the agent shall
return the DEFVAL if the job did not specify this attribute and disregard the
next paragraph.] The server shall assign an empty value (see DPA 9.1.2) to the
job-discard-time attribute when there is no discard time for the job.
""")
_XcmJobRetentionPeriod_Type = Cardinal32
_XcmJobRetentionPeriod_Object = MibTableColumn
xcmJobRetentionPeriod = _XcmJobRetentionPeriod_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1, 5),
    _XcmJobRetentionPeriod_Type()
)
xcmJobRetentionPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobRetentionPeriod.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobRetentionPeriod.setUnits("seconds")
if mibBuilder.loadTexts:
    xcmJobRetentionPeriod.setDescription("""\
ISO DPA: job-retention-period This attribute specifies the minimum period [in
seconds] of time following the completion of job processing that the server
shall keep job attributes, document attributes, and document data. The server
may keep these attributes and data longer than the value of the job-retention-
period attribute. Job-retention-period specifies a lower bound on how long job
attributes, document attributes and document data shall be retained by a server
after printing [processing] has completed, whilst job-discard-time sets an
upper bound on retention of the job and document attributes independent of
whether the job is ever scheduled for, starts or completes printing
[processing]. In addition to providing status information to a user after a job
has completed printing [processing, the job-retention-period also provides the
mechanism for retaining job's document data after it has been printed
[processed], so that the job may be printed [processed] again, possibly with
modified attributes, such as the job-copies component of the job-results
attribute. However, the mechanism to reprint the job is outside the scope of
this part of ISO/IEC 10175. [See ResubmitJob in Part 3.]
""")
_XcmJobMessageToOperator_Type = CodeIndexedStringIndex
_XcmJobMessageToOperator_Object = MibTableColumn
xcmJobMessageToOperator = _XcmJobMessageToOperator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1, 6),
    _XcmJobMessageToOperator_Type()
)
xcmJobMessageToOperator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMessageToOperator.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMessageToOperator.setDescription("""\
ISO DPA: job-message-to-operator This attribute carries a message from the user
to the operator to indicate something about the processing of this print-job.
This message, unlike the job-start-message, is not necessarily related to other
job-scheduling attributes. The server shall make this message available to the
operator when the job has been accepted.
""")
_XcmJobMessageFromOperator_Type = CodeIndexedStringIndex
_XcmJobMessageFromOperator_Object = MibTableColumn
xcmJobMessageFromOperator = _XcmJobMessageFromOperator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1, 7),
    _XcmJobMessageFromOperator_Type()
)
xcmJobMessageFromOperator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMessageFromOperator.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMessageFromOperator.setDescription("""\
Xerox extension to ISO DPA: job-message-from-operator This attribute carries a
message from the operator to the user to indicate something about the
processing of this print-job. What additional notification methods are used, if
any, in addition to providing a value for this job attribute depends on
implementation.
""")
_XcmJobMessageFromAdministrator_Type = CodeIndexedStringIndex
_XcmJobMessageFromAdministrator_Object = MibTableColumn
xcmJobMessageFromAdministrator = _XcmJobMessageFromAdministrator_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1, 8),
    _XcmJobMessageFromAdministrator_Type()
)
xcmJobMessageFromAdministrator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMessageFromAdministrator.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMessageFromAdministrator.setDescription("""\
ISO DPA: Job-message-from-administrator This attribute provides a message from
an operator, system administrator or 'intelligent' process to indicate to the
user the reasons for modification or other management action taken on a job.
""")
_XcmJobPageCount_Type = Cardinal32
_XcmJobPageCount_Object = MibTableColumn
xcmJobPageCount = _XcmJobPageCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 15, 1, 1, 9),
    _XcmJobPageCount_Type()
)
xcmJobPageCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobPageCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobPageCount.setDescription("""\
ISO DPA: Job-page-count This attribute contains the number of source pages in
the job that the server expects to image. The server shall compute this value
by the following procedure: a) For each document in the job object, multiply
the value of document's page-count attribute by the value of its copy- count
attribute and call the result document-set-page-count. b) Add up all the
document-set-page-counts from the previous step and call this sum the job-copy-
page-count. c) For each job-result-set, multiply the value of job-copy- page-
count from the previous step by the value of job-copies element of the job-
result-set and call the result job-result- set-page-count. d) Add up all the
job-result-set-page-counts from the previous step and set this sum into the
job-page-count attribute. The value of this attribute is a measure of the
amount of computation involved. The accuracy of this value is dependent on the
accuracy of the page-count attribute in each document. If some documents have a
page-count value of 0, the server may set the value of this attribute to 0 and
not use it for scheduling.
""")
_XcmJobGenAccountingBasic_ObjectIdentity = ObjectIdentity
xcmJobGenAccountingBasic = _XcmJobGenAccountingBasic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16)
)
_XcmJobGenAccountingBasicTable_Object = MibTable
xcmJobGenAccountingBasicTable = _XcmJobGenAccountingBasicTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1)
)
if mibBuilder.loadTexts:
    xcmJobGenAccountingBasicTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenAccountingBasicTable.setDescription("""\
A table of general job accounting information per (logical if spooling or
physical if not spooling) device that is independent of the type of device
(printer, scanner, fax, ...). Job information applies to the job as a whole or
to all its documents. The specification for most objects is taken directly from
the ISO 10175 Document Printing Application (DPA) standard clause 9.2, Job
Attributes. However, this MIB is intended to be used with non-DPA
implementations, so only a small set of general DPA attributes have been
included here.
""")
_XcmJobGenAccountingBasicEntry_Object = MibTableRow
xcmJobGenAccountingBasicEntry = _XcmJobGenAccountingBasicEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1)
)
xcmJobGenBasicEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmJobGenAccountingBasicEntry")
)
xcmJobGenAccountingBasicEntry.setIndexNames(*xcmJobGenBasicEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmJobGenAccountingBasicEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobGenAccountingBasicEntry.setDescription("""\
An entry exists in this table for each job in the device, no matter what the
state of the job is. Each device is represented as a separate device entry in
the Host Resources MIB device table as a device of type 'printer', 'scanner',
'fax', etc. The management station references each job using the
xcmJobIdentifierOnSystem assigned by this logical (for spooling) or physical
(not spooling) device that accepted the job submission (by some other
protocol).
""")
_XcmJobAccountingBasicRowStatus_Type = RowStatus
_XcmJobAccountingBasicRowStatus_Object = MibTableColumn
xcmJobAccountingBasicRowStatus = _XcmJobAccountingBasicRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 1),
    _XcmJobAccountingBasicRowStatus_Type()
)
xcmJobAccountingBasicRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmJobAccountingBasicRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobAccountingBasicRowStatus.setDescription("""\
 Manages the status of this conceptual row in the
xcmJobGenAccountingBasicTable. When an accounting program has copied the data
from this row into an accounting system, the accounting program should set
destroy into this object in order to delete this row and all related xcmJob.,
and xcmXxxConsumed. rows, in order to indicate that this accounting and job
information is no longer needed to be retained by the SNMP agent.
""")
_XcmJobAccountingUserName_Type = CodeIndexedStringIndex
_XcmJobAccountingUserName_Object = MibTableColumn
xcmJobAccountingUserName = _XcmJobAccountingUserName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 2),
    _XcmJobAccountingUserName_Type()
)
xcmJobAccountingUserName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobAccountingUserName.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobAccountingUserName.setDescription("""\
This attribute specifies the name of the user for accounting purposes. See
xcmJobOriginator, xcmJobOwner, and xcmJobAuthorizationUserName for additional
user names for other purposes (and whose values may be different). An agent may
return the same value for all four attributes, if the printer or service does
not support all four concepts. NOTE: There is no corresponding ISO DPA
attribute (but there should be). Often the xcmJobAuthorizationUserName will be
the same as xcmJobAccountingUserName.
""")


class _XcmJobAccountingInformation_Type(OctetString):
    """Custom type xcmJobAccountingInformation based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmJobAccountingInformation_Type.__name__ = "OctetString"
_XcmJobAccountingInformation_Object = MibTableColumn
xcmJobAccountingInformation = _XcmJobAccountingInformation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 3),
    _XcmJobAccountingInformation_Type()
)
xcmJobAccountingInformation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobAccountingInformation.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobAccountingInformation.setDescription("""\
This object is intended as an accounting identifier, so that a user can
indicate to which account this job should be charged. A user can have any
number of accounts. For example, a lawyer might charge each customer
separately. The value can be text, binary, or encrypted. ISO DPA: Accounting-
information This attribute specifies information required by accounting
services (e.g. the account to be charged for any services rendered). Accounting
information is intended to be interpreted by an accounting system, and may be
opaque to the print service.
""")


class _XcmJobStartedProcessingTime_Type(DateAndTime):
    """Custom type xcmJobStartedProcessingTime based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmJobStartedProcessingTime_Object = MibTableColumn
xcmJobStartedProcessingTime = _XcmJobStartedProcessingTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 4),
    _XcmJobStartedProcessingTime_Type()
)
xcmJobStartedProcessingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobStartedProcessingTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobStartedProcessingTime.setDescription("""\
The time at which the job started to be processed by the intended device
(printed, scanned, faxed, etc.). NOTE: For use with this MIB, this attribute
has been generalized to be used with any device, whereas the corresponding ISO
DPA attribute is only started printing. A conforming implementation shall
return an actual date and time, rather than the DEFVAL, unless the
implementation cannot tell time. ISO DPA: Started-printing-time This attribute
indicates the time at which this job started printing [processing].
""")
_XcmJobImpressionsCompleted_Type = Counter32
_XcmJobImpressionsCompleted_Object = MibTableColumn
xcmJobImpressionsCompleted = _XcmJobImpressionsCompleted_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 5),
    _XcmJobImpressionsCompleted_Type()
)
xcmJobImpressionsCompleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobImpressionsCompleted.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpressionsCompleted.setDescription("""\
If no impressions are completed, this value shall remain 0. ISO DPA:
Impressions-completed This attribute indicates the number of impressions that
the printer engine(s) have placed on the media for the job. See the note in the
pages-completed attribute for the relationship of the pages-completed,
impressions-completed and media-sheets- completed attributes. The server shall
not reset its value during the processing of multiple copies of documents or
the job. Since this attribute is intended to measure the progress of a job, the
value shall include repeated pages due to multiple copies. When the job
completes, this attribute should contain the value of the total number of
impressions that the printer made for the print-job. The accuracy of this value
is implementation-dependent. It is expected that the value reported is never
greater than the actual value. This attribute may not be supported for all
printers and all page description languages. The value of this attribute shall
be 0 if printing [processing] has not started for this job.
""")
_XcmJobMediaSheetsCompleted_Type = Counter32
_XcmJobMediaSheetsCompleted_Object = MibTableColumn
xcmJobMediaSheetsCompleted = _XcmJobMediaSheetsCompleted_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 6),
    _XcmJobMediaSheetsCompleted_Type()
)
xcmJobMediaSheetsCompleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobMediaSheetsCompleted.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobMediaSheetsCompleted.setDescription("""\
If no media sheets are completed, this value shall remain 0. ISO DPA: Media-
sheets-completed This attribute indicates the number of sheets of media that
the printer(s) have completed printing for the job. See the note in the pages-
completed attribute for the relationship of the pages-completed, impressions-
completed and media-sheets- completed attributes. The server shall not reset
its value during the processing of multiple copies of documents or the job.
Since this attribute is intended to measure the progress of a job, the value
shall include repeated pages due to multiple copies. When the job completes,
this attribute should contain the value of the total number of sheets of media
used for the print-job. The accuracy of this value is implementation-dependent.
It is expected that the value reported is never greater than the actual value.
This attribute may not be supported for all printers and all page description
languages. The value of this attribute shall be 0 if printing has not started
for this job.
""")


class _XcmJobCompletionTime_Type(DateAndTime):
    """Custom type xcmJobCompletionTime based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmJobCompletionTime_Object = MibTableColumn
xcmJobCompletionTime = _XcmJobCompletionTime_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 7),
    _XcmJobCompletionTime_Type()
)
xcmJobCompletionTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobCompletionTime.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobCompletionTime.setDescription("""\
A conforming implementation shall return an actual date and time, rather than
the DEFVAL, unless the implementation cannot tell time. ISO DPA: Completion-
time This attribute indicates the time at which this job completed. Providing
this time is useful for jobs which are retained after printing.
""")


class _XcmJobWorkUnitType_Type(XcmHrDevTrafficUnit):
    """Custom type xcmJobWorkUnitType based on XcmHrDevTrafficUnit"""


_XcmJobWorkUnitType_Object = MibTableColumn
xcmJobWorkUnitType = _XcmJobWorkUnitType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 8),
    _XcmJobWorkUnitType_Type()
)
xcmJobWorkUnitType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobWorkUnitType.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobWorkUnitType.setDescription("""\
Xerox extension This attribute indicates the type of work that is being
accounted for. It shall be different from pages, sheets, or impressions, which
already have their own objects.
""")
_XcmJobUnitsOfWorkCompleted_Type = Counter32
_XcmJobUnitsOfWorkCompleted_Object = MibTableColumn
xcmJobUnitsOfWorkCompleted = _XcmJobUnitsOfWorkCompleted_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 16, 1, 1, 9),
    _XcmJobUnitsOfWorkCompleted_Type()
)
xcmJobUnitsOfWorkCompleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobUnitsOfWorkCompleted.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobUnitsOfWorkCompleted.setDescription("""\
Xerox extension: The number of work units completed. See xcmJobWorkUnitType to
determine what is being counted.
""")
_XcmMediaConsumed_ObjectIdentity = ObjectIdentity
xcmMediaConsumed = _XcmMediaConsumed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 17)
)
_XcmMediaConsumedTable_Object = MibTable
xcmMediaConsumedTable = _XcmMediaConsumedTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 17, 1)
)
if mibBuilder.loadTexts:
    xcmMediaConsumedTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmMediaConsumedTable.setDescription("""\
This table contains pairs of media indexes and the number of sheets of that
media consumed by this job.
""")
_XcmMediaConsumedEntry_Object = MibTableRow
xcmMediaConsumedEntry = _XcmMediaConsumedEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 17, 1, 1)
)
xcmMediaConsumedEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
    (0, "XEROX-COMMON-MIB", "xcmMediaConsumedIndex"),
)
if mibBuilder.loadTexts:
    xcmMediaConsumedEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmMediaConsumedEntry.setDescription("""\
Entries may exist in the table for each device index in the Host Resource MIB
whose device type is `printer', 'fax', etc., and for each job.
""")
_XcmMediaConsumedIndex_Type = Ordinal16
_XcmMediaConsumedIndex_Object = MibTableColumn
xcmMediaConsumedIndex = _XcmMediaConsumedIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 17, 1, 1, 1),
    _XcmMediaConsumedIndex_Type()
)
xcmMediaConsumedIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmMediaConsumedIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmMediaConsumedIndex.setDescription("""\
A unique value used by the device to identify this medium entry in this job.
For devices and systems that ensure that jobs are not lost across crashes and
power cycles, these values shall remain stable across successive device power
cycles. However, if a (low-end) device is not ensuring that job are persistent
across crashes and power cycles, these index values need not remain stable
across such crashes or power cycles.
""")
_XcmMediaConsumedRowStatus_Type = RowStatus
_XcmMediaConsumedRowStatus_Object = MibTableColumn
xcmMediaConsumedRowStatus = _XcmMediaConsumedRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 17, 1, 1, 2),
    _XcmMediaConsumedRowStatus_Type()
)
xcmMediaConsumedRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmMediaConsumedRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmMediaConsumedRowStatus.setDescription("""\
Manages the status of this conceptual row in the xcmMediaConsumedTable. When an
accounting program has copied the data from this row into an accounting system,
the accounting program should delete this row in order to indicate that this
accounting information is no longer needed to be retained by the SNMP agent.
Since the accounting data may be of interest to end-users, the accounting
program may want to wait for some period before deleting the row. If the
accounting table becomes filled up so that the agent is unable to add new
entries, a device may either refuse to accept new jobs, so that the valuable
revenue stream is not lost, or may remove the oldest entry in the display and
add the new job's accounting data.
""")


class _XcmMediaConsumedType_Type(XcmJMMediumType):
    """Custom type xcmMediaConsumedType based on XcmJMMediumType"""


_XcmMediaConsumedType_Object = MibTableColumn
xcmMediaConsumedType = _XcmMediaConsumedType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 17, 1, 1, 3),
    _XcmMediaConsumedType_Type()
)
xcmMediaConsumedType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmMediaConsumedType.setStatus("current")
if mibBuilder.loadTexts:
    xcmMediaConsumedType.setDescription("""\
This attribute indicates the medium type that has been consumed by the
device(s) for this job, e.g. stationery, envelope, transparency, etc.
""")
_XcmMediaConsumedName_Type = CodeIndexedStringIndex
_XcmMediaConsumedName_Object = MibTableColumn
xcmMediaConsumedName = _XcmMediaConsumedName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 17, 1, 1, 4),
    _XcmMediaConsumedName_Type()
)
xcmMediaConsumedName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmMediaConsumedName.setStatus("current")
if mibBuilder.loadTexts:
    xcmMediaConsumedName.setDescription("""\
This attribute indicates the name of the medium that has been consumed by the
device(s) for this job, e.g. letter-white, iso-a4-white, iso-a4-blanc, monarch-
envelope, iso-a4-transparent, etc. ISO DPA assigns OIDs to medium names, but
also allows the SA to define new media using text strings. Hence, the object in
this MIB is a text string, so that the SA can define additional medium names as
needed.
""")
_XcmMediaConsumedSheetCount_Type = Counter32
_XcmMediaConsumedSheetCount_Object = MibTableColumn
xcmMediaConsumedSheetCount = _XcmMediaConsumedSheetCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 17, 1, 1, 5),
    _XcmMediaConsumedSheetCount_Type()
)
xcmMediaConsumedSheetCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmMediaConsumedSheetCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmMediaConsumedSheetCount.setDescription("""\
This attribute indicates the number of sheets of the medium that have been
consumed by the device(s) for this job.
""")
_XcmColorImpsConsumed_ObjectIdentity = ObjectIdentity
xcmColorImpsConsumed = _XcmColorImpsConsumed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 18)
)
_XcmColorImpsConsumedTable_Object = MibTable
xcmColorImpsConsumedTable = _XcmColorImpsConsumedTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 18, 1)
)
if mibBuilder.loadTexts:
    xcmColorImpsConsumedTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedTable.setDescription("""\
This table contains pairs of colorant indexes and the number of impressions of
that colorant consumed by this job.
""")
_XcmColorImpsConsumedEntry_Object = MibTableRow
xcmColorImpsConsumedEntry = _XcmColorImpsConsumedEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 18, 1, 1)
)
xcmColorImpsConsumedEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
    (0, "XEROX-COMMON-MIB", "xcmColorImpsConsumedIndex"),
)
if mibBuilder.loadTexts:
    xcmColorImpsConsumedEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedEntry.setDescription("""\
Entries may exist in the table for each device index whose device type is
'printer', 'fax', etc. and for each job.
""")
_XcmColorImpsConsumedIndex_Type = Ordinal16
_XcmColorImpsConsumedIndex_Object = MibTableColumn
xcmColorImpsConsumedIndex = _XcmColorImpsConsumedIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 18, 1, 1, 1),
    _XcmColorImpsConsumedIndex_Type()
)
xcmColorImpsConsumedIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedIndex.setDescription("""\
A unique value used by the printer to identify this colorant entry for this
job. For devices and systems that ensure that jobs are not lost across crashes
and power cycles, these values shall remain stable across successive device
power cycles. However, if a (low-end) device is not ensuring that job are
persistent across crashes and power cycles, these index values need not remain
stable across such crashes or power cycles.
""")
_XcmColorImpsConsumedRowStatus_Type = RowStatus
_XcmColorImpsConsumedRowStatus_Object = MibTableColumn
xcmColorImpsConsumedRowStatus = _XcmColorImpsConsumedRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 18, 1, 1, 2),
    _XcmColorImpsConsumedRowStatus_Type()
)
xcmColorImpsConsumedRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedRowStatus.setDescription("""\
Manages the status of this conceptual row in the xcmColorImpsConsumedTable.
When an accounting program has copied the data from this row into an accounting
system, the accounting program should delete this row in order to indicate that
this accounting information is no longer needed to be retained by the SNMP
agent.
""")
_XcmColorImpsConsumedTypeIndex_Type = Ordinal16
_XcmColorImpsConsumedTypeIndex_Object = MibTableColumn
xcmColorImpsConsumedTypeIndex = _XcmColorImpsConsumedTypeIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 18, 1, 1, 3),
    _XcmColorImpsConsumedTypeIndex_Type()
)
xcmColorImpsConsumedTypeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedTypeIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedTypeIndex.setDescription("""\
This attribute indicates one of the colorant type (index into the
prtColorantsTable in the Printer MIB) that have been consumed by the printer(s)
for this print job.
""")
_XcmColorImpsConsumedCount_Type = Counter32
_XcmColorImpsConsumedCount_Object = MibTableColumn
xcmColorImpsConsumedCount = _XcmColorImpsConsumedCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 18, 1, 1, 4),
    _XcmColorImpsConsumedCount_Type()
)
xcmColorImpsConsumedCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmColorImpsConsumedCount.setDescription("""\
This attribute indicates the number of impressions that have been consumed by
the printer(s) for this print job and this colorant. For implementations that
make a separate impression for each colorant used shall increment this count
once for each colorant, so that the total number of xcmColorImpsConsumedCount
for the job will be a multiple of the xcmJobImpressionsCompleted value.
""")
_XcmJobAlert_ObjectIdentity = ObjectIdentity
xcmJobAlert = _XcmJobAlert_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 19)
)
_XcmJobV1AlertNew_ObjectIdentity = ObjectIdentity
xcmJobV1AlertNew = _XcmJobV1AlertNew_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 19, 4)
)
if mibBuilder.loadTexts:
    xcmJobV1AlertNew.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobV1AlertNew.setReference("""\
See SNMPv2 'xcmJobV2AlertNew' trap definitions below for 'special semantics'.
""")
if mibBuilder.loadTexts:
    xcmJobV1AlertNew.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever the
state of a job changes.
""")
_XcmJobV2AlertPrefixNew_ObjectIdentity = ObjectIdentity
xcmJobV2AlertPrefixNew = _XcmJobV2AlertPrefixNew_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 19, 4, 0)
)
_XcmDocAlert_ObjectIdentity = ObjectIdentity
xcmDocAlert = _XcmDocAlert_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 20)
)
_XcmDocV1AlertNew_ObjectIdentity = ObjectIdentity
xcmDocV1AlertNew = _XcmDocV1AlertNew_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 20, 4)
)
if mibBuilder.loadTexts:
    xcmDocV1AlertNew.setStatus("current")
if mibBuilder.loadTexts:
    xcmDocV1AlertNew.setReference("""\
See SNMPv2 'xcmDocV2AlertNew' trap definitions below for 'special semantics'.
""")
if mibBuilder.loadTexts:
    xcmDocV1AlertNew.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever the
state of a document changes.
""")
_XcmDocV2AlertPrefixNew_ObjectIdentity = ObjectIdentity
xcmDocV2AlertPrefixNew = _XcmDocV2AlertPrefixNew_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 20, 4, 0)
)
_XcmJobImpsByMediumSize_ObjectIdentity = ObjectIdentity
xcmJobImpsByMediumSize = _XcmJobImpsByMediumSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21)
)
_XcmJobImpsByMediumSizeTable_Object = MibTable
xcmJobImpsByMediumSizeTable = _XcmJobImpsByMediumSizeTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21, 1)
)
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeTable.setDescription("""\
This table contains tuples of medium size, count-type, and the number of
impressions counted by count-type on that medium consumed by this job.
""")
_XcmJobImpsByMediumSizeEntry_Object = MibTableRow
xcmJobImpsByMediumSizeEntry = _XcmJobImpsByMediumSizeEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21, 1, 1)
)
xcmJobImpsByMediumSizeEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
    (0, "XEROX-COMMON-MIB", "xcmJobImpsByMediumSizeIndex"),
)
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeEntry.setDescription("""\
This entry has one tuple of medium size, count-type, and the number of
impressions counted by count-type on that medium consumed by this job.
""")
_XcmJobImpsByMediumSizeIndex_Type = Ordinal16
_XcmJobImpsByMediumSizeIndex_Object = MibTableColumn
xcmJobImpsByMediumSizeIndex = _XcmJobImpsByMediumSizeIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21, 1, 1, 1),
    _XcmJobImpsByMediumSizeIndex_Type()
)
xcmJobImpsByMediumSizeIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeIndex.setDescription("""\
A unique value used by the device to identify this impressions-by-medium-size
entry in this job. For devices and systems that ensure that jobs are not lost
across crashes and power cycles, these values shall remain stable across
successive device power cycles. However, if a (low-end) device is not ensuring
that job are persistent across crashes and power cycles, these index values
need not remain stable across such crashes or power cycles.
""")
_XcmJobImpsByMediumSizeRowStatus_Type = RowStatus
_XcmJobImpsByMediumSizeRowStatus_Object = MibTableColumn
xcmJobImpsByMediumSizeRowStatus = _XcmJobImpsByMediumSizeRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21, 1, 1, 2),
    _XcmJobImpsByMediumSizeRowStatus_Type()
)
xcmJobImpsByMediumSizeRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeRowStatus.setDescription("""\
Manages the status of this conceptual row in the xcmJobImpsByMediumSizeTable.
When an accounting program has copied the data from this row into an accounting
system, the accounting program should delete this row in order to indicate that
this accounting information is no longer needed to be retained by the SNMP
agent. Since the accounting data may be of interest to end-users, the
accounting program may want to wait for some period before deleting the row. If
the accounting table becomes filled up so that the agent is unable to add new
entries, a device may either refuse to accept new jobs, so that the valuable
revenue stream is not lost, or may remove the oldest entry in the display and
add the new job's accounting data.
""")


class _XcmJobImpsByMediumSizeMediumSize_Type(XcmPrtMediumSize):
    """Custom type xcmJobImpsByMediumSizeMediumSize based on XcmPrtMediumSize"""


_XcmJobImpsByMediumSizeMediumSize_Object = MibTableColumn
xcmJobImpsByMediumSizeMediumSize = _XcmJobImpsByMediumSizeMediumSize_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21, 1, 1, 3),
    _XcmJobImpsByMediumSizeMediumSize_Type()
)
xcmJobImpsByMediumSizeMediumSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeMediumSize.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeMediumSize.setDescription("""\
This attribute indicates the medium size that has been produced by the
device(s) for this job, e.g. naLetter(1000), isoA4(1024), jisB4(1084), etc.
""")


class _XcmJobImpsByMediumSizeCountType_Type(XcmJMImpsCountType):
    """Custom type xcmJobImpsByMediumSizeCountType based on XcmJMImpsCountType"""


_XcmJobImpsByMediumSizeCountType_Object = MibTableColumn
xcmJobImpsByMediumSizeCountType = _XcmJobImpsByMediumSizeCountType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21, 1, 1, 4),
    _XcmJobImpsByMediumSizeCountType_Type()
)
xcmJobImpsByMediumSizeCountType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeCountType.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeCountType.setDescription("""\
This attribute indicates the count-type that is how to count impressions
produced by the device(s) for this job, e.g. blackAndWhiteCount,
highlightColorCount, fullColorCount, etc.
""")
_XcmJobImpsByMediumSizeCount_Type = Counter32
_XcmJobImpsByMediumSizeCount_Object = MibTableColumn
xcmJobImpsByMediumSizeCount = _XcmJobImpsByMediumSizeCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21, 1, 1, 5),
    _XcmJobImpsByMediumSizeCount_Type()
)
xcmJobImpsByMediumSizeCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeCount.setDescription("""\
This attribute indicates the number of impressions by medium size, count-type,
and quality-type for the job, which are specified respectively by
xcmJobImpsByMediumSizeMediumSize, xcmJobImpsByMediumSizeCountType, and
xcmJobImpsByMediumSizeCountQuality.
""")


class _XcmJobImpsByMediumSizeCountQuality_Type(XcmPrtPrintQuality):
    """Custom type xcmJobImpsByMediumSizeCountQuality based on XcmPrtPrintQuality"""


_XcmJobImpsByMediumSizeCountQuality_Object = MibTableColumn
xcmJobImpsByMediumSizeCountQuality = _XcmJobImpsByMediumSizeCountQuality_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 21, 1, 1, 6),
    _XcmJobImpsByMediumSizeCountQuality_Type()
)
xcmJobImpsByMediumSizeCountQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeCountQuality.setStatus("current")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeCountQuality.setReference("""\
 xcmPrtInterpPrintQuality, from 16prtx.mib
""")
if mibBuilder.loadTexts:
    xcmJobImpsByMediumSizeCountQuality.setDescription("""\
This attribute indicates the quality-type used for counting impressions
produced by the device(s) for this job, e.g., draft, normal, high, etc.
""")
_XcmCommsEngineTC_ObjectIdentity = ObjectIdentity
xcmCommsEngineTC = _XcmCommsEngineTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 60)
)
if mibBuilder.loadTexts:
    xcmCommsEngineTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineTC.setDescription("""\
Version: 5.10.pub The TC module for textual conventions, enumerated types,
OIDs, and other volatile elements of the companion Communications Engine MIB,
which supports detailed protocol stack graphing, and active management of
communications protocol stacks, communications end system applications,
communications intermediate systems, and communications gateways for network
accessible host systems. Copyright (C) 1995-2002 Xerox Corporation. All Rights
Reserved.
""")
_XCmCommsEngineDummy_ObjectIdentity = ObjectIdentity
xCmCommsEngineDummy = _XCmCommsEngineDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999)
)
_XCmCommsMgmtCommandRequest_Type = XcmCommsMgmtCommandRequest
_XCmCommsMgmtCommandRequest_Object = MibScalar
xCmCommsMgmtCommandRequest = _XCmCommsMgmtCommandRequest_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 1),
    _XCmCommsMgmtCommandRequest_Type()
)
xCmCommsMgmtCommandRequest.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsMgmtCommandRequest.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsMgmtCommandRequest.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsMgmtCommandData_Type = XcmCommsMgmtCommandData
_XCmCommsMgmtCommandData_Object = MibScalar
xCmCommsMgmtCommandData = _XCmCommsMgmtCommandData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 2),
    _XCmCommsMgmtCommandData_Type()
)
xCmCommsMgmtCommandData.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsMgmtCommandData.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsMgmtCommandData.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsMgmtState_Type = XcmCommsMgmtState
_XCmCommsMgmtState_Object = MibScalar
xCmCommsMgmtState = _XCmCommsMgmtState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 3),
    _XCmCommsMgmtState_Type()
)
xCmCommsMgmtState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsMgmtState.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsMgmtState.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsMgmtConditions_Type = XcmCommsMgmtConditions
_XCmCommsMgmtConditions_Object = MibScalar
xCmCommsMgmtConditions = _XCmCommsMgmtConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 4),
    _XCmCommsMgmtConditions_Type()
)
xCmCommsMgmtConditions.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsMgmtConditions.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsMgmtConditions.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsStackPosition_Type = XcmCommsStackPosition
_XCmCommsStackPosition_Object = MibScalar
xCmCommsStackPosition = _XCmCommsStackPosition_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 5),
    _XCmCommsStackPosition_Type()
)
xCmCommsStackPosition.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsStackPosition.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsStackPosition.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsStackExtPurpose_Type = XcmCommsStackExtPurpose
_XCmCommsStackExtPurpose_Object = MibScalar
xCmCommsStackExtPurpose = _XCmCommsStackExtPurpose_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 6),
    _XCmCommsStackExtPurpose_Type()
)
xCmCommsStackExtPurpose.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsStackExtPurpose.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsStackExtPurpose.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsStackExtRole_Type = XcmCommsStackExtRole
_XCmCommsStackExtRole_Object = MibScalar
xCmCommsStackExtRole = _XCmCommsStackExtRole_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 7),
    _XCmCommsStackExtRole_Type()
)
xCmCommsStackExtRole.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsStackExtRole.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsStackExtRole.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsStackExtSuite_Type = XcmCommsStackExtSuite
_XCmCommsStackExtSuite_Object = MibScalar
xCmCommsStackExtSuite = _XCmCommsStackExtSuite_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 8),
    _XCmCommsStackExtSuite_Type()
)
xCmCommsStackExtSuite.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsStackExtSuite.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsStackExtSuite.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsStackExtSuiteVersion_Type = XcmCommsStackExtSuiteVersion
_XCmCommsStackExtSuiteVersion_Object = MibScalar
xCmCommsStackExtSuiteVersion = _XCmCommsStackExtSuiteVersion_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 9),
    _XCmCommsStackExtSuiteVersion_Type()
)
xCmCommsStackExtSuiteVersion.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsStackExtSuiteVersion.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsStackExtSuiteVersion.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsStackExtLayer_Type = XcmCommsStackExtLayer
_XCmCommsStackExtLayer_Object = MibScalar
xCmCommsStackExtLayer = _XCmCommsStackExtLayer_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 10),
    _XCmCommsStackExtLayer_Type()
)
xCmCommsStackExtLayer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsStackExtLayer.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsStackExtLayer.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsStackExtProtocol_Type = XcmCommsStackExtProtocol
_XCmCommsStackExtProtocol_Object = MibScalar
xCmCommsStackExtProtocol = _XCmCommsStackExtProtocol_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 11),
    _XCmCommsStackExtProtocol_Type()
)
xCmCommsStackExtProtocol.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsStackExtProtocol.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsStackExtProtocol.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsAddressExtForm_Type = XcmCommsAddressExtForm
_XCmCommsAddressExtForm_Object = MibScalar
xCmCommsAddressExtForm = _XCmCommsAddressExtForm_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 12),
    _XCmCommsAddressExtForm_Type()
)
xCmCommsAddressExtForm.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsAddressExtForm.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsAddressExtForm.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsAddressExtScope_Type = XcmCommsAddressExtScope
_XCmCommsAddressExtScope_Object = MibScalar
xCmCommsAddressExtScope = _XCmCommsAddressExtScope_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 13),
    _XCmCommsAddressExtScope_Type()
)
xCmCommsAddressExtScope.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsAddressExtScope.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsAddressExtScope.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsAddressExtFanout_Type = XcmCommsAddressExtFanout
_XCmCommsAddressExtFanout_Object = MibScalar
xCmCommsAddressExtFanout = _XCmCommsAddressExtFanout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 14),
    _XCmCommsAddressExtFanout_Type()
)
xCmCommsAddressExtFanout.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsAddressExtFanout.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsAddressExtFanout.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsEngineGroupSupport_Type = XcmCommsEngineGroupSupport
_XCmCommsEngineGroupSupport_Object = MibScalar
xCmCommsEngineGroupSupport = _XCmCommsEngineGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 60, 999, 15),
    _XCmCommsEngineGroupSupport_Type()
)
xCmCommsEngineGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsEngineGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsEngineGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XcmCommsEngineMIB_ObjectIdentity = ObjectIdentity
xcmCommsEngineMIB = _XcmCommsEngineMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61)
)
if mibBuilder.loadTexts:
    xcmCommsEngineMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineMIB.setDescription("""\
Version: 5.11.pub The MIB module for detailed protocol stack graphing, and
active management of communications protocol stacks, communications end system
applications, communications intermediate systems, and communications gateways
for network accessible host systems. Usage: Note that throughout this MIB
module, the INDEX clauses referring to 'hrDeviceIndex' for the 'hrDeviceTable'
(Devices Group) of the Host Resources MIB (RFC 2790) SHALL specify host system
CPUs (ie, 'hrDeviceProcessor') and SHALL NOT specify ANY other 'hrDeviceType'.
Usage: The object 'xcmCommsStackXrefHrCommDevIndex' in the Comms Stack Xref
Group of this MIB MAY be used to specify (for 'bottom' protocol stack layers)
the corresponding value of 'hrDeviceIndex' for network, modem, serial port, and
parallel port devices. And the object 'xcmCommsStackXrefIfIndex' MAY be used to
specify the value of 'ifIndex' for the corresponding entry in the MIB-II
'ifTable' (ie, 'network interfaces'). Copyright (C) 1995-2002 Xerox
Corporation. All Rights Reserved.
""")
_XcmCommsEngineMIBConformance_ObjectIdentity = ObjectIdentity
xcmCommsEngineMIBConformance = _XcmCommsEngineMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2)
)
_XcmCommsEngineMIBGroups_ObjectIdentity = ObjectIdentity
xcmCommsEngineMIBGroups = _XcmCommsEngineMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2)
)
_XcmCommsEngine_ObjectIdentity = ObjectIdentity
xcmCommsEngine = _XcmCommsEngine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3)
)
_XcmCommsEngineTable_Object = MibTable
xcmCommsEngineTable = _XcmCommsEngineTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2)
)
if mibBuilder.loadTexts:
    xcmCommsEngineTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineTable.setDescription("""\
A table of the communications engines installed and (possibly) running on
platforms (ie, CPUs) on this host system.
""")
_XcmCommsEngineEntry_Object = MibTableRow
xcmCommsEngineEntry = _XcmCommsEngineEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1)
)
xcmCommsEngineEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsEngineEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineEntry.setDescription("""\
An entry for a communications engine installed and (possibly) running on a
platform (ie, CPU) on this host system. Usage: Note that values of
'hrDeviceIndex' used to reference entries in the 'xcmCommsEngineTable' SHALL
reference entries in the 'hrDeviceTable' with 'hrDeviceType' equal to
'hrDeviceProcessor' (representing host system CPUs and therefore also having
corresponding entries in the 'hrProcessorTable').
""")
_XcmCommsEngineRowStatus_Type = RowStatus
_XcmCommsEngineRowStatus_Object = MibTableColumn
xcmCommsEngineRowStatus = _XcmCommsEngineRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 1),
    _XcmCommsEngineRowStatus_Type()
)
xcmCommsEngineRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsEngineTable'.
""")


class _XcmCommsEngineName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmCommsEngineName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmCommsEngineName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmCommsEngineName_Object = MibTableColumn
xcmCommsEngineName = _XcmCommsEngineName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 2),
    _XcmCommsEngineName_Type()
)
xcmCommsEngineName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineName.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineName.setDescription("""\
Human-readable name, used by system administrators and end users to identify
this communications engine for systems management. Usage: This name SHOULD be
the one normally used in a command shell for control of this communications
engine.
""")
_XcmCommsEngineStackLast_Type = Cardinal32
_XcmCommsEngineStackLast_Object = MibTableColumn
xcmCommsEngineStackLast = _XcmCommsEngineStackLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 3),
    _XcmCommsEngineStackLast_Type()
)
xcmCommsEngineStackLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineStackLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineStackLast.setDescription("""\
The last entry index (regardless of its current state) in the
'xcmCommsStackTable' of this communications engine, on this host system. Usage:
The last entry index explicitly bounds the valid range of 'xcmCommsStackIndex'.
""")
_XcmCommsEngineMuxLast_Type = Cardinal32
_XcmCommsEngineMuxLast_Object = MibTableColumn
xcmCommsEngineMuxLast = _XcmCommsEngineMuxLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 4),
    _XcmCommsEngineMuxLast_Type()
)
xcmCommsEngineMuxLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineMuxLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineMuxLast.setDescription("""\
The last entry index (regardless of its current state) in the
'xcmCommsMuxTable' of this communications engine, on this host system. Usage:
The last entry index explicitly bounds the valid range of 'xcmCommsMuxIndex'.
""")
_XcmCommsEngineAddressLast_Type = Cardinal32
_XcmCommsEngineAddressLast_Object = MibTableColumn
xcmCommsEngineAddressLast = _XcmCommsEngineAddressLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 6),
    _XcmCommsEngineAddressLast_Type()
)
xcmCommsEngineAddressLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineAddressLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineAddressLast.setDescription("""\
The last entry index (regardless of its current state) in the
'xcmCommsAddressTable' of this communications engine, on this host system.
Usage: The last entry index explicitly bounds the valid range of
'xcmCommsAddressIndex'.
""")
_XcmCommsEngineMgmtLast_Type = Cardinal32
_XcmCommsEngineMgmtLast_Object = MibTableColumn
xcmCommsEngineMgmtLast = _XcmCommsEngineMgmtLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 7),
    _XcmCommsEngineMgmtLast_Type()
)
xcmCommsEngineMgmtLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineMgmtLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineMgmtLast.setDescription("""\
The last entry index (regardless of its current state) in the
'xcmCommsMgmtTable' of this communications engine, on this host system. Usage:
The last entry index explicitly bounds the valid range of 'xcmCommsMgmtIndex'.
""")


class _XcmCommsEngineGroupSupport_Type(XcmCommsEngineGroupSupport):
    """Custom type xcmCommsEngineGroupSupport based on XcmCommsEngineGroupSupport"""
    defaultValue = 1


_XcmCommsEngineGroupSupport_Object = MibTableColumn
xcmCommsEngineGroupSupport = _XcmCommsEngineGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 8),
    _XcmCommsEngineGroupSupport_Type()
)
xcmCommsEngineGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineGroupSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Comms Engine MIB object groups supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask.
Usage: Conforming management agents SHALL accurately report their support for
XCMI Comms Engine MIB object groups.
""")
_XcmCommsEngineCreateSupport_Type = XcmCommsEngineGroupSupport
_XcmCommsEngineCreateSupport_Object = MibTableColumn
xcmCommsEngineCreateSupport = _XcmCommsEngineCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 9),
    _XcmCommsEngineCreateSupport_Type()
)
xcmCommsEngineCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineCreateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Comms Engine MIB object groups supported for dynamic row creation
(via '...RowStatus') by this management agent implementation (ie, version) on
this host system, specified in a bit-mask. Usage: Conforming management agents
SHALL accurately report their support for XCMI Comms Engine MIB object groups.
""")
_XcmCommsEngineUpdateSupport_Type = XcmCommsEngineGroupSupport
_XcmCommsEngineUpdateSupport_Object = MibTableColumn
xcmCommsEngineUpdateSupport = _XcmCommsEngineUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 3, 2, 1, 10),
    _XcmCommsEngineUpdateSupport_Type()
)
xcmCommsEngineUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineUpdateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Comms Engine MIB object groups supported for existing row update
(via SNMP Set-Request PDUs) by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. Usage: Conforming
management agents SHALL accurately report their support for XCMI Comms Engine
MIB object groups.
""")
_XcmCommsEngineExt_ObjectIdentity = ObjectIdentity
xcmCommsEngineExt = _XcmCommsEngineExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4)
)
_XcmCommsEngineExtTable_Object = MibTable
xcmCommsEngineExtTable = _XcmCommsEngineExtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2)
)
if mibBuilder.loadTexts:
    xcmCommsEngineExtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtTable.setDescription("""\
A 'sparse' table which augments 'xcmCommsEngineTable' with additional useful
information.
""")
_XcmCommsEngineExtEntry_Object = MibTableRow
xcmCommsEngineExtEntry = _XcmCommsEngineExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2, 1)
)
xcmCommsEngineExtEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsEngineExtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtEntry.setDescription("""\
A 'sparse' entry which augments 'xcmCommsEngineEntry' with additional useful
information.
""")
_XcmCommsEngineExtRowStatus_Type = RowStatus
_XcmCommsEngineExtRowStatus_Object = MibTableColumn
xcmCommsEngineExtRowStatus = _XcmCommsEngineExtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2, 1, 1),
    _XcmCommsEngineExtRowStatus_Type()
)
xcmCommsEngineExtRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineExtRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsEngineExtTable'.
""")


class _XcmCommsEngineExtState_Type(XcmCommsMgmtState):
    """Custom type xcmCommsEngineExtState based on XcmCommsMgmtState"""


_XcmCommsEngineExtState_Object = MibTableColumn
xcmCommsEngineExtState = _XcmCommsEngineExtState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2, 1, 2),
    _XcmCommsEngineExtState_Type()
)
xcmCommsEngineExtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineExtState.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtState.setDescription("""\
A relatively generic description of the current state of this communications
entity.
""")
_XcmCommsEngineExtConditions_Type = XcmCommsMgmtConditions
_XcmCommsEngineExtConditions_Object = MibTableColumn
xcmCommsEngineExtConditions = _XcmCommsEngineExtConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2, 1, 4),
    _XcmCommsEngineExtConditions_Type()
)
xcmCommsEngineExtConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineExtConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtConditions.setDescription("""\
A relatively generic description of the current conditions of this
communications entity.
""")


class _XcmCommsEngineExtVersionID_Type(ProductID):
    """Custom type xcmCommsEngineExtVersionID based on ProductID"""
    defaultValue = "(0, 0)"


_XcmCommsEngineExtVersionID_Object = MibTableColumn
xcmCommsEngineExtVersionID = _XcmCommsEngineExtVersionID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2, 1, 5),
    _XcmCommsEngineExtVersionID_Type()
)
xcmCommsEngineExtVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineExtVersionID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtVersionID.setReference("""\
See: 'hrSW[Installed|Run]ID' in the Software Installed and Software Running
groups of the IETF HR MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmCommsEngineExtVersionID.setDescription("""\
The software product ID of the SNMP sub-agent which implements the XCMI Comms
Engine MIB on this host system. Usage: This object SHALL specify the software
product ID of an SNMP sub-agent (possibly also found in a conceptual row in the
'hrSWRunTable' and/or 'hrSWInstalledTable' in the IETF HR MIB). This object
SHALL NOT specify a particular release of the XCMI Comms Engine MIB, or the
whole host system product. Note: Contrast with 'sysObjectID' for the whole SNMP
agent in the IETF MIB-II (RFC 1213) and 'hrDeviceID' for the whole device (or
whole product, in the case of 'xcmHrDevice...') in the IETF Host Resources MIB
(RFC 2790).
""")


class _XcmCommsEngineExtVersionDate_Type(DateAndTime):
    """Custom type xcmCommsEngineExtVersionDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmCommsEngineExtVersionDate_Object = MibTableColumn
xcmCommsEngineExtVersionDate = _XcmCommsEngineExtVersionDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2, 1, 6),
    _XcmCommsEngineExtVersionDate_Type()
)
xcmCommsEngineExtVersionDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineExtVersionDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtVersionDate.setReference("""\
See: 'hrSW[Installed|Run]ID' in the Software Installed and Software Running
groups of the IETF HR MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmCommsEngineExtVersionDate.setDescription("""\
The software build date of the SNMP sub-agent which implements the XCMI Comms
Engine MIB on this host system. Usage: This object SHALL specify the BUILD date
of the SNMP sub-agent software (not available elsewhere in IETF/XCMI MIBs).
This object SHALL NOT specify the INSTALL date of the SNMP sub-agent software
on this host system, nor the RESET date. Note: Contrast with
'hrSWInstalledDate' in the Software Installed group of the IETF Host Resources
MIB (RFC 2790), and 'xcmHrDevInfoResetDate' in the Device Info group of the
XCMI Host Resources Extensions MIB.
""")
_XcmCommsEngineExtMgmtIndex_Type = Cardinal32
_XcmCommsEngineExtMgmtIndex_Object = MibTableColumn
xcmCommsEngineExtMgmtIndex = _XcmCommsEngineExtMgmtIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2, 1, 7),
    _XcmCommsEngineExtMgmtIndex_Type()
)
xcmCommsEngineExtMgmtIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineExtMgmtIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtMgmtIndex.setDescription("""\
The value of 'xcmCommsMgmtIndex' corresponding to a directly associated
conceptual row in the 'xcmCommsMgmtTable', or zero if this 'managed entity'
does NOT require such information.
""")


class _XcmCommsEngineExtOwnerOID_Type(ObjectIdentifier):
    """Custom type xcmCommsEngineExtOwnerOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmCommsEngineExtOwnerOID_Object = MibTableColumn
xcmCommsEngineExtOwnerOID = _XcmCommsEngineExtOwnerOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 4, 2, 1, 8),
    _XcmCommsEngineExtOwnerOID_Type()
)
xcmCommsEngineExtOwnerOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsEngineExtOwnerOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtOwnerOID.setDescription("""\
The OID (object identifier) of the conceptual row or simple object which
represents some 'owner entity' associated with this entry in the
'xcmCommsEngineExtTable'.
""")
_XcmCommsStack_ObjectIdentity = ObjectIdentity
xcmCommsStack = _XcmCommsStack_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5)
)
_XcmCommsStackTable_Object = MibTable
xcmCommsStackTable = _XcmCommsStackTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2)
)
if mibBuilder.loadTexts:
    xcmCommsStackTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackTable.setDescription("""\
A table containing information on the relationships between the multiple stack
layers or sublayers (ie, protocol entities) comprising the (possibly) running
'protocol stacks' on this host system. In particular, it contains information
about which stack layer runs 'above' and 'below' which other stack layer.
""")
_XcmCommsStackEntry_Object = MibTableRow
xcmCommsStackEntry = _XcmCommsStackEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1)
)
xcmCommsStackEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsStackIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsStackEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackEntry.setDescription("""\
An entry for a stack layer in a protocol stack installed and (possibly) running
on this host system.
""")
_XcmCommsStackIndex_Type = Ordinal32
_XcmCommsStackIndex_Object = MibTableColumn
xcmCommsStackIndex = _XcmCommsStackIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 1),
    _XcmCommsStackIndex_Type()
)
xcmCommsStackIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsStackIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmCommsStackTable'.
""")
_XcmCommsStackRowStatus_Type = RowStatus
_XcmCommsStackRowStatus_Object = MibTableColumn
xcmCommsStackRowStatus = _XcmCommsStackRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 2),
    _XcmCommsStackRowStatus_Type()
)
xcmCommsStackRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsStackTable'.
""")


class _XcmCommsStackTypeOID_Type(ObjectIdentifier):
    """Custom type xcmCommsStackTypeOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmCommsStackTypeOID_Object = MibTableColumn
xcmCommsStackTypeOID = _XcmCommsStackTypeOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 3),
    _XcmCommsStackTypeOID_Type()
)
xcmCommsStackTypeOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackTypeOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackTypeOID.setDescription("""\
An unambiguous stack layer type, used by system administrators and end users to
identify the type of this stack layer. Usage: Since this unambiguous stack
layer type is specified as an object identifier, it MAY be taken from any IETF,
Xerox, third- party, or product-specific MIB, or it MAY simply be any IETF
SMIv2-style 'autonomous type'. Usage: Suitable values for this unambiguous
stack layer type are specified in the companion XCMI Comms Config TC (eg,
'xcmCONetwareIPX').
""")


class _XcmCommsStackName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmCommsStackName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmCommsStackName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmCommsStackName_Object = MibTableColumn
xcmCommsStackName = _XcmCommsStackName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 4),
    _XcmCommsStackName_Type()
)
xcmCommsStackName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackName.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackName.setDescription("""\
Human-readable name, used by system administrators and end users to identify
this stack layer for systems management. Usage: This name SHOULD be the one
normally used in a command shell for control of this stack layer.
""")


class _XcmCommsStackPosition_Type(XcmCommsStackPosition):
    """Custom type xcmCommsStackPosition based on XcmCommsStackPosition"""


_XcmCommsStackPosition_Object = MibTableColumn
xcmCommsStackPosition = _XcmCommsStackPosition_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 5),
    _XcmCommsStackPosition_Type()
)
xcmCommsStackPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackPosition.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackPosition.setDescription("""\
A relatively generic description of the current position of this protocol
entity (ie, this layer) in this protocol stack. Usage: A conceptual row in
'xcmCommsStackTable', which occupies a 'bottom' position in a protocol stack
AND has a corresponding row in the 'xcmCommsStackXrefTable', SHOULD have valid
references in 'xcmCommsStackXrefIfIndex' (to IETF MIB-II) and
'xcmCommsStackXrefHrCommDevIndex' (to IETF Host Resources MIB). Usage: A
conceptual row in 'xcmCommsStackTable' which occupies a 'lowerMux' and/or an
'upperMux' position in a protocol stack SHALL have one (or two) valid
corresponding conceptual rows in the 'xcmCommsMuxTable', as the conventionally
used 'xcmCommsStack[Lower|Upper]StackIndex' objects take on zero values for
multiplexors (thus breaking the graph of the stack layers, without the use of
the 'xcmCommsMuxTable').
""")
_XcmCommsStackLowerStackIndex_Type = Cardinal32
_XcmCommsStackLowerStackIndex_Object = MibTableColumn
xcmCommsStackLowerStackIndex = _XcmCommsStackLowerStackIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 6),
    _XcmCommsStackLowerStackIndex_Type()
)
xcmCommsStackLowerStackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackLowerStackIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackLowerStackIndex.setDescription("""\
The value of 'xcmCommsStackIndex' corresponding to a next lower associated
conceptual row in the 'xcmCommsStackTable', or zero if this stack layer's
position is either 'bottom' or 'lowerMux'.
""")
_XcmCommsStackUpperStackIndex_Type = Cardinal32
_XcmCommsStackUpperStackIndex_Object = MibTableColumn
xcmCommsStackUpperStackIndex = _XcmCommsStackUpperStackIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 7),
    _XcmCommsStackUpperStackIndex_Type()
)
xcmCommsStackUpperStackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackUpperStackIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackUpperStackIndex.setDescription("""\
The value of 'xcmCommsStackIndex' corresponding to a next higher associated
conceptual row in the 'xcmCommsStackTable', or zero if this stack layer's
position is either 'upperMux' or sometimes 'top' (see usage note below). Usage:
Only for protocol entities whose current purpose is either
'layerInterWorkingUnit' (ie, relays or gateways) or 'systemInterWorkingUnit'
(ie, application gateways), it is permitted that the stack layer whose current
position is 'top' have an upper layer index pointing to the peer entity (also
in a 'top' position) which comprises the 'other half' of a relay or gateway
between two different address domains (ie, an active protocol conversion relay)
- that is the graphed protocol stack is an inverted 'U'.
""")
_XcmCommsStackAddressIndex_Type = Cardinal32
_XcmCommsStackAddressIndex_Object = MibTableColumn
xcmCommsStackAddressIndex = _XcmCommsStackAddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 8),
    _XcmCommsStackAddressIndex_Type()
)
xcmCommsStackAddressIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackAddressIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackAddressIndex.setDescription("""\
The value of 'xcmCommsAddressIndex' corresponding to the first associated
conceptual row in the 'xcmCommsAddressTable', or zero if this 'owner entity'
does NOT require such information.
""")
_XcmCommsStackOptionIndex_Type = Cardinal32
_XcmCommsStackOptionIndex_Object = MibTableColumn
xcmCommsStackOptionIndex = _XcmCommsStackOptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 9),
    _XcmCommsStackOptionIndex_Type()
)
xcmCommsStackOptionIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackOptionIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackOptionIndex.setDescription("""\
The value of 'xcmCommsOptionIndex' corresponding to the first associated
conceptual row in the 'xcmCommsOptionTable', or zero if this stack layer does
NOT require such information.
""")
_XcmCommsStackLowerMuxIndex_Type = Cardinal32
_XcmCommsStackLowerMuxIndex_Object = MibTableColumn
xcmCommsStackLowerMuxIndex = _XcmCommsStackLowerMuxIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 10),
    _XcmCommsStackLowerMuxIndex_Type()
)
xcmCommsStackLowerMuxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackLowerMuxIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackLowerMuxIndex.setDescription("""\
The value of 'xcmCommsMuxIndex' corresponding to the first associated
conceptual row in the 'xcmCommsMuxTable', or zero if this stack layer's
position is NOT 'lowerMux'.
""")
_XcmCommsStackUpperMuxIndex_Type = Cardinal32
_XcmCommsStackUpperMuxIndex_Object = MibTableColumn
xcmCommsStackUpperMuxIndex = _XcmCommsStackUpperMuxIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 5, 2, 1, 11),
    _XcmCommsStackUpperMuxIndex_Type()
)
xcmCommsStackUpperMuxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackUpperMuxIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackUpperMuxIndex.setDescription("""\
The value of 'xcmCommsMuxIndex' corresponding to the first associated
conceptual row in the 'xcmCommsMuxTable', or zero if this stack layer's
position is NOT 'upperMux'.
""")
_XcmCommsStackExt_ObjectIdentity = ObjectIdentity
xcmCommsStackExt = _XcmCommsStackExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6)
)
_XcmCommsStackExtTable_Object = MibTable
xcmCommsStackExtTable = _XcmCommsStackExtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2)
)
if mibBuilder.loadTexts:
    xcmCommsStackExtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtTable.setDescription("""\
A 'sparse' table which augments 'xcmCommsStackTable' with additional useful
information.
""")
_XcmCommsStackExtEntry_Object = MibTableRow
xcmCommsStackExtEntry = _XcmCommsStackExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1)
)
xcmCommsStackExtEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsStackIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsStackExtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtEntry.setDescription("""\
A 'sparse' entry which augments 'xcmCommsStackEntry' with additional useful
information.
""")
_XcmCommsStackExtRowStatus_Type = RowStatus
_XcmCommsStackExtRowStatus_Object = MibTableColumn
xcmCommsStackExtRowStatus = _XcmCommsStackExtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 1),
    _XcmCommsStackExtRowStatus_Type()
)
xcmCommsStackExtRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsStackExtTable'.
""")


class _XcmCommsStackExtState_Type(XcmCommsMgmtState):
    """Custom type xcmCommsStackExtState based on XcmCommsMgmtState"""


_XcmCommsStackExtState_Object = MibTableColumn
xcmCommsStackExtState = _XcmCommsStackExtState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 2),
    _XcmCommsStackExtState_Type()
)
xcmCommsStackExtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtState.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtState.setDescription("""\
A relatively generic description of the current state of this communications
entity.
""")
_XcmCommsStackExtConditions_Type = XcmCommsMgmtConditions
_XcmCommsStackExtConditions_Object = MibTableColumn
xcmCommsStackExtConditions = _XcmCommsStackExtConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 3),
    _XcmCommsStackExtConditions_Type()
)
xcmCommsStackExtConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtConditions.setDescription("""\
A relatively generic description of the current conditions of this
communications entity.
""")


class _XcmCommsStackExtPurpose_Type(XcmCommsStackExtPurpose):
    """Custom type xcmCommsStackExtPurpose based on XcmCommsStackExtPurpose"""


_XcmCommsStackExtPurpose_Object = MibTableColumn
xcmCommsStackExtPurpose = _XcmCommsStackExtPurpose_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 4),
    _XcmCommsStackExtPurpose_Type()
)
xcmCommsStackExtPurpose.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtPurpose.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtPurpose.setDescription("""\
A relatively generic description of the current purpose of this stack layer
during normal operation.
""")


class _XcmCommsStackExtRole_Type(XcmCommsStackExtRole):
    """Custom type xcmCommsStackExtRole based on XcmCommsStackExtRole"""


_XcmCommsStackExtRole_Object = MibTableColumn
xcmCommsStackExtRole = _XcmCommsStackExtRole_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 5),
    _XcmCommsStackExtRole_Type()
)
xcmCommsStackExtRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtRole.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtRole.setDescription("""\
A relatively generic description of the current role of this stack layer during
normal operation.
""")


class _XcmCommsStackExtSuite_Type(XcmCommsStackExtSuite):
    """Custom type xcmCommsStackExtSuite based on XcmCommsStackExtSuite"""


_XcmCommsStackExtSuite_Object = MibTableColumn
xcmCommsStackExtSuite = _XcmCommsStackExtSuite_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 6),
    _XcmCommsStackExtSuite_Type()
)
xcmCommsStackExtSuite.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtSuite.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtSuite.setDescription("""\
The current protocol suite of this protocol entity (stack layer or sublayer).
""")


class _XcmCommsStackExtSuiteVersion_Type(XcmCommsStackExtSuiteVersion):
    """Custom type xcmCommsStackExtSuiteVersion based on XcmCommsStackExtSuiteVersion"""


_XcmCommsStackExtSuiteVersion_Object = MibTableColumn
xcmCommsStackExtSuiteVersion = _XcmCommsStackExtSuiteVersion_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 7),
    _XcmCommsStackExtSuiteVersion_Type()
)
xcmCommsStackExtSuiteVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtSuiteVersion.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtSuiteVersion.setDescription("""\
The current protocol suite version of this protocol entity (stack layer or
sublayer).
""")


class _XcmCommsStackExtLayer_Type(XcmCommsStackExtLayer):
    """Custom type xcmCommsStackExtLayer based on XcmCommsStackExtLayer"""


_XcmCommsStackExtLayer_Object = MibTableColumn
xcmCommsStackExtLayer = _XcmCommsStackExtLayer_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 8),
    _XcmCommsStackExtLayer_Type()
)
xcmCommsStackExtLayer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtLayer.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtLayer.setDescription("""\
The closest approximate layer in the OSI Reference Model (CCITT X.200 | ISO
7498) to the current behavior of this stack layer or sublayer.
""")


class _XcmCommsStackExtProtocol_Type(XcmCommsStackExtProtocol):
    """Custom type xcmCommsStackExtProtocol based on XcmCommsStackExtProtocol"""


_XcmCommsStackExtProtocol_Object = MibTableColumn
xcmCommsStackExtProtocol = _XcmCommsStackExtProtocol_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 9),
    _XcmCommsStackExtProtocol_Type()
)
xcmCommsStackExtProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtProtocol.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtProtocol.setDescription("""\
The specific protocol (within a given protocol suite) currently configured for
this stack layer or sublayer.
""")
_XcmCommsStackExtMgmtIndex_Type = Cardinal32
_XcmCommsStackExtMgmtIndex_Object = MibTableColumn
xcmCommsStackExtMgmtIndex = _XcmCommsStackExtMgmtIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 10),
    _XcmCommsStackExtMgmtIndex_Type()
)
xcmCommsStackExtMgmtIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtMgmtIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtMgmtIndex.setDescription("""\
The value of 'xcmCommsMgmtIndex' corresponding to the directly associated
conceptual row in the 'xcmCommsMgmtTable', or zero if this 'managed entity'
does NOT require such information.
""")


class _XcmCommsStackExtOwnerOID_Type(ObjectIdentifier):
    """Custom type xcmCommsStackExtOwnerOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmCommsStackExtOwnerOID_Object = MibTableColumn
xcmCommsStackExtOwnerOID = _XcmCommsStackExtOwnerOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 6, 2, 1, 11),
    _XcmCommsStackExtOwnerOID_Type()
)
xcmCommsStackExtOwnerOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackExtOwnerOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtOwnerOID.setReference("""\
See: 'prtChannelTable' in Printer MIB (RFC 1759)
""")
if mibBuilder.loadTexts:
    xcmCommsStackExtOwnerOID.setDescription("""\
The OID (object identifier) of the conceptual row or simple object which
represents some 'owner entity' associated with this entry in the
'xcmCommsStackExtTable'. Usage: A Printer Channel, for example, might choose to
specify the OID of some conceptual row in the 'prtChannelTable'.
""")
_XcmCommsStackXref_ObjectIdentity = ObjectIdentity
xcmCommsStackXref = _XcmCommsStackXref_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7)
)
_XcmCommsStackXrefTable_Object = MibTable
xcmCommsStackXrefTable = _XcmCommsStackXrefTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2)
)
if mibBuilder.loadTexts:
    xcmCommsStackXrefTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefTable.setDescription("""\
A table containing optional cross reference information for the multiple stack
layers or sublayers (ie, protocol entities) comprising the (possibly) running
'protocol stacks' on this host system.
""")
_XcmCommsStackXrefEntry_Object = MibTableRow
xcmCommsStackXrefEntry = _XcmCommsStackXrefEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1)
)
xcmCommsStackXrefEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsStackIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsStackXrefEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefEntry.setDescription("""\
An entry for a stack layer in a protocol stack installed and (possibly) running
on this host system.
""")
_XcmCommsStackXrefRowStatus_Type = RowStatus
_XcmCommsStackXrefRowStatus_Object = MibTableColumn
xcmCommsStackXrefRowStatus = _XcmCommsStackXrefRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1, 1),
    _XcmCommsStackXrefRowStatus_Type()
)
xcmCommsStackXrefRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackXrefRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsStackXrefTable'.
""")
_XcmCommsStackXrefLayerMgmtIndex_Type = Cardinal32
_XcmCommsStackXrefLayerMgmtIndex_Object = MibTableColumn
xcmCommsStackXrefLayerMgmtIndex = _XcmCommsStackXrefLayerMgmtIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1, 2),
    _XcmCommsStackXrefLayerMgmtIndex_Type()
)
xcmCommsStackXrefLayerMgmtIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackXrefLayerMgmtIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefLayerMgmtIndex.setDescription("""\
The value of 'xcmCommsStackIndex' corresponding to the one-to-one associated
conceptual row in the 'xcmCommsStackTable' which has 'xcmCommsStackExtPurpose'
of 'layerManagement', or zero if this this stack layer has no associated layer
management entity.
""")
_XcmCommsStackXrefLayerSecIndex_Type = Cardinal32
_XcmCommsStackXrefLayerSecIndex_Object = MibTableColumn
xcmCommsStackXrefLayerSecIndex = _XcmCommsStackXrefLayerSecIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1, 3),
    _XcmCommsStackXrefLayerSecIndex_Type()
)
xcmCommsStackXrefLayerSecIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackXrefLayerSecIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefLayerSecIndex.setDescription("""\
The value of 'xcmCommsStackIndex' corresponding to the one-to-one associated
conceptual row in the 'xcmCommsStackTable' which has 'xcmCommsStackExtPurpose'
of 'layerSecurity', or zero if this this stack layer has no associated layer
security entity.
""")
_XcmCommsStackXrefLayerIWUIndex_Type = Cardinal32
_XcmCommsStackXrefLayerIWUIndex_Object = MibTableColumn
xcmCommsStackXrefLayerIWUIndex = _XcmCommsStackXrefLayerIWUIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1, 4),
    _XcmCommsStackXrefLayerIWUIndex_Type()
)
xcmCommsStackXrefLayerIWUIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackXrefLayerIWUIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefLayerIWUIndex.setDescription("""\
The value of 'xcmCommsStackIndex' corresponding to the one-to-one associated
conceptual row in the 'xcmCommsStackTable' which has 'xcmCommsStackExtPurpose'
of 'layerInterWorkingUnit', or zero if this this stack layer has no associated
layer relay entity.
""")
_XcmCommsStackXrefHrSWRunIndex_Type = Cardinal32
_XcmCommsStackXrefHrSWRunIndex_Object = MibTableColumn
xcmCommsStackXrefHrSWRunIndex = _XcmCommsStackXrefHrSWRunIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1, 5),
    _XcmCommsStackXrefHrSWRunIndex_Type()
)
xcmCommsStackXrefHrSWRunIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackXrefHrSWRunIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefHrSWRunIndex.setDescription("""\
The value of 'hrSWRunIndex' corresponding to the directly associated conceptual
row in the 'hrSWRunTable' of the Host Resources MIB (RFC 2790), or zero if
'hrSWRunTable' is NOT implemented.
""")
_XcmCommsStackXrefHrSWInsIndex_Type = Cardinal32
_XcmCommsStackXrefHrSWInsIndex_Object = MibTableColumn
xcmCommsStackXrefHrSWInsIndex = _XcmCommsStackXrefHrSWInsIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1, 6),
    _XcmCommsStackXrefHrSWInsIndex_Type()
)
xcmCommsStackXrefHrSWInsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackXrefHrSWInsIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefHrSWInsIndex.setDescription("""\
The value of 'hrSWInstalledIndex' corresponding to the directly associated
conceptual row in the 'hrSWInstalledTable' of the Host Resources MIB (RFC
2790), or zero if 'hrSWInstalledTable' is NOT implemented.
""")
_XcmCommsStackXrefIfIndex_Type = Cardinal32
_XcmCommsStackXrefIfIndex_Object = MibTableColumn
xcmCommsStackXrefIfIndex = _XcmCommsStackXrefIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1, 7),
    _XcmCommsStackXrefIfIndex_Type()
)
xcmCommsStackXrefIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackXrefIfIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefIfIndex.setReference("""\
See: 'xcmCommsStackPosition' and the 'InterfaceIndex' textual convention in
Evolution of the Interfaces Group of MIB-II (RFC 1573).
""")
if mibBuilder.loadTexts:
    xcmCommsStackXrefIfIndex.setDescription("""\
The value of 'ifIndex' corresponding to the directly associated conceptual row
in the 'ifTable' (Interfaces Group) of the MIB-II (RFC 1213), or zero if the
position of this stack layer is NOT 'bottom' (ie, this stack layer does NOT
represent a physical 'network interface'). Usage: This is partially a
convenience object, since given the value of 'hrDeviceIndex' for an
'hrDeviceNetwork' type device, the corresponding 'ifIndex' is found in the
mandatory entry in the 'hrNetworkTable'. However, note that for
'hrDeviceModem', 'hrDeviceSerialPort', and 'hrDeviceParallelPort' devices, the
'xcmCommsStackXrefIfIndex' object is a NECESSITY for support of this
communications engine MIB.
""")
_XcmCommsStackXrefHrCommDevIndex_Type = Cardinal32
_XcmCommsStackXrefHrCommDevIndex_Object = MibTableColumn
xcmCommsStackXrefHrCommDevIndex = _XcmCommsStackXrefHrCommDevIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 7, 2, 1, 8),
    _XcmCommsStackXrefHrCommDevIndex_Type()
)
xcmCommsStackXrefHrCommDevIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsStackXrefHrCommDevIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefHrCommDevIndex.setReference("""\
See: 'xcmCommsStackPosition' and the 'hrDeviceIndex' of the Devices Group of
the Host Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmCommsStackXrefHrCommDevIndex.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the directly associated
conceptual rows in the 'hrDeviceTable' and (possibly) 'hrNetworkTable' of the
Host Resources MIB (RFC 2790), or zero if the position of this stack layer is
NOT 'bottom' (ie, this stack layer does NOT represent a physical 'network
interface'). Usage: Note that for 'hrDeviceModem', 'hrDeviceSerialPort', and
'hrDeviceParallelPort' devices, there is NO corresponding entry in the
'hrNetworkTable', a subtle difference between MIB-II (RFC 1213) and the Host
Resources MIB (RFC 2790).
""")
_XcmCommsMux_ObjectIdentity = ObjectIdentity
xcmCommsMux = _XcmCommsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8)
)
_XcmCommsMuxTable_Object = MibTable
xcmCommsMuxTable = _XcmCommsMuxTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2)
)
if mibBuilder.loadTexts:
    xcmCommsMuxTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxTable.setDescription("""\
A table containing information on the relationships between the multiple stack
layers or sublayers (ie, protocol entities) participating in a 'upper' or
'lower' multiplexor (ie, the simultaneous adjacency of two or more 'upper' or
'lower' stack layers with a single instance of a 'base' stack layer), eg, IP (a
'base' stack layer) operating below both TCP and UDP (the 'adjacent' stack
layers).
""")
_XcmCommsMuxEntry_Object = MibTableRow
xcmCommsMuxEntry = _XcmCommsMuxEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2, 1)
)
xcmCommsMuxEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsMuxIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsMuxEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxEntry.setDescription("""\
An entry for a 'base' stack layer participating in an 'upper' or 'lower'
multiplexor.
""")
_XcmCommsMuxIndex_Type = Ordinal32
_XcmCommsMuxIndex_Object = MibTableColumn
xcmCommsMuxIndex = _XcmCommsMuxIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2, 1, 1),
    _XcmCommsMuxIndex_Type()
)
xcmCommsMuxIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsMuxIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmCommsMuxTable'.
""")
_XcmCommsMuxRowStatus_Type = RowStatus
_XcmCommsMuxRowStatus_Object = MibTableColumn
xcmCommsMuxRowStatus = _XcmCommsMuxRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2, 1, 2),
    _XcmCommsMuxRowStatus_Type()
)
xcmCommsMuxRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsMuxTable'.
""")
_XcmCommsMuxNextIndex_Type = Cardinal32
_XcmCommsMuxNextIndex_Object = MibTableColumn
xcmCommsMuxNextIndex = _XcmCommsMuxNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2, 1, 3),
    _XcmCommsMuxNextIndex_Type()
)
xcmCommsMuxNextIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxNextIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxNextIndex.setDescription("""\
The value of 'xcmCommsMuxIndex' corresponding to a next associated conceptual
row in the 'xcmCommsMuxTable', or zero if this is the last associated
conceptual row in a given set.
""")
_XcmCommsMuxPreviousIndex_Type = Cardinal32
_XcmCommsMuxPreviousIndex_Object = MibTableColumn
xcmCommsMuxPreviousIndex = _XcmCommsMuxPreviousIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2, 1, 4),
    _XcmCommsMuxPreviousIndex_Type()
)
xcmCommsMuxPreviousIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxPreviousIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxPreviousIndex.setDescription("""\
The value of 'xcmCommsMuxIndex' corresponding to a previous associated
conceptual row in the 'xcmCommsMuxTable', or zero if this is the first
associated conceptual row in a given set.
""")
_XcmCommsMuxOptionIndex_Type = Cardinal32
_XcmCommsMuxOptionIndex_Object = MibTableColumn
xcmCommsMuxOptionIndex = _XcmCommsMuxOptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2, 1, 5),
    _XcmCommsMuxOptionIndex_Type()
)
xcmCommsMuxOptionIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxOptionIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxOptionIndex.setDescription("""\
The value of 'xcmCommsOptionIndex' corresponding to the first associated
conceptual row in the 'xcmCommsOptionTable', or zero if this multiplexor entry
does NOT require such information.
""")
_XcmCommsMuxBaseStackIndex_Type = Ordinal32
_XcmCommsMuxBaseStackIndex_Object = MibTableColumn
xcmCommsMuxBaseStackIndex = _XcmCommsMuxBaseStackIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2, 1, 6),
    _XcmCommsMuxBaseStackIndex_Type()
)
xcmCommsMuxBaseStackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxBaseStackIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxBaseStackIndex.setDescription("""\
The value of 'xcmCommsStackIndex' corresponding to the base associated
conceptual row in the 'xcmCommsStackTable'.
""")
_XcmCommsMuxAdjacentStackIndex_Type = Ordinal32
_XcmCommsMuxAdjacentStackIndex_Object = MibTableColumn
xcmCommsMuxAdjacentStackIndex = _XcmCommsMuxAdjacentStackIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 8, 2, 1, 7),
    _XcmCommsMuxAdjacentStackIndex_Type()
)
xcmCommsMuxAdjacentStackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxAdjacentStackIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxAdjacentStackIndex.setDescription("""\
The value of 'xcmCommsStackIndex' corresponding to the adjacent associated
conceptual row in the 'xcmCommsStackTable'.
""")
_XcmCommsMuxExt_ObjectIdentity = ObjectIdentity
xcmCommsMuxExt = _XcmCommsMuxExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9)
)
_XcmCommsMuxExtTable_Object = MibTable
xcmCommsMuxExtTable = _XcmCommsMuxExtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9, 2)
)
if mibBuilder.loadTexts:
    xcmCommsMuxExtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtTable.setDescription("""\
A 'sparse' table which augments 'xcmCommsMuxTable' with additional useful
information.
""")
_XcmCommsMuxExtEntry_Object = MibTableRow
xcmCommsMuxExtEntry = _XcmCommsMuxExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9, 2, 1)
)
xcmCommsMuxExtEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsMuxIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsMuxExtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtEntry.setDescription("""\
A 'sparse' entry which augments 'xcmCommsMuxEntry' with additional useful
information.
""")
_XcmCommsMuxExtRowStatus_Type = RowStatus
_XcmCommsMuxExtRowStatus_Object = MibTableColumn
xcmCommsMuxExtRowStatus = _XcmCommsMuxExtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9, 2, 1, 1),
    _XcmCommsMuxExtRowStatus_Type()
)
xcmCommsMuxExtRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxExtRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsMuxExtTable'.
""")


class _XcmCommsMuxExtState_Type(XcmCommsMgmtState):
    """Custom type xcmCommsMuxExtState based on XcmCommsMgmtState"""


_XcmCommsMuxExtState_Object = MibTableColumn
xcmCommsMuxExtState = _XcmCommsMuxExtState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9, 2, 1, 2),
    _XcmCommsMuxExtState_Type()
)
xcmCommsMuxExtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxExtState.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtState.setDescription("""\
A relatively generic description of the current state of this communications
entity.
""")
_XcmCommsMuxExtConditions_Type = XcmCommsMgmtConditions
_XcmCommsMuxExtConditions_Object = MibTableColumn
xcmCommsMuxExtConditions = _XcmCommsMuxExtConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9, 2, 1, 3),
    _XcmCommsMuxExtConditions_Type()
)
xcmCommsMuxExtConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxExtConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtConditions.setDescription("""\
A relatively generic description of the current conditions of this
communications entity.
""")
_XcmCommsMuxExtMgmtIndex_Type = Cardinal32
_XcmCommsMuxExtMgmtIndex_Object = MibTableColumn
xcmCommsMuxExtMgmtIndex = _XcmCommsMuxExtMgmtIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9, 2, 1, 4),
    _XcmCommsMuxExtMgmtIndex_Type()
)
xcmCommsMuxExtMgmtIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxExtMgmtIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtMgmtIndex.setDescription("""\
The value of 'xcmCommsMgmtIndex' corresponding to the directly associated
conceptual row in the 'xcmCommsMgmtTable', or zero if this 'managed entity'
does NOT require such information.
""")


class _XcmCommsMuxExtAddressIndex_Type(Cardinal32):
    """Custom type xcmCommsMuxExtAddressIndex based on Cardinal32"""
    defaultHexValue = 0


_XcmCommsMuxExtAddressIndex_Object = MibTableColumn
xcmCommsMuxExtAddressIndex = _XcmCommsMuxExtAddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9, 2, 1, 5),
    _XcmCommsMuxExtAddressIndex_Type()
)
xcmCommsMuxExtAddressIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxExtAddressIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtAddressIndex.setDescription("""\
The value of 'xcmCommsAddressIndex' corresponding to the first associated
conceptual row in the 'xcmCommsAddressTable', or zero if this 'owner entity'
does NOT require such information.
""")


class _XcmCommsMuxExtOwnerOID_Type(ObjectIdentifier):
    """Custom type xcmCommsMuxExtOwnerOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmCommsMuxExtOwnerOID_Object = MibTableColumn
xcmCommsMuxExtOwnerOID = _XcmCommsMuxExtOwnerOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 9, 2, 1, 6),
    _XcmCommsMuxExtOwnerOID_Type()
)
xcmCommsMuxExtOwnerOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMuxExtOwnerOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtOwnerOID.setDescription("""\
The OID (object identifier) of the conceptual row or simple object which
represents some 'owner entity' associated with this entry in the
'xcmCommsMuxExtTable'.
""")
_XcmCommsAddress_ObjectIdentity = ObjectIdentity
xcmCommsAddress = _XcmCommsAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10)
)
_XcmCommsAddressTable_Object = MibTable
xcmCommsAddressTable = _XcmCommsAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2)
)
if mibBuilder.loadTexts:
    xcmCommsAddressTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressTable.setDescription("""\
A table containing information on unicast, multicast, and broadcast addresses
(remote/local) known to this host system.
""")
_XcmCommsAddressEntry_Object = MibTableRow
xcmCommsAddressEntry = _XcmCommsAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1)
)
xcmCommsAddressEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsAddressIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsAddressEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressEntry.setDescription("""\
An entry containing information on one unicast, multicast, or broadcast address
(remote/local) known to this host system.
""")
_XcmCommsAddressIndex_Type = Ordinal32
_XcmCommsAddressIndex_Object = MibTableColumn
xcmCommsAddressIndex = _XcmCommsAddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 1),
    _XcmCommsAddressIndex_Type()
)
xcmCommsAddressIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsAddressIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmCommsAddressTable'.
""")
_XcmCommsAddressRowStatus_Type = RowStatus
_XcmCommsAddressRowStatus_Object = MibTableColumn
xcmCommsAddressRowStatus = _XcmCommsAddressRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 2),
    _XcmCommsAddressRowStatus_Type()
)
xcmCommsAddressRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsAddressTable'.
""")


class _XcmCommsAddressTypeOID_Type(ObjectIdentifier):
    """Custom type xcmCommsAddressTypeOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmCommsAddressTypeOID_Object = MibTableColumn
xcmCommsAddressTypeOID = _XcmCommsAddressTypeOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 3),
    _XcmCommsAddressTypeOID_Type()
)
xcmCommsAddressTypeOID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressTypeOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressTypeOID.setDescription("""\
An unambiguous address type, used by system administrators and end users to
identify the type of this address. Usage: Since this unambiguous address type
is specified as an object identifier, it MAY be taken from any IETF, Xerox,
third- party, or product-specific MIB, or it MAY simply be any IETF SMIv2-style
'autonomous type'. Usage: Suitable values for this unambiguous address type are
specified in the companion XCMI Comms Config TC (eg, 'xcmCONetwareIPX').
""")
_XcmCommsAddressUserRole_Type = Integer32
_XcmCommsAddressUserRole_Object = MibTableColumn
xcmCommsAddressUserRole = _XcmCommsAddressUserRole_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 4),
    _XcmCommsAddressUserRole_Type()
)
xcmCommsAddressUserRole.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressUserRole.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressUserRole.setReference("""\
See: 'XcmSecUserRole' in the XCMI Security/AAA TC. See:
'xcmDevHelpCommsAddressIndex' in the XCMI Ext to IETF Host Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsAddressUserRole.setDescription("""\
An unambiguous address user role, used by system administrators and end users
to identify the user role of this address. Usage: This unambiguous address user
role is specified by a value defined in the textual convention 'XcmSecUserRole'
in the XCMI Security/AAA TC. Usage: This unambiguous address user role is
weakly typed here to avoid cyclic compilation dependencies between XCMI MIBs.
Usage: A chain of 'xcmCommsAddressEntry' objects MAY be pointed to by
'xcmDevHelpCommsAddressIndex' in the Device Help group of the XCMI Ext to IETF
Host Resources MIB. In this case, the 'xcmCommsAddressTypeOID' object MAY
contain values such as 'xcmCOOsiwanPSTNAddress' (analog phone number),
'xcmCOOsiwanFaxAddress' (fax phone number), etc, taken from the XCMI Comms
Config TC. In this case, the 'xcmCommsAddressUserRole' object MAY be used to
specify the role of the system admin, system operator, etc (whose name is
specified by 'xcmCommsAddressName', address format is specified by
'xcmCommsAddressTypeOID', and actual address is specified by
'xcmCommsAddressCanonical').
""")


class _XcmCommsAddressName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmCommsAddressName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmCommsAddressName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmCommsAddressName_Object = MibTableColumn
xcmCommsAddressName = _XcmCommsAddressName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 5),
    _XcmCommsAddressName_Type()
)
xcmCommsAddressName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressName.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressName.setDescription("""\
Human-readable name, used by system administrators and end users to identify
this protocol entity. Usage: This name SHOULD be the one normally used in a
command shell for control of this protocol entity. Usage: When a chain of
'xcmCommsAddressEntry' objects is pointed to by 'xcmHrDevHelpCommsAddressIndex'
in the Device Help group of the XCMI Ext to IETF Host Resources MIB (see the
'xcmCommsAddressUserRole' object above) special semantics apply. In this case,
the 'xcmCommsAddressName' object MAY be used to specify the name of the system
admin, system operator, etc (whose role is specified by
'xcmCommsAddressUserRole', address format is specified by
'xcmCommsAddressTypeOID', and actual address is specified by
'xcmCommsAddressCanonical').
""")


class _XcmCommsAddressCanonical_Type(OctetString):
    """Custom type xcmCommsAddressCanonical based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmCommsAddressCanonical_Type.__name__ = "OctetString"
_XcmCommsAddressCanonical_Object = MibTableColumn
xcmCommsAddressCanonical = _XcmCommsAddressCanonical_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 6),
    _XcmCommsAddressCanonical_Type()
)
xcmCommsAddressCanonical.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressCanonical.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressCanonical.setDescription("""\
The current canonical address of this protocol entity.
""")
_XcmCommsAddressNextIndex_Type = Cardinal32
_XcmCommsAddressNextIndex_Object = MibTableColumn
xcmCommsAddressNextIndex = _XcmCommsAddressNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 7),
    _XcmCommsAddressNextIndex_Type()
)
xcmCommsAddressNextIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressNextIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressNextIndex.setDescription("""\
The value of 'xcmCommsAddressIndex' corresponding to a next associated
conceptual row in the 'xcmCommsAddressTable', or zero if this is the last
associated conceptual row in a given set. Usage: A locally administered
'directory' MAY be searched and/or managed via use of the
'xcmCommsAddressNextIndex' and the 'xcmCommsAddressPreviousIndex' objects
referenced from each base protocol entity (ie, stack layer).
""")
_XcmCommsAddressPreviousIndex_Type = Cardinal32
_XcmCommsAddressPreviousIndex_Object = MibTableColumn
xcmCommsAddressPreviousIndex = _XcmCommsAddressPreviousIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 8),
    _XcmCommsAddressPreviousIndex_Type()
)
xcmCommsAddressPreviousIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressPreviousIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressPreviousIndex.setDescription("""\
The value of 'xcmCommsAddressIndex' corresponding to a previous associated
conceptual row in the 'xcmCommsAddressTable', or zero if this is the first
associated conceptual row in a given set.
""")


class _XcmCommsAddressOptionIndex_Type(Cardinal32):
    """Custom type xcmCommsAddressOptionIndex based on Cardinal32"""
    defaultHexValue = 0


_XcmCommsAddressOptionIndex_Object = MibTableColumn
xcmCommsAddressOptionIndex = _XcmCommsAddressOptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 10, 2, 1, 9),
    _XcmCommsAddressOptionIndex_Type()
)
xcmCommsAddressOptionIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressOptionIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressOptionIndex.setDescription("""\
The value of 'xcmCommsOptionIndex' corresponding to the first associated
conceptual row in the 'xcmCommsOptionTable', or zero if this address entry does
NOT require such information.
""")
_XcmCommsAddressExt_ObjectIdentity = ObjectIdentity
xcmCommsAddressExt = _XcmCommsAddressExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11)
)
_XcmCommsAddressExtTable_Object = MibTable
xcmCommsAddressExtTable = _XcmCommsAddressExtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2)
)
if mibBuilder.loadTexts:
    xcmCommsAddressExtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtTable.setDescription("""\
A 'sparse' table which augments 'xcmCommsAddressTable' with additional useful
information.
""")
_XcmCommsAddressExtEntry_Object = MibTableRow
xcmCommsAddressExtEntry = _XcmCommsAddressExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1)
)
xcmCommsAddressExtEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsAddressIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsAddressExtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtEntry.setDescription("""\
A 'sparse' entry which augments 'xcmCommsAddressEntry' with additional useful
information.
""")
_XcmCommsAddressExtRowStatus_Type = RowStatus
_XcmCommsAddressExtRowStatus_Object = MibTableColumn
xcmCommsAddressExtRowStatus = _XcmCommsAddressExtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1, 1),
    _XcmCommsAddressExtRowStatus_Type()
)
xcmCommsAddressExtRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressExtRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsAddressExtTable'.
""")


class _XcmCommsAddressExtState_Type(XcmCommsMgmtState):
    """Custom type xcmCommsAddressExtState based on XcmCommsMgmtState"""


_XcmCommsAddressExtState_Object = MibTableColumn
xcmCommsAddressExtState = _XcmCommsAddressExtState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1, 2),
    _XcmCommsAddressExtState_Type()
)
xcmCommsAddressExtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAddressExtState.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtState.setDescription("""\
A relatively generic description of the current state of this communications
entity.
""")
_XcmCommsAddressExtConditions_Type = XcmCommsMgmtConditions
_XcmCommsAddressExtConditions_Object = MibTableColumn
xcmCommsAddressExtConditions = _XcmCommsAddressExtConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1, 3),
    _XcmCommsAddressExtConditions_Type()
)
xcmCommsAddressExtConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAddressExtConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtConditions.setDescription("""\
A relatively generic description of the current conditions of this
communications entity.
""")


class _XcmCommsAddressExtForm_Type(XcmCommsAddressExtForm):
    """Custom type xcmCommsAddressExtForm based on XcmCommsAddressExtForm"""


_XcmCommsAddressExtForm_Object = MibTableColumn
xcmCommsAddressExtForm = _XcmCommsAddressExtForm_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1, 4),
    _XcmCommsAddressExtForm_Type()
)
xcmCommsAddressExtForm.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressExtForm.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtForm.setDescription("""\
The current address form of this protocol entity.
""")


class _XcmCommsAddressExtScope_Type(XcmCommsAddressExtScope):
    """Custom type xcmCommsAddressExtScope based on XcmCommsAddressExtScope"""


_XcmCommsAddressExtScope_Object = MibTableColumn
xcmCommsAddressExtScope = _XcmCommsAddressExtScope_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1, 5),
    _XcmCommsAddressExtScope_Type()
)
xcmCommsAddressExtScope.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressExtScope.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtScope.setDescription("""\
The current address scope of this protocol entity.
""")


class _XcmCommsAddressExtFanout_Type(XcmCommsAddressExtFanout):
    """Custom type xcmCommsAddressExtFanout based on XcmCommsAddressExtFanout"""


_XcmCommsAddressExtFanout_Object = MibTableColumn
xcmCommsAddressExtFanout = _XcmCommsAddressExtFanout_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1, 6),
    _XcmCommsAddressExtFanout_Type()
)
xcmCommsAddressExtFanout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressExtFanout.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtFanout.setDescription("""\
The current address fan out of this protocol entity.
""")


class _XcmCommsAddressExtMgmtIndex_Type(Cardinal32):
    """Custom type xcmCommsAddressExtMgmtIndex based on Cardinal32"""
    defaultHexValue = 0


_XcmCommsAddressExtMgmtIndex_Object = MibTableColumn
xcmCommsAddressExtMgmtIndex = _XcmCommsAddressExtMgmtIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1, 7),
    _XcmCommsAddressExtMgmtIndex_Type()
)
xcmCommsAddressExtMgmtIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressExtMgmtIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtMgmtIndex.setDescription("""\
The value of 'xcmCommsMgmtIndex' corresponding to the directly associated
conceptual row in the 'xcmCommsMgmtTable', or zero if this 'managed entity'
does NOT require such information.
""")


class _XcmCommsAddressExtOwnerOID_Type(ObjectIdentifier):
    """Custom type xcmCommsAddressExtOwnerOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmCommsAddressExtOwnerOID_Object = MibTableColumn
xcmCommsAddressExtOwnerOID = _XcmCommsAddressExtOwnerOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 11, 2, 1, 8),
    _XcmCommsAddressExtOwnerOID_Type()
)
xcmCommsAddressExtOwnerOID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsAddressExtOwnerOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtOwnerOID.setDescription("""\
The OID (object identifier) of the conceptual row or simple object which
represents some 'owner entity' associated with this entry in the
'xcmCommsAddressExtTable'.
""")
_XcmCommsTraffic_ObjectIdentity = ObjectIdentity
xcmCommsTraffic = _XcmCommsTraffic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12)
)
_XcmCommsTrafficTable_Object = MibTable
xcmCommsTrafficTable = _XcmCommsTrafficTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2)
)
if mibBuilder.loadTexts:
    xcmCommsTrafficTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficTable.setDescription("""\
A table containing input and output traffic counters for stack layers.
""")
_XcmCommsTrafficEntry_Object = MibTableRow
xcmCommsTrafficEntry = _XcmCommsTrafficEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2, 1)
)
xcmCommsTrafficEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsStackIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsTrafficEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficEntry.setDescription("""\
An entry containing input and output traffic counters for this stack layer.
""")
_XcmCommsTrafficRowStatus_Type = RowStatus
_XcmCommsTrafficRowStatus_Object = MibTableColumn
xcmCommsTrafficRowStatus = _XcmCommsTrafficRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2, 1, 1),
    _XcmCommsTrafficRowStatus_Type()
)
xcmCommsTrafficRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsTrafficRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsTrafficTable'.
""")


class _XcmCommsTrafficInputUnit_Type(XcmHrDevTrafficUnit):
    """Custom type xcmCommsTrafficInputUnit based on XcmHrDevTrafficUnit"""


_XcmCommsTrafficInputUnit_Object = MibTableColumn
xcmCommsTrafficInputUnit = _XcmCommsTrafficInputUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2, 1, 2),
    _XcmCommsTrafficInputUnit_Type()
)
xcmCommsTrafficInputUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsTrafficInputUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficInputUnit.setDescription("""\
A layer input unit, used by system administrators and end users of this layer
for traffic counters.
""")


class _XcmCommsTrafficOutputUnit_Type(XcmHrDevTrafficUnit):
    """Custom type xcmCommsTrafficOutputUnit based on XcmHrDevTrafficUnit"""


_XcmCommsTrafficOutputUnit_Object = MibTableColumn
xcmCommsTrafficOutputUnit = _XcmCommsTrafficOutputUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2, 1, 3),
    _XcmCommsTrafficOutputUnit_Type()
)
xcmCommsTrafficOutputUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsTrafficOutputUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficOutputUnit.setDescription("""\
A layer output unit, used by system administrators and end users of this layer
for traffic counters.
""")
_XcmCommsTrafficInputCount_Type = Counter32
_XcmCommsTrafficInputCount_Object = MibTableColumn
xcmCommsTrafficInputCount = _XcmCommsTrafficInputCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2, 1, 4),
    _XcmCommsTrafficInputCount_Type()
)
xcmCommsTrafficInputCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsTrafficInputCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficInputCount.setDescription("""\
A layer input traffic count, used by system administrators and end users of
this layer. Usage: Although no default value ('DEFVAL' clause) is permitted (by
IETF SMIv2) for this counter, conforming host systems SHALL zero this counter
upon conceptual row creation.
""")
_XcmCommsTrafficOutputCount_Type = Counter32
_XcmCommsTrafficOutputCount_Object = MibTableColumn
xcmCommsTrafficOutputCount = _XcmCommsTrafficOutputCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2, 1, 5),
    _XcmCommsTrafficOutputCount_Type()
)
xcmCommsTrafficOutputCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsTrafficOutputCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficOutputCount.setDescription("""\
A layer output traffic count, used by system administrators and end users of
this layer. Usage: Although no default value ('DEFVAL' clause) is permitted (by
IETF SMIv2) for this counter, conforming host systems SHALL zero this counter
upon conceptual row creation.
""")
_XcmCommsTrafficInputErrors_Type = Counter32
_XcmCommsTrafficInputErrors_Object = MibTableColumn
xcmCommsTrafficInputErrors = _XcmCommsTrafficInputErrors_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2, 1, 6),
    _XcmCommsTrafficInputErrors_Type()
)
xcmCommsTrafficInputErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsTrafficInputErrors.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficInputErrors.setDescription("""\
A layer input errors count, used by system administrators and end users of this
layer. Usage: Although no default value ('DEFVAL' clause) is permitted (by IETF
SMIv2) for this counter, conforming host systems SHALL zero this counter upon
conceptual row creation.
""")
_XcmCommsTrafficOutputErrors_Type = Counter32
_XcmCommsTrafficOutputErrors_Object = MibTableColumn
xcmCommsTrafficOutputErrors = _XcmCommsTrafficOutputErrors_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 12, 2, 1, 7),
    _XcmCommsTrafficOutputErrors_Type()
)
xcmCommsTrafficOutputErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsTrafficOutputErrors.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficOutputErrors.setDescription("""\
A layer output errors count, used by system administrators and end users of
this layer. Usage: Although no default value ('DEFVAL' clause) is permitted (by
IETF SMIv2) for this counter, conforming host systems SHALL zero this counter
upon conceptual row creation.
""")
_XcmCommsAccess_ObjectIdentity = ObjectIdentity
xcmCommsAccess = _XcmCommsAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13)
)
_XcmCommsAccessTable_Object = MibTable
xcmCommsAccessTable = _XcmCommsAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2)
)
if mibBuilder.loadTexts:
    xcmCommsAccessTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessTable.setDescription("""\
A table containing current, high-water mark, and maximum permitted values for
both connection (or association) and message (or datagram) ports at the upper
sides (ie, service provider interfaces) of stack layers.
""")
_XcmCommsAccessEntry_Object = MibTableRow
xcmCommsAccessEntry = _XcmCommsAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2, 1)
)
xcmCommsAccessEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsStackIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsAccessEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessEntry.setDescription("""\
A table containing current, high-water mark, and maximum permitted values for
both connection (or association) and message (or datagram) ports at the upper
side (ie, service provider interface) of this stack layer.
""")
_XcmCommsAccessRowStatus_Type = RowStatus
_XcmCommsAccessRowStatus_Object = MibTableColumn
xcmCommsAccessRowStatus = _XcmCommsAccessRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2, 1, 1),
    _XcmCommsAccessRowStatus_Type()
)
xcmCommsAccessRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAccessRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsAccessTable'.
""")
_XcmCommsAccessConnectPorts_Type = Gauge32
_XcmCommsAccessConnectPorts_Object = MibTableColumn
xcmCommsAccessConnectPorts = _XcmCommsAccessConnectPorts_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2, 1, 2),
    _XcmCommsAccessConnectPorts_Type()
)
xcmCommsAccessConnectPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAccessConnectPorts.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessConnectPorts.setDescription("""\
The current number of connection (or association) ports open at the upper side
(ie, service provider interface) of this layer.
""")
_XcmCommsAccessHighConnectPorts_Type = Gauge32
_XcmCommsAccessHighConnectPorts_Object = MibTableColumn
xcmCommsAccessHighConnectPorts = _XcmCommsAccessHighConnectPorts_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2, 1, 3),
    _XcmCommsAccessHighConnectPorts_Type()
)
xcmCommsAccessHighConnectPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAccessHighConnectPorts.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessHighConnectPorts.setDescription("""\
The highest number of connection (or association) ports open at the upper side
(ie, service provider interface) of this layer.
""")
_XcmCommsAccessMaxConnectPorts_Type = Cardinal32
_XcmCommsAccessMaxConnectPorts_Object = MibTableColumn
xcmCommsAccessMaxConnectPorts = _XcmCommsAccessMaxConnectPorts_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2, 1, 4),
    _XcmCommsAccessMaxConnectPorts_Type()
)
xcmCommsAccessMaxConnectPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAccessMaxConnectPorts.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessMaxConnectPorts.setDescription("""\
The maximum number of connection (or association) ports permitted at the upper
side (ie, service provider interface) of this layer.
""")
_XcmCommsAccessDatagramPorts_Type = Gauge32
_XcmCommsAccessDatagramPorts_Object = MibTableColumn
xcmCommsAccessDatagramPorts = _XcmCommsAccessDatagramPorts_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2, 1, 5),
    _XcmCommsAccessDatagramPorts_Type()
)
xcmCommsAccessDatagramPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAccessDatagramPorts.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessDatagramPorts.setDescription("""\
The current number of message (or datagram) ports open at the upper side (ie,
service provider interface) of this layer.
""")
_XcmCommsAccessHighDatagramPorts_Type = Gauge32
_XcmCommsAccessHighDatagramPorts_Object = MibTableColumn
xcmCommsAccessHighDatagramPorts = _XcmCommsAccessHighDatagramPorts_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2, 1, 6),
    _XcmCommsAccessHighDatagramPorts_Type()
)
xcmCommsAccessHighDatagramPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAccessHighDatagramPorts.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessHighDatagramPorts.setDescription("""\
The highest number of message (or datagram) ports open at the upper side (ie,
service provider interface) of this layer.
""")
_XcmCommsAccessMaxDatagramPorts_Type = Cardinal32
_XcmCommsAccessMaxDatagramPorts_Object = MibTableColumn
xcmCommsAccessMaxDatagramPorts = _XcmCommsAccessMaxDatagramPorts_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 13, 2, 1, 7),
    _XcmCommsAccessMaxDatagramPorts_Type()
)
xcmCommsAccessMaxDatagramPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsAccessMaxDatagramPorts.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessMaxDatagramPorts.setDescription("""\
The maximum number of message (or datagram) ports permitted at the upper side
(ie, service provider interface) of this layer.
""")
_XcmCommsMgmt_ObjectIdentity = ObjectIdentity
xcmCommsMgmt = _XcmCommsMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14)
)
_XcmCommsMgmtTable_Object = MibTable
xcmCommsMgmtTable = _XcmCommsMgmtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14, 2)
)
if mibBuilder.loadTexts:
    xcmCommsMgmtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtTable.setDescription("""\
A table containing additional management control objects for installed and
(possibly) active entities on this host system and supporting detailed and
extensible 'states' and 'conditions'.
""")
_XcmCommsMgmtEntry_Object = MibTableRow
xcmCommsMgmtEntry = _XcmCommsMgmtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14, 2, 1)
)
xcmCommsMgmtEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsMgmtIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsMgmtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtEntry.setDescription("""\
An entry containing additional management control objects for installed and
(possibly) active entity on this host system and supporting detailed and
extensible 'states' and 'conditions'.
""")
_XcmCommsMgmtIndex_Type = Ordinal32
_XcmCommsMgmtIndex_Object = MibTableColumn
xcmCommsMgmtIndex = _XcmCommsMgmtIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14, 2, 1, 1),
    _XcmCommsMgmtIndex_Type()
)
xcmCommsMgmtIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsMgmtIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmCommsMgmtTable'.
""")
_XcmCommsMgmtRowStatus_Type = RowStatus
_XcmCommsMgmtRowStatus_Object = MibTableColumn
xcmCommsMgmtRowStatus = _XcmCommsMgmtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14, 2, 1, 2),
    _XcmCommsMgmtRowStatus_Type()
)
xcmCommsMgmtRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsMgmtRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmCommsMgmtTable'.
""")


class _XcmCommsMgmtCommandRequest_Type(XcmCommsMgmtCommandRequest):
    """Custom type xcmCommsMgmtCommandRequest based on XcmCommsMgmtCommandRequest"""


_XcmCommsMgmtCommandRequest_Object = MibTableColumn
xcmCommsMgmtCommandRequest = _XcmCommsMgmtCommandRequest_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14, 2, 1, 3),
    _XcmCommsMgmtCommandRequest_Type()
)
xcmCommsMgmtCommandRequest.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandRequest.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandRequest.setReference("""\
See: 'xcmCommsMgmtCommand[Data|Status|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandRequest.setDescription("""\
The most recent comms management command request specified for this conceptual
row in the 'xcmCommsMgmtTable'. Usage: Conforming management agents SHALL
'reject' any SNMP Set-Request to 'xcmCommsMgmtCommand[Request|Data]' while
another management operation is already in progress (ie, while
'xcmCommsMgmtCommandInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: Conforming management stations SHALL
set 'xcmCommsMgmtCommandRequest' (mgmt operation) and 'xcmCommsMgmtCommandData'
(mgmt arguments) SIMULTANEOUSLY (in the same SNMP Set-Request PDU).
""")


class _XcmCommsMgmtCommandData_Type(XcmCommsMgmtCommandData):
    """Custom type xcmCommsMgmtCommandData based on XcmCommsMgmtCommandData"""
    defaultHexValue = ""

    subtypeSpec = XcmCommsMgmtCommandData.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmCommsMgmtCommandData_Type.__name__ = "XcmCommsMgmtCommandData"
_XcmCommsMgmtCommandData_Object = MibTableColumn
xcmCommsMgmtCommandData = _XcmCommsMgmtCommandData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14, 2, 1, 4),
    _XcmCommsMgmtCommandData_Type()
)
xcmCommsMgmtCommandData.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandData.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandData.setReference("""\
See: 'xcmCommsMgmtCommand[Request|Status|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandData.setDescription("""\
The most recent comms management command data (if any) specified for this
conceptual row in the 'xcmCommsMgmtTable'. Usage: Conforming management agents
SHALL 'reject' any SNMP Set-Request to 'xcmCommsMgmtCommand[Request|Data]'
while another management operation is already in progress (ie, while
'xcmCommsMgmtCommandInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: Conforming management stations SHALL
set 'xcmCommsMgmtCommandRequest' (mgmt operation) and 'xcmCommsMgmtCommandData'
(mgmt arguments) SIMULTANEOUSLY (in the same SNMP Set-Request PDU). Usage:
Conformant implementations MUST encrypt passwords, keys, and other security
information stored in this string object.
""")
_XcmCommsMgmtCommandStatus_Type = XcmGenSNMPv2ErrorStatus
_XcmCommsMgmtCommandStatus_Object = MibTableColumn
xcmCommsMgmtCommandStatus = _XcmCommsMgmtCommandStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14, 2, 1, 5),
    _XcmCommsMgmtCommandStatus_Type()
)
xcmCommsMgmtCommandStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandStatus.setReference("""\
See: 'xcmCommsMgmtCommand[Request|Data|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandStatus.setDescription("""\
The simple comms management error status associated with this conceptual row in
'xcmCommsMgmtTable'. Usage: Conforming management agents SHALL set this object
to the value returned in an SNMP Set-Response PDU when a simple comms
management operation is 'accepted', ie, when 'xcmCommsMgmtCommandInProgress'
goes from 'false' to 'true'. Usage: Conforming management agents SHALL set this
object to the value of the completion status of the (possibly deferred) simple
comms management operation, when 'xcmCommsMgmtCommandInProgress' goes from
'true' to 'false'.
""")


class _XcmCommsMgmtCommandInProgress_Type(TruthValue):
    """Custom type xcmCommsMgmtCommandInProgress based on TruthValue"""


_XcmCommsMgmtCommandInProgress_Object = MibTableColumn
xcmCommsMgmtCommandInProgress = _XcmCommsMgmtCommandInProgress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 14, 2, 1, 6),
    _XcmCommsMgmtCommandInProgress_Type()
)
xcmCommsMgmtCommandInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandInProgress.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandInProgress.setReference("""\
See: 'xcmCommsMgmtCommand[Request|Data|Status]'
""")
if mibBuilder.loadTexts:
    xcmCommsMgmtCommandInProgress.setDescription("""\
The comms management in progress status associated with this conceptual row in
'xcmCommsMgmtTable'. Usage: Conforming management agents SHALL 'reject' any
SNMP Set-Request to 'xcmCommsMgmtCommand[Request|Data]' while another
management operation is already in progress (ie, while
'xcmCommsMgmtCommandInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3).
""")
_XcmPidTC_ObjectIdentity = ObjectIdentity
xcmPidTC = _XcmPidTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62)
)
if mibBuilder.loadTexts:
    xcmPidTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidTC.setDescription("""\
 XCMI Product ID Module, Version 6.038.pub Copyright (C) 1997-2013 Xerox
Corporation. All Rights Reserved.
""")
_XcmPidProductIdentifiers_ObjectIdentity = ObjectIdentity
xcmPidProductIdentifiers = _XcmPidProductIdentifiers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1)
)
if mibBuilder.loadTexts:
    xcmPidProductIdentifiers.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidProductIdentifiers.setDescription("""\
The root of all identifiers defined in this module.
""")
_XcmPidDocuCentreSystems_ObjectIdentity = ObjectIdentity
xcmPidDocuCentreSystems = _XcmPidDocuCentreSystems_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuCentreSystems.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuCentreSystems.setDescription("""\
Document Centre Systems product line identifier (not a complete product
identifier).
""")
_XcmPidDCS20_ObjectIdentity = ObjectIdentity
xcmPidDCS20 = _XcmPidDCS20_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDCS20.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCS20.setDescription("""\
Document Centre/System 20 product type identifier (not a complete product
identifier).
""")
_XcmPidDCS20M1_ObjectIdentity = ObjectIdentity
xcmPidDCS20M1 = _XcmPidDCS20M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDCS20M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCS20M1.setDescription("""\
Document Centre/System 20 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDCS20M1V1_ObjectIdentity = ObjectIdentity
xcmPidDCS20M1V1 = _XcmPidDCS20M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDCS20M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCS20M1V1.setDescription("""\
Document Centre/System 20 launch configuration version, and complete product
identifier.
""")
_XcmPidDCS35_ObjectIdentity = ObjectIdentity
xcmPidDCS35 = _XcmPidDCS35_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDCS35.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCS35.setDescription("""\
Document Centre/System 35 product type identifier (not a complete product
identifier).
""")
_XcmPidDCS35M1_ObjectIdentity = ObjectIdentity
xcmPidDCS35M1 = _XcmPidDCS35M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDCS35M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCS35M1.setDescription("""\
Document Centre/System 35 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDCS35M1V1_ObjectIdentity = ObjectIdentity
xcmPidDCS35M1V1 = _XcmPidDCS35M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDCS35M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCS35M1V1.setDescription("""\
Document Centre/System 35 launch configuration version, and complete product
identifier.
""")
_XcmPidDC230_ObjectIdentity = ObjectIdentity
xcmPidDC230 = _XcmPidDC230_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC230.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230.setDescription("""\
Document Centre 230 product type identifier (not a complete product
identifier).
""")
_XcmPidDC230ST_ObjectIdentity = ObjectIdentity
xcmPidDC230ST = _XcmPidDC230ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC230ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230ST.setDescription("""\
Document Centre 230ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC230STV1_ObjectIdentity = ObjectIdentity
xcmPidDC230STV1 = _XcmPidDC230STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC230STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230STV1.setDescription("""\
Document Centre 230ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC230STV2_ObjectIdentity = ObjectIdentity
xcmPidDC230STV2 = _XcmPidDC230STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC230STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230STV2.setDescription("""\
Document Centre 230ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC230STV3_ObjectIdentity = ObjectIdentity
xcmPidDC230STV3 = _XcmPidDC230STV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC230STV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230STV3.setDescription("""\
Document Centre 230ST multi-function system second post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC230STV4_ObjectIdentity = ObjectIdentity
xcmPidDC230STV4 = _XcmPidDC230STV4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidDC230STV4.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230STV4.setDescription("""\
Document Centre 230ST multi-function system third post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC230STV5_ObjectIdentity = ObjectIdentity
xcmPidDC230STV5 = _XcmPidDC230STV5_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidDC230STV5.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230STV5.setDescription("""\
Document Centre 230ST multi-function system fourth post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC230LP_ObjectIdentity = ObjectIdentity
xcmPidDC230LP = _XcmPidDC230LP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC230LP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230LP.setDescription("""\
Document Centre 230LP laser printer model identifier (not a complete product
identifier).
""")
_XcmPidDC230LPV1_ObjectIdentity = ObjectIdentity
xcmPidDC230LPV1 = _XcmPidDC230LPV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC230LPV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230LPV1.setDescription("""\
Document Centre 230LP laser printer launch configuration version, and complete
product identifier.
""")
_XcmPidDC230LPV2_ObjectIdentity = ObjectIdentity
xcmPidDC230LPV2 = _XcmPidDC230LPV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC230LPV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230LPV2.setDescription("""\
Document Centre 230LP laser printer first post-launch configuration version,
and complete product identifier.
""")
_XcmPidDC230LPV3_ObjectIdentity = ObjectIdentity
xcmPidDC230LPV3 = _XcmPidDC230LPV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC230LPV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230LPV3.setDescription("""\
Document Centre 230LP laser printer second post-launch configuration version,
and complete product identifier.
""")
_XcmPidDC230LPV4_ObjectIdentity = ObjectIdentity
xcmPidDC230LPV4 = _XcmPidDC230LPV4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 2, 4)
)
if mibBuilder.loadTexts:
    xcmPidDC230LPV4.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230LPV4.setDescription("""\
Document Centre 230LP laser printer third post-launch configuration version,
and complete product identifier.
""")
_XcmPidDC230LPV5_ObjectIdentity = ObjectIdentity
xcmPidDC230LPV5 = _XcmPidDC230LPV5_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 3, 2, 5)
)
if mibBuilder.loadTexts:
    xcmPidDC230LPV5.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230LPV5.setDescription("""\
Document Centre 230LP laser printer fourth post-launch configuration version,
and complete product identifier.
""")
_XcmPidDC265_ObjectIdentity = ObjectIdentity
xcmPidDC265 = _XcmPidDC265_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidDC265.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265.setDescription("""\
Document Centre 265 product type identifier (not a complete product
identifier).
""")
_XcmPidDC265ST_ObjectIdentity = ObjectIdentity
xcmPidDC265ST = _XcmPidDC265ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC265ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265ST.setDescription("""\
Document Centre 265ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC265STV1_ObjectIdentity = ObjectIdentity
xcmPidDC265STV1 = _XcmPidDC265STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC265STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265STV1.setDescription("""\
Document Centre 265ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC265STV2_ObjectIdentity = ObjectIdentity
xcmPidDC265STV2 = _XcmPidDC265STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC265STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265STV2.setDescription("""\
Document Centre 265ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC265STV3_ObjectIdentity = ObjectIdentity
xcmPidDC265STV3 = _XcmPidDC265STV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC265STV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265STV3.setDescription("""\
Document Centre 265ST multi-function system second post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC265LP_ObjectIdentity = ObjectIdentity
xcmPidDC265LP = _XcmPidDC265LP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC265LP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265LP.setDescription("""\
Document Centre 265LP laser printer model identifier (not a complete product
identifier).
""")
_XcmPidDC265LPV1_ObjectIdentity = ObjectIdentity
xcmPidDC265LPV1 = _XcmPidDC265LPV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC265LPV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265LPV1.setDescription("""\
Document Centre 265LP laser printer launch configuration version, and complete
product identifier.
""")
_XcmPidDC265LPV2_ObjectIdentity = ObjectIdentity
xcmPidDC265LPV2 = _XcmPidDC265LPV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC265LPV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265LPV2.setDescription("""\
Document Centre 265LP laser printer first post-launch configuration version,
and complete product identifier.
""")
_XcmPidDC265LPV3_ObjectIdentity = ObjectIdentity
xcmPidDC265LPV3 = _XcmPidDC265LPV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 4, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC265LPV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC265LPV3.setDescription("""\
Document Centre 265LP laser printer second post-launch configuration version,
and complete product identifier.
""")
_XcmPidDC240_ObjectIdentity = ObjectIdentity
xcmPidDC240 = _XcmPidDC240_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidDC240.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC240.setDescription("""\
Document Centre 240 product type identifier (not a complete product
identifier).
""")
_XcmPidDC240ST_ObjectIdentity = ObjectIdentity
xcmPidDC240ST = _XcmPidDC240ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC240ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC240ST.setDescription("""\
Document Centre 240ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC240STV1_ObjectIdentity = ObjectIdentity
xcmPidDC240STV1 = _XcmPidDC240STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 5, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC240STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC240STV1.setDescription("""\
Document Centre 240ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC240STV2_ObjectIdentity = ObjectIdentity
xcmPidDC240STV2 = _XcmPidDC240STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 5, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC240STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC240STV2.setDescription("""\
Document Centre 240ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC240STV3_ObjectIdentity = ObjectIdentity
xcmPidDC240STV3 = _XcmPidDC240STV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 5, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC240STV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC240STV3.setDescription("""\
Document Centre 240ST multi-function system second post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC340_ObjectIdentity = ObjectIdentity
xcmPidDC340 = _XcmPidDC340_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 6)
)
if mibBuilder.loadTexts:
    xcmPidDC340.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC340.setDescription("""\
Document Centre 340 product type identifier (not a complete product
identifier).
""")
_XcmPidDC340ST_ObjectIdentity = ObjectIdentity
xcmPidDC340ST = _XcmPidDC340ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC340ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC340ST.setDescription("""\
Document Centre 340ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC340STV1_ObjectIdentity = ObjectIdentity
xcmPidDC340STV1 = _XcmPidDC340STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 6, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC340STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC340STV1.setDescription("""\
Document Centre 340ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC340STV2_ObjectIdentity = ObjectIdentity
xcmPidDC340STV2 = _XcmPidDC340STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 6, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC340STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC340STV2.setDescription("""\
Document Centre 340ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC255_ObjectIdentity = ObjectIdentity
xcmPidDC255 = _XcmPidDC255_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7)
)
if mibBuilder.loadTexts:
    xcmPidDC255.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255.setDescription("""\
Document Centre 255 product type identifier (not a complete product
identifier).
""")
_XcmPidDC255ST_ObjectIdentity = ObjectIdentity
xcmPidDC255ST = _XcmPidDC255ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC255ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255ST.setDescription("""\
Document Centre 255ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC255STV1_ObjectIdentity = ObjectIdentity
xcmPidDC255STV1 = _XcmPidDC255STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC255STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255STV1.setDescription("""\
Document Centre 255ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC255STV2_ObjectIdentity = ObjectIdentity
xcmPidDC255STV2 = _XcmPidDC255STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC255STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255STV2.setDescription("""\
Document Centre 255ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC255STV3_ObjectIdentity = ObjectIdentity
xcmPidDC255STV3 = _XcmPidDC255STV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC255STV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255STV3.setDescription("""\
Document Centre 255ST multi-function system second post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC255LP_ObjectIdentity = ObjectIdentity
xcmPidDC255LP = _XcmPidDC255LP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC255LP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255LP.setDescription("""\
Document Centre 255LP laser printer model identifier (not a complete product
identifier).
""")
_XcmPidDC255LPV1_ObjectIdentity = ObjectIdentity
xcmPidDC255LPV1 = _XcmPidDC255LPV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC255LPV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255LPV1.setDescription("""\
Document Centre 255LP laser printer launch configuration version, and complete
product identifier.
""")
_XcmPidDC255LPV2_ObjectIdentity = ObjectIdentity
xcmPidDC255LPV2 = _XcmPidDC255LPV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC255LPV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255LPV2.setDescription("""\
Document Centre 255LP laser printer first post-launch configuration version,
and complete product identifier.
""")
_XcmPidDC255LPV3_ObjectIdentity = ObjectIdentity
xcmPidDC255LPV3 = _XcmPidDC255LPV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 7, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC255LPV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC255LPV3.setDescription("""\
Document Centre 255LP laser printer second post-launch configuration version,
and complete product identifier.
""")
_XcmPidDC220_ObjectIdentity = ObjectIdentity
xcmPidDC220 = _XcmPidDC220_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 8)
)
if mibBuilder.loadTexts:
    xcmPidDC220.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC220.setDescription("""\
Document Centre 220 product type identifier (not a complete product
identifier).
""")
_XcmPidDC220ST_ObjectIdentity = ObjectIdentity
xcmPidDC220ST = _XcmPidDC220ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 8, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC220ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC220ST.setDescription("""\
Document Centre 220ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC220STV3_ObjectIdentity = ObjectIdentity
xcmPidDC220STV3 = _XcmPidDC220STV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 8, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC220STV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC220STV3.setDescription("""\
Document Centre 220ST multi-function system second post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC220STV4_ObjectIdentity = ObjectIdentity
xcmPidDC220STV4 = _XcmPidDC220STV4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 8, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidDC220STV4.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC220STV4.setDescription("""\
Document Centre 220ST multi-function system third post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC332_ObjectIdentity = ObjectIdentity
xcmPidDC332 = _XcmPidDC332_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 9)
)
if mibBuilder.loadTexts:
    xcmPidDC332.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC332.setDescription("""\
Document Centre 332 product type identifier (not a complete product
identifier).
""")
_XcmPidDC332ST_ObjectIdentity = ObjectIdentity
xcmPidDC332ST = _XcmPidDC332ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC332ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC332ST.setDescription("""\
Document Centre 332ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC332STV1_ObjectIdentity = ObjectIdentity
xcmPidDC332STV1 = _XcmPidDC332STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 9, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC332STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC332STV1.setDescription("""\
Document Centre 332ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC332STV2_ObjectIdentity = ObjectIdentity
xcmPidDC332STV2 = _XcmPidDC332STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 9, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC332STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC332STV2.setDescription("""\
Document Centre 332ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC4XX_ObjectIdentity = ObjectIdentity
xcmPidDC4XX = _XcmPidDC4XX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 17)
)
if mibBuilder.loadTexts:
    xcmPidDC4XX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC4XX.setDescription("""\
Document Centre 4XX product type identifier (not a complete product
identifier).
""")
_XcmPidDC460_ObjectIdentity = ObjectIdentity
xcmPidDC460 = _XcmPidDC460_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 17, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC460.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC460.setDescription("""\
Document Centre 460 multi-functional system model identifier (not a complete
product identifier).
""")
_XcmPidDC460V1_ObjectIdentity = ObjectIdentity
xcmPidDC460V1 = _XcmPidDC460V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 17, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC460V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC460V1.setDescription("""\
Document Centre 460 multi-functional system launch configuration version, and
complete product identifier.
""")
_XcmPidDC470_ObjectIdentity = ObjectIdentity
xcmPidDC470 = _XcmPidDC470_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 17, 4)
)
if mibBuilder.loadTexts:
    xcmPidDC470.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC470.setDescription("""\
Document Centre 470 multi-functional system model identifier (not a complete
product identifier).
""")
_XcmPidDC470V1_ObjectIdentity = ObjectIdentity
xcmPidDC470V1 = _XcmPidDC470V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 17, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC470V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC470V1.setDescription("""\
Document Centre 470 multi-functional system launch configuration version, and
complete product identifier.
""")
_XcmPidDC420_ObjectIdentity = ObjectIdentity
xcmPidDC420 = _XcmPidDC420_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 19)
)
if mibBuilder.loadTexts:
    xcmPidDC420.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC420.setDescription("""\
Document Centre 420 product type identifier (not a complete product
identifier).
""")
_XcmPidDC420ST_ObjectIdentity = ObjectIdentity
xcmPidDC420ST = _XcmPidDC420ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC420ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC420ST.setDescription("""\
Document Centre 420ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC420STV1_ObjectIdentity = ObjectIdentity
xcmPidDC420STV1 = _XcmPidDC420STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 19, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC420STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC420STV1.setDescription("""\
Document Centre 420ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC420STV2_ObjectIdentity = ObjectIdentity
xcmPidDC420STV2 = _XcmPidDC420STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 19, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC420STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC420STV2.setDescription("""\
Document Centre 420ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC426_ObjectIdentity = ObjectIdentity
xcmPidDC426 = _XcmPidDC426_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 19, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC426.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC426.setDescription("""\
Document Centre 426 multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC426V1_ObjectIdentity = ObjectIdentity
xcmPidDC426V1 = _XcmPidDC426V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 19, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC426V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC426V1.setDescription("""\
Document Centre 426 multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC432_ObjectIdentity = ObjectIdentity
xcmPidDC432 = _XcmPidDC432_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20)
)
if mibBuilder.loadTexts:
    xcmPidDC432.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC432.setDescription("""\
Document Centre 432 product type identifier (not a complete product
identifier).
""")
_XcmPidDC432ST_ObjectIdentity = ObjectIdentity
xcmPidDC432ST = _XcmPidDC432ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC432ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC432ST.setDescription("""\
Document Centre 432ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC432STV1_ObjectIdentity = ObjectIdentity
xcmPidDC432STV1 = _XcmPidDC432STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC432STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC432STV1.setDescription("""\
Document Centre 432ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC432STV2_ObjectIdentity = ObjectIdentity
xcmPidDC432STV2 = _XcmPidDC432STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC432STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC432STV2.setDescription("""\
Document Centre 432ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC432STV3_ObjectIdentity = ObjectIdentity
xcmPidDC432STV3 = _XcmPidDC432STV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC432STV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC432STV3.setDescription("""\
Document Centre 432ST multi-function system second post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC432STV4_ObjectIdentity = ObjectIdentity
xcmPidDC432STV4 = _XcmPidDC432STV4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidDC432STV4.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC432STV4.setDescription("""\
Document Centre 432ST multi-function system third post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC432STV5_ObjectIdentity = ObjectIdentity
xcmPidDC432STV5 = _XcmPidDC432STV5_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidDC432STV5.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC432STV5.setDescription("""\
Document Centre 432ST multi-function system fourth post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC430_ObjectIdentity = ObjectIdentity
xcmPidDC430 = _XcmPidDC430_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC430.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC430.setDescription("""\
Document Centre 430 multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC430V1_ObjectIdentity = ObjectIdentity
xcmPidDC430V1 = _XcmPidDC430V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 20, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC430V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC430V1.setDescription("""\
Document Centre 430 multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC440_ObjectIdentity = ObjectIdentity
xcmPidDC440 = _XcmPidDC440_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 21)
)
if mibBuilder.loadTexts:
    xcmPidDC440.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC440.setDescription("""\
Document Centre 440 product type identifier (not a complete product
identifier).
""")
_XcmPidDC440ST_ObjectIdentity = ObjectIdentity
xcmPidDC440ST = _XcmPidDC440ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 21, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC440ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC440ST.setDescription("""\
Document Centre 440ST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC440STV1_ObjectIdentity = ObjectIdentity
xcmPidDC440STV1 = _XcmPidDC440STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 21, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC440STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC440STV1.setDescription("""\
Document Centre 440ST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC440STV2_ObjectIdentity = ObjectIdentity
xcmPidDC440STV2 = _XcmPidDC440STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 21, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC440STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC440STV2.setDescription("""\
Document Centre 440ST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC440STV3_ObjectIdentity = ObjectIdentity
xcmPidDC440STV3 = _XcmPidDC440STV3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 21, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidDC440STV3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC440STV3.setDescription("""\
Document Centre 440ST multi-function system second post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC230i_ObjectIdentity = ObjectIdentity
xcmPidDC230i = _XcmPidDC230i_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 22)
)
if mibBuilder.loadTexts:
    xcmPidDC230i.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230i.setDescription("""\
Document Centre 230i multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC230iST_ObjectIdentity = ObjectIdentity
xcmPidDC230iST = _XcmPidDC230iST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 22, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC230iST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230iST.setDescription("""\
Document Centre 230iST multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC230iSTV1_ObjectIdentity = ObjectIdentity
xcmPidDC230iSTV1 = _XcmPidDC230iSTV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 22, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC230iSTV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230iSTV1.setDescription("""\
Document Centre 230iST multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC230iSTV2_ObjectIdentity = ObjectIdentity
xcmPidDC230iSTV2 = _XcmPidDC230iSTV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 22, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC230iSTV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC230iSTV2.setDescription("""\
Document Centre 230iST multi-function system first post-launch configuration
version, and complete product identifier.
""")
_XcmPidDC4YY_ObjectIdentity = ObjectIdentity
xcmPidDC4YY = _XcmPidDC4YY_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 23)
)
if mibBuilder.loadTexts:
    xcmPidDC4YY.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC4YY.setDescription("""\
Document Centre 4YY product type identifier (not a complete product
identifier).
""")
_XcmPidDC480_ObjectIdentity = ObjectIdentity
xcmPidDC480 = _XcmPidDC480_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 23, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC480.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC480.setDescription("""\
Document Centre 480 multi-functional system model identifier (not a complete
product identifier).
""")
_XcmPidDC480V1_ObjectIdentity = ObjectIdentity
xcmPidDC480V1 = _XcmPidDC480V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 23, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC480V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC480V1.setDescription("""\
Document Centre 480 multi-functional system, UNUSED version, and complete
product identifier.
""")
_XcmPidDC425_ObjectIdentity = ObjectIdentity
xcmPidDC425 = _XcmPidDC425_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 24)
)
if mibBuilder.loadTexts:
    xcmPidDC425.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC425.setDescription("""\
Document Centre 425 product type identifier (not a complete product
identifier).
""")
_XcmPidDC425ST_ObjectIdentity = ObjectIdentity
xcmPidDC425ST = _XcmPidDC425ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 24, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC425ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC425ST.setDescription("""\
Document Centre 425ST multi-functional system model identifier (not a complete
product identifier).
""")
_XcmPidDC425STV1_ObjectIdentity = ObjectIdentity
xcmPidDC425STV1 = _XcmPidDC425STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 24, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC425STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC425STV1.setDescription("""\
Document Centre 425ST multi-functional system launch configuration version, and
complete product identifier.
""")
_XcmPidDC555_ObjectIdentity = ObjectIdentity
xcmPidDC555 = _XcmPidDC555_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 27)
)
if mibBuilder.loadTexts:
    xcmPidDC555.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC555.setDescription("""\
Document Centre 555 product type identifier (not a complete product
identifier).
""")
_XcmPidDC555ST_ObjectIdentity = ObjectIdentity
xcmPidDC555ST = _XcmPidDC555ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 27, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC555ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC555ST.setDescription("""\
Document Centre 555ST multi-functional system model identifier (not a complete
product identifier).
""")
_XcmPidDC555STV1_ObjectIdentity = ObjectIdentity
xcmPidDC555STV1 = _XcmPidDC555STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 27, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC555STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC555STV1.setDescription("""\
Document Centre 555ST multi-functional system ECE pre-launch configuration
version, and complete product identifier.
""")
_XcmPidDC555STV2_ObjectIdentity = ObjectIdentity
xcmPidDC555STV2 = _XcmPidDC555STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 27, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC555STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC555STV2.setDescription("""\
Document Centre 555ST multi-functional system, launch configuration version,
and complete product identifier.
""")
_XcmPidDC535_ObjectIdentity = ObjectIdentity
xcmPidDC535 = _XcmPidDC535_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 30)
)
if mibBuilder.loadTexts:
    xcmPidDC535.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC535.setDescription("""\
Document Centre 535 product type identifier (not a complete product
identifier).
""")
_XcmPidDC535ST_ObjectIdentity = ObjectIdentity
xcmPidDC535ST = _XcmPidDC535ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 30, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC535ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC535ST.setDescription("""\
Document Centre 535 multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC535STV1_ObjectIdentity = ObjectIdentity
xcmPidDC535STV1 = _XcmPidDC535STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 30, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC535STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC535STV1.setDescription("""\
Document Centre 535 multi-function system ECE pre-launch configuration version,
and complete product identifier.
""")
_XcmPidDC535STV2_ObjectIdentity = ObjectIdentity
xcmPidDC535STV2 = _XcmPidDC535STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 30, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC535STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC535STV2.setDescription("""\
Document Centre 535 multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDC545_ObjectIdentity = ObjectIdentity
xcmPidDC545 = _XcmPidDC545_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 31)
)
if mibBuilder.loadTexts:
    xcmPidDC545.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC545.setDescription("""\
Document Centre 545 product type identifier (not a complete product
identifier).
""")
_XcmPidDC545ST_ObjectIdentity = ObjectIdentity
xcmPidDC545ST = _XcmPidDC545ST_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 31, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC545ST.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC545ST.setDescription("""\
Document Centre 545 multi-function system model identifier (not a complete
product identifier).
""")
_XcmPidDC545STV1_ObjectIdentity = ObjectIdentity
xcmPidDC545STV1 = _XcmPidDC545STV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 31, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDC545STV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC545STV1.setDescription("""\
Document Centre 545 multi-function system ECE pre-launch configuration version,
and complete product identifier.
""")
_XcmPidDC545STV2_ObjectIdentity = ObjectIdentity
xcmPidDC545STV2 = _XcmPidDC545STV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 1, 31, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDC545STV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC545STV2.setDescription("""\
Document Centre 545 multi-function system launch configuration version, and
complete product identifier.
""")
_XcmPidDesktopDocuPrintPrinters_ObjectIdentity = ObjectIdentity
xcmPidDesktopDocuPrintPrinters = _XcmPidDesktopDocuPrintPrinters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDesktopDocuPrintPrinters.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDesktopDocuPrintPrinters.setDescription("""\
Desktop DocuPrint Printers product line identifier (not a complete product
identifier).
""")
_XcmPid4517_ObjectIdentity = ObjectIdentity
xcmPid4517 = _XcmPid4517_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPid4517.setStatus("current")
if mibBuilder.loadTexts:
    xcmPid4517.setDescription("""\
Desktop DocuPrint 4517 product type identifier (not a complete product
identifier).
""")
_XcmPid4517PlusM1_ObjectIdentity = ObjectIdentity
xcmPid4517PlusM1 = _XcmPid4517PlusM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPid4517PlusM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPid4517PlusM1.setDescription("""\
Desktop DocuPrint 4517+ launch configuration model identifier (not a complete
product identifier).
""")
_XcmPid4517PlusM1V1_ObjectIdentity = ObjectIdentity
xcmPid4517PlusM1V1 = _XcmPid4517PlusM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPid4517PlusM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPid4517PlusM1V1.setDescription("""\
Desktop DocuPrint 4517+ launch configuration model and version, and complete
product identifier.
""")
_XcmPidDocuPrintN17_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN17 = _XcmPidDocuPrintN17_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN17.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN17.setDescription("""\
Desktop DocuPrint N17 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDocuPrintN17V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN17V1 = _XcmPidDocuPrintN17V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN17V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN17V1.setDescription("""\
Desktop DocuPrint N17 launch configuration model and version, and complete
product identifier.
""")
_XcmPidDocuPrintC55_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintC55 = _XcmPidDocuPrintC55_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintC55.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintC55.setDescription("""\
Desktop DocuPrint C55 product type identifier (not a complete product
identifier).
""")
_XcmPidDocuPrintC55M1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintC55M1 = _XcmPidDocuPrintC55M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintC55M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintC55M1.setDescription("""\
Desktop DocuPrint C55 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDocuPrintC55M1V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintC55M1V1 = _XcmPidDocuPrintC55M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintC55M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintC55M1V1.setDescription("""\
Desktop DocuPrint C55 launch configuration model and version, and complete
product identifier.
""")
_XcmPidDocuPrintC55M1V2_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintC55M1V2 = _XcmPidDocuPrintC55M1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 3, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintC55M1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintC55M1V2.setDescription("""\
Desktop DocuPrint C55 launch configuration model post-launch configuration
version, and complete product identifier.
""")
_XcmPidDocuPrintNC60_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNC60 = _XcmPidDocuPrintNC60_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC60.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC60.setDescription("""\
Desktop DocuPrint NC60 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDocuPrintNC60V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNC60V1 = _XcmPidDocuPrintNC60V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 3, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC60V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC60V1.setDescription("""\
Desktop DocuPrint NC60 launch configuration model and version, and complete
product identifier.
""")
_XcmPidP1210_ObjectIdentity = ObjectIdentity
xcmPidP1210 = _XcmPidP1210_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 4)
)
if mibBuilder.loadTexts:
    xcmPidP1210.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidP1210.setDescription("""\
Desktop DocuPrint P1210 product type identifier (not a complete product
identifier).
""")
_XcmPidP1210M1_ObjectIdentity = ObjectIdentity
xcmPidP1210M1 = _XcmPidP1210M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidP1210M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidP1210M1.setDescription("""\
Desktop DocuPrint P1210 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidP1210M1V1_ObjectIdentity = ObjectIdentity
xcmPidP1210M1V1 = _XcmPidP1210M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 4, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidP1210M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidP1210M1V1.setDescription("""\
Desktop DocuPrint P1210 launch configuration model and version, and complete
product identifier.
""")
_XcmPidP3400_ObjectIdentity = ObjectIdentity
xcmPidP3400 = _XcmPidP3400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 5)
)
if mibBuilder.loadTexts:
    xcmPidP3400.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidP3400.setDescription("""\
Xerox Phaser 3400 product type identifier (not a complete product identifier).
""")
_XcmPidP3400M1_ObjectIdentity = ObjectIdentity
xcmPidP3400M1 = _XcmPidP3400M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidP3400M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidP3400M1.setDescription("""\
Xerox Phaser 3400 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidP3400M1V1_ObjectIdentity = ObjectIdentity
xcmPidP3400M1V1 = _XcmPidP3400M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 2, 5, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidP3400M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidP3400M1V1.setDescription("""\
Xerox Phaser 3400 launch configuration model and version, and complete product
identifier.
""")
_XcmPidWorkGroupDocuPrintPrinters_ObjectIdentity = ObjectIdentity
xcmPidWorkGroupDocuPrintPrinters = _XcmPidWorkGroupDocuPrintPrinters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidWorkGroupDocuPrintPrinters.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkGroupDocuPrintPrinters.setDescription("""\
WorkGroup & MidRange DocuPrint Printers product line identifier (not a complete
product identifier).
""")
_XcmPidDocuPrintNnn_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNnn = _XcmPidDocuPrintNnn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNnn.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNnn.setDescription("""\
WorkGroup DocuPrint Nnn product type identifier (not a complete product
identifier).
""")
_XcmPidDocuPrintN32_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN32 = _XcmPidDocuPrintN32_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN32.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN32.setDescription("""\
WorkGroup DocuPrint N32 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN32V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN32V1 = _XcmPidDocuPrintN32V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN32V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN32V1.setDescription("""\
WorkGroup DocuPrint N32 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN32V2_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN32V2 = _XcmPidDocuPrintN32V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN32V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN32V2.setDescription("""\
WorkGroup DocuPrint N32 post-launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN24_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN24 = _XcmPidDocuPrintN24_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN24.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN24.setDescription("""\
WorkGroup DocuPrint N24 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN24V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN24V1 = _XcmPidDocuPrintN24V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN24V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN24V1.setDescription("""\
WorkGroup DocuPrint N24 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN24V2_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN24V2 = _XcmPidDocuPrintN24V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN24V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN24V2.setDescription("""\
WorkGroup DocuPrint N24 post-launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN40_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN40 = _XcmPidDocuPrintN40_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN40.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN40.setDescription("""\
WorkGroup DocuPrint N40 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN40V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN40V1 = _XcmPidDocuPrintN40V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN40V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN40V1.setDescription("""\
WorkGroup DocuPrint N40 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN2025_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2025 = _XcmPidDocuPrintN2025_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 17)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2025.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2025.setDescription("""\
WorkGroup DocuPrint N2025 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN2025V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2025V1 = _XcmPidDocuPrintN2025V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2025V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2025V1.setDescription("""\
WorkGroup DocuPrint N2025 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN2025V2_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2025V2 = _XcmPidDocuPrintN2025V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 17, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2025V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2025V2.setDescription("""\
WorkGroup DocuPrint N2025 first post-launch configuration version, and complete
product identifier.
""")
_XcmPidDocuPrintN2125_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2125 = _XcmPidDocuPrintN2125_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 18)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2125.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2125.setDescription("""\
WorkGroup DocuPrint N2125 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN2125V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2125V1 = _XcmPidDocuPrintN2125V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2125V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2125V1.setDescription("""\
WorkGroup DocuPrint N2125 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN2425_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2425 = _XcmPidDocuPrintN2425_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 19)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2425.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2425.setDescription("""\
WorkGroup DocuPrint N2425 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN2425V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2425V1 = _XcmPidDocuPrintN2425V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2425V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2425V1.setDescription("""\
WorkGroup DocuPrint N2425 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN2825_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2825 = _XcmPidDocuPrintN2825_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 20)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2825.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2825.setDescription("""\
WorkGroup DocuPrint N2825 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN2825V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN2825V1 = _XcmPidDocuPrintN2825V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2825V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN2825V1.setDescription("""\
WorkGroup DocuPrint N2825 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN3225_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN3225 = _XcmPidDocuPrintN3225_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 21)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN3225.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN3225.setDescription("""\
WorkGroup DocuPrint N3225 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN3225V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN3225V1 = _XcmPidDocuPrintN3225V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 21, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN3225V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN3225V1.setDescription("""\
WorkGroup DocuPrint N3225 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN4025_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN4025 = _XcmPidDocuPrintN4025_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 22)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4025.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4025.setDescription("""\
WorkGroup DocuPrint N4025 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN4025V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN4025V1 = _XcmPidDocuPrintN4025V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 22, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4025V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4025V1.setDescription("""\
WorkGroup DocuPrint N4025 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN4025V2_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN4025V2 = _XcmPidDocuPrintN4025V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 22, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4025V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4025V2.setDescription("""\
WorkGroup DocuPrint N4025 first post-launch configuration version, and complete
product identifier.
""")
_XcmPidDocuPrintAyame35_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintAyame35 = _XcmPidDocuPrintAyame35_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 35)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintAyame35.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintAyame35.setDescription("""\
WorkGroup DocuPrint Ayame35 model identifier (not a complete product
identifier).
""")
_XcmPidDocuPrintAyame35V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintAyame35V1 = _XcmPidDocuPrintAyame35V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 35, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintAyame35V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintAyame35V1.setDescription("""\
WorkGroup DocuPrint Ayame35 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintN4525_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN4525 = _XcmPidDocuPrintN4525_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 36)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4525.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4525.setDescription("""\
WorkGroup DocuPrint N4525 model identifier (not a complete product identifier).
""")
_XcmPidDocuPrintN4525V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintN4525V1 = _XcmPidDocuPrintN4525V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 36, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4525V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintN4525V1.setDescription("""\
WorkGroup DocuPrint N4525 launch configuration version, and complete product
identifier.
""")
_XcmPidPhaser5400_ObjectIdentity = ObjectIdentity
xcmPidPhaser5400 = _XcmPidPhaser5400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 37)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5400.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5400.setDescription("""\
WorkGroup Phaser 5400 model identifier (not a complete product identifier).
""")
_XcmPidPhaser5400V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser5400V1 = _XcmPidPhaser5400V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 2, 37, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5400V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5400V1.setDescription("""\
WorkGroup Phaser 5400 launch configuration version, and complete product
identifier.
""")
_XcmPidDocuPrintNCnn_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNCnn = _XcmPidDocuPrintNCnn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 3)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNCnn.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNCnn.setDescription("""\
WorkGroup DocuPrint NCnn Color Laser Printers product type identifier (not a
complete product identifier).
""")
_XcmPidDocuPrintNC70_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNC70 = _XcmPidDocuPrintNC70_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC70.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC70.setDescription("""\
WorkGroup DocuPrint NC70 Color Laser Printer model identifier (not a complete
product identifier).
""")
_XcmPidDocuPrintNC70V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNC70V1 = _XcmPidDocuPrintNC70V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC70V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC70V1.setDescription("""\
WorkGroup DocuPrint NC70 Color Laser Printer launch configuration version, and
complete product identifier.
""")
_XcmPidDocuPrintNC80_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNC80 = _XcmPidDocuPrintNC80_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC80.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC80.setDescription("""\
WorkGroup DocuPrint NC80 Color Laser Printer model identifier (not a complete
product identifier).
""")
_XcmPidDocuPrintNC80V1_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNC80V1 = _XcmPidDocuPrintNC80V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 3, 3, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC80V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNC80V1.setDescription("""\
WorkGroup DocuPrint NC80 Color Laser Printer launch configuration version, and
complete product identifier.
""")
_XcmPidMidRangeColorPrinters_ObjectIdentity = ObjectIdentity
xcmPidMidRangeColorPrinters = _XcmPidMidRangeColorPrinters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidMidRangeColorPrinters.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidMidRangeColorPrinters.setDescription("""\
MidRange Color Printers product line identifier (not a complete product
identifier).
""")
_XcmPidDCColorSeries50_ObjectIdentity = ObjectIdentity
xcmPidDCColorSeries50 = _XcmPidDCColorSeries50_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 4, 2)
)
if mibBuilder.loadTexts:
    xcmPidDCColorSeries50.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCColorSeries50.setDescription("""\
Document Centre ColorSeries 50 mid-range color printer product type identifier
(not a complete product identifier).
""")
_XcmPidDCColorSeries50M1_ObjectIdentity = ObjectIdentity
xcmPidDCColorSeries50M1 = _XcmPidDCColorSeries50M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 4, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDCColorSeries50M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCColorSeries50M1.setDescription("""\
Document Centre ColorSeries 50 mid-range color printer launch configuration
model identifier (not a complete product identifier).
""")
_XcmPidDCColorSeries50M1V1_ObjectIdentity = ObjectIdentity
xcmPidDCColorSeries50M1V1 = _XcmPidDCColorSeries50M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 4, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDCColorSeries50M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDCColorSeries50M1V1.setDescription("""\
Document Centre ColorSeries 50 mid-range color printer launch configuration
version, and complete product identifier.
""")
_XcmPidDocuTechs_ObjectIdentity = ObjectIdentity
xcmPidDocuTechs = _XcmPidDocuTechs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidDocuTechs.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTechs.setDescription("""\
DocuTech product line identifier (not a complete product identifier).
""")
_XcmPidDocuTech6135_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6135 = _XcmPidDocuTech6135_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6135.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6135.setDescription("""\
DocuTech 6135 product type identifier (not a complete product identifier).
""")
_XcmPidDocuTech6135M1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6135M1 = _XcmPidDocuTech6135M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6135M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6135M1.setDescription("""\
DocuTech 6135 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDocuTech6135M1V1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6135M1V1 = _XcmPidDocuTech6135M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6135M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6135M1V1.setDescription("""\
DocuTech 6135 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6135M1V2_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6135M1V2 = _XcmPidDocuTech6135M1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 2, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6135M1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6135M1V2.setDescription("""\
DocuTech 6135 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6180_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6180 = _XcmPidDocuTech6180_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 3)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6180.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6180.setDescription("""\
DocuTech 6180 product type identifier (not a complete product identifier).
""")
_XcmPidDocuTech6180M1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6180M1 = _XcmPidDocuTech6180M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6180M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6180M1.setDescription("""\
DocuTech 6180 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDocuTech6180M1V1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6180M1V1 = _XcmPidDocuTech6180M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6180M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6180M1V1.setDescription("""\
DocuTech 6180 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6180M1V2_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6180M1V2 = _XcmPidDocuTech6180M1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 3, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6180M1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6180M1V2.setDescription("""\
DocuTech 6180 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6100_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6100 = _XcmPidDocuTech6100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 4)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6100.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6100.setDescription("""\
DocuTech 6100 product type identifier (not a complete product identifier).
""")
_XcmPidDocuTech6100M1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6100M1 = _XcmPidDocuTech6100M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6100M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6100M1.setDescription("""\
DocuTech 6100 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDocuTech6100M1V1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6100M1V1 = _XcmPidDocuTech6100M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 4, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6100M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6100M1V1.setDescription("""\
DocuTech 6100 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6100M1V2_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6100M1V2 = _XcmPidDocuTech6100M1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 4, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6100M1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6100M1V2.setDescription("""\
DocuTech 6100 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6115_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6115 = _XcmPidDocuTech6115_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 5)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6115.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6115.setDescription("""\
DocuTech 6115 product type identifier (not a complete product identifier).
""")
_XcmPidDocuTech6115M1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6115M1 = _XcmPidDocuTech6115M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6115M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6115M1.setDescription("""\
DocuTech 6115 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDocuTech6115M1V1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6115M1V1 = _XcmPidDocuTech6115M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 5, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6115M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6115M1V1.setDescription("""\
DocuTech 6115 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6115M1V2_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6115M1V2 = _XcmPidDocuTech6115M1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 5, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6115M1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6115M1V2.setDescription("""\
DocuTech 6115 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6155_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6155 = _XcmPidDocuTech6155_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 6)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6155.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6155.setDescription("""\
DocuTech 6155 product type identifier (not a complete product identifier).
""")
_XcmPidDocuTech6155M1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6155M1 = _XcmPidDocuTech6155M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6155M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6155M1.setDescription("""\
DocuTech 6155 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDocuTech6155M1V1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6155M1V1 = _XcmPidDocuTech6155M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 6, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6155M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6155M1V1.setDescription("""\
DocuTech 6155 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6155M1V2_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6155M1V2 = _XcmPidDocuTech6155M1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 6, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6155M1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6155M1V2.setDescription("""\
DocuTech 6155 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6075_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6075 = _XcmPidDocuTech6075_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 7)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6075.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6075.setDescription("""\
DocuTech 6075 product type identifier (not a complete product identifier).
""")
_XcmPidDocuTech6075M1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6075M1 = _XcmPidDocuTech6075M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 7, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6075M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6075M1.setDescription("""\
DocuTech 6075 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDocuTech6075M1V1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6075M1V1 = _XcmPidDocuTech6075M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 7, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6075M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6075M1V1.setDescription("""\
DocuTech 6075 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTech6090_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6090 = _XcmPidDocuTech6090_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 8)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6090.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6090.setDescription("""\
DocuTech 6090 product type identifier (not a complete product identifier).
""")
_XcmPidDocuTech6090M1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6090M1 = _XcmPidDocuTech6090M1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 8, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6090M1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6090M1.setDescription("""\
DocuTech 6090 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDocuTech6090M1V1_ObjectIdentity = ObjectIdentity
xcmPidDocuTech6090M1V1 = _XcmPidDocuTech6090M1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 8, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuTech6090M1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTech6090M1V1.setDescription("""\
DocuTech 6090 launch configuration version, and complete product identifier.
""")
_XcmPidDocuTechHiColorEPS_ObjectIdentity = ObjectIdentity
xcmPidDocuTechHiColorEPS = _XcmPidDocuTechHiColorEPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 19)
)
if mibBuilder.loadTexts:
    xcmPidDocuTechHiColorEPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuTechHiColorEPS.setDescription("""\
DocuTech Highlight Color EPS product type identifier (not a complete product
identifier).
""")
_XcmPidDocuSPDFE_ObjectIdentity = ObjectIdentity
xcmPidDocuSPDFE = _XcmPidDocuSPDFE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 20)
)
if mibBuilder.loadTexts:
    xcmPidDocuSPDFE.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuSPDFE.setDescription("""\
DocuSP-DFE B/W Copier / Printer product type identifier (not a complete product
identifier).
""")
_XcmPidDocuSPDFEColor_ObjectIdentity = ObjectIdentity
xcmPidDocuSPDFEColor = _XcmPidDocuSPDFEColor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 21)
)
if mibBuilder.loadTexts:
    xcmPidDocuSPDFEColor.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuSPDFEColor.setDescription("""\
DocuSP-DFE Color Copier / Printer product type identifier (not a complete
product identifier).
""")
_XcmPidDocuSPTEAK_ObjectIdentity = ObjectIdentity
xcmPidDocuSPTEAK = _XcmPidDocuSPTEAK_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 5, 22)
)
if mibBuilder.loadTexts:
    xcmPidDocuSPTEAK.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuSPTEAK.setDescription("""\
Xerox 41xx Copier / Printer with Free Flow Print Server product type identifier
(not a complete product identifier).
""")
_XcmPidDedPrintServers_ObjectIdentity = ObjectIdentity
xcmPidDedPrintServers = _XcmPidDedPrintServers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 8)
)
if mibBuilder.loadTexts:
    xcmPidDedPrintServers.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDedPrintServers.setDescription("""\
Dedicated print servers product line identifier (not a complete product
identifier).
""")
_XcmPidPhaserPrintServer_ObjectIdentity = ObjectIdentity
xcmPidPhaserPrintServer = _XcmPidPhaserPrintServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 8, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaserPrintServer.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaserPrintServer.setDescription("""\
Xerox Fast Port dedicated print server product type identifier (not a complete
product identifier).
""")
_XcmPidPhaserEX7750_ObjectIdentity = ObjectIdentity
xcmPidPhaserEX7750 = _XcmPidPhaserEX7750_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 8, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaserEX7750.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaserEX7750.setDescription("""\
Xerox Phaser Fiery model identifier (not a complete product identifier).
""")
_XcmPidPhaserEX7750GX_ObjectIdentity = ObjectIdentity
xcmPidPhaserEX7750GX = _XcmPidPhaserEX7750GX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 8, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaserEX7750GX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaserEX7750GX.setDescription("""\
Xerox Phaser EX7750 Controller with Phaser 7750GX Printer configuration.
""")
_XcmPidPhaserEX7750DXF_ObjectIdentity = ObjectIdentity
xcmPidPhaserEX7750DXF = _XcmPidPhaserEX7750DXF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 8, 2, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaserEX7750DXF.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaserEX7750DXF.setDescription("""\
Xerox Phaser EX7750 Controller with Phaser 7750DXF Printer configuration.
""")
_XcmPidDocuPrintNPS_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintNPS = _XcmPidDocuPrintNPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintNPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintNPS.setDescription("""\
DocuPrint NPS (Network Printing Systems) product line identifier (not a
complete product identifier).
""")
_XcmPidDP4050NPS_ObjectIdentity = ObjectIdentity
xcmPidDP4050NPS = _XcmPidDP4050NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4050NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4050NPS.setDescription("""\
DocuPrint NPS DP4050 product type identifier (not a complete product
identifier).
""")
_XcmPidDP4050NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP4050NPSM1 = _XcmPidDP4050NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4050NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4050NPSM1.setDescription("""\
DocuPrint NPS DP4050 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP4050NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP4050NPSM1V1 = _XcmPidDP4050NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4050NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4050NPSM1V1.setDescription("""\
DocuPrint NPS DP4050 launch configuration version, and complete product
identifier.
""")
_XcmPidDP4090NPS_ObjectIdentity = ObjectIdentity
xcmPidDP4090NPS = _XcmPidDP4090NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP4090NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4090NPS.setDescription("""\
DocuPrint NPS DP4090 product type identifier (not a complete product
identifier).
""")
_XcmPidDP4090NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP4090NPSM1 = _XcmPidDP4090NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4090NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4090NPSM1.setDescription("""\
DocuPrint NPS DP4090 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP4090NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP4090NPSM1V1 = _XcmPidDP4090NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4090NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4090NPSM1V1.setDescription("""\
DocuPrint NPS DP4090 launch configuration version, and complete product
identifier.
""")
_XcmPidDP4850NPS_ObjectIdentity = ObjectIdentity
xcmPidDP4850NPS = _XcmPidDP4850NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 3)
)
if mibBuilder.loadTexts:
    xcmPidDP4850NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4850NPS.setDescription("""\
DocuPrint NPS DP4850 product type identifier (not a complete product
identifier).
""")
_XcmPidDP4850NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP4850NPSM1 = _XcmPidDP4850NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4850NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4850NPSM1.setDescription("""\
DocuPrint NPS DP4850 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP4850NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP4850NPSM1V1 = _XcmPidDP4850NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4850NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4850NPSM1V1.setDescription("""\
DocuPrint NPS DP4850 launch configuration version, and complete product
identifier.
""")
_XcmPidDP4890NPS_ObjectIdentity = ObjectIdentity
xcmPidDP4890NPS = _XcmPidDP4890NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 4)
)
if mibBuilder.loadTexts:
    xcmPidDP4890NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4890NPS.setDescription("""\
DocuPrint NPS DP4890 product type identifier (not a complete product
identifier).
""")
_XcmPidDP4890NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP4890NPSM1 = _XcmPidDP4890NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4890NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4890NPSM1.setDescription("""\
DocuPrint NPS DP4890 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP4890NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP4890NPSM1V1 = _XcmPidDP4890NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 4, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4890NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4890NPSM1V1.setDescription("""\
DocuPrint NPS DP4890 launch configuration version, and complete product
identifier.
""")
_XcmPidDP4635NPS_ObjectIdentity = ObjectIdentity
xcmPidDP4635NPS = _XcmPidDP4635NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 5)
)
if mibBuilder.loadTexts:
    xcmPidDP4635NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4635NPS.setDescription("""\
DocuPrint NPS DP4635 product type identifier (not a complete product
identifier).
""")
_XcmPidDP4635NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP4635NPSM1 = _XcmPidDP4635NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4635NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4635NPSM1.setDescription("""\
DocuPrint NPS DP4635 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP4635NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP4635NPSM1V1 = _XcmPidDP4635NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 5, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4635NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4635NPSM1V1.setDescription("""\
DocuPrint NPS DP4635 launch configuration version, and complete product
identifier.
""")
_XcmPidDP4635NPSMicr_ObjectIdentity = ObjectIdentity
xcmPidDP4635NPSMicr = _XcmPidDP4635NPSMicr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 5, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP4635NPSMicr.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4635NPSMicr.setDescription("""\
DocuPrint NPS DP4635 Micr launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP4635NPSMicrV1_ObjectIdentity = ObjectIdentity
xcmPidDP4635NPSMicrV1 = _XcmPidDP4635NPSMicrV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 5, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP4635NPSMicrV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP4635NPSMicrV1.setDescription("""\
DocuPrint NPS DP4635 Micr launch configuration version, and complete product
identifier.
""")
_XcmPidDP180NPS_ObjectIdentity = ObjectIdentity
xcmPidDP180NPS = _XcmPidDP180NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 6)
)
if mibBuilder.loadTexts:
    xcmPidDP180NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180NPS.setDescription("""\
DocuPrint NPS DP180 product type identifier (not a complete product
identifier).
""")
_XcmPidDP180NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP180NPSM1 = _XcmPidDP180NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP180NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180NPSM1.setDescription("""\
DocuPrint NPS DP180 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP180NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP180NPSM1V1 = _XcmPidDP180NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 6, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP180NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180NPSM1V1.setDescription("""\
DocuPrint NPS DP180 launch configuration version, and complete product
identifier.
""")
_XcmPidDP180NPSMicr_ObjectIdentity = ObjectIdentity
xcmPidDP180NPSMicr = _XcmPidDP180NPSMicr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 6, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP180NPSMicr.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180NPSMicr.setDescription("""\
DocuPrint NPS DP180 Micr launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP180NPSMicrV1_ObjectIdentity = ObjectIdentity
xcmPidDP180NPSMicrV1 = _XcmPidDP180NPSMicrV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 6, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP180NPSMicrV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180NPSMicrV1.setDescription("""\
DocuPrint NPS DP180 Micr launch configuration version, and complete product
identifier.
""")
_XcmPidDP96NPS_ObjectIdentity = ObjectIdentity
xcmPidDP96NPS = _XcmPidDP96NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 7)
)
if mibBuilder.loadTexts:
    xcmPidDP96NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP96NPS.setDescription("""\
DocuPrint NPS DP96 product type identifier (not a complete product identifier).
""")
_XcmPidDP96NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP96NPSM1 = _XcmPidDP96NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 7, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP96NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP96NPSM1.setDescription("""\
DocuPrint NPS DP96 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP96NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP96NPSM1V1 = _XcmPidDP96NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 7, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP96NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP96NPSM1V1.setDescription("""\
DocuPrint NPS DP96 launch configuration version, and complete product
identifier.
""")
_XcmPidDP96NPSMicr_ObjectIdentity = ObjectIdentity
xcmPidDP96NPSMicr = _XcmPidDP96NPSMicr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 7, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP96NPSMicr.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP96NPSMicr.setDescription("""\
DocuPrint NPS DP96 Micr launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP96NPSMicrV1_ObjectIdentity = ObjectIdentity
xcmPidDP96NPSMicrV1 = _XcmPidDP96NPSMicrV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 7, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP96NPSMicrV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP96NPSMicrV1.setDescription("""\
DocuPrint NPS DP96 Micr launch configuration version, and complete product
identifier.
""")
_XcmPidDP92cNPS_ObjectIdentity = ObjectIdentity
xcmPidDP92cNPS = _XcmPidDP92cNPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 8)
)
if mibBuilder.loadTexts:
    xcmPidDP92cNPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP92cNPS.setDescription("""\
DocuPrint NPS DP92c product type identifier (not a complete product
identifier).
""")
_XcmPidDP92cNPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP92cNPSM1 = _XcmPidDP92cNPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 8, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP92cNPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP92cNPSM1.setDescription("""\
DocuPrint NPS DP92c launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP92cNPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP92cNPSM1V1 = _XcmPidDP92cNPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 8, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP92cNPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP92cNPSM1V1.setDescription("""\
DocuPrint NPS DP92c launch configuration version, and complete product
identifier.
""")
_XcmPidDP155NPS_ObjectIdentity = ObjectIdentity
xcmPidDP155NPS = _XcmPidDP155NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 9)
)
if mibBuilder.loadTexts:
    xcmPidDP155NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP155NPS.setDescription("""\
DocuPrint NPS DP155 product type identifier (not a complete product
identifier).
""")
_XcmPidDP155NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP155NPSM1 = _XcmPidDP155NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP155NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP155NPSM1.setDescription("""\
DocuPrint NPS DP155 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP155NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP155NPSM1V1 = _XcmPidDP155NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 9, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP155NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP155NPSM1V1.setDescription("""\
DocuPrint NPS DP155 launch configuration version, and complete product
identifier.
""")
_XcmPidDP155NPSMicr_ObjectIdentity = ObjectIdentity
xcmPidDP155NPSMicr = _XcmPidDP155NPSMicr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 9, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP155NPSMicr.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP155NPSMicr.setDescription("""\
DocuPrint NPS DP155 Micr launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP155NPSMicrV1_ObjectIdentity = ObjectIdentity
xcmPidDP155NPSMicrV1 = _XcmPidDP155NPSMicrV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 9, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP155NPSMicrV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP155NPSMicrV1.setDescription("""\
DocuPrint NPS DP155 Micr launch configuration version, and complete product
identifier.
""")
_XcmPidDP115NPS_ObjectIdentity = ObjectIdentity
xcmPidDP115NPS = _XcmPidDP115NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 17)
)
if mibBuilder.loadTexts:
    xcmPidDP115NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP115NPS.setDescription("""\
DocuPrint NPS DP115 product type identifier (not a complete product
identifier).
""")
_XcmPidDP115NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP115NPSM1 = _XcmPidDP115NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP115NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP115NPSM1.setDescription("""\
DocuPrint NPS DP115 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP115NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP115NPSM1V1 = _XcmPidDP115NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 17, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP115NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP115NPSM1V1.setDescription("""\
DocuPrint NPS DP115 launch configuration version, and complete product
identifier.
""")
_XcmPidDP115NPSMicr_ObjectIdentity = ObjectIdentity
xcmPidDP115NPSMicr = _XcmPidDP115NPSMicr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 17, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP115NPSMicr.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP115NPSMicr.setDescription("""\
DocuPrint NPS DP115 Micr launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP115NPSMicrV1_ObjectIdentity = ObjectIdentity
xcmPidDP115NPSMicrV1 = _XcmPidDP115NPSMicrV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 17, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP115NPSMicrV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP115NPSMicrV1.setDescription("""\
DocuPrint NPS DP115 Micr launch configuration version, and complete product
identifier.
""")
_XcmPidDP100NPS_ObjectIdentity = ObjectIdentity
xcmPidDP100NPS = _XcmPidDP100NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 18)
)
if mibBuilder.loadTexts:
    xcmPidDP100NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP100NPS.setDescription("""\
DocuPrint NPS DP100 product type identifier (not a complete product
identifier).
""")
_XcmPidDP100NPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP100NPSM1 = _XcmPidDP100NPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP100NPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP100NPSM1.setDescription("""\
DocuPrint NPS DP100 launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP100NPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP100NPSM1V1 = _XcmPidDP100NPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 18, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP100NPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP100NPSM1V1.setDescription("""\
DocuPrint NPS DP100 launch configuration version, and complete product
identifier.
""")
_XcmPidDP100NPSMicr_ObjectIdentity = ObjectIdentity
xcmPidDP100NPSMicr = _XcmPidDP100NPSMicr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 18, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP100NPSMicr.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP100NPSMicr.setDescription("""\
DocuPrint NPS DP100 Micr launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP100NPSMicrV1_ObjectIdentity = ObjectIdentity
xcmPidDP100NPSMicrV1 = _XcmPidDP100NPSMicrV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 18, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP100NPSMicrV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP100NPSMicrV1.setDescription("""\
DocuPrint NPS DP100 Micr launch configuration version, and complete product
identifier.
""")
_XcmPidDC2000FamilyNPS_ObjectIdentity = ObjectIdentity
xcmPidDC2000FamilyNPS = _XcmPidDC2000FamilyNPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 19)
)
if mibBuilder.loadTexts:
    xcmPidDC2000FamilyNPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC2000FamilyNPS.setDescription("""\
DocuColor 2000 NPS Family product line identifier (not a complete product
identifier).
""")
_XcmPidDocuColor2045NPS_ObjectIdentity = ObjectIdentity
xcmPidDocuColor2045NPS = _XcmPidDocuColor2045NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor2045NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor2045NPS.setDescription("""\
Xerox DocuColor 2045 NPS/IPS product identifier (not a complete product
identifier).
""")
_XcmPidDocuColor2045NPSV1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor2045NPSV1 = _XcmPidDocuColor2045NPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 19, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor2045NPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor2045NPSV1.setDescription("""\
Xerox DocuColor 2045 NPS/IPS launch configuration version, and complete product
identifier.
""")
_XcmPidDocuColor2060NPS_ObjectIdentity = ObjectIdentity
xcmPidDocuColor2060NPS = _XcmPidDocuColor2060NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 19, 2)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor2060NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor2060NPS.setDescription("""\
Xerox DocuColor 2060 NPS/IPS product type identifier (not a complete product
identifier).
""")
_XcmPidDocuColor2060NPSV1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor2060NPSV1 = _XcmPidDocuColor2060NPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 19, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor2060NPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor2060NPSV1.setDescription("""\
Xerox DocuColor 2060 NPS/IPS launch configuration version, and complete product
identifier.
""")
_XcmPidDocuColor5252NPS_ObjectIdentity = ObjectIdentity
xcmPidDocuColor5252NPS = _XcmPidDocuColor5252NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 19, 3)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor5252NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor5252NPS.setDescription("""\
Xerox DocuColor 5252 NPS/IPS product type identifier (not a complete product
identifier).
""")
_XcmPidDocuColor5252NPSV1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor5252NPSV1 = _XcmPidDocuColor5252NPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 19, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor5252NPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor5252NPSV1.setDescription("""\
Xerox DocuColor 5252 NPS/IPS launch configuration version, and complete product
identifier.
""")
_XcmPidDC6000FamilyNPS_ObjectIdentity = ObjectIdentity
xcmPidDC6000FamilyNPS = _XcmPidDC6000FamilyNPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 20)
)
if mibBuilder.loadTexts:
    xcmPidDC6000FamilyNPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDC6000FamilyNPS.setDescription("""\
DocuColor 6000 NPS Family product line identifier (not a complete product
identifier).
""")
_XcmPidDocuColor6060NPS_ObjectIdentity = ObjectIdentity
xcmPidDocuColor6060NPS = _XcmPidDocuColor6060NPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor6060NPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor6060NPS.setDescription("""\
Xerox DocuColor 6060 NPS/IPS product type identifier (not a complete product
identifier).
""")
_XcmPidDocuColor6060NPSV1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor6060NPSV1 = _XcmPidDocuColor6060NPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 9, 20, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor6060NPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor6060NPSV1.setDescription("""\
Xerox DocuColor 6060 NPS/IPS launch configuration version, and complete product
identifier.
""")
_XcmPidDocuColor2000Series_ObjectIdentity = ObjectIdentity
xcmPidDocuColor2000Series = _XcmPidDocuColor2000Series_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor2000Series.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor2000Series.setDescription("""\
DocuColor 2000 Family product line identifier (not a complete product
identifier).
""")
_XcmPidDocuColor3000series_ObjectIdentity = ObjectIdentity
xcmPidDocuColor3000series = _XcmPidDocuColor3000series_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor3000series.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor3000series.setDescription("""\
Xerox DocuColor 3000 Digital Press product type identifier (not a complete
product identifier).
""")
_XcmPidDocuColor240SPLASH_ObjectIdentity = ObjectIdentity
xcmPidDocuColor240SPLASH = _XcmPidDocuColor240SPLASH_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 8)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor240SPLASH.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor240SPLASH.setDescription("""\
Xerox DocuColor 240 with the Fiery Controller and DFE launch configuration
model identifier (not a complete product identifier).
""")
_XcmPidDocuColor240SPLASHv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor240SPLASHv1 = _XcmPidDocuColor240SPLASHv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 8, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor240SPLASHv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor240SPLASHv1.setDescription("""\
Xerox DocuColor 240 with the Fiery Controller and DFE configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor250SPLASH_ObjectIdentity = ObjectIdentity
xcmPidDocuColor250SPLASH = _XcmPidDocuColor250SPLASH_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 9)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor250SPLASH.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor250SPLASH.setDescription("""\
Xerox DocuColor 250 with the Fiery Controller and DFE launch configuration
model identifier (not a complete product identifier).
""")
_XcmPidDocuColor250SPLASHv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor250SPLASHv1 = _XcmPidDocuColor250SPLASHv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor250SPLASHv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor250SPLASHv1.setDescription("""\
Xerox DocuColor 250 with the Fiery Controller and DFE configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor242EFI_ObjectIdentity = ObjectIdentity
xcmPidDocuColor242EFI = _XcmPidDocuColor242EFI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 17)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor242EFI.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor242EFI.setDescription("""\
Xerox DocuColor 242 with the EFI Fiery Controller launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor242EFIv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor242EFIv1 = _XcmPidDocuColor242EFIv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor242EFIv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor242EFIv1.setDescription("""\
Xerox DocuColor 242 with the EFI Fiery Controller configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor242_ObjectIdentity = ObjectIdentity
xcmPidDocuColor242 = _XcmPidDocuColor242_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 18)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor242.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor242.setDescription("""\
Xerox DocuColor 242 with the Fiery Color Server launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor242v1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor242v1 = _XcmPidDocuColor242v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor242v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor242v1.setDescription("""\
Xerox DocuColor 242 with the Fiery Color Server configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor252EFI_ObjectIdentity = ObjectIdentity
xcmPidDocuColor252EFI = _XcmPidDocuColor252EFI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 19)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor252EFI.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor252EFI.setDescription("""\
Xerox DocuColor 252 with the EFI Fiery Controller launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor252EFIv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor252EFIv1 = _XcmPidDocuColor252EFIv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor252EFIv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor252EFIv1.setDescription("""\
Xerox DocuColor 252 with the EFI Fiery Controller configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor252_ObjectIdentity = ObjectIdentity
xcmPidDocuColor252 = _XcmPidDocuColor252_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 20)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor252.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor252.setDescription("""\
Xerox DocuColor 252 with the Fiery Color Server launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor252v1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor252v1 = _XcmPidDocuColor252v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor252v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor252v1.setDescription("""\
Xerox DocuColor 252 with the Fiery Color Server configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor260EFI_ObjectIdentity = ObjectIdentity
xcmPidDocuColor260EFI = _XcmPidDocuColor260EFI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 21)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor260EFI.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor260EFI.setDescription("""\
Xerox DocuColor 260 with the EFI Fiery Controller launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor260EFIv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor260EFIv1 = _XcmPidDocuColor260EFIv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 21, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor260EFIv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor260EFIv1.setDescription("""\
Xerox DocuColor 260 with the EFI Fiery Controller configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor260_ObjectIdentity = ObjectIdentity
xcmPidDocuColor260 = _XcmPidDocuColor260_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 22)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor260.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor260.setDescription("""\
Xerox DocuColor 260 with the Fiery Color Server launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor260v1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor260v1 = _XcmPidDocuColor260v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 22, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor260v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor260v1.setDescription("""\
Xerox DocuColor 260 with the Fiery Color Server configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor242C_ObjectIdentity = ObjectIdentity
xcmPidDocuColor242C = _XcmPidDocuColor242C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 23)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor242C.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor242C.setDescription("""\
Xerox DocuColor 242 with the Creo Spire Color Server launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor242Cv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor242Cv1 = _XcmPidDocuColor242Cv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 23, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor242Cv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor242Cv1.setDescription("""\
Xerox DocuColor 242 with the Creo Spire Color Server configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor242S_ObjectIdentity = ObjectIdentity
xcmPidDocuColor242S = _XcmPidDocuColor242S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 24)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor242S.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor242S.setDescription("""\
Xerox DocuColor 242 Splash launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDocuColor242Sv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor242Sv1 = _XcmPidDocuColor242Sv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 24, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor242Sv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor242Sv1.setDescription("""\
Xerox DocuColor 242 Splash configuration model and version, and complete
product identifier.
""")
_XcmPidDocuColor252C_ObjectIdentity = ObjectIdentity
xcmPidDocuColor252C = _XcmPidDocuColor252C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 25)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor252C.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor252C.setDescription("""\
Xerox DocuColor 252 with the Creo Spire Color Server launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor252Cv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor252Cv1 = _XcmPidDocuColor252Cv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 25, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor252Cv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor252Cv1.setDescription("""\
Xerox DocuColor 252 with the Creo Spire Color Server configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor252S_ObjectIdentity = ObjectIdentity
xcmPidDocuColor252S = _XcmPidDocuColor252S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 26)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor252S.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor252S.setDescription("""\
Xerox DocuColor 252 Splash launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDocuColor252Sv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor252Sv1 = _XcmPidDocuColor252Sv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 26, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor252Sv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor252Sv1.setDescription("""\
Xerox DocuColor 252 Splash configuration model and version, and complete
product identifier.
""")
_XcmPidDocuColor260C_ObjectIdentity = ObjectIdentity
xcmPidDocuColor260C = _XcmPidDocuColor260C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 27)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor260C.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor260C.setDescription("""\
Xerox DocuColor 260 with the Creo Spire Color Server launch configuration model
identifier (not a complete product identifier).
""")
_XcmPidDocuColor260Cv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor260Cv1 = _XcmPidDocuColor260Cv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 27, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor260Cv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor260Cv1.setDescription("""\
Xerox DocuColor 260 with the Creo Spire Color Server configuration model and
version, and complete product identifier.
""")
_XcmPidDocuColor260S_ObjectIdentity = ObjectIdentity
xcmPidDocuColor260S = _XcmPidDocuColor260S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 28)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor260S.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor260S.setDescription("""\
Xerox DocuColor 260 Splash launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDocuColor260Sv1_ObjectIdentity = ObjectIdentity
xcmPidDocuColor260Sv1 = _XcmPidDocuColor260Sv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 17, 7, 28, 1)
)
if mibBuilder.loadTexts:
    xcmPidDocuColor260Sv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuColor260Sv1.setDescription("""\
Xerox DocuColor 260 Splash configuration model and version, and complete
product identifier.
""")
_XcmPidDocuPrintEPS_ObjectIdentity = ObjectIdentity
xcmPidDocuPrintEPS = _XcmPidDocuPrintEPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18)
)
if mibBuilder.loadTexts:
    xcmPidDocuPrintEPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDocuPrintEPS.setDescription("""\
DocuPrint EPS product line identifier (not a complete product identifier).
""")
_XcmPidDP180EPS_ObjectIdentity = ObjectIdentity
xcmPidDP180EPS = _XcmPidDP180EPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP180EPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180EPS.setDescription("""\
DocuPrint DP180 EPS product type identifier (not a complete product
identifier).
""")
_XcmPidDP180EPSM1_ObjectIdentity = ObjectIdentity
xcmPidDP180EPSM1 = _XcmPidDP180EPSM1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP180EPSM1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180EPSM1.setDescription("""\
DocuPrint DP180 EPS launch configuration model identifier (not a complete
product identifier).
""")
_XcmPidDP180EPSM1V1_ObjectIdentity = ObjectIdentity
xcmPidDP180EPSM1V1 = _XcmPidDP180EPSM1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP180EPSM1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180EPSM1V1.setDescription("""\
DocuPrint DP180 EPS launch configuration version, and complete product
identifier.
""")
_XcmPidDP180EPSMicr_ObjectIdentity = ObjectIdentity
xcmPidDP180EPSMicr = _XcmPidDP180EPSMicr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP180EPSMicr.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180EPSMicr.setDescription("""\
DocuPrint DP180 Micr EPS launch model identifier (not a complete product
identifier).
""")
_XcmPidDP180EPSMicrV1_ObjectIdentity = ObjectIdentity
xcmPidDP180EPSMicrV1 = _XcmPidDP180EPSMicrV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 1, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP180EPSMicrV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP180EPSMicrV1.setDescription("""\
DocuPrint DP180 Micr EPS launch configuration version, and complete product
identifier.
""")
_XcmPidDP2000EPS_ObjectIdentity = ObjectIdentity
xcmPidDP2000EPS = _XcmPidDP2000EPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP2000EPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000EPS.setDescription("""\
DocuPrint 2000 Series EPS product type identifier (not a complete product
identifier).
""")
_XcmPidDP2000S100EPS_ObjectIdentity = ObjectIdentity
xcmPidDP2000S100EPS = _XcmPidDP2000S100EPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S100EPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S100EPS.setDescription("""\
DocuPrint 2000 Series 100 EPS launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S100EPSV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S100EPSV1 = _XcmPidDP2000S100EPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S100EPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S100EPSV1.setDescription("""\
DocuPrint 2000 Series 100 EPS launch configuration version and complete product
identifier.
""")
_XcmPidDP2000S115EPS_ObjectIdentity = ObjectIdentity
xcmPidDP2000S115EPS = _XcmPidDP2000S115EPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S115EPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S115EPS.setDescription("""\
DocuPrint 2000 Series 115 EPS launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S115EPSV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S115EPSV1 = _XcmPidDP2000S115EPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S115EPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S115EPSV1.setDescription("""\
DocuPrint 2000 Series 115 EPS launch configuration version and complete product
identifier.
""")
_XcmPidDP2000S135EPS_ObjectIdentity = ObjectIdentity
xcmPidDP2000S135EPS = _XcmPidDP2000S135EPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S135EPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S135EPS.setDescription("""\
DocuPrint 2000 Series 135 EPS launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S135EPSV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S135EPSV1 = _XcmPidDP2000S135EPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S135EPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S135EPSV1.setDescription("""\
DocuPrint 2000 Series 135 EPS launch configuration version and complete product
identifier.
""")
_XcmPidDP2000S155EPS_ObjectIdentity = ObjectIdentity
xcmPidDP2000S155EPS = _XcmPidDP2000S155EPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 4)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S155EPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S155EPS.setDescription("""\
DocuPrint 2000 Series 155 EPS launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S155EPSV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S155EPSV1 = _XcmPidDP2000S155EPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S155EPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S155EPSV1.setDescription("""\
DocuPrint 2000 Series 155 EPS launch configuration version and complete product
identifier.
""")
_XcmPidDP2000S180EPS_ObjectIdentity = ObjectIdentity
xcmPidDP2000S180EPS = _XcmPidDP2000S180EPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 5)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S180EPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S180EPS.setDescription("""\
DocuPrint 2000 Series 180 EPS launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S180EPSV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S180EPSV1 = _XcmPidDP2000S180EPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S180EPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S180EPSV1.setDescription("""\
DocuPrint 2000 Series 180 EPS launch configuration version and complete product
identifier.
""")
_XcmPidDP2000S6075_ObjectIdentity = ObjectIdentity
xcmPidDP2000S6075 = _XcmPidDP2000S6075_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 6)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S6075.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S6075.setDescription("""\
DocuPrint 6075 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDP2000S6075V1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S6075V1 = _XcmPidDP2000S6075V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S6075V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S6075V1.setDescription("""\
DocuPrint 6075 launch configuration version and complete product identifier.
""")
_XcmPidDP2000S6090_ObjectIdentity = ObjectIdentity
xcmPidDP2000S6090 = _XcmPidDP2000S6090_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 7)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S6090.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S6090.setDescription("""\
DocuPrint 6090 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidDP2000S6090V1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S6090V1 = _XcmPidDP2000S6090V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 7, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S6090V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S6090V1.setDescription("""\
DocuPrint 6090 launch configuration version and complete product identifier.
""")
_XcmPidDP2000S100EPSMX_ObjectIdentity = ObjectIdentity
xcmPidDP2000S100EPSMX = _XcmPidDP2000S100EPSMX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 8)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S100EPSMX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S100EPSMX.setDescription("""\
DocuPrint 2000 Series 100 EPS MX launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S100EPSMXV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S100EPSMXV1 = _XcmPidDP2000S100EPSMXV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 8, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S100EPSMXV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S100EPSMXV1.setDescription("""\
DocuPrint 2000 Series 100 EPS MX launch configuration version and complete
product identifier.
""")
_XcmPidDP2000S115EPSMX_ObjectIdentity = ObjectIdentity
xcmPidDP2000S115EPSMX = _XcmPidDP2000S115EPSMX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 9)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S115EPSMX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S115EPSMX.setDescription("""\
DocuPrint 2000 Series 115 EPS MX launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S115EPSMXV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S115EPSMXV1 = _XcmPidDP2000S115EPSMXV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S115EPSMXV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S115EPSMXV1.setDescription("""\
DocuPrint 2000 Series 115 EPS MX launch configuration version and complete
product identifier.
""")
_XcmPidDP2000S135EPSMX_ObjectIdentity = ObjectIdentity
xcmPidDP2000S135EPSMX = _XcmPidDP2000S135EPSMX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 17)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S135EPSMX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S135EPSMX.setDescription("""\
DocuPrint 2000 Series 135 EPS MX launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S135EPSMXV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S135EPSMXV1 = _XcmPidDP2000S135EPSMXV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S135EPSMXV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S135EPSMXV1.setDescription("""\
DocuPrint 2000 Series 135 EPS MX launch configuration version and complete
product identifier.
""")
_XcmPidDP2000S155EPSMX_ObjectIdentity = ObjectIdentity
xcmPidDP2000S155EPSMX = _XcmPidDP2000S155EPSMX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 18)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S155EPSMX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S155EPSMX.setDescription("""\
DocuPrint 2000 Series 155 EPS MX launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S155EPSMXV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S155EPSMXV1 = _XcmPidDP2000S155EPSMXV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S155EPSMXV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S155EPSMXV1.setDescription("""\
DocuPrint 2000 Series 155 EPS MX launch configuration version and complete
product identifier.
""")
_XcmPidDP2000S180EPSMX_ObjectIdentity = ObjectIdentity
xcmPidDP2000S180EPSMX = _XcmPidDP2000S180EPSMX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 19)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S180EPSMX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S180EPSMX.setDescription("""\
DocuPrint 2000 Series 180 EPS MX launch configuration model identifier (not a
complete product identifier).
""")
_XcmPidDP2000S180EPSMXV1_ObjectIdentity = ObjectIdentity
xcmPidDP2000S180EPSMXV1 = _XcmPidDP2000S180EPSMXV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 18, 2, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidDP2000S180EPSMXV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDP2000S180EPSMXV1.setDescription("""\
DocuPrint 2000 Series 180 EPS MX launch configuration version and complete
product identifier.
""")
_XcmPidXeroxPhaserPrinters_ObjectIdentity = ObjectIdentity
xcmPidXeroxPhaserPrinters = _XcmPidXeroxPhaserPrinters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19)
)
if mibBuilder.loadTexts:
    xcmPidXeroxPhaserPrinters.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidXeroxPhaserPrinters.setDescription("""\
Xerox Phaser Printers product line identifier (not a complete product
identifier).
""")
_XcmPidPhaser3yyyFamily_ObjectIdentity = ObjectIdentity
xcmPidPhaser3yyyFamily = _XcmPidPhaser3yyyFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3yyyFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3yyyFamily.setDescription("""\
Xerox Phaser 3yyy Family product line identifier (not a complete product
identifier).
""")
_XcmPidPhaser3450_ObjectIdentity = ObjectIdentity
xcmPidPhaser3450 = _XcmPidPhaser3450_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3450.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3450.setDescription("""\
Xerox Phaser 3450 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser3450D_ObjectIdentity = ObjectIdentity
xcmPidPhaser3450D = _XcmPidPhaser3450D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3450D.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3450D.setDescription("""\
Xerox Phaser 3450D Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser3450DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser3450DN = _XcmPidPhaser3450DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3450DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3450DN.setDescription("""\
Xerox Phaser 3450DN Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser3450B_ObjectIdentity = ObjectIdentity
xcmPidPhaser3450B = _XcmPidPhaser3450B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3450B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3450B.setDescription("""\
Xerox Phaser 3450B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser3500_ObjectIdentity = ObjectIdentity
xcmPidPhaser3500 = _XcmPidPhaser3500_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3500.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3500.setDescription("""\
Xerox Phaser 3500 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser3500b_ObjectIdentity = ObjectIdentity
xcmPidPhaser3500b = _XcmPidPhaser3500b_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3500b.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3500b.setDescription("""\
Xerox Phaser 3500b (Base) Laser Printer launch configuration model, version,
and complete product identifier.
""")
_XcmPidPhaser3500n_ObjectIdentity = ObjectIdentity
xcmPidPhaser3500n = _XcmPidPhaser3500n_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3500n.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3500n.setDescription("""\
Xerox Phaser 3500n (Base+Network Card) Laser Printer launch configuration
model, version, and complete product identifier.
""")
_XcmPidPhaser3150_ObjectIdentity = ObjectIdentity
xcmPidPhaser3150 = _XcmPidPhaser3150_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3150.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3150.setDescription("""\
Xerox Phaser 3150 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser3150b_ObjectIdentity = ObjectIdentity
xcmPidPhaser3150b = _XcmPidPhaser3150b_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3150b.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3150b.setDescription("""\
Xerox Phaser 3150b (Base) Laser Printer launch configuration model, version,
and complete product identifier.
""")
_XcmPidPhaser3150n_ObjectIdentity = ObjectIdentity
xcmPidPhaser3150n = _XcmPidPhaser3150n_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3150n.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3150n.setDescription("""\
Xerox Phaser 3150n (Base+Network Card) Laser Printer launch configuration
model, version, and complete product identifier.
""")
_XcmPidPhaser3428_ObjectIdentity = ObjectIdentity
xcmPidPhaser3428 = _XcmPidPhaser3428_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3428.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3428.setDescription("""\
Xerox Phaser 3428 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser3428v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3428v1 = _XcmPidPhaser3428v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3428v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3428v1.setDescription("""\
Xerox Phaser 3428 Laser Printer launch configuration model, version 1, and
complete product identifier.
""")
_XcmPidPhaser3124_ObjectIdentity = ObjectIdentity
xcmPidPhaser3124 = _XcmPidPhaser3124_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3124.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3124.setDescription("""\
Xerox Phaser 3124 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser3124v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3124v1 = _XcmPidPhaser3124v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3124v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3124v1.setDescription("""\
Xerox Phaser 3124 Laser Printer launch configuration model, version 1, and
complete product identifier.
""")
_XcmPidPhaser3125_ObjectIdentity = ObjectIdentity
xcmPidPhaser3125 = _XcmPidPhaser3125_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 6)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3125.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3125.setDescription("""\
Xerox Phaser 3125 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser3125v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3125v1 = _XcmPidPhaser3125v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3125v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3125v1.setDescription("""\
Xerox Phaser 3125 Laser Printer launch configuration model, version 1, and
complete product identifier.
""")
_XcmPidPhaser3250_ObjectIdentity = ObjectIdentity
xcmPidPhaser3250 = _XcmPidPhaser3250_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 8)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3250.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3250.setDescription("""\
Xerox Phaser 3250 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser3250v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3250v1 = _XcmPidPhaser3250v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 8, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3250v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3250v1.setDescription("""\
Xerox Phaser 3250 Printer launch configuration model, version 1, and complete
product identifier.
""")
_XcmPidPhaser3600_ObjectIdentity = ObjectIdentity
xcmPidPhaser3600 = _XcmPidPhaser3600_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 9)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3600.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3600.setDescription("""\
Xerox Phaser 3600 model identifier (not a complete product identifier).
""")
_XcmPidPhaser3600v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3600v1 = _XcmPidPhaser3600v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3600v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3600v1.setDescription("""\
Xerox Phaser 3600 launch configuration model, version 1, and complete product
identifier.
""")
_XcmPidPhaser3100MFP_ObjectIdentity = ObjectIdentity
xcmPidPhaser3100MFP = _XcmPidPhaser3100MFP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 17)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3100MFP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3100MFP.setDescription("""\
Xerox Phaser 3100 4-in-1 model identifier (not a complete product identifier).
""")
_XcmPidPhaser3100MFPv1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3100MFPv1 = _XcmPidPhaser3100MFPv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3100MFPv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3100MFPv1.setDescription("""\
Xerox Phaser 3100MFP launch configuration model, version 1, and complete
product identifier.
""")
_XcmPidPhaser3100_ObjectIdentity = ObjectIdentity
xcmPidPhaser3100 = _XcmPidPhaser3100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 18)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3100.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3100.setDescription("""\
Xerox Phaser 3100 3-in-1 model identifier (not a complete product identifier).
""")
_XcmPidPhaser3100v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3100v1 = _XcmPidPhaser3100v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3100v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3100v1.setDescription("""\
Xerox Phaser 3100 launch configuration model, version 1, and complete product
identifier.
""")
_XcmPidPhaser3435_ObjectIdentity = ObjectIdentity
xcmPidPhaser3435 = _XcmPidPhaser3435_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 19)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3435.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3435.setDescription("""\
Xerox Phaser 3435 35ppm A4 model identifier (not a complete product
identifier).
""")
_XcmPidPhaser3435v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3435v1 = _XcmPidPhaser3435v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3435v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3435v1.setDescription("""\
Xerox Phaser 3435 launch configuration model, version 1, and complete product
identifier.
""")
_XcmPidPhaser3300MFP_ObjectIdentity = ObjectIdentity
xcmPidPhaser3300MFP = _XcmPidPhaser3300MFP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 20)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3300MFP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3300MFP.setDescription("""\
Xerox Phaser 3300MFP model identifier (not a complete product identifier).
""")
_XcmPidPhaser3300MFPc1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3300MFPc1 = _XcmPidPhaser3300MFPc1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3300MFPc1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3300MFPc1.setDescription("""\
Xerox Phaser 3300MFP model and configuration identifier (not a complete product
identifier).
""")
_XcmPidPhaser3300MFPc1v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3300MFPc1v1 = _XcmPidPhaser3300MFPc1v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 20, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3300MFPc1v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3300MFPc1v1.setDescription("""\
Xerox Phaser 3300MFP launch model, configuration, version 1. A complete product
identifier.
""")
_XcmPidPhaser3010_ObjectIdentity = ObjectIdentity
xcmPidPhaser3010 = _XcmPidPhaser3010_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 26)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3010.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3010.setDescription("""\
Xerox Phaser 3010 model identifier (not a complete product identifier).
""")
_XcmPidPhaser3010C1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3010C1 = _XcmPidPhaser3010C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 26, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3010C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3010C1.setDescription("""\
Xerox Phaser 3010 model and configuration 1 identifier (not a complete product
identifier).
""")
_XcmPidPhaser3010C1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3010C1V1 = _XcmPidPhaser3010C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 26, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3010C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3010C1V1.setDescription("""\
Xerox Phaser 3010 launch model, configuration 1, version 1. A complete product
identifier.
""")
_XcmPidPhaser3040_ObjectIdentity = ObjectIdentity
xcmPidPhaser3040 = _XcmPidPhaser3040_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 28)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3040.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3040.setDescription("""\
Xerox Phaser 3040 model identifier (not a complete product identifier).
""")
_XcmPidPhaser3040C1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3040C1 = _XcmPidPhaser3040C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 28, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3040C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3040C1.setDescription("""\
Xerox Phaser 3040 model and configuration 1 identifier (not a complete product
identifier).
""")
_XcmPidPhaser3040C1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser3040C1V1 = _XcmPidPhaser3040C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 1, 28, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser3040C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser3040C1V1.setDescription("""\
Xerox Phaser 3040 launch model, configuration 1, version 1. A complete product
identifier.
""")
_XcmPidPhaser4yyyFamily_ObjectIdentity = ObjectIdentity
xcmPidPhaser4yyyFamily = _XcmPidPhaser4yyyFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4yyyFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4yyyFamily.setDescription("""\
Xerox Phaser 4yyy Family product line identifier (not a complete product
identifier).
""")
_XcmPidPhaser4400_ObjectIdentity = ObjectIdentity
xcmPidPhaser4400 = _XcmPidPhaser4400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4400.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4400.setDescription("""\
Xerox Phaser 4400 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser4400N_ObjectIdentity = ObjectIdentity
xcmPidPhaser4400N = _XcmPidPhaser4400N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4400N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4400N.setDescription("""\
Xerox Phaser 4400N Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4400DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser4400DT = _XcmPidPhaser4400DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4400DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4400DT.setDescription("""\
Xerox Phaser 4400DT Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4400DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser4400DX = _XcmPidPhaser4400DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4400DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4400DX.setDescription("""\
Xerox Phaser 4400DX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4400B_ObjectIdentity = ObjectIdentity
xcmPidPhaser4400B = _XcmPidPhaser4400B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4400B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4400B.setDescription("""\
Xerox Phaser 4400B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4500_ObjectIdentity = ObjectIdentity
xcmPidPhaser4500 = _XcmPidPhaser4500_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4500.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4500.setDescription("""\
Xerox Phaser 4500 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser4500N_ObjectIdentity = ObjectIdentity
xcmPidPhaser4500N = _XcmPidPhaser4500N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4500N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4500N.setDescription("""\
Xerox Phaser 4500N Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4500DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser4500DT = _XcmPidPhaser4500DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4500DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4500DT.setDescription("""\
Xerox Phaser 4500DT Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4500DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser4500DX = _XcmPidPhaser4500DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4500DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4500DX.setDescription("""\
Xerox Phaser 4500DX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4500B_ObjectIdentity = ObjectIdentity
xcmPidPhaser4500B = _XcmPidPhaser4500B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 2, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4500B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4500B.setDescription("""\
Xerox Phaser 4500B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4510_ObjectIdentity = ObjectIdentity
xcmPidPhaser4510 = _XcmPidPhaser4510_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4510.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4510.setDescription("""\
Xerox Phaser 4510 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser4510B_ObjectIdentity = ObjectIdentity
xcmPidPhaser4510B = _XcmPidPhaser4510B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4510B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4510B.setDescription("""\
Xerox Phaser 4510B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4510N_ObjectIdentity = ObjectIdentity
xcmPidPhaser4510N = _XcmPidPhaser4510N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4510N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4510N.setDescription("""\
Xerox Phaser 4510N Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4510DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser4510DT = _XcmPidPhaser4510DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 3, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4510DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4510DT.setDescription("""\
Xerox Phaser 4510DT Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser4510DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser4510DX = _XcmPidPhaser4510DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 2, 3, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser4510DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser4510DX.setDescription("""\
Xerox Phaser 4510DX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5yyyFamily_ObjectIdentity = ObjectIdentity
xcmPidPhaser5yyyFamily = _XcmPidPhaser5yyyFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5yyyFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5yyyFamily.setDescription("""\
Xerox Phaser 5yyy Family product line identifier (not a complete product
identifier).
""")
_XcmPidPhaser5500_ObjectIdentity = ObjectIdentity
xcmPidPhaser5500 = _XcmPidPhaser5500_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5500.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5500.setDescription("""\
Xerox Phaser 5500 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser5500B_ObjectIdentity = ObjectIdentity
xcmPidPhaser5500B = _XcmPidPhaser5500B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5500B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5500B.setDescription("""\
Xerox Phaser 5500B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5500N_ObjectIdentity = ObjectIdentity
xcmPidPhaser5500N = _XcmPidPhaser5500N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5500N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5500N.setDescription("""\
Xerox Phaser 5500N Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5500DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser5500DN = _XcmPidPhaser5500DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5500DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5500DN.setDescription("""\
Xerox Phaser 5500DN Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5500DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser5500DT = _XcmPidPhaser5500DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5500DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5500DT.setDescription("""\
Xerox Phaser 5500DT Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5500DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser5500DX = _XcmPidPhaser5500DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5500DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5500DX.setDescription("""\
Xerox Phaser 5500DX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5550_ObjectIdentity = ObjectIdentity
xcmPidPhaser5550 = _XcmPidPhaser5550_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5550.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5550.setDescription("""\
Xerox Phaser 5550 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser5550B_ObjectIdentity = ObjectIdentity
xcmPidPhaser5550B = _XcmPidPhaser5550B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5550B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5550B.setDescription("""\
Xerox Phaser 5550B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5550N_ObjectIdentity = ObjectIdentity
xcmPidPhaser5550N = _XcmPidPhaser5550N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5550N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5550N.setDescription("""\
Xerox Phaser 5550N Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5550DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser5550DN = _XcmPidPhaser5550DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5550DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5550DN.setDescription("""\
Xerox Phaser 5550DN Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5550DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser5550DT = _XcmPidPhaser5550DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 2, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5550DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5550DT.setDescription("""\
Xerox Phaser 5550DT Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser5335_ObjectIdentity = ObjectIdentity
xcmPidPhaser5335 = _XcmPidPhaser5335_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5335.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5335.setDescription("""\
Xerox Phaser 5335 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser5335v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser5335v1 = _XcmPidPhaser5335v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 3, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser5335v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser5335v1.setDescription("""\
Xerox Phaser 5335 Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6yyyFamily_ObjectIdentity = ObjectIdentity
xcmPidPhaser6yyyFamily = _XcmPidPhaser6yyyFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6yyyFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6yyyFamily.setDescription("""\
Xerox Phaser 6yyy Family product line identifier (not a complete product
identifier).
""")
_XcmPidPhaser6200_ObjectIdentity = ObjectIdentity
xcmPidPhaser6200 = _XcmPidPhaser6200_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6200.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6200.setDescription("""\
Xerox Phaser 6200 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6200B_ObjectIdentity = ObjectIdentity
xcmPidPhaser6200B = _XcmPidPhaser6200B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6200B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6200B.setDescription("""\
Xerox Phaser 6200B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6200N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6200N = _XcmPidPhaser6200N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6200N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6200N.setDescription("""\
Xerox Phaser 6200N Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6200DP_ObjectIdentity = ObjectIdentity
xcmPidPhaser6200DP = _XcmPidPhaser6200DP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6200DP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6200DP.setDescription("""\
Xerox Phaser 6200DP Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6200DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser6200DX = _XcmPidPhaser6200DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6200DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6200DX.setDescription("""\
Xerox Phaser 6200DX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6100_ObjectIdentity = ObjectIdentity
xcmPidPhaser6100 = _XcmPidPhaser6100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6100.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6100.setDescription("""\
Xerox Phaser 6100 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6100n_ObjectIdentity = ObjectIdentity
xcmPidPhaser6100n = _XcmPidPhaser6100n_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6100n.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6100n.setDescription("""\
Xerox Phaser 6100n Laser Printer, launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6250_ObjectIdentity = ObjectIdentity
xcmPidPhaser6250 = _XcmPidPhaser6250_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6250.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6250.setDescription("""\
Xerox Phaser 6250 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6250B_ObjectIdentity = ObjectIdentity
xcmPidPhaser6250B = _XcmPidPhaser6250B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6250B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6250B.setDescription("""\
Xerox Phaser 6250B Laser Printer, the Base configuration (No Network, 128MB
RAM) launch configuration model, version, and complete product identifier.
""")
_XcmPidPhaser6250N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6250N = _XcmPidPhaser6250N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6250N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6250N.setDescription("""\
Xerox Phaser 6250N Laser Printer adds: Built-in 10/100 Ethernet, 256MB RAM,
Pipeline performance launch configuration model, version, and complete product
identifier.
""")
_XcmPidPhaser6250DP_ObjectIdentity = ObjectIdentity
xcmPidPhaser6250DP = _XcmPidPhaser6250DP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 3, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6250DP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6250DP.setDescription("""\
Xerox Phaser 6250DP Laser Printer 6250N + Auto Duplex, Photomode launch
configuration model, version, and complete product identifier.
""")
_XcmPidPhaser6250DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser6250DX = _XcmPidPhaser6250DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 3, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6250DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6250DX.setDescription("""\
Xerox Phaser 6250DX Laser Printer 6250DT + Internal HD launch configuration
model, version, and complete product identifier.
""")
_XcmPidPhaser6250DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser6250DT = _XcmPidPhaser6250DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 3, 5)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6250DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6250DT.setDescription("""\
Xerox Phaser 6250DT Laser Printer 6250DP + Single Auxiliary Tray + 256 (512MB
total) launch configuration model, version, and complete product identifier.
""")
_XcmPidPhaser6300_ObjectIdentity = ObjectIdentity
xcmPidPhaser6300 = _XcmPidPhaser6300_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6300.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6300.setDescription("""\
Xerox Phaser 6300 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6300B_ObjectIdentity = ObjectIdentity
xcmPidPhaser6300B = _XcmPidPhaser6300B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6300B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6300B.setDescription("""\
Xerox Phaser 6300B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6300N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6300N = _XcmPidPhaser6300N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 4, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6300N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6300N.setDescription("""\
Xerox Phaser 6300N Laser Printer the Base configuration (Built-in 10/100
Ethernet, 128M 26ppm B&W/36ppm Color) launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6300DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser6300DN = _XcmPidPhaser6300DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 4, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6300DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6300DN.setDescription("""\
Xerox Phaser 6300DN Laser Printer 6300N + Auto Duplex launch configuration
model, version, and complete product identifier.
""")
_XcmPidPhaser6350_ObjectIdentity = ObjectIdentity
xcmPidPhaser6350 = _XcmPidPhaser6350_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 6)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6350.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6350.setDescription("""\
Xerox Phaser 6350 Series Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6350DP_ObjectIdentity = ObjectIdentity
xcmPidPhaser6350DP = _XcmPidPhaser6350DP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6350DP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6350DP.setDescription("""\
Xerox Phaser 6350DP Laser Printer 6300DN + Photomode + 128MB (256MB total) +
36ppm B&W launch configuration model, version, and complete product identifier.
""")
_XcmPidPhaser6350DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser6350DT = _XcmPidPhaser6350DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 6, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6350DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6350DT.setDescription("""\
Xerox Phaser 6350DT Laser Printer 6350DP + Single Auxiliary Tray + 256MB (512MB
total) launch configuration model, version, and complete product identifier.
""")
_XcmPidPhaser6350DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser6350DX = _XcmPidPhaser6350DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 6, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6350DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6350DX.setDescription("""\
Xerox Phaser 6350DX Laser Printer 6350DT + Internal HD launch configuration
model, version, and complete product identifier.
""")
_XcmPidPhaser6120_ObjectIdentity = ObjectIdentity
xcmPidPhaser6120 = _XcmPidPhaser6120_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 7)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6120.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6120.setDescription("""\
Xerox Phaser 6120 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6120b_ObjectIdentity = ObjectIdentity
xcmPidPhaser6120b = _XcmPidPhaser6120b_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 7, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6120b.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6120b.setDescription("""\
Xerox Phaser 6120b (Base) Laser Printer launch configuration model, version,
and complete product identifier.
""")
_XcmPidPhaser6120n_ObjectIdentity = ObjectIdentity
xcmPidPhaser6120n = _XcmPidPhaser6120n_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 7, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6120n.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6120n.setDescription("""\
Xerox Phaser 6120n (Base+Network Card) Laser Printer launch configuration
model, version, and complete product identifier.
""")
_XcmPidPhaser6360_ObjectIdentity = ObjectIdentity
xcmPidPhaser6360 = _XcmPidPhaser6360_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 8)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6360.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6360.setDescription("""\
Xerox Phaser 6360 Color Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6360N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6360N = _XcmPidPhaser6360N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 8, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6360N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6360N.setDescription("""\
Xerox Phaser 6360N Color Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6360DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser6360DN = _XcmPidPhaser6360DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 8, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6360DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6360DN.setDescription("""\
Xerox Phaser 6360DN Color Laser Printer launch configuration model, version,
and complete product identifier.
""")
_XcmPidPhaser6360DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser6360DT = _XcmPidPhaser6360DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 8, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6360DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6360DT.setDescription("""\
Xerox Phaser 6360DT Color Laser Printer launch configuration model, version,
and complete product identifier.
""")
_XcmPidPhaser6360DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser6360DX = _XcmPidPhaser6360DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 8, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6360DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6360DX.setDescription("""\
Xerox Phaser 6360DX Color Laser Printer launch configuration model, version,
and complete product identifier.
""")
_XcmPidPhaser6180_ObjectIdentity = ObjectIdentity
xcmPidPhaser6180 = _XcmPidPhaser6180_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 9)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6180.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6180.setDescription("""\
Xerox Phaser 6180 Color Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6180N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6180N = _XcmPidPhaser6180N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6180N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6180N.setDescription("""\
Xerox Phaser 6180N Color Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6180DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser6180DN = _XcmPidPhaser6180DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 9, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6180DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6180DN.setDescription("""\
Xerox Phaser 6180DN Color Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6110N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6110N = _XcmPidPhaser6110N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 17)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6110N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6110N.setDescription("""\
Xerox Phaser 6110N Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6110Nv1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6110Nv1 = _XcmPidPhaser6110Nv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6110Nv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6110Nv1.setDescription("""\
Xerox Phaser 6110N Version 1 Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6115_ObjectIdentity = ObjectIdentity
xcmPidPhaser6115 = _XcmPidPhaser6115_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 18)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6115.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6115.setDescription("""\
Xerox Phaser 6115 model identifier (not a complete product identifier).
""")
_XcmPidPhaser6115N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6115N = _XcmPidPhaser6115N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6115N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6115N.setDescription("""\
Xerox Phaser 6115 Base launch configuration model, version, and complete
product identifier.
""")
_XcmPidPhaser6115DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser6115DN = _XcmPidPhaser6115DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 18, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6115DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6115DN.setDescription("""\
Xerox Phaser 6115 Base + Duplex launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6110MFP3_ObjectIdentity = ObjectIdentity
xcmPidPhaser6110MFP3 = _XcmPidPhaser6110MFP3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 19)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6110MFP3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6110MFP3.setDescription("""\
Xerox Phaser 6110MFP3 Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6110MFP3v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6110MFP3v1 = _XcmPidPhaser6110MFP3v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6110MFP3v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6110MFP3v1.setDescription("""\
Xerox Phaser 6110MFP3 Version 1 Printer launch configuration model, version,
and complete product identifier.
""")
_XcmPidPhaser6110MFP4_ObjectIdentity = ObjectIdentity
xcmPidPhaser6110MFP4 = _XcmPidPhaser6110MFP4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 20)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6110MFP4.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6110MFP4.setDescription("""\
Xerox Phaser 6110MFP4 Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6110MFP4v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6110MFP4v1 = _XcmPidPhaser6110MFP4v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6110MFP4v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6110MFP4v1.setDescription("""\
Xerox Phaser 6110MFP4 Version 1 Printer launch configuration model, version,
and complete product identifier.
""")
_XcmPidPhaser6180MFP_ObjectIdentity = ObjectIdentity
xcmPidPhaser6180MFP = _XcmPidPhaser6180MFP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 21)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6180MFP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6180MFP.setDescription("""\
Xerox Phaser 6180 Printer model identifier (not a complete product identifier).
""")
_XcmPidPhaser6180MFPN_ObjectIdentity = ObjectIdentity
xcmPidPhaser6180MFPN = _XcmPidPhaser6180MFPN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 21, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6180MFPN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6180MFPN.setDescription("""\
Xerox Phaser 6180 Printer (Network + 128MB RAM) launch configuration model,
version, and complete product identifier.
""")
_XcmPidPhaser6180MFPDN_ObjectIdentity = ObjectIdentity
xcmPidPhaser6180MFPDN = _XcmPidPhaser6180MFPDN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 21, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6180MFPDN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6180MFPDN.setDescription("""\
Xerox Phaser 6180 Printer (Network + 128MB RAM + Duplex) launch configuration
model, version, and complete product identifier.
""")
_XcmPidPhaser6130_ObjectIdentity = ObjectIdentity
xcmPidPhaser6130 = _XcmPidPhaser6130_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 23)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6130.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6130.setDescription("""\
Xerox Phaser 6130 model identifier (not a complete product identifier).
""")
_XcmPidPhaser6130N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6130N = _XcmPidPhaser6130N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 23, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6130N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6130N.setDescription("""\
Xerox Phaser Color Printer 6130N launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6125_ObjectIdentity = ObjectIdentity
xcmPidPhaser6125 = _XcmPidPhaser6125_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 24)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6125.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6125.setDescription("""\
Xerox Phaser 6125 model identifier (not a complete product identifier).
""")
_XcmPidPhaser6125N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6125N = _XcmPidPhaser6125N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 24, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6125N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6125N.setDescription("""\
Xerox Phaser Color Printer 6125N launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser6280_ObjectIdentity = ObjectIdentity
xcmPidPhaser6280 = _XcmPidPhaser6280_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 25)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6280.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6280.setDescription("""\
Xerox Phaser 6280 Color Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser6280N_ObjectIdentity = ObjectIdentity
xcmPidPhaser6280N = _XcmPidPhaser6280N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 25, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6280N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6280N.setDescription("""\
Xerox Phaser 6280N Color Printer model and configuration identifier (not a
complete product identifier).
""")
_XcmPidPhaser6280Nv1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6280Nv1 = _XcmPidPhaser6280Nv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 25, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6280Nv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6280Nv1.setDescription("""\
Xerox Phaser 6280N Color Printer launch model, configuration, version 1. A
complete product identifier.
""")
_XcmPidPhaser6280DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser6280DN = _XcmPidPhaser6280DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 25, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6280DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6280DN.setDescription("""\
Xerox Phaser 6280DN Color Printer model and configuration identifier (not a
complete product identifier).
""")
_XcmPidPhaser6280DNv1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6280DNv1 = _XcmPidPhaser6280DNv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 25, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6280DNv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6280DNv1.setDescription("""\
Xerox Phaser 6280DN Color Printer launch model, configuration, version 1. A
complete product identifier.
""")
_XcmPidPhaser6280DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser6280DT = _XcmPidPhaser6280DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 25, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6280DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6280DT.setDescription("""\
Xerox Phaser 6280DT Color Printer model and configuration identifier (not a
complete product identifier).
""")
_XcmPidPhaser6280DTv1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6280DTv1 = _XcmPidPhaser6280DTv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 25, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6280DTv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6280DTv1.setDescription("""\
Xerox Phaser 6280DT Color Printer launch model, configuration, version 1. A
complete product identifier.
""")
_XcmPidPhaser6700_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700 = _XcmPidPhaser6700_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700.setDescription("""\
Xerox Phaser 6700 model identifier (not a complete product identifier).
""")
_XcmPidPhaser6700C1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700C1 = _XcmPidPhaser6700C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700C1.setDescription("""\
Xerox Phaser 6700 model and configuration 1 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6700C1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700C1V1 = _XcmPidPhaser6700C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700C1V1.setDescription("""\
Xerox Phaser 6700 launch model, configuration 1, version 1. A complete product
identifier.
""")
_XcmPidPhaser6700C2_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700C2 = _XcmPidPhaser6700C2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700C2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700C2.setDescription("""\
Xerox Phaser 6700 model and configuration 2 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6700C2V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700C2V1 = _XcmPidPhaser6700C2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700C2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700C2V1.setDescription("""\
Xerox Phaser 6700 launch model, configuration 2, version 1. A complete product
identifier.
""")
_XcmPidPhaser6700C3_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700C3 = _XcmPidPhaser6700C3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700C3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700C3.setDescription("""\
Xerox Phaser 6700 model and configuration 3 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6700C3V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700C3V1 = _XcmPidPhaser6700C3V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700C3V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700C3V1.setDescription("""\
Xerox Phaser 6700 launch model, configuration 3, version 1. A complete product
identifier.
""")
_XcmPidPhaser6700C4_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700C4 = _XcmPidPhaser6700C4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700C4.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700C4.setDescription("""\
Xerox Phaser 6700 model and configuration 4 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6700C4V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6700C4V1 = _XcmPidPhaser6700C4V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 30, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6700C4V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6700C4V1.setDescription("""\
Xerox Phaser 6700 launch model, configuration 4, version 1. A complete product
identifier.
""")
_XcmPidWorkCentre6015B_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6015B = _XcmPidWorkCentre6015B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 32)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015B.setDescription("""\
Xerox WorkCentre 6015B model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre6015BC1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6015BC1 = _XcmPidWorkCentre6015BC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 32, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015BC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015BC1.setDescription("""\
Xerox WorkCentre 6015B model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre6015BC1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6015BC1V1 = _XcmPidWorkCentre6015BC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 32, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015BC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015BC1V1.setDescription("""\
Xerox WorkCentre 6015B launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidPhaser6500_ObjectIdentity = ObjectIdentity
xcmPidPhaser6500 = _XcmPidPhaser6500_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 33)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6500.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6500.setDescription("""\
Xerox Phaser 6500 model identifier (not a complete product identifier).
""")
_XcmPidPhaser6500C1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6500C1 = _XcmPidPhaser6500C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 33, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6500C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6500C1.setDescription("""\
Xerox Phaser 6500 model and configuration 1 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6500C1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6500C1V1 = _XcmPidPhaser6500C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 33, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6500C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6500C1V1.setDescription("""\
Xerox Phaser 6500 launch model, configuration 1, version 1. A complete product
identifier.
""")
_XcmPidPhaser6500C2_ObjectIdentity = ObjectIdentity
xcmPidPhaser6500C2 = _XcmPidPhaser6500C2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 33, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6500C2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6500C2.setDescription("""\
Xerox Phaser 6500 model and configuration 2 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6500C2V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6500C2V1 = _XcmPidPhaser6500C2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 33, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6500C2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6500C2V1.setDescription("""\
Xerox Phaser 6500 launch model, configuration 2, version 1. A complete product
identifier.
""")
_XcmPidWorkCentre6505_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6505 = _XcmPidWorkCentre6505_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 34)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505.setDescription("""\
Xerox WorkCentre 6505 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre6505C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6505C1 = _XcmPidWorkCentre6505C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 34, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505C1.setDescription("""\
Xerox WorkCentre 6505 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre6505C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6505C1V1 = _XcmPidWorkCentre6505C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 34, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505C1V1.setDescription("""\
Xerox WorkCentre 6505 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre6505C2_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6505C2 = _XcmPidWorkCentre6505C2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 34, 2)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505C2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505C2.setDescription("""\
Xerox WorkCentre 6505 model and configuration 2 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre6505C2V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6505C2V1 = _XcmPidWorkCentre6505C2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 34, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505C2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6505C2V1.setDescription("""\
Xerox WorkCentre 6505 launch model, configuration 2, version 1. A complete
product identifier.
""")
_XcmPidPhaser6000_ObjectIdentity = ObjectIdentity
xcmPidPhaser6000 = _XcmPidPhaser6000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 35)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6000.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6000.setDescription("""\
Xerox Phaser 6000 model identifier (not a complete product identifier).
""")
_XcmPidPhaser6000C1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6000C1 = _XcmPidPhaser6000C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 35, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6000C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6000C1.setDescription("""\
Xerox Phaser 6000 model and configuration 1 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6000C1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6000C1V1 = _XcmPidPhaser6000C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 35, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6000C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6000C1V1.setDescription("""\
Xerox Phaser 6000 launch model, configuration 1, version 1. A complete product
identifier.
""")
_XcmPidWorkCentre6015_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6015 = _XcmPidWorkCentre6015_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 36)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015.setDescription("""\
Xerox WorkCentre 6015 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre6015C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6015C1 = _XcmPidWorkCentre6015C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 36, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015C1.setDescription("""\
Xerox WorkCentre 6015 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre6015C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6015C1V1 = _XcmPidWorkCentre6015C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 36, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015C1V1.setDescription("""\
Xerox WorkCentre 6015 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre6015C2_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6015C2 = _XcmPidWorkCentre6015C2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 36, 2)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015C2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015C2.setDescription("""\
Xerox WorkCentre 6015 model and configuration 2 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre6015C2V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6015C2V1 = _XcmPidWorkCentre6015C2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 36, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015C2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6015C2V1.setDescription("""\
Xerox WorkCentre 6015 launch model, configuration 2, version 1. A complete
product identifier.
""")
_XcmPidPhaser6600_ObjectIdentity = ObjectIdentity
xcmPidPhaser6600 = _XcmPidPhaser6600_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 37)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6600.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6600.setDescription("""\
Xerox Phaser 6600 model identifier (not a complete product identifier).
""")
_XcmPidPhaser6600NC1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6600NC1 = _XcmPidPhaser6600NC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 37, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6600NC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6600NC1.setDescription("""\
Xerox Phaser 6600 model and configuration 1 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6600NC1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6600NC1V1 = _XcmPidPhaser6600NC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 37, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6600NC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6600NC1V1.setDescription("""\
Xerox Phaser 6600 launch model, configuration 1, version 1. A complete product
identifier.
""")
_XcmPidPhaser6600DNC2_ObjectIdentity = ObjectIdentity
xcmPidPhaser6600DNC2 = _XcmPidPhaser6600DNC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 37, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6600DNC2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6600DNC2.setDescription("""\
Xerox Phaser 6600 model and configuration 2 identifier (not a complete product
identifier).
""")
_XcmPidPhaser6600DNC2V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser6600DNC2V1 = _XcmPidPhaser6600DNC2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 4, 37, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser6600DNC2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser6600DNC2V1.setDescription("""\
Xerox Phaser 6600 launch model, configuration 2, version 1. A complete product
identifier.
""")
_XcmPidPhaser7yyyFamily_ObjectIdentity = ObjectIdentity
xcmPidPhaser7yyyFamily = _XcmPidPhaser7yyyFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7yyyFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7yyyFamily.setDescription("""\
Xerox Phaser 7yyy Family product line identifier (not a complete product
identifier).
""")
_XcmPidPhaser7300_ObjectIdentity = ObjectIdentity
xcmPidPhaser7300 = _XcmPidPhaser7300_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7300.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7300.setDescription("""\
Xerox Phaser 7300 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser7300DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser7300DN = _XcmPidPhaser7300DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7300DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7300DN.setDescription("""\
Xerox Phaser 7300DN Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7300N_ObjectIdentity = ObjectIdentity
xcmPidPhaser7300N = _XcmPidPhaser7300N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7300N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7300N.setDescription("""\
Xerox Phaser 7300N Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7300DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser7300DT = _XcmPidPhaser7300DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7300DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7300DT.setDescription("""\
Xerox Phaser 7300DT Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7300DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser7300DX = _XcmPidPhaser7300DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7300DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7300DX.setDescription("""\
Xerox Phaser 7300DX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7300B_ObjectIdentity = ObjectIdentity
xcmPidPhaser7300B = _XcmPidPhaser7300B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7300B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7300B.setDescription("""\
Xerox Phaser 7300B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7400_ObjectIdentity = ObjectIdentity
xcmPidPhaser7400 = _XcmPidPhaser7400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7400.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7400.setDescription("""\
Xerox Phaser 7400 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser7400B_ObjectIdentity = ObjectIdentity
xcmPidPhaser7400B = _XcmPidPhaser7400B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7400B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7400B.setDescription("""\
Xerox Phaser 7400B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7400N_ObjectIdentity = ObjectIdentity
xcmPidPhaser7400N = _XcmPidPhaser7400N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7400N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7400N.setDescription("""\
Xerox Phaser 7400N Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7400DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser7400DN = _XcmPidPhaser7400DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7400DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7400DN.setDescription("""\
Xerox Phaser 7400DN Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7400DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser7400DT = _XcmPidPhaser7400DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 2, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7400DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7400DT.setDescription("""\
Xerox Phaser 7400DT Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7400DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser7400DX = _XcmPidPhaser7400DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 2, 5)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7400DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7400DX.setDescription("""\
Xerox Phaser 7400DX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7400DXF_ObjectIdentity = ObjectIdentity
xcmPidPhaser7400DXF = _XcmPidPhaser7400DXF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 2, 6)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7400DXF.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7400DXF.setDescription("""\
Xerox Phaser 7400DXF Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7750_ObjectIdentity = ObjectIdentity
xcmPidPhaser7750 = _XcmPidPhaser7750_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7750.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7750.setDescription("""\
Xerox Phaser 7750 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser7750B_ObjectIdentity = ObjectIdentity
xcmPidPhaser7750B = _XcmPidPhaser7750B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7750B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7750B.setDescription("""\
Xerox Phaser 7750B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7750DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser7750DN = _XcmPidPhaser7750DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7750DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7750DN.setDescription("""\
Xerox Phaser 7750DN Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7750GX_ObjectIdentity = ObjectIdentity
xcmPidPhaser7750GX = _XcmPidPhaser7750GX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 3, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7750GX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7750GX.setDescription("""\
Xerox Phaser 7750GX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7750DXF_ObjectIdentity = ObjectIdentity
xcmPidPhaser7750DXF = _XcmPidPhaser7750DXF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 3, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7750DXF.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7750DXF.setDescription("""\
Xerox Phaser 7750DXF Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7760_ObjectIdentity = ObjectIdentity
xcmPidPhaser7760 = _XcmPidPhaser7760_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7760.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7760.setDescription("""\
Xerox Phaser 7760 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser7760B_ObjectIdentity = ObjectIdentity
xcmPidPhaser7760B = _XcmPidPhaser7760B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7760B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7760B.setDescription("""\
Xerox Phaser 7760B Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7760DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser7760DN = _XcmPidPhaser7760DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 4, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7760DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7760DN.setDescription("""\
Xerox Phaser 7760DN Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7760GX_ObjectIdentity = ObjectIdentity
xcmPidPhaser7760GX = _XcmPidPhaser7760GX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 4, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7760GX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7760GX.setDescription("""\
Xerox Phaser 7760GX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7760DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser7760DX = _XcmPidPhaser7760DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 4, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7760DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7760DX.setDescription("""\
Xerox Phaser 7760DX Laser Printer launch configuration model, version, and
complete product identifier.
""")
_XcmPidPhaser7800_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800 = _XcmPidPhaser7800_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800.setDescription("""\
Xerox Phaser 7800 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser7800NC1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800NC1 = _XcmPidPhaser7800NC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800NC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800NC1.setDescription("""\
Xerox Phaser 7800N Laser Printer model and configuration identifier (not a
complete product identifier).
""")
_XcmPidPhaser7800NC1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800NC1V1 = _XcmPidPhaser7800NC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800NC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800NC1V1.setDescription("""\
Xerox Phaser 7800N Laser Printer launch model, configuration, version 1. A
complete product identifier.
""")
_XcmPidPhaser7800DNC1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800DNC1 = _XcmPidPhaser7800DNC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800DNC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800DNC1.setDescription("""\
Xerox Phaser 7800DN Laser Printer model and configuration identifier (not a
complete product identifier).
""")
_XcmPidPhaser7800DNC1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800DNC1V1 = _XcmPidPhaser7800DNC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800DNC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800DNC1V1.setDescription("""\
Xerox Phaser 7800DN Laser Printer launch model, configuration, version 1. A
complete product identifier.
""")
_XcmPidPhaser7800GXC1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800GXC1 = _XcmPidPhaser7800GXC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800GXC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800GXC1.setDescription("""\
Xerox Phaser 7800GX Laser Printer model and configuration identifier (not a
complete product identifier).
""")
_XcmPidPhaser7800GXC1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800GXC1V1 = _XcmPidPhaser7800GXC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800GXC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800GXC1V1.setDescription("""\
Xerox Phaser 7800GX Laser Printer launch model, configuration, version 1. A
complete product identifier.
""")
_XcmPidPhaser7800DXC1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800DXC1 = _XcmPidPhaser7800DXC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800DXC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800DXC1.setDescription("""\
Xerox Phaser 7800DX Laser Printer model and configuration identifier (not a
complete product identifier).
""")
_XcmPidPhaser7800DXC1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7800DXC1V1 = _XcmPidPhaser7800DXC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 6, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7800DXC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7800DXC1V1.setDescription("""\
Xerox Phaser 7800DX Laser Printer launch model, configuration, version 1. A
complete product identifier.
""")
_XcmPidPhaser7100_ObjectIdentity = ObjectIdentity
xcmPidPhaser7100 = _XcmPidPhaser7100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 7)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7100.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7100.setDescription("""\
Xerox Phaser 7100 Printer model identifier (not a complete product identifier).
""")
_XcmPidPhaser7100NC1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7100NC1 = _XcmPidPhaser7100NC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 7, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7100NC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7100NC1.setDescription("""\
Xerox Phaser 7100N Printer model and configuration identifier (not a complete
product identifier).
""")
_XcmPidPhaser7100NC1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7100NC1V1 = _XcmPidPhaser7100NC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 7, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7100NC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7100NC1V1.setDescription("""\
Xerox Phaser 70xxN Printer launch model, configuration, version 1. A complete
product identifier.
""")
_XcmPidPhaser7100DNC1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7100DNC1 = _XcmPidPhaser7100DNC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 7, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7100DNC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7100DNC1.setDescription("""\
Xerox Phaser 70xxDN Printer model and configuration identifier (not a complete
product identifier).
""")
_XcmPidPhaser7100DNC1V1_ObjectIdentity = ObjectIdentity
xcmPidPhaser7100DNC1V1 = _XcmPidPhaser7100DNC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 5, 7, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser7100DNC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser7100DNC1V1.setDescription("""\
Xerox Phaser 7100DN Printer launch model, configuration, version 1. A complete
product identifier.
""")
_XcmPidPhaser8yyyFamily_ObjectIdentity = ObjectIdentity
xcmPidPhaser8yyyFamily = _XcmPidPhaser8yyyFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8yyyFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8yyyFamily.setDescription("""\
Xerox Phaser 8yyy Family product line identifier (not a complete product
identifier).
""")
_XcmPidPhaser8400_ObjectIdentity = ObjectIdentity
xcmPidPhaser8400 = _XcmPidPhaser8400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8400.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8400.setDescription("""\
Xerox Phaser 8400 Laser Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser8400B_ObjectIdentity = ObjectIdentity
xcmPidPhaser8400B = _XcmPidPhaser8400B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8400B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8400B.setDescription("""\
Xerox Phaser 8400B Laser Printer launch configuration model, and complete
product identifier. The 8400B is not network connected so this SNMP id is not
used.
""")
_XcmPidPhaser8400N_ObjectIdentity = ObjectIdentity
xcmPidPhaser8400N = _XcmPidPhaser8400N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8400N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8400N.setDescription("""\
Xerox Phaser 8400N Laser Printer launch configuration model, and complete
product identifier.
""")
_XcmPidPhaser8400DP_ObjectIdentity = ObjectIdentity
xcmPidPhaser8400DP = _XcmPidPhaser8400DP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8400DP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8400DP.setDescription("""\
Xerox Phaser 8400DP Laser Printer launch configuration model, and complete
product identifier.
""")
_XcmPidPhaser8400DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser8400DX = _XcmPidPhaser8400DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8400DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8400DX.setDescription("""\
Xerox Phaser 8400DX Laser Printer launch configuration model, and complete
product identifier.
""")
_XcmPidPhaser8400BD_ObjectIdentity = ObjectIdentity
xcmPidPhaser8400BD = _XcmPidPhaser8400BD_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8400BD.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8400BD.setDescription("""\
Xerox Phaser 8400BD Laser Printer launch configuration model, This is not
network connected so the SNMP id is not used.
""")
_XcmPidPhaser8560_ObjectIdentity = ObjectIdentity
xcmPidPhaser8560 = _XcmPidPhaser8560_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 7)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8560.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8560.setDescription("""\
Xerox Phaser 8560 launch configuration model identifier (not a complete product
identifier).
""")
_XcmPidPhaser8560v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser8560v1 = _XcmPidPhaser8560v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 7, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8560v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8560v1.setDescription("""\
Xerox Phaser 8560 Copy/Print/Scan/Fax, 30/30ppm complete product identifier.
""")
_XcmPidPhaser8560p_ObjectIdentity = ObjectIdentity
xcmPidPhaser8560p = _XcmPidPhaser8560p_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 9)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8560p.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8560p.setDescription("""\
Xerox Phaser 8560 Color Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser8560N_ObjectIdentity = ObjectIdentity
xcmPidPhaser8560N = _XcmPidPhaser8560N_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8560N.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8560N.setDescription("""\
Xerox Phaser 8560N Color Printer launch configuration model, and complete
product identifier.
""")
_XcmPidPhaser8560DN_ObjectIdentity = ObjectIdentity
xcmPidPhaser8560DN = _XcmPidPhaser8560DN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 9, 2)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8560DN.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8560DN.setDescription("""\
Xerox Phaser 8560DN Color Printer launch configuration model, and complete
product identifier.
""")
_XcmPidPhaser8560DT_ObjectIdentity = ObjectIdentity
xcmPidPhaser8560DT = _XcmPidPhaser8560DT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 9, 3)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8560DT.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8560DT.setDescription("""\
Xerox Phaser 8560DT Color Printer launch configuration model, and complete
product identifier.
""")
_XcmPidPhaser8560DX_ObjectIdentity = ObjectIdentity
xcmPidPhaser8560DX = _XcmPidPhaser8560DX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 9, 4)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8560DX.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8560DX.setDescription("""\
Xerox Phaser 8560DX Color Printer launch configuration model, and complete
product identifier.
""")
_XcmPidPhaser8560PP_ObjectIdentity = ObjectIdentity
xcmPidPhaser8560PP = _XcmPidPhaser8560PP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 9, 6)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8560PP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8560PP.setDescription("""\
Xerox Phaser 8560PP Printer launch configuration model, and complete product
identifier.
""")
_XcmPidPhaser8860_ObjectIdentity = ObjectIdentity
xcmPidPhaser8860 = _XcmPidPhaser8860_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 17)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8860.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8860.setDescription("""\
Xerox Phaser 8860 Color Printer model identifier (not a complete product
identifier).
""")
_XcmPidPhaser8860v1_ObjectIdentity = ObjectIdentity
xcmPidPhaser8860v1 = _XcmPidPhaser8860v1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8860v1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8860v1.setDescription("""\
Xerox Phaser 8860N Color Printer launch configuration model, and complete
product identifier.
""")
_XcmPidPhaser8860MFP_ObjectIdentity = ObjectIdentity
xcmPidPhaser8860MFP = _XcmPidPhaser8860MFP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 18)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8860MFP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8860MFP.setDescription("""\
Xerox Phaser 8860MFP model identifier (not a complete product identifier).
""")
_XcmPidPhaser8860MFPv1_ObjectIdentity = ObjectIdentity
xcmPidPhaser8860MFPv1 = _XcmPidPhaser8860MFPv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidPhaser8860MFPv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser8860MFPv1.setDescription("""\
Xerox Phaser 8860MFP MFD launch configuration model, and complete product
identifier.
""")
_XcmPidP3200MFP_ObjectIdentity = ObjectIdentity
xcmPidP3200MFP = _XcmPidP3200MFP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 19)
)
if mibBuilder.loadTexts:
    xcmPidP3200MFP.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidP3200MFP.setDescription("""\
Xerox Phaser 3200 MFP system identifier (not a complete product identifier).
""")
_XcmPidP3200MFPv1_ObjectIdentity = ObjectIdentity
xcmPidP3200MFPv1 = _XcmPidP3200MFPv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 6, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidP3200MFPv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidP3200MFPv1.setDescription("""\
Xerox Phaser 3200 MFP system identifier launch configuration version #1, and
complete product identifier.
""")
_XcmPidPhaser9yyyFamily_ObjectIdentity = ObjectIdentity
xcmPidPhaser9yyyFamily = _XcmPidPhaser9yyyFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 19, 9)
)
if mibBuilder.loadTexts:
    xcmPidPhaser9yyyFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidPhaser9yyyFamily.setDescription("""\
Xerox Phaser 9yyy Family product line identifier (not a complete product
identifier).
""")
_XcmPidWorkCentreMFSystems_ObjectIdentity = ObjectIdentity
xcmPidWorkCentreMFSystems = _XcmPidWorkCentreMFSystems_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentreMFSystems.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentreMFSystems.setDescription("""\
WorkCentre and WorkCentrePro Systems product line identifier (not a complete
product identifier).
""")
_XcmPidWCPro_ObjectIdentity = ObjectIdentity
xcmPidWCPro = _XcmPidWCPro_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPro.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPro.setDescription("""\
WorkCentrePro System product line identifier (not a complete product
identifier).
""")
_XcmPidWCP32C_ObjectIdentity = ObjectIdentity
xcmPidWCP32C = _XcmPidWCP32C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP32C.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP32C.setDescription("""\
WorkCentrePro32C multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP32CV1_ObjectIdentity = ObjectIdentity
xcmPidWCP32CV1 = _XcmPidWCP32CV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP32CV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP32CV1.setDescription("""\
WorkCentrePro32C multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP32CV2_ObjectIdentity = ObjectIdentity
xcmPidWCP32CV2 = _XcmPidWCP32CV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCP32CV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP32CV2.setDescription("""\
WorkCentrePro32C multi-function system, launch configuration version #2, and
complete product identifier.
""")
_XcmPidWCP35_ObjectIdentity = ObjectIdentity
xcmPidWCP35 = _XcmPidWCP35_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCP35.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP35.setDescription("""\
WorkCentrePro35 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP35V1_ObjectIdentity = ObjectIdentity
xcmPidWCP35V1 = _XcmPidWCP35V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP35V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP35V1.setDescription("""\
WorkCentrePro35 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP35V2_ObjectIdentity = ObjectIdentity
xcmPidWCP35V2 = _XcmPidWCP35V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCP35V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP35V2.setDescription("""\
WorkCentrePro35 multi-function system, launch configuration version #2, and
complete product identifier.
""")
_XcmPidWCP40C_ObjectIdentity = ObjectIdentity
xcmPidWCP40C = _XcmPidWCP40C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidWCP40C.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP40C.setDescription("""\
WorkCentrePro40C multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP40CV1_ObjectIdentity = ObjectIdentity
xcmPidWCP40CV1 = _XcmPidWCP40CV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP40CV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP40CV1.setDescription("""\
WorkCentrePro40C multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP40CV2_ObjectIdentity = ObjectIdentity
xcmPidWCP40CV2 = _XcmPidWCP40CV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCP40CV2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP40CV2.setDescription("""\
WorkCentrePro40C multi-function system, launch configuration version #2, and
complete product identifier.
""")
_XcmPidWCP45_ObjectIdentity = ObjectIdentity
xcmPidWCP45 = _XcmPidWCP45_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 4)
)
if mibBuilder.loadTexts:
    xcmPidWCP45.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP45.setDescription("""\
WorkCentrePro45 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP45V1_ObjectIdentity = ObjectIdentity
xcmPidWCP45V1 = _XcmPidWCP45V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP45V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP45V1.setDescription("""\
WorkCentrePro45 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP45V2_ObjectIdentity = ObjectIdentity
xcmPidWCP45V2 = _XcmPidWCP45V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 4, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCP45V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP45V2.setDescription("""\
WorkCentrePro45 multi-function system, launch configuration version #2, and
complete product identifier.
""")
_XcmPidWCP55_ObjectIdentity = ObjectIdentity
xcmPidWCP55 = _XcmPidWCP55_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 5)
)
if mibBuilder.loadTexts:
    xcmPidWCP55.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP55.setDescription("""\
WorkCentrePro55 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP55V1_ObjectIdentity = ObjectIdentity
xcmPidWCP55V1 = _XcmPidWCP55V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP55V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP55V1.setDescription("""\
WorkCentrePro55 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP55V2_ObjectIdentity = ObjectIdentity
xcmPidWCP55V2 = _XcmPidWCP55V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 5, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCP55V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP55V2.setDescription("""\
WorkCentrePro55 multi-function system, launch configuration version #2, and
complete product identifier.
""")
_XcmPidWCP165_ObjectIdentity = ObjectIdentity
xcmPidWCP165 = _XcmPidWCP165_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 9)
)
if mibBuilder.loadTexts:
    xcmPidWCP165.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP165.setDescription("""\
WorkCentre Pro 165 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP165V1_ObjectIdentity = ObjectIdentity
xcmPidWCP165V1 = _XcmPidWCP165V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP165V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP165V1.setDescription("""\
WorkCentre Pro 165 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP175_ObjectIdentity = ObjectIdentity
xcmPidWCP175 = _XcmPidWCP175_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 17)
)
if mibBuilder.loadTexts:
    xcmPidWCP175.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP175.setDescription("""\
WorkCentre Pro 175 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP175V1_ObjectIdentity = ObjectIdentity
xcmPidWCP175V1 = _XcmPidWCP175V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP175V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP175V1.setDescription("""\
WorkCentre Pro 175 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCPC2128_ObjectIdentity = ObjectIdentity
xcmPidWCPC2128 = _XcmPidWCPC2128_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 19)
)
if mibBuilder.loadTexts:
    xcmPidWCPC2128.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPC2128.setDescription("""\
WorkCentre Pro C2128 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCPC2128V1_ObjectIdentity = ObjectIdentity
xcmPidWCPC2128V1 = _XcmPidWCPC2128V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPC2128V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPC2128V1.setDescription("""\
WorkCentre Pro C2128 multi-function system launch configuration and version #1,
and complete product identifier.
""")
_XcmPidWCPC2636_ObjectIdentity = ObjectIdentity
xcmPidWCPC2636 = _XcmPidWCPC2636_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 20)
)
if mibBuilder.loadTexts:
    xcmPidWCPC2636.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPC2636.setDescription("""\
WorkCentre Pro C2636 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCPC2636V1_ObjectIdentity = ObjectIdentity
xcmPidWCPC2636V1 = _XcmPidWCPC2636V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPC2636V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPC2636V1.setDescription("""\
WorkCentre Pro C2636 multi-function system launch configuration and version #1,
and complete product identifier.
""")
_XcmPidWCPC3545_ObjectIdentity = ObjectIdentity
xcmPidWCPC3545 = _XcmPidWCPC3545_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 21)
)
if mibBuilder.loadTexts:
    xcmPidWCPC3545.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPC3545.setDescription("""\
WorkCentre Pro C3545 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCPC3545V1_ObjectIdentity = ObjectIdentity
xcmPidWCPC3545V1 = _XcmPidWCPC3545V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 21, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPC3545V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPC3545V1.setDescription("""\
WorkCentre Pro C3545 multi-function system launch configuration and version #1,
and complete product identifier.
""")
_XcmPidWC265_ObjectIdentity = ObjectIdentity
xcmPidWC265 = _XcmPidWC265_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 22)
)
if mibBuilder.loadTexts:
    xcmPidWC265.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC265.setDescription("""\
WorkCentre 265 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC265V1_ObjectIdentity = ObjectIdentity
xcmPidWC265V1 = _XcmPidWC265V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 22, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC265V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC265V1.setDescription("""\
WorkCentre 265 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC275_ObjectIdentity = ObjectIdentity
xcmPidWC275 = _XcmPidWC275_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 23)
)
if mibBuilder.loadTexts:
    xcmPidWC275.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC275.setDescription("""\
WorkCentre 275 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC275V1_ObjectIdentity = ObjectIdentity
xcmPidWC275V1 = _XcmPidWC275V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 23, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC275V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC275V1.setDescription("""\
WorkCentre 275 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP265_ObjectIdentity = ObjectIdentity
xcmPidWCP265 = _XcmPidWCP265_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 24)
)
if mibBuilder.loadTexts:
    xcmPidWCP265.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP265.setDescription("""\
WorkCentre Pro 265 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP265V1_ObjectIdentity = ObjectIdentity
xcmPidWCP265V1 = _XcmPidWCP265V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 24, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP265V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP265V1.setDescription("""\
WorkCentre Pro 265 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP275_ObjectIdentity = ObjectIdentity
xcmPidWCP275 = _XcmPidWCP275_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 25)
)
if mibBuilder.loadTexts:
    xcmPidWCP275.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP275.setDescription("""\
WorkCentre Pro 275 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP275V1_ObjectIdentity = ObjectIdentity
xcmPidWCP275V1 = _XcmPidWCP275V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 25, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP275V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP275V1.setDescription("""\
WorkCentre Pro 275 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCPS265_ObjectIdentity = ObjectIdentity
xcmPidWCPS265 = _XcmPidWCPS265_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 26)
)
if mibBuilder.loadTexts:
    xcmPidWCPS265.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS265.setDescription("""\
WorkCentre + PostScript 265 multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCPS265V1_ObjectIdentity = ObjectIdentity
xcmPidWCPS265V1 = _XcmPidWCPS265V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 26, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPS265V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS265V1.setDescription("""\
WorkCentre + PostScript 265 multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCPS275_ObjectIdentity = ObjectIdentity
xcmPidWCPS275 = _XcmPidWCPS275_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 27)
)
if mibBuilder.loadTexts:
    xcmPidWCPS275.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS275.setDescription("""\
WorkCentre + PostScript 275 multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCPS275V1_ObjectIdentity = ObjectIdentity
xcmPidWCPS275V1 = _XcmPidWCPS275V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 27, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPS275V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS275V1.setDescription("""\
WorkCentre + PostScript 275 multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWC7655_ObjectIdentity = ObjectIdentity
xcmPidWC7655 = _XcmPidWC7655_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 28)
)
if mibBuilder.loadTexts:
    xcmPidWC7655.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC7655.setDescription("""\
WorkCentre 7655 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC7655V1_ObjectIdentity = ObjectIdentity
xcmPidWC7655V1 = _XcmPidWC7655V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 28, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC7655V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC7655V1.setDescription("""\
WorkCentre 7655 system identifier launch configuration version #1, and complete
product identifier.
""")
_XcmPidWC7665_ObjectIdentity = ObjectIdentity
xcmPidWC7665 = _XcmPidWC7665_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 29)
)
if mibBuilder.loadTexts:
    xcmPidWC7665.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC7665.setDescription("""\
WorkCentre 7665 system identifier (not a complete product identifier).
""")
_XcmPidWC7665V1_ObjectIdentity = ObjectIdentity
xcmPidWC7665V1 = _XcmPidWC7665V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 29, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC7665V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC7665V1.setDescription("""\
WorkCentre 7665 system identifier launch configuration version #1, and complete
product identifier.
""")
_XcmPidWC7675_ObjectIdentity = ObjectIdentity
xcmPidWC7675 = _XcmPidWC7675_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 36)
)
if mibBuilder.loadTexts:
    xcmPidWC7675.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC7675.setDescription("""\
WorkCentre 7675 system identifier (not a complete product identifier).
""")
_XcmPidWC7675V1_ObjectIdentity = ObjectIdentity
xcmPidWC7675V1 = _XcmPidWC7675V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 1, 36, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC7675V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC7675V1.setDescription("""\
WorkCentre 7675 system identifier launch configuration version #1, and complete
product identifier.
""")
_XcmPidWCMF_ObjectIdentity = ObjectIdentity
xcmPidWCMF = _XcmPidWCMF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCMF.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMF.setDescription("""\
WorkCentre System identifier (not a complete product identifier).
""")
_XcmPidWCM35_ObjectIdentity = ObjectIdentity
xcmPidWCM35 = _XcmPidWCM35_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCM35.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM35.setDescription("""\
WorkCentre M35 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCM35V1_ObjectIdentity = ObjectIdentity
xcmPidWCM35V1 = _XcmPidWCM35V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCM35V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM35V1.setDescription("""\
WorkCentre M35 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCM35V2_ObjectIdentity = ObjectIdentity
xcmPidWCM35V2 = _XcmPidWCM35V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCM35V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM35V2.setDescription("""\
WorkCentre M35 multi-function system, launch configuration version #2, and
complete product identifier.
""")
_XcmPidWCM45_ObjectIdentity = ObjectIdentity
xcmPidWCM45 = _XcmPidWCM45_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidWCM45.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM45.setDescription("""\
WorkCentre M45 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCM45V1_ObjectIdentity = ObjectIdentity
xcmPidWCM45V1 = _XcmPidWCM45V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCM45V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM45V1.setDescription("""\
WorkCentre M45 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCM45V2_ObjectIdentity = ObjectIdentity
xcmPidWCM45V2 = _XcmPidWCM45V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCM45V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM45V2.setDescription("""\
WorkCentre M45 multi-function system, launch configuration version #2, and
complete product identifier.
""")
_XcmPidWCM55_ObjectIdentity = ObjectIdentity
xcmPidWCM55 = _XcmPidWCM55_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 4)
)
if mibBuilder.loadTexts:
    xcmPidWCM55.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM55.setDescription("""\
WorkCentre M55 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCM55V1_ObjectIdentity = ObjectIdentity
xcmPidWCM55V1 = _XcmPidWCM55V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCM55V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM55V1.setDescription("""\
WorkCentre M55 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCM55V2_ObjectIdentity = ObjectIdentity
xcmPidWCM55V2 = _XcmPidWCM55V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 4, 2)
)
if mibBuilder.loadTexts:
    xcmPidWCM55V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM55V2.setDescription("""\
WorkCentre M55 multi-function system, launch configuration version #2, and
complete product identifier.
""")
_XcmPidWCM165_ObjectIdentity = ObjectIdentity
xcmPidWCM165 = _XcmPidWCM165_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 5)
)
if mibBuilder.loadTexts:
    xcmPidWCM165.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM165.setDescription("""\
WorkCentre M165 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCM165V1_ObjectIdentity = ObjectIdentity
xcmPidWCM165V1 = _XcmPidWCM165V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCM165V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM165V1.setDescription("""\
WorkCentre M165 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCM175_ObjectIdentity = ObjectIdentity
xcmPidWCM175 = _XcmPidWCM175_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 6)
)
if mibBuilder.loadTexts:
    xcmPidWCM175.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM175.setDescription("""\
WorkCentre M175 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCM175V1_ObjectIdentity = ObjectIdentity
xcmPidWCM175V1 = _XcmPidWCM175V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 6, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCM175V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCM175V1.setDescription("""\
WorkCentre M175 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCMPS35_ObjectIdentity = ObjectIdentity
xcmPidWCMPS35 = _XcmPidWCMPS35_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 9)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS35.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS35.setDescription("""\
WorkCentre M35 PostScript multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCMPS35V1_ObjectIdentity = ObjectIdentity
xcmPidWCMPS35V1 = _XcmPidWCMPS35V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS35V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS35V1.setDescription("""\
WorkCentre M35 PostScript multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCMPS45_ObjectIdentity = ObjectIdentity
xcmPidWCMPS45 = _XcmPidWCMPS45_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 17)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS45.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS45.setDescription("""\
WorkCentre M45 PostScript multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCMPS45V1_ObjectIdentity = ObjectIdentity
xcmPidWCMPS45V1 = _XcmPidWCMPS45V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS45V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS45V1.setDescription("""\
WorkCentre M45 PostScript multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCMPS55_ObjectIdentity = ObjectIdentity
xcmPidWCMPS55 = _XcmPidWCMPS55_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 18)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS55.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS55.setDescription("""\
WorkCentre M55 PostScript multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCMPS55V1_ObjectIdentity = ObjectIdentity
xcmPidWCMPS55V1 = _XcmPidWCMPS55V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS55V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS55V1.setDescription("""\
WorkCentre M55 PostScript multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCMPS165_ObjectIdentity = ObjectIdentity
xcmPidWCMPS165 = _XcmPidWCMPS165_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 19)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS165.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS165.setDescription("""\
WorkCentre M165 PostScript multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCMPS165V1_ObjectIdentity = ObjectIdentity
xcmPidWCMPS165V1 = _XcmPidWCMPS165V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS165V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS165V1.setDescription("""\
WorkCentre M165 PostScript multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCMPS175_ObjectIdentity = ObjectIdentity
xcmPidWCMPS175 = _XcmPidWCMPS175_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 20)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS175.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS175.setDescription("""\
WorkCentre M175 PostScript multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCMPS175V1_ObjectIdentity = ObjectIdentity
xcmPidWCMPS175V1 = _XcmPidWCMPS175V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCMPS175V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMPS175V1.setDescription("""\
WorkCentre M175 PostScript multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCMF28_ObjectIdentity = ObjectIdentity
xcmPidWCMF28 = _XcmPidWCMF28_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 23)
)
if mibBuilder.loadTexts:
    xcmPidWCMF28.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMF28.setDescription("""\
Xerox WorkCentre M128 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCMFM28_ObjectIdentity = ObjectIdentity
xcmPidWCMFM28 = _XcmPidWCMFM28_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 23, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCMFM28.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMFM28.setDescription("""\
Xerox WorkCentre M128 multi-function system, launch configuration version #1,
and complete product identifier.
""")
_XcmPidWCPS232_ObjectIdentity = ObjectIdentity
xcmPidWCPS232 = _XcmPidWCPS232_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 26)
)
if mibBuilder.loadTexts:
    xcmPidWCPS232.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS232.setDescription("""\
WorkCentre + PostScript 232 multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCPS232V1_ObjectIdentity = ObjectIdentity
xcmPidWCPS232V1 = _XcmPidWCPS232V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 26, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPS232V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS232V1.setDescription("""\
WorkCentre + PostScript 232 multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCPS238_ObjectIdentity = ObjectIdentity
xcmPidWCPS238 = _XcmPidWCPS238_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 27)
)
if mibBuilder.loadTexts:
    xcmPidWCPS238.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS238.setDescription("""\
WorkCentre + PostScript 238 multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCPS238V1_ObjectIdentity = ObjectIdentity
xcmPidWCPS238V1 = _XcmPidWCPS238V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 27, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPS238V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS238V1.setDescription("""\
WorkCentre + PostScript 238 multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCPS245_ObjectIdentity = ObjectIdentity
xcmPidWCPS245 = _XcmPidWCPS245_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 28)
)
if mibBuilder.loadTexts:
    xcmPidWCPS245.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS245.setDescription("""\
WorkCentre + PostScript 245 multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCPS245V1_ObjectIdentity = ObjectIdentity
xcmPidWCPS245V1 = _XcmPidWCPS245V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 28, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPS245V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS245V1.setDescription("""\
WorkCentre + PostScript 245 multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCPS255_ObjectIdentity = ObjectIdentity
xcmPidWCPS255 = _XcmPidWCPS255_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 29)
)
if mibBuilder.loadTexts:
    xcmPidWCPS255.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS255.setDescription("""\
WorkCentre + PostScript 255 multi-function system identifier (not a complete
product identifier).
""")
_XcmPidWCPS255V1_ObjectIdentity = ObjectIdentity
xcmPidWCPS255V1 = _XcmPidWCPS255V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 29, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCPS255V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCPS255V1.setDescription("""\
WorkCentre + PostScript 255 multi-function system, launch configuration version
#1, and complete product identifier.
""")
_XcmPidWCP232_ObjectIdentity = ObjectIdentity
xcmPidWCP232 = _XcmPidWCP232_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 30)
)
if mibBuilder.loadTexts:
    xcmPidWCP232.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP232.setDescription("""\
WorkCentre Pro 232 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP232V1_ObjectIdentity = ObjectIdentity
xcmPidWCP232V1 = _XcmPidWCP232V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 30, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP232V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP232V1.setDescription("""\
WorkCentre Pro 232 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP238_ObjectIdentity = ObjectIdentity
xcmPidWCP238 = _XcmPidWCP238_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 31)
)
if mibBuilder.loadTexts:
    xcmPidWCP238.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP238.setDescription("""\
WorkCentre Pro 238 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP238V1_ObjectIdentity = ObjectIdentity
xcmPidWCP238V1 = _XcmPidWCP238V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 31, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP238V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP238V1.setDescription("""\
WorkCentre Pro 238 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP245_ObjectIdentity = ObjectIdentity
xcmPidWCP245 = _XcmPidWCP245_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 32)
)
if mibBuilder.loadTexts:
    xcmPidWCP245.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP245.setDescription("""\
WorkCentre Pro 245 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP245V1_ObjectIdentity = ObjectIdentity
xcmPidWCP245V1 = _XcmPidWCP245V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 32, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP245V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP245V1.setDescription("""\
WorkCentre Pro 245 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCP255_ObjectIdentity = ObjectIdentity
xcmPidWCP255 = _XcmPidWCP255_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 33)
)
if mibBuilder.loadTexts:
    xcmPidWCP255.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP255.setDescription("""\
WorkCentre Pro 255 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWCP255V1_ObjectIdentity = ObjectIdentity
xcmPidWCP255V1 = _XcmPidWCP255V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 33, 1)
)
if mibBuilder.loadTexts:
    xcmPidWCP255V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCP255V1.setDescription("""\
WorkCentre Pro 255 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC232_ObjectIdentity = ObjectIdentity
xcmPidWC232 = _XcmPidWC232_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 34)
)
if mibBuilder.loadTexts:
    xcmPidWC232.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC232.setDescription("""\
WorkCentre 232 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC232V1_ObjectIdentity = ObjectIdentity
xcmPidWC232V1 = _XcmPidWC232V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 34, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC232V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC232V1.setDescription("""\
WorkCentre 232 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC238_ObjectIdentity = ObjectIdentity
xcmPidWC238 = _XcmPidWC238_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 35)
)
if mibBuilder.loadTexts:
    xcmPidWC238.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC238.setDescription("""\
WorkCentre 238 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC238V1_ObjectIdentity = ObjectIdentity
xcmPidWC238V1 = _XcmPidWC238V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 35, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC238V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC238V1.setDescription("""\
WorkCentre 238 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC245_ObjectIdentity = ObjectIdentity
xcmPidWC245 = _XcmPidWC245_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 36)
)
if mibBuilder.loadTexts:
    xcmPidWC245.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC245.setDescription("""\
WorkCentre 245 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC245V1_ObjectIdentity = ObjectIdentity
xcmPidWC245V1 = _XcmPidWC245V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 36, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC245V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC245V1.setDescription("""\
WorkCentre 245 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC255_ObjectIdentity = ObjectIdentity
xcmPidWC255 = _XcmPidWC255_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 37)
)
if mibBuilder.loadTexts:
    xcmPidWC255.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC255.setDescription("""\
WorkCentre 255 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC255V1_ObjectIdentity = ObjectIdentity
xcmPidWC255V1 = _XcmPidWC255V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 37, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC255V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC255V1.setDescription("""\
WorkCentre 255 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWorkCentre5135_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5135 = _XcmPidWorkCentre5135_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 40)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5135.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5135.setDescription("""\
Xerox WorkCentre 5135 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5135C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5135C1 = _XcmPidWorkCentre5135C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 40, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5135C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5135C1.setDescription("""\
Xerox WorkCentre 5135 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5135C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5135C1V1 = _XcmPidWorkCentre5135C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 40, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5135C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5135C1V1.setDescription("""\
Xerox WorkCentre 5135 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre5135C1V2_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5135C1V2 = _XcmPidWorkCentre5135C1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 40, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5135C1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5135C1V2.setDescription("""\
Xerox WorkCentre 5135 launch model, configuration 1, version 2. A complete
product identifier.
""")
_XcmPidWorkCentre5150_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5150 = _XcmPidWorkCentre5150_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 41)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5150.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5150.setDescription("""\
Xerox WorkCentre 5150 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5150C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5150C1 = _XcmPidWorkCentre5150C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 41, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5150C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5150C1.setDescription("""\
Xerox WorkCentre 5150 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5150C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5150C1V1 = _XcmPidWorkCentre5150C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 41, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5150C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5150C1V1.setDescription("""\
Xerox WorkCentre 5150 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre5150C1V2_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5150C1V2 = _XcmPidWorkCentre5150C1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 2, 41, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5150C1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5150C1V2.setDescription("""\
Xerox WorkCentre 5150 launch model, configuration 1, version 2. A complete
product identifier.
""")
_XcmPidWCMF3_ObjectIdentity = ObjectIdentity
xcmPidWCMF3 = _XcmPidWCMF3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3)
)
if mibBuilder.loadTexts:
    xcmPidWCMF3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMF3.setDescription("""\
WorkCentrePro System product line identifier (not a complete product
identifier).
""")
_XcmPidWC5632_ObjectIdentity = ObjectIdentity
xcmPidWC5632 = _XcmPidWC5632_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 35)
)
if mibBuilder.loadTexts:
    xcmPidWC5632.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5632.setDescription("""\
WorkCentre 5632 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5632V1_ObjectIdentity = ObjectIdentity
xcmPidWC5632V1 = _XcmPidWC5632V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 35, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5632V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5632V1.setDescription("""\
WorkCentre 5632 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC5638_ObjectIdentity = ObjectIdentity
xcmPidWC5638 = _XcmPidWC5638_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 37)
)
if mibBuilder.loadTexts:
    xcmPidWC5638.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5638.setDescription("""\
WorkCentre 5638 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5638V1_ObjectIdentity = ObjectIdentity
xcmPidWC5638V1 = _XcmPidWC5638V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 37, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5638V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5638V1.setDescription("""\
WorkCentre 5638 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC5645_ObjectIdentity = ObjectIdentity
xcmPidWC5645 = _XcmPidWC5645_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 38)
)
if mibBuilder.loadTexts:
    xcmPidWC5645.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5645.setDescription("""\
WorkCentre 5645 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5645V1_ObjectIdentity = ObjectIdentity
xcmPidWC5645V1 = _XcmPidWC5645V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 38, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5645V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5645V1.setDescription("""\
WorkCentre 5645 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC5655_ObjectIdentity = ObjectIdentity
xcmPidWC5655 = _XcmPidWC5655_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 39)
)
if mibBuilder.loadTexts:
    xcmPidWC5655.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5655.setDescription("""\
WorkCentre 5655 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5655V1_ObjectIdentity = ObjectIdentity
xcmPidWC5655V1 = _XcmPidWC5655V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 39, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5655V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5655V1.setDescription("""\
WorkCentre 5655 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC5665_ObjectIdentity = ObjectIdentity
xcmPidWC5665 = _XcmPidWC5665_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 40)
)
if mibBuilder.loadTexts:
    xcmPidWC5665.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5665.setDescription("""\
WorkCentre 5665 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5665V1_ObjectIdentity = ObjectIdentity
xcmPidWC5665V1 = _XcmPidWC5665V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 40, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5665V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5665V1.setDescription("""\
WorkCentre 5665 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWC5675_ObjectIdentity = ObjectIdentity
xcmPidWC5675 = _XcmPidWC5675_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 41)
)
if mibBuilder.loadTexts:
    xcmPidWC5675.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5675.setDescription("""\
WorkCentre 5675 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5675V1_ObjectIdentity = ObjectIdentity
xcmPidWC5675V1 = _XcmPidWC5675V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 3, 41, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5675V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5675V1.setDescription("""\
WorkCentre 5675 multi-function system, launch configuration version #1, and
complete product identifier.
""")
_XcmPidWCMF4_ObjectIdentity = ObjectIdentity
xcmPidWCMF4 = _XcmPidWCMF4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4)
)
if mibBuilder.loadTexts:
    xcmPidWCMF4.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMF4.setDescription("""\
Xerox WorkCentre System product line identifier (not a complete product
identifier).
""")
_XcmPidWC5687_ObjectIdentity = ObjectIdentity
xcmPidWC5687 = _XcmPidWC5687_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4, 9)
)
if mibBuilder.loadTexts:
    xcmPidWC5687.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5687.setDescription("""\
Xerox WorkCentre 5687 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5687V1_ObjectIdentity = ObjectIdentity
xcmPidWC5687V1 = _XcmPidWC5687V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5687V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5687V1.setDescription("""\
Xerox WorkCentre 5687 multi-function system, launch configuration version #1,
and complete product identifier.
""")
_XcmPidWC5030_ObjectIdentity = ObjectIdentity
xcmPidWC5030 = _XcmPidWC5030_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4, 17)
)
if mibBuilder.loadTexts:
    xcmPidWC5030.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5030.setDescription("""\
Xerox WorkCentre 5030 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5030V1_ObjectIdentity = ObjectIdentity
xcmPidWC5030V1 = _XcmPidWC5030V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5030V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5030V1.setDescription("""\
Xerox WorkCentre 5030 multi-function system, launch configuration version #1,
and complete product identifier.
""")
_XcmPidWC5030V2_ObjectIdentity = ObjectIdentity
xcmPidWC5030V2 = _XcmPidWC5030V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4, 17, 2)
)
if mibBuilder.loadTexts:
    xcmPidWC5030V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5030V2.setDescription("""\
Xerox WorkCentre 5030 multi-function system, launch configuration version #2,
and complete product identifier.
""")
_XcmPidWC5050_ObjectIdentity = ObjectIdentity
xcmPidWC5050 = _XcmPidWC5050_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4, 18)
)
if mibBuilder.loadTexts:
    xcmPidWC5050.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5050.setDescription("""\
Xerox WorkCentre 5050 multi-function system identifier (not a complete product
identifier).
""")
_XcmPidWC5050V1_ObjectIdentity = ObjectIdentity
xcmPidWC5050V1 = _XcmPidWC5050V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC5050V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5050V1.setDescription("""\
Xerox WorkCentre 5050 multi-function system, launch configuration version #1,
and complete product identifier.
""")
_XcmPidWC5050V2_ObjectIdentity = ObjectIdentity
xcmPidWC5050V2 = _XcmPidWC5050V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 4, 18, 2)
)
if mibBuilder.loadTexts:
    xcmPidWC5050V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC5050V2.setDescription("""\
Xerox WorkCentre 5050 multi-function system, launch configuration version #2,
and complete product identifier.
""")
_XcmPidWCMF5_ObjectIdentity = ObjectIdentity
xcmPidWCMF5 = _XcmPidWCMF5_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5)
)
if mibBuilder.loadTexts:
    xcmPidWCMF5.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMF5.setDescription("""\
Xerox WorkCentre System product line identifier (not a complete product
identifier).
""")
_XcmPidWC6400_ObjectIdentity = ObjectIdentity
xcmPidWC6400 = _XcmPidWC6400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5)
)
if mibBuilder.loadTexts:
    xcmPidWC6400.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400.setDescription("""\
Xerox WorkCentre 6400 model identifier (not a complete product identifier).
""")
_XcmPidWC6400S_ObjectIdentity = ObjectIdentity
xcmPidWC6400S = _XcmPidWC6400S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC6400S.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400S.setDescription("""\
Xerox WorkCentre 6400S model and configuration identifier (not a complete
product identifier).
""")
_XcmPidWC6400Sv1_ObjectIdentity = ObjectIdentity
xcmPidWC6400Sv1 = _XcmPidWC6400Sv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC6400Sv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400Sv1.setDescription("""\
Xerox WorkCentre 6400S launch model, configuration, version 1. A complete
product identifier.
""")
_XcmPidWC6400Sv2_ObjectIdentity = ObjectIdentity
xcmPidWC6400Sv2 = _XcmPidWC6400Sv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidWC6400Sv2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400Sv2.setDescription("""\
Xerox WorkCentre 6400S launch model, configuration, version 2. A complete
product identifier.
""")
_XcmPidWC6400X_ObjectIdentity = ObjectIdentity
xcmPidWC6400X = _XcmPidWC6400X_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 2)
)
if mibBuilder.loadTexts:
    xcmPidWC6400X.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400X.setDescription("""\
Xerox WorkCentre 6400X model and configuration identifier (not a complete
product identifier).
""")
_XcmPidWC6400Xv1_ObjectIdentity = ObjectIdentity
xcmPidWC6400Xv1 = _XcmPidWC6400Xv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC6400Xv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400Xv1.setDescription("""\
Xerox WorkCentre 6400X launch model, configuration, version 1. A complete
product identifier.
""")
_XcmPidWC6400Xv2_ObjectIdentity = ObjectIdentity
xcmPidWC6400Xv2 = _XcmPidWC6400Xv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidWC6400Xv2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400Xv2.setDescription("""\
Xerox WorkCentre 6400X launch model, configuration, version 2. A complete
product identifier.
""")
_XcmPidWC6400XF_ObjectIdentity = ObjectIdentity
xcmPidWC6400XF = _XcmPidWC6400XF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 3)
)
if mibBuilder.loadTexts:
    xcmPidWC6400XF.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400XF.setDescription("""\
Xerox WorkCentre 6400XF model and configuration identifier (not a complete
product identifier).
""")
_XcmPidWC6400XFv1_ObjectIdentity = ObjectIdentity
xcmPidWC6400XFv1 = _XcmPidWC6400XFv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidWC6400XFv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400XFv1.setDescription("""\
Xerox WorkCentre 6400XF launch model, configuration, version 1. A complete
product identifier.
""")
_XcmPidWC6400XFv2_ObjectIdentity = ObjectIdentity
xcmPidWC6400XFv2 = _XcmPidWC6400XFv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 5, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidWC6400XFv2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWC6400XFv2.setDescription("""\
Xerox WorkCentre 6400XF launch model, configuration, version 2. A complete
product identifier.
""")
_XcmPidWorkCentre5735_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5735 = _XcmPidWorkCentre5735_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 29)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5735.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5735.setDescription("""\
Xerox WorkCentre 5735 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5735C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5735C1 = _XcmPidWorkCentre5735C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 29, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5735C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5735C1.setDescription("""\
Xerox WorkCentre 5735 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5735C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5735C1V1 = _XcmPidWorkCentre5735C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 29, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5735C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5735C1V1.setDescription("""\
Xerox WorkCentre 5735 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre5740_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5740 = _XcmPidWorkCentre5740_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 30)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5740.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5740.setDescription("""\
Xerox WorkCentre 5740 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5740C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5740C1 = _XcmPidWorkCentre5740C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 30, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5740C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5740C1.setDescription("""\
Xerox WorkCentre 5740 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5740C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5740C1V1 = _XcmPidWorkCentre5740C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 30, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5740C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5740C1V1.setDescription("""\
Xerox WorkCentre 5740 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre5745_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5745 = _XcmPidWorkCentre5745_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 31)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5745.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5745.setDescription("""\
Xerox WorkCentre 5745 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5745C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5745C1 = _XcmPidWorkCentre5745C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 31, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5745C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5745C1.setDescription("""\
Xerox WorkCentre 5745 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5745C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5745C1V1 = _XcmPidWorkCentre5745C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 31, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5745C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5745C1V1.setDescription("""\
Xerox WorkCentre 5745 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre5755_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5755 = _XcmPidWorkCentre5755_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 32)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5755.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5755.setDescription("""\
Xerox WorkCentre 5755 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5755C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5755C1 = _XcmPidWorkCentre5755C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 32, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5755C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5755C1.setDescription("""\
Xerox WorkCentre 5755 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5755C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5755C1V1 = _XcmPidWorkCentre5755C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 32, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5755C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5755C1V1.setDescription("""\
Xerox WorkCentre 5755 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre5765_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5765 = _XcmPidWorkCentre5765_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 33)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5765.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5765.setDescription("""\
Xerox WorkCentre 5765 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5765C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5765C1 = _XcmPidWorkCentre5765C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 33, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5765C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5765C1.setDescription("""\
Xerox WorkCentre 5765 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5765C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5765C1V1 = _XcmPidWorkCentre5765C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 33, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5765C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5765C1V1.setDescription("""\
Xerox WorkCentre 5765 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre5775_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5775 = _XcmPidWorkCentre5775_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 34)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5775.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5775.setDescription("""\
Xerox WorkCentre 5775 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5775C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5775C1 = _XcmPidWorkCentre5775C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 34, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5775C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5775C1.setDescription("""\
Xerox WorkCentre 5775 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5775C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5775C1V1 = _XcmPidWorkCentre5775C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 34, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5775C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5775C1V1.setDescription("""\
Xerox WorkCentre 5775 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre5790_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5790 = _XcmPidWorkCentre5790_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 35)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5790.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5790.setDescription("""\
Xerox WorkCentre 5790 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre5790C1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5790C1 = _XcmPidWorkCentre5790C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 35, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5790C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5790C1.setDescription("""\
Xerox WorkCentre 5790 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre5790C1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre5790C1V1 = _XcmPidWorkCentre5790C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 5, 35, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre5790C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre5790C1V1.setDescription("""\
Xerox WorkCentre 5790 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWCMF6_ObjectIdentity = ObjectIdentity
xcmPidWCMF6 = _XcmPidWCMF6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6)
)
if mibBuilder.loadTexts:
    xcmPidWCMF6.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMF6.setDescription("""\
Xerox WorkCentre System product line identifier (not a complete product
identifier).
""")
_XcmPidWorkCentre3045B_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre3045B = _XcmPidWorkCentre3045B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 7)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045B.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045B.setDescription("""\
Xerox WorkCentre 3045B model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre3045BC1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre3045BC1 = _XcmPidWorkCentre3045BC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 7, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045BC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045BC1.setDescription("""\
Xerox WorkCentre 3045B model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre3045BC1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre3045BC1V1 = _XcmPidWorkCentre3045BC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 7, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045BC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045BC1V1.setDescription("""\
Xerox WorkCentre 3045B launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre3045NI_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre3045NI = _XcmPidWorkCentre3045NI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 9)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045NI.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045NI.setDescription("""\
Xerox WorkCentre 3045NI model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre3045NIC1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre3045NIC1 = _XcmPidWorkCentre3045NIC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 9, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045NIC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045NIC1.setDescription("""\
Xerox WorkCentre 3045NI model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre3045NIC1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre3045NIC1V1 = _XcmPidWorkCentre3045NIC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 9, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045NIC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre3045NIC1V1.setDescription("""\
Xerox WorkCentre 3045NI launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre6605_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6605 = _XcmPidWorkCentre6605_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 34)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605.setDescription("""\
Xerox WorkCentre 6605 model identifier (not a complete product identifier).
""")
_XcmPidWorkCentre6605NC1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6605NC1 = _XcmPidWorkCentre6605NC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 34, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605NC1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605NC1.setDescription("""\
Xerox WorkCentre 6605 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre6605NC1V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6605NC1V1 = _XcmPidWorkCentre6605NC1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 34, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605NC1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605NC1V1.setDescription("""\
Xerox WorkCentre 6605 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidWorkCentre6605DNC2_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6605DNC2 = _XcmPidWorkCentre6605DNC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 34, 2)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605DNC2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605DNC2.setDescription("""\
Xerox WorkCentre 6605 model and configuration 2 identifier (not a complete
product identifier).
""")
_XcmPidWorkCentre6605DNC2V1_ObjectIdentity = ObjectIdentity
xcmPidWorkCentre6605DNC2V1 = _XcmPidWorkCentre6605DNC2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 6, 34, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605DNC2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWorkCentre6605DNC2V1.setDescription("""\
Xerox WorkCentre 6605 launch model, configuration 2, version 1. A complete
product identifier.
""")
_XcmPidWCMF7_ObjectIdentity = ObjectIdentity
xcmPidWCMF7 = _XcmPidWCMF7_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 20, 7)
)
if mibBuilder.loadTexts:
    xcmPidWCMF7.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidWCMF7.setDescription("""\
Xerox WorkCentre System product line identifier (not a complete product
identifier).
""")
_XcmPidXeroxWideFormat_ObjectIdentity = ObjectIdentity
xcmPidXeroxWideFormat = _XcmPidXeroxWideFormat_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 22)
)
if mibBuilder.loadTexts:
    xcmPidXeroxWideFormat.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidXeroxWideFormat.setDescription("""\
Xerox Wide Format Printers product line identifier (not a complete product
identifier).
""")
_XcmPidNuveraProductLine_ObjectIdentity = ObjectIdentity
xcmPidNuveraProductLine = _XcmPidNuveraProductLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23)
)
if mibBuilder.loadTexts:
    xcmPidNuveraProductLine.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuveraProductLine.setDescription("""\
Nuvera product line identifier (not a complete product identifier).
""")
_XcmPidNuveraEAProductionSystemFamily_ObjectIdentity = ObjectIdentity
xcmPidNuveraEAProductionSystemFamily = _XcmPidNuveraEAProductionSystemFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 17)
)
if mibBuilder.loadTexts:
    xcmPidNuveraEAProductionSystemFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuveraEAProductionSystemFamily.setDescription("""\
Xerox Nuvera EA Production System family identifier (not a complete product
identifier).
""")
_XcmPidNuvera100x120x144x157EAPS_ObjectIdentity = ObjectIdentity
xcmPidNuvera100x120x144x157EAPS = _XcmPidNuvera100x120x144x157EAPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 17, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144x157EAPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144x157EAPS.setDescription("""\
Xerox Nuvera 100x120x144x157 EAPS system model identifier (not a complete
product identifier).
""")
_XcmPidNuvera100x120x144x157EAPSEmbeddedFFPS_ObjectIdentity = ObjectIdentity
xcmPidNuvera100x120x144x157EAPSEmbeddedFFPS = _XcmPidNuvera100x120x144x157EAPSEmbeddedFFPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 17, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144x157EAPSEmbeddedFFPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144x157EAPSEmbeddedFFPS.setDescription("""\
Xerox Nuvera 100x120x144x157 EAPS with an embedded FreeFlow Print Server (FFPS)
DFE system configuration model identifier (not a complete product identifier).
""")
_XcmPidNuvera100x120x144x157EAPSEmbeddedFFPSV1_ObjectIdentity = ObjectIdentity
xcmPidNuvera100x120x144x157EAPSEmbeddedFFPSV1 = _XcmPidNuvera100x120x144x157EAPSEmbeddedFFPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 17, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144x157EAPSEmbeddedFFPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144x157EAPSEmbeddedFFPSV1.setDescription("""\
Xerox Nuvera 100x120x144x157 EAPS with an embedded FreeFlow Print Server (FFPS)
DFE device launch configuration version and complete product identifier.
""")
_XcmPidNuveraEAPerfectingProductionSystemFamily_ObjectIdentity = ObjectIdentity
xcmPidNuveraEAPerfectingProductionSystemFamily = _XcmPidNuveraEAPerfectingProductionSystemFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 18)
)
if mibBuilder.loadTexts:
    xcmPidNuveraEAPerfectingProductionSystemFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuveraEAPerfectingProductionSystemFamily.setDescription("""\
Xerox Nuvera EA Perfecting Production System family identifier (not a complete
product identifier).
""")
_XcmPidNuvera200x288x314EAPPS_ObjectIdentity = ObjectIdentity
xcmPidNuvera200x288x314EAPPS = _XcmPidNuvera200x288x314EAPPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 18, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera200x288x314EAPPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera200x288x314EAPPS.setDescription("""\
Xerox Nuvera 200x288x314 EAPPS system model identifier (not a complete product
identifier).
""")
_XcmPidNuvera200x288x314EAPPSEmbeddedFFPS_ObjectIdentity = ObjectIdentity
xcmPidNuvera200x288x314EAPPSEmbeddedFFPS = _XcmPidNuvera200x288x314EAPPSEmbeddedFFPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 18, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera200x288x314EAPPSEmbeddedFFPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera200x288x314EAPPSEmbeddedFFPS.setDescription("""\
Xerox Nuvera 200x288x314 EAPPS with an embedded FreeFlow Print Server (FFPS)
DFE system configuration model identifier (not a complete product identifier).
""")
_XcmPidNuvera200x288x314EAPPSEmbeddedFFPSv1_ObjectIdentity = ObjectIdentity
xcmPidNuvera200x288x314EAPPSEmbeddedFFPSv1 = _XcmPidNuvera200x288x314EAPPSEmbeddedFFPSv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 18, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera200x288x314EAPPSEmbeddedFFPSv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera200x288x314EAPPSEmbeddedFFPSv1.setDescription("""\
Xerox Nuvera 200x288x314 EAPPS with an embedded FreeFlow Print Server (FFPS)
DFE device launch configuration version and complete product identifier.
""")
_XcmPidNuveraMXProductionSystemFamily_ObjectIdentity = ObjectIdentity
xcmPidNuveraMXProductionSystemFamily = _XcmPidNuveraMXProductionSystemFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 19)
)
if mibBuilder.loadTexts:
    xcmPidNuveraMXProductionSystemFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuveraMXProductionSystemFamily.setDescription("""\
Xerox Nuvera MX Production System family identifier (not a complete product
identifier).
""")
_XcmPidNuvera100x120x144MXPS_ObjectIdentity = ObjectIdentity
xcmPidNuvera100x120x144MXPS = _XcmPidNuvera100x120x144MXPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 19, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144MXPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144MXPS.setDescription("""\
Xerox Nuvera 100x120x144 MXPS system model identifier (not a complete product
identifier).
""")
_XcmPidNuvera100x120x144MXPSEmbeddedFFPS_ObjectIdentity = ObjectIdentity
xcmPidNuvera100x120x144MXPSEmbeddedFFPS = _XcmPidNuvera100x120x144MXPSEmbeddedFFPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 19, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144MXPSEmbeddedFFPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144MXPSEmbeddedFFPS.setDescription("""\
Xerox Nuvera 100x120x144 MXPS with an embedded FreeFlow Print Server (FFPS) DFE
system configuration model identifier (not a complete product identifier).
""")
_XcmPidNuvera100x120x144MXPSEmbeddedFFPSV1_ObjectIdentity = ObjectIdentity
xcmPidNuvera100x120x144MXPSEmbeddedFFPSV1 = _XcmPidNuvera100x120x144MXPSEmbeddedFFPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 19, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144MXPSEmbeddedFFPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera100x120x144MXPSEmbeddedFFPSV1.setDescription("""\
Xerox Nuvera 100x120x144 MXPS with an embedded FreeFlow Print Server (FFPS) DFE
device launch configuration version and complete product identifier.
""")
_XcmPidNuveraMXPerfectingProductionSystemFamily_ObjectIdentity = ObjectIdentity
xcmPidNuveraMXPerfectingProductionSystemFamily = _XcmPidNuveraMXPerfectingProductionSystemFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 20)
)
if mibBuilder.loadTexts:
    xcmPidNuveraMXPerfectingProductionSystemFamily.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuveraMXPerfectingProductionSystemFamily.setDescription("""\
Xerox Nuvera MX Perfecting Production System family identifier (not a complete
product identifier).
""")
_XcmPidNuvera200x288MXPPS_ObjectIdentity = ObjectIdentity
xcmPidNuvera200x288MXPPS = _XcmPidNuvera200x288MXPPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 20, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera200x288MXPPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera200x288MXPPS.setDescription("""\
Xerox Nuvera 200x288 MXPPS system model identifier (not a complete product
identifier).
""")
_XcmPidNuvera200x288MXPPSEmbeddedFFPS_ObjectIdentity = ObjectIdentity
xcmPidNuvera200x288MXPPSEmbeddedFFPS = _XcmPidNuvera200x288MXPPSEmbeddedFFPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 20, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera200x288MXPPSEmbeddedFFPS.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera200x288MXPPSEmbeddedFFPS.setDescription("""\
Xerox Nuvera 200x288 MXPPS with an embedded FreeFlow Print Server (FFPS) DFE
system configuration model identifier (not a complete product identifier).
""")
_XcmPidNuvera200x288MXPPSEmbeddedFFPSV1_ObjectIdentity = ObjectIdentity
xcmPidNuvera200x288MXPPSEmbeddedFFPSV1 = _XcmPidNuvera200x288MXPPSEmbeddedFFPSV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 23, 20, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidNuvera200x288MXPPSEmbeddedFFPSV1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidNuvera200x288MXPPSEmbeddedFFPSV1.setDescription("""\
Xerox Nuvera 200x288 MXPPS with an embedded FreeFlow Print Server (FFPS) DFE
device launch configuration version and complete product identifier.
""")
_XcmPidColorQube_ObjectIdentity = ObjectIdentity
xcmPidColorQube = _XcmPidColorQube_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24)
)
if mibBuilder.loadTexts:
    xcmPidColorQube.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube.setDescription("""\
ColorQube product line identifier (not a complete product identifier).
""")
_XcmPidColorQube9200_ObjectIdentity = ObjectIdentity
xcmPidColorQube9200 = _XcmPidColorQube9200_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9200.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9200.setDescription("""\
Xerox ColorQube 9200 family identifier (not a complete product identifier).
""")
_XcmPidColorQube9201_ObjectIdentity = ObjectIdentity
xcmPidColorQube9201 = _XcmPidColorQube9201_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9201.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9201.setDescription("""\
Xerox ColorQube 9201 model identifier (not a complete product identifier).
""")
_XcmPidColorQube9201C1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9201C1 = _XcmPidColorQube9201C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9201C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9201C1.setDescription("""\
Xerox ColorQube 9201 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9201C1V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9201C1V1 = _XcmPidColorQube9201C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9201C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9201C1V1.setDescription("""\
Xerox ColorQube 9201 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidColorQube9201C1V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9201C1V2 = _XcmPidColorQube9201C1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 1, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9201C1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9201C1V2.setDescription("""\
Xerox ColorQube 9201 launch model, configuration 1, version 2. A complete
product identifier.
""")
_XcmPidColorQube9201C1V3_ObjectIdentity = ObjectIdentity
xcmPidColorQube9201C1V3 = _XcmPidColorQube9201C1V3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 1, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9201C1V3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9201C1V3.setDescription("""\
Xerox ColorQube 9201 launch model, configuration 1, version 3. A complete
product identifier.
""")
_XcmPidColorQube9201C2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9201C2 = _XcmPidColorQube9201C2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9201C2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9201C2.setDescription("""\
Xerox ColorQube 9201 model and configuration 2 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9201C2V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9201C2V1 = _XcmPidColorQube9201C2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 1, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9201C2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9201C2V1.setDescription("""\
Xerox ColorQube 9201 launch model, configuration 2, version 1. A complete
product identifier.
""")
_XcmPidColorQube9201C2V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9201C2V2 = _XcmPidColorQube9201C2V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 1, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9201C2V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9201C2V2.setDescription("""\
Xerox ColorQube 9201 launch model, configuration 2, version 2. A complete
product identifier.
""")
_XcmPidColorQube9202_ObjectIdentity = ObjectIdentity
xcmPidColorQube9202 = _XcmPidColorQube9202_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9202.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9202.setDescription("""\
Xerox ColorQube 9202 model identifier (not a complete product identifier).
""")
_XcmPidColorQube9202C1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9202C1 = _XcmPidColorQube9202C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9202C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9202C1.setDescription("""\
Xerox ColorQube 9202 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9202C1V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9202C1V1 = _XcmPidColorQube9202C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9202C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9202C1V1.setDescription("""\
Xerox ColorQube 9202 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidColorQube9202C1V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9202C1V2 = _XcmPidColorQube9202C1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 2, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9202C1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9202C1V2.setDescription("""\
Xerox ColorQube 9202 launch model, configuration 1, version 2. A complete
product identifier.
""")
_XcmPidColorQube9202C1V3_ObjectIdentity = ObjectIdentity
xcmPidColorQube9202C1V3 = _XcmPidColorQube9202C1V3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 2, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9202C1V3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9202C1V3.setDescription("""\
Xerox ColorQube 9202 launch model, configuration 1, version 3. A complete
product identifier.
""")
_XcmPidColorQube9202C2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9202C2 = _XcmPidColorQube9202C2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9202C2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9202C2.setDescription("""\
Xerox ColorQube 9202 model and configuration 2 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9202C2V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9202C2V1 = _XcmPidColorQube9202C2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9202C2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9202C2V1.setDescription("""\
Xerox ColorQube 9202 launch model, configuration 2, version 1. A complete
product identifier.
""")
_XcmPidColorQube9202C2V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9202C2V2 = _XcmPidColorQube9202C2V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 2, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9202C2V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9202C2V2.setDescription("""\
Xerox ColorQube 9202 launch model, configuration 2, version 2. A complete
product identifier.
""")
_XcmPidColorQube9203_ObjectIdentity = ObjectIdentity
xcmPidColorQube9203 = _XcmPidColorQube9203_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9203.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9203.setDescription("""\
Xerox ColorQube 9203 model identifier (not a complete product identifier).
""")
_XcmPidColorQube9203C1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9203C1 = _XcmPidColorQube9203C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9203C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9203C1.setDescription("""\
Xerox ColorQube 9203 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9203C1V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9203C1V1 = _XcmPidColorQube9203C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9203C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9203C1V1.setDescription("""\
Xerox ColorQube 9203 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidColorQube9203C1V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9203C1V2 = _XcmPidColorQube9203C1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 3, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9203C1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9203C1V2.setDescription("""\
Xerox ColorQube 9203 launch model, configuration 1, version 2. A complete
product identifier.
""")
_XcmPidColorQube9203C1V3_ObjectIdentity = ObjectIdentity
xcmPidColorQube9203C1V3 = _XcmPidColorQube9203C1V3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 3, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9203C1V3.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9203C1V3.setDescription("""\
Xerox ColorQube 9203 launch model, configuration 1, version 3. A complete
product identifier.
""")
_XcmPidColorQube9203C2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9203C2 = _XcmPidColorQube9203C2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9203C2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9203C2.setDescription("""\
Xerox ColorQube 9203 model and configuration 2 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9203C2V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9203C2V1 = _XcmPidColorQube9203C2V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9203C2V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9203C2V1.setDescription("""\
Xerox ColorQube 9203 launch model, configuration 2, version 1. A complete
product identifier.
""")
_XcmPidColorQube9203C2V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9203C2V2 = _XcmPidColorQube9203C2V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 1, 3, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9203C2V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9203C2V2.setDescription("""\
Xerox ColorQube 9203 launch model, configuration 2, version 2. A complete
product identifier.
""")
_XcmPidColorQube8x00_ObjectIdentity = ObjectIdentity
xcmPidColorQube8x00 = _XcmPidColorQube8x00_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8x00.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8x00.setDescription("""\
Xerox ColorQube 8x00 family identifier (not a complete product identifier).
""")
_XcmPidColorQube8700_ObjectIdentity = ObjectIdentity
xcmPidColorQube8700 = _XcmPidColorQube8700_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8700.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8700.setDescription("""\
Xerox ColorQube 8700 model identifier (not a complete product identifier).
""")
_XcmPidColorQube8700S_ObjectIdentity = ObjectIdentity
xcmPidColorQube8700S = _XcmPidColorQube8700S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8700S.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8700S.setDescription("""\
Xerox ColorQube 8700 model and S configuration identifier (not a complete
product identifier).
""")
_XcmPidColorQube8700Sv1_ObjectIdentity = ObjectIdentity
xcmPidColorQube8700Sv1 = _XcmPidColorQube8700Sv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8700Sv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8700Sv1.setDescription("""\
Xerox ColorQube 8700 launch model, S configuration, version 1. A complete
product identifier.
""")
_XcmPidColorQube8700X_ObjectIdentity = ObjectIdentity
xcmPidColorQube8700X = _XcmPidColorQube8700X_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8700X.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8700X.setDescription("""\
Xerox ColorQube 8700 model and X configuration identifier (not a complete
product identifier).
""")
_XcmPidColorQube8700Xv1_ObjectIdentity = ObjectIdentity
xcmPidColorQube8700Xv1 = _XcmPidColorQube8700Xv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 1, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8700Xv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8700Xv1.setDescription("""\
Xerox ColorQube 8700 launch model, X configuration, version 1. A complete
product identifier.
""")
_XcmPidColorQube8700XF_ObjectIdentity = ObjectIdentity
xcmPidColorQube8700XF = _XcmPidColorQube8700XF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 1, 3)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8700XF.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8700XF.setDescription("""\
Xerox ColorQube 8700 model and XF configuration identifier (not a complete
product identifier).
""")
_XcmPidColorQube8700XFv1_ObjectIdentity = ObjectIdentity
xcmPidColorQube8700XFv1 = _XcmPidColorQube8700XFv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 1, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8700XFv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8700XFv1.setDescription("""\
Xerox ColorQube 8700 launch model, XF configuration, version 1. A complete
product identifier.
""")
_XcmPidColorQube8900_ObjectIdentity = ObjectIdentity
xcmPidColorQube8900 = _XcmPidColorQube8900_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8900.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8900.setDescription("""\
Xerox ColorQube 8900 model identifier (not a complete product identifier).
""")
_XcmPidColorQube8900X_ObjectIdentity = ObjectIdentity
xcmPidColorQube8900X = _XcmPidColorQube8900X_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 2, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8900X.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8900X.setDescription("""\
Xerox ColorQube 8900 model and X configuration identifier (not a complete
product identifier).
""")
_XcmPidColorQube8900Xv1_ObjectIdentity = ObjectIdentity
xcmPidColorQube8900Xv1 = _XcmPidColorQube8900Xv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 2, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8900Xv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8900Xv1.setDescription("""\
Xerox ColorQube 8900 launch model, X configuration, version 1. A complete
product identifier.
""")
_XcmPidColorQube8900S_ObjectIdentity = ObjectIdentity
xcmPidColorQube8900S = _XcmPidColorQube8900S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 2, 3)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8900S.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8900S.setDescription("""\
Xerox ColorQube 8900 model and S configuration identifier (not a complete
product identifier).
""")
_XcmPidColorQube8900Sv1_ObjectIdentity = ObjectIdentity
xcmPidColorQube8900Sv1 = _XcmPidColorQube8900Sv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 3, 2, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube8900Sv1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube8900Sv1.setDescription("""\
Xerox ColorQube 8900 launch model, S configuration, version 1. A complete
product identifier.
""")
_XcmPidColorQube9300_ObjectIdentity = ObjectIdentity
xcmPidColorQube9300 = _XcmPidColorQube9300_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9300.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9300.setDescription("""\
Xerox ColorQube 9300 family identifier (not a complete product identifier).
""")
_XcmPidColorQube9301_ObjectIdentity = ObjectIdentity
xcmPidColorQube9301 = _XcmPidColorQube9301_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9301.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9301.setDescription("""\
Xerox ColorQube 9301 model identifier (not a complete product identifier).
""")
_XcmPidColorQube9301C1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9301C1 = _XcmPidColorQube9301C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9301C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9301C1.setDescription("""\
Xerox ColorQube 9301 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9301C1V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9301C1V1 = _XcmPidColorQube9301C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 1, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9301C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9301C1V1.setDescription("""\
Xerox ColorQube 9301 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidColorQube9301C1V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9301C1V2 = _XcmPidColorQube9301C1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 1, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9301C1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9301C1V2.setDescription("""\
Xerox ColorQube 9301 launch model, configuration 1, version 2. A complete
product identifier.
""")
_XcmPidColorQube9302_ObjectIdentity = ObjectIdentity
xcmPidColorQube9302 = _XcmPidColorQube9302_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9302.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9302.setDescription("""\
Xerox ColorQube 9302 model identifier (not a complete product identifier).
""")
_XcmPidColorQube9302C1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9302C1 = _XcmPidColorQube9302C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9302C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9302C1.setDescription("""\
Xerox ColorQube 9302 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9302C1V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9302C1V1 = _XcmPidColorQube9302C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 2, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9302C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9302C1V1.setDescription("""\
Xerox ColorQube 9302 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidColorQube9302C1V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9302C1V2 = _XcmPidColorQube9302C1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 2, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9302C1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9302C1V2.setDescription("""\
Xerox ColorQube 9302 launch model, configuration 1, version 2. A complete
product identifier.
""")
_XcmPidColorQube9303_ObjectIdentity = ObjectIdentity
xcmPidColorQube9303 = _XcmPidColorQube9303_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 3)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9303.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9303.setDescription("""\
Xerox ColorQube 9303 model identifier (not a complete product identifier).
""")
_XcmPidColorQube9303C1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9303C1 = _XcmPidColorQube9303C1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 3, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9303C1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9303C1.setDescription("""\
Xerox ColorQube 9303 model and configuration 1 identifier (not a complete
product identifier).
""")
_XcmPidColorQube9303C1V1_ObjectIdentity = ObjectIdentity
xcmPidColorQube9303C1V1 = _XcmPidColorQube9303C1V1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 3, 1, 1)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9303C1V1.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9303C1V1.setDescription("""\
Xerox ColorQube 9303 launch model, configuration 1, version 1. A complete
product identifier.
""")
_XcmPidColorQube9303C1V2_ObjectIdentity = ObjectIdentity
xcmPidColorQube9303C1V2 = _XcmPidColorQube9303C1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 24, 4, 3, 1, 2)
)
if mibBuilder.loadTexts:
    xcmPidColorQube9303C1V2.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidColorQube9303C1V2.setDescription("""\
Xerox ColorQube 9303 launch model, configuration 1, version 2. A complete
product identifier.
""")
_XcmPidFXSystems_ObjectIdentity = ObjectIdentity
xcmPidFXSystems = _XcmPidFXSystems_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 30)
)
if mibBuilder.loadTexts:
    xcmPidFXSystems.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidFXSystems.setDescription("""\
Fuji Xerox Systems product line identifier (not a complete product identifier).
""")
_XcmPidEPCProductLine_ObjectIdentity = ObjectIdentity
xcmPidEPCProductLine = _XcmPidEPCProductLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 31)
)
if mibBuilder.loadTexts:
    xcmPidEPCProductLine.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidEPCProductLine.setDescription("""\
Xerox Entry-level Production Color product line identifier (not a complete
product identifier).
""")
_XcmPidLPMProductLine_ObjectIdentity = ObjectIdentity
xcmPidLPMProductLine = _XcmPidLPMProductLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 32)
)
if mibBuilder.loadTexts:
    xcmPidLPMProductLine.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidLPMProductLine.setDescription("""\
Xerox Light Production Monochrome product line identifier (not a complete
product identifier).
""")
_XcmPidDigitalPrintingPressProductLine_ObjectIdentity = ObjectIdentity
xcmPidDigitalPrintingPressProductLine = _XcmPidDigitalPrintingPressProductLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 62, 1, 33)
)
if mibBuilder.loadTexts:
    xcmPidDigitalPrintingPressProductLine.setStatus("current")
if mibBuilder.loadTexts:
    xcmPidDigitalPrintingPressProductLine.setDescription("""\
Xerox Digital Printing Press product line identifier (not a complete product
identifier).
""")
_XcmCommsConfigTC_ObjectIdentity = ObjectIdentity
xcmCommsConfigTC = _XcmCommsConfigTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63)
)
if mibBuilder.loadTexts:
    xcmCommsConfigTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigTC.setDescription("""\
Version: 6.001.pub The TC module for textual conventions, enumerated types,
OIDs, and other volatile elements of the companion Communications Config MIB,
which supports active configuration discovery of communications end system
applications, communications intermediate systems, and communications gateways
for network accessible host systems. Copyright (C) 1996-2007 Xerox Corporation.
All Rights Reserved.
""")
_XcmSnmpNetbiosDomain_ObjectIdentity = ObjectIdentity
xcmSnmpNetbiosDomain = _XcmSnmpNetbiosDomain_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 3)
)
if mibBuilder.loadTexts:
    xcmSnmpNetbiosDomain.setStatus("current")
if mibBuilder.loadTexts:
    xcmSnmpNetbiosDomain.setDescription("""\
The SNMP over NetBIOS transport domain. The corresponding transport address is
of type 'XcmSnmpNetbiosAddress'.
""")
_XcmCOSpecialTypes_ObjectIdentity = ObjectIdentity
xcmCOSpecialTypes = _XcmCOSpecialTypes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4)
)
if mibBuilder.loadTexts:
    xcmCOSpecialTypes.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialTypes.setDescription("""\
The root of all special comms option types defined in the Comms Config TC.
""")
_XcmCOSpecialLabel_ObjectIdentity = ObjectIdentity
xcmCOSpecialLabel = _XcmCOSpecialLabel_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 1)
)
if mibBuilder.loadTexts:
    xcmCOSpecialLabel.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialLabel.setDescription("""\
Human-readable name for the following configuration subtree, specified in
'xcmCommsOptionsValueString'. Usage: To label tree vertices (eg, for client
GUI).
""")
_XcmCOSpecialImport_ObjectIdentity = ObjectIdentity
xcmCOSpecialImport = _XcmCOSpecialImport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 2)
)
if mibBuilder.loadTexts:
    xcmCOSpecialImport.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialImport.setDescription("""\
The 'xcmCommsOptionIndex' of an 'imported' configuration subtree, specified in
'xcmCommsOptionValueInteger'. Usage: To import a section of common config from
elsewhere. All comms configuration options in the 'imported' subtree SHALL be
'imported' and THEN any dependent options found via the current
'xcmCommsOptionFamilyIndex' chain SHALL be treated as though they logically
'followed' the 'imported' configuration subtree. Usage: This row SHALL be
logically 're-typed' by inheritance from the first imported row (eg,
'xcmCOOsilanEthernet'), but ONLY for the 'scoping' of dependent options which
are found via the current 'xcmCommsOptionFamilyIndex' chain (eg, a dependent
option for 'xcmCOOsilanEthernetFrameOverride'). Usage: The pointer specified in
'xcmCommsOptionValueInteger' SHALL be used to evaluate the 'imported'
configuration substree and THEN any 'local' options SHALL be evaluated from the
current 'xcmCommsOptionFamilyIndex' chain. Usage: As would normally be true of
any option, this row SHALL NOT affect the 'scoping' of independent options
found via the current 'xcmCommsOptionNextIndex' chain (eg, the next protocol
within a given protocol suite configuration subtree).
""")
_XcmCOSpecialRemark_ObjectIdentity = ObjectIdentity
xcmCOSpecialRemark = _XcmCOSpecialRemark_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 3)
)
if mibBuilder.loadTexts:
    xcmCOSpecialRemark.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialRemark.setDescription("""\
Human-readable remark for the following configuration subtree, specified in
'xcmCommsOptionsValueString'. Usage: To comment tree vertices (eg, for client
GUI).
""")
_XcmCOSpecialAddress_ObjectIdentity = ObjectIdentity
xcmCOSpecialAddress = _XcmCOSpecialAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 4)
)
if mibBuilder.loadTexts:
    xcmCOSpecialAddress.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialAddress.setDescription("""\
Human-readable canonical address for the protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetIP') is specified in
'xcmCommsOptionsValueString' (eg, '19.242.128.21'). Usage: 'Overloads' protocol
types to yield protocol addresses.
""")
_XcmCOSpecialState_ObjectIdentity = ObjectIdentity
xcmCOSpecialState = _XcmCOSpecialState_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 5)
)
if mibBuilder.loadTexts:
    xcmCOSpecialState.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialState.setReference("""\
See: 'XcmCommsMgmtState' in XCMI Comms Engine TC.
""")
if mibBuilder.loadTexts:
    xcmCOSpecialState.setDescription("""\
The current state of the communications protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetIP') is specified in
'xcmCommsOptionsValueInteger' (eg, 'opened(9)'). Usage: 'Overloads' protocol
types to yield protocol entity states.
""")
_XcmCOSpecialConditions_ObjectIdentity = ObjectIdentity
xcmCOSpecialConditions = _XcmCOSpecialConditions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 6)
)
if mibBuilder.loadTexts:
    xcmCOSpecialConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialConditions.setReference("""\
See: 'XcmCommsMgmtConditions' in XCMI Comms Engine TC.
""")
if mibBuilder.loadTexts:
    xcmCOSpecialConditions.setDescription("""\
The current conditions of the communications protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetIP') is specified in
'xcmCommsOptionsValueInteger' (eg, 'openInProgress'). Usage: 'Overloads'
protocol types to yield protocol entity conditions.
""")
_XcmCOSpecialName_ObjectIdentity = ObjectIdentity
xcmCOSpecialName = _XcmCOSpecialName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 7)
)
if mibBuilder.loadTexts:
    xcmCOSpecialName.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialName.setDescription("""\
Human-readable directory name for the directory specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetDNS') is specified in
'xcmCommsOptionsValueString' (eg, 'showstopper.sample.com'). Usage: 'Overloads'
directory types to yield directory names.
""")
_XcmCOSpecialSupportedInteger_ObjectIdentity = ObjectIdentity
xcmCOSpecialSupportedInteger = _XcmCOSpecialSupportedInteger_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 8)
)
if mibBuilder.loadTexts:
    xcmCOSpecialSupportedInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialSupportedInteger.setDescription("""\
Integer-encoded supported value for the option specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOOsilanFrameType') is found in
'xcmCommsOptionsValueInteger' (eg, 'mac(3)'). Usage: 'Overloads' option types
to yield options supported.
""")
_XcmCOSpecialSupportedString_ObjectIdentity = ObjectIdentity
xcmCOSpecialSupportedString = _XcmCOSpecialSupportedString_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 9)
)
if mibBuilder.loadTexts:
    xcmCOSpecialSupportedString.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialSupportedString.setDescription("""\
String-encoded supported value for the option specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOAppletalkNBPType') is found in
'xcmCommsOptionsValueString' (eg, 'LaserPrinter'). Usage: 'Overloads' option
types to yield options supported.
""")
_XcmCOSpecialAcceptAddress_ObjectIdentity = ObjectIdentity
xcmCOSpecialAcceptAddress = _XcmCOSpecialAcceptAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 10)
)
if mibBuilder.loadTexts:
    xcmCOSpecialAcceptAddress.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialAcceptAddress.setDescription("""\
Human-readable 'accept' address for the protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetIP') is specified in
'xcmCommsOptionsValueString' (eg, '19.242.128.21'). Usage: 'Overloads' protocol
types to yield protocol specific addresses of remote entities at this protocol
layer, from which incoming datagrams and/or connections SHALL be accepted.
Usage: Address format is the protocol specific canonical format defined for
this protocol type as defined elsewhere in this XCMI Comms Config TC.
""")
_XcmCOSpecialAcceptSubnet_ObjectIdentity = ObjectIdentity
xcmCOSpecialAcceptSubnet = _XcmCOSpecialAcceptSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 11)
)
if mibBuilder.loadTexts:
    xcmCOSpecialAcceptSubnet.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialAcceptSubnet.setDescription("""\
Human-readable 'accept' subnet for the protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetIP') is specified in
'xcmCommsOptionsValueString' (eg, '19.242.255.255' as might be specified in an
'xcmCOInternetIPSubnetMask' comms option). Usage: 'Overloads' protocol types to
yield protocol specific subnet masks of remote entities at this protocol layer,
from which incoming datagrams and/or connections SHALL be accepted. Usage:
Subnet mask format is the protocol specific canonical format defined for this
protocol type as defined elsewhere in this XCMI Comms Config TC.
""")
_XcmCOSpecialRejectAddress_ObjectIdentity = ObjectIdentity
xcmCOSpecialRejectAddress = _XcmCOSpecialRejectAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 12)
)
if mibBuilder.loadTexts:
    xcmCOSpecialRejectAddress.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialRejectAddress.setDescription("""\
Human-readable 'reject' address for the protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetIP') is specified in
'xcmCommsOptionsValueString' (eg, '19.242.128.21'). Usage: 'Overloads' protocol
types to yield protocol specific addresses of remote entities at this protocol
layer, from which incoming datagrams and/or connections SHALL be rejected.
Usage: Address format is the protocol specific canonical format defined for
this protocol type as defined elsewhere in this XCMI Comms Config TC.
""")
_XcmCOSpecialRejectSubnet_ObjectIdentity = ObjectIdentity
xcmCOSpecialRejectSubnet = _XcmCOSpecialRejectSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 13)
)
if mibBuilder.loadTexts:
    xcmCOSpecialRejectSubnet.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialRejectSubnet.setDescription("""\
Human-readable 'reject' subnet for the protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetIP') is specified in
'xcmCommsOptionsValueString' (eg, '19.242.255.255' as might be specified in an
'xcmCOInternetIPSubnetMask' comms option). Usage: 'Overloads' protocol types to
yield protocol specific subnet masks of remote entities at this protocol layer,
from which incoming datagrams and/or connections SHALL be rejected. Usage:
Subnet mask format is the protocol specific canonical format defined for this
protocol type as defined elsewhere in this XCMI Comms Config TC.
""")
_XcmCOSpecialMaxRequestRetries_ObjectIdentity = ObjectIdentity
xcmCOSpecialMaxRequestRetries = _XcmCOSpecialMaxRequestRetries_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 14)
)
if mibBuilder.loadTexts:
    xcmCOSpecialMaxRequestRetries.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialMaxRequestRetries.setDescription("""\
The maximum request retries for the communications protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetDNS') is specified in
'xcmCommsOptionsValueInteger' (eg, '4' retries). Usage: A value of zero
indicates that the request SHALL ONLY be attempted once (no retries) before
being considered a failure. Usage: 'Overloads' protocol types to yield protocol
request retry limits.
""")
_XcmCOSpecialRequestTimeout_ObjectIdentity = ObjectIdentity
xcmCOSpecialRequestTimeout = _XcmCOSpecialRequestTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 15)
)
if mibBuilder.loadTexts:
    xcmCOSpecialRequestTimeout.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialRequestTimeout.setDescription("""\
The request timeout for the communications protocol specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetDNS') is specified in
'xcmCommsOptionsValueInteger' (eg, '3' seconds). Usage: A value of zero
indicates that the request timeout is a local system default (and NOT
reported/configured). Usage: 'Overloads' protocol types to yield protocol
request timeout limits.
""")
_XcmCOSpecialSecurity_ObjectIdentity = ObjectIdentity
xcmCOSpecialSecurity = _XcmCOSpecialSecurity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 4, 16)
)
if mibBuilder.loadTexts:
    xcmCOSpecialSecurity.setStatus("current")
if mibBuilder.loadTexts:
    xcmCOSpecialSecurity.setDescription("""\
The security protocol (datalink, network, transport layer, etc) specified in
'xcmCommsOptionValueOID' (eg, 'xcmCOInternetTLS') is enabled and disabled by
'xcmCommsOptionsValueInteger'. Usage: 'Overloads' protocol types to configure
security for datalink, network, transport, and application layer protocols.
""")
_XcmSnmpIPHostnameDomain_ObjectIdentity = ObjectIdentity
xcmSnmpIPHostnameDomain = _XcmSnmpIPHostnameDomain_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 5)
)
if mibBuilder.loadTexts:
    xcmSnmpIPHostnameDomain.setStatus("current")
if mibBuilder.loadTexts:
    xcmSnmpIPHostnameDomain.setDescription("""\
The transport domain for SNMP over UDP when using host name instead of IP
address. The corresponding transport address is of type
'XcmSnmpIPHostnameAddress'.
""")
_XcmCOOsilanSuite_ObjectIdentity = ObjectIdentity
xcmCOOsilanSuite = _XcmCOOsilanSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11)
)
_XcmCOOsilanPhysicals_ObjectIdentity = ObjectIdentity
xcmCOOsilanPhysicals = _XcmCOOsilanPhysicals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100)
)
_XcmCOOsilanConnectorType_ObjectIdentity = ObjectIdentity
xcmCOOsilanConnectorType = _XcmCOOsilanConnectorType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 1)
)
_XcmCOOsilanConnectorOverride_ObjectIdentity = ObjectIdentity
xcmCOOsilanConnectorOverride = _XcmCOOsilanConnectorOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 1, 1)
)
_XcmCOOsilanConnectorDetected_ObjectIdentity = ObjectIdentity
xcmCOOsilanConnectorDetected = _XcmCOOsilanConnectorDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 1, 2)
)
_XcmCOOsilanConnectorAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsilanConnectorAdaptive = _XcmCOOsilanConnectorAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 1, 3)
)
_XcmCOOsilanSignalType_ObjectIdentity = ObjectIdentity
xcmCOOsilanSignalType = _XcmCOOsilanSignalType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 2)
)
_XcmCOOsilanSignalOverride_ObjectIdentity = ObjectIdentity
xcmCOOsilanSignalOverride = _XcmCOOsilanSignalOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 2, 1)
)
_XcmCOOsilanSignalDetected_ObjectIdentity = ObjectIdentity
xcmCOOsilanSignalDetected = _XcmCOOsilanSignalDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 2, 2)
)
_XcmCOOsilanSignalAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsilanSignalAdaptive = _XcmCOOsilanSignalAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 2, 3)
)
_XcmCOOsilanSignalSupport_ObjectIdentity = ObjectIdentity
xcmCOOsilanSignalSupport = _XcmCOOsilanSignalSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 2, 4)
)
_XcmCOOsilanSignalCapability_ObjectIdentity = ObjectIdentity
xcmCOOsilanSignalCapability = _XcmCOOsilanSignalCapability_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 2, 5)
)
_XcmCOOsilanCableType_ObjectIdentity = ObjectIdentity
xcmCOOsilanCableType = _XcmCOOsilanCableType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 3)
)
_XcmCOOsilanCableOverride_ObjectIdentity = ObjectIdentity
xcmCOOsilanCableOverride = _XcmCOOsilanCableOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 3, 1)
)
_XcmCOOsilanCableDetected_ObjectIdentity = ObjectIdentity
xcmCOOsilanCableDetected = _XcmCOOsilanCableDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 3, 2)
)
_XcmCOOsilanCableAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsilanCableAdaptive = _XcmCOOsilanCableAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 3, 3)
)
_XcmCOOsilanCableSupport_ObjectIdentity = ObjectIdentity
xcmCOOsilanCableSupport = _XcmCOOsilanCableSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1100, 3, 4)
)
_XcmCOOsilanDatalinks_ObjectIdentity = ObjectIdentity
xcmCOOsilanDatalinks = _XcmCOOsilanDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1200)
)
_XcmCOOsilanFrameType_ObjectIdentity = ObjectIdentity
xcmCOOsilanFrameType = _XcmCOOsilanFrameType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1201)
)
_XcmCOOsilanFrameOverride_ObjectIdentity = ObjectIdentity
xcmCOOsilanFrameOverride = _XcmCOOsilanFrameOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1201, 1)
)
_XcmCOOsilanFrameDetected_ObjectIdentity = ObjectIdentity
xcmCOOsilanFrameDetected = _XcmCOOsilanFrameDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1201, 2)
)
_XcmCOOsilanFrameAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsilanFrameAdaptive = _XcmCOOsilanFrameAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1201, 3)
)
_XcmCOOsilanEthernet_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernet = _XcmCOOsilanEthernet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203)
)
_XcmCOOsilanEthernetType_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetType = _XcmCOOsilanEthernetType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 1)
)
_XcmCOOsilanEthernetDevice_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetDevice = _XcmCOOsilanEthernetDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 2)
)
_XcmCOOsilanEthernetDeviceName_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetDeviceName = _XcmCOOsilanEthernetDeviceName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 2, 1)
)
_XcmCOOsilanEthernetSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetSpeed = _XcmCOOsilanEthernetSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 3)
)
_XcmCOOsilanEthernetSpeedOverride_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetSpeedOverride = _XcmCOOsilanEthernetSpeedOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 3, 1)
)
_XcmCOOsilanEthernetSpeedDetected_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetSpeedDetected = _XcmCOOsilanEthernetSpeedDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 3, 2)
)
_XcmCOOsilanEthernetSpeedAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetSpeedAdaptive = _XcmCOOsilanEthernetSpeedAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 3, 3)
)
_XcmCOOsilanEthernetSpeedSupport_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetSpeedSupport = _XcmCOOsilanEthernetSpeedSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 3, 4)
)
_XcmCOOsilanEthernetMinSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetMinSpeed = _XcmCOOsilanEthernetMinSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 3, 5)
)
_XcmCOOsilanEthernetMaxSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetMaxSpeed = _XcmCOOsilanEthernetMaxSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 3, 6)
)
_XcmCOOsilanEthernetMaxFrameSize_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetMaxFrameSize = _XcmCOOsilanEthernetMaxFrameSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 4)
)
_XcmCOOsilanEthernetInterface_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetInterface = _XcmCOOsilanEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 5)
)
_XcmCOOsilanEthernetMACAddress_ObjectIdentity = ObjectIdentity
xcmCOOsilanEthernetMACAddress = _XcmCOOsilanEthernetMACAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1203, 6)
)
_XcmCOOsilanTokenBus_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenBus = _XcmCOOsilanTokenBus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1204)
)
_XcmCOOsilanTokenRing_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRing = _XcmCOOsilanTokenRing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205)
)
_XcmCOOsilanTokenRingType_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingType = _XcmCOOsilanTokenRingType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 1)
)
_XcmCOOsilanTokenRingDevice_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingDevice = _XcmCOOsilanTokenRingDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 2)
)
_XcmCOOsilanTokenRingDeviceName_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingDeviceName = _XcmCOOsilanTokenRingDeviceName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 2, 1)
)
_XcmCOOsilanTokenRingSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSpeed = _XcmCOOsilanTokenRingSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 3)
)
_XcmCOOsilanTokenRingSpeedOverride_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSpeedOverride = _XcmCOOsilanTokenRingSpeedOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 3, 1)
)
_XcmCOOsilanTokenRingSpeedDetected_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSpeedDetected = _XcmCOOsilanTokenRingSpeedDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 3, 2)
)
_XcmCOOsilanTokenRingSpeedAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSpeedAdaptive = _XcmCOOsilanTokenRingSpeedAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 3, 3)
)
_XcmCOOsilanTokenRingSpeedSupport_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSpeedSupport = _XcmCOOsilanTokenRingSpeedSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 3, 4)
)
_XcmCOOsilanTokenRingMinSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingMinSpeed = _XcmCOOsilanTokenRingMinSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 3, 5)
)
_XcmCOOsilanTokenRingMaxSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingMaxSpeed = _XcmCOOsilanTokenRingMaxSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 3, 6)
)
_XcmCOOsilanTokenRingMaxFrameSize_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingMaxFrameSize = _XcmCOOsilanTokenRingMaxFrameSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 4)
)
_XcmCOOsilanTokenRingInterface_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingInterface = _XcmCOOsilanTokenRingInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 5)
)
_XcmCOOsilanTokenRingMACAddress_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingMACAddress = _XcmCOOsilanTokenRingMACAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 6)
)
_XcmCOOsilanTokenRingSSR_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSSR = _XcmCOOsilanTokenRingSSR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 11)
)
_XcmCOOsilanTokenRingSSRAllRoute_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSSRAllRoute = _XcmCOOsilanTokenRingSSRAllRoute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 12)
)
_XcmCOOsilanTokenRingSSRSingleRR_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSSRSingleRR = _XcmCOOsilanTokenRingSSRSingleRR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 13)
)
_XcmCOOsilanTokenRingSSRAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingSSRAdaptive = _XcmCOOsilanTokenRingSSRAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 14)
)
_XcmCOOsilanTokenRingMACOverride_ObjectIdentity = ObjectIdentity
xcmCOOsilanTokenRingMACOverride = _XcmCOOsilanTokenRingMACOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1205, 21)
)
_XcmCOOsilanFDDI_ObjectIdentity = ObjectIdentity
xcmCOOsilanFDDI = _XcmCOOsilanFDDI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 11, 1207)
)
_XcmCOOsiwanSuite_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSuite = _XcmCOOsiwanSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13)
)
_XcmCOOsiwanPhysicals_ObjectIdentity = ObjectIdentity
xcmCOOsiwanPhysicals = _XcmCOOsiwanPhysicals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100)
)
_XcmCOOsiwanConnectorType_ObjectIdentity = ObjectIdentity
xcmCOOsiwanConnectorType = _XcmCOOsiwanConnectorType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 1)
)
_XcmCOOsiwanConnectorOverride_ObjectIdentity = ObjectIdentity
xcmCOOsiwanConnectorOverride = _XcmCOOsiwanConnectorOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 1, 1)
)
_XcmCOOsiwanConnectorDetected_ObjectIdentity = ObjectIdentity
xcmCOOsiwanConnectorDetected = _XcmCOOsiwanConnectorDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 1, 2)
)
_XcmCOOsiwanConnectorAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsiwanConnectorAdaptive = _XcmCOOsiwanConnectorAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 1, 3)
)
_XcmCOOsiwanSignalType_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSignalType = _XcmCOOsiwanSignalType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 2)
)
_XcmCOOsiwanSignalOverride_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSignalOverride = _XcmCOOsiwanSignalOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 2, 1)
)
_XcmCOOsiwanSignalDetected_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSignalDetected = _XcmCOOsiwanSignalDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 2, 2)
)
_XcmCOOsiwanSignalAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSignalAdaptive = _XcmCOOsiwanSignalAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 2, 3)
)
_XcmCOOsiwanSignalSupport_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSignalSupport = _XcmCOOsiwanSignalSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 2, 4)
)
_XcmCOOsiwanLineNumber_ObjectIdentity = ObjectIdentity
xcmCOOsiwanLineNumber = _XcmCOOsiwanLineNumber_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 4)
)
_XcmCOOsiwanSendManual_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSendManual = _XcmCOOsiwanSendManual_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 5)
)
_XcmCOOsiwanReceiveManual_ObjectIdentity = ObjectIdentity
xcmCOOsiwanReceiveManual = _XcmCOOsiwanReceiveManual_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 6)
)
_XcmCOOsiwanRingsBeforeAnswer_ObjectIdentity = ObjectIdentity
xcmCOOsiwanRingsBeforeAnswer = _XcmCOOsiwanRingsBeforeAnswer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 7)
)
_XcmCOOsiwanErrorCorrection_ObjectIdentity = ObjectIdentity
xcmCOOsiwanErrorCorrection = _XcmCOOsiwanErrorCorrection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 8)
)
_XcmCOOsiwanDirection_ObjectIdentity = ObjectIdentity
xcmCOOsiwanDirection = _XcmCOOsiwanDirection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 9)
)
_XcmCOOsiwanSendStartTime_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSendStartTime = _XcmCOOsiwanSendStartTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 10)
)
_XcmCOOsiwanSendEndTime_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSendEndTime = _XcmCOOsiwanSendEndTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 11)
)
_XcmCOOsiwanReceiveStartTime_ObjectIdentity = ObjectIdentity
xcmCOOsiwanReceiveStartTime = _XcmCOOsiwanReceiveStartTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 12)
)
_XcmCOOsiwanReceiveEndTime_ObjectIdentity = ObjectIdentity
xcmCOOsiwanReceiveEndTime = _XcmCOOsiwanReceiveEndTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 13)
)
_XcmCOOsiwanRingerVolume_ObjectIdentity = ObjectIdentity
xcmCOOsiwanRingerVolume = _XcmCOOsiwanRingerVolume_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 20)
)
_XcmCOOsiwanMonitorVolume_ObjectIdentity = ObjectIdentity
xcmCOOsiwanMonitorVolume = _XcmCOOsiwanMonitorVolume_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 21)
)
_XcmCOOsiwanAlarmVolume_ObjectIdentity = ObjectIdentity
xcmCOOsiwanAlarmVolume = _XcmCOOsiwanAlarmVolume_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 22)
)
_XcmCOOsiwanKeyboardVolume_ObjectIdentity = ObjectIdentity
xcmCOOsiwanKeyboardVolume = _XcmCOOsiwanKeyboardVolume_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1100, 23)
)
_XcmCOOsiwanDatalinks_ObjectIdentity = ObjectIdentity
xcmCOOsiwanDatalinks = _XcmCOOsiwanDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1200)
)
_XcmCOOsiwanFax_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFax = _XcmCOOsiwanFax_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241)
)
_XcmCOOsiwanFaxAddress_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxAddress = _XcmCOOsiwanFaxAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 1)
)
_XcmCOOsiwanFaxDevice_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxDevice = _XcmCOOsiwanFaxDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 2)
)
_XcmCOOsiwanFaxDeviceName_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxDeviceName = _XcmCOOsiwanFaxDeviceName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 2, 1)
)
_XcmCOOsiwanFaxSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSpeed = _XcmCOOsiwanFaxSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 3)
)
_XcmCOOsiwanFaxSpeedOverride_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSpeedOverride = _XcmCOOsiwanFaxSpeedOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 3, 1)
)
_XcmCOOsiwanFaxSpeedDetected_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSpeedDetected = _XcmCOOsiwanFaxSpeedDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 3, 2)
)
_XcmCOOsiwanFaxSpeedAdaptive_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSpeedAdaptive = _XcmCOOsiwanFaxSpeedAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 3, 3)
)
_XcmCOOsiwanFaxSpeedSupport_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSpeedSupport = _XcmCOOsiwanFaxSpeedSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 3, 4)
)
_XcmCOOsiwanFaxMinSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxMinSpeed = _XcmCOOsiwanFaxMinSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 3, 5)
)
_XcmCOOsiwanFaxMaxSpeed_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxMaxSpeed = _XcmCOOsiwanFaxMaxSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 3, 6)
)
_XcmCOOsiwanFaxInterface_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxInterface = _XcmCOOsiwanFaxInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 5)
)
_XcmCOOsiwanFaxAcceptAddress_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxAcceptAddress = _XcmCOOsiwanFaxAcceptAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 11)
)
_XcmCOOsiwanFaxRejectAddress_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxRejectAddress = _XcmCOOsiwanFaxRejectAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 12)
)
_XcmCOOsiwanFaxSendCoverSheet_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSendCoverSheet = _XcmCOOsiwanFaxSendCoverSheet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 20)
)
_XcmCOOsiwanFaxSendHeader_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSendHeader = _XcmCOOsiwanFaxSendHeader_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 21)
)
_XcmCOOsiwanFaxSendManual_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSendManual = _XcmCOOsiwanFaxSendManual_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 22)
)
_XcmCOOsiwanFaxSendSecurity_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSendSecurity = _XcmCOOsiwanFaxSendSecurity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 23)
)
_XcmCOOsiwanFaxMaxRetries_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxMaxRetries = _XcmCOOsiwanFaxMaxRetries_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 24)
)
_XcmCOOsiwanFaxRetryInterval_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxRetryInterval = _XcmCOOsiwanFaxRetryInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 25)
)
_XcmCOOsiwanFaxSendStoreTime_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxSendStoreTime = _XcmCOOsiwanFaxSendStoreTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 26)
)
_XcmCOOsiwanFaxMaxOriginalLength_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxMaxOriginalLength = _XcmCOOsiwanFaxMaxOriginalLength_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 27)
)
_XcmCOOsiwanFaxReceiveCoverSheet_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxReceiveCoverSheet = _XcmCOOsiwanFaxReceiveCoverSheet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 30)
)
_XcmCOOsiwanFaxReceiveFooter_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxReceiveFooter = _XcmCOOsiwanFaxReceiveFooter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 31)
)
_XcmCOOsiwanFaxReceiveToMemory_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxReceiveToMemory = _XcmCOOsiwanFaxReceiveToMemory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 32)
)
_XcmCOOsiwanFaxReceiveManual_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxReceiveManual = _XcmCOOsiwanFaxReceiveManual_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 33)
)
_XcmCOOsiwanFaxReceiveSecurity_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxReceiveSecurity = _XcmCOOsiwanFaxReceiveSecurity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 34)
)
_XcmCOOsiwanFaxReceiveAutoReduce_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxReceiveAutoReduce = _XcmCOOsiwanFaxReceiveAutoReduce_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 35)
)
_XcmCOOsiwanFaxReceiveOverflow_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxReceiveOverflow = _XcmCOOsiwanFaxReceiveOverflow_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 36)
)
_XcmCOOsiwanFaxReceiveCollate_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxReceiveCollate = _XcmCOOsiwanFaxReceiveCollate_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 37)
)
_XcmCOOsiwanFaxG3_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxG3 = _XcmCOOsiwanFaxG3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 40)
)
_XcmCOOsiwanFaxG4_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxG4 = _XcmCOOsiwanFaxG4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 41)
)
_XcmCOOsiwanFaxLineSwitching_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxLineSwitching = _XcmCOOsiwanFaxLineSwitching_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 42)
)
_XcmCOOsiwanFaxMaxSpeedDial_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFaxMaxSpeedDial = _XcmCOOsiwanFaxMaxSpeedDial_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1241, 43)
)
_XcmCOOsiwanPSTN_ObjectIdentity = ObjectIdentity
xcmCOOsiwanPSTN = _XcmCOOsiwanPSTN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1251)
)
_XcmCOOsiwanPSTNAddress_ObjectIdentity = ObjectIdentity
xcmCOOsiwanPSTNAddress = _XcmCOOsiwanPSTNAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1251, 1)
)
_XcmCOOsiwanISDN_ObjectIdentity = ObjectIdentity
xcmCOOsiwanISDN = _XcmCOOsiwanISDN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1261)
)
_XcmCOOsiwanISDNAddress_ObjectIdentity = ObjectIdentity
xcmCOOsiwanISDNAddress = _XcmCOOsiwanISDNAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1261, 1)
)
_XcmCOOsiwanTransports_ObjectIdentity = ObjectIdentity
xcmCOOsiwanTransports = _XcmCOOsiwanTransports_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1400)
)
_XcmCOOsiwanApplications_ObjectIdentity = ObjectIdentity
xcmCOOsiwanApplications = _XcmCOOsiwanApplications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1700)
)
_XcmCOOsiwanDPA_ObjectIdentity = ObjectIdentity
xcmCOOsiwanDPA = _XcmCOOsiwanDPA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1713)
)
_XcmCOOsiwanFTAM_ObjectIdentity = ObjectIdentity
xcmCOOsiwanFTAM = _XcmCOOsiwanFTAM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1714)
)
_XcmCOOsiwanVT_ObjectIdentity = ObjectIdentity
xcmCOOsiwanVT = _XcmCOOsiwanVT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1716)
)
_XcmCOOsiwanMHS_ObjectIdentity = ObjectIdentity
xcmCOOsiwanMHS = _XcmCOOsiwanMHS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1740)
)
_XcmCOOsiwanDS_ObjectIdentity = ObjectIdentity
xcmCOOsiwanDS = _XcmCOOsiwanDS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1750)
)
_XcmCOOsiwanDAP_ObjectIdentity = ObjectIdentity
xcmCOOsiwanDAP = _XcmCOOsiwanDAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1751)
)
_XcmCOOsiwanDSP_ObjectIdentity = ObjectIdentity
xcmCOOsiwanDSP = _XcmCOOsiwanDSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1752)
)
_XcmCOOsiwanMgmt_ObjectIdentity = ObjectIdentity
xcmCOOsiwanMgmt = _XcmCOOsiwanMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1770)
)
_XcmCOOsiwanCMIP_ObjectIdentity = ObjectIdentity
xcmCOOsiwanCMIP = _XcmCOOsiwanCMIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1771)
)
_XcmCOOsiwanSecurity_ObjectIdentity = ObjectIdentity
xcmCOOsiwanSecurity = _XcmCOOsiwanSecurity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 13, 1780)
)
_XcmCOInternetSuite_ObjectIdentity = ObjectIdentity
xcmCOInternetSuite = _XcmCOInternetSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14)
)
_XcmCOInternetDatalinks_ObjectIdentity = ObjectIdentity
xcmCOInternetDatalinks = _XcmCOInternetDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1200)
)
_XcmCOInternetSLIP_ObjectIdentity = ObjectIdentity
xcmCOInternetSLIP = _XcmCOInternetSLIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1201)
)
_XcmCOInternetPPP_ObjectIdentity = ObjectIdentity
xcmCOInternetPPP = _XcmCOInternetPPP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1202)
)
_XcmCOInternetIP_ObjectIdentity = ObjectIdentity
xcmCOInternetIP = _XcmCOInternetIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301)
)
_XcmCOInternetIPAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPAddress = _XcmCOInternetIPAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 1)
)
_XcmCOInternetIPSocketAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPSocketAddress = _XcmCOInternetIPSocketAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 1, 1)
)
_XcmCOInternetIPSubnetMask_ObjectIdentity = ObjectIdentity
xcmCOInternetIPSubnetMask = _XcmCOInternetIPSubnetMask_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 2)
)
_XcmCOInternetIPAddressViaRARP_ObjectIdentity = ObjectIdentity
xcmCOInternetIPAddressViaRARP = _XcmCOInternetIPAddressViaRARP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 3)
)
_XcmCOInternetIPDefaultGateway_ObjectIdentity = ObjectIdentity
xcmCOInternetIPDefaultGateway = _XcmCOInternetIPDefaultGateway_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 4)
)
_XcmCOInternetIPAddressSource_ObjectIdentity = ObjectIdentity
xcmCOInternetIPAddressSource = _XcmCOInternetIPAddressSource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 5)
)
_XcmCOInternetIPDatalinks_ObjectIdentity = ObjectIdentity
xcmCOInternetIPDatalinks = _XcmCOInternetIPDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 12)
)
_XcmCOInternetIPHostName_ObjectIdentity = ObjectIdentity
xcmCOInternetIPHostName = _XcmCOInternetIPHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 50)
)
_XcmCOInternetIPAutoIPAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPAutoIPAddress = _XcmCOInternetIPAutoIPAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 51)
)
_XcmCOInternetIPAutoEnable_ObjectIdentity = ObjectIdentity
xcmCOInternetIPAutoEnable = _XcmCOInternetIPAutoEnable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 60)
)
_XcmCOInternetIPBcastCache_ObjectIdentity = ObjectIdentity
xcmCOInternetIPBcastCache = _XcmCOInternetIPBcastCache_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 61)
)
_XcmCOInternetIPBCacheEnabled_ObjectIdentity = ObjectIdentity
xcmCOInternetIPBCacheEnabled = _XcmCOInternetIPBCacheEnabled_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 61, 1)
)
_XcmCOInternetIPBCacheAddress1_ObjectIdentity = ObjectIdentity
xcmCOInternetIPBCacheAddress1 = _XcmCOInternetIPBCacheAddress1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 61, 2)
)
_XcmCOInternetIPBCacheAddress2_ObjectIdentity = ObjectIdentity
xcmCOInternetIPBCacheAddress2 = _XcmCOInternetIPBCacheAddress2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 61, 3)
)
_XcmCOInternetIPBCacheAddress3_ObjectIdentity = ObjectIdentity
xcmCOInternetIPBCacheAddress3 = _XcmCOInternetIPBCacheAddress3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 61, 4)
)
_XcmCOInternetIPBCacheAddress4_ObjectIdentity = ObjectIdentity
xcmCOInternetIPBCacheAddress4 = _XcmCOInternetIPBCacheAddress4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 61, 5)
)
_XcmCOInternetIPInstall_ObjectIdentity = ObjectIdentity
xcmCOInternetIPInstall = _XcmCOInternetIPInstall_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 62)
)
_XcmCOInternetIPInstallSelect_ObjectIdentity = ObjectIdentity
xcmCOInternetIPInstallSelect = _XcmCOInternetIPInstallSelect_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 62, 1)
)
_XcmCOInternetIPAllSubnetsLocal_ObjectIdentity = ObjectIdentity
xcmCOInternetIPAllSubnetsLocal = _XcmCOInternetIPAllSubnetsLocal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 62, 2)
)
_XcmCOInternetIPSec_ObjectIdentity = ObjectIdentity
xcmCOInternetIPSec = _XcmCOInternetIPSec_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1301, 70)
)
_XcmCOInternetICMP_ObjectIdentity = ObjectIdentity
xcmCOInternetICMP = _XcmCOInternetICMP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1302)
)
_XcmCOInternetARP_ObjectIdentity = ObjectIdentity
xcmCOInternetARP = _XcmCOInternetARP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1303)
)
_XcmCOInternetDHCP_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCP = _XcmCOInternetDHCP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304)
)
_XcmCOInternetDHCPClassID_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCPClassID = _XcmCOInternetDHCPClassID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 1)
)
_XcmCOInternetDHCPLeaseTime_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCPLeaseTime = _XcmCOInternetDHCPLeaseTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 2)
)
_XcmCOInternetDHCPRequestTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCPRequestTimeout = _XcmCOInternetDHCPRequestTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 3)
)
_XcmCOInternetDHCPServer_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCPServer = _XcmCOInternetDHCPServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 4)
)
_XcmCOInternetDHCPOptionGet_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCPOptionGet = _XcmCOInternetDHCPOptionGet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10)
)
_XcmCODHCPGetSubnetMask_ObjectIdentity = ObjectIdentity
xcmCODHCPGetSubnetMask = _XcmCODHCPGetSubnetMask_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 1)
)
_XcmCODHCPGetSubnetTimeOffset_ObjectIdentity = ObjectIdentity
xcmCODHCPGetSubnetTimeOffset = _XcmCODHCPGetSubnetTimeOffset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 2)
)
_XcmCODHCPGetRouter_ObjectIdentity = ObjectIdentity
xcmCODHCPGetRouter = _XcmCODHCPGetRouter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 3)
)
_XcmCODHCPGetTPTimeServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetTPTimeServer = _XcmCODHCPGetTPTimeServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 4)
)
_XcmCODHCPGetIEN116NameServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetIEN116NameServer = _XcmCODHCPGetIEN116NameServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 5)
)
_XcmCODHCPGetDNSNameServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetDNSNameServer = _XcmCODHCPGetDNSNameServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 6)
)
_XcmCODHCPGetLogServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetLogServer = _XcmCODHCPGetLogServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 7)
)
_XcmCODHCPGetCookieServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetCookieServer = _XcmCODHCPGetCookieServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 8)
)
_XcmCODHCPGetLPRServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetLPRServer = _XcmCODHCPGetLPRServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 9)
)
_XcmCODHCPGetImpressServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetImpressServer = _XcmCODHCPGetImpressServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 10)
)
_XcmCODHCPGetResourceLocServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetResourceLocServer = _XcmCODHCPGetResourceLocServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 11)
)
_XcmCODHCPGetHostName_ObjectIdentity = ObjectIdentity
xcmCODHCPGetHostName = _XcmCODHCPGetHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 12)
)
_XcmCODHCPGetBootFileSize_ObjectIdentity = ObjectIdentity
xcmCODHCPGetBootFileSize = _XcmCODHCPGetBootFileSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 13)
)
_XcmCODHCPGetMeritDumpFile_ObjectIdentity = ObjectIdentity
xcmCODHCPGetMeritDumpFile = _XcmCODHCPGetMeritDumpFile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 14)
)
_XcmCODHCPGetDNSDomainName_ObjectIdentity = ObjectIdentity
xcmCODHCPGetDNSDomainName = _XcmCODHCPGetDNSDomainName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 15)
)
_XcmCODHCPGetSwapServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetSwapServer = _XcmCODHCPGetSwapServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 16)
)
_XcmCODHCPGetRootPath_ObjectIdentity = ObjectIdentity
xcmCODHCPGetRootPath = _XcmCODHCPGetRootPath_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 17)
)
_XcmCODHCPGetExtensionsPath_ObjectIdentity = ObjectIdentity
xcmCODHCPGetExtensionsPath = _XcmCODHCPGetExtensionsPath_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 18)
)
_XcmCODHCPGetIPForwarding_ObjectIdentity = ObjectIdentity
xcmCODHCPGetIPForwarding = _XcmCODHCPGetIPForwarding_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 19)
)
_XcmCODHCPGetNLSourceRouting_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNLSourceRouting = _XcmCODHCPGetNLSourceRouting_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 20)
)
_XcmCODHCPGetNLPolicyFilter_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNLPolicyFilter = _XcmCODHCPGetNLPolicyFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 21)
)
_XcmCODHCPGetMaxIPDatagramSize_ObjectIdentity = ObjectIdentity
xcmCODHCPGetMaxIPDatagramSize = _XcmCODHCPGetMaxIPDatagramSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 22)
)
_XcmCODHCPGetIPDefaultTTL_ObjectIdentity = ObjectIdentity
xcmCODHCPGetIPDefaultTTL = _XcmCODHCPGetIPDefaultTTL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 23)
)
_XcmCODHCPGetPathMTUAgeTimeout_ObjectIdentity = ObjectIdentity
xcmCODHCPGetPathMTUAgeTimeout = _XcmCODHCPGetPathMTUAgeTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 24)
)
_XcmCODHCPGetPathMTUPlateau_ObjectIdentity = ObjectIdentity
xcmCODHCPGetPathMTUPlateau = _XcmCODHCPGetPathMTUPlateau_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 25)
)
_XcmCODHCPGetInterfaceMTUSize_ObjectIdentity = ObjectIdentity
xcmCODHCPGetInterfaceMTUSize = _XcmCODHCPGetInterfaceMTUSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 26)
)
_XcmCODHCPGetAllSubnetsLocal_ObjectIdentity = ObjectIdentity
xcmCODHCPGetAllSubnetsLocal = _XcmCODHCPGetAllSubnetsLocal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 27)
)
_XcmCODHCPGetBroadcastAddress_ObjectIdentity = ObjectIdentity
xcmCODHCPGetBroadcastAddress = _XcmCODHCPGetBroadcastAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 28)
)
_XcmCODHCPGetMaskDiscovery_ObjectIdentity = ObjectIdentity
xcmCODHCPGetMaskDiscovery = _XcmCODHCPGetMaskDiscovery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 29)
)
_XcmCODHCPGetMaskSupplier_ObjectIdentity = ObjectIdentity
xcmCODHCPGetMaskSupplier = _XcmCODHCPGetMaskSupplier_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 30)
)
_XcmCODHCPGetRouterDiscovery_ObjectIdentity = ObjectIdentity
xcmCODHCPGetRouterDiscovery = _XcmCODHCPGetRouterDiscovery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 31)
)
_XcmCODHCPGetRouterSolAddress_ObjectIdentity = ObjectIdentity
xcmCODHCPGetRouterSolAddress = _XcmCODHCPGetRouterSolAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 32)
)
_XcmCODHCPGetStaticRoute_ObjectIdentity = ObjectIdentity
xcmCODHCPGetStaticRoute = _XcmCODHCPGetStaticRoute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 33)
)
_XcmCODHCPGetARPTrailer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetARPTrailer = _XcmCODHCPGetARPTrailer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 34)
)
_XcmCODHCPGetARPCacheTimeout_ObjectIdentity = ObjectIdentity
xcmCODHCPGetARPCacheTimeout = _XcmCODHCPGetARPCacheTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 35)
)
_XcmCODHCPGetEthernetFrameIEEE_ObjectIdentity = ObjectIdentity
xcmCODHCPGetEthernetFrameIEEE = _XcmCODHCPGetEthernetFrameIEEE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 36)
)
_XcmCODHCPGetTCPDefaultTTL_ObjectIdentity = ObjectIdentity
xcmCODHCPGetTCPDefaultTTL = _XcmCODHCPGetTCPDefaultTTL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 37)
)
_XcmCODHCPGetTCPKeepInterval_ObjectIdentity = ObjectIdentity
xcmCODHCPGetTCPKeepInterval = _XcmCODHCPGetTCPKeepInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 38)
)
_XcmCODHCPGetTCPKeepGarbage_ObjectIdentity = ObjectIdentity
xcmCODHCPGetTCPKeepGarbage = _XcmCODHCPGetTCPKeepGarbage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 39)
)
_XcmCODHCPGetNISDomainName_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNISDomainName = _XcmCODHCPGetNISDomainName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 40)
)
_XcmCODHCPGetNISNameServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNISNameServer = _XcmCODHCPGetNISNameServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 41)
)
_XcmCODHCPGetNTPTimeServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNTPTimeServer = _XcmCODHCPGetNTPTimeServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 42)
)
_XcmCODHCPGetVendorSpecific_ObjectIdentity = ObjectIdentity
xcmCODHCPGetVendorSpecific = _XcmCODHCPGetVendorSpecific_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 43)
)
_XcmCODHCPGetNetbiosNameServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNetbiosNameServer = _XcmCODHCPGetNetbiosNameServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 44)
)
_XcmCODHCPGetNetbiosDistServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNetbiosDistServer = _XcmCODHCPGetNetbiosDistServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 45)
)
_XcmCODHCPGetNetbiosNodeType_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNetbiosNodeType = _XcmCODHCPGetNetbiosNodeType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 46)
)
_XcmCODHCPGetNetbiosScope_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNetbiosScope = _XcmCODHCPGetNetbiosScope_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 47)
)
_XcmCODHCPGetXWindowFontServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetXWindowFontServer = _XcmCODHCPGetXWindowFontServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 48)
)
_XcmCODHCPGetXWindowDisplayMgr_ObjectIdentity = ObjectIdentity
xcmCODHCPGetXWindowDisplayMgr = _XcmCODHCPGetXWindowDisplayMgr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 49)
)
_XcmCODHCPGetMessageType_ObjectIdentity = ObjectIdentity
xcmCODHCPGetMessageType = _XcmCODHCPGetMessageType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 53)
)
_XcmCODHCPGetServerID_ObjectIdentity = ObjectIdentity
xcmCODHCPGetServerID = _XcmCODHCPGetServerID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 54)
)
_XcmCODHCPGetParameterRequest_ObjectIdentity = ObjectIdentity
xcmCODHCPGetParameterRequest = _XcmCODHCPGetParameterRequest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 55)
)
_XcmCODHCPGetErrorMessage_ObjectIdentity = ObjectIdentity
xcmCODHCPGetErrorMessage = _XcmCODHCPGetErrorMessage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 56)
)
_XcmCODHCPGetMaxMessageSize_ObjectIdentity = ObjectIdentity
xcmCODHCPGetMaxMessageSize = _XcmCODHCPGetMaxMessageSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 57)
)
_XcmCODHCPGetRenewT1Interval_ObjectIdentity = ObjectIdentity
xcmCODHCPGetRenewT1Interval = _XcmCODHCPGetRenewT1Interval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 58)
)
_XcmCODHCPGetRebindT2Interval_ObjectIdentity = ObjectIdentity
xcmCODHCPGetRebindT2Interval = _XcmCODHCPGetRebindT2Interval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 59)
)
_XcmCODHCPGetNISPlusDomainName_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNISPlusDomainName = _XcmCODHCPGetNISPlusDomainName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 64)
)
_XcmCODHCPGetNISPlusNameServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNISPlusNameServer = _XcmCODHCPGetNISPlusNameServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 65)
)
_XcmCODHCPGetTFTPServerName_ObjectIdentity = ObjectIdentity
xcmCODHCPGetTFTPServerName = _XcmCODHCPGetTFTPServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 66)
)
_XcmCODHCPGetBootFileName_ObjectIdentity = ObjectIdentity
xcmCODHCPGetBootFileName = _XcmCODHCPGetBootFileName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 67)
)
_XcmCODHCPGetMobileIPHomeAgent_ObjectIdentity = ObjectIdentity
xcmCODHCPGetMobileIPHomeAgent = _XcmCODHCPGetMobileIPHomeAgent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 68)
)
_XcmCODHCPGetSMTPMailServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetSMTPMailServer = _XcmCODHCPGetSMTPMailServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 69)
)
_XcmCODHCPGetPOP3MailServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetPOP3MailServer = _XcmCODHCPGetPOP3MailServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 70)
)
_XcmCODHCPGetNNTPNewsServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNNTPNewsServer = _XcmCODHCPGetNNTPNewsServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 71)
)
_XcmCODHCPGetWWWServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetWWWServer = _XcmCODHCPGetWWWServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 72)
)
_XcmCODHCPGetFingerServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetFingerServer = _XcmCODHCPGetFingerServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 73)
)
_XcmCODHCPGetIRCServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetIRCServer = _XcmCODHCPGetIRCServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 74)
)
_XcmCODHCPGetStreetTalkServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetStreetTalkServer = _XcmCODHCPGetStreetTalkServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 75)
)
_XcmCODHCPGetStreetTalkDAServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetStreetTalkDAServer = _XcmCODHCPGetStreetTalkDAServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 76)
)
_XcmCODHCPGetNDSNameServer_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNDSNameServer = _XcmCODHCPGetNDSNameServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 85)
)
_XcmCODHCPGetNDSTreeName_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNDSTreeName = _XcmCODHCPGetNDSTreeName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 86)
)
_XcmCODHCPGetNDSContext_ObjectIdentity = ObjectIdentity
xcmCODHCPGetNDSContext = _XcmCODHCPGetNDSContext_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 10, 87)
)
_XcmCOInternetDHCPOptionSet_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCPOptionSet = _XcmCOInternetDHCPOptionSet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 11)
)
_XcmCODHCPSetIPAddressRequest_ObjectIdentity = ObjectIdentity
xcmCODHCPSetIPAddressRequest = _XcmCODHCPSetIPAddressRequest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 11, 50)
)
_XcmCODHCPSetIPAddressLeaseTime_ObjectIdentity = ObjectIdentity
xcmCODHCPSetIPAddressLeaseTime = _XcmCODHCPSetIPAddressLeaseTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 11, 51)
)
_XcmCODHCPSetOptionOverload_ObjectIdentity = ObjectIdentity
xcmCODHCPSetOptionOverload = _XcmCODHCPSetOptionOverload_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 11, 52)
)
_XcmCODHCPSetClassID_ObjectIdentity = ObjectIdentity
xcmCODHCPSetClassID = _XcmCODHCPSetClassID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 11, 60)
)
_XcmCODHCPSetClientID_ObjectIdentity = ObjectIdentity
xcmCODHCPSetClientID = _XcmCODHCPSetClientID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1304, 11, 61)
)
_XcmCOInternetBOOTP_ObjectIdentity = ObjectIdentity
xcmCOInternetBOOTP = _XcmCOInternetBOOTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1305)
)
_XcmCOInternetBOOTPBroadcastEnabled_ObjectIdentity = ObjectIdentity
xcmCOInternetBOOTPBroadcastEnabled = _XcmCOInternetBOOTPBroadcastEnabled_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1305, 1)
)
_XcmCOInternetRARP_ObjectIdentity = ObjectIdentity
xcmCOInternetRARP = _XcmCOInternetRARP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1306)
)
_XcmCOInternetIPv6_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6 = _XcmCOInternetIPv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310)
)
_XcmCOInternetIPv6Address_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6Address = _XcmCOInternetIPv6Address_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 1)
)
_XcmCOInternetIPv6SocketAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6SocketAddress = _XcmCOInternetIPv6SocketAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 1, 1)
)
_XcmCOInternetIPv6ManuallyAssignedAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6ManuallyAssignedAddress = _XcmCOInternetIPv6ManuallyAssignedAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 1, 2)
)
_XcmCOInternetIPv6DHCPv6AssignedAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6DHCPv6AssignedAddress = _XcmCOInternetIPv6DHCPv6AssignedAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 1, 3)
)
_XcmCOInternetIPv6LinkLocalAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6LinkLocalAddress = _XcmCOInternetIPv6LinkLocalAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 1, 4)
)
_XcmCOInternetIPv6StatelessAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6StatelessAddress = _XcmCOInternetIPv6StatelessAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 1, 5)
)
_XcmCOInternetIPv6RandomAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6RandomAddress = _XcmCOInternetIPv6RandomAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 1, 6)
)
_XcmCOInternetIPv6AutomaticAddressing_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6AutomaticAddressing = _XcmCOInternetIPv6AutomaticAddressing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 1, 7)
)
_XcmCOInternetIPv6EUI64InterfaceId_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6EUI64InterfaceId = _XcmCOInternetIPv6EUI64InterfaceId_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 2)
)
_XcmCOInternetIPv6RouterAdvertisementAddressPrefix_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6RouterAdvertisementAddressPrefix = _XcmCOInternetIPv6RouterAdvertisementAddressPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 3)
)
_XcmCOInternetIPv6DefaultGateway_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6DefaultGateway = _XcmCOInternetIPv6DefaultGateway_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 4)
)
_XcmCOInternetIPv6HostName_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6HostName = _XcmCOInternetIPv6HostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1310, 5)
)
_XcmCOInternetTransports_ObjectIdentity = ObjectIdentity
xcmCOInternetTransports = _XcmCOInternetTransports_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1400)
)
_XcmCOInternetUDP_ObjectIdentity = ObjectIdentity
xcmCOInternetUDP = _XcmCOInternetUDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1401)
)
_XcmCOInternetUDPAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetUDPAddress = _XcmCOInternetUDPAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1401, 1)
)
_XcmCOInternetUDPPort_ObjectIdentity = ObjectIdentity
xcmCOInternetUDPPort = _XcmCOInternetUDPPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1401, 2)
)
_XcmCOInternetTCP_ObjectIdentity = ObjectIdentity
xcmCOInternetTCP = _XcmCOInternetTCP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1402)
)
_XcmCOInternetTCPAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetTCPAddress = _XcmCOInternetTCPAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1402, 1)
)
_XcmCOInternetTCPPort_ObjectIdentity = ObjectIdentity
xcmCOInternetTCPPort = _XcmCOInternetTCPPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1402, 2)
)
_XcmCOInternetTCPMaxSegmentSize_ObjectIdentity = ObjectIdentity
xcmCOInternetTCPMaxSegmentSize = _XcmCOInternetTCPMaxSegmentSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1402, 3)
)
_XcmCOInternetPing_ObjectIdentity = ObjectIdentity
xcmCOInternetPing = _XcmCOInternetPing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1404)
)
_XcmCOInternetSSL3_ObjectIdentity = ObjectIdentity
xcmCOInternetSSL3 = _XcmCOInternetSSL3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1405)
)
_XcmCOInternetSSL3Port_ObjectIdentity = ObjectIdentity
xcmCOInternetSSL3Port = _XcmCOInternetSSL3Port_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1405, 1)
)
_XcmCOInternetSSL3CipherStrength_ObjectIdentity = ObjectIdentity
xcmCOInternetSSL3CipherStrength = _XcmCOInternetSSL3CipherStrength_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1405, 2)
)
_XcmCOInternetTLS_ObjectIdentity = ObjectIdentity
xcmCOInternetTLS = _XcmCOInternetTLS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1406)
)
_XcmCOInternetICMPv6_ObjectIdentity = ObjectIdentity
xcmCOInternetICMPv6 = _XcmCOInternetICMPv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1410)
)
_XcmCOInternetRaw_ObjectIdentity = ObjectIdentity
xcmCOInternetRaw = _XcmCOInternetRaw_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501)
)
_XcmCOInternetRawHostName_ObjectIdentity = ObjectIdentity
xcmCOInternetRawHostName = _XcmCOInternetRawHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 1)
)
_XcmCOInternetRawHostAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetRawHostAddress = _XcmCOInternetRawHostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 2)
)
_XcmCOInternetRawListenSocket_ObjectIdentity = ObjectIdentity
xcmCOInternetRawListenSocket = _XcmCOInternetRawListenSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 3)
)
_XcmCOInternetRawMaxClients_ObjectIdentity = ObjectIdentity
xcmCOInternetRawMaxClients = _XcmCOInternetRawMaxClients_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 4)
)
_XcmCOInternetRawAcceptAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetRawAcceptAddress = _XcmCOInternetRawAcceptAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 11)
)
_XcmCOInternetRawAcceptSubnet_ObjectIdentity = ObjectIdentity
xcmCOInternetRawAcceptSubnet = _XcmCOInternetRawAcceptSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 12)
)
_XcmCOInternetRawRejectAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetRawRejectAddress = _XcmCOInternetRawRejectAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 21)
)
_XcmCOInternetRawRejectSubnet_ObjectIdentity = ObjectIdentity
xcmCOInternetRawRejectSubnet = _XcmCOInternetRawRejectSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 22)
)
_XcmCOInternetRawSpool_ObjectIdentity = ObjectIdentity
xcmCOInternetRawSpool = _XcmCOInternetRawSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 31)
)
_XcmCOInternetRawMaxSpool_ObjectIdentity = ObjectIdentity
xcmCOInternetRawMaxSpool = _XcmCOInternetRawMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 32)
)
_XcmCOInternetRawJobTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetRawJobTimeout = _XcmCOInternetRawJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 40)
)
_XcmCOInternetRawAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCOInternetRawAutoSwitch = _XcmCOInternetRawAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 41)
)
_XcmCOInternetRawBinaryPS_ObjectIdentity = ObjectIdentity
xcmCOInternetRawBinaryPS = _XcmCOInternetRawBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 42)
)
_XcmCOInternetRawDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCOInternetRawDefaultPDL = _XcmCOInternetRawDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 43)
)
_XcmCOInternetRawBidirectional_ObjectIdentity = ObjectIdentity
xcmCOInternetRawBidirectional = _XcmCOInternetRawBidirectional_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1501, 44)
)
_XcmCOInternetIPP_ObjectIdentity = ObjectIdentity
xcmCOInternetIPP = _XcmCOInternetIPP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502)
)
_XcmCOInternetIPPHostName_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPHostName = _XcmCOInternetIPPHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 1)
)
_XcmCOInternetIPPHostAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPHostAddress = _XcmCOInternetIPPHostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 2)
)
_XcmCOInternetIPPListenSocket_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPListenSocket = _XcmCOInternetIPPListenSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 3)
)
_XcmCOInternetIPPMaxClients_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPMaxClients = _XcmCOInternetIPPMaxClients_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 4)
)
_XcmCOInternetIPPVersionString_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPVersionString = _XcmCOInternetIPPVersionString_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 9)
)
_XcmCOInternetIPPAcceptAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPAcceptAddress = _XcmCOInternetIPPAcceptAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 11)
)
_XcmCOInternetIPPAcceptSubnet_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPAcceptSubnet = _XcmCOInternetIPPAcceptSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 12)
)
_XcmCOInternetIPPRejectAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPRejectAddress = _XcmCOInternetIPPRejectAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 21)
)
_XcmCOInternetIPPRejectSubnet_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPRejectSubnet = _XcmCOInternetIPPRejectSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 22)
)
_XcmCOInternetIPPSpool_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPSpool = _XcmCOInternetIPPSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 31)
)
_XcmCOInternetIPPMaxSpool_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPMaxSpool = _XcmCOInternetIPPMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 32)
)
_XcmCOInternetIPPJobTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPJobTimeout = _XcmCOInternetIPPJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 40)
)
_XcmCOInternetIPPAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPAutoSwitch = _XcmCOInternetIPPAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 41)
)
_XcmCOInternetIPPBinaryPS_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPBinaryPS = _XcmCOInternetIPPBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 42)
)
_XcmCOInternetIPPDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPDefaultPDL = _XcmCOInternetIPPDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 43)
)
_XcmCOInternetIPPAuthScheme_ObjectIdentity = ObjectIdentity
xcmCOInternetIPPAuthScheme = _XcmCOInternetIPPAuthScheme_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1502, 50)
)
_XcmCOInternetLPR_ObjectIdentity = ObjectIdentity
xcmCOInternetLPR = _XcmCOInternetLPR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503)
)
_XcmCOInternetLPRHostName_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRHostName = _XcmCOInternetLPRHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 1)
)
_XcmCOInternetLPRHostAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRHostAddress = _XcmCOInternetLPRHostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 2)
)
_XcmCOInternetLPRListenSocket_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRListenSocket = _XcmCOInternetLPRListenSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 3)
)
_XcmCOInternetLPRMaxClients_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRMaxClients = _XcmCOInternetLPRMaxClients_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 4)
)
_XcmCOInternetLPRAcceptAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRAcceptAddress = _XcmCOInternetLPRAcceptAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 11)
)
_XcmCOInternetLPRAcceptSubnet_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRAcceptSubnet = _XcmCOInternetLPRAcceptSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 12)
)
_XcmCOInternetLPRRejectAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRRejectAddress = _XcmCOInternetLPRRejectAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 21)
)
_XcmCOInternetLPRRejectSubnet_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRRejectSubnet = _XcmCOInternetLPRRejectSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 22)
)
_XcmCOInternetLPRSpool_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRSpool = _XcmCOInternetLPRSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 31)
)
_XcmCOInternetLPRMaxSpool_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRMaxSpool = _XcmCOInternetLPRMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 32)
)
_XcmCOInternetLPRJobTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRJobTimeout = _XcmCOInternetLPRJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 40)
)
_XcmCOInternetLPRAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRAutoSwitch = _XcmCOInternetLPRAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 41)
)
_XcmCOInternetLPRBinaryPS_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRBinaryPS = _XcmCOInternetLPRBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 42)
)
_XcmCOInternetLPRDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCOInternetLPRDefaultPDL = _XcmCOInternetLPRDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1503, 43)
)
_XcmCOInternetFTP_ObjectIdentity = ObjectIdentity
xcmCOInternetFTP = _XcmCOInternetFTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1504)
)
_XcmCOInternetFTPPassiveMode_ObjectIdentity = ObjectIdentity
xcmCOInternetFTPPassiveMode = _XcmCOInternetFTPPassiveMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1504, 1)
)
_XcmCOInternetSMTP_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTP = _XcmCOInternetSMTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505)
)
_XcmCOInternetSMTPHostName_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPHostName = _XcmCOInternetSMTPHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 1)
)
_XcmCOInternetSMTPHostAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPHostAddress = _XcmCOInternetSMTPHostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 2)
)
_XcmCOInternetSMTPListenSocket_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPListenSocket = _XcmCOInternetSMTPListenSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 3)
)
_XcmCOInternetSMTPMaxClients_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxClients = _XcmCOInternetSMTPMaxClients_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 4)
)
_XcmCOInternetSMTPAcceptAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPAcceptAddress = _XcmCOInternetSMTPAcceptAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 11)
)
_XcmCOInternetSMTPAcceptSubnet_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPAcceptSubnet = _XcmCOInternetSMTPAcceptSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 12)
)
_XcmCOInternetSMTPRejectAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPRejectAddress = _XcmCOInternetSMTPRejectAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 21)
)
_XcmCOInternetSMTPRejectSubnet_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPRejectSubnet = _XcmCOInternetSMTPRejectSubnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 22)
)
_XcmCOInternetSMTPSpool_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPSpool = _XcmCOInternetSMTPSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 31)
)
_XcmCOInternetSMTPMaxSpool_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxSpool = _XcmCOInternetSMTPMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 32)
)
_XcmCOInternetSMTPJobTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPJobTimeout = _XcmCOInternetSMTPJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 40)
)
_XcmCOInternetSMTPAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPAutoSwitch = _XcmCOInternetSMTPAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 41)
)
_XcmCOInternetSMTPBinaryPS_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPBinaryPS = _XcmCOInternetSMTPBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 42)
)
_XcmCOInternetSMTPDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPDefaultPDL = _XcmCOInternetSMTPDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 43)
)
_XcmCOInternetSMTPSubject_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPSubject = _XcmCOInternetSMTPSubject_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 44)
)
_XcmCOInternetSMTPSignatureLine_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPSignatureLine = _XcmCOInternetSMTPSignatureLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 45)
)
_XcmCOInternetSMTPUserName_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPUserName = _XcmCOInternetSMTPUserName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 47)
)
_XcmCOInternetSMTPPassword_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPPassword = _XcmCOInternetSMTPPassword_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 48)
)
_XcmCOInternetSMTPMaxInputText_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxInputText = _XcmCOInternetSMTPMaxInputText_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 50)
)
_XcmCOInternetSMTPMaxInputAttach_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxInputAttach = _XcmCOInternetSMTPMaxInputAttach_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 51)
)
_XcmCOInternetSMTPMaxOutputText_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxOutputText = _XcmCOInternetSMTPMaxOutputText_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 52)
)
_XcmCOInternetSMTPMaxOutputAttach_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxOutputAttach = _XcmCOInternetSMTPMaxOutputAttach_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 53)
)
_XcmCOInternetSMTPConfirmRequest_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPConfirmRequest = _XcmCOInternetSMTPConfirmRequest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 54)
)
_XcmCOInternetSMTPConfirmReply_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPConfirmReply = _XcmCOInternetSMTPConfirmReply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 55)
)
_XcmCOInternetSMTPConfirmTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPConfirmTimeout = _XcmCOInternetSMTPConfirmTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 56)
)
_XcmCOInternetSMTPFeatureReply_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPFeatureReply = _XcmCOInternetSMTPFeatureReply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 57)
)
_XcmCOInternetSMTPMailAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMailAddress = _XcmCOInternetSMTPMailAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 58)
)
_XcmCOInternetSMTPMaxInFragments_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxInFragments = _XcmCOInternetSMTPMaxInFragments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 59)
)
_XcmCOInternetSMTPMaxOutFragments_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxOutFragments = _XcmCOInternetSMTPMaxOutFragments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 60)
)
_XcmCOInternetSMTPMaxInAttachments_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxInAttachments = _XcmCOInternetSMTPMaxInAttachments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 61)
)
_XcmCOInternetSMTPMaxOutAttachments_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxOutAttachments = _XcmCOInternetSMTPMaxOutAttachments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 62)
)
_XcmCOInternetSMTPMaxInputSize_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxInputSize = _XcmCOInternetSMTPMaxInputSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 63)
)
_XcmCOInternetSMTPMaxOutputSize_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPMaxOutputSize = _XcmCOInternetSMTPMaxOutputSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 64)
)
_XcmCOInternetSMTPReversePath_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPReversePath = _XcmCOInternetSMTPReversePath_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 65)
)
_XcmCOInternetSMTPAutoServer_ObjectIdentity = ObjectIdentity
xcmCOInternetSMTPAutoServer = _XcmCOInternetSMTPAutoServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1505, 70)
)
_XcmCOInternetTelnet_ObjectIdentity = ObjectIdentity
xcmCOInternetTelnet = _XcmCOInternetTelnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1506)
)
_XcmCOInternetDNS_ObjectIdentity = ObjectIdentity
xcmCOInternetDNS = _XcmCOInternetDNS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507)
)
_XcmCOInternetDNSDomainName_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSDomainName = _XcmCOInternetDNSDomainName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 1)
)
_XcmCOInternetDNSLanguage_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSLanguage = _XcmCOInternetDNSLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 3)
)
_XcmCOInternetDNSCharset_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSCharset = _XcmCOInternetDNSCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 4)
)
_XcmCOInternetDNSServerName_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSServerName = _XcmCOInternetDNSServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 5)
)
_XcmCOInternetDNSServerAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSServerAddress = _XcmCOInternetDNSServerAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 6)
)
_XcmCOInternetDNSServerResolvedAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSServerResolvedAddress = _XcmCOInternetDNSServerResolvedAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 7)
)
_XcmCOInternetDNSServerTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSServerTimeout = _XcmCOInternetDNSServerTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 8)
)
_XcmCOInternetDNSAppendDomainName_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSAppendDomainName = _XcmCOInternetDNSAppendDomainName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 9)
)
_XcmCOInternetDNSAppendParentDomains_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSAppendParentDomains = _XcmCOInternetDNSAppendParentDomains_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 10)
)
_XcmCOInternetDNSDomainNameList_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSDomainNameList = _XcmCOInternetDNSDomainNameList_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 11)
)
_XcmCOInternetDNSDynamicUpdate_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSDynamicUpdate = _XcmCOInternetDNSDynamicUpdate_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 13)
)
_XcmCOInternetDNSUpdatePolicy_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSUpdatePolicy = _XcmCOInternetDNSUpdatePolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 14)
)
_XcmCOInternetDNSMulticastEnable_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSMulticastEnable = _XcmCOInternetDNSMulticastEnable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 30)
)
_XcmCOInternetIOSDiscoveryEnable_ObjectIdentity = ObjectIdentity
xcmCOInternetIOSDiscoveryEnable = _XcmCOInternetIOSDiscoveryEnable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1507, 31)
)
_XcmCOInternetTFTP_ObjectIdentity = ObjectIdentity
xcmCOInternetTFTP = _XcmCOInternetTFTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1508)
)
_XcmCOInternetHTTP_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTP = _XcmCOInternetHTTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509)
)
_XcmCOInternetHTTPAddressURL_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPAddressURL = _XcmCOInternetHTTPAddressURL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 1)
)
_XcmCOInternetHTTPAddressURI_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPAddressURI = _XcmCOInternetHTTPAddressURI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 2)
)
_XcmCOInternetHTTPAddressURN_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPAddressURN = _XcmCOInternetHTTPAddressURN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 3)
)
_XcmCOInternetHTTPVersionString_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPVersionString = _XcmCOInternetHTTPVersionString_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 9)
)
_XcmCOInternetHTTPListenSocket_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPListenSocket = _XcmCOInternetHTTPListenSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 11)
)
_XcmCOInternetHTTPMaxClients_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPMaxClients = _XcmCOInternetHTTPMaxClients_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 12)
)
_XcmCOInternetHTTPClientTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPClientTimeout = _XcmCOInternetHTTPClientTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 13)
)
_XcmCOInternetHTTPStatusRefresh_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPStatusRefresh = _XcmCOInternetHTTPStatusRefresh_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 14)
)
_XcmCOInternetHTTPAdminAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPAdminAddress = _XcmCOInternetHTTPAdminAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 15)
)
_XcmCOInternetHTTPKeyUsrAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPKeyUsrAddress = _XcmCOInternetHTTPKeyUsrAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 16)
)
_XcmCOInternetHTTPProxy_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxy = _XcmCOInternetHTTPProxy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20)
)
_XcmCOInternetHTTPProxyIPAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyIPAddress = _XcmCOInternetHTTPProxyIPAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 1)
)
_XcmCOInternetHTTPProxyHostName_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyHostName = _XcmCOInternetHTTPProxyHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 2)
)
_XcmCOInternetHTTPProxyPortNumber_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyPortNumber = _XcmCOInternetHTTPProxyPortNumber_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 3)
)
_XcmCOInternetHTTPProxyExceptions_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyExceptions = _XcmCOInternetHTTPProxyExceptions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 4)
)
_XcmCOInternetHTTPProxyServer_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyServer = _XcmCOInternetHTTPProxyServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 5)
)
_XcmCOInternetHTTPProxyUserName_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyUserName = _XcmCOInternetHTTPProxyUserName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 6)
)
_XcmCOInternetHTTPProxyPassword_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyPassword = _XcmCOInternetHTTPProxyPassword_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 7)
)
_XcmCOInternetHTTPProxyAutoDetect_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyAutoDetect = _XcmCOInternetHTTPProxyAutoDetect_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 8)
)
_XcmCOInternetHTTPProxyShareSettings_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyShareSettings = _XcmCOInternetHTTPProxyShareSettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 9)
)
_XcmCOInternetHTTPProxyAuthValid_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPProxyAuthValid = _XcmCOInternetHTTPProxyAuthValid_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 20, 10)
)
_XcmCOInternetHTTPInfoFwd_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPInfoFwd = _XcmCOInternetHTTPInfoFwd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1509, 25)
)
_XcmCOInternetSNMP_ObjectIdentity = ObjectIdentity
xcmCOInternetSNMP = _XcmCOInternetSNMP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1510)
)
_XcmCOInternetSNMPVersion_ObjectIdentity = ObjectIdentity
xcmCOInternetSNMPVersion = _XcmCOInternetSNMPVersion_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1510, 1)
)
_XcmCOInternetSNMPAdminAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetSNMPAdminAddress = _XcmCOInternetSNMPAdminAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1510, 2)
)
_XcmCOInternetSNMPv1_ObjectIdentity = ObjectIdentity
xcmCOInternetSNMPv1 = _XcmCOInternetSNMPv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1511)
)
_XcmCOInternetSNMPv2_ObjectIdentity = ObjectIdentity
xcmCOInternetSNMPv2 = _XcmCOInternetSNMPv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1512)
)
_XcmCOInternetSNMPv3_ObjectIdentity = ObjectIdentity
xcmCOInternetSNMPv3 = _XcmCOInternetSNMPv3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1513)
)
_XcmCOInternetPOP3_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3 = _XcmCOInternetPOP3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514)
)
_XcmCOInternetPOP3HostName_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3HostName = _XcmCOInternetPOP3HostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 1)
)
_XcmCOInternetPOP3HostAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3HostAddress = _XcmCOInternetPOP3HostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 2)
)
_XcmCOInternetPOP3PollInterval_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3PollInterval = _XcmCOInternetPOP3PollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 4)
)
_XcmCOInternetPOP3Subject_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3Subject = _XcmCOInternetPOP3Subject_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 44)
)
_XcmCOInternetPOP3SignatureLine_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3SignatureLine = _XcmCOInternetPOP3SignatureLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 45)
)
_XcmCOInternetPOP3UserName_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3UserName = _XcmCOInternetPOP3UserName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 47)
)
_XcmCOInternetPOP3Password_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3Password = _XcmCOInternetPOP3Password_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 48)
)
_XcmCOInternetPOP3MaxInputText_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxInputText = _XcmCOInternetPOP3MaxInputText_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 50)
)
_XcmCOInternetPOP3MaxInputAttach_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxInputAttach = _XcmCOInternetPOP3MaxInputAttach_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 51)
)
_XcmCOInternetPOP3MaxOutputText_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxOutputText = _XcmCOInternetPOP3MaxOutputText_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 52)
)
_XcmCOInternetPOP3MaxOutputAttach_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxOutputAttach = _XcmCOInternetPOP3MaxOutputAttach_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 53)
)
_XcmCOInternetPOP3ConfirmRequest_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3ConfirmRequest = _XcmCOInternetPOP3ConfirmRequest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 54)
)
_XcmCOInternetPOP3ConfirmReply_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3ConfirmReply = _XcmCOInternetPOP3ConfirmReply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 55)
)
_XcmCOInternetPOP3ConfirmTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3ConfirmTimeout = _XcmCOInternetPOP3ConfirmTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 56)
)
_XcmCOInternetPOP3FeatureReply_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3FeatureReply = _XcmCOInternetPOP3FeatureReply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 57)
)
_XcmCOInternetPOP3MailAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MailAddress = _XcmCOInternetPOP3MailAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 58)
)
_XcmCOInternetPOP3MaxInFragments_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxInFragments = _XcmCOInternetPOP3MaxInFragments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 59)
)
_XcmCOInternetPOP3MaxOutFragments_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxOutFragments = _XcmCOInternetPOP3MaxOutFragments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 60)
)
_XcmCOInternetPOP3MaxInAttachments_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxInAttachments = _XcmCOInternetPOP3MaxInAttachments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 61)
)
_XcmCOInternetPOP3MaxOutAttachments_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxOutAttachments = _XcmCOInternetPOP3MaxOutAttachments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 62)
)
_XcmCOInternetPOP3MaxInputSize_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxInputSize = _XcmCOInternetPOP3MaxInputSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 63)
)
_XcmCOInternetPOP3MaxOutputSize_ObjectIdentity = ObjectIdentity
xcmCOInternetPOP3MaxOutputSize = _XcmCOInternetPOP3MaxOutputSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1514, 64)
)
_XcmCOInternetIMAP4_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4 = _XcmCOInternetIMAP4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515)
)
_XcmCOInternetIMAP4HostName_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4HostName = _XcmCOInternetIMAP4HostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 1)
)
_XcmCOInternetIMAP4HostAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4HostAddress = _XcmCOInternetIMAP4HostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 2)
)
_XcmCOInternetIMAP4PollInterval_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4PollInterval = _XcmCOInternetIMAP4PollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 4)
)
_XcmCOInternetIMAP4Subject_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4Subject = _XcmCOInternetIMAP4Subject_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 44)
)
_XcmCOInternetIMAP4SignatureLine_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4SignatureLine = _XcmCOInternetIMAP4SignatureLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 45)
)
_XcmCOInternetIMAP4UserName_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4UserName = _XcmCOInternetIMAP4UserName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 47)
)
_XcmCOInternetIMAP4Password_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4Password = _XcmCOInternetIMAP4Password_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 48)
)
_XcmCOInternetIMAP4MaxInputText_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxInputText = _XcmCOInternetIMAP4MaxInputText_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 50)
)
_XcmCOInternetIMAP4MaxInputAttach_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxInputAttach = _XcmCOInternetIMAP4MaxInputAttach_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 51)
)
_XcmCOInternetIMAP4MaxOutputText_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxOutputText = _XcmCOInternetIMAP4MaxOutputText_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 52)
)
_XcmCOInternetIMAP4MaxOutputAttach_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxOutputAttach = _XcmCOInternetIMAP4MaxOutputAttach_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 53)
)
_XcmCOInternetIMAP4ConfirmRequest_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4ConfirmRequest = _XcmCOInternetIMAP4ConfirmRequest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 54)
)
_XcmCOInternetIMAP4ConfirmReply_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4ConfirmReply = _XcmCOInternetIMAP4ConfirmReply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 55)
)
_XcmCOInternetIMAP4ConfirmTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4ConfirmTimeout = _XcmCOInternetIMAP4ConfirmTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 56)
)
_XcmCOInternetIMAP4FeatureReply_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4FeatureReply = _XcmCOInternetIMAP4FeatureReply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 57)
)
_XcmCOInternetIMAP4MailAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MailAddress = _XcmCOInternetIMAP4MailAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 58)
)
_XcmCOInternetIMAP4MaxInFragments_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxInFragments = _XcmCOInternetIMAP4MaxInFragments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 59)
)
_XcmCOInternetIMAP4MaxOutFragments_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxOutFragments = _XcmCOInternetIMAP4MaxOutFragments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 60)
)
_XcmCOInternetIMAP4MaxInAttachments_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxInAttachments = _XcmCOInternetIMAP4MaxInAttachments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 61)
)
_XcmCOInternetIMAP4MaxOutAttachments_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxOutAttachments = _XcmCOInternetIMAP4MaxOutAttachments_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 62)
)
_XcmCOInternetIMAP4MaxInputSize_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxInputSize = _XcmCOInternetIMAP4MaxInputSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 63)
)
_XcmCOInternetIMAP4MaxOutputSize_ObjectIdentity = ObjectIdentity
xcmCOInternetIMAP4MaxOutputSize = _XcmCOInternetIMAP4MaxOutputSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1515, 64)
)
_XcmCOInternetFax_ObjectIdentity = ObjectIdentity
xcmCOInternetFax = _XcmCOInternetFax_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1516)
)
_XcmCOInternetNTP_ObjectIdentity = ObjectIdentity
xcmCOInternetNTP = _XcmCOInternetNTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1517)
)
_XcmCOInternetNTPHostName_ObjectIdentity = ObjectIdentity
xcmCOInternetNTPHostName = _XcmCOInternetNTPHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1517, 1)
)
_XcmCOInternetNTPHostAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetNTPHostAddress = _XcmCOInternetNTPHostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1517, 2)
)
_XcmCOInternetNTPv6HostAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetNTPv6HostAddress = _XcmCOInternetNTPv6HostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1517, 3)
)
_XcmCOInternetNTPPort_ObjectIdentity = ObjectIdentity
xcmCOInternetNTPPort = _XcmCOInternetNTPPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1517, 4)
)
_XcmCOInternetNTPGMTOffset_ObjectIdentity = ObjectIdentity
xcmCOInternetNTPGMTOffset = _XcmCOInternetNTPGMTOffset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1517, 5)
)
_XcmCOInternetNTPPollInterval_ObjectIdentity = ObjectIdentity
xcmCOInternetNTPPollInterval = _XcmCOInternetNTPPollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1517, 6)
)
_XcmCOInternetNTPSkewTime_ObjectIdentity = ObjectIdentity
xcmCOInternetNTPSkewTime = _XcmCOInternetNTPSkewTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1517, 7)
)
_XcmCOInternetSFTP_ObjectIdentity = ObjectIdentity
xcmCOInternetSFTP = _XcmCOInternetSFTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1518)
)
_XcmCOInternetWINS_ObjectIdentity = ObjectIdentity
xcmCOInternetWINS = _XcmCOInternetWINS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1519)
)
_XcmCOInternetWINSDomainName_ObjectIdentity = ObjectIdentity
xcmCOInternetWINSDomainName = _XcmCOInternetWINSDomainName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1519, 1)
)
_XcmCOInternetWINSLanguage_ObjectIdentity = ObjectIdentity
xcmCOInternetWINSLanguage = _XcmCOInternetWINSLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1519, 3)
)
_XcmCOInternetWINSCharset_ObjectIdentity = ObjectIdentity
xcmCOInternetWINSCharset = _XcmCOInternetWINSCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1519, 4)
)
_XcmCOInternetWINSServerName_ObjectIdentity = ObjectIdentity
xcmCOInternetWINSServerName = _XcmCOInternetWINSServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1519, 5)
)
_XcmCOInternetWINSServerAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetWINSServerAddress = _XcmCOInternetWINSServerAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1519, 6)
)
_XcmCOInternetWINSServerSocket_ObjectIdentity = ObjectIdentity
xcmCOInternetWINSServerSocket = _XcmCOInternetWINSServerSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1519, 7)
)
_XcmCOInternetSunOncSuite_ObjectIdentity = ObjectIdentity
xcmCOInternetSunOncSuite = _XcmCOInternetSunOncSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1520)
)
_XcmCOInternetSunOncNIS_ObjectIdentity = ObjectIdentity
xcmCOInternetSunOncNIS = _XcmCOInternetSunOncNIS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1521)
)
_XcmCOInternetSunOncPlusNIS_ObjectIdentity = ObjectIdentity
xcmCOInternetSunOncPlusNIS = _XcmCOInternetSunOncPlusNIS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1522)
)
_XcmCOInternetSunOncRPC_ObjectIdentity = ObjectIdentity
xcmCOInternetSunOncRPC = _XcmCOInternetSunOncRPC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1523)
)
_XcmCOInternetSunOncPlusRPC_ObjectIdentity = ObjectIdentity
xcmCOInternetSunOncPlusRPC = _XcmCOInternetSunOncPlusRPC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1524)
)
_XcmCOInternetSunTiRPC_ObjectIdentity = ObjectIdentity
xcmCOInternetSunTiRPC = _XcmCOInternetSunTiRPC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1525)
)
_XcmCOInternetHTTPS_ObjectIdentity = ObjectIdentity
xcmCOInternetHTTPS = _XcmCOInternetHTTPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1526)
)
_XcmCOInternetOsfDceSuite_ObjectIdentity = ObjectIdentity
xcmCOInternetOsfDceSuite = _XcmCOInternetOsfDceSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1530)
)
_XcmCOInternetOsfDceCDS_ObjectIdentity = ObjectIdentity
xcmCOInternetOsfDceCDS = _XcmCOInternetOsfDceCDS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1531)
)
_XcmCOInternetOsfDceRPC_ObjectIdentity = ObjectIdentity
xcmCOInternetOsfDceRPC = _XcmCOInternetOsfDceRPC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1532)
)
_XcmCOInternetOsfDceKerberos_ObjectIdentity = ObjectIdentity
xcmCOInternetOsfDceKerberos = _XcmCOInternetOsfDceKerberos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1533)
)
_XcmCOInternetOsfDceKerberosRealm_ObjectIdentity = ObjectIdentity
xcmCOInternetOsfDceKerberosRealm = _XcmCOInternetOsfDceKerberosRealm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1533, 1)
)
_XcmCOInternetOsfDmeSuite_ObjectIdentity = ObjectIdentity
xcmCOInternetOsfDmeSuite = _XcmCOInternetOsfDmeSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1540)
)
_XcmCOInternetLDAP_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAP = _XcmCOInternetLDAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551)
)
_XcmCOInternetLDAPLanguage_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPLanguage = _XcmCOInternetLDAPLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 3)
)
_XcmCOInternetLDAPCharset_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPCharset = _XcmCOInternetLDAPCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 4)
)
_XcmCOInternetLDAPServerName_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPServerName = _XcmCOInternetLDAPServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 5)
)
_XcmCOInternetLDAPServerAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPServerAddress = _XcmCOInternetLDAPServerAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 6)
)
_XcmCOInternetLDAPServerSocket_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPServerSocket = _XcmCOInternetLDAPServerSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 7)
)
_XcmCOInternetLDAPPollInterval_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPPollInterval = _XcmCOInternetLDAPPollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 8)
)
_XcmCOInternetLDAPBindDN_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPBindDN = _XcmCOInternetLDAPBindDN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 11)
)
_XcmCOInternetLDAPBindPassword_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPBindPassword = _XcmCOInternetLDAPBindPassword_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 12)
)
_XcmCOInternetLDAPBaseDN_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPBaseDN = _XcmCOInternetLDAPBaseDN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 13)
)
_XcmCOInternetLDAPPrinterName_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPPrinterName = _XcmCOInternetLDAPPrinterName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 21)
)
_XcmCOInternetLDAPPrinterClass_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPPrinterClass = _XcmCOInternetLDAPPrinterClass_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 22)
)
_XcmCOInternetLDAPAttributeName_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPAttributeName = _XcmCOInternetLDAPAttributeName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 31)
)
_XcmCOInternetLDAPAttributeType_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPAttributeType = _XcmCOInternetLDAPAttributeType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 32)
)
_XcmCOInternetLDAPAttributeInt_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPAttributeInt = _XcmCOInternetLDAPAttributeInt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 33)
)
_XcmCOInternetLDAPAttributeStr_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPAttributeStr = _XcmCOInternetLDAPAttributeStr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 34)
)
_XcmCOInternetLDAPMaxSearchResult_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPMaxSearchResult = _XcmCOInternetLDAPMaxSearchResult_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 35)
)
_XcmCOInternetLDAPSearchTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetLDAPSearchTimeout = _XcmCOInternetLDAPSearchTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1551, 36)
)
_XcmCOInternetCLDAP_ObjectIdentity = ObjectIdentity
xcmCOInternetCLDAP = _XcmCOInternetCLDAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1552)
)
_XcmCOInternetSalutation_ObjectIdentity = ObjectIdentity
xcmCOInternetSalutation = _XcmCOInternetSalutation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1561)
)
_XcmCOInternetUpnpSuite_ObjectIdentity = ObjectIdentity
xcmCOInternetUpnpSuite = _XcmCOInternetUpnpSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1570)
)
_XcmCOInternetUpnpSSDP_ObjectIdentity = ObjectIdentity
xcmCOInternetUpnpSSDP = _XcmCOInternetUpnpSSDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1571)
)
_XcmCOInternetSSDPCacheTimeout_ObjectIdentity = ObjectIdentity
xcmCOInternetSSDPCacheTimeout = _XcmCOInternetSSDPCacheTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1571, 1)
)
_XcmCOInternetSSDPTimeToLive_ObjectIdentity = ObjectIdentity
xcmCOInternetSSDPTimeToLive = _XcmCOInternetSSDPTimeToLive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1571, 2)
)
_XcmCOInternetSSDPServerVersion_ObjectIdentity = ObjectIdentity
xcmCOInternetSSDPServerVersion = _XcmCOInternetSSDPServerVersion_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1571, 3)
)
_XcmCOInternetUpnpGENA_ObjectIdentity = ObjectIdentity
xcmCOInternetUpnpGENA = _XcmCOInternetUpnpGENA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1572)
)
_XcmCOInternetSLP_ObjectIdentity = ObjectIdentity
xcmCOInternetSLP = _XcmCOInternetSLP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591)
)
_XcmCOInternetSLPVersion_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPVersion = _XcmCOInternetSLPVersion_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 1)
)
_XcmCOInternetSLPLanguage_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPLanguage = _XcmCOInternetSLPLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 3)
)
_XcmCOInternetSLPCharset_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPCharset = _XcmCOInternetSLPCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 4)
)
_XcmCOInternetSLPServerName_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPServerName = _XcmCOInternetSLPServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 5)
)
_XcmCOInternetSLPServerAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPServerAddress = _XcmCOInternetSLPServerAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 6)
)
_XcmCOInternetSLPServerSocket_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPServerSocket = _XcmCOInternetSLPServerSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 7)
)
_XcmCOInternetSLPPollInterval_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPPollInterval = _XcmCOInternetSLPPollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 8)
)
_XcmCOInternetSLPMaxMulticastTime_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPMaxMulticastTime = _XcmCOInternetSLPMaxMulticastTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 10)
)
_XcmCOInternetSLPDAFindStartWait_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPDAFindStartWait = _XcmCOInternetSLPDAFindStartWait_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 11)
)
_XcmCOInternetSLPInitialRetryWait_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPInitialRetryWait = _XcmCOInternetSLPInitialRetryWait_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 12)
)
_XcmCOInternetSLPMaxUnicastTime_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPMaxUnicastTime = _XcmCOInternetSLPMaxUnicastTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 13)
)
_XcmCOInternetSLPDAHeartbeatTime_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPDAHeartbeatTime = _XcmCOInternetSLPDAHeartbeatTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 14)
)
_XcmCOInternetSLPDAFindActiveWait_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPDAFindActiveWait = _XcmCOInternetSLPDAFindActiveWait_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 15)
)
_XcmCOInternetSLPRegPassiveWait_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPRegPassiveWait = _XcmCOInternetSLPRegPassiveWait_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 16)
)
_XcmCOInternetSLPRegActiveWait_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPRegActiveWait = _XcmCOInternetSLPRegActiveWait_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 17)
)
_XcmCOInternetSLPCloseConnWait_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPCloseConnWait = _XcmCOInternetSLPCloseConnWait_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 18)
)
_XcmCOInternetSLPCacheReplyTime_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPCacheReplyTime = _XcmCOInternetSLPCacheReplyTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 20)
)
_XcmCOInternetSLPMaxRegLifetime_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPMaxRegLifetime = _XcmCOInternetSLPMaxRegLifetime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 21)
)
_XcmCOInternetSLPDAFindRetryWait_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPDAFindRetryWait = _XcmCOInternetSLPDAFindRetryWait_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 22)
)
_XcmCOInternetSLPMaxDARequestTime_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPMaxDARequestTime = _XcmCOInternetSLPMaxDARequestTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 23)
)
_XcmCOInternetSLPMulticastEnable_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPMulticastEnable = _XcmCOInternetSLPMulticastEnable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 30)
)
_XcmCOInternetSLPMulticastRadius_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPMulticastRadius = _XcmCOInternetSLPMulticastRadius_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 31)
)
_XcmCOInternetSLPPathMTUSize_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPPathMTUSize = _XcmCOInternetSLPPathMTUSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 32)
)
_XcmCOInternetSLPScopeName_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPScopeName = _XcmCOInternetSLPScopeName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 40)
)
_XcmCOInternetSLPScopeKey_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPScopeKey = _XcmCOInternetSLPScopeKey_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 41)
)
_XcmCOInternetSLPAttributesEnable_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPAttributesEnable = _XcmCOInternetSLPAttributesEnable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1591, 50)
)
_XcmCOInternetSLPv1_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPv1 = _XcmCOInternetSLPv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1592)
)
_XcmCOInternetSLPv2_ObjectIdentity = ObjectIdentity
xcmCOInternetSLPv2 = _XcmCOInternetSLPv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1593)
)
_XcmCOInternetWSDSuite_ObjectIdentity = ObjectIdentity
xcmCOInternetWSDSuite = _XcmCOInternetWSDSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1595)
)
_XcmCOInternetWSDiscovery_ObjectIdentity = ObjectIdentity
xcmCOInternetWSDiscovery = _XcmCOInternetWSDiscovery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1595, 1)
)
_XcmCOInternetWSDiscoveryMulticast_ObjectIdentity = ObjectIdentity
xcmCOInternetWSDiscoveryMulticast = _XcmCOInternetWSDiscoveryMulticast_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1595, 1, 1)
)
_XcmCOInternetWSDiscoveryPort_ObjectIdentity = ObjectIdentity
xcmCOInternetWSDiscoveryPort = _XcmCOInternetWSDiscoveryPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1595, 1, 2)
)
_XcmCOInternetWSXResourcePort_ObjectIdentity = ObjectIdentity
xcmCOInternetWSXResourcePort = _XcmCOInternetWSXResourcePort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1595, 2)
)
_XcmCOInternetWSPrintPort_ObjectIdentity = ObjectIdentity
xcmCOInternetWSPrintPort = _XcmCOInternetWSPrintPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1595, 3)
)
_XcmCOInternetWSScanPort_ObjectIdentity = ObjectIdentity
xcmCOInternetWSScanPort = _XcmCOInternetWSScanPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1595, 4)
)
_XcmCOInternetWSTransferPort_ObjectIdentity = ObjectIdentity
xcmCOInternetWSTransferPort = _XcmCOInternetWSTransferPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1595, 5)
)
_XcmCOInternetDeallocateAllDynamicResources_ObjectIdentity = ObjectIdentity
xcmCOInternetDeallocateAllDynamicResources = _XcmCOInternetDeallocateAllDynamicResources_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1600)
)
_XcmCOInternetApplications_ObjectIdentity = ObjectIdentity
xcmCOInternetApplications = _XcmCOInternetApplications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1700)
)
_XcmCOInternetDHCPv6_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCPv6 = _XcmCOInternetDHCPv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1800)
)
_XcmCOInternetDHCPv6ConfigState_ObjectIdentity = ObjectIdentity
xcmCOInternetDHCPv6ConfigState = _XcmCOInternetDHCPv6ConfigState_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1800, 1)
)
_XcmCOInternetDNSv6_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSv6 = _XcmCOInternetDNSv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1801)
)
_XcmCOInternetDNSv6DomainName_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSv6DomainName = _XcmCOInternetDNSv6DomainName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1801, 1)
)
_XcmCOInternetDNSv6ServerAddress_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSv6ServerAddress = _XcmCOInternetDNSv6ServerAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1801, 2)
)
_XcmCOInternetDNSv6DynamicUpdate_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSv6DynamicUpdate = _XcmCOInternetDNSv6DynamicUpdate_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1801, 3)
)
_XcmCOInternetDNSv6ResolutionPolicy_ObjectIdentity = ObjectIdentity
xcmCOInternetDNSv6ResolutionPolicy = _XcmCOInternetDNSv6ResolutionPolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1801, 4)
)
_XcmCOInternetIPv6DeallocateAllDynamicResources_ObjectIdentity = ObjectIdentity
xcmCOInternetIPv6DeallocateAllDynamicResources = _XcmCOInternetIPv6DeallocateAllDynamicResources_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 14, 1802)
)
_XcmCOAppletalkSuite_ObjectIdentity = ObjectIdentity
xcmCOAppletalkSuite = _XcmCOAppletalkSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18)
)
_XcmCOAppletalkDatalinks_ObjectIdentity = ObjectIdentity
xcmCOAppletalkDatalinks = _XcmCOAppletalkDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1200)
)
_XcmCOAppletalkLLAP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkLLAP = _XcmCOAppletalkLLAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1201)
)
_XcmCOAppletalkELAP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkELAP = _XcmCOAppletalkELAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1202)
)
_XcmCOAppletalkTLAP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkTLAP = _XcmCOAppletalkTLAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1203)
)
_XcmCOAppletalkPhase_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPhase = _XcmCOAppletalkPhase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1211)
)
_XcmCOAppletalkDDP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkDDP = _XcmCOAppletalkDDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1301)
)
_XcmCOAppletalkDDPAddress_ObjectIdentity = ObjectIdentity
xcmCOAppletalkDDPAddress = _XcmCOAppletalkDDPAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1301, 1)
)
_XcmCOAppletalkDDPSocketAddress_ObjectIdentity = ObjectIdentity
xcmCOAppletalkDDPSocketAddress = _XcmCOAppletalkDDPSocketAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1301, 1, 1)
)
_XcmCOAppletalkDDPDatalinks_ObjectIdentity = ObjectIdentity
xcmCOAppletalkDDPDatalinks = _XcmCOAppletalkDDPDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1301, 12)
)
_XcmCOAppletalkAARP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkAARP = _XcmCOAppletalkAARP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1303)
)
_XcmCOAppletalkTransports_ObjectIdentity = ObjectIdentity
xcmCOAppletalkTransports = _XcmCOAppletalkTransports_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1400)
)
_XcmCOAppletalkATP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkATP = _XcmCOAppletalkATP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1401)
)
_XcmCOAppletalkADSP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkADSP = _XcmCOAppletalkADSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1402)
)
_XcmCOAppletalkRTMP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkRTMP = _XcmCOAppletalkRTMP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1403)
)
_XcmCOAppletalkAEP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkAEP = _XcmCOAppletalkAEP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1404)
)
_XcmCOAppletalkNBP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBP = _XcmCOAppletalkNBP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405)
)
_XcmCOAppletalkNBPHostName_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPHostName = _XcmCOAppletalkNBPHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 1)
)
_XcmCOAppletalkNBPLanguage_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPLanguage = _XcmCOAppletalkNBPLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 3)
)
_XcmCOAppletalkNBPCharset_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPCharset = _XcmCOAppletalkNBPCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 4)
)
_XcmCOAppletalkNBPObject_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPObject = _XcmCOAppletalkNBPObject_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 11)
)
_XcmCOAppletalkNBPType_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPType = _XcmCOAppletalkNBPType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 12)
)
_XcmCOAppletalkNBPZone_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPZone = _XcmCOAppletalkNBPZone_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 13)
)
_XcmCOAppletalkNBPNetwork_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPNetwork = _XcmCOAppletalkNBPNetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 21)
)
_XcmCOAppletalkNBPNode_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPNode = _XcmCOAppletalkNBPNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 22)
)
_XcmCOAppletalkNBPSocket_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPSocket = _XcmCOAppletalkNBPSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 23)
)
_XcmCOAppletalkNBPZoneToNetworks_ObjectIdentity = ObjectIdentity
xcmCOAppletalkNBPZoneToNetworks = _XcmCOAppletalkNBPZoneToNetworks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1405, 31)
)
_XcmCOAppletalkASP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkASP = _XcmCOAppletalkASP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1501)
)
_XcmCOAppletalkZIP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkZIP = _XcmCOAppletalkZIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1502)
)
_XcmCOAppletalkPAP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAP = _XcmCOAppletalkPAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503)
)
_XcmCOAppletalkPAPHostName_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPHostName = _XcmCOAppletalkPAPHostName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 1)
)
_XcmCOAppletalkPAPHostAddress_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPHostAddress = _XcmCOAppletalkPAPHostAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 2)
)
_XcmCOAppletalkPAPListenSocket_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPListenSocket = _XcmCOAppletalkPAPListenSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 3)
)
_XcmCOAppletalkPAPMaxClients_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPMaxClients = _XcmCOAppletalkPAPMaxClients_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 4)
)
_XcmCOAppletalkPAPMaxPrinters_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPMaxPrinters = _XcmCOAppletalkPAPMaxPrinters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 5)
)
_XcmCOAppletalkPAPObject_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPObject = _XcmCOAppletalkPAPObject_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 11)
)
_XcmCOAppletalkPAPType_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPType = _XcmCOAppletalkPAPType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 12)
)
_XcmCOAppletalkPAPZone_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPZone = _XcmCOAppletalkPAPZone_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 13)
)
_XcmCOAppletalkPAPNetwork_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPNetwork = _XcmCOAppletalkPAPNetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 21)
)
_XcmCOAppletalkPAPNode_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPNode = _XcmCOAppletalkPAPNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 22)
)
_XcmCOAppletalkPAPSpool_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPSpool = _XcmCOAppletalkPAPSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 31)
)
_XcmCOAppletalkPAPMaxSpool_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPMaxSpool = _XcmCOAppletalkPAPMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 32)
)
_XcmCOAppletalkPAPJobTimeout_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPJobTimeout = _XcmCOAppletalkPAPJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 40)
)
_XcmCOAppletalkPAPAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPAutoSwitch = _XcmCOAppletalkPAPAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 41)
)
_XcmCOAppletalkPAPBinaryPS_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPBinaryPS = _XcmCOAppletalkPAPBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 42)
)
_XcmCOAppletalkPAPDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPAPDefaultPDL = _XcmCOAppletalkPAPDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1503, 43)
)
_XcmCOAppletalkSNMP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkSNMP = _XcmCOAppletalkSNMP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1510)
)
_XcmCOAppletalkSNMPv1_ObjectIdentity = ObjectIdentity
xcmCOAppletalkSNMPv1 = _XcmCOAppletalkSNMPv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1511)
)
_XcmCOAppletalkSNMPv2_ObjectIdentity = ObjectIdentity
xcmCOAppletalkSNMPv2 = _XcmCOAppletalkSNMPv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1512)
)
_XcmCOAppletalkSNMPv3_ObjectIdentity = ObjectIdentity
xcmCOAppletalkSNMPv3 = _XcmCOAppletalkSNMPv3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1513)
)
_XcmCOAppletalkAFP_ObjectIdentity = ObjectIdentity
xcmCOAppletalkAFP = _XcmCOAppletalkAFP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1601)
)
_XcmCOAppletalkPS_ObjectIdentity = ObjectIdentity
xcmCOAppletalkPS = _XcmCOAppletalkPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1602)
)
_XcmCOAppletalkApplications_ObjectIdentity = ObjectIdentity
xcmCOAppletalkApplications = _XcmCOAppletalkApplications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 18, 1700)
)
_XcmCONetwareSuite_ObjectIdentity = ObjectIdentity
xcmCONetwareSuite = _XcmCONetwareSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19)
)
_XcmCONetwareDatalinks_ObjectIdentity = ObjectIdentity
xcmCONetwareDatalinks = _XcmCONetwareDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1200)
)
_XcmCONetwareIPX_ObjectIdentity = ObjectIdentity
xcmCONetwareIPX = _XcmCONetwareIPX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1301)
)
_XcmCONetwareIPXAddress_ObjectIdentity = ObjectIdentity
xcmCONetwareIPXAddress = _XcmCONetwareIPXAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1301, 1)
)
_XcmCONetwareIPXSocketAddress_ObjectIdentity = ObjectIdentity
xcmCONetwareIPXSocketAddress = _XcmCONetwareIPXSocketAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1301, 1, 1)
)
_XcmCONetwareIPXDatalinks_ObjectIdentity = ObjectIdentity
xcmCONetwareIPXDatalinks = _XcmCONetwareIPXDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1301, 12)
)
_XcmCONetwareIP_ObjectIdentity = ObjectIdentity
xcmCONetwareIP = _XcmCONetwareIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1302)
)
_XcmCONetwareTransports_ObjectIdentity = ObjectIdentity
xcmCONetwareTransports = _XcmCONetwareTransports_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1400)
)
_XcmCONetwareSPX_ObjectIdentity = ObjectIdentity
xcmCONetwareSPX = _XcmCONetwareSPX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1402)
)
_XcmCONetwareRIP_ObjectIdentity = ObjectIdentity
xcmCONetwareRIP = _XcmCONetwareRIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1403)
)
_XcmCONetwareEcho_ObjectIdentity = ObjectIdentity
xcmCONetwareEcho = _XcmCONetwareEcho_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1404)
)
_XcmCONetwareNCP_ObjectIdentity = ObjectIdentity
xcmCONetwareNCP = _XcmCONetwareNCP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1501)
)
_XcmCONetwareNetbios_ObjectIdentity = ObjectIdentity
xcmCONetwareNetbios = _XcmCONetwareNetbios_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1502)
)
_XcmCONetwarePServer_ObjectIdentity = ObjectIdentity
xcmCONetwarePServer = _XcmCONetwarePServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503)
)
_XcmCONetwarePServerName_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerName = _XcmCONetwarePServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 1)
)
_XcmCONetwarePServerPassword_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerPassword = _XcmCONetwarePServerPassword_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 2)
)
_XcmCONetwarePServerQueueName_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerQueueName = _XcmCONetwarePServerQueueName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 3)
)
_XcmCONetwarePServerPollInterval_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerPollInterval = _XcmCONetwarePServerPollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 4)
)
_XcmCONetwarePServerFindFServer_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerFindFServer = _XcmCONetwarePServerFindFServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 5)
)
_XcmCONetwarePServerMaxFServers_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerMaxFServers = _XcmCONetwarePServerMaxFServers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 6)
)
_XcmCONetwarePServerNotify_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerNotify = _XcmCONetwarePServerNotify_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 7)
)
_XcmCONetwarePServerNotifyLocale_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerNotifyLocale = _XcmCONetwarePServerNotifyLocale_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 7, 1)
)
_XcmCONetwarePServerMaxPrinters_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerMaxPrinters = _XcmCONetwarePServerMaxPrinters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 8)
)
_XcmCONetwarePServerSuspendPoll_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerSuspendPoll = _XcmCONetwarePServerSuspendPoll_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 9)
)
_XcmCONetwarePServerSuspendPollInterval_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerSuspendPollInterval = _XcmCONetwarePServerSuspendPollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 10)
)
_XcmCONetwarePServerSpool_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerSpool = _XcmCONetwarePServerSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 31)
)
_XcmCONetwarePServerMaxSpool_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerMaxSpool = _XcmCONetwarePServerMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 32)
)
_XcmCONetwarePServerJobTimeout_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerJobTimeout = _XcmCONetwarePServerJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 40)
)
_XcmCONetwarePServerAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerAutoSwitch = _XcmCONetwarePServerAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 41)
)
_XcmCONetwarePServerBinaryPS_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerBinaryPS = _XcmCONetwarePServerBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 42)
)
_XcmCONetwarePServerDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerDefaultPDL = _XcmCONetwarePServerDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 43)
)
_XcmCONetwarePServerConfigTimeout_ObjectIdentity = ObjectIdentity
xcmCONetwarePServerConfigTimeout = _XcmCONetwarePServerConfigTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1503, 50)
)
_XcmCONetwareFServer_ObjectIdentity = ObjectIdentity
xcmCONetwareFServer = _XcmCONetwareFServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1504)
)
_XcmCONetwareFServerName_ObjectIdentity = ObjectIdentity
xcmCONetwareFServerName = _XcmCONetwareFServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1504, 1)
)
_XcmCONetwareFServerPassword_ObjectIdentity = ObjectIdentity
xcmCONetwareFServerPassword = _XcmCONetwareFServerPassword_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1504, 2)
)
_XcmCONetwareFServerAddress_ObjectIdentity = ObjectIdentity
xcmCONetwareFServerAddress = _XcmCONetwareFServerAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1504, 3)
)
_XcmCONetwareMHS_ObjectIdentity = ObjectIdentity
xcmCONetwareMHS = _XcmCONetwareMHS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1505)
)
_XcmCONetwareBindery_ObjectIdentity = ObjectIdentity
xcmCONetwareBindery = _XcmCONetwareBindery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1507)
)
_XcmCONetwareBinderyLanguage_ObjectIdentity = ObjectIdentity
xcmCONetwareBinderyLanguage = _XcmCONetwareBinderyLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1507, 3)
)
_XcmCONetwareBinderyCharset_ObjectIdentity = ObjectIdentity
xcmCONetwareBinderyCharset = _XcmCONetwareBinderyCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1507, 4)
)
_XcmCONetwareNDS_ObjectIdentity = ObjectIdentity
xcmCONetwareNDS = _XcmCONetwareNDS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1508)
)
_XcmCONetwareNDSTreeName_ObjectIdentity = ObjectIdentity
xcmCONetwareNDSTreeName = _XcmCONetwareNDSTreeName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1508, 1)
)
_XcmCONetwareNDSContext_ObjectIdentity = ObjectIdentity
xcmCONetwareNDSContext = _XcmCONetwareNDSContext_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1508, 2)
)
_XcmCONetwareNDSLanguage_ObjectIdentity = ObjectIdentity
xcmCONetwareNDSLanguage = _XcmCONetwareNDSLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1508, 3)
)
_XcmCONetwareNDSCharset_ObjectIdentity = ObjectIdentity
xcmCONetwareNDSCharset = _XcmCONetwareNDSCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1508, 4)
)
_XcmCONetwareRPrinter_ObjectIdentity = ObjectIdentity
xcmCONetwareRPrinter = _XcmCONetwareRPrinter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1509)
)
_XcmCONetwareRPrinterName_ObjectIdentity = ObjectIdentity
xcmCONetwareRPrinterName = _XcmCONetwareRPrinterName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1509, 1)
)
_XcmCONetwareRPrinterNumber_ObjectIdentity = ObjectIdentity
xcmCONetwareRPrinterNumber = _XcmCONetwareRPrinterNumber_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1509, 2)
)
_XcmCONetwareRPrinterPollInterval_ObjectIdentity = ObjectIdentity
xcmCONetwareRPrinterPollInterval = _XcmCONetwareRPrinterPollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1509, 3)
)
_XcmCONetwareRPrinterJobTimeout_ObjectIdentity = ObjectIdentity
xcmCONetwareRPrinterJobTimeout = _XcmCONetwareRPrinterJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1509, 40)
)
_XcmCONetwareRPrinterAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCONetwareRPrinterAutoSwitch = _XcmCONetwareRPrinterAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1509, 41)
)
_XcmCONetwareRPrinterBinaryPS_ObjectIdentity = ObjectIdentity
xcmCONetwareRPrinterBinaryPS = _XcmCONetwareRPrinterBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1509, 42)
)
_XcmCONetwareRPrinterDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCONetwareRPrinterDefaultPDL = _XcmCONetwareRPrinterDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1509, 43)
)
_XcmCONetwareSNMP_ObjectIdentity = ObjectIdentity
xcmCONetwareSNMP = _XcmCONetwareSNMP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1510)
)
_XcmCONetwareSNMPv1_ObjectIdentity = ObjectIdentity
xcmCONetwareSNMPv1 = _XcmCONetwareSNMPv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1511)
)
_XcmCONetwareSNMPv2_ObjectIdentity = ObjectIdentity
xcmCONetwareSNMPv2 = _XcmCONetwareSNMPv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1512)
)
_XcmCONetwareSNMPv3_ObjectIdentity = ObjectIdentity
xcmCONetwareSNMPv3 = _XcmCONetwareSNMPv3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1513)
)
_XcmCONetwareSAP_ObjectIdentity = ObjectIdentity
xcmCONetwareSAP = _XcmCONetwareSAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1591)
)
_XcmCONetwareSAPInterval_ObjectIdentity = ObjectIdentity
xcmCONetwareSAPInterval = _XcmCONetwareSAPInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1591, 1)
)
_XcmCONetwareSAPNumber_ObjectIdentity = ObjectIdentity
xcmCONetwareSAPNumber = _XcmCONetwareSAPNumber_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1591, 2)
)
_XcmCONetwareSAPValueString_ObjectIdentity = ObjectIdentity
xcmCONetwareSAPValueString = _XcmCONetwareSAPValueString_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1591, 3)
)
_XcmCONetwareSAPUnitName_ObjectIdentity = ObjectIdentity
xcmCONetwareSAPUnitName = _XcmCONetwareSAPUnitName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1591, 4)
)
_XcmCONetwareSAPFormatID_ObjectIdentity = ObjectIdentity
xcmCONetwareSAPFormatID = _XcmCONetwareSAPFormatID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1591, 5)
)
_XcmCONetwareSAPSuspend_ObjectIdentity = ObjectIdentity
xcmCONetwareSAPSuspend = _XcmCONetwareSAPSuspend_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1591, 6)
)
_XcmCONetwareSAPSuspendInterval_ObjectIdentity = ObjectIdentity
xcmCONetwareSAPSuspendInterval = _XcmCONetwareSAPSuspendInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1591, 7)
)
_XcmCONetwareNDSIP_ObjectIdentity = ObjectIdentity
xcmCONetwareNDSIP = _XcmCONetwareNDSIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1600)
)
_XcmCONetwareNDSIPHostname_ObjectIdentity = ObjectIdentity
xcmCONetwareNDSIPHostname = _XcmCONetwareNDSIPHostname_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1600, 1)
)
_XcmCONetwareNDSIPAddress_ObjectIdentity = ObjectIdentity
xcmCONetwareNDSIPAddress = _XcmCONetwareNDSIPAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1600, 2)
)
_XcmCONetwareNDSIPUseHostname_ObjectIdentity = ObjectIdentity
xcmCONetwareNDSIPUseHostname = _XcmCONetwareNDSIPUseHostname_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1600, 3)
)
_XcmCONetwareApplications_ObjectIdentity = ObjectIdentity
xcmCONetwareApplications = _XcmCONetwareApplications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 19, 1700)
)
_XcmCOVinesSuite_ObjectIdentity = ObjectIdentity
xcmCOVinesSuite = _XcmCOVinesSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20)
)
_XcmCOVinesDatalinks_ObjectIdentity = ObjectIdentity
xcmCOVinesDatalinks = _XcmCOVinesDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1200)
)
_XcmCOVinesVIP_ObjectIdentity = ObjectIdentity
xcmCOVinesVIP = _XcmCOVinesVIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1301)
)
_XcmCOVinesVICP_ObjectIdentity = ObjectIdentity
xcmCOVinesVICP = _XcmCOVinesVICP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1302)
)
_XcmCOVinesVARP_ObjectIdentity = ObjectIdentity
xcmCOVinesVARP = _XcmCOVinesVARP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1303)
)
_XcmCOVinesIP_ObjectIdentity = ObjectIdentity
xcmCOVinesIP = _XcmCOVinesIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1311)
)
_XcmCOVinesICMP_ObjectIdentity = ObjectIdentity
xcmCOVinesICMP = _XcmCOVinesICMP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1312)
)
_XcmCOVinesARP_ObjectIdentity = ObjectIdentity
xcmCOVinesARP = _XcmCOVinesARP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1313)
)
_XcmCOVinesVRTP_ObjectIdentity = ObjectIdentity
xcmCOVinesVRTP = _XcmCOVinesVRTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1314)
)
_XcmCOVinesTransports_ObjectIdentity = ObjectIdentity
xcmCOVinesTransports = _XcmCOVinesTransports_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1400)
)
_XcmCOVinesVIPC_ObjectIdentity = ObjectIdentity
xcmCOVinesVIPC = _XcmCOVinesVIPC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1401)
)
_XcmCOVinesVSPP_ObjectIdentity = ObjectIdentity
xcmCOVinesVSPP = _XcmCOVinesVSPP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1402)
)
_XcmCOVinesUDP_ObjectIdentity = ObjectIdentity
xcmCOVinesUDP = _XcmCOVinesUDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1411)
)
_XcmCOVinesTCP_ObjectIdentity = ObjectIdentity
xcmCOVinesTCP = _XcmCOVinesTCP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1412)
)
_XcmCOVinesNetRPC_ObjectIdentity = ObjectIdentity
xcmCOVinesNetRPC = _XcmCOVinesNetRPC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1501)
)
_XcmCOVinesSocket_ObjectIdentity = ObjectIdentity
xcmCOVinesSocket = _XcmCOVinesSocket_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1502)
)
_XcmCOVinesNetbios_ObjectIdentity = ObjectIdentity
xcmCOVinesNetbios = _XcmCOVinesNetbios_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1503)
)
_XcmCOVinesApplications_ObjectIdentity = ObjectIdentity
xcmCOVinesApplications = _XcmCOVinesApplications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1700)
)
_XcmCOVinesPrint_ObjectIdentity = ObjectIdentity
xcmCOVinesPrint = _XcmCOVinesPrint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701)
)
_XcmCOVinesPrintName_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintName = _XcmCOVinesPrintName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 1)
)
_XcmCOVinesPrintPassword_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintPassword = _XcmCOVinesPrintPassword_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 2)
)
_XcmCOVinesPrintPollInterval_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintPollInterval = _XcmCOVinesPrintPollInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 4)
)
_XcmCOVinesPrintMaxServers_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintMaxServers = _XcmCOVinesPrintMaxServers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 5)
)
_XcmCOVinesPrintServerName_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintServerName = _XcmCOVinesPrintServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 6)
)
_XcmCOVinesPrintSpool_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintSpool = _XcmCOVinesPrintSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 31)
)
_XcmCOVinesPrintMaxSpool_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintMaxSpool = _XcmCOVinesPrintMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 32)
)
_XcmCOVinesPrintJobTimeout_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintJobTimeout = _XcmCOVinesPrintJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 40)
)
_XcmCOVinesPrintAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintAutoSwitch = _XcmCOVinesPrintAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 41)
)
_XcmCOVinesPrintBinaryPS_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintBinaryPS = _XcmCOVinesPrintBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 42)
)
_XcmCOVinesPrintDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCOVinesPrintDefaultPDL = _XcmCOVinesPrintDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1701, 43)
)
_XcmCOVinesFiling_ObjectIdentity = ObjectIdentity
xcmCOVinesFiling = _XcmCOVinesFiling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1702)
)
_XcmCOVinesMail_ObjectIdentity = ObjectIdentity
xcmCOVinesMail = _XcmCOVinesMail_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1703)
)
_XcmCOVinesStreetTalk_ObjectIdentity = ObjectIdentity
xcmCOVinesStreetTalk = _XcmCOVinesStreetTalk_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1704)
)
_XcmCOVinesStreetTalkLanguage_ObjectIdentity = ObjectIdentity
xcmCOVinesStreetTalkLanguage = _XcmCOVinesStreetTalkLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1704, 3)
)
_XcmCOVinesStreetTalkCharset_ObjectIdentity = ObjectIdentity
xcmCOVinesStreetTalkCharset = _XcmCOVinesStreetTalkCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 20, 1704, 4)
)
_XcmCONetbiosSuite_ObjectIdentity = ObjectIdentity
xcmCONetbiosSuite = _XcmCONetbiosSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25)
)
_XcmCONetbiosDatalinks_ObjectIdentity = ObjectIdentity
xcmCONetbiosDatalinks = _XcmCONetbiosDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1200)
)
_XcmCONetbiosTransports_ObjectIdentity = ObjectIdentity
xcmCONetbiosTransports = _XcmCONetbiosTransports_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1400)
)
_XcmCONetbiosNBP_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBP = _XcmCONetbiosNBP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501)
)
_XcmCONetbiosNBPName_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPName = _XcmCONetbiosNBPName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 1)
)
_XcmCONetbiosNBPGroupName_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPGroupName = _XcmCONetbiosNBPGroupName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 2)
)
_XcmCONetbiosNBPPassword_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPPassword = _XcmCONetbiosNBPPassword_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 3)
)
_XcmCONetbiosNBPService_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPService = _XcmCONetbiosNBPService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 4)
)
_XcmCONetbiosNBPRemark_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPRemark = _XcmCONetbiosNBPRemark_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 5)
)
_XcmCONetbiosNBPServiceRemark_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPServiceRemark = _XcmCONetbiosNBPServiceRemark_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 6)
)
_XcmCONetbiosNBPIPCRemark_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPIPCRemark = _XcmCONetbiosNBPIPCRemark_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 7)
)
_XcmCONetbiosNBPLanguage_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPLanguage = _XcmCONetbiosNBPLanguage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 8)
)
_XcmCONetbiosNBPCharset_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPCharset = _XcmCONetbiosNBPCharset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 9)
)
_XcmCONetbiosNBPOverNetbeui_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPOverNetbeui = _XcmCONetbiosNBPOverNetbeui_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 11)
)
_XcmCONetbiosNBPOverInternet_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPOverInternet = _XcmCONetbiosNBPOverInternet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 12)
)
_XcmCONetbiosNBPOverNetware_ObjectIdentity = ObjectIdentity
xcmCONetbiosNBPOverNetware = _XcmCONetbiosNBPOverNetware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1501, 13)
)
_XcmCONetbiosSNMP_ObjectIdentity = ObjectIdentity
xcmCONetbiosSNMP = _XcmCONetbiosSNMP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1510)
)
_XcmCONetbiosSNMPv1_ObjectIdentity = ObjectIdentity
xcmCONetbiosSNMPv1 = _XcmCONetbiosSNMPv1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1511)
)
_XcmCONetbiosSNMPv2_ObjectIdentity = ObjectIdentity
xcmCONetbiosSNMPv2 = _XcmCONetbiosSNMPv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1512)
)
_XcmCONetbiosSNMPv3_ObjectIdentity = ObjectIdentity
xcmCONetbiosSNMPv3 = _XcmCONetbiosSNMPv3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1513)
)
_XcmCONetbiosIntEndNode_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntEndNode = _XcmCONetbiosIntEndNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1520)
)
_XcmCONetbiosIntEndNodeAddress_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntEndNodeAddress = _XcmCONetbiosIntEndNodeAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1520, 1)
)
_XcmCONetbiosIntEndNodeSource_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntEndNodeSource = _XcmCONetbiosIntEndNodeSource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1520, 2)
)
_XcmCONetbiosIntNodeType_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntNodeType = _XcmCONetbiosIntNodeType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1520, 3)
)
_XcmCONetbiosIntNodeTypeSource_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntNodeTypeSource = _XcmCONetbiosIntNodeTypeSource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1520, 4)
)
_XcmCONetbiosIntNodeScope_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntNodeScope = _XcmCONetbiosIntNodeScope_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1520, 5)
)
_XcmCONetbiosIntNodeScopeSource_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntNodeScopeSource = _XcmCONetbiosIntNodeScopeSource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1520, 6)
)
_XcmCONetbiosIntNameServer_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntNameServer = _XcmCONetbiosIntNameServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1521)
)
_XcmCONetbiosIntNameServerAddress_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntNameServerAddress = _XcmCONetbiosIntNameServerAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1521, 1)
)
_XcmCONetbiosIntNameServerSource_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntNameServerSource = _XcmCONetbiosIntNameServerSource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1521, 2)
)
_XcmCONetbiosIntDistServer_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntDistServer = _XcmCONetbiosIntDistServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1522)
)
_XcmCONetbiosIntDistServerAddress_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntDistServerAddress = _XcmCONetbiosIntDistServerAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1522, 1)
)
_XcmCONetbiosIntDistServerSource_ObjectIdentity = ObjectIdentity
xcmCONetbiosIntDistServerSource = _XcmCONetbiosIntDistServerSource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1522, 2)
)
_XcmCONetbiosSAP_ObjectIdentity = ObjectIdentity
xcmCONetbiosSAP = _XcmCONetbiosSAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1591)
)
_XcmCONetbiosSAPInterval_ObjectIdentity = ObjectIdentity
xcmCONetbiosSAPInterval = _XcmCONetbiosSAPInterval_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1591, 1)
)
_XcmCONetbiosApplications_ObjectIdentity = ObjectIdentity
xcmCONetbiosApplications = _XcmCONetbiosApplications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1700)
)
_XcmCONetbiosSMB_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMB = _XcmCONetbiosSMB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1701)
)
_XcmCONetbiosSMBPClient_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPClient = _XcmCONetbiosSMBPClient_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1702)
)
_XcmCONetbiosSMBPClientMaxConns_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPClientMaxConns = _XcmCONetbiosSMBPClientMaxConns_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1702, 4)
)
_XcmCONetbiosSMBPClientSpool_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPClientSpool = _XcmCONetbiosSMBPClientSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1702, 31)
)
_XcmCONetbiosSMBPClientMaxSpool_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPClientMaxSpool = _XcmCONetbiosSMBPClientMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1702, 32)
)
_XcmCONetbiosSMBPClientJobTimeout_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPClientJobTimeout = _XcmCONetbiosSMBPClientJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1702, 40)
)
_XcmCONetbiosSMBPClientAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPClientAutoSwitch = _XcmCONetbiosSMBPClientAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1702, 41)
)
_XcmCONetbiosSMBPClientBinaryPS_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPClientBinaryPS = _XcmCONetbiosSMBPClientBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1702, 42)
)
_XcmCONetbiosSMBPClientDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPClientDefaultPDL = _XcmCONetbiosSMBPClientDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1702, 43)
)
_XcmCONetbiosSMBPServer_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPServer = _XcmCONetbiosSMBPServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1703)
)
_XcmCONetbiosSMBPServerMaxConns_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPServerMaxConns = _XcmCONetbiosSMBPServerMaxConns_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1703, 4)
)
_XcmCONetbiosSMBPServerSpool_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPServerSpool = _XcmCONetbiosSMBPServerSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1703, 31)
)
_XcmCONetbiosSMBPServerMaxSpool_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPServerMaxSpool = _XcmCONetbiosSMBPServerMaxSpool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1703, 32)
)
_XcmCONetbiosSMBPServerJobTimeout_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPServerJobTimeout = _XcmCONetbiosSMBPServerJobTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1703, 40)
)
_XcmCONetbiosSMBPServerAutoSwitch_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPServerAutoSwitch = _XcmCONetbiosSMBPServerAutoSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1703, 41)
)
_XcmCONetbiosSMBPServerBinaryPS_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPServerBinaryPS = _XcmCONetbiosSMBPServerBinaryPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1703, 42)
)
_XcmCONetbiosSMBPServerDefaultPDL_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBPServerDefaultPDL = _XcmCONetbiosSMBPServerDefaultPDL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1703, 43)
)
_XcmCONetbiosSMBFClient_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBFClient = _XcmCONetbiosSMBFClient_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1704)
)
_XcmCONetbiosSMBFServer_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBFServer = _XcmCONetbiosSMBFServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1705)
)
_XcmCONetbiosSMBFServerName_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBFServerName = _XcmCONetbiosSMBFServerName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1705, 1)
)
_XcmCONetbiosSMBDomain_ObjectIdentity = ObjectIdentity
xcmCONetbiosSMBDomain = _XcmCONetbiosSMBDomain_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 25, 1706)
)
_XcmCONetbeuiSuite_ObjectIdentity = ObjectIdentity
xcmCONetbeuiSuite = _XcmCONetbeuiSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 26)
)
_XcmCONetbeuiDatalinks_ObjectIdentity = ObjectIdentity
xcmCONetbeuiDatalinks = _XcmCONetbeuiDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 26, 1200)
)
_XcmCONetbeuiLLC_ObjectIdentity = ObjectIdentity
xcmCONetbeuiLLC = _XcmCONetbeuiLLC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 26, 1201)
)
_XcmCONetbeuiDLC_ObjectIdentity = ObjectIdentity
xcmCONetbeuiDLC = _XcmCONetbeuiDLC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 26, 1202)
)
_XcmCOSerialSuite_ObjectIdentity = ObjectIdentity
xcmCOSerialSuite = _XcmCOSerialSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27)
)
_XcmCOSerialPhysical_ObjectIdentity = ObjectIdentity
xcmCOSerialPhysical = _XcmCOSerialPhysical_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1100)
)
_XcmCOSerialSignalType_ObjectIdentity = ObjectIdentity
xcmCOSerialSignalType = _XcmCOSerialSignalType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1101)
)
_XcmCOSerialSignalOverride_ObjectIdentity = ObjectIdentity
xcmCOSerialSignalOverride = _XcmCOSerialSignalOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1101, 1)
)
_XcmCOSerialSignalDetected_ObjectIdentity = ObjectIdentity
xcmCOSerialSignalDetected = _XcmCOSerialSignalDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1101, 2)
)
_XcmCOSerialSignalAdaptive_ObjectIdentity = ObjectIdentity
xcmCOSerialSignalAdaptive = _XcmCOSerialSignalAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1101, 3)
)
_XcmCOSerialSignalSupport_ObjectIdentity = ObjectIdentity
xcmCOSerialSignalSupport = _XcmCOSerialSignalSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1101, 4)
)
_XcmCOSerialDevice_ObjectIdentity = ObjectIdentity
xcmCOSerialDevice = _XcmCOSerialDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1102)
)
_XcmCOSerialDeviceName_ObjectIdentity = ObjectIdentity
xcmCOSerialDeviceName = _XcmCOSerialDeviceName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1102, 1)
)
_XcmCOSerialSpeed_ObjectIdentity = ObjectIdentity
xcmCOSerialSpeed = _XcmCOSerialSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1103)
)
_XcmCOSerialSpeedOverride_ObjectIdentity = ObjectIdentity
xcmCOSerialSpeedOverride = _XcmCOSerialSpeedOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1103, 1)
)
_XcmCOSerialSpeedDetected_ObjectIdentity = ObjectIdentity
xcmCOSerialSpeedDetected = _XcmCOSerialSpeedDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1103, 2)
)
_XcmCOSerialSpeedAdaptive_ObjectIdentity = ObjectIdentity
xcmCOSerialSpeedAdaptive = _XcmCOSerialSpeedAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1103, 3)
)
_XcmCOSerialSpeedSupport_ObjectIdentity = ObjectIdentity
xcmCOSerialSpeedSupport = _XcmCOSerialSpeedSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1103, 4)
)
_XcmCOSerialMinSpeed_ObjectIdentity = ObjectIdentity
xcmCOSerialMinSpeed = _XcmCOSerialMinSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1103, 5)
)
_XcmCOSerialMaxSpeed_ObjectIdentity = ObjectIdentity
xcmCOSerialMaxSpeed = _XcmCOSerialMaxSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1103, 6)
)
_XcmCOSerialBidirectional_ObjectIdentity = ObjectIdentity
xcmCOSerialBidirectional = _XcmCOSerialBidirectional_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1104)
)
_XcmCOSerialInputTimeout_ObjectIdentity = ObjectIdentity
xcmCOSerialInputTimeout = _XcmCOSerialInputTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1105)
)
_XcmCOSerialOutputTimeout_ObjectIdentity = ObjectIdentity
xcmCOSerialOutputTimeout = _XcmCOSerialOutputTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1106)
)
_XcmCOSerialConnectorType_ObjectIdentity = ObjectIdentity
xcmCOSerialConnectorType = _XcmCOSerialConnectorType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1107)
)
_XcmCOSerialConnectorOverride_ObjectIdentity = ObjectIdentity
xcmCOSerialConnectorOverride = _XcmCOSerialConnectorOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1107, 1)
)
_XcmCOSerialConnectorDetected_ObjectIdentity = ObjectIdentity
xcmCOSerialConnectorDetected = _XcmCOSerialConnectorDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1107, 2)
)
_XcmCOSerialConnectorAdaptive_ObjectIdentity = ObjectIdentity
xcmCOSerialConnectorAdaptive = _XcmCOSerialConnectorAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1107, 3)
)
_XcmCOSerialMinInputChars_ObjectIdentity = ObjectIdentity
xcmCOSerialMinInputChars = _XcmCOSerialMinInputChars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1108)
)
_XcmCOSerialMaxInputChars_ObjectIdentity = ObjectIdentity
xcmCOSerialMaxInputChars = _XcmCOSerialMaxInputChars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1109)
)
_XcmCOSerialParity_ObjectIdentity = ObjectIdentity
xcmCOSerialParity = _XcmCOSerialParity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1111)
)
_XcmCOSerialDataBits_ObjectIdentity = ObjectIdentity
xcmCOSerialDataBits = _XcmCOSerialDataBits_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1112)
)
_XcmCOSerialFlowControl_ObjectIdentity = ObjectIdentity
xcmCOSerialFlowControl = _XcmCOSerialFlowControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1113)
)
_XcmCOSerialStartBits_ObjectIdentity = ObjectIdentity
xcmCOSerialStartBits = _XcmCOSerialStartBits_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1114)
)
_XcmCOSerialStopBits_ObjectIdentity = ObjectIdentity
xcmCOSerialStopBits = _XcmCOSerialStopBits_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1115)
)
_XcmCOSerialInputPrime_ObjectIdentity = ObjectIdentity
xcmCOSerialInputPrime = _XcmCOSerialInputPrime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1116)
)
_XcmCOSerialDTR_ObjectIdentity = ObjectIdentity
xcmCOSerialDTR = _XcmCOSerialDTR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1121)
)
_XcmCOSerialDSR_ObjectIdentity = ObjectIdentity
xcmCOSerialDSR = _XcmCOSerialDSR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1122)
)
_XcmCOSerialCTS_ObjectIdentity = ObjectIdentity
xcmCOSerialCTS = _XcmCOSerialCTS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1123)
)
_XcmCOSerialRTS_ObjectIdentity = ObjectIdentity
xcmCOSerialRTS = _XcmCOSerialRTS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1124)
)
_XcmCOSerialDatalinks_ObjectIdentity = ObjectIdentity
xcmCOSerialDatalinks = _XcmCOSerialDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1200)
)
_XcmCOSerialProtocol_ObjectIdentity = ObjectIdentity
xcmCOSerialProtocol = _XcmCOSerialProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 27, 1200, 1)
)
_XcmCOParallelSuite_ObjectIdentity = ObjectIdentity
xcmCOParallelSuite = _XcmCOParallelSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28)
)
_XcmCOParallelPhysical_ObjectIdentity = ObjectIdentity
xcmCOParallelPhysical = _XcmCOParallelPhysical_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1100)
)
_XcmCOParallelSignalType_ObjectIdentity = ObjectIdentity
xcmCOParallelSignalType = _XcmCOParallelSignalType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1101)
)
_XcmCOParallelSignalOverride_ObjectIdentity = ObjectIdentity
xcmCOParallelSignalOverride = _XcmCOParallelSignalOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1101, 1)
)
_XcmCOParallelSignalDetected_ObjectIdentity = ObjectIdentity
xcmCOParallelSignalDetected = _XcmCOParallelSignalDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1101, 2)
)
_XcmCOParallelSignalAdaptive_ObjectIdentity = ObjectIdentity
xcmCOParallelSignalAdaptive = _XcmCOParallelSignalAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1101, 3)
)
_XcmCOParallelSignalSupport_ObjectIdentity = ObjectIdentity
xcmCOParallelSignalSupport = _XcmCOParallelSignalSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1101, 4)
)
_XcmCOParallelDevice_ObjectIdentity = ObjectIdentity
xcmCOParallelDevice = _XcmCOParallelDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1102)
)
_XcmCOParallelDeviceName_ObjectIdentity = ObjectIdentity
xcmCOParallelDeviceName = _XcmCOParallelDeviceName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1102, 1)
)
_XcmCOParallelDeviceID_ObjectIdentity = ObjectIdentity
xcmCOParallelDeviceID = _XcmCOParallelDeviceID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1102, 2)
)
_XcmCOParallelSpeed_ObjectIdentity = ObjectIdentity
xcmCOParallelSpeed = _XcmCOParallelSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1103)
)
_XcmCOParallelSpeedOverride_ObjectIdentity = ObjectIdentity
xcmCOParallelSpeedOverride = _XcmCOParallelSpeedOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1103, 1)
)
_XcmCOParallelSpeedDetected_ObjectIdentity = ObjectIdentity
xcmCOParallelSpeedDetected = _XcmCOParallelSpeedDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1103, 2)
)
_XcmCOParallelSpeedAdaptive_ObjectIdentity = ObjectIdentity
xcmCOParallelSpeedAdaptive = _XcmCOParallelSpeedAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1103, 3)
)
_XcmCOParallelSpeedSupport_ObjectIdentity = ObjectIdentity
xcmCOParallelSpeedSupport = _XcmCOParallelSpeedSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1103, 4)
)
_XcmCOParallelMinSpeed_ObjectIdentity = ObjectIdentity
xcmCOParallelMinSpeed = _XcmCOParallelMinSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1103, 5)
)
_XcmCOParallelMaxSpeed_ObjectIdentity = ObjectIdentity
xcmCOParallelMaxSpeed = _XcmCOParallelMaxSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1103, 6)
)
_XcmCOParallelBidirectional_ObjectIdentity = ObjectIdentity
xcmCOParallelBidirectional = _XcmCOParallelBidirectional_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1104)
)
_XcmCOParallelInputTimeout_ObjectIdentity = ObjectIdentity
xcmCOParallelInputTimeout = _XcmCOParallelInputTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1105)
)
_XcmCOParallelOutputTimeout_ObjectIdentity = ObjectIdentity
xcmCOParallelOutputTimeout = _XcmCOParallelOutputTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1106)
)
_XcmCOParallelConnectorType_ObjectIdentity = ObjectIdentity
xcmCOParallelConnectorType = _XcmCOParallelConnectorType_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1107)
)
_XcmCOParallelConnectorOverride_ObjectIdentity = ObjectIdentity
xcmCOParallelConnectorOverride = _XcmCOParallelConnectorOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1107, 1)
)
_XcmCOParallelConnectorDetected_ObjectIdentity = ObjectIdentity
xcmCOParallelConnectorDetected = _XcmCOParallelConnectorDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1107, 2)
)
_XcmCOParallelConnectorAdaptive_ObjectIdentity = ObjectIdentity
xcmCOParallelConnectorAdaptive = _XcmCOParallelConnectorAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1107, 3)
)
_XcmCOParallelMinInputChars_ObjectIdentity = ObjectIdentity
xcmCOParallelMinInputChars = _XcmCOParallelMinInputChars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1108)
)
_XcmCOParallelMaxInputChars_ObjectIdentity = ObjectIdentity
xcmCOParallelMaxInputChars = _XcmCOParallelMaxInputChars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1109)
)
_XcmCOParallelParity_ObjectIdentity = ObjectIdentity
xcmCOParallelParity = _XcmCOParallelParity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1111)
)
_XcmCOParallelDataBits_ObjectIdentity = ObjectIdentity
xcmCOParallelDataBits = _XcmCOParallelDataBits_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1112)
)
_XcmCOParallelFlowControl_ObjectIdentity = ObjectIdentity
xcmCOParallelFlowControl = _XcmCOParallelFlowControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1113)
)
_XcmCOParallelInputPrime_ObjectIdentity = ObjectIdentity
xcmCOParallelInputPrime = _XcmCOParallelInputPrime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1116)
)
_XcmCOParallelHandshake_ObjectIdentity = ObjectIdentity
xcmCOParallelHandshake = _XcmCOParallelHandshake_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1117)
)
_XcmCOParallelDataStrobe_ObjectIdentity = ObjectIdentity
xcmCOParallelDataStrobe = _XcmCOParallelDataStrobe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1118)
)
_XcmCOParallelDatalinks_ObjectIdentity = ObjectIdentity
xcmCOParallelDatalinks = _XcmCOParallelDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1200)
)
_XcmCOParallelProtocol_ObjectIdentity = ObjectIdentity
xcmCOParallelProtocol = _XcmCOParallelProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 28, 1200, 1)
)
_XcmCODirectPrintSuite_ObjectIdentity = ObjectIdentity
xcmCODirectPrintSuite = _XcmCODirectPrintSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 29)
)
_XcmCODirectPrintPhysical_ObjectIdentity = ObjectIdentity
xcmCODirectPrintPhysical = _XcmCODirectPrintPhysical_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 29, 1100)
)
_XcmCODirectPrintDatalinks_ObjectIdentity = ObjectIdentity
xcmCODirectPrintDatalinks = _XcmCODirectPrintDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 29, 1200)
)
_XcmCODirectPrintProtocol_ObjectIdentity = ObjectIdentity
xcmCODirectPrintProtocol = _XcmCODirectPrintProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 29, 1200, 1)
)
_XcmCOUsbSuite_ObjectIdentity = ObjectIdentity
xcmCOUsbSuite = _XcmCOUsbSuite_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30)
)
_XcmCOUsbPhysical_ObjectIdentity = ObjectIdentity
xcmCOUsbPhysical = _XcmCOUsbPhysical_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1100)
)
_XcmCOUsbDevice_ObjectIdentity = ObjectIdentity
xcmCOUsbDevice = _XcmCOUsbDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1102)
)
_XcmCOUsbDeviceName_ObjectIdentity = ObjectIdentity
xcmCOUsbDeviceName = _XcmCOUsbDeviceName_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1102, 1)
)
_XcmCOUsbSpeed_ObjectIdentity = ObjectIdentity
xcmCOUsbSpeed = _XcmCOUsbSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1103)
)
_XcmCOUsbSpeedOverride_ObjectIdentity = ObjectIdentity
xcmCOUsbSpeedOverride = _XcmCOUsbSpeedOverride_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1103, 1)
)
_XcmCOUsbSpeedDetected_ObjectIdentity = ObjectIdentity
xcmCOUsbSpeedDetected = _XcmCOUsbSpeedDetected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1103, 2)
)
_XcmCOUsbSpeedAdaptive_ObjectIdentity = ObjectIdentity
xcmCOUsbSpeedAdaptive = _XcmCOUsbSpeedAdaptive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1103, 3)
)
_XcmCOUsbSpeedSupport_ObjectIdentity = ObjectIdentity
xcmCOUsbSpeedSupport = _XcmCOUsbSpeedSupport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1103, 4)
)
_XcmCOUsbMinSpeed_ObjectIdentity = ObjectIdentity
xcmCOUsbMinSpeed = _XcmCOUsbMinSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1103, 5)
)
_XcmCOUsbMaxSpeed_ObjectIdentity = ObjectIdentity
xcmCOUsbMaxSpeed = _XcmCOUsbMaxSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1103, 6)
)
_XcmCOUsbBidirectional_ObjectIdentity = ObjectIdentity
xcmCOUsbBidirectional = _XcmCOUsbBidirectional_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1104)
)
_XcmCOUsbInputTimeout_ObjectIdentity = ObjectIdentity
xcmCOUsbInputTimeout = _XcmCOUsbInputTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1105)
)
_XcmCOUsbOutputTimeout_ObjectIdentity = ObjectIdentity
xcmCOUsbOutputTimeout = _XcmCOUsbOutputTimeout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1106)
)
_XcmCOUsbMinInputChars_ObjectIdentity = ObjectIdentity
xcmCOUsbMinInputChars = _XcmCOUsbMinInputChars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1108)
)
_XcmCOUsbMaxInputChars_ObjectIdentity = ObjectIdentity
xcmCOUsbMaxInputChars = _XcmCOUsbMaxInputChars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1109)
)
_XcmCOUsbDatalinks_ObjectIdentity = ObjectIdentity
xcmCOUsbDatalinks = _XcmCOUsbDatalinks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1200)
)
_XcmCOUsbProtocol_ObjectIdentity = ObjectIdentity
xcmCOUsbProtocol = _XcmCOUsbProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 30, 1200, 1)
)
_XCmCommsConfigDummy_ObjectIdentity = ObjectIdentity
xCmCommsConfigDummy = _XCmCommsConfigDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 999)
)
_XCmSnmpNetbiosAddress_Type = XcmSnmpNetbiosAddress
_XCmSnmpNetbiosAddress_Object = MibScalar
xCmSnmpNetbiosAddress = _XCmSnmpNetbiosAddress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 999, 1),
    _XCmSnmpNetbiosAddress_Type()
)
xCmSnmpNetbiosAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSnmpNetbiosAddress.setStatus("current")
if mibBuilder.loadTexts:
    xCmSnmpNetbiosAddress.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsConfigGroupSupport_Type = XcmCommsConfigGroupSupport
_XCmCommsConfigGroupSupport_Object = MibScalar
xCmCommsConfigGroupSupport = _XCmCommsConfigGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 999, 2),
    _XCmCommsConfigGroupSupport_Type()
)
xCmCommsConfigGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsConfigGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsConfigGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsDirRecordType_Type = XcmCommsDirRecordType
_XCmCommsDirRecordType_Object = MibScalar
xCmCommsDirRecordType = _XCmCommsDirRecordType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 999, 3),
    _XCmCommsDirRecordType_Type()
)
xCmCommsDirRecordType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsDirRecordType.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsDirRecordType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsDirAttributeType_Type = XcmCommsDirAttributeType
_XCmCommsDirAttributeType_Object = MibScalar
xCmCommsDirAttributeType = _XCmCommsDirAttributeType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 999, 4),
    _XCmCommsDirAttributeType_Type()
)
xCmCommsDirAttributeType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsDirAttributeType.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsDirAttributeType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmCommsLDAPAttributeType_Type = XcmCommsLDAPAttributeType
_XCmCommsLDAPAttributeType_Object = MibScalar
xCmCommsLDAPAttributeType = _XCmCommsLDAPAttributeType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 999, 5),
    _XCmCommsLDAPAttributeType_Type()
)
xCmCommsLDAPAttributeType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmCommsLDAPAttributeType.setStatus("current")
if mibBuilder.loadTexts:
    xCmCommsLDAPAttributeType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSnmpIPHostnameAddress_Type = XcmSnmpIPHostnameAddress
_XCmSnmpIPHostnameAddress_Object = MibScalar
xCmSnmpIPHostnameAddress = _XCmSnmpIPHostnameAddress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 63, 999, 6),
    _XCmSnmpIPHostnameAddress_Type()
)
xCmSnmpIPHostnameAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSnmpIPHostnameAddress.setStatus("current")
if mibBuilder.loadTexts:
    xCmSnmpIPHostnameAddress.setDescription("""\
Dummy - DO NOT USE
""")
_XcmCommsConfigMIB_ObjectIdentity = ObjectIdentity
xcmCommsConfigMIB = _XcmCommsConfigMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64)
)
if mibBuilder.loadTexts:
    xcmCommsConfigMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigMIB.setDescription("""\
Version: 5.11.pub The MIB module which supports active configuration discovery
of communications protocol stacks, communications end system applications,
communications intermediate systems, and communications gateways for network
accessible host systems. Usage: Note that throughout this MIB module, the INDEX
clauses referring to 'hrDeviceIndex' for the 'hrDeviceTable' (Devices Group) of
the Host Resources MIB (RFC 2790) SHALL specify host system CPUs (ie,
'hrDeviceProcessor') and shall NOT specify host system 'network interfaces',
with entries in the 'ifTable' (Interfaces Group) of MIB-II (RFC 1213).
Copyright (C) 1996-2002 Xerox Corporation. All Rights Reserved.
""")
_XcmCommsConfigMIBConformance_ObjectIdentity = ObjectIdentity
xcmCommsConfigMIBConformance = _XcmCommsConfigMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2)
)
_XcmCommsConfigMIBGroups_ObjectIdentity = ObjectIdentity
xcmCommsConfigMIBGroups = _XcmCommsConfigMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2, 2)
)
_XcmCommsConfig_ObjectIdentity = ObjectIdentity
xcmCommsConfig = _XcmCommsConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3)
)
_XcmCommsConfigTable_Object = MibTable
xcmCommsConfigTable = _XcmCommsConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3, 2)
)
if mibBuilder.loadTexts:
    xcmCommsConfigTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigTable.setDescription("""\
A table of the communications engines installed and (possibly) running on
platforms (ie, CPUs) on this host system.
""")
_XcmCommsConfigEntry_Object = MibTableRow
xcmCommsConfigEntry = _XcmCommsConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3, 2, 1)
)
xcmCommsConfigEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsConfigEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigEntry.setDescription("""\
An entry for a communications engine installed and (possibly) running on a
platform (ie, CPU) on this host system. Usage: Note that values of
'hrDeviceIndex' used to reference entries in the 'xcmCommsEngineTable' SHALL
reference entries in the 'hrDeviceTable' with 'hrDeviceType' equal to
'hrDeviceProcessor' (representing host system CPUs and therefore also having
corresponding entries in the 'hrProcessorTable').
""")
_XcmCommsConfigRowStatus_Type = RowStatus
_XcmCommsConfigRowStatus_Object = MibTableColumn
xcmCommsConfigRowStatus = _XcmCommsConfigRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3, 2, 1, 1),
    _XcmCommsConfigRowStatus_Type()
)
xcmCommsConfigRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsConfigRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigRowStatus.setDescription("""\
This object displays the status of individual conceptual rows in the
'xcmCommsConfigTable'. Usage: 'xcmCommsConfigRowStatus' is 'read-only' because
these conceptual rows shall NOT be deleted.
""")
_XcmCommsConfigActiveOptionFirst_Type = Cardinal32
_XcmCommsConfigActiveOptionFirst_Object = MibTableColumn
xcmCommsConfigActiveOptionFirst = _XcmCommsConfigActiveOptionFirst_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3, 2, 1, 2),
    _XcmCommsConfigActiveOptionFirst_Type()
)
xcmCommsConfigActiveOptionFirst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsConfigActiveOptionFirst.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigActiveOptionFirst.setReference("""\
See: 'xcmCommsConfigActiveOptionLast'
""")
if mibBuilder.loadTexts:
    xcmCommsConfigActiveOptionFirst.setDescription("""\
The value of 'xcmCommsOptionIndex' corresponding to the first active
configuration option (in 'xcmCommsOptionTable'), or zero if this communications
engine does NOT require such information. Usage: This 'chain' represents
currently active configuration options of this communications engine.
""")
_XcmCommsConfigActiveOptionLast_Type = Cardinal32
_XcmCommsConfigActiveOptionLast_Object = MibTableColumn
xcmCommsConfigActiveOptionLast = _XcmCommsConfigActiveOptionLast_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3, 2, 1, 3),
    _XcmCommsConfigActiveOptionLast_Type()
)
xcmCommsConfigActiveOptionLast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsConfigActiveOptionLast.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigActiveOptionLast.setReference("""\
See: 'xcmCommsConfigActiveOptionFirst'
""")
if mibBuilder.loadTexts:
    xcmCommsConfigActiveOptionLast.setDescription("""\
The value of 'xcmCommsOptionIndex' corresponding to the last active
configuration option (in 'xcmCommsOptionTable'), or zero if this communications
engine does NOT require such information. Usage: This 'chain' represents
currently active configuration options of this communications engine. Usage:
The last entry index explicitly bounds the valid range of
'xcmCommsOptionIndex'. This is the value of the numerically highest entry
index, NOT necessarily the 'logically last' entry index in the structured tree
in 'xcmCommsOptionTable'.
""")


class _XcmCommsConfigGroupSupport_Type(XcmCommsConfigGroupSupport):
    """Custom type xcmCommsConfigGroupSupport based on XcmCommsConfigGroupSupport"""
    defaultValue = 1


_XcmCommsConfigGroupSupport_Object = MibTableColumn
xcmCommsConfigGroupSupport = _XcmCommsConfigGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3, 2, 1, 4),
    _XcmCommsConfigGroupSupport_Type()
)
xcmCommsConfigGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsConfigGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigGroupSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Comms Config MIB object groups supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask.
Usage: Conforming management agents SHALL accurately report their support for
XCMI Comms Config MIB object groups.
""")
_XcmCommsConfigCreateSupport_Type = XcmCommsConfigGroupSupport
_XcmCommsConfigCreateSupport_Object = MibTableColumn
xcmCommsConfigCreateSupport = _XcmCommsConfigCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3, 2, 1, 5),
    _XcmCommsConfigCreateSupport_Type()
)
xcmCommsConfigCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsConfigCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigCreateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Comms Config MIB object groups supported for dynamic row creation
(via '...RowStatus') by this management agent implementation (ie, version) on
this host system, specified in a bit-mask. Usage: Conforming management agents
SHALL accurately report their support for XCMI Comms Config MIB object groups.
""")
_XcmCommsConfigUpdateSupport_Type = XcmCommsConfigGroupSupport
_XcmCommsConfigUpdateSupport_Object = MibTableColumn
xcmCommsConfigUpdateSupport = _XcmCommsConfigUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 3, 2, 1, 6),
    _XcmCommsConfigUpdateSupport_Type()
)
xcmCommsConfigUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsConfigUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigUpdateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Comms Config MIB object groups supported for existing row update
(via SNMP Set-Request PDUs) by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. Usage: Conforming
management agents SHALL accurately report their support for XCMI Comms Config
MIB object groups.
""")
_XcmCommsOption_ObjectIdentity = ObjectIdentity
xcmCommsOption = _XcmCommsOption_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4)
)
_XcmCommsOptionTable_Object = MibTable
xcmCommsOptionTable = _XcmCommsOptionTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2)
)
if mibBuilder.loadTexts:
    xcmCommsOptionTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionTable.setDescription("""\
A table containing information on installation, configuration, or other aspects
of communications options on this host system.
""")
_XcmCommsOptionEntry_Object = MibTableRow
xcmCommsOptionEntry = _XcmCommsOptionEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1)
)
xcmCommsOptionEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsOptionIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsOptionEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionEntry.setDescription("""\
An entry containing information on installation, configuration, or other
aspects of communications options on this host system.
""")
_XcmCommsOptionIndex_Type = Ordinal32
_XcmCommsOptionIndex_Object = MibTableColumn
xcmCommsOptionIndex = _XcmCommsOptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 1),
    _XcmCommsOptionIndex_Type()
)
xcmCommsOptionIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsOptionIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmCommsOptionTable'.
""")
_XcmCommsOptionRowStatus_Type = RowStatus
_XcmCommsOptionRowStatus_Object = MibTableColumn
xcmCommsOptionRowStatus = _XcmCommsOptionRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 2),
    _XcmCommsOptionRowStatus_Type()
)
xcmCommsOptionRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionRowStatus.setDescription("""\
This object displays the status of individual conceptual rows in the
'xcmCommsOptionTable'.
""")


class _XcmCommsOptionTypeOID_Type(ObjectIdentifier):
    """Custom type xcmCommsOptionTypeOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmCommsOptionTypeOID_Object = MibTableColumn
xcmCommsOptionTypeOID = _XcmCommsOptionTypeOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 3),
    _XcmCommsOptionTypeOID_Type()
)
xcmCommsOptionTypeOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionTypeOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionTypeOID.setDescription("""\
An unambiguous communications option type, used by system administrators and
end users to identify this communications option. Usage: Since this
communications option type is specified as an object identifier, it MAY be
taken from any IETF, Xerox, third- party, or product-specific MIB, or it MAY
simply be any IETF SMIv2-style 'autonomous type'.
""")


class _XcmCommsOptionValueSyntax_Type(XcmGenOptionValueSyntax):
    """Custom type xcmCommsOptionValueSyntax based on XcmGenOptionValueSyntax"""


_XcmCommsOptionValueSyntax_Object = MibTableColumn
xcmCommsOptionValueSyntax = _XcmCommsOptionValueSyntax_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 4),
    _XcmCommsOptionValueSyntax_Type()
)
xcmCommsOptionValueSyntax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionValueSyntax.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionValueSyntax.setDescription("""\
A communications option value syntax, used by system administrators and end
users to specify the correct value syntax for this communications option.
Usage: This communications option value syntax is used to select which of the
following three objects shall be used to contain the value of this
communications option.
""")
_XcmCommsOptionValueInteger_Type = Integer32
_XcmCommsOptionValueInteger_Object = MibTableColumn
xcmCommsOptionValueInteger = _XcmCommsOptionValueInteger_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 5),
    _XcmCommsOptionValueInteger_Type()
)
xcmCommsOptionValueInteger.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionValueInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionValueInteger.setReference("""\
See: 'xcmCommsOptionValueSyntax' and 'xcmCommsOptionTypeOID'
""")
if mibBuilder.loadTexts:
    xcmCommsOptionValueInteger.setDescription("""\
A communications option value integer, used by system administrators and end
users to specify the current value for a communications option with a base
value syntax of 'INTEGER'.
""")


class _XcmCommsOptionValueOID_Type(ObjectIdentifier):
    """Custom type xcmCommsOptionValueOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmCommsOptionValueOID_Object = MibTableColumn
xcmCommsOptionValueOID = _XcmCommsOptionValueOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 6),
    _XcmCommsOptionValueOID_Type()
)
xcmCommsOptionValueOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionValueOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionValueOID.setReference("""\
See: 'xcmCommsOptionValueSyntax' and 'xcmCommsOptionTypeOID'
""")
if mibBuilder.loadTexts:
    xcmCommsOptionValueOID.setDescription("""\
A communications option value OID (object identifier), used by system
administrators and end users to specify the current value for a communications
option with a base value syntax of 'OBJECT IDENTIFIER'.
""")


class _XcmCommsOptionValueString_Type(OctetString):
    """Custom type xcmCommsOptionValueString based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmCommsOptionValueString_Type.__name__ = "OctetString"
_XcmCommsOptionValueString_Object = MibTableColumn
xcmCommsOptionValueString = _XcmCommsOptionValueString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 7),
    _XcmCommsOptionValueString_Type()
)
xcmCommsOptionValueString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionValueString.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionValueString.setReference("""\
See: 'xcmCommsOptionValueSyntax' and 'xcmCommsOptionTypeOID' See:
'xcmGenFixedLocalizationIndex' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsOptionValueString.setDescription("""\
A communications option value string, used by system administrators and end
users to specify the current value for a communications option with a base
value syntax of 'OCTET STRING'. Usage: This object is of type
'XcmFixedLocaleDisplayString' (if 'xcmCommsOptionValueLocalization' is zero) or
'XcmNamedLocaleUtf8String' (if 'xcmCommsOptionValueLocalization' is non-zero).
Usage: Conformant implementations MUST encrypt passwords, keys, and other
security information stored in this string object.
""")
_XcmCommsOptionValueLocalization_Type = Cardinal32
_XcmCommsOptionValueLocalization_Object = MibTableColumn
xcmCommsOptionValueLocalization = _XcmCommsOptionValueLocalization_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 8),
    _XcmCommsOptionValueLocalization_Type()
)
xcmCommsOptionValueLocalization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionValueLocalization.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionValueLocalization.setReference("""\
See: 'xcmCommsOptionValueSyntax' and 'xcmCommsOptionTypeOID'. See:
'xcmGenFixedLocalizationIndex' in XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsOptionValueLocalization.setDescription("""\
A communications option value localization, used by system administrators and
end users to specify the ALTERNATE localization for a communications option
(different from 'xcmGenFixedLocalizationIndex'), so that
'xcmCommsOptionValueString' becomes 'XcmNamedLocaleUtf8String'. Usage: For a
communications option string to which POSIX-style localization (territory,
language, character set) is applicable (non-keyword) this object MAY contain a
suitable index value for 'xcmGenLocalizationIndex' from the XCMI General MIB,
or zero to indicate 'none'.
""")


class _XcmCommsOptionValueCodedCharSet_Type(IANACharset):
    """Custom type xcmCommsOptionValueCodedCharSet based on IANACharset"""


_XcmCommsOptionValueCodedCharSet_Object = MibTableColumn
xcmCommsOptionValueCodedCharSet = _XcmCommsOptionValueCodedCharSet_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 9),
    _XcmCommsOptionValueCodedCharSet_Type()
)
xcmCommsOptionValueCodedCharSet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionValueCodedCharSet.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionValueCodedCharSet.setReference("""\
See: 'xcmCommsOptionValueSyntax' and 'xcmCommsOptionTypeOID'. See:
'IANACharset' in IETF Printer MIB (RFC 1759). See: 'xcmGenCodedCharSetTable' in
XCMI General MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsOptionValueCodedCharSet.setDescription("""\
A communications option value character set, used by system administrators and
end users to specify the ALTERNATE character set for a communications option
(different from 'xcmGenFixedLocalizationIndex'), so that
'xcmCommsOptionValueString' is unambiguous. Usage: XCMI conforming management
agents shall ONLY allow Sets of this object to 'other' (none) or 'utf-8'
(Unicode/ ISO-10646 in the UTF-8 encoding, a proper superset of US-ASCII), for
consistency with the Xerox Unicode Coherence Standard.
""")
_XcmCommsOptionNextIndex_Type = Cardinal32
_XcmCommsOptionNextIndex_Object = MibTableColumn
xcmCommsOptionNextIndex = _XcmCommsOptionNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 10),
    _XcmCommsOptionNextIndex_Type()
)
xcmCommsOptionNextIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionNextIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionNextIndex.setReference("""\
See: 'xcmCommsOption[Family|Previous]Index'
""")
if mibBuilder.loadTexts:
    xcmCommsOptionNextIndex.setDescription("""\
The value of 'xcmCommsOptionIndex' corresponding to the next 'chained'
conceptual row in the 'xcmCommsOptionTable', or zero if this is the last
associated conceptual row in a particular vertical 'chain' within a given set.
Usage: Generally, communications options (of similar or unlike type) are
'chained' vertically via '...[Next|Previous]Index'. But, in the case where
particular communications options MUST be 'tightly coupled', they SHOULD be
'shelved' horizontally via '...[Family|Previous]Index' (eg, an IP address and
an IP subnet mask).
""")
_XcmCommsOptionPreviousIndex_Type = Cardinal32
_XcmCommsOptionPreviousIndex_Object = MibTableColumn
xcmCommsOptionPreviousIndex = _XcmCommsOptionPreviousIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 11),
    _XcmCommsOptionPreviousIndex_Type()
)
xcmCommsOptionPreviousIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionPreviousIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionPreviousIndex.setReference("""\
See: 'xcmCommsOption[Next|Family]Index'
""")
if mibBuilder.loadTexts:
    xcmCommsOptionPreviousIndex.setDescription("""\
The value of 'xcmCommsOptionIndex' corresponding to a previous associated
conceptual row in the 'xcmCommsOptionTable', or zero if this is the first
associated conceptual row in a given set. Usage: This object provides common
'backward' linkage for BOTH the 'xcmCommsOptionNextIndex' and
'xcmCommsOptionFamilyIndex' linkage objects. A previous conceptual row MAY
'forward' reference this conceptual row via either '...NextIndex' or
'...FamilyIndex' - ie, a given conceptual row MAY 'forward' reference EXACTLY
zero, one, or two 'later' conceptual rows.
""")
_XcmCommsOptionFamilyIndex_Type = Cardinal32
_XcmCommsOptionFamilyIndex_Object = MibTableColumn
xcmCommsOptionFamilyIndex = _XcmCommsOptionFamilyIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 4, 2, 1, 12),
    _XcmCommsOptionFamilyIndex_Type()
)
xcmCommsOptionFamilyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsOptionFamilyIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionFamilyIndex.setReference("""\
See: 'xcmCommsOption[Next|Previous]Index'
""")
if mibBuilder.loadTexts:
    xcmCommsOptionFamilyIndex.setDescription("""\
The value of 'xcmCommsOptionIndex' corresponding to the next 'family'
conceptual row in the 'xcmCommsOptionTable', or zero if this is the last
associated conceptual row in a particular horizontal 'shelf' (of 'family'
members) within a given set. Usage: Generally, communications options (of
similar or unlike type) are 'chained' vertically via '...[Next|Previous]Index'.
But, in the case where particular communications options MUST be 'tightly
coupled', they SHOULD be 'shelved' horizontally via '...[Family|Previous]Index'
(eg, an IP address and an IP subnet mask).
""")
_XcmCommsDirRecord_ObjectIdentity = ObjectIdentity
xcmCommsDirRecord = _XcmCommsDirRecord_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5)
)
_XcmCommsDirRecordTable_Object = MibTable
xcmCommsDirRecordTable = _XcmCommsDirRecordTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2)
)
if mibBuilder.loadTexts:
    xcmCommsDirRecordTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordTable.setDescription("""\
A table containing directory records configured on this host system.
""")
_XcmCommsDirRecordEntry_Object = MibTableRow
xcmCommsDirRecordEntry = _XcmCommsDirRecordEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1)
)
xcmCommsDirRecordEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmCommsDirRecordType"),
    (0, "XEROX-COMMON-MIB", "xcmCommsDirRecordIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsDirRecordEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordEntry.setDescription("""\
An entry for a directory record configured on this host system.
""")
_XcmCommsDirRecordType_Type = XcmCommsDirRecordType
_XcmCommsDirRecordType_Object = MibTableColumn
xcmCommsDirRecordType = _XcmCommsDirRecordType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1, 1),
    _XcmCommsDirRecordType_Type()
)
xcmCommsDirRecordType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsDirRecordType.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordType.setDescription("""\
A directory record type, used to uniquely identify this directory record (and
all subordinate directory attributes), when combined with
'xcmCommsDirRecordIndex' (below).
""")
_XcmCommsDirRecordIndex_Type = Ordinal32
_XcmCommsDirRecordIndex_Object = MibTableColumn
xcmCommsDirRecordIndex = _XcmCommsDirRecordIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1, 2),
    _XcmCommsDirRecordIndex_Type()
)
xcmCommsDirRecordIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsDirRecordIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordIndex.setDescription("""\
A directory record index, used to uniquely identify this directory record (and
all subordinate directory attributes), when combined with
'xcmCommsDirRecordType' (above). Usage: This directory record index SHALL be
unique for each record of a given type (value of 'xcmCommsDirRecordType'), but
NEED NOT be unique for directory records of different types. This is to permit
directory records of different types to start their numbering (value of
'xcmCommsDirRecordIndex') over from one ('1') and such usage is RECOMMENDED.
""")
_XcmCommsDirRecordRowStatus_Type = RowStatus
_XcmCommsDirRecordRowStatus_Object = MibTableColumn
xcmCommsDirRecordRowStatus = _XcmCommsDirRecordRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1, 3),
    _XcmCommsDirRecordRowStatus_Type()
)
xcmCommsDirRecordRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirRecordRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordRowStatus.setReference("""\
See: 'xcmCommsConfigCreateSupport' in 'xcmCommsConfigTable'. See: 'RowStatus'
in IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI
HRX MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsDirRecordRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmCommsDirRecordTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmCommsDirRecordRowStatus' row status object; and SHALL clear the
'commsDirRecordGroup' bit in 'xcmCommsConfigCreateSupport' in the
'xcmCommsConfigTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmCommsDirRecordRowStatus' row status object; and SHALL set the
'commsDirRecordGroup' bit in 'xcmCommsConfigCreateSupport' in the
'xcmCommsConfigTable'. Usage: Conforming implementations need NOT support
dynamic row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmCommsDirRecordKeyType_Type(XcmCommsDirAttributeType):
    """Custom type xcmCommsDirRecordKeyType based on XcmCommsDirAttributeType"""


_XcmCommsDirRecordKeyType_Object = MibTableColumn
xcmCommsDirRecordKeyType = _XcmCommsDirRecordKeyType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1, 4),
    _XcmCommsDirRecordKeyType_Type()
)
xcmCommsDirRecordKeyType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyType.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyType.setReference("""\
See: 'XcmCommsDirAttributeType' in the XCMI CC TC 'xcmCommsDirAttributeType' in
this XCMI CC MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyType.setDescription("""\
A directory record key attribute type, used to specify a primary key attribute
for sorting this directory record, or 'unknown' if no primary key attribute is
specified. Usage: The 'Relative Distinguished Name' (RDN) of this directory
record is the tuple of the directory record type, the key attribute type, and
the key attribute value.
""")
_XcmCommsDirRecordKeyInteger_Type = Integer32
_XcmCommsDirRecordKeyInteger_Object = MibTableColumn
xcmCommsDirRecordKeyInteger = _XcmCommsDirRecordKeyInteger_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1, 5),
    _XcmCommsDirRecordKeyInteger_Type()
)
xcmCommsDirRecordKeyInteger.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyInteger.setReference("""\
See: 'xcmCommsDirRecordKeyType' in this XCMI CC MIB 'xcmCommsDirAttributeValue'
in this XCMI CC MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyInteger.setDescription("""\
A directory record key attribute integer value, used to specify a primary key
attribute for sorting this directory record, or zero ('0') if no primary key
attribute is specified. Usage: The 'Relative Distinguished Name' (RDN) of this
directory record is the tuple of the directory record type, the key attribute
type, and the key attribute value.
""")


class _XcmCommsDirRecordKeyString_Type(XcmFixedLocaleUtf8String):
    """Custom type xcmCommsDirRecordKeyString based on XcmFixedLocaleUtf8String"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleUtf8String.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmCommsDirRecordKeyString_Type.__name__ = "XcmFixedLocaleUtf8String"
_XcmCommsDirRecordKeyString_Object = MibTableColumn
xcmCommsDirRecordKeyString = _XcmCommsDirRecordKeyString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1, 6),
    _XcmCommsDirRecordKeyString_Type()
)
xcmCommsDirRecordKeyString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyString.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyString.setReference("""\
See: 'xcmCommsDirRecordKeyType' in this XCMI CC MIB 'xcmCommsDirStringValue' in
this XCMI CC MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsDirRecordKeyString.setDescription("""\
A directory record key attribute string value, used to specify a primary key
attribute for sorting this directory record, or zero ('0') if no primary key
attribute is specified. Usage: String-valued directory attributes SHALL be
specified as UTF-8 encoded Unicode (ISO 10646) strings. Usage: The 'Relative
Distinguished Name' (RDN) of this directory record is the tuple of the
directory record type, the key attribute type, and the key attribute value.
""")


class _XcmCommsDirRecordParentType_Type(XcmCommsDirRecordType):
    """Custom type xcmCommsDirRecordParentType based on XcmCommsDirRecordType"""


_XcmCommsDirRecordParentType_Object = MibTableColumn
xcmCommsDirRecordParentType = _XcmCommsDirRecordParentType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1, 7),
    _XcmCommsDirRecordParentType_Type()
)
xcmCommsDirRecordParentType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirRecordParentType.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordParentType.setReference("""\
See: 'xcmCommsDirRecordType' in this XCMI CC MIB 'xcmCommsDirRecordIndex' in
this XCMI CC MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsDirRecordParentType.setDescription("""\
A parent directory record type, used to identify the parent directory record
(superior to this directory record), or 'unknown' if no parent directory record
is specified. Usage: Supports hierarchical directory structures. Usage: The
'Fully Qualified Distinguished Name' (FQDN) of this directory record is the
concatentation of the RDN (record key) of this directory record with the RDNs
of all superior directory records to the 'top' (highest node).
""")
_XcmCommsDirRecordParentIndex_Type = Cardinal32
_XcmCommsDirRecordParentIndex_Object = MibTableColumn
xcmCommsDirRecordParentIndex = _XcmCommsDirRecordParentIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 5, 2, 1, 8),
    _XcmCommsDirRecordParentIndex_Type()
)
xcmCommsDirRecordParentIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirRecordParentIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordParentIndex.setReference("""\
See: 'xcmCommsDirRecordType' in this XCMI CC MIB 'xcmCommsDirRecordIndex' in
this XCMI CC MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsDirRecordParentIndex.setDescription("""\
A parent directory record index, used to identify the parent directory record
(superior to this directory record), or zero ('0') if no parent directory
record is specified. Usage: Supports hierarchical directory structures. Usage:
The 'Fully Qualified Distinguished Name' (FQDN) of this directory record is the
concatentation of the RDN (record key) of this directory record with the RDNs
of all superior directory records to the 'top' (highest node).
""")
_XcmCommsDirAttribute_ObjectIdentity = ObjectIdentity
xcmCommsDirAttribute = _XcmCommsDirAttribute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 6)
)
_XcmCommsDirAttributeTable_Object = MibTable
xcmCommsDirAttributeTable = _XcmCommsDirAttributeTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 6, 2)
)
if mibBuilder.loadTexts:
    xcmCommsDirAttributeTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeTable.setDescription("""\
A table containing integer-valued directory attributes configured on this host
system. Usage: Table contains an entry for all integer-valued and string-valued
attributes configured on this host system.
""")
_XcmCommsDirAttributeEntry_Object = MibTableRow
xcmCommsDirAttributeEntry = _XcmCommsDirAttributeEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 6, 2, 1)
)
xcmCommsDirAttributeEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmCommsDirRecordType"),
    (0, "XEROX-COMMON-MIB", "xcmCommsDirRecordIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsDirAttributeType"),
    (0, "XEROX-COMMON-MIB", "xcmCommsDirAttributeIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsDirAttributeEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeEntry.setDescription("""\
An entry for an integer-valued directory attribute configured on this host
system.
""")
_XcmCommsDirAttributeType_Type = XcmCommsDirAttributeType
_XcmCommsDirAttributeType_Object = MibTableColumn
xcmCommsDirAttributeType = _XcmCommsDirAttributeType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 6, 2, 1, 1),
    _XcmCommsDirAttributeType_Type()
)
xcmCommsDirAttributeType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeType.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeType.setReference("""\
See: 'XcmCommsDirAttributeType' in the XCMI CC TC 'XcmCommsStackExtProtocol' in
the XCMI Comms Engine TC.
""")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeType.setDescription("""\
A directory attribute type, used to uniquely identify this integer-valued
directory attribute (and also any matching string-valued directory attribute in
'xcmCommsDirStringTable'), when combined with 'xcmCommsDirAttributeIndex'
(below). Usage: When directory attribute type indicates integer-valued, the
value of 'xcmCommsDirAttributeValue' SHALL be the actual value of this
directory attribute. Usage: When directory attribute type indicates string-
valued, the value of 'xcmCommsDirAttributeValue' SHALL be zero, EXCEPT for a
directory attribute type of 'protocolTyped...', when the protocol type shall be
specified as the integer value. The actual string-valued attribute SHALL be
specified in an exactly matching row of 'xcmCommsDirStringTable'. Usage:
Matching directory attributes (string-valued) SHALL be specified in an exactly
matching row of 'xcmCommsDirStringTable'. Matching rows have EXACTLY the SAME
values of 'xcmCommsDirRecordType', 'xcmCommsDirRecordIndex',
'xcmCommsDirAttributeType', and 'xcmCommsDirAttributeIndex'. Usage: Parallel
directory attributes (peers of this one) SHALL be specified in parallel (NOT
matching) rows of 'xcmCommsDirAttributeTable' (integer-valued attributes) or
'xcmCommsDirStringTable' (string-valued attributes). Parallel rows have EXACTLY
the SAME values of 'xcmCommsDirRecordType', 'xcmCommsDirRecordIndex', and
'xcmCommsDirAttributeIndex', but MUST have a DIFFERENT value of
'xcmCommsDirAttributeType'. Usage: When directory attribute type is
'protocolTyped...' the particular protocol layer SHALL be specified by placing
a a value from the enumeration 'XcmCommsStackExtProtocol' in
'xcmCommsDirAttributeValue' for this row.
""")
_XcmCommsDirAttributeIndex_Type = Ordinal32
_XcmCommsDirAttributeIndex_Object = MibTableColumn
xcmCommsDirAttributeIndex = _XcmCommsDirAttributeIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 6, 2, 1, 2),
    _XcmCommsDirAttributeIndex_Type()
)
xcmCommsDirAttributeIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeIndex.setDescription("""\
A directory attribute index, used to uniquely identify this integer-valued
directory attribute (and also any matching string-valued directory attribute in
'xcmCommsDirStringTable'), when combined with 'xcmCommsDirAttributeType'
(above). Usage: This directory attribute index SHALL be unique for each
attribute subordinate to one directory record (ie, rows with EXACTLY the SAME
values of 'xcmCommsDirRecordType' and 'xcmCommsDirRecordIndex'). EXCEPT when
two or more different directory attributes are 'parallel'; then they SHALL have
EXACTLY the SAME value of 'xcmCommsDirAttributeIndex'. Example: The following
example illustrates the use of 'parallel' directory attributes in a 'speed
dial' entry. (Index values are shown in square brackets, for clarity.)
[xcmCommsDirRecordType = recordSpeedDial] [xcmCommsDirRecordIndex = 1]
xcmCommsDirRecordRowStatus = active xcmCommsDirRecordKeyType = userFullName
(sort key) xcmCommsDirRecordKeyInteger = 0 (unused) xcmCommsDirRecordKeyString
= 'Fred Flintstone' (sort key) [xcmCommsDirRecordType = recordSpeedDial]
[xcmCommsDirRecordIndex = 1] [xcmCommsDirAttributeType = userLocation]
[xcmCommsDirAttributeIndex = 1] xcmCommsDirAttributeRowStatus = active
xcmCommsDirAttributeValue = 0 (unused) xcmCommsDirStringRowStatus = active
xcmCommsDirStringValue = 'Bldg 705, H-18' [xcmCommsDirRecordType =
recordSpeedDial] [xcmCommsDirRecordIndex = 1] [xcmCommsDirAttributeType =
protocolTypedAddress] [xcmCommsDirAttributeIndex = 2]
xcmCommsDirAttributeRowStatus = active xcmCommsDirAttributeValue = osiwanFax
(FAX protocol type) xcmCommsDirStringRowStatus = active xcmCommsDirStringValue
= '0+...' (FAX phone number) [xcmCommsDirRecordType = recordSpeedDial]
[xcmCommsDirRecordIndex = 1] [xcmCommsDirAttributeType = protocolPriority]
[xcmCommsDirAttributeIndex = 2] (parallel attribute)
xcmCommsDirAttributeRowStatus = active xcmCommsDirAttributeValue = 100 (highest
priority) [xcmCommsDirRecordType = recordSpeedDial] [xcmCommsDirRecordIndex =
1] [xcmCommsDirAttributeType = protocolMaxRetries] [xcmCommsDirAttributeIndex =
2] (parallel attribute) xcmCommsDirAttributeRowStatus = active
xcmCommsDirAttributeValue = 3 (FAX max retries) [xcmCommsDirRecordType =
recordSpeedDial] [xcmCommsDirRecordIndex = 1] [xcmCommsDirAttributeType =
protocolRetryInterval] [xcmCommsDirAttributeIndex = 2] (parallel attribute)
xcmCommsDirAttributeRowStatus = active xcmCommsDirAttributeValue = 10 (FAX
retry interval) [xcmCommsDirRecordType = recordSpeedDial]
[xcmCommsDirRecordIndex = 1] [xcmCommsDirAttributeType = protocolTypedAddress]
[xcmCommsDirAttributeIndex = 3] xcmCommsDirAttributeRowStatus = active
xcmCommsDirAttributeValue = osiwanFax (FAX protocol type)
xcmCommsDirStringRowStatus = active xcmCommsDirStringValue = '0+...' (FAX phone
number) [xcmCommsDirRecordType = recordSpeedDial] [xcmCommsDirRecordIndex = 1]
[xcmCommsDirAttributeType = protocolPriority] [xcmCommsDirAttributeIndex = 3]
(parallel attribute) xcmCommsDirAttributeRowStatus = active
xcmCommsDirAttributeValue = 50 (medium priority) [xcmCommsDirRecordType =
recordSpeedDial] [xcmCommsDirRecordIndex = 1] [xcmCommsDirAttributeType =
protocolTypedAddress] [xcmCommsDirAttributeIndex = 4]
xcmCommsDirAttributeRowStatus = active xcmCommsDirAttributeValue = internetSMTP
(Email protocol) xcmCommsDirStringRowStatus = active xcmCommsDirStringValue =
'fflint@...' (Email address) [xcmCommsDirRecordType = recordSpeedDial]
[xcmCommsDirRecordIndex = 1] [xcmCommsDirAttributeType = protocolPriority]
[xcmCommsDirAttributeIndex = 4] (parallel attribute)
xcmCommsDirAttributeRowStatus = active xcmCommsDirAttributeValue = 1 (lowest
priority) Discussion: This example shows a 'speed dial' directory record with a
primary sort key (e.g., for local UI display ordering) of the destination
user's full name ('userFullName'). Also shown are four sets of 'parallel'
directory attributes: a) user location; b) primary FAX destination (highest
priority); c) secondary FAX destination (medium priority); d) tertiary Email
destination (lowest priority). Usage: Each 'parallel' directory attribute in a
given set is correlated by the SAME value of 'xcmCommsDirAttributeIndex'.
""")
_XcmCommsDirAttributeRowStatus_Type = RowStatus
_XcmCommsDirAttributeRowStatus_Object = MibTableColumn
xcmCommsDirAttributeRowStatus = _XcmCommsDirAttributeRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 6, 2, 1, 3),
    _XcmCommsDirAttributeRowStatus_Type()
)
xcmCommsDirAttributeRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeRowStatus.setReference("""\
See: 'xcmCommsConfigCreateSupport' in 'xcmCommsConfigTable'. See: 'RowStatus'
in IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI
HRX MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmCommsDirAttributeTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmCommsDirAttributeRowStatus' row status object; and SHALL clear the
'commsDirAttributeGroup' bit in 'xcmCommsConfigCreateSupport' in the
'xcmCommsConfigTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmCommsDirAttributeRowStatus' row status object; and SHALL set the
'commsDirAttributeGroup' bit in 'xcmCommsConfigCreateSupport' in the
'xcmCommsConfigTable'. Usage: Conforming implementations need NOT support
dynamic row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")
_XcmCommsDirAttributeValue_Type = Integer32
_XcmCommsDirAttributeValue_Object = MibTableColumn
xcmCommsDirAttributeValue = _XcmCommsDirAttributeValue_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 6, 2, 1, 4),
    _XcmCommsDirAttributeValue_Type()
)
xcmCommsDirAttributeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeValue.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeValue.setReference("""\
See: 'xcmCommsDirAttributeType' in this XCMI CC MIB 'XcmCommsDirAttributeType'
in the XCMI CC TC 'XcmCommsStackExtProtocol' in the XCMI Comms Engine TC.
""")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeValue.setDescription("""\
A directory attribute value, the contents of this integer-valued directory
attribute, or zero if 'xcmCommsDirAttributeType' indicates string-valued, and
is NOT 'protocolTyped...'. Usage: When directory attribute type is
'protocolTyped...' the particular protocol layer SHALL be specified by placing
a a value from the enumeration 'XcmCommsStackExtProtocol' in
'xcmCommsDirAttributeValue' for this row.
""")
_XcmCommsDirString_ObjectIdentity = ObjectIdentity
xcmCommsDirString = _XcmCommsDirString_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 7)
)
_XcmCommsDirStringTable_Object = MibTable
xcmCommsDirStringTable = _XcmCommsDirStringTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 7, 2)
)
if mibBuilder.loadTexts:
    xcmCommsDirStringTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirStringTable.setDescription("""\
A table containing string-valued directory attributes configured on this host
system. Usage: Table contains an entry for ONLY string-valued and configured on
this host system.
""")
_XcmCommsDirStringEntry_Object = MibTableRow
xcmCommsDirStringEntry = _XcmCommsDirStringEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 7, 2, 1)
)
xcmCommsDirStringEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmCommsDirRecordType"),
    (0, "XEROX-COMMON-MIB", "xcmCommsDirRecordIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsDirAttributeType"),
    (0, "XEROX-COMMON-MIB", "xcmCommsDirAttributeIndex"),
)
if mibBuilder.loadTexts:
    xcmCommsDirStringEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirStringEntry.setDescription("""\
An entry containing string-valued directory attributes configured on this host
system.
""")
_XcmCommsDirStringRowStatus_Type = RowStatus
_XcmCommsDirStringRowStatus_Object = MibTableColumn
xcmCommsDirStringRowStatus = _XcmCommsDirStringRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 7, 2, 1, 1),
    _XcmCommsDirStringRowStatus_Type()
)
xcmCommsDirStringRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirStringRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirStringRowStatus.setReference("""\
See: 'xcmCommsConfigCreateSupport' in 'xcmCommsConfigTable'. See: 'RowStatus'
in IETF SNMPv2 TC (RFC 1443/1903/2579). See: 'xcmHrDevMgmtCommandData' in XCMI
HRX MIB and 'xcmSecUserMgmtData' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsDirStringRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmCommsDirStringTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmCommsDirStringRowStatus' row status object; and SHALL clear the
'commsDirStringGroup' bit in 'xcmCommsConfigCreateSupport' in the
'xcmCommsConfigTable'. Usage: Conforming implementations which support dynamic
rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmCommsDirStringRowStatus' row status object; and SHALL set the
'commsDirStringGroup' bit in 'xcmCommsConfigCreateSupport' in the
'xcmCommsConfigTable'. Usage: Conforming implementations need NOT support
dynamic row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmCommsDirStringValue_Type(XcmFixedLocaleUtf8String):
    """Custom type xcmCommsDirStringValue based on XcmFixedLocaleUtf8String"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleUtf8String.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmCommsDirStringValue_Type.__name__ = "XcmFixedLocaleUtf8String"
_XcmCommsDirStringValue_Object = MibTableColumn
xcmCommsDirStringValue = _XcmCommsDirStringValue_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 7, 2, 1, 2),
    _XcmCommsDirStringValue_Type()
)
xcmCommsDirStringValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmCommsDirStringValue.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirStringValue.setReference("""\
See: 'xcmCommsDirAttributeType' in this XCMI CC MIB 'XcmCommsDirAttributeType'
in the XCMI CC TC.
""")
if mibBuilder.loadTexts:
    xcmCommsDirStringValue.setDescription("""\
A directory attribute value, the contents of this string-valued directory
attribute. Usage: String-valued directory attributes SHALL be specified as
UTF-8 encoded Unicode (ISO 10646) strings. Usage: When directory attribute type
is 'protocolTyped...' the particular protocol layer SHALL be specified by
placing a a value from the enumeration 'XcmCommsStackExtProtocol' in
'xcmCommsDirAttributeValue' for this row. Usage: Conformant implementations
MUST encrypt passwords, keys, and other security information stored in this
string object.
""")
_XcmCommsProtocol_ObjectIdentity = ObjectIdentity
xcmCommsProtocol = _XcmCommsProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 8)
)
_XcmCommsProtocolTable_Object = MibTable
xcmCommsProtocolTable = _XcmCommsProtocolTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 8, 2)
)
if mibBuilder.loadTexts:
    xcmCommsProtocolTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsProtocolTable.setDescription("""\
A table of available communications protocol suites and specific communications
protocols on this host system.
""")
_XcmCommsProtocolEntry_Object = MibTableRow
xcmCommsProtocolEntry = _XcmCommsProtocolEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 8, 2, 1)
)
xcmCommsProtocolEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmCommsProtocolType"),
)
if mibBuilder.loadTexts:
    xcmCommsProtocolEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsProtocolEntry.setDescription("""\
An entry for an available communications protocol suite or specific
communications protocol on this host system.
""")
_XcmCommsProtocolType_Type = XcmCommsStackExtProtocol
_XcmCommsProtocolType_Object = MibTableColumn
xcmCommsProtocolType = _XcmCommsProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 8, 2, 1, 1),
    _XcmCommsProtocolType_Type()
)
xcmCommsProtocolType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmCommsProtocolType.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsProtocolType.setReference("""\
See: 'XcmCommsStackExtProtocol' in XCMI Comms Engine TC. See: 'protocolType'
enumeration and 'protocolTyped[Name|Address]' enumerations in
'XcmCommsDirAttributeType' in XCMI CC TC. See: 'xcmCommsDirAttributeType' in
XCMI CC MIB.
""")
if mibBuilder.loadTexts:
    xcmCommsProtocolType.setDescription("""\
The type of an available communications protocol suite or specific
communications protocol on this host system. Usage: To indicate that a
communications protocol suite is available, use a suite value of
'XcmCommsStackExtProtocol', eg, 'internetSuite(140101)' for the Internet suite.
Usage: To indicate that a specific communications protocol is available, use a
specific value of 'XcmCommsStackExtProtocol', eg, 'internetFTP(141504)' for the
Internet FTP protocol.
""")
_XcmCommsProtocolRowStatus_Type = RowStatus
_XcmCommsProtocolRowStatus_Object = MibTableColumn
xcmCommsProtocolRowStatus = _XcmCommsProtocolRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 8, 2, 1, 2),
    _XcmCommsProtocolRowStatus_Type()
)
xcmCommsProtocolRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmCommsProtocolRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsProtocolRowStatus.setDescription("""\
This object displays the status of individual conceptual rows in the
'xcmCommsProtocolTable'.
""")
_XcmSvcMonTC_ObjectIdentity = ObjectIdentity
xcmSvcMonTC = _XcmSvcMonTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 73)
)
if mibBuilder.loadTexts:
    xcmSvcMonTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonTC.setDescription("""\
Version: 6.007.pub Textual Conventions companion to XCMI Service Monitoring
MIB, the MIB module for basic configuration and active management of
application services for network accessible host systems. See: IETF Network
Services Monitoring MIB (IETF RFC 1565, January 1994). See: IETF Host Resources
MIB (IETF RFC 2790, March 2000). See: OSI Reference Model - Part 1: Basic
Reference Model (CCITT X.200:1992 | ISO 7498-1:1992). See: OSI Reference Model
- Part 4: Systems Management (CCITT X.700:1992 | ISO 7498-4:1992). See:
Document Printing Application - Part 1: Abstract Service (ISO/IEC 10175-1 Final
Text, March 1996). See: POSIX System Administration - Part 4: Print Interfaces
(IEEE 1387.4 / Draft 8, October 1994). Copyright (C) 1996-2005 Xerox
Corporation. All Rights Reserved.
""")
_XCmSvcMonDummy_ObjectIdentity = ObjectIdentity
xCmSvcMonDummy = _XCmSvcMonDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999)
)
_XCmSvcMonGroupSupport_Type = XcmSvcMonGroupSupport
_XCmSvcMonGroupSupport_Object = MibScalar
xCmSvcMonGroupSupport = _XCmSvcMonGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 1),
    _XCmSvcMonGroupSupport_Type()
)
xCmSvcMonGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSvcMonServiceMgmtOperation_Type = XcmSvcMonServiceMgmtOperation
_XCmSvcMonServiceMgmtOperation_Object = MibScalar
xCmSvcMonServiceMgmtOperation = _XCmSvcMonServiceMgmtOperation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 2),
    _XCmSvcMonServiceMgmtOperation_Type()
)
xCmSvcMonServiceMgmtOperation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonServiceMgmtOperation.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonServiceMgmtOperation.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSvcMonServiceMgmtData_Type = XcmSvcMonServiceMgmtData
_XCmSvcMonServiceMgmtData_Object = MibScalar
xCmSvcMonServiceMgmtData = _XCmSvcMonServiceMgmtData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 3),
    _XCmSvcMonServiceMgmtData_Type()
)
xCmSvcMonServiceMgmtData.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonServiceMgmtData.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonServiceMgmtData.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSvcMonServiceDetailClass_Type = XcmSvcMonServiceDetailClass
_XCmSvcMonServiceDetailClass_Object = MibScalar
xCmSvcMonServiceDetailClass = _XCmSvcMonServiceDetailClass_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 4),
    _XCmSvcMonServiceDetailClass_Type()
)
xCmSvcMonServiceDetailClass.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonServiceDetailClass.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonServiceDetailClass.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSvcMonServiceDetailType_Type = XcmSvcMonServiceDetailType
_XCmSvcMonServiceDetailType_Object = MibScalar
xCmSvcMonServiceDetailType = _XCmSvcMonServiceDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 5),
    _XCmSvcMonServiceDetailType_Type()
)
xCmSvcMonServiceDetailType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonServiceDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonServiceDetailType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSvcMonServiceType_Type = XcmSvcMonServiceType
_XCmSvcMonServiceType_Object = MibScalar
xCmSvcMonServiceType = _XCmSvcMonServiceType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 6),
    _XCmSvcMonServiceType_Type()
)
xCmSvcMonServiceType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonServiceType.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonServiceType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSvcMonJobConfirmSupport_Type = XcmSvcMonJobConfirmSupport
_XCmSvcMonJobConfirmSupport_Object = MibScalar
xCmSvcMonJobConfirmSupport = _XCmSvcMonJobConfirmSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 7),
    _XCmSvcMonJobConfirmSupport_Type()
)
xCmSvcMonJobConfirmSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonJobConfirmSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonJobConfirmSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSvcMonSystemMailSenderNetAuthSupport_Type = XcmSvcMonSystemMailSenderNetAuthSupport
_XCmSvcMonSystemMailSenderNetAuthSupport_Object = MibScalar
xCmSvcMonSystemMailSenderNetAuthSupport = _XCmSvcMonSystemMailSenderNetAuthSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 8),
    _XCmSvcMonSystemMailSenderNetAuthSupport_Type()
)
xCmSvcMonSystemMailSenderNetAuthSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonSystemMailSenderNetAuthSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonSystemMailSenderNetAuthSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSvcMonAttachmentPDLSupport_Type = XcmSvcMonAttachmentPDLSupport
_XCmSvcMonAttachmentPDLSupport_Object = MibScalar
xCmSvcMonAttachmentPDLSupport = _XCmSvcMonAttachmentPDLSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 9),
    _XCmSvcMonAttachmentPDLSupport_Type()
)
xCmSvcMonAttachmentPDLSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSvcMonAttachmentPDLSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmSvcMonAttachmentPDLSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmImageQualityType_Type = XcmImageQualityType
_XCmImageQualityType_Object = MibScalar
xCmImageQualityType = _XCmImageQualityType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 10),
    _XCmImageQualityType_Type()
)
xCmImageQualityType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmImageQualityType.setStatus("current")
if mibBuilder.loadTexts:
    xCmImageQualityType.setDescription("""\
Dummy - DO NOT USE
""")
_XCmOutputUsage_Type = XcmOutputUsage
_XCmOutputUsage_Object = MibScalar
xCmOutputUsage = _XCmOutputUsage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 11),
    _XCmOutputUsage_Type()
)
xCmOutputUsage.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmOutputUsage.setStatus("current")
if mibBuilder.loadTexts:
    xCmOutputUsage.setDescription("""\
Dummy - DO NOT USE
""")
_XCMLoginCredentialsSource_Type = XcmLoginCredentialsSource
_XCMLoginCredentialsSource_Object = MibScalar
xCMLoginCredentialsSource = _XCMLoginCredentialsSource_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 73, 999, 12),
    _XCMLoginCredentialsSource_Type()
)
xCMLoginCredentialsSource.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCMLoginCredentialsSource.setStatus("current")
if mibBuilder.loadTexts:
    xCMLoginCredentialsSource.setDescription("""\
Dummy - DO NOT USE
""")
_XcmSvcMonMIB_ObjectIdentity = ObjectIdentity
xcmSvcMonMIB = _XcmSvcMonMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74)
)
if mibBuilder.loadTexts:
    xcmSvcMonMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonMIB.setDescription("""\
Version: 5.502.pub The MIB module for basic configuration and active management
of application services for network accessible host systems. See: IETF Network
Services Monitoring MIB (IETF RFC 1565, January 1994). See: IETF Host Resources
MIB (IETF RFC 2790, March 2000). See: OSI Reference Model - Part 1: Basic
Reference Model (CCITT X.200:1992 | ISO 7498-1:1992). See: OSI Reference Model
- Part 4: Systems Management (CCITT X.700:1992 | ISO 7498-4:1992). Copyright
(C) 1996-2006 Xerox Corporation. All Rights Reserved.
""")
_XcmSvcMonGeneral_ObjectIdentity = ObjectIdentity
xcmSvcMonGeneral = _XcmSvcMonGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1)
)
_XcmSvcMonGeneralTable_Object = MibTable
xcmSvcMonGeneralTable = _XcmSvcMonGeneralTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2)
)
if mibBuilder.loadTexts:
    xcmSvcMonGeneralTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralTable.setDescription("""\
A table of general counters and capabilities for ease of use of the XCMI
Service Monitoring MIB on this host system. Usage: The ONLY valid row in the
'xcmSvcMonGeneralTable' SHALL have an 'xcmSvcMonGeneralIndex' of one ('1').
""")
_XcmSvcMonGeneralEntry_Object = MibTableRow
xcmSvcMonGeneralEntry = _XcmSvcMonGeneralEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2, 1)
)
xcmSvcMonGeneralEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmSvcMonGeneralIndex"),
)
if mibBuilder.loadTexts:
    xcmSvcMonGeneralEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralEntry.setDescription("""\
An entry of general counters and capabilities for ease of use of the XCMI
Service Monitoring MIB on this host system. Usage: The ONLY valid row in the
'xcmSvcMonGeneralTable' SHALL have an 'xcmSvcMonGeneralIndex' of one ('1').
""")
_XcmSvcMonGeneralIndex_Type = Ordinal32
_XcmSvcMonGeneralIndex_Object = MibTableColumn
xcmSvcMonGeneralIndex = _XcmSvcMonGeneralIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2, 1, 1),
    _XcmSvcMonGeneralIndex_Type()
)
xcmSvcMonGeneralIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmSvcMonGeneralTable'. Usage: The ONLY valid row in the
'xcmSvcMonGeneralTable' SHALL have an 'xcmSvcMonGeneralIndex' of one ('1').
Usage: 'xcmSvcMonGeneralRowStatus' is 'read-only' because the ONLY valid
conceptual row SHALL NOT be deleted.
""")
_XcmSvcMonGeneralRowStatus_Type = RowStatus
_XcmSvcMonGeneralRowStatus_Object = MibTableColumn
xcmSvcMonGeneralRowStatus = _XcmSvcMonGeneralRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2, 1, 2),
    _XcmSvcMonGeneralRowStatus_Type()
)
xcmSvcMonGeneralRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralRowStatus.setDescription("""\
This object is used to display status of the ONLY valid conceptual row in the
'xcmSvcMonGeneralTable'. Usage: 'xcmSvcMonGeneralRowStatus' is 'read-only'
because the ONLY valid conceptual row SHALL NOT be deleted.
""")


class _XcmSvcMonGeneralVersionID_Type(ProductID):
    """Custom type xcmSvcMonGeneralVersionID based on ProductID"""
    defaultValue = "(0, 0)"


_XcmSvcMonGeneralVersionID_Object = MibTableColumn
xcmSvcMonGeneralVersionID = _XcmSvcMonGeneralVersionID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2, 1, 3),
    _XcmSvcMonGeneralVersionID_Type()
)
xcmSvcMonGeneralVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralVersionID.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralVersionID.setReference("""\
See: 'hrSW[Installed|Run]ID' in the Software Installed and Software Running
groups of the IETF HR MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralVersionID.setDescription("""\
The software product ID of the SNMP sub-agent which implements the XCMI Service
Monitoring MIB on this host system. Usage: This object SHALL specify the
software product ID of an SNMP sub-agent (possibly also found in a conceptual
row in the 'hrSWRunTable' and/or 'hrSWInstalledTable' in the IETF HR MIB). This
object SHALL NOT specify a particular release of the XCMI Service Monitoring
MIB, or the whole host system product. Note: Contrast with 'sysObjectID' for
the whole SNMP agent in the IETF MIB-II (RFC 1213) and 'hrDeviceID' for the
whole device (or whole product, in the case of 'xcmHrDevice...') in the IETF
Host Resources MIB (RFC 2790).
""")


class _XcmSvcMonGeneralVersionDate_Type(DateAndTime):
    """Custom type xcmSvcMonGeneralVersionDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmSvcMonGeneralVersionDate_Object = MibTableColumn
xcmSvcMonGeneralVersionDate = _XcmSvcMonGeneralVersionDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2, 1, 4),
    _XcmSvcMonGeneralVersionDate_Type()
)
xcmSvcMonGeneralVersionDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralVersionDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralVersionDate.setReference("""\
See: 'hrSW[Installed|Run]ID' in the Software Installed and Software Running
groups of the IETF HR MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralVersionDate.setDescription("""\
The software build date of the SNMP sub-agent which implements the XCMI Service
Monitoring MIB on this host system. Usage: This object SHALL specify the BUILD
date of the SNMP sub-agent software (not available elsewhere in IETF/XCMI
MIBs). This object SHALL NOT specify the INSTALL date of the SNMP sub-agent
software on this host system, nor the RESET date. Note: Contrast with
'hrSWInstalledDate' in the Software Installed group of the IETF Host Resources
MIB (RFC 2790), and 'xcmHrDevInfoResetDate' in the Device Info group of the
XCMI Host Resources Extensions MIB.
""")


class _XcmSvcMonGeneralGroupSupport_Type(XcmSvcMonGroupSupport):
    """Custom type xcmSvcMonGeneralGroupSupport based on XcmSvcMonGroupSupport"""
    defaultValue = 1


_XcmSvcMonGeneralGroupSupport_Object = MibTableColumn
xcmSvcMonGeneralGroupSupport = _XcmSvcMonGeneralGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2, 1, 5),
    _XcmSvcMonGeneralGroupSupport_Type()
)
xcmSvcMonGeneralGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralGroupSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Service Monitoring MIB groups supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask.
Usage: Conforming management agents SHALL accurately report their support for
XCMI Service Monitoring MIB groups.
""")
_XcmSvcMonGeneralCreateSupport_Type = XcmSvcMonGroupSupport
_XcmSvcMonGeneralCreateSupport_Object = MibTableColumn
xcmSvcMonGeneralCreateSupport = _XcmSvcMonGeneralCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2, 1, 6),
    _XcmSvcMonGeneralCreateSupport_Type()
)
xcmSvcMonGeneralCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralCreateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Service Monitoring MIB groups supported for dynamic row creation
(via '...RowStatus') by this management agent implementation (ie, version) on
this host system, specified in a bit-mask. Usage: Conforming management agents
SHALL accurately report their support for XCMI Service Monitoring MIB groups.
""")
_XcmSvcMonGeneralUpdateSupport_Type = XcmSvcMonGroupSupport
_XcmSvcMonGeneralUpdateSupport_Object = MibTableColumn
xcmSvcMonGeneralUpdateSupport = _XcmSvcMonGeneralUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 1, 2, 1, 7),
    _XcmSvcMonGeneralUpdateSupport_Type()
)
xcmSvcMonGeneralUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralUpdateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Service Monitoring MIB groups supported for existing row update
(via SNMP Set-Request PDUs) by this management agent implementation (ie,
version) on this host system, specified in a bit-mask. Usage: Conforming
management agents SHALL accurately report their support for XCMI Service
Monitoring MIB groups.
""")
_XcmSvcMonMIBConformance_ObjectIdentity = ObjectIdentity
xcmSvcMonMIBConformance = _XcmSvcMonMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2)
)
_XcmSvcMonMIBGroups_ObjectIdentity = ObjectIdentity
xcmSvcMonMIBGroups = _XcmSvcMonMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2, 2)
)
_XcmSvcMonQueue_ObjectIdentity = ObjectIdentity
xcmSvcMonQueue = _XcmSvcMonQueue_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3)
)
_XcmSvcMonQueueTable_Object = MibTable
xcmSvcMonQueueTable = _XcmSvcMonQueueTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3, 2)
)
if mibBuilder.loadTexts:
    xcmSvcMonQueueTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueTable.setReference("""\
See: 'xcmSvcMonQueueOnSystem', and 'xcmSvcMonQueueRoutingIndex'. See:
'xcmHrDevInfoRealization' in XCMI Ext to Host Res MIB. See:
'xcmJobGenBasicTable' in XCMI Job Monitoring MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueTable.setDescription("""\
A table of the external job queues supported and (possibly) active, for some
'physical', 'logical', or 'logicalAndPhysical' device on this host system.
Usage: These externally visible job queues MAY actually be configured on
external print/file servers (remote) or on the managed system itself (local).
Usage: For example, a 'logical printer' might support one or more external
(network) job queues. Note: The 'xcmJobGenBasicTable' in the XCMI Job
Monitoring MIB (indexed by 'hrDeviceIndex' from the IETF Host Resources MIB)
displays the unordered union of all jobs present in the (one or more) 'local'
queues supported by each 'physical', 'logical', or 'logicalAndPhysical' device
on this host system. Note: The XCMI Comms Engine MIB is indexed by devices of
type 'CPU', while the 'xcmSvcMonQueueTable' is indexed by application devices
of type 'printer', 'fax', etc. Usage: Throughout this specification, the term
'stable storage' refers to storage which is reliable over long durations
(years) and is NOT destroyed by host system reboot (eg, battery-backed DRAM is
'stable storage' - while simple DRAM is NOT 'stable storage'). Examples of
valid 'stable storage' include: NVRAM, hard disk, EEPROM, etc. Usage:
Conforming implementations SHALL preserve active queue table objects across
management agent power cycles, and SHALL implement one of the following two
methods: 1) The agent SHALL store queue table objects directly in 'stable
storage'; or 2) The agent SHALL automatically checkpoint all active queue table
objects to 'stable storage' with reasonable frequency (either due to a write to
some queue table object, or upon expiration of a product-specific timeout).
Usage: Conforming implementations MAY (optionally) support one of the following
two 'checkpoint protocols': 1) A client sends a 'Set' of
'xcmSvcMonQueueRowStatus' to 'active(1)', to request that a 'checkpoint' be
performed; 2a) An agent which supports 'rapid checkpoint', completes the
checkpoint to 'stable storage', and sends a 'SetResponse' with 'noError(0)';
<or> 2b) An agent which supports 'delayed checkpoint', changes
'xcmSvcMonQueueRowStatus' to 'notInService(2)', sends a 'SetResponse' with
'noError(0)', completes the checkpoint to 'stable storage', and changes
'xcmSvcMonQueueRowStatus' back to 'active(1)'.
""")
_XcmSvcMonQueueEntry_Object = MibTableRow
xcmSvcMonQueueEntry = _XcmSvcMonQueueEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3, 2, 1)
)
xcmSvcMonQueueEntry.setIndexNames(
    (0, "HOST-RESOURCES-MIB", "hrDeviceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmSvcMonQueueIndex"),
)
if mibBuilder.loadTexts:
    xcmSvcMonQueueEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueEntry.setReference("""\
See: 'xcmSvcMonQueueOnSystem', and 'xcmSvcMonQueueRoutingIndex'. See:
'xcmHrDevInfoRealization' in XCMI Ext to Host Res MIB. See:
'xcmJobGenBasicTable' in XCMI Job Monitoring MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueEntry.setDescription("""\
An entry for an external job queue supported and (possibly) active, for some
'physical', 'logical', or 'logicalAndPhysical' device on this host system.
Usage: This externally visible job queue MAY actually be configured on an
external print/file server (remote) or on the managed system itself (local).
""")
_XcmSvcMonQueueIndex_Type = Ordinal32
_XcmSvcMonQueueIndex_Object = MibTableColumn
xcmSvcMonQueueIndex = _XcmSvcMonQueueIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3, 2, 1, 1),
    _XcmSvcMonQueueIndex_Type()
)
xcmSvcMonQueueIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmSvcMonQueueTable'. Usage: This object SHALL be permanent (ie, preserved
across all hardware resets).
""")
_XcmSvcMonQueueRowStatus_Type = RowStatus
_XcmSvcMonQueueRowStatus_Object = MibTableColumn
xcmSvcMonQueueRowStatus = _XcmSvcMonQueueRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3, 2, 1, 2),
    _XcmSvcMonQueueRowStatus_Type()
)
xcmSvcMonQueueRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowStatus.setReference("""\
See: 'xcmSvcMonGeneralCreateSupport' in 'xcmSvcMonGeneralTable'. See:
'RowStatus' in IETF SNMPv2 TC (RFC 1443/1903/2579). See:
'xcmHrDevMgmtCommandData' in XCMI HRX MIB and 'xcmSecUserMgmtData' in XCMI
Security MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmSvcMonQueueTable' and (optionally) in the 'xcmSvcMonQueueExtTable' (if
implementated on this system). Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmSvcMonQueueRowStatus' row status object; and SHALL clear the
'svcMonQueueGroup' bit in 'xcmSvcMonGeneralCreateSupport' in the
'xcmSvcMonGeneralTable'. Usage: Conforming implementations which support
dynamic rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmSvcMonQueueRowStatus' row status object; and SHALL set the
'svcMonQueueGroup' bit in 'xcmSvcMonGeneralCreateSupport' in the
'xcmSvcMonGeneralTable'. Usage: Conforming implementations need NOT support
dynamic row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmSvcMonQueueDomain_Type(XcmCommsStackExtProtocol):
    """Custom type xcmSvcMonQueueDomain based on XcmCommsStackExtProtocol"""


_XcmSvcMonQueueDomain_Object = MibTableColumn
xcmSvcMonQueueDomain = _XcmSvcMonQueueDomain_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3, 2, 1, 3),
    _XcmSvcMonQueueDomain_Type()
)
xcmSvcMonQueueDomain.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonQueueDomain.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueDomain.setReference("""\
See: 'xcmSvcMonQueue[Path|Name]'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueDomain.setDescription("""\
The queue namespace domain (directory protocol) for the queue path and queue
name (eg, 'internetDNS', 'netwareNDS'). Usage: This queue namespace domain
SHALL be a valid directory protocol enumeration from 'XcmCommsStackExtProtocol'
in the XCMI Comms Engine TC. Usage: When a remote management station (client)
creates a row in 'xcmSvcMonQueueTable' (via 'xcmSvcMonQueueRowStatus'), this
queue namespace domain SHALL be specified. Note: For implementation efficiency,
this object uses the integer 'XcmCommStackExtProtocol' values (from the XCMI
Comms Engine MIB) rather than the equivalent 'XcmCO...' OID values (from the
XCMI Comms Config MIB).
""")


class _XcmSvcMonQueuePath_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmSvcMonQueuePath based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonQueuePath_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmSvcMonQueuePath_Object = MibTableColumn
xcmSvcMonQueuePath = _XcmSvcMonQueuePath_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3, 2, 1, 4),
    _XcmSvcMonQueuePath_Type()
)
xcmSvcMonQueuePath.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonQueuePath.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueuePath.setReference("""\
See: 'xcmSvcMonQueue[Domain|Name]'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueuePath.setDescription("""\
Human-readable queue path, used by system administrators and end-users to
specify the 'full network path' of a file server (eg, Novell Bindery) or
directory tree (eg, Novell NDS) which, when prefixed to the following
'xcmSvcMonQueueName' object, specifies a 'full network queue name' of this
queue. Usage: This queue path SHOULD be the one normally used in a command
shell for control of this queue. Usage: When a remote management station
(client) creates a row in 'xcmSvcMonQueueTable' (via
'xcmSvcMonQueueRowStatus'), this queue path SHALL be specified.
""")


class _XcmSvcMonQueueName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmSvcMonQueueName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonQueueName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmSvcMonQueueName_Object = MibTableColumn
xcmSvcMonQueueName = _XcmSvcMonQueueName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3, 2, 1, 5),
    _XcmSvcMonQueueName_Type()
)
xcmSvcMonQueueName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonQueueName.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueName.setReference("""\
See: 'xcmSvcMonQueue[Domain|Path]' See: 'xcmJobGenBasicTable' in XCMI Job
Monitoring MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueName.setDescription("""\
Human-readable queue name, used by system administrators and end-users to
specify the 'simple name' of this queue (or in the Novell NDS case, the context
and simple name concatenated), which, when suffixed to the preceding
'xcmSvcMonQueuePath' object, specifies a 'full network queue name' of this
queue. Usage: This queue name SHOULD be the one normally used in a command
shell for control of this queue. Usage: When a remote management station
(client) creates a row in 'xcmSvcMonQueueTable' (via
'xcmSvcMonQueueRowStatus'), this queue name SHALL be specified.
""")


class _XcmSvcMonQueueOnSystem_Type(TruthValue):
    """Custom type xcmSvcMonQueueOnSystem based on TruthValue"""


_XcmSvcMonQueueOnSystem_Object = MibTableColumn
xcmSvcMonQueueOnSystem = _XcmSvcMonQueueOnSystem_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 3, 2, 1, 6),
    _XcmSvcMonQueueOnSystem_Type()
)
xcmSvcMonQueueOnSystem.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonQueueOnSystem.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueOnSystem.setReference("""\
See: 'xcmSvcMonQueueRoutingIndex'.
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueOnSystem.setDescription("""\
Specifies whether this queue is present on this host system (local) or is on
another network system (remote).
""")
_XcmSvcMonQueueExt_ObjectIdentity = ObjectIdentity
xcmSvcMonQueueExt = _XcmSvcMonQueueExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4)
)
_XcmSvcMonQueueExtV1EventOID_ObjectIdentity = ObjectIdentity
xcmSvcMonQueueExtV1EventOID = _XcmSvcMonQueueExtV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 1)
)
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever
'xcmSvcMonQueue[State|Conditions|FaultCount]' changes. See SNMPv2 trap
definition 'xcmSvcMonQueueExtV2Event' below for 'special semantics'.
""")
_XcmSvcMonQueueExtV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmSvcMonQueueExtV2EventPrefix = _XcmSvcMonQueueExtV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 1, 0)
)
_XcmSvcMonQueueExtTable_Object = MibTable
xcmSvcMonQueueExtTable = _XcmSvcMonQueueExtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2)
)
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtTable.setReference("""\
See: 'xcmSvcMonQueueTable' in this MIB module.
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtTable.setDescription("""\
A table which augments 'xcmSvcMonQueueTable', with dynamic queue routing
(forwarding), state, conditions, fault info, create date, lifetime jobs, and
last connect date and jobs. Usage: Conforming implementations SHALL preserve
active queue table objects across management agent power cycles, and SHALL
implement one of the following two methods: 1) The agent SHALL store queue
table objects directly in 'stable storage'; or 2) The agent SHALL automatically
checkpoint all active queue table objects to 'stable storage' with reasonable
frequency (either due to a write to some queue table object, or upon expiration
of a product-specific timeout).
""")
_XcmSvcMonQueueExtEntry_Object = MibTableRow
xcmSvcMonQueueExtEntry = _XcmSvcMonQueueExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1)
)
xcmSvcMonQueueEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmSvcMonQueueExtEntry")
)
xcmSvcMonQueueExtEntry.setIndexNames(*xcmSvcMonQueueEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtEntry.setReference("""\
See: 'xcmSvcMonQueueTable' in this MIB module.
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtEntry.setDescription("""\
An entry which augments 'xcmSvcMonQueueTable', with dynamic queue routing
(forwarding), state, conditions, and fault info.
""")
_XcmSvcMonQueueRoutingIndex_Type = Cardinal32
_XcmSvcMonQueueRoutingIndex_Object = MibTableColumn
xcmSvcMonQueueRoutingIndex = _XcmSvcMonQueueRoutingIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 1),
    _XcmSvcMonQueueRoutingIndex_Type()
)
xcmSvcMonQueueRoutingIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRoutingIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRoutingIndex.setReference("""\
See: 'xcmSvcMonQueueOnSystem'.
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRoutingIndex.setDescription("""\
The (optional) routing index of this queue. Usage: This (optional) routing
index, for queue indirection mapping, specifies 'xcmSvcMonQueueIndex' for the
NEXT queue closer to (or on) this host system, or zero if none. Usage: It is
common for more than one off-system (remote) queue to be forwarded to the same
on-system (local) queue. Multiple off-system (remote) entries in the
'xcmSvcMonQueueTable' (for a given device) MAY forward to the same on-system
(local) entry.
""")


class _XcmSvcMonQueueState_Type(XcmCommsMgmtState):
    """Custom type xcmSvcMonQueueState based on XcmCommsMgmtState"""


_XcmSvcMonQueueState_Object = MibTableColumn
xcmSvcMonQueueState = _XcmSvcMonQueueState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 2),
    _XcmSvcMonQueueState_Type()
)
xcmSvcMonQueueState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueState.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueState.setReference("""\
See: 'XcmCommsMgmt[State|Conditions]' in XCMI Comms Engine. See:
'xcmSvcMonQueueConditions'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueState.setDescription("""\
The current state of this queue. Usage: This queue state specifies the
operational state of the application service or the network communications path
to this queue. Usage: This queue state need NOT be reported for a 'remote'
queue (ie, 'xcmSvcMonQueueOnSystem' is 'false'), although in some cases (eg,
Novell PServer), the state of (connectivity to) the 'remote' queue is known
(and SHALL be reported) on the managed system. Usage: This queue state SHALL be
as reported in the XCMI Comms Config/Engine MIB objects for this queue.
""")
_XcmSvcMonQueueConditions_Type = XcmCommsMgmtConditions
_XcmSvcMonQueueConditions_Object = MibTableColumn
xcmSvcMonQueueConditions = _XcmSvcMonQueueConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 3),
    _XcmSvcMonQueueConditions_Type()
)
xcmSvcMonQueueConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueConditions.setReference("""\
See: 'XcmCommsMgmt[State|Conditions]' in XCMI Comms Engine. See:
'xcmSvcMonQueueState'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueConditions.setDescription("""\
The current conditions (ie, state reasons) of this queue. Usage: These queue
conditions qualify the operational state of the application service or the
network communications path to this queue. Usage: These queue conditions need
NOT be reported for a 'remote' queue (ie, 'xcmSvcMonQueueOnSystem' is 'false'),
although in some cases (eg, Novell PServer), the state of (connectivity to) the
'remote' queue is known (and SHALL be reported) on the managed system. Usage:
These queue conditions SHALL be as reported in the XCMI Comms Config/Engine MIB
objects for this queue.
""")
_XcmSvcMonQueueFaultCount_Type = Counter32
_XcmSvcMonQueueFaultCount_Object = MibTableColumn
xcmSvcMonQueueFaultCount = _XcmSvcMonQueueFaultCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 4),
    _XcmSvcMonQueueFaultCount_Type()
)
xcmSvcMonQueueFaultCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultCount.setReference("""\
See: 'xcmSvcMonQueue[State|Conditions]'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultCount.setDescription("""\
The current fault count of this queue. Usage: This queue fault count qualifies
the operational state of the application service or the network communications
path to this queue. Usage: This queue fault count need NOT be reported for a
'remote' queue (ie, 'xcmSvcMonQueueOnSystem' is 'false'), although in some
cases (eg, Novell PServer), the state of (connectivity to) the 'remote' queue
is known (and SHALL be reported) on the managed system. Usage: This queue fault
count SHALL be as reported in any relevant device- or service-specific MIB for
this queue. Usage: Although no default value ('DEFVAL' clause) is permitted (by
IETF SMIv2) for this counter, conforming host systems SHALL zero this counter
upon conceptual row creation.
""")
_XcmSvcMonQueueFaultCode_Type = Integer32
_XcmSvcMonQueueFaultCode_Object = MibTableColumn
xcmSvcMonQueueFaultCode = _XcmSvcMonQueueFaultCode_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 5),
    _XcmSvcMonQueueFaultCode_Type()
)
xcmSvcMonQueueFaultCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultCode.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultCode.setReference("""\
See: 'xcmSvcMonQueue[State|Conditions]'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultCode.setDescription("""\
Encoded current fault code of this queue. Usage: This queue fault code
qualifies the operational state of the application service or the network
communications path to this queue. Usage: This queue fault code need NOT be
reported for a 'remote' queue (ie, 'xcmSvcMonQueueOnSystem' is 'false'),
although in some cases (eg, Novell PServer), the state of (connectivity to) the
'remote' queue is known (and SHALL be reported) on the managed system. Usage:
This queue fault code SHALL be as reported in any relevant device- or service-
specific MIB for this queue.
""")


class _XcmSvcMonQueueFaultString_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmSvcMonQueueFaultString based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonQueueFaultString_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmSvcMonQueueFaultString_Object = MibTableColumn
xcmSvcMonQueueFaultString = _XcmSvcMonQueueFaultString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 6),
    _XcmSvcMonQueueFaultString_Type()
)
xcmSvcMonQueueFaultString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultString.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultString.setReference("""\
See: 'xcmSvcMonQueue[State|Conditions]'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueFaultString.setDescription("""\
Human-readable current fault string of this queue. Usage: This queue fault
string qualifies the operational state of the application service or the
network communications path to this queue. Usage: This queue fault string need
NOT be reported for a 'remote' queue (ie, 'xcmSvcMonQueueOnSystem' is 'false'),
although in some cases (eg, Novell PServer), the state of (connectivity to) the
'remote' queue is known (and SHALL be reported) on the managed system. Usage:
This queue fault string SHALL be as reported in any relevant device- or
service-specific MIB for this queue.
""")


class _XcmSvcMonQueueRowCreateDate_Type(DateAndTime):
    """Custom type xcmSvcMonQueueRowCreateDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmSvcMonQueueRowCreateDate_Object = MibTableColumn
xcmSvcMonQueueRowCreateDate = _XcmSvcMonQueueRowCreateDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 7),
    _XcmSvcMonQueueRowCreateDate_Type()
)
xcmSvcMonQueueRowCreateDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowCreateDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowCreateDate.setReference("""\
See: 'xcmSvcMonQueueOnSystem'. See: 'xcmSvcMonQueueRowTotalJobs'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowCreateDate.setDescription("""\
The date and time of creation of this conceptual row in the
'xcmSvcMonQueueTable' (and 'xcmSvcMonQueueExtTable').
""")
_XcmSvcMonQueueRowTotalJobs_Type = Counter32
_XcmSvcMonQueueRowTotalJobs_Object = MibTableColumn
xcmSvcMonQueueRowTotalJobs = _XcmSvcMonQueueRowTotalJobs_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 8),
    _XcmSvcMonQueueRowTotalJobs_Type()
)
xcmSvcMonQueueRowTotalJobs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowTotalJobs.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowTotalJobs.setReference("""\
See: 'xcmSvcMonQueueOnSystem'. See: 'xcmSvcMonQueueRowTotalJobs'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueRowTotalJobs.setDescription("""\
The total jobs completed for this remote/local external job queue, since
'xcmSvcMonQueueRowCreateDate'. Usage: Although no default value ('DEFVAL'
clause) is permitted (by IETF SMIv2) for this counter, conforming host systems
SHALL zero this counter upon conceptual row creation.
""")


class _XcmSvcMonQueueLastConnectDate_Type(DateAndTime):
    """Custom type xcmSvcMonQueueLastConnectDate based on DateAndTime"""
    defaultHexValue = "0000000000000000"


_XcmSvcMonQueueLastConnectDate_Object = MibTableColumn
xcmSvcMonQueueLastConnectDate = _XcmSvcMonQueueLastConnectDate_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 9),
    _XcmSvcMonQueueLastConnectDate_Type()
)
xcmSvcMonQueueLastConnectDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueLastConnectDate.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueLastConnectDate.setReference("""\
See: 'xcmSvcMonQueueOnSystem'. See: 'xcmSvcMonQueueLastConnectJobs'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueLastConnectDate.setDescription("""\
The date and time of last connect (and/or login) to this remote or local
external job queue.
""")
_XcmSvcMonQueueLastConnectJobs_Type = Counter32
_XcmSvcMonQueueLastConnectJobs_Object = MibTableColumn
xcmSvcMonQueueLastConnectJobs = _XcmSvcMonQueueLastConnectJobs_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 2, 1, 10),
    _XcmSvcMonQueueLastConnectJobs_Type()
)
xcmSvcMonQueueLastConnectJobs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonQueueLastConnectJobs.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueLastConnectJobs.setReference("""\
See: 'xcmSvcMonQueueOnSystem'. See: 'xcmSvcMonQueueRowTotalJobs'
""")
if mibBuilder.loadTexts:
    xcmSvcMonQueueLastConnectJobs.setDescription("""\
The total jobs completed for this remote/local external job queue, since
'xcmSvcMonQueueLastConnectDate'. Usage: Although no default value ('DEFVAL'
clause) is permitted (by IETF SMIv2) for this counter, conforming host systems
SHALL zero this counter upon conceptual row creation.
""")
_XcmSvcMonService_ObjectIdentity = ObjectIdentity
xcmSvcMonService = _XcmSvcMonService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5)
)
_XcmSvcMonServiceV1EventOID_ObjectIdentity = ObjectIdentity
xcmSvcMonServiceV1EventOID = _XcmSvcMonServiceV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 1)
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever a
service status changes. See SNMPv2 trap definition 'xcmSvcMonServiceV2Event'
below for 'special semantics'.
""")
_XcmSvcMonServiceV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmSvcMonServiceV2EventPrefix = _XcmSvcMonServiceV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 1, 0)
)
_XcmSvcMonServiceTable_Object = MibTable
xcmSvcMonServiceTable = _XcmSvcMonServiceTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2)
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceTable.setReference("""\
See: 'xcmSecServiceTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceTable.setDescription("""\
A table of the system and/or end-user services supported and (possibly) ready
on this host system, and (possibly) associated with one or more 'physical',
'logical', or 'logicalAndPhysical' devices on this host system presenting job
services and one or more external devices (for security, accounting, etc),
attached to this host system.
""")
_XcmSvcMonServiceEntry_Object = MibTableRow
xcmSvcMonServiceEntry = _XcmSvcMonServiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1)
)
xcmSvcMonServiceEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmSvcMonServiceIndex"),
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceEntry.setReference("""\
See: 'xcmSecServiceEntry' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceEntry.setDescription("""\
An entry for a system and/or end-user service supported and (possibly) ready on
this host system, and (possibly) associated with one or more 'physical',
'logical', or 'logicalAndPhysical' devices on this host system presenting job
services and one or more external devices (for security, accounting, etc),
attached to this host system.
""")
_XcmSvcMonServiceIndex_Type = Ordinal32
_XcmSvcMonServiceIndex_Object = MibTableColumn
xcmSvcMonServiceIndex = _XcmSvcMonServiceIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 1),
    _XcmSvcMonServiceIndex_Type()
)
xcmSvcMonServiceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonServiceIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmSvcMonServiceTable'. Usage: Conforming management stations and management
agents SHALL ensure that 'xcmSvcMonServiceIndex' is equal to
'xcmSecServiceIndex' for the same service (if the XCMI Security MIB is also
implemented). Usage: This object SHALL be permanent (ie, preserved across all
hardware resets).
""")
_XcmSvcMonServiceRowStatus_Type = RowStatus
_XcmSvcMonServiceRowStatus_Object = MibTableColumn
xcmSvcMonServiceRowStatus = _XcmSvcMonServiceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 2),
    _XcmSvcMonServiceRowStatus_Type()
)
xcmSvcMonServiceRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceRowStatus.setReference("""\
See: 'xcmSvcMonGeneralCreateSupport' in 'xcmSvcMonGeneralTable'. See:
'RowStatus' in IETF SNMPv2 TC (RFC 1443/1903/2579). See:
'xcmHrDevMgmtCommandData' in XCMI HRX MIB and 'xcmSecUserMgmtData' in XCMI
Security MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmSvcMonServiceTable' and (optionally) in the 'xcmSvcMonServiceMgmtTable' (if
implemented on this system). Usage: Conforming management stations and
management agents SHALL ensure that 'xcmSvcMonServiceIndex' is equal to
'xcmSecServiceIndex' for the same service (if the XCMI Security MIB is also
implemented). Usage: Conforming implementations which support static rows SHALL
support 'active' and 'notInService' writes to this 'xcmSvcMonServiceRowStatus'
row status object; and SHALL clear the 'svcMonServiceGroup' bit in
'xcmSvcMonGeneralCreateSupport' in the 'xcmSvcMonGeneralTable'. Usage:
Conforming implementations which support dynamic rows SHALL support
'createAndGo' and 'destroy' writes to this 'xcmSvcMonServiceRowStatus' row
status object; and SHALL set the 'svcMonServiceGroup' bit in
'xcmSvcMonGeneralCreateSupport' in the 'xcmSvcMonGeneralTable'. Usage:
Conforming implementations need NOT support dynamic row creation (via
'createAndGo(4)') nor dynamic row deletion (via 'destroy(6)'). Usage: See
section 3.4 'Secure Modes of Operation' and section 3.5 'Secure SNMP Get/Set
Requests' in XCMI Security TC, for details of secure modes of access to this
row status object.
""")


class _XcmSvcMonServiceName_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmSvcMonServiceName based on XcmFixedLocaleDisplayString"""
    defaultHexValue = ""

    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonServiceName_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmSvcMonServiceName_Object = MibTableColumn
xcmSvcMonServiceName = _XcmSvcMonServiceName_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 3),
    _XcmSvcMonServiceName_Type()
)
xcmSvcMonServiceName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceName.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceName.setReference("""\
See: Section 9.5.1 'Server-name' in DPA (ISO/IEC 10175-1 Final Text, March
1996). See: 'xcmHrDevInfoName' in XCMI Ext to Host Res MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceName.setDescription("""\
A human-readable name, used by system administrators and end-users to identify
this service. Usage: This name SHALL be either: a) the name normally used in a
command shell for control of this service (eg,
'showstopper.sample.com/bin/scan2file'); or b) the local user-friendly service
name (eg, 'ScanToFile'). Usage: Conforming implementations need NOT ensure that
each 'xcmSvcMonServiceEntry' has a non-empty (on the managed system)
'xcmSvcMonServiceName' (ie, names support is optional), but a given
'xcmSvcMonServiceName' SHALL be found via the same value of
'xcmSecServiceIndex' on the same managed system (ie, service names SHALL be
persistent).
""")


class _XcmSvcMonServiceCurrentState_Type(XcmHrDpaState):
    """Custom type xcmSvcMonServiceCurrentState based on XcmHrDpaState"""


_XcmSvcMonServiceCurrentState_Object = MibTableColumn
xcmSvcMonServiceCurrentState = _XcmSvcMonServiceCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 4),
    _XcmSvcMonServiceCurrentState_Type()
)
xcmSvcMonServiceCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonServiceCurrentState.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceCurrentState.setReference("""\
See: Section 9.5.4 'Server-state' and section 9.1.6.4 'State' (generic object
state) in DPA (ISO/IEC 10175-1 Final Text, March 1996). See: Section D.2.3
'Server State Transitions' in DPA Mgmt Service (ISO 10175-3 Draft, October
1996). See: 'hrDeviceStatus' in IETF Host Resources MIB (RFC 2790). See:
'xcmHrDevInfoXStatus' and 'xcmHrDevInfoConditions' in XCMI Ext to Host
Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceCurrentState.setDescription("""\
The current state of this system and/or end-user service. Usage: The current
DPA object generic state of a service.
""")


class _XcmSvcMonServicePreviousState_Type(XcmHrDpaState):
    """Custom type xcmSvcMonServicePreviousState based on XcmHrDpaState"""


_XcmSvcMonServicePreviousState_Object = MibTableColumn
xcmSvcMonServicePreviousState = _XcmSvcMonServicePreviousState_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 5),
    _XcmSvcMonServicePreviousState_Type()
)
xcmSvcMonServicePreviousState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonServicePreviousState.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServicePreviousState.setReference("""\
See: Section 9.5.4 'Server-state' and section 9.1.6.4 'State' (generic object
state) in DPA (ISO/IEC 10175-1 Final Text, March 1996). See: Section D.2.3
'Server State Transitions' in DPA Mgmt Service (ISO 10175-3 Draft, October
1996). See: 'hrDeviceStatus' in IETF Host Resources MIB (RFC 2790). See:
'xcmHrDevInfoXStatus' and 'xcmHrDevInfoConditions' in XCMI Ext to Host
Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServicePreviousState.setDescription("""\
The previous state of this system and/or end-user service. Usage: The previous
DPA object generic state of a service.
""")
_XcmSvcMonServiceConditions_Type = XcmHrDpaConditions
_XcmSvcMonServiceConditions_Object = MibTableColumn
xcmSvcMonServiceConditions = _XcmSvcMonServiceConditions_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 6),
    _XcmSvcMonServiceConditions_Type()
)
xcmSvcMonServiceConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonServiceConditions.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceConditions.setReference("""\
See: Section 9.5.4 'Server-state' and section 9.1.6.4 'State' (generic object
state) in DPA (ISO/IEC 10175-1 Final Text, March 1996). See: Section D.2.3
'Server State Transitions' in DPA Mgmt Service (ISO 10175-3 Draft, October
1996). See: 'hrDeviceStatus' in IETF Host Resources MIB (RFC 2790). See:
'xcmHrDevInfoXStatus' and 'xcmHrDevInfoConditions' in XCMI Ext to Host
Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceConditions.setDescription("""\
The current conditions (ie, state reasons) of this system and/or end-user
service.
""")


class _XcmSvcMonServiceAvailability_Type(XcmHrDpaAvailability):
    """Custom type xcmSvcMonServiceAvailability based on XcmHrDpaAvailability"""


_XcmSvcMonServiceAvailability_Object = MibTableColumn
xcmSvcMonServiceAvailability = _XcmSvcMonServiceAvailability_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 7),
    _XcmSvcMonServiceAvailability_Type()
)
xcmSvcMonServiceAvailability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonServiceAvailability.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceAvailability.setReference("""\
See: Section 9.1.6.6 '[Generic attribute] Availability' and Annex A 'id-val-
availability-...' in DPA (ISO/IEC 10175-1 Final Text, March 1996).
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceAvailability.setDescription("""\
The availability of this system and/or end-user service.
""")
_XcmSvcMonServicePhysicalDevice_Type = Cardinal32
_XcmSvcMonServicePhysicalDevice_Object = MibTableColumn
xcmSvcMonServicePhysicalDevice = _XcmSvcMonServicePhysicalDevice_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 8),
    _XcmSvcMonServicePhysicalDevice_Type()
)
xcmSvcMonServicePhysicalDevice.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServicePhysicalDevice.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServicePhysicalDevice.setReference("""\
See: 'hrDeviceIndex' in the Device group of IETF Host Resources MIB (RFC 2790).
See: 'xcmHrDevInfoRealization' in the Device Info group of XCMI Ext to Host
Resources MIB. See: Section 9.4 (pages 181 to 184) of DPA (Document Printing
Application) ISO/IEC 10175 (Final Text, March 1996) for a discussion of
'printer realizations' of 'physical', 'logical', and 'logical-and-physical'
types (the latter peculiar to DPA).
""")
if mibBuilder.loadTexts:
    xcmSvcMonServicePhysicalDevice.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the first associated physical
device row in the 'hrDeviceTable' in the Host Resources MIB (RFC 2790) and an
(optional) associated row in 'xcmHrDevInfoTable' of the XCMI Ext to Host
Resources MIB, or zero if none. Usage: Conforming implementations SHALL ensure
that physical devices underlying services are 'visible'.
""")
_XcmSvcMonServiceLogicalDevice_Type = Cardinal32
_XcmSvcMonServiceLogicalDevice_Object = MibTableColumn
xcmSvcMonServiceLogicalDevice = _XcmSvcMonServiceLogicalDevice_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 9),
    _XcmSvcMonServiceLogicalDevice_Type()
)
xcmSvcMonServiceLogicalDevice.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceLogicalDevice.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceLogicalDevice.setReference("""\
See: 'xcmSvcMonServicePhysicalDevice' above.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceLogicalDevice.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the first associated logical
device row in the 'hrDeviceTable' in the Host Resources MIB (RFC 2790) and an
(optional) associated row in 'xcmHrDevInfoTable' of the XCMI Ext to Host
Resources MIB, or zero if none. Usage: Conforming implementations SHALL ensure
that logical devices presenting services are 'visible'.
""")
_XcmSvcMonServiceExternalDevice_Type = Cardinal32
_XcmSvcMonServiceExternalDevice_Object = MibTableColumn
xcmSvcMonServiceExternalDevice = _XcmSvcMonServiceExternalDevice_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 10),
    _XcmSvcMonServiceExternalDevice_Type()
)
xcmSvcMonServiceExternalDevice.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceExternalDevice.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceExternalDevice.setReference("""\
See: 'hrDeviceIndex' in the Device group of IETF Host Resources MIB (RFC 2790).
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceExternalDevice.setDescription("""\
The value of 'hrDeviceIndex' corresponding to the first associated external
device row in the 'hrDeviceTable' in the Host Resources MIB (RFC 2790) and an
(optional) associated row in 'xcmHrDevInfoTable' of the XCMI Ext to Host
Resources MIB, or zero if none. Usage: Such an external device is termed a
'foreign attachment' and SHALL have 'xcmHrDevInfoRealization' of 'physical' in
the Device Info group of the XCMI Ext to Host Resources MIB - such a device
performs some security processing (any authentication, authorization, or
accounting), job processing, job finishing, or other off-system activity, on
behalf of this service.
""")
_XcmSvcMonServiceSWRun_Type = Cardinal32
_XcmSvcMonServiceSWRun_Object = MibTableColumn
xcmSvcMonServiceSWRun = _XcmSvcMonServiceSWRun_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 11),
    _XcmSvcMonServiceSWRun_Type()
)
xcmSvcMonServiceSWRun.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceSWRun.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceSWRun.setReference("""\
See: 'hrSWRunIndex' in the Software Running group of IETF Host Resources MIB
(RFC 2790). See: Software Running Extensions group of XCMI Ext to Host
Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceSWRun.setDescription("""\
The value of 'hrSWRunIndex' corresponding to the first associated conceptual
row in the 'hrSWRunTable' of the Host Resources MIB (RFC 2790) and an
(optional) associated row in 'xcmHrSWRunTable' of the XCMI Ext to Host
Resources MIB, or zero if none. Usage: A 'chain' of one or more Software
Running entries in the Host Resources MIB MAY be associated with this service.
By convention, the FIRST of these entries SHALL represent the security
functional unit of this service.
""")
_XcmSvcMonServiceSWInstalled_Type = Cardinal32
_XcmSvcMonServiceSWInstalled_Object = MibTableColumn
xcmSvcMonServiceSWInstalled = _XcmSvcMonServiceSWInstalled_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 12),
    _XcmSvcMonServiceSWInstalled_Type()
)
xcmSvcMonServiceSWInstalled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceSWInstalled.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceSWInstalled.setReference("""\
See: 'hrSWInstalledIndex' in the Software Installed group of IETF Host
Resources MIB (RFC 2790). See: Software Installed Extensions group of XCMI Ext
to Host Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceSWInstalled.setDescription("""\
The value of 'hrSWInstalledIndex' corresponding to the first associated
conceptual row in the 'hrSWInstalledTable' of the Host Resources MIB (RFC 2790)
and an (optional) associated row in 'xcmHrSWInstalledTable' in XCMI Ext to Host
Resources MIB, or zero if none. Usage: A 'chain' of one or more Software
Installed entries in the Host Resources MIB MAY be associated with a service.
By convention, the FIRST of these entries SHALL represent the security
functional unit of a service.
""")
_XcmSvcMonServiceStorage_Type = Cardinal32
_XcmSvcMonServiceStorage_Object = MibTableColumn
xcmSvcMonServiceStorage = _XcmSvcMonServiceStorage_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 13),
    _XcmSvcMonServiceStorage_Type()
)
xcmSvcMonServiceStorage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceStorage.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceStorage.setReference("""\
See: 'hrStorageIndex' in the Storage group of IETF Host Resources MIB (RFC
2790). See: Storage Extensions group of XCMI Ext to Host Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceStorage.setDescription("""\
The value of 'hrStorageIndex' corresponding to the first associated conceptual
row in the 'hrStorageTable' of the Host Resources MIB (RFC 2790) and an
(optional) associated row in 'xcmHrStorageTable' of the XCMI Ext to Host
Resources MIB, or zero if none. Usage: A 'chain' of one or more Storage entries
in the Host Resources MIB MAY be associated with a service.
""")


class _XcmSvcMonServicePriority_Type(Integer32):
    """Custom type xcmSvcMonServicePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XcmSvcMonServicePriority_Type.__name__ = "Integer32"
_XcmSvcMonServicePriority_Object = MibTableColumn
xcmSvcMonServicePriority = _XcmSvcMonServicePriority_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 14),
    _XcmSvcMonServicePriority_Type()
)
xcmSvcMonServicePriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServicePriority.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServicePriority.setReference("""\
See: 'xcmHrDevInfoPriority' in XCMI Ext to Host Resources MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServicePriority.setDescription("""\
The current priority of this system and/or end-user service. Usage: The
scheduling priority of this service, where '0' is unspecified (default), '1' is
lowest, and '100' is highest.
""")


class _XcmSvcMonServiceType_Type(XcmSvcMonServiceType):
    """Custom type xcmSvcMonServiceType based on XcmSvcMonServiceType"""


_XcmSvcMonServiceType_Object = MibTableColumn
xcmSvcMonServiceType = _XcmSvcMonServiceType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 15),
    _XcmSvcMonServiceType_Type()
)
xcmSvcMonServiceType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceType.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceType.setDescription("""\
The explicit type of this system and/or end-user service.
""")


class _XcmSvcMonServiceStateDetail_Type(OctetString):
    """Custom type xcmSvcMonServiceStateDetail based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_XcmSvcMonServiceStateDetail_Type.__name__ = "OctetString"
_XcmSvcMonServiceStateDetail_Object = MibTableColumn
xcmSvcMonServiceStateDetail = _XcmSvcMonServiceStateDetail_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 2, 1, 16),
    _XcmSvcMonServiceStateDetail_Type()
)
xcmSvcMonServiceStateDetail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonServiceStateDetail.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceStateDetail.setReference("""\
See: 'XcmSvcMonServiceStateDetail' in XCMI Service Monitor MIB TC; Section
7.1.4 'The BITS construct' in the IETF Coexistence between Version 1, Version
2, and Version 3 of the Internet-standard Network Management Framework SMIv2
(RFC 2578)
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceStateDetail.setDescription("""\
This object represents additional status details to further describe the
current state of the service. Usage: This bit-array is constructed from the set
of supported values from 'XcmSvcMonServiceStateDetail', used as powers of 2
with big-endian rules - the high-order bit of the first octet corresponds to a
service state detail '0' (reserved) - the low-order bit of the first octet
corresponds to a service state detail of '7'. Similar to the BITS pseudotype
defined in IETF SMIv2 (RFC 2578), which has the same bit ordering rules but
requires definitions for contiguous enumerated bits.
""")
_XcmSvcMonServiceDetail_ObjectIdentity = ObjectIdentity
xcmSvcMonServiceDetail = _XcmSvcMonServiceDetail_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6)
)
_XcmSvcMonServiceDetailTable_Object = MibTable
xcmSvcMonServiceDetailTable = _XcmSvcMonServiceDetailTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2)
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailTable.setDescription("""\
A 'sparse' table containing service detail information for installed and
(possibly) active services on this host system, augmenting the basic entries in
the 'xcmSvcMonServiceTable' of the XCMI Service Monitoring MIB. Usage: UNLIKE
the 'xcmGenOptionTable' in the XCMI General MIB (which is a unique exception),
this table of 'dictionary-based' service details is used with DIRECT
create/update operations.
""")
_XcmSvcMonServiceDetailEntry_Object = MibTableRow
xcmSvcMonServiceDetailEntry = _XcmSvcMonServiceDetailEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1)
)
xcmSvcMonServiceDetailEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmSvcMonServiceIndex"),
    (0, "XEROX-COMMON-MIB", "xcmSvcMonServiceDetailClass"),
    (0, "XEROX-COMMON-MIB", "xcmSvcMonServiceDetailType"),
    (0, "XEROX-COMMON-MIB", "xcmSvcMonServiceDetailIndex"),
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailEntry.setDescription("""\
A 'sparse' entry containing service detail information for an installed and
(possibly) active service on this host system, augmenting a basic entry in the
'xcmSvcMonServiceTable' of the XCMI Service Monitoring MIB.
""")
_XcmSvcMonServiceDetailClass_Type = XcmSvcMonServiceDetailClass
_XcmSvcMonServiceDetailClass_Object = MibTableColumn
xcmSvcMonServiceDetailClass = _XcmSvcMonServiceDetailClass_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 1),
    _XcmSvcMonServiceDetailClass_Type()
)
xcmSvcMonServiceDetailClass.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailClass.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailClass.setDescription("""\
A service detail class, used by system administrators and end users to specify
the correct class for this service detail.
""")
_XcmSvcMonServiceDetailType_Type = XcmSvcMonServiceDetailType
_XcmSvcMonServiceDetailType_Object = MibTableColumn
xcmSvcMonServiceDetailType = _XcmSvcMonServiceDetailType_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 2),
    _XcmSvcMonServiceDetailType_Type()
)
xcmSvcMonServiceDetailType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailType.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailType.setDescription("""\
A service detail type, used by system administrators and end users to specify
the correct type for this service detail.
""")
_XcmSvcMonServiceDetailIndex_Type = Ordinal32
_XcmSvcMonServiceDetailIndex_Object = MibTableColumn
xcmSvcMonServiceDetailIndex = _XcmSvcMonServiceDetailIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 3),
    _XcmSvcMonServiceDetailIndex_Type()
)
xcmSvcMonServiceDetailIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmSvcMonServiceDetailTable', OR a common value shared across a set of related
conceptual rows (with different values of 'xcmSvcMonServiceDetailType'. Usage:
For service detail types which are single-valued, this index SHALL be used to
correlate related single-valued details. Usage: For service detail types which
are multi-valued, this index SHALL be used to enumerate lists of multi-valued
details.
""")
_XcmSvcMonServiceDetailRowStatus_Type = RowStatus
_XcmSvcMonServiceDetailRowStatus_Object = MibTableColumn
xcmSvcMonServiceDetailRowStatus = _XcmSvcMonServiceDetailRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 4),
    _XcmSvcMonServiceDetailRowStatus_Type()
)
xcmSvcMonServiceDetailRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailRowStatus.setReference("""\
See: 'xcmSvcMonGeneralCreateSupport' in 'xcmSvcMonGeneralTable'. See:
'RowStatus' in IETF SNMPv2 TC (RFC 1443/1903/2579). See:
'xcmHrDevMgmtCommandData' in XCMI HRX MIB and 'xcmSecUserMgmtData' in XCMI
Security MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailRowStatus.setDescription("""\
This object is used to create and delete individual conceptual rows in the
'xcmSvcMonServiceDetailTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmSvcMonServiceDetailRowStatus' row status object; and SHALL clear the
'svcMonServiceDetailGroup' bit in 'xcmSvcMonGeneralCreateSupport' in the
'xcmSvcMonGeneralTable'. Usage: Conforming implementations which support
dynamic rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmSvcMonServiceDetailRowStatus' row status object; and SHALL set the
'svcMonServiceDetailGroup' bit in 'xcmSvcMonGeneralCreateSupport' in the
'xcmSvcMonGeneralTable'. Usage: Conforming implementations need NOT support
dynamic row creation (via 'createAndGo(4)') nor dynamic row deletion (via
'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and section
3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of secure
modes of access to this row status object.
""")


class _XcmSvcMonServiceDetailUnitClass_Type(XcmHrDevDetailUnitClass):
    """Custom type xcmSvcMonServiceDetailUnitClass based on XcmHrDevDetailUnitClass"""


_XcmSvcMonServiceDetailUnitClass_Object = MibTableColumn
xcmSvcMonServiceDetailUnitClass = _XcmSvcMonServiceDetailUnitClass_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 5),
    _XcmSvcMonServiceDetailUnitClass_Type()
)
xcmSvcMonServiceDetailUnitClass.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailUnitClass.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailUnitClass.setReference("""\
See: 'xcmSvcMonServiceDetailUnit'
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailUnitClass.setDescription("""\
The value unit class of the detail information specified in this conceptual row
in the 'xcmSvcMonServiceDetailTable'. Usage: Used to select a textual
convention for specifying the value unit of this service detail. Usage: The
'xcmSvcMonServiceDetail[UnitClass|Class]' objects are used to specify the value
syntax AND the value unit of the 'xcmSvcMonServiceDetail[Integer|OID|String]'
value objects.
""")
_XcmSvcMonServiceDetailUnit_Type = Cardinal32
_XcmSvcMonServiceDetailUnit_Object = MibTableColumn
xcmSvcMonServiceDetailUnit = _XcmSvcMonServiceDetailUnit_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 6),
    _XcmSvcMonServiceDetailUnit_Type()
)
xcmSvcMonServiceDetailUnit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailUnit.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailUnit.setReference("""\
See: 'xcmSvcMonServiceDetailUnitClass'
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailUnit.setDescription("""\
The value unit of the detail information specified in this conceptual row in
the 'xcmSvcMonServiceDetailTable'. Usage: Used to select an enumerated choice
from a textual convention to specify the value unit of this service detail.
Usage: The 'xcmSvcMonServiceDetail[UnitClass|Class]' objects are used to
specify the value syntax AND the value unit of the
'xcmSvcMonServiceDetail[Integer|OID|String]' value objects.
""")
_XcmSvcMonServiceDetailInteger_Type = Integer32
_XcmSvcMonServiceDetailInteger_Object = MibTableColumn
xcmSvcMonServiceDetailInteger = _XcmSvcMonServiceDetailInteger_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 7),
    _XcmSvcMonServiceDetailInteger_Type()
)
xcmSvcMonServiceDetailInteger.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailInteger.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailInteger.setReference("""\
See: 'xcmSvcMonServiceDetailOID' and 'xcmSvcMonServiceDetailString' See:
'xcmSvcMonServiceDetailUnitClass' and 'xcmSvcMonServiceDetailUnit' for syntax
of detail value
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailInteger.setDescription("""\
A service detail value integer, used by system administrators and end users to
specify the current value for a service detail with a base value syntax of
'INTEGER'.
""")


class _XcmSvcMonServiceDetailOID_Type(ObjectIdentifier):
    """Custom type xcmSvcMonServiceDetailOID based on ObjectIdentifier"""
    defaultValue = "(0, 0)"


_XcmSvcMonServiceDetailOID_Object = MibTableColumn
xcmSvcMonServiceDetailOID = _XcmSvcMonServiceDetailOID_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 8),
    _XcmSvcMonServiceDetailOID_Type()
)
xcmSvcMonServiceDetailOID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailOID.setReference("""\
See: 'xcmSvcMonServiceDetailInteger' and 'xcmSvcMonServiceDetailString' See:
'xcmSvcMonServiceDetailUnitClass' and 'xcmSvcMonServiceDetailUnit' for syntax
of detail value
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailOID.setDescription("""\
A service detail value OID (object identifier), used by system administrators
and end users to specify the current value for a service detail with a base
value syntax of 'OBJECT IDENTIFIER'.
""")


class _XcmSvcMonServiceDetailString_Type(OctetString):
    """Custom type xcmSvcMonServiceDetailString based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonServiceDetailString_Type.__name__ = "OctetString"
_XcmSvcMonServiceDetailString_Object = MibTableColumn
xcmSvcMonServiceDetailString = _XcmSvcMonServiceDetailString_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 6, 2, 1, 9),
    _XcmSvcMonServiceDetailString_Type()
)
xcmSvcMonServiceDetailString.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailString.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailString.setReference("""\
See: 'xcmSvcMonServiceDetailInteger' and 'xcmSvcMonServiceDetailOID' See:
'xcmSvcMonServiceDetailUnitClass' and 'xcmSvcMonServiceDetailUnit' for syntax
of detail value
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailString.setDescription("""\
A service detail value string, used by system administrators and end users to
specify the current value for a service detail with a base value syntax of
'OCTET STRING'. Usage: This object is of type 'XcmFixedLocaleDisplayString'.
Usage: Conformant implementations MUST encrypt passwords, keys, and other
security information stored in this string object.
""")
_XcmSvcMonServiceMgmt_ObjectIdentity = ObjectIdentity
xcmSvcMonServiceMgmt = _XcmSvcMonServiceMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7)
)
_XcmSvcMonServiceMgmtV1EventOID_ObjectIdentity = ObjectIdentity
xcmSvcMonServiceMgmtV1EventOID = _XcmSvcMonServiceMgmtV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 1)
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever an
'xcmSvcMonServiceMgmtOperation' completes. See SNMPv2 trap definition
'xcmSvcMonServiceMgmtV2Event' below for 'special semantics'.
""")
_XcmSvcMonServiceMgmtV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmSvcMonServiceMgmtV2EventPrefix = _XcmSvcMonServiceMgmtV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 1, 0)
)
_XcmSvcMonServiceMgmtTable_Object = MibTable
xcmSvcMonServiceMgmtTable = _XcmSvcMonServiceMgmtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2)
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtTable.setDescription("""\
A table containing service management requests for control of system and/or
end-user services on this host system.
""")
_XcmSvcMonServiceMgmtEntry_Object = MibTableRow
xcmSvcMonServiceMgmtEntry = _XcmSvcMonServiceMgmtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1)
)
xcmSvcMonServiceEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmSvcMonServiceMgmtEntry")
)
xcmSvcMonServiceMgmtEntry.setIndexNames(*xcmSvcMonServiceEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtEntry.setDescription("""\
An entry containing a service management request for control of a system and/or
end-user service on this host system.
""")
_XcmSvcMonServiceMgmtOperation_Type = XcmSvcMonServiceMgmtOperation
_XcmSvcMonServiceMgmtOperation_Object = MibTableColumn
xcmSvcMonServiceMgmtOperation = _XcmSvcMonServiceMgmtOperation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1, 1),
    _XcmSvcMonServiceMgmtOperation_Type()
)
xcmSvcMonServiceMgmtOperation.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtOperation.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtOperation.setReference("""\
See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE
1387.4 / Draft 8, October 1994). See: OBJECT clause in MODULE-COMPLIANCE macro
of XCMI Service Monitoring MIB, for compliance info.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtOperation.setDescription("""\
The most recent service management operation specified for this conceptual row
in the 'xcmSvcMonServiceMgmtTable'. Usage: Conforming management agents SHALL
'reject' any SNMP Set-Request to 'xcmSvcMonServiceMgmt[Operation|Data]' while
another management operation is already in progress (ie, while
'xcmSvcMonServiceMgmtInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: Conforming management stations SHALL
set 'xcmSvcMonServiceMgmtOperation' (mgmt operation) and
'xcmSvcMonServiceMgmtData' (mgmt arguments) SIMULTANEOUSLY (in the same SNMP
Set-Request PDU).
""")


class _XcmSvcMonServiceMgmtData_Type(XcmSvcMonServiceMgmtData):
    """Custom type xcmSvcMonServiceMgmtData based on XcmSvcMonServiceMgmtData"""
    defaultHexValue = ""

    subtypeSpec = XcmSvcMonServiceMgmtData.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonServiceMgmtData_Type.__name__ = "XcmSvcMonServiceMgmtData"
_XcmSvcMonServiceMgmtData_Object = MibTableColumn
xcmSvcMonServiceMgmtData = _XcmSvcMonServiceMgmtData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1, 2),
    _XcmSvcMonServiceMgmtData_Type()
)
xcmSvcMonServiceMgmtData.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtData.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtData.setReference("""\
See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE
1387.4 / Draft 8, October 1994). See: OBJECT clause in MODULE-COMPLIANCE macro
of XCMI Service Monitoring MIB, for compliance info. See:
'XcmHrDevMgmtCommandDataTag' textual convention, Section 3.4 'XCMI Standard
Tagged Management Data', and Section 3.5 'Simple Device Management Requests' in
XCMI Ext to Host Resources TC. See: Section 3.5.3 'Secure Simple Device Mgmt
Requests' in XCMI Security TC.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtData.setDescription("""\
The most recent service management data specified for this conceptual row in
the 'xcmSvcMonServiceMgmtTable'. Usage: Conforming management agents SHALL
'reject' any SNMP Set-Request to 'xcmSvcMonServiceMgmt[Operation|Data]' while
another management operation is already in progress (ie, while
'xcmSvcMonServiceMgmtInProgress' is 'true') with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: Conforming management stations SHALL
set 'xcmSvcMonServiceMgmtOperation' (mgmt operation) and
'xcmSvcMonServiceMgmtData' (mgmt arguments) SIMULTANEOUSLY (in the same SNMP
Set-Request PDU). Usage: Conformant implementations MUST encrypt passwords,
keys, and other security information stored in this string object. Usage:
Management strings will be formatted as specified in the
'XcmHrDevMgmtCommandDataTag' textual convention. This means that the
'TT=value:' string format will be used with all management strings. Usage:
Strings that have been specified by XCMI are provided in the
'XcmSvcMonServiceMgmtData'.
""")
_XcmSvcMonServiceMgmtStatus_Type = XcmGenSNMPv2ErrorStatus
_XcmSvcMonServiceMgmtStatus_Object = MibTableColumn
xcmSvcMonServiceMgmtStatus = _XcmSvcMonServiceMgmtStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1, 3),
    _XcmSvcMonServiceMgmtStatus_Type()
)
xcmSvcMonServiceMgmtStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtStatus.setReference("""\
See: 'xcmSvcMonServiceMgmt[Operation|Data|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtStatus.setDescription("""\
The service management error status associated with this conceptual row in
'xcmSvcMonServiceMgmtTable'. Usage: Conforming management agents SHALL set this
object to the value returned in an SNMP Set-Response PDU when a service
management operation is 'accepted', ie, when 'xcmSvcMonServiceMgmtInProgress'
goes from 'false' to 'true'. Usage: Conforming management agents SHALL set this
object to the value of the completion status of the (possibly deferred) service
management operation, when 'xcmSvcMonServiceMgmtInProgress' goes from 'true' to
'false'.
""")


class _XcmSvcMonServiceMgmtInProgress_Type(TruthValue):
    """Custom type xcmSvcMonServiceMgmtInProgress based on TruthValue"""


_XcmSvcMonServiceMgmtInProgress_Object = MibTableColumn
xcmSvcMonServiceMgmtInProgress = _XcmSvcMonServiceMgmtInProgress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1, 4),
    _XcmSvcMonServiceMgmtInProgress_Type()
)
xcmSvcMonServiceMgmtInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtInProgress.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtInProgress.setReference("""\
See: 'xcmSvcMonServiceMgmt[Operation|Data|Status]'
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtInProgress.setDescription("""\
The service management in progress status associated with this conceptual row
in 'xcmSvcMonServiceMgmtTable'. Usage: Conforming management agents SHALL
'reject' any SNMP Set-Request to 'xcmSvcMonServiceMgmt[Operation|Data]' while
another management operation is already in progress (ie, while
'xcmSvcMonServiceMgmtInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3).
""")
_XcmSvcMonServiceMgmtRowStatus_Type = RowStatus
_XcmSvcMonServiceMgmtRowStatus_Object = MibTableColumn
xcmSvcMonServiceMgmtRowStatus = _XcmSvcMonServiceMgmtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1, 5),
    _XcmSvcMonServiceMgmtRowStatus_Type()
)
xcmSvcMonServiceMgmtRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtRowStatus.setReference("""\
See: xcmSvcMonGeneralCreateSupport in the xcmSvcMonServiceGeneralTable. See:
RowStatus in IETF SNMPv2 TC (RFC 1443/1903/2579). See: xcmSvcMonServiceMgmtData
in XCMI Service Monitoring MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtRowStatus.setDescription("""\
This object manages the row status of this conceptual row in the
'xcmSvcMonServiceMgmtTable'. Usage: Conforming implementations which support
static rows SHALL support 'active' and 'notInService' writes to this
'xcmSvcMonServiceMgmtRowStatus' row status object; and SHALL clear the
'xcmSvcMonServiceMgmtGroup' bit in 'xcmSvcMonGeneralCreateSupport' in the
'xcmSvcMonServiceGeneralTable'. Usage: Conforming implementations which support
dynamic rows SHALL support 'createAndGo' and 'destroy' writes to this
'xcmSvcMonServiceMgmtRowStatus' row status object; and SHALL set the
'xcmSvcMonServiceMgmtGroup' bit in 'xcmSvcMonGeneralCreateSupport' in the
'xcmSvcMonServiceGeneralTable'. Usage: Conforming implementations need NOT
support dynamic row creation (via 'createAndGo(4)') nor dynamic row deletion
(via 'destroy(6)'). Usage: See section 3.4 'Secure Modes of Operation' and
section 3.5 'Secure SNMP Get/Set Requests' in XCMI Security TC, for details of
secure modes of access to this row status object.
""")


class _XcmSvcMonServiceMgmtUserPassword_Type(OctetString):
    """Custom type xcmSvcMonServiceMgmtUserPassword based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonServiceMgmtUserPassword_Type.__name__ = "OctetString"
_XcmSvcMonServiceMgmtUserPassword_Object = MibTableColumn
xcmSvcMonServiceMgmtUserPassword = _XcmSvcMonServiceMgmtUserPassword_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1, 6),
    _XcmSvcMonServiceMgmtUserPassword_Type()
)
xcmSvcMonServiceMgmtUserPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtUserPassword.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtUserPassword.setReference("""\
See: 'xcmSvcMonServiceMgmt[Operator|Admin]Password' See: Section 3.5.2 'Secure
Password Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable'
in XCMI System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtUserPassword.setDescription("""\
A protected end user password for this device. Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information
stored in this string object. Usage: When changing the [User|Operator|Admin]
Password, conformant implementations MUST encrypt the NEW password that is
submitted in 'xcmSvcMonServiceMgmtData'. Usage: All XCMI conforming management
agents: a) SHOULD always return a zero length string in response to an SNMP
GetRequest of this object; b) SHALL NOT return the contents of this object in
cleartext (ie, unencrypted) in response to an SNMP GetRequest; c) SHOULD
support (ie, accept) an authenticated SNMP SetRequest changing the system 'end
user password' that is used in this object.
""")


class _XcmSvcMonServiceMgmtOperatorPassword_Type(OctetString):
    """Custom type xcmSvcMonServiceMgmtOperatorPassword based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonServiceMgmtOperatorPassword_Type.__name__ = "OctetString"
_XcmSvcMonServiceMgmtOperatorPassword_Object = MibTableColumn
xcmSvcMonServiceMgmtOperatorPassword = _XcmSvcMonServiceMgmtOperatorPassword_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1, 7),
    _XcmSvcMonServiceMgmtOperatorPassword_Type()
)
xcmSvcMonServiceMgmtOperatorPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtOperatorPassword.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtOperatorPassword.setReference("""\
See: 'xcmSvcMonServiceMgmt[User|Admin]Password' See: Section 3.5.2 'Secure
Password Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable'
in XCMI System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtOperatorPassword.setDescription("""\
A protected system operator password for this device. Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information
stored in this string object. Usage: When changing the [User|Operator|Admin]
Password, conformant implementations MUST encrypt the NEW password that is
submitted in 'xcmSvcMonServiceMgmtData'. Usage: All XCMI conforming management
agents: a) SHOULD always return a zero length string in response to an SNMP
GetRequest of this object; b) SHALL NOT return the contents of this object in
cleartext (ie, unencrypted) in response to an SNMP GetRequest; c) SHOULD
support (ie, accept) an authenticated SNMP SetRequest changing the system
'operator password' that is used in this object.
""")


class _XcmSvcMonServiceMgmtAdminPassword_Type(OctetString):
    """Custom type xcmSvcMonServiceMgmtAdminPassword based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSvcMonServiceMgmtAdminPassword_Type.__name__ = "OctetString"
_XcmSvcMonServiceMgmtAdminPassword_Object = MibTableColumn
xcmSvcMonServiceMgmtAdminPassword = _XcmSvcMonServiceMgmtAdminPassword_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 2, 1, 8),
    _XcmSvcMonServiceMgmtAdminPassword_Type()
)
xcmSvcMonServiceMgmtAdminPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtAdminPassword.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtAdminPassword.setReference("""\
See: 'xcmSvcMonServiceMgmt[User|Operator]Password' See: Section 3.5.2 'Secure
Password Change Requests' in XCMI Security TC. See: 'xcmSysAdminRequestTable'
in XCMI System Admin MIB and 'xcmSecUserTable' in XCMI Security MIB.
""")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtAdminPassword.setDescription("""\
A protected system administrator password for this device. Usage: Conformant
implementations MUST encrypt passwords, keys, and other security information
stored in this string object. Usage: When changing the [User|Operator|Admin]
Password, conformant implementations MUST encrypt the NEW password that is
submitted in 'xcmSvcMonServiceMgmtData'. Usage: All XCMI conforming management
agents: a) SHOULD always return a zero length string in response to an SNMP
GetRequest of this object; b) SHALL NOT return the contents of this object in
cleartext (ie, unencrypted) in response to an SNMP GetRequest; c) SHOULD
support (ie, accept) an authenticated SNMP SetRequest changing the system
'administrator password' that is used in this object.
""")
_XcmSimpleJobMgmtTC_ObjectIdentity = ObjectIdentity
xcmSimpleJobMgmtTC = _XcmSimpleJobMgmtTC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 75)
)
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtTC.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtTC.setDescription("""\
Version: 5.10.pub Textual Conventions companion to the XCMI Simple Job Mgmt
MIB, the MIB module for performing lightweight management of jobs in network
accessible host systems. See: Document Printing Application - Part 1: Abstract
Service (ISO/IEC 10175-1 / Final Text, March 1996). See: POSIX System
Administration - Part 4: Print Interfaces (IEEE 1387.4 / Draft 8, October
1994). See: OSI Reference Model - Part 1: Basic Reference Model (CCITT
X.200:1992 | ISO 7498-1:1992). Copyright (C) 1997-2002 Xerox Corporation. All
Rights Reserved.
""")
_XCmSimpleJobDummy_ObjectIdentity = ObjectIdentity
xCmSimpleJobDummy = _XCmSimpleJobDummy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 75, 999)
)
_XCmSimpleJobMgmtGroupSupport_Type = XcmSimpleJobMgmtGroupSupport
_XCmSimpleJobMgmtGroupSupport_Object = MibScalar
xCmSimpleJobMgmtGroupSupport = _XCmSimpleJobMgmtGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 75, 999, 1),
    _XCmSimpleJobMgmtGroupSupport_Type()
)
xCmSimpleJobMgmtGroupSupport.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSimpleJobMgmtGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xCmSimpleJobMgmtGroupSupport.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSimpleJobMgmtOperation_Type = XcmSimpleJobMgmtOperation
_XCmSimpleJobMgmtOperation_Object = MibScalar
xCmSimpleJobMgmtOperation = _XCmSimpleJobMgmtOperation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 75, 999, 2),
    _XCmSimpleJobMgmtOperation_Type()
)
xCmSimpleJobMgmtOperation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSimpleJobMgmtOperation.setStatus("current")
if mibBuilder.loadTexts:
    xCmSimpleJobMgmtOperation.setDescription("""\
Dummy - DO NOT USE
""")
_XCmSimpleJobMgmtData_Type = XcmSimpleJobMgmtData
_XCmSimpleJobMgmtData_Object = MibScalar
xCmSimpleJobMgmtData = _XCmSimpleJobMgmtData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 75, 999, 3),
    _XCmSimpleJobMgmtData_Type()
)
xCmSimpleJobMgmtData.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xCmSimpleJobMgmtData.setStatus("current")
if mibBuilder.loadTexts:
    xCmSimpleJobMgmtData.setDescription("""\
Dummy - DO NOT USE
""")
_XcmSimpleJobMgmtMIB_ObjectIdentity = ObjectIdentity
xcmSimpleJobMgmtMIB = _XcmSimpleJobMgmtMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76)
)
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtMIB.setDescription("""\
Version: 5.10.pub The MIB module for performing lightweight management of jobs
in network accessible host systems. See: Document Printing Application - Part
1: Abstract Service (ISO 10175-1 / Final Text, March 1996). See: POSIX System
Administration - Part 4: Print Interfaces (IEEE 1387.4 / Draft 8, October
1994). See: OSI Reference Model - Part 1: Basic Reference Model (CCITT
X.200:1992 | ISO 7498-1:1992). Copyright (C) 1997-2002 Xerox Corporation. All
Rights Reserved.
""")
_XcmSimpleJobBase_ObjectIdentity = ObjectIdentity
xcmSimpleJobBase = _XcmSimpleJobBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 1)
)
_XcmSimpleJobBaseTable_Object = MibTable
xcmSimpleJobBaseTable = _XcmSimpleJobBaseTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 1, 2)
)
if mibBuilder.loadTexts:
    xcmSimpleJobBaseTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseTable.setDescription("""\
A table of general counters and capabilities for ease of use of the XCMI Simple
Job Mgmt MIB on this host system. Usage: The ONLY valid row in the
'xcmSimpleJobBaseTable' shall ALWAYS have an 'xcmSimpleJobBaseIndex' of one
('1').
""")
_XcmSimpleJobBaseEntry_Object = MibTableRow
xcmSimpleJobBaseEntry = _XcmSimpleJobBaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 1, 2, 1)
)
xcmSimpleJobBaseEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmSimpleJobBaseIndex"),
)
if mibBuilder.loadTexts:
    xcmSimpleJobBaseEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseEntry.setDescription("""\
An entry of general counters and capabilities for ease of use of the XCMI
Simple Job Mgmt MIB on this host system. Usage: The ONLY valid row in the
'xcmSimpleJobBaseTable' shall ALWAYS have an 'xcmSimpleJobBaseIndex' of one
('1').
""")
_XcmSimpleJobBaseIndex_Type = Ordinal32
_XcmSimpleJobBaseIndex_Object = MibTableColumn
xcmSimpleJobBaseIndex = _XcmSimpleJobBaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 1, 2, 1, 1),
    _XcmSimpleJobBaseIndex_Type()
)
xcmSimpleJobBaseIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmSimpleJobBaseTable'. Usage: The ONLY valid row in the
'xcmSimpleJobBaseTable' shall ALWAYS have an 'xcmSimpleJobBaseIndex' of one
('1').
""")
_XcmSimpleJobBaseRowStatus_Type = RowStatus
_XcmSimpleJobBaseRowStatus_Object = MibTableColumn
xcmSimpleJobBaseRowStatus = _XcmSimpleJobBaseRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 1, 2, 1, 2),
    _XcmSimpleJobBaseRowStatus_Type()
)
xcmSimpleJobBaseRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseRowStatus.setDescription("""\
This object is used to display status of the ONLY valid conceptual row in the
'xcmSimpleJobBaseTable'. Usage: 'xcmSimpleJobBaseRowStatus' is 'read-only'
because the ONLY valid conceptual row shall NOT be deleted.
""")


class _XcmSimpleJobBaseGroupSupport_Type(XcmSimpleJobMgmtGroupSupport):
    """Custom type xcmSimpleJobBaseGroupSupport based on XcmSimpleJobMgmtGroupSupport"""
    defaultValue = 3


_XcmSimpleJobBaseGroupSupport_Object = MibTableColumn
xcmSimpleJobBaseGroupSupport = _XcmSimpleJobBaseGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 1, 2, 1, 3),
    _XcmSimpleJobBaseGroupSupport_Type()
)
xcmSimpleJobBaseGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseGroupSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Simple Job Mgmt MIB groups supported by this management agent
implementation (ie, version) on this host system, specified in a bit-mask.
Usage: Conforming management agents shall ALWAYS accurately report their
support for XCMI Simple Job Mgmt MIB groups.
""")
_XcmSimpleJobBaseCreateSupport_Type = XcmSimpleJobMgmtGroupSupport
_XcmSimpleJobBaseCreateSupport_Object = MibTableColumn
xcmSimpleJobBaseCreateSupport = _XcmSimpleJobBaseCreateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 1, 2, 1, 4),
    _XcmSimpleJobBaseCreateSupport_Type()
)
xcmSimpleJobBaseCreateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseCreateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseCreateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Simple Job Mgmt MIB groups supported for dynamic row creation
(via '...RowStatus') by this management agent implementation (ie, version) on
this host system, specified in a bit-mask. Usage: Conforming management agents
shall ALWAYS accurately report their support for XCMI Simple Job Mgmt MIB
groups.
""")


class _XcmSimpleJobBaseUpdateSupport_Type(XcmSimpleJobMgmtGroupSupport):
    """Custom type xcmSimpleJobBaseUpdateSupport based on XcmSimpleJobMgmtGroupSupport"""
    defaultValue = 2


_XcmSimpleJobBaseUpdateSupport_Object = MibTableColumn
xcmSimpleJobBaseUpdateSupport = _XcmSimpleJobBaseUpdateSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 1, 2, 1, 5),
    _XcmSimpleJobBaseUpdateSupport_Type()
)
xcmSimpleJobBaseUpdateSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseUpdateSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseUpdateSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional XCMI Simple Job Mgmt MIB groups supported for existing row update (via
SNMP Set-Request PDUs) by this management agent implementation (ie, version) on
this host system, specified in a bit-mask. Usage: Conforming management agents
shall ALWAYS accurately report their support for XCMI Simple Job Mgmt MIB
groups.
""")
_XcmSimpleJobMgmtMIBConformance_ObjectIdentity = ObjectIdentity
xcmSimpleJobMgmtMIBConformance = _XcmSimpleJobMgmtMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 2)
)
_XcmSimpleJobMgmtMIBGroups_ObjectIdentity = ObjectIdentity
xcmSimpleJobMgmtMIBGroups = _XcmSimpleJobMgmtMIBGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 2, 2)
)
_XcmSimpleJobMgmt_ObjectIdentity = ObjectIdentity
xcmSimpleJobMgmt = _XcmSimpleJobMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3)
)
_XcmSimpleJobMgmtV1EventOID_ObjectIdentity = ObjectIdentity
xcmSimpleJobMgmtV1EventOID = _XcmSimpleJobMgmtV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 1)
)
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever an
'xcmSimpleJobMgmtOperation' completes. See SNMPv2 trap definition
'xcmSimpleJobMgmtV2Event' below for 'special semantics'.
""")
_XcmSimpleJobMgmtV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmSimpleJobMgmtV2EventPrefix = _XcmSimpleJobMgmtV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 1, 0)
)
_XcmSimpleJobMgmtTable_Object = MibTable
xcmSimpleJobMgmtTable = _XcmSimpleJobMgmtTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 2)
)
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtTable.setDescription("""\
A table which augments the 'xcmJobGenBasicTable' in the XCMI Job Monitoring
MIB, to support simple job management of jobs on this host system.
""")
_XcmSimpleJobMgmtEntry_Object = MibTableRow
xcmSimpleJobMgmtEntry = _XcmSimpleJobMgmtEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 2, 1)
)
xcmJobGenBasicEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmSimpleJobMgmtEntry")
)
xcmSimpleJobMgmtEntry.setIndexNames(*xcmJobGenBasicEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtEntry.setDescription("""\
An entry which augments an 'xcmJobGenBasicEntry' in the XCMI Job Monitoring
MIB, to support simple job management of a job on this host system.
""")
_XcmSimpleJobMgmtOperation_Type = XcmSimpleJobMgmtOperation
_XcmSimpleJobMgmtOperation_Object = MibTableColumn
xcmSimpleJobMgmtOperation = _XcmSimpleJobMgmtOperation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 2, 1, 1),
    _XcmSimpleJobMgmtOperation_Type()
)
xcmSimpleJobMgmtOperation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtOperation.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtOperation.setReference("""\
See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE
1387.4 / Draft 8, October 1994). See: OBJECT clauses in MODULE-COMPLIANCE macro
of XCMI Simple Job Mgmt MIB, for compliance info.
""")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtOperation.setDescription("""\
The simple job management operation specified for this conceptual row in the
'xcmSimpleJobMgmtTable' and the 'xcmJobGenBasicTable' (XCMI Job Monitoring
MIB). Usage: Conforming management agents SHALL 'reject' any SNMP Set-Operation
to 'xcmSimpleJobMgmt[Operation|Data]' while another management operation is
already in progress (ie, while 'xcmSimpleJobMgmtInProgress' is 'true'), with
'badValue' (SNMPv1) or 'inconsistentValue' (SNMPv2/v3). Usage: Conforming
management stations SHALL set 'xcmSimpleJobMgmtOperation' (mgmt operation) and
'xcmSimpleJobMgmtData' (mgmt arguments) SIMULTANEOUSLY (in the same SNMP Set-
Operation PDU). Usage: Performing 'delete' (system operator) shall ALWAYS force
'xcmJobCurrentState' to 'completed(17)' immediately, and MAY affect
'xcmJobAccountingBasicRowStatus'. Usage: Performing 'remove' (user cancel)
shall ALWAYS force 'xcmJobCurrentState' to 'completed(17)' in a timely fashion,
but shall NOT affect 'xcmJobAccountingBasicRowStatus'.
""")


class _XcmSimpleJobMgmtData_Type(XcmSimpleJobMgmtData):
    """Custom type xcmSimpleJobMgmtData based on XcmSimpleJobMgmtData"""
    defaultHexValue = ""

    subtypeSpec = XcmSimpleJobMgmtData.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSimpleJobMgmtData_Type.__name__ = "XcmSimpleJobMgmtData"
_XcmSimpleJobMgmtData_Object = MibTableColumn
xcmSimpleJobMgmtData = _XcmSimpleJobMgmtData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 2, 1, 2),
    _XcmSimpleJobMgmtData_Type()
)
xcmSimpleJobMgmtData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtData.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtData.setReference("""\
See: Security Config, Account, and User groups in XCMI Security MIB. See:
Section 6.6 'Security in DPA' (pages 38 to 39) of DPA (ISO 10175-1 / Final
Text, March 1996). See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX
Sys Admin (IEEE 1387.4 / Draft 8, October 1994). See: OBJECT clauses in MODULE-
COMPLIANCE macro of XCMI Simple Job Mgmt MIB, for compliance info.
""")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtData.setDescription("""\
The simple job management data specified for this conceptual row in the
'xcmSimpleJobMgmtTable' and the 'xcmJobGenBasicTable' (XCMI Job Monitoring
MIB). Usage: Conforming management agents SHALL 'reject' any SNMP Set-Operation
to 'xcmSimpleJobMgmt[Operation|Data]' while another management operation is
already in progress (ie, while 'xcmSimpleJobMgmtInProgress' is 'true'), with
'badValue' (SNMPv1) or 'inconsistentValue' (SNMPv2/v3). Usage: Conforming
management stations SHALL set 'xcmSimpleJobMgmtOperation' (mgmt operation) and
'xcmSimpleJobMgmtData' (mgmt arguments) SIMULTANEOUSLY (in the same SNMP Set-
Operation PDU).
""")
_XcmSimpleJobMgmtStatus_Type = XcmGenSNMPv2ErrorStatus
_XcmSimpleJobMgmtStatus_Object = MibTableColumn
xcmSimpleJobMgmtStatus = _XcmSimpleJobMgmtStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 2, 1, 3),
    _XcmSimpleJobMgmtStatus_Type()
)
xcmSimpleJobMgmtStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtStatus.setReference("""\
See: 'xcmSimpleJobMgmt[Operation|Data|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtStatus.setDescription("""\
The simple job management error status associated with this conceptual row in
'xcmSimpleJobMgmtTable'. Usage: Conforming management agents shall ALWAYS set
this object to the value returned in an SNMP Set-Response PDU when a simple job
management operation is 'accepted', ie, when 'xcmSimpleJobMgmtInProgress' goes
from 'false' to 'true'. Usage: Conforming management agents shall ALWAYS set
this object to the value of the completion status of the (possibly deferred)
simple job management operation, when 'xcmSimpleJobMgmtInProgress' goes from
'true' to 'false'.
""")


class _XcmSimpleJobMgmtInProgress_Type(TruthValue):
    """Custom type xcmSimpleJobMgmtInProgress based on TruthValue"""


_XcmSimpleJobMgmtInProgress_Object = MibTableColumn
xcmSimpleJobMgmtInProgress = _XcmSimpleJobMgmtInProgress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 2, 1, 4),
    _XcmSimpleJobMgmtInProgress_Type()
)
xcmSimpleJobMgmtInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtInProgress.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtInProgress.setReference("""\
See: 'xcmSimpleJobMgmt[Operation|Data|Status]'
""")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtInProgress.setDescription("""\
The simple job management in progress status associated with this conceptual
row in 'xcmSimpleJobMgmtTable'. Usage: Conforming management agents SHALL
'reject' any SNMP Set-Operation to 'xcmSimpleJobMgmt[Operation|Data]' while
another management operation is already in progress (ie, while
'xcmSimpleJobMgmtInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3).
""")
_XcmSimpleJobIntercept_ObjectIdentity = ObjectIdentity
xcmSimpleJobIntercept = _XcmSimpleJobIntercept_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4)
)
_XcmSimpleJobInterceptV1EventOID_ObjectIdentity = ObjectIdentity
xcmSimpleJobInterceptV1EventOID = _XcmSimpleJobInterceptV1EventOID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 1)
)
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptV1EventOID.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptV1EventOID.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap sent whenever an
'xcmSimpleJobInterceptOperation' completes. See SNMPv2 trap definition
'xcmSimpleJobInterceptV2Event' below for 'special semantics'.
""")
_XcmSimpleJobInterceptV2EventPrefix_ObjectIdentity = ObjectIdentity
xcmSimpleJobInterceptV2EventPrefix = _XcmSimpleJobInterceptV2EventPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 1, 0)
)
_XcmSimpleJobInterceptTable_Object = MibTable
xcmSimpleJobInterceptTable = _XcmSimpleJobInterceptTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 2)
)
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptTable.setDescription("""\
A table which is indexed by the future 'xcmJobClientId' in the XCMI Job
Monitoring MIB, to support simple job intercept requests for upstream jobs (off
this host system).
""")
_XcmSimpleJobInterceptEntry_Object = MibTableRow
xcmSimpleJobInterceptEntry = _XcmSimpleJobInterceptEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 2, 1)
)
xcmSimpleJobInterceptEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmSimpleJobInterceptClientId"),
)
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptEntry.setDescription("""\
An entry which is indexed by the future 'xcmJobClientId' in the XCMI Job
Monitoring MIB, to support a simple job intercept request for an upstream job
(off this host system).
""")


class _XcmSimpleJobInterceptClientId_Type(XcmFixedLocaleDisplayString):
    """Custom type xcmSimpleJobInterceptClientId based on XcmFixedLocaleDisplayString"""
    subtypeSpec = XcmFixedLocaleDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_XcmSimpleJobInterceptClientId_Type.__name__ = "XcmFixedLocaleDisplayString"
_XcmSimpleJobInterceptClientId_Object = MibTableColumn
xcmSimpleJobInterceptClientId = _XcmSimpleJobInterceptClientId_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 2, 1, 1),
    _XcmSimpleJobInterceptClientId_Type()
)
xcmSimpleJobInterceptClientId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptClientId.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptClientId.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmSimpleJobInterceptTable'. Usage: The future value of 'xcmJobClientId' from
the XCMI Job Monitoring MIB which uniquely identifies this client's job. Usage:
XCMI conforming management agents MAY choose to REJECT any attempt at row
creation in the 'xcmSimpleJobInterceptTable' which specifies a value for
'xcmSimpleJobInterceptClientId' that does NOT conform to the
'XcmGlobalUniqueID' format (therefore cannot be appended onto the trap OID for
any job-related traps). Usage: XCMI conforming management agents MAY choose to
ACCEPT any attempt at row creation in the 'xcmSimpleJobInterceptTable' which
specifies a value for 'xcmSimpleJobInterceptClientId' that is nonetheless
unique in the scope of the managed system (but not append it onto the trap OID
for any job-related traps). Usage: XCMI conforming management stations (ie,
clients) shall ALWAYS submit an 'xcmJobClientId' in 'XcmGlobalUniqueID' format.
XCMI conforming management agents (ie, servers and devices) shall ALWAYS append
such an 'xcmJobClientId' onto the trap OID for any job-related traps. Usage:
Non-XCMI conforming management stations (ie, clients) MAY submit a non-unique
'xcmJobClientId', although they may be otherwise strictly conformant DPA (ISO
10175) clients.
""")
_XcmSimpleJobInterceptRowStatus_Type = RowStatus
_XcmSimpleJobInterceptRowStatus_Object = MibTableColumn
xcmSimpleJobInterceptRowStatus = _XcmSimpleJobInterceptRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 2, 1, 2),
    _XcmSimpleJobInterceptRowStatus_Type()
)
xcmSimpleJobInterceptRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptRowStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptRowStatus.setDescription("""\
This object is used to create and destroy individual conceptual rows in
'xcmSimpleJobInterceptTable'.
""")
_XcmSimpleJobInterceptOperation_Type = XcmSimpleJobMgmtOperation
_XcmSimpleJobInterceptOperation_Object = MibTableColumn
xcmSimpleJobInterceptOperation = _XcmSimpleJobInterceptOperation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 2, 1, 3),
    _XcmSimpleJobInterceptOperation_Type()
)
xcmSimpleJobInterceptOperation.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptOperation.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptOperation.setReference("""\
See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE
1387.4 / Draft 8, October 1994). See: OBJECT clauses in MODULE-COMPLIANCE macro
of XCMI Simple Job Mgmt MIB, for compliance info.
""")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptOperation.setDescription("""\
The simple job intercept operation specified for this conceptual row in the
'xcmSimpleJobInterceptTable' and the 'xcmJobClientId' object (XCMI Job
Monitoring MIB). Usage: Conforming management agents SHALL 'reject' any SNMP
Set-Operation to 'xcmSimpleJobIntercept[Operation|Data]' while another
management operation is already in progress (ie, while
'xcmSimpleJobInterceptInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: Conforming management stations SHALL
set 'xcmSimpleJobInterceptOperation' (mgmt operation) and
'xcmSimpleJobInterceptData' (mgmt arguments) SIMULTANEOUSLY (in the same SNMP
Set-Operation PDU).
""")


class _XcmSimpleJobInterceptData_Type(XcmSimpleJobMgmtData):
    """Custom type xcmSimpleJobInterceptData based on XcmSimpleJobMgmtData"""
    defaultHexValue = ""

    subtypeSpec = XcmSimpleJobMgmtData.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_XcmSimpleJobInterceptData_Type.__name__ = "XcmSimpleJobMgmtData"
_XcmSimpleJobInterceptData_Object = MibTableColumn
xcmSimpleJobInterceptData = _XcmSimpleJobInterceptData_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 2, 1, 4),
    _XcmSimpleJobInterceptData_Type()
)
xcmSimpleJobInterceptData.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptData.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptData.setReference("""\
See: Security Config, Account, and User groups in XCMI Security MIB. See:
Section 6.6 'Security in DPA' (pages 38 to 39) of DPA (ISO 10175-1 / Final
Text, March 1996). See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX
Sys Admin (IEEE 1387.4 / Draft 8, October 1994). See: OBJECT clauses in MODULE-
COMPLIANCE macro of XCMI Simple Job Mgmt MIB, for compliance info.
""")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptData.setDescription("""\
The simple job intercept data specified for this conceptual row in the
'xcmSimpleJobInterceptTable' and the 'xcmJobClientId' object (XCMI Job
Monitoring MIB). Usage: Conforming management agents SHALL 'reject' any SNMP
Set-Operation to 'xcmSimpleJobIntercept[Operation|Data]' while another
management operation is already in progress (ie, while
'xcmSimpleJobInterceptInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3). Usage: Conforming management stations SHALL
set 'xcmSimpleJobInterceptOperation' (mgmt operation) and
'xcmSimpleJobInterceptData' (mgmt arguments) SIMULTANEOUSLY (in the same SNMP
Set-Operation PDU).
""")
_XcmSimpleJobInterceptStatus_Type = XcmGenSNMPv2ErrorStatus
_XcmSimpleJobInterceptStatus_Object = MibTableColumn
xcmSimpleJobInterceptStatus = _XcmSimpleJobInterceptStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 2, 1, 5),
    _XcmSimpleJobInterceptStatus_Type()
)
xcmSimpleJobInterceptStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptStatus.setReference("""\
See: 'xcmSimpleJobIntercept[Operation|Data|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptStatus.setDescription("""\
The simple job intercept error status associated with this conceptual row in
'xcmSimpleJobInterceptTable'. Usage: Conforming management agents shall ALWAYS
set this object to the value returned in an SNMP Set-Response PDU when a simple
job intercept operation is 'accepted', ie, when
'xcmSimpleJobInterceptInProgress' goes from 'false' to 'true'. Usage:
Conforming management agents shall ALWAYS set this object to the value of the
completion status of the (possibly deferred) simple job intercept operation,
when 'xcmSimpleJobInterceptInProgress' goes from 'true' to 'false'.
""")


class _XcmSimpleJobInterceptInProgress_Type(TruthValue):
    """Custom type xcmSimpleJobInterceptInProgress based on TruthValue"""


_XcmSimpleJobInterceptInProgress_Object = MibTableColumn
xcmSimpleJobInterceptInProgress = _XcmSimpleJobInterceptInProgress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 2, 1, 6),
    _XcmSimpleJobInterceptInProgress_Type()
)
xcmSimpleJobInterceptInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptInProgress.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptInProgress.setReference("""\
See: 'xcmSimpleJobIntercept[Operation|Data|Status]'
""")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptInProgress.setDescription("""\
The simple job intercept in progress status associated with this conceptual row
in 'xcmSimpleJobInterceptTable'. Usage: Conforming management agents SHALL
'reject' any SNMP Set-Operation to 'xcmSimpleJobIntercept[Operation|Data]'
while another management operation is already in progress (ie, while
'xcmSimpleJobInterceptInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3).
""")
_XcmJmxMIB_ObjectIdentity = ObjectIdentity
xcmJmxMIB = _XcmJmxMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83)
)
if mibBuilder.loadTexts:
    xcmJmxMIB.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxMIB.setDescription("""\
Version: 5.401.pub The MIB module for job administration and job notifications
for systems that implement the PWG Job Monitoring MIB (RFC 2707). See: Section
7 'Conformance Requirements and Implementers Guide' of the XCMI Job Monitoring
TC (40jobtc.txt) for implementation and conformance guidance for the PWG Job
Monitoring MIB (RFC 2707) and for mapping to the XCMI Job Monitoring MIB.
Copyright (C) 2001-2002 Xerox Corporation. All Rights Reserved.
""")
_XcmJmxMIBObjects_ObjectIdentity = ObjectIdentity
xcmJmxMIBObjects = _XcmJmxMIBObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1)
)
_XcmJmxGeneral_ObjectIdentity = ObjectIdentity
xcmJmxGeneral = _XcmJmxGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1)
)
_XcmJmxGeneralTable_Object = MibTable
xcmJmxGeneralTable = _XcmJmxGeneralTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2)
)
if mibBuilder.loadTexts:
    xcmJmxGeneralTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralTable.setDescription("""\
A table of general counters and information for ease of use of the XCMI Ext to
PWG Job Monitoring MIB and the PWG Job Monitoring MIB (RFC 2707) on this host
system. Usage: The ONLY valid row in the 'xcmJmxGeneralTable' shall ALWAYS have
an 'xcmJmxGeneralIndex' of one ('1').
""")
_XcmJmxGeneralEntry_Object = MibTableRow
xcmJmxGeneralEntry = _XcmJmxGeneralEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2, 1)
)
xcmJmxGeneralEntry.setIndexNames(
    (0, "XEROX-COMMON-MIB", "xcmJmxGeneralIndex"),
)
if mibBuilder.loadTexts:
    xcmJmxGeneralEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralEntry.setDescription("""\
An entry of general counters and information for ease of use of the XCMI Ext to
PWG Job Monitoring MIB and the PWG Job Monitoring MIB (RFC 2707) on this host
system. Usage: The ONLY valid row in the 'xcmJmxGeneralTable' shall ALWAYS have
an 'xcmJmxGeneralIndex' of one ('1').
""")
_XcmJmxGeneralIndex_Type = Ordinal32
_XcmJmxGeneralIndex_Object = MibTableColumn
xcmJmxGeneralIndex = _XcmJmxGeneralIndex_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2, 1, 1),
    _XcmJmxGeneralIndex_Type()
)
xcmJmxGeneralIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcmJmxGeneralIndex.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralIndex.setDescription("""\
A unique value used by this host system to identify this conceptual row in the
'xcmJmxGeneralTable'. Usage: The ONLY valid row in the 'xcmJmxGeneralTable'
shall ALWAYS have an 'xcmJmxGeneralIndex' of one ('1').
""")


class _XcmJmxGeneralGroupSupport_Type(XcmJmxGroupSupport):
    """Custom type xcmJmxGeneralGroupSupport based on XcmJmxGroupSupport"""
    defaultValue = 31


_XcmJmxGeneralGroupSupport_Object = MibTableColumn
xcmJmxGeneralGroupSupport = _XcmJmxGeneralGroupSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2, 1, 2),
    _XcmJmxGeneralGroupSupport_Type()
)
xcmJmxGeneralGroupSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJmxGeneralGroupSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralGroupSupport.setDescription("""\
The terse conformance statement of ALL mandatory, conditionally mandatory, and
optional PWG Job Monitoring MIB (RFC 2707) and XCMI Ext to PWG Job Monitoring
MIB objects which are supported by this management agent implementation (i.e.,
version) on this host system, specified in a bit-mask. Usage: Conforming
management agents shall ALWAYS accurately report their support for PWG Job
Monitoring MIB (RFC 2707) and XCMI Ext to PWG Job Monitoring MIB object groups.
""")
_XcmJmxGeneralJobCreatedCount_Type = Counter32
_XcmJmxGeneralJobCreatedCount_Object = MibTableColumn
xcmJmxGeneralJobCreatedCount = _XcmJmxGeneralJobCreatedCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2, 1, 3),
    _XcmJmxGeneralJobCreatedCount_Type()
)
xcmJmxGeneralJobCreatedCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobCreatedCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobCreatedCount.setDescription("""\
Total number of jobs that have been created on this managed system. The managed
system MAY preserve this count across initializations and resets. Usage: If the
value of this counter is not preserved across initializations and resets, then
it SHALL be set to zero upon system initialization or reset. Usage: A managed
system SHALL return zero if the number of jobs created is not known.
""")
_XcmJmxGeneralJobCompletedCount_Type = Counter32
_XcmJmxGeneralJobCompletedCount_Object = MibTableColumn
xcmJmxGeneralJobCompletedCount = _XcmJmxGeneralJobCompletedCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2, 1, 4),
    _XcmJmxGeneralJobCompletedCount_Type()
)
xcmJmxGeneralJobCompletedCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobCompletedCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobCompletedCount.setDescription("""\
Total number of jobs that have completed on this managed system. The managed
system MAY preserve this count across initializations and resets. Usage: If the
value of this counter is not preserved across initializations and resets, then
it SHALL be set to zero upon system initialization or reset. Usage: A managed
system SHALL return zero if the number of jobs created is not known.
""")
_XcmJmxGeneralJobOperationCount_Type = Counter32
_XcmJmxGeneralJobOperationCount_Object = MibTableColumn
xcmJmxGeneralJobOperationCount = _XcmJmxGeneralJobOperationCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2, 1, 5),
    _XcmJmxGeneralJobOperationCount_Type()
)
xcmJmxGeneralJobOperationCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobOperationCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobOperationCount.setDescription("""\
Total number of job operations that have been executed on this managed system.
The managed system MAY preserve this count across initializations and resets.
Usage: If the value of this counter is not preserved across initializations and
resets, then it SHALL be set to zero upon system initialization or reset.
Usage: A managed system SHALL return zero if the number of jobs created is not
known.
""")
_XcmJmxGeneralJobTrapCount_Type = Counter32
_XcmJmxGeneralJobTrapCount_Object = MibTableColumn
xcmJmxGeneralJobTrapCount = _XcmJmxGeneralJobTrapCount_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2, 1, 6),
    _XcmJmxGeneralJobTrapCount_Type()
)
xcmJmxGeneralJobTrapCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobTrapCount.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobTrapCount.setDescription("""\
Total number of job traps that have been sent from this managed system. The
managed system MAY preserve this count across initializations and resets.
Usage: If the value of this counter is not preserved across initializations and
resets, then it SHALL be set to zero upon system initialization or reset.
Usage: A managed system SHALL return zero if the number of jobs created is not
known.
""")


class _XcmJmxGeneralJobAccntSupport_Type(XcmJmxJobAccntSupport):
    """Custom type xcmJmxGeneralJobAccntSupport based on XcmJmxJobAccntSupport"""


_XcmJmxGeneralJobAccntSupport_Object = MibTableColumn
xcmJmxGeneralJobAccntSupport = _XcmJmxGeneralJobAccntSupport_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 1, 2, 1, 7),
    _XcmJmxGeneralJobAccntSupport_Type()
)
xcmJmxGeneralJobAccntSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobAccntSupport.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralJobAccntSupport.setDescription("""\
This is a way to turn the Job Accounting in the device on and off when the
printer supports the PWG job accounting mib. If the job accounting within the
device is off then the group support will report no no group supported. If job
accounting is on then the appropriate groups will be reported as supported.
""")
_XcmJmxJobAdmin_ObjectIdentity = ObjectIdentity
xcmJmxJobAdmin = _XcmJmxJobAdmin_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 2)
)
_XcmJmxJobAdminTable_Object = MibTable
xcmJmxJobAdminTable = _XcmJmxJobAdminTable_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 2, 1)
)
if mibBuilder.loadTexts:
    xcmJmxJobAdminTable.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobAdminTable.setReference("""\
See: 'jmJobTable' in Job Monitoring MIB [RFC-2707].
""")
if mibBuilder.loadTexts:
    xcmJmxJobAdminTable.setDescription("""\
A table containing job operation requests for control of jobs on this host
system.
""")
_XcmJmxJobAdminEntry_Object = MibTableRow
xcmJmxJobAdminEntry = _XcmJmxJobAdminEntry_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 2, 1, 1)
)
jmJobEntry.registerAugmentions(
    ("XEROX-COMMON-MIB",
     "xcmJmxJobAdminEntry")
)
xcmJmxJobAdminEntry.setIndexNames(*jmJobEntry.getIndexNames())
if mibBuilder.loadTexts:
    xcmJmxJobAdminEntry.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobAdminEntry.setDescription("""\
An entry containing a job operation request for control of a job on this host
system.
""")


class _XcmJmxJobAdminOperation_Type(XcmJmxJobAdminOperation):
    """Custom type xcmJmxJobAdminOperation based on XcmJmxJobAdminOperation"""


_XcmJmxJobAdminOperation_Object = MibTableColumn
xcmJmxJobAdminOperation = _XcmJmxJobAdminOperation_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 2, 1, 1, 1),
    _XcmJmxJobAdminOperation_Type()
)
xcmJmxJobAdminOperation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcmJmxJobAdminOperation.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobAdminOperation.setReference("""\
See: Section 3.3 'Job Operations' in IPP Model and Semantics [RFC-2911]. See:
Section 4 'Job Operations' in IPP Job and Printer Admin Operations [IPP-ADMIN].
See: 'xcmHrDevMgmtCommandDataTag' textual convention, Section 3.4 'XCMI
Standard Tagged Management Data', and Section 3.5 'Simple Device Management
Requests' in XCMI Host Resources Ext TC (for security issues). See: Section
3.5.3 'Secure Simple Device Mgmt Requests' in XCMI Security TC (for security
issues). See: 'xcmJmxJobAdmin[Status|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmJmxJobAdminOperation.setDescription("""\
The current or most recent administrative operation on this job (submitted via
SNMP, IPP, or any other job control protocol). Usage: Conforming management
agents shall ALWAYS 'reject' any SNMP Set-Request to 'xcmJmxJobAdminOperation'
while another job operation request is already in progress (i.e., while
'xcmJmxJobAdminInProgress' is 'true'), with 'badValue' (SNMPv1) or
'inconsistentValue' (SNMPv2/v3).
""")
_XcmJmxJobAdminStatus_Type = XcmGenSNMPv2ErrorStatus
_XcmJmxJobAdminStatus_Object = MibTableColumn
xcmJmxJobAdminStatus = _XcmJmxJobAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 2, 1, 1, 2),
    _XcmJmxJobAdminStatus_Type()
)
xcmJmxJobAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJmxJobAdminStatus.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobAdminStatus.setReference("""\
See: 'xcmJmxJobAdmin[Operation|InProgress]'
""")
if mibBuilder.loadTexts:
    xcmJmxJobAdminStatus.setDescription("""\
The job operation error status associated with this conceptual row in
'xcmJmxJobAdminTable'. Usage: Conforming management agents shall ALWAYS set
this object to the value returned in an SNMP Set-Response PDU when a job
operation request is 'accepted', ie, when 'xcmJmxJobAdminInProgress' goes from
'false' to 'true'. Usage: Conforming management agents shall ALWAYS set this
object to the value of the completion status of the (possibly deferred) job
operation request, when 'xcmJmxJobAdminInProgress' goes from 'true' to 'false'.
""")


class _XcmJmxJobAdminInProgress_Type(TruthValue):
    """Custom type xcmJmxJobAdminInProgress based on TruthValue"""


_XcmJmxJobAdminInProgress_Object = MibTableColumn
xcmJmxJobAdminInProgress = _XcmJmxJobAdminInProgress_Object(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 1, 2, 1, 1, 3),
    _XcmJmxJobAdminInProgress_Type()
)
xcmJmxJobAdminInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcmJmxJobAdminInProgress.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobAdminInProgress.setReference("""\
See: 'xcmJmxJobAdmin[Operation|Status]'
""")
if mibBuilder.loadTexts:
    xcmJmxJobAdminInProgress.setDescription("""\
The job operation in progress status associated with this conceptual row in
'xcmJmxJobAdminTable'. 'true' if job operation is in progress; otherwise,
'false'. Usage: Conforming management agents shall ALWAYS 'reject' any SNMP
Set-Request to 'xcmJmxJobAdminOperation' while another job operation request is
already in progress (i.e., while 'xcmJmxJobAdminInProgress' is 'true'), with
'badValue' (SNMPv1) or 'inconsistentValue' (SNMPv2/v3).
""")
_XcmJmxMIBNotifications_ObjectIdentity = ObjectIdentity
xcmJmxMIBNotifications = _XcmJmxMIBNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2)
)
_XcmJmxJobOperationV1Enterprise_ObjectIdentity = ObjectIdentity
xcmJmxJobOperationV1Enterprise = _XcmJmxJobOperationV1Enterprise_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 1)
)
if mibBuilder.loadTexts:
    xcmJmxJobOperationV1Enterprise.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobOperationV1Enterprise.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap for a Job operation
complete event sent by this managed system.
""")
_XcmJmxJobOperationV2TrapPrefix_ObjectIdentity = ObjectIdentity
xcmJmxJobOperationV2TrapPrefix = _XcmJmxJobOperationV2TrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 1, 0)
)
_XcmJmxJobStateV1Enterprise_ObjectIdentity = ObjectIdentity
xcmJmxJobStateV1Enterprise = _XcmJmxJobStateV1Enterprise_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 2)
)
if mibBuilder.loadTexts:
    xcmJmxJobStateV1Enterprise.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobStateV1Enterprise.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap for a Job state
changed event sent by this managed system.
""")
_XcmJmxJobStateV2TrapPrefix_ObjectIdentity = ObjectIdentity
xcmJmxJobStateV2TrapPrefix = _XcmJmxJobStateV2TrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 2, 0)
)
_XcmJmxJobCreatedV1Enterprise_ObjectIdentity = ObjectIdentity
xcmJmxJobCreatedV1Enterprise = _XcmJmxJobCreatedV1Enterprise_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 3)
)
if mibBuilder.loadTexts:
    xcmJmxJobCreatedV1Enterprise.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobCreatedV1Enterprise.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap for a Job created
event sent by this managed system.
""")
_XcmJmxJobCreatedV2TrapPrefix_ObjectIdentity = ObjectIdentity
xcmJmxJobCreatedV2TrapPrefix = _XcmJmxJobCreatedV2TrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 3, 0)
)
_XcmJmxJobCompletedV1Enterprise_ObjectIdentity = ObjectIdentity
xcmJmxJobCompletedV1Enterprise = _XcmJmxJobCompletedV1Enterprise_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 4)
)
if mibBuilder.loadTexts:
    xcmJmxJobCompletedV1Enterprise.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobCompletedV1Enterprise.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap for a Job completed
event sent by this managed system.
""")
_XcmJmxJobCompletedV2TrapPrefix_ObjectIdentity = ObjectIdentity
xcmJmxJobCompletedV2TrapPrefix = _XcmJmxJobCompletedV2TrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 4, 0)
)
_XcmJmxJobStoppedV1Enterprise_ObjectIdentity = ObjectIdentity
xcmJmxJobStoppedV1Enterprise = _XcmJmxJobStoppedV1Enterprise_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 5)
)
if mibBuilder.loadTexts:
    xcmJmxJobStoppedV1Enterprise.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobStoppedV1Enterprise.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap for a Job stopped
event sent by this managed system.
""")
_XcmJmxJobStoppedV2TrapPrefix_ObjectIdentity = ObjectIdentity
xcmJmxJobStoppedV2TrapPrefix = _XcmJmxJobStoppedV2TrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 5, 0)
)
_XcmJmxJobConfigV1Enterprise_ObjectIdentity = ObjectIdentity
xcmJmxJobConfigV1Enterprise = _XcmJmxJobConfigV1Enterprise_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 6)
)
if mibBuilder.loadTexts:
    xcmJmxJobConfigV1Enterprise.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobConfigV1Enterprise.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap for a Job config
changed event sent by this managed system.
""")
_XcmJmxJobConfigV2TrapPrefix_ObjectIdentity = ObjectIdentity
xcmJmxJobConfigV2TrapPrefix = _XcmJmxJobConfigV2TrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 6, 0)
)
_XcmJmxJobProgressV1Enterprise_ObjectIdentity = ObjectIdentity
xcmJmxJobProgressV1Enterprise = _XcmJmxJobProgressV1Enterprise_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 7)
)
if mibBuilder.loadTexts:
    xcmJmxJobProgressV1Enterprise.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobProgressV1Enterprise.setDescription("""\
The value of the enterprise-specific OID in an SNMPv1 trap for a Job progress
event sent by this managed system.
""")
_XcmJmxJobProgressV2TrapPrefix_ObjectIdentity = ObjectIdentity
xcmJmxJobProgressV2TrapPrefix = _XcmJmxJobProgressV2TrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 7, 0)
)
_XcmJmxMIBConformance_ObjectIdentity = ObjectIdentity
xcmJmxMIBConformance = _XcmJmxMIBConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 3)
)
_XcmJmxMIBObjectGroups_ObjectIdentity = ObjectIdentity
xcmJmxMIBObjectGroups = _XcmJmxMIBObjectGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 3, 2)
)
_XcmJmxMIBTrapGroups_ObjectIdentity = ObjectIdentity
xcmJmxMIBTrapGroups = _XcmJmxMIBTrapGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 3, 3)
)

# Managed Objects groups

xcmGenBaseGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 1)
)
xcmGenBaseGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenBaseRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSystemHrDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmGenBaseGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseGroupCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseGroupUpdateSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseClientDataMaxSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseOptionSyntaxSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseReconfStateSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSNMPDomainSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSNMPTrapSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSNMPVersionSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSNMPReadCommunity"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSNMPWriteCommunity"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSNMPTrapCommunity"),
        ("XEROX-COMMON-MIB", "xcmGenBaseGroupWalkHidden"),
        ("XEROX-COMMON-MIB", "xcmGenBaseNotifySchemeSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseNotifySeveritySupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseNotifyTrainingSupport"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSystem1284DeviceId"),
        ("XEROX-COMMON-MIB", "xcmGenBaseSNMPWarningTrapSupport"))
)
if mibBuilder.loadTexts:
    xcmGenBaseGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenBaseGroup.setDescription("""\
 General Base Group (XCMI General MIB capabilities)
""")

xcmGenCurrentLocalizationGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 3)
)
xcmGenCurrentLocalizationGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenCurrentLocalizationIndex"),
        ("XEROX-COMMON-MIB", "xcmGenCurrLocalizationRowStatus"))
)
if mibBuilder.loadTexts:
    xcmGenCurrentLocalizationGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCurrentLocalizationGroup.setDescription("""\
 Current Localization Group (dynamic locales)
""")

xcmGenLocalizationGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 4)
)
xcmGenLocalizationGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenLocalizationRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenLocalizationASCIIName"),
        ("XEROX-COMMON-MIB", "xcmGenLocalizationName"),
        ("XEROX-COMMON-MIB", "xcmGenLocalizationLanguage"),
        ("XEROX-COMMON-MIB", "xcmGenLocalizationCountry"),
        ("XEROX-COMMON-MIB", "xcmGenLocalizationCharSet"))
)
if mibBuilder.loadTexts:
    xcmGenLocalizationGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLocalizationGroup.setDescription("""\
 General Localization Group (supported dynamic/static locales)
""")

xcmGenCodeIndexedStringGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 5)
)
xcmGenCodeIndexedStringGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenCodeIndexedStringRowStat"),
        ("XEROX-COMMON-MIB", "xcmGenCodeIndexedStringData"))
)
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodeIndexedStringGroup.setDescription("""\
 Code Indexed String Group (charset conversions)
""")

xcmGenCodedCharSetGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 6)
)
xcmGenCodedCharSetGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenCodedCharSetRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenCodedCharSetASCIIName"))
)
if mibBuilder.loadTexts:
    xcmGenCodedCharSetGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenCodedCharSetGroup.setDescription("""\
 Coded Character Set Group (supported IANA-registered charsets)
""")

xcmGenFixedLocalizationGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 7)
)
xcmGenFixedLocalizationGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenFixedLocalizationIndex"),
        ("XEROX-COMMON-MIB", "xcmGenFixedLocalizationRowStat"))
)
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenFixedLocalizationGroup.setDescription("""\
 Fixed Localization Group (static locales)
""")

xcmGenLockGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 8)
)
xcmGenLockGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenLockSupportMaxTimer"),
        ("XEROX-COMMON-MIB", "xcmGenLockCurrentMaxTimer"),
        ("XEROX-COMMON-MIB", "xcmGenLockCurrentLockCount"),
        ("XEROX-COMMON-MIB", "xcmGenLockHighestLockIndex"),
        ("XEROX-COMMON-MIB", "xcmGenLockSupportMaxCount"),
        ("XEROX-COMMON-MIB", "xcmGenLockRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenLockOwnerString"),
        ("XEROX-COMMON-MIB", "xcmGenLockOwnerSubtree"),
        ("XEROX-COMMON-MIB", "xcmGenLockOwnerTimer"))
)
if mibBuilder.loadTexts:
    xcmGenLockGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenLockGroup.setDescription("""\
 General Lock Group (advisory contention locks) Implementation of this group is
STRONGLY RECOMMENDED.
""")

xcmGenReconfGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 9)
)
xcmGenReconfGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenReconfActivations"),
        ("XEROX-COMMON-MIB", "xcmGenReconfEntryCount"),
        ("XEROX-COMMON-MIB", "xcmGenReconfSupportMaxCount"),
        ("XEROX-COMMON-MIB", "xcmGenReconfRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenReconfOptionIndex"),
        ("XEROX-COMMON-MIB", "xcmGenReconfOptionState"),
        ("XEROX-COMMON-MIB", "xcmGenReconfErrorIndex"),
        ("XEROX-COMMON-MIB", "xcmGenReconfErrorStatus"))
)
if mibBuilder.loadTexts:
    xcmGenReconfGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenReconfGroup.setDescription("""\
 General Reconf Group (reconfiguration requests)
""")

xcmGenOptionGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 10)
)
xcmGenOptionGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenOptionEntryCount"),
        ("XEROX-COMMON-MIB", "xcmGenOptionSupportMaxCount"),
        ("XEROX-COMMON-MIB", "xcmGenOptionRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenOptionTypeOID"),
        ("XEROX-COMMON-MIB", "xcmGenOptionValueSyntax"),
        ("XEROX-COMMON-MIB", "xcmGenOptionValueInteger"),
        ("XEROX-COMMON-MIB", "xcmGenOptionValueOID"),
        ("XEROX-COMMON-MIB", "xcmGenOptionValueString"),
        ("XEROX-COMMON-MIB", "xcmGenOptionValueLocalization"),
        ("XEROX-COMMON-MIB", "xcmGenOptionValueCodedCharSet"),
        ("XEROX-COMMON-MIB", "xcmGenOptionNextIndex"),
        ("XEROX-COMMON-MIB", "xcmGenOptionPreviousIndex"),
        ("XEROX-COMMON-MIB", "xcmGenOptionFamilyIndex"))
)
if mibBuilder.loadTexts:
    xcmGenOptionGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenOptionGroup.setDescription("""\
 General Option Group (reconfiguration options)
""")

xcmGenClientDataGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 11)
)
xcmGenClientDataGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenClientDataEntryCount"),
        ("XEROX-COMMON-MIB", "xcmGenClientDataLastIndex"),
        ("XEROX-COMMON-MIB", "xcmGenClientDataSupportMaxCount"),
        ("XEROX-COMMON-MIB", "xcmGenClientDataRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenClientDataRequestDate"),
        ("XEROX-COMMON-MIB", "xcmGenClientDataRequestID"),
        ("XEROX-COMMON-MIB", "xcmGenClientDataProductID"),
        ("XEROX-COMMON-MIB", "xcmGenClientDataLength"),
        ("XEROX-COMMON-MIB", "xcmGenClientDataString"))
)
if mibBuilder.loadTexts:
    xcmGenClientDataGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenClientDataGroup.setDescription("""\
 Client Data Group (network device installs/upgrades)
""")

xcmGenTrapClientGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 13)
)
xcmGenTrapClientGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenTrapClientEntryCount"),
        ("XEROX-COMMON-MIB", "xcmGenTrapClientSupportMaxCount"),
        ("XEROX-COMMON-MIB", "xcmGenTrapClientRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenTrapClientIndex"),
        ("XEROX-COMMON-MIB", "xcmGenTrapClientRowPersistence"),
        ("XEROX-COMMON-MIB", "xcmGenTrapClientSNMPVersion"),
        ("XEROX-COMMON-MIB", "xcmGenTrapClientSNMPCommunity"))
)
if mibBuilder.loadTexts:
    xcmGenTrapClientGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapClientGroup.setDescription("""\
 Trap Client Group (trap destination domains/addresses)
""")

xcmGenTrapViewGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 14)
)
xcmGenTrapViewGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenTrapViewEntryCount"),
        ("XEROX-COMMON-MIB", "xcmGenTrapViewSupportMaxCount"),
        ("XEROX-COMMON-MIB", "xcmGenTrapViewRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenTrapViewNotifySeverity"),
        ("XEROX-COMMON-MIB", "xcmGenTrapViewNotifyTraining"))
)
if mibBuilder.loadTexts:
    xcmGenTrapViewGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenTrapViewGroup.setDescription("""\
 Trap View Group (trap requested object subtrees)
""")

xcmGenMessageMapGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 15)
)
xcmGenMessageMapGroup.setObjects(
    ("XEROX-COMMON-MIB", "xcmGenMessageMapStringLabel")
)
if mibBuilder.loadTexts:
    xcmGenMessageMapGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageMapGroup.setDescription("""\
 Message Map Group (message labels for client localization)
""")

xcmGenMessageTextGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 16)
)
xcmGenMessageTextGroup.setObjects(
    ("XEROX-COMMON-MIB", "xcmGenMessageTextTargetString")
)
if mibBuilder.loadTexts:
    xcmGenMessageTextGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenMessageTextGroup.setDescription("""\
 Message Text Group (message lookups for agent localization)
""")

xcmGenNotifyRuleGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 17)
)
xcmGenNotifyRuleGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenNotifyRuleEntryCount"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleSupportMaxCount"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleRowPersistence"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleRecipientURI"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleEventNames"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleEventDelay"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleSeverityFilter"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleTrainingFilter"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleCharset"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleNaturalLanguage"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyRuleSequenceNumber"))
)
if mibBuilder.loadTexts:
    xcmGenNotifyRuleGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyRuleGroup.setDescription("""\
 Notify Rule Group (notification client URI and event names)
""")

xcmGenNotifyDetailGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 2, 18)
)
xcmGenNotifyDetailGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmGenNotifyDetailEntryCount"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyDetailSupportMax"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyDetailRowStatus"),
        ("XEROX-COMMON-MIB", "xcmGenNotifyDetailString"))
)
if mibBuilder.loadTexts:
    xcmGenNotifyDetailGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmGenNotifyDetailGroup.setDescription("""\
 Notify Detail Group (notification additional details)
""")

xcmHrDevInfoGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 3)
)
xcmHrDevInfoGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevInfoRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoName"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoSerialNumber"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoRealization"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoXStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoConditions"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoXConditions"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoInstallDate"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoResetDate"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoNextDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoPreviousDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoPhysicalDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoPriority"))
)
if mibBuilder.loadTexts:
    xcmHrDevInfoGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevInfoGroup.setDescription("""\
The Host Resources Extensions MIB Device Info Group
""")

xcmHrDevHelpGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 4)
)
xcmHrDevHelpGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevHelpRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevHelpOperatorMessage"),
        ("XEROX-COMMON-MIB", "xcmHrDevHelpProblemMessage"),
        ("XEROX-COMMON-MIB", "xcmHrDevHelpCommsAddressIndex"))
)
if mibBuilder.loadTexts:
    xcmHrDevHelpGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevHelpGroup.setDescription("""\
The Host Resources Extensions MIB Device Help Group Implementation of this
group is DEPRECATED (as of XCMI v4.1) and conforming implementations SHOULD use
'deviceHelp...' details in 'xcmHrDevDetailTable' instead.
""")

xcmHrDevMgmtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 5)
)
xcmHrDevMgmtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevMgmtRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtCommandRequest"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtCommandData"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtCommandStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtUserPassword"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtOperatorPassword"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtAdminPassword"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtCommandInProgress"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtUserName"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtOperatorName"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtAdminName"))
)
if mibBuilder.loadTexts:
    xcmHrDevMgmtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevMgmtGroup.setDescription("""\
The Host Resources Extensions MIB Device Mgmt Group
""")

xcmHrDevPowerGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 6)
)
xcmHrDevPowerGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevPowerRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerWarmUpSupport"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerCoolDownSupport"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerEnergySaveSupport"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerTimeUnit"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerWarmUpDelay"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerWarmUpDuration"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerCoolDownDelay"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerCoolDownDuration"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerEnergySaveDelay"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerEnergySaveDuration"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerWakeUpSupport"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerWakeUpDelay"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerWakeUpDuration"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerShutdownDelay"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerShutdownDuration"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerStartupDelay"),
        ("XEROX-COMMON-MIB", "xcmHrDevPowerStartupDuration"))
)
if mibBuilder.loadTexts:
    xcmHrDevPowerGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevPowerGroup.setDescription("""\
The Host Resources Extensions MIB Device Power Group
""")

xcmHrDevTrafficGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 7)
)
xcmHrDevTrafficGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevTrafficRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficInputSupport"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficOutputSupport"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficInputUnit"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficOutputUnit"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficInputCount"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficOutputCount"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficInputMaxSize"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficOutputMaxSize"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficInputTimeout"),
        ("XEROX-COMMON-MIB", "xcmHrDevTrafficOutputTimeout"))
)
if mibBuilder.loadTexts:
    xcmHrDevTrafficGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevTrafficGroup.setDescription("""\
The Host Resources Extensions MIB Device Traffic Group
""")

xcmHrSystemFaultGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 8)
)
xcmHrSystemFaultGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrSystemFaultRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrSystemFaultCode"),
        ("XEROX-COMMON-MIB", "xcmHrSystemFaultString"),
        ("XEROX-COMMON-MIB", "xcmHrSystemFaultReferenceOID"),
        ("XEROX-COMMON-MIB", "xcmHrSystemFaultHrDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrSystemFaultDate"))
)
if mibBuilder.loadTexts:
    xcmHrSystemFaultGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSystemFaultGroup.setDescription("""\
The Host Resources Extensions MIB System Fault Group
""")

xcmHrGeneralGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 9)
)
xcmHrGeneralGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrGeneralRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralVersionID"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralVersionDate"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralStorageLast"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralDeviceLast"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralFSLast"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralSWRunLast"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralSWInstalledLast"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralSystemFaultLast"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmHrGeneralUpdateSupport"))
)
if mibBuilder.loadTexts:
    xcmHrGeneralGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrGeneralGroup.setDescription("""\
The Host Resources Extensions MIB General Group
""")

xcmHrDevCalendarGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 10)
)
xcmHrDevCalendarGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevCalendarRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevCalendarExplicitDate"),
        ("XEROX-COMMON-MIB", "xcmHrDevCalendarCommandRequest"),
        ("XEROX-COMMON-MIB", "xcmHrDevCalendarCommandData"))
)
if mibBuilder.loadTexts:
    xcmHrDevCalendarGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCalendarGroup.setDescription("""\
The Host Resources Extensions MIB Device Calendar Group
""")

xcmHrSWRunGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 11)
)
xcmHrSWRunGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrSWRunRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrSWRunAdminName"),
        ("XEROX-COMMON-MIB", "xcmHrSWRunXStatus"),
        ("XEROX-COMMON-MIB", "xcmHrSWRunRowCreateDate"),
        ("XEROX-COMMON-MIB", "xcmHrSWRunPhysicalDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrSWRunLogicalDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrSWRunNextIndex"),
        ("XEROX-COMMON-MIB", "xcmHrSWRunPreviousIndex"))
)
if mibBuilder.loadTexts:
    xcmHrSWRunGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWRunGroup.setDescription("""\
The Host Resources Extensions MIB Software Running Ext Group
""")

xcmHrSWInstalledGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 12)
)
xcmHrSWInstalledGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrSWInstalledRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrSWInstalledAdminName"),
        ("XEROX-COMMON-MIB", "xcmHrSWInstalledXStatus"),
        ("XEROX-COMMON-MIB", "xcmHrSWInstalledRowCreateDate"),
        ("XEROX-COMMON-MIB", "xcmHrSWInstalledPhysicalIndex"),
        ("XEROX-COMMON-MIB", "xcmHrSWInstalledLogicalIndex"),
        ("XEROX-COMMON-MIB", "xcmHrSWInstalledNextIndex"),
        ("XEROX-COMMON-MIB", "xcmHrSWInstalledPreviousIndex"))
)
if mibBuilder.loadTexts:
    xcmHrSWInstalledGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSWInstalledGroup.setDescription("""\
The Host Resources Extensions MIB Software Installed Ext Group
""")

xcmHrDevDetailGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 13)
)
xcmHrDevDetailGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevDetailType"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailIndex"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailUnitClass"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailUnit"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailValueInteger"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailValueOID"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailValueString"))
)
if mibBuilder.loadTexts:
    xcmHrDevDetailGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevDetailGroup.setDescription("""\
The Host Resources Extensions MIB Device Detail Group
""")

xcmHrStorageGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 14)
)
xcmHrStorageGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrStorageRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrStorageRealization"),
        ("XEROX-COMMON-MIB", "xcmHrStorageStatus"),
        ("XEROX-COMMON-MIB", "xcmHrStorageProductDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrStoragePlatformDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrStoragePagingDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrStorageMatchingDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrStorageSWRunIndex"),
        ("XEROX-COMMON-MIB", "xcmHrStorageSWInstalledIndex"),
        ("XEROX-COMMON-MIB", "xcmHrStorageNextIndex"),
        ("XEROX-COMMON-MIB", "xcmHrStoragePreviousIndex"),
        ("XEROX-COMMON-MIB", "xcmHrStoragePhysicalIndex"))
)
if mibBuilder.loadTexts:
    xcmHrStorageGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageGroup.setDescription("""\
The Host Resources Extensions MIB Storage Ext Group
""")

xcmHrStorageDetailGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 15)
)
xcmHrStorageDetailGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrStorageDetailRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrStorageDetailUnitClass"),
        ("XEROX-COMMON-MIB", "xcmHrStorageDetailUnit"),
        ("XEROX-COMMON-MIB", "xcmHrStorageDetailValueInteger"),
        ("XEROX-COMMON-MIB", "xcmHrStorageDetailValueOID"),
        ("XEROX-COMMON-MIB", "xcmHrStorageDetailValueString"))
)
if mibBuilder.loadTexts:
    xcmHrStorageDetailGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrStorageDetailGroup.setDescription("""\
The Host Resources Extensions MIB Storage Detail Group
""")

xcmHrDevCoverGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 16)
)
xcmHrDevCoverGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevCoverRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevCoverName"),
        ("XEROX-COMMON-MIB", "xcmHrDevCoverDescription"),
        ("XEROX-COMMON-MIB", "xcmHrDevCoverTypeCover"),
        ("XEROX-COMMON-MIB", "xcmHrDevCoverStatusOpen"))
)
if mibBuilder.loadTexts:
    xcmHrDevCoverGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevCoverGroup.setDescription("""\
The Host Resources Extensions MIB Device Cover Group
""")

xcmHrDevAlertGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 17)
)
xcmHrDevAlertGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevAlertRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertSeverityLevel"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertTrainingLevel"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertCodeInteger"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertCodeString"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertDescription"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertReferenceOID"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertDateAndTime"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertTitle"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertHelpReference"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertReferenceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertReferenceLocation"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertDevAlertIndex"))
)
if mibBuilder.loadTexts:
    xcmHrDevAlertGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDevAlertGroup.setDescription("""\
The Host Resources Extensions MIB Device Alert Group
""")

xcmHrConsoleScreenGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 18)
)
xcmHrConsoleScreenGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrConsoleScreenName"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleScreenDescription"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleScreenParentIndex"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleScreenPriority"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleScreenTabCount"))
)
if mibBuilder.loadTexts:
    xcmHrConsoleScreenGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleScreenGroup.setDescription("""\
The Host Resources Extensions MIB Console Screen Group
""")

xcmHrConsoleTabGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 19)
)
xcmHrConsoleTabGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrConsoleTabName"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleTabDescription"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleTabScreenIndex"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleTabPriority"))
)
if mibBuilder.loadTexts:
    xcmHrConsoleTabGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleTabGroup.setDescription("""\
The Host Resources Extensions MIB Console Tab Group
""")

xcmHrSuppliesGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 20)
)
xcmHrSuppliesGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrSuppliesReferenceOID"),
        ("XEROX-COMMON-MIB", "xcmHrSuppliesType"),
        ("XEROX-COMMON-MIB", "xcmHrSuppliesClass"),
        ("XEROX-COMMON-MIB", "xcmHrSuppliesDescr"),
        ("XEROX-COMMON-MIB", "xcmHrSuppliesPartNumber"))
)
if mibBuilder.loadTexts:
    xcmHrSuppliesGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrSuppliesGroup.setDescription("""\
The Host Resources Extensions MIB Supplies Group
""")

xcmHrDetailGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 21)
)
xcmHrDetailGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDetailUnitClass"),
        ("XEROX-COMMON-MIB", "xcmHrDetailUnit"),
        ("XEROX-COMMON-MIB", "xcmHrDetailValueInteger"),
        ("XEROX-COMMON-MIB", "xcmHrDetailValueOID"),
        ("XEROX-COMMON-MIB", "xcmHrDetailValueString"),
        ("XEROX-COMMON-MIB", "xcmHrDetailDescription"))
)
if mibBuilder.loadTexts:
    xcmHrDetailGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrDetailGroup.setDescription("""\
The Host Resources Extensions MIB Detail Group
""")

xcmHrConsoleGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 2, 22)
)
xcmHrConsoleGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrConsoleDefaultService"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleBrightness"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleContrast"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleAccessibility"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleAutoClearTime"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleInsertTimeout"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleTray1Timeout"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleTray2nTimeout"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleLoadTimeout"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleSoundVolume"),
        ("XEROX-COMMON-MIB", "xcmHrConsoleSoundDuration"))
)
if mibBuilder.loadTexts:
    xcmHrConsoleGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmHrConsoleGroup.setDescription("""\
The Host Resources Extensions MIB Console Group
""")

xcmPrtBaseGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 1)
)
xcmPrtBaseGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtBaseRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtBaseGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmPrtBaseUpdateSupport"),
        ("XEROX-COMMON-MIB", "xcmPrtBaseCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmPrtBaseIETFMIBGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmPrtBaseIETFMIBUpdateSupport"),
        ("XEROX-COMMON-MIB", "xcmPrtBaseIETFMIBCreateSupport"))
)
if mibBuilder.loadTexts:
    xcmPrtBaseGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtBaseGroup.setDescription("""\
 The general printer group extension.
""")

xcmPrtGeneralGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 5)
)
xcmPrtGeneralGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtGeneralRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralAuxSheetPackage"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralManualFeedTimeout"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralInputAutoSwitch"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralOutputAutoSwitch"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralMediumClassDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralDarknessLevels"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralDarknessLevelNorm"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralDarknessLevelDflt"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralHexDumpEnable"))
)
if mibBuilder.loadTexts:
    xcmPrtGeneralGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralGroup.setDescription("""\
 The general printer group extension.
""")

xcmPrtDriverOptionsGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 6)
)
xcmPrtDriverOptionsGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptStapler"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptDuplexUnit"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptPhaserBookletMaker"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptEnvelopeTray"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptCoilPunchUnit"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptFinisherDFA"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptHighCapacityFeeder"),
        ("XEROX-COMMON-MIB", "xcmPrtDriverOutputDeliveryUnit"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptHardDrive"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptHolePunchUnit"),
        ("XEROX-COMMON-MIB", "xcmPrtDriverInputPaperTrays"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptInserterUnit"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptJobAccountingFdi"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptFaxOut"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptMemoryInMBs"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptOutputBinSide"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptOutputBinCenter"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptPhaserModule"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptPrintEngine"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptSquareFoldTrimmer"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrHwdOptTriFold"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrFntCollation"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrFntAsciiJobTicket"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrFntAuthenticationMode"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrFntHoldForAuthenMode"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrFntEnhancedImageQualityMode"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrFntProductivityPack"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrFntJobStorage"),
        ("XEROX-COMMON-MIB", "xcmPrtDrvrFntJobAccountingSystem"))
)
if mibBuilder.loadTexts:
    xcmPrtDriverOptionsGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtDriverOptionsGroup.setDescription("""\
 The printer driver options group extension.
""")

xcmPrtInputGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 8)
)
xcmPrtInputGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtInputRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtInputNextPrtInputIndex"),
        ("XEROX-COMMON-MIB", "xcmPrtInputUseCustomSize"),
        ("XEROX-COMMON-MIB", "xcmPrtInputCustDimFeedDirDecl"),
        ("XEROX-COMMON-MIB", "xcmPrtInputCustDimXFeedDirDecl"),
        ("XEROX-COMMON-MIB", "xcmPrtInputTrayPriority"))
)
if mibBuilder.loadTexts:
    xcmPrtInputGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputGroup.setDescription("""\
 The input group extension.
""")

xcmPrtOutputGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 9)
)
xcmPrtOutputGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtOutputRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputNextIndex"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputPassword"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputOffsetStackingType"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputTrayTimeoutSupport"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputTrayTimeout"))
)
if mibBuilder.loadTexts:
    xcmPrtOutputGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputGroup.setDescription("""\
 The output group extension.
""")

xcmPrtChannelGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 14)
)
xcmPrtChannelGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtChannelRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtChannelEOJTimeout"),
        ("XEROX-COMMON-MIB", "xcmPrtChannelAuxSheetPackage"),
        ("XEROX-COMMON-MIB", "xcmPrtChannelSpoolingEnable"),
        ("XEROX-COMMON-MIB", "xcmPrtChannelLangSensing"),
        ("XEROX-COMMON-MIB", "xcmPrtChannelBinaryPostScript"))
)
if mibBuilder.loadTexts:
    xcmPrtChannelGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelGroup.setDescription("""\
 The Channel group extension.
""")

xcmPrtInterpreterGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 15)
)
xcmPrtInterpreterGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtInterpRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpAuxSheetPackage"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpContextSaving"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpEdgeEnhancement"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpFontIndexDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpGrayLevels"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpGrayLevelDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpJamRecovery"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpJobCopiesDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpLineWrap"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpMediumSizeDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPageProtect"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPageProtectSize"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPageSizeErrorPolicy"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPlexSupported"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPlexDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPrintEdgeToEdge"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPrintQuality"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPrtInputIndexDflt"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPrtOutputIndexDflt"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpResFeedDirDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpResXFeedDirDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpResIPResIndex"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpResIPResIndexDflt"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpTextFormLength"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpTimeoutJob"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpTimeoutPage"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpInputAliasIndexDflt"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpTraySwitch"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpMediumTypeDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpMediaTypeErrPolicy"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpErrorPolicyTimeout"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpLineTerm"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpEnhancedResolution"))
)
if mibBuilder.loadTexts:
    xcmPrtInterpreterGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpreterGroup.setDescription("""\
 The interpreter group extension.
""")

xcmPrtInputAliasGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 50)
)
xcmPrtInputAliasGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtInputAliasRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtInputAliasName"),
        ("XEROX-COMMON-MIB", "xcmPrtInputAliasSwitchProgram"))
)
if mibBuilder.loadTexts:
    xcmPrtInputAliasGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInputAliasGroup.setDescription("""\
 The Input Alias group.
""")

xcmPrtOutputFinishingGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 51)
)
xcmPrtOutputFinishingGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtOutputStaple"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputStaplePosSupported"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputStapleDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputStaplePosDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputPunch"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputPunchDefault"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputPunchPosSupported"),
        ("XEROX-COMMON-MIB", "xcmPrtOutputBookletFoldStaple"))
)
if mibBuilder.loadTexts:
    xcmPrtOutputFinishingGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtOutputFinishingGroup.setDescription("""\
 The Output Finishing group.
""")

xcmPrtGeneralAuxSheetGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 52)
)
xcmPrtGeneralAuxSheetGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtGeneralStartupPage"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralBannerPage"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralEndBannerPage"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralTrayLowWarning"))
)
if mibBuilder.loadTexts:
    xcmPrtGeneralAuxSheetGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralAuxSheetGroup.setDescription("""\
 The General Auxiliary Sheet group.
""")

xcmPrtGeneralProdSpecificGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 55)
)
xcmPrtGeneralProdSpecificGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtGeneralScanlineCompaction"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralTonerLowStop"),
        ("XEROX-COMMON-MIB", "xcmPrtGeneralMonoPrintOptimization"))
)
if mibBuilder.loadTexts:
    xcmPrtGeneralProdSpecificGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtGeneralProdSpecificGroup.setDescription("""\
 The general printer product specific group.
""")

xcmPrtAuxPackageGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 60)
)
xcmPrtAuxPackageGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtAuxPackageRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtAuxPackageType"),
        ("XEROX-COMMON-MIB", "xcmPrtAuxPackageContent"),
        ("XEROX-COMMON-MIB", "xcmPrtAuxPackagePrtInputIndex"),
        ("XEROX-COMMON-MIB", "xcmPrtAuxPackageNext"))
)
if mibBuilder.loadTexts:
    xcmPrtAuxPackageGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtAuxPackageGroup.setDescription("""\
 The Auxiliary Package group.
""")

xcmPrtChannelProdSpecificGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 64)
)
xcmPrtChannelProdSpecificGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtChannelAutoJobEnd"),
        ("XEROX-COMMON-MIB", "xcmPrtChannelBinaryPostScriptZ"))
)
if mibBuilder.loadTexts:
    xcmPrtChannelProdSpecificGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtChannelProdSpecificGroup.setDescription("""\
 The Channel group extension for prod specific objects.
""")

xcmPrtInterpProdSpecificGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 65)
)
xcmPrtInterpProdSpecificGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtInterpAutoContinue"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpOffsetStackingType"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpEnvFeederSize"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpManualFeedPgSize"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpProcessBarcodes"))
)
if mibBuilder.loadTexts:
    xcmPrtInterpProdSpecificGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpProdSpecificGroup.setDescription("""\
 The interpreter group extension.
""")

xcmPrtInterpPCLGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 70)
)
xcmPrtInterpPCLGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtInterpPCLRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPCLFontSourceDflt"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPCLFontNumberDflt"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPCLPitchNumerator"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPCLPitchDenominator"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPCLPtSizeNumerator"),
        ("XEROX-COMMON-MIB", "xcmPrtInterpPCLPtSizeDenominatr"))
)
if mibBuilder.loadTexts:
    xcmPrtInterpPCLGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLGroup.setDescription("""\
 The Interpreter PCL group.
""")

xcmPrtInterpPCLProdSpecificGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 71)
)
xcmPrtInterpPCLProdSpecificGroup.setObjects(
    ("XEROX-COMMON-MIB", "xcmPrtInterpPCLPrintScreen")
)
if mibBuilder.loadTexts:
    xcmPrtInterpPCLProdSpecificGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtInterpPCLProdSpecificGroup.setDescription("""\
 The Interpreter PCL Product Specific group.
""")

xcmPrtMediumTypeSupportedGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 2, 75)
)
xcmPrtMediumTypeSupportedGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmPrtMedmTypeSupRowStatus"),
        ("XEROX-COMMON-MIB", "xcmPrtMedmTypeSupRowPersistence"),
        ("XEROX-COMMON-MIB", "xcmPrtMedmTypeSupName"),
        ("XEROX-COMMON-MIB", "xcmPrtMedmTypeSupFuserTemp"),
        ("XEROX-COMMON-MIB", "xcmPrtMedmTypeSupPaperType"),
        ("XEROX-COMMON-MIB", "xcmPrtMedmTypeSupPDLString"),
        ("XEROX-COMMON-MIB", "xcmPrtMedmTypeSupFuserHide"))
)
if mibBuilder.loadTexts:
    xcmPrtMediumTypeSupportedGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmPrtMediumTypeSupportedGroup.setDescription("""\
 The Medium Type Supported group.
""")

xcmRsrcGeneralGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 2, 2, 1)
)
xcmRsrcGeneralGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmRsrcGeneralRowStatus"),
        ("XEROX-COMMON-MIB", "xcmRsrcGeneralGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmRsrcGeneralCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmRsrcGeneralUpdateSupport"),
        ("XEROX-COMMON-MIB", "xcmRsrcGeneralRsrcTypeAccept"),
        ("XEROX-COMMON-MIB", "xcmRsrcGeneralFontTypeAccept"),
        ("XEROX-COMMON-MIB", "xcmRsrcGeneralRsrcTypeSupport"),
        ("XEROX-COMMON-MIB", "xcmRsrcGeneralFontTypeSupport"))
)
if mibBuilder.loadTexts:
    xcmRsrcGeneralGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcGeneralGroup.setDescription("""\
The Resources MIB General Group.
""")

xcmRsrcInfoGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 2, 2, 3)
)
xcmRsrcInfoGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmRsrcRowStatus"),
        ("XEROX-COMMON-MIB", "xcmRsrcType"),
        ("XEROX-COMMON-MIB", "xcmRsrcInterpreterLangFamily"),
        ("XEROX-COMMON-MIB", "xcmRsrcName"),
        ("XEROX-COMMON-MIB", "xcmRsrcDescription"),
        ("XEROX-COMMON-MIB", "xcmRsrcCopyright"),
        ("XEROX-COMMON-MIB", "xcmRsrcPersistence"),
        ("XEROX-COMMON-MIB", "xcmRsrcHrStorageIndex"),
        ("XEROX-COMMON-MIB", "xcmRsrcSizeHigh"),
        ("XEROX-COMMON-MIB", "xcmRsrcSizeLow"),
        ("XEROX-COMMON-MIB", "xcmRsrcID"),
        ("XEROX-COMMON-MIB", "xcmRsrcVersion"))
)
if mibBuilder.loadTexts:
    xcmRsrcInfoGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmRsrcInfoGroup.setDescription("""\
The Document Resources MIB (Generic) Resources Group.
""")

xcmFontInfoGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 2, 2, 4)
)
xcmFontInfoGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmFontRowStatus"),
        ("XEROX-COMMON-MIB", "xcmFontType"),
        ("XEROX-COMMON-MIB", "xcmFontPointsMinNumerator"),
        ("XEROX-COMMON-MIB", "xcmFontPointsMaxNumerator"),
        ("XEROX-COMMON-MIB", "xcmFontPointsDenominator"),
        ("XEROX-COMMON-MIB", "xcmFontSpacing"),
        ("XEROX-COMMON-MIB", "xcmFontCharSet"))
)
if mibBuilder.loadTexts:
    xcmFontInfoGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontInfoGroup.setDescription("""\
The Resources MIB (General) Fonts Group.
""")

xcmFontPCLGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 2, 2, 5)
)
xcmFontPCLGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmFontPCLRowStatus"),
        ("XEROX-COMMON-MIB", "xcmFontPCLTypefaceValue"),
        ("XEROX-COMMON-MIB", "xcmFontPCLSymbolSetValue"),
        ("XEROX-COMMON-MIB", "xcmFontPCLStyle"),
        ("XEROX-COMMON-MIB", "xcmFontPCLPitchMinNumerator"),
        ("XEROX-COMMON-MIB", "xcmFontPCLPitchMaxNumerator"),
        ("XEROX-COMMON-MIB", "xcmFontPCLPitchDenominator"),
        ("XEROX-COMMON-MIB", "xcmFontPCLStrokeWeight"))
)
if mibBuilder.loadTexts:
    xcmFontPCLGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmFontPCLGroup.setDescription("""\
The Resources MIB PCL Fonts Group.
""")

xcmJMBaseGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 1)
)
xcmJMBaseGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJobMonBaseRowStatus"),
        ("XEROX-COMMON-MIB", "xcmJobMonBaseVersionID"),
        ("XEROX-COMMON-MIB", "xcmJobMonBaseVersionDate"),
        ("XEROX-COMMON-MIB", "xcmJobMonBaseGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmJobMonBaseCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmJobMonBaseUpdateSupport"))
)
if mibBuilder.loadTexts:
    xcmJMBaseGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMBaseGroup.setDescription("""\
The conditionally mandatory Job Monitoring Base group, i.e., SHALL be
implemented if implementing traps and/or SJMM.
""")

xcmJMJobGenBasicGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 6)
)
xcmJMJobGenBasicGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
        ("XEROX-COMMON-MIB", "xcmJobIdentifierUpstream"),
        ("XEROX-COMMON-MIB", "xcmJobClientId"),
        ("XEROX-COMMON-MIB", "xcmJobServiceType"),
        ("XEROX-COMMON-MIB", "xcmJobName"),
        ("XEROX-COMMON-MIB", "xcmJobOwner"),
        ("XEROX-COMMON-MIB", "xcmJobSourceChannelType"),
        ("XEROX-COMMON-MIB", "xcmJobSubmittedLocaleIndex"),
        ("XEROX-COMMON-MIB", "xcmJobCurrentState"),
        ("XEROX-COMMON-MIB", "xcmJobStateReasons"),
        ("XEROX-COMMON-MIB", "xcmJobXStateReasons"),
        ("XEROX-COMMON-MIB", "xcmJobX2StateReasons"))
)
if mibBuilder.loadTexts:
    xcmJMJobGenBasicGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMJobGenBasicGroup.setDescription("""\
The conditionally mandatory Job General Basic group, i.e., SHALL be implemented
if implementing traps and/or SJMM.
""")

xcmJMDevicesAssignedGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 7)
)
xcmJMDevicesAssignedGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmDeviceStateOfDevicesAssigned"),
        ("XEROX-COMMON-MIB", "xcmJobIdentifierDownstream"))
)
if mibBuilder.loadTexts:
    xcmJMDevicesAssignedGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMDevicesAssignedGroup.setDescription("""\
The deprecated Devices Assigned group.
""")

xcmJMClientIdMapGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 8)
)
xcmJMClientIdMapGroup.setObjects(
    ("XEROX-COMMON-MIB", "xcmClientIdMapHrDeviceIndex")
)
if mibBuilder.loadTexts:
    xcmJMClientIdMapGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMClientIdMapGroup.setDescription("""\
The optional client id map group - applies to all jobs.
""")

xcmJMJobGenExtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 10)
)
xcmJMJobGenExtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJobOriginator"),
        ("XEROX-COMMON-MIB", "xcmJobSubmittingApplication"),
        ("XEROX-COMMON-MIB", "xcmJobComment"),
        ("XEROX-COMMON-MIB", "xcmJobCopies"),
        ("XEROX-COMMON-MIB", "xcmJobCopiesCompleted"),
        ("XEROX-COMMON-MIB", "xcmJobOutputBinIndex"),
        ("XEROX-COMMON-MIB", "xcmJobServiceNameRequested"),
        ("XEROX-COMMON-MIB", "xcmJobPreviousState"),
        ("XEROX-COMMON-MIB", "xcmJobEstimatedCompletionTime"),
        ("XEROX-COMMON-MIB", "xcmJobSubmissionTime"),
        ("XEROX-COMMON-MIB", "xcmJobPagesCompleted"),
        ("XEROX-COMMON-MIB", "xcmJobOctetsCompletedHigh"),
        ("XEROX-COMMON-MIB", "xcmJobOctetsCompletedLow"),
        ("XEROX-COMMON-MIB", "xcmJobErrorCount"),
        ("XEROX-COMMON-MIB", "xcmJobWarningCount"),
        ("XEROX-COMMON-MIB", "xcmJobProcessingTime"),
        ("XEROX-COMMON-MIB", "xcmJobNumberOfDocuments"),
        ("XEROX-COMMON-MIB", "xcmJobAuthorizationUserName"))
)
if mibBuilder.loadTexts:
    xcmJMJobGenExtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMJobGenExtGroup.setDescription("""\
The Job General Extended group.
""")

xcmJMDocGenBasicGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 12)
)
xcmJMDocGenBasicGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmDocSequenceNumber"),
        ("XEROX-COMMON-MIB", "xcmDocName"),
        ("XEROX-COMMON-MIB", "xcmDocFileName"),
        ("XEROX-COMMON-MIB", "xcmDocFileNameType"),
        ("XEROX-COMMON-MIB", "xcmDocType"),
        ("XEROX-COMMON-MIB", "xcmDocFormat"),
        ("XEROX-COMMON-MIB", "xcmDocFormatVariants"),
        ("XEROX-COMMON-MIB", "xcmDocFormatVersion"),
        ("XEROX-COMMON-MIB", "xcmDocOctetCount"),
        ("XEROX-COMMON-MIB", "xcmDocState"))
)
if mibBuilder.loadTexts:
    xcmJMDocGenBasicGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMDocGenBasicGroup.setDescription("""\
The document information group.
""")

xcmJMDocPrintExtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 13)
)
xcmJMDocPrintExtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmDocPrintDefaultMediumName"),
        ("XEROX-COMMON-MIB", "xcmDocPrintDefaultInputIndex"),
        ("XEROX-COMMON-MIB", "xcmDocPrintFinishing"),
        ("XEROX-COMMON-MIB", "xcmDocPrintOutputMethod"),
        ("XEROX-COMMON-MIB", "xcmDocPrintNumberUp"),
        ("XEROX-COMMON-MIB", "xcmDocPrintSides"),
        ("XEROX-COMMON-MIB", "xcmDocPrintCopyCount"),
        ("XEROX-COMMON-MIB", "xcmDocPrintCopiesCompleted"))
)
if mibBuilder.loadTexts:
    xcmJMDocPrintExtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMDocPrintExtGroup.setDescription("""\
The Document Print-centric group.
""")

xcmJMJobGenSpoolingBasicGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 14)
)
xcmJMJobGenSpoolingBasicGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJobNumberOfJobResultSets"),
        ("XEROX-COMMON-MIB", "xcmJobPriority"),
        ("XEROX-COMMON-MIB", "xcmJobTotalOctetsHigh"),
        ("XEROX-COMMON-MIB", "xcmJobTotalOctetsLow"),
        ("XEROX-COMMON-MIB", "xcmJobInterveningJobs"))
)
if mibBuilder.loadTexts:
    xcmJMJobGenSpoolingBasicGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMJobGenSpoolingBasicGroup.setDescription("""\
The Job General Spooling Basic group.
""")

xcmJMJobGenSpoolingExtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 15)
)
xcmJMJobGenSpoolingExtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJobProcessAfter"),
        ("XEROX-COMMON-MIB", "xcmJobDeadlineTime"),
        ("XEROX-COMMON-MIB", "xcmJobDiscardTime"),
        ("XEROX-COMMON-MIB", "xcmJobRetentionPeriod"),
        ("XEROX-COMMON-MIB", "xcmJobMessageToOperator"),
        ("XEROX-COMMON-MIB", "xcmJobMessageFromOperator"),
        ("XEROX-COMMON-MIB", "xcmJobMessageFromAdministrator"),
        ("XEROX-COMMON-MIB", "xcmJobPageCount"))
)
if mibBuilder.loadTexts:
    xcmJMJobGenSpoolingExtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMJobGenSpoolingExtGroup.setDescription("""\
The Job General Spooling Extended group.
""")

xcmJMJobGenAccountingBasicGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 16)
)
xcmJMJobGenAccountingBasicGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJobAccountingBasicRowStatus"),
        ("XEROX-COMMON-MIB", "xcmJobAccountingUserName"),
        ("XEROX-COMMON-MIB", "xcmJobAccountingInformation"),
        ("XEROX-COMMON-MIB", "xcmJobStartedProcessingTime"),
        ("XEROX-COMMON-MIB", "xcmJobImpressionsCompleted"),
        ("XEROX-COMMON-MIB", "xcmJobMediaSheetsCompleted"),
        ("XEROX-COMMON-MIB", "xcmJobCompletionTime"),
        ("XEROX-COMMON-MIB", "xcmJobWorkUnitType"),
        ("XEROX-COMMON-MIB", "xcmJobUnitsOfWorkCompleted"))
)
if mibBuilder.loadTexts:
    xcmJMJobGenAccountingBasicGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMJobGenAccountingBasicGroup.setDescription("""\
The Job General Accounting Basic group.
""")

xcmJMMediaConsumedGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 17)
)
xcmJMMediaConsumedGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmMediaConsumedRowStatus"),
        ("XEROX-COMMON-MIB", "xcmMediaConsumedType"),
        ("XEROX-COMMON-MIB", "xcmMediaConsumedName"),
        ("XEROX-COMMON-MIB", "xcmMediaConsumedSheetCount"))
)
if mibBuilder.loadTexts:
    xcmJMMediaConsumedGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMMediaConsumedGroup.setDescription("""\
The media consumed group.
""")

xcmJMColorImpsConsumedGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 18)
)
xcmJMColorImpsConsumedGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmColorImpsConsumedRowStatus"),
        ("XEROX-COMMON-MIB", "xcmColorImpsConsumedTypeIndex"),
        ("XEROX-COMMON-MIB", "xcmColorImpsConsumedCount"))
)
if mibBuilder.loadTexts:
    xcmJMColorImpsConsumedGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMColorImpsConsumedGroup.setDescription("""\
The optional color impressions consumed group.
""")

xcmJMJobImpsByMediumSizeGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 3, 21)
)
xcmJMJobImpsByMediumSizeGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJobImpsByMediumSizeRowStatus"),
        ("XEROX-COMMON-MIB", "xcmJobImpsByMediumSizeMediumSize"),
        ("XEROX-COMMON-MIB", "xcmJobImpsByMediumSizeCountType"),
        ("XEROX-COMMON-MIB", "xcmJobImpsByMediumSizeCount"),
        ("XEROX-COMMON-MIB", "xcmJobImpsByMediumSizeCountQuality"))
)
if mibBuilder.loadTexts:
    xcmJMJobImpsByMediumSizeGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJMJobImpsByMediumSizeGroup.setDescription("""\
The Job Impressions by Medium Size group.
""")

xcmCommsEngineGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 3)
)
xcmCommsEngineGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsEngineRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineName"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineStackLast"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineMuxLast"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineAddressLast"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineMgmtLast"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineUpdateSupport"))
)
if mibBuilder.loadTexts:
    xcmCommsEngineGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineGroup.setDescription("""\
Comms Engine Group (Comms Engines).
""")

xcmCommsEngineExtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 4)
)
xcmCommsEngineExtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsEngineExtRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineExtState"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineExtConditions"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineExtVersionID"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineExtVersionDate"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineExtMgmtIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsEngineExtOwnerOID"))
)
if mibBuilder.loadTexts:
    xcmCommsEngineExtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsEngineExtGroup.setDescription("""\
Comms Engine Ext Group (Comms Engines).
""")

xcmCommsStackGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 5)
)
xcmCommsStackGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsStackRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsStackTypeOID"),
        ("XEROX-COMMON-MIB", "xcmCommsStackName"),
        ("XEROX-COMMON-MIB", "xcmCommsStackPosition"),
        ("XEROX-COMMON-MIB", "xcmCommsStackLowerStackIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackUpperStackIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackAddressIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackOptionIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackLowerMuxIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackUpperMuxIndex"))
)
if mibBuilder.loadTexts:
    xcmCommsStackGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackGroup.setDescription("""\
Comms Stack Group (Stack Layers).
""")

xcmCommsStackExtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 6)
)
xcmCommsStackExtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsStackExtRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtState"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtConditions"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtPurpose"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtRole"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtSuite"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtSuiteVersion"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtLayer"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtProtocol"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtMgmtIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackExtOwnerOID"))
)
if mibBuilder.loadTexts:
    xcmCommsStackExtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackExtGroup.setDescription("""\
Comms Stack Ext Group (Stack Layers).
""")

xcmCommsStackXrefGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 7)
)
xcmCommsStackXrefGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsStackXrefRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsStackXrefLayerMgmtIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackXrefLayerSecIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackXrefLayerIWUIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackXrefHrSWRunIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackXrefHrSWInsIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackXrefIfIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsStackXrefHrCommDevIndex"))
)
if mibBuilder.loadTexts:
    xcmCommsStackXrefGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsStackXrefGroup.setDescription("""\
Comms Stack Xref Group (Stack Layers).
""")

xcmCommsMuxGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 8)
)
xcmCommsMuxGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsMuxRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxNextIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxPreviousIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxOptionIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxBaseStackIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxAdjacentStackIndex"))
)
if mibBuilder.loadTexts:
    xcmCommsMuxGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxGroup.setDescription("""\
Comms Mux Group (Multiplexors).
""")

xcmCommsMuxExtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 9)
)
xcmCommsMuxExtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsMuxExtRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxExtState"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxExtConditions"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxExtMgmtIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxExtAddressIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsMuxExtOwnerOID"))
)
if mibBuilder.loadTexts:
    xcmCommsMuxExtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMuxExtGroup.setDescription("""\
Comms Mux Ext Group (Multiplexors).
""")

xcmCommsAddressGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 10)
)
xcmCommsAddressGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsAddressRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressTypeOID"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressUserRole"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressName"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressCanonical"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressNextIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressPreviousIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressOptionIndex"))
)
if mibBuilder.loadTexts:
    xcmCommsAddressGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressGroup.setDescription("""\
Comms Address Group (Directories).
""")

xcmCommsAddressExtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 11)
)
xcmCommsAddressExtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsAddressExtRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressExtState"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressExtConditions"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressExtForm"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressExtScope"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressExtFanout"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressExtMgmtIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsAddressExtOwnerOID"))
)
if mibBuilder.loadTexts:
    xcmCommsAddressExtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAddressExtGroup.setDescription("""\
Comms Address Ext Group (Directories).
""")

xcmCommsTrafficGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 12)
)
xcmCommsTrafficGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsTrafficRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsTrafficInputUnit"),
        ("XEROX-COMMON-MIB", "xcmCommsTrafficOutputUnit"),
        ("XEROX-COMMON-MIB", "xcmCommsTrafficInputCount"),
        ("XEROX-COMMON-MIB", "xcmCommsTrafficOutputCount"),
        ("XEROX-COMMON-MIB", "xcmCommsTrafficInputErrors"),
        ("XEROX-COMMON-MIB", "xcmCommsTrafficOutputErrors"))
)
if mibBuilder.loadTexts:
    xcmCommsTrafficGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsTrafficGroup.setDescription("""\
Comms Traffic Group (Stack Layer Traffic Counters).
""")

xcmCommsAccessGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 13)
)
xcmCommsAccessGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsAccessRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsAccessConnectPorts"),
        ("XEROX-COMMON-MIB", "xcmCommsAccessHighConnectPorts"),
        ("XEROX-COMMON-MIB", "xcmCommsAccessMaxConnectPorts"),
        ("XEROX-COMMON-MIB", "xcmCommsAccessDatagramPorts"),
        ("XEROX-COMMON-MIB", "xcmCommsAccessHighDatagramPorts"),
        ("XEROX-COMMON-MIB", "xcmCommsAccessMaxDatagramPorts"))
)
if mibBuilder.loadTexts:
    xcmCommsAccessGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsAccessGroup.setDescription("""\
Comms Access Group (Stack Layer Access Counters).
""")

xcmCommsMgmtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 2, 14)
)
xcmCommsMgmtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsMgmtRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsMgmtCommandRequest"),
        ("XEROX-COMMON-MIB", "xcmCommsMgmtCommandData"),
        ("XEROX-COMMON-MIB", "xcmCommsMgmtCommandStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsMgmtCommandInProgress"))
)
if mibBuilder.loadTexts:
    xcmCommsMgmtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsMgmtGroup.setDescription("""\
Comms Mgmt Group (State Management).
""")

xcmCommsConfigGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2, 2, 3)
)
xcmCommsConfigGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsConfigRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsConfigActiveOptionFirst"),
        ("XEROX-COMMON-MIB", "xcmCommsConfigActiveOptionLast"),
        ("XEROX-COMMON-MIB", "xcmCommsConfigGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmCommsConfigCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmCommsConfigUpdateSupport"))
)
if mibBuilder.loadTexts:
    xcmCommsConfigGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsConfigGroup.setDescription("""\
The Comms Config Group (Communications Configurations).
""")

xcmCommsOptionGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2, 2, 4)
)
xcmCommsOptionGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsOptionRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionTypeOID"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionValueSyntax"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionValueInteger"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionValueOID"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionValueString"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionValueLocalization"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionValueCodedCharSet"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionNextIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionPreviousIndex"),
        ("XEROX-COMMON-MIB", "xcmCommsOptionFamilyIndex"))
)
if mibBuilder.loadTexts:
    xcmCommsOptionGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsOptionGroup.setDescription("""\
The Comms Option Group (Communications Configuration Options).
""")

xcmCommsDirRecordGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2, 2, 5)
)
xcmCommsDirRecordGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsDirRecordRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsDirRecordKeyType"),
        ("XEROX-COMMON-MIB", "xcmCommsDirRecordKeyInteger"),
        ("XEROX-COMMON-MIB", "xcmCommsDirRecordKeyString"),
        ("XEROX-COMMON-MIB", "xcmCommsDirRecordParentType"),
        ("XEROX-COMMON-MIB", "xcmCommsDirRecordParentIndex"))
)
if mibBuilder.loadTexts:
    xcmCommsDirRecordGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirRecordGroup.setDescription("""\
Directory Record Group.
""")

xcmCommsDirAttributeGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2, 2, 6)
)
xcmCommsDirAttributeGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsDirAttributeRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsDirAttributeValue"))
)
if mibBuilder.loadTexts:
    xcmCommsDirAttributeGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirAttributeGroup.setDescription("""\
Directory Attribute Group.
""")

xcmCommsDirStringGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2, 2, 7)
)
xcmCommsDirStringGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmCommsDirStringRowStatus"),
        ("XEROX-COMMON-MIB", "xcmCommsDirStringValue"))
)
if mibBuilder.loadTexts:
    xcmCommsDirStringGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsDirStringGroup.setDescription("""\
Directory String Group.
""")

xcmCommsProtocolGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2, 2, 8)
)
xcmCommsProtocolGroup.setObjects(
    ("XEROX-COMMON-MIB", "xcmCommsProtocolRowStatus")
)
if mibBuilder.loadTexts:
    xcmCommsProtocolGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmCommsProtocolGroup.setDescription("""\
Comms Protocol Group (available suites and protocols).
""")

xcmSvcMonGeneralGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2, 2, 1)
)
xcmSvcMonGeneralGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonGeneralRowStatus"),
        ("XEROX-COMMON-MIB", "xcmSvcMonGeneralVersionID"),
        ("XEROX-COMMON-MIB", "xcmSvcMonGeneralVersionDate"),
        ("XEROX-COMMON-MIB", "xcmSvcMonGeneralGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmSvcMonGeneralCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmSvcMonGeneralUpdateSupport"))
)
if mibBuilder.loadTexts:
    xcmSvcMonGeneralGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonGeneralGroup.setDescription("""\
The Service Monitoring General Group.
""")

xcmSvcMonQueueGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2, 2, 3)
)
xcmSvcMonQueueGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonQueueIndex"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueRowStatus"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueDomain"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueuePath"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueName"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueOnSystem"))
)
if mibBuilder.loadTexts:
    xcmSvcMonQueueGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueGroup.setDescription("""\
The Service Monitoring Associated Queue Group.
""")

xcmSvcMonQueueExtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2, 2, 4)
)
xcmSvcMonQueueExtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonQueueRoutingIndex"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueState"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueConditions"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueFaultCount"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueFaultCode"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueFaultString"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueRowCreateDate"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueRowTotalJobs"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueLastConnectDate"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueLastConnectJobs"))
)
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtGroup.setDescription("""\
The Service Monitoring Associated Queue Ext Group.
""")

xcmSvcMonServiceGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2, 2, 5)
)
xcmSvcMonServiceGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonServiceIndex"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceRowStatus"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceName"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceCurrentState"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServicePreviousState"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceConditions"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceAvailability"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServicePhysicalDevice"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceLogicalDevice"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceExternalDevice"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceSWRun"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceSWInstalled"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceStorage"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServicePriority"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceType"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceStateDetail"))
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceGroup.setDescription("""\
The Service Monitoring Service Group.
""")

xcmSvcMonServiceDetailGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2, 2, 6)
)
xcmSvcMonServiceDetailGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonServiceDetailRowStatus"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceDetailUnitClass"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceDetailUnit"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceDetailInteger"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceDetailOID"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceDetailString"))
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceDetailGroup.setDescription("""\
The Service Monitoring Service Detail Group.
""")

xcmSvcMonServiceMgmtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2, 2, 7)
)
xcmSvcMonServiceMgmtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonServiceMgmtOperation"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceMgmtData"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceMgmtStatus"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceMgmtInProgress"))
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtGroup.setDescription("""\
The Service Monitoring Service Mgmt Group.
""")

xcmSimpleJobBaseGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 2, 2, 1)
)
xcmSimpleJobBaseGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSimpleJobBaseRowStatus"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobBaseGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobBaseCreateSupport"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobBaseUpdateSupport"))
)
if mibBuilder.loadTexts:
    xcmSimpleJobBaseGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobBaseGroup.setDescription("""\
The Simple Job Base Group
""")

xcmSimpleJobMgmtGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 2, 2, 3)
)
xcmSimpleJobMgmtGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSimpleJobMgmtOperation"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobMgmtData"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobMgmtStatus"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobMgmtInProgress"))
)
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtGroup.setDescription("""\
The Simple Job Mgmt Group
""")

xcmSimpleJobInterceptGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 2, 2, 4)
)
xcmSimpleJobInterceptGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSimpleJobInterceptClientId"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobInterceptRowStatus"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobInterceptOperation"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobInterceptData"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobInterceptStatus"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobInterceptInProgress"))
)
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptGroup.setDescription("""\
The Simple Job Intercept Group
""")

xcmJmxGeneralGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 3, 2, 1)
)
xcmJmxGeneralGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJmxGeneralGroupSupport"),
        ("XEROX-COMMON-MIB", "xcmJmxGeneralJobCreatedCount"),
        ("XEROX-COMMON-MIB", "xcmJmxGeneralJobCompletedCount"),
        ("XEROX-COMMON-MIB", "xcmJmxGeneralJobOperationCount"),
        ("XEROX-COMMON-MIB", "xcmJmxGeneralJobTrapCount"))
)
if mibBuilder.loadTexts:
    xcmJmxGeneralGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxGeneralGroup.setDescription("""\
The general group.
""")

xcmJmxJobAdminGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 3, 2, 2)
)
xcmJmxJobAdminGroup.setObjects(
      *(("XEROX-COMMON-MIB", "xcmJmxJobAdminOperation"),
        ("XEROX-COMMON-MIB", "xcmJmxJobAdminStatus"),
        ("XEROX-COMMON-MIB", "xcmJmxJobAdminInProgress"))
)
if mibBuilder.loadTexts:
    xcmJmxJobAdminGroup.setStatus("current")
if mibBuilder.loadTexts:
    xcmJmxJobAdminGroup.setDescription("""\
The job administration group.
""")


# Notification objects

xcmHrDevInfoV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 3, 1, 0, 1)
)
xcmHrDevInfoV2Event.setObjects(
      *(("HOST-RESOURCES-MIB", "hrDeviceIndex"),
        ("HOST-RESOURCES-MIB", "hrDeviceStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoXStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoConditions"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoXConditions"))
)
if mibBuilder.loadTexts:
    xcmHrDevInfoV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmHrDevInfoV2Event.setDescription("""\
This trap is sent whenever 'hrDeviceStatus' and/or
'xcmHrDevInfo[XStatus|Conditions|XConditions]' changes. Note: The variable-
bindings of this trap have been chosen to specify a complete device status
change while keeping trap messages reasonably concise (generally a few hundred
octets at most). This notification has the following special semantics: o The
device's 'hrDeviceIndex' field value SHALL be appended to this trap object ID,
as a BER binary OID suffix. This trap OID qualifier allows device
management/monitoring applications to limit the alerts they receive to ones
generated by devices of interest.
""")

xcmHrDevMgmtV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 5, 1, 0, 1)
)
xcmHrDevMgmtV2Event.setObjects(
      *(("HOST-RESOURCES-MIB", "hrDeviceIndex"),
        ("HOST-RESOURCES-MIB", "hrDeviceStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoXStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoConditions"),
        ("XEROX-COMMON-MIB", "xcmHrDevInfoXConditions"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtCommandRequest"),
        ("XEROX-COMMON-MIB", "xcmHrDevMgmtCommandStatus"))
)
if mibBuilder.loadTexts:
    xcmHrDevMgmtV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmHrDevMgmtV2Event.setDescription("""\
This trap is sent whenever an 'XcmHrDevMgmtCommandRequest' completes, ie, when
'xcmHrDevMgmtCommandStatus' becomes the completed operation status and
'XcmHrDevMgmtCommandInProgress' goes from 'true' to 'false'. Note: The
variable-bindings of this trap have been chosen to specify a complete
management operation result while keeping trap messages reasonably concise
(generally a few hundred octets at most). This notification has the following
special semantics: o The device's 'hrDeviceIndex' field value SHALL be appended
to this trap object ID, as a BER binary OID suffix. This trap OID qualifier
allows device management/monitoring applications to limit the alerts they
receive to ones generated by requests they have submitted.
""")

xcmHrDevDetailV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 13, 1, 0, 1)
)
xcmHrDevDetailV2Event.setObjects(
      *(("HOST-RESOURCES-MIB", "hrDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailType"),
        ("XEROX-COMMON-MIB", "xcmHrDevDetailIndex"))
)
if mibBuilder.loadTexts:
    xcmHrDevDetailV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmHrDevDetailV2Event.setDescription("""\
This trap is sent when 'xcmHrDevDetailIndex' is shared between a counter detail
and a limit detail which are specified in 'xcmHrDevDetailValueInteger', OR when
'xcmHrDevDetailValueString' specifies a trigger date. Note: The variable-
bindings of this trap have been chosen to specify a complete device status
change while keeping trap messages reasonably concise (generally a few hundred
octets at most). This notification has the following special semantics: o The
detail's 'hrDeviceIndex' value, the detail's 'xcmHrDevDetailType' value, and
the detail's 'xcmHrDevDetailIndex' value SHALL be appended to this trap object
ID, as a BER binary OID suffix. This trap OID qualifier allows device
management/monitoring applications to limit the alerts they receive to ones
generated by device details of interest.
""")

xcmHrDevAlertV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 17, 1, 0, 1)
)
xcmHrDevAlertV2Event.setObjects(
      *(("XEROX-COMMON-MIB", "xcmHrDevAlertRowStatus"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertSeverityLevel"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertTrainingLevel"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertCodeInteger"),
        ("XEROX-COMMON-MIB", "xcmHrDevAlertCodeString"))
)
if mibBuilder.loadTexts:
    xcmHrDevAlertV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmHrDevAlertV2Event.setDescription("""\
This trap is sent whenever a device alert row transitions to 'active' row
status or (optionally) transitions to 'notInService' row status in
'xcmHrDevAlertTable'. This trap is sent when requested by a prior subscription.
Note: The variable-bindings of this trap have been chosen to specify a complete
device alert event while keeping trap messages reasonably concise (generally a
few hundred octets at most). This notification has the following special
semantics: o The device's 'hrDeviceIndex' field value SHALL be appended to this
trap object ID, as a BER binary OID suffix. This trap OID qualifier allows
device management/monitoring applications to limit the alerts they receive to
ones generated by devices of interest. Systems MAY add other variable-bindings
from any MIB.
""")

xcmPrtGeneralConsoleLocalizationV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 5, 2, 0, 1)
)
xcmPrtGeneralConsoleLocalizationV2Event.setObjects(
      *(("XEROX-COMMON-MIB", "prtConsoleLocalization"),
        ("XEROX-COMMON-MIB", "prtLocalizationLanguage"),
        ("XEROX-COMMON-MIB", "prtLocalizationCountry"),
        ("XEROX-COMMON-MIB", "prtLocalizationCharacterSet"))
)
if mibBuilder.loadTexts:
    xcmPrtGeneralConsoleLocalizationV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmPrtGeneralConsoleLocalizationV2Event.setDescription("""\
This trap is sent when the value for prtConsoleLocalization in the industry
standard printer MIB gets updated. Note: The variable-bindings of this trap
have been chosen to allow for updated prtConsoleLocalization information to be
provided while keeping trap messages reasonably concise (generally a few
hundred octets at most).
""")

xcmRsrcV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 3, 2, 0, 1)
)
xcmRsrcV2Event.setObjects(
    ("XEROX-COMMON-MIB", "xcmRsrcRowStatus")
)
if mibBuilder.loadTexts:
    xcmRsrcV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmRsrcV2Event.setDescription("""\
This trap is sent whenever ANY object in a resource entry or in a subordinate
entry changes. This notification has the following special semantics: o Any
resource entry object (e.g. 'xcmRsrcPersistence' in the Resource table) whose
value has changed SHOULD also be added to this trap's variable-bindings. o Any
subordinate entry object (e.g. 'xcmFontRowStatus' in the Font table) whose
value has changed MAY also be added to this trap's variable-bindings. The above
special semantics permit optimizations by agreement between SNMP manager and
SNMP agent implementers.
""")

xcmJobV2AlertNew = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 19, 4, 0, 1)
)
xcmJobV2AlertNew.setObjects(
      *(("HOST-RESOURCES-MIB", "hrDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"))
)
if mibBuilder.loadTexts:
    xcmJobV2AlertNew.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJobV2AlertNew.setDescription("""\
This trap is sent whenever the state of a job changes. The 'state of a job' is
comprised by the aggregate values of the xcmJobCurrentState, xcmJobPriority,
xcmJobStateReasons, xcmJobXStateReasons, xcmJobX2StateReasons,
xcmDevicesAssigned and xcmDeviceStateOfDevicesAssigned fields of the job's
table entries: This notification is sent whenever any of these values changes
with the following exceptions: 1. Changes in xcmDeviceStateOfDevicesAssigned
shall only generate traps when the job is in the processing state (NOTE -
xcmJMDevicesAssignedGroup is deprecated) 2. Changes in xcmJobStateReasons,
xcmJobXStateReasons, and xcmJobX2StateReasons shall only generate traps when
the job is in the processing state (rare). The normal polling cycle will pick
up any changes while the job is not in the processing state. Since most changes
in reasons also accompany a job state change, the chances that a change in a
reason will have to wait for the normal polling cycle is very small. For
example, a requester further modifies a held job adding more reasons for it to
be held will have to wait for the polling cycle, since the job does not change
state (remaining in the held state). NOTE - the hrDeviceIndex is included for
convenience, even though the Printer MIB (RFC 1759) doesn't include
hrDeviceIndex in its traps. Then the management station doesn't have to parse
the received varBind OIDs on a trap in order to discover which device trapped.
NOTE - the addition of an entire row to the job tables corresponds to the
acceptance of another job by the server. The state of the job changes from
unknown to a specific value (usually pending). Therefore, the agent shall
generate a trap when a job is accepted (so that the management station can
display the newly arrived job in a timely fashion). Similarly when the server
removes a job because the job has been in the completed state for a sufficient
time or the job has been deleted by a Delete operation, the SNMP agent shall
reflect that removal by removing the row from the job tables, and shall
generate a trap (since the state of the job has changed to non-existent). The
IETF Printer MIB maintains a table which serves as a sort of 'audit-trail' of
recent alerts. There is no need for such a table here, since the job's tables
will serve virtually the same purpose. As with all SNMP notifications, critical
applications cannot completely rely upon delivery: some amount of polling is
recommended. The variable-bindings of this trap have been chosen to give the
minimum of information: the xcmJobIdentifierOnSystem value and hrDeviceIndex
are provided. With these an application is able to obtain the full job table
entry. An application has to look at the job tables anyway. The time of the
alert is returned as part of any SNMP trap. The hrDeviceIndex maps one-to-one
with the PWG Job Mon jmGeneralJobSetIndex. (The PWG Job Mon does not require
the Host Resources MIB, so the name of the primary index for all PWG Job Mon
tables is not hrDeviceIndex, but serves the same purpose of allowing multiple
instances in a single device or server. The Job Alert's special semantics is
covered by U.S. patent 5778183. This notification has the following special
semantics: o If the job's xcmJobClientId field is not empty, its value will
also be appended to trap object ID. NOTE: If the format of the xcmJobClientId
is dotted decimal representation, then it will be encoded as a BER binary OID
appended to the trap object ID. NOTE: The BER binary OID shall not include the
ASN.1/BER tag of 6 indicating an OID and shall not include the ASN.1/BER length
field in octets of the OID. This trap OID qualifier allows job-submission and
monitoring applications to limit the alerts they receive to ones generated by
jobs which they have submitted. NOTE: The sum of the trap var bind values must
be less than can fit into a PDU on any transport, roughly 540 octets on some
transports. Thus implementers are warned to minimize the length of the
xcmJobClientId and xcmJobIdentifierOnSystem objects.
""")

xcmDocV2AlertNew = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 20, 4, 0, 1)
)
xcmDocV2AlertNew.setObjects(
      *(("HOST-RESOURCES-MIB", "hrDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
        ("XEROX-COMMON-MIB", "xcmDocSequenceNumber"))
)
if mibBuilder.loadTexts:
    xcmDocV2AlertNew.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmDocV2AlertNew.setDescription("""\
This trap is sent whenever the state of one of the documents in a job changes.
The state of a single document is represented in the xcmDocGenBasicTable
column: xcmDocState. The job's xcmJobIdentifierOnSystem and the document's
xcmDocSequenceNumber are included in the trap's variable bindings; these can be
used to reference the document's xcmDocGenBasicTable entry. NOTE - the addition
of an entire row to the document tables corresponds to the acceptance of
another document (in a job) by the server. The state of the document changes
from unknown to a specific value (usually transfer pending). Therefore, the
agent generates a trap when a document (within a job) is accepted (so that the
management station can display the newly arrived document in a timely fashion).
This notification has the following special semantics: 1 The agent shall append
the document's job's xcmJobClientId to the trap object ID, if the document's
job's xcmJobClientId field is not empty. NOTE: If the format of the
xcmJobClientId is dotted decimal representation, then it will be encoded as a
BER binary OID appended to the trap object ID. NOTE: The BER binary OID shall
not include the ASN.1/BER tag of 6 indicating an OID and shall not include the
ASN.1/BER length field in octets of the OID. 2 The agent shall append the value
of the document's xcmDocSequenceNumber field to the trap object ID. These trap
OID qualifiers allow job-submission and monitoring applications to specify
exactly which alerts they are interested in and to limit the alerts they
receive to ones generated by jobs or jobs and documents that they have
submitted. NOTE: The sum of the trap var bind values must be less than can fit
into a PDU on any transport, roughly 540 octets on some transports. Thus
implementers are warned to minimize the length of the xcmJobClientId and
xcmJobIdentifierOnSystem objects.
""")

xcmSvcMonQueueExtV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 4, 1, 0, 1)
)
xcmSvcMonQueueExtV2Event.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonQueueIndex"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueOnSystem"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueState"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueConditions"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueFaultCount"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueFaultCode"),
        ("XEROX-COMMON-MIB", "xcmSvcMonQueueFaultString"))
)
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmSvcMonQueueExtV2Event.setDescription("""\
This is the definition of the SNMPv2 trap sent whenever
'xcmSvcMonQueue[State|Conditions|FaultCount]' changes. Note: The variable-
bindings of this trap have been chosen to specify a complete associated queue
status change while keeping trap messages reasonably concise (generally a few
hundred octets at most). This notification has the following special semantics:
o The queue's 'xcmSvcMonQueueIndex' field value SHALL be appended to this trap
object ID, as a BER binary OID suffix. This trap OID qualifier allows service
management/monitoring applications to limit the alerts they receive to ones
generated by associated queues of interest.
""")

xcmSvcMonServiceV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 5, 1, 0, 1)
)
xcmSvcMonServiceV2Event.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonServiceIndex"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceCurrentState"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServicePreviousState"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceConditions"))
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmSvcMonServiceV2Event.setDescription("""\
This trap is sent whenever 'XcmSvcMonService[CurrentState|Conditions]' changes.
Note: The variable-bindings of this trap have been chosen to specify a complete
service status change while keeping trap messages reasonably concise (generally
a few hundred octets at most). This notification has the following special
semantics: o The service's 'xcmSvcMonServiceIndex' field value SHALL be
appended to this trap object ID, as a BER binary OID suffix. This trap OID
qualifier allows service management/monitoring applications to limit the alerts
they receive to ones generated by services of interest.
""")

xcmSvcMonServiceMgmtV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 7, 1, 0, 1)
)
xcmSvcMonServiceMgmtV2Event.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSvcMonServiceIndex"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceMgmtOperation"),
        ("XEROX-COMMON-MIB", "xcmSvcMonServiceMgmtStatus"))
)
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmSvcMonServiceMgmtV2Event.setDescription("""\
This trap is sent whenever an 'XcmSvcMonServiceMgmtOperation' completes, ie,
when 'xcmSvcMonServiceMgmtStatus' becomes the completed operation status and
'XcmSvcMonServiceMgmtInProgress' goes from 'true' to 'false'. Note: The
variable-bindings of this trap have been chosen to specify a complete
management operation result while keeping trap messages reasonably concise
(generally a few hundred octets at most). This notification has the following
special semantics: o The service's 'xcmSvcMonServiceIndex' field value SHALL be
appended to this trap object ID, as a BER binary OID suffix. This trap OID
qualifier allows service management/monitoring applications to limit the alerts
they receive to ones generated by requests they have submitted.
""")

xcmSimpleJobMgmtV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 3, 1, 0, 1)
)
xcmSimpleJobMgmtV2Event.setObjects(
      *(("HOST-RESOURCES-MIB", "hrDeviceIndex"),
        ("XEROX-COMMON-MIB", "xcmJobIdentifierOnSystem"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobMgmtOperation"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobMgmtStatus"))
)
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtV2Event.setDescription("""\
This trap is sent whenever an 'XcmSimpleJobMgmtOperation' completes, ie, when
'xcmSimpleJobMgmtStatus' becomes a completed operation status and
'XcmSimpleJobMgmtInProgress' goes from 'true' to 'false'. Note: The
'hrDeviceIndex' is included for convenience, even though the IETF Printer MIB
doesn't include 'hrDeviceIndex' in its traps. Then the management station
doesn't have to parse the received varBind OIDs on a trap in order to discover
which device trapped. Note: The variable-bindings of this trap have been chosen
to specify a complete job management operation result while keeping trap
messages reasonably concise (generally a few hundred octets at most). This
notification has the following special semantics: o If the job's
'xcmJobClientId' field is non-empty and it is a valid 'XcmGlobalUniqueID'
representation, its value shall ALWAYS be appended to this trap object ID, as a
BER binary OID suffix. Note: The BER binary OID suffix shall NOT include the
BER tag of 6 indicating an OID and shall NOT include the BER length field in
octets of the OID suffix. This trap OID qualifier allows job-submission and
job-monitoring applications to limit the alerts they receive to ones generated
by jobs which they have submitted. Note: The sum of the trap varBind values
must be less than can fit into a PDU on any transport, roughly 540 octets on
some transports. Thus implementors are warned to minimize the length of the
'xcmJobClientId' and 'xcmJobIdentifierOnSystem' objects.
""")

xcmSimpleJobInterceptV2Event = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 4, 1, 0, 1)
)
xcmSimpleJobInterceptV2Event.setObjects(
      *(("XEROX-COMMON-MIB", "xcmSimpleJobInterceptClientId"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobInterceptOperation"),
        ("XEROX-COMMON-MIB", "xcmSimpleJobInterceptStatus"))
)
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptV2Event.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmSimpleJobInterceptV2Event.setDescription("""\
This trap is sent whenever an 'XcmSimpleJobInterceptOperation' completes. Note:
The variable-bindings of this trap have been chosen to specify a complete job
intercept operation result while keeping trap messages reasonably concise
(generally a few hundred octets at most). This notification has the following
special semantics: o If 'xcmSimpleJobInterceptClientId' is non-empty and it is
a valid 'XcmGlobalUniqueID' representation, its value shall ALWAYS be appended
to this trap object ID, as a BER binary OID suffix. Note: The BER binary OID
suffix shall NOT include the BER tag of 6 indicating an OID and shall NOT
include the BER length field in octets of the OID suffix. This trap OID
qualifier allows job-submission and job-monitoring applications to limit the
alerts they receive to ones generated by jobs which they have submitted. Note:
The sum of the trap varBind values must be less than can fit into a PDU on any
transport, roughly 540 octets on some transports. Thus implementors are warned
to minimize the length of the 'xcmJobClientId' and 'xcmJobIdentifierOnSystem'
objects.
""")

xcmJmxJobOperationV2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 1, 0, 1)
)
xcmJmxJobOperationV2Trap.setObjects(
      *(("Job-Monitoring-MIB", "jmJobState"),
        ("Job-Monitoring-MIB", "jmJobStateReasons1"),
        ("XEROX-COMMON-MIB", "xcmJmxJobAdminOperation"),
        ("XEROX-COMMON-MIB", "xcmJmxJobAdminStatus"))
)
if mibBuilder.loadTexts:
    xcmJmxJobOperationV2Trap.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJmxJobOperationV2Trap.setDescription("""\
This SMIv2 trap corresponds to a Job operation complete event. The values of
'jmGeneralJobSetIndex' and 'jmJobIndex' for use with 'jmJobTable' for this Job
are conveyed in the instance qualifier (OID suffix) of 'jmJobOperation'.
Additional variable-bindings MAY be appended to this trap: - Systems with the
Host Resources MIB (RFC 2790) MAY add 'hrSystemDate' (compare to IPP 'printer-
current-time') - Systems MAY add other variable-bindings from any MIB
""")

xcmJmxJobStateV2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 2, 0, 1)
)
xcmJmxJobStateV2Trap.setObjects(
      *(("Job-Monitoring-MIB", "jmJobState"),
        ("Job-Monitoring-MIB", "jmJobStateReasons1"))
)
if mibBuilder.loadTexts:
    xcmJmxJobStateV2Trap.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJmxJobStateV2Trap.setDescription("""\
This SMIv2 trap corresponds to IPP 'job-state-changed' event. The values of
'jmGeneralJobSetIndex' and 'jmJobIndex' for use with 'jmJobTable' for this Job
are conveyed in the instance qualifier (OID suffix) of 'jmJobState'. Additional
variable-bindings MAY be appended to this trap: - Systems with the Host
Resources MIB (RFC 2790) MAY add 'hrSystemDate' (compare to IPP 'printer-
current-time') - Systems MAY add other variable-bindings from any MIB
""")

xcmJmxJobCreatedV2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 3, 0, 1)
)
xcmJmxJobCreatedV2Trap.setObjects(
      *(("Job-Monitoring-MIB", "jmJobState"),
        ("Job-Monitoring-MIB", "jmJobStateReasons1"),
        ("Job-Monitoring-MIB", "jmNumberOfInterveningJobs"))
)
if mibBuilder.loadTexts:
    xcmJmxJobCreatedV2Trap.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJmxJobCreatedV2Trap.setDescription("""\
This SMIv2 trap corresponds to IPP 'job-created' event.
""")

xcmJmxJobCompletedV2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 4, 0, 1)
)
xcmJmxJobCompletedV2Trap.setObjects(
      *(("Job-Monitoring-MIB", "jmJobState"),
        ("Job-Monitoring-MIB", "jmJobStateReasons1"),
        ("Job-Monitoring-MIB", "jmJobKOctetsProcessed"),
        ("Job-Monitoring-MIB", "jmJobImpressionsCompleted"))
)
if mibBuilder.loadTexts:
    xcmJmxJobCompletedV2Trap.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJmxJobCompletedV2Trap.setDescription("""\
This SMIv2 trap corresponds to IPP 'job-completed' event.
""")

xcmJmxJobStoppedV2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 5, 0, 1)
)
xcmJmxJobStoppedV2Trap.setObjects(
      *(("Job-Monitoring-MIB", "jmJobState"),
        ("Job-Monitoring-MIB", "jmJobStateReasons1"),
        ("Job-Monitoring-MIB", "jmJobKOctetsProcessed"),
        ("Job-Monitoring-MIB", "jmJobImpressionsCompleted"))
)
if mibBuilder.loadTexts:
    xcmJmxJobStoppedV2Trap.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJmxJobStoppedV2Trap.setDescription("""\
This SMIv2 trap corresponds to IPP 'job-stopped' event.
""")

xcmJmxJobConfigV2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 6, 0, 1)
)
xcmJmxJobConfigV2Trap.setObjects(
      *(("Job-Monitoring-MIB", "jmJobState"),
        ("Job-Monitoring-MIB", "jmJobStateReasons1"),
        ("Job-Monitoring-MIB", "jmNumberOfInterveningJobs"))
)
if mibBuilder.loadTexts:
    xcmJmxJobConfigV2Trap.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJmxJobConfigV2Trap.setDescription("""\
This SMIv2 trap corresponds to IPP 'job-config-changed' event.
""")

xcmJmxJobProgressV2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 2, 7, 0, 1)
)
xcmJmxJobProgressV2Trap.setObjects(
      *(("Job-Monitoring-MIB", "jmJobKOctetsPerCopyRequested"),
        ("Job-Monitoring-MIB", "jmJobKOctetsProcessed"),
        ("Job-Monitoring-MIB", "jmJobImpressionsPerCopyRequested"),
        ("Job-Monitoring-MIB", "jmJobImpressionsCompleted"))
)
if mibBuilder.loadTexts:
    xcmJmxJobProgressV2Trap.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJmxJobProgressV2Trap.setDescription("""\
This SMIv2 trap corresponds to an IPP 'job-progress' event.
""")


# Notifications groups


# Agent capabilities


# Module compliance

xcmGeneralMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 51, 2, 3)
)
if mibBuilder.loadTexts:
    xcmGeneralMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmGeneralMIBCompliance.setDescription("""\
 The compliance statements for SNMP management agents that implement the
General MIB.
""")

xcmHrMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 53, 2, 3)
)
if mibBuilder.loadTexts:
    xcmHrMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmHrMIBCompliance.setDescription("""\
The compliance statements for SNMP management agents that implement the Host
Resources Extensions MIB.
""")

xcmPrtMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 55, 2, 1)
)
if mibBuilder.loadTexts:
    xcmPrtMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmPrtMIBCompliance.setDescription("""\
 The compliance statement for agents that implement the printer MIB extension
module.
""")

xcmRsrcMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 57, 2, 1)
)
if mibBuilder.loadTexts:
    xcmRsrcMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmRsrcMIBCompliance.setDescription("""\
The compliance statement for SNMP management agents that implement the XCMI
Document Resources MIB.
""")

xcmJobMonCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 59, 2, 1)
)
if mibBuilder.loadTexts:
    xcmJobMonCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJobMonCompliance.setDescription("""\
The mandatory compliance statement for the agents that implement the XCMI Job
Monitoring MIB, i.e., all the mandatory groups. NOTE: These two groups are
CONDITIONALLY MANDATORY as far as XCMI Conformance is concerned. But if the
conditions are satisfied (traps and/or SJMM), then these groups MUST be
implemented, making them effectively MANDATORY.
""")

xcmCommsEngineMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 3)
)
if mibBuilder.loadTexts:
    xcmCommsEngineMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmCommsEngineMIBCompliance.setDescription("""\
The compliance statements for SNMP management agents that implement the Comms
Engine MIB.
""")

xcmCommsEngineMIBHelpCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 61, 2, 4)
)
if mibBuilder.loadTexts:
    xcmCommsEngineMIBHelpCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmCommsEngineMIBHelpCompliance.setDescription("""\
The compliance statements for SNMP management agents that implement a subset of
the Comms Engine MIB, for the sole purpose of supporting extended 'contact'
information per device, via the Device Help group of the XCMI Ext to Host
Resources MIB. Usage: See 'Usage' paragraphs in the DESCRIPTION sub-clauses of
the following OBJECT clauses for additional usage details.
""")

xcmCommsConfigMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 64, 2, 3)
)
if mibBuilder.loadTexts:
    xcmCommsConfigMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmCommsConfigMIBCompliance.setDescription("""\
The compliance statements for SNMP management agents that implement the Comms
Config MIB.
""")

xcmSvcMonMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 74, 2, 3)
)
if mibBuilder.loadTexts:
    xcmSvcMonMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmSvcMonMIBCompliance.setDescription("""\
The compliance statements for SNMP management agents that implement the Service
Monitoring MIB.
""")

xcmSimpleJobMgmtMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 76, 2, 3)
)
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmSimpleJobMgmtMIBCompliance.setDescription("""\
The compliance statements for SNMP intercept agents that implement the Simple
Job Mgmt MIB.
""")

xcmJmxMIBCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 253, 8, 83, 3, 1)
)
if mibBuilder.loadTexts:
    xcmJmxMIBCompliance.setStatus(
        "current"
    )
if mibBuilder.loadTexts:
    xcmJmxMIBCompliance.setDescription("""\
The compliance statement for agents that implement this Job Admin MIB.
""")


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "XEROX-COMMON-MIB",
    **{"Cardinal16": Cardinal16,
       "Cardinal32": Cardinal32,
       "Cardinal64High": Cardinal64High,
       "Cardinal64Low": Cardinal64Low,
       "CodedCountry": CodedCountry,
       "CodedLanguage": CodedLanguage,
       "CodeIndexedStringIndex": CodeIndexedStringIndex,
       "Counter64High": Counter64High,
       "Counter64Low": Counter64Low,
       "Gauge64High": Gauge64High,
       "Gauge64Low": Gauge64Low,
       "Integer64High": Integer64High,
       "Integer64Low": Integer64Low,
       "Ordinal16": Ordinal16,
       "Ordinal32": Ordinal32,
       "Ordinal64High": Ordinal64High,
       "Ordinal64Low": Ordinal64Low,
       "XcmFixedLocaleDisplayString": XcmFixedLocaleDisplayString,
       "XcmFixedLocaleUtf8String": XcmFixedLocaleUtf8String,
       "XcmNamedLocaleUtf8String": XcmNamedLocaleUtf8String,
       "XcmGenGroupSupport": XcmGenGroupSupport,
       "XcmGenLogFullPolicy": XcmGenLogFullPolicy,
       "XcmGenMessageMapStringLabel": XcmGenMessageMapStringLabel,
       "XcmGenNotifyDetailType": XcmGenNotifyDetailType,
       "XcmGenNotifySchemeSupport": XcmGenNotifySchemeSupport,
       "XcmGenNotifySeverityFilter": XcmGenNotifySeverityFilter,
       "XcmGenNotifyTrainingFilter": XcmGenNotifyTrainingFilter,
       "XcmGenOptionValueSyntax": XcmGenOptionValueSyntax,
       "XcmGenReconfOptionState": XcmGenReconfOptionState,
       "XcmGenRowPersistence": XcmGenRowPersistence,
       "XcmGenSNMPDomain": XcmGenSNMPDomain,
       "XcmGenSNMPVersion": XcmGenSNMPVersion,
       "XcmGenSNMPv2ErrorStatus": XcmGenSNMPv2ErrorStatus,
       "XcmGlobalUniqueID": XcmGlobalUniqueID,
       "XcmHrDevCalendarDayOfWeek": XcmHrDevCalendarDayOfWeek,
       "XcmHrDevCalendarTimeOfDay": XcmHrDevCalendarTimeOfDay,
       "XcmHrDevDetailType": XcmHrDevDetailType,
       "XcmHrDevDetailUnitClass": XcmHrDevDetailUnitClass,
       "XcmHrDevInfoRealization": XcmHrDevInfoRealization,
       "XcmHrDevInfoStatus": XcmHrDevInfoStatus,
       "XcmHrDevInfoXStatus": XcmHrDevInfoXStatus,
       "XcmHrDevInfoConditions": XcmHrDevInfoConditions,
       "XcmHrDevInfoXConditions": XcmHrDevInfoXConditions,
       "XcmHrDeviceStatusType": XcmHrDeviceStatusType,
       "XcmHrDevMgmtCommandRequest": XcmHrDevMgmtCommandRequest,
       "XcmHrDevMgmtCommandData": XcmHrDevMgmtCommandData,
       "XcmHrDevMgmtCommandDataTag": XcmHrDevMgmtCommandDataTag,
       "XcmHrDevPowerModeType": XcmHrDevPowerModeType,
       "XcmHrDevPowerTimeUnit": XcmHrDevPowerTimeUnit,
       "XcmHrDevTrafficUnit": XcmHrDevTrafficUnit,
       "XcmHrGroupSupport": XcmHrGroupSupport,
       "XcmHrSWRunXStatus": XcmHrSWRunXStatus,
       "XcmHrStorageDetailType": XcmHrStorageDetailType,
       "XcmHrStorageRealization": XcmHrStorageRealization,
       "XcmHrDpaAvailability": XcmHrDpaAvailability,
       "XcmHrDpaConditions": XcmHrDpaConditions,
       "XcmHrDpaJobValidateSupport": XcmHrDpaJobValidateSupport,
       "XcmHrDpaObjectClassSupport": XcmHrDpaObjectClassSupport,
       "XcmHrDpaState": XcmHrDpaState,
       "XcmHrSuppliesClassTC": XcmHrSuppliesClassTC,
       "XcmHrDetailTableEnumTC": XcmHrDetailTableEnumTC,
       "XcmHrConsoleDefaultService": XcmHrConsoleDefaultService,
       "XcmPrtAuxSheetContent": XcmPrtAuxSheetContent,
       "XcmPrtAuxSheetType": XcmPrtAuxSheetType,
       "XcmPrtChannelType": XcmPrtChannelType,
       "XcmPrtGroupSupport": XcmPrtGroupSupport,
       "XcmPrtIETFPrintMIBGroupSupport": XcmPrtIETFPrintMIBGroupSupport,
       "XcmPrtInterpreterLangFamily": XcmPrtInterpreterLangFamily,
       "XcmPrtMediaTypeErrorPolicy": XcmPrtMediaTypeErrorPolicy,
       "XcmPrtMediumClassType": XcmPrtMediumClassType,
       "XcmPrtMediumSize": XcmPrtMediumSize,
       "XcmPrtOutputOffsetStackingType": XcmPrtOutputOffsetStackingType,
       "XcmPrtOutputStaplePosition": XcmPrtOutputStaplePosition,
       "XcmPrtPageSizeErrorPolicy": XcmPrtPageSizeErrorPolicy,
       "XcmPrtPCLFontSource": XcmPrtPCLFontSource,
       "XcmPrtPlex": XcmPrtPlex,
       "XcmPrtPrintQuality": XcmPrtPrintQuality,
       "XcmPrtPrintScreen": XcmPrtPrintScreen,
       "XcmPrtTraySwitch": XcmPrtTraySwitch,
       "XcmPrtGeneralMonoPrintOpt": XcmPrtGeneralMonoPrintOpt,
       "XcmPrtOutputPunchPosition": XcmPrtOutputPunchPosition,
       "XcmPrtInputTraysConfiguration": XcmPrtInputTraysConfiguration,
       "XcmPrtFinisherDFAType": XcmPrtFinisherDFAType,
       "XcmPrtHighCapacityFeederType": XcmPrtHighCapacityFeederType,
       "XcmPrtHolePunchUnitType": XcmPrtHolePunchUnitType,
       "XcmPrtFaxOutType": XcmPrtFaxOutType,
       "XcmPrtPhaserModuleType": XcmPrtPhaserModuleType,
       "XcmPrtPrintEngineType": XcmPrtPrintEngineType,
       "XcmPrtAsciiJobTicketType": XcmPrtAsciiJobTicketType,
       "XcmPrtAuthenticationModeType": XcmPrtAuthenticationModeType,
       "XcmPrtHoldForAuthenModeType": XcmPrtHoldForAuthenModeType,
       "XcmPrtAccountingSystemType": XcmPrtAccountingSystemType,
       "XcmRsrcGroupSupport": XcmRsrcGroupSupport,
       "XcmRsrcType": XcmRsrcType,
       "XcmRsrcPersistence": XcmRsrcPersistence,
       "XcmFontType": XcmFontType,
       "XcmFontSpacing": XcmFontSpacing,
       "XcmFontPCLStyle": XcmFontPCLStyle,
       "XcmFontPCLStrokeWeight": XcmFontPCLStrokeWeight,
       "XcmJMJobServiceTypeOID": XcmJMJobServiceTypeOID,
       "XcmJMJobState": XcmJMJobState,
       "XcmJMJobStateReasons": XcmJMJobStateReasons,
       "XcmJMJobXStateReasons": XcmJMJobXStateReasons,
       "XcmJMJobX2StateReasons": XcmJMJobX2StateReasons,
       "XcmJMDocType": XcmJMDocType,
       "XcmJMDocFileNameType": XcmJMDocFileNameType,
       "XcmJMDocState": XcmJMDocState,
       "XcmJMDocOutputMethod": XcmJMDocOutputMethod,
       "XcmJMGroupSupport": XcmJMGroupSupport,
       "XcmJMImpsCountType": XcmJMImpsCountType,
       "XcmJMMediumType": XcmJMMediumType,
       "XcmSimpleJobMgmtGroupSupport": XcmSimpleJobMgmtGroupSupport,
       "XcmSimpleJobMgmtOperation": XcmSimpleJobMgmtOperation,
       "XcmSimpleJobMgmtData": XcmSimpleJobMgmtData,
       "XcmJmxGroupSupport": XcmJmxGroupSupport,
       "XcmJmxJobAdminOperation": XcmJmxJobAdminOperation,
       "XcmJmxJobAccntSupport": XcmJmxJobAccntSupport,
       "XcmCommsMgmtCommandRequest": XcmCommsMgmtCommandRequest,
       "XcmCommsMgmtCommandData": XcmCommsMgmtCommandData,
       "XcmCommsMgmtState": XcmCommsMgmtState,
       "XcmCommsMgmtConditions": XcmCommsMgmtConditions,
       "XcmCommsStackPosition": XcmCommsStackPosition,
       "XcmCommsStackExtPurpose": XcmCommsStackExtPurpose,
       "XcmCommsStackExtRole": XcmCommsStackExtRole,
       "XcmCommsStackExtSuite": XcmCommsStackExtSuite,
       "XcmCommsStackExtSuiteVersion": XcmCommsStackExtSuiteVersion,
       "XcmCommsStackExtLayer": XcmCommsStackExtLayer,
       "XcmCommsStackExtProtocol": XcmCommsStackExtProtocol,
       "XcmCommsAddressExtForm": XcmCommsAddressExtForm,
       "XcmCommsAddressExtScope": XcmCommsAddressExtScope,
       "XcmCommsAddressExtFanout": XcmCommsAddressExtFanout,
       "XcmCommsEngineGroupSupport": XcmCommsEngineGroupSupport,
       "XcmSnmpNetbiosAddress": XcmSnmpNetbiosAddress,
       "XcmSnmpIPHostnameAddress": XcmSnmpIPHostnameAddress,
       "XcmCommsConfigGroupSupport": XcmCommsConfigGroupSupport,
       "XcmCommsDirRecordType": XcmCommsDirRecordType,
       "XcmCommsDirAttributeType": XcmCommsDirAttributeType,
       "XcmCommsLDAPAttributeType": XcmCommsLDAPAttributeType,
       "XcmSvcMonGroupSupport": XcmSvcMonGroupSupport,
       "XcmSvcMonJobConfirmSupport": XcmSvcMonJobConfirmSupport,
       "XcmSvcMonAttachmentPDLSupport": XcmSvcMonAttachmentPDLSupport,
       "XcmSvcMonServiceMgmtOperation": XcmSvcMonServiceMgmtOperation,
       "XcmSvcMonServiceMgmtData": XcmSvcMonServiceMgmtData,
       "XcmSvcMonServiceDetailClass": XcmSvcMonServiceDetailClass,
       "XcmSvcMonServiceDetailType": XcmSvcMonServiceDetailType,
       "XcmSvcMonServiceType": XcmSvcMonServiceType,
       "XcmSvcMonServiceStateDetail": XcmSvcMonServiceStateDetail,
       "XcmSvcMonSystemMailSenderNetAuthSupport": XcmSvcMonSystemMailSenderNetAuthSupport,
       "XcmImageQualityType": XcmImageQualityType,
       "XcmOriginalType": XcmOriginalType,
       "XcmOutputUsage": XcmOutputUsage,
       "XcmLoginCredentialsSource": XcmLoginCredentialsSource,
       "zeroDotZero": zeroDotZero,
       "xcmGenZeroDotZero": xcmGenZeroDotZero,
       "xcmGenZeroDummy": xcmGenZeroDummy,
       "xcmHrZeroDummy": xcmHrZeroDummy,
       "xcmJobZeroDummy": xcmJobZeroDummy,
       "xcmCommsEngineZeroDummy": xcmCommsEngineZeroDummy,
       "xcmCommsConfigZeroDummy": xcmCommsConfigZeroDummy,
       "xcmSvcMonZeroDummy": xcmSvcMonZeroDummy,
       "mib_2": mib_2,
       "system": system,
       "interfaces": interfaces,
       "ifNumber": ifNumber,
       "ifTable": ifTable,
       "ifEntry": ifEntry,
       "ifIndex": ifIndex,
       "ifDescr": ifDescr,
       "ifType": ifType,
       "ifMtu": ifMtu,
       "ifSpeed": ifSpeed,
       "ifPhysAddress": ifPhysAddress,
       "ifAdminStatus": ifAdminStatus,
       "ifOperStatus": ifOperStatus,
       "ifLastChange": ifLastChange,
       "ifInOctets": ifInOctets,
       "ifInUcastPkts": ifInUcastPkts,
       "ifInNUcastPkts": ifInNUcastPkts,
       "ifInDiscards": ifInDiscards,
       "ifInErrors": ifInErrors,
       "ifInUnknownProtos": ifInUnknownProtos,
       "ifOutOctets": ifOutOctets,
       "ifOutUcastPkts": ifOutUcastPkts,
       "ifOutNUcastPkts": ifOutNUcastPkts,
       "ifOutDiscards": ifOutDiscards,
       "ifOutErrors": ifOutErrors,
       "ifOutQLen": ifOutQLen,
       "ifSpecific": ifSpecific,
       "at": at,
       "atTable": atTable,
       "atEntry": atEntry,
       "atIfIndex": atIfIndex,
       "atPhysAddress": atPhysAddress,
       "atNetAddress": atNetAddress,
       "ip": ip,
       "ipForwarding": ipForwarding,
       "ipDefaultTTL": ipDefaultTTL,
       "ipInReceives": ipInReceives,
       "ipInHdrErrors": ipInHdrErrors,
       "ipInAddrErrors": ipInAddrErrors,
       "ipForwDatagrams": ipForwDatagrams,
       "ipInUnknownProtos": ipInUnknownProtos,
       "ipInDiscards": ipInDiscards,
       "ipInDelivers": ipInDelivers,
       "ipOutRequests": ipOutRequests,
       "ipOutDiscards": ipOutDiscards,
       "ipOutNoRoutes": ipOutNoRoutes,
       "ipReasmTimeout": ipReasmTimeout,
       "ipReasmReqds": ipReasmReqds,
       "ipReasmOKs": ipReasmOKs,
       "ipReasmFails": ipReasmFails,
       "ipFragOKs": ipFragOKs,
       "ipFragFails": ipFragFails,
       "ipFragCreates": ipFragCreates,
       "ipAddrTable": ipAddrTable,
       "ipAddrEntry": ipAddrEntry,
       "ipAdEntAddr": ipAdEntAddr,
       "ipAdEntIfIndex": ipAdEntIfIndex,
       "ipAdEntNetMask": ipAdEntNetMask,
       "ipAdEntBcastAddr": ipAdEntBcastAddr,
       "ipAdEntReasmMaxSize": ipAdEntReasmMaxSize,
       "ipRouteTable": ipRouteTable,
       "ipRouteEntry": ipRouteEntry,
       "ipRouteDest": ipRouteDest,
       "ipRouteIfIndex": ipRouteIfIndex,
       "ipRouteMetric1": ipRouteMetric1,
       "ipRouteMetric2": ipRouteMetric2,
       "ipRouteMetric3": ipRouteMetric3,
       "ipRouteMetric4": ipRouteMetric4,
       "ipRouteNextHop": ipRouteNextHop,
       "ipRouteType": ipRouteType,
       "ipRouteProto": ipRouteProto,
       "ipRouteAge": ipRouteAge,
       "ipRouteMask": ipRouteMask,
       "ipRouteMetric5": ipRouteMetric5,
       "ipRouteInfo": ipRouteInfo,
       "ipNetToMediaTable": ipNetToMediaTable,
       "ipNetToMediaEntry": ipNetToMediaEntry,
       "ipNetToMediaIfIndex": ipNetToMediaIfIndex,
       "ipNetToMediaPhysAddress": ipNetToMediaPhysAddress,
       "ipNetToMediaNetAddress": ipNetToMediaNetAddress,
       "ipNetToMediaType": ipNetToMediaType,
       "ipRoutingDiscards": ipRoutingDiscards,
       "icmp": icmp,
       "icmpInMsgs": icmpInMsgs,
       "icmpInErrors": icmpInErrors,
       "icmpInDestUnreachs": icmpInDestUnreachs,
       "icmpInTimeExcds": icmpInTimeExcds,
       "icmpInParmProbs": icmpInParmProbs,
       "icmpInSrcQuenchs": icmpInSrcQuenchs,
       "icmpInRedirects": icmpInRedirects,
       "icmpInEchos": icmpInEchos,
       "icmpInEchoReps": icmpInEchoReps,
       "icmpInTimestamps": icmpInTimestamps,
       "icmpInTimestampReps": icmpInTimestampReps,
       "icmpInAddrMasks": icmpInAddrMasks,
       "icmpInAddrMaskReps": icmpInAddrMaskReps,
       "icmpOutMsgs": icmpOutMsgs,
       "icmpOutErrors": icmpOutErrors,
       "icmpOutDestUnreachs": icmpOutDestUnreachs,
       "icmpOutTimeExcds": icmpOutTimeExcds,
       "icmpOutParmProbs": icmpOutParmProbs,
       "icmpOutSrcQuenchs": icmpOutSrcQuenchs,
       "icmpOutRedirects": icmpOutRedirects,
       "icmpOutEchos": icmpOutEchos,
       "icmpOutEchoReps": icmpOutEchoReps,
       "icmpOutTimestamps": icmpOutTimestamps,
       "icmpOutTimestampReps": icmpOutTimestampReps,
       "icmpOutAddrMasks": icmpOutAddrMasks,
       "icmpOutAddrMaskReps": icmpOutAddrMaskReps,
       "tcp": tcp,
       "tcpRtoAlgorithm": tcpRtoAlgorithm,
       "tcpRtoMin": tcpRtoMin,
       "tcpRtoMax": tcpRtoMax,
       "tcpMaxConn": tcpMaxConn,
       "tcpActiveOpens": tcpActiveOpens,
       "tcpPassiveOpens": tcpPassiveOpens,
       "tcpAttemptFails": tcpAttemptFails,
       "tcpEstabResets": tcpEstabResets,
       "tcpCurrEstab": tcpCurrEstab,
       "tcpInSegs": tcpInSegs,
       "tcpOutSegs": tcpOutSegs,
       "tcpRetransSegs": tcpRetransSegs,
       "tcpConnTable": tcpConnTable,
       "tcpConnEntry": tcpConnEntry,
       "tcpConnState": tcpConnState,
       "tcpConnLocalAddress": tcpConnLocalAddress,
       "tcpConnLocalPort": tcpConnLocalPort,
       "tcpConnRemAddress": tcpConnRemAddress,
       "tcpConnRemPort": tcpConnRemPort,
       "tcpInErrs": tcpInErrs,
       "tcpOutRsts": tcpOutRsts,
       "udp": udp,
       "udpInDatagrams": udpInDatagrams,
       "udpNoPorts": udpNoPorts,
       "udpInErrors": udpInErrors,
       "udpOutDatagrams": udpOutDatagrams,
       "udpTable": udpTable,
       "udpEntry": udpEntry,
       "udpLocalAddress": udpLocalAddress,
       "udpLocalPort": udpLocalPort,
       "egp": egp,
       "egpInMsgs": egpInMsgs,
       "egpInErrors": egpInErrors,
       "egpOutMsgs": egpOutMsgs,
       "egpOutErrors": egpOutErrors,
       "egpNeighTable": egpNeighTable,
       "egpNeighEntry": egpNeighEntry,
       "egpNeighState": egpNeighState,
       "egpNeighAddr": egpNeighAddr,
       "egpNeighAs": egpNeighAs,
       "egpNeighInMsgs": egpNeighInMsgs,
       "egpNeighInErrs": egpNeighInErrs,
       "egpNeighOutMsgs": egpNeighOutMsgs,
       "egpNeighOutErrs": egpNeighOutErrs,
       "egpNeighInErrMsgs": egpNeighInErrMsgs,
       "egpNeighOutErrMsgs": egpNeighOutErrMsgs,
       "egpNeighStateUps": egpNeighStateUps,
       "egpNeighStateDowns": egpNeighStateDowns,
       "egpNeighIntervalHello": egpNeighIntervalHello,
       "egpNeighIntervalPoll": egpNeighIntervalPoll,
       "egpNeighMode": egpNeighMode,
       "egpNeighEventTrigger": egpNeighEventTrigger,
       "egpAs": egpAs,
       "transmission": transmission,
       "snmp": snmp,
       "xerox": xerox,
       "xeroxCommonMIB": xeroxCommonMIB,
       "xcmGeneralTC": xcmGeneralTC,
       "xCmGeneralDummy": xCmGeneralDummy,
       "xCmGenCardinal16": xCmGenCardinal16,
       "xCmGenCardinal32": xCmGenCardinal32,
       "xCmGenCardinal64High": xCmGenCardinal64High,
       "xCmGenCardinal64Low": xCmGenCardinal64Low,
       "xCmGenCodedCountry": xCmGenCodedCountry,
       "xCmGenCodedLanguage": xCmGenCodedLanguage,
       "xCmGenCodeIndexedStringIndex": xCmGenCodeIndexedStringIndex,
       "xCmGenCounter64High": xCmGenCounter64High,
       "xCmGenCounter64Low": xCmGenCounter64Low,
       "xCmGenGauge64High": xCmGenGauge64High,
       "xCmGenGauge64Low": xCmGenGauge64Low,
       "xCmGenInteger64High": xCmGenInteger64High,
       "xCmGenInteger64Low": xCmGenInteger64Low,
       "xCmGenOrdinal16": xCmGenOrdinal16,
       "xCmGenOrdinal32": xCmGenOrdinal32,
       "xCmGenOrdinal64High": xCmGenOrdinal64High,
       "xCmGenOrdinal64Low": xCmGenOrdinal64Low,
       "xCmGenFixedLocaleDisplayString": xCmGenFixedLocaleDisplayString,
       "xCmGenGroupSupport": xCmGenGroupSupport,
       "xCmGenLogFullPolicy": xCmGenLogFullPolicy,
       "xCmGenOptionValueSyntax": xCmGenOptionValueSyntax,
       "xCmGenReconfOptionState": xCmGenReconfOptionState,
       "xCmGenRowPersistence": xCmGenRowPersistence,
       "xCmGenSNMPDomain": xCmGenSNMPDomain,
       "xCmGenSNMPVersion": xCmGenSNMPVersion,
       "xCmGenSNMPv2ErrorStatus": xCmGenSNMPv2ErrorStatus,
       "xCmGenGlobalUniqueID": xCmGenGlobalUniqueID,
       "xCmGenFixedLocaleUtf8String": xCmGenFixedLocaleUtf8String,
       "xCmGenMessageMapStringLabel": xCmGenMessageMapStringLabel,
       "xCmGenNamedLocaleUtf8String": xCmGenNamedLocaleUtf8String,
       "xCmGenNotifySchemeSupport": xCmGenNotifySchemeSupport,
       "xCmGenNotifySeverityFilter": xCmGenNotifySeverityFilter,
       "xCmGenNotifyTrainingFilter": xCmGenNotifyTrainingFilter,
       "xCmGenNotifyDetailType": xCmGenNotifyDetailType,
       "xcmGeneralMIB": xcmGeneralMIB,
       "xcmGenBase": xcmGenBase,
       "xcmGenBaseTable": xcmGenBaseTable,
       "xcmGenBaseEntry": xcmGenBaseEntry,
       "xcmGenBaseIndex": xcmGenBaseIndex,
       "xcmGenBaseRowStatus": xcmGenBaseRowStatus,
       "xcmGenBaseSystemHrDeviceIndex": xcmGenBaseSystemHrDeviceIndex,
       "xcmGenBaseGroupSupport": xcmGenBaseGroupSupport,
       "xcmGenBaseGroupCreateSupport": xcmGenBaseGroupCreateSupport,
       "xcmGenBaseGroupUpdateSupport": xcmGenBaseGroupUpdateSupport,
       "xcmGenBaseClientDataMaxSupport": xcmGenBaseClientDataMaxSupport,
       "xcmGenBaseOptionSyntaxSupport": xcmGenBaseOptionSyntaxSupport,
       "xcmGenBaseReconfStateSupport": xcmGenBaseReconfStateSupport,
       "xcmGenBaseSNMPDomainSupport": xcmGenBaseSNMPDomainSupport,
       "xcmGenBaseSNMPTrapSupport": xcmGenBaseSNMPTrapSupport,
       "xcmGenBaseSNMPVersionSupport": xcmGenBaseSNMPVersionSupport,
       "xcmGenBaseSNMPReadCommunity": xcmGenBaseSNMPReadCommunity,
       "xcmGenBaseSNMPWriteCommunity": xcmGenBaseSNMPWriteCommunity,
       "xcmGenBaseSNMPTrapCommunity": xcmGenBaseSNMPTrapCommunity,
       "xcmGenBaseGroupWalkHidden": xcmGenBaseGroupWalkHidden,
       "xcmGenBaseNotifySchemeSupport": xcmGenBaseNotifySchemeSupport,
       "xcmGenBaseNotifySeveritySupport": xcmGenBaseNotifySeveritySupport,
       "xcmGenBaseNotifyTrainingSupport": xcmGenBaseNotifyTrainingSupport,
       "xcmGenBaseSystem1284DeviceId": xcmGenBaseSystem1284DeviceId,
       "xcmGenBaseSNMPWarningTrapSupport": xcmGenBaseSNMPWarningTrapSupport,
       "xcmGeneralMIBConformance": xcmGeneralMIBConformance,
       "xcmGeneralMIBGroups": xcmGeneralMIBGroups,
       "xcmGenBaseGroup": xcmGenBaseGroup,
       "xcmGenCurrentLocalizationGroup": xcmGenCurrentLocalizationGroup,
       "xcmGenLocalizationGroup": xcmGenLocalizationGroup,
       "xcmGenCodeIndexedStringGroup": xcmGenCodeIndexedStringGroup,
       "xcmGenCodedCharSetGroup": xcmGenCodedCharSetGroup,
       "xcmGenFixedLocalizationGroup": xcmGenFixedLocalizationGroup,
       "xcmGenLockGroup": xcmGenLockGroup,
       "xcmGenReconfGroup": xcmGenReconfGroup,
       "xcmGenOptionGroup": xcmGenOptionGroup,
       "xcmGenClientDataGroup": xcmGenClientDataGroup,
       "xcmGenTrapClientGroup": xcmGenTrapClientGroup,
       "xcmGenTrapViewGroup": xcmGenTrapViewGroup,
       "xcmGenMessageMapGroup": xcmGenMessageMapGroup,
       "xcmGenMessageTextGroup": xcmGenMessageTextGroup,
       "xcmGenNotifyRuleGroup": xcmGenNotifyRuleGroup,
       "xcmGenNotifyDetailGroup": xcmGenNotifyDetailGroup,
       "xcmGeneralMIBCompliance": xcmGeneralMIBCompliance,
       "xcmGenCurrentLocalization": xcmGenCurrentLocalization,
       "xcmGenCurrentLocalizationTable": xcmGenCurrentLocalizationTable,
       "xcmGenCurrentLocalizationEntry": xcmGenCurrentLocalizationEntry,
       "xcmGenCurrentLocalizationIndex": xcmGenCurrentLocalizationIndex,
       "xcmGenCurrLocalizationRowStatus": xcmGenCurrLocalizationRowStatus,
       "xcmGenLocalization": xcmGenLocalization,
       "xcmGenLocalizationTable": xcmGenLocalizationTable,
       "xcmGenLocalizationEntry": xcmGenLocalizationEntry,
       "xcmGenLocalizationIndex": xcmGenLocalizationIndex,
       "xcmGenLocalizationRowStatus": xcmGenLocalizationRowStatus,
       "xcmGenLocalizationASCIIName": xcmGenLocalizationASCIIName,
       "xcmGenLocalizationName": xcmGenLocalizationName,
       "xcmGenLocalizationLanguage": xcmGenLocalizationLanguage,
       "xcmGenLocalizationCountry": xcmGenLocalizationCountry,
       "xcmGenLocalizationCharSet": xcmGenLocalizationCharSet,
       "xcmGenCodeIndexedString": xcmGenCodeIndexedString,
       "xcmGenCodeIndexedStringTable": xcmGenCodeIndexedStringTable,
       "xcmGenCodeIndexedStringEntry": xcmGenCodeIndexedStringEntry,
       "xcmGenCodeIndexedStringIndex": xcmGenCodeIndexedStringIndex,
       "xcmGenCodeIndexedStringCharSet": xcmGenCodeIndexedStringCharSet,
       "xcmGenCodeIndexedStringRowStat": xcmGenCodeIndexedStringRowStat,
       "xcmGenCodeIndexedStringData": xcmGenCodeIndexedStringData,
       "xcmGenCodedCharSet": xcmGenCodedCharSet,
       "xcmGenCodedCharSetTable": xcmGenCodedCharSetTable,
       "xcmGenCodedCharSetEntry": xcmGenCodedCharSetEntry,
       "xcmGenCodedCharSetCharSet": xcmGenCodedCharSetCharSet,
       "xcmGenCodedCharSetRowStatus": xcmGenCodedCharSetRowStatus,
       "xcmGenCodedCharSetASCIIName": xcmGenCodedCharSetASCIIName,
       "xcmGenFixedLocalization": xcmGenFixedLocalization,
       "xcmGenFixedLocalizationTable": xcmGenFixedLocalizationTable,
       "xcmGenFixedLocalizationEntry": xcmGenFixedLocalizationEntry,
       "xcmGenFixedLocalizationIndex": xcmGenFixedLocalizationIndex,
       "xcmGenFixedLocalizationRowStat": xcmGenFixedLocalizationRowStat,
       "xcmGenLock": xcmGenLock,
       "xcmGenLockSimple": xcmGenLockSimple,
       "xcmGenLockSupportMaxTimer": xcmGenLockSupportMaxTimer,
       "xcmGenLockCurrentMaxTimer": xcmGenLockCurrentMaxTimer,
       "xcmGenLockCurrentLockCount": xcmGenLockCurrentLockCount,
       "xcmGenLockHighestLockIndex": xcmGenLockHighestLockIndex,
       "xcmGenLockSupportMaxCount": xcmGenLockSupportMaxCount,
       "xcmGenLockTable": xcmGenLockTable,
       "xcmGenLockEntry": xcmGenLockEntry,
       "xcmGenLockIndex": xcmGenLockIndex,
       "xcmGenLockRowStatus": xcmGenLockRowStatus,
       "xcmGenLockOwnerString": xcmGenLockOwnerString,
       "xcmGenLockOwnerSubtree": xcmGenLockOwnerSubtree,
       "xcmGenLockOwnerTimer": xcmGenLockOwnerTimer,
       "xcmGenReconf": xcmGenReconf,
       "xcmGenReconfSimple": xcmGenReconfSimple,
       "xcmGenReconfActivations": xcmGenReconfActivations,
       "xcmGenReconfEntryCount": xcmGenReconfEntryCount,
       "xcmGenReconfSupportMaxCount": xcmGenReconfSupportMaxCount,
       "xcmGenReconfTable": xcmGenReconfTable,
       "xcmGenReconfEntry": xcmGenReconfEntry,
       "xcmGenReconfIndex": xcmGenReconfIndex,
       "xcmGenReconfRowStatus": xcmGenReconfRowStatus,
       "xcmGenReconfOptionIndex": xcmGenReconfOptionIndex,
       "xcmGenReconfOptionState": xcmGenReconfOptionState,
       "xcmGenReconfErrorIndex": xcmGenReconfErrorIndex,
       "xcmGenReconfErrorStatus": xcmGenReconfErrorStatus,
       "xcmGenOption": xcmGenOption,
       "xcmGenOptionSimple": xcmGenOptionSimple,
       "xcmGenOptionOperation": xcmGenOptionOperation,
       "xcmGenOptionOperationInsert": xcmGenOptionOperationInsert,
       "xcmGenOptionOperationDelete": xcmGenOptionOperationDelete,
       "xcmGenOptionOperationReplace": xcmGenOptionOperationReplace,
       "xcmGenOptionEntryCount": xcmGenOptionEntryCount,
       "xcmGenOptionSupportMaxCount": xcmGenOptionSupportMaxCount,
       "xcmGenOptionTable": xcmGenOptionTable,
       "xcmGenOptionEntry": xcmGenOptionEntry,
       "xcmGenOptionIndex": xcmGenOptionIndex,
       "xcmGenOptionRowStatus": xcmGenOptionRowStatus,
       "xcmGenOptionTypeOID": xcmGenOptionTypeOID,
       "xcmGenOptionValueSyntax": xcmGenOptionValueSyntax,
       "xcmGenOptionValueInteger": xcmGenOptionValueInteger,
       "xcmGenOptionValueOID": xcmGenOptionValueOID,
       "xcmGenOptionValueString": xcmGenOptionValueString,
       "xcmGenOptionValueLocalization": xcmGenOptionValueLocalization,
       "xcmGenOptionValueCodedCharSet": xcmGenOptionValueCodedCharSet,
       "xcmGenOptionNextIndex": xcmGenOptionNextIndex,
       "xcmGenOptionPreviousIndex": xcmGenOptionPreviousIndex,
       "xcmGenOptionFamilyIndex": xcmGenOptionFamilyIndex,
       "xcmGenClientData": xcmGenClientData,
       "xcmGenClientDataSimple": xcmGenClientDataSimple,
       "xcmGenClientDataEntryCount": xcmGenClientDataEntryCount,
       "xcmGenClientDataLastIndex": xcmGenClientDataLastIndex,
       "xcmGenClientDataSupportMaxCount": xcmGenClientDataSupportMaxCount,
       "xcmGenClientDataTable": xcmGenClientDataTable,
       "xcmGenClientDataEntry": xcmGenClientDataEntry,
       "xcmGenClientDataIndex": xcmGenClientDataIndex,
       "xcmGenClientDataRowStatus": xcmGenClientDataRowStatus,
       "xcmGenClientDataRequestDate": xcmGenClientDataRequestDate,
       "xcmGenClientDataRequestID": xcmGenClientDataRequestID,
       "xcmGenClientDataProductID": xcmGenClientDataProductID,
       "xcmGenClientDataLength": xcmGenClientDataLength,
       "xcmGenClientDataString": xcmGenClientDataString,
       "xcmGenTrapClient": xcmGenTrapClient,
       "xcmGenTrapClientSimple": xcmGenTrapClientSimple,
       "xcmGenTrapClientEntryCount": xcmGenTrapClientEntryCount,
       "xcmGenTrapClientSupportMaxCount": xcmGenTrapClientSupportMaxCount,
       "xcmGenTrapClientTable": xcmGenTrapClientTable,
       "xcmGenTrapClientEntry": xcmGenTrapClientEntry,
       "xcmGenTrapClientSNMPDomain": xcmGenTrapClientSNMPDomain,
       "xcmGenTrapClientSNMPAddress": xcmGenTrapClientSNMPAddress,
       "xcmGenTrapClientRowStatus": xcmGenTrapClientRowStatus,
       "xcmGenTrapClientIndex": xcmGenTrapClientIndex,
       "xcmGenTrapClientRowPersistence": xcmGenTrapClientRowPersistence,
       "xcmGenTrapClientSNMPVersion": xcmGenTrapClientSNMPVersion,
       "xcmGenTrapClientSNMPCommunity": xcmGenTrapClientSNMPCommunity,
       "xcmGenTrapView": xcmGenTrapView,
       "xcmGenTrapViewSimple": xcmGenTrapViewSimple,
       "xcmGenTrapViewEntryCount": xcmGenTrapViewEntryCount,
       "xcmGenTrapViewSupportMaxCount": xcmGenTrapViewSupportMaxCount,
       "xcmGenTrapViewTable": xcmGenTrapViewTable,
       "xcmGenTrapViewEntry": xcmGenTrapViewEntry,
       "xcmGenTrapViewObjectSubtree": xcmGenTrapViewObjectSubtree,
       "xcmGenTrapViewRowStatus": xcmGenTrapViewRowStatus,
       "xcmGenTrapViewNotifySeverity": xcmGenTrapViewNotifySeverity,
       "xcmGenTrapViewNotifyTraining": xcmGenTrapViewNotifyTraining,
       "xcmGenMessageMap": xcmGenMessageMap,
       "xcmGenMessageMapTable": xcmGenMessageMapTable,
       "xcmGenMessageMapEntry": xcmGenMessageMapEntry,
       "xcmGenMessageMapStringIndexOID": xcmGenMessageMapStringIndexOID,
       "xcmGenMessageMapStringLabel": xcmGenMessageMapStringLabel,
       "xcmGenMessageText": xcmGenMessageText,
       "xcmGenMessageTextTable": xcmGenMessageTextTable,
       "xcmGenMessageTextEntry": xcmGenMessageTextEntry,
       "xcmGenMessageTextStringIndexOID": xcmGenMessageTextStringIndexOID,
       "xcmGenMessageTextTargetLocale": xcmGenMessageTextTargetLocale,
       "xcmGenMessageTextTargetString": xcmGenMessageTextTargetString,
       "xcmGenNotifyRule": xcmGenNotifyRule,
       "xcmGenNotifyRuleSimple": xcmGenNotifyRuleSimple,
       "xcmGenNotifyRuleEntryCount": xcmGenNotifyRuleEntryCount,
       "xcmGenNotifyRuleSupportMaxCount": xcmGenNotifyRuleSupportMaxCount,
       "xcmGenNotifyRuleTable": xcmGenNotifyRuleTable,
       "xcmGenNotifyRuleEntry": xcmGenNotifyRuleEntry,
       "xcmGenNotifyRuleIndex": xcmGenNotifyRuleIndex,
       "xcmGenNotifyRuleRowStatus": xcmGenNotifyRuleRowStatus,
       "xcmGenNotifyRuleRowPersistence": xcmGenNotifyRuleRowPersistence,
       "xcmGenNotifyRuleRecipientURI": xcmGenNotifyRuleRecipientURI,
       "xcmGenNotifyRuleEventNames": xcmGenNotifyRuleEventNames,
       "xcmGenNotifyRuleEventDelay": xcmGenNotifyRuleEventDelay,
       "xcmGenNotifyRuleSeverityFilter": xcmGenNotifyRuleSeverityFilter,
       "xcmGenNotifyRuleTrainingFilter": xcmGenNotifyRuleTrainingFilter,
       "xcmGenNotifyRuleCharset": xcmGenNotifyRuleCharset,
       "xcmGenNotifyRuleNaturalLanguage": xcmGenNotifyRuleNaturalLanguage,
       "xcmGenNotifyRuleSequenceNumber": xcmGenNotifyRuleSequenceNumber,
       "xcmGenNotifyDetail": xcmGenNotifyDetail,
       "xcmGenNotifyDetailSimple": xcmGenNotifyDetailSimple,
       "xcmGenNotifyDetailEntryCount": xcmGenNotifyDetailEntryCount,
       "xcmGenNotifyDetailSupportMax": xcmGenNotifyDetailSupportMax,
       "xcmGenNotifyDetailTable": xcmGenNotifyDetailTable,
       "xcmGenNotifyDetailEntry": xcmGenNotifyDetailEntry,
       "xcmGenNotifyDetailType": xcmGenNotifyDetailType,
       "xcmGenNotifyDetailIndex": xcmGenNotifyDetailIndex,
       "xcmGenNotifyDetailRowStatus": xcmGenNotifyDetailRowStatus,
       "xcmGenNotifyDetailString": xcmGenNotifyDetailString,
       "xcmHrTC": xcmHrTC,
       "xcmHrDeviceTypes": xcmHrDeviceTypes,
       "xcmHrDevicePrinterHistory": xcmHrDevicePrinterHistory,
       "xcmHrDeviceHostSystem": xcmHrDeviceHostSystem,
       "xcmHrDeviceScanner": xcmHrDeviceScanner,
       "xcmHrDeviceCopier": xcmHrDeviceCopier,
       "xcmHrDeviceFax": xcmHrDeviceFax,
       "xcmHrDeviceMailbox": xcmHrDeviceMailbox,
       "xcmHrDeviceFinisher": xcmHrDeviceFinisher,
       "xcmHrDeviceFeeder": xcmHrDeviceFeeder,
       "xcmHrDeviceSorter": xcmHrDeviceSorter,
       "xcmHrDeviceMailboxSorter": xcmHrDeviceMailboxSorter,
       "xcmHrDevicePrintAppliance": xcmHrDevicePrintAppliance,
       "xcmHrDeviceMarker": xcmHrDeviceMarker,
       "xcmHrDeviceFinisherBFM": xcmHrDeviceFinisherBFM,
       "xcmHrDeviceFinisherMFF": xcmHrDeviceFinisherMFF,
       "xcmHrDeviceFinisherXIM": xcmHrDeviceFinisherXIM,
       "xcmHrDeviceFinisher3rdParty": xcmHrDeviceFinisher3rdParty,
       "xcmHrDevicePaymentInterface": xcmHrDevicePaymentInterface,
       "xcmHrDeviceInterposer": xcmHrDeviceInterposer,
       "xcmHrDeviceInternetFax": xcmHrDeviceInternetFax,
       "xcmHrDeviceServerFax": xcmHrDeviceServerFax,
       "xcmHrDeviceEmbeddedFax": xcmHrDeviceEmbeddedFax,
       "xcmHrDeviceForeignInterface": xcmHrDeviceForeignInterface,
       "xcmHrDeviceSecurityInterface": xcmHrDeviceSecurityInterface,
       "xcmHrDeviceAccountingInterface": xcmHrDeviceAccountingInterface,
       "xcmHrDeviceFeederSFM": xcmHrDeviceFeederSFM,
       "xcmHrDeviceFeederLFF": xcmHrDeviceFeederLFF,
       "xcmHrDeviceScannerADF": xcmHrDeviceScannerADF,
       "xcmHrDeviceScannerPlaten": xcmHrDeviceScannerPlaten,
       "xcmHrDeviceColorScanningCard": xcmHrDeviceColorScanningCard,
       "xcmHrDeviceHostSystemHistory": xcmHrDeviceHostSystemHistory,
       "xcmHrDeviceScannerHistory": xcmHrDeviceScannerHistory,
       "xcmHrDeviceCopierHistory": xcmHrDeviceCopierHistory,
       "xcmHrDeviceFaxHistory": xcmHrDeviceFaxHistory,
       "xcmHrCruXerographicModule": xcmHrCruXerographicModule,
       "xcmHrCruFuserModule": xcmHrCruFuserModule,
       "xcmHrCruTonerBottleModule": xcmHrCruTonerBottleModule,
       "xcmHrCruCollectorBottleModule": xcmHrCruCollectorBottleModule,
       "xcmHrCruTrayFeedHeadModule": xcmHrCruTrayFeedHeadModule,
       "xcmHrCruAdfFeedHeadModule": xcmHrCruAdfFeedHeadModule,
       "xcmHrCruFuserWebModule": xcmHrCruFuserWebModule,
       "xcmHrCruFilterModule": xcmHrCruFilterModule,
       "xcmHrCruCleanerUnitModule": xcmHrCruCleanerUnitModule,
       "xcmHrCruTransferUnitModule": xcmHrCruTransferUnitModule,
       "xcmHrCruTransferRollerModule": xcmHrCruTransferRollerModule,
       "xcmHrCruPFPFeedRollModule": xcmHrCruPFPFeedRollModule,
       "xcmHrCruPFPRetardRollModule": xcmHrCruPFPRetardRollModule,
       "xcmHrDeviceUSBPort": xcmHrDeviceUSBPort,
       "xcmHrDeviceFlashDIMMFileStore": xcmHrDeviceFlashDIMMFileStore,
       "xcmHrDeviceFlashDIMMBootLoader": xcmHrDeviceFlashDIMMBootLoader,
       "xcmHrDeviceFlashDrive": xcmHrDeviceFlashDrive,
       "xcmHrAdminServiceTypes": xcmHrAdminServiceTypes,
       "xcmHrAdminObjectService": xcmHrAdminObjectService,
       "xcmHrAdminServerService": xcmHrAdminServerService,
       "xcmHrAdminDeviceService": xcmHrAdminDeviceService,
       "xcmHrAdminJobService": xcmHrAdminJobService,
       "xcmHrAdminDocService": xcmHrAdminDocService,
       "xcmHrAdminSecurityService": xcmHrAdminSecurityService,
       "xcmHrAdminCommsService": xcmHrAdminCommsService,
       "xcmHrAdminDeviceOperationTypes": xcmHrAdminDeviceOperationTypes,
       "xcmHrAdminDeviceNone": xcmHrAdminDeviceNone,
       "xcmHrAdminDeviceStartup": xcmHrAdminDeviceStartup,
       "xcmHrAdminDeviceResetWarning": xcmHrAdminDeviceResetWarning,
       "xcmHrAdminDeviceTest": xcmHrAdminDeviceTest,
       "xcmHrAdminDeviceShutdown": xcmHrAdminDeviceShutdown,
       "xcmHrAdminDeviceQuiesce": xcmHrAdminDeviceQuiesce,
       "xcmHrAdminDeviceResetCounters": xcmHrAdminDeviceResetCounters,
       "xcmHrAdminDeviceResetWarm": xcmHrAdminDeviceResetWarm,
       "xcmHrAdminDeviceResetCold": xcmHrAdminDeviceResetCold,
       "xcmHrAdminDeviceResetFactory": xcmHrAdminDeviceResetFactory,
       "xcmHrAdminDeviceFlushInput": xcmHrAdminDeviceFlushInput,
       "xcmHrAdminDeviceFlushOutput": xcmHrAdminDeviceFlushOutput,
       "xcmHrAdminDeviceFlushInOut": xcmHrAdminDeviceFlushInOut,
       "xcmHrAdminDeviceManage": xcmHrAdminDeviceManage,
       "xcmHrAdminDeviceRefresh": xcmHrAdminDeviceRefresh,
       "xcmHrAdminDeviceWarmUp": xcmHrAdminDeviceWarmUp,
       "xcmHrAdminDeviceCoolDown": xcmHrAdminDeviceCoolDown,
       "xcmHrAdminDeviceEnergySave": xcmHrAdminDeviceEnergySave,
       "xcmHrAdminDeviceWakeUp": xcmHrAdminDeviceWakeUp,
       "xcmHrAdminDevicePowerToReady": xcmHrAdminDevicePowerToReady,
       "xcmHrAdminDevicePowerToStandby": xcmHrAdminDevicePowerToStandby,
       "xcmHrAdminDevicePowerToSleep": xcmHrAdminDevicePowerToSleep,
       "xCmHrDummy": xCmHrDummy,
       "xCmHrDevCalendarDayOfWeek": xCmHrDevCalendarDayOfWeek,
       "xCmHrDevCalendarTimeOfDay": xCmHrDevCalendarTimeOfDay,
       "xCmHrDevDetailType": xCmHrDevDetailType,
       "xCmHrDevDetailUnitClass": xCmHrDevDetailUnitClass,
       "xCmHrDevInfoRealization": xCmHrDevInfoRealization,
       "xCmHrDevInfoStatus": xCmHrDevInfoStatus,
       "xCmHrDevInfoXStatus": xCmHrDevInfoXStatus,
       "xCmHrDevInfoConditions": xCmHrDevInfoConditions,
       "xCmHrDevInfoXConditions": xCmHrDevInfoXConditions,
       "xCmHrDevMgmtCommandRequest": xCmHrDevMgmtCommandRequest,
       "xCmHrDevMgmtCommandData": xCmHrDevMgmtCommandData,
       "xCmHrDevMgmtCommandDataTag": xCmHrDevMgmtCommandDataTag,
       "xCmHrDevPowerModeType": xCmHrDevPowerModeType,
       "xCmHrDevPowerTimeUnit": xCmHrDevPowerTimeUnit,
       "xCmHrDevTrafficUnit": xCmHrDevTrafficUnit,
       "xCmHrGroupSupport": xCmHrGroupSupport,
       "xCmHrSWRunXStatus": xCmHrSWRunXStatus,
       "xCmHrStorageDetailType": xCmHrStorageDetailType,
       "xCmHrStorageRealization": xCmHrStorageRealization,
       "xCmHrDpaAvailability": xCmHrDpaAvailability,
       "xCmHrDpaConditions": xCmHrDpaConditions,
       "xCmHrDpaJobValidateSupport": xCmHrDpaJobValidateSupport,
       "xCmHrDpaObjectClassSupport": xCmHrDpaObjectClassSupport,
       "xCmHrDpaState": xCmHrDpaState,
       "xCmHrDetailTableEnumTC": xCmHrDetailTableEnumTC,
       "xCmHrSuppliesClassTC": xCmHrSuppliesClassTC,
       "xCmHrConsoleDefaultService": xCmHrConsoleDefaultService,
       "xcmHrMIB": xcmHrMIB,
       "xcmHrMIBConformance": xcmHrMIBConformance,
       "xcmHrMIBGroups": xcmHrMIBGroups,
       "xcmHrDevInfoGroup": xcmHrDevInfoGroup,
       "xcmHrDevHelpGroup": xcmHrDevHelpGroup,
       "xcmHrDevMgmtGroup": xcmHrDevMgmtGroup,
       "xcmHrDevPowerGroup": xcmHrDevPowerGroup,
       "xcmHrDevTrafficGroup": xcmHrDevTrafficGroup,
       "xcmHrSystemFaultGroup": xcmHrSystemFaultGroup,
       "xcmHrGeneralGroup": xcmHrGeneralGroup,
       "xcmHrDevCalendarGroup": xcmHrDevCalendarGroup,
       "xcmHrSWRunGroup": xcmHrSWRunGroup,
       "xcmHrSWInstalledGroup": xcmHrSWInstalledGroup,
       "xcmHrDevDetailGroup": xcmHrDevDetailGroup,
       "xcmHrStorageGroup": xcmHrStorageGroup,
       "xcmHrStorageDetailGroup": xcmHrStorageDetailGroup,
       "xcmHrDevCoverGroup": xcmHrDevCoverGroup,
       "xcmHrDevAlertGroup": xcmHrDevAlertGroup,
       "xcmHrConsoleScreenGroup": xcmHrConsoleScreenGroup,
       "xcmHrConsoleTabGroup": xcmHrConsoleTabGroup,
       "xcmHrSuppliesGroup": xcmHrSuppliesGroup,
       "xcmHrDetailGroup": xcmHrDetailGroup,
       "xcmHrConsoleGroup": xcmHrConsoleGroup,
       "xcmHrMIBCompliance": xcmHrMIBCompliance,
       "xcmHrDevInfo": xcmHrDevInfo,
       "xcmHrDevInfoV1EventOID": xcmHrDevInfoV1EventOID,
       "xcmHrDevInfoV2EventPrefix": xcmHrDevInfoV2EventPrefix,
       "xcmHrDevInfoV2Event": xcmHrDevInfoV2Event,
       "xcmHrDevInfoTable": xcmHrDevInfoTable,
       "xcmHrDevInfoEntry": xcmHrDevInfoEntry,
       "xcmHrDevInfoRowStatus": xcmHrDevInfoRowStatus,
       "xcmHrDevInfoName": xcmHrDevInfoName,
       "xcmHrDevInfoSerialNumber": xcmHrDevInfoSerialNumber,
       "xcmHrDevInfoRealization": xcmHrDevInfoRealization,
       "xcmHrDevInfoXStatus": xcmHrDevInfoXStatus,
       "xcmHrDevInfoConditions": xcmHrDevInfoConditions,
       "xcmHrDevInfoXConditions": xcmHrDevInfoXConditions,
       "xcmHrDevInfoInstallDate": xcmHrDevInfoInstallDate,
       "xcmHrDevInfoResetDate": xcmHrDevInfoResetDate,
       "xcmHrDevInfoNextDeviceIndex": xcmHrDevInfoNextDeviceIndex,
       "xcmHrDevInfoPreviousDeviceIndex": xcmHrDevInfoPreviousDeviceIndex,
       "xcmHrDevInfoPhysicalDeviceIndex": xcmHrDevInfoPhysicalDeviceIndex,
       "xcmHrDevInfoPriority": xcmHrDevInfoPriority,
       "xcmHrDevInfoXeroxAssetTagNumber": xcmHrDevInfoXeroxAssetTagNumber,
       "xcmHrDevInfoCustomerAssetNumber": xcmHrDevInfoCustomerAssetNumber,
       "xcmHrDevInfoPagePackPIN": xcmHrDevInfoPagePackPIN,
       "xcmHrDevInfoPagePackReset": xcmHrDevInfoPagePackReset,
       "xcmHrDevInfoPagePackTimer": xcmHrDevInfoPagePackTimer,
       "xcmHrDevHelp": xcmHrDevHelp,
       "xcmHrDevHelpTable": xcmHrDevHelpTable,
       "xcmHrDevHelpEntry": xcmHrDevHelpEntry,
       "xcmHrDevHelpRowStatus": xcmHrDevHelpRowStatus,
       "xcmHrDevHelpOperatorMessage": xcmHrDevHelpOperatorMessage,
       "xcmHrDevHelpProblemMessage": xcmHrDevHelpProblemMessage,
       "xcmHrDevHelpCommsAddressIndex": xcmHrDevHelpCommsAddressIndex,
       "xcmHrDevMgmt": xcmHrDevMgmt,
       "xcmHrDevMgmtV1EventOID": xcmHrDevMgmtV1EventOID,
       "xcmHrDevMgmtV2EventPrefix": xcmHrDevMgmtV2EventPrefix,
       "xcmHrDevMgmtV2Event": xcmHrDevMgmtV2Event,
       "xcmHrDevMgmtTable": xcmHrDevMgmtTable,
       "xcmHrDevMgmtEntry": xcmHrDevMgmtEntry,
       "xcmHrDevMgmtRowStatus": xcmHrDevMgmtRowStatus,
       "xcmHrDevMgmtCommandRequest": xcmHrDevMgmtCommandRequest,
       "xcmHrDevMgmtCommandData": xcmHrDevMgmtCommandData,
       "xcmHrDevMgmtCommandStatus": xcmHrDevMgmtCommandStatus,
       "xcmHrDevMgmtUserPassword": xcmHrDevMgmtUserPassword,
       "xcmHrDevMgmtOperatorPassword": xcmHrDevMgmtOperatorPassword,
       "xcmHrDevMgmtAdminPassword": xcmHrDevMgmtAdminPassword,
       "xcmHrDevMgmtCommandInProgress": xcmHrDevMgmtCommandInProgress,
       "xcmHrDevMgmtUserName": xcmHrDevMgmtUserName,
       "xcmHrDevMgmtOperatorName": xcmHrDevMgmtOperatorName,
       "xcmHrDevMgmtAdminName": xcmHrDevMgmtAdminName,
       "xcmHrDevMgmtCustomPassword": xcmHrDevMgmtCustomPassword,
       "xcmHrDevPower": xcmHrDevPower,
       "xcmHrDevPowerTable": xcmHrDevPowerTable,
       "xcmHrDevPowerEntry": xcmHrDevPowerEntry,
       "xcmHrDevPowerRowStatus": xcmHrDevPowerRowStatus,
       "xcmHrDevPowerWarmUpSupport": xcmHrDevPowerWarmUpSupport,
       "xcmHrDevPowerCoolDownSupport": xcmHrDevPowerCoolDownSupport,
       "xcmHrDevPowerEnergySaveSupport": xcmHrDevPowerEnergySaveSupport,
       "xcmHrDevPowerTimeUnit": xcmHrDevPowerTimeUnit,
       "xcmHrDevPowerWarmUpDelay": xcmHrDevPowerWarmUpDelay,
       "xcmHrDevPowerWarmUpDuration": xcmHrDevPowerWarmUpDuration,
       "xcmHrDevPowerCoolDownDelay": xcmHrDevPowerCoolDownDelay,
       "xcmHrDevPowerCoolDownDuration": xcmHrDevPowerCoolDownDuration,
       "xcmHrDevPowerEnergySaveDelay": xcmHrDevPowerEnergySaveDelay,
       "xcmHrDevPowerEnergySaveDuration": xcmHrDevPowerEnergySaveDuration,
       "xcmHrDevPowerWakeUpSupport": xcmHrDevPowerWakeUpSupport,
       "xcmHrDevPowerWakeUpDelay": xcmHrDevPowerWakeUpDelay,
       "xcmHrDevPowerWakeUpDuration": xcmHrDevPowerWakeUpDuration,
       "xcmHrDevPowerShutdownDelay": xcmHrDevPowerShutdownDelay,
       "xcmHrDevPowerShutdownDuration": xcmHrDevPowerShutdownDuration,
       "xcmHrDevPowerStartupDelay": xcmHrDevPowerStartupDelay,
       "xcmHrDevPowerStartupDuration": xcmHrDevPowerStartupDuration,
       "xcmHrDevTraffic": xcmHrDevTraffic,
       "xcmHrDevTrafficTable": xcmHrDevTrafficTable,
       "xcmHrDevTrafficEntry": xcmHrDevTrafficEntry,
       "xcmHrDevTrafficRowStatus": xcmHrDevTrafficRowStatus,
       "xcmHrDevTrafficInputSupport": xcmHrDevTrafficInputSupport,
       "xcmHrDevTrafficOutputSupport": xcmHrDevTrafficOutputSupport,
       "xcmHrDevTrafficInputUnit": xcmHrDevTrafficInputUnit,
       "xcmHrDevTrafficOutputUnit": xcmHrDevTrafficOutputUnit,
       "xcmHrDevTrafficInputCount": xcmHrDevTrafficInputCount,
       "xcmHrDevTrafficOutputCount": xcmHrDevTrafficOutputCount,
       "xcmHrDevTrafficInputMaxSize": xcmHrDevTrafficInputMaxSize,
       "xcmHrDevTrafficOutputMaxSize": xcmHrDevTrafficOutputMaxSize,
       "xcmHrDevTrafficInputTimeout": xcmHrDevTrafficInputTimeout,
       "xcmHrDevTrafficOutputTimeout": xcmHrDevTrafficOutputTimeout,
       "xcmHrSystemFault": xcmHrSystemFault,
       "xcmHrSystemFaultTable": xcmHrSystemFaultTable,
       "xcmHrSystemFaultEntry": xcmHrSystemFaultEntry,
       "xcmHrSystemFaultIndex": xcmHrSystemFaultIndex,
       "xcmHrSystemFaultRowStatus": xcmHrSystemFaultRowStatus,
       "xcmHrSystemFaultCode": xcmHrSystemFaultCode,
       "xcmHrSystemFaultString": xcmHrSystemFaultString,
       "xcmHrSystemFaultReferenceOID": xcmHrSystemFaultReferenceOID,
       "xcmHrSystemFaultHrDeviceIndex": xcmHrSystemFaultHrDeviceIndex,
       "xcmHrSystemFaultDate": xcmHrSystemFaultDate,
       "xcmHrGeneral": xcmHrGeneral,
       "xcmHrGeneralTable": xcmHrGeneralTable,
       "xcmHrGeneralEntry": xcmHrGeneralEntry,
       "xcmHrGeneralIndex": xcmHrGeneralIndex,
       "xcmHrGeneralRowStatus": xcmHrGeneralRowStatus,
       "xcmHrGeneralVersionID": xcmHrGeneralVersionID,
       "xcmHrGeneralVersionDate": xcmHrGeneralVersionDate,
       "xcmHrGeneralGroupSupport": xcmHrGeneralGroupSupport,
       "xcmHrGeneralStorageLast": xcmHrGeneralStorageLast,
       "xcmHrGeneralDeviceLast": xcmHrGeneralDeviceLast,
       "xcmHrGeneralFSLast": xcmHrGeneralFSLast,
       "xcmHrGeneralSWRunLast": xcmHrGeneralSWRunLast,
       "xcmHrGeneralSWInstalledLast": xcmHrGeneralSWInstalledLast,
       "xcmHrGeneralSystemFaultLast": xcmHrGeneralSystemFaultLast,
       "xcmHrGeneralCreateSupport": xcmHrGeneralCreateSupport,
       "xcmHrGeneralUpdateSupport": xcmHrGeneralUpdateSupport,
       "xcmHrDevCalendar": xcmHrDevCalendar,
       "xcmHrDevCalendarTable": xcmHrDevCalendarTable,
       "xcmHrDevCalendarEntry": xcmHrDevCalendarEntry,
       "xcmHrDevCalendarDayOfWeek": xcmHrDevCalendarDayOfWeek,
       "xcmHrDevCalendarTimeOfDay": xcmHrDevCalendarTimeOfDay,
       "xcmHrDevCalendarRowStatus": xcmHrDevCalendarRowStatus,
       "xcmHrDevCalendarExplicitDate": xcmHrDevCalendarExplicitDate,
       "xcmHrDevCalendarCommandRequest": xcmHrDevCalendarCommandRequest,
       "xcmHrDevCalendarCommandData": xcmHrDevCalendarCommandData,
       "xcmHrSWRun": xcmHrSWRun,
       "xcmHrSWRunTable": xcmHrSWRunTable,
       "xcmHrSWRunEntry": xcmHrSWRunEntry,
       "xcmHrSWRunRowStatus": xcmHrSWRunRowStatus,
       "xcmHrSWRunAdminName": xcmHrSWRunAdminName,
       "xcmHrSWRunXStatus": xcmHrSWRunXStatus,
       "xcmHrSWRunRowCreateDate": xcmHrSWRunRowCreateDate,
       "xcmHrSWRunPhysicalDeviceIndex": xcmHrSWRunPhysicalDeviceIndex,
       "xcmHrSWRunLogicalDeviceIndex": xcmHrSWRunLogicalDeviceIndex,
       "xcmHrSWRunNextIndex": xcmHrSWRunNextIndex,
       "xcmHrSWRunPreviousIndex": xcmHrSWRunPreviousIndex,
       "xcmHrSWInstalled": xcmHrSWInstalled,
       "xcmHrSWInstalledTable": xcmHrSWInstalledTable,
       "xcmHrSWInstalledEntry": xcmHrSWInstalledEntry,
       "xcmHrSWInstalledRowStatus": xcmHrSWInstalledRowStatus,
       "xcmHrSWInstalledAdminName": xcmHrSWInstalledAdminName,
       "xcmHrSWInstalledXStatus": xcmHrSWInstalledXStatus,
       "xcmHrSWInstalledRowCreateDate": xcmHrSWInstalledRowCreateDate,
       "xcmHrSWInstalledPhysicalIndex": xcmHrSWInstalledPhysicalIndex,
       "xcmHrSWInstalledLogicalIndex": xcmHrSWInstalledLogicalIndex,
       "xcmHrSWInstalledNextIndex": xcmHrSWInstalledNextIndex,
       "xcmHrSWInstalledPreviousIndex": xcmHrSWInstalledPreviousIndex,
       "xcmHrDevDetail": xcmHrDevDetail,
       "xcmHrDevDetailV1EventOID": xcmHrDevDetailV1EventOID,
       "xcmHrDevDetailV2EventPrefix": xcmHrDevDetailV2EventPrefix,
       "xcmHrDevDetailV2Event": xcmHrDevDetailV2Event,
       "xcmHrDevDetailTable": xcmHrDevDetailTable,
       "xcmHrDevDetailEntry": xcmHrDevDetailEntry,
       "xcmHrDevDetailType": xcmHrDevDetailType,
       "xcmHrDevDetailIndex": xcmHrDevDetailIndex,
       "xcmHrDevDetailRowStatus": xcmHrDevDetailRowStatus,
       "xcmHrDevDetailUnitClass": xcmHrDevDetailUnitClass,
       "xcmHrDevDetailUnit": xcmHrDevDetailUnit,
       "xcmHrDevDetailValueInteger": xcmHrDevDetailValueInteger,
       "xcmHrDevDetailValueOID": xcmHrDevDetailValueOID,
       "xcmHrDevDetailValueString": xcmHrDevDetailValueString,
       "xcmHrDevDetailDescription": xcmHrDevDetailDescription,
       "xcmHrStorage": xcmHrStorage,
       "xcmHrStorageTable": xcmHrStorageTable,
       "xcmHrStorageEntry": xcmHrStorageEntry,
       "xcmHrStorageRowStatus": xcmHrStorageRowStatus,
       "xcmHrStorageRealization": xcmHrStorageRealization,
       "xcmHrStorageStatus": xcmHrStorageStatus,
       "xcmHrStorageProductDeviceIndex": xcmHrStorageProductDeviceIndex,
       "xcmHrStoragePlatformDeviceIndex": xcmHrStoragePlatformDeviceIndex,
       "xcmHrStoragePagingDeviceIndex": xcmHrStoragePagingDeviceIndex,
       "xcmHrStorageMatchingDeviceIndex": xcmHrStorageMatchingDeviceIndex,
       "xcmHrStorageSWRunIndex": xcmHrStorageSWRunIndex,
       "xcmHrStorageSWInstalledIndex": xcmHrStorageSWInstalledIndex,
       "xcmHrStorageNextIndex": xcmHrStorageNextIndex,
       "xcmHrStoragePreviousIndex": xcmHrStoragePreviousIndex,
       "xcmHrStoragePhysicalIndex": xcmHrStoragePhysicalIndex,
       "xcmHrStorageDetail": xcmHrStorageDetail,
       "xcmHrStorageDetailTable": xcmHrStorageDetailTable,
       "xcmHrStorageDetailEntry": xcmHrStorageDetailEntry,
       "xcmHrStorageDetailType": xcmHrStorageDetailType,
       "xcmHrStorageDetailIndex": xcmHrStorageDetailIndex,
       "xcmHrStorageDetailRowStatus": xcmHrStorageDetailRowStatus,
       "xcmHrStorageDetailUnitClass": xcmHrStorageDetailUnitClass,
       "xcmHrStorageDetailUnit": xcmHrStorageDetailUnit,
       "xcmHrStorageDetailValueInteger": xcmHrStorageDetailValueInteger,
       "xcmHrStorageDetailValueOID": xcmHrStorageDetailValueOID,
       "xcmHrStorageDetailValueString": xcmHrStorageDetailValueString,
       "xcmHrDevCover": xcmHrDevCover,
       "xcmHrDevCoverTable": xcmHrDevCoverTable,
       "xcmHrDevCoverEntry": xcmHrDevCoverEntry,
       "xcmHrDevCoverIndex": xcmHrDevCoverIndex,
       "xcmHrDevCoverRowStatus": xcmHrDevCoverRowStatus,
       "xcmHrDevCoverName": xcmHrDevCoverName,
       "xcmHrDevCoverDescription": xcmHrDevCoverDescription,
       "xcmHrDevCoverTypeCover": xcmHrDevCoverTypeCover,
       "xcmHrDevCoverStatusOpen": xcmHrDevCoverStatusOpen,
       "xcmHrDevAlert": xcmHrDevAlert,
       "xcmHrDevAlertV1EventOID": xcmHrDevAlertV1EventOID,
       "xcmHrDevAlertV2EventPrefix": xcmHrDevAlertV2EventPrefix,
       "xcmHrDevAlertV2Event": xcmHrDevAlertV2Event,
       "xcmHrDevAlertTable": xcmHrDevAlertTable,
       "xcmHrDevAlertEntry": xcmHrDevAlertEntry,
       "xcmHrDevAlertIndex": xcmHrDevAlertIndex,
       "xcmHrDevAlertRowStatus": xcmHrDevAlertRowStatus,
       "xcmHrDevAlertSeverityLevel": xcmHrDevAlertSeverityLevel,
       "xcmHrDevAlertTrainingLevel": xcmHrDevAlertTrainingLevel,
       "xcmHrDevAlertCodeInteger": xcmHrDevAlertCodeInteger,
       "xcmHrDevAlertCodeString": xcmHrDevAlertCodeString,
       "xcmHrDevAlertDescription": xcmHrDevAlertDescription,
       "xcmHrDevAlertReferenceOID": xcmHrDevAlertReferenceOID,
       "xcmHrDevAlertDateAndTime": xcmHrDevAlertDateAndTime,
       "xcmHrDevAlertTitle": xcmHrDevAlertTitle,
       "xcmHrDevAlertHelpReference": xcmHrDevAlertHelpReference,
       "xcmHrDevAlertReferenceIndex": xcmHrDevAlertReferenceIndex,
       "xcmHrDevAlertReferenceLocation": xcmHrDevAlertReferenceLocation,
       "xcmHrDevAlertDevAlertIndex": xcmHrDevAlertDevAlertIndex,
       "xcmHrDevAlertPriority": xcmHrDevAlertPriority,
       "xcmHrDevAlertLastAlertIndex": xcmHrDevAlertLastAlertIndex,
       "xcmHrDevAlertLastCriticalAlertIndex": xcmHrDevAlertLastCriticalAlertIndex,
       "xcmHrConsoleScreen": xcmHrConsoleScreen,
       "xcmHrConsoleScreenTable": xcmHrConsoleScreenTable,
       "xcmHrConsoleScreenEntry": xcmHrConsoleScreenEntry,
       "xcmHrConsoleScreenIndex": xcmHrConsoleScreenIndex,
       "xcmHrConsoleScreenName": xcmHrConsoleScreenName,
       "xcmHrConsoleScreenDescription": xcmHrConsoleScreenDescription,
       "xcmHrConsoleScreenParentIndex": xcmHrConsoleScreenParentIndex,
       "xcmHrConsoleScreenPriority": xcmHrConsoleScreenPriority,
       "xcmHrConsoleScreenTabCount": xcmHrConsoleScreenTabCount,
       "xcmHrConsoleTab": xcmHrConsoleTab,
       "xcmHrConsoleTabTable": xcmHrConsoleTabTable,
       "xcmHrConsoleTabEntry": xcmHrConsoleTabEntry,
       "xcmHrConsoleTabIndex": xcmHrConsoleTabIndex,
       "xcmHrConsoleTabName": xcmHrConsoleTabName,
       "xcmHrConsoleTabDescription": xcmHrConsoleTabDescription,
       "xcmHrConsoleTabScreenIndex": xcmHrConsoleTabScreenIndex,
       "xcmHrConsoleTabPriority": xcmHrConsoleTabPriority,
       "xcmHrSupplies": xcmHrSupplies,
       "xcmHrSuppliesTable": xcmHrSuppliesTable,
       "xcmHrSuppliesEntry": xcmHrSuppliesEntry,
       "xcmHrSuppliesIndex": xcmHrSuppliesIndex,
       "xcmHrSuppliesReferenceOID": xcmHrSuppliesReferenceOID,
       "xcmHrSuppliesType": xcmHrSuppliesType,
       "xcmHrSuppliesClass": xcmHrSuppliesClass,
       "xcmHrSuppliesDescr": xcmHrSuppliesDescr,
       "xcmHrSuppliesPartNumber": xcmHrSuppliesPartNumber,
       "xcmHrDetailTable": xcmHrDetailTable,
       "xcmHrDetailEntry": xcmHrDetailEntry,
       "xcmHrDetailTableRef": xcmHrDetailTableRef,
       "xcmHrDetailTableIndex": xcmHrDetailTableIndex,
       "xcmHrDetailType": xcmHrDetailType,
       "xcmHrDetailIndex": xcmHrDetailIndex,
       "xcmHrDetailUnitClass": xcmHrDetailUnitClass,
       "xcmHrDetailUnit": xcmHrDetailUnit,
       "xcmHrDetailValueInteger": xcmHrDetailValueInteger,
       "xcmHrDetailValueOID": xcmHrDetailValueOID,
       "xcmHrDetailValueString": xcmHrDetailValueString,
       "xcmHrDetailDescription": xcmHrDetailDescription,
       "xcmHrConsole": xcmHrConsole,
       "xcmHrConsoleTable": xcmHrConsoleTable,
       "xcmHrConsoleEntry": xcmHrConsoleEntry,
       "xcmHrConsoleIndex": xcmHrConsoleIndex,
       "xcmHrConsoleDefaultService": xcmHrConsoleDefaultService,
       "xcmHrConsoleBrightness": xcmHrConsoleBrightness,
       "xcmHrConsoleContrast": xcmHrConsoleContrast,
       "xcmHrConsoleAccessibility": xcmHrConsoleAccessibility,
       "xcmHrConsoleAutoClearTime": xcmHrConsoleAutoClearTime,
       "xcmHrConsoleInsertTimeout": xcmHrConsoleInsertTimeout,
       "xcmHrConsoleTray1Timeout": xcmHrConsoleTray1Timeout,
       "xcmHrConsoleTray2nTimeout": xcmHrConsoleTray2nTimeout,
       "xcmHrConsoleLoadTimeout": xcmHrConsoleLoadTimeout,
       "xcmHrConsoleSoundVolume": xcmHrConsoleSoundVolume,
       "xcmHrConsoleSoundDuration": xcmHrConsoleSoundDuration,
       "xcmHrGenericParamGroup": xcmHrGenericParamGroup,
       "xcmHrGenericParamName": xcmHrGenericParamName,
       "xcmHrGenericParamValue": xcmHrGenericParamValue,
       "xcmPrintTC": xcmPrintTC,
       "xCmPrintTCDummy": xCmPrintTCDummy,
       "xCmPrtTCAuxSheetContent": xCmPrtTCAuxSheetContent,
       "xCmPrtTCXcmPrtAuxSheetType": xCmPrtTCXcmPrtAuxSheetType,
       "xCmPrtTCTCChannelType": xCmPrtTCTCChannelType,
       "xCmPrtTCGroupSupport": xCmPrtTCGroupSupport,
       "xCmPrtTCIETFPrintMIBGroupSupport": xCmPrtTCIETFPrintMIBGroupSupport,
       "xCmPrtTCInterpreterLangFamily": xCmPrtTCInterpreterLangFamily,
       "xCmPrtTCMediaTypeErrorPolicy": xCmPrtTCMediaTypeErrorPolicy,
       "xCmPrtTCMediumClassType": xCmPrtTCMediumClassType,
       "xCmPrtTCMediumSize": xCmPrtTCMediumSize,
       "xCmPrtTCOutputOffsetStackingType": xCmPrtTCOutputOffsetStackingType,
       "xCmPrtOutputStaplePosition": xCmPrtOutputStaplePosition,
       "xCmPrtTCPageSizeErrorPolicy": xCmPrtTCPageSizeErrorPolicy,
       "xCmPrtTCPCLFontSource": xCmPrtTCPCLFontSource,
       "xCmPrtTCPlex": xCmPrtTCPlex,
       "xCmPrtTCPrintQuality": xCmPrtTCPrintQuality,
       "xCmPrtTCPrintScreen": xCmPrtTCPrintScreen,
       "xCmPrtTCTraySwitch": xCmPrtTCTraySwitch,
       "xCmPrtTCGeneralMonoPrintOpt": xCmPrtTCGeneralMonoPrintOpt,
       "xCmPrtOutputPunchPosition": xCmPrtOutputPunchPosition,
       "xCmPrtInputTraysConfiguration": xCmPrtInputTraysConfiguration,
       "xcmPrintMIB": xcmPrintMIB,
       "xcmPrtBase": xcmPrtBase,
       "xcmPrtBaseTable": xcmPrtBaseTable,
       "xcmPrtBaseEntry": xcmPrtBaseEntry,
       "xcmPrtBaseIndex": xcmPrtBaseIndex,
       "xcmPrtBaseRowStatus": xcmPrtBaseRowStatus,
       "xcmPrtBaseGroupSupport": xcmPrtBaseGroupSupport,
       "xcmPrtBaseUpdateSupport": xcmPrtBaseUpdateSupport,
       "xcmPrtBaseCreateSupport": xcmPrtBaseCreateSupport,
       "xcmPrtBaseIETFMIBGroupSupport": xcmPrtBaseIETFMIBGroupSupport,
       "xcmPrtBaseIETFMIBUpdateSupport": xcmPrtBaseIETFMIBUpdateSupport,
       "xcmPrtBaseIETFMIBCreateSupport": xcmPrtBaseIETFMIBCreateSupport,
       "xcmPrtMIBConformance": xcmPrtMIBConformance,
       "xcmPrtMIBCompliance": xcmPrtMIBCompliance,
       "xcmPrtMIBGroups": xcmPrtMIBGroups,
       "xcmPrtBaseGroup": xcmPrtBaseGroup,
       "xcmPrtGeneralGroup": xcmPrtGeneralGroup,
       "xcmPrtDriverOptionsGroup": xcmPrtDriverOptionsGroup,
       "xcmPrtInputGroup": xcmPrtInputGroup,
       "xcmPrtOutputGroup": xcmPrtOutputGroup,
       "xcmPrtChannelGroup": xcmPrtChannelGroup,
       "xcmPrtInterpreterGroup": xcmPrtInterpreterGroup,
       "xcmPrtInputAliasGroup": xcmPrtInputAliasGroup,
       "xcmPrtOutputFinishingGroup": xcmPrtOutputFinishingGroup,
       "xcmPrtGeneralAuxSheetGroup": xcmPrtGeneralAuxSheetGroup,
       "xcmPrtGeneralProdSpecificGroup": xcmPrtGeneralProdSpecificGroup,
       "xcmPrtAuxPackageGroup": xcmPrtAuxPackageGroup,
       "xcmPrtChannelProdSpecificGroup": xcmPrtChannelProdSpecificGroup,
       "xcmPrtInterpProdSpecificGroup": xcmPrtInterpProdSpecificGroup,
       "xcmPrtInterpPCLGroup": xcmPrtInterpPCLGroup,
       "xcmPrtInterpPCLProdSpecificGroup": xcmPrtInterpPCLProdSpecificGroup,
       "xcmPrtMediumTypeSupportedGroup": xcmPrtMediumTypeSupportedGroup,
       "xcmPrtGeneral": xcmPrtGeneral,
       "xcmPrtGeneralTable": xcmPrtGeneralTable,
       "xcmPrtGeneralEntry": xcmPrtGeneralEntry,
       "xcmPrtGeneralRowStatus": xcmPrtGeneralRowStatus,
       "xcmPrtGeneralAuxSheetPackage": xcmPrtGeneralAuxSheetPackage,
       "xcmPrtGeneralManualFeedTimeout": xcmPrtGeneralManualFeedTimeout,
       "xcmPrtGeneralInputAutoSwitch": xcmPrtGeneralInputAutoSwitch,
       "xcmPrtGeneralOutputAutoSwitch": xcmPrtGeneralOutputAutoSwitch,
       "xcmPrtGeneralMediumClassDefault": xcmPrtGeneralMediumClassDefault,
       "xcmPrtGeneralDarknessLevels": xcmPrtGeneralDarknessLevels,
       "xcmPrtGeneralDarknessLevelNorm": xcmPrtGeneralDarknessLevelNorm,
       "xcmPrtGeneralDarknessLevelDflt": xcmPrtGeneralDarknessLevelDflt,
       "xcmPrtGeneralHexDumpEnable": xcmPrtGeneralHexDumpEnable,
       "xcmPrtGeneralStartupPage": xcmPrtGeneralStartupPage,
       "xcmPrtGeneralBannerPage": xcmPrtGeneralBannerPage,
       "xcmPrtGeneralTonerLowStop": xcmPrtGeneralTonerLowStop,
       "xcmPrtGeneralEndBannerPage": xcmPrtGeneralEndBannerPage,
       "xcmPrtGeneralTrayLowWarning": xcmPrtGeneralTrayLowWarning,
       "xcmPrtGeneralScanlineCompaction": xcmPrtGeneralScanlineCompaction,
       "xcmPrtGeneralMonoPrintOptimization": xcmPrtGeneralMonoPrintOptimization,
       "xcmPrtGeneralInstalledFeeder": xcmPrtGeneralInstalledFeeder,
       "xcmPrtGeneralInstalledFinisher": xcmPrtGeneralInstalledFinisher,
       "xcmPrtGeneralInstalledAnalogFax": xcmPrtGeneralInstalledAnalogFax,
       "xcmPrtGeneralConsoleLocalizationV1EventOID": xcmPrtGeneralConsoleLocalizationV1EventOID,
       "xcmPrtGeneralConsoleLocalizationV2EventPrefix": xcmPrtGeneralConsoleLocalizationV2EventPrefix,
       "xcmPrtGeneralConsoleLocalizationV2Event": xcmPrtGeneralConsoleLocalizationV2Event,
       "xcmPrtDriverOptions": xcmPrtDriverOptions,
       "xcmPrtDrvrHwdOptStapler": xcmPrtDrvrHwdOptStapler,
       "xcmPrtDrvrHwdOptDuplexUnit": xcmPrtDrvrHwdOptDuplexUnit,
       "xcmPrtDrvrHwdOptPhaserBookletMaker": xcmPrtDrvrHwdOptPhaserBookletMaker,
       "xcmPrtDrvrHwdOptEnvelopeTray": xcmPrtDrvrHwdOptEnvelopeTray,
       "xcmPrtDrvrHwdOptCoilPunchUnit": xcmPrtDrvrHwdOptCoilPunchUnit,
       "xcmPrtDrvrHwdOptFinisherDFA": xcmPrtDrvrHwdOptFinisherDFA,
       "xcmPrtDrvrHwdOptHighCapacityFeeder": xcmPrtDrvrHwdOptHighCapacityFeeder,
       "xcmPrtDriverOutputDeliveryUnit": xcmPrtDriverOutputDeliveryUnit,
       "xcmPrtDrvrHwdOptHardDrive": xcmPrtDrvrHwdOptHardDrive,
       "xcmPrtDrvrHwdOptHolePunchUnit": xcmPrtDrvrHwdOptHolePunchUnit,
       "xcmPrtDriverInputPaperTrays": xcmPrtDriverInputPaperTrays,
       "xcmPrtDrvrHwdOptInserterUnit": xcmPrtDrvrHwdOptInserterUnit,
       "xcmPrtDrvrHwdOptJobAccountingFdi": xcmPrtDrvrHwdOptJobAccountingFdi,
       "xcmPrtDrvrHwdOptFaxOut": xcmPrtDrvrHwdOptFaxOut,
       "xcmPrtDrvrHwdOptMemoryInMBs": xcmPrtDrvrHwdOptMemoryInMBs,
       "xcmPrtDrvrHwdOptOutputBinSide": xcmPrtDrvrHwdOptOutputBinSide,
       "xcmPrtDrvrHwdOptOutputBinCenter": xcmPrtDrvrHwdOptOutputBinCenter,
       "xcmPrtDrvrHwdOptPhaserModule": xcmPrtDrvrHwdOptPhaserModule,
       "xcmPrtDrvrHwdOptPrintEngine": xcmPrtDrvrHwdOptPrintEngine,
       "xcmPrtDrvrHwdOptSquareFoldTrimmer": xcmPrtDrvrHwdOptSquareFoldTrimmer,
       "xcmPrtDrvrHwdOptTriFold": xcmPrtDrvrHwdOptTriFold,
       "xcmPrtDrvrFntCollation": xcmPrtDrvrFntCollation,
       "xcmPrtDrvrFntAsciiJobTicket": xcmPrtDrvrFntAsciiJobTicket,
       "xcmPrtDrvrFntAuthenticationMode": xcmPrtDrvrFntAuthenticationMode,
       "xcmPrtDrvrFntHoldForAuthenMode": xcmPrtDrvrFntHoldForAuthenMode,
       "xcmPrtDrvrFntEnhancedImageQualityMode": xcmPrtDrvrFntEnhancedImageQualityMode,
       "xcmPrtDrvrFntProductivityPack": xcmPrtDrvrFntProductivityPack,
       "xcmPrtDrvrFntJobStorage": xcmPrtDrvrFntJobStorage,
       "xcmPrtDrvrFntJobAccountingSystem": xcmPrtDrvrFntJobAccountingSystem,
       "xcmPrtInput": xcmPrtInput,
       "xcmPrtInputTable": xcmPrtInputTable,
       "xcmPrtInputEntry": xcmPrtInputEntry,
       "xcmPrtInputRowStatus": xcmPrtInputRowStatus,
       "xcmPrtInputNextPrtInputIndex": xcmPrtInputNextPrtInputIndex,
       "xcmPrtInputUseCustomSize": xcmPrtInputUseCustomSize,
       "xcmPrtInputCustDimFeedDirDecl": xcmPrtInputCustDimFeedDirDecl,
       "xcmPrtInputCustDimXFeedDirDecl": xcmPrtInputCustDimXFeedDirDecl,
       "xcmPrtInputTrayPriority": xcmPrtInputTrayPriority,
       "xcmPrtInputTrayTable": xcmPrtInputTrayTable,
       "xcmPrtInputTrayEntry": xcmPrtInputTrayEntry,
       "xcmPrtInputTraysRowStatus": xcmPrtInputTraysRowStatus,
       "xcmPrtInputTraysInstalled": xcmPrtInputTraysInstalled,
       "xcmPrtInputTraysConfiguration": xcmPrtInputTraysConfiguration,
       "xcmPrtOutput": xcmPrtOutput,
       "xcmPrtOutputTable": xcmPrtOutputTable,
       "xcmPrtOutputEntry": xcmPrtOutputEntry,
       "xcmPrtOutputRowStatus": xcmPrtOutputRowStatus,
       "xcmPrtOutputNextIndex": xcmPrtOutputNextIndex,
       "xcmPrtOutputPassword": xcmPrtOutputPassword,
       "xcmPrtOutputOffsetStackingType": xcmPrtOutputOffsetStackingType,
       "xcmPrtOutputTrayTimeoutSupport": xcmPrtOutputTrayTimeoutSupport,
       "xcmPrtOutputTrayTimeout": xcmPrtOutputTrayTimeout,
       "xcmPrtOutputStaple": xcmPrtOutputStaple,
       "xcmPrtOutputStaplePosSupported": xcmPrtOutputStaplePosSupported,
       "xcmPrtOutputStapleDefault": xcmPrtOutputStapleDefault,
       "xcmPrtOutputStaplePosDefault": xcmPrtOutputStaplePosDefault,
       "xcmPrtOutputPunch": xcmPrtOutputPunch,
       "xcmPrtOutputPunchDefault": xcmPrtOutputPunchDefault,
       "xcmPrtOutputPunchPosSupported": xcmPrtOutputPunchPosSupported,
       "xcmPrtOutputBookletFoldStaple": xcmPrtOutputBookletFoldStaple,
       "xcmPrtChannel": xcmPrtChannel,
       "xcmPrtChannelTable": xcmPrtChannelTable,
       "xcmPrtChannelEntry": xcmPrtChannelEntry,
       "xcmPrtChannelRowStatus": xcmPrtChannelRowStatus,
       "xcmPrtChannelEOJTimeout": xcmPrtChannelEOJTimeout,
       "xcmPrtChannelAuxSheetPackage": xcmPrtChannelAuxSheetPackage,
       "xcmPrtChannelSpoolingEnable": xcmPrtChannelSpoolingEnable,
       "xcmPrtChannelLangSensing": xcmPrtChannelLangSensing,
       "xcmPrtChannelBinaryPostScript": xcmPrtChannelBinaryPostScript,
       "xcmPrtChannelAutoJobEnd": xcmPrtChannelAutoJobEnd,
       "xcmPrtChannelBinaryPostScriptZ": xcmPrtChannelBinaryPostScriptZ,
       "xcmPrtInterpreter": xcmPrtInterpreter,
       "xcmPrtInterpreterTable": xcmPrtInterpreterTable,
       "xcmPrtInterpreterEntry": xcmPrtInterpreterEntry,
       "xcmPrtInterpRowStatus": xcmPrtInterpRowStatus,
       "xcmPrtInterpAuxSheetPackage": xcmPrtInterpAuxSheetPackage,
       "xcmPrtInterpContextSaving": xcmPrtInterpContextSaving,
       "xcmPrtInterpEdgeEnhancement": xcmPrtInterpEdgeEnhancement,
       "xcmPrtInterpFontIndexDefault": xcmPrtInterpFontIndexDefault,
       "xcmPrtInterpGrayLevels": xcmPrtInterpGrayLevels,
       "xcmPrtInterpGrayLevelDefault": xcmPrtInterpGrayLevelDefault,
       "xcmPrtInterpJamRecovery": xcmPrtInterpJamRecovery,
       "xcmPrtInterpJobCopiesDefault": xcmPrtInterpJobCopiesDefault,
       "xcmPrtInterpLineWrap": xcmPrtInterpLineWrap,
       "xcmPrtInterpMediumSizeDefault": xcmPrtInterpMediumSizeDefault,
       "xcmPrtInterpPageProtect": xcmPrtInterpPageProtect,
       "xcmPrtInterpPageProtectSize": xcmPrtInterpPageProtectSize,
       "xcmPrtInterpPageSizeErrorPolicy": xcmPrtInterpPageSizeErrorPolicy,
       "xcmPrtInterpPlexSupported": xcmPrtInterpPlexSupported,
       "xcmPrtInterpPlexDefault": xcmPrtInterpPlexDefault,
       "xcmPrtInterpPrintEdgeToEdge": xcmPrtInterpPrintEdgeToEdge,
       "xcmPrtInterpPrintQuality": xcmPrtInterpPrintQuality,
       "xcmPrtInterpPrtInputIndexDflt": xcmPrtInterpPrtInputIndexDflt,
       "xcmPrtInterpPrtOutputIndexDflt": xcmPrtInterpPrtOutputIndexDflt,
       "xcmPrtInterpResFeedDirDefault": xcmPrtInterpResFeedDirDefault,
       "xcmPrtInterpResXFeedDirDefault": xcmPrtInterpResXFeedDirDefault,
       "xcmPrtInterpResIPResIndex": xcmPrtInterpResIPResIndex,
       "xcmPrtInterpResIPResIndexDflt": xcmPrtInterpResIPResIndexDflt,
       "xcmPrtInterpTextFormLength": xcmPrtInterpTextFormLength,
       "xcmPrtInterpTimeoutJob": xcmPrtInterpTimeoutJob,
       "xcmPrtInterpTimeoutPage": xcmPrtInterpTimeoutPage,
       "xcmPrtInterpInputAliasIndexDflt": xcmPrtInterpInputAliasIndexDflt,
       "xcmPrtInterpTraySwitch": xcmPrtInterpTraySwitch,
       "xcmPrtInterpMediumTypeDefault": xcmPrtInterpMediumTypeDefault,
       "xcmPrtInterpMediaTypeErrPolicy": xcmPrtInterpMediaTypeErrPolicy,
       "xcmPrtInterpErrorPolicyTimeout": xcmPrtInterpErrorPolicyTimeout,
       "xcmPrtInterpLineTerm": xcmPrtInterpLineTerm,
       "xcmPrtInterpEnhancedResolution": xcmPrtInterpEnhancedResolution,
       "xcmPrtInterpAutoContinue": xcmPrtInterpAutoContinue,
       "xcmPrtInterpEnvFeederSize": xcmPrtInterpEnvFeederSize,
       "xcmPrtInterpManualFeedPgSize": xcmPrtInterpManualFeedPgSize,
       "xcmPrtInterpOffsetStackingType": xcmPrtInterpOffsetStackingType,
       "xcmPrtInterpProcessBarcodes": xcmPrtInterpProcessBarcodes,
       "xcmPrtInputAlias": xcmPrtInputAlias,
       "xcmPrtInputAliasTable": xcmPrtInputAliasTable,
       "xcmPrtInputAliasEntry": xcmPrtInputAliasEntry,
       "xcmPrtInputAliasIndex": xcmPrtInputAliasIndex,
       "xcmPrtInputAliasRowStatus": xcmPrtInputAliasRowStatus,
       "xcmPrtInputAliasName": xcmPrtInputAliasName,
       "xcmPrtInputAliasSwitchProgram": xcmPrtInputAliasSwitchProgram,
       "xcmPrtAuxSheet": xcmPrtAuxSheet,
       "xcmPrtAuxPackage": xcmPrtAuxPackage,
       "xcmPrtAuxPackageTable": xcmPrtAuxPackageTable,
       "xcmPrtAuxPackageEntry": xcmPrtAuxPackageEntry,
       "xcmPrtAuxPackageIndex": xcmPrtAuxPackageIndex,
       "xcmPrtAuxPackageRowStatus": xcmPrtAuxPackageRowStatus,
       "xcmPrtAuxPackageType": xcmPrtAuxPackageType,
       "xcmPrtAuxPackageContent": xcmPrtAuxPackageContent,
       "xcmPrtAuxPackagePrtInputIndex": xcmPrtAuxPackagePrtInputIndex,
       "xcmPrtAuxPackageNext": xcmPrtAuxPackageNext,
       "xcmPrtInterpPCL": xcmPrtInterpPCL,
       "xcmPrtInterpPCLTable": xcmPrtInterpPCLTable,
       "xcmPrtInterpPCLEntry": xcmPrtInterpPCLEntry,
       "xcmPrtInterpPCLRowStatus": xcmPrtInterpPCLRowStatus,
       "xcmPrtInterpPCLFontSourceDflt": xcmPrtInterpPCLFontSourceDflt,
       "xcmPrtInterpPCLFontNumberDflt": xcmPrtInterpPCLFontNumberDflt,
       "xcmPrtInterpPCLPitchNumerator": xcmPrtInterpPCLPitchNumerator,
       "xcmPrtInterpPCLPitchDenominator": xcmPrtInterpPCLPitchDenominator,
       "xcmPrtInterpPCLPtSizeNumerator": xcmPrtInterpPCLPtSizeNumerator,
       "xcmPrtInterpPCLPtSizeDenominatr": xcmPrtInterpPCLPtSizeDenominatr,
       "xcmPrtInterpPCLPrintScreen": xcmPrtInterpPCLPrintScreen,
       "xcmPrtMediumTypeSupported": xcmPrtMediumTypeSupported,
       "xcmPrtMedmTypeSupTable": xcmPrtMedmTypeSupTable,
       "xcmPrtMedmTypeSupEntry": xcmPrtMedmTypeSupEntry,
       "xcmPrtMedmTypeSupIndex": xcmPrtMedmTypeSupIndex,
       "xcmPrtMedmTypeSupRowStatus": xcmPrtMedmTypeSupRowStatus,
       "xcmPrtMedmTypeSupRowPersistence": xcmPrtMedmTypeSupRowPersistence,
       "xcmPrtMedmTypeSupName": xcmPrtMedmTypeSupName,
       "xcmPrtMedmTypeSupFuserTemp": xcmPrtMedmTypeSupFuserTemp,
       "xcmPrtMedmTypeSupPaperType": xcmPrtMedmTypeSupPaperType,
       "xcmPrtMedmTypeSupPDLString": xcmPrtMedmTypeSupPDLString,
       "xcmPrtMedmTypeSupFuserHide": xcmPrtMedmTypeSupFuserHide,
       "xcmRsrcTC": xcmRsrcTC,
       "xCmRsrcDummy": xCmRsrcDummy,
       "xCmRsrcGroupSupport": xCmRsrcGroupSupport,
       "xCmRsrcType": xCmRsrcType,
       "xCmRsrcPersistence": xCmRsrcPersistence,
       "xCmFontType": xCmFontType,
       "xCmFontSpacing": xCmFontSpacing,
       "xCmFontPCLStyle": xCmFontPCLStyle,
       "xCmFontPCLStrokeWeight": xCmFontPCLStrokeWeight,
       "xcmRsrcMIB": xcmRsrcMIB,
       "xcmRsrcGeneral": xcmRsrcGeneral,
       "xcmRsrcGeneralTable": xcmRsrcGeneralTable,
       "xcmRsrcGeneralEntry": xcmRsrcGeneralEntry,
       "xcmRsrcGeneralIndex": xcmRsrcGeneralIndex,
       "xcmRsrcGeneralRowStatus": xcmRsrcGeneralRowStatus,
       "xcmRsrcGeneralGroupSupport": xcmRsrcGeneralGroupSupport,
       "xcmRsrcGeneralCreateSupport": xcmRsrcGeneralCreateSupport,
       "xcmRsrcGeneralUpdateSupport": xcmRsrcGeneralUpdateSupport,
       "xcmRsrcGeneralRsrcTypeAccept": xcmRsrcGeneralRsrcTypeAccept,
       "xcmRsrcGeneralFontTypeAccept": xcmRsrcGeneralFontTypeAccept,
       "xcmRsrcGeneralRsrcTypeSupport": xcmRsrcGeneralRsrcTypeSupport,
       "xcmRsrcGeneralFontTypeSupport": xcmRsrcGeneralFontTypeSupport,
       "xcmRsrcMIBConformance": xcmRsrcMIBConformance,
       "xcmRsrcMIBCompliance": xcmRsrcMIBCompliance,
       "xcmRsrcMIBGroups": xcmRsrcMIBGroups,
       "xcmRsrcGeneralGroup": xcmRsrcGeneralGroup,
       "xcmRsrcInfoGroup": xcmRsrcInfoGroup,
       "xcmFontInfoGroup": xcmFontInfoGroup,
       "xcmFontPCLGroup": xcmFontPCLGroup,
       "xcmRsrcInfo": xcmRsrcInfo,
       "xcmRsrcTable": xcmRsrcTable,
       "xcmRsrcEntry": xcmRsrcEntry,
       "xcmRsrcIndex": xcmRsrcIndex,
       "xcmRsrcRowStatus": xcmRsrcRowStatus,
       "xcmRsrcType": xcmRsrcType,
       "xcmRsrcInterpreterLangFamily": xcmRsrcInterpreterLangFamily,
       "xcmRsrcName": xcmRsrcName,
       "xcmRsrcDescription": xcmRsrcDescription,
       "xcmRsrcCopyright": xcmRsrcCopyright,
       "xcmRsrcPersistence": xcmRsrcPersistence,
       "xcmRsrcHrStorageIndex": xcmRsrcHrStorageIndex,
       "xcmRsrcSizeHigh": xcmRsrcSizeHigh,
       "xcmRsrcSizeLow": xcmRsrcSizeLow,
       "xcmRsrcID": xcmRsrcID,
       "xcmRsrcVersion": xcmRsrcVersion,
       "xcmRsrcV1EventOID": xcmRsrcV1EventOID,
       "xcmRsrcV2EventPrefix": xcmRsrcV2EventPrefix,
       "xcmRsrcV2Event": xcmRsrcV2Event,
       "xcmFontInfo": xcmFontInfo,
       "xcmFontTable": xcmFontTable,
       "xcmFontEntry": xcmFontEntry,
       "xcmFontRowStatus": xcmFontRowStatus,
       "xcmFontType": xcmFontType,
       "xcmFontPointsMinNumerator": xcmFontPointsMinNumerator,
       "xcmFontPointsMaxNumerator": xcmFontPointsMaxNumerator,
       "xcmFontPointsDenominator": xcmFontPointsDenominator,
       "xcmFontSpacing": xcmFontSpacing,
       "xcmFontCharSet": xcmFontCharSet,
       "xcmFontPCLInfo": xcmFontPCLInfo,
       "xcmFontPCLTable": xcmFontPCLTable,
       "xcmFontPCLEntry": xcmFontPCLEntry,
       "xcmFontPCLRowStatus": xcmFontPCLRowStatus,
       "xcmFontPCLTypefaceValue": xcmFontPCLTypefaceValue,
       "xcmFontPCLSymbolSetValue": xcmFontPCLSymbolSetValue,
       "xcmFontPCLStyle": xcmFontPCLStyle,
       "xcmFontPCLPitchMinNumerator": xcmFontPCLPitchMinNumerator,
       "xcmFontPCLPitchMaxNumerator": xcmFontPCLPitchMaxNumerator,
       "xcmFontPCLPitchDenominator": xcmFontPCLPitchDenominator,
       "xcmFontPCLStrokeWeight": xcmFontPCLStrokeWeight,
       "xcmJobMonTC": xcmJobMonTC,
       "xcmJobServiceTypesOID": xcmJobServiceTypesOID,
       "xcmJobServiceScanToFileOID": xcmJobServiceScanToFileOID,
       "xcmJobServiceScanToPrintOID": xcmJobServiceScanToPrintOID,
       "xcmJobServiceScanToFaxOID": xcmJobServiceScanToFaxOID,
       "xcmJobServiceScanToMailListOID": xcmJobServiceScanToMailListOID,
       "xcmJobServiceFaxToFileOID": xcmJobServiceFaxToFileOID,
       "xcmJobServiceFaxToPrintOID": xcmJobServiceFaxToPrintOID,
       "xcmJobServiceFaxToMailListOID": xcmJobServiceFaxToMailListOID,
       "xcmJobServicePrintOID": xcmJobServicePrintOID,
       "xcmJobServiceFileToFaxOID": xcmJobServiceFileToFaxOID,
       "xcmJobServiceFileToMailListOID": xcmJobServiceFileToMailListOID,
       "xcmJobServiceCopyOID": xcmJobServiceCopyOID,
       "xcmJobServiceFileToFileOID": xcmJobServiceFileToFileOID,
       "xCmJobMonTCDummy": xCmJobMonTCDummy,
       "xCmJobMonTCJobServiceTypeOID": xCmJobMonTCJobServiceTypeOID,
       "xCmJobMonTCJobState": xCmJobMonTCJobState,
       "xCmJobMonTCJobStateReasons": xCmJobMonTCJobStateReasons,
       "xCmJobMonTCJobXStateReasons": xCmJobMonTCJobXStateReasons,
       "xCmJobMonTCJobX2StateReasons": xCmJobMonTCJobX2StateReasons,
       "xCmJobMonTCDocType": xCmJobMonTCDocType,
       "xCmJobMonTCDocFileNameType": xCmJobMonTCDocFileNameType,
       "xCmJobMonTCDocState": xCmJobMonTCDocState,
       "xCmJobMonTCDocOutputMethod": xCmJobMonTCDocOutputMethod,
       "xCmJobMonTCGroupSupport": xCmJobMonTCGroupSupport,
       "xCmJobMonTCImpsCountType": xCmJobMonTCImpsCountType,
       "xCmJobMonTCMediumType": xCmJobMonTCMediumType,
       "xcmJobMonMIB": xcmJobMonMIB,
       "xcmJobMonBase": xcmJobMonBase,
       "xcmJobMonBaseTable": xcmJobMonBaseTable,
       "xcmJobMonBaseEntry": xcmJobMonBaseEntry,
       "xcmJobMonBaseIndex": xcmJobMonBaseIndex,
       "xcmJobMonBaseRowStatus": xcmJobMonBaseRowStatus,
       "xcmJobMonBaseVersionID": xcmJobMonBaseVersionID,
       "xcmJobMonBaseVersionDate": xcmJobMonBaseVersionDate,
       "xcmJobMonBaseGroupSupport": xcmJobMonBaseGroupSupport,
       "xcmJobMonBaseCreateSupport": xcmJobMonBaseCreateSupport,
       "xcmJobMonBaseUpdateSupport": xcmJobMonBaseUpdateSupport,
       "xcmJobMonMIBConformance": xcmJobMonMIBConformance,
       "xcmJobMonCompliance": xcmJobMonCompliance,
       "xcmJobMonMIBGroups": xcmJobMonMIBGroups,
       "xcmJMBaseGroup": xcmJMBaseGroup,
       "xcmJMJobGenBasicGroup": xcmJMJobGenBasicGroup,
       "xcmJMDevicesAssignedGroup": xcmJMDevicesAssignedGroup,
       "xcmJMClientIdMapGroup": xcmJMClientIdMapGroup,
       "xcmJMJobGenExtGroup": xcmJMJobGenExtGroup,
       "xcmJMDocGenBasicGroup": xcmJMDocGenBasicGroup,
       "xcmJMDocPrintExtGroup": xcmJMDocPrintExtGroup,
       "xcmJMJobGenSpoolingBasicGroup": xcmJMJobGenSpoolingBasicGroup,
       "xcmJMJobGenSpoolingExtGroup": xcmJMJobGenSpoolingExtGroup,
       "xcmJMJobGenAccountingBasicGroup": xcmJMJobGenAccountingBasicGroup,
       "xcmJMMediaConsumedGroup": xcmJMMediaConsumedGroup,
       "xcmJMColorImpsConsumedGroup": xcmJMColorImpsConsumedGroup,
       "xcmJMJobImpsByMediumSizeGroup": xcmJMJobImpsByMediumSizeGroup,
       "xcmJobGenBasic": xcmJobGenBasic,
       "xcmJobGenBasicTable": xcmJobGenBasicTable,
       "xcmJobGenBasicEntry": xcmJobGenBasicEntry,
       "xcmJobIdentifierOnSystem": xcmJobIdentifierOnSystem,
       "xcmJobIdentifierUpstream": xcmJobIdentifierUpstream,
       "xcmJobClientId": xcmJobClientId,
       "xcmJobServiceType": xcmJobServiceType,
       "xcmJobName": xcmJobName,
       "xcmJobOwner": xcmJobOwner,
       "xcmJobSourceChannelType": xcmJobSourceChannelType,
       "xcmJobSubmittedLocaleIndex": xcmJobSubmittedLocaleIndex,
       "xcmJobCurrentState": xcmJobCurrentState,
       "xcmJobStateReasons": xcmJobStateReasons,
       "xcmJobXStateReasons": xcmJobXStateReasons,
       "xcmJobX2StateReasons": xcmJobX2StateReasons,
       "xcmDevicesAssigned": xcmDevicesAssigned,
       "xcmDevicesAssignedTable": xcmDevicesAssignedTable,
       "xcmDevicesAssignedEntry": xcmDevicesAssignedEntry,
       "xcmDevicesAssignedHrDeviceIndex": xcmDevicesAssignedHrDeviceIndex,
       "xcmDeviceStateOfDevicesAssigned": xcmDeviceStateOfDevicesAssigned,
       "xcmJobIdentifierDownstream": xcmJobIdentifierDownstream,
       "xcmClientIdMap": xcmClientIdMap,
       "xcmClientIdMapTable": xcmClientIdMapTable,
       "xcmClientIdMapEntry": xcmClientIdMapEntry,
       "xcmClientIdMapHrDeviceIndex": xcmClientIdMapHrDeviceIndex,
       "xcmJobGenExt": xcmJobGenExt,
       "xcmJobGenExtTable": xcmJobGenExtTable,
       "xcmJobGenExtEntry": xcmJobGenExtEntry,
       "xcmJobOriginator": xcmJobOriginator,
       "xcmJobSubmittingApplication": xcmJobSubmittingApplication,
       "xcmJobComment": xcmJobComment,
       "xcmJobCopies": xcmJobCopies,
       "xcmJobCopiesCompleted": xcmJobCopiesCompleted,
       "xcmJobOutputBinIndex": xcmJobOutputBinIndex,
       "xcmJobServiceNameRequested": xcmJobServiceNameRequested,
       "xcmJobPreviousState": xcmJobPreviousState,
       "xcmJobEstimatedCompletionTime": xcmJobEstimatedCompletionTime,
       "xcmJobSubmissionTime": xcmJobSubmissionTime,
       "xcmJobPagesCompleted": xcmJobPagesCompleted,
       "xcmJobOctetsCompletedHigh": xcmJobOctetsCompletedHigh,
       "xcmJobOctetsCompletedLow": xcmJobOctetsCompletedLow,
       "xcmJobErrorCount": xcmJobErrorCount,
       "xcmJobWarningCount": xcmJobWarningCount,
       "xcmJobProcessingTime": xcmJobProcessingTime,
       "xcmJobNumberOfDocuments": xcmJobNumberOfDocuments,
       "xcmJobAuthorizationUserName": xcmJobAuthorizationUserName,
       "xcmDocGenBasic": xcmDocGenBasic,
       "xcmDocGenBasicTable": xcmDocGenBasicTable,
       "xcmDocGenBasicEntry": xcmDocGenBasicEntry,
       "xcmDocSequenceNumber": xcmDocSequenceNumber,
       "xcmDocName": xcmDocName,
       "xcmDocFileName": xcmDocFileName,
       "xcmDocFileNameType": xcmDocFileNameType,
       "xcmDocType": xcmDocType,
       "xcmDocFormat": xcmDocFormat,
       "xcmDocFormatVariants": xcmDocFormatVariants,
       "xcmDocFormatVersion": xcmDocFormatVersion,
       "xcmDocOctetCount": xcmDocOctetCount,
       "xcmDocState": xcmDocState,
       "xcmDocPrintExt": xcmDocPrintExt,
       "xcmDocPrintExtTable": xcmDocPrintExtTable,
       "xcmDocPrintExtEntry": xcmDocPrintExtEntry,
       "xcmDocPrintDefaultMediumName": xcmDocPrintDefaultMediumName,
       "xcmDocPrintDefaultInputIndex": xcmDocPrintDefaultInputIndex,
       "xcmDocPrintFinishing": xcmDocPrintFinishing,
       "xcmDocPrintOutputMethod": xcmDocPrintOutputMethod,
       "xcmDocPrintNumberUp": xcmDocPrintNumberUp,
       "xcmDocPrintSides": xcmDocPrintSides,
       "xcmDocPrintCopyCount": xcmDocPrintCopyCount,
       "xcmDocPrintCopiesCompleted": xcmDocPrintCopiesCompleted,
       "xcmJobGenSpoolingBasic": xcmJobGenSpoolingBasic,
       "xcmJobGenSpoolingBasicTable": xcmJobGenSpoolingBasicTable,
       "xcmJobGenSpoolingBasicEntry": xcmJobGenSpoolingBasicEntry,
       "xcmJobNumberOfJobResultSets": xcmJobNumberOfJobResultSets,
       "xcmJobPriority": xcmJobPriority,
       "xcmJobTotalOctetsHigh": xcmJobTotalOctetsHigh,
       "xcmJobTotalOctetsLow": xcmJobTotalOctetsLow,
       "xcmJobInterveningJobs": xcmJobInterveningJobs,
       "xcmJobGenSpoolingExt": xcmJobGenSpoolingExt,
       "xcmJobGenSpoolingExtTable": xcmJobGenSpoolingExtTable,
       "xcmJobGenSpoolingExtEntry": xcmJobGenSpoolingExtEntry,
       "xcmJobProcessAfter": xcmJobProcessAfter,
       "xcmJobDeadlineTime": xcmJobDeadlineTime,
       "xcmJobDiscardTime": xcmJobDiscardTime,
       "xcmJobRetentionPeriod": xcmJobRetentionPeriod,
       "xcmJobMessageToOperator": xcmJobMessageToOperator,
       "xcmJobMessageFromOperator": xcmJobMessageFromOperator,
       "xcmJobMessageFromAdministrator": xcmJobMessageFromAdministrator,
       "xcmJobPageCount": xcmJobPageCount,
       "xcmJobGenAccountingBasic": xcmJobGenAccountingBasic,
       "xcmJobGenAccountingBasicTable": xcmJobGenAccountingBasicTable,
       "xcmJobGenAccountingBasicEntry": xcmJobGenAccountingBasicEntry,
       "xcmJobAccountingBasicRowStatus": xcmJobAccountingBasicRowStatus,
       "xcmJobAccountingUserName": xcmJobAccountingUserName,
       "xcmJobAccountingInformation": xcmJobAccountingInformation,
       "xcmJobStartedProcessingTime": xcmJobStartedProcessingTime,
       "xcmJobImpressionsCompleted": xcmJobImpressionsCompleted,
       "xcmJobMediaSheetsCompleted": xcmJobMediaSheetsCompleted,
       "xcmJobCompletionTime": xcmJobCompletionTime,
       "xcmJobWorkUnitType": xcmJobWorkUnitType,
       "xcmJobUnitsOfWorkCompleted": xcmJobUnitsOfWorkCompleted,
       "xcmMediaConsumed": xcmMediaConsumed,
       "xcmMediaConsumedTable": xcmMediaConsumedTable,
       "xcmMediaConsumedEntry": xcmMediaConsumedEntry,
       "xcmMediaConsumedIndex": xcmMediaConsumedIndex,
       "xcmMediaConsumedRowStatus": xcmMediaConsumedRowStatus,
       "xcmMediaConsumedType": xcmMediaConsumedType,
       "xcmMediaConsumedName": xcmMediaConsumedName,
       "xcmMediaConsumedSheetCount": xcmMediaConsumedSheetCount,
       "xcmColorImpsConsumed": xcmColorImpsConsumed,
       "xcmColorImpsConsumedTable": xcmColorImpsConsumedTable,
       "xcmColorImpsConsumedEntry": xcmColorImpsConsumedEntry,
       "xcmColorImpsConsumedIndex": xcmColorImpsConsumedIndex,
       "xcmColorImpsConsumedRowStatus": xcmColorImpsConsumedRowStatus,
       "xcmColorImpsConsumedTypeIndex": xcmColorImpsConsumedTypeIndex,
       "xcmColorImpsConsumedCount": xcmColorImpsConsumedCount,
       "xcmJobAlert": xcmJobAlert,
       "xcmJobV1AlertNew": xcmJobV1AlertNew,
       "xcmJobV2AlertPrefixNew": xcmJobV2AlertPrefixNew,
       "xcmJobV2AlertNew": xcmJobV2AlertNew,
       "xcmDocAlert": xcmDocAlert,
       "xcmDocV1AlertNew": xcmDocV1AlertNew,
       "xcmDocV2AlertPrefixNew": xcmDocV2AlertPrefixNew,
       "xcmDocV2AlertNew": xcmDocV2AlertNew,
       "xcmJobImpsByMediumSize": xcmJobImpsByMediumSize,
       "xcmJobImpsByMediumSizeTable": xcmJobImpsByMediumSizeTable,
       "xcmJobImpsByMediumSizeEntry": xcmJobImpsByMediumSizeEntry,
       "xcmJobImpsByMediumSizeIndex": xcmJobImpsByMediumSizeIndex,
       "xcmJobImpsByMediumSizeRowStatus": xcmJobImpsByMediumSizeRowStatus,
       "xcmJobImpsByMediumSizeMediumSize": xcmJobImpsByMediumSizeMediumSize,
       "xcmJobImpsByMediumSizeCountType": xcmJobImpsByMediumSizeCountType,
       "xcmJobImpsByMediumSizeCount": xcmJobImpsByMediumSizeCount,
       "xcmJobImpsByMediumSizeCountQuality": xcmJobImpsByMediumSizeCountQuality,
       "xcmCommsEngineTC": xcmCommsEngineTC,
       "xCmCommsEngineDummy": xCmCommsEngineDummy,
       "xCmCommsMgmtCommandRequest": xCmCommsMgmtCommandRequest,
       "xCmCommsMgmtCommandData": xCmCommsMgmtCommandData,
       "xCmCommsMgmtState": xCmCommsMgmtState,
       "xCmCommsMgmtConditions": xCmCommsMgmtConditions,
       "xCmCommsStackPosition": xCmCommsStackPosition,
       "xCmCommsStackExtPurpose": xCmCommsStackExtPurpose,
       "xCmCommsStackExtRole": xCmCommsStackExtRole,
       "xCmCommsStackExtSuite": xCmCommsStackExtSuite,
       "xCmCommsStackExtSuiteVersion": xCmCommsStackExtSuiteVersion,
       "xCmCommsStackExtLayer": xCmCommsStackExtLayer,
       "xCmCommsStackExtProtocol": xCmCommsStackExtProtocol,
       "xCmCommsAddressExtForm": xCmCommsAddressExtForm,
       "xCmCommsAddressExtScope": xCmCommsAddressExtScope,
       "xCmCommsAddressExtFanout": xCmCommsAddressExtFanout,
       "xCmCommsEngineGroupSupport": xCmCommsEngineGroupSupport,
       "xcmCommsEngineMIB": xcmCommsEngineMIB,
       "xcmCommsEngineMIBConformance": xcmCommsEngineMIBConformance,
       "xcmCommsEngineMIBGroups": xcmCommsEngineMIBGroups,
       "xcmCommsEngineGroup": xcmCommsEngineGroup,
       "xcmCommsEngineExtGroup": xcmCommsEngineExtGroup,
       "xcmCommsStackGroup": xcmCommsStackGroup,
       "xcmCommsStackExtGroup": xcmCommsStackExtGroup,
       "xcmCommsStackXrefGroup": xcmCommsStackXrefGroup,
       "xcmCommsMuxGroup": xcmCommsMuxGroup,
       "xcmCommsMuxExtGroup": xcmCommsMuxExtGroup,
       "xcmCommsAddressGroup": xcmCommsAddressGroup,
       "xcmCommsAddressExtGroup": xcmCommsAddressExtGroup,
       "xcmCommsTrafficGroup": xcmCommsTrafficGroup,
       "xcmCommsAccessGroup": xcmCommsAccessGroup,
       "xcmCommsMgmtGroup": xcmCommsMgmtGroup,
       "xcmCommsEngineMIBCompliance": xcmCommsEngineMIBCompliance,
       "xcmCommsEngineMIBHelpCompliance": xcmCommsEngineMIBHelpCompliance,
       "xcmCommsEngine": xcmCommsEngine,
       "xcmCommsEngineTable": xcmCommsEngineTable,
       "xcmCommsEngineEntry": xcmCommsEngineEntry,
       "xcmCommsEngineRowStatus": xcmCommsEngineRowStatus,
       "xcmCommsEngineName": xcmCommsEngineName,
       "xcmCommsEngineStackLast": xcmCommsEngineStackLast,
       "xcmCommsEngineMuxLast": xcmCommsEngineMuxLast,
       "xcmCommsEngineAddressLast": xcmCommsEngineAddressLast,
       "xcmCommsEngineMgmtLast": xcmCommsEngineMgmtLast,
       "xcmCommsEngineGroupSupport": xcmCommsEngineGroupSupport,
       "xcmCommsEngineCreateSupport": xcmCommsEngineCreateSupport,
       "xcmCommsEngineUpdateSupport": xcmCommsEngineUpdateSupport,
       "xcmCommsEngineExt": xcmCommsEngineExt,
       "xcmCommsEngineExtTable": xcmCommsEngineExtTable,
       "xcmCommsEngineExtEntry": xcmCommsEngineExtEntry,
       "xcmCommsEngineExtRowStatus": xcmCommsEngineExtRowStatus,
       "xcmCommsEngineExtState": xcmCommsEngineExtState,
       "xcmCommsEngineExtConditions": xcmCommsEngineExtConditions,
       "xcmCommsEngineExtVersionID": xcmCommsEngineExtVersionID,
       "xcmCommsEngineExtVersionDate": xcmCommsEngineExtVersionDate,
       "xcmCommsEngineExtMgmtIndex": xcmCommsEngineExtMgmtIndex,
       "xcmCommsEngineExtOwnerOID": xcmCommsEngineExtOwnerOID,
       "xcmCommsStack": xcmCommsStack,
       "xcmCommsStackTable": xcmCommsStackTable,
       "xcmCommsStackEntry": xcmCommsStackEntry,
       "xcmCommsStackIndex": xcmCommsStackIndex,
       "xcmCommsStackRowStatus": xcmCommsStackRowStatus,
       "xcmCommsStackTypeOID": xcmCommsStackTypeOID,
       "xcmCommsStackName": xcmCommsStackName,
       "xcmCommsStackPosition": xcmCommsStackPosition,
       "xcmCommsStackLowerStackIndex": xcmCommsStackLowerStackIndex,
       "xcmCommsStackUpperStackIndex": xcmCommsStackUpperStackIndex,
       "xcmCommsStackAddressIndex": xcmCommsStackAddressIndex,
       "xcmCommsStackOptionIndex": xcmCommsStackOptionIndex,
       "xcmCommsStackLowerMuxIndex": xcmCommsStackLowerMuxIndex,
       "xcmCommsStackUpperMuxIndex": xcmCommsStackUpperMuxIndex,
       "xcmCommsStackExt": xcmCommsStackExt,
       "xcmCommsStackExtTable": xcmCommsStackExtTable,
       "xcmCommsStackExtEntry": xcmCommsStackExtEntry,
       "xcmCommsStackExtRowStatus": xcmCommsStackExtRowStatus,
       "xcmCommsStackExtState": xcmCommsStackExtState,
       "xcmCommsStackExtConditions": xcmCommsStackExtConditions,
       "xcmCommsStackExtPurpose": xcmCommsStackExtPurpose,
       "xcmCommsStackExtRole": xcmCommsStackExtRole,
       "xcmCommsStackExtSuite": xcmCommsStackExtSuite,
       "xcmCommsStackExtSuiteVersion": xcmCommsStackExtSuiteVersion,
       "xcmCommsStackExtLayer": xcmCommsStackExtLayer,
       "xcmCommsStackExtProtocol": xcmCommsStackExtProtocol,
       "xcmCommsStackExtMgmtIndex": xcmCommsStackExtMgmtIndex,
       "xcmCommsStackExtOwnerOID": xcmCommsStackExtOwnerOID,
       "xcmCommsStackXref": xcmCommsStackXref,
       "xcmCommsStackXrefTable": xcmCommsStackXrefTable,
       "xcmCommsStackXrefEntry": xcmCommsStackXrefEntry,
       "xcmCommsStackXrefRowStatus": xcmCommsStackXrefRowStatus,
       "xcmCommsStackXrefLayerMgmtIndex": xcmCommsStackXrefLayerMgmtIndex,
       "xcmCommsStackXrefLayerSecIndex": xcmCommsStackXrefLayerSecIndex,
       "xcmCommsStackXrefLayerIWUIndex": xcmCommsStackXrefLayerIWUIndex,
       "xcmCommsStackXrefHrSWRunIndex": xcmCommsStackXrefHrSWRunIndex,
       "xcmCommsStackXrefHrSWInsIndex": xcmCommsStackXrefHrSWInsIndex,
       "xcmCommsStackXrefIfIndex": xcmCommsStackXrefIfIndex,
       "xcmCommsStackXrefHrCommDevIndex": xcmCommsStackXrefHrCommDevIndex,
       "xcmCommsMux": xcmCommsMux,
       "xcmCommsMuxTable": xcmCommsMuxTable,
       "xcmCommsMuxEntry": xcmCommsMuxEntry,
       "xcmCommsMuxIndex": xcmCommsMuxIndex,
       "xcmCommsMuxRowStatus": xcmCommsMuxRowStatus,
       "xcmCommsMuxNextIndex": xcmCommsMuxNextIndex,
       "xcmCommsMuxPreviousIndex": xcmCommsMuxPreviousIndex,
       "xcmCommsMuxOptionIndex": xcmCommsMuxOptionIndex,
       "xcmCommsMuxBaseStackIndex": xcmCommsMuxBaseStackIndex,
       "xcmCommsMuxAdjacentStackIndex": xcmCommsMuxAdjacentStackIndex,
       "xcmCommsMuxExt": xcmCommsMuxExt,
       "xcmCommsMuxExtTable": xcmCommsMuxExtTable,
       "xcmCommsMuxExtEntry": xcmCommsMuxExtEntry,
       "xcmCommsMuxExtRowStatus": xcmCommsMuxExtRowStatus,
       "xcmCommsMuxExtState": xcmCommsMuxExtState,
       "xcmCommsMuxExtConditions": xcmCommsMuxExtConditions,
       "xcmCommsMuxExtMgmtIndex": xcmCommsMuxExtMgmtIndex,
       "xcmCommsMuxExtAddressIndex": xcmCommsMuxExtAddressIndex,
       "xcmCommsMuxExtOwnerOID": xcmCommsMuxExtOwnerOID,
       "xcmCommsAddress": xcmCommsAddress,
       "xcmCommsAddressTable": xcmCommsAddressTable,
       "xcmCommsAddressEntry": xcmCommsAddressEntry,
       "xcmCommsAddressIndex": xcmCommsAddressIndex,
       "xcmCommsAddressRowStatus": xcmCommsAddressRowStatus,
       "xcmCommsAddressTypeOID": xcmCommsAddressTypeOID,
       "xcmCommsAddressUserRole": xcmCommsAddressUserRole,
       "xcmCommsAddressName": xcmCommsAddressName,
       "xcmCommsAddressCanonical": xcmCommsAddressCanonical,
       "xcmCommsAddressNextIndex": xcmCommsAddressNextIndex,
       "xcmCommsAddressPreviousIndex": xcmCommsAddressPreviousIndex,
       "xcmCommsAddressOptionIndex": xcmCommsAddressOptionIndex,
       "xcmCommsAddressExt": xcmCommsAddressExt,
       "xcmCommsAddressExtTable": xcmCommsAddressExtTable,
       "xcmCommsAddressExtEntry": xcmCommsAddressExtEntry,
       "xcmCommsAddressExtRowStatus": xcmCommsAddressExtRowStatus,
       "xcmCommsAddressExtState": xcmCommsAddressExtState,
       "xcmCommsAddressExtConditions": xcmCommsAddressExtConditions,
       "xcmCommsAddressExtForm": xcmCommsAddressExtForm,
       "xcmCommsAddressExtScope": xcmCommsAddressExtScope,
       "xcmCommsAddressExtFanout": xcmCommsAddressExtFanout,
       "xcmCommsAddressExtMgmtIndex": xcmCommsAddressExtMgmtIndex,
       "xcmCommsAddressExtOwnerOID": xcmCommsAddressExtOwnerOID,
       "xcmCommsTraffic": xcmCommsTraffic,
       "xcmCommsTrafficTable": xcmCommsTrafficTable,
       "xcmCommsTrafficEntry": xcmCommsTrafficEntry,
       "xcmCommsTrafficRowStatus": xcmCommsTrafficRowStatus,
       "xcmCommsTrafficInputUnit": xcmCommsTrafficInputUnit,
       "xcmCommsTrafficOutputUnit": xcmCommsTrafficOutputUnit,
       "xcmCommsTrafficInputCount": xcmCommsTrafficInputCount,
       "xcmCommsTrafficOutputCount": xcmCommsTrafficOutputCount,
       "xcmCommsTrafficInputErrors": xcmCommsTrafficInputErrors,
       "xcmCommsTrafficOutputErrors": xcmCommsTrafficOutputErrors,
       "xcmCommsAccess": xcmCommsAccess,
       "xcmCommsAccessTable": xcmCommsAccessTable,
       "xcmCommsAccessEntry": xcmCommsAccessEntry,
       "xcmCommsAccessRowStatus": xcmCommsAccessRowStatus,
       "xcmCommsAccessConnectPorts": xcmCommsAccessConnectPorts,
       "xcmCommsAccessHighConnectPorts": xcmCommsAccessHighConnectPorts,
       "xcmCommsAccessMaxConnectPorts": xcmCommsAccessMaxConnectPorts,
       "xcmCommsAccessDatagramPorts": xcmCommsAccessDatagramPorts,
       "xcmCommsAccessHighDatagramPorts": xcmCommsAccessHighDatagramPorts,
       "xcmCommsAccessMaxDatagramPorts": xcmCommsAccessMaxDatagramPorts,
       "xcmCommsMgmt": xcmCommsMgmt,
       "xcmCommsMgmtTable": xcmCommsMgmtTable,
       "xcmCommsMgmtEntry": xcmCommsMgmtEntry,
       "xcmCommsMgmtIndex": xcmCommsMgmtIndex,
       "xcmCommsMgmtRowStatus": xcmCommsMgmtRowStatus,
       "xcmCommsMgmtCommandRequest": xcmCommsMgmtCommandRequest,
       "xcmCommsMgmtCommandData": xcmCommsMgmtCommandData,
       "xcmCommsMgmtCommandStatus": xcmCommsMgmtCommandStatus,
       "xcmCommsMgmtCommandInProgress": xcmCommsMgmtCommandInProgress,
       "xcmPidTC": xcmPidTC,
       "xcmPidProductIdentifiers": xcmPidProductIdentifiers,
       "xcmPidDocuCentreSystems": xcmPidDocuCentreSystems,
       "xcmPidDCS20": xcmPidDCS20,
       "xcmPidDCS20M1": xcmPidDCS20M1,
       "xcmPidDCS20M1V1": xcmPidDCS20M1V1,
       "xcmPidDCS35": xcmPidDCS35,
       "xcmPidDCS35M1": xcmPidDCS35M1,
       "xcmPidDCS35M1V1": xcmPidDCS35M1V1,
       "xcmPidDC230": xcmPidDC230,
       "xcmPidDC230ST": xcmPidDC230ST,
       "xcmPidDC230STV1": xcmPidDC230STV1,
       "xcmPidDC230STV2": xcmPidDC230STV2,
       "xcmPidDC230STV3": xcmPidDC230STV3,
       "xcmPidDC230STV4": xcmPidDC230STV4,
       "xcmPidDC230STV5": xcmPidDC230STV5,
       "xcmPidDC230LP": xcmPidDC230LP,
       "xcmPidDC230LPV1": xcmPidDC230LPV1,
       "xcmPidDC230LPV2": xcmPidDC230LPV2,
       "xcmPidDC230LPV3": xcmPidDC230LPV3,
       "xcmPidDC230LPV4": xcmPidDC230LPV4,
       "xcmPidDC230LPV5": xcmPidDC230LPV5,
       "xcmPidDC265": xcmPidDC265,
       "xcmPidDC265ST": xcmPidDC265ST,
       "xcmPidDC265STV1": xcmPidDC265STV1,
       "xcmPidDC265STV2": xcmPidDC265STV2,
       "xcmPidDC265STV3": xcmPidDC265STV3,
       "xcmPidDC265LP": xcmPidDC265LP,
       "xcmPidDC265LPV1": xcmPidDC265LPV1,
       "xcmPidDC265LPV2": xcmPidDC265LPV2,
       "xcmPidDC265LPV3": xcmPidDC265LPV3,
       "xcmPidDC240": xcmPidDC240,
       "xcmPidDC240ST": xcmPidDC240ST,
       "xcmPidDC240STV1": xcmPidDC240STV1,
       "xcmPidDC240STV2": xcmPidDC240STV2,
       "xcmPidDC240STV3": xcmPidDC240STV3,
       "xcmPidDC340": xcmPidDC340,
       "xcmPidDC340ST": xcmPidDC340ST,
       "xcmPidDC340STV1": xcmPidDC340STV1,
       "xcmPidDC340STV2": xcmPidDC340STV2,
       "xcmPidDC255": xcmPidDC255,
       "xcmPidDC255ST": xcmPidDC255ST,
       "xcmPidDC255STV1": xcmPidDC255STV1,
       "xcmPidDC255STV2": xcmPidDC255STV2,
       "xcmPidDC255STV3": xcmPidDC255STV3,
       "xcmPidDC255LP": xcmPidDC255LP,
       "xcmPidDC255LPV1": xcmPidDC255LPV1,
       "xcmPidDC255LPV2": xcmPidDC255LPV2,
       "xcmPidDC255LPV3": xcmPidDC255LPV3,
       "xcmPidDC220": xcmPidDC220,
       "xcmPidDC220ST": xcmPidDC220ST,
       "xcmPidDC220STV3": xcmPidDC220STV3,
       "xcmPidDC220STV4": xcmPidDC220STV4,
       "xcmPidDC332": xcmPidDC332,
       "xcmPidDC332ST": xcmPidDC332ST,
       "xcmPidDC332STV1": xcmPidDC332STV1,
       "xcmPidDC332STV2": xcmPidDC332STV2,
       "xcmPidDC4XX": xcmPidDC4XX,
       "xcmPidDC460": xcmPidDC460,
       "xcmPidDC460V1": xcmPidDC460V1,
       "xcmPidDC470": xcmPidDC470,
       "xcmPidDC470V1": xcmPidDC470V1,
       "xcmPidDC420": xcmPidDC420,
       "xcmPidDC420ST": xcmPidDC420ST,
       "xcmPidDC420STV1": xcmPidDC420STV1,
       "xcmPidDC420STV2": xcmPidDC420STV2,
       "xcmPidDC426": xcmPidDC426,
       "xcmPidDC426V1": xcmPidDC426V1,
       "xcmPidDC432": xcmPidDC432,
       "xcmPidDC432ST": xcmPidDC432ST,
       "xcmPidDC432STV1": xcmPidDC432STV1,
       "xcmPidDC432STV2": xcmPidDC432STV2,
       "xcmPidDC432STV3": xcmPidDC432STV3,
       "xcmPidDC432STV4": xcmPidDC432STV4,
       "xcmPidDC432STV5": xcmPidDC432STV5,
       "xcmPidDC430": xcmPidDC430,
       "xcmPidDC430V1": xcmPidDC430V1,
       "xcmPidDC440": xcmPidDC440,
       "xcmPidDC440ST": xcmPidDC440ST,
       "xcmPidDC440STV1": xcmPidDC440STV1,
       "xcmPidDC440STV2": xcmPidDC440STV2,
       "xcmPidDC440STV3": xcmPidDC440STV3,
       "xcmPidDC230i": xcmPidDC230i,
       "xcmPidDC230iST": xcmPidDC230iST,
       "xcmPidDC230iSTV1": xcmPidDC230iSTV1,
       "xcmPidDC230iSTV2": xcmPidDC230iSTV2,
       "xcmPidDC4YY": xcmPidDC4YY,
       "xcmPidDC480": xcmPidDC480,
       "xcmPidDC480V1": xcmPidDC480V1,
       "xcmPidDC425": xcmPidDC425,
       "xcmPidDC425ST": xcmPidDC425ST,
       "xcmPidDC425STV1": xcmPidDC425STV1,
       "xcmPidDC555": xcmPidDC555,
       "xcmPidDC555ST": xcmPidDC555ST,
       "xcmPidDC555STV1": xcmPidDC555STV1,
       "xcmPidDC555STV2": xcmPidDC555STV2,
       "xcmPidDC535": xcmPidDC535,
       "xcmPidDC535ST": xcmPidDC535ST,
       "xcmPidDC535STV1": xcmPidDC535STV1,
       "xcmPidDC535STV2": xcmPidDC535STV2,
       "xcmPidDC545": xcmPidDC545,
       "xcmPidDC545ST": xcmPidDC545ST,
       "xcmPidDC545STV1": xcmPidDC545STV1,
       "xcmPidDC545STV2": xcmPidDC545STV2,
       "xcmPidDesktopDocuPrintPrinters": xcmPidDesktopDocuPrintPrinters,
       "xcmPid4517": xcmPid4517,
       "xcmPid4517PlusM1": xcmPid4517PlusM1,
       "xcmPid4517PlusM1V1": xcmPid4517PlusM1V1,
       "xcmPidDocuPrintN17": xcmPidDocuPrintN17,
       "xcmPidDocuPrintN17V1": xcmPidDocuPrintN17V1,
       "xcmPidDocuPrintC55": xcmPidDocuPrintC55,
       "xcmPidDocuPrintC55M1": xcmPidDocuPrintC55M1,
       "xcmPidDocuPrintC55M1V1": xcmPidDocuPrintC55M1V1,
       "xcmPidDocuPrintC55M1V2": xcmPidDocuPrintC55M1V2,
       "xcmPidDocuPrintNC60": xcmPidDocuPrintNC60,
       "xcmPidDocuPrintNC60V1": xcmPidDocuPrintNC60V1,
       "xcmPidP1210": xcmPidP1210,
       "xcmPidP1210M1": xcmPidP1210M1,
       "xcmPidP1210M1V1": xcmPidP1210M1V1,
       "xcmPidP3400": xcmPidP3400,
       "xcmPidP3400M1": xcmPidP3400M1,
       "xcmPidP3400M1V1": xcmPidP3400M1V1,
       "xcmPidWorkGroupDocuPrintPrinters": xcmPidWorkGroupDocuPrintPrinters,
       "xcmPidDocuPrintNnn": xcmPidDocuPrintNnn,
       "xcmPidDocuPrintN32": xcmPidDocuPrintN32,
       "xcmPidDocuPrintN32V1": xcmPidDocuPrintN32V1,
       "xcmPidDocuPrintN32V2": xcmPidDocuPrintN32V2,
       "xcmPidDocuPrintN24": xcmPidDocuPrintN24,
       "xcmPidDocuPrintN24V1": xcmPidDocuPrintN24V1,
       "xcmPidDocuPrintN24V2": xcmPidDocuPrintN24V2,
       "xcmPidDocuPrintN40": xcmPidDocuPrintN40,
       "xcmPidDocuPrintN40V1": xcmPidDocuPrintN40V1,
       "xcmPidDocuPrintN2025": xcmPidDocuPrintN2025,
       "xcmPidDocuPrintN2025V1": xcmPidDocuPrintN2025V1,
       "xcmPidDocuPrintN2025V2": xcmPidDocuPrintN2025V2,
       "xcmPidDocuPrintN2125": xcmPidDocuPrintN2125,
       "xcmPidDocuPrintN2125V1": xcmPidDocuPrintN2125V1,
       "xcmPidDocuPrintN2425": xcmPidDocuPrintN2425,
       "xcmPidDocuPrintN2425V1": xcmPidDocuPrintN2425V1,
       "xcmPidDocuPrintN2825": xcmPidDocuPrintN2825,
       "xcmPidDocuPrintN2825V1": xcmPidDocuPrintN2825V1,
       "xcmPidDocuPrintN3225": xcmPidDocuPrintN3225,
       "xcmPidDocuPrintN3225V1": xcmPidDocuPrintN3225V1,
       "xcmPidDocuPrintN4025": xcmPidDocuPrintN4025,
       "xcmPidDocuPrintN4025V1": xcmPidDocuPrintN4025V1,
       "xcmPidDocuPrintN4025V2": xcmPidDocuPrintN4025V2,
       "xcmPidDocuPrintAyame35": xcmPidDocuPrintAyame35,
       "xcmPidDocuPrintAyame35V1": xcmPidDocuPrintAyame35V1,
       "xcmPidDocuPrintN4525": xcmPidDocuPrintN4525,
       "xcmPidDocuPrintN4525V1": xcmPidDocuPrintN4525V1,
       "xcmPidPhaser5400": xcmPidPhaser5400,
       "xcmPidPhaser5400V1": xcmPidPhaser5400V1,
       "xcmPidDocuPrintNCnn": xcmPidDocuPrintNCnn,
       "xcmPidDocuPrintNC70": xcmPidDocuPrintNC70,
       "xcmPidDocuPrintNC70V1": xcmPidDocuPrintNC70V1,
       "xcmPidDocuPrintNC80": xcmPidDocuPrintNC80,
       "xcmPidDocuPrintNC80V1": xcmPidDocuPrintNC80V1,
       "xcmPidMidRangeColorPrinters": xcmPidMidRangeColorPrinters,
       "xcmPidDCColorSeries50": xcmPidDCColorSeries50,
       "xcmPidDCColorSeries50M1": xcmPidDCColorSeries50M1,
       "xcmPidDCColorSeries50M1V1": xcmPidDCColorSeries50M1V1,
       "xcmPidDocuTechs": xcmPidDocuTechs,
       "xcmPidDocuTech6135": xcmPidDocuTech6135,
       "xcmPidDocuTech6135M1": xcmPidDocuTech6135M1,
       "xcmPidDocuTech6135M1V1": xcmPidDocuTech6135M1V1,
       "xcmPidDocuTech6135M1V2": xcmPidDocuTech6135M1V2,
       "xcmPidDocuTech6180": xcmPidDocuTech6180,
       "xcmPidDocuTech6180M1": xcmPidDocuTech6180M1,
       "xcmPidDocuTech6180M1V1": xcmPidDocuTech6180M1V1,
       "xcmPidDocuTech6180M1V2": xcmPidDocuTech6180M1V2,
       "xcmPidDocuTech6100": xcmPidDocuTech6100,
       "xcmPidDocuTech6100M1": xcmPidDocuTech6100M1,
       "xcmPidDocuTech6100M1V1": xcmPidDocuTech6100M1V1,
       "xcmPidDocuTech6100M1V2": xcmPidDocuTech6100M1V2,
       "xcmPidDocuTech6115": xcmPidDocuTech6115,
       "xcmPidDocuTech6115M1": xcmPidDocuTech6115M1,
       "xcmPidDocuTech6115M1V1": xcmPidDocuTech6115M1V1,
       "xcmPidDocuTech6115M1V2": xcmPidDocuTech6115M1V2,
       "xcmPidDocuTech6155": xcmPidDocuTech6155,
       "xcmPidDocuTech6155M1": xcmPidDocuTech6155M1,
       "xcmPidDocuTech6155M1V1": xcmPidDocuTech6155M1V1,
       "xcmPidDocuTech6155M1V2": xcmPidDocuTech6155M1V2,
       "xcmPidDocuTech6075": xcmPidDocuTech6075,
       "xcmPidDocuTech6075M1": xcmPidDocuTech6075M1,
       "xcmPidDocuTech6075M1V1": xcmPidDocuTech6075M1V1,
       "xcmPidDocuTech6090": xcmPidDocuTech6090,
       "xcmPidDocuTech6090M1": xcmPidDocuTech6090M1,
       "xcmPidDocuTech6090M1V1": xcmPidDocuTech6090M1V1,
       "xcmPidDocuTechHiColorEPS": xcmPidDocuTechHiColorEPS,
       "xcmPidDocuSPDFE": xcmPidDocuSPDFE,
       "xcmPidDocuSPDFEColor": xcmPidDocuSPDFEColor,
       "xcmPidDocuSPTEAK": xcmPidDocuSPTEAK,
       "xcmPidDedPrintServers": xcmPidDedPrintServers,
       "xcmPidPhaserPrintServer": xcmPidPhaserPrintServer,
       "xcmPidPhaserEX7750": xcmPidPhaserEX7750,
       "xcmPidPhaserEX7750GX": xcmPidPhaserEX7750GX,
       "xcmPidPhaserEX7750DXF": xcmPidPhaserEX7750DXF,
       "xcmPidDocuPrintNPS": xcmPidDocuPrintNPS,
       "xcmPidDP4050NPS": xcmPidDP4050NPS,
       "xcmPidDP4050NPSM1": xcmPidDP4050NPSM1,
       "xcmPidDP4050NPSM1V1": xcmPidDP4050NPSM1V1,
       "xcmPidDP4090NPS": xcmPidDP4090NPS,
       "xcmPidDP4090NPSM1": xcmPidDP4090NPSM1,
       "xcmPidDP4090NPSM1V1": xcmPidDP4090NPSM1V1,
       "xcmPidDP4850NPS": xcmPidDP4850NPS,
       "xcmPidDP4850NPSM1": xcmPidDP4850NPSM1,
       "xcmPidDP4850NPSM1V1": xcmPidDP4850NPSM1V1,
       "xcmPidDP4890NPS": xcmPidDP4890NPS,
       "xcmPidDP4890NPSM1": xcmPidDP4890NPSM1,
       "xcmPidDP4890NPSM1V1": xcmPidDP4890NPSM1V1,
       "xcmPidDP4635NPS": xcmPidDP4635NPS,
       "xcmPidDP4635NPSM1": xcmPidDP4635NPSM1,
       "xcmPidDP4635NPSM1V1": xcmPidDP4635NPSM1V1,
       "xcmPidDP4635NPSMicr": xcmPidDP4635NPSMicr,
       "xcmPidDP4635NPSMicrV1": xcmPidDP4635NPSMicrV1,
       "xcmPidDP180NPS": xcmPidDP180NPS,
       "xcmPidDP180NPSM1": xcmPidDP180NPSM1,
       "xcmPidDP180NPSM1V1": xcmPidDP180NPSM1V1,
       "xcmPidDP180NPSMicr": xcmPidDP180NPSMicr,
       "xcmPidDP180NPSMicrV1": xcmPidDP180NPSMicrV1,
       "xcmPidDP96NPS": xcmPidDP96NPS,
       "xcmPidDP96NPSM1": xcmPidDP96NPSM1,
       "xcmPidDP96NPSM1V1": xcmPidDP96NPSM1V1,
       "xcmPidDP96NPSMicr": xcmPidDP96NPSMicr,
       "xcmPidDP96NPSMicrV1": xcmPidDP96NPSMicrV1,
       "xcmPidDP92cNPS": xcmPidDP92cNPS,
       "xcmPidDP92cNPSM1": xcmPidDP92cNPSM1,
       "xcmPidDP92cNPSM1V1": xcmPidDP92cNPSM1V1,
       "xcmPidDP155NPS": xcmPidDP155NPS,
       "xcmPidDP155NPSM1": xcmPidDP155NPSM1,
       "xcmPidDP155NPSM1V1": xcmPidDP155NPSM1V1,
       "xcmPidDP155NPSMicr": xcmPidDP155NPSMicr,
       "xcmPidDP155NPSMicrV1": xcmPidDP155NPSMicrV1,
       "xcmPidDP115NPS": xcmPidDP115NPS,
       "xcmPidDP115NPSM1": xcmPidDP115NPSM1,
       "xcmPidDP115NPSM1V1": xcmPidDP115NPSM1V1,
       "xcmPidDP115NPSMicr": xcmPidDP115NPSMicr,
       "xcmPidDP115NPSMicrV1": xcmPidDP115NPSMicrV1,
       "xcmPidDP100NPS": xcmPidDP100NPS,
       "xcmPidDP100NPSM1": xcmPidDP100NPSM1,
       "xcmPidDP100NPSM1V1": xcmPidDP100NPSM1V1,
       "xcmPidDP100NPSMicr": xcmPidDP100NPSMicr,
       "xcmPidDP100NPSMicrV1": xcmPidDP100NPSMicrV1,
       "xcmPidDC2000FamilyNPS": xcmPidDC2000FamilyNPS,
       "xcmPidDocuColor2045NPS": xcmPidDocuColor2045NPS,
       "xcmPidDocuColor2045NPSV1": xcmPidDocuColor2045NPSV1,
       "xcmPidDocuColor2060NPS": xcmPidDocuColor2060NPS,
       "xcmPidDocuColor2060NPSV1": xcmPidDocuColor2060NPSV1,
       "xcmPidDocuColor5252NPS": xcmPidDocuColor5252NPS,
       "xcmPidDocuColor5252NPSV1": xcmPidDocuColor5252NPSV1,
       "xcmPidDC6000FamilyNPS": xcmPidDC6000FamilyNPS,
       "xcmPidDocuColor6060NPS": xcmPidDocuColor6060NPS,
       "xcmPidDocuColor6060NPSV1": xcmPidDocuColor6060NPSV1,
       "xcmPidDocuColor2000Series": xcmPidDocuColor2000Series,
       "xcmPidDocuColor3000series": xcmPidDocuColor3000series,
       "xcmPidDocuColor240SPLASH": xcmPidDocuColor240SPLASH,
       "xcmPidDocuColor240SPLASHv1": xcmPidDocuColor240SPLASHv1,
       "xcmPidDocuColor250SPLASH": xcmPidDocuColor250SPLASH,
       "xcmPidDocuColor250SPLASHv1": xcmPidDocuColor250SPLASHv1,
       "xcmPidDocuColor242EFI": xcmPidDocuColor242EFI,
       "xcmPidDocuColor242EFIv1": xcmPidDocuColor242EFIv1,
       "xcmPidDocuColor242": xcmPidDocuColor242,
       "xcmPidDocuColor242v1": xcmPidDocuColor242v1,
       "xcmPidDocuColor252EFI": xcmPidDocuColor252EFI,
       "xcmPidDocuColor252EFIv1": xcmPidDocuColor252EFIv1,
       "xcmPidDocuColor252": xcmPidDocuColor252,
       "xcmPidDocuColor252v1": xcmPidDocuColor252v1,
       "xcmPidDocuColor260EFI": xcmPidDocuColor260EFI,
       "xcmPidDocuColor260EFIv1": xcmPidDocuColor260EFIv1,
       "xcmPidDocuColor260": xcmPidDocuColor260,
       "xcmPidDocuColor260v1": xcmPidDocuColor260v1,
       "xcmPidDocuColor242C": xcmPidDocuColor242C,
       "xcmPidDocuColor242Cv1": xcmPidDocuColor242Cv1,
       "xcmPidDocuColor242S": xcmPidDocuColor242S,
       "xcmPidDocuColor242Sv1": xcmPidDocuColor242Sv1,
       "xcmPidDocuColor252C": xcmPidDocuColor252C,
       "xcmPidDocuColor252Cv1": xcmPidDocuColor252Cv1,
       "xcmPidDocuColor252S": xcmPidDocuColor252S,
       "xcmPidDocuColor252Sv1": xcmPidDocuColor252Sv1,
       "xcmPidDocuColor260C": xcmPidDocuColor260C,
       "xcmPidDocuColor260Cv1": xcmPidDocuColor260Cv1,
       "xcmPidDocuColor260S": xcmPidDocuColor260S,
       "xcmPidDocuColor260Sv1": xcmPidDocuColor260Sv1,
       "xcmPidDocuPrintEPS": xcmPidDocuPrintEPS,
       "xcmPidDP180EPS": xcmPidDP180EPS,
       "xcmPidDP180EPSM1": xcmPidDP180EPSM1,
       "xcmPidDP180EPSM1V1": xcmPidDP180EPSM1V1,
       "xcmPidDP180EPSMicr": xcmPidDP180EPSMicr,
       "xcmPidDP180EPSMicrV1": xcmPidDP180EPSMicrV1,
       "xcmPidDP2000EPS": xcmPidDP2000EPS,
       "xcmPidDP2000S100EPS": xcmPidDP2000S100EPS,
       "xcmPidDP2000S100EPSV1": xcmPidDP2000S100EPSV1,
       "xcmPidDP2000S115EPS": xcmPidDP2000S115EPS,
       "xcmPidDP2000S115EPSV1": xcmPidDP2000S115EPSV1,
       "xcmPidDP2000S135EPS": xcmPidDP2000S135EPS,
       "xcmPidDP2000S135EPSV1": xcmPidDP2000S135EPSV1,
       "xcmPidDP2000S155EPS": xcmPidDP2000S155EPS,
       "xcmPidDP2000S155EPSV1": xcmPidDP2000S155EPSV1,
       "xcmPidDP2000S180EPS": xcmPidDP2000S180EPS,
       "xcmPidDP2000S180EPSV1": xcmPidDP2000S180EPSV1,
       "xcmPidDP2000S6075": xcmPidDP2000S6075,
       "xcmPidDP2000S6075V1": xcmPidDP2000S6075V1,
       "xcmPidDP2000S6090": xcmPidDP2000S6090,
       "xcmPidDP2000S6090V1": xcmPidDP2000S6090V1,
       "xcmPidDP2000S100EPSMX": xcmPidDP2000S100EPSMX,
       "xcmPidDP2000S100EPSMXV1": xcmPidDP2000S100EPSMXV1,
       "xcmPidDP2000S115EPSMX": xcmPidDP2000S115EPSMX,
       "xcmPidDP2000S115EPSMXV1": xcmPidDP2000S115EPSMXV1,
       "xcmPidDP2000S135EPSMX": xcmPidDP2000S135EPSMX,
       "xcmPidDP2000S135EPSMXV1": xcmPidDP2000S135EPSMXV1,
       "xcmPidDP2000S155EPSMX": xcmPidDP2000S155EPSMX,
       "xcmPidDP2000S155EPSMXV1": xcmPidDP2000S155EPSMXV1,
       "xcmPidDP2000S180EPSMX": xcmPidDP2000S180EPSMX,
       "xcmPidDP2000S180EPSMXV1": xcmPidDP2000S180EPSMXV1,
       "xcmPidXeroxPhaserPrinters": xcmPidXeroxPhaserPrinters,
       "xcmPidPhaser3yyyFamily": xcmPidPhaser3yyyFamily,
       "xcmPidPhaser3450": xcmPidPhaser3450,
       "xcmPidPhaser3450D": xcmPidPhaser3450D,
       "xcmPidPhaser3450DN": xcmPidPhaser3450DN,
       "xcmPidPhaser3450B": xcmPidPhaser3450B,
       "xcmPidPhaser3500": xcmPidPhaser3500,
       "xcmPidPhaser3500b": xcmPidPhaser3500b,
       "xcmPidPhaser3500n": xcmPidPhaser3500n,
       "xcmPidPhaser3150": xcmPidPhaser3150,
       "xcmPidPhaser3150b": xcmPidPhaser3150b,
       "xcmPidPhaser3150n": xcmPidPhaser3150n,
       "xcmPidPhaser3428": xcmPidPhaser3428,
       "xcmPidPhaser3428v1": xcmPidPhaser3428v1,
       "xcmPidPhaser3124": xcmPidPhaser3124,
       "xcmPidPhaser3124v1": xcmPidPhaser3124v1,
       "xcmPidPhaser3125": xcmPidPhaser3125,
       "xcmPidPhaser3125v1": xcmPidPhaser3125v1,
       "xcmPidPhaser3250": xcmPidPhaser3250,
       "xcmPidPhaser3250v1": xcmPidPhaser3250v1,
       "xcmPidPhaser3600": xcmPidPhaser3600,
       "xcmPidPhaser3600v1": xcmPidPhaser3600v1,
       "xcmPidPhaser3100MFP": xcmPidPhaser3100MFP,
       "xcmPidPhaser3100MFPv1": xcmPidPhaser3100MFPv1,
       "xcmPidPhaser3100": xcmPidPhaser3100,
       "xcmPidPhaser3100v1": xcmPidPhaser3100v1,
       "xcmPidPhaser3435": xcmPidPhaser3435,
       "xcmPidPhaser3435v1": xcmPidPhaser3435v1,
       "xcmPidPhaser3300MFP": xcmPidPhaser3300MFP,
       "xcmPidPhaser3300MFPc1": xcmPidPhaser3300MFPc1,
       "xcmPidPhaser3300MFPc1v1": xcmPidPhaser3300MFPc1v1,
       "xcmPidPhaser3010": xcmPidPhaser3010,
       "xcmPidPhaser3010C1": xcmPidPhaser3010C1,
       "xcmPidPhaser3010C1V1": xcmPidPhaser3010C1V1,
       "xcmPidPhaser3040": xcmPidPhaser3040,
       "xcmPidPhaser3040C1": xcmPidPhaser3040C1,
       "xcmPidPhaser3040C1V1": xcmPidPhaser3040C1V1,
       "xcmPidPhaser4yyyFamily": xcmPidPhaser4yyyFamily,
       "xcmPidPhaser4400": xcmPidPhaser4400,
       "xcmPidPhaser4400N": xcmPidPhaser4400N,
       "xcmPidPhaser4400DT": xcmPidPhaser4400DT,
       "xcmPidPhaser4400DX": xcmPidPhaser4400DX,
       "xcmPidPhaser4400B": xcmPidPhaser4400B,
       "xcmPidPhaser4500": xcmPidPhaser4500,
       "xcmPidPhaser4500N": xcmPidPhaser4500N,
       "xcmPidPhaser4500DT": xcmPidPhaser4500DT,
       "xcmPidPhaser4500DX": xcmPidPhaser4500DX,
       "xcmPidPhaser4500B": xcmPidPhaser4500B,
       "xcmPidPhaser4510": xcmPidPhaser4510,
       "xcmPidPhaser4510B": xcmPidPhaser4510B,
       "xcmPidPhaser4510N": xcmPidPhaser4510N,
       "xcmPidPhaser4510DT": xcmPidPhaser4510DT,
       "xcmPidPhaser4510DX": xcmPidPhaser4510DX,
       "xcmPidPhaser5yyyFamily": xcmPidPhaser5yyyFamily,
       "xcmPidPhaser5500": xcmPidPhaser5500,
       "xcmPidPhaser5500B": xcmPidPhaser5500B,
       "xcmPidPhaser5500N": xcmPidPhaser5500N,
       "xcmPidPhaser5500DN": xcmPidPhaser5500DN,
       "xcmPidPhaser5500DT": xcmPidPhaser5500DT,
       "xcmPidPhaser5500DX": xcmPidPhaser5500DX,
       "xcmPidPhaser5550": xcmPidPhaser5550,
       "xcmPidPhaser5550B": xcmPidPhaser5550B,
       "xcmPidPhaser5550N": xcmPidPhaser5550N,
       "xcmPidPhaser5550DN": xcmPidPhaser5550DN,
       "xcmPidPhaser5550DT": xcmPidPhaser5550DT,
       "xcmPidPhaser5335": xcmPidPhaser5335,
       "xcmPidPhaser5335v1": xcmPidPhaser5335v1,
       "xcmPidPhaser6yyyFamily": xcmPidPhaser6yyyFamily,
       "xcmPidPhaser6200": xcmPidPhaser6200,
       "xcmPidPhaser6200B": xcmPidPhaser6200B,
       "xcmPidPhaser6200N": xcmPidPhaser6200N,
       "xcmPidPhaser6200DP": xcmPidPhaser6200DP,
       "xcmPidPhaser6200DX": xcmPidPhaser6200DX,
       "xcmPidPhaser6100": xcmPidPhaser6100,
       "xcmPidPhaser6100n": xcmPidPhaser6100n,
       "xcmPidPhaser6250": xcmPidPhaser6250,
       "xcmPidPhaser6250B": xcmPidPhaser6250B,
       "xcmPidPhaser6250N": xcmPidPhaser6250N,
       "xcmPidPhaser6250DP": xcmPidPhaser6250DP,
       "xcmPidPhaser6250DX": xcmPidPhaser6250DX,
       "xcmPidPhaser6250DT": xcmPidPhaser6250DT,
       "xcmPidPhaser6300": xcmPidPhaser6300,
       "xcmPidPhaser6300B": xcmPidPhaser6300B,
       "xcmPidPhaser6300N": xcmPidPhaser6300N,
       "xcmPidPhaser6300DN": xcmPidPhaser6300DN,
       "xcmPidPhaser6350": xcmPidPhaser6350,
       "xcmPidPhaser6350DP": xcmPidPhaser6350DP,
       "xcmPidPhaser6350DT": xcmPidPhaser6350DT,
       "xcmPidPhaser6350DX": xcmPidPhaser6350DX,
       "xcmPidPhaser6120": xcmPidPhaser6120,
       "xcmPidPhaser6120b": xcmPidPhaser6120b,
       "xcmPidPhaser6120n": xcmPidPhaser6120n,
       "xcmPidPhaser6360": xcmPidPhaser6360,
       "xcmPidPhaser6360N": xcmPidPhaser6360N,
       "xcmPidPhaser6360DN": xcmPidPhaser6360DN,
       "xcmPidPhaser6360DT": xcmPidPhaser6360DT,
       "xcmPidPhaser6360DX": xcmPidPhaser6360DX,
       "xcmPidPhaser6180": xcmPidPhaser6180,
       "xcmPidPhaser6180N": xcmPidPhaser6180N,
       "xcmPidPhaser6180DN": xcmPidPhaser6180DN,
       "xcmPidPhaser6110N": xcmPidPhaser6110N,
       "xcmPidPhaser6110Nv1": xcmPidPhaser6110Nv1,
       "xcmPidPhaser6115": xcmPidPhaser6115,
       "xcmPidPhaser6115N": xcmPidPhaser6115N,
       "xcmPidPhaser6115DN": xcmPidPhaser6115DN,
       "xcmPidPhaser6110MFP3": xcmPidPhaser6110MFP3,
       "xcmPidPhaser6110MFP3v1": xcmPidPhaser6110MFP3v1,
       "xcmPidPhaser6110MFP4": xcmPidPhaser6110MFP4,
       "xcmPidPhaser6110MFP4v1": xcmPidPhaser6110MFP4v1,
       "xcmPidPhaser6180MFP": xcmPidPhaser6180MFP,
       "xcmPidPhaser6180MFPN": xcmPidPhaser6180MFPN,
       "xcmPidPhaser6180MFPDN": xcmPidPhaser6180MFPDN,
       "xcmPidPhaser6130": xcmPidPhaser6130,
       "xcmPidPhaser6130N": xcmPidPhaser6130N,
       "xcmPidPhaser6125": xcmPidPhaser6125,
       "xcmPidPhaser6125N": xcmPidPhaser6125N,
       "xcmPidPhaser6280": xcmPidPhaser6280,
       "xcmPidPhaser6280N": xcmPidPhaser6280N,
       "xcmPidPhaser6280Nv1": xcmPidPhaser6280Nv1,
       "xcmPidPhaser6280DN": xcmPidPhaser6280DN,
       "xcmPidPhaser6280DNv1": xcmPidPhaser6280DNv1,
       "xcmPidPhaser6280DT": xcmPidPhaser6280DT,
       "xcmPidPhaser6280DTv1": xcmPidPhaser6280DTv1,
       "xcmPidPhaser6700": xcmPidPhaser6700,
       "xcmPidPhaser6700C1": xcmPidPhaser6700C1,
       "xcmPidPhaser6700C1V1": xcmPidPhaser6700C1V1,
       "xcmPidPhaser6700C2": xcmPidPhaser6700C2,
       "xcmPidPhaser6700C2V1": xcmPidPhaser6700C2V1,
       "xcmPidPhaser6700C3": xcmPidPhaser6700C3,
       "xcmPidPhaser6700C3V1": xcmPidPhaser6700C3V1,
       "xcmPidPhaser6700C4": xcmPidPhaser6700C4,
       "xcmPidPhaser6700C4V1": xcmPidPhaser6700C4V1,
       "xcmPidWorkCentre6015B": xcmPidWorkCentre6015B,
       "xcmPidWorkCentre6015BC1": xcmPidWorkCentre6015BC1,
       "xcmPidWorkCentre6015BC1V1": xcmPidWorkCentre6015BC1V1,
       "xcmPidPhaser6500": xcmPidPhaser6500,
       "xcmPidPhaser6500C1": xcmPidPhaser6500C1,
       "xcmPidPhaser6500C1V1": xcmPidPhaser6500C1V1,
       "xcmPidPhaser6500C2": xcmPidPhaser6500C2,
       "xcmPidPhaser6500C2V1": xcmPidPhaser6500C2V1,
       "xcmPidWorkCentre6505": xcmPidWorkCentre6505,
       "xcmPidWorkCentre6505C1": xcmPidWorkCentre6505C1,
       "xcmPidWorkCentre6505C1V1": xcmPidWorkCentre6505C1V1,
       "xcmPidWorkCentre6505C2": xcmPidWorkCentre6505C2,
       "xcmPidWorkCentre6505C2V1": xcmPidWorkCentre6505C2V1,
       "xcmPidPhaser6000": xcmPidPhaser6000,
       "xcmPidPhaser6000C1": xcmPidPhaser6000C1,
       "xcmPidPhaser6000C1V1": xcmPidPhaser6000C1V1,
       "xcmPidWorkCentre6015": xcmPidWorkCentre6015,
       "xcmPidWorkCentre6015C1": xcmPidWorkCentre6015C1,
       "xcmPidWorkCentre6015C1V1": xcmPidWorkCentre6015C1V1,
       "xcmPidWorkCentre6015C2": xcmPidWorkCentre6015C2,
       "xcmPidWorkCentre6015C2V1": xcmPidWorkCentre6015C2V1,
       "xcmPidPhaser6600": xcmPidPhaser6600,
       "xcmPidPhaser6600NC1": xcmPidPhaser6600NC1,
       "xcmPidPhaser6600NC1V1": xcmPidPhaser6600NC1V1,
       "xcmPidPhaser6600DNC2": xcmPidPhaser6600DNC2,
       "xcmPidPhaser6600DNC2V1": xcmPidPhaser6600DNC2V1,
       "xcmPidPhaser7yyyFamily": xcmPidPhaser7yyyFamily,
       "xcmPidPhaser7300": xcmPidPhaser7300,
       "xcmPidPhaser7300DN": xcmPidPhaser7300DN,
       "xcmPidPhaser7300N": xcmPidPhaser7300N,
       "xcmPidPhaser7300DT": xcmPidPhaser7300DT,
       "xcmPidPhaser7300DX": xcmPidPhaser7300DX,
       "xcmPidPhaser7300B": xcmPidPhaser7300B,
       "xcmPidPhaser7400": xcmPidPhaser7400,
       "xcmPidPhaser7400B": xcmPidPhaser7400B,
       "xcmPidPhaser7400N": xcmPidPhaser7400N,
       "xcmPidPhaser7400DN": xcmPidPhaser7400DN,
       "xcmPidPhaser7400DT": xcmPidPhaser7400DT,
       "xcmPidPhaser7400DX": xcmPidPhaser7400DX,
       "xcmPidPhaser7400DXF": xcmPidPhaser7400DXF,
       "xcmPidPhaser7750": xcmPidPhaser7750,
       "xcmPidPhaser7750B": xcmPidPhaser7750B,
       "xcmPidPhaser7750DN": xcmPidPhaser7750DN,
       "xcmPidPhaser7750GX": xcmPidPhaser7750GX,
       "xcmPidPhaser7750DXF": xcmPidPhaser7750DXF,
       "xcmPidPhaser7760": xcmPidPhaser7760,
       "xcmPidPhaser7760B": xcmPidPhaser7760B,
       "xcmPidPhaser7760DN": xcmPidPhaser7760DN,
       "xcmPidPhaser7760GX": xcmPidPhaser7760GX,
       "xcmPidPhaser7760DX": xcmPidPhaser7760DX,
       "xcmPidPhaser7800": xcmPidPhaser7800,
       "xcmPidPhaser7800NC1": xcmPidPhaser7800NC1,
       "xcmPidPhaser7800NC1V1": xcmPidPhaser7800NC1V1,
       "xcmPidPhaser7800DNC1": xcmPidPhaser7800DNC1,
       "xcmPidPhaser7800DNC1V1": xcmPidPhaser7800DNC1V1,
       "xcmPidPhaser7800GXC1": xcmPidPhaser7800GXC1,
       "xcmPidPhaser7800GXC1V1": xcmPidPhaser7800GXC1V1,
       "xcmPidPhaser7800DXC1": xcmPidPhaser7800DXC1,
       "xcmPidPhaser7800DXC1V1": xcmPidPhaser7800DXC1V1,
       "xcmPidPhaser7100": xcmPidPhaser7100,
       "xcmPidPhaser7100NC1": xcmPidPhaser7100NC1,
       "xcmPidPhaser7100NC1V1": xcmPidPhaser7100NC1V1,
       "xcmPidPhaser7100DNC1": xcmPidPhaser7100DNC1,
       "xcmPidPhaser7100DNC1V1": xcmPidPhaser7100DNC1V1,
       "xcmPidPhaser8yyyFamily": xcmPidPhaser8yyyFamily,
       "xcmPidPhaser8400": xcmPidPhaser8400,
       "xcmPidPhaser8400B": xcmPidPhaser8400B,
       "xcmPidPhaser8400N": xcmPidPhaser8400N,
       "xcmPidPhaser8400DP": xcmPidPhaser8400DP,
       "xcmPidPhaser8400DX": xcmPidPhaser8400DX,
       "xcmPidPhaser8400BD": xcmPidPhaser8400BD,
       "xcmPidPhaser8560": xcmPidPhaser8560,
       "xcmPidPhaser8560v1": xcmPidPhaser8560v1,
       "xcmPidPhaser8560p": xcmPidPhaser8560p,
       "xcmPidPhaser8560N": xcmPidPhaser8560N,
       "xcmPidPhaser8560DN": xcmPidPhaser8560DN,
       "xcmPidPhaser8560DT": xcmPidPhaser8560DT,
       "xcmPidPhaser8560DX": xcmPidPhaser8560DX,
       "xcmPidPhaser8560PP": xcmPidPhaser8560PP,
       "xcmPidPhaser8860": xcmPidPhaser8860,
       "xcmPidPhaser8860v1": xcmPidPhaser8860v1,
       "xcmPidPhaser8860MFP": xcmPidPhaser8860MFP,
       "xcmPidPhaser8860MFPv1": xcmPidPhaser8860MFPv1,
       "xcmPidP3200MFP": xcmPidP3200MFP,
       "xcmPidP3200MFPv1": xcmPidP3200MFPv1,
       "xcmPidPhaser9yyyFamily": xcmPidPhaser9yyyFamily,
       "xcmPidWorkCentreMFSystems": xcmPidWorkCentreMFSystems,
       "xcmPidWCPro": xcmPidWCPro,
       "xcmPidWCP32C": xcmPidWCP32C,
       "xcmPidWCP32CV1": xcmPidWCP32CV1,
       "xcmPidWCP32CV2": xcmPidWCP32CV2,
       "xcmPidWCP35": xcmPidWCP35,
       "xcmPidWCP35V1": xcmPidWCP35V1,
       "xcmPidWCP35V2": xcmPidWCP35V2,
       "xcmPidWCP40C": xcmPidWCP40C,
       "xcmPidWCP40CV1": xcmPidWCP40CV1,
       "xcmPidWCP40CV2": xcmPidWCP40CV2,
       "xcmPidWCP45": xcmPidWCP45,
       "xcmPidWCP45V1": xcmPidWCP45V1,
       "xcmPidWCP45V2": xcmPidWCP45V2,
       "xcmPidWCP55": xcmPidWCP55,
       "xcmPidWCP55V1": xcmPidWCP55V1,
       "xcmPidWCP55V2": xcmPidWCP55V2,
       "xcmPidWCP165": xcmPidWCP165,
       "xcmPidWCP165V1": xcmPidWCP165V1,
       "xcmPidWCP175": xcmPidWCP175,
       "xcmPidWCP175V1": xcmPidWCP175V1,
       "xcmPidWCPC2128": xcmPidWCPC2128,
       "xcmPidWCPC2128V1": xcmPidWCPC2128V1,
       "xcmPidWCPC2636": xcmPidWCPC2636,
       "xcmPidWCPC2636V1": xcmPidWCPC2636V1,
       "xcmPidWCPC3545": xcmPidWCPC3545,
       "xcmPidWCPC3545V1": xcmPidWCPC3545V1,
       "xcmPidWC265": xcmPidWC265,
       "xcmPidWC265V1": xcmPidWC265V1,
       "xcmPidWC275": xcmPidWC275,
       "xcmPidWC275V1": xcmPidWC275V1,
       "xcmPidWCP265": xcmPidWCP265,
       "xcmPidWCP265V1": xcmPidWCP265V1,
       "xcmPidWCP275": xcmPidWCP275,
       "xcmPidWCP275V1": xcmPidWCP275V1,
       "xcmPidWCPS265": xcmPidWCPS265,
       "xcmPidWCPS265V1": xcmPidWCPS265V1,
       "xcmPidWCPS275": xcmPidWCPS275,
       "xcmPidWCPS275V1": xcmPidWCPS275V1,
       "xcmPidWC7655": xcmPidWC7655,
       "xcmPidWC7655V1": xcmPidWC7655V1,
       "xcmPidWC7665": xcmPidWC7665,
       "xcmPidWC7665V1": xcmPidWC7665V1,
       "xcmPidWC7675": xcmPidWC7675,
       "xcmPidWC7675V1": xcmPidWC7675V1,
       "xcmPidWCMF": xcmPidWCMF,
       "xcmPidWCM35": xcmPidWCM35,
       "xcmPidWCM35V1": xcmPidWCM35V1,
       "xcmPidWCM35V2": xcmPidWCM35V2,
       "xcmPidWCM45": xcmPidWCM45,
       "xcmPidWCM45V1": xcmPidWCM45V1,
       "xcmPidWCM45V2": xcmPidWCM45V2,
       "xcmPidWCM55": xcmPidWCM55,
       "xcmPidWCM55V1": xcmPidWCM55V1,
       "xcmPidWCM55V2": xcmPidWCM55V2,
       "xcmPidWCM165": xcmPidWCM165,
       "xcmPidWCM165V1": xcmPidWCM165V1,
       "xcmPidWCM175": xcmPidWCM175,
       "xcmPidWCM175V1": xcmPidWCM175V1,
       "xcmPidWCMPS35": xcmPidWCMPS35,
       "xcmPidWCMPS35V1": xcmPidWCMPS35V1,
       "xcmPidWCMPS45": xcmPidWCMPS45,
       "xcmPidWCMPS45V1": xcmPidWCMPS45V1,
       "xcmPidWCMPS55": xcmPidWCMPS55,
       "xcmPidWCMPS55V1": xcmPidWCMPS55V1,
       "xcmPidWCMPS165": xcmPidWCMPS165,
       "xcmPidWCMPS165V1": xcmPidWCMPS165V1,
       "xcmPidWCMPS175": xcmPidWCMPS175,
       "xcmPidWCMPS175V1": xcmPidWCMPS175V1,
       "xcmPidWCMF28": xcmPidWCMF28,
       "xcmPidWCMFM28": xcmPidWCMFM28,
       "xcmPidWCPS232": xcmPidWCPS232,
       "xcmPidWCPS232V1": xcmPidWCPS232V1,
       "xcmPidWCPS238": xcmPidWCPS238,
       "xcmPidWCPS238V1": xcmPidWCPS238V1,
       "xcmPidWCPS245": xcmPidWCPS245,
       "xcmPidWCPS245V1": xcmPidWCPS245V1,
       "xcmPidWCPS255": xcmPidWCPS255,
       "xcmPidWCPS255V1": xcmPidWCPS255V1,
       "xcmPidWCP232": xcmPidWCP232,
       "xcmPidWCP232V1": xcmPidWCP232V1,
       "xcmPidWCP238": xcmPidWCP238,
       "xcmPidWCP238V1": xcmPidWCP238V1,
       "xcmPidWCP245": xcmPidWCP245,
       "xcmPidWCP245V1": xcmPidWCP245V1,
       "xcmPidWCP255": xcmPidWCP255,
       "xcmPidWCP255V1": xcmPidWCP255V1,
       "xcmPidWC232": xcmPidWC232,
       "xcmPidWC232V1": xcmPidWC232V1,
       "xcmPidWC238": xcmPidWC238,
       "xcmPidWC238V1": xcmPidWC238V1,
       "xcmPidWC245": xcmPidWC245,
       "xcmPidWC245V1": xcmPidWC245V1,
       "xcmPidWC255": xcmPidWC255,
       "xcmPidWC255V1": xcmPidWC255V1,
       "xcmPidWorkCentre5135": xcmPidWorkCentre5135,
       "xcmPidWorkCentre5135C1": xcmPidWorkCentre5135C1,
       "xcmPidWorkCentre5135C1V1": xcmPidWorkCentre5135C1V1,
       "xcmPidWorkCentre5135C1V2": xcmPidWorkCentre5135C1V2,
       "xcmPidWorkCentre5150": xcmPidWorkCentre5150,
       "xcmPidWorkCentre5150C1": xcmPidWorkCentre5150C1,
       "xcmPidWorkCentre5150C1V1": xcmPidWorkCentre5150C1V1,
       "xcmPidWorkCentre5150C1V2": xcmPidWorkCentre5150C1V2,
       "xcmPidWCMF3": xcmPidWCMF3,
       "xcmPidWC5632": xcmPidWC5632,
       "xcmPidWC5632V1": xcmPidWC5632V1,
       "xcmPidWC5638": xcmPidWC5638,
       "xcmPidWC5638V1": xcmPidWC5638V1,
       "xcmPidWC5645": xcmPidWC5645,
       "xcmPidWC5645V1": xcmPidWC5645V1,
       "xcmPidWC5655": xcmPidWC5655,
       "xcmPidWC5655V1": xcmPidWC5655V1,
       "xcmPidWC5665": xcmPidWC5665,
       "xcmPidWC5665V1": xcmPidWC5665V1,
       "xcmPidWC5675": xcmPidWC5675,
       "xcmPidWC5675V1": xcmPidWC5675V1,
       "xcmPidWCMF4": xcmPidWCMF4,
       "xcmPidWC5687": xcmPidWC5687,
       "xcmPidWC5687V1": xcmPidWC5687V1,
       "xcmPidWC5030": xcmPidWC5030,
       "xcmPidWC5030V1": xcmPidWC5030V1,
       "xcmPidWC5030V2": xcmPidWC5030V2,
       "xcmPidWC5050": xcmPidWC5050,
       "xcmPidWC5050V1": xcmPidWC5050V1,
       "xcmPidWC5050V2": xcmPidWC5050V2,
       "xcmPidWCMF5": xcmPidWCMF5,
       "xcmPidWC6400": xcmPidWC6400,
       "xcmPidWC6400S": xcmPidWC6400S,
       "xcmPidWC6400Sv1": xcmPidWC6400Sv1,
       "xcmPidWC6400Sv2": xcmPidWC6400Sv2,
       "xcmPidWC6400X": xcmPidWC6400X,
       "xcmPidWC6400Xv1": xcmPidWC6400Xv1,
       "xcmPidWC6400Xv2": xcmPidWC6400Xv2,
       "xcmPidWC6400XF": xcmPidWC6400XF,
       "xcmPidWC6400XFv1": xcmPidWC6400XFv1,
       "xcmPidWC6400XFv2": xcmPidWC6400XFv2,
       "xcmPidWorkCentre5735": xcmPidWorkCentre5735,
       "xcmPidWorkCentre5735C1": xcmPidWorkCentre5735C1,
       "xcmPidWorkCentre5735C1V1": xcmPidWorkCentre5735C1V1,
       "xcmPidWorkCentre5740": xcmPidWorkCentre5740,
       "xcmPidWorkCentre5740C1": xcmPidWorkCentre5740C1,
       "xcmPidWorkCentre5740C1V1": xcmPidWorkCentre5740C1V1,
       "xcmPidWorkCentre5745": xcmPidWorkCentre5745,
       "xcmPidWorkCentre5745C1": xcmPidWorkCentre5745C1,
       "xcmPidWorkCentre5745C1V1": xcmPidWorkCentre5745C1V1,
       "xcmPidWorkCentre5755": xcmPidWorkCentre5755,
       "xcmPidWorkCentre5755C1": xcmPidWorkCentre5755C1,
       "xcmPidWorkCentre5755C1V1": xcmPidWorkCentre5755C1V1,
       "xcmPidWorkCentre5765": xcmPidWorkCentre5765,
       "xcmPidWorkCentre5765C1": xcmPidWorkCentre5765C1,
       "xcmPidWorkCentre5765C1V1": xcmPidWorkCentre5765C1V1,
       "xcmPidWorkCentre5775": xcmPidWorkCentre5775,
       "xcmPidWorkCentre5775C1": xcmPidWorkCentre5775C1,
       "xcmPidWorkCentre5775C1V1": xcmPidWorkCentre5775C1V1,
       "xcmPidWorkCentre5790": xcmPidWorkCentre5790,
       "xcmPidWorkCentre5790C1": xcmPidWorkCentre5790C1,
       "xcmPidWorkCentre5790C1V1": xcmPidWorkCentre5790C1V1,
       "xcmPidWCMF6": xcmPidWCMF6,
       "xcmPidWorkCentre3045B": xcmPidWorkCentre3045B,
       "xcmPidWorkCentre3045BC1": xcmPidWorkCentre3045BC1,
       "xcmPidWorkCentre3045BC1V1": xcmPidWorkCentre3045BC1V1,
       "xcmPidWorkCentre3045NI": xcmPidWorkCentre3045NI,
       "xcmPidWorkCentre3045NIC1": xcmPidWorkCentre3045NIC1,
       "xcmPidWorkCentre3045NIC1V1": xcmPidWorkCentre3045NIC1V1,
       "xcmPidWorkCentre6605": xcmPidWorkCentre6605,
       "xcmPidWorkCentre6605NC1": xcmPidWorkCentre6605NC1,
       "xcmPidWorkCentre6605NC1V1": xcmPidWorkCentre6605NC1V1,
       "xcmPidWorkCentre6605DNC2": xcmPidWorkCentre6605DNC2,
       "xcmPidWorkCentre6605DNC2V1": xcmPidWorkCentre6605DNC2V1,
       "xcmPidWCMF7": xcmPidWCMF7,
       "xcmPidXeroxWideFormat": xcmPidXeroxWideFormat,
       "xcmPidNuveraProductLine": xcmPidNuveraProductLine,
       "xcmPidNuveraEAProductionSystemFamily": xcmPidNuveraEAProductionSystemFamily,
       "xcmPidNuvera100x120x144x157EAPS": xcmPidNuvera100x120x144x157EAPS,
       "xcmPidNuvera100x120x144x157EAPSEmbeddedFFPS": xcmPidNuvera100x120x144x157EAPSEmbeddedFFPS,
       "xcmPidNuvera100x120x144x157EAPSEmbeddedFFPSV1": xcmPidNuvera100x120x144x157EAPSEmbeddedFFPSV1,
       "xcmPidNuveraEAPerfectingProductionSystemFamily": xcmPidNuveraEAPerfectingProductionSystemFamily,
       "xcmPidNuvera200x288x314EAPPS": xcmPidNuvera200x288x314EAPPS,
       "xcmPidNuvera200x288x314EAPPSEmbeddedFFPS": xcmPidNuvera200x288x314EAPPSEmbeddedFFPS,
       "xcmPidNuvera200x288x314EAPPSEmbeddedFFPSv1": xcmPidNuvera200x288x314EAPPSEmbeddedFFPSv1,
       "xcmPidNuveraMXProductionSystemFamily": xcmPidNuveraMXProductionSystemFamily,
       "xcmPidNuvera100x120x144MXPS": xcmPidNuvera100x120x144MXPS,
       "xcmPidNuvera100x120x144MXPSEmbeddedFFPS": xcmPidNuvera100x120x144MXPSEmbeddedFFPS,
       "xcmPidNuvera100x120x144MXPSEmbeddedFFPSV1": xcmPidNuvera100x120x144MXPSEmbeddedFFPSV1,
       "xcmPidNuveraMXPerfectingProductionSystemFamily": xcmPidNuveraMXPerfectingProductionSystemFamily,
       "xcmPidNuvera200x288MXPPS": xcmPidNuvera200x288MXPPS,
       "xcmPidNuvera200x288MXPPSEmbeddedFFPS": xcmPidNuvera200x288MXPPSEmbeddedFFPS,
       "xcmPidNuvera200x288MXPPSEmbeddedFFPSV1": xcmPidNuvera200x288MXPPSEmbeddedFFPSV1,
       "xcmPidColorQube": xcmPidColorQube,
       "xcmPidColorQube9200": xcmPidColorQube9200,
       "xcmPidColorQube9201": xcmPidColorQube9201,
       "xcmPidColorQube9201C1": xcmPidColorQube9201C1,
       "xcmPidColorQube9201C1V1": xcmPidColorQube9201C1V1,
       "xcmPidColorQube9201C1V2": xcmPidColorQube9201C1V2,
       "xcmPidColorQube9201C1V3": xcmPidColorQube9201C1V3,
       "xcmPidColorQube9201C2": xcmPidColorQube9201C2,
       "xcmPidColorQube9201C2V1": xcmPidColorQube9201C2V1,
       "xcmPidColorQube9201C2V2": xcmPidColorQube9201C2V2,
       "xcmPidColorQube9202": xcmPidColorQube9202,
       "xcmPidColorQube9202C1": xcmPidColorQube9202C1,
       "xcmPidColorQube9202C1V1": xcmPidColorQube9202C1V1,
       "xcmPidColorQube9202C1V2": xcmPidColorQube9202C1V2,
       "xcmPidColorQube9202C1V3": xcmPidColorQube9202C1V3,
       "xcmPidColorQube9202C2": xcmPidColorQube9202C2,
       "xcmPidColorQube9202C2V1": xcmPidColorQube9202C2V1,
       "xcmPidColorQube9202C2V2": xcmPidColorQube9202C2V2,
       "xcmPidColorQube9203": xcmPidColorQube9203,
       "xcmPidColorQube9203C1": xcmPidColorQube9203C1,
       "xcmPidColorQube9203C1V1": xcmPidColorQube9203C1V1,
       "xcmPidColorQube9203C1V2": xcmPidColorQube9203C1V2,
       "xcmPidColorQube9203C1V3": xcmPidColorQube9203C1V3,
       "xcmPidColorQube9203C2": xcmPidColorQube9203C2,
       "xcmPidColorQube9203C2V1": xcmPidColorQube9203C2V1,
       "xcmPidColorQube9203C2V2": xcmPidColorQube9203C2V2,
       "xcmPidColorQube8x00": xcmPidColorQube8x00,
       "xcmPidColorQube8700": xcmPidColorQube8700,
       "xcmPidColorQube8700S": xcmPidColorQube8700S,
       "xcmPidColorQube8700Sv1": xcmPidColorQube8700Sv1,
       "xcmPidColorQube8700X": xcmPidColorQube8700X,
       "xcmPidColorQube8700Xv1": xcmPidColorQube8700Xv1,
       "xcmPidColorQube8700XF": xcmPidColorQube8700XF,
       "xcmPidColorQube8700XFv1": xcmPidColorQube8700XFv1,
       "xcmPidColorQube8900": xcmPidColorQube8900,
       "xcmPidColorQube8900X": xcmPidColorQube8900X,
       "xcmPidColorQube8900Xv1": xcmPidColorQube8900Xv1,
       "xcmPidColorQube8900S": xcmPidColorQube8900S,
       "xcmPidColorQube8900Sv1": xcmPidColorQube8900Sv1,
       "xcmPidColorQube9300": xcmPidColorQube9300,
       "xcmPidColorQube9301": xcmPidColorQube9301,
       "xcmPidColorQube9301C1": xcmPidColorQube9301C1,
       "xcmPidColorQube9301C1V1": xcmPidColorQube9301C1V1,
       "xcmPidColorQube9301C1V2": xcmPidColorQube9301C1V2,
       "xcmPidColorQube9302": xcmPidColorQube9302,
       "xcmPidColorQube9302C1": xcmPidColorQube9302C1,
       "xcmPidColorQube9302C1V1": xcmPidColorQube9302C1V1,
       "xcmPidColorQube9302C1V2": xcmPidColorQube9302C1V2,
       "xcmPidColorQube9303": xcmPidColorQube9303,
       "xcmPidColorQube9303C1": xcmPidColorQube9303C1,
       "xcmPidColorQube9303C1V1": xcmPidColorQube9303C1V1,
       "xcmPidColorQube9303C1V2": xcmPidColorQube9303C1V2,
       "xcmPidFXSystems": xcmPidFXSystems,
       "xcmPidEPCProductLine": xcmPidEPCProductLine,
       "xcmPidLPMProductLine": xcmPidLPMProductLine,
       "xcmPidDigitalPrintingPressProductLine": xcmPidDigitalPrintingPressProductLine,
       "xcmCommsConfigTC": xcmCommsConfigTC,
       "xcmSnmpNetbiosDomain": xcmSnmpNetbiosDomain,
       "xcmCOSpecialTypes": xcmCOSpecialTypes,
       "xcmCOSpecialLabel": xcmCOSpecialLabel,
       "xcmCOSpecialImport": xcmCOSpecialImport,
       "xcmCOSpecialRemark": xcmCOSpecialRemark,
       "xcmCOSpecialAddress": xcmCOSpecialAddress,
       "xcmCOSpecialState": xcmCOSpecialState,
       "xcmCOSpecialConditions": xcmCOSpecialConditions,
       "xcmCOSpecialName": xcmCOSpecialName,
       "xcmCOSpecialSupportedInteger": xcmCOSpecialSupportedInteger,
       "xcmCOSpecialSupportedString": xcmCOSpecialSupportedString,
       "xcmCOSpecialAcceptAddress": xcmCOSpecialAcceptAddress,
       "xcmCOSpecialAcceptSubnet": xcmCOSpecialAcceptSubnet,
       "xcmCOSpecialRejectAddress": xcmCOSpecialRejectAddress,
       "xcmCOSpecialRejectSubnet": xcmCOSpecialRejectSubnet,
       "xcmCOSpecialMaxRequestRetries": xcmCOSpecialMaxRequestRetries,
       "xcmCOSpecialRequestTimeout": xcmCOSpecialRequestTimeout,
       "xcmCOSpecialSecurity": xcmCOSpecialSecurity,
       "xcmSnmpIPHostnameDomain": xcmSnmpIPHostnameDomain,
       "xcmCOOsilanSuite": xcmCOOsilanSuite,
       "xcmCOOsilanPhysicals": xcmCOOsilanPhysicals,
       "xcmCOOsilanConnectorType": xcmCOOsilanConnectorType,
       "xcmCOOsilanConnectorOverride": xcmCOOsilanConnectorOverride,
       "xcmCOOsilanConnectorDetected": xcmCOOsilanConnectorDetected,
       "xcmCOOsilanConnectorAdaptive": xcmCOOsilanConnectorAdaptive,
       "xcmCOOsilanSignalType": xcmCOOsilanSignalType,
       "xcmCOOsilanSignalOverride": xcmCOOsilanSignalOverride,
       "xcmCOOsilanSignalDetected": xcmCOOsilanSignalDetected,
       "xcmCOOsilanSignalAdaptive": xcmCOOsilanSignalAdaptive,
       "xcmCOOsilanSignalSupport": xcmCOOsilanSignalSupport,
       "xcmCOOsilanSignalCapability": xcmCOOsilanSignalCapability,
       "xcmCOOsilanCableType": xcmCOOsilanCableType,
       "xcmCOOsilanCableOverride": xcmCOOsilanCableOverride,
       "xcmCOOsilanCableDetected": xcmCOOsilanCableDetected,
       "xcmCOOsilanCableAdaptive": xcmCOOsilanCableAdaptive,
       "xcmCOOsilanCableSupport": xcmCOOsilanCableSupport,
       "xcmCOOsilanDatalinks": xcmCOOsilanDatalinks,
       "xcmCOOsilanFrameType": xcmCOOsilanFrameType,
       "xcmCOOsilanFrameOverride": xcmCOOsilanFrameOverride,
       "xcmCOOsilanFrameDetected": xcmCOOsilanFrameDetected,
       "xcmCOOsilanFrameAdaptive": xcmCOOsilanFrameAdaptive,
       "xcmCOOsilanEthernet": xcmCOOsilanEthernet,
       "xcmCOOsilanEthernetType": xcmCOOsilanEthernetType,
       "xcmCOOsilanEthernetDevice": xcmCOOsilanEthernetDevice,
       "xcmCOOsilanEthernetDeviceName": xcmCOOsilanEthernetDeviceName,
       "xcmCOOsilanEthernetSpeed": xcmCOOsilanEthernetSpeed,
       "xcmCOOsilanEthernetSpeedOverride": xcmCOOsilanEthernetSpeedOverride,
       "xcmCOOsilanEthernetSpeedDetected": xcmCOOsilanEthernetSpeedDetected,
       "xcmCOOsilanEthernetSpeedAdaptive": xcmCOOsilanEthernetSpeedAdaptive,
       "xcmCOOsilanEthernetSpeedSupport": xcmCOOsilanEthernetSpeedSupport,
       "xcmCOOsilanEthernetMinSpeed": xcmCOOsilanEthernetMinSpeed,
       "xcmCOOsilanEthernetMaxSpeed": xcmCOOsilanEthernetMaxSpeed,
       "xcmCOOsilanEthernetMaxFrameSize": xcmCOOsilanEthernetMaxFrameSize,
       "xcmCOOsilanEthernetInterface": xcmCOOsilanEthernetInterface,
       "xcmCOOsilanEthernetMACAddress": xcmCOOsilanEthernetMACAddress,
       "xcmCOOsilanTokenBus": xcmCOOsilanTokenBus,
       "xcmCOOsilanTokenRing": xcmCOOsilanTokenRing,
       "xcmCOOsilanTokenRingType": xcmCOOsilanTokenRingType,
       "xcmCOOsilanTokenRingDevice": xcmCOOsilanTokenRingDevice,
       "xcmCOOsilanTokenRingDeviceName": xcmCOOsilanTokenRingDeviceName,
       "xcmCOOsilanTokenRingSpeed": xcmCOOsilanTokenRingSpeed,
       "xcmCOOsilanTokenRingSpeedOverride": xcmCOOsilanTokenRingSpeedOverride,
       "xcmCOOsilanTokenRingSpeedDetected": xcmCOOsilanTokenRingSpeedDetected,
       "xcmCOOsilanTokenRingSpeedAdaptive": xcmCOOsilanTokenRingSpeedAdaptive,
       "xcmCOOsilanTokenRingSpeedSupport": xcmCOOsilanTokenRingSpeedSupport,
       "xcmCOOsilanTokenRingMinSpeed": xcmCOOsilanTokenRingMinSpeed,
       "xcmCOOsilanTokenRingMaxSpeed": xcmCOOsilanTokenRingMaxSpeed,
       "xcmCOOsilanTokenRingMaxFrameSize": xcmCOOsilanTokenRingMaxFrameSize,
       "xcmCOOsilanTokenRingInterface": xcmCOOsilanTokenRingInterface,
       "xcmCOOsilanTokenRingMACAddress": xcmCOOsilanTokenRingMACAddress,
       "xcmCOOsilanTokenRingSSR": xcmCOOsilanTokenRingSSR,
       "xcmCOOsilanTokenRingSSRAllRoute": xcmCOOsilanTokenRingSSRAllRoute,
       "xcmCOOsilanTokenRingSSRSingleRR": xcmCOOsilanTokenRingSSRSingleRR,
       "xcmCOOsilanTokenRingSSRAdaptive": xcmCOOsilanTokenRingSSRAdaptive,
       "xcmCOOsilanTokenRingMACOverride": xcmCOOsilanTokenRingMACOverride,
       "xcmCOOsilanFDDI": xcmCOOsilanFDDI,
       "xcmCOOsiwanSuite": xcmCOOsiwanSuite,
       "xcmCOOsiwanPhysicals": xcmCOOsiwanPhysicals,
       "xcmCOOsiwanConnectorType": xcmCOOsiwanConnectorType,
       "xcmCOOsiwanConnectorOverride": xcmCOOsiwanConnectorOverride,
       "xcmCOOsiwanConnectorDetected": xcmCOOsiwanConnectorDetected,
       "xcmCOOsiwanConnectorAdaptive": xcmCOOsiwanConnectorAdaptive,
       "xcmCOOsiwanSignalType": xcmCOOsiwanSignalType,
       "xcmCOOsiwanSignalOverride": xcmCOOsiwanSignalOverride,
       "xcmCOOsiwanSignalDetected": xcmCOOsiwanSignalDetected,
       "xcmCOOsiwanSignalAdaptive": xcmCOOsiwanSignalAdaptive,
       "xcmCOOsiwanSignalSupport": xcmCOOsiwanSignalSupport,
       "xcmCOOsiwanLineNumber": xcmCOOsiwanLineNumber,
       "xcmCOOsiwanSendManual": xcmCOOsiwanSendManual,
       "xcmCOOsiwanReceiveManual": xcmCOOsiwanReceiveManual,
       "xcmCOOsiwanRingsBeforeAnswer": xcmCOOsiwanRingsBeforeAnswer,
       "xcmCOOsiwanErrorCorrection": xcmCOOsiwanErrorCorrection,
       "xcmCOOsiwanDirection": xcmCOOsiwanDirection,
       "xcmCOOsiwanSendStartTime": xcmCOOsiwanSendStartTime,
       "xcmCOOsiwanSendEndTime": xcmCOOsiwanSendEndTime,
       "xcmCOOsiwanReceiveStartTime": xcmCOOsiwanReceiveStartTime,
       "xcmCOOsiwanReceiveEndTime": xcmCOOsiwanReceiveEndTime,
       "xcmCOOsiwanRingerVolume": xcmCOOsiwanRingerVolume,
       "xcmCOOsiwanMonitorVolume": xcmCOOsiwanMonitorVolume,
       "xcmCOOsiwanAlarmVolume": xcmCOOsiwanAlarmVolume,
       "xcmCOOsiwanKeyboardVolume": xcmCOOsiwanKeyboardVolume,
       "xcmCOOsiwanDatalinks": xcmCOOsiwanDatalinks,
       "xcmCOOsiwanFax": xcmCOOsiwanFax,
       "xcmCOOsiwanFaxAddress": xcmCOOsiwanFaxAddress,
       "xcmCOOsiwanFaxDevice": xcmCOOsiwanFaxDevice,
       "xcmCOOsiwanFaxDeviceName": xcmCOOsiwanFaxDeviceName,
       "xcmCOOsiwanFaxSpeed": xcmCOOsiwanFaxSpeed,
       "xcmCOOsiwanFaxSpeedOverride": xcmCOOsiwanFaxSpeedOverride,
       "xcmCOOsiwanFaxSpeedDetected": xcmCOOsiwanFaxSpeedDetected,
       "xcmCOOsiwanFaxSpeedAdaptive": xcmCOOsiwanFaxSpeedAdaptive,
       "xcmCOOsiwanFaxSpeedSupport": xcmCOOsiwanFaxSpeedSupport,
       "xcmCOOsiwanFaxMinSpeed": xcmCOOsiwanFaxMinSpeed,
       "xcmCOOsiwanFaxMaxSpeed": xcmCOOsiwanFaxMaxSpeed,
       "xcmCOOsiwanFaxInterface": xcmCOOsiwanFaxInterface,
       "xcmCOOsiwanFaxAcceptAddress": xcmCOOsiwanFaxAcceptAddress,
       "xcmCOOsiwanFaxRejectAddress": xcmCOOsiwanFaxRejectAddress,
       "xcmCOOsiwanFaxSendCoverSheet": xcmCOOsiwanFaxSendCoverSheet,
       "xcmCOOsiwanFaxSendHeader": xcmCOOsiwanFaxSendHeader,
       "xcmCOOsiwanFaxSendManual": xcmCOOsiwanFaxSendManual,
       "xcmCOOsiwanFaxSendSecurity": xcmCOOsiwanFaxSendSecurity,
       "xcmCOOsiwanFaxMaxRetries": xcmCOOsiwanFaxMaxRetries,
       "xcmCOOsiwanFaxRetryInterval": xcmCOOsiwanFaxRetryInterval,
       "xcmCOOsiwanFaxSendStoreTime": xcmCOOsiwanFaxSendStoreTime,
       "xcmCOOsiwanFaxMaxOriginalLength": xcmCOOsiwanFaxMaxOriginalLength,
       "xcmCOOsiwanFaxReceiveCoverSheet": xcmCOOsiwanFaxReceiveCoverSheet,
       "xcmCOOsiwanFaxReceiveFooter": xcmCOOsiwanFaxReceiveFooter,
       "xcmCOOsiwanFaxReceiveToMemory": xcmCOOsiwanFaxReceiveToMemory,
       "xcmCOOsiwanFaxReceiveManual": xcmCOOsiwanFaxReceiveManual,
       "xcmCOOsiwanFaxReceiveSecurity": xcmCOOsiwanFaxReceiveSecurity,
       "xcmCOOsiwanFaxReceiveAutoReduce": xcmCOOsiwanFaxReceiveAutoReduce,
       "xcmCOOsiwanFaxReceiveOverflow": xcmCOOsiwanFaxReceiveOverflow,
       "xcmCOOsiwanFaxReceiveCollate": xcmCOOsiwanFaxReceiveCollate,
       "xcmCOOsiwanFaxG3": xcmCOOsiwanFaxG3,
       "xcmCOOsiwanFaxG4": xcmCOOsiwanFaxG4,
       "xcmCOOsiwanFaxLineSwitching": xcmCOOsiwanFaxLineSwitching,
       "xcmCOOsiwanFaxMaxSpeedDial": xcmCOOsiwanFaxMaxSpeedDial,
       "xcmCOOsiwanPSTN": xcmCOOsiwanPSTN,
       "xcmCOOsiwanPSTNAddress": xcmCOOsiwanPSTNAddress,
       "xcmCOOsiwanISDN": xcmCOOsiwanISDN,
       "xcmCOOsiwanISDNAddress": xcmCOOsiwanISDNAddress,
       "xcmCOOsiwanTransports": xcmCOOsiwanTransports,
       "xcmCOOsiwanApplications": xcmCOOsiwanApplications,
       "xcmCOOsiwanDPA": xcmCOOsiwanDPA,
       "xcmCOOsiwanFTAM": xcmCOOsiwanFTAM,
       "xcmCOOsiwanVT": xcmCOOsiwanVT,
       "xcmCOOsiwanMHS": xcmCOOsiwanMHS,
       "xcmCOOsiwanDS": xcmCOOsiwanDS,
       "xcmCOOsiwanDAP": xcmCOOsiwanDAP,
       "xcmCOOsiwanDSP": xcmCOOsiwanDSP,
       "xcmCOOsiwanMgmt": xcmCOOsiwanMgmt,
       "xcmCOOsiwanCMIP": xcmCOOsiwanCMIP,
       "xcmCOOsiwanSecurity": xcmCOOsiwanSecurity,
       "xcmCOInternetSuite": xcmCOInternetSuite,
       "xcmCOInternetDatalinks": xcmCOInternetDatalinks,
       "xcmCOInternetSLIP": xcmCOInternetSLIP,
       "xcmCOInternetPPP": xcmCOInternetPPP,
       "xcmCOInternetIP": xcmCOInternetIP,
       "xcmCOInternetIPAddress": xcmCOInternetIPAddress,
       "xcmCOInternetIPSocketAddress": xcmCOInternetIPSocketAddress,
       "xcmCOInternetIPSubnetMask": xcmCOInternetIPSubnetMask,
       "xcmCOInternetIPAddressViaRARP": xcmCOInternetIPAddressViaRARP,
       "xcmCOInternetIPDefaultGateway": xcmCOInternetIPDefaultGateway,
       "xcmCOInternetIPAddressSource": xcmCOInternetIPAddressSource,
       "xcmCOInternetIPDatalinks": xcmCOInternetIPDatalinks,
       "xcmCOInternetIPHostName": xcmCOInternetIPHostName,
       "xcmCOInternetIPAutoIPAddress": xcmCOInternetIPAutoIPAddress,
       "xcmCOInternetIPAutoEnable": xcmCOInternetIPAutoEnable,
       "xcmCOInternetIPBcastCache": xcmCOInternetIPBcastCache,
       "xcmCOInternetIPBCacheEnabled": xcmCOInternetIPBCacheEnabled,
       "xcmCOInternetIPBCacheAddress1": xcmCOInternetIPBCacheAddress1,
       "xcmCOInternetIPBCacheAddress2": xcmCOInternetIPBCacheAddress2,
       "xcmCOInternetIPBCacheAddress3": xcmCOInternetIPBCacheAddress3,
       "xcmCOInternetIPBCacheAddress4": xcmCOInternetIPBCacheAddress4,
       "xcmCOInternetIPInstall": xcmCOInternetIPInstall,
       "xcmCOInternetIPInstallSelect": xcmCOInternetIPInstallSelect,
       "xcmCOInternetIPAllSubnetsLocal": xcmCOInternetIPAllSubnetsLocal,
       "xcmCOInternetIPSec": xcmCOInternetIPSec,
       "xcmCOInternetICMP": xcmCOInternetICMP,
       "xcmCOInternetARP": xcmCOInternetARP,
       "xcmCOInternetDHCP": xcmCOInternetDHCP,
       "xcmCOInternetDHCPClassID": xcmCOInternetDHCPClassID,
       "xcmCOInternetDHCPLeaseTime": xcmCOInternetDHCPLeaseTime,
       "xcmCOInternetDHCPRequestTimeout": xcmCOInternetDHCPRequestTimeout,
       "xcmCOInternetDHCPServer": xcmCOInternetDHCPServer,
       "xcmCOInternetDHCPOptionGet": xcmCOInternetDHCPOptionGet,
       "xcmCODHCPGetSubnetMask": xcmCODHCPGetSubnetMask,
       "xcmCODHCPGetSubnetTimeOffset": xcmCODHCPGetSubnetTimeOffset,
       "xcmCODHCPGetRouter": xcmCODHCPGetRouter,
       "xcmCODHCPGetTPTimeServer": xcmCODHCPGetTPTimeServer,
       "xcmCODHCPGetIEN116NameServer": xcmCODHCPGetIEN116NameServer,
       "xcmCODHCPGetDNSNameServer": xcmCODHCPGetDNSNameServer,
       "xcmCODHCPGetLogServer": xcmCODHCPGetLogServer,
       "xcmCODHCPGetCookieServer": xcmCODHCPGetCookieServer,
       "xcmCODHCPGetLPRServer": xcmCODHCPGetLPRServer,
       "xcmCODHCPGetImpressServer": xcmCODHCPGetImpressServer,
       "xcmCODHCPGetResourceLocServer": xcmCODHCPGetResourceLocServer,
       "xcmCODHCPGetHostName": xcmCODHCPGetHostName,
       "xcmCODHCPGetBootFileSize": xcmCODHCPGetBootFileSize,
       "xcmCODHCPGetMeritDumpFile": xcmCODHCPGetMeritDumpFile,
       "xcmCODHCPGetDNSDomainName": xcmCODHCPGetDNSDomainName,
       "xcmCODHCPGetSwapServer": xcmCODHCPGetSwapServer,
       "xcmCODHCPGetRootPath": xcmCODHCPGetRootPath,
       "xcmCODHCPGetExtensionsPath": xcmCODHCPGetExtensionsPath,
       "xcmCODHCPGetIPForwarding": xcmCODHCPGetIPForwarding,
       "xcmCODHCPGetNLSourceRouting": xcmCODHCPGetNLSourceRouting,
       "xcmCODHCPGetNLPolicyFilter": xcmCODHCPGetNLPolicyFilter,
       "xcmCODHCPGetMaxIPDatagramSize": xcmCODHCPGetMaxIPDatagramSize,
       "xcmCODHCPGetIPDefaultTTL": xcmCODHCPGetIPDefaultTTL,
       "xcmCODHCPGetPathMTUAgeTimeout": xcmCODHCPGetPathMTUAgeTimeout,
       "xcmCODHCPGetPathMTUPlateau": xcmCODHCPGetPathMTUPlateau,
       "xcmCODHCPGetInterfaceMTUSize": xcmCODHCPGetInterfaceMTUSize,
       "xcmCODHCPGetAllSubnetsLocal": xcmCODHCPGetAllSubnetsLocal,
       "xcmCODHCPGetBroadcastAddress": xcmCODHCPGetBroadcastAddress,
       "xcmCODHCPGetMaskDiscovery": xcmCODHCPGetMaskDiscovery,
       "xcmCODHCPGetMaskSupplier": xcmCODHCPGetMaskSupplier,
       "xcmCODHCPGetRouterDiscovery": xcmCODHCPGetRouterDiscovery,
       "xcmCODHCPGetRouterSolAddress": xcmCODHCPGetRouterSolAddress,
       "xcmCODHCPGetStaticRoute": xcmCODHCPGetStaticRoute,
       "xcmCODHCPGetARPTrailer": xcmCODHCPGetARPTrailer,
       "xcmCODHCPGetARPCacheTimeout": xcmCODHCPGetARPCacheTimeout,
       "xcmCODHCPGetEthernetFrameIEEE": xcmCODHCPGetEthernetFrameIEEE,
       "xcmCODHCPGetTCPDefaultTTL": xcmCODHCPGetTCPDefaultTTL,
       "xcmCODHCPGetTCPKeepInterval": xcmCODHCPGetTCPKeepInterval,
       "xcmCODHCPGetTCPKeepGarbage": xcmCODHCPGetTCPKeepGarbage,
       "xcmCODHCPGetNISDomainName": xcmCODHCPGetNISDomainName,
       "xcmCODHCPGetNISNameServer": xcmCODHCPGetNISNameServer,
       "xcmCODHCPGetNTPTimeServer": xcmCODHCPGetNTPTimeServer,
       "xcmCODHCPGetVendorSpecific": xcmCODHCPGetVendorSpecific,
       "xcmCODHCPGetNetbiosNameServer": xcmCODHCPGetNetbiosNameServer,
       "xcmCODHCPGetNetbiosDistServer": xcmCODHCPGetNetbiosDistServer,
       "xcmCODHCPGetNetbiosNodeType": xcmCODHCPGetNetbiosNodeType,
       "xcmCODHCPGetNetbiosScope": xcmCODHCPGetNetbiosScope,
       "xcmCODHCPGetXWindowFontServer": xcmCODHCPGetXWindowFontServer,
       "xcmCODHCPGetXWindowDisplayMgr": xcmCODHCPGetXWindowDisplayMgr,
       "xcmCODHCPGetMessageType": xcmCODHCPGetMessageType,
       "xcmCODHCPGetServerID": xcmCODHCPGetServerID,
       "xcmCODHCPGetParameterRequest": xcmCODHCPGetParameterRequest,
       "xcmCODHCPGetErrorMessage": xcmCODHCPGetErrorMessage,
       "xcmCODHCPGetMaxMessageSize": xcmCODHCPGetMaxMessageSize,
       "xcmCODHCPGetRenewT1Interval": xcmCODHCPGetRenewT1Interval,
       "xcmCODHCPGetRebindT2Interval": xcmCODHCPGetRebindT2Interval,
       "xcmCODHCPGetNISPlusDomainName": xcmCODHCPGetNISPlusDomainName,
       "xcmCODHCPGetNISPlusNameServer": xcmCODHCPGetNISPlusNameServer,
       "xcmCODHCPGetTFTPServerName": xcmCODHCPGetTFTPServerName,
       "xcmCODHCPGetBootFileName": xcmCODHCPGetBootFileName,
       "xcmCODHCPGetMobileIPHomeAgent": xcmCODHCPGetMobileIPHomeAgent,
       "xcmCODHCPGetSMTPMailServer": xcmCODHCPGetSMTPMailServer,
       "xcmCODHCPGetPOP3MailServer": xcmCODHCPGetPOP3MailServer,
       "xcmCODHCPGetNNTPNewsServer": xcmCODHCPGetNNTPNewsServer,
       "xcmCODHCPGetWWWServer": xcmCODHCPGetWWWServer,
       "xcmCODHCPGetFingerServer": xcmCODHCPGetFingerServer,
       "xcmCODHCPGetIRCServer": xcmCODHCPGetIRCServer,
       "xcmCODHCPGetStreetTalkServer": xcmCODHCPGetStreetTalkServer,
       "xcmCODHCPGetStreetTalkDAServer": xcmCODHCPGetStreetTalkDAServer,
       "xcmCODHCPGetNDSNameServer": xcmCODHCPGetNDSNameServer,
       "xcmCODHCPGetNDSTreeName": xcmCODHCPGetNDSTreeName,
       "xcmCODHCPGetNDSContext": xcmCODHCPGetNDSContext,
       "xcmCOInternetDHCPOptionSet": xcmCOInternetDHCPOptionSet,
       "xcmCODHCPSetIPAddressRequest": xcmCODHCPSetIPAddressRequest,
       "xcmCODHCPSetIPAddressLeaseTime": xcmCODHCPSetIPAddressLeaseTime,
       "xcmCODHCPSetOptionOverload": xcmCODHCPSetOptionOverload,
       "xcmCODHCPSetClassID": xcmCODHCPSetClassID,
       "xcmCODHCPSetClientID": xcmCODHCPSetClientID,
       "xcmCOInternetBOOTP": xcmCOInternetBOOTP,
       "xcmCOInternetBOOTPBroadcastEnabled": xcmCOInternetBOOTPBroadcastEnabled,
       "xcmCOInternetRARP": xcmCOInternetRARP,
       "xcmCOInternetIPv6": xcmCOInternetIPv6,
       "xcmCOInternetIPv6Address": xcmCOInternetIPv6Address,
       "xcmCOInternetIPv6SocketAddress": xcmCOInternetIPv6SocketAddress,
       "xcmCOInternetIPv6ManuallyAssignedAddress": xcmCOInternetIPv6ManuallyAssignedAddress,
       "xcmCOInternetIPv6DHCPv6AssignedAddress": xcmCOInternetIPv6DHCPv6AssignedAddress,
       "xcmCOInternetIPv6LinkLocalAddress": xcmCOInternetIPv6LinkLocalAddress,
       "xcmCOInternetIPv6StatelessAddress": xcmCOInternetIPv6StatelessAddress,
       "xcmCOInternetIPv6RandomAddress": xcmCOInternetIPv6RandomAddress,
       "xcmCOInternetIPv6AutomaticAddressing": xcmCOInternetIPv6AutomaticAddressing,
       "xcmCOInternetIPv6EUI64InterfaceId": xcmCOInternetIPv6EUI64InterfaceId,
       "xcmCOInternetIPv6RouterAdvertisementAddressPrefix": xcmCOInternetIPv6RouterAdvertisementAddressPrefix,
       "xcmCOInternetIPv6DefaultGateway": xcmCOInternetIPv6DefaultGateway,
       "xcmCOInternetIPv6HostName": xcmCOInternetIPv6HostName,
       "xcmCOInternetTransports": xcmCOInternetTransports,
       "xcmCOInternetUDP": xcmCOInternetUDP,
       "xcmCOInternetUDPAddress": xcmCOInternetUDPAddress,
       "xcmCOInternetUDPPort": xcmCOInternetUDPPort,
       "xcmCOInternetTCP": xcmCOInternetTCP,
       "xcmCOInternetTCPAddress": xcmCOInternetTCPAddress,
       "xcmCOInternetTCPPort": xcmCOInternetTCPPort,
       "xcmCOInternetTCPMaxSegmentSize": xcmCOInternetTCPMaxSegmentSize,
       "xcmCOInternetPing": xcmCOInternetPing,
       "xcmCOInternetSSL3": xcmCOInternetSSL3,
       "xcmCOInternetSSL3Port": xcmCOInternetSSL3Port,
       "xcmCOInternetSSL3CipherStrength": xcmCOInternetSSL3CipherStrength,
       "xcmCOInternetTLS": xcmCOInternetTLS,
       "xcmCOInternetICMPv6": xcmCOInternetICMPv6,
       "xcmCOInternetRaw": xcmCOInternetRaw,
       "xcmCOInternetRawHostName": xcmCOInternetRawHostName,
       "xcmCOInternetRawHostAddress": xcmCOInternetRawHostAddress,
       "xcmCOInternetRawListenSocket": xcmCOInternetRawListenSocket,
       "xcmCOInternetRawMaxClients": xcmCOInternetRawMaxClients,
       "xcmCOInternetRawAcceptAddress": xcmCOInternetRawAcceptAddress,
       "xcmCOInternetRawAcceptSubnet": xcmCOInternetRawAcceptSubnet,
       "xcmCOInternetRawRejectAddress": xcmCOInternetRawRejectAddress,
       "xcmCOInternetRawRejectSubnet": xcmCOInternetRawRejectSubnet,
       "xcmCOInternetRawSpool": xcmCOInternetRawSpool,
       "xcmCOInternetRawMaxSpool": xcmCOInternetRawMaxSpool,
       "xcmCOInternetRawJobTimeout": xcmCOInternetRawJobTimeout,
       "xcmCOInternetRawAutoSwitch": xcmCOInternetRawAutoSwitch,
       "xcmCOInternetRawBinaryPS": xcmCOInternetRawBinaryPS,
       "xcmCOInternetRawDefaultPDL": xcmCOInternetRawDefaultPDL,
       "xcmCOInternetRawBidirectional": xcmCOInternetRawBidirectional,
       "xcmCOInternetIPP": xcmCOInternetIPP,
       "xcmCOInternetIPPHostName": xcmCOInternetIPPHostName,
       "xcmCOInternetIPPHostAddress": xcmCOInternetIPPHostAddress,
       "xcmCOInternetIPPListenSocket": xcmCOInternetIPPListenSocket,
       "xcmCOInternetIPPMaxClients": xcmCOInternetIPPMaxClients,
       "xcmCOInternetIPPVersionString": xcmCOInternetIPPVersionString,
       "xcmCOInternetIPPAcceptAddress": xcmCOInternetIPPAcceptAddress,
       "xcmCOInternetIPPAcceptSubnet": xcmCOInternetIPPAcceptSubnet,
       "xcmCOInternetIPPRejectAddress": xcmCOInternetIPPRejectAddress,
       "xcmCOInternetIPPRejectSubnet": xcmCOInternetIPPRejectSubnet,
       "xcmCOInternetIPPSpool": xcmCOInternetIPPSpool,
       "xcmCOInternetIPPMaxSpool": xcmCOInternetIPPMaxSpool,
       "xcmCOInternetIPPJobTimeout": xcmCOInternetIPPJobTimeout,
       "xcmCOInternetIPPAutoSwitch": xcmCOInternetIPPAutoSwitch,
       "xcmCOInternetIPPBinaryPS": xcmCOInternetIPPBinaryPS,
       "xcmCOInternetIPPDefaultPDL": xcmCOInternetIPPDefaultPDL,
       "xcmCOInternetIPPAuthScheme": xcmCOInternetIPPAuthScheme,
       "xcmCOInternetLPR": xcmCOInternetLPR,
       "xcmCOInternetLPRHostName": xcmCOInternetLPRHostName,
       "xcmCOInternetLPRHostAddress": xcmCOInternetLPRHostAddress,
       "xcmCOInternetLPRListenSocket": xcmCOInternetLPRListenSocket,
       "xcmCOInternetLPRMaxClients": xcmCOInternetLPRMaxClients,
       "xcmCOInternetLPRAcceptAddress": xcmCOInternetLPRAcceptAddress,
       "xcmCOInternetLPRAcceptSubnet": xcmCOInternetLPRAcceptSubnet,
       "xcmCOInternetLPRRejectAddress": xcmCOInternetLPRRejectAddress,
       "xcmCOInternetLPRRejectSubnet": xcmCOInternetLPRRejectSubnet,
       "xcmCOInternetLPRSpool": xcmCOInternetLPRSpool,
       "xcmCOInternetLPRMaxSpool": xcmCOInternetLPRMaxSpool,
       "xcmCOInternetLPRJobTimeout": xcmCOInternetLPRJobTimeout,
       "xcmCOInternetLPRAutoSwitch": xcmCOInternetLPRAutoSwitch,
       "xcmCOInternetLPRBinaryPS": xcmCOInternetLPRBinaryPS,
       "xcmCOInternetLPRDefaultPDL": xcmCOInternetLPRDefaultPDL,
       "xcmCOInternetFTP": xcmCOInternetFTP,
       "xcmCOInternetFTPPassiveMode": xcmCOInternetFTPPassiveMode,
       "xcmCOInternetSMTP": xcmCOInternetSMTP,
       "xcmCOInternetSMTPHostName": xcmCOInternetSMTPHostName,
       "xcmCOInternetSMTPHostAddress": xcmCOInternetSMTPHostAddress,
       "xcmCOInternetSMTPListenSocket": xcmCOInternetSMTPListenSocket,
       "xcmCOInternetSMTPMaxClients": xcmCOInternetSMTPMaxClients,
       "xcmCOInternetSMTPAcceptAddress": xcmCOInternetSMTPAcceptAddress,
       "xcmCOInternetSMTPAcceptSubnet": xcmCOInternetSMTPAcceptSubnet,
       "xcmCOInternetSMTPRejectAddress": xcmCOInternetSMTPRejectAddress,
       "xcmCOInternetSMTPRejectSubnet": xcmCOInternetSMTPRejectSubnet,
       "xcmCOInternetSMTPSpool": xcmCOInternetSMTPSpool,
       "xcmCOInternetSMTPMaxSpool": xcmCOInternetSMTPMaxSpool,
       "xcmCOInternetSMTPJobTimeout": xcmCOInternetSMTPJobTimeout,
       "xcmCOInternetSMTPAutoSwitch": xcmCOInternetSMTPAutoSwitch,
       "xcmCOInternetSMTPBinaryPS": xcmCOInternetSMTPBinaryPS,
       "xcmCOInternetSMTPDefaultPDL": xcmCOInternetSMTPDefaultPDL,
       "xcmCOInternetSMTPSubject": xcmCOInternetSMTPSubject,
       "xcmCOInternetSMTPSignatureLine": xcmCOInternetSMTPSignatureLine,
       "xcmCOInternetSMTPUserName": xcmCOInternetSMTPUserName,
       "xcmCOInternetSMTPPassword": xcmCOInternetSMTPPassword,
       "xcmCOInternetSMTPMaxInputText": xcmCOInternetSMTPMaxInputText,
       "xcmCOInternetSMTPMaxInputAttach": xcmCOInternetSMTPMaxInputAttach,
       "xcmCOInternetSMTPMaxOutputText": xcmCOInternetSMTPMaxOutputText,
       "xcmCOInternetSMTPMaxOutputAttach": xcmCOInternetSMTPMaxOutputAttach,
       "xcmCOInternetSMTPConfirmRequest": xcmCOInternetSMTPConfirmRequest,
       "xcmCOInternetSMTPConfirmReply": xcmCOInternetSMTPConfirmReply,
       "xcmCOInternetSMTPConfirmTimeout": xcmCOInternetSMTPConfirmTimeout,
       "xcmCOInternetSMTPFeatureReply": xcmCOInternetSMTPFeatureReply,
       "xcmCOInternetSMTPMailAddress": xcmCOInternetSMTPMailAddress,
       "xcmCOInternetSMTPMaxInFragments": xcmCOInternetSMTPMaxInFragments,
       "xcmCOInternetSMTPMaxOutFragments": xcmCOInternetSMTPMaxOutFragments,
       "xcmCOInternetSMTPMaxInAttachments": xcmCOInternetSMTPMaxInAttachments,
       "xcmCOInternetSMTPMaxOutAttachments": xcmCOInternetSMTPMaxOutAttachments,
       "xcmCOInternetSMTPMaxInputSize": xcmCOInternetSMTPMaxInputSize,
       "xcmCOInternetSMTPMaxOutputSize": xcmCOInternetSMTPMaxOutputSize,
       "xcmCOInternetSMTPReversePath": xcmCOInternetSMTPReversePath,
       "xcmCOInternetSMTPAutoServer": xcmCOInternetSMTPAutoServer,
       "xcmCOInternetTelnet": xcmCOInternetTelnet,
       "xcmCOInternetDNS": xcmCOInternetDNS,
       "xcmCOInternetDNSDomainName": xcmCOInternetDNSDomainName,
       "xcmCOInternetDNSLanguage": xcmCOInternetDNSLanguage,
       "xcmCOInternetDNSCharset": xcmCOInternetDNSCharset,
       "xcmCOInternetDNSServerName": xcmCOInternetDNSServerName,
       "xcmCOInternetDNSServerAddress": xcmCOInternetDNSServerAddress,
       "xcmCOInternetDNSServerResolvedAddress": xcmCOInternetDNSServerResolvedAddress,
       "xcmCOInternetDNSServerTimeout": xcmCOInternetDNSServerTimeout,
       "xcmCOInternetDNSAppendDomainName": xcmCOInternetDNSAppendDomainName,
       "xcmCOInternetDNSAppendParentDomains": xcmCOInternetDNSAppendParentDomains,
       "xcmCOInternetDNSDomainNameList": xcmCOInternetDNSDomainNameList,
       "xcmCOInternetDNSDynamicUpdate": xcmCOInternetDNSDynamicUpdate,
       "xcmCOInternetDNSUpdatePolicy": xcmCOInternetDNSUpdatePolicy,
       "xcmCOInternetDNSMulticastEnable": xcmCOInternetDNSMulticastEnable,
       "xcmCOInternetIOSDiscoveryEnable": xcmCOInternetIOSDiscoveryEnable,
       "xcmCOInternetTFTP": xcmCOInternetTFTP,
       "xcmCOInternetHTTP": xcmCOInternetHTTP,
       "xcmCOInternetHTTPAddressURL": xcmCOInternetHTTPAddressURL,
       "xcmCOInternetHTTPAddressURI": xcmCOInternetHTTPAddressURI,
       "xcmCOInternetHTTPAddressURN": xcmCOInternetHTTPAddressURN,
       "xcmCOInternetHTTPVersionString": xcmCOInternetHTTPVersionString,
       "xcmCOInternetHTTPListenSocket": xcmCOInternetHTTPListenSocket,
       "xcmCOInternetHTTPMaxClients": xcmCOInternetHTTPMaxClients,
       "xcmCOInternetHTTPClientTimeout": xcmCOInternetHTTPClientTimeout,
       "xcmCOInternetHTTPStatusRefresh": xcmCOInternetHTTPStatusRefresh,
       "xcmCOInternetHTTPAdminAddress": xcmCOInternetHTTPAdminAddress,
       "xcmCOInternetHTTPKeyUsrAddress": xcmCOInternetHTTPKeyUsrAddress,
       "xcmCOInternetHTTPProxy": xcmCOInternetHTTPProxy,
       "xcmCOInternetHTTPProxyIPAddress": xcmCOInternetHTTPProxyIPAddress,
       "xcmCOInternetHTTPProxyHostName": xcmCOInternetHTTPProxyHostName,
       "xcmCOInternetHTTPProxyPortNumber": xcmCOInternetHTTPProxyPortNumber,
       "xcmCOInternetHTTPProxyExceptions": xcmCOInternetHTTPProxyExceptions,
       "xcmCOInternetHTTPProxyServer": xcmCOInternetHTTPProxyServer,
       "xcmCOInternetHTTPProxyUserName": xcmCOInternetHTTPProxyUserName,
       "xcmCOInternetHTTPProxyPassword": xcmCOInternetHTTPProxyPassword,
       "xcmCOInternetHTTPProxyAutoDetect": xcmCOInternetHTTPProxyAutoDetect,
       "xcmCOInternetHTTPProxyShareSettings": xcmCOInternetHTTPProxyShareSettings,
       "xcmCOInternetHTTPProxyAuthValid": xcmCOInternetHTTPProxyAuthValid,
       "xcmCOInternetHTTPInfoFwd": xcmCOInternetHTTPInfoFwd,
       "xcmCOInternetSNMP": xcmCOInternetSNMP,
       "xcmCOInternetSNMPVersion": xcmCOInternetSNMPVersion,
       "xcmCOInternetSNMPAdminAddress": xcmCOInternetSNMPAdminAddress,
       "xcmCOInternetSNMPv1": xcmCOInternetSNMPv1,
       "xcmCOInternetSNMPv2": xcmCOInternetSNMPv2,
       "xcmCOInternetSNMPv3": xcmCOInternetSNMPv3,
       "xcmCOInternetPOP3": xcmCOInternetPOP3,
       "xcmCOInternetPOP3HostName": xcmCOInternetPOP3HostName,
       "xcmCOInternetPOP3HostAddress": xcmCOInternetPOP3HostAddress,
       "xcmCOInternetPOP3PollInterval": xcmCOInternetPOP3PollInterval,
       "xcmCOInternetPOP3Subject": xcmCOInternetPOP3Subject,
       "xcmCOInternetPOP3SignatureLine": xcmCOInternetPOP3SignatureLine,
       "xcmCOInternetPOP3UserName": xcmCOInternetPOP3UserName,
       "xcmCOInternetPOP3Password": xcmCOInternetPOP3Password,
       "xcmCOInternetPOP3MaxInputText": xcmCOInternetPOP3MaxInputText,
       "xcmCOInternetPOP3MaxInputAttach": xcmCOInternetPOP3MaxInputAttach,
       "xcmCOInternetPOP3MaxOutputText": xcmCOInternetPOP3MaxOutputText,
       "xcmCOInternetPOP3MaxOutputAttach": xcmCOInternetPOP3MaxOutputAttach,
       "xcmCOInternetPOP3ConfirmRequest": xcmCOInternetPOP3ConfirmRequest,
       "xcmCOInternetPOP3ConfirmReply": xcmCOInternetPOP3ConfirmReply,
       "xcmCOInternetPOP3ConfirmTimeout": xcmCOInternetPOP3ConfirmTimeout,
       "xcmCOInternetPOP3FeatureReply": xcmCOInternetPOP3FeatureReply,
       "xcmCOInternetPOP3MailAddress": xcmCOInternetPOP3MailAddress,
       "xcmCOInternetPOP3MaxInFragments": xcmCOInternetPOP3MaxInFragments,
       "xcmCOInternetPOP3MaxOutFragments": xcmCOInternetPOP3MaxOutFragments,
       "xcmCOInternetPOP3MaxInAttachments": xcmCOInternetPOP3MaxInAttachments,
       "xcmCOInternetPOP3MaxOutAttachments": xcmCOInternetPOP3MaxOutAttachments,
       "xcmCOInternetPOP3MaxInputSize": xcmCOInternetPOP3MaxInputSize,
       "xcmCOInternetPOP3MaxOutputSize": xcmCOInternetPOP3MaxOutputSize,
       "xcmCOInternetIMAP4": xcmCOInternetIMAP4,
       "xcmCOInternetIMAP4HostName": xcmCOInternetIMAP4HostName,
       "xcmCOInternetIMAP4HostAddress": xcmCOInternetIMAP4HostAddress,
       "xcmCOInternetIMAP4PollInterval": xcmCOInternetIMAP4PollInterval,
       "xcmCOInternetIMAP4Subject": xcmCOInternetIMAP4Subject,
       "xcmCOInternetIMAP4SignatureLine": xcmCOInternetIMAP4SignatureLine,
       "xcmCOInternetIMAP4UserName": xcmCOInternetIMAP4UserName,
       "xcmCOInternetIMAP4Password": xcmCOInternetIMAP4Password,
       "xcmCOInternetIMAP4MaxInputText": xcmCOInternetIMAP4MaxInputText,
       "xcmCOInternetIMAP4MaxInputAttach": xcmCOInternetIMAP4MaxInputAttach,
       "xcmCOInternetIMAP4MaxOutputText": xcmCOInternetIMAP4MaxOutputText,
       "xcmCOInternetIMAP4MaxOutputAttach": xcmCOInternetIMAP4MaxOutputAttach,
       "xcmCOInternetIMAP4ConfirmRequest": xcmCOInternetIMAP4ConfirmRequest,
       "xcmCOInternetIMAP4ConfirmReply": xcmCOInternetIMAP4ConfirmReply,
       "xcmCOInternetIMAP4ConfirmTimeout": xcmCOInternetIMAP4ConfirmTimeout,
       "xcmCOInternetIMAP4FeatureReply": xcmCOInternetIMAP4FeatureReply,
       "xcmCOInternetIMAP4MailAddress": xcmCOInternetIMAP4MailAddress,
       "xcmCOInternetIMAP4MaxInFragments": xcmCOInternetIMAP4MaxInFragments,
       "xcmCOInternetIMAP4MaxOutFragments": xcmCOInternetIMAP4MaxOutFragments,
       "xcmCOInternetIMAP4MaxInAttachments": xcmCOInternetIMAP4MaxInAttachments,
       "xcmCOInternetIMAP4MaxOutAttachments": xcmCOInternetIMAP4MaxOutAttachments,
       "xcmCOInternetIMAP4MaxInputSize": xcmCOInternetIMAP4MaxInputSize,
       "xcmCOInternetIMAP4MaxOutputSize": xcmCOInternetIMAP4MaxOutputSize,
       "xcmCOInternetFax": xcmCOInternetFax,
       "xcmCOInternetNTP": xcmCOInternetNTP,
       "xcmCOInternetNTPHostName": xcmCOInternetNTPHostName,
       "xcmCOInternetNTPHostAddress": xcmCOInternetNTPHostAddress,
       "xcmCOInternetNTPv6HostAddress": xcmCOInternetNTPv6HostAddress,
       "xcmCOInternetNTPPort": xcmCOInternetNTPPort,
       "xcmCOInternetNTPGMTOffset": xcmCOInternetNTPGMTOffset,
       "xcmCOInternetNTPPollInterval": xcmCOInternetNTPPollInterval,
       "xcmCOInternetNTPSkewTime": xcmCOInternetNTPSkewTime,
       "xcmCOInternetSFTP": xcmCOInternetSFTP,
       "xcmCOInternetWINS": xcmCOInternetWINS,
       "xcmCOInternetWINSDomainName": xcmCOInternetWINSDomainName,
       "xcmCOInternetWINSLanguage": xcmCOInternetWINSLanguage,
       "xcmCOInternetWINSCharset": xcmCOInternetWINSCharset,
       "xcmCOInternetWINSServerName": xcmCOInternetWINSServerName,
       "xcmCOInternetWINSServerAddress": xcmCOInternetWINSServerAddress,
       "xcmCOInternetWINSServerSocket": xcmCOInternetWINSServerSocket,
       "xcmCOInternetSunOncSuite": xcmCOInternetSunOncSuite,
       "xcmCOInternetSunOncNIS": xcmCOInternetSunOncNIS,
       "xcmCOInternetSunOncPlusNIS": xcmCOInternetSunOncPlusNIS,
       "xcmCOInternetSunOncRPC": xcmCOInternetSunOncRPC,
       "xcmCOInternetSunOncPlusRPC": xcmCOInternetSunOncPlusRPC,
       "xcmCOInternetSunTiRPC": xcmCOInternetSunTiRPC,
       "xcmCOInternetHTTPS": xcmCOInternetHTTPS,
       "xcmCOInternetOsfDceSuite": xcmCOInternetOsfDceSuite,
       "xcmCOInternetOsfDceCDS": xcmCOInternetOsfDceCDS,
       "xcmCOInternetOsfDceRPC": xcmCOInternetOsfDceRPC,
       "xcmCOInternetOsfDceKerberos": xcmCOInternetOsfDceKerberos,
       "xcmCOInternetOsfDceKerberosRealm": xcmCOInternetOsfDceKerberosRealm,
       "xcmCOInternetOsfDmeSuite": xcmCOInternetOsfDmeSuite,
       "xcmCOInternetLDAP": xcmCOInternetLDAP,
       "xcmCOInternetLDAPLanguage": xcmCOInternetLDAPLanguage,
       "xcmCOInternetLDAPCharset": xcmCOInternetLDAPCharset,
       "xcmCOInternetLDAPServerName": xcmCOInternetLDAPServerName,
       "xcmCOInternetLDAPServerAddress": xcmCOInternetLDAPServerAddress,
       "xcmCOInternetLDAPServerSocket": xcmCOInternetLDAPServerSocket,
       "xcmCOInternetLDAPPollInterval": xcmCOInternetLDAPPollInterval,
       "xcmCOInternetLDAPBindDN": xcmCOInternetLDAPBindDN,
       "xcmCOInternetLDAPBindPassword": xcmCOInternetLDAPBindPassword,
       "xcmCOInternetLDAPBaseDN": xcmCOInternetLDAPBaseDN,
       "xcmCOInternetLDAPPrinterName": xcmCOInternetLDAPPrinterName,
       "xcmCOInternetLDAPPrinterClass": xcmCOInternetLDAPPrinterClass,
       "xcmCOInternetLDAPAttributeName": xcmCOInternetLDAPAttributeName,
       "xcmCOInternetLDAPAttributeType": xcmCOInternetLDAPAttributeType,
       "xcmCOInternetLDAPAttributeInt": xcmCOInternetLDAPAttributeInt,
       "xcmCOInternetLDAPAttributeStr": xcmCOInternetLDAPAttributeStr,
       "xcmCOInternetLDAPMaxSearchResult": xcmCOInternetLDAPMaxSearchResult,
       "xcmCOInternetLDAPSearchTimeout": xcmCOInternetLDAPSearchTimeout,
       "xcmCOInternetCLDAP": xcmCOInternetCLDAP,
       "xcmCOInternetSalutation": xcmCOInternetSalutation,
       "xcmCOInternetUpnpSuite": xcmCOInternetUpnpSuite,
       "xcmCOInternetUpnpSSDP": xcmCOInternetUpnpSSDP,
       "xcmCOInternetSSDPCacheTimeout": xcmCOInternetSSDPCacheTimeout,
       "xcmCOInternetSSDPTimeToLive": xcmCOInternetSSDPTimeToLive,
       "xcmCOInternetSSDPServerVersion": xcmCOInternetSSDPServerVersion,
       "xcmCOInternetUpnpGENA": xcmCOInternetUpnpGENA,
       "xcmCOInternetSLP": xcmCOInternetSLP,
       "xcmCOInternetSLPVersion": xcmCOInternetSLPVersion,
       "xcmCOInternetSLPLanguage": xcmCOInternetSLPLanguage,
       "xcmCOInternetSLPCharset": xcmCOInternetSLPCharset,
       "xcmCOInternetSLPServerName": xcmCOInternetSLPServerName,
       "xcmCOInternetSLPServerAddress": xcmCOInternetSLPServerAddress,
       "xcmCOInternetSLPServerSocket": xcmCOInternetSLPServerSocket,
       "xcmCOInternetSLPPollInterval": xcmCOInternetSLPPollInterval,
       "xcmCOInternetSLPMaxMulticastTime": xcmCOInternetSLPMaxMulticastTime,
       "xcmCOInternetSLPDAFindStartWait": xcmCOInternetSLPDAFindStartWait,
       "xcmCOInternetSLPInitialRetryWait": xcmCOInternetSLPInitialRetryWait,
       "xcmCOInternetSLPMaxUnicastTime": xcmCOInternetSLPMaxUnicastTime,
       "xcmCOInternetSLPDAHeartbeatTime": xcmCOInternetSLPDAHeartbeatTime,
       "xcmCOInternetSLPDAFindActiveWait": xcmCOInternetSLPDAFindActiveWait,
       "xcmCOInternetSLPRegPassiveWait": xcmCOInternetSLPRegPassiveWait,
       "xcmCOInternetSLPRegActiveWait": xcmCOInternetSLPRegActiveWait,
       "xcmCOInternetSLPCloseConnWait": xcmCOInternetSLPCloseConnWait,
       "xcmCOInternetSLPCacheReplyTime": xcmCOInternetSLPCacheReplyTime,
       "xcmCOInternetSLPMaxRegLifetime": xcmCOInternetSLPMaxRegLifetime,
       "xcmCOInternetSLPDAFindRetryWait": xcmCOInternetSLPDAFindRetryWait,
       "xcmCOInternetSLPMaxDARequestTime": xcmCOInternetSLPMaxDARequestTime,
       "xcmCOInternetSLPMulticastEnable": xcmCOInternetSLPMulticastEnable,
       "xcmCOInternetSLPMulticastRadius": xcmCOInternetSLPMulticastRadius,
       "xcmCOInternetSLPPathMTUSize": xcmCOInternetSLPPathMTUSize,
       "xcmCOInternetSLPScopeName": xcmCOInternetSLPScopeName,
       "xcmCOInternetSLPScopeKey": xcmCOInternetSLPScopeKey,
       "xcmCOInternetSLPAttributesEnable": xcmCOInternetSLPAttributesEnable,
       "xcmCOInternetSLPv1": xcmCOInternetSLPv1,
       "xcmCOInternetSLPv2": xcmCOInternetSLPv2,
       "xcmCOInternetWSDSuite": xcmCOInternetWSDSuite,
       "xcmCOInternetWSDiscovery": xcmCOInternetWSDiscovery,
       "xcmCOInternetWSDiscoveryMulticast": xcmCOInternetWSDiscoveryMulticast,
       "xcmCOInternetWSDiscoveryPort": xcmCOInternetWSDiscoveryPort,
       "xcmCOInternetWSXResourcePort": xcmCOInternetWSXResourcePort,
       "xcmCOInternetWSPrintPort": xcmCOInternetWSPrintPort,
       "xcmCOInternetWSScanPort": xcmCOInternetWSScanPort,
       "xcmCOInternetWSTransferPort": xcmCOInternetWSTransferPort,
       "xcmCOInternetDeallocateAllDynamicResources": xcmCOInternetDeallocateAllDynamicResources,
       "xcmCOInternetApplications": xcmCOInternetApplications,
       "xcmCOInternetDHCPv6": xcmCOInternetDHCPv6,
       "xcmCOInternetDHCPv6ConfigState": xcmCOInternetDHCPv6ConfigState,
       "xcmCOInternetDNSv6": xcmCOInternetDNSv6,
       "xcmCOInternetDNSv6DomainName": xcmCOInternetDNSv6DomainName,
       "xcmCOInternetDNSv6ServerAddress": xcmCOInternetDNSv6ServerAddress,
       "xcmCOInternetDNSv6DynamicUpdate": xcmCOInternetDNSv6DynamicUpdate,
       "xcmCOInternetDNSv6ResolutionPolicy": xcmCOInternetDNSv6ResolutionPolicy,
       "xcmCOInternetIPv6DeallocateAllDynamicResources": xcmCOInternetIPv6DeallocateAllDynamicResources,
       "xcmCOAppletalkSuite": xcmCOAppletalkSuite,
       "xcmCOAppletalkDatalinks": xcmCOAppletalkDatalinks,
       "xcmCOAppletalkLLAP": xcmCOAppletalkLLAP,
       "xcmCOAppletalkELAP": xcmCOAppletalkELAP,
       "xcmCOAppletalkTLAP": xcmCOAppletalkTLAP,
       "xcmCOAppletalkPhase": xcmCOAppletalkPhase,
       "xcmCOAppletalkDDP": xcmCOAppletalkDDP,
       "xcmCOAppletalkDDPAddress": xcmCOAppletalkDDPAddress,
       "xcmCOAppletalkDDPSocketAddress": xcmCOAppletalkDDPSocketAddress,
       "xcmCOAppletalkDDPDatalinks": xcmCOAppletalkDDPDatalinks,
       "xcmCOAppletalkAARP": xcmCOAppletalkAARP,
       "xcmCOAppletalkTransports": xcmCOAppletalkTransports,
       "xcmCOAppletalkATP": xcmCOAppletalkATP,
       "xcmCOAppletalkADSP": xcmCOAppletalkADSP,
       "xcmCOAppletalkRTMP": xcmCOAppletalkRTMP,
       "xcmCOAppletalkAEP": xcmCOAppletalkAEP,
       "xcmCOAppletalkNBP": xcmCOAppletalkNBP,
       "xcmCOAppletalkNBPHostName": xcmCOAppletalkNBPHostName,
       "xcmCOAppletalkNBPLanguage": xcmCOAppletalkNBPLanguage,
       "xcmCOAppletalkNBPCharset": xcmCOAppletalkNBPCharset,
       "xcmCOAppletalkNBPObject": xcmCOAppletalkNBPObject,
       "xcmCOAppletalkNBPType": xcmCOAppletalkNBPType,
       "xcmCOAppletalkNBPZone": xcmCOAppletalkNBPZone,
       "xcmCOAppletalkNBPNetwork": xcmCOAppletalkNBPNetwork,
       "xcmCOAppletalkNBPNode": xcmCOAppletalkNBPNode,
       "xcmCOAppletalkNBPSocket": xcmCOAppletalkNBPSocket,
       "xcmCOAppletalkNBPZoneToNetworks": xcmCOAppletalkNBPZoneToNetworks,
       "xcmCOAppletalkASP": xcmCOAppletalkASP,
       "xcmCOAppletalkZIP": xcmCOAppletalkZIP,
       "xcmCOAppletalkPAP": xcmCOAppletalkPAP,
       "xcmCOAppletalkPAPHostName": xcmCOAppletalkPAPHostName,
       "xcmCOAppletalkPAPHostAddress": xcmCOAppletalkPAPHostAddress,
       "xcmCOAppletalkPAPListenSocket": xcmCOAppletalkPAPListenSocket,
       "xcmCOAppletalkPAPMaxClients": xcmCOAppletalkPAPMaxClients,
       "xcmCOAppletalkPAPMaxPrinters": xcmCOAppletalkPAPMaxPrinters,
       "xcmCOAppletalkPAPObject": xcmCOAppletalkPAPObject,
       "xcmCOAppletalkPAPType": xcmCOAppletalkPAPType,
       "xcmCOAppletalkPAPZone": xcmCOAppletalkPAPZone,
       "xcmCOAppletalkPAPNetwork": xcmCOAppletalkPAPNetwork,
       "xcmCOAppletalkPAPNode": xcmCOAppletalkPAPNode,
       "xcmCOAppletalkPAPSpool": xcmCOAppletalkPAPSpool,
       "xcmCOAppletalkPAPMaxSpool": xcmCOAppletalkPAPMaxSpool,
       "xcmCOAppletalkPAPJobTimeout": xcmCOAppletalkPAPJobTimeout,
       "xcmCOAppletalkPAPAutoSwitch": xcmCOAppletalkPAPAutoSwitch,
       "xcmCOAppletalkPAPBinaryPS": xcmCOAppletalkPAPBinaryPS,
       "xcmCOAppletalkPAPDefaultPDL": xcmCOAppletalkPAPDefaultPDL,
       "xcmCOAppletalkSNMP": xcmCOAppletalkSNMP,
       "xcmCOAppletalkSNMPv1": xcmCOAppletalkSNMPv1,
       "xcmCOAppletalkSNMPv2": xcmCOAppletalkSNMPv2,
       "xcmCOAppletalkSNMPv3": xcmCOAppletalkSNMPv3,
       "xcmCOAppletalkAFP": xcmCOAppletalkAFP,
       "xcmCOAppletalkPS": xcmCOAppletalkPS,
       "xcmCOAppletalkApplications": xcmCOAppletalkApplications,
       "xcmCONetwareSuite": xcmCONetwareSuite,
       "xcmCONetwareDatalinks": xcmCONetwareDatalinks,
       "xcmCONetwareIPX": xcmCONetwareIPX,
       "xcmCONetwareIPXAddress": xcmCONetwareIPXAddress,
       "xcmCONetwareIPXSocketAddress": xcmCONetwareIPXSocketAddress,
       "xcmCONetwareIPXDatalinks": xcmCONetwareIPXDatalinks,
       "xcmCONetwareIP": xcmCONetwareIP,
       "xcmCONetwareTransports": xcmCONetwareTransports,
       "xcmCONetwareSPX": xcmCONetwareSPX,
       "xcmCONetwareRIP": xcmCONetwareRIP,
       "xcmCONetwareEcho": xcmCONetwareEcho,
       "xcmCONetwareNCP": xcmCONetwareNCP,
       "xcmCONetwareNetbios": xcmCONetwareNetbios,
       "xcmCONetwarePServer": xcmCONetwarePServer,
       "xcmCONetwarePServerName": xcmCONetwarePServerName,
       "xcmCONetwarePServerPassword": xcmCONetwarePServerPassword,
       "xcmCONetwarePServerQueueName": xcmCONetwarePServerQueueName,
       "xcmCONetwarePServerPollInterval": xcmCONetwarePServerPollInterval,
       "xcmCONetwarePServerFindFServer": xcmCONetwarePServerFindFServer,
       "xcmCONetwarePServerMaxFServers": xcmCONetwarePServerMaxFServers,
       "xcmCONetwarePServerNotify": xcmCONetwarePServerNotify,
       "xcmCONetwarePServerNotifyLocale": xcmCONetwarePServerNotifyLocale,
       "xcmCONetwarePServerMaxPrinters": xcmCONetwarePServerMaxPrinters,
       "xcmCONetwarePServerSuspendPoll": xcmCONetwarePServerSuspendPoll,
       "xcmCONetwarePServerSuspendPollInterval": xcmCONetwarePServerSuspendPollInterval,
       "xcmCONetwarePServerSpool": xcmCONetwarePServerSpool,
       "xcmCONetwarePServerMaxSpool": xcmCONetwarePServerMaxSpool,
       "xcmCONetwarePServerJobTimeout": xcmCONetwarePServerJobTimeout,
       "xcmCONetwarePServerAutoSwitch": xcmCONetwarePServerAutoSwitch,
       "xcmCONetwarePServerBinaryPS": xcmCONetwarePServerBinaryPS,
       "xcmCONetwarePServerDefaultPDL": xcmCONetwarePServerDefaultPDL,
       "xcmCONetwarePServerConfigTimeout": xcmCONetwarePServerConfigTimeout,
       "xcmCONetwareFServer": xcmCONetwareFServer,
       "xcmCONetwareFServerName": xcmCONetwareFServerName,
       "xcmCONetwareFServerPassword": xcmCONetwareFServerPassword,
       "xcmCONetwareFServerAddress": xcmCONetwareFServerAddress,
       "xcmCONetwareMHS": xcmCONetwareMHS,
       "xcmCONetwareBindery": xcmCONetwareBindery,
       "xcmCONetwareBinderyLanguage": xcmCONetwareBinderyLanguage,
       "xcmCONetwareBinderyCharset": xcmCONetwareBinderyCharset,
       "xcmCONetwareNDS": xcmCONetwareNDS,
       "xcmCONetwareNDSTreeName": xcmCONetwareNDSTreeName,
       "xcmCONetwareNDSContext": xcmCONetwareNDSContext,
       "xcmCONetwareNDSLanguage": xcmCONetwareNDSLanguage,
       "xcmCONetwareNDSCharset": xcmCONetwareNDSCharset,
       "xcmCONetwareRPrinter": xcmCONetwareRPrinter,
       "xcmCONetwareRPrinterName": xcmCONetwareRPrinterName,
       "xcmCONetwareRPrinterNumber": xcmCONetwareRPrinterNumber,
       "xcmCONetwareRPrinterPollInterval": xcmCONetwareRPrinterPollInterval,
       "xcmCONetwareRPrinterJobTimeout": xcmCONetwareRPrinterJobTimeout,
       "xcmCONetwareRPrinterAutoSwitch": xcmCONetwareRPrinterAutoSwitch,
       "xcmCONetwareRPrinterBinaryPS": xcmCONetwareRPrinterBinaryPS,
       "xcmCONetwareRPrinterDefaultPDL": xcmCONetwareRPrinterDefaultPDL,
       "xcmCONetwareSNMP": xcmCONetwareSNMP,
       "xcmCONetwareSNMPv1": xcmCONetwareSNMPv1,
       "xcmCONetwareSNMPv2": xcmCONetwareSNMPv2,
       "xcmCONetwareSNMPv3": xcmCONetwareSNMPv3,
       "xcmCONetwareSAP": xcmCONetwareSAP,
       "xcmCONetwareSAPInterval": xcmCONetwareSAPInterval,
       "xcmCONetwareSAPNumber": xcmCONetwareSAPNumber,
       "xcmCONetwareSAPValueString": xcmCONetwareSAPValueString,
       "xcmCONetwareSAPUnitName": xcmCONetwareSAPUnitName,
       "xcmCONetwareSAPFormatID": xcmCONetwareSAPFormatID,
       "xcmCONetwareSAPSuspend": xcmCONetwareSAPSuspend,
       "xcmCONetwareSAPSuspendInterval": xcmCONetwareSAPSuspendInterval,
       "xcmCONetwareNDSIP": xcmCONetwareNDSIP,
       "xcmCONetwareNDSIPHostname": xcmCONetwareNDSIPHostname,
       "xcmCONetwareNDSIPAddress": xcmCONetwareNDSIPAddress,
       "xcmCONetwareNDSIPUseHostname": xcmCONetwareNDSIPUseHostname,
       "xcmCONetwareApplications": xcmCONetwareApplications,
       "xcmCOVinesSuite": xcmCOVinesSuite,
       "xcmCOVinesDatalinks": xcmCOVinesDatalinks,
       "xcmCOVinesVIP": xcmCOVinesVIP,
       "xcmCOVinesVICP": xcmCOVinesVICP,
       "xcmCOVinesVARP": xcmCOVinesVARP,
       "xcmCOVinesIP": xcmCOVinesIP,
       "xcmCOVinesICMP": xcmCOVinesICMP,
       "xcmCOVinesARP": xcmCOVinesARP,
       "xcmCOVinesVRTP": xcmCOVinesVRTP,
       "xcmCOVinesTransports": xcmCOVinesTransports,
       "xcmCOVinesVIPC": xcmCOVinesVIPC,
       "xcmCOVinesVSPP": xcmCOVinesVSPP,
       "xcmCOVinesUDP": xcmCOVinesUDP,
       "xcmCOVinesTCP": xcmCOVinesTCP,
       "xcmCOVinesNetRPC": xcmCOVinesNetRPC,
       "xcmCOVinesSocket": xcmCOVinesSocket,
       "xcmCOVinesNetbios": xcmCOVinesNetbios,
       "xcmCOVinesApplications": xcmCOVinesApplications,
       "xcmCOVinesPrint": xcmCOVinesPrint,
       "xcmCOVinesPrintName": xcmCOVinesPrintName,
       "xcmCOVinesPrintPassword": xcmCOVinesPrintPassword,
       "xcmCOVinesPrintPollInterval": xcmCOVinesPrintPollInterval,
       "xcmCOVinesPrintMaxServers": xcmCOVinesPrintMaxServers,
       "xcmCOVinesPrintServerName": xcmCOVinesPrintServerName,
       "xcmCOVinesPrintSpool": xcmCOVinesPrintSpool,
       "xcmCOVinesPrintMaxSpool": xcmCOVinesPrintMaxSpool,
       "xcmCOVinesPrintJobTimeout": xcmCOVinesPrintJobTimeout,
       "xcmCOVinesPrintAutoSwitch": xcmCOVinesPrintAutoSwitch,
       "xcmCOVinesPrintBinaryPS": xcmCOVinesPrintBinaryPS,
       "xcmCOVinesPrintDefaultPDL": xcmCOVinesPrintDefaultPDL,
       "xcmCOVinesFiling": xcmCOVinesFiling,
       "xcmCOVinesMail": xcmCOVinesMail,
       "xcmCOVinesStreetTalk": xcmCOVinesStreetTalk,
       "xcmCOVinesStreetTalkLanguage": xcmCOVinesStreetTalkLanguage,
       "xcmCOVinesStreetTalkCharset": xcmCOVinesStreetTalkCharset,
       "xcmCONetbiosSuite": xcmCONetbiosSuite,
       "xcmCONetbiosDatalinks": xcmCONetbiosDatalinks,
       "xcmCONetbiosTransports": xcmCONetbiosTransports,
       "xcmCONetbiosNBP": xcmCONetbiosNBP,
       "xcmCONetbiosNBPName": xcmCONetbiosNBPName,
       "xcmCONetbiosNBPGroupName": xcmCONetbiosNBPGroupName,
       "xcmCONetbiosNBPPassword": xcmCONetbiosNBPPassword,
       "xcmCONetbiosNBPService": xcmCONetbiosNBPService,
       "xcmCONetbiosNBPRemark": xcmCONetbiosNBPRemark,
       "xcmCONetbiosNBPServiceRemark": xcmCONetbiosNBPServiceRemark,
       "xcmCONetbiosNBPIPCRemark": xcmCONetbiosNBPIPCRemark,
       "xcmCONetbiosNBPLanguage": xcmCONetbiosNBPLanguage,
       "xcmCONetbiosNBPCharset": xcmCONetbiosNBPCharset,
       "xcmCONetbiosNBPOverNetbeui": xcmCONetbiosNBPOverNetbeui,
       "xcmCONetbiosNBPOverInternet": xcmCONetbiosNBPOverInternet,
       "xcmCONetbiosNBPOverNetware": xcmCONetbiosNBPOverNetware,
       "xcmCONetbiosSNMP": xcmCONetbiosSNMP,
       "xcmCONetbiosSNMPv1": xcmCONetbiosSNMPv1,
       "xcmCONetbiosSNMPv2": xcmCONetbiosSNMPv2,
       "xcmCONetbiosSNMPv3": xcmCONetbiosSNMPv3,
       "xcmCONetbiosIntEndNode": xcmCONetbiosIntEndNode,
       "xcmCONetbiosIntEndNodeAddress": xcmCONetbiosIntEndNodeAddress,
       "xcmCONetbiosIntEndNodeSource": xcmCONetbiosIntEndNodeSource,
       "xcmCONetbiosIntNodeType": xcmCONetbiosIntNodeType,
       "xcmCONetbiosIntNodeTypeSource": xcmCONetbiosIntNodeTypeSource,
       "xcmCONetbiosIntNodeScope": xcmCONetbiosIntNodeScope,
       "xcmCONetbiosIntNodeScopeSource": xcmCONetbiosIntNodeScopeSource,
       "xcmCONetbiosIntNameServer": xcmCONetbiosIntNameServer,
       "xcmCONetbiosIntNameServerAddress": xcmCONetbiosIntNameServerAddress,
       "xcmCONetbiosIntNameServerSource": xcmCONetbiosIntNameServerSource,
       "xcmCONetbiosIntDistServer": xcmCONetbiosIntDistServer,
       "xcmCONetbiosIntDistServerAddress": xcmCONetbiosIntDistServerAddress,
       "xcmCONetbiosIntDistServerSource": xcmCONetbiosIntDistServerSource,
       "xcmCONetbiosSAP": xcmCONetbiosSAP,
       "xcmCONetbiosSAPInterval": xcmCONetbiosSAPInterval,
       "xcmCONetbiosApplications": xcmCONetbiosApplications,
       "xcmCONetbiosSMB": xcmCONetbiosSMB,
       "xcmCONetbiosSMBPClient": xcmCONetbiosSMBPClient,
       "xcmCONetbiosSMBPClientMaxConns": xcmCONetbiosSMBPClientMaxConns,
       "xcmCONetbiosSMBPClientSpool": xcmCONetbiosSMBPClientSpool,
       "xcmCONetbiosSMBPClientMaxSpool": xcmCONetbiosSMBPClientMaxSpool,
       "xcmCONetbiosSMBPClientJobTimeout": xcmCONetbiosSMBPClientJobTimeout,
       "xcmCONetbiosSMBPClientAutoSwitch": xcmCONetbiosSMBPClientAutoSwitch,
       "xcmCONetbiosSMBPClientBinaryPS": xcmCONetbiosSMBPClientBinaryPS,
       "xcmCONetbiosSMBPClientDefaultPDL": xcmCONetbiosSMBPClientDefaultPDL,
       "xcmCONetbiosSMBPServer": xcmCONetbiosSMBPServer,
       "xcmCONetbiosSMBPServerMaxConns": xcmCONetbiosSMBPServerMaxConns,
       "xcmCONetbiosSMBPServerSpool": xcmCONetbiosSMBPServerSpool,
       "xcmCONetbiosSMBPServerMaxSpool": xcmCONetbiosSMBPServerMaxSpool,
       "xcmCONetbiosSMBPServerJobTimeout": xcmCONetbiosSMBPServerJobTimeout,
       "xcmCONetbiosSMBPServerAutoSwitch": xcmCONetbiosSMBPServerAutoSwitch,
       "xcmCONetbiosSMBPServerBinaryPS": xcmCONetbiosSMBPServerBinaryPS,
       "xcmCONetbiosSMBPServerDefaultPDL": xcmCONetbiosSMBPServerDefaultPDL,
       "xcmCONetbiosSMBFClient": xcmCONetbiosSMBFClient,
       "xcmCONetbiosSMBFServer": xcmCONetbiosSMBFServer,
       "xcmCONetbiosSMBFServerName": xcmCONetbiosSMBFServerName,
       "xcmCONetbiosSMBDomain": xcmCONetbiosSMBDomain,
       "xcmCONetbeuiSuite": xcmCONetbeuiSuite,
       "xcmCONetbeuiDatalinks": xcmCONetbeuiDatalinks,
       "xcmCONetbeuiLLC": xcmCONetbeuiLLC,
       "xcmCONetbeuiDLC": xcmCONetbeuiDLC,
       "xcmCOSerialSuite": xcmCOSerialSuite,
       "xcmCOSerialPhysical": xcmCOSerialPhysical,
       "xcmCOSerialSignalType": xcmCOSerialSignalType,
       "xcmCOSerialSignalOverride": xcmCOSerialSignalOverride,
       "xcmCOSerialSignalDetected": xcmCOSerialSignalDetected,
       "xcmCOSerialSignalAdaptive": xcmCOSerialSignalAdaptive,
       "xcmCOSerialSignalSupport": xcmCOSerialSignalSupport,
       "xcmCOSerialDevice": xcmCOSerialDevice,
       "xcmCOSerialDeviceName": xcmCOSerialDeviceName,
       "xcmCOSerialSpeed": xcmCOSerialSpeed,
       "xcmCOSerialSpeedOverride": xcmCOSerialSpeedOverride,
       "xcmCOSerialSpeedDetected": xcmCOSerialSpeedDetected,
       "xcmCOSerialSpeedAdaptive": xcmCOSerialSpeedAdaptive,
       "xcmCOSerialSpeedSupport": xcmCOSerialSpeedSupport,
       "xcmCOSerialMinSpeed": xcmCOSerialMinSpeed,
       "xcmCOSerialMaxSpeed": xcmCOSerialMaxSpeed,
       "xcmCOSerialBidirectional": xcmCOSerialBidirectional,
       "xcmCOSerialInputTimeout": xcmCOSerialInputTimeout,
       "xcmCOSerialOutputTimeout": xcmCOSerialOutputTimeout,
       "xcmCOSerialConnectorType": xcmCOSerialConnectorType,
       "xcmCOSerialConnectorOverride": xcmCOSerialConnectorOverride,
       "xcmCOSerialConnectorDetected": xcmCOSerialConnectorDetected,
       "xcmCOSerialConnectorAdaptive": xcmCOSerialConnectorAdaptive,
       "xcmCOSerialMinInputChars": xcmCOSerialMinInputChars,
       "xcmCOSerialMaxInputChars": xcmCOSerialMaxInputChars,
       "xcmCOSerialParity": xcmCOSerialParity,
       "xcmCOSerialDataBits": xcmCOSerialDataBits,
       "xcmCOSerialFlowControl": xcmCOSerialFlowControl,
       "xcmCOSerialStartBits": xcmCOSerialStartBits,
       "xcmCOSerialStopBits": xcmCOSerialStopBits,
       "xcmCOSerialInputPrime": xcmCOSerialInputPrime,
       "xcmCOSerialDTR": xcmCOSerialDTR,
       "xcmCOSerialDSR": xcmCOSerialDSR,
       "xcmCOSerialCTS": xcmCOSerialCTS,
       "xcmCOSerialRTS": xcmCOSerialRTS,
       "xcmCOSerialDatalinks": xcmCOSerialDatalinks,
       "xcmCOSerialProtocol": xcmCOSerialProtocol,
       "xcmCOParallelSuite": xcmCOParallelSuite,
       "xcmCOParallelPhysical": xcmCOParallelPhysical,
       "xcmCOParallelSignalType": xcmCOParallelSignalType,
       "xcmCOParallelSignalOverride": xcmCOParallelSignalOverride,
       "xcmCOParallelSignalDetected": xcmCOParallelSignalDetected,
       "xcmCOParallelSignalAdaptive": xcmCOParallelSignalAdaptive,
       "xcmCOParallelSignalSupport": xcmCOParallelSignalSupport,
       "xcmCOParallelDevice": xcmCOParallelDevice,
       "xcmCOParallelDeviceName": xcmCOParallelDeviceName,
       "xcmCOParallelDeviceID": xcmCOParallelDeviceID,
       "xcmCOParallelSpeed": xcmCOParallelSpeed,
       "xcmCOParallelSpeedOverride": xcmCOParallelSpeedOverride,
       "xcmCOParallelSpeedDetected": xcmCOParallelSpeedDetected,
       "xcmCOParallelSpeedAdaptive": xcmCOParallelSpeedAdaptive,
       "xcmCOParallelSpeedSupport": xcmCOParallelSpeedSupport,
       "xcmCOParallelMinSpeed": xcmCOParallelMinSpeed,
       "xcmCOParallelMaxSpeed": xcmCOParallelMaxSpeed,
       "xcmCOParallelBidirectional": xcmCOParallelBidirectional,
       "xcmCOParallelInputTimeout": xcmCOParallelInputTimeout,
       "xcmCOParallelOutputTimeout": xcmCOParallelOutputTimeout,
       "xcmCOParallelConnectorType": xcmCOParallelConnectorType,
       "xcmCOParallelConnectorOverride": xcmCOParallelConnectorOverride,
       "xcmCOParallelConnectorDetected": xcmCOParallelConnectorDetected,
       "xcmCOParallelConnectorAdaptive": xcmCOParallelConnectorAdaptive,
       "xcmCOParallelMinInputChars": xcmCOParallelMinInputChars,
       "xcmCOParallelMaxInputChars": xcmCOParallelMaxInputChars,
       "xcmCOParallelParity": xcmCOParallelParity,
       "xcmCOParallelDataBits": xcmCOParallelDataBits,
       "xcmCOParallelFlowControl": xcmCOParallelFlowControl,
       "xcmCOParallelInputPrime": xcmCOParallelInputPrime,
       "xcmCOParallelHandshake": xcmCOParallelHandshake,
       "xcmCOParallelDataStrobe": xcmCOParallelDataStrobe,
       "xcmCOParallelDatalinks": xcmCOParallelDatalinks,
       "xcmCOParallelProtocol": xcmCOParallelProtocol,
       "xcmCODirectPrintSuite": xcmCODirectPrintSuite,
       "xcmCODirectPrintPhysical": xcmCODirectPrintPhysical,
       "xcmCODirectPrintDatalinks": xcmCODirectPrintDatalinks,
       "xcmCODirectPrintProtocol": xcmCODirectPrintProtocol,
       "xcmCOUsbSuite": xcmCOUsbSuite,
       "xcmCOUsbPhysical": xcmCOUsbPhysical,
       "xcmCOUsbDevice": xcmCOUsbDevice,
       "xcmCOUsbDeviceName": xcmCOUsbDeviceName,
       "xcmCOUsbSpeed": xcmCOUsbSpeed,
       "xcmCOUsbSpeedOverride": xcmCOUsbSpeedOverride,
       "xcmCOUsbSpeedDetected": xcmCOUsbSpeedDetected,
       "xcmCOUsbSpeedAdaptive": xcmCOUsbSpeedAdaptive,
       "xcmCOUsbSpeedSupport": xcmCOUsbSpeedSupport,
       "xcmCOUsbMinSpeed": xcmCOUsbMinSpeed,
       "xcmCOUsbMaxSpeed": xcmCOUsbMaxSpeed,
       "xcmCOUsbBidirectional": xcmCOUsbBidirectional,
       "xcmCOUsbInputTimeout": xcmCOUsbInputTimeout,
       "xcmCOUsbOutputTimeout": xcmCOUsbOutputTimeout,
       "xcmCOUsbMinInputChars": xcmCOUsbMinInputChars,
       "xcmCOUsbMaxInputChars": xcmCOUsbMaxInputChars,
       "xcmCOUsbDatalinks": xcmCOUsbDatalinks,
       "xcmCOUsbProtocol": xcmCOUsbProtocol,
       "xCmCommsConfigDummy": xCmCommsConfigDummy,
       "xCmSnmpNetbiosAddress": xCmSnmpNetbiosAddress,
       "xCmCommsConfigGroupSupport": xCmCommsConfigGroupSupport,
       "xCmCommsDirRecordType": xCmCommsDirRecordType,
       "xCmCommsDirAttributeType": xCmCommsDirAttributeType,
       "xCmCommsLDAPAttributeType": xCmCommsLDAPAttributeType,
       "xCmSnmpIPHostnameAddress": xCmSnmpIPHostnameAddress,
       "xcmCommsConfigMIB": xcmCommsConfigMIB,
       "xcmCommsConfigMIBConformance": xcmCommsConfigMIBConformance,
       "xcmCommsConfigMIBGroups": xcmCommsConfigMIBGroups,
       "xcmCommsConfigGroup": xcmCommsConfigGroup,
       "xcmCommsOptionGroup": xcmCommsOptionGroup,
       "xcmCommsDirRecordGroup": xcmCommsDirRecordGroup,
       "xcmCommsDirAttributeGroup": xcmCommsDirAttributeGroup,
       "xcmCommsDirStringGroup": xcmCommsDirStringGroup,
       "xcmCommsProtocolGroup": xcmCommsProtocolGroup,
       "xcmCommsConfigMIBCompliance": xcmCommsConfigMIBCompliance,
       "xcmCommsConfig": xcmCommsConfig,
       "xcmCommsConfigTable": xcmCommsConfigTable,
       "xcmCommsConfigEntry": xcmCommsConfigEntry,
       "xcmCommsConfigRowStatus": xcmCommsConfigRowStatus,
       "xcmCommsConfigActiveOptionFirst": xcmCommsConfigActiveOptionFirst,
       "xcmCommsConfigActiveOptionLast": xcmCommsConfigActiveOptionLast,
       "xcmCommsConfigGroupSupport": xcmCommsConfigGroupSupport,
       "xcmCommsConfigCreateSupport": xcmCommsConfigCreateSupport,
       "xcmCommsConfigUpdateSupport": xcmCommsConfigUpdateSupport,
       "xcmCommsOption": xcmCommsOption,
       "xcmCommsOptionTable": xcmCommsOptionTable,
       "xcmCommsOptionEntry": xcmCommsOptionEntry,
       "xcmCommsOptionIndex": xcmCommsOptionIndex,
       "xcmCommsOptionRowStatus": xcmCommsOptionRowStatus,
       "xcmCommsOptionTypeOID": xcmCommsOptionTypeOID,
       "xcmCommsOptionValueSyntax": xcmCommsOptionValueSyntax,
       "xcmCommsOptionValueInteger": xcmCommsOptionValueInteger,
       "xcmCommsOptionValueOID": xcmCommsOptionValueOID,
       "xcmCommsOptionValueString": xcmCommsOptionValueString,
       "xcmCommsOptionValueLocalization": xcmCommsOptionValueLocalization,
       "xcmCommsOptionValueCodedCharSet": xcmCommsOptionValueCodedCharSet,
       "xcmCommsOptionNextIndex": xcmCommsOptionNextIndex,
       "xcmCommsOptionPreviousIndex": xcmCommsOptionPreviousIndex,
       "xcmCommsOptionFamilyIndex": xcmCommsOptionFamilyIndex,
       "xcmCommsDirRecord": xcmCommsDirRecord,
       "xcmCommsDirRecordTable": xcmCommsDirRecordTable,
       "xcmCommsDirRecordEntry": xcmCommsDirRecordEntry,
       "xcmCommsDirRecordType": xcmCommsDirRecordType,
       "xcmCommsDirRecordIndex": xcmCommsDirRecordIndex,
       "xcmCommsDirRecordRowStatus": xcmCommsDirRecordRowStatus,
       "xcmCommsDirRecordKeyType": xcmCommsDirRecordKeyType,
       "xcmCommsDirRecordKeyInteger": xcmCommsDirRecordKeyInteger,
       "xcmCommsDirRecordKeyString": xcmCommsDirRecordKeyString,
       "xcmCommsDirRecordParentType": xcmCommsDirRecordParentType,
       "xcmCommsDirRecordParentIndex": xcmCommsDirRecordParentIndex,
       "xcmCommsDirAttribute": xcmCommsDirAttribute,
       "xcmCommsDirAttributeTable": xcmCommsDirAttributeTable,
       "xcmCommsDirAttributeEntry": xcmCommsDirAttributeEntry,
       "xcmCommsDirAttributeType": xcmCommsDirAttributeType,
       "xcmCommsDirAttributeIndex": xcmCommsDirAttributeIndex,
       "xcmCommsDirAttributeRowStatus": xcmCommsDirAttributeRowStatus,
       "xcmCommsDirAttributeValue": xcmCommsDirAttributeValue,
       "xcmCommsDirString": xcmCommsDirString,
       "xcmCommsDirStringTable": xcmCommsDirStringTable,
       "xcmCommsDirStringEntry": xcmCommsDirStringEntry,
       "xcmCommsDirStringRowStatus": xcmCommsDirStringRowStatus,
       "xcmCommsDirStringValue": xcmCommsDirStringValue,
       "xcmCommsProtocol": xcmCommsProtocol,
       "xcmCommsProtocolTable": xcmCommsProtocolTable,
       "xcmCommsProtocolEntry": xcmCommsProtocolEntry,
       "xcmCommsProtocolType": xcmCommsProtocolType,
       "xcmCommsProtocolRowStatus": xcmCommsProtocolRowStatus,
       "xcmSvcMonTC": xcmSvcMonTC,
       "xCmSvcMonDummy": xCmSvcMonDummy,
       "xCmSvcMonGroupSupport": xCmSvcMonGroupSupport,
       "xCmSvcMonServiceMgmtOperation": xCmSvcMonServiceMgmtOperation,
       "xCmSvcMonServiceMgmtData": xCmSvcMonServiceMgmtData,
       "xCmSvcMonServiceDetailClass": xCmSvcMonServiceDetailClass,
       "xCmSvcMonServiceDetailType": xCmSvcMonServiceDetailType,
       "xCmSvcMonServiceType": xCmSvcMonServiceType,
       "xCmSvcMonJobConfirmSupport": xCmSvcMonJobConfirmSupport,
       "xCmSvcMonSystemMailSenderNetAuthSupport": xCmSvcMonSystemMailSenderNetAuthSupport,
       "xCmSvcMonAttachmentPDLSupport": xCmSvcMonAttachmentPDLSupport,
       "xCmImageQualityType": xCmImageQualityType,
       "xCmOutputUsage": xCmOutputUsage,
       "xCMLoginCredentialsSource": xCMLoginCredentialsSource,
       "xcmSvcMonMIB": xcmSvcMonMIB,
       "xcmSvcMonGeneral": xcmSvcMonGeneral,
       "xcmSvcMonGeneralTable": xcmSvcMonGeneralTable,
       "xcmSvcMonGeneralEntry": xcmSvcMonGeneralEntry,
       "xcmSvcMonGeneralIndex": xcmSvcMonGeneralIndex,
       "xcmSvcMonGeneralRowStatus": xcmSvcMonGeneralRowStatus,
       "xcmSvcMonGeneralVersionID": xcmSvcMonGeneralVersionID,
       "xcmSvcMonGeneralVersionDate": xcmSvcMonGeneralVersionDate,
       "xcmSvcMonGeneralGroupSupport": xcmSvcMonGeneralGroupSupport,
       "xcmSvcMonGeneralCreateSupport": xcmSvcMonGeneralCreateSupport,
       "xcmSvcMonGeneralUpdateSupport": xcmSvcMonGeneralUpdateSupport,
       "xcmSvcMonMIBConformance": xcmSvcMonMIBConformance,
       "xcmSvcMonMIBGroups": xcmSvcMonMIBGroups,
       "xcmSvcMonGeneralGroup": xcmSvcMonGeneralGroup,
       "xcmSvcMonQueueGroup": xcmSvcMonQueueGroup,
       "xcmSvcMonQueueExtGroup": xcmSvcMonQueueExtGroup,
       "xcmSvcMonServiceGroup": xcmSvcMonServiceGroup,
       "xcmSvcMonServiceDetailGroup": xcmSvcMonServiceDetailGroup,
       "xcmSvcMonServiceMgmtGroup": xcmSvcMonServiceMgmtGroup,
       "xcmSvcMonMIBCompliance": xcmSvcMonMIBCompliance,
       "xcmSvcMonQueue": xcmSvcMonQueue,
       "xcmSvcMonQueueTable": xcmSvcMonQueueTable,
       "xcmSvcMonQueueEntry": xcmSvcMonQueueEntry,
       "xcmSvcMonQueueIndex": xcmSvcMonQueueIndex,
       "xcmSvcMonQueueRowStatus": xcmSvcMonQueueRowStatus,
       "xcmSvcMonQueueDomain": xcmSvcMonQueueDomain,
       "xcmSvcMonQueuePath": xcmSvcMonQueuePath,
       "xcmSvcMonQueueName": xcmSvcMonQueueName,
       "xcmSvcMonQueueOnSystem": xcmSvcMonQueueOnSystem,
       "xcmSvcMonQueueExt": xcmSvcMonQueueExt,
       "xcmSvcMonQueueExtV1EventOID": xcmSvcMonQueueExtV1EventOID,
       "xcmSvcMonQueueExtV2EventPrefix": xcmSvcMonQueueExtV2EventPrefix,
       "xcmSvcMonQueueExtV2Event": xcmSvcMonQueueExtV2Event,
       "xcmSvcMonQueueExtTable": xcmSvcMonQueueExtTable,
       "xcmSvcMonQueueExtEntry": xcmSvcMonQueueExtEntry,
       "xcmSvcMonQueueRoutingIndex": xcmSvcMonQueueRoutingIndex,
       "xcmSvcMonQueueState": xcmSvcMonQueueState,
       "xcmSvcMonQueueConditions": xcmSvcMonQueueConditions,
       "xcmSvcMonQueueFaultCount": xcmSvcMonQueueFaultCount,
       "xcmSvcMonQueueFaultCode": xcmSvcMonQueueFaultCode,
       "xcmSvcMonQueueFaultString": xcmSvcMonQueueFaultString,
       "xcmSvcMonQueueRowCreateDate": xcmSvcMonQueueRowCreateDate,
       "xcmSvcMonQueueRowTotalJobs": xcmSvcMonQueueRowTotalJobs,
       "xcmSvcMonQueueLastConnectDate": xcmSvcMonQueueLastConnectDate,
       "xcmSvcMonQueueLastConnectJobs": xcmSvcMonQueueLastConnectJobs,
       "xcmSvcMonService": xcmSvcMonService,
       "xcmSvcMonServiceV1EventOID": xcmSvcMonServiceV1EventOID,
       "xcmSvcMonServiceV2EventPrefix": xcmSvcMonServiceV2EventPrefix,
       "xcmSvcMonServiceV2Event": xcmSvcMonServiceV2Event,
       "xcmSvcMonServiceTable": xcmSvcMonServiceTable,
       "xcmSvcMonServiceEntry": xcmSvcMonServiceEntry,
       "xcmSvcMonServiceIndex": xcmSvcMonServiceIndex,
       "xcmSvcMonServiceRowStatus": xcmSvcMonServiceRowStatus,
       "xcmSvcMonServiceName": xcmSvcMonServiceName,
       "xcmSvcMonServiceCurrentState": xcmSvcMonServiceCurrentState,
       "xcmSvcMonServicePreviousState": xcmSvcMonServicePreviousState,
       "xcmSvcMonServiceConditions": xcmSvcMonServiceConditions,
       "xcmSvcMonServiceAvailability": xcmSvcMonServiceAvailability,
       "xcmSvcMonServicePhysicalDevice": xcmSvcMonServicePhysicalDevice,
       "xcmSvcMonServiceLogicalDevice": xcmSvcMonServiceLogicalDevice,
       "xcmSvcMonServiceExternalDevice": xcmSvcMonServiceExternalDevice,
       "xcmSvcMonServiceSWRun": xcmSvcMonServiceSWRun,
       "xcmSvcMonServiceSWInstalled": xcmSvcMonServiceSWInstalled,
       "xcmSvcMonServiceStorage": xcmSvcMonServiceStorage,
       "xcmSvcMonServicePriority": xcmSvcMonServicePriority,
       "xcmSvcMonServiceType": xcmSvcMonServiceType,
       "xcmSvcMonServiceStateDetail": xcmSvcMonServiceStateDetail,
       "xcmSvcMonServiceDetail": xcmSvcMonServiceDetail,
       "xcmSvcMonServiceDetailTable": xcmSvcMonServiceDetailTable,
       "xcmSvcMonServiceDetailEntry": xcmSvcMonServiceDetailEntry,
       "xcmSvcMonServiceDetailClass": xcmSvcMonServiceDetailClass,
       "xcmSvcMonServiceDetailType": xcmSvcMonServiceDetailType,
       "xcmSvcMonServiceDetailIndex": xcmSvcMonServiceDetailIndex,
       "xcmSvcMonServiceDetailRowStatus": xcmSvcMonServiceDetailRowStatus,
       "xcmSvcMonServiceDetailUnitClass": xcmSvcMonServiceDetailUnitClass,
       "xcmSvcMonServiceDetailUnit": xcmSvcMonServiceDetailUnit,
       "xcmSvcMonServiceDetailInteger": xcmSvcMonServiceDetailInteger,
       "xcmSvcMonServiceDetailOID": xcmSvcMonServiceDetailOID,
       "xcmSvcMonServiceDetailString": xcmSvcMonServiceDetailString,
       "xcmSvcMonServiceMgmt": xcmSvcMonServiceMgmt,
       "xcmSvcMonServiceMgmtV1EventOID": xcmSvcMonServiceMgmtV1EventOID,
       "xcmSvcMonServiceMgmtV2EventPrefix": xcmSvcMonServiceMgmtV2EventPrefix,
       "xcmSvcMonServiceMgmtV2Event": xcmSvcMonServiceMgmtV2Event,
       "xcmSvcMonServiceMgmtTable": xcmSvcMonServiceMgmtTable,
       "xcmSvcMonServiceMgmtEntry": xcmSvcMonServiceMgmtEntry,
       "xcmSvcMonServiceMgmtOperation": xcmSvcMonServiceMgmtOperation,
       "xcmSvcMonServiceMgmtData": xcmSvcMonServiceMgmtData,
       "xcmSvcMonServiceMgmtStatus": xcmSvcMonServiceMgmtStatus,
       "xcmSvcMonServiceMgmtInProgress": xcmSvcMonServiceMgmtInProgress,
       "xcmSvcMonServiceMgmtRowStatus": xcmSvcMonServiceMgmtRowStatus,
       "xcmSvcMonServiceMgmtUserPassword": xcmSvcMonServiceMgmtUserPassword,
       "xcmSvcMonServiceMgmtOperatorPassword": xcmSvcMonServiceMgmtOperatorPassword,
       "xcmSvcMonServiceMgmtAdminPassword": xcmSvcMonServiceMgmtAdminPassword,
       "xcmSimpleJobMgmtTC": xcmSimpleJobMgmtTC,
       "xCmSimpleJobDummy": xCmSimpleJobDummy,
       "xCmSimpleJobMgmtGroupSupport": xCmSimpleJobMgmtGroupSupport,
       "xCmSimpleJobMgmtOperation": xCmSimpleJobMgmtOperation,
       "xCmSimpleJobMgmtData": xCmSimpleJobMgmtData,
       "xcmSimpleJobMgmtMIB": xcmSimpleJobMgmtMIB,
       "xcmSimpleJobBase": xcmSimpleJobBase,
       "xcmSimpleJobBaseTable": xcmSimpleJobBaseTable,
       "xcmSimpleJobBaseEntry": xcmSimpleJobBaseEntry,
       "xcmSimpleJobBaseIndex": xcmSimpleJobBaseIndex,
       "xcmSimpleJobBaseRowStatus": xcmSimpleJobBaseRowStatus,
       "xcmSimpleJobBaseGroupSupport": xcmSimpleJobBaseGroupSupport,
       "xcmSimpleJobBaseCreateSupport": xcmSimpleJobBaseCreateSupport,
       "xcmSimpleJobBaseUpdateSupport": xcmSimpleJobBaseUpdateSupport,
       "xcmSimpleJobMgmtMIBConformance": xcmSimpleJobMgmtMIBConformance,
       "xcmSimpleJobMgmtMIBGroups": xcmSimpleJobMgmtMIBGroups,
       "xcmSimpleJobBaseGroup": xcmSimpleJobBaseGroup,
       "xcmSimpleJobMgmtGroup": xcmSimpleJobMgmtGroup,
       "xcmSimpleJobInterceptGroup": xcmSimpleJobInterceptGroup,
       "xcmSimpleJobMgmtMIBCompliance": xcmSimpleJobMgmtMIBCompliance,
       "xcmSimpleJobMgmt": xcmSimpleJobMgmt,
       "xcmSimpleJobMgmtV1EventOID": xcmSimpleJobMgmtV1EventOID,
       "xcmSimpleJobMgmtV2EventPrefix": xcmSimpleJobMgmtV2EventPrefix,
       "xcmSimpleJobMgmtV2Event": xcmSimpleJobMgmtV2Event,
       "xcmSimpleJobMgmtTable": xcmSimpleJobMgmtTable,
       "xcmSimpleJobMgmtEntry": xcmSimpleJobMgmtEntry,
       "xcmSimpleJobMgmtOperation": xcmSimpleJobMgmtOperation,
       "xcmSimpleJobMgmtData": xcmSimpleJobMgmtData,
       "xcmSimpleJobMgmtStatus": xcmSimpleJobMgmtStatus,
       "xcmSimpleJobMgmtInProgress": xcmSimpleJobMgmtInProgress,
       "xcmSimpleJobIntercept": xcmSimpleJobIntercept,
       "xcmSimpleJobInterceptV1EventOID": xcmSimpleJobInterceptV1EventOID,
       "xcmSimpleJobInterceptV2EventPrefix": xcmSimpleJobInterceptV2EventPrefix,
       "xcmSimpleJobInterceptV2Event": xcmSimpleJobInterceptV2Event,
       "xcmSimpleJobInterceptTable": xcmSimpleJobInterceptTable,
       "xcmSimpleJobInterceptEntry": xcmSimpleJobInterceptEntry,
       "xcmSimpleJobInterceptClientId": xcmSimpleJobInterceptClientId,
       "xcmSimpleJobInterceptRowStatus": xcmSimpleJobInterceptRowStatus,
       "xcmSimpleJobInterceptOperation": xcmSimpleJobInterceptOperation,
       "xcmSimpleJobInterceptData": xcmSimpleJobInterceptData,
       "xcmSimpleJobInterceptStatus": xcmSimpleJobInterceptStatus,
       "xcmSimpleJobInterceptInProgress": xcmSimpleJobInterceptInProgress,
       "xcmJmxMIB": xcmJmxMIB,
       "xcmJmxMIBObjects": xcmJmxMIBObjects,
       "xcmJmxGeneral": xcmJmxGeneral,
       "xcmJmxGeneralTable": xcmJmxGeneralTable,
       "xcmJmxGeneralEntry": xcmJmxGeneralEntry,
       "xcmJmxGeneralIndex": xcmJmxGeneralIndex,
       "xcmJmxGeneralGroupSupport": xcmJmxGeneralGroupSupport,
       "xcmJmxGeneralJobCreatedCount": xcmJmxGeneralJobCreatedCount,
       "xcmJmxGeneralJobCompletedCount": xcmJmxGeneralJobCompletedCount,
       "xcmJmxGeneralJobOperationCount": xcmJmxGeneralJobOperationCount,
       "xcmJmxGeneralJobTrapCount": xcmJmxGeneralJobTrapCount,
       "xcmJmxGeneralJobAccntSupport": xcmJmxGeneralJobAccntSupport,
       "xcmJmxJobAdmin": xcmJmxJobAdmin,
       "xcmJmxJobAdminTable": xcmJmxJobAdminTable,
       "xcmJmxJobAdminEntry": xcmJmxJobAdminEntry,
       "xcmJmxJobAdminOperation": xcmJmxJobAdminOperation,
       "xcmJmxJobAdminStatus": xcmJmxJobAdminStatus,
       "xcmJmxJobAdminInProgress": xcmJmxJobAdminInProgress,
       "xcmJmxMIBNotifications": xcmJmxMIBNotifications,
       "xcmJmxJobOperationV1Enterprise": xcmJmxJobOperationV1Enterprise,
       "xcmJmxJobOperationV2TrapPrefix": xcmJmxJobOperationV2TrapPrefix,
       "xcmJmxJobOperationV2Trap": xcmJmxJobOperationV2Trap,
       "xcmJmxJobStateV1Enterprise": xcmJmxJobStateV1Enterprise,
       "xcmJmxJobStateV2TrapPrefix": xcmJmxJobStateV2TrapPrefix,
       "xcmJmxJobStateV2Trap": xcmJmxJobStateV2Trap,
       "xcmJmxJobCreatedV1Enterprise": xcmJmxJobCreatedV1Enterprise,
       "xcmJmxJobCreatedV2TrapPrefix": xcmJmxJobCreatedV2TrapPrefix,
       "xcmJmxJobCreatedV2Trap": xcmJmxJobCreatedV2Trap,
       "xcmJmxJobCompletedV1Enterprise": xcmJmxJobCompletedV1Enterprise,
       "xcmJmxJobCompletedV2TrapPrefix": xcmJmxJobCompletedV2TrapPrefix,
       "xcmJmxJobCompletedV2Trap": xcmJmxJobCompletedV2Trap,
       "xcmJmxJobStoppedV1Enterprise": xcmJmxJobStoppedV1Enterprise,
       "xcmJmxJobStoppedV2TrapPrefix": xcmJmxJobStoppedV2TrapPrefix,
       "xcmJmxJobStoppedV2Trap": xcmJmxJobStoppedV2Trap,
       "xcmJmxJobConfigV1Enterprise": xcmJmxJobConfigV1Enterprise,
       "xcmJmxJobConfigV2TrapPrefix": xcmJmxJobConfigV2TrapPrefix,
       "xcmJmxJobConfigV2Trap": xcmJmxJobConfigV2Trap,
       "xcmJmxJobProgressV1Enterprise": xcmJmxJobProgressV1Enterprise,
       "xcmJmxJobProgressV2TrapPrefix": xcmJmxJobProgressV2TrapPrefix,
       "xcmJmxJobProgressV2Trap": xcmJmxJobProgressV2Trap,
       "xcmJmxMIBConformance": xcmJmxMIBConformance,
       "xcmJmxMIBCompliance": xcmJmxMIBCompliance,
       "xcmJmxMIBObjectGroups": xcmJmxMIBObjectGroups,
       "xcmJmxGeneralGroup": xcmJmxGeneralGroup,
       "xcmJmxJobAdminGroup": xcmJmxJobAdminGroup,
       "xcmJmxMIBTrapGroups": xcmJmxMIBTrapGroups}
)

# SNMP MIB module (ERR-STATUS-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/ERR-STATUS-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 21:40:38 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(stratacom,) = mibBuilder.importSymbols(
    "CISCOWAN-SMI",
    "stratacom")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "iso")

(DisplayString,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions


# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_StrmErrors_ObjectIdentity = ObjectIdentity
strmErrors = _StrmErrors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 910)
)
_ErrStatusLastIndex_Type = Integer32
_ErrStatusLastIndex_Object = MibScalar
errStatusLastIndex = _ErrStatusLastIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 910, 1),
    _ErrStatusLastIndex_Type()
)
errStatusLastIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errStatusLastIndex.setStatus("mandatory")
_ErrStatusTable_Object = MibTable
errStatusTable = _ErrStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 910, 2)
)
if mibBuilder.loadTexts:
    errStatusTable.setStatus("mandatory")
_ErrStatusTableEntry_Object = MibTableRow
errStatusTableEntry = _ErrStatusTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 910, 2, 1)
)
errStatusTableEntry.setIndexNames(
    (0, "ERR-STATUS-MIB", "errReqId"),
)
if mibBuilder.loadTexts:
    errStatusTableEntry.setStatus("mandatory")
_ErrReqId_Type = Integer32
_ErrReqId_Object = MibTableColumn
errReqId = _ErrReqId_Object(
    (1, 3, 6, 1, 4, 1, 351, 910, 2, 1, 1),
    _ErrReqId_Type()
)
errReqId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errReqId.setStatus("mandatory")


class _ErrCode_Type(Integer32):
    """Custom type errCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              601,
              602,
              603,
              605,
              606,
              607,
              608,
              609,
              610,
              611,
              612,
              613,
              614,
              615,
              616,
              617,
              618,
              619,
              620,
              621,
              622,
              623,
              624,
              625,
              626,
              627,
              628,
              629,
              630,
              631,
              633,
              634,
              635,
              636,
              637,
              638,
              639,
              640,
              641,
              642,
              643,
              644,
              645,
              646,
              647,
              648,
              649,
              650,
              651,
              652,
              653,
              654,
              655,
              656,
              657,
              658,
              659,
              660,
              661,
              662,
              663,
              664,
              665,
              666,
              667,
              668,
              669,
              670,
              671,
              672,
              673,
              674,
              675,
              676,
              677,
              678,
              679,
              680,
              681,
              682,
              683,
              684,
              685,
              686,
              687,
              688,
              689,
              690,
              691,
              692,
              693,
              694,
              695,
              696,
              701,
              702,
              703,
              704,
              705,
              706,
              707,
              708,
              709,
              710,
              711,
              712,
              713,
              714,
              715,
              716,
              717,
              718,
              719,
              720,
              721,
              722,
              723,
              724,
              725,
              726,
              727,
              728,
              729,
              730,
              731,
              732,
              733,
              734,
              735,
              736,
              737,
              738,
              739,
              740,
              741,
              742,
              743,
              744,
              745,
              746,
              747,
              748,
              749,
              750,
              751,
              752,
              753,
              754,
              755,
              756,
              757,
              758,
              759,
              760,
              761,
              762)
        )
    )
    namedValues = NamedValues(
        *(("abrNeedsLpcr", 383),
          ("abrNeedsRpcr", 384),
          ("actsctCntExceed", 628),
          ("ascUpdFailed", 23),
          ("authorizationError", 16),
          ("axsmDiskErr", 611),
          ("badBayOrLine", 616),
          ("badIpcData", 702),
          ("badRMaxClr", 387),
          ("badRcdv", 385),
          ("badRctd", 386),
          ("bcMismatch", 653),
          ("bcMissing", 654),
          ("bertConfigurationIncomplete", 82),
          ("bertDelFailed", 59),
          ("bertEirOneInTenNotSupport", 90),
          ("bertGeneralError", 63),
          ("bertInvalidState", 89),
          ("bertModFailed", 58),
          ("bertNotConfigured", 81),
          ("bertNotOwner", 56),
          ("bertPatternSyncFailure", 87),
          ("bertResourcesNotFree", 52),
          ("bertResourcesNotReady", 53),
          ("bertSlotEmpty", 54),
          ("bertStartFailed", 57),
          ("bertUnableToFree", 62),
          ("bertUnsupportedCard", 55),
          ("bertUnsupportedType", 60),
          ("bertWrongParams", 61),
          ("bnmProblem", 22),
          ("cannotAllocBw", 637),
          ("cannotAllocLcn", 636),
          ("cannotCnfProtLine", 669),
          ("cannotModBwRange", 642),
          ("cannotModLcnRange", 641),
          ("cannotModSctID", 613),
          ("cannotReleaseBw", 640),
          ("cannotReleaseLcn", 639),
          ("cantChgCtlrId", 744),
          ("cantChgMastership", 723),
          ("cantChgPartType", 745),
          ("cantChgRmtAddr", 722),
          ("cantChgRmtVci", 721),
          ("cantChgRmtVpi", 720),
          ("cantChgServType", 725),
          ("cantChgSubIf", 724),
          ("cantChgSubIfType", 751),
          ("cantChgVpcFlag", 719),
          ("cantCnfVc", 726),
          ("cantDelMainIf", 754),
          ("cantDelPart", 747),
          ("cantDelVc", 727),
          ("cantModPart", 746),
          ("cantShutMainIf", 753),
          ("cantsetOamseg", 397),
          ("cbrNeedsLpcr", 379),
          ("cbrNeedsRpcr", 380),
          ("ccbAtmAddrExceedMax", 262),
          ("ccbAtmAddrExist", 264),
          ("ccbAtmAddrNotAllowed", 265),
          ("ccbAtmAddrNotExist", 263),
          ("ccbAtmAddrSendPnniFailed", 266),
          ("ccbNullMessageSent", 250),
          ("ccbOperationNotPermittedOnControlPort", 254),
          ("ccbOutOfMemory", 251),
          ("ccbPortDownAlready", 260),
          ("ccbPortExists", 255),
          ("ccbPortInUseBySwitch", 257),
          ("ccbPortNotExist", 256),
          ("ccbPortNotOutOfService", 258),
          ("ccbPortTypeNotMatch", 261),
          ("ccbPortUpAlready", 259),
          ("ccbSSIMessageAllocationFailed", 252),
          ("ccbSwitchResponseReturnedFailure", 253),
          ("cdcNotAllowedSlaveEp", 395),
          ("cdvNotApplicableServiceType", 391),
          ("chanDisabled", 32),
          ("chanEnabled", 31),
          ("commandProcNotReady", 601),
          ("commitFailed", 14),
          ("configNotSupported", 608),
          ("conflictingPort", 660),
          ("connAlreadyDown", 366),
          ("connAlreadyUp", 365),
          ("connNotExist", 111),
          ("connNotFound", 728),
          ("ctdNotAllowedSlaveEp", 394),
          ("ctdNotApplicableServiceType", 390),
          ("ctlrIdRequired", 731),
          ("databaseLocked", 5),
          ("daxChgFailed", 127),
          ("daxCmtFailed", 124),
          ("daxDelFailed", 130),
          ("daxNoSlave", 355),
          ("daxRerouteNotAppl", 369),
          ("daxSlaveNotAvail", 356),
          ("daxSlaveParamMismatch", 367),
          ("daxSlaveTrafficParamModNotAllowed", 368),
          ("dcMismatch", 651),
          ("dcMissing", 652),
          ("delFailed", 359),
          ("delRedBeforeLastLinkDelete", 88),
          ("diskUpdFailed", 704),
          ("dlciDisabled", 34),
          ("dlciEnabled", 33),
          ("dlciUsed", 50),
          ("downFailed", 362),
          ("dupRequest", 647),
          ("egrBwNotAvail", 739),
          ("egrBwRangeRequired", 733),
          ("endptAllocFailed", 352),
          ("endptNotExist", 357),
          ("endptNotMaster", 730),
          ("endptNotPersistent", 358),
          ("epAlreadyExists", 393),
          ("existErr", 2),
          ("featureDisabled", 19),
          ("featureMismatch", 48),
          ("frontcardMismatch", 609),
          ("frozenStatsLvl", 663),
          ("genConnErr", 117),
          ("hardwareConfigErr", 633),
          ("imaAddportOnLinkError", 695),
          ("imaFeatureIsBlocked", 682),
          ("imaGroupAtmPhyLimit", 694),
          ("imaGroupDelayClrErr", 691),
          ("imaGroupDisable", 667),
          ("imaGroupEnable", 666),
          ("imaGroupFrameLengthErr", 693),
          ("imaGroupHasPorts", 668),
          ("imaGroupInvalidMaxDelay", 687),
          ("imaGroupInvalidVersion", 688),
          ("imaGroupItcClockNotSupport", 692),
          ("imaInsufficientAtmPhy", 677),
          ("imaInvalidClkSource", 678),
          ("imaInvalidErrInsertionRate", 675),
          ("imaInvalidLineLength", 673),
          ("imaInvalidLoopbackConf", 679),
          ("imaInvalidParameters", 672),
          ("imaInvalidPattern", 674),
          ("imaLinkDeletePending", 684),
          ("imaLinkExist", 685),
          ("imaLinkNotInGroup", 689),
          ("imaLinkTestInvalidStatusValue", 686),
          ("imaMinBandwidthViolation", 683),
          ("imaModuleNotReady", 671),
          ("imaNullHdrNullPyldNotSupported", 680),
          ("imaProtocolError", 676),
          ("imaServiceModuleError", 696),
          ("imaTestLinkNotInGroup", 690),
          ("imaVer2Txm128Only", 681),
          ("inarpNotAllowed", 709),
          ("inconsistentName", 18),
          ("inconsistentValue", 12),
          ("ingBwNotAvail", 738),
          ("ingBwRangeRequired", 732),
          ("interfaceDown", 370),
          ("invalidAtmPhy", 659),
          ("invalidBayNum", 605),
          ("invalidCardType", 47),
          ("invalidCellMapping", 656),
          ("invalidCommand", 46),
          ("invalidConnAddr", 108),
          ("invalidConnType", 116),
          ("invalidConnref", 646),
          ("invalidCtlrNum", 644),
          ("invalidDiskRecord", 655),
          ("invalidEgrBwRange", 737),
          ("invalidIfIndex", 602),
          ("invalidImaGroup", 665),
          ("invalidIngBwRange", 736),
          ("invalidIpAddr", 749),
          ("invalidLineNum", 68),
          ("invalidLineTrace", 657),
          ("invalidParam", 701),
          ("invalidPartNum", 643),
          ("invalidPortNum", 606),
          ("invalidPrimarySlot", 38),
          ("invalidRedType", 51),
          ("invalidSecondarySlot", 39),
          ("invalidShelfNum", 603),
          ("invalidSlave", 645),
          ("invalidSlotNum", 67),
          ("invalidSrmeLineNum", 758),
          ("invalidStatsLvl", 664),
          ("invalidT1LineNum", 66),
          ("invalidT3LineNum", 65),
          ("invalidTcaSeverity", 658),
          ("invalidTrafficParam", 354),
          ("invalidVci", 717),
          ("invalidVciRange", 741),
          ("invalidVpi", 716),
          ("invalidVpiRange", 740),
          ("invalidVtFrameType", 761),
          ("invalidVtMapping", 760),
          ("invalidVtNum", 759),
          ("ipcErr", 756),
          ("lCrTooBig", 388),
          ("legAllocFailed", 353),
          ("lineDisabled", 25),
          ("lineEnabled", 24),
          ("lineHasPorts", 27),
          ("lineInLoopback", 75),
          ("lineInUse", 70),
          ("lineInconsistentLoopback", 76),
          ("lineLoopNotAllowed", 77),
          ("lineOutOfService", 80),
          ("lineResvForE3", 622),
          ("lineResvForT3", 623),
          ("linkFull", 40),
          ("lmMismatch", 26),
          ("lmiEnabled", 49),
          ("lmiTrkNotAdded", 110),
          ("localAddrExist", 106),
          ("localAddrNotOk", 104),
          ("localAddrUnknown", 136),
          ("localChannelsNotEnough", 102),
          ("localIfInvalid", 348),
          ("localIfNotOk", 100),
          ("loopDownFailure", 86),
          ("loopUpFailure", 85),
          ("lscrBiggerThanLpcr", 377),
          ("m32Problem", 20),
          ("masterChgFailed", 125),
          ("masterCmtFailed", 122),
          ("masterConnAllocFailed", 118),
          ("masterDelFailed", 128),
          ("masterLogepAllocFailed", 120),
          ("masterSessionUnavail", 133),
          ("masterTimeout", 131),
          ("maxConnsExceeded", 109),
          ("mcNotAllowedSlaveEp", 396),
          ("minConnsExceedsMax", 661),
          ("minRateExceedMax", 624),
          ("modFailed", 360),
          ("mxConAddSessionExceeded", 132),
          ("networkBusy", 139),
          ("networkBusyTryLater", 398),
          ("noCreation", 11),
          ("noPepToDelete", 375),
          ("notEnoughLine", 69),
          ("notWritable", 17),
          ("operNotAppl", 364),
          ("otherErr", 6),
          ("outOfMemory", 649),
          ("ovrsubConnFail", 36),
          ("ovrsubconnPass", 35),
          ("partExist", 615),
          ("partNotExist", 614),
          ("partPortParmMismatch", 638),
          ("partRateExceedsPortRate", 621),
          ("partTblFull", 662),
          ("pendingRequest", 648),
          ("pnniConfigurationFail", 200),
          ("pnniEntryExist", 203),
          ("pnniEntryNotExist", 204),
          ("pnniInvalidAtmEndStationAddress", 207),
          ("pnniInvalidValue", 201),
          ("pnniNotReadyForSet", 208),
          ("pnniTargetInterfaceNotExist", 206),
          ("pnniTargetNodeAdminUp", 205),
          ("pnniTargtNodeNotExist", 202),
          ("portDisable", 29),
          ("portDontSuppoSc", 376),
          ("portEnabled", 28),
          ("portHasChan", 30),
          ("portHasResPart", 138),
          ("portInLoopback", 64),
          ("portOutOfService", 79),
          ("portRateExceedLnRate", 612),
          ("portRateSumExceedLnRate", 610),
          ("portVpiVciInUse", 37),
          ("pppErr", 715),
          ("primaryDuplicate", 41),
          ("primaryNotPresent", 43),
          ("provDisBcMismatch", 607),
          ("rCrTooBig", 389),
          ("remoteAddrExist", 107),
          ("remoteAddrNotOk", 105),
          ("remoteChannelsNotEnough", 103),
          ("remoteIfInvalid", 349),
          ("remoteIfNotOk", 101),
          ("rerouteFailed", 363),
          ("resourceErr", 4),
          ("resourceInUse", 650),
          ("resourceUnavailable", 13),
          ("rmtAddrRequired", 351),
          ("rmtAddrUnknown", 137),
          ("rpmConfigCopyinProgress", 762),
          ("rpmNoResponse", 757),
          ("rpmNotActive", 755),
          ("rscrBiggerThanRpcr", 378),
          ("rvtNotActive", 703),
          ("sarProblem", 21),
          ("sctFileBad", 630),
          ("sctFileMissing", 629),
          ("sctSgParmMismatch", 631),
          ("secondIlmiVc", 713),
          ("secondVccOnPTP", 711),
          ("secondaryDuplicate", 42),
          ("secondaryNotPresent", 44),
          ("serviceTypeNotSupported", 718),
          ("slaveChgFailed", 126),
          ("slaveCmtFailed", 123),
          ("slaveCnfconNotAllowed", 140),
          ("slaveConnAllocFailed", 119),
          ("slaveDelFailed", 129),
          ("slaveLogepAllocFailed", 121),
          ("slaveSessionUnavail", 134),
          ("smNotPresent", 72),
          ("smNotPrimary", 73),
          ("spvcBlockEnabled", 372),
          ("spvcNotAllowedDelDaxSlaveEp", 374),
          ("spvcNotAllowedOnIntf", 373),
          ("spvcNotAllowedOnPart", 371),
          ("srm3t3NotPresent", 74),
          ("srmNotPresent", 45),
          ("subIfDown", 705),
          ("subIfExist", 748),
          ("subIfNotExist", 729),
          ("subIfNotFound", 752),
          ("subIfTypeRequired", 750),
          ("success", 1),
          ("swErr", 627),
          ("syntaxErr", 3),
          ("t3NotEnabled", 71),
          ("testAlreadyOn", 83),
          ("testNotOn", 84),
          ("undoFailed", 15),
          ("unknownDest", 135),
          ("unknownEncapType", 714),
          ("unknownLANEType", 712),
          ("upFailed", 361),
          ("vbrNeedsLpcr", 381),
          ("vbrNeedsRpcr", 382),
          ("vccExistsVpi", 392),
          ("vcdInUse", 710),
          ("vcdOutOfRange", 708),
          ("vciLoExceedHi", 626),
          ("vciOutOfRange", 707),
          ("vciOverlap", 635),
          ("vciRangeErr", 115),
          ("vciRangeInUse", 743),
          ("vciRangeRequired", 735),
          ("versionMismatch", 78),
          ("vpiConflictForVcc", 112),
          ("vpiConflictForVpc", 113),
          ("vpiLoExceedHi", 625),
          ("vpiOutOfRange", 706),
          ("vpiOverlap", 634),
          ("vpiRangeErr", 114),
          ("vpiRangeInUse", 742),
          ("vpiRangeRequired", 734),
          ("vpiVciNotAvail", 350),
          ("vsiSetErr", 617),
          ("vsisAddPart", 618),
          ("vsisCnfPart", 619),
          ("vsisDelPart", 620),
          ("workingLineDown", 670),
          ("wrongEncoding", 9),
          ("wrongLength", 8),
          ("wrongType", 7),
          ("wrongValue", 10))
    )


_ErrCode_Type.__name__ = "Integer32"
_ErrCode_Object = MibTableColumn
errCode = _ErrCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 910, 2, 1, 2),
    _ErrCode_Type()
)
errCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errCode.setStatus("mandatory")
_ErrStatusDesc_Type = DisplayString
_ErrStatusDesc_Object = MibTableColumn
errStatusDesc = _ErrStatusDesc_Object(
    (1, 3, 6, 1, 4, 1, 351, 910, 2, 1, 3),
    _ErrStatusDesc_Type()
)
errStatusDesc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errStatusDesc.setStatus("mandatory")

# Managed Objects groups


# Notification objects


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "ERR-STATUS-MIB",
    **{"strmErrors": strmErrors,
       "errStatusLastIndex": errStatusLastIndex,
       "errStatusTable": errStatusTable,
       "errStatusTableEntry": errStatusTableEntry,
       "errReqId": errReqId,
       "errCode": errCode,
       "errStatusDesc": errStatusDesc}
)

# SNMP MIB module (RAPID-CITY) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/RAPID-CITY
# Produced by pysmi-1.5.4 at Mon Oct 14 20:45:54 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(AtmAddr,) = mibBuilder.importSymbols(
    "ATM-TC-MIB",
    "AtmAddr")

(bgpPeerLastError,
 bgpPeerRemoteAddr,
 bgpPeerState) = mibBuilder.importSymbols(
    "BGP4-MIB",
    "bgpPeerLastError",
    "bgpPeerRemoteAddr",
    "bgpPeerState")

(IndexInteger,) = mibBuilder.importSymbols(
    "DIFFSERV-MIB",
    "IndexInteger")

(dvmrpInterfaceIfIndex,
 dvmrpInterfaceOperState,
 dvmrpNeighborAddress,
 dvmrpNeighborIfIndex) = mibBuilder.importSymbols(
    "DVMRP-MIB",
    "dvmrpInterfaceIfIndex",
    "dvmrpInterfaceOperState",
    "dvmrpNeighborAddress",
    "dvmrpNeighborIfIndex")

(ifAdminStatus,
 ifIndex,
 ifOperStatus) = mibBuilder.importSymbols(
    "IF-MIB",
    "ifAdminStatus",
    "ifIndex",
    "ifOperStatus")

(igmpCacheAddress,
 igmpCacheIfIndex,
 igmpInterfaceIfIndex,
 igmpInterfaceQuerier) = mibBuilder.importSymbols(
    "IGMP-STD-MIB",
    "igmpCacheAddress",
    "igmpCacheIfIndex",
    "igmpInterfaceIfIndex",
    "igmpInterfaceQuerier")

(InetAddress,
 InetAddressPrefixLength,
 InetAddressType,
 InetAutonomousSystemNumber,
 InetPortNumber) = mibBuilder.importSymbols(
    "INET-ADDRESS-MIB",
    "InetAddress",
    "InetAddressPrefixLength",
    "InetAddressType",
    "InetAutonomousSystemNumber",
    "InetPortNumber")

(ipNetToMediaNetAddress,
 ipNetToMediaPhysAddress) = mibBuilder.importSymbols(
    "IP-MIB",
    "ipNetToMediaNetAddress",
    "ipNetToMediaPhysAddress")

(Ipv6Address,
 Ipv6AddressIfIdentifier,
 Ipv6AddressPrefix,
 Ipv6IfIndex,
 Ipv6IfIndexOrZero) = mibBuilder.importSymbols(
    "IPV6-TC",
    "Ipv6Address",
    "Ipv6AddressIfIdentifier",
    "Ipv6AddressPrefix",
    "Ipv6IfIndex",
    "Ipv6IfIndexOrZero")

(MplsExtendedTunnelId,
 MplsLSPID,
 MplsLabel,
 MplsLdpIdentifier,
 MplsTunnelIndex,
 MplsTunnelInstanceIndex) = mibBuilder.importSymbols(
    "MPLS-TC-STD-MIB",
    "MplsExtendedTunnelId",
    "MplsLSPID",
    "MplsLabel",
    "MplsLdpIdentifier",
    "MplsTunnelIndex",
    "MplsTunnelInstanceIndex")

(msdpPeerEntry,
 msdpPeerFsmEstablishedTransitions,
 msdpPeerState,
 msdpSACacheEntry) = mibBuilder.importSymbols(
    "MSDP-MIB",
    "msdpPeerEntry",
    "msdpPeerFsmEstablishedTransitions",
    "msdpPeerState",
    "msdpSACacheEntry")

(SnmpAdminString,
 SnmpSecurityLevel,
 SnmpSecurityModel) = mibBuilder.importSymbols(
    "SNMP-FRAMEWORK-MIB",
    "SnmpAdminString",
    "SnmpSecurityLevel",
    "SnmpSecurityModel")

(ModuleCompliance,
 NotificationGroup,
 ObjectGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup",
    "ObjectGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DateAndTime,
 DisplayString,
 MacAddress,
 PhysAddress,
 RowPointer,
 RowStatus,
 StorageType,
 TextualConvention,
 TimeInterval,
 TimeStamp,
 TruthValue) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DateAndTime",
    "DisplayString",
    "MacAddress",
    "PhysAddress",
    "RowPointer",
    "RowStatus",
    "StorageType",
    "TextualConvention",
    "TimeInterval",
    "TimeStamp",
    "TruthValue")

(VrId,) = mibBuilder.importSymbols(
    "VRRP-MIB",
    "VrId")


# MODULE-IDENTITY

rapidCity = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 2272)
)


# Types definitions


# TEXTUAL-CONVENTIONS



class BridgeId(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )



class Timeout(Integer32, TextualConvention):
    status = "current"


class EnableValue(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )



class RcLongDisplayString(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 65535),
    )



class InterfaceIndex(Integer32, TextualConvention):
    status = "current"


class InterfaceIndexOrZero(Integer32, TextualConvention):
    status = "current"
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )



class PortSet(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )



class IdList(OctetString, TextualConvention):
    status = "current"


class VrfIdentifier(Unsigned32, TextualConvention):
    status = "current"
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )



class Ipv6NextHdr(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              6,
              8,
              17,
              41,
              43,
              44,
              46,
              50,
              51,
              58,
              59,
              60,
              255)
        )
    )
    namedValues = NamedValues(
        *(("destOptions", 60),
          ("egp", 8),
          ("frag", 44),
          ("hop-by-hop", 0),
          ("icmpv4", 1),
          ("icmpv6", 58),
          ("igmpv4", 2),
          ("ipInIp", 4),
          ("ipsecAh", 51),
          ("ipsecESP", 50),
          ("ipv6", 41),
          ("noNxtHdr", 59),
          ("routing", 43),
          ("rsvp", 46),
          ("tcp", 6),
          ("udp", 17),
          ("undefined", 255))
    )



class KhiStatusValue(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("adminDisable", 4),
          ("green", 1),
          ("notApplicable", 5),
          ("red", 3),
          ("yellow", 2))
    )



class RcIpBgpTmpIdentifierTC(OctetString, TextualConvention):
    status = "current"
    displayHint = "1d."
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )



class RcIpBgpTmpAddressFamilyIdentifierTC(Unsigned32, TextualConvention):
    status = "current"
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )



class RcIpBgpTmpSubsequentAddressFamilyIdentifierTC(Unsigned32, TextualConvention):
    status = "current"
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )



class RcBfdTmpSessIndexTC(Unsigned32, TextualConvention):
    status = "current"
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )



class RcBfdTmpInterval(Unsigned32, TextualConvention):
    status = "current"
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )



class RcBfdTmpDiag(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("administrativelyDown", 8),
          ("concatenatedPathDown", 7),
          ("controlDetectionTimeExpired", 2),
          ("echoFunctionFailed", 3),
          ("forwardingPlaneReset", 5),
          ("neighborSignaledSessionDown", 4),
          ("noDiagnostic", 1),
          ("pathDown", 6),
          ("reverseConcatenatedPathDown", 9))
    )



class IpAddressOriginTC(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("dhcp", 4),
          ("linklayer", 5),
          ("manual", 2),
          ("other", 1),
          ("random", 6))
    )



class IpAddressStatusTC(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("deprecated", 2),
          ("duplicate", 7),
          ("inaccessible", 4),
          ("invalid", 3),
          ("preferred", 1),
          ("tentative", 6),
          ("unknown", 5))
    )



class UpToRefreshInterval(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )



class RouterDeadRange(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )



class LaneSet(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )



class IsisPlsbNodeNickName(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )



class IsisSystemID(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )



class VPNId(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(7, 7),
    )



class VrfRpTriggerBitCode(Bits, TextualConvention):
    status = "current"


class IsisDefaultL1Metric(Integer32, TextualConvention):
    status = "current"
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 63),
    )



class IsisWideL1Metric(Integer32, TextualConvention):
    status = "current"
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )



class IsisPlsbBvid(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )



class IsisPlsbBvidTieBrkAlg(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high-pathid", 2),
          ("low-pathid", 1))
    )



class CfmRelayActionFieldValue(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("rlyFdb", 2),
          ("rlyHit", 1),
          ("rlyMpdb", 3),
          ("unknown", 4))
    )



class CfmIngressActionFieldValue(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ingBlocked", 3),
          ("ingDown", 2),
          ("ingNoTlv", 5),
          ("ingOk", 1),
          ("ingVid", 4))
    )



class CfmEgressActionFieldValue(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("egrBlocked", 3),
          ("egrDown", 2),
          ("egrNoTlv", 5),
          ("egrOk", 1),
          ("egrVid", 4))
    )



class LldpPortIdSubtype(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("agentCircuitId", 6),
          ("interfaceAlias", 1),
          ("interfaceName", 5),
          ("local", 7),
          ("macAddress", 3),
          ("networkAddress", 4),
          ("portComponent", 2))
    )



class LldpPortId(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )



# MIB Managed Objects in the order of their OIDs

_Internet_ObjectIdentity = ObjectIdentity
internet = _Internet_ObjectIdentity(
    (1, 3, 6, 1)
)
_RcMgmt_ObjectIdentity = ObjectIdentity
rcMgmt = _RcMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1)
)
_RcSystem_ObjectIdentity = ObjectIdentity
rcSystem = _RcSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1)
)
_RcSysIpAddr_Type = IpAddress
_RcSysIpAddr_Object = MibScalar
rcSysIpAddr = _RcSysIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 1),
    _RcSysIpAddr_Type()
)
rcSysIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysIpAddr.setStatus("current")
_RcSysNetMask_Type = IpAddress
_RcSysNetMask_Object = MibScalar
rcSysNetMask = _RcSysNetMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 2),
    _RcSysNetMask_Type()
)
rcSysNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysNetMask.setStatus("current")
_RcSysBroadcast_Type = IpAddress
_RcSysBroadcast_Object = MibScalar
rcSysBroadcast = _RcSysBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 3),
    _RcSysBroadcast_Type()
)
rcSysBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysBroadcast.setStatus("current")


class _RcSysCommReadWriteAll_Type(DisplayString):
    """Custom type rcSysCommReadWriteAll based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcSysCommReadWriteAll_Type.__name__ = "DisplayString"
_RcSysCommReadWriteAll_Object = MibScalar
rcSysCommReadWriteAll = _RcSysCommReadWriteAll_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 4),
    _RcSysCommReadWriteAll_Type()
)
rcSysCommReadWriteAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysCommReadWriteAll.setStatus("current")


class _RcSysCommReadWrite_Type(DisplayString):
    """Custom type rcSysCommReadWrite based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcSysCommReadWrite_Type.__name__ = "DisplayString"
_RcSysCommReadWrite_Object = MibScalar
rcSysCommReadWrite = _RcSysCommReadWrite_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 5),
    _RcSysCommReadWrite_Type()
)
rcSysCommReadWrite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysCommReadWrite.setStatus("current")


class _RcSysCommReadOnly_Type(DisplayString):
    """Custom type rcSysCommReadOnly based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcSysCommReadOnly_Type.__name__ = "DisplayString"
_RcSysCommReadOnly_Object = MibScalar
rcSysCommReadOnly = _RcSysCommReadOnly_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 6),
    _RcSysCommReadOnly_Type()
)
rcSysCommReadOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysCommReadOnly.setStatus("current")


class _RcSysVersion_Type(DisplayString):
    """Custom type rcSysVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_RcSysVersion_Type.__name__ = "DisplayString"
_RcSysVersion_Object = MibScalar
rcSysVersion = _RcSysVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 7),
    _RcSysVersion_Type()
)
rcSysVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysVersion.setStatus("current")


class _RcSysAction_Type(Integer32):
    """Custom type rcSysAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("checkSwInFlash", 8),
          ("checkSwInPcmcia", 9),
          ("cpuSwitchOver", 7),
          ("flushIpRouteTbl", 12),
          ("hardReset", 2),
          ("none", 1),
          ("resetConsole", 10),
          ("resetCounters", 5),
          ("resetIstStatCounters", 17),
          ("resetModem", 11),
          ("saveBootConfig", 15),
          ("saveRuntimeConfig", 13),
          ("saveRuntimeConfigToSlave", 14),
          ("saveSlaveBootConfig", 16),
          ("saveToNVRAM", 4),
          ("saveToStandbyNVRAM", 6),
          ("softReset", 3))
    )


_RcSysAction_Type.__name__ = "Integer32"
_RcSysAction_Object = MibScalar
rcSysAction = _RcSysAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 8),
    _RcSysAction_Type()
)
rcSysAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAction.setStatus("current")


class _RcSysResult_Type(Integer32):
    """Custom type rcSysResult based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("crcCheckFailed", 7),
          ("fail", 4),
          ("flashReadFailed", 5),
          ("inProgress", 2),
          ("noStandbyCpu", 8),
          ("none", 1),
          ("pcmciaReadFailed", 6),
          ("success", 3))
    )


_RcSysResult_Type.__name__ = "Integer32"
_RcSysResult_Object = MibScalar
rcSysResult = _RcSysResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 9),
    _RcSysResult_Type()
)
rcSysResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysResult.setStatus("current")
_RcSysLastChange_Type = TimeTicks
_RcSysLastChange_Object = MibScalar
rcSysLastChange = _RcSysLastChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 10),
    _RcSysLastChange_Type()
)
rcSysLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastChange.setStatus("current")
_RcSysLastVlanChange_Type = TimeTicks
_RcSysLastVlanChange_Object = MibScalar
rcSysLastVlanChange = _RcSysLastVlanChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 11),
    _RcSysLastVlanChange_Type()
)
rcSysLastVlanChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastVlanChange.setStatus("current")
_RcSysLastStatisticsReset_Type = TimeTicks
_RcSysLastStatisticsReset_Object = MibScalar
rcSysLastStatisticsReset = _RcSysLastStatisticsReset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 12),
    _RcSysLastStatisticsReset_Type()
)
rcSysLastStatisticsReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastStatisticsReset.setStatus("current")


class _RcSysBufferUtil_Type(Integer32):
    """Custom type rcSysBufferUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RcSysBufferUtil_Type.__name__ = "Integer32"
_RcSysBufferUtil_Object = MibScalar
rcSysBufferUtil = _RcSysBufferUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 13),
    _RcSysBufferUtil_Type()
)
rcSysBufferUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysBufferUtil.setStatus("current")


class _RcSysBufferUtilPeak_Type(Integer32):
    """Custom type rcSysBufferUtilPeak based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RcSysBufferUtilPeak_Type.__name__ = "Integer32"
_RcSysBufferUtilPeak_Object = MibScalar
rcSysBufferUtilPeak = _RcSysBufferUtilPeak_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 14),
    _RcSysBufferUtilPeak_Type()
)
rcSysBufferUtilPeak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysBufferUtilPeak.setStatus("current")
_RcSysBufferUtilPeakTime_Type = TimeTicks
_RcSysBufferUtilPeakTime_Object = MibScalar
rcSysBufferUtilPeakTime = _RcSysBufferUtilPeakTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 15),
    _RcSysBufferUtilPeakTime_Type()
)
rcSysBufferUtilPeakTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysBufferUtilPeakTime.setStatus("current")
_RcSysNVRamSize_Type = Gauge32
_RcSysNVRamSize_Object = MibScalar
rcSysNVRamSize = _RcSysNVRamSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 16),
    _RcSysNVRamSize_Type()
)
rcSysNVRamSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysNVRamSize.setStatus("current")
_RcSysNVRamUsed_Type = Gauge32
_RcSysNVRamUsed_Object = MibScalar
rcSysNVRamUsed = _RcSysNVRamUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 17),
    _RcSysNVRamUsed_Type()
)
rcSysNVRamUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysNVRamUsed.setStatus("current")
_RcSysLastSaveToNVRam_Type = TimeTicks
_RcSysLastSaveToNVRam_Object = MibScalar
rcSysLastSaveToNVRam = _RcSysLastSaveToNVRam_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 18),
    _RcSysLastSaveToNVRam_Type()
)
rcSysLastSaveToNVRam.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastSaveToNVRam.setStatus("current")
_RcSysLastSaveToStandbyNVRam_Type = TimeTicks
_RcSysLastSaveToStandbyNVRam_Object = MibScalar
rcSysLastSaveToStandbyNVRam = _RcSysLastSaveToStandbyNVRam_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 19),
    _RcSysLastSaveToStandbyNVRam_Type()
)
rcSysLastSaveToStandbyNVRam.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastSaveToStandbyNVRam.setStatus("current")
_RcSysCpuUtil_Type = Gauge32
_RcSysCpuUtil_Object = MibScalar
rcSysCpuUtil = _RcSysCpuUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 20),
    _RcSysCpuUtil_Type()
)
rcSysCpuUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysCpuUtil.setStatus("current")
_RcSysSwitchFabricUtil_Type = Gauge32
_RcSysSwitchFabricUtil_Object = MibScalar
rcSysSwitchFabricUtil = _RcSysSwitchFabricUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 21),
    _RcSysSwitchFabricUtil_Type()
)
rcSysSwitchFabricUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysSwitchFabricUtil.setStatus("current")


class _RcSysRmonMemSize_Type(Integer32):
    """Custom type rcSysRmonMemSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(250000, 4000000),
    )


_RcSysRmonMemSize_Type.__name__ = "Integer32"
_RcSysRmonMemSize_Object = MibScalar
rcSysRmonMemSize = _RcSysRmonMemSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 22),
    _RcSysRmonMemSize_Type()
)
rcSysRmonMemSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysRmonMemSize.setStatus("current")
_RcSysRmonEnable_Type = TruthValue
_RcSysRmonEnable_Object = MibScalar
rcSysRmonEnable = _RcSysRmonEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 23),
    _RcSysRmonEnable_Type()
)
rcSysRmonEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysRmonEnable.setStatus("current")
_RcSysRmonSaveConfig_Type = TruthValue
_RcSysRmonSaveConfig_Object = MibScalar
rcSysRmonSaveConfig = _RcSysRmonSaveConfig_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 24),
    _RcSysRmonSaveConfig_Type()
)
rcSysRmonSaveConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysRmonSaveConfig.setStatus("deprecated")


class _RcSysRmonTrapOption_Type(Integer32):
    """Custom type rcSysRmonTrapOption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("toAll", 2),
          ("toOwner", 1))
    )


_RcSysRmonTrapOption_Type.__name__ = "Integer32"
_RcSysRmonTrapOption_Object = MibScalar
rcSysRmonTrapOption = _RcSysRmonTrapOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 25),
    _RcSysRmonTrapOption_Type()
)
rcSysRmonTrapOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysRmonTrapOption.setStatus("current")
_RcSysSupportRouting_Type = TruthValue
_RcSysSupportRouting_Object = MibScalar
rcSysSupportRouting = _RcSysSupportRouting_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 26),
    _RcSysSupportRouting_Type()
)
rcSysSupportRouting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysSupportRouting.setStatus("current")
_RcSysSupportWebServer_Type = TruthValue
_RcSysSupportWebServer_Object = MibScalar
rcSysSupportWebServer = _RcSysSupportWebServer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 27),
    _RcSysSupportWebServer_Type()
)
rcSysSupportWebServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysSupportWebServer.setStatus("current")
_RcSysLastIpAddrChange_Type = TimeTicks
_RcSysLastIpAddrChange_Object = MibScalar
rcSysLastIpAddrChange = _RcSysLastIpAddrChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 28),
    _RcSysLastIpAddrChange_Type()
)
rcSysLastIpAddrChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastIpAddrChange.setStatus("current")


class _RcSysCommReadWriteLayer3_Type(DisplayString):
    """Custom type rcSysCommReadWriteLayer3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcSysCommReadWriteLayer3_Type.__name__ = "DisplayString"
_RcSysCommReadWriteLayer3_Object = MibScalar
rcSysCommReadWriteLayer3 = _RcSysCommReadWriteLayer3_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 29),
    _RcSysCommReadWriteLayer3_Type()
)
rcSysCommReadWriteLayer3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysCommReadWriteLayer3.setStatus("current")


class _RcSysCommReadWriteLayer2_Type(DisplayString):
    """Custom type rcSysCommReadWriteLayer2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcSysCommReadWriteLayer2_Type.__name__ = "DisplayString"
_RcSysCommReadWriteLayer2_Object = MibScalar
rcSysCommReadWriteLayer2 = _RcSysCommReadWriteLayer2_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 30),
    _RcSysCommReadWriteLayer2_Type()
)
rcSysCommReadWriteLayer2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysCommReadWriteLayer2.setStatus("current")


class _RcSysAccessPolicyEnable_Type(TruthValue):
    """Custom type rcSysAccessPolicyEnable based on TruthValue"""


_RcSysAccessPolicyEnable_Object = MibScalar
rcSysAccessPolicyEnable = _RcSysAccessPolicyEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 31),
    _RcSysAccessPolicyEnable_Type()
)
rcSysAccessPolicyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyEnable.setStatus("current")
_RcSysDefaultRuntimeConfigFileName_Type = DisplayString
_RcSysDefaultRuntimeConfigFileName_Object = MibScalar
rcSysDefaultRuntimeConfigFileName = _RcSysDefaultRuntimeConfigFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 32),
    _RcSysDefaultRuntimeConfigFileName_Type()
)
rcSysDefaultRuntimeConfigFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDefaultRuntimeConfigFileName.setStatus("current")
_RcSysDefaultBootConfigFileName_Type = DisplayString
_RcSysDefaultBootConfigFileName_Object = MibScalar
rcSysDefaultBootConfigFileName = _RcSysDefaultBootConfigFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 33),
    _RcSysDefaultBootConfigFileName_Type()
)
rcSysDefaultBootConfigFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDefaultBootConfigFileName.setStatus("current")


class _RcSysConfigFileName_Type(DisplayString):
    """Custom type rcSysConfigFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcSysConfigFileName_Type.__name__ = "DisplayString"
_RcSysConfigFileName_Object = MibScalar
rcSysConfigFileName = _RcSysConfigFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 34),
    _RcSysConfigFileName_Type()
)
rcSysConfigFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysConfigFileName.setStatus("current")
_RcSysLastRunTimeConfigSave_Type = TimeTicks
_RcSysLastRunTimeConfigSave_Object = MibScalar
rcSysLastRunTimeConfigSave = _RcSysLastRunTimeConfigSave_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 35),
    _RcSysLastRunTimeConfigSave_Type()
)
rcSysLastRunTimeConfigSave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastRunTimeConfigSave.setStatus("current")
_RcSysLastRunTimeConfigSaveToSlave_Type = TimeTicks
_RcSysLastRunTimeConfigSaveToSlave_Object = MibScalar
rcSysLastRunTimeConfigSaveToSlave = _RcSysLastRunTimeConfigSaveToSlave_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 36),
    _RcSysLastRunTimeConfigSaveToSlave_Type()
)
rcSysLastRunTimeConfigSaveToSlave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastRunTimeConfigSaveToSlave.setStatus("current")
_RcSysLastBootConfigSave_Type = TimeTicks
_RcSysLastBootConfigSave_Object = MibScalar
rcSysLastBootConfigSave = _RcSysLastBootConfigSave_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 37),
    _RcSysLastBootConfigSave_Type()
)
rcSysLastBootConfigSave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastBootConfigSave.setStatus("current")
_RcSysLastBootConfigSaveOnSlave_Type = TimeTicks
_RcSysLastBootConfigSaveOnSlave_Object = MibScalar
rcSysLastBootConfigSaveOnSlave = _RcSysLastBootConfigSaveOnSlave_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 38),
    _RcSysLastBootConfigSaveOnSlave_Type()
)
rcSysLastBootConfigSaveOnSlave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLastBootConfigSaveOnSlave.setStatus("current")


class _RcSysRmonUtilizationMethod_Type(Integer32):
    """Custom type rcSysRmonUtilizationMethod based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 2),
          ("halfDuplex", 1))
    )


_RcSysRmonUtilizationMethod_Type.__name__ = "Integer32"
_RcSysRmonUtilizationMethod_Object = MibScalar
rcSysRmonUtilizationMethod = _RcSysRmonUtilizationMethod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 39),
    _RcSysRmonUtilizationMethod_Type()
)
rcSysRmonUtilizationMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysRmonUtilizationMethod.setStatus("current")


class _RcSysCommReadWriteLayer1_Type(DisplayString):
    """Custom type rcSysCommReadWriteLayer1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcSysCommReadWriteLayer1_Type.__name__ = "DisplayString"
_RcSysCommReadWriteLayer1_Object = MibScalar
rcSysCommReadWriteLayer1 = _RcSysCommReadWriteLayer1_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 40),
    _RcSysCommReadWriteLayer1_Type()
)
rcSysCommReadWriteLayer1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysCommReadWriteLayer1.setStatus("current")
_RcSysOtherBufferUtil_Type = Gauge32
_RcSysOtherBufferUtil_Object = MibScalar
rcSysOtherBufferUtil = _RcSysOtherBufferUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 41),
    _RcSysOtherBufferUtil_Type()
)
rcSysOtherBufferUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysOtherBufferUtil.setStatus("current")
_RcSysOtherBufferUtilPeak_Type = Gauge32
_RcSysOtherBufferUtilPeak_Object = MibScalar
rcSysOtherBufferUtilPeak = _RcSysOtherBufferUtilPeak_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 42),
    _RcSysOtherBufferUtilPeak_Type()
)
rcSysOtherBufferUtilPeak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysOtherBufferUtilPeak.setStatus("current")
_RcSysOtherBufferUtilPeakTime_Type = TimeTicks
_RcSysOtherBufferUtilPeakTime_Object = MibScalar
rcSysOtherBufferUtilPeakTime = _RcSysOtherBufferUtilPeakTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 43),
    _RcSysOtherBufferUtilPeakTime_Type()
)
rcSysOtherBufferUtilPeakTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysOtherBufferUtilPeakTime.setStatus("current")
_RcSysOtherCpuUtil_Type = Gauge32
_RcSysOtherCpuUtil_Object = MibScalar
rcSysOtherCpuUtil = _RcSysOtherCpuUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 44),
    _RcSysOtherCpuUtil_Type()
)
rcSysOtherCpuUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysOtherCpuUtil.setStatus("current")
_RcSysOtherSwitchFabricUtil_Type = Gauge32
_RcSysOtherSwitchFabricUtil_Object = MibScalar
rcSysOtherSwitchFabricUtil = _RcSysOtherSwitchFabricUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 45),
    _RcSysOtherSwitchFabricUtil_Type()
)
rcSysOtherSwitchFabricUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysOtherSwitchFabricUtil.setStatus("current")
_RcSysDramSize_Type = Integer32
_RcSysDramSize_Object = MibScalar
rcSysDramSize = _RcSysDramSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 46),
    _RcSysDramSize_Type()
)
rcSysDramSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDramSize.setStatus("current")
_RcSysDramUsed_Type = Gauge32
_RcSysDramUsed_Object = MibScalar
rcSysDramUsed = _RcSysDramUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 47),
    _RcSysDramUsed_Type()
)
rcSysDramUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDramUsed.setStatus("current")
_RcSysDramFree_Type = Integer32
_RcSysDramFree_Object = MibScalar
rcSysDramFree = _RcSysDramFree_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 48),
    _RcSysDramFree_Type()
)
rcSysDramFree.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDramFree.setStatus("current")
_RcSysDramMaxBlockFree_Type = Integer32
_RcSysDramMaxBlockFree_Object = MibScalar
rcSysDramMaxBlockFree = _RcSysDramMaxBlockFree_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 49),
    _RcSysDramMaxBlockFree_Type()
)
rcSysDramMaxBlockFree.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDramMaxBlockFree.setStatus("current")
_RcSysVirtualIpAddr_Type = IpAddress
_RcSysVirtualIpAddr_Object = MibScalar
rcSysVirtualIpAddr = _RcSysVirtualIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 51),
    _RcSysVirtualIpAddr_Type()
)
rcSysVirtualIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysVirtualIpAddr.setStatus("current")
_RcSysVirtualNetMask_Type = IpAddress
_RcSysVirtualNetMask_Object = MibScalar
rcSysVirtualNetMask = _RcSysVirtualNetMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 52),
    _RcSysVirtualNetMask_Type()
)
rcSysVirtualNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysVirtualNetMask.setStatus("current")
_RcSysReadWriteLevel_Type = Integer32
_RcSysReadWriteLevel_Object = MibScalar
rcSysReadWriteLevel = _RcSysReadWriteLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 53),
    _RcSysReadWriteLevel_Type()
)
rcSysReadWriteLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysReadWriteLevel.setStatus("current")


class _RcSysMTUSize_Type(Integer32):
    """Custom type rcSysMTUSize based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mtu1522", 3),
          ("mtu1950", 1),
          ("mtu9600", 2))
    )


_RcSysMTUSize_Type.__name__ = "Integer32"
_RcSysMTUSize_Object = MibScalar
rcSysMTUSize = _RcSysMTUSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 55),
    _RcSysMTUSize_Type()
)
rcSysMTUSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysMTUSize.setStatus("current")


class _RcSysClockSyncTime_Type(Integer32):
    """Custom type rcSysClockSyncTime based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(15, 3600),
    )


_RcSysClockSyncTime_Type.__name__ = "Integer32"
_RcSysClockSyncTime_Object = MibScalar
rcSysClockSyncTime = _RcSysClockSyncTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 56),
    _RcSysClockSyncTime_Type()
)
rcSysClockSyncTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysClockSyncTime.setStatus("current")
_RcSysForceTrapSender_Type = TruthValue
_RcSysForceTrapSender_Object = MibScalar
rcSysForceTrapSender = _RcSysForceTrapSender_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 57),
    _RcSysForceTrapSender_Type()
)
rcSysForceTrapSender.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysForceTrapSender.setStatus("current")


class _RcSysMrouteStrLimit_Type(TruthValue):
    """Custom type rcSysMrouteStrLimit based on TruthValue"""


_RcSysMrouteStrLimit_Object = MibScalar
rcSysMrouteStrLimit = _RcSysMrouteStrLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 58),
    _RcSysMrouteStrLimit_Type()
)
rcSysMrouteStrLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysMrouteStrLimit.setStatus("current")
_RcSysTrapRecvTable_Object = MibTable
rcSysTrapRecvTable = _RcSysTrapRecvTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 60)
)
if mibBuilder.loadTexts:
    rcSysTrapRecvTable.setStatus("deprecated")
_RcSysTrapRecvEntry_Object = MibTableRow
rcSysTrapRecvEntry = _RcSysTrapRecvEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 60, 1)
)
rcSysTrapRecvEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSysTrapRecvAddress"),
)
if mibBuilder.loadTexts:
    rcSysTrapRecvEntry.setStatus("deprecated")
_RcSysTrapRecvAddress_Type = IpAddress
_RcSysTrapRecvAddress_Object = MibTableColumn
rcSysTrapRecvAddress = _RcSysTrapRecvAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 60, 1, 1),
    _RcSysTrapRecvAddress_Type()
)
rcSysTrapRecvAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysTrapRecvAddress.setStatus("deprecated")


class _RcSysTrapRecvVersion_Type(Integer32):
    """Custom type rcSysTrapRecvVersion based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v1", 1),
          ("v2c", 2))
    )


_RcSysTrapRecvVersion_Type.__name__ = "Integer32"
_RcSysTrapRecvVersion_Object = MibTableColumn
rcSysTrapRecvVersion = _RcSysTrapRecvVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 60, 1, 2),
    _RcSysTrapRecvVersion_Type()
)
rcSysTrapRecvVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysTrapRecvVersion.setStatus("deprecated")


class _RcSysTrapRecvCommunity_Type(DisplayString):
    """Custom type rcSysTrapRecvCommunity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcSysTrapRecvCommunity_Type.__name__ = "DisplayString"
_RcSysTrapRecvCommunity_Object = MibTableColumn
rcSysTrapRecvCommunity = _RcSysTrapRecvCommunity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 60, 1, 3),
    _RcSysTrapRecvCommunity_Type()
)
rcSysTrapRecvCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysTrapRecvCommunity.setStatus("deprecated")
_RcSysTrapRecvSrcAddress_Type = IpAddress
_RcSysTrapRecvSrcAddress_Object = MibTableColumn
rcSysTrapRecvSrcAddress = _RcSysTrapRecvSrcAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 60, 1, 4),
    _RcSysTrapRecvSrcAddress_Type()
)
rcSysTrapRecvSrcAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysTrapRecvSrcAddress.setStatus("deprecated")
_RcSysTrapRecvRowStatus_Type = RowStatus
_RcSysTrapRecvRowStatus_Object = MibTableColumn
rcSysTrapRecvRowStatus = _RcSysTrapRecvRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 60, 1, 5),
    _RcSysTrapRecvRowStatus_Type()
)
rcSysTrapRecvRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysTrapRecvRowStatus.setStatus("deprecated")
_RcSysAccessPolicyTable_Object = MibTable
rcSysAccessPolicyTable = _RcSysAccessPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61)
)
if mibBuilder.loadTexts:
    rcSysAccessPolicyTable.setStatus("current")
_RcSysAccessPolicyEntry_Object = MibTableRow
rcSysAccessPolicyEntry = _RcSysAccessPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1)
)
rcSysAccessPolicyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSysAccessPolicyId"),
)
if mibBuilder.loadTexts:
    rcSysAccessPolicyEntry.setStatus("current")


class _RcSysAccessPolicyId_Type(Integer32):
    """Custom type rcSysAccessPolicyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcSysAccessPolicyId_Type.__name__ = "Integer32"
_RcSysAccessPolicyId_Object = MibTableColumn
rcSysAccessPolicyId = _RcSysAccessPolicyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 1),
    _RcSysAccessPolicyId_Type()
)
rcSysAccessPolicyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysAccessPolicyId.setStatus("current")


class _RcSysAccessPolicyName_Type(DisplayString):
    """Custom type rcSysAccessPolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcSysAccessPolicyName_Type.__name__ = "DisplayString"
_RcSysAccessPolicyName_Object = MibTableColumn
rcSysAccessPolicyName = _RcSysAccessPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 2),
    _RcSysAccessPolicyName_Type()
)
rcSysAccessPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyName.setStatus("current")


class _RcSysAccessPolicyPolicyEnable_Type(TruthValue):
    """Custom type rcSysAccessPolicyPolicyEnable based on TruthValue"""


_RcSysAccessPolicyPolicyEnable_Object = MibTableColumn
rcSysAccessPolicyPolicyEnable = _RcSysAccessPolicyPolicyEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 3),
    _RcSysAccessPolicyPolicyEnable_Type()
)
rcSysAccessPolicyPolicyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyPolicyEnable.setStatus("current")


class _RcSysAccessPolicyMode_Type(Integer32):
    """Custom type rcSysAccessPolicyMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allow", 1),
          ("deny", 2))
    )


_RcSysAccessPolicyMode_Type.__name__ = "Integer32"
_RcSysAccessPolicyMode_Object = MibTableColumn
rcSysAccessPolicyMode = _RcSysAccessPolicyMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 4),
    _RcSysAccessPolicyMode_Type()
)
rcSysAccessPolicyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyMode.setStatus("current")


class _RcSysAccessPolicyService_Type(Integer32):
    """Custom type rcSysAccessPolicyService based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcSysAccessPolicyService_Type.__name__ = "Integer32"
_RcSysAccessPolicyService_Object = MibTableColumn
rcSysAccessPolicyService = _RcSysAccessPolicyService_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 5),
    _RcSysAccessPolicyService_Type()
)
rcSysAccessPolicyService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyService.setStatus("current")


class _RcSysAccessPolicyPrecedence_Type(Integer32):
    """Custom type rcSysAccessPolicyPrecedence based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_RcSysAccessPolicyPrecedence_Type.__name__ = "Integer32"
_RcSysAccessPolicyPrecedence_Object = MibTableColumn
rcSysAccessPolicyPrecedence = _RcSysAccessPolicyPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 6),
    _RcSysAccessPolicyPrecedence_Type()
)
rcSysAccessPolicyPrecedence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyPrecedence.setStatus("current")
_RcSysAccessPolicyNetAddr_Type = IpAddress
_RcSysAccessPolicyNetAddr_Object = MibTableColumn
rcSysAccessPolicyNetAddr = _RcSysAccessPolicyNetAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 7),
    _RcSysAccessPolicyNetAddr_Type()
)
rcSysAccessPolicyNetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyNetAddr.setStatus("deprecated")
_RcSysAccessPolicyNetMask_Type = IpAddress
_RcSysAccessPolicyNetMask_Object = MibTableColumn
rcSysAccessPolicyNetMask = _RcSysAccessPolicyNetMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 8),
    _RcSysAccessPolicyNetMask_Type()
)
rcSysAccessPolicyNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyNetMask.setStatus("deprecated")
_RcSysAccessPolicyTrustedHostAddr_Type = IpAddress
_RcSysAccessPolicyTrustedHostAddr_Object = MibTableColumn
rcSysAccessPolicyTrustedHostAddr = _RcSysAccessPolicyTrustedHostAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 9),
    _RcSysAccessPolicyTrustedHostAddr_Type()
)
rcSysAccessPolicyTrustedHostAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyTrustedHostAddr.setStatus("deprecated")


class _RcSysAccessPolicyTrustedHostUserName_Type(DisplayString):
    """Custom type rcSysAccessPolicyTrustedHostUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_RcSysAccessPolicyTrustedHostUserName_Type.__name__ = "DisplayString"
_RcSysAccessPolicyTrustedHostUserName_Object = MibTableColumn
rcSysAccessPolicyTrustedHostUserName = _RcSysAccessPolicyTrustedHostUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 10),
    _RcSysAccessPolicyTrustedHostUserName_Type()
)
rcSysAccessPolicyTrustedHostUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyTrustedHostUserName.setStatus("current")


class _RcSysAccessPolicyAccessLevel_Type(Integer32):
    """Custom type rcSysAccessPolicyAccessLevel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("readOnly", 1),
          ("readWrite", 2),
          ("readWriteAll", 3))
    )


_RcSysAccessPolicyAccessLevel_Type.__name__ = "Integer32"
_RcSysAccessPolicyAccessLevel_Object = MibTableColumn
rcSysAccessPolicyAccessLevel = _RcSysAccessPolicyAccessLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 11),
    _RcSysAccessPolicyAccessLevel_Type()
)
rcSysAccessPolicyAccessLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyAccessLevel.setStatus("current")


class _RcSysAccessPolicyLog_Type(TruthValue):
    """Custom type rcSysAccessPolicyLog based on TruthValue"""


_RcSysAccessPolicyLog_Object = MibTableColumn
rcSysAccessPolicyLog = _RcSysAccessPolicyLog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 12),
    _RcSysAccessPolicyLog_Type()
)
rcSysAccessPolicyLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyLog.setStatus("current")
_RcSysAccessPolicyUsage_Type = Counter32
_RcSysAccessPolicyUsage_Object = MibTableColumn
rcSysAccessPolicyUsage = _RcSysAccessPolicyUsage_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 13),
    _RcSysAccessPolicyUsage_Type()
)
rcSysAccessPolicyUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysAccessPolicyUsage.setStatus("current")
_RcSysAccessPolicyRowStatus_Type = RowStatus
_RcSysAccessPolicyRowStatus_Object = MibTableColumn
rcSysAccessPolicyRowStatus = _RcSysAccessPolicyRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 14),
    _RcSysAccessPolicyRowStatus_Type()
)
rcSysAccessPolicyRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyRowStatus.setStatus("current")


class _RcSysAccessPolicyAccessStrict_Type(TruthValue):
    """Custom type rcSysAccessPolicyAccessStrict based on TruthValue"""


_RcSysAccessPolicyAccessStrict_Object = MibTableColumn
rcSysAccessPolicyAccessStrict = _RcSysAccessPolicyAccessStrict_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 15),
    _RcSysAccessPolicyAccessStrict_Type()
)
rcSysAccessPolicyAccessStrict.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyAccessStrict.setStatus("current")


class _RcSysAccessPolicyNetInetAddrType_Type(Integer32):
    """Custom type rcSysAccessPolicyNetInetAddrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("ipv4", 1),
          ("ipv6", 2))
    )


_RcSysAccessPolicyNetInetAddrType_Type.__name__ = "Integer32"
_RcSysAccessPolicyNetInetAddrType_Object = MibTableColumn
rcSysAccessPolicyNetInetAddrType = _RcSysAccessPolicyNetInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 16),
    _RcSysAccessPolicyNetInetAddrType_Type()
)
rcSysAccessPolicyNetInetAddrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyNetInetAddrType.setStatus("current")
_RcSysAccessPolicyNetInetAddress_Type = InetAddress
_RcSysAccessPolicyNetInetAddress_Object = MibTableColumn
rcSysAccessPolicyNetInetAddress = _RcSysAccessPolicyNetInetAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 17),
    _RcSysAccessPolicyNetInetAddress_Type()
)
rcSysAccessPolicyNetInetAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyNetInetAddress.setStatus("current")
_RcSysAccessPolicyNetInetAddrPrefixLen_Type = InetAddressPrefixLength
_RcSysAccessPolicyNetInetAddrPrefixLen_Object = MibTableColumn
rcSysAccessPolicyNetInetAddrPrefixLen = _RcSysAccessPolicyNetInetAddrPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 18),
    _RcSysAccessPolicyNetInetAddrPrefixLen_Type()
)
rcSysAccessPolicyNetInetAddrPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyNetInetAddrPrefixLen.setStatus("current")
_RcSysAccessPolicyTrustedHostInetAddress_Type = InetAddress
_RcSysAccessPolicyTrustedHostInetAddress_Object = MibTableColumn
rcSysAccessPolicyTrustedHostInetAddress = _RcSysAccessPolicyTrustedHostInetAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 61, 1, 19),
    _RcSysAccessPolicyTrustedHostInetAddress_Type()
)
rcSysAccessPolicyTrustedHostInetAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccessPolicyTrustedHostInetAddress.setStatus("current")
_RcSysTrapSenderTable_Object = MibTable
rcSysTrapSenderTable = _RcSysTrapSenderTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 62)
)
if mibBuilder.loadTexts:
    rcSysTrapSenderTable.setStatus("current")
_RcSysTrapSenderEntry_Object = MibTableRow
rcSysTrapSenderEntry = _RcSysTrapSenderEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 62, 1)
)
rcSysTrapSenderEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSysTrapSenderRecvAddress"),
)
if mibBuilder.loadTexts:
    rcSysTrapSenderEntry.setStatus("current")
_RcSysTrapSenderRecvAddress_Type = IpAddress
_RcSysTrapSenderRecvAddress_Object = MibTableColumn
rcSysTrapSenderRecvAddress = _RcSysTrapSenderRecvAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 62, 1, 1),
    _RcSysTrapSenderRecvAddress_Type()
)
rcSysTrapSenderRecvAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysTrapSenderRecvAddress.setStatus("current")
_RcSysTrapSenderSrcAddress_Type = IpAddress
_RcSysTrapSenderSrcAddress_Object = MibTableColumn
rcSysTrapSenderSrcAddress = _RcSysTrapSenderSrcAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 62, 1, 2),
    _RcSysTrapSenderSrcAddress_Type()
)
rcSysTrapSenderSrcAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysTrapSenderSrcAddress.setStatus("current")
_RcSysDnsServerListTable_Object = MibTable
rcSysDnsServerListTable = _RcSysDnsServerListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64)
)
if mibBuilder.loadTexts:
    rcSysDnsServerListTable.setStatus("current")
_RcSysDnsServerListEntry_Object = MibTableRow
rcSysDnsServerListEntry = _RcSysDnsServerListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1)
)
rcSysDnsServerListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSysDnsServerListType"),
)
if mibBuilder.loadTexts:
    rcSysDnsServerListEntry.setStatus("current")


class _RcSysDnsServerListType_Type(Integer32):
    """Custom type rcSysDnsServerListType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1),
          ("tertiary", 2))
    )


_RcSysDnsServerListType_Type.__name__ = "Integer32"
_RcSysDnsServerListType_Object = MibTableColumn
rcSysDnsServerListType = _RcSysDnsServerListType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1, 1),
    _RcSysDnsServerListType_Type()
)
rcSysDnsServerListType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsServerListType.setStatus("current")
_RcSysDnsServerListIp_Type = IpAddress
_RcSysDnsServerListIp_Object = MibTableColumn
rcSysDnsServerListIp = _RcSysDnsServerListIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1, 2),
    _RcSysDnsServerListIp_Type()
)
rcSysDnsServerListIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysDnsServerListIp.setStatus("deprecated")


class _RcSysDnsServerListStatus_Type(Integer32):
    """Custom type rcSysDnsServerListStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("in-active", 1))
    )


_RcSysDnsServerListStatus_Type.__name__ = "Integer32"
_RcSysDnsServerListStatus_Object = MibTableColumn
rcSysDnsServerListStatus = _RcSysDnsServerListStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1, 3),
    _RcSysDnsServerListStatus_Type()
)
rcSysDnsServerListStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsServerListStatus.setStatus("current")
_RcSysDnsServerListRequestCount_Type = Counter32
_RcSysDnsServerListRequestCount_Object = MibTableColumn
rcSysDnsServerListRequestCount = _RcSysDnsServerListRequestCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1, 4),
    _RcSysDnsServerListRequestCount_Type()
)
rcSysDnsServerListRequestCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsServerListRequestCount.setStatus("current")
_RcSysDnsServerListSuccessCount_Type = Counter32
_RcSysDnsServerListSuccessCount_Object = MibTableColumn
rcSysDnsServerListSuccessCount = _RcSysDnsServerListSuccessCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1, 5),
    _RcSysDnsServerListSuccessCount_Type()
)
rcSysDnsServerListSuccessCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsServerListSuccessCount.setStatus("current")
_RcSysDnsServerListRowStatus_Type = RowStatus
_RcSysDnsServerListRowStatus_Object = MibTableColumn
rcSysDnsServerListRowStatus = _RcSysDnsServerListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1, 6),
    _RcSysDnsServerListRowStatus_Type()
)
rcSysDnsServerListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysDnsServerListRowStatus.setStatus("current")
_RcSysDnsServerListAddressType_Type = InetAddressType
_RcSysDnsServerListAddressType_Object = MibTableColumn
rcSysDnsServerListAddressType = _RcSysDnsServerListAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1, 7),
    _RcSysDnsServerListAddressType_Type()
)
rcSysDnsServerListAddressType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysDnsServerListAddressType.setStatus("current")
_RcSysDnsServerListAddress_Type = InetAddress
_RcSysDnsServerListAddress_Object = MibTableColumn
rcSysDnsServerListAddress = _RcSysDnsServerListAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 64, 1, 8),
    _RcSysDnsServerListAddress_Type()
)
rcSysDnsServerListAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysDnsServerListAddress.setStatus("current")
_RcSysDnsHostTable_Object = MibTable
rcSysDnsHostTable = _RcSysDnsHostTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 65)
)
if mibBuilder.loadTexts:
    rcSysDnsHostTable.setStatus("current")
_RcSysDnsHostEntry_Object = MibTableRow
rcSysDnsHostEntry = _RcSysDnsHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 65, 1)
)
rcSysDnsHostEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSysDnsHostData"),
)
if mibBuilder.loadTexts:
    rcSysDnsHostEntry.setStatus("current")


class _RcSysDnsHostData_Type(OctetString):
    """Custom type rcSysDnsHostData based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcSysDnsHostData_Type.__name__ = "OctetString"
_RcSysDnsHostData_Object = MibTableColumn
rcSysDnsHostData = _RcSysDnsHostData_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 65, 1, 1),
    _RcSysDnsHostData_Type()
)
rcSysDnsHostData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsHostData.setStatus("current")


class _RcSysDnsHostName_Type(OctetString):
    """Custom type rcSysDnsHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcSysDnsHostName_Type.__name__ = "OctetString"
_RcSysDnsHostName_Object = MibTableColumn
rcSysDnsHostName = _RcSysDnsHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 65, 1, 2),
    _RcSysDnsHostName_Type()
)
rcSysDnsHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsHostName.setStatus("current")
_RcSysDnsHostIpAddress_Type = IpAddress
_RcSysDnsHostIpAddress_Object = MibTableColumn
rcSysDnsHostIpAddress = _RcSysDnsHostIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 65, 1, 3),
    _RcSysDnsHostIpAddress_Type()
)
rcSysDnsHostIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsHostIpAddress.setStatus("current")


class _RcSysDnsHostSource_Type(OctetString):
    """Custom type rcSysDnsHostSource based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcSysDnsHostSource_Type.__name__ = "OctetString"
_RcSysDnsHostSource_Object = MibTableColumn
rcSysDnsHostSource = _RcSysDnsHostSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 65, 1, 4),
    _RcSysDnsHostSource_Type()
)
rcSysDnsHostSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsHostSource.setStatus("deprecated")
_RcSysDnsHostAddressType_Type = InetAddressType
_RcSysDnsHostAddressType_Object = MibTableColumn
rcSysDnsHostAddressType = _RcSysDnsHostAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 65, 1, 5),
    _RcSysDnsHostAddressType_Type()
)
rcSysDnsHostAddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsHostAddressType.setStatus("current")
_RcSysDnsHostAddress_Type = InetAddress
_RcSysDnsHostAddress_Object = MibTableColumn
rcSysDnsHostAddress = _RcSysDnsHostAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 65, 1, 6),
    _RcSysDnsHostAddress_Type()
)
rcSysDnsHostAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsHostAddress.setStatus("current")


class _RcSysMsgLogFrequency_Type(Integer32):
    """Custom type rcSysMsgLogFrequency based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 500),
    )


_RcSysMsgLogFrequency_Type.__name__ = "Integer32"
_RcSysMsgLogFrequency_Object = MibScalar
rcSysMsgLogFrequency = _RcSysMsgLogFrequency_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 66),
    _RcSysMsgLogFrequency_Type()
)
rcSysMsgLogFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysMsgLogFrequency.setStatus("current")


class _RcSysMsgLogText_Type(DisplayString):
    """Custom type rcSysMsgLogText based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 3),
    )


_RcSysMsgLogText_Type.__name__ = "DisplayString"
_RcSysMsgLogText_Object = MibScalar
rcSysMsgLogText = _RcSysMsgLogText_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 67),
    _RcSysMsgLogText_Type()
)
rcSysMsgLogText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysMsgLogText.setStatus("current")


class _RcSysForceIpHdrSender_Type(TruthValue):
    """Custom type rcSysForceIpHdrSender based on TruthValue"""


_RcSysForceIpHdrSender_Object = MibScalar
rcSysForceIpHdrSender = _RcSysForceIpHdrSender_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 68),
    _RcSysForceIpHdrSender_Type()
)
rcSysForceIpHdrSender.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysForceIpHdrSender.setStatus("current")


class _RcSysDnsDomainName_Type(DisplayString):
    """Custom type rcSysDnsDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcSysDnsDomainName_Type.__name__ = "DisplayString"
_RcSysDnsDomainName_Object = MibScalar
rcSysDnsDomainName = _RcSysDnsDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 70),
    _RcSysDnsDomainName_Type()
)
rcSysDnsDomainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysDnsDomainName.setStatus("current")
_RcSysDnsServerListIpAddr_Type = IpAddress
_RcSysDnsServerListIpAddr_Object = MibScalar
rcSysDnsServerListIpAddr = _RcSysDnsServerListIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 71),
    _RcSysDnsServerListIpAddr_Type()
)
rcSysDnsServerListIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsServerListIpAddr.setStatus("current")


class _RcSysDnsRequestType_Type(Integer32):
    """Custom type rcSysDnsRequestType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("request", 0),
          ("response", 1))
    )


_RcSysDnsRequestType_Type.__name__ = "Integer32"
_RcSysDnsRequestType_Object = MibScalar
rcSysDnsRequestType = _RcSysDnsRequestType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 72),
    _RcSysDnsRequestType_Type()
)
rcSysDnsRequestType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysDnsRequestType.setStatus("current")


class _RcSysSpanningTreeOperMode_Type(Integer32):
    """Custom type rcSysSpanningTreeOperMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mstp", 4),
          ("nortelStpg", 1),
          ("pvst", 2),
          ("rstp", 3))
    )


_RcSysSpanningTreeOperMode_Type.__name__ = "Integer32"
_RcSysSpanningTreeOperMode_Object = MibScalar
rcSysSpanningTreeOperMode = _RcSysSpanningTreeOperMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 73),
    _RcSysSpanningTreeOperMode_Type()
)
rcSysSpanningTreeOperMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysSpanningTreeOperMode.setStatus("current")


class _RcSysSpanningTreeAdminMode_Type(Integer32):
    """Custom type rcSysSpanningTreeAdminMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mstp", 4),
          ("nortelStpg", 1),
          ("pvst", 2),
          ("rstp", 3))
    )


_RcSysSpanningTreeAdminMode_Type.__name__ = "Integer32"
_RcSysSpanningTreeAdminMode_Object = MibScalar
rcSysSpanningTreeAdminMode = _RcSysSpanningTreeAdminMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 74),
    _RcSysSpanningTreeAdminMode_Type()
)
rcSysSpanningTreeAdminMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysSpanningTreeAdminMode.setStatus("current")


class _RcSysAutoRecoverDelay_Type(Integer32):
    """Custom type rcSysAutoRecoverDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 3600),
    )


_RcSysAutoRecoverDelay_Type.__name__ = "Integer32"
_RcSysAutoRecoverDelay_Object = MibScalar
rcSysAutoRecoverDelay = _RcSysAutoRecoverDelay_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 75),
    _RcSysAutoRecoverDelay_Type()
)
rcSysAutoRecoverDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAutoRecoverDelay.setStatus("current")


class _RcSysMacFlapLimitTime_Type(Integer32):
    """Custom type rcSysMacFlapLimitTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 5000),
    )


_RcSysMacFlapLimitTime_Type.__name__ = "Integer32"
_RcSysMacFlapLimitTime_Object = MibScalar
rcSysMacFlapLimitTime = _RcSysMacFlapLimitTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 76),
    _RcSysMacFlapLimitTime_Type()
)
rcSysMacFlapLimitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysMacFlapLimitTime.setStatus("current")
_RcSysMacFlapLimitCount_Type = Integer32
_RcSysMacFlapLimitCount_Object = MibScalar
rcSysMacFlapLimitCount = _RcSysMacFlapLimitCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 77),
    _RcSysMacFlapLimitCount_Type()
)
rcSysMacFlapLimitCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysMacFlapLimitCount.setStatus("current")


class _RcSysExtCplimitEnable_Type(TruthValue):
    """Custom type rcSysExtCplimitEnable based on TruthValue"""


_RcSysExtCplimitEnable_Object = MibScalar
rcSysExtCplimitEnable = _RcSysExtCplimitEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 78),
    _RcSysExtCplimitEnable_Type()
)
rcSysExtCplimitEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysExtCplimitEnable.setStatus("current")


class _RcSysExtCplimitMinCongTime_Type(Integer32):
    """Custom type rcSysExtCplimitMinCongTime based on Integer32"""
    defaultValue = 3000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 6000),
    )


_RcSysExtCplimitMinCongTime_Type.__name__ = "Integer32"
_RcSysExtCplimitMinCongTime_Object = MibScalar
rcSysExtCplimitMinCongTime = _RcSysExtCplimitMinCongTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 79),
    _RcSysExtCplimitMinCongTime_Type()
)
rcSysExtCplimitMinCongTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysExtCplimitMinCongTime.setStatus("current")


class _RcSysExtCplimitMaxPorts_Type(Integer32):
    """Custom type rcSysExtCplimitMaxPorts based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512),
    )


_RcSysExtCplimitMaxPorts_Type.__name__ = "Integer32"
_RcSysExtCplimitMaxPorts_Object = MibScalar
rcSysExtCplimitMaxPorts = _RcSysExtCplimitMaxPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 80),
    _RcSysExtCplimitMaxPorts_Type()
)
rcSysExtCplimitMaxPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysExtCplimitMaxPorts.setStatus("current")


class _RcSysExtCplimitPortCongTime_Type(Integer32):
    """Custom type rcSysExtCplimitPortCongTime based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 600),
    )


_RcSysExtCplimitPortCongTime_Type.__name__ = "Integer32"
_RcSysExtCplimitPortCongTime_Object = MibScalar
rcSysExtCplimitPortCongTime = _RcSysExtCplimitPortCongTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 81),
    _RcSysExtCplimitPortCongTime_Type()
)
rcSysExtCplimitPortCongTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysExtCplimitPortCongTime.setStatus("current")


class _RcSysExtCplimitTrapLevel_Type(Integer32):
    """Custom type rcSysExtCplimitTrapLevel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("normal", 2),
          ("verbose", 3))
    )


_RcSysExtCplimitTrapLevel_Type.__name__ = "Integer32"
_RcSysExtCplimitTrapLevel_Object = MibScalar
rcSysExtCplimitTrapLevel = _RcSysExtCplimitTrapLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 82),
    _RcSysExtCplimitTrapLevel_Type()
)
rcSysExtCplimitTrapLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysExtCplimitTrapLevel.setStatus("current")


class _RcSysExtCplimitSysOctapidCongested_Type(TruthValue):
    """Custom type rcSysExtCplimitSysOctapidCongested based on TruthValue"""


_RcSysExtCplimitSysOctapidCongested_Object = MibScalar
rcSysExtCplimitSysOctapidCongested = _RcSysExtCplimitSysOctapidCongested_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 83),
    _RcSysExtCplimitSysOctapidCongested_Type()
)
rcSysExtCplimitSysOctapidCongested.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysExtCplimitSysOctapidCongested.setStatus("current")


class _RcSysExtCplimitPortsMonitored_Type(TruthValue):
    """Custom type rcSysExtCplimitPortsMonitored based on TruthValue"""


_RcSysExtCplimitPortsMonitored_Object = MibScalar
rcSysExtCplimitPortsMonitored = _RcSysExtCplimitPortsMonitored_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 84),
    _RcSysExtCplimitPortsMonitored_Type()
)
rcSysExtCplimitPortsMonitored.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysExtCplimitPortsMonitored.setStatus("current")


class _RcSysExtCplimitPortsShutDown_Type(TruthValue):
    """Custom type rcSysExtCplimitPortsShutDown based on TruthValue"""


_RcSysExtCplimitPortsShutDown_Object = MibScalar
rcSysExtCplimitPortsShutDown = _RcSysExtCplimitPortsShutDown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 85),
    _RcSysExtCplimitPortsShutDown_Type()
)
rcSysExtCplimitPortsShutDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysExtCplimitPortsShutDown.setStatus("current")


class _RcSysActionL1_Type(Integer32):
    """Custom type rcSysActionL1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("checkSwInFlash", 5),
          ("checkSwInPcmcia", 6),
          ("loadLicense", 11),
          ("none", 1),
          ("resetCounters", 2),
          ("saveBootConfig", 9),
          ("saveRuntimeConfig", 7),
          ("saveRuntimeConfigToSlave", 8),
          ("saveSlaveBootConfig", 10),
          ("saveToNVRAM", 3),
          ("saveToStandbyNVRAM", 4))
    )


_RcSysActionL1_Type.__name__ = "Integer32"
_RcSysActionL1_Object = MibScalar
rcSysActionL1 = _RcSysActionL1_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 86),
    _RcSysActionL1_Type()
)
rcSysActionL1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysActionL1.setStatus("current")


class _RcSysActionL2_Type(Integer32):
    """Custom type rcSysActionL2 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("resetIstStatCounters", 2))
    )


_RcSysActionL2_Type.__name__ = "Integer32"
_RcSysActionL2_Object = MibScalar
rcSysActionL2 = _RcSysActionL2_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 87),
    _RcSysActionL2_Type()
)
rcSysActionL2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysActionL2.setStatus("current")


class _RcSysActionL3_Type(Integer32):
    """Custom type rcSysActionL3 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("flushIpRouteTbl", 2),
          ("none", 1))
    )


_RcSysActionL3_Type.__name__ = "Integer32"
_RcSysActionL3_Object = MibScalar
rcSysActionL3 = _RcSysActionL3_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 88),
    _RcSysActionL3_Type()
)
rcSysActionL3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysActionL3.setStatus("current")


class _RcSysActionRwa_Type(Integer32):
    """Custom type rcSysActionRwa based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("cpuSwitchOver", 4),
          ("hardReset", 2),
          ("none", 1),
          ("resetConsole", 5),
          ("resetModem", 6),
          ("softReset", 3))
    )


_RcSysActionRwa_Type.__name__ = "Integer32"
_RcSysActionRwa_Object = MibScalar
rcSysActionRwa = _RcSysActionRwa_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 89),
    _RcSysActionRwa_Type()
)
rcSysActionRwa.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysActionRwa.setStatus("current")
_RcSysPowerUsage_Type = Integer32
_RcSysPowerUsage_Object = MibScalar
rcSysPowerUsage = _RcSysPowerUsage_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 90),
    _RcSysPowerUsage_Type()
)
rcSysPowerUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysPowerUsage.setStatus("current")
_RcSysPowerAvailable_Type = Integer32
_RcSysPowerAvailable_Object = MibScalar
rcSysPowerAvailable = _RcSysPowerAvailable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 91),
    _RcSysPowerAvailable_Type()
)
rcSysPowerAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysPowerAvailable.setStatus("current")
_RcSysFrcMsgControlTable_Object = MibTable
rcSysFrcMsgControlTable = _RcSysFrcMsgControlTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 94)
)
if mibBuilder.loadTexts:
    rcSysFrcMsgControlTable.setStatus("current")
_RcSysFrcMsgControlEntry_Object = MibTableRow
rcSysFrcMsgControlEntry = _RcSysFrcMsgControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 94, 1)
)
rcSysFrcMsgControlEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSysFrcMsgControlPatternId"),
)
if mibBuilder.loadTexts:
    rcSysFrcMsgControlEntry.setStatus("current")


class _RcSysFrcMsgControlPatternId_Type(Integer32):
    """Custom type rcSysFrcMsgControlPatternId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_RcSysFrcMsgControlPatternId_Type.__name__ = "Integer32"
_RcSysFrcMsgControlPatternId_Object = MibTableColumn
rcSysFrcMsgControlPatternId = _RcSysFrcMsgControlPatternId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 94, 1, 1),
    _RcSysFrcMsgControlPatternId_Type()
)
rcSysFrcMsgControlPatternId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcSysFrcMsgControlPatternId.setStatus("current")


class _RcSysFrcMsgControlPattern_Type(DisplayString):
    """Custom type rcSysFrcMsgControlPattern based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcSysFrcMsgControlPattern_Type.__name__ = "DisplayString"
_RcSysFrcMsgControlPattern_Object = MibTableColumn
rcSysFrcMsgControlPattern = _RcSysFrcMsgControlPattern_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 94, 1, 2),
    _RcSysFrcMsgControlPattern_Type()
)
rcSysFrcMsgControlPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysFrcMsgControlPattern.setStatus("current")
_RcSysFrcMsgControlRowStatus_Type = RowStatus
_RcSysFrcMsgControlRowStatus_Object = MibTableColumn
rcSysFrcMsgControlRowStatus = _RcSysFrcMsgControlRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 94, 1, 3),
    _RcSysFrcMsgControlRowStatus_Type()
)
rcSysFrcMsgControlRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysFrcMsgControlRowStatus.setStatus("current")
_RcSysAccPolSnmpGrpTable_Object = MibTable
rcSysAccPolSnmpGrpTable = _RcSysAccPolSnmpGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 95)
)
if mibBuilder.loadTexts:
    rcSysAccPolSnmpGrpTable.setStatus("current")
_RcSysAccPolSnmpGrpEntry_Object = MibTableRow
rcSysAccPolSnmpGrpEntry = _RcSysAccPolSnmpGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 95, 1)
)
rcSysAccPolSnmpGrpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSysAccessPolicyId"),
    (0, "RAPID-CITY", "rcSysAccPolSnmpGrpName"),
    (0, "RAPID-CITY", "rcSysAccPolSnmpGrpModel"),
)
if mibBuilder.loadTexts:
    rcSysAccPolSnmpGrpEntry.setStatus("current")


class _RcSysAccPolSnmpGrpName_Type(SnmpAdminString):
    """Custom type rcSysAccPolSnmpGrpName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_RcSysAccPolSnmpGrpName_Type.__name__ = "SnmpAdminString"
_RcSysAccPolSnmpGrpName_Object = MibTableColumn
rcSysAccPolSnmpGrpName = _RcSysAccPolSnmpGrpName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 95, 1, 1),
    _RcSysAccPolSnmpGrpName_Type()
)
rcSysAccPolSnmpGrpName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcSysAccPolSnmpGrpName.setStatus("current")
_RcSysAccPolSnmpGrpModel_Type = SnmpSecurityModel
_RcSysAccPolSnmpGrpModel_Object = MibTableColumn
rcSysAccPolSnmpGrpModel = _RcSysAccPolSnmpGrpModel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 95, 1, 2),
    _RcSysAccPolSnmpGrpModel_Type()
)
rcSysAccPolSnmpGrpModel.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcSysAccPolSnmpGrpModel.setStatus("current")
_RcSysAccPolSnmpGrpRowStatus_Type = RowStatus
_RcSysAccPolSnmpGrpRowStatus_Object = MibTableColumn
rcSysAccPolSnmpGrpRowStatus = _RcSysAccPolSnmpGrpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 95, 1, 3),
    _RcSysAccPolSnmpGrpRowStatus_Type()
)
rcSysAccPolSnmpGrpRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysAccPolSnmpGrpRowStatus.setStatus("current")
_RcSysVirtualIpv6Addr_Type = Ipv6Address
_RcSysVirtualIpv6Addr_Object = MibScalar
rcSysVirtualIpv6Addr = _RcSysVirtualIpv6Addr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 96),
    _RcSysVirtualIpv6Addr_Type()
)
rcSysVirtualIpv6Addr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysVirtualIpv6Addr.setStatus("current")


class _RcSysVirtualIpv6PrefixLength_Type(Integer32):
    """Custom type rcSysVirtualIpv6PrefixLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcSysVirtualIpv6PrefixLength_Type.__name__ = "Integer32"
_RcSysVirtualIpv6PrefixLength_Object = MibScalar
rcSysVirtualIpv6PrefixLength = _RcSysVirtualIpv6PrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 97),
    _RcSysVirtualIpv6PrefixLength_Type()
)
rcSysVirtualIpv6PrefixLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysVirtualIpv6PrefixLength.setStatus("current")


class _RcSysConfigMode_Type(Integer32):
    """Custom type rcSysConfigMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("cli", 2),
          ("nncli", 1))
    )


_RcSysConfigMode_Type.__name__ = "Integer32"
_RcSysConfigMode_Object = MibScalar
rcSysConfigMode = _RcSysConfigMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 98),
    _RcSysConfigMode_Type()
)
rcSysConfigMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSysConfigMode.setStatus("current")


class _RcSysLicenseTrialDaysLeft_Type(Unsigned32):
    """Custom type rcSysLicenseTrialDaysLeft based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_RcSysLicenseTrialDaysLeft_Type.__name__ = "Unsigned32"
_RcSysLicenseTrialDaysLeft_Object = MibScalar
rcSysLicenseTrialDaysLeft = _RcSysLicenseTrialDaysLeft_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 1, 100),
    _RcSysLicenseTrialDaysLeft_Type()
)
rcSysLicenseTrialDaysLeft.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSysLicenseTrialDaysLeft.setStatus("current")
_RcTftp_ObjectIdentity = ObjectIdentity
rcTftp = _RcTftp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 2)
)
_RcTftpHost_Type = IpAddress
_RcTftpHost_Object = MibScalar
rcTftpHost = _RcTftpHost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 2, 1),
    _RcTftpHost_Type()
)
rcTftpHost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTftpHost.setStatus("current")


class _RcTftpFile_Type(DisplayString):
    """Custom type rcTftpFile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcTftpFile_Type.__name__ = "DisplayString"
_RcTftpFile_Object = MibScalar
rcTftpFile = _RcTftpFile_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 2, 2),
    _RcTftpFile_Type()
)
rcTftpFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTftpFile.setStatus("current")


class _RcTftpAction_Type(Integer32):
    """Custom type rcTftpAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("downloadConfig", 2),
          ("downloadSwToDram", 7),
          ("downloadSwToFlash", 4),
          ("downloadSwToPcmcia", 5),
          ("none", 1),
          ("uploadConfig", 3),
          ("uploadSw", 6))
    )


_RcTftpAction_Type.__name__ = "Integer32"
_RcTftpAction_Object = MibScalar
rcTftpAction = _RcTftpAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 2, 3),
    _RcTftpAction_Type()
)
rcTftpAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTftpAction.setStatus("current")


class _RcTftpResult_Type(Integer32):
    """Custom type rcTftpResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22)
        )
    )
    namedValues = NamedValues(
        *(("badFlash", 5),
          ("configFileTooBig", 13),
          ("crcError", 20),
          ("fail", 9),
          ("fileAccessError", 4),
          ("flashEraseFailed", 6),
          ("flashWriteFailed", 11),
          ("imageFileTooBig", 14),
          ("inProgress", 2),
          ("invalidFile", 17),
          ("noMemory", 18),
          ("noPcmciaDetect", 15),
          ("noResponse", 3),
          ("none", 1),
          ("pcmciaEraseFailed", 7),
          ("pcmciaNotSupported", 16),
          ("pcmciaWriteFailed", 12),
          ("pcmciaWriteProtect", 22),
          ("readNvramFailed", 21),
          ("success", 8),
          ("writeToNvramFailed", 10),
          ("xferError", 19))
    )


_RcTftpResult_Type.__name__ = "Integer32"
_RcTftpResult_Object = MibScalar
rcTftpResult = _RcTftpResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 2, 4),
    _RcTftpResult_Type()
)
rcTftpResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTftpResult.setStatus("current")
_RcVlan_ObjectIdentity = ObjectIdentity
rcVlan = _RcVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3)
)


class _RcVlanNumVlans_Type(Integer32):
    """Custom type rcVlanNumVlans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_RcVlanNumVlans_Type.__name__ = "Integer32"
_RcVlanNumVlans_Object = MibScalar
rcVlanNumVlans = _RcVlanNumVlans_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 1),
    _RcVlanNumVlans_Type()
)
rcVlanNumVlans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanNumVlans.setStatus("current")
_RcVlanTable_Object = MibTable
rcVlanTable = _RcVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2)
)
if mibBuilder.loadTexts:
    rcVlanTable.setStatus("current")
_RcVlanEntry_Object = MibTableRow
rcVlanEntry = _RcVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1)
)
rcVlanEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanId"),
)
if mibBuilder.loadTexts:
    rcVlanEntry.setStatus("current")


class _RcVlanId_Type(Integer32):
    """Custom type rcVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcVlanId_Type.__name__ = "Integer32"
_RcVlanId_Object = MibTableColumn
rcVlanId = _RcVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 1),
    _RcVlanId_Type()
)
rcVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanId.setStatus("current")


class _RcVlanName_Type(DisplayString):
    """Custom type rcVlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcVlanName_Type.__name__ = "DisplayString"
_RcVlanName_Object = MibTableColumn
rcVlanName = _RcVlanName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 2),
    _RcVlanName_Type()
)
rcVlanName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanName.setStatus("current")


class _RcVlanColor_Type(Integer32):
    """Custom type rcVlanColor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RcVlanColor_Type.__name__ = "Integer32"
_RcVlanColor_Object = MibTableColumn
rcVlanColor = _RcVlanColor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 3),
    _RcVlanColor_Type()
)
rcVlanColor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanColor.setStatus("current")


class _RcVlanHighPriority_Type(TruthValue):
    """Custom type rcVlanHighPriority based on TruthValue"""


_RcVlanHighPriority_Object = MibTableColumn
rcVlanHighPriority = _RcVlanHighPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 4),
    _RcVlanHighPriority_Type()
)
rcVlanHighPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanHighPriority.setStatus("deprecated")


class _RcVlanRoutingEnable_Type(TruthValue):
    """Custom type rcVlanRoutingEnable based on TruthValue"""


_RcVlanRoutingEnable_Object = MibTableColumn
rcVlanRoutingEnable = _RcVlanRoutingEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 5),
    _RcVlanRoutingEnable_Type()
)
rcVlanRoutingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanRoutingEnable.setStatus("deprecated")
_RcVlanIfIndex_Type = InterfaceIndex
_RcVlanIfIndex_Object = MibTableColumn
rcVlanIfIndex = _RcVlanIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 6),
    _RcVlanIfIndex_Type()
)
rcVlanIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIfIndex.setStatus("current")


class _RcVlanAction_Type(Integer32):
    """Custom type rcVlanAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("all", 6),
          ("flushArp", 3),
          ("flushDynMemb", 5),
          ("flushIp", 4),
          ("flushMacFdb", 2),
          ("flushSnoopMRtr", 9),
          ("flushSnoopMemb", 7),
          ("none", 1),
          ("triggerRipUpdate", 8))
    )


_RcVlanAction_Type.__name__ = "Integer32"
_RcVlanAction_Object = MibTableColumn
rcVlanAction = _RcVlanAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 7),
    _RcVlanAction_Type()
)
rcVlanAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanAction.setStatus("current")


class _RcVlanResult_Type(Integer32):
    """Custom type rcVlanResult based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fail", 4),
          ("inProgress", 2),
          ("none", 1),
          ("success", 3))
    )


_RcVlanResult_Type.__name__ = "Integer32"
_RcVlanResult_Object = MibTableColumn
rcVlanResult = _RcVlanResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 8),
    _RcVlanResult_Type()
)
rcVlanResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanResult.setStatus("current")


class _RcVlanStgId_Type(Integer32):
    """Custom type rcVlanStgId based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcVlanStgId_Type.__name__ = "Integer32"
_RcVlanStgId_Object = MibTableColumn
rcVlanStgId = _RcVlanStgId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 9),
    _RcVlanStgId_Type()
)
rcVlanStgId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanStgId.setStatus("current")


class _RcVlanType_Type(Integer32):
    """Custom type rcVlanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              11)
        )
    )
    namedValues = NamedValues(
        *(("byDstMcast", 5),
          ("byIds", 7),
          ("byIpSubnet", 2),
          ("byPort", 1),
          ("byProtocolId", 3),
          ("bySrcMac", 4),
          ("bySvlan", 6),
          ("spbm-bvlan", 11))
    )


_RcVlanType_Type.__name__ = "Integer32"
_RcVlanType_Object = MibTableColumn
rcVlanType = _RcVlanType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 10),
    _RcVlanType_Type()
)
rcVlanType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanType.setStatus("current")
_RcVlanPortMembers_Type = PortSet
_RcVlanPortMembers_Object = MibTableColumn
rcVlanPortMembers = _RcVlanPortMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 11),
    _RcVlanPortMembers_Type()
)
rcVlanPortMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortMembers.setStatus("current")
_RcVlanActiveMembers_Type = PortSet
_RcVlanActiveMembers_Object = MibTableColumn
rcVlanActiveMembers = _RcVlanActiveMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 12),
    _RcVlanActiveMembers_Type()
)
rcVlanActiveMembers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanActiveMembers.setStatus("current")
_RcVlanStaticMembers_Type = PortSet
_RcVlanStaticMembers_Object = MibTableColumn
rcVlanStaticMembers = _RcVlanStaticMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 13),
    _RcVlanStaticMembers_Type()
)
rcVlanStaticMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanStaticMembers.setStatus("current")
_RcVlanNotAllowToJoin_Type = PortSet
_RcVlanNotAllowToJoin_Object = MibTableColumn
rcVlanNotAllowToJoin = _RcVlanNotAllowToJoin_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 14),
    _RcVlanNotAllowToJoin_Type()
)
rcVlanNotAllowToJoin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanNotAllowToJoin.setStatus("current")


class _RcVlanProtocolId_Type(Integer32):
    """Custom type rcVlanProtocolId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("appleTalk", 6),
          ("decLat", 7),
          ("decOther", 8),
          ("ip", 1),
          ("ipV6", 14),
          ("ipx802dot2", 3),
          ("ipx802dot3", 2),
          ("ipxEthernet2", 5),
          ("ipxSnap", 4),
          ("netBios", 11),
          ("none", 0),
          ("pPPoE", 17),
          ("rarp", 16),
          ("sna802dot2", 9),
          ("snaEthernet2", 10),
          ("usrDefined", 15),
          ("vines", 13),
          ("xns", 12))
    )


_RcVlanProtocolId_Type.__name__ = "Integer32"
_RcVlanProtocolId_Object = MibTableColumn
rcVlanProtocolId = _RcVlanProtocolId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 15),
    _RcVlanProtocolId_Type()
)
rcVlanProtocolId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanProtocolId.setStatus("current")
_RcVlanSubnetAddr_Type = IpAddress
_RcVlanSubnetAddr_Object = MibTableColumn
rcVlanSubnetAddr = _RcVlanSubnetAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 16),
    _RcVlanSubnetAddr_Type()
)
rcVlanSubnetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanSubnetAddr.setStatus("current")
_RcVlanSubnetMask_Type = IpAddress
_RcVlanSubnetMask_Object = MibTableColumn
rcVlanSubnetMask = _RcVlanSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 17),
    _RcVlanSubnetMask_Type()
)
rcVlanSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanSubnetMask.setStatus("current")


class _RcVlanAgingTime_Type(Integer32):
    """Custom type rcVlanAgingTime based on Integer32"""
    defaultValue = 600

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(10, 1000000),
    )


_RcVlanAgingTime_Type.__name__ = "Integer32"
_RcVlanAgingTime_Object = MibTableColumn
rcVlanAgingTime = _RcVlanAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 18),
    _RcVlanAgingTime_Type()
)
rcVlanAgingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanAgingTime.setStatus("current")
_RcVlanMacAddress_Type = MacAddress
_RcVlanMacAddress_Object = MibTableColumn
rcVlanMacAddress = _RcVlanMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 19),
    _RcVlanMacAddress_Type()
)
rcVlanMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanMacAddress.setStatus("current")
_RcVlanRowStatus_Type = RowStatus
_RcVlanRowStatus_Object = MibTableColumn
rcVlanRowStatus = _RcVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 20),
    _RcVlanRowStatus_Type()
)
rcVlanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanRowStatus.setStatus("current")


class _RcVlanIgmpSnoopEnable_Type(TruthValue):
    """Custom type rcVlanIgmpSnoopEnable based on TruthValue"""


_RcVlanIgmpSnoopEnable_Object = MibTableColumn
rcVlanIgmpSnoopEnable = _RcVlanIgmpSnoopEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 21),
    _RcVlanIgmpSnoopEnable_Type()
)
rcVlanIgmpSnoopEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopEnable.setStatus("deprecated")


class _RcVlanIgmpSnoopReportProxyEnable_Type(TruthValue):
    """Custom type rcVlanIgmpSnoopReportProxyEnable based on TruthValue"""


_RcVlanIgmpSnoopReportProxyEnable_Object = MibTableColumn
rcVlanIgmpSnoopReportProxyEnable = _RcVlanIgmpSnoopReportProxyEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 22),
    _RcVlanIgmpSnoopReportProxyEnable_Type()
)
rcVlanIgmpSnoopReportProxyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopReportProxyEnable.setStatus("deprecated")


class _RcVlanIgmpSnoopRobustness_Type(Integer32):
    """Custom type rcVlanIgmpSnoopRobustness based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcVlanIgmpSnoopRobustness_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopRobustness_Object = MibTableColumn
rcVlanIgmpSnoopRobustness = _RcVlanIgmpSnoopRobustness_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 23),
    _RcVlanIgmpSnoopRobustness_Type()
)
rcVlanIgmpSnoopRobustness.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopRobustness.setStatus("deprecated")


class _RcVlanIgmpSnoopQueryInterval_Type(Integer32):
    """Custom type rcVlanIgmpSnoopQueryInterval based on Integer32"""
    defaultValue = 125

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcVlanIgmpSnoopQueryInterval_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopQueryInterval_Object = MibTableColumn
rcVlanIgmpSnoopQueryInterval = _RcVlanIgmpSnoopQueryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 24),
    _RcVlanIgmpSnoopQueryInterval_Type()
)
rcVlanIgmpSnoopQueryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopQueryInterval.setStatus("deprecated")
_RcVlanIgmpSnoopMRouterPorts_Type = PortSet
_RcVlanIgmpSnoopMRouterPorts_Object = MibTableColumn
rcVlanIgmpSnoopMRouterPorts = _RcVlanIgmpSnoopMRouterPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 25),
    _RcVlanIgmpSnoopMRouterPorts_Type()
)
rcVlanIgmpSnoopMRouterPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopMRouterPorts.setStatus("deprecated")
_RcVlanUserDefinedPid_Type = Integer32
_RcVlanUserDefinedPid_Object = MibTableColumn
rcVlanUserDefinedPid = _RcVlanUserDefinedPid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 26),
    _RcVlanUserDefinedPid_Type()
)
rcVlanUserDefinedPid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanUserDefinedPid.setStatus("current")
_RcVlanIgmpSnoopActiveMRouterPorts_Type = PortSet
_RcVlanIgmpSnoopActiveMRouterPorts_Object = MibTableColumn
rcVlanIgmpSnoopActiveMRouterPorts = _RcVlanIgmpSnoopActiveMRouterPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 27),
    _RcVlanIgmpSnoopActiveMRouterPorts_Type()
)
rcVlanIgmpSnoopActiveMRouterPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopActiveMRouterPorts.setStatus("deprecated")
_RcVlanProtocolIds_Type = Integer32
_RcVlanProtocolIds_Object = MibTableColumn
rcVlanProtocolIds = _RcVlanProtocolIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 28),
    _RcVlanProtocolIds_Type()
)
rcVlanProtocolIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanProtocolIds.setStatus("current")
_RcVlanIgmpSnoopActiveQuerier_Type = IpAddress
_RcVlanIgmpSnoopActiveQuerier_Object = MibTableColumn
rcVlanIgmpSnoopActiveQuerier = _RcVlanIgmpSnoopActiveQuerier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 29),
    _RcVlanIgmpSnoopActiveQuerier_Type()
)
rcVlanIgmpSnoopActiveQuerier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopActiveQuerier.setStatus("deprecated")
_RcVlanIgmpSnoopMRouterExpiration_Type = Integer32
_RcVlanIgmpSnoopMRouterExpiration_Object = MibTableColumn
rcVlanIgmpSnoopMRouterExpiration = _RcVlanIgmpSnoopMRouterExpiration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 30),
    _RcVlanIgmpSnoopMRouterExpiration_Type()
)
rcVlanIgmpSnoopMRouterExpiration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopMRouterExpiration.setStatus("deprecated")
_RcVlanIgmpSnoopQuerierPort_Type = InterfaceIndex
_RcVlanIgmpSnoopQuerierPort_Object = MibTableColumn
rcVlanIgmpSnoopQuerierPort = _RcVlanIgmpSnoopQuerierPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 31),
    _RcVlanIgmpSnoopQuerierPort_Type()
)
rcVlanIgmpSnoopQuerierPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopQuerierPort.setStatus("deprecated")


class _RcVlanUserPriority_Type(Integer32):
    """Custom type rcVlanUserPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("level0", 0),
          ("level1", 1),
          ("level2", 2),
          ("level3", 3),
          ("level4", 4),
          ("level5", 5),
          ("level6", 6),
          ("level7", 7))
    )


_RcVlanUserPriority_Type.__name__ = "Integer32"
_RcVlanUserPriority_Object = MibTableColumn
rcVlanUserPriority = _RcVlanUserPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 32),
    _RcVlanUserPriority_Type()
)
rcVlanUserPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanUserPriority.setStatus("current")


class _RcVlanQosLevel_Type(Integer32):
    """Custom type rcVlanQosLevel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("level0", 0),
          ("level1", 1),
          ("level2", 2),
          ("level3", 3),
          ("level4", 4),
          ("level5", 5),
          ("level6", 6),
          ("level7", 7))
    )


_RcVlanQosLevel_Type.__name__ = "Integer32"
_RcVlanQosLevel_Object = MibTableColumn
rcVlanQosLevel = _RcVlanQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 33),
    _RcVlanQosLevel_Type()
)
rcVlanQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanQosLevel.setStatus("current")


class _RcVlanTosValue_Type(Integer32):
    """Custom type rcVlanTosValue based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_RcVlanTosValue_Type.__name__ = "Integer32"
_RcVlanTosValue_Object = MibTableColumn
rcVlanTosValue = _RcVlanTosValue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 34),
    _RcVlanTosValue_Type()
)
rcVlanTosValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanTosValue.setStatus("current")


class _RcVlanEncap_Type(Integer32):
    """Custom type rcVlanEncap based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("all", 4),
          ("ethernet2", 1),
          ("llc", 2),
          ("notapplicable", 5),
          ("snap", 3))
    )


_RcVlanEncap_Type.__name__ = "Integer32"
_RcVlanEncap_Object = MibTableColumn
rcVlanEncap = _RcVlanEncap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 35),
    _RcVlanEncap_Type()
)
rcVlanEncap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanEncap.setStatus("current")


class _RcVlanFirewallVlanType_Type(Integer32):
    """Custom type rcVlanFirewallVlanType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enforceable", 3),
          ("naap", 2),
          ("none", 1),
          ("peering", 4))
    )


_RcVlanFirewallVlanType_Type.__name__ = "Integer32"
_RcVlanFirewallVlanType_Object = MibTableColumn
rcVlanFirewallVlanType = _RcVlanFirewallVlanType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 36),
    _RcVlanFirewallVlanType_Type()
)
rcVlanFirewallVlanType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanFirewallVlanType.setStatus("current")


class _RcVlanFdbAging_Type(Integer32):
    """Custom type rcVlanFdbAging based on Integer32"""
    defaultValue = 600

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(10, 1000000),
    )


_RcVlanFdbAging_Type.__name__ = "Integer32"
_RcVlanFdbAging_Object = MibTableColumn
rcVlanFdbAging = _RcVlanFdbAging_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 37),
    _RcVlanFdbAging_Type()
)
rcVlanFdbAging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanFdbAging.setStatus("current")


class _RcVlanFirewallClusterId_Type(Integer32):
    """Custom type rcVlanFirewallClusterId based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RcVlanFirewallClusterId_Type.__name__ = "Integer32"
_RcVlanFirewallClusterId_Object = MibTableColumn
rcVlanFirewallClusterId = _RcVlanFirewallClusterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 43),
    _RcVlanFirewallClusterId_Type()
)
rcVlanFirewallClusterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanFirewallClusterId.setStatus("current")
_RcVlanOspfPassivePortMember_Type = PortSet
_RcVlanOspfPassivePortMember_Object = MibTableColumn
rcVlanOspfPassivePortMember = _RcVlanOspfPassivePortMember_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 44),
    _RcVlanOspfPassivePortMember_Type()
)
rcVlanOspfPassivePortMember.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanOspfPassivePortMember.setStatus("current")


class _RcVlanUnkDstMacDiscard_Type(EnableValue):
    """Custom type rcVlanUnkDstMacDiscard based on EnableValue"""


_RcVlanUnkDstMacDiscard_Object = MibTableColumn
rcVlanUnkDstMacDiscard = _RcVlanUnkDstMacDiscard_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 45),
    _RcVlanUnkDstMacDiscard_Type()
)
rcVlanUnkDstMacDiscard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanUnkDstMacDiscard.setStatus("current")


class _RcVlanNlbMode_Type(Integer32):
    """Custom type rcVlanNlbMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("nlbAdminDisable", 0),
          ("nlbAdminIgmpMcast", 1),
          ("nlbAdminMulticast", 2),
          ("nlbAdminUnicast", 4))
    )


_RcVlanNlbMode_Type.__name__ = "Integer32"
_RcVlanNlbMode_Object = MibTableColumn
rcVlanNlbMode = _RcVlanNlbMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 46),
    _RcVlanNlbMode_Type()
)
rcVlanNlbMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanNlbMode.setStatus("current")
_RcVlanVrfId_Type = VrfIdentifier
_RcVlanVrfId_Object = MibTableColumn
rcVlanVrfId = _RcVlanVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 48),
    _RcVlanVrfId_Type()
)
rcVlanVrfId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanVrfId.setStatus("current")


class _RcVlanVrfName_Type(DisplayString):
    """Custom type rcVlanVrfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcVlanVrfName_Type.__name__ = "DisplayString"
_RcVlanVrfName_Object = MibTableColumn
rcVlanVrfName = _RcVlanVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 49),
    _RcVlanVrfName_Type()
)
rcVlanVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanVrfName.setStatus("current")


class _RcVlanNodalMepList_Type(DisplayString):
    """Custom type rcVlanNodalMepList based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 408),
    )


_RcVlanNodalMepList_Type.__name__ = "DisplayString"
_RcVlanNodalMepList_Object = MibTableColumn
rcVlanNodalMepList = _RcVlanNodalMepList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 54),
    _RcVlanNodalMepList_Type()
)
rcVlanNodalMepList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanNodalMepList.setStatus("current")


class _RcVlanNumOfNodalMep_Type(Integer32):
    """Custom type rcVlanNumOfNodalMep based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RcVlanNumOfNodalMep_Type.__name__ = "Integer32"
_RcVlanNumOfNodalMep_Object = MibTableColumn
rcVlanNumOfNodalMep = _RcVlanNumOfNodalMep_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 55),
    _RcVlanNumOfNodalMep_Type()
)
rcVlanNumOfNodalMep.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanNumOfNodalMep.setStatus("current")


class _RcVlanNodalMipLevelList_Type(DisplayString):
    """Custom type rcVlanNodalMipLevelList based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcVlanNodalMipLevelList_Type.__name__ = "DisplayString"
_RcVlanNodalMipLevelList_Object = MibTableColumn
rcVlanNodalMipLevelList = _RcVlanNodalMipLevelList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 56),
    _RcVlanNodalMipLevelList_Type()
)
rcVlanNodalMipLevelList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanNodalMipLevelList.setStatus("current")


class _RcVlanNumOfNodalMipLevel_Type(Integer32):
    """Custom type rcVlanNumOfNodalMipLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RcVlanNumOfNodalMipLevel_Type.__name__ = "Integer32"
_RcVlanNumOfNodalMipLevel_Object = MibTableColumn
rcVlanNumOfNodalMipLevel = _RcVlanNumOfNodalMipLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 57),
    _RcVlanNumOfNodalMipLevel_Type()
)
rcVlanNumOfNodalMipLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanNumOfNodalMipLevel.setStatus("current")


class _RcVlanIpMultinettingEnable_Type(TruthValue):
    """Custom type rcVlanIpMultinettingEnable based on TruthValue"""


_RcVlanIpMultinettingEnable_Object = MibTableColumn
rcVlanIpMultinettingEnable = _RcVlanIpMultinettingEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 59),
    _RcVlanIpMultinettingEnable_Type()
)
rcVlanIpMultinettingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIpMultinettingEnable.setStatus("current")


class _RcVlanAssociatedIpMultinettingVlan_Type(Integer32):
    """Custom type rcVlanAssociatedIpMultinettingVlan based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_RcVlanAssociatedIpMultinettingVlan_Type.__name__ = "Integer32"
_RcVlanAssociatedIpMultinettingVlan_Object = MibTableColumn
rcVlanAssociatedIpMultinettingVlan = _RcVlanAssociatedIpMultinettingVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 60),
    _RcVlanAssociatedIpMultinettingVlan_Type()
)
rcVlanAssociatedIpMultinettingVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanAssociatedIpMultinettingVlan.setStatus("current")


class _RcVlanPlsbIsid_Type(Integer32):
    """Custom type rcVlanPlsbIsid based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_RcVlanPlsbIsid_Type.__name__ = "Integer32"
_RcVlanPlsbIsid_Object = MibTableColumn
rcVlanPlsbIsid = _RcVlanPlsbIsid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 2, 1, 61),
    _RcVlanPlsbIsid_Type()
)
rcVlanPlsbIsid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPlsbIsid.setStatus("current")
_RcVlanPortTable_Object = MibTable
rcVlanPortTable = _RcVlanPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3)
)
if mibBuilder.loadTexts:
    rcVlanPortTable.setStatus("current")
_RcVlanPortEntry_Object = MibTableRow
rcVlanPortEntry = _RcVlanPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1)
)
rcVlanPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanPortIndex"),
)
if mibBuilder.loadTexts:
    rcVlanPortEntry.setStatus("current")


class _RcVlanPortIndex_Type(Integer32):
    """Custom type rcVlanPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcVlanPortIndex_Type.__name__ = "Integer32"
_RcVlanPortIndex_Object = MibTableColumn
rcVlanPortIndex = _RcVlanPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 1),
    _RcVlanPortIndex_Type()
)
rcVlanPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanPortIndex.setStatus("current")
_RcVlanPortNumVlanIds_Type = Integer32
_RcVlanPortNumVlanIds_Object = MibTableColumn
rcVlanPortNumVlanIds = _RcVlanPortNumVlanIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 2),
    _RcVlanPortNumVlanIds_Type()
)
rcVlanPortNumVlanIds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanPortNumVlanIds.setStatus("current")


class _RcVlanPortVlanIds_Type(IdList):
    """Custom type rcVlanPortVlanIds based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4096),
    )


_RcVlanPortVlanIds_Type.__name__ = "IdList"
_RcVlanPortVlanIds_Object = MibTableColumn
rcVlanPortVlanIds = _RcVlanPortVlanIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 3),
    _RcVlanPortVlanIds_Type()
)
rcVlanPortVlanIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortVlanIds.setStatus("deprecated")


class _RcVlanPortType_Type(Integer32):
    """Custom type rcVlanPortType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("access", 1),
          ("trunk", 2))
    )


_RcVlanPortType_Type.__name__ = "Integer32"
_RcVlanPortType_Object = MibTableColumn
rcVlanPortType = _RcVlanPortType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 4),
    _RcVlanPortType_Type()
)
rcVlanPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortType.setStatus("current")


class _RcVlanPortDiscardTaggedFrames_Type(TruthValue):
    """Custom type rcVlanPortDiscardTaggedFrames based on TruthValue"""


_RcVlanPortDiscardTaggedFrames_Object = MibTableColumn
rcVlanPortDiscardTaggedFrames = _RcVlanPortDiscardTaggedFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 5),
    _RcVlanPortDiscardTaggedFrames_Type()
)
rcVlanPortDiscardTaggedFrames.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortDiscardTaggedFrames.setStatus("current")


class _RcVlanPortDiscardUntaggedFrames_Type(TruthValue):
    """Custom type rcVlanPortDiscardUntaggedFrames based on TruthValue"""


_RcVlanPortDiscardUntaggedFrames_Object = MibTableColumn
rcVlanPortDiscardUntaggedFrames = _RcVlanPortDiscardUntaggedFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 6),
    _RcVlanPortDiscardUntaggedFrames_Type()
)
rcVlanPortDiscardUntaggedFrames.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortDiscardUntaggedFrames.setStatus("current")


class _RcVlanPortDefaultVlanId_Type(Integer32):
    """Custom type rcVlanPortDefaultVlanId based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_RcVlanPortDefaultVlanId_Type.__name__ = "Integer32"
_RcVlanPortDefaultVlanId_Object = MibTableColumn
rcVlanPortDefaultVlanId = _RcVlanPortDefaultVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 7),
    _RcVlanPortDefaultVlanId_Type()
)
rcVlanPortDefaultVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortDefaultVlanId.setStatus("current")


class _RcVlanPortPerformTagging_Type(TruthValue):
    """Custom type rcVlanPortPerformTagging based on TruthValue"""


_RcVlanPortPerformTagging_Object = MibTableColumn
rcVlanPortPerformTagging = _RcVlanPortPerformTagging_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 8),
    _RcVlanPortPerformTagging_Type()
)
rcVlanPortPerformTagging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortPerformTagging.setStatus("current")


class _RcVlanPortSVlanPortType_Type(Integer32):
    """Custom type rcVlanPortSVlanPortType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nni", 3),
          ("normal", 1),
          ("uni", 2))
    )


_RcVlanPortSVlanPortType_Type.__name__ = "Integer32"
_RcVlanPortSVlanPortType_Object = MibTableColumn
rcVlanPortSVlanPortType = _RcVlanPortSVlanPortType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 9),
    _RcVlanPortSVlanPortType_Type()
)
rcVlanPortSVlanPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortSVlanPortType.setStatus("current")


class _RcVlanPortLoopDetect_Type(TruthValue):
    """Custom type rcVlanPortLoopDetect based on TruthValue"""


_RcVlanPortLoopDetect_Object = MibTableColumn
rcVlanPortLoopDetect = _RcVlanPortLoopDetect_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 10),
    _RcVlanPortLoopDetect_Type()
)
rcVlanPortLoopDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortLoopDetect.setStatus("current")
_RcVlanPortFirstPortInOpid_Type = InterfaceIndex
_RcVlanPortFirstPortInOpid_Object = MibTableColumn
rcVlanPortFirstPortInOpid = _RcVlanPortFirstPortInOpid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 11),
    _RcVlanPortFirstPortInOpid_Type()
)
rcVlanPortFirstPortInOpid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanPortFirstPortInOpid.setStatus("current")
_RcVlanPortLastPortInOpid_Type = InterfaceIndex
_RcVlanPortLastPortInOpid_Object = MibTableColumn
rcVlanPortLastPortInOpid = _RcVlanPortLastPortInOpid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 12),
    _RcVlanPortLastPortInOpid_Type()
)
rcVlanPortLastPortInOpid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanPortLastPortInOpid.setStatus("current")


class _RcVlanPortUntagDefaultVlan_Type(TruthValue):
    """Custom type rcVlanPortUntagDefaultVlan based on TruthValue"""


_RcVlanPortUntagDefaultVlan_Object = MibTableColumn
rcVlanPortUntagDefaultVlan = _RcVlanPortUntagDefaultVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 13),
    _RcVlanPortUntagDefaultVlan_Type()
)
rcVlanPortUntagDefaultVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortUntagDefaultVlan.setStatus("current")


class _RcVlanPortLoopDetectAction_Type(Integer32):
    """Custom type rcVlanPortLoopDetectAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("macDiscard", 3),
          ("portDown", 1),
          ("vlanBlock", 2))
    )


_RcVlanPortLoopDetectAction_Type.__name__ = "Integer32"
_RcVlanPortLoopDetectAction_Object = MibTableColumn
rcVlanPortLoopDetectAction = _RcVlanPortLoopDetectAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 14),
    _RcVlanPortLoopDetectAction_Type()
)
rcVlanPortLoopDetectAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortLoopDetectAction.setStatus("current")


class _RcVlanPortArpDetect_Type(TruthValue):
    """Custom type rcVlanPortArpDetect based on TruthValue"""


_RcVlanPortArpDetect_Object = MibTableColumn
rcVlanPortArpDetect = _RcVlanPortArpDetect_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 15),
    _RcVlanPortArpDetect_Type()
)
rcVlanPortArpDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortArpDetect.setStatus("current")


class _RcVlanPortSpoofDetect_Type(TruthValue):
    """Custom type rcVlanPortSpoofDetect based on TruthValue"""


_RcVlanPortSpoofDetect_Object = MibTableColumn
rcVlanPortSpoofDetect = _RcVlanPortSpoofDetect_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 16),
    _RcVlanPortSpoofDetect_Type()
)
rcVlanPortSpoofDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortSpoofDetect.setStatus("current")


class _RcVlanPortVlanIdList_Type(OctetString):
    """Custom type rcVlanPortVlanIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_RcVlanPortVlanIdList_Type.__name__ = "OctetString"
_RcVlanPortVlanIdList_Object = MibTableColumn
rcVlanPortVlanIdList = _RcVlanPortVlanIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 3, 1, 21),
    _RcVlanPortVlanIdList_Type()
)
rcVlanPortVlanIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanPortVlanIdList.setStatus("current")
_RcVlanMacTable_Object = MibTable
rcVlanMacTable = _RcVlanMacTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 4)
)
if mibBuilder.loadTexts:
    rcVlanMacTable.setStatus("current")
_RcVlanMacEntry_Object = MibTableRow
rcVlanMacEntry = _RcVlanMacEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 4, 1)
)
rcVlanMacEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanMacVlanId"),
    (0, "RAPID-CITY", "rcVlanMacAddr"),
)
if mibBuilder.loadTexts:
    rcVlanMacEntry.setStatus("current")


class _RcVlanMacVlanId_Type(Integer32):
    """Custom type rcVlanMacVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcVlanMacVlanId_Type.__name__ = "Integer32"
_RcVlanMacVlanId_Object = MibTableColumn
rcVlanMacVlanId = _RcVlanMacVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 4, 1, 1),
    _RcVlanMacVlanId_Type()
)
rcVlanMacVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanMacVlanId.setStatus("current")
_RcVlanMacAddr_Type = MacAddress
_RcVlanMacAddr_Object = MibTableColumn
rcVlanMacAddr = _RcVlanMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 4, 1, 2),
    _RcVlanMacAddr_Type()
)
rcVlanMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanMacAddr.setStatus("current")
_RcVlanMacRowStatus_Type = RowStatus
_RcVlanMacRowStatus_Object = MibTableColumn
rcVlanMacRowStatus = _RcVlanMacRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 4, 1, 3),
    _RcVlanMacRowStatus_Type()
)
rcVlanMacRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanMacRowStatus.setStatus("current")
_RcVlanIgmpSnoopNumGroups_Type = Integer32
_RcVlanIgmpSnoopNumGroups_Object = MibScalar
rcVlanIgmpSnoopNumGroups = _RcVlanIgmpSnoopNumGroups_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 5),
    _RcVlanIgmpSnoopNumGroups_Type()
)
rcVlanIgmpSnoopNumGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopNumGroups.setStatus("current")
_RcVlanIgmpSnoopTable_Object = MibTable
rcVlanIgmpSnoopTable = _RcVlanIgmpSnoopTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 6)
)
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopTable.setStatus("deprecated")
_RcVlanIgmpSnoopEntry_Object = MibTableRow
rcVlanIgmpSnoopEntry = _RcVlanIgmpSnoopEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1)
)
rcVlanIgmpSnoopEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanIgmpSnoopVlanId"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopIpAddress"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopIfIndex"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopMember"),
)
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopEntry.setStatus("deprecated")


class _RcVlanIgmpSnoopVlanId_Type(Integer32):
    """Custom type rcVlanIgmpSnoopVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcVlanIgmpSnoopVlanId_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopVlanId_Object = MibTableColumn
rcVlanIgmpSnoopVlanId = _RcVlanIgmpSnoopVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 1),
    _RcVlanIgmpSnoopVlanId_Type()
)
rcVlanIgmpSnoopVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopVlanId.setStatus("deprecated")
_RcVlanIgmpSnoopIpAddress_Type = IpAddress
_RcVlanIgmpSnoopIpAddress_Object = MibTableColumn
rcVlanIgmpSnoopIpAddress = _RcVlanIgmpSnoopIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 2),
    _RcVlanIgmpSnoopIpAddress_Type()
)
rcVlanIgmpSnoopIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopIpAddress.setStatus("deprecated")
_RcVlanIgmpSnoopIfIndex_Type = InterfaceIndex
_RcVlanIgmpSnoopIfIndex_Object = MibTableColumn
rcVlanIgmpSnoopIfIndex = _RcVlanIgmpSnoopIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 3),
    _RcVlanIgmpSnoopIfIndex_Type()
)
rcVlanIgmpSnoopIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopIfIndex.setStatus("deprecated")
_RcVlanIgmpSnoopMember_Type = IpAddress
_RcVlanIgmpSnoopMember_Object = MibTableColumn
rcVlanIgmpSnoopMember = _RcVlanIgmpSnoopMember_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 4),
    _RcVlanIgmpSnoopMember_Type()
)
rcVlanIgmpSnoopMember.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopMember.setStatus("deprecated")
_RcVlanIgmpSnoopExpiration_Type = Integer32
_RcVlanIgmpSnoopExpiration_Object = MibTableColumn
rcVlanIgmpSnoopExpiration = _RcVlanIgmpSnoopExpiration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 5),
    _RcVlanIgmpSnoopExpiration_Type()
)
rcVlanIgmpSnoopExpiration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopExpiration.setStatus("deprecated")


class _RcVlanIgmpSnoopType_Type(Integer32):
    """Custom type rcVlanIgmpSnoopType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("blocked", 3),
          ("dynamic", 1),
          ("static", 2))
    )


_RcVlanIgmpSnoopType_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopType_Object = MibTableColumn
rcVlanIgmpSnoopType = _RcVlanIgmpSnoopType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 6, 1, 6),
    _RcVlanIgmpSnoopType_Type()
)
rcVlanIgmpSnoopType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopType.setStatus("deprecated")
_RcVlanIgmpSnoopStaticTable_Object = MibTable
rcVlanIgmpSnoopStaticTable = _RcVlanIgmpSnoopStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 7)
)
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopStaticTable.setStatus("deprecated")
_RcVlanIgmpSnoopStaticEntry_Object = MibTableRow
rcVlanIgmpSnoopStaticEntry = _RcVlanIgmpSnoopStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1)
)
rcVlanIgmpSnoopStaticEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanIgmpSnoopStaticVlanId"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopStaticIpAddress"),
)
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopStaticEntry.setStatus("deprecated")


class _RcVlanIgmpSnoopStaticVlanId_Type(Integer32):
    """Custom type rcVlanIgmpSnoopStaticVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcVlanIgmpSnoopStaticVlanId_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopStaticVlanId_Object = MibTableColumn
rcVlanIgmpSnoopStaticVlanId = _RcVlanIgmpSnoopStaticVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 1),
    _RcVlanIgmpSnoopStaticVlanId_Type()
)
rcVlanIgmpSnoopStaticVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopStaticVlanId.setStatus("deprecated")
_RcVlanIgmpSnoopStaticIpAddress_Type = IpAddress
_RcVlanIgmpSnoopStaticIpAddress_Object = MibTableColumn
rcVlanIgmpSnoopStaticIpAddress = _RcVlanIgmpSnoopStaticIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 2),
    _RcVlanIgmpSnoopStaticIpAddress_Type()
)
rcVlanIgmpSnoopStaticIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopStaticIpAddress.setStatus("deprecated")
_RcVlanIgmpSnoopStaticMemberPorts_Type = PortSet
_RcVlanIgmpSnoopStaticMemberPorts_Object = MibTableColumn
rcVlanIgmpSnoopStaticMemberPorts = _RcVlanIgmpSnoopStaticMemberPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 3),
    _RcVlanIgmpSnoopStaticMemberPorts_Type()
)
rcVlanIgmpSnoopStaticMemberPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopStaticMemberPorts.setStatus("deprecated")
_RcVlanIgmpSnoopStaticRowStatus_Type = RowStatus
_RcVlanIgmpSnoopStaticRowStatus_Object = MibTableColumn
rcVlanIgmpSnoopStaticRowStatus = _RcVlanIgmpSnoopStaticRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 4),
    _RcVlanIgmpSnoopStaticRowStatus_Type()
)
rcVlanIgmpSnoopStaticRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopStaticRowStatus.setStatus("deprecated")
_RcVlanIgmpSnoopStaticNotAllowedToJoin_Type = PortSet
_RcVlanIgmpSnoopStaticNotAllowedToJoin_Object = MibTableColumn
rcVlanIgmpSnoopStaticNotAllowedToJoin = _RcVlanIgmpSnoopStaticNotAllowedToJoin_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 7, 1, 5),
    _RcVlanIgmpSnoopStaticNotAllowedToJoin_Type()
)
rcVlanIgmpSnoopStaticNotAllowedToJoin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopStaticNotAllowedToJoin.setStatus("deprecated")
_RcVlanIgmpSnoopAccessTable_Object = MibTable
rcVlanIgmpSnoopAccessTable = _RcVlanIgmpSnoopAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 8)
)
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopAccessTable.setStatus("deprecated")
_RcVlanIgmpSnoopAccessEntry_Object = MibTableRow
rcVlanIgmpSnoopAccessEntry = _RcVlanIgmpSnoopAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1)
)
rcVlanIgmpSnoopAccessEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanIgmpSnoopAccessVlanId"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopAccessGrpAddr"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopAccessHostAddr"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopAccessHostMask"),
)
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopAccessEntry.setStatus("deprecated")


class _RcVlanIgmpSnoopAccessVlanId_Type(Integer32):
    """Custom type rcVlanIgmpSnoopAccessVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcVlanIgmpSnoopAccessVlanId_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopAccessVlanId_Object = MibTableColumn
rcVlanIgmpSnoopAccessVlanId = _RcVlanIgmpSnoopAccessVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 1),
    _RcVlanIgmpSnoopAccessVlanId_Type()
)
rcVlanIgmpSnoopAccessVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopAccessVlanId.setStatus("deprecated")
_RcVlanIgmpSnoopAccessGrpAddr_Type = IpAddress
_RcVlanIgmpSnoopAccessGrpAddr_Object = MibTableColumn
rcVlanIgmpSnoopAccessGrpAddr = _RcVlanIgmpSnoopAccessGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 2),
    _RcVlanIgmpSnoopAccessGrpAddr_Type()
)
rcVlanIgmpSnoopAccessGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopAccessGrpAddr.setStatus("deprecated")
_RcVlanIgmpSnoopAccessHostAddr_Type = IpAddress
_RcVlanIgmpSnoopAccessHostAddr_Object = MibTableColumn
rcVlanIgmpSnoopAccessHostAddr = _RcVlanIgmpSnoopAccessHostAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 3),
    _RcVlanIgmpSnoopAccessHostAddr_Type()
)
rcVlanIgmpSnoopAccessHostAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopAccessHostAddr.setStatus("deprecated")
_RcVlanIgmpSnoopAccessHostMask_Type = IpAddress
_RcVlanIgmpSnoopAccessHostMask_Object = MibTableColumn
rcVlanIgmpSnoopAccessHostMask = _RcVlanIgmpSnoopAccessHostMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 4),
    _RcVlanIgmpSnoopAccessHostMask_Type()
)
rcVlanIgmpSnoopAccessHostMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopAccessHostMask.setStatus("deprecated")


class _RcVlanIgmpSnoopAccessMode_Type(Integer32):
    """Custom type rcVlanIgmpSnoopAccessMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("denyBoth", 3),
          ("denyRx", 2),
          ("denyTx", 1))
    )


_RcVlanIgmpSnoopAccessMode_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopAccessMode_Object = MibTableColumn
rcVlanIgmpSnoopAccessMode = _RcVlanIgmpSnoopAccessMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 5),
    _RcVlanIgmpSnoopAccessMode_Type()
)
rcVlanIgmpSnoopAccessMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopAccessMode.setStatus("deprecated")
_RcVlanIgmpSnoopAccessRowStatus_Type = RowStatus
_RcVlanIgmpSnoopAccessRowStatus_Object = MibTableColumn
rcVlanIgmpSnoopAccessRowStatus = _RcVlanIgmpSnoopAccessRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 8, 1, 6),
    _RcVlanIgmpSnoopAccessRowStatus_Type()
)
rcVlanIgmpSnoopAccessRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopAccessRowStatus.setStatus("deprecated")
_RcVlanIgmpSnoopSenderTable_Object = MibTable
rcVlanIgmpSnoopSenderTable = _RcVlanIgmpSnoopSenderTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 9)
)
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopSenderTable.setStatus("deprecated")
_RcVlanIgmpSnoopSenderEntry_Object = MibTableRow
rcVlanIgmpSnoopSenderEntry = _RcVlanIgmpSnoopSenderEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1)
)
rcVlanIgmpSnoopSenderEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanIgmpSnoopSenderVlanId"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopSenderIpAddress"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopSenderIfIndex"),
    (0, "RAPID-CITY", "rcVlanIgmpSnoopSenderMember"),
)
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopSenderEntry.setStatus("deprecated")


class _RcVlanIgmpSnoopSenderVlanId_Type(Integer32):
    """Custom type rcVlanIgmpSnoopSenderVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcVlanIgmpSnoopSenderVlanId_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopSenderVlanId_Object = MibTableColumn
rcVlanIgmpSnoopSenderVlanId = _RcVlanIgmpSnoopSenderVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 1),
    _RcVlanIgmpSnoopSenderVlanId_Type()
)
rcVlanIgmpSnoopSenderVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopSenderVlanId.setStatus("deprecated")
_RcVlanIgmpSnoopSenderIpAddress_Type = IpAddress
_RcVlanIgmpSnoopSenderIpAddress_Object = MibTableColumn
rcVlanIgmpSnoopSenderIpAddress = _RcVlanIgmpSnoopSenderIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 2),
    _RcVlanIgmpSnoopSenderIpAddress_Type()
)
rcVlanIgmpSnoopSenderIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopSenderIpAddress.setStatus("deprecated")
_RcVlanIgmpSnoopSenderIfIndex_Type = InterfaceIndex
_RcVlanIgmpSnoopSenderIfIndex_Object = MibTableColumn
rcVlanIgmpSnoopSenderIfIndex = _RcVlanIgmpSnoopSenderIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 3),
    _RcVlanIgmpSnoopSenderIfIndex_Type()
)
rcVlanIgmpSnoopSenderIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopSenderIfIndex.setStatus("deprecated")
_RcVlanIgmpSnoopSenderMember_Type = IpAddress
_RcVlanIgmpSnoopSenderMember_Object = MibTableColumn
rcVlanIgmpSnoopSenderMember = _RcVlanIgmpSnoopSenderMember_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 4),
    _RcVlanIgmpSnoopSenderMember_Type()
)
rcVlanIgmpSnoopSenderMember.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopSenderMember.setStatus("deprecated")


class _RcVlanIgmpSnoopSenderAction_Type(Integer32):
    """Custom type rcVlanIgmpSnoopSenderAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("flushEntry", 1),
          ("flushGrp", 2),
          ("none", 0))
    )


_RcVlanIgmpSnoopSenderAction_Type.__name__ = "Integer32"
_RcVlanIgmpSnoopSenderAction_Object = MibTableColumn
rcVlanIgmpSnoopSenderAction = _RcVlanIgmpSnoopSenderAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 9, 1, 5),
    _RcVlanIgmpSnoopSenderAction_Type()
)
rcVlanIgmpSnoopSenderAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanIgmpSnoopSenderAction.setStatus("deprecated")
_RcVlanLoopDetectedTable_Object = MibTable
rcVlanLoopDetectedTable = _RcVlanLoopDetectedTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 10)
)
if mibBuilder.loadTexts:
    rcVlanLoopDetectedTable.setStatus("current")
_RcVlanLoopDetectedEntry_Object = MibTableRow
rcVlanLoopDetectedEntry = _RcVlanLoopDetectedEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 10, 1)
)
rcVlanLoopDetectedEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanLoopDetectedPortIndex"),
    (0, "RAPID-CITY", "rcVlanLoopDetectedVlanId"),
)
if mibBuilder.loadTexts:
    rcVlanLoopDetectedEntry.setStatus("current")


class _RcVlanLoopDetectedPortIndex_Type(Integer32):
    """Custom type rcVlanLoopDetectedPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcVlanLoopDetectedPortIndex_Type.__name__ = "Integer32"
_RcVlanLoopDetectedPortIndex_Object = MibTableColumn
rcVlanLoopDetectedPortIndex = _RcVlanLoopDetectedPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 10, 1, 1),
    _RcVlanLoopDetectedPortIndex_Type()
)
rcVlanLoopDetectedPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanLoopDetectedPortIndex.setStatus("current")


class _RcVlanLoopDetectedVlanId_Type(Integer32):
    """Custom type rcVlanLoopDetectedVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcVlanLoopDetectedVlanId_Type.__name__ = "Integer32"
_RcVlanLoopDetectedVlanId_Object = MibTableColumn
rcVlanLoopDetectedVlanId = _RcVlanLoopDetectedVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 10, 1, 2),
    _RcVlanLoopDetectedVlanId_Type()
)
rcVlanLoopDetectedVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanLoopDetectedVlanId.setStatus("current")


class _RcVlanLoopDetectedValue_Type(Integer32):
    """Custom type rcVlanLoopDetectedValue based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RcVlanLoopDetectedValue_Type.__name__ = "Integer32"
_RcVlanLoopDetectedValue_Object = MibTableColumn
rcVlanLoopDetectedValue = _RcVlanLoopDetectedValue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 10, 1, 3),
    _RcVlanLoopDetectedValue_Type()
)
rcVlanLoopDetectedValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanLoopDetectedValue.setStatus("current")
_RcVlanDsapSsapTable_Object = MibTable
rcVlanDsapSsapTable = _RcVlanDsapSsapTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 11)
)
if mibBuilder.loadTexts:
    rcVlanDsapSsapTable.setStatus("current")
_RcVlanDsapSsapEntry_Object = MibTableRow
rcVlanDsapSsapEntry = _RcVlanDsapSsapEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 11, 1)
)
rcVlanDsapSsapEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanDsapSsapVlanId"),
    (0, "RAPID-CITY", "rcVlanDsapSsapPid"),
)
if mibBuilder.loadTexts:
    rcVlanDsapSsapEntry.setStatus("current")


class _RcVlanDsapSsapVlanId_Type(Integer32):
    """Custom type rcVlanDsapSsapVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcVlanDsapSsapVlanId_Type.__name__ = "Integer32"
_RcVlanDsapSsapVlanId_Object = MibTableColumn
rcVlanDsapSsapVlanId = _RcVlanDsapSsapVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 11, 1, 1),
    _RcVlanDsapSsapVlanId_Type()
)
rcVlanDsapSsapVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVlanDsapSsapVlanId.setStatus("current")


class _RcVlanDsapSsapPid_Type(Integer32):
    """Custom type rcVlanDsapSsapPid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcVlanDsapSsapPid_Type.__name__ = "Integer32"
_RcVlanDsapSsapPid_Object = MibTableColumn
rcVlanDsapSsapPid = _RcVlanDsapSsapPid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 11, 1, 2),
    _RcVlanDsapSsapPid_Type()
)
rcVlanDsapSsapPid.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVlanDsapSsapPid.setStatus("current")
_RcVlanDsapSsapRowStatus_Type = RowStatus
_RcVlanDsapSsapRowStatus_Object = MibTableColumn
rcVlanDsapSsapRowStatus = _RcVlanDsapSsapRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 11, 1, 3),
    _RcVlanDsapSsapRowStatus_Type()
)
rcVlanDsapSsapRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanDsapSsapRowStatus.setStatus("current")
_RcVlanNewLoopDetectedTable_Object = MibTable
rcVlanNewLoopDetectedTable = _RcVlanNewLoopDetectedTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 12)
)
if mibBuilder.loadTexts:
    rcVlanNewLoopDetectedTable.setStatus("current")
_RcVlanNewLoopDetectedEntry_Object = MibTableRow
rcVlanNewLoopDetectedEntry = _RcVlanNewLoopDetectedEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1)
)
rcVlanNewLoopDetectedEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanNewLoopDetectedPortIndex"),
    (0, "RAPID-CITY", "rcVlanNewLoopDetectedVlanId"),
    (0, "RAPID-CITY", "rcVlanNewLoopDetectedMac"),
)
if mibBuilder.loadTexts:
    rcVlanNewLoopDetectedEntry.setStatus("current")
_RcVlanNewLoopDetectedPortIndex_Type = InterfaceIndex
_RcVlanNewLoopDetectedPortIndex_Object = MibTableColumn
rcVlanNewLoopDetectedPortIndex = _RcVlanNewLoopDetectedPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 1),
    _RcVlanNewLoopDetectedPortIndex_Type()
)
rcVlanNewLoopDetectedPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVlanNewLoopDetectedPortIndex.setStatus("current")


class _RcVlanNewLoopDetectedVlanId_Type(Integer32):
    """Custom type rcVlanNewLoopDetectedVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcVlanNewLoopDetectedVlanId_Type.__name__ = "Integer32"
_RcVlanNewLoopDetectedVlanId_Object = MibTableColumn
rcVlanNewLoopDetectedVlanId = _RcVlanNewLoopDetectedVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 2),
    _RcVlanNewLoopDetectedVlanId_Type()
)
rcVlanNewLoopDetectedVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVlanNewLoopDetectedVlanId.setStatus("current")
_RcVlanNewLoopDetectedMac_Type = MacAddress
_RcVlanNewLoopDetectedMac_Object = MibTableColumn
rcVlanNewLoopDetectedMac = _RcVlanNewLoopDetectedMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 3),
    _RcVlanNewLoopDetectedMac_Type()
)
rcVlanNewLoopDetectedMac.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVlanNewLoopDetectedMac.setStatus("current")


class _RcVlanNewLoopDetectedAction_Type(Integer32):
    """Custom type rcVlanNewLoopDetectedAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("macDiscard", 3),
          ("portDown", 1),
          ("vlanBlock", 2))
    )


_RcVlanNewLoopDetectedAction_Type.__name__ = "Integer32"
_RcVlanNewLoopDetectedAction_Object = MibTableColumn
rcVlanNewLoopDetectedAction = _RcVlanNewLoopDetectedAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 4),
    _RcVlanNewLoopDetectedAction_Type()
)
rcVlanNewLoopDetectedAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanNewLoopDetectedAction.setStatus("current")
_RcVlanNewLoopDetectedSmltRemote_Type = TruthValue
_RcVlanNewLoopDetectedSmltRemote_Object = MibTableColumn
rcVlanNewLoopDetectedSmltRemote = _RcVlanNewLoopDetectedSmltRemote_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 12, 1, 5),
    _RcVlanNewLoopDetectedSmltRemote_Type()
)
rcVlanNewLoopDetectedSmltRemote.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVlanNewLoopDetectedSmltRemote.setStatus("current")
_RcVlanClearMacRecordTable_Object = MibTable
rcVlanClearMacRecordTable = _RcVlanClearMacRecordTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 17)
)
if mibBuilder.loadTexts:
    rcVlanClearMacRecordTable.setStatus("current")
_RcVlanClearMacRecordEntry_Object = MibTableRow
rcVlanClearMacRecordEntry = _RcVlanClearMacRecordEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1)
)
rcVlanClearMacRecordEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVlanClearMacRecordAddr"),
)
if mibBuilder.loadTexts:
    rcVlanClearMacRecordEntry.setStatus("current")
_RcVlanClearMacRecordAddr_Type = MacAddress
_RcVlanClearMacRecordAddr_Object = MibTableColumn
rcVlanClearMacRecordAddr = _RcVlanClearMacRecordAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 1),
    _RcVlanClearMacRecordAddr_Type()
)
rcVlanClearMacRecordAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVlanClearMacRecordAddr.setStatus("current")


class _RcVlanClearMacRecordVlanId_Type(Integer32):
    """Custom type rcVlanClearMacRecordVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcVlanClearMacRecordVlanId_Type.__name__ = "Integer32"
_RcVlanClearMacRecordVlanId_Object = MibTableColumn
rcVlanClearMacRecordVlanId = _RcVlanClearMacRecordVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 2),
    _RcVlanClearMacRecordVlanId_Type()
)
rcVlanClearMacRecordVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanClearMacRecordVlanId.setStatus("current")


class _RcVlanClearMacRecordAllVlanIds_Type(TruthValue):
    """Custom type rcVlanClearMacRecordAllVlanIds based on TruthValue"""


_RcVlanClearMacRecordAllVlanIds_Object = MibTableColumn
rcVlanClearMacRecordAllVlanIds = _RcVlanClearMacRecordAllVlanIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 3),
    _RcVlanClearMacRecordAllVlanIds_Type()
)
rcVlanClearMacRecordAllVlanIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanClearMacRecordAllVlanIds.setStatus("current")


class _RcVlanClearMacRecordForceDelete_Type(TruthValue):
    """Custom type rcVlanClearMacRecordForceDelete based on TruthValue"""


_RcVlanClearMacRecordForceDelete_Object = MibTableColumn
rcVlanClearMacRecordForceDelete = _RcVlanClearMacRecordForceDelete_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 4),
    _RcVlanClearMacRecordForceDelete_Type()
)
rcVlanClearMacRecordForceDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanClearMacRecordForceDelete.setStatus("current")


class _RcVlanClearMacRecordLCForceDelete_Type(TruthValue):
    """Custom type rcVlanClearMacRecordLCForceDelete based on TruthValue"""


_RcVlanClearMacRecordLCForceDelete_Object = MibTableColumn
rcVlanClearMacRecordLCForceDelete = _RcVlanClearMacRecordLCForceDelete_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 3, 17, 1, 5),
    _RcVlanClearMacRecordLCForceDelete_Type()
)
rcVlanClearMacRecordLCForceDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVlanClearMacRecordLCForceDelete.setStatus("current")
_RcChassis_ObjectIdentity = ObjectIdentity
rcChassis = _RcChassis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4)
)


class _RcChasType_Type(Integer32):
    """Custom type rcChasType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              6,
              7,
              8,
              9,
              280887555,
              280887558,
              280887562,
              280891651,
              1623064842)
        )
    )
    namedValues = NamedValues(
        *(("a1050", 9),
          ("a1100", 2),
          ("a1150", 7),
          ("a1200", 8),
          ("a1250", 6),
          ("a8003", 280887555),
          ("a8003r", 280891651),
          ("a8006", 280887558),
          ("a8010", 280887562),
          ("a8010co", 1623064842),
          ("unknown", 1))
    )


_RcChasType_Type.__name__ = "Integer32"
_RcChasType_Object = MibScalar
rcChasType = _RcChasType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 1),
    _RcChasType_Type()
)
rcChasType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasType.setStatus("current")


class _RcChasSerialNumber_Type(DisplayString):
    """Custom type rcChasSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcChasSerialNumber_Type.__name__ = "DisplayString"
_RcChasSerialNumber_Object = MibScalar
rcChasSerialNumber = _RcChasSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 2),
    _RcChasSerialNumber_Type()
)
rcChasSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasSerialNumber.setStatus("current")


class _RcChasHardwareRevision_Type(DisplayString):
    """Custom type rcChasHardwareRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcChasHardwareRevision_Type.__name__ = "DisplayString"
_RcChasHardwareRevision_Object = MibScalar
rcChasHardwareRevision = _RcChasHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 3),
    _RcChasHardwareRevision_Type()
)
rcChasHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasHardwareRevision.setStatus("current")


class _RcChasNumSlots_Type(Integer32):
    """Custom type rcChasNumSlots based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RcChasNumSlots_Type.__name__ = "Integer32"
_RcChasNumSlots_Object = MibScalar
rcChasNumSlots = _RcChasNumSlots_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 4),
    _RcChasNumSlots_Type()
)
rcChasNumSlots.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasNumSlots.setStatus("current")


class _RcChasNumPorts_Type(Integer32):
    """Custom type rcChasNumPorts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcChasNumPorts_Type.__name__ = "Integer32"
_RcChasNumPorts_Object = MibScalar
rcChasNumPorts = _RcChasNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 5),
    _RcChasNumPorts_Type()
)
rcChasNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasNumPorts.setStatus("current")


class _RcChasTestResult_Type(Integer32):
    """Custom type rcChasTestResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("asiccpuaccess", 8),
          ("crceeprom", 3),
          ("formaccpuaccess", 7),
          ("led", 6),
          ("loopback", 10),
          ("memory", 9),
          ("ok", 2),
          ("other", 1),
          ("procdram", 5),
          ("timer", 4))
    )


_RcChasTestResult_Type.__name__ = "Integer32"
_RcChasTestResult_Object = MibScalar
rcChasTestResult = _RcChasTestResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 6),
    _RcChasTestResult_Type()
)
rcChasTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasTestResult.setStatus("current")
_RcChasFan_ObjectIdentity = ObjectIdentity
rcChasFan = _RcChasFan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 7)
)
_RcChasFanTable_Object = MibTable
rcChasFanTable = _RcChasFanTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 7, 1)
)
if mibBuilder.loadTexts:
    rcChasFanTable.setStatus("current")
_RcChasFanEntry_Object = MibTableRow
rcChasFanEntry = _RcChasFanEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 7, 1, 1)
)
rcChasFanEntry.setIndexNames(
    (0, "RAPID-CITY", "rcChasFanId"),
)
if mibBuilder.loadTexts:
    rcChasFanEntry.setStatus("current")


class _RcChasFanId_Type(Integer32):
    """Custom type rcChasFanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_RcChasFanId_Type.__name__ = "Integer32"
_RcChasFanId_Object = MibTableColumn
rcChasFanId = _RcChasFanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 7, 1, 1, 1),
    _RcChasFanId_Type()
)
rcChasFanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasFanId.setStatus("current")


class _RcChasFanOperStatus_Type(Integer32):
    """Custom type rcChasFanOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("unknown", 1),
          ("up", 2))
    )


_RcChasFanOperStatus_Type.__name__ = "Integer32"
_RcChasFanOperStatus_Object = MibTableColumn
rcChasFanOperStatus = _RcChasFanOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 7, 1, 1, 2),
    _RcChasFanOperStatus_Type()
)
rcChasFanOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasFanOperStatus.setStatus("current")
_RcChasFanAmbientTemperature_Type = Gauge32
_RcChasFanAmbientTemperature_Object = MibTableColumn
rcChasFanAmbientTemperature = _RcChasFanAmbientTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 7, 1, 1, 3),
    _RcChasFanAmbientTemperature_Type()
)
rcChasFanAmbientTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasFanAmbientTemperature.setStatus("current")


class _RcChasFanType_Type(Integer32):
    """Custom type rcChasFanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("highSpeed", 3),
          ("regularSpeed", 2),
          ("unknown", 1))
    )


_RcChasFanType_Type.__name__ = "Integer32"
_RcChasFanType_Object = MibTableColumn
rcChasFanType = _RcChasFanType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 7, 1, 1, 4),
    _RcChasFanType_Type()
)
rcChasFanType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasFanType.setStatus("current")
_RcChasPowerSupply_ObjectIdentity = ObjectIdentity
rcChasPowerSupply = _RcChasPowerSupply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8)
)
_RcChasPowerSupplyTable_Object = MibTable
rcChasPowerSupplyTable = _RcChasPowerSupplyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 1)
)
if mibBuilder.loadTexts:
    rcChasPowerSupplyTable.setStatus("current")
_RcChasPowerSupplyEntry_Object = MibTableRow
rcChasPowerSupplyEntry = _RcChasPowerSupplyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 1, 1)
)
rcChasPowerSupplyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcChasPowerSupplyId"),
)
if mibBuilder.loadTexts:
    rcChasPowerSupplyEntry.setStatus("current")


class _RcChasPowerSupplyId_Type(Integer32):
    """Custom type rcChasPowerSupplyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RcChasPowerSupplyId_Type.__name__ = "Integer32"
_RcChasPowerSupplyId_Object = MibTableColumn
rcChasPowerSupplyId = _RcChasPowerSupplyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 1, 1, 1),
    _RcChasPowerSupplyId_Type()
)
rcChasPowerSupplyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyId.setStatus("current")


class _RcChasPowerSupplyOperStatus_Type(Integer32):
    """Custom type rcChasPowerSupplyOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 4),
          ("empty", 2),
          ("unknown", 1),
          ("up", 3))
    )


_RcChasPowerSupplyOperStatus_Type.__name__ = "Integer32"
_RcChasPowerSupplyOperStatus_Object = MibTableColumn
rcChasPowerSupplyOperStatus = _RcChasPowerSupplyOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 1, 1, 2),
    _RcChasPowerSupplyOperStatus_Type()
)
rcChasPowerSupplyOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyOperStatus.setStatus("current")
_RcChasPowerSupplyDetailTable_Object = MibTable
rcChasPowerSupplyDetailTable = _RcChasPowerSupplyDetailTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2)
)
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailTable.setStatus("current")
_RcChasPowerSupplyDetailEntry_Object = MibTableRow
rcChasPowerSupplyDetailEntry = _RcChasPowerSupplyDetailEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1)
)
rcChasPowerSupplyDetailEntry.setIndexNames(
    (0, "RAPID-CITY", "rcChasPowerSupplyDetailId"),
)
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailEntry.setStatus("current")


class _RcChasPowerSupplyDetailId_Type(Integer32):
    """Custom type rcChasPowerSupplyDetailId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RcChasPowerSupplyDetailId_Type.__name__ = "Integer32"
_RcChasPowerSupplyDetailId_Object = MibTableColumn
rcChasPowerSupplyDetailId = _RcChasPowerSupplyDetailId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1, 1),
    _RcChasPowerSupplyDetailId_Type()
)
rcChasPowerSupplyDetailId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailId.setStatus("current")


class _RcChasPowerSupplyDetailType_Type(Integer32):
    """Custom type rcChasPowerSupplyDetailType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ac", 1),
          ("dc", 2),
          ("unknown", 0))
    )


_RcChasPowerSupplyDetailType_Type.__name__ = "Integer32"
_RcChasPowerSupplyDetailType_Object = MibTableColumn
rcChasPowerSupplyDetailType = _RcChasPowerSupplyDetailType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1, 2),
    _RcChasPowerSupplyDetailType_Type()
)
rcChasPowerSupplyDetailType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailType.setStatus("current")


class _RcChasPowerSupplyDetailSerialNumber_Type(DisplayString):
    """Custom type rcChasPowerSupplyDetailSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcChasPowerSupplyDetailSerialNumber_Type.__name__ = "DisplayString"
_RcChasPowerSupplyDetailSerialNumber_Object = MibTableColumn
rcChasPowerSupplyDetailSerialNumber = _RcChasPowerSupplyDetailSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1, 3),
    _RcChasPowerSupplyDetailSerialNumber_Type()
)
rcChasPowerSupplyDetailSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailSerialNumber.setStatus("current")


class _RcChasPowerSupplyDetailHardwareRevision_Type(DisplayString):
    """Custom type rcChasPowerSupplyDetailHardwareRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcChasPowerSupplyDetailHardwareRevision_Type.__name__ = "DisplayString"
_RcChasPowerSupplyDetailHardwareRevision_Object = MibTableColumn
rcChasPowerSupplyDetailHardwareRevision = _RcChasPowerSupplyDetailHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1, 4),
    _RcChasPowerSupplyDetailHardwareRevision_Type()
)
rcChasPowerSupplyDetailHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailHardwareRevision.setStatus("current")


class _RcChasPowerSupplyDetailPartNumber_Type(DisplayString):
    """Custom type rcChasPowerSupplyDetailPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcChasPowerSupplyDetailPartNumber_Type.__name__ = "DisplayString"
_RcChasPowerSupplyDetailPartNumber_Object = MibTableColumn
rcChasPowerSupplyDetailPartNumber = _RcChasPowerSupplyDetailPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1, 5),
    _RcChasPowerSupplyDetailPartNumber_Type()
)
rcChasPowerSupplyDetailPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailPartNumber.setStatus("current")


class _RcChasPowerSupplyDetailDescription_Type(DisplayString):
    """Custom type rcChasPowerSupplyDetailDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcChasPowerSupplyDetailDescription_Type.__name__ = "DisplayString"
_RcChasPowerSupplyDetailDescription_Object = MibTableColumn
rcChasPowerSupplyDetailDescription = _RcChasPowerSupplyDetailDescription_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1, 6),
    _RcChasPowerSupplyDetailDescription_Type()
)
rcChasPowerSupplyDetailDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailDescription.setStatus("current")


class _RcChasPowerSupplyDetailInputLineVoltage_Type(Integer32):
    """Custom type rcChasPowerSupplyDetailInputLineVoltage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high220v", 2),
          ("low110v", 1),
          ("minus48v", 3),
          ("unknown", 0))
    )


_RcChasPowerSupplyDetailInputLineVoltage_Type.__name__ = "Integer32"
_RcChasPowerSupplyDetailInputLineVoltage_Object = MibTableColumn
rcChasPowerSupplyDetailInputLineVoltage = _RcChasPowerSupplyDetailInputLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1, 8),
    _RcChasPowerSupplyDetailInputLineVoltage_Type()
)
rcChasPowerSupplyDetailInputLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailInputLineVoltage.setStatus("current")


class _RcChasPowerSupplyDetailOperLineVoltage_Type(Integer32):
    """Custom type rcChasPowerSupplyDetailOperLineVoltage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high220v", 2),
          ("low110v", 1),
          ("minus48v", 3),
          ("unknown", 0))
    )


_RcChasPowerSupplyDetailOperLineVoltage_Type.__name__ = "Integer32"
_RcChasPowerSupplyDetailOperLineVoltage_Object = MibTableColumn
rcChasPowerSupplyDetailOperLineVoltage = _RcChasPowerSupplyDetailOperLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 8, 2, 1, 9),
    _RcChasPowerSupplyDetailOperLineVoltage_Type()
)
rcChasPowerSupplyDetailOperLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerSupplyDetailOperLineVoltage.setStatus("current")
_RcCard_ObjectIdentity = ObjectIdentity
rcCard = _RcCard_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9)
)
_RcCardTable_Object = MibTable
rcCardTable = _RcCardTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1)
)
if mibBuilder.loadTexts:
    rcCardTable.setStatus("current")
_RcCardEntry_Object = MibTableRow
rcCardEntry = _RcCardEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1)
)
rcCardEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCardIndex"),
)
if mibBuilder.loadTexts:
    rcCardEntry.setStatus("current")


class _RcCardIndex_Type(Integer32):
    """Custom type rcCardIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcCardIndex_Type.__name__ = "Integer32"
_RcCardIndex_Object = MibTableColumn
rcCardIndex = _RcCardIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1, 1),
    _RcCardIndex_Type()
)
rcCardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCardIndex.setStatus("current")


class _RcCardType_Type(Integer32):
    """Custom type rcCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              1025,
              1026,
              1028,
              1041,
              1042,
              1153,
              1154,
              1169,
              1170,
              1282,
              1298,
              1537,
              1538,
              1553,
              1554,
              1665,
              1666,
              1681,
              1682)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("rc12x100BaseFBB", 16),
          ("rc12x100BaseTX-2x100BaseFBB", 18),
          ("rc12x100BaseTXWG", 15),
          ("rc14x100BaseTX-2x100BaseFBB", 22),
          ("rc16x100BaseFBB", 21),
          ("rc16x100BaseTX", 6),
          ("rc16x100BaseTXWG", 13),
          ("rc1x1000BaseLXBB", 1169),
          ("rc1x1000BaseLXRBB", 1681),
          ("rc1x1000BaseLXRWG", 1665),
          ("rc1x1000BaseLXWG", 1153),
          ("rc1x1000BaseSXBB", 1041),
          ("rc1x1000BaseSXRBB", 1553),
          ("rc1x1000BaseSXRWG", 1537),
          ("rc1x1000BaseSXWG", 1025),
          ("rc1xOC12", 25),
          ("rc1xOC12POSBaseMMF", 27),
          ("rc1xOC12POSBaseSMF", 28),
          ("rc2x1000BaseLXBB", 1170),
          ("rc2x1000BaseLXRBB", 1682),
          ("rc2x1000BaseLXRWG", 1666),
          ("rc2x1000BaseLXWG", 1154),
          ("rc2x1000BaseSXBB", 1042),
          ("rc2x1000BaseSXRBB", 1554),
          ("rc2x1000BaseSXRWG", 1538),
          ("rc2x1000BaseSXWG", 1026),
          ("rc2x1000BaseXDBB", 1298),
          ("rc2x1000BaseXDWG", 1282),
          ("rc2x155BaseFBB", 19),
          ("rc4x1000BaseSXWG", 1028),
          ("rc4x100BaseFWG", 14),
          ("rc4x155BaseFBB", 20),
          ("rc4xOC3", 24),
          ("rc8x100BaseF", 5),
          ("rc8x100BaseFWG", 17),
          ("rc8x100BaseT2", 4),
          ("rc8x100BaseTX", 3),
          ("rc8x100BaseTXWG", 12),
          ("rc8x10BaseFBB", 23),
          ("rcCPU", 2),
          ("rcRMON", 26))
    )


_RcCardType_Type.__name__ = "Integer32"
_RcCardType_Object = MibTableColumn
rcCardType = _RcCardType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1, 2),
    _RcCardType_Type()
)
rcCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCardType.setStatus("current")


class _RcCardSerialNumber_Type(DisplayString):
    """Custom type rcCardSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcCardSerialNumber_Type.__name__ = "DisplayString"
_RcCardSerialNumber_Object = MibTableColumn
rcCardSerialNumber = _RcCardSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1, 3),
    _RcCardSerialNumber_Type()
)
rcCardSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCardSerialNumber.setStatus("current")


class _RcCardHardwareRevision_Type(DisplayString):
    """Custom type rcCardHardwareRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RcCardHardwareRevision_Type.__name__ = "DisplayString"
_RcCardHardwareRevision_Object = MibTableColumn
rcCardHardwareRevision = _RcCardHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1, 4),
    _RcCardHardwareRevision_Type()
)
rcCardHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCardHardwareRevision.setStatus("current")


class _RcCardAdminStatus_Type(Integer32):
    """Custom type rcCardAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_RcCardAdminStatus_Type.__name__ = "Integer32"
_RcCardAdminStatus_Object = MibTableColumn
rcCardAdminStatus = _RcCardAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1, 5),
    _RcCardAdminStatus_Type()
)
rcCardAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCardAdminStatus.setStatus("current")


class _RcCardOperStatus_Type(Integer32):
    """Custom type rcCardOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dormant", 5),
          ("down", 2),
          ("testing", 3),
          ("unknown", 4),
          ("up", 1))
    )


_RcCardOperStatus_Type.__name__ = "Integer32"
_RcCardOperStatus_Object = MibTableColumn
rcCardOperStatus = _RcCardOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1, 6),
    _RcCardOperStatus_Type()
)
rcCardOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCardOperStatus.setStatus("current")


class _RcCardPCMCIAType_Type(Integer32):
    """Custom type rcCardPCMCIAType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flash2meg", 3),
          ("flash4meg", 4),
          ("modem28kbs", 2),
          ("none", 1))
    )


_RcCardPCMCIAType_Type.__name__ = "Integer32"
_RcCardPCMCIAType_Object = MibTableColumn
rcCardPCMCIAType = _RcCardPCMCIAType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1, 7),
    _RcCardPCMCIAType_Type()
)
rcCardPCMCIAType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCardPCMCIAType.setStatus("current")


class _RcCardPartNumber_Type(DisplayString):
    """Custom type rcCardPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcCardPartNumber_Type.__name__ = "DisplayString"
_RcCardPartNumber_Object = MibTableColumn
rcCardPartNumber = _RcCardPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 9, 1, 1, 8),
    _RcCardPartNumber_Type()
)
rcCardPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCardPartNumber.setStatus("current")
_RcPort_ObjectIdentity = ObjectIdentity
rcPort = _RcPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10)
)
_RcPortTable_Object = MibTable
rcPortTable = _RcPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1)
)
if mibBuilder.loadTexts:
    rcPortTable.setStatus("current")
_RcPortEntry_Object = MibTableRow
rcPortEntry = _RcPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1)
)
rcPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPortIndex"),
)
if mibBuilder.loadTexts:
    rcPortEntry.setStatus("current")
_RcPortIndex_Type = InterfaceIndex
_RcPortIndex_Object = MibTableColumn
rcPortIndex = _RcPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 1),
    _RcPortIndex_Type()
)
rcPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortIndex.setStatus("current")


class _RcPortType_Type(Integer32):
    """Custom type rcPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              53,
              55,
              56,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              104,
              106)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("rc1000BaseDualF", 5),
          ("rc1000BaseF", 4),
          ("rc1000BaseT", 23),
          ("rc1000BaseTX", 53),
          ("rc1000BaseTXPOE", 63),
          ("rc100BaseF", 3),
          ("rc100BaseT2", 2),
          ("rc100BaseTX", 1),
          ("rc10BaseF", 6),
          ("rc10GbCX", 106),
          ("rc10GbDWDMR", 96),
          ("rc10GbDWDMW", 97),
          ("rc10GbER", 60),
          ("rc10GbEW", 61),
          ("rc10GbLR", 51),
          ("rc10GbLRM", 95),
          ("rc10GbLW", 50),
          ("rc10GbNone", 56),
          ("rc10GbOther", 62),
          ("rc10GbSR", 58),
          ("rc10GbSW", 59),
          ("rc10GbZR", 64),
          ("rc10GbZW", 65),
          ("rc1GbFD", 94),
          ("rcAtm", 9),
          ("rcDs3", 20),
          ("rcE3", 21),
          ("rcGbic1200Lx", 88),
          ("rcGbic1300Lx", 89),
          ("rcGbic1300SeFx", 104),
          ("rcGbic1310Bx", 84),
          ("rcGbic1310Lx", 90),
          ("rcGbic1310Xd", 66),
          ("rcGbic1470", 33),
          ("rcGbic1470APD", 42),
          ("rcGbic1470Xd", 67),
          ("rcGbic1470Zx", 75),
          ("rcGbic1490", 34),
          ("rcGbic1490APD", 43),
          ("rcGbic1490Bx", 85),
          ("rcGbic1490Lx", 91),
          ("rcGbic1490Xd", 68),
          ("rcGbic1490Zx", 76),
          ("rcGbic1510", 35),
          ("rcGbic1510APD", 44),
          ("rcGbic1510Xd", 69),
          ("rcGbic1510Zx", 77),
          ("rcGbic1530", 36),
          ("rcGbic1530APD", 45),
          ("rcGbic1530Xd", 70),
          ("rcGbic1530Zx", 78),
          ("rcGbic1550", 37),
          ("rcGbic1550APD", 46),
          ("rcGbic1550Ex", 93),
          ("rcGbic1550Lx", 92),
          ("rcGbic1550Xd", 71),
          ("rcGbic1550Zx", 79),
          ("rcGbic1570", 38),
          ("rcGbic1570APD", 47),
          ("rcGbic1570Xd", 72),
          ("rcGbic1570Zx", 80),
          ("rcGbic1590", 39),
          ("rcGbic1590APD", 48),
          ("rcGbic1590Xd", 73),
          ("rcGbic1590Zx", 81),
          ("rcGbic1610", 40),
          ("rcGbic1610APD", 49),
          ("rcGbic1610Xd", 74),
          ("rcGbic1610Zx", 82),
          ("rcGbic1690Zx", 83),
          ("rcGbic850Sx", 87),
          ("rcGbicBx", 55),
          ("rcGbicCu", 13),
          ("rcGbicEx", 86),
          ("rcGbicLx", 10),
          ("rcGbicNone", 22),
          ("rcGbicOther", 14),
          ("rcGbicSx", 11),
          ("rcGbicXd", 12),
          ("rcGbicZx", 24),
          ("rcOc12cAtmMM", 28),
          ("rcOc12cAtmSM", 27),
          ("rcOc12cMM", 19),
          ("rcOc12cPosMM", 32),
          ("rcOc12cPosSM", 31),
          ("rcOc12cSM", 18),
          ("rcOc3cAtmMM", 26),
          ("rcOc3cAtmSM", 25),
          ("rcOc3cCOPPER", 17),
          ("rcOc3cMM", 16),
          ("rcOc3cPosMM", 30),
          ("rcOc3cPosSM", 29),
          ("rcOc3cSM", 15),
          ("rcPosMMF", 7),
          ("rcPosSMF", 8),
          ("rcRmon", 41))
    )


_RcPortType_Type.__name__ = "Integer32"
_RcPortType_Object = MibTableColumn
rcPortType = _RcPortType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 2),
    _RcPortType_Type()
)
rcPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortType.setStatus("current")


class _RcPortConnectorType_Type(Integer32):
    """Custom type rcPortConnectorType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nonRedundant", 1),
          ("redundant", 2))
    )


_RcPortConnectorType_Type.__name__ = "Integer32"
_RcPortConnectorType_Object = MibTableColumn
rcPortConnectorType = _RcPortConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 3),
    _RcPortConnectorType_Type()
)
rcPortConnectorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortConnectorType.setStatus("current")


class _RcPortPerformRouting_Type(TruthValue):
    """Custom type rcPortPerformRouting based on TruthValue"""


_RcPortPerformRouting_Object = MibTableColumn
rcPortPerformRouting = _RcPortPerformRouting_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 4),
    _RcPortPerformRouting_Type()
)
rcPortPerformRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortPerformRouting.setStatus("deprecated")


class _RcPortHighPriority_Type(TruthValue):
    """Custom type rcPortHighPriority based on TruthValue"""


_RcPortHighPriority_Object = MibTableColumn
rcPortHighPriority = _RcPortHighPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 5),
    _RcPortHighPriority_Type()
)
rcPortHighPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortHighPriority.setStatus("deprecated")


class _RcPortAction_Type(Integer32):
    """Custom type rcPortAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("clearLoopDetectAlarm", 7),
          ("flushAll", 5),
          ("flushArp", 3),
          ("flushIp", 4),
          ("flushMacFdb", 2),
          ("none", 1),
          ("triggerRipUpdate", 6))
    )


_RcPortAction_Type.__name__ = "Integer32"
_RcPortAction_Object = MibTableColumn
rcPortAction = _RcPortAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 6),
    _RcPortAction_Type()
)
rcPortAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortAction.setStatus("current")


class _RcPortResult_Type(Integer32):
    """Custom type rcPortResult based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fail", 4),
          ("inProgress", 2),
          ("none", 1),
          ("success", 3))
    )


_RcPortResult_Type.__name__ = "Integer32"
_RcPortResult_Object = MibTableColumn
rcPortResult = _RcPortResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 7),
    _RcPortResult_Type()
)
rcPortResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortResult.setStatus("current")


class _RcPortPrimaryConnector_Type(Integer32):
    """Custom type rcPortPrimaryConnector based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("left", 1),
          ("other", 3),
          ("right", 2))
    )


_RcPortPrimaryConnector_Type.__name__ = "Integer32"
_RcPortPrimaryConnector_Object = MibTableColumn
rcPortPrimaryConnector = _RcPortPrimaryConnector_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 8),
    _RcPortPrimaryConnector_Type()
)
rcPortPrimaryConnector.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortPrimaryConnector.setStatus("current")


class _RcPortActiveConnector_Type(Integer32):
    """Custom type rcPortActiveConnector based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("left", 1),
          ("other", 3),
          ("right", 2))
    )


_RcPortActiveConnector_Type.__name__ = "Integer32"
_RcPortActiveConnector_Object = MibTableColumn
rcPortActiveConnector = _RcPortActiveConnector_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 9),
    _RcPortActiveConnector_Type()
)
rcPortActiveConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortActiveConnector.setStatus("current")


class _RcPortBackupConnectorStatus_Type(Integer32):
    """Custom type rcPortBackupConnectorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("other", 3),
          ("up", 1))
    )


_RcPortBackupConnectorStatus_Type.__name__ = "Integer32"
_RcPortBackupConnectorStatus_Object = MibTableColumn
rcPortBackupConnectorStatus = _RcPortBackupConnectorStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 10),
    _RcPortBackupConnectorStatus_Type()
)
rcPortBackupConnectorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortBackupConnectorStatus.setStatus("current")


class _RcPortAutoNegotiate_Type(TruthValue):
    """Custom type rcPortAutoNegotiate based on TruthValue"""


_RcPortAutoNegotiate_Object = MibTableColumn
rcPortAutoNegotiate = _RcPortAutoNegotiate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 11),
    _RcPortAutoNegotiate_Type()
)
rcPortAutoNegotiate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortAutoNegotiate.setStatus("current")


class _RcPortAdminDuplex_Type(Integer32):
    """Custom type rcPortAdminDuplex based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("full", 2),
          ("half", 1))
    )


_RcPortAdminDuplex_Type.__name__ = "Integer32"
_RcPortAdminDuplex_Object = MibTableColumn
rcPortAdminDuplex = _RcPortAdminDuplex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 12),
    _RcPortAdminDuplex_Type()
)
rcPortAdminDuplex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortAdminDuplex.setStatus("current")


class _RcPortOperDuplex_Type(Integer32):
    """Custom type rcPortOperDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("full", 2),
          ("half", 1))
    )


_RcPortOperDuplex_Type.__name__ = "Integer32"
_RcPortOperDuplex_Object = MibTableColumn
rcPortOperDuplex = _RcPortOperDuplex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 13),
    _RcPortOperDuplex_Type()
)
rcPortOperDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortOperDuplex.setStatus("current")


class _RcPortAdminSpeed_Type(Integer32):
    """Custom type rcPortAdminSpeed based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mbps10", 1),
          ("mbps100", 2),
          ("mbps1000", 3),
          ("mbps10000", 4),
          ("none", 0))
    )


_RcPortAdminSpeed_Type.__name__ = "Integer32"
_RcPortAdminSpeed_Object = MibTableColumn
rcPortAdminSpeed = _RcPortAdminSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 14),
    _RcPortAdminSpeed_Type()
)
rcPortAdminSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortAdminSpeed.setStatus("current")
_RcPortOperSpeed_Type = Integer32
_RcPortOperSpeed_Object = MibTableColumn
rcPortOperSpeed = _RcPortOperSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 15),
    _RcPortOperSpeed_Type()
)
rcPortOperSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortOperSpeed.setStatus("current")


class _RcPortMltId_Type(Integer32):
    """Custom type rcPortMltId based on Integer32"""
    defaultValue = 0


_RcPortMltId_Object = MibTableColumn
rcPortMltId = _RcPortMltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 16),
    _RcPortMltId_Type()
)
rcPortMltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortMltId.setStatus("current")


class _RcPortLocked_Type(TruthValue):
    """Custom type rcPortLocked based on TruthValue"""


_RcPortLocked_Object = MibTableColumn
rcPortLocked = _RcPortLocked_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 17),
    _RcPortLocked_Type()
)
rcPortLocked.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortLocked.setStatus("current")


class _RcPortAutoNegotiationSupported_Type(TruthValue):
    """Custom type rcPortAutoNegotiationSupported based on TruthValue"""


_RcPortAutoNegotiationSupported_Object = MibTableColumn
rcPortAutoNegotiationSupported = _RcPortAutoNegotiationSupported_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 18),
    _RcPortAutoNegotiationSupported_Type()
)
rcPortAutoNegotiationSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortAutoNegotiationSupported.setStatus("current")


class _RcPortSingleRoutablePort_Type(TruthValue):
    """Custom type rcPortSingleRoutablePort based on TruthValue"""


_RcPortSingleRoutablePort_Object = MibTableColumn
rcPortSingleRoutablePort = _RcPortSingleRoutablePort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 19),
    _RcPortSingleRoutablePort_Type()
)
rcPortSingleRoutablePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortSingleRoutablePort.setStatus("current")


class _RcPortUnknownMacDiscard_Type(TruthValue):
    """Custom type rcPortUnknownMacDiscard based on TruthValue"""


_RcPortUnknownMacDiscard_Object = MibTableColumn
rcPortUnknownMacDiscard = _RcPortUnknownMacDiscard_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 20),
    _RcPortUnknownMacDiscard_Type()
)
rcPortUnknownMacDiscard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortUnknownMacDiscard.setStatus("current")
_RcPortNumStateTransition_Type = Counter32
_RcPortNumStateTransition_Object = MibTableColumn
rcPortNumStateTransition = _RcPortNumStateTransition_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 21),
    _RcPortNumStateTransition_Type()
)
rcPortNumStateTransition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortNumStateTransition.setStatus("current")


class _RcPortUserPriority_Type(Integer32):
    """Custom type rcPortUserPriority based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("level0", 0),
          ("level1", 1),
          ("level2", 2),
          ("level3", 3),
          ("level4", 4),
          ("level5", 5),
          ("level6", 6),
          ("level7", 7))
    )


_RcPortUserPriority_Type.__name__ = "Integer32"
_RcPortUserPriority_Object = MibTableColumn
rcPortUserPriority = _RcPortUserPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 22),
    _RcPortUserPriority_Type()
)
rcPortUserPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortUserPriority.setStatus("deprecated")
_RcPortAllowOversizeFrame_Type = TruthValue
_RcPortAllowOversizeFrame_Object = MibTableColumn
rcPortAllowOversizeFrame = _RcPortAllowOversizeFrame_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 23),
    _RcPortAllowOversizeFrame_Type()
)
rcPortAllowOversizeFrame.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortAllowOversizeFrame.setStatus("deprecated")


class _RcPortQosLevel_Type(Integer32):
    """Custom type rcPortQosLevel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("level0", 0),
          ("level1", 1),
          ("level2", 2),
          ("level3", 3),
          ("level4", 4),
          ("level5", 5),
          ("level6", 6),
          ("level7", 7))
    )


_RcPortQosLevel_Type.__name__ = "Integer32"
_RcPortQosLevel_Object = MibTableColumn
rcPortQosLevel = _RcPortQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 30),
    _RcPortQosLevel_Type()
)
rcPortQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortQosLevel.setStatus("current")


class _RcPortDiffServEnable_Type(TruthValue):
    """Custom type rcPortDiffServEnable based on TruthValue"""


_RcPortDiffServEnable_Object = MibTableColumn
rcPortDiffServEnable = _RcPortDiffServEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 31),
    _RcPortDiffServEnable_Type()
)
rcPortDiffServEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortDiffServEnable.setStatus("current")


class _RcPortDiffServType_Type(Integer32):
    """Custom type rcPortDiffServType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("access", 1),
          ("core", 2),
          ("none", 0))
    )


_RcPortDiffServType_Type.__name__ = "Integer32"
_RcPortDiffServType_Object = MibTableColumn
rcPortDiffServType = _RcPortDiffServType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 32),
    _RcPortDiffServType_Type()
)
rcPortDiffServType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortDiffServType.setStatus("current")


class _RcPortDiffServIeee8021POverrideEnable_Type(TruthValue):
    """Custom type rcPortDiffServIeee8021POverrideEnable based on TruthValue"""


_RcPortDiffServIeee8021POverrideEnable_Object = MibTableColumn
rcPortDiffServIeee8021POverrideEnable = _RcPortDiffServIeee8021POverrideEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 33),
    _RcPortDiffServIeee8021POverrideEnable_Type()
)
rcPortDiffServIeee8021POverrideEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortDiffServIeee8021POverrideEnable.setStatus("deprecated")


class _RcPortVendorDescr_Type(DisplayString):
    """Custom type rcPortVendorDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RcPortVendorDescr_Type.__name__ = "DisplayString"
_RcPortVendorDescr_Object = MibTableColumn
rcPortVendorDescr = _RcPortVendorDescr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 34),
    _RcPortVendorDescr_Type()
)
rcPortVendorDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVendorDescr.setStatus("current")


class _RcPortName_Type(DisplayString):
    """Custom type rcPortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 42),
    )


_RcPortName_Type.__name__ = "DisplayString"
_RcPortName_Object = MibTableColumn
rcPortName = _RcPortName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 35),
    _RcPortName_Type()
)
rcPortName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortName.setStatus("current")
_RcPortOctapidId_Type = Integer32
_RcPortOctapidId_Object = MibTableColumn
rcPortOctapidId = _RcPortOctapidId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 36),
    _RcPortOctapidId_Type()
)
rcPortOctapidId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortOctapidId.setStatus("deprecated")


class _RcPortWan_Type(Integer32):
    """Custom type rcPortWan based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lan", 2),
          ("none", 0),
          ("wan", 1))
    )


_RcPortWan_Type.__name__ = "Integer32"
_RcPortWan_Object = MibTableColumn
rcPortWan = _RcPortWan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 37),
    _RcPortWan_Type()
)
rcPortWan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortWan.setStatus("current")


class _RcPortTransport_Type(Integer32):
    """Custom type rcPortTransport based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sdh", 2),
          ("sonet", 1))
    )


_RcPortTransport_Type.__name__ = "Integer32"
_RcPortTransport_Object = MibTableColumn
rcPortTransport = _RcPortTransport_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 38),
    _RcPortTransport_Type()
)
rcPortTransport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortTransport.setStatus("current")


class _RcPortMultimediaFilterEnable_Type(TruthValue):
    """Custom type rcPortMultimediaFilterEnable based on TruthValue"""


_RcPortMultimediaFilterEnable_Object = MibTableColumn
rcPortMultimediaFilterEnable = _RcPortMultimediaFilterEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 39),
    _RcPortMultimediaFilterEnable_Type()
)
rcPortMultimediaFilterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortMultimediaFilterEnable.setStatus("current")
_RcPortMultimediaDevSelection_Type = DisplayString
_RcPortMultimediaDevSelection_Object = MibTableColumn
rcPortMultimediaDevSelection = _RcPortMultimediaDevSelection_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 40),
    _RcPortMultimediaDevSelection_Type()
)
rcPortMultimediaDevSelection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortMultimediaDevSelection.setStatus("current")


class _RcPortAdminRouting_Type(EnableValue):
    """Custom type rcPortAdminRouting based on EnableValue"""


_RcPortAdminRouting_Object = MibTableColumn
rcPortAdminRouting = _RcPortAdminRouting_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 43),
    _RcPortAdminRouting_Type()
)
rcPortAdminRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortAdminRouting.setStatus("current")
_RcPortOperRouting_Type = EnableValue
_RcPortOperRouting_Object = MibTableColumn
rcPortOperRouting = _RcPortOperRouting_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 44),
    _RcPortOperRouting_Type()
)
rcPortOperRouting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortOperRouting.setStatus("current")
_RcPortPid_Type = Integer32
_RcPortPid_Object = MibTableColumn
rcPortPid = _RcPortPid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 45),
    _RcPortPid_Type()
)
rcPortPid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortPid.setStatus("current")


class _RcPortIeee8021POverrideEnable_Type(TruthValue):
    """Custom type rcPortIeee8021POverrideEnable based on TruthValue"""


_RcPortIeee8021POverrideEnable_Object = MibTableColumn
rcPortIeee8021POverrideEnable = _RcPortIeee8021POverrideEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 46),
    _RcPortIeee8021POverrideEnable_Type()
)
rcPortIeee8021POverrideEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortIeee8021POverrideEnable.setStatus("current")
_RcPortCpLimitShutDown_Type = TruthValue
_RcPortCpLimitShutDown_Object = MibTableColumn
rcPortCpLimitShutDown = _RcPortCpLimitShutDown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 50),
    _RcPortCpLimitShutDown_Type()
)
rcPortCpLimitShutDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortCpLimitShutDown.setStatus("current")
_RcPortHighSecureEnable_Type = TruthValue
_RcPortHighSecureEnable_Object = MibTableColumn
rcPortHighSecureEnable = _RcPortHighSecureEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 51),
    _RcPortHighSecureEnable_Type()
)
rcPortHighSecureEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortHighSecureEnable.setStatus("current")


class _RcPortMrouteStrLimit_Type(Integer32):
    """Custom type rcPortMrouteStrLimit based on Integer32"""
    defaultValue = 1984

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32768),
    )


_RcPortMrouteStrLimit_Type.__name__ = "Integer32"
_RcPortMrouteStrLimit_Object = MibTableColumn
rcPortMrouteStrLimit = _RcPortMrouteStrLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 55),
    _RcPortMrouteStrLimit_Type()
)
rcPortMrouteStrLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortMrouteStrLimit.setStatus("current")


class _RcPortMrouteStrTimerCheck_Type(Integer32):
    """Custom type rcPortMrouteStrTimerCheck based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_RcPortMrouteStrTimerCheck_Type.__name__ = "Integer32"
_RcPortMrouteStrTimerCheck_Object = MibTableColumn
rcPortMrouteStrTimerCheck = _RcPortMrouteStrTimerCheck_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 56),
    _RcPortMrouteStrTimerCheck_Type()
)
rcPortMrouteStrTimerCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortMrouteStrTimerCheck.setStatus("current")


class _RcPortMrouteStrLimitEnable_Type(TruthValue):
    """Custom type rcPortMrouteStrLimitEnable based on TruthValue"""


_RcPortMrouteStrLimitEnable_Object = MibTableColumn
rcPortMrouteStrLimitEnable = _RcPortMrouteStrLimitEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 57),
    _RcPortMrouteStrLimitEnable_Type()
)
rcPortMrouteStrLimitEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortMrouteStrLimitEnable.setStatus("current")


class _RcPortAutoNegAd_Type(Bits):
    """Custom type rcPortAutoNegAd based on Bits"""
    namedValues = NamedValues(
        *(("advertise1000Full", 5),
          ("advertise1000Half", 4),
          ("advertise100Full", 3),
          ("advertise100Half", 2),
          ("advertise10Full", 1),
          ("advertise10Half", 0),
          ("advertiseAsymPause", 7),
          ("advertiseMacPause", 6),
          ("advertiseNone", 8))
    )

_RcPortAutoNegAd_Type.__name__ = "Bits"
_RcPortAutoNegAd_Object = MibTableColumn
rcPortAutoNegAd = _RcPortAutoNegAd_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 62),
    _RcPortAutoNegAd_Type()
)
rcPortAutoNegAd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortAutoNegAd.setStatus("current")


class _RcPortAutoRecoverPort_Type(TruthValue):
    """Custom type rcPortAutoRecoverPort based on TruthValue"""


_RcPortAutoRecoverPort_Object = MibTableColumn
rcPortAutoRecoverPort = _RcPortAutoRecoverPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 64),
    _RcPortAutoRecoverPort_Type()
)
rcPortAutoRecoverPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortAutoRecoverPort.setStatus("current")


class _RcPortExtCplimitConf_Type(Integer32):
    """Custom type rcPortExtCplimitConf based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hardDown", 3),
          ("none", 1),
          ("softDown", 2))
    )


_RcPortExtCplimitConf_Type.__name__ = "Integer32"
_RcPortExtCplimitConf_Object = MibTableColumn
rcPortExtCplimitConf = _RcPortExtCplimitConf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 65),
    _RcPortExtCplimitConf_Type()
)
rcPortExtCplimitConf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortExtCplimitConf.setStatus("current")


class _RcPortExtCplimitUtilRate_Type(Integer32):
    """Custom type rcPortExtCplimitUtilRate based on Integer32"""
    defaultValue = 50

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPortExtCplimitUtilRate_Type.__name__ = "Integer32"
_RcPortExtCplimitUtilRate_Object = MibTableColumn
rcPortExtCplimitUtilRate = _RcPortExtCplimitUtilRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 66),
    _RcPortExtCplimitUtilRate_Type()
)
rcPortExtCplimitUtilRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortExtCplimitUtilRate.setStatus("current")


class _RcPortEgressRateLimit_Type(Integer32):
    """Custom type rcPortEgressRateLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 10000000),
    )


_RcPortEgressRateLimit_Type.__name__ = "Integer32"
_RcPortEgressRateLimit_Object = MibTableColumn
rcPortEgressRateLimit = _RcPortEgressRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 67),
    _RcPortEgressRateLimit_Type()
)
rcPortEgressRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortEgressRateLimit.setStatus("current")


class _RcPortEgressRateLimitState_Type(EnableValue):
    """Custom type rcPortEgressRateLimitState based on EnableValue"""


_RcPortEgressRateLimitState_Object = MibTableColumn
rcPortEgressRateLimitState = _RcPortEgressRateLimitState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 68),
    _RcPortEgressRateLimitState_Type()
)
rcPortEgressRateLimitState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortEgressRateLimitState.setStatus("current")


class _RcPortBpduFilteringTimerCount_Type(TimeInterval):
    """Custom type rcPortBpduFilteringTimerCount based on TimeInterval"""
    subtypeSpec = TimeInterval.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6553500),
    )


_RcPortBpduFilteringTimerCount_Type.__name__ = "TimeInterval"
_RcPortBpduFilteringTimerCount_Object = MibTableColumn
rcPortBpduFilteringTimerCount = _RcPortBpduFilteringTimerCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 69),
    _RcPortBpduFilteringTimerCount_Type()
)
rcPortBpduFilteringTimerCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortBpduFilteringTimerCount.setStatus("current")


class _RcPortBpduFilteringTimeout_Type(TimeInterval):
    """Custom type rcPortBpduFilteringTimeout based on TimeInterval"""
    subtypeSpec = TimeInterval.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6553500),
    )


_RcPortBpduFilteringTimeout_Type.__name__ = "TimeInterval"
_RcPortBpduFilteringTimeout_Object = MibTableColumn
rcPortBpduFilteringTimeout = _RcPortBpduFilteringTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 70),
    _RcPortBpduFilteringTimeout_Type()
)
rcPortBpduFilteringTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortBpduFilteringTimeout.setStatus("current")


class _RcPortBpduFilteringAdminEnabled_Type(TruthValue):
    """Custom type rcPortBpduFilteringAdminEnabled based on TruthValue"""


_RcPortBpduFilteringAdminEnabled_Object = MibTableColumn
rcPortBpduFilteringAdminEnabled = _RcPortBpduFilteringAdminEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 71),
    _RcPortBpduFilteringAdminEnabled_Type()
)
rcPortBpduFilteringAdminEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortBpduFilteringAdminEnabled.setStatus("current")
_RcPortBpduFilteringOperEnabled_Type = TruthValue
_RcPortBpduFilteringOperEnabled_Object = MibTableColumn
rcPortBpduFilteringOperEnabled = _RcPortBpduFilteringOperEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 72),
    _RcPortBpduFilteringOperEnabled_Type()
)
rcPortBpduFilteringOperEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortBpduFilteringOperEnabled.setStatus("current")


class _RcPortCpLimitEnable_Type(EnableValue):
    """Custom type rcPortCpLimitEnable based on EnableValue"""


_RcPortCpLimitEnable_Object = MibTableColumn
rcPortCpLimitEnable = _RcPortCpLimitEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 75),
    _RcPortCpLimitEnable_Type()
)
rcPortCpLimitEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortCpLimitEnable.setStatus("current")


class _RcPortCpMulticastLimit_Type(Integer32):
    """Custom type rcPortCpMulticastLimit based on Integer32"""
    defaultValue = 10000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 100000),
    )


_RcPortCpMulticastLimit_Type.__name__ = "Integer32"
_RcPortCpMulticastLimit_Object = MibTableColumn
rcPortCpMulticastLimit = _RcPortCpMulticastLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 76),
    _RcPortCpMulticastLimit_Type()
)
rcPortCpMulticastLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortCpMulticastLimit.setStatus("current")


class _RcPortCpBroadcastLimit_Type(Integer32):
    """Custom type rcPortCpBroadcastLimit based on Integer32"""
    defaultValue = 10000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 100000),
    )


_RcPortCpBroadcastLimit_Type.__name__ = "Integer32"
_RcPortCpBroadcastLimit_Object = MibTableColumn
rcPortCpBroadcastLimit = _RcPortCpBroadcastLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 77),
    _RcPortCpBroadcastLimit_Type()
)
rcPortCpBroadcastLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortCpBroadcastLimit.setStatus("current")


class _RcPortClockSource_Type(Integer32):
    """Custom type rcPortClockSource based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("internal", 2),
          ("line", 1),
          ("none", 0))
    )


_RcPortClockSource_Type.__name__ = "Integer32"
_RcPortClockSource_Object = MibTableColumn
rcPortClockSource = _RcPortClockSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 84),
    _RcPortClockSource_Type()
)
rcPortClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortClockSource.setStatus("current")


class _RcPortIngressRateLimit_Type(Integer32):
    """Custom type rcPortIngressRateLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 10000000),
    )


_RcPortIngressRateLimit_Type.__name__ = "Integer32"
_RcPortIngressRateLimit_Object = MibTableColumn
rcPortIngressRateLimit = _RcPortIngressRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 85),
    _RcPortIngressRateLimit_Type()
)
rcPortIngressRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortIngressRateLimit.setStatus("current")


class _RcPortIngressRateLimitState_Type(EnableValue):
    """Custom type rcPortIngressRateLimitState based on EnableValue"""


_RcPortIngressRateLimitState_Object = MibTableColumn
rcPortIngressRateLimitState = _RcPortIngressRateLimitState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 86),
    _RcPortIngressRateLimitState_Type()
)
rcPortIngressRateLimitState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortIngressRateLimitState.setStatus("current")


class _RcPortVrfIdList_Type(IdList):
    """Custom type rcPortVrfIdList based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_RcPortVrfIdList_Type.__name__ = "IdList"
_RcPortVrfIdList_Object = MibTableColumn
rcPortVrfIdList = _RcPortVrfIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 87),
    _RcPortVrfIdList_Type()
)
rcPortVrfIdList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVrfIdList.setStatus("current")
_RcPortVrfNameList_Type = OctetString
_RcPortVrfNameList_Object = MibTableColumn
rcPortVrfNameList = _RcPortVrfNameList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 96),
    _RcPortVrfNameList_Type()
)
rcPortVrfNameList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVrfNameList.setStatus("current")
_RcPortBrouterVrfId_Type = VrfIdentifier
_RcPortBrouterVrfId_Object = MibTableColumn
rcPortBrouterVrfId = _RcPortBrouterVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 97),
    _RcPortBrouterVrfId_Type()
)
rcPortBrouterVrfId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortBrouterVrfId.setStatus("current")


class _RcPortBrouterVrfName_Type(DisplayString):
    """Custom type rcPortBrouterVrfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcPortBrouterVrfName_Type.__name__ = "DisplayString"
_RcPortBrouterVrfName_Object = MibTableColumn
rcPortBrouterVrfName = _RcPortBrouterVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 98),
    _RcPortBrouterVrfName_Type()
)
rcPortBrouterVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortBrouterVrfName.setStatus("current")
_RcPortVrfCount_Type = Counter32
_RcPortVrfCount_Object = MibTableColumn
rcPortVrfCount = _RcPortVrfCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 1, 1, 99),
    _RcPortVrfCount_Type()
)
rcPortVrfCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVrfCount.setStatus("current")
_RcPortPcapTable_Object = MibTable
rcPortPcapTable = _RcPortPcapTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2)
)
if mibBuilder.loadTexts:
    rcPortPcapTable.setStatus("current")
_RcPortPcapEntry_Object = MibTableRow
rcPortPcapEntry = _RcPortPcapEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2, 1)
)
rcPortPcapEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPortPcapIndex"),
)
if mibBuilder.loadTexts:
    rcPortPcapEntry.setStatus("current")
_RcPortPcapIndex_Type = InterfaceIndex
_RcPortPcapIndex_Object = MibTableColumn
rcPortPcapIndex = _RcPortPcapIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2, 1, 1),
    _RcPortPcapIndex_Type()
)
rcPortPcapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortPcapIndex.setStatus("current")


class _RcPortPcapEnable_Type(TruthValue):
    """Custom type rcPortPcapEnable based on TruthValue"""


_RcPortPcapEnable_Object = MibTableColumn
rcPortPcapEnable = _RcPortPcapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2, 1, 2),
    _RcPortPcapEnable_Type()
)
rcPortPcapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortPcapEnable.setStatus("current")


class _RcPortPcapMode_Type(Integer32):
    """Custom type rcPortPcapMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("both", 3),
          ("bothFilter", 6),
          ("rx", 2),
          ("rxFilter", 4),
          ("tx", 1),
          ("txFilter", 5))
    )


_RcPortPcapMode_Type.__name__ = "Integer32"
_RcPortPcapMode_Object = MibTableColumn
rcPortPcapMode = _RcPortPcapMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2, 1, 3),
    _RcPortPcapMode_Type()
)
rcPortPcapMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortPcapMode.setStatus("current")


class _RcPortPcapFilterListSize_Type(Integer32):
    """Custom type rcPortPcapFilterListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcPortPcapFilterListSize_Type.__name__ = "Integer32"
_RcPortPcapFilterListSize_Object = MibTableColumn
rcPortPcapFilterListSize = _RcPortPcapFilterListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2, 1, 4),
    _RcPortPcapFilterListSize_Type()
)
rcPortPcapFilterListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortPcapFilterListSize.setStatus("current")


class _RcPortPcapFilterList_Type(OctetString):
    """Custom type rcPortPcapFilterList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcPortPcapFilterList_Type.__name__ = "OctetString"
_RcPortPcapFilterList_Object = MibTableColumn
rcPortPcapFilterList = _RcPortPcapFilterList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2, 1, 5),
    _RcPortPcapFilterList_Type()
)
rcPortPcapFilterList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortPcapFilterList.setStatus("current")


class _RcPortPcapAclFilterListSize_Type(Integer32):
    """Custom type rcPortPcapAclFilterListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcPortPcapAclFilterListSize_Type.__name__ = "Integer32"
_RcPortPcapAclFilterListSize_Object = MibTableColumn
rcPortPcapAclFilterListSize = _RcPortPcapAclFilterListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2, 1, 6),
    _RcPortPcapAclFilterListSize_Type()
)
rcPortPcapAclFilterListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortPcapAclFilterListSize.setStatus("current")


class _RcPortPcapAclFilterList_Type(OctetString):
    """Custom type rcPortPcapAclFilterList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcPortPcapAclFilterList_Type.__name__ = "OctetString"
_RcPortPcapAclFilterList_Object = MibTableColumn
rcPortPcapAclFilterList = _RcPortPcapAclFilterList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 2, 1, 7),
    _RcPortPcapAclFilterList_Type()
)
rcPortPcapAclFilterList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortPcapAclFilterList.setStatus("current")
_RcPortLacpTable_Object = MibTable
rcPortLacpTable = _RcPortLacpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4)
)
if mibBuilder.loadTexts:
    rcPortLacpTable.setStatus("current")
_RcPortLacpEntry_Object = MibTableRow
rcPortLacpEntry = _RcPortLacpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1)
)
rcPortLacpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPortIndex"),
)
if mibBuilder.loadTexts:
    rcPortLacpEntry.setStatus("current")


class _RcPortLacpAdminEnable_Type(TruthValue):
    """Custom type rcPortLacpAdminEnable based on TruthValue"""


_RcPortLacpAdminEnable_Object = MibTableColumn
rcPortLacpAdminEnable = _RcPortLacpAdminEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 1),
    _RcPortLacpAdminEnable_Type()
)
rcPortLacpAdminEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortLacpAdminEnable.setStatus("current")
_RcPortLacpOperEnable_Type = TruthValue
_RcPortLacpOperEnable_Object = MibTableColumn
rcPortLacpOperEnable = _RcPortLacpOperEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 2),
    _RcPortLacpOperEnable_Type()
)
rcPortLacpOperEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortLacpOperEnable.setStatus("current")


class _RcPortLacpFastPeriodicTime_Type(Integer32):
    """Custom type rcPortLacpFastPeriodicTime based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 20000),
    )


_RcPortLacpFastPeriodicTime_Type.__name__ = "Integer32"
_RcPortLacpFastPeriodicTime_Object = MibTableColumn
rcPortLacpFastPeriodicTime = _RcPortLacpFastPeriodicTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 3),
    _RcPortLacpFastPeriodicTime_Type()
)
rcPortLacpFastPeriodicTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortLacpFastPeriodicTime.setStatus("current")


class _RcPortLacpSlowPeriodicTime_Type(Integer32):
    """Custom type rcPortLacpSlowPeriodicTime based on Integer32"""
    defaultValue = 30000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10000, 30000),
    )


_RcPortLacpSlowPeriodicTime_Type.__name__ = "Integer32"
_RcPortLacpSlowPeriodicTime_Object = MibTableColumn
rcPortLacpSlowPeriodicTime = _RcPortLacpSlowPeriodicTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 4),
    _RcPortLacpSlowPeriodicTime_Type()
)
rcPortLacpSlowPeriodicTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortLacpSlowPeriodicTime.setStatus("current")


class _RcPortLacpTimeoutScale_Type(Integer32):
    """Custom type rcPortLacpTimeoutScale based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcPortLacpTimeoutScale_Type.__name__ = "Integer32"
_RcPortLacpTimeoutScale_Object = MibTableColumn
rcPortLacpTimeoutScale = _RcPortLacpTimeoutScale_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 5),
    _RcPortLacpTimeoutScale_Type()
)
rcPortLacpTimeoutScale.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortLacpTimeoutScale.setStatus("current")


class _RcPortLacpAggrWaitTime_Type(Integer32):
    """Custom type rcPortLacpAggrWaitTime based on Integer32"""
    defaultValue = 2000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 2000),
    )


_RcPortLacpAggrWaitTime_Type.__name__ = "Integer32"
_RcPortLacpAggrWaitTime_Object = MibTableColumn
rcPortLacpAggrWaitTime = _RcPortLacpAggrWaitTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 6),
    _RcPortLacpAggrWaitTime_Type()
)
rcPortLacpAggrWaitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortLacpAggrWaitTime.setStatus("current")


class _RcPortLacpFastPeriodicTimeOper_Type(Integer32):
    """Custom type rcPortLacpFastPeriodicTimeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 20000),
    )


_RcPortLacpFastPeriodicTimeOper_Type.__name__ = "Integer32"
_RcPortLacpFastPeriodicTimeOper_Object = MibTableColumn
rcPortLacpFastPeriodicTimeOper = _RcPortLacpFastPeriodicTimeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 7),
    _RcPortLacpFastPeriodicTimeOper_Type()
)
rcPortLacpFastPeriodicTimeOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortLacpFastPeriodicTimeOper.setStatus("current")


class _RcPortLacpSlowPeriodicTimeOper_Type(Integer32):
    """Custom type rcPortLacpSlowPeriodicTimeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10000, 30000),
    )


_RcPortLacpSlowPeriodicTimeOper_Type.__name__ = "Integer32"
_RcPortLacpSlowPeriodicTimeOper_Object = MibTableColumn
rcPortLacpSlowPeriodicTimeOper = _RcPortLacpSlowPeriodicTimeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 8),
    _RcPortLacpSlowPeriodicTimeOper_Type()
)
rcPortLacpSlowPeriodicTimeOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortLacpSlowPeriodicTimeOper.setStatus("current")


class _RcPortLacpTimeoutScaleOper_Type(Integer32):
    """Custom type rcPortLacpTimeoutScaleOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcPortLacpTimeoutScaleOper_Type.__name__ = "Integer32"
_RcPortLacpTimeoutScaleOper_Object = MibTableColumn
rcPortLacpTimeoutScaleOper = _RcPortLacpTimeoutScaleOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 9),
    _RcPortLacpTimeoutScaleOper_Type()
)
rcPortLacpTimeoutScaleOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortLacpTimeoutScaleOper.setStatus("current")


class _RcPortLacpAggrWaitTimeOper_Type(Integer32):
    """Custom type rcPortLacpAggrWaitTimeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 2000),
    )


_RcPortLacpAggrWaitTimeOper_Type.__name__ = "Integer32"
_RcPortLacpAggrWaitTimeOper_Object = MibTableColumn
rcPortLacpAggrWaitTimeOper = _RcPortLacpAggrWaitTimeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 4, 1, 10),
    _RcPortLacpAggrWaitTimeOper_Type()
)
rcPortLacpAggrWaitTimeOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortLacpAggrWaitTimeOper.setStatus("current")
_RcPortVLacpTable_Object = MibTable
rcPortVLacpTable = _RcPortVLacpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5)
)
if mibBuilder.loadTexts:
    rcPortVLacpTable.setStatus("current")
_RcPortVLacpEntry_Object = MibTableRow
rcPortVLacpEntry = _RcPortVLacpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1)
)
rcPortVLacpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPortIndex"),
)
if mibBuilder.loadTexts:
    rcPortVLacpEntry.setStatus("current")


class _RcPortVLacpAdminEnable_Type(TruthValue):
    """Custom type rcPortVLacpAdminEnable based on TruthValue"""


_RcPortVLacpAdminEnable_Object = MibTableColumn
rcPortVLacpAdminEnable = _RcPortVLacpAdminEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 1),
    _RcPortVLacpAdminEnable_Type()
)
rcPortVLacpAdminEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpAdminEnable.setStatus("current")
_RcPortVLacpOperEnable_Type = TruthValue
_RcPortVLacpOperEnable_Object = MibTableColumn
rcPortVLacpOperEnable = _RcPortVLacpOperEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 2),
    _RcPortVLacpOperEnable_Type()
)
rcPortVLacpOperEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVLacpOperEnable.setStatus("current")


class _RcPortVLacpFastPeriodicTimer_Type(Integer32):
    """Custom type rcPortVLacpFastPeriodicTimer based on Integer32"""
    defaultValue = 200

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 20000),
    )


_RcPortVLacpFastPeriodicTimer_Type.__name__ = "Integer32"
_RcPortVLacpFastPeriodicTimer_Object = MibTableColumn
rcPortVLacpFastPeriodicTimer = _RcPortVLacpFastPeriodicTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 3),
    _RcPortVLacpFastPeriodicTimer_Type()
)
rcPortVLacpFastPeriodicTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpFastPeriodicTimer.setStatus("current")


class _RcPortVLacpSlowPeriodicTimer_Type(Integer32):
    """Custom type rcPortVLacpSlowPeriodicTimer based on Integer32"""
    defaultValue = 30000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10000, 30000),
    )


_RcPortVLacpSlowPeriodicTimer_Type.__name__ = "Integer32"
_RcPortVLacpSlowPeriodicTimer_Object = MibTableColumn
rcPortVLacpSlowPeriodicTimer = _RcPortVLacpSlowPeriodicTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 4),
    _RcPortVLacpSlowPeriodicTimer_Type()
)
rcPortVLacpSlowPeriodicTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpSlowPeriodicTimer.setStatus("current")


class _RcPortVLacpTimeout_Type(Integer32):
    """Custom type rcPortVLacpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("long", 2),
          ("short", 1))
    )


_RcPortVLacpTimeout_Type.__name__ = "Integer32"
_RcPortVLacpTimeout_Object = MibTableColumn
rcPortVLacpTimeout = _RcPortVLacpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 5),
    _RcPortVLacpTimeout_Type()
)
rcPortVLacpTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpTimeout.setStatus("current")


class _RcPortVLacpTimeoutScale_Type(Integer32):
    """Custom type rcPortVLacpTimeoutScale based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcPortVLacpTimeoutScale_Type.__name__ = "Integer32"
_RcPortVLacpTimeoutScale_Object = MibTableColumn
rcPortVLacpTimeoutScale = _RcPortVLacpTimeoutScale_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 6),
    _RcPortVLacpTimeoutScale_Type()
)
rcPortVLacpTimeoutScale.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpTimeoutScale.setStatus("current")


class _RcPortVLacpEtherType_Type(Integer32):
    """Custom type rcPortVLacpEtherType based on Integer32"""
    defaultValue = 8103


_RcPortVLacpEtherType_Object = MibTableColumn
rcPortVLacpEtherType = _RcPortVLacpEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 7),
    _RcPortVLacpEtherType_Type()
)
rcPortVLacpEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpEtherType.setStatus("current")
_RcPortVLacpEtherMacAddress_Type = MacAddress
_RcPortVLacpEtherMacAddress_Object = MibTableColumn
rcPortVLacpEtherMacAddress = _RcPortVLacpEtherMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 8),
    _RcPortVLacpEtherMacAddress_Type()
)
rcPortVLacpEtherMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpEtherMacAddress.setStatus("current")


class _RcPortVLacpPortState_Type(Integer32):
    """Custom type rcPortVLacpPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcPortVLacpPortState_Type.__name__ = "Integer32"
_RcPortVLacpPortState_Object = MibTableColumn
rcPortVLacpPortState = _RcPortVLacpPortState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 9),
    _RcPortVLacpPortState_Type()
)
rcPortVLacpPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVLacpPortState.setStatus("current")


class _RcPortVLacpFlapDetectEnable_Type(TruthValue):
    """Custom type rcPortVLacpFlapDetectEnable based on TruthValue"""


_RcPortVLacpFlapDetectEnable_Object = MibTableColumn
rcPortVLacpFlapDetectEnable = _RcPortVLacpFlapDetectEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 11),
    _RcPortVLacpFlapDetectEnable_Type()
)
rcPortVLacpFlapDetectEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpFlapDetectEnable.setStatus("current")


class _RcPortVLacpFlapFrequency_Type(Integer32):
    """Custom type rcPortVLacpFlapFrequency based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 30),
    )


_RcPortVLacpFlapFrequency_Type.__name__ = "Integer32"
_RcPortVLacpFlapFrequency_Object = MibTableColumn
rcPortVLacpFlapFrequency = _RcPortVLacpFlapFrequency_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 12),
    _RcPortVLacpFlapFrequency_Type()
)
rcPortVLacpFlapFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpFlapFrequency.setStatus("current")


class _RcPortVLacpFlapInterval_Type(Integer32):
    """Custom type rcPortVLacpFlapInterval based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 600),
    )


_RcPortVLacpFlapInterval_Type.__name__ = "Integer32"
_RcPortVLacpFlapInterval_Object = MibTableColumn
rcPortVLacpFlapInterval = _RcPortVLacpFlapInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 13),
    _RcPortVLacpFlapInterval_Type()
)
rcPortVLacpFlapInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpFlapInterval.setStatus("current")
_RcPortVLacpTotalFlapCount_Type = Counter32
_RcPortVLacpTotalFlapCount_Object = MibTableColumn
rcPortVLacpTotalFlapCount = _RcPortVLacpTotalFlapCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 14),
    _RcPortVLacpTotalFlapCount_Type()
)
rcPortVLacpTotalFlapCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVLacpTotalFlapCount.setStatus("current")
_RcPortVLacpFirstFlapTimeStamp_Type = DateAndTime
_RcPortVLacpFirstFlapTimeStamp_Object = MibTableColumn
rcPortVLacpFirstFlapTimeStamp = _RcPortVLacpFirstFlapTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 15),
    _RcPortVLacpFirstFlapTimeStamp_Type()
)
rcPortVLacpFirstFlapTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVLacpFirstFlapTimeStamp.setStatus("current")
_RcPortVLacpLastFlapTimeStamp_Type = DateAndTime
_RcPortVLacpLastFlapTimeStamp_Object = MibTableColumn
rcPortVLacpLastFlapTimeStamp = _RcPortVLacpLastFlapTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 16),
    _RcPortVLacpLastFlapTimeStamp_Type()
)
rcPortVLacpLastFlapTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortVLacpLastFlapTimeStamp.setStatus("current")
_RcPortVLacpFlapClearStats_Type = TruthValue
_RcPortVLacpFlapClearStats_Object = MibTableColumn
rcPortVLacpFlapClearStats = _RcPortVLacpFlapClearStats_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 5, 1, 17),
    _RcPortVLacpFlapClearStats_Type()
)
rcPortVLacpFlapClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortVLacpFlapClearStats.setStatus("current")
_RcPortRemoteMirroringTable_Object = MibTable
rcPortRemoteMirroringTable = _RcPortRemoteMirroringTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6)
)
if mibBuilder.loadTexts:
    rcPortRemoteMirroringTable.setStatus("current")
_RcPortRemoteMirroringEntry_Object = MibTableRow
rcPortRemoteMirroringEntry = _RcPortRemoteMirroringEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1)
)
rcPortRemoteMirroringEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPortRemoteMirroringIndex"),
)
if mibBuilder.loadTexts:
    rcPortRemoteMirroringEntry.setStatus("current")
_RcPortRemoteMirroringIndex_Type = InterfaceIndex
_RcPortRemoteMirroringIndex_Object = MibTableColumn
rcPortRemoteMirroringIndex = _RcPortRemoteMirroringIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 1),
    _RcPortRemoteMirroringIndex_Type()
)
rcPortRemoteMirroringIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringIndex.setStatus("current")


class _RcPortRemoteMirroringEnable_Type(TruthValue):
    """Custom type rcPortRemoteMirroringEnable based on TruthValue"""


_RcPortRemoteMirroringEnable_Object = MibTableColumn
rcPortRemoteMirroringEnable = _RcPortRemoteMirroringEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 2),
    _RcPortRemoteMirroringEnable_Type()
)
rcPortRemoteMirroringEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringEnable.setStatus("current")


class _RcPortRemoteMirroringMode_Type(Integer32):
    """Custom type rcPortRemoteMirroringMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("source", 1),
          ("termination", 2))
    )


_RcPortRemoteMirroringMode_Type.__name__ = "Integer32"
_RcPortRemoteMirroringMode_Object = MibTableColumn
rcPortRemoteMirroringMode = _RcPortRemoteMirroringMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 3),
    _RcPortRemoteMirroringMode_Type()
)
rcPortRemoteMirroringMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringMode.setStatus("current")
_RcPortRemoteMirroringSrcMac_Type = MacAddress
_RcPortRemoteMirroringSrcMac_Object = MibTableColumn
rcPortRemoteMirroringSrcMac = _RcPortRemoteMirroringSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 4),
    _RcPortRemoteMirroringSrcMac_Type()
)
rcPortRemoteMirroringSrcMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringSrcMac.setStatus("current")
_RcPortRemoteMirroringDstMac_Type = MacAddress
_RcPortRemoteMirroringDstMac_Object = MibTableColumn
rcPortRemoteMirroringDstMac = _RcPortRemoteMirroringDstMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 5),
    _RcPortRemoteMirroringDstMac_Type()
)
rcPortRemoteMirroringDstMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringDstMac.setStatus("current")


class _RcPortRemoteMirroringEtherType_Type(Integer32):
    """Custom type rcPortRemoteMirroringEtherType based on Integer32"""
    defaultHexValue = 33027

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcPortRemoteMirroringEtherType_Type.__name__ = "Integer32"
_RcPortRemoteMirroringEtherType_Object = MibTableColumn
rcPortRemoteMirroringEtherType = _RcPortRemoteMirroringEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 6),
    _RcPortRemoteMirroringEtherType_Type()
)
rcPortRemoteMirroringEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringEtherType.setStatus("current")


class _RcPortRemoteMirroringVlanIdListSize_Type(Integer32):
    """Custom type rcPortRemoteMirroringVlanIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_RcPortRemoteMirroringVlanIdListSize_Type.__name__ = "Integer32"
_RcPortRemoteMirroringVlanIdListSize_Object = MibTableColumn
rcPortRemoteMirroringVlanIdListSize = _RcPortRemoteMirroringVlanIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 7),
    _RcPortRemoteMirroringVlanIdListSize_Type()
)
rcPortRemoteMirroringVlanIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringVlanIdListSize.setStatus("current")


class _RcPortRemoteMirroringVlanIdList_Type(OctetString):
    """Custom type rcPortRemoteMirroringVlanIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4096, 4096),
    )


_RcPortRemoteMirroringVlanIdList_Type.__name__ = "OctetString"
_RcPortRemoteMirroringVlanIdList_Object = MibTableColumn
rcPortRemoteMirroringVlanIdList = _RcPortRemoteMirroringVlanIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 8),
    _RcPortRemoteMirroringVlanIdList_Type()
)
rcPortRemoteMirroringVlanIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringVlanIdList.setStatus("current")
_RcPortRemoteMirroringRowStatus_Type = RowStatus
_RcPortRemoteMirroringRowStatus_Object = MibTableColumn
rcPortRemoteMirroringRowStatus = _RcPortRemoteMirroringRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 6, 1, 9),
    _RcPortRemoteMirroringRowStatus_Type()
)
rcPortRemoteMirroringRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortRemoteMirroringRowStatus.setStatus("current")
_RcPortMgmtLinkTable_Object = MibTable
rcPortMgmtLinkTable = _RcPortMgmtLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 8)
)
if mibBuilder.loadTexts:
    rcPortMgmtLinkTable.setStatus("current")
_RcPortMgmtLinkEntry_Object = MibTableRow
rcPortMgmtLinkEntry = _RcPortMgmtLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 8, 1)
)
rcPortMgmtLinkEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPortMgmtLinkIndex"),
)
if mibBuilder.loadTexts:
    rcPortMgmtLinkEntry.setStatus("current")
_RcPortMgmtLinkIndex_Type = InterfaceIndex
_RcPortMgmtLinkIndex_Object = MibTableColumn
rcPortMgmtLinkIndex = _RcPortMgmtLinkIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 8, 1, 1),
    _RcPortMgmtLinkIndex_Type()
)
rcPortMgmtLinkIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortMgmtLinkIndex.setStatus("current")


class _RcPortMgmtLinkDescr_Type(DisplayString):
    """Custom type rcPortMgmtLinkDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_RcPortMgmtLinkDescr_Type.__name__ = "DisplayString"
_RcPortMgmtLinkDescr_Object = MibTableColumn
rcPortMgmtLinkDescr = _RcPortMgmtLinkDescr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 8, 1, 2),
    _RcPortMgmtLinkDescr_Type()
)
rcPortMgmtLinkDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortMgmtLinkDescr.setStatus("current")


class _RcPortMgmtLinkOperStatus_Type(Integer32):
    """Custom type rcPortMgmtLinkOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_RcPortMgmtLinkOperStatus_Type.__name__ = "Integer32"
_RcPortMgmtLinkOperStatus_Object = MibTableColumn
rcPortMgmtLinkOperStatus = _RcPortMgmtLinkOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 8, 1, 3),
    _RcPortMgmtLinkOperStatus_Type()
)
rcPortMgmtLinkOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortMgmtLinkOperStatus.setStatus("current")
_RcPortMgmtLinkAutoNegotiate_Type = TruthValue
_RcPortMgmtLinkAutoNegotiate_Object = MibTableColumn
rcPortMgmtLinkAutoNegotiate = _RcPortMgmtLinkAutoNegotiate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 8, 1, 4),
    _RcPortMgmtLinkAutoNegotiate_Type()
)
rcPortMgmtLinkAutoNegotiate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortMgmtLinkAutoNegotiate.setStatus("current")


class _RcPortMgmtLinkDuplex_Type(Integer32):
    """Custom type rcPortMgmtLinkDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("full", 2),
          ("half", 1))
    )


_RcPortMgmtLinkDuplex_Type.__name__ = "Integer32"
_RcPortMgmtLinkDuplex_Object = MibTableColumn
rcPortMgmtLinkDuplex = _RcPortMgmtLinkDuplex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 8, 1, 5),
    _RcPortMgmtLinkDuplex_Type()
)
rcPortMgmtLinkDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortMgmtLinkDuplex.setStatus("current")


class _RcPortMgmtLinkSpeed_Type(Integer32):
    """Custom type rcPortMgmtLinkSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mbps10", 1),
          ("mbps100", 2),
          ("mbps1000", 3),
          ("none", 0))
    )


_RcPortMgmtLinkSpeed_Type.__name__ = "Integer32"
_RcPortMgmtLinkSpeed_Object = MibTableColumn
rcPortMgmtLinkSpeed = _RcPortMgmtLinkSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 8, 1, 6),
    _RcPortMgmtLinkSpeed_Type()
)
rcPortMgmtLinkSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPortMgmtLinkSpeed.setStatus("current")
_RcPortFlushMacTable_Object = MibTable
rcPortFlushMacTable = _RcPortFlushMacTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 11)
)
if mibBuilder.loadTexts:
    rcPortFlushMacTable.setStatus("current")
_RcPortFlushMacEntry_Object = MibTableRow
rcPortFlushMacEntry = _RcPortFlushMacEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 11, 1)
)
rcPortFlushMacEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPortFlushMacPortNum"),
)
if mibBuilder.loadTexts:
    rcPortFlushMacEntry.setStatus("current")


class _RcPortFlushMacPortNum_Type(Integer32):
    """Custom type rcPortFlushMacPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcPortFlushMacPortNum_Type.__name__ = "Integer32"
_RcPortFlushMacPortNum_Object = MibTableColumn
rcPortFlushMacPortNum = _RcPortFlushMacPortNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 11, 1, 1),
    _RcPortFlushMacPortNum_Type()
)
rcPortFlushMacPortNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcPortFlushMacPortNum.setStatus("current")


class _RcPortFlushMacAddr_Type(OctetString):
    """Custom type rcPortFlushMacAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RcPortFlushMacAddr_Type.__name__ = "OctetString"
_RcPortFlushMacAddr_Object = MibTableColumn
rcPortFlushMacAddr = _RcPortFlushMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 11, 1, 2),
    _RcPortFlushMacAddr_Type()
)
rcPortFlushMacAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortFlushMacAddr.setStatus("current")


class _RcPortFlushMacVlanId_Type(Integer32):
    """Custom type rcPortFlushMacVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcPortFlushMacVlanId_Type.__name__ = "Integer32"
_RcPortFlushMacVlanId_Object = MibTableColumn
rcPortFlushMacVlanId = _RcPortFlushMacVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 10, 11, 1, 3),
    _RcPortFlushMacVlanId_Type()
)
rcPortFlushMacVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortFlushMacVlanId.setStatus("current")
_RcPortLock_ObjectIdentity = ObjectIdentity
rcPortLock = _RcPortLock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 11)
)


class _RcPortLockEnable_Type(TruthValue):
    """Custom type rcPortLockEnable based on TruthValue"""


_RcPortLockEnable_Object = MibScalar
rcPortLockEnable = _RcPortLockEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 11, 1),
    _RcPortLockEnable_Type()
)
rcPortLockEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortLockEnable.setStatus("current")
_RcPortLockLockedPorts_Type = PortSet
_RcPortLockLockedPorts_Object = MibScalar
rcPortLockLockedPorts = _RcPortLockLockedPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 11, 2),
    _RcPortLockLockedPorts_Type()
)
rcPortLockLockedPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPortLockLockedPorts.setStatus("current")


class _RcChasAruMode_Type(Integer32):
    """Custom type rcChasAruMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aruOne", 1),
          ("aruThree", 3),
          ("aruTwo", 2))
    )


_RcChasAruMode_Type.__name__ = "Integer32"
_RcChasAruMode_Object = MibScalar
rcChasAruMode = _RcChasAruMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 12),
    _RcChasAruMode_Type()
)
rcChasAruMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasAruMode.setStatus("current")


class _RcChasQuidMode_Type(Integer32):
    """Custom type rcChasQuidMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("quidFive", 5),
          ("quidFour", 4),
          ("quidMixed", 1),
          ("quidThree", 3),
          ("quidTwo", 2))
    )


_RcChasQuidMode_Type.__name__ = "Integer32"
_RcChasQuidMode_Object = MibScalar
rcChasQuidMode = _RcChasQuidMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 13),
    _RcChasQuidMode_Type()
)
rcChasQuidMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasQuidMode.setStatus("current")


class _RcChasEocModeAdminStatus_Type(Integer32):
    """Custom type rcChasEocModeAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("aru1Quid4", 1),
          ("aru2Quid4", 2),
          ("aru2Quid5", 3),
          ("aru3Quid4", 4),
          ("aru3Quid5", 5),
          ("default", 0))
    )


_RcChasEocModeAdminStatus_Type.__name__ = "Integer32"
_RcChasEocModeAdminStatus_Object = MibScalar
rcChasEocModeAdminStatus = _RcChasEocModeAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 14),
    _RcChasEocModeAdminStatus_Type()
)
rcChasEocModeAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasEocModeAdminStatus.setStatus("current")


class _RcChasEocModeOperStatus_Type(Integer32):
    """Custom type rcChasEocModeOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("aru1Quid4", 1),
          ("aru2Quid4", 2),
          ("aru2Quid5", 3),
          ("aru3Quid4", 4),
          ("aru3Quid5", 5),
          ("default", 0))
    )


_RcChasEocModeOperStatus_Type.__name__ = "Integer32"
_RcChasEocModeOperStatus_Object = MibScalar
rcChasEocModeOperStatus = _RcChasEocModeOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 15),
    _RcChasEocModeOperStatus_Type()
)
rcChasEocModeOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasEocModeOperStatus.setStatus("current")
_RcAgentTable_Object = MibTable
rcAgentTable = _RcAgentTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 16)
)
if mibBuilder.loadTexts:
    rcAgentTable.setStatus("current")
_RcAgentEntry_Object = MibTableRow
rcAgentEntry = _RcAgentEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 16, 1)
)
rcAgentEntry.setIndexNames(
    (0, "RAPID-CITY", "rcAgentId"),
)
if mibBuilder.loadTexts:
    rcAgentEntry.setStatus("current")


class _RcAgentId_Type(Integer32):
    """Custom type rcAgentId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcAgentId_Type.__name__ = "Integer32"
_RcAgentId_Object = MibTableColumn
rcAgentId = _RcAgentId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 16, 1, 1),
    _RcAgentId_Type()
)
rcAgentId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcAgentId.setStatus("current")
_RcAgentSlot_Type = Integer32
_RcAgentSlot_Object = MibTableColumn
rcAgentSlot = _RcAgentSlot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 16, 1, 2),
    _RcAgentSlot_Type()
)
rcAgentSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcAgentSlot.setStatus("current")
_RcAgentIpAddr_Type = IpAddress
_RcAgentIpAddr_Object = MibTableColumn
rcAgentIpAddr = _RcAgentIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 16, 1, 3),
    _RcAgentIpAddr_Type()
)
rcAgentIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcAgentIpAddr.setStatus("current")
_RcChasBrouterPorts_Type = PortSet
_RcChasBrouterPorts_Object = MibScalar
rcChasBrouterPorts = _RcChasBrouterPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 17),
    _RcChasBrouterPorts_Type()
)
rcChasBrouterPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasBrouterPorts.setStatus("current")


class _RcChasGlobalFilterEnable_Type(TruthValue):
    """Custom type rcChasGlobalFilterEnable based on TruthValue"""


_RcChasGlobalFilterEnable_Object = MibScalar
rcChasGlobalFilterEnable = _RcChasGlobalFilterEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 18),
    _RcChasGlobalFilterEnable_Type()
)
rcChasGlobalFilterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasGlobalFilterEnable.setStatus("current")


class _RcChasVlanBySrcMacEnable_Type(TruthValue):
    """Custom type rcChasVlanBySrcMacEnable based on TruthValue"""


_RcChasVlanBySrcMacEnable_Object = MibScalar
rcChasVlanBySrcMacEnable = _RcChasVlanBySrcMacEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 19),
    _RcChasVlanBySrcMacEnable_Type()
)
rcChasVlanBySrcMacEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasVlanBySrcMacEnable.setStatus("current")


class _RcChasDiffServEcnCompatibilityEnable_Type(TruthValue):
    """Custom type rcChasDiffServEcnCompatibilityEnable based on TruthValue"""


_RcChasDiffServEcnCompatibilityEnable_Object = MibScalar
rcChasDiffServEcnCompatibilityEnable = _RcChasDiffServEcnCompatibilityEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 20),
    _RcChasDiffServEcnCompatibilityEnable_Type()
)
rcChasDiffServEcnCompatibilityEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasDiffServEcnCompatibilityEnable.setStatus("current")
_RcChasNewEnhancedOperMode_Type = TruthValue
_RcChasNewEnhancedOperMode_Object = MibScalar
rcChasNewEnhancedOperMode = _RcChasNewEnhancedOperMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 21),
    _RcChasNewEnhancedOperMode_Type()
)
rcChasNewEnhancedOperMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasNewEnhancedOperMode.setStatus("current")
_RcChasNewEMMode_Type = TruthValue
_RcChasNewEMMode_Object = MibScalar
rcChasNewEMMode = _RcChasNewEMMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 22),
    _RcChasNewEMMode_Type()
)
rcChasNewEMMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasNewEMMode.setStatus("current")


class _RcChasEmModeError_Type(Integer32):
    """Custom type rcChasEmModeError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("checkSlaveConfigNResetForEmMMode", 3),
          ("cpu8690DisableEm", 9),
          ("incompatMasterResetForEmMode", 6),
          ("mismatchEmModeMasterSlave", 5),
          ("mismatchResetForEmMode", 4),
          ("non128KCardOffLine", 2),
          ("none", 1),
          ("putSlaveOffEmImcompat", 7),
          ("slave8690EmIncompatGoingOffline", 8))
    )


_RcChasEmModeError_Type.__name__ = "Integer32"
_RcChasEmModeError_Object = MibScalar
rcChasEmModeError = _RcChasEmModeError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 23),
    _RcChasEmModeError_Type()
)
rcChasEmModeError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasEmModeError.setStatus("current")
_RcChasEnhancedOperMode_Type = TruthValue
_RcChasEnhancedOperMode_Object = MibScalar
rcChasEnhancedOperMode = _RcChasEnhancedOperMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 24),
    _RcChasEnhancedOperMode_Type()
)
rcChasEnhancedOperMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasEnhancedOperMode.setStatus("current")
_RcChasEMMode_Type = TruthValue
_RcChasEMMode_Object = MibScalar
rcChasEMMode = _RcChasEMMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 25),
    _RcChasEMMode_Type()
)
rcChasEMMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasEMMode.setStatus("current")


class _RcChasFtpDaemonInSecondaryCpu_Type(TruthValue):
    """Custom type rcChasFtpDaemonInSecondaryCpu based on TruthValue"""


_RcChasFtpDaemonInSecondaryCpu_Object = MibScalar
rcChasFtpDaemonInSecondaryCpu = _RcChasFtpDaemonInSecondaryCpu_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 26),
    _RcChasFtpDaemonInSecondaryCpu_Type()
)
rcChasFtpDaemonInSecondaryCpu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasFtpDaemonInSecondaryCpu.setStatus("current")
_RcChasSmltOnSingleCpEnable_Type = TruthValue
_RcChasSmltOnSingleCpEnable_Object = MibScalar
rcChasSmltOnSingleCpEnable = _RcChasSmltOnSingleCpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 27),
    _RcChasSmltOnSingleCpEnable_Type()
)
rcChasSmltOnSingleCpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasSmltOnSingleCpEnable.setStatus("deprecated")
_RcChasNewVlanOptmMode_Type = TruthValue
_RcChasNewVlanOptmMode_Object = MibScalar
rcChasNewVlanOptmMode = _RcChasNewVlanOptmMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 28),
    _RcChasNewVlanOptmMode_Type()
)
rcChasNewVlanOptmMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasNewVlanOptmMode.setStatus("current")
_RcChasVlanOptmMode_Type = TruthValue
_RcChasVlanOptmMode_Object = MibScalar
rcChasVlanOptmMode = _RcChasVlanOptmMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 29),
    _RcChasVlanOptmMode_Type()
)
rcChasVlanOptmMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasVlanOptmMode.setStatus("current")
_RcLaunchPad_ObjectIdentity = ObjectIdentity
rcLaunchPad = _RcLaunchPad_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30)
)
_RcLaunchPadTable_Object = MibTable
rcLaunchPadTable = _RcLaunchPadTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1)
)
if mibBuilder.loadTexts:
    rcLaunchPadTable.setStatus("current")
_RcLaunchPadEntry_Object = MibTableRow
rcLaunchPadEntry = _RcLaunchPadEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1, 1)
)
rcLaunchPadEntry.setIndexNames(
    (0, "RAPID-CITY", "rcLaunchPadSlotId"),
    (0, "RAPID-CITY", "rcLaunchPadMiniSlotId"),
)
if mibBuilder.loadTexts:
    rcLaunchPadEntry.setStatus("current")


class _RcLaunchPadSlotId_Type(Integer32):
    """Custom type rcLaunchPadSlotId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcLaunchPadSlotId_Type.__name__ = "Integer32"
_RcLaunchPadSlotId_Object = MibTableColumn
rcLaunchPadSlotId = _RcLaunchPadSlotId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1, 1, 1),
    _RcLaunchPadSlotId_Type()
)
rcLaunchPadSlotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLaunchPadSlotId.setStatus("current")


class _RcLaunchPadMiniSlotId_Type(Integer32):
    """Custom type rcLaunchPadMiniSlotId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcLaunchPadMiniSlotId_Type.__name__ = "Integer32"
_RcLaunchPadMiniSlotId_Object = MibTableColumn
rcLaunchPadMiniSlotId = _RcLaunchPadMiniSlotId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1, 1, 2),
    _RcLaunchPadMiniSlotId_Type()
)
rcLaunchPadMiniSlotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLaunchPadMiniSlotId.setStatus("current")


class _RcLaunchPadAppType_Type(Integer32):
    """Custom type rcLaunchPadAppType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("firewall", 2),
          ("ids", 4),
          ("none", 1),
          ("ssl", 3),
          ("tps", 6),
          ("vpn", 5))
    )


_RcLaunchPadAppType_Type.__name__ = "Integer32"
_RcLaunchPadAppType_Object = MibTableColumn
rcLaunchPadAppType = _RcLaunchPadAppType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1, 1, 3),
    _RcLaunchPadAppType_Type()
)
rcLaunchPadAppType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLaunchPadAppType.setStatus("current")
_RcLaunchPadMiniSlotIp_Type = IpAddress
_RcLaunchPadMiniSlotIp_Object = MibTableColumn
rcLaunchPadMiniSlotIp = _RcLaunchPadMiniSlotIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1, 1, 4),
    _RcLaunchPadMiniSlotIp_Type()
)
rcLaunchPadMiniSlotIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLaunchPadMiniSlotIp.setStatus("current")
_RcLaunchPadNaapLpState_Type = EnableValue
_RcLaunchPadNaapLpState_Object = MibTableColumn
rcLaunchPadNaapLpState = _RcLaunchPadNaapLpState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1, 1, 5),
    _RcLaunchPadNaapLpState_Type()
)
rcLaunchPadNaapLpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadNaapLpState.setStatus("current")
_RcLaunchPadMiniSlotSwVersion_Type = DisplayString
_RcLaunchPadMiniSlotSwVersion_Object = MibTableColumn
rcLaunchPadMiniSlotSwVersion = _RcLaunchPadMiniSlotSwVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1, 1, 6),
    _RcLaunchPadMiniSlotSwVersion_Type()
)
rcLaunchPadMiniSlotSwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLaunchPadMiniSlotSwVersion.setStatus("current")


class _RcLaunchPadHWType_Type(Integer32):
    """Custom type rcLaunchPadHWType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fw", 1),
          ("none", 3),
          ("tps", 2))
    )


_RcLaunchPadHWType_Type.__name__ = "Integer32"
_RcLaunchPadHWType_Object = MibTableColumn
rcLaunchPadHWType = _RcLaunchPadHWType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 1, 1, 7),
    _RcLaunchPadHWType_Type()
)
rcLaunchPadHWType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLaunchPadHWType.setStatus("current")
_RcLaunchPadClusterTable_Object = MibTable
rcLaunchPadClusterTable = _RcLaunchPadClusterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2)
)
if mibBuilder.loadTexts:
    rcLaunchPadClusterTable.setStatus("current")
_RcLaunchPadClusterEntry_Object = MibTableRow
rcLaunchPadClusterEntry = _RcLaunchPadClusterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1)
)
rcLaunchPadClusterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcLaunchPadClusterId"),
)
if mibBuilder.loadTexts:
    rcLaunchPadClusterEntry.setStatus("current")


class _RcLaunchPadClusterId_Type(Integer32):
    """Custom type rcLaunchPadClusterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_RcLaunchPadClusterId_Type.__name__ = "Integer32"
_RcLaunchPadClusterId_Object = MibTableColumn
rcLaunchPadClusterId = _RcLaunchPadClusterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 1),
    _RcLaunchPadClusterId_Type()
)
rcLaunchPadClusterId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcLaunchPadClusterId.setStatus("current")


class _RcLaunchPadClusterType_Type(Integer32):
    """Custom type rcLaunchPadClusterType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("firewall", 1),
          ("is", 3),
          ("ssl", 2),
          ("vpn", 4))
    )


_RcLaunchPadClusterType_Type.__name__ = "Integer32"
_RcLaunchPadClusterType_Object = MibTableColumn
rcLaunchPadClusterType = _RcLaunchPadClusterType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 2),
    _RcLaunchPadClusterType_Type()
)
rcLaunchPadClusterType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterType.setStatus("current")


class _RcLaunchPadClusterSize_Type(Integer32):
    """Custom type rcLaunchPadClusterSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RcLaunchPadClusterSize_Type.__name__ = "Integer32"
_RcLaunchPadClusterSize_Object = MibTableColumn
rcLaunchPadClusterSize = _RcLaunchPadClusterSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 3),
    _RcLaunchPadClusterSize_Type()
)
rcLaunchPadClusterSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterSize.setStatus("current")


class _RcLaunchPadClusterMembers_Type(OctetString):
    """Custom type rcLaunchPadClusterMembers based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcLaunchPadClusterMembers_Type.__name__ = "OctetString"
_RcLaunchPadClusterMembers_Object = MibTableColumn
rcLaunchPadClusterMembers = _RcLaunchPadClusterMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 4),
    _RcLaunchPadClusterMembers_Type()
)
rcLaunchPadClusterMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterMembers.setStatus("current")
_RcLaunchPadClusterRowStatus_Type = RowStatus
_RcLaunchPadClusterRowStatus_Object = MibTableColumn
rcLaunchPadClusterRowStatus = _RcLaunchPadClusterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 5),
    _RcLaunchPadClusterRowStatus_Type()
)
rcLaunchPadClusterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterRowStatus.setStatus("current")


class _RcLaunchPadClusterMgmtVlan_Type(Integer32):
    """Custom type rcLaunchPadClusterMgmtVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_RcLaunchPadClusterMgmtVlan_Type.__name__ = "Integer32"
_RcLaunchPadClusterMgmtVlan_Object = MibTableColumn
rcLaunchPadClusterMgmtVlan = _RcLaunchPadClusterMgmtVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 6),
    _RcLaunchPadClusterMgmtVlan_Type()
)
rcLaunchPadClusterMgmtVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterMgmtVlan.setStatus("current")


class _RcLaunchPadClusterSyncVlan_Type(Integer32):
    """Custom type rcLaunchPadClusterSyncVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_RcLaunchPadClusterSyncVlan_Type.__name__ = "Integer32"
_RcLaunchPadClusterSyncVlan_Object = MibTableColumn
rcLaunchPadClusterSyncVlan = _RcLaunchPadClusterSyncVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 7),
    _RcLaunchPadClusterSyncVlan_Type()
)
rcLaunchPadClusterSyncVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterSyncVlan.setStatus("current")


class _RcLaunchPadClusterTpsSize_Type(Integer32):
    """Custom type rcLaunchPadClusterTpsSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_RcLaunchPadClusterTpsSize_Type.__name__ = "Integer32"
_RcLaunchPadClusterTpsSize_Object = MibTableColumn
rcLaunchPadClusterTpsSize = _RcLaunchPadClusterTpsSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 8),
    _RcLaunchPadClusterTpsSize_Type()
)
rcLaunchPadClusterTpsSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterTpsSize.setStatus("current")


class _RcLaunchPadClusterTpsMembers_Type(OctetString):
    """Custom type rcLaunchPadClusterTpsMembers based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcLaunchPadClusterTpsMembers_Type.__name__ = "OctetString"
_RcLaunchPadClusterTpsMembers_Object = MibTableColumn
rcLaunchPadClusterTpsMembers = _RcLaunchPadClusterTpsMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 9),
    _RcLaunchPadClusterTpsMembers_Type()
)
rcLaunchPadClusterTpsMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterTpsMembers.setStatus("current")
_RcLaunchPadClusterPortMember_Type = PortSet
_RcLaunchPadClusterPortMember_Object = MibTableColumn
rcLaunchPadClusterPortMember = _RcLaunchPadClusterPortMember_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 30, 2, 1, 10),
    _RcLaunchPadClusterPortMember_Type()
)
rcLaunchPadClusterPortMember.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLaunchPadClusterPortMember.setStatus("current")
_RcChasNaapEnable_Type = EnableValue
_RcChasNaapEnable_Object = MibScalar
rcChasNaapEnable = _RcChasNaapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 31),
    _RcChasNaapEnable_Type()
)
rcChasNaapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasNaapEnable.setStatus("current")


class _RcChasGlobalFilterOrderingEnable_Type(TruthValue):
    """Custom type rcChasGlobalFilterOrderingEnable based on TruthValue"""


_RcChasGlobalFilterOrderingEnable_Object = MibScalar
rcChasGlobalFilterOrderingEnable = _RcChasGlobalFilterOrderingEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 32),
    _RcChasGlobalFilterOrderingEnable_Type()
)
rcChasGlobalFilterOrderingEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasGlobalFilterOrderingEnable.setStatus("current")


class _RcChasNewGlobalFilterOrderingEnable_Type(TruthValue):
    """Custom type rcChasNewGlobalFilterOrderingEnable based on TruthValue"""


_RcChasNewGlobalFilterOrderingEnable_Object = MibScalar
rcChasNewGlobalFilterOrderingEnable = _RcChasNewGlobalFilterOrderingEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 33),
    _RcChasNewGlobalFilterOrderingEnable_Type()
)
rcChasNewGlobalFilterOrderingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasNewGlobalFilterOrderingEnable.setStatus("current")


class _RcChasWsmDirectMode_Type(TruthValue):
    """Custom type rcChasWsmDirectMode based on TruthValue"""


_RcChasWsmDirectMode_Object = MibScalar
rcChasWsmDirectMode = _RcChasWsmDirectMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 34),
    _RcChasWsmDirectMode_Type()
)
rcChasWsmDirectMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasWsmDirectMode.setStatus("current")
_RcChasRspMode_Type = TruthValue
_RcChasRspMode_Object = MibScalar
rcChasRspMode = _RcChasRspMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 35),
    _RcChasRspMode_Type()
)
rcChasRspMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasRspMode.setStatus("current")
_RcChasRspOperMode_Type = TruthValue
_RcChasRspOperMode_Object = MibScalar
rcChasRspOperMode = _RcChasRspOperMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 36),
    _RcChasRspOperMode_Type()
)
rcChasRspOperMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasRspOperMode.setStatus("current")


class _RcChasRspModeError_Type(Integer32):
    """Custom type rcChasRspModeError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("non256KCardOffLine", 2),
          ("none", 1))
    )


_RcChasRspModeError_Type.__name__ = "Integer32"
_RcChasRspModeError_Object = MibScalar
rcChasRspModeError = _RcChasRspModeError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 37),
    _RcChasRspModeError_Type()
)
rcChasRspModeError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasRspModeError.setStatus("current")


class _RcChasMcastCheckPktEnable_Type(TruthValue):
    """Custom type rcChasMcastCheckPktEnable based on TruthValue"""


_RcChasMcastCheckPktEnable_Object = MibScalar
rcChasMcastCheckPktEnable = _RcChasMcastCheckPktEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 40),
    _RcChasMcastCheckPktEnable_Type()
)
rcChasMcastCheckPktEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasMcastCheckPktEnable.setStatus("current")


class _RcChasSystemMonitorEnable_Type(TruthValue):
    """Custom type rcChasSystemMonitorEnable based on TruthValue"""


_RcChasSystemMonitorEnable_Object = MibScalar
rcChasSystemMonitorEnable = _RcChasSystemMonitorEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 41),
    _RcChasSystemMonitorEnable_Type()
)
rcChasSystemMonitorEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasSystemMonitorEnable.setStatus("current")


class _RcChasSysMonMonitoringEnable_Type(TruthValue):
    """Custom type rcChasSysMonMonitoringEnable based on TruthValue"""


_RcChasSysMonMonitoringEnable_Object = MibScalar
rcChasSysMonMonitoringEnable = _RcChasSysMonMonitoringEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 42),
    _RcChasSysMonMonitoringEnable_Type()
)
rcChasSysMonMonitoringEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasSysMonMonitoringEnable.setStatus("current")


class _RcChasSysMonDetectionTime_Type(Integer32):
    """Custom type rcChasSysMonDetectionTime based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 600),
    )


_RcChasSysMonDetectionTime_Type.__name__ = "Integer32"
_RcChasSysMonDetectionTime_Object = MibScalar
rcChasSysMonDetectionTime = _RcChasSysMonDetectionTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 43),
    _RcChasSysMonDetectionTime_Type()
)
rcChasSysMonDetectionTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasSysMonDetectionTime.setStatus("current")


class _RcChasNewMulticastResourceReservation_Type(Integer32):
    """Custom type rcChasNewMulticastResourceReservation based on Integer32"""
    defaultValue = 2048

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 4083),
    )


_RcChasNewMulticastResourceReservation_Type.__name__ = "Integer32"
_RcChasNewMulticastResourceReservation_Object = MibScalar
rcChasNewMulticastResourceReservation = _RcChasNewMulticastResourceReservation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 44),
    _RcChasNewMulticastResourceReservation_Type()
)
rcChasNewMulticastResourceReservation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasNewMulticastResourceReservation.setStatus("current")


class _RcChasMulticastResourceReservation_Type(Integer32):
    """Custom type rcChasMulticastResourceReservation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 4083),
    )


_RcChasMulticastResourceReservation_Type.__name__ = "Integer32"
_RcChasMulticastResourceReservation_Object = MibScalar
rcChasMulticastResourceReservation = _RcChasMulticastResourceReservation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 45),
    _RcChasMulticastResourceReservation_Type()
)
rcChasMulticastResourceReservation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasMulticastResourceReservation.setStatus("current")


class _RcChasNewMaxVlanResourceReservation_Type(EnableValue):
    """Custom type rcChasNewMaxVlanResourceReservation based on EnableValue"""


_RcChasNewMaxVlanResourceReservation_Object = MibScalar
rcChasNewMaxVlanResourceReservation = _RcChasNewMaxVlanResourceReservation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 46),
    _RcChasNewMaxVlanResourceReservation_Type()
)
rcChasNewMaxVlanResourceReservation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasNewMaxVlanResourceReservation.setStatus("current")
_RcChasMaxVlanResourceReservation_Type = EnableValue
_RcChasMaxVlanResourceReservation_Object = MibScalar
rcChasMaxVlanResourceReservation = _RcChasMaxVlanResourceReservation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 47),
    _RcChasMaxVlanResourceReservation_Type()
)
rcChasMaxVlanResourceReservation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasMaxVlanResourceReservation.setStatus("current")


class _RcChasMgidUsageVlanCurrent_Type(Integer32):
    """Custom type rcChasMgidUsageVlanCurrent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4084),
    )


_RcChasMgidUsageVlanCurrent_Type.__name__ = "Integer32"
_RcChasMgidUsageVlanCurrent_Object = MibScalar
rcChasMgidUsageVlanCurrent = _RcChasMgidUsageVlanCurrent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 48),
    _RcChasMgidUsageVlanCurrent_Type()
)
rcChasMgidUsageVlanCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasMgidUsageVlanCurrent.setStatus("current")


class _RcChasMgidUsageVlanRemaining_Type(Integer32):
    """Custom type rcChasMgidUsageVlanRemaining based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4084),
    )


_RcChasMgidUsageVlanRemaining_Type.__name__ = "Integer32"
_RcChasMgidUsageVlanRemaining_Object = MibScalar
rcChasMgidUsageVlanRemaining = _RcChasMgidUsageVlanRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 49),
    _RcChasMgidUsageVlanRemaining_Type()
)
rcChasMgidUsageVlanRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasMgidUsageVlanRemaining.setStatus("current")


class _RcChasMgidUsageMulticastCurrent_Type(Integer32):
    """Custom type rcChasMgidUsageMulticastCurrent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4083),
    )


_RcChasMgidUsageMulticastCurrent_Type.__name__ = "Integer32"
_RcChasMgidUsageMulticastCurrent_Object = MibScalar
rcChasMgidUsageMulticastCurrent = _RcChasMgidUsageMulticastCurrent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 50),
    _RcChasMgidUsageMulticastCurrent_Type()
)
rcChasMgidUsageMulticastCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasMgidUsageMulticastCurrent.setStatus("current")


class _RcChasMgidUsageMulticastRemaining_Type(Integer32):
    """Custom type rcChasMgidUsageMulticastRemaining based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4083),
    )


_RcChasMgidUsageMulticastRemaining_Type.__name__ = "Integer32"
_RcChasMgidUsageMulticastRemaining_Object = MibScalar
rcChasMgidUsageMulticastRemaining = _RcChasMgidUsageMulticastRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 51),
    _RcChasMgidUsageMulticastRemaining_Type()
)
rcChasMgidUsageMulticastRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasMgidUsageMulticastRemaining.setStatus("current")


class _RcChasPowerManagementEnable_Type(TruthValue):
    """Custom type rcChasPowerManagementEnable based on TruthValue"""


_RcChasPowerManagementEnable_Object = MibScalar
rcChasPowerManagementEnable = _RcChasPowerManagementEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 52),
    _RcChasPowerManagementEnable_Type()
)
rcChasPowerManagementEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasPowerManagementEnable.setStatus("current")


class _RcChasForceTopologyIpFlagEnable_Type(TruthValue):
    """Custom type rcChasForceTopologyIpFlagEnable based on TruthValue"""


_RcChasForceTopologyIpFlagEnable_Object = MibScalar
rcChasForceTopologyIpFlagEnable = _RcChasForceTopologyIpFlagEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 53),
    _RcChasForceTopologyIpFlagEnable_Type()
)
rcChasForceTopologyIpFlagEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasForceTopologyIpFlagEnable.setStatus("current")


class _RcChasCircuitlessIpId_Type(Integer32):
    """Custom type rcChasCircuitlessIpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_RcChasCircuitlessIpId_Type.__name__ = "Integer32"
_RcChasCircuitlessIpId_Object = MibScalar
rcChasCircuitlessIpId = _RcChasCircuitlessIpId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 54),
    _RcChasCircuitlessIpId_Type()
)
rcChasCircuitlessIpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasCircuitlessIpId.setStatus("current")


class _RcChasPowerManagementOriginalEnable_Type(TruthValue):
    """Custom type rcChasPowerManagementOriginalEnable based on TruthValue"""


_RcChasPowerManagementOriginalEnable_Object = MibScalar
rcChasPowerManagementOriginalEnable = _RcChasPowerManagementOriginalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 55),
    _RcChasPowerManagementOriginalEnable_Type()
)
rcChasPowerManagementOriginalEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerManagementOriginalEnable.setStatus("current")


class _RcChasPowerManagementFanCheck_Type(TruthValue):
    """Custom type rcChasPowerManagementFanCheck based on TruthValue"""


_RcChasPowerManagementFanCheck_Object = MibScalar
rcChasPowerManagementFanCheck = _RcChasPowerManagementFanCheck_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 56),
    _RcChasPowerManagementFanCheck_Type()
)
rcChasPowerManagementFanCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasPowerManagementFanCheck.setStatus("current")


class _RcChasPowerManagementFanCheckOriginalState_Type(TruthValue):
    """Custom type rcChasPowerManagementFanCheckOriginalState based on TruthValue"""


_RcChasPowerManagementFanCheckOriginalState_Object = MibScalar
rcChasPowerManagementFanCheckOriginalState = _RcChasPowerManagementFanCheckOriginalState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 57),
    _RcChasPowerManagementFanCheckOriginalState_Type()
)
rcChasPowerManagementFanCheckOriginalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcChasPowerManagementFanCheckOriginalState.setStatus("current")


class _RcChasTakeIOCardOfflineEnable_Type(TruthValue):
    """Custom type rcChasTakeIOCardOfflineEnable based on TruthValue"""


_RcChasTakeIOCardOfflineEnable_Object = MibScalar
rcChasTakeIOCardOfflineEnable = _RcChasTakeIOCardOfflineEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 61),
    _RcChasTakeIOCardOfflineEnable_Type()
)
rcChasTakeIOCardOfflineEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasTakeIOCardOfflineEnable.setStatus("current")


class _RcChasAutoResetFabricEnable_Type(TruthValue):
    """Custom type rcChasAutoResetFabricEnable based on TruthValue"""


_RcChasAutoResetFabricEnable_Object = MibScalar
rcChasAutoResetFabricEnable = _RcChasAutoResetFabricEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 4, 62),
    _RcChasAutoResetFabricEnable_Type()
)
rcChasAutoResetFabricEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcChasAutoResetFabricEnable.setStatus("current")
_RcMirror_ObjectIdentity = ObjectIdentity
rcMirror = _RcMirror_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5)
)
_RcMirrorSaveConfig_Type = TruthValue
_RcMirrorSaveConfig_Object = MibScalar
rcMirrorSaveConfig = _RcMirrorSaveConfig_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5, 1),
    _RcMirrorSaveConfig_Type()
)
rcMirrorSaveConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMirrorSaveConfig.setStatus("current")
_RcMirrorByPort_ObjectIdentity = ObjectIdentity
rcMirrorByPort = _RcMirrorByPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5, 2)
)


class _RcMirrorByPortEnable_Type(TruthValue):
    """Custom type rcMirrorByPortEnable based on TruthValue"""


_RcMirrorByPortEnable_Object = MibScalar
rcMirrorByPortEnable = _RcMirrorByPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5, 2, 1),
    _RcMirrorByPortEnable_Type()
)
rcMirrorByPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMirrorByPortEnable.setStatus("deprecated")
_RcMirrorByPortMirrorPort_Type = InterfaceIndex
_RcMirrorByPortMirrorPort_Object = MibScalar
rcMirrorByPortMirrorPort = _RcMirrorByPortMirrorPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5, 2, 2),
    _RcMirrorByPortMirrorPort_Type()
)
rcMirrorByPortMirrorPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMirrorByPortMirrorPort.setStatus("deprecated")


class _RcMirrorByPortEnableMirroredPortOne_Type(TruthValue):
    """Custom type rcMirrorByPortEnableMirroredPortOne based on TruthValue"""


_RcMirrorByPortEnableMirroredPortOne_Object = MibScalar
rcMirrorByPortEnableMirroredPortOne = _RcMirrorByPortEnableMirroredPortOne_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5, 2, 3),
    _RcMirrorByPortEnableMirroredPortOne_Type()
)
rcMirrorByPortEnableMirroredPortOne.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMirrorByPortEnableMirroredPortOne.setStatus("deprecated")
_RcMirrorByPortMirroredPortOne_Type = InterfaceIndex
_RcMirrorByPortMirroredPortOne_Object = MibScalar
rcMirrorByPortMirroredPortOne = _RcMirrorByPortMirroredPortOne_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5, 2, 4),
    _RcMirrorByPortMirroredPortOne_Type()
)
rcMirrorByPortMirroredPortOne.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMirrorByPortMirroredPortOne.setStatus("deprecated")


class _RcMirrorByPortEnableMirroredPortTwo_Type(TruthValue):
    """Custom type rcMirrorByPortEnableMirroredPortTwo based on TruthValue"""


_RcMirrorByPortEnableMirroredPortTwo_Object = MibScalar
rcMirrorByPortEnableMirroredPortTwo = _RcMirrorByPortEnableMirroredPortTwo_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5, 2, 5),
    _RcMirrorByPortEnableMirroredPortTwo_Type()
)
rcMirrorByPortEnableMirroredPortTwo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMirrorByPortEnableMirroredPortTwo.setStatus("deprecated")
_RcMirrorByPortMirroredPortTwo_Type = InterfaceIndex
_RcMirrorByPortMirroredPortTwo_Object = MibScalar
rcMirrorByPortMirroredPortTwo = _RcMirrorByPortMirroredPortTwo_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 5, 2, 6),
    _RcMirrorByPortMirroredPortTwo_Type()
)
rcMirrorByPortMirroredPortTwo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMirrorByPortMirroredPortTwo.setStatus("deprecated")
_RcDipSwitch_ObjectIdentity = ObjectIdentity
rcDipSwitch = _RcDipSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 6)
)
_RcIsolateUnconfigPorts_Type = TruthValue
_RcIsolateUnconfigPorts_Object = MibScalar
rcIsolateUnconfigPorts = _RcIsolateUnconfigPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 6, 1),
    _RcIsolateUnconfigPorts_Type()
)
rcIsolateUnconfigPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsolateUnconfigPorts.setStatus("deprecated")
_RcUseFactorySettings_Type = TruthValue
_RcUseFactorySettings_Object = MibScalar
rcUseFactorySettings = _RcUseFactorySettings_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 6, 2),
    _RcUseFactorySettings_Type()
)
rcUseFactorySettings.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcUseFactorySettings.setStatus("deprecated")
_RcHighPriorityMode_Type = TruthValue
_RcHighPriorityMode_Object = MibScalar
rcHighPriorityMode = _RcHighPriorityMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 6, 3),
    _RcHighPriorityMode_Type()
)
rcHighPriorityMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcHighPriorityMode.setStatus("deprecated")
_RcTblSize_ObjectIdentity = ObjectIdentity
rcTblSize = _RcTblSize_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7)
)
_RcTblRmonStatSize_Type = Integer32
_RcTblRmonStatSize_Object = MibScalar
rcTblRmonStatSize = _RcTblRmonStatSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 1),
    _RcTblRmonStatSize_Type()
)
rcTblRmonStatSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblRmonStatSize.setStatus("current")
_RcTblRmonHistoryControlSize_Type = Integer32
_RcTblRmonHistoryControlSize_Object = MibScalar
rcTblRmonHistoryControlSize = _RcTblRmonHistoryControlSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 2),
    _RcTblRmonHistoryControlSize_Type()
)
rcTblRmonHistoryControlSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblRmonHistoryControlSize.setStatus("current")
_RcTblRmonHistoryEnetSize_Type = Integer32
_RcTblRmonHistoryEnetSize_Object = MibScalar
rcTblRmonHistoryEnetSize = _RcTblRmonHistoryEnetSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 3),
    _RcTblRmonHistoryEnetSize_Type()
)
rcTblRmonHistoryEnetSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblRmonHistoryEnetSize.setStatus("current")
_RcTblRmonAlarmSize_Type = Integer32
_RcTblRmonAlarmSize_Object = MibScalar
rcTblRmonAlarmSize = _RcTblRmonAlarmSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 4),
    _RcTblRmonAlarmSize_Type()
)
rcTblRmonAlarmSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblRmonAlarmSize.setStatus("current")
_RcTblRmonEventSize_Type = Integer32
_RcTblRmonEventSize_Object = MibScalar
rcTblRmonEventSize = _RcTblRmonEventSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 5),
    _RcTblRmonEventSize_Type()
)
rcTblRmonEventSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblRmonEventSize.setStatus("current")
_RcTblRmonLogSize_Type = Integer32
_RcTblRmonLogSize_Object = MibScalar
rcTblRmonLogSize = _RcTblRmonLogSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 6),
    _RcTblRmonLogSize_Type()
)
rcTblRmonLogSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblRmonLogSize.setStatus("current")
_RcTblArTblSize_Type = Integer32
_RcTblArTblSize_Object = MibScalar
rcTblArTblSize = _RcTblArTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 7),
    _RcTblArTblSize_Type()
)
rcTblArTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArTblSize.setStatus("current")
_RcTblArFree_Type = Integer32
_RcTblArFree_Object = MibScalar
rcTblArFree = _RcTblArFree_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 8),
    _RcTblArFree_Type()
)
rcTblArFree.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArFree.setStatus("current")
_RcTblArNoSpace_Type = Integer32
_RcTblArNoSpace_Object = MibScalar
rcTblArNoSpace = _RcTblArNoSpace_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 9),
    _RcTblArNoSpace_Type()
)
rcTblArNoSpace.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArNoSpace.setStatus("current")
_RcTblArAdded_Type = Integer32
_RcTblArAdded_Object = MibScalar
rcTblArAdded = _RcTblArAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 10),
    _RcTblArAdded_Type()
)
rcTblArAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArAdded.setStatus("current")
_RcTblArDeleted_Type = Integer32
_RcTblArDeleted_Object = MibScalar
rcTblArDeleted = _RcTblArDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 11),
    _RcTblArDeleted_Type()
)
rcTblArDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArDeleted.setStatus("current")
_RcTblArMacAdded_Type = Integer32
_RcTblArMacAdded_Object = MibScalar
rcTblArMacAdded = _RcTblArMacAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 12),
    _RcTblArMacAdded_Type()
)
rcTblArMacAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArMacAdded.setStatus("current")
_RcTblArMacDeleted_Type = Integer32
_RcTblArMacDeleted_Object = MibScalar
rcTblArMacDeleted = _RcTblArMacDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 13),
    _RcTblArMacDeleted_Type()
)
rcTblArMacDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArMacDeleted.setStatus("current")
_RcTblArMacMoved_Type = Integer32
_RcTblArMacMoved_Object = MibScalar
rcTblArMacMoved = _RcTblArMacMoved_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 14),
    _RcTblArMacMoved_Type()
)
rcTblArMacMoved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArMacMoved.setStatus("current")
_RcTblArIpAdded_Type = Integer32
_RcTblArIpAdded_Object = MibScalar
rcTblArIpAdded = _RcTblArIpAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 15),
    _RcTblArIpAdded_Type()
)
rcTblArIpAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArIpAdded.setStatus("current")
_RcTblArIpDeleted_Type = Integer32
_RcTblArIpDeleted_Object = MibScalar
rcTblArIpDeleted = _RcTblArIpDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 16),
    _RcTblArIpDeleted_Type()
)
rcTblArIpDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArIpDeleted.setStatus("current")
_RcTblArMcastTblSize_Type = Integer32
_RcTblArMcastTblSize_Object = MibScalar
rcTblArMcastTblSize = _RcTblArMcastTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 17),
    _RcTblArMcastTblSize_Type()
)
rcTblArMcastTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArMcastTblSize.setStatus("current")
_RcTblArFreeMcastGroups_Type = Integer32
_RcTblArFreeMcastGroups_Object = MibScalar
rcTblArFreeMcastGroups = _RcTblArFreeMcastGroups_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 18),
    _RcTblArFreeMcastGroups_Type()
)
rcTblArFreeMcastGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArFreeMcastGroups.setStatus("current")
_RcTblArIpMcastAdded_Type = Integer32
_RcTblArIpMcastAdded_Object = MibScalar
rcTblArIpMcastAdded = _RcTblArIpMcastAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 19),
    _RcTblArIpMcastAdded_Type()
)
rcTblArIpMcastAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArIpMcastAdded.setStatus("current")
_RcTblArIpMcastDeleted_Type = Integer32
_RcTblArIpMcastDeleted_Object = MibScalar
rcTblArIpMcastDeleted = _RcTblArIpMcastDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 20),
    _RcTblArIpMcastDeleted_Type()
)
rcTblArIpMcastDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArIpMcastDeleted.setStatus("current")
_RcTblArVlanByPortAdded_Type = Integer32
_RcTblArVlanByPortAdded_Object = MibScalar
rcTblArVlanByPortAdded = _RcTblArVlanByPortAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 21),
    _RcTblArVlanByPortAdded_Type()
)
rcTblArVlanByPortAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArVlanByPortAdded.setStatus("current")
_RcTblArVlanByPortDeleted_Type = Integer32
_RcTblArVlanByPortDeleted_Object = MibScalar
rcTblArVlanByPortDeleted = _RcTblArVlanByPortDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 22),
    _RcTblArVlanByPortDeleted_Type()
)
rcTblArVlanByPortDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArVlanByPortDeleted.setStatus("current")
_RcTblArVlanByProtocolAdded_Type = Integer32
_RcTblArVlanByProtocolAdded_Object = MibScalar
rcTblArVlanByProtocolAdded = _RcTblArVlanByProtocolAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 23),
    _RcTblArVlanByProtocolAdded_Type()
)
rcTblArVlanByProtocolAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArVlanByProtocolAdded.setStatus("current")
_RcTblArVlanByProtocolDeleted_Type = Integer32
_RcTblArVlanByProtocolDeleted_Object = MibScalar
rcTblArVlanByProtocolDeleted = _RcTblArVlanByProtocolDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 24),
    _RcTblArVlanByProtocolDeleted_Type()
)
rcTblArVlanByProtocolDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArVlanByProtocolDeleted.setStatus("current")
_RcTblArVlanByIpSubnetAdded_Type = Integer32
_RcTblArVlanByIpSubnetAdded_Object = MibScalar
rcTblArVlanByIpSubnetAdded = _RcTblArVlanByIpSubnetAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 25),
    _RcTblArVlanByIpSubnetAdded_Type()
)
rcTblArVlanByIpSubnetAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArVlanByIpSubnetAdded.setStatus("current")
_RcTblArVlanByIpSubnetDeleted_Type = Integer32
_RcTblArVlanByIpSubnetDeleted_Object = MibScalar
rcTblArVlanByIpSubnetDeleted = _RcTblArVlanByIpSubnetDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 26),
    _RcTblArVlanByIpSubnetDeleted_Type()
)
rcTblArVlanByIpSubnetDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArVlanByIpSubnetDeleted.setStatus("current")
_RcTblArIpSubnetsAdded_Type = Integer32
_RcTblArIpSubnetsAdded_Object = MibScalar
rcTblArIpSubnetsAdded = _RcTblArIpSubnetsAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 27),
    _RcTblArIpSubnetsAdded_Type()
)
rcTblArIpSubnetsAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArIpSubnetsAdded.setStatus("current")
_RcTblArIpSubnetsDeleted_Type = Integer32
_RcTblArIpSubnetsDeleted_Object = MibScalar
rcTblArIpSubnetsDeleted = _RcTblArIpSubnetsDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 28),
    _RcTblArIpSubnetsDeleted_Type()
)
rcTblArIpSubnetsDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArIpSubnetsDeleted.setStatus("current")
_RcTblArRsvpsAdded_Type = Integer32
_RcTblArRsvpsAdded_Object = MibScalar
rcTblArRsvpsAdded = _RcTblArRsvpsAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 29),
    _RcTblArRsvpsAdded_Type()
)
rcTblArRsvpsAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArRsvpsAdded.setStatus("current")
_RcTblArRsvpsDeleted_Type = Integer32
_RcTblArRsvpsDeleted_Object = MibScalar
rcTblArRsvpsDeleted = _RcTblArRsvpsDeleted_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 30),
    _RcTblArRsvpsDeleted_Type()
)
rcTblArRsvpsDeleted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblArRsvpsDeleted.setStatus("current")
_RcTblBrdgFdbSize_Type = Integer32
_RcTblBrdgFdbSize_Object = MibScalar
rcTblBrdgFdbSize = _RcTblBrdgFdbSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 31),
    _RcTblBrdgFdbSize_Type()
)
rcTblBrdgFdbSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblBrdgFdbSize.setStatus("current")
_RcTblBrdgStaticSize_Type = Integer32
_RcTblBrdgStaticSize_Object = MibScalar
rcTblBrdgStaticSize = _RcTblBrdgStaticSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 32),
    _RcTblBrdgStaticSize_Type()
)
rcTblBrdgStaticSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblBrdgStaticSize.setStatus("current")
_RcTblIpAddrSize_Type = Integer32
_RcTblIpAddrSize_Object = MibScalar
rcTblIpAddrSize = _RcTblIpAddrSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 33),
    _RcTblIpAddrSize_Type()
)
rcTblIpAddrSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblIpAddrSize.setStatus("current")
_RcTblIpForwardingSize_Type = Integer32
_RcTblIpForwardingSize_Object = MibScalar
rcTblIpForwardingSize = _RcTblIpForwardingSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 34),
    _RcTblIpForwardingSize_Type()
)
rcTblIpForwardingSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblIpForwardingSize.setStatus("current")
_RcTblIpNetToMediaSize_Type = Integer32
_RcTblIpNetToMediaSize_Object = MibScalar
rcTblIpNetToMediaSize = _RcTblIpNetToMediaSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 35),
    _RcTblIpNetToMediaSize_Type()
)
rcTblIpNetToMediaSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblIpNetToMediaSize.setStatus("current")
_RcTblIpBestPlusAltRouteSize_Type = Integer32
_RcTblIpBestPlusAltRouteSize_Object = MibScalar
rcTblIpBestPlusAltRouteSize = _RcTblIpBestPlusAltRouteSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 36),
    _RcTblIpBestPlusAltRouteSize_Type()
)
rcTblIpBestPlusAltRouteSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblIpBestPlusAltRouteSize.setStatus("current")
_RcTblIpBestPathSize_Type = Integer32
_RcTblIpBestPathSize_Object = MibScalar
rcTblIpBestPathSize = _RcTblIpBestPathSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 37),
    _RcTblIpBestPathSize_Type()
)
rcTblIpBestPathSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblIpBestPathSize.setStatus("current")
_RcTblIpBestPlusAltPathSize_Type = Integer32
_RcTblIpBestPlusAltPathSize_Object = MibScalar
rcTblIpBestPlusAltPathSize = _RcTblIpBestPlusAltPathSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 7, 38),
    _RcTblIpBestPlusAltPathSize_Type()
)
rcTblIpBestPlusAltPathSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTblIpBestPlusAltPathSize.setStatus("current")
_RcIp_ObjectIdentity = ObjectIdentity
rcIp = _RcIp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8)
)
_RcIpConf_ObjectIdentity = ObjectIdentity
rcIpConf = _RcIpConf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1)
)
_RcIpConfTable_Object = MibTable
rcIpConfTable = _RcIpConfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1)
)
if mibBuilder.loadTexts:
    rcIpConfTable.setStatus("current")
_RcIpConfEntry_Object = MibTableRow
rcIpConfEntry = _RcIpConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1)
)
rcIpConfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpConfEntry.setStatus("current")


class _RcIpConfIfIndex_Type(InterfaceIndexOrZero):
    """Custom type rcIpConfIfIndex based on InterfaceIndexOrZero"""
    subtypeSpec = InterfaceIndexOrZero.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6142),
    )


_RcIpConfIfIndex_Type.__name__ = "InterfaceIndexOrZero"
_RcIpConfIfIndex_Object = MibTableColumn
rcIpConfIfIndex = _RcIpConfIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 1),
    _RcIpConfIfIndex_Type()
)
rcIpConfIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfIfIndex.setStatus("current")
_RcIpConfAdvertDefRte_Type = TruthValue
_RcIpConfAdvertDefRte_Object = MibTableColumn
rcIpConfAdvertDefRte = _RcIpConfAdvertDefRte_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 2),
    _RcIpConfAdvertDefRte_Type()
)
rcIpConfAdvertDefRte.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfAdvertDefRte.setStatus("current")
_RcIpConfAcceptDefRte_Type = TruthValue
_RcIpConfAcceptDefRte_Object = MibTableColumn
rcIpConfAcceptDefRte = _RcIpConfAcceptDefRte_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 3),
    _RcIpConfAcceptDefRte_Type()
)
rcIpConfAcceptDefRte.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfAcceptDefRte.setStatus("current")
_RcIpConfRowStatus_Type = RowStatus
_RcIpConfRowStatus_Object = MibTableColumn
rcIpConfRowStatus = _RcIpConfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 4),
    _RcIpConfRowStatus_Type()
)
rcIpConfRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRowStatus.setStatus("current")
_RcIpConfRipEnable_Type = TruthValue
_RcIpConfRipEnable_Object = MibTableColumn
rcIpConfRipEnable = _RcIpConfRipEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 5),
    _RcIpConfRipEnable_Type()
)
rcIpConfRipEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRipEnable.setStatus("current")
_RcIpConfOspfEnable_Type = TruthValue
_RcIpConfOspfEnable_Object = MibTableColumn
rcIpConfOspfEnable = _RcIpConfOspfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 6),
    _RcIpConfOspfEnable_Type()
)
rcIpConfOspfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfEnable.setStatus("current")
_RcIpConfIgmpEnable_Type = TruthValue
_RcIpConfIgmpEnable_Object = MibTableColumn
rcIpConfIgmpEnable = _RcIpConfIgmpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 7),
    _RcIpConfIgmpEnable_Type()
)
rcIpConfIgmpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpEnable.setStatus("current")
_RcIpConfAddrAssigned_Type = TruthValue
_RcIpConfAddrAssigned_Object = MibTableColumn
rcIpConfAddrAssigned = _RcIpConfAddrAssigned_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 8),
    _RcIpConfAddrAssigned_Type()
)
rcIpConfAddrAssigned.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfAddrAssigned.setStatus("current")
_RcIpConfDhcpEnable_Type = TruthValue
_RcIpConfDhcpEnable_Object = MibTableColumn
rcIpConfDhcpEnable = _RcIpConfDhcpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 9),
    _RcIpConfDhcpEnable_Type()
)
rcIpConfDhcpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfDhcpEnable.setStatus("current")
_RcIpConfTriggeredUpdateEnable_Type = TruthValue
_RcIpConfTriggeredUpdateEnable_Object = MibTableColumn
rcIpConfTriggeredUpdateEnable = _RcIpConfTriggeredUpdateEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 10),
    _RcIpConfTriggeredUpdateEnable_Type()
)
rcIpConfTriggeredUpdateEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfTriggeredUpdateEnable.setStatus("current")
_RcIpConfAutoAggrerateEnable_Type = TruthValue
_RcIpConfAutoAggrerateEnable_Object = MibTableColumn
rcIpConfAutoAggrerateEnable = _RcIpConfAutoAggrerateEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 11),
    _RcIpConfAutoAggrerateEnable_Type()
)
rcIpConfAutoAggrerateEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfAutoAggrerateEnable.setStatus("current")
_RcIpConfGenerateDefaultRoute_Type = TruthValue
_RcIpConfGenerateDefaultRoute_Object = MibTableColumn
rcIpConfGenerateDefaultRoute = _RcIpConfGenerateDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 12),
    _RcIpConfGenerateDefaultRoute_Type()
)
rcIpConfGenerateDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGenerateDefaultRoute.setStatus("current")


class _RcIpConfAdvertiseWhenDown_Type(TruthValue):
    """Custom type rcIpConfAdvertiseWhenDown based on TruthValue"""


_RcIpConfAdvertiseWhenDown_Object = MibTableColumn
rcIpConfAdvertiseWhenDown = _RcIpConfAdvertiseWhenDown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 13),
    _RcIpConfAdvertiseWhenDown_Type()
)
rcIpConfAdvertiseWhenDown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfAdvertiseWhenDown.setStatus("current")


class _RcIpConfDirectBroadcastEnable_Type(TruthValue):
    """Custom type rcIpConfDirectBroadcastEnable based on TruthValue"""


_RcIpConfDirectBroadcastEnable_Object = MibTableColumn
rcIpConfDirectBroadcastEnable = _RcIpConfDirectBroadcastEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 14),
    _RcIpConfDirectBroadcastEnable_Type()
)
rcIpConfDirectBroadcastEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfDirectBroadcastEnable.setStatus("current")


class _RcIpConfRipInPolicy_Type(DisplayString):
    """Custom type rcIpConfRipInPolicy based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpConfRipInPolicy_Type.__name__ = "DisplayString"
_RcIpConfRipInPolicy_Object = MibTableColumn
rcIpConfRipInPolicy = _RcIpConfRipInPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 15),
    _RcIpConfRipInPolicy_Type()
)
rcIpConfRipInPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRipInPolicy.setStatus("current")


class _RcIpConfRipOutPolicy_Type(DisplayString):
    """Custom type rcIpConfRipOutPolicy based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpConfRipOutPolicy_Type.__name__ = "DisplayString"
_RcIpConfRipOutPolicy_Object = MibTableColumn
rcIpConfRipOutPolicy = _RcIpConfRipOutPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 16),
    _RcIpConfRipOutPolicy_Type()
)
rcIpConfRipOutPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRipOutPolicy.setStatus("current")


class _RcIpConfOspfIfType_Type(Integer32):
    """Custom type rcIpConfOspfIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              99)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 1),
          ("nbma", 2),
          ("passive", 99),
          ("pointToMultipoint", 5),
          ("pointToPoint", 3))
    )


_RcIpConfOspfIfType_Type.__name__ = "Integer32"
_RcIpConfOspfIfType_Object = MibTableColumn
rcIpConfOspfIfType = _RcIpConfOspfIfType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 17),
    _RcIpConfOspfIfType_Type()
)
rcIpConfOspfIfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfIfType.setStatus("current")


class _RcIpConfRipCost_Type(Integer32):
    """Custom type rcIpConfRipCost based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_RcIpConfRipCost_Type.__name__ = "Integer32"
_RcIpConfRipCost_Object = MibTableColumn
rcIpConfRipCost = _RcIpConfRipCost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 18),
    _RcIpConfRipCost_Type()
)
rcIpConfRipCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRipCost.setStatus("current")


class _RcIpConfRipHolddown_Type(Integer32):
    """Custom type rcIpConfRipHolddown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 360),
    )


_RcIpConfRipHolddown_Type.__name__ = "Integer32"
_RcIpConfRipHolddown_Object = MibTableColumn
rcIpConfRipHolddown = _RcIpConfRipHolddown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 19),
    _RcIpConfRipHolddown_Type()
)
rcIpConfRipHolddown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRipHolddown.setStatus("current")


class _RcIpConfRipTimeout_Type(Integer32):
    """Custom type rcIpConfRipTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(15, 259200),
    )


_RcIpConfRipTimeout_Type.__name__ = "Integer32"
_RcIpConfRipTimeout_Object = MibTableColumn
rcIpConfRipTimeout = _RcIpConfRipTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 20),
    _RcIpConfRipTimeout_Type()
)
rcIpConfRipTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRipTimeout.setStatus("current")


class _RcIpConfRsmltEnable_Type(TruthValue):
    """Custom type rcIpConfRsmltEnable based on TruthValue"""


_RcIpConfRsmltEnable_Object = MibTableColumn
rcIpConfRsmltEnable = _RcIpConfRsmltEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 21),
    _RcIpConfRsmltEnable_Type()
)
rcIpConfRsmltEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRsmltEnable.setStatus("current")


class _RcIpConfReversePathCheckEnable_Type(TruthValue):
    """Custom type rcIpConfReversePathCheckEnable based on TruthValue"""


_RcIpConfReversePathCheckEnable_Object = MibTableColumn
rcIpConfReversePathCheckEnable = _RcIpConfReversePathCheckEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 22),
    _RcIpConfReversePathCheckEnable_Type()
)
rcIpConfReversePathCheckEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfReversePathCheckEnable.setStatus("current")


class _RcIpConfReversePathCheckMode_Type(Integer32):
    """Custom type rcIpConfReversePathCheckMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("exist-only", 1),
          ("strict", 2))
    )


_RcIpConfReversePathCheckMode_Type.__name__ = "Integer32"
_RcIpConfReversePathCheckMode_Object = MibTableColumn
rcIpConfReversePathCheckMode = _RcIpConfReversePathCheckMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 23),
    _RcIpConfReversePathCheckMode_Type()
)
rcIpConfReversePathCheckMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfReversePathCheckMode.setStatus("current")
_RcIpConfIsisEnable_Type = TruthValue
_RcIpConfIsisEnable_Object = MibTableColumn
rcIpConfIsisEnable = _RcIpConfIsisEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 24),
    _RcIpConfIsisEnable_Type()
)
rcIpConfIsisEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIsisEnable.setStatus("current")


class _RcIpConfBfdEnable_Type(TruthValue):
    """Custom type rcIpConfBfdEnable based on TruthValue"""


_RcIpConfBfdEnable_Object = MibTableColumn
rcIpConfBfdEnable = _RcIpConfBfdEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 25),
    _RcIpConfBfdEnable_Type()
)
rcIpConfBfdEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpConfBfdEnable.setStatus("current")
_RcIpConfIpVpnLiteEnable_Type = TruthValue
_RcIpConfIpVpnLiteEnable_Object = MibTableColumn
rcIpConfIpVpnLiteEnable = _RcIpConfIpVpnLiteEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 1, 1, 26),
    _RcIpConfIpVpnLiteEnable_Type()
)
rcIpConfIpVpnLiteEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpConfIpVpnLiteEnable.setStatus("current")
_RcIpConfOspfTable_Object = MibTable
rcIpConfOspfTable = _RcIpConfOspfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2)
)
if mibBuilder.loadTexts:
    rcIpConfOspfTable.setStatus("current")
_RcIpConfOspfEntry_Object = MibTableRow
rcIpConfOspfEntry = _RcIpConfOspfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1)
)
rcIpConfOspfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfOspfIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpConfOspfEntry.setStatus("current")


class _RcIpConfOspfIfIndex_Type(InterfaceIndexOrZero):
    """Custom type rcIpConfOspfIfIndex based on InterfaceIndexOrZero"""
    subtypeSpec = InterfaceIndexOrZero.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6142),
    )


_RcIpConfOspfIfIndex_Type.__name__ = "InterfaceIndexOrZero"
_RcIpConfOspfIfIndex_Object = MibTableColumn
rcIpConfOspfIfIndex = _RcIpConfOspfIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 1),
    _RcIpConfOspfIfIndex_Type()
)
rcIpConfOspfIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfIfIndex.setStatus("current")


class _RcIpConfOspfRtrPriority_Type(Integer32):
    """Custom type rcIpConfOspfRtrPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpConfOspfRtrPriority_Type.__name__ = "Integer32"
_RcIpConfOspfRtrPriority_Object = MibTableColumn
rcIpConfOspfRtrPriority = _RcIpConfOspfRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 2),
    _RcIpConfOspfRtrPriority_Type()
)
rcIpConfOspfRtrPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfRtrPriority.setStatus("current")


class _RcIpConfOspfMetric_Type(Integer32):
    """Custom type rcIpConfOspfMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpConfOspfMetric_Type.__name__ = "Integer32"
_RcIpConfOspfMetric_Object = MibTableColumn
rcIpConfOspfMetric = _RcIpConfOspfMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 3),
    _RcIpConfOspfMetric_Type()
)
rcIpConfOspfMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfMetric.setStatus("current")


class _RcIpConfOspfAuthKey_Type(DisplayString):
    """Custom type rcIpConfOspfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RcIpConfOspfAuthKey_Type.__name__ = "DisplayString"
_RcIpConfOspfAuthKey_Object = MibTableColumn
rcIpConfOspfAuthKey = _RcIpConfOspfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 4),
    _RcIpConfOspfAuthKey_Type()
)
rcIpConfOspfAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfAuthKey.setStatus("current")
_RcIpConfOspfRowStatus_Type = RowStatus
_RcIpConfOspfRowStatus_Object = MibTableColumn
rcIpConfOspfRowStatus = _RcIpConfOspfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 5),
    _RcIpConfOspfRowStatus_Type()
)
rcIpConfOspfRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfRowStatus.setStatus("current")


class _RcIpConfOspfHelloInterval_Type(Integer32):
    """Custom type rcIpConfOspfHelloInterval based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpConfOspfHelloInterval_Type.__name__ = "Integer32"
_RcIpConfOspfHelloInterval_Object = MibTableColumn
rcIpConfOspfHelloInterval = _RcIpConfOspfHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 6),
    _RcIpConfOspfHelloInterval_Type()
)
rcIpConfOspfHelloInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfHelloInterval.setStatus("current")


class _RcIpConfOspfRtrDeadInterval_Type(Integer32):
    """Custom type rcIpConfOspfRtrDeadInterval based on Integer32"""
    defaultValue = 40

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpConfOspfRtrDeadInterval_Type.__name__ = "Integer32"
_RcIpConfOspfRtrDeadInterval_Object = MibTableColumn
rcIpConfOspfRtrDeadInterval = _RcIpConfOspfRtrDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 7),
    _RcIpConfOspfRtrDeadInterval_Type()
)
rcIpConfOspfRtrDeadInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfRtrDeadInterval.setStatus("current")


class _RcIpConfOspfIfAreaId_Type(IpAddress):
    """Custom type rcIpConfOspfIfAreaId based on IpAddress"""
    defaultHexValue = "00000000"


_RcIpConfOspfIfAreaId_Object = MibTableColumn
rcIpConfOspfIfAreaId = _RcIpConfOspfIfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 8),
    _RcIpConfOspfIfAreaId_Type()
)
rcIpConfOspfIfAreaId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfIfAreaId.setStatus("current")


class _RcIpConfOspfAuthType_Type(Integer32):
    """Custom type rcIpConfOspfAuthType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("md5", 2),
          ("none", 0),
          ("simplePassword", 1))
    )


_RcIpConfOspfAuthType_Type.__name__ = "Integer32"
_RcIpConfOspfAuthType_Object = MibTableColumn
rcIpConfOspfAuthType = _RcIpConfOspfAuthType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 9),
    _RcIpConfOspfAuthType_Type()
)
rcIpConfOspfAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfAuthType.setStatus("current")


class _RcIpConfOspfPollInterval_Type(Integer32):
    """Custom type rcIpConfOspfPollInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpConfOspfPollInterval_Type.__name__ = "Integer32"
_RcIpConfOspfPollInterval_Object = MibTableColumn
rcIpConfOspfPollInterval = _RcIpConfOspfPollInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 10),
    _RcIpConfOspfPollInterval_Type()
)
rcIpConfOspfPollInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfPollInterval.setStatus("current")


class _RcIpConfOspfIfMtuIgnore_Type(Integer32):
    """Custom type rcIpConfOspfIfMtuIgnore based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RcIpConfOspfIfMtuIgnore_Type.__name__ = "Integer32"
_RcIpConfOspfIfMtuIgnore_Object = MibTableColumn
rcIpConfOspfIfMtuIgnore = _RcIpConfOspfIfMtuIgnore_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 11),
    _RcIpConfOspfIfMtuIgnore_Type()
)
rcIpConfOspfIfMtuIgnore.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfIfMtuIgnore.setStatus("current")


class _RcIpConfOspfBfdEnable_Type(EnableValue):
    """Custom type rcIpConfOspfBfdEnable based on EnableValue"""


_RcIpConfOspfBfdEnable_Object = MibTableColumn
rcIpConfOspfBfdEnable = _RcIpConfOspfBfdEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 2, 1, 12),
    _RcIpConfOspfBfdEnable_Type()
)
rcIpConfOspfBfdEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfBfdEnable.setStatus("current")
_RcIpConfOspfDefaultMetric_ObjectIdentity = ObjectIdentity
rcIpConfOspfDefaultMetric = _RcIpConfOspfDefaultMetric_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 3)
)


class _RcIpConfOspfDefaultMetric10MegPort_Type(Integer32):
    """Custom type rcIpConfOspfDefaultMetric10MegPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpConfOspfDefaultMetric10MegPort_Type.__name__ = "Integer32"
_RcIpConfOspfDefaultMetric10MegPort_Object = MibScalar
rcIpConfOspfDefaultMetric10MegPort = _RcIpConfOspfDefaultMetric10MegPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 3, 1),
    _RcIpConfOspfDefaultMetric10MegPort_Type()
)
rcIpConfOspfDefaultMetric10MegPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfDefaultMetric10MegPort.setStatus("current")


class _RcIpConfOspfDefaultMetric100MegPort_Type(Integer32):
    """Custom type rcIpConfOspfDefaultMetric100MegPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpConfOspfDefaultMetric100MegPort_Type.__name__ = "Integer32"
_RcIpConfOspfDefaultMetric100MegPort_Object = MibScalar
rcIpConfOspfDefaultMetric100MegPort = _RcIpConfOspfDefaultMetric100MegPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 3, 2),
    _RcIpConfOspfDefaultMetric100MegPort_Type()
)
rcIpConfOspfDefaultMetric100MegPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfDefaultMetric100MegPort.setStatus("current")


class _RcIpConfOspfDefaultMetric1000MegPort_Type(Integer32):
    """Custom type rcIpConfOspfDefaultMetric1000MegPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpConfOspfDefaultMetric1000MegPort_Type.__name__ = "Integer32"
_RcIpConfOspfDefaultMetric1000MegPort_Object = MibScalar
rcIpConfOspfDefaultMetric1000MegPort = _RcIpConfOspfDefaultMetric1000MegPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 3, 3),
    _RcIpConfOspfDefaultMetric1000MegPort_Type()
)
rcIpConfOspfDefaultMetric1000MegPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfDefaultMetric1000MegPort.setStatus("current")


class _RcIpConfOspfDefaultMetric10000MegPort_Type(Integer32):
    """Custom type rcIpConfOspfDefaultMetric10000MegPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpConfOspfDefaultMetric10000MegPort_Type.__name__ = "Integer32"
_RcIpConfOspfDefaultMetric10000MegPort_Object = MibScalar
rcIpConfOspfDefaultMetric10000MegPort = _RcIpConfOspfDefaultMetric10000MegPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 3, 4),
    _RcIpConfOspfDefaultMetric10000MegPort_Type()
)
rcIpConfOspfDefaultMetric10000MegPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfDefaultMetric10000MegPort.setStatus("current")
_RcIpConfOspf_ObjectIdentity = ObjectIdentity
rcIpConfOspf = _RcIpConfOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 4)
)
_RcIpConfOspfTrapEnable_Type = TruthValue
_RcIpConfOspfTrapEnable_Object = MibScalar
rcIpConfOspfTrapEnable = _RcIpConfOspfTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 4, 1),
    _RcIpConfOspfTrapEnable_Type()
)
rcIpConfOspfTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfTrapEnable.setStatus("current")


class _RcIpConfOspfAutoVirtLinkEnable_Type(TruthValue):
    """Custom type rcIpConfOspfAutoVirtLinkEnable based on TruthValue"""


_RcIpConfOspfAutoVirtLinkEnable_Object = MibScalar
rcIpConfOspfAutoVirtLinkEnable = _RcIpConfOspfAutoVirtLinkEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 4, 2),
    _RcIpConfOspfAutoVirtLinkEnable_Type()
)
rcIpConfOspfAutoVirtLinkEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfAutoVirtLinkEnable.setStatus("current")


class _RcIpConfOspfSpfHoldDownTime_Type(Integer32):
    """Custom type rcIpConfOspfSpfHoldDownTime based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 60),
    )


_RcIpConfOspfSpfHoldDownTime_Type.__name__ = "Integer32"
_RcIpConfOspfSpfHoldDownTime_Object = MibScalar
rcIpConfOspfSpfHoldDownTime = _RcIpConfOspfSpfHoldDownTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 4, 3),
    _RcIpConfOspfSpfHoldDownTime_Type()
)
rcIpConfOspfSpfHoldDownTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfSpfHoldDownTime.setStatus("current")


class _RcIpConfOspfAction_Type(Integer32):
    """Custom type rcIpConfOspfAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("runSpf", 1))
    )


_RcIpConfOspfAction_Type.__name__ = "Integer32"
_RcIpConfOspfAction_Object = MibScalar
rcIpConfOspfAction = _RcIpConfOspfAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 4, 4),
    _RcIpConfOspfAction_Type()
)
rcIpConfOspfAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfAction.setStatus("current")


class _RcIpConfOspfRfc1583Compatibility_Type(TruthValue):
    """Custom type rcIpConfOspfRfc1583Compatibility based on TruthValue"""


_RcIpConfOspfRfc1583Compatibility_Object = MibScalar
rcIpConfOspfRfc1583Compatibility = _RcIpConfOspfRfc1583Compatibility_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 4, 5),
    _RcIpConfOspfRfc1583Compatibility_Type()
)
rcIpConfOspfRfc1583Compatibility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfRfc1583Compatibility.setStatus("current")
_RcIpConfGlobal_ObjectIdentity = ObjectIdentity
rcIpConfGlobal = _RcIpConfGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6)
)


class _RcIpConfGlobalRipHoldDownTime_Type(Integer32):
    """Custom type rcIpConfGlobalRipHoldDownTime based on Integer32"""
    defaultValue = 120

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 360),
    )


_RcIpConfGlobalRipHoldDownTime_Type.__name__ = "Integer32"
_RcIpConfGlobalRipHoldDownTime_Object = MibScalar
rcIpConfGlobalRipHoldDownTime = _RcIpConfGlobalRipHoldDownTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 1),
    _RcIpConfGlobalRipHoldDownTime_Type()
)
rcIpConfGlobalRipHoldDownTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalRipHoldDownTime.setStatus("current")


class _RcIpConfGlobalIcmpNetUnreach_Type(TruthValue):
    """Custom type rcIpConfGlobalIcmpNetUnreach based on TruthValue"""


_RcIpConfGlobalIcmpNetUnreach_Object = MibScalar
rcIpConfGlobalIcmpNetUnreach = _RcIpConfGlobalIcmpNetUnreach_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 2),
    _RcIpConfGlobalIcmpNetUnreach_Type()
)
rcIpConfGlobalIcmpNetUnreach.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalIcmpNetUnreach.setStatus("current")


class _RcIpConfGlobalEcmpEnable_Type(TruthValue):
    """Custom type rcIpConfGlobalEcmpEnable based on TruthValue"""


_RcIpConfGlobalEcmpEnable_Object = MibScalar
rcIpConfGlobalEcmpEnable = _RcIpConfGlobalEcmpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 3),
    _RcIpConfGlobalEcmpEnable_Type()
)
rcIpConfGlobalEcmpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalEcmpEnable.setStatus("current")


class _RcIpConfGlobalEcmpMaxPath_Type(Integer32):
    """Custom type rcIpConfGlobalEcmpMaxPath based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RcIpConfGlobalEcmpMaxPath_Type.__name__ = "Integer32"
_RcIpConfGlobalEcmpMaxPath_Object = MibScalar
rcIpConfGlobalEcmpMaxPath = _RcIpConfGlobalEcmpMaxPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 4),
    _RcIpConfGlobalEcmpMaxPath_Type()
)
rcIpConfGlobalEcmpMaxPath.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalEcmpMaxPath.setStatus("current")


class _RcIpConfGlobalAlternativeEnable_Type(TruthValue):
    """Custom type rcIpConfGlobalAlternativeEnable based on TruthValue"""


_RcIpConfGlobalAlternativeEnable_Object = MibScalar
rcIpConfGlobalAlternativeEnable = _RcIpConfGlobalAlternativeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 5),
    _RcIpConfGlobalAlternativeEnable_Type()
)
rcIpConfGlobalAlternativeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalAlternativeEnable.setStatus("current")


class _RcIpConfGlobalRouteDiscoveryEnable_Type(TruthValue):
    """Custom type rcIpConfGlobalRouteDiscoveryEnable based on TruthValue"""


_RcIpConfGlobalRouteDiscoveryEnable_Object = MibScalar
rcIpConfGlobalRouteDiscoveryEnable = _RcIpConfGlobalRouteDiscoveryEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 6),
    _RcIpConfGlobalRouteDiscoveryEnable_Type()
)
rcIpConfGlobalRouteDiscoveryEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalRouteDiscoveryEnable.setStatus("current")


class _RcIpConfGlobalRipTimeOutInterval_Type(Integer32):
    """Custom type rcIpConfGlobalRipTimeOutInterval based on Integer32"""
    defaultValue = 180

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(15, 259200),
    )


_RcIpConfGlobalRipTimeOutInterval_Type.__name__ = "Integer32"
_RcIpConfGlobalRipTimeOutInterval_Object = MibScalar
rcIpConfGlobalRipTimeOutInterval = _RcIpConfGlobalRipTimeOutInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 8),
    _RcIpConfGlobalRipTimeOutInterval_Type()
)
rcIpConfGlobalRipTimeOutInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalRipTimeOutInterval.setStatus("current")


class _RcIpConfGlobalRipDefImportMetric_Type(Integer32):
    """Custom type rcIpConfGlobalRipDefImportMetric based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RcIpConfGlobalRipDefImportMetric_Type.__name__ = "Integer32"
_RcIpConfGlobalRipDefImportMetric_Object = MibScalar
rcIpConfGlobalRipDefImportMetric = _RcIpConfGlobalRipDefImportMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 9),
    _RcIpConfGlobalRipDefImportMetric_Type()
)
rcIpConfGlobalRipDefImportMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalRipDefImportMetric.setStatus("current")
_RcIpConfGlobalEcmp1PathList_Type = DisplayString
_RcIpConfGlobalEcmp1PathList_Object = MibScalar
rcIpConfGlobalEcmp1PathList = _RcIpConfGlobalEcmp1PathList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 10),
    _RcIpConfGlobalEcmp1PathList_Type()
)
rcIpConfGlobalEcmp1PathList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalEcmp1PathList.setStatus("current")
_RcIpConfGlobalEcmp2PathList_Type = DisplayString
_RcIpConfGlobalEcmp2PathList_Object = MibScalar
rcIpConfGlobalEcmp2PathList = _RcIpConfGlobalEcmp2PathList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 11),
    _RcIpConfGlobalEcmp2PathList_Type()
)
rcIpConfGlobalEcmp2PathList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalEcmp2PathList.setStatus("current")
_RcIpConfGlobalEcmp3PathList_Type = DisplayString
_RcIpConfGlobalEcmp3PathList_Object = MibScalar
rcIpConfGlobalEcmp3PathList = _RcIpConfGlobalEcmp3PathList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 12),
    _RcIpConfGlobalEcmp3PathList_Type()
)
rcIpConfGlobalEcmp3PathList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalEcmp3PathList.setStatus("current")
_RcIpConfGlobalEcmp4PathList_Type = DisplayString
_RcIpConfGlobalEcmp4PathList_Object = MibScalar
rcIpConfGlobalEcmp4PathList = _RcIpConfGlobalEcmp4PathList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 13),
    _RcIpConfGlobalEcmp4PathList_Type()
)
rcIpConfGlobalEcmp4PathList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalEcmp4PathList.setStatus("current")
_RcIpConfGlobalEcmpPathListApply_Type = TruthValue
_RcIpConfGlobalEcmpPathListApply_Object = MibScalar
rcIpConfGlobalEcmpPathListApply = _RcIpConfGlobalEcmpPathListApply_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 14),
    _RcIpConfGlobalEcmpPathListApply_Type()
)
rcIpConfGlobalEcmpPathListApply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalEcmpPathListApply.setStatus("current")
_RcIpConfGlobalIcmpRedirectMsg_Type = TruthValue
_RcIpConfGlobalIcmpRedirectMsg_Object = MibScalar
rcIpConfGlobalIcmpRedirectMsg = _RcIpConfGlobalIcmpRedirectMsg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 15),
    _RcIpConfGlobalIcmpRedirectMsg_Type()
)
rcIpConfGlobalIcmpRedirectMsg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalIcmpRedirectMsg.setStatus("current")


class _RcIpConfGlobalArpThreshold_Type(Integer32):
    """Custom type rcIpConfGlobalArpThreshold based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(50, 1000),
    )


_RcIpConfGlobalArpThreshold_Type.__name__ = "Integer32"
_RcIpConfGlobalArpThreshold_Object = MibScalar
rcIpConfGlobalArpThreshold = _RcIpConfGlobalArpThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 17),
    _RcIpConfGlobalArpThreshold_Type()
)
rcIpConfGlobalArpThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalArpThreshold.setStatus("current")


class _RcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable_Type(TruthValue):
    """Custom type rcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable based on TruthValue"""


_RcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable_Object = MibScalar
rcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable = _RcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 18),
    _RcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable_Type()
)
rcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable.setStatus("current")


class _RcIpConfGlobalUdpCheckSumEnable_Type(TruthValue):
    """Custom type rcIpConfGlobalUdpCheckSumEnable based on TruthValue"""


_RcIpConfGlobalUdpCheckSumEnable_Object = MibScalar
rcIpConfGlobalUdpCheckSumEnable = _RcIpConfGlobalUdpCheckSumEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 19),
    _RcIpConfGlobalUdpCheckSumEnable_Type()
)
rcIpConfGlobalUdpCheckSumEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalUdpCheckSumEnable.setStatus("current")


class _RcIpConfGlobalSuperNetEnable_Type(TruthValue):
    """Custom type rcIpConfGlobalSuperNetEnable based on TruthValue"""


_RcIpConfGlobalSuperNetEnable_Object = MibScalar
rcIpConfGlobalSuperNetEnable = _RcIpConfGlobalSuperNetEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 6, 20),
    _RcIpConfGlobalSuperNetEnable_Type()
)
rcIpConfGlobalSuperNetEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfGlobalSuperNetEnable.setStatus("current")
_RcIpConfOspfAreaTable_Object = MibTable
rcIpConfOspfAreaTable = _RcIpConfOspfAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 7)
)
if mibBuilder.loadTexts:
    rcIpConfOspfAreaTable.setStatus("current")
_RcIpConfOspfAreaEntry_Object = MibTableRow
rcIpConfOspfAreaEntry = _RcIpConfOspfAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 7, 1)
)
rcIpConfOspfAreaEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfOspfAreaId"),
)
if mibBuilder.loadTexts:
    rcIpConfOspfAreaEntry.setStatus("current")
_RcIpConfOspfAreaId_Type = IpAddress
_RcIpConfOspfAreaId_Object = MibTableColumn
rcIpConfOspfAreaId = _RcIpConfOspfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 7, 1, 1),
    _RcIpConfOspfAreaId_Type()
)
rcIpConfOspfAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaId.setStatus("current")


class _RcIpConfOspfAreaImportSummary_Type(TruthValue):
    """Custom type rcIpConfOspfAreaImportSummary based on TruthValue"""


_RcIpConfOspfAreaImportSummary_Object = MibTableColumn
rcIpConfOspfAreaImportSummary = _RcIpConfOspfAreaImportSummary_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 7, 1, 2),
    _RcIpConfOspfAreaImportSummary_Type()
)
rcIpConfOspfAreaImportSummary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaImportSummary.setStatus("current")
_RcIpConfOspfAreaActiveIfCount_Type = Integer32
_RcIpConfOspfAreaActiveIfCount_Object = MibTableColumn
rcIpConfOspfAreaActiveIfCount = _RcIpConfOspfAreaActiveIfCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 7, 1, 3),
    _RcIpConfOspfAreaActiveIfCount_Type()
)
rcIpConfOspfAreaActiveIfCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaActiveIfCount.setStatus("current")
_RcIpConfV2Table_Object = MibTable
rcIpConfV2Table = _RcIpConfV2Table_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8)
)
if mibBuilder.loadTexts:
    rcIpConfV2Table.setStatus("deprecated")
_RcIpConfV2Entry_Object = MibTableRow
rcIpConfV2Entry = _RcIpConfV2Entry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1)
)
rcIpConfV2Entry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfV2Index"),
    (0, "RAPID-CITY", "rcIpConfV2Addr"),
)
if mibBuilder.loadTexts:
    rcIpConfV2Entry.setStatus("deprecated")


class _RcIpConfV2Index_Type(InterfaceIndexOrZero):
    """Custom type rcIpConfV2Index based on InterfaceIndexOrZero"""
    subtypeSpec = InterfaceIndexOrZero.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6142),
    )


_RcIpConfV2Index_Type.__name__ = "InterfaceIndexOrZero"
_RcIpConfV2Index_Object = MibTableColumn
rcIpConfV2Index = _RcIpConfV2Index_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 1),
    _RcIpConfV2Index_Type()
)
rcIpConfV2Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfV2Index.setStatus("deprecated")
_RcIpConfV2Addr_Type = IpAddress
_RcIpConfV2Addr_Object = MibTableColumn
rcIpConfV2Addr = _RcIpConfV2Addr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 2),
    _RcIpConfV2Addr_Type()
)
rcIpConfV2Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfV2Addr.setStatus("deprecated")
_RcIpConfV2RowStatus_Type = RowStatus
_RcIpConfV2RowStatus_Object = MibTableColumn
rcIpConfV2RowStatus = _RcIpConfV2RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 3),
    _RcIpConfV2RowStatus_Type()
)
rcIpConfV2RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2RowStatus.setStatus("deprecated")
_RcIpConfV2AdvertDefRte_Type = TruthValue
_RcIpConfV2AdvertDefRte_Object = MibTableColumn
rcIpConfV2AdvertDefRte = _RcIpConfV2AdvertDefRte_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 4),
    _RcIpConfV2AdvertDefRte_Type()
)
rcIpConfV2AdvertDefRte.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2AdvertDefRte.setStatus("deprecated")
_RcIpConfV2AcceptDefRte_Type = TruthValue
_RcIpConfV2AcceptDefRte_Object = MibTableColumn
rcIpConfV2AcceptDefRte = _RcIpConfV2AcceptDefRte_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 5),
    _RcIpConfV2AcceptDefRte_Type()
)
rcIpConfV2AcceptDefRte.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2AcceptDefRte.setStatus("deprecated")
_RcIpConfV2RipEnable_Type = TruthValue
_RcIpConfV2RipEnable_Object = MibTableColumn
rcIpConfV2RipEnable = _RcIpConfV2RipEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 6),
    _RcIpConfV2RipEnable_Type()
)
rcIpConfV2RipEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2RipEnable.setStatus("deprecated")
_RcIpConfV2OspfEnable_Type = TruthValue
_RcIpConfV2OspfEnable_Object = MibTableColumn
rcIpConfV2OspfEnable = _RcIpConfV2OspfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 7),
    _RcIpConfV2OspfEnable_Type()
)
rcIpConfV2OspfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2OspfEnable.setStatus("deprecated")
_RcIpConfV2IgmpEnable_Type = TruthValue
_RcIpConfV2IgmpEnable_Object = MibTableColumn
rcIpConfV2IgmpEnable = _RcIpConfV2IgmpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 8),
    _RcIpConfV2IgmpEnable_Type()
)
rcIpConfV2IgmpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2IgmpEnable.setStatus("deprecated")
_RcIpConfV2AddrAssigned_Type = TruthValue
_RcIpConfV2AddrAssigned_Object = MibTableColumn
rcIpConfV2AddrAssigned = _RcIpConfV2AddrAssigned_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 9),
    _RcIpConfV2AddrAssigned_Type()
)
rcIpConfV2AddrAssigned.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfV2AddrAssigned.setStatus("deprecated")
_RcIpConfV2TriggeredUpdateEnable_Type = TruthValue
_RcIpConfV2TriggeredUpdateEnable_Object = MibTableColumn
rcIpConfV2TriggeredUpdateEnable = _RcIpConfV2TriggeredUpdateEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 10),
    _RcIpConfV2TriggeredUpdateEnable_Type()
)
rcIpConfV2TriggeredUpdateEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2TriggeredUpdateEnable.setStatus("deprecated")
_RcIpConfV2RipAutoAggrerateEnable_Type = TruthValue
_RcIpConfV2RipAutoAggrerateEnable_Object = MibTableColumn
rcIpConfV2RipAutoAggrerateEnable = _RcIpConfV2RipAutoAggrerateEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 11),
    _RcIpConfV2RipAutoAggrerateEnable_Type()
)
rcIpConfV2RipAutoAggrerateEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2RipAutoAggrerateEnable.setStatus("deprecated")
_RcIpConfV2RipGenerateDefaultRoute_Type = TruthValue
_RcIpConfV2RipGenerateDefaultRoute_Object = MibTableColumn
rcIpConfV2RipGenerateDefaultRoute = _RcIpConfV2RipGenerateDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 12),
    _RcIpConfV2RipGenerateDefaultRoute_Type()
)
rcIpConfV2RipGenerateDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2RipGenerateDefaultRoute.setStatus("deprecated")


class _RcIpConfV2AdvertiseWhenDown_Type(TruthValue):
    """Custom type rcIpConfV2AdvertiseWhenDown based on TruthValue"""


_RcIpConfV2AdvertiseWhenDown_Object = MibTableColumn
rcIpConfV2AdvertiseWhenDown = _RcIpConfV2AdvertiseWhenDown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 8, 1, 13),
    _RcIpConfV2AdvertiseWhenDown_Type()
)
rcIpConfV2AdvertiseWhenDown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfV2AdvertiseWhenDown.setStatus("deprecated")
_RcIpConfOspfV2Table_Object = MibTable
rcIpConfOspfV2Table = _RcIpConfOspfV2Table_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9)
)
if mibBuilder.loadTexts:
    rcIpConfOspfV2Table.setStatus("deprecated")
_RcIpConfOspfV2Entry_Object = MibTableRow
rcIpConfOspfV2Entry = _RcIpConfOspfV2Entry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1)
)
rcIpConfOspfV2Entry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfOspfV2IfIndex"),
    (0, "RAPID-CITY", "rcIpConfOspfV2IpAddr"),
)
if mibBuilder.loadTexts:
    rcIpConfOspfV2Entry.setStatus("deprecated")


class _RcIpConfOspfV2IfIndex_Type(InterfaceIndexOrZero):
    """Custom type rcIpConfOspfV2IfIndex based on InterfaceIndexOrZero"""
    subtypeSpec = InterfaceIndexOrZero.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6142),
    )


_RcIpConfOspfV2IfIndex_Type.__name__ = "InterfaceIndexOrZero"
_RcIpConfOspfV2IfIndex_Object = MibTableColumn
rcIpConfOspfV2IfIndex = _RcIpConfOspfV2IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 1),
    _RcIpConfOspfV2IfIndex_Type()
)
rcIpConfOspfV2IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfV2IfIndex.setStatus("deprecated")
_RcIpConfOspfV2IpAddr_Type = IpAddress
_RcIpConfOspfV2IpAddr_Object = MibTableColumn
rcIpConfOspfV2IpAddr = _RcIpConfOspfV2IpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 2),
    _RcIpConfOspfV2IpAddr_Type()
)
rcIpConfOspfV2IpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfV2IpAddr.setStatus("deprecated")


class _RcIpConfOspfV2RtrPriority_Type(Integer32):
    """Custom type rcIpConfOspfV2RtrPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpConfOspfV2RtrPriority_Type.__name__ = "Integer32"
_RcIpConfOspfV2RtrPriority_Object = MibTableColumn
rcIpConfOspfV2RtrPriority = _RcIpConfOspfV2RtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 3),
    _RcIpConfOspfV2RtrPriority_Type()
)
rcIpConfOspfV2RtrPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfV2RtrPriority.setStatus("deprecated")


class _RcIpConfOspfV2Metric_Type(Integer32):
    """Custom type rcIpConfOspfV2Metric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpConfOspfV2Metric_Type.__name__ = "Integer32"
_RcIpConfOspfV2Metric_Object = MibTableColumn
rcIpConfOspfV2Metric = _RcIpConfOspfV2Metric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 4),
    _RcIpConfOspfV2Metric_Type()
)
rcIpConfOspfV2Metric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfV2Metric.setStatus("deprecated")


class _RcIpConfOspfV2AuthKey_Type(DisplayString):
    """Custom type rcIpConfOspfV2AuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RcIpConfOspfV2AuthKey_Type.__name__ = "DisplayString"
_RcIpConfOspfV2AuthKey_Object = MibTableColumn
rcIpConfOspfV2AuthKey = _RcIpConfOspfV2AuthKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 5),
    _RcIpConfOspfV2AuthKey_Type()
)
rcIpConfOspfV2AuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfV2AuthKey.setStatus("deprecated")
_RcIpConfOspfV2RowStatus_Type = RowStatus
_RcIpConfOspfV2RowStatus_Object = MibTableColumn
rcIpConfOspfV2RowStatus = _RcIpConfOspfV2RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 6),
    _RcIpConfOspfV2RowStatus_Type()
)
rcIpConfOspfV2RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfV2RowStatus.setStatus("deprecated")


class _RcIpConfOspfV2HelloInterval_Type(Integer32):
    """Custom type rcIpConfOspfV2HelloInterval based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpConfOspfV2HelloInterval_Type.__name__ = "Integer32"
_RcIpConfOspfV2HelloInterval_Object = MibTableColumn
rcIpConfOspfV2HelloInterval = _RcIpConfOspfV2HelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 7),
    _RcIpConfOspfV2HelloInterval_Type()
)
rcIpConfOspfV2HelloInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfV2HelloInterval.setStatus("deprecated")


class _RcIpConfOspfV2RtrDeadInterval_Type(Integer32):
    """Custom type rcIpConfOspfV2RtrDeadInterval based on Integer32"""
    defaultValue = 40

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcIpConfOspfV2RtrDeadInterval_Type.__name__ = "Integer32"
_RcIpConfOspfV2RtrDeadInterval_Object = MibTableColumn
rcIpConfOspfV2RtrDeadInterval = _RcIpConfOspfV2RtrDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 8),
    _RcIpConfOspfV2RtrDeadInterval_Type()
)
rcIpConfOspfV2RtrDeadInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfV2RtrDeadInterval.setStatus("deprecated")


class _RcIpConfOspfV2IfAreaId_Type(IpAddress):
    """Custom type rcIpConfOspfV2IfAreaId based on IpAddress"""
    defaultHexValue = "00000000"


_RcIpConfOspfV2IfAreaId_Object = MibTableColumn
rcIpConfOspfV2IfAreaId = _RcIpConfOspfV2IfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 9),
    _RcIpConfOspfV2IfAreaId_Type()
)
rcIpConfOspfV2IfAreaId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfV2IfAreaId.setStatus("deprecated")


class _RcIpConfOspfV2AuthType_Type(Integer32):
    """Custom type rcIpConfOspfV2AuthType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("md5", 2),
          ("none", 0),
          ("simplePassword", 1))
    )


_RcIpConfOspfV2AuthType_Type.__name__ = "Integer32"
_RcIpConfOspfV2AuthType_Object = MibTableColumn
rcIpConfOspfV2AuthType = _RcIpConfOspfV2AuthType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 9, 1, 10),
    _RcIpConfOspfV2AuthType_Type()
)
rcIpConfOspfV2AuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfV2AuthType.setStatus("deprecated")
_RcIpConfOspfAreaAggregateTable_Object = MibTable
rcIpConfOspfAreaAggregateTable = _RcIpConfOspfAreaAggregateTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 10)
)
if mibBuilder.loadTexts:
    rcIpConfOspfAreaAggregateTable.setStatus("current")
_RcIpConfOspfAreaAggregateEntry_Object = MibTableRow
rcIpConfOspfAreaAggregateEntry = _RcIpConfOspfAreaAggregateEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 10, 1)
)
rcIpConfOspfAreaAggregateEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfOspfAreaAggregateAreaID"),
    (0, "RAPID-CITY", "rcIpConfOspfAreaAggregateLsdbType"),
    (0, "RAPID-CITY", "rcIpConfOspfAreaAggregateNet"),
    (0, "RAPID-CITY", "rcIpConfOspfAreaAggregateMask"),
)
if mibBuilder.loadTexts:
    rcIpConfOspfAreaAggregateEntry.setStatus("current")
_RcIpConfOspfAreaAggregateAreaID_Type = IpAddress
_RcIpConfOspfAreaAggregateAreaID_Object = MibTableColumn
rcIpConfOspfAreaAggregateAreaID = _RcIpConfOspfAreaAggregateAreaID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 10, 1, 1),
    _RcIpConfOspfAreaAggregateAreaID_Type()
)
rcIpConfOspfAreaAggregateAreaID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaAggregateAreaID.setStatus("current")


class _RcIpConfOspfAreaAggregateLsdbType_Type(Integer32):
    """Custom type rcIpConfOspfAreaAggregateLsdbType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              7)
        )
    )
    namedValues = NamedValues(
        *(("nssaExternalLink", 7),
          ("summaryLink", 3))
    )


_RcIpConfOspfAreaAggregateLsdbType_Type.__name__ = "Integer32"
_RcIpConfOspfAreaAggregateLsdbType_Object = MibTableColumn
rcIpConfOspfAreaAggregateLsdbType = _RcIpConfOspfAreaAggregateLsdbType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 10, 1, 2),
    _RcIpConfOspfAreaAggregateLsdbType_Type()
)
rcIpConfOspfAreaAggregateLsdbType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaAggregateLsdbType.setStatus("current")
_RcIpConfOspfAreaAggregateNet_Type = IpAddress
_RcIpConfOspfAreaAggregateNet_Object = MibTableColumn
rcIpConfOspfAreaAggregateNet = _RcIpConfOspfAreaAggregateNet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 10, 1, 3),
    _RcIpConfOspfAreaAggregateNet_Type()
)
rcIpConfOspfAreaAggregateNet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaAggregateNet.setStatus("current")
_RcIpConfOspfAreaAggregateMask_Type = IpAddress
_RcIpConfOspfAreaAggregateMask_Object = MibTableColumn
rcIpConfOspfAreaAggregateMask = _RcIpConfOspfAreaAggregateMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 10, 1, 4),
    _RcIpConfOspfAreaAggregateMask_Type()
)
rcIpConfOspfAreaAggregateMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaAggregateMask.setStatus("current")


class _RcIpConfOspfAreaAggregateAdvertiseMetric_Type(Integer32):
    """Custom type rcIpConfOspfAreaAggregateAdvertiseMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpConfOspfAreaAggregateAdvertiseMetric_Type.__name__ = "Integer32"
_RcIpConfOspfAreaAggregateAdvertiseMetric_Object = MibTableColumn
rcIpConfOspfAreaAggregateAdvertiseMetric = _RcIpConfOspfAreaAggregateAdvertiseMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 10, 1, 5),
    _RcIpConfOspfAreaAggregateAdvertiseMetric_Type()
)
rcIpConfOspfAreaAggregateAdvertiseMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaAggregateAdvertiseMetric.setStatus("current")


class _RcIpConfOspfAreaAggregateEffect_Type(Integer32):
    """Custom type rcIpConfOspfAreaAggregateEffect based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("advertiseDoNotAggregate", 3),
          ("advertiseMatching", 1),
          ("doNotAdvertiseMatching", 2))
    )


_RcIpConfOspfAreaAggregateEffect_Type.__name__ = "Integer32"
_RcIpConfOspfAreaAggregateEffect_Object = MibTableColumn
rcIpConfOspfAreaAggregateEffect = _RcIpConfOspfAreaAggregateEffect_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 10, 1, 6),
    _RcIpConfOspfAreaAggregateEffect_Type()
)
rcIpConfOspfAreaAggregateEffect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfOspfAreaAggregateEffect.setStatus("current")
_RcIpConfRsmltTable_Object = MibTable
rcIpConfRsmltTable = _RcIpConfRsmltTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 11)
)
if mibBuilder.loadTexts:
    rcIpConfRsmltTable.setStatus("current")
_RcIpConfRsmltEntry_Object = MibTableRow
rcIpConfRsmltEntry = _RcIpConfRsmltEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 11, 1)
)
rcIpConfRsmltEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfRsmltIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpConfRsmltEntry.setStatus("current")
_RcIpConfRsmltIfIndex_Type = InterfaceIndex
_RcIpConfRsmltIfIndex_Object = MibTableColumn
rcIpConfRsmltIfIndex = _RcIpConfRsmltIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 11, 1, 1),
    _RcIpConfRsmltIfIndex_Type()
)
rcIpConfRsmltIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfRsmltIfIndex.setStatus("current")


class _RcIpConfRsmltHoldDownTimer_Type(Integer32):
    """Custom type rcIpConfRsmltHoldDownTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpConfRsmltHoldDownTimer_Type.__name__ = "Integer32"
_RcIpConfRsmltHoldDownTimer_Object = MibTableColumn
rcIpConfRsmltHoldDownTimer = _RcIpConfRsmltHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 11, 1, 2),
    _RcIpConfRsmltHoldDownTimer_Type()
)
rcIpConfRsmltHoldDownTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRsmltHoldDownTimer.setStatus("current")


class _RcIpConfRsmltHoldUpTimer_Type(Integer32):
    """Custom type rcIpConfRsmltHoldUpTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpConfRsmltHoldUpTimer_Type.__name__ = "Integer32"
_RcIpConfRsmltHoldUpTimer_Object = MibTableColumn
rcIpConfRsmltHoldUpTimer = _RcIpConfRsmltHoldUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 11, 1, 3),
    _RcIpConfRsmltHoldUpTimer_Type()
)
rcIpConfRsmltHoldUpTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRsmltHoldUpTimer.setStatus("current")
_RcIpConfRsmltRowStatus_Type = RowStatus
_RcIpConfRsmltRowStatus_Object = MibTableColumn
rcIpConfRsmltRowStatus = _RcIpConfRsmltRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 11, 1, 4),
    _RcIpConfRsmltRowStatus_Type()
)
rcIpConfRsmltRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfRsmltRowStatus.setStatus("current")
_RcIpConfBfdTable_Object = MibTable
rcIpConfBfdTable = _RcIpConfBfdTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12)
)
if mibBuilder.loadTexts:
    rcIpConfBfdTable.setStatus("current")
_RcIpConfBfdEntry_Object = MibTableRow
rcIpConfBfdEntry = _RcIpConfBfdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12, 1)
)
rcIpConfBfdEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfBfdIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpConfBfdEntry.setStatus("current")
_RcIpConfBfdIfIndex_Type = InterfaceIndex
_RcIpConfBfdIfIndex_Object = MibTableColumn
rcIpConfBfdIfIndex = _RcIpConfBfdIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12, 1, 1),
    _RcIpConfBfdIfIndex_Type()
)
rcIpConfBfdIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpConfBfdIfIndex.setStatus("current")


class _RcIpConfBfdMinRxInterval_Type(Integer32):
    """Custom type rcIpConfBfdMinRxInterval based on Integer32"""
    defaultValue = 200

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 65535),
    )


_RcIpConfBfdMinRxInterval_Type.__name__ = "Integer32"
_RcIpConfBfdMinRxInterval_Object = MibTableColumn
rcIpConfBfdMinRxInterval = _RcIpConfBfdMinRxInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12, 1, 2),
    _RcIpConfBfdMinRxInterval_Type()
)
rcIpConfBfdMinRxInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpConfBfdMinRxInterval.setStatus("current")


class _RcIpConfBfdTxInterval_Type(Integer32):
    """Custom type rcIpConfBfdTxInterval based on Integer32"""
    defaultValue = 200

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 65535),
    )


_RcIpConfBfdTxInterval_Type.__name__ = "Integer32"
_RcIpConfBfdTxInterval_Object = MibTableColumn
rcIpConfBfdTxInterval = _RcIpConfBfdTxInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12, 1, 3),
    _RcIpConfBfdTxInterval_Type()
)
rcIpConfBfdTxInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpConfBfdTxInterval.setStatus("current")


class _RcIpConfBfdMultiplier_Type(Integer32):
    """Custom type rcIpConfBfdMultiplier based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_RcIpConfBfdMultiplier_Type.__name__ = "Integer32"
_RcIpConfBfdMultiplier_Object = MibTableColumn
rcIpConfBfdMultiplier = _RcIpConfBfdMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12, 1, 4),
    _RcIpConfBfdMultiplier_Type()
)
rcIpConfBfdMultiplier.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpConfBfdMultiplier.setStatus("current")
_RcIpConfBfdRowStatus_Type = RowStatus
_RcIpConfBfdRowStatus_Object = MibTableColumn
rcIpConfBfdRowStatus = _RcIpConfBfdRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12, 1, 5),
    _RcIpConfBfdRowStatus_Type()
)
rcIpConfBfdRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpConfBfdRowStatus.setStatus("current")


class _RcIpConfBfdHoldOffInterval_Type(Unsigned32):
    """Custom type rcIpConfBfdHoldOffInterval based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpConfBfdHoldOffInterval_Type.__name__ = "Unsigned32"
_RcIpConfBfdHoldOffInterval_Object = MibTableColumn
rcIpConfBfdHoldOffInterval = _RcIpConfBfdHoldOffInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12, 1, 6),
    _RcIpConfBfdHoldOffInterval_Type()
)
rcIpConfBfdHoldOffInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpConfBfdHoldOffInterval.setStatus("current")


class _RcIpConfBfdStaticFlag_Type(EnableValue):
    """Custom type rcIpConfBfdStaticFlag based on EnableValue"""


_RcIpConfBfdStaticFlag_Object = MibTableColumn
rcIpConfBfdStaticFlag = _RcIpConfBfdStaticFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 1, 12, 1, 7),
    _RcIpConfBfdStaticFlag_Type()
)
rcIpConfBfdStaticFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpConfBfdStaticFlag.setStatus("current")
_RcIpAddrTable_Object = MibTable
rcIpAddrTable = _RcIpAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2)
)
if mibBuilder.loadTexts:
    rcIpAddrTable.setStatus("current")
_RcIpAddrEntry_Object = MibTableRow
rcIpAddrEntry = _RcIpAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1)
)
rcIpAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpAdEntIfIndex"),
    (0, "RAPID-CITY", "rcIpAdEntAddr"),
)
if mibBuilder.loadTexts:
    rcIpAddrEntry.setStatus("current")
_RcIpAdEntIfIndex_Type = InterfaceIndex
_RcIpAdEntIfIndex_Object = MibTableColumn
rcIpAdEntIfIndex = _RcIpAdEntIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 1),
    _RcIpAdEntIfIndex_Type()
)
rcIpAdEntIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAdEntIfIndex.setStatus("current")
_RcIpAdEntAddr_Type = IpAddress
_RcIpAdEntAddr_Object = MibTableColumn
rcIpAdEntAddr = _RcIpAdEntAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 2),
    _RcIpAdEntAddr_Type()
)
rcIpAdEntAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAdEntAddr.setStatus("current")
_RcIpAdEntNetMask_Type = IpAddress
_RcIpAdEntNetMask_Object = MibTableColumn
rcIpAdEntNetMask = _RcIpAdEntNetMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 3),
    _RcIpAdEntNetMask_Type()
)
rcIpAdEntNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAdEntNetMask.setStatus("current")


class _RcIpAdEntBcastAddrFormat_Type(Integer32):
    """Custom type rcIpAdEntBcastAddrFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ones", 1),
          ("zeros", 0))
    )


_RcIpAdEntBcastAddrFormat_Type.__name__ = "Integer32"
_RcIpAdEntBcastAddrFormat_Object = MibTableColumn
rcIpAdEntBcastAddrFormat = _RcIpAdEntBcastAddrFormat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 4),
    _RcIpAdEntBcastAddrFormat_Type()
)
rcIpAdEntBcastAddrFormat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAdEntBcastAddrFormat.setStatus("current")


class _RcIpAdEntReasmMaxSize_Type(Integer32):
    """Custom type rcIpAdEntReasmMaxSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpAdEntReasmMaxSize_Type.__name__ = "Integer32"
_RcIpAdEntReasmMaxSize_Object = MibTableColumn
rcIpAdEntReasmMaxSize = _RcIpAdEntReasmMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 5),
    _RcIpAdEntReasmMaxSize_Type()
)
rcIpAdEntReasmMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAdEntReasmMaxSize.setStatus("current")
_RcIpAdEntRowStatus_Type = RowStatus
_RcIpAdEntRowStatus_Object = MibTableColumn
rcIpAdEntRowStatus = _RcIpAdEntRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 6),
    _RcIpAdEntRowStatus_Type()
)
rcIpAdEntRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAdEntRowStatus.setStatus("current")


class _RcIpAdEntVlanId_Type(Integer32):
    """Custom type rcIpAdEntVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_RcIpAdEntVlanId_Type.__name__ = "Integer32"
_RcIpAdEntVlanId_Object = MibTableColumn
rcIpAdEntVlanId = _RcIpAdEntVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 7),
    _RcIpAdEntVlanId_Type()
)
rcIpAdEntVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAdEntVlanId.setStatus("current")
_RcIpAdEntBrouterPort_Type = TruthValue
_RcIpAdEntBrouterPort_Object = MibTableColumn
rcIpAdEntBrouterPort = _RcIpAdEntBrouterPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 8),
    _RcIpAdEntBrouterPort_Type()
)
rcIpAdEntBrouterPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAdEntBrouterPort.setStatus("current")


class _RcIpAdEntMacOffset_Type(Integer32):
    """Custom type rcIpAdEntMacOffset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 511),
    )


_RcIpAdEntMacOffset_Type.__name__ = "Integer32"
_RcIpAdEntMacOffset_Object = MibTableColumn
rcIpAdEntMacOffset = _RcIpAdEntMacOffset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 9),
    _RcIpAdEntMacOffset_Type()
)
rcIpAdEntMacOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAdEntMacOffset.setStatus("current")


class _RcIpAdEntIfType_Type(Integer32):
    """Custom type rcIpAdEntIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("brouterPort", 2),
          ("circuitLessIP", 1),
          ("vlan", 3))
    )


_RcIpAdEntIfType_Type.__name__ = "Integer32"
_RcIpAdEntIfType_Object = MibTableColumn
rcIpAdEntIfType = _RcIpAdEntIfType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 10),
    _RcIpAdEntIfType_Type()
)
rcIpAdEntIfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAdEntIfType.setStatus("current")
_RcIpAdEntVrfId_Type = VrfIdentifier
_RcIpAdEntVrfId_Object = MibTableColumn
rcIpAdEntVrfId = _RcIpAdEntVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 2, 1, 12),
    _RcIpAdEntVrfId_Type()
)
rcIpAdEntVrfId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpAdEntVrfId.setStatus("current")
_RcIpFlowTable_Object = MibTable
rcIpFlowTable = _RcIpFlowTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 3)
)
if mibBuilder.loadTexts:
    rcIpFlowTable.setStatus("current")
_RcIpFlowEntry_Object = MibTableRow
rcIpFlowEntry = _RcIpFlowEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 3, 1)
)
rcIpFlowEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpFlowSrcIpAddress"),
    (0, "RAPID-CITY", "rcIpFlowSrcIpPort"),
    (0, "RAPID-CITY", "rcIpFlowDstIpAddress"),
    (0, "RAPID-CITY", "rcIpFlowDstIpPort"),
    (0, "RAPID-CITY", "rcIpFlowProtocol"),
)
if mibBuilder.loadTexts:
    rcIpFlowEntry.setStatus("current")
_RcIpFlowSrcIpAddress_Type = IpAddress
_RcIpFlowSrcIpAddress_Object = MibTableColumn
rcIpFlowSrcIpAddress = _RcIpFlowSrcIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 3, 1, 1),
    _RcIpFlowSrcIpAddress_Type()
)
rcIpFlowSrcIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFlowSrcIpAddress.setStatus("current")


class _RcIpFlowSrcIpPort_Type(Integer32):
    """Custom type rcIpFlowSrcIpPort based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpFlowSrcIpPort_Type.__name__ = "Integer32"
_RcIpFlowSrcIpPort_Object = MibTableColumn
rcIpFlowSrcIpPort = _RcIpFlowSrcIpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 3, 1, 2),
    _RcIpFlowSrcIpPort_Type()
)
rcIpFlowSrcIpPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFlowSrcIpPort.setStatus("current")
_RcIpFlowDstIpAddress_Type = IpAddress
_RcIpFlowDstIpAddress_Object = MibTableColumn
rcIpFlowDstIpAddress = _RcIpFlowDstIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 3, 1, 3),
    _RcIpFlowDstIpAddress_Type()
)
rcIpFlowDstIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFlowDstIpAddress.setStatus("current")


class _RcIpFlowDstIpPort_Type(Integer32):
    """Custom type rcIpFlowDstIpPort based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpFlowDstIpPort_Type.__name__ = "Integer32"
_RcIpFlowDstIpPort_Object = MibTableColumn
rcIpFlowDstIpPort = _RcIpFlowDstIpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 3, 1, 4),
    _RcIpFlowDstIpPort_Type()
)
rcIpFlowDstIpPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFlowDstIpPort.setStatus("current")


class _RcIpFlowProtocol_Type(Integer32):
    """Custom type rcIpFlowProtocol based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              6,
              17)
        )
    )
    namedValues = NamedValues(
        *(("ip", 4),
          ("tcp", 6),
          ("udp", 17))
    )


_RcIpFlowProtocol_Type.__name__ = "Integer32"
_RcIpFlowProtocol_Object = MibTableColumn
rcIpFlowProtocol = _RcIpFlowProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 3, 1, 5),
    _RcIpFlowProtocol_Type()
)
rcIpFlowProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFlowProtocol.setStatus("current")
_RcIpFlowRowStatus_Type = RowStatus
_RcIpFlowRowStatus_Object = MibTableColumn
rcIpFlowRowStatus = _RcIpFlowRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 3, 1, 6),
    _RcIpFlowRowStatus_Type()
)
rcIpFlowRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFlowRowStatus.setStatus("current")
_RcIpRouting_ObjectIdentity = ObjectIdentity
rcIpRouting = _RcIpRouting_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4)
)
_RcIpRoutingRedistributeRipToOspf_ObjectIdentity = ObjectIdentity
rcIpRoutingRedistributeRipToOspf = _RcIpRoutingRedistributeRipToOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 1)
)


class _RcIpRoutingRedistributeRipToOspfEnable_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeRipToOspfEnable based on TruthValue"""


_RcIpRoutingRedistributeRipToOspfEnable_Object = MibScalar
rcIpRoutingRedistributeRipToOspfEnable = _RcIpRoutingRedistributeRipToOspfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 1, 1),
    _RcIpRoutingRedistributeRipToOspfEnable_Type()
)
rcIpRoutingRedistributeRipToOspfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeRipToOspfEnable.setStatus("obsolete")


class _RcIpRoutingRedistributeRipToOspfExplicitMetric_Type(Integer32):
    """Custom type rcIpRoutingRedistributeRipToOspfExplicitMetric based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpRoutingRedistributeRipToOspfExplicitMetric_Type.__name__ = "Integer32"
_RcIpRoutingRedistributeRipToOspfExplicitMetric_Object = MibScalar
rcIpRoutingRedistributeRipToOspfExplicitMetric = _RcIpRoutingRedistributeRipToOspfExplicitMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 1, 2),
    _RcIpRoutingRedistributeRipToOspfExplicitMetric_Type()
)
rcIpRoutingRedistributeRipToOspfExplicitMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeRipToOspfExplicitMetric.setStatus("obsolete")


class _RcIpRoutingRedistributeRipToOspfUseExplicitMetric_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeRipToOspfUseExplicitMetric based on TruthValue"""


_RcIpRoutingRedistributeRipToOspfUseExplicitMetric_Object = MibScalar
rcIpRoutingRedistributeRipToOspfUseExplicitMetric = _RcIpRoutingRedistributeRipToOspfUseExplicitMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 1, 3),
    _RcIpRoutingRedistributeRipToOspfUseExplicitMetric_Type()
)
rcIpRoutingRedistributeRipToOspfUseExplicitMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeRipToOspfUseExplicitMetric.setStatus("obsolete")


class _RcIpRoutingRedistributeRipToOspfExternalMetricType_Type(Integer32):
    """Custom type rcIpRoutingRedistributeRipToOspfExternalMetricType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("type1", 1),
          ("type2", 2))
    )


_RcIpRoutingRedistributeRipToOspfExternalMetricType_Type.__name__ = "Integer32"
_RcIpRoutingRedistributeRipToOspfExternalMetricType_Object = MibScalar
rcIpRoutingRedistributeRipToOspfExternalMetricType = _RcIpRoutingRedistributeRipToOspfExternalMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 1, 4),
    _RcIpRoutingRedistributeRipToOspfExternalMetricType_Type()
)
rcIpRoutingRedistributeRipToOspfExternalMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeRipToOspfExternalMetricType.setStatus("obsolete")
_RcIpRoutingRedistributeOspfToRip_ObjectIdentity = ObjectIdentity
rcIpRoutingRedistributeOspfToRip = _RcIpRoutingRedistributeOspfToRip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 2)
)


class _RcIpRoutingRedistributeOspfToRipEnable_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeOspfToRipEnable based on TruthValue"""


_RcIpRoutingRedistributeOspfToRipEnable_Object = MibScalar
rcIpRoutingRedistributeOspfToRipEnable = _RcIpRoutingRedistributeOspfToRipEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 2, 1),
    _RcIpRoutingRedistributeOspfToRipEnable_Type()
)
rcIpRoutingRedistributeOspfToRipEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeOspfToRipEnable.setStatus("obsolete")


class _RcIpRoutingRedistributeOspfToRipExplicitMetric_Type(Integer32):
    """Custom type rcIpRoutingRedistributeOspfToRipExplicitMetric based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RcIpRoutingRedistributeOspfToRipExplicitMetric_Type.__name__ = "Integer32"
_RcIpRoutingRedistributeOspfToRipExplicitMetric_Object = MibScalar
rcIpRoutingRedistributeOspfToRipExplicitMetric = _RcIpRoutingRedistributeOspfToRipExplicitMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 2, 2),
    _RcIpRoutingRedistributeOspfToRipExplicitMetric_Type()
)
rcIpRoutingRedistributeOspfToRipExplicitMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeOspfToRipExplicitMetric.setStatus("obsolete")


class _RcIpRoutingRedistributeOspfToRipUseExplicitMetric_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeOspfToRipUseExplicitMetric based on TruthValue"""


_RcIpRoutingRedistributeOspfToRipUseExplicitMetric_Object = MibScalar
rcIpRoutingRedistributeOspfToRipUseExplicitMetric = _RcIpRoutingRedistributeOspfToRipUseExplicitMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 2, 3),
    _RcIpRoutingRedistributeOspfToRipUseExplicitMetric_Type()
)
rcIpRoutingRedistributeOspfToRipUseExplicitMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeOspfToRipUseExplicitMetric.setStatus("obsolete")
_RcIpRoutingRedistributeDirectToOspf_ObjectIdentity = ObjectIdentity
rcIpRoutingRedistributeDirectToOspf = _RcIpRoutingRedistributeDirectToOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 3)
)


class _RcIpRoutingRedistributeDirectToOspfEnable_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeDirectToOspfEnable based on TruthValue"""


_RcIpRoutingRedistributeDirectToOspfEnable_Object = MibScalar
rcIpRoutingRedistributeDirectToOspfEnable = _RcIpRoutingRedistributeDirectToOspfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 3, 1),
    _RcIpRoutingRedistributeDirectToOspfEnable_Type()
)
rcIpRoutingRedistributeDirectToOspfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeDirectToOspfEnable.setStatus("obsolete")


class _RcIpRoutingRedistributeDirectToOspfMethod_Type(Integer32):
    """Custom type rcIpRoutingRedistributeDirectToOspfMethod based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("useExplicitMetric", 2),
          ("usePortSpeed", 1))
    )


_RcIpRoutingRedistributeDirectToOspfMethod_Type.__name__ = "Integer32"
_RcIpRoutingRedistributeDirectToOspfMethod_Object = MibScalar
rcIpRoutingRedistributeDirectToOspfMethod = _RcIpRoutingRedistributeDirectToOspfMethod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 3, 2),
    _RcIpRoutingRedistributeDirectToOspfMethod_Type()
)
rcIpRoutingRedistributeDirectToOspfMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeDirectToOspfMethod.setStatus("obsolete")


class _RcIpRoutingRedistributeDirectToOspfExplicitMetric_Type(Integer32):
    """Custom type rcIpRoutingRedistributeDirectToOspfExplicitMetric based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpRoutingRedistributeDirectToOspfExplicitMetric_Type.__name__ = "Integer32"
_RcIpRoutingRedistributeDirectToOspfExplicitMetric_Object = MibScalar
rcIpRoutingRedistributeDirectToOspfExplicitMetric = _RcIpRoutingRedistributeDirectToOspfExplicitMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 3, 3),
    _RcIpRoutingRedistributeDirectToOspfExplicitMetric_Type()
)
rcIpRoutingRedistributeDirectToOspfExplicitMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeDirectToOspfExplicitMetric.setStatus("obsolete")


class _RcIpRoutingRedistributeDirectToOspfExternalMetricType_Type(Integer32):
    """Custom type rcIpRoutingRedistributeDirectToOspfExternalMetricType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("type1", 1),
          ("type2", 2))
    )


_RcIpRoutingRedistributeDirectToOspfExternalMetricType_Type.__name__ = "Integer32"
_RcIpRoutingRedistributeDirectToOspfExternalMetricType_Object = MibScalar
rcIpRoutingRedistributeDirectToOspfExternalMetricType = _RcIpRoutingRedistributeDirectToOspfExternalMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 3, 4),
    _RcIpRoutingRedistributeDirectToOspfExternalMetricType_Type()
)
rcIpRoutingRedistributeDirectToOspfExternalMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeDirectToOspfExternalMetricType.setStatus("obsolete")
_RcIpRoutingRedistributeStaticToOspf_ObjectIdentity = ObjectIdentity
rcIpRoutingRedistributeStaticToOspf = _RcIpRoutingRedistributeStaticToOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 4)
)


class _RcIpRoutingRedistributeStaticToOspfEnable_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeStaticToOspfEnable based on TruthValue"""


_RcIpRoutingRedistributeStaticToOspfEnable_Object = MibScalar
rcIpRoutingRedistributeStaticToOspfEnable = _RcIpRoutingRedistributeStaticToOspfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 4, 1),
    _RcIpRoutingRedistributeStaticToOspfEnable_Type()
)
rcIpRoutingRedistributeStaticToOspfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeStaticToOspfEnable.setStatus("obsolete")


class _RcIpRoutingRedistributeStaticToOspfExplicitMetric_Type(Integer32):
    """Custom type rcIpRoutingRedistributeStaticToOspfExplicitMetric based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpRoutingRedistributeStaticToOspfExplicitMetric_Type.__name__ = "Integer32"
_RcIpRoutingRedistributeStaticToOspfExplicitMetric_Object = MibScalar
rcIpRoutingRedistributeStaticToOspfExplicitMetric = _RcIpRoutingRedistributeStaticToOspfExplicitMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 4, 2),
    _RcIpRoutingRedistributeStaticToOspfExplicitMetric_Type()
)
rcIpRoutingRedistributeStaticToOspfExplicitMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeStaticToOspfExplicitMetric.setStatus("obsolete")


class _RcIpRoutingRedistributeStaticToOspfUseExplicitMetric_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeStaticToOspfUseExplicitMetric based on TruthValue"""


_RcIpRoutingRedistributeStaticToOspfUseExplicitMetric_Object = MibScalar
rcIpRoutingRedistributeStaticToOspfUseExplicitMetric = _RcIpRoutingRedistributeStaticToOspfUseExplicitMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 4, 3),
    _RcIpRoutingRedistributeStaticToOspfUseExplicitMetric_Type()
)
rcIpRoutingRedistributeStaticToOspfUseExplicitMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeStaticToOspfUseExplicitMetric.setStatus("obsolete")


class _RcIpRoutingRedistributeStaticToOspfExternalMetricType_Type(Integer32):
    """Custom type rcIpRoutingRedistributeStaticToOspfExternalMetricType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("type1", 1),
          ("type2", 2))
    )


_RcIpRoutingRedistributeStaticToOspfExternalMetricType_Type.__name__ = "Integer32"
_RcIpRoutingRedistributeStaticToOspfExternalMetricType_Object = MibScalar
rcIpRoutingRedistributeStaticToOspfExternalMetricType = _RcIpRoutingRedistributeStaticToOspfExternalMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 4, 4),
    _RcIpRoutingRedistributeStaticToOspfExternalMetricType_Type()
)
rcIpRoutingRedistributeStaticToOspfExternalMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeStaticToOspfExternalMetricType.setStatus("obsolete")


class _RcIpRoutingRedistributeStaticToOspfAdvertDefRte_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeStaticToOspfAdvertDefRte based on TruthValue"""


_RcIpRoutingRedistributeStaticToOspfAdvertDefRte_Object = MibScalar
rcIpRoutingRedistributeStaticToOspfAdvertDefRte = _RcIpRoutingRedistributeStaticToOspfAdvertDefRte_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 4, 5),
    _RcIpRoutingRedistributeStaticToOspfAdvertDefRte_Type()
)
rcIpRoutingRedistributeStaticToOspfAdvertDefRte.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeStaticToOspfAdvertDefRte.setStatus("obsolete")
_RcIpRoutingRedistributeDirectToRip_ObjectIdentity = ObjectIdentity
rcIpRoutingRedistributeDirectToRip = _RcIpRoutingRedistributeDirectToRip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 5)
)


class _RcIpRoutingRedistributeDirectToRipEnable_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeDirectToRipEnable based on TruthValue"""


_RcIpRoutingRedistributeDirectToRipEnable_Object = MibScalar
rcIpRoutingRedistributeDirectToRipEnable = _RcIpRoutingRedistributeDirectToRipEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 5, 1),
    _RcIpRoutingRedistributeDirectToRipEnable_Type()
)
rcIpRoutingRedistributeDirectToRipEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeDirectToRipEnable.setStatus("obsolete")
_RcIpRoutingRedistributeStaticToRip_ObjectIdentity = ObjectIdentity
rcIpRoutingRedistributeStaticToRip = _RcIpRoutingRedistributeStaticToRip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 6)
)


class _RcIpRoutingRedistributeStaticToRipEnable_Type(TruthValue):
    """Custom type rcIpRoutingRedistributeStaticToRipEnable based on TruthValue"""


_RcIpRoutingRedistributeStaticToRipEnable_Object = MibScalar
rcIpRoutingRedistributeStaticToRipEnable = _RcIpRoutingRedistributeStaticToRipEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 4, 6, 1),
    _RcIpRoutingRedistributeStaticToRipEnable_Type()
)
rcIpRoutingRedistributeStaticToRipEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutingRedistributeStaticToRipEnable.setStatus("obsolete")
_RcIpConfIgmpTable_Object = MibTable
rcIpConfIgmpTable = _RcIpConfIgmpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5)
)
if mibBuilder.loadTexts:
    rcIpConfIgmpTable.setStatus("deprecated")
_RcIpConfIgmpEntry_Object = MibTableRow
rcIpConfIgmpEntry = _RcIpConfIgmpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1)
)
rcIpConfIgmpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfIgmpIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpConfIgmpEntry.setStatus("deprecated")


class _RcIpConfIgmpIfIndex_Type(Integer32):
    """Custom type rcIpConfIgmpIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpConfIgmpIfIndex_Type.__name__ = "Integer32"
_RcIpConfIgmpIfIndex_Object = MibTableColumn
rcIpConfIgmpIfIndex = _RcIpConfIgmpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 1),
    _RcIpConfIgmpIfIndex_Type()
)
rcIpConfIgmpIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfIgmpIfIndex.setStatus("deprecated")


class _RcIpConfIgmpQueryInterval_Type(Integer32):
    """Custom type rcIpConfIgmpQueryInterval based on Integer32"""
    defaultValue = 125

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpConfIgmpQueryInterval_Type.__name__ = "Integer32"
_RcIpConfIgmpQueryInterval_Object = MibTableColumn
rcIpConfIgmpQueryInterval = _RcIpConfIgmpQueryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 2),
    _RcIpConfIgmpQueryInterval_Type()
)
rcIpConfIgmpQueryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpQueryInterval.setStatus("deprecated")


class _RcIpConfIgmpVersion_Type(Integer32):
    """Custom type rcIpConfIgmpVersion based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("version1", 1),
          ("version2", 2))
    )


_RcIpConfIgmpVersion_Type.__name__ = "Integer32"
_RcIpConfIgmpVersion_Object = MibTableColumn
rcIpConfIgmpVersion = _RcIpConfIgmpVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 3),
    _RcIpConfIgmpVersion_Type()
)
rcIpConfIgmpVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpVersion.setStatus("deprecated")


class _RcIpConfIgmpQueryMaxResponseTime_Type(Integer32):
    """Custom type rcIpConfIgmpQueryMaxResponseTime based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpConfIgmpQueryMaxResponseTime_Type.__name__ = "Integer32"
_RcIpConfIgmpQueryMaxResponseTime_Object = MibTableColumn
rcIpConfIgmpQueryMaxResponseTime = _RcIpConfIgmpQueryMaxResponseTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 4),
    _RcIpConfIgmpQueryMaxResponseTime_Type()
)
rcIpConfIgmpQueryMaxResponseTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpQueryMaxResponseTime.setStatus("deprecated")


class _RcIpConfIgmpQuerierPresentTimeout_Type(Integer32):
    """Custom type rcIpConfIgmpQuerierPresentTimeout based on Integer32"""
    defaultValue = 255


_RcIpConfIgmpQuerierPresentTimeout_Object = MibTableColumn
rcIpConfIgmpQuerierPresentTimeout = _RcIpConfIgmpQuerierPresentTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 5),
    _RcIpConfIgmpQuerierPresentTimeout_Type()
)
rcIpConfIgmpQuerierPresentTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpQuerierPresentTimeout.setStatus("deprecated")


class _RcIpConfIgmpLeaveEnabled_Type(TruthValue):
    """Custom type rcIpConfIgmpLeaveEnabled based on TruthValue"""


_RcIpConfIgmpLeaveEnabled_Object = MibTableColumn
rcIpConfIgmpLeaveEnabled = _RcIpConfIgmpLeaveEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 6),
    _RcIpConfIgmpLeaveEnabled_Type()
)
rcIpConfIgmpLeaveEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpLeaveEnabled.setStatus("deprecated")
_RcIpConfIgmpRowStatus_Type = RowStatus
_RcIpConfIgmpRowStatus_Object = MibTableColumn
rcIpConfIgmpRowStatus = _RcIpConfIgmpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 7),
    _RcIpConfIgmpRowStatus_Type()
)
rcIpConfIgmpRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpRowStatus.setStatus("deprecated")


class _RcIpConfIgmpRobustness_Type(Integer32):
    """Custom type rcIpConfIgmpRobustness based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 255),
    )


_RcIpConfIgmpRobustness_Type.__name__ = "Integer32"
_RcIpConfIgmpRobustness_Object = MibTableColumn
rcIpConfIgmpRobustness = _RcIpConfIgmpRobustness_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 8),
    _RcIpConfIgmpRobustness_Type()
)
rcIpConfIgmpRobustness.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpRobustness.setStatus("deprecated")


class _RcIpConfIgmpLastMemberQueryInterval_Type(Integer32):
    """Custom type rcIpConfIgmpLastMemberQueryInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpConfIgmpLastMemberQueryInterval_Type.__name__ = "Integer32"
_RcIpConfIgmpLastMemberQueryInterval_Object = MibTableColumn
rcIpConfIgmpLastMemberQueryInterval = _RcIpConfIgmpLastMemberQueryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 9),
    _RcIpConfIgmpLastMemberQueryInterval_Type()
)
rcIpConfIgmpLastMemberQueryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpLastMemberQueryInterval.setStatus("deprecated")


class _RcIpConfIgmpSnoopEnable_Type(TruthValue):
    """Custom type rcIpConfIgmpSnoopEnable based on TruthValue"""


_RcIpConfIgmpSnoopEnable_Object = MibTableColumn
rcIpConfIgmpSnoopEnable = _RcIpConfIgmpSnoopEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 10),
    _RcIpConfIgmpSnoopEnable_Type()
)
rcIpConfIgmpSnoopEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpSnoopEnable.setStatus("deprecated")


class _RcIpConfIgmpProxySnoopEnable_Type(TruthValue):
    """Custom type rcIpConfIgmpProxySnoopEnable based on TruthValue"""


_RcIpConfIgmpProxySnoopEnable_Object = MibTableColumn
rcIpConfIgmpProxySnoopEnable = _RcIpConfIgmpProxySnoopEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 5, 1, 11),
    _RcIpConfIgmpProxySnoopEnable_Type()
)
rcIpConfIgmpProxySnoopEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIgmpProxySnoopEnable.setStatus("deprecated")
_RcIgmpGroupTable_Object = MibTable
rcIgmpGroupTable = _RcIgmpGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6)
)
if mibBuilder.loadTexts:
    rcIgmpGroupTable.setStatus("deprecated")
_RcIgmpGroupEntry_Object = MibTableRow
rcIgmpGroupEntry = _RcIgmpGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1)
)
rcIgmpGroupEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpGroupIpAddress"),
    (0, "RAPID-CITY", "rcIgmpGroupMembers"),
)
if mibBuilder.loadTexts:
    rcIgmpGroupEntry.setStatus("deprecated")
_RcIgmpGroupIpAddress_Type = IpAddress
_RcIgmpGroupIpAddress_Object = MibTableColumn
rcIgmpGroupIpAddress = _RcIgmpGroupIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1, 1),
    _RcIgmpGroupIpAddress_Type()
)
rcIgmpGroupIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpGroupIpAddress.setStatus("deprecated")
_RcIgmpGroupMembers_Type = IpAddress
_RcIgmpGroupMembers_Object = MibTableColumn
rcIgmpGroupMembers = _RcIgmpGroupMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1, 2),
    _RcIgmpGroupMembers_Type()
)
rcIgmpGroupMembers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpGroupMembers.setStatus("deprecated")


class _RcIgmpGroupInPort_Type(Integer32):
    """Custom type rcIgmpGroupInPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIgmpGroupInPort_Type.__name__ = "Integer32"
_RcIgmpGroupInPort_Object = MibTableColumn
rcIgmpGroupInPort = _RcIgmpGroupInPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1, 3),
    _RcIgmpGroupInPort_Type()
)
rcIgmpGroupInPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpGroupInPort.setStatus("deprecated")
_RcIgmpGroupExpiration_Type = Integer32
_RcIgmpGroupExpiration_Object = MibTableColumn
rcIgmpGroupExpiration = _RcIgmpGroupExpiration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1, 4),
    _RcIgmpGroupExpiration_Type()
)
rcIgmpGroupExpiration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpGroupExpiration.setStatus("deprecated")
_RcIgmpGroupIfIndex_Type = InterfaceIndex
_RcIgmpGroupIfIndex_Object = MibTableColumn
rcIgmpGroupIfIndex = _RcIgmpGroupIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1, 5),
    _RcIgmpGroupIfIndex_Type()
)
rcIgmpGroupIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpGroupIfIndex.setStatus("deprecated")


class _RcIgmpGroupUserId_Type(DisplayString):
    """Custom type rcIgmpGroupUserId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcIgmpGroupUserId_Type.__name__ = "DisplayString"
_RcIgmpGroupUserId_Object = MibTableColumn
rcIgmpGroupUserId = _RcIgmpGroupUserId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1, 6),
    _RcIgmpGroupUserId_Type()
)
rcIgmpGroupUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpGroupUserId.setStatus("deprecated")


class _RcIgmpGroupMemberState_Type(Integer32):
    """Custom type rcIgmpGroupMemberState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("accStart", 3),
          ("auth", 2),
          ("authAndAcctDisabled", 5),
          ("authAndAcctStart", 4),
          ("noState", 1))
    )


_RcIgmpGroupMemberState_Type.__name__ = "Integer32"
_RcIgmpGroupMemberState_Object = MibTableColumn
rcIgmpGroupMemberState = _RcIgmpGroupMemberState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1, 7),
    _RcIgmpGroupMemberState_Type()
)
rcIgmpGroupMemberState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpGroupMemberState.setStatus("deprecated")
_RcIgmpGroupSessionTime_Type = Integer32
_RcIgmpGroupSessionTime_Object = MibTableColumn
rcIgmpGroupSessionTime = _RcIgmpGroupSessionTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 6, 1, 8),
    _RcIgmpGroupSessionTime_Type()
)
rcIgmpGroupSessionTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpGroupSessionTime.setStatus("deprecated")
_RcIpRouteTable_Object = MibTable
rcIpRouteTable = _RcIpRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7)
)
if mibBuilder.loadTexts:
    rcIpRouteTable.setStatus("current")
_RcIpRouteEntry_Object = MibTableRow
rcIpRouteEntry = _RcIpRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1)
)
rcIpRouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRouteDest"),
    (0, "RAPID-CITY", "rcIpRouteMask"),
    (0, "RAPID-CITY", "rcIpRouteNextHop"),
    (0, "RAPID-CITY", "rcIpRouteAltSequence"),
)
if mibBuilder.loadTexts:
    rcIpRouteEntry.setStatus("current")
_RcIpRouteDest_Type = IpAddress
_RcIpRouteDest_Object = MibTableColumn
rcIpRouteDest = _RcIpRouteDest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 1),
    _RcIpRouteDest_Type()
)
rcIpRouteDest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRouteDest.setStatus("current")
_RcIpRouteMask_Type = IpAddress
_RcIpRouteMask_Object = MibTableColumn
rcIpRouteMask = _RcIpRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 2),
    _RcIpRouteMask_Type()
)
rcIpRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRouteMask.setStatus("current")
_RcIpRouteNextHop_Type = IpAddress
_RcIpRouteNextHop_Object = MibTableColumn
rcIpRouteNextHop = _RcIpRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 3),
    _RcIpRouteNextHop_Type()
)
rcIpRouteNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRouteNextHop.setStatus("current")
_RcIpRouteMetric_Type = Integer32
_RcIpRouteMetric_Object = MibTableColumn
rcIpRouteMetric = _RcIpRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 4),
    _RcIpRouteMetric_Type()
)
rcIpRouteMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRouteMetric.setStatus("current")
_RcIpRouteIfIndex_Type = InterfaceIndex
_RcIpRouteIfIndex_Object = MibTableColumn
rcIpRouteIfIndex = _RcIpRouteIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 5),
    _RcIpRouteIfIndex_Type()
)
rcIpRouteIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRouteIfIndex.setStatus("current")


class _RcIpRouteType_Type(Integer32):
    """Custom type rcIpRouteType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("direct", 3),
          ("indirect", 4),
          ("other", 1))
    )


_RcIpRouteType_Type.__name__ = "Integer32"
_RcIpRouteType_Object = MibTableColumn
rcIpRouteType = _RcIpRouteType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 6),
    _RcIpRouteType_Type()
)
rcIpRouteType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRouteType.setStatus("current")


class _RcIpRouteProto_Type(Integer32):
    """Custom type rcIpRouteProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("bbnSpfIgp", 12),
          ("bgp", 14),
          ("ciscoIgrp", 11),
          ("egp", 5),
          ("es-is", 10),
          ("ggp", 6),
          ("hello", 7),
          ("icmp", 4),
          ("is-is", 9),
          ("local", 2),
          ("netmgmt", 3),
          ("ospf", 13),
          ("other", 1),
          ("rip", 8),
          ("vBgp", 16),
          ("vOspf", 15),
          ("vRip", 17))
    )


_RcIpRouteProto_Type.__name__ = "Integer32"
_RcIpRouteProto_Object = MibTableColumn
rcIpRouteProto = _RcIpRouteProto_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 7),
    _RcIpRouteProto_Type()
)
rcIpRouteProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRouteProto.setStatus("current")
_RcIpRouteAge_Type = Integer32
_RcIpRouteAge_Object = MibTableColumn
rcIpRouteAge = _RcIpRouteAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 8),
    _RcIpRouteAge_Type()
)
rcIpRouteAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRouteAge.setStatus("current")
_RcIpRouteRowStatus_Type = RowStatus
_RcIpRouteRowStatus_Object = MibTableColumn
rcIpRouteRowStatus = _RcIpRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 9),
    _RcIpRouteRowStatus_Type()
)
rcIpRouteRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRouteRowStatus.setStatus("current")


class _RcIpRoutePref_Type(Integer32):
    """Custom type rcIpRoutePref based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpRoutePref_Type.__name__ = "Integer32"
_RcIpRoutePref_Object = MibTableColumn
rcIpRoutePref = _RcIpRoutePref_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 10),
    _RcIpRoutePref_Type()
)
rcIpRoutePref.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRoutePref.setStatus("current")
_RcIpRouteAltSequence_Type = Integer32
_RcIpRouteAltSequence_Object = MibTableColumn
rcIpRouteAltSequence = _RcIpRouteAltSequence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 11),
    _RcIpRouteAltSequence_Type()
)
rcIpRouteAltSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRouteAltSequence.setStatus("current")


class _RcIpRoutePathType_Type(Integer32):
    """Custom type rcIpRoutePathType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              6,
              8,
              9,
              10,
              11,
              14,
              16,
              17,
              18,
              19,
              22,
              34,
              35,
              66,
              67,
              74,
              75,
              128,
              129,
              130,
              131,
              138,
              139,
              192,
              193,
              194,
              195)
        )
    )
    namedValues = NamedValues(
        *(("dB", 6),
          ("dBN", 14),
          ("dBU", 22),
          ("iA", 0),
          ("iAE", 1),
          ("iAEN", 9),
          ("iAEU", 17),
          ("iAN", 8),
          ("iAS", 128),
          ("iASE", 129),
          ("iASV", 192),
          ("iASVE", 193),
          ("iAU", 16),
          ("iB", 2),
          ("iBE", 3),
          ("iBEF", 35),
          ("iBEN", 11),
          ("iBEU", 19),
          ("iBEV", 67),
          ("iBEVN", 75),
          ("iBF", 34),
          ("iBN", 10),
          ("iBS", 130),
          ("iBSE", 131),
          ("iBSEN", 139),
          ("iBSN", 138),
          ("iBSV", 194),
          ("iBSVE", 195),
          ("iBU", 18),
          ("iBV", 66),
          ("iBVN", 74))
    )


_RcIpRoutePathType_Type.__name__ = "Integer32"
_RcIpRoutePathType_Object = MibTableColumn
rcIpRoutePathType = _RcIpRoutePathType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 12),
    _RcIpRoutePathType_Type()
)
rcIpRoutePathType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRoutePathType.setStatus("current")
_RcIpRouteSrcVrfId_Type = VrfIdentifier
_RcIpRouteSrcVrfId_Object = MibTableColumn
rcIpRouteSrcVrfId = _RcIpRouteSrcVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 13),
    _RcIpRouteSrcVrfId_Type()
)
rcIpRouteSrcVrfId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRouteSrcVrfId.setStatus("current")


class _RcIpRouteNextHopId_Type(DisplayString):
    """Custom type rcIpRouteNextHopId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(24, 24),
    )


_RcIpRouteNextHopId_Type.__name__ = "DisplayString"
_RcIpRouteNextHopId_Object = MibTableColumn
rcIpRouteNextHopId = _RcIpRouteNextHopId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 7, 1, 14),
    _RcIpRouteNextHopId_Type()
)
rcIpRouteNextHopId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRouteNextHopId.setStatus("current")
_RcIpConfDhcpTable_Object = MibTable
rcIpConfDhcpTable = _RcIpConfDhcpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8)
)
if mibBuilder.loadTexts:
    rcIpConfDhcpTable.setStatus("current")
_RcIpConfDhcpEntry_Object = MibTableRow
rcIpConfDhcpEntry = _RcIpConfDhcpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1)
)
rcIpConfDhcpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfDhcpIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpConfDhcpEntry.setStatus("current")


class _RcIpConfDhcpIfIndex_Type(InterfaceIndexOrZero):
    """Custom type rcIpConfDhcpIfIndex based on InterfaceIndexOrZero"""
    subtypeSpec = InterfaceIndexOrZero.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6142),
    )


_RcIpConfDhcpIfIndex_Type.__name__ = "InterfaceIndexOrZero"
_RcIpConfDhcpIfIndex_Object = MibTableColumn
rcIpConfDhcpIfIndex = _RcIpConfDhcpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1, 1),
    _RcIpConfDhcpIfIndex_Type()
)
rcIpConfDhcpIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfDhcpIfIndex.setStatus("current")


class _RcIpConfDhcpMaxHop_Type(Integer32):
    """Custom type rcIpConfDhcpMaxHop based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RcIpConfDhcpMaxHop_Type.__name__ = "Integer32"
_RcIpConfDhcpMaxHop_Object = MibTableColumn
rcIpConfDhcpMaxHop = _RcIpConfDhcpMaxHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1, 2),
    _RcIpConfDhcpMaxHop_Type()
)
rcIpConfDhcpMaxHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfDhcpMaxHop.setStatus("current")


class _RcIpConfDhcpMinSec_Type(Integer32):
    """Custom type rcIpConfDhcpMinSec based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpConfDhcpMinSec_Type.__name__ = "Integer32"
_RcIpConfDhcpMinSec_Object = MibTableColumn
rcIpConfDhcpMinSec = _RcIpConfDhcpMinSec_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1, 3),
    _RcIpConfDhcpMinSec_Type()
)
rcIpConfDhcpMinSec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfDhcpMinSec.setStatus("current")


class _RcIpConfDhcpMode_Type(Integer32):
    """Custom type rcIpConfDhcpMode based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bootp", 2),
          ("both", 4),
          ("dhcp", 3),
          ("none", 0))
    )


_RcIpConfDhcpMode_Type.__name__ = "Integer32"
_RcIpConfDhcpMode_Object = MibTableColumn
rcIpConfDhcpMode = _RcIpConfDhcpMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1, 4),
    _RcIpConfDhcpMode_Type()
)
rcIpConfDhcpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfDhcpMode.setStatus("current")
_RcIpConfDhcpRowStatus_Type = RowStatus
_RcIpConfDhcpRowStatus_Object = MibTableColumn
rcIpConfDhcpRowStatus = _RcIpConfDhcpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1, 5),
    _RcIpConfDhcpRowStatus_Type()
)
rcIpConfDhcpRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfDhcpRowStatus.setStatus("current")
_RcIpConfDhcpNumRequests_Type = Counter32
_RcIpConfDhcpNumRequests_Object = MibTableColumn
rcIpConfDhcpNumRequests = _RcIpConfDhcpNumRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1, 6),
    _RcIpConfDhcpNumRequests_Type()
)
rcIpConfDhcpNumRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfDhcpNumRequests.setStatus("current")
_RcIpConfDhcpNumReplies_Type = Counter32
_RcIpConfDhcpNumReplies_Object = MibTableColumn
rcIpConfDhcpNumReplies = _RcIpConfDhcpNumReplies_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1, 7),
    _RcIpConfDhcpNumReplies_Type()
)
rcIpConfDhcpNumReplies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfDhcpNumReplies.setStatus("current")


class _RcIpConfDhcpAlwaysBroadcast_Type(TruthValue):
    """Custom type rcIpConfDhcpAlwaysBroadcast based on TruthValue"""


_RcIpConfDhcpAlwaysBroadcast_Object = MibTableColumn
rcIpConfDhcpAlwaysBroadcast = _RcIpConfDhcpAlwaysBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 8, 1, 8),
    _RcIpConfDhcpAlwaysBroadcast_Type()
)
rcIpConfDhcpAlwaysBroadcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfDhcpAlwaysBroadcast.setStatus("current")
_RcIpDhcpForwardTable_Object = MibTable
rcIpDhcpForwardTable = _RcIpDhcpForwardTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 9)
)
if mibBuilder.loadTexts:
    rcIpDhcpForwardTable.setStatus("current")
_RcIpDhcpForwardEntry_Object = MibTableRow
rcIpDhcpForwardEntry = _RcIpDhcpForwardEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 9, 1)
)
rcIpDhcpForwardEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpDhcpForwardAgentAddr"),
    (0, "RAPID-CITY", "rcIpDhcpForwardServerAddr"),
)
if mibBuilder.loadTexts:
    rcIpDhcpForwardEntry.setStatus("current")
_RcIpDhcpForwardAgentAddr_Type = IpAddress
_RcIpDhcpForwardAgentAddr_Object = MibTableColumn
rcIpDhcpForwardAgentAddr = _RcIpDhcpForwardAgentAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 9, 1, 1),
    _RcIpDhcpForwardAgentAddr_Type()
)
rcIpDhcpForwardAgentAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpDhcpForwardAgentAddr.setStatus("current")
_RcIpDhcpForwardServerAddr_Type = IpAddress
_RcIpDhcpForwardServerAddr_Object = MibTableColumn
rcIpDhcpForwardServerAddr = _RcIpDhcpForwardServerAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 9, 1, 2),
    _RcIpDhcpForwardServerAddr_Type()
)
rcIpDhcpForwardServerAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpDhcpForwardServerAddr.setStatus("current")


class _RcIpDhcpForwardEnable_Type(TruthValue):
    """Custom type rcIpDhcpForwardEnable based on TruthValue"""


_RcIpDhcpForwardEnable_Object = MibTableColumn
rcIpDhcpForwardEnable = _RcIpDhcpForwardEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 9, 1, 3),
    _RcIpDhcpForwardEnable_Type()
)
rcIpDhcpForwardEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDhcpForwardEnable.setStatus("current")


class _RcIpDhcpForwardMode_Type(Integer32):
    """Custom type rcIpDhcpForwardMode based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bootp", 2),
          ("both", 4),
          ("dhcp", 3),
          ("none", 0))
    )


_RcIpDhcpForwardMode_Type.__name__ = "Integer32"
_RcIpDhcpForwardMode_Object = MibTableColumn
rcIpDhcpForwardMode = _RcIpDhcpForwardMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 9, 1, 4),
    _RcIpDhcpForwardMode_Type()
)
rcIpDhcpForwardMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDhcpForwardMode.setStatus("current")
_RcIpDhcpForwardRowStatus_Type = RowStatus
_RcIpDhcpForwardRowStatus_Object = MibTableColumn
rcIpDhcpForwardRowStatus = _RcIpDhcpForwardRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 9, 1, 5),
    _RcIpDhcpForwardRowStatus_Type()
)
rcIpDhcpForwardRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDhcpForwardRowStatus.setStatus("current")
_RcIpFilter_ObjectIdentity = ObjectIdentity
rcIpFilter = _RcIpFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10)
)
_RcIpFilterFilterTableSize_Type = Integer32
_RcIpFilterFilterTableSize_Object = MibScalar
rcIpFilterFilterTableSize = _RcIpFilterFilterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 1),
    _RcIpFilterFilterTableSize_Type()
)
rcIpFilterFilterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterFilterTableSize.setStatus("current")
_RcIpFilterGlobalListTableSize_Type = Integer32
_RcIpFilterGlobalListTableSize_Object = MibScalar
rcIpFilterGlobalListTableSize = _RcIpFilterGlobalListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 2),
    _RcIpFilterGlobalListTableSize_Type()
)
rcIpFilterGlobalListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterGlobalListTableSize.setStatus("current")
_RcIpFilterBaseListTableSize_Type = Integer32
_RcIpFilterBaseListTableSize_Object = MibScalar
rcIpFilterBaseListTableSize = _RcIpFilterBaseListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 3),
    _RcIpFilterBaseListTableSize_Type()
)
rcIpFilterBaseListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterBaseListTableSize.setStatus("current")
_RcIpFilterPortTableSize_Type = Integer32
_RcIpFilterPortTableSize_Object = MibScalar
rcIpFilterPortTableSize = _RcIpFilterPortTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 4),
    _RcIpFilterPortTableSize_Type()
)
rcIpFilterPortTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterPortTableSize.setStatus("current")
_RcIpFilterNextAvailFilterId_Type = Integer32
_RcIpFilterNextAvailFilterId_Object = MibScalar
rcIpFilterNextAvailFilterId = _RcIpFilterNextAvailFilterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 5),
    _RcIpFilterNextAvailFilterId_Type()
)
rcIpFilterNextAvailFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterNextAvailFilterId.setStatus("current")
_RcIpFilterTable_Object = MibTable
rcIpFilterTable = _RcIpFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20)
)
if mibBuilder.loadTexts:
    rcIpFilterTable.setStatus("current")
_RcIpFilterEntry_Object = MibTableRow
rcIpFilterEntry = _RcIpFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1)
)
rcIpFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpFilterType"),
    (0, "RAPID-CITY", "rcIpFilterDstAddr"),
    (0, "RAPID-CITY", "rcIpFilterDstMask"),
    (0, "RAPID-CITY", "rcIpFilterSrcAddr"),
    (0, "RAPID-CITY", "rcIpFilterSrcMask"),
    (0, "RAPID-CITY", "rcIpFilterId"),
)
if mibBuilder.loadTexts:
    rcIpFilterEntry.setStatus("current")


class _RcIpFilterType_Type(Integer32):
    """Custom type rcIpFilterType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("destination", 2),
          ("global", 1),
          ("source", 3))
    )


_RcIpFilterType_Type.__name__ = "Integer32"
_RcIpFilterType_Object = MibTableColumn
rcIpFilterType = _RcIpFilterType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 1),
    _RcIpFilterType_Type()
)
rcIpFilterType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterType.setStatus("current")
_RcIpFilterDstAddr_Type = IpAddress
_RcIpFilterDstAddr_Object = MibTableColumn
rcIpFilterDstAddr = _RcIpFilterDstAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 2),
    _RcIpFilterDstAddr_Type()
)
rcIpFilterDstAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterDstAddr.setStatus("current")
_RcIpFilterDstMask_Type = IpAddress
_RcIpFilterDstMask_Object = MibTableColumn
rcIpFilterDstMask = _RcIpFilterDstMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 3),
    _RcIpFilterDstMask_Type()
)
rcIpFilterDstMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterDstMask.setStatus("current")
_RcIpFilterSrcAddr_Type = IpAddress
_RcIpFilterSrcAddr_Object = MibTableColumn
rcIpFilterSrcAddr = _RcIpFilterSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 4),
    _RcIpFilterSrcAddr_Type()
)
rcIpFilterSrcAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterSrcAddr.setStatus("current")
_RcIpFilterSrcMask_Type = IpAddress
_RcIpFilterSrcMask_Object = MibTableColumn
rcIpFilterSrcMask = _RcIpFilterSrcMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 5),
    _RcIpFilterSrcMask_Type()
)
rcIpFilterSrcMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterSrcMask.setStatus("current")


class _RcIpFilterId_Type(Integer32):
    """Custom type rcIpFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcIpFilterId_Type.__name__ = "Integer32"
_RcIpFilterId_Object = MibTableColumn
rcIpFilterId = _RcIpFilterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 6),
    _RcIpFilterId_Type()
)
rcIpFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterId.setStatus("current")


class _RcIpFilterName_Type(DisplayString):
    """Custom type rcIpFilterName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpFilterName_Type.__name__ = "DisplayString"
_RcIpFilterName_Object = MibTableColumn
rcIpFilterName = _RcIpFilterName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 7),
    _RcIpFilterName_Type()
)
rcIpFilterName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterName.setStatus("current")


class _RcIpFilterProtocolType_Type(Integer32):
    """Custom type rcIpFilterProtocolType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              6,
              17,
              50,
              51,
              89,
              112,
              256)
        )
    )
    namedValues = NamedValues(
        *(("icmp", 1),
          ("ignore", 0),
          ("ipsecah", 51),
          ("ipsecesp", 50),
          ("ospf", 89),
          ("tcp", 6),
          ("udp", 17),
          ("usrDefined", 256),
          ("vrrp", 112))
    )


_RcIpFilterProtocolType_Type.__name__ = "Integer32"
_RcIpFilterProtocolType_Object = MibTableColumn
rcIpFilterProtocolType = _RcIpFilterProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 8),
    _RcIpFilterProtocolType_Type()
)
rcIpFilterProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterProtocolType.setStatus("current")


class _RcIpFilterSrcPort_Type(Integer32):
    """Custom type rcIpFilterSrcPort based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpFilterSrcPort_Type.__name__ = "Integer32"
_RcIpFilterSrcPort_Object = MibTableColumn
rcIpFilterSrcPort = _RcIpFilterSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 9),
    _RcIpFilterSrcPort_Type()
)
rcIpFilterSrcPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterSrcPort.setStatus("current")


class _RcIpFilterSrcOption_Type(Integer32):
    """Custom type rcIpFilterSrcOption based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("equal", 0),
          ("greater", 2),
          ("ignore", 4),
          ("less", 3),
          ("notEqual", 1))
    )


_RcIpFilterSrcOption_Type.__name__ = "Integer32"
_RcIpFilterSrcOption_Object = MibTableColumn
rcIpFilterSrcOption = _RcIpFilterSrcOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 10),
    _RcIpFilterSrcOption_Type()
)
rcIpFilterSrcOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterSrcOption.setStatus("current")


class _RcIpFilterDstPort_Type(Integer32):
    """Custom type rcIpFilterDstPort based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpFilterDstPort_Type.__name__ = "Integer32"
_RcIpFilterDstPort_Object = MibTableColumn
rcIpFilterDstPort = _RcIpFilterDstPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 11),
    _RcIpFilterDstPort_Type()
)
rcIpFilterDstPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDstPort.setStatus("current")


class _RcIpFilterDstOption_Type(Integer32):
    """Custom type rcIpFilterDstOption based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("equal", 0),
          ("greater", 2),
          ("ignore", 4),
          ("less", 3),
          ("notEqual", 1))
    )


_RcIpFilterDstOption_Type.__name__ = "Integer32"
_RcIpFilterDstOption_Object = MibTableColumn
rcIpFilterDstOption = _RcIpFilterDstOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 12),
    _RcIpFilterDstOption_Type()
)
rcIpFilterDstOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDstOption.setStatus("current")


class _RcIpFilterCopyToCpu_Type(TruthValue):
    """Custom type rcIpFilterCopyToCpu based on TruthValue"""


_RcIpFilterCopyToCpu_Object = MibTableColumn
rcIpFilterCopyToCpu = _RcIpFilterCopyToCpu_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 13),
    _RcIpFilterCopyToCpu_Type()
)
rcIpFilterCopyToCpu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterCopyToCpu.setStatus("deprecated")


class _RcIpFilterMirror_Type(TruthValue):
    """Custom type rcIpFilterMirror based on TruthValue"""


_RcIpFilterMirror_Object = MibTableColumn
rcIpFilterMirror = _RcIpFilterMirror_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 14),
    _RcIpFilterMirror_Type()
)
rcIpFilterMirror.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMirror.setStatus("current")


class _RcIpFilterHighPriority_Type(TruthValue):
    """Custom type rcIpFilterHighPriority based on TruthValue"""


_RcIpFilterHighPriority_Object = MibTableColumn
rcIpFilterHighPriority = _RcIpFilterHighPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 15),
    _RcIpFilterHighPriority_Type()
)
rcIpFilterHighPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterHighPriority.setStatus("deprecated")


class _RcIpFilterTcpConnect_Type(TruthValue):
    """Custom type rcIpFilterTcpConnect based on TruthValue"""


_RcIpFilterTcpConnect_Object = MibTableColumn
rcIpFilterTcpConnect = _RcIpFilterTcpConnect_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 16),
    _RcIpFilterTcpConnect_Type()
)
rcIpFilterTcpConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterTcpConnect.setStatus("current")


class _RcIpFilterIeeeVlanPriority_Type(Integer32):
    """Custom type rcIpFilterIeeeVlanPriority based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcIpFilterIeeeVlanPriority_Type.__name__ = "Integer32"
_RcIpFilterIeeeVlanPriority_Object = MibTableColumn
rcIpFilterIeeeVlanPriority = _RcIpFilterIeeeVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 17),
    _RcIpFilterIeeeVlanPriority_Type()
)
rcIpFilterIeeeVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterIeeeVlanPriority.setStatus("current")


class _RcIpFilterUsePktLimit_Type(TruthValue):
    """Custom type rcIpFilterUsePktLimit based on TruthValue"""


_RcIpFilterUsePktLimit_Object = MibTableColumn
rcIpFilterUsePktLimit = _RcIpFilterUsePktLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 18),
    _RcIpFilterUsePktLimit_Type()
)
rcIpFilterUsePktLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterUsePktLimit.setStatus("deprecated")


class _RcIpFilterPktLimit_Type(Integer32):
    """Custom type rcIpFilterPktLimit based on Integer32"""
    defaultValue = 1500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpFilterPktLimit_Type.__name__ = "Integer32"
_RcIpFilterPktLimit_Object = MibTableColumn
rcIpFilterPktLimit = _RcIpFilterPktLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 19),
    _RcIpFilterPktLimit_Type()
)
rcIpFilterPktLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterPktLimit.setStatus("deprecated")
_RcIpFilterRowStatus_Type = RowStatus
_RcIpFilterRowStatus_Object = MibTableColumn
rcIpFilterRowStatus = _RcIpFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 20),
    _RcIpFilterRowStatus_Type()
)
rcIpFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterRowStatus.setStatus("current")


class _RcIpFilterMode_Type(Integer32):
    """Custom type rcIpFilterMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("drop", 3),
          ("forward", 2),
          ("forwardToNextHop", 4),
          ("useDefaultAction", 1))
    )


_RcIpFilterMode_Type.__name__ = "Integer32"
_RcIpFilterMode_Object = MibTableColumn
rcIpFilterMode = _RcIpFilterMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 21),
    _RcIpFilterMode_Type()
)
rcIpFilterMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMode.setStatus("current")


class _RcIpFilterIpTosRule_Type(Integer32):
    """Custom type rcIpFilterIpTosRule based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ipTosRule1", 1),
          ("ipTosRule2", 2),
          ("ipTosRule3", 3),
          ("none", 0))
    )


_RcIpFilterIpTosRule_Type.__name__ = "Integer32"
_RcIpFilterIpTosRule_Object = MibTableColumn
rcIpFilterIpTosRule = _RcIpFilterIpTosRule_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 22),
    _RcIpFilterIpTosRule_Type()
)
rcIpFilterIpTosRule.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterIpTosRule.setStatus("deprecated")


class _RcIpFilterStopOnMatch_Type(TruthValue):
    """Custom type rcIpFilterStopOnMatch based on TruthValue"""


_RcIpFilterStopOnMatch_Object = MibTableColumn
rcIpFilterStopOnMatch = _RcIpFilterStopOnMatch_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 23),
    _RcIpFilterStopOnMatch_Type()
)
rcIpFilterStopOnMatch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterStopOnMatch.setStatus("current")


class _RcIpFilterDiffServMatchIeee8021PEnable_Type(TruthValue):
    """Custom type rcIpFilterDiffServMatchIeee8021PEnable based on TruthValue"""


_RcIpFilterDiffServMatchIeee8021PEnable_Object = MibTableColumn
rcIpFilterDiffServMatchIeee8021PEnable = _RcIpFilterDiffServMatchIeee8021PEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 24),
    _RcIpFilterDiffServMatchIeee8021PEnable_Type()
)
rcIpFilterDiffServMatchIeee8021PEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServMatchIeee8021PEnable.setStatus("current")


class _RcIpFilterDiffServMatchIeee8021P_Type(Integer32):
    """Custom type rcIpFilterDiffServMatchIeee8021P based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcIpFilterDiffServMatchIeee8021P_Type.__name__ = "Integer32"
_RcIpFilterDiffServMatchIeee8021P_Object = MibTableColumn
rcIpFilterDiffServMatchIeee8021P = _RcIpFilterDiffServMatchIeee8021P_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 25),
    _RcIpFilterDiffServMatchIeee8021P_Type()
)
rcIpFilterDiffServMatchIeee8021P.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServMatchIeee8021P.setStatus("current")


class _RcIpFilterDiffServMatchDscpEnable_Type(TruthValue):
    """Custom type rcIpFilterDiffServMatchDscpEnable based on TruthValue"""


_RcIpFilterDiffServMatchDscpEnable_Object = MibTableColumn
rcIpFilterDiffServMatchDscpEnable = _RcIpFilterDiffServMatchDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 26),
    _RcIpFilterDiffServMatchDscpEnable_Type()
)
rcIpFilterDiffServMatchDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServMatchDscpEnable.setStatus("current")


class _RcIpFilterDiffServMatchDscp_Type(DisplayString):
    """Custom type rcIpFilterDiffServMatchDscp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIpFilterDiffServMatchDscp_Type.__name__ = "DisplayString"
_RcIpFilterDiffServMatchDscp_Object = MibTableColumn
rcIpFilterDiffServMatchDscp = _RcIpFilterDiffServMatchDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 27),
    _RcIpFilterDiffServMatchDscp_Type()
)
rcIpFilterDiffServMatchDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServMatchDscp.setStatus("current")


class _RcIpFilterDiffServMatchDscpReserved_Type(DisplayString):
    """Custom type rcIpFilterDiffServMatchDscpReserved based on DisplayString"""
    defaultHexValue = "0"

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RcIpFilterDiffServMatchDscpReserved_Type.__name__ = "DisplayString"
_RcIpFilterDiffServMatchDscpReserved_Object = MibTableColumn
rcIpFilterDiffServMatchDscpReserved = _RcIpFilterDiffServMatchDscpReserved_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 28),
    _RcIpFilterDiffServMatchDscpReserved_Type()
)
rcIpFilterDiffServMatchDscpReserved.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServMatchDscpReserved.setStatus("current")


class _RcIpFilterDiffServModifyIeee8021PEnable_Type(TruthValue):
    """Custom type rcIpFilterDiffServModifyIeee8021PEnable based on TruthValue"""


_RcIpFilterDiffServModifyIeee8021PEnable_Object = MibTableColumn
rcIpFilterDiffServModifyIeee8021PEnable = _RcIpFilterDiffServModifyIeee8021PEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 29),
    _RcIpFilterDiffServModifyIeee8021PEnable_Type()
)
rcIpFilterDiffServModifyIeee8021PEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServModifyIeee8021PEnable.setStatus("current")


class _RcIpFilterDiffServModifyIeee8021P_Type(Integer32):
    """Custom type rcIpFilterDiffServModifyIeee8021P based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcIpFilterDiffServModifyIeee8021P_Type.__name__ = "Integer32"
_RcIpFilterDiffServModifyIeee8021P_Object = MibTableColumn
rcIpFilterDiffServModifyIeee8021P = _RcIpFilterDiffServModifyIeee8021P_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 30),
    _RcIpFilterDiffServModifyIeee8021P_Type()
)
rcIpFilterDiffServModifyIeee8021P.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServModifyIeee8021P.setStatus("current")


class _RcIpFilterDiffServModifyDscpEnable_Type(TruthValue):
    """Custom type rcIpFilterDiffServModifyDscpEnable based on TruthValue"""


_RcIpFilterDiffServModifyDscpEnable_Object = MibTableColumn
rcIpFilterDiffServModifyDscpEnable = _RcIpFilterDiffServModifyDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 31),
    _RcIpFilterDiffServModifyDscpEnable_Type()
)
rcIpFilterDiffServModifyDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServModifyDscpEnable.setStatus("current")


class _RcIpFilterDiffServModifyDscp_Type(DisplayString):
    """Custom type rcIpFilterDiffServModifyDscp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIpFilterDiffServModifyDscp_Type.__name__ = "DisplayString"
_RcIpFilterDiffServModifyDscp_Object = MibTableColumn
rcIpFilterDiffServModifyDscp = _RcIpFilterDiffServModifyDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 32),
    _RcIpFilterDiffServModifyDscp_Type()
)
rcIpFilterDiffServModifyDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServModifyDscp.setStatus("current")


class _RcIpFilterDiffServModifyDscpReserved_Type(DisplayString):
    """Custom type rcIpFilterDiffServModifyDscpReserved based on DisplayString"""
    defaultHexValue = "0"

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RcIpFilterDiffServModifyDscpReserved_Type.__name__ = "DisplayString"
_RcIpFilterDiffServModifyDscpReserved_Object = MibTableColumn
rcIpFilterDiffServModifyDscpReserved = _RcIpFilterDiffServModifyDscpReserved_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 33),
    _RcIpFilterDiffServModifyDscpReserved_Type()
)
rcIpFilterDiffServModifyDscpReserved.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServModifyDscpReserved.setStatus("current")


class _RcIpFilterDiffServTrafficProfileId_Type(Integer32):
    """Custom type rcIpFilterDiffServTrafficProfileId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RcIpFilterDiffServTrafficProfileId_Type.__name__ = "Integer32"
_RcIpFilterDiffServTrafficProfileId_Object = MibTableColumn
rcIpFilterDiffServTrafficProfileId = _RcIpFilterDiffServTrafficProfileId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 34),
    _RcIpFilterDiffServTrafficProfileId_Type()
)
rcIpFilterDiffServTrafficProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterDiffServTrafficProfileId.setStatus("current")


class _RcIpFilterMatchIcmpRequest_Type(TruthValue):
    """Custom type rcIpFilterMatchIcmpRequest based on TruthValue"""


_RcIpFilterMatchIcmpRequest_Object = MibTableColumn
rcIpFilterMatchIcmpRequest = _RcIpFilterMatchIcmpRequest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 35),
    _RcIpFilterMatchIcmpRequest_Type()
)
rcIpFilterMatchIcmpRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMatchIcmpRequest.setStatus("current")


class _RcIpFilterMatchIpFragment_Type(TruthValue):
    """Custom type rcIpFilterMatchIpFragment based on TruthValue"""


_RcIpFilterMatchIpFragment_Object = MibTableColumn
rcIpFilterMatchIpFragment = _RcIpFilterMatchIpFragment_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 36),
    _RcIpFilterMatchIpFragment_Type()
)
rcIpFilterMatchIpFragment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMatchIpFragment.setStatus("current")


class _RcIpFilterStatisticEnable_Type(TruthValue):
    """Custom type rcIpFilterStatisticEnable based on TruthValue"""


_RcIpFilterStatisticEnable_Object = MibTableColumn
rcIpFilterStatisticEnable = _RcIpFilterStatisticEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 37),
    _RcIpFilterStatisticEnable_Type()
)
rcIpFilterStatisticEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterStatisticEnable.setStatus("current")
_RcIpFilterInOctets_Type = Counter64
_RcIpFilterInOctets_Object = MibTableColumn
rcIpFilterInOctets = _RcIpFilterInOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 38),
    _RcIpFilterInOctets_Type()
)
rcIpFilterInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterInOctets.setStatus("deprecated")
_RcIpFilterInPackets_Type = Counter64
_RcIpFilterInPackets_Object = MibTableColumn
rcIpFilterInPackets = _RcIpFilterInPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 39),
    _RcIpFilterInPackets_Type()
)
rcIpFilterInPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterInPackets.setStatus("deprecated")
_RcIpFilterRateLimitDiscardPackets_Type = Counter64
_RcIpFilterRateLimitDiscardPackets_Object = MibTableColumn
rcIpFilterRateLimitDiscardPackets = _RcIpFilterRateLimitDiscardPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 40),
    _RcIpFilterRateLimitDiscardPackets_Type()
)
rcIpFilterRateLimitDiscardPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterRateLimitDiscardPackets.setStatus("deprecated")
_RcIpFilterNextHopForwardIpAddr_Type = IpAddress
_RcIpFilterNextHopForwardIpAddr_Object = MibTableColumn
rcIpFilterNextHopForwardIpAddr = _RcIpFilterNextHopForwardIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 41),
    _RcIpFilterNextHopForwardIpAddr_Type()
)
rcIpFilterNextHopForwardIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterNextHopForwardIpAddr.setStatus("current")
_RcIpFilterNextHopUnreachableDropEnable_Type = TruthValue
_RcIpFilterNextHopUnreachableDropEnable_Object = MibTableColumn
rcIpFilterNextHopUnreachableDropEnable = _RcIpFilterNextHopUnreachableDropEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 42),
    _RcIpFilterNextHopUnreachableDropEnable_Type()
)
rcIpFilterNextHopUnreachableDropEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterNextHopUnreachableDropEnable.setStatus("current")


class _RcIpFilterProtocolTypeUsrDefined_Type(Integer32):
    """Custom type rcIpFilterProtocolTypeUsrDefined based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpFilterProtocolTypeUsrDefined_Type.__name__ = "Integer32"
_RcIpFilterProtocolTypeUsrDefined_Object = MibTableColumn
rcIpFilterProtocolTypeUsrDefined = _RcIpFilterProtocolTypeUsrDefined_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 43),
    _RcIpFilterProtocolTypeUsrDefined_Type()
)
rcIpFilterProtocolTypeUsrDefined.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterProtocolTypeUsrDefined.setStatus("current")
_RcIpFilterIngressOctets_Type = Counter64
_RcIpFilterIngressOctets_Object = MibTableColumn
rcIpFilterIngressOctets = _RcIpFilterIngressOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 44),
    _RcIpFilterIngressOctets_Type()
)
rcIpFilterIngressOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterIngressOctets.setStatus("current")
_RcIpFilterIngressPkts_Type = Counter64
_RcIpFilterIngressPkts_Object = MibTableColumn
rcIpFilterIngressPkts = _RcIpFilterIngressPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 45),
    _RcIpFilterIngressPkts_Type()
)
rcIpFilterIngressPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterIngressPkts.setStatus("current")
_RcIpFilterRateLimitDiscardPkts_Type = Counter64
_RcIpFilterRateLimitDiscardPkts_Object = MibTableColumn
rcIpFilterRateLimitDiscardPkts = _RcIpFilterRateLimitDiscardPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 20, 1, 46),
    _RcIpFilterRateLimitDiscardPkts_Type()
)
rcIpFilterRateLimitDiscardPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterRateLimitDiscardPkts.setStatus("current")
_RcIpFilterGlobalListTable_Object = MibTable
rcIpFilterGlobalListTable = _RcIpFilterGlobalListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 21)
)
if mibBuilder.loadTexts:
    rcIpFilterGlobalListTable.setStatus("current")
_RcIpFilterGlobalListEntry_Object = MibTableRow
rcIpFilterGlobalListEntry = _RcIpFilterGlobalListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 21, 1)
)
rcIpFilterGlobalListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpFilterGlobalListId"),
)
if mibBuilder.loadTexts:
    rcIpFilterGlobalListEntry.setStatus("current")


class _RcIpFilterGlobalListId_Type(Integer32):
    """Custom type rcIpFilterGlobalListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcIpFilterGlobalListId_Type.__name__ = "Integer32"
_RcIpFilterGlobalListId_Object = MibTableColumn
rcIpFilterGlobalListId = _RcIpFilterGlobalListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 21, 1, 1),
    _RcIpFilterGlobalListId_Type()
)
rcIpFilterGlobalListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterGlobalListId.setStatus("current")


class _RcIpFilterGlobalListName_Type(DisplayString):
    """Custom type rcIpFilterGlobalListName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpFilterGlobalListName_Type.__name__ = "DisplayString"
_RcIpFilterGlobalListName_Object = MibTableColumn
rcIpFilterGlobalListName = _RcIpFilterGlobalListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 21, 1, 2),
    _RcIpFilterGlobalListName_Type()
)
rcIpFilterGlobalListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterGlobalListName.setStatus("current")


class _RcIpFilterGlobalListFilterIdListSize_Type(Integer32):
    """Custom type rcIpFilterGlobalListFilterIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RcIpFilterGlobalListFilterIdListSize_Type.__name__ = "Integer32"
_RcIpFilterGlobalListFilterIdListSize_Object = MibTableColumn
rcIpFilterGlobalListFilterIdListSize = _RcIpFilterGlobalListFilterIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 21, 1, 3),
    _RcIpFilterGlobalListFilterIdListSize_Type()
)
rcIpFilterGlobalListFilterIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterGlobalListFilterIdListSize.setStatus("current")


class _RcIpFilterGlobalListFilterIdList_Type(IdList):
    """Custom type rcIpFilterGlobalListFilterIdList based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RcIpFilterGlobalListFilterIdList_Type.__name__ = "IdList"
_RcIpFilterGlobalListFilterIdList_Object = MibTableColumn
rcIpFilterGlobalListFilterIdList = _RcIpFilterGlobalListFilterIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 21, 1, 4),
    _RcIpFilterGlobalListFilterIdList_Type()
)
rcIpFilterGlobalListFilterIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterGlobalListFilterIdList.setStatus("current")
_RcIpFilterGlobalListRowStatus_Type = RowStatus
_RcIpFilterGlobalListRowStatus_Object = MibTableColumn
rcIpFilterGlobalListRowStatus = _RcIpFilterGlobalListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 21, 1, 5),
    _RcIpFilterGlobalListRowStatus_Type()
)
rcIpFilterGlobalListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterGlobalListRowStatus.setStatus("current")
_RcIpFilterGlobalListMemberPorts_Type = PortSet
_RcIpFilterGlobalListMemberPorts_Object = MibTableColumn
rcIpFilterGlobalListMemberPorts = _RcIpFilterGlobalListMemberPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 21, 1, 6),
    _RcIpFilterGlobalListMemberPorts_Type()
)
rcIpFilterGlobalListMemberPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterGlobalListMemberPorts.setStatus("current")
_RcIpFilterBaseListTable_Object = MibTable
rcIpFilterBaseListTable = _RcIpFilterBaseListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 22)
)
if mibBuilder.loadTexts:
    rcIpFilterBaseListTable.setStatus("current")
_RcIpFilterBaseListEntry_Object = MibTableRow
rcIpFilterBaseListEntry = _RcIpFilterBaseListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 22, 1)
)
rcIpFilterBaseListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpFilterBaseListId"),
)
if mibBuilder.loadTexts:
    rcIpFilterBaseListEntry.setStatus("current")


class _RcIpFilterBaseListId_Type(Integer32):
    """Custom type rcIpFilterBaseListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(300, 1000),
    )


_RcIpFilterBaseListId_Type.__name__ = "Integer32"
_RcIpFilterBaseListId_Object = MibTableColumn
rcIpFilterBaseListId = _RcIpFilterBaseListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 22, 1, 1),
    _RcIpFilterBaseListId_Type()
)
rcIpFilterBaseListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterBaseListId.setStatus("current")


class _RcIpFilterBaseListName_Type(DisplayString):
    """Custom type rcIpFilterBaseListName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpFilterBaseListName_Type.__name__ = "DisplayString"
_RcIpFilterBaseListName_Object = MibTableColumn
rcIpFilterBaseListName = _RcIpFilterBaseListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 22, 1, 2),
    _RcIpFilterBaseListName_Type()
)
rcIpFilterBaseListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterBaseListName.setStatus("current")


class _RcIpFilterBaseListFilterIdListSize_Type(Integer32):
    """Custom type rcIpFilterBaseListFilterIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpFilterBaseListFilterIdListSize_Type.__name__ = "Integer32"
_RcIpFilterBaseListFilterIdListSize_Object = MibTableColumn
rcIpFilterBaseListFilterIdListSize = _RcIpFilterBaseListFilterIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 22, 1, 3),
    _RcIpFilterBaseListFilterIdListSize_Type()
)
rcIpFilterBaseListFilterIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterBaseListFilterIdListSize.setStatus("current")


class _RcIpFilterBaseListFilterIdList_Type(IdList):
    """Custom type rcIpFilterBaseListFilterIdList based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcIpFilterBaseListFilterIdList_Type.__name__ = "IdList"
_RcIpFilterBaseListFilterIdList_Object = MibTableColumn
rcIpFilterBaseListFilterIdList = _RcIpFilterBaseListFilterIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 22, 1, 4),
    _RcIpFilterBaseListFilterIdList_Type()
)
rcIpFilterBaseListFilterIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterBaseListFilterIdList.setStatus("current")
_RcIpFilterBaseListRowStatus_Type = RowStatus
_RcIpFilterBaseListRowStatus_Object = MibTableColumn
rcIpFilterBaseListRowStatus = _RcIpFilterBaseListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 22, 1, 5),
    _RcIpFilterBaseListRowStatus_Type()
)
rcIpFilterBaseListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterBaseListRowStatus.setStatus("current")
_RcIpFilterBaseListMemberPorts_Type = PortSet
_RcIpFilterBaseListMemberPorts_Object = MibTableColumn
rcIpFilterBaseListMemberPorts = _RcIpFilterBaseListMemberPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 22, 1, 6),
    _RcIpFilterBaseListMemberPorts_Type()
)
rcIpFilterBaseListMemberPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterBaseListMemberPorts.setStatus("current")
_RcIpFilterPortTable_Object = MibTable
rcIpFilterPortTable = _RcIpFilterPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23)
)
if mibBuilder.loadTexts:
    rcIpFilterPortTable.setStatus("current")
_RcIpFilterPortEntry_Object = MibTableRow
rcIpFilterPortEntry = _RcIpFilterPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1)
)
rcIpFilterPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpFilterPortIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpFilterPortEntry.setStatus("current")
_RcIpFilterPortIfIndex_Type = InterfaceIndex
_RcIpFilterPortIfIndex_Object = MibTableColumn
rcIpFilterPortIfIndex = _RcIpFilterPortIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 1),
    _RcIpFilterPortIfIndex_Type()
)
rcIpFilterPortIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterPortIfIndex.setStatus("current")


class _RcIpFilterPortFilterListSize_Type(Integer32):
    """Custom type rcIpFilterPortFilterListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpFilterPortFilterListSize_Type.__name__ = "Integer32"
_RcIpFilterPortFilterListSize_Object = MibTableColumn
rcIpFilterPortFilterListSize = _RcIpFilterPortFilterListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 2),
    _RcIpFilterPortFilterListSize_Type()
)
rcIpFilterPortFilterListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterPortFilterListSize.setStatus("current")


class _RcIpFilterPortFilterList_Type(OctetString):
    """Custom type rcIpFilterPortFilterList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcIpFilterPortFilterList_Type.__name__ = "OctetString"
_RcIpFilterPortFilterList_Object = MibTableColumn
rcIpFilterPortFilterList = _RcIpFilterPortFilterList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 3),
    _RcIpFilterPortFilterList_Type()
)
rcIpFilterPortFilterList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterPortFilterList.setStatus("current")


class _RcIpFilterPortMode_Type(Integer32):
    """Custom type rcIpFilterPortMode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("deny", 2),
          ("none", 3),
          ("permit", 1))
    )


_RcIpFilterPortMode_Type.__name__ = "Integer32"
_RcIpFilterPortMode_Object = MibTableColumn
rcIpFilterPortMode = _RcIpFilterPortMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 4),
    _RcIpFilterPortMode_Type()
)
rcIpFilterPortMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterPortMode.setStatus("obsolete")


class _RcIpFilterPortEnable_Type(TruthValue):
    """Custom type rcIpFilterPortEnable based on TruthValue"""


_RcIpFilterPortEnable_Object = MibTableColumn
rcIpFilterPortEnable = _RcIpFilterPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 5),
    _RcIpFilterPortEnable_Type()
)
rcIpFilterPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterPortEnable.setStatus("current")
_RcIpFilterPortRowStatus_Type = RowStatus
_RcIpFilterPortRowStatus_Object = MibTableColumn
rcIpFilterPortRowStatus = _RcIpFilterPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 6),
    _RcIpFilterPortRowStatus_Type()
)
rcIpFilterPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterPortRowStatus.setStatus("current")


class _RcIpFilterPortDefaultAction_Type(Integer32):
    """Custom type rcIpFilterPortDefaultAction based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("drop", 2),
          ("forward", 1),
          ("none", 3))
    )


_RcIpFilterPortDefaultAction_Type.__name__ = "Integer32"
_RcIpFilterPortDefaultAction_Object = MibTableColumn
rcIpFilterPortDefaultAction = _RcIpFilterPortDefaultAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 7),
    _RcIpFilterPortDefaultAction_Type()
)
rcIpFilterPortDefaultAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterPortDefaultAction.setStatus("current")
_RcIpFilterPortNumGlobalFilters_Type = Integer32
_RcIpFilterPortNumGlobalFilters_Object = MibTableColumn
rcIpFilterPortNumGlobalFilters = _RcIpFilterPortNumGlobalFilters_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 8),
    _RcIpFilterPortNumGlobalFilters_Type()
)
rcIpFilterPortNumGlobalFilters.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterPortNumGlobalFilters.setStatus("current")
_RcIpFilterPortNumBaseFilters_Type = Integer32
_RcIpFilterPortNumBaseFilters_Object = MibTableColumn
rcIpFilterPortNumBaseFilters = _RcIpFilterPortNumBaseFilters_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 23, 1, 9),
    _RcIpFilterPortNumBaseFilters_Type()
)
rcIpFilterPortNumBaseFilters.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterPortNumBaseFilters.setStatus("current")
_RcIpFilterMediaDevTableSize_Type = Integer32
_RcIpFilterMediaDevTableSize_Object = MibScalar
rcIpFilterMediaDevTableSize = _RcIpFilterMediaDevTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 24),
    _RcIpFilterMediaDevTableSize_Type()
)
rcIpFilterMediaDevTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevTableSize.setStatus("current")
_RcIpFilterMediaDevTable_Object = MibTable
rcIpFilterMediaDevTable = _RcIpFilterMediaDevTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25)
)
if mibBuilder.loadTexts:
    rcIpFilterMediaDevTable.setStatus("current")
_RcIpFilterMediaDevEntry_Object = MibTableRow
rcIpFilterMediaDevEntry = _RcIpFilterMediaDevEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1)
)
rcIpFilterMediaDevEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpFilterMediaDevId"),
)
if mibBuilder.loadTexts:
    rcIpFilterMediaDevEntry.setStatus("current")


class _RcIpFilterMediaDevId_Type(Integer32):
    """Custom type rcIpFilterMediaDevId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3000, 3127),
    )


_RcIpFilterMediaDevId_Type.__name__ = "Integer32"
_RcIpFilterMediaDevId_Object = MibTableColumn
rcIpFilterMediaDevId = _RcIpFilterMediaDevId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 1),
    _RcIpFilterMediaDevId_Type()
)
rcIpFilterMediaDevId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevId.setStatus("current")


class _RcIpFilterMediaDevName_Type(DisplayString):
    """Custom type rcIpFilterMediaDevName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_RcIpFilterMediaDevName_Type.__name__ = "DisplayString"
_RcIpFilterMediaDevName_Object = MibTableColumn
rcIpFilterMediaDevName = _RcIpFilterMediaDevName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 2),
    _RcIpFilterMediaDevName_Type()
)
rcIpFilterMediaDevName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevName.setStatus("current")


class _RcIpFilterMediaDevPlatformType_Type(Integer32):
    """Custom type rcIpFilterMediaDevPlatformType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("bcm", 4),
          ("cse1k", 1),
          ("cse2k", 2),
          ("cse3k", 3),
          ("meridianLineCard", 5),
          ("meridianTrunkCard", 6),
          ("minerva", 9),
          ("msl100IP", 7),
          ("none", 0),
          ("useDefined", 10),
          ("vcon", 8))
    )


_RcIpFilterMediaDevPlatformType_Type.__name__ = "Integer32"
_RcIpFilterMediaDevPlatformType_Object = MibTableColumn
rcIpFilterMediaDevPlatformType = _RcIpFilterMediaDevPlatformType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 3),
    _RcIpFilterMediaDevPlatformType_Type()
)
rcIpFilterMediaDevPlatformType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevPlatformType.setStatus("current")


class _RcIpFilterMediaDevDeviceType_Type(Integer32):
    """Custom type rcIpFilterMediaDevDeviceType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("gateway", 5),
          ("i2002", 1),
          ("i2004", 2),
          ("i2050", 3),
          ("none", 0),
          ("tps", 4),
          ("useDefined", 6))
    )


_RcIpFilterMediaDevDeviceType_Type.__name__ = "Integer32"
_RcIpFilterMediaDevDeviceType_Object = MibTableColumn
rcIpFilterMediaDevDeviceType = _RcIpFilterMediaDevDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 4),
    _RcIpFilterMediaDevDeviceType_Type()
)
rcIpFilterMediaDevDeviceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevDeviceType.setStatus("current")
_RcIpFilterMediaDevIpAddress_Type = IpAddress
_RcIpFilterMediaDevIpAddress_Object = MibTableColumn
rcIpFilterMediaDevIpAddress = _RcIpFilterMediaDevIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 5),
    _RcIpFilterMediaDevIpAddress_Type()
)
rcIpFilterMediaDevIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevIpAddress.setStatus("current")


class _RcIpFilterMediaDevStreamsIds_Type(IdList):
    """Custom type rcIpFilterMediaDevStreamsIds based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RcIpFilterMediaDevStreamsIds_Type.__name__ = "IdList"
_RcIpFilterMediaDevStreamsIds_Object = MibTableColumn
rcIpFilterMediaDevStreamsIds = _RcIpFilterMediaDevStreamsIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 6),
    _RcIpFilterMediaDevStreamsIds_Type()
)
rcIpFilterMediaDevStreamsIds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevStreamsIds.setStatus("current")
_RcIpFilterMediaDevMemberPorts_Type = PortSet
_RcIpFilterMediaDevMemberPorts_Object = MibTableColumn
rcIpFilterMediaDevMemberPorts = _RcIpFilterMediaDevMemberPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 7),
    _RcIpFilterMediaDevMemberPorts_Type()
)
rcIpFilterMediaDevMemberPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevMemberPorts.setStatus("current")


class _RcIpFilterMediaDevStatisticEnable_Type(TruthValue):
    """Custom type rcIpFilterMediaDevStatisticEnable based on TruthValue"""


_RcIpFilterMediaDevStatisticEnable_Object = MibTableColumn
rcIpFilterMediaDevStatisticEnable = _RcIpFilterMediaDevStatisticEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 8),
    _RcIpFilterMediaDevStatisticEnable_Type()
)
rcIpFilterMediaDevStatisticEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevStatisticEnable.setStatus("current")
_RcIpFilterMediaDevRowStatus_Type = RowStatus
_RcIpFilterMediaDevRowStatus_Object = MibTableColumn
rcIpFilterMediaDevRowStatus = _RcIpFilterMediaDevRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 25, 1, 9),
    _RcIpFilterMediaDevRowStatus_Type()
)
rcIpFilterMediaDevRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaDevRowStatus.setStatus("current")
_RcIpFilterMediaStreamTableSize_Type = Integer32
_RcIpFilterMediaStreamTableSize_Object = MibScalar
rcIpFilterMediaStreamTableSize = _RcIpFilterMediaStreamTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 26),
    _RcIpFilterMediaStreamTableSize_Type()
)
rcIpFilterMediaStreamTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamTableSize.setStatus("current")
_RcIpFilterMediaStreamTable_Object = MibTable
rcIpFilterMediaStreamTable = _RcIpFilterMediaStreamTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27)
)
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamTable.setStatus("current")
_RcIpFilterMediaStreamEntry_Object = MibTableRow
rcIpFilterMediaStreamEntry = _RcIpFilterMediaStreamEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1)
)
rcIpFilterMediaStreamEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpFilterMediaStreamMediaId"),
    (0, "RAPID-CITY", "rcIpFilterMediaStreamStreamId"),
)
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamEntry.setStatus("current")


class _RcIpFilterMediaStreamMediaId_Type(Integer32):
    """Custom type rcIpFilterMediaStreamMediaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3000, 3127),
    )


_RcIpFilterMediaStreamMediaId_Type.__name__ = "Integer32"
_RcIpFilterMediaStreamMediaId_Object = MibTableColumn
rcIpFilterMediaStreamMediaId = _RcIpFilterMediaStreamMediaId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 1),
    _RcIpFilterMediaStreamMediaId_Type()
)
rcIpFilterMediaStreamMediaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamMediaId.setStatus("current")


class _RcIpFilterMediaStreamStreamId_Type(Integer32):
    """Custom type rcIpFilterMediaStreamStreamId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_RcIpFilterMediaStreamStreamId_Type.__name__ = "Integer32"
_RcIpFilterMediaStreamStreamId_Object = MibTableColumn
rcIpFilterMediaStreamStreamId = _RcIpFilterMediaStreamStreamId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 2),
    _RcIpFilterMediaStreamStreamId_Type()
)
rcIpFilterMediaStreamStreamId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamStreamId.setStatus("current")


class _RcIpFilterMediaStreamName_Type(DisplayString):
    """Custom type rcIpFilterMediaStreamName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_RcIpFilterMediaStreamName_Type.__name__ = "DisplayString"
_RcIpFilterMediaStreamName_Object = MibTableColumn
rcIpFilterMediaStreamName = _RcIpFilterMediaStreamName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 3),
    _RcIpFilterMediaStreamName_Type()
)
rcIpFilterMediaStreamName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamName.setStatus("current")


class _RcIpFilterMediaStreamProtocol_Type(Integer32):
    """Custom type rcIpFilterMediaStreamProtocol based on Integer32"""
    defaultValue = 17

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(6,
              17)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 6),
          ("udp", 17))
    )


_RcIpFilterMediaStreamProtocol_Type.__name__ = "Integer32"
_RcIpFilterMediaStreamProtocol_Object = MibTableColumn
rcIpFilterMediaStreamProtocol = _RcIpFilterMediaStreamProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 4),
    _RcIpFilterMediaStreamProtocol_Type()
)
rcIpFilterMediaStreamProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamProtocol.setStatus("current")


class _RcIpFilterMediaStreamPortMin_Type(Integer32):
    """Custom type rcIpFilterMediaStreamPortMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpFilterMediaStreamPortMin_Type.__name__ = "Integer32"
_RcIpFilterMediaStreamPortMin_Object = MibTableColumn
rcIpFilterMediaStreamPortMin = _RcIpFilterMediaStreamPortMin_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 5),
    _RcIpFilterMediaStreamPortMin_Type()
)
rcIpFilterMediaStreamPortMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamPortMin.setStatus("current")


class _RcIpFilterMediaStreamPortMax_Type(Integer32):
    """Custom type rcIpFilterMediaStreamPortMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpFilterMediaStreamPortMax_Type.__name__ = "Integer32"
_RcIpFilterMediaStreamPortMax_Object = MibTableColumn
rcIpFilterMediaStreamPortMax = _RcIpFilterMediaStreamPortMax_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 6),
    _RcIpFilterMediaStreamPortMax_Type()
)
rcIpFilterMediaStreamPortMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamPortMax.setStatus("current")


class _RcIpFilterMediaStreamPortOption_Type(Integer32):
    """Custom type rcIpFilterMediaStreamPortOption based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dest", 2),
          ("src", 1),
          ("srcDest", 3))
    )


_RcIpFilterMediaStreamPortOption_Type.__name__ = "Integer32"
_RcIpFilterMediaStreamPortOption_Object = MibTableColumn
rcIpFilterMediaStreamPortOption = _RcIpFilterMediaStreamPortOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 7),
    _RcIpFilterMediaStreamPortOption_Type()
)
rcIpFilterMediaStreamPortOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamPortOption.setStatus("current")


class _RcIpFilterMediaStreamType_Type(Integer32):
    """Custom type rcIpFilterMediaStreamType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("media", 2),
          ("signal", 1))
    )


_RcIpFilterMediaStreamType_Type.__name__ = "Integer32"
_RcIpFilterMediaStreamType_Object = MibTableColumn
rcIpFilterMediaStreamType = _RcIpFilterMediaStreamType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 8),
    _RcIpFilterMediaStreamType_Type()
)
rcIpFilterMediaStreamType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamType.setStatus("current")


class _RcIpFilterMediaStreamRemarkDscp_Type(DisplayString):
    """Custom type rcIpFilterMediaStreamRemarkDscp based on DisplayString"""
    defaultHexValue = "0"

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIpFilterMediaStreamRemarkDscp_Type.__name__ = "DisplayString"
_RcIpFilterMediaStreamRemarkDscp_Object = MibTableColumn
rcIpFilterMediaStreamRemarkDscp = _RcIpFilterMediaStreamRemarkDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 9),
    _RcIpFilterMediaStreamRemarkDscp_Type()
)
rcIpFilterMediaStreamRemarkDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamRemarkDscp.setStatus("current")


class _RcIpFilterMediaStreamMatchDscp_Type(DisplayString):
    """Custom type rcIpFilterMediaStreamMatchDscp based on DisplayString"""
    defaultHexValue = "0"

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIpFilterMediaStreamMatchDscp_Type.__name__ = "DisplayString"
_RcIpFilterMediaStreamMatchDscp_Object = MibTableColumn
rcIpFilterMediaStreamMatchDscp = _RcIpFilterMediaStreamMatchDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 10),
    _RcIpFilterMediaStreamMatchDscp_Type()
)
rcIpFilterMediaStreamMatchDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamMatchDscp.setStatus("current")
_RcIpFilterMediaStreamRowStatus_Type = RowStatus
_RcIpFilterMediaStreamRowStatus_Object = MibTableColumn
rcIpFilterMediaStreamRowStatus = _RcIpFilterMediaStreamRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 10, 27, 1, 11),
    _RcIpFilterMediaStreamRowStatus_Type()
)
rcIpFilterMediaStreamRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpFilterMediaStreamRowStatus.setStatus("current")
_RcIpPolicy_ObjectIdentity = ObjectIdentity
rcIpPolicy = _RcIpPolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11)
)
_RcIpPolicyAddrTableSize_Type = Integer32
_RcIpPolicyAddrTableSize_Object = MibScalar
rcIpPolicyAddrTableSize = _RcIpPolicyAddrTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 1),
    _RcIpPolicyAddrTableSize_Type()
)
rcIpPolicyAddrTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrTableSize.setStatus("deprecated")
_RcIpPolicyAddrTable_Object = MibTable
rcIpPolicyAddrTable = _RcIpPolicyAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 2)
)
if mibBuilder.loadTexts:
    rcIpPolicyAddrTable.setStatus("deprecated")
_RcIpPolicyAddrEntry_Object = MibTableRow
rcIpPolicyAddrEntry = _RcIpPolicyAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 2, 1)
)
rcIpPolicyAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPolicyAddrIpAddr"),
)
if mibBuilder.loadTexts:
    rcIpPolicyAddrEntry.setStatus("deprecated")
_RcIpPolicyAddrIpAddr_Type = IpAddress
_RcIpPolicyAddrIpAddr_Object = MibTableColumn
rcIpPolicyAddrIpAddr = _RcIpPolicyAddrIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 2, 1, 1),
    _RcIpPolicyAddrIpAddr_Type()
)
rcIpPolicyAddrIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrIpAddr.setStatus("deprecated")
_RcIpPolicyAddrId_Type = Integer32
_RcIpPolicyAddrId_Object = MibTableColumn
rcIpPolicyAddrId = _RcIpPolicyAddrId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 2, 1, 2),
    _RcIpPolicyAddrId_Type()
)
rcIpPolicyAddrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrId.setStatus("deprecated")


class _RcIpPolicyAddrAddrListIdListSize_Type(Integer32):
    """Custom type rcIpPolicyAddrAddrListIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpPolicyAddrAddrListIdListSize_Type.__name__ = "Integer32"
_RcIpPolicyAddrAddrListIdListSize_Object = MibTableColumn
rcIpPolicyAddrAddrListIdListSize = _RcIpPolicyAddrAddrListIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 2, 1, 3),
    _RcIpPolicyAddrAddrListIdListSize_Type()
)
rcIpPolicyAddrAddrListIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrAddrListIdListSize.setStatus("deprecated")


class _RcIpPolicyAddrAddrListIdList_Type(OctetString):
    """Custom type rcIpPolicyAddrAddrListIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcIpPolicyAddrAddrListIdList_Type.__name__ = "OctetString"
_RcIpPolicyAddrAddrListIdList_Object = MibTableColumn
rcIpPolicyAddrAddrListIdList = _RcIpPolicyAddrAddrListIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 2, 1, 4),
    _RcIpPolicyAddrAddrListIdList_Type()
)
rcIpPolicyAddrAddrListIdList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrAddrListIdList.setStatus("deprecated")
_RcIpPolicyAddrRowStatus_Type = RowStatus
_RcIpPolicyAddrRowStatus_Object = MibTableColumn
rcIpPolicyAddrRowStatus = _RcIpPolicyAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 2, 1, 5),
    _RcIpPolicyAddrRowStatus_Type()
)
rcIpPolicyAddrRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyAddrRowStatus.setStatus("deprecated")
_RcIpPolicyNetTableSize_Type = Integer32
_RcIpPolicyNetTableSize_Object = MibScalar
rcIpPolicyNetTableSize = _RcIpPolicyNetTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 3),
    _RcIpPolicyNetTableSize_Type()
)
rcIpPolicyNetTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetTableSize.setStatus("deprecated")
_RcIpPolicyNetTable_Object = MibTable
rcIpPolicyNetTable = _RcIpPolicyNetTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 4)
)
if mibBuilder.loadTexts:
    rcIpPolicyNetTable.setStatus("deprecated")
_RcIpPolicyNetEntry_Object = MibTableRow
rcIpPolicyNetEntry = _RcIpPolicyNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 4, 1)
)
rcIpPolicyNetEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPolicyNetAddr"),
    (0, "RAPID-CITY", "rcIpPolicyNetMask"),
)
if mibBuilder.loadTexts:
    rcIpPolicyNetEntry.setStatus("deprecated")
_RcIpPolicyNetAddr_Type = IpAddress
_RcIpPolicyNetAddr_Object = MibTableColumn
rcIpPolicyNetAddr = _RcIpPolicyNetAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 4, 1, 1),
    _RcIpPolicyNetAddr_Type()
)
rcIpPolicyNetAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetAddr.setStatus("deprecated")
_RcIpPolicyNetMask_Type = IpAddress
_RcIpPolicyNetMask_Object = MibTableColumn
rcIpPolicyNetMask = _RcIpPolicyNetMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 4, 1, 2),
    _RcIpPolicyNetMask_Type()
)
rcIpPolicyNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetMask.setStatus("deprecated")
_RcIpPolicyNetId_Type = Integer32
_RcIpPolicyNetId_Object = MibTableColumn
rcIpPolicyNetId = _RcIpPolicyNetId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 4, 1, 3),
    _RcIpPolicyNetId_Type()
)
rcIpPolicyNetId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetId.setStatus("deprecated")


class _RcIpPolicyNetNetListIdListSize_Type(Integer32):
    """Custom type rcIpPolicyNetNetListIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpPolicyNetNetListIdListSize_Type.__name__ = "Integer32"
_RcIpPolicyNetNetListIdListSize_Object = MibTableColumn
rcIpPolicyNetNetListIdListSize = _RcIpPolicyNetNetListIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 4, 1, 4),
    _RcIpPolicyNetNetListIdListSize_Type()
)
rcIpPolicyNetNetListIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetNetListIdListSize.setStatus("deprecated")


class _RcIpPolicyNetNetListIdList_Type(OctetString):
    """Custom type rcIpPolicyNetNetListIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcIpPolicyNetNetListIdList_Type.__name__ = "OctetString"
_RcIpPolicyNetNetListIdList_Object = MibTableColumn
rcIpPolicyNetNetListIdList = _RcIpPolicyNetNetListIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 4, 1, 5),
    _RcIpPolicyNetNetListIdList_Type()
)
rcIpPolicyNetNetListIdList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetNetListIdList.setStatus("deprecated")
_RcIpPolicyNetRowStatus_Type = RowStatus
_RcIpPolicyNetRowStatus_Object = MibTableColumn
rcIpPolicyNetRowStatus = _RcIpPolicyNetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 4, 1, 6),
    _RcIpPolicyNetRowStatus_Type()
)
rcIpPolicyNetRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyNetRowStatus.setStatus("deprecated")
_RcIpPolicyAddrListTableSize_Type = Integer32
_RcIpPolicyAddrListTableSize_Object = MibScalar
rcIpPolicyAddrListTableSize = _RcIpPolicyAddrListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 5),
    _RcIpPolicyAddrListTableSize_Type()
)
rcIpPolicyAddrListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrListTableSize.setStatus("deprecated")
_RcIpPolicyAddrListTable_Object = MibTable
rcIpPolicyAddrListTable = _RcIpPolicyAddrListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6)
)
if mibBuilder.loadTexts:
    rcIpPolicyAddrListTable.setStatus("deprecated")
_RcIpPolicyAddrListEntry_Object = MibTableRow
rcIpPolicyAddrListEntry = _RcIpPolicyAddrListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6, 1)
)
rcIpPolicyAddrListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPolicyAddrListId"),
)
if mibBuilder.loadTexts:
    rcIpPolicyAddrListEntry.setStatus("deprecated")


class _RcIpPolicyAddrListId_Type(Integer32):
    """Custom type rcIpPolicyAddrListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcIpPolicyAddrListId_Type.__name__ = "Integer32"
_RcIpPolicyAddrListId_Object = MibTableColumn
rcIpPolicyAddrListId = _RcIpPolicyAddrListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6, 1, 1),
    _RcIpPolicyAddrListId_Type()
)
rcIpPolicyAddrListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrListId.setStatus("deprecated")


class _RcIpPolicyAddrListName_Type(DisplayString):
    """Custom type rcIpPolicyAddrListName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpPolicyAddrListName_Type.__name__ = "DisplayString"
_RcIpPolicyAddrListName_Object = MibTableColumn
rcIpPolicyAddrListName = _RcIpPolicyAddrListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6, 1, 3),
    _RcIpPolicyAddrListName_Type()
)
rcIpPolicyAddrListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyAddrListName.setStatus("deprecated")


class _RcIpPolicyAddrListIdListSize_Type(Integer32):
    """Custom type rcIpPolicyAddrListIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpPolicyAddrListIdListSize_Type.__name__ = "Integer32"
_RcIpPolicyAddrListIdListSize_Object = MibTableColumn
rcIpPolicyAddrListIdListSize = _RcIpPolicyAddrListIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6, 1, 4),
    _RcIpPolicyAddrListIdListSize_Type()
)
rcIpPolicyAddrListIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrListIdListSize.setStatus("deprecated")


class _RcIpPolicyAddrListIdList_Type(OctetString):
    """Custom type rcIpPolicyAddrListIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcIpPolicyAddrListIdList_Type.__name__ = "OctetString"
_RcIpPolicyAddrListIdList_Object = MibTableColumn
rcIpPolicyAddrListIdList = _RcIpPolicyAddrListIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6, 1, 5),
    _RcIpPolicyAddrListIdList_Type()
)
rcIpPolicyAddrListIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyAddrListIdList.setStatus("deprecated")


class _RcIpPolicyAddrListPolicyIdListSize_Type(Integer32):
    """Custom type rcIpPolicyAddrListPolicyIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpPolicyAddrListPolicyIdListSize_Type.__name__ = "Integer32"
_RcIpPolicyAddrListPolicyIdListSize_Object = MibTableColumn
rcIpPolicyAddrListPolicyIdListSize = _RcIpPolicyAddrListPolicyIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6, 1, 6),
    _RcIpPolicyAddrListPolicyIdListSize_Type()
)
rcIpPolicyAddrListPolicyIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrListPolicyIdListSize.setStatus("deprecated")


class _RcIpPolicyAddrListPolicyIdList_Type(OctetString):
    """Custom type rcIpPolicyAddrListPolicyIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcIpPolicyAddrListPolicyIdList_Type.__name__ = "OctetString"
_RcIpPolicyAddrListPolicyIdList_Object = MibTableColumn
rcIpPolicyAddrListPolicyIdList = _RcIpPolicyAddrListPolicyIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6, 1, 7),
    _RcIpPolicyAddrListPolicyIdList_Type()
)
rcIpPolicyAddrListPolicyIdList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyAddrListPolicyIdList.setStatus("deprecated")
_RcIpPolicyAddrListRowStatus_Type = RowStatus
_RcIpPolicyAddrListRowStatus_Object = MibTableColumn
rcIpPolicyAddrListRowStatus = _RcIpPolicyAddrListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 6, 1, 8),
    _RcIpPolicyAddrListRowStatus_Type()
)
rcIpPolicyAddrListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyAddrListRowStatus.setStatus("deprecated")
_RcIpPolicyRipAnnounceTableSize_Type = Integer32
_RcIpPolicyRipAnnounceTableSize_Object = MibScalar
rcIpPolicyRipAnnounceTableSize = _RcIpPolicyRipAnnounceTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 7),
    _RcIpPolicyRipAnnounceTableSize_Type()
)
rcIpPolicyRipAnnounceTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceTableSize.setStatus("deprecated")
_RcIpPolicyRipAnnounceTable_Object = MibTable
rcIpPolicyRipAnnounceTable = _RcIpPolicyRipAnnounceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8)
)
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceTable.setStatus("deprecated")
_RcIpPolicyRipAnnounceEntry_Object = MibTableRow
rcIpPolicyRipAnnounceEntry = _RcIpPolicyRipAnnounceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1)
)
rcIpPolicyRipAnnounceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPolicyRipAnnounceId"),
)
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceEntry.setStatus("deprecated")


class _RcIpPolicyRipAnnounceId_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcIpPolicyRipAnnounceId_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceId_Object = MibTableColumn
rcIpPolicyRipAnnounceId = _RcIpPolicyRipAnnounceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 1),
    _RcIpPolicyRipAnnounceId_Type()
)
rcIpPolicyRipAnnounceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceId.setStatus("deprecated")


class _RcIpPolicyRipAnnounceName_Type(DisplayString):
    """Custom type rcIpPolicyRipAnnounceName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpPolicyRipAnnounceName_Type.__name__ = "DisplayString"
_RcIpPolicyRipAnnounceName_Object = MibTableColumn
rcIpPolicyRipAnnounceName = _RcIpPolicyRipAnnounceName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 2),
    _RcIpPolicyRipAnnounceName_Type()
)
rcIpPolicyRipAnnounceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceName.setStatus("deprecated")


class _RcIpPolicyRipAnnounceEnable_Type(TruthValue):
    """Custom type rcIpPolicyRipAnnounceEnable based on TruthValue"""


_RcIpPolicyRipAnnounceEnable_Object = MibTableColumn
rcIpPolicyRipAnnounceEnable = _RcIpPolicyRipAnnounceEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 3),
    _RcIpPolicyRipAnnounceEnable_Type()
)
rcIpPolicyRipAnnounceEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceEnable.setStatus("deprecated")


class _RcIpPolicyRipAnnounceExactNetListId_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceExactNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAnnounceExactNetListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceExactNetListId_Object = MibTableColumn
rcIpPolicyRipAnnounceExactNetListId = _RcIpPolicyRipAnnounceExactNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 4),
    _RcIpPolicyRipAnnounceExactNetListId_Type()
)
rcIpPolicyRipAnnounceExactNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceExactNetListId.setStatus("deprecated")


class _RcIpPolicyRipAnnounceRangeNetListId_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceRangeNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAnnounceRangeNetListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceRangeNetListId_Object = MibTableColumn
rcIpPolicyRipAnnounceRangeNetListId = _RcIpPolicyRipAnnounceRangeNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 5),
    _RcIpPolicyRipAnnounceRangeNetListId_Type()
)
rcIpPolicyRipAnnounceRangeNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceRangeNetListId.setStatus("deprecated")


class _RcIpPolicyRipAnnounceRipGatewayListId_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceRipGatewayListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAnnounceRipGatewayListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceRipGatewayListId_Object = MibTableColumn
rcIpPolicyRipAnnounceRipGatewayListId = _RcIpPolicyRipAnnounceRipGatewayListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 6),
    _RcIpPolicyRipAnnounceRipGatewayListId_Type()
)
rcIpPolicyRipAnnounceRipGatewayListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceRipGatewayListId.setStatus("deprecated")


class _RcIpPolicyRipAnnounceRipInterfaceListId_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceRipInterfaceListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAnnounceRipInterfaceListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceRipInterfaceListId_Object = MibTableColumn
rcIpPolicyRipAnnounceRipInterfaceListId = _RcIpPolicyRipAnnounceRipInterfaceListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 7),
    _RcIpPolicyRipAnnounceRipInterfaceListId_Type()
)
rcIpPolicyRipAnnounceRipInterfaceListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceRipInterfaceListId.setStatus("deprecated")


class _RcIpPolicyRipAnnounceOspfRouterListId_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceOspfRouterListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAnnounceOspfRouterListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceOspfRouterListId_Object = MibTableColumn
rcIpPolicyRipAnnounceOspfRouterListId = _RcIpPolicyRipAnnounceOspfRouterListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 8),
    _RcIpPolicyRipAnnounceOspfRouterListId_Type()
)
rcIpPolicyRipAnnounceOspfRouterListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceOspfRouterListId.setStatus("deprecated")


class _RcIpPolicyRipAnnounceAnnounceInterfaceListId_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceAnnounceInterfaceListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAnnounceAnnounceInterfaceListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceAnnounceInterfaceListId_Object = MibTableColumn
rcIpPolicyRipAnnounceAnnounceInterfaceListId = _RcIpPolicyRipAnnounceAnnounceInterfaceListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 9),
    _RcIpPolicyRipAnnounceAnnounceInterfaceListId_Type()
)
rcIpPolicyRipAnnounceAnnounceInterfaceListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceAnnounceInterfaceListId.setStatus("deprecated")


class _RcIpPolicyRipAnnouncePrecedence_Type(Integer32):
    """Custom type rcIpPolicyRipAnnouncePrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpPolicyRipAnnouncePrecedence_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnouncePrecedence_Object = MibTableColumn
rcIpPolicyRipAnnouncePrecedence = _RcIpPolicyRipAnnouncePrecedence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 10),
    _RcIpPolicyRipAnnouncePrecedence_Type()
)
rcIpPolicyRipAnnouncePrecedence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnouncePrecedence.setStatus("deprecated")


class _RcIpPolicyRipAnnounceRouteSource_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceRouteSource based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              15)
        )
    )
    namedValues = NamedValues(
        *(("any", 15),
          ("direct", 1),
          ("ospf", 8),
          ("rip", 4),
          ("static", 2))
    )


_RcIpPolicyRipAnnounceRouteSource_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceRouteSource_Object = MibTableColumn
rcIpPolicyRipAnnounceRouteSource = _RcIpPolicyRipAnnounceRouteSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 11),
    _RcIpPolicyRipAnnounceRouteSource_Type()
)
rcIpPolicyRipAnnounceRouteSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceRouteSource.setStatus("deprecated")


class _RcIpPolicyRipAnnounceAdvertiseNetListId_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceAdvertiseNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAnnounceAdvertiseNetListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceAdvertiseNetListId_Object = MibTableColumn
rcIpPolicyRipAnnounceAdvertiseNetListId = _RcIpPolicyRipAnnounceAdvertiseNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 12),
    _RcIpPolicyRipAnnounceAdvertiseNetListId_Type()
)
rcIpPolicyRipAnnounceAdvertiseNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceAdvertiseNetListId.setStatus("deprecated")


class _RcIpPolicyRipAnnounceAction_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceAction based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("announce", 1),
          ("ignore", 2))
    )


_RcIpPolicyRipAnnounceAction_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceAction_Object = MibTableColumn
rcIpPolicyRipAnnounceAction = _RcIpPolicyRipAnnounceAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 13),
    _RcIpPolicyRipAnnounceAction_Type()
)
rcIpPolicyRipAnnounceAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceAction.setStatus("deprecated")


class _RcIpPolicyRipAnnounceOspfRouteType_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceOspfRouteType based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("any", 5),
          ("external", 3),
          ("internal", 4),
          ("type1", 1),
          ("type2", 2))
    )


_RcIpPolicyRipAnnounceOspfRouteType_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceOspfRouteType_Object = MibTableColumn
rcIpPolicyRipAnnounceOspfRouteType = _RcIpPolicyRipAnnounceOspfRouteType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 14),
    _RcIpPolicyRipAnnounceOspfRouteType_Type()
)
rcIpPolicyRipAnnounceOspfRouteType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceOspfRouteType.setStatus("deprecated")


class _RcIpPolicyRipAnnounceRipMetric_Type(Integer32):
    """Custom type rcIpPolicyRipAnnounceRipMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RcIpPolicyRipAnnounceRipMetric_Type.__name__ = "Integer32"
_RcIpPolicyRipAnnounceRipMetric_Object = MibTableColumn
rcIpPolicyRipAnnounceRipMetric = _RcIpPolicyRipAnnounceRipMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 15),
    _RcIpPolicyRipAnnounceRipMetric_Type()
)
rcIpPolicyRipAnnounceRipMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceRipMetric.setStatus("deprecated")
_RcIpPolicyRipAnnounceRowStatus_Type = RowStatus
_RcIpPolicyRipAnnounceRowStatus_Object = MibTableColumn
rcIpPolicyRipAnnounceRowStatus = _RcIpPolicyRipAnnounceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 8, 1, 16),
    _RcIpPolicyRipAnnounceRowStatus_Type()
)
rcIpPolicyRipAnnounceRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAnnounceRowStatus.setStatus("deprecated")
_RcIpPolicyOspfAnnounceTableSize_Type = Integer32
_RcIpPolicyOspfAnnounceTableSize_Object = MibScalar
rcIpPolicyOspfAnnounceTableSize = _RcIpPolicyOspfAnnounceTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 9),
    _RcIpPolicyOspfAnnounceTableSize_Type()
)
rcIpPolicyOspfAnnounceTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceTableSize.setStatus("deprecated")
_RcIpPolicyOspfAnnounceTable_Object = MibTable
rcIpPolicyOspfAnnounceTable = _RcIpPolicyOspfAnnounceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10)
)
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceTable.setStatus("deprecated")
_RcIpPolicyOspfAnnounceEntry_Object = MibTableRow
rcIpPolicyOspfAnnounceEntry = _RcIpPolicyOspfAnnounceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1)
)
rcIpPolicyOspfAnnounceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPolicyOspfAnnounceId"),
)
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceEntry.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceId_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2001, 3000),
    )


_RcIpPolicyOspfAnnounceId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceId_Object = MibTableColumn
rcIpPolicyOspfAnnounceId = _RcIpPolicyOspfAnnounceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 1),
    _RcIpPolicyOspfAnnounceId_Type()
)
rcIpPolicyOspfAnnounceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceId.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceName_Type(DisplayString):
    """Custom type rcIpPolicyOspfAnnounceName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpPolicyOspfAnnounceName_Type.__name__ = "DisplayString"
_RcIpPolicyOspfAnnounceName_Object = MibTableColumn
rcIpPolicyOspfAnnounceName = _RcIpPolicyOspfAnnounceName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 2),
    _RcIpPolicyOspfAnnounceName_Type()
)
rcIpPolicyOspfAnnounceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceName.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceEnable_Type(TruthValue):
    """Custom type rcIpPolicyOspfAnnounceEnable based on TruthValue"""


_RcIpPolicyOspfAnnounceEnable_Object = MibTableColumn
rcIpPolicyOspfAnnounceEnable = _RcIpPolicyOspfAnnounceEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 3),
    _RcIpPolicyOspfAnnounceEnable_Type()
)
rcIpPolicyOspfAnnounceEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceEnable.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceExactNetListId_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceExactNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyOspfAnnounceExactNetListId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceExactNetListId_Object = MibTableColumn
rcIpPolicyOspfAnnounceExactNetListId = _RcIpPolicyOspfAnnounceExactNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 4),
    _RcIpPolicyOspfAnnounceExactNetListId_Type()
)
rcIpPolicyOspfAnnounceExactNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceExactNetListId.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceRangeNetListId_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceRangeNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyOspfAnnounceRangeNetListId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceRangeNetListId_Object = MibTableColumn
rcIpPolicyOspfAnnounceRangeNetListId = _RcIpPolicyOspfAnnounceRangeNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 5),
    _RcIpPolicyOspfAnnounceRangeNetListId_Type()
)
rcIpPolicyOspfAnnounceRangeNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceRangeNetListId.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceRipGatewayListId_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceRipGatewayListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyOspfAnnounceRipGatewayListId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceRipGatewayListId_Object = MibTableColumn
rcIpPolicyOspfAnnounceRipGatewayListId = _RcIpPolicyOspfAnnounceRipGatewayListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 6),
    _RcIpPolicyOspfAnnounceRipGatewayListId_Type()
)
rcIpPolicyOspfAnnounceRipGatewayListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceRipGatewayListId.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceRipInterfaceListId_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceRipInterfaceListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyOspfAnnounceRipInterfaceListId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceRipInterfaceListId_Object = MibTableColumn
rcIpPolicyOspfAnnounceRipInterfaceListId = _RcIpPolicyOspfAnnounceRipInterfaceListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 7),
    _RcIpPolicyOspfAnnounceRipInterfaceListId_Type()
)
rcIpPolicyOspfAnnounceRipInterfaceListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceRipInterfaceListId.setStatus("deprecated")


class _RcIpPolicyOspfAnnouncePrecedence_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnouncePrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpPolicyOspfAnnouncePrecedence_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnouncePrecedence_Object = MibTableColumn
rcIpPolicyOspfAnnouncePrecedence = _RcIpPolicyOspfAnnouncePrecedence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 8),
    _RcIpPolicyOspfAnnouncePrecedence_Type()
)
rcIpPolicyOspfAnnouncePrecedence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnouncePrecedence.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceRouteSource_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceRouteSource based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              7)
        )
    )
    namedValues = NamedValues(
        *(("any", 7),
          ("direct", 1),
          ("rip", 4),
          ("static", 2))
    )


_RcIpPolicyOspfAnnounceRouteSource_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceRouteSource_Object = MibTableColumn
rcIpPolicyOspfAnnounceRouteSource = _RcIpPolicyOspfAnnounceRouteSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 9),
    _RcIpPolicyOspfAnnounceRouteSource_Type()
)
rcIpPolicyOspfAnnounceRouteSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceRouteSource.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceAdvertiseNetListId_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceAdvertiseNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyOspfAnnounceAdvertiseNetListId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceAdvertiseNetListId_Object = MibTableColumn
rcIpPolicyOspfAnnounceAdvertiseNetListId = _RcIpPolicyOspfAnnounceAdvertiseNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 10),
    _RcIpPolicyOspfAnnounceAdvertiseNetListId_Type()
)
rcIpPolicyOspfAnnounceAdvertiseNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceAdvertiseNetListId.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceAction_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceAction based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("announce", 1),
          ("ignore", 2))
    )


_RcIpPolicyOspfAnnounceAction_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceAction_Object = MibTableColumn
rcIpPolicyOspfAnnounceAction = _RcIpPolicyOspfAnnounceAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 11),
    _RcIpPolicyOspfAnnounceAction_Type()
)
rcIpPolicyOspfAnnounceAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceAction.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceExtMetricType_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceExtMetricType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("type1", 1),
          ("type2", 2))
    )


_RcIpPolicyOspfAnnounceExtMetricType_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceExtMetricType_Object = MibTableColumn
rcIpPolicyOspfAnnounceExtMetricType = _RcIpPolicyOspfAnnounceExtMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 12),
    _RcIpPolicyOspfAnnounceExtMetricType_Type()
)
rcIpPolicyOspfAnnounceExtMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceExtMetricType.setStatus("deprecated")


class _RcIpPolicyOspfAnnounceExtMetric_Type(Integer32):
    """Custom type rcIpPolicyOspfAnnounceExtMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpPolicyOspfAnnounceExtMetric_Type.__name__ = "Integer32"
_RcIpPolicyOspfAnnounceExtMetric_Object = MibTableColumn
rcIpPolicyOspfAnnounceExtMetric = _RcIpPolicyOspfAnnounceExtMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 13),
    _RcIpPolicyOspfAnnounceExtMetric_Type()
)
rcIpPolicyOspfAnnounceExtMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceExtMetric.setStatus("deprecated")
_RcIpPolicyOspfAnnounceRowStatus_Type = RowStatus
_RcIpPolicyOspfAnnounceRowStatus_Object = MibTableColumn
rcIpPolicyOspfAnnounceRowStatus = _RcIpPolicyOspfAnnounceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 10, 1, 14),
    _RcIpPolicyOspfAnnounceRowStatus_Type()
)
rcIpPolicyOspfAnnounceRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAnnounceRowStatus.setStatus("deprecated")
_RcIpPolicyRipAcceptTableSize_Type = Integer32
_RcIpPolicyRipAcceptTableSize_Object = MibScalar
rcIpPolicyRipAcceptTableSize = _RcIpPolicyRipAcceptTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 11),
    _RcIpPolicyRipAcceptTableSize_Type()
)
rcIpPolicyRipAcceptTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptTableSize.setStatus("deprecated")
_RcIpPolicyRipAcceptTable_Object = MibTable
rcIpPolicyRipAcceptTable = _RcIpPolicyRipAcceptTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12)
)
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptTable.setStatus("deprecated")
_RcIpPolicyRipAcceptEntry_Object = MibTableRow
rcIpPolicyRipAcceptEntry = _RcIpPolicyRipAcceptEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1)
)
rcIpPolicyRipAcceptEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPolicyRipAcceptId"),
)
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptEntry.setStatus("deprecated")


class _RcIpPolicyRipAcceptId_Type(Integer32):
    """Custom type rcIpPolicyRipAcceptId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4001, 5000),
    )


_RcIpPolicyRipAcceptId_Type.__name__ = "Integer32"
_RcIpPolicyRipAcceptId_Object = MibTableColumn
rcIpPolicyRipAcceptId = _RcIpPolicyRipAcceptId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 1),
    _RcIpPolicyRipAcceptId_Type()
)
rcIpPolicyRipAcceptId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptId.setStatus("deprecated")


class _RcIpPolicyRipAcceptName_Type(DisplayString):
    """Custom type rcIpPolicyRipAcceptName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpPolicyRipAcceptName_Type.__name__ = "DisplayString"
_RcIpPolicyRipAcceptName_Object = MibTableColumn
rcIpPolicyRipAcceptName = _RcIpPolicyRipAcceptName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 2),
    _RcIpPolicyRipAcceptName_Type()
)
rcIpPolicyRipAcceptName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptName.setStatus("deprecated")


class _RcIpPolicyRipAcceptEnable_Type(TruthValue):
    """Custom type rcIpPolicyRipAcceptEnable based on TruthValue"""


_RcIpPolicyRipAcceptEnable_Object = MibTableColumn
rcIpPolicyRipAcceptEnable = _RcIpPolicyRipAcceptEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 3),
    _RcIpPolicyRipAcceptEnable_Type()
)
rcIpPolicyRipAcceptEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptEnable.setStatus("deprecated")


class _RcIpPolicyRipAcceptExactNetListId_Type(Integer32):
    """Custom type rcIpPolicyRipAcceptExactNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAcceptExactNetListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAcceptExactNetListId_Object = MibTableColumn
rcIpPolicyRipAcceptExactNetListId = _RcIpPolicyRipAcceptExactNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 4),
    _RcIpPolicyRipAcceptExactNetListId_Type()
)
rcIpPolicyRipAcceptExactNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptExactNetListId.setStatus("deprecated")


class _RcIpPolicyRipAcceptRangeNetListId_Type(Integer32):
    """Custom type rcIpPolicyRipAcceptRangeNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAcceptRangeNetListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAcceptRangeNetListId_Object = MibTableColumn
rcIpPolicyRipAcceptRangeNetListId = _RcIpPolicyRipAcceptRangeNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 5),
    _RcIpPolicyRipAcceptRangeNetListId_Type()
)
rcIpPolicyRipAcceptRangeNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptRangeNetListId.setStatus("deprecated")


class _RcIpPolicyRipAcceptRipGatewayListId_Type(Integer32):
    """Custom type rcIpPolicyRipAcceptRipGatewayListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAcceptRipGatewayListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAcceptRipGatewayListId_Object = MibTableColumn
rcIpPolicyRipAcceptRipGatewayListId = _RcIpPolicyRipAcceptRipGatewayListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 6),
    _RcIpPolicyRipAcceptRipGatewayListId_Type()
)
rcIpPolicyRipAcceptRipGatewayListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptRipGatewayListId.setStatus("deprecated")


class _RcIpPolicyRipAcceptRipInterfaceListId_Type(Integer32):
    """Custom type rcIpPolicyRipAcceptRipInterfaceListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAcceptRipInterfaceListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAcceptRipInterfaceListId_Object = MibTableColumn
rcIpPolicyRipAcceptRipInterfaceListId = _RcIpPolicyRipAcceptRipInterfaceListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 7),
    _RcIpPolicyRipAcceptRipInterfaceListId_Type()
)
rcIpPolicyRipAcceptRipInterfaceListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptRipInterfaceListId.setStatus("deprecated")


class _RcIpPolicyRipAcceptPrecedence_Type(Integer32):
    """Custom type rcIpPolicyRipAcceptPrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpPolicyRipAcceptPrecedence_Type.__name__ = "Integer32"
_RcIpPolicyRipAcceptPrecedence_Object = MibTableColumn
rcIpPolicyRipAcceptPrecedence = _RcIpPolicyRipAcceptPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 8),
    _RcIpPolicyRipAcceptPrecedence_Type()
)
rcIpPolicyRipAcceptPrecedence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptPrecedence.setStatus("deprecated")


class _RcIpPolicyRipAcceptAction_Type(Integer32):
    """Custom type rcIpPolicyRipAcceptAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accept", 1),
          ("ignore", 2))
    )


_RcIpPolicyRipAcceptAction_Type.__name__ = "Integer32"
_RcIpPolicyRipAcceptAction_Object = MibTableColumn
rcIpPolicyRipAcceptAction = _RcIpPolicyRipAcceptAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 9),
    _RcIpPolicyRipAcceptAction_Type()
)
rcIpPolicyRipAcceptAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptAction.setStatus("deprecated")


class _RcIpPolicyRipAcceptInjectNetListId_Type(Integer32):
    """Custom type rcIpPolicyRipAcceptInjectNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyRipAcceptInjectNetListId_Type.__name__ = "Integer32"
_RcIpPolicyRipAcceptInjectNetListId_Object = MibTableColumn
rcIpPolicyRipAcceptInjectNetListId = _RcIpPolicyRipAcceptInjectNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 10),
    _RcIpPolicyRipAcceptInjectNetListId_Type()
)
rcIpPolicyRipAcceptInjectNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptInjectNetListId.setStatus("deprecated")
_RcIpPolicyRipAcceptApplyMask_Type = IpAddress
_RcIpPolicyRipAcceptApplyMask_Object = MibTableColumn
rcIpPolicyRipAcceptApplyMask = _RcIpPolicyRipAcceptApplyMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 11),
    _RcIpPolicyRipAcceptApplyMask_Type()
)
rcIpPolicyRipAcceptApplyMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptApplyMask.setStatus("deprecated")
_RcIpPolicyRipAcceptRowStatus_Type = RowStatus
_RcIpPolicyRipAcceptRowStatus_Object = MibTableColumn
rcIpPolicyRipAcceptRowStatus = _RcIpPolicyRipAcceptRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 12, 1, 12),
    _RcIpPolicyRipAcceptRowStatus_Type()
)
rcIpPolicyRipAcceptRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyRipAcceptRowStatus.setStatus("deprecated")
_RcIpPolicyOspfAcceptTableSize_Type = Integer32
_RcIpPolicyOspfAcceptTableSize_Object = MibScalar
rcIpPolicyOspfAcceptTableSize = _RcIpPolicyOspfAcceptTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 13),
    _RcIpPolicyOspfAcceptTableSize_Type()
)
rcIpPolicyOspfAcceptTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptTableSize.setStatus("deprecated")
_RcIpPolicyOspfAcceptTable_Object = MibTable
rcIpPolicyOspfAcceptTable = _RcIpPolicyOspfAcceptTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14)
)
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptTable.setStatus("deprecated")
_RcIpPolicyOspfAcceptEntry_Object = MibTableRow
rcIpPolicyOspfAcceptEntry = _RcIpPolicyOspfAcceptEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1)
)
rcIpPolicyOspfAcceptEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPolicyOspfAcceptId"),
)
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptEntry.setStatus("deprecated")


class _RcIpPolicyOspfAcceptId_Type(Integer32):
    """Custom type rcIpPolicyOspfAcceptId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6001, 7000),
    )


_RcIpPolicyOspfAcceptId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAcceptId_Object = MibTableColumn
rcIpPolicyOspfAcceptId = _RcIpPolicyOspfAcceptId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 1),
    _RcIpPolicyOspfAcceptId_Type()
)
rcIpPolicyOspfAcceptId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptId.setStatus("deprecated")


class _RcIpPolicyOspfAcceptName_Type(DisplayString):
    """Custom type rcIpPolicyOspfAcceptName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpPolicyOspfAcceptName_Type.__name__ = "DisplayString"
_RcIpPolicyOspfAcceptName_Object = MibTableColumn
rcIpPolicyOspfAcceptName = _RcIpPolicyOspfAcceptName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 2),
    _RcIpPolicyOspfAcceptName_Type()
)
rcIpPolicyOspfAcceptName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptName.setStatus("deprecated")


class _RcIpPolicyOspfAcceptEnable_Type(TruthValue):
    """Custom type rcIpPolicyOspfAcceptEnable based on TruthValue"""


_RcIpPolicyOspfAcceptEnable_Object = MibTableColumn
rcIpPolicyOspfAcceptEnable = _RcIpPolicyOspfAcceptEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 3),
    _RcIpPolicyOspfAcceptEnable_Type()
)
rcIpPolicyOspfAcceptEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptEnable.setStatus("deprecated")


class _RcIpPolicyOspfAcceptExactNetListId_Type(Integer32):
    """Custom type rcIpPolicyOspfAcceptExactNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyOspfAcceptExactNetListId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAcceptExactNetListId_Object = MibTableColumn
rcIpPolicyOspfAcceptExactNetListId = _RcIpPolicyOspfAcceptExactNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 4),
    _RcIpPolicyOspfAcceptExactNetListId_Type()
)
rcIpPolicyOspfAcceptExactNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptExactNetListId.setStatus("deprecated")


class _RcIpPolicyOspfAcceptRangeNetListId_Type(Integer32):
    """Custom type rcIpPolicyOspfAcceptRangeNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyOspfAcceptRangeNetListId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAcceptRangeNetListId_Object = MibTableColumn
rcIpPolicyOspfAcceptRangeNetListId = _RcIpPolicyOspfAcceptRangeNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 5),
    _RcIpPolicyOspfAcceptRangeNetListId_Type()
)
rcIpPolicyOspfAcceptRangeNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptRangeNetListId.setStatus("deprecated")


class _RcIpPolicyOspfAcceptPrecedence_Type(Integer32):
    """Custom type rcIpPolicyOspfAcceptPrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpPolicyOspfAcceptPrecedence_Type.__name__ = "Integer32"
_RcIpPolicyOspfAcceptPrecedence_Object = MibTableColumn
rcIpPolicyOspfAcceptPrecedence = _RcIpPolicyOspfAcceptPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 6),
    _RcIpPolicyOspfAcceptPrecedence_Type()
)
rcIpPolicyOspfAcceptPrecedence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptPrecedence.setStatus("deprecated")


class _RcIpPolicyOspfAcceptAction_Type(Integer32):
    """Custom type rcIpPolicyOspfAcceptAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accept", 1),
          ("ignore", 2))
    )


_RcIpPolicyOspfAcceptAction_Type.__name__ = "Integer32"
_RcIpPolicyOspfAcceptAction_Object = MibTableColumn
rcIpPolicyOspfAcceptAction = _RcIpPolicyOspfAcceptAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 7),
    _RcIpPolicyOspfAcceptAction_Type()
)
rcIpPolicyOspfAcceptAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptAction.setStatus("deprecated")


class _RcIpPolicyOspfAcceptInjectNetListId_Type(Integer32):
    """Custom type rcIpPolicyOspfAcceptInjectNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpPolicyOspfAcceptInjectNetListId_Type.__name__ = "Integer32"
_RcIpPolicyOspfAcceptInjectNetListId_Object = MibTableColumn
rcIpPolicyOspfAcceptInjectNetListId = _RcIpPolicyOspfAcceptInjectNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 8),
    _RcIpPolicyOspfAcceptInjectNetListId_Type()
)
rcIpPolicyOspfAcceptInjectNetListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptInjectNetListId.setStatus("deprecated")


class _RcIpPolicyOspfAcceptExtType_Type(Integer32):
    """Custom type rcIpPolicyOspfAcceptExtType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("any", 3),
          ("type1", 1),
          ("type2", 2))
    )


_RcIpPolicyOspfAcceptExtType_Type.__name__ = "Integer32"
_RcIpPolicyOspfAcceptExtType_Object = MibTableColumn
rcIpPolicyOspfAcceptExtType = _RcIpPolicyOspfAcceptExtType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 9),
    _RcIpPolicyOspfAcceptExtType_Type()
)
rcIpPolicyOspfAcceptExtType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptExtType.setStatus("deprecated")
_RcIpPolicyOspfAcceptRowStatus_Type = RowStatus
_RcIpPolicyOspfAcceptRowStatus_Object = MibTableColumn
rcIpPolicyOspfAcceptRowStatus = _RcIpPolicyOspfAcceptRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 14, 1, 10),
    _RcIpPolicyOspfAcceptRowStatus_Type()
)
rcIpPolicyOspfAcceptRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyOspfAcceptRowStatus.setStatus("deprecated")
_RcIpPolicyNetListTableSize_Type = Integer32
_RcIpPolicyNetListTableSize_Object = MibScalar
rcIpPolicyNetListTableSize = _RcIpPolicyNetListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 15),
    _RcIpPolicyNetListTableSize_Type()
)
rcIpPolicyNetListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetListTableSize.setStatus("deprecated")
_RcIpPolicyNetListTable_Object = MibTable
rcIpPolicyNetListTable = _RcIpPolicyNetListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16)
)
if mibBuilder.loadTexts:
    rcIpPolicyNetListTable.setStatus("deprecated")
_RcIpPolicyNetListEntry_Object = MibTableRow
rcIpPolicyNetListEntry = _RcIpPolicyNetListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16, 1)
)
rcIpPolicyNetListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPolicyNetListId"),
)
if mibBuilder.loadTexts:
    rcIpPolicyNetListEntry.setStatus("deprecated")


class _RcIpPolicyNetListId_Type(Integer32):
    """Custom type rcIpPolicyNetListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcIpPolicyNetListId_Type.__name__ = "Integer32"
_RcIpPolicyNetListId_Object = MibTableColumn
rcIpPolicyNetListId = _RcIpPolicyNetListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16, 1, 1),
    _RcIpPolicyNetListId_Type()
)
rcIpPolicyNetListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetListId.setStatus("deprecated")


class _RcIpPolicyNetListName_Type(DisplayString):
    """Custom type rcIpPolicyNetListName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpPolicyNetListName_Type.__name__ = "DisplayString"
_RcIpPolicyNetListName_Object = MibTableColumn
rcIpPolicyNetListName = _RcIpPolicyNetListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16, 1, 3),
    _RcIpPolicyNetListName_Type()
)
rcIpPolicyNetListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyNetListName.setStatus("deprecated")


class _RcIpPolicyNetListIdListSize_Type(Integer32):
    """Custom type rcIpPolicyNetListIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpPolicyNetListIdListSize_Type.__name__ = "Integer32"
_RcIpPolicyNetListIdListSize_Object = MibTableColumn
rcIpPolicyNetListIdListSize = _RcIpPolicyNetListIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16, 1, 4),
    _RcIpPolicyNetListIdListSize_Type()
)
rcIpPolicyNetListIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetListIdListSize.setStatus("deprecated")


class _RcIpPolicyNetListIdList_Type(OctetString):
    """Custom type rcIpPolicyNetListIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcIpPolicyNetListIdList_Type.__name__ = "OctetString"
_RcIpPolicyNetListIdList_Object = MibTableColumn
rcIpPolicyNetListIdList = _RcIpPolicyNetListIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16, 1, 5),
    _RcIpPolicyNetListIdList_Type()
)
rcIpPolicyNetListIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyNetListIdList.setStatus("deprecated")


class _RcIpPolicyNetListPolicyIdListSize_Type(Integer32):
    """Custom type rcIpPolicyNetListPolicyIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpPolicyNetListPolicyIdListSize_Type.__name__ = "Integer32"
_RcIpPolicyNetListPolicyIdListSize_Object = MibTableColumn
rcIpPolicyNetListPolicyIdListSize = _RcIpPolicyNetListPolicyIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16, 1, 6),
    _RcIpPolicyNetListPolicyIdListSize_Type()
)
rcIpPolicyNetListPolicyIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetListPolicyIdListSize.setStatus("deprecated")


class _RcIpPolicyNetListPolicyIdList_Type(OctetString):
    """Custom type rcIpPolicyNetListPolicyIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcIpPolicyNetListPolicyIdList_Type.__name__ = "OctetString"
_RcIpPolicyNetListPolicyIdList_Object = MibTableColumn
rcIpPolicyNetListPolicyIdList = _RcIpPolicyNetListPolicyIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16, 1, 7),
    _RcIpPolicyNetListPolicyIdList_Type()
)
rcIpPolicyNetListPolicyIdList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPolicyNetListPolicyIdList.setStatus("deprecated")
_RcIpPolicyNetListRowStatus_Type = RowStatus
_RcIpPolicyNetListRowStatus_Object = MibTableColumn
rcIpPolicyNetListRowStatus = _RcIpPolicyNetListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 11, 16, 1, 8),
    _RcIpPolicyNetListRowStatus_Type()
)
rcIpPolicyNetListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPolicyNetListRowStatus.setStatus("deprecated")
_RcIpDvmrp_ObjectIdentity = ObjectIdentity
rcIpDvmrp = _RcIpDvmrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12)
)
_RcIpDvmrpGlobal_ObjectIdentity = ObjectIdentity
rcIpDvmrpGlobal = _RcIpDvmrpGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1)
)
_RcIpDvmrpGlobalEnable_Type = TruthValue
_RcIpDvmrpGlobalEnable_Object = MibScalar
rcIpDvmrpGlobalEnable = _RcIpDvmrpGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 1),
    _RcIpDvmrpGlobalEnable_Type()
)
rcIpDvmrpGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalEnable.setStatus("current")


class _RcIpDvmrpGlobalUpdateInterval_Type(Integer32):
    """Custom type rcIpDvmrpGlobalUpdateInterval based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2000),
    )


_RcIpDvmrpGlobalUpdateInterval_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalUpdateInterval_Object = MibScalar
rcIpDvmrpGlobalUpdateInterval = _RcIpDvmrpGlobalUpdateInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 2),
    _RcIpDvmrpGlobalUpdateInterval_Type()
)
rcIpDvmrpGlobalUpdateInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalUpdateInterval.setStatus("current")


class _RcIpDvmrpGlobalTriggeredUpdateInterval_Type(Integer32):
    """Custom type rcIpDvmrpGlobalTriggeredUpdateInterval based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 1000),
    )


_RcIpDvmrpGlobalTriggeredUpdateInterval_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalTriggeredUpdateInterval_Object = MibScalar
rcIpDvmrpGlobalTriggeredUpdateInterval = _RcIpDvmrpGlobalTriggeredUpdateInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 3),
    _RcIpDvmrpGlobalTriggeredUpdateInterval_Type()
)
rcIpDvmrpGlobalTriggeredUpdateInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalTriggeredUpdateInterval.setStatus("current")


class _RcIpDvmrpGlobalLeafTimeOut_Type(Integer32):
    """Custom type rcIpDvmrpGlobalLeafTimeOut based on Integer32"""
    defaultValue = 200

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(25, 4000),
    )


_RcIpDvmrpGlobalLeafTimeOut_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalLeafTimeOut_Object = MibScalar
rcIpDvmrpGlobalLeafTimeOut = _RcIpDvmrpGlobalLeafTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 4),
    _RcIpDvmrpGlobalLeafTimeOut_Type()
)
rcIpDvmrpGlobalLeafTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalLeafTimeOut.setStatus("current")


class _RcIpDvmrpGlobalNbrTimeOut_Type(Integer32):
    """Custom type rcIpDvmrpGlobalNbrTimeOut based on Integer32"""
    defaultValue = 140

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(35, 8000),
    )


_RcIpDvmrpGlobalNbrTimeOut_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalNbrTimeOut_Object = MibScalar
rcIpDvmrpGlobalNbrTimeOut = _RcIpDvmrpGlobalNbrTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 5),
    _RcIpDvmrpGlobalNbrTimeOut_Type()
)
rcIpDvmrpGlobalNbrTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalNbrTimeOut.setStatus("current")


class _RcIpDvmrpGlobalNbrProbeInterval_Type(Integer32):
    """Custom type rcIpDvmrpGlobalNbrProbeInterval based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_RcIpDvmrpGlobalNbrProbeInterval_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalNbrProbeInterval_Object = MibScalar
rcIpDvmrpGlobalNbrProbeInterval = _RcIpDvmrpGlobalNbrProbeInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 6),
    _RcIpDvmrpGlobalNbrProbeInterval_Type()
)
rcIpDvmrpGlobalNbrProbeInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalNbrProbeInterval.setStatus("current")


class _RcIpDvmrpGlobalRouteExpireTimeOut_Type(Integer32):
    """Custom type rcIpDvmrpGlobalRouteExpireTimeOut based on Integer32"""
    defaultValue = 140

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 4000),
    )


_RcIpDvmrpGlobalRouteExpireTimeOut_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalRouteExpireTimeOut_Object = MibScalar
rcIpDvmrpGlobalRouteExpireTimeOut = _RcIpDvmrpGlobalRouteExpireTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 7),
    _RcIpDvmrpGlobalRouteExpireTimeOut_Type()
)
rcIpDvmrpGlobalRouteExpireTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalRouteExpireTimeOut.setStatus("current")


class _RcIpDvmrpGlobalFwdCacheTimeOut_Type(Integer32):
    """Custom type rcIpDvmrpGlobalFwdCacheTimeOut based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 86400),
    )


_RcIpDvmrpGlobalFwdCacheTimeOut_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalFwdCacheTimeOut_Object = MibScalar
rcIpDvmrpGlobalFwdCacheTimeOut = _RcIpDvmrpGlobalFwdCacheTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 8),
    _RcIpDvmrpGlobalFwdCacheTimeOut_Type()
)
rcIpDvmrpGlobalFwdCacheTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalFwdCacheTimeOut.setStatus("current")


class _RcIpDvmrpGlobalRouteDiscardTimeOut_Type(Integer32):
    """Custom type rcIpDvmrpGlobalRouteDiscardTimeOut based on Integer32"""
    defaultValue = 260

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(25, 8000),
    )


_RcIpDvmrpGlobalRouteDiscardTimeOut_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalRouteDiscardTimeOut_Object = MibScalar
rcIpDvmrpGlobalRouteDiscardTimeOut = _RcIpDvmrpGlobalRouteDiscardTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 9),
    _RcIpDvmrpGlobalRouteDiscardTimeOut_Type()
)
rcIpDvmrpGlobalRouteDiscardTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalRouteDiscardTimeOut.setStatus("current")


class _RcIpDvmrpGlobalRouteSwitchTimeOut_Type(Integer32):
    """Custom type rcIpDvmrpGlobalRouteSwitchTimeOut based on Integer32"""
    defaultValue = 140

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 2000),
    )


_RcIpDvmrpGlobalRouteSwitchTimeOut_Type.__name__ = "Integer32"
_RcIpDvmrpGlobalRouteSwitchTimeOut_Object = MibScalar
rcIpDvmrpGlobalRouteSwitchTimeOut = _RcIpDvmrpGlobalRouteSwitchTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 10),
    _RcIpDvmrpGlobalRouteSwitchTimeOut_Type()
)
rcIpDvmrpGlobalRouteSwitchTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalRouteSwitchTimeOut.setStatus("current")


class _RcIpDvmrpGlobalGenerateTrap_Type(EnableValue):
    """Custom type rcIpDvmrpGlobalGenerateTrap based on EnableValue"""


_RcIpDvmrpGlobalGenerateTrap_Object = MibScalar
rcIpDvmrpGlobalGenerateTrap = _RcIpDvmrpGlobalGenerateTrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 12),
    _RcIpDvmrpGlobalGenerateTrap_Type()
)
rcIpDvmrpGlobalGenerateTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalGenerateTrap.setStatus("current")


class _RcIpDvmrpGlobalGenerateLog_Type(EnableValue):
    """Custom type rcIpDvmrpGlobalGenerateLog based on EnableValue"""


_RcIpDvmrpGlobalGenerateLog_Object = MibScalar
rcIpDvmrpGlobalGenerateLog = _RcIpDvmrpGlobalGenerateLog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 1, 13),
    _RcIpDvmrpGlobalGenerateLog_Type()
)
rcIpDvmrpGlobalGenerateLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpGlobalGenerateLog.setStatus("current")
_RcIpDvmrpTable_Object = MibTable
rcIpDvmrpTable = _RcIpDvmrpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2)
)
if mibBuilder.loadTexts:
    rcIpDvmrpTable.setStatus("current")
_RcIpDvmrpTableEntry_Object = MibTableRow
rcIpDvmrpTableEntry = _RcIpDvmrpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1)
)
rcIpDvmrpTableEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpDvmrpTableIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpDvmrpTableEntry.setStatus("current")
_RcIpDvmrpTableIfIndex_Type = InterfaceIndex
_RcIpDvmrpTableIfIndex_Object = MibTableColumn
rcIpDvmrpTableIfIndex = _RcIpDvmrpTableIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 1),
    _RcIpDvmrpTableIfIndex_Type()
)
rcIpDvmrpTableIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpDvmrpTableIfIndex.setStatus("current")
_RcIpDvmrpTableEnable_Type = TruthValue
_RcIpDvmrpTableEnable_Object = MibTableColumn
rcIpDvmrpTableEnable = _RcIpDvmrpTableEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 2),
    _RcIpDvmrpTableEnable_Type()
)
rcIpDvmrpTableEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableEnable.setStatus("current")


class _RcIpDvmrpTableMetric_Type(Integer32):
    """Custom type rcIpDvmrpTableMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_RcIpDvmrpTableMetric_Type.__name__ = "Integer32"
_RcIpDvmrpTableMetric_Object = MibTableColumn
rcIpDvmrpTableMetric = _RcIpDvmrpTableMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 3),
    _RcIpDvmrpTableMetric_Type()
)
rcIpDvmrpTableMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableMetric.setStatus("current")
_RcIpDvmrpTableAdvSelf_Type = TruthValue
_RcIpDvmrpTableAdvSelf_Object = MibTableColumn
rcIpDvmrpTableAdvSelf = _RcIpDvmrpTableAdvSelf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 4),
    _RcIpDvmrpTableAdvSelf_Type()
)
rcIpDvmrpTableAdvSelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableAdvSelf.setStatus("current")
_RcIpDvmrpTableLocalAddr_Type = IpAddress
_RcIpDvmrpTableLocalAddr_Object = MibTableColumn
rcIpDvmrpTableLocalAddr = _RcIpDvmrpTableLocalAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 5),
    _RcIpDvmrpTableLocalAddr_Type()
)
rcIpDvmrpTableLocalAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpDvmrpTableLocalAddr.setStatus("current")
_RcIpDvmrpTableInPolicyName_Type = DisplayString
_RcIpDvmrpTableInPolicyName_Object = MibTableColumn
rcIpDvmrpTableInPolicyName = _RcIpDvmrpTableInPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 6),
    _RcIpDvmrpTableInPolicyName_Type()
)
rcIpDvmrpTableInPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableInPolicyName.setStatus("current")
_RcIpDvmrpTableOutPolicyName_Type = DisplayString
_RcIpDvmrpTableOutPolicyName_Object = MibTableColumn
rcIpDvmrpTableOutPolicyName = _RcIpDvmrpTableOutPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 7),
    _RcIpDvmrpTableOutPolicyName_Type()
)
rcIpDvmrpTableOutPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableOutPolicyName.setStatus("current")
_RcIpDvmrpTableDefRtLis_Type = TruthValue
_RcIpDvmrpTableDefRtLis_Object = MibTableColumn
rcIpDvmrpTableDefRtLis = _RcIpDvmrpTableDefRtLis_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 8),
    _RcIpDvmrpTableDefRtLis_Type()
)
rcIpDvmrpTableDefRtLis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableDefRtLis.setStatus("current")
_RcIpDvmrpTableDefRtSup_Type = TruthValue
_RcIpDvmrpTableDefRtSup_Object = MibTableColumn
rcIpDvmrpTableDefRtSup = _RcIpDvmrpTableDefRtSup_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 9),
    _RcIpDvmrpTableDefRtSup_Type()
)
rcIpDvmrpTableDefRtSup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableDefRtSup.setStatus("current")
_RcIpDvmrpTableDefRtMet_Type = Integer32
_RcIpDvmrpTableDefRtMet_Object = MibTableColumn
rcIpDvmrpTableDefRtMet = _RcIpDvmrpTableDefRtMet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 10),
    _RcIpDvmrpTableDefRtMet_Type()
)
rcIpDvmrpTableDefRtMet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableDefRtMet.setStatus("current")


class _RcIpDvmrpTableInterfaceType_Type(Integer32):
    """Custom type rcIpDvmrpTableInterfaceType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_RcIpDvmrpTableInterfaceType_Type.__name__ = "Integer32"
_RcIpDvmrpTableInterfaceType_Object = MibTableColumn
rcIpDvmrpTableInterfaceType = _RcIpDvmrpTableInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 12, 2, 1, 11),
    _RcIpDvmrpTableInterfaceType_Type()
)
rcIpDvmrpTableInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpDvmrpTableInterfaceType.setStatus("current")
_RcIpUdp_ObjectIdentity = ObjectIdentity
rcIpUdp = _RcIpUdp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13)
)
_RcIpUdpProtocolTableSize_Type = Integer32
_RcIpUdpProtocolTableSize_Object = MibScalar
rcIpUdpProtocolTableSize = _RcIpUdpProtocolTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 1),
    _RcIpUdpProtocolTableSize_Type()
)
rcIpUdpProtocolTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpProtocolTableSize.setStatus("current")
_RcIpUdpProtocolTable_Object = MibTable
rcIpUdpProtocolTable = _RcIpUdpProtocolTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 2)
)
if mibBuilder.loadTexts:
    rcIpUdpProtocolTable.setStatus("current")
_RcIpUdpProtocolEntry_Object = MibTableRow
rcIpUdpProtocolEntry = _RcIpUdpProtocolEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 2, 1)
)
rcIpUdpProtocolEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpUdpProtocolPortNumber"),
)
if mibBuilder.loadTexts:
    rcIpUdpProtocolEntry.setStatus("current")


class _RcIpUdpProtocolPortNumber_Type(Integer32):
    """Custom type rcIpUdpProtocolPortNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpUdpProtocolPortNumber_Type.__name__ = "Integer32"
_RcIpUdpProtocolPortNumber_Object = MibTableColumn
rcIpUdpProtocolPortNumber = _RcIpUdpProtocolPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 2, 1, 1),
    _RcIpUdpProtocolPortNumber_Type()
)
rcIpUdpProtocolPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpProtocolPortNumber.setStatus("current")


class _RcIpUdpProtocolName_Type(DisplayString):
    """Custom type rcIpUdpProtocolName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_RcIpUdpProtocolName_Type.__name__ = "DisplayString"
_RcIpUdpProtocolName_Object = MibTableColumn
rcIpUdpProtocolName = _RcIpUdpProtocolName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 2, 1, 2),
    _RcIpUdpProtocolName_Type()
)
rcIpUdpProtocolName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpProtocolName.setStatus("current")
_RcIpUdpProtocolRowStatus_Type = RowStatus
_RcIpUdpProtocolRowStatus_Object = MibTableColumn
rcIpUdpProtocolRowStatus = _RcIpUdpProtocolRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 2, 1, 3),
    _RcIpUdpProtocolRowStatus_Type()
)
rcIpUdpProtocolRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpProtocolRowStatus.setStatus("current")
_RcIpUdpPortFwdTableSize_Type = Integer32
_RcIpUdpPortFwdTableSize_Object = MibScalar
rcIpUdpPortFwdTableSize = _RcIpUdpPortFwdTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 3),
    _RcIpUdpPortFwdTableSize_Type()
)
rcIpUdpPortFwdTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdTableSize.setStatus("current")
_RcIpUdpPortFwdTable_Object = MibTable
rcIpUdpPortFwdTable = _RcIpUdpPortFwdTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4)
)
if mibBuilder.loadTexts:
    rcIpUdpPortFwdTable.setStatus("current")
_RcIpUdpPortFwdEntry_Object = MibTableRow
rcIpUdpPortFwdEntry = _RcIpUdpPortFwdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1)
)
rcIpUdpPortFwdEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpUdpPortFwdDestPort"),
    (0, "RAPID-CITY", "rcIpUdpPortFwdDestAddr"),
)
if mibBuilder.loadTexts:
    rcIpUdpPortFwdEntry.setStatus("current")


class _RcIpUdpPortFwdDestPort_Type(Integer32):
    """Custom type rcIpUdpPortFwdDestPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpUdpPortFwdDestPort_Type.__name__ = "Integer32"
_RcIpUdpPortFwdDestPort_Object = MibTableColumn
rcIpUdpPortFwdDestPort = _RcIpUdpPortFwdDestPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 1),
    _RcIpUdpPortFwdDestPort_Type()
)
rcIpUdpPortFwdDestPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdDestPort.setStatus("current")
_RcIpUdpPortFwdDestAddr_Type = IpAddress
_RcIpUdpPortFwdDestAddr_Object = MibTableColumn
rcIpUdpPortFwdDestAddr = _RcIpUdpPortFwdDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 2),
    _RcIpUdpPortFwdDestAddr_Type()
)
rcIpUdpPortFwdDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdDestAddr.setStatus("current")
_RcIpUdpPortFwdId_Type = Integer32
_RcIpUdpPortFwdId_Object = MibTableColumn
rcIpUdpPortFwdId = _RcIpUdpPortFwdId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 3),
    _RcIpUdpPortFwdId_Type()
)
rcIpUdpPortFwdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdId.setStatus("current")


class _RcIpUdpPortFwdFwdListIdListSize_Type(Integer32):
    """Custom type rcIpUdpPortFwdFwdListIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpUdpPortFwdFwdListIdListSize_Type.__name__ = "Integer32"
_RcIpUdpPortFwdFwdListIdListSize_Object = MibTableColumn
rcIpUdpPortFwdFwdListIdListSize = _RcIpUdpPortFwdFwdListIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 4),
    _RcIpUdpPortFwdFwdListIdListSize_Type()
)
rcIpUdpPortFwdFwdListIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdFwdListIdListSize.setStatus("current")


class _RcIpUdpPortFwdFwdListIdList_Type(IdList):
    """Custom type rcIpUdpPortFwdFwdListIdList based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(64, 64),
    )


_RcIpUdpPortFwdFwdListIdList_Type.__name__ = "IdList"
_RcIpUdpPortFwdFwdListIdList_Object = MibTableColumn
rcIpUdpPortFwdFwdListIdList = _RcIpUdpPortFwdFwdListIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 5),
    _RcIpUdpPortFwdFwdListIdList_Type()
)
rcIpUdpPortFwdFwdListIdList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdFwdListIdList.setStatus("current")
_RcIpUdpPortFwdNumFwdPackets_Type = Counter32
_RcIpUdpPortFwdNumFwdPackets_Object = MibTableColumn
rcIpUdpPortFwdNumFwdPackets = _RcIpUdpPortFwdNumFwdPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 6),
    _RcIpUdpPortFwdNumFwdPackets_Type()
)
rcIpUdpPortFwdNumFwdPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdNumFwdPackets.setStatus("current")
_RcIpUdpPortFwdNumDropPacketsTtlExpired_Type = Counter32
_RcIpUdpPortFwdNumDropPacketsTtlExpired_Object = MibTableColumn
rcIpUdpPortFwdNumDropPacketsTtlExpired = _RcIpUdpPortFwdNumDropPacketsTtlExpired_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 7),
    _RcIpUdpPortFwdNumDropPacketsTtlExpired_Type()
)
rcIpUdpPortFwdNumDropPacketsTtlExpired.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdNumDropPacketsTtlExpired.setStatus("current")
_RcIpUdpPortFwdNumDropPacketsDestUnreach_Type = Counter32
_RcIpUdpPortFwdNumDropPacketsDestUnreach_Object = MibTableColumn
rcIpUdpPortFwdNumDropPacketsDestUnreach = _RcIpUdpPortFwdNumDropPacketsDestUnreach_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 8),
    _RcIpUdpPortFwdNumDropPacketsDestUnreach_Type()
)
rcIpUdpPortFwdNumDropPacketsDestUnreach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdNumDropPacketsDestUnreach.setStatus("current")
_RcIpUdpPortFwdRowStatus_Type = RowStatus
_RcIpUdpPortFwdRowStatus_Object = MibTableColumn
rcIpUdpPortFwdRowStatus = _RcIpUdpPortFwdRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 4, 1, 9),
    _RcIpUdpPortFwdRowStatus_Type()
)
rcIpUdpPortFwdRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdRowStatus.setStatus("current")
_RcIpUdpPortFwdListTableSize_Type = Integer32
_RcIpUdpPortFwdListTableSize_Object = MibScalar
rcIpUdpPortFwdListTableSize = _RcIpUdpPortFwdListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 5),
    _RcIpUdpPortFwdListTableSize_Type()
)
rcIpUdpPortFwdListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdListTableSize.setStatus("current")
_RcIpUdpPortFwdListTable_Object = MibTable
rcIpUdpPortFwdListTable = _RcIpUdpPortFwdListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 6)
)
if mibBuilder.loadTexts:
    rcIpUdpPortFwdListTable.setStatus("current")
_RcIpUdpPortFwdListEntry_Object = MibTableRow
rcIpUdpPortFwdListEntry = _RcIpUdpPortFwdListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 6, 1)
)
rcIpUdpPortFwdListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpUdpPortFwdListId"),
)
if mibBuilder.loadTexts:
    rcIpUdpPortFwdListEntry.setStatus("current")


class _RcIpUdpPortFwdListId_Type(Integer32):
    """Custom type rcIpUdpPortFwdListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcIpUdpPortFwdListId_Type.__name__ = "Integer32"
_RcIpUdpPortFwdListId_Object = MibTableColumn
rcIpUdpPortFwdListId = _RcIpUdpPortFwdListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 6, 1, 1),
    _RcIpUdpPortFwdListId_Type()
)
rcIpUdpPortFwdListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdListId.setStatus("current")


class _RcIpUdpPortFwdListName_Type(DisplayString):
    """Custom type rcIpUdpPortFwdListName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpUdpPortFwdListName_Type.__name__ = "DisplayString"
_RcIpUdpPortFwdListName_Object = MibTableColumn
rcIpUdpPortFwdListName = _RcIpUdpPortFwdListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 6, 1, 3),
    _RcIpUdpPortFwdListName_Type()
)
rcIpUdpPortFwdListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdListName.setStatus("current")


class _RcIpUdpPortFwdListFwdIdListSize_Type(Integer32):
    """Custom type rcIpUdpPortFwdListFwdIdListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RcIpUdpPortFwdListFwdIdListSize_Type.__name__ = "Integer32"
_RcIpUdpPortFwdListFwdIdListSize_Object = MibTableColumn
rcIpUdpPortFwdListFwdIdListSize = _RcIpUdpPortFwdListFwdIdListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 6, 1, 4),
    _RcIpUdpPortFwdListFwdIdListSize_Type()
)
rcIpUdpPortFwdListFwdIdListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdListFwdIdListSize.setStatus("current")


class _RcIpUdpPortFwdListFwdIdList_Type(OctetString):
    """Custom type rcIpUdpPortFwdListFwdIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(128, 128),
    )


_RcIpUdpPortFwdListFwdIdList_Type.__name__ = "OctetString"
_RcIpUdpPortFwdListFwdIdList_Object = MibTableColumn
rcIpUdpPortFwdListFwdIdList = _RcIpUdpPortFwdListFwdIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 6, 1, 5),
    _RcIpUdpPortFwdListFwdIdList_Type()
)
rcIpUdpPortFwdListFwdIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdListFwdIdList.setStatus("current")
_RcIpUdpPortFwdListRowStatus_Type = RowStatus
_RcIpUdpPortFwdListRowStatus_Object = MibTableColumn
rcIpUdpPortFwdListRowStatus = _RcIpUdpPortFwdListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 6, 1, 6),
    _RcIpUdpPortFwdListRowStatus_Type()
)
rcIpUdpPortFwdListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpPortFwdListRowStatus.setStatus("current")
_RcIpUdpConfBroadcastIntfTableSize_Type = Integer32
_RcIpUdpConfBroadcastIntfTableSize_Object = MibScalar
rcIpUdpConfBroadcastIntfTableSize = _RcIpUdpConfBroadcastIntfTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 7),
    _RcIpUdpConfBroadcastIntfTableSize_Type()
)
rcIpUdpConfBroadcastIntfTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfTableSize.setStatus("current")
_RcIpUdpConfBroadcastIntfTable_Object = MibTable
rcIpUdpConfBroadcastIntfTable = _RcIpUdpConfBroadcastIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8)
)
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfTable.setStatus("current")
_RcIpUdpConfBroadcastIntfEntry_Object = MibTableRow
rcIpUdpConfBroadcastIntfEntry = _RcIpUdpConfBroadcastIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1)
)
rcIpUdpConfBroadcastIntfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpUdpConfBroadcastIntfLocalIfAddr"),
)
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfEntry.setStatus("current")
_RcIpUdpConfBroadcastIntfLocalIfAddr_Type = IpAddress
_RcIpUdpConfBroadcastIntfLocalIfAddr_Object = MibTableColumn
rcIpUdpConfBroadcastIntfLocalIfAddr = _RcIpUdpConfBroadcastIntfLocalIfAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 1),
    _RcIpUdpConfBroadcastIntfLocalIfAddr_Type()
)
rcIpUdpConfBroadcastIntfLocalIfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfLocalIfAddr.setStatus("current")


class _RcIpUdpConfBroadcastIntfUdpPortFwdListId_Type(Integer32):
    """Custom type rcIpUdpConfBroadcastIntfUdpPortFwdListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcIpUdpConfBroadcastIntfUdpPortFwdListId_Type.__name__ = "Integer32"
_RcIpUdpConfBroadcastIntfUdpPortFwdListId_Object = MibTableColumn
rcIpUdpConfBroadcastIntfUdpPortFwdListId = _RcIpUdpConfBroadcastIntfUdpPortFwdListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 2),
    _RcIpUdpConfBroadcastIntfUdpPortFwdListId_Type()
)
rcIpUdpConfBroadcastIntfUdpPortFwdListId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfUdpPortFwdListId.setStatus("current")


class _RcIpUdpConfBroadcastIntfMaxTtl_Type(Integer32):
    """Custom type rcIpUdpConfBroadcastIntfMaxTtl based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RcIpUdpConfBroadcastIntfMaxTtl_Type.__name__ = "Integer32"
_RcIpUdpConfBroadcastIntfMaxTtl_Object = MibTableColumn
rcIpUdpConfBroadcastIntfMaxTtl = _RcIpUdpConfBroadcastIntfMaxTtl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 3),
    _RcIpUdpConfBroadcastIntfMaxTtl_Type()
)
rcIpUdpConfBroadcastIntfMaxTtl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfMaxTtl.setStatus("current")
_RcIpUdpConfBroadcastIntfNumRxPkts_Type = Counter32
_RcIpUdpConfBroadcastIntfNumRxPkts_Object = MibTableColumn
rcIpUdpConfBroadcastIntfNumRxPkts = _RcIpUdpConfBroadcastIntfNumRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 4),
    _RcIpUdpConfBroadcastIntfNumRxPkts_Type()
)
rcIpUdpConfBroadcastIntfNumRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfNumRxPkts.setStatus("current")
_RcIpUdpConfBroadcastIntfNumFwdPkts_Type = Counter32
_RcIpUdpConfBroadcastIntfNumFwdPkts_Object = MibTableColumn
rcIpUdpConfBroadcastIntfNumFwdPkts = _RcIpUdpConfBroadcastIntfNumFwdPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 5),
    _RcIpUdpConfBroadcastIntfNumFwdPkts_Type()
)
rcIpUdpConfBroadcastIntfNumFwdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfNumFwdPkts.setStatus("current")
_RcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired_Type = Counter32
_RcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired_Object = MibTableColumn
rcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired = _RcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 6),
    _RcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired_Type()
)
rcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired.setStatus("current")
_RcIpUdpConfBroadcastIntfNumDropPktsDestUnreach_Type = Counter32
_RcIpUdpConfBroadcastIntfNumDropPktsDestUnreach_Object = MibTableColumn
rcIpUdpConfBroadcastIntfNumDropPktsDestUnreach = _RcIpUdpConfBroadcastIntfNumDropPktsDestUnreach_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 7),
    _RcIpUdpConfBroadcastIntfNumDropPktsDestUnreach_Type()
)
rcIpUdpConfBroadcastIntfNumDropPktsDestUnreach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfNumDropPktsDestUnreach.setStatus("current")
_RcIpUdpConfBroadcastIntfNumDropPktsUnknownPort_Type = Counter32
_RcIpUdpConfBroadcastIntfNumDropPktsUnknownPort_Object = MibTableColumn
rcIpUdpConfBroadcastIntfNumDropPktsUnknownPort = _RcIpUdpConfBroadcastIntfNumDropPktsUnknownPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 8),
    _RcIpUdpConfBroadcastIntfNumDropPktsUnknownPort_Type()
)
rcIpUdpConfBroadcastIntfNumDropPktsUnknownPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfNumDropPktsUnknownPort.setStatus("current")
_RcIpUdpConfBroadcastIntfRowStatus_Type = RowStatus
_RcIpUdpConfBroadcastIntfRowStatus_Object = MibTableColumn
rcIpUdpConfBroadcastIntfRowStatus = _RcIpUdpConfBroadcastIntfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 9),
    _RcIpUdpConfBroadcastIntfRowStatus_Type()
)
rcIpUdpConfBroadcastIntfRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfRowStatus.setStatus("current")
_RcIpUdpConfBroadcastIntfBroadCastMask_Type = IpAddress
_RcIpUdpConfBroadcastIntfBroadCastMask_Object = MibTableColumn
rcIpUdpConfBroadcastIntfBroadCastMask = _RcIpUdpConfBroadcastIntfBroadCastMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 13, 8, 1, 10),
    _RcIpUdpConfBroadcastIntfBroadCastMask_Type()
)
rcIpUdpConfBroadcastIntfBroadCastMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpUdpConfBroadcastIntfBroadCastMask.setStatus("current")
_RcIpTosRule_ObjectIdentity = ObjectIdentity
rcIpTosRule = _RcIpTosRule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 14)
)


class _RcIpTosRuleAndMask_Type(Integer32):
    """Custom type rcIpTosRuleAndMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpTosRuleAndMask_Type.__name__ = "Integer32"
_RcIpTosRuleAndMask_Object = MibScalar
rcIpTosRuleAndMask = _RcIpTosRuleAndMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 14, 1),
    _RcIpTosRuleAndMask_Type()
)
rcIpTosRuleAndMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpTosRuleAndMask.setStatus("deprecated")


class _RcIpTosRuleOrRule1_Type(Integer32):
    """Custom type rcIpTosRuleOrRule1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpTosRuleOrRule1_Type.__name__ = "Integer32"
_RcIpTosRuleOrRule1_Object = MibScalar
rcIpTosRuleOrRule1 = _RcIpTosRuleOrRule1_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 14, 2),
    _RcIpTosRuleOrRule1_Type()
)
rcIpTosRuleOrRule1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpTosRuleOrRule1.setStatus("deprecated")


class _RcIpTosRuleOrRule2_Type(Integer32):
    """Custom type rcIpTosRuleOrRule2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpTosRuleOrRule2_Type.__name__ = "Integer32"
_RcIpTosRuleOrRule2_Object = MibScalar
rcIpTosRuleOrRule2 = _RcIpTosRuleOrRule2_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 14, 3),
    _RcIpTosRuleOrRule2_Type()
)
rcIpTosRuleOrRule2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpTosRuleOrRule2.setStatus("deprecated")


class _RcIpTosRuleOrRule3_Type(Integer32):
    """Custom type rcIpTosRuleOrRule3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpTosRuleOrRule3_Type.__name__ = "Integer32"
_RcIpTosRuleOrRule3_Object = MibScalar
rcIpTosRuleOrRule3 = _RcIpTosRuleOrRule3_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 14, 4),
    _RcIpTosRuleOrRule3_Type()
)
rcIpTosRuleOrRule3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpTosRuleOrRule3.setStatus("deprecated")
_RcIpTosRuleTosPriorityEnable_Type = TruthValue
_RcIpTosRuleTosPriorityEnable_Object = MibScalar
rcIpTosRuleTosPriorityEnable = _RcIpTosRuleTosPriorityEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 14, 5),
    _RcIpTosRuleTosPriorityEnable_Type()
)
rcIpTosRuleTosPriorityEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpTosRuleTosPriorityEnable.setStatus("deprecated")


class _RcIpTosRuleTosThreshold_Type(Integer32):
    """Custom type rcIpTosRuleTosThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("level0", 0),
          ("level1", 1),
          ("level2", 2),
          ("level3", 3),
          ("level4", 4),
          ("level5", 5),
          ("level6", 6),
          ("level7", 7))
    )


_RcIpTosRuleTosThreshold_Type.__name__ = "Integer32"
_RcIpTosRuleTosThreshold_Object = MibScalar
rcIpTosRuleTosThreshold = _RcIpTosRuleTosThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 14, 6),
    _RcIpTosRuleTosThreshold_Type()
)
rcIpTosRuleTosThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpTosRuleTosThreshold.setStatus("deprecated")
_RcIpStaticRoute_ObjectIdentity = ObjectIdentity
rcIpStaticRoute = _RcIpStaticRoute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15)
)
_RcIpStaticRouteTableSize_Type = Integer32
_RcIpStaticRouteTableSize_Object = MibScalar
rcIpStaticRouteTableSize = _RcIpStaticRouteTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 1),
    _RcIpStaticRouteTableSize_Type()
)
rcIpStaticRouteTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpStaticRouteTableSize.setStatus("current")
_RcIpStaticRouteTable_Object = MibTable
rcIpStaticRouteTable = _RcIpStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2)
)
if mibBuilder.loadTexts:
    rcIpStaticRouteTable.setStatus("current")
_RcIpStaticRouteEntry_Object = MibTableRow
rcIpStaticRouteEntry = _RcIpStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1)
)
rcIpStaticRouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpStaticRouteDest"),
    (0, "RAPID-CITY", "rcIpStaticRouteMask"),
    (0, "RAPID-CITY", "rcIpStaticRouteNextHop"),
)
if mibBuilder.loadTexts:
    rcIpStaticRouteEntry.setStatus("current")
_RcIpStaticRouteDest_Type = IpAddress
_RcIpStaticRouteDest_Object = MibTableColumn
rcIpStaticRouteDest = _RcIpStaticRouteDest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 1),
    _RcIpStaticRouteDest_Type()
)
rcIpStaticRouteDest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpStaticRouteDest.setStatus("current")
_RcIpStaticRouteMask_Type = IpAddress
_RcIpStaticRouteMask_Object = MibTableColumn
rcIpStaticRouteMask = _RcIpStaticRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 2),
    _RcIpStaticRouteMask_Type()
)
rcIpStaticRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpStaticRouteMask.setStatus("current")
_RcIpStaticRouteNextHop_Type = IpAddress
_RcIpStaticRouteNextHop_Object = MibTableColumn
rcIpStaticRouteNextHop = _RcIpStaticRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 3),
    _RcIpStaticRouteNextHop_Type()
)
rcIpStaticRouteNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpStaticRouteNextHop.setStatus("current")


class _RcIpStaticRouteMetric_Type(Integer32):
    """Custom type rcIpStaticRouteMetric based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpStaticRouteMetric_Type.__name__ = "Integer32"
_RcIpStaticRouteMetric_Object = MibTableColumn
rcIpStaticRouteMetric = _RcIpStaticRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 4),
    _RcIpStaticRouteMetric_Type()
)
rcIpStaticRouteMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpStaticRouteMetric.setStatus("current")


class _RcIpStaticRouteIfIndex_Type(InterfaceIndex):
    """Custom type rcIpStaticRouteIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpStaticRouteIfIndex_Type.__name__ = "InterfaceIndex"
_RcIpStaticRouteIfIndex_Object = MibTableColumn
rcIpStaticRouteIfIndex = _RcIpStaticRouteIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 5),
    _RcIpStaticRouteIfIndex_Type()
)
rcIpStaticRouteIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpStaticRouteIfIndex.setStatus("current")


class _RcIpStaticRoutePreference_Type(Integer32):
    """Custom type rcIpStaticRoutePreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpStaticRoutePreference_Type.__name__ = "Integer32"
_RcIpStaticRoutePreference_Object = MibTableColumn
rcIpStaticRoutePreference = _RcIpStaticRoutePreference_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 6),
    _RcIpStaticRoutePreference_Type()
)
rcIpStaticRoutePreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpStaticRoutePreference.setStatus("current")


class _RcIpStaticRouteEnable_Type(TruthValue):
    """Custom type rcIpStaticRouteEnable based on TruthValue"""


_RcIpStaticRouteEnable_Object = MibTableColumn
rcIpStaticRouteEnable = _RcIpStaticRouteEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 7),
    _RcIpStaticRouteEnable_Type()
)
rcIpStaticRouteEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpStaticRouteEnable.setStatus("current")


class _RcIpStaticRouteStatus_Type(Integer32):
    """Custom type rcIpStaticRouteStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 0))
    )


_RcIpStaticRouteStatus_Type.__name__ = "Integer32"
_RcIpStaticRouteStatus_Object = MibTableColumn
rcIpStaticRouteStatus = _RcIpStaticRouteStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 8),
    _RcIpStaticRouteStatus_Type()
)
rcIpStaticRouteStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpStaticRouteStatus.setStatus("current")
_RcIpStaticRouteRowStatus_Type = RowStatus
_RcIpStaticRouteRowStatus_Object = MibTableColumn
rcIpStaticRouteRowStatus = _RcIpStaticRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 9),
    _RcIpStaticRouteRowStatus_Type()
)
rcIpStaticRouteRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpStaticRouteRowStatus.setStatus("current")


class _RcIpStaticRouteLocalNextHop_Type(TruthValue):
    """Custom type rcIpStaticRouteLocalNextHop based on TruthValue"""


_RcIpStaticRouteLocalNextHop_Object = MibTableColumn
rcIpStaticRouteLocalNextHop = _RcIpStaticRouteLocalNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 2, 1, 10),
    _RcIpStaticRouteLocalNextHop_Type()
)
rcIpStaticRouteLocalNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpStaticRouteLocalNextHop.setStatus("current")


class _RcIpStaticRouteBfdTableSize_Type(Integer32):
    """Custom type rcIpStaticRouteBfdTableSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_RcIpStaticRouteBfdTableSize_Type.__name__ = "Integer32"
_RcIpStaticRouteBfdTableSize_Object = MibScalar
rcIpStaticRouteBfdTableSize = _RcIpStaticRouteBfdTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 3),
    _RcIpStaticRouteBfdTableSize_Type()
)
rcIpStaticRouteBfdTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpStaticRouteBfdTableSize.setStatus("current")
_RcIpStaticRouteBfdTable_Object = MibTable
rcIpStaticRouteBfdTable = _RcIpStaticRouteBfdTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 4)
)
if mibBuilder.loadTexts:
    rcIpStaticRouteBfdTable.setStatus("current")
_RcIpStaticRouteBfdEntry_Object = MibTableRow
rcIpStaticRouteBfdEntry = _RcIpStaticRouteBfdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 4, 1)
)
rcIpStaticRouteBfdEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpStaticRouteBfdNextHop"),
)
if mibBuilder.loadTexts:
    rcIpStaticRouteBfdEntry.setStatus("current")
_RcIpStaticRouteBfdNextHop_Type = IpAddress
_RcIpStaticRouteBfdNextHop_Object = MibTableColumn
rcIpStaticRouteBfdNextHop = _RcIpStaticRouteBfdNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 4, 1, 1),
    _RcIpStaticRouteBfdNextHop_Type()
)
rcIpStaticRouteBfdNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpStaticRouteBfdNextHop.setStatus("current")
_RcIpStaticRouteBfdRowStatus_Type = RowStatus
_RcIpStaticRouteBfdRowStatus_Object = MibTableColumn
rcIpStaticRouteBfdRowStatus = _RcIpStaticRouteBfdRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 15, 4, 1, 2),
    _RcIpStaticRouteBfdRowStatus_Type()
)
rcIpStaticRouteBfdRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpStaticRouteBfdRowStatus.setStatus("current")
_RcIpPim_ObjectIdentity = ObjectIdentity
rcIpPim = _RcIpPim_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16)
)
_RcIpPimGlobal_ObjectIdentity = ObjectIdentity
rcIpPimGlobal = _RcIpPimGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1)
)
_RcIpPimGlobalEnable_Type = TruthValue
_RcIpPimGlobalEnable_Object = MibScalar
rcIpPimGlobalEnable = _RcIpPimGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 1),
    _RcIpPimGlobalEnable_Type()
)
rcIpPimGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalEnable.setStatus("current")


class _RcIpPimGlobalMode_Type(Integer32):
    """Custom type rcIpPimGlobalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dm", 1),
          ("sm", 2),
          ("smdm", 3),
          ("ssm", 4))
    )


_RcIpPimGlobalMode_Type.__name__ = "Integer32"
_RcIpPimGlobalMode_Object = MibScalar
rcIpPimGlobalMode = _RcIpPimGlobalMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 2),
    _RcIpPimGlobalMode_Type()
)
rcIpPimGlobalMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalMode.setStatus("current")
_RcIpPimGlobalMbr_Type = TruthValue
_RcIpPimGlobalMbr_Object = MibScalar
rcIpPimGlobalMbr = _RcIpPimGlobalMbr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 3),
    _RcIpPimGlobalMbr_Type()
)
rcIpPimGlobalMbr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalMbr.setStatus("current")


class _RcIpPimGlobalRegisterSuppTimer_Type(Integer32):
    """Custom type rcIpPimGlobalRegisterSuppTimer based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 65535),
    )


_RcIpPimGlobalRegisterSuppTimer_Type.__name__ = "Integer32"
_RcIpPimGlobalRegisterSuppTimer_Object = MibScalar
rcIpPimGlobalRegisterSuppTimer = _RcIpPimGlobalRegisterSuppTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 4),
    _RcIpPimGlobalRegisterSuppTimer_Type()
)
rcIpPimGlobalRegisterSuppTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalRegisterSuppTimer.setStatus("current")
_RcIpPimGlobalInterfaceTableSize_Type = Integer32
_RcIpPimGlobalInterfaceTableSize_Object = MibScalar
rcIpPimGlobalInterfaceTableSize = _RcIpPimGlobalInterfaceTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 5),
    _RcIpPimGlobalInterfaceTableSize_Type()
)
rcIpPimGlobalInterfaceTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimGlobalInterfaceTableSize.setStatus("current")


class _RcIpPimGlobalUniRouteChgTimeOut_Type(Integer32):
    """Custom type rcIpPimGlobalUniRouteChgTimeOut based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 65535),
    )


_RcIpPimGlobalUniRouteChgTimeOut_Type.__name__ = "Integer32"
_RcIpPimGlobalUniRouteChgTimeOut_Object = MibScalar
rcIpPimGlobalUniRouteChgTimeOut = _RcIpPimGlobalUniRouteChgTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 6),
    _RcIpPimGlobalUniRouteChgTimeOut_Type()
)
rcIpPimGlobalUniRouteChgTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalUniRouteChgTimeOut.setStatus("current")


class _RcIpPimGlobalDiscardDataTimeOut_Type(Integer32):
    """Custom type rcIpPimGlobalDiscardDataTimeOut based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 65535),
    )


_RcIpPimGlobalDiscardDataTimeOut_Type.__name__ = "Integer32"
_RcIpPimGlobalDiscardDataTimeOut_Object = MibScalar
rcIpPimGlobalDiscardDataTimeOut = _RcIpPimGlobalDiscardDataTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 7),
    _RcIpPimGlobalDiscardDataTimeOut_Type()
)
rcIpPimGlobalDiscardDataTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalDiscardDataTimeOut.setStatus("current")


class _RcIpPimGlobalCRPADVTimeOut_Type(Integer32):
    """Custom type rcIpPimGlobalCRPADVTimeOut based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 26214),
    )


_RcIpPimGlobalCRPADVTimeOut_Type.__name__ = "Integer32"
_RcIpPimGlobalCRPADVTimeOut_Object = MibScalar
rcIpPimGlobalCRPADVTimeOut = _RcIpPimGlobalCRPADVTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 8),
    _RcIpPimGlobalCRPADVTimeOut_Type()
)
rcIpPimGlobalCRPADVTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalCRPADVTimeOut.setStatus("current")


class _RcIpPimGlobalBootStrapPeriod_Type(Integer32):
    """Custom type rcIpPimGlobalBootStrapPeriod based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 32757),
    )


_RcIpPimGlobalBootStrapPeriod_Type.__name__ = "Integer32"
_RcIpPimGlobalBootStrapPeriod_Object = MibScalar
rcIpPimGlobalBootStrapPeriod = _RcIpPimGlobalBootStrapPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 9),
    _RcIpPimGlobalBootStrapPeriod_Type()
)
rcIpPimGlobalBootStrapPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalBootStrapPeriod.setStatus("current")


class _RcIpPimGlobalStaticRP_Type(TruthValue):
    """Custom type rcIpPimGlobalStaticRP based on TruthValue"""


_RcIpPimGlobalStaticRP_Object = MibScalar
rcIpPimGlobalStaticRP = _RcIpPimGlobalStaticRP_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 10),
    _RcIpPimGlobalStaticRP_Type()
)
rcIpPimGlobalStaticRP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalStaticRP.setStatus("current")


class _RcIpPimGlobalActivityChkInterval_Type(Integer32):
    """Custom type rcIpPimGlobalActivityChkInterval based on Integer32"""
    defaultValue = 210

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(15,
              30,
              210)
        )
    )
    namedValues = NamedValues(
        *(("intv15", 15),
          ("intv210", 210),
          ("intv30", 30))
    )


_RcIpPimGlobalActivityChkInterval_Type.__name__ = "Integer32"
_RcIpPimGlobalActivityChkInterval_Object = MibScalar
rcIpPimGlobalActivityChkInterval = _RcIpPimGlobalActivityChkInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 11),
    _RcIpPimGlobalActivityChkInterval_Type()
)
rcIpPimGlobalActivityChkInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalActivityChkInterval.setStatus("current")


class _RcIpPimGlobalFwdCacheTimeOut_Type(Integer32):
    """Custom type rcIpPimGlobalFwdCacheTimeOut based on Integer32"""
    defaultValue = 210

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 86400),
    )


_RcIpPimGlobalFwdCacheTimeOut_Type.__name__ = "Integer32"
_RcIpPimGlobalFwdCacheTimeOut_Object = MibScalar
rcIpPimGlobalFwdCacheTimeOut = _RcIpPimGlobalFwdCacheTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 12),
    _RcIpPimGlobalFwdCacheTimeOut_Type()
)
rcIpPimGlobalFwdCacheTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalFwdCacheTimeOut.setStatus("current")


class _RcIpPimGlobalFastJoinPrune_Type(EnableValue):
    """Custom type rcIpPimGlobalFastJoinPrune based on EnableValue"""


_RcIpPimGlobalFastJoinPrune_Object = MibScalar
rcIpPimGlobalFastJoinPrune = _RcIpPimGlobalFastJoinPrune_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 13),
    _RcIpPimGlobalFastJoinPrune_Type()
)
rcIpPimGlobalFastJoinPrune.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalFastJoinPrune.setStatus("current")


class _RcIpPimGlobalStaticRPSpecificRt_Type(TruthValue):
    """Custom type rcIpPimGlobalStaticRPSpecificRt based on TruthValue"""


_RcIpPimGlobalStaticRPSpecificRt_Object = MibScalar
rcIpPimGlobalStaticRPSpecificRt = _RcIpPimGlobalStaticRPSpecificRt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 1, 14),
    _RcIpPimGlobalStaticRPSpecificRt_Type()
)
rcIpPimGlobalStaticRPSpecificRt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimGlobalStaticRPSpecificRt.setStatus("current")
_RcIpPimTable_Object = MibTable
rcIpPimTable = _RcIpPimTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2)
)
if mibBuilder.loadTexts:
    rcIpPimTable.setStatus("current")
_RcIpPimEntry_Object = MibTableRow
rcIpPimEntry = _RcIpPimEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2, 1)
)
rcIpPimEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPimIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpPimEntry.setStatus("current")
_RcIpPimIfIndex_Type = InterfaceIndex
_RcIpPimIfIndex_Object = MibTableColumn
rcIpPimIfIndex = _RcIpPimIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2, 1, 1),
    _RcIpPimIfIndex_Type()
)
rcIpPimIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimIfIndex.setStatus("current")
_RcIpPimEnable_Type = TruthValue
_RcIpPimEnable_Object = MibTableColumn
rcIpPimEnable = _RcIpPimEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2, 1, 2),
    _RcIpPimEnable_Type()
)
rcIpPimEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimEnable.setStatus("current")


class _RcIpPimMode_Type(Integer32):
    """Custom type rcIpPimMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dense", 1),
          ("sparse", 2),
          ("sparseDense", 3),
          ("ssm", 4))
    )


_RcIpPimMode_Type.__name__ = "Integer32"
_RcIpPimMode_Object = MibTableColumn
rcIpPimMode = _RcIpPimMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2, 1, 3),
    _RcIpPimMode_Type()
)
rcIpPimMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimMode.setStatus("current")


class _RcIpPimHelloInterval_Type(Integer32):
    """Custom type rcIpPimHelloInterval based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 18724),
    )


_RcIpPimHelloInterval_Type.__name__ = "Integer32"
_RcIpPimHelloInterval_Object = MibTableColumn
rcIpPimHelloInterval = _RcIpPimHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2, 1, 4),
    _RcIpPimHelloInterval_Type()
)
rcIpPimHelloInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimHelloInterval.setStatus("current")


class _RcIpPimJoinPruneInterval_Type(Integer32):
    """Custom type rcIpPimJoinPruneInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 18724),
    )


_RcIpPimJoinPruneInterval_Type.__name__ = "Integer32"
_RcIpPimJoinPruneInterval_Object = MibTableColumn
rcIpPimJoinPruneInterval = _RcIpPimJoinPruneInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2, 1, 5),
    _RcIpPimJoinPruneInterval_Type()
)
rcIpPimJoinPruneInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimJoinPruneInterval.setStatus("current")


class _RcIpPimCBSRPreference_Type(Integer32):
    """Custom type rcIpPimCBSRPreference based on Integer32"""
    defaultValue = -1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 255),
    )


_RcIpPimCBSRPreference_Type.__name__ = "Integer32"
_RcIpPimCBSRPreference_Object = MibTableColumn
rcIpPimCBSRPreference = _RcIpPimCBSRPreference_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2, 1, 6),
    _RcIpPimCBSRPreference_Type()
)
rcIpPimCBSRPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimCBSRPreference.setStatus("current")


class _RcIpPimIntfType_Type(Integer32):
    """Custom type rcIpPimIntfType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_RcIpPimIntfType_Type.__name__ = "Integer32"
_RcIpPimIntfType_Object = MibTableColumn
rcIpPimIntfType = _RcIpPimIntfType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 2, 1, 7),
    _RcIpPimIntfType_Type()
)
rcIpPimIntfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimIntfType.setStatus("current")
_RcIpPimInterfaceTable_Object = MibTable
rcIpPimInterfaceTable = _RcIpPimInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 3)
)
if mibBuilder.loadTexts:
    rcIpPimInterfaceTable.setStatus("current")
_RcIpPimInterfaceEntry_Object = MibTableRow
rcIpPimInterfaceEntry = _RcIpPimInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 3, 1)
)
rcIpPimInterfaceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPimInterfaceIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpPimInterfaceEntry.setStatus("current")
_RcIpPimInterfaceIfIndex_Type = InterfaceIndex
_RcIpPimInterfaceIfIndex_Object = MibTableColumn
rcIpPimInterfaceIfIndex = _RcIpPimInterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 3, 1, 1),
    _RcIpPimInterfaceIfIndex_Type()
)
rcIpPimInterfaceIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimInterfaceIfIndex.setStatus("current")


class _RcIpPimInterfaceOperState_Type(Integer32):
    """Custom type rcIpPimInterfaceOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcIpPimInterfaceOperState_Type.__name__ = "Integer32"
_RcIpPimInterfaceOperState_Object = MibTableColumn
rcIpPimInterfaceOperState = _RcIpPimInterfaceOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 3, 1, 2),
    _RcIpPimInterfaceOperState_Type()
)
rcIpPimInterfaceOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimInterfaceOperState.setStatus("current")


class _RcIpPimInterfaceType_Type(Integer32):
    """Custom type rcIpPimInterfaceType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_RcIpPimInterfaceType_Type.__name__ = "Integer32"
_RcIpPimInterfaceType_Object = MibTableColumn
rcIpPimInterfaceType = _RcIpPimInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 3, 1, 3),
    _RcIpPimInterfaceType_Type()
)
rcIpPimInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimInterfaceType.setStatus("current")


class _RcIpPimInterfaceCBSREnable_Type(TruthValue):
    """Custom type rcIpPimInterfaceCBSREnable based on TruthValue"""


_RcIpPimInterfaceCBSREnable_Object = MibTableColumn
rcIpPimInterfaceCBSREnable = _RcIpPimInterfaceCBSREnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 3, 1, 4),
    _RcIpPimInterfaceCBSREnable_Type()
)
rcIpPimInterfaceCBSREnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimInterfaceCBSREnable.setStatus("current")
_RcIpPimStaticRPTable_Object = MibTable
rcIpPimStaticRPTable = _RcIpPimStaticRPTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 4)
)
if mibBuilder.loadTexts:
    rcIpPimStaticRPTable.setStatus("current")
_RcIpPimStaticRPEntry_Object = MibTableRow
rcIpPimStaticRPEntry = _RcIpPimStaticRPEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 4, 1)
)
rcIpPimStaticRPEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPimStaticRPGroupAddress"),
    (0, "RAPID-CITY", "rcIpPimStaticRPGroupMask"),
    (0, "RAPID-CITY", "rcIpPimStaticRPAddress"),
)
if mibBuilder.loadTexts:
    rcIpPimStaticRPEntry.setStatus("current")
_RcIpPimStaticRPGroupAddress_Type = IpAddress
_RcIpPimStaticRPGroupAddress_Object = MibTableColumn
rcIpPimStaticRPGroupAddress = _RcIpPimStaticRPGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 4, 1, 1),
    _RcIpPimStaticRPGroupAddress_Type()
)
rcIpPimStaticRPGroupAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimStaticRPGroupAddress.setStatus("current")
_RcIpPimStaticRPGroupMask_Type = IpAddress
_RcIpPimStaticRPGroupMask_Object = MibTableColumn
rcIpPimStaticRPGroupMask = _RcIpPimStaticRPGroupMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 4, 1, 2),
    _RcIpPimStaticRPGroupMask_Type()
)
rcIpPimStaticRPGroupMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimStaticRPGroupMask.setStatus("current")
_RcIpPimStaticRPAddress_Type = IpAddress
_RcIpPimStaticRPAddress_Object = MibTableColumn
rcIpPimStaticRPAddress = _RcIpPimStaticRPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 4, 1, 3),
    _RcIpPimStaticRPAddress_Type()
)
rcIpPimStaticRPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimStaticRPAddress.setStatus("current")
_RcIpPimStaticRPRowStatus_Type = RowStatus
_RcIpPimStaticRPRowStatus_Object = MibTableColumn
rcIpPimStaticRPRowStatus = _RcIpPimStaticRPRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 4, 1, 4),
    _RcIpPimStaticRPRowStatus_Type()
)
rcIpPimStaticRPRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPimStaticRPRowStatus.setStatus("current")


class _RcIpPimStaticRPStatus_Type(Integer32):
    """Custom type rcIpPimStaticRPStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_RcIpPimStaticRPStatus_Type.__name__ = "Integer32"
_RcIpPimStaticRPStatus_Object = MibTableColumn
rcIpPimStaticRPStatus = _RcIpPimStaticRPStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 4, 1, 5),
    _RcIpPimStaticRPStatus_Type()
)
rcIpPimStaticRPStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimStaticRPStatus.setStatus("current")
_RcIpPimCurrBsr_ObjectIdentity = ObjectIdentity
rcIpPimCurrBsr = _RcIpPimCurrBsr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 5)
)
_RcIpPimCurrBsrAddress_Type = IpAddress
_RcIpPimCurrBsrAddress_Object = MibScalar
rcIpPimCurrBsrAddress = _RcIpPimCurrBsrAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 5, 1),
    _RcIpPimCurrBsrAddress_Type()
)
rcIpPimCurrBsrAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimCurrBsrAddress.setStatus("current")


class _RcIpPimCurrBsrFragmentTag_Type(Integer32):
    """Custom type rcIpPimCurrBsrFragmentTag based on Integer32"""
    defaultValue = -1


_RcIpPimCurrBsrFragmentTag_Object = MibScalar
rcIpPimCurrBsrFragmentTag = _RcIpPimCurrBsrFragmentTag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 5, 2),
    _RcIpPimCurrBsrFragmentTag_Type()
)
rcIpPimCurrBsrFragmentTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimCurrBsrFragmentTag.setStatus("current")
_RcIpPimCurrBsrHashMask_Type = IpAddress
_RcIpPimCurrBsrHashMask_Object = MibScalar
rcIpPimCurrBsrHashMask = _RcIpPimCurrBsrHashMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 5, 3),
    _RcIpPimCurrBsrHashMask_Type()
)
rcIpPimCurrBsrHashMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimCurrBsrHashMask.setStatus("current")


class _RcIpPimCurrBsrPriority_Type(Integer32):
    """Custom type rcIpPimCurrBsrPriority based on Integer32"""
    defaultValue = 0


_RcIpPimCurrBsrPriority_Object = MibScalar
rcIpPimCurrBsrPriority = _RcIpPimCurrBsrPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 5, 4),
    _RcIpPimCurrBsrPriority_Type()
)
rcIpPimCurrBsrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimCurrBsrPriority.setStatus("current")
_RcIpPimCurrBsrBootStrapTimer_Type = Integer32
_RcIpPimCurrBsrBootStrapTimer_Object = MibScalar
rcIpPimCurrBsrBootStrapTimer = _RcIpPimCurrBsrBootStrapTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 5, 5),
    _RcIpPimCurrBsrBootStrapTimer_Type()
)
rcIpPimCurrBsrBootStrapTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPimCurrBsrBootStrapTimer.setStatus("current")
_RcIpPimVirtualNbrTable_Object = MibTable
rcIpPimVirtualNbrTable = _RcIpPimVirtualNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 6)
)
if mibBuilder.loadTexts:
    rcIpPimVirtualNbrTable.setStatus("current")
_RcIpPimVirtualNbrEntry_Object = MibTableRow
rcIpPimVirtualNbrEntry = _RcIpPimVirtualNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 6, 1)
)
rcIpPimVirtualNbrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPimVirtualNbrAddress"),
)
if mibBuilder.loadTexts:
    rcIpPimVirtualNbrEntry.setStatus("current")
_RcIpPimVirtualNbrAddress_Type = IpAddress
_RcIpPimVirtualNbrAddress_Object = MibTableColumn
rcIpPimVirtualNbrAddress = _RcIpPimVirtualNbrAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 6, 1, 1),
    _RcIpPimVirtualNbrAddress_Type()
)
rcIpPimVirtualNbrAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpPimVirtualNbrAddress.setStatus("current")
_RcIpPimVirtualNbrIfIndex_Type = InterfaceIndex
_RcIpPimVirtualNbrIfIndex_Object = MibTableColumn
rcIpPimVirtualNbrIfIndex = _RcIpPimVirtualNbrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 6, 1, 2),
    _RcIpPimVirtualNbrIfIndex_Type()
)
rcIpPimVirtualNbrIfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpPimVirtualNbrIfIndex.setStatus("current")
_RcIpPimVirtualNbrRowStatus_Type = RowStatus
_RcIpPimVirtualNbrRowStatus_Object = MibTableColumn
rcIpPimVirtualNbrRowStatus = _RcIpPimVirtualNbrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 16, 6, 1, 3),
    _RcIpPimVirtualNbrRowStatus_Type()
)
rcIpPimVirtualNbrRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpPimVirtualNbrRowStatus.setStatus("current")
_RcIpMulticastArpTable_Object = MibTable
rcIpMulticastArpTable = _RcIpMulticastArpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17)
)
if mibBuilder.loadTexts:
    rcIpMulticastArpTable.setStatus("current")
_RcIpMulticastArpEntry_Object = MibTableRow
rcIpMulticastArpEntry = _RcIpMulticastArpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17, 1)
)
rcIpMulticastArpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMulticastArpVlanId"),
    (0, "RAPID-CITY", "rcIpMulticastArpMacAddress"),
    (0, "RAPID-CITY", "rcIpMulticastArpIpAddress"),
)
if mibBuilder.loadTexts:
    rcIpMulticastArpEntry.setStatus("current")


class _RcIpMulticastArpVlanId_Type(Integer32):
    """Custom type rcIpMulticastArpVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpMulticastArpVlanId_Type.__name__ = "Integer32"
_RcIpMulticastArpVlanId_Object = MibTableColumn
rcIpMulticastArpVlanId = _RcIpMulticastArpVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17, 1, 1),
    _RcIpMulticastArpVlanId_Type()
)
rcIpMulticastArpVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMulticastArpVlanId.setStatus("current")
_RcIpMulticastArpMacAddress_Type = MacAddress
_RcIpMulticastArpMacAddress_Object = MibTableColumn
rcIpMulticastArpMacAddress = _RcIpMulticastArpMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17, 1, 2),
    _RcIpMulticastArpMacAddress_Type()
)
rcIpMulticastArpMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMulticastArpMacAddress.setStatus("current")
_RcIpMulticastArpIpAddress_Type = IpAddress
_RcIpMulticastArpIpAddress_Object = MibTableColumn
rcIpMulticastArpIpAddress = _RcIpMulticastArpIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17, 1, 3),
    _RcIpMulticastArpIpAddress_Type()
)
rcIpMulticastArpIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMulticastArpIpAddress.setStatus("current")
_RcIpMulticastArpPorts_Type = PortSet
_RcIpMulticastArpPorts_Object = MibTableColumn
rcIpMulticastArpPorts = _RcIpMulticastArpPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17, 1, 4),
    _RcIpMulticastArpPorts_Type()
)
rcIpMulticastArpPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastArpPorts.setStatus("current")
_RcIpMulticastArpNumMltIds_Type = Integer32
_RcIpMulticastArpNumMltIds_Object = MibTableColumn
rcIpMulticastArpNumMltIds = _RcIpMulticastArpNumMltIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17, 1, 5),
    _RcIpMulticastArpNumMltIds_Type()
)
rcIpMulticastArpNumMltIds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMulticastArpNumMltIds.setStatus("current")
_RcIpMulticastArpMltIds_Type = IdList
_RcIpMulticastArpMltIds_Object = MibTableColumn
rcIpMulticastArpMltIds = _RcIpMulticastArpMltIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17, 1, 6),
    _RcIpMulticastArpMltIds_Type()
)
rcIpMulticastArpMltIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastArpMltIds.setStatus("current")
_RcIpMulticastArpRowStatus_Type = RowStatus
_RcIpMulticastArpRowStatus_Object = MibTableColumn
rcIpMulticastArpRowStatus = _RcIpMulticastArpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 17, 1, 7),
    _RcIpMulticastArpRowStatus_Type()
)
rcIpMulticastArpRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastArpRowStatus.setStatus("current")
_RcIpMulticastTable_Object = MibTable
rcIpMulticastTable = _RcIpMulticastTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 18)
)
if mibBuilder.loadTexts:
    rcIpMulticastTable.setStatus("obsolete")
_RcIpMulticastEntry_Object = MibTableRow
rcIpMulticastEntry = _RcIpMulticastEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 18, 1)
)
rcIpMulticastEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMulticastIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpMulticastEntry.setStatus("deprecated")
_RcIpMulticastIfIndex_Type = InterfaceIndex
_RcIpMulticastIfIndex_Object = MibTableColumn
rcIpMulticastIfIndex = _RcIpMulticastIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 18, 1, 1),
    _RcIpMulticastIfIndex_Type()
)
rcIpMulticastIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMulticastIfIndex.setStatus("deprecated")
_RcIpMulticastMulticastIp_Type = IpAddress
_RcIpMulticastMulticastIp_Object = MibTableColumn
rcIpMulticastMulticastIp = _RcIpMulticastMulticastIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 18, 1, 2),
    _RcIpMulticastMulticastIp_Type()
)
rcIpMulticastMulticastIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastMulticastIp.setStatus("deprecated")
_RcIpCops_ObjectIdentity = ObjectIdentity
rcIpCops = _RcIpCops_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 19)
)
_RcCopsGlobalEnable_Type = TruthValue
_RcCopsGlobalEnable_Object = MibScalar
rcCopsGlobalEnable = _RcCopsGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 19, 1),
    _RcCopsGlobalEnable_Type()
)
rcCopsGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCopsGlobalEnable.setStatus("deprecated")
_RcIpRipInterface_ObjectIdentity = ObjectIdentity
rcIpRipInterface = _RcIpRipInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20)
)
_RcIpRipInterfaceTable_Object = MibTable
rcIpRipInterfaceTable = _RcIpRipInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1)
)
if mibBuilder.loadTexts:
    rcIpRipInterfaceTable.setStatus("current")
_RcIpRipInterfaceEntry_Object = MibTableRow
rcIpRipInterfaceEntry = _RcIpRipInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1)
)
rcIpRipInterfaceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRipInterfaceAddress"),
)
if mibBuilder.loadTexts:
    rcIpRipInterfaceEntry.setStatus("current")
_RcIpRipInterfaceAddress_Type = IpAddress
_RcIpRipInterfaceAddress_Object = MibTableColumn
rcIpRipInterfaceAddress = _RcIpRipInterfaceAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 1),
    _RcIpRipInterfaceAddress_Type()
)
rcIpRipInterfaceAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRipInterfaceAddress.setStatus("current")
_RcIpRipInterfaceIfIndex_Type = InterfaceIndex
_RcIpRipInterfaceIfIndex_Object = MibTableColumn
rcIpRipInterfaceIfIndex = _RcIpRipInterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 2),
    _RcIpRipInterfaceIfIndex_Type()
)
rcIpRipInterfaceIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRipInterfaceIfIndex.setStatus("current")
_RcIpRipInterfaceRipEnable_Type = EnableValue
_RcIpRipInterfaceRipEnable_Object = MibTableColumn
rcIpRipInterfaceRipEnable = _RcIpRipInterfaceRipEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 3),
    _RcIpRipInterfaceRipEnable_Type()
)
rcIpRipInterfaceRipEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceRipEnable.setStatus("current")
_RcIpRipInterfaceAccDefRte_Type = TruthValue
_RcIpRipInterfaceAccDefRte_Object = MibTableColumn
rcIpRipInterfaceAccDefRte = _RcIpRipInterfaceAccDefRte_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 4),
    _RcIpRipInterfaceAccDefRte_Type()
)
rcIpRipInterfaceAccDefRte.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceAccDefRte.setStatus("current")
_RcIpRipInterfaceAdvDefRte_Type = TruthValue
_RcIpRipInterfaceAdvDefRte_Object = MibTableColumn
rcIpRipInterfaceAdvDefRte = _RcIpRipInterfaceAdvDefRte_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 5),
    _RcIpRipInterfaceAdvDefRte_Type()
)
rcIpRipInterfaceAdvDefRte.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceAdvDefRte.setStatus("current")
_RcIpRipInterfaceAutoAggregate_Type = TruthValue
_RcIpRipInterfaceAutoAggregate_Object = MibTableColumn
rcIpRipInterfaceAutoAggregate = _RcIpRipInterfaceAutoAggregate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 6),
    _RcIpRipInterfaceAutoAggregate_Type()
)
rcIpRipInterfaceAutoAggregate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceAutoAggregate.setStatus("current")
_RcIpRipInterfaceCost_Type = Integer32
_RcIpRipInterfaceCost_Object = MibTableColumn
rcIpRipInterfaceCost = _RcIpRipInterfaceCost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 7),
    _RcIpRipInterfaceCost_Type()
)
rcIpRipInterfaceCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceCost.setStatus("current")
_RcIpRipInterfaceListen_Type = TruthValue
_RcIpRipInterfaceListen_Object = MibTableColumn
rcIpRipInterfaceListen = _RcIpRipInterfaceListen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 8),
    _RcIpRipInterfaceListen_Type()
)
rcIpRipInterfaceListen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceListen.setStatus("current")
_RcIpRipInterfacePoison_Type = TruthValue
_RcIpRipInterfacePoison_Object = MibTableColumn
rcIpRipInterfacePoison = _RcIpRipInterfacePoison_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 9),
    _RcIpRipInterfacePoison_Type()
)
rcIpRipInterfacePoison.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfacePoison.setStatus("current")
_RcIpRipInterfaceSupply_Type = TruthValue
_RcIpRipInterfaceSupply_Object = MibTableColumn
rcIpRipInterfaceSupply = _RcIpRipInterfaceSupply_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 10),
    _RcIpRipInterfaceSupply_Type()
)
rcIpRipInterfaceSupply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceSupply.setStatus("current")
_RcIpRipInterfaceTriggeredUpdate_Type = TruthValue
_RcIpRipInterfaceTriggeredUpdate_Object = MibTableColumn
rcIpRipInterfaceTriggeredUpdate = _RcIpRipInterfaceTriggeredUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 11),
    _RcIpRipInterfaceTriggeredUpdate_Type()
)
rcIpRipInterfaceTriggeredUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceTriggeredUpdate.setStatus("current")
_RcIpRipInterfaceInPolicy_Type = DisplayString
_RcIpRipInterfaceInPolicy_Object = MibTableColumn
rcIpRipInterfaceInPolicy = _RcIpRipInterfaceInPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 12),
    _RcIpRipInterfaceInPolicy_Type()
)
rcIpRipInterfaceInPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceInPolicy.setStatus("current")
_RcIpRipInterfaceOutPolicy_Type = DisplayString
_RcIpRipInterfaceOutPolicy_Object = MibTableColumn
rcIpRipInterfaceOutPolicy = _RcIpRipInterfaceOutPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 13),
    _RcIpRipInterfaceOutPolicy_Type()
)
rcIpRipInterfaceOutPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceOutPolicy.setStatus("current")
_RcIpRipInterfaceProxyAnnounceFlag_Type = TruthValue
_RcIpRipInterfaceProxyAnnounceFlag_Object = MibTableColumn
rcIpRipInterfaceProxyAnnounceFlag = _RcIpRipInterfaceProxyAnnounceFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 14),
    _RcIpRipInterfaceProxyAnnounceFlag_Type()
)
rcIpRipInterfaceProxyAnnounceFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceProxyAnnounceFlag.setStatus("current")


class _RcIpRipInterfaceHolddown_Type(Integer32):
    """Custom type rcIpRipInterfaceHolddown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 360),
    )


_RcIpRipInterfaceHolddown_Type.__name__ = "Integer32"
_RcIpRipInterfaceHolddown_Object = MibTableColumn
rcIpRipInterfaceHolddown = _RcIpRipInterfaceHolddown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 15),
    _RcIpRipInterfaceHolddown_Type()
)
rcIpRipInterfaceHolddown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceHolddown.setStatus("current")


class _RcIpRipInterfaceTimeout_Type(Integer32):
    """Custom type rcIpRipInterfaceTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(15, 259200),
    )


_RcIpRipInterfaceTimeout_Type.__name__ = "Integer32"
_RcIpRipInterfaceTimeout_Object = MibTableColumn
rcIpRipInterfaceTimeout = _RcIpRipInterfaceTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 20, 1, 1, 16),
    _RcIpRipInterfaceTimeout_Type()
)
rcIpRipInterfaceTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRipInterfaceTimeout.setStatus("current")
_RcIpMulticastTimedPruneTable_Object = MibTable
rcIpMulticastTimedPruneTable = _RcIpMulticastTimedPruneTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21)
)
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneTable.setStatus("current")
_RcIpMulticastTimedPruneEntry_Object = MibTableRow
rcIpMulticastTimedPruneEntry = _RcIpMulticastTimedPruneEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21, 1)
)
rcIpMulticastTimedPruneEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMulticastTimedPruneGroupAddress"),
    (0, "RAPID-CITY", "rcIpMulticastTimedPruneSourceAddress"),
    (0, "RAPID-CITY", "rcIpMulticastTimedPruneSrcSubnetMask"),
)
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneEntry.setStatus("current")
_RcIpMulticastTimedPruneGroupAddress_Type = IpAddress
_RcIpMulticastTimedPruneGroupAddress_Object = MibTableColumn
rcIpMulticastTimedPruneGroupAddress = _RcIpMulticastTimedPruneGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21, 1, 1),
    _RcIpMulticastTimedPruneGroupAddress_Type()
)
rcIpMulticastTimedPruneGroupAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneGroupAddress.setStatus("current")
_RcIpMulticastTimedPruneSourceAddress_Type = IpAddress
_RcIpMulticastTimedPruneSourceAddress_Object = MibTableColumn
rcIpMulticastTimedPruneSourceAddress = _RcIpMulticastTimedPruneSourceAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21, 1, 2),
    _RcIpMulticastTimedPruneSourceAddress_Type()
)
rcIpMulticastTimedPruneSourceAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneSourceAddress.setStatus("current")
_RcIpMulticastTimedPruneSrcSubnetMask_Type = IpAddress
_RcIpMulticastTimedPruneSrcSubnetMask_Object = MibTableColumn
rcIpMulticastTimedPruneSrcSubnetMask = _RcIpMulticastTimedPruneSrcSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21, 1, 3),
    _RcIpMulticastTimedPruneSrcSubnetMask_Type()
)
rcIpMulticastTimedPruneSrcSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneSrcSubnetMask.setStatus("current")


class _RcIpMulticastTimedPruneAgingTimer_Type(Integer32):
    """Custom type rcIpMulticastTimedPruneAgingTimer based on Integer32"""
    defaultValue = 5


_RcIpMulticastTimedPruneAgingTimer_Object = MibTableColumn
rcIpMulticastTimedPruneAgingTimer = _RcIpMulticastTimedPruneAgingTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21, 1, 4),
    _RcIpMulticastTimedPruneAgingTimer_Type()
)
rcIpMulticastTimedPruneAgingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneAgingTimer.setStatus("current")
_RcIpMulticastTimedPruneTimeLeft_Type = Integer32
_RcIpMulticastTimedPruneTimeLeft_Object = MibTableColumn
rcIpMulticastTimedPruneTimeLeft = _RcIpMulticastTimedPruneTimeLeft_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21, 1, 5),
    _RcIpMulticastTimedPruneTimeLeft_Type()
)
rcIpMulticastTimedPruneTimeLeft.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneTimeLeft.setStatus("current")
_RcIpMulticastTimedPruneLastActivity_Type = TimeTicks
_RcIpMulticastTimedPruneLastActivity_Object = MibTableColumn
rcIpMulticastTimedPruneLastActivity = _RcIpMulticastTimedPruneLastActivity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21, 1, 6),
    _RcIpMulticastTimedPruneLastActivity_Type()
)
rcIpMulticastTimedPruneLastActivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneLastActivity.setStatus("current")
_RcIpMulticastTimedPruneRowStatus_Type = RowStatus
_RcIpMulticastTimedPruneRowStatus_Object = MibTableColumn
rcIpMulticastTimedPruneRowStatus = _RcIpMulticastTimedPruneRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 21, 1, 7),
    _RcIpMulticastTimedPruneRowStatus_Type()
)
rcIpMulticastTimedPruneRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastTimedPruneRowStatus.setStatus("current")
_RcIpConfIcmpRdiscTable_Object = MibTable
rcIpConfIcmpRdiscTable = _RcIpConfIcmpRdiscTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22)
)
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscTable.setStatus("current")
_RcIpConfIcmpRdiscEntry_Object = MibTableRow
rcIpConfIcmpRdiscEntry = _RcIpConfIcmpRdiscEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22, 1)
)
rcIpConfIcmpRdiscEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpConfIcmpRdiscIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscEntry.setStatus("current")


class _RcIpConfIcmpRdiscIfIndex_Type(Integer32):
    """Custom type rcIpConfIcmpRdiscIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpConfIcmpRdiscIfIndex_Type.__name__ = "Integer32"
_RcIpConfIcmpRdiscIfIndex_Object = MibTableColumn
rcIpConfIcmpRdiscIfIndex = _RcIpConfIcmpRdiscIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22, 1, 1),
    _RcIpConfIcmpRdiscIfIndex_Type()
)
rcIpConfIcmpRdiscIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscIfIndex.setStatus("current")
_RcIpConfIcmpRdiscAdvAddress_Type = IpAddress
_RcIpConfIcmpRdiscAdvAddress_Object = MibTableColumn
rcIpConfIcmpRdiscAdvAddress = _RcIpConfIcmpRdiscAdvAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22, 1, 2),
    _RcIpConfIcmpRdiscAdvAddress_Type()
)
rcIpConfIcmpRdiscAdvAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscAdvAddress.setStatus("current")
_RcIpConfIcmpRdiscAdvFlag_Type = TruthValue
_RcIpConfIcmpRdiscAdvFlag_Object = MibTableColumn
rcIpConfIcmpRdiscAdvFlag = _RcIpConfIcmpRdiscAdvFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22, 1, 3),
    _RcIpConfIcmpRdiscAdvFlag_Type()
)
rcIpConfIcmpRdiscAdvFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscAdvFlag.setStatus("current")


class _RcIpConfIcmpRdiscAdvLifetime_Type(Integer32):
    """Custom type rcIpConfIcmpRdiscAdvLifetime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 9000),
    )


_RcIpConfIcmpRdiscAdvLifetime_Type.__name__ = "Integer32"
_RcIpConfIcmpRdiscAdvLifetime_Object = MibTableColumn
rcIpConfIcmpRdiscAdvLifetime = _RcIpConfIcmpRdiscAdvLifetime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22, 1, 4),
    _RcIpConfIcmpRdiscAdvLifetime_Type()
)
rcIpConfIcmpRdiscAdvLifetime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscAdvLifetime.setStatus("current")


class _RcIpConfIcmpRdiscMaxAdvInterval_Type(Integer32):
    """Custom type rcIpConfIcmpRdiscMaxAdvInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 1800),
    )


_RcIpConfIcmpRdiscMaxAdvInterval_Type.__name__ = "Integer32"
_RcIpConfIcmpRdiscMaxAdvInterval_Object = MibTableColumn
rcIpConfIcmpRdiscMaxAdvInterval = _RcIpConfIcmpRdiscMaxAdvInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22, 1, 5),
    _RcIpConfIcmpRdiscMaxAdvInterval_Type()
)
rcIpConfIcmpRdiscMaxAdvInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscMaxAdvInterval.setStatus("current")


class _RcIpConfIcmpRdiscMinAdvInterval_Type(Integer32):
    """Custom type rcIpConfIcmpRdiscMinAdvInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 1800),
    )


_RcIpConfIcmpRdiscMinAdvInterval_Type.__name__ = "Integer32"
_RcIpConfIcmpRdiscMinAdvInterval_Object = MibTableColumn
rcIpConfIcmpRdiscMinAdvInterval = _RcIpConfIcmpRdiscMinAdvInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22, 1, 6),
    _RcIpConfIcmpRdiscMinAdvInterval_Type()
)
rcIpConfIcmpRdiscMinAdvInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscMinAdvInterval.setStatus("current")


class _RcIpConfIcmpRdiscPreferenceLevel_Type(Integer32):
    """Custom type rcIpConfIcmpRdiscPreferenceLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-2147483648, 2147483647),
    )


_RcIpConfIcmpRdiscPreferenceLevel_Type.__name__ = "Integer32"
_RcIpConfIcmpRdiscPreferenceLevel_Object = MibTableColumn
rcIpConfIcmpRdiscPreferenceLevel = _RcIpConfIcmpRdiscPreferenceLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 22, 1, 7),
    _RcIpConfIcmpRdiscPreferenceLevel_Type()
)
rcIpConfIcmpRdiscPreferenceLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpConfIcmpRdiscPreferenceLevel.setStatus("current")
_RcIpMulticastSoftwareForwarding_ObjectIdentity = ObjectIdentity
rcIpMulticastSoftwareForwarding = _RcIpMulticastSoftwareForwarding_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 23)
)


class _RcIpMulticastSoftwareForwardingEnable_Type(TruthValue):
    """Custom type rcIpMulticastSoftwareForwardingEnable based on TruthValue"""


_RcIpMulticastSoftwareForwardingEnable_Object = MibScalar
rcIpMulticastSoftwareForwardingEnable = _RcIpMulticastSoftwareForwardingEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 23, 1),
    _RcIpMulticastSoftwareForwardingEnable_Type()
)
rcIpMulticastSoftwareForwardingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastSoftwareForwardingEnable.setStatus("current")


class _RcIpMulticastSoftwareForwardingThreshold_Type(Integer32):
    """Custom type rcIpMulticastSoftwareForwardingThreshold based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpMulticastSoftwareForwardingThreshold_Type.__name__ = "Integer32"
_RcIpMulticastSoftwareForwardingThreshold_Object = MibScalar
rcIpMulticastSoftwareForwardingThreshold = _RcIpMulticastSoftwareForwardingThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 23, 2),
    _RcIpMulticastSoftwareForwardingThreshold_Type()
)
rcIpMulticastSoftwareForwardingThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastSoftwareForwardingThreshold.setStatus("current")
_RcIpMrouteHw_ObjectIdentity = ObjectIdentity
rcIpMrouteHw = _RcIpMrouteHw_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24)
)
_RcIpMrouteHwTable_Object = MibTable
rcIpMrouteHwTable = _RcIpMrouteHwTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 1)
)
if mibBuilder.loadTexts:
    rcIpMrouteHwTable.setStatus("current")
_RcIpMrouteHwEntry_Object = MibTableRow
rcIpMrouteHwEntry = _RcIpMrouteHwEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 1, 1)
)
rcIpMrouteHwEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMrouteHwGroupAddress"),
    (0, "RAPID-CITY", "rcIpMrouteHwSubnet"),
    (0, "RAPID-CITY", "rcIpMrouteHwInvlan"),
    (0, "RAPID-CITY", "rcIpMrouteHwIndex"),
)
if mibBuilder.loadTexts:
    rcIpMrouteHwEntry.setStatus("current")
_RcIpMrouteHwGroupAddress_Type = IpAddress
_RcIpMrouteHwGroupAddress_Object = MibTableColumn
rcIpMrouteHwGroupAddress = _RcIpMrouteHwGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 1, 1, 1),
    _RcIpMrouteHwGroupAddress_Type()
)
rcIpMrouteHwGroupAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwGroupAddress.setStatus("current")
_RcIpMrouteHwSubnet_Type = IpAddress
_RcIpMrouteHwSubnet_Object = MibTableColumn
rcIpMrouteHwSubnet = _RcIpMrouteHwSubnet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 1, 1, 2),
    _RcIpMrouteHwSubnet_Type()
)
rcIpMrouteHwSubnet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwSubnet.setStatus("current")


class _RcIpMrouteHwInvlan_Type(Integer32):
    """Custom type rcIpMrouteHwInvlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpMrouteHwInvlan_Type.__name__ = "Integer32"
_RcIpMrouteHwInvlan_Object = MibTableColumn
rcIpMrouteHwInvlan = _RcIpMrouteHwInvlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 1, 1, 3),
    _RcIpMrouteHwInvlan_Type()
)
rcIpMrouteHwInvlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwInvlan.setStatus("current")
_RcIpMrouteHwPruned_Type = TruthValue
_RcIpMrouteHwPruned_Object = MibTableColumn
rcIpMrouteHwPruned = _RcIpMrouteHwPruned_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 1, 1, 4),
    _RcIpMrouteHwPruned_Type()
)
rcIpMrouteHwPruned.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwPruned.setStatus("current")


class _RcIpMrouteHwIndex_Type(Integer32):
    """Custom type rcIpMrouteHwIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpMrouteHwIndex_Type.__name__ = "Integer32"
_RcIpMrouteHwIndex_Object = MibTableColumn
rcIpMrouteHwIndex = _RcIpMrouteHwIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 1, 1, 5),
    _RcIpMrouteHwIndex_Type()
)
rcIpMrouteHwIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwIndex.setStatus("current")
_RcIpMrouteHwPrunesTable_Object = MibTable
rcIpMrouteHwPrunesTable = _RcIpMrouteHwPrunesTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 2)
)
if mibBuilder.loadTexts:
    rcIpMrouteHwPrunesTable.setStatus("current")
_RcIpMrouteHwPrunesEntry_Object = MibTableRow
rcIpMrouteHwPrunesEntry = _RcIpMrouteHwPrunesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 2, 1)
)
rcIpMrouteHwPrunesEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMrouteHwPrunesGroupAddress"),
    (0, "RAPID-CITY", "rcIpMrouteHwPrunesSubnet"),
    (0, "RAPID-CITY", "rcIpMrouteHwPrunesInvlan"),
    (0, "RAPID-CITY", "rcIpMrouteHwPrunesNeighbor"),
)
if mibBuilder.loadTexts:
    rcIpMrouteHwPrunesEntry.setStatus("current")
_RcIpMrouteHwPrunesGroupAddress_Type = IpAddress
_RcIpMrouteHwPrunesGroupAddress_Object = MibTableColumn
rcIpMrouteHwPrunesGroupAddress = _RcIpMrouteHwPrunesGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 2, 1, 1),
    _RcIpMrouteHwPrunesGroupAddress_Type()
)
rcIpMrouteHwPrunesGroupAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwPrunesGroupAddress.setStatus("current")
_RcIpMrouteHwPrunesSubnet_Type = IpAddress
_RcIpMrouteHwPrunesSubnet_Object = MibTableColumn
rcIpMrouteHwPrunesSubnet = _RcIpMrouteHwPrunesSubnet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 2, 1, 2),
    _RcIpMrouteHwPrunesSubnet_Type()
)
rcIpMrouteHwPrunesSubnet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwPrunesSubnet.setStatus("current")


class _RcIpMrouteHwPrunesInvlan_Type(Integer32):
    """Custom type rcIpMrouteHwPrunesInvlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpMrouteHwPrunesInvlan_Type.__name__ = "Integer32"
_RcIpMrouteHwPrunesInvlan_Object = MibTableColumn
rcIpMrouteHwPrunesInvlan = _RcIpMrouteHwPrunesInvlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 2, 1, 3),
    _RcIpMrouteHwPrunesInvlan_Type()
)
rcIpMrouteHwPrunesInvlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwPrunesInvlan.setStatus("current")
_RcIpMrouteHwPrunesNeighbor_Type = IpAddress
_RcIpMrouteHwPrunesNeighbor_Object = MibTableColumn
rcIpMrouteHwPrunesNeighbor = _RcIpMrouteHwPrunesNeighbor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 2, 1, 4),
    _RcIpMrouteHwPrunesNeighbor_Type()
)
rcIpMrouteHwPrunesNeighbor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwPrunesNeighbor.setStatus("current")
_RcIpMrouteHwPrunesTimer_Type = Integer32
_RcIpMrouteHwPrunesTimer_Object = MibTableColumn
rcIpMrouteHwPrunesTimer = _RcIpMrouteHwPrunesTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 2, 1, 5),
    _RcIpMrouteHwPrunesTimer_Type()
)
rcIpMrouteHwPrunesTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwPrunesTimer.setStatus("current")
_RcIpMrouteHwSourcesTable_Object = MibTable
rcIpMrouteHwSourcesTable = _RcIpMrouteHwSourcesTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 3)
)
if mibBuilder.loadTexts:
    rcIpMrouteHwSourcesTable.setStatus("current")
_RcIpMrouteHwSourcesEntry_Object = MibTableRow
rcIpMrouteHwSourcesEntry = _RcIpMrouteHwSourcesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 3, 1)
)
rcIpMrouteHwSourcesEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMrouteHwSourcesGroupAddress"),
    (0, "RAPID-CITY", "rcIpMrouteHwSourcesSubnet"),
    (0, "RAPID-CITY", "rcIpMrouteHwSourcesInvlan"),
    (0, "RAPID-CITY", "rcIpMrouteHwSourcesAddress"),
)
if mibBuilder.loadTexts:
    rcIpMrouteHwSourcesEntry.setStatus("current")
_RcIpMrouteHwSourcesGroupAddress_Type = IpAddress
_RcIpMrouteHwSourcesGroupAddress_Object = MibTableColumn
rcIpMrouteHwSourcesGroupAddress = _RcIpMrouteHwSourcesGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 3, 1, 1),
    _RcIpMrouteHwSourcesGroupAddress_Type()
)
rcIpMrouteHwSourcesGroupAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwSourcesGroupAddress.setStatus("current")
_RcIpMrouteHwSourcesSubnet_Type = IpAddress
_RcIpMrouteHwSourcesSubnet_Object = MibTableColumn
rcIpMrouteHwSourcesSubnet = _RcIpMrouteHwSourcesSubnet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 3, 1, 2),
    _RcIpMrouteHwSourcesSubnet_Type()
)
rcIpMrouteHwSourcesSubnet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwSourcesSubnet.setStatus("current")


class _RcIpMrouteHwSourcesInvlan_Type(Integer32):
    """Custom type rcIpMrouteHwSourcesInvlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpMrouteHwSourcesInvlan_Type.__name__ = "Integer32"
_RcIpMrouteHwSourcesInvlan_Object = MibTableColumn
rcIpMrouteHwSourcesInvlan = _RcIpMrouteHwSourcesInvlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 3, 1, 3),
    _RcIpMrouteHwSourcesInvlan_Type()
)
rcIpMrouteHwSourcesInvlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwSourcesInvlan.setStatus("current")
_RcIpMrouteHwSourcesAddress_Type = IpAddress
_RcIpMrouteHwSourcesAddress_Object = MibTableColumn
rcIpMrouteHwSourcesAddress = _RcIpMrouteHwSourcesAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 3, 1, 4),
    _RcIpMrouteHwSourcesAddress_Type()
)
rcIpMrouteHwSourcesAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwSourcesAddress.setStatus("current")
_RcIpMrouteHwSourcesIngressPort_Type = PortSet
_RcIpMrouteHwSourcesIngressPort_Object = MibTableColumn
rcIpMrouteHwSourcesIngressPort = _RcIpMrouteHwSourcesIngressPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 3, 1, 5),
    _RcIpMrouteHwSourcesIngressPort_Type()
)
rcIpMrouteHwSourcesIngressPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwSourcesIngressPort.setStatus("current")
_RcIpMrouteHwEgressVlansTable_Object = MibTable
rcIpMrouteHwEgressVlansTable = _RcIpMrouteHwEgressVlansTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 4)
)
if mibBuilder.loadTexts:
    rcIpMrouteHwEgressVlansTable.setStatus("current")
_RcIpMrouteHwEgressVlansEntry_Object = MibTableRow
rcIpMrouteHwEgressVlansEntry = _RcIpMrouteHwEgressVlansEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 4, 1)
)
rcIpMrouteHwEgressVlansEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMrouteHwEgressVlansGroupAddress"),
    (0, "RAPID-CITY", "rcIpMrouteHwEgressVlansSubnet"),
    (0, "RAPID-CITY", "rcIpMrouteHwEgressVlansInvlan"),
    (0, "RAPID-CITY", "rcIpMrouteHwEgressVlansId"),
    (0, "RAPID-CITY", "rcIpMrouteHwEgressVlansIndex"),
)
if mibBuilder.loadTexts:
    rcIpMrouteHwEgressVlansEntry.setStatus("current")
_RcIpMrouteHwEgressVlansGroupAddress_Type = IpAddress
_RcIpMrouteHwEgressVlansGroupAddress_Object = MibTableColumn
rcIpMrouteHwEgressVlansGroupAddress = _RcIpMrouteHwEgressVlansGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 4, 1, 1),
    _RcIpMrouteHwEgressVlansGroupAddress_Type()
)
rcIpMrouteHwEgressVlansGroupAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwEgressVlansGroupAddress.setStatus("current")
_RcIpMrouteHwEgressVlansSubnet_Type = IpAddress
_RcIpMrouteHwEgressVlansSubnet_Object = MibTableColumn
rcIpMrouteHwEgressVlansSubnet = _RcIpMrouteHwEgressVlansSubnet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 4, 1, 2),
    _RcIpMrouteHwEgressVlansSubnet_Type()
)
rcIpMrouteHwEgressVlansSubnet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwEgressVlansSubnet.setStatus("current")


class _RcIpMrouteHwEgressVlansInvlan_Type(Integer32):
    """Custom type rcIpMrouteHwEgressVlansInvlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpMrouteHwEgressVlansInvlan_Type.__name__ = "Integer32"
_RcIpMrouteHwEgressVlansInvlan_Object = MibTableColumn
rcIpMrouteHwEgressVlansInvlan = _RcIpMrouteHwEgressVlansInvlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 4, 1, 3),
    _RcIpMrouteHwEgressVlansInvlan_Type()
)
rcIpMrouteHwEgressVlansInvlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwEgressVlansInvlan.setStatus("current")


class _RcIpMrouteHwEgressVlansId_Type(Integer32):
    """Custom type rcIpMrouteHwEgressVlansId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpMrouteHwEgressVlansId_Type.__name__ = "Integer32"
_RcIpMrouteHwEgressVlansId_Object = MibTableColumn
rcIpMrouteHwEgressVlansId = _RcIpMrouteHwEgressVlansId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 4, 1, 4),
    _RcIpMrouteHwEgressVlansId_Type()
)
rcIpMrouteHwEgressVlansId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwEgressVlansId.setStatus("current")
_RcIpMrouteHwEgressVlansPorts_Type = PortSet
_RcIpMrouteHwEgressVlansPorts_Object = MibTableColumn
rcIpMrouteHwEgressVlansPorts = _RcIpMrouteHwEgressVlansPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 4, 1, 5),
    _RcIpMrouteHwEgressVlansPorts_Type()
)
rcIpMrouteHwEgressVlansPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwEgressVlansPorts.setStatus("current")


class _RcIpMrouteHwEgressVlansIndex_Type(Integer32):
    """Custom type rcIpMrouteHwEgressVlansIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpMrouteHwEgressVlansIndex_Type.__name__ = "Integer32"
_RcIpMrouteHwEgressVlansIndex_Object = MibTableColumn
rcIpMrouteHwEgressVlansIndex = _RcIpMrouteHwEgressVlansIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 24, 4, 1, 6),
    _RcIpMrouteHwEgressVlansIndex_Type()
)
rcIpMrouteHwEgressVlansIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMrouteHwEgressVlansIndex.setStatus("current")
_RcIpResourceUsage_ObjectIdentity = ObjectIdentity
rcIpResourceUsage = _RcIpResourceUsage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25)
)
_RcIpResourceUsageGlobal_ObjectIdentity = ObjectIdentity
rcIpResourceUsageGlobal = _RcIpResourceUsageGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25, 1)
)


class _RcIpResourceUsageGlobalIngressRecInUse_Type(Integer32):
    """Custom type rcIpResourceUsageGlobalIngressRecInUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_RcIpResourceUsageGlobalIngressRecInUse_Type.__name__ = "Integer32"
_RcIpResourceUsageGlobalIngressRecInUse_Object = MibScalar
rcIpResourceUsageGlobalIngressRecInUse = _RcIpResourceUsageGlobalIngressRecInUse_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25, 1, 1),
    _RcIpResourceUsageGlobalIngressRecInUse_Type()
)
rcIpResourceUsageGlobalIngressRecInUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpResourceUsageGlobalIngressRecInUse.setStatus("current")


class _RcIpResourceUsageGlobalEgressRecInUse_Type(Integer32):
    """Custom type rcIpResourceUsageGlobalEgressRecInUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_RcIpResourceUsageGlobalEgressRecInUse_Type.__name__ = "Integer32"
_RcIpResourceUsageGlobalEgressRecInUse_Object = MibScalar
rcIpResourceUsageGlobalEgressRecInUse = _RcIpResourceUsageGlobalEgressRecInUse_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25, 1, 2),
    _RcIpResourceUsageGlobalEgressRecInUse_Type()
)
rcIpResourceUsageGlobalEgressRecInUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpResourceUsageGlobalEgressRecInUse.setStatus("current")


class _RcIpResourceUsageGlobalIngressThreshold_Type(Integer32):
    """Custom type rcIpResourceUsageGlobalIngressThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_RcIpResourceUsageGlobalIngressThreshold_Type.__name__ = "Integer32"
_RcIpResourceUsageGlobalIngressThreshold_Object = MibScalar
rcIpResourceUsageGlobalIngressThreshold = _RcIpResourceUsageGlobalIngressThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25, 1, 3),
    _RcIpResourceUsageGlobalIngressThreshold_Type()
)
rcIpResourceUsageGlobalIngressThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpResourceUsageGlobalIngressThreshold.setStatus("current")


class _RcIpResourceUsageGlobalEgressThreshold_Type(Integer32):
    """Custom type rcIpResourceUsageGlobalEgressThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_RcIpResourceUsageGlobalEgressThreshold_Type.__name__ = "Integer32"
_RcIpResourceUsageGlobalEgressThreshold_Object = MibScalar
rcIpResourceUsageGlobalEgressThreshold = _RcIpResourceUsageGlobalEgressThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25, 1, 4),
    _RcIpResourceUsageGlobalEgressThreshold_Type()
)
rcIpResourceUsageGlobalEgressThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpResourceUsageGlobalEgressThreshold.setStatus("current")


class _RcIpResourceUsageGlobalSendTrapAndLog_Type(EnableValue):
    """Custom type rcIpResourceUsageGlobalSendTrapAndLog based on EnableValue"""


_RcIpResourceUsageGlobalSendTrapAndLog_Object = MibScalar
rcIpResourceUsageGlobalSendTrapAndLog = _RcIpResourceUsageGlobalSendTrapAndLog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25, 1, 5),
    _RcIpResourceUsageGlobalSendTrapAndLog_Type()
)
rcIpResourceUsageGlobalSendTrapAndLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpResourceUsageGlobalSendTrapAndLog.setStatus("current")


class _RcIpResourceUsageGlobalSendTrapOnly_Type(EnableValue):
    """Custom type rcIpResourceUsageGlobalSendTrapOnly based on EnableValue"""


_RcIpResourceUsageGlobalSendTrapOnly_Object = MibScalar
rcIpResourceUsageGlobalSendTrapOnly = _RcIpResourceUsageGlobalSendTrapOnly_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25, 1, 6),
    _RcIpResourceUsageGlobalSendTrapOnly_Type()
)
rcIpResourceUsageGlobalSendTrapOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpResourceUsageGlobalSendTrapOnly.setStatus("current")


class _RcIpResourceUsageGlobalLogMsgOnly_Type(EnableValue):
    """Custom type rcIpResourceUsageGlobalLogMsgOnly based on EnableValue"""


_RcIpResourceUsageGlobalLogMsgOnly_Object = MibScalar
rcIpResourceUsageGlobalLogMsgOnly = _RcIpResourceUsageGlobalLogMsgOnly_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 25, 1, 7),
    _RcIpResourceUsageGlobalLogMsgOnly_Type()
)
rcIpResourceUsageGlobalLogMsgOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpResourceUsageGlobalLogMsgOnly.setStatus("current")
_RcIpRsmlt_ObjectIdentity = ObjectIdentity
rcIpRsmlt = _RcIpRsmlt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26)
)
_RcIpRsmltGlobal_ObjectIdentity = ObjectIdentity
rcIpRsmltGlobal = _RcIpRsmltGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 1)
)
_RcIpRsmltGlobalTableSize_Type = Integer32
_RcIpRsmltGlobalTableSize_Object = MibScalar
rcIpRsmltGlobalTableSize = _RcIpRsmltGlobalTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 1, 1),
    _RcIpRsmltGlobalTableSize_Type()
)
rcIpRsmltGlobalTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltGlobalTableSize.setStatus("current")


class _RcIpRsmltEdgeSupportEnable_Type(TruthValue):
    """Custom type rcIpRsmltEdgeSupportEnable based on TruthValue"""


_RcIpRsmltEdgeSupportEnable_Object = MibScalar
rcIpRsmltEdgeSupportEnable = _RcIpRsmltEdgeSupportEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 1, 2),
    _RcIpRsmltEdgeSupportEnable_Type()
)
rcIpRsmltEdgeSupportEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRsmltEdgeSupportEnable.setStatus("current")
_RcIpRsmltOperTable_Object = MibTable
rcIpRsmltOperTable = _RcIpRsmltOperTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2)
)
if mibBuilder.loadTexts:
    rcIpRsmltOperTable.setStatus("current")
_RcIpRsmltOperEntry_Object = MibTableRow
rcIpRsmltOperEntry = _RcIpRsmltOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1)
)
rcIpRsmltOperEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRsmltOperIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpRsmltOperEntry.setStatus("current")
_RcIpRsmltOperIfIndex_Type = InterfaceIndex
_RcIpRsmltOperIfIndex_Object = MibTableColumn
rcIpRsmltOperIfIndex = _RcIpRsmltOperIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 1),
    _RcIpRsmltOperIfIndex_Type()
)
rcIpRsmltOperIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperIfIndex.setStatus("current")


class _RcIpRsmltOperAdminStatus_Type(TruthValue):
    """Custom type rcIpRsmltOperAdminStatus based on TruthValue"""


_RcIpRsmltOperAdminStatus_Object = MibTableColumn
rcIpRsmltOperAdminStatus = _RcIpRsmltOperAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 2),
    _RcIpRsmltOperAdminStatus_Type()
)
rcIpRsmltOperAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRsmltOperAdminStatus.setStatus("current")


class _RcIpRsmltOperHoldDownTimer_Type(Integer32):
    """Custom type rcIpRsmltOperHoldDownTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpRsmltOperHoldDownTimer_Type.__name__ = "Integer32"
_RcIpRsmltOperHoldDownTimer_Object = MibTableColumn
rcIpRsmltOperHoldDownTimer = _RcIpRsmltOperHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 3),
    _RcIpRsmltOperHoldDownTimer_Type()
)
rcIpRsmltOperHoldDownTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRsmltOperHoldDownTimer.setStatus("current")


class _RcIpRsmltOperHoldDownTimeRemaining_Type(Integer32):
    """Custom type rcIpRsmltOperHoldDownTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpRsmltOperHoldDownTimeRemaining_Type.__name__ = "Integer32"
_RcIpRsmltOperHoldDownTimeRemaining_Object = MibTableColumn
rcIpRsmltOperHoldDownTimeRemaining = _RcIpRsmltOperHoldDownTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 4),
    _RcIpRsmltOperHoldDownTimeRemaining_Type()
)
rcIpRsmltOperHoldDownTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperHoldDownTimeRemaining.setStatus("current")


class _RcIpRsmltOperHoldUpTimer_Type(Integer32):
    """Custom type rcIpRsmltOperHoldUpTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpRsmltOperHoldUpTimer_Type.__name__ = "Integer32"
_RcIpRsmltOperHoldUpTimer_Object = MibTableColumn
rcIpRsmltOperHoldUpTimer = _RcIpRsmltOperHoldUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 5),
    _RcIpRsmltOperHoldUpTimer_Type()
)
rcIpRsmltOperHoldUpTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRsmltOperHoldUpTimer.setStatus("current")


class _RcIpRsmltOperHoldUpTimeRemaining_Type(Integer32):
    """Custom type rcIpRsmltOperHoldUpTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpRsmltOperHoldUpTimeRemaining_Type.__name__ = "Integer32"
_RcIpRsmltOperHoldUpTimeRemaining_Object = MibTableColumn
rcIpRsmltOperHoldUpTimeRemaining = _RcIpRsmltOperHoldUpTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 6),
    _RcIpRsmltOperHoldUpTimeRemaining_Type()
)
rcIpRsmltOperHoldUpTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperHoldUpTimeRemaining.setStatus("current")


class _RcIpRsmltOperIpAddr_Type(IpAddress):
    """Custom type rcIpRsmltOperIpAddr based on IpAddress"""
    defaultHexValue = "00000000"


_RcIpRsmltOperIpAddr_Object = MibTableColumn
rcIpRsmltOperIpAddr = _RcIpRsmltOperIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 7),
    _RcIpRsmltOperIpAddr_Type()
)
rcIpRsmltOperIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperIpAddr.setStatus("current")


class _RcIpRsmltOperOperStatus_Type(Integer32):
    """Custom type rcIpRsmltOperOperStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcIpRsmltOperOperStatus_Type.__name__ = "Integer32"
_RcIpRsmltOperOperStatus_Object = MibTableColumn
rcIpRsmltOperOperStatus = _RcIpRsmltOperOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 8),
    _RcIpRsmltOperOperStatus_Type()
)
rcIpRsmltOperOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperOperStatus.setStatus("current")
_RcIpRsmltOperSmltId_Type = IdList
_RcIpRsmltOperSmltId_Object = MibTableColumn
rcIpRsmltOperSmltId = _RcIpRsmltOperSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 9),
    _RcIpRsmltOperSmltId_Type()
)
rcIpRsmltOperSmltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperSmltId.setStatus("current")
_RcIpRsmltOperSltId_Type = IdList
_RcIpRsmltOperSltId_Object = MibTableColumn
rcIpRsmltOperSltId = _RcIpRsmltOperSltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 10),
    _RcIpRsmltOperSltId_Type()
)
rcIpRsmltOperSltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperSltId.setStatus("current")


class _RcIpRsmltOperVlanId_Type(Integer32):
    """Custom type rcIpRsmltOperVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4093),
    )


_RcIpRsmltOperVlanId_Type.__name__ = "Integer32"
_RcIpRsmltOperVlanId_Object = MibTableColumn
rcIpRsmltOperVlanId = _RcIpRsmltOperVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 11),
    _RcIpRsmltOperVlanId_Type()
)
rcIpRsmltOperVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperVlanId.setStatus("current")
_RcIpRsmltOperMacAddr_Type = MacAddress
_RcIpRsmltOperMacAddr_Object = MibTableColumn
rcIpRsmltOperMacAddr = _RcIpRsmltOperMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 12),
    _RcIpRsmltOperMacAddr_Type()
)
rcIpRsmltOperMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperMacAddr.setStatus("current")
_RcIpRsmltOperRowStatus_Type = RowStatus
_RcIpRsmltOperRowStatus_Object = MibTableColumn
rcIpRsmltOperRowStatus = _RcIpRsmltOperRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 13),
    _RcIpRsmltOperRowStatus_Type()
)
rcIpRsmltOperRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRsmltOperRowStatus.setStatus("current")
_RcIpRsmltOperVrfId_Type = VrfIdentifier
_RcIpRsmltOperVrfId_Object = MibTableColumn
rcIpRsmltOperVrfId = _RcIpRsmltOperVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 14),
    _RcIpRsmltOperVrfId_Type()
)
rcIpRsmltOperVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperVrfId.setStatus("current")


class _RcIpRsmltOperVrfName_Type(SnmpAdminString):
    """Custom type rcIpRsmltOperVrfName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpRsmltOperVrfName_Type.__name__ = "SnmpAdminString"
_RcIpRsmltOperVrfName_Object = MibTableColumn
rcIpRsmltOperVrfName = _RcIpRsmltOperVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 2, 1, 15),
    _RcIpRsmltOperVrfName_Type()
)
rcIpRsmltOperVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltOperVrfName.setStatus("current")
_RcIpRsmltPeerTable_Object = MibTable
rcIpRsmltPeerTable = _RcIpRsmltPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3)
)
if mibBuilder.loadTexts:
    rcIpRsmltPeerTable.setStatus("current")
_RcIpRsmltPeerEntry_Object = MibTableRow
rcIpRsmltPeerEntry = _RcIpRsmltPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1)
)
rcIpRsmltPeerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRsmltPeerIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpRsmltPeerEntry.setStatus("current")
_RcIpRsmltPeerIfIndex_Type = InterfaceIndex
_RcIpRsmltPeerIfIndex_Object = MibTableColumn
rcIpRsmltPeerIfIndex = _RcIpRsmltPeerIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 1),
    _RcIpRsmltPeerIfIndex_Type()
)
rcIpRsmltPeerIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerIfIndex.setStatus("current")
_RcIpRsmltPeerAdminStatus_Type = TruthValue
_RcIpRsmltPeerAdminStatus_Object = MibTableColumn
rcIpRsmltPeerAdminStatus = _RcIpRsmltPeerAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 2),
    _RcIpRsmltPeerAdminStatus_Type()
)
rcIpRsmltPeerAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerAdminStatus.setStatus("current")


class _RcIpRsmltPeerHoldDownTimer_Type(Integer32):
    """Custom type rcIpRsmltPeerHoldDownTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpRsmltPeerHoldDownTimer_Type.__name__ = "Integer32"
_RcIpRsmltPeerHoldDownTimer_Object = MibTableColumn
rcIpRsmltPeerHoldDownTimer = _RcIpRsmltPeerHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 3),
    _RcIpRsmltPeerHoldDownTimer_Type()
)
rcIpRsmltPeerHoldDownTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerHoldDownTimer.setStatus("current")


class _RcIpRsmltPeerHoldDownTimeRemaining_Type(Integer32):
    """Custom type rcIpRsmltPeerHoldDownTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpRsmltPeerHoldDownTimeRemaining_Type.__name__ = "Integer32"
_RcIpRsmltPeerHoldDownTimeRemaining_Object = MibTableColumn
rcIpRsmltPeerHoldDownTimeRemaining = _RcIpRsmltPeerHoldDownTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 4),
    _RcIpRsmltPeerHoldDownTimeRemaining_Type()
)
rcIpRsmltPeerHoldDownTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerHoldDownTimeRemaining.setStatus("current")


class _RcIpRsmltPeerHoldUpTimer_Type(Integer32):
    """Custom type rcIpRsmltPeerHoldUpTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpRsmltPeerHoldUpTimer_Type.__name__ = "Integer32"
_RcIpRsmltPeerHoldUpTimer_Object = MibTableColumn
rcIpRsmltPeerHoldUpTimer = _RcIpRsmltPeerHoldUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 5),
    _RcIpRsmltPeerHoldUpTimer_Type()
)
rcIpRsmltPeerHoldUpTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerHoldUpTimer.setStatus("current")


class _RcIpRsmltPeerHoldUpTimeRemaining_Type(Integer32):
    """Custom type rcIpRsmltPeerHoldUpTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpRsmltPeerHoldUpTimeRemaining_Type.__name__ = "Integer32"
_RcIpRsmltPeerHoldUpTimeRemaining_Object = MibTableColumn
rcIpRsmltPeerHoldUpTimeRemaining = _RcIpRsmltPeerHoldUpTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 6),
    _RcIpRsmltPeerHoldUpTimeRemaining_Type()
)
rcIpRsmltPeerHoldUpTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerHoldUpTimeRemaining.setStatus("current")


class _RcIpRsmltPeerIpAddr_Type(IpAddress):
    """Custom type rcIpRsmltPeerIpAddr based on IpAddress"""
    defaultHexValue = "00000000"


_RcIpRsmltPeerIpAddr_Object = MibTableColumn
rcIpRsmltPeerIpAddr = _RcIpRsmltPeerIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 7),
    _RcIpRsmltPeerIpAddr_Type()
)
rcIpRsmltPeerIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerIpAddr.setStatus("current")


class _RcIpRsmltPeerOperStatus_Type(Integer32):
    """Custom type rcIpRsmltPeerOperStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcIpRsmltPeerOperStatus_Type.__name__ = "Integer32"
_RcIpRsmltPeerOperStatus_Object = MibTableColumn
rcIpRsmltPeerOperStatus = _RcIpRsmltPeerOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 8),
    _RcIpRsmltPeerOperStatus_Type()
)
rcIpRsmltPeerOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerOperStatus.setStatus("current")
_RcIpRsmltPeerSmltId_Type = IdList
_RcIpRsmltPeerSmltId_Object = MibTableColumn
rcIpRsmltPeerSmltId = _RcIpRsmltPeerSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 9),
    _RcIpRsmltPeerSmltId_Type()
)
rcIpRsmltPeerSmltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerSmltId.setStatus("current")
_RcIpRsmltPeerSltId_Type = IdList
_RcIpRsmltPeerSltId_Object = MibTableColumn
rcIpRsmltPeerSltId = _RcIpRsmltPeerSltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 10),
    _RcIpRsmltPeerSltId_Type()
)
rcIpRsmltPeerSltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerSltId.setStatus("current")


class _RcIpRsmltPeerVlanId_Type(Integer32):
    """Custom type rcIpRsmltPeerVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4093),
    )


_RcIpRsmltPeerVlanId_Type.__name__ = "Integer32"
_RcIpRsmltPeerVlanId_Object = MibTableColumn
rcIpRsmltPeerVlanId = _RcIpRsmltPeerVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 11),
    _RcIpRsmltPeerVlanId_Type()
)
rcIpRsmltPeerVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerVlanId.setStatus("current")
_RcIpRsmltPeerMacAddr_Type = MacAddress
_RcIpRsmltPeerMacAddr_Object = MibTableColumn
rcIpRsmltPeerMacAddr = _RcIpRsmltPeerMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 12),
    _RcIpRsmltPeerMacAddr_Type()
)
rcIpRsmltPeerMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerMacAddr.setStatus("current")
_RcIpRsmltPeerVrfId_Type = VrfIdentifier
_RcIpRsmltPeerVrfId_Object = MibTableColumn
rcIpRsmltPeerVrfId = _RcIpRsmltPeerVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 13),
    _RcIpRsmltPeerVrfId_Type()
)
rcIpRsmltPeerVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerVrfId.setStatus("current")


class _RcIpRsmltPeerVrfName_Type(SnmpAdminString):
    """Custom type rcIpRsmltPeerVrfName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpRsmltPeerVrfName_Type.__name__ = "SnmpAdminString"
_RcIpRsmltPeerVrfName_Object = MibTableColumn
rcIpRsmltPeerVrfName = _RcIpRsmltPeerVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 3, 1, 14),
    _RcIpRsmltPeerVrfName_Type()
)
rcIpRsmltPeerVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltPeerVrfName.setStatus("current")
_RcIpRsmltEdgePeerTable_Object = MibTable
rcIpRsmltEdgePeerTable = _RcIpRsmltEdgePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 4)
)
if mibBuilder.loadTexts:
    rcIpRsmltEdgePeerTable.setStatus("current")
_RcIpRsmltEdgePeerEntry_Object = MibTableRow
rcIpRsmltEdgePeerEntry = _RcIpRsmltEdgePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 4, 1)
)
rcIpRsmltEdgePeerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRsmltEdgeVlanId"),
)
if mibBuilder.loadTexts:
    rcIpRsmltEdgePeerEntry.setStatus("current")


class _RcIpRsmltEdgeVlanId_Type(Integer32):
    """Custom type rcIpRsmltEdgeVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpRsmltEdgeVlanId_Type.__name__ = "Integer32"
_RcIpRsmltEdgeVlanId_Object = MibTableColumn
rcIpRsmltEdgeVlanId = _RcIpRsmltEdgeVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 4, 1, 1),
    _RcIpRsmltEdgeVlanId_Type()
)
rcIpRsmltEdgeVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpRsmltEdgeVlanId.setStatus("current")
_RcIpRsmltEdgePeerIpAddress_Type = IpAddress
_RcIpRsmltEdgePeerIpAddress_Object = MibTableColumn
rcIpRsmltEdgePeerIpAddress = _RcIpRsmltEdgePeerIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 4, 1, 2),
    _RcIpRsmltEdgePeerIpAddress_Type()
)
rcIpRsmltEdgePeerIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltEdgePeerIpAddress.setStatus("current")
_RcIpRsmltEdgePeerMacAddress_Type = MacAddress
_RcIpRsmltEdgePeerMacAddress_Object = MibTableColumn
rcIpRsmltEdgePeerMacAddress = _RcIpRsmltEdgePeerMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 4, 1, 3),
    _RcIpRsmltEdgePeerMacAddress_Type()
)
rcIpRsmltEdgePeerMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltEdgePeerMacAddress.setStatus("current")
_RcIpRsmltEdgePeerVrfId_Type = VrfIdentifier
_RcIpRsmltEdgePeerVrfId_Object = MibTableColumn
rcIpRsmltEdgePeerVrfId = _RcIpRsmltEdgePeerVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 4, 1, 4),
    _RcIpRsmltEdgePeerVrfId_Type()
)
rcIpRsmltEdgePeerVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltEdgePeerVrfId.setStatus("current")


class _RcIpRsmltEdgePeerVrfName_Type(SnmpAdminString):
    """Custom type rcIpRsmltEdgePeerVrfName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpRsmltEdgePeerVrfName_Type.__name__ = "SnmpAdminString"
_RcIpRsmltEdgePeerVrfName_Object = MibTableColumn
rcIpRsmltEdgePeerVrfName = _RcIpRsmltEdgePeerVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 4, 1, 5),
    _RcIpRsmltEdgePeerVrfName_Type()
)
rcIpRsmltEdgePeerVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRsmltEdgePeerVrfName.setStatus("current")
_RcIpv6RsmltOperTable_Object = MibTable
rcIpv6RsmltOperTable = _RcIpv6RsmltOperTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5)
)
if mibBuilder.loadTexts:
    rcIpv6RsmltOperTable.setStatus("current")
_RcIpv6RsmltOperEntry_Object = MibTableRow
rcIpv6RsmltOperEntry = _RcIpv6RsmltOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1)
)
rcIpv6RsmltOperEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6RsmltOperIfIndex"),
    (0, "RAPID-CITY", "rcIpv6RsmltOperIpv6Addr"),
    (0, "RAPID-CITY", "rcIpv6RsmltOperIpv6PrefixLength"),
)
if mibBuilder.loadTexts:
    rcIpv6RsmltOperEntry.setStatus("current")
_RcIpv6RsmltOperIfIndex_Type = InterfaceIndex
_RcIpv6RsmltOperIfIndex_Object = MibTableColumn
rcIpv6RsmltOperIfIndex = _RcIpv6RsmltOperIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 1),
    _RcIpv6RsmltOperIfIndex_Type()
)
rcIpv6RsmltOperIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperIfIndex.setStatus("current")
_RcIpv6RsmltOperIpv6Addr_Type = Ipv6Address
_RcIpv6RsmltOperIpv6Addr_Object = MibTableColumn
rcIpv6RsmltOperIpv6Addr = _RcIpv6RsmltOperIpv6Addr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 2),
    _RcIpv6RsmltOperIpv6Addr_Type()
)
rcIpv6RsmltOperIpv6Addr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperIpv6Addr.setStatus("current")


class _RcIpv6RsmltOperIpv6PrefixLength_Type(Integer32):
    """Custom type rcIpv6RsmltOperIpv6PrefixLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6RsmltOperIpv6PrefixLength_Type.__name__ = "Integer32"
_RcIpv6RsmltOperIpv6PrefixLength_Object = MibTableColumn
rcIpv6RsmltOperIpv6PrefixLength = _RcIpv6RsmltOperIpv6PrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 3),
    _RcIpv6RsmltOperIpv6PrefixLength_Type()
)
rcIpv6RsmltOperIpv6PrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperIpv6PrefixLength.setStatus("current")


class _RcIpv6RsmltOperAdminStatus_Type(TruthValue):
    """Custom type rcIpv6RsmltOperAdminStatus based on TruthValue"""


_RcIpv6RsmltOperAdminStatus_Object = MibTableColumn
rcIpv6RsmltOperAdminStatus = _RcIpv6RsmltOperAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 4),
    _RcIpv6RsmltOperAdminStatus_Type()
)
rcIpv6RsmltOperAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperAdminStatus.setStatus("current")


class _RcIpv6RsmltOperHoldDownTimer_Type(Integer32):
    """Custom type rcIpv6RsmltOperHoldDownTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpv6RsmltOperHoldDownTimer_Type.__name__ = "Integer32"
_RcIpv6RsmltOperHoldDownTimer_Object = MibTableColumn
rcIpv6RsmltOperHoldDownTimer = _RcIpv6RsmltOperHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 5),
    _RcIpv6RsmltOperHoldDownTimer_Type()
)
rcIpv6RsmltOperHoldDownTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperHoldDownTimer.setStatus("current")


class _RcIpv6RsmltOperHoldDownTimeRemaining_Type(Integer32):
    """Custom type rcIpv6RsmltOperHoldDownTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpv6RsmltOperHoldDownTimeRemaining_Type.__name__ = "Integer32"
_RcIpv6RsmltOperHoldDownTimeRemaining_Object = MibTableColumn
rcIpv6RsmltOperHoldDownTimeRemaining = _RcIpv6RsmltOperHoldDownTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 6),
    _RcIpv6RsmltOperHoldDownTimeRemaining_Type()
)
rcIpv6RsmltOperHoldDownTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperHoldDownTimeRemaining.setStatus("current")


class _RcIpv6RsmltOperHoldUpTimer_Type(Integer32):
    """Custom type rcIpv6RsmltOperHoldUpTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpv6RsmltOperHoldUpTimer_Type.__name__ = "Integer32"
_RcIpv6RsmltOperHoldUpTimer_Object = MibTableColumn
rcIpv6RsmltOperHoldUpTimer = _RcIpv6RsmltOperHoldUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 7),
    _RcIpv6RsmltOperHoldUpTimer_Type()
)
rcIpv6RsmltOperHoldUpTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperHoldUpTimer.setStatus("current")


class _RcIpv6RsmltOperHoldUpTimeRemaining_Type(Integer32):
    """Custom type rcIpv6RsmltOperHoldUpTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpv6RsmltOperHoldUpTimeRemaining_Type.__name__ = "Integer32"
_RcIpv6RsmltOperHoldUpTimeRemaining_Object = MibTableColumn
rcIpv6RsmltOperHoldUpTimeRemaining = _RcIpv6RsmltOperHoldUpTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 8),
    _RcIpv6RsmltOperHoldUpTimeRemaining_Type()
)
rcIpv6RsmltOperHoldUpTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperHoldUpTimeRemaining.setStatus("current")


class _RcIpv6RsmltOperOperStatus_Type(Integer32):
    """Custom type rcIpv6RsmltOperOperStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcIpv6RsmltOperOperStatus_Type.__name__ = "Integer32"
_RcIpv6RsmltOperOperStatus_Object = MibTableColumn
rcIpv6RsmltOperOperStatus = _RcIpv6RsmltOperOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 9),
    _RcIpv6RsmltOperOperStatus_Type()
)
rcIpv6RsmltOperOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperOperStatus.setStatus("current")
_RcIpv6RsmltOperSmltId_Type = IdList
_RcIpv6RsmltOperSmltId_Object = MibTableColumn
rcIpv6RsmltOperSmltId = _RcIpv6RsmltOperSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 10),
    _RcIpv6RsmltOperSmltId_Type()
)
rcIpv6RsmltOperSmltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperSmltId.setStatus("current")
_RcIpv6RsmltOperSltId_Type = IdList
_RcIpv6RsmltOperSltId_Object = MibTableColumn
rcIpv6RsmltOperSltId = _RcIpv6RsmltOperSltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 11),
    _RcIpv6RsmltOperSltId_Type()
)
rcIpv6RsmltOperSltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperSltId.setStatus("current")


class _RcIpv6RsmltOperVlanId_Type(Integer32):
    """Custom type rcIpv6RsmltOperVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4093),
    )


_RcIpv6RsmltOperVlanId_Type.__name__ = "Integer32"
_RcIpv6RsmltOperVlanId_Object = MibTableColumn
rcIpv6RsmltOperVlanId = _RcIpv6RsmltOperVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 12),
    _RcIpv6RsmltOperVlanId_Type()
)
rcIpv6RsmltOperVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperVlanId.setStatus("current")
_RcIpv6RsmltOperMacAddr_Type = MacAddress
_RcIpv6RsmltOperMacAddr_Object = MibTableColumn
rcIpv6RsmltOperMacAddr = _RcIpv6RsmltOperMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 13),
    _RcIpv6RsmltOperMacAddr_Type()
)
rcIpv6RsmltOperMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperMacAddr.setStatus("current")
_RcIpv6RsmltOperVrfId_Type = VrfIdentifier
_RcIpv6RsmltOperVrfId_Object = MibTableColumn
rcIpv6RsmltOperVrfId = _RcIpv6RsmltOperVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 14),
    _RcIpv6RsmltOperVrfId_Type()
)
rcIpv6RsmltOperVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperVrfId.setStatus("current")


class _RcIpv6RsmltOperVrfName_Type(SnmpAdminString):
    """Custom type rcIpv6RsmltOperVrfName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpv6RsmltOperVrfName_Type.__name__ = "SnmpAdminString"
_RcIpv6RsmltOperVrfName_Object = MibTableColumn
rcIpv6RsmltOperVrfName = _RcIpv6RsmltOperVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 5, 1, 15),
    _RcIpv6RsmltOperVrfName_Type()
)
rcIpv6RsmltOperVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltOperVrfName.setStatus("current")
_RcIpv6RsmltPeerTable_Object = MibTable
rcIpv6RsmltPeerTable = _RcIpv6RsmltPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6)
)
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerTable.setStatus("current")
_RcIpv6RsmltPeerEntry_Object = MibTableRow
rcIpv6RsmltPeerEntry = _RcIpv6RsmltPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1)
)
rcIpv6RsmltPeerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6RsmltPeerIfIndex"),
    (0, "RAPID-CITY", "rcIpv6RsmltPeerIpv6Addr"),
    (0, "RAPID-CITY", "rcIpv6RsmltPeerIpv6PrefixLength"),
)
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerEntry.setStatus("current")
_RcIpv6RsmltPeerIfIndex_Type = InterfaceIndex
_RcIpv6RsmltPeerIfIndex_Object = MibTableColumn
rcIpv6RsmltPeerIfIndex = _RcIpv6RsmltPeerIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 1),
    _RcIpv6RsmltPeerIfIndex_Type()
)
rcIpv6RsmltPeerIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerIfIndex.setStatus("current")
_RcIpv6RsmltPeerIpv6Addr_Type = Ipv6Address
_RcIpv6RsmltPeerIpv6Addr_Object = MibTableColumn
rcIpv6RsmltPeerIpv6Addr = _RcIpv6RsmltPeerIpv6Addr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 2),
    _RcIpv6RsmltPeerIpv6Addr_Type()
)
rcIpv6RsmltPeerIpv6Addr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerIpv6Addr.setStatus("current")


class _RcIpv6RsmltPeerIpv6PrefixLength_Type(Integer32):
    """Custom type rcIpv6RsmltPeerIpv6PrefixLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6RsmltPeerIpv6PrefixLength_Type.__name__ = "Integer32"
_RcIpv6RsmltPeerIpv6PrefixLength_Object = MibTableColumn
rcIpv6RsmltPeerIpv6PrefixLength = _RcIpv6RsmltPeerIpv6PrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 3),
    _RcIpv6RsmltPeerIpv6PrefixLength_Type()
)
rcIpv6RsmltPeerIpv6PrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerIpv6PrefixLength.setStatus("current")
_RcIpv6RsmltPeerAdminStatus_Type = TruthValue
_RcIpv6RsmltPeerAdminStatus_Object = MibTableColumn
rcIpv6RsmltPeerAdminStatus = _RcIpv6RsmltPeerAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 4),
    _RcIpv6RsmltPeerAdminStatus_Type()
)
rcIpv6RsmltPeerAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerAdminStatus.setStatus("current")


class _RcIpv6RsmltPeerHoldDownTimer_Type(Integer32):
    """Custom type rcIpv6RsmltPeerHoldDownTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpv6RsmltPeerHoldDownTimer_Type.__name__ = "Integer32"
_RcIpv6RsmltPeerHoldDownTimer_Object = MibTableColumn
rcIpv6RsmltPeerHoldDownTimer = _RcIpv6RsmltPeerHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 5),
    _RcIpv6RsmltPeerHoldDownTimer_Type()
)
rcIpv6RsmltPeerHoldDownTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerHoldDownTimer.setStatus("current")


class _RcIpv6RsmltPeerHoldDownTimeRemaining_Type(Integer32):
    """Custom type rcIpv6RsmltPeerHoldDownTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpv6RsmltPeerHoldDownTimeRemaining_Type.__name__ = "Integer32"
_RcIpv6RsmltPeerHoldDownTimeRemaining_Object = MibTableColumn
rcIpv6RsmltPeerHoldDownTimeRemaining = _RcIpv6RsmltPeerHoldDownTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 6),
    _RcIpv6RsmltPeerHoldDownTimeRemaining_Type()
)
rcIpv6RsmltPeerHoldDownTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerHoldDownTimeRemaining.setStatus("current")


class _RcIpv6RsmltPeerHoldUpTimer_Type(Integer32):
    """Custom type rcIpv6RsmltPeerHoldUpTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpv6RsmltPeerHoldUpTimer_Type.__name__ = "Integer32"
_RcIpv6RsmltPeerHoldUpTimer_Object = MibTableColumn
rcIpv6RsmltPeerHoldUpTimer = _RcIpv6RsmltPeerHoldUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 7),
    _RcIpv6RsmltPeerHoldUpTimer_Type()
)
rcIpv6RsmltPeerHoldUpTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerHoldUpTimer.setStatus("current")


class _RcIpv6RsmltPeerHoldUpTimeRemaining_Type(Integer32):
    """Custom type rcIpv6RsmltPeerHoldUpTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpv6RsmltPeerHoldUpTimeRemaining_Type.__name__ = "Integer32"
_RcIpv6RsmltPeerHoldUpTimeRemaining_Object = MibTableColumn
rcIpv6RsmltPeerHoldUpTimeRemaining = _RcIpv6RsmltPeerHoldUpTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 8),
    _RcIpv6RsmltPeerHoldUpTimeRemaining_Type()
)
rcIpv6RsmltPeerHoldUpTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerHoldUpTimeRemaining.setStatus("current")


class _RcIpv6RsmltPeerOperStatus_Type(Integer32):
    """Custom type rcIpv6RsmltPeerOperStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcIpv6RsmltPeerOperStatus_Type.__name__ = "Integer32"
_RcIpv6RsmltPeerOperStatus_Object = MibTableColumn
rcIpv6RsmltPeerOperStatus = _RcIpv6RsmltPeerOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 9),
    _RcIpv6RsmltPeerOperStatus_Type()
)
rcIpv6RsmltPeerOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerOperStatus.setStatus("current")
_RcIpv6RsmltPeerSmltId_Type = IdList
_RcIpv6RsmltPeerSmltId_Object = MibTableColumn
rcIpv6RsmltPeerSmltId = _RcIpv6RsmltPeerSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 10),
    _RcIpv6RsmltPeerSmltId_Type()
)
rcIpv6RsmltPeerSmltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerSmltId.setStatus("current")
_RcIpv6RsmltPeerSltId_Type = IdList
_RcIpv6RsmltPeerSltId_Object = MibTableColumn
rcIpv6RsmltPeerSltId = _RcIpv6RsmltPeerSltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 11),
    _RcIpv6RsmltPeerSltId_Type()
)
rcIpv6RsmltPeerSltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerSltId.setStatus("current")


class _RcIpv6RsmltPeerVlanId_Type(Integer32):
    """Custom type rcIpv6RsmltPeerVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4093),
    )


_RcIpv6RsmltPeerVlanId_Type.__name__ = "Integer32"
_RcIpv6RsmltPeerVlanId_Object = MibTableColumn
rcIpv6RsmltPeerVlanId = _RcIpv6RsmltPeerVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 12),
    _RcIpv6RsmltPeerVlanId_Type()
)
rcIpv6RsmltPeerVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerVlanId.setStatus("current")
_RcIpv6RsmltPeerMacAddr_Type = MacAddress
_RcIpv6RsmltPeerMacAddr_Object = MibTableColumn
rcIpv6RsmltPeerMacAddr = _RcIpv6RsmltPeerMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 13),
    _RcIpv6RsmltPeerMacAddr_Type()
)
rcIpv6RsmltPeerMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerMacAddr.setStatus("current")
_RcIpv6RsmltPeerVrfId_Type = VrfIdentifier
_RcIpv6RsmltPeerVrfId_Object = MibTableColumn
rcIpv6RsmltPeerVrfId = _RcIpv6RsmltPeerVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 14),
    _RcIpv6RsmltPeerVrfId_Type()
)
rcIpv6RsmltPeerVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerVrfId.setStatus("current")


class _RcIpv6RsmltPeerVrfName_Type(SnmpAdminString):
    """Custom type rcIpv6RsmltPeerVrfName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpv6RsmltPeerVrfName_Type.__name__ = "SnmpAdminString"
_RcIpv6RsmltPeerVrfName_Object = MibTableColumn
rcIpv6RsmltPeerVrfName = _RcIpv6RsmltPeerVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 6, 1, 15),
    _RcIpv6RsmltPeerVrfName_Type()
)
rcIpv6RsmltPeerVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltPeerVrfName.setStatus("current")
_RcIpv6RsmltEdgePeerTable_Object = MibTable
rcIpv6RsmltEdgePeerTable = _RcIpv6RsmltEdgePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7)
)
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerTable.setStatus("current")
_RcIpv6RsmltEdgePeerEntry_Object = MibTableRow
rcIpv6RsmltEdgePeerEntry = _RcIpv6RsmltEdgePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1)
)
rcIpv6RsmltEdgePeerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6RsmltEdgePeerVlanId"),
    (0, "RAPID-CITY", "rcIpv6RsmltEdgePeerIpv6Address"),
    (0, "RAPID-CITY", "rcIpv6RsmltEdgePeerIpv6PrefixLength"),
)
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerEntry.setStatus("current")


class _RcIpv6RsmltEdgePeerVlanId_Type(Integer32):
    """Custom type rcIpv6RsmltEdgePeerVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpv6RsmltEdgePeerVlanId_Type.__name__ = "Integer32"
_RcIpv6RsmltEdgePeerVlanId_Object = MibTableColumn
rcIpv6RsmltEdgePeerVlanId = _RcIpv6RsmltEdgePeerVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 1),
    _RcIpv6RsmltEdgePeerVlanId_Type()
)
rcIpv6RsmltEdgePeerVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerVlanId.setStatus("current")
_RcIpv6RsmltEdgePeerIpv6Address_Type = Ipv6Address
_RcIpv6RsmltEdgePeerIpv6Address_Object = MibTableColumn
rcIpv6RsmltEdgePeerIpv6Address = _RcIpv6RsmltEdgePeerIpv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 2),
    _RcIpv6RsmltEdgePeerIpv6Address_Type()
)
rcIpv6RsmltEdgePeerIpv6Address.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerIpv6Address.setStatus("current")


class _RcIpv6RsmltEdgePeerIpv6PrefixLength_Type(Integer32):
    """Custom type rcIpv6RsmltEdgePeerIpv6PrefixLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6RsmltEdgePeerIpv6PrefixLength_Type.__name__ = "Integer32"
_RcIpv6RsmltEdgePeerIpv6PrefixLength_Object = MibTableColumn
rcIpv6RsmltEdgePeerIpv6PrefixLength = _RcIpv6RsmltEdgePeerIpv6PrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 3),
    _RcIpv6RsmltEdgePeerIpv6PrefixLength_Type()
)
rcIpv6RsmltEdgePeerIpv6PrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerIpv6PrefixLength.setStatus("current")
_RcIpv6RsmltEdgePeerMacAddress_Type = MacAddress
_RcIpv6RsmltEdgePeerMacAddress_Object = MibTableColumn
rcIpv6RsmltEdgePeerMacAddress = _RcIpv6RsmltEdgePeerMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 4),
    _RcIpv6RsmltEdgePeerMacAddress_Type()
)
rcIpv6RsmltEdgePeerMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerMacAddress.setStatus("current")
_RcIpv6RsmltEdgePeerVrfId_Type = VrfIdentifier
_RcIpv6RsmltEdgePeerVrfId_Object = MibTableColumn
rcIpv6RsmltEdgePeerVrfId = _RcIpv6RsmltEdgePeerVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 5),
    _RcIpv6RsmltEdgePeerVrfId_Type()
)
rcIpv6RsmltEdgePeerVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerVrfId.setStatus("current")


class _RcIpv6RsmltEdgePeerVrfName_Type(SnmpAdminString):
    """Custom type rcIpv6RsmltEdgePeerVrfName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpv6RsmltEdgePeerVrfName_Type.__name__ = "SnmpAdminString"
_RcIpv6RsmltEdgePeerVrfName_Object = MibTableColumn
rcIpv6RsmltEdgePeerVrfName = _RcIpv6RsmltEdgePeerVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 6),
    _RcIpv6RsmltEdgePeerVrfName_Type()
)
rcIpv6RsmltEdgePeerVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerVrfName.setStatus("current")
_RcIpv6RsmltEdgePeerIsRaPrefix_Type = TruthValue
_RcIpv6RsmltEdgePeerIsRaPrefix_Object = MibTableColumn
rcIpv6RsmltEdgePeerIsRaPrefix = _RcIpv6RsmltEdgePeerIsRaPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 7),
    _RcIpv6RsmltEdgePeerIsRaPrefix_Type()
)
rcIpv6RsmltEdgePeerIsRaPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerIsRaPrefix.setStatus("current")


class _RcIpv6RsmltEdgePeerConfType_Type(Integer32):
    """Custom type rcIpv6RsmltEdgePeerConfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6RsmltEdgePeerConfType_Type.__name__ = "Integer32"
_RcIpv6RsmltEdgePeerConfType_Object = MibTableColumn
rcIpv6RsmltEdgePeerConfType = _RcIpv6RsmltEdgePeerConfType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 8),
    _RcIpv6RsmltEdgePeerConfType_Type()
)
rcIpv6RsmltEdgePeerConfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerConfType.setStatus("current")
_RcIpv6RsmltEdgePeerNoAdvertise_Type = TruthValue
_RcIpv6RsmltEdgePeerNoAdvertise_Object = MibTableColumn
rcIpv6RsmltEdgePeerNoAdvertise = _RcIpv6RsmltEdgePeerNoAdvertise_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 9),
    _RcIpv6RsmltEdgePeerNoAdvertise_Type()
)
rcIpv6RsmltEdgePeerNoAdvertise.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerNoAdvertise.setStatus("current")
_RcIpv6RsmltEdgePeerOspf6Advertise_Type = TruthValue
_RcIpv6RsmltEdgePeerOspf6Advertise_Object = MibTableColumn
rcIpv6RsmltEdgePeerOspf6Advertise = _RcIpv6RsmltEdgePeerOspf6Advertise_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 10),
    _RcIpv6RsmltEdgePeerOspf6Advertise_Type()
)
rcIpv6RsmltEdgePeerOspf6Advertise.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerOspf6Advertise.setStatus("current")
_RcIpv6RsmltEdgePeerPrefCandidate_Type = TruthValue
_RcIpv6RsmltEdgePeerPrefCandidate_Object = MibTableColumn
rcIpv6RsmltEdgePeerPrefCandidate = _RcIpv6RsmltEdgePeerPrefCandidate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 11),
    _RcIpv6RsmltEdgePeerPrefCandidate_Type()
)
rcIpv6RsmltEdgePeerPrefCandidate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerPrefCandidate.setStatus("current")
_RcIpv6RsmltEdgePeerPfxValidLife_Type = Integer32
_RcIpv6RsmltEdgePeerPfxValidLife_Object = MibTableColumn
rcIpv6RsmltEdgePeerPfxValidLife = _RcIpv6RsmltEdgePeerPfxValidLife_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 12),
    _RcIpv6RsmltEdgePeerPfxValidLife_Type()
)
rcIpv6RsmltEdgePeerPfxValidLife.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerPfxValidLife.setStatus("current")
_RcIpv6RsmltEdgePeerPfxPrefLife_Type = Integer32
_RcIpv6RsmltEdgePeerPfxPrefLife_Object = MibTableColumn
rcIpv6RsmltEdgePeerPfxPrefLife = _RcIpv6RsmltEdgePeerPfxPrefLife_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 13),
    _RcIpv6RsmltEdgePeerPfxPrefLife_Type()
)
rcIpv6RsmltEdgePeerPfxPrefLife.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerPfxPrefLife.setStatus("current")
_RcIpv6RsmltEdgePeerPfxOnLinkFlag_Type = TruthValue
_RcIpv6RsmltEdgePeerPfxOnLinkFlag_Object = MibTableColumn
rcIpv6RsmltEdgePeerPfxOnLinkFlag = _RcIpv6RsmltEdgePeerPfxOnLinkFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 14),
    _RcIpv6RsmltEdgePeerPfxOnLinkFlag_Type()
)
rcIpv6RsmltEdgePeerPfxOnLinkFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerPfxOnLinkFlag.setStatus("current")
_RcIpv6RsmltEdgePeerPfxAutoFlag_Type = TruthValue
_RcIpv6RsmltEdgePeerPfxAutoFlag_Object = MibTableColumn
rcIpv6RsmltEdgePeerPfxAutoFlag = _RcIpv6RsmltEdgePeerPfxAutoFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 26, 7, 1, 15),
    _RcIpv6RsmltEdgePeerPfxAutoFlag_Type()
)
rcIpv6RsmltEdgePeerPfxAutoFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RsmltEdgePeerPfxAutoFlag.setStatus("current")
_RcIpVpn_ObjectIdentity = ObjectIdentity
rcIpVpn = _RcIpVpn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27)
)
_RcIpVpnRouteDistinguisherTableSize_Type = Integer32
_RcIpVpnRouteDistinguisherTableSize_Object = MibScalar
rcIpVpnRouteDistinguisherTableSize = _RcIpVpnRouteDistinguisherTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 1),
    _RcIpVpnRouteDistinguisherTableSize_Type()
)
rcIpVpnRouteDistinguisherTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpVpnRouteDistinguisherTableSize.setStatus("current")
_RcIpVpnRouteDistinguisherTable_Object = MibTable
rcIpVpnRouteDistinguisherTable = _RcIpVpnRouteDistinguisherTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 2)
)
if mibBuilder.loadTexts:
    rcIpVpnRouteDistinguisherTable.setStatus("current")
_RcIpVpnRouteDistinguisherEntry_Object = MibTableRow
rcIpVpnRouteDistinguisherEntry = _RcIpVpnRouteDistinguisherEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 2, 1)
)
rcIpVpnRouteDistinguisherEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpVpnVrfId"),
)
if mibBuilder.loadTexts:
    rcIpVpnRouteDistinguisherEntry.setStatus("current")
_RcIpVpnVrfId_Type = VrfIdentifier
_RcIpVpnVrfId_Object = MibTableColumn
rcIpVpnVrfId = _RcIpVpnVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 2, 1, 1),
    _RcIpVpnVrfId_Type()
)
rcIpVpnVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpVpnVrfId.setStatus("current")


class _RcIpVpnRouteDistinguisherType_Type(Integer32):
    """Custom type rcIpVpnRouteDistinguisherType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asnum", 1),
          ("ipaddr", 2),
          ("none", 0))
    )


_RcIpVpnRouteDistinguisherType_Type.__name__ = "Integer32"
_RcIpVpnRouteDistinguisherType_Object = MibTableColumn
rcIpVpnRouteDistinguisherType = _RcIpVpnRouteDistinguisherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 2, 1, 2),
    _RcIpVpnRouteDistinguisherType_Type()
)
rcIpVpnRouteDistinguisherType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpVpnRouteDistinguisherType.setStatus("current")
_RcIpVpnRouteDistinguisherAddress_Type = IpAddress
_RcIpVpnRouteDistinguisherAddress_Object = MibTableColumn
rcIpVpnRouteDistinguisherAddress = _RcIpVpnRouteDistinguisherAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 2, 1, 3),
    _RcIpVpnRouteDistinguisherAddress_Type()
)
rcIpVpnRouteDistinguisherAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpVpnRouteDistinguisherAddress.setStatus("current")


class _RcIpVpnRouteDistinguisherAsNumber_Type(Integer32):
    """Custom type rcIpVpnRouteDistinguisherAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpVpnRouteDistinguisherAsNumber_Type.__name__ = "Integer32"
_RcIpVpnRouteDistinguisherAsNumber_Object = MibTableColumn
rcIpVpnRouteDistinguisherAsNumber = _RcIpVpnRouteDistinguisherAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 2, 1, 4),
    _RcIpVpnRouteDistinguisherAsNumber_Type()
)
rcIpVpnRouteDistinguisherAsNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpVpnRouteDistinguisherAsNumber.setStatus("current")


class _RcIpVpnRouteDistinguisherAssignedNum_Type(Unsigned32):
    """Custom type rcIpVpnRouteDistinguisherAssignedNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpVpnRouteDistinguisherAssignedNum_Type.__name__ = "Unsigned32"
_RcIpVpnRouteDistinguisherAssignedNum_Object = MibTableColumn
rcIpVpnRouteDistinguisherAssignedNum = _RcIpVpnRouteDistinguisherAssignedNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 2, 1, 5),
    _RcIpVpnRouteDistinguisherAssignedNum_Type()
)
rcIpVpnRouteDistinguisherAssignedNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpVpnRouteDistinguisherAssignedNum.setStatus("current")
_RcIpVpnRouteDistinguisherRowStatus_Type = RowStatus
_RcIpVpnRouteDistinguisherRowStatus_Object = MibTableColumn
rcIpVpnRouteDistinguisherRowStatus = _RcIpVpnRouteDistinguisherRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 2, 1, 6),
    _RcIpVpnRouteDistinguisherRowStatus_Type()
)
rcIpVpnRouteDistinguisherRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpVpnRouteDistinguisherRowStatus.setStatus("current")
_RcIpVpnRouteTargetTableSize_Type = Integer32
_RcIpVpnRouteTargetTableSize_Object = MibScalar
rcIpVpnRouteTargetTableSize = _RcIpVpnRouteTargetTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 3),
    _RcIpVpnRouteTargetTableSize_Type()
)
rcIpVpnRouteTargetTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetTableSize.setStatus("current")
_RcIpVpnRouteTargetTable_Object = MibTable
rcIpVpnRouteTargetTable = _RcIpVpnRouteTargetTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 4)
)
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetTable.setStatus("current")
_RcIpVpnRouteTargetEntry_Object = MibTableRow
rcIpVpnRouteTargetEntry = _RcIpVpnRouteTargetEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 4, 1)
)
rcIpVpnRouteTargetEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpVpnRouteTargetIndex"),
)
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetEntry.setStatus("current")


class _RcIpVpnRouteTargetIndex_Type(Integer32):
    """Custom type rcIpVpnRouteTargetIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000),
    )


_RcIpVpnRouteTargetIndex_Type.__name__ = "Integer32"
_RcIpVpnRouteTargetIndex_Object = MibTableColumn
rcIpVpnRouteTargetIndex = _RcIpVpnRouteTargetIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 4, 1, 1),
    _RcIpVpnRouteTargetIndex_Type()
)
rcIpVpnRouteTargetIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetIndex.setStatus("current")


class _RcIpVpnRouteTargetType_Type(Integer32):
    """Custom type rcIpVpnRouteTargetType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asnum", 1),
          ("ipaddr", 2),
          ("none", 0))
    )


_RcIpVpnRouteTargetType_Type.__name__ = "Integer32"
_RcIpVpnRouteTargetType_Object = MibTableColumn
rcIpVpnRouteTargetType = _RcIpVpnRouteTargetType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 4, 1, 2),
    _RcIpVpnRouteTargetType_Type()
)
rcIpVpnRouteTargetType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetType.setStatus("current")
_RcIpVpnRouteTargetIpAddress_Type = IpAddress
_RcIpVpnRouteTargetIpAddress_Object = MibTableColumn
rcIpVpnRouteTargetIpAddress = _RcIpVpnRouteTargetIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 4, 1, 3),
    _RcIpVpnRouteTargetIpAddress_Type()
)
rcIpVpnRouteTargetIpAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetIpAddress.setStatus("current")


class _RcIpVpnRouteTargetAsNumber_Type(Integer32):
    """Custom type rcIpVpnRouteTargetAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpVpnRouteTargetAsNumber_Type.__name__ = "Integer32"
_RcIpVpnRouteTargetAsNumber_Object = MibTableColumn
rcIpVpnRouteTargetAsNumber = _RcIpVpnRouteTargetAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 4, 1, 4),
    _RcIpVpnRouteTargetAsNumber_Type()
)
rcIpVpnRouteTargetAsNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetAsNumber.setStatus("current")


class _RcIpVpnRouteTargetAssignedNum_Type(Unsigned32):
    """Custom type rcIpVpnRouteTargetAssignedNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpVpnRouteTargetAssignedNum_Type.__name__ = "Unsigned32"
_RcIpVpnRouteTargetAssignedNum_Object = MibTableColumn
rcIpVpnRouteTargetAssignedNum = _RcIpVpnRouteTargetAssignedNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 4, 1, 5),
    _RcIpVpnRouteTargetAssignedNum_Type()
)
rcIpVpnRouteTargetAssignedNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetAssignedNum.setStatus("current")
_RcIpVpnRouteTargetRowStatus_Type = RowStatus
_RcIpVpnRouteTargetRowStatus_Object = MibTableColumn
rcIpVpnRouteTargetRowStatus = _RcIpVpnRouteTargetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 27, 4, 1, 6),
    _RcIpVpnRouteTargetRowStatus_Type()
)
rcIpVpnRouteTargetRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpVpnRouteTargetRowStatus.setStatus("current")
_RcIpGenPolicy_ObjectIdentity = ObjectIdentity
rcIpGenPolicy = _RcIpGenPolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100)
)
_RcIpAsPathAccessListTableSize_Type = Integer32
_RcIpAsPathAccessListTableSize_Object = MibScalar
rcIpAsPathAccessListTableSize = _RcIpAsPathAccessListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 1),
    _RcIpAsPathAccessListTableSize_Type()
)
rcIpAsPathAccessListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAsPathAccessListTableSize.setStatus("current")
_RcIpAsPathAccessListTable_Object = MibTable
rcIpAsPathAccessListTable = _RcIpAsPathAccessListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 2)
)
if mibBuilder.loadTexts:
    rcIpAsPathAccessListTable.setStatus("current")
_RcIpAsPathAccessListEntry_Object = MibTableRow
rcIpAsPathAccessListEntry = _RcIpAsPathAccessListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 2, 1)
)
rcIpAsPathAccessListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpAsPathAccessListId"),
    (0, "RAPID-CITY", "rcIpAsPathAccessListMemberId"),
)
if mibBuilder.loadTexts:
    rcIpAsPathAccessListEntry.setStatus("current")


class _RcIpAsPathAccessListId_Type(Integer32):
    """Custom type rcIpAsPathAccessListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_RcIpAsPathAccessListId_Type.__name__ = "Integer32"
_RcIpAsPathAccessListId_Object = MibTableColumn
rcIpAsPathAccessListId = _RcIpAsPathAccessListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 2, 1, 1),
    _RcIpAsPathAccessListId_Type()
)
rcIpAsPathAccessListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAsPathAccessListId.setStatus("current")


class _RcIpAsPathAccessListMemberId_Type(Integer32):
    """Custom type rcIpAsPathAccessListMemberId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpAsPathAccessListMemberId_Type.__name__ = "Integer32"
_RcIpAsPathAccessListMemberId_Object = MibTableColumn
rcIpAsPathAccessListMemberId = _RcIpAsPathAccessListMemberId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 2, 1, 2),
    _RcIpAsPathAccessListMemberId_Type()
)
rcIpAsPathAccessListMemberId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAsPathAccessListMemberId.setStatus("current")


class _RcIpAsPathAccessListMode_Type(Integer32):
    """Custom type rcIpAsPathAccessListMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 2),
          ("permit", 1))
    )


_RcIpAsPathAccessListMode_Type.__name__ = "Integer32"
_RcIpAsPathAccessListMode_Object = MibTableColumn
rcIpAsPathAccessListMode = _RcIpAsPathAccessListMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 2, 1, 3),
    _RcIpAsPathAccessListMode_Type()
)
rcIpAsPathAccessListMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAsPathAccessListMode.setStatus("current")


class _RcIpAsPathAccessListAsRegularExpression_Type(OctetString):
    """Custom type rcIpAsPathAccessListAsRegularExpression based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcIpAsPathAccessListAsRegularExpression_Type.__name__ = "OctetString"
_RcIpAsPathAccessListAsRegularExpression_Object = MibTableColumn
rcIpAsPathAccessListAsRegularExpression = _RcIpAsPathAccessListAsRegularExpression_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 2, 1, 4),
    _RcIpAsPathAccessListAsRegularExpression_Type()
)
rcIpAsPathAccessListAsRegularExpression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAsPathAccessListAsRegularExpression.setStatus("current")
_RcIpAsPathAccessListRowStatus_Type = RowStatus
_RcIpAsPathAccessListRowStatus_Object = MibTableColumn
rcIpAsPathAccessListRowStatus = _RcIpAsPathAccessListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 2, 1, 5),
    _RcIpAsPathAccessListRowStatus_Type()
)
rcIpAsPathAccessListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAsPathAccessListRowStatus.setStatus("current")
_RcIpCommunityAccessListTableSize_Type = Integer32
_RcIpCommunityAccessListTableSize_Object = MibScalar
rcIpCommunityAccessListTableSize = _RcIpCommunityAccessListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 3),
    _RcIpCommunityAccessListTableSize_Type()
)
rcIpCommunityAccessListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpCommunityAccessListTableSize.setStatus("current")
_RcIpCommunityAccessListTable_Object = MibTable
rcIpCommunityAccessListTable = _RcIpCommunityAccessListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 4)
)
if mibBuilder.loadTexts:
    rcIpCommunityAccessListTable.setStatus("current")
_RcIpCommunityAccessListEntry_Object = MibTableRow
rcIpCommunityAccessListEntry = _RcIpCommunityAccessListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 4, 1)
)
rcIpCommunityAccessListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpCommunityAccessListId"),
    (0, "RAPID-CITY", "rcIpCommunityAccessListMemberId"),
)
if mibBuilder.loadTexts:
    rcIpCommunityAccessListEntry.setStatus("current")


class _RcIpCommunityAccessListId_Type(Integer32):
    """Custom type rcIpCommunityAccessListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_RcIpCommunityAccessListId_Type.__name__ = "Integer32"
_RcIpCommunityAccessListId_Object = MibTableColumn
rcIpCommunityAccessListId = _RcIpCommunityAccessListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 4, 1, 1),
    _RcIpCommunityAccessListId_Type()
)
rcIpCommunityAccessListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpCommunityAccessListId.setStatus("current")


class _RcIpCommunityAccessListMemberId_Type(Integer32):
    """Custom type rcIpCommunityAccessListMemberId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpCommunityAccessListMemberId_Type.__name__ = "Integer32"
_RcIpCommunityAccessListMemberId_Object = MibTableColumn
rcIpCommunityAccessListMemberId = _RcIpCommunityAccessListMemberId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 4, 1, 2),
    _RcIpCommunityAccessListMemberId_Type()
)
rcIpCommunityAccessListMemberId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpCommunityAccessListMemberId.setStatus("current")


class _RcIpCommunityAccessListMode_Type(Integer32):
    """Custom type rcIpCommunityAccessListMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 2),
          ("permit", 1))
    )


_RcIpCommunityAccessListMode_Type.__name__ = "Integer32"
_RcIpCommunityAccessListMode_Object = MibTableColumn
rcIpCommunityAccessListMode = _RcIpCommunityAccessListMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 4, 1, 3),
    _RcIpCommunityAccessListMode_Type()
)
rcIpCommunityAccessListMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpCommunityAccessListMode.setStatus("current")


class _RcIpCommunityAccessListCommunity_Type(OctetString):
    """Custom type rcIpCommunityAccessListCommunity based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcIpCommunityAccessListCommunity_Type.__name__ = "OctetString"
_RcIpCommunityAccessListCommunity_Object = MibTableColumn
rcIpCommunityAccessListCommunity = _RcIpCommunityAccessListCommunity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 4, 1, 4),
    _RcIpCommunityAccessListCommunity_Type()
)
rcIpCommunityAccessListCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpCommunityAccessListCommunity.setStatus("current")
_RcIpCommunityAccessListRowStatus_Type = RowStatus
_RcIpCommunityAccessListRowStatus_Object = MibTableColumn
rcIpCommunityAccessListRowStatus = _RcIpCommunityAccessListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 4, 1, 5),
    _RcIpCommunityAccessListRowStatus_Type()
)
rcIpCommunityAccessListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpCommunityAccessListRowStatus.setStatus("current")
_RcIpAccessListTableSize_Type = Integer32
_RcIpAccessListTableSize_Object = MibScalar
rcIpAccessListTableSize = _RcIpAccessListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 5),
    _RcIpAccessListTableSize_Type()
)
rcIpAccessListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAccessListTableSize.setStatus("current")
_RcIpAccessListTable_Object = MibTable
rcIpAccessListTable = _RcIpAccessListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 6)
)
if mibBuilder.loadTexts:
    rcIpAccessListTable.setStatus("current")
_RcIpAccessListEntry_Object = MibTableRow
rcIpAccessListEntry = _RcIpAccessListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 6, 1)
)
rcIpAccessListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpAccessListId"),
    (0, "RAPID-CITY", "rcIpAccessListMode"),
    (0, "RAPID-CITY", "rcIpAccessListNetwork"),
    (0, "RAPID-CITY", "rcIpAccessListNetworkMask"),
)
if mibBuilder.loadTexts:
    rcIpAccessListEntry.setStatus("current")


class _RcIpAccessListId_Type(Integer32):
    """Custom type rcIpAccessListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_RcIpAccessListId_Type.__name__ = "Integer32"
_RcIpAccessListId_Object = MibTableColumn
rcIpAccessListId = _RcIpAccessListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 6, 1, 1),
    _RcIpAccessListId_Type()
)
rcIpAccessListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAccessListId.setStatus("current")


class _RcIpAccessListMode_Type(Integer32):
    """Custom type rcIpAccessListMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 2),
          ("permit", 1))
    )


_RcIpAccessListMode_Type.__name__ = "Integer32"
_RcIpAccessListMode_Object = MibTableColumn
rcIpAccessListMode = _RcIpAccessListMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 6, 1, 2),
    _RcIpAccessListMode_Type()
)
rcIpAccessListMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpAccessListMode.setStatus("current")
_RcIpAccessListNetwork_Type = IpAddress
_RcIpAccessListNetwork_Object = MibTableColumn
rcIpAccessListNetwork = _RcIpAccessListNetwork_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 6, 1, 3),
    _RcIpAccessListNetwork_Type()
)
rcIpAccessListNetwork.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAccessListNetwork.setStatus("current")
_RcIpAccessListNetworkMask_Type = IpAddress
_RcIpAccessListNetworkMask_Object = MibTableColumn
rcIpAccessListNetworkMask = _RcIpAccessListNetworkMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 6, 1, 4),
    _RcIpAccessListNetworkMask_Type()
)
rcIpAccessListNetworkMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAccessListNetworkMask.setStatus("current")
_RcIpAccessListName_Type = DisplayString
_RcIpAccessListName_Object = MibTableColumn
rcIpAccessListName = _RcIpAccessListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 6, 1, 5),
    _RcIpAccessListName_Type()
)
rcIpAccessListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAccessListName.setStatus("current")
_RcIpAccessListRowStatus_Type = RowStatus
_RcIpAccessListRowStatus_Object = MibTableColumn
rcIpAccessListRowStatus = _RcIpAccessListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 6, 1, 6),
    _RcIpAccessListRowStatus_Type()
)
rcIpAccessListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpAccessListRowStatus.setStatus("current")
_RcIpExtendedAccessListTableSize_Type = Integer32
_RcIpExtendedAccessListTableSize_Object = MibScalar
rcIpExtendedAccessListTableSize = _RcIpExtendedAccessListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 7),
    _RcIpExtendedAccessListTableSize_Type()
)
rcIpExtendedAccessListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListTableSize.setStatus("current")
_RcIpExtendedAccessListTable_Object = MibTable
rcIpExtendedAccessListTable = _RcIpExtendedAccessListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8)
)
if mibBuilder.loadTexts:
    rcIpExtendedAccessListTable.setStatus("current")
_RcIpExtendedAccessListEntry_Object = MibTableRow
rcIpExtendedAccessListEntry = _RcIpExtendedAccessListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1)
)
rcIpExtendedAccessListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpExtendedAccessListId"),
    (0, "RAPID-CITY", "rcIpExtendedAccessListMode"),
    (0, "RAPID-CITY", "rcIpExtendedAccessListNetwork"),
    (0, "RAPID-CITY", "rcIpExtendedAccessListNetworkWildCard"),
    (0, "RAPID-CITY", "rcIpExtendedAccessListNetworkMask"),
    (0, "RAPID-CITY", "rcIpExtendedAccessListNetworkMaskWildCard"),
)
if mibBuilder.loadTexts:
    rcIpExtendedAccessListEntry.setStatus("current")


class _RcIpExtendedAccessListId_Type(Integer32):
    """Custom type rcIpExtendedAccessListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 199),
    )


_RcIpExtendedAccessListId_Type.__name__ = "Integer32"
_RcIpExtendedAccessListId_Object = MibTableColumn
rcIpExtendedAccessListId = _RcIpExtendedAccessListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1, 1),
    _RcIpExtendedAccessListId_Type()
)
rcIpExtendedAccessListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListId.setStatus("current")


class _RcIpExtendedAccessListMode_Type(Integer32):
    """Custom type rcIpExtendedAccessListMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 2),
          ("permit", 1))
    )


_RcIpExtendedAccessListMode_Type.__name__ = "Integer32"
_RcIpExtendedAccessListMode_Object = MibTableColumn
rcIpExtendedAccessListMode = _RcIpExtendedAccessListMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1, 2),
    _RcIpExtendedAccessListMode_Type()
)
rcIpExtendedAccessListMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListMode.setStatus("current")
_RcIpExtendedAccessListNetwork_Type = IpAddress
_RcIpExtendedAccessListNetwork_Object = MibTableColumn
rcIpExtendedAccessListNetwork = _RcIpExtendedAccessListNetwork_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1, 3),
    _RcIpExtendedAccessListNetwork_Type()
)
rcIpExtendedAccessListNetwork.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListNetwork.setStatus("current")
_RcIpExtendedAccessListNetworkWildCard_Type = IpAddress
_RcIpExtendedAccessListNetworkWildCard_Object = MibTableColumn
rcIpExtendedAccessListNetworkWildCard = _RcIpExtendedAccessListNetworkWildCard_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1, 4),
    _RcIpExtendedAccessListNetworkWildCard_Type()
)
rcIpExtendedAccessListNetworkWildCard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListNetworkWildCard.setStatus("current")
_RcIpExtendedAccessListNetworkMask_Type = IpAddress
_RcIpExtendedAccessListNetworkMask_Object = MibTableColumn
rcIpExtendedAccessListNetworkMask = _RcIpExtendedAccessListNetworkMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1, 5),
    _RcIpExtendedAccessListNetworkMask_Type()
)
rcIpExtendedAccessListNetworkMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListNetworkMask.setStatus("current")
_RcIpExtendedAccessListNetworkMaskWildCard_Type = IpAddress
_RcIpExtendedAccessListNetworkMaskWildCard_Object = MibTableColumn
rcIpExtendedAccessListNetworkMaskWildCard = _RcIpExtendedAccessListNetworkMaskWildCard_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1, 6),
    _RcIpExtendedAccessListNetworkMaskWildCard_Type()
)
rcIpExtendedAccessListNetworkMaskWildCard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListNetworkMaskWildCard.setStatus("current")
_RcIpExtendedAccessListName_Type = DisplayString
_RcIpExtendedAccessListName_Object = MibTableColumn
rcIpExtendedAccessListName = _RcIpExtendedAccessListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1, 7),
    _RcIpExtendedAccessListName_Type()
)
rcIpExtendedAccessListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListName.setStatus("current")
_RcIpExtendedAccessListRowStatus_Type = RowStatus
_RcIpExtendedAccessListRowStatus_Object = MibTableColumn
rcIpExtendedAccessListRowStatus = _RcIpExtendedAccessListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 8, 1, 8),
    _RcIpExtendedAccessListRowStatus_Type()
)
rcIpExtendedAccessListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpExtendedAccessListRowStatus.setStatus("current")
_RcIpPrefixListTableSize_Type = Integer32
_RcIpPrefixListTableSize_Object = MibScalar
rcIpPrefixListTableSize = _RcIpPrefixListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 9),
    _RcIpPrefixListTableSize_Type()
)
rcIpPrefixListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPrefixListTableSize.setStatus("current")
_RcIpPrefixListTable_Object = MibTable
rcIpPrefixListTable = _RcIpPrefixListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10)
)
if mibBuilder.loadTexts:
    rcIpPrefixListTable.setStatus("current")
_RcIpPrefixListEntry_Object = MibTableRow
rcIpPrefixListEntry = _RcIpPrefixListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10, 1)
)
rcIpPrefixListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpPrefixListId"),
    (0, "RAPID-CITY", "rcIpPrefixListPrefix"),
    (0, "RAPID-CITY", "rcIpPrefixListPrefixMaskLen"),
)
if mibBuilder.loadTexts:
    rcIpPrefixListEntry.setStatus("current")


class _RcIpPrefixListId_Type(Integer32):
    """Custom type rcIpPrefixListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpPrefixListId_Type.__name__ = "Integer32"
_RcIpPrefixListId_Object = MibTableColumn
rcIpPrefixListId = _RcIpPrefixListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10, 1, 1),
    _RcIpPrefixListId_Type()
)
rcIpPrefixListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPrefixListId.setStatus("current")
_RcIpPrefixListPrefix_Type = IpAddress
_RcIpPrefixListPrefix_Object = MibTableColumn
rcIpPrefixListPrefix = _RcIpPrefixListPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10, 1, 2),
    _RcIpPrefixListPrefix_Type()
)
rcIpPrefixListPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPrefixListPrefix.setStatus("current")


class _RcIpPrefixListPrefixMaskLen_Type(Integer32):
    """Custom type rcIpPrefixListPrefixMaskLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RcIpPrefixListPrefixMaskLen_Type.__name__ = "Integer32"
_RcIpPrefixListPrefixMaskLen_Object = MibTableColumn
rcIpPrefixListPrefixMaskLen = _RcIpPrefixListPrefixMaskLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10, 1, 3),
    _RcIpPrefixListPrefixMaskLen_Type()
)
rcIpPrefixListPrefixMaskLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpPrefixListPrefixMaskLen.setStatus("current")


class _RcIpPrefixListMaskLenFrom_Type(Integer32):
    """Custom type rcIpPrefixListMaskLenFrom based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RcIpPrefixListMaskLenFrom_Type.__name__ = "Integer32"
_RcIpPrefixListMaskLenFrom_Object = MibTableColumn
rcIpPrefixListMaskLenFrom = _RcIpPrefixListMaskLenFrom_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10, 1, 4),
    _RcIpPrefixListMaskLenFrom_Type()
)
rcIpPrefixListMaskLenFrom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPrefixListMaskLenFrom.setStatus("current")


class _RcIpPrefixListMaskLenUpto_Type(Integer32):
    """Custom type rcIpPrefixListMaskLenUpto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RcIpPrefixListMaskLenUpto_Type.__name__ = "Integer32"
_RcIpPrefixListMaskLenUpto_Object = MibTableColumn
rcIpPrefixListMaskLenUpto = _RcIpPrefixListMaskLenUpto_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10, 1, 5),
    _RcIpPrefixListMaskLenUpto_Type()
)
rcIpPrefixListMaskLenUpto.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPrefixListMaskLenUpto.setStatus("current")


class _RcIpPrefixListName_Type(DisplayString):
    """Custom type rcIpPrefixListName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_RcIpPrefixListName_Type.__name__ = "DisplayString"
_RcIpPrefixListName_Object = MibTableColumn
rcIpPrefixListName = _RcIpPrefixListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10, 1, 6),
    _RcIpPrefixListName_Type()
)
rcIpPrefixListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPrefixListName.setStatus("current")
_RcIpPrefixListRowStatus_Type = RowStatus
_RcIpPrefixListRowStatus_Object = MibTableColumn
rcIpPrefixListRowStatus = _RcIpPrefixListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 10, 1, 7),
    _RcIpPrefixListRowStatus_Type()
)
rcIpPrefixListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpPrefixListRowStatus.setStatus("current")
_RcIpRoutePolicyTableSize_Type = Integer32
_RcIpRoutePolicyTableSize_Object = MibScalar
rcIpRoutePolicyTableSize = _RcIpRoutePolicyTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 11),
    _RcIpRoutePolicyTableSize_Type()
)
rcIpRoutePolicyTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRoutePolicyTableSize.setStatus("current")
_RcIpRoutePolicyApply_Type = TruthValue
_RcIpRoutePolicyApply_Object = MibScalar
rcIpRoutePolicyApply = _RcIpRoutePolicyApply_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 12),
    _RcIpRoutePolicyApply_Type()
)
rcIpRoutePolicyApply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyApply.setStatus("current")
_RcIpRoutePolicyTable_Object = MibTable
rcIpRoutePolicyTable = _RcIpRoutePolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13)
)
if mibBuilder.loadTexts:
    rcIpRoutePolicyTable.setStatus("current")
_RcIpRoutePolicyEntry_Object = MibTableRow
rcIpRoutePolicyEntry = _RcIpRoutePolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1)
)
rcIpRoutePolicyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRoutePolicyId"),
    (0, "RAPID-CITY", "rcIpRoutePolicySequenceNumber"),
)
if mibBuilder.loadTexts:
    rcIpRoutePolicyEntry.setStatus("current")


class _RcIpRoutePolicyId_Type(Integer32):
    """Custom type rcIpRoutePolicyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpRoutePolicyId_Type.__name__ = "Integer32"
_RcIpRoutePolicyId_Object = MibTableColumn
rcIpRoutePolicyId = _RcIpRoutePolicyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 1),
    _RcIpRoutePolicyId_Type()
)
rcIpRoutePolicyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRoutePolicyId.setStatus("current")


class _RcIpRoutePolicySequenceNumber_Type(Integer32):
    """Custom type rcIpRoutePolicySequenceNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpRoutePolicySequenceNumber_Type.__name__ = "Integer32"
_RcIpRoutePolicySequenceNumber_Object = MibTableColumn
rcIpRoutePolicySequenceNumber = _RcIpRoutePolicySequenceNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 2),
    _RcIpRoutePolicySequenceNumber_Type()
)
rcIpRoutePolicySequenceNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRoutePolicySequenceNumber.setStatus("current")


class _RcIpRoutePolicyName_Type(DisplayString):
    """Custom type rcIpRoutePolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_RcIpRoutePolicyName_Type.__name__ = "DisplayString"
_RcIpRoutePolicyName_Object = MibTableColumn
rcIpRoutePolicyName = _RcIpRoutePolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 3),
    _RcIpRoutePolicyName_Type()
)
rcIpRoutePolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyName.setStatus("current")


class _RcIpRoutePolicyEnable_Type(TruthValue):
    """Custom type rcIpRoutePolicyEnable based on TruthValue"""


_RcIpRoutePolicyEnable_Object = MibTableColumn
rcIpRoutePolicyEnable = _RcIpRoutePolicyEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 4),
    _RcIpRoutePolicyEnable_Type()
)
rcIpRoutePolicyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyEnable.setStatus("current")


class _RcIpRoutePolicyMode_Type(Integer32):
    """Custom type rcIpRoutePolicyMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 2),
          ("permit", 1))
    )


_RcIpRoutePolicyMode_Type.__name__ = "Integer32"
_RcIpRoutePolicyMode_Object = MibTableColumn
rcIpRoutePolicyMode = _RcIpRoutePolicyMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 5),
    _RcIpRoutePolicyMode_Type()
)
rcIpRoutePolicyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMode.setStatus("current")


class _RcIpRoutePolicyMatchProtocol_Type(Integer32):
    """Custom type rcIpRoutePolicyMatchProtocol based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpRoutePolicyMatchProtocol_Type.__name__ = "Integer32"
_RcIpRoutePolicyMatchProtocol_Object = MibTableColumn
rcIpRoutePolicyMatchProtocol = _RcIpRoutePolicyMatchProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 6),
    _RcIpRoutePolicyMatchProtocol_Type()
)
rcIpRoutePolicyMatchProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchProtocol.setStatus("current")
_RcIpRoutePolicyMatchAsPath_Type = DisplayString
_RcIpRoutePolicyMatchAsPath_Object = MibTableColumn
rcIpRoutePolicyMatchAsPath = _RcIpRoutePolicyMatchAsPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 7),
    _RcIpRoutePolicyMatchAsPath_Type()
)
rcIpRoutePolicyMatchAsPath.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchAsPath.setStatus("current")
_RcIpRoutePolicyMatchCommunity_Type = DisplayString
_RcIpRoutePolicyMatchCommunity_Object = MibTableColumn
rcIpRoutePolicyMatchCommunity = _RcIpRoutePolicyMatchCommunity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 8),
    _RcIpRoutePolicyMatchCommunity_Type()
)
rcIpRoutePolicyMatchCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchCommunity.setStatus("current")


class _RcIpRoutePolicyMatchCommunityExact_Type(EnableValue):
    """Custom type rcIpRoutePolicyMatchCommunityExact based on EnableValue"""


_RcIpRoutePolicyMatchCommunityExact_Object = MibTableColumn
rcIpRoutePolicyMatchCommunityExact = _RcIpRoutePolicyMatchCommunityExact_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 9),
    _RcIpRoutePolicyMatchCommunityExact_Type()
)
rcIpRoutePolicyMatchCommunityExact.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchCommunityExact.setStatus("current")


class _RcIpRoutePolicyMatchNetwork_Type(RcLongDisplayString):
    """Custom type rcIpRoutePolicyMatchNetwork based on RcLongDisplayString"""
    subtypeSpec = RcLongDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 259),
    )


_RcIpRoutePolicyMatchNetwork_Type.__name__ = "RcLongDisplayString"
_RcIpRoutePolicyMatchNetwork_Object = MibTableColumn
rcIpRoutePolicyMatchNetwork = _RcIpRoutePolicyMatchNetwork_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 10),
    _RcIpRoutePolicyMatchNetwork_Type()
)
rcIpRoutePolicyMatchNetwork.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchNetwork.setStatus("current")


class _RcIpRoutePolicyMatchIpRouteSource_Type(RcLongDisplayString):
    """Custom type rcIpRoutePolicyMatchIpRouteSource based on RcLongDisplayString"""
    subtypeSpec = RcLongDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 259),
    )


_RcIpRoutePolicyMatchIpRouteSource_Type.__name__ = "RcLongDisplayString"
_RcIpRoutePolicyMatchIpRouteSource_Object = MibTableColumn
rcIpRoutePolicyMatchIpRouteSource = _RcIpRoutePolicyMatchIpRouteSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 11),
    _RcIpRoutePolicyMatchIpRouteSource_Type()
)
rcIpRoutePolicyMatchIpRouteSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchIpRouteSource.setStatus("current")


class _RcIpRoutePolicyMatchNextHop_Type(RcLongDisplayString):
    """Custom type rcIpRoutePolicyMatchNextHop based on RcLongDisplayString"""
    subtypeSpec = RcLongDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 259),
    )


_RcIpRoutePolicyMatchNextHop_Type.__name__ = "RcLongDisplayString"
_RcIpRoutePolicyMatchNextHop_Object = MibTableColumn
rcIpRoutePolicyMatchNextHop = _RcIpRoutePolicyMatchNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 12),
    _RcIpRoutePolicyMatchNextHop_Type()
)
rcIpRoutePolicyMatchNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchNextHop.setStatus("current")


class _RcIpRoutePolicyMatchInterface_Type(RcLongDisplayString):
    """Custom type rcIpRoutePolicyMatchInterface based on RcLongDisplayString"""
    subtypeSpec = RcLongDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 259),
    )


_RcIpRoutePolicyMatchInterface_Type.__name__ = "RcLongDisplayString"
_RcIpRoutePolicyMatchInterface_Object = MibTableColumn
rcIpRoutePolicyMatchInterface = _RcIpRoutePolicyMatchInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 13),
    _RcIpRoutePolicyMatchInterface_Type()
)
rcIpRoutePolicyMatchInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchInterface.setStatus("current")


class _RcIpRoutePolicyMatchRouteType_Type(Integer32):
    """Custom type rcIpRoutePolicyMatchRouteType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("external", 3),
          ("externaltype1", 4),
          ("externaltype2", 5),
          ("internal", 2),
          ("level1", 6),
          ("level2", 7),
          ("local", 1))
    )


_RcIpRoutePolicyMatchRouteType_Type.__name__ = "Integer32"
_RcIpRoutePolicyMatchRouteType_Object = MibTableColumn
rcIpRoutePolicyMatchRouteType = _RcIpRoutePolicyMatchRouteType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 14),
    _RcIpRoutePolicyMatchRouteType_Type()
)
rcIpRoutePolicyMatchRouteType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchRouteType.setStatus("current")


class _RcIpRoutePolicyMatchMetric_Type(Integer32):
    """Custom type rcIpRoutePolicyMatchMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpRoutePolicyMatchMetric_Type.__name__ = "Integer32"
_RcIpRoutePolicyMatchMetric_Object = MibTableColumn
rcIpRoutePolicyMatchMetric = _RcIpRoutePolicyMatchMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 15),
    _RcIpRoutePolicyMatchMetric_Type()
)
rcIpRoutePolicyMatchMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchMetric.setStatus("current")
_RcIpRoutePolicyMatchTag_Type = DisplayString
_RcIpRoutePolicyMatchTag_Object = MibTableColumn
rcIpRoutePolicyMatchTag = _RcIpRoutePolicyMatchTag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 16),
    _RcIpRoutePolicyMatchTag_Type()
)
rcIpRoutePolicyMatchTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchTag.setStatus("current")


class _RcIpRoutePolicySetRoutePreference_Type(Integer32):
    """Custom type rcIpRoutePolicySetRoutePreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpRoutePolicySetRoutePreference_Type.__name__ = "Integer32"
_RcIpRoutePolicySetRoutePreference_Object = MibTableColumn
rcIpRoutePolicySetRoutePreference = _RcIpRoutePolicySetRoutePreference_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 17),
    _RcIpRoutePolicySetRoutePreference_Type()
)
rcIpRoutePolicySetRoutePreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetRoutePreference.setStatus("current")
_RcIpRoutePolicySetAsPath_Type = DisplayString
_RcIpRoutePolicySetAsPath_Object = MibTableColumn
rcIpRoutePolicySetAsPath = _RcIpRoutePolicySetAsPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 18),
    _RcIpRoutePolicySetAsPath_Type()
)
rcIpRoutePolicySetAsPath.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetAsPath.setStatus("current")


class _RcIpRoutePolicySetAsPathMode_Type(Integer32):
    """Custom type rcIpRoutePolicySetAsPathMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("prepend", 2),
          ("tag", 1))
    )


_RcIpRoutePolicySetAsPathMode_Type.__name__ = "Integer32"
_RcIpRoutePolicySetAsPathMode_Object = MibTableColumn
rcIpRoutePolicySetAsPathMode = _RcIpRoutePolicySetAsPathMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 19),
    _RcIpRoutePolicySetAsPathMode_Type()
)
rcIpRoutePolicySetAsPathMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetAsPathMode.setStatus("current")


class _RcIpRoutePolicySetAutomaticTag_Type(EnableValue):
    """Custom type rcIpRoutePolicySetAutomaticTag based on EnableValue"""


_RcIpRoutePolicySetAutomaticTag_Object = MibTableColumn
rcIpRoutePolicySetAutomaticTag = _RcIpRoutePolicySetAutomaticTag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 20),
    _RcIpRoutePolicySetAutomaticTag_Type()
)
rcIpRoutePolicySetAutomaticTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetAutomaticTag.setStatus("current")
_RcIpRoutePolicySetCommunityNumber_Type = DisplayString
_RcIpRoutePolicySetCommunityNumber_Object = MibTableColumn
rcIpRoutePolicySetCommunityNumber = _RcIpRoutePolicySetCommunityNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 21),
    _RcIpRoutePolicySetCommunityNumber_Type()
)
rcIpRoutePolicySetCommunityNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetCommunityNumber.setStatus("current")


class _RcIpRoutePolicySetCommunityMode_Type(Integer32):
    """Custom type rcIpRoutePolicySetCommunityMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("append", 2),
          ("none", 1),
          ("unchanged", 0))
    )


_RcIpRoutePolicySetCommunityMode_Type.__name__ = "Integer32"
_RcIpRoutePolicySetCommunityMode_Object = MibTableColumn
rcIpRoutePolicySetCommunityMode = _RcIpRoutePolicySetCommunityMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 22),
    _RcIpRoutePolicySetCommunityMode_Type()
)
rcIpRoutePolicySetCommunityMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetCommunityMode.setStatus("current")


class _RcIpRoutePolicySetMetricTypeInternal_Type(Integer32):
    """Custom type rcIpRoutePolicySetMetricTypeInternal based on Integer32"""
    defaultValue = 0


_RcIpRoutePolicySetMetricTypeInternal_Object = MibTableColumn
rcIpRoutePolicySetMetricTypeInternal = _RcIpRoutePolicySetMetricTypeInternal_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 23),
    _RcIpRoutePolicySetMetricTypeInternal_Type()
)
rcIpRoutePolicySetMetricTypeInternal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetMetricTypeInternal.setStatus("current")


class _RcIpRoutePolicySetMetric_Type(Integer32):
    """Custom type rcIpRoutePolicySetMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpRoutePolicySetMetric_Type.__name__ = "Integer32"
_RcIpRoutePolicySetMetric_Object = MibTableColumn
rcIpRoutePolicySetMetric = _RcIpRoutePolicySetMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 24),
    _RcIpRoutePolicySetMetric_Type()
)
rcIpRoutePolicySetMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetMetric.setStatus("current")


class _RcIpRoutePolicySetMetricType_Type(Integer32):
    """Custom type rcIpRoutePolicySetMetricType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("external", 4),
          ("internal", 3),
          ("type1", 1),
          ("type2", 2))
    )


_RcIpRoutePolicySetMetricType_Type.__name__ = "Integer32"
_RcIpRoutePolicySetMetricType_Object = MibTableColumn
rcIpRoutePolicySetMetricType = _RcIpRoutePolicySetMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 25),
    _RcIpRoutePolicySetMetricType_Type()
)
rcIpRoutePolicySetMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetMetricType.setStatus("current")


class _RcIpRoutePolicySetNextHop_Type(IpAddress):
    """Custom type rcIpRoutePolicySetNextHop based on IpAddress"""
    defaultHexValue = "00000000"


_RcIpRoutePolicySetNextHop_Object = MibTableColumn
rcIpRoutePolicySetNextHop = _RcIpRoutePolicySetNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 26),
    _RcIpRoutePolicySetNextHop_Type()
)
rcIpRoutePolicySetNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetNextHop.setStatus("current")


class _RcIpRoutePolicySetOrigin_Type(Integer32):
    """Custom type rcIpRoutePolicySetOrigin based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("egp", 2),
          ("igp", 1),
          ("incomplete", 3),
          ("unchanged", 0))
    )


_RcIpRoutePolicySetOrigin_Type.__name__ = "Integer32"
_RcIpRoutePolicySetOrigin_Object = MibTableColumn
rcIpRoutePolicySetOrigin = _RcIpRoutePolicySetOrigin_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 27),
    _RcIpRoutePolicySetOrigin_Type()
)
rcIpRoutePolicySetOrigin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetOrigin.setStatus("current")


class _RcIpRoutePolicySetLocalPref_Type(Integer32):
    """Custom type rcIpRoutePolicySetLocalPref based on Integer32"""
    defaultValue = 0


_RcIpRoutePolicySetLocalPref_Object = MibTableColumn
rcIpRoutePolicySetLocalPref = _RcIpRoutePolicySetLocalPref_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 28),
    _RcIpRoutePolicySetLocalPref_Type()
)
rcIpRoutePolicySetLocalPref.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetLocalPref.setStatus("current")


class _RcIpRoutePolicySetOriginEgpAs_Type(Integer32):
    """Custom type rcIpRoutePolicySetOriginEgpAs based on Integer32"""
    defaultValue = 0


_RcIpRoutePolicySetOriginEgpAs_Object = MibTableColumn
rcIpRoutePolicySetOriginEgpAs = _RcIpRoutePolicySetOriginEgpAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 29),
    _RcIpRoutePolicySetOriginEgpAs_Type()
)
rcIpRoutePolicySetOriginEgpAs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetOriginEgpAs.setStatus("current")


class _RcIpRoutePolicySetTag_Type(Integer32):
    """Custom type rcIpRoutePolicySetTag based on Integer32"""
    defaultValue = 0


_RcIpRoutePolicySetTag_Object = MibTableColumn
rcIpRoutePolicySetTag = _RcIpRoutePolicySetTag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 30),
    _RcIpRoutePolicySetTag_Type()
)
rcIpRoutePolicySetTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetTag.setStatus("current")


class _RcIpRoutePolicySetWeight_Type(Integer32):
    """Custom type rcIpRoutePolicySetWeight based on Integer32"""
    defaultValue = 0


_RcIpRoutePolicySetWeight_Object = MibTableColumn
rcIpRoutePolicySetWeight = _RcIpRoutePolicySetWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 31),
    _RcIpRoutePolicySetWeight_Type()
)
rcIpRoutePolicySetWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetWeight.setStatus("current")
_RcIpRoutePolicySetInjectNetList_Type = DisplayString
_RcIpRoutePolicySetInjectNetList_Object = MibTableColumn
rcIpRoutePolicySetInjectNetList = _RcIpRoutePolicySetInjectNetList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 32),
    _RcIpRoutePolicySetInjectNetList_Type()
)
rcIpRoutePolicySetInjectNetList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetInjectNetList.setStatus("current")
_RcIpRoutePolicyRowStatus_Type = RowStatus
_RcIpRoutePolicyRowStatus_Object = MibTableColumn
rcIpRoutePolicyRowStatus = _RcIpRoutePolicyRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 33),
    _RcIpRoutePolicyRowStatus_Type()
)
rcIpRoutePolicyRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyRowStatus.setStatus("current")


class _RcIpRoutePolicySetMask_Type(IpAddress):
    """Custom type rcIpRoutePolicySetMask based on IpAddress"""
    defaultHexValue = "00000000"


_RcIpRoutePolicySetMask_Object = MibTableColumn
rcIpRoutePolicySetMask = _RcIpRoutePolicySetMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 34),
    _RcIpRoutePolicySetMask_Type()
)
rcIpRoutePolicySetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetMask.setStatus("current")


class _RcIpRoutePolicyNssaPbit_Type(EnableValue):
    """Custom type rcIpRoutePolicyNssaPbit based on EnableValue"""


_RcIpRoutePolicyNssaPbit_Object = MibTableColumn
rcIpRoutePolicyNssaPbit = _RcIpRoutePolicyNssaPbit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 35),
    _RcIpRoutePolicyNssaPbit_Type()
)
rcIpRoutePolicyNssaPbit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyNssaPbit.setStatus("current")


class _RcIpRoutePolicyMatchVrf_Type(IdList):
    """Custom type rcIpRoutePolicyMatchVrf based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcIpRoutePolicyMatchVrf_Type.__name__ = "IdList"
_RcIpRoutePolicyMatchVrf_Object = MibTableColumn
rcIpRoutePolicyMatchVrf = _RcIpRoutePolicyMatchVrf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 36),
    _RcIpRoutePolicyMatchVrf_Type()
)
rcIpRoutePolicyMatchVrf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchVrf.setStatus("current")
_RcIpRoutePolicyMatchExtCommunity_Type = DisplayString
_RcIpRoutePolicyMatchExtCommunity_Object = MibTableColumn
rcIpRoutePolicyMatchExtCommunity = _RcIpRoutePolicyMatchExtCommunity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 37),
    _RcIpRoutePolicyMatchExtCommunity_Type()
)
rcIpRoutePolicyMatchExtCommunity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchExtCommunity.setStatus("current")
_RcIpRoutePolicySetExtCommunity_Type = DisplayString
_RcIpRoutePolicySetExtCommunity_Object = MibTableColumn
rcIpRoutePolicySetExtCommunity = _RcIpRoutePolicySetExtCommunity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 38),
    _RcIpRoutePolicySetExtCommunity_Type()
)
rcIpRoutePolicySetExtCommunity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetExtCommunity.setStatus("current")


class _RcIpRoutePolicySetExtCommunityMode_Type(Integer32):
    """Custom type rcIpRoutePolicySetExtCommunityMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("append", 0),
          ("overwrite", 2),
          ("unchanged", 1))
    )


_RcIpRoutePolicySetExtCommunityMode_Type.__name__ = "Integer32"
_RcIpRoutePolicySetExtCommunityMode_Object = MibTableColumn
rcIpRoutePolicySetExtCommunityMode = _RcIpRoutePolicySetExtCommunityMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 39),
    _RcIpRoutePolicySetExtCommunityMode_Type()
)
rcIpRoutePolicySetExtCommunityMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpRoutePolicySetExtCommunityMode.setStatus("current")
_RcIpRoutePolicyMatchLocalPref_Type = Integer32
_RcIpRoutePolicyMatchLocalPref_Object = MibTableColumn
rcIpRoutePolicyMatchLocalPref = _RcIpRoutePolicyMatchLocalPref_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 40),
    _RcIpRoutePolicyMatchLocalPref_Type()
)
rcIpRoutePolicyMatchLocalPref.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchLocalPref.setStatus("current")


class _RcIpRoutePolicyMatchIpRouteDest_Type(RcLongDisplayString):
    """Custom type rcIpRoutePolicyMatchIpRouteDest based on RcLongDisplayString"""
    subtypeSpec = RcLongDisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 259),
    )


_RcIpRoutePolicyMatchIpRouteDest_Type.__name__ = "RcLongDisplayString"
_RcIpRoutePolicyMatchIpRouteDest_Object = MibTableColumn
rcIpRoutePolicyMatchIpRouteDest = _RcIpRoutePolicyMatchIpRouteDest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 41),
    _RcIpRoutePolicyMatchIpRouteDest_Type()
)
rcIpRoutePolicyMatchIpRouteDest.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchIpRouteDest.setStatus("current")


class _RcIpRoutePolicyMatchExtendedPref_Type(OctetString):
    """Custom type rcIpRoutePolicyMatchExtendedPref based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1027),
    )


_RcIpRoutePolicyMatchExtendedPref_Type.__name__ = "OctetString"
_RcIpRoutePolicyMatchExtendedPref_Object = MibTableColumn
rcIpRoutePolicyMatchExtendedPref = _RcIpRoutePolicyMatchExtendedPref_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 42),
    _RcIpRoutePolicyMatchExtendedPref_Type()
)
rcIpRoutePolicyMatchExtendedPref.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpRoutePolicyMatchExtendedPref.setStatus("current")
_RcIpRoutePolicyIpv6SetNextHop_Type = Ipv6Address
_RcIpRoutePolicyIpv6SetNextHop_Object = MibTableColumn
rcIpRoutePolicyIpv6SetNextHop = _RcIpRoutePolicyIpv6SetNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 13, 1, 43),
    _RcIpRoutePolicyIpv6SetNextHop_Type()
)
rcIpRoutePolicyIpv6SetNextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpRoutePolicyIpv6SetNextHop.setStatus("current")
_RcIpRedistributeTableSize_Type = Integer32
_RcIpRedistributeTableSize_Object = MibScalar
rcIpRedistributeTableSize = _RcIpRedistributeTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 14),
    _RcIpRedistributeTableSize_Type()
)
rcIpRedistributeTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRedistributeTableSize.setStatus("current")


class _RcIpRedistributeApply_Type(TruthValue):
    """Custom type rcIpRedistributeApply based on TruthValue"""


_RcIpRedistributeApply_Object = MibScalar
rcIpRedistributeApply = _RcIpRedistributeApply_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 15),
    _RcIpRedistributeApply_Type()
)
rcIpRedistributeApply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeApply.setStatus("current")
_RcIpRedistributeTable_Object = MibTable
rcIpRedistributeTable = _RcIpRedistributeTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16)
)
if mibBuilder.loadTexts:
    rcIpRedistributeTable.setStatus("current")
_RcIpRedistributeEntry_Object = MibTableRow
rcIpRedistributeEntry = _RcIpRedistributeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1)
)
rcIpRedistributeEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRedistributeProtocol"),
    (0, "RAPID-CITY", "rcIpRedistributeRouteSource"),
)
if mibBuilder.loadTexts:
    rcIpRedistributeEntry.setStatus("current")


class _RcIpRedistributeProtocol_Type(Integer32):
    """Custom type rcIpRedistributeProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bgp", 2),
          ("isis", 3),
          ("ospf", 1),
          ("ospfv3", 4),
          ("vrf-ext", 5))
    )


_RcIpRedistributeProtocol_Type.__name__ = "Integer32"
_RcIpRedistributeProtocol_Object = MibTableColumn
rcIpRedistributeProtocol = _RcIpRedistributeProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 1),
    _RcIpRedistributeProtocol_Type()
)
rcIpRedistributeProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRedistributeProtocol.setStatus("current")


class _RcIpRedistributeRouteSource_Type(Integer32):
    """Custom type rcIpRedistributeRouteSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("bgp", 5),
          ("direct", 1),
          ("isis", 6),
          ("ospf", 4),
          ("rip", 3),
          ("static", 2))
    )


_RcIpRedistributeRouteSource_Type.__name__ = "Integer32"
_RcIpRedistributeRouteSource_Object = MibTableColumn
rcIpRedistributeRouteSource = _RcIpRedistributeRouteSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 2),
    _RcIpRedistributeRouteSource_Type()
)
rcIpRedistributeRouteSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRedistributeRouteSource.setStatus("current")


class _RcIpRedistributeEnable_Type(EnableValue):
    """Custom type rcIpRedistributeEnable based on EnableValue"""


_RcIpRedistributeEnable_Object = MibTableColumn
rcIpRedistributeEnable = _RcIpRedistributeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 3),
    _RcIpRedistributeEnable_Type()
)
rcIpRedistributeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeEnable.setStatus("current")


class _RcIpRedistributeMetric_Type(Integer32):
    """Custom type rcIpRedistributeMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpRedistributeMetric_Type.__name__ = "Integer32"
_RcIpRedistributeMetric_Object = MibTableColumn
rcIpRedistributeMetric = _RcIpRedistributeMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 4),
    _RcIpRedistributeMetric_Type()
)
rcIpRedistributeMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeMetric.setStatus("current")


class _RcIpRedistributeMetricType_Type(Integer32):
    """Custom type rcIpRedistributeMetricType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("type1", 1),
          ("type2", 2))
    )


_RcIpRedistributeMetricType_Type.__name__ = "Integer32"
_RcIpRedistributeMetricType_Object = MibTableColumn
rcIpRedistributeMetricType = _RcIpRedistributeMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 5),
    _RcIpRedistributeMetricType_Type()
)
rcIpRedistributeMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeMetricType.setStatus("current")


class _RcIpRedistributeMatchRouteType_Type(Integer32):
    """Custom type rcIpRedistributeMatchRouteType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("external1", 2),
          ("external2", 3),
          ("internal", 1))
    )


_RcIpRedistributeMatchRouteType_Type.__name__ = "Integer32"
_RcIpRedistributeMatchRouteType_Object = MibTableColumn
rcIpRedistributeMatchRouteType = _RcIpRedistributeMatchRouteType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 6),
    _RcIpRedistributeMatchRouteType_Type()
)
rcIpRedistributeMatchRouteType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeMatchRouteType.setStatus("current")
_RcIpRedistributeSetTag_Type = Integer32
_RcIpRedistributeSetTag_Object = MibTableColumn
rcIpRedistributeSetTag = _RcIpRedistributeSetTag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 7),
    _RcIpRedistributeSetTag_Type()
)
rcIpRedistributeSetTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeSetTag.setStatus("current")


class _RcIpRedistributeSubnets_Type(Integer32):
    """Custom type rcIpRedistributeSubnets based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allow", 1),
          ("supress", 2))
    )


_RcIpRedistributeSubnets_Type.__name__ = "Integer32"
_RcIpRedistributeSubnets_Object = MibTableColumn
rcIpRedistributeSubnets = _RcIpRedistributeSubnets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 8),
    _RcIpRedistributeSubnets_Type()
)
rcIpRedistributeSubnets.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeSubnets.setStatus("current")
_RcIpRedistributeRoutePolicy_Type = DisplayString
_RcIpRedistributeRoutePolicy_Object = MibTableColumn
rcIpRedistributeRoutePolicy = _RcIpRedistributeRoutePolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 9),
    _RcIpRedistributeRoutePolicy_Type()
)
rcIpRedistributeRoutePolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeRoutePolicy.setStatus("current")
_RcIpRedistributeASNumber_Type = Integer32
_RcIpRedistributeASNumber_Object = MibTableColumn
rcIpRedistributeASNumber = _RcIpRedistributeASNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 10),
    _RcIpRedistributeASNumber_Type()
)
rcIpRedistributeASNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeASNumber.setStatus("current")
_RcIpRedistributeWeight_Type = Integer32
_RcIpRedistributeWeight_Object = MibTableColumn
rcIpRedistributeWeight = _RcIpRedistributeWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 11),
    _RcIpRedistributeWeight_Type()
)
rcIpRedistributeWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeWeight.setStatus("current")
_RcIpRedistributeDefaultOriginate_Type = Integer32
_RcIpRedistributeDefaultOriginate_Object = MibTableColumn
rcIpRedistributeDefaultOriginate = _RcIpRedistributeDefaultOriginate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 12),
    _RcIpRedistributeDefaultOriginate_Type()
)
rcIpRedistributeDefaultOriginate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeDefaultOriginate.setStatus("current")
_RcIpRedistributeRowStatus_Type = RowStatus
_RcIpRedistributeRowStatus_Object = MibTableColumn
rcIpRedistributeRowStatus = _RcIpRedistributeRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 13),
    _RcIpRedistributeRowStatus_Type()
)
rcIpRedistributeRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeRowStatus.setStatus("current")


class _RcIpRedistributeLevel_Type(Integer32):
    """Custom type rcIpRedistributeLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            2
        )
    )
    namedValues = NamedValues(
        ("level2", 2)
    )


_RcIpRedistributeLevel_Type.__name__ = "Integer32"
_RcIpRedistributeLevel_Object = MibTableColumn
rcIpRedistributeLevel = _RcIpRedistributeLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 16, 1, 14),
    _RcIpRedistributeLevel_Type()
)
rcIpRedistributeLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeLevel.setStatus("current")
_RcIpOspfInFilterTableSize_Type = Integer32
_RcIpOspfInFilterTableSize_Object = MibScalar
rcIpOspfInFilterTableSize = _RcIpOspfInFilterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 17),
    _RcIpOspfInFilterTableSize_Type()
)
rcIpOspfInFilterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpOspfInFilterTableSize.setStatus("current")
_RcIpOspfInFilterApply_Type = TruthValue
_RcIpOspfInFilterApply_Object = MibScalar
rcIpOspfInFilterApply = _RcIpOspfInFilterApply_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 18),
    _RcIpOspfInFilterApply_Type()
)
rcIpOspfInFilterApply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpOspfInFilterApply.setStatus("current")
_RcIpOspfInFilterTable_Object = MibTable
rcIpOspfInFilterTable = _RcIpOspfInFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 19)
)
if mibBuilder.loadTexts:
    rcIpOspfInFilterTable.setStatus("current")
_RcIpOspfInFilterEntry_Object = MibTableRow
rcIpOspfInFilterEntry = _RcIpOspfInFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 19, 1)
)
rcIpOspfInFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpOspfInFilterAdvertisingRtr"),
)
if mibBuilder.loadTexts:
    rcIpOspfInFilterEntry.setStatus("current")
_RcIpOspfInFilterAdvertisingRtr_Type = IpAddress
_RcIpOspfInFilterAdvertisingRtr_Object = MibTableColumn
rcIpOspfInFilterAdvertisingRtr = _RcIpOspfInFilterAdvertisingRtr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 19, 1, 1),
    _RcIpOspfInFilterAdvertisingRtr_Type()
)
rcIpOspfInFilterAdvertisingRtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpOspfInFilterAdvertisingRtr.setStatus("current")


class _RcIpOspfInFilterEnable_Type(EnableValue):
    """Custom type rcIpOspfInFilterEnable based on EnableValue"""


_RcIpOspfInFilterEnable_Object = MibTableColumn
rcIpOspfInFilterEnable = _RcIpOspfInFilterEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 19, 1, 2),
    _RcIpOspfInFilterEnable_Type()
)
rcIpOspfInFilterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpOspfInFilterEnable.setStatus("current")


class _RcIpOspfInFilterMetricType_Type(Integer32):
    """Custom type rcIpOspfInFilterMetricType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("any", 3),
          ("type1", 1),
          ("type2", 2))
    )


_RcIpOspfInFilterMetricType_Type.__name__ = "Integer32"
_RcIpOspfInFilterMetricType_Object = MibTableColumn
rcIpOspfInFilterMetricType = _RcIpOspfInFilterMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 19, 1, 3),
    _RcIpOspfInFilterMetricType_Type()
)
rcIpOspfInFilterMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpOspfInFilterMetricType.setStatus("current")
_RcIpOspfInFilterPolicyName_Type = DisplayString
_RcIpOspfInFilterPolicyName_Object = MibTableColumn
rcIpOspfInFilterPolicyName = _RcIpOspfInFilterPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 19, 1, 4),
    _RcIpOspfInFilterPolicyName_Type()
)
rcIpOspfInFilterPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpOspfInFilterPolicyName.setStatus("current")
_RcIpOspfInFilterRowStatus_Type = RowStatus
_RcIpOspfInFilterRowStatus_Object = MibTableColumn
rcIpOspfInFilterRowStatus = _RcIpOspfInFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 19, 1, 5),
    _RcIpOspfInFilterRowStatus_Type()
)
rcIpOspfInFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpOspfInFilterRowStatus.setStatus("current")
_RcIpRoutePrefTableSize_Type = Integer32
_RcIpRoutePrefTableSize_Object = MibScalar
rcIpRoutePrefTableSize = _RcIpRoutePrefTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 20),
    _RcIpRoutePrefTableSize_Type()
)
rcIpRoutePrefTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRoutePrefTableSize.setStatus("current")
_RcIpRoutePrefTable_Object = MibTable
rcIpRoutePrefTable = _RcIpRoutePrefTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 21)
)
if mibBuilder.loadTexts:
    rcIpRoutePrefTable.setStatus("current")
_RcIpRoutePrefEntry_Object = MibTableRow
rcIpRoutePrefEntry = _RcIpRoutePrefEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 21, 1)
)
rcIpRoutePrefEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRoutePrefProtocol"),
)
if mibBuilder.loadTexts:
    rcIpRoutePrefEntry.setStatus("current")


class _RcIpRoutePrefProtocol_Type(Integer32):
    """Custom type rcIpRoutePrefProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18)
        )
    )
    namedValues = NamedValues(
        *(("ebgp", 8),
          ("ibgp", 12),
          ("isisLevel1", 6),
          ("isisLevel2", 7),
          ("local", 1),
          ("mpls", 3),
          ("ospfExternal1", 10),
          ("ospfExternal2", 11),
          ("ospfInter", 5),
          ("ospfIntra", 4),
          ("ospfv3External1", 16),
          ("ospfv3External2", 17),
          ("ospfv3Inter", 15),
          ("ospfv3Intra", 14),
          ("rip", 9),
          ("spbmLevel1", 18),
          ("static", 2),
          ("staticv6", 13))
    )


_RcIpRoutePrefProtocol_Type.__name__ = "Integer32"
_RcIpRoutePrefProtocol_Object = MibTableColumn
rcIpRoutePrefProtocol = _RcIpRoutePrefProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 21, 1, 1),
    _RcIpRoutePrefProtocol_Type()
)
rcIpRoutePrefProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRoutePrefProtocol.setStatus("current")


class _RcIpRoutePrefDefault_Type(Integer32):
    """Custom type rcIpRoutePrefDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpRoutePrefDefault_Type.__name__ = "Integer32"
_RcIpRoutePrefDefault_Object = MibTableColumn
rcIpRoutePrefDefault = _RcIpRoutePrefDefault_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 21, 1, 2),
    _RcIpRoutePrefDefault_Type()
)
rcIpRoutePrefDefault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpRoutePrefDefault.setStatus("current")


class _RcIpRoutePrefConfigured_Type(Integer32):
    """Custom type rcIpRoutePrefConfigured based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpRoutePrefConfigured_Type.__name__ = "Integer32"
_RcIpRoutePrefConfigured_Object = MibTableColumn
rcIpRoutePrefConfigured = _RcIpRoutePrefConfigured_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 21, 1, 3),
    _RcIpRoutePrefConfigured_Type()
)
rcIpRoutePrefConfigured.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRoutePrefConfigured.setStatus("current")
_RcIpRedistributeInterVrfTable_Object = MibTable
rcIpRedistributeInterVrfTable = _RcIpRedistributeInterVrfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22)
)
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfTable.setStatus("current")
_RcIpRedistributeInterVrfEntry_Object = MibTableRow
rcIpRedistributeInterVrfEntry = _RcIpRedistributeInterVrfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1)
)
rcIpRedistributeInterVrfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpRedistributeInterVrfDstVrfId"),
    (0, "RAPID-CITY", "rcIpRedistributeInterVrfProtocol"),
    (0, "RAPID-CITY", "rcIpRedistributeInterVrfSrcVrfId"),
    (0, "RAPID-CITY", "rcIpRedistributeInterVrfRouteSource"),
)
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfEntry.setStatus("current")
_RcIpRedistributeInterVrfDstVrfId_Type = VrfIdentifier
_RcIpRedistributeInterVrfDstVrfId_Object = MibTableColumn
rcIpRedistributeInterVrfDstVrfId = _RcIpRedistributeInterVrfDstVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 1),
    _RcIpRedistributeInterVrfDstVrfId_Type()
)
rcIpRedistributeInterVrfDstVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfDstVrfId.setStatus("current")


class _RcIpRedistributeInterVrfProtocol_Type(Integer32):
    """Custom type rcIpRedistributeInterVrfProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              10)
        )
    )
    namedValues = NamedValues(
        *(("bgp", 2),
          ("extranet", 5),
          ("isis", 3),
          ("ospf", 1),
          ("ospfv3", 10),
          ("rip", 6),
          ("vrf-ext", 4))
    )


_RcIpRedistributeInterVrfProtocol_Type.__name__ = "Integer32"
_RcIpRedistributeInterVrfProtocol_Object = MibTableColumn
rcIpRedistributeInterVrfProtocol = _RcIpRedistributeInterVrfProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 2),
    _RcIpRedistributeInterVrfProtocol_Type()
)
rcIpRedistributeInterVrfProtocol.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfProtocol.setStatus("current")
_RcIpRedistributeInterVrfSrcVrfId_Type = VrfIdentifier
_RcIpRedistributeInterVrfSrcVrfId_Object = MibTableColumn
rcIpRedistributeInterVrfSrcVrfId = _RcIpRedistributeInterVrfSrcVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 3),
    _RcIpRedistributeInterVrfSrcVrfId_Type()
)
rcIpRedistributeInterVrfSrcVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfSrcVrfId.setStatus("current")


class _RcIpRedistributeInterVrfRouteSource_Type(Integer32):
    """Custom type rcIpRedistributeInterVrfRouteSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("bgp", 5),
          ("direct", 1),
          ("extranet", 6),
          ("isis", 13),
          ("ospf", 4),
          ("ospfv3", 12),
          ("rip", 3),
          ("static", 2),
          ("v6direct", 10),
          ("v6static", 11))
    )


_RcIpRedistributeInterVrfRouteSource_Type.__name__ = "Integer32"
_RcIpRedistributeInterVrfRouteSource_Object = MibTableColumn
rcIpRedistributeInterVrfRouteSource = _RcIpRedistributeInterVrfRouteSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 4),
    _RcIpRedistributeInterVrfRouteSource_Type()
)
rcIpRedistributeInterVrfRouteSource.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfRouteSource.setStatus("current")


class _RcIpRedistributeInterVrfEnable_Type(EnableValue):
    """Custom type rcIpRedistributeInterVrfEnable based on EnableValue"""


_RcIpRedistributeInterVrfEnable_Object = MibTableColumn
rcIpRedistributeInterVrfEnable = _RcIpRedistributeInterVrfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 5),
    _RcIpRedistributeInterVrfEnable_Type()
)
rcIpRedistributeInterVrfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfEnable.setStatus("current")


class _RcIpRedistributeInterVrfMetric_Type(Integer32):
    """Custom type rcIpRedistributeInterVrfMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpRedistributeInterVrfMetric_Type.__name__ = "Integer32"
_RcIpRedistributeInterVrfMetric_Object = MibTableColumn
rcIpRedistributeInterVrfMetric = _RcIpRedistributeInterVrfMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 6),
    _RcIpRedistributeInterVrfMetric_Type()
)
rcIpRedistributeInterVrfMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfMetric.setStatus("current")


class _RcIpRedistributeInterVrfMetricType_Type(Integer32):
    """Custom type rcIpRedistributeInterVrfMetricType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("type1", 1),
          ("type2", 2))
    )


_RcIpRedistributeInterVrfMetricType_Type.__name__ = "Integer32"
_RcIpRedistributeInterVrfMetricType_Object = MibTableColumn
rcIpRedistributeInterVrfMetricType = _RcIpRedistributeInterVrfMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 7),
    _RcIpRedistributeInterVrfMetricType_Type()
)
rcIpRedistributeInterVrfMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfMetricType.setStatus("current")


class _RcIpRedistributeInterVrfMatchRouteType_Type(Integer32):
    """Custom type rcIpRedistributeInterVrfMatchRouteType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("external1", 2),
          ("external2", 3),
          ("internal", 1))
    )


_RcIpRedistributeInterVrfMatchRouteType_Type.__name__ = "Integer32"
_RcIpRedistributeInterVrfMatchRouteType_Object = MibTableColumn
rcIpRedistributeInterVrfMatchRouteType = _RcIpRedistributeInterVrfMatchRouteType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 8),
    _RcIpRedistributeInterVrfMatchRouteType_Type()
)
rcIpRedistributeInterVrfMatchRouteType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfMatchRouteType.setStatus("current")
_RcIpRedistributeInterVrfSetTag_Type = Integer32
_RcIpRedistributeInterVrfSetTag_Object = MibTableColumn
rcIpRedistributeInterVrfSetTag = _RcIpRedistributeInterVrfSetTag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 9),
    _RcIpRedistributeInterVrfSetTag_Type()
)
rcIpRedistributeInterVrfSetTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfSetTag.setStatus("current")


class _RcIpRedistributeInterVrfSubnets_Type(Integer32):
    """Custom type rcIpRedistributeInterVrfSubnets based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allow", 1),
          ("suppress", 2))
    )


_RcIpRedistributeInterVrfSubnets_Type.__name__ = "Integer32"
_RcIpRedistributeInterVrfSubnets_Object = MibTableColumn
rcIpRedistributeInterVrfSubnets = _RcIpRedistributeInterVrfSubnets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 10),
    _RcIpRedistributeInterVrfSubnets_Type()
)
rcIpRedistributeInterVrfSubnets.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfSubnets.setStatus("current")
_RcIpRedistributeInterVrfRoutePolicy_Type = DisplayString
_RcIpRedistributeInterVrfRoutePolicy_Object = MibTableColumn
rcIpRedistributeInterVrfRoutePolicy = _RcIpRedistributeInterVrfRoutePolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 11),
    _RcIpRedistributeInterVrfRoutePolicy_Type()
)
rcIpRedistributeInterVrfRoutePolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfRoutePolicy.setStatus("current")
_RcIpRedistributeInterVrfASNumber_Type = Integer32
_RcIpRedistributeInterVrfASNumber_Object = MibTableColumn
rcIpRedistributeInterVrfASNumber = _RcIpRedistributeInterVrfASNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 12),
    _RcIpRedistributeInterVrfASNumber_Type()
)
rcIpRedistributeInterVrfASNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfASNumber.setStatus("current")
_RcIpRedistributeInterVrfWeight_Type = Integer32
_RcIpRedistributeInterVrfWeight_Object = MibTableColumn
rcIpRedistributeInterVrfWeight = _RcIpRedistributeInterVrfWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 13),
    _RcIpRedistributeInterVrfWeight_Type()
)
rcIpRedistributeInterVrfWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfWeight.setStatus("current")
_RcIpRedistributeInterVrfDefaultOriginate_Type = Integer32
_RcIpRedistributeInterVrfDefaultOriginate_Object = MibTableColumn
rcIpRedistributeInterVrfDefaultOriginate = _RcIpRedistributeInterVrfDefaultOriginate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 14),
    _RcIpRedistributeInterVrfDefaultOriginate_Type()
)
rcIpRedistributeInterVrfDefaultOriginate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfDefaultOriginate.setStatus("current")
_RcIpRedistributeInterVrfRowStatus_Type = RowStatus
_RcIpRedistributeInterVrfRowStatus_Object = MibTableColumn
rcIpRedistributeInterVrfRowStatus = _RcIpRedistributeInterVrfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 22, 1, 15),
    _RcIpRedistributeInterVrfRowStatus_Type()
)
rcIpRedistributeInterVrfRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpRedistributeInterVrfRowStatus.setStatus("current")
_RcIpExtCommunityAccessListTableSize_Type = Integer32
_RcIpExtCommunityAccessListTableSize_Object = MibScalar
rcIpExtCommunityAccessListTableSize = _RcIpExtCommunityAccessListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 23),
    _RcIpExtCommunityAccessListTableSize_Type()
)
rcIpExtCommunityAccessListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListTableSize.setStatus("current")
_RcIpExtCommunityAccessListTable_Object = MibTable
rcIpExtCommunityAccessListTable = _RcIpExtCommunityAccessListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24)
)
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListTable.setStatus("current")
_RcIpExtCommunityAccessListEntry_Object = MibTableRow
rcIpExtCommunityAccessListEntry = _RcIpExtCommunityAccessListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1)
)
rcIpExtCommunityAccessListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpExtCommunityAccessListId"),
    (0, "RAPID-CITY", "rcIpExtCommunityAccessListMemberId"),
)
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListEntry.setStatus("current")


class _RcIpExtCommunityAccessListId_Type(Integer32):
    """Custom type rcIpExtCommunityAccessListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_RcIpExtCommunityAccessListId_Type.__name__ = "Integer32"
_RcIpExtCommunityAccessListId_Object = MibTableColumn
rcIpExtCommunityAccessListId = _RcIpExtCommunityAccessListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 1),
    _RcIpExtCommunityAccessListId_Type()
)
rcIpExtCommunityAccessListId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListId.setStatus("current")


class _RcIpExtCommunityAccessListMemberId_Type(Integer32):
    """Custom type rcIpExtCommunityAccessListMemberId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpExtCommunityAccessListMemberId_Type.__name__ = "Integer32"
_RcIpExtCommunityAccessListMemberId_Object = MibTableColumn
rcIpExtCommunityAccessListMemberId = _RcIpExtCommunityAccessListMemberId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 2),
    _RcIpExtCommunityAccessListMemberId_Type()
)
rcIpExtCommunityAccessListMemberId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListMemberId.setStatus("current")


class _RcIpExtCommunityAccessListRTType_Type(Integer32):
    """Custom type rcIpExtCommunityAccessListRTType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asnum", 1),
          ("ipaddr", 2),
          ("none", 0))
    )


_RcIpExtCommunityAccessListRTType_Type.__name__ = "Integer32"
_RcIpExtCommunityAccessListRTType_Object = MibTableColumn
rcIpExtCommunityAccessListRTType = _RcIpExtCommunityAccessListRTType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 3),
    _RcIpExtCommunityAccessListRTType_Type()
)
rcIpExtCommunityAccessListRTType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListRTType.setStatus("current")
_RcIpExtCommunityAccessListRTAddress_Type = IpAddress
_RcIpExtCommunityAccessListRTAddress_Object = MibTableColumn
rcIpExtCommunityAccessListRTAddress = _RcIpExtCommunityAccessListRTAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 4),
    _RcIpExtCommunityAccessListRTAddress_Type()
)
rcIpExtCommunityAccessListRTAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListRTAddress.setStatus("current")


class _RcIpExtCommunityAccessListRTAsNumber_Type(Integer32):
    """Custom type rcIpExtCommunityAccessListRTAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpExtCommunityAccessListRTAsNumber_Type.__name__ = "Integer32"
_RcIpExtCommunityAccessListRTAsNumber_Object = MibTableColumn
rcIpExtCommunityAccessListRTAsNumber = _RcIpExtCommunityAccessListRTAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 5),
    _RcIpExtCommunityAccessListRTAsNumber_Type()
)
rcIpExtCommunityAccessListRTAsNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListRTAsNumber.setStatus("current")


class _RcIpExtCommunityAccessListRTAssignedNum_Type(Unsigned32):
    """Custom type rcIpExtCommunityAccessListRTAssignedNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpExtCommunityAccessListRTAssignedNum_Type.__name__ = "Unsigned32"
_RcIpExtCommunityAccessListRTAssignedNum_Object = MibTableColumn
rcIpExtCommunityAccessListRTAssignedNum = _RcIpExtCommunityAccessListRTAssignedNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 6),
    _RcIpExtCommunityAccessListRTAssignedNum_Type()
)
rcIpExtCommunityAccessListRTAssignedNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListRTAssignedNum.setStatus("current")


class _RcIpExtCommunityAccessListSooType_Type(Integer32):
    """Custom type rcIpExtCommunityAccessListSooType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asnum", 1),
          ("ipaddr", 2),
          ("none", 0))
    )


_RcIpExtCommunityAccessListSooType_Type.__name__ = "Integer32"
_RcIpExtCommunityAccessListSooType_Object = MibTableColumn
rcIpExtCommunityAccessListSooType = _RcIpExtCommunityAccessListSooType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 7),
    _RcIpExtCommunityAccessListSooType_Type()
)
rcIpExtCommunityAccessListSooType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListSooType.setStatus("current")
_RcIpExtCommunityAccessListSooAddress_Type = IpAddress
_RcIpExtCommunityAccessListSooAddress_Object = MibTableColumn
rcIpExtCommunityAccessListSooAddress = _RcIpExtCommunityAccessListSooAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 8),
    _RcIpExtCommunityAccessListSooAddress_Type()
)
rcIpExtCommunityAccessListSooAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListSooAddress.setStatus("current")


class _RcIpExtCommunityAccessListSooAsNumber_Type(Integer32):
    """Custom type rcIpExtCommunityAccessListSooAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpExtCommunityAccessListSooAsNumber_Type.__name__ = "Integer32"
_RcIpExtCommunityAccessListSooAsNumber_Object = MibTableColumn
rcIpExtCommunityAccessListSooAsNumber = _RcIpExtCommunityAccessListSooAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 9),
    _RcIpExtCommunityAccessListSooAsNumber_Type()
)
rcIpExtCommunityAccessListSooAsNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListSooAsNumber.setStatus("current")


class _RcIpExtCommunityAccessListSooAssignedNum_Type(Unsigned32):
    """Custom type rcIpExtCommunityAccessListSooAssignedNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpExtCommunityAccessListSooAssignedNum_Type.__name__ = "Unsigned32"
_RcIpExtCommunityAccessListSooAssignedNum_Object = MibTableColumn
rcIpExtCommunityAccessListSooAssignedNum = _RcIpExtCommunityAccessListSooAssignedNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 10),
    _RcIpExtCommunityAccessListSooAssignedNum_Type()
)
rcIpExtCommunityAccessListSooAssignedNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListSooAssignedNum.setStatus("current")
_RcIpExtCommunityAccessListVrfId_Type = VrfIdentifier
_RcIpExtCommunityAccessListVrfId_Object = MibTableColumn
rcIpExtCommunityAccessListVrfId = _RcIpExtCommunityAccessListVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 11),
    _RcIpExtCommunityAccessListVrfId_Type()
)
rcIpExtCommunityAccessListVrfId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListVrfId.setStatus("current")
_RcIpExtCommunityAccessListRowStatus_Type = RowStatus
_RcIpExtCommunityAccessListRowStatus_Object = MibTableColumn
rcIpExtCommunityAccessListRowStatus = _RcIpExtCommunityAccessListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 24, 1, 12),
    _RcIpExtCommunityAccessListRowStatus_Type()
)
rcIpExtCommunityAccessListRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtCommunityAccessListRowStatus.setStatus("current")
_RcIpExtACLTable_Object = MibTable
rcIpExtACLTable = _RcIpExtACLTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 25)
)
if mibBuilder.loadTexts:
    rcIpExtACLTable.setStatus("current")
_RcIpExtACLEntry_Object = MibTableRow
rcIpExtACLEntry = _RcIpExtACLEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 25, 1)
)
rcIpExtACLEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpExtACLPrefixSourceAddr"),
    (0, "RAPID-CITY", "rcIpExtACLPrefixSourceMask"),
    (0, "RAPID-CITY", "rcIpExtACLPrefixDestinationAddr"),
    (0, "RAPID-CITY", "rcIpExtACLPrefixDestinationMask"),
    (0, "RAPID-CITY", "rcIpExtACLPrefixName"),
)
if mibBuilder.loadTexts:
    rcIpExtACLEntry.setStatus("current")
_RcIpExtACLPrefixSourceAddr_Type = IpAddress
_RcIpExtACLPrefixSourceAddr_Object = MibTableColumn
rcIpExtACLPrefixSourceAddr = _RcIpExtACLPrefixSourceAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 25, 1, 1),
    _RcIpExtACLPrefixSourceAddr_Type()
)
rcIpExtACLPrefixSourceAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpExtACLPrefixSourceAddr.setStatus("current")
_RcIpExtACLPrefixSourceMask_Type = IpAddress
_RcIpExtACLPrefixSourceMask_Object = MibTableColumn
rcIpExtACLPrefixSourceMask = _RcIpExtACLPrefixSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 25, 1, 2),
    _RcIpExtACLPrefixSourceMask_Type()
)
rcIpExtACLPrefixSourceMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpExtACLPrefixSourceMask.setStatus("current")
_RcIpExtACLPrefixDestinationAddr_Type = IpAddress
_RcIpExtACLPrefixDestinationAddr_Object = MibTableColumn
rcIpExtACLPrefixDestinationAddr = _RcIpExtACLPrefixDestinationAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 25, 1, 3),
    _RcIpExtACLPrefixDestinationAddr_Type()
)
rcIpExtACLPrefixDestinationAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpExtACLPrefixDestinationAddr.setStatus("current")
_RcIpExtACLPrefixDestinationMask_Type = IpAddress
_RcIpExtACLPrefixDestinationMask_Object = MibTableColumn
rcIpExtACLPrefixDestinationMask = _RcIpExtACLPrefixDestinationMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 25, 1, 4),
    _RcIpExtACLPrefixDestinationMask_Type()
)
rcIpExtACLPrefixDestinationMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpExtACLPrefixDestinationMask.setStatus("current")


class _RcIpExtACLPrefixName_Type(SnmpAdminString):
    """Custom type rcIpExtACLPrefixName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_RcIpExtACLPrefixName_Type.__name__ = "SnmpAdminString"
_RcIpExtACLPrefixName_Object = MibTableColumn
rcIpExtACLPrefixName = _RcIpExtACLPrefixName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 25, 1, 5),
    _RcIpExtACLPrefixName_Type()
)
rcIpExtACLPrefixName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpExtACLPrefixName.setStatus("current")
_RcIpExtACLPrefixRowStatus_Type = RowStatus
_RcIpExtACLPrefixRowStatus_Object = MibTableColumn
rcIpExtACLPrefixRowStatus = _RcIpExtACLPrefixRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 100, 25, 1, 6),
    _RcIpExtACLPrefixRowStatus_Type()
)
rcIpExtACLPrefixRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpExtACLPrefixRowStatus.setStatus("current")
_RcIpBgp_ObjectIdentity = ObjectIdentity
rcIpBgp = _RcIpBgp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101)
)
_RcIpBgpGeneralGroup_ObjectIdentity = ObjectIdentity
rcIpBgpGeneralGroup = _RcIpBgpGeneralGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1)
)


class _RcIpBgpGeneralGroupLocalAs_Type(Integer32):
    """Custom type rcIpBgpGeneralGroupLocalAs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpGeneralGroupLocalAs_Type.__name__ = "Integer32"
_RcIpBgpGeneralGroupLocalAs_Object = MibScalar
rcIpBgpGeneralGroupLocalAs = _RcIpBgpGeneralGroupLocalAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 1),
    _RcIpBgpGeneralGroupLocalAs_Type()
)
rcIpBgpGeneralGroupLocalAs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupLocalAs.setStatus("current")


class _RcIpBgpGeneralGroupAdminStatus_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupAdminStatus based on EnableValue"""


_RcIpBgpGeneralGroupAdminStatus_Object = MibScalar
rcIpBgpGeneralGroupAdminStatus = _RcIpBgpGeneralGroupAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 2),
    _RcIpBgpGeneralGroupAdminStatus_Type()
)
rcIpBgpGeneralGroupAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupAdminStatus.setStatus("current")


class _RcIpBgpGeneralGroupDefaultMetric_Type(Integer32):
    """Custom type rcIpBgpGeneralGroupDefaultMetric based on Integer32"""
    defaultValue = -1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_RcIpBgpGeneralGroupDefaultMetric_Type.__name__ = "Integer32"
_RcIpBgpGeneralGroupDefaultMetric_Object = MibScalar
rcIpBgpGeneralGroupDefaultMetric = _RcIpBgpGeneralGroupDefaultMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 3),
    _RcIpBgpGeneralGroupDefaultMetric_Type()
)
rcIpBgpGeneralGroupDefaultMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupDefaultMetric.setStatus("current")


class _RcIpBgpGeneralGroupDefaultLocalPreference_Type(Integer32):
    """Custom type rcIpBgpGeneralGroupDefaultLocalPreference based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpBgpGeneralGroupDefaultLocalPreference_Type.__name__ = "Integer32"
_RcIpBgpGeneralGroupDefaultLocalPreference_Object = MibScalar
rcIpBgpGeneralGroupDefaultLocalPreference = _RcIpBgpGeneralGroupDefaultLocalPreference_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 4),
    _RcIpBgpGeneralGroupDefaultLocalPreference_Type()
)
rcIpBgpGeneralGroupDefaultLocalPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupDefaultLocalPreference.setStatus("current")


class _RcIpBgpGeneralGroupDefaultInformationOriginate_Type(TruthValue):
    """Custom type rcIpBgpGeneralGroupDefaultInformationOriginate based on TruthValue"""


_RcIpBgpGeneralGroupDefaultInformationOriginate_Object = MibScalar
rcIpBgpGeneralGroupDefaultInformationOriginate = _RcIpBgpGeneralGroupDefaultInformationOriginate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 5),
    _RcIpBgpGeneralGroupDefaultInformationOriginate_Type()
)
rcIpBgpGeneralGroupDefaultInformationOriginate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupDefaultInformationOriginate.setStatus("current")


class _RcIpBgpGeneralGroupBestPathMissingAsWorst_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupBestPathMissingAsWorst based on EnableValue"""


_RcIpBgpGeneralGroupBestPathMissingAsWorst_Object = MibScalar
rcIpBgpGeneralGroupBestPathMissingAsWorst = _RcIpBgpGeneralGroupBestPathMissingAsWorst_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 6),
    _RcIpBgpGeneralGroupBestPathMissingAsWorst_Type()
)
rcIpBgpGeneralGroupBestPathMissingAsWorst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupBestPathMissingAsWorst.setStatus("current")


class _RcIpBgpGeneralGroupBestPathMedConfed_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupBestPathMedConfed based on EnableValue"""


_RcIpBgpGeneralGroupBestPathMedConfed_Object = MibScalar
rcIpBgpGeneralGroupBestPathMedConfed = _RcIpBgpGeneralGroupBestPathMedConfed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 7),
    _RcIpBgpGeneralGroupBestPathMedConfed_Type()
)
rcIpBgpGeneralGroupBestPathMedConfed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupBestPathMedConfed.setStatus("current")


class _RcIpBgpGeneralGroupIgnoreIllegalRouterId_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupIgnoreIllegalRouterId based on EnableValue"""


_RcIpBgpGeneralGroupIgnoreIllegalRouterId_Object = MibScalar
rcIpBgpGeneralGroupIgnoreIllegalRouterId = _RcIpBgpGeneralGroupIgnoreIllegalRouterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 8),
    _RcIpBgpGeneralGroupIgnoreIllegalRouterId_Type()
)
rcIpBgpGeneralGroupIgnoreIllegalRouterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupIgnoreIllegalRouterId.setStatus("current")


class _RcIpBgpGeneralGroupAlwaysCompareMed_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupAlwaysCompareMed based on EnableValue"""


_RcIpBgpGeneralGroupAlwaysCompareMed_Object = MibScalar
rcIpBgpGeneralGroupAlwaysCompareMed = _RcIpBgpGeneralGroupAlwaysCompareMed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 9),
    _RcIpBgpGeneralGroupAlwaysCompareMed_Type()
)
rcIpBgpGeneralGroupAlwaysCompareMed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupAlwaysCompareMed.setStatus("current")


class _RcIpBgpGeneralGroupAutoPeerRestart_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupAutoPeerRestart based on EnableValue"""


_RcIpBgpGeneralGroupAutoPeerRestart_Object = MibScalar
rcIpBgpGeneralGroupAutoPeerRestart = _RcIpBgpGeneralGroupAutoPeerRestart_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 10),
    _RcIpBgpGeneralGroupAutoPeerRestart_Type()
)
rcIpBgpGeneralGroupAutoPeerRestart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupAutoPeerRestart.setStatus("current")


class _RcIpBgpGeneralGroupAutoSummary_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupAutoSummary based on EnableValue"""


_RcIpBgpGeneralGroupAutoSummary_Object = MibScalar
rcIpBgpGeneralGroupAutoSummary = _RcIpBgpGeneralGroupAutoSummary_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 11),
    _RcIpBgpGeneralGroupAutoSummary_Type()
)
rcIpBgpGeneralGroupAutoSummary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupAutoSummary.setStatus("current")


class _RcIpBgpGeneralGroupSynchronization_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupSynchronization based on EnableValue"""


_RcIpBgpGeneralGroupSynchronization_Object = MibScalar
rcIpBgpGeneralGroupSynchronization = _RcIpBgpGeneralGroupSynchronization_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 12),
    _RcIpBgpGeneralGroupSynchronization_Type()
)
rcIpBgpGeneralGroupSynchronization.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupSynchronization.setStatus("current")


class _RcIpBgpGeneralGroupMaxEqualcostRoutes_Type(Integer32):
    """Custom type rcIpBgpGeneralGroupMaxEqualcostRoutes based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RcIpBgpGeneralGroupMaxEqualcostRoutes_Type.__name__ = "Integer32"
_RcIpBgpGeneralGroupMaxEqualcostRoutes_Object = MibScalar
rcIpBgpGeneralGroupMaxEqualcostRoutes = _RcIpBgpGeneralGroupMaxEqualcostRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 13),
    _RcIpBgpGeneralGroupMaxEqualcostRoutes_Type()
)
rcIpBgpGeneralGroupMaxEqualcostRoutes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupMaxEqualcostRoutes.setStatus("current")


class _RcIpBgpGeneralGroupIbgpReportImportRoute_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupIbgpReportImportRoute based on EnableValue"""


_RcIpBgpGeneralGroupIbgpReportImportRoute_Object = MibScalar
rcIpBgpGeneralGroupIbgpReportImportRoute = _RcIpBgpGeneralGroupIbgpReportImportRoute_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 14),
    _RcIpBgpGeneralGroupIbgpReportImportRoute_Type()
)
rcIpBgpGeneralGroupIbgpReportImportRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupIbgpReportImportRoute.setStatus("current")


class _RcIpBgpGeneralGroupAggregate_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupAggregate based on EnableValue"""


_RcIpBgpGeneralGroupAggregate_Object = MibScalar
rcIpBgpGeneralGroupAggregate = _RcIpBgpGeneralGroupAggregate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 15),
    _RcIpBgpGeneralGroupAggregate_Type()
)
rcIpBgpGeneralGroupAggregate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupAggregate.setStatus("current")


class _RcIpBgpGeneralGroupFlapDampEnable_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupFlapDampEnable based on EnableValue"""


_RcIpBgpGeneralGroupFlapDampEnable_Object = MibScalar
rcIpBgpGeneralGroupFlapDampEnable = _RcIpBgpGeneralGroupFlapDampEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 16),
    _RcIpBgpGeneralGroupFlapDampEnable_Type()
)
rcIpBgpGeneralGroupFlapDampEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupFlapDampEnable.setStatus("current")


class _RcIpBgpGeneralGroupDebugMask_Type(Integer32):
    """Custom type rcIpBgpGeneralGroupDebugMask based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 511),
    )


_RcIpBgpGeneralGroupDebugMask_Type.__name__ = "Integer32"
_RcIpBgpGeneralGroupDebugMask_Object = MibScalar
rcIpBgpGeneralGroupDebugMask = _RcIpBgpGeneralGroupDebugMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 17),
    _RcIpBgpGeneralGroupDebugMask_Type()
)
rcIpBgpGeneralGroupDebugMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupDebugMask.setStatus("current")


class _RcIpBgpGeneralGroupTrapEnable_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupTrapEnable based on EnableValue"""


_RcIpBgpGeneralGroupTrapEnable_Object = MibScalar
rcIpBgpGeneralGroupTrapEnable = _RcIpBgpGeneralGroupTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 18),
    _RcIpBgpGeneralGroupTrapEnable_Type()
)
rcIpBgpGeneralGroupTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupTrapEnable.setStatus("current")


class _RcIpBgpGeneralGroupQuickStart_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupQuickStart based on EnableValue"""


_RcIpBgpGeneralGroupQuickStart_Object = MibScalar
rcIpBgpGeneralGroupQuickStart = _RcIpBgpGeneralGroupQuickStart_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 19),
    _RcIpBgpGeneralGroupQuickStart_Type()
)
rcIpBgpGeneralGroupQuickStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupQuickStart.setStatus("current")


class _RcIpBgpGeneralGroupDeterministicMed_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupDeterministicMed based on EnableValue"""


_RcIpBgpGeneralGroupDeterministicMed_Object = MibScalar
rcIpBgpGeneralGroupDeterministicMed = _RcIpBgpGeneralGroupDeterministicMed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 20),
    _RcIpBgpGeneralGroupDeterministicMed_Type()
)
rcIpBgpGeneralGroupDeterministicMed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupDeterministicMed.setStatus("current")


class _RcIpBgpGeneralGroupRouteRefresh_Type(EnableValue):
    """Custom type rcIpBgpGeneralGroupRouteRefresh based on EnableValue"""


_RcIpBgpGeneralGroupRouteRefresh_Object = MibScalar
rcIpBgpGeneralGroupRouteRefresh = _RcIpBgpGeneralGroupRouteRefresh_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 21),
    _RcIpBgpGeneralGroupRouteRefresh_Type()
)
rcIpBgpGeneralGroupRouteRefresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupRouteRefresh.setStatus("current")


class _RcIpBgpGeneralGroupRoutePolicyIn_Type(DisplayString):
    """Custom type rcIpBgpGeneralGroupRoutePolicyIn based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpGeneralGroupRoutePolicyIn_Type.__name__ = "DisplayString"
_RcIpBgpGeneralGroupRoutePolicyIn_Object = MibScalar
rcIpBgpGeneralGroupRoutePolicyIn = _RcIpBgpGeneralGroupRoutePolicyIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 22),
    _RcIpBgpGeneralGroupRoutePolicyIn_Type()
)
rcIpBgpGeneralGroupRoutePolicyIn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupRoutePolicyIn.setStatus("current")


class _RcIpBgpGeneralGroupRoutePolicyOut_Type(DisplayString):
    """Custom type rcIpBgpGeneralGroupRoutePolicyOut based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpGeneralGroupRoutePolicyOut_Type.__name__ = "DisplayString"
_RcIpBgpGeneralGroupRoutePolicyOut_Object = MibScalar
rcIpBgpGeneralGroupRoutePolicyOut = _RcIpBgpGeneralGroupRoutePolicyOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 23),
    _RcIpBgpGeneralGroupRoutePolicyOut_Type()
)
rcIpBgpGeneralGroupRoutePolicyOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupRoutePolicyOut.setStatus("current")


class _RcIpBgpGeneralGroupDefaultInformationOriginateIpv6_Type(TruthValue):
    """Custom type rcIpBgpGeneralGroupDefaultInformationOriginateIpv6 based on TruthValue"""


_RcIpBgpGeneralGroupDefaultInformationOriginateIpv6_Object = MibScalar
rcIpBgpGeneralGroupDefaultInformationOriginateIpv6 = _RcIpBgpGeneralGroupDefaultInformationOriginateIpv6_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 24),
    _RcIpBgpGeneralGroupDefaultInformationOriginateIpv6_Type()
)
rcIpBgpGeneralGroupDefaultInformationOriginateIpv6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupDefaultInformationOriginateIpv6.setStatus("current")


class _RcIpBgpGeneralGroupNewLocalAs_Type(OctetString):
    """Custom type rcIpBgpGeneralGroupNewLocalAs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_RcIpBgpGeneralGroupNewLocalAs_Type.__name__ = "OctetString"
_RcIpBgpGeneralGroupNewLocalAs_Object = MibScalar
rcIpBgpGeneralGroupNewLocalAs = _RcIpBgpGeneralGroupNewLocalAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 25),
    _RcIpBgpGeneralGroupNewLocalAs_Type()
)
rcIpBgpGeneralGroupNewLocalAs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupNewLocalAs.setStatus("current")
_RcIpBgpGeneralGroup4ByteAs_Type = EnableValue
_RcIpBgpGeneralGroup4ByteAs_Object = MibScalar
rcIpBgpGeneralGroup4ByteAs = _RcIpBgpGeneralGroup4ByteAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 26),
    _RcIpBgpGeneralGroup4ByteAs_Type()
)
rcIpBgpGeneralGroup4ByteAs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroup4ByteAs.setStatus("current")
_RcIpBgpGeneralGroupAsDot_Type = EnableValue
_RcIpBgpGeneralGroupAsDot_Object = MibScalar
rcIpBgpGeneralGroupAsDot = _RcIpBgpGeneralGroupAsDot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 1, 27),
    _RcIpBgpGeneralGroupAsDot_Type()
)
rcIpBgpGeneralGroupAsDot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpGeneralGroupAsDot.setStatus("current")
_RcIpBgpAggregateTableSize_Type = Integer32
_RcIpBgpAggregateTableSize_Object = MibScalar
rcIpBgpAggregateTableSize = _RcIpBgpAggregateTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 2),
    _RcIpBgpAggregateTableSize_Type()
)
rcIpBgpAggregateTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpAggregateTableSize.setStatus("deprecated")
_RcIpBgpAggregateTable_Object = MibTable
rcIpBgpAggregateTable = _RcIpBgpAggregateTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3)
)
if mibBuilder.loadTexts:
    rcIpBgpAggregateTable.setStatus("deprecated")
_RcIpBgpAggregateEntry_Object = MibTableRow
rcIpBgpAggregateEntry = _RcIpBgpAggregateEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1)
)
rcIpBgpAggregateEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpAggregateAddress"),
    (0, "RAPID-CITY", "rcIpBgpAggregateMask"),
)
if mibBuilder.loadTexts:
    rcIpBgpAggregateEntry.setStatus("current")
_RcIpBgpAggregateAddress_Type = IpAddress
_RcIpBgpAggregateAddress_Object = MibTableColumn
rcIpBgpAggregateAddress = _RcIpBgpAggregateAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1, 1),
    _RcIpBgpAggregateAddress_Type()
)
rcIpBgpAggregateAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpAggregateAddress.setStatus("current")
_RcIpBgpAggregateMask_Type = IpAddress
_RcIpBgpAggregateMask_Object = MibTableColumn
rcIpBgpAggregateMask = _RcIpBgpAggregateMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1, 2),
    _RcIpBgpAggregateMask_Type()
)
rcIpBgpAggregateMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpAggregateMask.setStatus("current")


class _RcIpBgpAggregateAsSetGenerate_Type(EnableValue):
    """Custom type rcIpBgpAggregateAsSetGenerate based on EnableValue"""


_RcIpBgpAggregateAsSetGenerate_Object = MibTableColumn
rcIpBgpAggregateAsSetGenerate = _RcIpBgpAggregateAsSetGenerate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1, 3),
    _RcIpBgpAggregateAsSetGenerate_Type()
)
rcIpBgpAggregateAsSetGenerate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpAggregateAsSetGenerate.setStatus("current")


class _RcIpBgpAggregateSummaryOnly_Type(EnableValue):
    """Custom type rcIpBgpAggregateSummaryOnly based on EnableValue"""


_RcIpBgpAggregateSummaryOnly_Object = MibTableColumn
rcIpBgpAggregateSummaryOnly = _RcIpBgpAggregateSummaryOnly_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1, 4),
    _RcIpBgpAggregateSummaryOnly_Type()
)
rcIpBgpAggregateSummaryOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpAggregateSummaryOnly.setStatus("current")


class _RcIpBgpAggregateSuppressPolicy_Type(DisplayString):
    """Custom type rcIpBgpAggregateSuppressPolicy based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpAggregateSuppressPolicy_Type.__name__ = "DisplayString"
_RcIpBgpAggregateSuppressPolicy_Object = MibTableColumn
rcIpBgpAggregateSuppressPolicy = _RcIpBgpAggregateSuppressPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1, 5),
    _RcIpBgpAggregateSuppressPolicy_Type()
)
rcIpBgpAggregateSuppressPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpAggregateSuppressPolicy.setStatus("current")


class _RcIpBgpAggregateAdvertisePolicy_Type(DisplayString):
    """Custom type rcIpBgpAggregateAdvertisePolicy based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpAggregateAdvertisePolicy_Type.__name__ = "DisplayString"
_RcIpBgpAggregateAdvertisePolicy_Object = MibTableColumn
rcIpBgpAggregateAdvertisePolicy = _RcIpBgpAggregateAdvertisePolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1, 6),
    _RcIpBgpAggregateAdvertisePolicy_Type()
)
rcIpBgpAggregateAdvertisePolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpAggregateAdvertisePolicy.setStatus("current")


class _RcIpBgpAggregateAttributePolicy_Type(DisplayString):
    """Custom type rcIpBgpAggregateAttributePolicy based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpAggregateAttributePolicy_Type.__name__ = "DisplayString"
_RcIpBgpAggregateAttributePolicy_Object = MibTableColumn
rcIpBgpAggregateAttributePolicy = _RcIpBgpAggregateAttributePolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1, 7),
    _RcIpBgpAggregateAttributePolicy_Type()
)
rcIpBgpAggregateAttributePolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpAggregateAttributePolicy.setStatus("current")
_RcIpBgpAggregateRowStatus_Type = RowStatus
_RcIpBgpAggregateRowStatus_Object = MibTableColumn
rcIpBgpAggregateRowStatus = _RcIpBgpAggregateRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 3, 1, 8),
    _RcIpBgpAggregateRowStatus_Type()
)
rcIpBgpAggregateRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpAggregateRowStatus.setStatus("current")
_RcIpBgpConfederationGroup_ObjectIdentity = ObjectIdentity
rcIpBgpConfederationGroup = _RcIpBgpConfederationGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 4)
)


class _RcIpBgpConfederationIdentifier_Type(Integer32):
    """Custom type rcIpBgpConfederationIdentifier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpConfederationIdentifier_Type.__name__ = "Integer32"
_RcIpBgpConfederationIdentifier_Object = MibScalar
rcIpBgpConfederationIdentifier = _RcIpBgpConfederationIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 4, 1),
    _RcIpBgpConfederationIdentifier_Type()
)
rcIpBgpConfederationIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpConfederationIdentifier.setStatus("current")


class _RcIpBgpConfederationPeers_Type(OctetString):
    """Custom type rcIpBgpConfederationPeers based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIpBgpConfederationPeers_Type.__name__ = "OctetString"
_RcIpBgpConfederationPeers_Object = MibScalar
rcIpBgpConfederationPeers = _RcIpBgpConfederationPeers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 4, 2),
    _RcIpBgpConfederationPeers_Type()
)
rcIpBgpConfederationPeers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpConfederationPeers.setStatus("current")
_RcIpBgpRouteReflectorGroup_ObjectIdentity = ObjectIdentity
rcIpBgpRouteReflectorGroup = _RcIpBgpRouteReflectorGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 5)
)


class _RcIpBgpRouteReflectionEnable_Type(EnableValue):
    """Custom type rcIpBgpRouteReflectionEnable based on EnableValue"""


_RcIpBgpRouteReflectionEnable_Object = MibScalar
rcIpBgpRouteReflectionEnable = _RcIpBgpRouteReflectionEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 5, 1),
    _RcIpBgpRouteReflectionEnable_Type()
)
rcIpBgpRouteReflectionEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpRouteReflectionEnable.setStatus("current")
_RcIpBgpRouteReflectorClusterId_Type = IpAddress
_RcIpBgpRouteReflectorClusterId_Object = MibScalar
rcIpBgpRouteReflectorClusterId = _RcIpBgpRouteReflectorClusterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 5, 2),
    _RcIpBgpRouteReflectorClusterId_Type()
)
rcIpBgpRouteReflectorClusterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpRouteReflectorClusterId.setStatus("current")


class _RcIpBgpRouteReflectorClientToClientReflection_Type(EnableValue):
    """Custom type rcIpBgpRouteReflectorClientToClientReflection based on EnableValue"""


_RcIpBgpRouteReflectorClientToClientReflection_Object = MibScalar
rcIpBgpRouteReflectorClientToClientReflection = _RcIpBgpRouteReflectorClientToClientReflection_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 5, 3),
    _RcIpBgpRouteReflectorClientToClientReflection_Type()
)
rcIpBgpRouteReflectorClientToClientReflection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpRouteReflectorClientToClientReflection.setStatus("current")
_RcIpBgpRouteReflectionOperState_Type = EnableValue
_RcIpBgpRouteReflectionOperState_Object = MibScalar
rcIpBgpRouteReflectionOperState = _RcIpBgpRouteReflectionOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 5, 4),
    _RcIpBgpRouteReflectionOperState_Type()
)
rcIpBgpRouteReflectionOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpRouteReflectionOperState.setStatus("current")
_RcIpBgpNetworkTableSize_Type = Integer32
_RcIpBgpNetworkTableSize_Object = MibScalar
rcIpBgpNetworkTableSize = _RcIpBgpNetworkTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 6),
    _RcIpBgpNetworkTableSize_Type()
)
rcIpBgpNetworkTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpNetworkTableSize.setStatus("deprecated")
_RcIpBgpNetworkTable_Object = MibTable
rcIpBgpNetworkTable = _RcIpBgpNetworkTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 7)
)
if mibBuilder.loadTexts:
    rcIpBgpNetworkTable.setStatus("deprecated")
_RcIpBgpNetworkEntry_Object = MibTableRow
rcIpBgpNetworkEntry = _RcIpBgpNetworkEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 7, 1)
)
rcIpBgpNetworkEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpNetworkAddr"),
    (0, "RAPID-CITY", "rcIpBgpNetworkMask"),
)
if mibBuilder.loadTexts:
    rcIpBgpNetworkEntry.setStatus("current")
_RcIpBgpNetworkAddr_Type = IpAddress
_RcIpBgpNetworkAddr_Object = MibTableColumn
rcIpBgpNetworkAddr = _RcIpBgpNetworkAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 7, 1, 1),
    _RcIpBgpNetworkAddr_Type()
)
rcIpBgpNetworkAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpNetworkAddr.setStatus("current")
_RcIpBgpNetworkMask_Type = IpAddress
_RcIpBgpNetworkMask_Object = MibTableColumn
rcIpBgpNetworkMask = _RcIpBgpNetworkMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 7, 1, 2),
    _RcIpBgpNetworkMask_Type()
)
rcIpBgpNetworkMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpNetworkMask.setStatus("current")
_RcIpBgpNetworkRowStatus_Type = RowStatus
_RcIpBgpNetworkRowStatus_Object = MibTableColumn
rcIpBgpNetworkRowStatus = _RcIpBgpNetworkRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 7, 1, 3),
    _RcIpBgpNetworkRowStatus_Type()
)
rcIpBgpNetworkRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpNetworkRowStatus.setStatus("current")


class _RcIpBgpNetworkMetric_Type(Integer32):
    """Custom type rcIpBgpNetworkMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpNetworkMetric_Type.__name__ = "Integer32"
_RcIpBgpNetworkMetric_Object = MibTableColumn
rcIpBgpNetworkMetric = _RcIpBgpNetworkMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 7, 1, 4),
    _RcIpBgpNetworkMetric_Type()
)
rcIpBgpNetworkMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpNetworkMetric.setStatus("current")
_RcIpBgpPeerTableSize_Type = Integer32
_RcIpBgpPeerTableSize_Object = MibScalar
rcIpBgpPeerTableSize = _RcIpBgpPeerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 8),
    _RcIpBgpPeerTableSize_Type()
)
rcIpBgpPeerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPeerTableSize.setStatus("deprecated")
_RcIpBgpPeerTable_Object = MibTable
rcIpBgpPeerTable = _RcIpBgpPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9)
)
if mibBuilder.loadTexts:
    rcIpBgpPeerTable.setStatus("deprecated")
_RcIpBgpPeerEntry_Object = MibTableRow
rcIpBgpPeerEntry = _RcIpBgpPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1)
)
rcIpBgpPeerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpPeerIpAddress"),
)
if mibBuilder.loadTexts:
    rcIpBgpPeerEntry.setStatus("current")


class _RcIpBgpPeerEnable_Type(Integer32):
    """Custom type rcIpBgpPeerEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcIpBgpPeerEnable_Type.__name__ = "Integer32"
_RcIpBgpPeerEnable_Object = MibTableColumn
rcIpBgpPeerEnable = _RcIpBgpPeerEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 1),
    _RcIpBgpPeerEnable_Type()
)
rcIpBgpPeerEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerEnable.setStatus("current")
_RcIpBgpPeerIpAddress_Type = IpAddress
_RcIpBgpPeerIpAddress_Object = MibTableColumn
rcIpBgpPeerIpAddress = _RcIpBgpPeerIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 2),
    _RcIpBgpPeerIpAddress_Type()
)
rcIpBgpPeerIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPeerIpAddress.setStatus("current")


class _RcIpBgpPeerRemoteAs_Type(Integer32):
    """Custom type rcIpBgpPeerRemoteAs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpPeerRemoteAs_Type.__name__ = "Integer32"
_RcIpBgpPeerRemoteAs_Object = MibTableColumn
rcIpBgpPeerRemoteAs = _RcIpBgpPeerRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 3),
    _RcIpBgpPeerRemoteAs_Type()
)
rcIpBgpPeerRemoteAs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerRemoteAs.setStatus("current")


class _RcIpBgpPeerGroupName_Type(DisplayString):
    """Custom type rcIpBgpPeerGroupName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIpBgpPeerGroupName_Type.__name__ = "DisplayString"
_RcIpBgpPeerGroupName_Object = MibTableColumn
rcIpBgpPeerGroupName = _RcIpBgpPeerGroupName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 4),
    _RcIpBgpPeerGroupName_Type()
)
rcIpBgpPeerGroupName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupName.setStatus("current")


class _RcIpBgpPeerDefaultOriginate_Type(EnableValue):
    """Custom type rcIpBgpPeerDefaultOriginate based on EnableValue"""


_RcIpBgpPeerDefaultOriginate_Object = MibTableColumn
rcIpBgpPeerDefaultOriginate = _RcIpBgpPeerDefaultOriginate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 5),
    _RcIpBgpPeerDefaultOriginate_Type()
)
rcIpBgpPeerDefaultOriginate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerDefaultOriginate.setStatus("current")


class _RcIpBgpPeerEbgpMultiHop_Type(EnableValue):
    """Custom type rcIpBgpPeerEbgpMultiHop based on EnableValue"""


_RcIpBgpPeerEbgpMultiHop_Object = MibTableColumn
rcIpBgpPeerEbgpMultiHop = _RcIpBgpPeerEbgpMultiHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 6),
    _RcIpBgpPeerEbgpMultiHop_Type()
)
rcIpBgpPeerEbgpMultiHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerEbgpMultiHop.setStatus("current")


class _RcIpBgpPeerAdvertisementInterval_Type(Integer32):
    """Custom type rcIpBgpPeerAdvertisementInterval based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 120),
    )


_RcIpBgpPeerAdvertisementInterval_Type.__name__ = "Integer32"
_RcIpBgpPeerAdvertisementInterval_Object = MibTableColumn
rcIpBgpPeerAdvertisementInterval = _RcIpBgpPeerAdvertisementInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 7),
    _RcIpBgpPeerAdvertisementInterval_Type()
)
rcIpBgpPeerAdvertisementInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerAdvertisementInterval.setStatus("current")


class _RcIpBgpPeerPassword_Type(DisplayString):
    """Custom type rcIpBgpPeerPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_RcIpBgpPeerPassword_Type.__name__ = "DisplayString"
_RcIpBgpPeerPassword_Object = MibTableColumn
rcIpBgpPeerPassword = _RcIpBgpPeerPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 8),
    _RcIpBgpPeerPassword_Type()
)
rcIpBgpPeerPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerPassword.setStatus("current")


class _RcIpBgpPeerWeight_Type(Integer32):
    """Custom type rcIpBgpPeerWeight based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpPeerWeight_Type.__name__ = "Integer32"
_RcIpBgpPeerWeight_Object = MibTableColumn
rcIpBgpPeerWeight = _RcIpBgpPeerWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 9),
    _RcIpBgpPeerWeight_Type()
)
rcIpBgpPeerWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerWeight.setStatus("current")


class _RcIpBgpPeerMaxPrefix_Type(Integer32):
    """Custom type rcIpBgpPeerMaxPrefix based on Integer32"""
    defaultValue = 12000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpBgpPeerMaxPrefix_Type.__name__ = "Integer32"
_RcIpBgpPeerMaxPrefix_Object = MibTableColumn
rcIpBgpPeerMaxPrefix = _RcIpBgpPeerMaxPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 10),
    _RcIpBgpPeerMaxPrefix_Type()
)
rcIpBgpPeerMaxPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerMaxPrefix.setStatus("current")


class _RcIpBgpPeerNextHopSelf_Type(TruthValue):
    """Custom type rcIpBgpPeerNextHopSelf based on TruthValue"""


_RcIpBgpPeerNextHopSelf_Object = MibTableColumn
rcIpBgpPeerNextHopSelf = _RcIpBgpPeerNextHopSelf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 11),
    _RcIpBgpPeerNextHopSelf_Type()
)
rcIpBgpPeerNextHopSelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerNextHopSelf.setStatus("current")


class _RcIpBgpPeerRoutePolicyIn_Type(DisplayString):
    """Custom type rcIpBgpPeerRoutePolicyIn based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpPeerRoutePolicyIn_Type.__name__ = "DisplayString"
_RcIpBgpPeerRoutePolicyIn_Object = MibTableColumn
rcIpBgpPeerRoutePolicyIn = _RcIpBgpPeerRoutePolicyIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 12),
    _RcIpBgpPeerRoutePolicyIn_Type()
)
rcIpBgpPeerRoutePolicyIn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerRoutePolicyIn.setStatus("current")


class _RcIpBgpPeerRoutePolicyOut_Type(DisplayString):
    """Custom type rcIpBgpPeerRoutePolicyOut based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpPeerRoutePolicyOut_Type.__name__ = "DisplayString"
_RcIpBgpPeerRoutePolicyOut_Object = MibTableColumn
rcIpBgpPeerRoutePolicyOut = _RcIpBgpPeerRoutePolicyOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 13),
    _RcIpBgpPeerRoutePolicyOut_Type()
)
rcIpBgpPeerRoutePolicyOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerRoutePolicyOut.setStatus("current")


class _RcIpBgpPeerRouteReflectorClient_Type(TruthValue):
    """Custom type rcIpBgpPeerRouteReflectorClient based on TruthValue"""


_RcIpBgpPeerRouteReflectorClient_Object = MibTableColumn
rcIpBgpPeerRouteReflectorClient = _RcIpBgpPeerRouteReflectorClient_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 14),
    _RcIpBgpPeerRouteReflectorClient_Type()
)
rcIpBgpPeerRouteReflectorClient.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerRouteReflectorClient.setStatus("current")


class _RcIpBgpPeerSoftReconfigurationIn_Type(EnableValue):
    """Custom type rcIpBgpPeerSoftReconfigurationIn based on EnableValue"""


_RcIpBgpPeerSoftReconfigurationIn_Object = MibTableColumn
rcIpBgpPeerSoftReconfigurationIn = _RcIpBgpPeerSoftReconfigurationIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 15),
    _RcIpBgpPeerSoftReconfigurationIn_Type()
)
rcIpBgpPeerSoftReconfigurationIn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerSoftReconfigurationIn.setStatus("current")


class _RcIpBgpPeerSoftReconfiguration_Type(Integer32):
    """Custom type rcIpBgpPeerSoftReconfiguration based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("none", 3),
          ("out", 2))
    )


_RcIpBgpPeerSoftReconfiguration_Type.__name__ = "Integer32"
_RcIpBgpPeerSoftReconfiguration_Object = MibTableColumn
rcIpBgpPeerSoftReconfiguration = _RcIpBgpPeerSoftReconfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 16),
    _RcIpBgpPeerSoftReconfiguration_Type()
)
rcIpBgpPeerSoftReconfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerSoftReconfiguration.setStatus("current")


class _RcIpBgpPeerRemovePrivateAs_Type(EnableValue):
    """Custom type rcIpBgpPeerRemovePrivateAs based on EnableValue"""


_RcIpBgpPeerRemovePrivateAs_Object = MibTableColumn
rcIpBgpPeerRemovePrivateAs = _RcIpBgpPeerRemovePrivateAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 17),
    _RcIpBgpPeerRemovePrivateAs_Type()
)
rcIpBgpPeerRemovePrivateAs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerRemovePrivateAs.setStatus("current")
_RcIpBgpPeerRowStatus_Type = RowStatus
_RcIpBgpPeerRowStatus_Object = MibTableColumn
rcIpBgpPeerRowStatus = _RcIpBgpPeerRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 18),
    _RcIpBgpPeerRowStatus_Type()
)
rcIpBgpPeerRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerRowStatus.setStatus("current")


class _RcIpBgpPeerMD5Authentication_Type(EnableValue):
    """Custom type rcIpBgpPeerMD5Authentication based on EnableValue"""


_RcIpBgpPeerMD5Authentication_Object = MibTableColumn
rcIpBgpPeerMD5Authentication = _RcIpBgpPeerMD5Authentication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 19),
    _RcIpBgpPeerMD5Authentication_Type()
)
rcIpBgpPeerMD5Authentication.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerMD5Authentication.setStatus("current")


class _RcIpBgpPeerDebugMask_Type(Integer32):
    """Custom type rcIpBgpPeerDebugMask based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 511),
    )


_RcIpBgpPeerDebugMask_Type.__name__ = "Integer32"
_RcIpBgpPeerDebugMask_Object = MibTableColumn
rcIpBgpPeerDebugMask = _RcIpBgpPeerDebugMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 20),
    _RcIpBgpPeerDebugMask_Type()
)
rcIpBgpPeerDebugMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerDebugMask.setStatus("current")


class _RcIpBgpPeerSendCommunity_Type(EnableValue):
    """Custom type rcIpBgpPeerSendCommunity based on EnableValue"""


_RcIpBgpPeerSendCommunity_Object = MibTableColumn
rcIpBgpPeerSendCommunity = _RcIpBgpPeerSendCommunity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 21),
    _RcIpBgpPeerSendCommunity_Type()
)
rcIpBgpPeerSendCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerSendCommunity.setStatus("current")
_RcIpBgpPeerUpdateSourceInterface_Type = IpAddress
_RcIpBgpPeerUpdateSourceInterface_Object = MibTableColumn
rcIpBgpPeerUpdateSourceInterface = _RcIpBgpPeerUpdateSourceInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 22),
    _RcIpBgpPeerUpdateSourceInterface_Type()
)
rcIpBgpPeerUpdateSourceInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerUpdateSourceInterface.setStatus("current")


class _RcIpBgpPeerState_Type(Integer32):
    """Custom type rcIpBgpPeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("connect", 2),
          ("established", 6),
          ("idle", 1),
          ("openconfirm", 5),
          ("opensent", 4))
    )


_RcIpBgpPeerState_Type.__name__ = "Integer32"
_RcIpBgpPeerState_Object = MibTableColumn
rcIpBgpPeerState = _RcIpBgpPeerState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 25),
    _RcIpBgpPeerState_Type()
)
rcIpBgpPeerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPeerState.setStatus("current")


class _RcIpBgpPeerLastError_Type(OctetString):
    """Custom type rcIpBgpPeerLastError based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RcIpBgpPeerLastError_Type.__name__ = "OctetString"
_RcIpBgpPeerLastError_Object = MibTableColumn
rcIpBgpPeerLastError = _RcIpBgpPeerLastError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 26),
    _RcIpBgpPeerLastError_Type()
)
rcIpBgpPeerLastError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPeerLastError.setStatus("current")


class _RcIpBgpPeerVpnv4Address_Type(EnableValue):
    """Custom type rcIpBgpPeerVpnv4Address based on EnableValue"""


_RcIpBgpPeerVpnv4Address_Object = MibTableColumn
rcIpBgpPeerVpnv4Address = _RcIpBgpPeerVpnv4Address_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 27),
    _RcIpBgpPeerVpnv4Address_Type()
)
rcIpBgpPeerVpnv4Address.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerVpnv4Address.setStatus("current")


class _RcIpBgpPeerIpvpnLiteCap_Type(EnableValue):
    """Custom type rcIpBgpPeerIpvpnLiteCap based on EnableValue"""


_RcIpBgpPeerIpvpnLiteCap_Object = MibTableColumn
rcIpBgpPeerIpvpnLiteCap = _RcIpBgpPeerIpvpnLiteCap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 28),
    _RcIpBgpPeerIpvpnLiteCap_Type()
)
rcIpBgpPeerIpvpnLiteCap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerIpvpnLiteCap.setStatus("current")
_RcIpBgpPeerSooAddress_Type = IpAddress
_RcIpBgpPeerSooAddress_Object = MibTableColumn
rcIpBgpPeerSooAddress = _RcIpBgpPeerSooAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 29),
    _RcIpBgpPeerSooAddress_Type()
)
rcIpBgpPeerSooAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerSooAddress.setStatus("current")


class _RcIpBgpPeerSooAsNumber_Type(Integer32):
    """Custom type rcIpBgpPeerSooAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpPeerSooAsNumber_Type.__name__ = "Integer32"
_RcIpBgpPeerSooAsNumber_Object = MibTableColumn
rcIpBgpPeerSooAsNumber = _RcIpBgpPeerSooAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 30),
    _RcIpBgpPeerSooAsNumber_Type()
)
rcIpBgpPeerSooAsNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerSooAsNumber.setStatus("current")


class _RcIpBgpPeerSooAssignedNum_Type(Unsigned32):
    """Custom type rcIpBgpPeerSooAssignedNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpBgpPeerSooAssignedNum_Type.__name__ = "Unsigned32"
_RcIpBgpPeerSooAssignedNum_Object = MibTableColumn
rcIpBgpPeerSooAssignedNum = _RcIpBgpPeerSooAssignedNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 31),
    _RcIpBgpPeerSooAssignedNum_Type()
)
rcIpBgpPeerSooAssignedNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerSooAssignedNum.setStatus("current")


class _RcIpBgpPeerSooType_Type(Integer32):
    """Custom type rcIpBgpPeerSooType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asnum", 1),
          ("ipaddr", 2),
          ("none", 0))
    )


_RcIpBgpPeerSooType_Type.__name__ = "Integer32"
_RcIpBgpPeerSooType_Object = MibTableColumn
rcIpBgpPeerSooType = _RcIpBgpPeerSooType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 32),
    _RcIpBgpPeerSooType_Type()
)
rcIpBgpPeerSooType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPeerSooType.setStatus("current")


class _RcIpBgpPeerRouteRefresh_Type(EnableValue):
    """Custom type rcIpBgpPeerRouteRefresh based on EnableValue"""


_RcIpBgpPeerRouteRefresh_Object = MibTableColumn
rcIpBgpPeerRouteRefresh = _RcIpBgpPeerRouteRefresh_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 33),
    _RcIpBgpPeerRouteRefresh_Type()
)
rcIpBgpPeerRouteRefresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerRouteRefresh.setStatus("current")


class _RcIpBgpPeerAsOverride_Type(EnableValue):
    """Custom type rcIpBgpPeerAsOverride based on EnableValue"""


_RcIpBgpPeerAsOverride_Object = MibTableColumn
rcIpBgpPeerAsOverride = _RcIpBgpPeerAsOverride_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 34),
    _RcIpBgpPeerAsOverride_Type()
)
rcIpBgpPeerAsOverride.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerAsOverride.setStatus("current")


class _RcIpBgpPeerAllowAsIn_Type(Integer32):
    """Custom type rcIpBgpPeerAllowAsIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_RcIpBgpPeerAllowAsIn_Type.__name__ = "Integer32"
_RcIpBgpPeerAllowAsIn_Object = MibTableColumn
rcIpBgpPeerAllowAsIn = _RcIpBgpPeerAllowAsIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 35),
    _RcIpBgpPeerAllowAsIn_Type()
)
rcIpBgpPeerAllowAsIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerAllowAsIn.setStatus("current")


class _RcIpBgpPeerBfdEnable_Type(EnableValue):
    """Custom type rcIpBgpPeerBfdEnable based on EnableValue"""


_RcIpBgpPeerBfdEnable_Object = MibTableColumn
rcIpBgpPeerBfdEnable = _RcIpBgpPeerBfdEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 9, 1, 36),
    _RcIpBgpPeerBfdEnable_Type()
)
rcIpBgpPeerBfdEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBgpPeerBfdEnable.setStatus("current")
_RcIpBgpPeerGroupTableSize_Type = Integer32
_RcIpBgpPeerGroupTableSize_Object = MibScalar
rcIpBgpPeerGroupTableSize = _RcIpBgpPeerGroupTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 10),
    _RcIpBgpPeerGroupTableSize_Type()
)
rcIpBgpPeerGroupTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupTableSize.setStatus("current")
_RcIpBgpPeerGroupTable_Object = MibTable
rcIpBgpPeerGroupTable = _RcIpBgpPeerGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11)
)
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupTable.setStatus("current")
_RcIpBgpPeerGroupEntry_Object = MibTableRow
rcIpBgpPeerGroupEntry = _RcIpBgpPeerGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1)
)
rcIpBgpPeerGroupEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpPeerGroupIndex"),
)
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupEntry.setStatus("current")


class _RcIpBgpPeerGroupEnable_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupEnable based on EnableValue"""


_RcIpBgpPeerGroupEnable_Object = MibTableColumn
rcIpBgpPeerGroupEnable = _RcIpBgpPeerGroupEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 1),
    _RcIpBgpPeerGroupEnable_Type()
)
rcIpBgpPeerGroupEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupEnable.setStatus("current")


class _RcIpBgpPeerGroupIndex_Type(Integer32):
    """Custom type rcIpBgpPeerGroupIndex based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_RcIpBgpPeerGroupIndex_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupIndex_Object = MibTableColumn
rcIpBgpPeerGroupIndex = _RcIpBgpPeerGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 2),
    _RcIpBgpPeerGroupIndex_Type()
)
rcIpBgpPeerGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupIndex.setStatus("current")


class _RcIpBgpPeerGroupGroupName_Type(DisplayString):
    """Custom type rcIpBgpPeerGroupGroupName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIpBgpPeerGroupGroupName_Type.__name__ = "DisplayString"
_RcIpBgpPeerGroupGroupName_Object = MibTableColumn
rcIpBgpPeerGroupGroupName = _RcIpBgpPeerGroupGroupName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 3),
    _RcIpBgpPeerGroupGroupName_Type()
)
rcIpBgpPeerGroupGroupName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupGroupName.setStatus("current")


class _RcIpBgpPeerGroupRemoteAs_Type(Integer32):
    """Custom type rcIpBgpPeerGroupRemoteAs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpPeerGroupRemoteAs_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupRemoteAs_Object = MibTableColumn
rcIpBgpPeerGroupRemoteAs = _RcIpBgpPeerGroupRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 4),
    _RcIpBgpPeerGroupRemoteAs_Type()
)
rcIpBgpPeerGroupRemoteAs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupRemoteAs.setStatus("current")


class _RcIpBgpPeerGroupDefaultOriginate_Type(Integer32):
    """Custom type rcIpBgpPeerGroupDefaultOriginate based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RcIpBgpPeerGroupDefaultOriginate_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupDefaultOriginate_Object = MibTableColumn
rcIpBgpPeerGroupDefaultOriginate = _RcIpBgpPeerGroupDefaultOriginate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 5),
    _RcIpBgpPeerGroupDefaultOriginate_Type()
)
rcIpBgpPeerGroupDefaultOriginate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupDefaultOriginate.setStatus("current")


class _RcIpBgpPeerGroupEbgpMultiHop_Type(Integer32):
    """Custom type rcIpBgpPeerGroupEbgpMultiHop based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RcIpBgpPeerGroupEbgpMultiHop_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupEbgpMultiHop_Object = MibTableColumn
rcIpBgpPeerGroupEbgpMultiHop = _RcIpBgpPeerGroupEbgpMultiHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 6),
    _RcIpBgpPeerGroupEbgpMultiHop_Type()
)
rcIpBgpPeerGroupEbgpMultiHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupEbgpMultiHop.setStatus("current")


class _RcIpBgpPeerGroupAdvertisementInterval_Type(Integer32):
    """Custom type rcIpBgpPeerGroupAdvertisementInterval based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_RcIpBgpPeerGroupAdvertisementInterval_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupAdvertisementInterval_Object = MibTableColumn
rcIpBgpPeerGroupAdvertisementInterval = _RcIpBgpPeerGroupAdvertisementInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 7),
    _RcIpBgpPeerGroupAdvertisementInterval_Type()
)
rcIpBgpPeerGroupAdvertisementInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupAdvertisementInterval.setStatus("current")


class _RcIpBgpPeerGroupKeepAlive_Type(Integer32):
    """Custom type rcIpBgpPeerGroupKeepAlive based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 21845),
    )


_RcIpBgpPeerGroupKeepAlive_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupKeepAlive_Object = MibTableColumn
rcIpBgpPeerGroupKeepAlive = _RcIpBgpPeerGroupKeepAlive_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 8),
    _RcIpBgpPeerGroupKeepAlive_Type()
)
rcIpBgpPeerGroupKeepAlive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupKeepAlive.setStatus("current")


class _RcIpBgpPeerGroupHoldTime_Type(Integer32):
    """Custom type rcIpBgpPeerGroupHoldTime based on Integer32"""
    defaultValue = 180

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 65535),
    )


_RcIpBgpPeerGroupHoldTime_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupHoldTime_Object = MibTableColumn
rcIpBgpPeerGroupHoldTime = _RcIpBgpPeerGroupHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 9),
    _RcIpBgpPeerGroupHoldTime_Type()
)
rcIpBgpPeerGroupHoldTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupHoldTime.setStatus("current")


class _RcIpBgpPeerGroupWeight_Type(Integer32):
    """Custom type rcIpBgpPeerGroupWeight based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpPeerGroupWeight_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupWeight_Object = MibTableColumn
rcIpBgpPeerGroupWeight = _RcIpBgpPeerGroupWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 10),
    _RcIpBgpPeerGroupWeight_Type()
)
rcIpBgpPeerGroupWeight.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupWeight.setStatus("current")


class _RcIpBgpPeerGroupMaxPrefix_Type(Integer32):
    """Custom type rcIpBgpPeerGroupMaxPrefix based on Integer32"""
    defaultValue = 12000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpBgpPeerGroupMaxPrefix_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupMaxPrefix_Object = MibTableColumn
rcIpBgpPeerGroupMaxPrefix = _RcIpBgpPeerGroupMaxPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 11),
    _RcIpBgpPeerGroupMaxPrefix_Type()
)
rcIpBgpPeerGroupMaxPrefix.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupMaxPrefix.setStatus("current")


class _RcIpBgpPeerGroupNextHopSelf_Type(TruthValue):
    """Custom type rcIpBgpPeerGroupNextHopSelf based on TruthValue"""


_RcIpBgpPeerGroupNextHopSelf_Object = MibTableColumn
rcIpBgpPeerGroupNextHopSelf = _RcIpBgpPeerGroupNextHopSelf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 12),
    _RcIpBgpPeerGroupNextHopSelf_Type()
)
rcIpBgpPeerGroupNextHopSelf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupNextHopSelf.setStatus("current")


class _RcIpBgpPeerGroupRoutePolicyIn_Type(DisplayString):
    """Custom type rcIpBgpPeerGroupRoutePolicyIn based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpPeerGroupRoutePolicyIn_Type.__name__ = "DisplayString"
_RcIpBgpPeerGroupRoutePolicyIn_Object = MibTableColumn
rcIpBgpPeerGroupRoutePolicyIn = _RcIpBgpPeerGroupRoutePolicyIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 13),
    _RcIpBgpPeerGroupRoutePolicyIn_Type()
)
rcIpBgpPeerGroupRoutePolicyIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupRoutePolicyIn.setStatus("current")


class _RcIpBgpPeerGroupRoutePolicyOut_Type(DisplayString):
    """Custom type rcIpBgpPeerGroupRoutePolicyOut based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpPeerGroupRoutePolicyOut_Type.__name__ = "DisplayString"
_RcIpBgpPeerGroupRoutePolicyOut_Object = MibTableColumn
rcIpBgpPeerGroupRoutePolicyOut = _RcIpBgpPeerGroupRoutePolicyOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 14),
    _RcIpBgpPeerGroupRoutePolicyOut_Type()
)
rcIpBgpPeerGroupRoutePolicyOut.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupRoutePolicyOut.setStatus("current")


class _RcIpBgpPeerGroupRouteReflectorClient_Type(TruthValue):
    """Custom type rcIpBgpPeerGroupRouteReflectorClient based on TruthValue"""


_RcIpBgpPeerGroupRouteReflectorClient_Object = MibTableColumn
rcIpBgpPeerGroupRouteReflectorClient = _RcIpBgpPeerGroupRouteReflectorClient_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 15),
    _RcIpBgpPeerGroupRouteReflectorClient_Type()
)
rcIpBgpPeerGroupRouteReflectorClient.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupRouteReflectorClient.setStatus("current")


class _RcIpBgpPeerGroupSoftReconfigurationIn_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupSoftReconfigurationIn based on EnableValue"""


_RcIpBgpPeerGroupSoftReconfigurationIn_Object = MibTableColumn
rcIpBgpPeerGroupSoftReconfigurationIn = _RcIpBgpPeerGroupSoftReconfigurationIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 16),
    _RcIpBgpPeerGroupSoftReconfigurationIn_Type()
)
rcIpBgpPeerGroupSoftReconfigurationIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupSoftReconfigurationIn.setStatus("current")


class _RcIpBgpPeerGroupSoftReconfiguration_Type(Integer32):
    """Custom type rcIpBgpPeerGroupSoftReconfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2))
    )


_RcIpBgpPeerGroupSoftReconfiguration_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupSoftReconfiguration_Object = MibTableColumn
rcIpBgpPeerGroupSoftReconfiguration = _RcIpBgpPeerGroupSoftReconfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 17),
    _RcIpBgpPeerGroupSoftReconfiguration_Type()
)
rcIpBgpPeerGroupSoftReconfiguration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupSoftReconfiguration.setStatus("current")


class _RcIpBgpPeerGroupPassword_Type(DisplayString):
    """Custom type rcIpBgpPeerGroupPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_RcIpBgpPeerGroupPassword_Type.__name__ = "DisplayString"
_RcIpBgpPeerGroupPassword_Object = MibTableColumn
rcIpBgpPeerGroupPassword = _RcIpBgpPeerGroupPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 18),
    _RcIpBgpPeerGroupPassword_Type()
)
rcIpBgpPeerGroupPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupPassword.setStatus("current")


class _RcIpBgpPeerGroupRemovePrivateAs_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupRemovePrivateAs based on EnableValue"""


_RcIpBgpPeerGroupRemovePrivateAs_Object = MibTableColumn
rcIpBgpPeerGroupRemovePrivateAs = _RcIpBgpPeerGroupRemovePrivateAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 19),
    _RcIpBgpPeerGroupRemovePrivateAs_Type()
)
rcIpBgpPeerGroupRemovePrivateAs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupRemovePrivateAs.setStatus("current")
_RcIpBgpPeerGroupRowStatus_Type = RowStatus
_RcIpBgpPeerGroupRowStatus_Object = MibTableColumn
rcIpBgpPeerGroupRowStatus = _RcIpBgpPeerGroupRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 20),
    _RcIpBgpPeerGroupRowStatus_Type()
)
rcIpBgpPeerGroupRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupRowStatus.setStatus("current")


class _RcIpBgpPeerGroupMD5Authentication_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupMD5Authentication based on EnableValue"""


_RcIpBgpPeerGroupMD5Authentication_Object = MibTableColumn
rcIpBgpPeerGroupMD5Authentication = _RcIpBgpPeerGroupMD5Authentication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 21),
    _RcIpBgpPeerGroupMD5Authentication_Type()
)
rcIpBgpPeerGroupMD5Authentication.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupMD5Authentication.setStatus("current")


class _RcIpBgpPeerGroupSendCommunity_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupSendCommunity based on EnableValue"""


_RcIpBgpPeerGroupSendCommunity_Object = MibTableColumn
rcIpBgpPeerGroupSendCommunity = _RcIpBgpPeerGroupSendCommunity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 22),
    _RcIpBgpPeerGroupSendCommunity_Type()
)
rcIpBgpPeerGroupSendCommunity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupSendCommunity.setStatus("current")
_RcIpBgpPeerGroupUpdateSourceInterface_Type = IpAddress
_RcIpBgpPeerGroupUpdateSourceInterface_Object = MibTableColumn
rcIpBgpPeerGroupUpdateSourceInterface = _RcIpBgpPeerGroupUpdateSourceInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 23),
    _RcIpBgpPeerGroupUpdateSourceInterface_Type()
)
rcIpBgpPeerGroupUpdateSourceInterface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupUpdateSourceInterface.setStatus("current")


class _RcIpBgpPeerGroupVpnv4Address_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupVpnv4Address based on EnableValue"""


_RcIpBgpPeerGroupVpnv4Address_Object = MibTableColumn
rcIpBgpPeerGroupVpnv4Address = _RcIpBgpPeerGroupVpnv4Address_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 24),
    _RcIpBgpPeerGroupVpnv4Address_Type()
)
rcIpBgpPeerGroupVpnv4Address.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupVpnv4Address.setStatus("current")


class _RcIpBgpPeerGroupIpvpnLiteCap_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupIpvpnLiteCap based on EnableValue"""


_RcIpBgpPeerGroupIpvpnLiteCap_Object = MibTableColumn
rcIpBgpPeerGroupIpvpnLiteCap = _RcIpBgpPeerGroupIpvpnLiteCap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 25),
    _RcIpBgpPeerGroupIpvpnLiteCap_Type()
)
rcIpBgpPeerGroupIpvpnLiteCap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupIpvpnLiteCap.setStatus("current")
_RcIpBgpPeerGroupSooAddress_Type = IpAddress
_RcIpBgpPeerGroupSooAddress_Object = MibTableColumn
rcIpBgpPeerGroupSooAddress = _RcIpBgpPeerGroupSooAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 26),
    _RcIpBgpPeerGroupSooAddress_Type()
)
rcIpBgpPeerGroupSooAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupSooAddress.setStatus("current")


class _RcIpBgpPeerGroupSooAsNumber_Type(Integer32):
    """Custom type rcIpBgpPeerGroupSooAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpPeerGroupSooAsNumber_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupSooAsNumber_Object = MibTableColumn
rcIpBgpPeerGroupSooAsNumber = _RcIpBgpPeerGroupSooAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 27),
    _RcIpBgpPeerGroupSooAsNumber_Type()
)
rcIpBgpPeerGroupSooAsNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupSooAsNumber.setStatus("current")


class _RcIpBgpPeerGroupSooAssignedNum_Type(Unsigned32):
    """Custom type rcIpBgpPeerGroupSooAssignedNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpBgpPeerGroupSooAssignedNum_Type.__name__ = "Unsigned32"
_RcIpBgpPeerGroupSooAssignedNum_Object = MibTableColumn
rcIpBgpPeerGroupSooAssignedNum = _RcIpBgpPeerGroupSooAssignedNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 28),
    _RcIpBgpPeerGroupSooAssignedNum_Type()
)
rcIpBgpPeerGroupSooAssignedNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupSooAssignedNum.setStatus("current")


class _RcIpBgpPeerGroupSooType_Type(Integer32):
    """Custom type rcIpBgpPeerGroupSooType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asnum", 1),
          ("ipaddr", 2),
          ("none", 0))
    )


_RcIpBgpPeerGroupSooType_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupSooType_Object = MibTableColumn
rcIpBgpPeerGroupSooType = _RcIpBgpPeerGroupSooType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 29),
    _RcIpBgpPeerGroupSooType_Type()
)
rcIpBgpPeerGroupSooType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupSooType.setStatus("current")


class _RcIpBgpPeerGroupRouteRefresh_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupRouteRefresh based on EnableValue"""


_RcIpBgpPeerGroupRouteRefresh_Object = MibTableColumn
rcIpBgpPeerGroupRouteRefresh = _RcIpBgpPeerGroupRouteRefresh_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 30),
    _RcIpBgpPeerGroupRouteRefresh_Type()
)
rcIpBgpPeerGroupRouteRefresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupRouteRefresh.setStatus("current")


class _RcIpBgpPeerGroupAsOverride_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupAsOverride based on EnableValue"""


_RcIpBgpPeerGroupAsOverride_Object = MibTableColumn
rcIpBgpPeerGroupAsOverride = _RcIpBgpPeerGroupAsOverride_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 31),
    _RcIpBgpPeerGroupAsOverride_Type()
)
rcIpBgpPeerGroupAsOverride.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupAsOverride.setStatus("current")


class _RcIpBgpPeerGroupAllowAsIn_Type(Integer32):
    """Custom type rcIpBgpPeerGroupAllowAsIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_RcIpBgpPeerGroupAllowAsIn_Type.__name__ = "Integer32"
_RcIpBgpPeerGroupAllowAsIn_Object = MibTableColumn
rcIpBgpPeerGroupAllowAsIn = _RcIpBgpPeerGroupAllowAsIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 32),
    _RcIpBgpPeerGroupAllowAsIn_Type()
)
rcIpBgpPeerGroupAllowAsIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupAllowAsIn.setStatus("current")


class _RcIpBgpPeerGroupDefaultOriginateIpv6_Type(TruthValue):
    """Custom type rcIpBgpPeerGroupDefaultOriginateIpv6 based on TruthValue"""


_RcIpBgpPeerGroupDefaultOriginateIpv6_Object = MibTableColumn
rcIpBgpPeerGroupDefaultOriginateIpv6 = _RcIpBgpPeerGroupDefaultOriginateIpv6_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 33),
    _RcIpBgpPeerGroupDefaultOriginateIpv6_Type()
)
rcIpBgpPeerGroupDefaultOriginateIpv6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupDefaultOriginateIpv6.setStatus("current")
_RcIpBgpPeerGroupAfUpdateSourceInterfaceType_Type = InetAddressType
_RcIpBgpPeerGroupAfUpdateSourceInterfaceType_Object = MibTableColumn
rcIpBgpPeerGroupAfUpdateSourceInterfaceType = _RcIpBgpPeerGroupAfUpdateSourceInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 34),
    _RcIpBgpPeerGroupAfUpdateSourceInterfaceType_Type()
)
rcIpBgpPeerGroupAfUpdateSourceInterfaceType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupAfUpdateSourceInterfaceType.setStatus("current")
_RcIpBgpPeerGroupAfUpdateSourceInterface_Type = InetAddress
_RcIpBgpPeerGroupAfUpdateSourceInterface_Object = MibTableColumn
rcIpBgpPeerGroupAfUpdateSourceInterface = _RcIpBgpPeerGroupAfUpdateSourceInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 35),
    _RcIpBgpPeerGroupAfUpdateSourceInterface_Type()
)
rcIpBgpPeerGroupAfUpdateSourceInterface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupAfUpdateSourceInterface.setStatus("current")


class _RcIpBgpPeerGroupIpv6Cap_Type(EnableValue):
    """Custom type rcIpBgpPeerGroupIpv6Cap based on EnableValue"""


_RcIpBgpPeerGroupIpv6Cap_Object = MibTableColumn
rcIpBgpPeerGroupIpv6Cap = _RcIpBgpPeerGroupIpv6Cap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 36),
    _RcIpBgpPeerGroupIpv6Cap_Type()
)
rcIpBgpPeerGroupIpv6Cap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupIpv6Cap.setStatus("current")


class _RcIpBgpPeerGroupIpv6RoutePolicyIn_Type(DisplayString):
    """Custom type rcIpBgpPeerGroupIpv6RoutePolicyIn based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpPeerGroupIpv6RoutePolicyIn_Type.__name__ = "DisplayString"
_RcIpBgpPeerGroupIpv6RoutePolicyIn_Object = MibTableColumn
rcIpBgpPeerGroupIpv6RoutePolicyIn = _RcIpBgpPeerGroupIpv6RoutePolicyIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 37),
    _RcIpBgpPeerGroupIpv6RoutePolicyIn_Type()
)
rcIpBgpPeerGroupIpv6RoutePolicyIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupIpv6RoutePolicyIn.setStatus("current")


class _RcIpBgpPeerGroupIpv6RoutePolicyOut_Type(DisplayString):
    """Custom type rcIpBgpPeerGroupIpv6RoutePolicyOut based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpPeerGroupIpv6RoutePolicyOut_Type.__name__ = "DisplayString"
_RcIpBgpPeerGroupIpv6RoutePolicyOut_Object = MibTableColumn
rcIpBgpPeerGroupIpv6RoutePolicyOut = _RcIpBgpPeerGroupIpv6RoutePolicyOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 38),
    _RcIpBgpPeerGroupIpv6RoutePolicyOut_Type()
)
rcIpBgpPeerGroupIpv6RoutePolicyOut.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupIpv6RoutePolicyOut.setStatus("current")


class _RcIpBgpPeerGroupBfdEnable_Type(TruthValue):
    """Custom type rcIpBgpPeerGroupBfdEnable based on TruthValue"""


_RcIpBgpPeerGroupBfdEnable_Object = MibTableColumn
rcIpBgpPeerGroupBfdEnable = _RcIpBgpPeerGroupBfdEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 11, 1, 39),
    _RcIpBgpPeerGroupBfdEnable_Type()
)
rcIpBgpPeerGroupBfdEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpPeerGroupBfdEnable.setStatus("current")
_RcIpBgpRcvdDampenedPathAttrTableSize_Type = Integer32
_RcIpBgpRcvdDampenedPathAttrTableSize_Object = MibScalar
rcIpBgpRcvdDampenedPathAttrTableSize = _RcIpBgpRcvdDampenedPathAttrTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 12),
    _RcIpBgpRcvdDampenedPathAttrTableSize_Type()
)
rcIpBgpRcvdDampenedPathAttrTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpRcvdDampenedPathAttrTableSize.setStatus("current")
_RcIpBgpRcvdDampenedPathAttrTable_Object = MibTable
rcIpBgpRcvdDampenedPathAttrTable = _RcIpBgpRcvdDampenedPathAttrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13)
)
if mibBuilder.loadTexts:
    rcIpBgpRcvdDampenedPathAttrTable.setStatus("current")
_RcIpBgpDampenedPathAttrEntry_Object = MibTableRow
rcIpBgpDampenedPathAttrEntry = _RcIpBgpDampenedPathAttrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1)
)
rcIpBgpDampenedPathAttrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpPathAttrIpAddrPrefix"),
    (0, "RAPID-CITY", "rcIpBgpPathAttrIpAddrPrefixLen"),
    (0, "RAPID-CITY", "rcIpBgpPathAttrPeer"),
)
if mibBuilder.loadTexts:
    rcIpBgpDampenedPathAttrEntry.setStatus("current")
_RcIpBgpPathAttrPeer_Type = IpAddress
_RcIpBgpPathAttrPeer_Object = MibTableColumn
rcIpBgpPathAttrPeer = _RcIpBgpPathAttrPeer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1, 1),
    _RcIpBgpPathAttrPeer_Type()
)
rcIpBgpPathAttrPeer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPathAttrPeer.setStatus("current")


class _RcIpBgpPathAttrIpAddrPrefixLen_Type(Integer32):
    """Custom type rcIpBgpPathAttrIpAddrPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RcIpBgpPathAttrIpAddrPrefixLen_Type.__name__ = "Integer32"
_RcIpBgpPathAttrIpAddrPrefixLen_Object = MibTableColumn
rcIpBgpPathAttrIpAddrPrefixLen = _RcIpBgpPathAttrIpAddrPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1, 2),
    _RcIpBgpPathAttrIpAddrPrefixLen_Type()
)
rcIpBgpPathAttrIpAddrPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPathAttrIpAddrPrefixLen.setStatus("current")
_RcIpBgpPathAttrIpAddrPrefix_Type = IpAddress
_RcIpBgpPathAttrIpAddrPrefix_Object = MibTableColumn
rcIpBgpPathAttrIpAddrPrefix = _RcIpBgpPathAttrIpAddrPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1, 3),
    _RcIpBgpPathAttrIpAddrPrefix_Type()
)
rcIpBgpPathAttrIpAddrPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPathAttrIpAddrPrefix.setStatus("current")
_RcIpBgpPathAttrFlapPenalty_Type = Integer32
_RcIpBgpPathAttrFlapPenalty_Object = MibTableColumn
rcIpBgpPathAttrFlapPenalty = _RcIpBgpPathAttrFlapPenalty_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1, 4),
    _RcIpBgpPathAttrFlapPenalty_Type()
)
rcIpBgpPathAttrFlapPenalty.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPathAttrFlapPenalty.setStatus("current")
_RcIpBgpPathAttrFlapCount_Type = Integer32
_RcIpBgpPathAttrFlapCount_Object = MibTableColumn
rcIpBgpPathAttrFlapCount = _RcIpBgpPathAttrFlapCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1, 5),
    _RcIpBgpPathAttrFlapCount_Type()
)
rcIpBgpPathAttrFlapCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPathAttrFlapCount.setStatus("current")


class _RcIpBgpPathAttrRouteDampened_Type(Integer32):
    """Custom type rcIpBgpPathAttrRouteDampened based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("announced", 1),
          ("suppressed", 2))
    )


_RcIpBgpPathAttrRouteDampened_Type.__name__ = "Integer32"
_RcIpBgpPathAttrRouteDampened_Object = MibTableColumn
rcIpBgpPathAttrRouteDampened = _RcIpBgpPathAttrRouteDampened_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1, 6),
    _RcIpBgpPathAttrRouteDampened_Type()
)
rcIpBgpPathAttrRouteDampened.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPathAttrRouteDampened.setStatus("current")
_RcIpBgpPathAttrReuseTime_Type = Integer32
_RcIpBgpPathAttrReuseTime_Object = MibTableColumn
rcIpBgpPathAttrReuseTime = _RcIpBgpPathAttrReuseTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1, 7),
    _RcIpBgpPathAttrReuseTime_Type()
)
rcIpBgpPathAttrReuseTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPathAttrReuseTime.setStatus("current")
_RcIpBgpPathAttrReuseTimeRemain_Type = Integer32
_RcIpBgpPathAttrReuseTimeRemain_Object = MibTableColumn
rcIpBgpPathAttrReuseTimeRemain = _RcIpBgpPathAttrReuseTimeRemain_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 13, 1, 8),
    _RcIpBgpPathAttrReuseTimeRemain_Type()
)
rcIpBgpPathAttrReuseTimeRemain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpPathAttrReuseTimeRemain.setStatus("current")
_RcIpBgp4PathAttrTableSize_Type = Integer32
_RcIpBgp4PathAttrTableSize_Object = MibScalar
rcIpBgp4PathAttrTableSize = _RcIpBgp4PathAttrTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 14),
    _RcIpBgp4PathAttrTableSize_Type()
)
rcIpBgp4PathAttrTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrTableSize.setStatus("current")
_RcIpBgp4PathAttrTable_Object = MibTable
rcIpBgp4PathAttrTable = _RcIpBgp4PathAttrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 15)
)
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrTable.setStatus("current")
_RcIpBgp4PathAttrEntry_Object = MibTableRow
rcIpBgp4PathAttrEntry = _RcIpBgp4PathAttrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 15, 1)
)
rcIpBgp4PathAttrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgp4PathAttrIpAddrPrefix"),
    (0, "RAPID-CITY", "rcIpBgp4PathAttrIpAddrPrefixLen"),
    (0, "RAPID-CITY", "rcIpBgp4PathAttrPeer"),
)
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrEntry.setStatus("current")
_RcIpBgp4PathAttrPeer_Type = IpAddress
_RcIpBgp4PathAttrPeer_Object = MibTableColumn
rcIpBgp4PathAttrPeer = _RcIpBgp4PathAttrPeer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 15, 1, 1),
    _RcIpBgp4PathAttrPeer_Type()
)
rcIpBgp4PathAttrPeer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrPeer.setStatus("current")


class _RcIpBgp4PathAttrIpAddrPrefixLen_Type(Integer32):
    """Custom type rcIpBgp4PathAttrIpAddrPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RcIpBgp4PathAttrIpAddrPrefixLen_Type.__name__ = "Integer32"
_RcIpBgp4PathAttrIpAddrPrefixLen_Object = MibTableColumn
rcIpBgp4PathAttrIpAddrPrefixLen = _RcIpBgp4PathAttrIpAddrPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 15, 1, 2),
    _RcIpBgp4PathAttrIpAddrPrefixLen_Type()
)
rcIpBgp4PathAttrIpAddrPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrIpAddrPrefixLen.setStatus("current")
_RcIpBgp4PathAttrIpAddrPrefix_Type = IpAddress
_RcIpBgp4PathAttrIpAddrPrefix_Object = MibTableColumn
rcIpBgp4PathAttrIpAddrPrefix = _RcIpBgp4PathAttrIpAddrPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 15, 1, 3),
    _RcIpBgp4PathAttrIpAddrPrefix_Type()
)
rcIpBgp4PathAttrIpAddrPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrIpAddrPrefix.setStatus("current")


class _RcIpBgp4PathAttrCommunities_Type(OctetString):
    """Custom type rcIpBgp4PathAttrCommunities based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(255, 255),
    )


_RcIpBgp4PathAttrCommunities_Type.__name__ = "OctetString"
_RcIpBgp4PathAttrCommunities_Object = MibTableColumn
rcIpBgp4PathAttrCommunities = _RcIpBgp4PathAttrCommunities_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 15, 1, 4),
    _RcIpBgp4PathAttrCommunities_Type()
)
rcIpBgp4PathAttrCommunities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrCommunities.setStatus("current")
_RcIpBgp4PathAttrOriginateId_Type = IpAddress
_RcIpBgp4PathAttrOriginateId_Object = MibTableColumn
rcIpBgp4PathAttrOriginateId = _RcIpBgp4PathAttrOriginateId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 15, 1, 5),
    _RcIpBgp4PathAttrOriginateId_Type()
)
rcIpBgp4PathAttrOriginateId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrOriginateId.setStatus("current")


class _RcIpBgp4PathAttrClusterId_Type(OctetString):
    """Custom type rcIpBgp4PathAttrClusterId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(255, 255),
    )


_RcIpBgp4PathAttrClusterId_Type.__name__ = "OctetString"
_RcIpBgp4PathAttrClusterId_Object = MibTableColumn
rcIpBgp4PathAttrClusterId = _RcIpBgp4PathAttrClusterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 15, 1, 6),
    _RcIpBgp4PathAttrClusterId_Type()
)
rcIpBgp4PathAttrClusterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgp4PathAttrClusterId.setStatus("current")
_RcIpBgpExt_ObjectIdentity = ObjectIdentity
rcIpBgpExt = _RcIpBgpExt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16)
)
_RcIpBgpExtAggregateAfTableSize_Type = Unsigned32
_RcIpBgpExtAggregateAfTableSize_Object = MibScalar
rcIpBgpExtAggregateAfTableSize = _RcIpBgpExtAggregateAfTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 1),
    _RcIpBgpExtAggregateAfTableSize_Type()
)
rcIpBgpExtAggregateAfTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfTableSize.setStatus("current")
_RcIpBgpExtAggregateAfTable_Object = MibTable
rcIpBgpExtAggregateAfTable = _RcIpBgpExtAggregateAfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2)
)
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfTable.setStatus("current")
_RcIpBgpExtAggregateAfEntry_Object = MibTableRow
rcIpBgpExtAggregateAfEntry = _RcIpBgpExtAggregateAfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1)
)
rcIpBgpExtAggregateAfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpExtAggregateAfAddressType"),
    (0, "RAPID-CITY", "rcIpBgpExtAggregateAfAddress"),
    (0, "RAPID-CITY", "rcIpBgpExtAggregateAfPrefixLen"),
)
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfEntry.setStatus("current")
_RcIpBgpExtAggregateAfAddressType_Type = InetAddressType
_RcIpBgpExtAggregateAfAddressType_Object = MibTableColumn
rcIpBgpExtAggregateAfAddressType = _RcIpBgpExtAggregateAfAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 1),
    _RcIpBgpExtAggregateAfAddressType_Type()
)
rcIpBgpExtAggregateAfAddressType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfAddressType.setStatus("current")
_RcIpBgpExtAggregateAfAddress_Type = InetAddress
_RcIpBgpExtAggregateAfAddress_Object = MibTableColumn
rcIpBgpExtAggregateAfAddress = _RcIpBgpExtAggregateAfAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 2),
    _RcIpBgpExtAggregateAfAddress_Type()
)
rcIpBgpExtAggregateAfAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfAddress.setStatus("current")
_RcIpBgpExtAggregateAfPrefixLen_Type = InetAddressPrefixLength
_RcIpBgpExtAggregateAfPrefixLen_Object = MibTableColumn
rcIpBgpExtAggregateAfPrefixLen = _RcIpBgpExtAggregateAfPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 3),
    _RcIpBgpExtAggregateAfPrefixLen_Type()
)
rcIpBgpExtAggregateAfPrefixLen.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfPrefixLen.setStatus("current")


class _RcIpBgpExtAggregateAfAsSetGenerate_Type(TruthValue):
    """Custom type rcIpBgpExtAggregateAfAsSetGenerate based on TruthValue"""


_RcIpBgpExtAggregateAfAsSetGenerate_Object = MibTableColumn
rcIpBgpExtAggregateAfAsSetGenerate = _RcIpBgpExtAggregateAfAsSetGenerate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 4),
    _RcIpBgpExtAggregateAfAsSetGenerate_Type()
)
rcIpBgpExtAggregateAfAsSetGenerate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfAsSetGenerate.setStatus("current")


class _RcIpBgpExtAggregateAfSummaryOnly_Type(TruthValue):
    """Custom type rcIpBgpExtAggregateAfSummaryOnly based on TruthValue"""


_RcIpBgpExtAggregateAfSummaryOnly_Object = MibTableColumn
rcIpBgpExtAggregateAfSummaryOnly = _RcIpBgpExtAggregateAfSummaryOnly_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 5),
    _RcIpBgpExtAggregateAfSummaryOnly_Type()
)
rcIpBgpExtAggregateAfSummaryOnly.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfSummaryOnly.setStatus("current")


class _RcIpBgpExtAggregateAfSuppressPolicy_Type(SnmpAdminString):
    """Custom type rcIpBgpExtAggregateAfSuppressPolicy based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpExtAggregateAfSuppressPolicy_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtAggregateAfSuppressPolicy_Object = MibTableColumn
rcIpBgpExtAggregateAfSuppressPolicy = _RcIpBgpExtAggregateAfSuppressPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 6),
    _RcIpBgpExtAggregateAfSuppressPolicy_Type()
)
rcIpBgpExtAggregateAfSuppressPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfSuppressPolicy.setStatus("current")


class _RcIpBgpExtAggregateAfAdvertisePolicy_Type(SnmpAdminString):
    """Custom type rcIpBgpExtAggregateAfAdvertisePolicy based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpExtAggregateAfAdvertisePolicy_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtAggregateAfAdvertisePolicy_Object = MibTableColumn
rcIpBgpExtAggregateAfAdvertisePolicy = _RcIpBgpExtAggregateAfAdvertisePolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 7),
    _RcIpBgpExtAggregateAfAdvertisePolicy_Type()
)
rcIpBgpExtAggregateAfAdvertisePolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfAdvertisePolicy.setStatus("current")


class _RcIpBgpExtAggregateAfAttributePolicy_Type(SnmpAdminString):
    """Custom type rcIpBgpExtAggregateAfAttributePolicy based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpExtAggregateAfAttributePolicy_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtAggregateAfAttributePolicy_Object = MibTableColumn
rcIpBgpExtAggregateAfAttributePolicy = _RcIpBgpExtAggregateAfAttributePolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 8),
    _RcIpBgpExtAggregateAfAttributePolicy_Type()
)
rcIpBgpExtAggregateAfAttributePolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfAttributePolicy.setStatus("current")
_RcIpBgpExtAggregateAfRowStatus_Type = RowStatus
_RcIpBgpExtAggregateAfRowStatus_Object = MibTableColumn
rcIpBgpExtAggregateAfRowStatus = _RcIpBgpExtAggregateAfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 2, 1, 9),
    _RcIpBgpExtAggregateAfRowStatus_Type()
)
rcIpBgpExtAggregateAfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtAggregateAfRowStatus.setStatus("current")
_RcIpBgpExtNetworkAfTableSize_Type = Unsigned32
_RcIpBgpExtNetworkAfTableSize_Object = MibScalar
rcIpBgpExtNetworkAfTableSize = _RcIpBgpExtNetworkAfTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 3),
    _RcIpBgpExtNetworkAfTableSize_Type()
)
rcIpBgpExtNetworkAfTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpExtNetworkAfTableSize.setStatus("current")
_RcIpBgpExtNetworkAfTable_Object = MibTable
rcIpBgpExtNetworkAfTable = _RcIpBgpExtNetworkAfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 4)
)
if mibBuilder.loadTexts:
    rcIpBgpExtNetworkAfTable.setStatus("current")
_RcIpBgpExtNetworkAfEntry_Object = MibTableRow
rcIpBgpExtNetworkAfEntry = _RcIpBgpExtNetworkAfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 4, 1)
)
rcIpBgpExtNetworkAfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpExtNetworkAfAddrType"),
    (0, "RAPID-CITY", "rcIpBgpExtNetworkAfAddr"),
    (0, "RAPID-CITY", "rcIpBgpExtNetworkAfPrefixLen"),
)
if mibBuilder.loadTexts:
    rcIpBgpExtNetworkAfEntry.setStatus("current")
_RcIpBgpExtNetworkAfAddrType_Type = InetAddressType
_RcIpBgpExtNetworkAfAddrType_Object = MibTableColumn
rcIpBgpExtNetworkAfAddrType = _RcIpBgpExtNetworkAfAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 4, 1, 1),
    _RcIpBgpExtNetworkAfAddrType_Type()
)
rcIpBgpExtNetworkAfAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpExtNetworkAfAddrType.setStatus("current")
_RcIpBgpExtNetworkAfAddr_Type = InetAddress
_RcIpBgpExtNetworkAfAddr_Object = MibTableColumn
rcIpBgpExtNetworkAfAddr = _RcIpBgpExtNetworkAfAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 4, 1, 2),
    _RcIpBgpExtNetworkAfAddr_Type()
)
rcIpBgpExtNetworkAfAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpExtNetworkAfAddr.setStatus("current")
_RcIpBgpExtNetworkAfPrefixLen_Type = InetAddressPrefixLength
_RcIpBgpExtNetworkAfPrefixLen_Object = MibTableColumn
rcIpBgpExtNetworkAfPrefixLen = _RcIpBgpExtNetworkAfPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 4, 1, 3),
    _RcIpBgpExtNetworkAfPrefixLen_Type()
)
rcIpBgpExtNetworkAfPrefixLen.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpExtNetworkAfPrefixLen.setStatus("current")


class _RcIpBgpExtNetworkAfMetric_Type(Integer32):
    """Custom type rcIpBgpExtNetworkAfMetric based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpExtNetworkAfMetric_Type.__name__ = "Integer32"
_RcIpBgpExtNetworkAfMetric_Object = MibTableColumn
rcIpBgpExtNetworkAfMetric = _RcIpBgpExtNetworkAfMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 4, 1, 4),
    _RcIpBgpExtNetworkAfMetric_Type()
)
rcIpBgpExtNetworkAfMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtNetworkAfMetric.setStatus("current")
_RcIpBgpExtNetworkAfRowStatus_Type = RowStatus
_RcIpBgpExtNetworkAfRowStatus_Object = MibTableColumn
rcIpBgpExtNetworkAfRowStatus = _RcIpBgpExtNetworkAfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 4, 1, 5),
    _RcIpBgpExtNetworkAfRowStatus_Type()
)
rcIpBgpExtNetworkAfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtNetworkAfRowStatus.setStatus("current")
_RcIpBgpExtPeerAfTableSize_Type = Unsigned32
_RcIpBgpExtPeerAfTableSize_Object = MibScalar
rcIpBgpExtPeerAfTableSize = _RcIpBgpExtPeerAfTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 5),
    _RcIpBgpExtPeerAfTableSize_Type()
)
rcIpBgpExtPeerAfTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfTableSize.setStatus("current")
_RcIpBgpExtPeerAfTable_Object = MibTable
rcIpBgpExtPeerAfTable = _RcIpBgpExtPeerAfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6)
)
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfTable.setStatus("current")
_RcIpBgpExtPeerAfEntry_Object = MibTableRow
rcIpBgpExtPeerAfEntry = _RcIpBgpExtPeerAfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfEntry.setStatus("current")


class _RcIpBgpExtPeerAfGroupName_Type(SnmpAdminString):
    """Custom type rcIpBgpExtPeerAfGroupName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIpBgpExtPeerAfGroupName_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtPeerAfGroupName_Object = MibTableColumn
rcIpBgpExtPeerAfGroupName = _RcIpBgpExtPeerAfGroupName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 1),
    _RcIpBgpExtPeerAfGroupName_Type()
)
rcIpBgpExtPeerAfGroupName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfGroupName.setStatus("current")


class _RcIpBgpExtPeerAfDefaultOriginate_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfDefaultOriginate based on TruthValue"""


_RcIpBgpExtPeerAfDefaultOriginate_Object = MibTableColumn
rcIpBgpExtPeerAfDefaultOriginate = _RcIpBgpExtPeerAfDefaultOriginate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 2),
    _RcIpBgpExtPeerAfDefaultOriginate_Type()
)
rcIpBgpExtPeerAfDefaultOriginate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfDefaultOriginate.setStatus("current")


class _RcIpBgpExtPeerAfDefaultOriginateIpv6_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfDefaultOriginateIpv6 based on TruthValue"""


_RcIpBgpExtPeerAfDefaultOriginateIpv6_Object = MibTableColumn
rcIpBgpExtPeerAfDefaultOriginateIpv6 = _RcIpBgpExtPeerAfDefaultOriginateIpv6_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 3),
    _RcIpBgpExtPeerAfDefaultOriginateIpv6_Type()
)
rcIpBgpExtPeerAfDefaultOriginateIpv6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfDefaultOriginateIpv6.setStatus("current")


class _RcIpBgpExtPeerAfEbgpMultiHop_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfEbgpMultiHop based on TruthValue"""


_RcIpBgpExtPeerAfEbgpMultiHop_Object = MibTableColumn
rcIpBgpExtPeerAfEbgpMultiHop = _RcIpBgpExtPeerAfEbgpMultiHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 4),
    _RcIpBgpExtPeerAfEbgpMultiHop_Type()
)
rcIpBgpExtPeerAfEbgpMultiHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfEbgpMultiHop.setStatus("current")


class _RcIpBgpExtPeerAfAdvertisementInterval_Type(Integer32):
    """Custom type rcIpBgpExtPeerAfAdvertisementInterval based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 120),
    )


_RcIpBgpExtPeerAfAdvertisementInterval_Type.__name__ = "Integer32"
_RcIpBgpExtPeerAfAdvertisementInterval_Object = MibTableColumn
rcIpBgpExtPeerAfAdvertisementInterval = _RcIpBgpExtPeerAfAdvertisementInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 5),
    _RcIpBgpExtPeerAfAdvertisementInterval_Type()
)
rcIpBgpExtPeerAfAdvertisementInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfAdvertisementInterval.setStatus("current")


class _RcIpBgpExtPeerAfPassword_Type(SnmpAdminString):
    """Custom type rcIpBgpExtPeerAfPassword based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_RcIpBgpExtPeerAfPassword_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtPeerAfPassword_Object = MibTableColumn
rcIpBgpExtPeerAfPassword = _RcIpBgpExtPeerAfPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 6),
    _RcIpBgpExtPeerAfPassword_Type()
)
rcIpBgpExtPeerAfPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfPassword.setStatus("current")


class _RcIpBgpExtPeerAfWeight_Type(Integer32):
    """Custom type rcIpBgpExtPeerAfWeight based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpExtPeerAfWeight_Type.__name__ = "Integer32"
_RcIpBgpExtPeerAfWeight_Object = MibTableColumn
rcIpBgpExtPeerAfWeight = _RcIpBgpExtPeerAfWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 7),
    _RcIpBgpExtPeerAfWeight_Type()
)
rcIpBgpExtPeerAfWeight.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfWeight.setStatus("current")


class _RcIpBgpExtPeerAfMaxPrefix_Type(Integer32):
    """Custom type rcIpBgpExtPeerAfMaxPrefix based on Integer32"""
    defaultValue = 12000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpBgpExtPeerAfMaxPrefix_Type.__name__ = "Integer32"
_RcIpBgpExtPeerAfMaxPrefix_Object = MibTableColumn
rcIpBgpExtPeerAfMaxPrefix = _RcIpBgpExtPeerAfMaxPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 8),
    _RcIpBgpExtPeerAfMaxPrefix_Type()
)
rcIpBgpExtPeerAfMaxPrefix.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfMaxPrefix.setStatus("current")


class _RcIpBgpExtPeerAfNextHopSelf_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfNextHopSelf based on TruthValue"""


_RcIpBgpExtPeerAfNextHopSelf_Object = MibTableColumn
rcIpBgpExtPeerAfNextHopSelf = _RcIpBgpExtPeerAfNextHopSelf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 9),
    _RcIpBgpExtPeerAfNextHopSelf_Type()
)
rcIpBgpExtPeerAfNextHopSelf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfNextHopSelf.setStatus("current")


class _RcIpBgpExtPeerAfRoutePolicyIn_Type(SnmpAdminString):
    """Custom type rcIpBgpExtPeerAfRoutePolicyIn based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpExtPeerAfRoutePolicyIn_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtPeerAfRoutePolicyIn_Object = MibTableColumn
rcIpBgpExtPeerAfRoutePolicyIn = _RcIpBgpExtPeerAfRoutePolicyIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 10),
    _RcIpBgpExtPeerAfRoutePolicyIn_Type()
)
rcIpBgpExtPeerAfRoutePolicyIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfRoutePolicyIn.setStatus("current")


class _RcIpBgpExtPeerAfRoutePolicyOut_Type(SnmpAdminString):
    """Custom type rcIpBgpExtPeerAfRoutePolicyOut based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpExtPeerAfRoutePolicyOut_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtPeerAfRoutePolicyOut_Object = MibTableColumn
rcIpBgpExtPeerAfRoutePolicyOut = _RcIpBgpExtPeerAfRoutePolicyOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 11),
    _RcIpBgpExtPeerAfRoutePolicyOut_Type()
)
rcIpBgpExtPeerAfRoutePolicyOut.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfRoutePolicyOut.setStatus("current")


class _RcIpBgpExtPeerAfRouteReflectorClient_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfRouteReflectorClient based on TruthValue"""


_RcIpBgpExtPeerAfRouteReflectorClient_Object = MibTableColumn
rcIpBgpExtPeerAfRouteReflectorClient = _RcIpBgpExtPeerAfRouteReflectorClient_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 12),
    _RcIpBgpExtPeerAfRouteReflectorClient_Type()
)
rcIpBgpExtPeerAfRouteReflectorClient.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfRouteReflectorClient.setStatus("current")


class _RcIpBgpExtPeerAfSoftReconfigurationIn_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfSoftReconfigurationIn based on TruthValue"""


_RcIpBgpExtPeerAfSoftReconfigurationIn_Object = MibTableColumn
rcIpBgpExtPeerAfSoftReconfigurationIn = _RcIpBgpExtPeerAfSoftReconfigurationIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 13),
    _RcIpBgpExtPeerAfSoftReconfigurationIn_Type()
)
rcIpBgpExtPeerAfSoftReconfigurationIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfSoftReconfigurationIn.setStatus("current")


class _RcIpBgpExtPeerAfSoftReconfiguration_Type(Integer32):
    """Custom type rcIpBgpExtPeerAfSoftReconfiguration based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("none", 3),
          ("out", 2))
    )


_RcIpBgpExtPeerAfSoftReconfiguration_Type.__name__ = "Integer32"
_RcIpBgpExtPeerAfSoftReconfiguration_Object = MibTableColumn
rcIpBgpExtPeerAfSoftReconfiguration = _RcIpBgpExtPeerAfSoftReconfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 14),
    _RcIpBgpExtPeerAfSoftReconfiguration_Type()
)
rcIpBgpExtPeerAfSoftReconfiguration.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfSoftReconfiguration.setStatus("current")


class _RcIpBgpExtPeerAfRemovePrivateAs_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfRemovePrivateAs based on TruthValue"""


_RcIpBgpExtPeerAfRemovePrivateAs_Object = MibTableColumn
rcIpBgpExtPeerAfRemovePrivateAs = _RcIpBgpExtPeerAfRemovePrivateAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 15),
    _RcIpBgpExtPeerAfRemovePrivateAs_Type()
)
rcIpBgpExtPeerAfRemovePrivateAs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfRemovePrivateAs.setStatus("current")


class _RcIpBgpExtPeerAfMD5Authentication_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfMD5Authentication based on TruthValue"""


_RcIpBgpExtPeerAfMD5Authentication_Object = MibTableColumn
rcIpBgpExtPeerAfMD5Authentication = _RcIpBgpExtPeerAfMD5Authentication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 16),
    _RcIpBgpExtPeerAfMD5Authentication_Type()
)
rcIpBgpExtPeerAfMD5Authentication.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfMD5Authentication.setStatus("current")


class _RcIpBgpExtPeerAfDebugMask_Type(Integer32):
    """Custom type rcIpBgpExtPeerAfDebugMask based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 511),
    )


_RcIpBgpExtPeerAfDebugMask_Type.__name__ = "Integer32"
_RcIpBgpExtPeerAfDebugMask_Object = MibTableColumn
rcIpBgpExtPeerAfDebugMask = _RcIpBgpExtPeerAfDebugMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 17),
    _RcIpBgpExtPeerAfDebugMask_Type()
)
rcIpBgpExtPeerAfDebugMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfDebugMask.setStatus("current")


class _RcIpBgpExtPeerAfSendCommunity_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfSendCommunity based on TruthValue"""


_RcIpBgpExtPeerAfSendCommunity_Object = MibTableColumn
rcIpBgpExtPeerAfSendCommunity = _RcIpBgpExtPeerAfSendCommunity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 18),
    _RcIpBgpExtPeerAfSendCommunity_Type()
)
rcIpBgpExtPeerAfSendCommunity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfSendCommunity.setStatus("current")
_RcIpBgpExtPeerAfUpdateSourceInterface_Type = InetAddress
_RcIpBgpExtPeerAfUpdateSourceInterface_Object = MibTableColumn
rcIpBgpExtPeerAfUpdateSourceInterface = _RcIpBgpExtPeerAfUpdateSourceInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 19),
    _RcIpBgpExtPeerAfUpdateSourceInterface_Type()
)
rcIpBgpExtPeerAfUpdateSourceInterface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfUpdateSourceInterface.setStatus("current")


class _RcIpBgpExtPeerAfVpnv4Address_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfVpnv4Address based on TruthValue"""


_RcIpBgpExtPeerAfVpnv4Address_Object = MibTableColumn
rcIpBgpExtPeerAfVpnv4Address = _RcIpBgpExtPeerAfVpnv4Address_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 20),
    _RcIpBgpExtPeerAfVpnv4Address_Type()
)
rcIpBgpExtPeerAfVpnv4Address.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfVpnv4Address.setStatus("current")


class _RcIpBgpExtPeerAfIpv6Cap_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfIpv6Cap based on TruthValue"""


_RcIpBgpExtPeerAfIpv6Cap_Object = MibTableColumn
rcIpBgpExtPeerAfIpv6Cap = _RcIpBgpExtPeerAfIpv6Cap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 21),
    _RcIpBgpExtPeerAfIpv6Cap_Type()
)
rcIpBgpExtPeerAfIpv6Cap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfIpv6Cap.setStatus("current")


class _RcIpBgpExtPeerAfIpvpnLiteCap_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfIpvpnLiteCap based on TruthValue"""


_RcIpBgpExtPeerAfIpvpnLiteCap_Object = MibTableColumn
rcIpBgpExtPeerAfIpvpnLiteCap = _RcIpBgpExtPeerAfIpvpnLiteCap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 22),
    _RcIpBgpExtPeerAfIpvpnLiteCap_Type()
)
rcIpBgpExtPeerAfIpvpnLiteCap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfIpvpnLiteCap.setStatus("current")
_RcIpBgpExtPeerAfSooAddress_Type = IpAddress
_RcIpBgpExtPeerAfSooAddress_Object = MibTableColumn
rcIpBgpExtPeerAfSooAddress = _RcIpBgpExtPeerAfSooAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 23),
    _RcIpBgpExtPeerAfSooAddress_Type()
)
rcIpBgpExtPeerAfSooAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfSooAddress.setStatus("current")


class _RcIpBgpExtPeerAfSooAsNumber_Type(Integer32):
    """Custom type rcIpBgpExtPeerAfSooAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpExtPeerAfSooAsNumber_Type.__name__ = "Integer32"
_RcIpBgpExtPeerAfSooAsNumber_Object = MibTableColumn
rcIpBgpExtPeerAfSooAsNumber = _RcIpBgpExtPeerAfSooAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 24),
    _RcIpBgpExtPeerAfSooAsNumber_Type()
)
rcIpBgpExtPeerAfSooAsNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfSooAsNumber.setStatus("current")


class _RcIpBgpExtPeerAfSooAssignedNum_Type(Unsigned32):
    """Custom type rcIpBgpExtPeerAfSooAssignedNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpBgpExtPeerAfSooAssignedNum_Type.__name__ = "Unsigned32"
_RcIpBgpExtPeerAfSooAssignedNum_Object = MibTableColumn
rcIpBgpExtPeerAfSooAssignedNum = _RcIpBgpExtPeerAfSooAssignedNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 25),
    _RcIpBgpExtPeerAfSooAssignedNum_Type()
)
rcIpBgpExtPeerAfSooAssignedNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfSooAssignedNum.setStatus("current")


class _RcIpBgpExtPeerAfSooType_Type(Integer32):
    """Custom type rcIpBgpExtPeerAfSooType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asnum", 1),
          ("ipaddr", 2),
          ("none", 0))
    )


_RcIpBgpExtPeerAfSooType_Type.__name__ = "Integer32"
_RcIpBgpExtPeerAfSooType_Object = MibTableColumn
rcIpBgpExtPeerAfSooType = _RcIpBgpExtPeerAfSooType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 26),
    _RcIpBgpExtPeerAfSooType_Type()
)
rcIpBgpExtPeerAfSooType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfSooType.setStatus("current")


class _RcIpBgpExtPeerAfRouteRefresh_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfRouteRefresh based on TruthValue"""


_RcIpBgpExtPeerAfRouteRefresh_Object = MibTableColumn
rcIpBgpExtPeerAfRouteRefresh = _RcIpBgpExtPeerAfRouteRefresh_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 27),
    _RcIpBgpExtPeerAfRouteRefresh_Type()
)
rcIpBgpExtPeerAfRouteRefresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfRouteRefresh.setStatus("current")


class _RcIpBgpExtPeerAfAsOverride_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfAsOverride based on TruthValue"""


_RcIpBgpExtPeerAfAsOverride_Object = MibTableColumn
rcIpBgpExtPeerAfAsOverride = _RcIpBgpExtPeerAfAsOverride_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 28),
    _RcIpBgpExtPeerAfAsOverride_Type()
)
rcIpBgpExtPeerAfAsOverride.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfAsOverride.setStatus("current")


class _RcIpBgpExtPeerAfAllowAsIn_Type(Integer32):
    """Custom type rcIpBgpExtPeerAfAllowAsIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_RcIpBgpExtPeerAfAllowAsIn_Type.__name__ = "Integer32"
_RcIpBgpExtPeerAfAllowAsIn_Object = MibTableColumn
rcIpBgpExtPeerAfAllowAsIn = _RcIpBgpExtPeerAfAllowAsIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 29),
    _RcIpBgpExtPeerAfAllowAsIn_Type()
)
rcIpBgpExtPeerAfAllowAsIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfAllowAsIn.setStatus("current")


class _RcIpBgpExtPeerAfIpv6RoutePolicyIn_Type(SnmpAdminString):
    """Custom type rcIpBgpExtPeerAfIpv6RoutePolicyIn based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpExtPeerAfIpv6RoutePolicyIn_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtPeerAfIpv6RoutePolicyIn_Object = MibTableColumn
rcIpBgpExtPeerAfIpv6RoutePolicyIn = _RcIpBgpExtPeerAfIpv6RoutePolicyIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 30),
    _RcIpBgpExtPeerAfIpv6RoutePolicyIn_Type()
)
rcIpBgpExtPeerAfIpv6RoutePolicyIn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfIpv6RoutePolicyIn.setStatus("current")


class _RcIpBgpExtPeerAfIpv6RoutePolicyOut_Type(SnmpAdminString):
    """Custom type rcIpBgpExtPeerAfIpv6RoutePolicyOut based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcIpBgpExtPeerAfIpv6RoutePolicyOut_Type.__name__ = "SnmpAdminString"
_RcIpBgpExtPeerAfIpv6RoutePolicyOut_Object = MibTableColumn
rcIpBgpExtPeerAfIpv6RoutePolicyOut = _RcIpBgpExtPeerAfIpv6RoutePolicyOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 31),
    _RcIpBgpExtPeerAfIpv6RoutePolicyOut_Type()
)
rcIpBgpExtPeerAfIpv6RoutePolicyOut.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfIpv6RoutePolicyOut.setStatus("current")
_RcIpBgpExtPeerAfEnable_Type = TruthValue
_RcIpBgpExtPeerAfEnable_Object = MibTableColumn
rcIpBgpExtPeerAfEnable = _RcIpBgpExtPeerAfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 32),
    _RcIpBgpExtPeerAfEnable_Type()
)
rcIpBgpExtPeerAfEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfEnable.setStatus("current")
_RcIpBgpExtPeerAfRemoteAs_Type = InetAutonomousSystemNumber
_RcIpBgpExtPeerAfRemoteAs_Object = MibTableColumn
rcIpBgpExtPeerAfRemoteAs = _RcIpBgpExtPeerAfRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 33),
    _RcIpBgpExtPeerAfRemoteAs_Type()
)
rcIpBgpExtPeerAfRemoteAs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfRemoteAs.setStatus("current")


class _RcIpBgpExtPeerAfConnectRetryInterval_Type(Unsigned32):
    """Custom type rcIpBgpExtPeerAfConnectRetryInterval based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpBgpExtPeerAfConnectRetryInterval_Type.__name__ = "Unsigned32"
_RcIpBgpExtPeerAfConnectRetryInterval_Object = MibTableColumn
rcIpBgpExtPeerAfConnectRetryInterval = _RcIpBgpExtPeerAfConnectRetryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 34),
    _RcIpBgpExtPeerAfConnectRetryInterval_Type()
)
rcIpBgpExtPeerAfConnectRetryInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfConnectRetryInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfConnectRetryInterval.setUnits("seconds")


class _RcIpBgpExtPeerAfHoldTimeConfigured_Type(Unsigned32):
    """Custom type rcIpBgpExtPeerAfHoldTimeConfigured based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(3, 65535),
    )


_RcIpBgpExtPeerAfHoldTimeConfigured_Type.__name__ = "Unsigned32"
_RcIpBgpExtPeerAfHoldTimeConfigured_Object = MibTableColumn
rcIpBgpExtPeerAfHoldTimeConfigured = _RcIpBgpExtPeerAfHoldTimeConfigured_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 35),
    _RcIpBgpExtPeerAfHoldTimeConfigured_Type()
)
rcIpBgpExtPeerAfHoldTimeConfigured.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfHoldTimeConfigured.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfHoldTimeConfigured.setUnits("seconds")


class _RcIpBgpExtPeerAfKeepAliveConfigured_Type(Unsigned32):
    """Custom type rcIpBgpExtPeerAfKeepAliveConfigured based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 21845),
    )


_RcIpBgpExtPeerAfKeepAliveConfigured_Type.__name__ = "Unsigned32"
_RcIpBgpExtPeerAfKeepAliveConfigured_Object = MibTableColumn
rcIpBgpExtPeerAfKeepAliveConfigured = _RcIpBgpExtPeerAfKeepAliveConfigured_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 36),
    _RcIpBgpExtPeerAfKeepAliveConfigured_Type()
)
rcIpBgpExtPeerAfKeepAliveConfigured.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfKeepAliveConfigured.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfKeepAliveConfigured.setUnits("seconds")
_RcIpBgpExtPeerAfRowStatus_Type = RowStatus
_RcIpBgpExtPeerAfRowStatus_Object = MibTableColumn
rcIpBgpExtPeerAfRowStatus = _RcIpBgpExtPeerAfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 37),
    _RcIpBgpExtPeerAfRowStatus_Type()
)
rcIpBgpExtPeerAfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfRowStatus.setStatus("current")


class _RcIpBgpExtPeerAfNewRemoteAs_Type(OctetString):
    """Custom type rcIpBgpExtPeerAfNewRemoteAs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_RcIpBgpExtPeerAfNewRemoteAs_Type.__name__ = "OctetString"
_RcIpBgpExtPeerAfNewRemoteAs_Object = MibTableColumn
rcIpBgpExtPeerAfNewRemoteAs = _RcIpBgpExtPeerAfNewRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 38),
    _RcIpBgpExtPeerAfNewRemoteAs_Type()
)
rcIpBgpExtPeerAfNewRemoteAs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfNewRemoteAs.setStatus("current")


class _RcIpBgpExtPeerAfBfdEnable_Type(TruthValue):
    """Custom type rcIpBgpExtPeerAfBfdEnable based on TruthValue"""


_RcIpBgpExtPeerAfBfdEnable_Object = MibTableColumn
rcIpBgpExtPeerAfBfdEnable = _RcIpBgpExtPeerAfBfdEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 6, 1, 39),
    _RcIpBgpExtPeerAfBfdEnable_Type()
)
rcIpBgpExtPeerAfBfdEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpBgpExtPeerAfBfdEnable.setStatus("current")
_RcIpBgpExtAfPathAttrTable_Object = MibTable
rcIpBgpExtAfPathAttrTable = _RcIpBgpExtAfPathAttrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 7)
)
if mibBuilder.loadTexts:
    rcIpBgpExtAfPathAttrTable.setStatus("current")
_RcIpBgpExtAfPathAttrEntry_Object = MibTableRow
rcIpBgpExtAfPathAttrEntry = _RcIpBgpExtAfPathAttrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 7, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpExtAfPathAttrEntry.setStatus("current")


class _RcIpBgpExtAfPathAttrUnknown_Type(OctetString):
    """Custom type rcIpBgpExtAfPathAttrUnknown based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIpBgpExtAfPathAttrUnknown_Type.__name__ = "OctetString"
_RcIpBgpExtAfPathAttrUnknown_Object = MibTableColumn
rcIpBgpExtAfPathAttrUnknown = _RcIpBgpExtAfPathAttrUnknown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 7, 1, 1),
    _RcIpBgpExtAfPathAttrUnknown_Type()
)
rcIpBgpExtAfPathAttrUnknown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpExtAfPathAttrUnknown.setStatus("current")


class _RcIpBgpExtAfPathAttrCommunities_Type(OctetString):
    """Custom type rcIpBgpExtAfPathAttrCommunities based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIpBgpExtAfPathAttrCommunities_Type.__name__ = "OctetString"
_RcIpBgpExtAfPathAttrCommunities_Object = MibTableColumn
rcIpBgpExtAfPathAttrCommunities = _RcIpBgpExtAfPathAttrCommunities_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 7, 1, 2),
    _RcIpBgpExtAfPathAttrCommunities_Type()
)
rcIpBgpExtAfPathAttrCommunities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpExtAfPathAttrCommunities.setStatus("current")
_RcIpBgpExtAfPathAttrOriginateId_Type = IpAddress
_RcIpBgpExtAfPathAttrOriginateId_Object = MibTableColumn
rcIpBgpExtAfPathAttrOriginateId = _RcIpBgpExtAfPathAttrOriginateId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 7, 1, 3),
    _RcIpBgpExtAfPathAttrOriginateId_Type()
)
rcIpBgpExtAfPathAttrOriginateId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpExtAfPathAttrOriginateId.setStatus("current")


class _RcIpBgpExtAfPathAttrClusterId_Type(OctetString):
    """Custom type rcIpBgpExtAfPathAttrClusterId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIpBgpExtAfPathAttrClusterId_Type.__name__ = "OctetString"
_RcIpBgpExtAfPathAttrClusterId_Object = MibTableColumn
rcIpBgpExtAfPathAttrClusterId = _RcIpBgpExtAfPathAttrClusterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 16, 7, 1, 4),
    _RcIpBgpExtAfPathAttrClusterId_Type()
)
rcIpBgpExtAfPathAttrClusterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpExtAfPathAttrClusterId.setStatus("current")
_RcIpBgpTmp_ObjectIdentity = ObjectIdentity
rcIpBgpTmp = _RcIpBgpTmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17)
)
_RcIpBgpTmpNotification_ObjectIdentity = ObjectIdentity
rcIpBgpTmpNotification = _RcIpBgpTmpNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 0)
)
_RcIpBgpTmpLocalAsNew_Type = InetAutonomousSystemNumber
_RcIpBgpTmpLocalAsNew_Object = MibScalar
rcIpBgpTmpLocalAsNew = _RcIpBgpTmpLocalAsNew_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 9),
    _RcIpBgpTmpLocalAsNew_Type()
)
rcIpBgpTmpLocalAsNew.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpLocalAsNew.setStatus("current")
_RcIpBgpTmpPeerAf_ObjectIdentity = ObjectIdentity
rcIpBgpTmpPeerAf = _RcIpBgpTmpPeerAf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10)
)
_RcIpBgpTmpPeerAfTable_Object = MibTable
rcIpBgpTmpPeerAfTable = _RcIpBgpTmpPeerAfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfTable.setStatus("current")
_RcIpBgpTmpPeerAfEntry_Object = MibTableRow
rcIpBgpTmpPeerAfEntry = _RcIpBgpTmpPeerAfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1)
)
rcIpBgpTmpPeerAfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfInstance"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfLocalAddrType"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfLocalAddr"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfRemoteAddrType"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfRemoteAddr"),
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfEntry.setStatus("current")


class _RcIpBgpTmpPeerAfInstance_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfInstance based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_RcIpBgpTmpPeerAfInstance_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfInstance_Object = MibTableColumn
rcIpBgpTmpPeerAfInstance = _RcIpBgpTmpPeerAfInstance_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 1),
    _RcIpBgpTmpPeerAfInstance_Type()
)
rcIpBgpTmpPeerAfInstance.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfInstance.setStatus("current")
_RcIpBgpTmpPeerAfLocalAddrType_Type = InetAddressType
_RcIpBgpTmpPeerAfLocalAddrType_Object = MibTableColumn
rcIpBgpTmpPeerAfLocalAddrType = _RcIpBgpTmpPeerAfLocalAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 2),
    _RcIpBgpTmpPeerAfLocalAddrType_Type()
)
rcIpBgpTmpPeerAfLocalAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLocalAddrType.setStatus("current")
_RcIpBgpTmpPeerAfLocalAddr_Type = InetAddress
_RcIpBgpTmpPeerAfLocalAddr_Object = MibTableColumn
rcIpBgpTmpPeerAfLocalAddr = _RcIpBgpTmpPeerAfLocalAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 3),
    _RcIpBgpTmpPeerAfLocalAddr_Type()
)
rcIpBgpTmpPeerAfLocalAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLocalAddr.setStatus("current")
_RcIpBgpTmpPeerAfRemoteAddrType_Type = InetAddressType
_RcIpBgpTmpPeerAfRemoteAddrType_Object = MibTableColumn
rcIpBgpTmpPeerAfRemoteAddrType = _RcIpBgpTmpPeerAfRemoteAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 4),
    _RcIpBgpTmpPeerAfRemoteAddrType_Type()
)
rcIpBgpTmpPeerAfRemoteAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfRemoteAddrType.setStatus("current")
_RcIpBgpTmpPeerAfRemoteAddr_Type = InetAddress
_RcIpBgpTmpPeerAfRemoteAddr_Object = MibTableColumn
rcIpBgpTmpPeerAfRemoteAddr = _RcIpBgpTmpPeerAfRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 5),
    _RcIpBgpTmpPeerAfRemoteAddr_Type()
)
rcIpBgpTmpPeerAfRemoteAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfRemoteAddr.setStatus("current")
_RcIpBgpTmpPeerAfLocalPort_Type = InetPortNumber
_RcIpBgpTmpPeerAfLocalPort_Object = MibTableColumn
rcIpBgpTmpPeerAfLocalPort = _RcIpBgpTmpPeerAfLocalPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 6),
    _RcIpBgpTmpPeerAfLocalPort_Type()
)
rcIpBgpTmpPeerAfLocalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLocalPort.setStatus("current")
_RcIpBgpTmpPeerAfLocalAs_Type = InetAutonomousSystemNumber
_RcIpBgpTmpPeerAfLocalAs_Object = MibTableColumn
rcIpBgpTmpPeerAfLocalAs = _RcIpBgpTmpPeerAfLocalAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 7),
    _RcIpBgpTmpPeerAfLocalAs_Type()
)
rcIpBgpTmpPeerAfLocalAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLocalAs.setStatus("current")
_RcIpBgpTmpPeerAfRemotePort_Type = InetPortNumber
_RcIpBgpTmpPeerAfRemotePort_Object = MibTableColumn
rcIpBgpTmpPeerAfRemotePort = _RcIpBgpTmpPeerAfRemotePort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 8),
    _RcIpBgpTmpPeerAfRemotePort_Type()
)
rcIpBgpTmpPeerAfRemotePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfRemotePort.setStatus("current")
_RcIpBgpTmpPeerAfRemoteAs_Type = InetAutonomousSystemNumber
_RcIpBgpTmpPeerAfRemoteAs_Object = MibTableColumn
rcIpBgpTmpPeerAfRemoteAs = _RcIpBgpTmpPeerAfRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 9),
    _RcIpBgpTmpPeerAfRemoteAs_Type()
)
rcIpBgpTmpPeerAfRemoteAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfRemoteAs.setStatus("current")
_RcIpBgpTmpPeerAfIdentifier_Type = RcIpBgpTmpIdentifierTC
_RcIpBgpTmpPeerAfIdentifier_Object = MibTableColumn
rcIpBgpTmpPeerAfIdentifier = _RcIpBgpTmpPeerAfIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 10),
    _RcIpBgpTmpPeerAfIdentifier_Type()
)
rcIpBgpTmpPeerAfIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfIdentifier.setStatus("current")


class _RcIpBgpTmpPeerAfAdminStatus_Type(Integer32):
    """Custom type rcIpBgpTmpPeerAfAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("halted", 1),
          ("running", 2))
    )


_RcIpBgpTmpPeerAfAdminStatus_Type.__name__ = "Integer32"
_RcIpBgpTmpPeerAfAdminStatus_Object = MibTableColumn
rcIpBgpTmpPeerAfAdminStatus = _RcIpBgpTmpPeerAfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 11),
    _RcIpBgpTmpPeerAfAdminStatus_Type()
)
rcIpBgpTmpPeerAfAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfAdminStatus.setStatus("current")


class _RcIpBgpTmpPeerAfPeerState_Type(Integer32):
    """Custom type rcIpBgpTmpPeerAfPeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("connect", 2),
          ("established", 6),
          ("idle", 1),
          ("openconfirm", 5),
          ("opensent", 4))
    )


_RcIpBgpTmpPeerAfPeerState_Type.__name__ = "Integer32"
_RcIpBgpTmpPeerAfPeerState_Object = MibTableColumn
rcIpBgpTmpPeerAfPeerState = _RcIpBgpTmpPeerAfPeerState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 12),
    _RcIpBgpTmpPeerAfPeerState_Type()
)
rcIpBgpTmpPeerAfPeerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfPeerState.setStatus("current")


class _RcIpBgpTmpPeerAfConfiguredVersion_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfConfiguredVersion based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpBgpTmpPeerAfConfiguredVersion_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfConfiguredVersion_Object = MibTableColumn
rcIpBgpTmpPeerAfConfiguredVersion = _RcIpBgpTmpPeerAfConfiguredVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 13),
    _RcIpBgpTmpPeerAfConfiguredVersion_Type()
)
rcIpBgpTmpPeerAfConfiguredVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfConfiguredVersion.setStatus("current")


class _RcIpBgpTmpPeerAfNegotiatedVersion_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfNegotiatedVersion based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpBgpTmpPeerAfNegotiatedVersion_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfNegotiatedVersion_Object = MibTableColumn
rcIpBgpTmpPeerAfNegotiatedVersion = _RcIpBgpTmpPeerAfNegotiatedVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 1, 1, 14),
    _RcIpBgpTmpPeerAfNegotiatedVersion_Type()
)
rcIpBgpTmpPeerAfNegotiatedVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfNegotiatedVersion.setStatus("current")
_RcIpBgpTmpPeerAfErrors_ObjectIdentity = ObjectIdentity
rcIpBgpTmpPeerAfErrors = _RcIpBgpTmpPeerAfErrors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2)
)
_RcIpBgpTmpPeerAfErrorsTable_Object = MibTable
rcIpBgpTmpPeerAfErrorsTable = _RcIpBgpTmpPeerAfErrorsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfErrorsTable.setStatus("current")
_RcIpBgpTmpPeerAfErrorsEntry_Object = MibTableRow
rcIpBgpTmpPeerAfErrorsEntry = _RcIpBgpTmpPeerAfErrorsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfErrorsEntry.setStatus("current")


class _RcIpBgpTmpPeerAfLastErrorCodeReceived_Type(OctetString):
    """Custom type rcIpBgpTmpPeerAfLastErrorCodeReceived based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RcIpBgpTmpPeerAfLastErrorCodeReceived_Type.__name__ = "OctetString"
_RcIpBgpTmpPeerAfLastErrorCodeReceived_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorCodeReceived = _RcIpBgpTmpPeerAfLastErrorCodeReceived_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 1),
    _RcIpBgpTmpPeerAfLastErrorCodeReceived_Type()
)
rcIpBgpTmpPeerAfLastErrorCodeReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorCodeReceived.setStatus("current")


class _RcIpBgpTmpPeerAfLastErrorSubCodeReceived_Type(OctetString):
    """Custom type rcIpBgpTmpPeerAfLastErrorSubCodeReceived based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RcIpBgpTmpPeerAfLastErrorSubCodeReceived_Type.__name__ = "OctetString"
_RcIpBgpTmpPeerAfLastErrorSubCodeReceived_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorSubCodeReceived = _RcIpBgpTmpPeerAfLastErrorSubCodeReceived_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 2),
    _RcIpBgpTmpPeerAfLastErrorSubCodeReceived_Type()
)
rcIpBgpTmpPeerAfLastErrorSubCodeReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorSubCodeReceived.setStatus("current")
_RcIpBgpTmpPeerAfLastErrorReceivedTime_Type = TimeStamp
_RcIpBgpTmpPeerAfLastErrorReceivedTime_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorReceivedTime = _RcIpBgpTmpPeerAfLastErrorReceivedTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 3),
    _RcIpBgpTmpPeerAfLastErrorReceivedTime_Type()
)
rcIpBgpTmpPeerAfLastErrorReceivedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorReceivedTime.setStatus("current")
_RcIpBgpTmpPeerAfLastErrorReceivedText_Type = SnmpAdminString
_RcIpBgpTmpPeerAfLastErrorReceivedText_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorReceivedText = _RcIpBgpTmpPeerAfLastErrorReceivedText_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 4),
    _RcIpBgpTmpPeerAfLastErrorReceivedText_Type()
)
rcIpBgpTmpPeerAfLastErrorReceivedText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorReceivedText.setStatus("current")


class _RcIpBgpTmpPeerAfLastErrorReceivedData_Type(OctetString):
    """Custom type rcIpBgpTmpPeerAfLastErrorReceivedData based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4075),
    )


_RcIpBgpTmpPeerAfLastErrorReceivedData_Type.__name__ = "OctetString"
_RcIpBgpTmpPeerAfLastErrorReceivedData_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorReceivedData = _RcIpBgpTmpPeerAfLastErrorReceivedData_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 5),
    _RcIpBgpTmpPeerAfLastErrorReceivedData_Type()
)
rcIpBgpTmpPeerAfLastErrorReceivedData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorReceivedData.setStatus("current")


class _RcIpBgpTmpPeerAfLastErrorCodeSent_Type(OctetString):
    """Custom type rcIpBgpTmpPeerAfLastErrorCodeSent based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RcIpBgpTmpPeerAfLastErrorCodeSent_Type.__name__ = "OctetString"
_RcIpBgpTmpPeerAfLastErrorCodeSent_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorCodeSent = _RcIpBgpTmpPeerAfLastErrorCodeSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 6),
    _RcIpBgpTmpPeerAfLastErrorCodeSent_Type()
)
rcIpBgpTmpPeerAfLastErrorCodeSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorCodeSent.setStatus("current")


class _RcIpBgpTmpPeerAfLastErrorSubCodeSent_Type(OctetString):
    """Custom type rcIpBgpTmpPeerAfLastErrorSubCodeSent based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RcIpBgpTmpPeerAfLastErrorSubCodeSent_Type.__name__ = "OctetString"
_RcIpBgpTmpPeerAfLastErrorSubCodeSent_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorSubCodeSent = _RcIpBgpTmpPeerAfLastErrorSubCodeSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 7),
    _RcIpBgpTmpPeerAfLastErrorSubCodeSent_Type()
)
rcIpBgpTmpPeerAfLastErrorSubCodeSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorSubCodeSent.setStatus("current")
_RcIpBgpTmpPeerAfLastErrorSentTime_Type = TimeStamp
_RcIpBgpTmpPeerAfLastErrorSentTime_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorSentTime = _RcIpBgpTmpPeerAfLastErrorSentTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 8),
    _RcIpBgpTmpPeerAfLastErrorSentTime_Type()
)
rcIpBgpTmpPeerAfLastErrorSentTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorSentTime.setStatus("current")
_RcIpBgpTmpPeerAfLastErrorSentText_Type = SnmpAdminString
_RcIpBgpTmpPeerAfLastErrorSentText_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorSentText = _RcIpBgpTmpPeerAfLastErrorSentText_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 9),
    _RcIpBgpTmpPeerAfLastErrorSentText_Type()
)
rcIpBgpTmpPeerAfLastErrorSentText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorSentText.setStatus("current")


class _RcIpBgpTmpPeerAfLastErrorSentData_Type(OctetString):
    """Custom type rcIpBgpTmpPeerAfLastErrorSentData based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4075),
    )


_RcIpBgpTmpPeerAfLastErrorSentData_Type.__name__ = "OctetString"
_RcIpBgpTmpPeerAfLastErrorSentData_Object = MibTableColumn
rcIpBgpTmpPeerAfLastErrorSentData = _RcIpBgpTmpPeerAfLastErrorSentData_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 2, 1, 1, 10),
    _RcIpBgpTmpPeerAfLastErrorSentData_Type()
)
rcIpBgpTmpPeerAfLastErrorSentData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfLastErrorSentData.setStatus("current")
_RcIpBgpTmpPeerAfTimers_ObjectIdentity = ObjectIdentity
rcIpBgpTmpPeerAfTimers = _RcIpBgpTmpPeerAfTimers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3)
)
_RcIpBgpTmpPeerAfEventTimesTable_Object = MibTable
rcIpBgpTmpPeerAfEventTimesTable = _RcIpBgpTmpPeerAfEventTimesTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfEventTimesTable.setStatus("current")
_RcIpBgpTmpPeerAfEventTimesEntry_Object = MibTableRow
rcIpBgpTmpPeerAfEventTimesEntry = _RcIpBgpTmpPeerAfEventTimesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 1, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfEventTimesEntry.setStatus("current")
_RcIpBgpTmpPeerAfFsmEstablishedTime_Type = Gauge32
_RcIpBgpTmpPeerAfFsmEstablishedTime_Object = MibTableColumn
rcIpBgpTmpPeerAfFsmEstablishedTime = _RcIpBgpTmpPeerAfFsmEstablishedTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 1, 1, 1),
    _RcIpBgpTmpPeerAfFsmEstablishedTime_Type()
)
rcIpBgpTmpPeerAfFsmEstablishedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfFsmEstablishedTime.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfFsmEstablishedTime.setUnits("seconds")
_RcIpBgpTmpPeerAfInUpdatesElapsedTime_Type = Gauge32
_RcIpBgpTmpPeerAfInUpdatesElapsedTime_Object = MibTableColumn
rcIpBgpTmpPeerAfInUpdatesElapsedTime = _RcIpBgpTmpPeerAfInUpdatesElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 1, 1, 2),
    _RcIpBgpTmpPeerAfInUpdatesElapsedTime_Type()
)
rcIpBgpTmpPeerAfInUpdatesElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfInUpdatesElapsedTime.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfInUpdatesElapsedTime.setUnits("seconds")
_RcIpBgpTmpPeerAfConfiguredTimersTable_Object = MibTable
rcIpBgpTmpPeerAfConfiguredTimersTable = _RcIpBgpTmpPeerAfConfiguredTimersTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 2)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfConfiguredTimersTable.setStatus("current")
_RcIpBgpTmpPeerAfConfiguredTimersEntry_Object = MibTableRow
rcIpBgpTmpPeerAfConfiguredTimersEntry = _RcIpBgpTmpPeerAfConfiguredTimersEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 2, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfConfiguredTimersEntry.setStatus("current")


class _RcIpBgpTmpPeerAfConnectRetryInterval_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfConnectRetryInterval based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpBgpTmpPeerAfConnectRetryInterval_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfConnectRetryInterval_Object = MibTableColumn
rcIpBgpTmpPeerAfConnectRetryInterval = _RcIpBgpTmpPeerAfConnectRetryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 2, 1, 1),
    _RcIpBgpTmpPeerAfConnectRetryInterval_Type()
)
rcIpBgpTmpPeerAfConnectRetryInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfConnectRetryInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfConnectRetryInterval.setUnits("seconds")


class _RcIpBgpTmpPeerAfHoldTimeConfigured_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfHoldTimeConfigured based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(3, 65535),
    )


_RcIpBgpTmpPeerAfHoldTimeConfigured_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfHoldTimeConfigured_Object = MibTableColumn
rcIpBgpTmpPeerAfHoldTimeConfigured = _RcIpBgpTmpPeerAfHoldTimeConfigured_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 2, 1, 2),
    _RcIpBgpTmpPeerAfHoldTimeConfigured_Type()
)
rcIpBgpTmpPeerAfHoldTimeConfigured.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfHoldTimeConfigured.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfHoldTimeConfigured.setUnits("seconds")


class _RcIpBgpTmpPeerAfKeepAliveConfigured_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfKeepAliveConfigured based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 21845),
    )


_RcIpBgpTmpPeerAfKeepAliveConfigured_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfKeepAliveConfigured_Object = MibTableColumn
rcIpBgpTmpPeerAfKeepAliveConfigured = _RcIpBgpTmpPeerAfKeepAliveConfigured_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 2, 1, 3),
    _RcIpBgpTmpPeerAfKeepAliveConfigured_Type()
)
rcIpBgpTmpPeerAfKeepAliveConfigured.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfKeepAliveConfigured.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfKeepAliveConfigured.setUnits("seconds")


class _RcIpBgpTmpPeerAfMinASOrigInterval_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfMinASOrigInterval based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpTmpPeerAfMinASOrigInterval_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfMinASOrigInterval_Object = MibTableColumn
rcIpBgpTmpPeerAfMinASOrigInterval = _RcIpBgpTmpPeerAfMinASOrigInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 2, 1, 4),
    _RcIpBgpTmpPeerAfMinASOrigInterval_Type()
)
rcIpBgpTmpPeerAfMinASOrigInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfMinASOrigInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfMinASOrigInterval.setUnits("seconds")


class _RcIpBgpTmpPeerAfMinRouteAdverInterval_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfMinRouteAdverInterval based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBgpTmpPeerAfMinRouteAdverInterval_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfMinRouteAdverInterval_Object = MibTableColumn
rcIpBgpTmpPeerAfMinRouteAdverInterval = _RcIpBgpTmpPeerAfMinRouteAdverInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 2, 1, 5),
    _RcIpBgpTmpPeerAfMinRouteAdverInterval_Type()
)
rcIpBgpTmpPeerAfMinRouteAdverInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfMinRouteAdverInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfMinRouteAdverInterval.setUnits("seconds")
_RcIpBgpTmpPeerAfNegotiatedTimersTable_Object = MibTable
rcIpBgpTmpPeerAfNegotiatedTimersTable = _RcIpBgpTmpPeerAfNegotiatedTimersTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 3)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfNegotiatedTimersTable.setStatus("current")
_RcIpBgpTmpPeerAfNegotiatedTimersEntry_Object = MibTableRow
rcIpBgpTmpPeerAfNegotiatedTimersEntry = _RcIpBgpTmpPeerAfNegotiatedTimersEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 3, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfNegotiatedTimersEntry.setStatus("current")


class _RcIpBgpTmpPeerAfHoldTime_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfHoldTime based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(3, 65535),
    )


_RcIpBgpTmpPeerAfHoldTime_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfHoldTime_Object = MibTableColumn
rcIpBgpTmpPeerAfHoldTime = _RcIpBgpTmpPeerAfHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 3, 1, 1),
    _RcIpBgpTmpPeerAfHoldTime_Type()
)
rcIpBgpTmpPeerAfHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfHoldTime.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfHoldTime.setUnits("seconds")


class _RcIpBgpTmpPeerAfKeepAlive_Type(Unsigned32):
    """Custom type rcIpBgpTmpPeerAfKeepAlive based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 21845),
    )


_RcIpBgpTmpPeerAfKeepAlive_Type.__name__ = "Unsigned32"
_RcIpBgpTmpPeerAfKeepAlive_Object = MibTableColumn
rcIpBgpTmpPeerAfKeepAlive = _RcIpBgpTmpPeerAfKeepAlive_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 3, 3, 1, 2),
    _RcIpBgpTmpPeerAfKeepAlive_Type()
)
rcIpBgpTmpPeerAfKeepAlive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfKeepAlive.setStatus("current")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfKeepAlive.setUnits("seconds")
_RcIpBgpTmpPeerAfCounters_ObjectIdentity = ObjectIdentity
rcIpBgpTmpPeerAfCounters = _RcIpBgpTmpPeerAfCounters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 4)
)
_RcIpBgpTmpPeerAfCountersTable_Object = MibTable
rcIpBgpTmpPeerAfCountersTable = _RcIpBgpTmpPeerAfCountersTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 4, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfCountersTable.setStatus("current")
_RcIpBgpTmpPeerAfCountersEntry_Object = MibTableRow
rcIpBgpTmpPeerAfCountersEntry = _RcIpBgpTmpPeerAfCountersEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 4, 1, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfCountersEntry.setStatus("current")
_RcIpBgpTmpPeerAfInUpdates_Type = Counter32
_RcIpBgpTmpPeerAfInUpdates_Object = MibTableColumn
rcIpBgpTmpPeerAfInUpdates = _RcIpBgpTmpPeerAfInUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 4, 1, 1, 1),
    _RcIpBgpTmpPeerAfInUpdates_Type()
)
rcIpBgpTmpPeerAfInUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfInUpdates.setStatus("current")
_RcIpBgpTmpPeerAfOutUpdates_Type = Counter32
_RcIpBgpTmpPeerAfOutUpdates_Object = MibTableColumn
rcIpBgpTmpPeerAfOutUpdates = _RcIpBgpTmpPeerAfOutUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 4, 1, 1, 2),
    _RcIpBgpTmpPeerAfOutUpdates_Type()
)
rcIpBgpTmpPeerAfOutUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfOutUpdates.setStatus("current")
_RcIpBgpTmpPeerAfInTotalMessages_Type = Counter32
_RcIpBgpTmpPeerAfInTotalMessages_Object = MibTableColumn
rcIpBgpTmpPeerAfInTotalMessages = _RcIpBgpTmpPeerAfInTotalMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 4, 1, 1, 3),
    _RcIpBgpTmpPeerAfInTotalMessages_Type()
)
rcIpBgpTmpPeerAfInTotalMessages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfInTotalMessages.setStatus("current")
_RcIpBgpTmpPeerAfOutTotalMessages_Type = Counter32
_RcIpBgpTmpPeerAfOutTotalMessages_Object = MibTableColumn
rcIpBgpTmpPeerAfOutTotalMessages = _RcIpBgpTmpPeerAfOutTotalMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 4, 1, 1, 4),
    _RcIpBgpTmpPeerAfOutTotalMessages_Type()
)
rcIpBgpTmpPeerAfOutTotalMessages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfOutTotalMessages.setStatus("current")
_RcIpBgpTmpPeerAfFsmEstablishedTransitions_Type = Counter32
_RcIpBgpTmpPeerAfFsmEstablishedTransitions_Object = MibTableColumn
rcIpBgpTmpPeerAfFsmEstablishedTransitions = _RcIpBgpTmpPeerAfFsmEstablishedTransitions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 10, 4, 1, 1, 5),
    _RcIpBgpTmpPeerAfFsmEstablishedTransitions_Type()
)
rcIpBgpTmpPeerAfFsmEstablishedTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpPeerAfFsmEstablishedTransitions.setStatus("current")
_RcIpBgpTmpRib_ObjectIdentity = ObjectIdentity
rcIpBgpTmpRib = _RcIpBgpTmpRib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11)
)
_RcIpBgpTmpNlriTable_Object = MibTable
rcIpBgpTmpNlriTable = _RcIpBgpTmpNlriTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriTable.setStatus("current")
_RcIpBgpTmpNlriEntry_Object = MibTableRow
rcIpBgpTmpNlriEntry = _RcIpBgpTmpNlriEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1)
)
rcIpBgpTmpNlriEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpTmpNlriAfi"),
    (0, "RAPID-CITY", "rcIpBgpTmpNlriSafi"),
    (0, "RAPID-CITY", "rcIpBgpTmpNlriPrefix"),
    (0, "RAPID-CITY", "rcIpBgpTmpNlriPrefixLen"),
    (0, "RAPID-CITY", "rcIpBgpTmpNlriIndex"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfInstance"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfLocalAddrType"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfLocalAddr"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfRemoteAddrType"),
    (0, "RAPID-CITY", "rcIpBgpTmpPeerAfRemoteAddr"),
)
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriEntry.setStatus("current")
_RcIpBgpTmpNlriIndex_Type = Unsigned32
_RcIpBgpTmpNlriIndex_Object = MibTableColumn
rcIpBgpTmpNlriIndex = _RcIpBgpTmpNlriIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 1),
    _RcIpBgpTmpNlriIndex_Type()
)
rcIpBgpTmpNlriIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriIndex.setStatus("current")
_RcIpBgpTmpNlriAfi_Type = RcIpBgpTmpAddressFamilyIdentifierTC
_RcIpBgpTmpNlriAfi_Object = MibTableColumn
rcIpBgpTmpNlriAfi = _RcIpBgpTmpNlriAfi_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 2),
    _RcIpBgpTmpNlriAfi_Type()
)
rcIpBgpTmpNlriAfi.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriAfi.setStatus("current")
_RcIpBgpTmpNlriSafi_Type = RcIpBgpTmpSubsequentAddressFamilyIdentifierTC
_RcIpBgpTmpNlriSafi_Object = MibTableColumn
rcIpBgpTmpNlriSafi = _RcIpBgpTmpNlriSafi_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 3),
    _RcIpBgpTmpNlriSafi_Type()
)
rcIpBgpTmpNlriSafi.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriSafi.setStatus("current")
_RcIpBgpTmpNlriPrefixType_Type = InetAddressType
_RcIpBgpTmpNlriPrefixType_Object = MibTableColumn
rcIpBgpTmpNlriPrefixType = _RcIpBgpTmpNlriPrefixType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 4),
    _RcIpBgpTmpNlriPrefixType_Type()
)
rcIpBgpTmpNlriPrefixType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriPrefixType.setStatus("current")
_RcIpBgpTmpNlriPrefix_Type = InetAddress
_RcIpBgpTmpNlriPrefix_Object = MibTableColumn
rcIpBgpTmpNlriPrefix = _RcIpBgpTmpNlriPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 5),
    _RcIpBgpTmpNlriPrefix_Type()
)
rcIpBgpTmpNlriPrefix.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriPrefix.setStatus("current")
_RcIpBgpTmpNlriPrefixLen_Type = InetAddressPrefixLength
_RcIpBgpTmpNlriPrefixLen_Object = MibTableColumn
rcIpBgpTmpNlriPrefixLen = _RcIpBgpTmpNlriPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 6),
    _RcIpBgpTmpNlriPrefixLen_Type()
)
rcIpBgpTmpNlriPrefixLen.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriPrefixLen.setStatus("current")
_RcIpBgpTmpNlriBest_Type = TruthValue
_RcIpBgpTmpNlriBest_Object = MibTableColumn
rcIpBgpTmpNlriBest = _RcIpBgpTmpNlriBest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 7),
    _RcIpBgpTmpNlriBest_Type()
)
rcIpBgpTmpNlriBest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriBest.setStatus("current")
_RcIpBgpTmpNlriCalcLocalPref_Type = Unsigned32
_RcIpBgpTmpNlriCalcLocalPref_Object = MibTableColumn
rcIpBgpTmpNlriCalcLocalPref = _RcIpBgpTmpNlriCalcLocalPref_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 8),
    _RcIpBgpTmpNlriCalcLocalPref_Type()
)
rcIpBgpTmpNlriCalcLocalPref.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpNlriCalcLocalPref.setStatus("current")
_RcIpBgpTmpAfPathAttrIndex_Type = Unsigned32
_RcIpBgpTmpAfPathAttrIndex_Object = MibTableColumn
rcIpBgpTmpAfPathAttrIndex = _RcIpBgpTmpAfPathAttrIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 9),
    _RcIpBgpTmpAfPathAttrIndex_Type()
)
rcIpBgpTmpAfPathAttrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrIndex.setStatus("current")
_RcIpBgpTmpAfPathAttrUnknownIndex_Type = Unsigned32
_RcIpBgpTmpAfPathAttrUnknownIndex_Object = MibTableColumn
rcIpBgpTmpAfPathAttrUnknownIndex = _RcIpBgpTmpAfPathAttrUnknownIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 1, 1, 10),
    _RcIpBgpTmpAfPathAttrUnknownIndex_Type()
)
rcIpBgpTmpAfPathAttrUnknownIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrUnknownIndex.setStatus("current")
_RcIpBgpTmpAfPathAttrCounter_Type = Counter32
_RcIpBgpTmpAfPathAttrCounter_Object = MibScalar
rcIpBgpTmpAfPathAttrCounter = _RcIpBgpTmpAfPathAttrCounter_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 3),
    _RcIpBgpTmpAfPathAttrCounter_Type()
)
rcIpBgpTmpAfPathAttrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrCounter.setStatus("current")
_RcIpBgpTmpAfPathAttrTable_Object = MibTable
rcIpBgpTmpAfPathAttrTable = _RcIpBgpTmpAfPathAttrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4)
)
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrTable.setStatus("current")
_RcIpBgpTmpAfPathAttrEntry_Object = MibTableRow
rcIpBgpTmpAfPathAttrEntry = _RcIpBgpTmpAfPathAttrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1)
)
rcIpBgpTmpAfPathAttrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpBgpTmpAfPathAttrIndex"),
)
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrEntry.setStatus("current")


class _RcIpBgpTmpAfPathAttrOrigin_Type(Integer32):
    """Custom type rcIpBgpTmpAfPathAttrOrigin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("egp", 2),
          ("igp", 1),
          ("incomplete", 3))
    )


_RcIpBgpTmpAfPathAttrOrigin_Type.__name__ = "Integer32"
_RcIpBgpTmpAfPathAttrOrigin_Object = MibTableColumn
rcIpBgpTmpAfPathAttrOrigin = _RcIpBgpTmpAfPathAttrOrigin_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 1),
    _RcIpBgpTmpAfPathAttrOrigin_Type()
)
rcIpBgpTmpAfPathAttrOrigin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrOrigin.setStatus("current")
_RcIpBgpTmpAfPathAttrNextHopAddrType_Type = InetAddressType
_RcIpBgpTmpAfPathAttrNextHopAddrType_Object = MibTableColumn
rcIpBgpTmpAfPathAttrNextHopAddrType = _RcIpBgpTmpAfPathAttrNextHopAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 2),
    _RcIpBgpTmpAfPathAttrNextHopAddrType_Type()
)
rcIpBgpTmpAfPathAttrNextHopAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrNextHopAddrType.setStatus("current")


class _RcIpBgpTmpAfPathAttrNextHopAddr_Type(InetAddress):
    """Custom type rcIpBgpTmpAfPathAttrNextHopAddr based on InetAddress"""
    subtypeSpec = InetAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 20),
    )


_RcIpBgpTmpAfPathAttrNextHopAddr_Type.__name__ = "InetAddress"
_RcIpBgpTmpAfPathAttrNextHopAddr_Object = MibTableColumn
rcIpBgpTmpAfPathAttrNextHopAddr = _RcIpBgpTmpAfPathAttrNextHopAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 3),
    _RcIpBgpTmpAfPathAttrNextHopAddr_Type()
)
rcIpBgpTmpAfPathAttrNextHopAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrNextHopAddr.setStatus("current")
_RcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType_Type = InetAddressType
_RcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType_Object = MibTableColumn
rcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType = _RcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 4),
    _RcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType_Type()
)
rcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType.setStatus("current")
_RcIpBgpTmpAfPathAttrLinkLocalNextHopAddr_Type = InetAddress
_RcIpBgpTmpAfPathAttrLinkLocalNextHopAddr_Object = MibTableColumn
rcIpBgpTmpAfPathAttrLinkLocalNextHopAddr = _RcIpBgpTmpAfPathAttrLinkLocalNextHopAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 5),
    _RcIpBgpTmpAfPathAttrLinkLocalNextHopAddr_Type()
)
rcIpBgpTmpAfPathAttrLinkLocalNextHopAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrLinkLocalNextHopAddr.setStatus("current")
_RcIpBgpTmpAfPathAttrMedPresent_Type = TruthValue
_RcIpBgpTmpAfPathAttrMedPresent_Object = MibTableColumn
rcIpBgpTmpAfPathAttrMedPresent = _RcIpBgpTmpAfPathAttrMedPresent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 6),
    _RcIpBgpTmpAfPathAttrMedPresent_Type()
)
rcIpBgpTmpAfPathAttrMedPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrMedPresent.setStatus("current")
_RcIpBgpTmpAfPathAttrMed_Type = Unsigned32
_RcIpBgpTmpAfPathAttrMed_Object = MibTableColumn
rcIpBgpTmpAfPathAttrMed = _RcIpBgpTmpAfPathAttrMed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 7),
    _RcIpBgpTmpAfPathAttrMed_Type()
)
rcIpBgpTmpAfPathAttrMed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrMed.setStatus("current")
_RcIpBgpTmpAfPathAttrLocalPref_Type = Unsigned32
_RcIpBgpTmpAfPathAttrLocalPref_Object = MibTableColumn
rcIpBgpTmpAfPathAttrLocalPref = _RcIpBgpTmpAfPathAttrLocalPref_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 8),
    _RcIpBgpTmpAfPathAttrLocalPref_Type()
)
rcIpBgpTmpAfPathAttrLocalPref.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrLocalPref.setStatus("current")


class _RcIpBgpTmpAfPathAttrAtomicAggregate_Type(Integer32):
    """Custom type rcIpBgpTmpAfPathAttrAtomicAggregate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atomicAggregateMissing", 2),
          ("atomicAggregatePresent", 1))
    )


_RcIpBgpTmpAfPathAttrAtomicAggregate_Type.__name__ = "Integer32"
_RcIpBgpTmpAfPathAttrAtomicAggregate_Object = MibTableColumn
rcIpBgpTmpAfPathAttrAtomicAggregate = _RcIpBgpTmpAfPathAttrAtomicAggregate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 9),
    _RcIpBgpTmpAfPathAttrAtomicAggregate_Type()
)
rcIpBgpTmpAfPathAttrAtomicAggregate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrAtomicAggregate.setStatus("current")
_RcIpBgpTmpAfPathAttrAggregatorAS_Type = InetAutonomousSystemNumber
_RcIpBgpTmpAfPathAttrAggregatorAS_Object = MibTableColumn
rcIpBgpTmpAfPathAttrAggregatorAS = _RcIpBgpTmpAfPathAttrAggregatorAS_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 10),
    _RcIpBgpTmpAfPathAttrAggregatorAS_Type()
)
rcIpBgpTmpAfPathAttrAggregatorAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrAggregatorAS.setStatus("current")
_RcIpBgpTmpAfPathAttrAggregatorAddr_Type = RcIpBgpTmpIdentifierTC
_RcIpBgpTmpAfPathAttrAggregatorAddr_Object = MibTableColumn
rcIpBgpTmpAfPathAttrAggregatorAddr = _RcIpBgpTmpAfPathAttrAggregatorAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 11),
    _RcIpBgpTmpAfPathAttrAggregatorAddr_Type()
)
rcIpBgpTmpAfPathAttrAggregatorAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAfPathAttrAggregatorAddr.setStatus("current")
_RcIpBgpTmpAsPathCalcLength_Type = Unsigned32
_RcIpBgpTmpAsPathCalcLength_Object = MibTableColumn
rcIpBgpTmpAsPathCalcLength = _RcIpBgpTmpAsPathCalcLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 12),
    _RcIpBgpTmpAsPathCalcLength_Type()
)
rcIpBgpTmpAsPathCalcLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAsPathCalcLength.setStatus("current")
_RcIpBgpTmpAsPathIndex_Type = Unsigned32
_RcIpBgpTmpAsPathIndex_Object = MibTableColumn
rcIpBgpTmpAsPathIndex = _RcIpBgpTmpAsPathIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 13),
    _RcIpBgpTmpAsPathIndex_Type()
)
rcIpBgpTmpAsPathIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAsPathIndex.setStatus("current")
_RcIpBgpTmpAsPathString_Type = SnmpAdminString
_RcIpBgpTmpAsPathString_Object = MibTableColumn
rcIpBgpTmpAsPathString = _RcIpBgpTmpAsPathString_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 11, 4, 1, 14),
    _RcIpBgpTmpAsPathString_Type()
)
rcIpBgpTmpAsPathString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpBgpTmpAsPathString.setStatus("current")
_RcIpBgpTmpExtensions_ObjectIdentity = ObjectIdentity
rcIpBgpTmpExtensions = _RcIpBgpTmpExtensions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 12)
)
_RcIpMpls_ObjectIdentity = ObjectIdentity
rcIpMpls = _RcIpMpls_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102)
)
_RcIpMplsIfTable_Object = MibTable
rcIpMplsIfTable = _RcIpMplsIfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20)
)
if mibBuilder.loadTexts:
    rcIpMplsIfTable.setStatus("current")
_RcIpMplsIfEntry_Object = MibTableRow
rcIpMplsIfEntry = _RcIpMplsIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1)
)
rcIpMplsIfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMplsIfIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpMplsIfEntry.setStatus("current")


class _RcIpMplsIfIfIndex_Type(InterfaceIndexOrZero):
    """Custom type rcIpMplsIfIfIndex based on InterfaceIndexOrZero"""
    subtypeSpec = InterfaceIndexOrZero.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6142),
    )


_RcIpMplsIfIfIndex_Type.__name__ = "InterfaceIndexOrZero"
_RcIpMplsIfIfIndex_Object = MibTableColumn
rcIpMplsIfIfIndex = _RcIpMplsIfIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 1),
    _RcIpMplsIfIfIndex_Type()
)
rcIpMplsIfIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpMplsIfIfIndex.setStatus("current")


class _RcIpMplsIfLdpAdminState_Type(EnableValue):
    """Custom type rcIpMplsIfLdpAdminState based on EnableValue"""


_RcIpMplsIfLdpAdminState_Object = MibTableColumn
rcIpMplsIfLdpAdminState = _RcIpMplsIfLdpAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 2),
    _RcIpMplsIfLdpAdminState_Type()
)
rcIpMplsIfLdpAdminState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfLdpAdminState.setStatus("current")


class _RcIpMplsIfLdpSessionKeepAlive_Type(Unsigned32):
    """Custom type rcIpMplsIfLdpSessionKeepAlive based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(15, 65535),
    )


_RcIpMplsIfLdpSessionKeepAlive_Type.__name__ = "Unsigned32"
_RcIpMplsIfLdpSessionKeepAlive_Object = MibTableColumn
rcIpMplsIfLdpSessionKeepAlive = _RcIpMplsIfLdpSessionKeepAlive_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 3),
    _RcIpMplsIfLdpSessionKeepAlive_Type()
)
rcIpMplsIfLdpSessionKeepAlive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfLdpSessionKeepAlive.setStatus("current")
if mibBuilder.loadTexts:
    rcIpMplsIfLdpSessionKeepAlive.setUnits("seconds")


class _RcIpMplsIfLdpHelloHoldTime_Type(Unsigned32):
    """Custom type rcIpMplsIfLdpHelloHoldTime based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(5, 65535),
    )


_RcIpMplsIfLdpHelloHoldTime_Type.__name__ = "Unsigned32"
_RcIpMplsIfLdpHelloHoldTime_Object = MibTableColumn
rcIpMplsIfLdpHelloHoldTime = _RcIpMplsIfLdpHelloHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 4),
    _RcIpMplsIfLdpHelloHoldTime_Type()
)
rcIpMplsIfLdpHelloHoldTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfLdpHelloHoldTime.setStatus("current")
if mibBuilder.loadTexts:
    rcIpMplsIfLdpHelloHoldTime.setUnits("seconds")


class _RcIpMplsIfLdpTransportAddr_Type(Integer32):
    """Custom type rcIpMplsIfLdpTransportAddr based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("interface", 1),
          ("router-id", 2))
    )


_RcIpMplsIfLdpTransportAddr_Type.__name__ = "Integer32"
_RcIpMplsIfLdpTransportAddr_Object = MibTableColumn
rcIpMplsIfLdpTransportAddr = _RcIpMplsIfLdpTransportAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 5),
    _RcIpMplsIfLdpTransportAddr_Type()
)
rcIpMplsIfLdpTransportAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfLdpTransportAddr.setStatus("current")


class _RcIpMplsIfLdpImportPolicy_Type(Integer32):
    """Custom type rcIpMplsIfLdpImportPolicy based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("host-only", 2))
    )


_RcIpMplsIfLdpImportPolicy_Type.__name__ = "Integer32"
_RcIpMplsIfLdpImportPolicy_Object = MibTableColumn
rcIpMplsIfLdpImportPolicy = _RcIpMplsIfLdpImportPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 6),
    _RcIpMplsIfLdpImportPolicy_Type()
)
rcIpMplsIfLdpImportPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfLdpImportPolicy.setStatus("current")


class _RcIpMplsIfRsvpAdminState_Type(EnableValue):
    """Custom type rcIpMplsIfRsvpAdminState based on EnableValue"""


_RcIpMplsIfRsvpAdminState_Object = MibTableColumn
rcIpMplsIfRsvpAdminState = _RcIpMplsIfRsvpAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 7),
    _RcIpMplsIfRsvpAdminState_Type()
)
rcIpMplsIfRsvpAdminState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfRsvpAdminState.setStatus("current")


class _RcIpMplsIfRefreshReduction_Type(Integer32):
    """Custom type rcIpMplsIfRefreshReduction based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("global", 3))
    )


_RcIpMplsIfRefreshReduction_Type.__name__ = "Integer32"
_RcIpMplsIfRefreshReduction_Object = MibTableColumn
rcIpMplsIfRefreshReduction = _RcIpMplsIfRefreshReduction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 8),
    _RcIpMplsIfRefreshReduction_Type()
)
rcIpMplsIfRefreshReduction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfRefreshReduction.setStatus("current")


class _RcIpMplsIfRefreshInterval_Type(Unsigned32):
    """Custom type rcIpMplsIfRefreshInterval based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpMplsIfRefreshInterval_Type.__name__ = "Unsigned32"
_RcIpMplsIfRefreshInterval_Object = MibTableColumn
rcIpMplsIfRefreshInterval = _RcIpMplsIfRefreshInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 9),
    _RcIpMplsIfRefreshInterval_Type()
)
rcIpMplsIfRefreshInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfRefreshInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcIpMplsIfRefreshInterval.setUnits("seconds")


class _RcIpMplsIfRefreshMultiplier_Type(Unsigned32):
    """Custom type rcIpMplsIfRefreshMultiplier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcIpMplsIfRefreshMultiplier_Type.__name__ = "Unsigned32"
_RcIpMplsIfRefreshMultiplier_Object = MibTableColumn
rcIpMplsIfRefreshMultiplier = _RcIpMplsIfRefreshMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 10),
    _RcIpMplsIfRefreshMultiplier_Type()
)
rcIpMplsIfRefreshMultiplier.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfRefreshMultiplier.setStatus("current")
if mibBuilder.loadTexts:
    rcIpMplsIfRefreshMultiplier.setUnits("seconds")


class _RcIpMplsIfRsvpHelloInterval_Type(Unsigned32):
    """Custom type rcIpMplsIfRsvpHelloInterval based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpMplsIfRsvpHelloInterval_Type.__name__ = "Unsigned32"
_RcIpMplsIfRsvpHelloInterval_Object = MibTableColumn
rcIpMplsIfRsvpHelloInterval = _RcIpMplsIfRsvpHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 11),
    _RcIpMplsIfRsvpHelloInterval_Type()
)
rcIpMplsIfRsvpHelloInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfRsvpHelloInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcIpMplsIfRsvpHelloInterval.setUnits("seconds")


class _RcIpMplsIfMessageBundling_Type(Integer32):
    """Custom type rcIpMplsIfMessageBundling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("global", 3))
    )


_RcIpMplsIfMessageBundling_Type.__name__ = "Integer32"
_RcIpMplsIfMessageBundling_Object = MibTableColumn
rcIpMplsIfMessageBundling = _RcIpMplsIfMessageBundling_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 12),
    _RcIpMplsIfMessageBundling_Type()
)
rcIpMplsIfMessageBundling.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfMessageBundling.setStatus("current")


class _RcIpMplsIfMtu_Type(Unsigned32):
    """Custom type rcIpMplsIfMtu based on Unsigned32"""
    defaultValue = 1500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 9600),
    )


_RcIpMplsIfMtu_Type.__name__ = "Unsigned32"
_RcIpMplsIfMtu_Object = MibTableColumn
rcIpMplsIfMtu = _RcIpMplsIfMtu_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 13),
    _RcIpMplsIfMtu_Type()
)
rcIpMplsIfMtu.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfMtu.setStatus("current")
_RcIpMplsIfRowStatus_Type = RowStatus
_RcIpMplsIfRowStatus_Object = MibTableColumn
rcIpMplsIfRowStatus = _RcIpMplsIfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 102, 20, 1, 14),
    _RcIpMplsIfRowStatus_Type()
)
rcIpMplsIfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpMplsIfRowStatus.setStatus("current")
_RcIpInterVrfStaticRoute_ObjectIdentity = ObjectIdentity
rcIpInterVrfStaticRoute = _RcIpInterVrfStaticRoute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103)
)
_RcIpInterVrfStaticRouteTableSize_Type = Integer32
_RcIpInterVrfStaticRouteTableSize_Object = MibScalar
rcIpInterVrfStaticRouteTableSize = _RcIpInterVrfStaticRouteTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 1),
    _RcIpInterVrfStaticRouteTableSize_Type()
)
rcIpInterVrfStaticRouteTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteTableSize.setStatus("current")
_RcIpInterVrfStaticRouteTable_Object = MibTable
rcIpInterVrfStaticRouteTable = _RcIpInterVrfStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2)
)
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteTable.setStatus("current")
_RcIpInterVrfStaticRouteEntry_Object = MibTableRow
rcIpInterVrfStaticRouteEntry = _RcIpInterVrfStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1)
)
rcIpInterVrfStaticRouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpInterVrfStaticRouteOwnerVrfId"),
    (0, "RAPID-CITY", "rcIpInterVrfStaticRouteDest"),
    (0, "RAPID-CITY", "rcIpInterVrfStaticRouteMask"),
    (0, "RAPID-CITY", "rcIpInterVrfStaticRouteNextHop"),
)
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteEntry.setStatus("current")
_RcIpInterVrfStaticRouteOwnerVrfId_Type = VrfIdentifier
_RcIpInterVrfStaticRouteOwnerVrfId_Object = MibTableColumn
rcIpInterVrfStaticRouteOwnerVrfId = _RcIpInterVrfStaticRouteOwnerVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 1),
    _RcIpInterVrfStaticRouteOwnerVrfId_Type()
)
rcIpInterVrfStaticRouteOwnerVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteOwnerVrfId.setStatus("current")
_RcIpInterVrfStaticRouteDest_Type = IpAddress
_RcIpInterVrfStaticRouteDest_Object = MibTableColumn
rcIpInterVrfStaticRouteDest = _RcIpInterVrfStaticRouteDest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 2),
    _RcIpInterVrfStaticRouteDest_Type()
)
rcIpInterVrfStaticRouteDest.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteDest.setStatus("current")
_RcIpInterVrfStaticRouteMask_Type = IpAddress
_RcIpInterVrfStaticRouteMask_Object = MibTableColumn
rcIpInterVrfStaticRouteMask = _RcIpInterVrfStaticRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 3),
    _RcIpInterVrfStaticRouteMask_Type()
)
rcIpInterVrfStaticRouteMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteMask.setStatus("current")
_RcIpInterVrfStaticRouteNextHop_Type = IpAddress
_RcIpInterVrfStaticRouteNextHop_Object = MibTableColumn
rcIpInterVrfStaticRouteNextHop = _RcIpInterVrfStaticRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 4),
    _RcIpInterVrfStaticRouteNextHop_Type()
)
rcIpInterVrfStaticRouteNextHop.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteNextHop.setStatus("current")


class _RcIpInterVrfStaticRouteMetric_Type(Integer32):
    """Custom type rcIpInterVrfStaticRouteMetric based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpInterVrfStaticRouteMetric_Type.__name__ = "Integer32"
_RcIpInterVrfStaticRouteMetric_Object = MibTableColumn
rcIpInterVrfStaticRouteMetric = _RcIpInterVrfStaticRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 5),
    _RcIpInterVrfStaticRouteMetric_Type()
)
rcIpInterVrfStaticRouteMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteMetric.setStatus("current")


class _RcIpInterVrfStaticRouteIfIndex_Type(InterfaceIndex):
    """Custom type rcIpInterVrfStaticRouteIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpInterVrfStaticRouteIfIndex_Type.__name__ = "InterfaceIndex"
_RcIpInterVrfStaticRouteIfIndex_Object = MibTableColumn
rcIpInterVrfStaticRouteIfIndex = _RcIpInterVrfStaticRouteIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 6),
    _RcIpInterVrfStaticRouteIfIndex_Type()
)
rcIpInterVrfStaticRouteIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteIfIndex.setStatus("current")


class _RcIpInterVrfStaticRoutePreference_Type(Integer32):
    """Custom type rcIpInterVrfStaticRoutePreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpInterVrfStaticRoutePreference_Type.__name__ = "Integer32"
_RcIpInterVrfStaticRoutePreference_Object = MibTableColumn
rcIpInterVrfStaticRoutePreference = _RcIpInterVrfStaticRoutePreference_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 7),
    _RcIpInterVrfStaticRoutePreference_Type()
)
rcIpInterVrfStaticRoutePreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRoutePreference.setStatus("current")


class _RcIpInterVrfStaticRouteEnable_Type(TruthValue):
    """Custom type rcIpInterVrfStaticRouteEnable based on TruthValue"""


_RcIpInterVrfStaticRouteEnable_Object = MibTableColumn
rcIpInterVrfStaticRouteEnable = _RcIpInterVrfStaticRouteEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 8),
    _RcIpInterVrfStaticRouteEnable_Type()
)
rcIpInterVrfStaticRouteEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteEnable.setStatus("current")


class _RcIpInterVrfStaticRouteStatus_Type(Integer32):
    """Custom type rcIpInterVrfStaticRouteStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 0))
    )


_RcIpInterVrfStaticRouteStatus_Type.__name__ = "Integer32"
_RcIpInterVrfStaticRouteStatus_Object = MibTableColumn
rcIpInterVrfStaticRouteStatus = _RcIpInterVrfStaticRouteStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 9),
    _RcIpInterVrfStaticRouteStatus_Type()
)
rcIpInterVrfStaticRouteStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteStatus.setStatus("current")
_RcIpInterVrfStaticRouteRowStatus_Type = RowStatus
_RcIpInterVrfStaticRouteRowStatus_Object = MibTableColumn
rcIpInterVrfStaticRouteRowStatus = _RcIpInterVrfStaticRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 10),
    _RcIpInterVrfStaticRouteRowStatus_Type()
)
rcIpInterVrfStaticRouteRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteRowStatus.setStatus("current")


class _RcIpInterVrfStaticRouteLocalNextHop_Type(TruthValue):
    """Custom type rcIpInterVrfStaticRouteLocalNextHop based on TruthValue"""


_RcIpInterVrfStaticRouteLocalNextHop_Object = MibTableColumn
rcIpInterVrfStaticRouteLocalNextHop = _RcIpInterVrfStaticRouteLocalNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 11),
    _RcIpInterVrfStaticRouteLocalNextHop_Type()
)
rcIpInterVrfStaticRouteLocalNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteLocalNextHop.setStatus("current")
_RcIpInterVrfStaticRouteNextHopVrfId_Type = VrfIdentifier
_RcIpInterVrfStaticRouteNextHopVrfId_Object = MibTableColumn
rcIpInterVrfStaticRouteNextHopVrfId = _RcIpInterVrfStaticRouteNextHopVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 103, 2, 1, 12),
    _RcIpInterVrfStaticRouteNextHopVrfId_Type()
)
rcIpInterVrfStaticRouteNextHopVrfId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpInterVrfStaticRouteNextHopVrfId.setStatus("current")
_RcIpBfd_ObjectIdentity = ObjectIdentity
rcIpBfd = _RcIpBfd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 104)
)


class _RcIpBfdTrapEnabled_Type(TruthValue):
    """Custom type rcIpBfdTrapEnabled based on TruthValue"""


_RcIpBfdTrapEnabled_Object = MibScalar
rcIpBfdTrapEnabled = _RcIpBfdTrapEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 104, 1),
    _RcIpBfdTrapEnabled_Type()
)
rcIpBfdTrapEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBfdTrapEnabled.setStatus("current")


class _RcIpBfdHoldOffTimerInterval_Type(Unsigned32):
    """Custom type rcIpBfdHoldOffTimerInterval based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpBfdHoldOffTimerInterval_Type.__name__ = "Unsigned32"
_RcIpBfdHoldOffTimerInterval_Object = MibScalar
rcIpBfdHoldOffTimerInterval = _RcIpBfdHoldOffTimerInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 104, 2),
    _RcIpBfdHoldOffTimerInterval_Type()
)
rcIpBfdHoldOffTimerInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpBfdHoldOffTimerInterval.setStatus("current")
_RcIpStaticMRoute_ObjectIdentity = ObjectIdentity
rcIpStaticMRoute = _RcIpStaticMRoute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105)
)
_RcIpStaticMRouteMib_ObjectIdentity = ObjectIdentity
rcIpStaticMRouteMib = _RcIpStaticMRouteMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1)
)
_RcIpStaticMRouteNotifications_ObjectIdentity = ObjectIdentity
rcIpStaticMRouteNotifications = _RcIpStaticMRouteNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 0)
)
_RcIpStaticMRouteObjects_ObjectIdentity = ObjectIdentity
rcIpStaticMRouteObjects = _RcIpStaticMRouteObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1)
)
_RcIpStaticMRouteTable_Object = MibTable
rcIpStaticMRouteTable = _RcIpStaticMRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1)
)
if mibBuilder.loadTexts:
    rcIpStaticMRouteTable.setStatus("current")
_RcIpStaticMRouteEntry_Object = MibTableRow
rcIpStaticMRouteEntry = _RcIpStaticMRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1)
)
rcIpStaticMRouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpStaticMRouteIpAddressType"),
    (0, "RAPID-CITY", "rcIpStaticMRouteIpAddress"),
    (0, "RAPID-CITY", "rcIpStaticMRouteMask"),
    (0, "RAPID-CITY", "rcIpStaticMRouteRpfAddressType"),
    (0, "RAPID-CITY", "rcIpStaticMRouteRpfAddress"),
)
if mibBuilder.loadTexts:
    rcIpStaticMRouteEntry.setStatus("current")
_RcIpStaticMRouteIpAddressType_Type = InetAddressType
_RcIpStaticMRouteIpAddressType_Object = MibTableColumn
rcIpStaticMRouteIpAddressType = _RcIpStaticMRouteIpAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1, 1),
    _RcIpStaticMRouteIpAddressType_Type()
)
rcIpStaticMRouteIpAddressType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpStaticMRouteIpAddressType.setStatus("current")
_RcIpStaticMRouteIpAddress_Type = InetAddress
_RcIpStaticMRouteIpAddress_Object = MibTableColumn
rcIpStaticMRouteIpAddress = _RcIpStaticMRouteIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1, 2),
    _RcIpStaticMRouteIpAddress_Type()
)
rcIpStaticMRouteIpAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpStaticMRouteIpAddress.setStatus("current")
_RcIpStaticMRouteMask_Type = InetAddressPrefixLength
_RcIpStaticMRouteMask_Object = MibTableColumn
rcIpStaticMRouteMask = _RcIpStaticMRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1, 3),
    _RcIpStaticMRouteMask_Type()
)
rcIpStaticMRouteMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpStaticMRouteMask.setStatus("current")
_RcIpStaticMRouteRpfAddressType_Type = InetAddressType
_RcIpStaticMRouteRpfAddressType_Object = MibTableColumn
rcIpStaticMRouteRpfAddressType = _RcIpStaticMRouteRpfAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1, 4),
    _RcIpStaticMRouteRpfAddressType_Type()
)
rcIpStaticMRouteRpfAddressType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpStaticMRouteRpfAddressType.setStatus("current")
_RcIpStaticMRouteRpfAddress_Type = InetAddress
_RcIpStaticMRouteRpfAddress_Object = MibTableColumn
rcIpStaticMRouteRpfAddress = _RcIpStaticMRouteRpfAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1, 5),
    _RcIpStaticMRouteRpfAddress_Type()
)
rcIpStaticMRouteRpfAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpStaticMRouteRpfAddress.setStatus("current")


class _RcIpStaticMRoutePreference_Type(Unsigned32):
    """Custom type rcIpStaticMRoutePreference based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpStaticMRoutePreference_Type.__name__ = "Unsigned32"
_RcIpStaticMRoutePreference_Object = MibTableColumn
rcIpStaticMRoutePreference = _RcIpStaticMRoutePreference_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1, 6),
    _RcIpStaticMRoutePreference_Type()
)
rcIpStaticMRoutePreference.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpStaticMRoutePreference.setStatus("current")


class _RcIpStaticMRouteEnable_Type(TruthValue):
    """Custom type rcIpStaticMRouteEnable based on TruthValue"""


_RcIpStaticMRouteEnable_Object = MibTableColumn
rcIpStaticMRouteEnable = _RcIpStaticMRouteEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1, 7),
    _RcIpStaticMRouteEnable_Type()
)
rcIpStaticMRouteEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpStaticMRouteEnable.setStatus("current")
_RcIpStaticMRouteRowStatus_Type = RowStatus
_RcIpStaticMRouteRowStatus_Object = MibTableColumn
rcIpStaticMRouteRowStatus = _RcIpStaticMRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 105, 1, 1, 1, 1, 8),
    _RcIpStaticMRouteRowStatus_Type()
)
rcIpStaticMRouteRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpStaticMRouteRowStatus.setStatus("current")
_RcIpEcmp_ObjectIdentity = ObjectIdentity
rcIpEcmp = _RcIpEcmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106)
)
_RcIpEcmpMib_ObjectIdentity = ObjectIdentity
rcIpEcmpMib = _RcIpEcmpMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1)
)
_RcIpEcmpObjects_ObjectIdentity = ObjectIdentity
rcIpEcmpObjects = _RcIpEcmpObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1, 1)
)
_RcIpEcmpRouteTable_Object = MibTable
rcIpEcmpRouteTable = _RcIpEcmpRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1, 1, 1)
)
if mibBuilder.loadTexts:
    rcIpEcmpRouteTable.setStatus("current")
_RcIpEcmpRouteEntry_Object = MibTableRow
rcIpEcmpRouteEntry = _RcIpEcmpRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1, 1, 1, 1)
)
rcIpEcmpRouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpEcmpRouteSrcIp"),
    (0, "RAPID-CITY", "rcIpEcmpRouteDstIp"),
    (0, "RAPID-CITY", "rcIpEcmpRouteDstMask"),
)
if mibBuilder.loadTexts:
    rcIpEcmpRouteEntry.setStatus("current")
_RcIpEcmpRouteSrcIp_Type = IpAddress
_RcIpEcmpRouteSrcIp_Object = MibTableColumn
rcIpEcmpRouteSrcIp = _RcIpEcmpRouteSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1, 1, 1, 1, 1),
    _RcIpEcmpRouteSrcIp_Type()
)
rcIpEcmpRouteSrcIp.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpEcmpRouteSrcIp.setStatus("current")
_RcIpEcmpRouteDstIp_Type = IpAddress
_RcIpEcmpRouteDstIp_Object = MibTableColumn
rcIpEcmpRouteDstIp = _RcIpEcmpRouteDstIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1, 1, 1, 1, 2),
    _RcIpEcmpRouteDstIp_Type()
)
rcIpEcmpRouteDstIp.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpEcmpRouteDstIp.setStatus("current")
_RcIpEcmpRouteDstMask_Type = IpAddress
_RcIpEcmpRouteDstMask_Object = MibTableColumn
rcIpEcmpRouteDstMask = _RcIpEcmpRouteDstMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1, 1, 1, 1, 3),
    _RcIpEcmpRouteDstMask_Type()
)
rcIpEcmpRouteDstMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpEcmpRouteDstMask.setStatus("current")
_RcIpEcmpRouteNextHopLegacy_Type = IpAddress
_RcIpEcmpRouteNextHopLegacy_Object = MibTableColumn
rcIpEcmpRouteNextHopLegacy = _RcIpEcmpRouteNextHopLegacy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1, 1, 1, 1, 4),
    _RcIpEcmpRouteNextHopLegacy_Type()
)
rcIpEcmpRouteNextHopLegacy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpEcmpRouteNextHopLegacy.setStatus("current")
_RcIpEcmpRouteNextHopRMod_Type = IpAddress
_RcIpEcmpRouteNextHopRMod_Object = MibTableColumn
rcIpEcmpRouteNextHopRMod = _RcIpEcmpRouteNextHopRMod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 106, 1, 1, 1, 1, 5),
    _RcIpEcmpRouteNextHopRMod_Type()
)
rcIpEcmpRouteNextHopRMod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpEcmpRouteNextHopRMod.setStatus("current")
_RcIPClearArpRecordTable_Object = MibTable
rcIPClearArpRecordTable = _RcIPClearArpRecordTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 107)
)
if mibBuilder.loadTexts:
    rcIPClearArpRecordTable.setStatus("current")
_RcIPClearArpRecordEntry_Object = MibTableRow
rcIPClearArpRecordEntry = _RcIPClearArpRecordEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 107, 1)
)
rcIPClearArpRecordEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIPClearArpRecordIpAddr"),
    (0, "RAPID-CITY", "rcIPClearArpRecordVlanId"),
)
if mibBuilder.loadTexts:
    rcIPClearArpRecordEntry.setStatus("current")
_RcIPClearArpRecordIpAddr_Type = IpAddress
_RcIPClearArpRecordIpAddr_Object = MibTableColumn
rcIPClearArpRecordIpAddr = _RcIPClearArpRecordIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 107, 1, 1),
    _RcIPClearArpRecordIpAddr_Type()
)
rcIPClearArpRecordIpAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIPClearArpRecordIpAddr.setStatus("current")


class _RcIPClearArpRecordVlanId_Type(Integer32):
    """Custom type rcIPClearArpRecordVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIPClearArpRecordVlanId_Type.__name__ = "Integer32"
_RcIPClearArpRecordVlanId_Object = MibTableColumn
rcIPClearArpRecordVlanId = _RcIPClearArpRecordVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 107, 1, 2),
    _RcIPClearArpRecordVlanId_Type()
)
rcIPClearArpRecordVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIPClearArpRecordVlanId.setStatus("current")


class _RcIPClearArpRecordLCForceDelete_Type(TruthValue):
    """Custom type rcIPClearArpRecordLCForceDelete based on TruthValue"""


_RcIPClearArpRecordLCForceDelete_Object = MibTableColumn
rcIPClearArpRecordLCForceDelete = _RcIPClearArpRecordLCForceDelete_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 107, 1, 3),
    _RcIPClearArpRecordLCForceDelete_Type()
)
rcIPClearArpRecordLCForceDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIPClearArpRecordLCForceDelete.setStatus("current")
_RcIPClearIPMCRecordTable_Object = MibTable
rcIPClearIPMCRecordTable = _RcIPClearIPMCRecordTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 108)
)
if mibBuilder.loadTexts:
    rcIPClearIPMCRecordTable.setStatus("current")
_RcIPClearIPMCRecordEntry_Object = MibTableRow
rcIPClearIPMCRecordEntry = _RcIPClearIPMCRecordEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 108, 1)
)
rcIPClearIPMCRecordEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIPClearIPMCRecordGroup"),
    (0, "RAPID-CITY", "rcIPClearIPMCRecordVlanId"),
)
if mibBuilder.loadTexts:
    rcIPClearIPMCRecordEntry.setStatus("current")
_RcIPClearIPMCRecordGroup_Type = IpAddress
_RcIPClearIPMCRecordGroup_Object = MibTableColumn
rcIPClearIPMCRecordGroup = _RcIPClearIPMCRecordGroup_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 108, 1, 1),
    _RcIPClearIPMCRecordGroup_Type()
)
rcIPClearIPMCRecordGroup.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIPClearIPMCRecordGroup.setStatus("current")


class _RcIPClearIPMCRecordVlanId_Type(Integer32):
    """Custom type rcIPClearIPMCRecordVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIPClearIPMCRecordVlanId_Type.__name__ = "Integer32"
_RcIPClearIPMCRecordVlanId_Object = MibTableColumn
rcIPClearIPMCRecordVlanId = _RcIPClearIPMCRecordVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 108, 1, 2),
    _RcIPClearIPMCRecordVlanId_Type()
)
rcIPClearIPMCRecordVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIPClearIPMCRecordVlanId.setStatus("current")
_RcIPClearIPMCRecordSource_Type = IpAddress
_RcIPClearIPMCRecordSource_Object = MibTableColumn
rcIPClearIPMCRecordSource = _RcIPClearIPMCRecordSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 108, 1, 3),
    _RcIPClearIPMCRecordSource_Type()
)
rcIPClearIPMCRecordSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIPClearIPMCRecordSource.setStatus("current")


class _RcIPClearIPMCRecordLCForceDelete_Type(TruthValue):
    """Custom type rcIPClearIPMCRecordLCForceDelete based on TruthValue"""


_RcIPClearIPMCRecordLCForceDelete_Object = MibTableColumn
rcIPClearIPMCRecordLCForceDelete = _RcIPClearIPMCRecordLCForceDelete_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 108, 1, 4),
    _RcIPClearIPMCRecordLCForceDelete_Type()
)
rcIPClearIPMCRecordLCForceDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIPClearIPMCRecordLCForceDelete.setStatus("current")
_RcIpMulticastSquareSmlt_ObjectIdentity = ObjectIdentity
rcIpMulticastSquareSmlt = _RcIpMulticastSquareSmlt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 109)
)


class _RcIpMulticastSquareSmltEnable_Type(TruthValue):
    """Custom type rcIpMulticastSquareSmltEnable based on TruthValue"""


_RcIpMulticastSquareSmltEnable_Object = MibScalar
rcIpMulticastSquareSmltEnable = _RcIpMulticastSquareSmltEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 109, 1),
    _RcIpMulticastSquareSmltEnable_Type()
)
rcIpMulticastSquareSmltEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMulticastSquareSmltEnable.setStatus("current")
_RcArp_ObjectIdentity = ObjectIdentity
rcArp = _RcArp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9)
)
_RcArpExtLifeTime_Type = Integer32
_RcArpExtLifeTime_Object = MibScalar
rcArpExtLifeTime = _RcArpExtLifeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 1),
    _RcArpExtLifeTime_Type()
)
rcArpExtLifeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcArpExtLifeTime.setStatus("current")
_RcArpExtTable_Object = MibTable
rcArpExtTable = _RcArpExtTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 2)
)
if mibBuilder.loadTexts:
    rcArpExtTable.setStatus("current")
_RcArpExtEntry_Object = MibTableRow
rcArpExtEntry = _RcArpExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 2, 1)
)
rcArpExtEntry.setIndexNames(
    (0, "RAPID-CITY", "rcArpExtEntIfIndex"),
)
if mibBuilder.loadTexts:
    rcArpExtEntry.setStatus("current")
_RcArpExtEntIfIndex_Type = InterfaceIndex
_RcArpExtEntIfIndex_Object = MibTableColumn
rcArpExtEntIfIndex = _RcArpExtEntIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 2, 1, 1),
    _RcArpExtEntIfIndex_Type()
)
rcArpExtEntIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcArpExtEntIfIndex.setStatus("current")


class _RcArpExtEntDoProxy_Type(Integer32):
    """Custom type rcArpExtEntDoProxy based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcArpExtEntDoProxy_Type.__name__ = "Integer32"
_RcArpExtEntDoProxy_Object = MibTableColumn
rcArpExtEntDoProxy = _RcArpExtEntDoProxy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 2, 1, 2),
    _RcArpExtEntDoProxy_Type()
)
rcArpExtEntDoProxy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcArpExtEntDoProxy.setStatus("current")


class _RcArpExtEntDoResp_Type(Integer32):
    """Custom type rcArpExtEntDoResp based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcArpExtEntDoResp_Type.__name__ = "Integer32"
_RcArpExtEntDoResp_Object = MibTableColumn
rcArpExtEntDoResp = _RcArpExtEntDoResp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 2, 1, 3),
    _RcArpExtEntDoResp_Type()
)
rcArpExtEntDoResp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcArpExtEntDoResp.setStatus("current")


class _RcArpExtEntDoFlood_Type(Integer32):
    """Custom type rcArpExtEntDoFlood based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcArpExtEntDoFlood_Type.__name__ = "Integer32"
_RcArpExtEntDoFlood_Object = MibTableColumn
rcArpExtEntDoFlood = _RcArpExtEntDoFlood_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 2, 1, 4),
    _RcArpExtEntDoFlood_Type()
)
rcArpExtEntDoFlood.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcArpExtEntDoFlood.setStatus("current")
_RcArpExtV2Table_Object = MibTable
rcArpExtV2Table = _RcArpExtV2Table_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 3)
)
if mibBuilder.loadTexts:
    rcArpExtV2Table.setStatus("deprecated")
_RcArpExtV2Entry_Object = MibTableRow
rcArpExtV2Entry = _RcArpExtV2Entry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 3, 1)
)
rcArpExtV2Entry.setIndexNames(
    (0, "RAPID-CITY", "rcArpExtV2EntIfIndex"),
    (0, "RAPID-CITY", "rcArpExtV2EntIpIfAddr"),
)
if mibBuilder.loadTexts:
    rcArpExtV2Entry.setStatus("deprecated")
_RcArpExtV2EntIfIndex_Type = InterfaceIndex
_RcArpExtV2EntIfIndex_Object = MibTableColumn
rcArpExtV2EntIfIndex = _RcArpExtV2EntIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 3, 1, 1),
    _RcArpExtV2EntIfIndex_Type()
)
rcArpExtV2EntIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcArpExtV2EntIfIndex.setStatus("deprecated")
_RcArpExtV2EntIpIfAddr_Type = IpAddress
_RcArpExtV2EntIpIfAddr_Object = MibTableColumn
rcArpExtV2EntIpIfAddr = _RcArpExtV2EntIpIfAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 3, 1, 2),
    _RcArpExtV2EntIpIfAddr_Type()
)
rcArpExtV2EntIpIfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcArpExtV2EntIpIfAddr.setStatus("deprecated")


class _RcArpExtV2EntDoProxy_Type(Integer32):
    """Custom type rcArpExtV2EntDoProxy based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcArpExtV2EntDoProxy_Type.__name__ = "Integer32"
_RcArpExtV2EntDoProxy_Object = MibTableColumn
rcArpExtV2EntDoProxy = _RcArpExtV2EntDoProxy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 3, 1, 3),
    _RcArpExtV2EntDoProxy_Type()
)
rcArpExtV2EntDoProxy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcArpExtV2EntDoProxy.setStatus("deprecated")


class _RcArpExtV2EntDoResp_Type(Integer32):
    """Custom type rcArpExtV2EntDoResp based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcArpExtV2EntDoResp_Type.__name__ = "Integer32"
_RcArpExtV2EntDoResp_Object = MibTableColumn
rcArpExtV2EntDoResp = _RcArpExtV2EntDoResp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 9, 3, 1, 4),
    _RcArpExtV2EntDoResp_Type()
)
rcArpExtV2EntDoResp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcArpExtV2EntDoResp.setStatus("deprecated")
_RcRip_ObjectIdentity = ObjectIdentity
rcRip = _RcRip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10)
)


class _RcRipExtOperation_Type(Integer32):
    """Custom type rcRipExtOperation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcRipExtOperation_Type.__name__ = "Integer32"
_RcRipExtOperation_Object = MibScalar
rcRipExtOperation = _RcRipExtOperation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 1),
    _RcRipExtOperation_Type()
)
rcRipExtOperation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRipExtOperation.setStatus("current")
_RcRipExtUpdateTime_Type = Integer32
_RcRipExtUpdateTime_Object = MibScalar
rcRipExtUpdateTime = _RcRipExtUpdateTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 2),
    _RcRipExtUpdateTime_Type()
)
rcRipExtUpdateTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRipExtUpdateTime.setStatus("current")
_RcRipExtTable_Object = MibTable
rcRipExtTable = _RcRipExtTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 3)
)
if mibBuilder.loadTexts:
    rcRipExtTable.setStatus("current")
_RcRipExtEntry_Object = MibTableRow
rcRipExtEntry = _RcRipExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 3, 1)
)
rcRipExtEntry.setIndexNames(
    (0, "RAPID-CITY", "rcRipExtEntIfIndex"),
)
if mibBuilder.loadTexts:
    rcRipExtEntry.setStatus("current")
_RcRipExtEntIfIndex_Type = InterfaceIndex
_RcRipExtEntIfIndex_Object = MibTableColumn
rcRipExtEntIfIndex = _RcRipExtEntIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 3, 1, 1),
    _RcRipExtEntIfIndex_Type()
)
rcRipExtEntIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRipExtEntIfIndex.setStatus("current")


class _RcRipExtEntTalk_Type(Integer32):
    """Custom type rcRipExtEntTalk based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcRipExtEntTalk_Type.__name__ = "Integer32"
_RcRipExtEntTalk_Object = MibTableColumn
rcRipExtEntTalk = _RcRipExtEntTalk_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 3, 1, 2),
    _RcRipExtEntTalk_Type()
)
rcRipExtEntTalk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRipExtEntTalk.setStatus("current")


class _RcRipExtEntListen_Type(Integer32):
    """Custom type rcRipExtEntListen based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcRipExtEntListen_Type.__name__ = "Integer32"
_RcRipExtEntListen_Object = MibTableColumn
rcRipExtEntListen = _RcRipExtEntListen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 3, 1, 3),
    _RcRipExtEntListen_Type()
)
rcRipExtEntListen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRipExtEntListen.setStatus("current")


class _RcRipExtEntPoison_Type(Integer32):
    """Custom type rcRipExtEntPoison based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcRipExtEntPoison_Type.__name__ = "Integer32"
_RcRipExtEntPoison_Object = MibTableColumn
rcRipExtEntPoison = _RcRipExtEntPoison_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 3, 1, 4),
    _RcRipExtEntPoison_Type()
)
rcRipExtEntPoison.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRipExtEntPoison.setStatus("current")
_RcRipExtV2Table_Object = MibTable
rcRipExtV2Table = _RcRipExtV2Table_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 4)
)
if mibBuilder.loadTexts:
    rcRipExtV2Table.setStatus("deprecated")
_RcRipExtV2Entry_Object = MibTableRow
rcRipExtV2Entry = _RcRipExtV2Entry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 4, 1)
)
rcRipExtV2Entry.setIndexNames(
    (0, "RAPID-CITY", "rcRipExtV2EntIfIndex"),
    (0, "RAPID-CITY", "rcRipExtV2EntIpIfAddr"),
)
if mibBuilder.loadTexts:
    rcRipExtV2Entry.setStatus("deprecated")
_RcRipExtV2EntIfIndex_Type = InterfaceIndex
_RcRipExtV2EntIfIndex_Object = MibTableColumn
rcRipExtV2EntIfIndex = _RcRipExtV2EntIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 4, 1, 1),
    _RcRipExtV2EntIfIndex_Type()
)
rcRipExtV2EntIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRipExtV2EntIfIndex.setStatus("deprecated")
_RcRipExtV2EntIpIfAddr_Type = IpAddress
_RcRipExtV2EntIpIfAddr_Object = MibTableColumn
rcRipExtV2EntIpIfAddr = _RcRipExtV2EntIpIfAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 4, 1, 2),
    _RcRipExtV2EntIpIfAddr_Type()
)
rcRipExtV2EntIpIfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRipExtV2EntIpIfAddr.setStatus("deprecated")


class _RcRipExtV2EntTalk_Type(Integer32):
    """Custom type rcRipExtV2EntTalk based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcRipExtV2EntTalk_Type.__name__ = "Integer32"
_RcRipExtV2EntTalk_Object = MibTableColumn
rcRipExtV2EntTalk = _RcRipExtV2EntTalk_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 4, 1, 3),
    _RcRipExtV2EntTalk_Type()
)
rcRipExtV2EntTalk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRipExtV2EntTalk.setStatus("deprecated")


class _RcRipExtV2EntListen_Type(Integer32):
    """Custom type rcRipExtV2EntListen based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcRipExtV2EntListen_Type.__name__ = "Integer32"
_RcRipExtV2EntListen_Object = MibTableColumn
rcRipExtV2EntListen = _RcRipExtV2EntListen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 4, 1, 4),
    _RcRipExtV2EntListen_Type()
)
rcRipExtV2EntListen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRipExtV2EntListen.setStatus("deprecated")


class _RcRipExtV2EntPoison_Type(Integer32):
    """Custom type rcRipExtV2EntPoison based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcRipExtV2EntPoison_Type.__name__ = "Integer32"
_RcRipExtV2EntPoison_Object = MibTableColumn
rcRipExtV2EntPoison = _RcRipExtV2EntPoison_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 10, 4, 1, 5),
    _RcRipExtV2EntPoison_Type()
)
rcRipExtV2EntPoison.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRipExtV2EntPoison.setStatus("deprecated")
_RcTest_ObjectIdentity = ObjectIdentity
rcTest = _RcTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11)
)
_RcTestExtTable_Object = MibTable
rcTestExtTable = _RcTestExtTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 1)
)
if mibBuilder.loadTexts:
    rcTestExtTable.setStatus("current")
_RcTestEntry_Object = MibTableRow
rcTestEntry = _RcTestEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 1, 1)
)
rcTestEntry.setIndexNames(
    (0, "RAPID-CITY", "rcTestExtIfIndex"),
)
if mibBuilder.loadTexts:
    rcTestEntry.setStatus("current")
_RcTestExtIfIndex_Type = InterfaceIndex
_RcTestExtIfIndex_Object = MibTableColumn
rcTestExtIfIndex = _RcTestExtIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 1, 1, 1),
    _RcTestExtIfIndex_Type()
)
rcTestExtIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTestExtIfIndex.setStatus("current")
_RcTestExtPassCount_Type = Integer32
_RcTestExtPassCount_Object = MibTableColumn
rcTestExtPassCount = _RcTestExtPassCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 1, 1, 2),
    _RcTestExtPassCount_Type()
)
rcTestExtPassCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTestExtPassCount.setStatus("current")
_RcTestExtFailCount_Type = Integer32
_RcTestExtFailCount_Object = MibTableColumn
rcTestExtFailCount = _RcTestExtFailCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 1, 1, 3),
    _RcTestExtFailCount_Type()
)
rcTestExtFailCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTestExtFailCount.setStatus("current")
_RcTestTypes_ObjectIdentity = ObjectIdentity
rcTestTypes = _RcTestTypes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 2)
)
_RcTestTypesFabric_ObjectIdentity = ObjectIdentity
rcTestTypesFabric = _RcTestTypesFabric_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 2, 1)
)
_RcTestTypesArTable_ObjectIdentity = ObjectIdentity
rcTestTypesArTable = _RcTestTypesArTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 2, 2)
)
_RcTestTypesExtLoopBack_ObjectIdentity = ObjectIdentity
rcTestTypesExtLoopBack = _RcTestTypesExtLoopBack_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 2, 3)
)
_RcTestCodes_ObjectIdentity = ObjectIdentity
rcTestCodes = _RcTestCodes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 3)
)
_RcTestCodesNoReceive_ObjectIdentity = ObjectIdentity
rcTestCodesNoReceive = _RcTestCodesNoReceive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 3, 1)
)
_RcTestCodesBadSeq_ObjectIdentity = ObjectIdentity
rcTestCodesBadSeq = _RcTestCodesBadSeq_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 3, 2)
)
_RcTestCodesBadLen_ObjectIdentity = ObjectIdentity
rcTestCodesBadLen = _RcTestCodesBadLen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 3, 3)
)
_RcTestCodesBadData_ObjectIdentity = ObjectIdentity
rcTestCodesBadData = _RcTestCodesBadData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 11, 3, 4)
)
_RcStat_ObjectIdentity = ObjectIdentity
rcStat = _RcStat_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12)
)
_RcStatTable_Object = MibTable
rcStatTable = _RcStatTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1)
)
if mibBuilder.loadTexts:
    rcStatTable.setStatus("current")
_RcStatEntry_Object = MibTableRow
rcStatEntry = _RcStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1)
)
rcStatEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatPortIndex"),
)
if mibBuilder.loadTexts:
    rcStatEntry.setStatus("current")
_RcStatPortIndex_Type = InterfaceIndex
_RcStatPortIndex_Object = MibTableColumn
rcStatPortIndex = _RcStatPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 1),
    _RcStatPortIndex_Type()
)
rcStatPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPortIndex.setStatus("current")
_RcStatFrameTooShorts_Type = Counter32
_RcStatFrameTooShorts_Object = MibTableColumn
rcStatFrameTooShorts = _RcStatFrameTooShorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 2),
    _RcStatFrameTooShorts_Type()
)
rcStatFrameTooShorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatFrameTooShorts.setStatus("current")
_RcStatBridgeInUnicastFrames_Type = Counter32
_RcStatBridgeInUnicastFrames_Object = MibTableColumn
rcStatBridgeInUnicastFrames = _RcStatBridgeInUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 3),
    _RcStatBridgeInUnicastFrames_Type()
)
rcStatBridgeInUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBridgeInUnicastFrames.setStatus("current")
_RcStatBridgeInMulticastFrames_Type = Counter32
_RcStatBridgeInMulticastFrames_Object = MibTableColumn
rcStatBridgeInMulticastFrames = _RcStatBridgeInMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 4),
    _RcStatBridgeInMulticastFrames_Type()
)
rcStatBridgeInMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBridgeInMulticastFrames.setStatus("current")
_RcStatBridgeInBroadcastFrames_Type = Counter32
_RcStatBridgeInBroadcastFrames_Object = MibTableColumn
rcStatBridgeInBroadcastFrames = _RcStatBridgeInBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 5),
    _RcStatBridgeInBroadcastFrames_Type()
)
rcStatBridgeInBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBridgeInBroadcastFrames.setStatus("current")
_RcStatBridgeInDiscards_Type = Counter32
_RcStatBridgeInDiscards_Object = MibTableColumn
rcStatBridgeInDiscards = _RcStatBridgeInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 6),
    _RcStatBridgeInDiscards_Type()
)
rcStatBridgeInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBridgeInDiscards.setStatus("current")
_RcStatBridgeOutUnicastFrames_Type = Counter32
_RcStatBridgeOutUnicastFrames_Object = MibTableColumn
rcStatBridgeOutUnicastFrames = _RcStatBridgeOutUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 7),
    _RcStatBridgeOutUnicastFrames_Type()
)
rcStatBridgeOutUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBridgeOutUnicastFrames.setStatus("current")
_RcStatBridgeOutMulticastFrames_Type = Counter32
_RcStatBridgeOutMulticastFrames_Object = MibTableColumn
rcStatBridgeOutMulticastFrames = _RcStatBridgeOutMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 8),
    _RcStatBridgeOutMulticastFrames_Type()
)
rcStatBridgeOutMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBridgeOutMulticastFrames.setStatus("current")
_RcStatBridgeOutBroadcastFrames_Type = Counter32
_RcStatBridgeOutBroadcastFrames_Object = MibTableColumn
rcStatBridgeOutBroadcastFrames = _RcStatBridgeOutBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 9),
    _RcStatBridgeOutBroadcastFrames_Type()
)
rcStatBridgeOutBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBridgeOutBroadcastFrames.setStatus("current")
_RcStatRouteInUnicastFrames_Type = Counter32
_RcStatRouteInUnicastFrames_Object = MibTableColumn
rcStatRouteInUnicastFrames = _RcStatRouteInUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 10),
    _RcStatRouteInUnicastFrames_Type()
)
rcStatRouteInUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatRouteInUnicastFrames.setStatus("current")
_RcStatRouteInMulticastFrames_Type = Counter32
_RcStatRouteInMulticastFrames_Object = MibTableColumn
rcStatRouteInMulticastFrames = _RcStatRouteInMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 11),
    _RcStatRouteInMulticastFrames_Type()
)
rcStatRouteInMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatRouteInMulticastFrames.setStatus("current")
_RcStatRouteInDiscards_Type = Counter32
_RcStatRouteInDiscards_Object = MibTableColumn
rcStatRouteInDiscards = _RcStatRouteInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 12),
    _RcStatRouteInDiscards_Type()
)
rcStatRouteInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatRouteInDiscards.setStatus("current")
_RcStatRouteOutUnicastFrames_Type = Counter32
_RcStatRouteOutUnicastFrames_Object = MibTableColumn
rcStatRouteOutUnicastFrames = _RcStatRouteOutUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 13),
    _RcStatRouteOutUnicastFrames_Type()
)
rcStatRouteOutUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatRouteOutUnicastFrames.setStatus("current")
_RcStatRouteOutMulticastFrames_Type = Counter32
_RcStatRouteOutMulticastFrames_Object = MibTableColumn
rcStatRouteOutMulticastFrames = _RcStatRouteOutMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 14),
    _RcStatRouteOutMulticastFrames_Type()
)
rcStatRouteOutMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatRouteOutMulticastFrames.setStatus("current")
_RcStatStgForwardTransitions_Type = Counter32
_RcStatStgForwardTransitions_Object = MibTableColumn
rcStatStgForwardTransitions = _RcStatStgForwardTransitions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 15),
    _RcStatStgForwardTransitions_Type()
)
rcStatStgForwardTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatStgForwardTransitions.setStatus("current")
_RcStatStgInConfigBpdus_Type = Counter32
_RcStatStgInConfigBpdus_Object = MibTableColumn
rcStatStgInConfigBpdus = _RcStatStgInConfigBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 16),
    _RcStatStgInConfigBpdus_Type()
)
rcStatStgInConfigBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatStgInConfigBpdus.setStatus("current")
_RcStatStgInTcnBpdus_Type = Counter32
_RcStatStgInTcnBpdus_Object = MibTableColumn
rcStatStgInTcnBpdus = _RcStatStgInTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 17),
    _RcStatStgInTcnBpdus_Type()
)
rcStatStgInTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatStgInTcnBpdus.setStatus("current")
_RcStatStgInBadBpdus_Type = Counter32
_RcStatStgInBadBpdus_Object = MibTableColumn
rcStatStgInBadBpdus = _RcStatStgInBadBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 18),
    _RcStatStgInBadBpdus_Type()
)
rcStatStgInBadBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatStgInBadBpdus.setStatus("current")
_RcStatStgOutConfigBpdus_Type = Counter32
_RcStatStgOutConfigBpdus_Object = MibTableColumn
rcStatStgOutConfigBpdus = _RcStatStgOutConfigBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 19),
    _RcStatStgOutConfigBpdus_Type()
)
rcStatStgOutConfigBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatStgOutConfigBpdus.setStatus("current")
_RcStatStgOutTcnBpdus_Type = Counter32
_RcStatStgOutTcnBpdus_Object = MibTableColumn
rcStatStgOutTcnBpdus = _RcStatStgOutTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 20),
    _RcStatStgOutTcnBpdus_Type()
)
rcStatStgOutTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatStgOutTcnBpdus.setStatus("current")
_RcStatBridgeOutFrames_Type = Counter32
_RcStatBridgeOutFrames_Object = MibTableColumn
rcStatBridgeOutFrames = _RcStatBridgeOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 1, 1, 21),
    _RcStatBridgeOutFrames_Type()
)
rcStatBridgeOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBridgeOutFrames.setStatus("current")
_RcStatGigTable_Object = MibTable
rcStatGigTable = _RcStatGigTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2)
)
if mibBuilder.loadTexts:
    rcStatGigTable.setStatus("current")
_RcStatGigEntry_Object = MibTableRow
rcStatGigEntry = _RcStatGigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2, 1)
)
rcStatGigEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatGigPortIndex"),
)
if mibBuilder.loadTexts:
    rcStatGigEntry.setStatus("current")
_RcStatGigPortIndex_Type = InterfaceIndex
_RcStatGigPortIndex_Object = MibTableColumn
rcStatGigPortIndex = _RcStatGigPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2, 1, 1),
    _RcStatGigPortIndex_Type()
)
rcStatGigPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatGigPortIndex.setStatus("current")
_RcStatGigLinkFailures_Type = Counter32
_RcStatGigLinkFailures_Object = MibTableColumn
rcStatGigLinkFailures = _RcStatGigLinkFailures_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2, 1, 2),
    _RcStatGigLinkFailures_Type()
)
rcStatGigLinkFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatGigLinkFailures.setStatus("current")
_RcStatGigPacketErrors_Type = Counter32
_RcStatGigPacketErrors_Object = MibTableColumn
rcStatGigPacketErrors = _RcStatGigPacketErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2, 1, 3),
    _RcStatGigPacketErrors_Type()
)
rcStatGigPacketErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatGigPacketErrors.setStatus("current")
_RcStatGigCarrierErrors_Type = Counter32
_RcStatGigCarrierErrors_Object = MibTableColumn
rcStatGigCarrierErrors = _RcStatGigCarrierErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2, 1, 4),
    _RcStatGigCarrierErrors_Type()
)
rcStatGigCarrierErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatGigCarrierErrors.setStatus("current")
_RcStatGigLinkInactiveErrors_Type = Counter32
_RcStatGigLinkInactiveErrors_Object = MibTableColumn
rcStatGigLinkInactiveErrors = _RcStatGigLinkInactiveErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2, 1, 5),
    _RcStatGigLinkInactiveErrors_Type()
)
rcStatGigLinkInactiveErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatGigLinkInactiveErrors.setStatus("current")
_RcStatGigInFlowCtrlPkts_Type = Counter32
_RcStatGigInFlowCtrlPkts_Object = MibTableColumn
rcStatGigInFlowCtrlPkts = _RcStatGigInFlowCtrlPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2, 1, 6),
    _RcStatGigInFlowCtrlPkts_Type()
)
rcStatGigInFlowCtrlPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatGigInFlowCtrlPkts.setStatus("current")
_RcStatGigOutFlowCtrlPkts_Type = Counter32
_RcStatGigOutFlowCtrlPkts_Object = MibTableColumn
rcStatGigOutFlowCtrlPkts = _RcStatGigOutFlowCtrlPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 2, 1, 7),
    _RcStatGigOutFlowCtrlPkts_Type()
)
rcStatGigOutFlowCtrlPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatGigOutFlowCtrlPkts.setStatus("current")
_RcStatOspf_ObjectIdentity = ObjectIdentity
rcStatOspf = _RcStatOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3)
)
_RcStatOspfBuffersAllocated_Type = Counter32
_RcStatOspfBuffersAllocated_Object = MibScalar
rcStatOspfBuffersAllocated = _RcStatOspfBuffersAllocated_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 1),
    _RcStatOspfBuffersAllocated_Type()
)
rcStatOspfBuffersAllocated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfBuffersAllocated.setStatus("current")
_RcStatOspfBuffersFreed_Type = Counter32
_RcStatOspfBuffersFreed_Object = MibScalar
rcStatOspfBuffersFreed = _RcStatOspfBuffersFreed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 2),
    _RcStatOspfBuffersFreed_Type()
)
rcStatOspfBuffersFreed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfBuffersFreed.setStatus("current")
_RcStatOspfBufferAllocFailures_Type = Counter32
_RcStatOspfBufferAllocFailures_Object = MibScalar
rcStatOspfBufferAllocFailures = _RcStatOspfBufferAllocFailures_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 3),
    _RcStatOspfBufferAllocFailures_Type()
)
rcStatOspfBufferAllocFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfBufferAllocFailures.setStatus("current")
_RcStatOspfBufferFreeFailures_Type = Counter32
_RcStatOspfBufferFreeFailures_Object = MibScalar
rcStatOspfBufferFreeFailures = _RcStatOspfBufferFreeFailures_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 4),
    _RcStatOspfBufferFreeFailures_Type()
)
rcStatOspfBufferFreeFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfBufferFreeFailures.setStatus("current")
_RcStatOspfTxPackets_Type = Counter32
_RcStatOspfTxPackets_Object = MibScalar
rcStatOspfTxPackets = _RcStatOspfTxPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 5),
    _RcStatOspfTxPackets_Type()
)
rcStatOspfTxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfTxPackets.setStatus("current")
_RcStatOspfRxPackets_Type = Counter32
_RcStatOspfRxPackets_Object = MibScalar
rcStatOspfRxPackets = _RcStatOspfRxPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 6),
    _RcStatOspfRxPackets_Type()
)
rcStatOspfRxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfRxPackets.setStatus("current")
_RcStatOspfTxDropPackets_Type = Counter32
_RcStatOspfTxDropPackets_Object = MibScalar
rcStatOspfTxDropPackets = _RcStatOspfTxDropPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 7),
    _RcStatOspfTxDropPackets_Type()
)
rcStatOspfTxDropPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfTxDropPackets.setStatus("current")
_RcStatOspfRxDropPackets_Type = Counter32
_RcStatOspfRxDropPackets_Object = MibScalar
rcStatOspfRxDropPackets = _RcStatOspfRxDropPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 8),
    _RcStatOspfRxDropPackets_Type()
)
rcStatOspfRxDropPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfRxDropPackets.setStatus("current")
_RcStatOspfRxBadPackets_Type = Counter32
_RcStatOspfRxBadPackets_Object = MibScalar
rcStatOspfRxBadPackets = _RcStatOspfRxBadPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 9),
    _RcStatOspfRxBadPackets_Type()
)
rcStatOspfRxBadPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfRxBadPackets.setStatus("current")
_RcStatOspfSpfRuns_Type = Counter32
_RcStatOspfSpfRuns_Object = MibScalar
rcStatOspfSpfRuns = _RcStatOspfSpfRuns_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 10),
    _RcStatOspfSpfRuns_Type()
)
rcStatOspfSpfRuns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfSpfRuns.setStatus("current")
_RcStatOspfLastSpfRun_Type = TimeTicks
_RcStatOspfLastSpfRun_Object = MibScalar
rcStatOspfLastSpfRun = _RcStatOspfLastSpfRun_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 11),
    _RcStatOspfLastSpfRun_Type()
)
rcStatOspfLastSpfRun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfLastSpfRun.setStatus("current")
_RcStatOspfLsdbTblSize_Type = Counter32
_RcStatOspfLsdbTblSize_Object = MibScalar
rcStatOspfLsdbTblSize = _RcStatOspfLsdbTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 12),
    _RcStatOspfLsdbTblSize_Type()
)
rcStatOspfLsdbTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfLsdbTblSize.setStatus("current")
_RcStatOspfRoutes_Type = Counter32
_RcStatOspfRoutes_Object = MibScalar
rcStatOspfRoutes = _RcStatOspfRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 13),
    _RcStatOspfRoutes_Type()
)
rcStatOspfRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfRoutes.setStatus("current")
_RcStatOspfAdjacencies_Type = Counter32
_RcStatOspfAdjacencies_Object = MibScalar
rcStatOspfAdjacencies = _RcStatOspfAdjacencies_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 14),
    _RcStatOspfAdjacencies_Type()
)
rcStatOspfAdjacencies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfAdjacencies.setStatus("current")
_RcStatOspfAreas_Type = Counter32
_RcStatOspfAreas_Object = MibScalar
rcStatOspfAreas = _RcStatOspfAreas_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 3, 15),
    _RcStatOspfAreas_Type()
)
rcStatOspfAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfAreas.setStatus("current")
_RcStatIgmp_ObjectIdentity = ObjectIdentity
rcStatIgmp = _RcStatIgmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 4)
)
_RcStatIgmpInMsgs_Type = Counter32
_RcStatIgmpInMsgs_Object = MibScalar
rcStatIgmpInMsgs = _RcStatIgmpInMsgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 4, 1),
    _RcStatIgmpInMsgs_Type()
)
rcStatIgmpInMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatIgmpInMsgs.setStatus("current")
_RcStatIgmpInErrors_Type = Counter32
_RcStatIgmpInErrors_Object = MibScalar
rcStatIgmpInErrors = _RcStatIgmpInErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 4, 2),
    _RcStatIgmpInErrors_Type()
)
rcStatIgmpInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatIgmpInErrors.setStatus("current")
_RcStatIgmpInQueries_Type = Counter32
_RcStatIgmpInQueries_Object = MibScalar
rcStatIgmpInQueries = _RcStatIgmpInQueries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 4, 3),
    _RcStatIgmpInQueries_Type()
)
rcStatIgmpInQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatIgmpInQueries.setStatus("current")
_RcStatIgmpInReports_Type = Counter32
_RcStatIgmpInReports_Object = MibScalar
rcStatIgmpInReports = _RcStatIgmpInReports_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 4, 4),
    _RcStatIgmpInReports_Type()
)
rcStatIgmpInReports.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatIgmpInReports.setStatus("current")
_RcStatIgmpInLeaves_Type = Counter32
_RcStatIgmpInLeaves_Object = MibScalar
rcStatIgmpInLeaves = _RcStatIgmpInLeaves_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 4, 5),
    _RcStatIgmpInLeaves_Type()
)
rcStatIgmpInLeaves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatIgmpInLeaves.setStatus("current")
_RcStatIgmpInvalid_Type = Counter32
_RcStatIgmpInvalid_Object = MibScalar
rcStatIgmpInvalid = _RcStatIgmpInvalid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 4, 6),
    _RcStatIgmpInvalid_Type()
)
rcStatIgmpInvalid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatIgmpInvalid.setStatus("current")
_RcStatIgmpOutMsgs_Type = Counter32
_RcStatIgmpOutMsgs_Object = MibScalar
rcStatIgmpOutMsgs = _RcStatIgmpOutMsgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 4, 7),
    _RcStatIgmpOutMsgs_Type()
)
rcStatIgmpOutMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatIgmpOutMsgs.setStatus("current")
_RcStatOspfIfTable_Object = MibTable
rcStatOspfIfTable = _RcStatOspfIfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5)
)
if mibBuilder.loadTexts:
    rcStatOspfIfTable.setStatus("current")
_RcStatOspfIfEntry_Object = MibTableRow
rcStatOspfIfEntry = _RcStatOspfIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1)
)
rcStatOspfIfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatOspfIfIndex"),
)
if mibBuilder.loadTexts:
    rcStatOspfIfEntry.setStatus("current")


class _RcStatOspfIfIndex_Type(InterfaceIndexOrZero):
    """Custom type rcStatOspfIfIndex based on InterfaceIndexOrZero"""
    subtypeSpec = InterfaceIndexOrZero.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6142),
    )


_RcStatOspfIfIndex_Type.__name__ = "InterfaceIndexOrZero"
_RcStatOspfIfIndex_Object = MibTableColumn
rcStatOspfIfIndex = _RcStatOspfIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 1),
    _RcStatOspfIfIndex_Type()
)
rcStatOspfIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfIndex.setStatus("current")
_RcStatOspfIfRxHellos_Type = Counter32
_RcStatOspfIfRxHellos_Object = MibTableColumn
rcStatOspfIfRxHellos = _RcStatOspfIfRxHellos_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 2),
    _RcStatOspfIfRxHellos_Type()
)
rcStatOspfIfRxHellos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfRxHellos.setStatus("current")
_RcStatOspfIfRxDBDescrs_Type = Counter32
_RcStatOspfIfRxDBDescrs_Object = MibTableColumn
rcStatOspfIfRxDBDescrs = _RcStatOspfIfRxDBDescrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 3),
    _RcStatOspfIfRxDBDescrs_Type()
)
rcStatOspfIfRxDBDescrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfRxDBDescrs.setStatus("current")
_RcStatOspfIfRxLSUpdates_Type = Counter32
_RcStatOspfIfRxLSUpdates_Object = MibTableColumn
rcStatOspfIfRxLSUpdates = _RcStatOspfIfRxLSUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 4),
    _RcStatOspfIfRxLSUpdates_Type()
)
rcStatOspfIfRxLSUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfRxLSUpdates.setStatus("current")
_RcStatOspfIfRxLSReqs_Type = Counter32
_RcStatOspfIfRxLSReqs_Object = MibTableColumn
rcStatOspfIfRxLSReqs = _RcStatOspfIfRxLSReqs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 5),
    _RcStatOspfIfRxLSReqs_Type()
)
rcStatOspfIfRxLSReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfRxLSReqs.setStatus("current")
_RcStatOspfIfRxLSAcks_Type = Counter32
_RcStatOspfIfRxLSAcks_Object = MibTableColumn
rcStatOspfIfRxLSAcks = _RcStatOspfIfRxLSAcks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 6),
    _RcStatOspfIfRxLSAcks_Type()
)
rcStatOspfIfRxLSAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfRxLSAcks.setStatus("current")
_RcStatOspfIfTxHellos_Type = Counter32
_RcStatOspfIfTxHellos_Object = MibTableColumn
rcStatOspfIfTxHellos = _RcStatOspfIfTxHellos_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 7),
    _RcStatOspfIfTxHellos_Type()
)
rcStatOspfIfTxHellos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfTxHellos.setStatus("current")
_RcStatOspfIfTxDBDescrs_Type = Counter32
_RcStatOspfIfTxDBDescrs_Object = MibTableColumn
rcStatOspfIfTxDBDescrs = _RcStatOspfIfTxDBDescrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 8),
    _RcStatOspfIfTxDBDescrs_Type()
)
rcStatOspfIfTxDBDescrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfTxDBDescrs.setStatus("current")
_RcStatOspfIfTxLSUpdates_Type = Counter32
_RcStatOspfIfTxLSUpdates_Object = MibTableColumn
rcStatOspfIfTxLSUpdates = _RcStatOspfIfTxLSUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 9),
    _RcStatOspfIfTxLSUpdates_Type()
)
rcStatOspfIfTxLSUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfTxLSUpdates.setStatus("current")
_RcStatOspfIfTxLSReqs_Type = Counter32
_RcStatOspfIfTxLSReqs_Object = MibTableColumn
rcStatOspfIfTxLSReqs = _RcStatOspfIfTxLSReqs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 10),
    _RcStatOspfIfTxLSReqs_Type()
)
rcStatOspfIfTxLSReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfTxLSReqs.setStatus("current")
_RcStatOspfIfTxLSAcks_Type = Counter32
_RcStatOspfIfTxLSAcks_Object = MibTableColumn
rcStatOspfIfTxLSAcks = _RcStatOspfIfTxLSAcks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 11),
    _RcStatOspfIfTxLSAcks_Type()
)
rcStatOspfIfTxLSAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfTxLSAcks.setStatus("current")
_RcStatOspfIfVersionMismatches_Type = Counter32
_RcStatOspfIfVersionMismatches_Object = MibTableColumn
rcStatOspfIfVersionMismatches = _RcStatOspfIfVersionMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 12),
    _RcStatOspfIfVersionMismatches_Type()
)
rcStatOspfIfVersionMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfVersionMismatches.setStatus("current")
_RcStatOspfIfAreaMismatches_Type = Counter32
_RcStatOspfIfAreaMismatches_Object = MibTableColumn
rcStatOspfIfAreaMismatches = _RcStatOspfIfAreaMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 13),
    _RcStatOspfIfAreaMismatches_Type()
)
rcStatOspfIfAreaMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfAreaMismatches.setStatus("current")
_RcStatOspfIfAuthTypeMismatches_Type = Counter32
_RcStatOspfIfAuthTypeMismatches_Object = MibTableColumn
rcStatOspfIfAuthTypeMismatches = _RcStatOspfIfAuthTypeMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 14),
    _RcStatOspfIfAuthTypeMismatches_Type()
)
rcStatOspfIfAuthTypeMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfAuthTypeMismatches.setStatus("current")
_RcStatOspfIfAuthFailures_Type = Counter32
_RcStatOspfIfAuthFailures_Object = MibTableColumn
rcStatOspfIfAuthFailures = _RcStatOspfIfAuthFailures_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 15),
    _RcStatOspfIfAuthFailures_Type()
)
rcStatOspfIfAuthFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfAuthFailures.setStatus("current")
_RcStatOspfIfNetMaskMismatches_Type = Counter32
_RcStatOspfIfNetMaskMismatches_Object = MibTableColumn
rcStatOspfIfNetMaskMismatches = _RcStatOspfIfNetMaskMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 16),
    _RcStatOspfIfNetMaskMismatches_Type()
)
rcStatOspfIfNetMaskMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfNetMaskMismatches.setStatus("current")
_RcStatOspfIfHelloIntervalMismatches_Type = Counter32
_RcStatOspfIfHelloIntervalMismatches_Object = MibTableColumn
rcStatOspfIfHelloIntervalMismatches = _RcStatOspfIfHelloIntervalMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 17),
    _RcStatOspfIfHelloIntervalMismatches_Type()
)
rcStatOspfIfHelloIntervalMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfHelloIntervalMismatches.setStatus("current")
_RcStatOspfIfDeadIntervalMismatches_Type = Counter32
_RcStatOspfIfDeadIntervalMismatches_Object = MibTableColumn
rcStatOspfIfDeadIntervalMismatches = _RcStatOspfIfDeadIntervalMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 18),
    _RcStatOspfIfDeadIntervalMismatches_Type()
)
rcStatOspfIfDeadIntervalMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfDeadIntervalMismatches.setStatus("current")
_RcStatOspfIfOptionMismatches_Type = Counter32
_RcStatOspfIfOptionMismatches_Object = MibTableColumn
rcStatOspfIfOptionMismatches = _RcStatOspfIfOptionMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 5, 1, 19),
    _RcStatOspfIfOptionMismatches_Type()
)
rcStatOspfIfOptionMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfOptionMismatches.setStatus("current")
_RcStatMlt_ObjectIdentity = ObjectIdentity
rcStatMlt = _RcStatMlt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6)
)
_RcStatMltIfExtnTable_Object = MibTable
rcStatMltIfExtnTable = _RcStatMltIfExtnTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1)
)
if mibBuilder.loadTexts:
    rcStatMltIfExtnTable.setStatus("current")
_RcStatMltIfExtnEntry_Object = MibTableRow
rcStatMltIfExtnEntry = _RcStatMltIfExtnEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1)
)
rcStatMltIfExtnEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatMltIfExtnMltId"),
)
if mibBuilder.loadTexts:
    rcStatMltIfExtnEntry.setStatus("current")


class _RcStatMltIfExtnMltId_Type(Integer32):
    """Custom type rcStatMltIfExtnMltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_RcStatMltIfExtnMltId_Type.__name__ = "Integer32"
_RcStatMltIfExtnMltId_Object = MibTableColumn
rcStatMltIfExtnMltId = _RcStatMltIfExtnMltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 1),
    _RcStatMltIfExtnMltId_Type()
)
rcStatMltIfExtnMltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnMltId.setStatus("current")
_RcStatMltIfExtnIfInMulticastPkts_Type = Counter32
_RcStatMltIfExtnIfInMulticastPkts_Object = MibTableColumn
rcStatMltIfExtnIfInMulticastPkts = _RcStatMltIfExtnIfInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 2),
    _RcStatMltIfExtnIfInMulticastPkts_Type()
)
rcStatMltIfExtnIfInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfInMulticastPkts.setStatus("current")
_RcStatMltIfExtnIfInBroadcastPkts_Type = Counter32
_RcStatMltIfExtnIfInBroadcastPkts_Object = MibTableColumn
rcStatMltIfExtnIfInBroadcastPkts = _RcStatMltIfExtnIfInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 3),
    _RcStatMltIfExtnIfInBroadcastPkts_Type()
)
rcStatMltIfExtnIfInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfInBroadcastPkts.setStatus("current")
_RcStatMltIfExtnIfOutMulticastPkts_Type = Counter32
_RcStatMltIfExtnIfOutMulticastPkts_Object = MibTableColumn
rcStatMltIfExtnIfOutMulticastPkts = _RcStatMltIfExtnIfOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 4),
    _RcStatMltIfExtnIfOutMulticastPkts_Type()
)
rcStatMltIfExtnIfOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfOutMulticastPkts.setStatus("current")
_RcStatMltIfExtnIfOutBroadcastPkts_Type = Counter32
_RcStatMltIfExtnIfOutBroadcastPkts_Object = MibTableColumn
rcStatMltIfExtnIfOutBroadcastPkts = _RcStatMltIfExtnIfOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 5),
    _RcStatMltIfExtnIfOutBroadcastPkts_Type()
)
rcStatMltIfExtnIfOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfOutBroadcastPkts.setStatus("current")
_RcStatMltIfExtnIfHCInOctets_Type = Counter64
_RcStatMltIfExtnIfHCInOctets_Object = MibTableColumn
rcStatMltIfExtnIfHCInOctets = _RcStatMltIfExtnIfHCInOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 6),
    _RcStatMltIfExtnIfHCInOctets_Type()
)
rcStatMltIfExtnIfHCInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfHCInOctets.setStatus("current")
_RcStatMltIfExtnIfHCInUcastPkts_Type = Counter64
_RcStatMltIfExtnIfHCInUcastPkts_Object = MibTableColumn
rcStatMltIfExtnIfHCInUcastPkts = _RcStatMltIfExtnIfHCInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 7),
    _RcStatMltIfExtnIfHCInUcastPkts_Type()
)
rcStatMltIfExtnIfHCInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfHCInUcastPkts.setStatus("current")
_RcStatMltIfExtnIfHCInMulticastPkt_Type = Counter64
_RcStatMltIfExtnIfHCInMulticastPkt_Object = MibTableColumn
rcStatMltIfExtnIfHCInMulticastPkt = _RcStatMltIfExtnIfHCInMulticastPkt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 8),
    _RcStatMltIfExtnIfHCInMulticastPkt_Type()
)
rcStatMltIfExtnIfHCInMulticastPkt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfHCInMulticastPkt.setStatus("current")
_RcStatMltIfExtnIfHCInBroadcastPkt_Type = Counter64
_RcStatMltIfExtnIfHCInBroadcastPkt_Object = MibTableColumn
rcStatMltIfExtnIfHCInBroadcastPkt = _RcStatMltIfExtnIfHCInBroadcastPkt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 9),
    _RcStatMltIfExtnIfHCInBroadcastPkt_Type()
)
rcStatMltIfExtnIfHCInBroadcastPkt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfHCInBroadcastPkt.setStatus("current")
_RcStatMltIfExtnIfHCOutOctets_Type = Counter64
_RcStatMltIfExtnIfHCOutOctets_Object = MibTableColumn
rcStatMltIfExtnIfHCOutOctets = _RcStatMltIfExtnIfHCOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 10),
    _RcStatMltIfExtnIfHCOutOctets_Type()
)
rcStatMltIfExtnIfHCOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfHCOutOctets.setStatus("current")
_RcStatMltIfExtnIfHCOutUcastPkts_Type = Counter64
_RcStatMltIfExtnIfHCOutUcastPkts_Object = MibTableColumn
rcStatMltIfExtnIfHCOutUcastPkts = _RcStatMltIfExtnIfHCOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 11),
    _RcStatMltIfExtnIfHCOutUcastPkts_Type()
)
rcStatMltIfExtnIfHCOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfHCOutUcastPkts.setStatus("current")
_RcStatMltIfExtnIfHCOutMulticast_Type = Counter64
_RcStatMltIfExtnIfHCOutMulticast_Object = MibTableColumn
rcStatMltIfExtnIfHCOutMulticast = _RcStatMltIfExtnIfHCOutMulticast_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 12),
    _RcStatMltIfExtnIfHCOutMulticast_Type()
)
rcStatMltIfExtnIfHCOutMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfHCOutMulticast.setStatus("current")
_RcStatMltIfExtnIfHCOutBroadcast_Type = Counter64
_RcStatMltIfExtnIfHCOutBroadcast_Object = MibTableColumn
rcStatMltIfExtnIfHCOutBroadcast = _RcStatMltIfExtnIfHCOutBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 13),
    _RcStatMltIfExtnIfHCOutBroadcast_Type()
)
rcStatMltIfExtnIfHCOutBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIfExtnIfHCOutBroadcast.setStatus("current")
_RcStatMltEtherTable_Object = MibTable
rcStatMltEtherTable = _RcStatMltEtherTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2)
)
if mibBuilder.loadTexts:
    rcStatMltEtherTable.setStatus("current")
_RcStatMltEtherEntry_Object = MibTableRow
rcStatMltEtherEntry = _RcStatMltEtherEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1)
)
rcStatMltEtherEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatMltEtherMltId"),
)
if mibBuilder.loadTexts:
    rcStatMltEtherEntry.setStatus("current")


class _RcStatMltEtherMltId_Type(Integer32):
    """Custom type rcStatMltEtherMltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_RcStatMltEtherMltId_Type.__name__ = "Integer32"
_RcStatMltEtherMltId_Object = MibTableColumn
rcStatMltEtherMltId = _RcStatMltEtherMltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 1),
    _RcStatMltEtherMltId_Type()
)
rcStatMltEtherMltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherMltId.setStatus("current")
_RcStatMltEtherAlignmentErrors_Type = Counter32
_RcStatMltEtherAlignmentErrors_Object = MibTableColumn
rcStatMltEtherAlignmentErrors = _RcStatMltEtherAlignmentErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 2),
    _RcStatMltEtherAlignmentErrors_Type()
)
rcStatMltEtherAlignmentErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherAlignmentErrors.setStatus("current")
_RcStatMltEtherFCSErrors_Type = Counter32
_RcStatMltEtherFCSErrors_Object = MibTableColumn
rcStatMltEtherFCSErrors = _RcStatMltEtherFCSErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 3),
    _RcStatMltEtherFCSErrors_Type()
)
rcStatMltEtherFCSErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherFCSErrors.setStatus("current")
_RcStatMltEtherSingleCollFrames_Type = Counter32
_RcStatMltEtherSingleCollFrames_Object = MibTableColumn
rcStatMltEtherSingleCollFrames = _RcStatMltEtherSingleCollFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 4),
    _RcStatMltEtherSingleCollFrames_Type()
)
rcStatMltEtherSingleCollFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherSingleCollFrames.setStatus("current")
_RcStatMltEtherMultipleCollFrames_Type = Counter32
_RcStatMltEtherMultipleCollFrames_Object = MibTableColumn
rcStatMltEtherMultipleCollFrames = _RcStatMltEtherMultipleCollFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 5),
    _RcStatMltEtherMultipleCollFrames_Type()
)
rcStatMltEtherMultipleCollFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherMultipleCollFrames.setStatus("current")
_RcStatMltEtherSQETestError_Type = Counter32
_RcStatMltEtherSQETestError_Object = MibTableColumn
rcStatMltEtherSQETestError = _RcStatMltEtherSQETestError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 6),
    _RcStatMltEtherSQETestError_Type()
)
rcStatMltEtherSQETestError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherSQETestError.setStatus("current")
_RcStatMltEtherDeferredTransmiss_Type = Counter32
_RcStatMltEtherDeferredTransmiss_Object = MibTableColumn
rcStatMltEtherDeferredTransmiss = _RcStatMltEtherDeferredTransmiss_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 7),
    _RcStatMltEtherDeferredTransmiss_Type()
)
rcStatMltEtherDeferredTransmiss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherDeferredTransmiss.setStatus("current")
_RcStatMltEtherLateCollisions_Type = Counter32
_RcStatMltEtherLateCollisions_Object = MibTableColumn
rcStatMltEtherLateCollisions = _RcStatMltEtherLateCollisions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 8),
    _RcStatMltEtherLateCollisions_Type()
)
rcStatMltEtherLateCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherLateCollisions.setStatus("current")
_RcStatMltEtherExcessiveCollis_Type = Counter32
_RcStatMltEtherExcessiveCollis_Object = MibTableColumn
rcStatMltEtherExcessiveCollis = _RcStatMltEtherExcessiveCollis_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 9),
    _RcStatMltEtherExcessiveCollis_Type()
)
rcStatMltEtherExcessiveCollis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherExcessiveCollis.setStatus("current")
_RcStatMltEtherIMacTransmitError_Type = Counter32
_RcStatMltEtherIMacTransmitError_Object = MibTableColumn
rcStatMltEtherIMacTransmitError = _RcStatMltEtherIMacTransmitError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 10),
    _RcStatMltEtherIMacTransmitError_Type()
)
rcStatMltEtherIMacTransmitError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherIMacTransmitError.setStatus("current")
_RcStatMltEtherCarrierSenseError_Type = Counter32
_RcStatMltEtherCarrierSenseError_Object = MibTableColumn
rcStatMltEtherCarrierSenseError = _RcStatMltEtherCarrierSenseError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 11),
    _RcStatMltEtherCarrierSenseError_Type()
)
rcStatMltEtherCarrierSenseError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherCarrierSenseError.setStatus("current")
_RcStatMltEtherFrameTooLong_Type = Counter32
_RcStatMltEtherFrameTooLong_Object = MibTableColumn
rcStatMltEtherFrameTooLong = _RcStatMltEtherFrameTooLong_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 12),
    _RcStatMltEtherFrameTooLong_Type()
)
rcStatMltEtherFrameTooLong.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherFrameTooLong.setStatus("current")
_RcStatMltEtherIMacReceiveError_Type = Counter32
_RcStatMltEtherIMacReceiveError_Object = MibTableColumn
rcStatMltEtherIMacReceiveError = _RcStatMltEtherIMacReceiveError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 13),
    _RcStatMltEtherIMacReceiveError_Type()
)
rcStatMltEtherIMacReceiveError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltEtherIMacReceiveError.setStatus("current")
_RcStatMltIpTable_Object = MibTable
rcStatMltIpTable = _RcStatMltIpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3)
)
if mibBuilder.loadTexts:
    rcStatMltIpTable.setStatus("deprecated")
_RcStatMltIpEntry_Object = MibTableRow
rcStatMltIpEntry = _RcStatMltIpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1)
)
rcStatMltIpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatMltIpMltId"),
)
if mibBuilder.loadTexts:
    rcStatMltIpEntry.setStatus("deprecated")


class _RcStatMltIpMltId_Type(Integer32):
    """Custom type rcStatMltIpMltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RcStatMltIpMltId_Type.__name__ = "Integer32"
_RcStatMltIpMltId_Object = MibTableColumn
rcStatMltIpMltId = _RcStatMltIpMltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 1),
    _RcStatMltIpMltId_Type()
)
rcStatMltIpMltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpMltId.setStatus("deprecated")
_RcStatMltIpInReceives_Type = Counter32
_RcStatMltIpInReceives_Object = MibTableColumn
rcStatMltIpInReceives = _RcStatMltIpInReceives_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 2),
    _RcStatMltIpInReceives_Type()
)
rcStatMltIpInReceives.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpInReceives.setStatus("deprecated")
_RcStatMltIpInHdrErrors_Type = Counter32
_RcStatMltIpInHdrErrors_Object = MibTableColumn
rcStatMltIpInHdrErrors = _RcStatMltIpInHdrErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 3),
    _RcStatMltIpInHdrErrors_Type()
)
rcStatMltIpInHdrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpInHdrErrors.setStatus("deprecated")
_RcStatMltIpInAddrErrors_Type = Counter32
_RcStatMltIpInAddrErrors_Object = MibTableColumn
rcStatMltIpInAddrErrors = _RcStatMltIpInAddrErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 4),
    _RcStatMltIpInAddrErrors_Type()
)
rcStatMltIpInAddrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpInAddrErrors.setStatus("deprecated")
_RcStatMltIpForwDatagrams_Type = Counter32
_RcStatMltIpForwDatagrams_Object = MibTableColumn
rcStatMltIpForwDatagrams = _RcStatMltIpForwDatagrams_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 5),
    _RcStatMltIpForwDatagrams_Type()
)
rcStatMltIpForwDatagrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpForwDatagrams.setStatus("deprecated")
_RcStatMltIpInUnknownProtos_Type = Counter32
_RcStatMltIpInUnknownProtos_Object = MibTableColumn
rcStatMltIpInUnknownProtos = _RcStatMltIpInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 6),
    _RcStatMltIpInUnknownProtos_Type()
)
rcStatMltIpInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpInUnknownProtos.setStatus("deprecated")
_RcStatMltIpInDiscards_Type = Counter32
_RcStatMltIpInDiscards_Object = MibTableColumn
rcStatMltIpInDiscards = _RcStatMltIpInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 7),
    _RcStatMltIpInDiscards_Type()
)
rcStatMltIpInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpInDiscards.setStatus("deprecated")
_RcStatMltIpInDelivers_Type = Counter32
_RcStatMltIpInDelivers_Object = MibTableColumn
rcStatMltIpInDelivers = _RcStatMltIpInDelivers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 8),
    _RcStatMltIpInDelivers_Type()
)
rcStatMltIpInDelivers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpInDelivers.setStatus("deprecated")
_RcStatMltIpOutRequest_Type = Counter32
_RcStatMltIpOutRequest_Object = MibTableColumn
rcStatMltIpOutRequest = _RcStatMltIpOutRequest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 9),
    _RcStatMltIpOutRequest_Type()
)
rcStatMltIpOutRequest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpOutRequest.setStatus("deprecated")
_RcStatMltIpOutDiscards_Type = Counter32
_RcStatMltIpOutDiscards_Object = MibTableColumn
rcStatMltIpOutDiscards = _RcStatMltIpOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 10),
    _RcStatMltIpOutDiscards_Type()
)
rcStatMltIpOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpOutDiscards.setStatus("deprecated")
_RcStatMltIpOutNoRoutes_Type = Counter32
_RcStatMltIpOutNoRoutes_Object = MibTableColumn
rcStatMltIpOutNoRoutes = _RcStatMltIpOutNoRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 11),
    _RcStatMltIpOutNoRoutes_Type()
)
rcStatMltIpOutNoRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpOutNoRoutes.setStatus("deprecated")
_RcStatMltIpReasmReqds_Type = Counter32
_RcStatMltIpReasmReqds_Object = MibTableColumn
rcStatMltIpReasmReqds = _RcStatMltIpReasmReqds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 12),
    _RcStatMltIpReasmReqds_Type()
)
rcStatMltIpReasmReqds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpReasmReqds.setStatus("deprecated")
_RcStatMltIpReasmOKs_Type = Counter32
_RcStatMltIpReasmOKs_Object = MibTableColumn
rcStatMltIpReasmOKs = _RcStatMltIpReasmOKs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 13),
    _RcStatMltIpReasmOKs_Type()
)
rcStatMltIpReasmOKs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpReasmOKs.setStatus("deprecated")
_RcStatMltIpReasmFails_Type = Counter32
_RcStatMltIpReasmFails_Object = MibTableColumn
rcStatMltIpReasmFails = _RcStatMltIpReasmFails_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 14),
    _RcStatMltIpReasmFails_Type()
)
rcStatMltIpReasmFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpReasmFails.setStatus("deprecated")
_RcStatMltIpFragOKs_Type = Counter32
_RcStatMltIpFragOKs_Object = MibTableColumn
rcStatMltIpFragOKs = _RcStatMltIpFragOKs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 15),
    _RcStatMltIpFragOKs_Type()
)
rcStatMltIpFragOKs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpFragOKs.setStatus("deprecated")
_RcStatMltIpFragFails_Type = Counter32
_RcStatMltIpFragFails_Object = MibTableColumn
rcStatMltIpFragFails = _RcStatMltIpFragFails_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 16),
    _RcStatMltIpFragFails_Type()
)
rcStatMltIpFragFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpFragFails.setStatus("deprecated")
_RcStatMltIpFragCreates_Type = Counter32
_RcStatMltIpFragCreates_Object = MibTableColumn
rcStatMltIpFragCreates = _RcStatMltIpFragCreates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 17),
    _RcStatMltIpFragCreates_Type()
)
rcStatMltIpFragCreates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpFragCreates.setStatus("deprecated")
_RcStatMltIpRoutingDiscards_Type = Counter32
_RcStatMltIpRoutingDiscards_Object = MibTableColumn
rcStatMltIpRoutingDiscards = _RcStatMltIpRoutingDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 18),
    _RcStatMltIpRoutingDiscards_Type()
)
rcStatMltIpRoutingDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMltIpRoutingDiscards.setStatus("deprecated")
_RcStatSmltIstDownCnt_Type = Counter32
_RcStatSmltIstDownCnt_Object = MibScalar
rcStatSmltIstDownCnt = _RcStatSmltIstDownCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 4),
    _RcStatSmltIstDownCnt_Type()
)
rcStatSmltIstDownCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltIstDownCnt.setStatus("current")
_RcStatSmltHelloTxMsgCnt_Type = Counter32
_RcStatSmltHelloTxMsgCnt_Object = MibScalar
rcStatSmltHelloTxMsgCnt = _RcStatSmltHelloTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 5),
    _RcStatSmltHelloTxMsgCnt_Type()
)
rcStatSmltHelloTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltHelloTxMsgCnt.setStatus("current")
_RcStatSmltHelloRxMsgCnt_Type = Counter32
_RcStatSmltHelloRxMsgCnt_Object = MibScalar
rcStatSmltHelloRxMsgCnt = _RcStatSmltHelloRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 6),
    _RcStatSmltHelloRxMsgCnt_Type()
)
rcStatSmltHelloRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltHelloRxMsgCnt.setStatus("current")
_RcStatSmltLearnMacAddrTxMsgCnt_Type = Counter32
_RcStatSmltLearnMacAddrTxMsgCnt_Object = MibScalar
rcStatSmltLearnMacAddrTxMsgCnt = _RcStatSmltLearnMacAddrTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 7),
    _RcStatSmltLearnMacAddrTxMsgCnt_Type()
)
rcStatSmltLearnMacAddrTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltLearnMacAddrTxMsgCnt.setStatus("current")
_RcStatSmltLearnMacAddrRxMsgCnt_Type = Counter32
_RcStatSmltLearnMacAddrRxMsgCnt_Object = MibScalar
rcStatSmltLearnMacAddrRxMsgCnt = _RcStatSmltLearnMacAddrRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 8),
    _RcStatSmltLearnMacAddrRxMsgCnt_Type()
)
rcStatSmltLearnMacAddrRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltLearnMacAddrRxMsgCnt.setStatus("current")
_RcStatSmltMacAddrAgeOutTxMsgCnt_Type = Counter32
_RcStatSmltMacAddrAgeOutTxMsgCnt_Object = MibScalar
rcStatSmltMacAddrAgeOutTxMsgCnt = _RcStatSmltMacAddrAgeOutTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 9),
    _RcStatSmltMacAddrAgeOutTxMsgCnt_Type()
)
rcStatSmltMacAddrAgeOutTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltMacAddrAgeOutTxMsgCnt.setStatus("current")
_RcStatSmltMacAddrAgeOutRxMsgCnt_Type = Counter32
_RcStatSmltMacAddrAgeOutRxMsgCnt_Object = MibScalar
rcStatSmltMacAddrAgeOutRxMsgCnt = _RcStatSmltMacAddrAgeOutRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 10),
    _RcStatSmltMacAddrAgeOutRxMsgCnt_Type()
)
rcStatSmltMacAddrAgeOutRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltMacAddrAgeOutRxMsgCnt.setStatus("current")
_RcStatSmltMacAddrAgeExpTxMsgCnt_Type = Counter32
_RcStatSmltMacAddrAgeExpTxMsgCnt_Object = MibScalar
rcStatSmltMacAddrAgeExpTxMsgCnt = _RcStatSmltMacAddrAgeExpTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 11),
    _RcStatSmltMacAddrAgeExpTxMsgCnt_Type()
)
rcStatSmltMacAddrAgeExpTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltMacAddrAgeExpTxMsgCnt.setStatus("current")
_RcStatSmltMacAddrAgeExpRxMsgCnt_Type = Counter32
_RcStatSmltMacAddrAgeExpRxMsgCnt_Object = MibScalar
rcStatSmltMacAddrAgeExpRxMsgCnt = _RcStatSmltMacAddrAgeExpRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 12),
    _RcStatSmltMacAddrAgeExpRxMsgCnt_Type()
)
rcStatSmltMacAddrAgeExpRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltMacAddrAgeExpRxMsgCnt.setStatus("current")
_RcStatSmltStgInfoTxMsgCnt_Type = Counter32
_RcStatSmltStgInfoTxMsgCnt_Object = MibScalar
rcStatSmltStgInfoTxMsgCnt = _RcStatSmltStgInfoTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 13),
    _RcStatSmltStgInfoTxMsgCnt_Type()
)
rcStatSmltStgInfoTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltStgInfoTxMsgCnt.setStatus("current")
_RcStatSmltStgInfoRxMsgCnt_Type = Counter32
_RcStatSmltStgInfoRxMsgCnt_Object = MibScalar
rcStatSmltStgInfoRxMsgCnt = _RcStatSmltStgInfoRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 14),
    _RcStatSmltStgInfoRxMsgCnt_Type()
)
rcStatSmltStgInfoRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltStgInfoRxMsgCnt.setStatus("current")
_RcStatSmltDelMacAddrTxMsgCnt_Type = Counter32
_RcStatSmltDelMacAddrTxMsgCnt_Object = MibScalar
rcStatSmltDelMacAddrTxMsgCnt = _RcStatSmltDelMacAddrTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 15),
    _RcStatSmltDelMacAddrTxMsgCnt_Type()
)
rcStatSmltDelMacAddrTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltDelMacAddrTxMsgCnt.setStatus("current")
_RcStatSmltDelMacAddrRxMsgCnt_Type = Counter32
_RcStatSmltDelMacAddrRxMsgCnt_Object = MibScalar
rcStatSmltDelMacAddrRxMsgCnt = _RcStatSmltDelMacAddrRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 16),
    _RcStatSmltDelMacAddrRxMsgCnt_Type()
)
rcStatSmltDelMacAddrRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltDelMacAddrRxMsgCnt.setStatus("current")
_RcStatSmltSmltDownTxMsgCnt_Type = Counter32
_RcStatSmltSmltDownTxMsgCnt_Object = MibScalar
rcStatSmltSmltDownTxMsgCnt = _RcStatSmltSmltDownTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 17),
    _RcStatSmltSmltDownTxMsgCnt_Type()
)
rcStatSmltSmltDownTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltSmltDownTxMsgCnt.setStatus("current")
_RcStatSmltSmltDownRxMsgCnt_Type = Counter32
_RcStatSmltSmltDownRxMsgCnt_Object = MibScalar
rcStatSmltSmltDownRxMsgCnt = _RcStatSmltSmltDownRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 18),
    _RcStatSmltSmltDownRxMsgCnt_Type()
)
rcStatSmltSmltDownRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltSmltDownRxMsgCnt.setStatus("current")
_RcStatSmltSmltUpTxMsgCnt_Type = Counter32
_RcStatSmltSmltUpTxMsgCnt_Object = MibScalar
rcStatSmltSmltUpTxMsgCnt = _RcStatSmltSmltUpTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 19),
    _RcStatSmltSmltUpTxMsgCnt_Type()
)
rcStatSmltSmltUpTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltSmltUpTxMsgCnt.setStatus("current")
_RcStatSmltSmltUpRxMsgCnt_Type = Counter32
_RcStatSmltSmltUpRxMsgCnt_Object = MibScalar
rcStatSmltSmltUpRxMsgCnt = _RcStatSmltSmltUpRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 20),
    _RcStatSmltSmltUpRxMsgCnt_Type()
)
rcStatSmltSmltUpRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltSmltUpRxMsgCnt.setStatus("current")
_RcStatSmltSendMacTblTxMsgCnt_Type = Counter32
_RcStatSmltSendMacTblTxMsgCnt_Object = MibScalar
rcStatSmltSendMacTblTxMsgCnt = _RcStatSmltSendMacTblTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 21),
    _RcStatSmltSendMacTblTxMsgCnt_Type()
)
rcStatSmltSendMacTblTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltSendMacTblTxMsgCnt.setStatus("current")
_RcStatSmltSendMacTblRxMsgCnt_Type = Counter32
_RcStatSmltSendMacTblRxMsgCnt_Object = MibScalar
rcStatSmltSendMacTblRxMsgCnt = _RcStatSmltSendMacTblRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 22),
    _RcStatSmltSendMacTblRxMsgCnt_Type()
)
rcStatSmltSendMacTblRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltSendMacTblRxMsgCnt.setStatus("current")
_RcStatSmltIgmpTxMsgCnt_Type = Counter32
_RcStatSmltIgmpTxMsgCnt_Object = MibScalar
rcStatSmltIgmpTxMsgCnt = _RcStatSmltIgmpTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 23),
    _RcStatSmltIgmpTxMsgCnt_Type()
)
rcStatSmltIgmpTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltIgmpTxMsgCnt.setStatus("current")
_RcStatSmltIgmpRxMsgCnt_Type = Counter32
_RcStatSmltIgmpRxMsgCnt_Object = MibScalar
rcStatSmltIgmpRxMsgCnt = _RcStatSmltIgmpRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 24),
    _RcStatSmltIgmpRxMsgCnt_Type()
)
rcStatSmltIgmpRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltIgmpRxMsgCnt.setStatus("current")
_RcStatSmltPortDownTxMsgCnt_Type = Counter32
_RcStatSmltPortDownTxMsgCnt_Object = MibScalar
rcStatSmltPortDownTxMsgCnt = _RcStatSmltPortDownTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 25),
    _RcStatSmltPortDownTxMsgCnt_Type()
)
rcStatSmltPortDownTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltPortDownTxMsgCnt.setStatus("current")
_RcStatSmltPortDownRxMsgCnt_Type = Counter32
_RcStatSmltPortDownRxMsgCnt_Object = MibScalar
rcStatSmltPortDownRxMsgCnt = _RcStatSmltPortDownRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 26),
    _RcStatSmltPortDownRxMsgCnt_Type()
)
rcStatSmltPortDownRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltPortDownRxMsgCnt.setStatus("current")
_RcStatSmltReqMacTblTxMsgCnt_Type = Counter32
_RcStatSmltReqMacTblTxMsgCnt_Object = MibScalar
rcStatSmltReqMacTblTxMsgCnt = _RcStatSmltReqMacTblTxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 27),
    _RcStatSmltReqMacTblTxMsgCnt_Type()
)
rcStatSmltReqMacTblTxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltReqMacTblTxMsgCnt.setStatus("current")
_RcStatSmltReqMacTblRxMsgCnt_Type = Counter32
_RcStatSmltReqMacTblRxMsgCnt_Object = MibScalar
rcStatSmltReqMacTblRxMsgCnt = _RcStatSmltReqMacTblRxMsgCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 28),
    _RcStatSmltReqMacTblRxMsgCnt_Type()
)
rcStatSmltReqMacTblRxMsgCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltReqMacTblRxMsgCnt.setStatus("current")
_RcStatSmltRxUnknownMsgTypeCnt_Type = Counter32
_RcStatSmltRxUnknownMsgTypeCnt_Object = MibScalar
rcStatSmltRxUnknownMsgTypeCnt = _RcStatSmltRxUnknownMsgTypeCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 29),
    _RcStatSmltRxUnknownMsgTypeCnt_Type()
)
rcStatSmltRxUnknownMsgTypeCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatSmltRxUnknownMsgTypeCnt.setStatus("current")
_RcStatOspfIfV2Table_Object = MibTable
rcStatOspfIfV2Table = _RcStatOspfIfV2Table_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7)
)
if mibBuilder.loadTexts:
    rcStatOspfIfV2Table.setStatus("deprecated")
_RcStatOspfIfV2Entry_Object = MibTableRow
rcStatOspfIfV2Entry = _RcStatOspfIfV2Entry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1)
)
rcStatOspfIfV2Entry.setIndexNames(
    (0, "RAPID-CITY", "rcStatOspfIfV2Index"),
    (0, "RAPID-CITY", "rcStatOspfIfV2Addr"),
)
if mibBuilder.loadTexts:
    rcStatOspfIfV2Entry.setStatus("deprecated")


class _RcStatOspfIfV2Index_Type(InterfaceIndexOrZero):
    """Custom type rcStatOspfIfV2Index based on InterfaceIndexOrZero"""
    subtypeSpec = InterfaceIndexOrZero.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6142),
    )


_RcStatOspfIfV2Index_Type.__name__ = "InterfaceIndexOrZero"
_RcStatOspfIfV2Index_Object = MibTableColumn
rcStatOspfIfV2Index = _RcStatOspfIfV2Index_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 1),
    _RcStatOspfIfV2Index_Type()
)
rcStatOspfIfV2Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2Index.setStatus("deprecated")
_RcStatOspfIfV2Addr_Type = IpAddress
_RcStatOspfIfV2Addr_Object = MibTableColumn
rcStatOspfIfV2Addr = _RcStatOspfIfV2Addr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 2),
    _RcStatOspfIfV2Addr_Type()
)
rcStatOspfIfV2Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2Addr.setStatus("deprecated")
_RcStatOspfIfV2RxHellos_Type = Counter32
_RcStatOspfIfV2RxHellos_Object = MibTableColumn
rcStatOspfIfV2RxHellos = _RcStatOspfIfV2RxHellos_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 3),
    _RcStatOspfIfV2RxHellos_Type()
)
rcStatOspfIfV2RxHellos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2RxHellos.setStatus("deprecated")
_RcStatOspfIfV2RxDBDescrs_Type = Counter32
_RcStatOspfIfV2RxDBDescrs_Object = MibTableColumn
rcStatOspfIfV2RxDBDescrs = _RcStatOspfIfV2RxDBDescrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 4),
    _RcStatOspfIfV2RxDBDescrs_Type()
)
rcStatOspfIfV2RxDBDescrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2RxDBDescrs.setStatus("deprecated")
_RcStatOspfIfV2RxLSUpdates_Type = Counter32
_RcStatOspfIfV2RxLSUpdates_Object = MibTableColumn
rcStatOspfIfV2RxLSUpdates = _RcStatOspfIfV2RxLSUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 5),
    _RcStatOspfIfV2RxLSUpdates_Type()
)
rcStatOspfIfV2RxLSUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2RxLSUpdates.setStatus("deprecated")
_RcStatOspfIfV2RxLSReqs_Type = Counter32
_RcStatOspfIfV2RxLSReqs_Object = MibTableColumn
rcStatOspfIfV2RxLSReqs = _RcStatOspfIfV2RxLSReqs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 6),
    _RcStatOspfIfV2RxLSReqs_Type()
)
rcStatOspfIfV2RxLSReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2RxLSReqs.setStatus("deprecated")
_RcStatOspfIfV2RxLSAcks_Type = Counter32
_RcStatOspfIfV2RxLSAcks_Object = MibTableColumn
rcStatOspfIfV2RxLSAcks = _RcStatOspfIfV2RxLSAcks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 7),
    _RcStatOspfIfV2RxLSAcks_Type()
)
rcStatOspfIfV2RxLSAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2RxLSAcks.setStatus("deprecated")
_RcStatOspfIfV2TxHellos_Type = Counter32
_RcStatOspfIfV2TxHellos_Object = MibTableColumn
rcStatOspfIfV2TxHellos = _RcStatOspfIfV2TxHellos_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 8),
    _RcStatOspfIfV2TxHellos_Type()
)
rcStatOspfIfV2TxHellos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2TxHellos.setStatus("deprecated")
_RcStatOspfIfV2TxDBDescrs_Type = Counter32
_RcStatOspfIfV2TxDBDescrs_Object = MibTableColumn
rcStatOspfIfV2TxDBDescrs = _RcStatOspfIfV2TxDBDescrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 9),
    _RcStatOspfIfV2TxDBDescrs_Type()
)
rcStatOspfIfV2TxDBDescrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2TxDBDescrs.setStatus("deprecated")
_RcStatOspfIfV2TxLSUpdates_Type = Counter32
_RcStatOspfIfV2TxLSUpdates_Object = MibTableColumn
rcStatOspfIfV2TxLSUpdates = _RcStatOspfIfV2TxLSUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 10),
    _RcStatOspfIfV2TxLSUpdates_Type()
)
rcStatOspfIfV2TxLSUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2TxLSUpdates.setStatus("deprecated")
_RcStatOspfIfV2TxLSReqs_Type = Counter32
_RcStatOspfIfV2TxLSReqs_Object = MibTableColumn
rcStatOspfIfV2TxLSReqs = _RcStatOspfIfV2TxLSReqs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 11),
    _RcStatOspfIfV2TxLSReqs_Type()
)
rcStatOspfIfV2TxLSReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2TxLSReqs.setStatus("deprecated")
_RcStatOspfIfV2TxLSAcks_Type = Counter32
_RcStatOspfIfV2TxLSAcks_Object = MibTableColumn
rcStatOspfIfV2TxLSAcks = _RcStatOspfIfV2TxLSAcks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 12),
    _RcStatOspfIfV2TxLSAcks_Type()
)
rcStatOspfIfV2TxLSAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2TxLSAcks.setStatus("deprecated")
_RcStatOspfIfV2VersionMismatches_Type = Counter32
_RcStatOspfIfV2VersionMismatches_Object = MibTableColumn
rcStatOspfIfV2VersionMismatches = _RcStatOspfIfV2VersionMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 13),
    _RcStatOspfIfV2VersionMismatches_Type()
)
rcStatOspfIfV2VersionMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2VersionMismatches.setStatus("deprecated")
_RcStatOspfIfV2AreaMismatches_Type = Counter32
_RcStatOspfIfV2AreaMismatches_Object = MibTableColumn
rcStatOspfIfV2AreaMismatches = _RcStatOspfIfV2AreaMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 14),
    _RcStatOspfIfV2AreaMismatches_Type()
)
rcStatOspfIfV2AreaMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2AreaMismatches.setStatus("deprecated")
_RcStatOspfIfV2AuthTypeMismatches_Type = Counter32
_RcStatOspfIfV2AuthTypeMismatches_Object = MibTableColumn
rcStatOspfIfV2AuthTypeMismatches = _RcStatOspfIfV2AuthTypeMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 15),
    _RcStatOspfIfV2AuthTypeMismatches_Type()
)
rcStatOspfIfV2AuthTypeMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2AuthTypeMismatches.setStatus("deprecated")
_RcStatOspfIfV2AuthFailures_Type = Counter32
_RcStatOspfIfV2AuthFailures_Object = MibTableColumn
rcStatOspfIfV2AuthFailures = _RcStatOspfIfV2AuthFailures_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 16),
    _RcStatOspfIfV2AuthFailures_Type()
)
rcStatOspfIfV2AuthFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2AuthFailures.setStatus("deprecated")
_RcStatOspfIfV2NetMaskMismatches_Type = Counter32
_RcStatOspfIfV2NetMaskMismatches_Object = MibTableColumn
rcStatOspfIfV2NetMaskMismatches = _RcStatOspfIfV2NetMaskMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 17),
    _RcStatOspfIfV2NetMaskMismatches_Type()
)
rcStatOspfIfV2NetMaskMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2NetMaskMismatches.setStatus("deprecated")
_RcStatOspfIfV2HelloIntervalMismatches_Type = Counter32
_RcStatOspfIfV2HelloIntervalMismatches_Object = MibTableColumn
rcStatOspfIfV2HelloIntervalMismatches = _RcStatOspfIfV2HelloIntervalMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 18),
    _RcStatOspfIfV2HelloIntervalMismatches_Type()
)
rcStatOspfIfV2HelloIntervalMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2HelloIntervalMismatches.setStatus("deprecated")
_RcStatOspfIfV2DeadIntervalMismatches_Type = Counter32
_RcStatOspfIfV2DeadIntervalMismatches_Object = MibTableColumn
rcStatOspfIfV2DeadIntervalMismatches = _RcStatOspfIfV2DeadIntervalMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 19),
    _RcStatOspfIfV2DeadIntervalMismatches_Type()
)
rcStatOspfIfV2DeadIntervalMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2DeadIntervalMismatches.setStatus("deprecated")
_RcStatOspfIfV2OptionMismatches_Type = Counter32
_RcStatOspfIfV2OptionMismatches_Object = MibTableColumn
rcStatOspfIfV2OptionMismatches = _RcStatOspfIfV2OptionMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 7, 1, 20),
    _RcStatOspfIfV2OptionMismatches_Type()
)
rcStatOspfIfV2OptionMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatOspfIfV2OptionMismatches.setStatus("deprecated")
_RcStatPos_ObjectIdentity = ObjectIdentity
rcStatPos = _RcStatPos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8)
)
_RcStatPosControlTable_Object = MibTable
rcStatPosControlTable = _RcStatPosControlTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1)
)
if mibBuilder.loadTexts:
    rcStatPosControlTable.setStatus("current")
_RcStatPosControlEntry_Object = MibTableRow
rcStatPosControlEntry = _RcStatPosControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1)
)
rcStatPosControlEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatPosControlPortIndex"),
)
if mibBuilder.loadTexts:
    rcStatPosControlEntry.setStatus("current")
_RcStatPosControlPortIndex_Type = InterfaceIndex
_RcStatPosControlPortIndex_Object = MibTableColumn
rcStatPosControlPortIndex = _RcStatPosControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 1),
    _RcStatPosControlPortIndex_Type()
)
rcStatPosControlPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlPortIndex.setStatus("current")
_RcStatPosControlInErrors_Type = Counter32
_RcStatPosControlInErrors_Object = MibTableColumn
rcStatPosControlInErrors = _RcStatPosControlInErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 2),
    _RcStatPosControlInErrors_Type()
)
rcStatPosControlInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlInErrors.setStatus("current")
_RcStatPosControlInUnknownProtos_Type = Counter32
_RcStatPosControlInUnknownProtos_Object = MibTableColumn
rcStatPosControlInUnknownProtos = _RcStatPosControlInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 3),
    _RcStatPosControlInUnknownProtos_Type()
)
rcStatPosControlInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlInUnknownProtos.setStatus("current")
_RcStatPosControlOutErrors_Type = Counter32
_RcStatPosControlOutErrors_Object = MibTableColumn
rcStatPosControlOutErrors = _RcStatPosControlOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 4),
    _RcStatPosControlOutErrors_Type()
)
rcStatPosControlOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlOutErrors.setStatus("current")
_RcStatPosControlHCInOctets_Type = Counter64
_RcStatPosControlHCInOctets_Object = MibTableColumn
rcStatPosControlHCInOctets = _RcStatPosControlHCInOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 5),
    _RcStatPosControlHCInOctets_Type()
)
rcStatPosControlHCInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCInOctets.setStatus("current")
_RcStatPosControlHCInUcastPkts_Type = Counter64
_RcStatPosControlHCInUcastPkts_Object = MibTableColumn
rcStatPosControlHCInUcastPkts = _RcStatPosControlHCInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 6),
    _RcStatPosControlHCInUcastPkts_Type()
)
rcStatPosControlHCInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCInUcastPkts.setStatus("current")
_RcStatPosControlHCInMulticastPkts_Type = Counter64
_RcStatPosControlHCInMulticastPkts_Object = MibTableColumn
rcStatPosControlHCInMulticastPkts = _RcStatPosControlHCInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 7),
    _RcStatPosControlHCInMulticastPkts_Type()
)
rcStatPosControlHCInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCInMulticastPkts.setStatus("current")
_RcStatPosControlHCInBroadcastPkts_Type = Counter64
_RcStatPosControlHCInBroadcastPkts_Object = MibTableColumn
rcStatPosControlHCInBroadcastPkts = _RcStatPosControlHCInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 8),
    _RcStatPosControlHCInBroadcastPkts_Type()
)
rcStatPosControlHCInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCInBroadcastPkts.setStatus("current")
_RcStatPosControlHCInDiscards_Type = Counter64
_RcStatPosControlHCInDiscards_Object = MibTableColumn
rcStatPosControlHCInDiscards = _RcStatPosControlHCInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 9),
    _RcStatPosControlHCInDiscards_Type()
)
rcStatPosControlHCInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCInDiscards.setStatus("current")
_RcStatPosControlHCOutOctets_Type = Counter64
_RcStatPosControlHCOutOctets_Object = MibTableColumn
rcStatPosControlHCOutOctets = _RcStatPosControlHCOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 10),
    _RcStatPosControlHCOutOctets_Type()
)
rcStatPosControlHCOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCOutOctets.setStatus("current")
_RcStatPosControlHCOutUcastPkts_Type = Counter64
_RcStatPosControlHCOutUcastPkts_Object = MibTableColumn
rcStatPosControlHCOutUcastPkts = _RcStatPosControlHCOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 11),
    _RcStatPosControlHCOutUcastPkts_Type()
)
rcStatPosControlHCOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCOutUcastPkts.setStatus("current")
_RcStatPosControlHCOutMulticastPkts_Type = Counter64
_RcStatPosControlHCOutMulticastPkts_Object = MibTableColumn
rcStatPosControlHCOutMulticastPkts = _RcStatPosControlHCOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 12),
    _RcStatPosControlHCOutMulticastPkts_Type()
)
rcStatPosControlHCOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCOutMulticastPkts.setStatus("current")
_RcStatPosControlHCOutBroadcastPkts_Type = Counter64
_RcStatPosControlHCOutBroadcastPkts_Object = MibTableColumn
rcStatPosControlHCOutBroadcastPkts = _RcStatPosControlHCOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 13),
    _RcStatPosControlHCOutBroadcastPkts_Type()
)
rcStatPosControlHCOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCOutBroadcastPkts.setStatus("current")
_RcStatPosControlHCOutDiscards_Type = Counter64
_RcStatPosControlHCOutDiscards_Object = MibTableColumn
rcStatPosControlHCOutDiscards = _RcStatPosControlHCOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 8, 1, 1, 14),
    _RcStatPosControlHCOutDiscards_Type()
)
rcStatPosControlHCOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatPosControlHCOutDiscards.setStatus("current")
_RcStatMulticast_ObjectIdentity = ObjectIdentity
rcStatMulticast = _RcStatMulticast_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 9)
)
_RcStatMulticastSourceGroupThresholdExceeded_Type = Counter32
_RcStatMulticastSourceGroupThresholdExceeded_Object = MibScalar
rcStatMulticastSourceGroupThresholdExceeded = _RcStatMulticastSourceGroupThresholdExceeded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 9, 1),
    _RcStatMulticastSourceGroupThresholdExceeded_Type()
)
rcStatMulticastSourceGroupThresholdExceeded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMulticastSourceGroupThresholdExceeded.setStatus("current")
_RcStatMulticastEgressStreamThresholdExceeded_Type = Counter32
_RcStatMulticastEgressStreamThresholdExceeded_Object = MibScalar
rcStatMulticastEgressStreamThresholdExceeded = _RcStatMulticastEgressStreamThresholdExceeded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 9, 2),
    _RcStatMulticastEgressStreamThresholdExceeded_Type()
)
rcStatMulticastEgressStreamThresholdExceeded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatMulticastEgressStreamThresholdExceeded.setStatus("current")
_RcStatBgp_ObjectIdentity = ObjectIdentity
rcStatBgp = _RcStatBgp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10)
)
_RcStatBgpStarts_Type = Counter32
_RcStatBgpStarts_Object = MibScalar
rcStatBgpStarts = _RcStatBgpStarts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 1),
    _RcStatBgpStarts_Type()
)
rcStatBgpStarts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpStarts.setStatus("current")
_RcStatBgpStops_Type = Counter32
_RcStatBgpStops_Object = MibScalar
rcStatBgpStops = _RcStatBgpStops_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 2),
    _RcStatBgpStops_Type()
)
rcStatBgpStops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpStops.setStatus("current")
_RcStatBgpOpens_Type = Counter32
_RcStatBgpOpens_Object = MibScalar
rcStatBgpOpens = _RcStatBgpOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 3),
    _RcStatBgpOpens_Type()
)
rcStatBgpOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpOpens.setStatus("current")
_RcStatBgpCloses_Type = Counter32
_RcStatBgpCloses_Object = MibScalar
rcStatBgpCloses = _RcStatBgpCloses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 4),
    _RcStatBgpCloses_Type()
)
rcStatBgpCloses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpCloses.setStatus("current")
_RcStatBgpFails_Type = Counter32
_RcStatBgpFails_Object = MibScalar
rcStatBgpFails = _RcStatBgpFails_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 5),
    _RcStatBgpFails_Type()
)
rcStatBgpFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpFails.setStatus("current")
_RcStatBgpFatals_Type = Counter32
_RcStatBgpFatals_Object = MibScalar
rcStatBgpFatals = _RcStatBgpFatals_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 6),
    _RcStatBgpFatals_Type()
)
rcStatBgpFatals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpFatals.setStatus("current")
_RcStatBgpConnExps_Type = Counter32
_RcStatBgpConnExps_Object = MibScalar
rcStatBgpConnExps = _RcStatBgpConnExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 7),
    _RcStatBgpConnExps_Type()
)
rcStatBgpConnExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpConnExps.setStatus("current")
_RcStatBgpHoldExps_Type = Counter32
_RcStatBgpHoldExps_Object = MibScalar
rcStatBgpHoldExps = _RcStatBgpHoldExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 8),
    _RcStatBgpHoldExps_Type()
)
rcStatBgpHoldExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpHoldExps.setStatus("current")
_RcStatBgpKeepExps_Type = Counter32
_RcStatBgpKeepExps_Object = MibScalar
rcStatBgpKeepExps = _RcStatBgpKeepExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 9),
    _RcStatBgpKeepExps_Type()
)
rcStatBgpKeepExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpKeepExps.setStatus("current")
_RcStatBgpRxOpens_Type = Counter32
_RcStatBgpRxOpens_Object = MibScalar
rcStatBgpRxOpens = _RcStatBgpRxOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 10),
    _RcStatBgpRxOpens_Type()
)
rcStatBgpRxOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxOpens.setStatus("current")
_RcStatBgpRxKeeps_Type = Counter32
_RcStatBgpRxKeeps_Object = MibScalar
rcStatBgpRxKeeps = _RcStatBgpRxKeeps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 11),
    _RcStatBgpRxKeeps_Type()
)
rcStatBgpRxKeeps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxKeeps.setStatus("current")
_RcStatBgpRxUpdates_Type = Counter32
_RcStatBgpRxUpdates_Object = MibScalar
rcStatBgpRxUpdates = _RcStatBgpRxUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 12),
    _RcStatBgpRxUpdates_Type()
)
rcStatBgpRxUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdates.setStatus("current")
_RcStatBgpRxNotifys_Type = Counter32
_RcStatBgpRxNotifys_Object = MibScalar
rcStatBgpRxNotifys = _RcStatBgpRxNotifys_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 13),
    _RcStatBgpRxNotifys_Type()
)
rcStatBgpRxNotifys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxNotifys.setStatus("current")
_RcStatBgpTxOpens_Type = Counter32
_RcStatBgpTxOpens_Object = MibScalar
rcStatBgpTxOpens = _RcStatBgpTxOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 14),
    _RcStatBgpTxOpens_Type()
)
rcStatBgpTxOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxOpens.setStatus("current")
_RcStatBgpTxKeeps_Type = Counter32
_RcStatBgpTxKeeps_Object = MibScalar
rcStatBgpTxKeeps = _RcStatBgpTxKeeps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 15),
    _RcStatBgpTxKeeps_Type()
)
rcStatBgpTxKeeps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxKeeps.setStatus("current")
_RcStatBgpTxUpdates_Type = Counter32
_RcStatBgpTxUpdates_Object = MibScalar
rcStatBgpTxUpdates = _RcStatBgpTxUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 16),
    _RcStatBgpTxUpdates_Type()
)
rcStatBgpTxUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdates.setStatus("current")
_RcStatBgpTxNotifys_Type = Counter32
_RcStatBgpTxNotifys_Object = MibScalar
rcStatBgpTxNotifys = _RcStatBgpTxNotifys_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 17),
    _RcStatBgpTxNotifys_Type()
)
rcStatBgpTxNotifys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxNotifys.setStatus("current")
_RcStatBgpBadEvents_Type = Counter32
_RcStatBgpBadEvents_Object = MibScalar
rcStatBgpBadEvents = _RcStatBgpBadEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 18),
    _RcStatBgpBadEvents_Type()
)
rcStatBgpBadEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpBadEvents.setStatus("current")
_RcStatBgpSyncFails_Type = Counter32
_RcStatBgpSyncFails_Object = MibScalar
rcStatBgpSyncFails = _RcStatBgpSyncFails_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 19),
    _RcStatBgpSyncFails_Type()
)
rcStatBgpSyncFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpSyncFails.setStatus("current")
_RcStatBgpTrEvent_Type = Counter32
_RcStatBgpTrEvent_Object = MibScalar
rcStatBgpTrEvent = _RcStatBgpTrEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 20),
    _RcStatBgpTrEvent_Type()
)
rcStatBgpTrEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTrEvent.setStatus("current")
_RcStatBgpRxECodeHeader_Type = Counter32
_RcStatBgpRxECodeHeader_Object = MibScalar
rcStatBgpRxECodeHeader = _RcStatBgpRxECodeHeader_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 21),
    _RcStatBgpRxECodeHeader_Type()
)
rcStatBgpRxECodeHeader.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxECodeHeader.setStatus("current")
_RcStatBgpRxECodeOpen_Type = Counter32
_RcStatBgpRxECodeOpen_Object = MibScalar
rcStatBgpRxECodeOpen = _RcStatBgpRxECodeOpen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 22),
    _RcStatBgpRxECodeOpen_Type()
)
rcStatBgpRxECodeOpen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxECodeOpen.setStatus("current")
_RcStatBgpRxECodeUpdate_Type = Counter32
_RcStatBgpRxECodeUpdate_Object = MibScalar
rcStatBgpRxECodeUpdate = _RcStatBgpRxECodeUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 23),
    _RcStatBgpRxECodeUpdate_Type()
)
rcStatBgpRxECodeUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxECodeUpdate.setStatus("current")
_RcStatBgpRxECodeHoldtimer_Type = Counter32
_RcStatBgpRxECodeHoldtimer_Object = MibScalar
rcStatBgpRxECodeHoldtimer = _RcStatBgpRxECodeHoldtimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 24),
    _RcStatBgpRxECodeHoldtimer_Type()
)
rcStatBgpRxECodeHoldtimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxECodeHoldtimer.setStatus("current")
_RcStatBgpRxECodeFSM_Type = Counter32
_RcStatBgpRxECodeFSM_Object = MibScalar
rcStatBgpRxECodeFSM = _RcStatBgpRxECodeFSM_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 25),
    _RcStatBgpRxECodeFSM_Type()
)
rcStatBgpRxECodeFSM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxECodeFSM.setStatus("current")
_RcStatBgpRxECodeCease_Type = Counter32
_RcStatBgpRxECodeCease_Object = MibScalar
rcStatBgpRxECodeCease = _RcStatBgpRxECodeCease_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 26),
    _RcStatBgpRxECodeCease_Type()
)
rcStatBgpRxECodeCease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxECodeCease.setStatus("current")
_RcStatBgpRxHdrCodeNoSync_Type = Counter32
_RcStatBgpRxHdrCodeNoSync_Object = MibScalar
rcStatBgpRxHdrCodeNoSync = _RcStatBgpRxHdrCodeNoSync_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 27),
    _RcStatBgpRxHdrCodeNoSync_Type()
)
rcStatBgpRxHdrCodeNoSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxHdrCodeNoSync.setStatus("current")
_RcStatBgpRxHdrCodeInvalidMsgLen_Type = Counter32
_RcStatBgpRxHdrCodeInvalidMsgLen_Object = MibScalar
rcStatBgpRxHdrCodeInvalidMsgLen = _RcStatBgpRxHdrCodeInvalidMsgLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 28),
    _RcStatBgpRxHdrCodeInvalidMsgLen_Type()
)
rcStatBgpRxHdrCodeInvalidMsgLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxHdrCodeInvalidMsgLen.setStatus("current")
_RcStatBgpRxHdrCodeInvalidMsgType_Type = Counter32
_RcStatBgpRxHdrCodeInvalidMsgType_Object = MibScalar
rcStatBgpRxHdrCodeInvalidMsgType = _RcStatBgpRxHdrCodeInvalidMsgType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 29),
    _RcStatBgpRxHdrCodeInvalidMsgType_Type()
)
rcStatBgpRxHdrCodeInvalidMsgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxHdrCodeInvalidMsgType.setStatus("current")
_RcStatBgpRxOpCodeBadVer_Type = Counter32
_RcStatBgpRxOpCodeBadVer_Object = MibScalar
rcStatBgpRxOpCodeBadVer = _RcStatBgpRxOpCodeBadVer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 30),
    _RcStatBgpRxOpCodeBadVer_Type()
)
rcStatBgpRxOpCodeBadVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxOpCodeBadVer.setStatus("current")
_RcStatBgpRxOpCodeBadAs_Type = Counter32
_RcStatBgpRxOpCodeBadAs_Object = MibScalar
rcStatBgpRxOpCodeBadAs = _RcStatBgpRxOpCodeBadAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 31),
    _RcStatBgpRxOpCodeBadAs_Type()
)
rcStatBgpRxOpCodeBadAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxOpCodeBadAs.setStatus("current")
_RcStatBgpRxOpCodeBadRtID_Type = Counter32
_RcStatBgpRxOpCodeBadRtID_Object = MibScalar
rcStatBgpRxOpCodeBadRtID = _RcStatBgpRxOpCodeBadRtID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 32),
    _RcStatBgpRxOpCodeBadRtID_Type()
)
rcStatBgpRxOpCodeBadRtID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxOpCodeBadRtID.setStatus("current")
_RcStatBgpRxOpCodeUnsuppOption_Type = Counter32
_RcStatBgpRxOpCodeUnsuppOption_Object = MibScalar
rcStatBgpRxOpCodeUnsuppOption = _RcStatBgpRxOpCodeUnsuppOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 33),
    _RcStatBgpRxOpCodeUnsuppOption_Type()
)
rcStatBgpRxOpCodeUnsuppOption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxOpCodeUnsuppOption.setStatus("current")
_RcStatBgpRxOpCodeAuthFail_Type = Counter32
_RcStatBgpRxOpCodeAuthFail_Object = MibScalar
rcStatBgpRxOpCodeAuthFail = _RcStatBgpRxOpCodeAuthFail_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 34),
    _RcStatBgpRxOpCodeAuthFail_Type()
)
rcStatBgpRxOpCodeAuthFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxOpCodeAuthFail.setStatus("current")
_RcStatBgpRxOpCodeBadHold_Type = Counter32
_RcStatBgpRxOpCodeBadHold_Object = MibScalar
rcStatBgpRxOpCodeBadHold = _RcStatBgpRxOpCodeBadHold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 35),
    _RcStatBgpRxOpCodeBadHold_Type()
)
rcStatBgpRxOpCodeBadHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxOpCodeBadHold.setStatus("current")
_RcStatBgpRxUpdCodeMalformedAttrList_Type = Counter32
_RcStatBgpRxUpdCodeMalformedAttrList_Object = MibScalar
rcStatBgpRxUpdCodeMalformedAttrList = _RcStatBgpRxUpdCodeMalformedAttrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 36),
    _RcStatBgpRxUpdCodeMalformedAttrList_Type()
)
rcStatBgpRxUpdCodeMalformedAttrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeMalformedAttrList.setStatus("current")
_RcStatBgpRxUpdCodeWelknownAttrUnrecog_Type = Counter32
_RcStatBgpRxUpdCodeWelknownAttrUnrecog_Object = MibScalar
rcStatBgpRxUpdCodeWelknownAttrUnrecog = _RcStatBgpRxUpdCodeWelknownAttrUnrecog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 37),
    _RcStatBgpRxUpdCodeWelknownAttrUnrecog_Type()
)
rcStatBgpRxUpdCodeWelknownAttrUnrecog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeWelknownAttrUnrecog.setStatus("current")
_RcStatBgpRxUpdCodeWelknownAttrMiss_Type = Counter32
_RcStatBgpRxUpdCodeWelknownAttrMiss_Object = MibScalar
rcStatBgpRxUpdCodeWelknownAttrMiss = _RcStatBgpRxUpdCodeWelknownAttrMiss_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 38),
    _RcStatBgpRxUpdCodeWelknownAttrMiss_Type()
)
rcStatBgpRxUpdCodeWelknownAttrMiss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeWelknownAttrMiss.setStatus("current")
_RcStatBgpRxUpdCodeAttrFlagError_Type = Counter32
_RcStatBgpRxUpdCodeAttrFlagError_Object = MibScalar
rcStatBgpRxUpdCodeAttrFlagError = _RcStatBgpRxUpdCodeAttrFlagError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 39),
    _RcStatBgpRxUpdCodeAttrFlagError_Type()
)
rcStatBgpRxUpdCodeAttrFlagError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeAttrFlagError.setStatus("current")
_RcStatBgpRxUpdCodeAttrLenError_Type = Counter32
_RcStatBgpRxUpdCodeAttrLenError_Object = MibScalar
rcStatBgpRxUpdCodeAttrLenError = _RcStatBgpRxUpdCodeAttrLenError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 40),
    _RcStatBgpRxUpdCodeAttrLenError_Type()
)
rcStatBgpRxUpdCodeAttrLenError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeAttrLenError.setStatus("current")
_RcStatBgpRxUpdCodeBadORIGINAttr_Type = Counter32
_RcStatBgpRxUpdCodeBadORIGINAttr_Object = MibScalar
rcStatBgpRxUpdCodeBadORIGINAttr = _RcStatBgpRxUpdCodeBadORIGINAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 41),
    _RcStatBgpRxUpdCodeBadORIGINAttr_Type()
)
rcStatBgpRxUpdCodeBadORIGINAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeBadORIGINAttr.setStatus("current")
_RcStatBgpRxUpdCodeASRoutingLoop_Type = Counter32
_RcStatBgpRxUpdCodeASRoutingLoop_Object = MibScalar
rcStatBgpRxUpdCodeASRoutingLoop = _RcStatBgpRxUpdCodeASRoutingLoop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 42),
    _RcStatBgpRxUpdCodeASRoutingLoop_Type()
)
rcStatBgpRxUpdCodeASRoutingLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeASRoutingLoop.setStatus("current")
_RcStatBgpRxUpdCodeBadNHAttr_Type = Counter32
_RcStatBgpRxUpdCodeBadNHAttr_Object = MibScalar
rcStatBgpRxUpdCodeBadNHAttr = _RcStatBgpRxUpdCodeBadNHAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 43),
    _RcStatBgpRxUpdCodeBadNHAttr_Type()
)
rcStatBgpRxUpdCodeBadNHAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeBadNHAttr.setStatus("current")
_RcStatBgpRxUpdCodeOptionalAttrError_Type = Counter32
_RcStatBgpRxUpdCodeOptionalAttrError_Object = MibScalar
rcStatBgpRxUpdCodeOptionalAttrError = _RcStatBgpRxUpdCodeOptionalAttrError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 44),
    _RcStatBgpRxUpdCodeOptionalAttrError_Type()
)
rcStatBgpRxUpdCodeOptionalAttrError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeOptionalAttrError.setStatus("current")
_RcStatBgpRxUpdCodeBadNetworkField_Type = Counter32
_RcStatBgpRxUpdCodeBadNetworkField_Object = MibScalar
rcStatBgpRxUpdCodeBadNetworkField = _RcStatBgpRxUpdCodeBadNetworkField_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 45),
    _RcStatBgpRxUpdCodeBadNetworkField_Type()
)
rcStatBgpRxUpdCodeBadNetworkField.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeBadNetworkField.setStatus("current")
_RcStatBgpRxUpdCodeMalformedASPath_Type = Counter32
_RcStatBgpRxUpdCodeMalformedASPath_Object = MibScalar
rcStatBgpRxUpdCodeMalformedASPath = _RcStatBgpRxUpdCodeMalformedASPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 46),
    _RcStatBgpRxUpdCodeMalformedASPath_Type()
)
rcStatBgpRxUpdCodeMalformedASPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpRxUpdCodeMalformedASPath.setStatus("current")
_RcStatBgpTxECodeHeader_Type = Counter32
_RcStatBgpTxECodeHeader_Object = MibScalar
rcStatBgpTxECodeHeader = _RcStatBgpTxECodeHeader_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 47),
    _RcStatBgpTxECodeHeader_Type()
)
rcStatBgpTxECodeHeader.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxECodeHeader.setStatus("current")
_RcStatBgpTxECodeOpen_Type = Counter32
_RcStatBgpTxECodeOpen_Object = MibScalar
rcStatBgpTxECodeOpen = _RcStatBgpTxECodeOpen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 48),
    _RcStatBgpTxECodeOpen_Type()
)
rcStatBgpTxECodeOpen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxECodeOpen.setStatus("current")
_RcStatBgpTxECodeUpdate_Type = Counter32
_RcStatBgpTxECodeUpdate_Object = MibScalar
rcStatBgpTxECodeUpdate = _RcStatBgpTxECodeUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 49),
    _RcStatBgpTxECodeUpdate_Type()
)
rcStatBgpTxECodeUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxECodeUpdate.setStatus("current")
_RcStatBgpTxECodeHoldtimer_Type = Counter32
_RcStatBgpTxECodeHoldtimer_Object = MibScalar
rcStatBgpTxECodeHoldtimer = _RcStatBgpTxECodeHoldtimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 50),
    _RcStatBgpTxECodeHoldtimer_Type()
)
rcStatBgpTxECodeHoldtimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxECodeHoldtimer.setStatus("current")
_RcStatBgpTxECodeFSM_Type = Counter32
_RcStatBgpTxECodeFSM_Object = MibScalar
rcStatBgpTxECodeFSM = _RcStatBgpTxECodeFSM_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 51),
    _RcStatBgpTxECodeFSM_Type()
)
rcStatBgpTxECodeFSM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxECodeFSM.setStatus("current")
_RcStatBgpTxECodeCease_Type = Counter32
_RcStatBgpTxECodeCease_Object = MibScalar
rcStatBgpTxECodeCease = _RcStatBgpTxECodeCease_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 52),
    _RcStatBgpTxECodeCease_Type()
)
rcStatBgpTxECodeCease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxECodeCease.setStatus("current")
_RcStatBgpTxHdrCodeNoSync_Type = Counter32
_RcStatBgpTxHdrCodeNoSync_Object = MibScalar
rcStatBgpTxHdrCodeNoSync = _RcStatBgpTxHdrCodeNoSync_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 53),
    _RcStatBgpTxHdrCodeNoSync_Type()
)
rcStatBgpTxHdrCodeNoSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxHdrCodeNoSync.setStatus("current")
_RcStatBgpTxHdrCodeInvalidMsgLen_Type = Counter32
_RcStatBgpTxHdrCodeInvalidMsgLen_Object = MibScalar
rcStatBgpTxHdrCodeInvalidMsgLen = _RcStatBgpTxHdrCodeInvalidMsgLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 54),
    _RcStatBgpTxHdrCodeInvalidMsgLen_Type()
)
rcStatBgpTxHdrCodeInvalidMsgLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxHdrCodeInvalidMsgLen.setStatus("current")
_RcStatBgpTxHdrCodeInvalidMsgType_Type = Counter32
_RcStatBgpTxHdrCodeInvalidMsgType_Object = MibScalar
rcStatBgpTxHdrCodeInvalidMsgType = _RcStatBgpTxHdrCodeInvalidMsgType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 55),
    _RcStatBgpTxHdrCodeInvalidMsgType_Type()
)
rcStatBgpTxHdrCodeInvalidMsgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxHdrCodeInvalidMsgType.setStatus("current")
_RcStatBgpTxOpCodeBadVer_Type = Counter32
_RcStatBgpTxOpCodeBadVer_Object = MibScalar
rcStatBgpTxOpCodeBadVer = _RcStatBgpTxOpCodeBadVer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 56),
    _RcStatBgpTxOpCodeBadVer_Type()
)
rcStatBgpTxOpCodeBadVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxOpCodeBadVer.setStatus("current")
_RcStatBgpTxOpCodeBadAs_Type = Counter32
_RcStatBgpTxOpCodeBadAs_Object = MibScalar
rcStatBgpTxOpCodeBadAs = _RcStatBgpTxOpCodeBadAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 57),
    _RcStatBgpTxOpCodeBadAs_Type()
)
rcStatBgpTxOpCodeBadAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxOpCodeBadAs.setStatus("current")
_RcStatBgpTxOpCodeBadRtID_Type = Counter32
_RcStatBgpTxOpCodeBadRtID_Object = MibScalar
rcStatBgpTxOpCodeBadRtID = _RcStatBgpTxOpCodeBadRtID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 58),
    _RcStatBgpTxOpCodeBadRtID_Type()
)
rcStatBgpTxOpCodeBadRtID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxOpCodeBadRtID.setStatus("current")
_RcStatBgpTxOpCodeUnsuppOption_Type = Counter32
_RcStatBgpTxOpCodeUnsuppOption_Object = MibScalar
rcStatBgpTxOpCodeUnsuppOption = _RcStatBgpTxOpCodeUnsuppOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 59),
    _RcStatBgpTxOpCodeUnsuppOption_Type()
)
rcStatBgpTxOpCodeUnsuppOption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxOpCodeUnsuppOption.setStatus("current")
_RcStatBgpTxOpCodeAuthFail_Type = Counter32
_RcStatBgpTxOpCodeAuthFail_Object = MibScalar
rcStatBgpTxOpCodeAuthFail = _RcStatBgpTxOpCodeAuthFail_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 60),
    _RcStatBgpTxOpCodeAuthFail_Type()
)
rcStatBgpTxOpCodeAuthFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxOpCodeAuthFail.setStatus("current")
_RcStatBgpTxOpCodeBadHold_Type = Counter32
_RcStatBgpTxOpCodeBadHold_Object = MibScalar
rcStatBgpTxOpCodeBadHold = _RcStatBgpTxOpCodeBadHold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 61),
    _RcStatBgpTxOpCodeBadHold_Type()
)
rcStatBgpTxOpCodeBadHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxOpCodeBadHold.setStatus("current")
_RcStatBgpTxUpdCodeMalformedAttrList_Type = Counter32
_RcStatBgpTxUpdCodeMalformedAttrList_Object = MibScalar
rcStatBgpTxUpdCodeMalformedAttrList = _RcStatBgpTxUpdCodeMalformedAttrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 62),
    _RcStatBgpTxUpdCodeMalformedAttrList_Type()
)
rcStatBgpTxUpdCodeMalformedAttrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeMalformedAttrList.setStatus("current")
_RcStatBgpTxUpdCodeWelknownAttrUnrecog_Type = Counter32
_RcStatBgpTxUpdCodeWelknownAttrUnrecog_Object = MibScalar
rcStatBgpTxUpdCodeWelknownAttrUnrecog = _RcStatBgpTxUpdCodeWelknownAttrUnrecog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 63),
    _RcStatBgpTxUpdCodeWelknownAttrUnrecog_Type()
)
rcStatBgpTxUpdCodeWelknownAttrUnrecog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeWelknownAttrUnrecog.setStatus("current")
_RcStatBgpTxUpdCodeWelknownAttrMiss_Type = Counter32
_RcStatBgpTxUpdCodeWelknownAttrMiss_Object = MibScalar
rcStatBgpTxUpdCodeWelknownAttrMiss = _RcStatBgpTxUpdCodeWelknownAttrMiss_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 64),
    _RcStatBgpTxUpdCodeWelknownAttrMiss_Type()
)
rcStatBgpTxUpdCodeWelknownAttrMiss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeWelknownAttrMiss.setStatus("current")
_RcStatBgpTxUpdCodeAttrFlagError_Type = Counter32
_RcStatBgpTxUpdCodeAttrFlagError_Object = MibScalar
rcStatBgpTxUpdCodeAttrFlagError = _RcStatBgpTxUpdCodeAttrFlagError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 65),
    _RcStatBgpTxUpdCodeAttrFlagError_Type()
)
rcStatBgpTxUpdCodeAttrFlagError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeAttrFlagError.setStatus("current")
_RcStatBgpTxUpdCodeAttrLenError_Type = Counter32
_RcStatBgpTxUpdCodeAttrLenError_Object = MibScalar
rcStatBgpTxUpdCodeAttrLenError = _RcStatBgpTxUpdCodeAttrLenError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 66),
    _RcStatBgpTxUpdCodeAttrLenError_Type()
)
rcStatBgpTxUpdCodeAttrLenError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeAttrLenError.setStatus("current")
_RcStatBgpTxUpdCodeBadORIGINAttr_Type = Counter32
_RcStatBgpTxUpdCodeBadORIGINAttr_Object = MibScalar
rcStatBgpTxUpdCodeBadORIGINAttr = _RcStatBgpTxUpdCodeBadORIGINAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 67),
    _RcStatBgpTxUpdCodeBadORIGINAttr_Type()
)
rcStatBgpTxUpdCodeBadORIGINAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeBadORIGINAttr.setStatus("current")
_RcStatBgpTxUpdCodeASRoutingLoop_Type = Counter32
_RcStatBgpTxUpdCodeASRoutingLoop_Object = MibScalar
rcStatBgpTxUpdCodeASRoutingLoop = _RcStatBgpTxUpdCodeASRoutingLoop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 68),
    _RcStatBgpTxUpdCodeASRoutingLoop_Type()
)
rcStatBgpTxUpdCodeASRoutingLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeASRoutingLoop.setStatus("current")
_RcStatBgpTxUpdCodeBadNHAttr_Type = Counter32
_RcStatBgpTxUpdCodeBadNHAttr_Object = MibScalar
rcStatBgpTxUpdCodeBadNHAttr = _RcStatBgpTxUpdCodeBadNHAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 69),
    _RcStatBgpTxUpdCodeBadNHAttr_Type()
)
rcStatBgpTxUpdCodeBadNHAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeBadNHAttr.setStatus("current")
_RcStatBgpTxUpdCodeOptionalAttrError_Type = Counter32
_RcStatBgpTxUpdCodeOptionalAttrError_Object = MibScalar
rcStatBgpTxUpdCodeOptionalAttrError = _RcStatBgpTxUpdCodeOptionalAttrError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 70),
    _RcStatBgpTxUpdCodeOptionalAttrError_Type()
)
rcStatBgpTxUpdCodeOptionalAttrError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeOptionalAttrError.setStatus("current")
_RcStatBgpTxUpdCodeBadNetworkField_Type = Counter32
_RcStatBgpTxUpdCodeBadNetworkField_Object = MibScalar
rcStatBgpTxUpdCodeBadNetworkField = _RcStatBgpTxUpdCodeBadNetworkField_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 71),
    _RcStatBgpTxUpdCodeBadNetworkField_Type()
)
rcStatBgpTxUpdCodeBadNetworkField.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeBadNetworkField.setStatus("current")
_RcStatBgpTxUpdCodeMalformedASPath_Type = Counter32
_RcStatBgpTxUpdCodeMalformedASPath_Object = MibScalar
rcStatBgpTxUpdCodeMalformedASPath = _RcStatBgpTxUpdCodeMalformedASPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 72),
    _RcStatBgpTxUpdCodeMalformedASPath_Type()
)
rcStatBgpTxUpdCodeMalformedASPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpTxUpdCodeMalformedASPath.setStatus("current")


class _RcStatBgpReset_Type(EnableValue):
    """Custom type rcStatBgpReset based on EnableValue"""


_RcStatBgpReset_Object = MibScalar
rcStatBgpReset = _RcStatBgpReset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 10, 73),
    _RcStatBgpReset_Type()
)
rcStatBgpReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStatBgpReset.setStatus("current")
_RcStatBgpPeerTable_Object = MibTable
rcStatBgpPeerTable = _RcStatBgpPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11)
)
if mibBuilder.loadTexts:
    rcStatBgpPeerTable.setStatus("current")
_RcStatBgpPeerEntry_Object = MibTableRow
rcStatBgpPeerEntry = _RcStatBgpPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1)
)
rcStatBgpPeerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatBgpPeerAddr"),
)
if mibBuilder.loadTexts:
    rcStatBgpPeerEntry.setStatus("current")
_RcStatBgpPeerAddr_Type = IpAddress
_RcStatBgpPeerAddr_Object = MibTableColumn
rcStatBgpPeerAddr = _RcStatBgpPeerAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 1),
    _RcStatBgpPeerAddr_Type()
)
rcStatBgpPeerAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAddr.setStatus("current")
_RcStatBgpPeerStarts_Type = Counter32
_RcStatBgpPeerStarts_Object = MibTableColumn
rcStatBgpPeerStarts = _RcStatBgpPeerStarts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 2),
    _RcStatBgpPeerStarts_Type()
)
rcStatBgpPeerStarts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerStarts.setStatus("current")
_RcStatBgpPeerStops_Type = Counter32
_RcStatBgpPeerStops_Object = MibTableColumn
rcStatBgpPeerStops = _RcStatBgpPeerStops_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 3),
    _RcStatBgpPeerStops_Type()
)
rcStatBgpPeerStops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerStops.setStatus("current")
_RcStatBgpPeerOpens_Type = Counter32
_RcStatBgpPeerOpens_Object = MibTableColumn
rcStatBgpPeerOpens = _RcStatBgpPeerOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 4),
    _RcStatBgpPeerOpens_Type()
)
rcStatBgpPeerOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerOpens.setStatus("current")
_RcStatBgpPeerCloses_Type = Counter32
_RcStatBgpPeerCloses_Object = MibTableColumn
rcStatBgpPeerCloses = _RcStatBgpPeerCloses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 5),
    _RcStatBgpPeerCloses_Type()
)
rcStatBgpPeerCloses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerCloses.setStatus("current")
_RcStatBgpPeerFails_Type = Counter32
_RcStatBgpPeerFails_Object = MibTableColumn
rcStatBgpPeerFails = _RcStatBgpPeerFails_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 6),
    _RcStatBgpPeerFails_Type()
)
rcStatBgpPeerFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerFails.setStatus("current")
_RcStatBgpPeerFatals_Type = Counter32
_RcStatBgpPeerFatals_Object = MibTableColumn
rcStatBgpPeerFatals = _RcStatBgpPeerFatals_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 7),
    _RcStatBgpPeerFatals_Type()
)
rcStatBgpPeerFatals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerFatals.setStatus("current")
_RcStatBgpPeerConnExps_Type = Counter32
_RcStatBgpPeerConnExps_Object = MibTableColumn
rcStatBgpPeerConnExps = _RcStatBgpPeerConnExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 8),
    _RcStatBgpPeerConnExps_Type()
)
rcStatBgpPeerConnExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerConnExps.setStatus("current")
_RcStatBgpPeerHoldExps_Type = Counter32
_RcStatBgpPeerHoldExps_Object = MibTableColumn
rcStatBgpPeerHoldExps = _RcStatBgpPeerHoldExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 9),
    _RcStatBgpPeerHoldExps_Type()
)
rcStatBgpPeerHoldExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerHoldExps.setStatus("current")
_RcStatBgpPeerKeepExps_Type = Counter32
_RcStatBgpPeerKeepExps_Object = MibTableColumn
rcStatBgpPeerKeepExps = _RcStatBgpPeerKeepExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 10),
    _RcStatBgpPeerKeepExps_Type()
)
rcStatBgpPeerKeepExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerKeepExps.setStatus("current")
_RcStatBgpPeerTxMsgs_Type = Counter32
_RcStatBgpPeerTxMsgs_Object = MibTableColumn
rcStatBgpPeerTxMsgs = _RcStatBgpPeerTxMsgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 11),
    _RcStatBgpPeerTxMsgs_Type()
)
rcStatBgpPeerTxMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxMsgs.setStatus("current")
_RcStatBgpPeerTxOpens_Type = Counter32
_RcStatBgpPeerTxOpens_Object = MibTableColumn
rcStatBgpPeerTxOpens = _RcStatBgpPeerTxOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 12),
    _RcStatBgpPeerTxOpens_Type()
)
rcStatBgpPeerTxOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxOpens.setStatus("current")
_RcStatBgpPeerTxKeeps_Type = Counter32
_RcStatBgpPeerTxKeeps_Object = MibTableColumn
rcStatBgpPeerTxKeeps = _RcStatBgpPeerTxKeeps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 13),
    _RcStatBgpPeerTxKeeps_Type()
)
rcStatBgpPeerTxKeeps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxKeeps.setStatus("current")
_RcStatBgpPeerTxUpdates_Type = Counter32
_RcStatBgpPeerTxUpdates_Object = MibTableColumn
rcStatBgpPeerTxUpdates = _RcStatBgpPeerTxUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 14),
    _RcStatBgpPeerTxUpdates_Type()
)
rcStatBgpPeerTxUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdates.setStatus("current")
_RcStatBgpPeerTxNotifys_Type = Counter32
_RcStatBgpPeerTxNotifys_Object = MibTableColumn
rcStatBgpPeerTxNotifys = _RcStatBgpPeerTxNotifys_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 15),
    _RcStatBgpPeerTxNotifys_Type()
)
rcStatBgpPeerTxNotifys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxNotifys.setStatus("current")
_RcStatBgpPeerRxMsgs_Type = Counter32
_RcStatBgpPeerRxMsgs_Object = MibTableColumn
rcStatBgpPeerRxMsgs = _RcStatBgpPeerRxMsgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 16),
    _RcStatBgpPeerRxMsgs_Type()
)
rcStatBgpPeerRxMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxMsgs.setStatus("current")
_RcStatBgpPeerRxInCompPkts_Type = Counter32
_RcStatBgpPeerRxInCompPkts_Object = MibTableColumn
rcStatBgpPeerRxInCompPkts = _RcStatBgpPeerRxInCompPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 17),
    _RcStatBgpPeerRxInCompPkts_Type()
)
rcStatBgpPeerRxInCompPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxInCompPkts.setStatus("current")
_RcStatBgpPeerRxOpens_Type = Counter32
_RcStatBgpPeerRxOpens_Object = MibTableColumn
rcStatBgpPeerRxOpens = _RcStatBgpPeerRxOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 18),
    _RcStatBgpPeerRxOpens_Type()
)
rcStatBgpPeerRxOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxOpens.setStatus("current")
_RcStatBgpPeerRxKeeps_Type = Counter32
_RcStatBgpPeerRxKeeps_Object = MibTableColumn
rcStatBgpPeerRxKeeps = _RcStatBgpPeerRxKeeps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 19),
    _RcStatBgpPeerRxKeeps_Type()
)
rcStatBgpPeerRxKeeps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxKeeps.setStatus("current")
_RcStatBgpPeerRxUpdates_Type = Counter32
_RcStatBgpPeerRxUpdates_Object = MibTableColumn
rcStatBgpPeerRxUpdates = _RcStatBgpPeerRxUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 20),
    _RcStatBgpPeerRxUpdates_Type()
)
rcStatBgpPeerRxUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdates.setStatus("current")
_RcStatBgpPeerRxNotifys_Type = Counter32
_RcStatBgpPeerRxNotifys_Object = MibTableColumn
rcStatBgpPeerRxNotifys = _RcStatBgpPeerRxNotifys_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 21),
    _RcStatBgpPeerRxNotifys_Type()
)
rcStatBgpPeerRxNotifys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxNotifys.setStatus("current")
_RcStatBgpPeerBadEvents_Type = Counter32
_RcStatBgpPeerBadEvents_Object = MibTableColumn
rcStatBgpPeerBadEvents = _RcStatBgpPeerBadEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 22),
    _RcStatBgpPeerBadEvents_Type()
)
rcStatBgpPeerBadEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerBadEvents.setStatus("current")
_RcStatBgpPeerSyncFails_Type = Counter32
_RcStatBgpPeerSyncFails_Object = MibTableColumn
rcStatBgpPeerSyncFails = _RcStatBgpPeerSyncFails_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 23),
    _RcStatBgpPeerSyncFails_Type()
)
rcStatBgpPeerSyncFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerSyncFails.setStatus("current")
_RcStatBgpPeerRcvdTooShort_Type = Counter32
_RcStatBgpPeerRcvdTooShort_Object = MibTableColumn
rcStatBgpPeerRcvdTooShort = _RcStatBgpPeerRcvdTooShort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 24),
    _RcStatBgpPeerRcvdTooShort_Type()
)
rcStatBgpPeerRcvdTooShort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRcvdTooShort.setStatus("current")
_RcStatBgpPeerNoMarker_Type = Counter32
_RcStatBgpPeerNoMarker_Object = MibTableColumn
rcStatBgpPeerNoMarker = _RcStatBgpPeerNoMarker_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 25),
    _RcStatBgpPeerNoMarker_Type()
)
rcStatBgpPeerNoMarker.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerNoMarker.setStatus("current")
_RcStatBgpPeerDropped_Type = Counter32
_RcStatBgpPeerDropped_Object = MibTableColumn
rcStatBgpPeerDropped = _RcStatBgpPeerDropped_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 26),
    _RcStatBgpPeerDropped_Type()
)
rcStatBgpPeerDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerDropped.setStatus("current")
_RcStatBgpPeerBadMsgTypes_Type = Counter32
_RcStatBgpPeerBadMsgTypes_Object = MibTableColumn
rcStatBgpPeerBadMsgTypes = _RcStatBgpPeerBadMsgTypes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 27),
    _RcStatBgpPeerBadMsgTypes_Type()
)
rcStatBgpPeerBadMsgTypes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerBadMsgTypes.setStatus("current")
_RcStatBgpPeerTrEvent_Type = Counter32
_RcStatBgpPeerTrEvent_Object = MibTableColumn
rcStatBgpPeerTrEvent = _RcStatBgpPeerTrEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 28),
    _RcStatBgpPeerTrEvent_Type()
)
rcStatBgpPeerTrEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTrEvent.setStatus("current")
_RcStatBgpPeerTxRoutes_Type = Counter32
_RcStatBgpPeerTxRoutes_Object = MibTableColumn
rcStatBgpPeerTxRoutes = _RcStatBgpPeerTxRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 29),
    _RcStatBgpPeerTxRoutes_Type()
)
rcStatBgpPeerTxRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxRoutes.setStatus("current")
_RcStatBgpPeerRxRoutesAdded_Type = Counter32
_RcStatBgpPeerRxRoutesAdded_Object = MibTableColumn
rcStatBgpPeerRxRoutesAdded = _RcStatBgpPeerRxRoutesAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 30),
    _RcStatBgpPeerRxRoutesAdded_Type()
)
rcStatBgpPeerRxRoutesAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxRoutesAdded.setStatus("current")
_RcStatBgpPeerRxRoutesReplaced_Type = Counter32
_RcStatBgpPeerRxRoutesReplaced_Object = MibTableColumn
rcStatBgpPeerRxRoutesReplaced = _RcStatBgpPeerRxRoutesReplaced_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 31),
    _RcStatBgpPeerRxRoutesReplaced_Type()
)
rcStatBgpPeerRxRoutesReplaced.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxRoutesReplaced.setStatus("current")
_RcStatBgpPeerRxNlri_Type = Counter32
_RcStatBgpPeerRxNlri_Object = MibTableColumn
rcStatBgpPeerRxNlri = _RcStatBgpPeerRxNlri_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 32),
    _RcStatBgpPeerRxNlri_Type()
)
rcStatBgpPeerRxNlri.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxNlri.setStatus("current")
_RcStatBgpPeerRxValidUpdates_Type = Counter32
_RcStatBgpPeerRxValidUpdates_Object = MibTableColumn
rcStatBgpPeerRxValidUpdates = _RcStatBgpPeerRxValidUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 33),
    _RcStatBgpPeerRxValidUpdates_Type()
)
rcStatBgpPeerRxValidUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxValidUpdates.setStatus("current")
_RcStatBgpPeerRxECodeHeader_Type = Counter32
_RcStatBgpPeerRxECodeHeader_Object = MibTableColumn
rcStatBgpPeerRxECodeHeader = _RcStatBgpPeerRxECodeHeader_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 34),
    _RcStatBgpPeerRxECodeHeader_Type()
)
rcStatBgpPeerRxECodeHeader.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxECodeHeader.setStatus("current")
_RcStatBgpPeerRxECodeOpen_Type = Counter32
_RcStatBgpPeerRxECodeOpen_Object = MibTableColumn
rcStatBgpPeerRxECodeOpen = _RcStatBgpPeerRxECodeOpen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 35),
    _RcStatBgpPeerRxECodeOpen_Type()
)
rcStatBgpPeerRxECodeOpen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxECodeOpen.setStatus("current")
_RcStatBgpPeerRxECodeUpdate_Type = Counter32
_RcStatBgpPeerRxECodeUpdate_Object = MibTableColumn
rcStatBgpPeerRxECodeUpdate = _RcStatBgpPeerRxECodeUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 36),
    _RcStatBgpPeerRxECodeUpdate_Type()
)
rcStatBgpPeerRxECodeUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxECodeUpdate.setStatus("current")
_RcStatBgpPeerRxECodeHoldtimer_Type = Counter32
_RcStatBgpPeerRxECodeHoldtimer_Object = MibTableColumn
rcStatBgpPeerRxECodeHoldtimer = _RcStatBgpPeerRxECodeHoldtimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 37),
    _RcStatBgpPeerRxECodeHoldtimer_Type()
)
rcStatBgpPeerRxECodeHoldtimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxECodeHoldtimer.setStatus("current")
_RcStatBgpPeerRxECodeFSM_Type = Counter32
_RcStatBgpPeerRxECodeFSM_Object = MibTableColumn
rcStatBgpPeerRxECodeFSM = _RcStatBgpPeerRxECodeFSM_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 38),
    _RcStatBgpPeerRxECodeFSM_Type()
)
rcStatBgpPeerRxECodeFSM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxECodeFSM.setStatus("current")
_RcStatBgpPeerRxECodeCease_Type = Counter32
_RcStatBgpPeerRxECodeCease_Object = MibTableColumn
rcStatBgpPeerRxECodeCease = _RcStatBgpPeerRxECodeCease_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 39),
    _RcStatBgpPeerRxECodeCease_Type()
)
rcStatBgpPeerRxECodeCease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxECodeCease.setStatus("current")
_RcStatBgpPeerRxHdrCodeNoSync_Type = Counter32
_RcStatBgpPeerRxHdrCodeNoSync_Object = MibTableColumn
rcStatBgpPeerRxHdrCodeNoSync = _RcStatBgpPeerRxHdrCodeNoSync_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 40),
    _RcStatBgpPeerRxHdrCodeNoSync_Type()
)
rcStatBgpPeerRxHdrCodeNoSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxHdrCodeNoSync.setStatus("current")
_RcStatBgpPeerRxHdrCodeInvalidMsgLen_Type = Counter32
_RcStatBgpPeerRxHdrCodeInvalidMsgLen_Object = MibTableColumn
rcStatBgpPeerRxHdrCodeInvalidMsgLen = _RcStatBgpPeerRxHdrCodeInvalidMsgLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 41),
    _RcStatBgpPeerRxHdrCodeInvalidMsgLen_Type()
)
rcStatBgpPeerRxHdrCodeInvalidMsgLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxHdrCodeInvalidMsgLen.setStatus("current")
_RcStatBgpPeerRxHdrCodeInvalidMsgType_Type = Counter32
_RcStatBgpPeerRxHdrCodeInvalidMsgType_Object = MibTableColumn
rcStatBgpPeerRxHdrCodeInvalidMsgType = _RcStatBgpPeerRxHdrCodeInvalidMsgType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 42),
    _RcStatBgpPeerRxHdrCodeInvalidMsgType_Type()
)
rcStatBgpPeerRxHdrCodeInvalidMsgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxHdrCodeInvalidMsgType.setStatus("current")
_RcStatBgpPeerRxOpCodeBadVer_Type = Counter32
_RcStatBgpPeerRxOpCodeBadVer_Object = MibTableColumn
rcStatBgpPeerRxOpCodeBadVer = _RcStatBgpPeerRxOpCodeBadVer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 43),
    _RcStatBgpPeerRxOpCodeBadVer_Type()
)
rcStatBgpPeerRxOpCodeBadVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxOpCodeBadVer.setStatus("current")
_RcStatBgpPeerRxOpCodeBadAs_Type = Counter32
_RcStatBgpPeerRxOpCodeBadAs_Object = MibTableColumn
rcStatBgpPeerRxOpCodeBadAs = _RcStatBgpPeerRxOpCodeBadAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 44),
    _RcStatBgpPeerRxOpCodeBadAs_Type()
)
rcStatBgpPeerRxOpCodeBadAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxOpCodeBadAs.setStatus("current")
_RcStatBgpPeerRxOpCodeBadRtID_Type = Counter32
_RcStatBgpPeerRxOpCodeBadRtID_Object = MibTableColumn
rcStatBgpPeerRxOpCodeBadRtID = _RcStatBgpPeerRxOpCodeBadRtID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 45),
    _RcStatBgpPeerRxOpCodeBadRtID_Type()
)
rcStatBgpPeerRxOpCodeBadRtID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxOpCodeBadRtID.setStatus("current")
_RcStatBgpPeerRxOpCodeUnsuppOption_Type = Counter32
_RcStatBgpPeerRxOpCodeUnsuppOption_Object = MibTableColumn
rcStatBgpPeerRxOpCodeUnsuppOption = _RcStatBgpPeerRxOpCodeUnsuppOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 46),
    _RcStatBgpPeerRxOpCodeUnsuppOption_Type()
)
rcStatBgpPeerRxOpCodeUnsuppOption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxOpCodeUnsuppOption.setStatus("current")
_RcStatBgpPeerRxOpCodeAuthFail_Type = Counter32
_RcStatBgpPeerRxOpCodeAuthFail_Object = MibTableColumn
rcStatBgpPeerRxOpCodeAuthFail = _RcStatBgpPeerRxOpCodeAuthFail_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 47),
    _RcStatBgpPeerRxOpCodeAuthFail_Type()
)
rcStatBgpPeerRxOpCodeAuthFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxOpCodeAuthFail.setStatus("current")
_RcStatBgpPeerRxOpCodeBadHold_Type = Counter32
_RcStatBgpPeerRxOpCodeBadHold_Object = MibTableColumn
rcStatBgpPeerRxOpCodeBadHold = _RcStatBgpPeerRxOpCodeBadHold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 48),
    _RcStatBgpPeerRxOpCodeBadHold_Type()
)
rcStatBgpPeerRxOpCodeBadHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxOpCodeBadHold.setStatus("current")
_RcStatBgpPeerRxUpdCodeMalformedAttrList_Type = Counter32
_RcStatBgpPeerRxUpdCodeMalformedAttrList_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeMalformedAttrList = _RcStatBgpPeerRxUpdCodeMalformedAttrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 49),
    _RcStatBgpPeerRxUpdCodeMalformedAttrList_Type()
)
rcStatBgpPeerRxUpdCodeMalformedAttrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeMalformedAttrList.setStatus("current")
_RcStatBgpPeerRxUpdCodeWelknownAttrUnrecog_Type = Counter32
_RcStatBgpPeerRxUpdCodeWelknownAttrUnrecog_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeWelknownAttrUnrecog = _RcStatBgpPeerRxUpdCodeWelknownAttrUnrecog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 50),
    _RcStatBgpPeerRxUpdCodeWelknownAttrUnrecog_Type()
)
rcStatBgpPeerRxUpdCodeWelknownAttrUnrecog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeWelknownAttrUnrecog.setStatus("current")
_RcStatBgpPeerRxUpdCodeWelknownAttrMiss_Type = Counter32
_RcStatBgpPeerRxUpdCodeWelknownAttrMiss_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeWelknownAttrMiss = _RcStatBgpPeerRxUpdCodeWelknownAttrMiss_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 51),
    _RcStatBgpPeerRxUpdCodeWelknownAttrMiss_Type()
)
rcStatBgpPeerRxUpdCodeWelknownAttrMiss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeWelknownAttrMiss.setStatus("current")
_RcStatBgpPeerRxUpdCodeAttrFlagError_Type = Counter32
_RcStatBgpPeerRxUpdCodeAttrFlagError_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeAttrFlagError = _RcStatBgpPeerRxUpdCodeAttrFlagError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 52),
    _RcStatBgpPeerRxUpdCodeAttrFlagError_Type()
)
rcStatBgpPeerRxUpdCodeAttrFlagError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeAttrFlagError.setStatus("current")
_RcStatBgpPeerRxUpdCodeAttrLenError_Type = Counter32
_RcStatBgpPeerRxUpdCodeAttrLenError_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeAttrLenError = _RcStatBgpPeerRxUpdCodeAttrLenError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 53),
    _RcStatBgpPeerRxUpdCodeAttrLenError_Type()
)
rcStatBgpPeerRxUpdCodeAttrLenError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeAttrLenError.setStatus("current")
_RcStatBgpPeerRxUpdCodeBadORIGINAttr_Type = Counter32
_RcStatBgpPeerRxUpdCodeBadORIGINAttr_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeBadORIGINAttr = _RcStatBgpPeerRxUpdCodeBadORIGINAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 54),
    _RcStatBgpPeerRxUpdCodeBadORIGINAttr_Type()
)
rcStatBgpPeerRxUpdCodeBadORIGINAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeBadORIGINAttr.setStatus("current")
_RcStatBgpPeerRxUpdCodeASRoutingLoop_Type = Counter32
_RcStatBgpPeerRxUpdCodeASRoutingLoop_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeASRoutingLoop = _RcStatBgpPeerRxUpdCodeASRoutingLoop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 55),
    _RcStatBgpPeerRxUpdCodeASRoutingLoop_Type()
)
rcStatBgpPeerRxUpdCodeASRoutingLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeASRoutingLoop.setStatus("current")
_RcStatBgpPeerRxUpdCodeBadNHAttr_Type = Counter32
_RcStatBgpPeerRxUpdCodeBadNHAttr_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeBadNHAttr = _RcStatBgpPeerRxUpdCodeBadNHAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 56),
    _RcStatBgpPeerRxUpdCodeBadNHAttr_Type()
)
rcStatBgpPeerRxUpdCodeBadNHAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeBadNHAttr.setStatus("current")
_RcStatBgpPeerRxUpdCodeOptionalAttrError_Type = Counter32
_RcStatBgpPeerRxUpdCodeOptionalAttrError_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeOptionalAttrError = _RcStatBgpPeerRxUpdCodeOptionalAttrError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 57),
    _RcStatBgpPeerRxUpdCodeOptionalAttrError_Type()
)
rcStatBgpPeerRxUpdCodeOptionalAttrError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeOptionalAttrError.setStatus("current")
_RcStatBgpPeerRxUpdCodeBadNetworkField_Type = Counter32
_RcStatBgpPeerRxUpdCodeBadNetworkField_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeBadNetworkField = _RcStatBgpPeerRxUpdCodeBadNetworkField_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 58),
    _RcStatBgpPeerRxUpdCodeBadNetworkField_Type()
)
rcStatBgpPeerRxUpdCodeBadNetworkField.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeBadNetworkField.setStatus("current")
_RcStatBgpPeerRxUpdCodeMalformedASPath_Type = Counter32
_RcStatBgpPeerRxUpdCodeMalformedASPath_Object = MibTableColumn
rcStatBgpPeerRxUpdCodeMalformedASPath = _RcStatBgpPeerRxUpdCodeMalformedASPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 59),
    _RcStatBgpPeerRxUpdCodeMalformedASPath_Type()
)
rcStatBgpPeerRxUpdCodeMalformedASPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerRxUpdCodeMalformedASPath.setStatus("current")
_RcStatBgpPeerTxECodeHeader_Type = Counter32
_RcStatBgpPeerTxECodeHeader_Object = MibTableColumn
rcStatBgpPeerTxECodeHeader = _RcStatBgpPeerTxECodeHeader_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 60),
    _RcStatBgpPeerTxECodeHeader_Type()
)
rcStatBgpPeerTxECodeHeader.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxECodeHeader.setStatus("current")
_RcStatBgpPeerTxECodeOpen_Type = Counter32
_RcStatBgpPeerTxECodeOpen_Object = MibTableColumn
rcStatBgpPeerTxECodeOpen = _RcStatBgpPeerTxECodeOpen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 61),
    _RcStatBgpPeerTxECodeOpen_Type()
)
rcStatBgpPeerTxECodeOpen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxECodeOpen.setStatus("current")
_RcStatBgpPeerTxECodeUpdate_Type = Counter32
_RcStatBgpPeerTxECodeUpdate_Object = MibTableColumn
rcStatBgpPeerTxECodeUpdate = _RcStatBgpPeerTxECodeUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 62),
    _RcStatBgpPeerTxECodeUpdate_Type()
)
rcStatBgpPeerTxECodeUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxECodeUpdate.setStatus("current")
_RcStatBgpPeerTxECodeHoldtimer_Type = Counter32
_RcStatBgpPeerTxECodeHoldtimer_Object = MibTableColumn
rcStatBgpPeerTxECodeHoldtimer = _RcStatBgpPeerTxECodeHoldtimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 63),
    _RcStatBgpPeerTxECodeHoldtimer_Type()
)
rcStatBgpPeerTxECodeHoldtimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxECodeHoldtimer.setStatus("current")
_RcStatBgpPeerTxECodeFSM_Type = Counter32
_RcStatBgpPeerTxECodeFSM_Object = MibTableColumn
rcStatBgpPeerTxECodeFSM = _RcStatBgpPeerTxECodeFSM_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 64),
    _RcStatBgpPeerTxECodeFSM_Type()
)
rcStatBgpPeerTxECodeFSM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxECodeFSM.setStatus("current")
_RcStatBgpPeerTxECodeCease_Type = Counter32
_RcStatBgpPeerTxECodeCease_Object = MibTableColumn
rcStatBgpPeerTxECodeCease = _RcStatBgpPeerTxECodeCease_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 65),
    _RcStatBgpPeerTxECodeCease_Type()
)
rcStatBgpPeerTxECodeCease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxECodeCease.setStatus("current")
_RcStatBgpPeerTxHdrCodeNoSync_Type = Counter32
_RcStatBgpPeerTxHdrCodeNoSync_Object = MibTableColumn
rcStatBgpPeerTxHdrCodeNoSync = _RcStatBgpPeerTxHdrCodeNoSync_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 66),
    _RcStatBgpPeerTxHdrCodeNoSync_Type()
)
rcStatBgpPeerTxHdrCodeNoSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxHdrCodeNoSync.setStatus("current")
_RcStatBgpPeerTxHdrCodeInvalidMsgLen_Type = Counter32
_RcStatBgpPeerTxHdrCodeInvalidMsgLen_Object = MibTableColumn
rcStatBgpPeerTxHdrCodeInvalidMsgLen = _RcStatBgpPeerTxHdrCodeInvalidMsgLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 67),
    _RcStatBgpPeerTxHdrCodeInvalidMsgLen_Type()
)
rcStatBgpPeerTxHdrCodeInvalidMsgLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxHdrCodeInvalidMsgLen.setStatus("current")
_RcStatBgpPeerTxHdrCodeInvalidMsgType_Type = Counter32
_RcStatBgpPeerTxHdrCodeInvalidMsgType_Object = MibTableColumn
rcStatBgpPeerTxHdrCodeInvalidMsgType = _RcStatBgpPeerTxHdrCodeInvalidMsgType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 68),
    _RcStatBgpPeerTxHdrCodeInvalidMsgType_Type()
)
rcStatBgpPeerTxHdrCodeInvalidMsgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxHdrCodeInvalidMsgType.setStatus("current")
_RcStatBgpPeerTxOpCodeBadVer_Type = Counter32
_RcStatBgpPeerTxOpCodeBadVer_Object = MibTableColumn
rcStatBgpPeerTxOpCodeBadVer = _RcStatBgpPeerTxOpCodeBadVer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 69),
    _RcStatBgpPeerTxOpCodeBadVer_Type()
)
rcStatBgpPeerTxOpCodeBadVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxOpCodeBadVer.setStatus("current")
_RcStatBgpPeerTxOpCodeBadAs_Type = Counter32
_RcStatBgpPeerTxOpCodeBadAs_Object = MibTableColumn
rcStatBgpPeerTxOpCodeBadAs = _RcStatBgpPeerTxOpCodeBadAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 70),
    _RcStatBgpPeerTxOpCodeBadAs_Type()
)
rcStatBgpPeerTxOpCodeBadAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxOpCodeBadAs.setStatus("current")
_RcStatBgpPeerTxOpCodeBadRtID_Type = Counter32
_RcStatBgpPeerTxOpCodeBadRtID_Object = MibTableColumn
rcStatBgpPeerTxOpCodeBadRtID = _RcStatBgpPeerTxOpCodeBadRtID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 71),
    _RcStatBgpPeerTxOpCodeBadRtID_Type()
)
rcStatBgpPeerTxOpCodeBadRtID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxOpCodeBadRtID.setStatus("current")
_RcStatBgpPeerTxOpCodeUnsuppOption_Type = Counter32
_RcStatBgpPeerTxOpCodeUnsuppOption_Object = MibTableColumn
rcStatBgpPeerTxOpCodeUnsuppOption = _RcStatBgpPeerTxOpCodeUnsuppOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 72),
    _RcStatBgpPeerTxOpCodeUnsuppOption_Type()
)
rcStatBgpPeerTxOpCodeUnsuppOption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxOpCodeUnsuppOption.setStatus("current")
_RcStatBgpPeerTxOpCodeAuthFail_Type = Counter32
_RcStatBgpPeerTxOpCodeAuthFail_Object = MibTableColumn
rcStatBgpPeerTxOpCodeAuthFail = _RcStatBgpPeerTxOpCodeAuthFail_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 73),
    _RcStatBgpPeerTxOpCodeAuthFail_Type()
)
rcStatBgpPeerTxOpCodeAuthFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxOpCodeAuthFail.setStatus("current")
_RcStatBgpPeerTxOpCodeBadHold_Type = Counter32
_RcStatBgpPeerTxOpCodeBadHold_Object = MibTableColumn
rcStatBgpPeerTxOpCodeBadHold = _RcStatBgpPeerTxOpCodeBadHold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 74),
    _RcStatBgpPeerTxOpCodeBadHold_Type()
)
rcStatBgpPeerTxOpCodeBadHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxOpCodeBadHold.setStatus("current")
_RcStatBgpPeerTxUpdCodeMalformedAttrList_Type = Counter32
_RcStatBgpPeerTxUpdCodeMalformedAttrList_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeMalformedAttrList = _RcStatBgpPeerTxUpdCodeMalformedAttrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 75),
    _RcStatBgpPeerTxUpdCodeMalformedAttrList_Type()
)
rcStatBgpPeerTxUpdCodeMalformedAttrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeMalformedAttrList.setStatus("current")
_RcStatBgpPeerTxUpdCodeWelknownAttrUnrecog_Type = Counter32
_RcStatBgpPeerTxUpdCodeWelknownAttrUnrecog_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeWelknownAttrUnrecog = _RcStatBgpPeerTxUpdCodeWelknownAttrUnrecog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 76),
    _RcStatBgpPeerTxUpdCodeWelknownAttrUnrecog_Type()
)
rcStatBgpPeerTxUpdCodeWelknownAttrUnrecog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeWelknownAttrUnrecog.setStatus("current")
_RcStatBgpPeerTxUpdCodeWelknownAttrMiss_Type = Counter32
_RcStatBgpPeerTxUpdCodeWelknownAttrMiss_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeWelknownAttrMiss = _RcStatBgpPeerTxUpdCodeWelknownAttrMiss_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 77),
    _RcStatBgpPeerTxUpdCodeWelknownAttrMiss_Type()
)
rcStatBgpPeerTxUpdCodeWelknownAttrMiss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeWelknownAttrMiss.setStatus("current")
_RcStatBgpPeerTxUpdCodeAttrFlagError_Type = Counter32
_RcStatBgpPeerTxUpdCodeAttrFlagError_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeAttrFlagError = _RcStatBgpPeerTxUpdCodeAttrFlagError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 78),
    _RcStatBgpPeerTxUpdCodeAttrFlagError_Type()
)
rcStatBgpPeerTxUpdCodeAttrFlagError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeAttrFlagError.setStatus("current")
_RcStatBgpPeerTxUpdCodeAttrLenError_Type = Counter32
_RcStatBgpPeerTxUpdCodeAttrLenError_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeAttrLenError = _RcStatBgpPeerTxUpdCodeAttrLenError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 79),
    _RcStatBgpPeerTxUpdCodeAttrLenError_Type()
)
rcStatBgpPeerTxUpdCodeAttrLenError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeAttrLenError.setStatus("current")
_RcStatBgpPeerTxUpdCodeBadORIGINAttr_Type = Counter32
_RcStatBgpPeerTxUpdCodeBadORIGINAttr_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeBadORIGINAttr = _RcStatBgpPeerTxUpdCodeBadORIGINAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 80),
    _RcStatBgpPeerTxUpdCodeBadORIGINAttr_Type()
)
rcStatBgpPeerTxUpdCodeBadORIGINAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeBadORIGINAttr.setStatus("current")
_RcStatBgpPeerTxUpdCodeASRoutingLoop_Type = Counter32
_RcStatBgpPeerTxUpdCodeASRoutingLoop_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeASRoutingLoop = _RcStatBgpPeerTxUpdCodeASRoutingLoop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 81),
    _RcStatBgpPeerTxUpdCodeASRoutingLoop_Type()
)
rcStatBgpPeerTxUpdCodeASRoutingLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeASRoutingLoop.setStatus("current")
_RcStatBgpPeerTxUpdCodeBadNHAttr_Type = Counter32
_RcStatBgpPeerTxUpdCodeBadNHAttr_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeBadNHAttr = _RcStatBgpPeerTxUpdCodeBadNHAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 82),
    _RcStatBgpPeerTxUpdCodeBadNHAttr_Type()
)
rcStatBgpPeerTxUpdCodeBadNHAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeBadNHAttr.setStatus("current")
_RcStatBgpPeerTxUpdCodeOptionalAttrError_Type = Counter32
_RcStatBgpPeerTxUpdCodeOptionalAttrError_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeOptionalAttrError = _RcStatBgpPeerTxUpdCodeOptionalAttrError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 83),
    _RcStatBgpPeerTxUpdCodeOptionalAttrError_Type()
)
rcStatBgpPeerTxUpdCodeOptionalAttrError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeOptionalAttrError.setStatus("current")
_RcStatBgpPeerTxUpdCodeBadNetworkField_Type = Counter32
_RcStatBgpPeerTxUpdCodeBadNetworkField_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeBadNetworkField = _RcStatBgpPeerTxUpdCodeBadNetworkField_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 84),
    _RcStatBgpPeerTxUpdCodeBadNetworkField_Type()
)
rcStatBgpPeerTxUpdCodeBadNetworkField.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeBadNetworkField.setStatus("current")
_RcStatBgpPeerTxUpdCodeMalformedASPath_Type = Counter32
_RcStatBgpPeerTxUpdCodeMalformedASPath_Object = MibTableColumn
rcStatBgpPeerTxUpdCodeMalformedASPath = _RcStatBgpPeerTxUpdCodeMalformedASPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 85),
    _RcStatBgpPeerTxUpdCodeMalformedASPath_Type()
)
rcStatBgpPeerTxUpdCodeMalformedASPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerTxUpdCodeMalformedASPath.setStatus("current")


class _RcStatBgpPeerReset_Type(EnableValue):
    """Custom type rcStatBgpPeerReset based on EnableValue"""


_RcStatBgpPeerReset_Object = MibTableColumn
rcStatBgpPeerReset = _RcStatBgpPeerReset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 11, 1, 86),
    _RcStatBgpPeerReset_Type()
)
rcStatBgpPeerReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStatBgpPeerReset.setStatus("current")
_RcStatBgpPeerAfTable_Object = MibTable
rcStatBgpPeerAfTable = _RcStatBgpPeerAfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13)
)
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTable.setStatus("current")
_RcStatBgpPeerAfEntry_Object = MibTableRow
rcStatBgpPeerAfEntry = _RcStatBgpPeerAfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1)
)
rcStatBgpPeerAfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStatBgpPeerAfAddrType"),
    (0, "RAPID-CITY", "rcStatBgpPeerAfAddr"),
)
if mibBuilder.loadTexts:
    rcStatBgpPeerAfEntry.setStatus("current")
_RcStatBgpPeerAfAddrType_Type = InetAddressType
_RcStatBgpPeerAfAddrType_Object = MibTableColumn
rcStatBgpPeerAfAddrType = _RcStatBgpPeerAfAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 1),
    _RcStatBgpPeerAfAddrType_Type()
)
rcStatBgpPeerAfAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfAddrType.setStatus("current")
_RcStatBgpPeerAfAddr_Type = InetAddress
_RcStatBgpPeerAfAddr_Object = MibTableColumn
rcStatBgpPeerAfAddr = _RcStatBgpPeerAfAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 2),
    _RcStatBgpPeerAfAddr_Type()
)
rcStatBgpPeerAfAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfAddr.setStatus("current")
_RcStatBgpPeerAfStarts_Type = Counter32
_RcStatBgpPeerAfStarts_Object = MibTableColumn
rcStatBgpPeerAfStarts = _RcStatBgpPeerAfStarts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 3),
    _RcStatBgpPeerAfStarts_Type()
)
rcStatBgpPeerAfStarts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfStarts.setStatus("current")
_RcStatBgpPeerAfStops_Type = Counter32
_RcStatBgpPeerAfStops_Object = MibTableColumn
rcStatBgpPeerAfStops = _RcStatBgpPeerAfStops_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 4),
    _RcStatBgpPeerAfStops_Type()
)
rcStatBgpPeerAfStops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfStops.setStatus("current")
_RcStatBgpPeerAfOpens_Type = Counter32
_RcStatBgpPeerAfOpens_Object = MibTableColumn
rcStatBgpPeerAfOpens = _RcStatBgpPeerAfOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 5),
    _RcStatBgpPeerAfOpens_Type()
)
rcStatBgpPeerAfOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfOpens.setStatus("current")
_RcStatBgpPeerAfCloses_Type = Counter32
_RcStatBgpPeerAfCloses_Object = MibTableColumn
rcStatBgpPeerAfCloses = _RcStatBgpPeerAfCloses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 6),
    _RcStatBgpPeerAfCloses_Type()
)
rcStatBgpPeerAfCloses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfCloses.setStatus("current")
_RcStatBgpPeerAfFails_Type = Counter32
_RcStatBgpPeerAfFails_Object = MibTableColumn
rcStatBgpPeerAfFails = _RcStatBgpPeerAfFails_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 7),
    _RcStatBgpPeerAfFails_Type()
)
rcStatBgpPeerAfFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfFails.setStatus("current")
_RcStatBgpPeerAfFatals_Type = Counter32
_RcStatBgpPeerAfFatals_Object = MibTableColumn
rcStatBgpPeerAfFatals = _RcStatBgpPeerAfFatals_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 8),
    _RcStatBgpPeerAfFatals_Type()
)
rcStatBgpPeerAfFatals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfFatals.setStatus("current")
_RcStatBgpPeerAfConnExps_Type = Counter32
_RcStatBgpPeerAfConnExps_Object = MibTableColumn
rcStatBgpPeerAfConnExps = _RcStatBgpPeerAfConnExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 9),
    _RcStatBgpPeerAfConnExps_Type()
)
rcStatBgpPeerAfConnExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfConnExps.setStatus("current")
_RcStatBgpPeerAfHoldExps_Type = Counter32
_RcStatBgpPeerAfHoldExps_Object = MibTableColumn
rcStatBgpPeerAfHoldExps = _RcStatBgpPeerAfHoldExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 10),
    _RcStatBgpPeerAfHoldExps_Type()
)
rcStatBgpPeerAfHoldExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfHoldExps.setStatus("current")
_RcStatBgpPeerAfKeepExps_Type = Counter32
_RcStatBgpPeerAfKeepExps_Object = MibTableColumn
rcStatBgpPeerAfKeepExps = _RcStatBgpPeerAfKeepExps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 11),
    _RcStatBgpPeerAfKeepExps_Type()
)
rcStatBgpPeerAfKeepExps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfKeepExps.setStatus("current")
_RcStatBgpPeerAfTxMsgs_Type = Counter32
_RcStatBgpPeerAfTxMsgs_Object = MibTableColumn
rcStatBgpPeerAfTxMsgs = _RcStatBgpPeerAfTxMsgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 12),
    _RcStatBgpPeerAfTxMsgs_Type()
)
rcStatBgpPeerAfTxMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxMsgs.setStatus("current")
_RcStatBgpPeerAfTxOpens_Type = Counter32
_RcStatBgpPeerAfTxOpens_Object = MibTableColumn
rcStatBgpPeerAfTxOpens = _RcStatBgpPeerAfTxOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 13),
    _RcStatBgpPeerAfTxOpens_Type()
)
rcStatBgpPeerAfTxOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxOpens.setStatus("current")
_RcStatBgpPeerAfTxKeeps_Type = Counter32
_RcStatBgpPeerAfTxKeeps_Object = MibTableColumn
rcStatBgpPeerAfTxKeeps = _RcStatBgpPeerAfTxKeeps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 14),
    _RcStatBgpPeerAfTxKeeps_Type()
)
rcStatBgpPeerAfTxKeeps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxKeeps.setStatus("current")
_RcStatBgpPeerAfTxUpdates_Type = Counter32
_RcStatBgpPeerAfTxUpdates_Object = MibTableColumn
rcStatBgpPeerAfTxUpdates = _RcStatBgpPeerAfTxUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 15),
    _RcStatBgpPeerAfTxUpdates_Type()
)
rcStatBgpPeerAfTxUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdates.setStatus("current")
_RcStatBgpPeerAfTxNotifys_Type = Counter32
_RcStatBgpPeerAfTxNotifys_Object = MibTableColumn
rcStatBgpPeerAfTxNotifys = _RcStatBgpPeerAfTxNotifys_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 16),
    _RcStatBgpPeerAfTxNotifys_Type()
)
rcStatBgpPeerAfTxNotifys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxNotifys.setStatus("current")
_RcStatBgpPeerAfRxMsgs_Type = Counter32
_RcStatBgpPeerAfRxMsgs_Object = MibTableColumn
rcStatBgpPeerAfRxMsgs = _RcStatBgpPeerAfRxMsgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 17),
    _RcStatBgpPeerAfRxMsgs_Type()
)
rcStatBgpPeerAfRxMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxMsgs.setStatus("current")
_RcStatBgpPeerAfRxInCompPkts_Type = Counter32
_RcStatBgpPeerAfRxInCompPkts_Object = MibTableColumn
rcStatBgpPeerAfRxInCompPkts = _RcStatBgpPeerAfRxInCompPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 18),
    _RcStatBgpPeerAfRxInCompPkts_Type()
)
rcStatBgpPeerAfRxInCompPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxInCompPkts.setStatus("current")
_RcStatBgpPeerAfRxOpens_Type = Counter32
_RcStatBgpPeerAfRxOpens_Object = MibTableColumn
rcStatBgpPeerAfRxOpens = _RcStatBgpPeerAfRxOpens_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 19),
    _RcStatBgpPeerAfRxOpens_Type()
)
rcStatBgpPeerAfRxOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxOpens.setStatus("current")
_RcStatBgpPeerAfRxKeeps_Type = Counter32
_RcStatBgpPeerAfRxKeeps_Object = MibTableColumn
rcStatBgpPeerAfRxKeeps = _RcStatBgpPeerAfRxKeeps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 20),
    _RcStatBgpPeerAfRxKeeps_Type()
)
rcStatBgpPeerAfRxKeeps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxKeeps.setStatus("current")
_RcStatBgpPeerAfRxUpdates_Type = Counter32
_RcStatBgpPeerAfRxUpdates_Object = MibTableColumn
rcStatBgpPeerAfRxUpdates = _RcStatBgpPeerAfRxUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 21),
    _RcStatBgpPeerAfRxUpdates_Type()
)
rcStatBgpPeerAfRxUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdates.setStatus("current")
_RcStatBgpPeerAfRxNotifys_Type = Counter32
_RcStatBgpPeerAfRxNotifys_Object = MibTableColumn
rcStatBgpPeerAfRxNotifys = _RcStatBgpPeerAfRxNotifys_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 22),
    _RcStatBgpPeerAfRxNotifys_Type()
)
rcStatBgpPeerAfRxNotifys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxNotifys.setStatus("current")
_RcStatBgpPeerAfBadEvents_Type = Counter32
_RcStatBgpPeerAfBadEvents_Object = MibTableColumn
rcStatBgpPeerAfBadEvents = _RcStatBgpPeerAfBadEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 23),
    _RcStatBgpPeerAfBadEvents_Type()
)
rcStatBgpPeerAfBadEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfBadEvents.setStatus("current")
_RcStatBgpPeerAfSyncFails_Type = Counter32
_RcStatBgpPeerAfSyncFails_Object = MibTableColumn
rcStatBgpPeerAfSyncFails = _RcStatBgpPeerAfSyncFails_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 24),
    _RcStatBgpPeerAfSyncFails_Type()
)
rcStatBgpPeerAfSyncFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfSyncFails.setStatus("current")
_RcStatBgpPeerAfRcvdTooShort_Type = Counter32
_RcStatBgpPeerAfRcvdTooShort_Object = MibTableColumn
rcStatBgpPeerAfRcvdTooShort = _RcStatBgpPeerAfRcvdTooShort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 25),
    _RcStatBgpPeerAfRcvdTooShort_Type()
)
rcStatBgpPeerAfRcvdTooShort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRcvdTooShort.setStatus("current")
_RcStatBgpPeerAfNoMarker_Type = Counter32
_RcStatBgpPeerAfNoMarker_Object = MibTableColumn
rcStatBgpPeerAfNoMarker = _RcStatBgpPeerAfNoMarker_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 26),
    _RcStatBgpPeerAfNoMarker_Type()
)
rcStatBgpPeerAfNoMarker.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfNoMarker.setStatus("current")
_RcStatBgpPeerAfDropped_Type = Counter32
_RcStatBgpPeerAfDropped_Object = MibTableColumn
rcStatBgpPeerAfDropped = _RcStatBgpPeerAfDropped_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 27),
    _RcStatBgpPeerAfDropped_Type()
)
rcStatBgpPeerAfDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfDropped.setStatus("current")
_RcStatBgpPeerAfBadMsgTypes_Type = Counter32
_RcStatBgpPeerAfBadMsgTypes_Object = MibTableColumn
rcStatBgpPeerAfBadMsgTypes = _RcStatBgpPeerAfBadMsgTypes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 28),
    _RcStatBgpPeerAfBadMsgTypes_Type()
)
rcStatBgpPeerAfBadMsgTypes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfBadMsgTypes.setStatus("current")
_RcStatBgpPeerAfTrEvent_Type = Counter32
_RcStatBgpPeerAfTrEvent_Object = MibTableColumn
rcStatBgpPeerAfTrEvent = _RcStatBgpPeerAfTrEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 29),
    _RcStatBgpPeerAfTrEvent_Type()
)
rcStatBgpPeerAfTrEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTrEvent.setStatus("current")
_RcStatBgpPeerAfTxRoutes_Type = Counter32
_RcStatBgpPeerAfTxRoutes_Object = MibTableColumn
rcStatBgpPeerAfTxRoutes = _RcStatBgpPeerAfTxRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 30),
    _RcStatBgpPeerAfTxRoutes_Type()
)
rcStatBgpPeerAfTxRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxRoutes.setStatus("current")
_RcStatBgpPeerAfRxRoutesAdded_Type = Counter32
_RcStatBgpPeerAfRxRoutesAdded_Object = MibTableColumn
rcStatBgpPeerAfRxRoutesAdded = _RcStatBgpPeerAfRxRoutesAdded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 31),
    _RcStatBgpPeerAfRxRoutesAdded_Type()
)
rcStatBgpPeerAfRxRoutesAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxRoutesAdded.setStatus("current")
_RcStatBgpPeerAfRxRoutesReplaced_Type = Counter32
_RcStatBgpPeerAfRxRoutesReplaced_Object = MibTableColumn
rcStatBgpPeerAfRxRoutesReplaced = _RcStatBgpPeerAfRxRoutesReplaced_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 32),
    _RcStatBgpPeerAfRxRoutesReplaced_Type()
)
rcStatBgpPeerAfRxRoutesReplaced.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxRoutesReplaced.setStatus("current")
_RcStatBgpPeerAfRxNlri_Type = Counter32
_RcStatBgpPeerAfRxNlri_Object = MibTableColumn
rcStatBgpPeerAfRxNlri = _RcStatBgpPeerAfRxNlri_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 33),
    _RcStatBgpPeerAfRxNlri_Type()
)
rcStatBgpPeerAfRxNlri.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxNlri.setStatus("current")
_RcStatBgpPeerAfRxValidUpdates_Type = Counter32
_RcStatBgpPeerAfRxValidUpdates_Object = MibTableColumn
rcStatBgpPeerAfRxValidUpdates = _RcStatBgpPeerAfRxValidUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 34),
    _RcStatBgpPeerAfRxValidUpdates_Type()
)
rcStatBgpPeerAfRxValidUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxValidUpdates.setStatus("current")
_RcStatBgpPeerAfRxECodeHeader_Type = Counter32
_RcStatBgpPeerAfRxECodeHeader_Object = MibTableColumn
rcStatBgpPeerAfRxECodeHeader = _RcStatBgpPeerAfRxECodeHeader_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 35),
    _RcStatBgpPeerAfRxECodeHeader_Type()
)
rcStatBgpPeerAfRxECodeHeader.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxECodeHeader.setStatus("current")
_RcStatBgpPeerAfRxECodeOpen_Type = Counter32
_RcStatBgpPeerAfRxECodeOpen_Object = MibTableColumn
rcStatBgpPeerAfRxECodeOpen = _RcStatBgpPeerAfRxECodeOpen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 36),
    _RcStatBgpPeerAfRxECodeOpen_Type()
)
rcStatBgpPeerAfRxECodeOpen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxECodeOpen.setStatus("current")
_RcStatBgpPeerAfRxECodeUpdate_Type = Counter32
_RcStatBgpPeerAfRxECodeUpdate_Object = MibTableColumn
rcStatBgpPeerAfRxECodeUpdate = _RcStatBgpPeerAfRxECodeUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 37),
    _RcStatBgpPeerAfRxECodeUpdate_Type()
)
rcStatBgpPeerAfRxECodeUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxECodeUpdate.setStatus("current")
_RcStatBgpPeerAfRxECodeHoldtimer_Type = Counter32
_RcStatBgpPeerAfRxECodeHoldtimer_Object = MibTableColumn
rcStatBgpPeerAfRxECodeHoldtimer = _RcStatBgpPeerAfRxECodeHoldtimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 38),
    _RcStatBgpPeerAfRxECodeHoldtimer_Type()
)
rcStatBgpPeerAfRxECodeHoldtimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxECodeHoldtimer.setStatus("current")
_RcStatBgpPeerAfRxECodeFSM_Type = Counter32
_RcStatBgpPeerAfRxECodeFSM_Object = MibTableColumn
rcStatBgpPeerAfRxECodeFSM = _RcStatBgpPeerAfRxECodeFSM_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 39),
    _RcStatBgpPeerAfRxECodeFSM_Type()
)
rcStatBgpPeerAfRxECodeFSM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxECodeFSM.setStatus("current")
_RcStatBgpPeerAfRxECodeCease_Type = Counter32
_RcStatBgpPeerAfRxECodeCease_Object = MibTableColumn
rcStatBgpPeerAfRxECodeCease = _RcStatBgpPeerAfRxECodeCease_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 40),
    _RcStatBgpPeerAfRxECodeCease_Type()
)
rcStatBgpPeerAfRxECodeCease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxECodeCease.setStatus("current")
_RcStatBgpPeerAfRxHdrCodeNoSync_Type = Counter32
_RcStatBgpPeerAfRxHdrCodeNoSync_Object = MibTableColumn
rcStatBgpPeerAfRxHdrCodeNoSync = _RcStatBgpPeerAfRxHdrCodeNoSync_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 41),
    _RcStatBgpPeerAfRxHdrCodeNoSync_Type()
)
rcStatBgpPeerAfRxHdrCodeNoSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxHdrCodeNoSync.setStatus("current")
_RcStatBgpPeerAfRxHdrCodeInvalidMsgLen_Type = Counter32
_RcStatBgpPeerAfRxHdrCodeInvalidMsgLen_Object = MibTableColumn
rcStatBgpPeerAfRxHdrCodeInvalidMsgLen = _RcStatBgpPeerAfRxHdrCodeInvalidMsgLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 42),
    _RcStatBgpPeerAfRxHdrCodeInvalidMsgLen_Type()
)
rcStatBgpPeerAfRxHdrCodeInvalidMsgLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxHdrCodeInvalidMsgLen.setStatus("current")
_RcStatBgpPeerAfRxHdrCodeInvalidMsgType_Type = Counter32
_RcStatBgpPeerAfRxHdrCodeInvalidMsgType_Object = MibTableColumn
rcStatBgpPeerAfRxHdrCodeInvalidMsgType = _RcStatBgpPeerAfRxHdrCodeInvalidMsgType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 43),
    _RcStatBgpPeerAfRxHdrCodeInvalidMsgType_Type()
)
rcStatBgpPeerAfRxHdrCodeInvalidMsgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxHdrCodeInvalidMsgType.setStatus("current")
_RcStatBgpPeerAfRxOpCodeBadVer_Type = Counter32
_RcStatBgpPeerAfRxOpCodeBadVer_Object = MibTableColumn
rcStatBgpPeerAfRxOpCodeBadVer = _RcStatBgpPeerAfRxOpCodeBadVer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 44),
    _RcStatBgpPeerAfRxOpCodeBadVer_Type()
)
rcStatBgpPeerAfRxOpCodeBadVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxOpCodeBadVer.setStatus("current")
_RcStatBgpPeerAfRxOpCodeBadAs_Type = Counter32
_RcStatBgpPeerAfRxOpCodeBadAs_Object = MibTableColumn
rcStatBgpPeerAfRxOpCodeBadAs = _RcStatBgpPeerAfRxOpCodeBadAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 45),
    _RcStatBgpPeerAfRxOpCodeBadAs_Type()
)
rcStatBgpPeerAfRxOpCodeBadAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxOpCodeBadAs.setStatus("current")
_RcStatBgpPeerAfRxOpCodeBadRtID_Type = Counter32
_RcStatBgpPeerAfRxOpCodeBadRtID_Object = MibTableColumn
rcStatBgpPeerAfRxOpCodeBadRtID = _RcStatBgpPeerAfRxOpCodeBadRtID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 46),
    _RcStatBgpPeerAfRxOpCodeBadRtID_Type()
)
rcStatBgpPeerAfRxOpCodeBadRtID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxOpCodeBadRtID.setStatus("current")
_RcStatBgpPeerAfRxOpCodeUnsuppOption_Type = Counter32
_RcStatBgpPeerAfRxOpCodeUnsuppOption_Object = MibTableColumn
rcStatBgpPeerAfRxOpCodeUnsuppOption = _RcStatBgpPeerAfRxOpCodeUnsuppOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 47),
    _RcStatBgpPeerAfRxOpCodeUnsuppOption_Type()
)
rcStatBgpPeerAfRxOpCodeUnsuppOption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxOpCodeUnsuppOption.setStatus("current")
_RcStatBgpPeerAfRxOpCodeAuthFail_Type = Counter32
_RcStatBgpPeerAfRxOpCodeAuthFail_Object = MibTableColumn
rcStatBgpPeerAfRxOpCodeAuthFail = _RcStatBgpPeerAfRxOpCodeAuthFail_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 48),
    _RcStatBgpPeerAfRxOpCodeAuthFail_Type()
)
rcStatBgpPeerAfRxOpCodeAuthFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxOpCodeAuthFail.setStatus("current")
_RcStatBgpPeerAfRxOpCodeBadHold_Type = Counter32
_RcStatBgpPeerAfRxOpCodeBadHold_Object = MibTableColumn
rcStatBgpPeerAfRxOpCodeBadHold = _RcStatBgpPeerAfRxOpCodeBadHold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 49),
    _RcStatBgpPeerAfRxOpCodeBadHold_Type()
)
rcStatBgpPeerAfRxOpCodeBadHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxOpCodeBadHold.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeMalformedAttrList_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeMalformedAttrList_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeMalformedAttrList = _RcStatBgpPeerAfRxUpdCodeMalformedAttrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 50),
    _RcStatBgpPeerAfRxUpdCodeMalformedAttrList_Type()
)
rcStatBgpPeerAfRxUpdCodeMalformedAttrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeMalformedAttrList.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog = _RcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 51),
    _RcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog_Type()
)
rcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeWelknownAttrMiss_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeWelknownAttrMiss_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeWelknownAttrMiss = _RcStatBgpPeerAfRxUpdCodeWelknownAttrMiss_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 52),
    _RcStatBgpPeerAfRxUpdCodeWelknownAttrMiss_Type()
)
rcStatBgpPeerAfRxUpdCodeWelknownAttrMiss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeWelknownAttrMiss.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeAttrFlagError_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeAttrFlagError_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeAttrFlagError = _RcStatBgpPeerAfRxUpdCodeAttrFlagError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 53),
    _RcStatBgpPeerAfRxUpdCodeAttrFlagError_Type()
)
rcStatBgpPeerAfRxUpdCodeAttrFlagError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeAttrFlagError.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeAttrLenError_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeAttrLenError_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeAttrLenError = _RcStatBgpPeerAfRxUpdCodeAttrLenError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 54),
    _RcStatBgpPeerAfRxUpdCodeAttrLenError_Type()
)
rcStatBgpPeerAfRxUpdCodeAttrLenError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeAttrLenError.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeBadORIGINAttr_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeBadORIGINAttr_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeBadORIGINAttr = _RcStatBgpPeerAfRxUpdCodeBadORIGINAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 55),
    _RcStatBgpPeerAfRxUpdCodeBadORIGINAttr_Type()
)
rcStatBgpPeerAfRxUpdCodeBadORIGINAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeBadORIGINAttr.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeASRoutingLoop_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeASRoutingLoop_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeASRoutingLoop = _RcStatBgpPeerAfRxUpdCodeASRoutingLoop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 56),
    _RcStatBgpPeerAfRxUpdCodeASRoutingLoop_Type()
)
rcStatBgpPeerAfRxUpdCodeASRoutingLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeASRoutingLoop.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeBadNHAttr_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeBadNHAttr_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeBadNHAttr = _RcStatBgpPeerAfRxUpdCodeBadNHAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 57),
    _RcStatBgpPeerAfRxUpdCodeBadNHAttr_Type()
)
rcStatBgpPeerAfRxUpdCodeBadNHAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeBadNHAttr.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeOptionalAttrError_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeOptionalAttrError_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeOptionalAttrError = _RcStatBgpPeerAfRxUpdCodeOptionalAttrError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 58),
    _RcStatBgpPeerAfRxUpdCodeOptionalAttrError_Type()
)
rcStatBgpPeerAfRxUpdCodeOptionalAttrError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeOptionalAttrError.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeBadNetworkField_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeBadNetworkField_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeBadNetworkField = _RcStatBgpPeerAfRxUpdCodeBadNetworkField_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 59),
    _RcStatBgpPeerAfRxUpdCodeBadNetworkField_Type()
)
rcStatBgpPeerAfRxUpdCodeBadNetworkField.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeBadNetworkField.setStatus("current")
_RcStatBgpPeerAfRxUpdCodeMalformedASPath_Type = Counter32
_RcStatBgpPeerAfRxUpdCodeMalformedASPath_Object = MibTableColumn
rcStatBgpPeerAfRxUpdCodeMalformedASPath = _RcStatBgpPeerAfRxUpdCodeMalformedASPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 60),
    _RcStatBgpPeerAfRxUpdCodeMalformedASPath_Type()
)
rcStatBgpPeerAfRxUpdCodeMalformedASPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfRxUpdCodeMalformedASPath.setStatus("current")
_RcStatBgpPeerAfTxECodeHeader_Type = Counter32
_RcStatBgpPeerAfTxECodeHeader_Object = MibTableColumn
rcStatBgpPeerAfTxECodeHeader = _RcStatBgpPeerAfTxECodeHeader_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 61),
    _RcStatBgpPeerAfTxECodeHeader_Type()
)
rcStatBgpPeerAfTxECodeHeader.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxECodeHeader.setStatus("current")
_RcStatBgpPeerAfTxECodeOpen_Type = Counter32
_RcStatBgpPeerAfTxECodeOpen_Object = MibTableColumn
rcStatBgpPeerAfTxECodeOpen = _RcStatBgpPeerAfTxECodeOpen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 62),
    _RcStatBgpPeerAfTxECodeOpen_Type()
)
rcStatBgpPeerAfTxECodeOpen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxECodeOpen.setStatus("current")
_RcStatBgpPeerAfTxECodeUpdate_Type = Counter32
_RcStatBgpPeerAfTxECodeUpdate_Object = MibTableColumn
rcStatBgpPeerAfTxECodeUpdate = _RcStatBgpPeerAfTxECodeUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 63),
    _RcStatBgpPeerAfTxECodeUpdate_Type()
)
rcStatBgpPeerAfTxECodeUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxECodeUpdate.setStatus("current")
_RcStatBgpPeerAfTxECodeHoldtimer_Type = Counter32
_RcStatBgpPeerAfTxECodeHoldtimer_Object = MibTableColumn
rcStatBgpPeerAfTxECodeHoldtimer = _RcStatBgpPeerAfTxECodeHoldtimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 64),
    _RcStatBgpPeerAfTxECodeHoldtimer_Type()
)
rcStatBgpPeerAfTxECodeHoldtimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxECodeHoldtimer.setStatus("current")
_RcStatBgpPeerAfTxECodeFSM_Type = Counter32
_RcStatBgpPeerAfTxECodeFSM_Object = MibTableColumn
rcStatBgpPeerAfTxECodeFSM = _RcStatBgpPeerAfTxECodeFSM_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 65),
    _RcStatBgpPeerAfTxECodeFSM_Type()
)
rcStatBgpPeerAfTxECodeFSM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxECodeFSM.setStatus("current")
_RcStatBgpPeerAfTxECodeCease_Type = Counter32
_RcStatBgpPeerAfTxECodeCease_Object = MibTableColumn
rcStatBgpPeerAfTxECodeCease = _RcStatBgpPeerAfTxECodeCease_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 66),
    _RcStatBgpPeerAfTxECodeCease_Type()
)
rcStatBgpPeerAfTxECodeCease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxECodeCease.setStatus("current")
_RcStatBgpPeerAfTxHdrCodeNoSync_Type = Counter32
_RcStatBgpPeerAfTxHdrCodeNoSync_Object = MibTableColumn
rcStatBgpPeerAfTxHdrCodeNoSync = _RcStatBgpPeerAfTxHdrCodeNoSync_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 67),
    _RcStatBgpPeerAfTxHdrCodeNoSync_Type()
)
rcStatBgpPeerAfTxHdrCodeNoSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxHdrCodeNoSync.setStatus("current")
_RcStatBgpPeerAfTxHdrCodeInvalidMsgLen_Type = Counter32
_RcStatBgpPeerAfTxHdrCodeInvalidMsgLen_Object = MibTableColumn
rcStatBgpPeerAfTxHdrCodeInvalidMsgLen = _RcStatBgpPeerAfTxHdrCodeInvalidMsgLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 68),
    _RcStatBgpPeerAfTxHdrCodeInvalidMsgLen_Type()
)
rcStatBgpPeerAfTxHdrCodeInvalidMsgLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxHdrCodeInvalidMsgLen.setStatus("current")
_RcStatBgpPeerAfTxHdrCodeInvalidMsgType_Type = Counter32
_RcStatBgpPeerAfTxHdrCodeInvalidMsgType_Object = MibTableColumn
rcStatBgpPeerAfTxHdrCodeInvalidMsgType = _RcStatBgpPeerAfTxHdrCodeInvalidMsgType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 69),
    _RcStatBgpPeerAfTxHdrCodeInvalidMsgType_Type()
)
rcStatBgpPeerAfTxHdrCodeInvalidMsgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxHdrCodeInvalidMsgType.setStatus("current")
_RcStatBgpPeerAfTxOpCodeBadVer_Type = Counter32
_RcStatBgpPeerAfTxOpCodeBadVer_Object = MibTableColumn
rcStatBgpPeerAfTxOpCodeBadVer = _RcStatBgpPeerAfTxOpCodeBadVer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 70),
    _RcStatBgpPeerAfTxOpCodeBadVer_Type()
)
rcStatBgpPeerAfTxOpCodeBadVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxOpCodeBadVer.setStatus("current")
_RcStatBgpPeerAfTxOpCodeBadAs_Type = Counter32
_RcStatBgpPeerAfTxOpCodeBadAs_Object = MibTableColumn
rcStatBgpPeerAfTxOpCodeBadAs = _RcStatBgpPeerAfTxOpCodeBadAs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 71),
    _RcStatBgpPeerAfTxOpCodeBadAs_Type()
)
rcStatBgpPeerAfTxOpCodeBadAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxOpCodeBadAs.setStatus("current")
_RcStatBgpPeerAfTxOpCodeBadRtID_Type = Counter32
_RcStatBgpPeerAfTxOpCodeBadRtID_Object = MibTableColumn
rcStatBgpPeerAfTxOpCodeBadRtID = _RcStatBgpPeerAfTxOpCodeBadRtID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 72),
    _RcStatBgpPeerAfTxOpCodeBadRtID_Type()
)
rcStatBgpPeerAfTxOpCodeBadRtID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxOpCodeBadRtID.setStatus("current")
_RcStatBgpPeerAfTxOpCodeUnsuppOption_Type = Counter32
_RcStatBgpPeerAfTxOpCodeUnsuppOption_Object = MibTableColumn
rcStatBgpPeerAfTxOpCodeUnsuppOption = _RcStatBgpPeerAfTxOpCodeUnsuppOption_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 73),
    _RcStatBgpPeerAfTxOpCodeUnsuppOption_Type()
)
rcStatBgpPeerAfTxOpCodeUnsuppOption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxOpCodeUnsuppOption.setStatus("current")
_RcStatBgpPeerAfTxOpCodeAuthFail_Type = Counter32
_RcStatBgpPeerAfTxOpCodeAuthFail_Object = MibTableColumn
rcStatBgpPeerAfTxOpCodeAuthFail = _RcStatBgpPeerAfTxOpCodeAuthFail_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 74),
    _RcStatBgpPeerAfTxOpCodeAuthFail_Type()
)
rcStatBgpPeerAfTxOpCodeAuthFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxOpCodeAuthFail.setStatus("current")
_RcStatBgpPeerAfTxOpCodeBadHold_Type = Counter32
_RcStatBgpPeerAfTxOpCodeBadHold_Object = MibTableColumn
rcStatBgpPeerAfTxOpCodeBadHold = _RcStatBgpPeerAfTxOpCodeBadHold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 75),
    _RcStatBgpPeerAfTxOpCodeBadHold_Type()
)
rcStatBgpPeerAfTxOpCodeBadHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxOpCodeBadHold.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeMalformedAttrList_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeMalformedAttrList_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeMalformedAttrList = _RcStatBgpPeerAfTxUpdCodeMalformedAttrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 76),
    _RcStatBgpPeerAfTxUpdCodeMalformedAttrList_Type()
)
rcStatBgpPeerAfTxUpdCodeMalformedAttrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeMalformedAttrList.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog = _RcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 77),
    _RcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog_Type()
)
rcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeWelknownAttrMiss_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeWelknownAttrMiss_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeWelknownAttrMiss = _RcStatBgpPeerAfTxUpdCodeWelknownAttrMiss_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 78),
    _RcStatBgpPeerAfTxUpdCodeWelknownAttrMiss_Type()
)
rcStatBgpPeerAfTxUpdCodeWelknownAttrMiss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeWelknownAttrMiss.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeAttrFlagError_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeAttrFlagError_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeAttrFlagError = _RcStatBgpPeerAfTxUpdCodeAttrFlagError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 79),
    _RcStatBgpPeerAfTxUpdCodeAttrFlagError_Type()
)
rcStatBgpPeerAfTxUpdCodeAttrFlagError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeAttrFlagError.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeAttrLenError_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeAttrLenError_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeAttrLenError = _RcStatBgpPeerAfTxUpdCodeAttrLenError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 80),
    _RcStatBgpPeerAfTxUpdCodeAttrLenError_Type()
)
rcStatBgpPeerAfTxUpdCodeAttrLenError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeAttrLenError.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeBadORIGINAttr_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeBadORIGINAttr_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeBadORIGINAttr = _RcStatBgpPeerAfTxUpdCodeBadORIGINAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 81),
    _RcStatBgpPeerAfTxUpdCodeBadORIGINAttr_Type()
)
rcStatBgpPeerAfTxUpdCodeBadORIGINAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeBadORIGINAttr.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeASRoutingLoop_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeASRoutingLoop_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeASRoutingLoop = _RcStatBgpPeerAfTxUpdCodeASRoutingLoop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 82),
    _RcStatBgpPeerAfTxUpdCodeASRoutingLoop_Type()
)
rcStatBgpPeerAfTxUpdCodeASRoutingLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeASRoutingLoop.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeBadNHAttr_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeBadNHAttr_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeBadNHAttr = _RcStatBgpPeerAfTxUpdCodeBadNHAttr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 83),
    _RcStatBgpPeerAfTxUpdCodeBadNHAttr_Type()
)
rcStatBgpPeerAfTxUpdCodeBadNHAttr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeBadNHAttr.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeOptionalAttrError_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeOptionalAttrError_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeOptionalAttrError = _RcStatBgpPeerAfTxUpdCodeOptionalAttrError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 84),
    _RcStatBgpPeerAfTxUpdCodeOptionalAttrError_Type()
)
rcStatBgpPeerAfTxUpdCodeOptionalAttrError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeOptionalAttrError.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeBadNetworkField_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeBadNetworkField_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeBadNetworkField = _RcStatBgpPeerAfTxUpdCodeBadNetworkField_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 85),
    _RcStatBgpPeerAfTxUpdCodeBadNetworkField_Type()
)
rcStatBgpPeerAfTxUpdCodeBadNetworkField.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeBadNetworkField.setStatus("current")
_RcStatBgpPeerAfTxUpdCodeMalformedASPath_Type = Counter32
_RcStatBgpPeerAfTxUpdCodeMalformedASPath_Object = MibTableColumn
rcStatBgpPeerAfTxUpdCodeMalformedASPath = _RcStatBgpPeerAfTxUpdCodeMalformedASPath_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 86),
    _RcStatBgpPeerAfTxUpdCodeMalformedASPath_Type()
)
rcStatBgpPeerAfTxUpdCodeMalformedASPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfTxUpdCodeMalformedASPath.setStatus("current")


class _RcStatBgpPeerAfReset_Type(TruthValue):
    """Custom type rcStatBgpPeerAfReset based on TruthValue"""


_RcStatBgpPeerAfReset_Object = MibTableColumn
rcStatBgpPeerAfReset = _RcStatBgpPeerAfReset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 12, 13, 1, 87),
    _RcStatBgpPeerAfReset_Type()
)
rcStatBgpPeerAfReset.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcStatBgpPeerAfReset.setStatus("current")
_RcStg_ObjectIdentity = ObjectIdentity
rcStg = _RcStg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13)
)
_RcStgMaxStgs_Type = Integer32
_RcStgMaxStgs_Object = MibScalar
rcStgMaxStgs = _RcStgMaxStgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 1),
    _RcStgMaxStgs_Type()
)
rcStgMaxStgs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgMaxStgs.setStatus("current")
_RcStgNumStgs_Type = Integer32
_RcStgNumStgs_Object = MibScalar
rcStgNumStgs = _RcStgNumStgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 2),
    _RcStgNumStgs_Type()
)
rcStgNumStgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgNumStgs.setStatus("current")
_RcStgUnassignedPorts_Type = PortSet
_RcStgUnassignedPorts_Object = MibScalar
rcStgUnassignedPorts = _RcStgUnassignedPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 3),
    _RcStgUnassignedPorts_Type()
)
rcStgUnassignedPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgUnassignedPorts.setStatus("current")
_RcStgTable_Object = MibTable
rcStgTable = _RcStgTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4)
)
if mibBuilder.loadTexts:
    rcStgTable.setStatus("current")
_RcStgEntry_Object = MibTableRow
rcStgEntry = _RcStgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1)
)
rcStgEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStgId"),
)
if mibBuilder.loadTexts:
    rcStgEntry.setStatus("current")


class _RcStgId_Type(Integer32):
    """Custom type rcStgId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_RcStgId_Type.__name__ = "Integer32"
_RcStgId_Object = MibTableColumn
rcStgId = _RcStgId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 1),
    _RcStgId_Type()
)
rcStgId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgId.setStatus("current")


class _RcStgTaggedBpduAddress_Type(MacAddress):
    """Custom type rcStgTaggedBpduAddress based on MacAddress"""
    defaultValue = OctetString("01:80:c2:00:00:00")


_RcStgTaggedBpduAddress_Object = MibTableColumn
rcStgTaggedBpduAddress = _RcStgTaggedBpduAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 2),
    _RcStgTaggedBpduAddress_Type()
)
rcStgTaggedBpduAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgTaggedBpduAddress.setStatus("current")
_RcStgTaggedBpduVlanId_Type = Integer32
_RcStgTaggedBpduVlanId_Object = MibTableColumn
rcStgTaggedBpduVlanId = _RcStgTaggedBpduVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 3),
    _RcStgTaggedBpduVlanId_Type()
)
rcStgTaggedBpduVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgTaggedBpduVlanId.setStatus("current")
_RcStgBridgeAddress_Type = MacAddress
_RcStgBridgeAddress_Object = MibTableColumn
rcStgBridgeAddress = _RcStgBridgeAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 4),
    _RcStgBridgeAddress_Type()
)
rcStgBridgeAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgBridgeAddress.setStatus("current")
_RcStgNumPorts_Type = Integer32
_RcStgNumPorts_Object = MibTableColumn
rcStgNumPorts = _RcStgNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 5),
    _RcStgNumPorts_Type()
)
rcStgNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgNumPorts.setStatus("current")


class _RcStgProtocolSpecification_Type(Integer32):
    """Custom type rcStgProtocolSpecification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("decLb100", 2),
          ("ieee8021d", 3),
          ("unknown", 1))
    )


_RcStgProtocolSpecification_Type.__name__ = "Integer32"
_RcStgProtocolSpecification_Object = MibTableColumn
rcStgProtocolSpecification = _RcStgProtocolSpecification_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 6),
    _RcStgProtocolSpecification_Type()
)
rcStgProtocolSpecification.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgProtocolSpecification.setStatus("current")


class _RcStgPriority_Type(Integer32):
    """Custom type rcStgPriority based on Integer32"""
    defaultValue = 32768

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcStgPriority_Type.__name__ = "Integer32"
_RcStgPriority_Object = MibTableColumn
rcStgPriority = _RcStgPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 7),
    _RcStgPriority_Type()
)
rcStgPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPriority.setStatus("current")
_RcStgTimeSinceTopologyChange_Type = TimeTicks
_RcStgTimeSinceTopologyChange_Object = MibTableColumn
rcStgTimeSinceTopologyChange = _RcStgTimeSinceTopologyChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 8),
    _RcStgTimeSinceTopologyChange_Type()
)
rcStgTimeSinceTopologyChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgTimeSinceTopologyChange.setStatus("current")
_RcStgTopChanges_Type = Counter32
_RcStgTopChanges_Object = MibTableColumn
rcStgTopChanges = _RcStgTopChanges_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 9),
    _RcStgTopChanges_Type()
)
rcStgTopChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgTopChanges.setStatus("current")
_RcStgDesignatedRoot_Type = BridgeId
_RcStgDesignatedRoot_Object = MibTableColumn
rcStgDesignatedRoot = _RcStgDesignatedRoot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 10),
    _RcStgDesignatedRoot_Type()
)
rcStgDesignatedRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgDesignatedRoot.setStatus("current")
_RcStgRootCost_Type = Integer32
_RcStgRootCost_Object = MibTableColumn
rcStgRootCost = _RcStgRootCost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 11),
    _RcStgRootCost_Type()
)
rcStgRootCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgRootCost.setStatus("current")
_RcStgRootPort_Type = InterfaceIndex
_RcStgRootPort_Object = MibTableColumn
rcStgRootPort = _RcStgRootPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 12),
    _RcStgRootPort_Type()
)
rcStgRootPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgRootPort.setStatus("current")
_RcStgMaxAge_Type = Timeout
_RcStgMaxAge_Object = MibTableColumn
rcStgMaxAge = _RcStgMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 13),
    _RcStgMaxAge_Type()
)
rcStgMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgMaxAge.setStatus("current")
_RcStgHelloTime_Type = Timeout
_RcStgHelloTime_Object = MibTableColumn
rcStgHelloTime = _RcStgHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 14),
    _RcStgHelloTime_Type()
)
rcStgHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgHelloTime.setStatus("current")
_RcStgHoldTime_Type = Integer32
_RcStgHoldTime_Object = MibTableColumn
rcStgHoldTime = _RcStgHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 15),
    _RcStgHoldTime_Type()
)
rcStgHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgHoldTime.setStatus("current")
_RcStgForwardDelay_Type = Timeout
_RcStgForwardDelay_Object = MibTableColumn
rcStgForwardDelay = _RcStgForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 16),
    _RcStgForwardDelay_Type()
)
rcStgForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgForwardDelay.setStatus("current")


class _RcStgBridgeMaxAge_Type(Timeout):
    """Custom type rcStgBridgeMaxAge based on Timeout"""
    defaultValue = 2000

    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 4000),
    )


_RcStgBridgeMaxAge_Type.__name__ = "Timeout"
_RcStgBridgeMaxAge_Object = MibTableColumn
rcStgBridgeMaxAge = _RcStgBridgeMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 17),
    _RcStgBridgeMaxAge_Type()
)
rcStgBridgeMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgBridgeMaxAge.setStatus("current")


class _RcStgBridgeHelloTime_Type(Timeout):
    """Custom type rcStgBridgeHelloTime based on Timeout"""
    defaultValue = 200

    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1000),
    )


_RcStgBridgeHelloTime_Type.__name__ = "Timeout"
_RcStgBridgeHelloTime_Object = MibTableColumn
rcStgBridgeHelloTime = _RcStgBridgeHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 18),
    _RcStgBridgeHelloTime_Type()
)
rcStgBridgeHelloTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgBridgeHelloTime.setStatus("current")


class _RcStgBridgeForwardDelay_Type(Timeout):
    """Custom type rcStgBridgeForwardDelay based on Timeout"""
    defaultValue = 1500

    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(400, 3000),
    )


_RcStgBridgeForwardDelay_Type.__name__ = "Timeout"
_RcStgBridgeForwardDelay_Object = MibTableColumn
rcStgBridgeForwardDelay = _RcStgBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 19),
    _RcStgBridgeForwardDelay_Type()
)
rcStgBridgeForwardDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgBridgeForwardDelay.setStatus("current")


class _RcStgEnableStp_Type(TruthValue):
    """Custom type rcStgEnableStp based on TruthValue"""


_RcStgEnableStp_Object = MibTableColumn
rcStgEnableStp = _RcStgEnableStp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 20),
    _RcStgEnableStp_Type()
)
rcStgEnableStp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgEnableStp.setStatus("current")


class _RcStgStpTrapEnable_Type(TruthValue):
    """Custom type rcStgStpTrapEnable based on TruthValue"""


_RcStgStpTrapEnable_Object = MibTableColumn
rcStgStpTrapEnable = _RcStgStpTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 21),
    _RcStgStpTrapEnable_Type()
)
rcStgStpTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgStpTrapEnable.setStatus("current")


class _RcStgPortMembers_Type(OctetString):
    """Custom type rcStgPortMembers based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 88),
    )


_RcStgPortMembers_Type.__name__ = "OctetString"
_RcStgPortMembers_Object = MibTableColumn
rcStgPortMembers = _RcStgPortMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 22),
    _RcStgPortMembers_Type()
)
rcStgPortMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPortMembers.setStatus("current")
_RcStgRowStatus_Type = RowStatus
_RcStgRowStatus_Object = MibTableColumn
rcStgRowStatus = _RcStgRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 23),
    _RcStgRowStatus_Type()
)
rcStgRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgRowStatus.setStatus("current")


class _RcStgPortStpState_Type(OctetString):
    """Custom type rcStgPortStpState based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(176, 176),
    )


_RcStgPortStpState_Type.__name__ = "OctetString"
_RcStgPortStpState_Object = MibTableColumn
rcStgPortStpState = _RcStgPortStpState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 24),
    _RcStgPortStpState_Type()
)
rcStgPortStpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortStpState.setStatus("current")


class _RcStgType_Type(Integer32):
    """Custom type rcStgType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              7)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("pbt", 3),
          ("spbm", 7),
          ("svlan", 2))
    )


_RcStgType_Type.__name__ = "Integer32"
_RcStgType_Object = MibTableColumn
rcStgType = _RcStgType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 25),
    _RcStgType_Type()
)
rcStgType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgType.setStatus("current")


class _RcStgNtStgEnable_Type(TruthValue):
    """Custom type rcStgNtStgEnable based on TruthValue"""


_RcStgNtStgEnable_Object = MibTableColumn
rcStgNtStgEnable = _RcStgNtStgEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 4, 1, 26),
    _RcStgNtStgEnable_Type()
)
rcStgNtStgEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgNtStgEnable.setStatus("current")
_RcStgPortTable_Object = MibTable
rcStgPortTable = _RcStgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5)
)
if mibBuilder.loadTexts:
    rcStgPortTable.setStatus("current")
_RcStgPortEntry_Object = MibTableRow
rcStgPortEntry = _RcStgPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1)
)
rcStgPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcStgPort"),
    (0, "RAPID-CITY", "rcStgPortStgId"),
)
if mibBuilder.loadTexts:
    rcStgPortEntry.setStatus("current")
_RcStgPort_Type = InterfaceIndex
_RcStgPort_Object = MibTableColumn
rcStgPort = _RcStgPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 1),
    _RcStgPort_Type()
)
rcStgPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPort.setStatus("current")


class _RcStgPortStgId_Type(Integer32):
    """Custom type rcStgPortStgId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_RcStgPortStgId_Type.__name__ = "Integer32"
_RcStgPortStgId_Object = MibTableColumn
rcStgPortStgId = _RcStgPortStgId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 2),
    _RcStgPortStgId_Type()
)
rcStgPortStgId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortStgId.setStatus("current")


class _RcStgPortPriority_Type(Integer32):
    """Custom type rcStgPortPriority based on Integer32"""
    defaultValue = 128

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcStgPortPriority_Type.__name__ = "Integer32"
_RcStgPortPriority_Object = MibTableColumn
rcStgPortPriority = _RcStgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 3),
    _RcStgPortPriority_Type()
)
rcStgPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPortPriority.setStatus("current")


class _RcStgPortState_Type(Integer32):
    """Custom type rcStgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("blocking", 2),
          ("broken", 6),
          ("disabled", 1),
          ("forwarding", 5),
          ("learning", 4),
          ("listening", 3))
    )


_RcStgPortState_Type.__name__ = "Integer32"
_RcStgPortState_Object = MibTableColumn
rcStgPortState = _RcStgPortState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 4),
    _RcStgPortState_Type()
)
rcStgPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortState.setStatus("current")


class _RcStgPortEnableStp_Type(TruthValue):
    """Custom type rcStgPortEnableStp based on TruthValue"""


_RcStgPortEnableStp_Object = MibTableColumn
rcStgPortEnableStp = _RcStgPortEnableStp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 5),
    _RcStgPortEnableStp_Type()
)
rcStgPortEnableStp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPortEnableStp.setStatus("current")


class _RcStgPortFastStart_Type(TruthValue):
    """Custom type rcStgPortFastStart based on TruthValue"""


_RcStgPortFastStart_Object = MibTableColumn
rcStgPortFastStart = _RcStgPortFastStart_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 6),
    _RcStgPortFastStart_Type()
)
rcStgPortFastStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPortFastStart.setStatus("current")


class _RcStgPortPathCost_Type(Integer32):
    """Custom type rcStgPortPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcStgPortPathCost_Type.__name__ = "Integer32"
_RcStgPortPathCost_Object = MibTableColumn
rcStgPortPathCost = _RcStgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 7),
    _RcStgPortPathCost_Type()
)
rcStgPortPathCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPortPathCost.setStatus("current")
_RcStgPortDesignatedRoot_Type = BridgeId
_RcStgPortDesignatedRoot_Object = MibTableColumn
rcStgPortDesignatedRoot = _RcStgPortDesignatedRoot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 8),
    _RcStgPortDesignatedRoot_Type()
)
rcStgPortDesignatedRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortDesignatedRoot.setStatus("current")
_RcStgPortDesignatedCost_Type = Integer32
_RcStgPortDesignatedCost_Object = MibTableColumn
rcStgPortDesignatedCost = _RcStgPortDesignatedCost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 9),
    _RcStgPortDesignatedCost_Type()
)
rcStgPortDesignatedCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortDesignatedCost.setStatus("current")
_RcStgPortDesignatedBridge_Type = BridgeId
_RcStgPortDesignatedBridge_Object = MibTableColumn
rcStgPortDesignatedBridge = _RcStgPortDesignatedBridge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 10),
    _RcStgPortDesignatedBridge_Type()
)
rcStgPortDesignatedBridge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortDesignatedBridge.setStatus("current")


class _RcStgPortDesignatedPort_Type(OctetString):
    """Custom type rcStgPortDesignatedPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RcStgPortDesignatedPort_Type.__name__ = "OctetString"
_RcStgPortDesignatedPort_Object = MibTableColumn
rcStgPortDesignatedPort = _RcStgPortDesignatedPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 11),
    _RcStgPortDesignatedPort_Type()
)
rcStgPortDesignatedPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortDesignatedPort.setStatus("current")
_RcStgPortForwardTransitions_Type = Counter32
_RcStgPortForwardTransitions_Object = MibTableColumn
rcStgPortForwardTransitions = _RcStgPortForwardTransitions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 12),
    _RcStgPortForwardTransitions_Type()
)
rcStgPortForwardTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortForwardTransitions.setStatus("current")
_RcStgPortInConfigBpdus_Type = Counter32
_RcStgPortInConfigBpdus_Object = MibTableColumn
rcStgPortInConfigBpdus = _RcStgPortInConfigBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 13),
    _RcStgPortInConfigBpdus_Type()
)
rcStgPortInConfigBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortInConfigBpdus.setStatus("current")
_RcStgPortInTcnBpdus_Type = Counter32
_RcStgPortInTcnBpdus_Object = MibTableColumn
rcStgPortInTcnBpdus = _RcStgPortInTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 14),
    _RcStgPortInTcnBpdus_Type()
)
rcStgPortInTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortInTcnBpdus.setStatus("current")
_RcStgPortInBadBpdus_Type = Counter32
_RcStgPortInBadBpdus_Object = MibTableColumn
rcStgPortInBadBpdus = _RcStgPortInBadBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 15),
    _RcStgPortInBadBpdus_Type()
)
rcStgPortInBadBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortInBadBpdus.setStatus("current")
_RcStgPortOutConfigBpdus_Type = Counter32
_RcStgPortOutConfigBpdus_Object = MibTableColumn
rcStgPortOutConfigBpdus = _RcStgPortOutConfigBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 16),
    _RcStgPortOutConfigBpdus_Type()
)
rcStgPortOutConfigBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortOutConfigBpdus.setStatus("current")
_RcStgPortOutTcnBpdus_Type = Counter32
_RcStgPortOutTcnBpdus_Object = MibTableColumn
rcStgPortOutTcnBpdus = _RcStgPortOutTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 17),
    _RcStgPortOutTcnBpdus_Type()
)
rcStgPortOutTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgPortOutTcnBpdus.setStatus("current")
_RcStgPortRowStatus_Type = RowStatus
_RcStgPortRowStatus_Object = MibTableColumn
rcStgPortRowStatus = _RcStgPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 18),
    _RcStgPortRowStatus_Type()
)
rcStgPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPortRowStatus.setStatus("current")


class _RcStgPortChangeDetection_Type(TruthValue):
    """Custom type rcStgPortChangeDetection based on TruthValue"""


_RcStgPortChangeDetection_Object = MibTableColumn
rcStgPortChangeDetection = _RcStgPortChangeDetection_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 19),
    _RcStgPortChangeDetection_Type()
)
rcStgPortChangeDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPortChangeDetection.setStatus("current")


class _RcStgPortPathCost32_Type(Integer32):
    """Custom type rcStgPortPathCost32 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200000000),
    )


_RcStgPortPathCost32_Type.__name__ = "Integer32"
_RcStgPortPathCost32_Object = MibTableColumn
rcStgPortPathCost32 = _RcStgPortPathCost32_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 5, 1, 20),
    _RcStgPortPathCost32_Type()
)
rcStgPortPathCost32.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcStgPortPathCost32.setStatus("current")
_RcStgNotAllowedPorts_Type = PortSet
_RcStgNotAllowedPorts_Object = MibScalar
rcStgNotAllowedPorts = _RcStgNotAllowedPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 13, 6),
    _RcStgNotAllowedPorts_Type()
)
rcStgNotAllowedPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcStgNotAllowedPorts.setStatus("current")
_RcBridge_ObjectIdentity = ObjectIdentity
rcBridge = _RcBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14)
)
_RcBridgeFdbTable_Object = MibTable
rcBridgeFdbTable = _RcBridgeFdbTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1)
)
if mibBuilder.loadTexts:
    rcBridgeFdbTable.setStatus("deprecated")
_RcBridgeFdbEntry_Object = MibTableRow
rcBridgeFdbEntry = _RcBridgeFdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1)
)
rcBridgeFdbEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeFdbStatus"),
    (0, "RAPID-CITY", "rcBridgeFdbAddress"),
    (0, "RAPID-CITY", "rcBridgeFdbVlanId"),
)
if mibBuilder.loadTexts:
    rcBridgeFdbEntry.setStatus("deprecated")


class _RcBridgeFdbStatus_Type(Integer32):
    """Custom type rcBridgeFdbStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("learned", 3),
          ("mgmt", 5),
          ("other", 1),
          ("self", 4))
    )


_RcBridgeFdbStatus_Type.__name__ = "Integer32"
_RcBridgeFdbStatus_Object = MibTableColumn
rcBridgeFdbStatus = _RcBridgeFdbStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1, 1),
    _RcBridgeFdbStatus_Type()
)
rcBridgeFdbStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbStatus.setStatus("deprecated")
_RcBridgeFdbAddress_Type = MacAddress
_RcBridgeFdbAddress_Object = MibTableColumn
rcBridgeFdbAddress = _RcBridgeFdbAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1, 2),
    _RcBridgeFdbAddress_Type()
)
rcBridgeFdbAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbAddress.setStatus("deprecated")
_RcBridgeFdbPort_Type = InterfaceIndex
_RcBridgeFdbPort_Object = MibTableColumn
rcBridgeFdbPort = _RcBridgeFdbPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1, 3),
    _RcBridgeFdbPort_Type()
)
rcBridgeFdbPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbPort.setStatus("deprecated")
_RcBridgeFdbMonitor_Type = TruthValue
_RcBridgeFdbMonitor_Object = MibTableColumn
rcBridgeFdbMonitor = _RcBridgeFdbMonitor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1, 4),
    _RcBridgeFdbMonitor_Type()
)
rcBridgeFdbMonitor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFdbMonitor.setStatus("deprecated")


class _RcBridgeFdbPriority_Type(Integer32):
    """Custom type rcBridgeFdbPriority based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 0))
    )


_RcBridgeFdbPriority_Type.__name__ = "Integer32"
_RcBridgeFdbPriority_Object = MibTableColumn
rcBridgeFdbPriority = _RcBridgeFdbPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1, 5),
    _RcBridgeFdbPriority_Type()
)
rcBridgeFdbPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFdbPriority.setStatus("deprecated")


class _RcBridgeFdbQosLevel_Type(Integer32):
    """Custom type rcBridgeFdbQosLevel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("level0", 0),
          ("level1", 1),
          ("level2", 2),
          ("level3", 3),
          ("level4", 4),
          ("level5", 5),
          ("level6", 6),
          ("level7", 7))
    )


_RcBridgeFdbQosLevel_Type.__name__ = "Integer32"
_RcBridgeFdbQosLevel_Object = MibTableColumn
rcBridgeFdbQosLevel = _RcBridgeFdbQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1, 6),
    _RcBridgeFdbQosLevel_Type()
)
rcBridgeFdbQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFdbQosLevel.setStatus("deprecated")
_RcBridgeFdbSmltRemote_Type = TruthValue
_RcBridgeFdbSmltRemote_Object = MibTableColumn
rcBridgeFdbSmltRemote = _RcBridgeFdbSmltRemote_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1, 7),
    _RcBridgeFdbSmltRemote_Type()
)
rcBridgeFdbSmltRemote.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbSmltRemote.setStatus("deprecated")


class _RcBridgeFdbVlanId_Type(Integer32):
    """Custom type rcBridgeFdbVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcBridgeFdbVlanId_Type.__name__ = "Integer32"
_RcBridgeFdbVlanId_Object = MibTableColumn
rcBridgeFdbVlanId = _RcBridgeFdbVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 1, 1, 8),
    _RcBridgeFdbVlanId_Type()
)
rcBridgeFdbVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbVlanId.setStatus("deprecated")
_RcBridgeFdbTblSize_Type = Integer32
_RcBridgeFdbTblSize_Object = MibScalar
rcBridgeFdbTblSize = _RcBridgeFdbTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 2),
    _RcBridgeFdbTblSize_Type()
)
rcBridgeFdbTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbTblSize.setStatus("current")
_RcBridgeStaticTable_Object = MibTable
rcBridgeStaticTable = _RcBridgeStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3)
)
if mibBuilder.loadTexts:
    rcBridgeStaticTable.setStatus("current")
_RcBridgeStaticEntry_Object = MibTableRow
rcBridgeStaticEntry = _RcBridgeStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3, 1)
)
rcBridgeStaticEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeStaticAddress"),
    (0, "RAPID-CITY", "rcBridgeStaticPort"),
    (0, "RAPID-CITY", "rcBridgeStaticVlanId"),
)
if mibBuilder.loadTexts:
    rcBridgeStaticEntry.setStatus("current")
_RcBridgeStaticAddress_Type = MacAddress
_RcBridgeStaticAddress_Object = MibTableColumn
rcBridgeStaticAddress = _RcBridgeStaticAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3, 1, 1),
    _RcBridgeStaticAddress_Type()
)
rcBridgeStaticAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticAddress.setStatus("current")
_RcBridgeStaticPort_Type = InterfaceIndex
_RcBridgeStaticPort_Object = MibTableColumn
rcBridgeStaticPort = _RcBridgeStaticPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3, 1, 2),
    _RcBridgeStaticPort_Type()
)
rcBridgeStaticPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticPort.setStatus("current")
_RcBridgeStaticMonitor_Type = TruthValue
_RcBridgeStaticMonitor_Object = MibTableColumn
rcBridgeStaticMonitor = _RcBridgeStaticMonitor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3, 1, 3),
    _RcBridgeStaticMonitor_Type()
)
rcBridgeStaticMonitor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticMonitor.setStatus("current")


class _RcBridgeStaticPriority_Type(Integer32):
    """Custom type rcBridgeStaticPriority based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 0))
    )


_RcBridgeStaticPriority_Type.__name__ = "Integer32"
_RcBridgeStaticPriority_Object = MibTableColumn
rcBridgeStaticPriority = _RcBridgeStaticPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3, 1, 4),
    _RcBridgeStaticPriority_Type()
)
rcBridgeStaticPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticPriority.setStatus("deprecated")


class _RcBridgeStaticStatus_Type(Integer32):
    """Custom type rcBridgeStaticStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("deleteOnReset", 4),
          ("deleteOnTimeout", 5),
          ("invalid", 2),
          ("other", 1),
          ("permanent", 3))
    )


_RcBridgeStaticStatus_Type.__name__ = "Integer32"
_RcBridgeStaticStatus_Object = MibTableColumn
rcBridgeStaticStatus = _RcBridgeStaticStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3, 1, 5),
    _RcBridgeStaticStatus_Type()
)
rcBridgeStaticStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticStatus.setStatus("current")


class _RcBridgeStaticQosLevel_Type(Integer32):
    """Custom type rcBridgeStaticQosLevel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("level0", 0),
          ("level1", 1),
          ("level2", 2),
          ("level3", 3),
          ("level4", 4),
          ("level5", 5),
          ("level6", 6),
          ("level7", 7))
    )


_RcBridgeStaticQosLevel_Type.__name__ = "Integer32"
_RcBridgeStaticQosLevel_Object = MibTableColumn
rcBridgeStaticQosLevel = _RcBridgeStaticQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3, 1, 6),
    _RcBridgeStaticQosLevel_Type()
)
rcBridgeStaticQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticQosLevel.setStatus("current")


class _RcBridgeStaticVlanId_Type(Integer32):
    """Custom type rcBridgeStaticVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcBridgeStaticVlanId_Type.__name__ = "Integer32"
_RcBridgeStaticVlanId_Object = MibTableColumn
rcBridgeStaticVlanId = _RcBridgeStaticVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 3, 1, 7),
    _RcBridgeStaticVlanId_Type()
)
rcBridgeStaticVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticVlanId.setStatus("current")
_RcBridgeStaticTblSize_Type = Integer32
_RcBridgeStaticTblSize_Object = MibScalar
rcBridgeStaticTblSize = _RcBridgeStaticTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 4),
    _RcBridgeStaticTblSize_Type()
)
rcBridgeStaticTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticTblSize.setStatus("current")
_RcBridgeFilterTable_Object = MibTable
rcBridgeFilterTable = _RcBridgeFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5)
)
if mibBuilder.loadTexts:
    rcBridgeFilterTable.setStatus("current")
_RcBridgeFilterEntry_Object = MibTableRow
rcBridgeFilterEntry = _RcBridgeFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1)
)
rcBridgeFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeFilterAddress"),
    (0, "RAPID-CITY", "rcBridgeFilterPort"),
    (0, "RAPID-CITY", "rcBridgeFilterVlanId"),
)
if mibBuilder.loadTexts:
    rcBridgeFilterEntry.setStatus("current")
_RcBridgeFilterAddress_Type = MacAddress
_RcBridgeFilterAddress_Object = MibTableColumn
rcBridgeFilterAddress = _RcBridgeFilterAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1, 1),
    _RcBridgeFilterAddress_Type()
)
rcBridgeFilterAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFilterAddress.setStatus("current")
_RcBridgeFilterPort_Type = InterfaceIndex
_RcBridgeFilterPort_Object = MibTableColumn
rcBridgeFilterPort = _RcBridgeFilterPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1, 2),
    _RcBridgeFilterPort_Type()
)
rcBridgeFilterPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFilterPort.setStatus("current")


class _RcBridgeFilterNotAllowedFrom_Type(OctetString):
    """Custom type rcBridgeFilterNotAllowedFrom based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(88, 88),
    )


_RcBridgeFilterNotAllowedFrom_Type.__name__ = "OctetString"
_RcBridgeFilterNotAllowedFrom_Object = MibTableColumn
rcBridgeFilterNotAllowedFrom = _RcBridgeFilterNotAllowedFrom_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1, 3),
    _RcBridgeFilterNotAllowedFrom_Type()
)
rcBridgeFilterNotAllowedFrom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFilterNotAllowedFrom.setStatus("obsolete")


class _RcBridgeFilterStatus_Type(Integer32):
    """Custom type rcBridgeFilterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("deleteOnReset", 4),
          ("deleteOnTimeout", 5),
          ("invalid", 2),
          ("other", 1),
          ("permanent", 3))
    )


_RcBridgeFilterStatus_Type.__name__ = "Integer32"
_RcBridgeFilterStatus_Object = MibTableColumn
rcBridgeFilterStatus = _RcBridgeFilterStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1, 4),
    _RcBridgeFilterStatus_Type()
)
rcBridgeFilterStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFilterStatus.setStatus("current")


class _RcBridgeFilterVlanId_Type(Integer32):
    """Custom type rcBridgeFilterVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcBridgeFilterVlanId_Type.__name__ = "Integer32"
_RcBridgeFilterVlanId_Object = MibTableColumn
rcBridgeFilterVlanId = _RcBridgeFilterVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1, 5),
    _RcBridgeFilterVlanId_Type()
)
rcBridgeFilterVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFilterVlanId.setStatus("current")


class _RcBridgeFilterPcap_Type(TruthValue):
    """Custom type rcBridgeFilterPcap based on TruthValue"""


_RcBridgeFilterPcap_Object = MibTableColumn
rcBridgeFilterPcap = _RcBridgeFilterPcap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1, 6),
    _RcBridgeFilterPcap_Type()
)
rcBridgeFilterPcap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFilterPcap.setStatus("current")


class _RcBridgeFilterDestDiscard_Type(OctetString):
    """Custom type rcBridgeFilterDestDiscard based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(88, 88),
    )


_RcBridgeFilterDestDiscard_Type.__name__ = "OctetString"
_RcBridgeFilterDestDiscard_Object = MibTableColumn
rcBridgeFilterDestDiscard = _RcBridgeFilterDestDiscard_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1, 7),
    _RcBridgeFilterDestDiscard_Type()
)
rcBridgeFilterDestDiscard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFilterDestDiscard.setStatus("current")


class _RcBridgeFilterSrcDiscard_Type(OctetString):
    """Custom type rcBridgeFilterSrcDiscard based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(88, 88),
    )


_RcBridgeFilterSrcDiscard_Type.__name__ = "OctetString"
_RcBridgeFilterSrcDiscard_Object = MibTableColumn
rcBridgeFilterSrcDiscard = _RcBridgeFilterSrcDiscard_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 5, 1, 8),
    _RcBridgeFilterSrcDiscard_Type()
)
rcBridgeFilterSrcDiscard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFilterSrcDiscard.setStatus("current")
_RcBridgeFilterTblSize_Type = Integer32
_RcBridgeFilterTblSize_Object = MibScalar
rcBridgeFilterTblSize = _RcBridgeFilterTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 6),
    _RcBridgeFilterTblSize_Type()
)
rcBridgeFilterTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFilterTblSize.setStatus("current")
_RcBridgeUnknownMacDiscardTable_Object = MibTable
rcBridgeUnknownMacDiscardTable = _RcBridgeUnknownMacDiscardTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7)
)
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardTable.setStatus("current")
_RcBridgeUnknownMacDiscardEntry_Object = MibTableRow
rcBridgeUnknownMacDiscardEntry = _RcBridgeUnknownMacDiscardEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1)
)
rcBridgeUnknownMacDiscardEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeUnknownMacDiscardIfIndex"),
)
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardEntry.setStatus("current")
_RcBridgeUnknownMacDiscardIfIndex_Type = InterfaceIndex
_RcBridgeUnknownMacDiscardIfIndex_Object = MibTableColumn
rcBridgeUnknownMacDiscardIfIndex = _RcBridgeUnknownMacDiscardIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 1),
    _RcBridgeUnknownMacDiscardIfIndex_Type()
)
rcBridgeUnknownMacDiscardIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardIfIndex.setStatus("current")
_RcBridgeUnknownMacDiscardAutoLearnEnable_Type = TruthValue
_RcBridgeUnknownMacDiscardAutoLearnEnable_Object = MibTableColumn
rcBridgeUnknownMacDiscardAutoLearnEnable = _RcBridgeUnknownMacDiscardAutoLearnEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 2),
    _RcBridgeUnknownMacDiscardAutoLearnEnable_Type()
)
rcBridgeUnknownMacDiscardAutoLearnEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardAutoLearnEnable.setStatus("current")


class _RcBridgeUnknownMacDiscardAutoLearnMode_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardAutoLearnMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("continuous", 2),
          ("oneShot", 1))
    )


_RcBridgeUnknownMacDiscardAutoLearnMode_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardAutoLearnMode_Object = MibTableColumn
rcBridgeUnknownMacDiscardAutoLearnMode = _RcBridgeUnknownMacDiscardAutoLearnMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 3),
    _RcBridgeUnknownMacDiscardAutoLearnMode_Type()
)
rcBridgeUnknownMacDiscardAutoLearnMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardAutoLearnMode.setStatus("current")


class _RcBridgeUnknownMacDiscardAutoLearnTableMode_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardAutoLearnTableMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lock", 2),
          ("unlock", 1))
    )


_RcBridgeUnknownMacDiscardAutoLearnTableMode_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardAutoLearnTableMode_Object = MibTableColumn
rcBridgeUnknownMacDiscardAutoLearnTableMode = _RcBridgeUnknownMacDiscardAutoLearnTableMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 4),
    _RcBridgeUnknownMacDiscardAutoLearnTableMode_Type()
)
rcBridgeUnknownMacDiscardAutoLearnTableMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardAutoLearnTableMode.setStatus("current")


class _RcBridgeUnknownMacDiscardLogViolations_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardLogViolations based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcBridgeUnknownMacDiscardLogViolations_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardLogViolations_Object = MibTableColumn
rcBridgeUnknownMacDiscardLogViolations = _RcBridgeUnknownMacDiscardLogViolations_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 5),
    _RcBridgeUnknownMacDiscardLogViolations_Type()
)
rcBridgeUnknownMacDiscardLogViolations.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardLogViolations.setStatus("current")


class _RcBridgeUnknownMacDiscardSendTrap_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardSendTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcBridgeUnknownMacDiscardSendTrap_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardSendTrap_Object = MibTableColumn
rcBridgeUnknownMacDiscardSendTrap = _RcBridgeUnknownMacDiscardSendTrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 6),
    _RcBridgeUnknownMacDiscardSendTrap_Type()
)
rcBridgeUnknownMacDiscardSendTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardSendTrap.setStatus("current")


class _RcBridgeUnknownMacDiscardDisablePort_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardDisablePort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RcBridgeUnknownMacDiscardDisablePort_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardDisablePort_Object = MibTableColumn
rcBridgeUnknownMacDiscardDisablePort = _RcBridgeUnknownMacDiscardDisablePort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 7),
    _RcBridgeUnknownMacDiscardDisablePort_Type()
)
rcBridgeUnknownMacDiscardDisablePort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardDisablePort.setStatus("current")


class _RcBridgeUnknownMacDiscardDefaultAutoLearnMonitor_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardDefaultAutoLearnMonitor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("monitor", 2),
          ("none", 1))
    )


_RcBridgeUnknownMacDiscardDefaultAutoLearnMonitor_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardDefaultAutoLearnMonitor_Object = MibTableColumn
rcBridgeUnknownMacDiscardDefaultAutoLearnMonitor = _RcBridgeUnknownMacDiscardDefaultAutoLearnMonitor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 8),
    _RcBridgeUnknownMacDiscardDefaultAutoLearnMonitor_Type()
)
rcBridgeUnknownMacDiscardDefaultAutoLearnMonitor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardDefaultAutoLearnMonitor.setStatus("deprecated")


class _RcBridgeUnknownMacDiscardDefaultAutoLearnPriority_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardDefaultAutoLearnPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 2),
          ("low", 1))
    )


_RcBridgeUnknownMacDiscardDefaultAutoLearnPriority_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardDefaultAutoLearnPriority_Object = MibTableColumn
rcBridgeUnknownMacDiscardDefaultAutoLearnPriority = _RcBridgeUnknownMacDiscardDefaultAutoLearnPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 9),
    _RcBridgeUnknownMacDiscardDefaultAutoLearnPriority_Type()
)
rcBridgeUnknownMacDiscardDefaultAutoLearnPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardDefaultAutoLearnPriority.setStatus("deprecated")


class _RcBridgeUnknownMacDiscardMacCountMax_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardMacCountMax based on Integer32"""
    defaultValue = 2048

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048),
    )


_RcBridgeUnknownMacDiscardMacCountMax_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardMacCountMax_Object = MibTableColumn
rcBridgeUnknownMacDiscardMacCountMax = _RcBridgeUnknownMacDiscardMacCountMax_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 10),
    _RcBridgeUnknownMacDiscardMacCountMax_Type()
)
rcBridgeUnknownMacDiscardMacCountMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardMacCountMax.setStatus("current")


class _RcBridgeUnknownMacDiscardMacCountCur_Type(Integer32):
    """Custom type rcBridgeUnknownMacDiscardMacCountCur based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048),
    )


_RcBridgeUnknownMacDiscardMacCountCur_Type.__name__ = "Integer32"
_RcBridgeUnknownMacDiscardMacCountCur_Object = MibTableColumn
rcBridgeUnknownMacDiscardMacCountCur = _RcBridgeUnknownMacDiscardMacCountCur_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 7, 1, 11),
    _RcBridgeUnknownMacDiscardMacCountCur_Type()
)
rcBridgeUnknownMacDiscardMacCountCur.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeUnknownMacDiscardMacCountCur.setStatus("current")
_RcBridgeManualEditTable_Object = MibTable
rcBridgeManualEditTable = _RcBridgeManualEditTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 8)
)
if mibBuilder.loadTexts:
    rcBridgeManualEditTable.setStatus("current")
_RcBridgeManualEditEntry_Object = MibTableRow
rcBridgeManualEditEntry = _RcBridgeManualEditEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 8, 1)
)
rcBridgeManualEditEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeManualEditAddress"),
)
if mibBuilder.loadTexts:
    rcBridgeManualEditEntry.setStatus("current")
_RcBridgeManualEditAddress_Type = MacAddress
_RcBridgeManualEditAddress_Object = MibTableColumn
rcBridgeManualEditAddress = _RcBridgeManualEditAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 8, 1, 1),
    _RcBridgeManualEditAddress_Type()
)
rcBridgeManualEditAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeManualEditAddress.setStatus("current")
_RcBridgeManualEditPorts_Type = PortSet
_RcBridgeManualEditPorts_Object = MibTableColumn
rcBridgeManualEditPorts = _RcBridgeManualEditPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 8, 1, 2),
    _RcBridgeManualEditPorts_Type()
)
rcBridgeManualEditPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeManualEditPorts.setStatus("current")
_RcBridgeManualEditMonitor_Type = TruthValue
_RcBridgeManualEditMonitor_Object = MibTableColumn
rcBridgeManualEditMonitor = _RcBridgeManualEditMonitor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 8, 1, 3),
    _RcBridgeManualEditMonitor_Type()
)
rcBridgeManualEditMonitor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeManualEditMonitor.setStatus("current")


class _RcBridgeManualEditPriority_Type(Integer32):
    """Custom type rcBridgeManualEditPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 2),
          ("low", 1))
    )


_RcBridgeManualEditPriority_Type.__name__ = "Integer32"
_RcBridgeManualEditPriority_Object = MibTableColumn
rcBridgeManualEditPriority = _RcBridgeManualEditPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 8, 1, 4),
    _RcBridgeManualEditPriority_Type()
)
rcBridgeManualEditPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeManualEditPriority.setStatus("current")


class _RcBridgeManualEditStatus_Type(Integer32):
    """Custom type rcBridgeManualEditStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("invalid", 2),
          ("other", 1))
    )


_RcBridgeManualEditStatus_Type.__name__ = "Integer32"
_RcBridgeManualEditStatus_Object = MibTableColumn
rcBridgeManualEditStatus = _RcBridgeManualEditStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 8, 1, 5),
    _RcBridgeManualEditStatus_Type()
)
rcBridgeManualEditStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeManualEditStatus.setStatus("current")
_RcBridgeManualEditTblSize_Type = Integer32
_RcBridgeManualEditTblSize_Object = MibScalar
rcBridgeManualEditTblSize = _RcBridgeManualEditTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 9),
    _RcBridgeManualEditTblSize_Type()
)
rcBridgeManualEditTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeManualEditTblSize.setStatus("current")
_RcBridgeAutoLearnTable_Object = MibTable
rcBridgeAutoLearnTable = _RcBridgeAutoLearnTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 10)
)
if mibBuilder.loadTexts:
    rcBridgeAutoLearnTable.setStatus("current")
_RcBridgeAutoLearnEntry_Object = MibTableRow
rcBridgeAutoLearnEntry = _RcBridgeAutoLearnEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 10, 1)
)
rcBridgeAutoLearnEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeAutoLearnAddress"),
)
if mibBuilder.loadTexts:
    rcBridgeAutoLearnEntry.setStatus("current")
_RcBridgeAutoLearnAddress_Type = MacAddress
_RcBridgeAutoLearnAddress_Object = MibTableColumn
rcBridgeAutoLearnAddress = _RcBridgeAutoLearnAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 10, 1, 1),
    _RcBridgeAutoLearnAddress_Type()
)
rcBridgeAutoLearnAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeAutoLearnAddress.setStatus("current")
_RcBridgeAutoLearnPort_Type = PortSet
_RcBridgeAutoLearnPort_Object = MibTableColumn
rcBridgeAutoLearnPort = _RcBridgeAutoLearnPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 10, 1, 2),
    _RcBridgeAutoLearnPort_Type()
)
rcBridgeAutoLearnPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeAutoLearnPort.setStatus("current")
_RcBridgeAutoLearnMonitor_Type = TruthValue
_RcBridgeAutoLearnMonitor_Object = MibTableColumn
rcBridgeAutoLearnMonitor = _RcBridgeAutoLearnMonitor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 10, 1, 3),
    _RcBridgeAutoLearnMonitor_Type()
)
rcBridgeAutoLearnMonitor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeAutoLearnMonitor.setStatus("current")


class _RcBridgeAutoLearnPriority_Type(Integer32):
    """Custom type rcBridgeAutoLearnPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 2),
          ("low", 1))
    )


_RcBridgeAutoLearnPriority_Type.__name__ = "Integer32"
_RcBridgeAutoLearnPriority_Object = MibTableColumn
rcBridgeAutoLearnPriority = _RcBridgeAutoLearnPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 10, 1, 4),
    _RcBridgeAutoLearnPriority_Type()
)
rcBridgeAutoLearnPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeAutoLearnPriority.setStatus("current")


class _RcBridgeAutoLearnAction_Type(Integer32):
    """Custom type rcBridgeAutoLearnAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("convertToManualEdit", 1),
          ("none", 0))
    )


_RcBridgeAutoLearnAction_Type.__name__ = "Integer32"
_RcBridgeAutoLearnAction_Object = MibTableColumn
rcBridgeAutoLearnAction = _RcBridgeAutoLearnAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 10, 1, 5),
    _RcBridgeAutoLearnAction_Type()
)
rcBridgeAutoLearnAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeAutoLearnAction.setStatus("current")
_RcBridgeAutoLearnTblSize_Type = Integer32
_RcBridgeAutoLearnTblSize_Object = MibScalar
rcBridgeAutoLearnTblSize = _RcBridgeAutoLearnTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 11),
    _RcBridgeAutoLearnTblSize_Type()
)
rcBridgeAutoLearnTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeAutoLearnTblSize.setStatus("current")
_RcBridgeStaticMulticastTable_Object = MibTable
rcBridgeStaticMulticastTable = _RcBridgeStaticMulticastTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 12)
)
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastTable.setStatus("deprecated")
_RcBridgeStaticMulticastEntry_Object = MibTableRow
rcBridgeStaticMulticastEntry = _RcBridgeStaticMulticastEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 12, 1)
)
rcBridgeStaticMulticastEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeStaticMulticastAddress"),
    (0, "RAPID-CITY", "rcBridgeStaticMulticastVlanId"),
)
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastEntry.setStatus("deprecated")
_RcBridgeStaticMulticastAddress_Type = MacAddress
_RcBridgeStaticMulticastAddress_Object = MibTableColumn
rcBridgeStaticMulticastAddress = _RcBridgeStaticMulticastAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 12, 1, 1),
    _RcBridgeStaticMulticastAddress_Type()
)
rcBridgeStaticMulticastAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastAddress.setStatus("deprecated")
_RcBridgeStaticMulticastForwardingPorts_Type = PortSet
_RcBridgeStaticMulticastForwardingPorts_Object = MibTableColumn
rcBridgeStaticMulticastForwardingPorts = _RcBridgeStaticMulticastForwardingPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 12, 1, 2),
    _RcBridgeStaticMulticastForwardingPorts_Type()
)
rcBridgeStaticMulticastForwardingPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastForwardingPorts.setStatus("deprecated")
_RcBridgeStaticMulticastMltIds_Type = IdList
_RcBridgeStaticMulticastMltIds_Object = MibTableColumn
rcBridgeStaticMulticastMltIds = _RcBridgeStaticMulticastMltIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 12, 1, 3),
    _RcBridgeStaticMulticastMltIds_Type()
)
rcBridgeStaticMulticastMltIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastMltIds.setStatus("deprecated")
_RcBridgeStaticMulticastRowStatus_Type = RowStatus
_RcBridgeStaticMulticastRowStatus_Object = MibTableColumn
rcBridgeStaticMulticastRowStatus = _RcBridgeStaticMulticastRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 12, 1, 4),
    _RcBridgeStaticMulticastRowStatus_Type()
)
rcBridgeStaticMulticastRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastRowStatus.setStatus("deprecated")


class _RcBridgeStaticMulticastVlanId_Type(Integer32):
    """Custom type rcBridgeStaticMulticastVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_RcBridgeStaticMulticastVlanId_Type.__name__ = "Integer32"
_RcBridgeStaticMulticastVlanId_Object = MibTableColumn
rcBridgeStaticMulticastVlanId = _RcBridgeStaticMulticastVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 12, 1, 5),
    _RcBridgeStaticMulticastVlanId_Type()
)
rcBridgeStaticMulticastVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastVlanId.setStatus("deprecated")
_RcBridgeStaticMulticastNumMltIds_Type = Integer32
_RcBridgeStaticMulticastNumMltIds_Object = MibTableColumn
rcBridgeStaticMulticastNumMltIds = _RcBridgeStaticMulticastNumMltIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 12, 1, 6),
    _RcBridgeStaticMulticastNumMltIds_Type()
)
rcBridgeStaticMulticastNumMltIds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastNumMltIds.setStatus("deprecated")
_RcBridgeStaticMulticastTblSize_Type = Integer32
_RcBridgeStaticMulticastTblSize_Object = MibScalar
rcBridgeStaticMulticastTblSize = _RcBridgeStaticMulticastTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 13),
    _RcBridgeStaticMulticastTblSize_Type()
)
rcBridgeStaticMulticastTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticMulticastTblSize.setStatus("deprecated")
_RcRateLimitTable_Object = MibTable
rcRateLimitTable = _RcRateLimitTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 14)
)
if mibBuilder.loadTexts:
    rcRateLimitTable.setStatus("current")
_RcRateLimitEntry_Object = MibTableRow
rcRateLimitEntry = _RcRateLimitEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 14, 1)
)
rcRateLimitEntry.setIndexNames(
    (0, "RAPID-CITY", "rcRateLimitIfIndex"),
    (0, "RAPID-CITY", "rcRateLimitIfTrafficType"),
)
if mibBuilder.loadTexts:
    rcRateLimitEntry.setStatus("current")
_RcRateLimitIfIndex_Type = InterfaceIndex
_RcRateLimitIfIndex_Object = MibTableColumn
rcRateLimitIfIndex = _RcRateLimitIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 14, 1, 1),
    _RcRateLimitIfIndex_Type()
)
rcRateLimitIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRateLimitIfIndex.setStatus("current")


class _RcRateLimitIfTrafficType_Type(Integer32):
    """Custom type rcRateLimitIfTrafficType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 2),
          ("multicast", 1))
    )


_RcRateLimitIfTrafficType_Type.__name__ = "Integer32"
_RcRateLimitIfTrafficType_Object = MibTableColumn
rcRateLimitIfTrafficType = _RcRateLimitIfTrafficType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 14, 1, 2),
    _RcRateLimitIfTrafficType_Type()
)
rcRateLimitIfTrafficType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRateLimitIfTrafficType.setStatus("current")


class _RcRateLimitIfAllowedRate_Type(Integer32):
    """Custom type rcRateLimitIfAllowedRate based on Integer32"""
    defaultValue = 25

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 25),
    )


_RcRateLimitIfAllowedRate_Type.__name__ = "Integer32"
_RcRateLimitIfAllowedRate_Object = MibTableColumn
rcRateLimitIfAllowedRate = _RcRateLimitIfAllowedRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 14, 1, 3),
    _RcRateLimitIfAllowedRate_Type()
)
rcRateLimitIfAllowedRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRateLimitIfAllowedRate.setStatus("current")


class _RcRateLimitIfEnable_Type(TruthValue):
    """Custom type rcRateLimitIfEnable based on TruthValue"""


_RcRateLimitIfEnable_Object = MibTableColumn
rcRateLimitIfEnable = _RcRateLimitIfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 14, 1, 4),
    _RcRateLimitIfEnable_Type()
)
rcRateLimitIfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRateLimitIfEnable.setStatus("current")
_RcRateLimitIfAllowedRatePps_Type = Integer32
_RcRateLimitIfAllowedRatePps_Object = MibTableColumn
rcRateLimitIfAllowedRatePps = _RcRateLimitIfAllowedRatePps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 14, 1, 5),
    _RcRateLimitIfAllowedRatePps_Type()
)
rcRateLimitIfAllowedRatePps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRateLimitIfAllowedRatePps.setStatus("current")


class _RcRateLimitIfAllowedRateKbps_Type(Integer32):
    """Custom type rcRateLimitIfAllowedRateKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(250, 2147483647),
    )


_RcRateLimitIfAllowedRateKbps_Type.__name__ = "Integer32"
_RcRateLimitIfAllowedRateKbps_Object = MibTableColumn
rcRateLimitIfAllowedRateKbps = _RcRateLimitIfAllowedRateKbps_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 14, 1, 6),
    _RcRateLimitIfAllowedRateKbps_Type()
)
rcRateLimitIfAllowedRateKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRateLimitIfAllowedRateKbps.setStatus("current")
_RcBridgeStaticMcastTable_Object = MibTable
rcBridgeStaticMcastTable = _RcBridgeStaticMcastTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 15)
)
if mibBuilder.loadTexts:
    rcBridgeStaticMcastTable.setStatus("current")
_RcBridgeStaticMcastEntry_Object = MibTableRow
rcBridgeStaticMcastEntry = _RcBridgeStaticMcastEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 15, 1)
)
rcBridgeStaticMcastEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeStaticMcastVlanId"),
    (0, "RAPID-CITY", "rcBridgeStaticMcastAddress"),
)
if mibBuilder.loadTexts:
    rcBridgeStaticMcastEntry.setStatus("current")


class _RcBridgeStaticMcastVlanId_Type(Integer32):
    """Custom type rcBridgeStaticMcastVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_RcBridgeStaticMcastVlanId_Type.__name__ = "Integer32"
_RcBridgeStaticMcastVlanId_Object = MibTableColumn
rcBridgeStaticMcastVlanId = _RcBridgeStaticMcastVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 15, 1, 1),
    _RcBridgeStaticMcastVlanId_Type()
)
rcBridgeStaticMcastVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticMcastVlanId.setStatus("current")
_RcBridgeStaticMcastAddress_Type = MacAddress
_RcBridgeStaticMcastAddress_Object = MibTableColumn
rcBridgeStaticMcastAddress = _RcBridgeStaticMcastAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 15, 1, 2),
    _RcBridgeStaticMcastAddress_Type()
)
rcBridgeStaticMcastAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticMcastAddress.setStatus("current")
_RcBridgeStaticMcastForwardingPorts_Type = PortSet
_RcBridgeStaticMcastForwardingPorts_Object = MibTableColumn
rcBridgeStaticMcastForwardingPorts = _RcBridgeStaticMcastForwardingPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 15, 1, 3),
    _RcBridgeStaticMcastForwardingPorts_Type()
)
rcBridgeStaticMcastForwardingPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticMcastForwardingPorts.setStatus("current")
_RcBridgeStaticMcastMltIds_Type = IdList
_RcBridgeStaticMcastMltIds_Object = MibTableColumn
rcBridgeStaticMcastMltIds = _RcBridgeStaticMcastMltIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 15, 1, 4),
    _RcBridgeStaticMcastMltIds_Type()
)
rcBridgeStaticMcastMltIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticMcastMltIds.setStatus("current")
_RcBridgeStaticMcastNumMltIds_Type = Integer32
_RcBridgeStaticMcastNumMltIds_Object = MibTableColumn
rcBridgeStaticMcastNumMltIds = _RcBridgeStaticMcastNumMltIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 15, 1, 5),
    _RcBridgeStaticMcastNumMltIds_Type()
)
rcBridgeStaticMcastNumMltIds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeStaticMcastNumMltIds.setStatus("current")
_RcBridgeStaticMcastRowStatus_Type = RowStatus
_RcBridgeStaticMcastRowStatus_Object = MibTableColumn
rcBridgeStaticMcastRowStatus = _RcBridgeStaticMcastRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 15, 1, 6),
    _RcBridgeStaticMcastRowStatus_Type()
)
rcBridgeStaticMcastRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeStaticMcastRowStatus.setStatus("current")
_RcBridgeFdbProtectTable_Object = MibTable
rcBridgeFdbProtectTable = _RcBridgeFdbProtectTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17)
)
if mibBuilder.loadTexts:
    rcBridgeFdbProtectTable.setStatus("current")
_RcBridgeFdbProtectEntry_Object = MibTableRow
rcBridgeFdbProtectEntry = _RcBridgeFdbProtectEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1)
)
rcBridgeFdbProtectEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeFdbProtectPortNum"),
)
if mibBuilder.loadTexts:
    rcBridgeFdbProtectEntry.setStatus("current")
_RcBridgeFdbProtectPortNum_Type = InterfaceIndex
_RcBridgeFdbProtectPortNum_Object = MibTableColumn
rcBridgeFdbProtectPortNum = _RcBridgeFdbProtectPortNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1, 1),
    _RcBridgeFdbProtectPortNum_Type()
)
rcBridgeFdbProtectPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbProtectPortNum.setStatus("current")


class _RcBridgeFdbProtectMaxMacCount_Type(Integer32):
    """Custom type rcBridgeFdbProtectMaxMacCount based on Integer32"""
    defaultValue = 1024

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_RcBridgeFdbProtectMaxMacCount_Type.__name__ = "Integer32"
_RcBridgeFdbProtectMaxMacCount_Object = MibTableColumn
rcBridgeFdbProtectMaxMacCount = _RcBridgeFdbProtectMaxMacCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1, 2),
    _RcBridgeFdbProtectMaxMacCount_Type()
)
rcBridgeFdbProtectMaxMacCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFdbProtectMaxMacCount.setStatus("current")


class _RcBridgeFdbProtectMinMacCount_Type(Integer32):
    """Custom type rcBridgeFdbProtectMinMacCount based on Integer32"""
    defaultValue = 512

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_RcBridgeFdbProtectMinMacCount_Type.__name__ = "Integer32"
_RcBridgeFdbProtectMinMacCount_Object = MibTableColumn
rcBridgeFdbProtectMinMacCount = _RcBridgeFdbProtectMinMacCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1, 3),
    _RcBridgeFdbProtectMinMacCount_Type()
)
rcBridgeFdbProtectMinMacCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFdbProtectMinMacCount.setStatus("current")
_RcBridgeFdbProtectEnable_Type = EnableValue
_RcBridgeFdbProtectEnable_Object = MibTableColumn
rcBridgeFdbProtectEnable = _RcBridgeFdbProtectEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1, 4),
    _RcBridgeFdbProtectEnable_Type()
)
rcBridgeFdbProtectEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFdbProtectEnable.setStatus("current")
_RcBridgeFdbProtectCurrentMacCount_Type = Integer32
_RcBridgeFdbProtectCurrentMacCount_Object = MibTableColumn
rcBridgeFdbProtectCurrentMacCount = _RcBridgeFdbProtectCurrentMacCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1, 5),
    _RcBridgeFdbProtectCurrentMacCount_Type()
)
rcBridgeFdbProtectCurrentMacCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbProtectCurrentMacCount.setStatus("current")
_RcBridgeFdbProtectMacLearning_Type = TruthValue
_RcBridgeFdbProtectMacLearning_Object = MibTableColumn
rcBridgeFdbProtectMacLearning = _RcBridgeFdbProtectMacLearning_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1, 6),
    _RcBridgeFdbProtectMacLearning_Type()
)
rcBridgeFdbProtectMacLearning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeFdbProtectMacLearning.setStatus("current")
_RcBridgeFdbProtectViolationLogTrap_Type = EnableValue
_RcBridgeFdbProtectViolationLogTrap_Object = MibTableColumn
rcBridgeFdbProtectViolationLogTrap = _RcBridgeFdbProtectViolationLogTrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1, 7),
    _RcBridgeFdbProtectViolationLogTrap_Type()
)
rcBridgeFdbProtectViolationLogTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFdbProtectViolationLogTrap.setStatus("current")
_RcBridgeFdbProtectViolationDownPort_Type = EnableValue
_RcBridgeFdbProtectViolationDownPort_Object = MibTableColumn
rcBridgeFdbProtectViolationDownPort = _RcBridgeFdbProtectViolationDownPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 17, 1, 8),
    _RcBridgeFdbProtectViolationDownPort_Type()
)
rcBridgeFdbProtectViolationDownPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeFdbProtectViolationDownPort.setStatus("current")
_RcBridgeNewFdbTable_Object = MibTable
rcBridgeNewFdbTable = _RcBridgeNewFdbTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18)
)
if mibBuilder.loadTexts:
    rcBridgeNewFdbTable.setStatus("current")
_RcBridgeNewFdbEntry_Object = MibTableRow
rcBridgeNewFdbEntry = _RcBridgeNewFdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18, 1)
)
rcBridgeNewFdbEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeNewFdbAddress"),
    (0, "RAPID-CITY", "rcBridgeNewFdbVlanId"),
)
if mibBuilder.loadTexts:
    rcBridgeNewFdbEntry.setStatus("current")


class _RcBridgeNewFdbStatus_Type(Integer32):
    """Custom type rcBridgeNewFdbStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("learned", 3),
          ("mgmt", 5),
          ("other", 1),
          ("self", 4))
    )


_RcBridgeNewFdbStatus_Type.__name__ = "Integer32"
_RcBridgeNewFdbStatus_Object = MibTableColumn
rcBridgeNewFdbStatus = _RcBridgeNewFdbStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18, 1, 1),
    _RcBridgeNewFdbStatus_Type()
)
rcBridgeNewFdbStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeNewFdbStatus.setStatus("current")
_RcBridgeNewFdbAddress_Type = MacAddress
_RcBridgeNewFdbAddress_Object = MibTableColumn
rcBridgeNewFdbAddress = _RcBridgeNewFdbAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18, 1, 2),
    _RcBridgeNewFdbAddress_Type()
)
rcBridgeNewFdbAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeNewFdbAddress.setStatus("current")
_RcBridgeNewFdbPort_Type = InterfaceIndex
_RcBridgeNewFdbPort_Object = MibTableColumn
rcBridgeNewFdbPort = _RcBridgeNewFdbPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18, 1, 3),
    _RcBridgeNewFdbPort_Type()
)
rcBridgeNewFdbPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeNewFdbPort.setStatus("current")
_RcBridgeNewFdbMonitor_Type = TruthValue
_RcBridgeNewFdbMonitor_Object = MibTableColumn
rcBridgeNewFdbMonitor = _RcBridgeNewFdbMonitor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18, 1, 4),
    _RcBridgeNewFdbMonitor_Type()
)
rcBridgeNewFdbMonitor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeNewFdbMonitor.setStatus("current")


class _RcBridgeNewFdbQosLevel_Type(Integer32):
    """Custom type rcBridgeNewFdbQosLevel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("level0", 0),
          ("level1", 1),
          ("level2", 2),
          ("level3", 3),
          ("level4", 4),
          ("level5", 5),
          ("level6", 6),
          ("level7", 7))
    )


_RcBridgeNewFdbQosLevel_Type.__name__ = "Integer32"
_RcBridgeNewFdbQosLevel_Object = MibTableColumn
rcBridgeNewFdbQosLevel = _RcBridgeNewFdbQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18, 1, 5),
    _RcBridgeNewFdbQosLevel_Type()
)
rcBridgeNewFdbQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBridgeNewFdbQosLevel.setStatus("current")
_RcBridgeNewFdbSmltRemote_Type = TruthValue
_RcBridgeNewFdbSmltRemote_Object = MibTableColumn
rcBridgeNewFdbSmltRemote = _RcBridgeNewFdbSmltRemote_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18, 1, 6),
    _RcBridgeNewFdbSmltRemote_Type()
)
rcBridgeNewFdbSmltRemote.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeNewFdbSmltRemote.setStatus("current")


class _RcBridgeNewFdbVlanId_Type(Integer32):
    """Custom type rcBridgeNewFdbVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcBridgeNewFdbVlanId_Type.__name__ = "Integer32"
_RcBridgeNewFdbVlanId_Object = MibTableColumn
rcBridgeNewFdbVlanId = _RcBridgeNewFdbVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 18, 1, 7),
    _RcBridgeNewFdbVlanId_Type()
)
rcBridgeNewFdbVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeNewFdbVlanId.setStatus("current")
_RcBridgeRemoteMacTable_Object = MibTable
rcBridgeRemoteMacTable = _RcBridgeRemoteMacTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21)
)
if mibBuilder.loadTexts:
    rcBridgeRemoteMacTable.setStatus("current")
_RcBridgeRemoteMacEntry_Object = MibTableRow
rcBridgeRemoteMacEntry = _RcBridgeRemoteMacEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1)
)
rcBridgeRemoteMacEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBridgeRemoteMacVlanId"),
    (0, "RAPID-CITY", "rcBridgeRemoteMacAddr"),
)
if mibBuilder.loadTexts:
    rcBridgeRemoteMacEntry.setStatus("current")


class _RcBridgeRemoteMacVlanId_Type(Integer32):
    """Custom type rcBridgeRemoteMacVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcBridgeRemoteMacVlanId_Type.__name__ = "Integer32"
_RcBridgeRemoteMacVlanId_Object = MibTableColumn
rcBridgeRemoteMacVlanId = _RcBridgeRemoteMacVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 1),
    _RcBridgeRemoteMacVlanId_Type()
)
rcBridgeRemoteMacVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacVlanId.setStatus("current")
_RcBridgeRemoteMacAddr_Type = MacAddress
_RcBridgeRemoteMacAddr_Object = MibTableColumn
rcBridgeRemoteMacAddr = _RcBridgeRemoteMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 2),
    _RcBridgeRemoteMacAddr_Type()
)
rcBridgeRemoteMacAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacAddr.setStatus("current")


class _RcBridgeRemoteMacStatus_Type(Integer32):
    """Custom type rcBridgeRemoteMacStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("learned", 3),
          ("mgmt", 5),
          ("other", 1),
          ("self", 4))
    )


_RcBridgeRemoteMacStatus_Type.__name__ = "Integer32"
_RcBridgeRemoteMacStatus_Object = MibTableColumn
rcBridgeRemoteMacStatus = _RcBridgeRemoteMacStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 3),
    _RcBridgeRemoteMacStatus_Type()
)
rcBridgeRemoteMacStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacStatus.setStatus("current")
_RcBridgeRemoteMacDestAddr_Type = MacAddress
_RcBridgeRemoteMacDestAddr_Object = MibTableColumn
rcBridgeRemoteMacDestAddr = _RcBridgeRemoteMacDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 4),
    _RcBridgeRemoteMacDestAddr_Type()
)
rcBridgeRemoteMacDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacDestAddr.setStatus("current")


class _RcBridgeRemoteMacPrimaryBVlanId_Type(Integer32):
    """Custom type rcBridgeRemoteMacPrimaryBVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcBridgeRemoteMacPrimaryBVlanId_Type.__name__ = "Integer32"
_RcBridgeRemoteMacPrimaryBVlanId_Object = MibTableColumn
rcBridgeRemoteMacPrimaryBVlanId = _RcBridgeRemoteMacPrimaryBVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 5),
    _RcBridgeRemoteMacPrimaryBVlanId_Type()
)
rcBridgeRemoteMacPrimaryBVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacPrimaryBVlanId.setStatus("current")


class _RcBridgeRemoteMacPrimaryDestSysName_Type(OctetString):
    """Custom type rcBridgeRemoteMacPrimaryDestSysName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcBridgeRemoteMacPrimaryDestSysName_Type.__name__ = "OctetString"
_RcBridgeRemoteMacPrimaryDestSysName_Object = MibTableColumn
rcBridgeRemoteMacPrimaryDestSysName = _RcBridgeRemoteMacPrimaryDestSysName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 6),
    _RcBridgeRemoteMacPrimaryDestSysName_Type()
)
rcBridgeRemoteMacPrimaryDestSysName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacPrimaryDestSysName.setStatus("current")
_RcBridgeRemoteMacPrimaryPort_Type = InterfaceIndex
_RcBridgeRemoteMacPrimaryPort_Object = MibTableColumn
rcBridgeRemoteMacPrimaryPort = _RcBridgeRemoteMacPrimaryPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 7),
    _RcBridgeRemoteMacPrimaryPort_Type()
)
rcBridgeRemoteMacPrimaryPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacPrimaryPort.setStatus("current")


class _RcBridgeRemoteMacSecondaryBVlanId_Type(Integer32):
    """Custom type rcBridgeRemoteMacSecondaryBVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcBridgeRemoteMacSecondaryBVlanId_Type.__name__ = "Integer32"
_RcBridgeRemoteMacSecondaryBVlanId_Object = MibTableColumn
rcBridgeRemoteMacSecondaryBVlanId = _RcBridgeRemoteMacSecondaryBVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 8),
    _RcBridgeRemoteMacSecondaryBVlanId_Type()
)
rcBridgeRemoteMacSecondaryBVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacSecondaryBVlanId.setStatus("current")


class _RcBridgeRemoteMacSecondaryDestSysName_Type(OctetString):
    """Custom type rcBridgeRemoteMacSecondaryDestSysName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcBridgeRemoteMacSecondaryDestSysName_Type.__name__ = "OctetString"
_RcBridgeRemoteMacSecondaryDestSysName_Object = MibTableColumn
rcBridgeRemoteMacSecondaryDestSysName = _RcBridgeRemoteMacSecondaryDestSysName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 9),
    _RcBridgeRemoteMacSecondaryDestSysName_Type()
)
rcBridgeRemoteMacSecondaryDestSysName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacSecondaryDestSysName.setStatus("current")
_RcBridgeRemoteMacSecondaryPort_Type = InterfaceIndex
_RcBridgeRemoteMacSecondaryPort_Object = MibTableColumn
rcBridgeRemoteMacSecondaryPort = _RcBridgeRemoteMacSecondaryPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 10),
    _RcBridgeRemoteMacSecondaryPort_Type()
)
rcBridgeRemoteMacSecondaryPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacSecondaryPort.setStatus("current")
_RcBridgeRemoteMacSmltRemote_Type = TruthValue
_RcBridgeRemoteMacSmltRemote_Object = MibTableColumn
rcBridgeRemoteMacSmltRemote = _RcBridgeRemoteMacSmltRemote_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 14, 21, 1, 11),
    _RcBridgeRemoteMacSmltRemote_Type()
)
rcBridgeRemoteMacSmltRemote.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBridgeRemoteMacSmltRemote.setStatus("current")
_RcBoot_ObjectIdentity = ObjectIdentity
rcBoot = _RcBoot_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 15)
)
_RcBootFlashSwVersion_Type = DisplayString
_RcBootFlashSwVersion_Object = MibScalar
rcBootFlashSwVersion = _RcBootFlashSwVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 15, 1),
    _RcBootFlashSwVersion_Type()
)
rcBootFlashSwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBootFlashSwVersion.setStatus("obsolete")
_RcBootPcmciaSwVersion_Type = DisplayString
_RcBootPcmciaSwVersion_Object = MibScalar
rcBootPcmciaSwVersion = _RcBootPcmciaSwVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 15, 2),
    _RcBootPcmciaSwVersion_Type()
)
rcBootPcmciaSwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBootPcmciaSwVersion.setStatus("obsolete")
_RcBootLastBootSource_Type = DisplayString
_RcBootLastBootSource_Object = MibScalar
rcBootLastBootSource = _RcBootLastBootSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 15, 3),
    _RcBootLastBootSource_Type()
)
rcBootLastBootSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBootLastBootSource.setStatus("obsolete")


class _RcBootPrimary_Type(Integer32):
    """Custom type rcBootPrimary based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flash", 1),
          ("net", 3),
          ("pcmcia", 2),
          ("skip", 4))
    )


_RcBootPrimary_Type.__name__ = "Integer32"
_RcBootPrimary_Object = MibScalar
rcBootPrimary = _RcBootPrimary_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 15, 4),
    _RcBootPrimary_Type()
)
rcBootPrimary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBootPrimary.setStatus("obsolete")


class _RcBootSecondary_Type(Integer32):
    """Custom type rcBootSecondary based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flash", 1),
          ("net", 3),
          ("pcmcia", 2),
          ("skip", 4))
    )


_RcBootSecondary_Type.__name__ = "Integer32"
_RcBootSecondary_Object = MibScalar
rcBootSecondary = _RcBootSecondary_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 15, 5),
    _RcBootSecondary_Type()
)
rcBootSecondary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBootSecondary.setStatus("obsolete")


class _RcBootTertiary_Type(Integer32):
    """Custom type rcBootTertiary based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flash", 1),
          ("net", 3),
          ("pcmcia", 2),
          ("skip", 4))
    )


_RcBootTertiary_Type.__name__ = "Integer32"
_RcBootTertiary_Object = MibScalar
rcBootTertiary = _RcBootTertiary_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 15, 6),
    _RcBootTertiary_Type()
)
rcBootTertiary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBootTertiary.setStatus("obsolete")
_RcDevice_ObjectIdentity = ObjectIdentity
rcDevice = _RcDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16)
)
_RcDeviceLastBootSource_Type = DisplayString
_RcDeviceLastBootSource_Object = MibScalar
rcDeviceLastBootSource = _RcDeviceLastBootSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 1),
    _RcDeviceLastBootSource_Type()
)
rcDeviceLastBootSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceLastBootSource.setStatus("deprecated")


class _RcDevicePrimarySource_Type(Integer32):
    """Custom type rcDevicePrimarySource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flash", 1),
          ("net", 3),
          ("pcmcia", 2),
          ("skip", 4))
    )


_RcDevicePrimarySource_Type.__name__ = "Integer32"
_RcDevicePrimarySource_Object = MibScalar
rcDevicePrimarySource = _RcDevicePrimarySource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 2),
    _RcDevicePrimarySource_Type()
)
rcDevicePrimarySource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDevicePrimarySource.setStatus("deprecated")


class _RcDevicePrimarySourceFileName_Type(DisplayString):
    """Custom type rcDevicePrimarySourceFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcDevicePrimarySourceFileName_Type.__name__ = "DisplayString"
_RcDevicePrimarySourceFileName_Object = MibScalar
rcDevicePrimarySourceFileName = _RcDevicePrimarySourceFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 3),
    _RcDevicePrimarySourceFileName_Type()
)
rcDevicePrimarySourceFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDevicePrimarySourceFileName.setStatus("deprecated")


class _RcDeviceSecondarySource_Type(Integer32):
    """Custom type rcDeviceSecondarySource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flash", 1),
          ("net", 3),
          ("pcmcia", 2),
          ("skip", 4))
    )


_RcDeviceSecondarySource_Type.__name__ = "Integer32"
_RcDeviceSecondarySource_Object = MibScalar
rcDeviceSecondarySource = _RcDeviceSecondarySource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 4),
    _RcDeviceSecondarySource_Type()
)
rcDeviceSecondarySource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDeviceSecondarySource.setStatus("deprecated")


class _RcDeviceSecondarySourceFileName_Type(DisplayString):
    """Custom type rcDeviceSecondarySourceFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcDeviceSecondarySourceFileName_Type.__name__ = "DisplayString"
_RcDeviceSecondarySourceFileName_Object = MibScalar
rcDeviceSecondarySourceFileName = _RcDeviceSecondarySourceFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 5),
    _RcDeviceSecondarySourceFileName_Type()
)
rcDeviceSecondarySourceFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDeviceSecondarySourceFileName.setStatus("deprecated")


class _RcDeviceTertiarySource_Type(Integer32):
    """Custom type rcDeviceTertiarySource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flash", 1),
          ("net", 3),
          ("pcmcia", 2),
          ("skip", 4))
    )


_RcDeviceTertiarySource_Type.__name__ = "Integer32"
_RcDeviceTertiarySource_Object = MibScalar
rcDeviceTertiarySource = _RcDeviceTertiarySource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 6),
    _RcDeviceTertiarySource_Type()
)
rcDeviceTertiarySource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDeviceTertiarySource.setStatus("deprecated")


class _RcDeviceTertiarySourceFileName_Type(DisplayString):
    """Custom type rcDeviceTertiarySourceFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcDeviceTertiarySourceFileName_Type.__name__ = "DisplayString"
_RcDeviceTertiarySourceFileName_Object = MibScalar
rcDeviceTertiarySourceFileName = _RcDeviceTertiarySourceFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 7),
    _RcDeviceTertiarySourceFileName_Type()
)
rcDeviceTertiarySourceFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDeviceTertiarySourceFileName.setStatus("deprecated")


class _RcDeviceConfigSource_Type(Integer32):
    """Custom type rcDeviceConfigSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              5)
        )
    )
    namedValues = NamedValues(
        *(("flash", 1),
          ("nvram", 5),
          ("pcmcia", 2))
    )


_RcDeviceConfigSource_Type.__name__ = "Integer32"
_RcDeviceConfigSource_Object = MibScalar
rcDeviceConfigSource = _RcDeviceConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 8),
    _RcDeviceConfigSource_Type()
)
rcDeviceConfigSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDeviceConfigSource.setStatus("deprecated")


class _RcDeviceConfigSourceFileName_Type(DisplayString):
    """Custom type rcDeviceConfigSourceFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcDeviceConfigSourceFileName_Type.__name__ = "DisplayString"
_RcDeviceConfigSourceFileName_Object = MibScalar
rcDeviceConfigSourceFileName = _RcDeviceConfigSourceFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 9),
    _RcDeviceConfigSourceFileName_Type()
)
rcDeviceConfigSourceFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDeviceConfigSourceFileName.setStatus("deprecated")
_RcDeviceFlashBytesUsed_Type = Integer32
_RcDeviceFlashBytesUsed_Object = MibScalar
rcDeviceFlashBytesUsed = _RcDeviceFlashBytesUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 10),
    _RcDeviceFlashBytesUsed_Type()
)
rcDeviceFlashBytesUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashBytesUsed.setStatus("deprecated")
_RcDeviceFlashBytesFree_Type = Integer32
_RcDeviceFlashBytesFree_Object = MibScalar
rcDeviceFlashBytesFree = _RcDeviceFlashBytesFree_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 11),
    _RcDeviceFlashBytesFree_Type()
)
rcDeviceFlashBytesFree.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashBytesFree.setStatus("deprecated")
_RcDevicePcmciaBytesUsed_Type = Integer32
_RcDevicePcmciaBytesUsed_Object = MibScalar
rcDevicePcmciaBytesUsed = _RcDevicePcmciaBytesUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 12),
    _RcDevicePcmciaBytesUsed_Type()
)
rcDevicePcmciaBytesUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaBytesUsed.setStatus("deprecated")
_RcDevicePcmciaBytesFree_Type = Integer32
_RcDevicePcmciaBytesFree_Object = MibScalar
rcDevicePcmciaBytesFree = _RcDevicePcmciaBytesFree_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 13),
    _RcDevicePcmciaBytesFree_Type()
)
rcDevicePcmciaBytesFree.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaBytesFree.setStatus("deprecated")


class _RcDeviceAction_Type(Integer32):
    """Custom type rcDeviceAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("formatFlash", 4),
          ("formatPcmcia", 5),
          ("none", 1),
          ("recoverFlash", 6),
          ("recoverPcmcia", 7),
          ("squeezeFlash", 2),
          ("squeezePcmcia", 3))
    )


_RcDeviceAction_Type.__name__ = "Integer32"
_RcDeviceAction_Object = MibScalar
rcDeviceAction = _RcDeviceAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 14),
    _RcDeviceAction_Type()
)
rcDeviceAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDeviceAction.setStatus("deprecated")


class _RcDeviceResult_Type(Integer32):
    """Custom type rcDeviceResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fail", 4),
          ("inProgress", 2),
          ("none", 1),
          ("success", 3))
    )


_RcDeviceResult_Type.__name__ = "Integer32"
_RcDeviceResult_Object = MibScalar
rcDeviceResult = _RcDeviceResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 15),
    _RcDeviceResult_Type()
)
rcDeviceResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceResult.setStatus("deprecated")


class _RcDeviceFlashNumFiles_Type(Integer32):
    """Custom type rcDeviceFlashNumFiles based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcDeviceFlashNumFiles_Type.__name__ = "Integer32"
_RcDeviceFlashNumFiles_Object = MibScalar
rcDeviceFlashNumFiles = _RcDeviceFlashNumFiles_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 16),
    _RcDeviceFlashNumFiles_Type()
)
rcDeviceFlashNumFiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashNumFiles.setStatus("deprecated")


class _RcDevicePcmciaNumFiles_Type(Integer32):
    """Custom type rcDevicePcmciaNumFiles based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcDevicePcmciaNumFiles_Type.__name__ = "Integer32"
_RcDevicePcmciaNumFiles_Object = MibScalar
rcDevicePcmciaNumFiles = _RcDevicePcmciaNumFiles_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 17),
    _RcDevicePcmciaNumFiles_Type()
)
rcDevicePcmciaNumFiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaNumFiles.setStatus("deprecated")
_RcDeviceFlashTable_Object = MibTable
rcDeviceFlashTable = _RcDeviceFlashTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25)
)
if mibBuilder.loadTexts:
    rcDeviceFlashTable.setStatus("deprecated")
_RcDeviceFlashEntry_Object = MibTableRow
rcDeviceFlashEntry = _RcDeviceFlashEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1)
)
rcDeviceFlashEntry.setIndexNames(
    (0, "RAPID-CITY", "rcDeviceFlashFileNum"),
)
if mibBuilder.loadTexts:
    rcDeviceFlashEntry.setStatus("deprecated")


class _RcDeviceFlashFileNum_Type(Integer32):
    """Custom type rcDeviceFlashFileNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcDeviceFlashFileNum_Type.__name__ = "Integer32"
_RcDeviceFlashFileNum_Object = MibTableColumn
rcDeviceFlashFileNum = _RcDeviceFlashFileNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 1),
    _RcDeviceFlashFileNum_Type()
)
rcDeviceFlashFileNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashFileNum.setStatus("deprecated")
_RcDeviceFlashFileName_Type = DisplayString
_RcDeviceFlashFileName_Object = MibTableColumn
rcDeviceFlashFileName = _RcDeviceFlashFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 2),
    _RcDeviceFlashFileName_Type()
)
rcDeviceFlashFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashFileName.setStatus("deprecated")
_RcDeviceFlashFileVersion_Type = DisplayString
_RcDeviceFlashFileVersion_Object = MibTableColumn
rcDeviceFlashFileVersion = _RcDeviceFlashFileVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 3),
    _RcDeviceFlashFileVersion_Type()
)
rcDeviceFlashFileVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashFileVersion.setStatus("deprecated")


class _RcDeviceFlashFileType_Type(Integer32):
    """Custom type rcDeviceFlashFileType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("config", 1),
          ("executable", 4),
          ("log", 2),
          ("trace", 3))
    )


_RcDeviceFlashFileType_Type.__name__ = "Integer32"
_RcDeviceFlashFileType_Object = MibTableColumn
rcDeviceFlashFileType = _RcDeviceFlashFileType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 4),
    _RcDeviceFlashFileType_Type()
)
rcDeviceFlashFileType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashFileType.setStatus("deprecated")


class _RcDeviceFlashFileMode_Type(Integer32):
    """Custom type rcDeviceFlashFileMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("compressed", 1),
          ("uncompressed", 2))
    )


_RcDeviceFlashFileMode_Type.__name__ = "Integer32"
_RcDeviceFlashFileMode_Object = MibTableColumn
rcDeviceFlashFileMode = _RcDeviceFlashFileMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 5),
    _RcDeviceFlashFileMode_Type()
)
rcDeviceFlashFileMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashFileMode.setStatus("deprecated")
_RcDeviceFlashFileSize_Type = Integer32
_RcDeviceFlashFileSize_Object = MibTableColumn
rcDeviceFlashFileSize = _RcDeviceFlashFileSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 6),
    _RcDeviceFlashFileSize_Type()
)
rcDeviceFlashFileSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashFileSize.setStatus("deprecated")
_RcDeviceFlashFileCrc_Type = Integer32
_RcDeviceFlashFileCrc_Object = MibTableColumn
rcDeviceFlashFileCrc = _RcDeviceFlashFileCrc_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 7),
    _RcDeviceFlashFileCrc_Type()
)
rcDeviceFlashFileCrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashFileCrc.setStatus("deprecated")


class _RcDeviceFlashFileStatus_Type(Integer32):
    """Custom type rcDeviceFlashFileStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("deleted", 2))
    )


_RcDeviceFlashFileStatus_Type.__name__ = "Integer32"
_RcDeviceFlashFileStatus_Object = MibTableColumn
rcDeviceFlashFileStatus = _RcDeviceFlashFileStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 8),
    _RcDeviceFlashFileStatus_Type()
)
rcDeviceFlashFileStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDeviceFlashFileStatus.setStatus("deprecated")
_RcDeviceFlashRowStatus_Type = RowStatus
_RcDeviceFlashRowStatus_Object = MibTableColumn
rcDeviceFlashRowStatus = _RcDeviceFlashRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 25, 1, 9),
    _RcDeviceFlashRowStatus_Type()
)
rcDeviceFlashRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDeviceFlashRowStatus.setStatus("deprecated")
_RcDevicePcmciaTable_Object = MibTable
rcDevicePcmciaTable = _RcDevicePcmciaTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26)
)
if mibBuilder.loadTexts:
    rcDevicePcmciaTable.setStatus("deprecated")
_RcDevicePcmciaEntry_Object = MibTableRow
rcDevicePcmciaEntry = _RcDevicePcmciaEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1)
)
rcDevicePcmciaEntry.setIndexNames(
    (0, "RAPID-CITY", "rcDevicePcmciaFileNum"),
)
if mibBuilder.loadTexts:
    rcDevicePcmciaEntry.setStatus("deprecated")


class _RcDevicePcmciaFileNum_Type(Integer32):
    """Custom type rcDevicePcmciaFileNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcDevicePcmciaFileNum_Type.__name__ = "Integer32"
_RcDevicePcmciaFileNum_Object = MibTableColumn
rcDevicePcmciaFileNum = _RcDevicePcmciaFileNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 1),
    _RcDevicePcmciaFileNum_Type()
)
rcDevicePcmciaFileNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaFileNum.setStatus("deprecated")
_RcDevicePcmciaFileName_Type = DisplayString
_RcDevicePcmciaFileName_Object = MibTableColumn
rcDevicePcmciaFileName = _RcDevicePcmciaFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 2),
    _RcDevicePcmciaFileName_Type()
)
rcDevicePcmciaFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaFileName.setStatus("deprecated")
_RcDevicePcmciaFileVersion_Type = DisplayString
_RcDevicePcmciaFileVersion_Object = MibTableColumn
rcDevicePcmciaFileVersion = _RcDevicePcmciaFileVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 3),
    _RcDevicePcmciaFileVersion_Type()
)
rcDevicePcmciaFileVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaFileVersion.setStatus("deprecated")


class _RcDevicePcmciaFileType_Type(Integer32):
    """Custom type rcDevicePcmciaFileType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("config", 1),
          ("executable", 4),
          ("log", 2),
          ("trace", 3))
    )


_RcDevicePcmciaFileType_Type.__name__ = "Integer32"
_RcDevicePcmciaFileType_Object = MibTableColumn
rcDevicePcmciaFileType = _RcDevicePcmciaFileType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 4),
    _RcDevicePcmciaFileType_Type()
)
rcDevicePcmciaFileType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaFileType.setStatus("deprecated")


class _RcDevicePcmciaFileMode_Type(Integer32):
    """Custom type rcDevicePcmciaFileMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("compressed", 1),
          ("uncompressed", 2))
    )


_RcDevicePcmciaFileMode_Type.__name__ = "Integer32"
_RcDevicePcmciaFileMode_Object = MibTableColumn
rcDevicePcmciaFileMode = _RcDevicePcmciaFileMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 5),
    _RcDevicePcmciaFileMode_Type()
)
rcDevicePcmciaFileMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaFileMode.setStatus("deprecated")
_RcDevicePcmciaFileSize_Type = Integer32
_RcDevicePcmciaFileSize_Object = MibTableColumn
rcDevicePcmciaFileSize = _RcDevicePcmciaFileSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 6),
    _RcDevicePcmciaFileSize_Type()
)
rcDevicePcmciaFileSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaFileSize.setStatus("deprecated")
_RcDevicePcmciaFileCrc_Type = Integer32
_RcDevicePcmciaFileCrc_Object = MibTableColumn
rcDevicePcmciaFileCrc = _RcDevicePcmciaFileCrc_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 7),
    _RcDevicePcmciaFileCrc_Type()
)
rcDevicePcmciaFileCrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaFileCrc.setStatus("deprecated")


class _RcDevicePcmciaFileStatus_Type(Integer32):
    """Custom type rcDevicePcmciaFileStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("deleted", 2))
    )


_RcDevicePcmciaFileStatus_Type.__name__ = "Integer32"
_RcDevicePcmciaFileStatus_Object = MibTableColumn
rcDevicePcmciaFileStatus = _RcDevicePcmciaFileStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 8),
    _RcDevicePcmciaFileStatus_Type()
)
rcDevicePcmciaFileStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDevicePcmciaFileStatus.setStatus("deprecated")
_RcDevicePcmciaRowStatus_Type = RowStatus
_RcDevicePcmciaRowStatus_Object = MibTableColumn
rcDevicePcmciaRowStatus = _RcDevicePcmciaRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 16, 26, 1, 9),
    _RcDevicePcmciaRowStatus_Type()
)
rcDevicePcmciaRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDevicePcmciaRowStatus.setStatus("deprecated")
_RcMlt_ObjectIdentity = ObjectIdentity
rcMlt = _RcMlt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17)
)
_RcMltNumMlts_Type = Integer32
_RcMltNumMlts_Object = MibScalar
rcMltNumMlts = _RcMltNumMlts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 1),
    _RcMltNumMlts_Type()
)
rcMltNumMlts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltNumMlts.setStatus("current")
_RcMltPotentialMembers_Type = PortSet
_RcMltPotentialMembers_Object = MibScalar
rcMltPotentialMembers = _RcMltPotentialMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 2),
    _RcMltPotentialMembers_Type()
)
rcMltPotentialMembers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltPotentialMembers.setStatus("current")
_RcMltIstSessionEnable_Type = EnableValue
_RcMltIstSessionEnable_Object = MibScalar
rcMltIstSessionEnable = _RcMltIstSessionEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 3),
    _RcMltIstSessionEnable_Type()
)
rcMltIstSessionEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltIstSessionEnable.setStatus("current")


class _RcMltIstSessionStatus_Type(Integer32):
    """Custom type rcMltIstSessionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcMltIstSessionStatus_Type.__name__ = "Integer32"
_RcMltIstSessionStatus_Object = MibScalar
rcMltIstSessionStatus = _RcMltIstSessionStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 4),
    _RcMltIstSessionStatus_Type()
)
rcMltIstSessionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltIstSessionStatus.setStatus("current")
_RcMltIstPeerIp_Type = IpAddress
_RcMltIstPeerIp_Object = MibScalar
rcMltIstPeerIp = _RcMltIstPeerIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 5),
    _RcMltIstPeerIp_Type()
)
rcMltIstPeerIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltIstPeerIp.setStatus("current")


class _RcMltIstVlanId_Type(Integer32):
    """Custom type rcMltIstVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_RcMltIstVlanId_Type.__name__ = "Integer32"
_RcMltIstVlanId_Object = MibScalar
rcMltIstVlanId = _RcMltIstVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 6),
    _RcMltIstVlanId_Type()
)
rcMltIstVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltIstVlanId.setStatus("current")
_RcMltTable_Object = MibTable
rcMltTable = _RcMltTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10)
)
if mibBuilder.loadTexts:
    rcMltTable.setStatus("current")
_RcMltEntry_Object = MibTableRow
rcMltEntry = _RcMltEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1)
)
rcMltEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMltId"),
)
if mibBuilder.loadTexts:
    rcMltEntry.setStatus("current")


class _RcMltId_Type(Integer32):
    """Custom type rcMltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_RcMltId_Type.__name__ = "Integer32"
_RcMltId_Object = MibTableColumn
rcMltId = _RcMltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 1),
    _RcMltId_Type()
)
rcMltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltId.setStatus("current")


class _RcMltName_Type(DisplayString):
    """Custom type rcMltName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcMltName_Type.__name__ = "DisplayString"
_RcMltName_Object = MibTableColumn
rcMltName = _RcMltName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 2),
    _RcMltName_Type()
)
rcMltName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltName.setStatus("current")
_RcMltPortMembers_Type = PortSet
_RcMltPortMembers_Object = MibTableColumn
rcMltPortMembers = _RcMltPortMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 3),
    _RcMltPortMembers_Type()
)
rcMltPortMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltPortMembers.setStatus("current")


class _RcMltPortType_Type(Integer32):
    """Custom type rcMltPortType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("access", 1),
          ("trunk", 2))
    )


_RcMltPortType_Type.__name__ = "Integer32"
_RcMltPortType_Object = MibTableColumn
rcMltPortType = _RcMltPortType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 4),
    _RcMltPortType_Type()
)
rcMltPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltPortType.setStatus("current")
_RcMltNumVlanIds_Type = Integer32
_RcMltNumVlanIds_Object = MibTableColumn
rcMltNumVlanIds = _RcMltNumVlanIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 5),
    _RcMltNumVlanIds_Type()
)
rcMltNumVlanIds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltNumVlanIds.setStatus("current")


class _RcMltVlanIds_Type(IdList):
    """Custom type rcMltVlanIds based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4096, 4096),
    )


_RcMltVlanIds_Type.__name__ = "IdList"
_RcMltVlanIds_Object = MibTableColumn
rcMltVlanIds = _RcMltVlanIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 6),
    _RcMltVlanIds_Type()
)
rcMltVlanIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltVlanIds.setStatus("deprecated")
_RcMltRowStatus_Type = RowStatus
_RcMltRowStatus_Object = MibTableColumn
rcMltRowStatus = _RcMltRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 7),
    _RcMltRowStatus_Type()
)
rcMltRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltRowStatus.setStatus("current")


class _RcMltEnable_Type(TruthValue):
    """Custom type rcMltEnable based on TruthValue"""


_RcMltEnable_Object = MibTableColumn
rcMltEnable = _RcMltEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 8),
    _RcMltEnable_Type()
)
rcMltEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltEnable.setStatus("current")


class _RcMltLoadBalance_Type(TruthValue):
    """Custom type rcMltLoadBalance based on TruthValue"""


_RcMltLoadBalance_Object = MibTableColumn
rcMltLoadBalance = _RcMltLoadBalance_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 9),
    _RcMltLoadBalance_Type()
)
rcMltLoadBalance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltLoadBalance.setStatus("current")


class _RcMltDistributionAlgorithm_Type(Integer32):
    """Custom type rcMltDistributionAlgorithm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("none", 1)
    )


_RcMltDistributionAlgorithm_Type.__name__ = "Integer32"
_RcMltDistributionAlgorithm_Object = MibTableColumn
rcMltDistributionAlgorithm = _RcMltDistributionAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 10),
    _RcMltDistributionAlgorithm_Type()
)
rcMltDistributionAlgorithm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltDistributionAlgorithm.setStatus("current")
_RcMltIfIndex_Type = InterfaceIndex
_RcMltIfIndex_Object = MibTableColumn
rcMltIfIndex = _RcMltIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 11),
    _RcMltIfIndex_Type()
)
rcMltIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltIfIndex.setStatus("current")


class _RcMltMltType_Type(Integer32):
    """Custom type rcMltMltType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("istMLT", 2),
          ("normalMLT", 1),
          ("splitMLT", 3))
    )


_RcMltMltType_Type.__name__ = "Integer32"
_RcMltMltType_Object = MibTableColumn
rcMltMltType = _RcMltMltType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 12),
    _RcMltMltType_Type()
)
rcMltMltType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltMltType.setStatus("current")


class _RcMltSmltId_Type(Integer32):
    """Custom type rcMltSmltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_RcMltSmltId_Type.__name__ = "Integer32"
_RcMltSmltId_Object = MibTableColumn
rcMltSmltId = _RcMltSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 13),
    _RcMltSmltId_Type()
)
rcMltSmltId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltSmltId.setStatus("current")


class _RcMltRunningType_Type(Integer32):
    """Custom type rcMltRunningType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("istMLT", 2),
          ("normalMLT", 1),
          ("splitMLT", 3))
    )


_RcMltRunningType_Type.__name__ = "Integer32"
_RcMltRunningType_Object = MibTableColumn
rcMltRunningType = _RcMltRunningType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 14),
    _RcMltRunningType_Type()
)
rcMltRunningType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltRunningType.setStatus("current")


class _RcMltSvlanPortType_Type(Integer32):
    """Custom type rcMltSvlanPortType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nni", 3),
          ("normal", 1),
          ("uni", 2))
    )


_RcMltSvlanPortType_Type.__name__ = "Integer32"
_RcMltSvlanPortType_Object = MibTableColumn
rcMltSvlanPortType = _RcMltSvlanPortType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 15),
    _RcMltSvlanPortType_Type()
)
rcMltSvlanPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltSvlanPortType.setStatus("current")


class _RcMltMulticastDistribution_Type(EnableValue):
    """Custom type rcMltMulticastDistribution based on EnableValue"""


_RcMltMulticastDistribution_Object = MibTableColumn
rcMltMulticastDistribution = _RcMltMulticastDistribution_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 16),
    _RcMltMulticastDistribution_Type()
)
rcMltMulticastDistribution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltMulticastDistribution.setStatus("current")


class _RcMltAggregatable_Type(EnableValue):
    """Custom type rcMltAggregatable based on EnableValue"""


_RcMltAggregatable_Object = MibTableColumn
rcMltAggregatable = _RcMltAggregatable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 18),
    _RcMltAggregatable_Type()
)
rcMltAggregatable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltAggregatable.setStatus("current")


class _RcMltClearLinkAggregate_Type(Integer32):
    """Custom type rcMltClearLinkAggregate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("none", 2))
    )


_RcMltClearLinkAggregate_Type.__name__ = "Integer32"
_RcMltClearLinkAggregate_Object = MibTableColumn
rcMltClearLinkAggregate = _RcMltClearLinkAggregate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 19),
    _RcMltClearLinkAggregate_Type()
)
rcMltClearLinkAggregate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltClearLinkAggregate.setStatus("current")


class _RcMltNtStgEnable_Type(TruthValue):
    """Custom type rcMltNtStgEnable based on TruthValue"""


_RcMltNtStgEnable_Object = MibTableColumn
rcMltNtStgEnable = _RcMltNtStgEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 20),
    _RcMltNtStgEnable_Type()
)
rcMltNtStgEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltNtStgEnable.setStatus("current")
_RcMltDesignatedPort_Type = InterfaceIndex
_RcMltDesignatedPort_Object = MibTableColumn
rcMltDesignatedPort = _RcMltDesignatedPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 21),
    _RcMltDesignatedPort_Type()
)
rcMltDesignatedPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltDesignatedPort.setStatus("current")
_RcMltAggOperState_Type = EnableValue
_RcMltAggOperState_Object = MibTableColumn
rcMltAggOperState = _RcMltAggOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 22),
    _RcMltAggOperState_Type()
)
rcMltAggOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltAggOperState.setStatus("current")
_RcMltAggTimeOfLastOperChange_Type = TimeTicks
_RcMltAggTimeOfLastOperChange_Object = MibTableColumn
rcMltAggTimeOfLastOperChange = _RcMltAggTimeOfLastOperChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 23),
    _RcMltAggTimeOfLastOperChange_Type()
)
rcMltAggTimeOfLastOperChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMltAggTimeOfLastOperChange.setStatus("current")


class _RcMltAggMinLink_Type(Integer32):
    """Custom type rcMltAggMinLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RcMltAggMinLink_Type.__name__ = "Integer32"
_RcMltAggMinLink_Object = MibTableColumn
rcMltAggMinLink = _RcMltAggMinLink_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 34),
    _RcMltAggMinLink_Type()
)
rcMltAggMinLink.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMltAggMinLink.setStatus("current")


class _RcMltVlanIdList_Type(OctetString):
    """Custom type rcMltVlanIdList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_RcMltVlanIdList_Type.__name__ = "OctetString"
_RcMltVlanIdList_Object = MibTableColumn
rcMltVlanIdList = _RcMltVlanIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 42),
    _RcMltVlanIdList_Type()
)
rcMltVlanIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltVlanIdList.setStatus("current")
_RcMltMcastDistribution_ObjectIdentity = ObjectIdentity
rcMltMcastDistribution = _RcMltMcastDistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 11)
)
_RcMltMcastDistributionEnable_Type = TruthValue
_RcMltMcastDistributionEnable_Object = MibScalar
rcMltMcastDistributionEnable = _RcMltMcastDistributionEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 1),
    _RcMltMcastDistributionEnable_Type()
)
rcMltMcastDistributionEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltMcastDistributionEnable.setStatus("current")
_RcMltMcastDistributionGrpMask_Type = IpAddress
_RcMltMcastDistributionGrpMask_Object = MibScalar
rcMltMcastDistributionGrpMask = _RcMltMcastDistributionGrpMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 2),
    _RcMltMcastDistributionGrpMask_Type()
)
rcMltMcastDistributionGrpMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltMcastDistributionGrpMask.setStatus("current")
_RcMltMcastDistributionSrcMask_Type = IpAddress
_RcMltMcastDistributionSrcMask_Object = MibScalar
rcMltMcastDistributionSrcMask = _RcMltMcastDistributionSrcMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 3),
    _RcMltMcastDistributionSrcMask_Type()
)
rcMltMcastDistributionSrcMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltMcastDistributionSrcMask.setStatus("current")
_RcMltMcastDistributionRedistributionEnable_Type = TruthValue
_RcMltMcastDistributionRedistributionEnable_Object = MibScalar
rcMltMcastDistributionRedistributionEnable = _RcMltMcastDistributionRedistributionEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 4),
    _RcMltMcastDistributionRedistributionEnable_Type()
)
rcMltMcastDistributionRedistributionEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltMcastDistributionRedistributionEnable.setStatus("current")
_RcSltPortTable_Object = MibTable
rcSltPortTable = _RcSltPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 12)
)
if mibBuilder.loadTexts:
    rcSltPortTable.setStatus("current")
_RcSltPortEntry_Object = MibTableRow
rcSltPortEntry = _RcSltPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1)
)
rcSltPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSltPortIfIndex"),
)
if mibBuilder.loadTexts:
    rcSltPortEntry.setStatus("current")
_RcSltPortIfIndex_Type = InterfaceIndex
_RcSltPortIfIndex_Object = MibTableColumn
rcSltPortIfIndex = _RcSltPortIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 1),
    _RcSltPortIfIndex_Type()
)
rcSltPortIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSltPortIfIndex.setStatus("current")


class _RcSltPortSmltId_Type(Integer32):
    """Custom type rcSltPortSmltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_RcSltPortSmltId_Type.__name__ = "Integer32"
_RcSltPortSmltId_Object = MibTableColumn
rcSltPortSmltId = _RcSltPortSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 2),
    _RcSltPortSmltId_Type()
)
rcSltPortSmltId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSltPortSmltId.setStatus("current")


class _RcSltPortOperType_Type(Integer32):
    """Custom type rcSltPortOperType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("smlt", 2))
    )


_RcSltPortOperType_Type.__name__ = "Integer32"
_RcSltPortOperType_Object = MibTableColumn
rcSltPortOperType = _RcSltPortOperType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 3),
    _RcSltPortOperType_Type()
)
rcSltPortOperType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSltPortOperType.setStatus("current")
_RcSltPortRowStatus_Type = RowStatus
_RcSltPortRowStatus_Object = MibTableColumn
rcSltPortRowStatus = _RcSltPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 4),
    _RcSltPortRowStatus_Type()
)
rcSltPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSltPortRowStatus.setStatus("current")
_RcMltNotificationObjects_ObjectIdentity = ObjectIdentity
rcMltNotificationObjects = _RcMltNotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 15)
)


class _RcMltAggTrapEvent_Type(Integer32):
    """Custom type rcMltAggTrapEvent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("localdown", 1),
          ("remotedown", 2),
          ("up", 3))
    )


_RcMltAggTrapEvent_Type.__name__ = "Integer32"
_RcMltAggTrapEvent_Object = MibScalar
rcMltAggTrapEvent = _RcMltAggTrapEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 15, 1),
    _RcMltAggTrapEvent_Type()
)
rcMltAggTrapEvent.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcMltAggTrapEvent.setStatus("current")


class _RcMltIstStpEnable_Type(EnableValue):
    """Custom type rcMltIstStpEnable based on EnableValue"""


_RcMltIstStpEnable_Object = MibScalar
rcMltIstStpEnable = _RcMltIstStpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 17, 16),
    _RcMltIstStpEnable_Type()
)
rcMltIstStpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMltIstStpEnable.setStatus("current")
_RcWeb_ObjectIdentity = ObjectIdentity
rcWeb = _RcWeb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18)
)


class _RcWebEnableServer_Type(TruthValue):
    """Custom type rcWebEnableServer based on TruthValue"""


_RcWebEnableServer_Object = MibScalar
rcWebEnableServer = _RcWebEnableServer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 1),
    _RcWebEnableServer_Type()
)
rcWebEnableServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebEnableServer.setStatus("current")


class _RcWebRWAUserName_Type(DisplayString):
    """Custom type rcWebRWAUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebRWAUserName_Type.__name__ = "DisplayString"
_RcWebRWAUserName_Object = MibScalar
rcWebRWAUserName = _RcWebRWAUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 2),
    _RcWebRWAUserName_Type()
)
rcWebRWAUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebRWAUserName.setStatus("current")


class _RcWebRWAPassword_Type(DisplayString):
    """Custom type rcWebRWAPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebRWAPassword_Type.__name__ = "DisplayString"
_RcWebRWAPassword_Object = MibScalar
rcWebRWAPassword = _RcWebRWAPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 3),
    _RcWebRWAPassword_Type()
)
rcWebRWAPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebRWAPassword.setStatus("current")


class _RcWebRWUserName_Type(DisplayString):
    """Custom type rcWebRWUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebRWUserName_Type.__name__ = "DisplayString"
_RcWebRWUserName_Object = MibScalar
rcWebRWUserName = _RcWebRWUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 4),
    _RcWebRWUserName_Type()
)
rcWebRWUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebRWUserName.setStatus("current")


class _RcWebRWPassword_Type(DisplayString):
    """Custom type rcWebRWPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebRWPassword_Type.__name__ = "DisplayString"
_RcWebRWPassword_Object = MibScalar
rcWebRWPassword = _RcWebRWPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 5),
    _RcWebRWPassword_Type()
)
rcWebRWPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebRWPassword.setStatus("current")


class _RcWebROUserName_Type(DisplayString):
    """Custom type rcWebROUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebROUserName_Type.__name__ = "DisplayString"
_RcWebROUserName_Object = MibScalar
rcWebROUserName = _RcWebROUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 6),
    _RcWebROUserName_Type()
)
rcWebROUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebROUserName.setStatus("current")


class _RcWebROPassword_Type(DisplayString):
    """Custom type rcWebROPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebROPassword_Type.__name__ = "DisplayString"
_RcWebROPassword_Object = MibScalar
rcWebROPassword = _RcWebROPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 7),
    _RcWebROPassword_Type()
)
rcWebROPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebROPassword.setStatus("current")
_RcWebLastChange_Type = TimeTicks
_RcWebLastChange_Object = MibScalar
rcWebLastChange = _RcWebLastChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 8),
    _RcWebLastChange_Type()
)
rcWebLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWebLastChange.setStatus("current")
_RcWebNumHits_Type = Integer32
_RcWebNumHits_Object = MibScalar
rcWebNumHits = _RcWebNumHits_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 9),
    _RcWebNumHits_Type()
)
rcWebNumHits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWebNumHits.setStatus("current")
_RcWebNumAccessChecks_Type = Integer32
_RcWebNumAccessChecks_Object = MibScalar
rcWebNumAccessChecks = _RcWebNumAccessChecks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 10),
    _RcWebNumAccessChecks_Type()
)
rcWebNumAccessChecks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWebNumAccessChecks.setStatus("current")
_RcWebNumAccessBlocks_Type = Integer32
_RcWebNumAccessBlocks_Object = MibScalar
rcWebNumAccessBlocks = _RcWebNumAccessBlocks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 11),
    _RcWebNumAccessBlocks_Type()
)
rcWebNumAccessBlocks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWebNumAccessBlocks.setStatus("current")
_RcWebNumRxErrors_Type = Integer32
_RcWebNumRxErrors_Object = MibScalar
rcWebNumRxErrors = _RcWebNumRxErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 12),
    _RcWebNumRxErrors_Type()
)
rcWebNumRxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWebNumRxErrors.setStatus("current")
_RcWebNumTxErrors_Type = Integer32
_RcWebNumTxErrors_Object = MibScalar
rcWebNumTxErrors = _RcWebNumTxErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 13),
    _RcWebNumTxErrors_Type()
)
rcWebNumTxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWebNumTxErrors.setStatus("current")
_RcWebNumSetRequest_Type = Integer32
_RcWebNumSetRequest_Object = MibScalar
rcWebNumSetRequest = _RcWebNumSetRequest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 14),
    _RcWebNumSetRequest_Type()
)
rcWebNumSetRequest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWebNumSetRequest.setStatus("current")


class _RcWebPrimaryHtmlSourceDir_Type(DisplayString):
    """Custom type rcWebPrimaryHtmlSourceDir based on DisplayString"""
    defaultValue = OctetString("local")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcWebPrimaryHtmlSourceDir_Type.__name__ = "DisplayString"
_RcWebPrimaryHtmlSourceDir_Object = MibScalar
rcWebPrimaryHtmlSourceDir = _RcWebPrimaryHtmlSourceDir_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 15),
    _RcWebPrimaryHtmlSourceDir_Type()
)
rcWebPrimaryHtmlSourceDir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebPrimaryHtmlSourceDir.setStatus("current")


class _RcWebSecondaryHtmlSourceDir_Type(DisplayString):
    """Custom type rcWebSecondaryHtmlSourceDir based on DisplayString"""
    defaultValue = OctetString("pcmcia")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcWebSecondaryHtmlSourceDir_Type.__name__ = "DisplayString"
_RcWebSecondaryHtmlSourceDir_Object = MibScalar
rcWebSecondaryHtmlSourceDir = _RcWebSecondaryHtmlSourceDir_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 16),
    _RcWebSecondaryHtmlSourceDir_Type()
)
rcWebSecondaryHtmlSourceDir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebSecondaryHtmlSourceDir.setStatus("current")


class _RcWebTertiaryHtmlSourceDir_Type(DisplayString):
    """Custom type rcWebTertiaryHtmlSourceDir based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcWebTertiaryHtmlSourceDir_Type.__name__ = "DisplayString"
_RcWebTertiaryHtmlSourceDir_Object = MibScalar
rcWebTertiaryHtmlSourceDir = _RcWebTertiaryHtmlSourceDir_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 17),
    _RcWebTertiaryHtmlSourceDir_Type()
)
rcWebTertiaryHtmlSourceDir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebTertiaryHtmlSourceDir.setStatus("current")


class _RcWebRWL3UserName_Type(DisplayString):
    """Custom type rcWebRWL3UserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebRWL3UserName_Type.__name__ = "DisplayString"
_RcWebRWL3UserName_Object = MibScalar
rcWebRWL3UserName = _RcWebRWL3UserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 18),
    _RcWebRWL3UserName_Type()
)
rcWebRWL3UserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebRWL3UserName.setStatus("current")


class _RcWebRWL3Password_Type(DisplayString):
    """Custom type rcWebRWL3Password based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebRWL3Password_Type.__name__ = "DisplayString"
_RcWebRWL3Password_Object = MibScalar
rcWebRWL3Password = _RcWebRWL3Password_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 19),
    _RcWebRWL3Password_Type()
)
rcWebRWL3Password.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebRWL3Password.setStatus("current")


class _RcWebRWL2UserName_Type(DisplayString):
    """Custom type rcWebRWL2UserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebRWL2UserName_Type.__name__ = "DisplayString"
_RcWebRWL2UserName_Object = MibScalar
rcWebRWL2UserName = _RcWebRWL2UserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 20),
    _RcWebRWL2UserName_Type()
)
rcWebRWL2UserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebRWL2UserName.setStatus("current")


class _RcWebRWL2Password_Type(DisplayString):
    """Custom type rcWebRWL2Password based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcWebRWL2Password_Type.__name__ = "DisplayString"
_RcWebRWL2Password_Object = MibScalar
rcWebRWL2Password = _RcWebRWL2Password_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 21),
    _RcWebRWL2Password_Type()
)
rcWebRWL2Password.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebRWL2Password.setStatus("current")


class _RcWebDefaultDisplayRows_Type(Integer32):
    """Custom type rcWebDefaultDisplayRows based on Integer32"""
    defaultValue = 48

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 100),
    )


_RcWebDefaultDisplayRows_Type.__name__ = "Integer32"
_RcWebDefaultDisplayRows_Object = MibScalar
rcWebDefaultDisplayRows = _RcWebDefaultDisplayRows_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 22),
    _RcWebDefaultDisplayRows_Type()
)
rcWebDefaultDisplayRows.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebDefaultDisplayRows.setStatus("current")
_RcWebLastHostAccessBlocked_Type = IpAddress
_RcWebLastHostAccessBlocked_Object = MibScalar
rcWebLastHostAccessBlocked = _RcWebLastHostAccessBlocked_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 23),
    _RcWebLastHostAccessBlocked_Type()
)
rcWebLastHostAccessBlocked.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWebLastHostAccessBlocked.setStatus("current")


class _RcWebHelpTftpSourceDir_Type(OctetString):
    """Custom type rcWebHelpTftpSourceDir based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_RcWebHelpTftpSourceDir_Type.__name__ = "OctetString"
_RcWebHelpTftpSourceDir_Object = MibScalar
rcWebHelpTftpSourceDir = _RcWebHelpTftpSourceDir_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 24),
    _RcWebHelpTftpSourceDir_Type()
)
rcWebHelpTftpSourceDir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebHelpTftpSourceDir.setStatus("current")


class _RcWebHttpPort_Type(Integer32):
    """Custom type rcWebHttpPort based on Integer32"""
    defaultValue = 80

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 49151),
    )


_RcWebHttpPort_Type.__name__ = "Integer32"
_RcWebHttpPort_Object = MibScalar
rcWebHttpPort = _RcWebHttpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 25),
    _RcWebHttpPort_Type()
)
rcWebHttpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebHttpPort.setStatus("current")


class _RcWebSecureOnly_Type(TruthValue):
    """Custom type rcWebSecureOnly based on TruthValue"""


_RcWebSecureOnly_Object = MibScalar
rcWebSecureOnly = _RcWebSecureOnly_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 26),
    _RcWebSecureOnly_Type()
)
rcWebSecureOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebSecureOnly.setStatus("current")


class _RcWebHttpsPort_Type(Integer32):
    """Custom type rcWebHttpsPort based on Integer32"""
    defaultValue = 443

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(443, 443),
        ValueRangeConstraint(1024, 49151),
    )


_RcWebHttpsPort_Type.__name__ = "Integer32"
_RcWebHttpsPort_Object = MibScalar
rcWebHttpsPort = _RcWebHttpsPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 18, 27),
    _RcWebHttpsPort_Type()
)
rcWebHttpsPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcWebHttpsPort.setStatus("current")
_RcCli_ObjectIdentity = ObjectIdentity
rcCli = _RcCli_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19)
)


class _RcCliRWAUserName_Type(DisplayString):
    """Custom type rcCliRWAUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcCliRWAUserName_Type.__name__ = "DisplayString"
_RcCliRWAUserName_Object = MibScalar
rcCliRWAUserName = _RcCliRWAUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 1),
    _RcCliRWAUserName_Type()
)
rcCliRWAUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWAUserName.setStatus("current")


class _RcCliRWAPassword_Type(DisplayString):
    """Custom type rcCliRWAPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcCliRWAPassword_Type.__name__ = "DisplayString"
_RcCliRWAPassword_Object = MibScalar
rcCliRWAPassword = _RcCliRWAPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 2),
    _RcCliRWAPassword_Type()
)
rcCliRWAPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWAPassword.setStatus("current")


class _RcCliRWUserName_Type(DisplayString):
    """Custom type rcCliRWUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcCliRWUserName_Type.__name__ = "DisplayString"
_RcCliRWUserName_Object = MibScalar
rcCliRWUserName = _RcCliRWUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 3),
    _RcCliRWUserName_Type()
)
rcCliRWUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWUserName.setStatus("current")


class _RcCliRWPassword_Type(DisplayString):
    """Custom type rcCliRWPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcCliRWPassword_Type.__name__ = "DisplayString"
_RcCliRWPassword_Object = MibScalar
rcCliRWPassword = _RcCliRWPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 4),
    _RcCliRWPassword_Type()
)
rcCliRWPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWPassword.setStatus("current")


class _RcCliRWL3UserName_Type(DisplayString):
    """Custom type rcCliRWL3UserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcCliRWL3UserName_Type.__name__ = "DisplayString"
_RcCliRWL3UserName_Object = MibScalar
rcCliRWL3UserName = _RcCliRWL3UserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 5),
    _RcCliRWL3UserName_Type()
)
rcCliRWL3UserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL3UserName.setStatus("current")


class _RcCliRWL3Password_Type(DisplayString):
    """Custom type rcCliRWL3Password based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcCliRWL3Password_Type.__name__ = "DisplayString"
_RcCliRWL3Password_Object = MibScalar
rcCliRWL3Password = _RcCliRWL3Password_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 6),
    _RcCliRWL3Password_Type()
)
rcCliRWL3Password.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL3Password.setStatus("current")


class _RcCliRWL2UserName_Type(DisplayString):
    """Custom type rcCliRWL2UserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcCliRWL2UserName_Type.__name__ = "DisplayString"
_RcCliRWL2UserName_Object = MibScalar
rcCliRWL2UserName = _RcCliRWL2UserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 7),
    _RcCliRWL2UserName_Type()
)
rcCliRWL2UserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL2UserName.setStatus("current")


class _RcCliRWL2Password_Type(DisplayString):
    """Custom type rcCliRWL2Password based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcCliRWL2Password_Type.__name__ = "DisplayString"
_RcCliRWL2Password_Object = MibScalar
rcCliRWL2Password = _RcCliRWL2Password_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 8),
    _RcCliRWL2Password_Type()
)
rcCliRWL2Password.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL2Password.setStatus("current")


class _RcCliROUserName_Type(DisplayString):
    """Custom type rcCliROUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcCliROUserName_Type.__name__ = "DisplayString"
_RcCliROUserName_Object = MibScalar
rcCliROUserName = _RcCliROUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 9),
    _RcCliROUserName_Type()
)
rcCliROUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliROUserName.setStatus("current")


class _RcCliROPassword_Type(DisplayString):
    """Custom type rcCliROPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcCliROPassword_Type.__name__ = "DisplayString"
_RcCliROPassword_Object = MibScalar
rcCliROPassword = _RcCliROPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 10),
    _RcCliROPassword_Type()
)
rcCliROPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliROPassword.setStatus("current")


class _RcCliMaxTelnetSessions_Type(Integer32):
    """Custom type rcCliMaxTelnetSessions based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RcCliMaxTelnetSessions_Type.__name__ = "Integer32"
_RcCliMaxTelnetSessions_Object = MibScalar
rcCliMaxTelnetSessions = _RcCliMaxTelnetSessions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 11),
    _RcCliMaxTelnetSessions_Type()
)
rcCliMaxTelnetSessions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliMaxTelnetSessions.setStatus("current")


class _RcCliMaxRloginSessions_Type(Integer32):
    """Custom type rcCliMaxRloginSessions based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RcCliMaxRloginSessions_Type.__name__ = "Integer32"
_RcCliMaxRloginSessions_Object = MibScalar
rcCliMaxRloginSessions = _RcCliMaxRloginSessions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 12),
    _RcCliMaxRloginSessions_Type()
)
rcCliMaxRloginSessions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliMaxRloginSessions.setStatus("current")


class _RcCliTimeout_Type(Integer32):
    """Custom type rcCliTimeout based on Integer32"""
    defaultValue = 900

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 65535),
    )


_RcCliTimeout_Type.__name__ = "Integer32"
_RcCliTimeout_Object = MibScalar
rcCliTimeout = _RcCliTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 13),
    _RcCliTimeout_Type()
)
rcCliTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliTimeout.setStatus("current")
_RcCliNumAccessViolations_Type = Integer32
_RcCliNumAccessViolations_Object = MibScalar
rcCliNumAccessViolations = _RcCliNumAccessViolations_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 14),
    _RcCliNumAccessViolations_Type()
)
rcCliNumAccessViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCliNumAccessViolations.setStatus("current")


class _RcCliRWL1UserName_Type(DisplayString):
    """Custom type rcCliRWL1UserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_RcCliRWL1UserName_Type.__name__ = "DisplayString"
_RcCliRWL1UserName_Object = MibScalar
rcCliRWL1UserName = _RcCliRWL1UserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 15),
    _RcCliRWL1UserName_Type()
)
rcCliRWL1UserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL1UserName.setStatus("current")


class _RcCliRWL1Password_Type(DisplayString):
    """Custom type rcCliRWL1Password based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcCliRWL1Password_Type.__name__ = "DisplayString"
_RcCliRWL1Password_Object = MibScalar
rcCliRWL1Password = _RcCliRWL1Password_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 16),
    _RcCliRWL1Password_Type()
)
rcCliRWL1Password.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL1Password.setStatus("current")


class _RcCliPasswordChange_Type(Integer32):
    """Custom type rcCliPasswordChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("commStrRo", 13),
          ("commStrRw", 14),
          ("commStrl1", 17),
          ("commStrl2", 16),
          ("commStrl3", 15),
          ("l1", 2),
          ("l2", 3),
          ("l3", 4),
          ("l4admin", 11),
          ("l4oper", 8),
          ("oper", 9),
          ("ro", 1),
          ("rw", 5),
          ("rwa", 6),
          ("slbadmin", 10),
          ("slboper", 7),
          ("ssladmin", 12),
          ("webPassWdRo", 18),
          ("webPassWdRwa", 19))
    )


_RcCliPasswordChange_Type.__name__ = "Integer32"
_RcCliPasswordChange_Object = MibScalar
rcCliPasswordChange = _RcCliPasswordChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 17),
    _RcCliPasswordChange_Type()
)
rcCliPasswordChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCliPasswordChange.setStatus("current")


class _RcCliPassChangeResult_Type(Integer32):
    """Custom type rcCliPassChangeResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("success", 1))
    )


_RcCliPassChangeResult_Type.__name__ = "Integer32"
_RcCliPassChangeResult_Object = MibScalar
rcCliPassChangeResult = _RcCliPassChangeResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 18),
    _RcCliPassChangeResult_Type()
)
rcCliPassChangeResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCliPassChangeResult.setStatus("current")


class _RcCliRWEnable_Type(TruthValue):
    """Custom type rcCliRWEnable based on TruthValue"""


_RcCliRWEnable_Object = MibScalar
rcCliRWEnable = _RcCliRWEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 19),
    _RcCliRWEnable_Type()
)
rcCliRWEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWEnable.setStatus("current")


class _RcCliRWL1Enable_Type(TruthValue):
    """Custom type rcCliRWL1Enable based on TruthValue"""


_RcCliRWL1Enable_Object = MibScalar
rcCliRWL1Enable = _RcCliRWL1Enable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 20),
    _RcCliRWL1Enable_Type()
)
rcCliRWL1Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL1Enable.setStatus("current")


class _RcCliRWL2Enable_Type(TruthValue):
    """Custom type rcCliRWL2Enable based on TruthValue"""


_RcCliRWL2Enable_Object = MibScalar
rcCliRWL2Enable = _RcCliRWL2Enable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 21),
    _RcCliRWL2Enable_Type()
)
rcCliRWL2Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL2Enable.setStatus("current")


class _RcCliRWL3Enable_Type(TruthValue):
    """Custom type rcCliRWL3Enable based on TruthValue"""


_RcCliRWL3Enable_Object = MibScalar
rcCliRWL3Enable = _RcCliRWL3Enable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 22),
    _RcCliRWL3Enable_Type()
)
rcCliRWL3Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliRWL3Enable.setStatus("current")


class _RcCliROEnable_Type(TruthValue):
    """Custom type rcCliROEnable based on TruthValue"""


_RcCliROEnable_Object = MibScalar
rcCliROEnable = _RcCliROEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 19, 23),
    _RcCliROEnable_Type()
)
rcCliROEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCliROEnable.setStatus("current")
_RcError_ObjectIdentity = ObjectIdentity
rcError = _RcError_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 20)
)
_RcErrorLevel_Type = Integer32
_RcErrorLevel_Object = MibScalar
rcErrorLevel = _RcErrorLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 20, 1),
    _RcErrorLevel_Type()
)
rcErrorLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcErrorLevel.setStatus("current")
_RcErrorCode_Type = Integer32
_RcErrorCode_Object = MibScalar
rcErrorCode = _RcErrorCode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 20, 2),
    _RcErrorCode_Type()
)
rcErrorCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcErrorCode.setStatus("current")
_RcErrorText_Type = DisplayString
_RcErrorText_Object = MibScalar
rcErrorText = _RcErrorText_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 20, 3),
    _RcErrorText_Type()
)
rcErrorText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcErrorText.setStatus("current")


class _RcErrorReturnCode_Type(Integer32):
    """Custom type rcErrorReturnCode based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              399,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420,
              421,
              422,
              423,
              424,
              425,
              426,
              427,
              428,
              429,
              430,
              431,
              432,
              433,
              434,
              435,
              436,
              437,
              438,
              439,
              440,
              441,
              442,
              443,
              444,
              445,
              446,
              447,
              448,
              449,
              450,
              451,
              452,
              453,
              454,
              455,
              456,
              457,
              458,
              459,
              460,
              461,
              462,
              463,
              464,
              465,
              466,
              467,
              468,
              469,
              470,
              471,
              472,
              473,
              474,
              475,
              476,
              477,
              478,
              479,
              480,
              481,
              482,
              483,
              484,
              485,
              486,
              487,
              488,
              489,
              490,
              491,
              492,
              493,
              494,
              495,
              496,
              497,
              498,
              499,
              500,
              501,
              502,
              503,
              504,
              505,
              506,
              507,
              508,
              509,
              510,
              511,
              512,
              513,
              514,
              515,
              516,
              517,
              518,
              519,
              520,
              521,
              522,
              523,
              524,
              525,
              526,
              527,
              528,
              529,
              530,
              531,
              532,
              533,
              534,
              535,
              536,
              537,
              538,
              539,
              540,
              541,
              542,
              543,
              544,
              545,
              546,
              547,
              548,
              549,
              550,
              551,
              552,
              553,
              554,
              555,
              556,
              557,
              558,
              559,
              560,
              561,
              562,
              563,
              564,
              565,
              566,
              567,
              568,
              569,
              570,
              571,
              572,
              573,
              574,
              575,
              576,
              577,
              578,
              579,
              580,
              581,
              582,
              583,
              584,
              585,
              586,
              587,
              588,
              589,
              590,
              591,
              592,
              593,
              594,
              595,
              596,
              597,
              598,
              599,
              600,
              601,
              602,
              603,
              604,
              605,
              606,
              607,
              608,
              609,
              610,
              611,
              612,
              613,
              614,
              615,
              616,
              617,
              618,
              619,
              620,
              621,
              622,
              623,
              624,
              625,
              626,
              627,
              628,
              629,
              630,
              900,
              901,
              902,
              903,
              904,
              905,
              906,
              1101,
              1102,
              1103,
              1104,
              1109,
              1110,
              1111,
              1112,
              1113,
              1115,
              1116,
              1117,
              1121,
              1122,
              1123,
              1126,
              1129,
              1130,
              1131,
              1132,
              1133,
              1134,
              1135,
              1138,
              1139,
              1145,
              1148,
              1149,
              1151,
              1152,
              1153,
              1154,
              1155,
              1156,
              1157,
              1160,
              1161,
              1172,
              1173,
              1174,
              1182,
              1183,
              1184,
              1187,
              1188,
              1189,
              1190,
              1191,
              1192,
              1193,
              1194,
              1195,
              1198,
              1201,
              1202,
              1203,
              1204,
              1205,
              1501,
              1502,
              1503,
              1504,
              1505,
              1506,
              1507,
              1508,
              1509,
              1510,
              1511,
              1512,
              1513,
              1514,
              1515,
              1516,
              1517,
              1518,
              1519,
              1520,
              1521,
              1522,
              1523,
              1524,
              1527,
              1528,
              1530,
              1531,
              1532,
              1533,
              1534,
              1537,
              1540,
              1541,
              1542,
              1543,
              1544,
              1545,
              1546,
              1547,
              1548,
              1603,
              1604,
              1801,
              1802,
              1803,
              1804,
              2301,
              2302,
              2303,
              2304,
              2305,
              2306,
              2307,
              2308,
              2309,
              2310,
              2311,
              2312,
              2313,
              2314,
              2315,
              2316,
              2317,
              2319,
              2320,
              2321,
              2322,
              2323,
              2324,
              2325,
              2326,
              2327,
              2328,
              2331,
              2332,
              2339,
              2401,
              2402,
              2403,
              2404,
              2405,
              2406,
              2407,
              2408,
              2409,
              2410,
              2411,
              2412,
              2413,
              2414,
              2415,
              2416,
              2417,
              2418,
              2419,
              2428,
              2429,
              2430,
              2431,
              2432,
              2433,
              2438,
              2482,
              2483,
              2501,
              2502,
              2503,
              2504,
              2505,
              2506,
              2507,
              2508,
              2509,
              2510,
              2511,
              2512,
              2513,
              2514,
              2515,
              2516,
              2517,
              2518,
              2519,
              2520,
              2521,
              2522,
              2523,
              2529,
              2538,
              2539,
              2540,
              2541,
              2542,
              2563,
              2601,
              2602,
              2603,
              2606,
              2607,
              2608,
              2701,
              2702,
              2703,
              2704,
              2705,
              2706,
              2707,
              2708,
              2709,
              2710,
              2801,
              2802,
              2901,
              2902,
              3101,
              3102,
              3103,
              3104,
              3105,
              3106,
              3107,
              3108,
              3109,
              3110,
              3111,
              3112,
              3113,
              3114,
              3115,
              3116,
              3117,
              3118,
              3119,
              3120,
              3121,
              3401,
              3402,
              3405,
              3901,
              3902,
              3903,
              3904,
              4101,
              4102,
              4103,
              4104,
              4105,
              4106,
              4107,
              4112,
              4801,
              4802,
              4803,
              4804,
              4805,
              4806,
              4807,
              4808,
              4809,
              4810,
              4811,
              4812,
              4813,
              4814,
              4817,
              4818,
              4901,
              4902,
              4903,
              4904,
              4905,
              4906,
              5101,
              5102,
              5103,
              5201,
              5202,
              5203,
              5204,
              5205,
              5206,
              5207,
              5208,
              5209,
              5210,
              5211,
              5212,
              5213,
              5214,
              5215,
              5216,
              5217,
              5218,
              5219,
              5220,
              5221,
              5222,
              5223,
              5224,
              5225,
              5226,
              5227,
              5228,
              5229,
              5230,
              5231,
              5232,
              5233,
              5234,
              5235,
              5236,
              5237,
              5238,
              5239,
              5240,
              5241,
              5242,
              5243,
              5244,
              5245,
              5246,
              5247,
              5248,
              5249,
              5250,
              5251,
              5252,
              5253,
              5254,
              5255,
              5256,
              5257,
              5258,
              5259,
              5260,
              5261,
              5262,
              5263,
              5264,
              5265,
              5266,
              5267,
              5268,
              5269,
              5270,
              5271,
              5272,
              5273,
              5274,
              5275,
              5276,
              5277,
              5278,
              5279,
              5280,
              5281,
              5282,
              5283,
              5284,
              5288,
              5289,
              5290,
              5291,
              5292,
              5293,
              5294,
              5295,
              5296,
              5297,
              5298,
              5299,
              5301,
              5501,
              5502,
              5503,
              5504,
              5505,
              5506,
              5507,
              5508,
              5509,
              5510,
              5601,
              5602,
              5603,
              5604,
              5703,
              6109,
              6501,
              6502,
              6503,
              6504,
              6505,
              6506,
              6507,
              6508,
              6509,
              6510,
              6511,
              6512,
              6513,
              6514,
              6515,
              6516,
              6517,
              6526,
              6527,
              6711,
              6801,
              6802,
              6803,
              6804,
              6805,
              6806,
              6807,
              6808,
              6809,
              6810,
              6811,
              7401,
              7402,
              7403,
              7404,
              7405,
              7406,
              7407,
              7408,
              7409,
              7410,
              7411,
              7412,
              7413,
              7414,
              7415,
              7416,
              7417,
              7418,
              7419,
              7420,
              7421,
              7422,
              7423,
              7424,
              7425,
              7426,
              7427,
              7428,
              7429,
              7430,
              7431,
              7432,
              7433,
              7434,
              7435,
              7436,
              7437,
              7438,
              7439,
              7440,
              7441,
              7442,
              7443,
              7444,
              7445,
              7446,
              7447,
              7448,
              7449,
              7450,
              7451,
              7452,
              7453,
              7454,
              7455,
              7456,
              7457,
              7458,
              7459,
              7460,
              7461,
              7462,
              7463,
              7464,
              7465,
              7466,
              7467,
              7468,
              7469,
              7470,
              7471,
              7472,
              7473,
              7474,
              7475,
              7476,
              7477,
              7478,
              7479,
              7480,
              7481,
              7482,
              7483,
              7484,
              7485,
              7486,
              7487,
              7488,
              7489,
              7490,
              7491,
              7492,
              7493,
              7494,
              7495,
              7496,
              7497,
              7498,
              7499,
              7501,
              7502,
              7503,
              7504,
              7505,
              7506,
              7510,
              7601,
              7602,
              7603,
              7604,
              7605,
              7606,
              7607,
              7608,
              7609,
              7610,
              7611,
              7612,
              7613,
              7614,
              7615,
              7616,
              7617,
              7618,
              7619,
              7620,
              7621,
              7622,
              7623,
              7624,
              7625,
              7626,
              7627,
              7628,
              7629,
              7630,
              7631,
              7632,
              7633,
              7634,
              7635,
              7636,
              7637,
              7638,
              7639,
              7640,
              7641,
              7642,
              7643,
              7644,
              7645,
              7646,
              7647,
              7648,
              7649,
              7650,
              7651,
              7652,
              7653,
              7658,
              7678,
              7701,
              7702,
              7703,
              7704,
              7705,
              7706,
              7707,
              7708,
              7709,
              7710,
              7711,
              7712,
              7713,
              7714,
              7715,
              7716,
              7717,
              7718,
              7719,
              7720,
              7721,
              7768,
              7769,
              7770,
              7771,
              7802,
              7803,
              7804,
              7805,
              7806,
              7807,
              7808,
              7809,
              7810,
              7811,
              7812,
              8101,
              8102,
              8103,
              8104,
              8105,
              8106,
              8107,
              8108,
              8109,
              8110,
              8111,
              8112,
              8113,
              8114,
              8115,
              8116,
              8117,
              8118,
              8201,
              8202,
              8203,
              8204,
              8205,
              8207,
              8209,
              8210,
              8211,
              8212,
              8213,
              8301,
              8302,
              8303,
              8304,
              8305,
              8306,
              8307,
              8308,
              8309,
              8310,
              8311,
              8312,
              8313,
              8314,
              8315,
              8316,
              8317,
              8318,
              8319,
              8320,
              8321,
              8322,
              8323,
              8324,
              8325,
              8326,
              8327,
              8328,
              8329,
              8330,
              8331,
              8332,
              8333,
              8334,
              8335,
              8336,
              8337,
              8338,
              8339,
              8340,
              8341,
              8342,
              8343,
              8344,
              8345,
              8346,
              8347,
              8348,
              8349,
              8350,
              8351,
              8352,
              8353,
              8354,
              8355,
              8356,
              8357,
              8358,
              8359,
              8360,
              8361,
              8362,
              8363,
              8364,
              8365,
              8366,
              8367,
              8368,
              8369,
              8370,
              8371,
              8372,
              8373,
              8374,
              8375,
              8376,
              8377,
              8378,
              8379,
              8380,
              8381,
              8401,
              8402,
              8403,
              8404,
              8405,
              8406,
              8407,
              8408,
              8409,
              8410,
              8411,
              8412,
              8413,
              8414,
              8415,
              8416,
              8417,
              8418,
              8419,
              8420,
              8421,
              8422,
              8423,
              8424,
              8425,
              8426,
              8427,
              8428,
              8429,
              8431,
              8501,
              8502,
              8503,
              8504,
              8505,
              8506,
              8507,
              8508,
              8511,
              8531,
              8535,
              8536,
              8537,
              8538,
              8539,
              8540,
              8541,
              8542,
              8543,
              8552,
              8554,
              8562,
              8563,
              8564,
              8565,
              8567,
              8574,
              8577,
              8582,
              8583,
              8586,
              8642,
              8646,
              8647,
              8648,
              8649,
              8670,
              8671,
              8687,
              8688,
              8689,
              8690,
              8691,
              8692,
              8693,
              8697,
              8698,
              8699,
              8720,
              8721,
              8722,
              8723,
              8726,
              8748,
              8754,
              8755,
              8901,
              8902,
              8903,
              8904,
              8905,
              8906,
              8907,
              8908,
              8909,
              8910,
              8911,
              8912,
              8913,
              8914,
              8915,
              8916,
              8917,
              8918,
              8919,
              8920,
              8921,
              8922,
              8923,
              8924,
              8925,
              8926,
              8927,
              8928,
              8931,
              8932,
              8933,
              8934,
              8935,
              8936,
              8937,
              9101,
              9102,
              9103,
              9104,
              9105,
              9106,
              9107,
              9110,
              9112,
              9301,
              9302,
              9303,
              9304,
              9305,
              9306,
              9307,
              9308,
              9309,
              9310,
              9311,
              9312,
              9313,
              9314,
              9315,
              9316,
              9317,
              9318,
              9319,
              9320,
              9322,
              9323,
              9324,
              9325,
              9326,
              9327,
              9328,
              9329,
              9330,
              9331,
              9332,
              9333,
              9334,
              9335,
              9336,
              9337,
              9345,
              9362,
              9363,
              9364,
              9365,
              9368,
              9369,
              9370,
              9371,
              9372,
              9373,
              9374,
              9375,
              9376,
              9377,
              9378,
              9380,
              9381,
              9382,
              9394,
              9395,
              9396,
              9397,
              9401,
              9402,
              9403,
              9404,
              9405,
              9406,
              9407,
              9408,
              9409,
              9410,
              9411,
              9412,
              9413,
              9414,
              9415,
              9416,
              9418,
              9419,
              9420,
              9425,
              9426,
              9427,
              9428,
              9435,
              9436,
              9456,
              9457,
              9501,
              9502,
              9504,
              9505,
              9510,
              9520,
              9521,
              9529,
              9535,
              9536,
              9537,
              9538,
              9539,
              9540,
              9541,
              9601,
              9605,
              9608,
              9901,
              9902,
              9903,
              9904,
              9905,
              9906,
              9907,
              9908,
              10001,
              10002,
              10003,
              10004,
              10005,
              10006,
              10007,
              10008,
              10009,
              10010,
              10011,
              10012,
              10013,
              10014,
              10015,
              10016,
              10017,
              10018,
              10019,
              10020,
              10021,
              10022,
              10023,
              10024,
              10025,
              10026,
              10027,
              10028,
              10029,
              10030,
              10031,
              10032,
              10033,
              10034,
              10035,
              10036,
              10037,
              10038,
              10039,
              10040,
              10041,
              10042,
              10043,
              10044,
              10045,
              10046,
              10047,
              10048,
              10058,
              10201,
              10202,
              10203,
              10204,
              10205,
              10206,
              10207,
              10208,
              10209,
              10210,
              10211,
              10212,
              10213,
              10214,
              10215,
              10216,
              10217,
              10218,
              10219,
              10220,
              10221,
              10222,
              10223,
              10224,
              10225,
              10226,
              10227,
              10228,
              10229,
              10230,
              10231,
              10232,
              10233,
              10234,
              10235,
              10236,
              10237,
              10238,
              10239,
              10240,
              10241,
              10242,
              10243,
              10244,
              10245,
              10246,
              10247,
              10248,
              10249,
              10250,
              10251,
              10252,
              10253,
              10254,
              10255,
              10301,
              10302,
              10306,
              10307,
              10308,
              10309,
              10310,
              10311,
              10313,
              10314,
              10330,
              10331,
              10332,
              10333,
              10334,
              10335,
              10336,
              10337,
              10338,
              10370,
              10371,
              10372,
              10442,
              10443,
              10446,
              10459,
              10460,
              10461,
              10462,
              10501,
              10502,
              10503,
              10504,
              10505,
              10506,
              10507,
              10508,
              10509,
              10510,
              10512,
              10513,
              10514,
              10515,
              10516,
              10517,
              10518,
              10519,
              10701,
              10702,
              10703,
              10704,
              10705,
              10706,
              10707,
              10708,
              10709,
              10711,
              10712,
              10713,
              10714,
              10715,
              10716,
              10717,
              10718,
              10719,
              10720,
              10721,
              10722,
              10723,
              10724,
              10725,
              10726,
              10727,
              10728,
              10729,
              10730,
              10731,
              10732,
              10801,
              10802,
              10803,
              10804,
              10805,
              10806,
              10807,
              10808,
              10809,
              10810,
              10811,
              10812,
              10813,
              10814,
              10815,
              10816,
              10817,
              10818,
              10819,
              10820,
              10821,
              10822,
              10823,
              10824,
              10825,
              10826,
              10827,
              10828,
              10829,
              10830,
              10831,
              10832,
              10833,
              10834,
              10835,
              10836,
              10837,
              10838,
              10839,
              10840,
              10841,
              10842,
              10843,
              10844,
              10845,
              10846,
              10847,
              11101,
              11102,
              11103,
              11104,
              11105,
              11106,
              11107,
              11108,
              11109,
              11110,
              11111,
              11112,
              11113,
              11114,
              11120,
              11121,
              11122,
              11123,
              11124,
              11226,
              11227,
              11401,
              11402,
              11403,
              11408,
              11409,
              11414,
              11416,
              11417,
              11422,
              11424,
              11425,
              11426,
              11427,
              11428,
              11429,
              11430,
              11431,
              11432,
              11433,
              11434,
              11435,
              11436,
              11437,
              11438,
              11439,
              11440,
              11441,
              11442,
              11443,
              11447,
              11448,
              11449,
              11450,
              11451,
              11452,
              11453,
              11454,
              11455,
              11456,
              11457,
              11458,
              11459,
              11460,
              11501,
              11502,
              11503,
              11701,
              11702,
              11703,
              11704,
              11705,
              11706,
              11707,
              11708,
              11709,
              11710,
              11711,
              12803,
              12804,
              12807,
              12808,
              12809,
              12810,
              12811,
              12812,
              12813,
              12814,
              12815,
              12816,
              12817,
              12818,
              12819,
              12820,
              12821,
              12822,
              12823)
        )
    )
    namedValues = NamedValues(
        *(("accessPolicyGroupNameInvalid", 9436),
          ("accessRestriction", 197),
          ("aceAclIdInvalid", 7623),
          ("aceAclInvlanPoliceNotAllLanes", 7632),
          ("aceAclNotExist", 7624),
          ("aceAttrConflict", 7647),
          ("aceAttrNotExistInAct", 7639),
          ("aceDebugMirrorDisableToRemoveDest", 7658),
          ("aceDot1pIllegal", 7629),
          ("aceDscpIllegal", 7628),
          ("aceEgressNNSCInvalid", 7637),
          ("aceEgressQueue10gInvalid", 7636),
          ("aceEgressQueue1gInvalid", 7635),
          ("aceEgressQueueInvalid", 7634),
          ("aceEgressqEgressqnnscInvalid", 2483),
          ("aceErrAceNotExist", 2438),
          ("aceInUse", 7625),
          ("aceInsuffActionAttr", 7640),
          ("aceInvalidAdminState", 7633),
          ("aceInvalidMode", 2482),
          ("aceIpfixStateIllegal", 8118),
          ("aceMax", 7626),
          ("aceMltIndexIllegal", 7643),
          ("aceModeIllegal", 7627),
          ("aceModeNotPermit", 7644),
          ("aceNoModeModify", 7652),
          ("aceNotPermitIngress", 7645),
          ("aceParmNotDefault", 7646),
          ("acePoliceIllegal", 7631),
          ("acePoliceInvalidMode", 7638),
          ("aceUnreachIllegal", 7630),
          ("aceValMoreThanActPatternLen", 7642),
          ("aclActNotApplied", 7615),
          ("aclActNotExist", 7606),
          ("aclActPortAttrSpecified", 7617),
          ("aclActVlanAttrSpecified", 7616),
          ("aclDefActionInvalid", 7608),
          ("aclErrExists", 2433),
          ("aclErrIdInvalid", 2428),
          ("aclErrInUse", 2432),
          ("aclErrNameInvalid", 2429),
          ("aclErrNotExist", 2431),
          ("aclErrPortAlreadyInAcl", 7621),
          ("aclErrTypeInvalid", 2430),
          ("aclErrVlanAlreadyInAcl", 7622),
          ("aclGlobActionInvalid", 7609),
          ("aclInUse", 7613),
          ("aclInvalidState", 7614),
          ("aclMltInvalid", 7612),
          ("aclNoAccept", 7653),
          ("aclPortBased", 7618),
          ("aclTypeInvalid", 7607),
          ("aclVlanBased", 7619),
          ("actErrApplyStateTrue", 7604),
          ("actFieldTooMany", 7602),
          ("actInUse", 7601),
          ("actMaxPatternExceeded", 7605),
          ("actNoAttributesConfigured", 7620),
          ("actPatternNotExist", 7603),
          ("actPatternWrongIpVersion", 7678),
          ("activationDisabled", 429),
          ("addPortToMltFailed", 264),
          ("addRemDsapSsapNotAllowed", 1102),
          ("addingGlobalFilterToNonGlobalList", 238),
          ("addingNonGlobalFilterToGlobalList", 239),
          ("addrEntryDoesNotExist", 7477),
          ("addressExistsOnVrrp", 7808),
          ("anotherLoopBackTestAlreadyRunning", 136),
          ("applyingDuplicateGlobalFilterToPort", 262),
          ("arpBroadcastMacAddressNotAllowed", 1545),
          ("arpDeleteCannotDeleteArpWithRoutes", 1543),
          ("arpDeleteSupportedOnlyForDynamicArps", 1542),
          ("arpEntryNotFound", 1541),
          ("arpIncorrectIpAddress", 1547),
          ("arpMulticastMacAddressNotAllowed", 1544),
          ("arpNoIpAddrAssociatedWithPort", 1546),
          ("asListAsPathEntryDuplicate", 5268),
          ("asListAsPathEntryNotFound", 5267),
          ("asListDuplicate", 5266),
          ("asListInvalidAsRegularExpressionOfAsPathEntry", 5270),
          ("asListInvalidModeOfAsPathEntry", 5269),
          ("asListInvalidRowStatusOfAsPathEntry", 5271),
          ("asListNotFound", 5265),
          ("asListOverLimit", 2601),
          ("assignIpToPortInRouteVlan", 607),
          ("assignIpToVlanWithRoutePortMember", 608),
          ("atmBad1438Inarp", 457),
          ("atmBadClockSource", 452),
          ("atmBadConnectType", 460),
          ("atmBadElanId", 443),
          ("atmBadEnable", 436),
          ("atmBadFramingMode", 433),
          ("atmBadIpxEncapMethod", 461),
          ("atmBadLaneConfigMode", 455),
          ("atmBadLoopback", 453),
          ("atmBadMaxBurstSize", 441),
          ("atmBadMaxMtuSize", 442),
          ("atmBadName", 435),
          ("atmBadPeakCellRate", 439),
          ("atmBadPerformTagging", 446),
          ("atmBadPvcId", 459),
          ("atmBadPvdServiceType", 438),
          ("atmBadScrambleEnable", 450),
          ("atmBadSignalingEnable", 451),
          ("atmBadSnmpMessage", 449),
          ("atmBadSustainedCellRate", 440),
          ("atmBadUniVersion", 462),
          ("atmBadVci", 432),
          ("atmBadVpi", 431),
          ("atmBadpvcEncapsulation", 437),
          ("atmCreate1483ElanFailed", 448),
          ("atmCreatePvcFailed", 463),
          ("atmDestroy1483ElanFailed", 445),
          ("atmDestroyPvcFailed", 434),
          ("atmF5StartFailed", 458),
          ("atmIlleagalElanDefinition", 447),
          ("atmInvalidPVCEncapTypeForElan", 3902),
          ("atmInvalidPVCPCRRange", 3903),
          ("atmLecCreationFailed", 456),
          ("atmNoIpIpxConfigOnVlan", 522),
          ("atmPvcBadPeakCellRate", 533),
          ("atmPvcBadSustainedCellRate", 534),
          ("atmPvcIsInUse", 523),
          ("atmUnknownOperation", 444),
          ("autoNegotiateIsDisable", 9397),
          ("autoNegotiateIsOn", 138),
          ("autoNegotiationNotSupported", 143),
          ("badAgentAddress", 173),
          ("badDhcpMaxHop", 171),
          ("badDhcpMinSec", 170),
          ("badDhcpMode", 172),
          ("badRowStatus", 454),
          ("bandwidthLimitingNonrmodPort", 9364),
          ("bfdIsOnlySupportedOnGRTBgpPeer", 11503),
          ("bfdMultiplierInvalidValue", 11501),
          ("bgpAggregateAdvertisePolicyWithoutAsSet", 5282),
          ("bgpAggregateNotFound", 5239),
          ("bgpCanNotEnablePeerGrpWoCfgRemoteASPeerGrpOrAnyPeerInGrp", 5260),
          ("bgpCanNotEnablePeerWithoutCfgRemoteAsForThePeer", 5259),
          ("bgpCommListCommunityStringUsed", 5284),
          ("bgpDuplicatePeerNotAllowed", 10507),
          ("bgpEnabledWithoutLocalAs", 5281),
          ("bgpFeatureNotSupport", 5279),
          ("bgpInvalidAggregateAdvertisePolicy", 5243),
          ("bgpInvalidAggregateAdvertisePolicyWithoutAsSetGenerate", 10510),
          ("bgpInvalidAggregateAsSetGenerate", 5240),
          ("bgpInvalidAggregateAttributePolicy", 5244),
          ("bgpInvalidAggregateSummaryOnly", 5241),
          ("bgpInvalidAggregateSuppressPolicy", 5242),
          ("bgpInvalidConfederationIdentifier", 5253),
          ("bgpInvalidConfederationPeerAlreadyExist", 5256),
          ("bgpInvalidConfederationPeerAsNumber", 5254),
          ("bgpInvalidConfederationPeerNotFound", 5255),
          ("bgpInvalidLocalAsWhenPeerRemovePrivateAsEnabled", 10504),
          ("bgpInvalidLocalAsWhenVrfPeerRemoteAs", 10225),
          ("bgpInvalidPeerAdvertisementInterval", 5207),
          ("bgpInvalidPeerAllowAsIn", 5291),
          ("bgpInvalidPeerAsOverride", 5292),
          ("bgpInvalidPeerDefaultOriginate", 5205),
          ("bgpInvalidPeerDefaultOriginateIpv6", 10512),
          ("bgpInvalidPeerEbgpMultiNop", 5206),
          ("bgpInvalidPeerEnable", 5202),
          ("bgpInvalidPeerGroupAdvertisementInterval", 5225),
          ("bgpInvalidPeerGroupAllowAsIn", 5290),
          ("bgpInvalidPeerGroupAsOverride", 5289),
          ("bgpInvalidPeerGroupDefaultOriginate", 5222),
          ("bgpInvalidPeerGroupDefaultOriginateIpv6", 10513),
          ("bgpInvalidPeerGroupEbgpMultiHop", 5224),
          ("bgpInvalidPeerGroupEnable", 5220),
          ("bgpInvalidPeerGroupGroupName", 5238),
          ("bgpInvalidPeerGroupHoldTime", 5235),
          ("bgpInvalidPeerGroupIndex", 5252),
          ("bgpInvalidPeerGroupKeepAlive", 5236),
          ("bgpInvalidPeerGroupMD5Authentication", 5251),
          ("bgpInvalidPeerGroupMaxPrefix", 5249),
          ("bgpInvalidPeerGroupName", 5204),
          ("bgpInvalidPeerGroupNextHopSelf", 5228),
          ("bgpInvalidPeerGroupPassword", 5226),
          ("bgpInvalidPeerGroupRemoteAs", 5221),
          ("bgpInvalidPeerGroupRemovePrivateAs", 5234),
          ("bgpInvalidPeerGroupRemovePrivateAsEnableWithoutRemoteAs", 10506),
          ("bgpInvalidPeerGroupRoutePolicyIn", 5229),
          ("bgpInvalidPeerGroupRoutePolicyOut", 5230),
          ("bgpInvalidPeerGroupRouteReflectorClient", 5231),
          ("bgpInvalidPeerGroupRowStatus", 5237),
          ("bgpInvalidPeerGroupSetWhenVpnv4Enabled", 10502),
          ("bgpInvalidPeerGroupSoftReconfiguration", 5233),
          ("bgpInvalidPeerGroupSoftReconfigurationIn", 5232),
          ("bgpInvalidPeerGroupUpdateSource", 5223),
          ("bgpInvalidPeerGroupWeight", 5227),
          ("bgpInvalidPeerHoldTime", 5246),
          ("bgpInvalidPeerIpv6Capability", 10514),
          ("bgpInvalidPeerKeepAlive", 5247),
          ("bgpInvalidPeerMD5Authentication", 5250),
          ("bgpInvalidPeerMaxPrefix", 5248),
          ("bgpInvalidPeerNextHopSelf", 5210),
          ("bgpInvalidPeerPassword", 5208),
          ("bgpInvalidPeerRemoteas", 5203),
          ("bgpInvalidPeerRemovePrivateAs", 5216),
          ("bgpInvalidPeerRemovePrivateAsEnableWithoutRemoteAs", 10505),
          ("bgpInvalidPeerRoutePolicyIn", 5211),
          ("bgpInvalidPeerRoutePolicyOut", 5212),
          ("bgpInvalidPeerRouteReflectorClient", 5213),
          ("bgpInvalidPeerRowStatus", 5217),
          ("bgpInvalidPeerSetWhenVpnv4Enabled", 10501),
          ("bgpInvalidPeerSoftReconfiguration", 5215),
          ("bgpInvalidPeerSoftReconfigurationIn", 5214),
          ("bgpInvalidPeerWeight", 5209),
          ("bgpInvalidVrfPeerGroupRemoteAs", 10227),
          ("bgpInvalidVrfPeerRemoteAs", 10226),
          ("bgpMd5EnabledWithoutPasswd", 5280),
          ("bgpNetworkNotFound", 5218),
          ("bgpNotAllowedSoftRecfgInIsDisabledForTheGrpOrAnyPeerInGrp", 5258),
          ("bgpOperationNotAllowedExternalPeer", 5263),
          ("bgpOperationNotAllowedForIpv6Peer", 10515),
          ("bgpOperationNotAllowedForIpv6PeerGroup", 10516),
          ("bgpOperationNotAllowedInternalPeer", 5264),
          ("bgpOperationNotAllowedWhenBgpIsEnabled", 5245),
          ("bgpOperationNotAllowedWhenDefaultBgpIsEnabled", 10223),
          ("bgpOperationNotAllowedWhenInboundMapsAreDifferent", 10518),
          ("bgpOperationNotAllowedWhenIpvpnIsEnabled", 10232),
          ("bgpOperationNotAllowedWhenOutboundMapsAreDifferent", 10517),
          ("bgpOperationNotAllowedWhenPeerGrpOrAnyPeerInGrpIsBGPON", 5262),
          ("bgpOperationNotAllowedWhenPeerIsBGPON", 5261),
          ("bgpOperationNotAllowedWhenRouteReflectorClientIsEnabled", 10509),
          ("bgpOperationNotAllowedWhenSoftReconfigInIsDisabled", 5257),
          ("bgpOperationNotAllowedWhenVrfBgpIsEnabled", 10224),
          ("bgpOverlappingAggregateAddress", 10503),
          ("bgpPeerDoesNotBelongToPeerGroup", 10508),
          ("bgpPeerGroupNotFound", 5219),
          ("bgpPeerHoldTimeLessThanKeepAliveTime", 5283),
          ("bgpPeerIpv6NotSupport", 5301),
          ("bgpPeerLimitExceeded", 5299),
          ("bgpPeerNotFound", 5201),
          ("bpduFilterTimerInvalidRange", 11502),
          ("brouterOpNotAllowedOnIsdPort", 9907),
          ("canNotChangeLocking", 428),
          ("canOnlyConfigureViaMltTable", 414),
          ("cannotAddMulticastStaticMac", 516),
          ("cannotAddPortToMltWithIsisInterfaceOnBothPortAndMlt", 8356),
          ("cannotAddPortsToPlsbBVlan", 1198),
          ("cannotAddRcModPortsToMltWhenSpIpVlanSameAsBvlan", 10713),
          ("cannotAssociateMoreThan5000IsidToPlsbInstance", 10709),
          ("cannotChangeAddressType", 7479),
          ("cannotChangeAutoLearnState", 507),
          ("cannotChangeCurrentAndDeprecatedMib", 9107),
          ("cannotChangeDhcpSnoopingDynamicBindingEntryInterface", 11123),
          ("cannotChangeDhcpSnoopingDynamicBindingEntryIp", 11122),
          ("cannotConfigPlsbIsisIntfOnIstPort", 10723),
          ("cannotConfigPlsbIsisIntfOnSmlt", 10722),
          ("cannotConfigPlsbIsisSmltistIntfOnSameIntf", 10714),
          ("cannotConfigPortInSmltOrIstForPlsbVlan", 10716),
          ("cannotConfigureAddrWhichIsLinkLocal", 7476),
          ("cannotConfigureBothNetAndHostAddr", 7510),
          ("cannotConfigureDefaultGateway", 526),
          ("cannotConfigureHostAddr", 7482),
          ("cannotConfigureNetAddr", 7480),
          ("cannotCreateFilterEntryForBpudMac", 1193),
          ("cannotCreateFilterEntryForLacpMac", 1194),
          ("cannotCreateFilterEntryForLocalMac", 1192),
          ("cannotCreateFilterEntryForTdpMac", 1187),
          ("cannotCreateFilterEntryForVlacpMac", 1195),
          ("cannotCreateIsisIntfOnMltWhichHasPortMemberWithIsisIntf", 8358),
          ("cannotCreateIsisIntfOnPortWhichIsMemberOfMltWithIsisIntf", 8357),
          ("cannotCreateVirtLinksThroughStubArea", 271),
          ("cannotDelUdpProtocolEntryFwdEntriesExists", 329),
          ("cannotDeleteAreaIfCountIsNotZero", 259),
          ("cannotDeleteDefaultUdpProtocolTblEntry", 344),
          ("cannotDeleteIntMltId", 2501),
          ("cannotDeleteLocalRoute", 169),
          ("cannotDeleteUdpPortFwdListEntryInterfaceUsingThisList", 341),
          ("cannotDeleteVlanWithMepAssociation", 8586),
          ("cannotDeleteVlanWithNodalMipLevelAssociation", 11416),
          ("cannotEnablePlsbWithMmrpConfiguration", 10711),
          ("cannotFindRoute", 168),
          ("cannotHaveSameBvlanAsSpIpVlanRCModPort", 10712),
          ("cannotModifyAutoNegotiateIsOn", 141),
          ("cannotModifyAutoPortIsFiber", 142),
          ("cannotModifyInLaneMode", 9304),
          ("cannotModifyThisField", 130),
          ("cannotModifyUdpProtocolName", 326),
          ("cannotSetAdminDuplex", 145),
          ("cannotSetAdminSpeed", 144),
          ("cannotSetAdminSpeed1000AsPerIEEE", 10338),
          ("cannotSetClockSource", 9394),
          ("cannotSetDuplexWhenSpeedIs1000", 10371),
          ("cannotSetFraming", 9303),
          ("cannotSetMode", 9302),
          ("cannotSetPortAdminRouting", 9322),
          ("cannotUpNon128KCard", 9405),
          ("cannotUpNonEmmodeCard", 9410),
          ("cannotUpNonEticketCard", 9404),
          ("cannotUpNonRmodeCard", 9411),
          ("cannotUpNonRspCard", 9412),
          ("cfmAssnDoesNotExist", 8541),
          ("cfmAssnIndexCantBeZeroForCreation", 8537),
          ("cfmCannotAbortWhenNoL2PingInProgress", 11429),
          ("cfmCannotAbortWhenNoL2TraceInProgress", 11439),
          ("cfmCannotAbortWhenNoLbmInProgress", 10446),
          ("cfmCannotAbortWhenNoLtmInProgress", 10442),
          ("cfmCannotAddOrRemoveNodalMepsWhenMepListIsEmptyOrInvalid", 8688),
          ("cfmCannotAddOrRemoveNodalMipsWhenMipListIsEmptyOrInvalid", 8693),
          ("cfmCannotChangeMepWithCfmMsgInProgress", 12822),
          ("cfmCannotDeleteBeforeRemoveAssociation", 8574),
          ("cfmCannotDeleteVlanWithCfmMsgInProgress", 12821),
          ("cfmCannotL2PingWhenLbmInProgress", 11427),
          ("cfmCannotL2TraceWhenLTMInProgress", 11438),
          ("cfmCannotLBMWhenL2PingInProgress", 11428),
          ("cfmCannotLTMWhenL2TraceInProgress", 11437),
          ("cfmChangeNotAllowedWhenEnabled", 8506),
          ("cfmDomainDoesNotExists", 8503),
          ("cfmDomainExists", 8502),
          ("cfmDomainIndexCantBeZeroForCreation", 8540),
          ("cfmExceedMinCcmIntervalForNodalVlan", 8689),
          ("cfmFrameSizeTooLargeForRCmod", 8699),
          ("cfmFrameSizeTooLargeForRmod", 8698),
          ("cfmInvalidName", 8649),
          ("cfmIpLookupRouteFailed", 11457),
          ("cfmL2CmdVlanNotFound", 11442),
          ("cfmL2IpPingEntryMustCreatedFirst", 11459),
          ("cfmL2IpPingIsNotOkToSetReady", 11452),
          ("cfmL2IpTraceEntryMustCreatedFirst", 11460),
          ("cfmL2IpTraceIsNotOkToSetReady", 11455),
          ("cfmL2McastTraceEntryMustBeCreatedFirst", 12818),
          ("cfmL2PingExceedMaxDataSizeLimit", 11433),
          ("cfmL2PingExceedMaxMessagesLimit", 11432),
          ("cfmL2PingFrameSizeExceedMaxForNodalMep", 11436),
          ("cfmL2PingFrameTooSmall", 11435),
          ("cfmL2PingMepNotOkToSetReady", 11430),
          ("cfmL2PingTestPatternSizeError", 11434),
          ("cfmL2TraceInvalidIsid", 11443),
          ("cfmL2TraceMepNotOkToSetReady", 11440),
          ("cfmLbmCannotSpecifyBothDataAndFrameSize", 8697),
          ("cfmLbmExceedMaxDataSizeLimit", 8642),
          ("cfmLbmExceedMaxMessagesLimit", 8726),
          ("cfmLbmExceedsChassisMtu", 11402),
          ("cfmLbmExceedsUniPortMtu", 11403),
          ("cfmLbmFrameSizeExceedMaxForNodalMep", 11414),
          ("cfmLbmFrameTooSmall", 11401),
          ("cfmLbmTestPatternSizeError", 8748),
          ("cfmMaAssnNameFieldCannotBeEmptyForCreation", 8543),
          ("cfmMaDomainNameFieldCannotBeEmptyForCreation", 8535),
          ("cfmMaintenanceAssociationDoesNotExists", 8505),
          ("cfmMaintenanceAssociationExists", 8504),
          ("cfmMcastLookupRouteFailed", 12820),
          ("cfmMepAlreadyInUseWithOtherNodalVlan", 8690),
          ("cfmMepAlreadyInUseWithOtherServiceType", 8691),
          ("cfmMepCanNotEnableWhenCfmEtherTypeIsNotSet", 8554),
          ("cfmMepDoesNotExists", 8508),
          ("cfmMepExists", 8507),
          ("cfmMepIdCannotBeNullForCreation", 8542),
          ("cfmMepInUse", 8531),
          ("cfmMepMustBeEnabledForCmd", 11449),
          ("cfmMepNotOkToSetReady", 8722),
          ("cfmMepNotReadyToSetLbm", 8721),
          ("cfmMepNotReadyToSetLtm", 8723),
          ("cfmMulticastCcmOnNodalPlsbMepNotAllowed", 11422),
          ("cfmNoParamChange", 8501),
          ("cfmNoServiceAssociatedWithMepOrMip", 8720),
          ("cfmNodalMepIsNotSupportedOnESM", 11408),
          ("cfmNodalMepOnPbtVlanNotAllowed", 8687),
          ("cfmNodalMepOnlyOnPlsbVlan", 11424),
          ("cfmNodalMepOnlyOnePerVlan", 11448),
          ("cfmNodalMipLevelIsNotSupportedOnESM", 11409),
          ("cfmNodalMipLevelOnPbtVlanNotAllowed", 8692),
          ("cfmNodalMipOnlyOnPlsbVlan", 11425),
          ("cfmNodalMipOnlyOnePerVlan", 11447),
          ("cfmNodalMpOnlyOnePerVlan", 11426),
          ("cfmNotMemoryAllocatedForL2", 11454),
          ("cfmNotReadyToSetL2IpPing", 11453),
          ("cfmNotReadyToSetL2IpTrace", 11456),
          ("cfmNotReadyToSetL2McastTrace", 12819),
          ("cfmOperationNotAllowedWhenMasExistUnderMd", 8539),
          ("cfmOperationNotAllowedWhenMepsExist", 8511),
          ("cfmOperationNotAllowedWhenMipsExistUnderMd", 8577),
          ("cfmPlsbCanHaveOnlyOneStg", 8648),
          ("cfmSpbmVirtualNotPrimary", 11451),
          ("cfmSpbmVirtualNotSet", 11450),
          ("cfmSrcModeCannotBeNoVlanMacOnSpbmVlans", 12817),
          ("cfmVlanNotReadyToSetL2Ping", 11431),
          ("cfmVlanNotReadyToSetL2Trace", 11441),
          ("circuitAlreadyExists", 1504),
          ("circuitDoesNotExist", 1503),
          ("circuitlessIpInterfacesOperationNotAllowed", 1505),
          ("circuitlessIpUsedByIpvpnRD", 1537),
          ("circuitlessMaxNumberIpInterfacesReached", 1502),
          ("circuitlestInvalidIpInterfaceId", 1501),
          ("cluserInvalidId", 9901),
          ("clusterAlreadyExists", 9903),
          ("clusterDoesNotExist", 9902),
          ("clusterIdMandatory", 9906),
          ("clusterIdNotAllowedForNormalVlan", 1133),
          ("clusterIsdAlreadyUsed", 1129),
          ("clusterMgmtSyncVlanCannotBeSame", 1135),
          ("clusterNotFwIsd", 1148),
          ("clusterNotTpsIsd", 1149),
          ("clusterSizeExceeded", 9904),
          ("clusterTpsSizeExceeded", 1145),
          ("clusterTypeNotSupported", 1134),
          ("commandNotAllowedInHaCpuMode", 9316),
          ("commandNotAllowedInPrimaryCpu", 9308),
          ("commandValidOnlyIfInRmode", 10708),
          ("commandValidOnlyIfMezzCardIsPresent", 5703),
          ("communityAlreadyExists", 9101),
          ("communityDoesnotExist", 9102),
          ("communityListCommunityPathEntryDuplicate", 5275),
          ("communityListCommunityPathEntryNotFound", 5274),
          ("communityListDuplicate", 5273),
          ("communityListInvalidModeOfCommunityPathEntry", 5276),
          ("communityListInvalidRowStatusOfCommunityEntry", 5278),
          ("communityListInvalidValueOfCommunityEntry", 5277),
          ("communityListModificationNotAllowed", 5288),
          ("communityListNotFound", 5272),
          ("communityListOverLimit", 2602),
          ("communityStorageTypePermanent", 9103),
          ("configCfmGlobalEnabled", 12814),
          ("configCfmInternalOnVlan", 12813),
          ("configCfmSmltNotAllowed", 12816),
          ("configCfmTracetreeNotAllowed", 12815),
          ("configNotAllowedCfmInUseOnVlan", 12809),
          ("configNotAllowedMaNameUsed", 12808),
          ("configNotAllowedMaNameUsedByGlobalCfm", 12811),
          ("configNotAllowedMdNameUsed", 12807),
          ("configNotAllowedMdNameUsedByGlobalCfm", 12810),
          ("configNotAllowedMepUsedByGlobalCfm", 12812),
          ("configNotAllowedOnVlanInterfaces", 12804),
          ("conflictingIpAddress", 164),
          ("controlEntryAlreadyExists", 6805),
          ("controlEntryMaxLimitReached", 6810),
          ("copyFileFail", 372),
          ("copyFileFileNotFound", 369),
          ("copyFileInvalidDestination", 370),
          ("copyFileInvalidSource", 371),
          ("copyFileOutOfSpace", 368),
          ("cpuActionNotAllowed", 9426),
          ("cpuActionNotAllowedPwrPrio", 9428),
          ("customAutoNegAdvAsymPauseNotSupported", 10302),
          ("customAutoNegAdvMacPauseNotSupported", 10301),
          ("customAutoNegAdvertNotSupported", 9396),
          ("defaultEntryNotDeletable", 9104),
          ("defaultIdnoCreate", 7648),
          ("defaultIdnoDelete", 7649),
          ("defaultIdnoModify", 7650),
          ("deleteIsisInterfaceBeforeDeleteMlt", 8360),
          ("deleteStaticPortNotValid", 360),
          ("deleteStg63BeforeCreatingPlsbBvlan", 10717),
          ("deletedDeviceFile", 181),
          ("destinationNotReachable", 115),
          ("dhcpBadEnable", 178),
          ("dhcpDhcpSnGlobalDisabled", 11101),
          ("dhcpDiffAgentAddress", 11227),
          ("dhcpDuplicateForward", 176),
          ("dhcpForwardNotFound", 175),
          ("dhcpIpsgEnabledOnDaiUntrustedPort", 11107),
          ("dhcpIpsgEnabledOnDaiVlanMember", 11106),
          ("dhcpIpsgEnabledOnDhcpSnUntrustedPort", 11114),
          ("dhcpIpsgEnabledOnDhcpSnVlanMember", 11113),
          ("dhcpIpsgEnabledOnSomePorts", 11112),
          ("dhcpMaxForward", 177),
          ("dhcpMltPortDifferentDaiType", 11109),
          ("dhcpMltPortDifferentDhcpSnDaiType", 11111),
          ("dhcpMltPortDifferentDhcpSnType", 11108),
          ("dhcpMltPortDifferentIpSourceGuardType", 11110),
          ("dhcpNotEnabled", 174),
          ("dhcpNotOnByIpSubnetVlan", 525),
          ("dhcpPortBelongToDaiDsabledVlan", 11103),
          ("dhcpPortBelongToDhcpSnDisabledVlan", 11102),
          ("dhcpPortIsDaiTrusted", 11105),
          ("dhcpPortIsDhcpSnTrusted", 11104),
          ("dhcpSameServerAgentAddress", 11226),
          ("dhcpSnoopingBindingCannotOnDhcpSnoopDisabledVlan", 11124),
          ("dhcpSnoopingStaticBindingEntryDoesNotExist", 11121),
          ("dhcpSnoopingStaticBindingEntryExist", 11120),
          ("diagEntryMaxExceeded", 421),
          ("diagMirrorByPortInvalidMirroringPortSetting", 412),
          ("diagMirrorByPortTableAccessError", 411),
          ("differentMltPortTypes", 263),
          ("differentPortConfigurationForMlt", 9370),
          ("disablePortPriorToChangingDiffServPortType", 418),
          ("disableThisPortFirst", 236),
          ("discontiguousSubnetMask", 184),
          ("dnsDuplicateEntry", 9413),
          ("dnsEntryNotCreated", 9415),
          ("dnsEntryNotFound", 9414),
          ("domainAlreadyAssociatedWithOtherTypeOfService", 8567),
          ("dsaKeyGenMiss", 5505),
          ("dsaKeyNotExist", 5503),
          ("dstPortUnspecified", 123),
          ("duplicate", 7503),
          ("duplicateAccessPolicyId", 199),
          ("duplicateIpAddress", 163),
          ("duplicateOspfAcceptPolicy", 245),
          ("duplicateOspfAnnouncePolicy", 219),
          ("duplicatePolicyAddrEntry", 235),
          ("duplicatePolicyAddrListEntry", 223),
          ("duplicatePolicyNetEntry", 221),
          ("duplicatePolicyNetListEntry", 304),
          ("duplicateRipAcceptPolicy", 243),
          ("duplicateRipAnnouncePolicy", 217),
          ("duplicateRoute", 167),
          ("duplicateSyslogEntry", 291),
          ("duplicateTargetAddress", 9110),
          ("duplicateUdpBroadcastIntfEntry", 331),
          ("duplicateUdpPortFwdEntryDoesnotExists", 335),
          ("duplicateUdpPortFwdListEntryDoesnotExists", 338),
          ("duplicateUdpProtocolEntry", 328),
          ("duplicateVrrpEntry", 297),
          ("duplicatedRoutePolicyEntry", 569),
          ("dvmrpGlobInvalidFwdCacheTimeOut", 536),
          ("dvmrpGlobInvalidRouteDiscardTimeOut", 538),
          ("dvmrpGlobInvalidRouteExpireTimeOut", 537),
          ("dvmrpGlobInvalidRouteSwitchTimeOut", 539),
          ("dvmrpIgmpExclusive", 363),
          ("dvmrpInterfaceTableIsFull", 415),
          ("dvmrpInvalidIntfTypeChange", 2902),
          ("dvmrpMBRNotAllowed", 2901),
          ("dvmrpNotEnabledGlobally", 488),
          ("dynModAlreadyLoaded", 1203),
          ("dynModCantOpenFile", 1204),
          ("dynModMaxModule", 1201),
          ("dynModNotEnoughSpace", 1205),
          ("dynModUnknown", 1202),
          ("dynamicPortMemberIn8100IsNotAllowed", 623),
          ("ecmpNotEnabled", 605),
          ("egressRateLimitingNotAppToNonRModPort", 9365),
          ("enablePerformTaggingBefPlsbIsisInterfAssociation", 8372),
          ("encapsulationDoesNotMatchProtocolBasedVLAN", 317),
          ("encapsulationIsNotAllowedOnSameSegment", 316),
          ("entryAlreadyExists", 1188),
          ("entryDoesNotExist", 6809),
          ("esmMltCannotBeNonUni", 10443),
          ("extCommunityInvalidListId", 2607),
          ("extCommunityListDuplicateMemberId", 5296),
          ("extCommunityListIdExceedsRange", 2608),
          ("extCommunityListInfoAlreadyExists", 5297),
          ("extCommunityListInvalidEntry", 5295),
          ("extCommunityListModificationNotAllowed", 5294),
          ("extCommunityListNotFound", 5293),
          ("extCommunityListOverLimit", 2606),
          ("extCommunityMemberNotFound", 5298),
          ("fdbEntryNotFound", 1172),
          ("fdbStatusMismatch", 1173),
          ("featureAppliesToRmodulePortsOnly", 1532),
          ("featureNotApplyToMixedMlt", 9368),
          ("filterOnAnEnabledPort", 306),
          ("flowAlreadyExist", 160),
          ("flowNotFound", 161),
          ("fwPortNotAlwdForClusterTypeIs", 1152),
          ("gatewayNotOnMgmtInterfaceSubnet", 528),
          ("globalFilterNotDisabled", 524),
          ("globalFiltersNotSupportFwdingNextHopMode", 1516),
          ("globalMulticastNotEnabled", 321),
          ("icmpRdiscAdvAddrIsNotBroadcastOrMulticastAddr", 1508),
          ("icmpRdiscInvalidMaxAdvInt", 1509),
          ("icmpRdiscInvalidPreferenceLevel", 1507),
          ("icmpRdiscLifeTimeLessThanMaxAdvIntvOrGreaterThan9000Secs", 1511),
          ("icmpRdiscMinAdvIntvGreaterThanMaxAdvIntvOrLessThan3Secs", 1510),
          ("idInvalid", 7501),
          ("identicalHttpPortHttpsPortNotSupported", 1604),
          ("ieee8021pOverrideNotAppToNonRModPort", 9372),
          ("igapAccntCannotBeEnabledOnNonGRTVlan", 8936),
          ("igapAuthCannotBeEnabledOnNonGRTVlan", 8935),
          ("igapCannotBeEnabledOnNonGRTVlan", 8934),
          ("igapIsNotEnabled", 8937),
          ("igmpAdminVersionConfiguredLessThanOperatingVersion", 413),
          ("igmpAlreadyEnabled", 2308),
          ("igmpCandidateRpExistsInSsmRange", 2306),
          ("igmpCannotEditStaticRecMcastDisabledGloballyOrOnVlan", 2320),
          ("igmpDisableV3First", 2313),
          ("igmpDuplicateSsmTblEntry", 2302),
          ("igmpIfInvalidQIntervalMrt", 2307),
          ("igmpMVREnabled", 2322),
          ("igmpMVRVlanCanNotBeDeleted", 2325),
          ("igmpMVRVlanIsMvrVlan", 2323),
          ("igmpMVRVlanIsReceiverVlan", 2324),
          ("igmpMVRVlanReachMaximum", 2326),
          ("igmpMaxStreamExceeded", 2309),
          ("igmpMulticastRoutingEnabled", 2321),
          ("igmpMvrVlanIstSmlt", 2331),
          ("igmpMvrVlanMlt", 2332),
          ("igmpOutOfSsmRange", 2301),
          ("igmpOverlappingStaticRangeNotAllowed", 2319),
          ("igmpPimEnabledInSSMMode", 2312),
          ("igmpPortMaxStreamExceedsIntfMaxStream", 2327),
          ("igmpQueryMaxResponseUnsupportedOnV1", 2328),
          ("igmpRpSetExistsInSsmRange", 2305),
          ("igmpSSmConflictsWithSsgEntry", 2314),
          ("igmpSsmCanNotDisableDynamicEntry", 2315),
          ("igmpSsmEntryDoesNotExist", 2303),
          ("igmpSsmTblNotEmpty", 2304),
          ("igmpStaticGroupCountExceeded", 2317),
          ("igmpStreamLimitAlreadyEnabled", 2310),
          ("igmpStreamLimitNotEnabled", 2311),
          ("inUsedAsIsisIpSourceAddr", 10731),
          ("inUsedByATM1483Elan", 620),
          ("incompatibleAruHardware", 295),
          ("indexIsBeingUsedByOtherDomain", 8536),
          ("indexIsBeingUsedByOtherMaAssn", 8538),
          ("ingressPoliceNonRsPort", 9395),
          ("interfaceIsNotRunningRip", 270),
          ("interfaceIsSetToTransmitRipV1", 268),
          ("invalidANDMaskInRcIpTosRuleGroup", 356),
          ("invalidAccessPolicyAccessLevel", 255),
          ("invalidAccessPolicyLogSetting", 256),
          ("invalidAccessPolicyMode", 249),
          ("invalidAccessPolicyName", 247),
          ("invalidAccessPolicyNetAddress", 252),
          ("invalidAccessPolicyPolicyEnable", 248),
          ("invalidAccessPolicyPolicyId", 257),
          ("invalidAccessPolicyPrecedence", 251),
          ("invalidAccessPolicyService", 250),
          ("invalidAccessPolicyStrict", 9105),
          ("invalidAccessPolicyTrustedHostAddress", 253),
          ("invalidAccessPolicyTrustedHostUserName", 254),
          ("invalidActionSpecified", 140),
          ("invalidAdminSpeedCannotDisableAutoneg", 10372),
          ("invalidAreaOptions", 258),
          ("invalidCliBannerLength", 466),
          ("invalidCliBannerSize", 467),
          ("invalidCliMotdLength", 468),
          ("invalidCliMotdSize", 469),
          ("invalidCpuCard", 121),
          ("invalidDataRange", 6807),
          ("invalidDdmAlarmPortdown", 1804),
          ("invalidDdmMonitor", 1802),
          ("invalidDdmMonitorInterval", 1801),
          ("invalidDdmTrapsSend", 1803),
          ("invalidDeviceFileLength", 198),
          ("invalidDeviceFileNumber", 179),
          ("invalidDhcpAlwaysBroadcast", 267),
          ("invalidDiaglogueDuplicateMirroredPort", 397),
          ("invalidDiaglogueEnableSetting", 399),
          ("invalidDiaglogueEnableValue", 398),
          ("invalidDiaglogueEntryId", 401),
          ("invalidDiaglogueModeSetting", 400),
          ("invalidDiaglogueOperation", 404),
          ("invalidDiffServEnable", 389),
          ("invalidDiffServEnableDueToMirroring", 10336),
          ("invalidDiffServType", 390),
          ("invalidDiffServTypeDueToMirroring", 10337),
          ("invalidDmNameLength", 8583),
          ("invalidDmOrMaNameLength", 8563),
          ("invalidDsFieldToQosTableDsField", 382),
          ("invalidDsFieldToQosTableQosLevel", 383),
          ("invalidDscpField", 416),
          ("invalidDscpReservedField", 417),
          ("invalidDvmrpIfTblEnableValue", 318),
          ("invalidDvmrpIfTblMetricValue", 319),
          ("invalidFileName", 396),
          ("invalidHighestVrrpPrio", 622),
          ("invalidHoldDownTime", 294),
          ("invalidHostIpAddress", 214),
          ("invalidIPXNetworkNumber", 313),
          ("invalidIeeeOverride", 391),
          ("invalidIgmpSnoopDestAddress", 342),
          ("invalidIgmpSnoopHostAddress", 343),
          ("invalidIndex", 6808),
          ("invalidInetNetworkAndMask", 7481),
          ("invalidIpAddrType", 11458),
          ("invalidIpAddress", 133),
          ("invalidIpAddressFormat", 6806),
          ("invalidIpFilterDstOption", 309),
          ("invalidIpFilterSrcOption", 308),
          ("invalidIpMRouteInterfaceTblTtlValue", 323),
          ("invalidIpMulticastAddress", 195),
          ("invalidIpMulticastRange", 2316),
          ("invalidIpOwnerVrrpPrio", 1534),
          ("invalidLastMembQueryIntvlValueInIgmpInterfaceTable", 355),
          ("invalidLeafTimeoutValueInDVMRPGlobalTable", 348),
          ("invalidLengthOf2kBootConfigImageSource", 365),
          ("invalidLengthOf2kBootConfigLicenseSource", 3401),
          ("invalidLengthOf2kBootConfigSource", 366),
          ("invalidLinkFlapDetectAutoPortDown", 373),
          ("invalidLinkFlapDetectFrequency", 374),
          ("invalidLinkFlapDetectInterval", 375),
          ("invalidLinkFlapDetectSendTrap", 376),
          ("invalidLinkLocalAddress", 7807),
          ("invalidLoginPromptLength", 464),
          ("invalidMacAddress", 134),
          ("invalidMacAddressSpecied", 405),
          ("invalidMacOffsetRangeForBW", 531),
          ("invalidMacOffsetRangeForMG", 532),
          ("invalidMaxAdvertiseInterval", 472),
          ("invalidMaxInitalAdvertments", 475),
          ("invalidMaxInitialAdvertiseInterval", 474),
          ("invalidMepListInputFormat", 8562),
          ("invalidMinAdvertiseInterval", 473),
          ("invalidMiniSlot", 9905),
          ("invalidMipListInputFormat", 8582),
          ("invalidMltId", 187),
          ("invalidMltName", 188),
          ("invalidModeForAtmMDAType", 3901),
          ("invalidModeType", 242),
          ("invalidName", 128),
          ("invalidNbrProbeIntervalValueInDVMRPGlobalTable", 350),
          ("invalidNbrTimeoutValueInDVMRPGlobalTable", 349),
          ("invalidNeigborDeadInterval", 476),
          ("invalidNextHop", 166),
          ("invalidNextHopVrfName", 8928),
          ("invalidNotAllowedMembers", 114),
          ("invalidNumberOfHexDigits", 9315),
          ("invalidORRule1InRcIpTosRuleGroup", 357),
          ("invalidORRule2InRcIpTosRuleGroup", 358),
          ("invalidORRule3InRcIpTosRuleGroup", 359),
          ("invalidOperation", 9608),
          ("invalidOperationOnSamPort", 5604),
          ("invalidOperationOnWsmOrSamPort", 5603),
          ("invalidOperationOnWsmOrSamStg", 5601),
          ("invalidOperationOnWsmOrSamVlan", 5602),
          ("invalidOrInconsistentBroadCastMaskValue", 1519),
          ("invalidOspfAreaImportextOption", 310),
          ("invalidOspfAreaRangeNet", 162),
          ("invalidOspfInterfaceMd5KeyIdLength", 311),
          ("invalidOspfInterfaceMd5KeyLength", 312),
          ("invalidOspfMetric", 185),
          ("invalidPasswordPromptLength", 465),
          ("invalidPolicyListIdListSize", 233),
          ("invalidPortMembers", 112),
          ("invalidPortName", 471),
          ("invalidPortNameLength", 470),
          ("invalidPortNumber", 104),
          ("invalidProtocolId", 111),
          ("invalidQosLevel", 377),
          ("invalidQosLevelValue", 386),
          ("invalidQosThreshold", 379),
          ("invalidQosToDsFieldTableDsFieldValue", 387),
          ("invalidQosToDsFieldTableQosLevel", 388),
          ("invalidQosToTagTableIeee1pValue", 385),
          ("invalidQosToTagTableQosLevel", 384),
          ("invalidQosWeight", 378),
          ("invalidQueryIntervalValueInIgmpInterfaceTable", 351),
          ("invalidQueryMaxResponseTimeValueInIgmpInterfaceTable", 353),
          ("invalidRipTimeoutInterval", 1520),
          ("invalidRobustnessValueInIgmpInterfaceTable", 354),
          ("invalidRouteCost", 165),
          ("invalidSourceAddress", 6804),
          ("invalidSrcPortChoice", 122),
          ("invalidStaticMembers", 113),
          ("invalidStatusChange", 120),
          ("invalidStgId", 110),
          ("invalidSubnetAddress", 105),
          ("invalidSubnetMask", 106),
          ("invalidSyslogEnableSetting", 272),
          ("invalidSyslogEntryEnableSetting", 288),
          ("invalidSyslogHostFacility", 276),
          ("invalidSyslogHostId", 290),
          ("invalidSyslogHostIpAddr", 274),
          ("invalidSyslogHostUdpPort", 275),
          ("invalidSyslogLogTraceMsgSetting", 286),
          ("invalidSyslogLogTrapMsgSetting", 287),
          ("invalidSyslogMapErrorSeverity", 281),
          ("invalidSyslogMapFatalSeverity", 283),
          ("invalidSyslogMapInfoSeverity", 279),
          ("invalidSyslogMapMfgSeverity", 282),
          ("invalidSyslogMapTraceMsgSetting", 284),
          ("invalidSyslogMapTrapMsgSetting", 285),
          ("invalidSyslogMapWarningSeverity", 280),
          ("invalidSyslogMaxHostSetting", 289),
          ("invalidSyslogMaxHostsSettings", 273),
          ("invalidSyslogModuleId", 277),
          ("invalidSyslogSeverity", 278),
          ("invalidTagToQosTableIeee1pValue", 380),
          ("invalidTagToQosTableQosLevel", 381),
          ("invalidTargetAddress", 6803),
          ("invalidTestId", 119),
          ("invalidTriggeredUpdateIntervalValueInDVMRPGlobalTable", 347),
          ("invalidUdpConfBroacastInterface", 332),
          ("invalidUdpPortNumber", 324),
          ("invalidUdpProtocolNameLength", 325),
          ("invalidUpdateIntervalValueInDVMRPGlobalTable", 346),
          ("invalidUserPasswordLength", 131),
          ("invalidUserSetTimeDateValue", 479),
          ("invalidUserSetTimeHourValue", 480),
          ("invalidUserSetTimeMinuteValue", 481),
          ("invalidUserSetTimeMonthValue", 478),
          ("invalidUserSetTimeSecondValue", 482),
          ("invalidUserSetTimeYearValue", 477),
          ("invalidVersionValueInIgmpInterfaceTable", 352),
          ("invalidVirtualIpAddr", 508),
          ("invalidVlan", 193),
          ("invalidVlanId", 107),
          ("invalidVlanIdSpecified", 1113),
          ("invalidVlanName", 108),
          ("invalidVlanQosValue", 392),
          ("invalidVlanTosValue", 393),
          ("invalidVlanType", 109),
          ("invalidVrid", 296),
          ("invalidVrrpAddressOwnerPriority", 7809),
          ("invalidVrrpAdvertisementInterval", 301),
          ("invalidVrrpControlValue", 299),
          ("invalidVrrpEntry", 1533),
          ("invalidVrrpPrefixEntry", 7811),
          ("invalidVrrpPriority", 300),
          ("ipAddressNotAssociatedWithVlan", 1540),
          ("ipCircuitShouldExistForDhcpEnable", 1548),
          ("ipDvmrpAlreadyEnabled", 550),
          ("ipEcmpMaxExceeded", 583),
          ("ipEcmpMaxPathExceeded", 1530),
          ("ipEcmpNotDisabled", 582),
          ("ipEcmpPathListNotAllowedInRmode", 1531),
          ("ipFilterInvalidId", 419),
          ("ipHostPartForSubnetAddrIsNonZero", 320),
          ("ipInterfaceMustExistsBeforeEnablingMpls", 10058),
          ("ipOspfInFilterDuplicateEntry", 580),
          ("ipOspfInFilterEntryNotFound", 581),
          ("ipPrefixListDuplicate", 574),
          ("ipPrefixListDuplicateEntry", 575),
          ("ipPrefixListEntryNotFound", 576),
          ("ipPrefixListInvalidName", 577),
          ("ipRedistributeDuplicateEntry", 578),
          ("ipRedistributeEntryNotFound", 579),
          ("ipfBaseListDuplicate", 208),
          ("ipfBaseListNonExist", 209),
          ("ipfDeviceAlreadyExists", 2408),
          ("ipfDeviceDoesNotExists", 2411),
          ("ipfDeviceMaxFilterList", 2417),
          ("ipfDeviceMaxPerBox", 2416),
          ("ipfDeviceMaxPerPort", 2415),
          ("ipfDeviceNameTooLong", 2412),
          ("ipfDeviceUnknownDevice", 2410),
          ("ipfDeviceUnknownPlatform", 2409),
          ("ipfFilterDuplicate", 205),
          ("ipfFilterNonExist", 201),
          ("ipfFilterNumOverFilterSetLimit", 519),
          ("ipfGlobalFilterMaxPerOctapid", 2414),
          ("ipfGlobalListDuplicate", 206),
          ("ipfGlobalListNonExist", 207),
          ("ipfGlobalNextHopModeNotSupported", 624),
          ("ipfInvalidDestinationAddress", 203),
          ("ipfInvalidProtocolType", 606),
          ("ipfInvalidRmodPort", 2418),
          ("ipfInvalidSourceAddress", 204),
          ("ipfInvalidVlanPriority", 202),
          ("ipfIstPort", 609),
          ("ipfListNonExist", 212),
          ("ipfOneZeroIpDestFilterIsAllowed", 2413),
          ("ipfPortDuplicate", 210),
          ("ipfPortNonExist", 211),
          ("ipfQosTrafficAverageRateOverLimit", 520),
          ("ipfQosTrafficAvgRateZeroProfileEnable", 584),
          ("ipfQosTrafficProfileNotExist", 521),
          ("ipfSourceNextHopModeNotSupported", 2419),
          ("ipfStreamAlreadyExists", 2401),
          ("ipfStreamDoesNotExists", 2402),
          ("ipfStreamInvalidDscp", 2407),
          ("ipfStreamInvalidPortOption", 2404),
          ("ipfStreamInvalidProtocol", 2406),
          ("ipfStreamInvalidStreamType", 2403),
          ("ipfStreamNameTooLong", 2405),
          ("ipfixCollectorNotConfigured", 8110),
          ("ipfixInvalidActiveTimeout", 8105),
          ("ipfixInvalidAgingInterval", 8106),
          ("ipfixInvalidCollectorDestPort", 8113),
          ("ipfixInvalidExportInterval", 8107),
          ("ipfixInvalidHashKeyId", 8116),
          ("ipfixInvalidHashPolynomialCoeff", 8114),
          ("ipfixInvalidHashPolynomialSeed", 8115),
          ("ipfixInvalidSamplingRate", 8117),
          ("ipfixInvalidSlotNumber", 8103),
          ("ipfixInvalidTemplateRefIntervalPkts", 8109),
          ("ipfixInvalidTemplateRefIntervalSec", 8108),
          ("ipfixNotADPMSlot", 8104),
          ("ipfixOnlyUdpProtocolSupported", 8112),
          ("ipfixStateAlreadyDisabled", 8102),
          ("ipfixStateAlreadyEnabled", 8101),
          ("ipfixTwoCollectorAlreadyConfigured", 8111),
          ("ipmTimePruneEntryDuplicate", 586),
          ("ipmTimePruneEntryInvalidExpireTime", 588),
          ("ipmTimePruneEntryInvalidGroup", 585),
          ("ipmTimePruneEntryNotExist", 587),
          ("ipmcTimePruneConflictsWithSsmEntry", 2710),
          ("ipv6AddressAndPrefixSame", 7491),
          ("ipv6AttrNotImplemented", 7404),
          ("ipv6CannotChangeWhenAdminEnable", 7411),
          ("ipv6CannotModifyStubMetricIfNotStubArea", 7470),
          ("ipv6CannotSetSummaryAsFalseIfNotStubArea", 7469),
          ("ipv6CircuitDoesNotExist", 7408),
          ("ipv6CircuitMcastFlagNotSet", 7487),
          ("ipv6DadInProgressTryLater", 7493),
          ("ipv6EntryDuplicate", 7405),
          ("ipv6EntryNotExist", 7406),
          ("ipv6EuiInterfacePrefixCannotBeGreaterThan64", 7486),
          ("ipv6ForwadingDisabled", 7803),
          ("ipv6GatewayMustBeOnMgmtInterface", 7471),
          ("ipv6IncompatibleAddressTypeAndAddress", 7492),
          ("ipv6InterfaceAdminDisabled", 7802),
          ("ipv6InterfaceIdCannotBeChanged", 7483),
          ("ipv6InterfaceMismatch", 7494),
          ("ipv6InterfaceVlanNotFound", 7449),
          ("ipv6InvalidCurHopLimit", 7420),
          ("ipv6InvalidDadNsNum", 7423),
          ("ipv6InvalidDefaultLifeTime", 7419),
          ("ipv6InvalidIdentifierLength", 7407),
          ("ipv6InvalidInstance", 7402),
          ("ipv6InvalidInterfaceIdentifier", 7410),
          ("ipv6InvalidInterfaceType", 7431),
          ("ipv6InvalidInvalidIpv6Addr", 7428),
          ("ipv6InvalidManagedFlag", 7421),
          ("ipv6InvalidMaxInterval", 7416),
          ("ipv6InvalidMaxRouterAdvertInterval", 7467),
          ("ipv6InvalidMinInterval", 7417),
          ("ipv6InvalidMinRouterAdvertInterval", 7468),
          ("ipv6InvalidNetToPhysicalType", 7425),
          ("ipv6InvalidOtherConfigFlag", 7422),
          ("ipv6InvalidParameter", 7403),
          ("ipv6InvalidPhysicalAddress", 7424),
          ("ipv6InvalidPrefix", 7430),
          ("ipv6InvalidPrefixLength", 7414),
          ("ipv6InvalidReachableTime", 7413),
          ("ipv6InvalidReasmMaxSize", 7412),
          ("ipv6InvalidRetransmitTimer", 7418),
          ("ipv6InvalidSendAdverts", 7415),
          ("ipv6MldInterfaceDoesNotExist", 7460),
          ("ipv6MldInterfaceExists", 7459),
          ("ipv6MldInvalidLlqi", 7465),
          ("ipv6MldInvalidMaxRespdelay", 7463),
          ("ipv6MldInvalidQueryInterval", 7461),
          ("ipv6MldInvalidRobvar", 7464),
          ("ipv6MldInvalidVersion", 7462),
          ("ipv6MldNotEnabled", 7458),
          ("ipv6MldProxyUnsupported", 7488),
          ("ipv6MtuChangeWhenIntfDisable", 7489),
          ("ipv6NeighborDoesNotExist", 7427),
          ("ipv6NeighborDuplicate", 7426),
          ("ipv6NexthopIsLinklocBothIndexHopReq", 7433),
          ("ipv6NexthopOrIndexReq", 7432),
          ("ipv6OspfAlreadyExist", 7440),
          ("ipv6OspfAreaAggregateEntryDoesNotExist", 7445),
          ("ipv6OspfAreaAggregateEntryExists", 7444),
          ("ipv6OspfAreaCannotModifyBackbone", 7447),
          ("ipv6OspfAreaDoesNotExist", 7439),
          ("ipv6OspfInterfaceExists", 7442),
          ("ipv6OspfInterfaceInvalid", 7441),
          ("ipv6OspfInterfaceNotExists", 7443),
          ("ipv6OspfInterfaceNotNbma", 7473),
          ("ipv6OspfInvalidAreaRangeMask", 7446),
          ("ipv6OspfInvalidRouterId", 7437),
          ("ipv6OspfNbmaNbrAlreadyExist", 7472),
          ("ipv6OspfNbmaNbrInvalidAddress", 7490),
          ("ipv6OspfNbmaNbrNotExist", 7475),
          ("ipv6OspfNbmaTunnelNot624", 7474),
          ("ipv6OspfNotSupported", 7438),
          ("ipv6PortNotPowerRanger", 7409),
          ("ipv6PrefixDuplicate", 7429),
          ("ipv6RedistributionInvalidOperation", 7466),
          ("ipv6RequiresSuperMezz", 7496),
          ("ipv6StaticNeighborInterfaceNotPresent", 7495),
          ("ipv6StaticRouteDistanceReq", 7434),
          ("ipv6StaticRouteDuplicate", 7435),
          ("ipv6StaticRouteInvalid", 7436),
          ("ipv6StaticRouteOnlyIfindexCannotConfigPref", 7497),
          ("ipv6StaticRouteRecursiveRouteNotSupported", 7498),
          ("ipv6StaticRouteWrongNexthop", 7485),
          ("ipv6TunnelCannotHaveMoreThanOneAddr", 7478),
          ("ipv6TunnelInterfaceAlreadyExist", 7454),
          ("ipv6TunnelInterfaceDoesnotExist", 7450),
          ("ipv6TunnelInvalidOperation", 7452),
          ("ipv6TunnelInvalidType", 7453),
          ("ipv6TunnelLocalAndRemoteIpAddressCannotBeSame", 7484),
          ("ipv6TunnelLocalRemoteAddrPairAlreadyExists", 7499),
          ("ipv6TunnelNotImplemented", 7451),
          ("ipv6TunnelRemAddrShldBeZero", 7455),
          ("ipv6UvifDoesNotExist", 7457),
          ("ipv6ValidLifeCanOnlyBeInfinityForInfinite", 7810),
          ("ipv6VlanDoesNotMatchPreviousVlanid", 7456),
          ("ipv6VlanDoesnotExist", 7401),
          ("ipvpnAlreadyCreated", 10240),
          ("ipvpnAlreadyEnabled", 10203),
          ("ipvpnBgpBasedAlreadyCreated", 10252),
          ("ipvpnBgpBasedOrTaggedPeerNotConfigured", 10250),
          ("ipvpnBothTypeOfIpvpnCreated", 10251),
          ("ipvpnCreateFailed", 10201),
          ("ipvpnDeleteFailed", 10202),
          ("ipvpnEnableDisallowedWithoutValidRD", 10247),
          ("ipvpnEnabledWithoutLocalAs", 10230),
          ("ipvpnImplicitReflectInMixedLiteMode", 10219),
          ("ipvpnInterVrfRedistEnable", 10231),
          ("ipvpnInvRDConfOnDefVRF", 10207),
          ("ipvpnInvRDTypeNotSupported", 10208),
          ("ipvpnInvRTConfOnDefVRF", 10209),
          ("ipvpnInvRTTypeNotSupported", 10210),
          ("ipvpnInvalidAsNumber", 10234),
          ("ipvpnInvalidAssignedNumber", 10233),
          ("ipvpnInvalidPeerGroupSetForExternalPeer", 10236),
          ("ipvpnInvalidPeerSetForAccessPeer", 10220),
          ("ipvpnInvalidPeerSetForExternalPeer", 10235),
          ("ipvpnIsidAlreadyExist", 10249),
          ("ipvpnLiteOperationNotAllowedSameIpConfiguredAsRdInAnotherVrf", 10242),
          ("ipvpnLiteRDIpConfiguredInMultipleVrf", 10248),
          ("ipvpnLiteRequiresValidIpAddressInRd", 10241),
          ("ipvpnLiteRequiresVpnv4", 10228),
          ("ipvpnLiteSupportOnlyLiteEnabledRDIP", 10246),
          ("ipvpnLiteSupportOnlyType1", 10213),
          ("ipvpnLiteSupportRDWithClipIp", 10245),
          ("ipvpnMaxRtPerVrfExceeded", 10237),
          ("ipvpnNotCreated", 10239),
          ("ipvpnNotEnabled", 10204),
          ("ipvpnNotSupportedOnDefVRF", 10205),
          ("ipvpnPeerGroupRRLiteModeConflict", 10218),
          ("ipvpnPeerRRLiteModeConflict", 10217),
          ("ipvpnRDInvalidCircuitlessIP", 10243),
          ("ipvpnRDIpNotLiteEnabled", 10244),
          ("ipvpnRDTypeNotSupportedWithLite", 10214),
          ("ipvpnRdOverlapOperNotAllowed", 10238),
          ("ipvpnRouteTargetNotFound", 10222),
          ("ipvpnRouterInNonLiteRRMode", 10221),
          ("ipvpnSVCAllocFailed", 10211),
          ("ipvpnSVCILMAddFailed", 10212),
          ("ipvpnSameRDConf", 10206),
          ("ipvpnSvcLblChngIfIpvpnDisabledInVRF", 10215),
          ("ipvpnSvcLblOptionAlreadySetInIpvpnVRF", 10216),
          ("ipvpnTaggedPeerAlreadyCreated", 10253),
          ("ipvpnTaggedPeerIsidNotConfigured", 10254),
          ("ipvpnTaggedPeerIsidRuntimeChangeNotAllowed", 10255),
          ("ipvpnVpnv4DisableRequiresLiteDisable", 10229),
          ("ipxCircuitAlreadyExists", 314),
          ("ipxCircuitDoesNotExist", 315),
          ("ipxPlicyPolicyDuplicateEntry", 3110),
          ("ipxPolicyIpxNetEntryInvalidName", 3117),
          ("ipxPolicyIpxServEntryInvalidName", 3118),
          ("ipxPolicyNetDuplicateEntry", 3102),
          ("ipxPolicyNetEntryNotFound", 3101),
          ("ipxPolicyNetListDuplicateEntry", 3104),
          ("ipxPolicyNetListEntryNotFound", 3103),
          ("ipxPolicyPolicyEntryInvalidName", 3119),
          ("ipxPolicyPolicyEntryNotFound", 3109),
          ("ipxPolicyRipInFilterEntryNotFound", 3115),
          ("ipxPolicyRipOutFilterEntryNotFound", 3113),
          ("ipxPolicySapInFilterEntryNotFound", 3116),
          ("ipxPolicySapOutFilterEntryNotFound", 3114),
          ("ipxPolicyServDuplicateEntry", 3106),
          ("ipxPolicyServEntryNotFound", 3105),
          ("ipxPolicyServListDuplicateEntry", 3108),
          ("ipxPolicyServeListEntryNotFound", 3107),
          ("ipxRoutePolicyNetListOverLimit", 3111),
          ("ipxRoutePolicyServListOverLimit", 3112),
          ("isisBcastNotSupportedOverMlt", 8366),
          ("isisBvidNotConfiguredForPlsbInstance", 8353),
          ("isisCannotChangeMetricTypeFromWideToNarrow", 8318),
          ("isisCannotChangeNickNameDueToIsidEpIsEnable", 8364),
          ("isisCannotChangePlsbVlanDueToIsidEpIsEnable", 8365),
          ("isisCannotChangeSysIdDueToIsidEpIsEnable", 8363),
          ("isisCannotChangeSysIdWhenNodalMepMipAssociatedToPlsbVlan", 8371),
          ("isisCannotDeletePlsbInstanceWithIsid", 8338),
          ("isisCannotDeletePlsbInstanceWithIsisInterface", 8339),
          ("isisCannotDeleteVlanWithPlsb", 8347),
          ("isisCannotEnableInterfaceWithoutPlsbInstance", 8349),
          ("isisCannotEnableIpIsis", 8376),
          ("isisCannotUseMulticastAddress", 8375),
          ("isisCircuitAlreadyExists", 8323),
          ("isisCircuitDoesNotExist", 8324),
          ("isisControlVlanDoesNotExist", 8355),
          ("isisCsnpIntInvalid", 8306),
          ("isisEnabledOnInterface", 8317),
          ("isisInterfaceCannotConfigPlsb", 8343),
          ("isisInvalidAuthType", 8305),
          ("isisInvalidCircType", 8319),
          ("isisInvalidCircuitId", 8322),
          ("isisInvalidIntfIndex", 8325),
          ("isisInvalidSubnetMask", 8316),
          ("isisKeyIdInvalid", 8302),
          ("isisL2OnlyNotSupported", 8328),
          ("isisL2onlyCircuitExists", 8331),
          ("isisLevelRouterDoesNotSupp", 8326),
          ("isisManAreaAddrToomany", 8311),
          ("isisManAreaError", 8312),
          ("isisManAreaNotConfigured", 8327),
          ("isisMaxLspIntLessThanMinLspInt", 8333),
          ("isisMetricValueInvalidForNarrowType", 8330),
          ("isisMinLspIntGreaterThanMaxLspInt", 8332),
          ("isisMltIsNotMemberOfPlsbVlan", 8368),
          ("isisNetEntryExists", 8313),
          ("isisNetLenInvalid", 8309),
          ("isisNicknameNotConfiguredForPlsbInstance", 8352),
          ("isisNoKeyId", 8304),
          ("isisOnePlsbInstanceAllowed", 8336),
          ("isisOneVlanPerPlsbInstance", 8340),
          ("isisOverloadOnStartUpOutOfRange", 8370),
          ("isisPlsbInstanceAlreadyExists", 8335),
          ("isisPlsbInstanceDoesNotExist", 8337),
          ("isisPlsbInstanceNotConfigured", 8351),
          ("isisPlsbInstanceNotExistOnInterface", 8344),
          ("isisPlsbInstancePt2ptOnly", 8345),
          ("isisPlsbL1Only", 8346),
          ("isisPlsbMLTConflictWithCvlan", 8378),
          ("isisPlsbMLTISTConflictWithCvlan", 8379),
          ("isisPlsbNniPortCannotBeAccess", 8348),
          ("isisPlsbNodeNicknameInvalid", 8334),
          ("isisPlsbPortConflictWithCvlan", 8377),
          ("isisPlsbPrimaryVlanNotAdded", 8373),
          ("isisPlsbPrimaryVlanNotMatch", 8374),
          ("isisPlsbVlanDifferentFromDataVlan", 8369),
          ("isisPortIsNotMemberOfPlsbVlan", 8367),
          ("isisPriorityOnlyForBcastType", 8329),
          ("isisPwdExists", 8303),
          ("isisPwdInvalid", 8301),
          ("isisRtrTypeInvalid", 8308),
          ("isisRxmtLspIntInvalid", 8307),
          ("isisSpbmBvlanNotAllowToRunSlpp", 8380),
          ("isisSpbmInvalidEtherType", 8381),
          ("isisSpfDelayInvalid", 8354),
          ("isisSummAddrError", 8315),
          ("isisSummAddrExists", 8314),
          ("isisSysIdInvalid", 8320),
          ("isisSysIdRuntimeChange", 8321),
          ("isisSysidCannotBeMulticastAddress", 8359),
          ("isisSysidError", 8310),
          ("isisSystemIdIsnotBasemac", 8350),
          ("isisVlanDoesNotExist", 8341),
          ("isisVlanIsNotPlsb", 8342),
          ("lacpCantCreateSmlt", 6517),
          ("lacpInconsistentKey", 6504),
          ("lacpInvalidAggrActorAdminKey", 6502),
          ("lacpInvalidAggrColMaxDelay", 6503),
          ("lacpInvalidAggrsysPrio", 6501),
          ("lacpInvalidVal", 6505),
          ("lacpKeyModificationNotAllowedOnSltPort", 6508),
          ("lacpNotAllowedForSmlt", 6516),
          ("lacpOtherPortsWithSameKey", 6510),
          ("lacpOutOfRangeKey", 6506),
          ("lacpPortNotAggregatable", 6507),
          ("lacpSmltSysIdSyncIncomplete", 6514),
          ("licenseFileDoesNotExist", 3402),
          ("licenseFileIsAlreadyLoaded", 3405),
          ("listOnAnEnabledPort", 307),
          ("lpMiniSlotNotPresent", 9407),
          ("lpSlotDisabled", 9408),
          ("lpSlotEnabled", 9409),
          ("macAddrHasBeenAddedToGlobalFilter", 6526),
          ("macHasBeenLearntConfiguredInVlan", 1190),
          ("macIsBeingUsedAsLoopDetectMac", 1191),
          ("macIsConfiguredAsStaticMacInVlan", 1189),
          ("mappingExistsForInstanceUnmapVlansFirst", 9535),
          ("maxAceForSystem", 7641),
          ("maxAdvertiseIntLessThanMinAdvertiseInt", 486),
          ("maxAgeMustEqualOrGreatThan2XPortHelloTimePlus1Second", 9520),
          ("maxAgeMustEqualOrLessThan2XForwardDelayMinus1Second", 9529),
          ("maxDsapSsapExceeded", 1103),
          ("maxEntriesForIgmpAccTbl", 361),
          ("maxMacCount", 485),
          ("maxMacLessThanMinMac", 1117),
          ("maxMaskNumberOfHostIgmpAccTbl", 362),
          ("maxNumOfMepEntriesExceeded", 8565),
          ("maxNumOfVrrpsEntriesExceeded", 302),
          ("maxOfMirroringPortAllowedExceed", 568),
          ("maxPeerEntriesInPeerGroup", 10519),
          ("maxResponseTimeGreaterThanQueryInterval", 406),
          ("maxRowOutOfRange", 6811),
          ("maxVlanDisallow", 9420),
          ("mcastMltConfMaskDisableMcastMlt", 2709),
          ("mcastMltDiscontiguousGrpMaskValue", 2706),
          ("mcastMltDiscontiguousSrcMaskValue", 2705),
          ("mcastMltInvalidGrpMask", 2703),
          ("mcastMltInvalidSrcMask", 2702),
          ("mcastMltNotEnabled", 2701),
          ("mcastMltNotEnabledOnMlt", 2707),
          ("mcastMltPortOnNonEtkt", 2708),
          ("mcastMltRedistrNotEnabled", 2704),
          ("mepIdMustBeANumber", 8564),
          ("mepListCannotHaveTwoMepsWithSameMdLevel", 8754),
          ("metricConfigNotAllowed", 491),
          ("metricFieldIsCreatedButModified", 322),
          ("mgidNotAvailable", 511),
          ("mgmtRouteTableFull", 529),
          ("minAdvertiseIntGreaterThanMaxAdvertiseInt", 487),
          ("minMacGreaterThanMaxMac", 1116),
          ("mipListCannotHaveTwoMipsWithSameMdLevel", 8755),
          ("mirrorByPortNonExistingEntry", 6711),
          ("mirrorDestAlreadyAttachedOrDestSpecifiedNotAttached", 10314),
          ("mirrorDestinationAlreadyAttached", 10311),
          ("mirrorDestinationNotAttached", 10309),
          ("mirrorDestinationNotEntered", 10306),
          ("mirrorDisableEntry", 10310),
          ("mirrorLegacyCannotSupportPortList", 10307),
          ("mirrorLegacyCannotSupportVlanOrMlt", 10313),
          ("mirrorMltShouldHavePortsAssigned", 10308),
          ("mirrorModeNotValidForRmodRSmod", 10334),
          ("mirrorPortInMlt", 266),
          ("mirrorTxFilterModeNotAllowedOnRsmod", 10333),
          ("mirroredPortSupportRXModeOnly", 9306),
          ("mltIdInvalidInNonRmode", 2539),
          ("mltInvalidPortType", 619),
          ("mltInvalidSmltId", 2515),
          ("mltIstCannotBeCreatedOverMltWithNaapVlan", 2541),
          ("mltMoreThan4PortsInMgMlt", 408),
          ("mltNaapCannotBeAddedToMltWithActiveIst", 2542),
          ("mltNaapVlanCannotBeAddedToIst", 2540),
          ("mltNoPort", 618),
          ("mltNoThisVlan", 2502),
          ("mltNsnaUplinkMismatch", 2538),
          ("mltPortAclConflict", 7651),
          ("mltPortIsMemberOfMlt", 2518),
          ("mltPortIsMemberOfSmlt", 2519),
          ("mltPortUsedForLacp", 2522),
          ("mltPortsDifferentFramingMode", 2503),
          ("mltSdmPortNotAllowed", 1132),
          ("mltSmltAlreadyConfigured", 2517),
          ("mltSmltIdAlreadyExists", 2514),
          ("mltSmltIpAddrNotAllowedOnSltPort", 2520),
          ("mltSmltLacpInvalidKey", 2603),
          ("mltSmltNotConfigured", 2516),
          ("mltUsedForLacp", 2521),
          ("mltUsedForMlt", 2523),
          ("mltVrfVlanAndLegacyPortCannotBeMembers", 2563),
          ("moreThan2PortsInMlt", 2504),
          ("moreThan4PortsInMlt", 190),
          ("mplsConfigNeedsMezz", 10030),
          ("mplsEPHopInvalidIndex", 10045),
          ("mplsEPInvalidIndex", 10044),
          ("mplsExpPathIpv4AddrTypeOnly", 10031),
          ("mplsExpPathNoNameChange", 10032),
          ("mplsExplicitPathExists", 10020),
          ("mplsExplicitPathHopExists", 10021),
          ("mplsExplicitPathInUse", 10006),
          ("mplsExplicitPathIndexExists", 10022),
          ("mplsInterfaceNotExist", 10004),
          ("mplsInterfaceVlanNotFound", 10014),
          ("mplsInvalidDeleteOperation", 10002),
          ("mplsInvalidIndex", 10019),
          ("mplsInvalidInterfaceMtu", 10005),
          ("mplsInvalidInterfaceState", 10003),
          ("mplsInvalidLdpHelloHoldTimeRange", 10048),
          ("mplsInvalidLdpKeepAliveRange", 10047),
          ("mplsInvalidLspInstance", 10026),
          ("mplsInvalidPathOptionIndex", 10024),
          ("mplsInvalidRouterId", 6109),
          ("mplsIpAddrInUse", 10016),
          ("mplsLdpNotReady", 10011),
          ("mplsLspEPNotFound", 10029),
          ("mplsLspExists", 10025),
          ("mplsLspIndexUsed", 10035),
          ("mplsLspNameUsed", 10036),
          ("mplsLspNoEPName", 10028),
          ("mplsLspNoName", 10027),
          ("mplsLspNoNameChange", 10033),
          ("mplsLspNotActive", 10037),
          ("mplsLspNotSameDest", 10040),
          ("mplsLspNotSameSrc", 10039),
          ("mplsMaxIndex", 10023),
          ("mplsMezzCardAbsent", 10010),
          ("mplsPortNotRModule", 10015),
          ("mplsResInvalidIndex", 10046),
          ("mplsRouterIdLdpRsvpEnabled", 10001),
          ("mplsRouterIdSetToZero", 10013),
          ("mplsRsvpNotReady", 10012),
          ("mplsSrcIpNonLocal", 10034),
          ("mplsTunnelCfgIngressOnly", 10042),
          ("mplsTunnelInUse", 10007),
          ("mplsTunnelInvalidIndex", 10043),
          ("mplsTunnelNoALtPath", 10041),
          ("mplsTunnelNoDest", 10008),
          ("mplsTunnelNotAllLspUp", 10018),
          ("mplsTunnelNotFound", 10017),
          ("mplsTunnelResourceInUse", 10009),
          ("mplsTunnelSameSrcDest", 10038),
          ("msdpDataTTLInvalid", 10815),
          ("msdpDefaultPeerAlreadyCreated", 10839),
          ("msdpDefaultPeerRoutePolicyNotFound", 10828),
          ("msdpEncapsulationTypeNotSupported", 10816),
          ("msdpGlobalGrpRedistributeAlreadyCreated", 10843),
          ("msdpGlobalGrpRedistributeNotFound", 10841),
          ("msdpHoldTimePeerEstablished", 10811),
          ("msdpInconsistentDefaultPeerStatus", 10835),
          ("msdpInconsistentMeshGroupRowStatus", 10837),
          ("msdpInconsistentPeerAdminStatus", 10834),
          ("msdpInconsistentPeerRowStatus", 10808),
          ("msdpInconsistentRedistributeRowStatus", 10836),
          ("msdpInconsistentRowStatus", 10801),
          ("msdpInterfaceNotUp", 10844),
          ("msdpInvalidASnumber", 10825),
          ("msdpInvalidConnectRetryPeriod", 10810),
          ("msdpInvalidDefaultPeerRouteMapNameLength", 10827),
          ("msdpInvalidDescriptionLength", 10819),
          ("msdpInvalidHoldtimePeriod", 10812),
          ("msdpInvalidMD5AuthPasswordLength", 10824),
          ("msdpInvalidMD5AuthStatus", 10821),
          ("msdpInvalidMeshGroupNameLength", 10831),
          ("msdpInvalidPeerAddress", 10823),
          ("msdpInvalidPeerAddressInMeshGroup", 10838),
          ("msdpInvalidPeerSetWhenPeerIsEnabled", 10822),
          ("msdpInvalidRPAddress", 10802),
          ("msdpInvalidRedistributeRouteMapNameLength", 10829),
          ("msdpInvalidSALimit", 10820),
          ("msdpKeepAliveTimePeerEstablished", 10813),
          ("msdpLocalAddressPeerEstablished", 10806),
          ("msdpNotLocalAddress", 10805),
          ("msdpPeerAlreadyConfiguredInMeshGroup", 10832),
          ("msdpPeerCannotDeleteNonExistingPasswd", 10847),
          ("msdpPeerConfigurePassword", 10845),
          ("msdpPeerControlCharNotAllowed", 10846),
          ("msdpPeerCreated", 10807),
          ("msdpPeerKeepAliveInvalid", 10814),
          ("msdpPeerNotConfigured", 10826),
          ("msdpPeerNotFound", 10809),
          ("msdpPeerNotFoundInMeshGroup", 10833),
          ("msdpPeerSAFilterAlreadyCreated", 10842),
          ("msdpPeerSAFilterNotFound", 10840),
          ("msdpPeerSAFilterPolicyNotFound", 10818),
          ("msdpPeerSARouteMapNameLenInvalid", 10817),
          ("msdpPeerTableInvalidLocalAddress", 10804),
          ("msdpRPAddressNotLocalAddress", 10803),
          ("msdpRedistributeRoutePolicyNotFound", 10830),
          ("mstpInvalidVal", 9505),
          ("multinetAssoVlanCannotBeModified", 11709),
          ("multinetAssoVlanOnIpsubnetVlanOnly", 11711),
          ("multinetVlanAssignPortToMultipleIpMultinetVlan", 11704),
          ("multinetVlanCannotBeModified", 11708),
          ("multinetVlanCannotHaveBrouterPort", 11707),
          ("multinetVlanCannotHaveLegacyPort", 11705),
          ("multinetVlanDoesNotExist", 11701),
          ("multinetVlanHasIpSubnetVlanAssociated", 11703),
          ("multinetVlanHasMltMember", 11706),
          ("multinetVlanOnPortBasedVlanOnly", 11710),
          ("multinetVlanPortMustBeTagged", 11702),
          ("mutinettingNotSupported", 237),
          ("naapInvalidVlanId", 1126),
          ("naapVlanNotConfigured", 9406),
          ("nameInvalid", 7504),
          ("narrowMetricNotSupportedInPlsbMode", 8362),
          ("nextHopRouteIsStaticRoute", 345),
          ("noActionSpecified", 139),
          ("noAdminSettingForSpeed1000", 10330),
          ("noDesiredAccessPolicyItem", 200),
          ("noDesiredSyslogHostEntryFound", 293),
          ("noModifyDsFltrAllowedOnDiffSrvCorePort", 407),
          ("noVrrpIpAddressSpecified", 298),
          ("noVrrpLinkLocalAddressSpecified", 7804),
          ("nonExistIpMcastAddriess", 194),
          ("nondualConnectorGigPort", 117),
          ("none", 100),
          ("normalVlanCannotUsePlsbStg", 8647),
          ("nosuchEntry", 135),
          ("notExecutableDeviceFile", 180),
          ("notExist", 7502),
          ("notInTestMode", 153),
          ("notSupported", 126),
          ("notUsed1", 148),
          ("notenablemixedmlt", 7505),
          ("notifyTagIsOnlyAllowedUpTo32Chars", 9112),
          ("nsnaExceedMaxNumEntry", 8420),
          ("nsnaGlobalEnabled", 8403),
          ("nsnaIncorrectGreenVlan", 8414),
          ("nsnaIncorrectUplinkVlan", 8415),
          ("nsnaIncorrectVoipVlan", 8416),
          ("nsnaInvalidHelloInact", 8423),
          ("nsnaMaxNsnasSubnet", 8412),
          ("nsnaNoFilterForNsnaVlan", 8407),
          ("nsnaNoNsnasSubnet", 8411),
          ("nsnaNoRedVlan", 8401),
          ("nsnaNoSshDaemon", 8413),
          ("nsnaNoUplinkDhcpFilter", 8409),
          ("nsnaNoUplinkVlans", 8425),
          ("nsnaNoVlanColor", 8404),
          ("nsnaNotAllowedOnSmltPort", 8431),
          ("nsnaOperationNotAllowedOnMirroredPort", 8422),
          ("nsnaPortCannotBeConfiguredOnNonPrPorts", 8429),
          ("nsnaPortHasFilter", 8408),
          ("nsnaPortIsEap", 8417),
          ("nsnaPortNotConfigurable", 1138),
          ("nsnaPortOperationNotAllowed", 8418),
          ("nsnaRedVlanExists", 8402),
          ("nsnaStaticEntryExists", 8421),
          ("nsnaUnknownMac", 8419),
          ("nsnaUplinkOperationNotAllowed", 1139),
          ("nsnaVlanCannotBeMadeGuestVlan", 8428),
          ("nsnaVlanFilterRemapInProgress", 8426),
          ("nsnaVlanFlushNotAllowed", 8424),
          ("nsnaVlanHasColor", 8405),
          ("nsnaVlanNonEmpty", 8406),
          ("nsnaVlansCannotBeDeleted", 8427),
          ("nsnaYellowSubnetNotSpecified", 8410),
          ("ntpIncorrectKeyValue", 9435),
          ("ntpInvalidIntervalValue", 604),
          ("ntpKeyAlreadyExists", 597),
          ("ntpKeyDoesNotExist", 598),
          ("ntpMaxKeyExceeded", 599),
          ("ntpMaxServerNumExceeded", 603),
          ("ntpNoServerConfigured", 602),
          ("ntpServerAlreadyDisabled", 601),
          ("ntpServerAlreadyEnabled", 600),
          ("ntpServerAlreadyExist", 595),
          ("ntpServerDoesNotExist", 596),
          ("nvramLimitExceeded", 159),
          ("only2PlsbBvlanSupported", 10718),
          ("onlyFirst10PortOfLaneCanBeIsisInterface", 8361),
          ("onlyGlobalCfmSupportForNonSpbmVlan", 12823),
          ("onlyOneMirroringPortAllow", 422),
          ("onlyOnePortInMlt", 189),
          ("operationInProgress", 103),
          ("operationNotAllowed", 102),
          ("operationNotAllowedOnAccessPort", 394),
          ("operationNotAllowedOnMltPort", 2529),
          ("operationNotAllowedOnTaggingPort", 395),
          ("ospfAccepPolicyNotFound", 246),
          ("ospfAnnouncePolicyNotFound", 218),
          ("ospfAreaNotFound", 151),
          ("ospfAreaRangeNotFound", 157),
          ("ospfBackboneArea", 152),
          ("ospfBadAuthValue", 149),
          ("ospfCircNotNBMA", 556),
          ("ospfCircPriZero", 557),
          ("ospfDuplicateEntry", 155),
          ("ospfDynNeigExist", 560),
          ("ospfEnabled", 150),
          ("ospfHelloIntNotGreatDeadInt", 9605),
          ("ospfHostRouteNotFound", 186),
          ("ospfIfAreaIdConflictsWithConfiguredAreaRange", 261),
          ("ospfInterfaceNotFound", 260),
          ("ospfIntfChangeFromNBMANotAllowed", 552),
          ("ospfIntfChangeNotAllowedWhenEnabled", 551),
          ("ospfInvalidAreaRangeMask", 154),
          ("ospfNBMANeigExist", 558),
          ("ospfNBMANeigNotFound", 559),
          ("ospfNeigNoCircuit", 554),
          ("ospfNeigSameIp", 555),
          ("ospfOverlappingSummarizedRange", 9601),
          ("ospfPollIntIsnotMultOfHelloInt", 553),
          ("ospfRangeNotAllocated", 156),
          ("ospfRtrDeadIntIsnotMultOfHelloInt", 146),
          ("ospfRtrDeadIntLessThan4TimesHelloInt", 147),
          ("pbtStgCannotEnableStp", 9521),
          ("pbtVlanCannotReassign", 8552),
          ("pcapAutoSaveOrCopyCommandInProgress", 9327),
          ("pcapBufferSizeExceedsMaximumRamLimit", 9312),
          ("pcapCannotBeEnabledWhenAutosaveInProgress", 9319),
          ("pcapCommandNotAllowedIn3SlotChassis", 9317),
          ("pcapCommandNotAllowedWhenPcapIsEnabled", 9314),
          ("pcapFilterTblDuplicateEntry", 9311),
          ("pcapFilterTblEntryNotFound", 9310),
          ("pcapInsufficientDiskSpace", 9326),
          ("pcapInvalidTimerRangeValue", 9320),
          ("pcapInvalidTypeForAclFilter", 1160),
          ("pcapNoMemoryAllocatedForPcap", 9318),
          ("pcapNoPackets", 9325),
          ("pcapOctapidNotInitialized", 9324),
          ("pcapUserDefinedDataInConsistency", 9309),
          ("pcmciaNotPresent", 182),
          ("pcmciaWriteProtected", 183),
          ("pgmInvalidIfMaxNakRetxCnt", 565),
          ("pgmInvalidIfNakElimInt", 567),
          ("pgmInvalidIfNakRdataInt", 566),
          ("pgmInvalidIfNakRetxInterval", 564),
          ("pgmInvalidMaxRetxStates", 562),
          ("pgmInvalidMaxSessions", 563),
          ("pgmInvalidSessionLifetime", 561),
          ("pimAddressInSsmRange", 4809),
          ("pimAlreadyEnabled", 549),
          ("pimCandRPAddressInvalid", 541),
          ("pimCondRPGroupExists", 540),
          ("pimGlobActChkIntervalNotAllowed", 4814),
          ("pimGlobInvalidActChkInterval", 4813),
          ("pimGlobInvalidBootStrapPeriod", 4804),
          ("pimGlobInvalidCRPADVTimeOut", 4803),
          ("pimGlobInvalidDiscDataTimeOut", 4802),
          ("pimGlobInvalidRegSupprTimeOut", 616),
          ("pimGlobInvalidUniRouteChangeTimeOut", 4801),
          ("pimGlobNotSuppActChkInterval", 4817),
          ("pimGroupAddressInvalid", 542),
          ("pimInvalidCBSRPRef", 547),
          ("pimInvalidEnable", 548),
          ("pimInvalidHelloInt", 546),
          ("pimInvalidJPInterval", 544),
          ("pimInvalidMode", 545),
          ("pimInvalidModeChange", 4810),
          ("pimMBRNotAllowed", 4812),
          ("pimNotEnabled", 543),
          ("pimOrIgmpAlreadyEnabled", 630),
          ("pimStaticRpEnabled", 4805),
          ("pimStaticRpEntryExists", 4807),
          ("pimStaticRpNoRoute", 4808),
          ("pimStaticRpNotAllowed", 4811),
          ("pimStaticRpNotEnabled", 4806),
          ("pimVirtualNbrInvalidIfIndex", 4818),
          ("plsb16777215IsWellKnownIsid", 10729),
          ("plsbCannotConfigPlsbInNonplsbMode", 10707),
          ("plsbCannotSetIpSourceAddrToZeroWhenIpScEnabled", 10732),
          ("plsbConfigIpSourceAddrBeforeEnableIpSc", 10730),
          ("plsbDeleteIntfBeforeSetPlsbFlag", 10701),
          ("plsbDeleteIsidFromVlanBeforeSetPlsbFlag", 10727),
          ("plsbDeleteManualAreaBeforeSetPlsbFlag", 10703),
          ("plsbDeletePlsbInstanceBeforeSetPlsbFlag", 10702),
          ("plsbDeletePlsbVlanBeforeSetPlsbFlag", 10706),
          ("plsbDeleteSummaryAddrBeforeSetPlsbFlag", 10704),
          ("plsbDisableAllIsisEndpointsBeforeTogglePlsbState", 10715),
          ("plsbDisableIsisBeforeSetPlsbFlag", 10705),
          ("plsbInvalidIpSourceAddress", 10719),
          ("plsbIsidNotAllowedForVlanSpbmDisabled", 10728),
          ("plsbMstiCannotEnableForcePortState", 9539),
          ("plsbMstpInstanceAllowedOnlyInMstpMode", 9536),
          ("plsbMustChangeNicknameAfterChangeSysid", 10720),
          ("plsbStgInstanceCannotBeRemovedWhenPlsbVlanExists", 9537),
          ("plsbSysidCannotBeSameAsIstPeerSysid", 10462),
          ("plsbVlanIsidAlreadyExist", 10460),
          ("plsbVlanIsidNotAllowed", 10459),
          ("plsbVlanIsidWithSingleBvlan", 10461),
          ("plsbVlanMustUsePlsbStg", 8646),
          ("plsbWhenEnableIstMustConfigSmltPeerBmac", 10721),
          ("plsbWhenSetVirtualBmacToZeroPeerBmacMustBeZero", 10726),
          ("plsbZeroSmltPeerBmacMustHavePrimSplitBeb", 10725),
          ("plsbZeroSmltPeerBmacMustHaveZeroVirtualBmac", 10724),
          ("policyAddrEntryNotFound", 234),
          ("policyAddrListEntryNotFound", 222),
          ("policyAddrListIdNotFound", 224),
          ("policyAdvertiseNetListNotFound", 231),
          ("policyAnnounceInterfaceListNotFound", 230),
          ("policyExactNetListNotFound", 225),
          ("policyInjectNetListNotFound", 232),
          ("policyMatchNetEntryNotFound", 220),
          ("policyNetListEntryNotFound", 303),
          ("policyNetListIdNotFound", 305),
          ("policyOspfRtrIdListNotFound", 229),
          ("policyRangeNetListNotFound", 226),
          ("policyRipGatewayListNotFound", 227),
          ("policyRipInterfaceListNotFound", 228),
          ("portAlreadyInAnotherMlt", 192),
          ("portAlwaysRunAt10GSpeed", 10331),
          ("portCannotBeAddedToDefualtVLANWithIPXEnabled", 2505),
          ("portCannotBeAddedToDefualtVLANWithSMLT", 2509),
          ("portCustomAutoNegAdv1000HalfInvalid", 10370),
          ("portEapAuthorized", 9345),
          ("portEapEnabled", 9362),
          ("portFcPause0NotSupportedForThisHW", 9377),
          ("portFcPauseTimeNotSupportedForThisHW", 9378),
          ("portHasPcapEnabled", 1156),
          ("portInSameOctapidAsIsCluster", 1157),
          ("portInvalid", 7611),
          ("portIsDownOperationNotAllowed", 9374),
          ("portIsLocked", 196),
          ("portIsRequiredForIgmpStaticEntryCreation", 2339),
          ("portMemberNotAlwdForNonIsCluster", 1154),
          ("portMemberNotSupportSMLT", 2506),
          ("portMemberOfIsClusterCannotBeSdmPort", 1155),
          ("portMirroringEgressNotSupportFullDuplexMode", 615),
          ("portMirroringTxFilterNotSupportForThisHardwareRevision", 9373),
          ("portMirroringTxNotSupportForDiffservPort", 10335),
          ("portMirroringTxNotSupportForThisHardwareRevision", 9301),
          ("portPcapIsActive", 9313),
          ("portSffdEnableError", 9375),
          ("portTxFlowControlNotSupportedForThisHW", 9376),
          ("portconflictmixedmlt", 7506),
          ("portsInDifferentQuid", 191),
          ("posActiveNonBcpEnabledPort", 492),
          ("posAssignIpBeforeIpcpEnable", 502),
          ("posAssignIpBeforeRemoteIp", 504),
          ("posAssignIpxBeforeIpxcpEnable", 503),
          ("posAtmNoRip1", 518),
          ("posDisableTagBeforeBcpDisable", 501),
          ("posImageFilenameTooLong", 496),
          ("posKeepRemoteIpInSameSubnet", 505),
          ("posNoIpcpEnableOnMltPorts", 497),
          ("posNoIpcpEnableOnPolicyVlanPort", 512),
          ("posNoIpcpEnableOnTagPort", 498),
          ("posNoIpxcpEnableOnMltPort", 499),
          ("posNoIpxcpEnableOnPolicyVlanPort", 513),
          ("posNoIpxcpEnableOnTagPort", 500),
          ("posNoStpEnableWithBCPClosed", 517),
          ("posNonBcpCanNotBeEnabled", 495),
          ("posPortCanBeAdded", 494),
          ("posVlanNoMorePorts", 493),
          ("posVrrpNotAllowed", 514),
          ("prPortNotForIPXVlan", 1122),
          ("prPortNotForStackedVlan", 1121),
          ("preferenceOfStaticRouteIsInvalid", 367),
          ("priority255SpecialForPhyIpSameAsVrIp", 1506),
          ("priorityValueMustBeAMultipleOf4096", 9510),
          ("protocolIdNotRoutable", 137),
          ("protocolMigrationCanBeSetOnlyForForceVersionRstpOrMstp", 9541),
          ("protocolMigrationCannotBeSetIfForceportstateIsDisabled", 9540),
          ("protocolRulesForThePortHasExceeded16", 409),
          ("qosPolicyLaneExist", 7701),
          ("qosPolicyLaneInvalid", 7705),
          ("qosPolicyLaneNotExist", 7702),
          ("qosPolicyPkRateInvalid", 7703),
          ("qosPolicySvcRateInvalid", 7704),
          ("qosPolicyValidAcesPresent", 7706),
          ("qosReservedQosLevel", 535),
          ("qosTxQSetBalQInvalid", 7709),
          ("qosTxQSetHipriQInvalid", 7710),
          ("qosTxQSetLopriQInvalid", 7711),
          ("qosTxQSetMaxQExceed", 7712),
          ("qosTxQSetMinRateGtMaxrate", 7716),
          ("qosTxQSetModificationNotAllowed", 7720),
          ("qosTxQSetPortFeIncompatibleQset64", 7718),
          ("qosTxQSetPortGbIncompatibleQset8", 7719),
          ("qosTxQSetPortNotRMod", 7713),
          ("qosTxQSetQCannotBeCreated", 7770),
          ("qosTxQSetQCannotBeDeleted", 7771),
          ("qosTxQSetQInvalid", 7714),
          ("qosTxQSetQLengthLessThanDefaultNotAllowed", 7769),
          ("qosTxQSetQLengthWredModNotAllowed", 7721),
          ("qosTxQSetQLengthZeroNotAllowed", 7768),
          ("qosTxQSetQMaxAfter8Adjust", 7717),
          ("qosTxQSetQNotAssign", 7715),
          ("qosTxQSetQmaxChangeNotAllowed", 7708),
          ("qosTxQSetQmaxInvalid", 7707),
          ("rModuleOnlyOneMirroredPortPerLane", 9371),
          ("radiusAbortSesionTimerFailed", 4105),
          ("radiusAuthAcctAttrSame", 4101),
          ("radiusAuthAcctNoServerButSnmpConfig", 4112),
          ("radiusAuthAcctNoServerConfig", 4103),
          ("radiusAuthAcctPortSame", 4102),
          ("radiusInvalidAttribute", 427),
          ("radiusInvalidCliCommandCount", 4107),
          ("radiusInvalidSnmpUserLength", 4106),
          ("radiusMaxServerNumExceeded", 426),
          ("radiusReAuthTimerFailed", 4104),
          ("radiusServerExist", 423),
          ("radiusServerInUse", 425),
          ("radiusServerNotExist", 424),
          ("rateLimitingExceeded", 420),
          ("rateLimitingExistsForMlt", 9369),
          ("rateLimitingrmodPort", 9363),
          ("rcPimModeIgmpVersionIncompatible", 1518),
          ("rcSnmpInvalidSyslogHeader", 2802),
          ("rcSnmpSyslogDisableSyslogFirst", 2801),
          ("readWriteAccessLevelOne", 901),
          ("readWriteAccessLevelThree", 903),
          ("readWriteAccessLevelTwo", 902),
          ("readWriteAccessReadOnly", 900),
          ("readWriteAccessReadWrite", 904),
          ("readWriteAccessReadWriteAll", 905),
          ("readWriteAccessUnknownLevel", 906),
          ("recordReserveExceedPhyLim", 9403),
          ("recordReserveOutOfRange", 9402),
          ("recordReserveTypeInvalid", 9401),
          ("regularPortsNotAllowedInClusterSyncVlan", 1131),
          ("regularPortsNotAllowedInPeeringVlan", 1130),
          ("removePortFromMltFailed", 265),
          ("removeVlanBeforeDeletingCluster", 9908),
          ("resetOperNotAllowed", 9427),
          ("resourceNotAvailable", 101),
          ("retrieve10GEInfoFailure", 1115),
          ("ripAccepPolicyNotFound", 244),
          ("ripAnnouncePolicyNotFound", 216),
          ("ripInterfaceDoesnotExist", 269),
          ("rmCommandNotAllowedWhenRemoteMirroringIsEnabled", 9328),
          ("rmDstMacNotSet", 9335),
          ("rmPortDuplicateEntry", 9336),
          ("rmPortEntryNotCreated", 9337),
          ("rmPortNotMemberOfVlan", 9330),
          ("rmRemoteMirroringActiveInOctapd", 9332),
          ("rmRemoteMirroringActiveInRspLane", 9382),
          ("rmRmtExceedsMaxLimit", 9333),
          ("rmSrcMacAddressNotSet", 9331),
          ("rmVlanIdNotSetForRmtPort", 9334),
          ("rmVlanNotPortBasedVlan", 9329),
          ("rmodOnlyOneMirroredPortPerLaneForEgress", 10332),
          ("rmodOnlyOnePcapPortPerLane", 1161),
          ("rmodeRequired", 9419),
          ("routeDoesNotExistsInTheRroutingTable", 410),
          ("routeExists", 527),
          ("routeNotExists", 530),
          ("routePolicyListNotSpecify", 572),
          ("routePolicyPrefixListOverLimit", 573),
          ("rpsExtendedAclDuplicateEntry", 4903),
          ("rpsExtendedAclDuplicateListFound", 4906),
          ("rpsExtendedAclEntryNotFound", 4905),
          ("rpsExtendedAclListNameInvalid", 4902),
          ("rpsExtendedAclListNotFound", 4904),
          ("rpsMcastMaskLenToNotAllowed", 4901),
          ("rsaKeyGenMiss", 5504),
          ("rsaKeyNotExist", 5502),
          ("rsmltInvalidHoldUpTimer", 1522),
          ("rsmltNoBrouter", 1523),
          ("rsmltNoCirc", 1521),
          ("rsmltNoIst", 1524),
          ("rsmltSetWithVrrpEnable", 1528),
          ("rstpInvalidVal", 9504),
          ("rstpOnlyDefaultInstanceAllowed", 1174),
          ("rtcIsNotPresent", 483),
          ("rtcIsNotRunning", 484),
          ("sameLevelMepAlreadyAssignedToVlanOnSamePort", 8670),
          ("sameLevelMipAlreadyAssignedToVlanOnSamePort", 8671),
          ("sameLevelNodalMepAlreadyAssignedToVlan", 11417),
          ("secondaryCpuNotActive", 9307),
          ("setFilteredPortEnableValue", 241),
          ("setFilteredPortMode", 240),
          ("slotNotPresent", 9418),
          ("slppInvalidRxThreshold", 9381),
          ("slppInvalidTxInterval", 9380),
          ("smartCpldNotSupported", 9416),
          ("smltInvalidPortTypeForIstMlt", 594),
          ("smltIstExist", 589),
          ("smltIstNotExist", 591),
          ("smltIstStpEnableNotAllowed", 621),
          ("smltL2fIstPort", 612),
          ("smltMltIpfExist", 610),
          ("smltMltL2fExist", 613),
          ("smltMltNoThisVlan", 626),
          ("smltMltPortIpfExist", 611),
          ("smltMltPortL2fExist", 614),
          ("smltNotANormalMlt", 627),
          ("smltNotAllowedObBrouterPort", 9323),
          ("smltNotAvailableIn8100", 617),
          ("smltPeerIpNotExist", 625),
          ("smltSmltIdExist", 590),
          ("smltSmltIsEnabled", 592),
          ("smltSmltLocalIpNotExist", 593),
          ("snmpSnoopDisabled", 213),
          ("snoopStaticGroupExist", 215),
          ("softwareLicenseViolation", 9425),
          ("specifiedPrefixListNotFound", 571),
          ("specifiedRoutePolicyEntryNotFound", 570),
          ("srcMacVlanIsNotYetDisabled", 403),
          ("srcMacVlanIsNotYetEnabled", 402),
          ("srcPortOneUnspecified", 124),
          ("srcPortTwoUnspecified", 125),
          ("sshAuthenticationNotEnabled", 5510),
          ("sshEnableTrue", 5501),
          ("sshInvalidPort", 5507),
          ("sshPortAlreadyInUse", 5508),
          ("sshPortReserved", 5509),
          ("sshShutDownInProcess", 5506),
          ("staticRouteEnabled", 506),
          ("stgInstanceCannotBeSetToPlsbType", 9538),
          ("stpIsNotAllowedToBeEnabledOnIstPort", 9305),
          ("syncVlanNotAlwdForClusterTypeIs", 1153),
          ("sysAutoResetFabricMustBeDisabledFirst", 9457),
          ("sysTakeIOCardOfflineMustBeEnabledFirst", 9456),
          ("syslogHostTableIsFull", 292),
          ("tableIsFull", 116),
          ("tacacsBackupServerAlreadyExists", 8211),
          ("tacacsBackupServerIsConfiguredWithTheSameIp", 8213),
          ("tacacsIllegalIpAddress", 8201),
          ("tacacsIllegalPriority", 8202),
          ("tacacsMaxServersReached", 8203),
          ("tacacsNoKeyGiven", 8205),
          ("tacacsPrimaryServerAlreadyExists", 8210),
          ("tacacsPrimaryServerIsConfiguredWithTheSameIp", 8212),
          ("tacacsRadiusEnabled", 8204),
          ("tacacsServerNotConfigured", 8209),
          ("tacacsSourceIpDisabled", 8207),
          ("targetAddressMissing", 6801),
          ("targetAddressNotExist", 9106),
          ("tcpConnectTblPermittedStateIsDelete", 7448),
          ("tcpConnectionNotFound", 5101),
          ("tcpInvalidState", 5102),
          ("tcpSessionsInUse", 5103),
          ("tenGEMltPortCannotBeAddedToStgWithSMLT", 9501),
          ("tenGEMltPortCannotRunTogetherWithSMLT", 2508),
          ("tenGEMltPortOrMltCannotBeAddedToVlanWithSmltMember", 2507),
          ("tenGEPortCannotBeAddedToStgWithSMLT", 9502),
          ("tenGEPortNotSupportMLT", 2513),
          ("tenGEPortNotSupportMcastDistribution", 2512),
          ("tenGEPortOrMltCannotBeAddedToVlanWithSmltMember", 2510),
          ("tenGEPortOrMltCannotRunTogetherWithSMLT", 2511),
          ("testAlreadyRunning", 6802),
          ("testIdNotPresent", 118),
          ("testRunning", 158),
          ("theSpecifiedAreaRangeMaskIsInvalid", 364),
          ("thisUsernameExists", 132),
          ("udpBroadcastIntfEntryDoesnotExists", 330),
          ("udpPortFwdEntryDoesnotExists", 334),
          ("udpPortFwdEntryUdpPortInterfaceDoesnotExists", 336),
          ("udpPortFwdListEntryDoesnotExists", 337),
          ("udpPortFwdListEntryPortFwdIdDoesnotExists", 339),
          ("udpPortFwdListEntryinvalidFwdIdListSize", 340),
          ("udpProtocolEntryDoesnotexists", 327),
          ("unknownErrorCode1", 129),
          ("unsupportedVPI", 3904),
          ("updConfIntfEntryNotEnabledForUdpBcastForwarding", 333),
          ("userNameIsNonUnique", 127),
          ("validBlkHolRtExist", 629),
          ("validStaticRtExist", 628),
          ("vidNotAvailable", 510),
          ("virtualAndPhysicalIpNotInSameSubnet", 509),
          ("vlacpDuplicatePeerMacAddress", 6512),
          ("vlacpEtherTypeIsInvalid", 6527),
          ("vlacpOneofPortorMLTIdIsRequired", 6511),
          ("vlacpOperationReqPortVlacpDis", 6515),
          ("vlacpOutOfRangeMac", 6513),
          ("vlacpTimeoutScaleRangeBetween3To10", 6509),
          ("vlanAdminStatusConfigNotAllowed", 12803),
          ("vlanAgingTimeNotAppToStaticVlan", 1123),
          ("vlanContainUnSupportedPrPort", 3121),
          ("vlanEnforcementNotAllowed", 1109),
          ("vlanFdbMandatoryParametersMissing", 1184),
          ("vlanFwPortDelNotAllowedInRegVlan", 1151),
          ("vlanFwPortNotAllowedInRegVlan", 1112),
          ("vlanHas10GEMemberWhichNotSupportIPX", 3120),
          ("vlanInvalid", 7610),
          ("vlanInvalidEncap", 1104),
          ("vlanMacRecordDoesNotExist", 1182),
          ("vlanMacRecordIsNotALearnedMac", 1183),
          ("vlanNaapVlanPortMustBeTagged", 1110),
          ("vlanRegPortNotAllowedInNaapVlan", 1111),
          ("vlanWithIPXEnabledCannotAdd10GEPortOrMlt", 1101),
          ("vrfAlreadyExists", 8902),
          ("vrfBgpAlreadyExists", 8925),
          ("vrfBgpDoesNotExist", 8924),
          ("vrfBgpLimitExceeded", 8926),
          ("vrfCannotAddAssociatedPortToVlan", 8921),
          ("vrfCannotAssociatePortInVlan", 8920),
          ("vrfCannotAssociateToLegacyPortForBrouter", 8923),
          ("vrfCannotAssociateToVlanWithLegacyPorts", 8922),
          ("vrfCannotChangeAssociationInterfaceExists", 8907),
          ("vrfConfigNeedsMezz", 8927),
          ("vrfDhcpLimitExceeded", 8912),
          ("vrfDoesNotExist", 8901),
          ("vrfInvalidVrfId", 8908),
          ("vrfLegacyPortCannotBeAddedToVlanAssociatedWithVrf", 8906),
          ("vrfMaxRoutesCouldNotBeSet", 8903),
          ("vrfNameDuplicate", 8917),
          ("vrfNameInvalid", 8916),
          ("vrfOperationNotAllowed", 8931),
          ("vrfOperationProhibitedForGrt", 8909),
          ("vrfOspfAlreadyExists", 8919),
          ("vrfOspfDoesNotExist", 8915),
          ("vrfOspfLimitExceeded", 8910),
          ("vrfPimDoesNotExist", 8933),
          ("vrfPimLimitExceeded", 8932),
          ("vrfPortDoesNotBelongToSpecifiedVrf", 8904),
          ("vrfRipAlreadyExists", 8918),
          ("vrfRipDoesNotExist", 8914),
          ("vrfRipLimitExceeded", 8911),
          ("vrfVlanDoesNotBelongToSpecifiedVrf", 8905),
          ("vrfVrrpLimitExceeded", 8913),
          ("vrrpCriticalIpAddrNotEnable", 489),
          ("vrrpFasterAdvDisabled", 1514),
          ("vrrpFasterAdvEnabled", 1513),
          ("vrrpInvalidCriticalIpAddr", 490),
          ("vrrpInvalidFastAdvEnableValue", 1515),
          ("vrrpInvalidFasterAdvertInterval", 1512),
          ("vrrpInvalidGlobalAddress", 7806),
          ("vrrpLinkLocalAddressCannotBeChanged", 7805),
          ("vrrpPreemptActionNotAllowed", 1517),
          ("vrrpPrefixExists", 7812),
          ("vrrpSetWithRsmltEnable", 1527),
          ("webInvalidHttpPort", 515),
          ("webInvalidHttpsPort", 1603),
          ("zeroMac", 430))
    )


_RcErrorReturnCode_Type.__name__ = "Integer32"
_RcErrorReturnCode_Object = MibScalar
rcErrorReturnCode = _RcErrorReturnCode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 20, 4),
    _RcErrorReturnCode_Type()
)
rcErrorReturnCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcErrorReturnCode.setStatus("current")


class _RcErrorSendTrap_Type(TruthValue):
    """Custom type rcErrorSendTrap based on TruthValue"""


_RcErrorSendTrap_Object = MibScalar
rcErrorSendTrap = _RcErrorSendTrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 20, 5),
    _RcErrorSendTrap_Type()
)
rcErrorSendTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcErrorSendTrap.setStatus("current")
_RcTraps_ObjectIdentity = ObjectIdentity
rcTraps = _RcTraps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21)
)
_RcTrapsMib_ObjectIdentity = ObjectIdentity
rcTrapsMib = _RcTrapsMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0)
)
_RcSyslog_ObjectIdentity = ObjectIdentity
rcSyslog = _RcSyslog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22)
)
_RcSyslogGlobal_ObjectIdentity = ObjectIdentity
rcSyslogGlobal = _RcSyslogGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 1)
)


class _RcSyslogGlobalEnable_Type(TruthValue):
    """Custom type rcSyslogGlobalEnable based on TruthValue"""


_RcSyslogGlobalEnable_Object = MibScalar
rcSyslogGlobalEnable = _RcSyslogGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 1, 1),
    _RcSyslogGlobalEnable_Type()
)
rcSyslogGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogGlobalEnable.setStatus("current")


class _RcSyslogGlobalMaxHosts_Type(Integer32):
    """Custom type rcSyslogGlobalMaxHosts based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_RcSyslogGlobalMaxHosts_Type.__name__ = "Integer32"
_RcSyslogGlobalMaxHosts_Object = MibScalar
rcSyslogGlobalMaxHosts = _RcSyslogGlobalMaxHosts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 1, 2),
    _RcSyslogGlobalMaxHosts_Type()
)
rcSyslogGlobalMaxHosts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogGlobalMaxHosts.setStatus("current")


class _RcSyslogGlobalOperState_Type(Integer32):
    """Custom type rcSyslogGlobalOperState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("allHostDisabled", 4),
          ("emptyHostTbl", 3),
          ("inactive", 2))
    )


_RcSyslogGlobalOperState_Type.__name__ = "Integer32"
_RcSyslogGlobalOperState_Object = MibScalar
rcSyslogGlobalOperState = _RcSyslogGlobalOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 1, 3),
    _RcSyslogGlobalOperState_Type()
)
rcSyslogGlobalOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSyslogGlobalOperState.setStatus("current")


class _RcSyslogGlobalHeader_Type(Integer32):
    """Custom type rcSyslogGlobalHeader based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("circuitlessIP", 3),
          ("default", 1),
          ("managementVIP", 2))
    )


_RcSyslogGlobalHeader_Type.__name__ = "Integer32"
_RcSyslogGlobalHeader_Object = MibScalar
rcSyslogGlobalHeader = _RcSyslogGlobalHeader_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 1, 4),
    _RcSyslogGlobalHeader_Type()
)
rcSyslogGlobalHeader.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogGlobalHeader.setStatus("current")
_RcSyslogHostTbl_Object = MibTable
rcSyslogHostTbl = _RcSyslogHostTbl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2)
)
if mibBuilder.loadTexts:
    rcSyslogHostTbl.setStatus("current")
_RcSyslogHostEntry_Object = MibTableRow
rcSyslogHostEntry = _RcSyslogHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1)
)
rcSyslogHostEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSyslogHostId"),
)
if mibBuilder.loadTexts:
    rcSyslogHostEntry.setStatus("current")


class _RcSyslogHostId_Type(Integer32):
    """Custom type rcSyslogHostId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcSyslogHostId_Type.__name__ = "Integer32"
_RcSyslogHostId_Object = MibTableColumn
rcSyslogHostId = _RcSyslogHostId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 1),
    _RcSyslogHostId_Type()
)
rcSyslogHostId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSyslogHostId.setStatus("current")
_RcSyslogHostIpAddr_Type = IpAddress
_RcSyslogHostIpAddr_Object = MibTableColumn
rcSyslogHostIpAddr = _RcSyslogHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 2),
    _RcSyslogHostIpAddr_Type()
)
rcSyslogHostIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostIpAddr.setStatus("current")


class _RcSyslogHostUdpPort_Type(Integer32):
    """Custom type rcSyslogHostUdpPort based on Integer32"""
    defaultValue = 514

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(514, 530),
    )


_RcSyslogHostUdpPort_Type.__name__ = "Integer32"
_RcSyslogHostUdpPort_Object = MibTableColumn
rcSyslogHostUdpPort = _RcSyslogHostUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 3),
    _RcSyslogHostUdpPort_Type()
)
rcSyslogHostUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostUdpPort.setStatus("current")


class _RcSyslogHostFacility_Type(Integer32):
    """Custom type rcSyslogHostFacility based on Integer32"""
    defaultValue = 184

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(128,
              136,
              144,
              152,
              160,
              168,
              176,
              184)
        )
    )
    namedValues = NamedValues(
        *(("local0", 128),
          ("local1", 136),
          ("local2", 144),
          ("local3", 152),
          ("local4", 160),
          ("local5", 168),
          ("local6", 176),
          ("local7", 184))
    )


_RcSyslogHostFacility_Type.__name__ = "Integer32"
_RcSyslogHostFacility_Object = MibTableColumn
rcSyslogHostFacility = _RcSyslogHostFacility_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 4),
    _RcSyslogHostFacility_Type()
)
rcSyslogHostFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostFacility.setStatus("current")


class _RcSyslogHostModuleId_Type(Integer32):
    """Custom type rcSyslogHostModuleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096,
              8192,
              16384,
              32768,
              65536,
              131072,
              262144,
              524288,
              1048576,
              2097152,
              4194304,
              8388608,
              16777216,
              33554432,
              67108864,
              134217728,
              268435456)
        )
    )
    namedValues = NamedValues(
        *(("acif", 131072),
          ("bridge", 32),
          ("chasmgr", 16),
          ("cli", 4096),
          ("common", 1),
          ("cpp", 512),
          ("gbip", 262144),
          ("hwif", 128),
          ("igmp", 8388608),
          ("ipfil", 16777216),
          ("ipmc", 134217728),
          ("ippolicy", 67108864),
          ("main", 8192),
          ("mandiag", 2097152),
          ("mantest", 4194304),
          ("mlt", 33554432),
          ("netdrv", 1024),
          ("ospf", 64),
          ("p2ip", 16384),
          ("portmgr", 8),
          ("rcip", 32768),
          ("rmon", 4),
          ("rompager", 65536),
          ("sim", 256),
          ("snmp", 2),
          ("syslog", 268435456),
          ("tdp", 1048576),
          ("vlanmgr", 2048),
          ("wdt", 524288))
    )


_RcSyslogHostModuleId_Type.__name__ = "Integer32"
_RcSyslogHostModuleId_Object = MibTableColumn
rcSyslogHostModuleId = _RcSyslogHostModuleId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 5),
    _RcSyslogHostModuleId_Type()
)
rcSyslogHostModuleId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostModuleId.setStatus("current")
_RcSyslogHostModuleId2_Type = Integer32
_RcSyslogHostModuleId2_Object = MibTableColumn
rcSyslogHostModuleId2 = _RcSyslogHostModuleId2_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 6),
    _RcSyslogHostModuleId2_Type()
)
rcSyslogHostModuleId2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostModuleId2.setStatus("current")


class _RcSyslogHostSeverity_Type(Integer32):
    """Custom type rcSyslogHostSeverity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_RcSyslogHostSeverity_Type.__name__ = "Integer32"
_RcSyslogHostSeverity_Object = MibTableColumn
rcSyslogHostSeverity = _RcSyslogHostSeverity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 7),
    _RcSyslogHostSeverity_Type()
)
rcSyslogHostSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostSeverity.setStatus("current")


class _RcSyslogHostMapInfoSeverity_Type(Integer32):
    """Custom type rcSyslogHostMapInfoSeverity based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("alert", 2),
          ("critical", 3),
          ("debug", 8),
          ("emergency", 1),
          ("error", 4),
          ("info", 7),
          ("notice", 6),
          ("warning", 5))
    )


_RcSyslogHostMapInfoSeverity_Type.__name__ = "Integer32"
_RcSyslogHostMapInfoSeverity_Object = MibTableColumn
rcSyslogHostMapInfoSeverity = _RcSyslogHostMapInfoSeverity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 8),
    _RcSyslogHostMapInfoSeverity_Type()
)
rcSyslogHostMapInfoSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostMapInfoSeverity.setStatus("current")


class _RcSyslogHostMapWarningSeverity_Type(Integer32):
    """Custom type rcSyslogHostMapWarningSeverity based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("alert", 2),
          ("critical", 3),
          ("debug", 8),
          ("emergency", 1),
          ("error", 4),
          ("info", 7),
          ("notice", 6),
          ("warning", 5))
    )


_RcSyslogHostMapWarningSeverity_Type.__name__ = "Integer32"
_RcSyslogHostMapWarningSeverity_Object = MibTableColumn
rcSyslogHostMapWarningSeverity = _RcSyslogHostMapWarningSeverity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 9),
    _RcSyslogHostMapWarningSeverity_Type()
)
rcSyslogHostMapWarningSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostMapWarningSeverity.setStatus("current")


class _RcSyslogHostMapErrorSeverity_Type(Integer32):
    """Custom type rcSyslogHostMapErrorSeverity based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("alert", 2),
          ("critical", 3),
          ("debug", 8),
          ("emergency", 1),
          ("error", 4),
          ("info", 7),
          ("notice", 6),
          ("warning", 5))
    )


_RcSyslogHostMapErrorSeverity_Type.__name__ = "Integer32"
_RcSyslogHostMapErrorSeverity_Object = MibTableColumn
rcSyslogHostMapErrorSeverity = _RcSyslogHostMapErrorSeverity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 10),
    _RcSyslogHostMapErrorSeverity_Type()
)
rcSyslogHostMapErrorSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostMapErrorSeverity.setStatus("current")


class _RcSyslogHostMapMfgSeverity_Type(Integer32):
    """Custom type rcSyslogHostMapMfgSeverity based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("alert", 2),
          ("critical", 3),
          ("debug", 8),
          ("emergency", 1),
          ("error", 4),
          ("info", 7),
          ("notice", 6),
          ("warning", 5))
    )


_RcSyslogHostMapMfgSeverity_Type.__name__ = "Integer32"
_RcSyslogHostMapMfgSeverity_Object = MibTableColumn
rcSyslogHostMapMfgSeverity = _RcSyslogHostMapMfgSeverity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 11),
    _RcSyslogHostMapMfgSeverity_Type()
)
rcSyslogHostMapMfgSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostMapMfgSeverity.setStatus("current")


class _RcSyslogHostMapFatalSeverity_Type(Integer32):
    """Custom type rcSyslogHostMapFatalSeverity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("alert", 2),
          ("critical", 3),
          ("debug", 8),
          ("emergency", 1),
          ("error", 4),
          ("info", 7),
          ("notice", 6),
          ("warning", 5))
    )


_RcSyslogHostMapFatalSeverity_Type.__name__ = "Integer32"
_RcSyslogHostMapFatalSeverity_Object = MibTableColumn
rcSyslogHostMapFatalSeverity = _RcSyslogHostMapFatalSeverity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 12),
    _RcSyslogHostMapFatalSeverity_Type()
)
rcSyslogHostMapFatalSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostMapFatalSeverity.setStatus("current")


class _RcSyslogHostMapTraceMsg_Type(Integer32):
    """Custom type rcSyslogHostMapTraceMsg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("alert", 2),
          ("critical", 3),
          ("debug", 8),
          ("emergency", 1),
          ("error", 4),
          ("info", 7),
          ("notice", 6),
          ("warning", 5))
    )


_RcSyslogHostMapTraceMsg_Type.__name__ = "Integer32"
_RcSyslogHostMapTraceMsg_Object = MibTableColumn
rcSyslogHostMapTraceMsg = _RcSyslogHostMapTraceMsg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 13),
    _RcSyslogHostMapTraceMsg_Type()
)
rcSyslogHostMapTraceMsg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostMapTraceMsg.setStatus("current")


class _RcSyslogHostMapTrapMsg_Type(Integer32):
    """Custom type rcSyslogHostMapTrapMsg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("alert", 2),
          ("critical", 3),
          ("debug", 8),
          ("emergency", 1),
          ("error", 4),
          ("info", 7),
          ("notice", 6),
          ("warning", 5))
    )


_RcSyslogHostMapTrapMsg_Type.__name__ = "Integer32"
_RcSyslogHostMapTrapMsg_Object = MibTableColumn
rcSyslogHostMapTrapMsg = _RcSyslogHostMapTrapMsg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 14),
    _RcSyslogHostMapTrapMsg_Type()
)
rcSyslogHostMapTrapMsg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostMapTrapMsg.setStatus("current")
_RcSyslogHostLogTraceMsgs_Type = TruthValue
_RcSyslogHostLogTraceMsgs_Object = MibTableColumn
rcSyslogHostLogTraceMsgs = _RcSyslogHostLogTraceMsgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 15),
    _RcSyslogHostLogTraceMsgs_Type()
)
rcSyslogHostLogTraceMsgs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostLogTraceMsgs.setStatus("current")
_RcSyslogHostLogTrapMsgs_Type = TruthValue
_RcSyslogHostLogTrapMsgs_Object = MibTableColumn
rcSyslogHostLogTrapMsgs = _RcSyslogHostLogTrapMsgs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 16),
    _RcSyslogHostLogTrapMsgs_Type()
)
rcSyslogHostLogTrapMsgs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostLogTrapMsgs.setStatus("current")


class _RcSyslogHostEnable_Type(TruthValue):
    """Custom type rcSyslogHostEnable based on TruthValue"""


_RcSyslogHostEnable_Object = MibTableColumn
rcSyslogHostEnable = _RcSyslogHostEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 17),
    _RcSyslogHostEnable_Type()
)
rcSyslogHostEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostEnable.setStatus("current")
_RcSyslogHostRowStatus_Type = RowStatus
_RcSyslogHostRowStatus_Object = MibTableColumn
rcSyslogHostRowStatus = _RcSyslogHostRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 22, 2, 1, 18),
    _RcSyslogHostRowStatus_Type()
)
rcSyslogHostRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSyslogHostRowStatus.setStatus("current")
_RcDiag_ObjectIdentity = ObjectIdentity
rcDiag = _RcDiag_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23)
)
_RcDiagMirrorByPortTable_Object = MibTable
rcDiagMirrorByPortTable = _RcDiagMirrorByPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1)
)
if mibBuilder.loadTexts:
    rcDiagMirrorByPortTable.setStatus("current")
_RcDiagMirrorByPortEntry_Object = MibTableRow
rcDiagMirrorByPortEntry = _RcDiagMirrorByPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1)
)
rcDiagMirrorByPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcDiagMirrorByPortId"),
)
if mibBuilder.loadTexts:
    rcDiagMirrorByPortEntry.setStatus("current")


class _RcDiagMirrorByPortId_Type(Integer32):
    """Custom type rcDiagMirrorByPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 383),
    )


_RcDiagMirrorByPortId_Type.__name__ = "Integer32"
_RcDiagMirrorByPortId_Object = MibTableColumn
rcDiagMirrorByPortId = _RcDiagMirrorByPortId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 1),
    _RcDiagMirrorByPortId_Type()
)
rcDiagMirrorByPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortId.setStatus("current")
_RcDiagMirrorByPortMirroredPort_Type = InterfaceIndex
_RcDiagMirrorByPortMirroredPort_Object = MibTableColumn
rcDiagMirrorByPortMirroredPort = _RcDiagMirrorByPortMirroredPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 2),
    _RcDiagMirrorByPortMirroredPort_Type()
)
rcDiagMirrorByPortMirroredPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortMirroredPort.setStatus("current")
_RcDiagMirrorByPortMirroringPort_Type = InterfaceIndex
_RcDiagMirrorByPortMirroringPort_Object = MibTableColumn
rcDiagMirrorByPortMirroringPort = _RcDiagMirrorByPortMirroringPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 3),
    _RcDiagMirrorByPortMirroringPort_Type()
)
rcDiagMirrorByPortMirroringPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortMirroringPort.setStatus("current")


class _RcDiagMirrorByPortMode_Type(Integer32):
    """Custom type rcDiagMirrorByPortMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("both", 3),
          ("bothFilter", 6),
          ("rx", 2),
          ("rxFilter", 4),
          ("tx", 1),
          ("txFilter", 5))
    )


_RcDiagMirrorByPortMode_Type.__name__ = "Integer32"
_RcDiagMirrorByPortMode_Object = MibTableColumn
rcDiagMirrorByPortMode = _RcDiagMirrorByPortMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 4),
    _RcDiagMirrorByPortMode_Type()
)
rcDiagMirrorByPortMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortMode.setStatus("current")


class _RcDiagMirrorByPortEnable_Type(TruthValue):
    """Custom type rcDiagMirrorByPortEnable based on TruthValue"""


_RcDiagMirrorByPortEnable_Object = MibTableColumn
rcDiagMirrorByPortEnable = _RcDiagMirrorByPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 5),
    _RcDiagMirrorByPortEnable_Type()
)
rcDiagMirrorByPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortEnable.setStatus("current")
_RcDiagMirrorByPortRowStatus_Type = RowStatus
_RcDiagMirrorByPortRowStatus_Object = MibTableColumn
rcDiagMirrorByPortRowStatus = _RcDiagMirrorByPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 6),
    _RcDiagMirrorByPortRowStatus_Type()
)
rcDiagMirrorByPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortRowStatus.setStatus("current")
_RcDiagMirrorByPortOctapidId_Type = Integer32
_RcDiagMirrorByPortOctapidId_Object = MibTableColumn
rcDiagMirrorByPortOctapidId = _RcDiagMirrorByPortOctapidId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 7),
    _RcDiagMirrorByPortOctapidId_Type()
)
rcDiagMirrorByPortOctapidId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortOctapidId.setStatus("deprecated")
_RcDiagMirrorByPortPid_Type = Integer32
_RcDiagMirrorByPortPid_Object = MibTableColumn
rcDiagMirrorByPortPid = _RcDiagMirrorByPortPid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 8),
    _RcDiagMirrorByPortPid_Type()
)
rcDiagMirrorByPortPid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortPid.setStatus("current")


class _RcDiagMirrorRemoteMirrorVlanId_Type(Integer32):
    """Custom type rcDiagMirrorRemoteMirrorVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_RcDiagMirrorRemoteMirrorVlanId_Type.__name__ = "Integer32"
_RcDiagMirrorRemoteMirrorVlanId_Object = MibTableColumn
rcDiagMirrorRemoteMirrorVlanId = _RcDiagMirrorRemoteMirrorVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 9),
    _RcDiagMirrorRemoteMirrorVlanId_Type()
)
rcDiagMirrorRemoteMirrorVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMirrorRemoteMirrorVlanId.setStatus("current")
_RcDiagMirrorByPortMirroredPortList_Type = PortSet
_RcDiagMirrorByPortMirroredPortList_Object = MibTableColumn
rcDiagMirrorByPortMirroredPortList = _RcDiagMirrorByPortMirroredPortList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 12),
    _RcDiagMirrorByPortMirroredPortList_Type()
)
rcDiagMirrorByPortMirroredPortList.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortMirroredPortList.setStatus("current")
_RcDiagMirrorByPortMirroringPortList_Type = PortSet
_RcDiagMirrorByPortMirroringPortList_Object = MibTableColumn
rcDiagMirrorByPortMirroringPortList = _RcDiagMirrorByPortMirroringPortList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 13),
    _RcDiagMirrorByPortMirroringPortList_Type()
)
rcDiagMirrorByPortMirroringPortList.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortMirroringPortList.setStatus("current")


class _RcDiagMirrorMirroringVlanId_Type(Integer32):
    """Custom type rcDiagMirrorMirroringVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_RcDiagMirrorMirroringVlanId_Type.__name__ = "Integer32"
_RcDiagMirrorMirroringVlanId_Object = MibTableColumn
rcDiagMirrorMirroringVlanId = _RcDiagMirrorMirroringVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 14),
    _RcDiagMirrorMirroringVlanId_Type()
)
rcDiagMirrorMirroringVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcDiagMirrorMirroringVlanId.setStatus("current")


class _RcDiagMirrorMirroringMltId_Type(Integer32):
    """Custom type rcDiagMirrorMirroringMltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_RcDiagMirrorMirroringMltId_Type.__name__ = "Integer32"
_RcDiagMirrorMirroringMltId_Object = MibTableColumn
rcDiagMirrorMirroringMltId = _RcDiagMirrorMirroringMltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 15),
    _RcDiagMirrorMirroringMltId_Type()
)
rcDiagMirrorMirroringMltId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcDiagMirrorMirroringMltId.setStatus("current")


class _RcDiagMirrorMirroringMgId_Type(Integer32):
    """Custom type rcDiagMirrorMirroringMgId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_RcDiagMirrorMirroringMgId_Type.__name__ = "Integer32"
_RcDiagMirrorMirroringMgId_Object = MibTableColumn
rcDiagMirrorMirroringMgId = _RcDiagMirrorMirroringMgId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 1, 1, 16),
    _RcDiagMirrorMirroringMgId_Type()
)
rcDiagMirrorMirroringMgId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagMirrorMirroringMgId.setStatus("current")
_RcDiagPortConvSteeringTable_Object = MibTable
rcDiagPortConvSteeringTable = _RcDiagPortConvSteeringTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2)
)
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringTable.setStatus("current")
_RcDiagPortConvSteeringEntry_Object = MibTableRow
rcDiagPortConvSteeringEntry = _RcDiagPortConvSteeringEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2, 1)
)
rcDiagPortConvSteeringEntry.setIndexNames(
    (0, "RAPID-CITY", "rcDiagPortConvSteeringId"),
)
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringEntry.setStatus("current")


class _RcDiagPortConvSteeringId_Type(Integer32):
    """Custom type rcDiagPortConvSteeringId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcDiagPortConvSteeringId_Type.__name__ = "Integer32"
_RcDiagPortConvSteeringId_Object = MibTableColumn
rcDiagPortConvSteeringId = _RcDiagPortConvSteeringId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2, 1, 1),
    _RcDiagPortConvSteeringId_Type()
)
rcDiagPortConvSteeringId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringId.setStatus("current")
_RcDiagPortConvSteeringPortOne_Type = Integer32
_RcDiagPortConvSteeringPortOne_Object = MibTableColumn
rcDiagPortConvSteeringPortOne = _RcDiagPortConvSteeringPortOne_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2, 1, 2),
    _RcDiagPortConvSteeringPortOne_Type()
)
rcDiagPortConvSteeringPortOne.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringPortOne.setStatus("current")
_RcDiagPortConvSteeringPortTwo_Type = Integer32
_RcDiagPortConvSteeringPortTwo_Object = MibTableColumn
rcDiagPortConvSteeringPortTwo = _RcDiagPortConvSteeringPortTwo_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2, 1, 3),
    _RcDiagPortConvSteeringPortTwo_Type()
)
rcDiagPortConvSteeringPortTwo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringPortTwo.setStatus("current")


class _RcDiagPortConvSteeringMode_Type(Integer32):
    """Custom type rcDiagPortConvSteeringMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("both", 3),
          ("oneToTwo", 1),
          ("twoToOne", 2))
    )


_RcDiagPortConvSteeringMode_Type.__name__ = "Integer32"
_RcDiagPortConvSteeringMode_Object = MibTableColumn
rcDiagPortConvSteeringMode = _RcDiagPortConvSteeringMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2, 1, 4),
    _RcDiagPortConvSteeringMode_Type()
)
rcDiagPortConvSteeringMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringMode.setStatus("current")
_RcDiagPortConvSteeringForwardPort_Type = Integer32
_RcDiagPortConvSteeringForwardPort_Object = MibTableColumn
rcDiagPortConvSteeringForwardPort = _RcDiagPortConvSteeringForwardPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2, 1, 5),
    _RcDiagPortConvSteeringForwardPort_Type()
)
rcDiagPortConvSteeringForwardPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringForwardPort.setStatus("current")


class _RcDiagPortConvSteeringEnable_Type(TruthValue):
    """Custom type rcDiagPortConvSteeringEnable based on TruthValue"""


_RcDiagPortConvSteeringEnable_Object = MibTableColumn
rcDiagPortConvSteeringEnable = _RcDiagPortConvSteeringEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2, 1, 6),
    _RcDiagPortConvSteeringEnable_Type()
)
rcDiagPortConvSteeringEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringEnable.setStatus("current")
_RcDiagPortConvSteeringRowStatus_Type = RowStatus
_RcDiagPortConvSteeringRowStatus_Object = MibTableColumn
rcDiagPortConvSteeringRowStatus = _RcDiagPortConvSteeringRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 2, 1, 7),
    _RcDiagPortConvSteeringRowStatus_Type()
)
rcDiagPortConvSteeringRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringRowStatus.setStatus("current")
_RcDiagMacConvSteeringTable_Object = MibTable
rcDiagMacConvSteeringTable = _RcDiagMacConvSteeringTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3)
)
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringTable.setStatus("current")
_RcDiagMacConvSteeringEntry_Object = MibTableRow
rcDiagMacConvSteeringEntry = _RcDiagMacConvSteeringEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3, 1)
)
rcDiagMacConvSteeringEntry.setIndexNames(
    (0, "RAPID-CITY", "rcDiagMacConvSteeringId"),
)
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringEntry.setStatus("current")
_RcDiagMacConvSteeringId_Type = Integer32
_RcDiagMacConvSteeringId_Object = MibTableColumn
rcDiagMacConvSteeringId = _RcDiagMacConvSteeringId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3, 1, 1),
    _RcDiagMacConvSteeringId_Type()
)
rcDiagMacConvSteeringId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringId.setStatus("current")
_RcDiagMacConvSteeringSrcMac_Type = MacAddress
_RcDiagMacConvSteeringSrcMac_Object = MibTableColumn
rcDiagMacConvSteeringSrcMac = _RcDiagMacConvSteeringSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3, 1, 2),
    _RcDiagMacConvSteeringSrcMac_Type()
)
rcDiagMacConvSteeringSrcMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringSrcMac.setStatus("current")
_RcDiagMacConvSteeringDstMac_Type = MacAddress
_RcDiagMacConvSteeringDstMac_Object = MibTableColumn
rcDiagMacConvSteeringDstMac = _RcDiagMacConvSteeringDstMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3, 1, 3),
    _RcDiagMacConvSteeringDstMac_Type()
)
rcDiagMacConvSteeringDstMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringDstMac.setStatus("current")
_RcDiagMacConvSteeringInPort_Type = Integer32
_RcDiagMacConvSteeringInPort_Object = MibTableColumn
rcDiagMacConvSteeringInPort = _RcDiagMacConvSteeringInPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3, 1, 4),
    _RcDiagMacConvSteeringInPort_Type()
)
rcDiagMacConvSteeringInPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringInPort.setStatus("current")
_RcDiagMacConvSteeringForwardPort_Type = Integer32
_RcDiagMacConvSteeringForwardPort_Object = MibTableColumn
rcDiagMacConvSteeringForwardPort = _RcDiagMacConvSteeringForwardPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3, 1, 5),
    _RcDiagMacConvSteeringForwardPort_Type()
)
rcDiagMacConvSteeringForwardPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringForwardPort.setStatus("current")


class _RcDiagMacConvSteeringEnable_Type(TruthValue):
    """Custom type rcDiagMacConvSteeringEnable based on TruthValue"""


_RcDiagMacConvSteeringEnable_Object = MibTableColumn
rcDiagMacConvSteeringEnable = _RcDiagMacConvSteeringEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3, 1, 6),
    _RcDiagMacConvSteeringEnable_Type()
)
rcDiagMacConvSteeringEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringEnable.setStatus("current")
_RcDiagMacConvSteeringRowStatus_Type = RowStatus
_RcDiagMacConvSteeringRowStatus_Object = MibTableColumn
rcDiagMacConvSteeringRowStatus = _RcDiagMacConvSteeringRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 3, 1, 7),
    _RcDiagMacConvSteeringRowStatus_Type()
)
rcDiagMacConvSteeringRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringRowStatus.setStatus("current")
_RcDiagSaveConfig_Type = TruthValue
_RcDiagSaveConfig_Object = MibScalar
rcDiagSaveConfig = _RcDiagSaveConfig_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 10),
    _RcDiagSaveConfig_Type()
)
rcDiagSaveConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagSaveConfig.setStatus("deprecated")
_RcDiagMirrorByPortTblSize_Type = Integer32
_RcDiagMirrorByPortTblSize_Object = MibScalar
rcDiagMirrorByPortTblSize = _RcDiagMirrorByPortTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 11),
    _RcDiagMirrorByPortTblSize_Type()
)
rcDiagMirrorByPortTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagMirrorByPortTblSize.setStatus("current")
_RcDiagPortConvSteeringTblSize_Type = Integer32
_RcDiagPortConvSteeringTblSize_Object = MibScalar
rcDiagPortConvSteeringTblSize = _RcDiagPortConvSteeringTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 12),
    _RcDiagPortConvSteeringTblSize_Type()
)
rcDiagPortConvSteeringTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPortConvSteeringTblSize.setStatus("current")
_RcDiagMacConvSteeringTblSize_Type = Integer32
_RcDiagMacConvSteeringTblSize_Object = MibScalar
rcDiagMacConvSteeringTblSize = _RcDiagMacConvSteeringTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 13),
    _RcDiagMacConvSteeringTblSize_Type()
)
rcDiagMacConvSteeringTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagMacConvSteeringTblSize.setStatus("current")


class _RcDiagDiagnosticsEnable_Type(TruthValue):
    """Custom type rcDiagDiagnosticsEnable based on TruthValue"""


_RcDiagDiagnosticsEnable_Object = MibScalar
rcDiagDiagnosticsEnable = _RcDiagDiagnosticsEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 14),
    _RcDiagDiagnosticsEnable_Type()
)
rcDiagDiagnosticsEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagDiagnosticsEnable.setStatus("deprecated")
_RcDiagPcap_ObjectIdentity = ObjectIdentity
rcDiagPcap = _RcDiagPcap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15)
)


class _RcDiagPcapEnable_Type(TruthValue):
    """Custom type rcDiagPcapEnable based on TruthValue"""


_RcDiagPcapEnable_Object = MibScalar
rcDiagPcapEnable = _RcDiagPcapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 1),
    _RcDiagPcapEnable_Type()
)
rcDiagPcapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapEnable.setStatus("current")


class _RcDiagPcapBufferWrap_Type(TruthValue):
    """Custom type rcDiagPcapBufferWrap based on TruthValue"""


_RcDiagPcapBufferWrap_Object = MibScalar
rcDiagPcapBufferWrap = _RcDiagPcapBufferWrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 2),
    _RcDiagPcapBufferWrap_Type()
)
rcDiagPcapBufferWrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapBufferWrap.setStatus("current")


class _RcDiagPcapPcmciaWrap_Type(TruthValue):
    """Custom type rcDiagPcapPcmciaWrap based on TruthValue"""


_RcDiagPcapPcmciaWrap_Object = MibScalar
rcDiagPcapPcmciaWrap = _RcDiagPcapPcmciaWrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 3),
    _RcDiagPcapPcmciaWrap_Type()
)
rcDiagPcapPcmciaWrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapPcmciaWrap.setStatus("current")


class _RcDiagPcapFrameSize_Type(Integer32):
    """Custom type rcDiagPcapFrameSize based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 9600),
    )


_RcDiagPcapFrameSize_Type.__name__ = "Integer32"
_RcDiagPcapFrameSize_Object = MibScalar
rcDiagPcapFrameSize = _RcDiagPcapFrameSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 4),
    _RcDiagPcapFrameSize_Type()
)
rcDiagPcapFrameSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFrameSize.setStatus("current")


class _RcDiagPcapBufferSize_Type(Integer32):
    """Custom type rcDiagPcapBufferSize based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 420),
    )


_RcDiagPcapBufferSize_Type.__name__ = "Integer32"
_RcDiagPcapBufferSize_Object = MibScalar
rcDiagPcapBufferSize = _RcDiagPcapBufferSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 5),
    _RcDiagPcapBufferSize_Type()
)
rcDiagPcapBufferSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapBufferSize.setStatus("current")


class _RcDiagPcapAutoSave_Type(TruthValue):
    """Custom type rcDiagPcapAutoSave based on TruthValue"""


_RcDiagPcapAutoSave_Object = MibScalar
rcDiagPcapAutoSave = _RcDiagPcapAutoSave_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 6),
    _RcDiagPcapAutoSave_Type()
)
rcDiagPcapAutoSave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAutoSave.setStatus("current")


class _RcDiagPcapAutoSaveFileName_Type(DisplayString):
    """Custom type rcDiagPcapAutoSaveFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_RcDiagPcapAutoSaveFileName_Type.__name__ = "DisplayString"
_RcDiagPcapAutoSaveFileName_Object = MibScalar
rcDiagPcapAutoSaveFileName = _RcDiagPcapAutoSaveFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 7),
    _RcDiagPcapAutoSaveFileName_Type()
)
rcDiagPcapAutoSaveFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAutoSaveFileName.setStatus("current")


class _RcDiagPcapAutoSaveDevice_Type(Integer32):
    """Custom type rcDiagPcapAutoSaveDevice based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("network", 1),
          ("pcmcia", 0))
    )


_RcDiagPcapAutoSaveDevice_Type.__name__ = "Integer32"
_RcDiagPcapAutoSaveDevice_Object = MibScalar
rcDiagPcapAutoSaveDevice = _RcDiagPcapAutoSaveDevice_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 8),
    _RcDiagPcapAutoSaveDevice_Type()
)
rcDiagPcapAutoSaveDevice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAutoSaveDevice.setStatus("current")
_RcDiagPcapAutoSaveNetworkIpAddress_Type = IpAddress
_RcDiagPcapAutoSaveNetworkIpAddress_Object = MibScalar
rcDiagPcapAutoSaveNetworkIpAddress = _RcDiagPcapAutoSaveNetworkIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 9),
    _RcDiagPcapAutoSaveNetworkIpAddress_Type()
)
rcDiagPcapAutoSaveNetworkIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAutoSaveNetworkIpAddress.setStatus("current")
_RcDiagPcapFilterTableSize_Type = Integer32
_RcDiagPcapFilterTableSize_Object = MibScalar
rcDiagPcapFilterTableSize = _RcDiagPcapFilterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 10),
    _RcDiagPcapFilterTableSize_Type()
)
rcDiagPcapFilterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapFilterTableSize.setStatus("current")
_RcDiagPcapFilterTable_Object = MibTable
rcDiagPcapFilterTable = _RcDiagPcapFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11)
)
if mibBuilder.loadTexts:
    rcDiagPcapFilterTable.setStatus("current")
_RcDiagPcapFilterEntry_Object = MibTableRow
rcDiagPcapFilterEntry = _RcDiagPcapFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1)
)
rcDiagPcapFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcDiagPcapFilterId"),
)
if mibBuilder.loadTexts:
    rcDiagPcapFilterEntry.setStatus("current")


class _RcDiagPcapFilterId_Type(Integer32):
    """Custom type rcDiagPcapFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcDiagPcapFilterId_Type.__name__ = "Integer32"
_RcDiagPcapFilterId_Object = MibTableColumn
rcDiagPcapFilterId = _RcDiagPcapFilterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 1),
    _RcDiagPcapFilterId_Type()
)
rcDiagPcapFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapFilterId.setStatus("current")


class _RcDiagPcapFilterEnable_Type(EnableValue):
    """Custom type rcDiagPcapFilterEnable based on EnableValue"""


_RcDiagPcapFilterEnable_Object = MibTableColumn
rcDiagPcapFilterEnable = _RcDiagPcapFilterEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 2),
    _RcDiagPcapFilterEnable_Type()
)
rcDiagPcapFilterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterEnable.setStatus("current")


class _RcDiagPcapFilterAction_Type(Integer32):
    """Custom type rcDiagPcapFilterAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("capture", 1),
          ("drop", 0),
          ("trigger-off", 3),
          ("trigger-on", 2))
    )


_RcDiagPcapFilterAction_Type.__name__ = "Integer32"
_RcDiagPcapFilterAction_Object = MibTableColumn
rcDiagPcapFilterAction = _RcDiagPcapFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 3),
    _RcDiagPcapFilterAction_Type()
)
rcDiagPcapFilterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterAction.setStatus("current")
_RcDiagPcapFilterSrcMac_Type = MacAddress
_RcDiagPcapFilterSrcMac_Object = MibTableColumn
rcDiagPcapFilterSrcMac = _RcDiagPcapFilterSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 4),
    _RcDiagPcapFilterSrcMac_Type()
)
rcDiagPcapFilterSrcMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterSrcMac.setStatus("current")


class _RcDiagPcapFilterSrcMask_Type(Integer32):
    """Custom type rcDiagPcapFilterSrcMask based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_RcDiagPcapFilterSrcMask_Type.__name__ = "Integer32"
_RcDiagPcapFilterSrcMask_Object = MibTableColumn
rcDiagPcapFilterSrcMask = _RcDiagPcapFilterSrcMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 5),
    _RcDiagPcapFilterSrcMask_Type()
)
rcDiagPcapFilterSrcMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterSrcMask.setStatus("current")


class _RcDiagPcapFilterIsInverseSrcMac_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInverseSrcMac based on TruthValue"""


_RcDiagPcapFilterIsInverseSrcMac_Object = MibTableColumn
rcDiagPcapFilterIsInverseSrcMac = _RcDiagPcapFilterIsInverseSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 6),
    _RcDiagPcapFilterIsInverseSrcMac_Type()
)
rcDiagPcapFilterIsInverseSrcMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInverseSrcMac.setStatus("current")
_RcDiagPcapFilterDstMac_Type = MacAddress
_RcDiagPcapFilterDstMac_Object = MibTableColumn
rcDiagPcapFilterDstMac = _RcDiagPcapFilterDstMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 7),
    _RcDiagPcapFilterDstMac_Type()
)
rcDiagPcapFilterDstMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterDstMac.setStatus("current")


class _RcDiagPcapFilterDstMask_Type(Integer32):
    """Custom type rcDiagPcapFilterDstMask based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_RcDiagPcapFilterDstMask_Type.__name__ = "Integer32"
_RcDiagPcapFilterDstMask_Object = MibTableColumn
rcDiagPcapFilterDstMask = _RcDiagPcapFilterDstMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 8),
    _RcDiagPcapFilterDstMask_Type()
)
rcDiagPcapFilterDstMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterDstMask.setStatus("current")


class _RcDiagPcapFilterIsInverseDstMac_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInverseDstMac based on TruthValue"""


_RcDiagPcapFilterIsInverseDstMac_Object = MibTableColumn
rcDiagPcapFilterIsInverseDstMac = _RcDiagPcapFilterIsInverseDstMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 9),
    _RcDiagPcapFilterIsInverseDstMac_Type()
)
rcDiagPcapFilterIsInverseDstMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInverseDstMac.setStatus("current")


class _RcDiagPcapFilterVlanId_Type(Integer32):
    """Custom type rcDiagPcapFilterVlanId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4092),
    )


_RcDiagPcapFilterVlanId_Type.__name__ = "Integer32"
_RcDiagPcapFilterVlanId_Object = MibTableColumn
rcDiagPcapFilterVlanId = _RcDiagPcapFilterVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 10),
    _RcDiagPcapFilterVlanId_Type()
)
rcDiagPcapFilterVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterVlanId.setStatus("current")


class _RcDiagPcapFilterToVlanId_Type(Integer32):
    """Custom type rcDiagPcapFilterToVlanId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4092),
    )


_RcDiagPcapFilterToVlanId_Type.__name__ = "Integer32"
_RcDiagPcapFilterToVlanId_Object = MibTableColumn
rcDiagPcapFilterToVlanId = _RcDiagPcapFilterToVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 11),
    _RcDiagPcapFilterToVlanId_Type()
)
rcDiagPcapFilterToVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterToVlanId.setStatus("current")


class _RcDiagPcapFilterIsInverseVlanId_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInverseVlanId based on TruthValue"""


_RcDiagPcapFilterIsInverseVlanId_Object = MibTableColumn
rcDiagPcapFilterIsInverseVlanId = _RcDiagPcapFilterIsInverseVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 12),
    _RcDiagPcapFilterIsInverseVlanId_Type()
)
rcDiagPcapFilterIsInverseVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInverseVlanId.setStatus("current")


class _RcDiagPcapFilterPbit_Type(Integer32):
    """Custom type rcDiagPcapFilterPbit based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcDiagPcapFilterPbit_Type.__name__ = "Integer32"
_RcDiagPcapFilterPbit_Object = MibTableColumn
rcDiagPcapFilterPbit = _RcDiagPcapFilterPbit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 13),
    _RcDiagPcapFilterPbit_Type()
)
rcDiagPcapFilterPbit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterPbit.setStatus("current")


class _RcDiagPcapFilterToPbit_Type(Integer32):
    """Custom type rcDiagPcapFilterToPbit based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcDiagPcapFilterToPbit_Type.__name__ = "Integer32"
_RcDiagPcapFilterToPbit_Object = MibTableColumn
rcDiagPcapFilterToPbit = _RcDiagPcapFilterToPbit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 14),
    _RcDiagPcapFilterToPbit_Type()
)
rcDiagPcapFilterToPbit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterToPbit.setStatus("current")


class _RcDiagPcapFilterIsInversePbit_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInversePbit based on TruthValue"""


_RcDiagPcapFilterIsInversePbit_Object = MibTableColumn
rcDiagPcapFilterIsInversePbit = _RcDiagPcapFilterIsInversePbit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 15),
    _RcDiagPcapFilterIsInversePbit_Type()
)
rcDiagPcapFilterIsInversePbit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInversePbit.setStatus("current")


class _RcDiagPcapFilterEtherType_Type(Integer32):
    """Custom type rcDiagPcapFilterEtherType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcDiagPcapFilterEtherType_Type.__name__ = "Integer32"
_RcDiagPcapFilterEtherType_Object = MibTableColumn
rcDiagPcapFilterEtherType = _RcDiagPcapFilterEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 16),
    _RcDiagPcapFilterEtherType_Type()
)
rcDiagPcapFilterEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterEtherType.setStatus("current")


class _RcDiagPcapFilterToEtherType_Type(Integer32):
    """Custom type rcDiagPcapFilterToEtherType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcDiagPcapFilterToEtherType_Type.__name__ = "Integer32"
_RcDiagPcapFilterToEtherType_Object = MibTableColumn
rcDiagPcapFilterToEtherType = _RcDiagPcapFilterToEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 17),
    _RcDiagPcapFilterToEtherType_Type()
)
rcDiagPcapFilterToEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterToEtherType.setStatus("current")


class _RcDiagPcapFilterIsInverseEtherType_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInverseEtherType based on TruthValue"""


_RcDiagPcapFilterIsInverseEtherType_Object = MibTableColumn
rcDiagPcapFilterIsInverseEtherType = _RcDiagPcapFilterIsInverseEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 18),
    _RcDiagPcapFilterIsInverseEtherType_Type()
)
rcDiagPcapFilterIsInverseEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInverseEtherType.setStatus("current")


class _RcDiagPcapFilterProtocolType_Type(Integer32):
    """Custom type rcDiagPcapFilterProtocolType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcDiagPcapFilterProtocolType_Type.__name__ = "Integer32"
_RcDiagPcapFilterProtocolType_Object = MibTableColumn
rcDiagPcapFilterProtocolType = _RcDiagPcapFilterProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 19),
    _RcDiagPcapFilterProtocolType_Type()
)
rcDiagPcapFilterProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterProtocolType.setStatus("current")


class _RcDiagPcapFilterToProtocolType_Type(Integer32):
    """Custom type rcDiagPcapFilterToProtocolType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcDiagPcapFilterToProtocolType_Type.__name__ = "Integer32"
_RcDiagPcapFilterToProtocolType_Object = MibTableColumn
rcDiagPcapFilterToProtocolType = _RcDiagPcapFilterToProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 20),
    _RcDiagPcapFilterToProtocolType_Type()
)
rcDiagPcapFilterToProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterToProtocolType.setStatus("current")


class _RcDiagPcapFilterIsInverseProtocolType_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInverseProtocolType based on TruthValue"""


_RcDiagPcapFilterIsInverseProtocolType_Object = MibTableColumn
rcDiagPcapFilterIsInverseProtocolType = _RcDiagPcapFilterIsInverseProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 21),
    _RcDiagPcapFilterIsInverseProtocolType_Type()
)
rcDiagPcapFilterIsInverseProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInverseProtocolType.setStatus("current")
_RcDiagPcapFilterSrcIp_Type = IpAddress
_RcDiagPcapFilterSrcIp_Object = MibTableColumn
rcDiagPcapFilterSrcIp = _RcDiagPcapFilterSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 22),
    _RcDiagPcapFilterSrcIp_Type()
)
rcDiagPcapFilterSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterSrcIp.setStatus("current")
_RcDiagPcapFilterToSrcIp_Type = IpAddress
_RcDiagPcapFilterToSrcIp_Object = MibTableColumn
rcDiagPcapFilterToSrcIp = _RcDiagPcapFilterToSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 23),
    _RcDiagPcapFilterToSrcIp_Type()
)
rcDiagPcapFilterToSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterToSrcIp.setStatus("current")


class _RcDiagPcapFilterIsInverseSrcIp_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInverseSrcIp based on TruthValue"""


_RcDiagPcapFilterIsInverseSrcIp_Object = MibTableColumn
rcDiagPcapFilterIsInverseSrcIp = _RcDiagPcapFilterIsInverseSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 24),
    _RcDiagPcapFilterIsInverseSrcIp_Type()
)
rcDiagPcapFilterIsInverseSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInverseSrcIp.setStatus("current")
_RcDiagPcapFilterDstIp_Type = IpAddress
_RcDiagPcapFilterDstIp_Object = MibTableColumn
rcDiagPcapFilterDstIp = _RcDiagPcapFilterDstIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 25),
    _RcDiagPcapFilterDstIp_Type()
)
rcDiagPcapFilterDstIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterDstIp.setStatus("current")
_RcDiagPcapFilterToDstIp_Type = IpAddress
_RcDiagPcapFilterToDstIp_Object = MibTableColumn
rcDiagPcapFilterToDstIp = _RcDiagPcapFilterToDstIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 26),
    _RcDiagPcapFilterToDstIp_Type()
)
rcDiagPcapFilterToDstIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterToDstIp.setStatus("current")


class _RcDiagPcapFilterIsInverseDstIp_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInverseDstIp based on TruthValue"""


_RcDiagPcapFilterIsInverseDstIp_Object = MibTableColumn
rcDiagPcapFilterIsInverseDstIp = _RcDiagPcapFilterIsInverseDstIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 27),
    _RcDiagPcapFilterIsInverseDstIp_Type()
)
rcDiagPcapFilterIsInverseDstIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInverseDstIp.setStatus("current")


class _RcDiagPcapFilterDscp_Type(Integer32):
    """Custom type rcDiagPcapFilterDscp based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcDiagPcapFilterDscp_Type.__name__ = "Integer32"
_RcDiagPcapFilterDscp_Object = MibTableColumn
rcDiagPcapFilterDscp = _RcDiagPcapFilterDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 28),
    _RcDiagPcapFilterDscp_Type()
)
rcDiagPcapFilterDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterDscp.setStatus("current")


class _RcDiagPcapFilterToDscp_Type(Integer32):
    """Custom type rcDiagPcapFilterToDscp based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcDiagPcapFilterToDscp_Type.__name__ = "Integer32"
_RcDiagPcapFilterToDscp_Object = MibTableColumn
rcDiagPcapFilterToDscp = _RcDiagPcapFilterToDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 29),
    _RcDiagPcapFilterToDscp_Type()
)
rcDiagPcapFilterToDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterToDscp.setStatus("current")


class _RcDiagPcapFilterIsInverseDscp_Type(TruthValue):
    """Custom type rcDiagPcapFilterIsInverseDscp based on TruthValue"""


_RcDiagPcapFilterIsInverseDscp_Object = MibTableColumn
rcDiagPcapFilterIsInverseDscp = _RcDiagPcapFilterIsInverseDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 30),
    _RcDiagPcapFilterIsInverseDscp_Type()
)
rcDiagPcapFilterIsInverseDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterIsInverseDscp.setStatus("current")
_RcDiagPcapFilterRowStatus_Type = RowStatus
_RcDiagPcapFilterRowStatus_Object = MibTableColumn
rcDiagPcapFilterRowStatus = _RcDiagPcapFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 31),
    _RcDiagPcapFilterRowStatus_Type()
)
rcDiagPcapFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterRowStatus.setStatus("current")


class _RcDiagPcapFilterDscpMatchZero_Type(TruthValue):
    """Custom type rcDiagPcapFilterDscpMatchZero based on TruthValue"""


_RcDiagPcapFilterDscpMatchZero_Object = MibTableColumn
rcDiagPcapFilterDscpMatchZero = _RcDiagPcapFilterDscpMatchZero_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 32),
    _RcDiagPcapFilterDscpMatchZero_Type()
)
rcDiagPcapFilterDscpMatchZero.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterDscpMatchZero.setStatus("current")


class _RcDiagPcapFilterPbitMatchZero_Type(TruthValue):
    """Custom type rcDiagPcapFilterPbitMatchZero based on TruthValue"""


_RcDiagPcapFilterPbitMatchZero_Object = MibTableColumn
rcDiagPcapFilterPbitMatchZero = _RcDiagPcapFilterPbitMatchZero_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 11, 1, 33),
    _RcDiagPcapFilterPbitMatchZero_Type()
)
rcDiagPcapFilterPbitMatchZero.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapFilterPbitMatchZero.setStatus("current")
_RcDiagPcapAdvancedFilterTableSize_Type = Integer32
_RcDiagPcapAdvancedFilterTableSize_Object = MibScalar
rcDiagPcapAdvancedFilterTableSize = _RcDiagPcapAdvancedFilterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 12),
    _RcDiagPcapAdvancedFilterTableSize_Type()
)
rcDiagPcapAdvancedFilterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterTableSize.setStatus("current")
_RcDiagPcapAdvancedFilterTable_Object = MibTable
rcDiagPcapAdvancedFilterTable = _RcDiagPcapAdvancedFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13)
)
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterTable.setStatus("current")
_RcDiagPcapAdvancedFilterEntry_Object = MibTableRow
rcDiagPcapAdvancedFilterEntry = _RcDiagPcapAdvancedFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1)
)
rcDiagPcapAdvancedFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcDiagPcapAdvancedFilterId"),
)
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterEntry.setStatus("current")


class _RcDiagPcapAdvancedFilterId_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcDiagPcapAdvancedFilterId_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterId_Object = MibTableColumn
rcDiagPcapAdvancedFilterId = _RcDiagPcapAdvancedFilterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 1),
    _RcDiagPcapAdvancedFilterId_Type()
)
rcDiagPcapAdvancedFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterId.setStatus("current")


class _RcDiagPcapAdvancedFilterUdpPort_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterUdpPort based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcDiagPcapAdvancedFilterUdpPort_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterUdpPort_Object = MibTableColumn
rcDiagPcapAdvancedFilterUdpPort = _RcDiagPcapAdvancedFilterUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 2),
    _RcDiagPcapAdvancedFilterUdpPort_Type()
)
rcDiagPcapAdvancedFilterUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterUdpPort.setStatus("current")


class _RcDiagPcapAdvancedFilterToUdpPort_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterToUdpPort based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcDiagPcapAdvancedFilterToUdpPort_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterToUdpPort_Object = MibTableColumn
rcDiagPcapAdvancedFilterToUdpPort = _RcDiagPcapAdvancedFilterToUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 3),
    _RcDiagPcapAdvancedFilterToUdpPort_Type()
)
rcDiagPcapAdvancedFilterToUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterToUdpPort.setStatus("current")


class _RcDiagPcapAdvancedFilterIsInverseUdpPort_Type(TruthValue):
    """Custom type rcDiagPcapAdvancedFilterIsInverseUdpPort based on TruthValue"""


_RcDiagPcapAdvancedFilterIsInverseUdpPort_Object = MibTableColumn
rcDiagPcapAdvancedFilterIsInverseUdpPort = _RcDiagPcapAdvancedFilterIsInverseUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 4),
    _RcDiagPcapAdvancedFilterIsInverseUdpPort_Type()
)
rcDiagPcapAdvancedFilterIsInverseUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterIsInverseUdpPort.setStatus("current")


class _RcDiagPcapAdvancedFilterTcpPort_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterTcpPort based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcDiagPcapAdvancedFilterTcpPort_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterTcpPort_Object = MibTableColumn
rcDiagPcapAdvancedFilterTcpPort = _RcDiagPcapAdvancedFilterTcpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 5),
    _RcDiagPcapAdvancedFilterTcpPort_Type()
)
rcDiagPcapAdvancedFilterTcpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterTcpPort.setStatus("current")


class _RcDiagPcapAdvancedFilterToTcpPort_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterToTcpPort based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcDiagPcapAdvancedFilterToTcpPort_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterToTcpPort_Object = MibTableColumn
rcDiagPcapAdvancedFilterToTcpPort = _RcDiagPcapAdvancedFilterToTcpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 6),
    _RcDiagPcapAdvancedFilterToTcpPort_Type()
)
rcDiagPcapAdvancedFilterToTcpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterToTcpPort.setStatus("current")


class _RcDiagPcapAdvancedFilterIsInverseTcpPort_Type(TruthValue):
    """Custom type rcDiagPcapAdvancedFilterIsInverseTcpPort based on TruthValue"""


_RcDiagPcapAdvancedFilterIsInverseTcpPort_Object = MibTableColumn
rcDiagPcapAdvancedFilterIsInverseTcpPort = _RcDiagPcapAdvancedFilterIsInverseTcpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 7),
    _RcDiagPcapAdvancedFilterIsInverseTcpPort_Type()
)
rcDiagPcapAdvancedFilterIsInverseTcpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterIsInverseTcpPort.setStatus("current")


class _RcDiagPcapAdvancedFilterUserDefinedData_Type(DisplayString):
    """Custom type rcDiagPcapAdvancedFilterUserDefinedData based on DisplayString"""
    defaultValue = OctetString("\\0")


_RcDiagPcapAdvancedFilterUserDefinedData_Object = MibTableColumn
rcDiagPcapAdvancedFilterUserDefinedData = _RcDiagPcapAdvancedFilterUserDefinedData_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 8),
    _RcDiagPcapAdvancedFilterUserDefinedData_Type()
)
rcDiagPcapAdvancedFilterUserDefinedData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterUserDefinedData.setStatus("current")


class _RcDiagPcapAdvancedFilterUserDefinedDataSize_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterUserDefinedDataSize based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50),
    )


_RcDiagPcapAdvancedFilterUserDefinedDataSize_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterUserDefinedDataSize_Object = MibTableColumn
rcDiagPcapAdvancedFilterUserDefinedDataSize = _RcDiagPcapAdvancedFilterUserDefinedDataSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 9),
    _RcDiagPcapAdvancedFilterUserDefinedDataSize_Type()
)
rcDiagPcapAdvancedFilterUserDefinedDataSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterUserDefinedDataSize.setStatus("current")


class _RcDiagPcapAdvancedFilterUserDefinedOffset_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterUserDefinedOffset based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9600),
    )


_RcDiagPcapAdvancedFilterUserDefinedOffset_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterUserDefinedOffset_Object = MibTableColumn
rcDiagPcapAdvancedFilterUserDefinedOffset = _RcDiagPcapAdvancedFilterUserDefinedOffset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 10),
    _RcDiagPcapAdvancedFilterUserDefinedOffset_Type()
)
rcDiagPcapAdvancedFilterUserDefinedOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterUserDefinedOffset.setStatus("current")


class _RcDiagPcapAdvancedFilterIsInverseUserDefined_Type(TruthValue):
    """Custom type rcDiagPcapAdvancedFilterIsInverseUserDefined based on TruthValue"""


_RcDiagPcapAdvancedFilterIsInverseUserDefined_Object = MibTableColumn
rcDiagPcapAdvancedFilterIsInverseUserDefined = _RcDiagPcapAdvancedFilterIsInverseUserDefined_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 11),
    _RcDiagPcapAdvancedFilterIsInverseUserDefined_Type()
)
rcDiagPcapAdvancedFilterIsInverseUserDefined.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterIsInverseUserDefined.setStatus("current")


class _RcDiagPcapAdvancedFilterTimer_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_RcDiagPcapAdvancedFilterTimer_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterTimer_Object = MibTableColumn
rcDiagPcapAdvancedFilterTimer = _RcDiagPcapAdvancedFilterTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 12),
    _RcDiagPcapAdvancedFilterTimer_Type()
)
rcDiagPcapAdvancedFilterTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterTimer.setStatus("current")


class _RcDiagPcapAdvancedFilterPacketCount_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterPacketCount based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcDiagPcapAdvancedFilterPacketCount_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterPacketCount_Object = MibTableColumn
rcDiagPcapAdvancedFilterPacketCount = _RcDiagPcapAdvancedFilterPacketCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 13),
    _RcDiagPcapAdvancedFilterPacketCount_Type()
)
rcDiagPcapAdvancedFilterPacketCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterPacketCount.setStatus("current")


class _RcDiagPcapAdvancedFilterRefreshTimer_Type(Integer32):
    """Custom type rcDiagPcapAdvancedFilterRefreshTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_RcDiagPcapAdvancedFilterRefreshTimer_Type.__name__ = "Integer32"
_RcDiagPcapAdvancedFilterRefreshTimer_Object = MibTableColumn
rcDiagPcapAdvancedFilterRefreshTimer = _RcDiagPcapAdvancedFilterRefreshTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 14),
    _RcDiagPcapAdvancedFilterRefreshTimer_Type()
)
rcDiagPcapAdvancedFilterRefreshTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterRefreshTimer.setStatus("current")
_RcDiagPcapAdvancedFilterRowStatus_Type = RowStatus
_RcDiagPcapAdvancedFilterRowStatus_Object = MibTableColumn
rcDiagPcapAdvancedFilterRowStatus = _RcDiagPcapAdvancedFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 13, 1, 15),
    _RcDiagPcapAdvancedFilterRowStatus_Type()
)
rcDiagPcapAdvancedFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapAdvancedFilterRowStatus.setStatus("current")
_RcDiagPcapCopyFileName_Type = DisplayString
_RcDiagPcapCopyFileName_Object = MibScalar
rcDiagPcapCopyFileName = _RcDiagPcapCopyFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 14),
    _RcDiagPcapCopyFileName_Type()
)
rcDiagPcapCopyFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapCopyFileName.setStatus("current")


class _RcDiagPcapResetStat_Type(Integer32):
    """Custom type rcDiagPcapResetStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("resetStat", 2))
    )


_RcDiagPcapResetStat_Type.__name__ = "Integer32"
_RcDiagPcapResetStat_Object = MibScalar
rcDiagPcapResetStat = _RcDiagPcapResetStat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 15),
    _RcDiagPcapResetStat_Type()
)
rcDiagPcapResetStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapResetStat.setStatus("current")
_RcDiagPcapStatPacketCapacityCount_Type = DisplayString
_RcDiagPcapStatPacketCapacityCount_Object = MibScalar
rcDiagPcapStatPacketCapacityCount = _RcDiagPcapStatPacketCapacityCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 16),
    _RcDiagPcapStatPacketCapacityCount_Type()
)
rcDiagPcapStatPacketCapacityCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapStatPacketCapacityCount.setStatus("current")
_RcDiagPcapStatNumberOfPacketsReceived_Type = DisplayString
_RcDiagPcapStatNumberOfPacketsReceived_Object = MibScalar
rcDiagPcapStatNumberOfPacketsReceived = _RcDiagPcapStatNumberOfPacketsReceived_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 17),
    _RcDiagPcapStatNumberOfPacketsReceived_Type()
)
rcDiagPcapStatNumberOfPacketsReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapStatNumberOfPacketsReceived.setStatus("current")
_RcDiagPcapStatNumberOfPacketsAccumulated_Type = DisplayString
_RcDiagPcapStatNumberOfPacketsAccumulated_Object = MibScalar
rcDiagPcapStatNumberOfPacketsAccumulated = _RcDiagPcapStatNumberOfPacketsAccumulated_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 18),
    _RcDiagPcapStatNumberOfPacketsAccumulated_Type()
)
rcDiagPcapStatNumberOfPacketsAccumulated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapStatNumberOfPacketsAccumulated.setStatus("current")
_RcDiagPcapStatNumberOfPacketsDroppedInPcapEngine_Type = DisplayString
_RcDiagPcapStatNumberOfPacketsDroppedInPcapEngine_Object = MibScalar
rcDiagPcapStatNumberOfPacketsDroppedInPcapEngine = _RcDiagPcapStatNumberOfPacketsDroppedInPcapEngine_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 19),
    _RcDiagPcapStatNumberOfPacketsDroppedInPcapEngine_Type()
)
rcDiagPcapStatNumberOfPacketsDroppedInPcapEngine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapStatNumberOfPacketsDroppedInPcapEngine.setStatus("current")
_RcDiagPcapStatNumberOfPacketsDroppedInHardware_Type = DisplayString
_RcDiagPcapStatNumberOfPacketsDroppedInHardware_Object = MibScalar
rcDiagPcapStatNumberOfPacketsDroppedInHardware = _RcDiagPcapStatNumberOfPacketsDroppedInHardware_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 20),
    _RcDiagPcapStatNumberOfPacketsDroppedInHardware_Type()
)
rcDiagPcapStatNumberOfPacketsDroppedInHardware.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapStatNumberOfPacketsDroppedInHardware.setStatus("current")
_RcDiagPcapDataValid_Type = TruthValue
_RcDiagPcapDataValid_Object = MibScalar
rcDiagPcapDataValid = _RcDiagPcapDataValid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 21),
    _RcDiagPcapDataValid_Type()
)
rcDiagPcapDataValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcDiagPcapDataValid.setStatus("current")


class _RcDiagPcapEtherTypeForSvlanLevel_Type(Integer32):
    """Custom type rcDiagPcapEtherTypeForSvlanLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1501, 65535),
    )


_RcDiagPcapEtherTypeForSvlanLevel_Type.__name__ = "Integer32"
_RcDiagPcapEtherTypeForSvlanLevel_Object = MibScalar
rcDiagPcapEtherTypeForSvlanLevel = _RcDiagPcapEtherTypeForSvlanLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 23, 15, 22),
    _RcDiagPcapEtherTypeForSvlanLevel_Type()
)
rcDiagPcapEtherTypeForSvlanLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcDiagPcapEtherTypeForSvlanLevel.setStatus("current")
_RcIpx_ObjectIdentity = ObjectIdentity
rcIpx = _RcIpx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24)
)


class _RcIpxRoutingEnable_Type(TruthValue):
    """Custom type rcIpxRoutingEnable based on TruthValue"""


_RcIpxRoutingEnable_Object = MibScalar
rcIpxRoutingEnable = _RcIpxRoutingEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 1),
    _RcIpxRoutingEnable_Type()
)
rcIpxRoutingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRoutingEnable.setStatus("current")
_RcIpxAddrTable_Object = MibTable
rcIpxAddrTable = _RcIpxAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 2)
)
if mibBuilder.loadTexts:
    rcIpxAddrTable.setStatus("current")
_RcIpxAddrEntry_Object = MibTableRow
rcIpxAddrEntry = _RcIpxAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 2, 1)
)
rcIpxAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxAddrVlanId"),
    (0, "RAPID-CITY", "rcIpxAddrNetAddr"),
    (0, "RAPID-CITY", "rcIpxAddrEncap"),
)
if mibBuilder.loadTexts:
    rcIpxAddrEntry.setStatus("current")


class _RcIpxAddrVlanId_Type(Integer32):
    """Custom type rcIpxAddrVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpxAddrVlanId_Type.__name__ = "Integer32"
_RcIpxAddrVlanId_Object = MibTableColumn
rcIpxAddrVlanId = _RcIpxAddrVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 2, 1, 1),
    _RcIpxAddrVlanId_Type()
)
rcIpxAddrVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxAddrVlanId.setStatus("current")


class _RcIpxAddrNetAddr_Type(OctetString):
    """Custom type rcIpxAddrNetAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxAddrNetAddr_Type.__name__ = "OctetString"
_RcIpxAddrNetAddr_Object = MibTableColumn
rcIpxAddrNetAddr = _RcIpxAddrNetAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 2, 1, 2),
    _RcIpxAddrNetAddr_Type()
)
rcIpxAddrNetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxAddrNetAddr.setStatus("current")


class _RcIpxAddrEncap_Type(Integer32):
    """Custom type rcIpxAddrEncap based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ethernetii", 1),
          ("llc", 3),
          ("none", 0),
          ("raw", 4),
          ("snap", 2))
    )


_RcIpxAddrEncap_Type.__name__ = "Integer32"
_RcIpxAddrEncap_Object = MibTableColumn
rcIpxAddrEncap = _RcIpxAddrEncap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 2, 1, 3),
    _RcIpxAddrEncap_Type()
)
rcIpxAddrEncap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxAddrEncap.setStatus("current")
_RcIpxAddrEntryStatus_Type = RowStatus
_RcIpxAddrEntryStatus_Object = MibTableColumn
rcIpxAddrEntryStatus = _RcIpxAddrEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 2, 1, 4),
    _RcIpxAddrEntryStatus_Type()
)
rcIpxAddrEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxAddrEntryStatus.setStatus("current")


class _RcIpxAddrTicks_Type(Integer32):
    """Custom type rcIpxAddrTicks based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcIpxAddrTicks_Type.__name__ = "Integer32"
_RcIpxAddrTicks_Object = MibTableColumn
rcIpxAddrTicks = _RcIpxAddrTicks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 2, 1, 5),
    _RcIpxAddrTicks_Type()
)
rcIpxAddrTicks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxAddrTicks.setStatus("current")
_RcIpxPolicyNetTableSize_Type = Integer32
_RcIpxPolicyNetTableSize_Object = MibScalar
rcIpxPolicyNetTableSize = _RcIpxPolicyNetTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 3),
    _RcIpxPolicyNetTableSize_Type()
)
rcIpxPolicyNetTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxPolicyNetTableSize.setStatus("current")
_RcIpxPolicyNetTable_Object = MibTable
rcIpxPolicyNetTable = _RcIpxPolicyNetTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 4)
)
if mibBuilder.loadTexts:
    rcIpxPolicyNetTable.setStatus("current")
_RcIpxPolicyNetEntry_Object = MibTableRow
rcIpxPolicyNetEntry = _RcIpxPolicyNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 4, 1)
)
rcIpxPolicyNetEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxPolicyNetId"),
    (0, "RAPID-CITY", "rcIpxPolicyNetFromNet"),
    (0, "RAPID-CITY", "rcIpxPolicyNetToNet"),
)
if mibBuilder.loadTexts:
    rcIpxPolicyNetEntry.setStatus("current")


class _RcIpxPolicyNetId_Type(Integer32):
    """Custom type rcIpxPolicyNetId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpxPolicyNetId_Type.__name__ = "Integer32"
_RcIpxPolicyNetId_Object = MibTableColumn
rcIpxPolicyNetId = _RcIpxPolicyNetId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 4, 1, 1),
    _RcIpxPolicyNetId_Type()
)
rcIpxPolicyNetId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyNetId.setStatus("current")


class _RcIpxPolicyNetFromNet_Type(OctetString):
    """Custom type rcIpxPolicyNetFromNet based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxPolicyNetFromNet_Type.__name__ = "OctetString"
_RcIpxPolicyNetFromNet_Object = MibTableColumn
rcIpxPolicyNetFromNet = _RcIpxPolicyNetFromNet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 4, 1, 2),
    _RcIpxPolicyNetFromNet_Type()
)
rcIpxPolicyNetFromNet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyNetFromNet.setStatus("current")


class _RcIpxPolicyNetToNet_Type(OctetString):
    """Custom type rcIpxPolicyNetToNet based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxPolicyNetToNet_Type.__name__ = "OctetString"
_RcIpxPolicyNetToNet_Object = MibTableColumn
rcIpxPolicyNetToNet = _RcIpxPolicyNetToNet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 4, 1, 3),
    _RcIpxPolicyNetToNet_Type()
)
rcIpxPolicyNetToNet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyNetToNet.setStatus("current")


class _RcIpxPolicyNetName_Type(DisplayString):
    """Custom type rcIpxPolicyNetName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpxPolicyNetName_Type.__name__ = "DisplayString"
_RcIpxPolicyNetName_Object = MibTableColumn
rcIpxPolicyNetName = _RcIpxPolicyNetName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 4, 1, 4),
    _RcIpxPolicyNetName_Type()
)
rcIpxPolicyNetName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyNetName.setStatus("current")
_RcIpxPolicyNetRowStatus_Type = RowStatus
_RcIpxPolicyNetRowStatus_Object = MibTableColumn
rcIpxPolicyNetRowStatus = _RcIpxPolicyNetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 4, 1, 5),
    _RcIpxPolicyNetRowStatus_Type()
)
rcIpxPolicyNetRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyNetRowStatus.setStatus("current")
_RcIpxPolicyServTableSize_Type = Integer32
_RcIpxPolicyServTableSize_Object = MibScalar
rcIpxPolicyServTableSize = _RcIpxPolicyServTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 5),
    _RcIpxPolicyServTableSize_Type()
)
rcIpxPolicyServTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxPolicyServTableSize.setStatus("current")
_RcIpxPolicyServTable_Object = MibTable
rcIpxPolicyServTable = _RcIpxPolicyServTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 6)
)
if mibBuilder.loadTexts:
    rcIpxPolicyServTable.setStatus("current")
_RcIpxPolicyServEntry_Object = MibTableRow
rcIpxPolicyServEntry = _RcIpxPolicyServEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 6, 1)
)
rcIpxPolicyServEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxPolicyServId"),
    (0, "RAPID-CITY", "rcIpxPolicyServServiceType"),
    (0, "RAPID-CITY", "rcIpxPolicyServServiceName"),
)
if mibBuilder.loadTexts:
    rcIpxPolicyServEntry.setStatus("current")
_RcIpxPolicyServId_Type = Integer32
_RcIpxPolicyServId_Object = MibTableColumn
rcIpxPolicyServId = _RcIpxPolicyServId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 6, 1, 1),
    _RcIpxPolicyServId_Type()
)
rcIpxPolicyServId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxPolicyServId.setStatus("current")


class _RcIpxPolicyServServiceType_Type(Integer32):
    """Custom type rcIpxPolicyServServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpxPolicyServServiceType_Type.__name__ = "Integer32"
_RcIpxPolicyServServiceType_Object = MibTableColumn
rcIpxPolicyServServiceType = _RcIpxPolicyServServiceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 6, 1, 2),
    _RcIpxPolicyServServiceType_Type()
)
rcIpxPolicyServServiceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxPolicyServServiceType.setStatus("current")


class _RcIpxPolicyServServiceName_Type(DisplayString):
    """Custom type rcIpxPolicyServServiceName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 47),
    )


_RcIpxPolicyServServiceName_Type.__name__ = "DisplayString"
_RcIpxPolicyServServiceName_Object = MibTableColumn
rcIpxPolicyServServiceName = _RcIpxPolicyServServiceName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 6, 1, 3),
    _RcIpxPolicyServServiceName_Type()
)
rcIpxPolicyServServiceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxPolicyServServiceName.setStatus("current")


class _RcIpxPolicyServName_Type(DisplayString):
    """Custom type rcIpxPolicyServName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpxPolicyServName_Type.__name__ = "DisplayString"
_RcIpxPolicyServName_Object = MibTableColumn
rcIpxPolicyServName = _RcIpxPolicyServName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 6, 1, 4),
    _RcIpxPolicyServName_Type()
)
rcIpxPolicyServName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyServName.setStatus("current")
_RcIpxPolicyServRowStatus_Type = RowStatus
_RcIpxPolicyServRowStatus_Object = MibTableColumn
rcIpxPolicyServRowStatus = _RcIpxPolicyServRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 6, 1, 5),
    _RcIpxPolicyServRowStatus_Type()
)
rcIpxPolicyServRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyServRowStatus.setStatus("current")
_RcIpxPolicyListTableSize_Type = Integer32
_RcIpxPolicyListTableSize_Object = MibScalar
rcIpxPolicyListTableSize = _RcIpxPolicyListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 7),
    _RcIpxPolicyListTableSize_Type()
)
rcIpxPolicyListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxPolicyListTableSize.setStatus("current")
_RcIpxPolicyListTable_Object = MibTable
rcIpxPolicyListTable = _RcIpxPolicyListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8)
)
if mibBuilder.loadTexts:
    rcIpxPolicyListTable.setStatus("current")
_RcIpxPolicyListEntry_Object = MibTableRow
rcIpxPolicyListEntry = _RcIpxPolicyListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1)
)
rcIpxPolicyListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxPolicyListId"),
    (0, "RAPID-CITY", "rcIpxPolicyListSeqnum"),
)
if mibBuilder.loadTexts:
    rcIpxPolicyListEntry.setStatus("current")


class _RcIpxPolicyListId_Type(Integer32):
    """Custom type rcIpxPolicyListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpxPolicyListId_Type.__name__ = "Integer32"
_RcIpxPolicyListId_Object = MibTableColumn
rcIpxPolicyListId = _RcIpxPolicyListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 1),
    _RcIpxPolicyListId_Type()
)
rcIpxPolicyListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxPolicyListId.setStatus("current")


class _RcIpxPolicyListSeqnum_Type(Integer32):
    """Custom type rcIpxPolicyListSeqnum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpxPolicyListSeqnum_Type.__name__ = "Integer32"
_RcIpxPolicyListSeqnum_Object = MibTableColumn
rcIpxPolicyListSeqnum = _RcIpxPolicyListSeqnum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 2),
    _RcIpxPolicyListSeqnum_Type()
)
rcIpxPolicyListSeqnum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxPolicyListSeqnum.setStatus("current")


class _RcIpxPolicyListName_Type(DisplayString):
    """Custom type rcIpxPolicyListName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RcIpxPolicyListName_Type.__name__ = "DisplayString"
_RcIpxPolicyListName_Object = MibTableColumn
rcIpxPolicyListName = _RcIpxPolicyListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 3),
    _RcIpxPolicyListName_Type()
)
rcIpxPolicyListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListName.setStatus("current")


class _RcIpxPolicyListEnable_Type(TruthValue):
    """Custom type rcIpxPolicyListEnable based on TruthValue"""


_RcIpxPolicyListEnable_Object = MibTableColumn
rcIpxPolicyListEnable = _RcIpxPolicyListEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 4),
    _RcIpxPolicyListEnable_Type()
)
rcIpxPolicyListEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListEnable.setStatus("current")


class _RcIpxPolicyListAction_Type(Integer32):
    """Custom type rcIpxPolicyListAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 2),
          ("permit", 1))
    )


_RcIpxPolicyListAction_Type.__name__ = "Integer32"
_RcIpxPolicyListAction_Object = MibTableColumn
rcIpxPolicyListAction = _RcIpxPolicyListAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 5),
    _RcIpxPolicyListAction_Type()
)
rcIpxPolicyListAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListAction.setStatus("current")


class _RcIpxPolicyListRouteSource_Type(Integer32):
    """Custom type rcIpxPolicyListRouteSource based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_RcIpxPolicyListRouteSource_Type.__name__ = "Integer32"
_RcIpxPolicyListRouteSource_Object = MibTableColumn
rcIpxPolicyListRouteSource = _RcIpxPolicyListRouteSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 6),
    _RcIpxPolicyListRouteSource_Type()
)
rcIpxPolicyListRouteSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListRouteSource.setStatus("current")
_RcIpxPolicyListMatchNetList_Type = DisplayString
_RcIpxPolicyListMatchNetList_Object = MibTableColumn
rcIpxPolicyListMatchNetList = _RcIpxPolicyListMatchNetList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 7),
    _RcIpxPolicyListMatchNetList_Type()
)
rcIpxPolicyListMatchNetList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListMatchNetList.setStatus("current")
_RcIpxPolicyListMatchServList_Type = DisplayString
_RcIpxPolicyListMatchServList_Object = MibTableColumn
rcIpxPolicyListMatchServList = _RcIpxPolicyListMatchServList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 8),
    _RcIpxPolicyListMatchServList_Type()
)
rcIpxPolicyListMatchServList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListMatchServList.setStatus("current")


class _RcIpxPolicyListHops_Type(Integer32):
    """Custom type rcIpxPolicyListHops based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RcIpxPolicyListHops_Type.__name__ = "Integer32"
_RcIpxPolicyListHops_Object = MibTableColumn
rcIpxPolicyListHops = _RcIpxPolicyListHops_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 9),
    _RcIpxPolicyListHops_Type()
)
rcIpxPolicyListHops.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListHops.setStatus("current")


class _RcIpxPolicyListTicks_Type(Integer32):
    """Custom type rcIpxPolicyListTicks based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpxPolicyListTicks_Type.__name__ = "Integer32"
_RcIpxPolicyListTicks_Object = MibTableColumn
rcIpxPolicyListTicks = _RcIpxPolicyListTicks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 10),
    _RcIpxPolicyListTicks_Type()
)
rcIpxPolicyListTicks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListTicks.setStatus("current")
_RcIpxPolicyListRowStatus_Type = RowStatus
_RcIpxPolicyListRowStatus_Object = MibTableColumn
rcIpxPolicyListRowStatus = _RcIpxPolicyListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 8, 1, 11),
    _RcIpxPolicyListRowStatus_Type()
)
rcIpxPolicyListRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxPolicyListRowStatus.setStatus("current")
_RcIpxRipOutFilterTableSize_Type = Integer32
_RcIpxRipOutFilterTableSize_Object = MibScalar
rcIpxRipOutFilterTableSize = _RcIpxRipOutFilterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 9),
    _RcIpxRipOutFilterTableSize_Type()
)
rcIpxRipOutFilterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRipOutFilterTableSize.setStatus("current")
_RcIpxRipOutFilterTable_Object = MibTable
rcIpxRipOutFilterTable = _RcIpxRipOutFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 10)
)
if mibBuilder.loadTexts:
    rcIpxRipOutFilterTable.setStatus("current")
_RcIpxRipOutFilterEntry_Object = MibTableRow
rcIpxRipOutFilterEntry = _RcIpxRipOutFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 10, 1)
)
rcIpxRipOutFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxRipOutFilterInterface"),
)
if mibBuilder.loadTexts:
    rcIpxRipOutFilterEntry.setStatus("current")


class _RcIpxRipOutFilterInterface_Type(OctetString):
    """Custom type rcIpxRipOutFilterInterface based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxRipOutFilterInterface_Type.__name__ = "OctetString"
_RcIpxRipOutFilterInterface_Object = MibTableColumn
rcIpxRipOutFilterInterface = _RcIpxRipOutFilterInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 10, 1, 1),
    _RcIpxRipOutFilterInterface_Type()
)
rcIpxRipOutFilterInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipOutFilterInterface.setStatus("current")
_RcIpxRipOutFilterPolicyName_Type = DisplayString
_RcIpxRipOutFilterPolicyName_Object = MibTableColumn
rcIpxRipOutFilterPolicyName = _RcIpxRipOutFilterPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 10, 1, 2),
    _RcIpxRipOutFilterPolicyName_Type()
)
rcIpxRipOutFilterPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipOutFilterPolicyName.setStatus("current")
_RcIpxRipOutFilterRowStatus_Type = RowStatus
_RcIpxRipOutFilterRowStatus_Object = MibTableColumn
rcIpxRipOutFilterRowStatus = _RcIpxRipOutFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 10, 1, 3),
    _RcIpxRipOutFilterRowStatus_Type()
)
rcIpxRipOutFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipOutFilterRowStatus.setStatus("current")
_RcIpxSapOutFilterTableSize_Type = Integer32
_RcIpxSapOutFilterTableSize_Object = MibScalar
rcIpxSapOutFilterTableSize = _RcIpxSapOutFilterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 11),
    _RcIpxSapOutFilterTableSize_Type()
)
rcIpxSapOutFilterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxSapOutFilterTableSize.setStatus("current")
_RcIpxSapOutFilterTable_Object = MibTable
rcIpxSapOutFilterTable = _RcIpxSapOutFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 12)
)
if mibBuilder.loadTexts:
    rcIpxSapOutFilterTable.setStatus("current")
_RcIpxSapOutFilterEntry_Object = MibTableRow
rcIpxSapOutFilterEntry = _RcIpxSapOutFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 12, 1)
)
rcIpxSapOutFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxSapOutFilterInterface"),
)
if mibBuilder.loadTexts:
    rcIpxSapOutFilterEntry.setStatus("current")


class _RcIpxSapOutFilterInterface_Type(OctetString):
    """Custom type rcIpxSapOutFilterInterface based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxSapOutFilterInterface_Type.__name__ = "OctetString"
_RcIpxSapOutFilterInterface_Object = MibTableColumn
rcIpxSapOutFilterInterface = _RcIpxSapOutFilterInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 12, 1, 1),
    _RcIpxSapOutFilterInterface_Type()
)
rcIpxSapOutFilterInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxSapOutFilterInterface.setStatus("current")
_RcIpxSapOutFilterPolicyName_Type = DisplayString
_RcIpxSapOutFilterPolicyName_Object = MibTableColumn
rcIpxSapOutFilterPolicyName = _RcIpxSapOutFilterPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 12, 1, 2),
    _RcIpxSapOutFilterPolicyName_Type()
)
rcIpxSapOutFilterPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxSapOutFilterPolicyName.setStatus("current")
_RcIpxSapOutFilterRowStatus_Type = RowStatus
_RcIpxSapOutFilterRowStatus_Object = MibTableColumn
rcIpxSapOutFilterRowStatus = _RcIpxSapOutFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 12, 1, 3),
    _RcIpxSapOutFilterRowStatus_Type()
)
rcIpxSapOutFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxSapOutFilterRowStatus.setStatus("current")
_RcIpxRipInFilterTableSize_Type = Integer32
_RcIpxRipInFilterTableSize_Object = MibScalar
rcIpxRipInFilterTableSize = _RcIpxRipInFilterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 13),
    _RcIpxRipInFilterTableSize_Type()
)
rcIpxRipInFilterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRipInFilterTableSize.setStatus("current")
_RcIpxRipInFilterTable_Object = MibTable
rcIpxRipInFilterTable = _RcIpxRipInFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 14)
)
if mibBuilder.loadTexts:
    rcIpxRipInFilterTable.setStatus("current")
_RcIpxRipInFilterEntry_Object = MibTableRow
rcIpxRipInFilterEntry = _RcIpxRipInFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 14, 1)
)
rcIpxRipInFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxRipInFilterInterface"),
)
if mibBuilder.loadTexts:
    rcIpxRipInFilterEntry.setStatus("current")


class _RcIpxRipInFilterInterface_Type(OctetString):
    """Custom type rcIpxRipInFilterInterface based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxRipInFilterInterface_Type.__name__ = "OctetString"
_RcIpxRipInFilterInterface_Object = MibTableColumn
rcIpxRipInFilterInterface = _RcIpxRipInFilterInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 14, 1, 1),
    _RcIpxRipInFilterInterface_Type()
)
rcIpxRipInFilterInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipInFilterInterface.setStatus("current")
_RcIpxRipInFilterPolicyName_Type = DisplayString
_RcIpxRipInFilterPolicyName_Object = MibTableColumn
rcIpxRipInFilterPolicyName = _RcIpxRipInFilterPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 14, 1, 2),
    _RcIpxRipInFilterPolicyName_Type()
)
rcIpxRipInFilterPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipInFilterPolicyName.setStatus("current")
_RcIpxRipInFilterRowStatus_Type = RowStatus
_RcIpxRipInFilterRowStatus_Object = MibTableColumn
rcIpxRipInFilterRowStatus = _RcIpxRipInFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 14, 1, 3),
    _RcIpxRipInFilterRowStatus_Type()
)
rcIpxRipInFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipInFilterRowStatus.setStatus("current")
_RcIpxSapInFilterTableSize_Type = Integer32
_RcIpxSapInFilterTableSize_Object = MibScalar
rcIpxSapInFilterTableSize = _RcIpxSapInFilterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 15),
    _RcIpxSapInFilterTableSize_Type()
)
rcIpxSapInFilterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxSapInFilterTableSize.setStatus("current")
_RcIpxSapInFilterTable_Object = MibTable
rcIpxSapInFilterTable = _RcIpxSapInFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 16)
)
if mibBuilder.loadTexts:
    rcIpxSapInFilterTable.setStatus("current")
_RcIpxSapInFilterEntry_Object = MibTableRow
rcIpxSapInFilterEntry = _RcIpxSapInFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 16, 1)
)
rcIpxSapInFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxSapInFilterInterface"),
)
if mibBuilder.loadTexts:
    rcIpxSapInFilterEntry.setStatus("current")


class _RcIpxSapInFilterInterface_Type(OctetString):
    """Custom type rcIpxSapInFilterInterface based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxSapInFilterInterface_Type.__name__ = "OctetString"
_RcIpxSapInFilterInterface_Object = MibTableColumn
rcIpxSapInFilterInterface = _RcIpxSapInFilterInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 16, 1, 1),
    _RcIpxSapInFilterInterface_Type()
)
rcIpxSapInFilterInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxSapInFilterInterface.setStatus("current")
_RcIpxSapInFilterPolicyName_Type = DisplayString
_RcIpxSapInFilterPolicyName_Object = MibTableColumn
rcIpxSapInFilterPolicyName = _RcIpxSapInFilterPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 16, 1, 2),
    _RcIpxSapInFilterPolicyName_Type()
)
rcIpxSapInFilterPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxSapInFilterPolicyName.setStatus("current")
_RcIpxSapInFilterRowStatus_Type = RowStatus
_RcIpxSapInFilterRowStatus_Object = MibTableColumn
rcIpxSapInFilterRowStatus = _RcIpxSapInFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 16, 1, 3),
    _RcIpxSapInFilterRowStatus_Type()
)
rcIpxSapInFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxSapInFilterRowStatus.setStatus("current")


class _RcIpxRoutingMethod_Type(Integer32):
    """Custom type rcIpxRoutingMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hops", 2),
          ("ticks", 1))
    )


_RcIpxRoutingMethod_Type.__name__ = "Integer32"
_RcIpxRoutingMethod_Object = MibScalar
rcIpxRoutingMethod = _RcIpxRoutingMethod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 17),
    _RcIpxRoutingMethod_Type()
)
rcIpxRoutingMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRoutingMethod.setStatus("current")
_RcIpxSapInterfaceTable_Object = MibTable
rcIpxSapInterfaceTable = _RcIpxSapInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 18)
)
if mibBuilder.loadTexts:
    rcIpxSapInterfaceTable.setStatus("current")
_RcIpxSapInterfaceEntry_Object = MibTableRow
rcIpxSapInterfaceEntry = _RcIpxSapInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 18, 1)
)
rcIpxSapInterfaceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxSapInterfaceNetNum"),
)
if mibBuilder.loadTexts:
    rcIpxSapInterfaceEntry.setStatus("current")


class _RcIpxSapInterfaceNetNum_Type(OctetString):
    """Custom type rcIpxSapInterfaceNetNum based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxSapInterfaceNetNum_Type.__name__ = "OctetString"
_RcIpxSapInterfaceNetNum_Object = MibTableColumn
rcIpxSapInterfaceNetNum = _RcIpxSapInterfaceNetNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 18, 1, 1),
    _RcIpxSapInterfaceNetNum_Type()
)
rcIpxSapInterfaceNetNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxSapInterfaceNetNum.setStatus("current")
_RcIpxSapInterfaceInPolicy_Type = DisplayString
_RcIpxSapInterfaceInPolicy_Object = MibTableColumn
rcIpxSapInterfaceInPolicy = _RcIpxSapInterfaceInPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 18, 1, 2),
    _RcIpxSapInterfaceInPolicy_Type()
)
rcIpxSapInterfaceInPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxSapInterfaceInPolicy.setStatus("current")
_RcIpxSapInterfaceOutPolicy_Type = DisplayString
_RcIpxSapInterfaceOutPolicy_Object = MibTableColumn
rcIpxSapInterfaceOutPolicy = _RcIpxSapInterfaceOutPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 18, 1, 3),
    _RcIpxSapInterfaceOutPolicy_Type()
)
rcIpxSapInterfaceOutPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxSapInterfaceOutPolicy.setStatus("current")
_RcIpxRipInterfaceTable_Object = MibTable
rcIpxRipInterfaceTable = _RcIpxRipInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 19)
)
if mibBuilder.loadTexts:
    rcIpxRipInterfaceTable.setStatus("current")
_RcIpxRipInterfaceEntry_Object = MibTableRow
rcIpxRipInterfaceEntry = _RcIpxRipInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 19, 1)
)
rcIpxRipInterfaceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxRipInterfaceNetNum"),
)
if mibBuilder.loadTexts:
    rcIpxRipInterfaceEntry.setStatus("current")


class _RcIpxRipInterfaceNetNum_Type(OctetString):
    """Custom type rcIpxRipInterfaceNetNum based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxRipInterfaceNetNum_Type.__name__ = "OctetString"
_RcIpxRipInterfaceNetNum_Object = MibTableColumn
rcIpxRipInterfaceNetNum = _RcIpxRipInterfaceNetNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 19, 1, 1),
    _RcIpxRipInterfaceNetNum_Type()
)
rcIpxRipInterfaceNetNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRipInterfaceNetNum.setStatus("current")
_RcIpxRipInterfaceInPolicy_Type = DisplayString
_RcIpxRipInterfaceInPolicy_Object = MibTableColumn
rcIpxRipInterfaceInPolicy = _RcIpxRipInterfaceInPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 19, 1, 2),
    _RcIpxRipInterfaceInPolicy_Type()
)
rcIpxRipInterfaceInPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipInterfaceInPolicy.setStatus("current")
_RcIpxRipInterfaceOutPolicy_Type = DisplayString
_RcIpxRipInterfaceOutPolicy_Object = MibTableColumn
rcIpxRipInterfaceOutPolicy = _RcIpxRipInterfaceOutPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 19, 1, 3),
    _RcIpxRipInterfaceOutPolicy_Type()
)
rcIpxRipInterfaceOutPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipInterfaceOutPolicy.setStatus("current")
_RcIpxBrouterTable_Object = MibTable
rcIpxBrouterTable = _RcIpxBrouterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20)
)
if mibBuilder.loadTexts:
    rcIpxBrouterTable.setStatus("current")
_RcIpxBrouterEntry_Object = MibTableRow
rcIpxBrouterEntry = _RcIpxBrouterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20, 1)
)
rcIpxBrouterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxBrouterPortIndex"),
    (0, "RAPID-CITY", "rcIpxBrouterNetAddr"),
    (0, "RAPID-CITY", "rcIpxBrouterVlanId"),
    (0, "RAPID-CITY", "rcIpxBrouterEncap"),
)
if mibBuilder.loadTexts:
    rcIpxBrouterEntry.setStatus("current")


class _RcIpxBrouterPortIndex_Type(Integer32):
    """Custom type rcIpxBrouterPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpxBrouterPortIndex_Type.__name__ = "Integer32"
_RcIpxBrouterPortIndex_Object = MibTableColumn
rcIpxBrouterPortIndex = _RcIpxBrouterPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20, 1, 1),
    _RcIpxBrouterPortIndex_Type()
)
rcIpxBrouterPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxBrouterPortIndex.setStatus("current")


class _RcIpxBrouterVlanId_Type(Integer32):
    """Custom type rcIpxBrouterVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpxBrouterVlanId_Type.__name__ = "Integer32"
_RcIpxBrouterVlanId_Object = MibTableColumn
rcIpxBrouterVlanId = _RcIpxBrouterVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20, 1, 2),
    _RcIpxBrouterVlanId_Type()
)
rcIpxBrouterVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxBrouterVlanId.setStatus("current")


class _RcIpxBrouterNetAddr_Type(OctetString):
    """Custom type rcIpxBrouterNetAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcIpxBrouterNetAddr_Type.__name__ = "OctetString"
_RcIpxBrouterNetAddr_Object = MibTableColumn
rcIpxBrouterNetAddr = _RcIpxBrouterNetAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20, 1, 3),
    _RcIpxBrouterNetAddr_Type()
)
rcIpxBrouterNetAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxBrouterNetAddr.setStatus("current")


class _RcIpxBrouterEncap_Type(Integer32):
    """Custom type rcIpxBrouterEncap based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ethernetii", 1),
          ("llc", 3),
          ("none", 0),
          ("raw", 4),
          ("snap", 2))
    )


_RcIpxBrouterEncap_Type.__name__ = "Integer32"
_RcIpxBrouterEncap_Object = MibTableColumn
rcIpxBrouterEncap = _RcIpxBrouterEncap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20, 1, 4),
    _RcIpxBrouterEncap_Type()
)
rcIpxBrouterEncap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxBrouterEncap.setStatus("current")


class _RcIpxBrouterMacOffset_Type(Integer32):
    """Custom type rcIpxBrouterMacOffset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 507),
    )


_RcIpxBrouterMacOffset_Type.__name__ = "Integer32"
_RcIpxBrouterMacOffset_Object = MibTableColumn
rcIpxBrouterMacOffset = _RcIpxBrouterMacOffset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20, 1, 5),
    _RcIpxBrouterMacOffset_Type()
)
rcIpxBrouterMacOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxBrouterMacOffset.setStatus("current")


class _RcIpxBrouterTicks_Type(Integer32):
    """Custom type rcIpxBrouterTicks based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcIpxBrouterTicks_Type.__name__ = "Integer32"
_RcIpxBrouterTicks_Object = MibTableColumn
rcIpxBrouterTicks = _RcIpxBrouterTicks_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20, 1, 6),
    _RcIpxBrouterTicks_Type()
)
rcIpxBrouterTicks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxBrouterTicks.setStatus("current")
_RcIpxBrouterRowStatus_Type = RowStatus
_RcIpxBrouterRowStatus_Object = MibTableColumn
rcIpxBrouterRowStatus = _RcIpxBrouterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 20, 1, 7),
    _RcIpxBrouterRowStatus_Type()
)
rcIpxBrouterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxBrouterRowStatus.setStatus("current")
_RcIpxRsmlt_ObjectIdentity = ObjectIdentity
rcIpxRsmlt = _RcIpxRsmlt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21)
)
_RcIpxRsmltGlobal_ObjectIdentity = ObjectIdentity
rcIpxRsmltGlobal = _RcIpxRsmltGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 1)
)
_RcIpxRsmltGlobalTableSize_Type = Integer32
_RcIpxRsmltGlobalTableSize_Object = MibScalar
rcIpxRsmltGlobalTableSize = _RcIpxRsmltGlobalTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 1, 1),
    _RcIpxRsmltGlobalTableSize_Type()
)
rcIpxRsmltGlobalTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltGlobalTableSize.setStatus("current")
_RcIpxRsmltOperTable_Object = MibTable
rcIpxRsmltOperTable = _RcIpxRsmltOperTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2)
)
if mibBuilder.loadTexts:
    rcIpxRsmltOperTable.setStatus("current")
_RcIpxRsmltOperEntry_Object = MibTableRow
rcIpxRsmltOperEntry = _RcIpxRsmltOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1)
)
rcIpxRsmltOperEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxRsmltOperVlanId"),
)
if mibBuilder.loadTexts:
    rcIpxRsmltOperEntry.setStatus("current")


class _RcIpxRsmltOperVlanId_Type(Integer32):
    """Custom type rcIpxRsmltOperVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4093),
    )


_RcIpxRsmltOperVlanId_Type.__name__ = "Integer32"
_RcIpxRsmltOperVlanId_Object = MibTableColumn
rcIpxRsmltOperVlanId = _RcIpxRsmltOperVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 1),
    _RcIpxRsmltOperVlanId_Type()
)
rcIpxRsmltOperVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltOperVlanId.setStatus("current")
_RcIpxRsmltOperIfIndex_Type = InterfaceIndex
_RcIpxRsmltOperIfIndex_Object = MibTableColumn
rcIpxRsmltOperIfIndex = _RcIpxRsmltOperIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 2),
    _RcIpxRsmltOperIfIndex_Type()
)
rcIpxRsmltOperIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltOperIfIndex.setStatus("current")


class _RcIpxRsmltOperAdminStatus_Type(TruthValue):
    """Custom type rcIpxRsmltOperAdminStatus based on TruthValue"""


_RcIpxRsmltOperAdminStatus_Object = MibTableColumn
rcIpxRsmltOperAdminStatus = _RcIpxRsmltOperAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 3),
    _RcIpxRsmltOperAdminStatus_Type()
)
rcIpxRsmltOperAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRsmltOperAdminStatus.setStatus("current")


class _RcIpxRsmltOperHoldDownTimer_Type(Integer32):
    """Custom type rcIpxRsmltOperHoldDownTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpxRsmltOperHoldDownTimer_Type.__name__ = "Integer32"
_RcIpxRsmltOperHoldDownTimer_Object = MibTableColumn
rcIpxRsmltOperHoldDownTimer = _RcIpxRsmltOperHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 4),
    _RcIpxRsmltOperHoldDownTimer_Type()
)
rcIpxRsmltOperHoldDownTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRsmltOperHoldDownTimer.setStatus("current")


class _RcIpxRsmltOperHoldDownTimeRemaining_Type(Integer32):
    """Custom type rcIpxRsmltOperHoldDownTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpxRsmltOperHoldDownTimeRemaining_Type.__name__ = "Integer32"
_RcIpxRsmltOperHoldDownTimeRemaining_Object = MibTableColumn
rcIpxRsmltOperHoldDownTimeRemaining = _RcIpxRsmltOperHoldDownTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 5),
    _RcIpxRsmltOperHoldDownTimeRemaining_Type()
)
rcIpxRsmltOperHoldDownTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltOperHoldDownTimeRemaining.setStatus("current")


class _RcIpxRsmltOperHoldUpTimer_Type(Integer32):
    """Custom type rcIpxRsmltOperHoldUpTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpxRsmltOperHoldUpTimer_Type.__name__ = "Integer32"
_RcIpxRsmltOperHoldUpTimer_Object = MibTableColumn
rcIpxRsmltOperHoldUpTimer = _RcIpxRsmltOperHoldUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 6),
    _RcIpxRsmltOperHoldUpTimer_Type()
)
rcIpxRsmltOperHoldUpTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRsmltOperHoldUpTimer.setStatus("current")


class _RcIpxRsmltOperHoldUpTimeRemaining_Type(Integer32):
    """Custom type rcIpxRsmltOperHoldUpTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpxRsmltOperHoldUpTimeRemaining_Type.__name__ = "Integer32"
_RcIpxRsmltOperHoldUpTimeRemaining_Object = MibTableColumn
rcIpxRsmltOperHoldUpTimeRemaining = _RcIpxRsmltOperHoldUpTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 7),
    _RcIpxRsmltOperHoldUpTimeRemaining_Type()
)
rcIpxRsmltOperHoldUpTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltOperHoldUpTimeRemaining.setStatus("current")


class _RcIpxRsmltOperOperStatus_Type(Integer32):
    """Custom type rcIpxRsmltOperOperStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcIpxRsmltOperOperStatus_Type.__name__ = "Integer32"
_RcIpxRsmltOperOperStatus_Object = MibTableColumn
rcIpxRsmltOperOperStatus = _RcIpxRsmltOperOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 8),
    _RcIpxRsmltOperOperStatus_Type()
)
rcIpxRsmltOperOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltOperOperStatus.setStatus("current")
_RcIpxRsmltOperSmltId_Type = IdList
_RcIpxRsmltOperSmltId_Object = MibTableColumn
rcIpxRsmltOperSmltId = _RcIpxRsmltOperSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 9),
    _RcIpxRsmltOperSmltId_Type()
)
rcIpxRsmltOperSmltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltOperSmltId.setStatus("current")
_RcIpxRsmltOperSltId_Type = IdList
_RcIpxRsmltOperSltId_Object = MibTableColumn
rcIpxRsmltOperSltId = _RcIpxRsmltOperSltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 10),
    _RcIpxRsmltOperSltId_Type()
)
rcIpxRsmltOperSltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltOperSltId.setStatus("current")
_RcIpxRsmltOperRowStatus_Type = RowStatus
_RcIpxRsmltOperRowStatus_Object = MibTableColumn
rcIpxRsmltOperRowStatus = _RcIpxRsmltOperRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 11),
    _RcIpxRsmltOperRowStatus_Type()
)
rcIpxRsmltOperRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRsmltOperRowStatus.setStatus("current")
_RcIpxRsmltOperMacAddr_Type = MacAddress
_RcIpxRsmltOperMacAddr_Object = MibTableColumn
rcIpxRsmltOperMacAddr = _RcIpxRsmltOperMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 2, 1, 12),
    _RcIpxRsmltOperMacAddr_Type()
)
rcIpxRsmltOperMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltOperMacAddr.setStatus("current")
_RcIpxRsmltPeerTable_Object = MibTable
rcIpxRsmltPeerTable = _RcIpxRsmltPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3)
)
if mibBuilder.loadTexts:
    rcIpxRsmltPeerTable.setStatus("current")
_RcIpxRsmltPeerEntry_Object = MibTableRow
rcIpxRsmltPeerEntry = _RcIpxRsmltPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1)
)
rcIpxRsmltPeerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpxRsmltPeerVlanId"),
)
if mibBuilder.loadTexts:
    rcIpxRsmltPeerEntry.setStatus("current")


class _RcIpxRsmltPeerVlanId_Type(Integer32):
    """Custom type rcIpxRsmltPeerVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4093),
    )


_RcIpxRsmltPeerVlanId_Type.__name__ = "Integer32"
_RcIpxRsmltPeerVlanId_Object = MibTableColumn
rcIpxRsmltPeerVlanId = _RcIpxRsmltPeerVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 1),
    _RcIpxRsmltPeerVlanId_Type()
)
rcIpxRsmltPeerVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerVlanId.setStatus("current")
_RcIpxRsmltPeerIfIndex_Type = InterfaceIndex
_RcIpxRsmltPeerIfIndex_Object = MibTableColumn
rcIpxRsmltPeerIfIndex = _RcIpxRsmltPeerIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 2),
    _RcIpxRsmltPeerIfIndex_Type()
)
rcIpxRsmltPeerIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerIfIndex.setStatus("current")
_RcIpxRsmltPeerAdminStatus_Type = TruthValue
_RcIpxRsmltPeerAdminStatus_Object = MibTableColumn
rcIpxRsmltPeerAdminStatus = _RcIpxRsmltPeerAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 3),
    _RcIpxRsmltPeerAdminStatus_Type()
)
rcIpxRsmltPeerAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerAdminStatus.setStatus("current")


class _RcIpxRsmltPeerHoldDownTimer_Type(Integer32):
    """Custom type rcIpxRsmltPeerHoldDownTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpxRsmltPeerHoldDownTimer_Type.__name__ = "Integer32"
_RcIpxRsmltPeerHoldDownTimer_Object = MibTableColumn
rcIpxRsmltPeerHoldDownTimer = _RcIpxRsmltPeerHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 4),
    _RcIpxRsmltPeerHoldDownTimer_Type()
)
rcIpxRsmltPeerHoldDownTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerHoldDownTimer.setStatus("current")


class _RcIpxRsmltPeerHoldDownTimeRemaining_Type(Integer32):
    """Custom type rcIpxRsmltPeerHoldDownTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_RcIpxRsmltPeerHoldDownTimeRemaining_Type.__name__ = "Integer32"
_RcIpxRsmltPeerHoldDownTimeRemaining_Object = MibTableColumn
rcIpxRsmltPeerHoldDownTimeRemaining = _RcIpxRsmltPeerHoldDownTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 5),
    _RcIpxRsmltPeerHoldDownTimeRemaining_Type()
)
rcIpxRsmltPeerHoldDownTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerHoldDownTimeRemaining.setStatus("current")


class _RcIpxRsmltPeerHoldUpTimer_Type(Integer32):
    """Custom type rcIpxRsmltPeerHoldUpTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpxRsmltPeerHoldUpTimer_Type.__name__ = "Integer32"
_RcIpxRsmltPeerHoldUpTimer_Object = MibTableColumn
rcIpxRsmltPeerHoldUpTimer = _RcIpxRsmltPeerHoldUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 6),
    _RcIpxRsmltPeerHoldUpTimer_Type()
)
rcIpxRsmltPeerHoldUpTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerHoldUpTimer.setStatus("current")


class _RcIpxRsmltPeerHoldUpTimeRemaining_Type(Integer32):
    """Custom type rcIpxRsmltPeerHoldUpTimeRemaining based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
        ValueRangeConstraint(9999, 9999),
    )


_RcIpxRsmltPeerHoldUpTimeRemaining_Type.__name__ = "Integer32"
_RcIpxRsmltPeerHoldUpTimeRemaining_Object = MibTableColumn
rcIpxRsmltPeerHoldUpTimeRemaining = _RcIpxRsmltPeerHoldUpTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 7),
    _RcIpxRsmltPeerHoldUpTimeRemaining_Type()
)
rcIpxRsmltPeerHoldUpTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerHoldUpTimeRemaining.setStatus("current")


class _RcIpxRsmltPeerOperStatus_Type(Integer32):
    """Custom type rcIpxRsmltPeerOperStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcIpxRsmltPeerOperStatus_Type.__name__ = "Integer32"
_RcIpxRsmltPeerOperStatus_Object = MibTableColumn
rcIpxRsmltPeerOperStatus = _RcIpxRsmltPeerOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 8),
    _RcIpxRsmltPeerOperStatus_Type()
)
rcIpxRsmltPeerOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerOperStatus.setStatus("current")
_RcIpxRsmltPeerSmltId_Type = IdList
_RcIpxRsmltPeerSmltId_Object = MibTableColumn
rcIpxRsmltPeerSmltId = _RcIpxRsmltPeerSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 9),
    _RcIpxRsmltPeerSmltId_Type()
)
rcIpxRsmltPeerSmltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerSmltId.setStatus("current")
_RcIpxRsmltPeerSltId_Type = IdList
_RcIpxRsmltPeerSltId_Object = MibTableColumn
rcIpxRsmltPeerSltId = _RcIpxRsmltPeerSltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 10),
    _RcIpxRsmltPeerSltId_Type()
)
rcIpxRsmltPeerSltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerSltId.setStatus("current")
_RcIpxRsmltPeerMacAddr_Type = MacAddress
_RcIpxRsmltPeerMacAddr_Object = MibTableColumn
rcIpxRsmltPeerMacAddr = _RcIpxRsmltPeerMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 21, 3, 1, 11),
    _RcIpxRsmltPeerMacAddr_Type()
)
rcIpxRsmltPeerMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpxRsmltPeerMacAddr.setStatus("current")
_RcIpxRipGlobal_ObjectIdentity = ObjectIdentity
rcIpxRipGlobal = _RcIpxRipGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 22)
)
_RcIpxRipGlobalPace_Type = Integer32
_RcIpxRipGlobalPace_Object = MibScalar
rcIpxRipGlobalPace = _RcIpxRipGlobalPace_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 22, 1),
    _RcIpxRipGlobalPace_Type()
)
rcIpxRipGlobalPace.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipGlobalPace.setStatus("current")


class _RcIpxRipGlobalUpdate_Type(Integer32):
    """Custom type rcIpxRipGlobalUpdate based on Integer32"""
    defaultValue = 60


_RcIpxRipGlobalUpdate_Object = MibScalar
rcIpxRipGlobalUpdate = _RcIpxRipGlobalUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 22, 2),
    _RcIpxRipGlobalUpdate_Type()
)
rcIpxRipGlobalUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipGlobalUpdate.setStatus("current")


class _RcIpxRipGlobalAgeMultiplier_Type(Integer32):
    """Custom type rcIpxRipGlobalAgeMultiplier based on Integer32"""
    defaultValue = 3


_RcIpxRipGlobalAgeMultiplier_Object = MibScalar
rcIpxRipGlobalAgeMultiplier = _RcIpxRipGlobalAgeMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 24, 22, 3),
    _RcIpxRipGlobalAgeMultiplier_Type()
)
rcIpxRipGlobalAgeMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpxRipGlobalAgeMultiplier.setStatus("current")
_RcPos_ObjectIdentity = ObjectIdentity
rcPos = _RcPos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26)
)
_RcPosPppIpxTable_Object = MibTable
rcPosPppIpxTable = _RcPosPppIpxTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 1)
)
if mibBuilder.loadTexts:
    rcPosPppIpxTable.setStatus("current")
_RcPosPppIpxEntry_Object = MibTableRow
rcPosPppIpxEntry = _RcPosPppIpxEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 1, 1)
)
rcPosPppIpxEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPosPppIpxIfIndex"),
)
if mibBuilder.loadTexts:
    rcPosPppIpxEntry.setStatus("current")
_RcPosPppIpxIfIndex_Type = InterfaceIndex
_RcPosPppIpxIfIndex_Object = MibTableColumn
rcPosPppIpxIfIndex = _RcPosPppIpxIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 1, 1, 1),
    _RcPosPppIpxIfIndex_Type()
)
rcPosPppIpxIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosPppIpxIfIndex.setStatus("current")


class _RcPosPppIpxIpxcpAdminStatus_Type(Integer32):
    """Custom type rcPosPppIpxIpxcpAdminStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("close", 2),
          ("open", 1))
    )


_RcPosPppIpxIpxcpAdminStatus_Type.__name__ = "Integer32"
_RcPosPppIpxIpxcpAdminStatus_Object = MibTableColumn
rcPosPppIpxIpxcpAdminStatus = _RcPosPppIpxIpxcpAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 1, 1, 2),
    _RcPosPppIpxIpxcpAdminStatus_Type()
)
rcPosPppIpxIpxcpAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosPppIpxIpxcpAdminStatus.setStatus("current")


class _RcPosPppIpxOperStatus_Type(Integer32):
    """Custom type rcPosPppIpxOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_RcPosPppIpxOperStatus_Type.__name__ = "Integer32"
_RcPosPppIpxOperStatus_Object = MibTableColumn
rcPosPppIpxOperStatus = _RcPosPppIpxOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 1, 1, 3),
    _RcPosPppIpxOperStatus_Type()
)
rcPosPppIpxOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosPppIpxOperStatus.setStatus("current")


class _RcPosPppIpxNetAddr_Type(OctetString):
    """Custom type rcPosPppIpxNetAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RcPosPppIpxNetAddr_Type.__name__ = "OctetString"
_RcPosPppIpxNetAddr_Object = MibTableColumn
rcPosPppIpxNetAddr = _RcPosPppIpxNetAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 1, 1, 4),
    _RcPosPppIpxNetAddr_Type()
)
rcPosPppIpxNetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosPppIpxNetAddr.setStatus("current")


class _RcPosPppIpxRoutingProtocol_Type(Integer32):
    """Custom type rcPosPppIpxRoutingProtocol based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("rip", 2))
    )


_RcPosPppIpxRoutingProtocol_Type.__name__ = "Integer32"
_RcPosPppIpxRoutingProtocol_Object = MibTableColumn
rcPosPppIpxRoutingProtocol = _RcPosPppIpxRoutingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 1, 1, 5),
    _RcPosPppIpxRoutingProtocol_Type()
)
rcPosPppIpxRoutingProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosPppIpxRoutingProtocol.setStatus("current")
_RcPosSonetTable_Object = MibTable
rcPosSonetTable = _RcPosSonetTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2)
)
if mibBuilder.loadTexts:
    rcPosSonetTable.setStatus("current")
_RcPosSonetEntry_Object = MibTableRow
rcPosSonetEntry = _RcPosSonetEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1)
)
rcPosSonetEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPosSonetIndex"),
)
if mibBuilder.loadTexts:
    rcPosSonetEntry.setStatus("current")
_RcPosSonetIndex_Type = InterfaceIndex
_RcPosSonetIndex_Object = MibTableColumn
rcPosSonetIndex = _RcPosSonetIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 1),
    _RcPosSonetIndex_Type()
)
rcPosSonetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSonetIndex.setStatus("current")


class _RcPosSonetFraming_Type(Integer32):
    """Custom type rcPosSonetFraming based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sdh", 2),
          ("sonet", 1))
    )


_RcPosSonetFraming_Type.__name__ = "Integer32"
_RcPosSonetFraming_Object = MibTableColumn
rcPosSonetFraming = _RcPosSonetFraming_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 2),
    _RcPosSonetFraming_Type()
)
rcPosSonetFraming.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSonetFraming.setStatus("current")


class _RcPosSonetSectionTrace_Type(Integer32):
    """Custom type rcPosSonetSectionTrace based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcPosSonetSectionTrace_Type.__name__ = "Integer32"
_RcPosSonetSectionTrace_Object = MibTableColumn
rcPosSonetSectionTrace = _RcPosSonetSectionTrace_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 3),
    _RcPosSonetSectionTrace_Type()
)
rcPosSonetSectionTrace.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSonetSectionTrace.setStatus("current")


class _RcPosSonetSectionGrowth_Type(Integer32):
    """Custom type rcPosSonetSectionGrowth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcPosSonetSectionGrowth_Type.__name__ = "Integer32"
_RcPosSonetSectionGrowth_Object = MibTableColumn
rcPosSonetSectionGrowth = _RcPosSonetSectionGrowth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 4),
    _RcPosSonetSectionGrowth_Type()
)
rcPosSonetSectionGrowth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSonetSectionGrowth.setStatus("current")


class _RcPosSonetSyncronization_Type(Integer32):
    """Custom type rcPosSonetSyncronization based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcPosSonetSyncronization_Type.__name__ = "Integer32"
_RcPosSonetSyncronization_Object = MibTableColumn
rcPosSonetSyncronization = _RcPosSonetSyncronization_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 5),
    _RcPosSonetSyncronization_Type()
)
rcPosSonetSyncronization.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSonetSyncronization.setStatus("current")


class _RcPosSonetStsPathTrace_Type(OctetString):
    """Custom type rcPosSonetStsPathTrace based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(64, 64),
    )


_RcPosSonetStsPathTrace_Type.__name__ = "OctetString"
_RcPosSonetStsPathTrace_Object = MibTableColumn
rcPosSonetStsPathTrace = _RcPosSonetStsPathTrace_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 6),
    _RcPosSonetStsPathTrace_Type()
)
rcPosSonetStsPathTrace.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSonetStsPathTrace.setStatus("current")


class _RcPosSonetPathSignalLabel_Type(Integer32):
    """Custom type rcPosSonetPathSignalLabel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcPosSonetPathSignalLabel_Type.__name__ = "Integer32"
_RcPosSonetPathSignalLabel_Object = MibTableColumn
rcPosSonetPathSignalLabel = _RcPosSonetPathSignalLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 7),
    _RcPosSonetPathSignalLabel_Type()
)
rcPosSonetPathSignalLabel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSonetPathSignalLabel.setStatus("current")


class _RcPosSonetClockSource_Type(Integer32):
    """Custom type rcPosSonetClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("internal", 2),
          ("line", 1))
    )


_RcPosSonetClockSource_Type.__name__ = "Integer32"
_RcPosSonetClockSource_Object = MibTableColumn
rcPosSonetClockSource = _RcPosSonetClockSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 8),
    _RcPosSonetClockSource_Type()
)
rcPosSonetClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSonetClockSource.setStatus("current")
_RcPosSonetScramble_Type = EnableValue
_RcPosSonetScramble_Object = MibTableColumn
rcPosSonetScramble = _RcPosSonetScramble_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 9),
    _RcPosSonetScramble_Type()
)
rcPosSonetScramble.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSonetScramble.setStatus("current")
_RcPosSonetOperStatusFraming_Type = Integer32
_RcPosSonetOperStatusFraming_Object = MibTableColumn
rcPosSonetOperStatusFraming = _RcPosSonetOperStatusFraming_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 10),
    _RcPosSonetOperStatusFraming_Type()
)
rcPosSonetOperStatusFraming.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSonetOperStatusFraming.setStatus("current")
_RcPosSonetOperStatusClockSource_Type = Integer32
_RcPosSonetOperStatusClockSource_Object = MibTableColumn
rcPosSonetOperStatusClockSource = _RcPosSonetOperStatusClockSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 11),
    _RcPosSonetOperStatusClockSource_Type()
)
rcPosSonetOperStatusClockSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSonetOperStatusClockSource.setStatus("current")
_RcPosSonetOperStatusScramble_Type = EnableValue
_RcPosSonetOperStatusScramble_Object = MibTableColumn
rcPosSonetOperStatusScramble = _RcPosSonetOperStatusScramble_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 12),
    _RcPosSonetOperStatusScramble_Type()
)
rcPosSonetOperStatusScramble.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSonetOperStatusScramble.setStatus("current")
_RcPosSonetOperStatusSectionTrace_Type = Integer32
_RcPosSonetOperStatusSectionTrace_Object = MibTableColumn
rcPosSonetOperStatusSectionTrace = _RcPosSonetOperStatusSectionTrace_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 13),
    _RcPosSonetOperStatusSectionTrace_Type()
)
rcPosSonetOperStatusSectionTrace.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSonetOperStatusSectionTrace.setStatus("current")
_RcPosSonetOperStatusPathSignalLabel_Type = Integer32
_RcPosSonetOperStatusPathSignalLabel_Object = MibTableColumn
rcPosSonetOperStatusPathSignalLabel = _RcPosSonetOperStatusPathSignalLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 2, 1, 14),
    _RcPosSonetOperStatusPathSignalLabel_Type()
)
rcPosSonetOperStatusPathSignalLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSonetOperStatusPathSignalLabel.setStatus("current")
_RcPosLineStatusTable_Object = MibTable
rcPosLineStatusTable = _RcPosLineStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3)
)
if mibBuilder.loadTexts:
    rcPosLineStatusTable.setStatus("current")
_RcPosLineStatusEntry_Object = MibTableRow
rcPosLineStatusEntry = _RcPosLineStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1)
)
rcPosLineStatusEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPosLineStatusIndex"),
)
if mibBuilder.loadTexts:
    rcPosLineStatusEntry.setStatus("current")
_RcPosLineStatusIndex_Type = InterfaceIndex
_RcPosLineStatusIndex_Object = MibTableColumn
rcPosLineStatusIndex = _RcPosLineStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 1),
    _RcPosLineStatusIndex_Type()
)
rcPosLineStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusIndex.setStatus("current")
_RcPosLineStatusLocalMACAddress_Type = MacAddress
_RcPosLineStatusLocalMACAddress_Object = MibTableColumn
rcPosLineStatusLocalMACAddress = _RcPosLineStatusLocalMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 2),
    _RcPosLineStatusLocalMACAddress_Type()
)
rcPosLineStatusLocalMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusLocalMACAddress.setStatus("current")
_RcPosLineStatusRemoteMACAddress_Type = MacAddress
_RcPosLineStatusRemoteMACAddress_Object = MibTableColumn
rcPosLineStatusRemoteMACAddress = _RcPosLineStatusRemoteMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 3),
    _RcPosLineStatusRemoteMACAddress_Type()
)
rcPosLineStatusRemoteMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusRemoteMACAddress.setStatus("current")
_RcPosLineStatusLocalIpAddr_Type = IpAddress
_RcPosLineStatusLocalIpAddr_Object = MibTableColumn
rcPosLineStatusLocalIpAddr = _RcPosLineStatusLocalIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 4),
    _RcPosLineStatusLocalIpAddr_Type()
)
rcPosLineStatusLocalIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusLocalIpAddr.setStatus("current")
_RcPosLineStatusRemoteIpAddr_Type = IpAddress
_RcPosLineStatusRemoteIpAddr_Object = MibTableColumn
rcPosLineStatusRemoteIpAddr = _RcPosLineStatusRemoteIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 5),
    _RcPosLineStatusRemoteIpAddr_Type()
)
rcPosLineStatusRemoteIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusRemoteIpAddr.setStatus("current")
_RcPosLineStatusOutQuality_Type = Integer32
_RcPosLineStatusOutQuality_Object = MibTableColumn
rcPosLineStatusOutQuality = _RcPosLineStatusOutQuality_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 6),
    _RcPosLineStatusOutQuality_Type()
)
rcPosLineStatusOutQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusOutQuality.setStatus("current")
_RcPosLineStatusLocalPeriod_Type = Integer32
_RcPosLineStatusLocalPeriod_Object = MibTableColumn
rcPosLineStatusLocalPeriod = _RcPosLineStatusLocalPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 7),
    _RcPosLineStatusLocalPeriod_Type()
)
rcPosLineStatusLocalPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusLocalPeriod.setStatus("current")
_RcPosLineStatusDeviceType_Type = Integer32
_RcPosLineStatusDeviceType_Object = MibTableColumn
rcPosLineStatusDeviceType = _RcPosLineStatusDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 8),
    _RcPosLineStatusDeviceType_Type()
)
rcPosLineStatusDeviceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusDeviceType.setStatus("current")
_RcPosLineStatusDeviceRev_Type = Integer32
_RcPosLineStatusDeviceRev_Object = MibTableColumn
rcPosLineStatusDeviceRev = _RcPosLineStatusDeviceRev_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 9),
    _RcPosLineStatusDeviceRev_Type()
)
rcPosLineStatusDeviceRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusDeviceRev.setStatus("current")
_RcPosLineStatusIpxRoutingProtocol_Type = Integer32
_RcPosLineStatusIpxRoutingProtocol_Object = MibTableColumn
rcPosLineStatusIpxRoutingProtocol = _RcPosLineStatusIpxRoutingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 3, 1, 10),
    _RcPosLineStatusIpxRoutingProtocol_Type()
)
rcPosLineStatusIpxRoutingProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineStatusIpxRoutingProtocol.setStatus("current")
_RcPosLineConfigTable_Object = MibTable
rcPosLineConfigTable = _RcPosLineConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4)
)
if mibBuilder.loadTexts:
    rcPosLineConfigTable.setStatus("current")
_RcPosLineConfigEntry_Object = MibTableRow
rcPosLineConfigEntry = _RcPosLineConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1)
)
rcPosLineConfigEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPosLineConfigIndex"),
)
if mibBuilder.loadTexts:
    rcPosLineConfigEntry.setStatus("current")
_RcPosLineConfigIndex_Type = InterfaceIndex
_RcPosLineConfigIndex_Object = MibTableColumn
rcPosLineConfigIndex = _RcPosLineConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 1),
    _RcPosLineConfigIndex_Type()
)
rcPosLineConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosLineConfigIndex.setStatus("current")
_RcPosLineConfigLocalMACAddress_Type = MacAddress
_RcPosLineConfigLocalMACAddress_Object = MibTableColumn
rcPosLineConfigLocalMACAddress = _RcPosLineConfigLocalMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 2),
    _RcPosLineConfigLocalMACAddress_Type()
)
rcPosLineConfigLocalMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigLocalMACAddress.setStatus("current")
_RcPosLineConfigRemoteMACAddress_Type = MacAddress
_RcPosLineConfigRemoteMACAddress_Object = MibTableColumn
rcPosLineConfigRemoteMACAddress = _RcPosLineConfigRemoteMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 3),
    _RcPosLineConfigRemoteMACAddress_Type()
)
rcPosLineConfigRemoteMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigRemoteMACAddress.setStatus("current")
_RcPosLineConfigLocalIpAddr_Type = IpAddress
_RcPosLineConfigLocalIpAddr_Object = MibTableColumn
rcPosLineConfigLocalIpAddr = _RcPosLineConfigLocalIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 4),
    _RcPosLineConfigLocalIpAddr_Type()
)
rcPosLineConfigLocalIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigLocalIpAddr.setStatus("current")
_RcPosLineConfigRemoteIpAddr_Type = IpAddress
_RcPosLineConfigRemoteIpAddr_Object = MibTableColumn
rcPosLineConfigRemoteIpAddr = _RcPosLineConfigRemoteIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 5),
    _RcPosLineConfigRemoteIpAddr_Type()
)
rcPosLineConfigRemoteIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigRemoteIpAddr.setStatus("current")


class _RcPosLineConfigRemoteReportPeriod_Type(Integer32):
    """Custom type rcPosLineConfigRemoteReportPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_RcPosLineConfigRemoteReportPeriod_Type.__name__ = "Integer32"
_RcPosLineConfigRemoteReportPeriod_Object = MibTableColumn
rcPosLineConfigRemoteReportPeriod = _RcPosLineConfigRemoteReportPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 6),
    _RcPosLineConfigRemoteReportPeriod_Type()
)
rcPosLineConfigRemoteReportPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigRemoteReportPeriod.setStatus("current")


class _RcPosLineConfigLqrThreshold_Type(Integer32):
    """Custom type rcPosLineConfigLqrThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPosLineConfigLqrThreshold_Type.__name__ = "Integer32"
_RcPosLineConfigLqrThreshold_Object = MibTableColumn
rcPosLineConfigLqrThreshold = _RcPosLineConfigLqrThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 7),
    _RcPosLineConfigLqrThreshold_Type()
)
rcPosLineConfigLqrThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigLqrThreshold.setStatus("current")
_RcPosLineConfigOutQuality_Type = Integer32
_RcPosLineConfigOutQuality_Object = MibTableColumn
rcPosLineConfigOutQuality = _RcPosLineConfigOutQuality_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 8),
    _RcPosLineConfigOutQuality_Type()
)
rcPosLineConfigOutQuality.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigOutQuality.setStatus("current")
_RcPosLineConfigPppStp_Type = EnableValue
_RcPosLineConfigPppStp_Object = MibTableColumn
rcPosLineConfigPppStp = _RcPosLineConfigPppStp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 9),
    _RcPosLineConfigPppStp_Type()
)
rcPosLineConfigPppStp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigPppStp.setStatus("current")
_RcPosLineConfigLoopBack_Type = TruthValue
_RcPosLineConfigLoopBack_Object = MibTableColumn
rcPosLineConfigLoopBack = _RcPosLineConfigLoopBack_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 10),
    _RcPosLineConfigLoopBack_Type()
)
rcPosLineConfigLoopBack.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigLoopBack.setStatus("current")
_RcPosLineConfigIpxVlanMacAddress_Type = MacAddress
_RcPosLineConfigIpxVlanMacAddress_Object = MibTableColumn
rcPosLineConfigIpxVlanMacAddress = _RcPosLineConfigIpxVlanMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 11),
    _RcPosLineConfigIpxVlanMacAddress_Type()
)
rcPosLineConfigIpxVlanMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigIpxVlanMacAddress.setStatus("current")
_RcPosLineConfigIpxRemoteMacAddress_Type = MacAddress
_RcPosLineConfigIpxRemoteMacAddress_Object = MibTableColumn
rcPosLineConfigIpxRemoteMacAddress = _RcPosLineConfigIpxRemoteMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 4, 1, 12),
    _RcPosLineConfigIpxRemoteMacAddress_Type()
)
rcPosLineConfigIpxRemoteMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosLineConfigIpxRemoteMacAddress.setStatus("current")
_RcPosSonetTrap_ObjectIdentity = ObjectIdentity
rcPosSonetTrap = _RcPosSonetTrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 5)
)


class _RcPosSonetTrapType_Type(Integer32):
    """Custom type rcPosSonetTrapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lineAlarm", 2),
          ("pathAlarm", 3),
          ("sectionAlarm", 1))
    )


_RcPosSonetTrapType_Type.__name__ = "Integer32"
_RcPosSonetTrapType_Object = MibScalar
rcPosSonetTrapType = _RcPosSonetTrapType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 5, 1),
    _RcPosSonetTrapType_Type()
)
rcPosSonetTrapType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSonetTrapType.setStatus("current")


class _RcPosSonetTrapIndication_Type(Integer32):
    """Custom type rcPosSonetTrapIndication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("lineAlarmIndication", 4),
          ("lineRemoteDefectIndication", 5),
          ("noDefect", 1),
          ("pathAlarmIndication", 7),
          ("pathLossOfPointer", 6),
          ("pathRemoteDefectIndication", 8),
          ("pathSignalLabelMismatch", 10),
          ("pathTraceMismatch", 11),
          ("pathUnequipped", 9),
          ("sectionLossOfFrame", 3),
          ("sectionLossOfSignal", 2))
    )


_RcPosSonetTrapIndication_Type.__name__ = "Integer32"
_RcPosSonetTrapIndication_Object = MibScalar
rcPosSonetTrapIndication = _RcPosSonetTrapIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 5, 2),
    _RcPosSonetTrapIndication_Type()
)
rcPosSonetTrapIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSonetTrapIndication.setStatus("current")
_RcPosSioCardConfigTable_Object = MibTable
rcPosSioCardConfigTable = _RcPosSioCardConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 6)
)
if mibBuilder.loadTexts:
    rcPosSioCardConfigTable.setStatus("current")
_RcPosSioCardConfigEntry_Object = MibTableRow
rcPosSioCardConfigEntry = _RcPosSioCardConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 6, 1)
)
rcPosSioCardConfigEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPosSioCardConfigSlotIndex"),
)
if mibBuilder.loadTexts:
    rcPosSioCardConfigEntry.setStatus("current")


class _RcPosSioCardConfigSlotIndex_Type(Integer32):
    """Custom type rcPosSioCardConfigSlotIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcPosSioCardConfigSlotIndex_Type.__name__ = "Integer32"
_RcPosSioCardConfigSlotIndex_Object = MibTableColumn
rcPosSioCardConfigSlotIndex = _RcPosSioCardConfigSlotIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 6, 1, 1),
    _RcPosSioCardConfigSlotIndex_Type()
)
rcPosSioCardConfigSlotIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSioCardConfigSlotIndex.setStatus("current")


class _RcPosSioCardConfigAction_Type(Integer32):
    """Custom type rcPosSioCardConfigAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("reset", 1))
    )


_RcPosSioCardConfigAction_Type.__name__ = "Integer32"
_RcPosSioCardConfigAction_Object = MibTableColumn
rcPosSioCardConfigAction = _RcPosSioCardConfigAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 6, 1, 2),
    _RcPosSioCardConfigAction_Type()
)
rcPosSioCardConfigAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSioCardConfigAction.setStatus("current")


class _RcPosSioCardConfigTraceMode_Type(Integer32):
    """Custom type rcPosSioCardConfigTraceMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("traceOn", 1))
    )


_RcPosSioCardConfigTraceMode_Type.__name__ = "Integer32"
_RcPosSioCardConfigTraceMode_Object = MibTableColumn
rcPosSioCardConfigTraceMode = _RcPosSioCardConfigTraceMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 6, 1, 3),
    _RcPosSioCardConfigTraceMode_Type()
)
rcPosSioCardConfigTraceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPosSioCardConfigTraceMode.setStatus("current")
_RcPosSioCardConfigImageFileName_Type = DisplayString
_RcPosSioCardConfigImageFileName_Object = MibTableColumn
rcPosSioCardConfigImageFileName = _RcPosSioCardConfigImageFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 6, 1, 4),
    _RcPosSioCardConfigImageFileName_Type()
)
rcPosSioCardConfigImageFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosSioCardConfigImageFileName.setStatus("current")
_RcPosOperStatusTable_Object = MibTable
rcPosOperStatusTable = _RcPosOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 7)
)
if mibBuilder.loadTexts:
    rcPosOperStatusTable.setStatus("current")
_RcPosOperStatusEntry_Object = MibTableRow
rcPosOperStatusEntry = _RcPosOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 7, 1)
)
rcPosOperStatusEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPosOperStatusIndex"),
)
if mibBuilder.loadTexts:
    rcPosOperStatusEntry.setStatus("current")
_RcPosOperStatusIndex_Type = InterfaceIndex
_RcPosOperStatusIndex_Object = MibTableColumn
rcPosOperStatusIndex = _RcPosOperStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 7, 1, 1),
    _RcPosOperStatusIndex_Type()
)
rcPosOperStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosOperStatusIndex.setStatus("current")
_RcPosOperStatusLqrStatus_Type = Integer32
_RcPosOperStatusLqrStatus_Object = MibTableColumn
rcPosOperStatusLqrStatus = _RcPosOperStatusLqrStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 7, 1, 2),
    _RcPosOperStatusLqrStatus_Type()
)
rcPosOperStatusLqrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosOperStatusLqrStatus.setStatus("current")
_RcPosOperStatusLineLqrThreshold_Type = Integer32
_RcPosOperStatusLineLqrThreshold_Object = MibTableColumn
rcPosOperStatusLineLqrThreshold = _RcPosOperStatusLineLqrThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 7, 1, 3),
    _RcPosOperStatusLineLqrThreshold_Type()
)
rcPosOperStatusLineLqrThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosOperStatusLineLqrThreshold.setStatus("current")
_RcPosOperStatusLinkMagicNumber_Type = Integer32
_RcPosOperStatusLinkMagicNumber_Object = MibTableColumn
rcPosOperStatusLinkMagicNumber = _RcPosOperStatusLinkMagicNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 7, 1, 4),
    _RcPosOperStatusLinkMagicNumber_Type()
)
rcPosOperStatusLinkMagicNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosOperStatusLinkMagicNumber.setStatus("current")
_RcPosOperStatusLinePppStp_Type = EnableValue
_RcPosOperStatusLinePppStp_Object = MibTableColumn
rcPosOperStatusLinePppStp = _RcPosOperStatusLinePppStp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 26, 7, 1, 5),
    _RcPosOperStatusLinePppStp_Type()
)
rcPosOperStatusLinePppStp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPosOperStatusLinePppStp.setStatus("current")
_RcLinkFlapDetect_ObjectIdentity = ObjectIdentity
rcLinkFlapDetect = _RcLinkFlapDetect_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 27)
)
_RcLinkFlapDetectAutoPortDownEnable_Type = TruthValue
_RcLinkFlapDetectAutoPortDownEnable_Object = MibScalar
rcLinkFlapDetectAutoPortDownEnable = _RcLinkFlapDetectAutoPortDownEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 27, 1),
    _RcLinkFlapDetectAutoPortDownEnable_Type()
)
rcLinkFlapDetectAutoPortDownEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLinkFlapDetectAutoPortDownEnable.setStatus("current")
_RcLinkFlapDetectSendTrap_Type = TruthValue
_RcLinkFlapDetectSendTrap_Object = MibScalar
rcLinkFlapDetectSendTrap = _RcLinkFlapDetectSendTrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 27, 2),
    _RcLinkFlapDetectSendTrap_Type()
)
rcLinkFlapDetectSendTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLinkFlapDetectSendTrap.setStatus("current")


class _RcLinkFlapDetectFrequency_Type(Integer32):
    """Custom type rcLinkFlapDetectFrequency based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9999),
    )


_RcLinkFlapDetectFrequency_Type.__name__ = "Integer32"
_RcLinkFlapDetectFrequency_Object = MibScalar
rcLinkFlapDetectFrequency = _RcLinkFlapDetectFrequency_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 27, 3),
    _RcLinkFlapDetectFrequency_Type()
)
rcLinkFlapDetectFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLinkFlapDetectFrequency.setStatus("current")


class _RcLinkFlapDetectInterval_Type(Integer32):
    """Custom type rcLinkFlapDetectInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 600),
    )


_RcLinkFlapDetectInterval_Type.__name__ = "Integer32"
_RcLinkFlapDetectInterval_Object = MibScalar
rcLinkFlapDetectInterval = _RcLinkFlapDetectInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 27, 4),
    _RcLinkFlapDetectInterval_Type()
)
rcLinkFlapDetectInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLinkFlapDetectInterval.setStatus("current")
_RcV1Traps_ObjectIdentity = ObjectIdentity
rcV1Traps = _RcV1Traps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 28)
)
_RcRadius_ObjectIdentity = ObjectIdentity
rcRadius = _RcRadius_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29)
)
_RcRadiusGlobal_ObjectIdentity = ObjectIdentity
rcRadiusGlobal = _RcRadiusGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1)
)


class _RcRadiusGlobalEnable_Type(TruthValue):
    """Custom type rcRadiusGlobalEnable based on TruthValue"""


_RcRadiusGlobalEnable_Object = MibScalar
rcRadiusGlobalEnable = _RcRadiusGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 1),
    _RcRadiusGlobalEnable_Type()
)
rcRadiusGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalEnable.setStatus("current")


class _RcRadiusGlobalMaxNumberServer_Type(Integer32):
    """Custom type rcRadiusGlobalMaxNumberServer based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcRadiusGlobalMaxNumberServer_Type.__name__ = "Integer32"
_RcRadiusGlobalMaxNumberServer_Object = MibScalar
rcRadiusGlobalMaxNumberServer = _RcRadiusGlobalMaxNumberServer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 2),
    _RcRadiusGlobalMaxNumberServer_Type()
)
rcRadiusGlobalMaxNumberServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalMaxNumberServer.setStatus("current")


class _RcRadiusGlobalAttributeValue_Type(Integer32):
    """Custom type rcRadiusGlobalAttributeValue based on Integer32"""
    defaultValue = 192

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(192, 240),
    )


_RcRadiusGlobalAttributeValue_Type.__name__ = "Integer32"
_RcRadiusGlobalAttributeValue_Object = MibScalar
rcRadiusGlobalAttributeValue = _RcRadiusGlobalAttributeValue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 3),
    _RcRadiusGlobalAttributeValue_Type()
)
rcRadiusGlobalAttributeValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalAttributeValue.setStatus("current")
_RcRadiusGlobalServerTableSize_Type = Integer32
_RcRadiusGlobalServerTableSize_Object = MibScalar
rcRadiusGlobalServerTableSize = _RcRadiusGlobalServerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 4),
    _RcRadiusGlobalServerTableSize_Type()
)
rcRadiusGlobalServerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusGlobalServerTableSize.setStatus("current")


class _RcRadiusGlobalAcctEnable_Type(TruthValue):
    """Custom type rcRadiusGlobalAcctEnable based on TruthValue"""


_RcRadiusGlobalAcctEnable_Object = MibScalar
rcRadiusGlobalAcctEnable = _RcRadiusGlobalAcctEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 5),
    _RcRadiusGlobalAcctEnable_Type()
)
rcRadiusGlobalAcctEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalAcctEnable.setStatus("current")


class _RcRadiusGlobalAcctAttributeValue_Type(Integer32):
    """Custom type rcRadiusGlobalAcctAttributeValue based on Integer32"""
    defaultValue = 193

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(192, 240),
    )


_RcRadiusGlobalAcctAttributeValue_Type.__name__ = "Integer32"
_RcRadiusGlobalAcctAttributeValue_Object = MibScalar
rcRadiusGlobalAcctAttributeValue = _RcRadiusGlobalAcctAttributeValue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 6),
    _RcRadiusGlobalAcctAttributeValue_Type()
)
rcRadiusGlobalAcctAttributeValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalAcctAttributeValue.setStatus("current")


class _RcRadiusGlobalAcctIncludeCli_Type(TruthValue):
    """Custom type rcRadiusGlobalAcctIncludeCli based on TruthValue"""


_RcRadiusGlobalAcctIncludeCli_Object = MibScalar
rcRadiusGlobalAcctIncludeCli = _RcRadiusGlobalAcctIncludeCli_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 7),
    _RcRadiusGlobalAcctIncludeCli_Type()
)
rcRadiusGlobalAcctIncludeCli.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalAcctIncludeCli.setStatus("current")


class _RcRadiusGlobalClearStat_Type(TruthValue):
    """Custom type rcRadiusGlobalClearStat based on TruthValue"""


_RcRadiusGlobalClearStat_Object = MibScalar
rcRadiusGlobalClearStat = _RcRadiusGlobalClearStat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 8),
    _RcRadiusGlobalClearStat_Type()
)
rcRadiusGlobalClearStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalClearStat.setStatus("current")


class _RcRadiusGlobalMcastAttributeValue_Type(Integer32):
    """Custom type rcRadiusGlobalMcastAttributeValue based on Integer32"""
    defaultValue = 90

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcRadiusGlobalMcastAttributeValue_Type.__name__ = "Integer32"
_RcRadiusGlobalMcastAttributeValue_Object = MibScalar
rcRadiusGlobalMcastAttributeValue = _RcRadiusGlobalMcastAttributeValue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 9),
    _RcRadiusGlobalMcastAttributeValue_Type()
)
rcRadiusGlobalMcastAttributeValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalMcastAttributeValue.setStatus("current")


class _RcRadiusGlobalAuthInfoAttributeValue_Type(Integer32):
    """Custom type rcRadiusGlobalAuthInfoAttributeValue based on Integer32"""
    defaultValue = 91

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcRadiusGlobalAuthInfoAttributeValue_Type.__name__ = "Integer32"
_RcRadiusGlobalAuthInfoAttributeValue_Object = MibScalar
rcRadiusGlobalAuthInfoAttributeValue = _RcRadiusGlobalAuthInfoAttributeValue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 10),
    _RcRadiusGlobalAuthInfoAttributeValue_Type()
)
rcRadiusGlobalAuthInfoAttributeValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalAuthInfoAttributeValue.setStatus("current")


class _RcRadiusGlobalCommandAccess_Type(Integer32):
    """Custom type rcRadiusGlobalCommandAccess based on Integer32"""
    defaultValue = 194

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(192, 240),
    )


_RcRadiusGlobalCommandAccess_Type.__name__ = "Integer32"
_RcRadiusGlobalCommandAccess_Object = MibScalar
rcRadiusGlobalCommandAccess = _RcRadiusGlobalCommandAccess_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 11),
    _RcRadiusGlobalCommandAccess_Type()
)
rcRadiusGlobalCommandAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalCommandAccess.setStatus("current")


class _RcRadiusGlobalCliCommands_Type(Integer32):
    """Custom type rcRadiusGlobalCliCommands based on Integer32"""
    defaultValue = 195

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(192, 240),
    )


_RcRadiusGlobalCliCommands_Type.__name__ = "Integer32"
_RcRadiusGlobalCliCommands_Object = MibScalar
rcRadiusGlobalCliCommands = _RcRadiusGlobalCliCommands_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 12),
    _RcRadiusGlobalCliCommands_Type()
)
rcRadiusGlobalCliCommands.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalCliCommands.setStatus("current")


class _RcRadiusGlobalIgapLogFSize_Type(Integer32):
    """Custom type rcRadiusGlobalIgapLogFSize based on Integer32"""
    defaultValue = 512

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(50, 8192),
    )


_RcRadiusGlobalIgapLogFSize_Type.__name__ = "Integer32"
_RcRadiusGlobalIgapLogFSize_Object = MibScalar
rcRadiusGlobalIgapLogFSize = _RcRadiusGlobalIgapLogFSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 13),
    _RcRadiusGlobalIgapLogFSize_Type()
)
rcRadiusGlobalIgapLogFSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalIgapLogFSize.setStatus("current")


class _RcRadiusGlobalCliProfEnable_Type(TruthValue):
    """Custom type rcRadiusGlobalCliProfEnable based on TruthValue"""


_RcRadiusGlobalCliProfEnable_Object = MibScalar
rcRadiusGlobalCliProfEnable = _RcRadiusGlobalCliProfEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 14),
    _RcRadiusGlobalCliProfEnable_Type()
)
rcRadiusGlobalCliProfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalCliProfEnable.setStatus("current")
_RcRadiusGlobalAuthInvalidServerAddress_Type = Counter32
_RcRadiusGlobalAuthInvalidServerAddress_Object = MibScalar
rcRadiusGlobalAuthInvalidServerAddress = _RcRadiusGlobalAuthInvalidServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 15),
    _RcRadiusGlobalAuthInvalidServerAddress_Type()
)
rcRadiusGlobalAuthInvalidServerAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusGlobalAuthInvalidServerAddress.setStatus("current")


class _RcRadiusGlobalSourceIpFlag_Type(TruthValue):
    """Custom type rcRadiusGlobalSourceIpFlag based on TruthValue"""


_RcRadiusGlobalSourceIpFlag_Object = MibScalar
rcRadiusGlobalSourceIpFlag = _RcRadiusGlobalSourceIpFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 16),
    _RcRadiusGlobalSourceIpFlag_Type()
)
rcRadiusGlobalSourceIpFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalSourceIpFlag.setStatus("current")


class _RcRadiusGlobalCliCmdCount_Type(Integer32):
    """Custom type rcRadiusGlobalCliCmdCount based on Integer32"""
    defaultValue = 40

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 40),
    )


_RcRadiusGlobalCliCmdCount_Type.__name__ = "Integer32"
_RcRadiusGlobalCliCmdCount_Object = MibScalar
rcRadiusGlobalCliCmdCount = _RcRadiusGlobalCliCmdCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 1, 18),
    _RcRadiusGlobalCliCmdCount_Type()
)
rcRadiusGlobalCliCmdCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalCliCmdCount.setStatus("current")
_RcRadiusServerTable_Object = MibTable
rcRadiusServerTable = _RcRadiusServerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2)
)
if mibBuilder.loadTexts:
    rcRadiusServerTable.setStatus("obsolete")
_RcRadiusServerEntry_Object = MibTableRow
rcRadiusServerEntry = _RcRadiusServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1)
)
rcRadiusServerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcRadiusServerAddress"),
)
if mibBuilder.loadTexts:
    rcRadiusServerEntry.setStatus("deprecated")


class _RcRadiusServerPriority_Type(Integer32):
    """Custom type rcRadiusServerPriority based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcRadiusServerPriority_Type.__name__ = "Integer32"
_RcRadiusServerPriority_Object = MibTableColumn
rcRadiusServerPriority = _RcRadiusServerPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 1),
    _RcRadiusServerPriority_Type()
)
rcRadiusServerPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerPriority.setStatus("deprecated")
_RcRadiusServerAddress_Type = IpAddress
_RcRadiusServerAddress_Object = MibTableColumn
rcRadiusServerAddress = _RcRadiusServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 2),
    _RcRadiusServerAddress_Type()
)
rcRadiusServerAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerAddress.setStatus("deprecated")


class _RcRadiusServerTimeOut_Type(Integer32):
    """Custom type rcRadiusServerTimeOut based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcRadiusServerTimeOut_Type.__name__ = "Integer32"
_RcRadiusServerTimeOut_Object = MibTableColumn
rcRadiusServerTimeOut = _RcRadiusServerTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 3),
    _RcRadiusServerTimeOut_Type()
)
rcRadiusServerTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerTimeOut.setStatus("deprecated")


class _RcRadiusServerEnable_Type(TruthValue):
    """Custom type rcRadiusServerEnable based on TruthValue"""


_RcRadiusServerEnable_Object = MibTableColumn
rcRadiusServerEnable = _RcRadiusServerEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 4),
    _RcRadiusServerEnable_Type()
)
rcRadiusServerEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerEnable.setStatus("deprecated")


class _RcRadiusServerMaxRetries_Type(Integer32):
    """Custom type rcRadiusServerMaxRetries based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_RcRadiusServerMaxRetries_Type.__name__ = "Integer32"
_RcRadiusServerMaxRetries_Object = MibTableColumn
rcRadiusServerMaxRetries = _RcRadiusServerMaxRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 5),
    _RcRadiusServerMaxRetries_Type()
)
rcRadiusServerMaxRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerMaxRetries.setStatus("deprecated")


class _RcRadiusServerUdpPort_Type(Integer32):
    """Custom type rcRadiusServerUdpPort based on Integer32"""
    defaultValue = 1812

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65536),
    )


_RcRadiusServerUdpPort_Type.__name__ = "Integer32"
_RcRadiusServerUdpPort_Object = MibTableColumn
rcRadiusServerUdpPort = _RcRadiusServerUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 6),
    _RcRadiusServerUdpPort_Type()
)
rcRadiusServerUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerUdpPort.setStatus("deprecated")


class _RcRadiusServerSecretKey_Type(DisplayString):
    """Custom type rcRadiusServerSecretKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcRadiusServerSecretKey_Type.__name__ = "DisplayString"
_RcRadiusServerSecretKey_Object = MibTableColumn
rcRadiusServerSecretKey = _RcRadiusServerSecretKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 7),
    _RcRadiusServerSecretKey_Type()
)
rcRadiusServerSecretKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerSecretKey.setStatus("deprecated")
_RcRadiusServerAccessRequests_Type = Counter32
_RcRadiusServerAccessRequests_Object = MibTableColumn
rcRadiusServerAccessRequests = _RcRadiusServerAccessRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 8),
    _RcRadiusServerAccessRequests_Type()
)
rcRadiusServerAccessRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAccessRequests.setStatus("deprecated")
_RcRadiusServerAccessAccepts_Type = Counter32
_RcRadiusServerAccessAccepts_Object = MibTableColumn
rcRadiusServerAccessAccepts = _RcRadiusServerAccessAccepts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 9),
    _RcRadiusServerAccessAccepts_Type()
)
rcRadiusServerAccessAccepts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAccessAccepts.setStatus("deprecated")
_RcRadiusServerAccessRejects_Type = Counter32
_RcRadiusServerAccessRejects_Object = MibTableColumn
rcRadiusServerAccessRejects = _RcRadiusServerAccessRejects_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 10),
    _RcRadiusServerAccessRejects_Type()
)
rcRadiusServerAccessRejects.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAccessRejects.setStatus("deprecated")
_RcRadiusServerBadResponses_Type = Counter32
_RcRadiusServerBadResponses_Object = MibTableColumn
rcRadiusServerBadResponses = _RcRadiusServerBadResponses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 11),
    _RcRadiusServerBadResponses_Type()
)
rcRadiusServerBadResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerBadResponses.setStatus("deprecated")
_RcRadiusServerPendingRequests_Type = Counter32
_RcRadiusServerPendingRequests_Object = MibTableColumn
rcRadiusServerPendingRequests = _RcRadiusServerPendingRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 12),
    _RcRadiusServerPendingRequests_Type()
)
rcRadiusServerPendingRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerPendingRequests.setStatus("deprecated")
_RcRadiusServerClientRetries_Type = Counter32
_RcRadiusServerClientRetries_Object = MibTableColumn
rcRadiusServerClientRetries = _RcRadiusServerClientRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 13),
    _RcRadiusServerClientRetries_Type()
)
rcRadiusServerClientRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerClientRetries.setStatus("deprecated")
_RcRadiusServerRowStatus_Type = RowStatus
_RcRadiusServerRowStatus_Object = MibTableColumn
rcRadiusServerRowStatus = _RcRadiusServerRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 14),
    _RcRadiusServerRowStatus_Type()
)
rcRadiusServerRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerRowStatus.setStatus("deprecated")


class _RcRadiusServerAcctEnable_Type(TruthValue):
    """Custom type rcRadiusServerAcctEnable based on TruthValue"""


_RcRadiusServerAcctEnable_Object = MibTableColumn
rcRadiusServerAcctEnable = _RcRadiusServerAcctEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 15),
    _RcRadiusServerAcctEnable_Type()
)
rcRadiusServerAcctEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerAcctEnable.setStatus("deprecated")


class _RcRadiusServerAcctUdpPort_Type(Integer32):
    """Custom type rcRadiusServerAcctUdpPort based on Integer32"""
    defaultValue = 1813

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65536),
    )


_RcRadiusServerAcctUdpPort_Type.__name__ = "Integer32"
_RcRadiusServerAcctUdpPort_Object = MibTableColumn
rcRadiusServerAcctUdpPort = _RcRadiusServerAcctUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 16),
    _RcRadiusServerAcctUdpPort_Type()
)
rcRadiusServerAcctUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServerAcctUdpPort.setStatus("deprecated")
_RcRadiusServerAcctOnRequests_Type = Counter32
_RcRadiusServerAcctOnRequests_Object = MibTableColumn
rcRadiusServerAcctOnRequests = _RcRadiusServerAcctOnRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 17),
    _RcRadiusServerAcctOnRequests_Type()
)
rcRadiusServerAcctOnRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAcctOnRequests.setStatus("deprecated")
_RcRadiusServerAcctOffRequests_Type = Counter32
_RcRadiusServerAcctOffRequests_Object = MibTableColumn
rcRadiusServerAcctOffRequests = _RcRadiusServerAcctOffRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 18),
    _RcRadiusServerAcctOffRequests_Type()
)
rcRadiusServerAcctOffRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAcctOffRequests.setStatus("deprecated")
_RcRadiusServerAcctStartRequests_Type = Counter32
_RcRadiusServerAcctStartRequests_Object = MibTableColumn
rcRadiusServerAcctStartRequests = _RcRadiusServerAcctStartRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 19),
    _RcRadiusServerAcctStartRequests_Type()
)
rcRadiusServerAcctStartRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAcctStartRequests.setStatus("deprecated")
_RcRadiusServerAcctStopRequests_Type = Counter32
_RcRadiusServerAcctStopRequests_Object = MibTableColumn
rcRadiusServerAcctStopRequests = _RcRadiusServerAcctStopRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 20),
    _RcRadiusServerAcctStopRequests_Type()
)
rcRadiusServerAcctStopRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAcctStopRequests.setStatus("deprecated")
_RcRadiusServerAcctInterimRequests_Type = Counter32
_RcRadiusServerAcctInterimRequests_Object = MibTableColumn
rcRadiusServerAcctInterimRequests = _RcRadiusServerAcctInterimRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 21),
    _RcRadiusServerAcctInterimRequests_Type()
)
rcRadiusServerAcctInterimRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAcctInterimRequests.setStatus("deprecated")
_RcRadiusServerAcctBadResponses_Type = Counter32
_RcRadiusServerAcctBadResponses_Object = MibTableColumn
rcRadiusServerAcctBadResponses = _RcRadiusServerAcctBadResponses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 22),
    _RcRadiusServerAcctBadResponses_Type()
)
rcRadiusServerAcctBadResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAcctBadResponses.setStatus("deprecated")
_RcRadiusServerAcctPendingRequests_Type = Counter32
_RcRadiusServerAcctPendingRequests_Object = MibTableColumn
rcRadiusServerAcctPendingRequests = _RcRadiusServerAcctPendingRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 23),
    _RcRadiusServerAcctPendingRequests_Type()
)
rcRadiusServerAcctPendingRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAcctPendingRequests.setStatus("deprecated")
_RcRadiusServerAcctClientRetries_Type = Counter32
_RcRadiusServerAcctClientRetries_Object = MibTableColumn
rcRadiusServerAcctClientRetries = _RcRadiusServerAcctClientRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 2, 1, 24),
    _RcRadiusServerAcctClientRetries_Type()
)
rcRadiusServerAcctClientRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServerAcctClientRetries.setStatus("deprecated")
_RcRadiusServTable_Object = MibTable
rcRadiusServTable = _RcRadiusServTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3)
)
if mibBuilder.loadTexts:
    rcRadiusServTable.setStatus("current")
_RcRadiusServEntry_Object = MibTableRow
rcRadiusServEntry = _RcRadiusServEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1)
)
rcRadiusServEntry.setIndexNames(
    (0, "RAPID-CITY", "rcRadiusServAddress"),
    (0, "RAPID-CITY", "rcRadiusServUsedBy"),
)
if mibBuilder.loadTexts:
    rcRadiusServEntry.setStatus("current")


class _RcRadiusServPriority_Type(Integer32):
    """Custom type rcRadiusServPriority based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcRadiusServPriority_Type.__name__ = "Integer32"
_RcRadiusServPriority_Object = MibTableColumn
rcRadiusServPriority = _RcRadiusServPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 1),
    _RcRadiusServPriority_Type()
)
rcRadiusServPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServPriority.setStatus("current")
_RcRadiusServAddress_Type = IpAddress
_RcRadiusServAddress_Object = MibTableColumn
rcRadiusServAddress = _RcRadiusServAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 2),
    _RcRadiusServAddress_Type()
)
rcRadiusServAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServAddress.setStatus("current")


class _RcRadiusServTimeOut_Type(Integer32):
    """Custom type rcRadiusServTimeOut based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_RcRadiusServTimeOut_Type.__name__ = "Integer32"
_RcRadiusServTimeOut_Object = MibTableColumn
rcRadiusServTimeOut = _RcRadiusServTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 3),
    _RcRadiusServTimeOut_Type()
)
rcRadiusServTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServTimeOut.setStatus("current")


class _RcRadiusServEnable_Type(TruthValue):
    """Custom type rcRadiusServEnable based on TruthValue"""


_RcRadiusServEnable_Object = MibTableColumn
rcRadiusServEnable = _RcRadiusServEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 4),
    _RcRadiusServEnable_Type()
)
rcRadiusServEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServEnable.setStatus("current")


class _RcRadiusServMaxRetries_Type(Integer32):
    """Custom type rcRadiusServMaxRetries based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6),
    )


_RcRadiusServMaxRetries_Type.__name__ = "Integer32"
_RcRadiusServMaxRetries_Object = MibTableColumn
rcRadiusServMaxRetries = _RcRadiusServMaxRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 5),
    _RcRadiusServMaxRetries_Type()
)
rcRadiusServMaxRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServMaxRetries.setStatus("current")


class _RcRadiusServUdpPort_Type(Integer32):
    """Custom type rcRadiusServUdpPort based on Integer32"""
    defaultValue = 1812

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65536),
    )


_RcRadiusServUdpPort_Type.__name__ = "Integer32"
_RcRadiusServUdpPort_Object = MibTableColumn
rcRadiusServUdpPort = _RcRadiusServUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 6),
    _RcRadiusServUdpPort_Type()
)
rcRadiusServUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServUdpPort.setStatus("current")


class _RcRadiusServSecretKey_Type(DisplayString):
    """Custom type rcRadiusServSecretKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcRadiusServSecretKey_Type.__name__ = "DisplayString"
_RcRadiusServSecretKey_Object = MibTableColumn
rcRadiusServSecretKey = _RcRadiusServSecretKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 7),
    _RcRadiusServSecretKey_Type()
)
rcRadiusServSecretKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServSecretKey.setStatus("current")
_RcRadiusServAccessRequests_Type = Counter32
_RcRadiusServAccessRequests_Object = MibTableColumn
rcRadiusServAccessRequests = _RcRadiusServAccessRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 8),
    _RcRadiusServAccessRequests_Type()
)
rcRadiusServAccessRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAccessRequests.setStatus("current")
_RcRadiusServAccessAccepts_Type = Counter32
_RcRadiusServAccessAccepts_Object = MibTableColumn
rcRadiusServAccessAccepts = _RcRadiusServAccessAccepts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 9),
    _RcRadiusServAccessAccepts_Type()
)
rcRadiusServAccessAccepts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAccessAccepts.setStatus("current")
_RcRadiusServAccessRejects_Type = Counter32
_RcRadiusServAccessRejects_Object = MibTableColumn
rcRadiusServAccessRejects = _RcRadiusServAccessRejects_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 10),
    _RcRadiusServAccessRejects_Type()
)
rcRadiusServAccessRejects.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAccessRejects.setStatus("current")
_RcRadiusServBadResponses_Type = Counter32
_RcRadiusServBadResponses_Object = MibTableColumn
rcRadiusServBadResponses = _RcRadiusServBadResponses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 11),
    _RcRadiusServBadResponses_Type()
)
rcRadiusServBadResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServBadResponses.setStatus("current")
_RcRadiusServPendingRequests_Type = Counter32
_RcRadiusServPendingRequests_Object = MibTableColumn
rcRadiusServPendingRequests = _RcRadiusServPendingRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 12),
    _RcRadiusServPendingRequests_Type()
)
rcRadiusServPendingRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServPendingRequests.setStatus("current")
_RcRadiusServClientRetries_Type = Counter32
_RcRadiusServClientRetries_Object = MibTableColumn
rcRadiusServClientRetries = _RcRadiusServClientRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 13),
    _RcRadiusServClientRetries_Type()
)
rcRadiusServClientRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServClientRetries.setStatus("current")
_RcRadiusServRowStatus_Type = RowStatus
_RcRadiusServRowStatus_Object = MibTableColumn
rcRadiusServRowStatus = _RcRadiusServRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 14),
    _RcRadiusServRowStatus_Type()
)
rcRadiusServRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServRowStatus.setStatus("current")


class _RcRadiusServAcctEnable_Type(TruthValue):
    """Custom type rcRadiusServAcctEnable based on TruthValue"""


_RcRadiusServAcctEnable_Object = MibTableColumn
rcRadiusServAcctEnable = _RcRadiusServAcctEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 15),
    _RcRadiusServAcctEnable_Type()
)
rcRadiusServAcctEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServAcctEnable.setStatus("current")


class _RcRadiusServAcctUdpPort_Type(Integer32):
    """Custom type rcRadiusServAcctUdpPort based on Integer32"""
    defaultValue = 1813

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65536),
    )


_RcRadiusServAcctUdpPort_Type.__name__ = "Integer32"
_RcRadiusServAcctUdpPort_Object = MibTableColumn
rcRadiusServAcctUdpPort = _RcRadiusServAcctUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 16),
    _RcRadiusServAcctUdpPort_Type()
)
rcRadiusServAcctUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServAcctUdpPort.setStatus("current")
_RcRadiusServAcctOnRequests_Type = Counter32
_RcRadiusServAcctOnRequests_Object = MibTableColumn
rcRadiusServAcctOnRequests = _RcRadiusServAcctOnRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 17),
    _RcRadiusServAcctOnRequests_Type()
)
rcRadiusServAcctOnRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAcctOnRequests.setStatus("current")
_RcRadiusServAcctOffRequests_Type = Counter32
_RcRadiusServAcctOffRequests_Object = MibTableColumn
rcRadiusServAcctOffRequests = _RcRadiusServAcctOffRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 18),
    _RcRadiusServAcctOffRequests_Type()
)
rcRadiusServAcctOffRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAcctOffRequests.setStatus("current")
_RcRadiusServAcctStartRequests_Type = Counter32
_RcRadiusServAcctStartRequests_Object = MibTableColumn
rcRadiusServAcctStartRequests = _RcRadiusServAcctStartRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 19),
    _RcRadiusServAcctStartRequests_Type()
)
rcRadiusServAcctStartRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAcctStartRequests.setStatus("current")
_RcRadiusServAcctStopRequests_Type = Counter32
_RcRadiusServAcctStopRequests_Object = MibTableColumn
rcRadiusServAcctStopRequests = _RcRadiusServAcctStopRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 20),
    _RcRadiusServAcctStopRequests_Type()
)
rcRadiusServAcctStopRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAcctStopRequests.setStatus("current")
_RcRadiusServAcctInterimRequests_Type = Counter32
_RcRadiusServAcctInterimRequests_Object = MibTableColumn
rcRadiusServAcctInterimRequests = _RcRadiusServAcctInterimRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 21),
    _RcRadiusServAcctInterimRequests_Type()
)
rcRadiusServAcctInterimRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAcctInterimRequests.setStatus("current")
_RcRadiusServAcctBadResponses_Type = Counter32
_RcRadiusServAcctBadResponses_Object = MibTableColumn
rcRadiusServAcctBadResponses = _RcRadiusServAcctBadResponses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 22),
    _RcRadiusServAcctBadResponses_Type()
)
rcRadiusServAcctBadResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAcctBadResponses.setStatus("current")
_RcRadiusServAcctPendingRequests_Type = Counter32
_RcRadiusServAcctPendingRequests_Object = MibTableColumn
rcRadiusServAcctPendingRequests = _RcRadiusServAcctPendingRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 23),
    _RcRadiusServAcctPendingRequests_Type()
)
rcRadiusServAcctPendingRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAcctPendingRequests.setStatus("current")
_RcRadiusServAcctClientRetries_Type = Counter32
_RcRadiusServAcctClientRetries_Object = MibTableColumn
rcRadiusServAcctClientRetries = _RcRadiusServAcctClientRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 24),
    _RcRadiusServAcctClientRetries_Type()
)
rcRadiusServAcctClientRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAcctClientRetries.setStatus("current")


class _RcRadiusServUsedBy_Type(Integer32):
    """Custom type rcRadiusServUsedBy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cli", 1),
          ("eap", 4),
          ("igap", 2),
          ("snmp", 3),
          ("web", 5))
    )


_RcRadiusServUsedBy_Type.__name__ = "Integer32"
_RcRadiusServUsedBy_Object = MibTableColumn
rcRadiusServUsedBy = _RcRadiusServUsedBy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 25),
    _RcRadiusServUsedBy_Type()
)
rcRadiusServUsedBy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServUsedBy.setStatus("current")
_RcRadiusServNasIpAddress_Type = IpAddress
_RcRadiusServNasIpAddress_Object = MibTableColumn
rcRadiusServNasIpAddress = _RcRadiusServNasIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 26),
    _RcRadiusServNasIpAddress_Type()
)
rcRadiusServNasIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServNasIpAddress.setStatus("current")


class _RcRadiusServRoundTripTime_Type(DisplayString):
    """Custom type rcRadiusServRoundTripTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcRadiusServRoundTripTime_Type.__name__ = "DisplayString"
_RcRadiusServRoundTripTime_Object = MibTableColumn
rcRadiusServRoundTripTime = _RcRadiusServRoundTripTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 27),
    _RcRadiusServRoundTripTime_Type()
)
rcRadiusServRoundTripTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServRoundTripTime.setStatus("current")
_RcRadiusServAccessChallanges_Type = Counter32
_RcRadiusServAccessChallanges_Object = MibTableColumn
rcRadiusServAccessChallanges = _RcRadiusServAccessChallanges_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 28),
    _RcRadiusServAccessChallanges_Type()
)
rcRadiusServAccessChallanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusServAccessChallanges.setStatus("current")
_RcRadiusServSourceIpAddr_Type = IpAddress
_RcRadiusServSourceIpAddr_Object = MibTableColumn
rcRadiusServSourceIpAddr = _RcRadiusServSourceIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 3, 1, 29),
    _RcRadiusServSourceIpAddr_Type()
)
rcRadiusServSourceIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusServSourceIpAddr.setStatus("current")
_RcRadiusGlobalSnmp_ObjectIdentity = ObjectIdentity
rcRadiusGlobalSnmp = _RcRadiusGlobalSnmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4)
)


class _RcRadiusGlobalSnmpEnable_Type(TruthValue):
    """Custom type rcRadiusGlobalSnmpEnable based on TruthValue"""


_RcRadiusGlobalSnmpEnable_Object = MibScalar
rcRadiusGlobalSnmpEnable = _RcRadiusGlobalSnmpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4, 1),
    _RcRadiusGlobalSnmpEnable_Type()
)
rcRadiusGlobalSnmpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalSnmpEnable.setStatus("current")


class _RcRadiusGlobalSnmpAcctEnable_Type(TruthValue):
    """Custom type rcRadiusGlobalSnmpAcctEnable based on TruthValue"""


_RcRadiusGlobalSnmpAcctEnable_Object = MibScalar
rcRadiusGlobalSnmpAcctEnable = _RcRadiusGlobalSnmpAcctEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4, 2),
    _RcRadiusGlobalSnmpAcctEnable_Type()
)
rcRadiusGlobalSnmpAcctEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalSnmpAcctEnable.setStatus("current")


class _RcRadiusGlobalSnmpReAuthenticateTimer_Type(Integer32):
    """Custom type rcRadiusGlobalSnmpReAuthenticateTimer based on Integer32"""
    defaultValue = 180

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 65535),
    )


_RcRadiusGlobalSnmpReAuthenticateTimer_Type.__name__ = "Integer32"
_RcRadiusGlobalSnmpReAuthenticateTimer_Object = MibScalar
rcRadiusGlobalSnmpReAuthenticateTimer = _RcRadiusGlobalSnmpReAuthenticateTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4, 3),
    _RcRadiusGlobalSnmpReAuthenticateTimer_Type()
)
rcRadiusGlobalSnmpReAuthenticateTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalSnmpReAuthenticateTimer.setStatus("current")


class _RcRadiusGlobalSnmpAbortSessionTimer_Type(Integer32):
    """Custom type rcRadiusGlobalSnmpAbortSessionTimer based on Integer32"""
    defaultValue = 180

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 65535),
    )


_RcRadiusGlobalSnmpAbortSessionTimer_Type.__name__ = "Integer32"
_RcRadiusGlobalSnmpAbortSessionTimer_Object = MibScalar
rcRadiusGlobalSnmpAbortSessionTimer = _RcRadiusGlobalSnmpAbortSessionTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4, 4),
    _RcRadiusGlobalSnmpAbortSessionTimer_Type()
)
rcRadiusGlobalSnmpAbortSessionTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalSnmpAbortSessionTimer.setStatus("current")


class _RcRadiusGlobalSnmpUserName_Type(DisplayString):
    """Custom type rcRadiusGlobalSnmpUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcRadiusGlobalSnmpUserName_Type.__name__ = "DisplayString"
_RcRadiusGlobalSnmpUserName_Object = MibScalar
rcRadiusGlobalSnmpUserName = _RcRadiusGlobalSnmpUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4, 5),
    _RcRadiusGlobalSnmpUserName_Type()
)
rcRadiusGlobalSnmpUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRadiusGlobalSnmpUserName.setStatus("current")
_RcRadiusEapLastRejMac_Type = MacAddress
_RcRadiusEapLastRejMac_Object = MibScalar
rcRadiusEapLastRejMac = _RcRadiusEapLastRejMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4, 6),
    _RcRadiusEapLastRejMac_Type()
)
rcRadiusEapLastRejMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusEapLastRejMac.setStatus("current")
_RcRadiusPaePortNumber_Type = InterfaceIndex
_RcRadiusPaePortNumber_Object = MibScalar
rcRadiusPaePortNumber = _RcRadiusPaePortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4, 7),
    _RcRadiusPaePortNumber_Type()
)
rcRadiusPaePortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusPaePortNumber.setStatus("current")
_RcRadiusEapLastAuthMac_Type = MacAddress
_RcRadiusEapLastAuthMac_Object = MibScalar
rcRadiusEapLastAuthMac = _RcRadiusEapLastAuthMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 29, 4, 8),
    _RcRadiusEapLastAuthMac_Type()
)
rcRadiusEapLastAuthMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRadiusEapLastAuthMac.setStatus("current")
_RcIgmp_ObjectIdentity = ObjectIdentity
rcIgmp = _RcIgmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30)
)
_RcIgmpInterfaceExtnTable_Object = MibTable
rcIgmpInterfaceExtnTable = _RcIgmpInterfaceExtnTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1)
)
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnTable.setStatus("current")
_RcIgmpInterfaceExtnEntry_Object = MibTableRow
rcIgmpInterfaceExtnEntry = _RcIgmpInterfaceExtnEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1)
)
rcIgmpInterfaceExtnEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpInterfaceExtnIfIndex"),
)
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnEntry.setStatus("current")
_RcIgmpInterfaceExtnIfIndex_Type = InterfaceIndex
_RcIgmpInterfaceExtnIfIndex_Object = MibTableColumn
rcIgmpInterfaceExtnIfIndex = _RcIgmpInterfaceExtnIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 1),
    _RcIgmpInterfaceExtnIfIndex_Type()
)
rcIgmpInterfaceExtnIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnIfIndex.setStatus("current")
_RcIgmpInterfaceExtnSnoopEnable_Type = TruthValue
_RcIgmpInterfaceExtnSnoopEnable_Object = MibTableColumn
rcIgmpInterfaceExtnSnoopEnable = _RcIgmpInterfaceExtnSnoopEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 2),
    _RcIgmpInterfaceExtnSnoopEnable_Type()
)
rcIgmpInterfaceExtnSnoopEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnSnoopEnable.setStatus("current")
_RcIgmpInterfaceExtnProxySnoopEnable_Type = TruthValue
_RcIgmpInterfaceExtnProxySnoopEnable_Object = MibTableColumn
rcIgmpInterfaceExtnProxySnoopEnable = _RcIgmpInterfaceExtnProxySnoopEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 3),
    _RcIgmpInterfaceExtnProxySnoopEnable_Type()
)
rcIgmpInterfaceExtnProxySnoopEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnProxySnoopEnable.setStatus("current")


class _RcIgmpInterfaceExtnMaxAdvertiseInterval_Type(Integer32):
    """Custom type rcIgmpInterfaceExtnMaxAdvertiseInterval based on Integer32"""
    defaultValue = 20

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 180),
    )


_RcIgmpInterfaceExtnMaxAdvertiseInterval_Type.__name__ = "Integer32"
_RcIgmpInterfaceExtnMaxAdvertiseInterval_Object = MibTableColumn
rcIgmpInterfaceExtnMaxAdvertiseInterval = _RcIgmpInterfaceExtnMaxAdvertiseInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 4),
    _RcIgmpInterfaceExtnMaxAdvertiseInterval_Type()
)
rcIgmpInterfaceExtnMaxAdvertiseInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnMaxAdvertiseInterval.setStatus("current")


class _RcIgmpInterfaceExtnMinAdvertiseInterval_Type(Integer32):
    """Custom type rcIgmpInterfaceExtnMinAdvertiseInterval based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 180),
    )


_RcIgmpInterfaceExtnMinAdvertiseInterval_Type.__name__ = "Integer32"
_RcIgmpInterfaceExtnMinAdvertiseInterval_Object = MibTableColumn
rcIgmpInterfaceExtnMinAdvertiseInterval = _RcIgmpInterfaceExtnMinAdvertiseInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 5),
    _RcIgmpInterfaceExtnMinAdvertiseInterval_Type()
)
rcIgmpInterfaceExtnMinAdvertiseInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnMinAdvertiseInterval.setStatus("current")


class _RcIgmpInterfaceExtnMaxInitialAdvertiseInterval_Type(Integer32):
    """Custom type rcIgmpInterfaceExtnMaxInitialAdvertiseInterval based on Integer32"""
    defaultValue = 2


_RcIgmpInterfaceExtnMaxInitialAdvertiseInterval_Object = MibTableColumn
rcIgmpInterfaceExtnMaxInitialAdvertiseInterval = _RcIgmpInterfaceExtnMaxInitialAdvertiseInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 6),
    _RcIgmpInterfaceExtnMaxInitialAdvertiseInterval_Type()
)
rcIgmpInterfaceExtnMaxInitialAdvertiseInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnMaxInitialAdvertiseInterval.setStatus("current")


class _RcIgmpInterfaceExtnMaxInitialAdvertments_Type(Integer32):
    """Custom type rcIgmpInterfaceExtnMaxInitialAdvertments based on Integer32"""
    defaultValue = 3


_RcIgmpInterfaceExtnMaxInitialAdvertments_Object = MibTableColumn
rcIgmpInterfaceExtnMaxInitialAdvertments = _RcIgmpInterfaceExtnMaxInitialAdvertments_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 7),
    _RcIgmpInterfaceExtnMaxInitialAdvertments_Type()
)
rcIgmpInterfaceExtnMaxInitialAdvertments.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnMaxInitialAdvertments.setStatus("current")


class _RcIgmpInterfaceExtnNeighborDeadInterval_Type(Integer32):
    """Custom type rcIgmpInterfaceExtnNeighborDeadInterval based on Integer32"""
    defaultValue = 60


_RcIgmpInterfaceExtnNeighborDeadInterval_Object = MibTableColumn
rcIgmpInterfaceExtnNeighborDeadInterval = _RcIgmpInterfaceExtnNeighborDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 8),
    _RcIgmpInterfaceExtnNeighborDeadInterval_Type()
)
rcIgmpInterfaceExtnNeighborDeadInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnNeighborDeadInterval.setStatus("current")


class _RcIgmpInterfaceExtnFastLeaveEnable_Type(TruthValue):
    """Custom type rcIgmpInterfaceExtnFastLeaveEnable based on TruthValue"""


_RcIgmpInterfaceExtnFastLeaveEnable_Object = MibTableColumn
rcIgmpInterfaceExtnFastLeaveEnable = _RcIgmpInterfaceExtnFastLeaveEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 9),
    _RcIgmpInterfaceExtnFastLeaveEnable_Type()
)
rcIgmpInterfaceExtnFastLeaveEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnFastLeaveEnable.setStatus("current")
_RcIgmpInterfaceExtnFastLeavePortMembers_Type = PortSet
_RcIgmpInterfaceExtnFastLeavePortMembers_Object = MibTableColumn
rcIgmpInterfaceExtnFastLeavePortMembers = _RcIgmpInterfaceExtnFastLeavePortMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 10),
    _RcIgmpInterfaceExtnFastLeavePortMembers_Type()
)
rcIgmpInterfaceExtnFastLeavePortMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnFastLeavePortMembers.setStatus("current")
_RcIgmpInterfaceExtnMrdiscEnable_Type = TruthValue
_RcIgmpInterfaceExtnMrdiscEnable_Object = MibTableColumn
rcIgmpInterfaceExtnMrdiscEnable = _RcIgmpInterfaceExtnMrdiscEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 11),
    _RcIgmpInterfaceExtnMrdiscEnable_Type()
)
rcIgmpInterfaceExtnMrdiscEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnMrdiscEnable.setStatus("current")
_RcIgmpInterfaceExtnDiscoveredRouterPorts_Type = PortSet
_RcIgmpInterfaceExtnDiscoveredRouterPorts_Object = MibTableColumn
rcIgmpInterfaceExtnDiscoveredRouterPorts = _RcIgmpInterfaceExtnDiscoveredRouterPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 12),
    _RcIgmpInterfaceExtnDiscoveredRouterPorts_Type()
)
rcIgmpInterfaceExtnDiscoveredRouterPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnDiscoveredRouterPorts.setStatus("current")
_RcIgmpInterfaceExtnSnoopMRouterPorts_Type = PortSet
_RcIgmpInterfaceExtnSnoopMRouterPorts_Object = MibTableColumn
rcIgmpInterfaceExtnSnoopMRouterPorts = _RcIgmpInterfaceExtnSnoopMRouterPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 13),
    _RcIgmpInterfaceExtnSnoopMRouterPorts_Type()
)
rcIgmpInterfaceExtnSnoopMRouterPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnSnoopMRouterPorts.setStatus("current")
_RcIgmpInterfaceExtnSnoopActiveMRouterPorts_Type = PortSet
_RcIgmpInterfaceExtnSnoopActiveMRouterPorts_Object = MibTableColumn
rcIgmpInterfaceExtnSnoopActiveMRouterPorts = _RcIgmpInterfaceExtnSnoopActiveMRouterPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 14),
    _RcIgmpInterfaceExtnSnoopActiveMRouterPorts_Type()
)
rcIgmpInterfaceExtnSnoopActiveMRouterPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnSnoopActiveMRouterPorts.setStatus("current")
_RcIgmpInterfaceExtnSnoopMRouterExpiration_Type = Integer32
_RcIgmpInterfaceExtnSnoopMRouterExpiration_Object = MibTableColumn
rcIgmpInterfaceExtnSnoopMRouterExpiration = _RcIgmpInterfaceExtnSnoopMRouterExpiration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 15),
    _RcIgmpInterfaceExtnSnoopMRouterExpiration_Type()
)
rcIgmpInterfaceExtnSnoopMRouterExpiration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnSnoopMRouterExpiration.setStatus("current")


class _RcIgmpInterfaceExtnFlushAction_Type(Integer32):
    """Custom type rcIgmpInterfaceExtnFlushAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flushGrpMember", 2),
          ("flushMrouter", 3),
          ("flushSender", 4),
          ("none", 1))
    )


_RcIgmpInterfaceExtnFlushAction_Type.__name__ = "Integer32"
_RcIgmpInterfaceExtnFlushAction_Object = MibTableColumn
rcIgmpInterfaceExtnFlushAction = _RcIgmpInterfaceExtnFlushAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 16),
    _RcIgmpInterfaceExtnFlushAction_Type()
)
rcIgmpInterfaceExtnFlushAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnFlushAction.setStatus("current")
_RcIgmpInterfaceExtnRouterAlertEnable_Type = EnableValue
_RcIgmpInterfaceExtnRouterAlertEnable_Object = MibTableColumn
rcIgmpInterfaceExtnRouterAlertEnable = _RcIgmpInterfaceExtnRouterAlertEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 17),
    _RcIgmpInterfaceExtnRouterAlertEnable_Type()
)
rcIgmpInterfaceExtnRouterAlertEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnRouterAlertEnable.setStatus("current")
_RcIgmpInterfaceExtnSsmEnable_Type = TruthValue
_RcIgmpInterfaceExtnSsmEnable_Object = MibTableColumn
rcIgmpInterfaceExtnSsmEnable = _RcIgmpInterfaceExtnSsmEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 18),
    _RcIgmpInterfaceExtnSsmEnable_Type()
)
rcIgmpInterfaceExtnSsmEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnSsmEnable.setStatus("current")


class _RcIgmpInterfaceExtnIgapEnable_Type(EnableValue):
    """Custom type rcIgmpInterfaceExtnIgapEnable based on EnableValue"""


_RcIgmpInterfaceExtnIgapEnable_Object = MibTableColumn
rcIgmpInterfaceExtnIgapEnable = _RcIgmpInterfaceExtnIgapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 19),
    _RcIgmpInterfaceExtnIgapEnable_Type()
)
rcIgmpInterfaceExtnIgapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnIgapEnable.setStatus("current")


class _RcIgmpInterfaceExtnAccntEnable_Type(EnableValue):
    """Custom type rcIgmpInterfaceExtnAccntEnable based on EnableValue"""


_RcIgmpInterfaceExtnAccntEnable_Object = MibTableColumn
rcIgmpInterfaceExtnAccntEnable = _RcIgmpInterfaceExtnAccntEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 20),
    _RcIgmpInterfaceExtnAccntEnable_Type()
)
rcIgmpInterfaceExtnAccntEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnAccntEnable.setStatus("current")


class _RcIgmpInterfaceExtnAuthEnable_Type(EnableValue):
    """Custom type rcIgmpInterfaceExtnAuthEnable based on EnableValue"""


_RcIgmpInterfaceExtnAuthEnable_Object = MibTableColumn
rcIgmpInterfaceExtnAuthEnable = _RcIgmpInterfaceExtnAuthEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 21),
    _RcIgmpInterfaceExtnAuthEnable_Type()
)
rcIgmpInterfaceExtnAuthEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnAuthEnable.setStatus("current")


class _RcIgmpInterfaceExtnStreamLimitEnable_Type(EnableValue):
    """Custom type rcIgmpInterfaceExtnStreamLimitEnable based on EnableValue"""


_RcIgmpInterfaceExtnStreamLimitEnable_Object = MibTableColumn
rcIgmpInterfaceExtnStreamLimitEnable = _RcIgmpInterfaceExtnStreamLimitEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 22),
    _RcIgmpInterfaceExtnStreamLimitEnable_Type()
)
rcIgmpInterfaceExtnStreamLimitEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnStreamLimitEnable.setStatus("current")


class _RcIgmpInterfaceExtnMaxStreams_Type(Integer32):
    """Custom type rcIgmpInterfaceExtnMaxStreams based on Integer32"""
    defaultValue = 4


_RcIgmpInterfaceExtnMaxStreams_Object = MibTableColumn
rcIgmpInterfaceExtnMaxStreams = _RcIgmpInterfaceExtnMaxStreams_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 23),
    _RcIgmpInterfaceExtnMaxStreams_Type()
)
rcIgmpInterfaceExtnMaxStreams.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnMaxStreams.setStatus("current")
_RcIgmpInterfaceExtnNumStreams_Type = Integer32
_RcIgmpInterfaceExtnNumStreams_Object = MibTableColumn
rcIgmpInterfaceExtnNumStreams = _RcIgmpInterfaceExtnNumStreams_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 24),
    _RcIgmpInterfaceExtnNumStreams_Type()
)
rcIgmpInterfaceExtnNumStreams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnNumStreams.setStatus("current")
_RcIgmpInterfaceExtnNewQuerier_Type = IpAddress
_RcIgmpInterfaceExtnNewQuerier_Object = MibTableColumn
rcIgmpInterfaceExtnNewQuerier = _RcIgmpInterfaceExtnNewQuerier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 25),
    _RcIgmpInterfaceExtnNewQuerier_Type()
)
rcIgmpInterfaceExtnNewQuerier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnNewQuerier.setStatus("current")
_RcIgmpInterfaceExtnSnoopQuerierEnable_Type = TruthValue
_RcIgmpInterfaceExtnSnoopQuerierEnable_Object = MibTableColumn
rcIgmpInterfaceExtnSnoopQuerierEnable = _RcIgmpInterfaceExtnSnoopQuerierEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 26),
    _RcIgmpInterfaceExtnSnoopQuerierEnable_Type()
)
rcIgmpInterfaceExtnSnoopQuerierEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnSnoopQuerierEnable.setStatus("current")
_RcIgmpInterfaceExtnSnoopQuerierAddr_Type = IpAddress
_RcIgmpInterfaceExtnSnoopQuerierAddr_Object = MibTableColumn
rcIgmpInterfaceExtnSnoopQuerierAddr = _RcIgmpInterfaceExtnSnoopQuerierAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 27),
    _RcIgmpInterfaceExtnSnoopQuerierAddr_Type()
)
rcIgmpInterfaceExtnSnoopQuerierAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnSnoopQuerierAddr.setStatus("current")
_RcIgmpInterfaceExtnMvrEnable_Type = TruthValue
_RcIgmpInterfaceExtnMvrEnable_Object = MibTableColumn
rcIgmpInterfaceExtnMvrEnable = _RcIgmpInterfaceExtnMvrEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 28),
    _RcIgmpInterfaceExtnMvrEnable_Type()
)
rcIgmpInterfaceExtnMvrEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnMvrEnable.setStatus("current")
_RcIgmpInterfaceExtnMvrProxyEnable_Type = TruthValue
_RcIgmpInterfaceExtnMvrProxyEnable_Object = MibTableColumn
rcIgmpInterfaceExtnMvrProxyEnable = _RcIgmpInterfaceExtnMvrProxyEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 29),
    _RcIgmpInterfaceExtnMvrProxyEnable_Type()
)
rcIgmpInterfaceExtnMvrProxyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnMvrProxyEnable.setStatus("current")


class _RcIgmpInterfaceExtnDynamicDowngradeEnable_Type(TruthValue):
    """Custom type rcIgmpInterfaceExtnDynamicDowngradeEnable based on TruthValue"""


_RcIgmpInterfaceExtnDynamicDowngradeEnable_Object = MibTableColumn
rcIgmpInterfaceExtnDynamicDowngradeEnable = _RcIgmpInterfaceExtnDynamicDowngradeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 30),
    _RcIgmpInterfaceExtnDynamicDowngradeEnable_Type()
)
rcIgmpInterfaceExtnDynamicDowngradeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnDynamicDowngradeEnable.setStatus("current")


class _RcIgmpInterfaceExtnCompatibilityModeEnable_Type(TruthValue):
    """Custom type rcIgmpInterfaceExtnCompatibilityModeEnable based on TruthValue"""


_RcIgmpInterfaceExtnCompatibilityModeEnable_Object = MibTableColumn
rcIgmpInterfaceExtnCompatibilityModeEnable = _RcIgmpInterfaceExtnCompatibilityModeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 31),
    _RcIgmpInterfaceExtnCompatibilityModeEnable_Type()
)
rcIgmpInterfaceExtnCompatibilityModeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnCompatibilityModeEnable.setStatus("current")


class _RcIgmpInterfaceExtnOperVersion_Type(Integer32):
    """Custom type rcIgmpInterfaceExtnOperVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("version1", 1),
          ("version2", 2),
          ("version3", 3))
    )


_RcIgmpInterfaceExtnOperVersion_Type.__name__ = "Integer32"
_RcIgmpInterfaceExtnOperVersion_Object = MibTableColumn
rcIgmpInterfaceExtnOperVersion = _RcIgmpInterfaceExtnOperVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 1, 1, 32),
    _RcIgmpInterfaceExtnOperVersion_Type()
)
rcIgmpInterfaceExtnOperVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpInterfaceExtnOperVersion.setStatus("current")
_RcIgmpStaticTable_Object = MibTable
rcIgmpStaticTable = _RcIgmpStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 2)
)
if mibBuilder.loadTexts:
    rcIgmpStaticTable.setStatus("current")
_RcIgmpStaticEntry_Object = MibTableRow
rcIgmpStaticEntry = _RcIgmpStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 2, 1)
)
rcIgmpStaticEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpStaticIfIndex"),
    (0, "RAPID-CITY", "rcIgmpStaticGrpAddr"),
)
if mibBuilder.loadTexts:
    rcIgmpStaticEntry.setStatus("current")
_RcIgmpStaticIfIndex_Type = InterfaceIndex
_RcIgmpStaticIfIndex_Object = MibTableColumn
rcIgmpStaticIfIndex = _RcIgmpStaticIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 2, 1, 1),
    _RcIgmpStaticIfIndex_Type()
)
rcIgmpStaticIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpStaticIfIndex.setStatus("current")
_RcIgmpStaticGrpAddr_Type = IpAddress
_RcIgmpStaticGrpAddr_Object = MibTableColumn
rcIgmpStaticGrpAddr = _RcIgmpStaticGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 2, 1, 2),
    _RcIgmpStaticGrpAddr_Type()
)
rcIgmpStaticGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpStaticGrpAddr.setStatus("current")
_RcIgmpStaticMemberPorts_Type = PortSet
_RcIgmpStaticMemberPorts_Object = MibTableColumn
rcIgmpStaticMemberPorts = _RcIgmpStaticMemberPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 2, 1, 3),
    _RcIgmpStaticMemberPorts_Type()
)
rcIgmpStaticMemberPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpStaticMemberPorts.setStatus("current")
_RcIgmpStaticNotAllowedToJoin_Type = PortSet
_RcIgmpStaticNotAllowedToJoin_Object = MibTableColumn
rcIgmpStaticNotAllowedToJoin = _RcIgmpStaticNotAllowedToJoin_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 2, 1, 4),
    _RcIgmpStaticNotAllowedToJoin_Type()
)
rcIgmpStaticNotAllowedToJoin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpStaticNotAllowedToJoin.setStatus("current")
_RcIgmpStaticRowStatus_Type = RowStatus
_RcIgmpStaticRowStatus_Object = MibTableColumn
rcIgmpStaticRowStatus = _RcIgmpStaticRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 2, 1, 5),
    _RcIgmpStaticRowStatus_Type()
)
rcIgmpStaticRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpStaticRowStatus.setStatus("current")
_RcIgmpStaticToGrpAddr_Type = IpAddress
_RcIgmpStaticToGrpAddr_Object = MibTableColumn
rcIgmpStaticToGrpAddr = _RcIgmpStaticToGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 2, 1, 6),
    _RcIgmpStaticToGrpAddr_Type()
)
rcIgmpStaticToGrpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpStaticToGrpAddr.setStatus("current")
_RcIgmpAccessTable_Object = MibTable
rcIgmpAccessTable = _RcIgmpAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 3)
)
if mibBuilder.loadTexts:
    rcIgmpAccessTable.setStatus("current")
_RcIgmpAccessEntry_Object = MibTableRow
rcIgmpAccessEntry = _RcIgmpAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 3, 1)
)
rcIgmpAccessEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpAccessIfIndex"),
    (0, "RAPID-CITY", "rcIgmpAccessGrpAddr"),
    (0, "RAPID-CITY", "rcIgmpAccessHostAddr"),
    (0, "RAPID-CITY", "rcIgmpAccessHostMask"),
)
if mibBuilder.loadTexts:
    rcIgmpAccessEntry.setStatus("current")
_RcIgmpAccessIfIndex_Type = InterfaceIndex
_RcIgmpAccessIfIndex_Object = MibTableColumn
rcIgmpAccessIfIndex = _RcIgmpAccessIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 3, 1, 1),
    _RcIgmpAccessIfIndex_Type()
)
rcIgmpAccessIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpAccessIfIndex.setStatus("current")
_RcIgmpAccessGrpAddr_Type = IpAddress
_RcIgmpAccessGrpAddr_Object = MibTableColumn
rcIgmpAccessGrpAddr = _RcIgmpAccessGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 3, 1, 2),
    _RcIgmpAccessGrpAddr_Type()
)
rcIgmpAccessGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpAccessGrpAddr.setStatus("current")
_RcIgmpAccessHostAddr_Type = IpAddress
_RcIgmpAccessHostAddr_Object = MibTableColumn
rcIgmpAccessHostAddr = _RcIgmpAccessHostAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 3, 1, 3),
    _RcIgmpAccessHostAddr_Type()
)
rcIgmpAccessHostAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpAccessHostAddr.setStatus("current")


class _RcIgmpAccessMode_Type(Integer32):
    """Custom type rcIgmpAccessMode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("denyBOTH", 3),
          ("denyRX", 2),
          ("denyTX", 1))
    )


_RcIgmpAccessMode_Type.__name__ = "Integer32"
_RcIgmpAccessMode_Object = MibTableColumn
rcIgmpAccessMode = _RcIgmpAccessMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 3, 1, 4),
    _RcIgmpAccessMode_Type()
)
rcIgmpAccessMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpAccessMode.setStatus("current")
_RcIgmpAccessRowStatus_Type = RowStatus
_RcIgmpAccessRowStatus_Object = MibTableColumn
rcIgmpAccessRowStatus = _RcIgmpAccessRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 3, 1, 5),
    _RcIgmpAccessRowStatus_Type()
)
rcIgmpAccessRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpAccessRowStatus.setStatus("current")
_RcIgmpAccessHostMask_Type = IpAddress
_RcIgmpAccessHostMask_Object = MibTableColumn
rcIgmpAccessHostMask = _RcIgmpAccessHostMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 3, 1, 6),
    _RcIgmpAccessHostMask_Type()
)
rcIgmpAccessHostMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpAccessHostMask.setStatus("current")
_RcIgmpSenderTable_Object = MibTable
rcIgmpSenderTable = _RcIgmpSenderTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 4)
)
if mibBuilder.loadTexts:
    rcIgmpSenderTable.setStatus("current")
_RcIgmpSenderEntry_Object = MibTableRow
rcIgmpSenderEntry = _RcIgmpSenderEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 4, 1)
)
rcIgmpSenderEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpSenderGrpAddr"),
    (0, "RAPID-CITY", "rcIgmpSenderIfIndex"),
    (0, "RAPID-CITY", "rcIgmpSenderMemberAddr"),
)
if mibBuilder.loadTexts:
    rcIgmpSenderEntry.setStatus("current")
_RcIgmpSenderGrpAddr_Type = IpAddress
_RcIgmpSenderGrpAddr_Object = MibTableColumn
rcIgmpSenderGrpAddr = _RcIgmpSenderGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 4, 1, 1),
    _RcIgmpSenderGrpAddr_Type()
)
rcIgmpSenderGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSenderGrpAddr.setStatus("current")
_RcIgmpSenderIfIndex_Type = InterfaceIndex
_RcIgmpSenderIfIndex_Object = MibTableColumn
rcIgmpSenderIfIndex = _RcIgmpSenderIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 4, 1, 2),
    _RcIgmpSenderIfIndex_Type()
)
rcIgmpSenderIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSenderIfIndex.setStatus("current")
_RcIgmpSenderMemberAddr_Type = IpAddress
_RcIgmpSenderMemberAddr_Object = MibTableColumn
rcIgmpSenderMemberAddr = _RcIgmpSenderMemberAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 4, 1, 3),
    _RcIgmpSenderMemberAddr_Type()
)
rcIgmpSenderMemberAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSenderMemberAddr.setStatus("current")


class _RcIgmpSenderAction_Type(Integer32):
    """Custom type rcIgmpSenderAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("flushEntry", 1),
          ("flushGrp", 2),
          ("none", 0))
    )


_RcIgmpSenderAction_Type.__name__ = "Integer32"
_RcIgmpSenderAction_Object = MibTableColumn
rcIgmpSenderAction = _RcIgmpSenderAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 4, 1, 4),
    _RcIgmpSenderAction_Type()
)
rcIgmpSenderAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpSenderAction.setStatus("current")
_RcIgmpSenderTPort_Type = Integer32
_RcIgmpSenderTPort_Object = MibTableColumn
rcIgmpSenderTPort = _RcIgmpSenderTPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 4, 1, 5),
    _RcIgmpSenderTPort_Type()
)
rcIgmpSenderTPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSenderTPort.setStatus("current")


class _RcIgmpSenderState_Type(Integer32):
    """Custom type rcIgmpSenderState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("filtered", 1),
          ("notfiltered", 2))
    )


_RcIgmpSenderState_Type.__name__ = "Integer32"
_RcIgmpSenderState_Object = MibTableColumn
rcIgmpSenderState = _RcIgmpSenderState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 4, 1, 6),
    _RcIgmpSenderState_Type()
)
rcIgmpSenderState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSenderState.setStatus("current")
_RcIgmpSsmGlobal_ObjectIdentity = ObjectIdentity
rcIgmpSsmGlobal = _RcIgmpSsmGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 5)
)
_RcIgmpSsmGlobalDynamicLearning_Type = TruthValue
_RcIgmpSsmGlobalDynamicLearning_Object = MibScalar
rcIgmpSsmGlobalDynamicLearning = _RcIgmpSsmGlobalDynamicLearning_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 5, 1),
    _RcIgmpSsmGlobalDynamicLearning_Type()
)
rcIgmpSsmGlobalDynamicLearning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpSsmGlobalDynamicLearning.setStatus("current")


class _RcIgmpSsmGlobalAdminAction_Type(Integer32):
    """Custom type rcIgmpSsmGlobalAdminAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disableAll", 3),
          ("enableAll", 2),
          ("none", 1))
    )


_RcIgmpSsmGlobalAdminAction_Type.__name__ = "Integer32"
_RcIgmpSsmGlobalAdminAction_Object = MibScalar
rcIgmpSsmGlobalAdminAction = _RcIgmpSsmGlobalAdminAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 5, 2),
    _RcIgmpSsmGlobalAdminAction_Type()
)
rcIgmpSsmGlobalAdminAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpSsmGlobalAdminAction.setStatus("current")
_RcIgmpSsmGlobalRangeGroup_Type = IpAddress
_RcIgmpSsmGlobalRangeGroup_Object = MibScalar
rcIgmpSsmGlobalRangeGroup = _RcIgmpSsmGlobalRangeGroup_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 5, 3),
    _RcIgmpSsmGlobalRangeGroup_Type()
)
rcIgmpSsmGlobalRangeGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpSsmGlobalRangeGroup.setStatus("current")
_RcIgmpSsmGlobalRangeMask_Type = IpAddress
_RcIgmpSsmGlobalRangeMask_Object = MibScalar
rcIgmpSsmGlobalRangeMask = _RcIgmpSsmGlobalRangeMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 5, 4),
    _RcIgmpSsmGlobalRangeMask_Type()
)
rcIgmpSsmGlobalRangeMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpSsmGlobalRangeMask.setStatus("current")
_RcIgmpSsmTable_Object = MibTable
rcIgmpSsmTable = _RcIgmpSsmTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 6)
)
if mibBuilder.loadTexts:
    rcIgmpSsmTable.setStatus("current")
_RcIgmpSsmEntry_Object = MibTableRow
rcIgmpSsmEntry = _RcIgmpSsmEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 6, 1)
)
rcIgmpSsmEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpSsmIpMulticastGrp"),
)
if mibBuilder.loadTexts:
    rcIgmpSsmEntry.setStatus("current")
_RcIgmpSsmIpMulticastGrp_Type = IpAddress
_RcIgmpSsmIpMulticastGrp_Object = MibTableColumn
rcIgmpSsmIpMulticastGrp = _RcIgmpSsmIpMulticastGrp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 6, 1, 1),
    _RcIgmpSsmIpMulticastGrp_Type()
)
rcIgmpSsmIpMulticastGrp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSsmIpMulticastGrp.setStatus("current")
_RcIgmpSsmIpSource_Type = IpAddress
_RcIgmpSsmIpSource_Object = MibTableColumn
rcIgmpSsmIpSource = _RcIgmpSsmIpSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 6, 1, 2),
    _RcIgmpSsmIpSource_Type()
)
rcIgmpSsmIpSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpSsmIpSource.setStatus("current")


class _RcIgmpSsmLearningMode_Type(Integer32):
    """Custom type rcIgmpSsmLearningMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 1),
          ("static", 2))
    )


_RcIgmpSsmLearningMode_Type.__name__ = "Integer32"
_RcIgmpSsmLearningMode_Object = MibTableColumn
rcIgmpSsmLearningMode = _RcIgmpSsmLearningMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 6, 1, 3),
    _RcIgmpSsmLearningMode_Type()
)
rcIgmpSsmLearningMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSsmLearningMode.setStatus("current")
_RcIgmpSsmActivity_Type = TruthValue
_RcIgmpSsmActivity_Object = MibTableColumn
rcIgmpSsmActivity = _RcIgmpSsmActivity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 6, 1, 4),
    _RcIgmpSsmActivity_Type()
)
rcIgmpSsmActivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSsmActivity.setStatus("current")
_RcIgmpSsmAdminState_Type = EnableValue
_RcIgmpSsmAdminState_Object = MibTableColumn
rcIgmpSsmAdminState = _RcIgmpSsmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 6, 1, 5),
    _RcIgmpSsmAdminState_Type()
)
rcIgmpSsmAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpSsmAdminState.setStatus("current")
_RcIgmpSsmRowStatus_Type = RowStatus
_RcIgmpSsmRowStatus_Object = MibTableColumn
rcIgmpSsmRowStatus = _RcIgmpSsmRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 6, 1, 6),
    _RcIgmpSsmRowStatus_Type()
)
rcIgmpSsmRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpSsmRowStatus.setStatus("current")
_RcIgmpNewAccessTable_Object = MibTable
rcIgmpNewAccessTable = _RcIgmpNewAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7)
)
if mibBuilder.loadTexts:
    rcIgmpNewAccessTable.setStatus("current")
_RcIgmpNewAccessEntry_Object = MibTableRow
rcIgmpNewAccessEntry = _RcIgmpNewAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7, 1)
)
rcIgmpNewAccessEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpNewAccessIfIndex"),
    (0, "RAPID-CITY", "rcIgmpNewAccessPrefixListId"),
    (0, "RAPID-CITY", "rcIgmpNewAccessHostAddr"),
    (0, "RAPID-CITY", "rcIgmpNewAccessHostMask"),
)
if mibBuilder.loadTexts:
    rcIgmpNewAccessEntry.setStatus("current")
_RcIgmpNewAccessIfIndex_Type = InterfaceIndex
_RcIgmpNewAccessIfIndex_Object = MibTableColumn
rcIgmpNewAccessIfIndex = _RcIgmpNewAccessIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7, 1, 1),
    _RcIgmpNewAccessIfIndex_Type()
)
rcIgmpNewAccessIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewAccessIfIndex.setStatus("current")


class _RcIgmpNewAccessPrefixListId_Type(Integer32):
    """Custom type rcIgmpNewAccessPrefixListId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIgmpNewAccessPrefixListId_Type.__name__ = "Integer32"
_RcIgmpNewAccessPrefixListId_Object = MibTableColumn
rcIgmpNewAccessPrefixListId = _RcIgmpNewAccessPrefixListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7, 1, 2),
    _RcIgmpNewAccessPrefixListId_Type()
)
rcIgmpNewAccessPrefixListId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewAccessPrefixListId.setStatus("current")
_RcIgmpNewAccessPrefixListName_Type = DisplayString
_RcIgmpNewAccessPrefixListName_Object = MibTableColumn
rcIgmpNewAccessPrefixListName = _RcIgmpNewAccessPrefixListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7, 1, 3),
    _RcIgmpNewAccessPrefixListName_Type()
)
rcIgmpNewAccessPrefixListName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpNewAccessPrefixListName.setStatus("current")
_RcIgmpNewAccessHostAddr_Type = IpAddress
_RcIgmpNewAccessHostAddr_Object = MibTableColumn
rcIgmpNewAccessHostAddr = _RcIgmpNewAccessHostAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7, 1, 4),
    _RcIgmpNewAccessHostAddr_Type()
)
rcIgmpNewAccessHostAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewAccessHostAddr.setStatus("current")
_RcIgmpNewAccessHostMask_Type = IpAddress
_RcIgmpNewAccessHostMask_Object = MibTableColumn
rcIgmpNewAccessHostMask = _RcIgmpNewAccessHostMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7, 1, 5),
    _RcIgmpNewAccessHostMask_Type()
)
rcIgmpNewAccessHostMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewAccessHostMask.setStatus("current")


class _RcIgmpNewAccessActionMode_Type(Integer32):
    """Custom type rcIgmpNewAccessActionMode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("allowBOTH", 6),
          ("allowRX", 5),
          ("allowTX", 4),
          ("denyBOTH", 3),
          ("denyRX", 2),
          ("denyTX", 1))
    )


_RcIgmpNewAccessActionMode_Type.__name__ = "Integer32"
_RcIgmpNewAccessActionMode_Object = MibTableColumn
rcIgmpNewAccessActionMode = _RcIgmpNewAccessActionMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7, 1, 6),
    _RcIgmpNewAccessActionMode_Type()
)
rcIgmpNewAccessActionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpNewAccessActionMode.setStatus("current")
_RcIgmpNewAccessRowStatus_Type = RowStatus
_RcIgmpNewAccessRowStatus_Object = MibTableColumn
rcIgmpNewAccessRowStatus = _RcIgmpNewAccessRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 7, 1, 7),
    _RcIgmpNewAccessRowStatus_Type()
)
rcIgmpNewAccessRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpNewAccessRowStatus.setStatus("current")
_RcIgmpChannelLimitTable_Object = MibTable
rcIgmpChannelLimitTable = _RcIgmpChannelLimitTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 8)
)
if mibBuilder.loadTexts:
    rcIgmpChannelLimitTable.setStatus("current")
_RcIgmpChannelLimitEntry_Object = MibTableRow
rcIgmpChannelLimitEntry = _RcIgmpChannelLimitEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 8, 1)
)
rcIgmpChannelLimitEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpChannelLimitIfIndex"),
    (0, "RAPID-CITY", "rcIgmpChannelLimitPort"),
)
if mibBuilder.loadTexts:
    rcIgmpChannelLimitEntry.setStatus("current")
_RcIgmpChannelLimitIfIndex_Type = InterfaceIndex
_RcIgmpChannelLimitIfIndex_Object = MibTableColumn
rcIgmpChannelLimitIfIndex = _RcIgmpChannelLimitIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 8, 1, 1),
    _RcIgmpChannelLimitIfIndex_Type()
)
rcIgmpChannelLimitIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpChannelLimitIfIndex.setStatus("current")


class _RcIgmpChannelLimitPort_Type(Integer32):
    """Custom type rcIgmpChannelLimitPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIgmpChannelLimitPort_Type.__name__ = "Integer32"
_RcIgmpChannelLimitPort_Object = MibTableColumn
rcIgmpChannelLimitPort = _RcIgmpChannelLimitPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 8, 1, 2),
    _RcIgmpChannelLimitPort_Type()
)
rcIgmpChannelLimitPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpChannelLimitPort.setStatus("current")


class _RcIgmpChannelLimitMaxStreams_Type(Integer32):
    """Custom type rcIgmpChannelLimitMaxStreams based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIgmpChannelLimitMaxStreams_Type.__name__ = "Integer32"
_RcIgmpChannelLimitMaxStreams_Object = MibTableColumn
rcIgmpChannelLimitMaxStreams = _RcIgmpChannelLimitMaxStreams_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 8, 1, 3),
    _RcIgmpChannelLimitMaxStreams_Type()
)
rcIgmpChannelLimitMaxStreams.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpChannelLimitMaxStreams.setStatus("current")
_RcIgmpChannelLimitNumStreams_Type = Integer32
_RcIgmpChannelLimitNumStreams_Object = MibTableColumn
rcIgmpChannelLimitNumStreams = _RcIgmpChannelLimitNumStreams_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 8, 1, 4),
    _RcIgmpChannelLimitNumStreams_Type()
)
rcIgmpChannelLimitNumStreams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpChannelLimitNumStreams.setStatus("current")
_RcIgmpChannelLimitRowStatus_Type = RowStatus
_RcIgmpChannelLimitRowStatus_Object = MibTableColumn
rcIgmpChannelLimitRowStatus = _RcIgmpChannelLimitRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 8, 1, 5),
    _RcIgmpChannelLimitRowStatus_Type()
)
rcIgmpChannelLimitRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpChannelLimitRowStatus.setStatus("current")
_RcIgmpIgapServiceAbilityTable_Object = MibTable
rcIgmpIgapServiceAbilityTable = _RcIgmpIgapServiceAbilityTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9)
)
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityTable.setStatus("current")
_RcIgmpIgapServiceAbilityEntry_Object = MibTableRow
rcIgmpIgapServiceAbilityEntry = _RcIgmpIgapServiceAbilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1)
)
rcIgmpIgapServiceAbilityEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpIgapServiceAbilityIfIndex"),
)
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityEntry.setStatus("current")
_RcIgmpIgapServiceAbilityIfIndex_Type = InterfaceIndex
_RcIgmpIgapServiceAbilityIfIndex_Object = MibTableColumn
rcIgmpIgapServiceAbilityIfIndex = _RcIgmpIgapServiceAbilityIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1, 1),
    _RcIgmpIgapServiceAbilityIfIndex_Type()
)
rcIgmpIgapServiceAbilityIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityIfIndex.setStatus("current")
_RcIgmpIgapServiceAbilityAuthSuccess_Type = Counter64
_RcIgmpIgapServiceAbilityAuthSuccess_Object = MibTableColumn
rcIgmpIgapServiceAbilityAuthSuccess = _RcIgmpIgapServiceAbilityAuthSuccess_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1, 2),
    _RcIgmpIgapServiceAbilityAuthSuccess_Type()
)
rcIgmpIgapServiceAbilityAuthSuccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityAuthSuccess.setStatus("current")
_RcIgmpIgapServiceAbilityAuthReject_Type = Counter64
_RcIgmpIgapServiceAbilityAuthReject_Object = MibTableColumn
rcIgmpIgapServiceAbilityAuthReject = _RcIgmpIgapServiceAbilityAuthReject_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1, 3),
    _RcIgmpIgapServiceAbilityAuthReject_Type()
)
rcIgmpIgapServiceAbilityAuthReject.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityAuthReject.setStatus("current")
_RcIgmpIgapServiceAbilityRespTimeout_Type = Counter64
_RcIgmpIgapServiceAbilityRespTimeout_Object = MibTableColumn
rcIgmpIgapServiceAbilityRespTimeout = _RcIgmpIgapServiceAbilityRespTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1, 4),
    _RcIgmpIgapServiceAbilityRespTimeout_Type()
)
rcIgmpIgapServiceAbilityRespTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityRespTimeout.setStatus("current")
_RcIgmpIgapServiceAbilityPapJoinReq_Type = Counter64
_RcIgmpIgapServiceAbilityPapJoinReq_Object = MibTableColumn
rcIgmpIgapServiceAbilityPapJoinReq = _RcIgmpIgapServiceAbilityPapJoinReq_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1, 5),
    _RcIgmpIgapServiceAbilityPapJoinReq_Type()
)
rcIgmpIgapServiceAbilityPapJoinReq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityPapJoinReq.setStatus("current")
_RcIgmpIgapServiceAbilityBasicQuery_Type = Counter64
_RcIgmpIgapServiceAbilityBasicQuery_Object = MibTableColumn
rcIgmpIgapServiceAbilityBasicQuery = _RcIgmpIgapServiceAbilityBasicQuery_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1, 6),
    _RcIgmpIgapServiceAbilityBasicQuery_Type()
)
rcIgmpIgapServiceAbilityBasicQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityBasicQuery.setStatus("current")
_RcIgmpIgapServiceAbilityBasicLeave_Type = Counter64
_RcIgmpIgapServiceAbilityBasicLeave_Object = MibTableColumn
rcIgmpIgapServiceAbilityBasicLeave = _RcIgmpIgapServiceAbilityBasicLeave_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1, 7),
    _RcIgmpIgapServiceAbilityBasicLeave_Type()
)
rcIgmpIgapServiceAbilityBasicLeave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityBasicLeave.setStatus("current")
_RcIgmpIgapServiceAbilityClearStat_Type = TruthValue
_RcIgmpIgapServiceAbilityClearStat_Object = MibTableColumn
rcIgmpIgapServiceAbilityClearStat = _RcIgmpIgapServiceAbilityClearStat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 9, 1, 8),
    _RcIgmpIgapServiceAbilityClearStat_Type()
)
rcIgmpIgapServiceAbilityClearStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpIgapServiceAbilityClearStat.setStatus("current")
_RcIgmpIgapGlobal_ObjectIdentity = ObjectIdentity
rcIgmpIgapGlobal = _RcIgmpIgapGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 10)
)
_RcIgmpIgapGlobalClearAllStat_Type = TruthValue
_RcIgmpIgapGlobalClearAllStat_Object = MibScalar
rcIgmpIgapGlobalClearAllStat = _RcIgmpIgapGlobalClearAllStat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 10, 1),
    _RcIgmpIgapGlobalClearAllStat_Type()
)
rcIgmpIgapGlobalClearAllStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpIgapGlobalClearAllStat.setStatus("current")
_RcIgmpGlobalParams_ObjectIdentity = ObjectIdentity
rcIgmpGlobalParams = _RcIgmpGlobalParams_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 11)
)


class _RcIgmpFastLeaveMode_Type(Integer32):
    """Custom type rcIgmpFastLeaveMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("multipleUser", 1),
          ("none", 0),
          ("oneUser", 2))
    )


_RcIgmpFastLeaveMode_Type.__name__ = "Integer32"
_RcIgmpFastLeaveMode_Object = MibScalar
rcIgmpFastLeaveMode = _RcIgmpFastLeaveMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 11, 1),
    _RcIgmpFastLeaveMode_Type()
)
rcIgmpFastLeaveMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpFastLeaveMode.setStatus("current")


class _RcIgmpGenerateTrap_Type(EnableValue):
    """Custom type rcIgmpGenerateTrap based on EnableValue"""


_RcIgmpGenerateTrap_Object = MibScalar
rcIgmpGenerateTrap = _RcIgmpGenerateTrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 11, 2),
    _RcIgmpGenerateTrap_Type()
)
rcIgmpGenerateTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpGenerateTrap.setStatus("current")


class _RcIgmpGenerateLog_Type(EnableValue):
    """Custom type rcIgmpGenerateLog based on EnableValue"""


_RcIgmpGenerateLog_Object = MibScalar
rcIgmpGenerateLog = _RcIgmpGenerateLog_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 11, 3),
    _RcIgmpGenerateLog_Type()
)
rcIgmpGenerateLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpGenerateLog.setStatus("current")


class _RcIgmpMvr_Type(EnableValue):
    """Custom type rcIgmpMvr based on EnableValue"""


_RcIgmpMvr_Object = MibScalar
rcIgmpMvr = _RcIgmpMvr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 11, 4),
    _RcIgmpMvr_Type()
)
rcIgmpMvr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIgmpMvr.setStatus("current")
_RcIgmpCacheExtnTable_Object = MibTable
rcIgmpCacheExtnTable = _RcIgmpCacheExtnTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 12)
)
if mibBuilder.loadTexts:
    rcIgmpCacheExtnTable.setStatus("current")
_RcIgmpCacheExtnEntry_Object = MibTableRow
rcIgmpCacheExtnEntry = _RcIgmpCacheExtnEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 12, 1)
)
rcIgmpCacheExtnEntry.setIndexNames(
    (0, "IGMP-STD-MIB", "igmpCacheAddress"),
    (0, "IGMP-STD-MIB", "igmpCacheIfIndex"),
)
if mibBuilder.loadTexts:
    rcIgmpCacheExtnEntry.setStatus("current")


class _RcIgmpCacheExtnType_Type(Integer32):
    """Custom type rcIgmpCacheExtnType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 1),
          ("static", 2))
    )


_RcIgmpCacheExtnType_Type.__name__ = "Integer32"
_RcIgmpCacheExtnType_Object = MibTableColumn
rcIgmpCacheExtnType = _RcIgmpCacheExtnType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 12, 1, 1),
    _RcIgmpCacheExtnType_Type()
)
rcIgmpCacheExtnType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpCacheExtnType.setStatus("current")
_RcIgmpCacheExtnStaticPorts_Type = PortSet
_RcIgmpCacheExtnStaticPorts_Object = MibTableColumn
rcIgmpCacheExtnStaticPorts = _RcIgmpCacheExtnStaticPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 12, 1, 2),
    _RcIgmpCacheExtnStaticPorts_Type()
)
rcIgmpCacheExtnStaticPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpCacheExtnStaticPorts.setStatus("current")
_RcIgmpSnoopTraceTable_Object = MibTable
rcIgmpSnoopTraceTable = _RcIgmpSnoopTraceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 13)
)
if mibBuilder.loadTexts:
    rcIgmpSnoopTraceTable.setStatus("current")
_RcIgmpSnoopTraceEntry_Object = MibTableRow
rcIgmpSnoopTraceEntry = _RcIgmpSnoopTraceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 13, 1)
)
rcIgmpSnoopTraceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpSnoopGrpAddr"),
    (0, "RAPID-CITY", "rcIgmpSnoopSrcAddr"),
    (0, "RAPID-CITY", "rcIgmpSnoopOutVlan"),
)
if mibBuilder.loadTexts:
    rcIgmpSnoopTraceEntry.setStatus("current")
_RcIgmpSnoopGrpAddr_Type = IpAddress
_RcIgmpSnoopGrpAddr_Object = MibTableColumn
rcIgmpSnoopGrpAddr = _RcIgmpSnoopGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 13, 1, 1),
    _RcIgmpSnoopGrpAddr_Type()
)
rcIgmpSnoopGrpAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpSnoopGrpAddr.setStatus("current")
_RcIgmpSnoopSrcAddr_Type = IpAddress
_RcIgmpSnoopSrcAddr_Object = MibTableColumn
rcIgmpSnoopSrcAddr = _RcIgmpSnoopSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 13, 1, 2),
    _RcIgmpSnoopSrcAddr_Type()
)
rcIgmpSnoopSrcAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpSnoopSrcAddr.setStatus("current")
_RcIgmpSnoopOutVlan_Type = InterfaceIndex
_RcIgmpSnoopOutVlan_Object = MibTableColumn
rcIgmpSnoopOutVlan = _RcIgmpSnoopOutVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 13, 1, 3),
    _RcIgmpSnoopOutVlan_Type()
)
rcIgmpSnoopOutVlan.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpSnoopOutVlan.setStatus("current")
_RcIgmpSnoopInPort_Type = InterfaceIndex
_RcIgmpSnoopInPort_Object = MibTableColumn
rcIgmpSnoopInPort = _RcIgmpSnoopInPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 13, 1, 4),
    _RcIgmpSnoopInPort_Type()
)
rcIgmpSnoopInPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSnoopInPort.setStatus("current")
_RcIgmpSnoopInVlan_Type = InterfaceIndex
_RcIgmpSnoopInVlan_Object = MibTableColumn
rcIgmpSnoopInVlan = _RcIgmpSnoopInVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 13, 1, 5),
    _RcIgmpSnoopInVlan_Type()
)
rcIgmpSnoopInVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSnoopInVlan.setStatus("current")
_RcIgmpSnoopOutPort_Type = PortSet
_RcIgmpSnoopOutPort_Object = MibTableColumn
rcIgmpSnoopOutPort = _RcIgmpSnoopOutPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 13, 1, 6),
    _RcIgmpSnoopOutPort_Type()
)
rcIgmpSnoopOutPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpSnoopOutPort.setStatus("current")
_RcIgmpNewGroupTable_Object = MibTable
rcIgmpNewGroupTable = _RcIgmpNewGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14)
)
if mibBuilder.loadTexts:
    rcIgmpNewGroupTable.setStatus("current")
_RcIgmpNewGroupEntry_Object = MibTableRow
rcIgmpNewGroupEntry = _RcIgmpNewGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1)
)
rcIgmpNewGroupEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpNewGroupIpAddress"),
    (0, "RAPID-CITY", "rcIgmpNewGroupMembers"),
    (0, "RAPID-CITY", "rcIgmpNewGroupInPort"),
)
if mibBuilder.loadTexts:
    rcIgmpNewGroupEntry.setStatus("current")
_RcIgmpNewGroupIpAddress_Type = IpAddress
_RcIgmpNewGroupIpAddress_Object = MibTableColumn
rcIgmpNewGroupIpAddress = _RcIgmpNewGroupIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1, 1),
    _RcIgmpNewGroupIpAddress_Type()
)
rcIgmpNewGroupIpAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpNewGroupIpAddress.setStatus("current")
_RcIgmpNewGroupMembers_Type = IpAddress
_RcIgmpNewGroupMembers_Object = MibTableColumn
rcIgmpNewGroupMembers = _RcIgmpNewGroupMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1, 2),
    _RcIgmpNewGroupMembers_Type()
)
rcIgmpNewGroupMembers.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpNewGroupMembers.setStatus("current")


class _RcIgmpNewGroupInPort_Type(Integer32):
    """Custom type rcIgmpNewGroupInPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIgmpNewGroupInPort_Type.__name__ = "Integer32"
_RcIgmpNewGroupInPort_Object = MibTableColumn
rcIgmpNewGroupInPort = _RcIgmpNewGroupInPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1, 3),
    _RcIgmpNewGroupInPort_Type()
)
rcIgmpNewGroupInPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpNewGroupInPort.setStatus("current")
_RcIgmpNewGroupExpiration_Type = Integer32
_RcIgmpNewGroupExpiration_Object = MibTableColumn
rcIgmpNewGroupExpiration = _RcIgmpNewGroupExpiration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1, 4),
    _RcIgmpNewGroupExpiration_Type()
)
rcIgmpNewGroupExpiration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewGroupExpiration.setStatus("current")
_RcIgmpNewGroupIfIndex_Type = InterfaceIndex
_RcIgmpNewGroupIfIndex_Object = MibTableColumn
rcIgmpNewGroupIfIndex = _RcIgmpNewGroupIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1, 5),
    _RcIgmpNewGroupIfIndex_Type()
)
rcIgmpNewGroupIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewGroupIfIndex.setStatus("current")


class _RcIgmpNewGroupUserId_Type(DisplayString):
    """Custom type rcIgmpNewGroupUserId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcIgmpNewGroupUserId_Type.__name__ = "DisplayString"
_RcIgmpNewGroupUserId_Object = MibTableColumn
rcIgmpNewGroupUserId = _RcIgmpNewGroupUserId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1, 6),
    _RcIgmpNewGroupUserId_Type()
)
rcIgmpNewGroupUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewGroupUserId.setStatus("current")


class _RcIgmpNewGroupMemberState_Type(Integer32):
    """Custom type rcIgmpNewGroupMemberState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("accStart", 3),
          ("auth", 2),
          ("authAndAcctDisabled", 5),
          ("authAndAcctStart", 4),
          ("noState", 1))
    )


_RcIgmpNewGroupMemberState_Type.__name__ = "Integer32"
_RcIgmpNewGroupMemberState_Object = MibTableColumn
rcIgmpNewGroupMemberState = _RcIgmpNewGroupMemberState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1, 7),
    _RcIgmpNewGroupMemberState_Type()
)
rcIgmpNewGroupMemberState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewGroupMemberState.setStatus("current")
_RcIgmpNewGroupSessionTime_Type = Integer32
_RcIgmpNewGroupSessionTime_Object = MibTableColumn
rcIgmpNewGroupSessionTime = _RcIgmpNewGroupSessionTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 14, 1, 8),
    _RcIgmpNewGroupSessionTime_Type()
)
rcIgmpNewGroupSessionTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpNewGroupSessionTime.setStatus("current")
_RcIgmpMvrGroupTable_Object = MibTable
rcIgmpMvrGroupTable = _RcIgmpMvrGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 17)
)
if mibBuilder.loadTexts:
    rcIgmpMvrGroupTable.setStatus("current")
_RcIgmpMvrGroupEntry_Object = MibTableRow
rcIgmpMvrGroupEntry = _RcIgmpMvrGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 17, 1)
)
rcIgmpMvrGroupEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpMvrGroupGroupAddress"),
    (0, "RAPID-CITY", "rcIgmpMvrGroupVlanId"),
)
if mibBuilder.loadTexts:
    rcIgmpMvrGroupEntry.setStatus("current")
_RcIgmpMvrGroupGroupAddress_Type = IpAddress
_RcIgmpMvrGroupGroupAddress_Object = MibTableColumn
rcIgmpMvrGroupGroupAddress = _RcIgmpMvrGroupGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 17, 1, 1),
    _RcIgmpMvrGroupGroupAddress_Type()
)
rcIgmpMvrGroupGroupAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpMvrGroupGroupAddress.setStatus("current")
_RcIgmpMvrGroupVlanId_Type = Integer32
_RcIgmpMvrGroupVlanId_Object = MibTableColumn
rcIgmpMvrGroupVlanId = _RcIgmpMvrGroupVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 17, 1, 2),
    _RcIgmpMvrGroupVlanId_Type()
)
rcIgmpMvrGroupVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpMvrGroupVlanId.setStatus("current")
_RcIgmpMvrGroupIgmpVersion_Type = Integer32
_RcIgmpMvrGroupIgmpVersion_Object = MibTableColumn
rcIgmpMvrGroupIgmpVersion = _RcIgmpMvrGroupIgmpVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 17, 1, 3),
    _RcIgmpMvrGroupIgmpVersion_Type()
)
rcIgmpMvrGroupIgmpVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpMvrGroupIgmpVersion.setStatus("current")
_RcIgmpMvrGroupLivingTime_Type = Integer32
_RcIgmpMvrGroupLivingTime_Object = MibTableColumn
rcIgmpMvrGroupLivingTime = _RcIgmpMvrGroupLivingTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 17, 1, 4),
    _RcIgmpMvrGroupLivingTime_Type()
)
rcIgmpMvrGroupLivingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpMvrGroupLivingTime.setStatus("current")
_RcIgmpMvrVlanTable_Object = MibTable
rcIgmpMvrVlanTable = _RcIgmpMvrVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 18)
)
if mibBuilder.loadTexts:
    rcIgmpMvrVlanTable.setStatus("current")
_RcIgmpMvrVlanEntry_Object = MibTableRow
rcIgmpMvrVlanEntry = _RcIgmpMvrVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 18, 1)
)
rcIgmpMvrVlanEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpMvrVlanMvrVlanId"),
)
if mibBuilder.loadTexts:
    rcIgmpMvrVlanEntry.setStatus("current")
_RcIgmpMvrVlanMvrVlanId_Type = Integer32
_RcIgmpMvrVlanMvrVlanId_Object = MibTableColumn
rcIgmpMvrVlanMvrVlanId = _RcIgmpMvrVlanMvrVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 18, 1, 1),
    _RcIgmpMvrVlanMvrVlanId_Type()
)
rcIgmpMvrVlanMvrVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpMvrVlanMvrVlanId.setStatus("current")


class _RcIgmpMvrVlanMvrVlanProxy_Type(TruthValue):
    """Custom type rcIgmpMvrVlanMvrVlanProxy based on TruthValue"""


_RcIgmpMvrVlanMvrVlanProxy_Object = MibTableColumn
rcIgmpMvrVlanMvrVlanProxy = _RcIgmpMvrVlanMvrVlanProxy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 18, 1, 2),
    _RcIgmpMvrVlanMvrVlanProxy_Type()
)
rcIgmpMvrVlanMvrVlanProxy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpMvrVlanMvrVlanProxy.setStatus("current")
_RcIgmpMvrVlanSourcePort_Type = Integer32
_RcIgmpMvrVlanSourcePort_Object = MibTableColumn
rcIgmpMvrVlanSourcePort = _RcIgmpMvrVlanSourcePort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 18, 1, 3),
    _RcIgmpMvrVlanSourcePort_Type()
)
rcIgmpMvrVlanSourcePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpMvrVlanSourcePort.setStatus("current")
_RcIgmpMvrVlanSourceAddress_Type = IpAddress
_RcIgmpMvrVlanSourceAddress_Object = MibTableColumn
rcIgmpMvrVlanSourceAddress = _RcIgmpMvrVlanSourceAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 18, 1, 4),
    _RcIgmpMvrVlanSourceAddress_Type()
)
rcIgmpMvrVlanSourceAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIgmpMvrVlanSourceAddress.setStatus("current")
_RcIgmpMvrReceiverTable_Object = MibTable
rcIgmpMvrReceiverTable = _RcIgmpMvrReceiverTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 19)
)
if mibBuilder.loadTexts:
    rcIgmpMvrReceiverTable.setStatus("current")
_RcIgmpMvrReceiverEntry_Object = MibTableRow
rcIgmpMvrReceiverEntry = _RcIgmpMvrReceiverEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 19, 1)
)
rcIgmpMvrReceiverEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIgmpMvrReceiverVlanId"),
)
if mibBuilder.loadTexts:
    rcIgmpMvrReceiverEntry.setStatus("current")
_RcIgmpMvrReceiverVlanId_Type = Integer32
_RcIgmpMvrReceiverVlanId_Object = MibTableColumn
rcIgmpMvrReceiverVlanId = _RcIgmpMvrReceiverVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 19, 1, 1),
    _RcIgmpMvrReceiverVlanId_Type()
)
rcIgmpMvrReceiverVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIgmpMvrReceiverVlanId.setStatus("current")
_RcIgmpMvrReceiverRowStatus_Type = RowStatus
_RcIgmpMvrReceiverRowStatus_Object = MibTableColumn
rcIgmpMvrReceiverRowStatus = _RcIgmpMvrReceiverRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 30, 19, 1, 2),
    _RcIgmpMvrReceiverRowStatus_Type()
)
rcIgmpMvrReceiverRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIgmpMvrReceiverRowStatus.setStatus("current")
_RcUserSetTime_ObjectIdentity = ObjectIdentity
rcUserSetTime = _RcUserSetTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 31)
)


class _RcUserSetTimeYear_Type(Integer32):
    """Custom type rcUserSetTimeYear based on Integer32"""
    defaultValue = 1998

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1998, 2097),
    )


_RcUserSetTimeYear_Type.__name__ = "Integer32"
_RcUserSetTimeYear_Object = MibScalar
rcUserSetTimeYear = _RcUserSetTimeYear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 31, 1),
    _RcUserSetTimeYear_Type()
)
rcUserSetTimeYear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcUserSetTimeYear.setStatus("current")


class _RcUserSetTimeMonth_Type(Integer32):
    """Custom type rcUserSetTimeMonth based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_RcUserSetTimeMonth_Type.__name__ = "Integer32"
_RcUserSetTimeMonth_Object = MibScalar
rcUserSetTimeMonth = _RcUserSetTimeMonth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 31, 2),
    _RcUserSetTimeMonth_Type()
)
rcUserSetTimeMonth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcUserSetTimeMonth.setStatus("current")


class _RcUserSetTimeDate_Type(Integer32):
    """Custom type rcUserSetTimeDate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_RcUserSetTimeDate_Type.__name__ = "Integer32"
_RcUserSetTimeDate_Object = MibScalar
rcUserSetTimeDate = _RcUserSetTimeDate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 31, 3),
    _RcUserSetTimeDate_Type()
)
rcUserSetTimeDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcUserSetTimeDate.setStatus("current")


class _RcUserSetTimeHour_Type(Integer32):
    """Custom type rcUserSetTimeHour based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 23),
    )


_RcUserSetTimeHour_Type.__name__ = "Integer32"
_RcUserSetTimeHour_Object = MibScalar
rcUserSetTimeHour = _RcUserSetTimeHour_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 31, 4),
    _RcUserSetTimeHour_Type()
)
rcUserSetTimeHour.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcUserSetTimeHour.setStatus("current")


class _RcUserSetTimeMinute_Type(Integer32):
    """Custom type rcUserSetTimeMinute based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 59),
    )


_RcUserSetTimeMinute_Type.__name__ = "Integer32"
_RcUserSetTimeMinute_Object = MibScalar
rcUserSetTimeMinute = _RcUserSetTimeMinute_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 31, 5),
    _RcUserSetTimeMinute_Type()
)
rcUserSetTimeMinute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcUserSetTimeMinute.setStatus("current")


class _RcUserSetTimeSecond_Type(Integer32):
    """Custom type rcUserSetTimeSecond based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 59),
    )


_RcUserSetTimeSecond_Type.__name__ = "Integer32"
_RcUserSetTimeSecond_Object = MibScalar
rcUserSetTimeSecond = _RcUserSetTimeSecond_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 31, 6),
    _RcUserSetTimeSecond_Type()
)
rcUserSetTimeSecond.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcUserSetTimeSecond.setStatus("current")
_RcL2Redundancy_ObjectIdentity = ObjectIdentity
rcL2Redundancy = _RcL2Redundancy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 32)
)


class _RcL2RedundancyHaCpuState_Type(Integer32):
    """Custom type rcL2RedundancyHaCpuState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 6),
          ("error", 5),
          ("initialization", 0),
          ("lostPeerConnection", 9),
          ("notSynchronized", 10),
          ("oneWayActive", 1),
          ("peerConnected", 8),
          ("peerNotConnected", 7),
          ("remoteIncompatible", 4),
          ("synchronized", 3),
          ("twoWayActive", 2))
    )


_RcL2RedundancyHaCpuState_Type.__name__ = "Integer32"
_RcL2RedundancyHaCpuState_Object = MibScalar
rcL2RedundancyHaCpuState = _RcL2RedundancyHaCpuState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 32, 1),
    _RcL2RedundancyHaCpuState_Type()
)
rcL2RedundancyHaCpuState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcL2RedundancyHaCpuState.setStatus("current")


class _RcL2RedundancyHaEvent_Type(Integer32):
    """Custom type rcL2RedundancyHaEvent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noEvent", 4),
          ("restart", 0),
          ("systemRegistrationDone", 1),
          ("tableSynchronizationDone", 2),
          ("versionIncompatible", 3))
    )


_RcL2RedundancyHaEvent_Type.__name__ = "Integer32"
_RcL2RedundancyHaEvent_Object = MibScalar
rcL2RedundancyHaEvent = _RcL2RedundancyHaEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 32, 2),
    _RcL2RedundancyHaEvent_Type()
)
rcL2RedundancyHaEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcL2RedundancyHaEvent.setStatus("current")
_RcL2RedundancyEnable_Type = EnableValue
_RcL2RedundancyEnable_Object = MibScalar
rcL2RedundancyEnable = _RcL2RedundancyEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 32, 3),
    _RcL2RedundancyEnable_Type()
)
rcL2RedundancyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcL2RedundancyEnable.setStatus("current")


class _RcL2RedundancyStandbyCpu_Type(Integer32):
    """Custom type rcL2RedundancyStandbyCpu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hotStandbyCPU", 1),
          ("standbyCPUNotPresent", 3),
          ("warmStandbyCPU", 2))
    )


_RcL2RedundancyStandbyCpu_Type.__name__ = "Integer32"
_RcL2RedundancyStandbyCpu_Object = MibScalar
rcL2RedundancyStandbyCpu = _RcL2RedundancyStandbyCpu_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 32, 4),
    _RcL2RedundancyStandbyCpu_Type()
)
rcL2RedundancyStandbyCpu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcL2RedundancyStandbyCpu.setStatus("current")
_RcNtp_ObjectIdentity = ObjectIdentity
rcNtp = _RcNtp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33)
)
_RcNtpGlobal_ObjectIdentity = ObjectIdentity
rcNtpGlobal = _RcNtpGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 1)
)


class _RcNtpGlobalEnable_Type(TruthValue):
    """Custom type rcNtpGlobalEnable based on TruthValue"""


_RcNtpGlobalEnable_Object = MibScalar
rcNtpGlobalEnable = _RcNtpGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 1, 1),
    _RcNtpGlobalEnable_Type()
)
rcNtpGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNtpGlobalEnable.setStatus("current")


class _RcNtpGlobalInterval_Type(Integer32):
    """Custom type rcNtpGlobalInterval based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 1440),
    )


_RcNtpGlobalInterval_Type.__name__ = "Integer32"
_RcNtpGlobalInterval_Object = MibScalar
rcNtpGlobalInterval = _RcNtpGlobalInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 1, 2),
    _RcNtpGlobalInterval_Type()
)
rcNtpGlobalInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNtpGlobalInterval.setStatus("current")
_RcNtpServerTable_Object = MibTable
rcNtpServerTable = _RcNtpServerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2)
)
if mibBuilder.loadTexts:
    rcNtpServerTable.setStatus("current")
_RcNtpServerEntry_Object = MibTableRow
rcNtpServerEntry = _RcNtpServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1)
)
rcNtpServerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcNtpServerAddress"),
)
if mibBuilder.loadTexts:
    rcNtpServerEntry.setStatus("current")
_RcNtpServerAddress_Type = IpAddress
_RcNtpServerAddress_Object = MibTableColumn
rcNtpServerAddress = _RcNtpServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 1),
    _RcNtpServerAddress_Type()
)
rcNtpServerAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerAddress.setStatus("current")


class _RcNtpServerEnable_Type(TruthValue):
    """Custom type rcNtpServerEnable based on TruthValue"""


_RcNtpServerEnable_Object = MibTableColumn
rcNtpServerEnable = _RcNtpServerEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 2),
    _RcNtpServerEnable_Type()
)
rcNtpServerEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNtpServerEnable.setStatus("current")


class _RcNtpServerAuthentication_Type(TruthValue):
    """Custom type rcNtpServerAuthentication based on TruthValue"""


_RcNtpServerAuthentication_Object = MibTableColumn
rcNtpServerAuthentication = _RcNtpServerAuthentication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 3),
    _RcNtpServerAuthentication_Type()
)
rcNtpServerAuthentication.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNtpServerAuthentication.setStatus("current")


class _RcNtpServerKeyId_Type(Integer32):
    """Custom type rcNtpServerKeyId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcNtpServerKeyId_Type.__name__ = "Integer32"
_RcNtpServerKeyId_Object = MibTableColumn
rcNtpServerKeyId = _RcNtpServerKeyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 4),
    _RcNtpServerKeyId_Type()
)
rcNtpServerKeyId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNtpServerKeyId.setStatus("current")
_RcNtpServerAccessAttempts_Type = Counter32
_RcNtpServerAccessAttempts_Object = MibTableColumn
rcNtpServerAccessAttempts = _RcNtpServerAccessAttempts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 5),
    _RcNtpServerAccessAttempts_Type()
)
rcNtpServerAccessAttempts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerAccessAttempts.setStatus("current")
_RcNtpServerAccessSuccess_Type = Counter32
_RcNtpServerAccessSuccess_Object = MibTableColumn
rcNtpServerAccessSuccess = _RcNtpServerAccessSuccess_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 6),
    _RcNtpServerAccessSuccess_Type()
)
rcNtpServerAccessSuccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerAccessSuccess.setStatus("current")
_RcNtpServerAccessFailure_Type = Counter32
_RcNtpServerAccessFailure_Object = MibTableColumn
rcNtpServerAccessFailure = _RcNtpServerAccessFailure_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 7),
    _RcNtpServerAccessFailure_Type()
)
rcNtpServerAccessFailure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerAccessFailure.setStatus("current")
_RcNtpServerRowStatus_Type = RowStatus
_RcNtpServerRowStatus_Object = MibTableColumn
rcNtpServerRowStatus = _RcNtpServerRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 8),
    _RcNtpServerRowStatus_Type()
)
rcNtpServerRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNtpServerRowStatus.setStatus("current")


class _RcNtpServerStratum_Type(DisplayString):
    """Custom type rcNtpServerStratum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcNtpServerStratum_Type.__name__ = "DisplayString"
_RcNtpServerStratum_Object = MibTableColumn
rcNtpServerStratum = _RcNtpServerStratum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 9),
    _RcNtpServerStratum_Type()
)
rcNtpServerStratum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerStratum.setStatus("current")


class _RcNtpServerVersion_Type(DisplayString):
    """Custom type rcNtpServerVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcNtpServerVersion_Type.__name__ = "DisplayString"
_RcNtpServerVersion_Object = MibTableColumn
rcNtpServerVersion = _RcNtpServerVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 10),
    _RcNtpServerVersion_Type()
)
rcNtpServerVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerVersion.setStatus("current")


class _RcNtpServerRootDelay_Type(DisplayString):
    """Custom type rcNtpServerRootDelay based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcNtpServerRootDelay_Type.__name__ = "DisplayString"
_RcNtpServerRootDelay_Object = MibTableColumn
rcNtpServerRootDelay = _RcNtpServerRootDelay_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 11),
    _RcNtpServerRootDelay_Type()
)
rcNtpServerRootDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerRootDelay.setStatus("current")


class _RcNtpServerPrecision_Type(DisplayString):
    """Custom type rcNtpServerPrecision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcNtpServerPrecision_Type.__name__ = "DisplayString"
_RcNtpServerPrecision_Object = MibTableColumn
rcNtpServerPrecision = _RcNtpServerPrecision_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 12),
    _RcNtpServerPrecision_Type()
)
rcNtpServerPrecision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerPrecision.setStatus("current")


class _RcNtpServerReachable_Type(DisplayString):
    """Custom type rcNtpServerReachable based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcNtpServerReachable_Type.__name__ = "DisplayString"
_RcNtpServerReachable_Object = MibTableColumn
rcNtpServerReachable = _RcNtpServerReachable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 13),
    _RcNtpServerReachable_Type()
)
rcNtpServerReachable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerReachable.setStatus("current")


class _RcNtpServerSynchronized_Type(DisplayString):
    """Custom type rcNtpServerSynchronized based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RcNtpServerSynchronized_Type.__name__ = "DisplayString"
_RcNtpServerSynchronized_Object = MibTableColumn
rcNtpServerSynchronized = _RcNtpServerSynchronized_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 2, 1, 14),
    _RcNtpServerSynchronized_Type()
)
rcNtpServerSynchronized.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpServerSynchronized.setStatus("current")
_RcNtpKeyTable_Object = MibTable
rcNtpKeyTable = _RcNtpKeyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 3)
)
if mibBuilder.loadTexts:
    rcNtpKeyTable.setStatus("current")
_RcNtpKeyEntry_Object = MibTableRow
rcNtpKeyEntry = _RcNtpKeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 3, 1)
)
rcNtpKeyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcNtpKeyId"),
)
if mibBuilder.loadTexts:
    rcNtpKeyEntry.setStatus("current")


class _RcNtpKeyId_Type(Integer32):
    """Custom type rcNtpKeyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcNtpKeyId_Type.__name__ = "Integer32"
_RcNtpKeyId_Object = MibTableColumn
rcNtpKeyId = _RcNtpKeyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 3, 1, 1),
    _RcNtpKeyId_Type()
)
rcNtpKeyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNtpKeyId.setStatus("current")


class _RcNtpKeySecret_Type(DisplayString):
    """Custom type rcNtpKeySecret based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RcNtpKeySecret_Type.__name__ = "DisplayString"
_RcNtpKeySecret_Object = MibTableColumn
rcNtpKeySecret = _RcNtpKeySecret_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 3, 1, 2),
    _RcNtpKeySecret_Type()
)
rcNtpKeySecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNtpKeySecret.setStatus("current")
_RcNtpKeyRowStatus_Type = RowStatus
_RcNtpKeyRowStatus_Object = MibTableColumn
rcNtpKeyRowStatus = _RcNtpKeyRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 33, 3, 1, 3),
    _RcNtpKeyRowStatus_Type()
)
rcNtpKeyRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNtpKeyRowStatus.setStatus("current")
_RcSsh_ObjectIdentity = ObjectIdentity
rcSsh = _RcSsh_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34)
)
_RcSshGlobal_ObjectIdentity = ObjectIdentity
rcSshGlobal = _RcSshGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1)
)


class _RcSshGlobalVersion_Type(Integer32):
    """Custom type rcSshGlobalVersion based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("both", 2),
          ("v2only", 1))
    )


_RcSshGlobalVersion_Type.__name__ = "Integer32"
_RcSshGlobalVersion_Object = MibScalar
rcSshGlobalVersion = _RcSshGlobalVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 1),
    _RcSshGlobalVersion_Type()
)
rcSshGlobalVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalVersion.setStatus("current")


class _RcSshGlobalPort_Type(Integer32):
    """Custom type rcSshGlobalPort based on Integer32"""
    defaultValue = 22


_RcSshGlobalPort_Object = MibScalar
rcSshGlobalPort = _RcSshGlobalPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 2),
    _RcSshGlobalPort_Type()
)
rcSshGlobalPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalPort.setStatus("current")


class _RcSshGlobalMaxSession_Type(Integer32):
    """Custom type rcSshGlobalMaxSession based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RcSshGlobalMaxSession_Type.__name__ = "Integer32"
_RcSshGlobalMaxSession_Object = MibScalar
rcSshGlobalMaxSession = _RcSshGlobalMaxSession_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 3),
    _RcSshGlobalMaxSession_Type()
)
rcSshGlobalMaxSession.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalMaxSession.setStatus("current")


class _RcSshGlobalTimeout_Type(Integer32):
    """Custom type rcSshGlobalTimeout based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_RcSshGlobalTimeout_Type.__name__ = "Integer32"
_RcSshGlobalTimeout_Object = MibScalar
rcSshGlobalTimeout = _RcSshGlobalTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 4),
    _RcSshGlobalTimeout_Type()
)
rcSshGlobalTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalTimeout.setStatus("current")


class _RcSshGlobalRsaKeySize_Type(Integer32):
    """Custom type rcSshGlobalRsaKeySize based on Integer32"""
    defaultValue = 1024

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(512, 1024),
    )


_RcSshGlobalRsaKeySize_Type.__name__ = "Integer32"
_RcSshGlobalRsaKeySize_Object = MibScalar
rcSshGlobalRsaKeySize = _RcSshGlobalRsaKeySize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 5),
    _RcSshGlobalRsaKeySize_Type()
)
rcSshGlobalRsaKeySize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalRsaKeySize.setStatus("current")


class _RcSshGlobalDsaKeySize_Type(Integer32):
    """Custom type rcSshGlobalDsaKeySize based on Integer32"""
    defaultValue = 1024

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(512, 1024),
    )


_RcSshGlobalDsaKeySize_Type.__name__ = "Integer32"
_RcSshGlobalDsaKeySize_Object = MibScalar
rcSshGlobalDsaKeySize = _RcSshGlobalDsaKeySize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 6),
    _RcSshGlobalDsaKeySize_Type()
)
rcSshGlobalDsaKeySize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalDsaKeySize.setStatus("current")


class _RcSshGlobalRsaAuth_Type(TruthValue):
    """Custom type rcSshGlobalRsaAuth based on TruthValue"""


_RcSshGlobalRsaAuth_Object = MibScalar
rcSshGlobalRsaAuth = _RcSshGlobalRsaAuth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 7),
    _RcSshGlobalRsaAuth_Type()
)
rcSshGlobalRsaAuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalRsaAuth.setStatus("current")


class _RcSshGlobalDsaAuth_Type(TruthValue):
    """Custom type rcSshGlobalDsaAuth based on TruthValue"""


_RcSshGlobalDsaAuth_Object = MibScalar
rcSshGlobalDsaAuth = _RcSshGlobalDsaAuth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 8),
    _RcSshGlobalDsaAuth_Type()
)
rcSshGlobalDsaAuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalDsaAuth.setStatus("current")


class _RcSshGlobalPassAuth_Type(TruthValue):
    """Custom type rcSshGlobalPassAuth based on TruthValue"""


_RcSshGlobalPassAuth_Object = MibScalar
rcSshGlobalPassAuth = _RcSshGlobalPassAuth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 9),
    _RcSshGlobalPassAuth_Type()
)
rcSshGlobalPassAuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalPassAuth.setStatus("current")


class _RcSshGlobalKeyAction_Type(Integer32):
    """Custom type rcSshGlobalKeyAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("deleteDsa", 3),
          ("deleteRsa", 4),
          ("generateDsa", 1),
          ("generateRsa", 2),
          ("none", 0))
    )


_RcSshGlobalKeyAction_Type.__name__ = "Integer32"
_RcSshGlobalKeyAction_Object = MibScalar
rcSshGlobalKeyAction = _RcSshGlobalKeyAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 10),
    _RcSshGlobalKeyAction_Type()
)
rcSshGlobalKeyAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalKeyAction.setStatus("current")


class _RcSshGlobalEnable_Type(Integer32):
    """Custom type rcSshGlobalEnable based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("secure", 2),
          ("true", 1))
    )


_RcSshGlobalEnable_Type.__name__ = "Integer32"
_RcSshGlobalEnable_Object = MibScalar
rcSshGlobalEnable = _RcSshGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 11),
    _RcSshGlobalEnable_Type()
)
rcSshGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalEnable.setStatus("current")
_RcSshGlobalHostIpAddr_Type = IpAddress
_RcSshGlobalHostIpAddr_Object = MibScalar
rcSshGlobalHostIpAddr = _RcSshGlobalHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 1, 12),
    _RcSshGlobalHostIpAddr_Type()
)
rcSshGlobalHostIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSshGlobalHostIpAddr.setStatus("current")
_RcSslMipTable_Object = MibTable
rcSslMipTable = _RcSslMipTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 2)
)
if mibBuilder.loadTexts:
    rcSslMipTable.setStatus("current")
_RcSslMipTableEntry_Object = MibTableRow
rcSslMipTableEntry = _RcSslMipTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 2, 1)
)
rcSslMipTableEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSslMipSlot"),
)
if mibBuilder.loadTexts:
    rcSslMipTableEntry.setStatus("current")


class _RcSslMipSlot_Type(Integer32):
    """Custom type rcSslMipSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcSslMipSlot_Type.__name__ = "Integer32"
_RcSslMipSlot_Object = MibTableColumn
rcSslMipSlot = _RcSslMipSlot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 2, 1, 1),
    _RcSslMipSlot_Type()
)
rcSslMipSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSslMipSlot.setStatus("current")
_RcSslMipMip_Type = DisplayString
_RcSslMipMip_Object = MibTableColumn
rcSslMipMip = _RcSslMipMip_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 34, 2, 1, 2),
    _RcSslMipMip_Type()
)
rcSslMipMip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSslMipMip.setStatus("current")
_RcSvlan_ObjectIdentity = ObjectIdentity
rcSvlan = _RcSvlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 35)
)
_RcSvlanGlobal_ObjectIdentity = ObjectIdentity
rcSvlanGlobal = _RcSvlanGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 35, 1)
)


class _RcSvlanActiveLevel_Type(Integer32):
    """Custom type rcSvlanActiveLevel based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcSvlanActiveLevel_Type.__name__ = "Integer32"
_RcSvlanActiveLevel_Object = MibScalar
rcSvlanActiveLevel = _RcSvlanActiveLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 35, 1, 1),
    _RcSvlanActiveLevel_Type()
)
rcSvlanActiveLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSvlanActiveLevel.setStatus("current")
_RcSvlanTable_Object = MibTable
rcSvlanTable = _RcSvlanTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 35, 2)
)
if mibBuilder.loadTexts:
    rcSvlanTable.setStatus("current")
_RcSvlanEntry_Object = MibTableRow
rcSvlanEntry = _RcSvlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 35, 2, 1)
)
rcSvlanEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSvlanId"),
)
if mibBuilder.loadTexts:
    rcSvlanEntry.setStatus("current")


class _RcSvlanId_Type(Integer32):
    """Custom type rcSvlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RcSvlanId_Type.__name__ = "Integer32"
_RcSvlanId_Object = MibTableColumn
rcSvlanId = _RcSvlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 35, 2, 1, 1),
    _RcSvlanId_Type()
)
rcSvlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSvlanId.setStatus("current")
_RcSvlanLevel_Type = Integer32
_RcSvlanLevel_Object = MibTableColumn
rcSvlanLevel = _RcSvlanLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 35, 2, 1, 2),
    _RcSvlanLevel_Type()
)
rcSvlanLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSvlanLevel.setStatus("current")
_RcSvlanEtherType_Type = Integer32
_RcSvlanEtherType_Object = MibTableColumn
rcSvlanEtherType = _RcSvlanEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 35, 2, 1, 3),
    _RcSvlanEtherType_Type()
)
rcSvlanEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSvlanEtherType.setStatus("current")
_RcTengEnet_ObjectIdentity = ObjectIdentity
rcTengEnet = _RcTengEnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50)
)
_RcTengEnetStats_ObjectIdentity = ObjectIdentity
rcTengEnetStats = _RcTengEnetStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1)
)
_RcTengDot3StatsTable_Object = MibTable
rcTengDot3StatsTable = _RcTengDot3StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1)
)
if mibBuilder.loadTexts:
    rcTengDot3StatsTable.setStatus("current")
_RcTengDot3StatsEntry_Object = MibTableRow
rcTengDot3StatsEntry = _RcTengDot3StatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1)
)
rcTengDot3StatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcTengDot3StatsIndex"),
)
if mibBuilder.loadTexts:
    rcTengDot3StatsEntry.setStatus("current")


class _RcTengDot3StatsIndex_Type(Integer32):
    """Custom type rcTengDot3StatsIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcTengDot3StatsIndex_Type.__name__ = "Integer32"
_RcTengDot3StatsIndex_Object = MibTableColumn
rcTengDot3StatsIndex = _RcTengDot3StatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 1),
    _RcTengDot3StatsIndex_Type()
)
rcTengDot3StatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsIndex.setStatus("current")
_RcTengDot3StatsAlignmentErrors_Type = Counter64
_RcTengDot3StatsAlignmentErrors_Object = MibTableColumn
rcTengDot3StatsAlignmentErrors = _RcTengDot3StatsAlignmentErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 2),
    _RcTengDot3StatsAlignmentErrors_Type()
)
rcTengDot3StatsAlignmentErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsAlignmentErrors.setStatus("current")
_RcTengDot3StatsFCSErrors_Type = Counter64
_RcTengDot3StatsFCSErrors_Object = MibTableColumn
rcTengDot3StatsFCSErrors = _RcTengDot3StatsFCSErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 3),
    _RcTengDot3StatsFCSErrors_Type()
)
rcTengDot3StatsFCSErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsFCSErrors.setStatus("current")
_RcTengDot3StatsSingleCollisionFrames_Type = Counter64
_RcTengDot3StatsSingleCollisionFrames_Object = MibTableColumn
rcTengDot3StatsSingleCollisionFrames = _RcTengDot3StatsSingleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 4),
    _RcTengDot3StatsSingleCollisionFrames_Type()
)
rcTengDot3StatsSingleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsSingleCollisionFrames.setStatus("current")
_RcTengDot3StatsMultipleCollisionFrames_Type = Counter64
_RcTengDot3StatsMultipleCollisionFrames_Object = MibTableColumn
rcTengDot3StatsMultipleCollisionFrames = _RcTengDot3StatsMultipleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 5),
    _RcTengDot3StatsMultipleCollisionFrames_Type()
)
rcTengDot3StatsMultipleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsMultipleCollisionFrames.setStatus("current")
_RcTengDot3StatsSQETestErrors_Type = Counter64
_RcTengDot3StatsSQETestErrors_Object = MibTableColumn
rcTengDot3StatsSQETestErrors = _RcTengDot3StatsSQETestErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 6),
    _RcTengDot3StatsSQETestErrors_Type()
)
rcTengDot3StatsSQETestErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsSQETestErrors.setStatus("current")
_RcTengDot3StatsDeferredTransmissions_Type = Counter64
_RcTengDot3StatsDeferredTransmissions_Object = MibTableColumn
rcTengDot3StatsDeferredTransmissions = _RcTengDot3StatsDeferredTransmissions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 7),
    _RcTengDot3StatsDeferredTransmissions_Type()
)
rcTengDot3StatsDeferredTransmissions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsDeferredTransmissions.setStatus("current")
_RcTengDot3StatsLateCollisions_Type = Counter64
_RcTengDot3StatsLateCollisions_Object = MibTableColumn
rcTengDot3StatsLateCollisions = _RcTengDot3StatsLateCollisions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 8),
    _RcTengDot3StatsLateCollisions_Type()
)
rcTengDot3StatsLateCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsLateCollisions.setStatus("current")
_RcTengDot3StatsExcessiveCollisions_Type = Counter64
_RcTengDot3StatsExcessiveCollisions_Object = MibTableColumn
rcTengDot3StatsExcessiveCollisions = _RcTengDot3StatsExcessiveCollisions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 9),
    _RcTengDot3StatsExcessiveCollisions_Type()
)
rcTengDot3StatsExcessiveCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsExcessiveCollisions.setStatus("current")
_RcTengDot3StatsInternalMacTransmitErrors_Type = Counter64
_RcTengDot3StatsInternalMacTransmitErrors_Object = MibTableColumn
rcTengDot3StatsInternalMacTransmitErrors = _RcTengDot3StatsInternalMacTransmitErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 10),
    _RcTengDot3StatsInternalMacTransmitErrors_Type()
)
rcTengDot3StatsInternalMacTransmitErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsInternalMacTransmitErrors.setStatus("current")
_RcTengDot3StatsCarrierSenseErrors_Type = Counter64
_RcTengDot3StatsCarrierSenseErrors_Object = MibTableColumn
rcTengDot3StatsCarrierSenseErrors = _RcTengDot3StatsCarrierSenseErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 11),
    _RcTengDot3StatsCarrierSenseErrors_Type()
)
rcTengDot3StatsCarrierSenseErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsCarrierSenseErrors.setStatus("current")
_RcTengDot3StatsFrameTooLongs_Type = Counter64
_RcTengDot3StatsFrameTooLongs_Object = MibTableColumn
rcTengDot3StatsFrameTooLongs = _RcTengDot3StatsFrameTooLongs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 13),
    _RcTengDot3StatsFrameTooLongs_Type()
)
rcTengDot3StatsFrameTooLongs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsFrameTooLongs.setStatus("current")
_RcTengDot3StatsInternalMacReceiveErrors_Type = Counter64
_RcTengDot3StatsInternalMacReceiveErrors_Object = MibTableColumn
rcTengDot3StatsInternalMacReceiveErrors = _RcTengDot3StatsInternalMacReceiveErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 16),
    _RcTengDot3StatsInternalMacReceiveErrors_Type()
)
rcTengDot3StatsInternalMacReceiveErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsInternalMacReceiveErrors.setStatus("current")
_RcTengDot3StatsEtherChipSet_Type = ObjectIdentifier
_RcTengDot3StatsEtherChipSet_Object = MibTableColumn
rcTengDot3StatsEtherChipSet = _RcTengDot3StatsEtherChipSet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 17),
    _RcTengDot3StatsEtherChipSet_Type()
)
rcTengDot3StatsEtherChipSet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsEtherChipSet.setStatus("current")
_RcTengDot3StatsLinkFailures_Type = Counter32
_RcTengDot3StatsLinkFailures_Object = MibTableColumn
rcTengDot3StatsLinkFailures = _RcTengDot3StatsLinkFailures_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 18),
    _RcTengDot3StatsLinkFailures_Type()
)
rcTengDot3StatsLinkFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsLinkFailures.setStatus("current")
_RcTengDot3StatsPacketErrors_Type = Counter32
_RcTengDot3StatsPacketErrors_Object = MibTableColumn
rcTengDot3StatsPacketErrors = _RcTengDot3StatsPacketErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 19),
    _RcTengDot3StatsPacketErrors_Type()
)
rcTengDot3StatsPacketErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsPacketErrors.setStatus("current")
_RcTengDot3StatsCarrierErrors_Type = Counter32
_RcTengDot3StatsCarrierErrors_Object = MibTableColumn
rcTengDot3StatsCarrierErrors = _RcTengDot3StatsCarrierErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 20),
    _RcTengDot3StatsCarrierErrors_Type()
)
rcTengDot3StatsCarrierErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsCarrierErrors.setStatus("current")
_RcTengDot3StatsLinkInactiveErrors_Type = Counter32
_RcTengDot3StatsLinkInactiveErrors_Object = MibTableColumn
rcTengDot3StatsLinkInactiveErrors = _RcTengDot3StatsLinkInactiveErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 21),
    _RcTengDot3StatsLinkInactiveErrors_Type()
)
rcTengDot3StatsLinkInactiveErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsLinkInactiveErrors.setStatus("current")
_RcTengDot3StatsInFlowCtrlPkts_Type = Counter64
_RcTengDot3StatsInFlowCtrlPkts_Object = MibTableColumn
rcTengDot3StatsInFlowCtrlPkts = _RcTengDot3StatsInFlowCtrlPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 22),
    _RcTengDot3StatsInFlowCtrlPkts_Type()
)
rcTengDot3StatsInFlowCtrlPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsInFlowCtrlPkts.setStatus("current")
_RcTengDot3StatsOutFlowCtrlPkts_Type = Counter64
_RcTengDot3StatsOutFlowCtrlPkts_Object = MibTableColumn
rcTengDot3StatsOutFlowCtrlPkts = _RcTengDot3StatsOutFlowCtrlPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 23),
    _RcTengDot3StatsOutFlowCtrlPkts_Type()
)
rcTengDot3StatsOutFlowCtrlPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsOutFlowCtrlPkts.setStatus("current")
_RcTengDot3StatsFrameTooShorts_Type = Counter64
_RcTengDot3StatsFrameTooShorts_Object = MibTableColumn
rcTengDot3StatsFrameTooShorts = _RcTengDot3StatsFrameTooShorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 1, 1, 24),
    _RcTengDot3StatsFrameTooShorts_Type()
)
rcTengDot3StatsFrameTooShorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengDot3StatsFrameTooShorts.setStatus("current")
_RcTengStatTable_Object = MibTable
rcTengStatTable = _RcTengStatTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2)
)
if mibBuilder.loadTexts:
    rcTengStatTable.setStatus("current")
_RcTengStatEntry_Object = MibTableRow
rcTengStatEntry = _RcTengStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1)
)
rcTengStatEntry.setIndexNames(
    (0, "RAPID-CITY", "rcTengStatIndex"),
)
if mibBuilder.loadTexts:
    rcTengStatEntry.setStatus("current")


class _RcTengStatIndex_Type(Integer32):
    """Custom type rcTengStatIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcTengStatIndex_Type.__name__ = "Integer32"
_RcTengStatIndex_Object = MibTableColumn
rcTengStatIndex = _RcTengStatIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 1),
    _RcTengStatIndex_Type()
)
rcTengStatIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatIndex.setStatus("current")
_RcTengStatBridgeInUnicastFrames_Type = Counter32
_RcTengStatBridgeInUnicastFrames_Object = MibTableColumn
rcTengStatBridgeInUnicastFrames = _RcTengStatBridgeInUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 2),
    _RcTengStatBridgeInUnicastFrames_Type()
)
rcTengStatBridgeInUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatBridgeInUnicastFrames.setStatus("current")
_RcTengStatBridgeInMulticastFrames_Type = Counter32
_RcTengStatBridgeInMulticastFrames_Object = MibTableColumn
rcTengStatBridgeInMulticastFrames = _RcTengStatBridgeInMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 3),
    _RcTengStatBridgeInMulticastFrames_Type()
)
rcTengStatBridgeInMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatBridgeInMulticastFrames.setStatus("current")
_RcTengStatBridgeInBroadcastFrames_Type = Counter32
_RcTengStatBridgeInBroadcastFrames_Object = MibTableColumn
rcTengStatBridgeInBroadcastFrames = _RcTengStatBridgeInBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 4),
    _RcTengStatBridgeInBroadcastFrames_Type()
)
rcTengStatBridgeInBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatBridgeInBroadcastFrames.setStatus("current")
_RcTengStatBridgeInDiscards_Type = Counter32
_RcTengStatBridgeInDiscards_Object = MibTableColumn
rcTengStatBridgeInDiscards = _RcTengStatBridgeInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 5),
    _RcTengStatBridgeInDiscards_Type()
)
rcTengStatBridgeInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatBridgeInDiscards.setStatus("current")
_RcTengStatBridgeOutUnicastFrames_Type = Counter32
_RcTengStatBridgeOutUnicastFrames_Object = MibTableColumn
rcTengStatBridgeOutUnicastFrames = _RcTengStatBridgeOutUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 6),
    _RcTengStatBridgeOutUnicastFrames_Type()
)
rcTengStatBridgeOutUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatBridgeOutUnicastFrames.setStatus("current")
_RcTengStatBridgeOutMulticastFrames_Type = Counter32
_RcTengStatBridgeOutMulticastFrames_Object = MibTableColumn
rcTengStatBridgeOutMulticastFrames = _RcTengStatBridgeOutMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 7),
    _RcTengStatBridgeOutMulticastFrames_Type()
)
rcTengStatBridgeOutMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatBridgeOutMulticastFrames.setStatus("current")
_RcTengStatBridgeOutBroadcastFrames_Type = Counter32
_RcTengStatBridgeOutBroadcastFrames_Object = MibTableColumn
rcTengStatBridgeOutBroadcastFrames = _RcTengStatBridgeOutBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 8),
    _RcTengStatBridgeOutBroadcastFrames_Type()
)
rcTengStatBridgeOutBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatBridgeOutBroadcastFrames.setStatus("current")
_RcTengStatRouteInUnicastFrames_Type = Counter32
_RcTengStatRouteInUnicastFrames_Object = MibTableColumn
rcTengStatRouteInUnicastFrames = _RcTengStatRouteInUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 9),
    _RcTengStatRouteInUnicastFrames_Type()
)
rcTengStatRouteInUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatRouteInUnicastFrames.setStatus("current")
_RcTengStatRouteInMulticastFrames_Type = Counter32
_RcTengStatRouteInMulticastFrames_Object = MibTableColumn
rcTengStatRouteInMulticastFrames = _RcTengStatRouteInMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 10),
    _RcTengStatRouteInMulticastFrames_Type()
)
rcTengStatRouteInMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatRouteInMulticastFrames.setStatus("current")
_RcTengStatRouteInDiscards_Type = Counter32
_RcTengStatRouteInDiscards_Object = MibTableColumn
rcTengStatRouteInDiscards = _RcTengStatRouteInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 11),
    _RcTengStatRouteInDiscards_Type()
)
rcTengStatRouteInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatRouteInDiscards.setStatus("current")
_RcTengStatRouteOutUnicastFrames_Type = Counter32
_RcTengStatRouteOutUnicastFrames_Object = MibTableColumn
rcTengStatRouteOutUnicastFrames = _RcTengStatRouteOutUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 12),
    _RcTengStatRouteOutUnicastFrames_Type()
)
rcTengStatRouteOutUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatRouteOutUnicastFrames.setStatus("current")
_RcTengStatRouteOutMulticastFrames_Type = Counter32
_RcTengStatRouteOutMulticastFrames_Object = MibTableColumn
rcTengStatRouteOutMulticastFrames = _RcTengStatRouteOutMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 13),
    _RcTengStatRouteOutMulticastFrames_Type()
)
rcTengStatRouteOutMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatRouteOutMulticastFrames.setStatus("current")
_RcTengStatStgForwardTransitions_Type = Counter32
_RcTengStatStgForwardTransitions_Object = MibTableColumn
rcTengStatStgForwardTransitions = _RcTengStatStgForwardTransitions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 14),
    _RcTengStatStgForwardTransitions_Type()
)
rcTengStatStgForwardTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatStgForwardTransitions.setStatus("current")
_RcTengStatStgInConfigBpdus_Type = Counter32
_RcTengStatStgInConfigBpdus_Object = MibTableColumn
rcTengStatStgInConfigBpdus = _RcTengStatStgInConfigBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 15),
    _RcTengStatStgInConfigBpdus_Type()
)
rcTengStatStgInConfigBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatStgInConfigBpdus.setStatus("current")
_RcTengStatStgInTcnBpdus_Type = Counter32
_RcTengStatStgInTcnBpdus_Object = MibTableColumn
rcTengStatStgInTcnBpdus = _RcTengStatStgInTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 16),
    _RcTengStatStgInTcnBpdus_Type()
)
rcTengStatStgInTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatStgInTcnBpdus.setStatus("current")
_RcTengStatStgInBadBpdus_Type = Counter32
_RcTengStatStgInBadBpdus_Object = MibTableColumn
rcTengStatStgInBadBpdus = _RcTengStatStgInBadBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 17),
    _RcTengStatStgInBadBpdus_Type()
)
rcTengStatStgInBadBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatStgInBadBpdus.setStatus("current")
_RcTengStatStgOutConfigBpdus_Type = Counter32
_RcTengStatStgOutConfigBpdus_Object = MibTableColumn
rcTengStatStgOutConfigBpdus = _RcTengStatStgOutConfigBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 18),
    _RcTengStatStgOutConfigBpdus_Type()
)
rcTengStatStgOutConfigBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatStgOutConfigBpdus.setStatus("current")
_RcTengStatStgOutTcnBpdus_Type = Counter32
_RcTengStatStgOutTcnBpdus_Object = MibTableColumn
rcTengStatStgOutTcnBpdus = _RcTengStatStgOutTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 19),
    _RcTengStatStgOutTcnBpdus_Type()
)
rcTengStatStgOutTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatStgOutTcnBpdus.setStatus("current")
_RcTengStatBridgeOutFrames_Type = Counter32
_RcTengStatBridgeOutFrames_Object = MibTableColumn
rcTengStatBridgeOutFrames = _RcTengStatBridgeOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 2, 1, 20),
    _RcTengStatBridgeOutFrames_Type()
)
rcTengStatBridgeOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengStatBridgeOutFrames.setStatus("current")
_RcTengIfTable_Object = MibTable
rcTengIfTable = _RcTengIfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3)
)
if mibBuilder.loadTexts:
    rcTengIfTable.setStatus("current")
_RcTengIfEntry_Object = MibTableRow
rcTengIfEntry = _RcTengIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1)
)
rcTengIfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcTengIfIndex"),
)
if mibBuilder.loadTexts:
    rcTengIfEntry.setStatus("current")
_RcTengIfIndex_Type = InterfaceIndex
_RcTengIfIndex_Object = MibTableColumn
rcTengIfIndex = _RcTengIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 1),
    _RcTengIfIndex_Type()
)
rcTengIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfIndex.setStatus("current")


class _RcTengIfDescr_Type(DisplayString):
    """Custom type rcTengIfDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcTengIfDescr_Type.__name__ = "DisplayString"
_RcTengIfDescr_Object = MibTableColumn
rcTengIfDescr = _RcTengIfDescr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 2),
    _RcTengIfDescr_Type()
)
rcTengIfDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfDescr.setStatus("current")


class _RcTengIfType_Type(Integer32):
    """Custom type rcTengIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54)
        )
    )
    namedValues = NamedValues(
        *(("aal5", 49),
          ("arcnet", 35),
          ("arcnetPlus", 36),
          ("atm", 37),
          ("basicISDN", 20),
          ("ddnX25", 4),
          ("ds1", 18),
          ("ds3", 30),
          ("e1", 19),
          ("eon", 25),
          ("ethernet3Mbit", 26),
          ("ethernetCsmacd", 6),
          ("fddi", 15),
          ("frameRelay", 32),
          ("frameRelayService", 44),
          ("hdh1822", 3),
          ("hippi", 47),
          ("hssi", 46),
          ("hyperchannel", 14),
          ("iso88022llc", 41),
          ("iso88023Csmacd", 7),
          ("iso88024TokenBus", 8),
          ("iso88025TokenRing", 9),
          ("iso88026Man", 10),
          ("lapb", 16),
          ("localTalk", 42),
          ("miox25", 38),
          ("modem", 48),
          ("nsip", 27),
          ("other", 1),
          ("para", 34),
          ("ppp", 23),
          ("primaryISDN", 21),
          ("propMultiplexor", 54),
          ("propPointToPointSerial", 22),
          ("propVirtual", 53),
          ("proteon10Mbit", 12),
          ("proteon80Mbit", 13),
          ("regular1822", 2),
          ("rfc877x25", 5),
          ("rs232", 33),
          ("sdlc", 17),
          ("sip", 31),
          ("slip", 28),
          ("smdsDxi", 43),
          ("smdsIcip", 52),
          ("softwareLoopback", 24),
          ("sonet", 39),
          ("sonetPath", 50),
          ("sonetVT", 51),
          ("starLan", 11),
          ("ultra", 29),
          ("v35", 45),
          ("x25ple", 40))
    )


_RcTengIfType_Type.__name__ = "Integer32"
_RcTengIfType_Object = MibTableColumn
rcTengIfType = _RcTengIfType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 3),
    _RcTengIfType_Type()
)
rcTengIfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfType.setStatus("current")
_RcTengIfMtu_Type = Integer32
_RcTengIfMtu_Object = MibTableColumn
rcTengIfMtu = _RcTengIfMtu_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 4),
    _RcTengIfMtu_Type()
)
rcTengIfMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfMtu.setStatus("current")
_RcTengIfSpeed_Type = Gauge32
_RcTengIfSpeed_Object = MibTableColumn
rcTengIfSpeed = _RcTengIfSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 5),
    _RcTengIfSpeed_Type()
)
rcTengIfSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfSpeed.setStatus("current")
_RcTengIfPhysAddress_Type = PhysAddress
_RcTengIfPhysAddress_Object = MibTableColumn
rcTengIfPhysAddress = _RcTengIfPhysAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 6),
    _RcTengIfPhysAddress_Type()
)
rcTengIfPhysAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfPhysAddress.setStatus("current")


class _RcTengIfAdminStatus_Type(Integer32):
    """Custom type rcTengIfAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_RcTengIfAdminStatus_Type.__name__ = "Integer32"
_RcTengIfAdminStatus_Object = MibTableColumn
rcTengIfAdminStatus = _RcTengIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 7),
    _RcTengIfAdminStatus_Type()
)
rcTengIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTengIfAdminStatus.setStatus("current")


class _RcTengIfOperStatus_Type(Integer32):
    """Custom type rcTengIfOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dormant", 5),
          ("down", 2),
          ("testing", 3),
          ("unknown", 4),
          ("up", 1))
    )


_RcTengIfOperStatus_Type.__name__ = "Integer32"
_RcTengIfOperStatus_Object = MibTableColumn
rcTengIfOperStatus = _RcTengIfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 8),
    _RcTengIfOperStatus_Type()
)
rcTengIfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOperStatus.setStatus("current")
_RcTengIfLastChange_Type = TimeTicks
_RcTengIfLastChange_Object = MibTableColumn
rcTengIfLastChange = _RcTengIfLastChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 9),
    _RcTengIfLastChange_Type()
)
rcTengIfLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfLastChange.setStatus("current")
_RcTengIfInOctets_Type = Counter64
_RcTengIfInOctets_Object = MibTableColumn
rcTengIfInOctets = _RcTengIfInOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 10),
    _RcTengIfInOctets_Type()
)
rcTengIfInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfInOctets.setStatus("current")
_RcTengIfInUcastPkts_Type = Counter64
_RcTengIfInUcastPkts_Object = MibTableColumn
rcTengIfInUcastPkts = _RcTengIfInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 11),
    _RcTengIfInUcastPkts_Type()
)
rcTengIfInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfInUcastPkts.setStatus("current")
_RcTengIfInNUcastPkts_Type = Counter64
_RcTengIfInNUcastPkts_Object = MibTableColumn
rcTengIfInNUcastPkts = _RcTengIfInNUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 12),
    _RcTengIfInNUcastPkts_Type()
)
rcTengIfInNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfInNUcastPkts.setStatus("deprecated")
_RcTengIfInDiscards_Type = Counter64
_RcTengIfInDiscards_Object = MibTableColumn
rcTengIfInDiscards = _RcTengIfInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 13),
    _RcTengIfInDiscards_Type()
)
rcTengIfInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfInDiscards.setStatus("current")
_RcTengIfInErrors_Type = Counter64
_RcTengIfInErrors_Object = MibTableColumn
rcTengIfInErrors = _RcTengIfInErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 14),
    _RcTengIfInErrors_Type()
)
rcTengIfInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfInErrors.setStatus("current")
_RcTengIfInUnknownProtos_Type = Counter64
_RcTengIfInUnknownProtos_Object = MibTableColumn
rcTengIfInUnknownProtos = _RcTengIfInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 15),
    _RcTengIfInUnknownProtos_Type()
)
rcTengIfInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfInUnknownProtos.setStatus("current")
_RcTengIfOutOctets_Type = Counter64
_RcTengIfOutOctets_Object = MibTableColumn
rcTengIfOutOctets = _RcTengIfOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 16),
    _RcTengIfOutOctets_Type()
)
rcTengIfOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOutOctets.setStatus("current")
_RcTengIfOutUcastPkts_Type = Counter64
_RcTengIfOutUcastPkts_Object = MibTableColumn
rcTengIfOutUcastPkts = _RcTengIfOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 17),
    _RcTengIfOutUcastPkts_Type()
)
rcTengIfOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOutUcastPkts.setStatus("current")
_RcTengIfOutNUcastPkts_Type = Counter64
_RcTengIfOutNUcastPkts_Object = MibTableColumn
rcTengIfOutNUcastPkts = _RcTengIfOutNUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 18),
    _RcTengIfOutNUcastPkts_Type()
)
rcTengIfOutNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOutNUcastPkts.setStatus("deprecated")
_RcTengIfOutDiscards_Type = Counter64
_RcTengIfOutDiscards_Object = MibTableColumn
rcTengIfOutDiscards = _RcTengIfOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 19),
    _RcTengIfOutDiscards_Type()
)
rcTengIfOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOutDiscards.setStatus("current")
_RcTengIfOutErrors_Type = Counter64
_RcTengIfOutErrors_Object = MibTableColumn
rcTengIfOutErrors = _RcTengIfOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 20),
    _RcTengIfOutErrors_Type()
)
rcTengIfOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOutErrors.setStatus("current")
_RcTengIfOutQLen_Type = Gauge32
_RcTengIfOutQLen_Object = MibTableColumn
rcTengIfOutQLen = _RcTengIfOutQLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 21),
    _RcTengIfOutQLen_Type()
)
rcTengIfOutQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOutQLen.setStatus("deprecated")
_RcTengIfSpecific_Type = ObjectIdentifier
_RcTengIfSpecific_Object = MibTableColumn
rcTengIfSpecific = _RcTengIfSpecific_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 3, 1, 22),
    _RcTengIfSpecific_Type()
)
rcTengIfSpecific.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfSpecific.setStatus("deprecated")
_RcTengIfXTable_Object = MibTable
rcTengIfXTable = _RcTengIfXTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4)
)
if mibBuilder.loadTexts:
    rcTengIfXTable.setStatus("current")
_RcTengIfXEntry_Object = MibTableRow
rcTengIfXEntry = _RcTengIfXEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1)
)
rcTengIfXEntry.setIndexNames(
    (0, "RAPID-CITY", "rcTengIfXIndex"),
)
if mibBuilder.loadTexts:
    rcTengIfXEntry.setStatus("current")
_RcTengIfXIndex_Type = InterfaceIndex
_RcTengIfXIndex_Object = MibTableColumn
rcTengIfXIndex = _RcTengIfXIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 1),
    _RcTengIfXIndex_Type()
)
rcTengIfXIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfXIndex.setStatus("current")
_RcTengIfName_Type = DisplayString
_RcTengIfName_Object = MibTableColumn
rcTengIfName = _RcTengIfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 2),
    _RcTengIfName_Type()
)
rcTengIfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfName.setStatus("current")
_RcTengIfInMulticastPkts_Type = Counter64
_RcTengIfInMulticastPkts_Object = MibTableColumn
rcTengIfInMulticastPkts = _RcTengIfInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 3),
    _RcTengIfInMulticastPkts_Type()
)
rcTengIfInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfInMulticastPkts.setStatus("current")
_RcTengIfInBroadcastPkts_Type = Counter64
_RcTengIfInBroadcastPkts_Object = MibTableColumn
rcTengIfInBroadcastPkts = _RcTengIfInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 4),
    _RcTengIfInBroadcastPkts_Type()
)
rcTengIfInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfInBroadcastPkts.setStatus("current")
_RcTengIfOutMulticastPkts_Type = Counter64
_RcTengIfOutMulticastPkts_Object = MibTableColumn
rcTengIfOutMulticastPkts = _RcTengIfOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 5),
    _RcTengIfOutMulticastPkts_Type()
)
rcTengIfOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOutMulticastPkts.setStatus("current")
_RcTengIfOutBroadcastPkts_Type = Counter64
_RcTengIfOutBroadcastPkts_Object = MibTableColumn
rcTengIfOutBroadcastPkts = _RcTengIfOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 6),
    _RcTengIfOutBroadcastPkts_Type()
)
rcTengIfOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfOutBroadcastPkts.setStatus("current")
_RcTengIfHCInOctets_Type = Counter64
_RcTengIfHCInOctets_Object = MibTableColumn
rcTengIfHCInOctets = _RcTengIfHCInOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 7),
    _RcTengIfHCInOctets_Type()
)
rcTengIfHCInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHCInOctets.setStatus("current")
_RcTengIfHCInUcastPkts_Type = Counter64
_RcTengIfHCInUcastPkts_Object = MibTableColumn
rcTengIfHCInUcastPkts = _RcTengIfHCInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 8),
    _RcTengIfHCInUcastPkts_Type()
)
rcTengIfHCInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHCInUcastPkts.setStatus("current")
_RcTengIfHCInMulticastPkts_Type = Counter64
_RcTengIfHCInMulticastPkts_Object = MibTableColumn
rcTengIfHCInMulticastPkts = _RcTengIfHCInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 9),
    _RcTengIfHCInMulticastPkts_Type()
)
rcTengIfHCInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHCInMulticastPkts.setStatus("current")
_RcTengIfHCInBroadcastPkts_Type = Counter64
_RcTengIfHCInBroadcastPkts_Object = MibTableColumn
rcTengIfHCInBroadcastPkts = _RcTengIfHCInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 10),
    _RcTengIfHCInBroadcastPkts_Type()
)
rcTengIfHCInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHCInBroadcastPkts.setStatus("current")
_RcTengIfHCOutOctets_Type = Counter64
_RcTengIfHCOutOctets_Object = MibTableColumn
rcTengIfHCOutOctets = _RcTengIfHCOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 11),
    _RcTengIfHCOutOctets_Type()
)
rcTengIfHCOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHCOutOctets.setStatus("current")
_RcTengIfHCOutUcastPkts_Type = Counter64
_RcTengIfHCOutUcastPkts_Object = MibTableColumn
rcTengIfHCOutUcastPkts = _RcTengIfHCOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 12),
    _RcTengIfHCOutUcastPkts_Type()
)
rcTengIfHCOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHCOutUcastPkts.setStatus("current")
_RcTengIfHCOutMulticastPkts_Type = Counter64
_RcTengIfHCOutMulticastPkts_Object = MibTableColumn
rcTengIfHCOutMulticastPkts = _RcTengIfHCOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 13),
    _RcTengIfHCOutMulticastPkts_Type()
)
rcTengIfHCOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHCOutMulticastPkts.setStatus("current")
_RcTengIfHCOutBroadcastPkts_Type = Counter64
_RcTengIfHCOutBroadcastPkts_Object = MibTableColumn
rcTengIfHCOutBroadcastPkts = _RcTengIfHCOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 14),
    _RcTengIfHCOutBroadcastPkts_Type()
)
rcTengIfHCOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHCOutBroadcastPkts.setStatus("current")


class _RcTengIfLinkUpDownTrapEnable_Type(Integer32):
    """Custom type rcTengIfLinkUpDownTrapEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcTengIfLinkUpDownTrapEnable_Type.__name__ = "Integer32"
_RcTengIfLinkUpDownTrapEnable_Object = MibTableColumn
rcTengIfLinkUpDownTrapEnable = _RcTengIfLinkUpDownTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 15),
    _RcTengIfLinkUpDownTrapEnable_Type()
)
rcTengIfLinkUpDownTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTengIfLinkUpDownTrapEnable.setStatus("current")
_RcTengIfHighSpeed_Type = Gauge32
_RcTengIfHighSpeed_Object = MibTableColumn
rcTengIfHighSpeed = _RcTengIfHighSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 16),
    _RcTengIfHighSpeed_Type()
)
rcTengIfHighSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfHighSpeed.setStatus("current")
_RcTengIfPromiscuousMode_Type = TruthValue
_RcTengIfPromiscuousMode_Object = MibTableColumn
rcTengIfPromiscuousMode = _RcTengIfPromiscuousMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 17),
    _RcTengIfPromiscuousMode_Type()
)
rcTengIfPromiscuousMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTengIfPromiscuousMode.setStatus("current")
_RcTengIfConnectorPresent_Type = TruthValue
_RcTengIfConnectorPresent_Object = MibTableColumn
rcTengIfConnectorPresent = _RcTengIfConnectorPresent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 1, 4, 1, 18),
    _RcTengIfConnectorPresent_Type()
)
rcTengIfConnectorPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTengIfConnectorPresent.setStatus("current")
_RcWisTrap_ObjectIdentity = ObjectIdentity
rcWisTrap = _RcWisTrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 2)
)


class _RcWisSonetTrapType_Type(Integer32):
    """Custom type rcWisSonetTrapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lineAlarm", 2),
          ("pathAlarm", 3),
          ("sectionAlarm", 1))
    )


_RcWisSonetTrapType_Type.__name__ = "Integer32"
_RcWisSonetTrapType_Object = MibScalar
rcWisSonetTrapType = _RcWisSonetTrapType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 2, 1),
    _RcWisSonetTrapType_Type()
)
rcWisSonetTrapType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWisSonetTrapType.setStatus("current")


class _RcWisSonetTrapIndication_Type(Integer32):
    """Custom type rcWisSonetTrapIndication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("lineAlarmIndication", 4),
          ("lineRemoteDefectIndication", 5),
          ("noDefect", 1),
          ("pathAlarmIndication", 7),
          ("pathLossOfPointer", 6),
          ("pathRemoteDefectIndication", 8),
          ("pathSignalLabelMismatch", 10),
          ("pathTraceMismatch", 11),
          ("pathUnequipped", 9),
          ("sectionLossOfFrame", 3),
          ("sectionLossOfSignal", 2))
    )


_RcWisSonetTrapIndication_Type.__name__ = "Integer32"
_RcWisSonetTrapIndication_Object = MibScalar
rcWisSonetTrapIndication = _RcWisSonetTrapIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 50, 2, 2),
    _RcWisSonetTrapIndication_Type()
)
rcWisSonetTrapIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcWisSonetTrapIndication.setStatus("current")
_RcRec_ObjectIdentity = ObjectIdentity
rcRec = _RcRec_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 51)
)
_RcRecReservTable_Object = MibTable
rcRecReservTable = _RcRecReservTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 51, 1)
)
if mibBuilder.loadTexts:
    rcRecReservTable.setStatus("current")
_RcRecReservTablEntry_Object = MibTableRow
rcRecReservTablEntry = _RcRecReservTablEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 51, 1, 1)
)
rcRecReservTablEntry.setIndexNames(
    (0, "RAPID-CITY", "rcRecReservRecordType"),
)
if mibBuilder.loadTexts:
    rcRecReservTablEntry.setStatus("current")


class _RcRecReservRecordType_Type(Integer32):
    """Custom type rcRecReservRecordType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("filter", 1),
          ("ipmc", 2),
          ("local", 3),
          ("mac", 4),
          ("static", 5),
          ("vrrp", 6))
    )


_RcRecReservRecordType_Type.__name__ = "Integer32"
_RcRecReservRecordType_Object = MibTableColumn
rcRecReservRecordType = _RcRecReservRecordType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 51, 1, 1, 1),
    _RcRecReservRecordType_Type()
)
rcRecReservRecordType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRecReservRecordType.setStatus("current")
_RcRecReservUsed_Type = Integer32
_RcRecReservUsed_Object = MibTableColumn
rcRecReservUsed = _RcRecReservUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 51, 1, 1, 2),
    _RcRecReservUsed_Type()
)
rcRecReservUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRecReservUsed.setStatus("current")
_RcRecReservReserved_Type = Integer32
_RcRecReservReserved_Object = MibTableColumn
rcRecReservReserved = _RcRecReservReserved_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 51, 1, 1, 3),
    _RcRecReservReserved_Type()
)
rcRecReservReserved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRecReservReserved.setStatus("current")
_RcRecReservNewReserved_Type = Integer32
_RcRecReservNewReserved_Object = MibTableColumn
rcRecReservNewReserved = _RcRecReservNewReserved_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 51, 1, 1, 4),
    _RcRecReservNewReserved_Type()
)
rcRecReservNewReserved.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcRecReservNewReserved.setStatus("current")
_RcRecReservDefReserved_Type = Integer32
_RcRecReservDefReserved_Object = MibTableColumn
rcRecReservDefReserved = _RcRecReservDefReserved_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 51, 1, 1, 5),
    _RcRecReservDefReserved_Type()
)
rcRecReservDefReserved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcRecReservDefReserved.setStatus("current")
_RcLacp_ObjectIdentity = ObjectIdentity
rcLacp = _RcLacp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53)
)
_RcLacpGlobal_ObjectIdentity = ObjectIdentity
rcLacpGlobal = _RcLacpGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1)
)


class _RcLacpGlobalEnable_Type(TruthValue):
    """Custom type rcLacpGlobalEnable based on TruthValue"""


_RcLacpGlobalEnable_Object = MibScalar
rcLacpGlobalEnable = _RcLacpGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 1),
    _RcLacpGlobalEnable_Type()
)
rcLacpGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalEnable.setStatus("current")


class _RcLacpGlobalSystemPriority_Type(Integer32):
    """Custom type rcLacpGlobalSystemPriority based on Integer32"""
    defaultValue = 32768


_RcLacpGlobalSystemPriority_Object = MibScalar
rcLacpGlobalSystemPriority = _RcLacpGlobalSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 2),
    _RcLacpGlobalSystemPriority_Type()
)
rcLacpGlobalSystemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalSystemPriority.setStatus("current")


class _RcLacpGlobalFastPeriodicTime_Type(Integer32):
    """Custom type rcLacpGlobalFastPeriodicTime based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 20000),
    )


_RcLacpGlobalFastPeriodicTime_Type.__name__ = "Integer32"
_RcLacpGlobalFastPeriodicTime_Object = MibScalar
rcLacpGlobalFastPeriodicTime = _RcLacpGlobalFastPeriodicTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 3),
    _RcLacpGlobalFastPeriodicTime_Type()
)
rcLacpGlobalFastPeriodicTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalFastPeriodicTime.setStatus("current")


class _RcLacpGlobalSlowPeriodicTime_Type(Integer32):
    """Custom type rcLacpGlobalSlowPeriodicTime based on Integer32"""
    defaultValue = 30000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10000, 30000),
    )


_RcLacpGlobalSlowPeriodicTime_Type.__name__ = "Integer32"
_RcLacpGlobalSlowPeriodicTime_Object = MibScalar
rcLacpGlobalSlowPeriodicTime = _RcLacpGlobalSlowPeriodicTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 4),
    _RcLacpGlobalSlowPeriodicTime_Type()
)
rcLacpGlobalSlowPeriodicTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalSlowPeriodicTime.setStatus("current")


class _RcLacpGlobalTimeoutScale_Type(Integer32):
    """Custom type rcLacpGlobalTimeoutScale based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcLacpGlobalTimeoutScale_Type.__name__ = "Integer32"
_RcLacpGlobalTimeoutScale_Object = MibScalar
rcLacpGlobalTimeoutScale = _RcLacpGlobalTimeoutScale_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 5),
    _RcLacpGlobalTimeoutScale_Type()
)
rcLacpGlobalTimeoutScale.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalTimeoutScale.setStatus("current")


class _RcLacpGlobalAggrWaitTime_Type(Integer32):
    """Custom type rcLacpGlobalAggrWaitTime based on Integer32"""
    defaultValue = 2000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 2000),
    )


_RcLacpGlobalAggrWaitTime_Type.__name__ = "Integer32"
_RcLacpGlobalAggrWaitTime_Object = MibScalar
rcLacpGlobalAggrWaitTime = _RcLacpGlobalAggrWaitTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 6),
    _RcLacpGlobalAggrWaitTime_Type()
)
rcLacpGlobalAggrWaitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalAggrWaitTime.setStatus("current")


class _RcLacpGlobalVlacpEnable_Type(TruthValue):
    """Custom type rcLacpGlobalVlacpEnable based on TruthValue"""


_RcLacpGlobalVlacpEnable_Object = MibScalar
rcLacpGlobalVlacpEnable = _RcLacpGlobalVlacpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 7),
    _RcLacpGlobalVlacpEnable_Type()
)
rcLacpGlobalVlacpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalVlacpEnable.setStatus("current")


class _RcLacpGlobalFastPeriodicTimeOper_Type(Integer32):
    """Custom type rcLacpGlobalFastPeriodicTimeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 20000),
    )


_RcLacpGlobalFastPeriodicTimeOper_Type.__name__ = "Integer32"
_RcLacpGlobalFastPeriodicTimeOper_Object = MibScalar
rcLacpGlobalFastPeriodicTimeOper = _RcLacpGlobalFastPeriodicTimeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 9),
    _RcLacpGlobalFastPeriodicTimeOper_Type()
)
rcLacpGlobalFastPeriodicTimeOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLacpGlobalFastPeriodicTimeOper.setStatus("current")


class _RcLacpGlobalSlowPeriodicTimeOper_Type(Integer32):
    """Custom type rcLacpGlobalSlowPeriodicTimeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10000, 30000),
    )


_RcLacpGlobalSlowPeriodicTimeOper_Type.__name__ = "Integer32"
_RcLacpGlobalSlowPeriodicTimeOper_Object = MibScalar
rcLacpGlobalSlowPeriodicTimeOper = _RcLacpGlobalSlowPeriodicTimeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 10),
    _RcLacpGlobalSlowPeriodicTimeOper_Type()
)
rcLacpGlobalSlowPeriodicTimeOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLacpGlobalSlowPeriodicTimeOper.setStatus("current")


class _RcLacpGlobalTimeoutScaleOper_Type(Integer32):
    """Custom type rcLacpGlobalTimeoutScaleOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcLacpGlobalTimeoutScaleOper_Type.__name__ = "Integer32"
_RcLacpGlobalTimeoutScaleOper_Object = MibScalar
rcLacpGlobalTimeoutScaleOper = _RcLacpGlobalTimeoutScaleOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 11),
    _RcLacpGlobalTimeoutScaleOper_Type()
)
rcLacpGlobalTimeoutScaleOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLacpGlobalTimeoutScaleOper.setStatus("current")


class _RcLacpGlobalAggrWaitTimeOper_Type(Integer32):
    """Custom type rcLacpGlobalAggrWaitTimeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 2000),
    )


_RcLacpGlobalAggrWaitTimeOper_Type.__name__ = "Integer32"
_RcLacpGlobalAggrWaitTimeOper_Object = MibScalar
rcLacpGlobalAggrWaitTimeOper = _RcLacpGlobalAggrWaitTimeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 12),
    _RcLacpGlobalAggrWaitTimeOper_Type()
)
rcLacpGlobalAggrWaitTimeOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLacpGlobalAggrWaitTimeOper.setStatus("current")
_RcLacpGlobalSmltSysId_Type = MacAddress
_RcLacpGlobalSmltSysId_Object = MibScalar
rcLacpGlobalSmltSysId = _RcLacpGlobalSmltSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 13),
    _RcLacpGlobalSmltSysId_Type()
)
rcLacpGlobalSmltSysId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalSmltSysId.setStatus("current")


class _RcLacpGlobalVlacpHoldTime_Type(Integer32):
    """Custom type rcLacpGlobalVlacpHoldTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_RcLacpGlobalVlacpHoldTime_Type.__name__ = "Integer32"
_RcLacpGlobalVlacpHoldTime_Object = MibScalar
rcLacpGlobalVlacpHoldTime = _RcLacpGlobalVlacpHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 53, 1, 15),
    _RcLacpGlobalVlacpHoldTime_Type()
)
rcLacpGlobalVlacpHoldTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcLacpGlobalVlacpHoldTime.setStatus("current")
_RcLicense_ObjectIdentity = ObjectIdentity
rcLicense = _RcLicense_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 56)
)


class _RcLicenseNumber_Type(Integer32):
    """Custom type rcLicenseNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              39,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              399,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420,
              421,
              422,
              423,
              424,
              425,
              426,
              427,
              428,
              429,
              430,
              431,
              432,
              433,
              434,
              435,
              436,
              437,
              438,
              439,
              440,
              441,
              442,
              443,
              444,
              445,
              446,
              447,
              448,
              449,
              450,
              451,
              452,
              453,
              454,
              455,
              456,
              457,
              458,
              459,
              460,
              461,
              462,
              463,
              464,
              465,
              466,
              467,
              468,
              469,
              470,
              471,
              472,
              473,
              474,
              475,
              476,
              477,
              478,
              479,
              480,
              481,
              482,
              483,
              484,
              485,
              486,
              487,
              488,
              489,
              490,
              491,
              492,
              493,
              494,
              495,
              496,
              497,
              498,
              499,
              500,
              501,
              502,
              503,
              504,
              505,
              506,
              507,
              508,
              509,
              510,
              511,
              512,
              513,
              514,
              515,
              516,
              517,
              518,
              519,
              520,
              521,
              522,
              523,
              524,
              525,
              526,
              527,
              528,
              529,
              530,
              531,
              532,
              533,
              534,
              535,
              536,
              537,
              538,
              539,
              540,
              541,
              542,
              543,
              544,
              545,
              546,
              547,
              548,
              549,
              550,
              551,
              552,
              553,
              554,
              555,
              556,
              557,
              558,
              559,
              560,
              561,
              562,
              563,
              564,
              565,
              566,
              567,
              568,
              569,
              570,
              571,
              572,
              573,
              574,
              575,
              576,
              577,
              578,
              579,
              580,
              581,
              582,
              583,
              584,
              585,
              586,
              587,
              588,
              589,
              590,
              591,
              592,
              593,
              594,
              595,
              596,
              597,
              598,
              599,
              600,
              601,
              602,
              603,
              604,
              605,
              606,
              607,
              608,
              609,
              610,
              611,
              612,
              613,
              614,
              615,
              616,
              617,
              618,
              619,
              620,
              621,
              622,
              623,
              624,
              625,
              626,
              627,
              628,
              629,
              630,
              631,
              632,
              633,
              634,
              635,
              636,
              637,
              638,
              639,
              640,
              641,
              642,
              643,
              644,
              645,
              646,
              647,
              648,
              649,
              650,
              651,
              652,
              653,
              654,
              655,
              656,
              657,
              658,
              659,
              660,
              661,
              662,
              663,
              664,
              665,
              666,
              667,
              668,
              669,
              670,
              671,
              672,
              673,
              674,
              675,
              676,
              677,
              678,
              679,
              680,
              681,
              682,
              683,
              684,
              685,
              686,
              687,
              688,
              689,
              690,
              691,
              692,
              693,
              694,
              695,
              696,
              697,
              698,
              699,
              700,
              701,
              702,
              703,
              704,
              705,
              706,
              707,
              708,
              709,
              710,
              711,
              712,
              713,
              714,
              715,
              716,
              717,
              718,
              719,
              720,
              721,
              722,
              723,
              724,
              725,
              726,
              727,
              728,
              729,
              730,
              731,
              732,
              733,
              734,
              735,
              736,
              737,
              738,
              739,
              740,
              741,
              742,
              743,
              744,
              745,
              746,
              747,
              748,
              749,
              750,
              751,
              752,
              753,
              754,
              755,
              756,
              757,
              758,
              759,
              760,
              761,
              762,
              763,
              764,
              765,
              766,
              767,
              768,
              769,
              770,
              771,
              772,
              773,
              774,
              775,
              776,
              777,
              778,
              779,
              780,
              781,
              782,
              783,
              784,
              785,
              786,
              787,
              788,
              789,
              790,
              791,
              792,
              793,
              794,
              795,
              796,
              797,
              798,
              799,
              800,
              801,
              802,
              803,
              804,
              805,
              806,
              807,
              808,
              809,
              810,
              811,
              812,
              813,
              814,
              815,
              816,
              817,
              818,
              819,
              820,
              821,
              822,
              823,
              824,
              825,
              826,
              827,
              828,
              829,
              830,
              831,
              832,
              833,
              834,
              835,
              836,
              837,
              838,
              839,
              840,
              841,
              842,
              843,
              844,
              845,
              846,
              847,
              848,
              849,
              850,
              851,
              852,
              853,
              854,
              855,
              856,
              857,
              858,
              859,
              860,
              861,
              862,
              863,
              864,
              865,
              866,
              867,
              868,
              869,
              870,
              871,
              872,
              873,
              874,
              875,
              876,
              877,
              878,
              879,
              880,
              881,
              882,
              883,
              884,
              885,
              886,
              887,
              888,
              889,
              890,
              891,
              892,
              893,
              894,
              895,
              896,
              897,
              898,
              899,
              900,
              901,
              902,
              903,
              904,
              905,
              906,
              907,
              908,
              909,
              910,
              911,
              912,
              913,
              914,
              915,
              916,
              917,
              918,
              919,
              920,
              921,
              922,
              923,
              924,
              925,
              926,
              927,
              928,
              929,
              930,
              931,
              932,
              933,
              934,
              935,
              974,
              975,
              976,
              977,
              978,
              979,
              980,
              981,
              982,
              983,
              984,
              985,
              986,
              987,
              988,
              989,
              990,
              991,
              992,
              993,
              994,
              995,
              996,
              997,
              998,
              999,
              1012,
              1015,
              1016,
              1017,
              1019,
              1020,
              1021,
              1022,
              1023,
              1024,
              1025,
              1027,
              1029,
              1030,
              1053,
              1055,
              1056,
              1057,
              1058,
              1059,
              1060,
              1061,
              1062,
              1063,
              1076,
              1091,
              1092,
              1125,
              1126,
              1127,
              1129,
              1148,
              1149,
              1150,
              1151,
              1152,
              1153,
              1154,
              1155,
              1156,
              1157,
              1158,
              1159,
              1160,
              1161,
              1162,
              1164,
              1165,
              1166,
              1168,
              1169,
              1175,
              1176,
              1177,
              1178,
              1179,
              1536,
              1537,
              1538,
              1539,
              1540,
              1541,
              1542,
              1543,
              1544,
              1545,
              1546,
              1547,
              1548,
              1549,
              1550,
              1551,
              1552,
              1553,
              1554,
              1555,
              1556,
              1557,
              1558,
              1559,
              1560,
              1561,
              1562,
              1563,
              1564,
              1565,
              1566,
              1567,
              1568,
              1569,
              1570,
              1579,
              1580,
              1581,
              1582,
              1583,
              1584,
              1585,
              1586,
              1603,
              1604,
              1605,
              1606,
              1607,
              1608,
              1609,
              1610,
              1611,
              1612,
              1613,
              1614,
              1615,
              1616,
              1617,
              1618,
              1619,
              1620,
              1621,
              1622,
              1623,
              1624,
              1625,
              1626,
              1627,
              1628,
              1629,
              1630,
              1631,
              1632,
              1633,
              1634,
              1635,
              1636,
              1637,
              1638,
              1639,
              1640,
              1641,
              1642,
              1643,
              1644,
              1645,
              1646,
              1647,
              1648,
              1649,
              1650,
              1654,
              1655,
              1656,
              1657,
              1658,
              1659,
              1660,
              1661,
              1662,
              1663,
              1664,
              1672,
              1673,
              1674,
              1675,
              1676,
              1677,
              1678,
              1679,
              1680,
              1681,
              1682,
              1683,
              1709,
              1710,
              1711,
              1712,
              1713,
              1714,
              1715,
              1716,
              1717,
              1718,
              1719,
              1720,
              1721,
              2047)
        )
    )
    namedValues = NamedValues(
        *(("bit8600BASE", 0),
          ("bit8x10BASE", 10),
          ("bit8x11BASE", 11),
          ("bit8x12BASE", 12),
          ("bit8x13BASE", 13),
          ("bit8x14BASE", 14),
          ("bit8x15BASE", 15),
          ("bit8x16BASE", 16),
          ("bit8x17BASE", 17),
          ("bit8x18BASE", 18),
          ("bit8x19BASE", 19),
          ("bit8x20BASE", 20),
          ("bit8x21BASE", 21),
          ("bit8x22BASE", 22),
          ("bit8x23BASE", 23),
          ("bit8x24BASE", 24),
          ("bit8x25BASE", 25),
          ("bit8x26BASE", 26),
          ("bit8x27BASE", 27),
          ("bit8x28BASE", 28),
          ("bit8x29BASE", 29),
          ("bit8x30BASE", 30),
          ("bit8x31BASE", 31),
          ("bit8xx4BASE", 4),
          ("bit8xx5BASE", 5),
          ("bit8xx6BASE", 6),
          ("bit8xx7BASE", 7),
          ("bit8xx8BASE", 8),
          ("bit8xx9BASE", 9),
          ("bitADVANCED", 37),
          ("bitAccessLevelEnDisCli", 1020),
          ("bitAutoRecoverSet", 1019),
          ("bitBASIC", 33),
          ("bitBcli8100Cli", 770),
          ("bitBcli8616ReAutonegCli", 979),
          ("bitBcliAgentHacpuCli", 771),
          ("bitBcliAltLedEnableCli", 975),
          ("bitBcliAttribCli", 772),
          ("bitBcliAutobootCli", 773),
          ("bitBcliAutonegotiateCli", 774),
          ("bitBcliBackupCfgfileCli", 976),
          ("bitBcliBaudCli", 775),
          ("bitBcliBlockSwitchOverCli", 909),
          ("bitBcliBootCli", 776),
          ("bitBcliBootpCli", 777),
          ("bitBcliBootpImageNameInfo", 984),
          ("bitBcliBootpImageNameSetCli", 980),
          ("bitBcliBootpSecImageNameSetCli", 1148),
          ("bitBcliCdCli", 778),
          ("bitBcliCfgfileCli", 779),
          ("bitBcliCheckSrcRouteCli", 1030),
          ("bitBcliCopyCli", 780),
          ("bitBcliCpCli", 781),
          ("bitBcliCtrlRecOptimizeCli", 910),
          ("bitBcliCwcCli", 782),
          ("bitBcliDatabitsCli", 783),
          ("bitBcliDcdebugCli", 784),
          ("bitBcliDebugcfgCli", 785),
          ("bitBcliDebugmodeCli", 786),
          ("bitBcliDelayCli", 787),
          ("bitBcliDirCli", 789),
          ("bitBcliDosChkdskCli", 790),
          ("bitBcliDosFormatCli", 791),
          ("bitBcliDstCli", 792),
          ("bitBcliDstendCli", 793),
          ("bitBcliDstnameCli", 794),
          ("bitBcliDstoffCli", 795),
          ("bitBcliDststartCli", 796),
          ("bitBcliDumpfhCli", 1025),
          ("bitBcliDumpspromCli", 797),
          ("bitBcliEditCli", 798),
          ("bitBcliEgressloopCli", 799),
          ("bitBcliFactorydefaultsCli", 800),
          ("bitBcliFmmFormatCli", 802),
          ("bitBcliFmmdebugCli", 801),
          ("bitBcliFtpdCli", 803),
          ("bitBcliFtpdebugCli", 804),
          ("bitBcliFullduplexCli", 805),
          ("bitBcliGrepCli", 806),
          ("bitBcliHacpuCli", 807),
          ("bitBcliHiSecureFlagCli", 907),
          ("bitBcliI2cdebugCli", 808),
          ("bitBcliImagefileCli", 809),
          ("bitBcliLicensefileCli", 1129),
          ("bitBcliLogParmsCli", 911),
          ("bitBcliLsCli", 810),
          ("bitBcliMacUpgradeCli", 982),
          ("bitBcliMaintCommand", 989),
          ("bitBcliMasterCli", 811),
          ("bitBcliMcpCli", 812),
          ("bitBcliMd5Cli", 1024),
          ("bitBcliMezzCardBootEnableCli", 1027),
          ("bitBcliMezzImageNameSetCli", 981),
          ("bitBcliMfgburninCli", 813),
          ("bitBcliMfgdCli", 814),
          ("bitBcliMfgledCli", 815),
          ("bitBcliMfgmCli", 816),
          ("bitBcliMgmtrouteCli", 817),
          ("bitBcliMkdirCli", 818),
          ("bitBcliMnetipCli", 819),
          ("bitBcliMoreCli", 820),
          ("bitBcliMoreflagCli", 821),
          ("bitBcliMulticastCli", 822),
          ("bitBcliMvCli", 823),
          ("bitBcliNetenableCli", 824),
          ("bitBcliNetipCli", 825),
          ("bitBcliNetrestartCli", 826),
          ("bitBcliNetspeedCli", 827),
          ("bitBcliPcdebugCli", 828),
          ("bitBcliPclogCli", 829),
          ("bitBcliPctraceCli", 830),
          ("bitBcliPeerCli", 831),
          ("bitBcliPingCli", 832),
          ("bitBcliPrivilegeCli", 901),
          ("bitBcliProgrambootCli", 833),
          ("bitBcliPromptCli", 834),
          ("bitBcliPwcCli", 835),
          ("bitBcliPwdCli", 836),
          ("bitBcliRarudipsvCli", 837),
          ("bitBcliRarudrecCli", 838),
          ("bitBcliReadRtcCli", 902),
          ("bitBcliReadspromCli", 839),
          ("bitBcliRebootonerrorCli", 840),
          ("bitBcliResetCli", 841),
          ("bitBcliResetPasswordCli", 842),
          ("bitBcliRloginCli", 843),
          ("bitBcliRlogindCli", 844),
          ("bitBcliRloginlimitCli", 845),
          ("bitBcliRmCli", 846),
          ("bitBcliRshCli", 847),
          ("bitBcliSaveCli", 848),
          ("bitBcliSavetostandbyCli", 849),
          ("bitBcliScrsizeCli", 850),
          ("bitBcliSetbootpimagenameCli", 851),
          ("bitBcliSioenableCli", 852),
          ("bitBcliSiomodeCli", 853),
          ("bitBcliSiomtuCli", 854),
          ("bitBcliSiomyipCli", 855),
          ("bitBcliSiopeeripCli", 856),
          ("bitBcliSiopppfileCli", 857),
          ("bitBcliSiorestartCli", 858),
          ("bitBcliSioslipcomCli", 859),
          ("bitBcliSiosliprxcomCli", 860),
          ("bitBcliSnmpdCli", 861),
          ("bitBcliSourceCli", 862),
          ("bitBcliSshdCli", 863),
          ("bitBcliTelnetCli", 864),
          ("bitBcliTelnetdCli", 865),
          ("bitBcliTelnetlimitCli", 866),
          ("bitBcliTestCli", 867),
          ("bitBcliTestspromCli", 868),
          ("bitBcliTftpdCli", 869),
          ("bitBcliTftpdebugCli", 870),
          ("bitBcliTftphashCli", 871),
          ("bitBcliTftphostCli", 872),
          ("bitBcliTftprexmitCli", 873),
          ("bitBcliTftptimeoutCli", 874),
          ("bitBcliTimeoutCli", 875),
          ("bitBcliTupleCli", 876),
          ("bitBcliTzCli", 877),
          ("bitBcliTzoffCli", 878),
          ("bitBcliUpdatebootCli", 879),
          ("bitBcliVerifycfgCli", 880),
          ("bitBcliVxataCli", 881),
          ("bitBcliVxdcCli", 882),
          ("bitBcliVxdosCli", 883),
          ("bitBcliVxinetCli", 884),
          ("bitBcliVxiosCli", 885),
          ("bitBcliVxmemCli", 886),
          ("bitBcliVxpasswordCli", 887),
          ("bitBcliVxpppCli", 888),
          ("bitBcliVxtiCli", 889),
          ("bitBcliVxuserCli", 890),
          ("bitBcliWdtCli", 891),
          ("bitBcliWlanCli", 892),
          ("bitBcliWlanconfigureCli", 893),
          ("bitBcliWlandesiredssidCli", 788),
          ("bitBcliWriteRtcCli", 894),
          ("bitBcliWritespromCli", 895),
          ("bitBootPCliSetImageNameCli", 896),
          ("bitBootPCliSettingCli", 897),
          ("bitBootpCliSetImageNameCli", 915),
          ("bitBoxCli", 908),
          ("bitCliConfigIpBgpDebugScreenCli", 685),
          ("bitCliConfigIpBgpMaxInitPeersCli", 683),
          ("bitCliConfigIpBgpMaxTxQueueLenCli", 684),
          ("bitDebugIsisCmdCli", 1179),
          ("bitDebugL2vpnCmdCli", 1178),
          ("bitDismanPingTraceroute", 935),
          ("bitDumpCircuitcli", 991),
          ("bitExitTreeCli", 898),
          ("bitExtCpLimit", 990),
          ("bitInfoCmdCli", 448),
          ("bitInfoCmdSnmp", 1655),
          ("bitIpv6InterfaceTbl", 1627),
          ("bitIpv6MIBObjects", 1630),
          ("bitIpv6NetToMediaTbl", 1629),
          ("bitIpv6RouteTbl", 1628),
          ("bitL2PingCmdCli", 1175),
          ("bitL2TraceCmdCli", 1176),
          ("bitL2TraceReplyCmdCli", 1177),
          ("bitLbmCmdCli", 1091),
          ("bitLicenseLoadCli", 913),
          ("bitLoadConfigCli", 983),
          ("bitLtmCmdCli", 1092),
          ("bitMULTICAST", 35),
          ("bitMacUpgradeCli", 899),
          ("bitNaapCli", 974),
          ("bitOpTreeCli", 905),
          ("bitPP8300BASE", 2),
          ("bitPREMIER", 39),
          ("bitPasswordAgeCli", 912),
          ("bitPasswordLenCli", 1029),
          ("bitPcmciaStopCli", 900),
          ("bitPortCliSetSpoofDetectCli", 1023),
          ("bitShExecuteCli", 986),
          ("bitShowCmdCli", 447),
          ("bitShowCmdSnmp", 1656),
          ("bitShowHelpCli", 903),
          ("bitShowHistoryCli", 904),
          ("bitSuperNetEnable", 444),
          ("bitTOOL", 36),
          ("bitTreeCli", 446),
          ("bitTreeSnmp", 1654),
          ("bitUNICAST", 34),
          ("bitUpOneTreeCli", 906),
          ("bitVxshellCli", 600),
          ("bitatm1483ElanTbl", 324),
          ("bitatmCliCardResetCli", 617),
          ("bitatmCliClearF5StatsCli", 615),
          ("bitatmCliClearPortStatsCli", 616),
          ("bitatmCliClearVPortStatsCli", 614),
          ("bitatmCliEnableVPortStatsCli", 618),
          ("bitatmCliLaneCreateCli", 621),
          ("bitatmCliLaneDeleteCli", 622),
          ("bitatmCliSetDebugCli", 619),
          ("bitatmCliStateCli", 623),
          ("bitatmCliVPortStatsIntervalCli", 620),
          ("bitatmPortTbl", 325),
          ("bitatmPvcTbl", 326),
          ("bitauthTrapWSMCli", 666),
          ("bitbasicbgpPeerTbl", 1712),
          ("bitbasicrcIpBgpAggregateTbl", 1714),
          ("bitbasicrcIpBgpConfederationGrp", 1715),
          ("bitbasicrcIpBgpGeneralGrp", 1713),
          ("bitbasicrcIpBgpNetworkTbl", 1720),
          ("bitbasicrcIpBgpPeerGroupTbl", 1719),
          ("bitbasicrcIpBgpPeerTbl", 1711),
          ("bitbasicrcIpBgpRouteReflectorGrp", 1716),
          ("bitbasicrcStatBgpGrp", 1717),
          ("bitbasicrcStatBgpPeerTbl", 1718),
          ("bitbgpPeerTbl", 427),
          ("bitbrdgStp", 331),
          ("bitbrdgStpPortTbl", 332),
          ("bitcardType", 1536),
          ("bitcheckStackcli", 995),
          ("bitcliAddTraceModuleCli", 529),
          ("bitcliDefaultBannerCli", 514),
          ("bitcliDefaultLoginCli", 516),
          ("bitcliDefaultPasswordCli", 517),
          ("bitcliDisplayMotdCli", 515),
          ("bitcliKillTelnetSessionCli", 613),
          ("bitcliLogCli", 932),
          ("bitcliMacFlapTimeLimitSetCli", 464),
          ("bitcliMonitorDurationCli", 512),
          ("bitcliMonitorIntervalCli", 513),
          ("bitcliMoreCli", 518),
          ("bitcliPasswordDefLockoutCli", 1017),
          ("bitcliPasswordHistoryCli", 1016),
          ("bitcliPasswordL4ADMINCli", 510),
          ("bitcliPasswordL4OPERCli", 507),
          ("bitcliPasswordLockoutCli", 1015),
          ("bitcliPasswordOPERCli", 508),
          ("bitcliPasswordROCli", 500),
          ("bitcliPasswordRWACli", 505),
          ("bitcliPasswordRWCli", 504),
          ("bitcliPasswordRWL1Cli", 501),
          ("bitcliPasswordRWL2Cli", 502),
          ("bitcliPasswordRWL3Cli", 503),
          ("bitcliPasswordSLBADMINCli", 509),
          ("bitcliPasswordSLBOPERCli", 506),
          ("bitcliPasswordSSLADMINCli", 511),
          ("bitcliPromptCli", 644),
          ("bitcliRemTraceModuleCli", 534),
          ("bitcliResetConsoleShellCli", 612),
          ("bitcliRloginLimitCli", 519),
          ("bitcliScrsizeCli", 520),
          ("bitcliStartAtmConsoleCli", 569),
          ("bitcliTelnetLimitCli", 521),
          ("bitcliTimeoutCli", 522),
          ("bitcliWriteRtcCli", 465),
          ("bitcliinstallCli", 582),
          ("bitclilsCli", 759),
          ("bitclimkdirCli", 760),
          ("bitclisourceCli", 601),
          ("bitconvert11configCli", 572),
          ("bitcopyimageCli", 573),
          ("bitcppStatscli", 992),
          ("bitcwccliCli", 574),
          ("bitdebugcliSlotXCli", 549),
          ("bitdeleteimageCli", 595),
          ("bitdellBASE", 3),
          ("bitdiagCliPingSnoopAddPortsCli", 738),
          ("bitdiagCliPingSnoopCreateCli", 739),
          ("bitdiagCliPingSnoopDeleteCli", 740),
          ("bitdiagCliPingSnoopEnaDisCli", 741),
          ("bitdiagCliPingSnoopRemPortsCli", 742),
          ("bitdirectoryCli", 576),
          ("bitdot1dStaticEntry", 273),
          ("bitdot1xAuthConfigTbl", 922),
          ("bitdot1xPaePortTbl", 923),
          ("bitdot1xPaeSystemGrp", 921),
          ("bitdot3adAggPortTbl", 917),
          ("bitdot3adAggTbl", 916),
          ("bitdot3adrcPortLacpTbl", 924),
          ("bitdumpFacli", 999),
          ("bitdumpcliArCli", 609),
          ("bitdvmrpInterfaceTbl", 353),
          ("bitfbuffDumpcli", 993),
          ("bitfeature", 256),
          ("bithiddenModeCli", 676),
          ("bitifTbl", 308),
          ("bitifTblMlt", 314),
          ("bitifTestTbl", 309),
          ("bitigmpInterfaceTbl", 336),
          ("bitigmpOldCliDelAccessListCli", 624),
          ("bitigmpOldCliSetAccessModeCli", 625),
          ("bitipCliSetBgpRedistApplyCli", 681),
          ("bitipCliSetIsisRedistApply", 1063),
          ("bitipCliSetOspfAcceptApplyCli", 699),
          ("bitipCliSetPimDbgLogCli", 726),
          ("bitipCliSetPimDbgTraceCli", 725),
          ("bitipCliSetPimGlobBrDisCli", 734),
          ("bitipCliSetPimGlobBrEnlCli", 735),
          ("bitipCliSetPimdebugAssertCli", 720),
          ("bitipCliSetPimdebugBootstrapCli", 721),
          ("bitipCliSetPimdebugGroupCli", 722),
          ("bitipCliSetPimdebugHelloCli", 723),
          ("bitipCliSetPimdebugJoinpruneCli", 724),
          ("bitipCliSetPimdebugRcvCli", 731),
          ("bitipCliSetPimdebugRegStopCli", 728),
          ("bitipCliSetPimdebugRegisterCli", 727),
          ("bitipCliSetPimdebugRpadvCli", 729),
          ("bitipCliSetPimdebugSendCli", 730),
          ("bitipClidisabletraceforSGentryCli", 733),
          ("bitipClienabletraceforSGentryCli", 732),
          ("bitipMRouteInterfaceTbl", 352),
          ("bitipSetOspfRedistApplyCli", 746),
          ("bitipSetPimdebugSourceCli", 749),
          ("bitipfCliClearStatsCli", 466),
          ("bitipfFilterModifyDs", 341),
          ("bitipmcCliSetDvmGlobDisCli", 708),
          ("bitipmcCliSetDvmGlobEnlCli", 709),
          ("bitipmcCliSetDvmGlobFwdCacheTimeoutCli", 715),
          ("bitipmcCliSetDvmGlobLeafTimeoutCli", 710),
          ("bitipmcCliSetDvmGlobLogEnlCli", 934),
          ("bitipmcCliSetDvmGlobNbrProbeIntCli", 712),
          ("bitipmcCliSetDvmGlobNbrTimeoutCli", 711),
          ("bitipmcCliSetDvmGlobRouteDiscTimeoutCli", 717),
          ("bitipmcCliSetDvmGlobRouteExpireTimeoutCli", 716),
          ("bitipmcCliSetDvmGlobRouteSwitchTimeoutCli", 718),
          ("bitipmcCliSetDvmGlobShowNextHopTableCli", 719),
          ("bitipmcCliSetDvmGlobTrapEnlCli", 933),
          ("bitipmcCliSetDvmGlobTrigUpdateIntervalCli", 713),
          ("bitipmcCliSetDvmGlobUpdateIntervalCli", 714),
          ("bitipxCliAddRouteEntryCli", 492),
          ("bitipxCliDeleteRouteEntryCli", 493),
          ("bitipxCliDisableGnsCli", 467),
          ("bitipxCliDisableRipCli", 468),
          ("bitipxCliDisableRoute", 477),
          ("bitipxCliDisableRouteCli", 469),
          ("bitipxCliDisableSapCli", 470),
          ("bitipxCliEnableGnsCli", 474),
          ("bitipxCliEnableRipCli", 475),
          ("bitipxCliEnableRouteCli", 478),
          ("bitipxCliEnableSapCli", 476),
          ("bitipxCliPingCli", 589),
          ("bitipxCliRipSetDefDelayTimerCli", 471),
          ("bitipxCliRipSetDefIntervalTimerCli", 473),
          ("bitipxCliRipSetDelayTimerCli", 480),
          ("bitipxCliRipSetHoldMultiplierCli", 472),
          ("bitipxCliRipSetIntervalTimerCli", 481),
          ("bitipxCliRipStateCli", 479),
          ("bitipxCliSapAddStaticEntryCli", 482),
          ("bitipxCliSapDeleteStaticEntryCli", 483),
          ("bitipxCliSapSetDefDelayTimerCli", 484),
          ("bitipxCliSapSetDefHoldMultiplierCli", 485),
          ("bitipxCliSapSetDefIntervalTimerCli", 486),
          ("bitipxCliSapSetDelayTimerCli", 490),
          ("bitipxCliSapSetGnsTieBreakerCli", 488),
          ("bitipxCliSapSetHoldMultiplierCli", 487),
          ("bitipxCliSapSetIntervalTimerCli", 491),
          ("bitipxCliSapStateCli", 489),
          ("bitipxCliSetLearnAfterIncrementEnableDisableCli", 499),
          ("bitipxCliSetMaxRouteCli", 494),
          ("bitipxCliSetMaxSapCli", 495),
          ("bitipxCliSetMaxStaticRouteCli", 496),
          ("bitipxCliSetMaxStaticSapCli", 497),
          ("bitipxCliSetNetBiosEnableDisableCli", 498),
          ("bitisisCircLevelTbl", 1057),
          ("bitisisCircTbl", 1056),
          ("bitisisCliClearLsdbCli", 1169),
          ("bitisisCliClearStatsCli", 1076),
          ("bitisisManAreaAddrTbl", 1058),
          ("bitisisSummAddrTbl", 1059),
          ("bitisisSysLevelTbl", 1062),
          ("bitisisSysObjectGrp", 1061),
          ("bitlastbitnum", 2047),
          ("bitlinkTrapWSMCli", 667),
          ("bitlogCliHostCreateCli", 523),
          ("bitlogCliHostDeleteCli", 525),
          ("bitlogCliMsgOnPcmciaCli", 528),
          ("bitlogCliSetTransferFileNameCli", 524),
          ("bitlogcliClearCli", 751),
          ("bitlogcliLevelCli", 526),
          ("bitlogcliScreenCli", 527),
          ("bitlogcliWriteCli", 752),
          ("bitmemShowcli", 994),
          ("bitmgMirror", 307),
          ("bitmldCacheTbl", 1634),
          ("bitmldInterfaceTbl", 1633),
          ("bitmltCliClearIstStatsCli", 610),
          ("bitmplsClearLspLdpRsvpStats", 1156),
          ("bitmplsLsrObjectsGrp", 1150),
          ("bitmplsTeObjectsGrp", 1151),
          ("bitmplsTunnelHopTbl", 1152),
          ("bitmplsTunnelResourceTbl", 1154),
          ("bitmplsTunnelTbl", 1153),
          ("bitmplspingcli", 1162),
          ("bitoldieCli", 680),
          ("bitospfAreaAggregateTbl", 360),
          ("bitospfAreaTbl", 361),
          ("bitospfCli", 445),
          ("bitospfCliDelIfMd5KeyCli", 698),
          ("bitospfCliDelVirtIfMd5KeyCli", 745),
          ("bitospfCliModRangeEffectCli", 693),
          ("bitospfCliModRangeMetricCli", 694),
          ("bitospfCliSetDefMetricGrpCli", 700),
          ("bitospfCliSetIfMd5KeyCli", 696),
          ("bitospfCliSetMd5KeyTxCli", 697),
          ("bitospfCliSetRfc1583CompatibilityCli", 985),
          ("bitospfCliSetSpfHoldDownTimeCli", 701),
          ("bitospfCliSetSpfRunCli", 702),
          ("bitospfCliSetTrapCli", 703),
          ("bitospfCliSetVirtIfMd5KeyCli", 744),
          ("bitospfCliSetVirtIfMd5KeyTxCli", 695),
          ("bitospfGeneralGrp", 362),
          ("bitospfHostTbl", 363),
          ("bitospfIfMetricTbl", 364),
          ("bitospfIfTbl", 365),
          ("bitospfNbrTbl", 366),
          ("bitospfSetAutoVlinkCli", 747),
          ("bitospfSetTrapCli", 748),
          ("bitospfStubAreaTbl", 367),
          ("bitospfVirtIfTbl", 368),
          ("bitpackageEnd", 255),
          ("bitpackageStart", 32),
          ("bitpeercliCli", 587),
          ("bitpimCandidateRPTbl", 354),
          ("bitpimGrp", 355),
          ("bitpimInterfaceTbl", 356),
          ("bitpimVirtualNbrTbl", 1012),
          ("bitpingcliCli", 588),
          ("bitpolicyRipAnnounceRemoveFromRtSrcCli", 692),
          ("bitpolicySetOspfAcceptPrecedenceCli", 686),
          ("bitpolicySetOspfAnnouncePrecedenceCli", 687),
          ("bitpolicySetRipAcceptPrecedenceCli", 688),
          ("bitpolicySetRipAcceptRipIfListCli", 689),
          ("bitpolicySetRipAnnounceOutIfListCli", 690),
          ("bitpolicySetRipAnnouncePrecedenceCli", 691),
          ("bitportCliClearStatsCli", 611),
          ("bitportCliFlushIgmpCli", 630),
          ("bitportCliRipManualTrigCli", 654),
          ("bitportCliSetClockSourceCli", 656),
          ("bitportCliSetCpLimitCli", 655),
          ("bitportCliSetFlowControlCli", 657),
          ("bitportCliSetFlowControlPause0Cli", 658),
          ("bitportCliSetFlowControlPauseTimeCli", 659),
          ("bitportCliSetLinktrapCli", 629),
          ("bitportCliSetLoopDetectCli", 750),
          ("bitportCliSetPimIfCreateCli", 736),
          ("bitportCliSetPimIfTypeCli", 737),
          ("bitportCliSetSffdCli", 660),
          ("bitportCliUnknownMacDiscAddAllowMacCli", 914),
          ("bitposCliCardResetCli", 626),
          ("bitposCliSetDebugCli", 627),
          ("bitposCliSetLEDCli", 649),
          ("bitposCliSetPosConsoleCli", 628),
          ("bitposIfTbl", 315),
          ("bitppeGetPortIsLinkUpcli", 997),
          ("bitpppBridgeConfigTbl", 316),
          ("bitpppIpConfigTbl", 317),
          ("bitpppLinkConfigTbl", 318),
          ("bitpppLqrConfigTbl", 319),
          ("bitpwccliCli", 590),
          ("bitrc2k16x1000BaseSXBB", 1557),
          ("bitrc2k16x1000BaseT", 1561),
          ("bitrc2k1x10GBaseLR", 1562),
          ("bitrc2k1x10GBaseLW", 1560),
          ("bitrc2k24x100BaseFX", 1540),
          ("bitrc2k24x100BaseTX", 1539),
          ("bitrc2k2xOC12", 1541),
          ("bitrc2k32x100BaseTX", 1559),
          ("bitrc2k32x100BaseTXM", 1565),
          ("bitrc2k48x100BaseTX", 1538),
          ("bitrc2k48x100BaseTXM", 1564),
          ("bitrc2k61AlteonSAM", 1585),
          ("bitrc2k62AlteonSAM", 1586),
          ("bitrc2k6xPOS", 1556),
          ("bitrc2k6xPOSM", 1570),
          ("bitrc2k8x1000BaseIC", 1554),
          ("bitrc2k8x1000BaseICM", 1566),
          ("bitrc2k8x1000BaseLXBB", 1545),
          ("bitrc2k8x1000BaseLXRBB", 1547),
          ("bitrc2k8x1000BaseSXBB", 1544),
          ("bitrc2k8x1000BaseSXBBM", 1567),
          ("bitrc2k8x1000BaseSXRBB", 1546),
          ("bitrc2k8x1000BaseT", 1558),
          ("bitrc2k8x1000BaseTM", 1568),
          ("bitrc2k8x1000BaseXDBB", 1548),
          ("bitrc2k8xATM", 1542),
          ("bitrc2k8xATMM", 1569),
          ("bitrc2k8xOC3", 1549),
          ("bitrc2kAlteonASFM", 1584),
          ("bitrc2kAlteonLP", 1583),
          ("bitrc2kAlteonWSM", 1563),
          ("bitrc2kAtm1483ElanTbl", 327),
          ("bitrc2kAtmPortTbl", 328),
          ("bitrc2kAtmPvcTbl", 329),
          ("bitrc2kAtmSioCardConfigTbl", 330),
          ("bitrc2kBootConfigTbl", 294),
          ("bitrc2kCPU", 1537),
          ("bitrc2kCPURed", 1679),
          ("bitrc2kCardTbl", 298),
          ("bitrc2kCopyFileGrp", 257),
          ("bitrc2kCpuEthernetPortIpv6RouteTbl", 1617),
          ("bitrc2kCpuEthernetPortRouteTbl", 295),
          ("bitrc2kCpuEthernetPortTbl", 296),
          ("bitrc2kCpuSerialPortTbl", 297),
          ("bitrc2kDeviceGlobalTbl", 258),
          ("bitrc2kMdaCardTbl", 299),
          ("bitrc2kMg16x100BaseFX", 1552),
          ("bitrc2kMg32x100BaseTX", 1550),
          ("bitrc2kMg48x100BaseTC", 1555),
          ("bitrc2kMg48x100BaseTX", 1551),
          ("bitrc2kMg8x1000BaseIC", 1553),
          ("bitrc2kPP8300-24x1000BaseTX", 1580),
          ("bitrc2kPP8300-48x100BaseTX", 1581),
          ("bitrc2kPP8300-48x100BaseTXPOE", 1582),
          ("bitrc2kPP8300-CPU8x1000BaseSFP", 1579),
          ("bitrc2kPR12X10GBaseXLRS", 1660),
          ("bitrc2kPR30X1000BaseSXBB", 1642),
          ("bitrc2kPR34xXGRS", 1661),
          ("bitrc2kPR3X10GBaseGbic", 1644),
          ("bitrc2kPR3X10GBaseXZW", 1643),
          ("bitrc2kPR48X1000BaseTX", 1641),
          ("bitrc2kPR48x1000BaseGBRS", 1658),
          ("bitrc2kPR48x1000BaseGTRS", 1659),
          ("bitrc2kPRE12X10GBaseXL", 1682),
          ("bitrc2kPRE34xXG", 1683),
          ("bitrc2kPRE48x1000BaseGB", 1680),
          ("bitrc2kPRE48x1000BaseGT", 1681),
          ("bitrc2kQosEgressQosToDscpTbl", 279),
          ("bitrc2kQosEgressQosToTagTbl", 280),
          ("bitrc2kQosIngressDscpToQosTbl", 281),
          ("bitrc2kQosIngressTagToQosTbl", 282),
          ("bitrc2kQosQosTbl", 283),
          ("bitrc2kQosTrafficProfileTbl", 342),
          ("bitrc2kRMON", 1543),
          ("bitrcArpExtEntDoProxy", 442),
          ("bitrcArpExtTbl", 379),
          ("bitrcBgpPeerCli", 682),
          ("bitrcBridgeAutoLearnTbl", 284),
          ("bitrcBridgeFdbProtectTbl", 977),
          ("bitrcBridgeManualEditTbl", 285),
          ("bitrcBridgeStaticMulticastTbl", 287),
          ("bitrcBridgeUnknownMacDiscardTbl", 286),
          ("bitrcCfmGlobalsGrp", 1053),
          ("bitrcCfmMaintenanceAssociationTbl", 1126),
          ("bitrcCfmMaintenanceDomainTbl", 1125),
          ("bitrcCfmMaintenanceEndPointTbl", 1127),
          ("bitrcChassisGrp", 300),
          ("bitrcChassisPort", 310),
          ("bitrcCliCustomGrp", 259),
          ("bitrcCliGrp", 260),
          ("bitrcCliGrpWsm", 261),
          ("bitrcDiagMacConvSteeringTbl", 262),
          ("bitrcDiagMirrorByPortTbl", 263),
          ("bitrcDiagPcapAdvancedFilterTbl", 438),
          ("bitrcDiagPcapFilterTbl", 439),
          ("bitrcDiagPcapGrp", 440),
          ("bitrcDiagPortConvSteeringTbl", 264),
          ("bitrcDumpSnmpcli", 996),
          ("bitrcErrorGrp", 456),
          ("bitrcFdbTbl", 304),
          ("bitrcFilterTbl", 305),
          ("bitrcIgmpAccessTbl", 337),
          ("bitrcIgmpChannelLimitTbl", 449),
          ("bitrcIgmpGlobalParamsGrp", 453),
          ("bitrcIgmpIgapGlobalGrp", 452),
          ("bitrcIgmpIgapServiceAbilityTbl", 457),
          ("bitrcIgmpInterfaceExtnTbl", 338),
          ("bitrcIgmpSenderTbl", 339),
          ("bitrcIgmpSsmGlobalGrp", 451),
          ("bitrcIgmpSsmTbl", 450),
          ("bitrcIgmpStaticTbl", 340),
          ("bitrcIpAddrTbl", 380),
          ("bitrcIpArpCliAddCli", 461),
          ("bitrcIpArpCliClearPortCli", 459),
          ("bitrcIpArpCliClearVlanCli", 460),
          ("bitrcIpArpCliDeleteCli", 462),
          ("bitrcIpAsPathAccessListTbl", 418),
          ("bitrcIpBfdGeneralGrp", 1710),
          ("bitrcIpBgpAggregateTbl", 428),
          ("bitrcIpBgpConfederationGrp", 429),
          ("bitrcIpBgpGeneralGrp", 430),
          ("bitrcIpBgpNetworkTbl", 431),
          ("bitrcIpBgpPeerCli", 743),
          ("bitrcIpBgpPeerGroupTbl", 432),
          ("bitrcIpBgpPeerTbl", 433),
          ("bitrcIpBgpPeerTblIpvpnLiteCap", 1160),
          ("bitrcIpBgpPeerTblVpnv4Address", 1161),
          ("bitrcIpBgpRouteReflectorGrp", 434),
          ("bitrcIpCommunityAccessListTbl", 419),
          ("bitrcIpConfBfdTbl", 1709),
          ("bitrcIpConfDhcpTbl", 375),
          ("bitrcIpConfDvmrpTbl", 377),
          ("bitrcIpConfGlobalGrp", 381),
          ("bitrcIpConfGlobalRouteDiscovery", 443),
          ("bitrcIpConfIcmpRdiscTbl", 382),
          ("bitrcIpConfOspfAreaAggregateTbl", 387),
          ("bitrcIpConfOspfAreaTbl", 388),
          ("bitrcIpConfOspfTbl", 389),
          ("bitrcIpConfRsmltTbl", 930),
          ("bitrcIpConfTbl", 383),
          ("bitrcIpDhcpForwardTbl", 376),
          ("bitrcIpDvmrpGrp", 378),
          ("bitrcIpFilterBaseListTbl", 343),
          ("bitrcIpFilterGlobalListTbl", 344),
          ("bitrcIpFilterMediaDevTbl", 345),
          ("bitrcIpFilterMediaStreamTbl", 346),
          ("bitrcIpFilterPortTbl", 347),
          ("bitrcIpFilterTbl", 348),
          ("bitrcIpFlowTbl", 374),
          ("bitrcIpGenPolicyGrp", 420),
          ("bitrcIpMplsInterfaceTbl", 1604),
          ("bitrcIpMulticastArpTbl", 384),
          ("bitrcIpMulticastMacFloodingCliEnableCli", 463),
          ("bitrcIpMulticastSoftwareForwardingGrp", 349),
          ("bitrcIpMulticastSquareSmltGrp", 1677),
          ("bitrcIpMulticastTimedPruneTbl", 350),
          ("bitrcIpOspfInFilterTbl", 421),
          ("bitrcIpPimGlobalGrp", 390),
          ("bitrcIpPimInterfaceTbl", 707),
          ("bitrcIpPimStaticRPTbl", 391),
          ("bitrcIpPimTbl", 392),
          ("bitrcIpPrefixListTbl", 422),
          ("bitrcIpRedistributeTbl", 423),
          ("bitrcIpRedistributeTblIsis", 1721),
          ("bitrcIpResourceUsageGlobalGrp", 706),
          ("bitrcIpRipInterfaceTbl", 393),
          ("bitrcIpRouteCliClearPortCli", 607),
          ("bitrcIpRouteCliClearVlanCli", 608),
          ("bitrcIpRoutePolicyStrEnt", 424),
          ("bitrcIpRoutePolicyTbl", 425),
          ("bitrcIpRoutePrefTbl", 385),
          ("bitrcIpRouteTbl", 394),
          ("bitrcIpRsmltCli", 926),
          ("bitrcIpStaticRouteTbl", 395),
          ("bitrcIpUdpConfBroadcastIntfTbl", 397),
          ("bitrcIpUdpPortFwdListTbl", 398),
          ("bitrcIpUdpPortFwdTbl", 399),
          ("bitrcIpUdpProtocolTbl", 400),
          ("bitrcIpVpnRouteDistTbl", 1157),
          ("bitrcIpVpnRouteTargetTbl", 1158),
          ("bitrcIpVrrpCliClearPortCli", 704),
          ("bitrcIpVrrpCliClearVlanCli", 705),
          ("bitrcIpfixCollectorTbl", 1647),
          ("bitrcIpfixConfGlobalGrp", 1645),
          ("bitrcIpfixConfPortTbl", 1648),
          ("bitrcIpfixConfSlotTbl", 1646),
          ("bitrcIpfixExporterStatsTbl", 1650),
          ("bitrcIpfixHashStatsTbl", 1649),
          ("bitrcIpv6AddrTbl", 1608),
          ("bitrcIpv6ConfDhcpTbl", 1673),
          ("bitrcIpv6DhcpForwardTbl", 1672),
          ("bitrcIpv6InterfaceTbl", 1607),
          ("bitrcIpv6MltMcastDistributionGrp", 1625),
          ("bitrcIpv6MulticastSoftwareForwarding", 1623),
          ("bitrcIpv6MulticastTimedPruneTbl", 1622),
          ("bitrcIpv6NetToPhysicalTbl", 1612),
          ("bitrcIpv6Ospfv3AreaAggregateTbl", 1638),
          ("bitrcIpv6Ospfv3AreaTbl", 1639),
          ("bitrcIpv6Ospfv3GeneralGrp", 1640),
          ("bitrcIpv6Ospfv3IfTbl", 1636),
          ("bitrcIpv6Ospfv3NbmaNbrTbl", 1635),
          ("bitrcIpv6Ospfv3VirtIf", 1637),
          ("bitrcIpv6PimGlobalGrp", 1618),
          ("bitrcIpv6PimInterfaceTbl", 1624),
          ("bitrcIpv6PimStaticRPTbl", 1620),
          ("bitrcIpv6PimTbl", 1619),
          ("bitrcIpv6PrefixTbl", 1609),
          ("bitrcIpv6ResourceUsageGlobalGrp", 1626),
          ("bitrcIpv6RouterAdvertTbl", 1610),
          ("bitrcIpv6RsmltOperTbl", 1678),
          ("bitrcIpv6Scalars", 1613),
          ("bitrcIpv6StaticRouteTbl", 1611),
          ("bitrcIpv6VrrpOperTbl", 1674),
          ("bitrcIpv6pimVirtualNbrTbl", 1621),
          ("bitrcIpxAddrTbl", 405),
          ("bitrcIpxBrouterTbl", 406),
          ("bitrcIpxCliPolicyTraceRipInFilterAddCli", 537),
          ("bitrcIpxCliPolicyTraceRipInFilterDeleteCli", 538),
          ("bitrcIpxCliPolicyTraceRipOutFilterAddCli", 535),
          ("bitrcIpxCliPolicyTraceRipOutFilterDeleteCli", 536),
          ("bitrcIpxCliPolicyTraceSapInFilterAddCli", 541),
          ("bitrcIpxCliPolicyTraceSapInFilterDeleteCli", 542),
          ("bitrcIpxCliPolicyTraceSapOutFilterAddCli", 539),
          ("bitrcIpxCliPolicyTraceSapOutFilterDelete", 540),
          ("bitrcIpxGrp", 407),
          ("bitrcIpxPolicyListTbl", 408),
          ("bitrcIpxPolicyNetTbl", 409),
          ("bitrcIpxPolicyServTbl", 410),
          ("bitrcIpxRipInFilterTbl", 411),
          ("bitrcIpxRipInterfaceTbl", 412),
          ("bitrcIpxRipOutFilterTbl", 413),
          ("bitrcIpxRsmltOperTbl", 931),
          ("bitrcIpxSapInFilterTbl", 414),
          ("bitrcIpxSapInterfaceTbl", 415),
          ("bitrcIpxSapOutFilterTbl", 416),
          ("bitrcIsidEndptCvidClientMipTbl", 1168),
          ("bitrcIsisCircuitPlsbTbl", 1166),
          ("bitrcIsisCircuitTbl", 1055),
          ("bitrcIsisGlobalGrp", 1060),
          ("bitrcIsisPlsbTbl", 1165),
          ("bitrcL2RedundancyGrp", 301),
          ("bitrcLacpGlobalGrp", 918),
          ("bitrcLinkFlapDetectGrp", 313),
          ("bitrcLoadModule", 275),
          ("bitrcMltGrp", 276),
          ("bitrcMltMcastDistributionGrp", 351),
          ("bitrcMltTbl", 277),
          ("bitrcMplsGlobalGrp", 1603),
          ("bitrcMplsIpStaticFecTbl", 1155),
          ("bitrcMplsNotificationObjectsGrp", 1149),
          ("bitrcNtpGlobalGrp", 357),
          ("bitrcNtpKeyTbl", 358),
          ("bitrcNtpServerTbl", 359),
          ("bitrcPlsbGlobalGrp", 1164),
          ("bitrcPomConfGlobalGrp", 1664),
          ("bitrcPortLacpTbl", 919),
          ("bitrcPortLock", 269),
          ("bitrcPortPcapTbl", 441),
          ("bitrcPortRemoteMirroringTbl", 925),
          ("bitrcPortVLacpTbl", 920),
          ("bitrcPosLineConfigTbl", 320),
          ("bitrcPosPppIpxTbl", 321),
          ("bitrcPosSioCardConfigTbl", 322),
          ("bitrcPosSonetTbl", 323),
          ("bitrcPrFilterAceIpv6DstAddrTbl", 1615),
          ("bitrcPrFilterAceIpv6NextHdr", 1616),
          ("bitrcPrFilterAceIpv6SrcAddrTbl", 1614),
          ("bitrcPrQosEgressQosToExpTbl", 1662),
          ("bitrcPrQosIngressExpToQosTbl", 1663),
          ("bitrcRadiusGlobalGrp", 372),
          ("bitrcRadiusGlobalSnmpGrp", 454),
          ("bitrcRadiusServerTbl", 373),
          ("bitrcRateLimitTbl", 311),
          ("bitrcRecReservTbl", 302),
          ("bitrcRipExtTbl", 386),
          ("bitrcSltPortTbl", 455),
          ("bitrcSshGlobalGrp", 437),
          ("bitrcStatBgpGrp", 435),
          ("bitrcStatBgpPeerTbl", 436),
          ("bitrcStaticTbl", 306),
          ("bitrcStg", 333),
          ("bitrcStgPortTbl", 334),
          ("bitrcStgTbl", 335),
          ("bitrcSvlanGlobalGrp", 288),
          ("bitrcSvlanTbl", 289),
          ("bitrcSysAccPolicyTbl", 265),
          ("bitrcSysDnsServer", 978),
          ("bitrcSysGrp", 266),
          ("bitrcSysTrapTbl", 267),
          ("bitrcSyslogGlobalGrp", 270),
          ("bitrcSyslogHostTbl", 271),
          ("bitrcTacacsGlobalGrp", 1021),
          ("bitrcTacacsServerTbl", 1022),
          ("bitrcTengIfTbl", 312),
          ("bitrcTftpGrp", 303),
          ("bitrcUserSetTimeGrp", 268),
          ("bitrcVlanDsapSsapTbl", 458),
          ("bitrcVlanMacTbl", 290),
          ("bitrcVlanPortTbl", 291),
          ("bitrcVlanTbl", 292),
          ("bitrcVrfConfigTbl", 1605),
          ("bitrcVrfIfConfigTbl", 1606),
          ("bitrcVrfIpVpnTbl", 1159),
          ("bitrcVrrpExtScalarsGrp", 1675),
          ("bitrcVrrpTmpOperationsGrp", 1676),
          ("bitrcWebGrp", 272),
          ("bitreadWSMCommunityCli", 663),
          ("bitrebootcliCli", 570),
          ("bitreloginCli", 583),
          ("bitresetSamCli", 677),
          ("bitresetcliCli", 596),
          ("bitripCliCliSetIfRxModeCli", 755),
          ("bitripCliDisableCli", 551),
          ("bitripCliDomainCli", 552),
          ("bitripCliEnableCli", 553),
          ("bitripCliReceiveCli", 558),
          ("bitripCliSendCli", 559),
          ("bitripCliSetDefImportMetCli", 550),
          ("bitripCliSetHoldDownCli", 557),
          ("bitripCliSetIfDomainCli", 554),
          ("bitripCliSetIfRxModeCli", 555),
          ("bitripCliSetIfTxModeCli", 556),
          ("bitripSetIfTxModeCli", 756),
          ("bitripUpdateCli", 757),
          ("bitrlogincliCli", 597),
          ("bitrshcliCli", 598),
          ("bits5EnMsTopInfoGrp", 426),
          ("bitsamBootBackupCli", 678),
          ("bitsamShowClusterCli", 679),
          ("bitsavecliCli", 599),
          ("bitsetAutoTraceHighPercentageCli", 753),
          ("bitsetAutoTraceHighTrackDurationCli", 531),
          ("bitsetAutoTraceLowPercentageCli", 532),
          ("bitsetAutoTraceLowTrackDurationCli", 533),
          ("bitsetAutoTraceStatusCli", 530),
          ("bitsetMgmtIpCli", 661),
          ("bitsetWsmAutoResetCli", 662),
          ("bitshowDumpAsicAddrCli", 577),
          ("bitshowHwDumpAllCli", 578),
          ("bitshowIcmpStatCli", 579),
          ("bitshowInetStatCli", 580),
          ("bitshowInspectCli", 581),
          ("bitshowOspfDumpAllCli", 585),
          ("bitshowOspfDumpSpfInfoCli", 586),
          ("bitshowPpcli", 998),
          ("bitshowRarCheckStatsCli", 592),
          ("bitshowRarErrorCountCli", 593),
          ("bitshowSpyReportCli", 602),
          ("bitshowSwipDumpCli", 603),
          ("bitshowTaskTraceCli", 606),
          ("bitshowdateCli", 575),
          ("bitshowopDumpErrorRegsCli", 584),
          ("bitshowrarDumpRegsCli", 591),
          ("bitshowrcDumpIfIndexCli", 594),
          ("bitsmltMacTblSend", 278),
          ("bitsnmpCliViewSetCli", 769),
          ("bitsnmpCommunityTbl", 274),
          ("bitsnmpLogSnmp", 1657),
          ("bitsysCliAccessEnableCli", 631),
          ("bitsysCliSetChassisMTUCli", 643),
          ("bitsysCliSetContactCli", 639),
          ("bitsysCliSetHighPerformanceCli", 640),
          ("bitsysCliSetHighThroughputModeCli", 987),
          ("bitsysCliSetLocationCli", 641),
          ("bitsysCliSetMessageControlCli", 642),
          ("bitsysCliSetMgmtVirtualIpCli", 638),
          ("bitsysCliSetOctapidResetThresholdCli", 645),
          ("bitsysCliSetRmonAlarmCreateCli", 560),
          ("bitsysCliSetRmonAlarmDeleteCli", 561),
          ("bitsysCliSetRmonEtherCreateCli", 566),
          ("bitsysCliSetRmonEtherDeleteCli", 567),
          ("bitsysCliSetRmonEtherOwnerCli", 568),
          ("bitsysCliSetRmonEventCreateCli", 562),
          ("bitsysCliSetRmonEventDeleteCli", 563),
          ("bitsysCliSetRmonHistoryCreateCli", 564),
          ("bitsysCliSetRmonHistoryDeleteCli", 565),
          ("bitsysCliSetSendTrapConfigCli", 758),
          ("bitsysCliSetSmltPortUnlockTimeoutCli", 646),
          ("bitsysCliSetSnmpForceTrapSenderCli", 635),
          ("bitsysCliSetSnmpServerCli", 929),
          ("bitsysCliSetUdpChecksumCli", 988),
          ("bitsysCliSetUdpSourceCli", 647),
          ("bitsysCliV3AccessSetCli", 764),
          ("bitsysCliV3GrpSetCli", 763),
          ("bitsysCliV3NotifyFilterSetCli", 927),
          ("bitsysCliV3NotifyProfileSetCli", 928),
          ("bitsysCliV3NotifySetCli", 765),
          ("bitsysCliV3TargetParamsSetCli", 768),
          ("bitsysCliV3TargetSetCli", 767),
          ("bitsysCliV3UserSetCli", 762),
          ("bitsysCliV3ViewSetCli", 766),
          ("bitsysResetSnmpCommStringsCli", 637),
          ("bitsysResetWebPasswdCli", 636),
          ("bitsyslogFacilityCli", 669),
          ("bittcpConnTbl", 396),
          ("bittelnetSamCli", 761),
          ("bittelnetWsmCli", 668),
          ("bittelnetcliCli", 604),
          ("bittoptreeCli", 571),
          ("bittraceCliPolicyCli", 548),
          ("bittracecliClearCli", 543),
          ("bittracecliFilterCli", 546),
          ("bittracecliGrepStringCli", 547),
          ("bittracecliLevelCli", 544),
          ("bittracecliOffCli", 545),
          ("bittracecliScreenCli", 754),
          ("bittracerouteCli", 605),
          ("bittrapWSMCommunityCli", 665),
          ("bittunnelIfTbl", 1631),
          ("bittunnelInetConfigTbl", 1632),
          ("bitvlanCliChangeIpxEncapCli", 651),
          ("bitvlanCliFlushIeeeVlanDiscardRecordsCli", 648),
          ("bitvlanCliIeeeAgingDisableCli", 633),
          ("bitvlanCliIeeeAgingEnableCli", 634),
          ("bitvlanCliIeeeDiscardRecordAgingCli", 632),
          ("bitvlanCliRipManualTrigCli", 650),
          ("bitvlanCliSetFdbTimeOutCli", 652),
          ("bitvlanCliSyncFdbCli", 653),
          ("bitvlanEncap", 417),
          ("bitvlanTbl", 293),
          ("bitvrrpAssoIpAddrTbl", 401),
          ("bitvrrpOperTbl", 402),
          ("bitvrrpOperationsGrp", 403),
          ("bitvrrpRouterStatsTbl", 404),
          ("bitwfPgmGrp", 369),
          ("bitwfPgmIfTbl", 370),
          ("bitwfPgmSessionTbl", 371),
          ("bitwriteWSMCommunityCli", 664),
          ("bitwsmBootChoiceCli", 672),
          ("bitwsmDumpCardDBCli", 673),
          ("bitwsmDumpIPTableCli", 674),
          ("bitwsmDumpTableCli", 675),
          ("bitwsmResetCli", 670),
          ("bitwsmSaveCli", 671))
    )


_RcLicenseNumber_Type.__name__ = "Integer32"
_RcLicenseNumber_Object = MibScalar
rcLicenseNumber = _RcLicenseNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 56, 1),
    _RcLicenseNumber_Type()
)
rcLicenseNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLicenseNumber.setStatus("current")


class _RcLicenseBitMap_Type(OctetString):
    """Custom type rcLicenseBitMap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_RcLicenseBitMap_Type.__name__ = "OctetString"
_RcLicenseBitMap_Object = MibScalar
rcLicenseBitMap = _RcLicenseBitMap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 56, 2),
    _RcLicenseBitMap_Type()
)
rcLicenseBitMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcLicenseBitMap.setStatus("current")
_RcEap_ObjectIdentity = ObjectIdentity
rcEap = _RcEap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 57)
)
_RcFdb_ObjectIdentity = ObjectIdentity
rcFdb = _RcFdb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 60)
)
_RcGlobalMacFilterTable_Object = MibTable
rcGlobalMacFilterTable = _RcGlobalMacFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 60, 1)
)
if mibBuilder.loadTexts:
    rcGlobalMacFilterTable.setStatus("current")
_RcGlobalMacFilterEntry_Object = MibTableRow
rcGlobalMacFilterEntry = _RcGlobalMacFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 60, 1, 1)
)
rcGlobalMacFilterEntry.setIndexNames(
    (0, "RAPID-CITY", "rcGlobalMacFilterAddress"),
)
if mibBuilder.loadTexts:
    rcGlobalMacFilterEntry.setStatus("current")
_RcGlobalMacFilterAddress_Type = MacAddress
_RcGlobalMacFilterAddress_Object = MibTableColumn
rcGlobalMacFilterAddress = _RcGlobalMacFilterAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 60, 1, 1, 1),
    _RcGlobalMacFilterAddress_Type()
)
rcGlobalMacFilterAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcGlobalMacFilterAddress.setStatus("current")
_RcGlobalMacFilterRowStatus_Type = RowStatus
_RcGlobalMacFilterRowStatus_Object = MibTableColumn
rcGlobalMacFilterRowStatus = _RcGlobalMacFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 60, 1, 1, 2),
    _RcGlobalMacFilterRowStatus_Type()
)
rcGlobalMacFilterRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcGlobalMacFilterRowStatus.setStatus("current")
_RcIpv6_ObjectIdentity = ObjectIdentity
rcIpv6 = _RcIpv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62)
)
_RcIpv6Mib_ObjectIdentity = ObjectIdentity
rcIpv6Mib = _RcIpv6Mib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1)
)
_RcIpv6Notifications_ObjectIdentity = ObjectIdentity
rcIpv6Notifications = _RcIpv6Notifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 0)
)
_RcIpv6Objects_ObjectIdentity = ObjectIdentity
rcIpv6Objects = _RcIpv6Objects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1)
)
_RcIpv6Scalars_ObjectIdentity = ObjectIdentity
rcIpv6Scalars = _RcIpv6Scalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 1)
)


class _RcIpv6IcmpErrorInterval_Type(Integer32):
    """Custom type rcIpv6IcmpErrorInterval based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpv6IcmpErrorInterval_Type.__name__ = "Integer32"
_RcIpv6IcmpErrorInterval_Object = MibScalar
rcIpv6IcmpErrorInterval = _RcIpv6IcmpErrorInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 1, 1),
    _RcIpv6IcmpErrorInterval_Type()
)
rcIpv6IcmpErrorInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6IcmpErrorInterval.setStatus("current")


class _RcIpv6MulticastAdminStatus_Type(TruthValue):
    """Custom type rcIpv6MulticastAdminStatus based on TruthValue"""


_RcIpv6MulticastAdminStatus_Object = MibScalar
rcIpv6MulticastAdminStatus = _RcIpv6MulticastAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 1, 2),
    _RcIpv6MulticastAdminStatus_Type()
)
rcIpv6MulticastAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6MulticastAdminStatus.setStatus("current")


class _RcIpv6IcmpNetUnreach_Type(TruthValue):
    """Custom type rcIpv6IcmpNetUnreach based on TruthValue"""


_RcIpv6IcmpNetUnreach_Object = MibScalar
rcIpv6IcmpNetUnreach = _RcIpv6IcmpNetUnreach_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 1, 3),
    _RcIpv6IcmpNetUnreach_Type()
)
rcIpv6IcmpNetUnreach.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6IcmpNetUnreach.setStatus("current")


class _RcIpv6IcmpRedirectMsg_Type(TruthValue):
    """Custom type rcIpv6IcmpRedirectMsg based on TruthValue"""


_RcIpv6IcmpRedirectMsg_Object = MibScalar
rcIpv6IcmpRedirectMsg = _RcIpv6IcmpRedirectMsg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 1, 4),
    _RcIpv6IcmpRedirectMsg_Type()
)
rcIpv6IcmpRedirectMsg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6IcmpRedirectMsg.setStatus("current")


class _RcIpv6IcmpErrorQuota_Type(Integer32):
    """Custom type rcIpv6IcmpErrorQuota based on Integer32"""
    defaultValue = 50

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2000000),
    )


_RcIpv6IcmpErrorQuota_Type.__name__ = "Integer32"
_RcIpv6IcmpErrorQuota_Object = MibScalar
rcIpv6IcmpErrorQuota = _RcIpv6IcmpErrorQuota_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 1, 5),
    _RcIpv6IcmpErrorQuota_Type()
)
rcIpv6IcmpErrorQuota.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6IcmpErrorQuota.setStatus("current")
_RcIpv6PrefixListTableSize_Type = Unsigned32
_RcIpv6PrefixListTableSize_Object = MibScalar
rcIpv6PrefixListTableSize = _RcIpv6PrefixListTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 1, 8),
    _RcIpv6PrefixListTableSize_Type()
)
rcIpv6PrefixListTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6PrefixListTableSize.setStatus("current")
_RcIpv6InterfaceTable_Object = MibTable
rcIpv6InterfaceTable = _RcIpv6InterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcIpv6InterfaceTable.setStatus("current")
_RcIpv6InterfaceEntry_Object = MibTableRow
rcIpv6InterfaceEntry = _RcIpv6InterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1)
)
rcIpv6InterfaceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6InterfaceIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpv6InterfaceEntry.setStatus("current")
_RcIpv6InterfaceIfIndex_Type = InterfaceIndex
_RcIpv6InterfaceIfIndex_Object = MibTableColumn
rcIpv6InterfaceIfIndex = _RcIpv6InterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 1),
    _RcIpv6InterfaceIfIndex_Type()
)
rcIpv6InterfaceIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6InterfaceIfIndex.setStatus("current")
_RcIpv6InterfaceIdentifier_Type = Ipv6AddressIfIdentifier
_RcIpv6InterfaceIdentifier_Object = MibTableColumn
rcIpv6InterfaceIdentifier = _RcIpv6InterfaceIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 2),
    _RcIpv6InterfaceIdentifier_Type()
)
rcIpv6InterfaceIdentifier.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceIdentifier.setStatus("current")


class _RcIpv6InterfaceIdentifierLength_Type(Integer32):
    """Custom type rcIpv6InterfaceIdentifierLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RcIpv6InterfaceIdentifierLength_Type.__name__ = "Integer32"
_RcIpv6InterfaceIdentifierLength_Object = MibTableColumn
rcIpv6InterfaceIdentifierLength = _RcIpv6InterfaceIdentifierLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 3),
    _RcIpv6InterfaceIdentifierLength_Type()
)
rcIpv6InterfaceIdentifierLength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceIdentifierLength.setStatus("current")
if mibBuilder.loadTexts:
    rcIpv6InterfaceIdentifierLength.setUnits("bits")


class _RcIpv6InterfaceDescr_Type(DisplayString):
    """Custom type rcIpv6InterfaceDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIpv6InterfaceDescr_Type.__name__ = "DisplayString"
_RcIpv6InterfaceDescr_Object = MibTableColumn
rcIpv6InterfaceDescr = _RcIpv6InterfaceDescr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 4),
    _RcIpv6InterfaceDescr_Type()
)
rcIpv6InterfaceDescr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceDescr.setStatus("current")


class _RcIpv6InterfaceVlanId_Type(Integer32):
    """Custom type rcIpv6InterfaceVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpv6InterfaceVlanId_Type.__name__ = "Integer32"
_RcIpv6InterfaceVlanId_Object = MibTableColumn
rcIpv6InterfaceVlanId = _RcIpv6InterfaceVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 5),
    _RcIpv6InterfaceVlanId_Type()
)
rcIpv6InterfaceVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceVlanId.setStatus("current")


class _RcIpv6InterfaceType_Type(Integer32):
    """Custom type rcIpv6InterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 1),
          ("pointToMultipoint", 3),
          ("pointToPoint", 2))
    )


_RcIpv6InterfaceType_Type.__name__ = "Integer32"
_RcIpv6InterfaceType_Object = MibTableColumn
rcIpv6InterfaceType = _RcIpv6InterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 6),
    _RcIpv6InterfaceType_Type()
)
rcIpv6InterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6InterfaceType.setStatus("current")


class _RcIpv6InterfaceReasmMaxSize_Type(Integer32):
    """Custom type rcIpv6InterfaceReasmMaxSize based on Integer32"""
    defaultValue = 1500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1280, 1500),
        ValueRangeConstraint(9600, 9600),
    )


_RcIpv6InterfaceReasmMaxSize_Type.__name__ = "Integer32"
_RcIpv6InterfaceReasmMaxSize_Object = MibTableColumn
rcIpv6InterfaceReasmMaxSize = _RcIpv6InterfaceReasmMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 7),
    _RcIpv6InterfaceReasmMaxSize_Type()
)
rcIpv6InterfaceReasmMaxSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceReasmMaxSize.setStatus("current")
_RcIpv6InterfacePhysAddress_Type = PhysAddress
_RcIpv6InterfacePhysAddress_Object = MibTableColumn
rcIpv6InterfacePhysAddress = _RcIpv6InterfacePhysAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 8),
    _RcIpv6InterfacePhysAddress_Type()
)
rcIpv6InterfacePhysAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6InterfacePhysAddress.setStatus("current")


class _RcIpv6InterfaceAdminStatus_Type(TruthValue):
    """Custom type rcIpv6InterfaceAdminStatus based on TruthValue"""


_RcIpv6InterfaceAdminStatus_Object = MibTableColumn
rcIpv6InterfaceAdminStatus = _RcIpv6InterfaceAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 9),
    _RcIpv6InterfaceAdminStatus_Type()
)
rcIpv6InterfaceAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceAdminStatus.setStatus("current")


class _RcIpv6InterfaceOperStatus_Type(Integer32):
    """Custom type rcIpv6InterfaceOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcIpv6InterfaceOperStatus_Type.__name__ = "Integer32"
_RcIpv6InterfaceOperStatus_Object = MibTableColumn
rcIpv6InterfaceOperStatus = _RcIpv6InterfaceOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 10),
    _RcIpv6InterfaceOperStatus_Type()
)
rcIpv6InterfaceOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6InterfaceOperStatus.setStatus("current")


class _RcIpv6InterfaceReachableTime_Type(Integer32):
    """Custom type rcIpv6InterfaceReachableTime based on Integer32"""
    defaultValue = 30000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_RcIpv6InterfaceReachableTime_Type.__name__ = "Integer32"
_RcIpv6InterfaceReachableTime_Object = MibTableColumn
rcIpv6InterfaceReachableTime = _RcIpv6InterfaceReachableTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 11),
    _RcIpv6InterfaceReachableTime_Type()
)
rcIpv6InterfaceReachableTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceReachableTime.setStatus("current")


class _RcIpv6InterfaceRetransmitTime_Type(Integer32):
    """Custom type rcIpv6InterfaceRetransmitTime based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_RcIpv6InterfaceRetransmitTime_Type.__name__ = "Integer32"
_RcIpv6InterfaceRetransmitTime_Object = MibTableColumn
rcIpv6InterfaceRetransmitTime = _RcIpv6InterfaceRetransmitTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 12),
    _RcIpv6InterfaceRetransmitTime_Type()
)
rcIpv6InterfaceRetransmitTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceRetransmitTime.setStatus("current")


class _RcIpv6InterfaceMulticastAdminStatus_Type(TruthValue):
    """Custom type rcIpv6InterfaceMulticastAdminStatus based on TruthValue"""


_RcIpv6InterfaceMulticastAdminStatus_Object = MibTableColumn
rcIpv6InterfaceMulticastAdminStatus = _RcIpv6InterfaceMulticastAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 13),
    _RcIpv6InterfaceMulticastAdminStatus_Type()
)
rcIpv6InterfaceMulticastAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceMulticastAdminStatus.setStatus("current")
_RcIpv6InterfaceRowStatus_Type = RowStatus
_RcIpv6InterfaceRowStatus_Object = MibTableColumn
rcIpv6InterfaceRowStatus = _RcIpv6InterfaceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 14),
    _RcIpv6InterfaceRowStatus_Type()
)
rcIpv6InterfaceRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceRowStatus.setStatus("current")


class _RcIpv6InterfaceDhcpEnabled_Type(TruthValue):
    """Custom type rcIpv6InterfaceDhcpEnabled based on TruthValue"""


_RcIpv6InterfaceDhcpEnabled_Object = MibTableColumn
rcIpv6InterfaceDhcpEnabled = _RcIpv6InterfaceDhcpEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 15),
    _RcIpv6InterfaceDhcpEnabled_Type()
)
rcIpv6InterfaceDhcpEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceDhcpEnabled.setStatus("current")


class _RcIpv6InterfaceMacOffset_Type(Integer32):
    """Custom type rcIpv6InterfaceMacOffset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcIpv6InterfaceMacOffset_Type.__name__ = "Integer32"
_RcIpv6InterfaceMacOffset_Object = MibTableColumn
rcIpv6InterfaceMacOffset = _RcIpv6InterfaceMacOffset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 2, 1, 16),
    _RcIpv6InterfaceMacOffset_Type()
)
rcIpv6InterfaceMacOffset.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6InterfaceMacOffset.setStatus("current")
_RcIpv6AddressTable_Object = MibTable
rcIpv6AddressTable = _RcIpv6AddressTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3)
)
if mibBuilder.loadTexts:
    rcIpv6AddressTable.setStatus("current")
_RcIpv6AddressEntry_Object = MibTableRow
rcIpv6AddressEntry = _RcIpv6AddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1)
)
rcIpv6AddressEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6AddressIfIndex"),
    (0, "RAPID-CITY", "rcIpv6AddressAddr"),
)
if mibBuilder.loadTexts:
    rcIpv6AddressEntry.setStatus("current")
_RcIpv6AddressIfIndex_Type = InterfaceIndex
_RcIpv6AddressIfIndex_Object = MibTableColumn
rcIpv6AddressIfIndex = _RcIpv6AddressIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 1),
    _RcIpv6AddressIfIndex_Type()
)
rcIpv6AddressIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6AddressIfIndex.setStatus("current")
_RcIpv6AddressAddr_Type = Ipv6Address
_RcIpv6AddressAddr_Object = MibTableColumn
rcIpv6AddressAddr = _RcIpv6AddressAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 2),
    _RcIpv6AddressAddr_Type()
)
rcIpv6AddressAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6AddressAddr.setStatus("current")


class _RcIpv6AddressType_Type(Integer32):
    """Custom type rcIpv6AddressType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anycast", 2),
          ("unicast", 1))
    )


_RcIpv6AddressType_Type.__name__ = "Integer32"
_RcIpv6AddressType_Object = MibTableColumn
rcIpv6AddressType = _RcIpv6AddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 3),
    _RcIpv6AddressType_Type()
)
rcIpv6AddressType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6AddressType.setStatus("current")


class _RcIpv6AddressPrefixLength_Type(Integer32):
    """Custom type rcIpv6AddressPrefixLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6AddressPrefixLength_Type.__name__ = "Integer32"
_RcIpv6AddressPrefixLength_Object = MibTableColumn
rcIpv6AddressPrefixLength = _RcIpv6AddressPrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 4),
    _RcIpv6AddressPrefixLength_Type()
)
rcIpv6AddressPrefixLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6AddressPrefixLength.setStatus("current")
_RcIpv6AddressPrefix_Type = RowPointer
_RcIpv6AddressPrefix_Object = MibTableColumn
rcIpv6AddressPrefix = _RcIpv6AddressPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 5),
    _RcIpv6AddressPrefix_Type()
)
rcIpv6AddressPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6AddressPrefix.setStatus("current")
_RcIpv6AddressOrigin_Type = IpAddressOriginTC
_RcIpv6AddressOrigin_Object = MibTableColumn
rcIpv6AddressOrigin = _RcIpv6AddressOrigin_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 6),
    _RcIpv6AddressOrigin_Type()
)
rcIpv6AddressOrigin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6AddressOrigin.setStatus("current")


class _RcIpv6AddressStatus_Type(IpAddressStatusTC):
    """Custom type rcIpv6AddressStatus based on IpAddressStatusTC"""


_RcIpv6AddressStatus_Object = MibTableColumn
rcIpv6AddressStatus = _RcIpv6AddressStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 7),
    _RcIpv6AddressStatus_Type()
)
rcIpv6AddressStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6AddressStatus.setStatus("current")
_RcIpv6AddressCreated_Type = TimeStamp
_RcIpv6AddressCreated_Object = MibTableColumn
rcIpv6AddressCreated = _RcIpv6AddressCreated_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 8),
    _RcIpv6AddressCreated_Type()
)
rcIpv6AddressCreated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6AddressCreated.setStatus("current")
_RcIpv6AddressLastChanged_Type = TimeStamp
_RcIpv6AddressLastChanged_Object = MibTableColumn
rcIpv6AddressLastChanged = _RcIpv6AddressLastChanged_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 9),
    _RcIpv6AddressLastChanged_Type()
)
rcIpv6AddressLastChanged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6AddressLastChanged.setStatus("current")
_RcIpv6AddressRowStatus_Type = RowStatus
_RcIpv6AddressRowStatus_Object = MibTableColumn
rcIpv6AddressRowStatus = _RcIpv6AddressRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 3, 1, 10),
    _RcIpv6AddressRowStatus_Type()
)
rcIpv6AddressRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6AddressRowStatus.setStatus("current")
_RcIpv6PrefixTable_Object = MibTable
rcIpv6PrefixTable = _RcIpv6PrefixTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4)
)
if mibBuilder.loadTexts:
    rcIpv6PrefixTable.setStatus("current")
_RcIpv6PrefixEntry_Object = MibTableRow
rcIpv6PrefixEntry = _RcIpv6PrefixEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1)
)
rcIpv6PrefixEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6PrefixIfIndex"),
    (0, "RAPID-CITY", "rcIpv6PrefixAddr"),
    (0, "RAPID-CITY", "rcIpv6PrefixLength"),
)
if mibBuilder.loadTexts:
    rcIpv6PrefixEntry.setStatus("current")
_RcIpv6PrefixIfIndex_Type = InterfaceIndex
_RcIpv6PrefixIfIndex_Object = MibTableColumn
rcIpv6PrefixIfIndex = _RcIpv6PrefixIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 1),
    _RcIpv6PrefixIfIndex_Type()
)
rcIpv6PrefixIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6PrefixIfIndex.setStatus("current")
_RcIpv6PrefixAddr_Type = Ipv6Address
_RcIpv6PrefixAddr_Object = MibTableColumn
rcIpv6PrefixAddr = _RcIpv6PrefixAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 2),
    _RcIpv6PrefixAddr_Type()
)
rcIpv6PrefixAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6PrefixAddr.setStatus("current")


class _RcIpv6PrefixLength_Type(Integer32):
    """Custom type rcIpv6PrefixLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6PrefixLength_Type.__name__ = "Integer32"
_RcIpv6PrefixLength_Object = MibTableColumn
rcIpv6PrefixLength = _RcIpv6PrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 3),
    _RcIpv6PrefixLength_Type()
)
rcIpv6PrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6PrefixLength.setStatus("current")


class _RcIpv6PrefixVlanId_Type(Integer32):
    """Custom type rcIpv6PrefixVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIpv6PrefixVlanId_Type.__name__ = "Integer32"
_RcIpv6PrefixVlanId_Object = MibTableColumn
rcIpv6PrefixVlanId = _RcIpv6PrefixVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 4),
    _RcIpv6PrefixVlanId_Type()
)
rcIpv6PrefixVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6PrefixVlanId.setStatus("current")


class _RcIpv6PrefixUseDefaultVal_Type(Integer32):
    """Custom type rcIpv6PrefixUseDefaultVal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("infinite", 4),
          ("no-advertise", 5),
          ("none", 1),
          ("preferred-life", 3),
          ("valid-life", 2))
    )


_RcIpv6PrefixUseDefaultVal_Type.__name__ = "Integer32"
_RcIpv6PrefixUseDefaultVal_Object = MibTableColumn
rcIpv6PrefixUseDefaultVal = _RcIpv6PrefixUseDefaultVal_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 5),
    _RcIpv6PrefixUseDefaultVal_Type()
)
rcIpv6PrefixUseDefaultVal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixUseDefaultVal.setStatus("current")


class _RcIpv6PrefixValidLife_Type(Integer32):
    """Custom type rcIpv6PrefixValidLife based on Integer32"""
    defaultValue = 2592000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_RcIpv6PrefixValidLife_Type.__name__ = "Integer32"
_RcIpv6PrefixValidLife_Object = MibTableColumn
rcIpv6PrefixValidLife = _RcIpv6PrefixValidLife_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 6),
    _RcIpv6PrefixValidLife_Type()
)
rcIpv6PrefixValidLife.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixValidLife.setStatus("deprecated")


class _RcIpv6PrefixPreferredLife_Type(Integer32):
    """Custom type rcIpv6PrefixPreferredLife based on Integer32"""
    defaultValue = 604800

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_RcIpv6PrefixPreferredLife_Type.__name__ = "Integer32"
_RcIpv6PrefixPreferredLife_Object = MibTableColumn
rcIpv6PrefixPreferredLife = _RcIpv6PrefixPreferredLife_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 7),
    _RcIpv6PrefixPreferredLife_Type()
)
rcIpv6PrefixPreferredLife.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixPreferredLife.setStatus("deprecated")
_RcIpv6PrefixAtValidLife_Type = DateAndTime
_RcIpv6PrefixAtValidLife_Object = MibTableColumn
rcIpv6PrefixAtValidLife = _RcIpv6PrefixAtValidLife_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 8),
    _RcIpv6PrefixAtValidLife_Type()
)
rcIpv6PrefixAtValidLife.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixAtValidLife.setStatus("current")
_RcIpv6PrefixAtPreferredLife_Type = DateAndTime
_RcIpv6PrefixAtPreferredLife_Object = MibTableColumn
rcIpv6PrefixAtPreferredLife = _RcIpv6PrefixAtPreferredLife_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 9),
    _RcIpv6PrefixAtPreferredLife_Type()
)
rcIpv6PrefixAtPreferredLife.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixAtPreferredLife.setStatus("current")


class _RcIpv6PrefixInfinite_Type(TruthValue):
    """Custom type rcIpv6PrefixInfinite based on TruthValue"""


_RcIpv6PrefixInfinite_Object = MibTableColumn
rcIpv6PrefixInfinite = _RcIpv6PrefixInfinite_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 10),
    _RcIpv6PrefixInfinite_Type()
)
rcIpv6PrefixInfinite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixInfinite.setStatus("deprecated")


class _RcIpv6PrefixOnLinkFlag_Type(TruthValue):
    """Custom type rcIpv6PrefixOnLinkFlag based on TruthValue"""


_RcIpv6PrefixOnLinkFlag_Object = MibTableColumn
rcIpv6PrefixOnLinkFlag = _RcIpv6PrefixOnLinkFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 11),
    _RcIpv6PrefixOnLinkFlag_Type()
)
rcIpv6PrefixOnLinkFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixOnLinkFlag.setStatus("current")


class _RcIpv6PrefixAutoFlag_Type(TruthValue):
    """Custom type rcIpv6PrefixAutoFlag based on TruthValue"""


_RcIpv6PrefixAutoFlag_Object = MibTableColumn
rcIpv6PrefixAutoFlag = _RcIpv6PrefixAutoFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 12),
    _RcIpv6PrefixAutoFlag_Type()
)
rcIpv6PrefixAutoFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixAutoFlag.setStatus("current")


class _RcIpv6PrefixAddressEui_Type(Integer32):
    """Custom type rcIpv6PrefixAddressEui based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("eui-not-used", 1),
          ("eui-used-with-ul-complement", 2),
          ("eui-used-without-ul-complement", 3))
    )


_RcIpv6PrefixAddressEui_Type.__name__ = "Integer32"
_RcIpv6PrefixAddressEui_Object = MibTableColumn
rcIpv6PrefixAddressEui = _RcIpv6PrefixAddressEui_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 13),
    _RcIpv6PrefixAddressEui_Type()
)
rcIpv6PrefixAddressEui.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixAddressEui.setStatus("current")


class _RcIpv6PrefixNoAdvertise_Type(TruthValue):
    """Custom type rcIpv6PrefixNoAdvertise based on TruthValue"""


_RcIpv6PrefixNoAdvertise_Object = MibTableColumn
rcIpv6PrefixNoAdvertise = _RcIpv6PrefixNoAdvertise_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 14),
    _RcIpv6PrefixNoAdvertise_Type()
)
rcIpv6PrefixNoAdvertise.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6PrefixNoAdvertise.setStatus("current")
_RcIpv6PrefixRowStatus_Type = RowStatus
_RcIpv6PrefixRowStatus_Object = MibTableColumn
rcIpv6PrefixRowStatus = _RcIpv6PrefixRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 15),
    _RcIpv6PrefixRowStatus_Type()
)
rcIpv6PrefixRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6PrefixRowStatus.setStatus("current")


class _RcIpv6PrefixValidLifetime_Type(Unsigned32):
    """Custom type rcIpv6PrefixValidLifetime based on Unsigned32"""
    defaultValue = 2592000

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_RcIpv6PrefixValidLifetime_Type.__name__ = "Unsigned32"
_RcIpv6PrefixValidLifetime_Object = MibTableColumn
rcIpv6PrefixValidLifetime = _RcIpv6PrefixValidLifetime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 16),
    _RcIpv6PrefixValidLifetime_Type()
)
rcIpv6PrefixValidLifetime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6PrefixValidLifetime.setStatus("current")


class _RcIpv6PrefixPreferredLifetime_Type(Unsigned32):
    """Custom type rcIpv6PrefixPreferredLifetime based on Unsigned32"""
    defaultValue = 604800

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_RcIpv6PrefixPreferredLifetime_Type.__name__ = "Unsigned32"
_RcIpv6PrefixPreferredLifetime_Object = MibTableColumn
rcIpv6PrefixPreferredLifetime = _RcIpv6PrefixPreferredLifetime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 4, 1, 17),
    _RcIpv6PrefixPreferredLifetime_Type()
)
rcIpv6PrefixPreferredLifetime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6PrefixPreferredLifetime.setStatus("current")
_RcIpv6RouterAdvertTable_Object = MibTable
rcIpv6RouterAdvertTable = _RcIpv6RouterAdvertTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5)
)
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertTable.setStatus("current")
_RcIpv6RouterAdvertEntry_Object = MibTableRow
rcIpv6RouterAdvertEntry = _RcIpv6RouterAdvertEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1)
)
rcIpv6RouterAdvertEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6RouterAdvertIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertEntry.setStatus("current")
_RcIpv6RouterAdvertIfIndex_Type = InterfaceIndex
_RcIpv6RouterAdvertIfIndex_Object = MibTableColumn
rcIpv6RouterAdvertIfIndex = _RcIpv6RouterAdvertIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 1),
    _RcIpv6RouterAdvertIfIndex_Type()
)
rcIpv6RouterAdvertIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertIfIndex.setStatus("current")


class _RcIpv6RouterAdvertSendAdverts_Type(TruthValue):
    """Custom type rcIpv6RouterAdvertSendAdverts based on TruthValue"""


_RcIpv6RouterAdvertSendAdverts_Object = MibTableColumn
rcIpv6RouterAdvertSendAdverts = _RcIpv6RouterAdvertSendAdverts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 2),
    _RcIpv6RouterAdvertSendAdverts_Type()
)
rcIpv6RouterAdvertSendAdverts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertSendAdverts.setStatus("current")


class _RcIpv6RouterAdvertUseDefaultVal_Type(Integer32):
    """Custom type rcIpv6RouterAdvertUseDefaultVal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("dad-ns-num", 9),
          ("default-life-time", 5),
          ("hop-limit", 6),
          ("managed-flag", 7),
          ("max-interval", 3),
          ("min-interval", 4),
          ("none", 1),
          ("other-config-flag", 8),
          ("send-advertisement", 2))
    )


_RcIpv6RouterAdvertUseDefaultVal_Type.__name__ = "Integer32"
_RcIpv6RouterAdvertUseDefaultVal_Object = MibTableColumn
rcIpv6RouterAdvertUseDefaultVal = _RcIpv6RouterAdvertUseDefaultVal_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 3),
    _RcIpv6RouterAdvertUseDefaultVal_Type()
)
rcIpv6RouterAdvertUseDefaultVal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertUseDefaultVal.setStatus("current")


class _RcIpv6RouterAdvertMaxInterval_Type(Integer32):
    """Custom type rcIpv6RouterAdvertMaxInterval based on Integer32"""
    defaultValue = 600

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 1800),
    )


_RcIpv6RouterAdvertMaxInterval_Type.__name__ = "Integer32"
_RcIpv6RouterAdvertMaxInterval_Object = MibTableColumn
rcIpv6RouterAdvertMaxInterval = _RcIpv6RouterAdvertMaxInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 4),
    _RcIpv6RouterAdvertMaxInterval_Type()
)
rcIpv6RouterAdvertMaxInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertMaxInterval.setStatus("current")


class _RcIpv6RouterAdvertMinInterval_Type(Integer32):
    """Custom type rcIpv6RouterAdvertMinInterval based on Integer32"""
    defaultValue = 200

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 1350),
    )


_RcIpv6RouterAdvertMinInterval_Type.__name__ = "Integer32"
_RcIpv6RouterAdvertMinInterval_Object = MibTableColumn
rcIpv6RouterAdvertMinInterval = _RcIpv6RouterAdvertMinInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 5),
    _RcIpv6RouterAdvertMinInterval_Type()
)
rcIpv6RouterAdvertMinInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertMinInterval.setStatus("current")


class _RcIpv6RouterAdvertReachableTime_Type(Integer32):
    """Custom type rcIpv6RouterAdvertReachableTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 36000000),
    )


_RcIpv6RouterAdvertReachableTime_Type.__name__ = "Integer32"
_RcIpv6RouterAdvertReachableTime_Object = MibTableColumn
rcIpv6RouterAdvertReachableTime = _RcIpv6RouterAdvertReachableTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 6),
    _RcIpv6RouterAdvertReachableTime_Type()
)
rcIpv6RouterAdvertReachableTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertReachableTime.setStatus("current")


class _RcIpv6RouterAdvertRetransmitTimer_Type(Integer32):
    """Custom type rcIpv6RouterAdvertRetransmitTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 36000000),
    )


_RcIpv6RouterAdvertRetransmitTimer_Type.__name__ = "Integer32"
_RcIpv6RouterAdvertRetransmitTimer_Object = MibTableColumn
rcIpv6RouterAdvertRetransmitTimer = _RcIpv6RouterAdvertRetransmitTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 7),
    _RcIpv6RouterAdvertRetransmitTimer_Type()
)
rcIpv6RouterAdvertRetransmitTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertRetransmitTimer.setStatus("current")


class _RcIpv6RouterAdvertDefaultLifeTime_Type(Integer32):
    """Custom type rcIpv6RouterAdvertDefaultLifeTime based on Integer32"""
    defaultValue = 1800

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(4, 9000),
    )


_RcIpv6RouterAdvertDefaultLifeTime_Type.__name__ = "Integer32"
_RcIpv6RouterAdvertDefaultLifeTime_Object = MibTableColumn
rcIpv6RouterAdvertDefaultLifeTime = _RcIpv6RouterAdvertDefaultLifeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 8),
    _RcIpv6RouterAdvertDefaultLifeTime_Type()
)
rcIpv6RouterAdvertDefaultLifeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertDefaultLifeTime.setStatus("current")


class _RcIpv6RouterAdvertCurHopLimit_Type(Integer32):
    """Custom type rcIpv6RouterAdvertCurHopLimit based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpv6RouterAdvertCurHopLimit_Type.__name__ = "Integer32"
_RcIpv6RouterAdvertCurHopLimit_Object = MibTableColumn
rcIpv6RouterAdvertCurHopLimit = _RcIpv6RouterAdvertCurHopLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 9),
    _RcIpv6RouterAdvertCurHopLimit_Type()
)
rcIpv6RouterAdvertCurHopLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertCurHopLimit.setStatus("current")


class _RcIpv6RouterAdvertManagedFlag_Type(TruthValue):
    """Custom type rcIpv6RouterAdvertManagedFlag based on TruthValue"""


_RcIpv6RouterAdvertManagedFlag_Object = MibTableColumn
rcIpv6RouterAdvertManagedFlag = _RcIpv6RouterAdvertManagedFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 10),
    _RcIpv6RouterAdvertManagedFlag_Type()
)
rcIpv6RouterAdvertManagedFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertManagedFlag.setStatus("current")


class _RcIpv6RouterAdvertOtherConfigFlag_Type(TruthValue):
    """Custom type rcIpv6RouterAdvertOtherConfigFlag based on TruthValue"""


_RcIpv6RouterAdvertOtherConfigFlag_Object = MibTableColumn
rcIpv6RouterAdvertOtherConfigFlag = _RcIpv6RouterAdvertOtherConfigFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 11),
    _RcIpv6RouterAdvertOtherConfigFlag_Type()
)
rcIpv6RouterAdvertOtherConfigFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertOtherConfigFlag.setStatus("current")


class _RcIpv6RouterAdvertDadNsNum_Type(Integer32):
    """Custom type rcIpv6RouterAdvertDadNsNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 600),
    )


_RcIpv6RouterAdvertDadNsNum_Type.__name__ = "Integer32"
_RcIpv6RouterAdvertDadNsNum_Object = MibTableColumn
rcIpv6RouterAdvertDadNsNum = _RcIpv6RouterAdvertDadNsNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 12),
    _RcIpv6RouterAdvertDadNsNum_Type()
)
rcIpv6RouterAdvertDadNsNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertDadNsNum.setStatus("current")
_RcIpv6RouterAdvertLinkMTU_Type = Unsigned32
_RcIpv6RouterAdvertLinkMTU_Object = MibTableColumn
rcIpv6RouterAdvertLinkMTU = _RcIpv6RouterAdvertLinkMTU_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 5, 1, 13),
    _RcIpv6RouterAdvertLinkMTU_Type()
)
rcIpv6RouterAdvertLinkMTU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RouterAdvertLinkMTU.setStatus("current")
_RcIpv6StaticRouteTable_Object = MibTable
rcIpv6StaticRouteTable = _RcIpv6StaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6)
)
if mibBuilder.loadTexts:
    rcIpv6StaticRouteTable.setStatus("current")
_RcIpv6StaticRouteEntry_Object = MibTableRow
rcIpv6StaticRouteEntry = _RcIpv6StaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1)
)
rcIpv6StaticRouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6StaticRouteDest"),
    (0, "RAPID-CITY", "rcIpv6StaticRoutePrefixLength"),
    (0, "RAPID-CITY", "rcIpv6StaticRouteNextHop"),
    (0, "RAPID-CITY", "rcIpv6StaticRouteIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpv6StaticRouteEntry.setStatus("current")
_RcIpv6StaticRouteDest_Type = Ipv6Address
_RcIpv6StaticRouteDest_Object = MibTableColumn
rcIpv6StaticRouteDest = _RcIpv6StaticRouteDest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 1),
    _RcIpv6StaticRouteDest_Type()
)
rcIpv6StaticRouteDest.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6StaticRouteDest.setStatus("current")


class _RcIpv6StaticRoutePrefixLength_Type(Integer32):
    """Custom type rcIpv6StaticRoutePrefixLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6StaticRoutePrefixLength_Type.__name__ = "Integer32"
_RcIpv6StaticRoutePrefixLength_Object = MibTableColumn
rcIpv6StaticRoutePrefixLength = _RcIpv6StaticRoutePrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 2),
    _RcIpv6StaticRoutePrefixLength_Type()
)
rcIpv6StaticRoutePrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6StaticRoutePrefixLength.setStatus("current")
_RcIpv6StaticRouteNextHop_Type = Ipv6Address
_RcIpv6StaticRouteNextHop_Object = MibTableColumn
rcIpv6StaticRouteNextHop = _RcIpv6StaticRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 3),
    _RcIpv6StaticRouteNextHop_Type()
)
rcIpv6StaticRouteNextHop.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6StaticRouteNextHop.setStatus("current")
_RcIpv6StaticRouteIfIndex_Type = InterfaceIndex
_RcIpv6StaticRouteIfIndex_Object = MibTableColumn
rcIpv6StaticRouteIfIndex = _RcIpv6StaticRouteIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 4),
    _RcIpv6StaticRouteIfIndex_Type()
)
rcIpv6StaticRouteIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6StaticRouteIfIndex.setStatus("current")


class _RcIpv6StaticRouteDistance_Type(Integer32):
    """Custom type rcIpv6StaticRouteDistance based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcIpv6StaticRouteDistance_Type.__name__ = "Integer32"
_RcIpv6StaticRouteDistance_Object = MibTableColumn
rcIpv6StaticRouteDistance = _RcIpv6StaticRouteDistance_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 5),
    _RcIpv6StaticRouteDistance_Type()
)
rcIpv6StaticRouteDistance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6StaticRouteDistance.setStatus("current")


class _RcIpv6StaticRouteStatus_Type(Integer32):
    """Custom type rcIpv6StaticRouteStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notReachable", 1),
          ("reachableInRtm", 4),
          ("reachableNotInRtm", 3),
          ("tryToResolve", 2))
    )


_RcIpv6StaticRouteStatus_Type.__name__ = "Integer32"
_RcIpv6StaticRouteStatus_Object = MibTableColumn
rcIpv6StaticRouteStatus = _RcIpv6StaticRouteStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 6),
    _RcIpv6StaticRouteStatus_Type()
)
rcIpv6StaticRouteStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6StaticRouteStatus.setStatus("current")


class _RcIpv6StaticRoutePreference_Type(Integer32):
    """Custom type rcIpv6StaticRoutePreference based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIpv6StaticRoutePreference_Type.__name__ = "Integer32"
_RcIpv6StaticRoutePreference_Object = MibTableColumn
rcIpv6StaticRoutePreference = _RcIpv6StaticRoutePreference_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 7),
    _RcIpv6StaticRoutePreference_Type()
)
rcIpv6StaticRoutePreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6StaticRoutePreference.setStatus("current")


class _RcIpv6StaticRouteEnable_Type(TruthValue):
    """Custom type rcIpv6StaticRouteEnable based on TruthValue"""


_RcIpv6StaticRouteEnable_Object = MibTableColumn
rcIpv6StaticRouteEnable = _RcIpv6StaticRouteEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 8),
    _RcIpv6StaticRouteEnable_Type()
)
rcIpv6StaticRouteEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6StaticRouteEnable.setStatus("current")
_RcIpv6StaticRouteRowStatus_Type = RowStatus
_RcIpv6StaticRouteRowStatus_Object = MibTableColumn
rcIpv6StaticRouteRowStatus = _RcIpv6StaticRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 6, 1, 9),
    _RcIpv6StaticRouteRowStatus_Type()
)
rcIpv6StaticRouteRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6StaticRouteRowStatus.setStatus("current")
_RcIpv6NetToPhysicalTable_Object = MibTable
rcIpv6NetToPhysicalTable = _RcIpv6NetToPhysicalTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7)
)
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalTable.setStatus("current")
_RcIpv6NetToPhysicalEntry_Object = MibTableRow
rcIpv6NetToPhysicalEntry = _RcIpv6NetToPhysicalEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1)
)
rcIpv6NetToPhysicalEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6NetToPhysicalIfIndex"),
    (0, "RAPID-CITY", "rcIpv6NetToPhysicalNetAddress"),
)
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalEntry.setStatus("current")
_RcIpv6NetToPhysicalIfIndex_Type = InterfaceIndex
_RcIpv6NetToPhysicalIfIndex_Object = MibTableColumn
rcIpv6NetToPhysicalIfIndex = _RcIpv6NetToPhysicalIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1, 1),
    _RcIpv6NetToPhysicalIfIndex_Type()
)
rcIpv6NetToPhysicalIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalIfIndex.setStatus("current")
_RcIpv6NetToPhysicalNetAddress_Type = Ipv6Address
_RcIpv6NetToPhysicalNetAddress_Object = MibTableColumn
rcIpv6NetToPhysicalNetAddress = _RcIpv6NetToPhysicalNetAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1, 2),
    _RcIpv6NetToPhysicalNetAddress_Type()
)
rcIpv6NetToPhysicalNetAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalNetAddress.setStatus("current")


class _RcIpv6NetToPhysicalPhysAddress_Type(PhysAddress):
    """Custom type rcIpv6NetToPhysicalPhysAddress based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 65535),
    )


_RcIpv6NetToPhysicalPhysAddress_Type.__name__ = "PhysAddress"
_RcIpv6NetToPhysicalPhysAddress_Object = MibTableColumn
rcIpv6NetToPhysicalPhysAddress = _RcIpv6NetToPhysicalPhysAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1, 3),
    _RcIpv6NetToPhysicalPhysAddress_Type()
)
rcIpv6NetToPhysicalPhysAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalPhysAddress.setStatus("current")
_RcIpv6NetToPhysicalInterface_Type = Integer32
_RcIpv6NetToPhysicalInterface_Object = MibTableColumn
rcIpv6NetToPhysicalInterface = _RcIpv6NetToPhysicalInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1, 4),
    _RcIpv6NetToPhysicalInterface_Type()
)
rcIpv6NetToPhysicalInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalInterface.setStatus("current")
_RcIpv6NetToPhysicalLastUpdated_Type = TimeStamp
_RcIpv6NetToPhysicalLastUpdated_Object = MibTableColumn
rcIpv6NetToPhysicalLastUpdated = _RcIpv6NetToPhysicalLastUpdated_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1, 5),
    _RcIpv6NetToPhysicalLastUpdated_Type()
)
rcIpv6NetToPhysicalLastUpdated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalLastUpdated.setStatus("current")


class _RcIpv6NetToPhysicalType_Type(Integer32):
    """Custom type rcIpv6NetToPhysicalType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 2),
          ("local", 4),
          ("other", 1),
          ("static", 3))
    )


_RcIpv6NetToPhysicalType_Type.__name__ = "Integer32"
_RcIpv6NetToPhysicalType_Object = MibTableColumn
rcIpv6NetToPhysicalType = _RcIpv6NetToPhysicalType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1, 6),
    _RcIpv6NetToPhysicalType_Type()
)
rcIpv6NetToPhysicalType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalType.setStatus("current")


class _RcIpv6NetToPhysicalState_Type(Integer32):
    """Custom type rcIpv6NetToPhysicalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("delay", 3),
          ("incomplete", 7),
          ("invalid", 5),
          ("probe", 4),
          ("reachable", 1),
          ("stale", 2),
          ("unknown", 6))
    )


_RcIpv6NetToPhysicalState_Type.__name__ = "Integer32"
_RcIpv6NetToPhysicalState_Object = MibTableColumn
rcIpv6NetToPhysicalState = _RcIpv6NetToPhysicalState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1, 8),
    _RcIpv6NetToPhysicalState_Type()
)
rcIpv6NetToPhysicalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalState.setStatus("current")
_RcIpv6NetToPhysicalRowStatus_Type = RowStatus
_RcIpv6NetToPhysicalRowStatus_Object = MibTableColumn
rcIpv6NetToPhysicalRowStatus = _RcIpv6NetToPhysicalRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 7, 1, 9),
    _RcIpv6NetToPhysicalRowStatus_Type()
)
rcIpv6NetToPhysicalRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6NetToPhysicalRowStatus.setStatus("current")
_RcIpv6PrefixListTable_Object = MibTable
rcIpv6PrefixListTable = _RcIpv6PrefixListTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8)
)
if mibBuilder.loadTexts:
    rcIpv6PrefixListTable.setStatus("current")
_RcIpv6PrefixListEntry_Object = MibTableRow
rcIpv6PrefixListEntry = _RcIpv6PrefixListEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8, 1)
)
rcIpv6PrefixListEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6PrefixListId"),
    (0, "RAPID-CITY", "rcIpv6PrefixListPrefix"),
    (0, "RAPID-CITY", "rcIpv6PrefixListPrefixMaskLen"),
)
if mibBuilder.loadTexts:
    rcIpv6PrefixListEntry.setStatus("current")


class _RcIpv6PrefixListId_Type(Unsigned32):
    """Custom type rcIpv6PrefixListId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcIpv6PrefixListId_Type.__name__ = "Unsigned32"
_RcIpv6PrefixListId_Object = MibTableColumn
rcIpv6PrefixListId = _RcIpv6PrefixListId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8, 1, 1),
    _RcIpv6PrefixListId_Type()
)
rcIpv6PrefixListId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6PrefixListId.setStatus("current")
_RcIpv6PrefixListPrefix_Type = Ipv6Address
_RcIpv6PrefixListPrefix_Object = MibTableColumn
rcIpv6PrefixListPrefix = _RcIpv6PrefixListPrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8, 1, 2),
    _RcIpv6PrefixListPrefix_Type()
)
rcIpv6PrefixListPrefix.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6PrefixListPrefix.setStatus("current")


class _RcIpv6PrefixListPrefixMaskLen_Type(Unsigned32):
    """Custom type rcIpv6PrefixListPrefixMaskLen based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6PrefixListPrefixMaskLen_Type.__name__ = "Unsigned32"
_RcIpv6PrefixListPrefixMaskLen_Object = MibTableColumn
rcIpv6PrefixListPrefixMaskLen = _RcIpv6PrefixListPrefixMaskLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8, 1, 3),
    _RcIpv6PrefixListPrefixMaskLen_Type()
)
rcIpv6PrefixListPrefixMaskLen.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6PrefixListPrefixMaskLen.setStatus("current")


class _RcIpv6PrefixListMaskLenFrom_Type(Unsigned32):
    """Custom type rcIpv6PrefixListMaskLenFrom based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6PrefixListMaskLenFrom_Type.__name__ = "Unsigned32"
_RcIpv6PrefixListMaskLenFrom_Object = MibTableColumn
rcIpv6PrefixListMaskLenFrom = _RcIpv6PrefixListMaskLenFrom_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8, 1, 4),
    _RcIpv6PrefixListMaskLenFrom_Type()
)
rcIpv6PrefixListMaskLenFrom.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6PrefixListMaskLenFrom.setStatus("current")


class _RcIpv6PrefixListMaskLenUpto_Type(Unsigned32):
    """Custom type rcIpv6PrefixListMaskLenUpto based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_RcIpv6PrefixListMaskLenUpto_Type.__name__ = "Unsigned32"
_RcIpv6PrefixListMaskLenUpto_Object = MibTableColumn
rcIpv6PrefixListMaskLenUpto = _RcIpv6PrefixListMaskLenUpto_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8, 1, 5),
    _RcIpv6PrefixListMaskLenUpto_Type()
)
rcIpv6PrefixListMaskLenUpto.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6PrefixListMaskLenUpto.setStatus("current")


class _RcIpv6PrefixListName_Type(SnmpAdminString):
    """Custom type rcIpv6PrefixListName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_RcIpv6PrefixListName_Type.__name__ = "SnmpAdminString"
_RcIpv6PrefixListName_Object = MibTableColumn
rcIpv6PrefixListName = _RcIpv6PrefixListName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8, 1, 6),
    _RcIpv6PrefixListName_Type()
)
rcIpv6PrefixListName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6PrefixListName.setStatus("current")
_RcIpv6PrefixListRowStatus_Type = RowStatus
_RcIpv6PrefixListRowStatus_Object = MibTableColumn
rcIpv6PrefixListRowStatus = _RcIpv6PrefixListRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 8, 1, 7),
    _RcIpv6PrefixListRowStatus_Type()
)
rcIpv6PrefixListRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6PrefixListRowStatus.setStatus("current")
_RcIpv6ConfDhcpRelayTable_Object = MibTable
rcIpv6ConfDhcpRelayTable = _RcIpv6ConfDhcpRelayTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 9)
)
if mibBuilder.loadTexts:
    rcIpv6ConfDhcpRelayTable.setStatus("current")
_RcIpv6ConfDhcpRelayEntry_Object = MibTableRow
rcIpv6ConfDhcpRelayEntry = _RcIpv6ConfDhcpRelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 9, 1)
)
rcIpv6ConfDhcpRelayEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6ConfDhcpIfIndex"),
)
if mibBuilder.loadTexts:
    rcIpv6ConfDhcpRelayEntry.setStatus("current")


class _RcIpv6ConfDhcpIfIndex_Type(InterfaceIndex):
    """Custom type rcIpv6ConfDhcpIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6142),
    )


_RcIpv6ConfDhcpIfIndex_Type.__name__ = "InterfaceIndex"
_RcIpv6ConfDhcpIfIndex_Object = MibTableColumn
rcIpv6ConfDhcpIfIndex = _RcIpv6ConfDhcpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 9, 1, 1),
    _RcIpv6ConfDhcpIfIndex_Type()
)
rcIpv6ConfDhcpIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6ConfDhcpIfIndex.setStatus("current")


class _RcIpv6ConfDhcpMaxHop_Type(Unsigned32):
    """Custom type rcIpv6ConfDhcpMaxHop based on Unsigned32"""
    defaultValue = 32

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_RcIpv6ConfDhcpMaxHop_Type.__name__ = "Unsigned32"
_RcIpv6ConfDhcpMaxHop_Object = MibTableColumn
rcIpv6ConfDhcpMaxHop = _RcIpv6ConfDhcpMaxHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 9, 1, 2),
    _RcIpv6ConfDhcpMaxHop_Type()
)
rcIpv6ConfDhcpMaxHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6ConfDhcpMaxHop.setStatus("current")


class _RcIpv6ConfDhcpRemoteIdEnabled_Type(TruthValue):
    """Custom type rcIpv6ConfDhcpRemoteIdEnabled based on TruthValue"""


_RcIpv6ConfDhcpRemoteIdEnabled_Object = MibTableColumn
rcIpv6ConfDhcpRemoteIdEnabled = _RcIpv6ConfDhcpRemoteIdEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 9, 1, 3),
    _RcIpv6ConfDhcpRemoteIdEnabled_Type()
)
rcIpv6ConfDhcpRemoteIdEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6ConfDhcpRemoteIdEnabled.setStatus("current")
_RcIpv6ConfDhcpNumRequests_Type = Counter32
_RcIpv6ConfDhcpNumRequests_Object = MibTableColumn
rcIpv6ConfDhcpNumRequests = _RcIpv6ConfDhcpNumRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 9, 1, 4),
    _RcIpv6ConfDhcpNumRequests_Type()
)
rcIpv6ConfDhcpNumRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6ConfDhcpNumRequests.setStatus("current")
_RcIpv6ConfDhcpNumReplies_Type = Counter32
_RcIpv6ConfDhcpNumReplies_Object = MibTableColumn
rcIpv6ConfDhcpNumReplies = _RcIpv6ConfDhcpNumReplies_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 9, 1, 5),
    _RcIpv6ConfDhcpNumReplies_Type()
)
rcIpv6ConfDhcpNumReplies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6ConfDhcpNumReplies.setStatus("current")
_RcIpv6ConfDhcpRowStatus_Type = RowStatus
_RcIpv6ConfDhcpRowStatus_Object = MibTableColumn
rcIpv6ConfDhcpRowStatus = _RcIpv6ConfDhcpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 9, 1, 6),
    _RcIpv6ConfDhcpRowStatus_Type()
)
rcIpv6ConfDhcpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6ConfDhcpRowStatus.setStatus("current")
_RcIpv6DhcpForwardTable_Object = MibTable
rcIpv6DhcpForwardTable = _RcIpv6DhcpForwardTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 10)
)
if mibBuilder.loadTexts:
    rcIpv6DhcpForwardTable.setStatus("current")
_RcIpv6DhcpForwardEntry_Object = MibTableRow
rcIpv6DhcpForwardEntry = _RcIpv6DhcpForwardEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 10, 1)
)
rcIpv6DhcpForwardEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6DhcpForwardAgentAddr"),
    (0, "RAPID-CITY", "rcIpv6DhcpForwardServerAddr"),
)
if mibBuilder.loadTexts:
    rcIpv6DhcpForwardEntry.setStatus("current")
_RcIpv6DhcpForwardAgentAddr_Type = Ipv6Address
_RcIpv6DhcpForwardAgentAddr_Object = MibTableColumn
rcIpv6DhcpForwardAgentAddr = _RcIpv6DhcpForwardAgentAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 10, 1, 1),
    _RcIpv6DhcpForwardAgentAddr_Type()
)
rcIpv6DhcpForwardAgentAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6DhcpForwardAgentAddr.setStatus("current")
_RcIpv6DhcpForwardServerAddr_Type = Ipv6Address
_RcIpv6DhcpForwardServerAddr_Object = MibTableColumn
rcIpv6DhcpForwardServerAddr = _RcIpv6DhcpForwardServerAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 10, 1, 2),
    _RcIpv6DhcpForwardServerAddr_Type()
)
rcIpv6DhcpForwardServerAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6DhcpForwardServerAddr.setStatus("current")


class _RcIpv6DhcpForwardEnabled_Type(TruthValue):
    """Custom type rcIpv6DhcpForwardEnabled based on TruthValue"""


_RcIpv6DhcpForwardEnabled_Object = MibTableColumn
rcIpv6DhcpForwardEnabled = _RcIpv6DhcpForwardEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 10, 1, 3),
    _RcIpv6DhcpForwardEnabled_Type()
)
rcIpv6DhcpForwardEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6DhcpForwardEnabled.setStatus("current")
_RcIpv6DhcpForwardRowStatus_Type = RowStatus
_RcIpv6DhcpForwardRowStatus_Object = MibTableColumn
rcIpv6DhcpForwardRowStatus = _RcIpv6DhcpForwardRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 10, 1, 4),
    _RcIpv6DhcpForwardRowStatus_Type()
)
rcIpv6DhcpForwardRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6DhcpForwardRowStatus.setStatus("current")
_RcIpv6RadiusServTable_Object = MibTable
rcIpv6RadiusServTable = _RcIpv6RadiusServTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11)
)
if mibBuilder.loadTexts:
    rcIpv6RadiusServTable.setStatus("current")
_RcIpv6RadiusServEntry_Object = MibTableRow
rcIpv6RadiusServEntry = _RcIpv6RadiusServEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1)
)
rcIpv6RadiusServEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpv6RadiusServAddress"),
    (0, "RAPID-CITY", "rcIpv6RadiusServUsedBy"),
)
if mibBuilder.loadTexts:
    rcIpv6RadiusServEntry.setStatus("current")
_RcIpv6RadiusServAddress_Type = Ipv6Address
_RcIpv6RadiusServAddress_Object = MibTableColumn
rcIpv6RadiusServAddress = _RcIpv6RadiusServAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 1),
    _RcIpv6RadiusServAddress_Type()
)
rcIpv6RadiusServAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAddress.setStatus("current")


class _RcIpv6RadiusServUsedBy_Type(Integer32):
    """Custom type rcIpv6RadiusServUsedBy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cli", 1),
          ("eap", 4),
          ("igap", 2),
          ("snmp", 3),
          ("web", 5))
    )


_RcIpv6RadiusServUsedBy_Type.__name__ = "Integer32"
_RcIpv6RadiusServUsedBy_Object = MibTableColumn
rcIpv6RadiusServUsedBy = _RcIpv6RadiusServUsedBy_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 2),
    _RcIpv6RadiusServUsedBy_Type()
)
rcIpv6RadiusServUsedBy.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpv6RadiusServUsedBy.setStatus("current")


class _RcIpv6RadiusServPriority_Type(Unsigned32):
    """Custom type rcIpv6RadiusServPriority based on Unsigned32"""
    defaultValue = 10

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcIpv6RadiusServPriority_Type.__name__ = "Unsigned32"
_RcIpv6RadiusServPriority_Object = MibTableColumn
rcIpv6RadiusServPriority = _RcIpv6RadiusServPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 3),
    _RcIpv6RadiusServPriority_Type()
)
rcIpv6RadiusServPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServPriority.setStatus("current")


class _RcIpv6RadiusServTimeOut_Type(Unsigned32):
    """Custom type rcIpv6RadiusServTimeOut based on Unsigned32"""
    defaultValue = 3

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_RcIpv6RadiusServTimeOut_Type.__name__ = "Unsigned32"
_RcIpv6RadiusServTimeOut_Object = MibTableColumn
rcIpv6RadiusServTimeOut = _RcIpv6RadiusServTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 4),
    _RcIpv6RadiusServTimeOut_Type()
)
rcIpv6RadiusServTimeOut.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServTimeOut.setStatus("current")


class _RcIpv6RadiusServEnable_Type(TruthValue):
    """Custom type rcIpv6RadiusServEnable based on TruthValue"""


_RcIpv6RadiusServEnable_Object = MibTableColumn
rcIpv6RadiusServEnable = _RcIpv6RadiusServEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 5),
    _RcIpv6RadiusServEnable_Type()
)
rcIpv6RadiusServEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServEnable.setStatus("current")


class _RcIpv6RadiusServMaxRetries_Type(Unsigned32):
    """Custom type rcIpv6RadiusServMaxRetries based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6),
    )


_RcIpv6RadiusServMaxRetries_Type.__name__ = "Unsigned32"
_RcIpv6RadiusServMaxRetries_Object = MibTableColumn
rcIpv6RadiusServMaxRetries = _RcIpv6RadiusServMaxRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 6),
    _RcIpv6RadiusServMaxRetries_Type()
)
rcIpv6RadiusServMaxRetries.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServMaxRetries.setStatus("current")


class _RcIpv6RadiusServUdpPort_Type(Unsigned32):
    """Custom type rcIpv6RadiusServUdpPort based on Unsigned32"""
    defaultValue = 1812

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65536),
    )


_RcIpv6RadiusServUdpPort_Type.__name__ = "Unsigned32"
_RcIpv6RadiusServUdpPort_Object = MibTableColumn
rcIpv6RadiusServUdpPort = _RcIpv6RadiusServUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 7),
    _RcIpv6RadiusServUdpPort_Type()
)
rcIpv6RadiusServUdpPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServUdpPort.setStatus("current")


class _RcIpv6RadiusServSecretKey_Type(SnmpAdminString):
    """Custom type rcIpv6RadiusServSecretKey based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcIpv6RadiusServSecretKey_Type.__name__ = "SnmpAdminString"
_RcIpv6RadiusServSecretKey_Object = MibTableColumn
rcIpv6RadiusServSecretKey = _RcIpv6RadiusServSecretKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 8),
    _RcIpv6RadiusServSecretKey_Type()
)
rcIpv6RadiusServSecretKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServSecretKey.setStatus("current")
_RcIpv6RadiusServAccessRequests_Type = Counter32
_RcIpv6RadiusServAccessRequests_Object = MibTableColumn
rcIpv6RadiusServAccessRequests = _RcIpv6RadiusServAccessRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 9),
    _RcIpv6RadiusServAccessRequests_Type()
)
rcIpv6RadiusServAccessRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAccessRequests.setStatus("current")
_RcIpv6RadiusServAccessAccepts_Type = Counter32
_RcIpv6RadiusServAccessAccepts_Object = MibTableColumn
rcIpv6RadiusServAccessAccepts = _RcIpv6RadiusServAccessAccepts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 10),
    _RcIpv6RadiusServAccessAccepts_Type()
)
rcIpv6RadiusServAccessAccepts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAccessAccepts.setStatus("current")
_RcIpv6RadiusServAccessRejects_Type = Counter32
_RcIpv6RadiusServAccessRejects_Object = MibTableColumn
rcIpv6RadiusServAccessRejects = _RcIpv6RadiusServAccessRejects_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 11),
    _RcIpv6RadiusServAccessRejects_Type()
)
rcIpv6RadiusServAccessRejects.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAccessRejects.setStatus("current")
_RcIpv6RadiusServBadResponses_Type = Counter32
_RcIpv6RadiusServBadResponses_Object = MibTableColumn
rcIpv6RadiusServBadResponses = _RcIpv6RadiusServBadResponses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 12),
    _RcIpv6RadiusServBadResponses_Type()
)
rcIpv6RadiusServBadResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServBadResponses.setStatus("current")
_RcIpv6RadiusServPendingRequests_Type = Counter32
_RcIpv6RadiusServPendingRequests_Object = MibTableColumn
rcIpv6RadiusServPendingRequests = _RcIpv6RadiusServPendingRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 13),
    _RcIpv6RadiusServPendingRequests_Type()
)
rcIpv6RadiusServPendingRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServPendingRequests.setStatus("current")
_RcIpv6RadiusServClientRetries_Type = Counter32
_RcIpv6RadiusServClientRetries_Object = MibTableColumn
rcIpv6RadiusServClientRetries = _RcIpv6RadiusServClientRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 14),
    _RcIpv6RadiusServClientRetries_Type()
)
rcIpv6RadiusServClientRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServClientRetries.setStatus("current")


class _RcIpv6RadiusServAcctEnable_Type(TruthValue):
    """Custom type rcIpv6RadiusServAcctEnable based on TruthValue"""


_RcIpv6RadiusServAcctEnable_Object = MibTableColumn
rcIpv6RadiusServAcctEnable = _RcIpv6RadiusServAcctEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 15),
    _RcIpv6RadiusServAcctEnable_Type()
)
rcIpv6RadiusServAcctEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctEnable.setStatus("current")


class _RcIpv6RadiusServAcctUdpPort_Type(Unsigned32):
    """Custom type rcIpv6RadiusServAcctUdpPort based on Unsigned32"""
    defaultValue = 1813

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65536),
    )


_RcIpv6RadiusServAcctUdpPort_Type.__name__ = "Unsigned32"
_RcIpv6RadiusServAcctUdpPort_Object = MibTableColumn
rcIpv6RadiusServAcctUdpPort = _RcIpv6RadiusServAcctUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 16),
    _RcIpv6RadiusServAcctUdpPort_Type()
)
rcIpv6RadiusServAcctUdpPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctUdpPort.setStatus("current")
_RcIpv6RadiusServAcctOnRequests_Type = Counter32
_RcIpv6RadiusServAcctOnRequests_Object = MibTableColumn
rcIpv6RadiusServAcctOnRequests = _RcIpv6RadiusServAcctOnRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 17),
    _RcIpv6RadiusServAcctOnRequests_Type()
)
rcIpv6RadiusServAcctOnRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctOnRequests.setStatus("current")
_RcIpv6RadiusServAcctOffRequests_Type = Counter32
_RcIpv6RadiusServAcctOffRequests_Object = MibTableColumn
rcIpv6RadiusServAcctOffRequests = _RcIpv6RadiusServAcctOffRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 18),
    _RcIpv6RadiusServAcctOffRequests_Type()
)
rcIpv6RadiusServAcctOffRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctOffRequests.setStatus("current")
_RcIpv6RadiusServAcctStartRequests_Type = Counter32
_RcIpv6RadiusServAcctStartRequests_Object = MibTableColumn
rcIpv6RadiusServAcctStartRequests = _RcIpv6RadiusServAcctStartRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 19),
    _RcIpv6RadiusServAcctStartRequests_Type()
)
rcIpv6RadiusServAcctStartRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctStartRequests.setStatus("current")
_RcIpv6RadiusServAcctStopRequests_Type = Counter32
_RcIpv6RadiusServAcctStopRequests_Object = MibTableColumn
rcIpv6RadiusServAcctStopRequests = _RcIpv6RadiusServAcctStopRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 20),
    _RcIpv6RadiusServAcctStopRequests_Type()
)
rcIpv6RadiusServAcctStopRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctStopRequests.setStatus("current")
_RcIpv6RadiusServAcctInterimRequests_Type = Counter32
_RcIpv6RadiusServAcctInterimRequests_Object = MibTableColumn
rcIpv6RadiusServAcctInterimRequests = _RcIpv6RadiusServAcctInterimRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 21),
    _RcIpv6RadiusServAcctInterimRequests_Type()
)
rcIpv6RadiusServAcctInterimRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctInterimRequests.setStatus("current")
_RcIpv6RadiusServAcctBadResponses_Type = Counter32
_RcIpv6RadiusServAcctBadResponses_Object = MibTableColumn
rcIpv6RadiusServAcctBadResponses = _RcIpv6RadiusServAcctBadResponses_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 22),
    _RcIpv6RadiusServAcctBadResponses_Type()
)
rcIpv6RadiusServAcctBadResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctBadResponses.setStatus("current")
_RcIpv6RadiusServAcctPendingRequests_Type = Counter32
_RcIpv6RadiusServAcctPendingRequests_Object = MibTableColumn
rcIpv6RadiusServAcctPendingRequests = _RcIpv6RadiusServAcctPendingRequests_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 23),
    _RcIpv6RadiusServAcctPendingRequests_Type()
)
rcIpv6RadiusServAcctPendingRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctPendingRequests.setStatus("current")
_RcIpv6RadiusServAcctClientRetries_Type = Counter32
_RcIpv6RadiusServAcctClientRetries_Object = MibTableColumn
rcIpv6RadiusServAcctClientRetries = _RcIpv6RadiusServAcctClientRetries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 24),
    _RcIpv6RadiusServAcctClientRetries_Type()
)
rcIpv6RadiusServAcctClientRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAcctClientRetries.setStatus("current")
_RcIpv6RadiusServNasIpAddress_Type = Ipv6Address
_RcIpv6RadiusServNasIpAddress_Object = MibTableColumn
rcIpv6RadiusServNasIpAddress = _RcIpv6RadiusServNasIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 25),
    _RcIpv6RadiusServNasIpAddress_Type()
)
rcIpv6RadiusServNasIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServNasIpAddress.setStatus("current")


class _RcIpv6RadiusServRoundTripTime_Type(SnmpAdminString):
    """Custom type rcIpv6RadiusServRoundTripTime based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RcIpv6RadiusServRoundTripTime_Type.__name__ = "SnmpAdminString"
_RcIpv6RadiusServRoundTripTime_Object = MibTableColumn
rcIpv6RadiusServRoundTripTime = _RcIpv6RadiusServRoundTripTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 26),
    _RcIpv6RadiusServRoundTripTime_Type()
)
rcIpv6RadiusServRoundTripTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServRoundTripTime.setStatus("current")
_RcIpv6RadiusServAccessChallanges_Type = Counter32
_RcIpv6RadiusServAccessChallanges_Object = MibTableColumn
rcIpv6RadiusServAccessChallanges = _RcIpv6RadiusServAccessChallanges_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 27),
    _RcIpv6RadiusServAccessChallanges_Type()
)
rcIpv6RadiusServAccessChallanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpv6RadiusServAccessChallanges.setStatus("current")
_RcIpv6RadiusServSourceIpAddr_Type = Ipv6Address
_RcIpv6RadiusServSourceIpAddr_Object = MibTableColumn
rcIpv6RadiusServSourceIpAddr = _RcIpv6RadiusServSourceIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 28),
    _RcIpv6RadiusServSourceIpAddr_Type()
)
rcIpv6RadiusServSourceIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServSourceIpAddr.setStatus("current")
_RcIpv6RadiusServRowStatus_Type = RowStatus
_RcIpv6RadiusServRowStatus_Object = MibTableColumn
rcIpv6RadiusServRowStatus = _RcIpv6RadiusServRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 62, 1, 1, 11, 1, 29),
    _RcIpv6RadiusServRowStatus_Type()
)
rcIpv6RadiusServRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpv6RadiusServRowStatus.setStatus("current")
_RcIsis_ObjectIdentity = ObjectIdentity
rcIsis = _RcIsis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63)
)
_RcIsisGlobalGroup_ObjectIdentity = ObjectIdentity
rcIsisGlobalGroup = _RcIsisGlobalGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1)
)


class _RcIsisGlobalAreaAuthType_Type(Integer32):
    """Custom type rcIsisGlobalAreaAuthType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hmac-md5", 2),
          ("none", 0),
          ("simple", 1))
    )


_RcIsisGlobalAreaAuthType_Type.__name__ = "Integer32"
_RcIsisGlobalAreaAuthType_Object = MibScalar
rcIsisGlobalAreaAuthType = _RcIsisGlobalAreaAuthType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 1),
    _RcIsisGlobalAreaAuthType_Type()
)
rcIsisGlobalAreaAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalAreaAuthType.setStatus("current")


class _RcIsisGlobalAreaKeyId_Type(Integer32):
    """Custom type rcIsisGlobalAreaKeyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIsisGlobalAreaKeyId_Type.__name__ = "Integer32"
_RcIsisGlobalAreaKeyId_Object = MibScalar
rcIsisGlobalAreaKeyId = _RcIsisGlobalAreaKeyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 2),
    _RcIsisGlobalAreaKeyId_Type()
)
rcIsisGlobalAreaKeyId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalAreaKeyId.setStatus("current")


class _RcIsisGlobalAreaAuthKey_Type(OctetString):
    """Custom type rcIsisGlobalAreaAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisGlobalAreaAuthKey_Type.__name__ = "OctetString"
_RcIsisGlobalAreaAuthKey_Object = MibScalar
rcIsisGlobalAreaAuthKey = _RcIsisGlobalAreaAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 3),
    _RcIsisGlobalAreaAuthKey_Type()
)
rcIsisGlobalAreaAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalAreaAuthKey.setStatus("current")


class _RcIsisGlobalDomainAuthType_Type(Integer32):
    """Custom type rcIsisGlobalDomainAuthType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hmac-md5", 2),
          ("none", 0),
          ("simple", 1))
    )


_RcIsisGlobalDomainAuthType_Type.__name__ = "Integer32"
_RcIsisGlobalDomainAuthType_Object = MibScalar
rcIsisGlobalDomainAuthType = _RcIsisGlobalDomainAuthType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 4),
    _RcIsisGlobalDomainAuthType_Type()
)
rcIsisGlobalDomainAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalDomainAuthType.setStatus("current")


class _RcIsisGlobalDomainKeyId_Type(Integer32):
    """Custom type rcIsisGlobalDomainKeyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIsisGlobalDomainKeyId_Type.__name__ = "Integer32"
_RcIsisGlobalDomainKeyId_Object = MibScalar
rcIsisGlobalDomainKeyId = _RcIsisGlobalDomainKeyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 5),
    _RcIsisGlobalDomainKeyId_Type()
)
rcIsisGlobalDomainKeyId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalDomainKeyId.setStatus("current")


class _RcIsisGlobalDomainAuthKey_Type(OctetString):
    """Custom type rcIsisGlobalDomainAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisGlobalDomainAuthKey_Type.__name__ = "OctetString"
_RcIsisGlobalDomainAuthKey_Object = MibScalar
rcIsisGlobalDomainAuthKey = _RcIsisGlobalDomainAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 6),
    _RcIsisGlobalDomainAuthKey_Type()
)
rcIsisGlobalDomainAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalDomainAuthKey.setStatus("current")


class _RcIsisGlobalCsnpInt_Type(Integer32):
    """Custom type rcIsisGlobalCsnpInt based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 600),
    )


_RcIsisGlobalCsnpInt_Type.__name__ = "Integer32"
_RcIsisGlobalCsnpInt_Object = MibScalar
rcIsisGlobalCsnpInt = _RcIsisGlobalCsnpInt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 7),
    _RcIsisGlobalCsnpInt_Type()
)
rcIsisGlobalCsnpInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalCsnpInt.setStatus("current")


class _RcIsisGlobalRxmtLspInt_Type(Integer32):
    """Custom type rcIsisGlobalRxmtLspInt based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 300),
    )


_RcIsisGlobalRxmtLspInt_Type.__name__ = "Integer32"
_RcIsisGlobalRxmtLspInt_Object = MibScalar
rcIsisGlobalRxmtLspInt = _RcIsisGlobalRxmtLspInt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 8),
    _RcIsisGlobalRxmtLspInt_Type()
)
rcIsisGlobalRxmtLspInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalRxmtLspInt.setStatus("current")


class _RcIsisGlobalPSNPInterval_Type(Integer32):
    """Custom type rcIsisGlobalPSNPInterval based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_RcIsisGlobalPSNPInterval_Type.__name__ = "Integer32"
_RcIsisGlobalPSNPInterval_Object = MibScalar
rcIsisGlobalPSNPInterval = _RcIsisGlobalPSNPInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 9),
    _RcIsisGlobalPSNPInterval_Type()
)
rcIsisGlobalPSNPInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalPSNPInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcIsisGlobalPSNPInterval.setUnits("seconds")


class _RcIsisGlobalHostName_Type(OctetString):
    """Custom type rcIsisGlobalHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisGlobalHostName_Type.__name__ = "OctetString"
_RcIsisGlobalHostName_Object = MibScalar
rcIsisGlobalHostName = _RcIsisGlobalHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 10),
    _RcIsisGlobalHostName_Type()
)
rcIsisGlobalHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalHostName.setStatus("current")


class _RcIsisGlobalSpfDelay_Type(Integer32):
    """Custom type rcIsisGlobalSpfDelay based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 5000),
    )


_RcIsisGlobalSpfDelay_Type.__name__ = "Integer32"
_RcIsisGlobalSpfDelay_Object = MibScalar
rcIsisGlobalSpfDelay = _RcIsisGlobalSpfDelay_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 11),
    _RcIsisGlobalSpfDelay_Type()
)
rcIsisGlobalSpfDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalSpfDelay.setStatus("current")
if mibBuilder.loadTexts:
    rcIsisGlobalSpfDelay.setUnits("milliseconds")


class _RcIsisGlobalControlVlan_Type(Integer32):
    """Custom type rcIsisGlobalControlVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisGlobalControlVlan_Type.__name__ = "Integer32"
_RcIsisGlobalControlVlan_Object = MibScalar
rcIsisGlobalControlVlan = _RcIsisGlobalControlVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 12),
    _RcIsisGlobalControlVlan_Type()
)
rcIsisGlobalControlVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalControlVlan.setStatus("current")
_RcIsisGlobalIpSourceAddress_Type = InetAddress
_RcIsisGlobalIpSourceAddress_Object = MibScalar
rcIsisGlobalIpSourceAddress = _RcIsisGlobalIpSourceAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 13),
    _RcIsisGlobalIpSourceAddress_Type()
)
rcIsisGlobalIpSourceAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalIpSourceAddress.setStatus("current")
_RcIsisGlobalIpSourceAddressType_Type = InetAddressType
_RcIsisGlobalIpSourceAddressType_Object = MibScalar
rcIsisGlobalIpSourceAddressType = _RcIsisGlobalIpSourceAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 1, 14),
    _RcIsisGlobalIpSourceAddressType_Type()
)
rcIsisGlobalIpSourceAddressType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisGlobalIpSourceAddressType.setStatus("current")
_RcIsisCircuitTable_Object = MibTable
rcIsisCircuitTable = _RcIsisCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2)
)
if mibBuilder.loadTexts:
    rcIsisCircuitTable.setStatus("current")
_RcIsisCircuitEntry_Object = MibTableRow
rcIsisCircuitEntry = _RcIsisCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1)
)
rcIsisCircuitEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisCircuitIndex"),
)
if mibBuilder.loadTexts:
    rcIsisCircuitEntry.setStatus("current")
_RcIsisCircuitIndex_Type = Integer32
_RcIsisCircuitIndex_Object = MibTableColumn
rcIsisCircuitIndex = _RcIsisCircuitIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 1),
    _RcIsisCircuitIndex_Type()
)
rcIsisCircuitIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisCircuitIndex.setStatus("current")


class _RcIsisCircuitType_Type(Integer32):
    """Custom type rcIsisCircuitType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bcast", 1),
          ("passive", 3),
          ("ptpt", 2))
    )


_RcIsisCircuitType_Type.__name__ = "Integer32"
_RcIsisCircuitType_Object = MibTableColumn
rcIsisCircuitType = _RcIsisCircuitType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 2),
    _RcIsisCircuitType_Type()
)
rcIsisCircuitType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisCircuitType.setStatus("current")


class _RcIsisCircuitAuthType_Type(Integer32):
    """Custom type rcIsisCircuitAuthType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hmac-md5", 2),
          ("none", 0),
          ("simple", 1))
    )


_RcIsisCircuitAuthType_Type.__name__ = "Integer32"
_RcIsisCircuitAuthType_Object = MibTableColumn
rcIsisCircuitAuthType = _RcIsisCircuitAuthType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 3),
    _RcIsisCircuitAuthType_Type()
)
rcIsisCircuitAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisCircuitAuthType.setStatus("current")


class _RcIsisCircuitKeyId_Type(Integer32):
    """Custom type rcIsisCircuitKeyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcIsisCircuitKeyId_Type.__name__ = "Integer32"
_RcIsisCircuitKeyId_Object = MibTableColumn
rcIsisCircuitKeyId = _RcIsisCircuitKeyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 4),
    _RcIsisCircuitKeyId_Type()
)
rcIsisCircuitKeyId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisCircuitKeyId.setStatus("current")


class _RcIsisCircuitAuthKey_Type(OctetString):
    """Custom type rcIsisCircuitAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisCircuitAuthKey_Type.__name__ = "OctetString"
_RcIsisCircuitAuthKey_Object = MibTableColumn
rcIsisCircuitAuthKey = _RcIsisCircuitAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 5),
    _RcIsisCircuitAuthKey_Type()
)
rcIsisCircuitAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisCircuitAuthKey.setStatus("current")
_RcIsisCircuitAddr_Type = IpAddress
_RcIsisCircuitAddr_Object = MibTableColumn
rcIsisCircuitAddr = _RcIsisCircuitAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 6),
    _RcIsisCircuitAddr_Type()
)
rcIsisCircuitAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisCircuitAddr.setStatus("current")
_RcIsisCircuitMask_Type = IpAddress
_RcIsisCircuitMask_Object = MibTableColumn
rcIsisCircuitMask = _RcIsisCircuitMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 7),
    _RcIsisCircuitMask_Type()
)
rcIsisCircuitMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisCircuitMask.setStatus("current")


class _RcIsisCircuitOperState_Type(Integer32):
    """Custom type rcIsisCircuitOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 0),
          ("up", 1))
    )


_RcIsisCircuitOperState_Type.__name__ = "Integer32"
_RcIsisCircuitOperState_Object = MibTableColumn
rcIsisCircuitOperState = _RcIsisCircuitOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 8),
    _RcIsisCircuitOperState_Type()
)
rcIsisCircuitOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisCircuitOperState.setStatus("current")
_RcIsisCircuitNumAdj_Type = Integer32
_RcIsisCircuitNumAdj_Object = MibTableColumn
rcIsisCircuitNumAdj = _RcIsisCircuitNumAdj_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 9),
    _RcIsisCircuitNumAdj_Type()
)
rcIsisCircuitNumAdj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisCircuitNumAdj.setStatus("current")
_RcIsisCircuitNumUpAdj_Type = Integer32
_RcIsisCircuitNumUpAdj_Object = MibTableColumn
rcIsisCircuitNumUpAdj = _RcIsisCircuitNumUpAdj_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 2, 1, 10),
    _RcIsisCircuitNumUpAdj_Type()
)
rcIsisCircuitNumUpAdj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisCircuitNumUpAdj.setStatus("current")
_RcIsisStats_ObjectIdentity = ObjectIdentity
rcIsisStats = _RcIsisStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 3)
)


class _RcIsisStatsClearErrorCounters_Type(TruthValue):
    """Custom type rcIsisStatsClearErrorCounters based on TruthValue"""


_RcIsisStatsClearErrorCounters_Object = MibScalar
rcIsisStatsClearErrorCounters = _RcIsisStatsClearErrorCounters_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 3, 1),
    _RcIsisStatsClearErrorCounters_Type()
)
rcIsisStatsClearErrorCounters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisStatsClearErrorCounters.setStatus("current")


class _RcIsisStatsClearPacketCounters_Type(TruthValue):
    """Custom type rcIsisStatsClearPacketCounters based on TruthValue"""


_RcIsisStatsClearPacketCounters_Object = MibScalar
rcIsisStatsClearPacketCounters = _RcIsisStatsClearPacketCounters_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 3, 2),
    _RcIsisStatsClearPacketCounters_Type()
)
rcIsisStatsClearPacketCounters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIsisStatsClearPacketCounters.setStatus("current")
_RcIsisPlsbTable_Object = MibTable
rcIsisPlsbTable = _RcIsisPlsbTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4)
)
if mibBuilder.loadTexts:
    rcIsisPlsbTable.setStatus("current")
_RcIsisPlsbEntry_Object = MibTableRow
rcIsisPlsbEntry = _RcIsisPlsbEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1)
)
rcIsisPlsbEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisPlsbId"),
)
if mibBuilder.loadTexts:
    rcIsisPlsbEntry.setStatus("current")


class _RcIsisPlsbId_Type(Integer32):
    """Custom type rcIsisPlsbId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcIsisPlsbId_Type.__name__ = "Integer32"
_RcIsisPlsbId_Object = MibTableColumn
rcIsisPlsbId = _RcIsisPlsbId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 1),
    _RcIsisPlsbId_Type()
)
rcIsisPlsbId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbId.setStatus("current")
_RcIsisPlsbRowStatus_Type = RowStatus
_RcIsisPlsbRowStatus_Object = MibTableColumn
rcIsisPlsbRowStatus = _RcIsisPlsbRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 2),
    _RcIsisPlsbRowStatus_Type()
)
rcIsisPlsbRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbRowStatus.setStatus("current")
_RcIsisPlsbNodeNickName_Type = IsisPlsbNodeNickName
_RcIsisPlsbNodeNickName_Object = MibTableColumn
rcIsisPlsbNodeNickName = _RcIsisPlsbNodeNickName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 3),
    _RcIsisPlsbNodeNickName_Type()
)
rcIsisPlsbNodeNickName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbNodeNickName.setStatus("current")


class _RcIsisPlsbVlans_Type(OctetString):
    """Custom type rcIsisPlsbVlans based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(512, 512),
    )


_RcIsisPlsbVlans_Type.__name__ = "OctetString"
_RcIsisPlsbVlans_Object = MibTableColumn
rcIsisPlsbVlans = _RcIsisPlsbVlans_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 4),
    _RcIsisPlsbVlans_Type()
)
rcIsisPlsbVlans.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbVlans.setStatus("current")


class _RcIsisPlsbLsdbTrap_Type(EnableValue):
    """Custom type rcIsisPlsbLsdbTrap based on EnableValue"""


_RcIsisPlsbLsdbTrap_Object = MibTableColumn
rcIsisPlsbLsdbTrap = _RcIsisPlsbLsdbTrap_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 5),
    _RcIsisPlsbLsdbTrap_Type()
)
rcIsisPlsbLsdbTrap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbLsdbTrap.setStatus("current")
_RcIsisPlsbState_Type = EnableValue
_RcIsisPlsbState_Object = MibTableColumn
rcIsisPlsbState = _RcIsisPlsbState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 6),
    _RcIsisPlsbState_Type()
)
rcIsisPlsbState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbState.setStatus("current")


class _RcIsisPlsbIpShortcut_Type(EnableValue):
    """Custom type rcIsisPlsbIpShortcut based on EnableValue"""


_RcIsisPlsbIpShortcut_Object = MibTableColumn
rcIsisPlsbIpShortcut = _RcIsisPlsbIpShortcut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 7),
    _RcIsisPlsbIpShortcut_Type()
)
rcIsisPlsbIpShortcut.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbIpShortcut.setStatus("current")


class _RcIsisPlsbPrimaryVlan_Type(Integer32):
    """Custom type rcIsisPlsbPrimaryVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisPlsbPrimaryVlan_Type.__name__ = "Integer32"
_RcIsisPlsbPrimaryVlan_Object = MibTableColumn
rcIsisPlsbPrimaryVlan = _RcIsisPlsbPrimaryVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 8),
    _RcIsisPlsbPrimaryVlan_Type()
)
rcIsisPlsbPrimaryVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbPrimaryVlan.setStatus("current")


class _RcIsisPlsbSmltSplitBEB_Type(Integer32):
    """Custom type rcIsisPlsbSmltSplitBEB based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2))
    )


_RcIsisPlsbSmltSplitBEB_Type.__name__ = "Integer32"
_RcIsisPlsbSmltSplitBEB_Object = MibTableColumn
rcIsisPlsbSmltSplitBEB = _RcIsisPlsbSmltSplitBEB_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 9),
    _RcIsisPlsbSmltSplitBEB_Type()
)
rcIsisPlsbSmltSplitBEB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbSmltSplitBEB.setStatus("current")
_RcIsisPlsbSmltBmac_Type = MacAddress
_RcIsisPlsbSmltBmac_Object = MibTableColumn
rcIsisPlsbSmltBmac = _RcIsisPlsbSmltBmac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 10),
    _RcIsisPlsbSmltBmac_Type()
)
rcIsisPlsbSmltBmac.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbSmltBmac.setStatus("current")
_RcIsisPlsbSmltPeerSysId_Type = IsisSystemID
_RcIsisPlsbSmltPeerSysId_Object = MibTableColumn
rcIsisPlsbSmltPeerSysId = _RcIsisPlsbSmltPeerSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 4, 1, 11),
    _RcIsisPlsbSmltPeerSysId_Type()
)
rcIsisPlsbSmltPeerSysId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisPlsbSmltPeerSysId.setStatus("current")
_RcIsisCircuitPlsbTable_Object = MibTable
rcIsisCircuitPlsbTable = _RcIsisCircuitPlsbTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5)
)
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbTable.setStatus("current")
_RcIsisCircuitPlsbEntry_Object = MibTableRow
rcIsisCircuitPlsbEntry = _RcIsisCircuitPlsbEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5, 1)
)
rcIsisCircuitPlsbEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisCircuitPlsbIndex"),
    (0, "RAPID-CITY", "rcIsisCircuitPlsbId"),
)
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbEntry.setStatus("current")
_RcIsisCircuitPlsbIndex_Type = Integer32
_RcIsisCircuitPlsbIndex_Object = MibTableColumn
rcIsisCircuitPlsbIndex = _RcIsisCircuitPlsbIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5, 1, 1),
    _RcIsisCircuitPlsbIndex_Type()
)
rcIsisCircuitPlsbIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbIndex.setStatus("current")


class _RcIsisCircuitPlsbId_Type(Integer32):
    """Custom type rcIsisCircuitPlsbId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcIsisCircuitPlsbId_Type.__name__ = "Integer32"
_RcIsisCircuitPlsbId_Object = MibTableColumn
rcIsisCircuitPlsbId = _RcIsisCircuitPlsbId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5, 1, 2),
    _RcIsisCircuitPlsbId_Type()
)
rcIsisCircuitPlsbId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbId.setStatus("current")
_RcIsisCircuitPlsbRowStatus_Type = RowStatus
_RcIsisCircuitPlsbRowStatus_Object = MibTableColumn
rcIsisCircuitPlsbRowStatus = _RcIsisCircuitPlsbRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5, 1, 3),
    _RcIsisCircuitPlsbRowStatus_Type()
)
rcIsisCircuitPlsbRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbRowStatus.setStatus("current")


class _RcIsisCircuitPlsbState_Type(EnableValue):
    """Custom type rcIsisCircuitPlsbState based on EnableValue"""


_RcIsisCircuitPlsbState_Object = MibTableColumn
rcIsisCircuitPlsbState = _RcIsisCircuitPlsbState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5, 1, 4),
    _RcIsisCircuitPlsbState_Type()
)
rcIsisCircuitPlsbState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbState.setStatus("current")


class _RcIsisCircuitPlsbType_Type(Integer32):
    """Custom type rcIsisCircuitPlsbType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bcast", 1),
          ("ptpt", 2))
    )


_RcIsisCircuitPlsbType_Type.__name__ = "Integer32"
_RcIsisCircuitPlsbType_Object = MibTableColumn
rcIsisCircuitPlsbType = _RcIsisCircuitPlsbType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5, 1, 5),
    _RcIsisCircuitPlsbType_Type()
)
rcIsisCircuitPlsbType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbType.setStatus("current")


class _RcIsisCircuitPlsbL1Metric_Type(IsisDefaultL1Metric):
    """Custom type rcIsisCircuitPlsbL1Metric based on IsisDefaultL1Metric"""
    defaultValue = 10


_RcIsisCircuitPlsbL1Metric_Object = MibTableColumn
rcIsisCircuitPlsbL1Metric = _RcIsisCircuitPlsbL1Metric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5, 1, 6),
    _RcIsisCircuitPlsbL1Metric_Type()
)
rcIsisCircuitPlsbL1Metric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbL1Metric.setStatus("current")


class _RcIsisCircuitPlsbWideL1Metric_Type(IsisWideL1Metric):
    """Custom type rcIsisCircuitPlsbWideL1Metric based on IsisWideL1Metric"""
    defaultValue = 10


_RcIsisCircuitPlsbWideL1Metric_Object = MibTableColumn
rcIsisCircuitPlsbWideL1Metric = _RcIsisCircuitPlsbWideL1Metric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 5, 1, 7),
    _RcIsisCircuitPlsbWideL1Metric_Type()
)
rcIsisCircuitPlsbWideL1Metric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIsisCircuitPlsbWideL1Metric.setStatus("current")
_RcIsisPlsbUnicastFibTable_Object = MibTable
rcIsisPlsbUnicastFibTable = _RcIsisPlsbUnicastFibTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 6)
)
if mibBuilder.loadTexts:
    rcIsisPlsbUnicastFibTable.setStatus("obsolete")
_RcIsisPlsbUnicastFibEntry_Object = MibTableRow
rcIsisPlsbUnicastFibEntry = _RcIsisPlsbUnicastFibEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 6, 1)
)
rcIsisPlsbUnicastFibEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisPlsbUnicastFibDestinationMacAddr"),
    (0, "RAPID-CITY", "rcIsisPlsbUnicastFibVlan"),
    (0, "RAPID-CITY", "rcIsisPlsbUnicastFibSysId"),
)
if mibBuilder.loadTexts:
    rcIsisPlsbUnicastFibEntry.setStatus("obsolete")
_RcIsisPlsbUnicastFibDestinationMacAddr_Type = MacAddress
_RcIsisPlsbUnicastFibDestinationMacAddr_Object = MibTableColumn
rcIsisPlsbUnicastFibDestinationMacAddr = _RcIsisPlsbUnicastFibDestinationMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 6, 1, 1),
    _RcIsisPlsbUnicastFibDestinationMacAddr_Type()
)
rcIsisPlsbUnicastFibDestinationMacAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbUnicastFibDestinationMacAddr.setStatus("obsolete")


class _RcIsisPlsbUnicastFibVlan_Type(Integer32):
    """Custom type rcIsisPlsbUnicastFibVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisPlsbUnicastFibVlan_Type.__name__ = "Integer32"
_RcIsisPlsbUnicastFibVlan_Object = MibTableColumn
rcIsisPlsbUnicastFibVlan = _RcIsisPlsbUnicastFibVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 6, 1, 2),
    _RcIsisPlsbUnicastFibVlan_Type()
)
rcIsisPlsbUnicastFibVlan.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbUnicastFibVlan.setStatus("obsolete")


class _RcIsisPlsbUnicastFibSysId_Type(OctetString):
    """Custom type rcIsisPlsbUnicastFibSysId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIsisPlsbUnicastFibSysId_Type.__name__ = "OctetString"
_RcIsisPlsbUnicastFibSysId_Object = MibTableColumn
rcIsisPlsbUnicastFibSysId = _RcIsisPlsbUnicastFibSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 6, 1, 3),
    _RcIsisPlsbUnicastFibSysId_Type()
)
rcIsisPlsbUnicastFibSysId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbUnicastFibSysId.setStatus("obsolete")
_RcIsisPlsbUnicastFibOutgoingPort_Type = InterfaceIndex
_RcIsisPlsbUnicastFibOutgoingPort_Object = MibTableColumn
rcIsisPlsbUnicastFibOutgoingPort = _RcIsisPlsbUnicastFibOutgoingPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 6, 1, 4),
    _RcIsisPlsbUnicastFibOutgoingPort_Type()
)
rcIsisPlsbUnicastFibOutgoingPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbUnicastFibOutgoingPort.setStatus("obsolete")
_RcIsisPlsbMulticastFibTable_Object = MibTable
rcIsisPlsbMulticastFibTable = _RcIsisPlsbMulticastFibTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 7)
)
if mibBuilder.loadTexts:
    rcIsisPlsbMulticastFibTable.setStatus("obsolete")
_RcIsisPlsbMulticastFibEntry_Object = MibTableRow
rcIsisPlsbMulticastFibEntry = _RcIsisPlsbMulticastFibEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 7, 1)
)
rcIsisPlsbMulticastFibEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisPlsbMulticastFibMcastDestMacAddr"),
    (0, "RAPID-CITY", "rcIsisPlsbMulticastFibVlan"),
    (0, "RAPID-CITY", "rcIsisPlsbMulticastFibSysId"),
)
if mibBuilder.loadTexts:
    rcIsisPlsbMulticastFibEntry.setStatus("obsolete")
_RcIsisPlsbMulticastFibMcastDestMacAddr_Type = MacAddress
_RcIsisPlsbMulticastFibMcastDestMacAddr_Object = MibTableColumn
rcIsisPlsbMulticastFibMcastDestMacAddr = _RcIsisPlsbMulticastFibMcastDestMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 7, 1, 1),
    _RcIsisPlsbMulticastFibMcastDestMacAddr_Type()
)
rcIsisPlsbMulticastFibMcastDestMacAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbMulticastFibMcastDestMacAddr.setStatus("obsolete")


class _RcIsisPlsbMulticastFibVlan_Type(Integer32):
    """Custom type rcIsisPlsbMulticastFibVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisPlsbMulticastFibVlan_Type.__name__ = "Integer32"
_RcIsisPlsbMulticastFibVlan_Object = MibTableColumn
rcIsisPlsbMulticastFibVlan = _RcIsisPlsbMulticastFibVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 7, 1, 2),
    _RcIsisPlsbMulticastFibVlan_Type()
)
rcIsisPlsbMulticastFibVlan.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbMulticastFibVlan.setStatus("obsolete")


class _RcIsisPlsbMulticastFibSysId_Type(OctetString):
    """Custom type rcIsisPlsbMulticastFibSysId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIsisPlsbMulticastFibSysId_Type.__name__ = "OctetString"
_RcIsisPlsbMulticastFibSysId_Object = MibTableColumn
rcIsisPlsbMulticastFibSysId = _RcIsisPlsbMulticastFibSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 7, 1, 3),
    _RcIsisPlsbMulticastFibSysId_Type()
)
rcIsisPlsbMulticastFibSysId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbMulticastFibSysId.setStatus("obsolete")


class _RcIsisPlsbMulticastFibIsid_Type(Integer32):
    """Custom type rcIsisPlsbMulticastFibIsid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_RcIsisPlsbMulticastFibIsid_Type.__name__ = "Integer32"
_RcIsisPlsbMulticastFibIsid_Object = MibTableColumn
rcIsisPlsbMulticastFibIsid = _RcIsisPlsbMulticastFibIsid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 7, 1, 4),
    _RcIsisPlsbMulticastFibIsid_Type()
)
rcIsisPlsbMulticastFibIsid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbMulticastFibIsid.setStatus("obsolete")
_RcIsisPlsbMulticastFibOutgoingPorts_Type = DisplayString
_RcIsisPlsbMulticastFibOutgoingPorts_Object = MibTableColumn
rcIsisPlsbMulticastFibOutgoingPorts = _RcIsisPlsbMulticastFibOutgoingPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 7, 1, 5),
    _RcIsisPlsbMulticastFibOutgoingPorts_Type()
)
rcIsisPlsbMulticastFibOutgoingPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbMulticastFibOutgoingPorts.setStatus("obsolete")
_RcIsisPlsbIsidTable_Object = MibTable
rcIsisPlsbIsidTable = _RcIsisPlsbIsidTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 8)
)
if mibBuilder.loadTexts:
    rcIsisPlsbIsidTable.setStatus("obsolete")
_RcIsisPlsbIsidEntry_Object = MibTableRow
rcIsisPlsbIsidEntry = _RcIsisPlsbIsidEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 8, 1)
)
rcIsisPlsbIsidEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisPlsbIsidSourceName"),
    (0, "RAPID-CITY", "rcIsisPlsbIsidId"),
    (0, "RAPID-CITY", "rcIsisPlsbIsidSysId"),
)
if mibBuilder.loadTexts:
    rcIsisPlsbIsidEntry.setStatus("obsolete")


class _RcIsisPlsbIsidSourceName_Type(Integer32):
    """Custom type rcIsisPlsbIsidSourceName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_RcIsisPlsbIsidSourceName_Type.__name__ = "Integer32"
_RcIsisPlsbIsidSourceName_Object = MibTableColumn
rcIsisPlsbIsidSourceName = _RcIsisPlsbIsidSourceName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 8, 1, 1),
    _RcIsisPlsbIsidSourceName_Type()
)
rcIsisPlsbIsidSourceName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIsidSourceName.setStatus("obsolete")


class _RcIsisPlsbIsidId_Type(Integer32):
    """Custom type rcIsisPlsbIsidId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_RcIsisPlsbIsidId_Type.__name__ = "Integer32"
_RcIsisPlsbIsidId_Object = MibTableColumn
rcIsisPlsbIsidId = _RcIsisPlsbIsidId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 8, 1, 2),
    _RcIsisPlsbIsidId_Type()
)
rcIsisPlsbIsidId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIsidId.setStatus("obsolete")


class _RcIsisPlsbIsidSysId_Type(OctetString):
    """Custom type rcIsisPlsbIsidSysId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIsisPlsbIsidSysId_Type.__name__ = "OctetString"
_RcIsisPlsbIsidSysId_Object = MibTableColumn
rcIsisPlsbIsidSysId = _RcIsisPlsbIsidSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 8, 1, 3),
    _RcIsisPlsbIsidSysId_Type()
)
rcIsisPlsbIsidSysId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIsidSysId.setStatus("obsolete")


class _RcIsisPlsbIsidType_Type(Integer32):
    """Custom type rcIsisPlsbIsidType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("config", 1),
          ("discover", 2))
    )


_RcIsisPlsbIsidType_Type.__name__ = "Integer32"
_RcIsisPlsbIsidType_Object = MibTableColumn
rcIsisPlsbIsidType = _RcIsisPlsbIsidType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 8, 1, 4),
    _RcIsisPlsbIsidType_Type()
)
rcIsisPlsbIsidType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbIsidType.setStatus("obsolete")
_RcIsisTrap_ObjectIdentity = ObjectIdentity
rcIsisTrap = _RcIsisTrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9)
)


class _RcIsisLocalLspId_Type(DisplayString):
    """Custom type rcIsisLocalLspId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RcIsisLocalLspId_Type.__name__ = "DisplayString"
_RcIsisLocalLspId_Object = MibScalar
rcIsisLocalLspId = _RcIsisLocalLspId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 1),
    _RcIsisLocalLspId_Type()
)
rcIsisLocalLspId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalLspId.setStatus("current")
_RcIsisLocall1Metric_Type = IsisDefaultL1Metric
_RcIsisLocall1Metric_Object = MibScalar
rcIsisLocall1Metric = _RcIsisLocall1Metric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 2),
    _RcIsisLocall1Metric_Type()
)
rcIsisLocall1Metric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocall1Metric.setStatus("current")


class _RcIsisNgbLspId_Type(DisplayString):
    """Custom type rcIsisNgbLspId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RcIsisNgbLspId_Type.__name__ = "DisplayString"
_RcIsisNgbLspId_Object = MibScalar
rcIsisNgbLspId = _RcIsisNgbLspId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 3),
    _RcIsisNgbLspId_Type()
)
rcIsisNgbLspId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbLspId.setStatus("current")
_RcIsisNgbl1Metric_Type = IsisDefaultL1Metric
_RcIsisNgbl1Metric_Object = MibScalar
rcIsisNgbl1Metric = _RcIsisNgbl1Metric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 4),
    _RcIsisNgbl1Metric_Type()
)
rcIsisNgbl1Metric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbl1Metric.setStatus("current")


class _RcIsisPlsbTrapType_Type(Integer32):
    """Custom type rcIsisPlsbTrapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("adjState", 8),
          ("bvidMismatch", 5),
          ("duplicateNickname", 4),
          ("duplicateSysid", 2),
          ("lsdbUpdate", 3),
          ("metricMismatch", 1),
          ("multiLinkAdj", 10),
          ("smltPeerBmacMismatch", 7),
          ("smltSplitBebMismatch", 9),
          ("smltVirtBmacMismatch", 6))
    )


_RcIsisPlsbTrapType_Type.__name__ = "Integer32"
_RcIsisPlsbTrapType_Object = MibScalar
rcIsisPlsbTrapType = _RcIsisPlsbTrapType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 5),
    _RcIsisPlsbTrapType_Type()
)
rcIsisPlsbTrapType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbTrapType.setStatus("current")


class _RcIsisLocalSysId_Type(DisplayString):
    """Custom type rcIsisLocalSysId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_RcIsisLocalSysId_Type.__name__ = "DisplayString"
_RcIsisLocalSysId_Object = MibScalar
rcIsisLocalSysId = _RcIsisLocalSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 6),
    _RcIsisLocalSysId_Type()
)
rcIsisLocalSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalSysId.setStatus("current")
_RcIsisLocalInterface_Type = Integer32
_RcIsisLocalInterface_Object = MibScalar
rcIsisLocalInterface = _RcIsisLocalInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 7),
    _RcIsisLocalInterface_Type()
)
rcIsisLocalInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalInterface.setStatus("current")


class _RcIsisTrapIndicator_Type(Integer32):
    """Custom type rcIsisTrapIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 1),
          ("clear", 2))
    )


_RcIsisTrapIndicator_Type.__name__ = "Integer32"
_RcIsisTrapIndicator_Object = MibScalar
rcIsisTrapIndicator = _RcIsisTrapIndicator_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 8),
    _RcIsisTrapIndicator_Type()
)
rcIsisTrapIndicator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisTrapIndicator.setStatus("current")


class _RcIsisLocalNickname_Type(DisplayString):
    """Custom type rcIsisLocalNickname based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(7, 7),
    )


_RcIsisLocalNickname_Type.__name__ = "DisplayString"
_RcIsisLocalNickname_Object = MibScalar
rcIsisLocalNickname = _RcIsisLocalNickname_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 9),
    _RcIsisLocalNickname_Type()
)
rcIsisLocalNickname.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalNickname.setStatus("current")


class _RcIsisNgbNickname_Type(DisplayString):
    """Custom type rcIsisNgbNickname based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(7, 7),
    )


_RcIsisNgbNickname_Type.__name__ = "DisplayString"
_RcIsisNgbNickname_Object = MibScalar
rcIsisNgbNickname = _RcIsisNgbNickname_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 10),
    _RcIsisNgbNickname_Type()
)
rcIsisNgbNickname.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbNickname.setStatus("current")


class _RcIsisNgbSysId_Type(DisplayString):
    """Custom type rcIsisNgbSysId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_RcIsisNgbSysId_Type.__name__ = "DisplayString"
_RcIsisNgbSysId_Object = MibScalar
rcIsisNgbSysId = _RcIsisNgbSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 11),
    _RcIsisNgbSysId_Type()
)
rcIsisNgbSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbSysId.setStatus("current")
_RcIsisLocalPrimaryBvid_Type = IsisPlsbBvid
_RcIsisLocalPrimaryBvid_Object = MibScalar
rcIsisLocalPrimaryBvid = _RcIsisLocalPrimaryBvid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 12),
    _RcIsisLocalPrimaryBvid_Type()
)
rcIsisLocalPrimaryBvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalPrimaryBvid.setStatus("current")
_RcIsisLocalPrimaryTieBrkAlg_Type = IsisPlsbBvidTieBrkAlg
_RcIsisLocalPrimaryTieBrkAlg_Object = MibScalar
rcIsisLocalPrimaryTieBrkAlg = _RcIsisLocalPrimaryTieBrkAlg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 13),
    _RcIsisLocalPrimaryTieBrkAlg_Type()
)
rcIsisLocalPrimaryTieBrkAlg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalPrimaryTieBrkAlg.setStatus("current")
_RcIsisLocalSecondaryBvid_Type = IsisPlsbBvid
_RcIsisLocalSecondaryBvid_Object = MibScalar
rcIsisLocalSecondaryBvid = _RcIsisLocalSecondaryBvid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 14),
    _RcIsisLocalSecondaryBvid_Type()
)
rcIsisLocalSecondaryBvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalSecondaryBvid.setStatus("current")
_RcIsisLocalSecondaryTieBrkAlg_Type = IsisPlsbBvidTieBrkAlg
_RcIsisLocalSecondaryTieBrkAlg_Object = MibScalar
rcIsisLocalSecondaryTieBrkAlg = _RcIsisLocalSecondaryTieBrkAlg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 15),
    _RcIsisLocalSecondaryTieBrkAlg_Type()
)
rcIsisLocalSecondaryTieBrkAlg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalSecondaryTieBrkAlg.setStatus("current")
_RcIsisNgbPrimaryBvid_Type = IsisPlsbBvid
_RcIsisNgbPrimaryBvid_Object = MibScalar
rcIsisNgbPrimaryBvid = _RcIsisNgbPrimaryBvid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 16),
    _RcIsisNgbPrimaryBvid_Type()
)
rcIsisNgbPrimaryBvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbPrimaryBvid.setStatus("current")
_RcIsisNgbPrimaryTieBrkAlg_Type = IsisPlsbBvidTieBrkAlg
_RcIsisNgbPrimaryTieBrkAlg_Object = MibScalar
rcIsisNgbPrimaryTieBrkAlg = _RcIsisNgbPrimaryTieBrkAlg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 17),
    _RcIsisNgbPrimaryTieBrkAlg_Type()
)
rcIsisNgbPrimaryTieBrkAlg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbPrimaryTieBrkAlg.setStatus("current")
_RcIsisNgbSecondaryBvid_Type = IsisPlsbBvid
_RcIsisNgbSecondaryBvid_Object = MibScalar
rcIsisNgbSecondaryBvid = _RcIsisNgbSecondaryBvid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 18),
    _RcIsisNgbSecondaryBvid_Type()
)
rcIsisNgbSecondaryBvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbSecondaryBvid.setStatus("current")
_RcIsisNgbSecondaryTieBrkAlg_Type = IsisPlsbBvidTieBrkAlg
_RcIsisNgbSecondaryTieBrkAlg_Object = MibScalar
rcIsisNgbSecondaryTieBrkAlg = _RcIsisNgbSecondaryTieBrkAlg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 19),
    _RcIsisNgbSecondaryTieBrkAlg_Type()
)
rcIsisNgbSecondaryTieBrkAlg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbSecondaryTieBrkAlg.setStatus("current")
_RcIsisLocalVirtualBmac_Type = MacAddress
_RcIsisLocalVirtualBmac_Object = MibScalar
rcIsisLocalVirtualBmac = _RcIsisLocalVirtualBmac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 20),
    _RcIsisLocalVirtualBmac_Type()
)
rcIsisLocalVirtualBmac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalVirtualBmac.setStatus("current")
_RcIsisPeerVirtualBmac_Type = MacAddress
_RcIsisPeerVirtualBmac_Object = MibScalar
rcIsisPeerVirtualBmac = _RcIsisPeerVirtualBmac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 21),
    _RcIsisPeerVirtualBmac_Type()
)
rcIsisPeerVirtualBmac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPeerVirtualBmac.setStatus("current")


class _RcIsisSysId_Type(DisplayString):
    """Custom type rcIsisSysId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_RcIsisSysId_Type.__name__ = "DisplayString"
_RcIsisSysId_Object = MibScalar
rcIsisSysId = _RcIsisSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 22),
    _RcIsisSysId_Type()
)
rcIsisSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSysId.setStatus("current")


class _RcIsisSmltPeerSysId_Type(DisplayString):
    """Custom type rcIsisSmltPeerSysId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_RcIsisSmltPeerSysId_Type.__name__ = "DisplayString"
_RcIsisSmltPeerSysId_Object = MibScalar
rcIsisSmltPeerSysId = _RcIsisSmltPeerSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 23),
    _RcIsisSmltPeerSysId_Type()
)
rcIsisSmltPeerSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSmltPeerSysId.setStatus("current")


class _RcIsisAdjState_Type(Integer32):
    """Custom type rcIsisAdjState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 4),
          ("init", 2),
          ("up", 3))
    )


_RcIsisAdjState_Type.__name__ = "Integer32"
_RcIsisAdjState_Object = MibScalar
rcIsisAdjState = _RcIsisAdjState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 24),
    _RcIsisAdjState_Type()
)
rcIsisAdjState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisAdjState.setStatus("current")
_RcIsisDuplicateNnameCounter_Type = Integer32
_RcIsisDuplicateNnameCounter_Object = MibScalar
rcIsisDuplicateNnameCounter = _RcIsisDuplicateNnameCounter_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 25),
    _RcIsisDuplicateNnameCounter_Type()
)
rcIsisDuplicateNnameCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisDuplicateNnameCounter.setStatus("current")
_RcIsisLocalBvidCounter_Type = Integer32
_RcIsisLocalBvidCounter_Object = MibScalar
rcIsisLocalBvidCounter = _RcIsisLocalBvidCounter_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 26),
    _RcIsisLocalBvidCounter_Type()
)
rcIsisLocalBvidCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalBvidCounter.setStatus("current")
_RcIsisNgbBvidCounter_Type = Integer32
_RcIsisNgbBvidCounter_Object = MibScalar
rcIsisNgbBvidCounter = _RcIsisNgbBvidCounter_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 27),
    _RcIsisNgbBvidCounter_Type()
)
rcIsisNgbBvidCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbBvidCounter.setStatus("current")


class _RcIsisLocalSmltSplitBeb_Type(Integer32):
    """Custom type rcIsisLocalSmltSplitBeb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2))
    )


_RcIsisLocalSmltSplitBeb_Type.__name__ = "Integer32"
_RcIsisLocalSmltSplitBeb_Object = MibScalar
rcIsisLocalSmltSplitBeb = _RcIsisLocalSmltSplitBeb_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 28),
    _RcIsisLocalSmltSplitBeb_Type()
)
rcIsisLocalSmltSplitBeb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalSmltSplitBeb.setStatus("current")


class _RcIsisPeerSmltSplitBeb_Type(Integer32):
    """Custom type rcIsisPeerSmltSplitBeb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2))
    )


_RcIsisPeerSmltSplitBeb_Type.__name__ = "Integer32"
_RcIsisPeerSmltSplitBeb_Object = MibScalar
rcIsisPeerSmltSplitBeb = _RcIsisPeerSmltSplitBeb_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 29),
    _RcIsisPeerSmltSplitBeb_Type()
)
rcIsisPeerSmltSplitBeb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPeerSmltSplitBeb.setStatus("current")


class _RcIsisLocalHostName_Type(OctetString):
    """Custom type rcIsisLocalHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisLocalHostName_Type.__name__ = "OctetString"
_RcIsisLocalHostName_Object = MibScalar
rcIsisLocalHostName = _RcIsisLocalHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 30),
    _RcIsisLocalHostName_Type()
)
rcIsisLocalHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLocalHostName.setStatus("current")


class _RcIsisNgbHostName_Type(OctetString):
    """Custom type rcIsisNgbHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisNgbHostName_Type.__name__ = "OctetString"
_RcIsisNgbHostName_Object = MibScalar
rcIsisNgbHostName = _RcIsisNgbHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 31),
    _RcIsisNgbHostName_Type()
)
rcIsisNgbHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisNgbHostName.setStatus("current")
_RcIsisPrevInterface_Type = Integer32
_RcIsisPrevInterface_Object = MibScalar
rcIsisPrevInterface = _RcIsisPrevInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 9, 32),
    _RcIsisPrevInterface_Type()
)
rcIsisPrevInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPrevInterface.setStatus("current")
_RcIsisAdjTable_Object = MibTable
rcIsisAdjTable = _RcIsisAdjTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 10)
)
if mibBuilder.loadTexts:
    rcIsisAdjTable.setStatus("current")
_RcIsisAdjEntry_Object = MibTableRow
rcIsisAdjEntry = _RcIsisAdjEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 10, 1)
)
rcIsisAdjEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisAdjCircIndex"),
    (0, "RAPID-CITY", "rcIsisAdjIndex"),
)
if mibBuilder.loadTexts:
    rcIsisAdjEntry.setStatus("current")
_RcIsisAdjCircIndex_Type = Integer32
_RcIsisAdjCircIndex_Object = MibTableColumn
rcIsisAdjCircIndex = _RcIsisAdjCircIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 10, 1, 1),
    _RcIsisAdjCircIndex_Type()
)
rcIsisAdjCircIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisAdjCircIndex.setStatus("current")


class _RcIsisAdjIndex_Type(Unsigned32):
    """Custom type rcIsisAdjIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcIsisAdjIndex_Type.__name__ = "Unsigned32"
_RcIsisAdjIndex_Object = MibTableColumn
rcIsisAdjIndex = _RcIsisAdjIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 10, 1, 2),
    _RcIsisAdjIndex_Type()
)
rcIsisAdjIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisAdjIndex.setStatus("current")


class _RcIsisAdjHostName_Type(OctetString):
    """Custom type rcIsisAdjHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisAdjHostName_Type.__name__ = "OctetString"
_RcIsisAdjHostName_Object = MibTableColumn
rcIsisAdjHostName = _RcIsisAdjHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 10, 1, 3),
    _RcIsisAdjHostName_Type()
)
rcIsisAdjHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisAdjHostName.setStatus("current")
_RcIsisAdjIfIndex_Type = InterfaceIndex
_RcIsisAdjIfIndex_Object = MibTableColumn
rcIsisAdjIfIndex = _RcIsisAdjIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 10, 1, 4),
    _RcIsisAdjIfIndex_Type()
)
rcIsisAdjIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisAdjIfIndex.setStatus("current")
_RcIsisLSPTable_Object = MibTable
rcIsisLSPTable = _RcIsisLSPTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 11)
)
if mibBuilder.loadTexts:
    rcIsisLSPTable.setStatus("current")
_RcIsisLSPEntry_Object = MibTableRow
rcIsisLSPEntry = _RcIsisLSPEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 11, 1)
)
rcIsisLSPEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisLSPLevel"),
    (0, "RAPID-CITY", "rcIsisLSPID"),
)
if mibBuilder.loadTexts:
    rcIsisLSPEntry.setStatus("current")


class _RcIsisLSPLevel_Type(Integer32):
    """Custom type rcIsisLSPLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("area", 1),
          ("domain", 2))
    )


_RcIsisLSPLevel_Type.__name__ = "Integer32"
_RcIsisLSPLevel_Object = MibTableColumn
rcIsisLSPLevel = _RcIsisLSPLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 11, 1, 1),
    _RcIsisLSPLevel_Type()
)
rcIsisLSPLevel.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisLSPLevel.setStatus("current")


class _RcIsisLSPID_Type(OctetString):
    """Custom type rcIsisLSPID based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RcIsisLSPID_Type.__name__ = "OctetString"
_RcIsisLSPID_Object = MibTableColumn
rcIsisLSPID = _RcIsisLSPID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 11, 1, 2),
    _RcIsisLSPID_Type()
)
rcIsisLSPID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisLSPID.setStatus("current")
_RcIsisLSPSeq_Type = Unsigned32
_RcIsisLSPSeq_Object = MibTableColumn
rcIsisLSPSeq = _RcIsisLSPSeq_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 11, 1, 3),
    _RcIsisLSPSeq_Type()
)
rcIsisLSPSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLSPSeq.setStatus("current")


class _RcIsisLSPHostName_Type(OctetString):
    """Custom type rcIsisLSPHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisLSPHostName_Type.__name__ = "OctetString"
_RcIsisLSPHostName_Object = MibTableColumn
rcIsisLSPHostName = _RcIsisLSPHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 11, 1, 4),
    _RcIsisLSPHostName_Type()
)
rcIsisLSPHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLSPHostName.setStatus("current")


class _RcIsisLSPNickName_Type(Integer32):
    """Custom type rcIsisLSPNickName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_RcIsisLSPNickName_Type.__name__ = "Integer32"
_RcIsisLSPNickName_Object = MibTableColumn
rcIsisLSPNickName = _RcIsisLSPNickName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 11, 1, 5),
    _RcIsisLSPNickName_Type()
)
rcIsisLSPNickName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLSPNickName.setStatus("current")
_RcIsisLSPLifetimeRemain_Type = Unsigned32
_RcIsisLSPLifetimeRemain_Object = MibTableColumn
rcIsisLSPLifetimeRemain = _RcIsisLSPLifetimeRemain_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 11, 1, 6),
    _RcIsisLSPLifetimeRemain_Type()
)
rcIsisLSPLifetimeRemain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisLSPLifetimeRemain.setStatus("current")
if mibBuilder.loadTexts:
    rcIsisLSPLifetimeRemain.setUnits("seconds")
_RcIsisPlsbIpUnicastFibTable_Object = MibTable
rcIsisPlsbIpUnicastFibTable = _RcIsisPlsbIpUnicastFibTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12)
)
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibTable.setStatus("current")
_RcIsisPlsbIpUnicastFibEntry_Object = MibTableRow
rcIsisPlsbIpUnicastFibEntry = _RcIsisPlsbIpUnicastFibEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1)
)
rcIsisPlsbIpUnicastFibEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisPlsbIpUnicastFibVrfId"),
    (0, "RAPID-CITY", "rcIsisPlsbIpUnicastFibDestinationIpAddrType"),
    (0, "RAPID-CITY", "rcIsisPlsbIpUnicastFibDestinationIpAddr"),
    (0, "RAPID-CITY", "rcIsisPlsbIpUnicastFibDestinationMask"),
    (0, "RAPID-CITY", "rcIsisPlsbIpUnicastFibNextHopBmac"),
    (0, "RAPID-CITY", "rcIsisPlsbIpUnicastFibVlan"),
)
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibEntry.setStatus("current")
_RcIsisPlsbIpUnicastFibVrfId_Type = Integer32
_RcIsisPlsbIpUnicastFibVrfId_Object = MibTableColumn
rcIsisPlsbIpUnicastFibVrfId = _RcIsisPlsbIpUnicastFibVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 1),
    _RcIsisPlsbIpUnicastFibVrfId_Type()
)
rcIsisPlsbIpUnicastFibVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibVrfId.setStatus("current")
_RcIsisPlsbIpUnicastFibDestinationIpAddrType_Type = InetAddressType
_RcIsisPlsbIpUnicastFibDestinationIpAddrType_Object = MibTableColumn
rcIsisPlsbIpUnicastFibDestinationIpAddrType = _RcIsisPlsbIpUnicastFibDestinationIpAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 2),
    _RcIsisPlsbIpUnicastFibDestinationIpAddrType_Type()
)
rcIsisPlsbIpUnicastFibDestinationIpAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibDestinationIpAddrType.setStatus("current")


class _RcIsisPlsbIpUnicastFibDestinationIpAddr_Type(InetAddress):
    """Custom type rcIsisPlsbIpUnicastFibDestinationIpAddr based on InetAddress"""
    subtypeSpec = InetAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
        ValueSizeConstraint(16, 16),
    )


_RcIsisPlsbIpUnicastFibDestinationIpAddr_Type.__name__ = "InetAddress"
_RcIsisPlsbIpUnicastFibDestinationIpAddr_Object = MibTableColumn
rcIsisPlsbIpUnicastFibDestinationIpAddr = _RcIsisPlsbIpUnicastFibDestinationIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 3),
    _RcIsisPlsbIpUnicastFibDestinationIpAddr_Type()
)
rcIsisPlsbIpUnicastFibDestinationIpAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibDestinationIpAddr.setStatus("current")
_RcIsisPlsbIpUnicastFibDestinationMask_Type = InetAddressPrefixLength
_RcIsisPlsbIpUnicastFibDestinationMask_Object = MibTableColumn
rcIsisPlsbIpUnicastFibDestinationMask = _RcIsisPlsbIpUnicastFibDestinationMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 4),
    _RcIsisPlsbIpUnicastFibDestinationMask_Type()
)
rcIsisPlsbIpUnicastFibDestinationMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibDestinationMask.setStatus("current")
_RcIsisPlsbIpUnicastFibNextHopBmac_Type = MacAddress
_RcIsisPlsbIpUnicastFibNextHopBmac_Object = MibTableColumn
rcIsisPlsbIpUnicastFibNextHopBmac = _RcIsisPlsbIpUnicastFibNextHopBmac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 5),
    _RcIsisPlsbIpUnicastFibNextHopBmac_Type()
)
rcIsisPlsbIpUnicastFibNextHopBmac.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibNextHopBmac.setStatus("current")


class _RcIsisPlsbIpUnicastFibVlan_Type(Integer32):
    """Custom type rcIsisPlsbIpUnicastFibVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisPlsbIpUnicastFibVlan_Type.__name__ = "Integer32"
_RcIsisPlsbIpUnicastFibVlan_Object = MibTableColumn
rcIsisPlsbIpUnicastFibVlan = _RcIsisPlsbIpUnicastFibVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 6),
    _RcIsisPlsbIpUnicastFibVlan_Type()
)
rcIsisPlsbIpUnicastFibVlan.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibVlan.setStatus("current")
_RcIsisPlsbIpUnicastFibIsid_Type = Integer32
_RcIsisPlsbIpUnicastFibIsid_Object = MibTableColumn
rcIsisPlsbIpUnicastFibIsid = _RcIsisPlsbIpUnicastFibIsid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 7),
    _RcIsisPlsbIpUnicastFibIsid_Type()
)
rcIsisPlsbIpUnicastFibIsid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibIsid.setStatus("current")
_RcIsisPlsbIpUnicastFibNextHopName_Type = DisplayString
_RcIsisPlsbIpUnicastFibNextHopName_Object = MibTableColumn
rcIsisPlsbIpUnicastFibNextHopName = _RcIsisPlsbIpUnicastFibNextHopName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 8),
    _RcIsisPlsbIpUnicastFibNextHopName_Type()
)
rcIsisPlsbIpUnicastFibNextHopName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibNextHopName.setStatus("current")
_RcIsisPlsbIpUnicastFibOutgoingPort_Type = InterfaceIndex
_RcIsisPlsbIpUnicastFibOutgoingPort_Object = MibTableColumn
rcIsisPlsbIpUnicastFibOutgoingPort = _RcIsisPlsbIpUnicastFibOutgoingPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 9),
    _RcIsisPlsbIpUnicastFibOutgoingPort_Type()
)
rcIsisPlsbIpUnicastFibOutgoingPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibOutgoingPort.setStatus("current")
_RcIsisPlsbIpUnicastFibPrefixCost_Type = Integer32
_RcIsisPlsbIpUnicastFibPrefixCost_Object = MibTableColumn
rcIsisPlsbIpUnicastFibPrefixCost = _RcIsisPlsbIpUnicastFibPrefixCost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 10),
    _RcIsisPlsbIpUnicastFibPrefixCost_Type()
)
rcIsisPlsbIpUnicastFibPrefixCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibPrefixCost.setStatus("current")
_RcIsisPlsbIpUnicastFibSpbmCost_Type = Counter64
_RcIsisPlsbIpUnicastFibSpbmCost_Object = MibTableColumn
rcIsisPlsbIpUnicastFibSpbmCost = _RcIsisPlsbIpUnicastFibSpbmCost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 12, 1, 11),
    _RcIsisPlsbIpUnicastFibSpbmCost_Type()
)
rcIsisPlsbIpUnicastFibSpbmCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbIpUnicastFibSpbmCost.setStatus("current")
_RcIsisPlsbUcastFibTable_Object = MibTable
rcIsisPlsbUcastFibTable = _RcIsisPlsbUcastFibTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 13)
)
if mibBuilder.loadTexts:
    rcIsisPlsbUcastFibTable.setStatus("current")
_RcIsisPlsbUcastFibEntry_Object = MibTableRow
rcIsisPlsbUcastFibEntry = _RcIsisPlsbUcastFibEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 13, 1)
)
rcIsisPlsbUcastFibEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisPlsbUcastFibSysId"),
    (0, "RAPID-CITY", "rcIsisPlsbUcastFibVlan"),
    (0, "RAPID-CITY", "rcIsisPlsbUcastFibDestinationMacAddr"),
)
if mibBuilder.loadTexts:
    rcIsisPlsbUcastFibEntry.setStatus("current")


class _RcIsisPlsbUcastFibSysId_Type(OctetString):
    """Custom type rcIsisPlsbUcastFibSysId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIsisPlsbUcastFibSysId_Type.__name__ = "OctetString"
_RcIsisPlsbUcastFibSysId_Object = MibTableColumn
rcIsisPlsbUcastFibSysId = _RcIsisPlsbUcastFibSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 13, 1, 1),
    _RcIsisPlsbUcastFibSysId_Type()
)
rcIsisPlsbUcastFibSysId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbUcastFibSysId.setStatus("current")


class _RcIsisPlsbUcastFibVlan_Type(Integer32):
    """Custom type rcIsisPlsbUcastFibVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisPlsbUcastFibVlan_Type.__name__ = "Integer32"
_RcIsisPlsbUcastFibVlan_Object = MibTableColumn
rcIsisPlsbUcastFibVlan = _RcIsisPlsbUcastFibVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 13, 1, 2),
    _RcIsisPlsbUcastFibVlan_Type()
)
rcIsisPlsbUcastFibVlan.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbUcastFibVlan.setStatus("current")
_RcIsisPlsbUcastFibDestinationMacAddr_Type = MacAddress
_RcIsisPlsbUcastFibDestinationMacAddr_Object = MibTableColumn
rcIsisPlsbUcastFibDestinationMacAddr = _RcIsisPlsbUcastFibDestinationMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 13, 1, 3),
    _RcIsisPlsbUcastFibDestinationMacAddr_Type()
)
rcIsisPlsbUcastFibDestinationMacAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbUcastFibDestinationMacAddr.setStatus("current")
_RcIsisPlsbUcastFibOutgoingPort_Type = InterfaceIndex
_RcIsisPlsbUcastFibOutgoingPort_Object = MibTableColumn
rcIsisPlsbUcastFibOutgoingPort = _RcIsisPlsbUcastFibOutgoingPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 13, 1, 4),
    _RcIsisPlsbUcastFibOutgoingPort_Type()
)
rcIsisPlsbUcastFibOutgoingPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbUcastFibOutgoingPort.setStatus("current")


class _RcIsisPlsbUcastFibHostName_Type(OctetString):
    """Custom type rcIsisPlsbUcastFibHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisPlsbUcastFibHostName_Type.__name__ = "OctetString"
_RcIsisPlsbUcastFibHostName_Object = MibTableColumn
rcIsisPlsbUcastFibHostName = _RcIsisPlsbUcastFibHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 13, 1, 5),
    _RcIsisPlsbUcastFibHostName_Type()
)
rcIsisPlsbUcastFibHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbUcastFibHostName.setStatus("current")
_RcIsisPlsbUcastFibCost_Type = Counter64
_RcIsisPlsbUcastFibCost_Object = MibTableColumn
rcIsisPlsbUcastFibCost = _RcIsisPlsbUcastFibCost_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 13, 1, 6),
    _RcIsisPlsbUcastFibCost_Type()
)
rcIsisPlsbUcastFibCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbUcastFibCost.setStatus("current")
_RcIsisPlsbMcastFibTable_Object = MibTable
rcIsisPlsbMcastFibTable = _RcIsisPlsbMcastFibTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14)
)
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibTable.setStatus("current")
_RcIsisPlsbMcastFibEntry_Object = MibTableRow
rcIsisPlsbMcastFibEntry = _RcIsisPlsbMcastFibEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1)
)
rcIsisPlsbMcastFibEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisPlsbMcastFibSysId"),
    (0, "RAPID-CITY", "rcIsisPlsbMcastFibVlan"),
    (0, "RAPID-CITY", "rcIsisPlsbMcastFibMcastDestMacAddr"),
)
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibEntry.setStatus("current")


class _RcIsisPlsbMcastFibSysId_Type(OctetString):
    """Custom type rcIsisPlsbMcastFibSysId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIsisPlsbMcastFibSysId_Type.__name__ = "OctetString"
_RcIsisPlsbMcastFibSysId_Object = MibTableColumn
rcIsisPlsbMcastFibSysId = _RcIsisPlsbMcastFibSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1, 1),
    _RcIsisPlsbMcastFibSysId_Type()
)
rcIsisPlsbMcastFibSysId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibSysId.setStatus("current")


class _RcIsisPlsbMcastFibVlan_Type(Integer32):
    """Custom type rcIsisPlsbMcastFibVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisPlsbMcastFibVlan_Type.__name__ = "Integer32"
_RcIsisPlsbMcastFibVlan_Object = MibTableColumn
rcIsisPlsbMcastFibVlan = _RcIsisPlsbMcastFibVlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1, 2),
    _RcIsisPlsbMcastFibVlan_Type()
)
rcIsisPlsbMcastFibVlan.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibVlan.setStatus("current")
_RcIsisPlsbMcastFibMcastDestMacAddr_Type = MacAddress
_RcIsisPlsbMcastFibMcastDestMacAddr_Object = MibTableColumn
rcIsisPlsbMcastFibMcastDestMacAddr = _RcIsisPlsbMcastFibMcastDestMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1, 3),
    _RcIsisPlsbMcastFibMcastDestMacAddr_Type()
)
rcIsisPlsbMcastFibMcastDestMacAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibMcastDestMacAddr.setStatus("current")


class _RcIsisPlsbMcastFibIsid_Type(Integer32):
    """Custom type rcIsisPlsbMcastFibIsid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_RcIsisPlsbMcastFibIsid_Type.__name__ = "Integer32"
_RcIsisPlsbMcastFibIsid_Object = MibTableColumn
rcIsisPlsbMcastFibIsid = _RcIsisPlsbMcastFibIsid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1, 4),
    _RcIsisPlsbMcastFibIsid_Type()
)
rcIsisPlsbMcastFibIsid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibIsid.setStatus("current")


class _RcIsisPlsbMcastFibNickName_Type(Integer32):
    """Custom type rcIsisPlsbMcastFibNickName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_RcIsisPlsbMcastFibNickName_Type.__name__ = "Integer32"
_RcIsisPlsbMcastFibNickName_Object = MibTableColumn
rcIsisPlsbMcastFibNickName = _RcIsisPlsbMcastFibNickName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1, 5),
    _RcIsisPlsbMcastFibNickName_Type()
)
rcIsisPlsbMcastFibNickName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibNickName.setStatus("current")


class _RcIsisPlsbMcastFibType_Type(Integer32):
    """Custom type rcIsisPlsbMcastFibType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("config", 1),
          ("discover", 2))
    )


_RcIsisPlsbMcastFibType_Type.__name__ = "Integer32"
_RcIsisPlsbMcastFibType_Object = MibTableColumn
rcIsisPlsbMcastFibType = _RcIsisPlsbMcastFibType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1, 6),
    _RcIsisPlsbMcastFibType_Type()
)
rcIsisPlsbMcastFibType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibType.setStatus("current")
_RcIsisPlsbMcastFibOutgoingPorts_Type = DisplayString
_RcIsisPlsbMcastFibOutgoingPorts_Object = MibTableColumn
rcIsisPlsbMcastFibOutgoingPorts = _RcIsisPlsbMcastFibOutgoingPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1, 7),
    _RcIsisPlsbMcastFibOutgoingPorts_Type()
)
rcIsisPlsbMcastFibOutgoingPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibOutgoingPorts.setStatus("current")


class _RcIsisPlsbMcastFibHostName_Type(OctetString):
    """Custom type rcIsisPlsbMcastFibHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisPlsbMcastFibHostName_Type.__name__ = "OctetString"
_RcIsisPlsbMcastFibHostName_Object = MibTableColumn
rcIsisPlsbMcastFibHostName = _RcIsisPlsbMcastFibHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 14, 1, 8),
    _RcIsisPlsbMcastFibHostName_Type()
)
rcIsisPlsbMcastFibHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbMcastFibHostName.setStatus("current")
_RcIsisPlsbNodeTable_Object = MibTable
rcIsisPlsbNodeTable = _RcIsisPlsbNodeTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 15)
)
if mibBuilder.loadTexts:
    rcIsisPlsbNodeTable.setStatus("current")
_RcIsisPlsbNodeEntry_Object = MibTableRow
rcIsisPlsbNodeEntry = _RcIsisPlsbNodeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 15, 1)
)
rcIsisPlsbNodeEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisPlsbNodeSysId"),
)
if mibBuilder.loadTexts:
    rcIsisPlsbNodeEntry.setStatus("current")


class _RcIsisPlsbNodeSysId_Type(OctetString):
    """Custom type rcIsisPlsbNodeSysId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIsisPlsbNodeSysId_Type.__name__ = "OctetString"
_RcIsisPlsbNodeSysId_Object = MibTableColumn
rcIsisPlsbNodeSysId = _RcIsisPlsbNodeSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 15, 1, 1),
    _RcIsisPlsbNodeSysId_Type()
)
rcIsisPlsbNodeSysId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisPlsbNodeSysId.setStatus("current")


class _RcIsisPlsbNodePrimaryParentSysId_Type(OctetString):
    """Custom type rcIsisPlsbNodePrimaryParentSysId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIsisPlsbNodePrimaryParentSysId_Type.__name__ = "OctetString"
_RcIsisPlsbNodePrimaryParentSysId_Object = MibTableColumn
rcIsisPlsbNodePrimaryParentSysId = _RcIsisPlsbNodePrimaryParentSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 15, 1, 2),
    _RcIsisPlsbNodePrimaryParentSysId_Type()
)
rcIsisPlsbNodePrimaryParentSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbNodePrimaryParentSysId.setStatus("current")


class _RcIsisPlsbNodePrimaryBvlan_Type(Integer32):
    """Custom type rcIsisPlsbNodePrimaryBvlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisPlsbNodePrimaryBvlan_Type.__name__ = "Integer32"
_RcIsisPlsbNodePrimaryBvlan_Object = MibTableColumn
rcIsisPlsbNodePrimaryBvlan = _RcIsisPlsbNodePrimaryBvlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 15, 1, 3),
    _RcIsisPlsbNodePrimaryBvlan_Type()
)
rcIsisPlsbNodePrimaryBvlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbNodePrimaryBvlan.setStatus("current")


class _RcIsisPlsbNodeSecondaryParentSysId_Type(OctetString):
    """Custom type rcIsisPlsbNodeSecondaryParentSysId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RcIsisPlsbNodeSecondaryParentSysId_Type.__name__ = "OctetString"
_RcIsisPlsbNodeSecondaryParentSysId_Object = MibTableColumn
rcIsisPlsbNodeSecondaryParentSysId = _RcIsisPlsbNodeSecondaryParentSysId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 15, 1, 4),
    _RcIsisPlsbNodeSecondaryParentSysId_Type()
)
rcIsisPlsbNodeSecondaryParentSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbNodeSecondaryParentSysId.setStatus("current")


class _RcIsisPlsbNodeSecondaryBvlan_Type(Integer32):
    """Custom type rcIsisPlsbNodeSecondaryBvlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisPlsbNodeSecondaryBvlan_Type.__name__ = "Integer32"
_RcIsisPlsbNodeSecondaryBvlan_Object = MibTableColumn
rcIsisPlsbNodeSecondaryBvlan = _RcIsisPlsbNodeSecondaryBvlan_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 15, 1, 5),
    _RcIsisPlsbNodeSecondaryBvlan_Type()
)
rcIsisPlsbNodeSecondaryBvlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisPlsbNodeSecondaryBvlan.setStatus("current")
_RcIsisSpbmPortDropStatsTable_Object = MibTable
rcIsisSpbmPortDropStatsTable = _RcIsisSpbmPortDropStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16)
)
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsTable.setStatus("current")
_RcIsisSpbmPortDropStatsEntry_Object = MibTableRow
rcIsisSpbmPortDropStatsEntry = _RcIsisSpbmPortDropStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1)
)
rcIsisSpbmPortDropStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIsisSpbmPortDropStatsPortIndex"),
    (0, "RAPID-CITY", "rcIsisSpbmPortDropStatsVlanId"),
)
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsEntry.setStatus("current")
_RcIsisSpbmPortDropStatsPortIndex_Type = InterfaceIndex
_RcIsisSpbmPortDropStatsPortIndex_Object = MibTableColumn
rcIsisSpbmPortDropStatsPortIndex = _RcIsisSpbmPortDropStatsPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 1),
    _RcIsisSpbmPortDropStatsPortIndex_Type()
)
rcIsisSpbmPortDropStatsPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsPortIndex.setStatus("current")


class _RcIsisSpbmPortDropStatsVlanId_Type(Integer32):
    """Custom type rcIsisSpbmPortDropStatsVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcIsisSpbmPortDropStatsVlanId_Type.__name__ = "Integer32"
_RcIsisSpbmPortDropStatsVlanId_Object = MibTableColumn
rcIsisSpbmPortDropStatsVlanId = _RcIsisSpbmPortDropStatsVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 2),
    _RcIsisSpbmPortDropStatsVlanId_Type()
)
rcIsisSpbmPortDropStatsVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsVlanId.setStatus("current")


class _RcIsisSpbmPortDropStatsVlanType_Type(Integer32):
    """Custom type rcIsisSpbmPortDropStatsVlanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2))
    )


_RcIsisSpbmPortDropStatsVlanType_Type.__name__ = "Integer32"
_RcIsisSpbmPortDropStatsVlanType_Object = MibTableColumn
rcIsisSpbmPortDropStatsVlanType = _RcIsisSpbmPortDropStatsVlanType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 3),
    _RcIsisSpbmPortDropStatsVlanType_Type()
)
rcIsisSpbmPortDropStatsVlanType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsVlanType.setStatus("current")
_RcIsisSpbmPortDropStatsUnknownUcastSrcAddr_Type = Counter64
_RcIsisSpbmPortDropStatsUnknownUcastSrcAddr_Object = MibTableColumn
rcIsisSpbmPortDropStatsUnknownUcastSrcAddr = _RcIsisSpbmPortDropStatsUnknownUcastSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 4),
    _RcIsisSpbmPortDropStatsUnknownUcastSrcAddr_Type()
)
rcIsisSpbmPortDropStatsUnknownUcastSrcAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsUnknownUcastSrcAddr.setStatus("current")
_RcIsisSpbmPortDropStatsRpfcUcastSrcAddr_Type = Counter64
_RcIsisSpbmPortDropStatsRpfcUcastSrcAddr_Object = MibTableColumn
rcIsisSpbmPortDropStatsRpfcUcastSrcAddr = _RcIsisSpbmPortDropStatsRpfcUcastSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 5),
    _RcIsisSpbmPortDropStatsRpfcUcastSrcAddr_Type()
)
rcIsisSpbmPortDropStatsRpfcUcastSrcAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsRpfcUcastSrcAddr.setStatus("current")
_RcIsisSpbmPortDropStatsUnknownUcastDestAddr_Type = Counter64
_RcIsisSpbmPortDropStatsUnknownUcastDestAddr_Object = MibTableColumn
rcIsisSpbmPortDropStatsUnknownUcastDestAddr = _RcIsisSpbmPortDropStatsUnknownUcastDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 6),
    _RcIsisSpbmPortDropStatsUnknownUcastDestAddr_Type()
)
rcIsisSpbmPortDropStatsUnknownUcastDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsUnknownUcastDestAddr.setStatus("current")
_RcIsisSpbmPortDropStatsUnknownMcastDestAddr_Type = Counter64
_RcIsisSpbmPortDropStatsUnknownMcastDestAddr_Object = MibTableColumn
rcIsisSpbmPortDropStatsUnknownMcastDestAddr = _RcIsisSpbmPortDropStatsUnknownMcastDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 7),
    _RcIsisSpbmPortDropStatsUnknownMcastDestAddr_Type()
)
rcIsisSpbmPortDropStatsUnknownMcastDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsUnknownMcastDestAddr.setStatus("current")
_RcIsisSpbmPortDropStatsRpfcMcastSrcAddr_Type = Counter64
_RcIsisSpbmPortDropStatsRpfcMcastSrcAddr_Object = MibTableColumn
rcIsisSpbmPortDropStatsRpfcMcastSrcAddr = _RcIsisSpbmPortDropStatsRpfcMcastSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 8),
    _RcIsisSpbmPortDropStatsRpfcMcastSrcAddr_Type()
)
rcIsisSpbmPortDropStatsRpfcMcastSrcAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsRpfcMcastSrcAddr.setStatus("current")
_RcIsisSpbmPortDropStatsLastDropMac_Type = MacAddress
_RcIsisSpbmPortDropStatsLastDropMac_Object = MibTableColumn
rcIsisSpbmPortDropStatsLastDropMac = _RcIsisSpbmPortDropStatsLastDropMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 9),
    _RcIsisSpbmPortDropStatsLastDropMac_Type()
)
rcIsisSpbmPortDropStatsLastDropMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsLastDropMac.setStatus("current")
_RcIsisSpbmPortDropStatsIsMacDestAddr_Type = TruthValue
_RcIsisSpbmPortDropStatsIsMacDestAddr_Object = MibTableColumn
rcIsisSpbmPortDropStatsIsMacDestAddr = _RcIsisSpbmPortDropStatsIsMacDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 10),
    _RcIsisSpbmPortDropStatsIsMacDestAddr_Type()
)
rcIsisSpbmPortDropStatsIsMacDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsIsMacDestAddr.setStatus("current")


class _RcIsisSpbmPortDropStatsLastDropMacHostName_Type(OctetString):
    """Custom type rcIsisSpbmPortDropStatsLastDropMacHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcIsisSpbmPortDropStatsLastDropMacHostName_Type.__name__ = "OctetString"
_RcIsisSpbmPortDropStatsLastDropMacHostName_Object = MibTableColumn
rcIsisSpbmPortDropStatsLastDropMacHostName = _RcIsisSpbmPortDropStatsLastDropMacHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 63, 16, 1, 11),
    _RcIsisSpbmPortDropStatsLastDropMacHostName_Type()
)
rcIsisSpbmPortDropStatsLastDropMacHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIsisSpbmPortDropStatsLastDropMacHostName.setStatus("current")
_RcSlpp_ObjectIdentity = ObjectIdentity
rcSlpp = _RcSlpp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64)
)
_RcSlppMib_ObjectIdentity = ObjectIdentity
rcSlppMib = _RcSlppMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1)
)
_RcSlppNotifications_ObjectIdentity = ObjectIdentity
rcSlppNotifications = _RcSlppNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 0)
)
_RcSlppObjects_ObjectIdentity = ObjectIdentity
rcSlppObjects = _RcSlppObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1)
)
_RcSlppScalars_ObjectIdentity = ObjectIdentity
rcSlppScalars = _RcSlppScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 1)
)


class _RcSlppGlobalEnable_Type(TruthValue):
    """Custom type rcSlppGlobalEnable based on TruthValue"""


_RcSlppGlobalEnable_Object = MibScalar
rcSlppGlobalEnable = _RcSlppGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 1, 1),
    _RcSlppGlobalEnable_Type()
)
rcSlppGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSlppGlobalEnable.setStatus("current")


class _RcSlppTransmissionInterval_Type(Integer32):
    """Custom type rcSlppTransmissionInterval based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(500, 5000),
    )


_RcSlppTransmissionInterval_Type.__name__ = "Integer32"
_RcSlppTransmissionInterval_Object = MibScalar
rcSlppTransmissionInterval = _RcSlppTransmissionInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 1, 2),
    _RcSlppTransmissionInterval_Type()
)
rcSlppTransmissionInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSlppTransmissionInterval.setStatus("current")


class _RcSlppEtherType_Type(Integer32):
    """Custom type rcSlppEtherType based on Integer32"""
    defaultHexValue = 33028


_RcSlppEtherType_Object = MibScalar
rcSlppEtherType = _RcSlppEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 1, 3),
    _RcSlppEtherType_Type()
)
rcSlppEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSlppEtherType.setStatus("current")
_RcSlppVlanTable_Object = MibTable
rcSlppVlanTable = _RcSlppVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcSlppVlanTable.setStatus("current")
_RcSlppVlanEntry_Object = MibTableRow
rcSlppVlanEntry = _RcSlppVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 2, 1)
)
rcSlppVlanEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSlppVlanVlanId"),
)
if mibBuilder.loadTexts:
    rcSlppVlanEntry.setStatus("current")


class _RcSlppVlanVlanId_Type(Integer32):
    """Custom type rcSlppVlanVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcSlppVlanVlanId_Type.__name__ = "Integer32"
_RcSlppVlanVlanId_Object = MibTableColumn
rcSlppVlanVlanId = _RcSlppVlanVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 2, 1, 1),
    _RcSlppVlanVlanId_Type()
)
rcSlppVlanVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcSlppVlanVlanId.setStatus("current")
_RcSlppVlanSlppEnable_Type = TruthValue
_RcSlppVlanSlppEnable_Object = MibTableColumn
rcSlppVlanSlppEnable = _RcSlppVlanSlppEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 2, 1, 2),
    _RcSlppVlanSlppEnable_Type()
)
rcSlppVlanSlppEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSlppVlanSlppEnable.setStatus("current")
_RcSlppVlanRowStatus_Type = RowStatus
_RcSlppVlanRowStatus_Object = MibTableColumn
rcSlppVlanRowStatus = _RcSlppVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 2, 1, 3),
    _RcSlppVlanRowStatus_Type()
)
rcSlppVlanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSlppVlanRowStatus.setStatus("current")
_RcSlppPortTable_Object = MibTable
rcSlppPortTable = _RcSlppPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 3)
)
if mibBuilder.loadTexts:
    rcSlppPortTable.setStatus("current")
_RcSlppPortEntry_Object = MibTableRow
rcSlppPortEntry = _RcSlppPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 3, 1)
)
rcSlppPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcSlppPortIfIndex"),
)
if mibBuilder.loadTexts:
    rcSlppPortEntry.setStatus("current")
_RcSlppPortIfIndex_Type = InterfaceIndex
_RcSlppPortIfIndex_Object = MibTableColumn
rcSlppPortIfIndex = _RcSlppPortIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 3, 1, 1),
    _RcSlppPortIfIndex_Type()
)
rcSlppPortIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcSlppPortIfIndex.setStatus("current")


class _RcSlppPortPktRxThreshold_Type(Integer32):
    """Custom type rcSlppPortPktRxThreshold based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 500),
    )


_RcSlppPortPktRxThreshold_Type.__name__ = "Integer32"
_RcSlppPortPktRxThreshold_Object = MibTableColumn
rcSlppPortPktRxThreshold = _RcSlppPortPktRxThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 3, 1, 2),
    _RcSlppPortPktRxThreshold_Type()
)
rcSlppPortPktRxThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSlppPortPktRxThreshold.setStatus("current")


class _RcSlppPortSlppEnable_Type(TruthValue):
    """Custom type rcSlppPortSlppEnable based on TruthValue"""


_RcSlppPortSlppEnable_Object = MibTableColumn
rcSlppPortSlppEnable = _RcSlppPortSlppEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 3, 1, 3),
    _RcSlppPortSlppEnable_Type()
)
rcSlppPortSlppEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcSlppPortSlppEnable.setStatus("current")


class _RcSlppPortIncomingVlanId_Type(Integer32):
    """Custom type rcSlppPortIncomingVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcSlppPortIncomingVlanId_Type.__name__ = "Integer32"
_RcSlppPortIncomingVlanId_Object = MibTableColumn
rcSlppPortIncomingVlanId = _RcSlppPortIncomingVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 3, 1, 5),
    _RcSlppPortIncomingVlanId_Type()
)
rcSlppPortIncomingVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSlppPortIncomingVlanId.setStatus("current")


class _RcSlppPortSrcNodeType_Type(Integer32):
    """Custom type rcSlppPortSrcNodeType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("none", 0),
          ("peer", 2))
    )


_RcSlppPortSrcNodeType_Type.__name__ = "Integer32"
_RcSlppPortSrcNodeType_Object = MibTableColumn
rcSlppPortSrcNodeType = _RcSlppPortSrcNodeType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 1, 3, 1, 6),
    _RcSlppPortSrcNodeType_Type()
)
rcSlppPortSrcNodeType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcSlppPortSrcNodeType.setStatus("current")
_RcSlppNotificationObjects_ObjectIdentity = ObjectIdentity
rcSlppNotificationObjects = _RcSlppNotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 2)
)


class _RcSlppIncomingVlanId_Type(Integer32):
    """Custom type rcSlppIncomingVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcSlppIncomingVlanId_Type.__name__ = "Integer32"
_RcSlppIncomingVlanId_Object = MibScalar
rcSlppIncomingVlanId = _RcSlppIncomingVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 2, 1),
    _RcSlppIncomingVlanId_Type()
)
rcSlppIncomingVlanId.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcSlppIncomingVlanId.setStatus("current")
_RcSlppSrcMacAddress_Type = MacAddress
_RcSlppSrcMacAddress_Object = MibScalar
rcSlppSrcMacAddress = _RcSlppSrcMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 2, 2),
    _RcSlppSrcMacAddress_Type()
)
rcSlppSrcMacAddress.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcSlppSrcMacAddress.setStatus("current")
_RcSlppRxPortIndex_Type = InterfaceIndex
_RcSlppRxPortIndex_Object = MibScalar
rcSlppRxPortIndex = _RcSlppRxPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 2, 3),
    _RcSlppRxPortIndex_Type()
)
rcSlppRxPortIndex.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcSlppRxPortIndex.setStatus("current")


class _RcSlppRxVlanId_Type(Integer32):
    """Custom type rcSlppRxVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcSlppRxVlanId_Type.__name__ = "Integer32"
_RcSlppRxVlanId_Object = MibScalar
rcSlppRxVlanId = _RcSlppRxVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 2, 4),
    _RcSlppRxVlanId_Type()
)
rcSlppRxVlanId.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcSlppRxVlanId.setStatus("current")
_RcTacacs_ObjectIdentity = ObjectIdentity
rcTacacs = _RcTacacs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65)
)
_RcTacacsGlobal_ObjectIdentity = ObjectIdentity
rcTacacsGlobal = _RcTacacsGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 1)
)


class _RcTacacsGlobalEnable_Type(TruthValue):
    """Custom type rcTacacsGlobalEnable based on TruthValue"""


_RcTacacsGlobalEnable_Object = MibScalar
rcTacacsGlobalEnable = _RcTacacsGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 1, 1),
    _RcTacacsGlobalEnable_Type()
)
rcTacacsGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTacacsGlobalEnable.setStatus("current")


class _RcTacacsGlobalLastUserName_Type(OctetString):
    """Custom type rcTacacsGlobalLastUserName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_RcTacacsGlobalLastUserName_Type.__name__ = "OctetString"
_RcTacacsGlobalLastUserName_Object = MibScalar
rcTacacsGlobalLastUserName = _RcTacacsGlobalLastUserName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 1, 2),
    _RcTacacsGlobalLastUserName_Type()
)
rcTacacsGlobalLastUserName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTacacsGlobalLastUserName.setStatus("current")
_RcTacacsGlobalLastAddressType_Type = InetAddressType
_RcTacacsGlobalLastAddressType_Object = MibScalar
rcTacacsGlobalLastAddressType = _RcTacacsGlobalLastAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 1, 3),
    _RcTacacsGlobalLastAddressType_Type()
)
rcTacacsGlobalLastAddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTacacsGlobalLastAddressType.setStatus("current")
_RcTacacsGlobalLastAddress_Type = InetAddress
_RcTacacsGlobalLastAddress_Object = MibScalar
rcTacacsGlobalLastAddress = _RcTacacsGlobalLastAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 1, 4),
    _RcTacacsGlobalLastAddress_Type()
)
rcTacacsGlobalLastAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTacacsGlobalLastAddress.setStatus("current")


class _RcTacacsAccounting_Type(Bits):
    """Custom type rcTacacsAccounting based on Bits"""
    defaultBinValue = "0"

    namedValues = NamedValues(
        *(("cli", 0),
          ("ppp", 1))
    )

_RcTacacsAccounting_Type.__name__ = "Bits"
_RcTacacsAccounting_Object = MibScalar
rcTacacsAccounting = _RcTacacsAccounting_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 1, 5),
    _RcTacacsAccounting_Type()
)
rcTacacsAccounting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTacacsAccounting.setStatus("current")


class _RcTacacsAuthentication_Type(Bits):
    """Custom type rcTacacsAuthentication based on Bits"""
    defaultBinValue = "1"

    namedValues = NamedValues(
        *(("cli", 0),
          ("ppp", 1),
          ("web", 2))
    )

_RcTacacsAuthentication_Type.__name__ = "Bits"
_RcTacacsAuthentication_Object = MibScalar
rcTacacsAuthentication = _RcTacacsAuthentication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 1, 6),
    _RcTacacsAuthentication_Type()
)
rcTacacsAuthentication.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTacacsAuthentication.setStatus("current")
_RcTacacsServerTable_Object = MibTable
rcTacacsServerTable = _RcTacacsServerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2)
)
if mibBuilder.loadTexts:
    rcTacacsServerTable.setStatus("current")
_RcTacacsServerEntry_Object = MibTableRow
rcTacacsServerEntry = _RcTacacsServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1)
)
rcTacacsServerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcTacacsServerAddressType"),
    (0, "RAPID-CITY", "rcTacacsServerAddress"),
)
if mibBuilder.loadTexts:
    rcTacacsServerEntry.setStatus("current")
_RcTacacsServerAddressType_Type = InetAddressType
_RcTacacsServerAddressType_Object = MibTableColumn
rcTacacsServerAddressType = _RcTacacsServerAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 1),
    _RcTacacsServerAddressType_Type()
)
rcTacacsServerAddressType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcTacacsServerAddressType.setStatus("current")
_RcTacacsServerAddress_Type = InetAddress
_RcTacacsServerAddress_Object = MibTableColumn
rcTacacsServerAddress = _RcTacacsServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 2),
    _RcTacacsServerAddress_Type()
)
rcTacacsServerAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcTacacsServerAddress.setStatus("current")


class _RcTacacsServerPortNumber_Type(InetPortNumber):
    """Custom type rcTacacsServerPortNumber based on InetPortNumber"""
    defaultValue = 49


_RcTacacsServerPortNumber_Object = MibTableColumn
rcTacacsServerPortNumber = _RcTacacsServerPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 3),
    _RcTacacsServerPortNumber_Type()
)
rcTacacsServerPortNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerPortNumber.setStatus("current")


class _RcTacacsServerConnectionType_Type(Integer32):
    """Custom type rcTacacsServerConnectionType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("perSessionConnection", 2),
          ("singleConnection", 1))
    )


_RcTacacsServerConnectionType_Type.__name__ = "Integer32"
_RcTacacsServerConnectionType_Object = MibTableColumn
rcTacacsServerConnectionType = _RcTacacsServerConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 4),
    _RcTacacsServerConnectionType_Type()
)
rcTacacsServerConnectionType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerConnectionType.setStatus("current")


class _RcTacacsServerConnectionStatus_Type(Integer32):
    """Custom type rcTacacsServerConnectionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 1),
          ("notConnected", 2))
    )


_RcTacacsServerConnectionStatus_Type.__name__ = "Integer32"
_RcTacacsServerConnectionStatus_Object = MibTableColumn
rcTacacsServerConnectionStatus = _RcTacacsServerConnectionStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 5),
    _RcTacacsServerConnectionStatus_Type()
)
rcTacacsServerConnectionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTacacsServerConnectionStatus.setStatus("current")


class _RcTacacsServerTimeout_Type(Integer32):
    """Custom type rcTacacsServerTimeout based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 30),
    )


_RcTacacsServerTimeout_Type.__name__ = "Integer32"
_RcTacacsServerTimeout_Object = MibTableColumn
rcTacacsServerTimeout = _RcTacacsServerTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 6),
    _RcTacacsServerTimeout_Type()
)
rcTacacsServerTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerTimeout.setStatus("current")


class _RcTacacsServerKey_Type(OctetString):
    """Custom type rcTacacsServerKey based on OctetString"""
    defaultHexValue = ""

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_RcTacacsServerKey_Type.__name__ = "OctetString"
_RcTacacsServerKey_Object = MibTableColumn
rcTacacsServerKey = _RcTacacsServerKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 7),
    _RcTacacsServerKey_Type()
)
rcTacacsServerKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerKey.setStatus("current")


class _RcTacacsServerSourceIpInterfaceEnabled_Type(TruthValue):
    """Custom type rcTacacsServerSourceIpInterfaceEnabled based on TruthValue"""


_RcTacacsServerSourceIpInterfaceEnabled_Object = MibTableColumn
rcTacacsServerSourceIpInterfaceEnabled = _RcTacacsServerSourceIpInterfaceEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 8),
    _RcTacacsServerSourceIpInterfaceEnabled_Type()
)
rcTacacsServerSourceIpInterfaceEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerSourceIpInterfaceEnabled.setStatus("current")


class _RcTacacsServerSourceIpInterfaceType_Type(InetAddressType):
    """Custom type rcTacacsServerSourceIpInterfaceType based on InetAddressType"""


_RcTacacsServerSourceIpInterfaceType_Object = MibTableColumn
rcTacacsServerSourceIpInterfaceType = _RcTacacsServerSourceIpInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 9),
    _RcTacacsServerSourceIpInterfaceType_Type()
)
rcTacacsServerSourceIpInterfaceType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerSourceIpInterfaceType.setStatus("current")


class _RcTacacsServerSourceIpInterface_Type(InetAddress):
    """Custom type rcTacacsServerSourceIpInterface based on InetAddress"""
    defaultHexValue = ""


_RcTacacsServerSourceIpInterface_Object = MibTableColumn
rcTacacsServerSourceIpInterface = _RcTacacsServerSourceIpInterface_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 10),
    _RcTacacsServerSourceIpInterface_Type()
)
rcTacacsServerSourceIpInterface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerSourceIpInterface.setStatus("current")


class _RcTacacsServerPriority_Type(Integer32):
    """Custom type rcTacacsServerPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcTacacsServerPriority_Type.__name__ = "Integer32"
_RcTacacsServerPriority_Object = MibTableColumn
rcTacacsServerPriority = _RcTacacsServerPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 11),
    _RcTacacsServerPriority_Type()
)
rcTacacsServerPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerPriority.setStatus("current")
_RcTacacsServerRowStatus_Type = RowStatus
_RcTacacsServerRowStatus_Object = MibTableColumn
rcTacacsServerRowStatus = _RcTacacsServerRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 65, 2, 1, 12),
    _RcTacacsServerRowStatus_Type()
)
rcTacacsServerRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcTacacsServerRowStatus.setStatus("current")
_RcIpfix_ObjectIdentity = ObjectIdentity
rcIpfix = _RcIpfix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66)
)
_RcIpfixMib_ObjectIdentity = ObjectIdentity
rcIpfixMib = _RcIpfixMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1)
)
_RcIpfixConfGlobal_ObjectIdentity = ObjectIdentity
rcIpfixConfGlobal = _RcIpfixConfGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 1)
)


class _RcIpfixConfState_Type(EnableValue):
    """Custom type rcIpfixConfState based on EnableValue"""


_RcIpfixConfState_Object = MibScalar
rcIpfixConfState = _RcIpfixConfState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 1, 1),
    _RcIpfixConfState_Type()
)
rcIpfixConfState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfState.setStatus("current")
_RcIpfixTable_ObjectIdentity = ObjectIdentity
rcIpfixTable = _RcIpfixTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2)
)
_RcIpfixConfSlotTable_Object = MibTable
rcIpfixConfSlotTable = _RcIpfixConfSlotTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1)
)
if mibBuilder.loadTexts:
    rcIpfixConfSlotTable.setStatus("current")
_RcIpfixConfSlotEntry_Object = MibTableRow
rcIpfixConfSlotEntry = _RcIpfixConfSlotEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1, 1)
)
rcIpfixConfSlotEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpfixConfSlotNum"),
)
if mibBuilder.loadTexts:
    rcIpfixConfSlotEntry.setStatus("current")


class _RcIpfixConfSlotNum_Type(Integer32):
    """Custom type rcIpfixConfSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcIpfixConfSlotNum_Type.__name__ = "Integer32"
_RcIpfixConfSlotNum_Object = MibTableColumn
rcIpfixConfSlotNum = _RcIpfixConfSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1, 1, 1),
    _RcIpfixConfSlotNum_Type()
)
rcIpfixConfSlotNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixConfSlotNum.setStatus("current")


class _RcIpfixConfSlotAgingIntv_Type(Integer32):
    """Custom type rcIpfixConfSlotAgingIntv based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 3600),
    )


_RcIpfixConfSlotAgingIntv_Type.__name__ = "Integer32"
_RcIpfixConfSlotAgingIntv_Object = MibTableColumn
rcIpfixConfSlotAgingIntv = _RcIpfixConfSlotAgingIntv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1, 1, 2),
    _RcIpfixConfSlotAgingIntv_Type()
)
rcIpfixConfSlotAgingIntv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfSlotAgingIntv.setStatus("current")
if mibBuilder.loadTexts:
    rcIpfixConfSlotAgingIntv.setUnits("seconds")


class _RcIpfixConfSlotActiveTimeout_Type(Integer32):
    """Custom type rcIpfixConfSlotActiveTimeout based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_RcIpfixConfSlotActiveTimeout_Type.__name__ = "Integer32"
_RcIpfixConfSlotActiveTimeout_Object = MibTableColumn
rcIpfixConfSlotActiveTimeout = _RcIpfixConfSlotActiveTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1, 1, 3),
    _RcIpfixConfSlotActiveTimeout_Type()
)
rcIpfixConfSlotActiveTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfSlotActiveTimeout.setStatus("current")
if mibBuilder.loadTexts:
    rcIpfixConfSlotActiveTimeout.setUnits("minutes")


class _RcIpfixConfSlotExportIntv_Type(Integer32):
    """Custom type rcIpfixConfSlotExportIntv based on Integer32"""
    defaultValue = 50

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 3600),
    )


_RcIpfixConfSlotExportIntv_Type.__name__ = "Integer32"
_RcIpfixConfSlotExportIntv_Object = MibTableColumn
rcIpfixConfSlotExportIntv = _RcIpfixConfSlotExportIntv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1, 1, 4),
    _RcIpfixConfSlotExportIntv_Type()
)
rcIpfixConfSlotExportIntv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfSlotExportIntv.setStatus("current")
if mibBuilder.loadTexts:
    rcIpfixConfSlotExportIntv.setUnits("seconds")


class _RcIpfixConfSlotExportState_Type(EnableValue):
    """Custom type rcIpfixConfSlotExportState based on EnableValue"""


_RcIpfixConfSlotExportState_Object = MibTableColumn
rcIpfixConfSlotExportState = _RcIpfixConfSlotExportState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1, 1, 5),
    _RcIpfixConfSlotExportState_Type()
)
rcIpfixConfSlotExportState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfSlotExportState.setStatus("current")


class _RcIpfixConfSlotTempRefIntvSec_Type(Integer32):
    """Custom type rcIpfixConfSlotTempRefIntvSec based on Integer32"""
    defaultValue = 1800

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(300, 3600),
    )


_RcIpfixConfSlotTempRefIntvSec_Type.__name__ = "Integer32"
_RcIpfixConfSlotTempRefIntvSec_Object = MibTableColumn
rcIpfixConfSlotTempRefIntvSec = _RcIpfixConfSlotTempRefIntvSec_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1, 1, 6),
    _RcIpfixConfSlotTempRefIntvSec_Type()
)
rcIpfixConfSlotTempRefIntvSec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfSlotTempRefIntvSec.setStatus("current")
if mibBuilder.loadTexts:
    rcIpfixConfSlotTempRefIntvSec.setUnits("seconds")


class _RcIpfixConfSlotTempRefIntvPkts_Type(Integer32):
    """Custom type rcIpfixConfSlotTempRefIntvPkts based on Integer32"""
    defaultValue = 10000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10000, 100000),
    )


_RcIpfixConfSlotTempRefIntvPkts_Type.__name__ = "Integer32"
_RcIpfixConfSlotTempRefIntvPkts_Object = MibTableColumn
rcIpfixConfSlotTempRefIntvPkts = _RcIpfixConfSlotTempRefIntvPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 1, 1, 7),
    _RcIpfixConfSlotTempRefIntvPkts_Type()
)
rcIpfixConfSlotTempRefIntvPkts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfSlotTempRefIntvPkts.setStatus("current")
_RcIpfixCollectorTable_Object = MibTable
rcIpfixCollectorTable = _RcIpfixCollectorTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2)
)
if mibBuilder.loadTexts:
    rcIpfixCollectorTable.setStatus("current")
_RcIpfixCollectorEntry_Object = MibTableRow
rcIpfixCollectorEntry = _RcIpfixCollectorEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1)
)
rcIpfixCollectorEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpfixCollectorSlotNum"),
    (0, "RAPID-CITY", "rcIpfixCollectorAddressType"),
    (0, "RAPID-CITY", "rcIpfixCollectorAddress"),
)
if mibBuilder.loadTexts:
    rcIpfixCollectorEntry.setStatus("current")


class _RcIpfixCollectorSlotNum_Type(Integer32):
    """Custom type rcIpfixCollectorSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcIpfixCollectorSlotNum_Type.__name__ = "Integer32"
_RcIpfixCollectorSlotNum_Object = MibTableColumn
rcIpfixCollectorSlotNum = _RcIpfixCollectorSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 1),
    _RcIpfixCollectorSlotNum_Type()
)
rcIpfixCollectorSlotNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixCollectorSlotNum.setStatus("current")
_RcIpfixCollectorAddressType_Type = InetAddressType
_RcIpfixCollectorAddressType_Object = MibTableColumn
rcIpfixCollectorAddressType = _RcIpfixCollectorAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 2),
    _RcIpfixCollectorAddressType_Type()
)
rcIpfixCollectorAddressType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixCollectorAddressType.setStatus("current")
_RcIpfixCollectorAddress_Type = InetAddress
_RcIpfixCollectorAddress_Object = MibTableColumn
rcIpfixCollectorAddress = _RcIpfixCollectorAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 3),
    _RcIpfixCollectorAddress_Type()
)
rcIpfixCollectorAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixCollectorAddress.setStatus("current")


class _RcIpfixCollectorProtocol_Type(Integer32):
    """Custom type rcIpfixCollectorProtocol based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("sctp", 3),
          ("tcp", 2),
          ("udp", 1))
    )


_RcIpfixCollectorProtocol_Type.__name__ = "Integer32"
_RcIpfixCollectorProtocol_Object = MibTableColumn
rcIpfixCollectorProtocol = _RcIpfixCollectorProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 4),
    _RcIpfixCollectorProtocol_Type()
)
rcIpfixCollectorProtocol.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpfixCollectorProtocol.setStatus("current")


class _RcIpfixCollectorDestPort_Type(InetPortNumber):
    """Custom type rcIpfixCollectorDestPort based on InetPortNumber"""
    defaultValue = 9995


_RcIpfixCollectorDestPort_Object = MibTableColumn
rcIpfixCollectorDestPort = _RcIpfixCollectorDestPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 5),
    _RcIpfixCollectorDestPort_Type()
)
rcIpfixCollectorDestPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpfixCollectorDestPort.setStatus("current")
_RcIpfixCollectorExporterIpType_Type = InetAddressType
_RcIpfixCollectorExporterIpType_Object = MibTableColumn
rcIpfixCollectorExporterIpType = _RcIpfixCollectorExporterIpType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 6),
    _RcIpfixCollectorExporterIpType_Type()
)
rcIpfixCollectorExporterIpType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpfixCollectorExporterIpType.setStatus("current")
_RcIpfixCollectorExporterIp_Type = InetAddress
_RcIpfixCollectorExporterIp_Object = MibTableColumn
rcIpfixCollectorExporterIp = _RcIpfixCollectorExporterIp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 7),
    _RcIpfixCollectorExporterIp_Type()
)
rcIpfixCollectorExporterIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpfixCollectorExporterIp.setStatus("current")


class _RcIpfixCollectorProtoVer_Type(Integer32):
    """Custom type rcIpfixCollectorProtoVer based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ipfix", 1),
          ("preipfixv5", 3),
          ("preipfixv9", 2))
    )


_RcIpfixCollectorProtoVer_Type.__name__ = "Integer32"
_RcIpfixCollectorProtoVer_Object = MibTableColumn
rcIpfixCollectorProtoVer = _RcIpfixCollectorProtoVer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 8),
    _RcIpfixCollectorProtoVer_Type()
)
rcIpfixCollectorProtoVer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpfixCollectorProtoVer.setStatus("current")


class _RcIpfixCollectorState_Type(TruthValue):
    """Custom type rcIpfixCollectorState based on TruthValue"""


_RcIpfixCollectorState_Object = MibTableColumn
rcIpfixCollectorState = _RcIpfixCollectorState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 9),
    _RcIpfixCollectorState_Type()
)
rcIpfixCollectorState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpfixCollectorState.setStatus("current")
_RcIpfixCollectorRowStatus_Type = RowStatus
_RcIpfixCollectorRowStatus_Object = MibTableColumn
rcIpfixCollectorRowStatus = _RcIpfixCollectorRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 2, 1, 10),
    _RcIpfixCollectorRowStatus_Type()
)
rcIpfixCollectorRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcIpfixCollectorRowStatus.setStatus("current")
_RcIpfixConfPortTable_Object = MibTable
rcIpfixConfPortTable = _RcIpfixConfPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3)
)
if mibBuilder.loadTexts:
    rcIpfixConfPortTable.setStatus("current")
_RcIpfixConfPortEntry_Object = MibTableRow
rcIpfixConfPortEntry = _RcIpfixConfPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1)
)
rcIpfixConfPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpfixConfPortId"),
)
if mibBuilder.loadTexts:
    rcIpfixConfPortEntry.setStatus("current")
_RcIpfixConfPortId_Type = InterfaceIndex
_RcIpfixConfPortId_Object = MibTableColumn
rcIpfixConfPortId = _RcIpfixConfPortId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1, 1),
    _RcIpfixConfPortId_Type()
)
rcIpfixConfPortId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixConfPortId.setStatus("current")


class _RcIpfixConfPortSampleRate_Type(Integer32):
    """Custom type rcIpfixConfPortSampleRate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100000),
    )


_RcIpfixConfPortSampleRate_Type.__name__ = "Integer32"
_RcIpfixConfPortSampleRate_Object = MibTableColumn
rcIpfixConfPortSampleRate = _RcIpfixConfPortSampleRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1, 2),
    _RcIpfixConfPortSampleRate_Type()
)
rcIpfixConfPortSampleRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfPortSampleRate.setStatus("current")


class _RcIpfixConfPortHashPolyCoeffs_Type(Integer32):
    """Custom type rcIpfixConfPortHashPolyCoeffs based on Integer32"""
    defaultHexValue = 1996

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 16777215),
    )


_RcIpfixConfPortHashPolyCoeffs_Type.__name__ = "Integer32"
_RcIpfixConfPortHashPolyCoeffs_Object = MibTableColumn
rcIpfixConfPortHashPolyCoeffs = _RcIpfixConfPortHashPolyCoeffs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1, 3),
    _RcIpfixConfPortHashPolyCoeffs_Type()
)
rcIpfixConfPortHashPolyCoeffs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfPortHashPolyCoeffs.setStatus("current")


class _RcIpfixConfPortHashPolySeed_Type(Integer32):
    """Custom type rcIpfixConfPortHashPolySeed based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_RcIpfixConfPortHashPolySeed_Type.__name__ = "Integer32"
_RcIpfixConfPortHashPolySeed_Object = MibTableColumn
rcIpfixConfPortHashPolySeed = _RcIpfixConfPortHashPolySeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1, 4),
    _RcIpfixConfPortHashPolySeed_Type()
)
rcIpfixConfPortHashPolySeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfPortHashPolySeed.setStatus("current")


class _RcIpfixConfPortFlush_Type(Integer32):
    """Custom type rcIpfixConfPortFlush based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("exportAndFlush", 3),
          ("flush", 2),
          ("none", 1))
    )


_RcIpfixConfPortFlush_Type.__name__ = "Integer32"
_RcIpfixConfPortFlush_Object = MibTableColumn
rcIpfixConfPortFlush = _RcIpfixConfPortFlush_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1, 5),
    _RcIpfixConfPortFlush_Type()
)
rcIpfixConfPortFlush.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfPortFlush.setStatus("current")


class _RcIpfixConfPortAllTraffic_Type(EnableValue):
    """Custom type rcIpfixConfPortAllTraffic based on EnableValue"""


_RcIpfixConfPortAllTraffic_Object = MibTableColumn
rcIpfixConfPortAllTraffic = _RcIpfixConfPortAllTraffic_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1, 6),
    _RcIpfixConfPortAllTraffic_Type()
)
rcIpfixConfPortAllTraffic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfPortAllTraffic.setStatus("current")


class _RcIpfixConfPortHashKeyId_Type(Integer32):
    """Custom type rcIpfixConfPortHashKeyId based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("hashKeyFour", 4),
          ("hashKeyOne", 1),
          ("hashKeyThree", 3),
          ("hashKeyTwo", 2))
    )


_RcIpfixConfPortHashKeyId_Type.__name__ = "Integer32"
_RcIpfixConfPortHashKeyId_Object = MibTableColumn
rcIpfixConfPortHashKeyId = _RcIpfixConfPortHashKeyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1, 7),
    _RcIpfixConfPortHashKeyId_Type()
)
rcIpfixConfPortHashKeyId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixConfPortHashKeyId.setStatus("current")


class _RcIpfixConfPortDynamicSampRate_Type(Integer32):
    """Custom type rcIpfixConfPortDynamicSampRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100000),
    )


_RcIpfixConfPortDynamicSampRate_Type.__name__ = "Integer32"
_RcIpfixConfPortDynamicSampRate_Object = MibTableColumn
rcIpfixConfPortDynamicSampRate = _RcIpfixConfPortDynamicSampRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 3, 1, 8),
    _RcIpfixConfPortDynamicSampRate_Type()
)
rcIpfixConfPortDynamicSampRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpfixConfPortDynamicSampRate.setStatus("current")
_RcIpfixHashStatsTable_Object = MibTable
rcIpfixHashStatsTable = _RcIpfixHashStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 4)
)
if mibBuilder.loadTexts:
    rcIpfixHashStatsTable.setStatus("current")
_RcIpfixHashStatsEntry_Object = MibTableRow
rcIpfixHashStatsEntry = _RcIpfixHashStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 4, 1)
)
rcIpfixHashStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpfixHashStatsSlotNum"),
)
if mibBuilder.loadTexts:
    rcIpfixHashStatsEntry.setStatus("current")


class _RcIpfixHashStatsSlotNum_Type(Integer32):
    """Custom type rcIpfixHashStatsSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcIpfixHashStatsSlotNum_Type.__name__ = "Integer32"
_RcIpfixHashStatsSlotNum_Object = MibTableColumn
rcIpfixHashStatsSlotNum = _RcIpfixHashStatsSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 4, 1, 1),
    _RcIpfixHashStatsSlotNum_Type()
)
rcIpfixHashStatsSlotNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixHashStatsSlotNum.setStatus("current")
_RcIpfixHashStatsHashOverflows_Type = Counter64
_RcIpfixHashStatsHashOverflows_Object = MibTableColumn
rcIpfixHashStatsHashOverflows = _RcIpfixHashStatsHashOverflows_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 4, 1, 2),
    _RcIpfixHashStatsHashOverflows_Type()
)
rcIpfixHashStatsHashOverflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpfixHashStatsHashOverflows.setStatus("current")
_RcIpfixHashStatsHashDrops_Type = Counter64
_RcIpfixHashStatsHashDrops_Object = MibTableColumn
rcIpfixHashStatsHashDrops = _RcIpfixHashStatsHashDrops_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 4, 1, 3),
    _RcIpfixHashStatsHashDrops_Type()
)
rcIpfixHashStatsHashDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpfixHashStatsHashDrops.setStatus("current")


class _RcIpfixHashStatsClear_Type(Integer32):
    """Custom type rcIpfixHashStatsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clear", 1)
    )


_RcIpfixHashStatsClear_Type.__name__ = "Integer32"
_RcIpfixHashStatsClear_Object = MibTableColumn
rcIpfixHashStatsClear = _RcIpfixHashStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 4, 1, 4),
    _RcIpfixHashStatsClear_Type()
)
rcIpfixHashStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixHashStatsClear.setStatus("current")
_RcIpfixHashStatsClearTime_Type = TimeStamp
_RcIpfixHashStatsClearTime_Object = MibTableColumn
rcIpfixHashStatsClearTime = _RcIpfixHashStatsClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 4, 1, 5),
    _RcIpfixHashStatsClearTime_Type()
)
rcIpfixHashStatsClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpfixHashStatsClearTime.setStatus("current")
_RcIpfixExporterStatsTable_Object = MibTable
rcIpfixExporterStatsTable = _RcIpfixExporterStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5)
)
if mibBuilder.loadTexts:
    rcIpfixExporterStatsTable.setStatus("current")
_RcIpfixExporterStatsEntry_Object = MibTableRow
rcIpfixExporterStatsEntry = _RcIpfixExporterStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1)
)
rcIpfixExporterStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpfixExporterStatsSlotNum"),
    (0, "RAPID-CITY", "rcIpfixExporterStatsCollectorType"),
    (0, "RAPID-CITY", "rcIpfixExporterStatsCollector"),
)
if mibBuilder.loadTexts:
    rcIpfixExporterStatsEntry.setStatus("current")


class _RcIpfixExporterStatsSlotNum_Type(Integer32):
    """Custom type rcIpfixExporterStatsSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcIpfixExporterStatsSlotNum_Type.__name__ = "Integer32"
_RcIpfixExporterStatsSlotNum_Object = MibTableColumn
rcIpfixExporterStatsSlotNum = _RcIpfixExporterStatsSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1, 1),
    _RcIpfixExporterStatsSlotNum_Type()
)
rcIpfixExporterStatsSlotNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixExporterStatsSlotNum.setStatus("current")
_RcIpfixExporterStatsCollectorType_Type = InetAddressType
_RcIpfixExporterStatsCollectorType_Object = MibTableColumn
rcIpfixExporterStatsCollectorType = _RcIpfixExporterStatsCollectorType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1, 2),
    _RcIpfixExporterStatsCollectorType_Type()
)
rcIpfixExporterStatsCollectorType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixExporterStatsCollectorType.setStatus("current")
_RcIpfixExporterStatsCollector_Type = InetAddress
_RcIpfixExporterStatsCollector_Object = MibTableColumn
rcIpfixExporterStatsCollector = _RcIpfixExporterStatsCollector_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1, 3),
    _RcIpfixExporterStatsCollector_Type()
)
rcIpfixExporterStatsCollector.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpfixExporterStatsCollector.setStatus("current")
_RcIpfixExporterStatsOutPkts_Type = Counter64
_RcIpfixExporterStatsOutPkts_Object = MibTableColumn
rcIpfixExporterStatsOutPkts = _RcIpfixExporterStatsOutPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1, 4),
    _RcIpfixExporterStatsOutPkts_Type()
)
rcIpfixExporterStatsOutPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpfixExporterStatsOutPkts.setStatus("current")
_RcIpfixExporterStatsOutOctets_Type = Counter64
_RcIpfixExporterStatsOutOctets_Object = MibTableColumn
rcIpfixExporterStatsOutOctets = _RcIpfixExporterStatsOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1, 5),
    _RcIpfixExporterStatsOutOctets_Type()
)
rcIpfixExporterStatsOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpfixExporterStatsOutOctets.setStatus("current")
_RcIpfixExporterStatsPktsLoss_Type = Counter64
_RcIpfixExporterStatsPktsLoss_Object = MibTableColumn
rcIpfixExporterStatsPktsLoss = _RcIpfixExporterStatsPktsLoss_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1, 6),
    _RcIpfixExporterStatsPktsLoss_Type()
)
rcIpfixExporterStatsPktsLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpfixExporterStatsPktsLoss.setStatus("current")


class _RcIpfixExporterStatsClear_Type(Integer32):
    """Custom type rcIpfixExporterStatsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clear", 1)
    )


_RcIpfixExporterStatsClear_Type.__name__ = "Integer32"
_RcIpfixExporterStatsClear_Object = MibTableColumn
rcIpfixExporterStatsClear = _RcIpfixExporterStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1, 7),
    _RcIpfixExporterStatsClear_Type()
)
rcIpfixExporterStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpfixExporterStatsClear.setStatus("current")
_RcIpfixExporterStatsClearTime_Type = TimeStamp
_RcIpfixExporterStatsClearTime_Object = MibTableColumn
rcIpfixExporterStatsClearTime = _RcIpfixExporterStatsClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 66, 1, 2, 5, 1, 8),
    _RcIpfixExporterStatsClearTime_Type()
)
rcIpfixExporterStatsClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpfixExporterStatsClearTime.setStatus("current")
_RcOspfv3_ObjectIdentity = ObjectIdentity
rcOspfv3 = _RcOspfv3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67)
)
_RcOspfv3Mib_ObjectIdentity = ObjectIdentity
rcOspfv3Mib = _RcOspfv3Mib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1)
)
_RcOspfv3Objects_ObjectIdentity = ObjectIdentity
rcOspfv3Objects = _RcOspfv3Objects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1)
)
_RcOspfv3GeneralGroup_ObjectIdentity = ObjectIdentity
rcOspfv3GeneralGroup = _RcOspfv3GeneralGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1)
)
_RcOspfv3RouterId_Type = IpAddress
_RcOspfv3RouterId_Object = MibScalar
rcOspfv3RouterId = _RcOspfv3RouterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 1),
    _RcOspfv3RouterId_Type()
)
rcOspfv3RouterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3RouterId.setStatus("current")


class _RcOspfv3AdminStat_Type(Integer32):
    """Custom type rcOspfv3AdminStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcOspfv3AdminStat_Type.__name__ = "Integer32"
_RcOspfv3AdminStat_Object = MibScalar
rcOspfv3AdminStat = _RcOspfv3AdminStat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 2),
    _RcOspfv3AdminStat_Type()
)
rcOspfv3AdminStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3AdminStat.setStatus("current")


class _RcOspfv3VersionNumber_Type(Integer32):
    """Custom type rcOspfv3VersionNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("version3", 3)
    )


_RcOspfv3VersionNumber_Type.__name__ = "Integer32"
_RcOspfv3VersionNumber_Object = MibScalar
rcOspfv3VersionNumber = _RcOspfv3VersionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 3),
    _RcOspfv3VersionNumber_Type()
)
rcOspfv3VersionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VersionNumber.setStatus("current")
_RcOspfv3AreaBdrRtrStatus_Type = TruthValue
_RcOspfv3AreaBdrRtrStatus_Object = MibScalar
rcOspfv3AreaBdrRtrStatus = _RcOspfv3AreaBdrRtrStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 4),
    _RcOspfv3AreaBdrRtrStatus_Type()
)
rcOspfv3AreaBdrRtrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaBdrRtrStatus.setStatus("current")
_RcOspfv3ASBdrRtrStatus_Type = TruthValue
_RcOspfv3ASBdrRtrStatus_Object = MibScalar
rcOspfv3ASBdrRtrStatus = _RcOspfv3ASBdrRtrStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 5),
    _RcOspfv3ASBdrRtrStatus_Type()
)
rcOspfv3ASBdrRtrStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3ASBdrRtrStatus.setStatus("current")
_RcOspfv3AsScopeLsaCount_Type = Gauge32
_RcOspfv3AsScopeLsaCount_Object = MibScalar
rcOspfv3AsScopeLsaCount = _RcOspfv3AsScopeLsaCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 6),
    _RcOspfv3AsScopeLsaCount_Type()
)
rcOspfv3AsScopeLsaCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AsScopeLsaCount.setStatus("current")
_RcOspfv3AsScopeLsaCksumSum_Type = Integer32
_RcOspfv3AsScopeLsaCksumSum_Object = MibScalar
rcOspfv3AsScopeLsaCksumSum = _RcOspfv3AsScopeLsaCksumSum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 7),
    _RcOspfv3AsScopeLsaCksumSum_Type()
)
rcOspfv3AsScopeLsaCksumSum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AsScopeLsaCksumSum.setStatus("current")
_RcOspfv3OriginateNewLsas_Type = Counter32
_RcOspfv3OriginateNewLsas_Object = MibScalar
rcOspfv3OriginateNewLsas = _RcOspfv3OriginateNewLsas_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 8),
    _RcOspfv3OriginateNewLsas_Type()
)
rcOspfv3OriginateNewLsas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3OriginateNewLsas.setStatus("current")
_RcOspfv3RxNewLsas_Type = Counter32
_RcOspfv3RxNewLsas_Object = MibScalar
rcOspfv3RxNewLsas = _RcOspfv3RxNewLsas_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 9),
    _RcOspfv3RxNewLsas_Type()
)
rcOspfv3RxNewLsas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3RxNewLsas.setStatus("current")
_RcOspfv3ExtLsaCount_Type = Gauge32
_RcOspfv3ExtLsaCount_Object = MibScalar
rcOspfv3ExtLsaCount = _RcOspfv3ExtLsaCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 10),
    _RcOspfv3ExtLsaCount_Type()
)
rcOspfv3ExtLsaCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3ExtLsaCount.setStatus("current")


class _RcOspfv3ExtAreaLsdbLimit_Type(Integer32):
    """Custom type rcOspfv3ExtAreaLsdbLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_RcOspfv3ExtAreaLsdbLimit_Type.__name__ = "Integer32"
_RcOspfv3ExtAreaLsdbLimit_Object = MibScalar
rcOspfv3ExtAreaLsdbLimit = _RcOspfv3ExtAreaLsdbLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 11),
    _RcOspfv3ExtAreaLsdbLimit_Type()
)
rcOspfv3ExtAreaLsdbLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3ExtAreaLsdbLimit.setStatus("current")


class _RcOspfv3MulticastExtensions_Type(Bits):
    """Custom type rcOspfv3MulticastExtensions based on Bits"""
    namedValues = NamedValues(
        *(("interAreaMulticast", 1),
          ("interAsMulticast", 2),
          ("intraAreaMulticast", 0))
    )

_RcOspfv3MulticastExtensions_Type.__name__ = "Bits"
_RcOspfv3MulticastExtensions_Object = MibScalar
rcOspfv3MulticastExtensions = _RcOspfv3MulticastExtensions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 12),
    _RcOspfv3MulticastExtensions_Type()
)
rcOspfv3MulticastExtensions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3MulticastExtensions.setStatus("current")
_RcOspfv3ExitOverflowInterval_Type = Unsigned32
_RcOspfv3ExitOverflowInterval_Object = MibScalar
rcOspfv3ExitOverflowInterval = _RcOspfv3ExitOverflowInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 13),
    _RcOspfv3ExitOverflowInterval_Type()
)
rcOspfv3ExitOverflowInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3ExitOverflowInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3ExitOverflowInterval.setUnits("seconds")
_RcOspfv3DemandExtensions_Type = TruthValue
_RcOspfv3DemandExtensions_Object = MibScalar
rcOspfv3DemandExtensions = _RcOspfv3DemandExtensions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 14),
    _RcOspfv3DemandExtensions_Type()
)
rcOspfv3DemandExtensions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3DemandExtensions.setStatus("current")
_RcOspfv3TrafficEngineeringSupport_Type = TruthValue
_RcOspfv3TrafficEngineeringSupport_Object = MibScalar
rcOspfv3TrafficEngineeringSupport = _RcOspfv3TrafficEngineeringSupport_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 15),
    _RcOspfv3TrafficEngineeringSupport_Type()
)
rcOspfv3TrafficEngineeringSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3TrafficEngineeringSupport.setStatus("current")
_RcOspfv3ReferenceBandwidth_Type = Unsigned32
_RcOspfv3ReferenceBandwidth_Object = MibScalar
rcOspfv3ReferenceBandwidth = _RcOspfv3ReferenceBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 16),
    _RcOspfv3ReferenceBandwidth_Type()
)
rcOspfv3ReferenceBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3ReferenceBandwidth.setStatus("current")


class _RcOspfv3RestartSupport_Type(Integer32):
    """Custom type rcOspfv3RestartSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("plannedAndUnplanned", 3),
          ("plannedOnly", 2))
    )


_RcOspfv3RestartSupport_Type.__name__ = "Integer32"
_RcOspfv3RestartSupport_Object = MibScalar
rcOspfv3RestartSupport = _RcOspfv3RestartSupport_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 17),
    _RcOspfv3RestartSupport_Type()
)
rcOspfv3RestartSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3RestartSupport.setStatus("current")


class _RcOspfv3RestartInterval_Type(Integer32):
    """Custom type rcOspfv3RestartInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_RcOspfv3RestartInterval_Type.__name__ = "Integer32"
_RcOspfv3RestartInterval_Object = MibScalar
rcOspfv3RestartInterval = _RcOspfv3RestartInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 18),
    _RcOspfv3RestartInterval_Type()
)
rcOspfv3RestartInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3RestartInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3RestartInterval.setUnits("seconds")


class _RcOspfv3RestartStatus_Type(Integer32):
    """Custom type rcOspfv3RestartStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notRestarting", 1),
          ("plannedRestart", 2),
          ("unplannedRestart", 3))
    )


_RcOspfv3RestartStatus_Type.__name__ = "Integer32"
_RcOspfv3RestartStatus_Object = MibScalar
rcOspfv3RestartStatus = _RcOspfv3RestartStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 19),
    _RcOspfv3RestartStatus_Type()
)
rcOspfv3RestartStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3RestartStatus.setStatus("current")


class _RcOspfv3RestartAge_Type(Integer32):
    """Custom type rcOspfv3RestartAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_RcOspfv3RestartAge_Type.__name__ = "Integer32"
_RcOspfv3RestartAge_Object = MibScalar
rcOspfv3RestartAge = _RcOspfv3RestartAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 20),
    _RcOspfv3RestartAge_Type()
)
rcOspfv3RestartAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3RestartAge.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3RestartAge.setUnits("seconds")


class _RcOspfv3RestartExitReason_Type(Integer32):
    """Custom type rcOspfv3RestartExitReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("completed", 3),
          ("inProgress", 2),
          ("none", 1),
          ("timedOut", 4),
          ("topologyChanged", 5))
    )


_RcOspfv3RestartExitReason_Type.__name__ = "Integer32"
_RcOspfv3RestartExitReason_Object = MibScalar
rcOspfv3RestartExitReason = _RcOspfv3RestartExitReason_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 21),
    _RcOspfv3RestartExitReason_Type()
)
rcOspfv3RestartExitReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3RestartExitReason.setStatus("current")


class _RcOspfv3BadLsaIgnore_Type(Integer32):
    """Custom type rcOspfv3BadLsaIgnore based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcOspfv3BadLsaIgnore_Type.__name__ = "Integer32"
_RcOspfv3BadLsaIgnore_Object = MibScalar
rcOspfv3BadLsaIgnore = _RcOspfv3BadLsaIgnore_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 1, 22),
    _RcOspfv3BadLsaIgnore_Type()
)
rcOspfv3BadLsaIgnore.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3BadLsaIgnore.setStatus("current")
_RcOspfv3AreaTable_Object = MibTable
rcOspfv3AreaTable = _RcOspfv3AreaTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcOspfv3AreaTable.setStatus("current")
_RcOspfv3AreaEntry_Object = MibTableRow
rcOspfv3AreaEntry = _RcOspfv3AreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1)
)
rcOspfv3AreaEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3AreaId"),
)
if mibBuilder.loadTexts:
    rcOspfv3AreaEntry.setStatus("current")
_RcOspfv3AreaId_Type = IpAddress
_RcOspfv3AreaId_Object = MibTableColumn
rcOspfv3AreaId = _RcOspfv3AreaId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 1),
    _RcOspfv3AreaId_Type()
)
rcOspfv3AreaId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaId.setStatus("current")


class _RcOspfv3ImportAsExtern_Type(Integer32):
    """Custom type rcOspfv3ImportAsExtern based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("importExternal", 1),
          ("importNoExternal", 2),
          ("importNssa", 3))
    )


_RcOspfv3ImportAsExtern_Type.__name__ = "Integer32"
_RcOspfv3ImportAsExtern_Object = MibTableColumn
rcOspfv3ImportAsExtern = _RcOspfv3ImportAsExtern_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 2),
    _RcOspfv3ImportAsExtern_Type()
)
rcOspfv3ImportAsExtern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3ImportAsExtern.setStatus("current")
_RcOspfv3AreaSpfRuns_Type = Counter32
_RcOspfv3AreaSpfRuns_Object = MibTableColumn
rcOspfv3AreaSpfRuns = _RcOspfv3AreaSpfRuns_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 3),
    _RcOspfv3AreaSpfRuns_Type()
)
rcOspfv3AreaSpfRuns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaSpfRuns.setStatus("current")
_RcOspfv3AreaBdrRtrCount_Type = Gauge32
_RcOspfv3AreaBdrRtrCount_Object = MibTableColumn
rcOspfv3AreaBdrRtrCount = _RcOspfv3AreaBdrRtrCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 4),
    _RcOspfv3AreaBdrRtrCount_Type()
)
rcOspfv3AreaBdrRtrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaBdrRtrCount.setStatus("current")
_RcOspfv3AreaAsBdrRtrCount_Type = Gauge32
_RcOspfv3AreaAsBdrRtrCount_Object = MibTableColumn
rcOspfv3AreaAsBdrRtrCount = _RcOspfv3AreaAsBdrRtrCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 5),
    _RcOspfv3AreaAsBdrRtrCount_Type()
)
rcOspfv3AreaAsBdrRtrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaAsBdrRtrCount.setStatus("current")
_RcOspfv3AreaScopeLsaCount_Type = Gauge32
_RcOspfv3AreaScopeLsaCount_Object = MibTableColumn
rcOspfv3AreaScopeLsaCount = _RcOspfv3AreaScopeLsaCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 6),
    _RcOspfv3AreaScopeLsaCount_Type()
)
rcOspfv3AreaScopeLsaCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaScopeLsaCount.setStatus("current")
_RcOspfv3AreaScopeLsaCksumSum_Type = Integer32
_RcOspfv3AreaScopeLsaCksumSum_Object = MibTableColumn
rcOspfv3AreaScopeLsaCksumSum = _RcOspfv3AreaScopeLsaCksumSum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 7),
    _RcOspfv3AreaScopeLsaCksumSum_Type()
)
rcOspfv3AreaScopeLsaCksumSum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaScopeLsaCksumSum.setStatus("current")


class _RcOspfv3AreaSummary_Type(Integer32):
    """Custom type rcOspfv3AreaSummary based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAreaSummary", 1),
          ("sendAreaSummary", 2))
    )


_RcOspfv3AreaSummary_Type.__name__ = "Integer32"
_RcOspfv3AreaSummary_Object = MibTableColumn
rcOspfv3AreaSummary = _RcOspfv3AreaSummary_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 8),
    _RcOspfv3AreaSummary_Type()
)
rcOspfv3AreaSummary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3AreaSummary.setStatus("current")
_RcOspfv3AreaStatus_Type = RowStatus
_RcOspfv3AreaStatus_Object = MibTableColumn
rcOspfv3AreaStatus = _RcOspfv3AreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 9),
    _RcOspfv3AreaStatus_Type()
)
rcOspfv3AreaStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcOspfv3AreaStatus.setStatus("current")


class _RcOspfv3StubMetric_Type(Integer32):
    """Custom type rcOspfv3StubMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_RcOspfv3StubMetric_Type.__name__ = "Integer32"
_RcOspfv3StubMetric_Object = MibTableColumn
rcOspfv3StubMetric = _RcOspfv3StubMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 10),
    _RcOspfv3StubMetric_Type()
)
rcOspfv3StubMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3StubMetric.setStatus("current")


class _RcOspfv3AreaNssaTranslatorRole_Type(Integer32):
    """Custom type rcOspfv3AreaNssaTranslatorRole based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("always", 1),
          ("candidate", 2))
    )


_RcOspfv3AreaNssaTranslatorRole_Type.__name__ = "Integer32"
_RcOspfv3AreaNssaTranslatorRole_Object = MibTableColumn
rcOspfv3AreaNssaTranslatorRole = _RcOspfv3AreaNssaTranslatorRole_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 11),
    _RcOspfv3AreaNssaTranslatorRole_Type()
)
rcOspfv3AreaNssaTranslatorRole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3AreaNssaTranslatorRole.setStatus("current")


class _RcOspfv3AreaNssaTranslatorState_Type(Integer32):
    """Custom type rcOspfv3AreaNssaTranslatorState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("elected", 2),
          ("enabled", 1))
    )


_RcOspfv3AreaNssaTranslatorState_Type.__name__ = "Integer32"
_RcOspfv3AreaNssaTranslatorState_Object = MibTableColumn
rcOspfv3AreaNssaTranslatorState = _RcOspfv3AreaNssaTranslatorState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 12),
    _RcOspfv3AreaNssaTranslatorState_Type()
)
rcOspfv3AreaNssaTranslatorState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaNssaTranslatorState.setStatus("current")


class _RcOspfv3AreaNssaTranslatorStabilityInterval_Type(Unsigned32):
    """Custom type rcOspfv3AreaNssaTranslatorStabilityInterval based on Unsigned32"""
    defaultValue = 40


_RcOspfv3AreaNssaTranslatorStabilityInterval_Object = MibTableColumn
rcOspfv3AreaNssaTranslatorStabilityInterval = _RcOspfv3AreaNssaTranslatorStabilityInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 13),
    _RcOspfv3AreaNssaTranslatorStabilityInterval_Type()
)
rcOspfv3AreaNssaTranslatorStabilityInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3AreaNssaTranslatorStabilityInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3AreaNssaTranslatorStabilityInterval.setUnits("seconds")
_RcOspfv3AreaNssaTranslatorEvents_Type = Counter32
_RcOspfv3AreaNssaTranslatorEvents_Object = MibTableColumn
rcOspfv3AreaNssaTranslatorEvents = _RcOspfv3AreaNssaTranslatorEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 14),
    _RcOspfv3AreaNssaTranslatorEvents_Type()
)
rcOspfv3AreaNssaTranslatorEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaNssaTranslatorEvents.setStatus("current")


class _RcOspfv3AreaStubMetricType_Type(Integer32):
    """Custom type rcOspfv3AreaStubMetricType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("comparableCost", 2),
          ("nonComparable", 3),
          ("ospfv3Metric", 1))
    )


_RcOspfv3AreaStubMetricType_Type.__name__ = "Integer32"
_RcOspfv3AreaStubMetricType_Object = MibTableColumn
rcOspfv3AreaStubMetricType = _RcOspfv3AreaStubMetricType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 2, 1, 15),
    _RcOspfv3AreaStubMetricType_Type()
)
rcOspfv3AreaStubMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3AreaStubMetricType.setStatus("current")
_RcOspfv3AsLsdbTable_Object = MibTable
rcOspfv3AsLsdbTable = _RcOspfv3AsLsdbTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3)
)
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbTable.setStatus("current")
_RcOspfv3AsLsdbEntry_Object = MibTableRow
rcOspfv3AsLsdbEntry = _RcOspfv3AsLsdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1)
)
rcOspfv3AsLsdbEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3AsLsdbType"),
    (0, "RAPID-CITY", "rcOspfv3AsLsdbRouterId"),
    (0, "RAPID-CITY", "rcOspfv3AsLsdbLsid"),
)
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbEntry.setStatus("current")


class _RcOspfv3AsLsdbType_Type(Integer32):
    """Custom type rcOspfv3AsLsdbType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(8,
              8193,
              8194,
              8195,
              8196,
              8199,
              8201,
              16389)
        )
    )
    namedValues = NamedValues(
        *(("asExternal", 16389),
          ("interAreaPrefix", 8195),
          ("interAreaRouter", 8196),
          ("intraAreaPrefix", 8201),
          ("linkLsa", 8),
          ("networkLink", 8194),
          ("routerLink", 8193),
          ("type7", 8199))
    )


_RcOspfv3AsLsdbType_Type.__name__ = "Integer32"
_RcOspfv3AsLsdbType_Object = MibTableColumn
rcOspfv3AsLsdbType = _RcOspfv3AsLsdbType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1, 1),
    _RcOspfv3AsLsdbType_Type()
)
rcOspfv3AsLsdbType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbType.setStatus("current")
_RcOspfv3AsLsdbRouterId_Type = IpAddress
_RcOspfv3AsLsdbRouterId_Object = MibTableColumn
rcOspfv3AsLsdbRouterId = _RcOspfv3AsLsdbRouterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1, 2),
    _RcOspfv3AsLsdbRouterId_Type()
)
rcOspfv3AsLsdbRouterId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbRouterId.setStatus("current")
_RcOspfv3AsLsdbLsid_Type = Unsigned32
_RcOspfv3AsLsdbLsid_Object = MibTableColumn
rcOspfv3AsLsdbLsid = _RcOspfv3AsLsdbLsid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1, 3),
    _RcOspfv3AsLsdbLsid_Type()
)
rcOspfv3AsLsdbLsid.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbLsid.setStatus("current")
_RcOspfv3AsLsdbSequence_Type = Integer32
_RcOspfv3AsLsdbSequence_Object = MibTableColumn
rcOspfv3AsLsdbSequence = _RcOspfv3AsLsdbSequence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1, 4),
    _RcOspfv3AsLsdbSequence_Type()
)
rcOspfv3AsLsdbSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbSequence.setStatus("current")
_RcOspfv3AsLsdbAge_Type = Integer32
_RcOspfv3AsLsdbAge_Object = MibTableColumn
rcOspfv3AsLsdbAge = _RcOspfv3AsLsdbAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1, 5),
    _RcOspfv3AsLsdbAge_Type()
)
rcOspfv3AsLsdbAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbAge.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbAge.setUnits("seconds")
_RcOspfv3AsLsdbChecksum_Type = Integer32
_RcOspfv3AsLsdbChecksum_Object = MibTableColumn
rcOspfv3AsLsdbChecksum = _RcOspfv3AsLsdbChecksum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1, 6),
    _RcOspfv3AsLsdbChecksum_Type()
)
rcOspfv3AsLsdbChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbChecksum.setStatus("current")


class _RcOspfv3AsLsdbAdvertisement_Type(OctetString):
    """Custom type rcOspfv3AsLsdbAdvertisement based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 65535),
    )


_RcOspfv3AsLsdbAdvertisement_Type.__name__ = "OctetString"
_RcOspfv3AsLsdbAdvertisement_Object = MibTableColumn
rcOspfv3AsLsdbAdvertisement = _RcOspfv3AsLsdbAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1, 7),
    _RcOspfv3AsLsdbAdvertisement_Type()
)
rcOspfv3AsLsdbAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbAdvertisement.setStatus("current")
_RcOspfv3AsLsdbTypeKnown_Type = TruthValue
_RcOspfv3AsLsdbTypeKnown_Object = MibTableColumn
rcOspfv3AsLsdbTypeKnown = _RcOspfv3AsLsdbTypeKnown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 3, 1, 8),
    _RcOspfv3AsLsdbTypeKnown_Type()
)
rcOspfv3AsLsdbTypeKnown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbTypeKnown.setStatus("current")
_RcOspfv3AreaLsdbTable_Object = MibTable
rcOspfv3AreaLsdbTable = _RcOspfv3AreaLsdbTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4)
)
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbTable.setStatus("current")
_RcOspfv3AreaLsdbEntry_Object = MibTableRow
rcOspfv3AreaLsdbEntry = _RcOspfv3AreaLsdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1)
)
rcOspfv3AreaLsdbEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3AreaLsdbAreaId"),
    (0, "RAPID-CITY", "rcOspfv3AreaLsdbType"),
    (0, "RAPID-CITY", "rcOspfv3AreaLsdbRouterId"),
    (0, "RAPID-CITY", "rcOspfv3AreaLsdbLsid"),
)
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbEntry.setStatus("current")
_RcOspfv3AreaLsdbAreaId_Type = IpAddress
_RcOspfv3AreaLsdbAreaId_Object = MibTableColumn
rcOspfv3AreaLsdbAreaId = _RcOspfv3AreaLsdbAreaId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 1),
    _RcOspfv3AreaLsdbAreaId_Type()
)
rcOspfv3AreaLsdbAreaId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbAreaId.setStatus("current")


class _RcOspfv3AreaLsdbType_Type(Integer32):
    """Custom type rcOspfv3AreaLsdbType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(8,
              8193,
              8194,
              8195,
              8196,
              8199,
              8201,
              16389)
        )
    )
    namedValues = NamedValues(
        *(("asExternal", 16389),
          ("interAreaPrefix", 8195),
          ("interAreaRouter", 8196),
          ("intraAreaPrefix", 8201),
          ("linkLsa", 8),
          ("networkLink", 8194),
          ("routerLink", 8193),
          ("type7", 8199))
    )


_RcOspfv3AreaLsdbType_Type.__name__ = "Integer32"
_RcOspfv3AreaLsdbType_Object = MibTableColumn
rcOspfv3AreaLsdbType = _RcOspfv3AreaLsdbType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 2),
    _RcOspfv3AreaLsdbType_Type()
)
rcOspfv3AreaLsdbType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbType.setStatus("current")
_RcOspfv3AreaLsdbRouterId_Type = IpAddress
_RcOspfv3AreaLsdbRouterId_Object = MibTableColumn
rcOspfv3AreaLsdbRouterId = _RcOspfv3AreaLsdbRouterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 3),
    _RcOspfv3AreaLsdbRouterId_Type()
)
rcOspfv3AreaLsdbRouterId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbRouterId.setStatus("current")
_RcOspfv3AreaLsdbLsid_Type = Unsigned32
_RcOspfv3AreaLsdbLsid_Object = MibTableColumn
rcOspfv3AreaLsdbLsid = _RcOspfv3AreaLsdbLsid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 4),
    _RcOspfv3AreaLsdbLsid_Type()
)
rcOspfv3AreaLsdbLsid.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbLsid.setStatus("current")
_RcOspfv3AreaLsdbSequence_Type = Integer32
_RcOspfv3AreaLsdbSequence_Object = MibTableColumn
rcOspfv3AreaLsdbSequence = _RcOspfv3AreaLsdbSequence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 5),
    _RcOspfv3AreaLsdbSequence_Type()
)
rcOspfv3AreaLsdbSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbSequence.setStatus("current")
_RcOspfv3AreaLsdbAge_Type = Integer32
_RcOspfv3AreaLsdbAge_Object = MibTableColumn
rcOspfv3AreaLsdbAge = _RcOspfv3AreaLsdbAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 6),
    _RcOspfv3AreaLsdbAge_Type()
)
rcOspfv3AreaLsdbAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbAge.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbAge.setUnits("seconds")
_RcOspfv3AreaLsdbChecksum_Type = Integer32
_RcOspfv3AreaLsdbChecksum_Object = MibTableColumn
rcOspfv3AreaLsdbChecksum = _RcOspfv3AreaLsdbChecksum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 7),
    _RcOspfv3AreaLsdbChecksum_Type()
)
rcOspfv3AreaLsdbChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbChecksum.setStatus("current")


class _RcOspfv3AreaLsdbAdvertisement_Type(OctetString):
    """Custom type rcOspfv3AreaLsdbAdvertisement based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 65535),
    )


_RcOspfv3AreaLsdbAdvertisement_Type.__name__ = "OctetString"
_RcOspfv3AreaLsdbAdvertisement_Object = MibTableColumn
rcOspfv3AreaLsdbAdvertisement = _RcOspfv3AreaLsdbAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 8),
    _RcOspfv3AreaLsdbAdvertisement_Type()
)
rcOspfv3AreaLsdbAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbAdvertisement.setStatus("current")
_RcOspfv3AreaLsdbTypeKnown_Type = TruthValue
_RcOspfv3AreaLsdbTypeKnown_Object = MibTableColumn
rcOspfv3AreaLsdbTypeKnown = _RcOspfv3AreaLsdbTypeKnown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 4, 1, 9),
    _RcOspfv3AreaLsdbTypeKnown_Type()
)
rcOspfv3AreaLsdbTypeKnown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbTypeKnown.setStatus("current")
_RcOspfv3LinkLsdbTable_Object = MibTable
rcOspfv3LinkLsdbTable = _RcOspfv3LinkLsdbTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5)
)
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbTable.setStatus("current")
_RcOspfv3LinkLsdbEntry_Object = MibTableRow
rcOspfv3LinkLsdbEntry = _RcOspfv3LinkLsdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1)
)
rcOspfv3LinkLsdbEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3LinkLsdbIfIndex"),
    (0, "RAPID-CITY", "rcOspfv3LinkLsdbType"),
    (0, "RAPID-CITY", "rcOspfv3LinkLsdbRouterId"),
    (0, "RAPID-CITY", "rcOspfv3LinkLsdbLsid"),
)
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbEntry.setStatus("current")
_RcOspfv3LinkLsdbIfIndex_Type = InterfaceIndex
_RcOspfv3LinkLsdbIfIndex_Object = MibTableColumn
rcOspfv3LinkLsdbIfIndex = _RcOspfv3LinkLsdbIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 1),
    _RcOspfv3LinkLsdbIfIndex_Type()
)
rcOspfv3LinkLsdbIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbIfIndex.setStatus("current")


class _RcOspfv3LinkLsdbType_Type(Integer32):
    """Custom type rcOspfv3LinkLsdbType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(8,
              8193,
              8194,
              8195,
              8196,
              8199,
              8201,
              16389)
        )
    )
    namedValues = NamedValues(
        *(("asExternal", 16389),
          ("interAreaPrefix", 8195),
          ("interAreaRouter", 8196),
          ("intraAreaPrefix", 8201),
          ("linkLsa", 8),
          ("networkLink", 8194),
          ("routerLink", 8193),
          ("type7", 8199))
    )


_RcOspfv3LinkLsdbType_Type.__name__ = "Integer32"
_RcOspfv3LinkLsdbType_Object = MibTableColumn
rcOspfv3LinkLsdbType = _RcOspfv3LinkLsdbType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 2),
    _RcOspfv3LinkLsdbType_Type()
)
rcOspfv3LinkLsdbType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbType.setStatus("current")
_RcOspfv3LinkLsdbRouterId_Type = IpAddress
_RcOspfv3LinkLsdbRouterId_Object = MibTableColumn
rcOspfv3LinkLsdbRouterId = _RcOspfv3LinkLsdbRouterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 3),
    _RcOspfv3LinkLsdbRouterId_Type()
)
rcOspfv3LinkLsdbRouterId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbRouterId.setStatus("current")
_RcOspfv3LinkLsdbLsid_Type = Unsigned32
_RcOspfv3LinkLsdbLsid_Object = MibTableColumn
rcOspfv3LinkLsdbLsid = _RcOspfv3LinkLsdbLsid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 4),
    _RcOspfv3LinkLsdbLsid_Type()
)
rcOspfv3LinkLsdbLsid.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbLsid.setStatus("current")
_RcOspfv3LinkLsdbSequence_Type = Integer32
_RcOspfv3LinkLsdbSequence_Object = MibTableColumn
rcOspfv3LinkLsdbSequence = _RcOspfv3LinkLsdbSequence_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 5),
    _RcOspfv3LinkLsdbSequence_Type()
)
rcOspfv3LinkLsdbSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbSequence.setStatus("current")
_RcOspfv3LinkLsdbAge_Type = Integer32
_RcOspfv3LinkLsdbAge_Object = MibTableColumn
rcOspfv3LinkLsdbAge = _RcOspfv3LinkLsdbAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 6),
    _RcOspfv3LinkLsdbAge_Type()
)
rcOspfv3LinkLsdbAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbAge.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbAge.setUnits("seconds")
_RcOspfv3LinkLsdbChecksum_Type = Integer32
_RcOspfv3LinkLsdbChecksum_Object = MibTableColumn
rcOspfv3LinkLsdbChecksum = _RcOspfv3LinkLsdbChecksum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 7),
    _RcOspfv3LinkLsdbChecksum_Type()
)
rcOspfv3LinkLsdbChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbChecksum.setStatus("current")


class _RcOspfv3LinkLsdbAdvertisement_Type(OctetString):
    """Custom type rcOspfv3LinkLsdbAdvertisement based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 65535),
    )


_RcOspfv3LinkLsdbAdvertisement_Type.__name__ = "OctetString"
_RcOspfv3LinkLsdbAdvertisement_Object = MibTableColumn
rcOspfv3LinkLsdbAdvertisement = _RcOspfv3LinkLsdbAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 8),
    _RcOspfv3LinkLsdbAdvertisement_Type()
)
rcOspfv3LinkLsdbAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbAdvertisement.setStatus("current")
_RcOspfv3LinkLsdbTypeKnown_Type = TruthValue
_RcOspfv3LinkLsdbTypeKnown_Object = MibTableColumn
rcOspfv3LinkLsdbTypeKnown = _RcOspfv3LinkLsdbTypeKnown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 5, 1, 9),
    _RcOspfv3LinkLsdbTypeKnown_Type()
)
rcOspfv3LinkLsdbTypeKnown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbTypeKnown.setStatus("current")
_RcOspfv3HostTable_Object = MibTable
rcOspfv3HostTable = _RcOspfv3HostTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 6)
)
if mibBuilder.loadTexts:
    rcOspfv3HostTable.setStatus("current")
_RcOspfv3HostEntry_Object = MibTableRow
rcOspfv3HostEntry = _RcOspfv3HostEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 6, 1)
)
rcOspfv3HostEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3HostAddressType"),
    (0, "RAPID-CITY", "rcOspfv3HostAddress"),
)
if mibBuilder.loadTexts:
    rcOspfv3HostEntry.setStatus("current")


class _RcOspfv3HostAddressType_Type(Integer32):
    """Custom type rcOspfv3HostAddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              16)
        )
    )
    namedValues = NamedValues(
        *(("dns", 16),
          ("ipv4", 1),
          ("ipv4z", 3),
          ("ipv6", 2),
          ("ipv6z", 4),
          ("unknown", 0))
    )


_RcOspfv3HostAddressType_Type.__name__ = "Integer32"
_RcOspfv3HostAddressType_Object = MibTableColumn
rcOspfv3HostAddressType = _RcOspfv3HostAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 6, 1, 1),
    _RcOspfv3HostAddressType_Type()
)
rcOspfv3HostAddressType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3HostAddressType.setStatus("current")


class _RcOspfv3HostAddress_Type(OctetString):
    """Custom type rcOspfv3HostAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RcOspfv3HostAddress_Type.__name__ = "OctetString"
_RcOspfv3HostAddress_Object = MibTableColumn
rcOspfv3HostAddress = _RcOspfv3HostAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 6, 1, 2),
    _RcOspfv3HostAddress_Type()
)
rcOspfv3HostAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3HostAddress.setStatus("current")


class _RcOspfv3HostMetric_Type(Integer32):
    """Custom type rcOspfv3HostMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcOspfv3HostMetric_Type.__name__ = "Integer32"
_RcOspfv3HostMetric_Object = MibTableColumn
rcOspfv3HostMetric = _RcOspfv3HostMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 6, 1, 3),
    _RcOspfv3HostMetric_Type()
)
rcOspfv3HostMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3HostMetric.setStatus("current")
_RcOspfv3HostStatus_Type = RowStatus
_RcOspfv3HostStatus_Object = MibTableColumn
rcOspfv3HostStatus = _RcOspfv3HostStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 6, 1, 4),
    _RcOspfv3HostStatus_Type()
)
rcOspfv3HostStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcOspfv3HostStatus.setStatus("current")
_RcOspfv3HostAreaID_Type = IpAddress
_RcOspfv3HostAreaID_Object = MibTableColumn
rcOspfv3HostAreaID = _RcOspfv3HostAreaID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 6, 1, 5),
    _RcOspfv3HostAreaID_Type()
)
rcOspfv3HostAreaID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3HostAreaID.setStatus("current")
_RcOspfv3IfTable_Object = MibTable
rcOspfv3IfTable = _RcOspfv3IfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7)
)
if mibBuilder.loadTexts:
    rcOspfv3IfTable.setStatus("current")
_RcOspfv3IfEntry_Object = MibTableRow
rcOspfv3IfEntry = _RcOspfv3IfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1)
)
rcOspfv3IfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3IfIndex"),
)
if mibBuilder.loadTexts:
    rcOspfv3IfEntry.setStatus("current")
_RcOspfv3IfIndex_Type = InterfaceIndex
_RcOspfv3IfIndex_Object = MibTableColumn
rcOspfv3IfIndex = _RcOspfv3IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 1),
    _RcOspfv3IfIndex_Type()
)
rcOspfv3IfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3IfIndex.setStatus("current")


class _RcOspfv3IfAreaId_Type(IpAddress):
    """Custom type rcOspfv3IfAreaId based on IpAddress"""
    defaultHexValue = "00000000"


_RcOspfv3IfAreaId_Object = MibTableColumn
rcOspfv3IfAreaId = _RcOspfv3IfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 2),
    _RcOspfv3IfAreaId_Type()
)
rcOspfv3IfAreaId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfAreaId.setStatus("current")


class _RcOspfv3IfType_Type(Integer32):
    """Custom type rcOspfv3IfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 1),
          ("nbma", 2),
          ("pointToMultipoint", 5),
          ("pointToPoint", 3))
    )


_RcOspfv3IfType_Type.__name__ = "Integer32"
_RcOspfv3IfType_Object = MibTableColumn
rcOspfv3IfType = _RcOspfv3IfType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 3),
    _RcOspfv3IfType_Type()
)
rcOspfv3IfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfType.setStatus("current")


class _RcOspfv3IfAdminStat_Type(Integer32):
    """Custom type rcOspfv3IfAdminStat based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcOspfv3IfAdminStat_Type.__name__ = "Integer32"
_RcOspfv3IfAdminStat_Object = MibTableColumn
rcOspfv3IfAdminStat = _RcOspfv3IfAdminStat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 4),
    _RcOspfv3IfAdminStat_Type()
)
rcOspfv3IfAdminStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfAdminStat.setStatus("current")


class _RcOspfv3IfRtrPriority_Type(Integer32):
    """Custom type rcOspfv3IfRtrPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcOspfv3IfRtrPriority_Type.__name__ = "Integer32"
_RcOspfv3IfRtrPriority_Object = MibTableColumn
rcOspfv3IfRtrPriority = _RcOspfv3IfRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 5),
    _RcOspfv3IfRtrPriority_Type()
)
rcOspfv3IfRtrPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfRtrPriority.setStatus("current")


class _RcOspfv3IfTransitDelay_Type(Integer32):
    """Custom type rcOspfv3IfTransitDelay based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_RcOspfv3IfTransitDelay_Type.__name__ = "Integer32"
_RcOspfv3IfTransitDelay_Object = MibTableColumn
rcOspfv3IfTransitDelay = _RcOspfv3IfTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 6),
    _RcOspfv3IfTransitDelay_Type()
)
rcOspfv3IfTransitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfTransitDelay.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3IfTransitDelay.setUnits("seconds")


class _RcOspfv3IfRetransInterval_Type(Integer32):
    """Custom type rcOspfv3IfRetransInterval based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_RcOspfv3IfRetransInterval_Type.__name__ = "Integer32"
_RcOspfv3IfRetransInterval_Object = MibTableColumn
rcOspfv3IfRetransInterval = _RcOspfv3IfRetransInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 7),
    _RcOspfv3IfRetransInterval_Type()
)
rcOspfv3IfRetransInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfRetransInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3IfRetransInterval.setUnits("seconds")


class _RcOspfv3IfHelloInterval_Type(Integer32):
    """Custom type rcOspfv3IfHelloInterval based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcOspfv3IfHelloInterval_Type.__name__ = "Integer32"
_RcOspfv3IfHelloInterval_Object = MibTableColumn
rcOspfv3IfHelloInterval = _RcOspfv3IfHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 8),
    _RcOspfv3IfHelloInterval_Type()
)
rcOspfv3IfHelloInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfHelloInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3IfHelloInterval.setUnits("seconds")


class _RcOspfv3IfRtrDeadInterval_Type(Integer32):
    """Custom type rcOspfv3IfRtrDeadInterval based on Integer32"""
    defaultValue = 40

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcOspfv3IfRtrDeadInterval_Type.__name__ = "Integer32"
_RcOspfv3IfRtrDeadInterval_Object = MibTableColumn
rcOspfv3IfRtrDeadInterval = _RcOspfv3IfRtrDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 9),
    _RcOspfv3IfRtrDeadInterval_Type()
)
rcOspfv3IfRtrDeadInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfRtrDeadInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3IfRtrDeadInterval.setUnits("seconds")


class _RcOspfv3IfPollInterval_Type(Unsigned32):
    """Custom type rcOspfv3IfPollInterval based on Unsigned32"""
    defaultValue = 120

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcOspfv3IfPollInterval_Type.__name__ = "Unsigned32"
_RcOspfv3IfPollInterval_Object = MibTableColumn
rcOspfv3IfPollInterval = _RcOspfv3IfPollInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 10),
    _RcOspfv3IfPollInterval_Type()
)
rcOspfv3IfPollInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfPollInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3IfPollInterval.setUnits("seconds")


class _RcOspfv3IfState_Type(Integer32):
    """Custom type rcOspfv3IfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("backupDesignatedRouter", 6),
          ("designatedRouter", 5),
          ("down", 1),
          ("loopback", 2),
          ("otherDesignatedRouter", 7),
          ("pointToPoint", 4),
          ("waiting", 3))
    )


_RcOspfv3IfState_Type.__name__ = "Integer32"
_RcOspfv3IfState_Object = MibTableColumn
rcOspfv3IfState = _RcOspfv3IfState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 11),
    _RcOspfv3IfState_Type()
)
rcOspfv3IfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3IfState.setStatus("current")
_RcOspfv3IfDesignatedRouter_Type = IpAddress
_RcOspfv3IfDesignatedRouter_Object = MibTableColumn
rcOspfv3IfDesignatedRouter = _RcOspfv3IfDesignatedRouter_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 12),
    _RcOspfv3IfDesignatedRouter_Type()
)
rcOspfv3IfDesignatedRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3IfDesignatedRouter.setStatus("current")
_RcOspfv3IfBackupDesignatedRouter_Type = IpAddress
_RcOspfv3IfBackupDesignatedRouter_Object = MibTableColumn
rcOspfv3IfBackupDesignatedRouter = _RcOspfv3IfBackupDesignatedRouter_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 14),
    _RcOspfv3IfBackupDesignatedRouter_Type()
)
rcOspfv3IfBackupDesignatedRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3IfBackupDesignatedRouter.setStatus("current")
_RcOspfv3IfEvents_Type = Counter32
_RcOspfv3IfEvents_Object = MibTableColumn
rcOspfv3IfEvents = _RcOspfv3IfEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 15),
    _RcOspfv3IfEvents_Type()
)
rcOspfv3IfEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3IfEvents.setStatus("current")
_RcOspfv3IfStatus_Type = RowStatus
_RcOspfv3IfStatus_Object = MibTableColumn
rcOspfv3IfStatus = _RcOspfv3IfStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 17),
    _RcOspfv3IfStatus_Type()
)
rcOspfv3IfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcOspfv3IfStatus.setStatus("current")


class _RcOspfv3IfMulticastForwarding_Type(Integer32):
    """Custom type rcOspfv3IfMulticastForwarding based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("blocked", 1),
          ("multicast", 2),
          ("unicast", 3))
    )


_RcOspfv3IfMulticastForwarding_Type.__name__ = "Integer32"
_RcOspfv3IfMulticastForwarding_Object = MibTableColumn
rcOspfv3IfMulticastForwarding = _RcOspfv3IfMulticastForwarding_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 18),
    _RcOspfv3IfMulticastForwarding_Type()
)
rcOspfv3IfMulticastForwarding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfMulticastForwarding.setStatus("current")


class _RcOspfv3IfDemand_Type(TruthValue):
    """Custom type rcOspfv3IfDemand based on TruthValue"""


_RcOspfv3IfDemand_Object = MibTableColumn
rcOspfv3IfDemand = _RcOspfv3IfDemand_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 19),
    _RcOspfv3IfDemand_Type()
)
rcOspfv3IfDemand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfDemand.setStatus("current")


class _RcOspfv3IfMetricValue_Type(Integer32):
    """Custom type rcOspfv3IfMetricValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcOspfv3IfMetricValue_Type.__name__ = "Integer32"
_RcOspfv3IfMetricValue_Object = MibTableColumn
rcOspfv3IfMetricValue = _RcOspfv3IfMetricValue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 20),
    _RcOspfv3IfMetricValue_Type()
)
rcOspfv3IfMetricValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfMetricValue.setStatus("current")
_RcOspfv3IfLinkScopeLsaCount_Type = Gauge32
_RcOspfv3IfLinkScopeLsaCount_Object = MibTableColumn
rcOspfv3IfLinkScopeLsaCount = _RcOspfv3IfLinkScopeLsaCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 21),
    _RcOspfv3IfLinkScopeLsaCount_Type()
)
rcOspfv3IfLinkScopeLsaCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3IfLinkScopeLsaCount.setStatus("current")
_RcOspfv3IfLinkLsaCksumSum_Type = Integer32
_RcOspfv3IfLinkLsaCksumSum_Object = MibTableColumn
rcOspfv3IfLinkLsaCksumSum = _RcOspfv3IfLinkLsaCksumSum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 22),
    _RcOspfv3IfLinkLsaCksumSum_Type()
)
rcOspfv3IfLinkLsaCksumSum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3IfLinkLsaCksumSum.setStatus("current")


class _RcOspfv3IfInstId_Type(Integer32):
    """Custom type rcOspfv3IfInstId based on Integer32"""
    defaultValue = 0


_RcOspfv3IfInstId_Object = MibTableColumn
rcOspfv3IfInstId = _RcOspfv3IfInstId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 23),
    _RcOspfv3IfInstId_Type()
)
rcOspfv3IfInstId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfInstId.setStatus("current")


class _RcOspfv3IfDemandNbrProbe_Type(TruthValue):
    """Custom type rcOspfv3IfDemandNbrProbe based on TruthValue"""


_RcOspfv3IfDemandNbrProbe_Object = MibTableColumn
rcOspfv3IfDemandNbrProbe = _RcOspfv3IfDemandNbrProbe_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 24),
    _RcOspfv3IfDemandNbrProbe_Type()
)
rcOspfv3IfDemandNbrProbe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfDemandNbrProbe.setStatus("current")


class _RcOspfv3IfDemandNbrProbeRetxLimit_Type(Unsigned32):
    """Custom type rcOspfv3IfDemandNbrProbeRetxLimit based on Unsigned32"""
    defaultValue = 10


_RcOspfv3IfDemandNbrProbeRetxLimit_Object = MibTableColumn
rcOspfv3IfDemandNbrProbeRetxLimit = _RcOspfv3IfDemandNbrProbeRetxLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 25),
    _RcOspfv3IfDemandNbrProbeRetxLimit_Type()
)
rcOspfv3IfDemandNbrProbeRetxLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfDemandNbrProbeRetxLimit.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3IfDemandNbrProbeRetxLimit.setUnits("seconds")


class _RcOspfv3IfDemandNbrProbeInterval_Type(Unsigned32):
    """Custom type rcOspfv3IfDemandNbrProbeInterval based on Unsigned32"""
    defaultValue = 120


_RcOspfv3IfDemandNbrProbeInterval_Object = MibTableColumn
rcOspfv3IfDemandNbrProbeInterval = _RcOspfv3IfDemandNbrProbeInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 7, 1, 26),
    _RcOspfv3IfDemandNbrProbeInterval_Type()
)
rcOspfv3IfDemandNbrProbeInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3IfDemandNbrProbeInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3IfDemandNbrProbeInterval.setUnits("seconds")
_RcOspfv3VirtIfTable_Object = MibTable
rcOspfv3VirtIfTable = _RcOspfv3VirtIfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8)
)
if mibBuilder.loadTexts:
    rcOspfv3VirtIfTable.setStatus("current")
_RcOspfv3VirtIfEntry_Object = MibTableRow
rcOspfv3VirtIfEntry = _RcOspfv3VirtIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1)
)
rcOspfv3VirtIfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3VirtIfAreaId"),
    (0, "RAPID-CITY", "rcOspfv3VirtIfNeighbor"),
)
if mibBuilder.loadTexts:
    rcOspfv3VirtIfEntry.setStatus("current")
_RcOspfv3VirtIfAreaId_Type = IpAddress
_RcOspfv3VirtIfAreaId_Object = MibTableColumn
rcOspfv3VirtIfAreaId = _RcOspfv3VirtIfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 1),
    _RcOspfv3VirtIfAreaId_Type()
)
rcOspfv3VirtIfAreaId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfAreaId.setStatus("current")
_RcOspfv3VirtIfNeighbor_Type = IpAddress
_RcOspfv3VirtIfNeighbor_Object = MibTableColumn
rcOspfv3VirtIfNeighbor = _RcOspfv3VirtIfNeighbor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 2),
    _RcOspfv3VirtIfNeighbor_Type()
)
rcOspfv3VirtIfNeighbor.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfNeighbor.setStatus("current")
_RcOspfv3VirtIfIndex_Type = Integer32
_RcOspfv3VirtIfIndex_Object = MibTableColumn
rcOspfv3VirtIfIndex = _RcOspfv3VirtIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 3),
    _RcOspfv3VirtIfIndex_Type()
)
rcOspfv3VirtIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfIndex.setStatus("current")


class _RcOspfv3VirtIfTransitDelay_Type(Integer32):
    """Custom type rcOspfv3VirtIfTransitDelay based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_RcOspfv3VirtIfTransitDelay_Type.__name__ = "Integer32"
_RcOspfv3VirtIfTransitDelay_Object = MibTableColumn
rcOspfv3VirtIfTransitDelay = _RcOspfv3VirtIfTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 4),
    _RcOspfv3VirtIfTransitDelay_Type()
)
rcOspfv3VirtIfTransitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfTransitDelay.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfTransitDelay.setUnits("seconds")


class _RcOspfv3VirtIfRetransInterval_Type(Integer32):
    """Custom type rcOspfv3VirtIfRetransInterval based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_RcOspfv3VirtIfRetransInterval_Type.__name__ = "Integer32"
_RcOspfv3VirtIfRetransInterval_Object = MibTableColumn
rcOspfv3VirtIfRetransInterval = _RcOspfv3VirtIfRetransInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 5),
    _RcOspfv3VirtIfRetransInterval_Type()
)
rcOspfv3VirtIfRetransInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfRetransInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfRetransInterval.setUnits("seconds")


class _RcOspfv3VirtIfHelloInterval_Type(Integer32):
    """Custom type rcOspfv3VirtIfHelloInterval based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcOspfv3VirtIfHelloInterval_Type.__name__ = "Integer32"
_RcOspfv3VirtIfHelloInterval_Object = MibTableColumn
rcOspfv3VirtIfHelloInterval = _RcOspfv3VirtIfHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 6),
    _RcOspfv3VirtIfHelloInterval_Type()
)
rcOspfv3VirtIfHelloInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfHelloInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfHelloInterval.setUnits("seconds")


class _RcOspfv3VirtIfRtrDeadInterval_Type(Integer32):
    """Custom type rcOspfv3VirtIfRtrDeadInterval based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcOspfv3VirtIfRtrDeadInterval_Type.__name__ = "Integer32"
_RcOspfv3VirtIfRtrDeadInterval_Object = MibTableColumn
rcOspfv3VirtIfRtrDeadInterval = _RcOspfv3VirtIfRtrDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 7),
    _RcOspfv3VirtIfRtrDeadInterval_Type()
)
rcOspfv3VirtIfRtrDeadInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfRtrDeadInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfRtrDeadInterval.setUnits("seconds")


class _RcOspfv3VirtIfState_Type(Integer32):
    """Custom type rcOspfv3VirtIfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("pointToPoint", 4))
    )


_RcOspfv3VirtIfState_Type.__name__ = "Integer32"
_RcOspfv3VirtIfState_Object = MibTableColumn
rcOspfv3VirtIfState = _RcOspfv3VirtIfState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 8),
    _RcOspfv3VirtIfState_Type()
)
rcOspfv3VirtIfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfState.setStatus("current")
_RcOspfv3VirtIfEvents_Type = Counter32
_RcOspfv3VirtIfEvents_Object = MibTableColumn
rcOspfv3VirtIfEvents = _RcOspfv3VirtIfEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 9),
    _RcOspfv3VirtIfEvents_Type()
)
rcOspfv3VirtIfEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfEvents.setStatus("current")
_RcOspfv3VirtIfStatus_Type = RowStatus
_RcOspfv3VirtIfStatus_Object = MibTableColumn
rcOspfv3VirtIfStatus = _RcOspfv3VirtIfStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 10),
    _RcOspfv3VirtIfStatus_Type()
)
rcOspfv3VirtIfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfStatus.setStatus("current")
_RcOspfv3VirtIfLinkScopeLsaCount_Type = Gauge32
_RcOspfv3VirtIfLinkScopeLsaCount_Object = MibTableColumn
rcOspfv3VirtIfLinkScopeLsaCount = _RcOspfv3VirtIfLinkScopeLsaCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 11),
    _RcOspfv3VirtIfLinkScopeLsaCount_Type()
)
rcOspfv3VirtIfLinkScopeLsaCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfLinkScopeLsaCount.setStatus("current")
_RcOspfv3VirtIfLinkLsaCksumSum_Type = Integer32
_RcOspfv3VirtIfLinkLsaCksumSum_Object = MibTableColumn
rcOspfv3VirtIfLinkLsaCksumSum = _RcOspfv3VirtIfLinkLsaCksumSum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 8, 1, 12),
    _RcOspfv3VirtIfLinkLsaCksumSum_Type()
)
rcOspfv3VirtIfLinkLsaCksumSum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtIfLinkLsaCksumSum.setStatus("current")
_RcOspfv3NbrTable_Object = MibTable
rcOspfv3NbrTable = _RcOspfv3NbrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9)
)
if mibBuilder.loadTexts:
    rcOspfv3NbrTable.setStatus("current")
_RcOspfv3NbrEntry_Object = MibTableRow
rcOspfv3NbrEntry = _RcOspfv3NbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1)
)
rcOspfv3NbrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3NbrIfIndex"),
    (0, "RAPID-CITY", "rcOspfv3NbrRtrId"),
)
if mibBuilder.loadTexts:
    rcOspfv3NbrEntry.setStatus("current")
_RcOspfv3NbrIfIndex_Type = InterfaceIndex
_RcOspfv3NbrIfIndex_Object = MibTableColumn
rcOspfv3NbrIfIndex = _RcOspfv3NbrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 1),
    _RcOspfv3NbrIfIndex_Type()
)
rcOspfv3NbrIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3NbrIfIndex.setStatus("current")
_RcOspfv3NbrRtrId_Type = IpAddress
_RcOspfv3NbrRtrId_Object = MibTableColumn
rcOspfv3NbrRtrId = _RcOspfv3NbrRtrId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 2),
    _RcOspfv3NbrRtrId_Type()
)
rcOspfv3NbrRtrId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3NbrRtrId.setStatus("current")


class _RcOspfv3NbrAddressType_Type(Integer32):
    """Custom type rcOspfv3NbrAddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              16)
        )
    )
    namedValues = NamedValues(
        *(("dns", 16),
          ("ipv4", 1),
          ("ipv4z", 3),
          ("ipv6", 2),
          ("ipv6z", 4),
          ("unknown", 0))
    )


_RcOspfv3NbrAddressType_Type.__name__ = "Integer32"
_RcOspfv3NbrAddressType_Object = MibTableColumn
rcOspfv3NbrAddressType = _RcOspfv3NbrAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 3),
    _RcOspfv3NbrAddressType_Type()
)
rcOspfv3NbrAddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrAddressType.setStatus("current")


class _RcOspfv3NbrAddress_Type(OctetString):
    """Custom type rcOspfv3NbrAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RcOspfv3NbrAddress_Type.__name__ = "OctetString"
_RcOspfv3NbrAddress_Object = MibTableColumn
rcOspfv3NbrAddress = _RcOspfv3NbrAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 4),
    _RcOspfv3NbrAddress_Type()
)
rcOspfv3NbrAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrAddress.setStatus("current")
_RcOspfv3NbrOptions_Type = Integer32
_RcOspfv3NbrOptions_Object = MibTableColumn
rcOspfv3NbrOptions = _RcOspfv3NbrOptions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 5),
    _RcOspfv3NbrOptions_Type()
)
rcOspfv3NbrOptions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrOptions.setStatus("current")


class _RcOspfv3NbrPriority_Type(Integer32):
    """Custom type rcOspfv3NbrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcOspfv3NbrPriority_Type.__name__ = "Integer32"
_RcOspfv3NbrPriority_Object = MibTableColumn
rcOspfv3NbrPriority = _RcOspfv3NbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 6),
    _RcOspfv3NbrPriority_Type()
)
rcOspfv3NbrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrPriority.setStatus("current")


class _RcOspfv3NbrState_Type(Integer32):
    """Custom type rcOspfv3NbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("attempt", 2),
          ("down", 1),
          ("exchange", 6),
          ("exchangeStart", 5),
          ("full", 8),
          ("init", 3),
          ("loading", 7),
          ("twoWay", 4))
    )


_RcOspfv3NbrState_Type.__name__ = "Integer32"
_RcOspfv3NbrState_Object = MibTableColumn
rcOspfv3NbrState = _RcOspfv3NbrState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 7),
    _RcOspfv3NbrState_Type()
)
rcOspfv3NbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrState.setStatus("current")
_RcOspfv3NbrEvents_Type = Counter32
_RcOspfv3NbrEvents_Object = MibTableColumn
rcOspfv3NbrEvents = _RcOspfv3NbrEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 8),
    _RcOspfv3NbrEvents_Type()
)
rcOspfv3NbrEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrEvents.setStatus("current")
_RcOspfv3NbrLsRetransQLen_Type = Gauge32
_RcOspfv3NbrLsRetransQLen_Object = MibTableColumn
rcOspfv3NbrLsRetransQLen = _RcOspfv3NbrLsRetransQLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 9),
    _RcOspfv3NbrLsRetransQLen_Type()
)
rcOspfv3NbrLsRetransQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrLsRetransQLen.setStatus("current")
_RcOspfv3NbrHelloSuppressed_Type = TruthValue
_RcOspfv3NbrHelloSuppressed_Object = MibTableColumn
rcOspfv3NbrHelloSuppressed = _RcOspfv3NbrHelloSuppressed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 10),
    _RcOspfv3NbrHelloSuppressed_Type()
)
rcOspfv3NbrHelloSuppressed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrHelloSuppressed.setStatus("current")
_RcOspfv3NbrIfId_Type = Integer32
_RcOspfv3NbrIfId_Object = MibTableColumn
rcOspfv3NbrIfId = _RcOspfv3NbrIfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 11),
    _RcOspfv3NbrIfId_Type()
)
rcOspfv3NbrIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrIfId.setStatus("current")


class _RcOspfv3NbrRestartHelperStatus_Type(Integer32):
    """Custom type rcOspfv3NbrRestartHelperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("helping", 2),
          ("notHelping", 1))
    )


_RcOspfv3NbrRestartHelperStatus_Type.__name__ = "Integer32"
_RcOspfv3NbrRestartHelperStatus_Object = MibTableColumn
rcOspfv3NbrRestartHelperStatus = _RcOspfv3NbrRestartHelperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 12),
    _RcOspfv3NbrRestartHelperStatus_Type()
)
rcOspfv3NbrRestartHelperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrRestartHelperStatus.setStatus("current")


class _RcOspfv3NbrRestartHelperAge_Type(Integer32):
    """Custom type rcOspfv3NbrRestartHelperAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_RcOspfv3NbrRestartHelperAge_Type.__name__ = "Integer32"
_RcOspfv3NbrRestartHelperAge_Object = MibTableColumn
rcOspfv3NbrRestartHelperAge = _RcOspfv3NbrRestartHelperAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 13),
    _RcOspfv3NbrRestartHelperAge_Type()
)
rcOspfv3NbrRestartHelperAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrRestartHelperAge.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3NbrRestartHelperAge.setUnits("seconds")


class _RcOspfv3NbrRestartHelperExitReason_Type(Integer32):
    """Custom type rcOspfv3NbrRestartHelperExitReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("completed", 3),
          ("inProgress", 2),
          ("none", 1),
          ("timedOut", 4),
          ("topologyChanged", 5))
    )


_RcOspfv3NbrRestartHelperExitReason_Type.__name__ = "Integer32"
_RcOspfv3NbrRestartHelperExitReason_Object = MibTableColumn
rcOspfv3NbrRestartHelperExitReason = _RcOspfv3NbrRestartHelperExitReason_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 9, 1, 14),
    _RcOspfv3NbrRestartHelperExitReason_Type()
)
rcOspfv3NbrRestartHelperExitReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbrRestartHelperExitReason.setStatus("current")
_RcOspfv3NbmaNbrTable_Object = MibTable
rcOspfv3NbmaNbrTable = _RcOspfv3NbmaNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10)
)
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrTable.setStatus("current")
_RcOspfv3NbmaNbrEntry_Object = MibTableRow
rcOspfv3NbmaNbrEntry = _RcOspfv3NbmaNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10, 1)
)
rcOspfv3NbmaNbrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3NbmaNbrIfIndex"),
    (0, "RAPID-CITY", "rcOspfv3NbmaNbrAddress"),
)
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrEntry.setStatus("current")
_RcOspfv3NbmaNbrIfIndex_Type = InterfaceIndex
_RcOspfv3NbmaNbrIfIndex_Object = MibTableColumn
rcOspfv3NbmaNbrIfIndex = _RcOspfv3NbmaNbrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10, 1, 1),
    _RcOspfv3NbmaNbrIfIndex_Type()
)
rcOspfv3NbmaNbrIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrIfIndex.setStatus("current")
_RcOspfv3NbmaNbrAddress_Type = Ipv6Address
_RcOspfv3NbmaNbrAddress_Object = MibTableColumn
rcOspfv3NbmaNbrAddress = _RcOspfv3NbmaNbrAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10, 1, 2),
    _RcOspfv3NbmaNbrAddress_Type()
)
rcOspfv3NbmaNbrAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrAddress.setStatus("current")


class _RcOspfv3NbmaNbrPriority_Type(Integer32):
    """Custom type rcOspfv3NbmaNbrPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcOspfv3NbmaNbrPriority_Type.__name__ = "Integer32"
_RcOspfv3NbmaNbrPriority_Object = MibTableColumn
rcOspfv3NbmaNbrPriority = _RcOspfv3NbmaNbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10, 1, 3),
    _RcOspfv3NbmaNbrPriority_Type()
)
rcOspfv3NbmaNbrPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrPriority.setStatus("current")
_RcOspfv3NbmaNbrRtrId_Type = IpAddress
_RcOspfv3NbmaNbrRtrId_Object = MibTableColumn
rcOspfv3NbmaNbrRtrId = _RcOspfv3NbmaNbrRtrId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10, 1, 4),
    _RcOspfv3NbmaNbrRtrId_Type()
)
rcOspfv3NbmaNbrRtrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrRtrId.setStatus("current")


class _RcOspfv3NbmaNbrState_Type(Integer32):
    """Custom type rcOspfv3NbmaNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("attempt", 2),
          ("down", 1),
          ("exchange", 6),
          ("exchangeStart", 5),
          ("full", 8),
          ("init", 3),
          ("loading", 7),
          ("twoWay", 4))
    )


_RcOspfv3NbmaNbrState_Type.__name__ = "Integer32"
_RcOspfv3NbmaNbrState_Object = MibTableColumn
rcOspfv3NbmaNbrState = _RcOspfv3NbmaNbrState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10, 1, 5),
    _RcOspfv3NbmaNbrState_Type()
)
rcOspfv3NbmaNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrState.setStatus("current")


class _RcOspfv3NbmaNbrStorageType_Type(StorageType):
    """Custom type rcOspfv3NbmaNbrStorageType based on StorageType"""


_RcOspfv3NbmaNbrStorageType_Object = MibTableColumn
rcOspfv3NbmaNbrStorageType = _RcOspfv3NbmaNbrStorageType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10, 1, 6),
    _RcOspfv3NbmaNbrStorageType_Type()
)
rcOspfv3NbmaNbrStorageType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrStorageType.setStatus("current")
_RcOspfv3NbmaNbrStatus_Type = RowStatus
_RcOspfv3NbmaNbrStatus_Object = MibTableColumn
rcOspfv3NbmaNbrStatus = _RcOspfv3NbmaNbrStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 10, 1, 7),
    _RcOspfv3NbmaNbrStatus_Type()
)
rcOspfv3NbmaNbrStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrStatus.setStatus("current")
_RcOspfv3VirtNbrTable_Object = MibTable
rcOspfv3VirtNbrTable = _RcOspfv3VirtNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11)
)
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrTable.setStatus("current")
_RcOspfv3VirtNbrEntry_Object = MibTableRow
rcOspfv3VirtNbrEntry = _RcOspfv3VirtNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1)
)
rcOspfv3VirtNbrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3VirtNbrArea"),
    (0, "RAPID-CITY", "rcOspfv3VirtNbrRtrId"),
)
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrEntry.setStatus("current")
_RcOspfv3VirtNbrArea_Type = IpAddress
_RcOspfv3VirtNbrArea_Object = MibTableColumn
rcOspfv3VirtNbrArea = _RcOspfv3VirtNbrArea_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 1),
    _RcOspfv3VirtNbrArea_Type()
)
rcOspfv3VirtNbrArea.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrArea.setStatus("current")
_RcOspfv3VirtNbrRtrId_Type = IpAddress
_RcOspfv3VirtNbrRtrId_Object = MibTableColumn
rcOspfv3VirtNbrRtrId = _RcOspfv3VirtNbrRtrId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 2),
    _RcOspfv3VirtNbrRtrId_Type()
)
rcOspfv3VirtNbrRtrId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrRtrId.setStatus("current")
_RcOspfv3VirtNbrIfIndex_Type = Integer32
_RcOspfv3VirtNbrIfIndex_Object = MibTableColumn
rcOspfv3VirtNbrIfIndex = _RcOspfv3VirtNbrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 3),
    _RcOspfv3VirtNbrIfIndex_Type()
)
rcOspfv3VirtNbrIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrIfIndex.setStatus("current")


class _RcOspfv3VirtNbrAddressType_Type(Integer32):
    """Custom type rcOspfv3VirtNbrAddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              16)
        )
    )
    namedValues = NamedValues(
        *(("dns", 16),
          ("ipv4", 1),
          ("ipv4z", 3),
          ("ipv6", 2),
          ("ipv6z", 4),
          ("unknown", 0))
    )


_RcOspfv3VirtNbrAddressType_Type.__name__ = "Integer32"
_RcOspfv3VirtNbrAddressType_Object = MibTableColumn
rcOspfv3VirtNbrAddressType = _RcOspfv3VirtNbrAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 4),
    _RcOspfv3VirtNbrAddressType_Type()
)
rcOspfv3VirtNbrAddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrAddressType.setStatus("current")


class _RcOspfv3VirtNbrAddress_Type(OctetString):
    """Custom type rcOspfv3VirtNbrAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RcOspfv3VirtNbrAddress_Type.__name__ = "OctetString"
_RcOspfv3VirtNbrAddress_Object = MibTableColumn
rcOspfv3VirtNbrAddress = _RcOspfv3VirtNbrAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 5),
    _RcOspfv3VirtNbrAddress_Type()
)
rcOspfv3VirtNbrAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrAddress.setStatus("current")
_RcOspfv3VirtNbrOptions_Type = Integer32
_RcOspfv3VirtNbrOptions_Object = MibTableColumn
rcOspfv3VirtNbrOptions = _RcOspfv3VirtNbrOptions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 6),
    _RcOspfv3VirtNbrOptions_Type()
)
rcOspfv3VirtNbrOptions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrOptions.setStatus("current")


class _RcOspfv3VirtNbrState_Type(Integer32):
    """Custom type rcOspfv3VirtNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("attempt", 2),
          ("down", 1),
          ("exchange", 6),
          ("exchangeStart", 5),
          ("full", 8),
          ("init", 3),
          ("loading", 7),
          ("twoWay", 4))
    )


_RcOspfv3VirtNbrState_Type.__name__ = "Integer32"
_RcOspfv3VirtNbrState_Object = MibTableColumn
rcOspfv3VirtNbrState = _RcOspfv3VirtNbrState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 7),
    _RcOspfv3VirtNbrState_Type()
)
rcOspfv3VirtNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrState.setStatus("current")
_RcOspfv3VirtNbrEvents_Type = Counter32
_RcOspfv3VirtNbrEvents_Object = MibTableColumn
rcOspfv3VirtNbrEvents = _RcOspfv3VirtNbrEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 8),
    _RcOspfv3VirtNbrEvents_Type()
)
rcOspfv3VirtNbrEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrEvents.setStatus("current")
_RcOspfv3VirtNbrLsRetransQLen_Type = Gauge32
_RcOspfv3VirtNbrLsRetransQLen_Object = MibTableColumn
rcOspfv3VirtNbrLsRetransQLen = _RcOspfv3VirtNbrLsRetransQLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 9),
    _RcOspfv3VirtNbrLsRetransQLen_Type()
)
rcOspfv3VirtNbrLsRetransQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrLsRetransQLen.setStatus("current")
_RcOspfv3VirtNbrHelloSuppressed_Type = TruthValue
_RcOspfv3VirtNbrHelloSuppressed_Object = MibTableColumn
rcOspfv3VirtNbrHelloSuppressed = _RcOspfv3VirtNbrHelloSuppressed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 10),
    _RcOspfv3VirtNbrHelloSuppressed_Type()
)
rcOspfv3VirtNbrHelloSuppressed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrHelloSuppressed.setStatus("current")
_RcOspfv3VirtNbrIfId_Type = Integer32
_RcOspfv3VirtNbrIfId_Object = MibTableColumn
rcOspfv3VirtNbrIfId = _RcOspfv3VirtNbrIfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 11),
    _RcOspfv3VirtNbrIfId_Type()
)
rcOspfv3VirtNbrIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrIfId.setStatus("current")


class _RcOspfv3VirtNbrRestartHelperStatus_Type(Integer32):
    """Custom type rcOspfv3VirtNbrRestartHelperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("helping", 2),
          ("notHelping", 1))
    )


_RcOspfv3VirtNbrRestartHelperStatus_Type.__name__ = "Integer32"
_RcOspfv3VirtNbrRestartHelperStatus_Object = MibTableColumn
rcOspfv3VirtNbrRestartHelperStatus = _RcOspfv3VirtNbrRestartHelperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 12),
    _RcOspfv3VirtNbrRestartHelperStatus_Type()
)
rcOspfv3VirtNbrRestartHelperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrRestartHelperStatus.setStatus("current")


class _RcOspfv3VirtNbrRestartHelperAge_Type(Integer32):
    """Custom type rcOspfv3VirtNbrRestartHelperAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_RcOspfv3VirtNbrRestartHelperAge_Type.__name__ = "Integer32"
_RcOspfv3VirtNbrRestartHelperAge_Object = MibTableColumn
rcOspfv3VirtNbrRestartHelperAge = _RcOspfv3VirtNbrRestartHelperAge_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 13),
    _RcOspfv3VirtNbrRestartHelperAge_Type()
)
rcOspfv3VirtNbrRestartHelperAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrRestartHelperAge.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrRestartHelperAge.setUnits("seconds")


class _RcOspfv3VirtNbrRestartHelperExitReason_Type(Integer32):
    """Custom type rcOspfv3VirtNbrRestartHelperExitReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("completed", 3),
          ("inProgress", 2),
          ("none", 1),
          ("timedOut", 4),
          ("topologyChanged", 5))
    )


_RcOspfv3VirtNbrRestartHelperExitReason_Type.__name__ = "Integer32"
_RcOspfv3VirtNbrRestartHelperExitReason_Object = MibTableColumn
rcOspfv3VirtNbrRestartHelperExitReason = _RcOspfv3VirtNbrRestartHelperExitReason_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 11, 1, 14),
    _RcOspfv3VirtNbrRestartHelperExitReason_Type()
)
rcOspfv3VirtNbrRestartHelperExitReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrRestartHelperExitReason.setStatus("current")
_RcOspfv3AreaAggregateTable_Object = MibTable
rcOspfv3AreaAggregateTable = _RcOspfv3AreaAggregateTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12)
)
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateTable.setStatus("current")
_RcOspfv3AreaAggregateEntry_Object = MibTableRow
rcOspfv3AreaAggregateEntry = _RcOspfv3AreaAggregateEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1)
)
rcOspfv3AreaAggregateEntry.setIndexNames(
    (0, "RAPID-CITY", "rcOspfv3AreaAggregateAreaID"),
    (0, "RAPID-CITY", "rcOspfv3AreaAggregateAreaLsdbType"),
    (0, "RAPID-CITY", "rcOspfv3AreaAggregatePrefix"),
    (0, "RAPID-CITY", "rcOspfv3AreaAggregatePrefixLength"),
)
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateEntry.setStatus("current")
_RcOspfv3AreaAggregateAreaID_Type = IpAddress
_RcOspfv3AreaAggregateAreaID_Object = MibTableColumn
rcOspfv3AreaAggregateAreaID = _RcOspfv3AreaAggregateAreaID_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1, 1),
    _RcOspfv3AreaAggregateAreaID_Type()
)
rcOspfv3AreaAggregateAreaID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateAreaID.setStatus("current")


class _RcOspfv3AreaAggregateAreaLsdbType_Type(Integer32):
    """Custom type rcOspfv3AreaAggregateAreaLsdbType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(8195,
              8199)
        )
    )
    namedValues = NamedValues(
        *(("interAreaPrefixLsa", 8195),
          ("nssaExternalLsa", 8199))
    )


_RcOspfv3AreaAggregateAreaLsdbType_Type.__name__ = "Integer32"
_RcOspfv3AreaAggregateAreaLsdbType_Object = MibTableColumn
rcOspfv3AreaAggregateAreaLsdbType = _RcOspfv3AreaAggregateAreaLsdbType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1, 2),
    _RcOspfv3AreaAggregateAreaLsdbType_Type()
)
rcOspfv3AreaAggregateAreaLsdbType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateAreaLsdbType.setStatus("current")
_RcOspfv3AreaAggregatePrefix_Type = Ipv6Address
_RcOspfv3AreaAggregatePrefix_Object = MibTableColumn
rcOspfv3AreaAggregatePrefix = _RcOspfv3AreaAggregatePrefix_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1, 3),
    _RcOspfv3AreaAggregatePrefix_Type()
)
rcOspfv3AreaAggregatePrefix.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregatePrefix.setStatus("current")


class _RcOspfv3AreaAggregatePrefixLength_Type(Unsigned32):
    """Custom type rcOspfv3AreaAggregatePrefixLength based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 128),
    )


_RcOspfv3AreaAggregatePrefixLength_Type.__name__ = "Unsigned32"
_RcOspfv3AreaAggregatePrefixLength_Object = MibTableColumn
rcOspfv3AreaAggregatePrefixLength = _RcOspfv3AreaAggregatePrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1, 4),
    _RcOspfv3AreaAggregatePrefixLength_Type()
)
rcOspfv3AreaAggregatePrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregatePrefixLength.setStatus("current")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregatePrefixLength.setUnits("bits")
_RcOspfv3AreaAggregateStatus_Type = RowStatus
_RcOspfv3AreaAggregateStatus_Object = MibTableColumn
rcOspfv3AreaAggregateStatus = _RcOspfv3AreaAggregateStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1, 5),
    _RcOspfv3AreaAggregateStatus_Type()
)
rcOspfv3AreaAggregateStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateStatus.setStatus("current")


class _RcOspfv3AreaAggregateEffect_Type(Integer32):
    """Custom type rcOspfv3AreaAggregateEffect based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("advertiseMatching", 1),
          ("doNotAdvertiseMatching", 2))
    )


_RcOspfv3AreaAggregateEffect_Type.__name__ = "Integer32"
_RcOspfv3AreaAggregateEffect_Object = MibTableColumn
rcOspfv3AreaAggregateEffect = _RcOspfv3AreaAggregateEffect_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1, 6),
    _RcOspfv3AreaAggregateEffect_Type()
)
rcOspfv3AreaAggregateEffect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateEffect.setStatus("current")


class _RcOspfv3AreaAggregateRouteTag_Type(Integer32):
    """Custom type rcOspfv3AreaAggregateRouteTag based on Integer32"""
    defaultValue = 0


_RcOspfv3AreaAggregateRouteTag_Object = MibTableColumn
rcOspfv3AreaAggregateRouteTag = _RcOspfv3AreaAggregateRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1, 7),
    _RcOspfv3AreaAggregateRouteTag_Type()
)
rcOspfv3AreaAggregateRouteTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateRouteTag.setStatus("current")


class _RcOspfv3AreaAggregateAdvertiseMetric_Type(Integer32):
    """Custom type rcOspfv3AreaAggregateAdvertiseMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcOspfv3AreaAggregateAdvertiseMetric_Type.__name__ = "Integer32"
_RcOspfv3AreaAggregateAdvertiseMetric_Object = MibTableColumn
rcOspfv3AreaAggregateAdvertiseMetric = _RcOspfv3AreaAggregateAdvertiseMetric_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 12, 1, 8),
    _RcOspfv3AreaAggregateAdvertiseMetric_Type()
)
rcOspfv3AreaAggregateAdvertiseMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateAdvertiseMetric.setStatus("current")
_RcOspfv3Stats_ObjectIdentity = ObjectIdentity
rcOspfv3Stats = _RcOspfv3Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13)
)
_RcOspfv3StatsTxPackets_Type = Counter32
_RcOspfv3StatsTxPackets_Object = MibScalar
rcOspfv3StatsTxPackets = _RcOspfv3StatsTxPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 1),
    _RcOspfv3StatsTxPackets_Type()
)
rcOspfv3StatsTxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsTxPackets.setStatus("current")
_RcOspfv3StatsRxPackets_Type = Counter32
_RcOspfv3StatsRxPackets_Object = MibScalar
rcOspfv3StatsRxPackets = _RcOspfv3StatsRxPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 2),
    _RcOspfv3StatsRxPackets_Type()
)
rcOspfv3StatsRxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsRxPackets.setStatus("current")
_RcOspfv3StatsTxDropPackets_Type = Counter32
_RcOspfv3StatsTxDropPackets_Object = MibScalar
rcOspfv3StatsTxDropPackets = _RcOspfv3StatsTxDropPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 3),
    _RcOspfv3StatsTxDropPackets_Type()
)
rcOspfv3StatsTxDropPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsTxDropPackets.setStatus("current")
_RcOspfv3StatsRxDropPackets_Type = Counter32
_RcOspfv3StatsRxDropPackets_Object = MibScalar
rcOspfv3StatsRxDropPackets = _RcOspfv3StatsRxDropPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 4),
    _RcOspfv3StatsRxDropPackets_Type()
)
rcOspfv3StatsRxDropPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsRxDropPackets.setStatus("current")
_RcOspfv3StatsRxBadPackets_Type = Counter32
_RcOspfv3StatsRxBadPackets_Object = MibScalar
rcOspfv3StatsRxBadPackets = _RcOspfv3StatsRxBadPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 5),
    _RcOspfv3StatsRxBadPackets_Type()
)
rcOspfv3StatsRxBadPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsRxBadPackets.setStatus("current")
_RcOspfv3StatsSpfRuns_Type = Counter32
_RcOspfv3StatsSpfRuns_Object = MibScalar
rcOspfv3StatsSpfRuns = _RcOspfv3StatsSpfRuns_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 6),
    _RcOspfv3StatsSpfRuns_Type()
)
rcOspfv3StatsSpfRuns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsSpfRuns.setStatus("current")
_RcOspfv3StatsLastSpfRun_Type = TimeTicks
_RcOspfv3StatsLastSpfRun_Object = MibScalar
rcOspfv3StatsLastSpfRun = _RcOspfv3StatsLastSpfRun_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 7),
    _RcOspfv3StatsLastSpfRun_Type()
)
rcOspfv3StatsLastSpfRun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsLastSpfRun.setStatus("current")
_RcOspfv3StatsLsdbTblSize_Type = Gauge32
_RcOspfv3StatsLsdbTblSize_Object = MibScalar
rcOspfv3StatsLsdbTblSize = _RcOspfv3StatsLsdbTblSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 8),
    _RcOspfv3StatsLsdbTblSize_Type()
)
rcOspfv3StatsLsdbTblSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsLsdbTblSize.setStatus("current")
_RcOspfv3StatsBadLsReqs_Type = Counter32
_RcOspfv3StatsBadLsReqs_Object = MibScalar
rcOspfv3StatsBadLsReqs = _RcOspfv3StatsBadLsReqs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 9),
    _RcOspfv3StatsBadLsReqs_Type()
)
rcOspfv3StatsBadLsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsBadLsReqs.setStatus("current")
_RcOspfv3StatsSeqMismatches_Type = Counter32
_RcOspfv3StatsSeqMismatches_Object = MibScalar
rcOspfv3StatsSeqMismatches = _RcOspfv3StatsSeqMismatches_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 1, 13, 10),
    _RcOspfv3StatsSeqMismatches_Type()
)
rcOspfv3StatsSeqMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcOspfv3StatsSeqMismatches.setStatus("current")
_RcOspfv3Conformance_ObjectIdentity = ObjectIdentity
rcOspfv3Conformance = _RcOspfv3Conformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2)
)
_RcOspfv3Groups_ObjectIdentity = ObjectIdentity
rcOspfv3Groups = _RcOspfv3Groups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1)
)
_RcOspfv3Compliances_ObjectIdentity = ObjectIdentity
rcOspfv3Compliances = _RcOspfv3Compliances_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 2)
)
_RcCfm_ObjectIdentity = ObjectIdentity
rcCfm = _RcCfm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69)
)
_RcCfmMaintenanceDomainTable_Object = MibTable
rcCfmMaintenanceDomainTable = _RcCfmMaintenanceDomainTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1)
)
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainTable.setStatus("current")
_RcCfmMaintenanceDomainEntry_Object = MibTableRow
rcCfmMaintenanceDomainEntry = _RcCfmMaintenanceDomainEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1, 1)
)
rcCfmMaintenanceDomainEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmMaintenanceDomainIndex"),
)
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainEntry.setStatus("current")


class _RcCfmMaintenanceDomainIndex_Type(Integer32):
    """Custom type rcCfmMaintenanceDomainIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmMaintenanceDomainIndex_Type.__name__ = "Integer32"
_RcCfmMaintenanceDomainIndex_Object = MibTableColumn
rcCfmMaintenanceDomainIndex = _RcCfmMaintenanceDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1, 1, 1),
    _RcCfmMaintenanceDomainIndex_Type()
)
rcCfmMaintenanceDomainIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainIndex.setStatus("current")


class _RcCfmMaintenanceDomainName_Type(DisplayString):
    """Custom type rcCfmMaintenanceDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmMaintenanceDomainName_Type.__name__ = "DisplayString"
_RcCfmMaintenanceDomainName_Object = MibTableColumn
rcCfmMaintenanceDomainName = _RcCfmMaintenanceDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1, 1, 2),
    _RcCfmMaintenanceDomainName_Type()
)
rcCfmMaintenanceDomainName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainName.setStatus("current")
_RcCfmMaintenanceDomainRowStatus_Type = RowStatus
_RcCfmMaintenanceDomainRowStatus_Object = MibTableColumn
rcCfmMaintenanceDomainRowStatus = _RcCfmMaintenanceDomainRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1, 1, 3),
    _RcCfmMaintenanceDomainRowStatus_Type()
)
rcCfmMaintenanceDomainRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainRowStatus.setStatus("current")
_RcCfmMaintenanceDomainNumOfMa_Type = Integer32
_RcCfmMaintenanceDomainNumOfMa_Object = MibTableColumn
rcCfmMaintenanceDomainNumOfMa = _RcCfmMaintenanceDomainNumOfMa_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1, 1, 4),
    _RcCfmMaintenanceDomainNumOfMa_Type()
)
rcCfmMaintenanceDomainNumOfMa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainNumOfMa.setStatus("current")


class _RcCfmMaintenanceDomainLevel_Type(Integer32):
    """Custom type rcCfmMaintenanceDomainLevel based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcCfmMaintenanceDomainLevel_Type.__name__ = "Integer32"
_RcCfmMaintenanceDomainLevel_Object = MibTableColumn
rcCfmMaintenanceDomainLevel = _RcCfmMaintenanceDomainLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1, 1, 6),
    _RcCfmMaintenanceDomainLevel_Type()
)
rcCfmMaintenanceDomainLevel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainLevel.setStatus("current")
_RcCfmMaintenanceDomainNumOfMip_Type = Integer32
_RcCfmMaintenanceDomainNumOfMip_Object = MibTableColumn
rcCfmMaintenanceDomainNumOfMip = _RcCfmMaintenanceDomainNumOfMip_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1, 1, 7),
    _RcCfmMaintenanceDomainNumOfMip_Type()
)
rcCfmMaintenanceDomainNumOfMip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainNumOfMip.setStatus("current")


class _RcCfmMaintenanceDomainType_Type(Integer32):
    """Custom type rcCfmMaintenanceDomainType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("endpt", 3),
          ("mimencapvlan", 6),
          ("nodal", 7),
          ("none", 0),
          ("port", 5),
          ("sg", 2),
          ("trunk", 1),
          ("vlan", 4))
    )


_RcCfmMaintenanceDomainType_Type.__name__ = "Integer32"
_RcCfmMaintenanceDomainType_Object = MibTableColumn
rcCfmMaintenanceDomainType = _RcCfmMaintenanceDomainType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 1, 1, 8),
    _RcCfmMaintenanceDomainType_Type()
)
rcCfmMaintenanceDomainType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceDomainType.setStatus("current")
_RcCfmMaintenanceAssociationTable_Object = MibTable
rcCfmMaintenanceAssociationTable = _RcCfmMaintenanceAssociationTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2)
)
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationTable.setStatus("current")
_RcCfmMaintenanceAssociationEntry_Object = MibTableRow
rcCfmMaintenanceAssociationEntry = _RcCfmMaintenanceAssociationEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2, 1)
)
rcCfmMaintenanceAssociationEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmMaintenanceAssociationDomainIndex"),
    (0, "RAPID-CITY", "rcCfmMaintenanceAssociationAssociationIndex"),
)
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationEntry.setStatus("current")


class _RcCfmMaintenanceAssociationDomainIndex_Type(Integer32):
    """Custom type rcCfmMaintenanceAssociationDomainIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmMaintenanceAssociationDomainIndex_Type.__name__ = "Integer32"
_RcCfmMaintenanceAssociationDomainIndex_Object = MibTableColumn
rcCfmMaintenanceAssociationDomainIndex = _RcCfmMaintenanceAssociationDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2, 1, 1),
    _RcCfmMaintenanceAssociationDomainIndex_Type()
)
rcCfmMaintenanceAssociationDomainIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationDomainIndex.setStatus("current")


class _RcCfmMaintenanceAssociationAssociationIndex_Type(Integer32):
    """Custom type rcCfmMaintenanceAssociationAssociationIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmMaintenanceAssociationAssociationIndex_Type.__name__ = "Integer32"
_RcCfmMaintenanceAssociationAssociationIndex_Object = MibTableColumn
rcCfmMaintenanceAssociationAssociationIndex = _RcCfmMaintenanceAssociationAssociationIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2, 1, 2),
    _RcCfmMaintenanceAssociationAssociationIndex_Type()
)
rcCfmMaintenanceAssociationAssociationIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationAssociationIndex.setStatus("current")


class _RcCfmMaintenanceAssociationDomainName_Type(DisplayString):
    """Custom type rcCfmMaintenanceAssociationDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmMaintenanceAssociationDomainName_Type.__name__ = "DisplayString"
_RcCfmMaintenanceAssociationDomainName_Object = MibTableColumn
rcCfmMaintenanceAssociationDomainName = _RcCfmMaintenanceAssociationDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2, 1, 3),
    _RcCfmMaintenanceAssociationDomainName_Type()
)
rcCfmMaintenanceAssociationDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationDomainName.setStatus("current")


class _RcCfmMaintenanceAssociationAssociationName_Type(DisplayString):
    """Custom type rcCfmMaintenanceAssociationAssociationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmMaintenanceAssociationAssociationName_Type.__name__ = "DisplayString"
_RcCfmMaintenanceAssociationAssociationName_Object = MibTableColumn
rcCfmMaintenanceAssociationAssociationName = _RcCfmMaintenanceAssociationAssociationName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2, 1, 4),
    _RcCfmMaintenanceAssociationAssociationName_Type()
)
rcCfmMaintenanceAssociationAssociationName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationAssociationName.setStatus("current")


class _RcCfmMaintenanceAssociationAdminState_Type(EnableValue):
    """Custom type rcCfmMaintenanceAssociationAdminState based on EnableValue"""


_RcCfmMaintenanceAssociationAdminState_Object = MibTableColumn
rcCfmMaintenanceAssociationAdminState = _RcCfmMaintenanceAssociationAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2, 1, 5),
    _RcCfmMaintenanceAssociationAdminState_Type()
)
rcCfmMaintenanceAssociationAdminState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationAdminState.setStatus("current")
_RcCfmMaintenanceAssociationRowStatus_Type = RowStatus
_RcCfmMaintenanceAssociationRowStatus_Object = MibTableColumn
rcCfmMaintenanceAssociationRowStatus = _RcCfmMaintenanceAssociationRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2, 1, 6),
    _RcCfmMaintenanceAssociationRowStatus_Type()
)
rcCfmMaintenanceAssociationRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationRowStatus.setStatus("current")
_RcCfmMaintenanceAssociationNumOfMep_Type = Integer32
_RcCfmMaintenanceAssociationNumOfMep_Object = MibTableColumn
rcCfmMaintenanceAssociationNumOfMep = _RcCfmMaintenanceAssociationNumOfMep_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 2, 1, 12),
    _RcCfmMaintenanceAssociationNumOfMep_Type()
)
rcCfmMaintenanceAssociationNumOfMep.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceAssociationNumOfMep.setStatus("current")
_RcCfmMaintenanceEndPointTable_Object = MibTable
rcCfmMaintenanceEndPointTable = _RcCfmMaintenanceEndPointTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3)
)
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointTable.setStatus("current")
_RcCfmMaintenanceEndPointEntry_Object = MibTableRow
rcCfmMaintenanceEndPointEntry = _RcCfmMaintenanceEndPointEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1)
)
rcCfmMaintenanceEndPointEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmMaintenanceEndPointDomainIndex"),
    (0, "RAPID-CITY", "rcCfmMaintenanceEndPointAssociationIndex"),
    (0, "RAPID-CITY", "rcCfmMaintenanceEndPointId"),
)
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointEntry.setStatus("current")


class _RcCfmMaintenanceEndPointDomainIndex_Type(Integer32):
    """Custom type rcCfmMaintenanceEndPointDomainIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmMaintenanceEndPointDomainIndex_Type.__name__ = "Integer32"
_RcCfmMaintenanceEndPointDomainIndex_Object = MibTableColumn
rcCfmMaintenanceEndPointDomainIndex = _RcCfmMaintenanceEndPointDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 1),
    _RcCfmMaintenanceEndPointDomainIndex_Type()
)
rcCfmMaintenanceEndPointDomainIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointDomainIndex.setStatus("current")


class _RcCfmMaintenanceEndPointAssociationIndex_Type(Integer32):
    """Custom type rcCfmMaintenanceEndPointAssociationIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmMaintenanceEndPointAssociationIndex_Type.__name__ = "Integer32"
_RcCfmMaintenanceEndPointAssociationIndex_Object = MibTableColumn
rcCfmMaintenanceEndPointAssociationIndex = _RcCfmMaintenanceEndPointAssociationIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 2),
    _RcCfmMaintenanceEndPointAssociationIndex_Type()
)
rcCfmMaintenanceEndPointAssociationIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointAssociationIndex.setStatus("current")


class _RcCfmMaintenanceEndPointId_Type(Integer32):
    """Custom type rcCfmMaintenanceEndPointId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8191),
    )


_RcCfmMaintenanceEndPointId_Type.__name__ = "Integer32"
_RcCfmMaintenanceEndPointId_Object = MibTableColumn
rcCfmMaintenanceEndPointId = _RcCfmMaintenanceEndPointId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 3),
    _RcCfmMaintenanceEndPointId_Type()
)
rcCfmMaintenanceEndPointId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointId.setStatus("current")


class _RcCfmMaintenanceEndPointDomainName_Type(DisplayString):
    """Custom type rcCfmMaintenanceEndPointDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmMaintenanceEndPointDomainName_Type.__name__ = "DisplayString"
_RcCfmMaintenanceEndPointDomainName_Object = MibTableColumn
rcCfmMaintenanceEndPointDomainName = _RcCfmMaintenanceEndPointDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 4),
    _RcCfmMaintenanceEndPointDomainName_Type()
)
rcCfmMaintenanceEndPointDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointDomainName.setStatus("current")


class _RcCfmMaintenanceEndPointAssociationName_Type(DisplayString):
    """Custom type rcCfmMaintenanceEndPointAssociationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmMaintenanceEndPointAssociationName_Type.__name__ = "DisplayString"
_RcCfmMaintenanceEndPointAssociationName_Object = MibTableColumn
rcCfmMaintenanceEndPointAssociationName = _RcCfmMaintenanceEndPointAssociationName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 5),
    _RcCfmMaintenanceEndPointAssociationName_Type()
)
rcCfmMaintenanceEndPointAssociationName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointAssociationName.setStatus("current")


class _RcCfmMaintenanceEndPointAdminState_Type(EnableValue):
    """Custom type rcCfmMaintenanceEndPointAdminState based on EnableValue"""


_RcCfmMaintenanceEndPointAdminState_Object = MibTableColumn
rcCfmMaintenanceEndPointAdminState = _RcCfmMaintenanceEndPointAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 6),
    _RcCfmMaintenanceEndPointAdminState_Type()
)
rcCfmMaintenanceEndPointAdminState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointAdminState.setStatus("current")
_RcCfmMaintenanceEndPointRowStatus_Type = RowStatus
_RcCfmMaintenanceEndPointRowStatus_Object = MibTableColumn
rcCfmMaintenanceEndPointRowStatus = _RcCfmMaintenanceEndPointRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 7),
    _RcCfmMaintenanceEndPointRowStatus_Type()
)
rcCfmMaintenanceEndPointRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointRowStatus.setStatus("current")


class _RcCfmMaintenanceEndPointMepType_Type(Integer32):
    """Custom type rcCfmMaintenanceEndPointMepType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16,
              32,
              64,
              32769,
              32770,
              32772,
              32784,
              32800,
              32832,
              3145728)
        )
    )
    namedValues = NamedValues(
        *(("endpt", 4),
          ("endptClient", 64),
          ("nodal", 3145728),
          ("port", 32),
          ("remoteEndptClient", 32832),
          ("remotePort", 32800),
          ("remoteVlan", 32784),
          ("remoteendpt", 32772),
          ("remotesg", 32770),
          ("remotetrunk", 32769),
          ("sg", 2),
          ("trunk", 1),
          ("unused", 8),
          ("vlan", 16))
    )


_RcCfmMaintenanceEndPointMepType_Type.__name__ = "Integer32"
_RcCfmMaintenanceEndPointMepType_Object = MibTableColumn
rcCfmMaintenanceEndPointMepType = _RcCfmMaintenanceEndPointMepType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 11),
    _RcCfmMaintenanceEndPointMepType_Type()
)
rcCfmMaintenanceEndPointMepType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointMepType.setStatus("current")


class _RcCfmMaintenanceEndPointServiceDescription_Type(DisplayString):
    """Custom type rcCfmMaintenanceEndPointServiceDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_RcCfmMaintenanceEndPointServiceDescription_Type.__name__ = "DisplayString"
_RcCfmMaintenanceEndPointServiceDescription_Object = MibTableColumn
rcCfmMaintenanceEndPointServiceDescription = _RcCfmMaintenanceEndPointServiceDescription_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 13),
    _RcCfmMaintenanceEndPointServiceDescription_Type()
)
rcCfmMaintenanceEndPointServiceDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointServiceDescription.setStatus("current")


class _RcCfmMaintenanceEndPointMepStatus_Type(Integer32):
    """Custom type rcCfmMaintenanceEndPointMepStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2))
    )


_RcCfmMaintenanceEndPointMepStatus_Type.__name__ = "Integer32"
_RcCfmMaintenanceEndPointMepStatus_Object = MibTableColumn
rcCfmMaintenanceEndPointMepStatus = _RcCfmMaintenanceEndPointMepStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 3, 1, 15),
    _RcCfmMaintenanceEndPointMepStatus_Type()
)
rcCfmMaintenanceEndPointMepStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmMaintenanceEndPointMepStatus.setStatus("current")
_RcCfmGlobals_ObjectIdentity = ObjectIdentity
rcCfmGlobals = _RcCfmGlobals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 10)
)


class _RcCfmGlobalsEtherType_Type(Integer32):
    """Custom type rcCfmGlobalsEtherType based on Integer32"""
    defaultHexValue = 35074

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcCfmGlobalsEtherType_Type.__name__ = "Integer32"
_RcCfmGlobalsEtherType_Object = MibScalar
rcCfmGlobalsEtherType = _RcCfmGlobalsEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 10, 1),
    _RcCfmGlobalsEtherType_Type()
)
rcCfmGlobalsEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmGlobalsEtherType.setStatus("current")


class _RcCfmGlobalsSpbmAdminState_Type(EnableValue):
    """Custom type rcCfmGlobalsSpbmAdminState based on EnableValue"""


_RcCfmGlobalsSpbmAdminState_Object = MibScalar
rcCfmGlobalsSpbmAdminState = _RcCfmGlobalsSpbmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 10, 8),
    _RcCfmGlobalsSpbmAdminState_Type()
)
rcCfmGlobalsSpbmAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmGlobalsSpbmAdminState.setStatus("current")


class _RcCfmGlobalsSpbmLevel_Type(Integer32):
    """Custom type rcCfmGlobalsSpbmLevel based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcCfmGlobalsSpbmLevel_Type.__name__ = "Integer32"
_RcCfmGlobalsSpbmLevel_Object = MibScalar
rcCfmGlobalsSpbmLevel = _RcCfmGlobalsSpbmLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 10, 9),
    _RcCfmGlobalsSpbmLevel_Type()
)
rcCfmGlobalsSpbmLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmGlobalsSpbmLevel.setStatus("current")


class _RcCfmGlobalsSpbmMepId_Type(Integer32):
    """Custom type rcCfmGlobalsSpbmMepId based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8191),
    )


_RcCfmGlobalsSpbmMepId_Type.__name__ = "Integer32"
_RcCfmGlobalsSpbmMepId_Object = MibScalar
rcCfmGlobalsSpbmMepId = _RcCfmGlobalsSpbmMepId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 10, 10),
    _RcCfmGlobalsSpbmMepId_Type()
)
rcCfmGlobalsSpbmMepId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmGlobalsSpbmMepId.setStatus("current")


class _RcCfmGlobalsCmacAdminState_Type(EnableValue):
    """Custom type rcCfmGlobalsCmacAdminState based on EnableValue"""


_RcCfmGlobalsCmacAdminState_Object = MibScalar
rcCfmGlobalsCmacAdminState = _RcCfmGlobalsCmacAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 10, 11),
    _RcCfmGlobalsCmacAdminState_Type()
)
rcCfmGlobalsCmacAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmGlobalsCmacAdminState.setStatus("current")


class _RcCfmGlobalsCmacLevel_Type(Integer32):
    """Custom type rcCfmGlobalsCmacLevel based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcCfmGlobalsCmacLevel_Type.__name__ = "Integer32"
_RcCfmGlobalsCmacLevel_Object = MibScalar
rcCfmGlobalsCmacLevel = _RcCfmGlobalsCmacLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 10, 12),
    _RcCfmGlobalsCmacLevel_Type()
)
rcCfmGlobalsCmacLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmGlobalsCmacLevel.setStatus("current")


class _RcCfmGlobalsCmacMepId_Type(Integer32):
    """Custom type rcCfmGlobalsCmacMepId based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8191),
    )


_RcCfmGlobalsCmacMepId_Type.__name__ = "Integer32"
_RcCfmGlobalsCmacMepId_Object = MibScalar
rcCfmGlobalsCmacMepId = _RcCfmGlobalsCmacMepId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 10, 13),
    _RcCfmGlobalsCmacMepId_Type()
)
rcCfmGlobalsCmacMepId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmGlobalsCmacMepId.setStatus("current")
_RcCfmTransmitLbmTable_Object = MibTable
rcCfmTransmitLbmTable = _RcCfmTransmitLbmTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17)
)
if mibBuilder.loadTexts:
    rcCfmTransmitLbmTable.setStatus("current")
_RcCfmTransmitLbmEntry_Object = MibTableRow
rcCfmTransmitLbmEntry = _RcCfmTransmitLbmEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1)
)
rcCfmTransmitLbmEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmTransmitLbmDomainIndex"),
    (0, "RAPID-CITY", "rcCfmTransmitLbmAssociationIndex"),
    (0, "RAPID-CITY", "rcCfmTransmitLbmIndex"),
)
if mibBuilder.loadTexts:
    rcCfmTransmitLbmEntry.setStatus("current")


class _RcCfmTransmitLbmDomainIndex_Type(Integer32):
    """Custom type rcCfmTransmitLbmDomainIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmTransmitLbmDomainIndex_Type.__name__ = "Integer32"
_RcCfmTransmitLbmDomainIndex_Object = MibTableColumn
rcCfmTransmitLbmDomainIndex = _RcCfmTransmitLbmDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 1),
    _RcCfmTransmitLbmDomainIndex_Type()
)
rcCfmTransmitLbmDomainIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmDomainIndex.setStatus("current")


class _RcCfmTransmitLbmAssociationIndex_Type(Integer32):
    """Custom type rcCfmTransmitLbmAssociationIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmTransmitLbmAssociationIndex_Type.__name__ = "Integer32"
_RcCfmTransmitLbmAssociationIndex_Object = MibTableColumn
rcCfmTransmitLbmAssociationIndex = _RcCfmTransmitLbmAssociationIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 2),
    _RcCfmTransmitLbmAssociationIndex_Type()
)
rcCfmTransmitLbmAssociationIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmAssociationIndex.setStatus("current")


class _RcCfmTransmitLbmIndex_Type(Integer32):
    """Custom type rcCfmTransmitLbmIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8191),
    )


_RcCfmTransmitLbmIndex_Type.__name__ = "Integer32"
_RcCfmTransmitLbmIndex_Object = MibTableColumn
rcCfmTransmitLbmIndex = _RcCfmTransmitLbmIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 3),
    _RcCfmTransmitLbmIndex_Type()
)
rcCfmTransmitLbmIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmIndex.setStatus("current")


class _RcCfmTransmitLbmDomainName_Type(DisplayString):
    """Custom type rcCfmTransmitLbmDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmTransmitLbmDomainName_Type.__name__ = "DisplayString"
_RcCfmTransmitLbmDomainName_Object = MibTableColumn
rcCfmTransmitLbmDomainName = _RcCfmTransmitLbmDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 4),
    _RcCfmTransmitLbmDomainName_Type()
)
rcCfmTransmitLbmDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmDomainName.setStatus("current")


class _RcCfmTransmitLbmAssociationName_Type(DisplayString):
    """Custom type rcCfmTransmitLbmAssociationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmTransmitLbmAssociationName_Type.__name__ = "DisplayString"
_RcCfmTransmitLbmAssociationName_Object = MibTableColumn
rcCfmTransmitLbmAssociationName = _RcCfmTransmitLbmAssociationName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 5),
    _RcCfmTransmitLbmAssociationName_Type()
)
rcCfmTransmitLbmAssociationName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmAssociationName.setStatus("current")
_RcCfmTransmitLbmDestMacAddress_Type = MacAddress
_RcCfmTransmitLbmDestMacAddress_Object = MibTableColumn
rcCfmTransmitLbmDestMacAddress = _RcCfmTransmitLbmDestMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 6),
    _RcCfmTransmitLbmDestMacAddress_Type()
)
rcCfmTransmitLbmDestMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmDestMacAddress.setStatus("current")


class _RcCfmTransmitLbmDestMepId_Type(Integer32):
    """Custom type rcCfmTransmitLbmDestMepId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8191),
    )


_RcCfmTransmitLbmDestMepId_Type.__name__ = "Integer32"
_RcCfmTransmitLbmDestMepId_Object = MibTableColumn
rcCfmTransmitLbmDestMepId = _RcCfmTransmitLbmDestMepId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 7),
    _RcCfmTransmitLbmDestMepId_Type()
)
rcCfmTransmitLbmDestMepId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmDestMepId.setStatus("current")
_RcCfmTransmitLbmDestIsMepId_Type = TruthValue
_RcCfmTransmitLbmDestIsMepId_Object = MibTableColumn
rcCfmTransmitLbmDestIsMepId = _RcCfmTransmitLbmDestIsMepId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 8),
    _RcCfmTransmitLbmDestIsMepId_Type()
)
rcCfmTransmitLbmDestIsMepId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmDestIsMepId.setStatus("current")


class _RcCfmTransmitLbmMessages_Type(Integer32):
    """Custom type rcCfmTransmitLbmMessages based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000),
    )


_RcCfmTransmitLbmMessages_Type.__name__ = "Integer32"
_RcCfmTransmitLbmMessages_Object = MibTableColumn
rcCfmTransmitLbmMessages = _RcCfmTransmitLbmMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 9),
    _RcCfmTransmitLbmMessages_Type()
)
rcCfmTransmitLbmMessages.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmMessages.setStatus("current")


class _RcCfmTransmitLbmVlanPriority_Type(Integer32):
    """Custom type rcCfmTransmitLbmVlanPriority based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcCfmTransmitLbmVlanPriority_Type.__name__ = "Integer32"
_RcCfmTransmitLbmVlanPriority_Object = MibTableColumn
rcCfmTransmitLbmVlanPriority = _RcCfmTransmitLbmVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 11),
    _RcCfmTransmitLbmVlanPriority_Type()
)
rcCfmTransmitLbmVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmVlanPriority.setStatus("current")


class _RcCfmTransmitLbmVlanDropEnable_Type(TruthValue):
    """Custom type rcCfmTransmitLbmVlanDropEnable based on TruthValue"""


_RcCfmTransmitLbmVlanDropEnable_Object = MibTableColumn
rcCfmTransmitLbmVlanDropEnable = _RcCfmTransmitLbmVlanDropEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 12),
    _RcCfmTransmitLbmVlanDropEnable_Type()
)
rcCfmTransmitLbmVlanDropEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmVlanDropEnable.setStatus("current")


class _RcCfmTransmitLbmSeqNumber_Type(Integer32):
    """Custom type rcCfmTransmitLbmSeqNumber based on Integer32"""
    defaultValue = 0


_RcCfmTransmitLbmSeqNumber_Object = MibTableColumn
rcCfmTransmitLbmSeqNumber = _RcCfmTransmitLbmSeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 13),
    _RcCfmTransmitLbmSeqNumber_Type()
)
rcCfmTransmitLbmSeqNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmSeqNumber.setStatus("current")


class _RcCfmTransmitLbmResultOk_Type(TruthValue):
    """Custom type rcCfmTransmitLbmResultOk based on TruthValue"""


_RcCfmTransmitLbmResultOk_Object = MibTableColumn
rcCfmTransmitLbmResultOk = _RcCfmTransmitLbmResultOk_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 14),
    _RcCfmTransmitLbmResultOk_Type()
)
rcCfmTransmitLbmResultOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmResultOk.setStatus("current")


class _RcCfmTransmitLbmStatus_Type(Integer32):
    """Custom type rcCfmTransmitLbmStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abort", 3),
          ("ready", 1),
          ("transmit", 2))
    )


_RcCfmTransmitLbmStatus_Type.__name__ = "Integer32"
_RcCfmTransmitLbmStatus_Object = MibTableColumn
rcCfmTransmitLbmStatus = _RcCfmTransmitLbmStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 15),
    _RcCfmTransmitLbmStatus_Type()
)
rcCfmTransmitLbmStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmStatus.setStatus("current")


class _RcCfmTransmitLbmResult_Type(DisplayString):
    """Custom type rcCfmTransmitLbmResult based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 799),
    )


_RcCfmTransmitLbmResult_Type.__name__ = "DisplayString"
_RcCfmTransmitLbmResult_Object = MibTableColumn
rcCfmTransmitLbmResult = _RcCfmTransmitLbmResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 16),
    _RcCfmTransmitLbmResult_Type()
)
rcCfmTransmitLbmResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmResult.setStatus("current")


class _RcCfmTransmitLbmTimeoutInt_Type(Integer32):
    """Custom type rcCfmTransmitLbmTimeoutInt based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcCfmTransmitLbmTimeoutInt_Type.__name__ = "Integer32"
_RcCfmTransmitLbmTimeoutInt_Object = MibTableColumn
rcCfmTransmitLbmTimeoutInt = _RcCfmTransmitLbmTimeoutInt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 18),
    _RcCfmTransmitLbmTimeoutInt_Type()
)
rcCfmTransmitLbmTimeoutInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmTimeoutInt.setStatus("current")


class _RcCfmTransmitLbmInterFrameInt_Type(Integer32):
    """Custom type rcCfmTransmitLbmInterFrameInt based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcCfmTransmitLbmInterFrameInt_Type.__name__ = "Integer32"
_RcCfmTransmitLbmInterFrameInt_Object = MibTableColumn
rcCfmTransmitLbmInterFrameInt = _RcCfmTransmitLbmInterFrameInt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 19),
    _RcCfmTransmitLbmInterFrameInt_Type()
)
rcCfmTransmitLbmInterFrameInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmInterFrameInt.setStatus("current")


class _RcCfmTransmitLbmTestPattern_Type(Integer32):
    """Custom type rcCfmTransmitLbmTestPattern based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("allZero", 1),
          ("allZeroCrc", 2),
          ("pseudoRandomBitSequence", 3),
          ("pseudoRandomBitSequenceCrc", 4))
    )


_RcCfmTransmitLbmTestPattern_Type.__name__ = "Integer32"
_RcCfmTransmitLbmTestPattern_Object = MibTableColumn
rcCfmTransmitLbmTestPattern = _RcCfmTransmitLbmTestPattern_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 20),
    _RcCfmTransmitLbmTestPattern_Type()
)
rcCfmTransmitLbmTestPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmTestPattern.setStatus("current")


class _RcCfmTransmitLbmDataSize_Type(Integer32):
    """Custom type rcCfmTransmitLbmDataSize based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 400),
    )


_RcCfmTransmitLbmDataSize_Type.__name__ = "Integer32"
_RcCfmTransmitLbmDataSize_Object = MibTableColumn
rcCfmTransmitLbmDataSize = _RcCfmTransmitLbmDataSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 21),
    _RcCfmTransmitLbmDataSize_Type()
)
rcCfmTransmitLbmDataSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmDataSize.setStatus("current")


class _RcCfmTransmitLbmFrameSize_Type(Integer32):
    """Custom type rcCfmTransmitLbmFrameSize based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9600),
    )


_RcCfmTransmitLbmFrameSize_Type.__name__ = "Integer32"
_RcCfmTransmitLbmFrameSize_Object = MibTableColumn
rcCfmTransmitLbmFrameSize = _RcCfmTransmitLbmFrameSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 22),
    _RcCfmTransmitLbmFrameSize_Type()
)
rcCfmTransmitLbmFrameSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmFrameSize.setStatus("current")


class _RcCfmTransmitLbmSourceMode_Type(Integer32):
    """Custom type rcCfmTransmitLbmSourceMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noVlanMac", 3),
          ("nodal", 1),
          ("smltVirtual", 2))
    )


_RcCfmTransmitLbmSourceMode_Type.__name__ = "Integer32"
_RcCfmTransmitLbmSourceMode_Object = MibTableColumn
rcCfmTransmitLbmSourceMode = _RcCfmTransmitLbmSourceMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 17, 1, 23),
    _RcCfmTransmitLbmSourceMode_Type()
)
rcCfmTransmitLbmSourceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLbmSourceMode.setStatus("current")
_RcCfmTransmitLtmTable_Object = MibTable
rcCfmTransmitLtmTable = _RcCfmTransmitLtmTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18)
)
if mibBuilder.loadTexts:
    rcCfmTransmitLtmTable.setStatus("current")
_RcCfmTransmitLtmEntry_Object = MibTableRow
rcCfmTransmitLtmEntry = _RcCfmTransmitLtmEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1)
)
rcCfmTransmitLtmEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmTransmitLtmDomainIndex"),
    (0, "RAPID-CITY", "rcCfmTransmitLtmAssociationIndex"),
    (0, "RAPID-CITY", "rcCfmTransmitLtmIndex"),
)
if mibBuilder.loadTexts:
    rcCfmTransmitLtmEntry.setStatus("current")


class _RcCfmTransmitLtmDomainIndex_Type(Integer32):
    """Custom type rcCfmTransmitLtmDomainIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmTransmitLtmDomainIndex_Type.__name__ = "Integer32"
_RcCfmTransmitLtmDomainIndex_Object = MibTableColumn
rcCfmTransmitLtmDomainIndex = _RcCfmTransmitLtmDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 1),
    _RcCfmTransmitLtmDomainIndex_Type()
)
rcCfmTransmitLtmDomainIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmDomainIndex.setStatus("current")


class _RcCfmTransmitLtmAssociationIndex_Type(Integer32):
    """Custom type rcCfmTransmitLtmAssociationIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmTransmitLtmAssociationIndex_Type.__name__ = "Integer32"
_RcCfmTransmitLtmAssociationIndex_Object = MibTableColumn
rcCfmTransmitLtmAssociationIndex = _RcCfmTransmitLtmAssociationIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 2),
    _RcCfmTransmitLtmAssociationIndex_Type()
)
rcCfmTransmitLtmAssociationIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmAssociationIndex.setStatus("current")


class _RcCfmTransmitLtmIndex_Type(Integer32):
    """Custom type rcCfmTransmitLtmIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8191),
    )


_RcCfmTransmitLtmIndex_Type.__name__ = "Integer32"
_RcCfmTransmitLtmIndex_Object = MibTableColumn
rcCfmTransmitLtmIndex = _RcCfmTransmitLtmIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 3),
    _RcCfmTransmitLtmIndex_Type()
)
rcCfmTransmitLtmIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmIndex.setStatus("current")


class _RcCfmTransmitLtmDomainName_Type(DisplayString):
    """Custom type rcCfmTransmitLtmDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmTransmitLtmDomainName_Type.__name__ = "DisplayString"
_RcCfmTransmitLtmDomainName_Object = MibTableColumn
rcCfmTransmitLtmDomainName = _RcCfmTransmitLtmDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 4),
    _RcCfmTransmitLtmDomainName_Type()
)
rcCfmTransmitLtmDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmDomainName.setStatus("current")


class _RcCfmTransmitLtmAssociationName_Type(DisplayString):
    """Custom type rcCfmTransmitLtmAssociationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmTransmitLtmAssociationName_Type.__name__ = "DisplayString"
_RcCfmTransmitLtmAssociationName_Object = MibTableColumn
rcCfmTransmitLtmAssociationName = _RcCfmTransmitLtmAssociationName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 5),
    _RcCfmTransmitLtmAssociationName_Type()
)
rcCfmTransmitLtmAssociationName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmAssociationName.setStatus("current")


class _RcCfmTransmitLtmVlanPriority_Type(Integer32):
    """Custom type rcCfmTransmitLtmVlanPriority based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcCfmTransmitLtmVlanPriority_Type.__name__ = "Integer32"
_RcCfmTransmitLtmVlanPriority_Object = MibTableColumn
rcCfmTransmitLtmVlanPriority = _RcCfmTransmitLtmVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 6),
    _RcCfmTransmitLtmVlanPriority_Type()
)
rcCfmTransmitLtmVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmVlanPriority.setStatus("current")
_RcCfmTransmitLtmDestMacAddress_Type = MacAddress
_RcCfmTransmitLtmDestMacAddress_Object = MibTableColumn
rcCfmTransmitLtmDestMacAddress = _RcCfmTransmitLtmDestMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 7),
    _RcCfmTransmitLtmDestMacAddress_Type()
)
rcCfmTransmitLtmDestMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmDestMacAddress.setStatus("current")


class _RcCfmTransmitLtmDestMepId_Type(Integer32):
    """Custom type rcCfmTransmitLtmDestMepId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8191),
    )


_RcCfmTransmitLtmDestMepId_Type.__name__ = "Integer32"
_RcCfmTransmitLtmDestMepId_Object = MibTableColumn
rcCfmTransmitLtmDestMepId = _RcCfmTransmitLtmDestMepId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 8),
    _RcCfmTransmitLtmDestMepId_Type()
)
rcCfmTransmitLtmDestMepId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmDestMepId.setStatus("current")
_RcCfmTransmitLtmDestIsMepId_Type = TruthValue
_RcCfmTransmitLtmDestIsMepId_Object = MibTableColumn
rcCfmTransmitLtmDestIsMepId = _RcCfmTransmitLtmDestIsMepId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 9),
    _RcCfmTransmitLtmDestIsMepId_Type()
)
rcCfmTransmitLtmDestIsMepId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmDestIsMepId.setStatus("current")


class _RcCfmTransmitLtmTtl_Type(Integer32):
    """Custom type rcCfmTransmitLtmTtl based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmTransmitLtmTtl_Type.__name__ = "Integer32"
_RcCfmTransmitLtmTtl_Object = MibTableColumn
rcCfmTransmitLtmTtl = _RcCfmTransmitLtmTtl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 10),
    _RcCfmTransmitLtmTtl_Type()
)
rcCfmTransmitLtmTtl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmTtl.setStatus("current")


class _RcCfmTransmitLtmSeqNumber_Type(Integer32):
    """Custom type rcCfmTransmitLtmSeqNumber based on Integer32"""
    defaultValue = 0


_RcCfmTransmitLtmSeqNumber_Object = MibTableColumn
rcCfmTransmitLtmSeqNumber = _RcCfmTransmitLtmSeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 11),
    _RcCfmTransmitLtmSeqNumber_Type()
)
rcCfmTransmitLtmSeqNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmSeqNumber.setStatus("current")


class _RcCfmTransmitLtmResultOk_Type(TruthValue):
    """Custom type rcCfmTransmitLtmResultOk based on TruthValue"""


_RcCfmTransmitLtmResultOk_Object = MibTableColumn
rcCfmTransmitLtmResultOk = _RcCfmTransmitLtmResultOk_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 12),
    _RcCfmTransmitLtmResultOk_Type()
)
rcCfmTransmitLtmResultOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmResultOk.setStatus("current")


class _RcCfmTransmitLtmStatus_Type(Integer32):
    """Custom type rcCfmTransmitLtmStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abort", 3),
          ("ready", 1),
          ("transmit", 2))
    )


_RcCfmTransmitLtmStatus_Type.__name__ = "Integer32"
_RcCfmTransmitLtmStatus_Object = MibTableColumn
rcCfmTransmitLtmStatus = _RcCfmTransmitLtmStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 13),
    _RcCfmTransmitLtmStatus_Type()
)
rcCfmTransmitLtmStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmStatus.setStatus("current")


class _RcCfmTransmitLtmResult_Type(DisplayString):
    """Custom type rcCfmTransmitLtmResult based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1023),
    )


_RcCfmTransmitLtmResult_Type.__name__ = "DisplayString"
_RcCfmTransmitLtmResult_Object = MibTableColumn
rcCfmTransmitLtmResult = _RcCfmTransmitLtmResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 14),
    _RcCfmTransmitLtmResult_Type()
)
rcCfmTransmitLtmResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmResult.setStatus("obsolete")


class _RcCfmTransmitLtmFlag_Type(Integer32):
    """Custom type rcCfmTransmitLtmFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("epDisabled", 9),
          ("internalError", 2),
          ("invalidRemoteMepMac", 4),
          ("ltmComplete", 11),
          ("ltmLeafNode", 12),
          ("ltmToOwnMepMac", 8),
          ("mepDisabled", 6),
          ("noLtrResponse", 7),
          ("noRemoteMep", 3),
          ("noRemoteMepMacLearned", 5),
          ("none", 1),
          ("trunkDisabled", 10))
    )


_RcCfmTransmitLtmFlag_Type.__name__ = "Integer32"
_RcCfmTransmitLtmFlag_Object = MibTableColumn
rcCfmTransmitLtmFlag = _RcCfmTransmitLtmFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 15),
    _RcCfmTransmitLtmFlag_Type()
)
rcCfmTransmitLtmFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmFlag.setStatus("current")


class _RcCfmTransmitLtmSourceMode_Type(Integer32):
    """Custom type rcCfmTransmitLtmSourceMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noVlanMac", 3),
          ("nodal", 1),
          ("smltVirtual", 2))
    )


_RcCfmTransmitLtmSourceMode_Type.__name__ = "Integer32"
_RcCfmTransmitLtmSourceMode_Object = MibTableColumn
rcCfmTransmitLtmSourceMode = _RcCfmTransmitLtmSourceMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 18, 1, 16),
    _RcCfmTransmitLtmSourceMode_Type()
)
rcCfmTransmitLtmSourceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitLtmSourceMode.setStatus("current")
_RcCfmLtrReplyTable_Object = MibTable
rcCfmLtrReplyTable = _RcCfmLtrReplyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33)
)
if mibBuilder.loadTexts:
    rcCfmLtrReplyTable.setStatus("current")
_RcCfmLtrReplyEntry_Object = MibTableRow
rcCfmLtrReplyEntry = _RcCfmLtrReplyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1)
)
rcCfmLtrReplyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmLtrReplyDomainIndex"),
    (0, "RAPID-CITY", "rcCfmLtrReplyAssociationIndex"),
    (0, "RAPID-CITY", "rcCfmLtrReplyMepId"),
    (0, "RAPID-CITY", "rcCfmLtrReplySeqNumber"),
    (0, "RAPID-CITY", "rcCfmLtrReplyHop"),
    (0, "RAPID-CITY", "rcCfmLtrReplyReceiveOrder"),
)
if mibBuilder.loadTexts:
    rcCfmLtrReplyEntry.setStatus("current")


class _RcCfmLtrReplyDomainIndex_Type(Integer32):
    """Custom type rcCfmLtrReplyDomainIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmLtrReplyDomainIndex_Type.__name__ = "Integer32"
_RcCfmLtrReplyDomainIndex_Object = MibTableColumn
rcCfmLtrReplyDomainIndex = _RcCfmLtrReplyDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 1),
    _RcCfmLtrReplyDomainIndex_Type()
)
rcCfmLtrReplyDomainIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmLtrReplyDomainIndex.setStatus("current")


class _RcCfmLtrReplyAssociationIndex_Type(Integer32):
    """Custom type rcCfmLtrReplyAssociationIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmLtrReplyAssociationIndex_Type.__name__ = "Integer32"
_RcCfmLtrReplyAssociationIndex_Object = MibTableColumn
rcCfmLtrReplyAssociationIndex = _RcCfmLtrReplyAssociationIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 2),
    _RcCfmLtrReplyAssociationIndex_Type()
)
rcCfmLtrReplyAssociationIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmLtrReplyAssociationIndex.setStatus("current")


class _RcCfmLtrReplyMepId_Type(Integer32):
    """Custom type rcCfmLtrReplyMepId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8191),
    )


_RcCfmLtrReplyMepId_Type.__name__ = "Integer32"
_RcCfmLtrReplyMepId_Object = MibTableColumn
rcCfmLtrReplyMepId = _RcCfmLtrReplyMepId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 3),
    _RcCfmLtrReplyMepId_Type()
)
rcCfmLtrReplyMepId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmLtrReplyMepId.setStatus("current")


class _RcCfmLtrReplySeqNumber_Type(Integer32):
    """Custom type rcCfmLtrReplySeqNumber based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcCfmLtrReplySeqNumber_Type.__name__ = "Integer32"
_RcCfmLtrReplySeqNumber_Object = MibTableColumn
rcCfmLtrReplySeqNumber = _RcCfmLtrReplySeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 4),
    _RcCfmLtrReplySeqNumber_Type()
)
rcCfmLtrReplySeqNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmLtrReplySeqNumber.setStatus("current")


class _RcCfmLtrReplyHop_Type(Integer32):
    """Custom type rcCfmLtrReplyHop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmLtrReplyHop_Type.__name__ = "Integer32"
_RcCfmLtrReplyHop_Object = MibTableColumn
rcCfmLtrReplyHop = _RcCfmLtrReplyHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 5),
    _RcCfmLtrReplyHop_Type()
)
rcCfmLtrReplyHop.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmLtrReplyHop.setStatus("current")


class _RcCfmLtrReplyReceiveOrder_Type(Integer32):
    """Custom type rcCfmLtrReplyReceiveOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmLtrReplyReceiveOrder_Type.__name__ = "Integer32"
_RcCfmLtrReplyReceiveOrder_Object = MibTableColumn
rcCfmLtrReplyReceiveOrder = _RcCfmLtrReplyReceiveOrder_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 6),
    _RcCfmLtrReplyReceiveOrder_Type()
)
rcCfmLtrReplyReceiveOrder.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmLtrReplyReceiveOrder.setStatus("current")


class _RcCfmLtrReplyTtl_Type(Integer32):
    """Custom type rcCfmLtrReplyTtl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmLtrReplyTtl_Type.__name__ = "Integer32"
_RcCfmLtrReplyTtl_Object = MibTableColumn
rcCfmLtrReplyTtl = _RcCfmLtrReplyTtl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 7),
    _RcCfmLtrReplyTtl_Type()
)
rcCfmLtrReplyTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyTtl.setStatus("current")


class _RcCfmLtrReplyDomainName_Type(DisplayString):
    """Custom type rcCfmLtrReplyDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmLtrReplyDomainName_Type.__name__ = "DisplayString"
_RcCfmLtrReplyDomainName_Object = MibTableColumn
rcCfmLtrReplyDomainName = _RcCfmLtrReplyDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 8),
    _RcCfmLtrReplyDomainName_Type()
)
rcCfmLtrReplyDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyDomainName.setStatus("current")


class _RcCfmLtrReplyAssociationName_Type(DisplayString):
    """Custom type rcCfmLtrReplyAssociationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 22),
    )


_RcCfmLtrReplyAssociationName_Type.__name__ = "DisplayString"
_RcCfmLtrReplyAssociationName_Object = MibTableColumn
rcCfmLtrReplyAssociationName = _RcCfmLtrReplyAssociationName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 9),
    _RcCfmLtrReplyAssociationName_Type()
)
rcCfmLtrReplyAssociationName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyAssociationName.setStatus("current")
_RcCfmLtrReplyForwarded_Type = TruthValue
_RcCfmLtrReplyForwarded_Object = MibTableColumn
rcCfmLtrReplyForwarded = _RcCfmLtrReplyForwarded_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 10),
    _RcCfmLtrReplyForwarded_Type()
)
rcCfmLtrReplyForwarded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyForwarded.setStatus("current")
_RcCfmLtrReplyTerminalMep_Type = TruthValue
_RcCfmLtrReplyTerminalMep_Object = MibTableColumn
rcCfmLtrReplyTerminalMep = _RcCfmLtrReplyTerminalMep_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 11),
    _RcCfmLtrReplyTerminalMep_Type()
)
rcCfmLtrReplyTerminalMep.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyTerminalMep.setStatus("current")


class _RcCfmLtrReplyLastEgressIdentifier_Type(OctetString):
    """Custom type rcCfmLtrReplyLastEgressIdentifier based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RcCfmLtrReplyLastEgressIdentifier_Type.__name__ = "OctetString"
_RcCfmLtrReplyLastEgressIdentifier_Object = MibTableColumn
rcCfmLtrReplyLastEgressIdentifier = _RcCfmLtrReplyLastEgressIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 12),
    _RcCfmLtrReplyLastEgressIdentifier_Type()
)
rcCfmLtrReplyLastEgressIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyLastEgressIdentifier.setStatus("current")


class _RcCfmLtrReplyNextEgressIdentifier_Type(OctetString):
    """Custom type rcCfmLtrReplyNextEgressIdentifier based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RcCfmLtrReplyNextEgressIdentifier_Type.__name__ = "OctetString"
_RcCfmLtrReplyNextEgressIdentifier_Object = MibTableColumn
rcCfmLtrReplyNextEgressIdentifier = _RcCfmLtrReplyNextEgressIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 13),
    _RcCfmLtrReplyNextEgressIdentifier_Type()
)
rcCfmLtrReplyNextEgressIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyNextEgressIdentifier.setStatus("current")


class _RcCfmLtrReplyRelayAction_Type(CfmRelayActionFieldValue):
    """Custom type rcCfmLtrReplyRelayAction based on CfmRelayActionFieldValue"""


_RcCfmLtrReplyRelayAction_Object = MibTableColumn
rcCfmLtrReplyRelayAction = _RcCfmLtrReplyRelayAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 14),
    _RcCfmLtrReplyRelayAction_Type()
)
rcCfmLtrReplyRelayAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyRelayAction.setStatus("current")
_RcCfmLtrReplySrcMac_Type = MacAddress
_RcCfmLtrReplySrcMac_Object = MibTableColumn
rcCfmLtrReplySrcMac = _RcCfmLtrReplySrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 15),
    _RcCfmLtrReplySrcMac_Type()
)
rcCfmLtrReplySrcMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplySrcMac.setStatus("current")
_RcCfmLtrReplyIngressAction_Type = CfmIngressActionFieldValue
_RcCfmLtrReplyIngressAction_Object = MibTableColumn
rcCfmLtrReplyIngressAction = _RcCfmLtrReplyIngressAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 16),
    _RcCfmLtrReplyIngressAction_Type()
)
rcCfmLtrReplyIngressAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyIngressAction.setStatus("current")
_RcCfmLtrReplyIngressMac_Type = MacAddress
_RcCfmLtrReplyIngressMac_Object = MibTableColumn
rcCfmLtrReplyIngressMac = _RcCfmLtrReplyIngressMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 17),
    _RcCfmLtrReplyIngressMac_Type()
)
rcCfmLtrReplyIngressMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyIngressMac.setStatus("current")
_RcCfmLtrReplyIngressPortIdSubtype_Type = LldpPortIdSubtype
_RcCfmLtrReplyIngressPortIdSubtype_Object = MibTableColumn
rcCfmLtrReplyIngressPortIdSubtype = _RcCfmLtrReplyIngressPortIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 18),
    _RcCfmLtrReplyIngressPortIdSubtype_Type()
)
rcCfmLtrReplyIngressPortIdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyIngressPortIdSubtype.setStatus("current")
_RcCfmLtrReplyIngressPortId_Type = LldpPortId
_RcCfmLtrReplyIngressPortId_Object = MibTableColumn
rcCfmLtrReplyIngressPortId = _RcCfmLtrReplyIngressPortId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 19),
    _RcCfmLtrReplyIngressPortId_Type()
)
rcCfmLtrReplyIngressPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyIngressPortId.setStatus("current")
_RcCfmLtrReplyEgressAction_Type = CfmEgressActionFieldValue
_RcCfmLtrReplyEgressAction_Object = MibTableColumn
rcCfmLtrReplyEgressAction = _RcCfmLtrReplyEgressAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 20),
    _RcCfmLtrReplyEgressAction_Type()
)
rcCfmLtrReplyEgressAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyEgressAction.setStatus("current")
_RcCfmLtrReplyEgressMac_Type = MacAddress
_RcCfmLtrReplyEgressMac_Object = MibTableColumn
rcCfmLtrReplyEgressMac = _RcCfmLtrReplyEgressMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 21),
    _RcCfmLtrReplyEgressMac_Type()
)
rcCfmLtrReplyEgressMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyEgressMac.setStatus("current")
_RcCfmLtrReplyEgressPortIdSubtype_Type = LldpPortIdSubtype
_RcCfmLtrReplyEgressPortIdSubtype_Object = MibTableColumn
rcCfmLtrReplyEgressPortIdSubtype = _RcCfmLtrReplyEgressPortIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 22),
    _RcCfmLtrReplyEgressPortIdSubtype_Type()
)
rcCfmLtrReplyEgressPortIdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyEgressPortIdSubtype.setStatus("current")
_RcCfmLtrReplyEgressPortId_Type = LldpPortId
_RcCfmLtrReplyEgressPortId_Object = MibTableColumn
rcCfmLtrReplyEgressPortId = _RcCfmLtrReplyEgressPortId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 33, 1, 23),
    _RcCfmLtrReplyEgressPortId_Type()
)
rcCfmLtrReplyEgressPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmLtrReplyEgressPortId.setStatus("current")
_RcCfmTransmitL2PingTable_Object = MibTable
rcCfmTransmitL2PingTable = _RcCfmTransmitL2PingTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34)
)
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingTable.setStatus("current")
_RcCfmTransmitL2PingEntry_Object = MibTableRow
rcCfmTransmitL2PingEntry = _RcCfmTransmitL2PingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1)
)
rcCfmTransmitL2PingEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmTransmitL2PingVlanId"),
)
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingEntry.setStatus("current")


class _RcCfmTransmitL2PingVlanId_Type(Integer32):
    """Custom type rcCfmTransmitL2PingVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcCfmTransmitL2PingVlanId_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingVlanId_Object = MibTableColumn
rcCfmTransmitL2PingVlanId = _RcCfmTransmitL2PingVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 1),
    _RcCfmTransmitL2PingVlanId_Type()
)
rcCfmTransmitL2PingVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingVlanId.setStatus("current")
_RcCfmTransmitL2PingDestMacAddress_Type = MacAddress
_RcCfmTransmitL2PingDestMacAddress_Object = MibTableColumn
rcCfmTransmitL2PingDestMacAddress = _RcCfmTransmitL2PingDestMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 2),
    _RcCfmTransmitL2PingDestMacAddress_Type()
)
rcCfmTransmitL2PingDestMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingDestMacAddress.setStatus("current")


class _RcCfmTransmitL2PingHostName_Type(OctetString):
    """Custom type rcCfmTransmitL2PingHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcCfmTransmitL2PingHostName_Type.__name__ = "OctetString"
_RcCfmTransmitL2PingHostName_Object = MibTableColumn
rcCfmTransmitL2PingHostName = _RcCfmTransmitL2PingHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 3),
    _RcCfmTransmitL2PingHostName_Type()
)
rcCfmTransmitL2PingHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingHostName.setStatus("current")
_RcCfmTransmitL2PingDestIsHostName_Type = TruthValue
_RcCfmTransmitL2PingDestIsHostName_Object = MibTableColumn
rcCfmTransmitL2PingDestIsHostName = _RcCfmTransmitL2PingDestIsHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 4),
    _RcCfmTransmitL2PingDestIsHostName_Type()
)
rcCfmTransmitL2PingDestIsHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingDestIsHostName.setStatus("current")


class _RcCfmTransmitL2PingMessages_Type(Integer32):
    """Custom type rcCfmTransmitL2PingMessages based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_RcCfmTransmitL2PingMessages_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingMessages_Object = MibTableColumn
rcCfmTransmitL2PingMessages = _RcCfmTransmitL2PingMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 5),
    _RcCfmTransmitL2PingMessages_Type()
)
rcCfmTransmitL2PingMessages.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingMessages.setStatus("current")


class _RcCfmTransmitL2PingPriority_Type(Integer32):
    """Custom type rcCfmTransmitL2PingPriority based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcCfmTransmitL2PingPriority_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingPriority_Object = MibTableColumn
rcCfmTransmitL2PingPriority = _RcCfmTransmitL2PingPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 6),
    _RcCfmTransmitL2PingPriority_Type()
)
rcCfmTransmitL2PingPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingPriority.setStatus("current")


class _RcCfmTransmitL2PingTimeoutInt_Type(Integer32):
    """Custom type rcCfmTransmitL2PingTimeoutInt based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcCfmTransmitL2PingTimeoutInt_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingTimeoutInt_Object = MibTableColumn
rcCfmTransmitL2PingTimeoutInt = _RcCfmTransmitL2PingTimeoutInt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 7),
    _RcCfmTransmitL2PingTimeoutInt_Type()
)
rcCfmTransmitL2PingTimeoutInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingTimeoutInt.setStatus("current")


class _RcCfmTransmitL2PingTestPattern_Type(Integer32):
    """Custom type rcCfmTransmitL2PingTestPattern based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("allZero", 1),
          ("allZeroCrc", 2),
          ("pseudoRandomBitSequence", 3),
          ("pseudoRandomBitSequenceCrc", 4))
    )


_RcCfmTransmitL2PingTestPattern_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingTestPattern_Object = MibTableColumn
rcCfmTransmitL2PingTestPattern = _RcCfmTransmitL2PingTestPattern_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 8),
    _RcCfmTransmitL2PingTestPattern_Type()
)
rcCfmTransmitL2PingTestPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingTestPattern.setStatus("current")


class _RcCfmTransmitL2PingDataSize_Type(Integer32):
    """Custom type rcCfmTransmitL2PingDataSize based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 400),
    )


_RcCfmTransmitL2PingDataSize_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingDataSize_Object = MibTableColumn
rcCfmTransmitL2PingDataSize = _RcCfmTransmitL2PingDataSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 9),
    _RcCfmTransmitL2PingDataSize_Type()
)
rcCfmTransmitL2PingDataSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingDataSize.setStatus("current")


class _RcCfmTransmitL2PingFrameSize_Type(Integer32):
    """Custom type rcCfmTransmitL2PingFrameSize based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9600),
    )


_RcCfmTransmitL2PingFrameSize_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingFrameSize_Object = MibTableColumn
rcCfmTransmitL2PingFrameSize = _RcCfmTransmitL2PingFrameSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 10),
    _RcCfmTransmitL2PingFrameSize_Type()
)
rcCfmTransmitL2PingFrameSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingFrameSize.setStatus("current")


class _RcCfmTransmitL2PingSourceMode_Type(Integer32):
    """Custom type rcCfmTransmitL2PingSourceMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noVlanMac", 3),
          ("nodal", 1),
          ("smltVirtual", 2))
    )


_RcCfmTransmitL2PingSourceMode_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingSourceMode_Object = MibTableColumn
rcCfmTransmitL2PingSourceMode = _RcCfmTransmitL2PingSourceMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 11),
    _RcCfmTransmitL2PingSourceMode_Type()
)
rcCfmTransmitL2PingSourceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingSourceMode.setStatus("current")


class _RcCfmTransmitL2PingSeqNumber_Type(Integer32):
    """Custom type rcCfmTransmitL2PingSeqNumber based on Integer32"""
    defaultValue = 0


_RcCfmTransmitL2PingSeqNumber_Object = MibTableColumn
rcCfmTransmitL2PingSeqNumber = _RcCfmTransmitL2PingSeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 12),
    _RcCfmTransmitL2PingSeqNumber_Type()
)
rcCfmTransmitL2PingSeqNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingSeqNumber.setStatus("current")


class _RcCfmTransmitL2PingResultOk_Type(TruthValue):
    """Custom type rcCfmTransmitL2PingResultOk based on TruthValue"""


_RcCfmTransmitL2PingResultOk_Object = MibTableColumn
rcCfmTransmitL2PingResultOk = _RcCfmTransmitL2PingResultOk_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 13),
    _RcCfmTransmitL2PingResultOk_Type()
)
rcCfmTransmitL2PingResultOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingResultOk.setStatus("current")


class _RcCfmTransmitL2PingStatus_Type(Integer32):
    """Custom type rcCfmTransmitL2PingStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abort", 3),
          ("ready", 1),
          ("transmit", 2))
    )


_RcCfmTransmitL2PingStatus_Type.__name__ = "Integer32"
_RcCfmTransmitL2PingStatus_Object = MibTableColumn
rcCfmTransmitL2PingStatus = _RcCfmTransmitL2PingStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 14),
    _RcCfmTransmitL2PingStatus_Type()
)
rcCfmTransmitL2PingStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingStatus.setStatus("current")


class _RcCfmTransmitL2PingResult_Type(DisplayString):
    """Custom type rcCfmTransmitL2PingResult based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 799),
    )


_RcCfmTransmitL2PingResult_Type.__name__ = "DisplayString"
_RcCfmTransmitL2PingResult_Object = MibTableColumn
rcCfmTransmitL2PingResult = _RcCfmTransmitL2PingResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 34, 1, 15),
    _RcCfmTransmitL2PingResult_Type()
)
rcCfmTransmitL2PingResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2PingResult.setStatus("current")
_RcCfmTransmitL2TraceTable_Object = MibTable
rcCfmTransmitL2TraceTable = _RcCfmTransmitL2TraceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35)
)
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceTable.setStatus("current")
_RcCfmTransmitL2TraceEntry_Object = MibTableRow
rcCfmTransmitL2TraceEntry = _RcCfmTransmitL2TraceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1)
)
rcCfmTransmitL2TraceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmTransmitL2TraceVlanId"),
)
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceEntry.setStatus("current")


class _RcCfmTransmitL2TraceVlanId_Type(Integer32):
    """Custom type rcCfmTransmitL2TraceVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcCfmTransmitL2TraceVlanId_Type.__name__ = "Integer32"
_RcCfmTransmitL2TraceVlanId_Object = MibTableColumn
rcCfmTransmitL2TraceVlanId = _RcCfmTransmitL2TraceVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 1),
    _RcCfmTransmitL2TraceVlanId_Type()
)
rcCfmTransmitL2TraceVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceVlanId.setStatus("current")


class _RcCfmTransmitL2TracePriority_Type(Integer32):
    """Custom type rcCfmTransmitL2TracePriority based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcCfmTransmitL2TracePriority_Type.__name__ = "Integer32"
_RcCfmTransmitL2TracePriority_Object = MibTableColumn
rcCfmTransmitL2TracePriority = _RcCfmTransmitL2TracePriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 2),
    _RcCfmTransmitL2TracePriority_Type()
)
rcCfmTransmitL2TracePriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TracePriority.setStatus("current")
_RcCfmTransmitL2TraceDestMacAddress_Type = MacAddress
_RcCfmTransmitL2TraceDestMacAddress_Object = MibTableColumn
rcCfmTransmitL2TraceDestMacAddress = _RcCfmTransmitL2TraceDestMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 3),
    _RcCfmTransmitL2TraceDestMacAddress_Type()
)
rcCfmTransmitL2TraceDestMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceDestMacAddress.setStatus("current")


class _RcCfmTransmitL2TraceHostName_Type(OctetString):
    """Custom type rcCfmTransmitL2TraceHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcCfmTransmitL2TraceHostName_Type.__name__ = "OctetString"
_RcCfmTransmitL2TraceHostName_Object = MibTableColumn
rcCfmTransmitL2TraceHostName = _RcCfmTransmitL2TraceHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 4),
    _RcCfmTransmitL2TraceHostName_Type()
)
rcCfmTransmitL2TraceHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceHostName.setStatus("current")


class _RcCfmTransmitL2TraceIsid_Type(Integer32):
    """Custom type rcCfmTransmitL2TraceIsid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_RcCfmTransmitL2TraceIsid_Type.__name__ = "Integer32"
_RcCfmTransmitL2TraceIsid_Object = MibTableColumn
rcCfmTransmitL2TraceIsid = _RcCfmTransmitL2TraceIsid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 5),
    _RcCfmTransmitL2TraceIsid_Type()
)
rcCfmTransmitL2TraceIsid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceIsid.setStatus("current")


class _RcCfmTransmitL2TraceNickName_Type(DisplayString):
    """Custom type rcCfmTransmitL2TraceNickName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(7, 7),
    )


_RcCfmTransmitL2TraceNickName_Type.__name__ = "DisplayString"
_RcCfmTransmitL2TraceNickName_Object = MibTableColumn
rcCfmTransmitL2TraceNickName = _RcCfmTransmitL2TraceNickName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 6),
    _RcCfmTransmitL2TraceNickName_Type()
)
rcCfmTransmitL2TraceNickName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceNickName.setStatus("current")
_RcCfmTransmitL2TraceDestIsHostName_Type = TruthValue
_RcCfmTransmitL2TraceDestIsHostName_Object = MibTableColumn
rcCfmTransmitL2TraceDestIsHostName = _RcCfmTransmitL2TraceDestIsHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 7),
    _RcCfmTransmitL2TraceDestIsHostName_Type()
)
rcCfmTransmitL2TraceDestIsHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceDestIsHostName.setStatus("current")
_RcCfmTransmitL2TraceIsidTree_Type = TruthValue
_RcCfmTransmitL2TraceIsidTree_Object = MibTableColumn
rcCfmTransmitL2TraceIsidTree = _RcCfmTransmitL2TraceIsidTree_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 8),
    _RcCfmTransmitL2TraceIsidTree_Type()
)
rcCfmTransmitL2TraceIsidTree.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceIsidTree.setStatus("current")


class _RcCfmTransmitL2TraceTtl_Type(Integer32):
    """Custom type rcCfmTransmitL2TraceTtl based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmTransmitL2TraceTtl_Type.__name__ = "Integer32"
_RcCfmTransmitL2TraceTtl_Object = MibTableColumn
rcCfmTransmitL2TraceTtl = _RcCfmTransmitL2TraceTtl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 9),
    _RcCfmTransmitL2TraceTtl_Type()
)
rcCfmTransmitL2TraceTtl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceTtl.setStatus("current")


class _RcCfmTransmitL2TraceSourceMode_Type(Integer32):
    """Custom type rcCfmTransmitL2TraceSourceMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noVlanMac", 3),
          ("nodal", 1),
          ("smltVirtual", 2))
    )


_RcCfmTransmitL2TraceSourceMode_Type.__name__ = "Integer32"
_RcCfmTransmitL2TraceSourceMode_Object = MibTableColumn
rcCfmTransmitL2TraceSourceMode = _RcCfmTransmitL2TraceSourceMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 10),
    _RcCfmTransmitL2TraceSourceMode_Type()
)
rcCfmTransmitL2TraceSourceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceSourceMode.setStatus("current")


class _RcCfmTransmitL2TraceSeqNumber_Type(Integer32):
    """Custom type rcCfmTransmitL2TraceSeqNumber based on Integer32"""
    defaultValue = 0


_RcCfmTransmitL2TraceSeqNumber_Object = MibTableColumn
rcCfmTransmitL2TraceSeqNumber = _RcCfmTransmitL2TraceSeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 11),
    _RcCfmTransmitL2TraceSeqNumber_Type()
)
rcCfmTransmitL2TraceSeqNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceSeqNumber.setStatus("current")


class _RcCfmTransmitL2TraceResultOk_Type(TruthValue):
    """Custom type rcCfmTransmitL2TraceResultOk based on TruthValue"""


_RcCfmTransmitL2TraceResultOk_Object = MibTableColumn
rcCfmTransmitL2TraceResultOk = _RcCfmTransmitL2TraceResultOk_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 12),
    _RcCfmTransmitL2TraceResultOk_Type()
)
rcCfmTransmitL2TraceResultOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceResultOk.setStatus("current")


class _RcCfmTransmitL2TraceStatus_Type(Integer32):
    """Custom type rcCfmTransmitL2TraceStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abort", 3),
          ("ready", 1),
          ("transmit", 2))
    )


_RcCfmTransmitL2TraceStatus_Type.__name__ = "Integer32"
_RcCfmTransmitL2TraceStatus_Object = MibTableColumn
rcCfmTransmitL2TraceStatus = _RcCfmTransmitL2TraceStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 13),
    _RcCfmTransmitL2TraceStatus_Type()
)
rcCfmTransmitL2TraceStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceStatus.setStatus("current")


class _RcCfmTransmitL2TraceFlag_Type(Integer32):
    """Custom type rcCfmTransmitL2TraceFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("internalError", 2),
          ("invalidMac", 3),
          ("l2TraceComplete", 7),
          ("l2TraceLeafNode", 9),
          ("l2TraceLookupFailure", 8),
          ("l2TraceNotInTree", 10),
          ("l2TraceSmltNotPrimary", 11),
          ("l2TraceToOwnMepMac", 6),
          ("mepDisabled", 4),
          ("noL2TraceResponse", 5),
          ("none", 1))
    )


_RcCfmTransmitL2TraceFlag_Type.__name__ = "Integer32"
_RcCfmTransmitL2TraceFlag_Object = MibTableColumn
rcCfmTransmitL2TraceFlag = _RcCfmTransmitL2TraceFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 35, 1, 14),
    _RcCfmTransmitL2TraceFlag_Type()
)
rcCfmTransmitL2TraceFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2TraceFlag.setStatus("current")
_RcCfmL2TraceReplyTable_Object = MibTable
rcCfmL2TraceReplyTable = _RcCfmL2TraceReplyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36)
)
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyTable.setStatus("current")
_RcCfmL2TraceReplyEntry_Object = MibTableRow
rcCfmL2TraceReplyEntry = _RcCfmL2TraceReplyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1)
)
rcCfmL2TraceReplyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmL2TraceReplyVlanId"),
    (0, "RAPID-CITY", "rcCfmL2TraceReplySeqNumber"),
    (0, "RAPID-CITY", "rcCfmL2TraceReplyHop"),
    (0, "RAPID-CITY", "rcCfmL2TraceReplyReceiveOrder"),
)
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyEntry.setStatus("current")


class _RcCfmL2TraceReplyVlanId_Type(Integer32):
    """Custom type rcCfmL2TraceReplyVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcCfmL2TraceReplyVlanId_Type.__name__ = "Integer32"
_RcCfmL2TraceReplyVlanId_Object = MibTableColumn
rcCfmL2TraceReplyVlanId = _RcCfmL2TraceReplyVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 1),
    _RcCfmL2TraceReplyVlanId_Type()
)
rcCfmL2TraceReplyVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyVlanId.setStatus("current")


class _RcCfmL2TraceReplySeqNumber_Type(Integer32):
    """Custom type rcCfmL2TraceReplySeqNumber based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcCfmL2TraceReplySeqNumber_Type.__name__ = "Integer32"
_RcCfmL2TraceReplySeqNumber_Object = MibTableColumn
rcCfmL2TraceReplySeqNumber = _RcCfmL2TraceReplySeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 2),
    _RcCfmL2TraceReplySeqNumber_Type()
)
rcCfmL2TraceReplySeqNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplySeqNumber.setStatus("current")


class _RcCfmL2TraceReplyHop_Type(Integer32):
    """Custom type rcCfmL2TraceReplyHop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmL2TraceReplyHop_Type.__name__ = "Integer32"
_RcCfmL2TraceReplyHop_Object = MibTableColumn
rcCfmL2TraceReplyHop = _RcCfmL2TraceReplyHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 3),
    _RcCfmL2TraceReplyHop_Type()
)
rcCfmL2TraceReplyHop.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyHop.setStatus("current")


class _RcCfmL2TraceReplyReceiveOrder_Type(Integer32):
    """Custom type rcCfmL2TraceReplyReceiveOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcCfmL2TraceReplyReceiveOrder_Type.__name__ = "Integer32"
_RcCfmL2TraceReplyReceiveOrder_Object = MibTableColumn
rcCfmL2TraceReplyReceiveOrder = _RcCfmL2TraceReplyReceiveOrder_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 4),
    _RcCfmL2TraceReplyReceiveOrder_Type()
)
rcCfmL2TraceReplyReceiveOrder.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyReceiveOrder.setStatus("current")


class _RcCfmL2TraceReplyTtl_Type(Integer32):
    """Custom type rcCfmL2TraceReplyTtl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmL2TraceReplyTtl_Type.__name__ = "Integer32"
_RcCfmL2TraceReplyTtl_Object = MibTableColumn
rcCfmL2TraceReplyTtl = _RcCfmL2TraceReplyTtl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 5),
    _RcCfmL2TraceReplyTtl_Type()
)
rcCfmL2TraceReplyTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyTtl.setStatus("current")
_RcCfmL2TraceReplySrcMac_Type = MacAddress
_RcCfmL2TraceReplySrcMac_Object = MibTableColumn
rcCfmL2TraceReplySrcMac = _RcCfmL2TraceReplySrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 6),
    _RcCfmL2TraceReplySrcMac_Type()
)
rcCfmL2TraceReplySrcMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplySrcMac.setStatus("current")


class _RcCfmL2TraceReplyHostName_Type(OctetString):
    """Custom type rcCfmL2TraceReplyHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcCfmL2TraceReplyHostName_Type.__name__ = "OctetString"
_RcCfmL2TraceReplyHostName_Object = MibTableColumn
rcCfmL2TraceReplyHostName = _RcCfmL2TraceReplyHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 7),
    _RcCfmL2TraceReplyHostName_Type()
)
rcCfmL2TraceReplyHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyHostName.setStatus("current")
_RcCfmL2TraceReplyLastSrcMac_Type = MacAddress
_RcCfmL2TraceReplyLastSrcMac_Object = MibTableColumn
rcCfmL2TraceReplyLastSrcMac = _RcCfmL2TraceReplyLastSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 8),
    _RcCfmL2TraceReplyLastSrcMac_Type()
)
rcCfmL2TraceReplyLastSrcMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyLastSrcMac.setStatus("current")


class _RcCfmL2TraceReplyLastHostName_Type(OctetString):
    """Custom type rcCfmL2TraceReplyLastHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcCfmL2TraceReplyLastHostName_Type.__name__ = "OctetString"
_RcCfmL2TraceReplyLastHostName_Object = MibTableColumn
rcCfmL2TraceReplyLastHostName = _RcCfmL2TraceReplyLastHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 36, 1, 9),
    _RcCfmL2TraceReplyLastHostName_Type()
)
rcCfmL2TraceReplyLastHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2TraceReplyLastHostName.setStatus("current")
_RcCfmTransmitL2IpPingTable_Object = MibTable
rcCfmTransmitL2IpPingTable = _RcCfmTransmitL2IpPingTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37)
)
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingTable.setStatus("current")
_RcCfmTransmitL2IpPingEntry_Object = MibTableRow
rcCfmTransmitL2IpPingEntry = _RcCfmTransmitL2IpPingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1)
)
rcCfmTransmitL2IpPingEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmTransmitL2IpPingIpAddrType"),
    (0, "RAPID-CITY", "rcCfmTransmitL2IpPingIpAddr"),
)
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingEntry.setStatus("current")
_RcCfmTransmitL2IpPingIpAddrType_Type = InetAddressType
_RcCfmTransmitL2IpPingIpAddrType_Object = MibTableColumn
rcCfmTransmitL2IpPingIpAddrType = _RcCfmTransmitL2IpPingIpAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 1),
    _RcCfmTransmitL2IpPingIpAddrType_Type()
)
rcCfmTransmitL2IpPingIpAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingIpAddrType.setStatus("current")
_RcCfmTransmitL2IpPingIpAddr_Type = InetAddress
_RcCfmTransmitL2IpPingIpAddr_Object = MibTableColumn
rcCfmTransmitL2IpPingIpAddr = _RcCfmTransmitL2IpPingIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 2),
    _RcCfmTransmitL2IpPingIpAddr_Type()
)
rcCfmTransmitL2IpPingIpAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingIpAddr.setStatus("current")
_RcCfmTransmitL2IpPingVrfId_Type = Integer32
_RcCfmTransmitL2IpPingVrfId_Object = MibTableColumn
rcCfmTransmitL2IpPingVrfId = _RcCfmTransmitL2IpPingVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 3),
    _RcCfmTransmitL2IpPingVrfId_Type()
)
rcCfmTransmitL2IpPingVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingVrfId.setStatus("current")


class _RcCfmTransmitL2IpPingVrfName_Type(DisplayString):
    """Custom type rcCfmTransmitL2IpPingVrfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcCfmTransmitL2IpPingVrfName_Type.__name__ = "DisplayString"
_RcCfmTransmitL2IpPingVrfName_Object = MibTableColumn
rcCfmTransmitL2IpPingVrfName = _RcCfmTransmitL2IpPingVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 4),
    _RcCfmTransmitL2IpPingVrfName_Type()
)
rcCfmTransmitL2IpPingVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingVrfName.setStatus("current")


class _RcCfmTransmitL2IpPingMessages_Type(Integer32):
    """Custom type rcCfmTransmitL2IpPingMessages based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_RcCfmTransmitL2IpPingMessages_Type.__name__ = "Integer32"
_RcCfmTransmitL2IpPingMessages_Object = MibTableColumn
rcCfmTransmitL2IpPingMessages = _RcCfmTransmitL2IpPingMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 5),
    _RcCfmTransmitL2IpPingMessages_Type()
)
rcCfmTransmitL2IpPingMessages.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingMessages.setStatus("current")


class _RcCfmTransmitL2IpPingTimeoutInt_Type(Integer32):
    """Custom type rcCfmTransmitL2IpPingTimeoutInt based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcCfmTransmitL2IpPingTimeoutInt_Type.__name__ = "Integer32"
_RcCfmTransmitL2IpPingTimeoutInt_Object = MibTableColumn
rcCfmTransmitL2IpPingTimeoutInt = _RcCfmTransmitL2IpPingTimeoutInt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 6),
    _RcCfmTransmitL2IpPingTimeoutInt_Type()
)
rcCfmTransmitL2IpPingTimeoutInt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingTimeoutInt.setStatus("current")


class _RcCfmTransmitL2IpPingTestPattern_Type(Integer32):
    """Custom type rcCfmTransmitL2IpPingTestPattern based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("allZero", 1),
          ("allZeroCrc", 2),
          ("pseudoRandomBitSequence", 3),
          ("pseudoRandomBitSequenceCrc", 4))
    )


_RcCfmTransmitL2IpPingTestPattern_Type.__name__ = "Integer32"
_RcCfmTransmitL2IpPingTestPattern_Object = MibTableColumn
rcCfmTransmitL2IpPingTestPattern = _RcCfmTransmitL2IpPingTestPattern_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 7),
    _RcCfmTransmitL2IpPingTestPattern_Type()
)
rcCfmTransmitL2IpPingTestPattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingTestPattern.setStatus("current")


class _RcCfmTransmitL2IpPingDataSize_Type(Integer32):
    """Custom type rcCfmTransmitL2IpPingDataSize based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 400),
    )


_RcCfmTransmitL2IpPingDataSize_Type.__name__ = "Integer32"
_RcCfmTransmitL2IpPingDataSize_Object = MibTableColumn
rcCfmTransmitL2IpPingDataSize = _RcCfmTransmitL2IpPingDataSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 8),
    _RcCfmTransmitL2IpPingDataSize_Type()
)
rcCfmTransmitL2IpPingDataSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingDataSize.setStatus("current")


class _RcCfmTransmitL2IpPingStatus_Type(Integer32):
    """Custom type rcCfmTransmitL2IpPingStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abort", 3),
          ("ready", 1),
          ("transmit", 2))
    )


_RcCfmTransmitL2IpPingStatus_Type.__name__ = "Integer32"
_RcCfmTransmitL2IpPingStatus_Object = MibTableColumn
rcCfmTransmitL2IpPingStatus = _RcCfmTransmitL2IpPingStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 9),
    _RcCfmTransmitL2IpPingStatus_Type()
)
rcCfmTransmitL2IpPingStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingStatus.setStatus("current")


class _RcCfmTransmitL2IpPingResultOk_Type(TruthValue):
    """Custom type rcCfmTransmitL2IpPingResultOk based on TruthValue"""


_RcCfmTransmitL2IpPingResultOk_Object = MibTableColumn
rcCfmTransmitL2IpPingResultOk = _RcCfmTransmitL2IpPingResultOk_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 10),
    _RcCfmTransmitL2IpPingResultOk_Type()
)
rcCfmTransmitL2IpPingResultOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingResultOk.setStatus("current")


class _RcCfmTransmitL2IpPingPathsFound_Type(Integer32):
    """Custom type rcCfmTransmitL2IpPingPathsFound based on Integer32"""
    defaultValue = 0


_RcCfmTransmitL2IpPingPathsFound_Object = MibTableColumn
rcCfmTransmitL2IpPingPathsFound = _RcCfmTransmitL2IpPingPathsFound_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 11),
    _RcCfmTransmitL2IpPingPathsFound_Type()
)
rcCfmTransmitL2IpPingPathsFound.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingPathsFound.setStatus("current")
_RcCfmTransmitL2IpPingRowStatus_Type = RowStatus
_RcCfmTransmitL2IpPingRowStatus_Object = MibTableColumn
rcCfmTransmitL2IpPingRowStatus = _RcCfmTransmitL2IpPingRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 37, 1, 12),
    _RcCfmTransmitL2IpPingRowStatus_Type()
)
rcCfmTransmitL2IpPingRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpPingRowStatus.setStatus("current")
_RcCfmL2IpPingReplyTable_Object = MibTable
rcCfmL2IpPingReplyTable = _RcCfmL2IpPingReplyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38)
)
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyTable.setStatus("current")
_RcCfmL2IpPingReplyEntry_Object = MibTableRow
rcCfmL2IpPingReplyEntry = _RcCfmL2IpPingReplyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1)
)
rcCfmL2IpPingReplyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmL2IpPingReplyIpAddrType"),
    (0, "RAPID-CITY", "rcCfmL2IpPingReplyIpAddr"),
    (0, "RAPID-CITY", "rcCfmL2IpPingReplySendOrder"),
)
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyEntry.setStatus("current")
_RcCfmL2IpPingReplyIpAddrType_Type = InetAddressType
_RcCfmL2IpPingReplyIpAddrType_Object = MibTableColumn
rcCfmL2IpPingReplyIpAddrType = _RcCfmL2IpPingReplyIpAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 1),
    _RcCfmL2IpPingReplyIpAddrType_Type()
)
rcCfmL2IpPingReplyIpAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyIpAddrType.setStatus("current")
_RcCfmL2IpPingReplyIpAddr_Type = InetAddress
_RcCfmL2IpPingReplyIpAddr_Object = MibTableColumn
rcCfmL2IpPingReplyIpAddr = _RcCfmL2IpPingReplyIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 2),
    _RcCfmL2IpPingReplyIpAddr_Type()
)
rcCfmL2IpPingReplyIpAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyIpAddr.setStatus("current")


class _RcCfmL2IpPingReplySendOrder_Type(Integer32):
    """Custom type rcCfmL2IpPingReplySendOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcCfmL2IpPingReplySendOrder_Type.__name__ = "Integer32"
_RcCfmL2IpPingReplySendOrder_Object = MibTableColumn
rcCfmL2IpPingReplySendOrder = _RcCfmL2IpPingReplySendOrder_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 3),
    _RcCfmL2IpPingReplySendOrder_Type()
)
rcCfmL2IpPingReplySendOrder.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplySendOrder.setStatus("current")
_RcCfmL2IpPingReplyVrfId_Type = Integer32
_RcCfmL2IpPingReplyVrfId_Object = MibTableColumn
rcCfmL2IpPingReplyVrfId = _RcCfmL2IpPingReplyVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 4),
    _RcCfmL2IpPingReplyVrfId_Type()
)
rcCfmL2IpPingReplyVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyVrfId.setStatus("current")


class _RcCfmL2IpPingReplyVlanId_Type(Integer32):
    """Custom type rcCfmL2IpPingReplyVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcCfmL2IpPingReplyVlanId_Type.__name__ = "Integer32"
_RcCfmL2IpPingReplyVlanId_Object = MibTableColumn
rcCfmL2IpPingReplyVlanId = _RcCfmL2IpPingReplyVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 5),
    _RcCfmL2IpPingReplyVlanId_Type()
)
rcCfmL2IpPingReplyVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyVlanId.setStatus("current")
_RcCfmL2IpPingReplyDestMacAddress_Type = MacAddress
_RcCfmL2IpPingReplyDestMacAddress_Object = MibTableColumn
rcCfmL2IpPingReplyDestMacAddress = _RcCfmL2IpPingReplyDestMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 6),
    _RcCfmL2IpPingReplyDestMacAddress_Type()
)
rcCfmL2IpPingReplyDestMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyDestMacAddress.setStatus("current")
_RcCfmL2IpPingReplyPortNum_Type = InterfaceIndex
_RcCfmL2IpPingReplyPortNum_Object = MibTableColumn
rcCfmL2IpPingReplyPortNum = _RcCfmL2IpPingReplyPortNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 7),
    _RcCfmL2IpPingReplyPortNum_Type()
)
rcCfmL2IpPingReplyPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyPortNum.setStatus("current")


class _RcCfmL2IpPingReplyDestHostName_Type(OctetString):
    """Custom type rcCfmL2IpPingReplyDestHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcCfmL2IpPingReplyDestHostName_Type.__name__ = "OctetString"
_RcCfmL2IpPingReplyDestHostName_Object = MibTableColumn
rcCfmL2IpPingReplyDestHostName = _RcCfmL2IpPingReplyDestHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 8),
    _RcCfmL2IpPingReplyDestHostName_Type()
)
rcCfmL2IpPingReplyDestHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyDestHostName.setStatus("current")


class _RcCfmL2IpPingReplySize_Type(Integer32):
    """Custom type rcCfmL2IpPingReplySize based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9600),
    )


_RcCfmL2IpPingReplySize_Type.__name__ = "Integer32"
_RcCfmL2IpPingReplySize_Object = MibTableColumn
rcCfmL2IpPingReplySize = _RcCfmL2IpPingReplySize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 9),
    _RcCfmL2IpPingReplySize_Type()
)
rcCfmL2IpPingReplySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplySize.setStatus("current")
_RcCfmL2IpPingReplyPktsTx_Type = Integer32
_RcCfmL2IpPingReplyPktsTx_Object = MibTableColumn
rcCfmL2IpPingReplyPktsTx = _RcCfmL2IpPingReplyPktsTx_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 10),
    _RcCfmL2IpPingReplyPktsTx_Type()
)
rcCfmL2IpPingReplyPktsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyPktsTx.setStatus("current")
_RcCfmL2IpPingReplyPktsRx_Type = Integer32
_RcCfmL2IpPingReplyPktsRx_Object = MibTableColumn
rcCfmL2IpPingReplyPktsRx = _RcCfmL2IpPingReplyPktsRx_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 11),
    _RcCfmL2IpPingReplyPktsRx_Type()
)
rcCfmL2IpPingReplyPktsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyPktsRx.setStatus("current")


class _RcCfmL2IpPingReplyPercentLossWhole_Type(Integer32):
    """Custom type rcCfmL2IpPingReplyPercentLossWhole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RcCfmL2IpPingReplyPercentLossWhole_Type.__name__ = "Integer32"
_RcCfmL2IpPingReplyPercentLossWhole_Object = MibTableColumn
rcCfmL2IpPingReplyPercentLossWhole = _RcCfmL2IpPingReplyPercentLossWhole_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 12),
    _RcCfmL2IpPingReplyPercentLossWhole_Type()
)
rcCfmL2IpPingReplyPercentLossWhole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyPercentLossWhole.setStatus("current")


class _RcCfmL2IpPingReplyPercentLossFract_Type(Integer32):
    """Custom type rcCfmL2IpPingReplyPercentLossFract based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RcCfmL2IpPingReplyPercentLossFract_Type.__name__ = "Integer32"
_RcCfmL2IpPingReplyPercentLossFract_Object = MibTableColumn
rcCfmL2IpPingReplyPercentLossFract = _RcCfmL2IpPingReplyPercentLossFract_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 13),
    _RcCfmL2IpPingReplyPercentLossFract_Type()
)
rcCfmL2IpPingReplyPercentLossFract.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyPercentLossFract.setStatus("current")
_RcCfmL2IpPingReplyMinRoundTrip_Type = Integer32
_RcCfmL2IpPingReplyMinRoundTrip_Object = MibTableColumn
rcCfmL2IpPingReplyMinRoundTrip = _RcCfmL2IpPingReplyMinRoundTrip_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 14),
    _RcCfmL2IpPingReplyMinRoundTrip_Type()
)
rcCfmL2IpPingReplyMinRoundTrip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyMinRoundTrip.setStatus("current")
_RcCfmL2IpPingReplyMaxRoundTrip_Type = Integer32
_RcCfmL2IpPingReplyMaxRoundTrip_Object = MibTableColumn
rcCfmL2IpPingReplyMaxRoundTrip = _RcCfmL2IpPingReplyMaxRoundTrip_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 15),
    _RcCfmL2IpPingReplyMaxRoundTrip_Type()
)
rcCfmL2IpPingReplyMaxRoundTrip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyMaxRoundTrip.setStatus("current")
_RcCfmL2IpPingReplyRttAvgWhole_Type = Integer32
_RcCfmL2IpPingReplyRttAvgWhole_Object = MibTableColumn
rcCfmL2IpPingReplyRttAvgWhole = _RcCfmL2IpPingReplyRttAvgWhole_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 16),
    _RcCfmL2IpPingReplyRttAvgWhole_Type()
)
rcCfmL2IpPingReplyRttAvgWhole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyRttAvgWhole.setStatus("current")
_RcCfmL2IpPingReplyRttAvgFract_Type = Integer32
_RcCfmL2IpPingReplyRttAvgFract_Object = MibTableColumn
rcCfmL2IpPingReplyRttAvgFract = _RcCfmL2IpPingReplyRttAvgFract_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 17),
    _RcCfmL2IpPingReplyRttAvgFract_Type()
)
rcCfmL2IpPingReplyRttAvgFract.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyRttAvgFract.setStatus("current")


class _RcCfmL2IpPingReplyFlag_Type(Integer32):
    """Custom type rcCfmL2IpPingReplyFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("internalError", 2),
          ("invalidMA", 6),
          ("invalidMD", 5),
          ("invalidMac", 3),
          ("l2PingComplete", 10),
          ("l2PingToOwnMepMac", 9),
          ("mepDisabled", 4),
          ("noMepFound", 7),
          ("none", 1),
          ("unknownServiceInstance", 8))
    )


_RcCfmL2IpPingReplyFlag_Type.__name__ = "Integer32"
_RcCfmL2IpPingReplyFlag_Object = MibTableColumn
rcCfmL2IpPingReplyFlag = _RcCfmL2IpPingReplyFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 38, 1, 18),
    _RcCfmL2IpPingReplyFlag_Type()
)
rcCfmL2IpPingReplyFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpPingReplyFlag.setStatus("current")
_RcCfmTransmitL2IpTraceTable_Object = MibTable
rcCfmTransmitL2IpTraceTable = _RcCfmTransmitL2IpTraceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39)
)
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceTable.setStatus("current")
_RcCfmTransmitL2IpTraceEntry_Object = MibTableRow
rcCfmTransmitL2IpTraceEntry = _RcCfmTransmitL2IpTraceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1)
)
rcCfmTransmitL2IpTraceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmTransmitL2IpTraceIpAddrType"),
    (0, "RAPID-CITY", "rcCfmTransmitL2IpTraceIpAddr"),
)
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceEntry.setStatus("current")
_RcCfmTransmitL2IpTraceIpAddrType_Type = InetAddressType
_RcCfmTransmitL2IpTraceIpAddrType_Object = MibTableColumn
rcCfmTransmitL2IpTraceIpAddrType = _RcCfmTransmitL2IpTraceIpAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 1),
    _RcCfmTransmitL2IpTraceIpAddrType_Type()
)
rcCfmTransmitL2IpTraceIpAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceIpAddrType.setStatus("current")
_RcCfmTransmitL2IpTraceIpAddr_Type = InetAddress
_RcCfmTransmitL2IpTraceIpAddr_Object = MibTableColumn
rcCfmTransmitL2IpTraceIpAddr = _RcCfmTransmitL2IpTraceIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 2),
    _RcCfmTransmitL2IpTraceIpAddr_Type()
)
rcCfmTransmitL2IpTraceIpAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceIpAddr.setStatus("current")
_RcCfmTransmitL2IpTraceVrfId_Type = Integer32
_RcCfmTransmitL2IpTraceVrfId_Object = MibTableColumn
rcCfmTransmitL2IpTraceVrfId = _RcCfmTransmitL2IpTraceVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 3),
    _RcCfmTransmitL2IpTraceVrfId_Type()
)
rcCfmTransmitL2IpTraceVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceVrfId.setStatus("current")


class _RcCfmTransmitL2IpTraceVrfName_Type(DisplayString):
    """Custom type rcCfmTransmitL2IpTraceVrfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcCfmTransmitL2IpTraceVrfName_Type.__name__ = "DisplayString"
_RcCfmTransmitL2IpTraceVrfName_Object = MibTableColumn
rcCfmTransmitL2IpTraceVrfName = _RcCfmTransmitL2IpTraceVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 4),
    _RcCfmTransmitL2IpTraceVrfName_Type()
)
rcCfmTransmitL2IpTraceVrfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceVrfName.setStatus("current")


class _RcCfmTransmitL2IpTraceTtl_Type(Integer32):
    """Custom type rcCfmTransmitL2IpTraceTtl based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmTransmitL2IpTraceTtl_Type.__name__ = "Integer32"
_RcCfmTransmitL2IpTraceTtl_Object = MibTableColumn
rcCfmTransmitL2IpTraceTtl = _RcCfmTransmitL2IpTraceTtl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 5),
    _RcCfmTransmitL2IpTraceTtl_Type()
)
rcCfmTransmitL2IpTraceTtl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceTtl.setStatus("current")


class _RcCfmTransmitL2IpTraceStatus_Type(Integer32):
    """Custom type rcCfmTransmitL2IpTraceStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abort", 3),
          ("ready", 1),
          ("transmit", 2))
    )


_RcCfmTransmitL2IpTraceStatus_Type.__name__ = "Integer32"
_RcCfmTransmitL2IpTraceStatus_Object = MibTableColumn
rcCfmTransmitL2IpTraceStatus = _RcCfmTransmitL2IpTraceStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 6),
    _RcCfmTransmitL2IpTraceStatus_Type()
)
rcCfmTransmitL2IpTraceStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceStatus.setStatus("current")


class _RcCfmTransmitL2IpTraceResultOk_Type(TruthValue):
    """Custom type rcCfmTransmitL2IpTraceResultOk based on TruthValue"""


_RcCfmTransmitL2IpTraceResultOk_Object = MibTableColumn
rcCfmTransmitL2IpTraceResultOk = _RcCfmTransmitL2IpTraceResultOk_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 7),
    _RcCfmTransmitL2IpTraceResultOk_Type()
)
rcCfmTransmitL2IpTraceResultOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceResultOk.setStatus("current")


class _RcCfmTransmitL2IpTracePathsFound_Type(Integer32):
    """Custom type rcCfmTransmitL2IpTracePathsFound based on Integer32"""
    defaultValue = 0


_RcCfmTransmitL2IpTracePathsFound_Object = MibTableColumn
rcCfmTransmitL2IpTracePathsFound = _RcCfmTransmitL2IpTracePathsFound_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 8),
    _RcCfmTransmitL2IpTracePathsFound_Type()
)
rcCfmTransmitL2IpTracePathsFound.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTracePathsFound.setStatus("current")
_RcCfmTransmitL2IpTraceRowStatus_Type = RowStatus
_RcCfmTransmitL2IpTraceRowStatus_Object = MibTableColumn
rcCfmTransmitL2IpTraceRowStatus = _RcCfmTransmitL2IpTraceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 39, 1, 9),
    _RcCfmTransmitL2IpTraceRowStatus_Type()
)
rcCfmTransmitL2IpTraceRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcCfmTransmitL2IpTraceRowStatus.setStatus("current")
_RcCfmL2IpTraceReplyTable_Object = MibTable
rcCfmL2IpTraceReplyTable = _RcCfmL2IpTraceReplyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40)
)
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyTable.setStatus("current")
_RcCfmL2IpTraceReplyEntry_Object = MibTableRow
rcCfmL2IpTraceReplyEntry = _RcCfmL2IpTraceReplyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1)
)
rcCfmL2IpTraceReplyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcCfmL2IpTraceReplyIpAddrType"),
    (0, "RAPID-CITY", "rcCfmL2IpTraceReplyIpAddr"),
    (0, "RAPID-CITY", "rcCfmL2IpTraceReplySendOrder"),
    (0, "RAPID-CITY", "rcCfmL2IpTraceReplyHop"),
    (0, "RAPID-CITY", "rcCfmL2IpTraceReplyReceiveOrder"),
)
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyEntry.setStatus("current")
_RcCfmL2IpTraceReplyIpAddrType_Type = InetAddressType
_RcCfmL2IpTraceReplyIpAddrType_Object = MibTableColumn
rcCfmL2IpTraceReplyIpAddrType = _RcCfmL2IpTraceReplyIpAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 1),
    _RcCfmL2IpTraceReplyIpAddrType_Type()
)
rcCfmL2IpTraceReplyIpAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyIpAddrType.setStatus("current")
_RcCfmL2IpTraceReplyIpAddr_Type = InetAddress
_RcCfmL2IpTraceReplyIpAddr_Object = MibTableColumn
rcCfmL2IpTraceReplyIpAddr = _RcCfmL2IpTraceReplyIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 2),
    _RcCfmL2IpTraceReplyIpAddr_Type()
)
rcCfmL2IpTraceReplyIpAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyIpAddr.setStatus("current")


class _RcCfmL2IpTraceReplySendOrder_Type(Integer32):
    """Custom type rcCfmL2IpTraceReplySendOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcCfmL2IpTraceReplySendOrder_Type.__name__ = "Integer32"
_RcCfmL2IpTraceReplySendOrder_Object = MibTableColumn
rcCfmL2IpTraceReplySendOrder = _RcCfmL2IpTraceReplySendOrder_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 3),
    _RcCfmL2IpTraceReplySendOrder_Type()
)
rcCfmL2IpTraceReplySendOrder.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplySendOrder.setStatus("current")


class _RcCfmL2IpTraceReplyHop_Type(Integer32):
    """Custom type rcCfmL2IpTraceReplyHop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmL2IpTraceReplyHop_Type.__name__ = "Integer32"
_RcCfmL2IpTraceReplyHop_Object = MibTableColumn
rcCfmL2IpTraceReplyHop = _RcCfmL2IpTraceReplyHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 4),
    _RcCfmL2IpTraceReplyHop_Type()
)
rcCfmL2IpTraceReplyHop.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyHop.setStatus("current")


class _RcCfmL2IpTraceReplyReceiveOrder_Type(Integer32):
    """Custom type rcCfmL2IpTraceReplyReceiveOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcCfmL2IpTraceReplyReceiveOrder_Type.__name__ = "Integer32"
_RcCfmL2IpTraceReplyReceiveOrder_Object = MibTableColumn
rcCfmL2IpTraceReplyReceiveOrder = _RcCfmL2IpTraceReplyReceiveOrder_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 5),
    _RcCfmL2IpTraceReplyReceiveOrder_Type()
)
rcCfmL2IpTraceReplyReceiveOrder.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyReceiveOrder.setStatus("current")


class _RcCfmL2IpTraceReplyTtl_Type(Integer32):
    """Custom type rcCfmL2IpTraceReplyTtl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcCfmL2IpTraceReplyTtl_Type.__name__ = "Integer32"
_RcCfmL2IpTraceReplyTtl_Object = MibTableColumn
rcCfmL2IpTraceReplyTtl = _RcCfmL2IpTraceReplyTtl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 6),
    _RcCfmL2IpTraceReplyTtl_Type()
)
rcCfmL2IpTraceReplyTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyTtl.setStatus("current")
_RcCfmL2IpTraceReplyVrfId_Type = Integer32
_RcCfmL2IpTraceReplyVrfId_Object = MibTableColumn
rcCfmL2IpTraceReplyVrfId = _RcCfmL2IpTraceReplyVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 7),
    _RcCfmL2IpTraceReplyVrfId_Type()
)
rcCfmL2IpTraceReplyVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyVrfId.setStatus("current")


class _RcCfmL2IpTraceReplyVlanId_Type(Integer32):
    """Custom type rcCfmL2IpTraceReplyVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcCfmL2IpTraceReplyVlanId_Type.__name__ = "Integer32"
_RcCfmL2IpTraceReplyVlanId_Object = MibTableColumn
rcCfmL2IpTraceReplyVlanId = _RcCfmL2IpTraceReplyVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 8),
    _RcCfmL2IpTraceReplyVlanId_Type()
)
rcCfmL2IpTraceReplyVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyVlanId.setStatus("current")
_RcCfmL2IpTraceReplyDestMacAddress_Type = MacAddress
_RcCfmL2IpTraceReplyDestMacAddress_Object = MibTableColumn
rcCfmL2IpTraceReplyDestMacAddress = _RcCfmL2IpTraceReplyDestMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 9),
    _RcCfmL2IpTraceReplyDestMacAddress_Type()
)
rcCfmL2IpTraceReplyDestMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyDestMacAddress.setStatus("current")


class _RcCfmL2IpTraceReplySeqNumber_Type(Integer32):
    """Custom type rcCfmL2IpTraceReplySeqNumber based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcCfmL2IpTraceReplySeqNumber_Type.__name__ = "Integer32"
_RcCfmL2IpTraceReplySeqNumber_Object = MibTableColumn
rcCfmL2IpTraceReplySeqNumber = _RcCfmL2IpTraceReplySeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 10),
    _RcCfmL2IpTraceReplySeqNumber_Type()
)
rcCfmL2IpTraceReplySeqNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplySeqNumber.setStatus("current")
_RcCfmL2IpTraceReplyPortNum_Type = InterfaceIndex
_RcCfmL2IpTraceReplyPortNum_Object = MibTableColumn
rcCfmL2IpTraceReplyPortNum = _RcCfmL2IpTraceReplyPortNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 11),
    _RcCfmL2IpTraceReplyPortNum_Type()
)
rcCfmL2IpTraceReplyPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyPortNum.setStatus("current")
_RcCfmL2IpTraceReplySrcMac_Type = MacAddress
_RcCfmL2IpTraceReplySrcMac_Object = MibTableColumn
rcCfmL2IpTraceReplySrcMac = _RcCfmL2IpTraceReplySrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 12),
    _RcCfmL2IpTraceReplySrcMac_Type()
)
rcCfmL2IpTraceReplySrcMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplySrcMac.setStatus("current")


class _RcCfmL2IpTraceReplyHostName_Type(OctetString):
    """Custom type rcCfmL2IpTraceReplyHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcCfmL2IpTraceReplyHostName_Type.__name__ = "OctetString"
_RcCfmL2IpTraceReplyHostName_Object = MibTableColumn
rcCfmL2IpTraceReplyHostName = _RcCfmL2IpTraceReplyHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 13),
    _RcCfmL2IpTraceReplyHostName_Type()
)
rcCfmL2IpTraceReplyHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyHostName.setStatus("current")
_RcCfmL2IpTraceReplyLastSrcMac_Type = MacAddress
_RcCfmL2IpTraceReplyLastSrcMac_Object = MibTableColumn
rcCfmL2IpTraceReplyLastSrcMac = _RcCfmL2IpTraceReplyLastSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 14),
    _RcCfmL2IpTraceReplyLastSrcMac_Type()
)
rcCfmL2IpTraceReplyLastSrcMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyLastSrcMac.setStatus("current")


class _RcCfmL2IpTraceReplyLastHostName_Type(OctetString):
    """Custom type rcCfmL2IpTraceReplyLastHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RcCfmL2IpTraceReplyLastHostName_Type.__name__ = "OctetString"
_RcCfmL2IpTraceReplyLastHostName_Object = MibTableColumn
rcCfmL2IpTraceReplyLastHostName = _RcCfmL2IpTraceReplyLastHostName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 15),
    _RcCfmL2IpTraceReplyLastHostName_Type()
)
rcCfmL2IpTraceReplyLastHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyLastHostName.setStatus("current")


class _RcCfmL2IpTraceReplyFlag_Type(Integer32):
    """Custom type rcCfmL2IpTraceReplyFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("internalError", 2),
          ("invalidMac", 3),
          ("l2TraceComplete", 7),
          ("l2TraceLookupFailure", 8),
          ("l2TraceToOwnMepMac", 6),
          ("mepDisabled", 4),
          ("noL2TraceResponse", 5),
          ("none", 1))
    )


_RcCfmL2IpTraceReplyFlag_Type.__name__ = "Integer32"
_RcCfmL2IpTraceReplyFlag_Object = MibTableColumn
rcCfmL2IpTraceReplyFlag = _RcCfmL2IpTraceReplyFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 69, 40, 1, 16),
    _RcCfmL2IpTraceReplyFlag_Type()
)
rcCfmL2IpTraceReplyFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCfmL2IpTraceReplyFlag.setStatus("current")
_RcPlugOptMod_ObjectIdentity = ObjectIdentity
rcPlugOptMod = _RcPlugOptMod_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71)
)
_RcPlugOptModTable_Object = MibTable
rcPlugOptModTable = _RcPlugOptModTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1)
)
if mibBuilder.loadTexts:
    rcPlugOptModTable.setStatus("current")
_RcPlugOptModEntry_Object = MibTableRow
rcPlugOptModEntry = _RcPlugOptModEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1)
)
rcPlugOptModEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPlugOptModPortIndex"),
)
if mibBuilder.loadTexts:
    rcPlugOptModEntry.setStatus("current")
_RcPlugOptModPortIndex_Type = InterfaceIndex
_RcPlugOptModPortIndex_Object = MibTableColumn
rcPlugOptModPortIndex = _RcPlugOptModPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 1),
    _RcPlugOptModPortIndex_Type()
)
rcPlugOptModPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcPlugOptModPortIndex.setStatus("current")


class _RcPlugOptModDdmStatusMask_Type(Bits):
    """Custom type rcPlugOptModDdmStatusMask based on Bits"""
    namedValues = NamedValues(
        *(("ddm-calibration-error", 4),
          ("ddm-checksum-error", 1),
          ("ddm-i2c-read-error", 2),
          ("ddm-ok", 0),
          ("ddm-threshold-error", 3))
    )

_RcPlugOptModDdmStatusMask_Type.__name__ = "Bits"
_RcPlugOptModDdmStatusMask_Object = MibTableColumn
rcPlugOptModDdmStatusMask = _RcPlugOptModDdmStatusMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 2),
    _RcPlugOptModDdmStatusMask_Type()
)
rcPlugOptModDdmStatusMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModDdmStatusMask.setStatus("current")


class _RcPlugOptModCalibration_Type(Integer32):
    """Custom type rcPlugOptModCalibration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("external", 2),
          ("internal", 1))
    )


_RcPlugOptModCalibration_Type.__name__ = "Integer32"
_RcPlugOptModCalibration_Object = MibTableColumn
rcPlugOptModCalibration = _RcPlugOptModCalibration_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 3),
    _RcPlugOptModCalibration_Type()
)
rcPlugOptModCalibration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModCalibration.setStatus("current")


class _RcPlugOptModPowerMeasure_Type(Integer32):
    """Custom type rcPlugOptModPowerMeasure based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("average", 2),
          ("omi", 1))
    )


_RcPlugOptModPowerMeasure_Type.__name__ = "Integer32"
_RcPlugOptModPowerMeasure_Object = MibTableColumn
rcPlugOptModPowerMeasure = _RcPlugOptModPowerMeasure_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 4),
    _RcPlugOptModPowerMeasure_Type()
)
rcPlugOptModPowerMeasure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModPowerMeasure.setStatus("current")


class _RcPlugOptModConnectorType_Type(DisplayString):
    """Custom type rcPlugOptModConnectorType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RcPlugOptModConnectorType_Type.__name__ = "DisplayString"
_RcPlugOptModConnectorType_Object = MibTableColumn
rcPlugOptModConnectorType = _RcPlugOptModConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 5),
    _RcPlugOptModConnectorType_Type()
)
rcPlugOptModConnectorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModConnectorType.setStatus("current")


class _RcPlugOptModVendorName_Type(DisplayString):
    """Custom type rcPlugOptModVendorName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RcPlugOptModVendorName_Type.__name__ = "DisplayString"
_RcPlugOptModVendorName_Object = MibTableColumn
rcPlugOptModVendorName = _RcPlugOptModVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 6),
    _RcPlugOptModVendorName_Type()
)
rcPlugOptModVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVendorName.setStatus("current")


class _RcPlugOptModVendorPartNumber_Type(DisplayString):
    """Custom type rcPlugOptModVendorPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RcPlugOptModVendorPartNumber_Type.__name__ = "DisplayString"
_RcPlugOptModVendorPartNumber_Object = MibTableColumn
rcPlugOptModVendorPartNumber = _RcPlugOptModVendorPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 7),
    _RcPlugOptModVendorPartNumber_Type()
)
rcPlugOptModVendorPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVendorPartNumber.setStatus("current")


class _RcPlugOptModVendorRevNumber_Type(DisplayString):
    """Custom type rcPlugOptModVendorRevNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_RcPlugOptModVendorRevNumber_Type.__name__ = "DisplayString"
_RcPlugOptModVendorRevNumber_Object = MibTableColumn
rcPlugOptModVendorRevNumber = _RcPlugOptModVendorRevNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 8),
    _RcPlugOptModVendorRevNumber_Type()
)
rcPlugOptModVendorRevNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVendorRevNumber.setStatus("current")


class _RcPlugOptModVendorSN_Type(DisplayString):
    """Custom type rcPlugOptModVendorSN based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RcPlugOptModVendorSN_Type.__name__ = "DisplayString"
_RcPlugOptModVendorSN_Object = MibTableColumn
rcPlugOptModVendorSN = _RcPlugOptModVendorSN_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 9),
    _RcPlugOptModVendorSN_Type()
)
rcPlugOptModVendorSN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVendorSN.setStatus("current")


class _RcPlugOptModVendorDateCode_Type(DisplayString):
    """Custom type rcPlugOptModVendorDateCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(9, 9),
    )


_RcPlugOptModVendorDateCode_Type.__name__ = "DisplayString"
_RcPlugOptModVendorDateCode_Object = MibTableColumn
rcPlugOptModVendorDateCode = _RcPlugOptModVendorDateCode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 10),
    _RcPlugOptModVendorDateCode_Type()
)
rcPlugOptModVendorDateCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVendorDateCode.setStatus("current")


class _RcPlugOptModPEC_Type(DisplayString):
    """Custom type rcPlugOptModPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RcPlugOptModPEC_Type.__name__ = "DisplayString"
_RcPlugOptModPEC_Object = MibTableColumn
rcPlugOptModPEC = _RcPlugOptModPEC_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 11),
    _RcPlugOptModPEC_Type()
)
rcPlugOptModPEC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModPEC.setStatus("current")


class _RcPlugOptModCLEI_Type(DisplayString):
    """Custom type rcPlugOptModCLEI based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(11, 11),
    )


_RcPlugOptModCLEI_Type.__name__ = "DisplayString"
_RcPlugOptModCLEI_Object = MibTableColumn
rcPlugOptModCLEI = _RcPlugOptModCLEI_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 12),
    _RcPlugOptModCLEI_Type()
)
rcPlugOptModCLEI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModCLEI.setStatus("current")
_RcPlugOptModSupportsDDM_Type = TruthValue
_RcPlugOptModSupportsDDM_Object = MibTableColumn
rcPlugOptModSupportsDDM = _RcPlugOptModSupportsDDM_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 13),
    _RcPlugOptModSupportsDDM_Type()
)
rcPlugOptModSupportsDDM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModSupportsDDM.setStatus("current")


class _RcPlugOptModAux1Monitoring_Type(Integer32):
    """Custom type rcPlugOptModAux1Monitoring based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RcPlugOptModAux1Monitoring_Type.__name__ = "Integer32"
_RcPlugOptModAux1Monitoring_Object = MibTableColumn
rcPlugOptModAux1Monitoring = _RcPlugOptModAux1Monitoring_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 14),
    _RcPlugOptModAux1Monitoring_Type()
)
rcPlugOptModAux1Monitoring.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux1Monitoring.setStatus("current")


class _RcPlugOptModAux2Monitoring_Type(Integer32):
    """Custom type rcPlugOptModAux2Monitoring based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RcPlugOptModAux2Monitoring_Type.__name__ = "Integer32"
_RcPlugOptModAux2Monitoring_Object = MibTableColumn
rcPlugOptModAux2Monitoring = _RcPlugOptModAux2Monitoring_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 15),
    _RcPlugOptModAux2Monitoring_Type()
)
rcPlugOptModAux2Monitoring.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux2Monitoring.setStatus("current")


class _RcPlugOptModWaveLength_Type(Integer32):
    """Custom type rcPlugOptModWaveLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcPlugOptModWaveLength_Type.__name__ = "Integer32"
_RcPlugOptModWaveLength_Object = MibTableColumn
rcPlugOptModWaveLength = _RcPlugOptModWaveLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 16),
    _RcPlugOptModWaveLength_Type()
)
rcPlugOptModWaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModWaveLength.setStatus("current")
_RcPlugOptModTemperature_Type = Integer32
_RcPlugOptModTemperature_Object = MibTableColumn
rcPlugOptModTemperature = _RcPlugOptModTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 17),
    _RcPlugOptModTemperature_Type()
)
rcPlugOptModTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTemperature.setStatus("current")
_RcPlugOptModTemperatureHighAlarmThreshold_Type = Integer32
_RcPlugOptModTemperatureHighAlarmThreshold_Object = MibTableColumn
rcPlugOptModTemperatureHighAlarmThreshold = _RcPlugOptModTemperatureHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 18),
    _RcPlugOptModTemperatureHighAlarmThreshold_Type()
)
rcPlugOptModTemperatureHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTemperatureHighAlarmThreshold.setStatus("current")
_RcPlugOptModTemperatureLowAlarmThreshold_Type = Integer32
_RcPlugOptModTemperatureLowAlarmThreshold_Object = MibTableColumn
rcPlugOptModTemperatureLowAlarmThreshold = _RcPlugOptModTemperatureLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 19),
    _RcPlugOptModTemperatureLowAlarmThreshold_Type()
)
rcPlugOptModTemperatureLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTemperatureLowAlarmThreshold.setStatus("current")
_RcPlugOptModTemperatureHighWarningThreshold_Type = Integer32
_RcPlugOptModTemperatureHighWarningThreshold_Object = MibTableColumn
rcPlugOptModTemperatureHighWarningThreshold = _RcPlugOptModTemperatureHighWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 20),
    _RcPlugOptModTemperatureHighWarningThreshold_Type()
)
rcPlugOptModTemperatureHighWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTemperatureHighWarningThreshold.setStatus("current")
_RcPlugOptModTemperatureLowWarningThreshold_Type = Integer32
_RcPlugOptModTemperatureLowWarningThreshold_Object = MibTableColumn
rcPlugOptModTemperatureLowWarningThreshold = _RcPlugOptModTemperatureLowWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 21),
    _RcPlugOptModTemperatureLowWarningThreshold_Type()
)
rcPlugOptModTemperatureLowWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTemperatureLowWarningThreshold.setStatus("current")
_RcPlugOptModVoltage_Type = Integer32
_RcPlugOptModVoltage_Object = MibTableColumn
rcPlugOptModVoltage = _RcPlugOptModVoltage_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 22),
    _RcPlugOptModVoltage_Type()
)
rcPlugOptModVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVoltage.setStatus("current")
_RcPlugOptModVoltageHighAlarmThreshold_Type = Integer32
_RcPlugOptModVoltageHighAlarmThreshold_Object = MibTableColumn
rcPlugOptModVoltageHighAlarmThreshold = _RcPlugOptModVoltageHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 23),
    _RcPlugOptModVoltageHighAlarmThreshold_Type()
)
rcPlugOptModVoltageHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVoltageHighAlarmThreshold.setStatus("current")
_RcPlugOptModVoltageLowAlarmThreshold_Type = Integer32
_RcPlugOptModVoltageLowAlarmThreshold_Object = MibTableColumn
rcPlugOptModVoltageLowAlarmThreshold = _RcPlugOptModVoltageLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 24),
    _RcPlugOptModVoltageLowAlarmThreshold_Type()
)
rcPlugOptModVoltageLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVoltageLowAlarmThreshold.setStatus("current")
_RcPlugOptModVoltageHighWarningThreshold_Type = Integer32
_RcPlugOptModVoltageHighWarningThreshold_Object = MibTableColumn
rcPlugOptModVoltageHighWarningThreshold = _RcPlugOptModVoltageHighWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 25),
    _RcPlugOptModVoltageHighWarningThreshold_Type()
)
rcPlugOptModVoltageHighWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVoltageHighWarningThreshold.setStatus("current")
_RcPlugOptModVoltageLowWarningThreshold_Type = Integer32
_RcPlugOptModVoltageLowWarningThreshold_Object = MibTableColumn
rcPlugOptModVoltageLowWarningThreshold = _RcPlugOptModVoltageLowWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 26),
    _RcPlugOptModVoltageLowWarningThreshold_Type()
)
rcPlugOptModVoltageLowWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVoltageLowWarningThreshold.setStatus("current")
_RcPlugOptModBias_Type = Integer32
_RcPlugOptModBias_Object = MibTableColumn
rcPlugOptModBias = _RcPlugOptModBias_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 27),
    _RcPlugOptModBias_Type()
)
rcPlugOptModBias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModBias.setStatus("current")
_RcPlugOptModBiasHighAlarmThreshold_Type = Integer32
_RcPlugOptModBiasHighAlarmThreshold_Object = MibTableColumn
rcPlugOptModBiasHighAlarmThreshold = _RcPlugOptModBiasHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 28),
    _RcPlugOptModBiasHighAlarmThreshold_Type()
)
rcPlugOptModBiasHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModBiasHighAlarmThreshold.setStatus("current")
_RcPlugOptModBiasLowAlarmThreshold_Type = Integer32
_RcPlugOptModBiasLowAlarmThreshold_Object = MibTableColumn
rcPlugOptModBiasLowAlarmThreshold = _RcPlugOptModBiasLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 29),
    _RcPlugOptModBiasLowAlarmThreshold_Type()
)
rcPlugOptModBiasLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModBiasLowAlarmThreshold.setStatus("current")
_RcPlugOptModBiasHighWarningThreshold_Type = Integer32
_RcPlugOptModBiasHighWarningThreshold_Object = MibTableColumn
rcPlugOptModBiasHighWarningThreshold = _RcPlugOptModBiasHighWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 30),
    _RcPlugOptModBiasHighWarningThreshold_Type()
)
rcPlugOptModBiasHighWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModBiasHighWarningThreshold.setStatus("current")
_RcPlugOptModBiasLowWarningThreshold_Type = Integer32
_RcPlugOptModBiasLowWarningThreshold_Object = MibTableColumn
rcPlugOptModBiasLowWarningThreshold = _RcPlugOptModBiasLowWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 31),
    _RcPlugOptModBiasLowWarningThreshold_Type()
)
rcPlugOptModBiasLowWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModBiasLowWarningThreshold.setStatus("current")
_RcPlugOptModTxPower_Type = Integer32
_RcPlugOptModTxPower_Object = MibTableColumn
rcPlugOptModTxPower = _RcPlugOptModTxPower_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 32),
    _RcPlugOptModTxPower_Type()
)
rcPlugOptModTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTxPower.setStatus("current")
_RcPlugOptModTxPowerHighAlarmThreshold_Type = Integer32
_RcPlugOptModTxPowerHighAlarmThreshold_Object = MibTableColumn
rcPlugOptModTxPowerHighAlarmThreshold = _RcPlugOptModTxPowerHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 33),
    _RcPlugOptModTxPowerHighAlarmThreshold_Type()
)
rcPlugOptModTxPowerHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTxPowerHighAlarmThreshold.setStatus("current")
_RcPlugOptModTxPowerLowAlarmThreshold_Type = Integer32
_RcPlugOptModTxPowerLowAlarmThreshold_Object = MibTableColumn
rcPlugOptModTxPowerLowAlarmThreshold = _RcPlugOptModTxPowerLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 34),
    _RcPlugOptModTxPowerLowAlarmThreshold_Type()
)
rcPlugOptModTxPowerLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTxPowerLowAlarmThreshold.setStatus("current")
_RcPlugOptModTxPowerHighWarningThreshold_Type = Integer32
_RcPlugOptModTxPowerHighWarningThreshold_Object = MibTableColumn
rcPlugOptModTxPowerHighWarningThreshold = _RcPlugOptModTxPowerHighWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 35),
    _RcPlugOptModTxPowerHighWarningThreshold_Type()
)
rcPlugOptModTxPowerHighWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTxPowerHighWarningThreshold.setStatus("current")
_RcPlugOptModTxPowerLowWarningThreshold_Type = Integer32
_RcPlugOptModTxPowerLowWarningThreshold_Object = MibTableColumn
rcPlugOptModTxPowerLowWarningThreshold = _RcPlugOptModTxPowerLowWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 36),
    _RcPlugOptModTxPowerLowWarningThreshold_Type()
)
rcPlugOptModTxPowerLowWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTxPowerLowWarningThreshold.setStatus("current")
_RcPlugOptModRxPower_Type = Integer32
_RcPlugOptModRxPower_Object = MibTableColumn
rcPlugOptModRxPower = _RcPlugOptModRxPower_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 37),
    _RcPlugOptModRxPower_Type()
)
rcPlugOptModRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModRxPower.setStatus("current")
_RcPlugOptModRxPowerHighAlarmThreshold_Type = Integer32
_RcPlugOptModRxPowerHighAlarmThreshold_Object = MibTableColumn
rcPlugOptModRxPowerHighAlarmThreshold = _RcPlugOptModRxPowerHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 38),
    _RcPlugOptModRxPowerHighAlarmThreshold_Type()
)
rcPlugOptModRxPowerHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModRxPowerHighAlarmThreshold.setStatus("current")
_RcPlugOptModRxPowerLowAlarmThreshold_Type = Integer32
_RcPlugOptModRxPowerLowAlarmThreshold_Object = MibTableColumn
rcPlugOptModRxPowerLowAlarmThreshold = _RcPlugOptModRxPowerLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 39),
    _RcPlugOptModRxPowerLowAlarmThreshold_Type()
)
rcPlugOptModRxPowerLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModRxPowerLowAlarmThreshold.setStatus("current")
_RcPlugOptModRxPowerHighWarningThreshold_Type = Integer32
_RcPlugOptModRxPowerHighWarningThreshold_Object = MibTableColumn
rcPlugOptModRxPowerHighWarningThreshold = _RcPlugOptModRxPowerHighWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 40),
    _RcPlugOptModRxPowerHighWarningThreshold_Type()
)
rcPlugOptModRxPowerHighWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModRxPowerHighWarningThreshold.setStatus("current")
_RcPlugOptModRxPowerLowWarningThreshold_Type = Integer32
_RcPlugOptModRxPowerLowWarningThreshold_Object = MibTableColumn
rcPlugOptModRxPowerLowWarningThreshold = _RcPlugOptModRxPowerLowWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 41),
    _RcPlugOptModRxPowerLowWarningThreshold_Type()
)
rcPlugOptModRxPowerLowWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModRxPowerLowWarningThreshold.setStatus("current")
_RcPlugOptModAux1_Type = Integer32
_RcPlugOptModAux1_Object = MibTableColumn
rcPlugOptModAux1 = _RcPlugOptModAux1_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 42),
    _RcPlugOptModAux1_Type()
)
rcPlugOptModAux1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux1.setStatus("current")
_RcPlugOptModAux1HighAlarmThreshold_Type = Integer32
_RcPlugOptModAux1HighAlarmThreshold_Object = MibTableColumn
rcPlugOptModAux1HighAlarmThreshold = _RcPlugOptModAux1HighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 43),
    _RcPlugOptModAux1HighAlarmThreshold_Type()
)
rcPlugOptModAux1HighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux1HighAlarmThreshold.setStatus("current")
_RcPlugOptModAux1LowAlarmThreshold_Type = Integer32
_RcPlugOptModAux1LowAlarmThreshold_Object = MibTableColumn
rcPlugOptModAux1LowAlarmThreshold = _RcPlugOptModAux1LowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 44),
    _RcPlugOptModAux1LowAlarmThreshold_Type()
)
rcPlugOptModAux1LowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux1LowAlarmThreshold.setStatus("current")
_RcPlugOptModAux1HighWarningThreshold_Type = Integer32
_RcPlugOptModAux1HighWarningThreshold_Object = MibTableColumn
rcPlugOptModAux1HighWarningThreshold = _RcPlugOptModAux1HighWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 45),
    _RcPlugOptModAux1HighWarningThreshold_Type()
)
rcPlugOptModAux1HighWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux1HighWarningThreshold.setStatus("current")
_RcPlugOptModAux1LowWarningThreshold_Type = Integer32
_RcPlugOptModAux1LowWarningThreshold_Object = MibTableColumn
rcPlugOptModAux1LowWarningThreshold = _RcPlugOptModAux1LowWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 46),
    _RcPlugOptModAux1LowWarningThreshold_Type()
)
rcPlugOptModAux1LowWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux1LowWarningThreshold.setStatus("current")
_RcPlugOptModAux2_Type = Integer32
_RcPlugOptModAux2_Object = MibTableColumn
rcPlugOptModAux2 = _RcPlugOptModAux2_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 47),
    _RcPlugOptModAux2_Type()
)
rcPlugOptModAux2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux2.setStatus("current")
_RcPlugOptModAux2HighAlarmThreshold_Type = Integer32
_RcPlugOptModAux2HighAlarmThreshold_Object = MibTableColumn
rcPlugOptModAux2HighAlarmThreshold = _RcPlugOptModAux2HighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 48),
    _RcPlugOptModAux2HighAlarmThreshold_Type()
)
rcPlugOptModAux2HighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux2HighAlarmThreshold.setStatus("current")
_RcPlugOptModAux2LowAlarmThreshold_Type = Integer32
_RcPlugOptModAux2LowAlarmThreshold_Object = MibTableColumn
rcPlugOptModAux2LowAlarmThreshold = _RcPlugOptModAux2LowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 49),
    _RcPlugOptModAux2LowAlarmThreshold_Type()
)
rcPlugOptModAux2LowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux2LowAlarmThreshold.setStatus("current")
_RcPlugOptModAux2HighWarningThreshold_Type = Integer32
_RcPlugOptModAux2HighWarningThreshold_Object = MibTableColumn
rcPlugOptModAux2HighWarningThreshold = _RcPlugOptModAux2HighWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 50),
    _RcPlugOptModAux2HighWarningThreshold_Type()
)
rcPlugOptModAux2HighWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux2HighWarningThreshold.setStatus("current")
_RcPlugOptModAux2LowWarningThreshold_Type = Integer32
_RcPlugOptModAux2LowWarningThreshold_Object = MibTableColumn
rcPlugOptModAux2LowWarningThreshold = _RcPlugOptModAux2LowWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 51),
    _RcPlugOptModAux2LowWarningThreshold_Type()
)
rcPlugOptModAux2LowWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux2LowWarningThreshold.setStatus("current")


class _RcPlugOptModTemperatureStatus_Type(Integer32):
    """Custom type rcPlugOptModTemperatureStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("highAlarm", 3),
          ("highWarning", 2),
          ("lowAlarm", 5),
          ("lowWarning", 4),
          ("normal", 1))
    )


_RcPlugOptModTemperatureStatus_Type.__name__ = "Integer32"
_RcPlugOptModTemperatureStatus_Object = MibTableColumn
rcPlugOptModTemperatureStatus = _RcPlugOptModTemperatureStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 52),
    _RcPlugOptModTemperatureStatus_Type()
)
rcPlugOptModTemperatureStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTemperatureStatus.setStatus("current")


class _RcPlugOptModVoltageStatus_Type(Integer32):
    """Custom type rcPlugOptModVoltageStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("highAlarm", 3),
          ("highWarning", 2),
          ("lowAlarm", 5),
          ("lowWarning", 4),
          ("normal", 1))
    )


_RcPlugOptModVoltageStatus_Type.__name__ = "Integer32"
_RcPlugOptModVoltageStatus_Object = MibTableColumn
rcPlugOptModVoltageStatus = _RcPlugOptModVoltageStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 53),
    _RcPlugOptModVoltageStatus_Type()
)
rcPlugOptModVoltageStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModVoltageStatus.setStatus("current")


class _RcPlugOptModBiasStatus_Type(Integer32):
    """Custom type rcPlugOptModBiasStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("highAlarm", 3),
          ("highWarning", 2),
          ("lowAlarm", 5),
          ("lowWarning", 4),
          ("normal", 1))
    )


_RcPlugOptModBiasStatus_Type.__name__ = "Integer32"
_RcPlugOptModBiasStatus_Object = MibTableColumn
rcPlugOptModBiasStatus = _RcPlugOptModBiasStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 54),
    _RcPlugOptModBiasStatus_Type()
)
rcPlugOptModBiasStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModBiasStatus.setStatus("current")


class _RcPlugOptModTxPowerStatus_Type(Integer32):
    """Custom type rcPlugOptModTxPowerStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("highAlarm", 3),
          ("highWarning", 2),
          ("lowAlarm", 5),
          ("lowWarning", 4),
          ("normal", 1))
    )


_RcPlugOptModTxPowerStatus_Type.__name__ = "Integer32"
_RcPlugOptModTxPowerStatus_Object = MibTableColumn
rcPlugOptModTxPowerStatus = _RcPlugOptModTxPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 55),
    _RcPlugOptModTxPowerStatus_Type()
)
rcPlugOptModTxPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModTxPowerStatus.setStatus("current")


class _RcPlugOptModRxPowerStatus_Type(Integer32):
    """Custom type rcPlugOptModRxPowerStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("highAlarm", 3),
          ("highWarning", 2),
          ("lowAlarm", 5),
          ("lowWarning", 4),
          ("normal", 1))
    )


_RcPlugOptModRxPowerStatus_Type.__name__ = "Integer32"
_RcPlugOptModRxPowerStatus_Object = MibTableColumn
rcPlugOptModRxPowerStatus = _RcPlugOptModRxPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 56),
    _RcPlugOptModRxPowerStatus_Type()
)
rcPlugOptModRxPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModRxPowerStatus.setStatus("current")


class _RcPlugOptModAux1Status_Type(Integer32):
    """Custom type rcPlugOptModAux1Status based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("highAlarm", 3),
          ("highWarning", 2),
          ("lowAlarm", 5),
          ("lowWarning", 4),
          ("normal", 1))
    )


_RcPlugOptModAux1Status_Type.__name__ = "Integer32"
_RcPlugOptModAux1Status_Object = MibTableColumn
rcPlugOptModAux1Status = _RcPlugOptModAux1Status_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 57),
    _RcPlugOptModAux1Status_Type()
)
rcPlugOptModAux1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux1Status.setStatus("current")


class _RcPlugOptModAux2Status_Type(Integer32):
    """Custom type rcPlugOptModAux2Status based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("highAlarm", 3),
          ("highWarning", 2),
          ("lowAlarm", 5),
          ("lowWarning", 4),
          ("normal", 1))
    )


_RcPlugOptModAux2Status_Type.__name__ = "Integer32"
_RcPlugOptModAux2Status_Object = MibTableColumn
rcPlugOptModAux2Status = _RcPlugOptModAux2Status_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 1, 1, 58),
    _RcPlugOptModAux2Status_Type()
)
rcPlugOptModAux2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPlugOptModAux2Status.setStatus("current")
_RcPlugOptModScalars_ObjectIdentity = ObjectIdentity
rcPlugOptModScalars = _RcPlugOptModScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 2)
)


class _RcPlugOptModDdmMonitor_Type(EnableValue):
    """Custom type rcPlugOptModDdmMonitor based on EnableValue"""


_RcPlugOptModDdmMonitor_Object = MibScalar
rcPlugOptModDdmMonitor = _RcPlugOptModDdmMonitor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 2, 1),
    _RcPlugOptModDdmMonitor_Type()
)
rcPlugOptModDdmMonitor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPlugOptModDdmMonitor.setStatus("current")


class _RcPlugOptModDdmMonitorInterval_Type(Integer32):
    """Custom type rcPlugOptModDdmMonitorInterval based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 60),
    )


_RcPlugOptModDdmMonitorInterval_Type.__name__ = "Integer32"
_RcPlugOptModDdmMonitorInterval_Object = MibScalar
rcPlugOptModDdmMonitorInterval = _RcPlugOptModDdmMonitorInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 2, 2),
    _RcPlugOptModDdmMonitorInterval_Type()
)
rcPlugOptModDdmMonitorInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPlugOptModDdmMonitorInterval.setStatus("current")


class _RcPlugOptModDdmTrapSend_Type(EnableValue):
    """Custom type rcPlugOptModDdmTrapSend based on EnableValue"""


_RcPlugOptModDdmTrapSend_Object = MibScalar
rcPlugOptModDdmTrapSend = _RcPlugOptModDdmTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 2, 3),
    _RcPlugOptModDdmTrapSend_Type()
)
rcPlugOptModDdmTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPlugOptModDdmTrapSend.setStatus("current")


class _RcPlugOptModDdmAlarmPortdown_Type(EnableValue):
    """Custom type rcPlugOptModDdmAlarmPortdown based on EnableValue"""


_RcPlugOptModDdmAlarmPortdown_Object = MibScalar
rcPlugOptModDdmAlarmPortdown = _RcPlugOptModDdmAlarmPortdown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 71, 2, 4),
    _RcPlugOptModDdmAlarmPortdown_Type()
)
rcPlugOptModDdmAlarmPortdown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPlugOptModDdmAlarmPortdown.setStatus("current")
_RcVrrp_ObjectIdentity = ObjectIdentity
rcVrrp = _RcVrrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73)
)
_RcVrrpMib_ObjectIdentity = ObjectIdentity
rcVrrpMib = _RcVrrpMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1)
)
_RcVrrpObjects_ObjectIdentity = ObjectIdentity
rcVrrpObjects = _RcVrrpObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1)
)
_RcVrrpScalars_ObjectIdentity = ObjectIdentity
rcVrrpScalars = _RcVrrpScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 1)
)


class _RcVrrpPingVirtualAddrEnable_Type(TruthValue):
    """Custom type rcVrrpPingVirtualAddrEnable based on TruthValue"""


_RcVrrpPingVirtualAddrEnable_Object = MibScalar
rcVrrpPingVirtualAddrEnable = _RcVrrpPingVirtualAddrEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 1, 1),
    _RcVrrpPingVirtualAddrEnable_Type()
)
rcVrrpPingVirtualAddrEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpPingVirtualAddrEnable.setStatus("current")


class _RcVrrpTrapStateTransitionType_Type(Integer32):
    """Custom type rcVrrpTrapStateTransitionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("backupToInitialize", 7),
          ("backupToMaster", 3),
          ("initializeToBackup", 6),
          ("initializeToMaster", 4),
          ("masterToBackup", 2),
          ("masterToInitialize", 5),
          ("none", 1))
    )


_RcVrrpTrapStateTransitionType_Type.__name__ = "Integer32"
_RcVrrpTrapStateTransitionType_Object = MibScalar
rcVrrpTrapStateTransitionType = _RcVrrpTrapStateTransitionType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 1, 2),
    _RcVrrpTrapStateTransitionType_Type()
)
rcVrrpTrapStateTransitionType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTrapStateTransitionType.setStatus("current")


class _RcVrrpTrapStateTransitionCause_Type(Integer32):
    """Custom type rcVrrpTrapStateTransitionCause based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("higherPriorityAdvertizeReceived", 2),
          ("masterDownInterval", 5),
          ("none", 1),
          ("preempted", 6),
          ("rcVrrpAddrAndPhysicalAddrMatch", 4),
          ("shutdownReceived", 3))
    )


_RcVrrpTrapStateTransitionCause_Type.__name__ = "Integer32"
_RcVrrpTrapStateTransitionCause_Object = MibScalar
rcVrrpTrapStateTransitionCause = _RcVrrpTrapStateTransitionCause_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 1, 3),
    _RcVrrpTrapStateTransitionCause_Type()
)
rcVrrpTrapStateTransitionCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTrapStateTransitionCause.setStatus("current")
_RcVrrpOperTable_Object = MibTable
rcVrrpOperTable = _RcVrrpOperTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcVrrpOperTable.setStatus("current")
_RcVrrpOperEntry_Object = MibTableRow
rcVrrpOperEntry = _RcVrrpOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1)
)
rcVrrpOperEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVrrpOperIfIndex"),
    (0, "RAPID-CITY", "rcVrrpOperVrId"),
)
if mibBuilder.loadTexts:
    rcVrrpOperEntry.setStatus("current")
_RcVrrpOperIfIndex_Type = InterfaceIndexOrZero
_RcVrrpOperIfIndex_Object = MibTableColumn
rcVrrpOperIfIndex = _RcVrrpOperIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 1),
    _RcVrrpOperIfIndex_Type()
)
rcVrrpOperIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVrrpOperIfIndex.setStatus("current")
_RcVrrpOperVrId_Type = VrId
_RcVrrpOperVrId_Object = MibTableColumn
rcVrrpOperVrId = _RcVrrpOperVrId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 2),
    _RcVrrpOperVrId_Type()
)
rcVrrpOperVrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperVrId.setStatus("current")
_RcVrrpOperIpAddr_Type = IpAddress
_RcVrrpOperIpAddr_Object = MibTableColumn
rcVrrpOperIpAddr = _RcVrrpOperIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 3),
    _RcVrrpOperIpAddr_Type()
)
rcVrrpOperIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperIpAddr.setStatus("current")
_RcVrrpOperVirtualMacAddr_Type = MacAddress
_RcVrrpOperVirtualMacAddr_Object = MibTableColumn
rcVrrpOperVirtualMacAddr = _RcVrrpOperVirtualMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 4),
    _RcVrrpOperVirtualMacAddr_Type()
)
rcVrrpOperVirtualMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperVirtualMacAddr.setStatus("current")


class _RcVrrpOperState_Type(Integer32):
    """Custom type rcVrrpOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("initialize", 1),
          ("master", 3))
    )


_RcVrrpOperState_Type.__name__ = "Integer32"
_RcVrrpOperState_Object = MibTableColumn
rcVrrpOperState = _RcVrrpOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 5),
    _RcVrrpOperState_Type()
)
rcVrrpOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperState.setStatus("current")


class _RcVrrpOperControl_Type(Integer32):
    """Custom type rcVrrpOperControl based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcVrrpOperControl_Type.__name__ = "Integer32"
_RcVrrpOperControl_Object = MibTableColumn
rcVrrpOperControl = _RcVrrpOperControl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 6),
    _RcVrrpOperControl_Type()
)
rcVrrpOperControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperControl.setStatus("current")


class _RcVrrpOperPriority_Type(Integer32):
    """Custom type rcVrrpOperPriority based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcVrrpOperPriority_Type.__name__ = "Integer32"
_RcVrrpOperPriority_Object = MibTableColumn
rcVrrpOperPriority = _RcVrrpOperPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 7),
    _RcVrrpOperPriority_Type()
)
rcVrrpOperPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperPriority.setStatus("current")


class _RcVrrpOperIpAddrCount_Type(Integer32):
    """Custom type rcVrrpOperIpAddrCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcVrrpOperIpAddrCount_Type.__name__ = "Integer32"
_RcVrrpOperIpAddrCount_Object = MibTableColumn
rcVrrpOperIpAddrCount = _RcVrrpOperIpAddrCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 8),
    _RcVrrpOperIpAddrCount_Type()
)
rcVrrpOperIpAddrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperIpAddrCount.setStatus("current")
_RcVrrpOperMasterIpAddr_Type = IpAddress
_RcVrrpOperMasterIpAddr_Object = MibTableColumn
rcVrrpOperMasterIpAddr = _RcVrrpOperMasterIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 9),
    _RcVrrpOperMasterIpAddr_Type()
)
rcVrrpOperMasterIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperMasterIpAddr.setStatus("current")


class _RcVrrpOperAuthType_Type(Integer32):
    """Custom type rcVrrpOperAuthType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ipAuthenticationHeader", 3),
          ("noAuthentication", 1),
          ("simpleTextPassword", 2))
    )


_RcVrrpOperAuthType_Type.__name__ = "Integer32"
_RcVrrpOperAuthType_Object = MibTableColumn
rcVrrpOperAuthType = _RcVrrpOperAuthType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 10),
    _RcVrrpOperAuthType_Type()
)
rcVrrpOperAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperAuthType.setStatus("current")


class _RcVrrpOperAuthKey_Type(OctetString):
    """Custom type rcVrrpOperAuthKey based on OctetString"""
    defaultHexValue = "0000000000000000"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RcVrrpOperAuthKey_Type.__name__ = "OctetString"
_RcVrrpOperAuthKey_Object = MibTableColumn
rcVrrpOperAuthKey = _RcVrrpOperAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 11),
    _RcVrrpOperAuthKey_Type()
)
rcVrrpOperAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperAuthKey.setStatus("current")


class _RcVrrpOperHMACMD5Key_Type(OctetString):
    """Custom type rcVrrpOperHMACMD5Key based on OctetString"""
    defaultHexValue = "00000000000000000000000000000000"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RcVrrpOperHMACMD5Key_Type.__name__ = "OctetString"
_RcVrrpOperHMACMD5Key_Object = MibTableColumn
rcVrrpOperHMACMD5Key = _RcVrrpOperHMACMD5Key_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 12),
    _RcVrrpOperHMACMD5Key_Type()
)
rcVrrpOperHMACMD5Key.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperHMACMD5Key.setStatus("current")


class _RcVrrpOperAdvertisementInterval_Type(Integer32):
    """Custom type rcVrrpOperAdvertisementInterval based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcVrrpOperAdvertisementInterval_Type.__name__ = "Integer32"
_RcVrrpOperAdvertisementInterval_Object = MibTableColumn
rcVrrpOperAdvertisementInterval = _RcVrrpOperAdvertisementInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 13),
    _RcVrrpOperAdvertisementInterval_Type()
)
rcVrrpOperAdvertisementInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperAdvertisementInterval.setStatus("current")


class _RcVrrpOperPreemptMode_Type(Integer32):
    """Custom type rcVrrpOperPreemptMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_RcVrrpOperPreemptMode_Type.__name__ = "Integer32"
_RcVrrpOperPreemptMode_Object = MibTableColumn
rcVrrpOperPreemptMode = _RcVrrpOperPreemptMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 14),
    _RcVrrpOperPreemptMode_Type()
)
rcVrrpOperPreemptMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperPreemptMode.setStatus("current")
_RcVrrpOperVirtualRouterUpTime_Type = TimeTicks
_RcVrrpOperVirtualRouterUpTime_Object = MibTableColumn
rcVrrpOperVirtualRouterUpTime = _RcVrrpOperVirtualRouterUpTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 15),
    _RcVrrpOperVirtualRouterUpTime_Type()
)
rcVrrpOperVirtualRouterUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperVirtualRouterUpTime.setStatus("current")
_RcVrrpOperRowStatus_Type = RowStatus
_RcVrrpOperRowStatus_Object = MibTableColumn
rcVrrpOperRowStatus = _RcVrrpOperRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 16),
    _RcVrrpOperRowStatus_Type()
)
rcVrrpOperRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperRowStatus.setStatus("current")
_RcVrrpOperCriticalIpAddr_Type = IpAddress
_RcVrrpOperCriticalIpAddr_Object = MibTableColumn
rcVrrpOperCriticalIpAddr = _RcVrrpOperCriticalIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 17),
    _RcVrrpOperCriticalIpAddr_Type()
)
rcVrrpOperCriticalIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperCriticalIpAddr.setStatus("current")


class _RcVrrpOperHoldDownTimer_Type(Integer32):
    """Custom type rcVrrpOperHoldDownTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21600),
    )


_RcVrrpOperHoldDownTimer_Type.__name__ = "Integer32"
_RcVrrpOperHoldDownTimer_Object = MibTableColumn
rcVrrpOperHoldDownTimer = _RcVrrpOperHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 18),
    _RcVrrpOperHoldDownTimer_Type()
)
rcVrrpOperHoldDownTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperHoldDownTimer.setStatus("current")


class _RcVrrpOperHoldDownState_Type(Integer32):
    """Custom type rcVrrpOperHoldDownState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("dormant", 1))
    )


_RcVrrpOperHoldDownState_Type.__name__ = "Integer32"
_RcVrrpOperHoldDownState_Object = MibTableColumn
rcVrrpOperHoldDownState = _RcVrrpOperHoldDownState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 19),
    _RcVrrpOperHoldDownState_Type()
)
rcVrrpOperHoldDownState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperHoldDownState.setStatus("current")


class _RcVrrpOperHoldDownTimeRemaining_Type(Integer32):
    """Custom type rcVrrpOperHoldDownTimeRemaining based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21600),
    )


_RcVrrpOperHoldDownTimeRemaining_Type.__name__ = "Integer32"
_RcVrrpOperHoldDownTimeRemaining_Object = MibTableColumn
rcVrrpOperHoldDownTimeRemaining = _RcVrrpOperHoldDownTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 20),
    _RcVrrpOperHoldDownTimeRemaining_Type()
)
rcVrrpOperHoldDownTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperHoldDownTimeRemaining.setStatus("current")


class _RcVrrpOperAction_Type(Integer32):
    """Custom type rcVrrpOperAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("preemptHoldDownTimer", 2))
    )


_RcVrrpOperAction_Type.__name__ = "Integer32"
_RcVrrpOperAction_Object = MibTableColumn
rcVrrpOperAction = _RcVrrpOperAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 21),
    _RcVrrpOperAction_Type()
)
rcVrrpOperAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperAction.setStatus("current")


class _RcVrrpOperCriticalIpAddrEnable_Type(TruthValue):
    """Custom type rcVrrpOperCriticalIpAddrEnable based on TruthValue"""


_RcVrrpOperCriticalIpAddrEnable_Object = MibTableColumn
rcVrrpOperCriticalIpAddrEnable = _RcVrrpOperCriticalIpAddrEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 22),
    _RcVrrpOperCriticalIpAddrEnable_Type()
)
rcVrrpOperCriticalIpAddrEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperCriticalIpAddrEnable.setStatus("current")


class _RcVrrpOperBackUpMaster_Type(Integer32):
    """Custom type rcVrrpOperBackUpMaster based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcVrrpOperBackUpMaster_Type.__name__ = "Integer32"
_RcVrrpOperBackUpMaster_Object = MibTableColumn
rcVrrpOperBackUpMaster = _RcVrrpOperBackUpMaster_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 23),
    _RcVrrpOperBackUpMaster_Type()
)
rcVrrpOperBackUpMaster.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperBackUpMaster.setStatus("current")


class _RcVrrpOperBackUpMasterState_Type(Integer32):
    """Custom type rcVrrpOperBackUpMasterState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcVrrpOperBackUpMasterState_Type.__name__ = "Integer32"
_RcVrrpOperBackUpMasterState_Object = MibTableColumn
rcVrrpOperBackUpMasterState = _RcVrrpOperBackUpMasterState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 24),
    _RcVrrpOperBackUpMasterState_Type()
)
rcVrrpOperBackUpMasterState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpOperBackUpMasterState.setStatus("current")


class _RcVrrpOperFasterAdvInterval_Type(Integer32):
    """Custom type rcVrrpOperFasterAdvInterval based on Integer32"""
    defaultValue = 200

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 1000),
    )


_RcVrrpOperFasterAdvInterval_Type.__name__ = "Integer32"
_RcVrrpOperFasterAdvInterval_Object = MibTableColumn
rcVrrpOperFasterAdvInterval = _RcVrrpOperFasterAdvInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 25),
    _RcVrrpOperFasterAdvInterval_Type()
)
rcVrrpOperFasterAdvInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperFasterAdvInterval.setStatus("current")


class _RcVrrpOperFasterAdvIntervalEnable_Type(Integer32):
    """Custom type rcVrrpOperFasterAdvIntervalEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcVrrpOperFasterAdvIntervalEnable_Type.__name__ = "Integer32"
_RcVrrpOperFasterAdvIntervalEnable_Object = MibTableColumn
rcVrrpOperFasterAdvIntervalEnable = _RcVrrpOperFasterAdvIntervalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 2, 1, 26),
    _RcVrrpOperFasterAdvIntervalEnable_Type()
)
rcVrrpOperFasterAdvIntervalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpOperFasterAdvIntervalEnable.setStatus("current")
_RcVrrpRouterStatsTable_Object = MibTable
rcVrrpRouterStatsTable = _RcVrrpRouterStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3)
)
if mibBuilder.loadTexts:
    rcVrrpRouterStatsTable.setStatus("current")
_RcVrrpRouterStatsEntry_Object = MibTableRow
rcVrrpRouterStatsEntry = _RcVrrpRouterStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1)
)
if mibBuilder.loadTexts:
    rcVrrpRouterStatsEntry.setStatus("current")
_RcVrrpStatsIfIndex_Type = Integer32
_RcVrrpStatsIfIndex_Object = MibTableColumn
rcVrrpStatsIfIndex = _RcVrrpStatsIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 1),
    _RcVrrpStatsIfIndex_Type()
)
rcVrrpStatsIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsIfIndex.setStatus("current")
_RcVrrpStatsVrId_Type = VrId
_RcVrrpStatsVrId_Object = MibTableColumn
rcVrrpStatsVrId = _RcVrrpStatsVrId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 2),
    _RcVrrpStatsVrId_Type()
)
rcVrrpStatsVrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsVrId.setStatus("current")
_RcVrrpStatsBecomeMaster_Type = Counter32
_RcVrrpStatsBecomeMaster_Object = MibTableColumn
rcVrrpStatsBecomeMaster = _RcVrrpStatsBecomeMaster_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 3),
    _RcVrrpStatsBecomeMaster_Type()
)
rcVrrpStatsBecomeMaster.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsBecomeMaster.setStatus("current")
_RcVrrpStatsAdvertiseRcvd_Type = Counter32
_RcVrrpStatsAdvertiseRcvd_Object = MibTableColumn
rcVrrpStatsAdvertiseRcvd = _RcVrrpStatsAdvertiseRcvd_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 4),
    _RcVrrpStatsAdvertiseRcvd_Type()
)
rcVrrpStatsAdvertiseRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsAdvertiseRcvd.setStatus("current")
_RcVrrpStatsAdvertiseIntervalErrors_Type = Counter32
_RcVrrpStatsAdvertiseIntervalErrors_Object = MibTableColumn
rcVrrpStatsAdvertiseIntervalErrors = _RcVrrpStatsAdvertiseIntervalErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 5),
    _RcVrrpStatsAdvertiseIntervalErrors_Type()
)
rcVrrpStatsAdvertiseIntervalErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsAdvertiseIntervalErrors.setStatus("current")
_RcVrrpStatsPasswdSecurityViolations_Type = Counter32
_RcVrrpStatsPasswdSecurityViolations_Object = MibTableColumn
rcVrrpStatsPasswdSecurityViolations = _RcVrrpStatsPasswdSecurityViolations_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 6),
    _RcVrrpStatsPasswdSecurityViolations_Type()
)
rcVrrpStatsPasswdSecurityViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsPasswdSecurityViolations.setStatus("current")
_RcVrrpStatsHmacSecurityViolations_Type = Counter32
_RcVrrpStatsHmacSecurityViolations_Object = MibTableColumn
rcVrrpStatsHmacSecurityViolations = _RcVrrpStatsHmacSecurityViolations_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 7),
    _RcVrrpStatsHmacSecurityViolations_Type()
)
rcVrrpStatsHmacSecurityViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsHmacSecurityViolations.setStatus("current")
_RcVrrpStatsIpTtlErrors_Type = Counter32
_RcVrrpStatsIpTtlErrors_Object = MibTableColumn
rcVrrpStatsIpTtlErrors = _RcVrrpStatsIpTtlErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 8),
    _RcVrrpStatsIpTtlErrors_Type()
)
rcVrrpStatsIpTtlErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsIpTtlErrors.setStatus("current")
_RcVrrpStatsPriorityZeroPktsRcvd_Type = Counter32
_RcVrrpStatsPriorityZeroPktsRcvd_Object = MibTableColumn
rcVrrpStatsPriorityZeroPktsRcvd = _RcVrrpStatsPriorityZeroPktsRcvd_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 9),
    _RcVrrpStatsPriorityZeroPktsRcvd_Type()
)
rcVrrpStatsPriorityZeroPktsRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsPriorityZeroPktsRcvd.setStatus("current")
_RcVrrpStatsPriorityZeroPktsSent_Type = Counter32
_RcVrrpStatsPriorityZeroPktsSent_Object = MibTableColumn
rcVrrpStatsPriorityZeroPktsSent = _RcVrrpStatsPriorityZeroPktsSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 10),
    _RcVrrpStatsPriorityZeroPktsSent_Type()
)
rcVrrpStatsPriorityZeroPktsSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsPriorityZeroPktsSent.setStatus("current")
_RcVrrpStatsInvalidTypePktsRcvd_Type = Counter32
_RcVrrpStatsInvalidTypePktsRcvd_Object = MibTableColumn
rcVrrpStatsInvalidTypePktsRcvd = _RcVrrpStatsInvalidTypePktsRcvd_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 11),
    _RcVrrpStatsInvalidTypePktsRcvd_Type()
)
rcVrrpStatsInvalidTypePktsRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsInvalidTypePktsRcvd.setStatus("current")
_RcVrrpStatsAddressListErrors_Type = Counter32
_RcVrrpStatsAddressListErrors_Object = MibTableColumn
rcVrrpStatsAddressListErrors = _RcVrrpStatsAddressListErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 12),
    _RcVrrpStatsAddressListErrors_Type()
)
rcVrrpStatsAddressListErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsAddressListErrors.setStatus("current")
_RcVrrpStatsUnknownAuthType_Type = Counter32
_RcVrrpStatsUnknownAuthType_Object = MibTableColumn
rcVrrpStatsUnknownAuthType = _RcVrrpStatsUnknownAuthType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 13),
    _RcVrrpStatsUnknownAuthType_Type()
)
rcVrrpStatsUnknownAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsUnknownAuthType.setStatus("current")
_RcVrrpStatsAuthTypeErrors_Type = Counter32
_RcVrrpStatsAuthTypeErrors_Object = MibTableColumn
rcVrrpStatsAuthTypeErrors = _RcVrrpStatsAuthTypeErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 1, 3, 1, 14),
    _RcVrrpStatsAuthTypeErrors_Type()
)
rcVrrpStatsAuthTypeErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpStatsAuthTypeErrors.setStatus("current")
_RcVrrpNotifications_ObjectIdentity = ObjectIdentity
rcVrrpNotifications = _RcVrrpNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 2)
)
_RcMpls_ObjectIdentity = ObjectIdentity
rcMpls = _RcMpls_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74)
)
_RcMplsMib_ObjectIdentity = ObjectIdentity
rcMplsMib = _RcMplsMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1)
)
_RcMplsNotifications_ObjectIdentity = ObjectIdentity
rcMplsNotifications = _RcMplsNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 0)
)
_RcMplsObjects_ObjectIdentity = ObjectIdentity
rcMplsObjects = _RcMplsObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1)
)
_RcMplsGlobalGroup_ObjectIdentity = ObjectIdentity
rcMplsGlobalGroup = _RcMplsGlobalGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1)
)
_RcMplsGlobalScalars_ObjectIdentity = ObjectIdentity
rcMplsGlobalScalars = _RcMplsGlobalScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1)
)


class _RcMplsRouterId_Type(IpAddress):
    """Custom type rcMplsRouterId based on IpAddress"""
    defaultHexValue = "00000000"


_RcMplsRouterId_Object = MibScalar
rcMplsRouterId = _RcMplsRouterId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 1),
    _RcMplsRouterId_Type()
)
rcMplsRouterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRouterId.setStatus("current")


class _RcMplsLdpAdminStatus_Type(EnableValue):
    """Custom type rcMplsLdpAdminStatus based on EnableValue"""


_RcMplsLdpAdminStatus_Object = MibScalar
rcMplsLdpAdminStatus = _RcMplsLdpAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 2),
    _RcMplsLdpAdminStatus_Type()
)
rcMplsLdpAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpAdminStatus.setStatus("current")


class _RcMplsLdpPenultimateHopPop_Type(Integer32):
    """Custom type rcMplsLdpPenultimateHopPop based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("explicit-null", 2),
          ("implicit-null", 1))
    )


_RcMplsLdpPenultimateHopPop_Type.__name__ = "Integer32"
_RcMplsLdpPenultimateHopPop_Object = MibScalar
rcMplsLdpPenultimateHopPop = _RcMplsLdpPenultimateHopPop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 3),
    _RcMplsLdpPenultimateHopPop_Type()
)
rcMplsLdpPenultimateHopPop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpPenultimateHopPop.setStatus("current")


class _RcMplsLdpHelloHoldTimer_Type(Unsigned32):
    """Custom type rcMplsLdpHelloHoldTimer based on Unsigned32"""
    defaultValue = 15

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 65535),
    )


_RcMplsLdpHelloHoldTimer_Type.__name__ = "Unsigned32"
_RcMplsLdpHelloHoldTimer_Object = MibScalar
rcMplsLdpHelloHoldTimer = _RcMplsLdpHelloHoldTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 4),
    _RcMplsLdpHelloHoldTimer_Type()
)
rcMplsLdpHelloHoldTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpHelloHoldTimer.setStatus("current")
if mibBuilder.loadTexts:
    rcMplsLdpHelloHoldTimer.setUnits("seconds")


class _RcMplsLdpSessionKeepAlive_Type(Unsigned32):
    """Custom type rcMplsLdpSessionKeepAlive based on Unsigned32"""
    defaultValue = 40

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(15, 65535),
    )


_RcMplsLdpSessionKeepAlive_Type.__name__ = "Unsigned32"
_RcMplsLdpSessionKeepAlive_Object = MibScalar
rcMplsLdpSessionKeepAlive = _RcMplsLdpSessionKeepAlive_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 5),
    _RcMplsLdpSessionKeepAlive_Type()
)
rcMplsLdpSessionKeepAlive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpSessionKeepAlive.setStatus("current")
if mibBuilder.loadTexts:
    rcMplsLdpSessionKeepAlive.setUnits("seconds")


class _RcMplsLdpPathVectorLimit_Type(Integer32):
    """Custom type rcMplsLdpPathVectorLimit based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcMplsLdpPathVectorLimit_Type.__name__ = "Integer32"
_RcMplsLdpPathVectorLimit_Object = MibScalar
rcMplsLdpPathVectorLimit = _RcMplsLdpPathVectorLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 6),
    _RcMplsLdpPathVectorLimit_Type()
)
rcMplsLdpPathVectorLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpPathVectorLimit.setStatus("current")


class _RcMplsLdpHopCountLimit_Type(Integer32):
    """Custom type rcMplsLdpHopCountLimit based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcMplsLdpHopCountLimit_Type.__name__ = "Integer32"
_RcMplsLdpHopCountLimit_Object = MibScalar
rcMplsLdpHopCountLimit = _RcMplsLdpHopCountLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 7),
    _RcMplsLdpHopCountLimit_Type()
)
rcMplsLdpHopCountLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpHopCountLimit.setStatus("current")


class _RcMplsLdpEgressPolicyStatus_Type(EnableValue):
    """Custom type rcMplsLdpEgressPolicyStatus based on EnableValue"""


_RcMplsLdpEgressPolicyStatus_Object = MibScalar
rcMplsLdpEgressPolicyStatus = _RcMplsLdpEgressPolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 8),
    _RcMplsLdpEgressPolicyStatus_Type()
)
rcMplsLdpEgressPolicyStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpEgressPolicyStatus.setStatus("current")


class _RcMplsRsvpAdminStatus_Type(EnableValue):
    """Custom type rcMplsRsvpAdminStatus based on EnableValue"""


_RcMplsRsvpAdminStatus_Object = MibScalar
rcMplsRsvpAdminStatus = _RcMplsRsvpAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 9),
    _RcMplsRsvpAdminStatus_Type()
)
rcMplsRsvpAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpAdminStatus.setStatus("current")


class _RcMplsRsvpPenultimateHopPop_Type(Integer32):
    """Custom type rcMplsRsvpPenultimateHopPop based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("explicit-null", 2),
          ("implicit-null", 1))
    )


_RcMplsRsvpPenultimateHopPop_Type.__name__ = "Integer32"
_RcMplsRsvpPenultimateHopPop_Object = MibScalar
rcMplsRsvpPenultimateHopPop = _RcMplsRsvpPenultimateHopPop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 10),
    _RcMplsRsvpPenultimateHopPop_Type()
)
rcMplsRsvpPenultimateHopPop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpPenultimateHopPop.setStatus("current")


class _RcMplsRsvpHelloInterval_Type(Unsigned32):
    """Custom type rcMplsRsvpHelloInterval based on Unsigned32"""
    defaultValue = 10

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcMplsRsvpHelloInterval_Type.__name__ = "Unsigned32"
_RcMplsRsvpHelloInterval_Object = MibScalar
rcMplsRsvpHelloInterval = _RcMplsRsvpHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 11),
    _RcMplsRsvpHelloInterval_Type()
)
rcMplsRsvpHelloInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpHelloInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcMplsRsvpHelloInterval.setUnits("seconds")


class _RcMplsRsvpRefreshReduction_Type(EnableValue):
    """Custom type rcMplsRsvpRefreshReduction based on EnableValue"""


_RcMplsRsvpRefreshReduction_Object = MibScalar
rcMplsRsvpRefreshReduction = _RcMplsRsvpRefreshReduction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 12),
    _RcMplsRsvpRefreshReduction_Type()
)
rcMplsRsvpRefreshReduction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpRefreshReduction.setStatus("current")


class _RcMplsRsvpRefreshInterval_Type(Unsigned32):
    """Custom type rcMplsRsvpRefreshInterval based on Unsigned32"""
    defaultValue = 30

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcMplsRsvpRefreshInterval_Type.__name__ = "Unsigned32"
_RcMplsRsvpRefreshInterval_Object = MibScalar
rcMplsRsvpRefreshInterval = _RcMplsRsvpRefreshInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 13),
    _RcMplsRsvpRefreshInterval_Type()
)
rcMplsRsvpRefreshInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpRefreshInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcMplsRsvpRefreshInterval.setUnits("seconds")


class _RcMplsRsvpRefreshMultiplier_Type(Unsigned32):
    """Custom type rcMplsRsvpRefreshMultiplier based on Unsigned32"""
    defaultValue = 3

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RcMplsRsvpRefreshMultiplier_Type.__name__ = "Unsigned32"
_RcMplsRsvpRefreshMultiplier_Object = MibScalar
rcMplsRsvpRefreshMultiplier = _RcMplsRsvpRefreshMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 14),
    _RcMplsRsvpRefreshMultiplier_Type()
)
rcMplsRsvpRefreshMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpRefreshMultiplier.setStatus("current")
if mibBuilder.loadTexts:
    rcMplsRsvpRefreshMultiplier.setUnits("seconds")


class _RcMplsRsvpMessageBundling_Type(EnableValue):
    """Custom type rcMplsRsvpMessageBundling based on EnableValue"""


_RcMplsRsvpMessageBundling_Object = MibScalar
rcMplsRsvpMessageBundling = _RcMplsRsvpMessageBundling_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 15),
    _RcMplsRsvpMessageBundling_Type()
)
rcMplsRsvpMessageBundling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpMessageBundling.setStatus("current")


class _RcMplsLspIngressStartLabel_Type(Integer32):
    """Custom type rcMplsLspIngressStartLabel based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1048576),
    )


_RcMplsLspIngressStartLabel_Type.__name__ = "Integer32"
_RcMplsLspIngressStartLabel_Object = MibScalar
rcMplsLspIngressStartLabel = _RcMplsLspIngressStartLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 16),
    _RcMplsLspIngressStartLabel_Type()
)
rcMplsLspIngressStartLabel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLspIngressStartLabel.setStatus("current")


class _RcMplsLspEgressStartLabel_Type(Integer32):
    """Custom type rcMplsLspEgressStartLabel based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1048576),
    )


_RcMplsLspEgressStartLabel_Type.__name__ = "Integer32"
_RcMplsLspEgressStartLabel_Object = MibScalar
rcMplsLspEgressStartLabel = _RcMplsLspEgressStartLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 17),
    _RcMplsLspEgressStartLabel_Type()
)
rcMplsLspEgressStartLabel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLspEgressStartLabel.setStatus("current")


class _RcMplsLspIngressPktEnable_Type(TruthValue):
    """Custom type rcMplsLspIngressPktEnable based on TruthValue"""


_RcMplsLspIngressPktEnable_Object = MibScalar
rcMplsLspIngressPktEnable = _RcMplsLspIngressPktEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 18),
    _RcMplsLspIngressPktEnable_Type()
)
rcMplsLspIngressPktEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLspIngressPktEnable.setStatus("current")


class _RcMplsLspEgressPktEnable_Type(TruthValue):
    """Custom type rcMplsLspEgressPktEnable based on TruthValue"""


_RcMplsLspEgressPktEnable_Object = MibScalar
rcMplsLspEgressPktEnable = _RcMplsLspEgressPktEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 19),
    _RcMplsLspEgressPktEnable_Type()
)
rcMplsLspEgressPktEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLspEgressPktEnable.setStatus("current")


class _RcMplsLdpClearStats_Type(TruthValue):
    """Custom type rcMplsLdpClearStats based on TruthValue"""


_RcMplsLdpClearStats_Object = MibScalar
rcMplsLdpClearStats = _RcMplsLdpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 20),
    _RcMplsLdpClearStats_Type()
)
rcMplsLdpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpClearStats.setStatus("current")


class _RcMplsRsvpClearStats_Type(TruthValue):
    """Custom type rcMplsRsvpClearStats based on TruthValue"""


_RcMplsRsvpClearStats_Object = MibScalar
rcMplsRsvpClearStats = _RcMplsRsvpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 21),
    _RcMplsRsvpClearStats_Type()
)
rcMplsRsvpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpClearStats.setStatus("current")


class _RcMplsLspClearStats_Type(Integer32):
    """Custom type rcMplsLspClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("receive", 2),
          ("transmit", 1))
    )


_RcMplsLspClearStats_Type.__name__ = "Integer32"
_RcMplsLspClearStats_Object = MibScalar
rcMplsLspClearStats = _RcMplsLspClearStats_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 1, 22),
    _RcMplsLspClearStats_Type()
)
rcMplsLspClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLspClearStats.setStatus("current")
_RcMplsIpStaticFecTable_Object = MibTable
rcMplsIpStaticFecTable = _RcMplsIpStaticFecTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcMplsIpStaticFecTable.setStatus("current")
_RcMplsIpStaticFecEntry_Object = MibTableRow
rcMplsIpStaticFecEntry = _RcMplsIpStaticFecEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1)
)
rcMplsIpStaticFecEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsIpStaticFecDest"),
    (0, "RAPID-CITY", "rcMplsIpStaticFecMask"),
)
if mibBuilder.loadTexts:
    rcMplsIpStaticFecEntry.setStatus("current")
_RcMplsIpStaticFecDest_Type = IpAddress
_RcMplsIpStaticFecDest_Object = MibTableColumn
rcMplsIpStaticFecDest = _RcMplsIpStaticFecDest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1, 1),
    _RcMplsIpStaticFecDest_Type()
)
rcMplsIpStaticFecDest.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsIpStaticFecDest.setStatus("current")
_RcMplsIpStaticFecMask_Type = IpAddress
_RcMplsIpStaticFecMask_Object = MibTableColumn
rcMplsIpStaticFecMask = _RcMplsIpStaticFecMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1, 2),
    _RcMplsIpStaticFecMask_Type()
)
rcMplsIpStaticFecMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsIpStaticFecMask.setStatus("current")


class _RcMplsIpStaticFecTunnelName_Type(DisplayString):
    """Custom type rcMplsIpStaticFecTunnelName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 33),
    )


_RcMplsIpStaticFecTunnelName_Type.__name__ = "DisplayString"
_RcMplsIpStaticFecTunnelName_Object = MibTableColumn
rcMplsIpStaticFecTunnelName = _RcMplsIpStaticFecTunnelName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1, 3),
    _RcMplsIpStaticFecTunnelName_Type()
)
rcMplsIpStaticFecTunnelName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMplsIpStaticFecTunnelName.setStatus("current")
_RcMplsIpStaticFecTunnelId_Type = MplsTunnelIndex
_RcMplsIpStaticFecTunnelId_Object = MibTableColumn
rcMplsIpStaticFecTunnelId = _RcMplsIpStaticFecTunnelId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1, 4),
    _RcMplsIpStaticFecTunnelId_Type()
)
rcMplsIpStaticFecTunnelId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMplsIpStaticFecTunnelId.setStatus("current")
_RcMplsIpStaticFecEgressAddr_Type = IpAddress
_RcMplsIpStaticFecEgressAddr_Object = MibTableColumn
rcMplsIpStaticFecEgressAddr = _RcMplsIpStaticFecEgressAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1, 5),
    _RcMplsIpStaticFecEgressAddr_Type()
)
rcMplsIpStaticFecEgressAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMplsIpStaticFecEgressAddr.setStatus("current")
_RcMplsIpStaticFecEgressMask_Type = IpAddress
_RcMplsIpStaticFecEgressMask_Object = MibTableColumn
rcMplsIpStaticFecEgressMask = _RcMplsIpStaticFecEgressMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1, 6),
    _RcMplsIpStaticFecEgressMask_Type()
)
rcMplsIpStaticFecEgressMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMplsIpStaticFecEgressMask.setStatus("current")


class _RcMplsIpStaticFecState_Type(Integer32):
    """Custom type rcMplsIpStaticFecState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcMplsIpStaticFecState_Type.__name__ = "Integer32"
_RcMplsIpStaticFecState_Object = MibTableColumn
rcMplsIpStaticFecState = _RcMplsIpStaticFecState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1, 7),
    _RcMplsIpStaticFecState_Type()
)
rcMplsIpStaticFecState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpStaticFecState.setStatus("current")
_RcMplsIpStaticFecRowStatus_Type = RowStatus
_RcMplsIpStaticFecRowStatus_Object = MibTableColumn
rcMplsIpStaticFecRowStatus = _RcMplsIpStaticFecRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 2, 1, 8),
    _RcMplsIpStaticFecRowStatus_Type()
)
rcMplsIpStaticFecRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMplsIpStaticFecRowStatus.setStatus("current")
_RcMplsIpFtnTable_Object = MibTable
rcMplsIpFtnTable = _RcMplsIpFtnTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 3)
)
if mibBuilder.loadTexts:
    rcMplsIpFtnTable.setStatus("current")
_RcMplsIpFtnEntry_Object = MibTableRow
rcMplsIpFtnEntry = _RcMplsIpFtnEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 3, 1)
)
rcMplsIpFtnEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsIpFtnDest"),
    (0, "RAPID-CITY", "rcMplsIpFtnMask"),
)
if mibBuilder.loadTexts:
    rcMplsIpFtnEntry.setStatus("current")
_RcMplsIpFtnDest_Type = IpAddress
_RcMplsIpFtnDest_Object = MibTableColumn
rcMplsIpFtnDest = _RcMplsIpFtnDest_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 3, 1, 1),
    _RcMplsIpFtnDest_Type()
)
rcMplsIpFtnDest.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsIpFtnDest.setStatus("current")
_RcMplsIpFtnMask_Type = IpAddress
_RcMplsIpFtnMask_Object = MibTableColumn
rcMplsIpFtnMask = _RcMplsIpFtnMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 3, 1, 2),
    _RcMplsIpFtnMask_Type()
)
rcMplsIpFtnMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsIpFtnMask.setStatus("current")


class _RcMplsIpFtnType_Type(Integer32):
    """Custom type rcMplsIpFtnType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ldp-dynamic", 3),
          ("ldp-static", 2),
          ("rsvp-static", 1))
    )


_RcMplsIpFtnType_Type.__name__ = "Integer32"
_RcMplsIpFtnType_Object = MibTableColumn
rcMplsIpFtnType = _RcMplsIpFtnType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 3, 1, 3),
    _RcMplsIpFtnType_Type()
)
rcMplsIpFtnType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpFtnType.setStatus("current")
_RcMplsIpFtnOutLabel_Type = MplsLabel
_RcMplsIpFtnOutLabel_Object = MibTableColumn
rcMplsIpFtnOutLabel = _RcMplsIpFtnOutLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 3, 1, 4),
    _RcMplsIpFtnOutLabel_Type()
)
rcMplsIpFtnOutLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpFtnOutLabel.setStatus("current")
_RcMplsIpFtnOutIfIndex_Type = InterfaceIndex
_RcMplsIpFtnOutIfIndex_Object = MibTableColumn
rcMplsIpFtnOutIfIndex = _RcMplsIpFtnOutIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 3, 1, 5),
    _RcMplsIpFtnOutIfIndex_Type()
)
rcMplsIpFtnOutIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpFtnOutIfIndex.setStatus("current")
_RcMplsIpFtnNextHop_Type = IpAddress
_RcMplsIpFtnNextHop_Object = MibTableColumn
rcMplsIpFtnNextHop = _RcMplsIpFtnNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 3, 1, 6),
    _RcMplsIpFtnNextHop_Type()
)
rcMplsIpFtnNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpFtnNextHop.setStatus("current")
_RcMplsIpIlmTable_Object = MibTable
rcMplsIpIlmTable = _RcMplsIpIlmTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 4)
)
if mibBuilder.loadTexts:
    rcMplsIpIlmTable.setStatus("current")
_RcMplsIpIlmEntry_Object = MibTableRow
rcMplsIpIlmEntry = _RcMplsIpIlmEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 4, 1)
)
rcMplsIpIlmEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsIpIlmInLabel"),
)
if mibBuilder.loadTexts:
    rcMplsIpIlmEntry.setStatus("current")
_RcMplsIpIlmInLabel_Type = MplsLabel
_RcMplsIpIlmInLabel_Object = MibTableColumn
rcMplsIpIlmInLabel = _RcMplsIpIlmInLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 4, 1, 1),
    _RcMplsIpIlmInLabel_Type()
)
rcMplsIpIlmInLabel.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsIpIlmInLabel.setStatus("current")
_RcMplsIpIlmInIfIndex_Type = InterfaceIndex
_RcMplsIpIlmInIfIndex_Object = MibTableColumn
rcMplsIpIlmInIfIndex = _RcMplsIpIlmInIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 4, 1, 2),
    _RcMplsIpIlmInIfIndex_Type()
)
rcMplsIpIlmInIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpIlmInIfIndex.setStatus("current")
_RcMplsIpIlmOutLabel_Type = MplsLabel
_RcMplsIpIlmOutLabel_Object = MibTableColumn
rcMplsIpIlmOutLabel = _RcMplsIpIlmOutLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 4, 1, 3),
    _RcMplsIpIlmOutLabel_Type()
)
rcMplsIpIlmOutLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpIlmOutLabel.setStatus("current")
_RcMplsIpIlmOutIfIndex_Type = InterfaceIndex
_RcMplsIpIlmOutIfIndex_Object = MibTableColumn
rcMplsIpIlmOutIfIndex = _RcMplsIpIlmOutIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 4, 1, 4),
    _RcMplsIpIlmOutIfIndex_Type()
)
rcMplsIpIlmOutIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpIlmOutIfIndex.setStatus("current")
_RcMplsIpIlmNextHop_Type = IpAddress
_RcMplsIpIlmNextHop_Object = MibTableColumn
rcMplsIpIlmNextHop = _RcMplsIpIlmNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 4, 1, 5),
    _RcMplsIpIlmNextHop_Type()
)
rcMplsIpIlmNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIpIlmNextHop.setStatus("current")
_RcMplsIngressLspStatTable_Object = MibTable
rcMplsIngressLspStatTable = _RcMplsIngressLspStatTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 5)
)
if mibBuilder.loadTexts:
    rcMplsIngressLspStatTable.setStatus("current")
_RcMplsIngressLspStatEntry_Object = MibTableRow
rcMplsIngressLspStatEntry = _RcMplsIngressLspStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 5, 1)
)
rcMplsIngressLspStatEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsIngressLspPort"),
    (0, "RAPID-CITY", "rcMplsIngressLspLabel"),
)
if mibBuilder.loadTexts:
    rcMplsIngressLspStatEntry.setStatus("current")


class _RcMplsIngressLspPort_Type(Integer32):
    """Custom type rcMplsIngressLspPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 687),
    )


_RcMplsIngressLspPort_Type.__name__ = "Integer32"
_RcMplsIngressLspPort_Object = MibTableColumn
rcMplsIngressLspPort = _RcMplsIngressLspPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 5, 1, 1),
    _RcMplsIngressLspPort_Type()
)
rcMplsIngressLspPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsIngressLspPort.setStatus("current")
_RcMplsIngressLspLabel_Type = MplsLabel
_RcMplsIngressLspLabel_Object = MibTableColumn
rcMplsIngressLspLabel = _RcMplsIngressLspLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 5, 1, 2),
    _RcMplsIngressLspLabel_Type()
)
rcMplsIngressLspLabel.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsIngressLspLabel.setStatus("current")
_RcMplsIngressLspPkts_Type = Counter64
_RcMplsIngressLspPkts_Object = MibTableColumn
rcMplsIngressLspPkts = _RcMplsIngressLspPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 5, 1, 3),
    _RcMplsIngressLspPkts_Type()
)
rcMplsIngressLspPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsIngressLspPkts.setStatus("current")
_RcMplsEgressLspStatTable_Object = MibTable
rcMplsEgressLspStatTable = _RcMplsEgressLspStatTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 6)
)
if mibBuilder.loadTexts:
    rcMplsEgressLspStatTable.setStatus("current")
_RcMplsEgressLspStatEntry_Object = MibTableRow
rcMplsEgressLspStatEntry = _RcMplsEgressLspStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 6, 1)
)
rcMplsEgressLspStatEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsEgressLspPort"),
    (0, "RAPID-CITY", "rcMplsEgressLspLabel"),
)
if mibBuilder.loadTexts:
    rcMplsEgressLspStatEntry.setStatus("current")


class _RcMplsEgressLspPort_Type(Integer32):
    """Custom type rcMplsEgressLspPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 687),
    )


_RcMplsEgressLspPort_Type.__name__ = "Integer32"
_RcMplsEgressLspPort_Object = MibTableColumn
rcMplsEgressLspPort = _RcMplsEgressLspPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 6, 1, 1),
    _RcMplsEgressLspPort_Type()
)
rcMplsEgressLspPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsEgressLspPort.setStatus("current")
_RcMplsEgressLspLabel_Type = MplsLabel
_RcMplsEgressLspLabel_Object = MibTableColumn
rcMplsEgressLspLabel = _RcMplsEgressLspLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 6, 1, 2),
    _RcMplsEgressLspLabel_Type()
)
rcMplsEgressLspLabel.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsEgressLspLabel.setStatus("current")
_RcMplsEgressLspPkts_Type = Counter64
_RcMplsEgressLspPkts_Object = MibTableColumn
rcMplsEgressLspPkts = _RcMplsEgressLspPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 1, 6, 1, 3),
    _RcMplsEgressLspPkts_Type()
)
rcMplsEgressLspPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsEgressLspPkts.setStatus("current")
_RcMplsRsvpGroup_ObjectIdentity = ObjectIdentity
rcMplsRsvpGroup = _RcMplsRsvpGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2)
)
_RcMplsRsvpSummaryGroup_ObjectIdentity = ObjectIdentity
rcMplsRsvpSummaryGroup = _RcMplsRsvpSummaryGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 1)
)
_RcMplsRsvpSummaryVersion_Type = Unsigned32
_RcMplsRsvpSummaryVersion_Object = MibScalar
rcMplsRsvpSummaryVersion = _RcMplsRsvpSummaryVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 1, 1),
    _RcMplsRsvpSummaryVersion_Type()
)
rcMplsRsvpSummaryVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpSummaryVersion.setStatus("current")
_RcMplsRsvpSummaryState_Type = EnableValue
_RcMplsRsvpSummaryState_Object = MibScalar
rcMplsRsvpSummaryState = _RcMplsRsvpSummaryState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 1, 2),
    _RcMplsRsvpSummaryState_Type()
)
rcMplsRsvpSummaryState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpSummaryState.setStatus("current")
_RcMplsRsvpSummaryLSPRetryTimer_Type = Unsigned32
_RcMplsRsvpSummaryLSPRetryTimer_Object = MibScalar
rcMplsRsvpSummaryLSPRetryTimer = _RcMplsRsvpSummaryLSPRetryTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 1, 3),
    _RcMplsRsvpSummaryLSPRetryTimer_Type()
)
rcMplsRsvpSummaryLSPRetryTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpSummaryLSPRetryTimer.setStatus("current")
if mibBuilder.loadTexts:
    rcMplsRsvpSummaryLSPRetryTimer.setUnits("seconds")
_RcMplsRsvpSummaryLSPRetryLimit_Type = Unsigned32
_RcMplsRsvpSummaryLSPRetryLimit_Object = MibScalar
rcMplsRsvpSummaryLSPRetryLimit = _RcMplsRsvpSummaryLSPRetryLimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 1, 4),
    _RcMplsRsvpSummaryLSPRetryLimit_Type()
)
rcMplsRsvpSummaryLSPRetryLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpSummaryLSPRetryLimit.setStatus("current")
_RcMplsRsvpSummaryLSPDecayRate_Type = Unsigned32
_RcMplsRsvpSummaryLSPDecayRate_Object = MibScalar
rcMplsRsvpSummaryLSPDecayRate = _RcMplsRsvpSummaryLSPDecayRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 1, 5),
    _RcMplsRsvpSummaryLSPDecayRate_Type()
)
rcMplsRsvpSummaryLSPDecayRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpSummaryLSPDecayRate.setStatus("current")


class _RcMplsRsvpSummaryPHP_Type(Integer32):
    """Custom type rcMplsRsvpSummaryPHP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("explicit-null", 2),
          ("implicit-null", 1))
    )


_RcMplsRsvpSummaryPHP_Type.__name__ = "Integer32"
_RcMplsRsvpSummaryPHP_Object = MibScalar
rcMplsRsvpSummaryPHP = _RcMplsRsvpSummaryPHP_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 1, 6),
    _RcMplsRsvpSummaryPHP_Type()
)
rcMplsRsvpSummaryPHP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpSummaryPHP.setStatus("current")
_RcMplsRsvpTunnelExtTable_Object = MibTable
rcMplsRsvpTunnelExtTable = _RcMplsRsvpTunnelExtTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2)
)
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtTable.setStatus("current")
_RcMplsRsvpTunnelExtEntry_Object = MibTableRow
rcMplsRsvpTunnelExtEntry = _RcMplsRsvpTunnelExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1)
)
rcMplsRsvpTunnelExtEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsRsvpTunnelExtIndex"),
    (0, "RAPID-CITY", "rcMplsRsvpTunnelExtInstance"),
    (0, "RAPID-CITY", "rcMplsRsvpTunnelExtIngressLSRId"),
    (0, "RAPID-CITY", "rcMplsRsvpTunnelExtEgressLSRId"),
)
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtEntry.setStatus("current")
_RcMplsRsvpTunnelExtIndex_Type = MplsTunnelIndex
_RcMplsRsvpTunnelExtIndex_Object = MibTableColumn
rcMplsRsvpTunnelExtIndex = _RcMplsRsvpTunnelExtIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 1),
    _RcMplsRsvpTunnelExtIndex_Type()
)
rcMplsRsvpTunnelExtIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtIndex.setStatus("current")
_RcMplsRsvpTunnelExtInstance_Type = MplsTunnelInstanceIndex
_RcMplsRsvpTunnelExtInstance_Object = MibTableColumn
rcMplsRsvpTunnelExtInstance = _RcMplsRsvpTunnelExtInstance_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 2),
    _RcMplsRsvpTunnelExtInstance_Type()
)
rcMplsRsvpTunnelExtInstance.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtInstance.setStatus("current")
_RcMplsRsvpTunnelExtIngressLSRId_Type = MplsExtendedTunnelId
_RcMplsRsvpTunnelExtIngressLSRId_Object = MibTableColumn
rcMplsRsvpTunnelExtIngressLSRId = _RcMplsRsvpTunnelExtIngressLSRId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 3),
    _RcMplsRsvpTunnelExtIngressLSRId_Type()
)
rcMplsRsvpTunnelExtIngressLSRId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtIngressLSRId.setStatus("current")
_RcMplsRsvpTunnelExtEgressLSRId_Type = MplsExtendedTunnelId
_RcMplsRsvpTunnelExtEgressLSRId_Object = MibTableColumn
rcMplsRsvpTunnelExtEgressLSRId = _RcMplsRsvpTunnelExtEgressLSRId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 4),
    _RcMplsRsvpTunnelExtEgressLSRId_Type()
)
rcMplsRsvpTunnelExtEgressLSRId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtEgressLSRId.setStatus("current")
_RcMplsRsvpTunnelExtName_Type = SnmpAdminString
_RcMplsRsvpTunnelExtName_Object = MibTableColumn
rcMplsRsvpTunnelExtName = _RcMplsRsvpTunnelExtName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 5),
    _RcMplsRsvpTunnelExtName_Type()
)
rcMplsRsvpTunnelExtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtName.setStatus("current")


class _RcMplsRsvpTunnelExtSwitchover_Type(TruthValue):
    """Custom type rcMplsRsvpTunnelExtSwitchover based on TruthValue"""


_RcMplsRsvpTunnelExtSwitchover_Object = MibTableColumn
rcMplsRsvpTunnelExtSwitchover = _RcMplsRsvpTunnelExtSwitchover_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 6),
    _RcMplsRsvpTunnelExtSwitchover_Type()
)
rcMplsRsvpTunnelExtSwitchover.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtSwitchover.setStatus("current")
_RcMplsRsvpTunnelExtActiveStatus_Type = TruthValue
_RcMplsRsvpTunnelExtActiveStatus_Object = MibTableColumn
rcMplsRsvpTunnelExtActiveStatus = _RcMplsRsvpTunnelExtActiveStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 7),
    _RcMplsRsvpTunnelExtActiveStatus_Type()
)
rcMplsRsvpTunnelExtActiveStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtActiveStatus.setStatus("current")


class _RcMplsRsvpTunnelExtResStyle_Type(SnmpAdminString):
    """Custom type rcMplsRsvpTunnelExtResStyle based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )


_RcMplsRsvpTunnelExtResStyle_Type.__name__ = "SnmpAdminString"
_RcMplsRsvpTunnelExtResStyle_Object = MibTableColumn
rcMplsRsvpTunnelExtResStyle = _RcMplsRsvpTunnelExtResStyle_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 8),
    _RcMplsRsvpTunnelExtResStyle_Type()
)
rcMplsRsvpTunnelExtResStyle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtResStyle.setStatus("current")
_RcMplsRsvpTunnelExtLspId_Type = MplsLSPID
_RcMplsRsvpTunnelExtLspId_Object = MibTableColumn
rcMplsRsvpTunnelExtLspId = _RcMplsRsvpTunnelExtLspId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 9),
    _RcMplsRsvpTunnelExtLspId_Type()
)
rcMplsRsvpTunnelExtLspId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtLspId.setStatus("current")


class _RcMplsRsvpTunnelExtERO_Type(SnmpAdminString):
    """Custom type rcMplsRsvpTunnelExtERO based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(100, 100),
    )


_RcMplsRsvpTunnelExtERO_Type.__name__ = "SnmpAdminString"
_RcMplsRsvpTunnelExtERO_Object = MibTableColumn
rcMplsRsvpTunnelExtERO = _RcMplsRsvpTunnelExtERO_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 10),
    _RcMplsRsvpTunnelExtERO_Type()
)
rcMplsRsvpTunnelExtERO.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtERO.setStatus("current")


class _RcMplsRsvpTunnelExtRRO_Type(SnmpAdminString):
    """Custom type rcMplsRsvpTunnelExtRRO based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(100, 100),
    )


_RcMplsRsvpTunnelExtRRO_Type.__name__ = "SnmpAdminString"
_RcMplsRsvpTunnelExtRRO_Object = MibTableColumn
rcMplsRsvpTunnelExtRRO = _RcMplsRsvpTunnelExtRRO_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 11),
    _RcMplsRsvpTunnelExtRRO_Type()
)
rcMplsRsvpTunnelExtRRO.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtRRO.setStatus("current")
_RcMplsRsvpTunnelExtInIfIndex_Type = InterfaceIndex
_RcMplsRsvpTunnelExtInIfIndex_Object = MibTableColumn
rcMplsRsvpTunnelExtInIfIndex = _RcMplsRsvpTunnelExtInIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 12),
    _RcMplsRsvpTunnelExtInIfIndex_Type()
)
rcMplsRsvpTunnelExtInIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtInIfIndex.setStatus("current")
_RcMplsRsvpTunnelExtInLabel_Type = MplsLabel
_RcMplsRsvpTunnelExtInLabel_Object = MibTableColumn
rcMplsRsvpTunnelExtInLabel = _RcMplsRsvpTunnelExtInLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 13),
    _RcMplsRsvpTunnelExtInLabel_Type()
)
rcMplsRsvpTunnelExtInLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtInLabel.setStatus("current")
_RcMplsRsvpTunnelExtInNeighbor_Type = IpAddress
_RcMplsRsvpTunnelExtInNeighbor_Object = MibTableColumn
rcMplsRsvpTunnelExtInNeighbor = _RcMplsRsvpTunnelExtInNeighbor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 14),
    _RcMplsRsvpTunnelExtInNeighbor_Type()
)
rcMplsRsvpTunnelExtInNeighbor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtInNeighbor.setStatus("current")
_RcMplsRsvpTunnelExtOutIfIndex_Type = InterfaceIndex
_RcMplsRsvpTunnelExtOutIfIndex_Object = MibTableColumn
rcMplsRsvpTunnelExtOutIfIndex = _RcMplsRsvpTunnelExtOutIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 15),
    _RcMplsRsvpTunnelExtOutIfIndex_Type()
)
rcMplsRsvpTunnelExtOutIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtOutIfIndex.setStatus("current")
_RcMplsRsvpTunnelExtOutLabel_Type = MplsLabel
_RcMplsRsvpTunnelExtOutLabel_Object = MibTableColumn
rcMplsRsvpTunnelExtOutLabel = _RcMplsRsvpTunnelExtOutLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 16),
    _RcMplsRsvpTunnelExtOutLabel_Type()
)
rcMplsRsvpTunnelExtOutLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtOutLabel.setStatus("current")
_RcMplsRsvpTunnelExtOutNeighbor_Type = IpAddress
_RcMplsRsvpTunnelExtOutNeighbor_Object = MibTableColumn
rcMplsRsvpTunnelExtOutNeighbor = _RcMplsRsvpTunnelExtOutNeighbor_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 17),
    _RcMplsRsvpTunnelExtOutNeighbor_Type()
)
rcMplsRsvpTunnelExtOutNeighbor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtOutNeighbor.setStatus("current")
_RcMplsRsvpTunnelExtTSpecRate_Type = Unsigned32
_RcMplsRsvpTunnelExtTSpecRate_Object = MibTableColumn
rcMplsRsvpTunnelExtTSpecRate = _RcMplsRsvpTunnelExtTSpecRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 18),
    _RcMplsRsvpTunnelExtTSpecRate_Type()
)
rcMplsRsvpTunnelExtTSpecRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtTSpecRate.setStatus("current")
_RcMplsRsvpTunnelExtTSpecSize_Type = Unsigned32
_RcMplsRsvpTunnelExtTSpecSize_Object = MibTableColumn
rcMplsRsvpTunnelExtTSpecSize = _RcMplsRsvpTunnelExtTSpecSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 19),
    _RcMplsRsvpTunnelExtTSpecSize_Type()
)
rcMplsRsvpTunnelExtTSpecSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtTSpecSize.setStatus("current")
_RcMplsRsvpTunnelExtTSpecPeak_Type = Unsigned32
_RcMplsRsvpTunnelExtTSpecPeak_Object = MibTableColumn
rcMplsRsvpTunnelExtTSpecPeak = _RcMplsRsvpTunnelExtTSpecPeak_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 20),
    _RcMplsRsvpTunnelExtTSpecPeak_Type()
)
rcMplsRsvpTunnelExtTSpecPeak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtTSpecPeak.setStatus("current")
_RcMplsRsvpTunnelExtTSpecMin_Type = Unsigned32
_RcMplsRsvpTunnelExtTSpecMin_Object = MibTableColumn
rcMplsRsvpTunnelExtTSpecMin = _RcMplsRsvpTunnelExtTSpecMin_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 21),
    _RcMplsRsvpTunnelExtTSpecMin_Type()
)
rcMplsRsvpTunnelExtTSpecMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtTSpecMin.setStatus("current")
_RcMplsRsvpTunnelExtTSpecMax_Type = Unsigned32
_RcMplsRsvpTunnelExtTSpecMax_Object = MibTableColumn
rcMplsRsvpTunnelExtTSpecMax = _RcMplsRsvpTunnelExtTSpecMax_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 22),
    _RcMplsRsvpTunnelExtTSpecMax_Type()
)
rcMplsRsvpTunnelExtTSpecMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtTSpecMax.setStatus("current")
_RcMplsRsvpTunnelExtInstanceUpTime_Type = TimeTicks
_RcMplsRsvpTunnelExtInstanceUpTime_Object = MibTableColumn
rcMplsRsvpTunnelExtInstanceUpTime = _RcMplsRsvpTunnelExtInstanceUpTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 23),
    _RcMplsRsvpTunnelExtInstanceUpTime_Type()
)
rcMplsRsvpTunnelExtInstanceUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtInstanceUpTime.setStatus("current")
_RcMplsRsvpTunnelExtLSPUpTime_Type = TimeTicks
_RcMplsRsvpTunnelExtLSPUpTime_Object = MibTableColumn
rcMplsRsvpTunnelExtLSPUpTime = _RcMplsRsvpTunnelExtLSPUpTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 2, 1, 24),
    _RcMplsRsvpTunnelExtLSPUpTime_Type()
)
rcMplsRsvpTunnelExtLSPUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpTunnelExtLSPUpTime.setStatus("current")
_RcMplsRsvpNeighborTable_Object = MibTable
rcMplsRsvpNeighborTable = _RcMplsRsvpNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3)
)
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborTable.setStatus("current")
_RcMplsRsvpNeighborEntry_Object = MibTableRow
rcMplsRsvpNeighborEntry = _RcMplsRsvpNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1)
)
rcMplsRsvpNeighborEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsRsvpNeighborAddress"),
)
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborEntry.setStatus("current")
_RcMplsRsvpNeighborAddress_Type = IpAddress
_RcMplsRsvpNeighborAddress_Object = MibTableColumn
rcMplsRsvpNeighborAddress = _RcMplsRsvpNeighborAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 1),
    _RcMplsRsvpNeighborAddress_Type()
)
rcMplsRsvpNeighborAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborAddress.setStatus("current")


class _RcMplsRsvpNeighborHelloState_Type(SnmpAdminString):
    """Custom type rcMplsRsvpNeighborHelloState based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_RcMplsRsvpNeighborHelloState_Type.__name__ = "SnmpAdminString"
_RcMplsRsvpNeighborHelloState_Object = MibTableColumn
rcMplsRsvpNeighborHelloState = _RcMplsRsvpNeighborHelloState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 2),
    _RcMplsRsvpNeighborHelloState_Type()
)
rcMplsRsvpNeighborHelloState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborHelloState.setStatus("current")
_RcMplsRsvpNeighborIfIndex_Type = InterfaceIndex
_RcMplsRsvpNeighborIfIndex_Object = MibTableColumn
rcMplsRsvpNeighborIfIndex = _RcMplsRsvpNeighborIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 3),
    _RcMplsRsvpNeighborIfIndex_Type()
)
rcMplsRsvpNeighborIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborIfIndex.setStatus("current")
_RcMplsRsvpNeighborTime_Type = Integer32
_RcMplsRsvpNeighborTime_Object = MibTableColumn
rcMplsRsvpNeighborTime = _RcMplsRsvpNeighborTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 4),
    _RcMplsRsvpNeighborTime_Type()
)
rcMplsRsvpNeighborTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborTime.setStatus("current")
_RcMplsRsvpNeighborPeriod_Type = Integer32
_RcMplsRsvpNeighborPeriod_Object = MibTableColumn
rcMplsRsvpNeighborPeriod = _RcMplsRsvpNeighborPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 5),
    _RcMplsRsvpNeighborPeriod_Type()
)
rcMplsRsvpNeighborPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborPeriod.setStatus("current")
_RcMplsRsvpNeighborSendCnt_Type = Integer32
_RcMplsRsvpNeighborSendCnt_Object = MibTableColumn
rcMplsRsvpNeighborSendCnt = _RcMplsRsvpNeighborSendCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 6),
    _RcMplsRsvpNeighborSendCnt_Type()
)
rcMplsRsvpNeighborSendCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborSendCnt.setStatus("current")
_RcMplsRsvpNeighborRcvCnt_Type = Integer32
_RcMplsRsvpNeighborRcvCnt_Object = MibTableColumn
rcMplsRsvpNeighborRcvCnt = _RcMplsRsvpNeighborRcvCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 7),
    _RcMplsRsvpNeighborRcvCnt_Type()
)
rcMplsRsvpNeighborRcvCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborRcvCnt.setStatus("current")
_RcMplsRsvpNeighborLocalInstance_Type = Integer32
_RcMplsRsvpNeighborLocalInstance_Object = MibTableColumn
rcMplsRsvpNeighborLocalInstance = _RcMplsRsvpNeighborLocalInstance_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 8),
    _RcMplsRsvpNeighborLocalInstance_Type()
)
rcMplsRsvpNeighborLocalInstance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborLocalInstance.setStatus("current")
_RcMplsRsvpNeighborRemoteInstance_Type = Integer32
_RcMplsRsvpNeighborRemoteInstance_Object = MibTableColumn
rcMplsRsvpNeighborRemoteInstance = _RcMplsRsvpNeighborRemoteInstance_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 9),
    _RcMplsRsvpNeighborRemoteInstance_Type()
)
rcMplsRsvpNeighborRemoteInstance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborRemoteInstance.setStatus("current")
_RcMplsRsvpNeighborCreationTime_Type = Integer32
_RcMplsRsvpNeighborCreationTime_Object = MibTableColumn
rcMplsRsvpNeighborCreationTime = _RcMplsRsvpNeighborCreationTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 10),
    _RcMplsRsvpNeighborCreationTime_Type()
)
rcMplsRsvpNeighborCreationTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborCreationTime.setStatus("current")
_RcMplsRsvpNeighborLastPktRxTime_Type = Integer32
_RcMplsRsvpNeighborLastPktRxTime_Object = MibTableColumn
rcMplsRsvpNeighborLastPktRxTime = _RcMplsRsvpNeighborLastPktRxTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 11),
    _RcMplsRsvpNeighborLastPktRxTime_Type()
)
rcMplsRsvpNeighborLastPktRxTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborLastPktRxTime.setStatus("current")


class _RcMplsRsvpNeighborRefReduction_Type(SnmpAdminString):
    """Custom type rcMplsRsvpNeighborRefReduction based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(50, 50),
    )


_RcMplsRsvpNeighborRefReduction_Type.__name__ = "SnmpAdminString"
_RcMplsRsvpNeighborRefReduction_Object = MibTableColumn
rcMplsRsvpNeighborRefReduction = _RcMplsRsvpNeighborRefReduction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 3, 1, 12),
    _RcMplsRsvpNeighborRefReduction_Type()
)
rcMplsRsvpNeighborRefReduction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpNeighborRefReduction.setStatus("current")
_RcMplsRsvpInterfaceTable_Object = MibTable
rcMplsRsvpInterfaceTable = _RcMplsRsvpInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4)
)
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceTable.setStatus("current")
_RcMplsRsvpInterfaceEntry_Object = MibTableRow
rcMplsRsvpInterfaceEntry = _RcMplsRsvpInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4, 1)
)
rcMplsRsvpInterfaceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsRsvpInterfaceIfIndex"),
)
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceEntry.setStatus("current")
_RcMplsRsvpInterfaceIfIndex_Type = InterfaceIndex
_RcMplsRsvpInterfaceIfIndex_Object = MibTableColumn
rcMplsRsvpInterfaceIfIndex = _RcMplsRsvpInterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4, 1, 1),
    _RcMplsRsvpInterfaceIfIndex_Type()
)
rcMplsRsvpInterfaceIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceIfIndex.setStatus("current")
_RcMplsRsvpInterfaceAddress_Type = IpAddress
_RcMplsRsvpInterfaceAddress_Object = MibTableColumn
rcMplsRsvpInterfaceAddress = _RcMplsRsvpInterfaceAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4, 1, 2),
    _RcMplsRsvpInterfaceAddress_Type()
)
rcMplsRsvpInterfaceAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceAddress.setStatus("current")
_RcMplsRsvpInterfaceRefreshInterval_Type = Unsigned32
_RcMplsRsvpInterfaceRefreshInterval_Object = MibTableColumn
rcMplsRsvpInterfaceRefreshInterval = _RcMplsRsvpInterfaceRefreshInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4, 1, 3),
    _RcMplsRsvpInterfaceRefreshInterval_Type()
)
rcMplsRsvpInterfaceRefreshInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceRefreshInterval.setStatus("current")
_RcMplsRsvpInterfaceRefreshMult_Type = Unsigned32
_RcMplsRsvpInterfaceRefreshMult_Object = MibTableColumn
rcMplsRsvpInterfaceRefreshMult = _RcMplsRsvpInterfaceRefreshMult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4, 1, 4),
    _RcMplsRsvpInterfaceRefreshMult_Type()
)
rcMplsRsvpInterfaceRefreshMult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceRefreshMult.setStatus("current")
_RcMplsRsvpInterfaceHelloInterval_Type = Unsigned32
_RcMplsRsvpInterfaceHelloInterval_Object = MibTableColumn
rcMplsRsvpInterfaceHelloInterval = _RcMplsRsvpInterfaceHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4, 1, 5),
    _RcMplsRsvpInterfaceHelloInterval_Type()
)
rcMplsRsvpInterfaceHelloInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceHelloInterval.setStatus("current")
_RcMplsRsvpInterfaceRefreshReduction_Type = Unsigned32
_RcMplsRsvpInterfaceRefreshReduction_Object = MibTableColumn
rcMplsRsvpInterfaceRefreshReduction = _RcMplsRsvpInterfaceRefreshReduction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4, 1, 6),
    _RcMplsRsvpInterfaceRefreshReduction_Type()
)
rcMplsRsvpInterfaceRefreshReduction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceRefreshReduction.setStatus("current")
_RcMplsRsvpInterfaceMessageBundling_Type = Unsigned32
_RcMplsRsvpInterfaceMessageBundling_Object = MibTableColumn
rcMplsRsvpInterfaceMessageBundling = _RcMplsRsvpInterfaceMessageBundling_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 4, 1, 7),
    _RcMplsRsvpInterfaceMessageBundling_Type()
)
rcMplsRsvpInterfaceMessageBundling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpInterfaceMessageBundling.setStatus("current")
_RcMplsRsvpStatsTable_Object = MibTable
rcMplsRsvpStatsTable = _RcMplsRsvpStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5)
)
if mibBuilder.loadTexts:
    rcMplsRsvpStatsTable.setStatus("current")
_RcMplsRsvpStatsEntry_Object = MibTableRow
rcMplsRsvpStatsEntry = _RcMplsRsvpStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1)
)
rcMplsRsvpStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsRsvpStatsIfIndex"),
)
if mibBuilder.loadTexts:
    rcMplsRsvpStatsEntry.setStatus("current")
_RcMplsRsvpStatsIfIndex_Type = InterfaceIndex
_RcMplsRsvpStatsIfIndex_Object = MibTableColumn
rcMplsRsvpStatsIfIndex = _RcMplsRsvpStatsIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 1),
    _RcMplsRsvpStatsIfIndex_Type()
)
rcMplsRsvpStatsIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsIfIndex.setStatus("current")
_RcMplsRsvpStatsPathRcv_Type = Counter32
_RcMplsRsvpStatsPathRcv_Object = MibTableColumn
rcMplsRsvpStatsPathRcv = _RcMplsRsvpStatsPathRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 2),
    _RcMplsRsvpStatsPathRcv_Type()
)
rcMplsRsvpStatsPathRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsPathRcv.setStatus("current")
_RcMplsRsvpStatsPathSent_Type = Counter32
_RcMplsRsvpStatsPathSent_Object = MibTableColumn
rcMplsRsvpStatsPathSent = _RcMplsRsvpStatsPathSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 3),
    _RcMplsRsvpStatsPathSent_Type()
)
rcMplsRsvpStatsPathSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsPathSent.setStatus("current")
_RcMplsRsvpStatsPathErrRcv_Type = Counter32
_RcMplsRsvpStatsPathErrRcv_Object = MibTableColumn
rcMplsRsvpStatsPathErrRcv = _RcMplsRsvpStatsPathErrRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 4),
    _RcMplsRsvpStatsPathErrRcv_Type()
)
rcMplsRsvpStatsPathErrRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsPathErrRcv.setStatus("current")
_RcMplsRsvpStatsPathErrSent_Type = Counter32
_RcMplsRsvpStatsPathErrSent_Object = MibTableColumn
rcMplsRsvpStatsPathErrSent = _RcMplsRsvpStatsPathErrSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 5),
    _RcMplsRsvpStatsPathErrSent_Type()
)
rcMplsRsvpStatsPathErrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsPathErrSent.setStatus("current")
_RcMplsRsvpStatsPathTearRcv_Type = Counter32
_RcMplsRsvpStatsPathTearRcv_Object = MibTableColumn
rcMplsRsvpStatsPathTearRcv = _RcMplsRsvpStatsPathTearRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 6),
    _RcMplsRsvpStatsPathTearRcv_Type()
)
rcMplsRsvpStatsPathTearRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsPathTearRcv.setStatus("current")
_RcMplsRsvpStatsPathTearSent_Type = Counter32
_RcMplsRsvpStatsPathTearSent_Object = MibTableColumn
rcMplsRsvpStatsPathTearSent = _RcMplsRsvpStatsPathTearSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 7),
    _RcMplsRsvpStatsPathTearSent_Type()
)
rcMplsRsvpStatsPathTearSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsPathTearSent.setStatus("current")
_RcMplsRsvpStatsResvRcv_Type = Counter32
_RcMplsRsvpStatsResvRcv_Object = MibTableColumn
rcMplsRsvpStatsResvRcv = _RcMplsRsvpStatsResvRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 8),
    _RcMplsRsvpStatsResvRcv_Type()
)
rcMplsRsvpStatsResvRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsResvRcv.setStatus("current")
_RcMplsRsvpStatsResvSent_Type = Counter32
_RcMplsRsvpStatsResvSent_Object = MibTableColumn
rcMplsRsvpStatsResvSent = _RcMplsRsvpStatsResvSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 9),
    _RcMplsRsvpStatsResvSent_Type()
)
rcMplsRsvpStatsResvSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsResvSent.setStatus("current")
_RcMplsRsvpStatsResvErrRcv_Type = Counter32
_RcMplsRsvpStatsResvErrRcv_Object = MibTableColumn
rcMplsRsvpStatsResvErrRcv = _RcMplsRsvpStatsResvErrRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 10),
    _RcMplsRsvpStatsResvErrRcv_Type()
)
rcMplsRsvpStatsResvErrRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsResvErrRcv.setStatus("current")
_RcMplsRsvpStatsResvErrSent_Type = Counter32
_RcMplsRsvpStatsResvErrSent_Object = MibTableColumn
rcMplsRsvpStatsResvErrSent = _RcMplsRsvpStatsResvErrSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 11),
    _RcMplsRsvpStatsResvErrSent_Type()
)
rcMplsRsvpStatsResvErrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsResvErrSent.setStatus("current")
_RcMplsRsvpStatsResvTearRcv_Type = Counter32
_RcMplsRsvpStatsResvTearRcv_Object = MibTableColumn
rcMplsRsvpStatsResvTearRcv = _RcMplsRsvpStatsResvTearRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 12),
    _RcMplsRsvpStatsResvTearRcv_Type()
)
rcMplsRsvpStatsResvTearRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsResvTearRcv.setStatus("current")
_RcMplsRsvpStatsResvTearSent_Type = Counter32
_RcMplsRsvpStatsResvTearSent_Object = MibTableColumn
rcMplsRsvpStatsResvTearSent = _RcMplsRsvpStatsResvTearSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 13),
    _RcMplsRsvpStatsResvTearSent_Type()
)
rcMplsRsvpStatsResvTearSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsResvTearSent.setStatus("current")
_RcMplsRsvpStatsConfTearRcv_Type = Counter32
_RcMplsRsvpStatsConfTearRcv_Object = MibTableColumn
rcMplsRsvpStatsConfTearRcv = _RcMplsRsvpStatsConfTearRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 14),
    _RcMplsRsvpStatsConfTearRcv_Type()
)
rcMplsRsvpStatsConfTearRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsConfTearRcv.setStatus("current")
_RcMplsRsvpStatsConfTearSent_Type = Counter32
_RcMplsRsvpStatsConfTearSent_Object = MibTableColumn
rcMplsRsvpStatsConfTearSent = _RcMplsRsvpStatsConfTearSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 15),
    _RcMplsRsvpStatsConfTearSent_Type()
)
rcMplsRsvpStatsConfTearSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsConfTearSent.setStatus("current")
_RcMplsRsvpStatsAckRcv_Type = Counter32
_RcMplsRsvpStatsAckRcv_Object = MibTableColumn
rcMplsRsvpStatsAckRcv = _RcMplsRsvpStatsAckRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 16),
    _RcMplsRsvpStatsAckRcv_Type()
)
rcMplsRsvpStatsAckRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsAckRcv.setStatus("current")
_RcMplsRsvpStatsAckSent_Type = Counter32
_RcMplsRsvpStatsAckSent_Object = MibTableColumn
rcMplsRsvpStatsAckSent = _RcMplsRsvpStatsAckSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 17),
    _RcMplsRsvpStatsAckSent_Type()
)
rcMplsRsvpStatsAckSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsAckSent.setStatus("current")
_RcMplsRsvpStatsSRefreshRcv_Type = Counter32
_RcMplsRsvpStatsSRefreshRcv_Object = MibTableColumn
rcMplsRsvpStatsSRefreshRcv = _RcMplsRsvpStatsSRefreshRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 18),
    _RcMplsRsvpStatsSRefreshRcv_Type()
)
rcMplsRsvpStatsSRefreshRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsSRefreshRcv.setStatus("current")
_RcMplsRsvpStatsSRefreshSent_Type = Counter32
_RcMplsRsvpStatsSRefreshSent_Object = MibTableColumn
rcMplsRsvpStatsSRefreshSent = _RcMplsRsvpStatsSRefreshSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 19),
    _RcMplsRsvpStatsSRefreshSent_Type()
)
rcMplsRsvpStatsSRefreshSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsSRefreshSent.setStatus("current")
_RcMplsRsvpStatsHelloReqRcv_Type = Counter32
_RcMplsRsvpStatsHelloReqRcv_Object = MibTableColumn
rcMplsRsvpStatsHelloReqRcv = _RcMplsRsvpStatsHelloReqRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 20),
    _RcMplsRsvpStatsHelloReqRcv_Type()
)
rcMplsRsvpStatsHelloReqRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsHelloReqRcv.setStatus("current")
_RcMplsRsvpStatsHelloReqSent_Type = Counter32
_RcMplsRsvpStatsHelloReqSent_Object = MibTableColumn
rcMplsRsvpStatsHelloReqSent = _RcMplsRsvpStatsHelloReqSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 21),
    _RcMplsRsvpStatsHelloReqSent_Type()
)
rcMplsRsvpStatsHelloReqSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsHelloReqSent.setStatus("current")
_RcMplsRsvpStatsHelloAckRcv_Type = Counter32
_RcMplsRsvpStatsHelloAckRcv_Object = MibTableColumn
rcMplsRsvpStatsHelloAckRcv = _RcMplsRsvpStatsHelloAckRcv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 22),
    _RcMplsRsvpStatsHelloAckRcv_Type()
)
rcMplsRsvpStatsHelloAckRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsHelloAckRcv.setStatus("current")
_RcMplsRsvpStatsHelloAckSent_Type = Counter32
_RcMplsRsvpStatsHelloAckSent_Object = MibTableColumn
rcMplsRsvpStatsHelloAckSent = _RcMplsRsvpStatsHelloAckSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 23),
    _RcMplsRsvpStatsHelloAckSent_Type()
)
rcMplsRsvpStatsHelloAckSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsHelloAckSent.setStatus("current")
_RcMplsRsvpStatsBadIpHdr_Type = Counter32
_RcMplsRsvpStatsBadIpHdr_Object = MibTableColumn
rcMplsRsvpStatsBadIpHdr = _RcMplsRsvpStatsBadIpHdr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 24),
    _RcMplsRsvpStatsBadIpHdr_Type()
)
rcMplsRsvpStatsBadIpHdr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsBadIpHdr.setStatus("current")
_RcMplsRsvpStatsBadVersion_Type = Counter32
_RcMplsRsvpStatsBadVersion_Object = MibTableColumn
rcMplsRsvpStatsBadVersion = _RcMplsRsvpStatsBadVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 25),
    _RcMplsRsvpStatsBadVersion_Type()
)
rcMplsRsvpStatsBadVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsBadVersion.setStatus("current")
_RcMplsRsvpStatsBadRsvpLen_Type = Counter32
_RcMplsRsvpStatsBadRsvpLen_Object = MibTableColumn
rcMplsRsvpStatsBadRsvpLen = _RcMplsRsvpStatsBadRsvpLen_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 26),
    _RcMplsRsvpStatsBadRsvpLen_Type()
)
rcMplsRsvpStatsBadRsvpLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsBadRsvpLen.setStatus("current")
_RcMplsRsvpStatsBadCksum_Type = Counter32
_RcMplsRsvpStatsBadCksum_Object = MibTableColumn
rcMplsRsvpStatsBadCksum = _RcMplsRsvpStatsBadCksum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 27),
    _RcMplsRsvpStatsBadCksum_Type()
)
rcMplsRsvpStatsBadCksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsBadCksum.setStatus("current")
_RcMplsRsvpStatsBadMsgType_Type = Counter32
_RcMplsRsvpStatsBadMsgType_Object = MibTableColumn
rcMplsRsvpStatsBadMsgType = _RcMplsRsvpStatsBadMsgType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 28),
    _RcMplsRsvpStatsBadMsgType_Type()
)
rcMplsRsvpStatsBadMsgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsBadMsgType.setStatus("current")
_RcMplsRsvpStatsBadMsgForm_Type = Counter32
_RcMplsRsvpStatsBadMsgForm_Object = MibTableColumn
rcMplsRsvpStatsBadMsgForm = _RcMplsRsvpStatsBadMsgForm_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 29),
    _RcMplsRsvpStatsBadMsgForm_Type()
)
rcMplsRsvpStatsBadMsgForm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsBadMsgForm.setStatus("current")
_RcMplsRsvpStatsBadIntf_Type = Counter32
_RcMplsRsvpStatsBadIntf_Object = MibTableColumn
rcMplsRsvpStatsBadIntf = _RcMplsRsvpStatsBadIntf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 30),
    _RcMplsRsvpStatsBadIntf_Type()
)
rcMplsRsvpStatsBadIntf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsBadIntf.setStatus("current")


class _RcMplsRsvpStatsClear_Type(TruthValue):
    """Custom type rcMplsRsvpStatsClear based on TruthValue"""


_RcMplsRsvpStatsClear_Object = MibTableColumn
rcMplsRsvpStatsClear = _RcMplsRsvpStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 2, 5, 1, 31),
    _RcMplsRsvpStatsClear_Type()
)
rcMplsRsvpStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsRsvpStatsClear.setStatus("current")
_RcMplsLdpGroup_ObjectIdentity = ObjectIdentity
rcMplsLdpGroup = _RcMplsLdpGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3)
)
_RcMplsLdpSummaryGroup_ObjectIdentity = ObjectIdentity
rcMplsLdpSummaryGroup = _RcMplsLdpSummaryGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1)
)
_RcMplsLdpSummaryIntAdjCount_Type = Unsigned32
_RcMplsLdpSummaryIntAdjCount_Object = MibScalar
rcMplsLdpSummaryIntAdjCount = _RcMplsLdpSummaryIntAdjCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 1),
    _RcMplsLdpSummaryIntAdjCount_Type()
)
rcMplsLdpSummaryIntAdjCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummaryIntAdjCount.setStatus("current")
_RcMplsLdpSummaryExtAdjCount_Type = Unsigned32
_RcMplsLdpSummaryExtAdjCount_Object = MibScalar
rcMplsLdpSummaryExtAdjCount = _RcMplsLdpSummaryExtAdjCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 2),
    _RcMplsLdpSummaryExtAdjCount_Type()
)
rcMplsLdpSummaryExtAdjCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummaryExtAdjCount.setStatus("current")
_RcMplsLdpSummarySessionCount_Type = Unsigned32
_RcMplsLdpSummarySessionCount_Object = MibScalar
rcMplsLdpSummarySessionCount = _RcMplsLdpSummarySessionCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 3),
    _RcMplsLdpSummarySessionCount_Type()
)
rcMplsLdpSummarySessionCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummarySessionCount.setStatus("current")
_RcMplsLdpSummaryRouteCount_Type = Unsigned32
_RcMplsLdpSummaryRouteCount_Object = MibScalar
rcMplsLdpSummaryRouteCount = _RcMplsLdpSummaryRouteCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 4),
    _RcMplsLdpSummaryRouteCount_Type()
)
rcMplsLdpSummaryRouteCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummaryRouteCount.setStatus("current")
_RcMplsLdpSummaryLdpId_Type = MplsLdpIdentifier
_RcMplsLdpSummaryLdpId_Object = MibScalar
rcMplsLdpSummaryLdpId = _RcMplsLdpSummaryLdpId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 5),
    _RcMplsLdpSummaryLdpId_Type()
)
rcMplsLdpSummaryLdpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummaryLdpId.setStatus("current")
_RcMplsLdpSummaryLspCount_Type = Unsigned32
_RcMplsLdpSummaryLspCount_Object = MibScalar
rcMplsLdpSummaryLspCount = _RcMplsLdpSummaryLspCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 6),
    _RcMplsLdpSummaryLspCount_Type()
)
rcMplsLdpSummaryLspCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummaryLspCount.setStatus("current")
_RcMplsLdpSummaryInSegCount_Type = Unsigned32
_RcMplsLdpSummaryInSegCount_Object = MibScalar
rcMplsLdpSummaryInSegCount = _RcMplsLdpSummaryInSegCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 7),
    _RcMplsLdpSummaryInSegCount_Type()
)
rcMplsLdpSummaryInSegCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummaryInSegCount.setStatus("current")
_RcMplsLdpSummaryOutSegCount_Type = Unsigned32
_RcMplsLdpSummaryOutSegCount_Object = MibScalar
rcMplsLdpSummaryOutSegCount = _RcMplsLdpSummaryOutSegCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 8),
    _RcMplsLdpSummaryOutSegCount_Type()
)
rcMplsLdpSummaryOutSegCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummaryOutSegCount.setStatus("current")
_RcMplsLdpSummaryRedistConn_Type = EnableValue
_RcMplsLdpSummaryRedistConn_Object = MibScalar
rcMplsLdpSummaryRedistConn = _RcMplsLdpSummaryRedistConn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 1, 9),
    _RcMplsLdpSummaryRedistConn_Type()
)
rcMplsLdpSummaryRedistConn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSummaryRedistConn.setStatus("current")
_RcMplsLdpDiscoveryTable_Object = MibTable
rcMplsLdpDiscoveryTable = _RcMplsLdpDiscoveryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 2)
)
if mibBuilder.loadTexts:
    rcMplsLdpDiscoveryTable.setStatus("current")
_RcMplsLdpDiscoveryEntry_Object = MibTableRow
rcMplsLdpDiscoveryEntry = _RcMplsLdpDiscoveryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 2, 1)
)
rcMplsLdpDiscoveryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsLdpDiscoveryIfIndex"),
    (0, "RAPID-CITY", "rcMplsLdpDiscoveryPeerLdpId"),
)
if mibBuilder.loadTexts:
    rcMplsLdpDiscoveryEntry.setStatus("current")
_RcMplsLdpDiscoveryIfIndex_Type = InterfaceIndex
_RcMplsLdpDiscoveryIfIndex_Object = MibTableColumn
rcMplsLdpDiscoveryIfIndex = _RcMplsLdpDiscoveryIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 2, 1, 1),
    _RcMplsLdpDiscoveryIfIndex_Type()
)
rcMplsLdpDiscoveryIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpDiscoveryIfIndex.setStatus("current")
_RcMplsLdpDiscoveryPeerLdpId_Type = MplsLdpIdentifier
_RcMplsLdpDiscoveryPeerLdpId_Object = MibTableColumn
rcMplsLdpDiscoveryPeerLdpId = _RcMplsLdpDiscoveryPeerLdpId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 2, 1, 2),
    _RcMplsLdpDiscoveryPeerLdpId_Type()
)
rcMplsLdpDiscoveryPeerLdpId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpDiscoveryPeerLdpId.setStatus("current")
_RcMplsLdpDiscoveryPeerTransportAddr_Type = IpAddress
_RcMplsLdpDiscoveryPeerTransportAddr_Object = MibTableColumn
rcMplsLdpDiscoveryPeerTransportAddr = _RcMplsLdpDiscoveryPeerTransportAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 2, 1, 3),
    _RcMplsLdpDiscoveryPeerTransportAddr_Type()
)
rcMplsLdpDiscoveryPeerTransportAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpDiscoveryPeerTransportAddr.setStatus("current")
_RcMplsLdpDiscoveryNegotiatedHoldTime_Type = Unsigned32
_RcMplsLdpDiscoveryNegotiatedHoldTime_Object = MibTableColumn
rcMplsLdpDiscoveryNegotiatedHoldTime = _RcMplsLdpDiscoveryNegotiatedHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 2, 1, 4),
    _RcMplsLdpDiscoveryNegotiatedHoldTime_Type()
)
rcMplsLdpDiscoveryNegotiatedHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpDiscoveryNegotiatedHoldTime.setStatus("current")
_RcMplsLdpDiscoveryConfSeqNum_Type = Unsigned32
_RcMplsLdpDiscoveryConfSeqNum_Object = MibTableColumn
rcMplsLdpDiscoveryConfSeqNum = _RcMplsLdpDiscoveryConfSeqNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 2, 1, 5),
    _RcMplsLdpDiscoveryConfSeqNum_Type()
)
rcMplsLdpDiscoveryConfSeqNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpDiscoveryConfSeqNum.setStatus("current")
_RcMplsLdpDiscoveryExtendedDiscovery_Type = Unsigned32
_RcMplsLdpDiscoveryExtendedDiscovery_Object = MibTableColumn
rcMplsLdpDiscoveryExtendedDiscovery = _RcMplsLdpDiscoveryExtendedDiscovery_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 2, 1, 6),
    _RcMplsLdpDiscoveryExtendedDiscovery_Type()
)
rcMplsLdpDiscoveryExtendedDiscovery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpDiscoveryExtendedDiscovery.setStatus("current")
_RcMplsLdpPathTable_Object = MibTable
rcMplsLdpPathTable = _RcMplsLdpPathTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 3)
)
if mibBuilder.loadTexts:
    rcMplsLdpPathTable.setStatus("current")
_RcMplsLdpPathEntry_Object = MibTableRow
rcMplsLdpPathEntry = _RcMplsLdpPathEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 3, 1)
)
rcMplsLdpPathEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsLdpPathType"),
    (0, "RAPID-CITY", "rcMplsLdpPathAddrType"),
    (0, "RAPID-CITY", "rcMplsLdpPathAddrPrefixLength"),
    (0, "RAPID-CITY", "rcMplsLdpPathAddr"),
)
if mibBuilder.loadTexts:
    rcMplsLdpPathEntry.setStatus("current")


class _RcMplsLdpPathType_Type(Integer32):
    """Custom type rcMplsLdpPathType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("host", 1),
          ("none", 0),
          ("prefix", 2),
          ("vc", 3),
          ("vcgenid", 4))
    )


_RcMplsLdpPathType_Type.__name__ = "Integer32"
_RcMplsLdpPathType_Object = MibTableColumn
rcMplsLdpPathType = _RcMplsLdpPathType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 3, 1, 1),
    _RcMplsLdpPathType_Type()
)
rcMplsLdpPathType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathType.setStatus("current")
_RcMplsLdpPathAddrType_Type = InetAddressType
_RcMplsLdpPathAddrType_Object = MibTableColumn
rcMplsLdpPathAddrType = _RcMplsLdpPathAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 3, 1, 2),
    _RcMplsLdpPathAddrType_Type()
)
rcMplsLdpPathAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathAddrType.setStatus("current")
_RcMplsLdpPathAddrPrefixLength_Type = InetAddressPrefixLength
_RcMplsLdpPathAddrPrefixLength_Object = MibTableColumn
rcMplsLdpPathAddrPrefixLength = _RcMplsLdpPathAddrPrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 3, 1, 3),
    _RcMplsLdpPathAddrPrefixLength_Type()
)
rcMplsLdpPathAddrPrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathAddrPrefixLength.setStatus("current")
_RcMplsLdpPathAddr_Type = InetAddress
_RcMplsLdpPathAddr_Object = MibTableColumn
rcMplsLdpPathAddr = _RcMplsLdpPathAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 3, 1, 4),
    _RcMplsLdpPathAddr_Type()
)
rcMplsLdpPathAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathAddr.setStatus("current")
_RcMplsLdpPathInLabel_Type = MplsLabel
_RcMplsLdpPathInLabel_Object = MibTableColumn
rcMplsLdpPathInLabel = _RcMplsLdpPathInLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 3, 1, 5),
    _RcMplsLdpPathInLabel_Type()
)
rcMplsLdpPathInLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpPathInLabel.setStatus("current")
_RcMplsLdpPathRemotePeerTable_Object = MibTable
rcMplsLdpPathRemotePeerTable = _RcMplsLdpPathRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4)
)
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerTable.setStatus("current")
_RcMplsLdpPathRemotePeerEntry_Object = MibTableRow
rcMplsLdpPathRemotePeerEntry = _RcMplsLdpPathRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1)
)
rcMplsLdpPathRemotePeerEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsLdpPathRemotePeerType"),
    (0, "RAPID-CITY", "rcMplsLdpPathRemotePeerAddrType"),
    (0, "RAPID-CITY", "rcMplsLdpPathRemotePeerAddrPrefixLength"),
    (0, "RAPID-CITY", "rcMplsLdpPathRemotePeerAddr"),
    (0, "RAPID-CITY", "rcMplsLdpPathRemotePeerId"),
)
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerEntry.setStatus("current")


class _RcMplsLdpPathRemotePeerType_Type(Integer32):
    """Custom type rcMplsLdpPathRemotePeerType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("host", 1),
          ("none", 0),
          ("prefix", 2),
          ("vc", 3),
          ("vcgenid", 4))
    )


_RcMplsLdpPathRemotePeerType_Type.__name__ = "Integer32"
_RcMplsLdpPathRemotePeerType_Object = MibTableColumn
rcMplsLdpPathRemotePeerType = _RcMplsLdpPathRemotePeerType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1, 1),
    _RcMplsLdpPathRemotePeerType_Type()
)
rcMplsLdpPathRemotePeerType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerType.setStatus("current")
_RcMplsLdpPathRemotePeerAddrType_Type = InetAddressType
_RcMplsLdpPathRemotePeerAddrType_Object = MibTableColumn
rcMplsLdpPathRemotePeerAddrType = _RcMplsLdpPathRemotePeerAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1, 2),
    _RcMplsLdpPathRemotePeerAddrType_Type()
)
rcMplsLdpPathRemotePeerAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerAddrType.setStatus("current")
_RcMplsLdpPathRemotePeerAddrPrefixLength_Type = InetAddressPrefixLength
_RcMplsLdpPathRemotePeerAddrPrefixLength_Object = MibTableColumn
rcMplsLdpPathRemotePeerAddrPrefixLength = _RcMplsLdpPathRemotePeerAddrPrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1, 3),
    _RcMplsLdpPathRemotePeerAddrPrefixLength_Type()
)
rcMplsLdpPathRemotePeerAddrPrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerAddrPrefixLength.setStatus("current")
_RcMplsLdpPathRemotePeerAddr_Type = InetAddress
_RcMplsLdpPathRemotePeerAddr_Object = MibTableColumn
rcMplsLdpPathRemotePeerAddr = _RcMplsLdpPathRemotePeerAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1, 4),
    _RcMplsLdpPathRemotePeerAddr_Type()
)
rcMplsLdpPathRemotePeerAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerAddr.setStatus("current")


class _RcMplsLdpPathRemotePeerId_Type(Integer32):
    """Custom type rcMplsLdpPathRemotePeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RcMplsLdpPathRemotePeerId_Type.__name__ = "Integer32"
_RcMplsLdpPathRemotePeerId_Object = MibTableColumn
rcMplsLdpPathRemotePeerId = _RcMplsLdpPathRemotePeerId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1, 5),
    _RcMplsLdpPathRemotePeerId_Type()
)
rcMplsLdpPathRemotePeerId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerId.setStatus("current")
_RcMplsLdpPathRemotePeerLdpId_Type = MplsLdpIdentifier
_RcMplsLdpPathRemotePeerLdpId_Object = MibTableColumn
rcMplsLdpPathRemotePeerLdpId = _RcMplsLdpPathRemotePeerLdpId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1, 6),
    _RcMplsLdpPathRemotePeerLdpId_Type()
)
rcMplsLdpPathRemotePeerLdpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerLdpId.setStatus("current")
_RcMplsLdpPathRemotePeerOutLabel_Type = MplsLabel
_RcMplsLdpPathRemotePeerOutLabel_Object = MibTableColumn
rcMplsLdpPathRemotePeerOutLabel = _RcMplsLdpPathRemotePeerOutLabel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1, 7),
    _RcMplsLdpPathRemotePeerOutLabel_Type()
)
rcMplsLdpPathRemotePeerOutLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerOutLabel.setStatus("current")


class _RcMplsLdpPathRemotePeerState_Type(Integer32):
    """Custom type rcMplsLdpPathRemotePeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2))
    )


_RcMplsLdpPathRemotePeerState_Type.__name__ = "Integer32"
_RcMplsLdpPathRemotePeerState_Object = MibTableColumn
rcMplsLdpPathRemotePeerState = _RcMplsLdpPathRemotePeerState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 4, 1, 8),
    _RcMplsLdpPathRemotePeerState_Type()
)
rcMplsLdpPathRemotePeerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpPathRemotePeerState.setStatus("current")
_RcMplsLdpRouteTable_Object = MibTable
rcMplsLdpRouteTable = _RcMplsLdpRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5)
)
if mibBuilder.loadTexts:
    rcMplsLdpRouteTable.setStatus("current")
_RcMplsLdpRouteEntry_Object = MibTableRow
rcMplsLdpRouteEntry = _RcMplsLdpRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5, 1)
)
rcMplsLdpRouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsLdpRouteType"),
    (0, "RAPID-CITY", "rcMplsLdpRouteAddrType"),
    (0, "RAPID-CITY", "rcMplsLdpRouteAddrPrefixLength"),
    (0, "RAPID-CITY", "rcMplsLdpRouteAddr"),
)
if mibBuilder.loadTexts:
    rcMplsLdpRouteEntry.setStatus("current")


class _RcMplsLdpRouteType_Type(Integer32):
    """Custom type rcMplsLdpRouteType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("host", 1),
          ("none", 0),
          ("prefix", 2),
          ("vc", 3),
          ("vcgenid", 4))
    )


_RcMplsLdpRouteType_Type.__name__ = "Integer32"
_RcMplsLdpRouteType_Object = MibTableColumn
rcMplsLdpRouteType = _RcMplsLdpRouteType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5, 1, 1),
    _RcMplsLdpRouteType_Type()
)
rcMplsLdpRouteType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpRouteType.setStatus("current")
_RcMplsLdpRouteAddrType_Type = InetAddressType
_RcMplsLdpRouteAddrType_Object = MibTableColumn
rcMplsLdpRouteAddrType = _RcMplsLdpRouteAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5, 1, 2),
    _RcMplsLdpRouteAddrType_Type()
)
rcMplsLdpRouteAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpRouteAddrType.setStatus("current")
_RcMplsLdpRouteAddrPrefixLength_Type = InetAddressPrefixLength
_RcMplsLdpRouteAddrPrefixLength_Object = MibTableColumn
rcMplsLdpRouteAddrPrefixLength = _RcMplsLdpRouteAddrPrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5, 1, 3),
    _RcMplsLdpRouteAddrPrefixLength_Type()
)
rcMplsLdpRouteAddrPrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpRouteAddrPrefixLength.setStatus("current")
_RcMplsLdpRouteAddr_Type = InetAddress
_RcMplsLdpRouteAddr_Object = MibTableColumn
rcMplsLdpRouteAddr = _RcMplsLdpRouteAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5, 1, 4),
    _RcMplsLdpRouteAddr_Type()
)
rcMplsLdpRouteAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpRouteAddr.setStatus("current")
_RcMplsLdpRouteIfIndex_Type = InterfaceIndex
_RcMplsLdpRouteIfIndex_Object = MibTableColumn
rcMplsLdpRouteIfIndex = _RcMplsLdpRouteIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5, 1, 5),
    _RcMplsLdpRouteIfIndex_Type()
)
rcMplsLdpRouteIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpRouteIfIndex.setStatus("current")
_RcMplsLdpRouteNextHopAddrType_Type = InetAddressType
_RcMplsLdpRouteNextHopAddrType_Object = MibTableColumn
rcMplsLdpRouteNextHopAddrType = _RcMplsLdpRouteNextHopAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5, 1, 6),
    _RcMplsLdpRouteNextHopAddrType_Type()
)
rcMplsLdpRouteNextHopAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpRouteNextHopAddrType.setStatus("current")
_RcMplsLdpRouteNextHopAddr_Type = InetAddress
_RcMplsLdpRouteNextHopAddr_Object = MibTableColumn
rcMplsLdpRouteNextHopAddr = _RcMplsLdpRouteNextHopAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 5, 1, 7),
    _RcMplsLdpRouteNextHopAddr_Type()
)
rcMplsLdpRouteNextHopAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpRouteNextHopAddr.setStatus("current")
_RcMplsLdpSessionTable_Object = MibTable
rcMplsLdpSessionTable = _RcMplsLdpSessionTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6)
)
if mibBuilder.loadTexts:
    rcMplsLdpSessionTable.setStatus("current")
_RcMplsLdpSessionEntry_Object = MibTableRow
rcMplsLdpSessionEntry = _RcMplsLdpSessionEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1)
)
rcMplsLdpSessionEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsLdpSessionEntityLdpId"),
    (0, "RAPID-CITY", "rcMplsLdpSessionEntityIndex"),
    (0, "RAPID-CITY", "rcMplsLdpSessionPeerLdpId"),
)
if mibBuilder.loadTexts:
    rcMplsLdpSessionEntry.setStatus("current")
_RcMplsLdpSessionEntityLdpId_Type = MplsLdpIdentifier
_RcMplsLdpSessionEntityLdpId_Object = MibTableColumn
rcMplsLdpSessionEntityLdpId = _RcMplsLdpSessionEntityLdpId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 1),
    _RcMplsLdpSessionEntityLdpId_Type()
)
rcMplsLdpSessionEntityLdpId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpSessionEntityLdpId.setStatus("current")
_RcMplsLdpSessionEntityIndex_Type = IndexInteger
_RcMplsLdpSessionEntityIndex_Object = MibTableColumn
rcMplsLdpSessionEntityIndex = _RcMplsLdpSessionEntityIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 2),
    _RcMplsLdpSessionEntityIndex_Type()
)
rcMplsLdpSessionEntityIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpSessionEntityIndex.setStatus("current")
_RcMplsLdpSessionPeerLdpId_Type = MplsLdpIdentifier
_RcMplsLdpSessionPeerLdpId_Object = MibTableColumn
rcMplsLdpSessionPeerLdpId = _RcMplsLdpSessionPeerLdpId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 3),
    _RcMplsLdpSessionPeerLdpId_Type()
)
rcMplsLdpSessionPeerLdpId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpSessionPeerLdpId.setStatus("current")
_RcMplsLdpSessionStateLastChange_Type = Unsigned32
_RcMplsLdpSessionStateLastChange_Object = MibTableColumn
rcMplsLdpSessionStateLastChange = _RcMplsLdpSessionStateLastChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 4),
    _RcMplsLdpSessionStateLastChange_Type()
)
rcMplsLdpSessionStateLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionStateLastChange.setStatus("current")


class _RcMplsLdpSessionState_Type(Integer32):
    """Custom type rcMplsLdpSessionState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("initialized", 2),
          ("nonexistent", 1),
          ("openrec", 3),
          ("opensent", 4),
          ("operational", 5))
    )


_RcMplsLdpSessionState_Type.__name__ = "Integer32"
_RcMplsLdpSessionState_Object = MibTableColumn
rcMplsLdpSessionState = _RcMplsLdpSessionState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 5),
    _RcMplsLdpSessionState_Type()
)
rcMplsLdpSessionState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionState.setStatus("current")


class _RcMplsLdpSessionRole_Type(Integer32):
    """Custom type rcMplsLdpSessionRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("passive", 3),
          ("unknown", 1))
    )


_RcMplsLdpSessionRole_Type.__name__ = "Integer32"
_RcMplsLdpSessionRole_Object = MibTableColumn
rcMplsLdpSessionRole = _RcMplsLdpSessionRole_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 6),
    _RcMplsLdpSessionRole_Type()
)
rcMplsLdpSessionRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionRole.setStatus("current")
_RcMplsLdpSessionProtocolVersion_Type = Unsigned32
_RcMplsLdpSessionProtocolVersion_Object = MibTableColumn
rcMplsLdpSessionProtocolVersion = _RcMplsLdpSessionProtocolVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 7),
    _RcMplsLdpSessionProtocolVersion_Type()
)
rcMplsLdpSessionProtocolVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionProtocolVersion.setStatus("current")
_RcMplsLdpSessionKeepAliveHoldTimeRem_Type = Integer32
_RcMplsLdpSessionKeepAliveHoldTimeRem_Object = MibTableColumn
rcMplsLdpSessionKeepAliveHoldTimeRem = _RcMplsLdpSessionKeepAliveHoldTimeRem_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 8),
    _RcMplsLdpSessionKeepAliveHoldTimeRem_Type()
)
rcMplsLdpSessionKeepAliveHoldTimeRem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionKeepAliveHoldTimeRem.setStatus("current")
_RcMplsLdpSessionKeepAliveTime_Type = Unsigned32
_RcMplsLdpSessionKeepAliveTime_Object = MibTableColumn
rcMplsLdpSessionKeepAliveTime = _RcMplsLdpSessionKeepAliveTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 9),
    _RcMplsLdpSessionKeepAliveTime_Type()
)
rcMplsLdpSessionKeepAliveTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionKeepAliveTime.setStatus("current")
_RcMplsLdpSessionMaxPduLength_Type = Unsigned32
_RcMplsLdpSessionMaxPduLength_Object = MibTableColumn
rcMplsLdpSessionMaxPduLength = _RcMplsLdpSessionMaxPduLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 10),
    _RcMplsLdpSessionMaxPduLength_Type()
)
rcMplsLdpSessionMaxPduLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionMaxPduLength.setStatus("current")
_RcMplsLdpSessionDiscontinuityTime_Type = Integer32
_RcMplsLdpSessionDiscontinuityTime_Object = MibTableColumn
rcMplsLdpSessionDiscontinuityTime = _RcMplsLdpSessionDiscontinuityTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 11),
    _RcMplsLdpSessionDiscontinuityTime_Type()
)
rcMplsLdpSessionDiscontinuityTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionDiscontinuityTime.setStatus("current")
_RcMplsLdpSessionHoldTime_Type = Unsigned32
_RcMplsLdpSessionHoldTime_Object = MibTableColumn
rcMplsLdpSessionHoldTime = _RcMplsLdpSessionHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 12),
    _RcMplsLdpSessionHoldTime_Type()
)
rcMplsLdpSessionHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionHoldTime.setStatus("current")
_RcMplsLdpSessionUpTime_Type = Integer32
_RcMplsLdpSessionUpTime_Object = MibTableColumn
rcMplsLdpSessionUpTime = _RcMplsLdpSessionUpTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 13),
    _RcMplsLdpSessionUpTime_Type()
)
rcMplsLdpSessionUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionUpTime.setStatus("current")
_RcMplsLdpSessionMessagesSent_Type = Counter32
_RcMplsLdpSessionMessagesSent_Object = MibTableColumn
rcMplsLdpSessionMessagesSent = _RcMplsLdpSessionMessagesSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 14),
    _RcMplsLdpSessionMessagesSent_Type()
)
rcMplsLdpSessionMessagesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionMessagesSent.setStatus("current")
_RcMplsLdpSessionMessagesRecv_Type = Counter32
_RcMplsLdpSessionMessagesRecv_Object = MibTableColumn
rcMplsLdpSessionMessagesRecv = _RcMplsLdpSessionMessagesRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 6, 1, 15),
    _RcMplsLdpSessionMessagesRecv_Type()
)
rcMplsLdpSessionMessagesRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpSessionMessagesRecv.setStatus("current")
_RcMplsLdpInterfaceTable_Object = MibTable
rcMplsLdpInterfaceTable = _RcMplsLdpInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 7)
)
if mibBuilder.loadTexts:
    rcMplsLdpInterfaceTable.setStatus("current")
_RcMplsLdpInterfaceEntry_Object = MibTableRow
rcMplsLdpInterfaceEntry = _RcMplsLdpInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 7, 1)
)
rcMplsLdpInterfaceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsLdpInterfaceIfIndex"),
)
if mibBuilder.loadTexts:
    rcMplsLdpInterfaceEntry.setStatus("current")
_RcMplsLdpInterfaceIfIndex_Type = InterfaceIndex
_RcMplsLdpInterfaceIfIndex_Object = MibTableColumn
rcMplsLdpInterfaceIfIndex = _RcMplsLdpInterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 7, 1, 1),
    _RcMplsLdpInterfaceIfIndex_Type()
)
rcMplsLdpInterfaceIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpInterfaceIfIndex.setStatus("current")
_RcMplsLdpInterfaceNbrCount_Type = Unsigned32
_RcMplsLdpInterfaceNbrCount_Object = MibTableColumn
rcMplsLdpInterfaceNbrCount = _RcMplsLdpInterfaceNbrCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 7, 1, 2),
    _RcMplsLdpInterfaceNbrCount_Type()
)
rcMplsLdpInterfaceNbrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpInterfaceNbrCount.setStatus("current")
_RcMplsLdpInterfaceNextHello_Type = Unsigned32
_RcMplsLdpInterfaceNextHello_Object = MibTableColumn
rcMplsLdpInterfaceNextHello = _RcMplsLdpInterfaceNextHello_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 7, 1, 3),
    _RcMplsLdpInterfaceNextHello_Type()
)
rcMplsLdpInterfaceNextHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpInterfaceNextHello.setStatus("current")
_RcMplsLdpInterfaceConfHoldTime_Type = Unsigned32
_RcMplsLdpInterfaceConfHoldTime_Object = MibTableColumn
rcMplsLdpInterfaceConfHoldTime = _RcMplsLdpInterfaceConfHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 7, 1, 4),
    _RcMplsLdpInterfaceConfHoldTime_Type()
)
rcMplsLdpInterfaceConfHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpInterfaceConfHoldTime.setStatus("current")
_RcMplsLdpInterfaceNegHoldTime_Type = Unsigned32
_RcMplsLdpInterfaceNegHoldTime_Object = MibTableColumn
rcMplsLdpInterfaceNegHoldTime = _RcMplsLdpInterfaceNegHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 7, 1, 5),
    _RcMplsLdpInterfaceNegHoldTime_Type()
)
rcMplsLdpInterfaceNegHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpInterfaceNegHoldTime.setStatus("current")
_RcMplsLdpInterfaceHelloInterval_Type = Unsigned32
_RcMplsLdpInterfaceHelloInterval_Object = MibTableColumn
rcMplsLdpInterfaceHelloInterval = _RcMplsLdpInterfaceHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 7, 1, 6),
    _RcMplsLdpInterfaceHelloInterval_Type()
)
rcMplsLdpInterfaceHelloInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpInterfaceHelloInterval.setStatus("current")
_RcMplsLdpStatsTable_Object = MibTable
rcMplsLdpStatsTable = _RcMplsLdpStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8)
)
if mibBuilder.loadTexts:
    rcMplsLdpStatsTable.setStatus("current")
_RcMplsLdpStatsEntry_Object = MibTableRow
rcMplsLdpStatsEntry = _RcMplsLdpStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1)
)
rcMplsLdpStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMplsLdpStatsPeerAddress"),
)
if mibBuilder.loadTexts:
    rcMplsLdpStatsEntry.setStatus("current")
_RcMplsLdpStatsPeerAddress_Type = IpAddress
_RcMplsLdpStatsPeerAddress_Object = MibTableColumn
rcMplsLdpStatsPeerAddress = _RcMplsLdpStatsPeerAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 1),
    _RcMplsLdpStatsPeerAddress_Type()
)
rcMplsLdpStatsPeerAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMplsLdpStatsPeerAddress.setStatus("current")
_RcMplsLdpStatsNotifyRecv_Type = Counter32
_RcMplsLdpStatsNotifyRecv_Object = MibTableColumn
rcMplsLdpStatsNotifyRecv = _RcMplsLdpStatsNotifyRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 2),
    _RcMplsLdpStatsNotifyRecv_Type()
)
rcMplsLdpStatsNotifyRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsNotifyRecv.setStatus("current")
_RcMplsLdpStatsNotifySent_Type = Counter32
_RcMplsLdpStatsNotifySent_Object = MibTableColumn
rcMplsLdpStatsNotifySent = _RcMplsLdpStatsNotifySent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 3),
    _RcMplsLdpStatsNotifySent_Type()
)
rcMplsLdpStatsNotifySent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsNotifySent.setStatus("current")
_RcMplsLdpStatsHelloRecv_Type = Counter32
_RcMplsLdpStatsHelloRecv_Object = MibTableColumn
rcMplsLdpStatsHelloRecv = _RcMplsLdpStatsHelloRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 4),
    _RcMplsLdpStatsHelloRecv_Type()
)
rcMplsLdpStatsHelloRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsHelloRecv.setStatus("current")
_RcMplsLdpStatsHelloSent_Type = Counter32
_RcMplsLdpStatsHelloSent_Object = MibTableColumn
rcMplsLdpStatsHelloSent = _RcMplsLdpStatsHelloSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 5),
    _RcMplsLdpStatsHelloSent_Type()
)
rcMplsLdpStatsHelloSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsHelloSent.setStatus("current")
_RcMplsLdpStatsInitRecv_Type = Counter32
_RcMplsLdpStatsInitRecv_Object = MibTableColumn
rcMplsLdpStatsInitRecv = _RcMplsLdpStatsInitRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 6),
    _RcMplsLdpStatsInitRecv_Type()
)
rcMplsLdpStatsInitRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsInitRecv.setStatus("current")
_RcMplsLdpStatsInitSent_Type = Counter32
_RcMplsLdpStatsInitSent_Object = MibTableColumn
rcMplsLdpStatsInitSent = _RcMplsLdpStatsInitSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 7),
    _RcMplsLdpStatsInitSent_Type()
)
rcMplsLdpStatsInitSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsInitSent.setStatus("current")
_RcMplsLdpStatsKeepRecv_Type = Counter32
_RcMplsLdpStatsKeepRecv_Object = MibTableColumn
rcMplsLdpStatsKeepRecv = _RcMplsLdpStatsKeepRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 8),
    _RcMplsLdpStatsKeepRecv_Type()
)
rcMplsLdpStatsKeepRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsKeepRecv.setStatus("current")
_RcMplsLdpStatsKeepSent_Type = Counter32
_RcMplsLdpStatsKeepSent_Object = MibTableColumn
rcMplsLdpStatsKeepSent = _RcMplsLdpStatsKeepSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 9),
    _RcMplsLdpStatsKeepSent_Type()
)
rcMplsLdpStatsKeepSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsKeepSent.setStatus("current")
_RcMplsLdpStatsAddrRecv_Type = Counter32
_RcMplsLdpStatsAddrRecv_Object = MibTableColumn
rcMplsLdpStatsAddrRecv = _RcMplsLdpStatsAddrRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 10),
    _RcMplsLdpStatsAddrRecv_Type()
)
rcMplsLdpStatsAddrRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsAddrRecv.setStatus("current")
_RcMplsLdpStatsAddrSent_Type = Counter32
_RcMplsLdpStatsAddrSent_Object = MibTableColumn
rcMplsLdpStatsAddrSent = _RcMplsLdpStatsAddrSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 11),
    _RcMplsLdpStatsAddrSent_Type()
)
rcMplsLdpStatsAddrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsAddrSent.setStatus("current")
_RcMplsLdpStatsAddrWdrRecv_Type = Counter32
_RcMplsLdpStatsAddrWdrRecv_Object = MibTableColumn
rcMplsLdpStatsAddrWdrRecv = _RcMplsLdpStatsAddrWdrRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 12),
    _RcMplsLdpStatsAddrWdrRecv_Type()
)
rcMplsLdpStatsAddrWdrRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsAddrWdrRecv.setStatus("current")
_RcMplsLdpStatsAddrWdrSent_Type = Counter32
_RcMplsLdpStatsAddrWdrSent_Object = MibTableColumn
rcMplsLdpStatsAddrWdrSent = _RcMplsLdpStatsAddrWdrSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 13),
    _RcMplsLdpStatsAddrWdrSent_Type()
)
rcMplsLdpStatsAddrWdrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsAddrWdrSent.setStatus("current")
_RcMplsLdpStatsLabelMapRecv_Type = Counter32
_RcMplsLdpStatsLabelMapRecv_Object = MibTableColumn
rcMplsLdpStatsLabelMapRecv = _RcMplsLdpStatsLabelMapRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 14),
    _RcMplsLdpStatsLabelMapRecv_Type()
)
rcMplsLdpStatsLabelMapRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelMapRecv.setStatus("current")
_RcMplsLdpStatsLabelMapSent_Type = Counter32
_RcMplsLdpStatsLabelMapSent_Object = MibTableColumn
rcMplsLdpStatsLabelMapSent = _RcMplsLdpStatsLabelMapSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 15),
    _RcMplsLdpStatsLabelMapSent_Type()
)
rcMplsLdpStatsLabelMapSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelMapSent.setStatus("current")
_RcMplsLdpStatsLabelReqRecv_Type = Counter32
_RcMplsLdpStatsLabelReqRecv_Object = MibTableColumn
rcMplsLdpStatsLabelReqRecv = _RcMplsLdpStatsLabelReqRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 16),
    _RcMplsLdpStatsLabelReqRecv_Type()
)
rcMplsLdpStatsLabelReqRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelReqRecv.setStatus("current")
_RcMplsLdpStatsLabelReqSent_Type = Counter32
_RcMplsLdpStatsLabelReqSent_Object = MibTableColumn
rcMplsLdpStatsLabelReqSent = _RcMplsLdpStatsLabelReqSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 17),
    _RcMplsLdpStatsLabelReqSent_Type()
)
rcMplsLdpStatsLabelReqSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelReqSent.setStatus("current")
_RcMplsLdpStatsLabelWdrRecv_Type = Counter32
_RcMplsLdpStatsLabelWdrRecv_Object = MibTableColumn
rcMplsLdpStatsLabelWdrRecv = _RcMplsLdpStatsLabelWdrRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 18),
    _RcMplsLdpStatsLabelWdrRecv_Type()
)
rcMplsLdpStatsLabelWdrRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelWdrRecv.setStatus("current")
_RcMplsLdpStatsLabelWdrSent_Type = Counter32
_RcMplsLdpStatsLabelWdrSent_Object = MibTableColumn
rcMplsLdpStatsLabelWdrSent = _RcMplsLdpStatsLabelWdrSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 19),
    _RcMplsLdpStatsLabelWdrSent_Type()
)
rcMplsLdpStatsLabelWdrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelWdrSent.setStatus("current")
_RcMplsLdpStatsLabelRelRecv_Type = Counter32
_RcMplsLdpStatsLabelRelRecv_Object = MibTableColumn
rcMplsLdpStatsLabelRelRecv = _RcMplsLdpStatsLabelRelRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 20),
    _RcMplsLdpStatsLabelRelRecv_Type()
)
rcMplsLdpStatsLabelRelRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelRelRecv.setStatus("current")
_RcMplsLdpStatsLabelRelSent_Type = Counter32
_RcMplsLdpStatsLabelRelSent_Object = MibTableColumn
rcMplsLdpStatsLabelRelSent = _RcMplsLdpStatsLabelRelSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 21),
    _RcMplsLdpStatsLabelRelSent_Type()
)
rcMplsLdpStatsLabelRelSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelRelSent.setStatus("current")
_RcMplsLdpStatsLabelAbrRecv_Type = Counter32
_RcMplsLdpStatsLabelAbrRecv_Object = MibTableColumn
rcMplsLdpStatsLabelAbrRecv = _RcMplsLdpStatsLabelAbrRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 22),
    _RcMplsLdpStatsLabelAbrRecv_Type()
)
rcMplsLdpStatsLabelAbrRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelAbrRecv.setStatus("current")
_RcMplsLdpStatsLabelAbrSent_Type = Counter32
_RcMplsLdpStatsLabelAbrSent_Object = MibTableColumn
rcMplsLdpStatsLabelAbrSent = _RcMplsLdpStatsLabelAbrSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 23),
    _RcMplsLdpStatsLabelAbrSent_Type()
)
rcMplsLdpStatsLabelAbrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsLabelAbrSent.setStatus("current")
_RcMplsLdpStatsSessionUp_Type = Counter32
_RcMplsLdpStatsSessionUp_Object = MibTableColumn
rcMplsLdpStatsSessionUp = _RcMplsLdpStatsSessionUp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 24),
    _RcMplsLdpStatsSessionUp_Type()
)
rcMplsLdpStatsSessionUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionUp.setStatus("current")
_RcMplsLdpStatsSessionDown_Type = Counter32
_RcMplsLdpStatsSessionDown_Object = MibTableColumn
rcMplsLdpStatsSessionDown = _RcMplsLdpStatsSessionDown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 25),
    _RcMplsLdpStatsSessionDown_Type()
)
rcMplsLdpStatsSessionDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionDown.setStatus("current")
_RcMplsLdpStatsBadLdpIdentifierErrors_Type = Counter32
_RcMplsLdpStatsBadLdpIdentifierErrors_Object = MibTableColumn
rcMplsLdpStatsBadLdpIdentifierErrors = _RcMplsLdpStatsBadLdpIdentifierErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 26),
    _RcMplsLdpStatsBadLdpIdentifierErrors_Type()
)
rcMplsLdpStatsBadLdpIdentifierErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsBadLdpIdentifierErrors.setStatus("current")
_RcMplsLdpStatsBadPduLengthErrors_Type = Counter32
_RcMplsLdpStatsBadPduLengthErrors_Object = MibTableColumn
rcMplsLdpStatsBadPduLengthErrors = _RcMplsLdpStatsBadPduLengthErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 27),
    _RcMplsLdpStatsBadPduLengthErrors_Type()
)
rcMplsLdpStatsBadPduLengthErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsBadPduLengthErrors.setStatus("current")
_RcMplsLdpStatsBadMessageLengthErrors_Type = Counter32
_RcMplsLdpStatsBadMessageLengthErrors_Object = MibTableColumn
rcMplsLdpStatsBadMessageLengthErrors = _RcMplsLdpStatsBadMessageLengthErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 28),
    _RcMplsLdpStatsBadMessageLengthErrors_Type()
)
rcMplsLdpStatsBadMessageLengthErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsBadMessageLengthErrors.setStatus("current")
_RcMplsLdpStatsUnknownMessageErrors_Type = Counter32
_RcMplsLdpStatsUnknownMessageErrors_Object = MibTableColumn
rcMplsLdpStatsUnknownMessageErrors = _RcMplsLdpStatsUnknownMessageErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 29),
    _RcMplsLdpStatsUnknownMessageErrors_Type()
)
rcMplsLdpStatsUnknownMessageErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsUnknownMessageErrors.setStatus("current")
_RcMplsLdpStatsUnknownTlvErrors_Type = Counter32
_RcMplsLdpStatsUnknownTlvErrors_Object = MibTableColumn
rcMplsLdpStatsUnknownTlvErrors = _RcMplsLdpStatsUnknownTlvErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 30),
    _RcMplsLdpStatsUnknownTlvErrors_Type()
)
rcMplsLdpStatsUnknownTlvErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsUnknownTlvErrors.setStatus("current")
_RcMplsLdpStatsBadTlvLengthErrors_Type = Counter32
_RcMplsLdpStatsBadTlvLengthErrors_Object = MibTableColumn
rcMplsLdpStatsBadTlvLengthErrors = _RcMplsLdpStatsBadTlvLengthErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 31),
    _RcMplsLdpStatsBadTlvLengthErrors_Type()
)
rcMplsLdpStatsBadTlvLengthErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsBadTlvLengthErrors.setStatus("current")
_RcMplsLdpStatsMalformedTlvValueErrors_Type = Counter32
_RcMplsLdpStatsMalformedTlvValueErrors_Object = MibTableColumn
rcMplsLdpStatsMalformedTlvValueErrors = _RcMplsLdpStatsMalformedTlvValueErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 32),
    _RcMplsLdpStatsMalformedTlvValueErrors_Type()
)
rcMplsLdpStatsMalformedTlvValueErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsMalformedTlvValueErrors.setStatus("current")
_RcMplsLdpStatsHoldTimerExpErrors_Type = Counter32
_RcMplsLdpStatsHoldTimerExpErrors_Object = MibTableColumn
rcMplsLdpStatsHoldTimerExpErrors = _RcMplsLdpStatsHoldTimerExpErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 33),
    _RcMplsLdpStatsHoldTimerExpErrors_Type()
)
rcMplsLdpStatsHoldTimerExpErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsHoldTimerExpErrors.setStatus("current")
_RcMplsLdpStatsSessionRejectedNoHelloErrors_Type = Counter32
_RcMplsLdpStatsSessionRejectedNoHelloErrors_Object = MibTableColumn
rcMplsLdpStatsSessionRejectedNoHelloErrors = _RcMplsLdpStatsSessionRejectedNoHelloErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 34),
    _RcMplsLdpStatsSessionRejectedNoHelloErrors_Type()
)
rcMplsLdpStatsSessionRejectedNoHelloErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionRejectedNoHelloErrors.setStatus("current")
_RcMplsLdpStatsSessionRejectedBadParmAdvErrors_Type = Counter32
_RcMplsLdpStatsSessionRejectedBadParmAdvErrors_Object = MibTableColumn
rcMplsLdpStatsSessionRejectedBadParmAdvErrors = _RcMplsLdpStatsSessionRejectedBadParmAdvErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 35),
    _RcMplsLdpStatsSessionRejectedBadParmAdvErrors_Type()
)
rcMplsLdpStatsSessionRejectedBadParmAdvErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionRejectedBadParmAdvErrors.setStatus("current")
_RcMplsLdpStatsSessionRejectedMaxPduErrors_Type = Counter32
_RcMplsLdpStatsSessionRejectedMaxPduErrors_Object = MibTableColumn
rcMplsLdpStatsSessionRejectedMaxPduErrors = _RcMplsLdpStatsSessionRejectedMaxPduErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 36),
    _RcMplsLdpStatsSessionRejectedMaxPduErrors_Type()
)
rcMplsLdpStatsSessionRejectedMaxPduErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionRejectedMaxPduErrors.setStatus("current")
_RcMplsLdpStatsSessionRejectedBadLabelRangeErrors_Type = Counter32
_RcMplsLdpStatsSessionRejectedBadLabelRangeErrors_Object = MibTableColumn
rcMplsLdpStatsSessionRejectedBadLabelRangeErrors = _RcMplsLdpStatsSessionRejectedBadLabelRangeErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 37),
    _RcMplsLdpStatsSessionRejectedBadLabelRangeErrors_Type()
)
rcMplsLdpStatsSessionRejectedBadLabelRangeErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionRejectedBadLabelRangeErrors.setStatus("current")
_RcMplsLdpStatsSessionRejectedSetupAbortErrors_Type = Counter32
_RcMplsLdpStatsSessionRejectedSetupAbortErrors_Object = MibTableColumn
rcMplsLdpStatsSessionRejectedSetupAbortErrors = _RcMplsLdpStatsSessionRejectedSetupAbortErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 38),
    _RcMplsLdpStatsSessionRejectedSetupAbortErrors_Type()
)
rcMplsLdpStatsSessionRejectedSetupAbortErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionRejectedSetupAbortErrors.setStatus("current")
_RcMplsLdpStatsSessionRejectedBadKeepaliveErrors_Type = Counter32
_RcMplsLdpStatsSessionRejectedBadKeepaliveErrors_Object = MibTableColumn
rcMplsLdpStatsSessionRejectedBadKeepaliveErrors = _RcMplsLdpStatsSessionRejectedBadKeepaliveErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 39),
    _RcMplsLdpStatsSessionRejectedBadKeepaliveErrors_Type()
)
rcMplsLdpStatsSessionRejectedBadKeepaliveErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionRejectedBadKeepaliveErrors.setStatus("current")
_RcMplsLdpStatsSessionOtherErrors_Type = Counter32
_RcMplsLdpStatsSessionOtherErrors_Object = MibTableColumn
rcMplsLdpStatsSessionOtherErrors = _RcMplsLdpStatsSessionOtherErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 40),
    _RcMplsLdpStatsSessionOtherErrors_Type()
)
rcMplsLdpStatsSessionOtherErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMplsLdpStatsSessionOtherErrors.setStatus("current")


class _RcMplsLdpStatsClear_Type(TruthValue):
    """Custom type rcMplsLdpStatsClear based on TruthValue"""


_RcMplsLdpStatsClear_Object = MibTableColumn
rcMplsLdpStatsClear = _RcMplsLdpStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 1, 3, 8, 1, 41),
    _RcMplsLdpStatsClear_Type()
)
rcMplsLdpStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpStatsClear.setStatus("current")
_RcMplsNotificationObjects_ObjectIdentity = ObjectIdentity
rcMplsNotificationObjects = _RcMplsNotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 2)
)


class _RcMplsLdpStatusNotificationEnable_Type(TruthValue):
    """Custom type rcMplsLdpStatusNotificationEnable based on TruthValue"""


_RcMplsLdpStatusNotificationEnable_Object = MibScalar
rcMplsLdpStatusNotificationEnable = _RcMplsLdpStatusNotificationEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 2, 1),
    _RcMplsLdpStatusNotificationEnable_Type()
)
rcMplsLdpStatusNotificationEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpStatusNotificationEnable.setStatus("current")


class _RcMplsLdpSessionThresholdNotificationEnable_Type(TruthValue):
    """Custom type rcMplsLdpSessionThresholdNotificationEnable based on TruthValue"""


_RcMplsLdpSessionThresholdNotificationEnable_Object = MibScalar
rcMplsLdpSessionThresholdNotificationEnable = _RcMplsLdpSessionThresholdNotificationEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 2, 2),
    _RcMplsLdpSessionThresholdNotificationEnable_Type()
)
rcMplsLdpSessionThresholdNotificationEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpSessionThresholdNotificationEnable.setStatus("current")


class _RcMplsLdpPathVectorLimitNotificationEnable_Type(TruthValue):
    """Custom type rcMplsLdpPathVectorLimitNotificationEnable based on TruthValue"""


_RcMplsLdpPathVectorLimitNotificationEnable_Object = MibScalar
rcMplsLdpPathVectorLimitNotificationEnable = _RcMplsLdpPathVectorLimitNotificationEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 74, 1, 2, 3),
    _RcMplsLdpPathVectorLimitNotificationEnable_Type()
)
rcMplsLdpPathVectorLimitNotificationEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMplsLdpPathVectorLimitNotificationEnable.setStatus("current")
_RcIpMRoute_ObjectIdentity = ObjectIdentity
rcIpMRoute = _RcIpMRoute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76)
)
_RcIpMRouteMIBObjects_ObjectIdentity = ObjectIdentity
rcIpMRouteMIBObjects = _RcIpMRouteMIBObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1)
)
_RcIpMRouteScalars_ObjectIdentity = ObjectIdentity
rcIpMRouteScalars = _RcIpMRouteScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 1)
)


class _RcIpMRouteStatsEnabled_Type(TruthValue):
    """Custom type rcIpMRouteStatsEnabled based on TruthValue"""


_RcIpMRouteStatsEnabled_Object = MibScalar
rcIpMRouteStatsEnabled = _RcIpMRouteStatsEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 1, 2),
    _RcIpMRouteStatsEnabled_Type()
)
rcIpMRouteStatsEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMRouteStatsEnabled.setStatus("current")


class _RcIpMRouteStatsClear_Type(TruthValue):
    """Custom type rcIpMRouteStatsClear based on TruthValue"""


_RcIpMRouteStatsClear_Object = MibScalar
rcIpMRouteStatsClear = _RcIpMRouteStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 1, 3),
    _RcIpMRouteStatsClear_Type()
)
rcIpMRouteStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIpMRouteStatsClear.setStatus("current")
_RcIpMRouteStatsTable_Object = MibTable
rcIpMRouteStatsTable = _RcIpMRouteStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6)
)
if mibBuilder.loadTexts:
    rcIpMRouteStatsTable.setStatus("current")
_RcIpMRouteStatsEntry_Object = MibTableRow
rcIpMRouteStatsEntry = _RcIpMRouteStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1)
)
rcIpMRouteStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcIpMRouteStatsGroupAddress"),
)
if mibBuilder.loadTexts:
    rcIpMRouteStatsEntry.setStatus("current")
_RcIpMRouteStatsGroupAddress_Type = IpAddress
_RcIpMRouteStatsGroupAddress_Object = MibTableColumn
rcIpMRouteStatsGroupAddress = _RcIpMRouteStatsGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1, 1),
    _RcIpMRouteStatsGroupAddress_Type()
)
rcIpMRouteStatsGroupAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIpMRouteStatsGroupAddress.setStatus("current")
_RcIpMRouteStatsSourceCount_Type = Counter32
_RcIpMRouteStatsSourceCount_Object = MibTableColumn
rcIpMRouteStatsSourceCount = _RcIpMRouteStatsSourceCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1, 2),
    _RcIpMRouteStatsSourceCount_Type()
)
rcIpMRouteStatsSourceCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMRouteStatsSourceCount.setStatus("current")
_RcIpMRouteStatsPkts_Type = Counter64
_RcIpMRouteStatsPkts_Object = MibTableColumn
rcIpMRouteStatsPkts = _RcIpMRouteStatsPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1, 3),
    _RcIpMRouteStatsPkts_Type()
)
rcIpMRouteStatsPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMRouteStatsPkts.setStatus("current")
_RcIpMRouteStatsBytes_Type = Counter64
_RcIpMRouteStatsBytes_Object = MibTableColumn
rcIpMRouteStatsBytes = _RcIpMRouteStatsBytes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1, 4),
    _RcIpMRouteStatsBytes_Type()
)
rcIpMRouteStatsBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMRouteStatsBytes.setStatus("current")
_RcIpMRouteStatsAverageSizePerPkt_Type = Integer32
_RcIpMRouteStatsAverageSizePerPkt_Object = MibTableColumn
rcIpMRouteStatsAverageSizePerPkt = _RcIpMRouteStatsAverageSizePerPkt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1, 5),
    _RcIpMRouteStatsAverageSizePerPkt_Type()
)
rcIpMRouteStatsAverageSizePerPkt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMRouteStatsAverageSizePerPkt.setStatus("current")
_RcIpMRouteStatsDropPkts_Type = Counter64
_RcIpMRouteStatsDropPkts_Object = MibTableColumn
rcIpMRouteStatsDropPkts = _RcIpMRouteStatsDropPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1, 6),
    _RcIpMRouteStatsDropPkts_Type()
)
rcIpMRouteStatsDropPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMRouteStatsDropPkts.setStatus("current")
_RcIpMRouteStatsDropBytes_Type = Counter64
_RcIpMRouteStatsDropBytes_Object = MibTableColumn
rcIpMRouteStatsDropBytes = _RcIpMRouteStatsDropBytes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1, 7),
    _RcIpMRouteStatsDropBytes_Type()
)
rcIpMRouteStatsDropBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMRouteStatsDropBytes.setStatus("current")
_RcIpMRouteStatsPktsPerSecond_Type = Integer32
_RcIpMRouteStatsPktsPerSecond_Object = MibTableColumn
rcIpMRouteStatsPktsPerSecond = _RcIpMRouteStatsPktsPerSecond_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 76, 1, 6, 1, 8),
    _RcIpMRouteStatsPktsPerSecond_Type()
)
rcIpMRouteStatsPktsPerSecond.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcIpMRouteStatsPktsPerSecond.setStatus("current")
_RcPlsb_ObjectIdentity = ObjectIdentity
rcPlsb = _RcPlsb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 78)
)
_RcPlsbGlobal_ObjectIdentity = ObjectIdentity
rcPlsbGlobal = _RcPlsbGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 78, 1)
)


class _RcPlsbGlobalVlans_Type(OctetString):
    """Custom type rcPlsbGlobalVlans based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(512, 512),
    )


_RcPlsbGlobalVlans_Type.__name__ = "OctetString"
_RcPlsbGlobalVlans_Object = MibScalar
rcPlsbGlobalVlans = _RcPlsbGlobalVlans_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 78, 1, 1),
    _RcPlsbGlobalVlans_Type()
)
rcPlsbGlobalVlans.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPlsbGlobalVlans.setStatus("current")


class _RcPlsbGlobalEnable_Type(EnableValue):
    """Custom type rcPlsbGlobalEnable based on EnableValue"""


_RcPlsbGlobalEnable_Object = MibScalar
rcPlsbGlobalEnable = _RcPlsbGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 78, 1, 2),
    _RcPlsbGlobalEnable_Type()
)
rcPlsbGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPlsbGlobalEnable.setStatus("current")


class _RcPlsbGlobalMsti_Type(Integer32):
    """Custom type rcPlsbGlobalMsti based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcPlsbGlobalMsti_Type.__name__ = "Integer32"
_RcPlsbGlobalMsti_Object = MibScalar
rcPlsbGlobalMsti = _RcPlsbGlobalMsti_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 78, 1, 3),
    _RcPlsbGlobalMsti_Type()
)
rcPlsbGlobalMsti.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPlsbGlobalMsti.setStatus("current")


class _RcPlsbGlobalEtherType_Type(Integer32):
    """Custom type rcPlsbGlobalEtherType based on Integer32"""
    defaultHexValue = 33024

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RcPlsbGlobalEtherType_Type.__name__ = "Integer32"
_RcPlsbGlobalEtherType_Object = MibScalar
rcPlsbGlobalEtherType = _RcPlsbGlobalEtherType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 78, 1, 4),
    _RcPlsbGlobalEtherType_Type()
)
rcPlsbGlobalEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPlsbGlobalEtherType.setStatus("current")
_RcMsdp_ObjectIdentity = ObjectIdentity
rcMsdp = _RcMsdp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80)
)
_RcMsdpMib_ObjectIdentity = ObjectIdentity
rcMsdpMib = _RcMsdpMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1)
)
_RcMsdpNotifications_ObjectIdentity = ObjectIdentity
rcMsdpNotifications = _RcMsdpNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0)
)
_RcMsdpObjects_ObjectIdentity = ObjectIdentity
rcMsdpObjects = _RcMsdpObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1)
)
_RcMsdpScalars_ObjectIdentity = ObjectIdentity
rcMsdpScalars = _RcMsdpScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 1)
)


class _RcMsdpRouteMapName_Type(SnmpAdminString):
    """Custom type rcMsdpRouteMapName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcMsdpRouteMapName_Type.__name__ = "SnmpAdminString"
_RcMsdpRouteMapName_Object = MibScalar
rcMsdpRouteMapName = _RcMsdpRouteMapName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 1, 1),
    _RcMsdpRouteMapName_Type()
)
rcMsdpRouteMapName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMsdpRouteMapName.setStatus("current")


class _RcMsdpRedistributeFilterEnabled_Type(TruthValue):
    """Custom type rcMsdpRedistributeFilterEnabled based on TruthValue"""


_RcMsdpRedistributeFilterEnabled_Object = MibScalar
rcMsdpRedistributeFilterEnabled = _RcMsdpRedistributeFilterEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 1, 2),
    _RcMsdpRedistributeFilterEnabled_Type()
)
rcMsdpRedistributeFilterEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMsdpRedistributeFilterEnabled.setStatus("current")


class _RcMsdpRedistributeFilterApply_Type(TruthValue):
    """Custom type rcMsdpRedistributeFilterApply based on TruthValue"""


_RcMsdpRedistributeFilterApply_Object = MibScalar
rcMsdpRedistributeFilterApply = _RcMsdpRedistributeFilterApply_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 1, 3),
    _RcMsdpRedistributeFilterApply_Type()
)
rcMsdpRedistributeFilterApply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMsdpRedistributeFilterApply.setStatus("current")


class _RcMsdpImplicitDefaultPeerEnabled_Type(TruthValue):
    """Custom type rcMsdpImplicitDefaultPeerEnabled based on TruthValue"""


_RcMsdpImplicitDefaultPeerEnabled_Object = MibScalar
rcMsdpImplicitDefaultPeerEnabled = _RcMsdpImplicitDefaultPeerEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 1, 4),
    _RcMsdpImplicitDefaultPeerEnabled_Type()
)
rcMsdpImplicitDefaultPeerEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMsdpImplicitDefaultPeerEnabled.setStatus("current")


class _RcMsdpSACacheStatsClear_Type(TruthValue):
    """Custom type rcMsdpSACacheStatsClear based on TruthValue"""


_RcMsdpSACacheStatsClear_Object = MibScalar
rcMsdpSACacheStatsClear = _RcMsdpSACacheStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 1, 5),
    _RcMsdpSACacheStatsClear_Type()
)
rcMsdpSACacheStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcMsdpSACacheStatsClear.setStatus("current")
_RcMsdpPeerTable_Object = MibTable
rcMsdpPeerTable = _RcMsdpPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcMsdpPeerTable.setStatus("current")
_RcMsdpPeerEntry_Object = MibTableRow
rcMsdpPeerEntry = _RcMsdpPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1)
)
if mibBuilder.loadTexts:
    rcMsdpPeerEntry.setStatus("current")


class _RcMsdpPeerAsNumber_Type(Integer32):
    """Custom type rcMsdpPeerAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 65535),
    )


_RcMsdpPeerAsNumber_Type.__name__ = "Integer32"
_RcMsdpPeerAsNumber_Object = MibTableColumn
rcMsdpPeerAsNumber = _RcMsdpPeerAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 1),
    _RcMsdpPeerAsNumber_Type()
)
rcMsdpPeerAsNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerAsNumber.setStatus("current")
_RcMsdpPeerTooShortMessages_Type = Counter32
_RcMsdpPeerTooShortMessages_Object = MibTableColumn
rcMsdpPeerTooShortMessages = _RcMsdpPeerTooShortMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 2),
    _RcMsdpPeerTooShortMessages_Type()
)
rcMsdpPeerTooShortMessages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerTooShortMessages.setStatus("current")
_RcMsdpPeerInBadMessages_Type = Counter32
_RcMsdpPeerInBadMessages_Object = MibTableColumn
rcMsdpPeerInBadMessages = _RcMsdpPeerInBadMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 3),
    _RcMsdpPeerInBadMessages_Type()
)
rcMsdpPeerInBadMessages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerInBadMessages.setStatus("current")
_RcMsdpPeerInKeepAliveMessages_Type = Counter32
_RcMsdpPeerInKeepAliveMessages_Object = MibTableColumn
rcMsdpPeerInKeepAliveMessages = _RcMsdpPeerInKeepAliveMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 4),
    _RcMsdpPeerInKeepAliveMessages_Type()
)
rcMsdpPeerInKeepAliveMessages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerInKeepAliveMessages.setStatus("current")
_RcMsdpPeerOutKeepAliveMessages_Type = Counter32
_RcMsdpPeerOutKeepAliveMessages_Object = MibTableColumn
rcMsdpPeerOutKeepAliveMessages = _RcMsdpPeerOutKeepAliveMessages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 5),
    _RcMsdpPeerOutKeepAliveMessages_Type()
)
rcMsdpPeerOutKeepAliveMessages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerOutKeepAliveMessages.setStatus("current")


class _RcMsdpPeerInSAFilterEnabled_Type(TruthValue):
    """Custom type rcMsdpPeerInSAFilterEnabled based on TruthValue"""


_RcMsdpPeerInSAFilterEnabled_Object = MibTableColumn
rcMsdpPeerInSAFilterEnabled = _RcMsdpPeerInSAFilterEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 6),
    _RcMsdpPeerInSAFilterEnabled_Type()
)
rcMsdpPeerInSAFilterEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerInSAFilterEnabled.setStatus("current")


class _RcMsdpPeerInSAFilterRouteMapName_Type(SnmpAdminString):
    """Custom type rcMsdpPeerInSAFilterRouteMapName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcMsdpPeerInSAFilterRouteMapName_Type.__name__ = "SnmpAdminString"
_RcMsdpPeerInSAFilterRouteMapName_Object = MibTableColumn
rcMsdpPeerInSAFilterRouteMapName = _RcMsdpPeerInSAFilterRouteMapName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 7),
    _RcMsdpPeerInSAFilterRouteMapName_Type()
)
rcMsdpPeerInSAFilterRouteMapName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerInSAFilterRouteMapName.setStatus("current")


class _RcMsdpPeerOutSAFilterEnabled_Type(TruthValue):
    """Custom type rcMsdpPeerOutSAFilterEnabled based on TruthValue"""


_RcMsdpPeerOutSAFilterEnabled_Object = MibTableColumn
rcMsdpPeerOutSAFilterEnabled = _RcMsdpPeerOutSAFilterEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 8),
    _RcMsdpPeerOutSAFilterEnabled_Type()
)
rcMsdpPeerOutSAFilterEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerOutSAFilterEnabled.setStatus("current")


class _RcMsdpPeerOutSAFilterRouteMapName_Type(SnmpAdminString):
    """Custom type rcMsdpPeerOutSAFilterRouteMapName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcMsdpPeerOutSAFilterRouteMapName_Type.__name__ = "SnmpAdminString"
_RcMsdpPeerOutSAFilterRouteMapName_Object = MibTableColumn
rcMsdpPeerOutSAFilterRouteMapName = _RcMsdpPeerOutSAFilterRouteMapName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 9),
    _RcMsdpPeerOutSAFilterRouteMapName_Type()
)
rcMsdpPeerOutSAFilterRouteMapName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerOutSAFilterRouteMapName.setStatus("current")
_RcMsdpPeerDescription_Type = SnmpAdminString
_RcMsdpPeerDescription_Object = MibTableColumn
rcMsdpPeerDescription = _RcMsdpPeerDescription_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 10),
    _RcMsdpPeerDescription_Type()
)
rcMsdpPeerDescription.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerDescription.setStatus("current")


class _RcMsdpPeerSALimit_Type(Unsigned32):
    """Custom type rcMsdpPeerSALimit based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6144),
    )


_RcMsdpPeerSALimit_Type.__name__ = "Unsigned32"
_RcMsdpPeerSALimit_Object = MibTableColumn
rcMsdpPeerSALimit = _RcMsdpPeerSALimit_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 11),
    _RcMsdpPeerSALimit_Type()
)
rcMsdpPeerSALimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerSALimit.setStatus("current")


class _RcMsdpPeerMd5AuthEnabled_Type(TruthValue):
    """Custom type rcMsdpPeerMd5AuthEnabled based on TruthValue"""


_RcMsdpPeerMd5AuthEnabled_Object = MibTableColumn
rcMsdpPeerMd5AuthEnabled = _RcMsdpPeerMd5AuthEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 12),
    _RcMsdpPeerMd5AuthEnabled_Type()
)
rcMsdpPeerMd5AuthEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerMd5AuthEnabled.setStatus("current")


class _RcMsdpPeerMd5AuthPassword_Type(SnmpAdminString):
    """Custom type rcMsdpPeerMd5AuthPassword based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_RcMsdpPeerMd5AuthPassword_Type.__name__ = "SnmpAdminString"
_RcMsdpPeerMd5AuthPassword_Object = MibTableColumn
rcMsdpPeerMd5AuthPassword = _RcMsdpPeerMd5AuthPassword_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 13),
    _RcMsdpPeerMd5AuthPassword_Type()
)
rcMsdpPeerMd5AuthPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerMd5AuthPassword.setStatus("current")
_RcMsdpPeerSAsLearnedFromThisPeer_Type = Counter32
_RcMsdpPeerSAsLearnedFromThisPeer_Object = MibTableColumn
rcMsdpPeerSAsLearnedFromThisPeer = _RcMsdpPeerSAsLearnedFromThisPeer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 14),
    _RcMsdpPeerSAsLearnedFromThisPeer_Type()
)
rcMsdpPeerSAsLearnedFromThisPeer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerSAsLearnedFromThisPeer.setStatus("current")
_RcMsdpPeerSAsAdvertisedToThisPeer_Type = Counter32
_RcMsdpPeerSAsAdvertisedToThisPeer_Object = MibTableColumn
rcMsdpPeerSAsAdvertisedToThisPeer = _RcMsdpPeerSAsAdvertisedToThisPeer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 15),
    _RcMsdpPeerSAsAdvertisedToThisPeer_Type()
)
rcMsdpPeerSAsAdvertisedToThisPeer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerSAsAdvertisedToThisPeer.setStatus("current")
_RcMsdpPeerUpOrDownTime_Type = TimeTicks
_RcMsdpPeerUpOrDownTime_Object = MibTableColumn
rcMsdpPeerUpOrDownTime = _RcMsdpPeerUpOrDownTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 16),
    _RcMsdpPeerUpOrDownTime_Type()
)
rcMsdpPeerUpOrDownTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerUpOrDownTime.setStatus("current")
_RcMsdpPeerConnAndStatsClearedTime_Type = TimeTicks
_RcMsdpPeerConnAndStatsClearedTime_Object = MibTableColumn
rcMsdpPeerConnAndStatsClearedTime = _RcMsdpPeerConnAndStatsClearedTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 17),
    _RcMsdpPeerConnAndStatsClearedTime_Type()
)
rcMsdpPeerConnAndStatsClearedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerConnAndStatsClearedTime.setStatus("current")


class _RcMsdpPeerRouteMapName_Type(SnmpAdminString):
    """Custom type rcMsdpPeerRouteMapName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcMsdpPeerRouteMapName_Type.__name__ = "SnmpAdminString"
_RcMsdpPeerRouteMapName_Object = MibTableColumn
rcMsdpPeerRouteMapName = _RcMsdpPeerRouteMapName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 18),
    _RcMsdpPeerRouteMapName_Type()
)
rcMsdpPeerRouteMapName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerRouteMapName.setStatus("current")


class _RcMsdpPeerAdminEnabled_Type(TruthValue):
    """Custom type rcMsdpPeerAdminEnabled based on TruthValue"""


_RcMsdpPeerAdminEnabled_Object = MibTableColumn
rcMsdpPeerAdminEnabled = _RcMsdpPeerAdminEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 19),
    _RcMsdpPeerAdminEnabled_Type()
)
rcMsdpPeerAdminEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerAdminEnabled.setStatus("current")
_RcMsdpPeerOperEnabled_Type = TruthValue
_RcMsdpPeerOperEnabled_Object = MibTableColumn
rcMsdpPeerOperEnabled = _RcMsdpPeerOperEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 20),
    _RcMsdpPeerOperEnabled_Type()
)
rcMsdpPeerOperEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerOperEnabled.setStatus("current")


class _RcMsdpPeerDefaultPeerState_Type(Integer32):
    """Custom type rcMsdpPeerDefaultPeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("configured", 1),
          ("operational", 2))
    )


_RcMsdpPeerDefaultPeerState_Type.__name__ = "Integer32"
_RcMsdpPeerDefaultPeerState_Object = MibTableColumn
rcMsdpPeerDefaultPeerState = _RcMsdpPeerDefaultPeerState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 21),
    _RcMsdpPeerDefaultPeerState_Type()
)
rcMsdpPeerDefaultPeerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpPeerDefaultPeerState.setStatus("current")


class _RcMsdpPeerDefaultPeer_Type(TruthValue):
    """Custom type rcMsdpPeerDefaultPeer based on TruthValue"""


_RcMsdpPeerDefaultPeer_Object = MibTableColumn
rcMsdpPeerDefaultPeer = _RcMsdpPeerDefaultPeer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 2, 1, 22),
    _RcMsdpPeerDefaultPeer_Type()
)
rcMsdpPeerDefaultPeer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcMsdpPeerDefaultPeer.setStatus("current")
_RcMsdpSACacheTable_Object = MibTable
rcMsdpSACacheTable = _RcMsdpSACacheTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 3)
)
if mibBuilder.loadTexts:
    rcMsdpSACacheTable.setStatus("current")
_RcMsdpSACacheEntry_Object = MibTableRow
rcMsdpSACacheEntry = _RcMsdpSACacheEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 3, 1)
)
rcMsdpSACacheEntry.setIndexNames(
    (0, "RAPID-CITY", "rcMsdpSACacheGroupAddr"),
    (0, "RAPID-CITY", "rcMsdpSACacheSourceAddr"),
    (0, "RAPID-CITY", "rcMsdpSACacheOriginRP"),
    (0, "RAPID-CITY", "rcMsdpSACacheTypeInformation"),
)
if mibBuilder.loadTexts:
    rcMsdpSACacheEntry.setStatus("current")
_RcMsdpSACacheGroupAddr_Type = IpAddress
_RcMsdpSACacheGroupAddr_Object = MibTableColumn
rcMsdpSACacheGroupAddr = _RcMsdpSACacheGroupAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 3, 1, 1),
    _RcMsdpSACacheGroupAddr_Type()
)
rcMsdpSACacheGroupAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMsdpSACacheGroupAddr.setStatus("current")
_RcMsdpSACacheSourceAddr_Type = IpAddress
_RcMsdpSACacheSourceAddr_Object = MibTableColumn
rcMsdpSACacheSourceAddr = _RcMsdpSACacheSourceAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 3, 1, 2),
    _RcMsdpSACacheSourceAddr_Type()
)
rcMsdpSACacheSourceAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMsdpSACacheSourceAddr.setStatus("current")
_RcMsdpSACacheOriginRP_Type = IpAddress
_RcMsdpSACacheOriginRP_Object = MibTableColumn
rcMsdpSACacheOriginRP = _RcMsdpSACacheOriginRP_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 3, 1, 3),
    _RcMsdpSACacheOriginRP_Type()
)
rcMsdpSACacheOriginRP.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMsdpSACacheOriginRP.setStatus("current")


class _RcMsdpSACacheTypeInformation_Type(Integer32):
    """Custom type rcMsdpSACacheTypeInformation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("foreign", 2),
          ("local", 1))
    )


_RcMsdpSACacheTypeInformation_Type.__name__ = "Integer32"
_RcMsdpSACacheTypeInformation_Object = MibTableColumn
rcMsdpSACacheTypeInformation = _RcMsdpSACacheTypeInformation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 3, 1, 4),
    _RcMsdpSACacheTypeInformation_Type()
)
rcMsdpSACacheTypeInformation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcMsdpSACacheTypeInformation.setStatus("current")


class _RcMsdpSACacheOriginatorAsNumber_Type(Unsigned32):
    """Custom type rcMsdpSACacheOriginatorAsNumber based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RcMsdpSACacheOriginatorAsNumber_Type.__name__ = "Unsigned32"
_RcMsdpSACacheOriginatorAsNumber_Object = MibTableColumn
rcMsdpSACacheOriginatorAsNumber = _RcMsdpSACacheOriginatorAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 3, 1, 5),
    _RcMsdpSACacheOriginatorAsNumber_Type()
)
rcMsdpSACacheOriginatorAsNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpSACacheOriginatorAsNumber.setStatus("current")


class _RcMsdpSACacheRouteType_Type(Integer32):
    """Custom type rcMsdpSACacheRouteType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bgp", 4),
          ("ospf", 2),
          ("rip", 1),
          ("static", 3))
    )


_RcMsdpSACacheRouteType_Type.__name__ = "Integer32"
_RcMsdpSACacheRouteType_Object = MibTableColumn
rcMsdpSACacheRouteType = _RcMsdpSACacheRouteType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 1, 3, 1, 6),
    _RcMsdpSACacheRouteType_Type()
)
rcMsdpSACacheRouteType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcMsdpSACacheRouteType.setStatus("current")
_RcMsdpNotificationObjects_ObjectIdentity = ObjectIdentity
rcMsdpNotificationObjects = _RcMsdpNotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 2)
)


class _RcMsdpSACacheType_Type(Integer32):
    """Custom type rcMsdpSACacheType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("foreign", 2),
          ("local", 1))
    )


_RcMsdpSACacheType_Type.__name__ = "Integer32"
_RcMsdpSACacheType_Object = MibScalar
rcMsdpSACacheType = _RcMsdpSACacheType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 2, 1),
    _RcMsdpSACacheType_Type()
)
rcMsdpSACacheType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcMsdpSACacheType.setStatus("current")
_RcMsdpVrfId_Type = VrfIdentifier
_RcMsdpVrfId_Object = MibScalar
rcMsdpVrfId = _RcMsdpVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 2, 2),
    _RcMsdpVrfId_Type()
)
rcMsdpVrfId.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcMsdpVrfId.setStatus("current")
_RcBfd_ObjectIdentity = ObjectIdentity
rcBfd = _RcBfd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81)
)
_RcBfdTmpMib_ObjectIdentity = ObjectIdentity
rcBfdTmpMib = _RcBfdTmpMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1)
)
_RcBfdTmpNotifications_ObjectIdentity = ObjectIdentity
rcBfdTmpNotifications = _RcBfdTmpNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 0)
)
_RcBfdTmpObjects_ObjectIdentity = ObjectIdentity
rcBfdTmpObjects = _RcBfdTmpObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1)
)
_RcBfdTmpScalarObjects_ObjectIdentity = ObjectIdentity
rcBfdTmpScalarObjects = _RcBfdTmpScalarObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 1)
)


class _RcBfdTmpAdminStatus_Type(Integer32):
    """Custom type rcBfdTmpAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcBfdTmpAdminStatus_Type.__name__ = "Integer32"
_RcBfdTmpAdminStatus_Object = MibScalar
rcBfdTmpAdminStatus = _RcBfdTmpAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 1, 1),
    _RcBfdTmpAdminStatus_Type()
)
rcBfdTmpAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBfdTmpAdminStatus.setStatus("current")


class _RcBfdTmpVersionNumber_Type(Unsigned32):
    """Custom type rcBfdTmpVersionNumber based on Unsigned32"""
    defaultValue = 0


_RcBfdTmpVersionNumber_Object = MibScalar
rcBfdTmpVersionNumber = _RcBfdTmpVersionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 1, 3),
    _RcBfdTmpVersionNumber_Type()
)
rcBfdTmpVersionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpVersionNumber.setStatus("current")


class _RcBfdTmpSessNotificationsEnable_Type(TruthValue):
    """Custom type rcBfdTmpSessNotificationsEnable based on TruthValue"""


_RcBfdTmpSessNotificationsEnable_Object = MibScalar
rcBfdTmpSessNotificationsEnable = _RcBfdTmpSessNotificationsEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 1, 4),
    _RcBfdTmpSessNotificationsEnable_Type()
)
rcBfdTmpSessNotificationsEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcBfdTmpSessNotificationsEnable.setStatus("current")
_RcBfdTmpSessTable_Object = MibTable
rcBfdTmpSessTable = _RcBfdTmpSessTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcBfdTmpSessTable.setStatus("current")
_RcBfdTmpSessEntry_Object = MibTableRow
rcBfdTmpSessEntry = _RcBfdTmpSessEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1)
)
rcBfdTmpSessEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBfdTmpSessIndex"),
)
if mibBuilder.loadTexts:
    rcBfdTmpSessEntry.setStatus("current")
_RcBfdTmpSessIndex_Type = RcBfdTmpSessIndexTC
_RcBfdTmpSessIndex_Object = MibTableColumn
rcBfdTmpSessIndex = _RcBfdTmpSessIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 1),
    _RcBfdTmpSessIndex_Type()
)
rcBfdTmpSessIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcBfdTmpSessIndex.setStatus("current")
_RcBfdTmpSessApplicationId_Type = Unsigned32
_RcBfdTmpSessApplicationId_Object = MibTableColumn
rcBfdTmpSessApplicationId = _RcBfdTmpSessApplicationId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 2),
    _RcBfdTmpSessApplicationId_Type()
)
rcBfdTmpSessApplicationId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessApplicationId.setStatus("current")


class _RcBfdTmpSessDiscriminator_Type(Unsigned32):
    """Custom type rcBfdTmpSessDiscriminator based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_RcBfdTmpSessDiscriminator_Type.__name__ = "Unsigned32"
_RcBfdTmpSessDiscriminator_Object = MibTableColumn
rcBfdTmpSessDiscriminator = _RcBfdTmpSessDiscriminator_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 3),
    _RcBfdTmpSessDiscriminator_Type()
)
rcBfdTmpSessDiscriminator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessDiscriminator.setStatus("current")


class _RcBfdTmpSessRemoteDiscr_Type(Unsigned32):
    """Custom type rcBfdTmpSessRemoteDiscr based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_RcBfdTmpSessRemoteDiscr_Type.__name__ = "Unsigned32"
_RcBfdTmpSessRemoteDiscr_Object = MibTableColumn
rcBfdTmpSessRemoteDiscr = _RcBfdTmpSessRemoteDiscr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 4),
    _RcBfdTmpSessRemoteDiscr_Type()
)
rcBfdTmpSessRemoteDiscr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessRemoteDiscr.setStatus("current")


class _RcBfdTmpSessUdpPort_Type(InetPortNumber):
    """Custom type rcBfdTmpSessUdpPort based on InetPortNumber"""
    defaultValue = 0


_RcBfdTmpSessUdpPort_Object = MibTableColumn
rcBfdTmpSessUdpPort = _RcBfdTmpSessUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 5),
    _RcBfdTmpSessUdpPort_Type()
)
rcBfdTmpSessUdpPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessUdpPort.setStatus("current")


class _RcBfdTmpSessState_Type(Integer32):
    """Custom type rcBfdTmpSessState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("adminDown", 1),
          ("down", 2),
          ("init", 3),
          ("up", 4))
    )


_RcBfdTmpSessState_Type.__name__ = "Integer32"
_RcBfdTmpSessState_Object = MibTableColumn
rcBfdTmpSessState = _RcBfdTmpSessState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 6),
    _RcBfdTmpSessState_Type()
)
rcBfdTmpSessState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessState.setStatus("current")
_RcBfdTmpSessRemoteHeardFlag_Type = TruthValue
_RcBfdTmpSessRemoteHeardFlag_Object = MibTableColumn
rcBfdTmpSessRemoteHeardFlag = _RcBfdTmpSessRemoteHeardFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 7),
    _RcBfdTmpSessRemoteHeardFlag_Type()
)
rcBfdTmpSessRemoteHeardFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessRemoteHeardFlag.setStatus("current")
_RcBfdTmpSessDiag_Type = Unsigned32
_RcBfdTmpSessDiag_Object = MibTableColumn
rcBfdTmpSessDiag = _RcBfdTmpSessDiag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 8),
    _RcBfdTmpSessDiag_Type()
)
rcBfdTmpSessDiag.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcBfdTmpSessDiag.setStatus("current")


class _RcBfdTmpSessOperMode_Type(Integer32):
    """Custom type rcBfdTmpSessOperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("asyncModeWEchoFun", 1),
          ("asynchModeWOEchoFun", 2),
          ("demandModeWEchoFunction", 3),
          ("demandModeWOEchoFunction", 4))
    )


_RcBfdTmpSessOperMode_Type.__name__ = "Integer32"
_RcBfdTmpSessOperMode_Object = MibTableColumn
rcBfdTmpSessOperMode = _RcBfdTmpSessOperMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 9),
    _RcBfdTmpSessOperMode_Type()
)
rcBfdTmpSessOperMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessOperMode.setStatus("current")


class _RcBfdTmpSessDemandModeDesiredFlag_Type(TruthValue):
    """Custom type rcBfdTmpSessDemandModeDesiredFlag based on TruthValue"""


_RcBfdTmpSessDemandModeDesiredFlag_Object = MibTableColumn
rcBfdTmpSessDemandModeDesiredFlag = _RcBfdTmpSessDemandModeDesiredFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 10),
    _RcBfdTmpSessDemandModeDesiredFlag_Type()
)
rcBfdTmpSessDemandModeDesiredFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessDemandModeDesiredFlag.setStatus("current")


class _RcBfdTmpSessEchoFuncModeDesiredFlag_Type(TruthValue):
    """Custom type rcBfdTmpSessEchoFuncModeDesiredFlag based on TruthValue"""


_RcBfdTmpSessEchoFuncModeDesiredFlag_Object = MibTableColumn
rcBfdTmpSessEchoFuncModeDesiredFlag = _RcBfdTmpSessEchoFuncModeDesiredFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 11),
    _RcBfdTmpSessEchoFuncModeDesiredFlag_Type()
)
rcBfdTmpSessEchoFuncModeDesiredFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessEchoFuncModeDesiredFlag.setStatus("current")


class _RcBfdTmpSessControlPlanIndepFlag_Type(TruthValue):
    """Custom type rcBfdTmpSessControlPlanIndepFlag based on TruthValue"""


_RcBfdTmpSessControlPlanIndepFlag_Object = MibTableColumn
rcBfdTmpSessControlPlanIndepFlag = _RcBfdTmpSessControlPlanIndepFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 12),
    _RcBfdTmpSessControlPlanIndepFlag_Type()
)
rcBfdTmpSessControlPlanIndepFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessControlPlanIndepFlag.setStatus("current")
_RcBfdTmpSessAddrType_Type = InetAddressType
_RcBfdTmpSessAddrType_Object = MibTableColumn
rcBfdTmpSessAddrType = _RcBfdTmpSessAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 13),
    _RcBfdTmpSessAddrType_Type()
)
rcBfdTmpSessAddrType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessAddrType.setStatus("current")
_RcBfdTmpSessAddr_Type = InetAddress
_RcBfdTmpSessAddr_Object = MibTableColumn
rcBfdTmpSessAddr = _RcBfdTmpSessAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 14),
    _RcBfdTmpSessAddr_Type()
)
rcBfdTmpSessAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessAddr.setStatus("current")
_RcBfdTmpSessDesiredMinTxInterval_Type = RcBfdTmpInterval
_RcBfdTmpSessDesiredMinTxInterval_Object = MibTableColumn
rcBfdTmpSessDesiredMinTxInterval = _RcBfdTmpSessDesiredMinTxInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 15),
    _RcBfdTmpSessDesiredMinTxInterval_Type()
)
rcBfdTmpSessDesiredMinTxInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessDesiredMinTxInterval.setStatus("current")
_RcBfdTmpSessReqMinRxInterval_Type = RcBfdTmpInterval
_RcBfdTmpSessReqMinRxInterval_Object = MibTableColumn
rcBfdTmpSessReqMinRxInterval = _RcBfdTmpSessReqMinRxInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 16),
    _RcBfdTmpSessReqMinRxInterval_Type()
)
rcBfdTmpSessReqMinRxInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessReqMinRxInterval.setStatus("current")
_RcBfdTmpSessReqMinEchoRxInterval_Type = RcBfdTmpInterval
_RcBfdTmpSessReqMinEchoRxInterval_Object = MibTableColumn
rcBfdTmpSessReqMinEchoRxInterval = _RcBfdTmpSessReqMinEchoRxInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 17),
    _RcBfdTmpSessReqMinEchoRxInterval_Type()
)
rcBfdTmpSessReqMinEchoRxInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessReqMinEchoRxInterval.setStatus("current")
_RcBfdTmpSessDetectMult_Type = Unsigned32
_RcBfdTmpSessDetectMult_Object = MibTableColumn
rcBfdTmpSessDetectMult = _RcBfdTmpSessDetectMult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 18),
    _RcBfdTmpSessDetectMult_Type()
)
rcBfdTmpSessDetectMult.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessDetectMult.setStatus("current")
_RcBfdTmpSessStorType_Type = StorageType
_RcBfdTmpSessStorType_Object = MibTableColumn
rcBfdTmpSessStorType = _RcBfdTmpSessStorType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 19),
    _RcBfdTmpSessStorType_Type()
)
rcBfdTmpSessStorType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessStorType.setStatus("current")
_RcBfdTmpSessRowStatus_Type = RowStatus
_RcBfdTmpSessRowStatus_Object = MibTableColumn
rcBfdTmpSessRowStatus = _RcBfdTmpSessRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 20),
    _RcBfdTmpSessRowStatus_Type()
)
rcBfdTmpSessRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessRowStatus.setStatus("current")


class _RcBfdTmpSessAuthPresFlag_Type(TruthValue):
    """Custom type rcBfdTmpSessAuthPresFlag based on TruthValue"""


_RcBfdTmpSessAuthPresFlag_Object = MibTableColumn
rcBfdTmpSessAuthPresFlag = _RcBfdTmpSessAuthPresFlag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 21),
    _RcBfdTmpSessAuthPresFlag_Type()
)
rcBfdTmpSessAuthPresFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessAuthPresFlag.setStatus("current")


class _RcBfdTmpSessAuthenticationType_Type(Integer32):
    """Custom type rcBfdTmpSessAuthenticationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("keyedMD5", 2),
          ("keyedSHA1", 4),
          ("meticulousKeyedMD5", 3),
          ("meticulousKeyedSHA1", 5),
          ("simplePassword", 1))
    )


_RcBfdTmpSessAuthenticationType_Type.__name__ = "Integer32"
_RcBfdTmpSessAuthenticationType_Object = MibTableColumn
rcBfdTmpSessAuthenticationType = _RcBfdTmpSessAuthenticationType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 2, 1, 22),
    _RcBfdTmpSessAuthenticationType_Type()
)
rcBfdTmpSessAuthenticationType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcBfdTmpSessAuthenticationType.setStatus("current")
_RcBfdTmpSessPerfTable_Object = MibTable
rcBfdTmpSessPerfTable = _RcBfdTmpSessPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3)
)
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfTable.setStatus("current")
_RcBfdTmpSessPerfEntry_Object = MibTableRow
rcBfdTmpSessPerfEntry = _RcBfdTmpSessPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1)
)
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfEntry.setStatus("current")
_RcBfdTmpSessPerfPktIn_Type = Counter32
_RcBfdTmpSessPerfPktIn_Object = MibTableColumn
rcBfdTmpSessPerfPktIn = _RcBfdTmpSessPerfPktIn_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 1),
    _RcBfdTmpSessPerfPktIn_Type()
)
rcBfdTmpSessPerfPktIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfPktIn.setStatus("current")
_RcBfdTmpSessPerfPktOut_Type = Counter32
_RcBfdTmpSessPerfPktOut_Object = MibTableColumn
rcBfdTmpSessPerfPktOut = _RcBfdTmpSessPerfPktOut_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 2),
    _RcBfdTmpSessPerfPktOut_Type()
)
rcBfdTmpSessPerfPktOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfPktOut.setStatus("current")
_RcBfdTmpSessUpTime_Type = TimeStamp
_RcBfdTmpSessUpTime_Object = MibTableColumn
rcBfdTmpSessUpTime = _RcBfdTmpSessUpTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 3),
    _RcBfdTmpSessUpTime_Type()
)
rcBfdTmpSessUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessUpTime.setStatus("current")
_RcBfdTmpSessPerfLastSessDownTime_Type = TimeStamp
_RcBfdTmpSessPerfLastSessDownTime_Object = MibTableColumn
rcBfdTmpSessPerfLastSessDownTime = _RcBfdTmpSessPerfLastSessDownTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 4),
    _RcBfdTmpSessPerfLastSessDownTime_Type()
)
rcBfdTmpSessPerfLastSessDownTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfLastSessDownTime.setStatus("current")
_RcBfdTmpSessPerfLastCommLostDiag_Type = RcBfdTmpDiag
_RcBfdTmpSessPerfLastCommLostDiag_Object = MibTableColumn
rcBfdTmpSessPerfLastCommLostDiag = _RcBfdTmpSessPerfLastCommLostDiag_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 5),
    _RcBfdTmpSessPerfLastCommLostDiag_Type()
)
rcBfdTmpSessPerfLastCommLostDiag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfLastCommLostDiag.setStatus("current")
_RcBfdTmpSessPerfSessUpCount_Type = Counter32
_RcBfdTmpSessPerfSessUpCount_Object = MibTableColumn
rcBfdTmpSessPerfSessUpCount = _RcBfdTmpSessPerfSessUpCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 6),
    _RcBfdTmpSessPerfSessUpCount_Type()
)
rcBfdTmpSessPerfSessUpCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfSessUpCount.setStatus("current")
_RcBfdTmpSessPerfDiscTime_Type = TimeStamp
_RcBfdTmpSessPerfDiscTime_Object = MibTableColumn
rcBfdTmpSessPerfDiscTime = _RcBfdTmpSessPerfDiscTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 7),
    _RcBfdTmpSessPerfDiscTime_Type()
)
rcBfdTmpSessPerfDiscTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfDiscTime.setStatus("current")
_RcBfdTmpSessPerfPktInHC_Type = Counter64
_RcBfdTmpSessPerfPktInHC_Object = MibTableColumn
rcBfdTmpSessPerfPktInHC = _RcBfdTmpSessPerfPktInHC_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 8),
    _RcBfdTmpSessPerfPktInHC_Type()
)
rcBfdTmpSessPerfPktInHC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfPktInHC.setStatus("current")
_RcBfdTmpSessPerfPktOutHC_Type = Counter64
_RcBfdTmpSessPerfPktOutHC_Object = MibTableColumn
rcBfdTmpSessPerfPktOutHC = _RcBfdTmpSessPerfPktOutHC_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 3, 1, 9),
    _RcBfdTmpSessPerfPktOutHC_Type()
)
rcBfdTmpSessPerfPktOutHC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessPerfPktOutHC.setStatus("current")
_RcBfdTmpSessMapTable_Object = MibTable
rcBfdTmpSessMapTable = _RcBfdTmpSessMapTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 4)
)
if mibBuilder.loadTexts:
    rcBfdTmpSessMapTable.setStatus("current")
_RcBfdTmpSessMapEntry_Object = MibTableRow
rcBfdTmpSessMapEntry = _RcBfdTmpSessMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 4, 1)
)
rcBfdTmpSessMapEntry.setIndexNames(
    (0, "RAPID-CITY", "rcBfdTmpSessApplicationId"),
    (0, "RAPID-CITY", "rcBfdTmpSessDiscriminator"),
    (0, "RAPID-CITY", "rcBfdTmpSessAddrType"),
    (0, "RAPID-CITY", "rcBfdTmpSessAddr"),
)
if mibBuilder.loadTexts:
    rcBfdTmpSessMapEntry.setStatus("current")
_RcBfdTmpSessMapBfdIndex_Type = RcBfdTmpSessIndexTC
_RcBfdTmpSessMapBfdIndex_Object = MibTableColumn
rcBfdTmpSessMapBfdIndex = _RcBfdTmpSessMapBfdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 1, 4, 1, 1),
    _RcBfdTmpSessMapBfdIndex_Type()
)
rcBfdTmpSessMapBfdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdTmpSessMapBfdIndex.setStatus("current")
_RcBfdExtMib_ObjectIdentity = ObjectIdentity
rcBfdExtMib = _RcBfdExtMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2)
)
_RcBfdExtObjects_ObjectIdentity = ObjectIdentity
rcBfdExtObjects = _RcBfdExtObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2, 1)
)
_RcBfdExtSessTable_Object = MibTable
rcBfdExtSessTable = _RcBfdExtSessTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2, 1, 1)
)
if mibBuilder.loadTexts:
    rcBfdExtSessTable.setStatus("current")
_RcBfdExtSessEntry_Object = MibTableRow
rcBfdExtSessEntry = _RcBfdExtSessEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2, 1, 1, 1)
)
if mibBuilder.loadTexts:
    rcBfdExtSessEntry.setStatus("current")


class _RcBfdExtSessPeerState_Type(Integer32):
    """Custom type rcBfdExtSessPeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("adminDown", 1),
          ("down", 2),
          ("init", 3),
          ("up", 4))
    )


_RcBfdExtSessPeerState_Type.__name__ = "Integer32"
_RcBfdExtSessPeerState_Object = MibTableColumn
rcBfdExtSessPeerState = _RcBfdExtSessPeerState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2, 1, 1, 1, 1),
    _RcBfdExtSessPeerState_Type()
)
rcBfdExtSessPeerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdExtSessPeerState.setStatus("current")
_RcBfdExtSessPeerAddrType_Type = InetAddressType
_RcBfdExtSessPeerAddrType_Object = MibTableColumn
rcBfdExtSessPeerAddrType = _RcBfdExtSessPeerAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2, 1, 1, 1, 2),
    _RcBfdExtSessPeerAddrType_Type()
)
rcBfdExtSessPeerAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdExtSessPeerAddrType.setStatus("current")
_RcBfdExtSessPeerAddr_Type = InetAddress
_RcBfdExtSessPeerAddr_Object = MibTableColumn
rcBfdExtSessPeerAddr = _RcBfdExtSessPeerAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2, 1, 1, 1, 3),
    _RcBfdExtSessPeerAddr_Type()
)
rcBfdExtSessPeerAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdExtSessPeerAddr.setStatus("current")


class _RcBfdExtSessApp_Type(SnmpAdminString):
    """Custom type rcBfdExtSessApp based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcBfdExtSessApp_Type.__name__ = "SnmpAdminString"
_RcBfdExtSessApp_Object = MibTableColumn
rcBfdExtSessApp = _RcBfdExtSessApp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2, 1, 1, 1, 4),
    _RcBfdExtSessApp_Type()
)
rcBfdExtSessApp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdExtSessApp.setStatus("current")


class _RcBfdExtSessAppRun_Type(SnmpAdminString):
    """Custom type rcBfdExtSessAppRun based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcBfdExtSessAppRun_Type.__name__ = "SnmpAdminString"
_RcBfdExtSessAppRun_Object = MibTableColumn
rcBfdExtSessAppRun = _RcBfdExtSessAppRun_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 2, 1, 1, 1, 5),
    _RcBfdExtSessAppRun_Type()
)
rcBfdExtSessAppRun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcBfdExtSessAppRun.setStatus("current")
_RcKhi_ObjectIdentity = ObjectIdentity
rcKhi = _RcKhi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85)
)
_RcKhiConfig_ObjectIdentity = ObjectIdentity
rcKhiConfig = _RcKhiConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1)
)


class _RcKhiConfigKhiAdminState_Type(TruthValue):
    """Custom type rcKhiConfigKhiAdminState based on TruthValue"""


_RcKhiConfigKhiAdminState_Object = MibScalar
rcKhiConfigKhiAdminState = _RcKhiConfigKhiAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1, 1),
    _RcKhiConfigKhiAdminState_Type()
)
rcKhiConfigKhiAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcKhiConfigKhiAdminState.setStatus("current")


class _RcKhiConfigKhiBootDelay_Type(Unsigned32):
    """Custom type rcKhiConfigKhiBootDelay based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_RcKhiConfigKhiBootDelay_Type.__name__ = "Unsigned32"
_RcKhiConfigKhiBootDelay_Object = MibScalar
rcKhiConfigKhiBootDelay = _RcKhiConfigKhiBootDelay_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1, 2),
    _RcKhiConfigKhiBootDelay_Type()
)
rcKhiConfigKhiBootDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcKhiConfigKhiBootDelay.setStatus("current")
if mibBuilder.loadTexts:
    rcKhiConfigKhiBootDelay.setUnits("minutes")


class _RcKhiConfigClearAction_Type(Bits):
    """Custom type rcKhiConfigClearAction based on Bits"""
    namedValues = NamedValues(
        *(("chassis", 0),
          ("forwarding", 3),
          ("ip", 4),
          ("mgmt", 6),
          ("performance", 1),
          ("port", 2),
          ("protocol", 5))
    )

_RcKhiConfigClearAction_Type.__name__ = "Bits"
_RcKhiConfigClearAction_Object = MibScalar
rcKhiConfigClearAction = _RcKhiConfigClearAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1, 3),
    _RcKhiConfigClearAction_Type()
)
rcKhiConfigClearAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcKhiConfigClearAction.setStatus("current")


class _RcKhiConfigPortKhiAdminState_Type(TruthValue):
    """Custom type rcKhiConfigPortKhiAdminState based on TruthValue"""


_RcKhiConfigPortKhiAdminState_Object = MibScalar
rcKhiConfigPortKhiAdminState = _RcKhiConfigPortKhiAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1, 4),
    _RcKhiConfigPortKhiAdminState_Type()
)
rcKhiConfigPortKhiAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcKhiConfigPortKhiAdminState.setStatus("current")


class _RcKhiConfigPerfKhiAdminState_Type(TruthValue):
    """Custom type rcKhiConfigPerfKhiAdminState based on TruthValue"""


_RcKhiConfigPerfKhiAdminState_Object = MibScalar
rcKhiConfigPerfKhiAdminState = _RcKhiConfigPerfKhiAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1, 5),
    _RcKhiConfigPerfKhiAdminState_Type()
)
rcKhiConfigPerfKhiAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcKhiConfigPerfKhiAdminState.setStatus("current")


class _RcKhiConfigChasKhiAdminState_Type(TruthValue):
    """Custom type rcKhiConfigChasKhiAdminState based on TruthValue"""


_RcKhiConfigChasKhiAdminState_Object = MibScalar
rcKhiConfigChasKhiAdminState = _RcKhiConfigChasKhiAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1, 6),
    _RcKhiConfigChasKhiAdminState_Type()
)
rcKhiConfigChasKhiAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcKhiConfigChasKhiAdminState.setStatus("current")


class _RcKhiConfigForwardingKhiAdminState_Type(TruthValue):
    """Custom type rcKhiConfigForwardingKhiAdminState based on TruthValue"""


_RcKhiConfigForwardingKhiAdminState_Object = MibScalar
rcKhiConfigForwardingKhiAdminState = _RcKhiConfigForwardingKhiAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1, 7),
    _RcKhiConfigForwardingKhiAdminState_Type()
)
rcKhiConfigForwardingKhiAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcKhiConfigForwardingKhiAdminState.setStatus("current")


class _RcKhiConfigMgmtKhiAdminState_Type(TruthValue):
    """Custom type rcKhiConfigMgmtKhiAdminState based on TruthValue"""


_RcKhiConfigMgmtKhiAdminState_Object = MibScalar
rcKhiConfigMgmtKhiAdminState = _RcKhiConfigMgmtKhiAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 1, 8),
    _RcKhiConfigMgmtKhiAdminState_Type()
)
rcKhiConfigMgmtKhiAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcKhiConfigMgmtKhiAdminState.setStatus("current")
_RcKhiHighLevel_ObjectIdentity = ObjectIdentity
rcKhiHighLevel = _RcKhiHighLevel_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2)
)


class _RcKhiHighLevelKhiOperStatus_Type(Integer32):
    """Custom type rcKhiHighLevelKhiOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("running", 1),
          ("wait", 3))
    )


_RcKhiHighLevelKhiOperStatus_Type.__name__ = "Integer32"
_RcKhiHighLevelKhiOperStatus_Object = MibScalar
rcKhiHighLevelKhiOperStatus = _RcKhiHighLevelKhiOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 1),
    _RcKhiHighLevelKhiOperStatus_Type()
)
rcKhiHighLevelKhiOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelKhiOperStatus.setStatus("current")
_RcKhiHighLevelChassisCurrentStatus_Type = KhiStatusValue
_RcKhiHighLevelChassisCurrentStatus_Object = MibScalar
rcKhiHighLevelChassisCurrentStatus = _RcKhiHighLevelChassisCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 2),
    _RcKhiHighLevelChassisCurrentStatus_Type()
)
rcKhiHighLevelChassisCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelChassisCurrentStatus.setStatus("current")
_RcKhiHighLevelChassisFirstHighestEvent_Type = KhiStatusValue
_RcKhiHighLevelChassisFirstHighestEvent_Object = MibScalar
rcKhiHighLevelChassisFirstHighestEvent = _RcKhiHighLevelChassisFirstHighestEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 3),
    _RcKhiHighLevelChassisFirstHighestEvent_Type()
)
rcKhiHighLevelChassisFirstHighestEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelChassisFirstHighestEvent.setStatus("current")
_RcKhiHighLevelChassisFirstHighestEventTime_Type = DateAndTime
_RcKhiHighLevelChassisFirstHighestEventTime_Object = MibScalar
rcKhiHighLevelChassisFirstHighestEventTime = _RcKhiHighLevelChassisFirstHighestEventTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 4),
    _RcKhiHighLevelChassisFirstHighestEventTime_Type()
)
rcKhiHighLevelChassisFirstHighestEventTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelChassisFirstHighestEventTime.setStatus("current")
_RcKhiHighLevelChassisRefStatus_Type = KhiStatusValue
_RcKhiHighLevelChassisRefStatus_Object = MibScalar
rcKhiHighLevelChassisRefStatus = _RcKhiHighLevelChassisRefStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 5),
    _RcKhiHighLevelChassisRefStatus_Type()
)
rcKhiHighLevelChassisRefStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelChassisRefStatus.setStatus("current")
_RcKhiHighLevelChassisStatusLastClearTime_Type = DateAndTime
_RcKhiHighLevelChassisStatusLastClearTime_Object = MibScalar
rcKhiHighLevelChassisStatusLastClearTime = _RcKhiHighLevelChassisStatusLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 6),
    _RcKhiHighLevelChassisStatusLastClearTime_Type()
)
rcKhiHighLevelChassisStatusLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelChassisStatusLastClearTime.setStatus("current")
_RcKhiHighLevelCpuPerfCurrentStatus_Type = KhiStatusValue
_RcKhiHighLevelCpuPerfCurrentStatus_Object = MibScalar
rcKhiHighLevelCpuPerfCurrentStatus = _RcKhiHighLevelCpuPerfCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 7),
    _RcKhiHighLevelCpuPerfCurrentStatus_Type()
)
rcKhiHighLevelCpuPerfCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelCpuPerfCurrentStatus.setStatus("current")
_RcKhiHighLevelCpuPerfFirstHighestEvent_Type = KhiStatusValue
_RcKhiHighLevelCpuPerfFirstHighestEvent_Object = MibScalar
rcKhiHighLevelCpuPerfFirstHighestEvent = _RcKhiHighLevelCpuPerfFirstHighestEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 8),
    _RcKhiHighLevelCpuPerfFirstHighestEvent_Type()
)
rcKhiHighLevelCpuPerfFirstHighestEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelCpuPerfFirstHighestEvent.setStatus("current")
_RcKhiHighLevelCpuPerfFirstHighestEventTime_Type = DateAndTime
_RcKhiHighLevelCpuPerfFirstHighestEventTime_Object = MibScalar
rcKhiHighLevelCpuPerfFirstHighestEventTime = _RcKhiHighLevelCpuPerfFirstHighestEventTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 9),
    _RcKhiHighLevelCpuPerfFirstHighestEventTime_Type()
)
rcKhiHighLevelCpuPerfFirstHighestEventTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelCpuPerfFirstHighestEventTime.setStatus("current")
_RcKhiHighLevelCpuPerfRefStatus_Type = KhiStatusValue
_RcKhiHighLevelCpuPerfRefStatus_Object = MibScalar
rcKhiHighLevelCpuPerfRefStatus = _RcKhiHighLevelCpuPerfRefStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 10),
    _RcKhiHighLevelCpuPerfRefStatus_Type()
)
rcKhiHighLevelCpuPerfRefStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelCpuPerfRefStatus.setStatus("current")
_RcKhiHighLevelCpuPerfStatusLastClearTime_Type = DateAndTime
_RcKhiHighLevelCpuPerfStatusLastClearTime_Object = MibScalar
rcKhiHighLevelCpuPerfStatusLastClearTime = _RcKhiHighLevelCpuPerfStatusLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 11),
    _RcKhiHighLevelCpuPerfStatusLastClearTime_Type()
)
rcKhiHighLevelCpuPerfStatusLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelCpuPerfStatusLastClearTime.setStatus("current")
_RcKhiHighLevelPortCurrentStatus_Type = KhiStatusValue
_RcKhiHighLevelPortCurrentStatus_Object = MibScalar
rcKhiHighLevelPortCurrentStatus = _RcKhiHighLevelPortCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 12),
    _RcKhiHighLevelPortCurrentStatus_Type()
)
rcKhiHighLevelPortCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelPortCurrentStatus.setStatus("current")
_RcKhiHighLevelPortFirstHighestEvent_Type = KhiStatusValue
_RcKhiHighLevelPortFirstHighestEvent_Object = MibScalar
rcKhiHighLevelPortFirstHighestEvent = _RcKhiHighLevelPortFirstHighestEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 13),
    _RcKhiHighLevelPortFirstHighestEvent_Type()
)
rcKhiHighLevelPortFirstHighestEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelPortFirstHighestEvent.setStatus("current")
_RcKhiHighLevelPortFirstHighestEventTime_Type = DateAndTime
_RcKhiHighLevelPortFirstHighestEventTime_Object = MibScalar
rcKhiHighLevelPortFirstHighestEventTime = _RcKhiHighLevelPortFirstHighestEventTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 14),
    _RcKhiHighLevelPortFirstHighestEventTime_Type()
)
rcKhiHighLevelPortFirstHighestEventTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelPortFirstHighestEventTime.setStatus("current")
_RcKhiHighLevelPortRefStatus_Type = KhiStatusValue
_RcKhiHighLevelPortRefStatus_Object = MibScalar
rcKhiHighLevelPortRefStatus = _RcKhiHighLevelPortRefStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 15),
    _RcKhiHighLevelPortRefStatus_Type()
)
rcKhiHighLevelPortRefStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelPortRefStatus.setStatus("current")
_RcKhiHighLevelPortStatusLastClearTime_Type = DateAndTime
_RcKhiHighLevelPortStatusLastClearTime_Object = MibScalar
rcKhiHighLevelPortStatusLastClearTime = _RcKhiHighLevelPortStatusLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 16),
    _RcKhiHighLevelPortStatusLastClearTime_Type()
)
rcKhiHighLevelPortStatusLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelPortStatusLastClearTime.setStatus("current")
_RcKhiHighLevelForwardingCurrentStatus_Type = KhiStatusValue
_RcKhiHighLevelForwardingCurrentStatus_Object = MibScalar
rcKhiHighLevelForwardingCurrentStatus = _RcKhiHighLevelForwardingCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 17),
    _RcKhiHighLevelForwardingCurrentStatus_Type()
)
rcKhiHighLevelForwardingCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelForwardingCurrentStatus.setStatus("current")
_RcKhiHighLevelForwardingFirstHighestEvent_Type = KhiStatusValue
_RcKhiHighLevelForwardingFirstHighestEvent_Object = MibScalar
rcKhiHighLevelForwardingFirstHighestEvent = _RcKhiHighLevelForwardingFirstHighestEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 18),
    _RcKhiHighLevelForwardingFirstHighestEvent_Type()
)
rcKhiHighLevelForwardingFirstHighestEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelForwardingFirstHighestEvent.setStatus("current")
_RcKhiHighLevelForwardingFirstHighestEventTime_Type = DateAndTime
_RcKhiHighLevelForwardingFirstHighestEventTime_Object = MibScalar
rcKhiHighLevelForwardingFirstHighestEventTime = _RcKhiHighLevelForwardingFirstHighestEventTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 19),
    _RcKhiHighLevelForwardingFirstHighestEventTime_Type()
)
rcKhiHighLevelForwardingFirstHighestEventTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelForwardingFirstHighestEventTime.setStatus("current")
_RcKhiHighLevelForwardingRefStatus_Type = KhiStatusValue
_RcKhiHighLevelForwardingRefStatus_Object = MibScalar
rcKhiHighLevelForwardingRefStatus = _RcKhiHighLevelForwardingRefStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 20),
    _RcKhiHighLevelForwardingRefStatus_Type()
)
rcKhiHighLevelForwardingRefStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelForwardingRefStatus.setStatus("current")
_RcKhiHighLevelForwardingStatusLastClearTime_Type = DateAndTime
_RcKhiHighLevelForwardingStatusLastClearTime_Object = MibScalar
rcKhiHighLevelForwardingStatusLastClearTime = _RcKhiHighLevelForwardingStatusLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 21),
    _RcKhiHighLevelForwardingStatusLastClearTime_Type()
)
rcKhiHighLevelForwardingStatusLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelForwardingStatusLastClearTime.setStatus("current")
_RcKhiHighLevelTotalConfigVlanCount_Type = Counter32
_RcKhiHighLevelTotalConfigVlanCount_Object = MibScalar
rcKhiHighLevelTotalConfigVlanCount = _RcKhiHighLevelTotalConfigVlanCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 22),
    _RcKhiHighLevelTotalConfigVlanCount_Type()
)
rcKhiHighLevelTotalConfigVlanCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelTotalConfigVlanCount.setStatus("current")
_RcKhiHighLevelTotalConfigIpIfCount_Type = Counter32
_RcKhiHighLevelTotalConfigIpIfCount_Object = MibScalar
rcKhiHighLevelTotalConfigIpIfCount = _RcKhiHighLevelTotalConfigIpIfCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 23),
    _RcKhiHighLevelTotalConfigIpIfCount_Type()
)
rcKhiHighLevelTotalConfigIpIfCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelTotalConfigIpIfCount.setStatus("current")
_RcKhiHighLevelTotalOperIpIfCurrentCount_Type = Counter32
_RcKhiHighLevelTotalOperIpIfCurrentCount_Object = MibScalar
rcKhiHighLevelTotalOperIpIfCurrentCount = _RcKhiHighLevelTotalOperIpIfCurrentCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 24),
    _RcKhiHighLevelTotalOperIpIfCurrentCount_Type()
)
rcKhiHighLevelTotalOperIpIfCurrentCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelTotalOperIpIfCurrentCount.setStatus("current")
_RcKhiHighLevelIpIfFirstChangeTime_Type = DateAndTime
_RcKhiHighLevelIpIfFirstChangeTime_Object = MibScalar
rcKhiHighLevelIpIfFirstChangeTime = _RcKhiHighLevelIpIfFirstChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 25),
    _RcKhiHighLevelIpIfFirstChangeTime_Type()
)
rcKhiHighLevelIpIfFirstChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelIpIfFirstChangeTime.setStatus("current")
_RcKhiHighLevelTotalOperIpIfReferenceCount_Type = Counter32
_RcKhiHighLevelTotalOperIpIfReferenceCount_Object = MibScalar
rcKhiHighLevelTotalOperIpIfReferenceCount = _RcKhiHighLevelTotalOperIpIfReferenceCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 26),
    _RcKhiHighLevelTotalOperIpIfReferenceCount_Type()
)
rcKhiHighLevelTotalOperIpIfReferenceCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelTotalOperIpIfReferenceCount.setStatus("current")
_RcKhiHighLevelIpIfLastClearTime_Type = DateAndTime
_RcKhiHighLevelIpIfLastClearTime_Object = MibScalar
rcKhiHighLevelIpIfLastClearTime = _RcKhiHighLevelIpIfLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 27),
    _RcKhiHighLevelIpIfLastClearTime_Type()
)
rcKhiHighLevelIpIfLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelIpIfLastClearTime.setStatus("current")
_RcKhiHighLevelGlobalRouterTotalRouteCount_Type = Counter32
_RcKhiHighLevelGlobalRouterTotalRouteCount_Object = MibScalar
rcKhiHighLevelGlobalRouterTotalRouteCount = _RcKhiHighLevelGlobalRouterTotalRouteCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 28),
    _RcKhiHighLevelGlobalRouterTotalRouteCount_Type()
)
rcKhiHighLevelGlobalRouterTotalRouteCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelGlobalRouterTotalRouteCount.setStatus("current")
_RcKhiHighLevelGlobalRouterTotalRouteRefCount_Type = Counter32
_RcKhiHighLevelGlobalRouterTotalRouteRefCount_Object = MibScalar
rcKhiHighLevelGlobalRouterTotalRouteRefCount = _RcKhiHighLevelGlobalRouterTotalRouteRefCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 29),
    _RcKhiHighLevelGlobalRouterTotalRouteRefCount_Type()
)
rcKhiHighLevelGlobalRouterTotalRouteRefCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelGlobalRouterTotalRouteRefCount.setStatus("current")
_RcKhiHighLevelGlobalRouterLastClearTime_Type = DateAndTime
_RcKhiHighLevelGlobalRouterLastClearTime_Object = MibScalar
rcKhiHighLevelGlobalRouterLastClearTime = _RcKhiHighLevelGlobalRouterLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 30),
    _RcKhiHighLevelGlobalRouterLastClearTime_Type()
)
rcKhiHighLevelGlobalRouterLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelGlobalRouterLastClearTime.setStatus("current")
_RcKhiHighLevelGlobalRouterTotalBestRouteCount_Type = Counter32
_RcKhiHighLevelGlobalRouterTotalBestRouteCount_Object = MibScalar
rcKhiHighLevelGlobalRouterTotalBestRouteCount = _RcKhiHighLevelGlobalRouterTotalBestRouteCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 31),
    _RcKhiHighLevelGlobalRouterTotalBestRouteCount_Type()
)
rcKhiHighLevelGlobalRouterTotalBestRouteCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelGlobalRouterTotalBestRouteCount.setStatus("current")
_RcKhiHighLevelGlobalRouterBestRouteRefCount_Type = Counter32
_RcKhiHighLevelGlobalRouterBestRouteRefCount_Object = MibScalar
rcKhiHighLevelGlobalRouterBestRouteRefCount = _RcKhiHighLevelGlobalRouterBestRouteRefCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 32),
    _RcKhiHighLevelGlobalRouterBestRouteRefCount_Type()
)
rcKhiHighLevelGlobalRouterBestRouteRefCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelGlobalRouterBestRouteRefCount.setStatus("current")
_RcKhiHighLevelGlobalRouterBestRouteLastClearTime_Type = DateAndTime
_RcKhiHighLevelGlobalRouterBestRouteLastClearTime_Object = MibScalar
rcKhiHighLevelGlobalRouterBestRouteLastClearTime = _RcKhiHighLevelGlobalRouterBestRouteLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 33),
    _RcKhiHighLevelGlobalRouterBestRouteLastClearTime_Type()
)
rcKhiHighLevelGlobalRouterBestRouteLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelGlobalRouterBestRouteLastClearTime.setStatus("current")
_RcKhiHighLevelNonZeroVrfsTotalRouteCount_Type = Counter32
_RcKhiHighLevelNonZeroVrfsTotalRouteCount_Object = MibScalar
rcKhiHighLevelNonZeroVrfsTotalRouteCount = _RcKhiHighLevelNonZeroVrfsTotalRouteCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 34),
    _RcKhiHighLevelNonZeroVrfsTotalRouteCount_Type()
)
rcKhiHighLevelNonZeroVrfsTotalRouteCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNonZeroVrfsTotalRouteCount.setStatus("current")
_RcKhiHighLevelNonZeroVrfsTotalRouteRefCount_Type = Counter32
_RcKhiHighLevelNonZeroVrfsTotalRouteRefCount_Object = MibScalar
rcKhiHighLevelNonZeroVrfsTotalRouteRefCount = _RcKhiHighLevelNonZeroVrfsTotalRouteRefCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 35),
    _RcKhiHighLevelNonZeroVrfsTotalRouteRefCount_Type()
)
rcKhiHighLevelNonZeroVrfsTotalRouteRefCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNonZeroVrfsTotalRouteRefCount.setStatus("current")
_RcKhiHighLevelNonZeroVrfsRouteLastClearTime_Type = DateAndTime
_RcKhiHighLevelNonZeroVrfsRouteLastClearTime_Object = MibScalar
rcKhiHighLevelNonZeroVrfsRouteLastClearTime = _RcKhiHighLevelNonZeroVrfsRouteLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 36),
    _RcKhiHighLevelNonZeroVrfsRouteLastClearTime_Type()
)
rcKhiHighLevelNonZeroVrfsRouteLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNonZeroVrfsRouteLastClearTime.setStatus("current")
_RcKhiHighLevelNonZeroVrfsTotalBestRouteCount_Type = Counter32
_RcKhiHighLevelNonZeroVrfsTotalBestRouteCount_Object = MibScalar
rcKhiHighLevelNonZeroVrfsTotalBestRouteCount = _RcKhiHighLevelNonZeroVrfsTotalBestRouteCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 37),
    _RcKhiHighLevelNonZeroVrfsTotalBestRouteCount_Type()
)
rcKhiHighLevelNonZeroVrfsTotalBestRouteCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNonZeroVrfsTotalBestRouteCount.setStatus("current")
_RcKhiHighLevelNonZeroVrfsBestRouteRefCount_Type = Counter32
_RcKhiHighLevelNonZeroVrfsBestRouteRefCount_Object = MibScalar
rcKhiHighLevelNonZeroVrfsBestRouteRefCount = _RcKhiHighLevelNonZeroVrfsBestRouteRefCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 38),
    _RcKhiHighLevelNonZeroVrfsBestRouteRefCount_Type()
)
rcKhiHighLevelNonZeroVrfsBestRouteRefCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNonZeroVrfsBestRouteRefCount.setStatus("current")
_RcKhiHighLevelNonZeroVrfsBestRouteLastClearTime_Type = DateAndTime
_RcKhiHighLevelNonZeroVrfsBestRouteLastClearTime_Object = MibScalar
rcKhiHighLevelNonZeroVrfsBestRouteLastClearTime = _RcKhiHighLevelNonZeroVrfsBestRouteLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 39),
    _RcKhiHighLevelNonZeroVrfsBestRouteLastClearTime_Type()
)
rcKhiHighLevelNonZeroVrfsBestRouteLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNonZeroVrfsBestRouteLastClearTime.setStatus("current")
_RcKhiHighLevelFdbRecordCount_Type = Counter32
_RcKhiHighLevelFdbRecordCount_Object = MibScalar
rcKhiHighLevelFdbRecordCount = _RcKhiHighLevelFdbRecordCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 40),
    _RcKhiHighLevelFdbRecordCount_Type()
)
rcKhiHighLevelFdbRecordCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelFdbRecordCount.setStatus("current")
_RcKhiHighLevelFdbRecordRefCount_Type = Counter32
_RcKhiHighLevelFdbRecordRefCount_Object = MibScalar
rcKhiHighLevelFdbRecordRefCount = _RcKhiHighLevelFdbRecordRefCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 41),
    _RcKhiHighLevelFdbRecordRefCount_Type()
)
rcKhiHighLevelFdbRecordRefCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelFdbRecordRefCount.setStatus("current")
_RcKhiHighLevelFdbRecordLastClearTime_Type = DateAndTime
_RcKhiHighLevelFdbRecordLastClearTime_Object = MibScalar
rcKhiHighLevelFdbRecordLastClearTime = _RcKhiHighLevelFdbRecordLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 42),
    _RcKhiHighLevelFdbRecordLastClearTime_Type()
)
rcKhiHighLevelFdbRecordLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelFdbRecordLastClearTime.setStatus("current")
_RcKhiHighLevelGlobalRouterProtocolState_Type = KhiStatusValue
_RcKhiHighLevelGlobalRouterProtocolState_Object = MibScalar
rcKhiHighLevelGlobalRouterProtocolState = _RcKhiHighLevelGlobalRouterProtocolState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 43),
    _RcKhiHighLevelGlobalRouterProtocolState_Type()
)
rcKhiHighLevelGlobalRouterProtocolState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelGlobalRouterProtocolState.setStatus("current")
_RcKhiHighLevelGlobalRouterProtocolStateLastClearTime_Type = DateAndTime
_RcKhiHighLevelGlobalRouterProtocolStateLastClearTime_Object = MibScalar
rcKhiHighLevelGlobalRouterProtocolStateLastClearTime = _RcKhiHighLevelGlobalRouterProtocolStateLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 44),
    _RcKhiHighLevelGlobalRouterProtocolStateLastClearTime_Type()
)
rcKhiHighLevelGlobalRouterProtocolStateLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelGlobalRouterProtocolStateLastClearTime.setStatus("current")
_RcKhiHighLevelNonZeroVrfsProtocolState_Type = KhiStatusValue
_RcKhiHighLevelNonZeroVrfsProtocolState_Object = MibScalar
rcKhiHighLevelNonZeroVrfsProtocolState = _RcKhiHighLevelNonZeroVrfsProtocolState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 45),
    _RcKhiHighLevelNonZeroVrfsProtocolState_Type()
)
rcKhiHighLevelNonZeroVrfsProtocolState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNonZeroVrfsProtocolState.setStatus("current")
_RcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime_Type = DateAndTime
_RcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime_Object = MibScalar
rcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime = _RcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 46),
    _RcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime_Type()
)
rcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime.setStatus("current")
_RcKhiHighLevelIstCurrentStatus_Type = KhiStatusValue
_RcKhiHighLevelIstCurrentStatus_Object = MibScalar
rcKhiHighLevelIstCurrentStatus = _RcKhiHighLevelIstCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 47),
    _RcKhiHighLevelIstCurrentStatus_Type()
)
rcKhiHighLevelIstCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelIstCurrentStatus.setStatus("current")
_RcKhiHighLevelIstFirstHighestEvent_Type = KhiStatusValue
_RcKhiHighLevelIstFirstHighestEvent_Object = MibScalar
rcKhiHighLevelIstFirstHighestEvent = _RcKhiHighLevelIstFirstHighestEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 48),
    _RcKhiHighLevelIstFirstHighestEvent_Type()
)
rcKhiHighLevelIstFirstHighestEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelIstFirstHighestEvent.setStatus("current")
_RcKhiHighLevelIstFirstHighestEventTime_Type = DateAndTime
_RcKhiHighLevelIstFirstHighestEventTime_Object = MibScalar
rcKhiHighLevelIstFirstHighestEventTime = _RcKhiHighLevelIstFirstHighestEventTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 49),
    _RcKhiHighLevelIstFirstHighestEventTime_Type()
)
rcKhiHighLevelIstFirstHighestEventTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelIstFirstHighestEventTime.setStatus("current")
_RcKhiHighLevelIstStatusLastClearTime_Type = DateAndTime
_RcKhiHighLevelIstStatusLastClearTime_Object = MibScalar
rcKhiHighLevelIstStatusLastClearTime = _RcKhiHighLevelIstStatusLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 50),
    _RcKhiHighLevelIstStatusLastClearTime_Type()
)
rcKhiHighLevelIstStatusLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelIstStatusLastClearTime.setStatus("current")
_RcKhiHighLevelSmltOperPortsCount_Type = Counter32
_RcKhiHighLevelSmltOperPortsCount_Object = MibScalar
rcKhiHighLevelSmltOperPortsCount = _RcKhiHighLevelSmltOperPortsCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 51),
    _RcKhiHighLevelSmltOperPortsCount_Type()
)
rcKhiHighLevelSmltOperPortsCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelSmltOperPortsCount.setStatus("current")
_RcKhiHighLevelSmltOperPortsChangeTime_Type = DateAndTime
_RcKhiHighLevelSmltOperPortsChangeTime_Object = MibScalar
rcKhiHighLevelSmltOperPortsChangeTime = _RcKhiHighLevelSmltOperPortsChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 52),
    _RcKhiHighLevelSmltOperPortsChangeTime_Type()
)
rcKhiHighLevelSmltOperPortsChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelSmltOperPortsChangeTime.setStatus("current")
_RcKhiHighLevelSmltOperPortsReferenceCount_Type = Counter32
_RcKhiHighLevelSmltOperPortsReferenceCount_Object = MibScalar
rcKhiHighLevelSmltOperPortsReferenceCount = _RcKhiHighLevelSmltOperPortsReferenceCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 53),
    _RcKhiHighLevelSmltOperPortsReferenceCount_Type()
)
rcKhiHighLevelSmltOperPortsReferenceCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelSmltOperPortsReferenceCount.setStatus("current")
_RcKhiHighLevelSmltOperPortsLastClearTime_Type = DateAndTime
_RcKhiHighLevelSmltOperPortsLastClearTime_Object = MibScalar
rcKhiHighLevelSmltOperPortsLastClearTime = _RcKhiHighLevelSmltOperPortsLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 54),
    _RcKhiHighLevelSmltOperPortsLastClearTime_Type()
)
rcKhiHighLevelSmltOperPortsLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelSmltOperPortsLastClearTime.setStatus("current")
_RcKhiHighLevelTotalSmltConfigPorts_Type = Counter32
_RcKhiHighLevelTotalSmltConfigPorts_Object = MibScalar
rcKhiHighLevelTotalSmltConfigPorts = _RcKhiHighLevelTotalSmltConfigPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 55),
    _RcKhiHighLevelTotalSmltConfigPorts_Type()
)
rcKhiHighLevelTotalSmltConfigPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelTotalSmltConfigPorts.setStatus("current")
_RcKhiHighLevelLogCurrentStatus_Type = KhiStatusValue
_RcKhiHighLevelLogCurrentStatus_Object = MibScalar
rcKhiHighLevelLogCurrentStatus = _RcKhiHighLevelLogCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 56),
    _RcKhiHighLevelLogCurrentStatus_Type()
)
rcKhiHighLevelLogCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelLogCurrentStatus.setStatus("current")
_RcKhiHighLevelLogFirstHighestEvent_Type = KhiStatusValue
_RcKhiHighLevelLogFirstHighestEvent_Object = MibScalar
rcKhiHighLevelLogFirstHighestEvent = _RcKhiHighLevelLogFirstHighestEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 57),
    _RcKhiHighLevelLogFirstHighestEvent_Type()
)
rcKhiHighLevelLogFirstHighestEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelLogFirstHighestEvent.setStatus("current")
_RcKhiHighLevelLogFirstHighestEventTime_Type = DateAndTime
_RcKhiHighLevelLogFirstHighestEventTime_Object = MibScalar
rcKhiHighLevelLogFirstHighestEventTime = _RcKhiHighLevelLogFirstHighestEventTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 58),
    _RcKhiHighLevelLogFirstHighestEventTime_Type()
)
rcKhiHighLevelLogFirstHighestEventTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelLogFirstHighestEventTime.setStatus("current")
_RcKhiHighLevelLogRefStatus_Type = KhiStatusValue
_RcKhiHighLevelLogRefStatus_Object = MibScalar
rcKhiHighLevelLogRefStatus = _RcKhiHighLevelLogRefStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 59),
    _RcKhiHighLevelLogRefStatus_Type()
)
rcKhiHighLevelLogRefStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelLogRefStatus.setStatus("current")
_RcKhiHighLevelLogStatusLastClearTime_Type = DateAndTime
_RcKhiHighLevelLogStatusLastClearTime_Object = MibScalar
rcKhiHighLevelLogStatusLastClearTime = _RcKhiHighLevelLogStatusLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 60),
    _RcKhiHighLevelLogStatusLastClearTime_Type()
)
rcKhiHighLevelLogStatusLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelLogStatusLastClearTime.setStatus("current")
_RcKhiHighLevelNumOfTcpConnection_Type = Counter32
_RcKhiHighLevelNumOfTcpConnection_Object = MibScalar
rcKhiHighLevelNumOfTcpConnection = _RcKhiHighLevelNumOfTcpConnection_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 61),
    _RcKhiHighLevelNumOfTcpConnection_Type()
)
rcKhiHighLevelNumOfTcpConnection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNumOfTcpConnection.setStatus("current")
_RcKhiHighLevelNumOfActiveTcpConnection_Type = Counter32
_RcKhiHighLevelNumOfActiveTcpConnection_Object = MibScalar
rcKhiHighLevelNumOfActiveTcpConnection = _RcKhiHighLevelNumOfActiveTcpConnection_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 62),
    _RcKhiHighLevelNumOfActiveTcpConnection_Type()
)
rcKhiHighLevelNumOfActiveTcpConnection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNumOfActiveTcpConnection.setStatus("current")
_RcKhiHighLevelNumOfCliUsers_Type = Counter32
_RcKhiHighLevelNumOfCliUsers_Object = MibScalar
rcKhiHighLevelNumOfCliUsers = _RcKhiHighLevelNumOfCliUsers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 2, 63),
    _RcKhiHighLevelNumOfCliUsers_Type()
)
rcKhiHighLevelNumOfCliUsers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiHighLevelNumOfCliUsers.setStatus("current")
_RcKhiChassis_ObjectIdentity = ObjectIdentity
rcKhiChassis = _RcKhiChassis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3)
)
_RcKhiChassisChasTemperature_Type = Gauge32
_RcKhiChassisChasTemperature_Object = MibScalar
rcKhiChassisChasTemperature = _RcKhiChassisChasTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 1),
    _RcKhiChassisChasTemperature_Type()
)
rcKhiChassisChasTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisChasTemperature.setStatus("current")
_RcKhiChassisTemperatureFirstHigherAlert_Type = Gauge32
_RcKhiChassisTemperatureFirstHigherAlert_Object = MibScalar
rcKhiChassisTemperatureFirstHigherAlert = _RcKhiChassisTemperatureFirstHigherAlert_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 2),
    _RcKhiChassisTemperatureFirstHigherAlert_Type()
)
rcKhiChassisTemperatureFirstHigherAlert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisTemperatureFirstHigherAlert.setStatus("current")
_RcKhiChassisTemperatureFirstHigherAlertTime_Type = DateAndTime
_RcKhiChassisTemperatureFirstHigherAlertTime_Object = MibScalar
rcKhiChassisTemperatureFirstHigherAlertTime = _RcKhiChassisTemperatureFirstHigherAlertTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 3),
    _RcKhiChassisTemperatureFirstHigherAlertTime_Type()
)
rcKhiChassisTemperatureFirstHigherAlertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisTemperatureFirstHigherAlertTime.setStatus("current")
_RcKhiChassisChasTemperatureStatusIndication_Type = KhiStatusValue
_RcKhiChassisChasTemperatureStatusIndication_Object = MibScalar
rcKhiChassisChasTemperatureStatusIndication = _RcKhiChassisChasTemperatureStatusIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 4),
    _RcKhiChassisChasTemperatureStatusIndication_Type()
)
rcKhiChassisChasTemperatureStatusIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisChasTemperatureStatusIndication.setStatus("current")


class _RcKhiChassisMasterCpuMezzOperState_Type(Integer32):
    """Custom type rcKhiChassisMasterCpuMezzOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 2),
          ("present", 3),
          ("running", 4),
          ("unsupported", 1))
    )


_RcKhiChassisMasterCpuMezzOperState_Type.__name__ = "Integer32"
_RcKhiChassisMasterCpuMezzOperState_Object = MibScalar
rcKhiChassisMasterCpuMezzOperState = _RcKhiChassisMasterCpuMezzOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 5),
    _RcKhiChassisMasterCpuMezzOperState_Type()
)
rcKhiChassisMasterCpuMezzOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisMasterCpuMezzOperState.setStatus("current")
_RcKhiChassisMasterCpuMezzStatusIndication_Type = KhiStatusValue
_RcKhiChassisMasterCpuMezzStatusIndication_Object = MibScalar
rcKhiChassisMasterCpuMezzStatusIndication = _RcKhiChassisMasterCpuMezzStatusIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 6),
    _RcKhiChassisMasterCpuMezzStatusIndication_Type()
)
rcKhiChassisMasterCpuMezzStatusIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisMasterCpuMezzStatusIndication.setStatus("current")


class _RcKhiChassisStandbyCpuMezzOperState_Type(Integer32):
    """Custom type rcKhiChassisStandbyCpuMezzOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 2),
          ("present", 3),
          ("running", 4),
          ("unsupported", 1))
    )


_RcKhiChassisStandbyCpuMezzOperState_Type.__name__ = "Integer32"
_RcKhiChassisStandbyCpuMezzOperState_Object = MibScalar
rcKhiChassisStandbyCpuMezzOperState = _RcKhiChassisStandbyCpuMezzOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 7),
    _RcKhiChassisStandbyCpuMezzOperState_Type()
)
rcKhiChassisStandbyCpuMezzOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisStandbyCpuMezzOperState.setStatus("current")
_RcKhiChassisStandbyCpuMezzStatusIndication_Type = KhiStatusValue
_RcKhiChassisStandbyCpuMezzStatusIndication_Object = MibScalar
rcKhiChassisStandbyCpuMezzStatusIndication = _RcKhiChassisStandbyCpuMezzStatusIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 8),
    _RcKhiChassisStandbyCpuMezzStatusIndication_Type()
)
rcKhiChassisStandbyCpuMezzStatusIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisStandbyCpuMezzStatusIndication.setStatus("current")


class _RcKhiChassisStandbyCpuState_Type(Integer32):
    """Custom type rcKhiChassisStandbyCpuState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 7),
          ("error", 6),
          ("initialization", 1),
          ("lostPeerConnection", 10),
          ("notSynchronized", 11),
          ("oneWayActive", 2),
          ("peerConnected", 9),
          ("peerNotConnected", 8),
          ("remoteIncompatible", 5),
          ("synchronized", 4),
          ("twoWayActive", 3))
    )


_RcKhiChassisStandbyCpuState_Type.__name__ = "Integer32"
_RcKhiChassisStandbyCpuState_Object = MibScalar
rcKhiChassisStandbyCpuState = _RcKhiChassisStandbyCpuState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 9),
    _RcKhiChassisStandbyCpuState_Type()
)
rcKhiChassisStandbyCpuState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisStandbyCpuState.setStatus("current")
_RcKhiChassisStandbyCpuStatusIndication_Type = KhiStatusValue
_RcKhiChassisStandbyCpuStatusIndication_Object = MibScalar
rcKhiChassisStandbyCpuStatusIndication = _RcKhiChassisStandbyCpuStatusIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 10),
    _RcKhiChassisStandbyCpuStatusIndication_Type()
)
rcKhiChassisStandbyCpuStatusIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisStandbyCpuStatusIndication.setStatus("current")
_RcKhiChassisHistoryTable_Object = MibTable
rcKhiChassisHistoryTable = _RcKhiChassisHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 11)
)
if mibBuilder.loadTexts:
    rcKhiChassisHistoryTable.setStatus("current")
_RcKhiChassisHistoryEntry_Object = MibTableRow
rcKhiChassisHistoryEntry = _RcKhiChassisHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 11, 1)
)
rcKhiChassisHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiChassisHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiChassisHistoryEntry.setStatus("current")


class _RcKhiChassisHistoryIndex_Type(Integer32):
    """Custom type rcKhiChassisHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiChassisHistoryIndex_Type.__name__ = "Integer32"
_RcKhiChassisHistoryIndex_Object = MibTableColumn
rcKhiChassisHistoryIndex = _RcKhiChassisHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 11, 1, 1),
    _RcKhiChassisHistoryIndex_Type()
)
rcKhiChassisHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisHistoryIndex.setStatus("current")
_RcKhiChassisHistoryTemperatureStateChange_Type = KhiStatusValue
_RcKhiChassisHistoryTemperatureStateChange_Object = MibTableColumn
rcKhiChassisHistoryTemperatureStateChange = _RcKhiChassisHistoryTemperatureStateChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 11, 1, 2),
    _RcKhiChassisHistoryTemperatureStateChange_Type()
)
rcKhiChassisHistoryTemperatureStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisHistoryTemperatureStateChange.setStatus("current")
_RcKhiChassisHistoryTemperatureStateChangeTime_Type = DateAndTime
_RcKhiChassisHistoryTemperatureStateChangeTime_Object = MibTableColumn
rcKhiChassisHistoryTemperatureStateChangeTime = _RcKhiChassisHistoryTemperatureStateChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 11, 1, 3),
    _RcKhiChassisHistoryTemperatureStateChangeTime_Type()
)
rcKhiChassisHistoryTemperatureStateChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisHistoryTemperatureStateChangeTime.setStatus("current")
_RcKhiChassisFanTable_Object = MibTable
rcKhiChassisFanTable = _RcKhiChassisFanTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12)
)
if mibBuilder.loadTexts:
    rcKhiChassisFanTable.setStatus("current")
_RcKhiChassisFanEntry_Object = MibTableRow
rcKhiChassisFanEntry = _RcKhiChassisFanEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1)
)
rcKhiChassisFanEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiChassisFanId"),
)
if mibBuilder.loadTexts:
    rcKhiChassisFanEntry.setStatus("current")


class _RcKhiChassisFanId_Type(Integer32):
    """Custom type rcKhiChassisFanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_RcKhiChassisFanId_Type.__name__ = "Integer32"
_RcKhiChassisFanId_Object = MibTableColumn
rcKhiChassisFanId = _RcKhiChassisFanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 1),
    _RcKhiChassisFanId_Type()
)
rcKhiChassisFanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisFanId.setStatus("current")


class _RcKhiChassisFanOperState_Type(Integer32):
    """Custom type rcKhiChassisFanOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("unknown", 1),
          ("up", 2))
    )


_RcKhiChassisFanOperState_Type.__name__ = "Integer32"
_RcKhiChassisFanOperState_Object = MibTableColumn
rcKhiChassisFanOperState = _RcKhiChassisFanOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 2),
    _RcKhiChassisFanOperState_Type()
)
rcKhiChassisFanOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanOperState.setStatus("current")


class _RcKhiChassisFanFirstStateChange_Type(Integer32):
    """Custom type rcKhiChassisFanFirstStateChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("unknown", 1),
          ("up", 2))
    )


_RcKhiChassisFanFirstStateChange_Type.__name__ = "Integer32"
_RcKhiChassisFanFirstStateChange_Object = MibTableColumn
rcKhiChassisFanFirstStateChange = _RcKhiChassisFanFirstStateChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 3),
    _RcKhiChassisFanFirstStateChange_Type()
)
rcKhiChassisFanFirstStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanFirstStateChange.setStatus("current")
_RcKhiChassisFanFirstStateChangeTime_Type = DateAndTime
_RcKhiChassisFanFirstStateChangeTime_Object = MibTableColumn
rcKhiChassisFanFirstStateChangeTime = _RcKhiChassisFanFirstStateChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 4),
    _RcKhiChassisFanFirstStateChangeTime_Type()
)
rcKhiChassisFanFirstStateChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanFirstStateChangeTime.setStatus("current")
_RcKhiChassisFanOperStatusIndication_Type = KhiStatusValue
_RcKhiChassisFanOperStatusIndication_Object = MibTableColumn
rcKhiChassisFanOperStatusIndication = _RcKhiChassisFanOperStatusIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 5),
    _RcKhiChassisFanOperStatusIndication_Type()
)
rcKhiChassisFanOperStatusIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanOperStatusIndication.setStatus("current")
_RcKhiChassisFanTemperature_Type = Gauge32
_RcKhiChassisFanTemperature_Object = MibTableColumn
rcKhiChassisFanTemperature = _RcKhiChassisFanTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 6),
    _RcKhiChassisFanTemperature_Type()
)
rcKhiChassisFanTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanTemperature.setStatus("current")
_RcKhiChassisFanTempFirstHigherAlert_Type = Gauge32
_RcKhiChassisFanTempFirstHigherAlert_Object = MibTableColumn
rcKhiChassisFanTempFirstHigherAlert = _RcKhiChassisFanTempFirstHigherAlert_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 7),
    _RcKhiChassisFanTempFirstHigherAlert_Type()
)
rcKhiChassisFanTempFirstHigherAlert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanTempFirstHigherAlert.setStatus("current")
_RcKhiChassisFanTempFirstHigherAlertTime_Type = DateAndTime
_RcKhiChassisFanTempFirstHigherAlertTime_Object = MibTableColumn
rcKhiChassisFanTempFirstHigherAlertTime = _RcKhiChassisFanTempFirstHigherAlertTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 8),
    _RcKhiChassisFanTempFirstHigherAlertTime_Type()
)
rcKhiChassisFanTempFirstHigherAlertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanTempFirstHigherAlertTime.setStatus("current")
_RcKhiChassisFanTempStatusIndication_Type = KhiStatusValue
_RcKhiChassisFanTempStatusIndication_Object = MibTableColumn
rcKhiChassisFanTempStatusIndication = _RcKhiChassisFanTempStatusIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 12, 1, 9),
    _RcKhiChassisFanTempStatusIndication_Type()
)
rcKhiChassisFanTempStatusIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanTempStatusIndication.setStatus("current")
_RcKhiChassisFanOperHistoryTable_Object = MibTable
rcKhiChassisFanOperHistoryTable = _RcKhiChassisFanOperHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 13)
)
if mibBuilder.loadTexts:
    rcKhiChassisFanOperHistoryTable.setStatus("current")
_RcKhiChassisFanOperHistoryEntry_Object = MibTableRow
rcKhiChassisFanOperHistoryEntry = _RcKhiChassisFanOperHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 13, 1)
)
rcKhiChassisFanOperHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiChassisFanOperHistoryFanId"),
    (0, "RAPID-CITY", "rcKhiChassisFanOperHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiChassisFanOperHistoryEntry.setStatus("current")


class _RcKhiChassisFanOperHistoryFanId_Type(Integer32):
    """Custom type rcKhiChassisFanOperHistoryFanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_RcKhiChassisFanOperHistoryFanId_Type.__name__ = "Integer32"
_RcKhiChassisFanOperHistoryFanId_Object = MibTableColumn
rcKhiChassisFanOperHistoryFanId = _RcKhiChassisFanOperHistoryFanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 13, 1, 1),
    _RcKhiChassisFanOperHistoryFanId_Type()
)
rcKhiChassisFanOperHistoryFanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisFanOperHistoryFanId.setStatus("current")


class _RcKhiChassisFanOperHistoryIndex_Type(Integer32):
    """Custom type rcKhiChassisFanOperHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiChassisFanOperHistoryIndex_Type.__name__ = "Integer32"
_RcKhiChassisFanOperHistoryIndex_Object = MibTableColumn
rcKhiChassisFanOperHistoryIndex = _RcKhiChassisFanOperHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 13, 1, 2),
    _RcKhiChassisFanOperHistoryIndex_Type()
)
rcKhiChassisFanOperHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisFanOperHistoryIndex.setStatus("current")
_RcKhiChassisFanOperHistoryStateChange_Type = KhiStatusValue
_RcKhiChassisFanOperHistoryStateChange_Object = MibTableColumn
rcKhiChassisFanOperHistoryStateChange = _RcKhiChassisFanOperHistoryStateChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 13, 1, 3),
    _RcKhiChassisFanOperHistoryStateChange_Type()
)
rcKhiChassisFanOperHistoryStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanOperHistoryStateChange.setStatus("current")
_RcKhiChassisFanOperHistoryStateChangeTime_Type = DateAndTime
_RcKhiChassisFanOperHistoryStateChangeTime_Object = MibTableColumn
rcKhiChassisFanOperHistoryStateChangeTime = _RcKhiChassisFanOperHistoryStateChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 13, 1, 4),
    _RcKhiChassisFanOperHistoryStateChangeTime_Type()
)
rcKhiChassisFanOperHistoryStateChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanOperHistoryStateChangeTime.setStatus("current")
_RcKhiChassisFanTempHistoryTable_Object = MibTable
rcKhiChassisFanTempHistoryTable = _RcKhiChassisFanTempHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 14)
)
if mibBuilder.loadTexts:
    rcKhiChassisFanTempHistoryTable.setStatus("current")
_RcKhiChassisFanTempHistoryEntry_Object = MibTableRow
rcKhiChassisFanTempHistoryEntry = _RcKhiChassisFanTempHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 14, 1)
)
rcKhiChassisFanTempHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiChassisFanTempHistoryFanId"),
    (0, "RAPID-CITY", "rcKhiChassisFanTempHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiChassisFanTempHistoryEntry.setStatus("current")


class _RcKhiChassisFanTempHistoryFanId_Type(Integer32):
    """Custom type rcKhiChassisFanTempHistoryFanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_RcKhiChassisFanTempHistoryFanId_Type.__name__ = "Integer32"
_RcKhiChassisFanTempHistoryFanId_Object = MibTableColumn
rcKhiChassisFanTempHistoryFanId = _RcKhiChassisFanTempHistoryFanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 14, 1, 1),
    _RcKhiChassisFanTempHistoryFanId_Type()
)
rcKhiChassisFanTempHistoryFanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisFanTempHistoryFanId.setStatus("current")


class _RcKhiChassisFanTempHistoryIndex_Type(Integer32):
    """Custom type rcKhiChassisFanTempHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiChassisFanTempHistoryIndex_Type.__name__ = "Integer32"
_RcKhiChassisFanTempHistoryIndex_Object = MibTableColumn
rcKhiChassisFanTempHistoryIndex = _RcKhiChassisFanTempHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 14, 1, 2),
    _RcKhiChassisFanTempHistoryIndex_Type()
)
rcKhiChassisFanTempHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisFanTempHistoryIndex.setStatus("current")
_RcKhiChassisFanTempHistoryTempStateChange_Type = KhiStatusValue
_RcKhiChassisFanTempHistoryTempStateChange_Object = MibTableColumn
rcKhiChassisFanTempHistoryTempStateChange = _RcKhiChassisFanTempHistoryTempStateChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 14, 1, 3),
    _RcKhiChassisFanTempHistoryTempStateChange_Type()
)
rcKhiChassisFanTempHistoryTempStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanTempHistoryTempStateChange.setStatus("current")
_RcKhiChassisFanTempHistoryTempStateChangeTime_Type = DateAndTime
_RcKhiChassisFanTempHistoryTempStateChangeTime_Object = MibTableColumn
rcKhiChassisFanTempHistoryTempStateChangeTime = _RcKhiChassisFanTempHistoryTempStateChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 14, 1, 4),
    _RcKhiChassisFanTempHistoryTempStateChangeTime_Type()
)
rcKhiChassisFanTempHistoryTempStateChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisFanTempHistoryTempStateChangeTime.setStatus("current")
_RcKhiChassisPowerSupplyTable_Object = MibTable
rcKhiChassisPowerSupplyTable = _RcKhiChassisPowerSupplyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 15)
)
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyTable.setStatus("current")
_RcKhiChassisPowerSupplyEntry_Object = MibTableRow
rcKhiChassisPowerSupplyEntry = _RcKhiChassisPowerSupplyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 15, 1)
)
rcKhiChassisPowerSupplyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiChassisPowerSupplyId"),
)
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyEntry.setStatus("current")


class _RcKhiChassisPowerSupplyId_Type(Integer32):
    """Custom type rcKhiChassisPowerSupplyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RcKhiChassisPowerSupplyId_Type.__name__ = "Integer32"
_RcKhiChassisPowerSupplyId_Object = MibTableColumn
rcKhiChassisPowerSupplyId = _RcKhiChassisPowerSupplyId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 15, 1, 1),
    _RcKhiChassisPowerSupplyId_Type()
)
rcKhiChassisPowerSupplyId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyId.setStatus("current")


class _RcKhiChassisPowerSupplyOperState_Type(Integer32):
    """Custom type rcKhiChassisPowerSupplyOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 4),
          ("empty", 2),
          ("unknown", 1),
          ("up", 3))
    )


_RcKhiChassisPowerSupplyOperState_Type.__name__ = "Integer32"
_RcKhiChassisPowerSupplyOperState_Object = MibTableColumn
rcKhiChassisPowerSupplyOperState = _RcKhiChassisPowerSupplyOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 15, 1, 2),
    _RcKhiChassisPowerSupplyOperState_Type()
)
rcKhiChassisPowerSupplyOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyOperState.setStatus("current")


class _RcKhiChassisPowerSupplyFirstStateChange_Type(Integer32):
    """Custom type rcKhiChassisPowerSupplyFirstStateChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 4),
          ("empty", 2),
          ("unknown", 1),
          ("up", 3))
    )


_RcKhiChassisPowerSupplyFirstStateChange_Type.__name__ = "Integer32"
_RcKhiChassisPowerSupplyFirstStateChange_Object = MibTableColumn
rcKhiChassisPowerSupplyFirstStateChange = _RcKhiChassisPowerSupplyFirstStateChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 15, 1, 3),
    _RcKhiChassisPowerSupplyFirstStateChange_Type()
)
rcKhiChassisPowerSupplyFirstStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyFirstStateChange.setStatus("current")
_RcKhiChassisPowerSupplyFirstStateChangeTime_Type = DateAndTime
_RcKhiChassisPowerSupplyFirstStateChangeTime_Object = MibTableColumn
rcKhiChassisPowerSupplyFirstStateChangeTime = _RcKhiChassisPowerSupplyFirstStateChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 15, 1, 4),
    _RcKhiChassisPowerSupplyFirstStateChangeTime_Type()
)
rcKhiChassisPowerSupplyFirstStateChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyFirstStateChangeTime.setStatus("current")
_RcKhiChassisPowerSupplyStatusIndication_Type = KhiStatusValue
_RcKhiChassisPowerSupplyStatusIndication_Object = MibTableColumn
rcKhiChassisPowerSupplyStatusIndication = _RcKhiChassisPowerSupplyStatusIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 15, 1, 5),
    _RcKhiChassisPowerSupplyStatusIndication_Type()
)
rcKhiChassisPowerSupplyStatusIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyStatusIndication.setStatus("current")
_RcKhiChassisPowerSupplyHistoryTable_Object = MibTable
rcKhiChassisPowerSupplyHistoryTable = _RcKhiChassisPowerSupplyHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 16)
)
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyHistoryTable.setStatus("current")
_RcKhiChassisPowerSupplyHistoryEntry_Object = MibTableRow
rcKhiChassisPowerSupplyHistoryEntry = _RcKhiChassisPowerSupplyHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 16, 1)
)
rcKhiChassisPowerSupplyHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiChassisPowerSupplyHistoryPSId"),
    (0, "RAPID-CITY", "rcKhiChassisPowerSupplyHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyHistoryEntry.setStatus("current")


class _RcKhiChassisPowerSupplyHistoryPSId_Type(Integer32):
    """Custom type rcKhiChassisPowerSupplyHistoryPSId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_RcKhiChassisPowerSupplyHistoryPSId_Type.__name__ = "Integer32"
_RcKhiChassisPowerSupplyHistoryPSId_Object = MibTableColumn
rcKhiChassisPowerSupplyHistoryPSId = _RcKhiChassisPowerSupplyHistoryPSId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 16, 1, 1),
    _RcKhiChassisPowerSupplyHistoryPSId_Type()
)
rcKhiChassisPowerSupplyHistoryPSId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyHistoryPSId.setStatus("current")


class _RcKhiChassisPowerSupplyHistoryIndex_Type(Integer32):
    """Custom type rcKhiChassisPowerSupplyHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiChassisPowerSupplyHistoryIndex_Type.__name__ = "Integer32"
_RcKhiChassisPowerSupplyHistoryIndex_Object = MibTableColumn
rcKhiChassisPowerSupplyHistoryIndex = _RcKhiChassisPowerSupplyHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 16, 1, 2),
    _RcKhiChassisPowerSupplyHistoryIndex_Type()
)
rcKhiChassisPowerSupplyHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyHistoryIndex.setStatus("current")
_RcKhiChassisPowerSupplyHistoryOperStateChange_Type = KhiStatusValue
_RcKhiChassisPowerSupplyHistoryOperStateChange_Object = MibTableColumn
rcKhiChassisPowerSupplyHistoryOperStateChange = _RcKhiChassisPowerSupplyHistoryOperStateChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 16, 1, 3),
    _RcKhiChassisPowerSupplyHistoryOperStateChange_Type()
)
rcKhiChassisPowerSupplyHistoryOperStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyHistoryOperStateChange.setStatus("current")
_RcKhiChassisPowerSupplyHistoryOperStateChangeTime_Type = DateAndTime
_RcKhiChassisPowerSupplyHistoryOperStateChangeTime_Object = MibTableColumn
rcKhiChassisPowerSupplyHistoryOperStateChangeTime = _RcKhiChassisPowerSupplyHistoryOperStateChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 16, 1, 4),
    _RcKhiChassisPowerSupplyHistoryOperStateChangeTime_Type()
)
rcKhiChassisPowerSupplyHistoryOperStateChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisPowerSupplyHistoryOperStateChangeTime.setStatus("current")
_RcKhiChassisLineCardTable_Object = MibTable
rcKhiChassisLineCardTable = _RcKhiChassisLineCardTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 17)
)
if mibBuilder.loadTexts:
    rcKhiChassisLineCardTable.setStatus("current")
_RcKhiChassisLineCardEntry_Object = MibTableRow
rcKhiChassisLineCardEntry = _RcKhiChassisLineCardEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 17, 1)
)
rcKhiChassisLineCardEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiChassisLineCardSlot"),
)
if mibBuilder.loadTexts:
    rcKhiChassisLineCardEntry.setStatus("current")


class _RcKhiChassisLineCardSlot_Type(Integer32):
    """Custom type rcKhiChassisLineCardSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiChassisLineCardSlot_Type.__name__ = "Integer32"
_RcKhiChassisLineCardSlot_Object = MibTableColumn
rcKhiChassisLineCardSlot = _RcKhiChassisLineCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 17, 1, 1),
    _RcKhiChassisLineCardSlot_Type()
)
rcKhiChassisLineCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardSlot.setStatus("current")


class _RcKhiChassisLineCardOperState_Type(Integer32):
    """Custom type rcKhiChassisLineCardOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dormant", 5),
          ("down", 2),
          ("testing", 3),
          ("unknown", 4),
          ("up", 1))
    )


_RcKhiChassisLineCardOperState_Type.__name__ = "Integer32"
_RcKhiChassisLineCardOperState_Object = MibTableColumn
rcKhiChassisLineCardOperState = _RcKhiChassisLineCardOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 17, 1, 2),
    _RcKhiChassisLineCardOperState_Type()
)
rcKhiChassisLineCardOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardOperState.setStatus("current")
_RcKhiChassisLineCardAdminState_Type = EnableValue
_RcKhiChassisLineCardAdminState_Object = MibTableColumn
rcKhiChassisLineCardAdminState = _RcKhiChassisLineCardAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 17, 1, 3),
    _RcKhiChassisLineCardAdminState_Type()
)
rcKhiChassisLineCardAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardAdminState.setStatus("current")
_RcKhiChassisLineCardFirstStateChange_Type = KhiStatusValue
_RcKhiChassisLineCardFirstStateChange_Object = MibTableColumn
rcKhiChassisLineCardFirstStateChange = _RcKhiChassisLineCardFirstStateChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 17, 1, 4),
    _RcKhiChassisLineCardFirstStateChange_Type()
)
rcKhiChassisLineCardFirstStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardFirstStateChange.setStatus("current")
_RcKhiChassisLineCardFirstStateChangeTime_Type = DateAndTime
_RcKhiChassisLineCardFirstStateChangeTime_Object = MibTableColumn
rcKhiChassisLineCardFirstStateChangeTime = _RcKhiChassisLineCardFirstStateChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 17, 1, 5),
    _RcKhiChassisLineCardFirstStateChangeTime_Type()
)
rcKhiChassisLineCardFirstStateChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardFirstStateChangeTime.setStatus("current")
_RcKhiChassisLineCardStatusIndication_Type = KhiStatusValue
_RcKhiChassisLineCardStatusIndication_Object = MibTableColumn
rcKhiChassisLineCardStatusIndication = _RcKhiChassisLineCardStatusIndication_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 17, 1, 6),
    _RcKhiChassisLineCardStatusIndication_Type()
)
rcKhiChassisLineCardStatusIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardStatusIndication.setStatus("current")
_RcKhiChassisLineCardHistoryTable_Object = MibTable
rcKhiChassisLineCardHistoryTable = _RcKhiChassisLineCardHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 18)
)
if mibBuilder.loadTexts:
    rcKhiChassisLineCardHistoryTable.setStatus("current")
_RcKhiChassisLineCardHistoryEntry_Object = MibTableRow
rcKhiChassisLineCardHistoryEntry = _RcKhiChassisLineCardHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 18, 1)
)
rcKhiChassisLineCardHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiChassisLineCardHistoryLCId"),
    (0, "RAPID-CITY", "rcKhiChassisLineCardHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiChassisLineCardHistoryEntry.setStatus("current")


class _RcKhiChassisLineCardHistoryLCId_Type(Integer32):
    """Custom type rcKhiChassisLineCardHistoryLCId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_RcKhiChassisLineCardHistoryLCId_Type.__name__ = "Integer32"
_RcKhiChassisLineCardHistoryLCId_Object = MibTableColumn
rcKhiChassisLineCardHistoryLCId = _RcKhiChassisLineCardHistoryLCId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 18, 1, 1),
    _RcKhiChassisLineCardHistoryLCId_Type()
)
rcKhiChassisLineCardHistoryLCId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardHistoryLCId.setStatus("current")


class _RcKhiChassisLineCardHistoryIndex_Type(Integer32):
    """Custom type rcKhiChassisLineCardHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiChassisLineCardHistoryIndex_Type.__name__ = "Integer32"
_RcKhiChassisLineCardHistoryIndex_Object = MibTableColumn
rcKhiChassisLineCardHistoryIndex = _RcKhiChassisLineCardHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 18, 1, 2),
    _RcKhiChassisLineCardHistoryIndex_Type()
)
rcKhiChassisLineCardHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardHistoryIndex.setStatus("current")
_RcKhiChassisLineCardHistoryOperStateChange_Type = KhiStatusValue
_RcKhiChassisLineCardHistoryOperStateChange_Object = MibTableColumn
rcKhiChassisLineCardHistoryOperStateChange = _RcKhiChassisLineCardHistoryOperStateChange_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 18, 1, 3),
    _RcKhiChassisLineCardHistoryOperStateChange_Type()
)
rcKhiChassisLineCardHistoryOperStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardHistoryOperStateChange.setStatus("current")
_RcKhiChassisLineCardHistoryOperStateChangeTime_Type = DateAndTime
_RcKhiChassisLineCardHistoryOperStateChangeTime_Object = MibTableColumn
rcKhiChassisLineCardHistoryOperStateChangeTime = _RcKhiChassisLineCardHistoryOperStateChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 3, 18, 1, 4),
    _RcKhiChassisLineCardHistoryOperStateChangeTime_Type()
)
rcKhiChassisLineCardHistoryOperStateChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiChassisLineCardHistoryOperStateChangeTime.setStatus("current")
_RcKhiPerformance_ObjectIdentity = ObjectIdentity
rcKhiPerformance = _RcKhiPerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4)
)
_RcKhiPerformanceCurrentCpuUtil_Type = Gauge32
_RcKhiPerformanceCurrentCpuUtil_Object = MibScalar
rcKhiPerformanceCurrentCpuUtil = _RcKhiPerformanceCurrentCpuUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 1),
    _RcKhiPerformanceCurrentCpuUtil_Type()
)
rcKhiPerformanceCurrentCpuUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCurrentCpuUtil.setStatus("current")
_RcKhiPerformanceFirstHigherCpuUtil_Type = Gauge32
_RcKhiPerformanceFirstHigherCpuUtil_Object = MibScalar
rcKhiPerformanceFirstHigherCpuUtil = _RcKhiPerformanceFirstHigherCpuUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 2),
    _RcKhiPerformanceFirstHigherCpuUtil_Type()
)
rcKhiPerformanceFirstHigherCpuUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceFirstHigherCpuUtil.setStatus("current")
_RcKhiPerformanceCpuUtilFirstHigherAlertTime_Type = DateAndTime
_RcKhiPerformanceCpuUtilFirstHigherAlertTime_Object = MibScalar
rcKhiPerformanceCpuUtilFirstHigherAlertTime = _RcKhiPerformanceCpuUtilFirstHigherAlertTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 3),
    _RcKhiPerformanceCpuUtilFirstHigherAlertTime_Type()
)
rcKhiPerformanceCpuUtilFirstHigherAlertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCpuUtilFirstHigherAlertTime.setStatus("current")
_RcKhiPerformanceCpuUtilStatus_Type = KhiStatusValue
_RcKhiPerformanceCpuUtilStatus_Object = MibScalar
rcKhiPerformanceCpuUtilStatus = _RcKhiPerformanceCpuUtilStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 4),
    _RcKhiPerformanceCpuUtilStatus_Type()
)
rcKhiPerformanceCpuUtilStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCpuUtilStatus.setStatus("current")
_RcKhiPerformanceCurrentSwitchFabricUtil_Type = Gauge32
_RcKhiPerformanceCurrentSwitchFabricUtil_Object = MibScalar
rcKhiPerformanceCurrentSwitchFabricUtil = _RcKhiPerformanceCurrentSwitchFabricUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 5),
    _RcKhiPerformanceCurrentSwitchFabricUtil_Type()
)
rcKhiPerformanceCurrentSwitchFabricUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCurrentSwitchFabricUtil.setStatus("current")
_RcKhiPerformanceFirstHigherSwitchFabricUtil_Type = Gauge32
_RcKhiPerformanceFirstHigherSwitchFabricUtil_Object = MibScalar
rcKhiPerformanceFirstHigherSwitchFabricUtil = _RcKhiPerformanceFirstHigherSwitchFabricUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 6),
    _RcKhiPerformanceFirstHigherSwitchFabricUtil_Type()
)
rcKhiPerformanceFirstHigherSwitchFabricUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceFirstHigherSwitchFabricUtil.setStatus("current")
_RcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime_Type = DateAndTime
_RcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime_Object = MibScalar
rcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime = _RcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 7),
    _RcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime_Type()
)
rcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime.setStatus("current")
_RcKhiPerformanceSwitchFabricUtilStatus_Type = KhiStatusValue
_RcKhiPerformanceSwitchFabricUtilStatus_Object = MibScalar
rcKhiPerformanceSwitchFabricUtilStatus = _RcKhiPerformanceSwitchFabricUtilStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 8),
    _RcKhiPerformanceSwitchFabricUtilStatus_Type()
)
rcKhiPerformanceSwitchFabricUtilStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceSwitchFabricUtilStatus.setStatus("current")
_RcKhiPerformanceCurrentOtherSwitchFabricUtil_Type = Gauge32
_RcKhiPerformanceCurrentOtherSwitchFabricUtil_Object = MibScalar
rcKhiPerformanceCurrentOtherSwitchFabricUtil = _RcKhiPerformanceCurrentOtherSwitchFabricUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 9),
    _RcKhiPerformanceCurrentOtherSwitchFabricUtil_Type()
)
rcKhiPerformanceCurrentOtherSwitchFabricUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCurrentOtherSwitchFabricUtil.setStatus("current")
_RcKhiPerformanceFirstHigherOtherSwitchFabricUtil_Type = Gauge32
_RcKhiPerformanceFirstHigherOtherSwitchFabricUtil_Object = MibScalar
rcKhiPerformanceFirstHigherOtherSwitchFabricUtil = _RcKhiPerformanceFirstHigherOtherSwitchFabricUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 10),
    _RcKhiPerformanceFirstHigherOtherSwitchFabricUtil_Type()
)
rcKhiPerformanceFirstHigherOtherSwitchFabricUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceFirstHigherOtherSwitchFabricUtil.setStatus("current")
_RcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime_Type = DateAndTime
_RcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime_Object = MibScalar
rcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime = _RcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 11),
    _RcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime_Type()
)
rcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime.setStatus("current")
_RcKhiPerformanceOtherSwitchFabricUtilStatus_Type = KhiStatusValue
_RcKhiPerformanceOtherSwitchFabricUtilStatus_Object = MibScalar
rcKhiPerformanceOtherSwitchFabricUtilStatus = _RcKhiPerformanceOtherSwitchFabricUtilStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 12),
    _RcKhiPerformanceOtherSwitchFabricUtilStatus_Type()
)
rcKhiPerformanceOtherSwitchFabricUtilStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceOtherSwitchFabricUtilStatus.setStatus("current")
_RcKhiPerformanceCurrentBufferUtil_Type = Gauge32
_RcKhiPerformanceCurrentBufferUtil_Object = MibScalar
rcKhiPerformanceCurrentBufferUtil = _RcKhiPerformanceCurrentBufferUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 13),
    _RcKhiPerformanceCurrentBufferUtil_Type()
)
rcKhiPerformanceCurrentBufferUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCurrentBufferUtil.setStatus("current")
_RcKhiPerformanceFirstHigherBufferUtil_Type = Gauge32
_RcKhiPerformanceFirstHigherBufferUtil_Object = MibScalar
rcKhiPerformanceFirstHigherBufferUtil = _RcKhiPerformanceFirstHigherBufferUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 14),
    _RcKhiPerformanceFirstHigherBufferUtil_Type()
)
rcKhiPerformanceFirstHigherBufferUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceFirstHigherBufferUtil.setStatus("current")
_RcKhiPerformanceBufferUtilFirstHigherAlertTime_Type = DateAndTime
_RcKhiPerformanceBufferUtilFirstHigherAlertTime_Object = MibScalar
rcKhiPerformanceBufferUtilFirstHigherAlertTime = _RcKhiPerformanceBufferUtilFirstHigherAlertTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 15),
    _RcKhiPerformanceBufferUtilFirstHigherAlertTime_Type()
)
rcKhiPerformanceBufferUtilFirstHigherAlertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceBufferUtilFirstHigherAlertTime.setStatus("current")
_RcKhiPerformanceBufferUtilStatus_Type = KhiStatusValue
_RcKhiPerformanceBufferUtilStatus_Object = MibScalar
rcKhiPerformanceBufferUtilStatus = _RcKhiPerformanceBufferUtilStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 16),
    _RcKhiPerformanceBufferUtilStatus_Type()
)
rcKhiPerformanceBufferUtilStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceBufferUtilStatus.setStatus("current")
_RcKhiPerformanceCurrentDRamUsed_Type = Gauge32
_RcKhiPerformanceCurrentDRamUsed_Object = MibScalar
rcKhiPerformanceCurrentDRamUsed = _RcKhiPerformanceCurrentDRamUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 17),
    _RcKhiPerformanceCurrentDRamUsed_Type()
)
rcKhiPerformanceCurrentDRamUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCurrentDRamUsed.setStatus("current")
_RcKhiPerformanceFirstHigherDRamUsed_Type = Gauge32
_RcKhiPerformanceFirstHigherDRamUsed_Object = MibScalar
rcKhiPerformanceFirstHigherDRamUsed = _RcKhiPerformanceFirstHigherDRamUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 18),
    _RcKhiPerformanceFirstHigherDRamUsed_Type()
)
rcKhiPerformanceFirstHigherDRamUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceFirstHigherDRamUsed.setStatus("current")
_RcKhiPerformanceDRamUsedFirstHigherAlertTime_Type = DateAndTime
_RcKhiPerformanceDRamUsedFirstHigherAlertTime_Object = MibScalar
rcKhiPerformanceDRamUsedFirstHigherAlertTime = _RcKhiPerformanceDRamUsedFirstHigherAlertTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 19),
    _RcKhiPerformanceDRamUsedFirstHigherAlertTime_Type()
)
rcKhiPerformanceDRamUsedFirstHigherAlertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceDRamUsedFirstHigherAlertTime.setStatus("current")
_RcKhiPerformanceDRamUsedStatus_Type = KhiStatusValue
_RcKhiPerformanceDRamUsedStatus_Object = MibScalar
rcKhiPerformanceDRamUsedStatus = _RcKhiPerformanceDRamUsedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 20),
    _RcKhiPerformanceDRamUsedStatus_Type()
)
rcKhiPerformanceDRamUsedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceDRamUsedStatus.setStatus("current")
_RcKhiPerformanceSuspendedTaskStatus_Type = KhiStatusValue
_RcKhiPerformanceSuspendedTaskStatus_Object = MibScalar
rcKhiPerformanceSuspendedTaskStatus = _RcKhiPerformanceSuspendedTaskStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 21),
    _RcKhiPerformanceSuspendedTaskStatus_Type()
)
rcKhiPerformanceSuspendedTaskStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceSuspendedTaskStatus.setStatus("current")
_RcKhiPerformanceCPUControlFirstHigherAlertTime_Type = DateAndTime
_RcKhiPerformanceCPUControlFirstHigherAlertTime_Object = MibScalar
rcKhiPerformanceCPUControlFirstHigherAlertTime = _RcKhiPerformanceCPUControlFirstHigherAlertTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 22),
    _RcKhiPerformanceCPUControlFirstHigherAlertTime_Type()
)
rcKhiPerformanceCPUControlFirstHigherAlertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCPUControlFirstHigherAlertTime.setStatus("current")
_RcKhiPerformanceCPUControlStatus_Type = KhiStatusValue
_RcKhiPerformanceCPUControlStatus_Object = MibScalar
rcKhiPerformanceCPUControlStatus = _RcKhiPerformanceCPUControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 23),
    _RcKhiPerformanceCPUControlStatus_Type()
)
rcKhiPerformanceCPUControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCPUControlStatus.setStatus("current")
_RcKhiPerformanceCurrentNoFBuf_Type = Gauge32
_RcKhiPerformanceCurrentNoFBuf_Object = MibScalar
rcKhiPerformanceCurrentNoFBuf = _RcKhiPerformanceCurrentNoFBuf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 24),
    _RcKhiPerformanceCurrentNoFBuf_Type()
)
rcKhiPerformanceCurrentNoFBuf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCurrentNoFBuf.setStatus("current")
_RcKhiPerformanceFirstHigherNoFBuf_Type = Gauge32
_RcKhiPerformanceFirstHigherNoFBuf_Object = MibScalar
rcKhiPerformanceFirstHigherNoFBuf = _RcKhiPerformanceFirstHigherNoFBuf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 25),
    _RcKhiPerformanceFirstHigherNoFBuf_Type()
)
rcKhiPerformanceFirstHigherNoFBuf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceFirstHigherNoFBuf.setStatus("current")
_RcKhiPerformanceCurrentTxPacketsDropped_Type = Gauge32
_RcKhiPerformanceCurrentTxPacketsDropped_Object = MibScalar
rcKhiPerformanceCurrentTxPacketsDropped = _RcKhiPerformanceCurrentTxPacketsDropped_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 26),
    _RcKhiPerformanceCurrentTxPacketsDropped_Type()
)
rcKhiPerformanceCurrentTxPacketsDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCurrentTxPacketsDropped.setStatus("current")
_RcKhiPerformanceFirstHigherTxPacketsDropped_Type = Gauge32
_RcKhiPerformanceFirstHigherTxPacketsDropped_Object = MibScalar
rcKhiPerformanceFirstHigherTxPacketsDropped = _RcKhiPerformanceFirstHigherTxPacketsDropped_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 27),
    _RcKhiPerformanceFirstHigherTxPacketsDropped_Type()
)
rcKhiPerformanceFirstHigherTxPacketsDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceFirstHigherTxPacketsDropped.setStatus("current")
_RcKhiPerformanceCurrentOutError_Type = Gauge32
_RcKhiPerformanceCurrentOutError_Object = MibScalar
rcKhiPerformanceCurrentOutError = _RcKhiPerformanceCurrentOutError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 28),
    _RcKhiPerformanceCurrentOutError_Type()
)
rcKhiPerformanceCurrentOutError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceCurrentOutError.setStatus("current")
_RcKhiPerformanceFirstHigherOutError_Type = Gauge32
_RcKhiPerformanceFirstHigherOutError_Object = MibScalar
rcKhiPerformanceFirstHigherOutError = _RcKhiPerformanceFirstHigherOutError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 29),
    _RcKhiPerformanceFirstHigherOutError_Type()
)
rcKhiPerformanceFirstHigherOutError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceFirstHigherOutError.setStatus("current")
_RcKhiPerformanceSuspendedTaskTable_Object = MibTable
rcKhiPerformanceSuspendedTaskTable = _RcKhiPerformanceSuspendedTaskTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 30)
)
if mibBuilder.loadTexts:
    rcKhiPerformanceSuspendedTaskTable.setStatus("current")
_RcKhiPerformanceSuspendedTaskEntry_Object = MibTableRow
rcKhiPerformanceSuspendedTaskEntry = _RcKhiPerformanceSuspendedTaskEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 30, 1)
)
rcKhiPerformanceSuspendedTaskEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiPerformanceSuspendedTaskIndex"),
)
if mibBuilder.loadTexts:
    rcKhiPerformanceSuspendedTaskEntry.setStatus("current")


class _RcKhiPerformanceSuspendedTaskIndex_Type(Integer32):
    """Custom type rcKhiPerformanceSuspendedTaskIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcKhiPerformanceSuspendedTaskIndex_Type.__name__ = "Integer32"
_RcKhiPerformanceSuspendedTaskIndex_Object = MibTableColumn
rcKhiPerformanceSuspendedTaskIndex = _RcKhiPerformanceSuspendedTaskIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 30, 1, 1),
    _RcKhiPerformanceSuspendedTaskIndex_Type()
)
rcKhiPerformanceSuspendedTaskIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiPerformanceSuspendedTaskIndex.setStatus("current")
_RcKhiPerformanceSuspendedTaskId_Type = Integer32
_RcKhiPerformanceSuspendedTaskId_Object = MibTableColumn
rcKhiPerformanceSuspendedTaskId = _RcKhiPerformanceSuspendedTaskId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 30, 1, 2),
    _RcKhiPerformanceSuspendedTaskId_Type()
)
rcKhiPerformanceSuspendedTaskId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceSuspendedTaskId.setStatus("current")


class _RcKhiPerformanceSuspendedTaskName_Type(DisplayString):
    """Custom type rcKhiPerformanceSuspendedTaskName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_RcKhiPerformanceSuspendedTaskName_Type.__name__ = "DisplayString"
_RcKhiPerformanceSuspendedTaskName_Object = MibTableColumn
rcKhiPerformanceSuspendedTaskName = _RcKhiPerformanceSuspendedTaskName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 30, 1, 3),
    _RcKhiPerformanceSuspendedTaskName_Type()
)
rcKhiPerformanceSuspendedTaskName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceSuspendedTaskName.setStatus("current")
_RcKhiPerformanceSuspendedTaskSuspendedTime_Type = DateAndTime
_RcKhiPerformanceSuspendedTaskSuspendedTime_Object = MibTableColumn
rcKhiPerformanceSuspendedTaskSuspendedTime = _RcKhiPerformanceSuspendedTaskSuspendedTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 30, 1, 4),
    _RcKhiPerformanceSuspendedTaskSuspendedTime_Type()
)
rcKhiPerformanceSuspendedTaskSuspendedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceSuspendedTaskSuspendedTime.setStatus("current")
_RcKhiPerformanceHistoryTable_Object = MibTable
rcKhiPerformanceHistoryTable = _RcKhiPerformanceHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31)
)
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryTable.setStatus("current")
_RcKhiPerformanceHistoryEntry_Object = MibTableRow
rcKhiPerformanceHistoryEntry = _RcKhiPerformanceHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1)
)
rcKhiPerformanceHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiPerformanceHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryEntry.setStatus("current")


class _RcKhiPerformanceHistoryIndex_Type(Integer32):
    """Custom type rcKhiPerformanceHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcKhiPerformanceHistoryIndex_Type.__name__ = "Integer32"
_RcKhiPerformanceHistoryIndex_Object = MibTableColumn
rcKhiPerformanceHistoryIndex = _RcKhiPerformanceHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 1),
    _RcKhiPerformanceHistoryIndex_Type()
)
rcKhiPerformanceHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryIndex.setStatus("current")
_RcKhiPerformanceHistoryCpuUtil_Type = Gauge32
_RcKhiPerformanceHistoryCpuUtil_Object = MibTableColumn
rcKhiPerformanceHistoryCpuUtil = _RcKhiPerformanceHistoryCpuUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 2),
    _RcKhiPerformanceHistoryCpuUtil_Type()
)
rcKhiPerformanceHistoryCpuUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryCpuUtil.setStatus("current")
_RcKhiPerformanceHistoryCpuUtilTimeStamp_Type = DateAndTime
_RcKhiPerformanceHistoryCpuUtilTimeStamp_Object = MibTableColumn
rcKhiPerformanceHistoryCpuUtilTimeStamp = _RcKhiPerformanceHistoryCpuUtilTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 3),
    _RcKhiPerformanceHistoryCpuUtilTimeStamp_Type()
)
rcKhiPerformanceHistoryCpuUtilTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryCpuUtilTimeStamp.setStatus("current")
_RcKhiPerformanceHistorySwitchFabricUtil_Type = Gauge32
_RcKhiPerformanceHistorySwitchFabricUtil_Object = MibTableColumn
rcKhiPerformanceHistorySwitchFabricUtil = _RcKhiPerformanceHistorySwitchFabricUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 4),
    _RcKhiPerformanceHistorySwitchFabricUtil_Type()
)
rcKhiPerformanceHistorySwitchFabricUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistorySwitchFabricUtil.setStatus("current")
_RcKhiPerformanceHistorySwitchFabricUtilTimeStamp_Type = DateAndTime
_RcKhiPerformanceHistorySwitchFabricUtilTimeStamp_Object = MibTableColumn
rcKhiPerformanceHistorySwitchFabricUtilTimeStamp = _RcKhiPerformanceHistorySwitchFabricUtilTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 5),
    _RcKhiPerformanceHistorySwitchFabricUtilTimeStamp_Type()
)
rcKhiPerformanceHistorySwitchFabricUtilTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistorySwitchFabricUtilTimeStamp.setStatus("current")
_RcKhiPerformanceHistoryOtherSwitchFabricUtil_Type = Gauge32
_RcKhiPerformanceHistoryOtherSwitchFabricUtil_Object = MibTableColumn
rcKhiPerformanceHistoryOtherSwitchFabricUtil = _RcKhiPerformanceHistoryOtherSwitchFabricUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 6),
    _RcKhiPerformanceHistoryOtherSwitchFabricUtil_Type()
)
rcKhiPerformanceHistoryOtherSwitchFabricUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryOtherSwitchFabricUtil.setStatus("current")
_RcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp_Type = DateAndTime
_RcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp_Object = MibTableColumn
rcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp = _RcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 7),
    _RcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp_Type()
)
rcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp.setStatus("current")
_RcKhiPerformanceHistoryBufferUtil_Type = Gauge32
_RcKhiPerformanceHistoryBufferUtil_Object = MibTableColumn
rcKhiPerformanceHistoryBufferUtil = _RcKhiPerformanceHistoryBufferUtil_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 8),
    _RcKhiPerformanceHistoryBufferUtil_Type()
)
rcKhiPerformanceHistoryBufferUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryBufferUtil.setStatus("current")
_RcKhiPerformanceHistoryBufferUtilTimeStamp_Type = DateAndTime
_RcKhiPerformanceHistoryBufferUtilTimeStamp_Object = MibTableColumn
rcKhiPerformanceHistoryBufferUtilTimeStamp = _RcKhiPerformanceHistoryBufferUtilTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 9),
    _RcKhiPerformanceHistoryBufferUtilTimeStamp_Type()
)
rcKhiPerformanceHistoryBufferUtilTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryBufferUtilTimeStamp.setStatus("current")
_RcKhiPerformanceHistoryDRamUsed_Type = Gauge32
_RcKhiPerformanceHistoryDRamUsed_Object = MibTableColumn
rcKhiPerformanceHistoryDRamUsed = _RcKhiPerformanceHistoryDRamUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 10),
    _RcKhiPerformanceHistoryDRamUsed_Type()
)
rcKhiPerformanceHistoryDRamUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryDRamUsed.setStatus("current")
_RcKhiPerformanceHistoryDRamUsedTimeStamp_Type = DateAndTime
_RcKhiPerformanceHistoryDRamUsedTimeStamp_Object = MibTableColumn
rcKhiPerformanceHistoryDRamUsedTimeStamp = _RcKhiPerformanceHistoryDRamUsedTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 11),
    _RcKhiPerformanceHistoryDRamUsedTimeStamp_Type()
)
rcKhiPerformanceHistoryDRamUsedTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryDRamUsedTimeStamp.setStatus("current")
_RcKhiPerformanceHistoryCPUControlTimeStamp_Type = DateAndTime
_RcKhiPerformanceHistoryCPUControlTimeStamp_Object = MibTableColumn
rcKhiPerformanceHistoryCPUControlTimeStamp = _RcKhiPerformanceHistoryCPUControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 12),
    _RcKhiPerformanceHistoryCPUControlTimeStamp_Type()
)
rcKhiPerformanceHistoryCPUControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryCPUControlTimeStamp.setStatus("current")
_RcKhiPerformanceHistoryNoFBuf_Type = Gauge32
_RcKhiPerformanceHistoryNoFBuf_Object = MibTableColumn
rcKhiPerformanceHistoryNoFBuf = _RcKhiPerformanceHistoryNoFBuf_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 13),
    _RcKhiPerformanceHistoryNoFBuf_Type()
)
rcKhiPerformanceHistoryNoFBuf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryNoFBuf.setStatus("current")
_RcKhiPerformanceHistoryTxPacketsDropped_Type = Gauge32
_RcKhiPerformanceHistoryTxPacketsDropped_Object = MibTableColumn
rcKhiPerformanceHistoryTxPacketsDropped = _RcKhiPerformanceHistoryTxPacketsDropped_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 14),
    _RcKhiPerformanceHistoryTxPacketsDropped_Type()
)
rcKhiPerformanceHistoryTxPacketsDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryTxPacketsDropped.setStatus("current")
_RcKhiPerformanceHistoryOutError_Type = Gauge32
_RcKhiPerformanceHistoryOutError_Object = MibTableColumn
rcKhiPerformanceHistoryOutError = _RcKhiPerformanceHistoryOutError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 4, 31, 1, 15),
    _RcKhiPerformanceHistoryOutError_Type()
)
rcKhiPerformanceHistoryOutError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPerformanceHistoryOutError.setStatus("current")
_RcKhiPort_ObjectIdentity = ObjectIdentity
rcKhiPort = _RcKhiPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5)
)
_RcKhiPortSystemStats_ObjectIdentity = ObjectIdentity
rcKhiPortSystemStats = _RcKhiPortSystemStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1)
)
_RcKhiPortSystemStatsTotalUnicastRxPkts_Type = Counter64
_RcKhiPortSystemStatsTotalUnicastRxPkts_Object = MibScalar
rcKhiPortSystemStatsTotalUnicastRxPkts = _RcKhiPortSystemStatsTotalUnicastRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1, 1),
    _RcKhiPortSystemStatsTotalUnicastRxPkts_Type()
)
rcKhiPortSystemStatsTotalUnicastRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortSystemStatsTotalUnicastRxPkts.setStatus("current")
_RcKhiPortSystemStatsTotalUnicastTxPkts_Type = Counter64
_RcKhiPortSystemStatsTotalUnicastTxPkts_Object = MibScalar
rcKhiPortSystemStatsTotalUnicastTxPkts = _RcKhiPortSystemStatsTotalUnicastTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1, 2),
    _RcKhiPortSystemStatsTotalUnicastTxPkts_Type()
)
rcKhiPortSystemStatsTotalUnicastTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortSystemStatsTotalUnicastTxPkts.setStatus("current")
_RcKhiPortSystemStatsUnicastPktsTxRxRatio_Type = Integer32
_RcKhiPortSystemStatsUnicastPktsTxRxRatio_Object = MibScalar
rcKhiPortSystemStatsUnicastPktsTxRxRatio = _RcKhiPortSystemStatsUnicastPktsTxRxRatio_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1, 3),
    _RcKhiPortSystemStatsUnicastPktsTxRxRatio_Type()
)
rcKhiPortSystemStatsUnicastPktsTxRxRatio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortSystemStatsUnicastPktsTxRxRatio.setStatus("current")
_RcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus_Type = KhiStatusValue
_RcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus_Object = MibScalar
rcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus = _RcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1, 4),
    _RcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus_Type()
)
rcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus.setStatus("current")
_RcKhiPortSystemStatsTotalMulticastRxPkts_Type = Counter64
_RcKhiPortSystemStatsTotalMulticastRxPkts_Object = MibScalar
rcKhiPortSystemStatsTotalMulticastRxPkts = _RcKhiPortSystemStatsTotalMulticastRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1, 5),
    _RcKhiPortSystemStatsTotalMulticastRxPkts_Type()
)
rcKhiPortSystemStatsTotalMulticastRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortSystemStatsTotalMulticastRxPkts.setStatus("current")
_RcKhiPortSystemStatsTotalMulticastTxPkts_Type = Counter64
_RcKhiPortSystemStatsTotalMulticastTxPkts_Object = MibScalar
rcKhiPortSystemStatsTotalMulticastTxPkts = _RcKhiPortSystemStatsTotalMulticastTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1, 6),
    _RcKhiPortSystemStatsTotalMulticastTxPkts_Type()
)
rcKhiPortSystemStatsTotalMulticastTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortSystemStatsTotalMulticastTxPkts.setStatus("current")
_RcKhiPortSystemStatsTotalBroadcastRxPkts_Type = Counter64
_RcKhiPortSystemStatsTotalBroadcastRxPkts_Object = MibScalar
rcKhiPortSystemStatsTotalBroadcastRxPkts = _RcKhiPortSystemStatsTotalBroadcastRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1, 7),
    _RcKhiPortSystemStatsTotalBroadcastRxPkts_Type()
)
rcKhiPortSystemStatsTotalBroadcastRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortSystemStatsTotalBroadcastRxPkts.setStatus("current")
_RcKhiPortSystemStatsTotalBroadcastTxPkts_Type = Counter64
_RcKhiPortSystemStatsTotalBroadcastTxPkts_Object = MibScalar
rcKhiPortSystemStatsTotalBroadcastTxPkts = _RcKhiPortSystemStatsTotalBroadcastTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 1, 8),
    _RcKhiPortSystemStatsTotalBroadcastTxPkts_Type()
)
rcKhiPortSystemStatsTotalBroadcastTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortSystemStatsTotalBroadcastTxPkts.setStatus("current")
_RcKhiPortState_ObjectIdentity = ObjectIdentity
rcKhiPortState = _RcKhiPortState_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2)
)
_RcKhiPortStateTotalPortsUp_Type = Integer32
_RcKhiPortStateTotalPortsUp_Object = MibScalar
rcKhiPortStateTotalPortsUp = _RcKhiPortStateTotalPortsUp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 1),
    _RcKhiPortStateTotalPortsUp_Type()
)
rcKhiPortStateTotalPortsUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalPortsUp.setStatus("current")
_RcKhiPortStatePortsUpList_Type = PortSet
_RcKhiPortStatePortsUpList_Object = MibScalar
rcKhiPortStatePortsUpList = _RcKhiPortStatePortsUpList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 2),
    _RcKhiPortStatePortsUpList_Type()
)
rcKhiPortStatePortsUpList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortsUpList.setStatus("current")
_RcKhiPortStatePortsUpReferenceList_Type = PortSet
_RcKhiPortStatePortsUpReferenceList_Object = MibScalar
rcKhiPortStatePortsUpReferenceList = _RcKhiPortStatePortsUpReferenceList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 3),
    _RcKhiPortStatePortsUpReferenceList_Type()
)
rcKhiPortStatePortsUpReferenceList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortsUpReferenceList.setStatus("current")
_RcKhiPortStatePortsUpHealthStatus_Type = KhiStatusValue
_RcKhiPortStatePortsUpHealthStatus_Object = MibScalar
rcKhiPortStatePortsUpHealthStatus = _RcKhiPortStatePortsUpHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 4),
    _RcKhiPortStatePortsUpHealthStatus_Type()
)
rcKhiPortStatePortsUpHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortsUpHealthStatus.setStatus("current")
_RcKhiPortStateTotalPortsDown_Type = Integer32
_RcKhiPortStateTotalPortsDown_Object = MibScalar
rcKhiPortStateTotalPortsDown = _RcKhiPortStateTotalPortsDown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 5),
    _RcKhiPortStateTotalPortsDown_Type()
)
rcKhiPortStateTotalPortsDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalPortsDown.setStatus("current")
_RcKhiPortStatePortsDownList_Type = PortSet
_RcKhiPortStatePortsDownList_Object = MibScalar
rcKhiPortStatePortsDownList = _RcKhiPortStatePortsDownList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 6),
    _RcKhiPortStatePortsDownList_Type()
)
rcKhiPortStatePortsDownList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortsDownList.setStatus("current")
_RcKhiPortStateTotalSmltPortsUp_Type = Integer32
_RcKhiPortStateTotalSmltPortsUp_Object = MibScalar
rcKhiPortStateTotalSmltPortsUp = _RcKhiPortStateTotalSmltPortsUp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 7),
    _RcKhiPortStateTotalSmltPortsUp_Type()
)
rcKhiPortStateTotalSmltPortsUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalSmltPortsUp.setStatus("current")
_RcKhiPortStateSmltPortsUpList_Type = PortSet
_RcKhiPortStateSmltPortsUpList_Object = MibScalar
rcKhiPortStateSmltPortsUpList = _RcKhiPortStateSmltPortsUpList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 8),
    _RcKhiPortStateSmltPortsUpList_Type()
)
rcKhiPortStateSmltPortsUpList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortsUpList.setStatus("current")
_RcKhiPortStateSmltPortsUpReferenceList_Type = PortSet
_RcKhiPortStateSmltPortsUpReferenceList_Object = MibScalar
rcKhiPortStateSmltPortsUpReferenceList = _RcKhiPortStateSmltPortsUpReferenceList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 9),
    _RcKhiPortStateSmltPortsUpReferenceList_Type()
)
rcKhiPortStateSmltPortsUpReferenceList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortsUpReferenceList.setStatus("current")
_RcKhiPortStateSmltPortsUpHealthStatus_Type = KhiStatusValue
_RcKhiPortStateSmltPortsUpHealthStatus_Object = MibScalar
rcKhiPortStateSmltPortsUpHealthStatus = _RcKhiPortStateSmltPortsUpHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 10),
    _RcKhiPortStateSmltPortsUpHealthStatus_Type()
)
rcKhiPortStateSmltPortsUpHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortsUpHealthStatus.setStatus("current")
_RcKhiPortStateTotalSmltPortsDown_Type = Integer32
_RcKhiPortStateTotalSmltPortsDown_Object = MibScalar
rcKhiPortStateTotalSmltPortsDown = _RcKhiPortStateTotalSmltPortsDown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 11),
    _RcKhiPortStateTotalSmltPortsDown_Type()
)
rcKhiPortStateTotalSmltPortsDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalSmltPortsDown.setStatus("current")
_RcKhiPortStateSmltPortsDownList_Type = PortSet
_RcKhiPortStateSmltPortsDownList_Object = MibScalar
rcKhiPortStateSmltPortsDownList = _RcKhiPortStateSmltPortsDownList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 12),
    _RcKhiPortStateSmltPortsDownList_Type()
)
rcKhiPortStateSmltPortsDownList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortsDownList.setStatus("current")
_RcKhiPortStateTotalIstPortsUp_Type = Integer32
_RcKhiPortStateTotalIstPortsUp_Object = MibScalar
rcKhiPortStateTotalIstPortsUp = _RcKhiPortStateTotalIstPortsUp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 13),
    _RcKhiPortStateTotalIstPortsUp_Type()
)
rcKhiPortStateTotalIstPortsUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalIstPortsUp.setStatus("current")
_RcKhiPortStateIstPortsUpList_Type = PortSet
_RcKhiPortStateIstPortsUpList_Object = MibScalar
rcKhiPortStateIstPortsUpList = _RcKhiPortStateIstPortsUpList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 14),
    _RcKhiPortStateIstPortsUpList_Type()
)
rcKhiPortStateIstPortsUpList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortsUpList.setStatus("current")
_RcKhiPortStateIstPortsUpReferenceList_Type = PortSet
_RcKhiPortStateIstPortsUpReferenceList_Object = MibScalar
rcKhiPortStateIstPortsUpReferenceList = _RcKhiPortStateIstPortsUpReferenceList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 15),
    _RcKhiPortStateIstPortsUpReferenceList_Type()
)
rcKhiPortStateIstPortsUpReferenceList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortsUpReferenceList.setStatus("current")
_RcKhiPortStateIstPortsUpHealthStatus_Type = KhiStatusValue
_RcKhiPortStateIstPortsUpHealthStatus_Object = MibScalar
rcKhiPortStateIstPortsUpHealthStatus = _RcKhiPortStateIstPortsUpHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 16),
    _RcKhiPortStateIstPortsUpHealthStatus_Type()
)
rcKhiPortStateIstPortsUpHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortsUpHealthStatus.setStatus("current")
_RcKhiPortStateTotalIstPortsDown_Type = Integer32
_RcKhiPortStateTotalIstPortsDown_Object = MibScalar
rcKhiPortStateTotalIstPortsDown = _RcKhiPortStateTotalIstPortsDown_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 17),
    _RcKhiPortStateTotalIstPortsDown_Type()
)
rcKhiPortStateTotalIstPortsDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalIstPortsDown.setStatus("current")
_RcKhiPortStateIstPortsDownList_Type = PortSet
_RcKhiPortStateIstPortsDownList_Object = MibScalar
rcKhiPortStateIstPortsDownList = _RcKhiPortStateIstPortsDownList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 18),
    _RcKhiPortStateIstPortsDownList_Type()
)
rcKhiPortStateIstPortsDownList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortsDownList.setStatus("current")
_RcKhiPortStateTotalPortUpEvents_Type = Integer32
_RcKhiPortStateTotalPortUpEvents_Object = MibScalar
rcKhiPortStateTotalPortUpEvents = _RcKhiPortStateTotalPortUpEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 19),
    _RcKhiPortStateTotalPortUpEvents_Type()
)
rcKhiPortStateTotalPortUpEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalPortUpEvents.setStatus("current")
_RcKhiPortStatePortUpEventList_Type = PortSet
_RcKhiPortStatePortUpEventList_Object = MibScalar
rcKhiPortStatePortUpEventList = _RcKhiPortStatePortUpEventList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 20),
    _RcKhiPortStatePortUpEventList_Type()
)
rcKhiPortStatePortUpEventList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortUpEventList.setStatus("current")
_RcKhiPortStatePortUpEventsHealthStatus_Type = KhiStatusValue
_RcKhiPortStatePortUpEventsHealthStatus_Object = MibScalar
rcKhiPortStatePortUpEventsHealthStatus = _RcKhiPortStatePortUpEventsHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 21),
    _RcKhiPortStatePortUpEventsHealthStatus_Type()
)
rcKhiPortStatePortUpEventsHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortUpEventsHealthStatus.setStatus("current")
_RcKhiPortStatePortUpEventFirstEventTs_Type = DateAndTime
_RcKhiPortStatePortUpEventFirstEventTs_Object = MibScalar
rcKhiPortStatePortUpEventFirstEventTs = _RcKhiPortStatePortUpEventFirstEventTs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 22),
    _RcKhiPortStatePortUpEventFirstEventTs_Type()
)
rcKhiPortStatePortUpEventFirstEventTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortUpEventFirstEventTs.setStatus("current")
_RcKhiPortStateTotalPortDownEvents_Type = Integer32
_RcKhiPortStateTotalPortDownEvents_Object = MibScalar
rcKhiPortStateTotalPortDownEvents = _RcKhiPortStateTotalPortDownEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 23),
    _RcKhiPortStateTotalPortDownEvents_Type()
)
rcKhiPortStateTotalPortDownEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalPortDownEvents.setStatus("current")
_RcKhiPortStatePortDownEventList_Type = PortSet
_RcKhiPortStatePortDownEventList_Object = MibScalar
rcKhiPortStatePortDownEventList = _RcKhiPortStatePortDownEventList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 24),
    _RcKhiPortStatePortDownEventList_Type()
)
rcKhiPortStatePortDownEventList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortDownEventList.setStatus("current")
_RcKhiPortStatePortDownEventsHealthStatus_Type = KhiStatusValue
_RcKhiPortStatePortDownEventsHealthStatus_Object = MibScalar
rcKhiPortStatePortDownEventsHealthStatus = _RcKhiPortStatePortDownEventsHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 25),
    _RcKhiPortStatePortDownEventsHealthStatus_Type()
)
rcKhiPortStatePortDownEventsHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortDownEventsHealthStatus.setStatus("current")
_RcKhiPortStatePortDownEventFirstEventTs_Type = DateAndTime
_RcKhiPortStatePortDownEventFirstEventTs_Object = MibScalar
rcKhiPortStatePortDownEventFirstEventTs = _RcKhiPortStatePortDownEventFirstEventTs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 26),
    _RcKhiPortStatePortDownEventFirstEventTs_Type()
)
rcKhiPortStatePortDownEventFirstEventTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStatePortDownEventFirstEventTs.setStatus("current")
_RcKhiPortStateTotalSmltPortUpEvents_Type = Integer32
_RcKhiPortStateTotalSmltPortUpEvents_Object = MibScalar
rcKhiPortStateTotalSmltPortUpEvents = _RcKhiPortStateTotalSmltPortUpEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 27),
    _RcKhiPortStateTotalSmltPortUpEvents_Type()
)
rcKhiPortStateTotalSmltPortUpEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalSmltPortUpEvents.setStatus("current")
_RcKhiPortStateSmltPortUpEventList_Type = PortSet
_RcKhiPortStateSmltPortUpEventList_Object = MibScalar
rcKhiPortStateSmltPortUpEventList = _RcKhiPortStateSmltPortUpEventList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 28),
    _RcKhiPortStateSmltPortUpEventList_Type()
)
rcKhiPortStateSmltPortUpEventList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortUpEventList.setStatus("current")
_RcKhiPortStateSmltPortUpEventsHealthStatus_Type = KhiStatusValue
_RcKhiPortStateSmltPortUpEventsHealthStatus_Object = MibScalar
rcKhiPortStateSmltPortUpEventsHealthStatus = _RcKhiPortStateSmltPortUpEventsHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 29),
    _RcKhiPortStateSmltPortUpEventsHealthStatus_Type()
)
rcKhiPortStateSmltPortUpEventsHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortUpEventsHealthStatus.setStatus("current")
_RcKhiPortStateSmltPortUpEventFirstEventTs_Type = DateAndTime
_RcKhiPortStateSmltPortUpEventFirstEventTs_Object = MibScalar
rcKhiPortStateSmltPortUpEventFirstEventTs = _RcKhiPortStateSmltPortUpEventFirstEventTs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 30),
    _RcKhiPortStateSmltPortUpEventFirstEventTs_Type()
)
rcKhiPortStateSmltPortUpEventFirstEventTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortUpEventFirstEventTs.setStatus("current")
_RcKhiPortStateTotalSmltPortDownEvents_Type = Integer32
_RcKhiPortStateTotalSmltPortDownEvents_Object = MibScalar
rcKhiPortStateTotalSmltPortDownEvents = _RcKhiPortStateTotalSmltPortDownEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 31),
    _RcKhiPortStateTotalSmltPortDownEvents_Type()
)
rcKhiPortStateTotalSmltPortDownEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalSmltPortDownEvents.setStatus("current")
_RcKhiPortStateSmltPortDownEventList_Type = PortSet
_RcKhiPortStateSmltPortDownEventList_Object = MibScalar
rcKhiPortStateSmltPortDownEventList = _RcKhiPortStateSmltPortDownEventList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 32),
    _RcKhiPortStateSmltPortDownEventList_Type()
)
rcKhiPortStateSmltPortDownEventList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortDownEventList.setStatus("current")
_RcKhiPortStateSmltPortDownEventsHealthStatus_Type = KhiStatusValue
_RcKhiPortStateSmltPortDownEventsHealthStatus_Object = MibScalar
rcKhiPortStateSmltPortDownEventsHealthStatus = _RcKhiPortStateSmltPortDownEventsHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 33),
    _RcKhiPortStateSmltPortDownEventsHealthStatus_Type()
)
rcKhiPortStateSmltPortDownEventsHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortDownEventsHealthStatus.setStatus("current")
_RcKhiPortStateSmltPortDownEventFirstEventTs_Type = DateAndTime
_RcKhiPortStateSmltPortDownEventFirstEventTs_Object = MibScalar
rcKhiPortStateSmltPortDownEventFirstEventTs = _RcKhiPortStateSmltPortDownEventFirstEventTs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 34),
    _RcKhiPortStateSmltPortDownEventFirstEventTs_Type()
)
rcKhiPortStateSmltPortDownEventFirstEventTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateSmltPortDownEventFirstEventTs.setStatus("current")
_RcKhiPortStateTotalIstPortUpEvents_Type = Integer32
_RcKhiPortStateTotalIstPortUpEvents_Object = MibScalar
rcKhiPortStateTotalIstPortUpEvents = _RcKhiPortStateTotalIstPortUpEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 35),
    _RcKhiPortStateTotalIstPortUpEvents_Type()
)
rcKhiPortStateTotalIstPortUpEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalIstPortUpEvents.setStatus("current")
_RcKhiPortStateIstPortUpEventList_Type = PortSet
_RcKhiPortStateIstPortUpEventList_Object = MibScalar
rcKhiPortStateIstPortUpEventList = _RcKhiPortStateIstPortUpEventList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 36),
    _RcKhiPortStateIstPortUpEventList_Type()
)
rcKhiPortStateIstPortUpEventList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortUpEventList.setStatus("current")
_RcKhiPortStateIstPortUpEventsHealthStatus_Type = KhiStatusValue
_RcKhiPortStateIstPortUpEventsHealthStatus_Object = MibScalar
rcKhiPortStateIstPortUpEventsHealthStatus = _RcKhiPortStateIstPortUpEventsHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 37),
    _RcKhiPortStateIstPortUpEventsHealthStatus_Type()
)
rcKhiPortStateIstPortUpEventsHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortUpEventsHealthStatus.setStatus("current")
_RcKhiPortStateIstPortUpEventFirstEventTs_Type = DateAndTime
_RcKhiPortStateIstPortUpEventFirstEventTs_Object = MibScalar
rcKhiPortStateIstPortUpEventFirstEventTs = _RcKhiPortStateIstPortUpEventFirstEventTs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 38),
    _RcKhiPortStateIstPortUpEventFirstEventTs_Type()
)
rcKhiPortStateIstPortUpEventFirstEventTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortUpEventFirstEventTs.setStatus("current")
_RcKhiPortStateTotalIstPortDownEvents_Type = Integer32
_RcKhiPortStateTotalIstPortDownEvents_Object = MibScalar
rcKhiPortStateTotalIstPortDownEvents = _RcKhiPortStateTotalIstPortDownEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 39),
    _RcKhiPortStateTotalIstPortDownEvents_Type()
)
rcKhiPortStateTotalIstPortDownEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateTotalIstPortDownEvents.setStatus("current")
_RcKhiPortStateIstPortDownEventList_Type = PortSet
_RcKhiPortStateIstPortDownEventList_Object = MibScalar
rcKhiPortStateIstPortDownEventList = _RcKhiPortStateIstPortDownEventList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 40),
    _RcKhiPortStateIstPortDownEventList_Type()
)
rcKhiPortStateIstPortDownEventList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortDownEventList.setStatus("current")
_RcKhiPortStateIstPortDownEventsHealthStatus_Type = KhiStatusValue
_RcKhiPortStateIstPortDownEventsHealthStatus_Object = MibScalar
rcKhiPortStateIstPortDownEventsHealthStatus = _RcKhiPortStateIstPortDownEventsHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 41),
    _RcKhiPortStateIstPortDownEventsHealthStatus_Type()
)
rcKhiPortStateIstPortDownEventsHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortDownEventsHealthStatus.setStatus("current")
_RcKhiPortStateIstPortDownEventFirstEventTs_Type = DateAndTime
_RcKhiPortStateIstPortDownEventFirstEventTs_Object = MibScalar
rcKhiPortStateIstPortDownEventFirstEventTs = _RcKhiPortStateIstPortDownEventFirstEventTs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 42),
    _RcKhiPortStateIstPortDownEventFirstEventTs_Type()
)
rcKhiPortStateIstPortDownEventFirstEventTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateIstPortDownEventFirstEventTs.setStatus("current")
_RcKhiPortStateEventsHistoryTable_Object = MibTable
rcKhiPortStateEventsHistoryTable = _RcKhiPortStateEventsHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 43)
)
if mibBuilder.loadTexts:
    rcKhiPortStateEventsHistoryTable.setStatus("current")
_RcKhiPortStateEventsHistoryEntry_Object = MibTableRow
rcKhiPortStateEventsHistoryEntry = _RcKhiPortStateEventsHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 43, 1)
)
rcKhiPortStateEventsHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiPortStateEventsHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiPortStateEventsHistoryEntry.setStatus("current")


class _RcKhiPortStateEventsHistoryIndex_Type(Integer32):
    """Custom type rcKhiPortStateEventsHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiPortStateEventsHistoryIndex_Type.__name__ = "Integer32"
_RcKhiPortStateEventsHistoryIndex_Object = MibTableColumn
rcKhiPortStateEventsHistoryIndex = _RcKhiPortStateEventsHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 43, 1, 1),
    _RcKhiPortStateEventsHistoryIndex_Type()
)
rcKhiPortStateEventsHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiPortStateEventsHistoryIndex.setStatus("current")
_RcKhiPortStateEventsHistoryTimestamp_Type = DateAndTime
_RcKhiPortStateEventsHistoryTimestamp_Object = MibTableColumn
rcKhiPortStateEventsHistoryTimestamp = _RcKhiPortStateEventsHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 43, 1, 2),
    _RcKhiPortStateEventsHistoryTimestamp_Type()
)
rcKhiPortStateEventsHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateEventsHistoryTimestamp.setStatus("current")


class _RcKhiPortStateEventsHistoryPort_Type(Integer32):
    """Custom type rcKhiPortStateEventsHistoryPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RcKhiPortStateEventsHistoryPort_Type.__name__ = "Integer32"
_RcKhiPortStateEventsHistoryPort_Object = MibTableColumn
rcKhiPortStateEventsHistoryPort = _RcKhiPortStateEventsHistoryPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 43, 1, 3),
    _RcKhiPortStateEventsHistoryPort_Type()
)
rcKhiPortStateEventsHistoryPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateEventsHistoryPort.setStatus("current")


class _RcKhiPortStateEventsHistoryEvent_Type(Integer32):
    """Custom type rcKhiPortStateEventsHistoryEvent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("istPortDown", 6),
          ("istPortUp", 5),
          ("portDown", 2),
          ("portUp", 1),
          ("smltPortDown", 4),
          ("smltPortUp", 3),
          ("ucastPktTxRxRatioRed", 8),
          ("ucastPktTxRxRatioYellow", 7))
    )


_RcKhiPortStateEventsHistoryEvent_Type.__name__ = "Integer32"
_RcKhiPortStateEventsHistoryEvent_Object = MibTableColumn
rcKhiPortStateEventsHistoryEvent = _RcKhiPortStateEventsHistoryEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 2, 43, 1, 4),
    _RcKhiPortStateEventsHistoryEvent_Type()
)
rcKhiPortStateEventsHistoryEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortStateEventsHistoryEvent.setStatus("current")
_RcKhiPortErrors_ObjectIdentity = ObjectIdentity
rcKhiPortErrors = _RcKhiPortErrors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3)
)
_RcKhiPortErrorsEventsTable_Object = MibTable
rcKhiPortErrorsEventsTable = _RcKhiPortErrorsEventsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1)
)
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsTable.setStatus("current")
_RcKhiPortErrorsEventsEntry_Object = MibTableRow
rcKhiPortErrorsEventsEntry = _RcKhiPortErrorsEventsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1)
)
rcKhiPortErrorsEventsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiPortErrorsEventsPortNum"),
)
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsEntry.setStatus("current")


class _RcKhiPortErrorsEventsPortNum_Type(Integer32):
    """Custom type rcKhiPortErrorsEventsPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcKhiPortErrorsEventsPortNum_Type.__name__ = "Integer32"
_RcKhiPortErrorsEventsPortNum_Object = MibTableColumn
rcKhiPortErrorsEventsPortNum = _RcKhiPortErrorsEventsPortNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 1),
    _RcKhiPortErrorsEventsPortNum_Type()
)
rcKhiPortErrorsEventsPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsPortNum.setStatus("current")
_RcKhiPortErrorsEventsSingleCollisionErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsSingleCollisionErr_Object = MibTableColumn
rcKhiPortErrorsEventsSingleCollisionErr = _RcKhiPortErrorsEventsSingleCollisionErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 2),
    _RcKhiPortErrorsEventsSingleCollisionErr_Type()
)
rcKhiPortErrorsEventsSingleCollisionErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsSingleCollisionErr.setStatus("current")
_RcKhiPortErrorsEventsMultipleCollisionErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsMultipleCollisionErr_Object = MibTableColumn
rcKhiPortErrorsEventsMultipleCollisionErr = _RcKhiPortErrorsEventsMultipleCollisionErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 3),
    _RcKhiPortErrorsEventsMultipleCollisionErr_Type()
)
rcKhiPortErrorsEventsMultipleCollisionErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsMultipleCollisionErr.setStatus("current")
_RcKhiPortErrorsEventsLateCollisionErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsLateCollisionErr_Object = MibTableColumn
rcKhiPortErrorsEventsLateCollisionErr = _RcKhiPortErrorsEventsLateCollisionErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 4),
    _RcKhiPortErrorsEventsLateCollisionErr_Type()
)
rcKhiPortErrorsEventsLateCollisionErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsLateCollisionErr.setStatus("current")
_RcKhiPortErrorsEventsExcessiveCollisionErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsExcessiveCollisionErr_Object = MibTableColumn
rcKhiPortErrorsEventsExcessiveCollisionErr = _RcKhiPortErrorsEventsExcessiveCollisionErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 5),
    _RcKhiPortErrorsEventsExcessiveCollisionErr_Type()
)
rcKhiPortErrorsEventsExcessiveCollisionErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsExcessiveCollisionErr.setStatus("current")
_RcKhiPortErrorsEventsMacRxErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsMacRxErr_Object = MibTableColumn
rcKhiPortErrorsEventsMacRxErr = _RcKhiPortErrorsEventsMacRxErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 6),
    _RcKhiPortErrorsEventsMacRxErr_Type()
)
rcKhiPortErrorsEventsMacRxErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsMacRxErr.setStatus("current")
_RcKhiPortErrorsEventsMacTxErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsMacTxErr_Object = MibTableColumn
rcKhiPortErrorsEventsMacTxErr = _RcKhiPortErrorsEventsMacTxErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 7),
    _RcKhiPortErrorsEventsMacTxErr_Type()
)
rcKhiPortErrorsEventsMacTxErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsMacTxErr.setStatus("current")
_RcKhiPortErrorsEventsDeferTxErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsDeferTxErr_Object = MibTableColumn
rcKhiPortErrorsEventsDeferTxErr = _RcKhiPortErrorsEventsDeferTxErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 8),
    _RcKhiPortErrorsEventsDeferTxErr_Type()
)
rcKhiPortErrorsEventsDeferTxErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsDeferTxErr.setStatus("current")
_RcKhiPortErrorsEventsPacketErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsPacketErr_Object = MibTableColumn
rcKhiPortErrorsEventsPacketErr = _RcKhiPortErrorsEventsPacketErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 9),
    _RcKhiPortErrorsEventsPacketErr_Type()
)
rcKhiPortErrorsEventsPacketErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsPacketErr.setStatus("current")
_RcKhiPortErrorsEventsLinkInactiveErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsLinkInactiveErr_Object = MibTableColumn
rcKhiPortErrorsEventsLinkInactiveErr = _RcKhiPortErrorsEventsLinkInactiveErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 10),
    _RcKhiPortErrorsEventsLinkInactiveErr_Type()
)
rcKhiPortErrorsEventsLinkInactiveErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsLinkInactiveErr.setStatus("current")
_RcKhiPortErrorsEventsUnknownProtoErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsUnknownProtoErr_Object = MibTableColumn
rcKhiPortErrorsEventsUnknownProtoErr = _RcKhiPortErrorsEventsUnknownProtoErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 11),
    _RcKhiPortErrorsEventsUnknownProtoErr_Type()
)
rcKhiPortErrorsEventsUnknownProtoErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsUnknownProtoErr.setStatus("current")
_RcKhiPortErrorsEventsInFlwctrlErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsInFlwctrlErr_Object = MibTableColumn
rcKhiPortErrorsEventsInFlwctrlErr = _RcKhiPortErrorsEventsInFlwctrlErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 12),
    _RcKhiPortErrorsEventsInFlwctrlErr_Type()
)
rcKhiPortErrorsEventsInFlwctrlErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsInFlwctrlErr.setStatus("current")
_RcKhiPortErrorsEventsOutFlwctrlErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsOutFlwctrlErr_Object = MibTableColumn
rcKhiPortErrorsEventsOutFlwctrlErr = _RcKhiPortErrorsEventsOutFlwctrlErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 13),
    _RcKhiPortErrorsEventsOutFlwctrlErr_Type()
)
rcKhiPortErrorsEventsOutFlwctrlErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsOutFlwctrlErr.setStatus("current")
_RcKhiPortErrorsEventsAlignErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsAlignErr_Object = MibTableColumn
rcKhiPortErrorsEventsAlignErr = _RcKhiPortErrorsEventsAlignErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 14),
    _RcKhiPortErrorsEventsAlignErr_Type()
)
rcKhiPortErrorsEventsAlignErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsAlignErr.setStatus("current")
_RcKhiPortErrorsEventsFCSErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsFCSErr_Object = MibTableColumn
rcKhiPortErrorsEventsFCSErr = _RcKhiPortErrorsEventsFCSErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 15),
    _RcKhiPortErrorsEventsFCSErr_Type()
)
rcKhiPortErrorsEventsFCSErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsFCSErr.setStatus("current")
_RcKhiPortErrorsEventsFramesLongErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsFramesLongErr_Object = MibTableColumn
rcKhiPortErrorsEventsFramesLongErr = _RcKhiPortErrorsEventsFramesLongErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 16),
    _RcKhiPortErrorsEventsFramesLongErr_Type()
)
rcKhiPortErrorsEventsFramesLongErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsFramesLongErr.setStatus("current")
_RcKhiPortErrorsEventsTooShortErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsTooShortErr_Object = MibTableColumn
rcKhiPortErrorsEventsTooShortErr = _RcKhiPortErrorsEventsTooShortErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 17),
    _RcKhiPortErrorsEventsTooShortErr_Type()
)
rcKhiPortErrorsEventsTooShortErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsTooShortErr.setStatus("current")
_RcKhiPortErrorsEventsLinkFailureErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsLinkFailureErr_Object = MibTableColumn
rcKhiPortErrorsEventsLinkFailureErr = _RcKhiPortErrorsEventsLinkFailureErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 18),
    _RcKhiPortErrorsEventsLinkFailureErr_Type()
)
rcKhiPortErrorsEventsLinkFailureErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsLinkFailureErr.setStatus("current")
_RcKhiPortErrorsEventsCarrierSenseErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsCarrierSenseErr_Object = MibTableColumn
rcKhiPortErrorsEventsCarrierSenseErr = _RcKhiPortErrorsEventsCarrierSenseErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 19),
    _RcKhiPortErrorsEventsCarrierSenseErr_Type()
)
rcKhiPortErrorsEventsCarrierSenseErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsCarrierSenseErr.setStatus("current")
_RcKhiPortErrorsEventsCarrierErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsCarrierErr_Object = MibTableColumn
rcKhiPortErrorsEventsCarrierErr = _RcKhiPortErrorsEventsCarrierErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 20),
    _RcKhiPortErrorsEventsCarrierErr_Type()
)
rcKhiPortErrorsEventsCarrierErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsCarrierErr.setStatus("current")
_RcKhiPortErrorsEventsSQETestErr_Type = KhiStatusValue
_RcKhiPortErrorsEventsSQETestErr_Object = MibTableColumn
rcKhiPortErrorsEventsSQETestErr = _RcKhiPortErrorsEventsSQETestErr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 1, 1, 21),
    _RcKhiPortErrorsEventsSQETestErr_Type()
)
rcKhiPortErrorsEventsSQETestErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsEventsSQETestErr.setStatus("current")
_RcKhiPortErrorsHistoryTable_Object = MibTable
rcKhiPortErrorsHistoryTable = _RcKhiPortErrorsHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 2)
)
if mibBuilder.loadTexts:
    rcKhiPortErrorsHistoryTable.setStatus("current")
_RcKhiPortErrorsHistoryEntry_Object = MibTableRow
rcKhiPortErrorsHistoryEntry = _RcKhiPortErrorsHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 2, 1)
)
rcKhiPortErrorsHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiPortErrorsHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiPortErrorsHistoryEntry.setStatus("current")


class _RcKhiPortErrorsHistoryIndex_Type(Integer32):
    """Custom type rcKhiPortErrorsHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiPortErrorsHistoryIndex_Type.__name__ = "Integer32"
_RcKhiPortErrorsHistoryIndex_Object = MibTableColumn
rcKhiPortErrorsHistoryIndex = _RcKhiPortErrorsHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 2, 1, 1),
    _RcKhiPortErrorsHistoryIndex_Type()
)
rcKhiPortErrorsHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiPortErrorsHistoryIndex.setStatus("current")
_RcKhiPortErrorsHistoryTimestamp_Type = DateAndTime
_RcKhiPortErrorsHistoryTimestamp_Object = MibTableColumn
rcKhiPortErrorsHistoryTimestamp = _RcKhiPortErrorsHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 2, 1, 2),
    _RcKhiPortErrorsHistoryTimestamp_Type()
)
rcKhiPortErrorsHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsHistoryTimestamp.setStatus("current")


class _RcKhiPortErrorsHistoryPort_Type(Integer32):
    """Custom type rcKhiPortErrorsHistoryPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RcKhiPortErrorsHistoryPort_Type.__name__ = "Integer32"
_RcKhiPortErrorsHistoryPort_Object = MibTableColumn
rcKhiPortErrorsHistoryPort = _RcKhiPortErrorsHistoryPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 2, 1, 3),
    _RcKhiPortErrorsHistoryPort_Type()
)
rcKhiPortErrorsHistoryPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsHistoryPort.setStatus("current")


class _RcKhiPortErrorsHistoryErrorEvents_Type(Bits):
    """Custom type rcKhiPortErrorsHistoryErrorEvents based on Bits"""
    namedValues = NamedValues(
        *(("alignErrors", 12),
          ("carrierErrors", 18),
          ("carrierSenseErrors", 17),
          ("deferTxErrors", 6),
          ("excessiveCollisionErrors", 3),
          ("fcsErrors", 13),
          ("framesLongErrors", 14),
          ("inFlwctrlErrors", 10),
          ("lateCollisionErrors", 2),
          ("linkFailureErrors", 16),
          ("linkInactiveErrors", 8),
          ("macRxErrors", 4),
          ("macTxErrors", 5),
          ("multipleCollisionErrors", 1),
          ("outFlwctrlErrors", 11),
          ("packetErrors", 7),
          ("singleCollisionErrors", 0),
          ("sqeTestErrors", 19),
          ("tooShortErrors", 15),
          ("unknownProtoErrors", 9))
    )

_RcKhiPortErrorsHistoryErrorEvents_Type.__name__ = "Bits"
_RcKhiPortErrorsHistoryErrorEvents_Object = MibTableColumn
rcKhiPortErrorsHistoryErrorEvents = _RcKhiPortErrorsHistoryErrorEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 5, 3, 2, 1, 4),
    _RcKhiPortErrorsHistoryErrorEvents_Type()
)
rcKhiPortErrorsHistoryErrorEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPortErrorsHistoryErrorEvents.setStatus("current")
_RcKhiForwarding_ObjectIdentity = ObjectIdentity
rcKhiForwarding = _RcKhiForwarding_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6)
)
_RcKhiForwardingAsicHealthTable_Object = MibTable
rcKhiForwardingAsicHealthTable = _RcKhiForwardingAsicHealthTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1)
)
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthTable.setStatus("current")
_RcKhiForwardingAsicHealthEntry_Object = MibTableRow
rcKhiForwardingAsicHealthEntry = _RcKhiForwardingAsicHealthEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1)
)
rcKhiForwardingAsicHealthEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiForwardingAsicHealthSlotNumber"),
)
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthEntry.setStatus("current")


class _RcKhiForwardingAsicHealthSlotNumber_Type(Integer32):
    """Custom type rcKhiForwardingAsicHealthSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiForwardingAsicHealthSlotNumber_Type.__name__ = "Integer32"
_RcKhiForwardingAsicHealthSlotNumber_Object = MibTableColumn
rcKhiForwardingAsicHealthSlotNumber = _RcKhiForwardingAsicHealthSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 1),
    _RcKhiForwardingAsicHealthSlotNumber_Type()
)
rcKhiForwardingAsicHealthSlotNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthSlotNumber.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt = _RcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 2),
    _RcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt = _RcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 3),
    _RcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt_Type()
)
rcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt = _RcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 4),
    _RcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt_Type()
)
rcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus = _RcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 5),
    _RcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus = _RcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 6),
    _RcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus_Type()
)
rcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus = _RcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 7),
    _RcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus_Type()
)
rcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt = _RcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 8),
    _RcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt = _RcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 9),
    _RcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt_Type()
)
rcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt = _RcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 10),
    _RcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt_Type()
)
rcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus = _RcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 11),
    _RcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus = _RcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 12),
    _RcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus_Type()
)
rcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus = _RcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 13),
    _RcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus_Type()
)
rcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt = _RcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 14),
    _RcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnIngSPIDefragCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnIngSPIDefragCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnIngSPIDefragCnt = _RcKhiForwardingAsicHealthMidLnIngSPIDefragCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 15),
    _RcKhiForwardingAsicHealthMidLnIngSPIDefragCnt_Type()
)
rcKhiForwardingAsicHealthMidLnIngSPIDefragCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnIngSPIDefragCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnIngSPIDefragCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnIngSPIDefragCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnIngSPIDefragCnt = _RcKhiForwardingAsicHealthRightLnIngSPIDefragCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 16),
    _RcKhiForwardingAsicHealthRightLnIngSPIDefragCnt_Type()
)
rcKhiForwardingAsicHealthRightLnIngSPIDefragCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnIngSPIDefragCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus = _RcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 17),
    _RcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnIngSPIDefragStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnIngSPIDefragStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnIngSPIDefragStatus = _RcKhiForwardingAsicHealthMidLnIngSPIDefragStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 18),
    _RcKhiForwardingAsicHealthMidLnIngSPIDefragStatus_Type()
)
rcKhiForwardingAsicHealthMidLnIngSPIDefragStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnIngSPIDefragStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnIngSPIDefragStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnIngSPIDefragStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnIngSPIDefragStatus = _RcKhiForwardingAsicHealthRightLnIngSPIDefragStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 19),
    _RcKhiForwardingAsicHealthRightLnIngSPIDefragStatus_Type()
)
rcKhiForwardingAsicHealthRightLnIngSPIDefragStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnIngSPIDefragStatus.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt = _RcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 20),
    _RcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt = _RcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 21),
    _RcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt_Type()
)
rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt = _RcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 22),
    _RcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt_Type()
)
rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus = _RcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 23),
    _RcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus = _RcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 24),
    _RcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus_Type()
)
rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus = _RcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 25),
    _RcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus_Type()
)
rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt = _RcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 26),
    _RcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt = _RcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 27),
    _RcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt_Type()
)
rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt = _RcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 28),
    _RcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt_Type()
)
rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus = _RcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 29),
    _RcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus = _RcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 30),
    _RcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus_Type()
)
rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus = _RcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 31),
    _RcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus_Type()
)
rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt = _RcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 32),
    _RcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt = _RcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 33),
    _RcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt_Type()
)
rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt = _RcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 34),
    _RcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt_Type()
)
rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus = _RcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 35),
    _RcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus = _RcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 36),
    _RcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus_Type()
)
rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus = _RcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 37),
    _RcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus_Type()
)
rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt = _RcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 39),
    _RcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt = _RcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 40),
    _RcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt_Type()
)
rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt = _RcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 41),
    _RcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt_Type()
)
rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus = _RcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 42),
    _RcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus = _RcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 43),
    _RcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus_Type()
)
rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus = _RcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 44),
    _RcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus_Type()
)
rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt = _RcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 45),
    _RcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt = _RcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 46),
    _RcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt_Type()
)
rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt = _RcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 47),
    _RcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt_Type()
)
rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus = _RcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 48),
    _RcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus = _RcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 49),
    _RcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus_Type()
)
rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus = _RcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 50),
    _RcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus_Type()
)
rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt = _RcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 51),
    _RcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt = _RcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 52),
    _RcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt_Type()
)
rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt_Type = Integer32
_RcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt = _RcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 53),
    _RcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt_Type()
)
rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt.setStatus("current")
_RcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus = _RcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 54),
    _RcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus_Type()
)
rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus.setStatus("current")
_RcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus = _RcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 55),
    _RcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus_Type()
)
rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus.setStatus("current")
_RcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus_Type = KhiStatusValue
_RcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus_Object = MibTableColumn
rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus = _RcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 1, 1, 56),
    _RcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus_Type()
)
rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus.setStatus("current")
_RcKhiForwardingRSPStateTable_Object = MibTable
rcKhiForwardingRSPStateTable = _RcKhiForwardingRSPStateTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2)
)
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateTable.setStatus("current")
_RcKhiForwardingRSPStateEntry_Object = MibTableRow
rcKhiForwardingRSPStateEntry = _RcKhiForwardingRSPStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1)
)
rcKhiForwardingRSPStateEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiForwardingRSPStateSlotNumber"),
    (0, "RAPID-CITY", "rcKhiForwardingRSPStateDirection"),
)
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateEntry.setStatus("current")


class _RcKhiForwardingRSPStateSlotNumber_Type(Integer32):
    """Custom type rcKhiForwardingRSPStateSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiForwardingRSPStateSlotNumber_Type.__name__ = "Integer32"
_RcKhiForwardingRSPStateSlotNumber_Object = MibTableColumn
rcKhiForwardingRSPStateSlotNumber = _RcKhiForwardingRSPStateSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1, 1),
    _RcKhiForwardingRSPStateSlotNumber_Type()
)
rcKhiForwardingRSPStateSlotNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateSlotNumber.setStatus("current")


class _RcKhiForwardingRSPStateDirection_Type(Integer32):
    """Custom type rcKhiForwardingRSPStateDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("egress", 2),
          ("ingress", 1))
    )


_RcKhiForwardingRSPStateDirection_Type.__name__ = "Integer32"
_RcKhiForwardingRSPStateDirection_Object = MibTableColumn
rcKhiForwardingRSPStateDirection = _RcKhiForwardingRSPStateDirection_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1, 2),
    _RcKhiForwardingRSPStateDirection_Type()
)
rcKhiForwardingRSPStateDirection.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateDirection.setStatus("current")


class _RcKhiForwardingRSPStateLeftLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingRSPStateLeftLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("amIllegalArgumentException", 46),
          ("amIllegalRegionOrSubregionException", 41),
          ("amLookupContinueZeroException", 50),
          ("amNonAllignedAddressException", 47),
          ("amPacketHeaderAddressErrorException", 49),
          ("amPacketMemoryBusErrorException", 48),
          ("amParityErrorException", 44),
          ("amProtocolErrorException", 45),
          ("amSearchBusErrorException", 43),
          ("amSearchRunOnException", 42),
          ("amSoftwareInterrupt", 59),
          ("amUnsupportedOptypeForRegionOrDeviceException", 40),
          ("amUnsupportedRSVD10Exception", 52),
          ("amUnsupportedRSVD1Exception", 53),
          ("amUnsupportedRSVD2Exception", 54),
          ("amUnsupportedRSVD3Exception", 55),
          ("amUnsupportedRSVD4Exception", 56),
          ("amUnsupportedRSVD5Exception", 57),
          ("amUnsupportedRSVD8Exception", 51),
          ("amUnsupportedUnknownHWFailureException", 58),
          ("bapClockPLLNotLocked", 6),
          ("bapControllerReadError", 15),
          ("bapControllerWriteError", 14),
          ("bapDecoderError", 12),
          ("bapDecoderSpecialAccessError", 13),
          ("bapGABError", 16),
          ("bapHostReadError", 4),
          ("bapHostWriteError", 5),
          ("bapIntfError", 11),
          ("bapIntfTimeout", 10),
          ("bapMemoryClockPLLNotLocked", 8),
          ("bapTxClockPLLNotLocked", 7),
          ("cifParityError", 0),
          ("cifProtocolError", 1),
          ("eme0ParityError", 2),
          ("eme1ParityError", 3),
          ("fdibEmptyPktWrongPTMAccess", 21),
          ("fdibFifoEmptyWrongPMAccess", 23),
          ("fdibInvalidPage", 24),
          ("fdibMixedAccess", 26),
          ("fdibPastEndOfPktError", 22),
          ("fdobIsEmpty", 29),
          ("fdobIsFull", 28),
          ("fdobPMError", 27),
          ("fifoFull", 25),
          ("gabError", 9),
          ("hashEngineDisabled", 19),
          ("ime0Disabled", 17),
          ("ime1Disabled", 18),
          ("missingRSPHeartbeats", 60),
          ("multiplicationEngineDisabled", 20),
          ("pmEME0ParityError", 35),
          ("pmEME1ParityError", 34),
          ("pmFDIBHPIBUSError", 33),
          ("pmFrameError", 37),
          ("pmMulticastError", 36),
          ("pmPopRollover", 38),
          ("pmProgramCounterError", 31),
          ("pmReleaseError", 39),
          ("pmStatsBUSError", 32),
          ("ptmBusError", 30))
    )

_RcKhiForwardingRSPStateLeftLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingRSPStateLeftLnErrMask_Object = MibTableColumn
rcKhiForwardingRSPStateLeftLnErrMask = _RcKhiForwardingRSPStateLeftLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1, 3),
    _RcKhiForwardingRSPStateLeftLnErrMask_Type()
)
rcKhiForwardingRSPStateLeftLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateLeftLnErrMask.setStatus("current")


class _RcKhiForwardingRSPStateMidLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingRSPStateMidLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("amIllegalArgumentException", 46),
          ("amIllegalRegionOrSubregionException", 41),
          ("amLookupContinueZeroException", 50),
          ("amNonAllignedAddressException", 47),
          ("amPacketHeaderAddressErrorException", 49),
          ("amPacketMemoryBusErrorException", 48),
          ("amParityErrorException", 44),
          ("amProtocolErrorException", 45),
          ("amSearchBusErrorException", 43),
          ("amSearchRunOnException", 42),
          ("amSoftwareInterrupt", 59),
          ("amUnsupportedOptypeForRegionOrDeviceException", 40),
          ("amUnsupportedRSVD10Exception", 52),
          ("amUnsupportedRSVD1Exception", 53),
          ("amUnsupportedRSVD2Exception", 54),
          ("amUnsupportedRSVD3Exception", 55),
          ("amUnsupportedRSVD4Exception", 56),
          ("amUnsupportedRSVD5Exception", 57),
          ("amUnsupportedRSVD8Exception", 51),
          ("amUnsupportedUnknownHWFailureException", 58),
          ("bapClockPLLNotLocked", 6),
          ("bapControllerReadError", 15),
          ("bapControllerWriteError", 14),
          ("bapDecoderError", 12),
          ("bapDecoderSpecialAccessError", 13),
          ("bapGABError", 16),
          ("bapHostReadError", 4),
          ("bapHostWriteError", 5),
          ("bapIntfError", 11),
          ("bapIntfTimeout", 10),
          ("bapMemoryClockPLLNotLocked", 8),
          ("bapTxClockPLLNotLocked", 7),
          ("cifParityError", 0),
          ("cifProtocolError", 1),
          ("eme0ParityError", 2),
          ("eme1ParityError", 3),
          ("fdibEmptyPktWrongPTMAccess", 21),
          ("fdibFifoEmptyWrongPMAccess", 23),
          ("fdibInvalidPage", 24),
          ("fdibMixedAccess", 26),
          ("fdibPastEndOfPktError", 22),
          ("fdobIsEmpty", 29),
          ("fdobIsFull", 28),
          ("fdobPMError", 27),
          ("fifoFull", 25),
          ("gabError", 9),
          ("hashEngineDisabled", 19),
          ("ime0Disabled", 17),
          ("ime1Disabled", 18),
          ("missingRSPHeartbeats", 60),
          ("multiplicationEngineDisabled", 20),
          ("pmEME0ParityError", 35),
          ("pmEME1ParityError", 34),
          ("pmFDIBHPIBUSError", 33),
          ("pmFrameError", 37),
          ("pmMulticastError", 36),
          ("pmPopRollover", 38),
          ("pmProgramCounterError", 31),
          ("pmReleaseError", 39),
          ("pmStatsBUSError", 32),
          ("ptmBusError", 30))
    )

_RcKhiForwardingRSPStateMidLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingRSPStateMidLnErrMask_Object = MibTableColumn
rcKhiForwardingRSPStateMidLnErrMask = _RcKhiForwardingRSPStateMidLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1, 4),
    _RcKhiForwardingRSPStateMidLnErrMask_Type()
)
rcKhiForwardingRSPStateMidLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateMidLnErrMask.setStatus("current")


class _RcKhiForwardingRSPStateRightLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingRSPStateRightLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("amIllegalArgumentException", 46),
          ("amIllegalRegionOrSubregionException", 41),
          ("amLookupContinueZeroException", 50),
          ("amNonAllignedAddressException", 47),
          ("amPacketHeaderAddressErrorException", 49),
          ("amPacketMemoryBusErrorException", 48),
          ("amParityErrorException", 44),
          ("amProtocolErrorException", 45),
          ("amSearchBusErrorException", 43),
          ("amSearchRunOnException", 42),
          ("amSoftwareInterrupt", 59),
          ("amUnsupportedOptypeForRegionOrDeviceException", 40),
          ("amUnsupportedRSVD10Exception", 52),
          ("amUnsupportedRSVD1Exception", 53),
          ("amUnsupportedRSVD2Exception", 54),
          ("amUnsupportedRSVD3Exception", 55),
          ("amUnsupportedRSVD4Exception", 56),
          ("amUnsupportedRSVD5Exception", 57),
          ("amUnsupportedRSVD8Exception", 51),
          ("amUnsupportedUnknownHWFailureException", 58),
          ("bapClockPLLNotLocked", 6),
          ("bapControllerReadError", 15),
          ("bapControllerWriteError", 14),
          ("bapDecoderError", 12),
          ("bapDecoderSpecialAccessError", 13),
          ("bapGABError", 16),
          ("bapHostReadError", 4),
          ("bapHostWriteError", 5),
          ("bapIntfError", 11),
          ("bapIntfTimeout", 10),
          ("bapMemoryClockPLLNotLocked", 8),
          ("bapTxClockPLLNotLocked", 7),
          ("cifParityError", 0),
          ("cifProtocolError", 1),
          ("eme0ParityError", 2),
          ("eme1ParityError", 3),
          ("fdibEmptyPktWrongPTMAccess", 21),
          ("fdibFifoEmptyWrongPMAccess", 23),
          ("fdibInvalidPage", 24),
          ("fdibMixedAccess", 26),
          ("fdibPastEndOfPktError", 22),
          ("fdobIsEmpty", 29),
          ("fdobIsFull", 28),
          ("fdobPMError", 27),
          ("fifoFull", 25),
          ("gabError", 9),
          ("hashEngineDisabled", 19),
          ("ime0Disabled", 17),
          ("ime1Disabled", 18),
          ("missingRSPHeartbeats", 60),
          ("multiplicationEngineDisabled", 20),
          ("pmEME0ParityError", 35),
          ("pmEME1ParityError", 34),
          ("pmFDIBHPIBUSError", 33),
          ("pmFrameError", 37),
          ("pmMulticastError", 36),
          ("pmPopRollover", 38),
          ("pmProgramCounterError", 31),
          ("pmReleaseError", 39),
          ("pmStatsBUSError", 32),
          ("ptmBusError", 30))
    )

_RcKhiForwardingRSPStateRightLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingRSPStateRightLnErrMask_Object = MibTableColumn
rcKhiForwardingRSPStateRightLnErrMask = _RcKhiForwardingRSPStateRightLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1, 5),
    _RcKhiForwardingRSPStateRightLnErrMask_Type()
)
rcKhiForwardingRSPStateRightLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateRightLnErrMask.setStatus("current")
_RcKhiForwardingRSPStateLeftLnHealthStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStateLeftLnHealthStatus_Object = MibTableColumn
rcKhiForwardingRSPStateLeftLnHealthStatus = _RcKhiForwardingRSPStateLeftLnHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1, 6),
    _RcKhiForwardingRSPStateLeftLnHealthStatus_Type()
)
rcKhiForwardingRSPStateLeftLnHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateLeftLnHealthStatus.setStatus("current")
_RcKhiForwardingRSPStateMidLnHealthStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStateMidLnHealthStatus_Object = MibTableColumn
rcKhiForwardingRSPStateMidLnHealthStatus = _RcKhiForwardingRSPStateMidLnHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1, 7),
    _RcKhiForwardingRSPStateMidLnHealthStatus_Type()
)
rcKhiForwardingRSPStateMidLnHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateMidLnHealthStatus.setStatus("current")
_RcKhiForwardingRSPStateRightLnHealthStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStateRightLnHealthStatus_Object = MibTableColumn
rcKhiForwardingRSPStateRightLnHealthStatus = _RcKhiForwardingRSPStateRightLnHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 2, 1, 8),
    _RcKhiForwardingRSPStateRightLnHealthStatus_Type()
)
rcKhiForwardingRSPStateRightLnHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStateRightLnHealthStatus.setStatus("current")
_RcKhiForwardingRSPStatsTable_Object = MibTable
rcKhiForwardingRSPStatsTable = _RcKhiForwardingRSPStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3)
)
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsTable.setStatus("current")
_RcKhiForwardingRSPStatsEntry_Object = MibTableRow
rcKhiForwardingRSPStatsEntry = _RcKhiForwardingRSPStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1)
)
rcKhiForwardingRSPStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiForwardingRSPStatsSlotNumber"),
    (0, "RAPID-CITY", "rcKhiForwardingRSPStatsDirection"),
)
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsEntry.setStatus("current")


class _RcKhiForwardingRSPStatsSlotNumber_Type(Integer32):
    """Custom type rcKhiForwardingRSPStatsSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiForwardingRSPStatsSlotNumber_Type.__name__ = "Integer32"
_RcKhiForwardingRSPStatsSlotNumber_Object = MibTableColumn
rcKhiForwardingRSPStatsSlotNumber = _RcKhiForwardingRSPStatsSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 1),
    _RcKhiForwardingRSPStatsSlotNumber_Type()
)
rcKhiForwardingRSPStatsSlotNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsSlotNumber.setStatus("current")


class _RcKhiForwardingRSPStatsDirection_Type(Integer32):
    """Custom type rcKhiForwardingRSPStatsDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("egress", 2),
          ("ingress", 1))
    )


_RcKhiForwardingRSPStatsDirection_Type.__name__ = "Integer32"
_RcKhiForwardingRSPStatsDirection_Object = MibTableColumn
rcKhiForwardingRSPStatsDirection = _RcKhiForwardingRSPStatsDirection_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 2),
    _RcKhiForwardingRSPStatsDirection_Type()
)
rcKhiForwardingRSPStatsDirection.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsDirection.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnTotalAMPkts_Type = Counter64
_RcKhiForwardingRSPStatsLeftLnTotalAMPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnTotalAMPkts = _RcKhiForwardingRSPStatsLeftLnTotalAMPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 3),
    _RcKhiForwardingRSPStatsLeftLnTotalAMPkts_Type()
)
rcKhiForwardingRSPStatsLeftLnTotalAMPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnTotalAMPkts.setStatus("current")
_RcKhiForwardingRSPStatsMidLnTotalAMPkts_Type = Counter64
_RcKhiForwardingRSPStatsMidLnTotalAMPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnTotalAMPkts = _RcKhiForwardingRSPStatsMidLnTotalAMPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 4),
    _RcKhiForwardingRSPStatsMidLnTotalAMPkts_Type()
)
rcKhiForwardingRSPStatsMidLnTotalAMPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnTotalAMPkts.setStatus("current")
_RcKhiForwardingRSPStatsRightLnTotalAMPkts_Type = Counter64
_RcKhiForwardingRSPStatsRightLnTotalAMPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnTotalAMPkts = _RcKhiForwardingRSPStatsRightLnTotalAMPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 5),
    _RcKhiForwardingRSPStatsRightLnTotalAMPkts_Type()
)
rcKhiForwardingRSPStatsRightLnTotalAMPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnTotalAMPkts.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts = _RcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 6),
    _RcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts_Type()
)
rcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts = _RcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 7),
    _RcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts_Type()
)
rcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts = _RcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 8),
    _RcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts_Type()
)
rcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus = _RcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 9),
    _RcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus_Type()
)
rcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus = _RcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 10),
    _RcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus_Type()
)
rcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus = _RcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 11),
    _RcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus_Type()
)
rcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnTotalAMShortPkts_Type = Counter64
_RcKhiForwardingRSPStatsLeftLnTotalAMShortPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnTotalAMShortPkts = _RcKhiForwardingRSPStatsLeftLnTotalAMShortPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 12),
    _RcKhiForwardingRSPStatsLeftLnTotalAMShortPkts_Type()
)
rcKhiForwardingRSPStatsLeftLnTotalAMShortPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnTotalAMShortPkts.setStatus("current")
_RcKhiForwardingRSPStatsMidLnTotalAMShortPkts_Type = Counter64
_RcKhiForwardingRSPStatsMidLnTotalAMShortPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnTotalAMShortPkts = _RcKhiForwardingRSPStatsMidLnTotalAMShortPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 13),
    _RcKhiForwardingRSPStatsMidLnTotalAMShortPkts_Type()
)
rcKhiForwardingRSPStatsMidLnTotalAMShortPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnTotalAMShortPkts.setStatus("current")
_RcKhiForwardingRSPStatsRightLnTotalAMShortPkts_Type = Counter64
_RcKhiForwardingRSPStatsRightLnTotalAMShortPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnTotalAMShortPkts = _RcKhiForwardingRSPStatsRightLnTotalAMShortPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 14),
    _RcKhiForwardingRSPStatsRightLnTotalAMShortPkts_Type()
)
rcKhiForwardingRSPStatsRightLnTotalAMShortPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnTotalAMShortPkts.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnAMShortPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsLeftLnAMShortPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnAMShortPktsStatus = _RcKhiForwardingRSPStatsLeftLnAMShortPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 15),
    _RcKhiForwardingRSPStatsLeftLnAMShortPktsStatus_Type()
)
rcKhiForwardingRSPStatsLeftLnAMShortPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnAMShortPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsMidLnAMShortPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsMidLnAMShortPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnAMShortPktsStatus = _RcKhiForwardingRSPStatsMidLnAMShortPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 16),
    _RcKhiForwardingRSPStatsMidLnAMShortPktsStatus_Type()
)
rcKhiForwardingRSPStatsMidLnAMShortPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnAMShortPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsRightLnAMShortPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsRightLnAMShortPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnAMShortPktsStatus = _RcKhiForwardingRSPStatsRightLnAMShortPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 17),
    _RcKhiForwardingRSPStatsRightLnAMShortPktsStatus_Type()
)
rcKhiForwardingRSPStatsRightLnAMShortPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnAMShortPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops_Type = Counter64
_RcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops = _RcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 18),
    _RcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops_Type()
)
rcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops.setStatus("current")
_RcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops_Type = Counter64
_RcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops = _RcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 19),
    _RcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops_Type()
)
rcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops.setStatus("current")
_RcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops_Type = Counter64
_RcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops = _RcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 20),
    _RcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops_Type()
)
rcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus = _RcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 21),
    _RcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus_Type()
)
rcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus.setStatus("current")
_RcKhiForwardingRSPStatsMidLnAMCongestionDropStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsMidLnAMCongestionDropStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnAMCongestionDropStatus = _RcKhiForwardingRSPStatsMidLnAMCongestionDropStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 22),
    _RcKhiForwardingRSPStatsMidLnAMCongestionDropStatus_Type()
)
rcKhiForwardingRSPStatsMidLnAMCongestionDropStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnAMCongestionDropStatus.setStatus("current")
_RcKhiForwardingRSPStatsRightLnAMCongestionDropStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsRightLnAMCongestionDropStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnAMCongestionDropStatus = _RcKhiForwardingRSPStatsRightLnAMCongestionDropStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 23),
    _RcKhiForwardingRSPStatsRightLnAMCongestionDropStatus_Type()
)
rcKhiForwardingRSPStatsRightLnAMCongestionDropStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnAMCongestionDropStatus.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts = _RcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 24),
    _RcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts_Type()
)
rcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts = _RcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 25),
    _RcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts_Type()
)
rcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts = _RcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 26),
    _RcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts_Type()
)
rcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus = _RcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 27),
    _RcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus_Type()
)
rcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus = _RcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 28),
    _RcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus_Type()
)
rcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus = _RcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 29),
    _RcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus_Type()
)
rcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnTotalAMExpPkts_Type = Counter64
_RcKhiForwardingRSPStatsLeftLnTotalAMExpPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnTotalAMExpPkts = _RcKhiForwardingRSPStatsLeftLnTotalAMExpPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 30),
    _RcKhiForwardingRSPStatsLeftLnTotalAMExpPkts_Type()
)
rcKhiForwardingRSPStatsLeftLnTotalAMExpPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnTotalAMExpPkts.setStatus("current")
_RcKhiForwardingRSPStatsMidLnTotalAMExpPkts_Type = Counter64
_RcKhiForwardingRSPStatsMidLnTotalAMExpPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnTotalAMExpPkts = _RcKhiForwardingRSPStatsMidLnTotalAMExpPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 31),
    _RcKhiForwardingRSPStatsMidLnTotalAMExpPkts_Type()
)
rcKhiForwardingRSPStatsMidLnTotalAMExpPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnTotalAMExpPkts.setStatus("current")
_RcKhiForwardingRSPStatsRightLnTotalAMExpPkts_Type = Counter64
_RcKhiForwardingRSPStatsRightLnTotalAMExpPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnTotalAMExpPkts = _RcKhiForwardingRSPStatsRightLnTotalAMExpPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 32),
    _RcKhiForwardingRSPStatsRightLnTotalAMExpPkts_Type()
)
rcKhiForwardingRSPStatsRightLnTotalAMExpPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnTotalAMExpPkts.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnAMExpPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsLeftLnAMExpPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnAMExpPktsStatus = _RcKhiForwardingRSPStatsLeftLnAMExpPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 33),
    _RcKhiForwardingRSPStatsLeftLnAMExpPktsStatus_Type()
)
rcKhiForwardingRSPStatsLeftLnAMExpPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnAMExpPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsMidLnAMExpPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsMidLnAMExpPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnAMExpPktsStatus = _RcKhiForwardingRSPStatsMidLnAMExpPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 34),
    _RcKhiForwardingRSPStatsMidLnAMExpPktsStatus_Type()
)
rcKhiForwardingRSPStatsMidLnAMExpPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnAMExpPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsRightLnAMExpPktsStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsRightLnAMExpPktsStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnAMExpPktsStatus = _RcKhiForwardingRSPStatsRightLnAMExpPktsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 35),
    _RcKhiForwardingRSPStatsRightLnAMExpPktsStatus_Type()
)
rcKhiForwardingRSPStatsRightLnAMExpPktsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnAMExpPktsStatus.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts_Type = Counter64
_RcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts = _RcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 36),
    _RcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts_Type()
)
rcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts.setStatus("current")
_RcKhiForwardingRSPStatsMidLnTotalPMFwdPkts_Type = Counter64
_RcKhiForwardingRSPStatsMidLnTotalPMFwdPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnTotalPMFwdPkts = _RcKhiForwardingRSPStatsMidLnTotalPMFwdPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 37),
    _RcKhiForwardingRSPStatsMidLnTotalPMFwdPkts_Type()
)
rcKhiForwardingRSPStatsMidLnTotalPMFwdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnTotalPMFwdPkts.setStatus("current")
_RcKhiForwardingRSPStatsRightLnTotalPMFwdPkts_Type = Counter64
_RcKhiForwardingRSPStatsRightLnTotalPMFwdPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnTotalPMFwdPkts = _RcKhiForwardingRSPStatsRightLnTotalPMFwdPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 38),
    _RcKhiForwardingRSPStatsRightLnTotalPMFwdPkts_Type()
)
rcKhiForwardingRSPStatsRightLnTotalPMFwdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnTotalPMFwdPkts.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts = _RcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 39),
    _RcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts_Type()
)
rcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts = _RcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 40),
    _RcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts_Type()
)
rcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts_Type = Counter64
_RcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts = _RcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 41),
    _RcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts_Type()
)
rcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts.setStatus("current")
_RcKhiForwardingRSPStatsLeftLnPMDropErrStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsLeftLnPMDropErrStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsLeftLnPMDropErrStatus = _RcKhiForwardingRSPStatsLeftLnPMDropErrStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 42),
    _RcKhiForwardingRSPStatsLeftLnPMDropErrStatus_Type()
)
rcKhiForwardingRSPStatsLeftLnPMDropErrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsLeftLnPMDropErrStatus.setStatus("current")
_RcKhiForwardingRSPStatsMidLnPMDropErrStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsMidLnPMDropErrStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsMidLnPMDropErrStatus = _RcKhiForwardingRSPStatsMidLnPMDropErrStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 43),
    _RcKhiForwardingRSPStatsMidLnPMDropErrStatus_Type()
)
rcKhiForwardingRSPStatsMidLnPMDropErrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsMidLnPMDropErrStatus.setStatus("current")
_RcKhiForwardingRSPStatsRightLnPMDropErrStatus_Type = KhiStatusValue
_RcKhiForwardingRSPStatsRightLnPMDropErrStatus_Object = MibTableColumn
rcKhiForwardingRSPStatsRightLnPMDropErrStatus = _RcKhiForwardingRSPStatsRightLnPMDropErrStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 3, 1, 44),
    _RcKhiForwardingRSPStatsRightLnPMDropErrStatus_Type()
)
rcKhiForwardingRSPStatsRightLnPMDropErrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingRSPStatsRightLnPMDropErrStatus.setStatus("current")
_RcKhiForwardingF2XHealthTable_Object = MibTable
rcKhiForwardingF2XHealthTable = _RcKhiForwardingF2XHealthTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4)
)
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthTable.setStatus("current")
_RcKhiForwardingF2XHealthEntry_Object = MibTableRow
rcKhiForwardingF2XHealthEntry = _RcKhiForwardingF2XHealthEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4, 1)
)
rcKhiForwardingF2XHealthEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiForwardingF2XHealthSlotNumber"),
)
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthEntry.setStatus("current")


class _RcKhiForwardingF2XHealthSlotNumber_Type(Integer32):
    """Custom type rcKhiForwardingF2XHealthSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiForwardingF2XHealthSlotNumber_Type.__name__ = "Integer32"
_RcKhiForwardingF2XHealthSlotNumber_Object = MibTableColumn
rcKhiForwardingF2XHealthSlotNumber = _RcKhiForwardingF2XHealthSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4, 1, 1),
    _RcKhiForwardingF2XHealthSlotNumber_Type()
)
rcKhiForwardingF2XHealthSlotNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthSlotNumber.setStatus("current")


class _RcKhiForwardingF2XHealthLeftLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingF2XHealthLeftLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("f2eCIFErroredData", 10),
          ("f2eCIFIllegalAddress", 11),
          ("f2eCIFIllegalOperation", 8),
          ("f2eCIFProtocolErr", 9),
          ("f2eCIFReadErrInTargetData", 12),
          ("f2eCombinedPktMemoryThresholdExceeded", 4),
          ("f2eEgressQueueDrops", 13),
          ("f2eEgressSPI42SyncErr", 6),
          ("f2eHABMasterFIFOParityErr", 5),
          ("f2eLoopSPI42SyncErr", 7),
          ("f2ePacketParityErrDetected", 31),
          ("f2eParityErrInPktMemoryControl", 33),
          ("f2eParityErrInPktMemoryData", 32),
          ("f2ePktMemoryParityErr", 34),
          ("f2iFOQMOverflow", 30),
          ("f2iFOQMProtocolErr", 29),
          ("f2iHABSlaveDataErr", 28),
          ("f2iHABSlaveDataParityErr", 26),
          ("f2iHABSlaveFIFOOverflow", 25),
          ("f2iHABSlaveFIFOParityErr", 24),
          ("f2iHABSlaveProtocolErr", 27),
          ("f2iIngressSPI42AbortReceived", 16),
          ("f2iIngressSPI42DataDIP4ErrDetected", 17),
          ("f2iIngressSPI42OverflowErr", 15),
          ("f2iIngressSPI42ProtocolErr", 14),
          ("f2iIngressSPI42SyncErr", 18),
          ("f2iLoopSPI42AbortReceived", 21),
          ("f2iLoopSPI42DataDIP4ErrDetected", 22),
          ("f2iLoopSPI42OverflowErr", 20),
          ("f2iLoopSPI42ProtocolErr", 19),
          ("f2iLoopSPI42SyncErr", 23),
          ("fabricDrops", 2),
          ("foqDrops", 1),
          ("legacyDrops", 3),
          ("policeDrops", 0))
    )

_RcKhiForwardingF2XHealthLeftLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingF2XHealthLeftLnErrMask_Object = MibTableColumn
rcKhiForwardingF2XHealthLeftLnErrMask = _RcKhiForwardingF2XHealthLeftLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4, 1, 2),
    _RcKhiForwardingF2XHealthLeftLnErrMask_Type()
)
rcKhiForwardingF2XHealthLeftLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthLeftLnErrMask.setStatus("current")


class _RcKhiForwardingF2XHealthMidLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingF2XHealthMidLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("f2eCIFErroredData", 10),
          ("f2eCIFIllegalAddress", 11),
          ("f2eCIFIllegalOperation", 8),
          ("f2eCIFProtocolErr", 9),
          ("f2eCIFReadErrInTargetData", 12),
          ("f2eCombinedPktMemoryThresholdExceeded", 4),
          ("f2eEgressQueueDrops", 13),
          ("f2eEgressSPI42SyncErr", 6),
          ("f2eHABMasterFIFOParityErr", 5),
          ("f2eLoopSPI42SyncErr", 7),
          ("f2ePacketParityErrDetected", 31),
          ("f2eParityErrInPktMemoryControl", 33),
          ("f2eParityErrInPktMemoryData", 32),
          ("f2ePktMemoryParityErr", 34),
          ("f2iFOQMOverflow", 30),
          ("f2iFOQMProtocolErr", 29),
          ("f2iHABSlaveDataErr", 28),
          ("f2iHABSlaveDataParityErr", 26),
          ("f2iHABSlaveFIFOOverflow", 25),
          ("f2iHABSlaveFIFOParityErr", 24),
          ("f2iHABSlaveProtocolErr", 27),
          ("f2iIngressSPI42AbortReceived", 16),
          ("f2iIngressSPI42DataDIP4ErrDetected", 17),
          ("f2iIngressSPI42OverflowErr", 15),
          ("f2iIngressSPI42ProtocolErr", 14),
          ("f2iIngressSPI42SyncErr", 18),
          ("f2iLoopSPI42AbortReceived", 21),
          ("f2iLoopSPI42DataDIP4ErrDetected", 22),
          ("f2iLoopSPI42OverflowErr", 20),
          ("f2iLoopSPI42ProtocolErr", 19),
          ("f2iLoopSPI42SyncErr", 23),
          ("fabricDrops", 2),
          ("foqDrops", 1),
          ("legacyDrops", 3),
          ("policeDrops", 0))
    )

_RcKhiForwardingF2XHealthMidLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingF2XHealthMidLnErrMask_Object = MibTableColumn
rcKhiForwardingF2XHealthMidLnErrMask = _RcKhiForwardingF2XHealthMidLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4, 1, 3),
    _RcKhiForwardingF2XHealthMidLnErrMask_Type()
)
rcKhiForwardingF2XHealthMidLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthMidLnErrMask.setStatus("current")


class _RcKhiForwardingF2XHealthRightLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingF2XHealthRightLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("f2eCIFErroredData", 10),
          ("f2eCIFIllegalAddress", 11),
          ("f2eCIFIllegalOperation", 8),
          ("f2eCIFProtocolErr", 9),
          ("f2eCIFReadErrInTargetData", 12),
          ("f2eCombinedPktMemoryThresholdExceeded", 4),
          ("f2eEgressQueueDrops", 13),
          ("f2eEgressSPI42SyncErr", 6),
          ("f2eHABMasterFIFOParityErr", 5),
          ("f2eLoopSPI42SyncErr", 7),
          ("f2ePacketParityErrDetected", 31),
          ("f2eParityErrInPktMemoryControl", 33),
          ("f2eParityErrInPktMemoryData", 32),
          ("f2ePktMemoryParityErr", 34),
          ("f2iFOQMOverflow", 30),
          ("f2iFOQMProtocolErr", 29),
          ("f2iHABSlaveDataErr", 28),
          ("f2iHABSlaveDataParityErr", 26),
          ("f2iHABSlaveFIFOOverflow", 25),
          ("f2iHABSlaveFIFOParityErr", 24),
          ("f2iHABSlaveProtocolErr", 27),
          ("f2iIngressSPI42AbortReceived", 16),
          ("f2iIngressSPI42DataDIP4ErrDetected", 17),
          ("f2iIngressSPI42OverflowErr", 15),
          ("f2iIngressSPI42ProtocolErr", 14),
          ("f2iIngressSPI42SyncErr", 18),
          ("f2iLoopSPI42AbortReceived", 21),
          ("f2iLoopSPI42DataDIP4ErrDetected", 22),
          ("f2iLoopSPI42OverflowErr", 20),
          ("f2iLoopSPI42ProtocolErr", 19),
          ("f2iLoopSPI42SyncErr", 23),
          ("fabricDrops", 2),
          ("foqDrops", 1),
          ("legacyDrops", 3),
          ("policeDrops", 0))
    )

_RcKhiForwardingF2XHealthRightLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingF2XHealthRightLnErrMask_Object = MibTableColumn
rcKhiForwardingF2XHealthRightLnErrMask = _RcKhiForwardingF2XHealthRightLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4, 1, 4),
    _RcKhiForwardingF2XHealthRightLnErrMask_Type()
)
rcKhiForwardingF2XHealthRightLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthRightLnErrMask.setStatus("current")
_RcKhiForwardingF2XHealthLeftLnHealthStatus_Type = KhiStatusValue
_RcKhiForwardingF2XHealthLeftLnHealthStatus_Object = MibTableColumn
rcKhiForwardingF2XHealthLeftLnHealthStatus = _RcKhiForwardingF2XHealthLeftLnHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4, 1, 5),
    _RcKhiForwardingF2XHealthLeftLnHealthStatus_Type()
)
rcKhiForwardingF2XHealthLeftLnHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthLeftLnHealthStatus.setStatus("current")
_RcKhiForwardingF2XHealthMidLnHealthStatus_Type = KhiStatusValue
_RcKhiForwardingF2XHealthMidLnHealthStatus_Object = MibTableColumn
rcKhiForwardingF2XHealthMidLnHealthStatus = _RcKhiForwardingF2XHealthMidLnHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4, 1, 6),
    _RcKhiForwardingF2XHealthMidLnHealthStatus_Type()
)
rcKhiForwardingF2XHealthMidLnHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthMidLnHealthStatus.setStatus("current")
_RcKhiForwardingF2XHealthRightLnHealthStatus_Type = KhiStatusValue
_RcKhiForwardingF2XHealthRightLnHealthStatus_Object = MibTableColumn
rcKhiForwardingF2XHealthRightLnHealthStatus = _RcKhiForwardingF2XHealthRightLnHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 4, 1, 7),
    _RcKhiForwardingF2XHealthRightLnHealthStatus_Type()
)
rcKhiForwardingF2XHealthRightLnHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingF2XHealthRightLnHealthStatus.setStatus("current")
_RcKhiForwardingHistoryTable_Object = MibTable
rcKhiForwardingHistoryTable = _RcKhiForwardingHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 5)
)
if mibBuilder.loadTexts:
    rcKhiForwardingHistoryTable.setStatus("current")
_RcKhiForwardingHistoryEntry_Object = MibTableRow
rcKhiForwardingHistoryEntry = _RcKhiForwardingHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 5, 1)
)
rcKhiForwardingHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiForwardingHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiForwardingHistoryEntry.setStatus("current")


class _RcKhiForwardingHistoryIndex_Type(Integer32):
    """Custom type rcKhiForwardingHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiForwardingHistoryIndex_Type.__name__ = "Integer32"
_RcKhiForwardingHistoryIndex_Object = MibTableColumn
rcKhiForwardingHistoryIndex = _RcKhiForwardingHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 5, 1, 1),
    _RcKhiForwardingHistoryIndex_Type()
)
rcKhiForwardingHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiForwardingHistoryIndex.setStatus("current")
_RcKhiForwardingHistoryTimeStamp_Type = DateAndTime
_RcKhiForwardingHistoryTimeStamp_Object = MibTableColumn
rcKhiForwardingHistoryTimeStamp = _RcKhiForwardingHistoryTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 5, 1, 2),
    _RcKhiForwardingHistoryTimeStamp_Type()
)
rcKhiForwardingHistoryTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingHistoryTimeStamp.setStatus("current")


class _RcKhiForwardingHistorySlotNumber_Type(Integer32):
    """Custom type rcKhiForwardingHistorySlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiForwardingHistorySlotNumber_Type.__name__ = "Integer32"
_RcKhiForwardingHistorySlotNumber_Object = MibTableColumn
rcKhiForwardingHistorySlotNumber = _RcKhiForwardingHistorySlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 5, 1, 3),
    _RcKhiForwardingHistorySlotNumber_Type()
)
rcKhiForwardingHistorySlotNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingHistorySlotNumber.setStatus("current")


class _RcKhiForwardingHistoryLane_Type(Integer32):
    """Custom type rcKhiForwardingHistoryLane based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("leftLane", 1),
          ("middleLane", 2),
          ("rightLane", 3))
    )


_RcKhiForwardingHistoryLane_Type.__name__ = "Integer32"
_RcKhiForwardingHistoryLane_Object = MibTableColumn
rcKhiForwardingHistoryLane = _RcKhiForwardingHistoryLane_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 5, 1, 4),
    _RcKhiForwardingHistoryLane_Type()
)
rcKhiForwardingHistoryLane.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingHistoryLane.setStatus("current")


class _RcKhiForwardingHistoryEvent_Type(DisplayString):
    """Custom type rcKhiForwardingHistoryEvent based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_RcKhiForwardingHistoryEvent_Type.__name__ = "DisplayString"
_RcKhiForwardingHistoryEvent_Object = MibTableColumn
rcKhiForwardingHistoryEvent = _RcKhiForwardingHistoryEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 5, 1, 5),
    _RcKhiForwardingHistoryEvent_Type()
)
rcKhiForwardingHistoryEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingHistoryEvent.setStatus("current")
_RcKhiForwardingCurrentStatusTable_Object = MibTable
rcKhiForwardingCurrentStatusTable = _RcKhiForwardingCurrentStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6)
)
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusTable.setStatus("current")
_RcKhiForwardingCurrentStatusEntry_Object = MibTableRow
rcKhiForwardingCurrentStatusEntry = _RcKhiForwardingCurrentStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6, 1)
)
rcKhiForwardingCurrentStatusEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiForwardingCurrentStatusSlotNumber"),
)
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusEntry.setStatus("current")


class _RcKhiForwardingCurrentStatusSlotNumber_Type(Integer32):
    """Custom type rcKhiForwardingCurrentStatusSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiForwardingCurrentStatusSlotNumber_Type.__name__ = "Integer32"
_RcKhiForwardingCurrentStatusSlotNumber_Object = MibTableColumn
rcKhiForwardingCurrentStatusSlotNumber = _RcKhiForwardingCurrentStatusSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6, 1, 1),
    _RcKhiForwardingCurrentStatusSlotNumber_Type()
)
rcKhiForwardingCurrentStatusSlotNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusSlotNumber.setStatus("current")
_RcKhiForwardingCurrentStatusLeftLnHealth_Type = KhiStatusValue
_RcKhiForwardingCurrentStatusLeftLnHealth_Object = MibTableColumn
rcKhiForwardingCurrentStatusLeftLnHealth = _RcKhiForwardingCurrentStatusLeftLnHealth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6, 1, 2),
    _RcKhiForwardingCurrentStatusLeftLnHealth_Type()
)
rcKhiForwardingCurrentStatusLeftLnHealth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusLeftLnHealth.setStatus("current")


class _RcKhiForwardingCurrentStatusLeftLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingCurrentStatusLeftLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("asicResets", 0),
          ("f2xErrors", 3),
          ("rspStateErrors", 1),
          ("rspStatsErrors", 2))
    )

_RcKhiForwardingCurrentStatusLeftLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingCurrentStatusLeftLnErrMask_Object = MibTableColumn
rcKhiForwardingCurrentStatusLeftLnErrMask = _RcKhiForwardingCurrentStatusLeftLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6, 1, 3),
    _RcKhiForwardingCurrentStatusLeftLnErrMask_Type()
)
rcKhiForwardingCurrentStatusLeftLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusLeftLnErrMask.setStatus("current")
_RcKhiForwardingCurrentStatusMidLnHealth_Type = KhiStatusValue
_RcKhiForwardingCurrentStatusMidLnHealth_Object = MibTableColumn
rcKhiForwardingCurrentStatusMidLnHealth = _RcKhiForwardingCurrentStatusMidLnHealth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6, 1, 4),
    _RcKhiForwardingCurrentStatusMidLnHealth_Type()
)
rcKhiForwardingCurrentStatusMidLnHealth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusMidLnHealth.setStatus("current")


class _RcKhiForwardingCurrentStatusMidLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingCurrentStatusMidLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("asicResets", 0),
          ("f2xErrors", 3),
          ("rspStateErrors", 1),
          ("rspStatsErrors", 2))
    )

_RcKhiForwardingCurrentStatusMidLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingCurrentStatusMidLnErrMask_Object = MibTableColumn
rcKhiForwardingCurrentStatusMidLnErrMask = _RcKhiForwardingCurrentStatusMidLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6, 1, 5),
    _RcKhiForwardingCurrentStatusMidLnErrMask_Type()
)
rcKhiForwardingCurrentStatusMidLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusMidLnErrMask.setStatus("current")
_RcKhiForwardingCurrentStatusRightLnHealth_Type = KhiStatusValue
_RcKhiForwardingCurrentStatusRightLnHealth_Object = MibTableColumn
rcKhiForwardingCurrentStatusRightLnHealth = _RcKhiForwardingCurrentStatusRightLnHealth_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6, 1, 6),
    _RcKhiForwardingCurrentStatusRightLnHealth_Type()
)
rcKhiForwardingCurrentStatusRightLnHealth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusRightLnHealth.setStatus("current")


class _RcKhiForwardingCurrentStatusRightLnErrMask_Type(Bits):
    """Custom type rcKhiForwardingCurrentStatusRightLnErrMask based on Bits"""
    namedValues = NamedValues(
        *(("asicResets", 0),
          ("f2xErrors", 3),
          ("rspStateErrors", 1),
          ("rspStatsErrors", 2))
    )

_RcKhiForwardingCurrentStatusRightLnErrMask_Type.__name__ = "Bits"
_RcKhiForwardingCurrentStatusRightLnErrMask_Object = MibTableColumn
rcKhiForwardingCurrentStatusRightLnErrMask = _RcKhiForwardingCurrentStatusRightLnErrMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 6, 6, 1, 7),
    _RcKhiForwardingCurrentStatusRightLnErrMask_Type()
)
rcKhiForwardingCurrentStatusRightLnErrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiForwardingCurrentStatusRightLnErrMask.setStatus("current")
_RcKhiProtocol_ObjectIdentity = ObjectIdentity
rcKhiProtocol = _RcKhiProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7)
)
_RcKhiOspfTable_Object = MibTable
rcKhiOspfTable = _RcKhiOspfTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1)
)
if mibBuilder.loadTexts:
    rcKhiOspfTable.setStatus("current")
_RcKhiOspfEntry_Object = MibTableRow
rcKhiOspfEntry = _RcKhiOspfEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1)
)
rcKhiOspfEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiOspfVrfId"),
)
if mibBuilder.loadTexts:
    rcKhiOspfEntry.setStatus("current")


class _RcKhiOspfVrfId_Type(Integer32):
    """Custom type rcKhiOspfVrfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcKhiOspfVrfId_Type.__name__ = "Integer32"
_RcKhiOspfVrfId_Object = MibTableColumn
rcKhiOspfVrfId = _RcKhiOspfVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 1),
    _RcKhiOspfVrfId_Type()
)
rcKhiOspfVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiOspfVrfId.setStatus("current")
_RcKhiOspfRouteTableSize_Type = Counter32
_RcKhiOspfRouteTableSize_Object = MibTableColumn
rcKhiOspfRouteTableSize = _RcKhiOspfRouteTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 2),
    _RcKhiOspfRouteTableSize_Type()
)
rcKhiOspfRouteTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfRouteTableSize.setStatus("current")
_RcKhiOspfRefRouteTableSize_Type = Counter32
_RcKhiOspfRefRouteTableSize_Object = MibTableColumn
rcKhiOspfRefRouteTableSize = _RcKhiOspfRefRouteTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 3),
    _RcKhiOspfRefRouteTableSize_Type()
)
rcKhiOspfRefRouteTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfRefRouteTableSize.setStatus("current")
_RcKhiOspfLsdbTableSize_Type = Counter32
_RcKhiOspfLsdbTableSize_Object = MibTableColumn
rcKhiOspfLsdbTableSize = _RcKhiOspfLsdbTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 4),
    _RcKhiOspfLsdbTableSize_Type()
)
rcKhiOspfLsdbTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfLsdbTableSize.setStatus("current")
_RcKhiOspfNumOfInterfaces_Type = Counter32
_RcKhiOspfNumOfInterfaces_Object = MibTableColumn
rcKhiOspfNumOfInterfaces = _RcKhiOspfNumOfInterfaces_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 5),
    _RcKhiOspfNumOfInterfaces_Type()
)
rcKhiOspfNumOfInterfaces.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfNumOfInterfaces.setStatus("current")
_RcKhiOspfNumOfAdjacency_Type = Counter32
_RcKhiOspfNumOfAdjacency_Object = MibTableColumn
rcKhiOspfNumOfAdjacency = _RcKhiOspfNumOfAdjacency_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 6),
    _RcKhiOspfNumOfAdjacency_Type()
)
rcKhiOspfNumOfAdjacency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfNumOfAdjacency.setStatus("current")
_RcKhiOspfRefNumOfAdjacency_Type = Counter32
_RcKhiOspfRefNumOfAdjacency_Object = MibTableColumn
rcKhiOspfRefNumOfAdjacency = _RcKhiOspfRefNumOfAdjacency_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 7),
    _RcKhiOspfRefNumOfAdjacency_Type()
)
rcKhiOspfRefNumOfAdjacency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfRefNumOfAdjacency.setStatus("current")
_RcKhiOspfLastClearTimestamp_Type = DateAndTime
_RcKhiOspfLastClearTimestamp_Object = MibTableColumn
rcKhiOspfLastClearTimestamp = _RcKhiOspfLastClearTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 8),
    _RcKhiOspfLastClearTimestamp_Type()
)
rcKhiOspfLastClearTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfLastClearTimestamp.setStatus("current")
_RcKhiOspfFirstEventTimestamp_Type = DateAndTime
_RcKhiOspfFirstEventTimestamp_Object = MibTableColumn
rcKhiOspfFirstEventTimestamp = _RcKhiOspfFirstEventTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 1, 1, 9),
    _RcKhiOspfFirstEventTimestamp_Type()
)
rcKhiOspfFirstEventTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfFirstEventTimestamp.setStatus("current")
_RcKhiOspfHistoryTable_Object = MibTable
rcKhiOspfHistoryTable = _RcKhiOspfHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 2)
)
if mibBuilder.loadTexts:
    rcKhiOspfHistoryTable.setStatus("current")
_RcKhiOspfHistoryEntry_Object = MibTableRow
rcKhiOspfHistoryEntry = _RcKhiOspfHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 2, 1)
)
rcKhiOspfHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiOspfHistoryVrfId"),
    (0, "RAPID-CITY", "rcKhiOspfHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiOspfHistoryEntry.setStatus("current")


class _RcKhiOspfHistoryVrfId_Type(Integer32):
    """Custom type rcKhiOspfHistoryVrfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcKhiOspfHistoryVrfId_Type.__name__ = "Integer32"
_RcKhiOspfHistoryVrfId_Object = MibTableColumn
rcKhiOspfHistoryVrfId = _RcKhiOspfHistoryVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 2, 1, 1),
    _RcKhiOspfHistoryVrfId_Type()
)
rcKhiOspfHistoryVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiOspfHistoryVrfId.setStatus("current")


class _RcKhiOspfHistoryIndex_Type(Integer32):
    """Custom type rcKhiOspfHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiOspfHistoryIndex_Type.__name__ = "Integer32"
_RcKhiOspfHistoryIndex_Object = MibTableColumn
rcKhiOspfHistoryIndex = _RcKhiOspfHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 2, 1, 2),
    _RcKhiOspfHistoryIndex_Type()
)
rcKhiOspfHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiOspfHistoryIndex.setStatus("current")
_RcKhiOspfHistoryLsdbTableSize_Type = Counter32
_RcKhiOspfHistoryLsdbTableSize_Object = MibTableColumn
rcKhiOspfHistoryLsdbTableSize = _RcKhiOspfHistoryLsdbTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 2, 1, 3),
    _RcKhiOspfHistoryLsdbTableSize_Type()
)
rcKhiOspfHistoryLsdbTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfHistoryLsdbTableSize.setStatus("current")
_RcKhiOspfHistoryNumOfAdjacency_Type = Counter32
_RcKhiOspfHistoryNumOfAdjacency_Object = MibTableColumn
rcKhiOspfHistoryNumOfAdjacency = _RcKhiOspfHistoryNumOfAdjacency_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 2, 1, 4),
    _RcKhiOspfHistoryNumOfAdjacency_Type()
)
rcKhiOspfHistoryNumOfAdjacency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfHistoryNumOfAdjacency.setStatus("current")
_RcKhiOspfHistoryTimestamp_Type = DateAndTime
_RcKhiOspfHistoryTimestamp_Object = MibTableColumn
rcKhiOspfHistoryTimestamp = _RcKhiOspfHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 2, 1, 5),
    _RcKhiOspfHistoryTimestamp_Type()
)
rcKhiOspfHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiOspfHistoryTimestamp.setStatus("current")
_RcKhiBgpTable_Object = MibTable
rcKhiBgpTable = _RcKhiBgpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3)
)
if mibBuilder.loadTexts:
    rcKhiBgpTable.setStatus("current")
_RcKhiBgpEntry_Object = MibTableRow
rcKhiBgpEntry = _RcKhiBgpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1)
)
rcKhiBgpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiBgpVrfId"),
)
if mibBuilder.loadTexts:
    rcKhiBgpEntry.setStatus("current")


class _RcKhiBgpVrfId_Type(Integer32):
    """Custom type rcKhiBgpVrfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcKhiBgpVrfId_Type.__name__ = "Integer32"
_RcKhiBgpVrfId_Object = MibTableColumn
rcKhiBgpVrfId = _RcKhiBgpVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 1),
    _RcKhiBgpVrfId_Type()
)
rcKhiBgpVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiBgpVrfId.setStatus("current")
_RcKhiBgpUpdateSent_Type = Counter32
_RcKhiBgpUpdateSent_Object = MibTableColumn
rcKhiBgpUpdateSent = _RcKhiBgpUpdateSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 2),
    _RcKhiBgpUpdateSent_Type()
)
rcKhiBgpUpdateSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpUpdateSent.setStatus("current")
_RcKhiBgpUpdateRecvd_Type = Counter32
_RcKhiBgpUpdateRecvd_Object = MibTableColumn
rcKhiBgpUpdateRecvd = _RcKhiBgpUpdateRecvd_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 3),
    _RcKhiBgpUpdateRecvd_Type()
)
rcKhiBgpUpdateRecvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpUpdateRecvd.setStatus("current")
_RcKhiBgpNotifySent_Type = Counter32
_RcKhiBgpNotifySent_Object = MibTableColumn
rcKhiBgpNotifySent = _RcKhiBgpNotifySent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 4),
    _RcKhiBgpNotifySent_Type()
)
rcKhiBgpNotifySent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpNotifySent.setStatus("current")
_RcKhiBgpNotifyRecvd_Type = Counter32
_RcKhiBgpNotifyRecvd_Object = MibTableColumn
rcKhiBgpNotifyRecvd = _RcKhiBgpNotifyRecvd_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 5),
    _RcKhiBgpNotifyRecvd_Type()
)
rcKhiBgpNotifyRecvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpNotifyRecvd.setStatus("current")
_RcKhiBgpBadEvents_Type = Counter32
_RcKhiBgpBadEvents_Object = MibTableColumn
rcKhiBgpBadEvents = _RcKhiBgpBadEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 6),
    _RcKhiBgpBadEvents_Type()
)
rcKhiBgpBadEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpBadEvents.setStatus("current")
_RcKhiBgpRouteTableSize_Type = Counter32
_RcKhiBgpRouteTableSize_Object = MibTableColumn
rcKhiBgpRouteTableSize = _RcKhiBgpRouteTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 7),
    _RcKhiBgpRouteTableSize_Type()
)
rcKhiBgpRouteTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpRouteTableSize.setStatus("current")
_RcKhiBgpRefRouteTableSize_Type = Counter32
_RcKhiBgpRefRouteTableSize_Object = MibTableColumn
rcKhiBgpRefRouteTableSize = _RcKhiBgpRefRouteTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 8),
    _RcKhiBgpRefRouteTableSize_Type()
)
rcKhiBgpRefRouteTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpRefRouteTableSize.setStatus("current")
_RcKhiBgpEstablishedNbrs_Type = Counter32
_RcKhiBgpEstablishedNbrs_Object = MibTableColumn
rcKhiBgpEstablishedNbrs = _RcKhiBgpEstablishedNbrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 9),
    _RcKhiBgpEstablishedNbrs_Type()
)
rcKhiBgpEstablishedNbrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpEstablishedNbrs.setStatus("current")
_RcKhiBgpRefEstablishedNbrs_Type = Counter32
_RcKhiBgpRefEstablishedNbrs_Object = MibTableColumn
rcKhiBgpRefEstablishedNbrs = _RcKhiBgpRefEstablishedNbrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 10),
    _RcKhiBgpRefEstablishedNbrs_Type()
)
rcKhiBgpRefEstablishedNbrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpRefEstablishedNbrs.setStatus("current")
_RcKhiBgpNumOfAggregates_Type = Counter32
_RcKhiBgpNumOfAggregates_Object = MibTableColumn
rcKhiBgpNumOfAggregates = _RcKhiBgpNumOfAggregates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 11),
    _RcKhiBgpNumOfAggregates_Type()
)
rcKhiBgpNumOfAggregates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpNumOfAggregates.setStatus("current")
_RcKhiBgpNumOfImportedRoutes_Type = Counter32
_RcKhiBgpNumOfImportedRoutes_Object = MibTableColumn
rcKhiBgpNumOfImportedRoutes = _RcKhiBgpNumOfImportedRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 12),
    _RcKhiBgpNumOfImportedRoutes_Type()
)
rcKhiBgpNumOfImportedRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpNumOfImportedRoutes.setStatus("current")
_RcKhiBgpLastClearTimestamp_Type = DateAndTime
_RcKhiBgpLastClearTimestamp_Object = MibTableColumn
rcKhiBgpLastClearTimestamp = _RcKhiBgpLastClearTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 13),
    _RcKhiBgpLastClearTimestamp_Type()
)
rcKhiBgpLastClearTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpLastClearTimestamp.setStatus("current")
_RcKhiBgpFirstEventTimestamp_Type = DateAndTime
_RcKhiBgpFirstEventTimestamp_Object = MibTableColumn
rcKhiBgpFirstEventTimestamp = _RcKhiBgpFirstEventTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 3, 1, 14),
    _RcKhiBgpFirstEventTimestamp_Type()
)
rcKhiBgpFirstEventTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpFirstEventTimestamp.setStatus("current")
_RcKhiBgpHistoryTable_Object = MibTable
rcKhiBgpHistoryTable = _RcKhiBgpHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 4)
)
if mibBuilder.loadTexts:
    rcKhiBgpHistoryTable.setStatus("current")
_RcKhiBgpHistoryEntry_Object = MibTableRow
rcKhiBgpHistoryEntry = _RcKhiBgpHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 4, 1)
)
rcKhiBgpHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiBgpHistoryVrfId"),
    (0, "RAPID-CITY", "rcKhiBgpHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiBgpHistoryEntry.setStatus("current")


class _RcKhiBgpHistoryVrfId_Type(Integer32):
    """Custom type rcKhiBgpHistoryVrfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcKhiBgpHistoryVrfId_Type.__name__ = "Integer32"
_RcKhiBgpHistoryVrfId_Object = MibTableColumn
rcKhiBgpHistoryVrfId = _RcKhiBgpHistoryVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 4, 1, 1),
    _RcKhiBgpHistoryVrfId_Type()
)
rcKhiBgpHistoryVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiBgpHistoryVrfId.setStatus("current")


class _RcKhiBgpHistoryIndex_Type(Integer32):
    """Custom type rcKhiBgpHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiBgpHistoryIndex_Type.__name__ = "Integer32"
_RcKhiBgpHistoryIndex_Object = MibTableColumn
rcKhiBgpHistoryIndex = _RcKhiBgpHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 4, 1, 2),
    _RcKhiBgpHistoryIndex_Type()
)
rcKhiBgpHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiBgpHistoryIndex.setStatus("current")
_RcKhiBgpHistoryRibCount_Type = Counter32
_RcKhiBgpHistoryRibCount_Object = MibTableColumn
rcKhiBgpHistoryRibCount = _RcKhiBgpHistoryRibCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 4, 1, 3),
    _RcKhiBgpHistoryRibCount_Type()
)
rcKhiBgpHistoryRibCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpHistoryRibCount.setStatus("current")
_RcKhiBgpHistoryNumOfPeers_Type = Counter32
_RcKhiBgpHistoryNumOfPeers_Object = MibTableColumn
rcKhiBgpHistoryNumOfPeers = _RcKhiBgpHistoryNumOfPeers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 4, 1, 4),
    _RcKhiBgpHistoryNumOfPeers_Type()
)
rcKhiBgpHistoryNumOfPeers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpHistoryNumOfPeers.setStatus("current")
_RcKhiBgpHistoryTimestamp_Type = DateAndTime
_RcKhiBgpHistoryTimestamp_Object = MibTableColumn
rcKhiBgpHistoryTimestamp = _RcKhiBgpHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 4, 1, 5),
    _RcKhiBgpHistoryTimestamp_Type()
)
rcKhiBgpHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiBgpHistoryTimestamp.setStatus("current")
_RcKhiPimTable_Object = MibTable
rcKhiPimTable = _RcKhiPimTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5)
)
if mibBuilder.loadTexts:
    rcKhiPimTable.setStatus("current")
_RcKhiPimEntry_Object = MibTableRow
rcKhiPimEntry = _RcKhiPimEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5, 1)
)
rcKhiPimEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiPimVrfId"),
)
if mibBuilder.loadTexts:
    rcKhiPimEntry.setStatus("current")


class _RcKhiPimVrfId_Type(Integer32):
    """Custom type rcKhiPimVrfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcKhiPimVrfId_Type.__name__ = "Integer32"
_RcKhiPimVrfId_Object = MibTableColumn
rcKhiPimVrfId = _RcKhiPimVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5, 1, 1),
    _RcKhiPimVrfId_Type()
)
rcKhiPimVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiPimVrfId.setStatus("current")
_RcKhiPimRoutes_Type = Counter32
_RcKhiPimRoutes_Object = MibTableColumn
rcKhiPimRoutes = _RcKhiPimRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5, 1, 2),
    _RcKhiPimRoutes_Type()
)
rcKhiPimRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimRoutes.setStatus("current")
_RcKhiPimRefRoutes_Type = Counter32
_RcKhiPimRefRoutes_Object = MibTableColumn
rcKhiPimRefRoutes = _RcKhiPimRefRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5, 1, 3),
    _RcKhiPimRefRoutes_Type()
)
rcKhiPimRefRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimRefRoutes.setStatus("current")
_RcKhiPimAdjacencies_Type = Counter32
_RcKhiPimAdjacencies_Object = MibTableColumn
rcKhiPimAdjacencies = _RcKhiPimAdjacencies_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5, 1, 4),
    _RcKhiPimAdjacencies_Type()
)
rcKhiPimAdjacencies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimAdjacencies.setStatus("current")
_RcKhiPimRefAdjacencies_Type = Counter32
_RcKhiPimRefAdjacencies_Object = MibTableColumn
rcKhiPimRefAdjacencies = _RcKhiPimRefAdjacencies_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5, 1, 5),
    _RcKhiPimRefAdjacencies_Type()
)
rcKhiPimRefAdjacencies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimRefAdjacencies.setStatus("current")
_RcKhiPimLastClearTimestamp_Type = DateAndTime
_RcKhiPimLastClearTimestamp_Object = MibTableColumn
rcKhiPimLastClearTimestamp = _RcKhiPimLastClearTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5, 1, 6),
    _RcKhiPimLastClearTimestamp_Type()
)
rcKhiPimLastClearTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimLastClearTimestamp.setStatus("current")
_RcKhiPimFirstEventTimestamp_Type = DateAndTime
_RcKhiPimFirstEventTimestamp_Object = MibTableColumn
rcKhiPimFirstEventTimestamp = _RcKhiPimFirstEventTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 5, 1, 7),
    _RcKhiPimFirstEventTimestamp_Type()
)
rcKhiPimFirstEventTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimFirstEventTimestamp.setStatus("current")
_RcKhiPimHistoryTable_Object = MibTable
rcKhiPimHistoryTable = _RcKhiPimHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 6)
)
if mibBuilder.loadTexts:
    rcKhiPimHistoryTable.setStatus("current")
_RcKhiPimHistoryEntry_Object = MibTableRow
rcKhiPimHistoryEntry = _RcKhiPimHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 6, 1)
)
rcKhiPimHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiPimHistoryVrfId"),
    (0, "RAPID-CITY", "rcKhiPimHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiPimHistoryEntry.setStatus("current")


class _RcKhiPimHistoryVrfId_Type(Integer32):
    """Custom type rcKhiPimHistoryVrfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcKhiPimHistoryVrfId_Type.__name__ = "Integer32"
_RcKhiPimHistoryVrfId_Object = MibTableColumn
rcKhiPimHistoryVrfId = _RcKhiPimHistoryVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 6, 1, 1),
    _RcKhiPimHistoryVrfId_Type()
)
rcKhiPimHistoryVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiPimHistoryVrfId.setStatus("current")


class _RcKhiPimHistoryIndex_Type(Integer32):
    """Custom type rcKhiPimHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiPimHistoryIndex_Type.__name__ = "Integer32"
_RcKhiPimHistoryIndex_Object = MibTableColumn
rcKhiPimHistoryIndex = _RcKhiPimHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 6, 1, 2),
    _RcKhiPimHistoryIndex_Type()
)
rcKhiPimHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiPimHistoryIndex.setStatus("current")
_RcKhiPimHistoryRouteCount_Type = Counter32
_RcKhiPimHistoryRouteCount_Object = MibTableColumn
rcKhiPimHistoryRouteCount = _RcKhiPimHistoryRouteCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 6, 1, 3),
    _RcKhiPimHistoryRouteCount_Type()
)
rcKhiPimHistoryRouteCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimHistoryRouteCount.setStatus("current")
_RcKhiPimHistoryAdjacencies_Type = Counter32
_RcKhiPimHistoryAdjacencies_Object = MibTableColumn
rcKhiPimHistoryAdjacencies = _RcKhiPimHistoryAdjacencies_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 6, 1, 4),
    _RcKhiPimHistoryAdjacencies_Type()
)
rcKhiPimHistoryAdjacencies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimHistoryAdjacencies.setStatus("current")
_RcKhiPimHistoryTimestamp_Type = DateAndTime
_RcKhiPimHistoryTimestamp_Object = MibTableColumn
rcKhiPimHistoryTimestamp = _RcKhiPimHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 6, 1, 5),
    _RcKhiPimHistoryTimestamp_Type()
)
rcKhiPimHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiPimHistoryTimestamp.setStatus("current")
_RcKhiIgmpHistoryTable_Object = MibTable
rcKhiIgmpHistoryTable = _RcKhiIgmpHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 7)
)
if mibBuilder.loadTexts:
    rcKhiIgmpHistoryTable.setStatus("current")
_RcKhiIgmpHistoryEntry_Object = MibTableRow
rcKhiIgmpHistoryEntry = _RcKhiIgmpHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 7, 1)
)
rcKhiIgmpHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiIgmpHistoryVrfId"),
    (0, "RAPID-CITY", "rcKhiIgmpHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiIgmpHistoryEntry.setStatus("current")


class _RcKhiIgmpHistoryVrfId_Type(Integer32):
    """Custom type rcKhiIgmpHistoryVrfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcKhiIgmpHistoryVrfId_Type.__name__ = "Integer32"
_RcKhiIgmpHistoryVrfId_Object = MibTableColumn
rcKhiIgmpHistoryVrfId = _RcKhiIgmpHistoryVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 7, 1, 1),
    _RcKhiIgmpHistoryVrfId_Type()
)
rcKhiIgmpHistoryVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiIgmpHistoryVrfId.setStatus("current")


class _RcKhiIgmpHistoryIndex_Type(Integer32):
    """Custom type rcKhiIgmpHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiIgmpHistoryIndex_Type.__name__ = "Integer32"
_RcKhiIgmpHistoryIndex_Object = MibTableColumn
rcKhiIgmpHistoryIndex = _RcKhiIgmpHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 7, 1, 2),
    _RcKhiIgmpHistoryIndex_Type()
)
rcKhiIgmpHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiIgmpHistoryIndex.setStatus("current")
_RcKhiIgmpHistoryGroupCount_Type = Counter32
_RcKhiIgmpHistoryGroupCount_Object = MibTableColumn
rcKhiIgmpHistoryGroupCount = _RcKhiIgmpHistoryGroupCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 7, 1, 3),
    _RcKhiIgmpHistoryGroupCount_Type()
)
rcKhiIgmpHistoryGroupCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIgmpHistoryGroupCount.setStatus("current")
_RcKhiIgmpHistorySenderCount_Type = Counter32
_RcKhiIgmpHistorySenderCount_Object = MibTableColumn
rcKhiIgmpHistorySenderCount = _RcKhiIgmpHistorySenderCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 7, 1, 4),
    _RcKhiIgmpHistorySenderCount_Type()
)
rcKhiIgmpHistorySenderCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIgmpHistorySenderCount.setStatus("current")
_RcKhiIgmpHistoryTimestamp_Type = DateAndTime
_RcKhiIgmpHistoryTimestamp_Object = MibTableColumn
rcKhiIgmpHistoryTimestamp = _RcKhiIgmpHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 7, 1, 5),
    _RcKhiIgmpHistoryTimestamp_Type()
)
rcKhiIgmpHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIgmpHistoryTimestamp.setStatus("current")
_RcKhiIgmpSnoopHistoryTable_Object = MibTable
rcKhiIgmpSnoopHistoryTable = _RcKhiIgmpSnoopHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 8)
)
if mibBuilder.loadTexts:
    rcKhiIgmpSnoopHistoryTable.setStatus("current")
_RcKhiIgmpSnoopHistoryEntry_Object = MibTableRow
rcKhiIgmpSnoopHistoryEntry = _RcKhiIgmpSnoopHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 8, 1)
)
rcKhiIgmpSnoopHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiIgmpSnoopHistoryVrfId"),
    (0, "RAPID-CITY", "rcKhiIgmpSnoopHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiIgmpSnoopHistoryEntry.setStatus("current")


class _RcKhiIgmpSnoopHistoryVrfId_Type(Integer32):
    """Custom type rcKhiIgmpSnoopHistoryVrfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcKhiIgmpSnoopHistoryVrfId_Type.__name__ = "Integer32"
_RcKhiIgmpSnoopHistoryVrfId_Object = MibTableColumn
rcKhiIgmpSnoopHistoryVrfId = _RcKhiIgmpSnoopHistoryVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 8, 1, 1),
    _RcKhiIgmpSnoopHistoryVrfId_Type()
)
rcKhiIgmpSnoopHistoryVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiIgmpSnoopHistoryVrfId.setStatus("current")


class _RcKhiIgmpSnoopHistoryIndex_Type(Integer32):
    """Custom type rcKhiIgmpSnoopHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiIgmpSnoopHistoryIndex_Type.__name__ = "Integer32"
_RcKhiIgmpSnoopHistoryIndex_Object = MibTableColumn
rcKhiIgmpSnoopHistoryIndex = _RcKhiIgmpSnoopHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 8, 1, 2),
    _RcKhiIgmpSnoopHistoryIndex_Type()
)
rcKhiIgmpSnoopHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiIgmpSnoopHistoryIndex.setStatus("current")
_RcKhiIgmpSnoopHistoryStreamCount_Type = Counter32
_RcKhiIgmpSnoopHistoryStreamCount_Object = MibTableColumn
rcKhiIgmpSnoopHistoryStreamCount = _RcKhiIgmpSnoopHistoryStreamCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 8, 1, 3),
    _RcKhiIgmpSnoopHistoryStreamCount_Type()
)
rcKhiIgmpSnoopHistoryStreamCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIgmpSnoopHistoryStreamCount.setStatus("current")
_RcKhiIgmpSnoopHistoryHostCount_Type = Counter32
_RcKhiIgmpSnoopHistoryHostCount_Object = MibTableColumn
rcKhiIgmpSnoopHistoryHostCount = _RcKhiIgmpSnoopHistoryHostCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 8, 1, 4),
    _RcKhiIgmpSnoopHistoryHostCount_Type()
)
rcKhiIgmpSnoopHistoryHostCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIgmpSnoopHistoryHostCount.setStatus("current")
_RcKhiIgmpSnoopHistoryTimestamp_Type = DateAndTime
_RcKhiIgmpSnoopHistoryTimestamp_Object = MibTableColumn
rcKhiIgmpSnoopHistoryTimestamp = _RcKhiIgmpSnoopHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 8, 1, 5),
    _RcKhiIgmpSnoopHistoryTimestamp_Type()
)
rcKhiIgmpSnoopHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIgmpSnoopHistoryTimestamp.setStatus("current")
_RcKhiVlacpTotalPortCount_Type = Counter32
_RcKhiVlacpTotalPortCount_Object = MibScalar
rcKhiVlacpTotalPortCount = _RcKhiVlacpTotalPortCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 9),
    _RcKhiVlacpTotalPortCount_Type()
)
rcKhiVlacpTotalPortCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiVlacpTotalPortCount.setStatus("current")
_RcKhiVlacpPortUpCount_Type = Counter32
_RcKhiVlacpPortUpCount_Object = MibScalar
rcKhiVlacpPortUpCount = _RcKhiVlacpPortUpCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 10),
    _RcKhiVlacpPortUpCount_Type()
)
rcKhiVlacpPortUpCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiVlacpPortUpCount.setStatus("current")
_RcKhiIstState_Type = KhiStatusValue
_RcKhiIstState_Object = MibScalar
rcKhiIstState = _RcKhiIstState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 11),
    _RcKhiIstState_Type()
)
rcKhiIstState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIstState.setStatus("current")
_RcKhiFirstIstSyncTimeStamp_Type = DateAndTime
_RcKhiFirstIstSyncTimeStamp_Object = MibScalar
rcKhiFirstIstSyncTimeStamp = _RcKhiFirstIstSyncTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 12),
    _RcKhiFirstIstSyncTimeStamp_Type()
)
rcKhiFirstIstSyncTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiFirstIstSyncTimeStamp.setStatus("current")
_RcKhiLastIstSyncTimeStamp_Type = DateAndTime
_RcKhiLastIstSyncTimeStamp_Object = MibScalar
rcKhiLastIstSyncTimeStamp = _RcKhiLastIstSyncTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 13),
    _RcKhiLastIstSyncTimeStamp_Type()
)
rcKhiLastIstSyncTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiLastIstSyncTimeStamp.setStatus("current")
_RcKhiNumIstUpEvents_Type = Counter32
_RcKhiNumIstUpEvents_Object = MibScalar
rcKhiNumIstUpEvents = _RcKhiNumIstUpEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 14),
    _RcKhiNumIstUpEvents_Type()
)
rcKhiNumIstUpEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiNumIstUpEvents.setStatus("current")
_RcKhiNumIstDownEvents_Type = Counter32
_RcKhiNumIstDownEvents_Object = MibScalar
rcKhiNumIstDownEvents = _RcKhiNumIstDownEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 15),
    _RcKhiNumIstDownEvents_Type()
)
rcKhiNumIstDownEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiNumIstDownEvents.setStatus("current")
_RcKhiNumSmltDownEventsSent_Type = Counter32
_RcKhiNumSmltDownEventsSent_Object = MibScalar
rcKhiNumSmltDownEventsSent = _RcKhiNumSmltDownEventsSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 16),
    _RcKhiNumSmltDownEventsSent_Type()
)
rcKhiNumSmltDownEventsSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiNumSmltDownEventsSent.setStatus("current")
_RcKhiLastSmltDownEventSentTimeStamp_Type = DateAndTime
_RcKhiLastSmltDownEventSentTimeStamp_Object = MibScalar
rcKhiLastSmltDownEventSentTimeStamp = _RcKhiLastSmltDownEventSentTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 17),
    _RcKhiLastSmltDownEventSentTimeStamp_Type()
)
rcKhiLastSmltDownEventSentTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiLastSmltDownEventSentTimeStamp.setStatus("current")
_RcKhiNumSmltDownEventsRecv_Type = Counter32
_RcKhiNumSmltDownEventsRecv_Object = MibScalar
rcKhiNumSmltDownEventsRecv = _RcKhiNumSmltDownEventsRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 18),
    _RcKhiNumSmltDownEventsRecv_Type()
)
rcKhiNumSmltDownEventsRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiNumSmltDownEventsRecv.setStatus("current")
_RcKhiLastSmltDownEventRecvTimeStamp_Type = DateAndTime
_RcKhiLastSmltDownEventRecvTimeStamp_Object = MibScalar
rcKhiLastSmltDownEventRecvTimeStamp = _RcKhiLastSmltDownEventRecvTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 19),
    _RcKhiLastSmltDownEventRecvTimeStamp_Type()
)
rcKhiLastSmltDownEventRecvTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiLastSmltDownEventRecvTimeStamp.setStatus("current")
_RcKhiNumSmltUpEventsSent_Type = Counter32
_RcKhiNumSmltUpEventsSent_Object = MibScalar
rcKhiNumSmltUpEventsSent = _RcKhiNumSmltUpEventsSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 20),
    _RcKhiNumSmltUpEventsSent_Type()
)
rcKhiNumSmltUpEventsSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiNumSmltUpEventsSent.setStatus("current")
_RcKhiLastSmltUpEventSentTimeStamp_Type = DateAndTime
_RcKhiLastSmltUpEventSentTimeStamp_Object = MibScalar
rcKhiLastSmltUpEventSentTimeStamp = _RcKhiLastSmltUpEventSentTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 21),
    _RcKhiLastSmltUpEventSentTimeStamp_Type()
)
rcKhiLastSmltUpEventSentTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiLastSmltUpEventSentTimeStamp.setStatus("current")
_RcKhiNumSmltUpEventsRecv_Type = Counter32
_RcKhiNumSmltUpEventsRecv_Object = MibScalar
rcKhiNumSmltUpEventsRecv = _RcKhiNumSmltUpEventsRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 22),
    _RcKhiNumSmltUpEventsRecv_Type()
)
rcKhiNumSmltUpEventsRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiNumSmltUpEventsRecv.setStatus("current")
_RcKhiLastSmltUpEventRecvTimeStamp_Type = DateAndTime
_RcKhiLastSmltUpEventRecvTimeStamp_Object = MibScalar
rcKhiLastSmltUpEventRecvTimeStamp = _RcKhiLastSmltUpEventRecvTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 23),
    _RcKhiLastSmltUpEventRecvTimeStamp_Type()
)
rcKhiLastSmltUpEventRecvTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiLastSmltUpEventRecvTimeStamp.setStatus("current")
_RcKhiNumSendMacAddrSent_Type = Counter32
_RcKhiNumSendMacAddrSent_Object = MibScalar
rcKhiNumSendMacAddrSent = _RcKhiNumSendMacAddrSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 24),
    _RcKhiNumSendMacAddrSent_Type()
)
rcKhiNumSendMacAddrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiNumSendMacAddrSent.setStatus("current")
_RcKhiLastSendMacAddrSentTimeStamp_Type = DateAndTime
_RcKhiLastSendMacAddrSentTimeStamp_Object = MibScalar
rcKhiLastSendMacAddrSentTimeStamp = _RcKhiLastSendMacAddrSentTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 25),
    _RcKhiLastSendMacAddrSentTimeStamp_Type()
)
rcKhiLastSendMacAddrSentTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiLastSendMacAddrSentTimeStamp.setStatus("current")
_RcKhiNumSendMacAddrRecv_Type = Counter32
_RcKhiNumSendMacAddrRecv_Object = MibScalar
rcKhiNumSendMacAddrRecv = _RcKhiNumSendMacAddrRecv_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 26),
    _RcKhiNumSendMacAddrRecv_Type()
)
rcKhiNumSendMacAddrRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiNumSendMacAddrRecv.setStatus("current")
_RcKhiLastSendMacAddrRecvTimeStamp_Type = DateAndTime
_RcKhiLastSendMacAddrRecvTimeStamp_Object = MibScalar
rcKhiLastSendMacAddrRecvTimeStamp = _RcKhiLastSendMacAddrRecvTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 27),
    _RcKhiLastSendMacAddrRecvTimeStamp_Type()
)
rcKhiLastSendMacAddrRecvTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiLastSendMacAddrRecvTimeStamp.setStatus("current")
_RcKhiIstHistoryTable_Object = MibTable
rcKhiIstHistoryTable = _RcKhiIstHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 28)
)
if mibBuilder.loadTexts:
    rcKhiIstHistoryTable.setStatus("current")
_RcKhiIstHistoryEntry_Object = MibTableRow
rcKhiIstHistoryEntry = _RcKhiIstHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 28, 1)
)
rcKhiIstHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiIstHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiIstHistoryEntry.setStatus("current")


class _RcKhiIstHistoryIndex_Type(Integer32):
    """Custom type rcKhiIstHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiIstHistoryIndex_Type.__name__ = "Integer32"
_RcKhiIstHistoryIndex_Object = MibTableColumn
rcKhiIstHistoryIndex = _RcKhiIstHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 28, 1, 1),
    _RcKhiIstHistoryIndex_Type()
)
rcKhiIstHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiIstHistoryIndex.setStatus("current")
_RcKhiIstHistoryIstStatus_Type = KhiStatusValue
_RcKhiIstHistoryIstStatus_Object = MibTableColumn
rcKhiIstHistoryIstStatus = _RcKhiIstHistoryIstStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 28, 1, 2),
    _RcKhiIstHistoryIstStatus_Type()
)
rcKhiIstHistoryIstStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIstHistoryIstStatus.setStatus("current")
_RcKhiIstHistoryTimestamp_Type = DateAndTime
_RcKhiIstHistoryTimestamp_Object = MibTableColumn
rcKhiIstHistoryTimestamp = _RcKhiIstHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 28, 1, 3),
    _RcKhiIstHistoryTimestamp_Type()
)
rcKhiIstHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIstHistoryTimestamp.setStatus("current")
_RcKhiSmltHistoryTable_Object = MibTable
rcKhiSmltHistoryTable = _RcKhiSmltHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 29)
)
if mibBuilder.loadTexts:
    rcKhiSmltHistoryTable.setStatus("current")
_RcKhiSmltHistoryEntry_Object = MibTableRow
rcKhiSmltHistoryEntry = _RcKhiSmltHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 29, 1)
)
rcKhiSmltHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiSmltHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiSmltHistoryEntry.setStatus("current")


class _RcKhiSmltHistoryIndex_Type(Integer32):
    """Custom type rcKhiSmltHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiSmltHistoryIndex_Type.__name__ = "Integer32"
_RcKhiSmltHistoryIndex_Object = MibTableColumn
rcKhiSmltHistoryIndex = _RcKhiSmltHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 29, 1, 1),
    _RcKhiSmltHistoryIndex_Type()
)
rcKhiSmltHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiSmltHistoryIndex.setStatus("current")
_RcKhiSmltHistorySmltId_Type = Integer32
_RcKhiSmltHistorySmltId_Object = MibTableColumn
rcKhiSmltHistorySmltId = _RcKhiSmltHistorySmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 29, 1, 2),
    _RcKhiSmltHistorySmltId_Type()
)
rcKhiSmltHistorySmltId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiSmltHistorySmltId.setStatus("current")
_RcKhiSmltHistorySmltStatus_Type = KhiStatusValue
_RcKhiSmltHistorySmltStatus_Object = MibTableColumn
rcKhiSmltHistorySmltStatus = _RcKhiSmltHistorySmltStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 29, 1, 3),
    _RcKhiSmltHistorySmltStatus_Type()
)
rcKhiSmltHistorySmltStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiSmltHistorySmltStatus.setStatus("current")
_RcKhiSmltHistoryTimestamp_Type = DateAndTime
_RcKhiSmltHistoryTimestamp_Object = MibTableColumn
rcKhiSmltHistoryTimestamp = _RcKhiSmltHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 29, 1, 4),
    _RcKhiSmltHistoryTimestamp_Type()
)
rcKhiSmltHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiSmltHistoryTimestamp.setStatus("current")
_RcKhiSmltTable_Object = MibTable
rcKhiSmltTable = _RcKhiSmltTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 30)
)
if mibBuilder.loadTexts:
    rcKhiSmltTable.setStatus("current")
_RcKhiSmltEntry_Object = MibTableRow
rcKhiSmltEntry = _RcKhiSmltEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 30, 1)
)
rcKhiSmltEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiSmltId"),
)
if mibBuilder.loadTexts:
    rcKhiSmltEntry.setStatus("current")


class _RcKhiSmltId_Type(Integer32):
    """Custom type rcKhiSmltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_RcKhiSmltId_Type.__name__ = "Integer32"
_RcKhiSmltId_Object = MibTableColumn
rcKhiSmltId = _RcKhiSmltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 30, 1, 1),
    _RcKhiSmltId_Type()
)
rcKhiSmltId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiSmltId.setStatus("current")
_RcKhiSmltStatus_Type = KhiStatusValue
_RcKhiSmltStatus_Object = MibTableColumn
rcKhiSmltStatus = _RcKhiSmltStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 30, 1, 2),
    _RcKhiSmltStatus_Type()
)
rcKhiSmltStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiSmltStatus.setStatus("current")
_RcKhiSmltUpEvents_Type = Counter32
_RcKhiSmltUpEvents_Object = MibTableColumn
rcKhiSmltUpEvents = _RcKhiSmltUpEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 30, 1, 3),
    _RcKhiSmltUpEvents_Type()
)
rcKhiSmltUpEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiSmltUpEvents.setStatus("current")
_RcKhiSmltDownEvents_Type = Counter32
_RcKhiSmltDownEvents_Object = MibTableColumn
rcKhiSmltDownEvents = _RcKhiSmltDownEvents_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 7, 30, 1, 4),
    _RcKhiSmltDownEvents_Type()
)
rcKhiSmltDownEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiSmltDownEvents.setStatus("current")
_RcKhiMgmt_ObjectIdentity = ObjectIdentity
rcKhiMgmt = _RcKhiMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8)
)
_RcKhiMgmtCurrentLogStatus_Type = KhiStatusValue
_RcKhiMgmtCurrentLogStatus_Object = MibScalar
rcKhiMgmtCurrentLogStatus = _RcKhiMgmtCurrentLogStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 1),
    _RcKhiMgmtCurrentLogStatus_Type()
)
rcKhiMgmtCurrentLogStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiMgmtCurrentLogStatus.setStatus("current")
_RcKhiMgmtLogFirstHighestEvent_Type = KhiStatusValue
_RcKhiMgmtLogFirstHighestEvent_Object = MibScalar
rcKhiMgmtLogFirstHighestEvent = _RcKhiMgmtLogFirstHighestEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 2),
    _RcKhiMgmtLogFirstHighestEvent_Type()
)
rcKhiMgmtLogFirstHighestEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiMgmtLogFirstHighestEvent.setStatus("current")
_RcKhiMgmtLogFirstHighestEventTime_Type = DateAndTime
_RcKhiMgmtLogFirstHighestEventTime_Object = MibScalar
rcKhiMgmtLogFirstHighestEventTime = _RcKhiMgmtLogFirstHighestEventTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 3),
    _RcKhiMgmtLogFirstHighestEventTime_Type()
)
rcKhiMgmtLogFirstHighestEventTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiMgmtLogFirstHighestEventTime.setStatus("current")
_RcKhiMgmtLogRefStatus_Type = KhiStatusValue
_RcKhiMgmtLogRefStatus_Object = MibScalar
rcKhiMgmtLogRefStatus = _RcKhiMgmtLogRefStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 4),
    _RcKhiMgmtLogRefStatus_Type()
)
rcKhiMgmtLogRefStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiMgmtLogRefStatus.setStatus("current")
_RcKhiMgmtLogStatusLastClearTime_Type = DateAndTime
_RcKhiMgmtLogStatusLastClearTime_Object = MibScalar
rcKhiMgmtLogStatusLastClearTime = _RcKhiMgmtLogStatusLastClearTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 5),
    _RcKhiMgmtLogStatusLastClearTime_Type()
)
rcKhiMgmtLogStatusLastClearTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiMgmtLogStatusLastClearTime.setStatus("current")
_RcKhiMgmtLogHistoryTable_Object = MibTable
rcKhiMgmtLogHistoryTable = _RcKhiMgmtLogHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 6)
)
if mibBuilder.loadTexts:
    rcKhiMgmtLogHistoryTable.setStatus("current")
_RcKhiMgmtLogHistoryEntry_Object = MibTableRow
rcKhiMgmtLogHistoryEntry = _RcKhiMgmtLogHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 6, 1)
)
rcKhiMgmtLogHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiMgmtLogHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiMgmtLogHistoryEntry.setStatus("current")


class _RcKhiMgmtLogHistoryIndex_Type(Integer32):
    """Custom type rcKhiMgmtLogHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_RcKhiMgmtLogHistoryIndex_Type.__name__ = "Integer32"
_RcKhiMgmtLogHistoryIndex_Object = MibTableColumn
rcKhiMgmtLogHistoryIndex = _RcKhiMgmtLogHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 6, 1, 1),
    _RcKhiMgmtLogHistoryIndex_Type()
)
rcKhiMgmtLogHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiMgmtLogHistoryIndex.setStatus("current")
_RcKhiMgmtLogHistoryStatus_Type = KhiStatusValue
_RcKhiMgmtLogHistoryStatus_Object = MibTableColumn
rcKhiMgmtLogHistoryStatus = _RcKhiMgmtLogHistoryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 6, 1, 2),
    _RcKhiMgmtLogHistoryStatus_Type()
)
rcKhiMgmtLogHistoryStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiMgmtLogHistoryStatus.setStatus("current")
_RcKhiMgmtLogHistoryTimestamp_Type = DateAndTime
_RcKhiMgmtLogHistoryTimestamp_Object = MibTableColumn
rcKhiMgmtLogHistoryTimestamp = _RcKhiMgmtLogHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 8, 6, 1, 3),
    _RcKhiMgmtLogHistoryTimestamp_Type()
)
rcKhiMgmtLogHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiMgmtLogHistoryTimestamp.setStatus("current")
_RcKhiIpInterface_ObjectIdentity = ObjectIdentity
rcKhiIpInterface = _RcKhiIpInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 9)
)
_RcKhiIpInterfaceHistoryTable_Object = MibTable
rcKhiIpInterfaceHistoryTable = _RcKhiIpInterfaceHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 9, 1)
)
if mibBuilder.loadTexts:
    rcKhiIpInterfaceHistoryTable.setStatus("current")
_RcKhiIpInterfaceHistoryEntry_Object = MibTableRow
rcKhiIpInterfaceHistoryEntry = _RcKhiIpInterfaceHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 9, 1, 1)
)
rcKhiIpInterfaceHistoryEntry.setIndexNames(
    (0, "RAPID-CITY", "rcKhiIpInterfaceHistoryIndex"),
)
if mibBuilder.loadTexts:
    rcKhiIpInterfaceHistoryEntry.setStatus("current")


class _RcKhiIpInterfaceHistoryIndex_Type(Integer32):
    """Custom type rcKhiIpInterfaceHistoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RcKhiIpInterfaceHistoryIndex_Type.__name__ = "Integer32"
_RcKhiIpInterfaceHistoryIndex_Object = MibTableColumn
rcKhiIpInterfaceHistoryIndex = _RcKhiIpInterfaceHistoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 9, 1, 1, 1),
    _RcKhiIpInterfaceHistoryIndex_Type()
)
rcKhiIpInterfaceHistoryIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcKhiIpInterfaceHistoryIndex.setStatus("current")
_RcKhiIpInterfaceHistoryTimestamp_Type = DateAndTime
_RcKhiIpInterfaceHistoryTimestamp_Object = MibTableColumn
rcKhiIpInterfaceHistoryTimestamp = _RcKhiIpInterfaceHistoryTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 9, 1, 1, 2),
    _RcKhiIpInterfaceHistoryTimestamp_Type()
)
rcKhiIpInterfaceHistoryTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIpInterfaceHistoryTimestamp.setStatus("current")
_RcKhiIpInterfaceHistoryIpAddr_Type = IpAddress
_RcKhiIpInterfaceHistoryIpAddr_Object = MibTableColumn
rcKhiIpInterfaceHistoryIpAddr = _RcKhiIpInterfaceHistoryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 9, 1, 1, 3),
    _RcKhiIpInterfaceHistoryIpAddr_Type()
)
rcKhiIpInterfaceHistoryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIpInterfaceHistoryIpAddr.setStatus("current")


class _RcKhiIpInterfaceHistoryVlanId_Type(Integer32):
    """Custom type rcKhiIpInterfaceHistoryVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_RcKhiIpInterfaceHistoryVlanId_Type.__name__ = "Integer32"
_RcKhiIpInterfaceHistoryVlanId_Object = MibTableColumn
rcKhiIpInterfaceHistoryVlanId = _RcKhiIpInterfaceHistoryVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 9, 1, 1, 4),
    _RcKhiIpInterfaceHistoryVlanId_Type()
)
rcKhiIpInterfaceHistoryVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIpInterfaceHistoryVlanId.setStatus("current")


class _RcKhiIpInterfaceHistoryEvent_Type(Integer32):
    """Custom type rcKhiIpInterfaceHistoryEvent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcKhiIpInterfaceHistoryEvent_Type.__name__ = "Integer32"
_RcKhiIpInterfaceHistoryEvent_Object = MibTableColumn
rcKhiIpInterfaceHistoryEvent = _RcKhiIpInterfaceHistoryEvent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 85, 9, 1, 1, 5),
    _RcKhiIpInterfaceHistoryEvent_Type()
)
rcKhiIpInterfaceHistoryEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcKhiIpInterfaceHistoryEvent.setStatus("current")
_Rc2k_ObjectIdentity = ObjectIdentity
rc2k = _Rc2k_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100)
)
_Rc2kChassis_ObjectIdentity = ObjectIdentity
rc2kChassis = _Rc2kChassis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 1)
)


class _Rc2kChassisPortOperStatus_Type(OctetString):
    """Custom type rc2kChassisPortOperStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_Rc2kChassisPortOperStatus_Type.__name__ = "OctetString"
_Rc2kChassisPortOperStatus_Object = MibScalar
rc2kChassisPortOperStatus = _Rc2kChassisPortOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 1, 1),
    _Rc2kChassisPortOperStatus_Type()
)
rc2kChassisPortOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kChassisPortOperStatus.setStatus("current")
_Rc2kChassisTemperature_Type = Gauge32
_Rc2kChassisTemperature_Object = MibScalar
rc2kChassisTemperature = _Rc2kChassisTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 1, 2),
    _Rc2kChassisTemperature_Type()
)
rc2kChassisTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kChassisTemperature.setStatus("current")
_Rc2kChassisAmbientLowerTemperature_Type = Gauge32
_Rc2kChassisAmbientLowerTemperature_Object = MibScalar
rc2kChassisAmbientLowerTemperature = _Rc2kChassisAmbientLowerTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 1, 3),
    _Rc2kChassisAmbientLowerTemperature_Type()
)
rc2kChassisAmbientLowerTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kChassisAmbientLowerTemperature.setStatus("obsolete")
_Rc2kChassisAmbientUpperTemperature_Type = Gauge32
_Rc2kChassisAmbientUpperTemperature_Object = MibScalar
rc2kChassisAmbientUpperTemperature = _Rc2kChassisAmbientUpperTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 1, 4),
    _Rc2kChassisAmbientUpperTemperature_Type()
)
rc2kChassisAmbientUpperTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kChassisAmbientUpperTemperature.setStatus("obsolete")
_Rc2kChassisBaseMacAddr_Type = MacAddress
_Rc2kChassisBaseMacAddr_Object = MibScalar
rc2kChassisBaseMacAddr = _Rc2kChassisBaseMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 1, 5),
    _Rc2kChassisBaseMacAddr_Type()
)
rc2kChassisBaseMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kChassisBaseMacAddr.setStatus("current")
_Rc2kChassisMacAddrCapacity_Type = Integer32
_Rc2kChassisMacAddrCapacity_Object = MibScalar
rc2kChassisMacAddrCapacity = _Rc2kChassisMacAddrCapacity_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 1, 6),
    _Rc2kChassisMacAddrCapacity_Type()
)
rc2kChassisMacAddrCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kChassisMacAddrCapacity.setStatus("current")
_Rc2kCpuEthernetPortTable_Object = MibTable
rc2kCpuEthernetPortTable = _Rc2kCpuEthernetPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2)
)
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortTable.setStatus("current")
_Rc2kCpuEthernetPortEntry_Object = MibTableRow
rc2kCpuEthernetPortEntry = _Rc2kCpuEthernetPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1)
)
rc2kCpuEthernetPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kCpuEthernetPortIfIndex"),
)
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortEntry.setStatus("current")
_Rc2kCpuEthernetPortIfIndex_Type = InterfaceIndex
_Rc2kCpuEthernetPortIfIndex_Object = MibTableColumn
rc2kCpuEthernetPortIfIndex = _Rc2kCpuEthernetPortIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 1),
    _Rc2kCpuEthernetPortIfIndex_Type()
)
rc2kCpuEthernetPortIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortIfIndex.setStatus("current")


class _Rc2kCpuEthernetPortDescr_Type(DisplayString):
    """Custom type rc2kCpuEthernetPortDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_Rc2kCpuEthernetPortDescr_Type.__name__ = "DisplayString"
_Rc2kCpuEthernetPortDescr_Object = MibTableColumn
rc2kCpuEthernetPortDescr = _Rc2kCpuEthernetPortDescr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 2),
    _Rc2kCpuEthernetPortDescr_Type()
)
rc2kCpuEthernetPortDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortDescr.setStatus("current")


class _Rc2kCpuEthernetPortAdminStatus_Type(Integer32):
    """Custom type rc2kCpuEthernetPortAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_Rc2kCpuEthernetPortAdminStatus_Type.__name__ = "Integer32"
_Rc2kCpuEthernetPortAdminStatus_Object = MibTableColumn
rc2kCpuEthernetPortAdminStatus = _Rc2kCpuEthernetPortAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 3),
    _Rc2kCpuEthernetPortAdminStatus_Type()
)
rc2kCpuEthernetPortAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortAdminStatus.setStatus("current")


class _Rc2kCpuEthernetPortOperStatus_Type(Integer32):
    """Custom type rc2kCpuEthernetPortOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_Rc2kCpuEthernetPortOperStatus_Type.__name__ = "Integer32"
_Rc2kCpuEthernetPortOperStatus_Object = MibTableColumn
rc2kCpuEthernetPortOperStatus = _Rc2kCpuEthernetPortOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 4),
    _Rc2kCpuEthernetPortOperStatus_Type()
)
rc2kCpuEthernetPortOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortOperStatus.setStatus("current")
_Rc2kCpuEthernetPortAddr_Type = IpAddress
_Rc2kCpuEthernetPortAddr_Object = MibTableColumn
rc2kCpuEthernetPortAddr = _Rc2kCpuEthernetPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 5),
    _Rc2kCpuEthernetPortAddr_Type()
)
rc2kCpuEthernetPortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortAddr.setStatus("current")
_Rc2kCpuEthernetPortMask_Type = IpAddress
_Rc2kCpuEthernetPortMask_Object = MibTableColumn
rc2kCpuEthernetPortMask = _Rc2kCpuEthernetPortMask_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 6),
    _Rc2kCpuEthernetPortMask_Type()
)
rc2kCpuEthernetPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortMask.setStatus("current")
_Rc2kCpuEthernetPortGateway_Type = IpAddress
_Rc2kCpuEthernetPortGateway_Object = MibTableColumn
rc2kCpuEthernetPortGateway = _Rc2kCpuEthernetPortGateway_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 7),
    _Rc2kCpuEthernetPortGateway_Type()
)
rc2kCpuEthernetPortGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortGateway.setStatus("current")
_Rc2kCpuEthernetPortNetwork_Type = IpAddress
_Rc2kCpuEthernetPortNetwork_Object = MibTableColumn
rc2kCpuEthernetPortNetwork = _Rc2kCpuEthernetPortNetwork_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 8),
    _Rc2kCpuEthernetPortNetwork_Type()
)
rc2kCpuEthernetPortNetwork.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortNetwork.setStatus("current")


class _Rc2kCpuEthernetPortAutoNegotiate_Type(TruthValue):
    """Custom type rc2kCpuEthernetPortAutoNegotiate based on TruthValue"""


_Rc2kCpuEthernetPortAutoNegotiate_Object = MibTableColumn
rc2kCpuEthernetPortAutoNegotiate = _Rc2kCpuEthernetPortAutoNegotiate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 9),
    _Rc2kCpuEthernetPortAutoNegotiate_Type()
)
rc2kCpuEthernetPortAutoNegotiate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortAutoNegotiate.setStatus("current")


class _Rc2kCpuEthernetPortAdminDuplex_Type(Integer32):
    """Custom type rc2kCpuEthernetPortAdminDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("full", 2),
          ("half", 1))
    )


_Rc2kCpuEthernetPortAdminDuplex_Type.__name__ = "Integer32"
_Rc2kCpuEthernetPortAdminDuplex_Object = MibTableColumn
rc2kCpuEthernetPortAdminDuplex = _Rc2kCpuEthernetPortAdminDuplex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 10),
    _Rc2kCpuEthernetPortAdminDuplex_Type()
)
rc2kCpuEthernetPortAdminDuplex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortAdminDuplex.setStatus("current")


class _Rc2kCpuEthernetPortOperDuplex_Type(Integer32):
    """Custom type rc2kCpuEthernetPortOperDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("full", 2),
          ("half", 1))
    )


_Rc2kCpuEthernetPortOperDuplex_Type.__name__ = "Integer32"
_Rc2kCpuEthernetPortOperDuplex_Object = MibTableColumn
rc2kCpuEthernetPortOperDuplex = _Rc2kCpuEthernetPortOperDuplex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 11),
    _Rc2kCpuEthernetPortOperDuplex_Type()
)
rc2kCpuEthernetPortOperDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortOperDuplex.setStatus("current")


class _Rc2kCpuEthernetPortAdminSpeed_Type(Integer32):
    """Custom type rc2kCpuEthernetPortAdminSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mbps10", 1),
          ("mbps100", 2),
          ("none", 0))
    )


_Rc2kCpuEthernetPortAdminSpeed_Type.__name__ = "Integer32"
_Rc2kCpuEthernetPortAdminSpeed_Object = MibTableColumn
rc2kCpuEthernetPortAdminSpeed = _Rc2kCpuEthernetPortAdminSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 12),
    _Rc2kCpuEthernetPortAdminSpeed_Type()
)
rc2kCpuEthernetPortAdminSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortAdminSpeed.setStatus("current")


class _Rc2kCpuEthernetPortOperSpeed_Type(Integer32):
    """Custom type rc2kCpuEthernetPortOperSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mbps10", 1),
          ("mbps100", 2),
          ("mbps1000", 3),
          ("none", 0))
    )


_Rc2kCpuEthernetPortOperSpeed_Type.__name__ = "Integer32"
_Rc2kCpuEthernetPortOperSpeed_Object = MibTableColumn
rc2kCpuEthernetPortOperSpeed = _Rc2kCpuEthernetPortOperSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 13),
    _Rc2kCpuEthernetPortOperSpeed_Type()
)
rc2kCpuEthernetPortOperSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortOperSpeed.setStatus("current")


class _Rc2kCpuEthernetPortEnableBootp_Type(TruthValue):
    """Custom type rc2kCpuEthernetPortEnableBootp based on TruthValue"""


_Rc2kCpuEthernetPortEnableBootp_Object = MibTableColumn
rc2kCpuEthernetPortEnableBootp = _Rc2kCpuEthernetPortEnableBootp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 14),
    _Rc2kCpuEthernetPortEnableBootp_Type()
)
rc2kCpuEthernetPortEnableBootp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortEnableBootp.setStatus("current")
_Rc2kCpuEthernetPortMgmtMacAddr_Type = MacAddress
_Rc2kCpuEthernetPortMgmtMacAddr_Object = MibTableColumn
rc2kCpuEthernetPortMgmtMacAddr = _Rc2kCpuEthernetPortMgmtMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 2, 1, 15),
    _Rc2kCpuEthernetPortMgmtMacAddr_Type()
)
rc2kCpuEthernetPortMgmtMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortMgmtMacAddr.setStatus("current")
_Rc2kCpuSerialPortTable_Object = MibTable
rc2kCpuSerialPortTable = _Rc2kCpuSerialPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3)
)
if mibBuilder.loadTexts:
    rc2kCpuSerialPortTable.setStatus("current")
_Rc2kCpuSerialPortEntry_Object = MibTableRow
rc2kCpuSerialPortEntry = _Rc2kCpuSerialPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1)
)
rc2kCpuSerialPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kCpuSerialPortIfIndex"),
)
if mibBuilder.loadTexts:
    rc2kCpuSerialPortEntry.setStatus("current")
_Rc2kCpuSerialPortIfIndex_Type = InterfaceIndex
_Rc2kCpuSerialPortIfIndex_Object = MibTableColumn
rc2kCpuSerialPortIfIndex = _Rc2kCpuSerialPortIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 1),
    _Rc2kCpuSerialPortIfIndex_Type()
)
rc2kCpuSerialPortIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortIfIndex.setStatus("current")


class _Rc2kCpuSerialPortDescr_Type(DisplayString):
    """Custom type rc2kCpuSerialPortDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_Rc2kCpuSerialPortDescr_Type.__name__ = "DisplayString"
_Rc2kCpuSerialPortDescr_Object = MibTableColumn
rc2kCpuSerialPortDescr = _Rc2kCpuSerialPortDescr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 2),
    _Rc2kCpuSerialPortDescr_Type()
)
rc2kCpuSerialPortDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortDescr.setStatus("current")


class _Rc2kCpuSerialPortMode_Type(Integer32):
    """Custom type rc2kCpuSerialPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cli", 1),
          ("ppp", 3),
          ("slip", 2))
    )


_Rc2kCpuSerialPortMode_Type.__name__ = "Integer32"
_Rc2kCpuSerialPortMode_Object = MibTableColumn
rc2kCpuSerialPortMode = _Rc2kCpuSerialPortMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 3),
    _Rc2kCpuSerialPortMode_Type()
)
rc2kCpuSerialPortMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortMode.setStatus("current")


class _Rc2kCpuSerialPortAdminStatus_Type(Integer32):
    """Custom type rc2kCpuSerialPortAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_Rc2kCpuSerialPortAdminStatus_Type.__name__ = "Integer32"
_Rc2kCpuSerialPortAdminStatus_Object = MibTableColumn
rc2kCpuSerialPortAdminStatus = _Rc2kCpuSerialPortAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 4),
    _Rc2kCpuSerialPortAdminStatus_Type()
)
rc2kCpuSerialPortAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortAdminStatus.setStatus("current")


class _Rc2kCpuSerialPortOperStatus_Type(Integer32):
    """Custom type rc2kCpuSerialPortOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_Rc2kCpuSerialPortOperStatus_Type.__name__ = "Integer32"
_Rc2kCpuSerialPortOperStatus_Object = MibTableColumn
rc2kCpuSerialPortOperStatus = _Rc2kCpuSerialPortOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 5),
    _Rc2kCpuSerialPortOperStatus_Type()
)
rc2kCpuSerialPortOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortOperStatus.setStatus("current")


class _Rc2kCpuSerialPortBaudRate_Type(Integer32):
    """Custom type rc2kCpuSerialPortBaudRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2400,
              4800,
              9600,
              19200,
              38400,
              57600,
              115200)
        )
    )
    namedValues = NamedValues(
        *(("baud115200", 115200),
          ("baud19200", 19200),
          ("baud2400", 2400),
          ("baud38400", 38400),
          ("baud4800", 4800),
          ("baud57600", 57600),
          ("baud9600", 9600))
    )


_Rc2kCpuSerialPortBaudRate_Type.__name__ = "Integer32"
_Rc2kCpuSerialPortBaudRate_Object = MibTableColumn
rc2kCpuSerialPortBaudRate = _Rc2kCpuSerialPortBaudRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 6),
    _Rc2kCpuSerialPortBaudRate_Type()
)
rc2kCpuSerialPortBaudRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortBaudRate.setStatus("current")


class _Rc2kCpuSerialPortDataBits_Type(Integer32):
    """Custom type rc2kCpuSerialPortDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eight", 2),
          ("seven", 1))
    )


_Rc2kCpuSerialPortDataBits_Type.__name__ = "Integer32"
_Rc2kCpuSerialPortDataBits_Object = MibTableColumn
rc2kCpuSerialPortDataBits = _Rc2kCpuSerialPortDataBits_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 7),
    _Rc2kCpuSerialPortDataBits_Type()
)
rc2kCpuSerialPortDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortDataBits.setStatus("current")
_Rc2kCpuSerialPortMyAddr_Type = IpAddress
_Rc2kCpuSerialPortMyAddr_Object = MibTableColumn
rc2kCpuSerialPortMyAddr = _Rc2kCpuSerialPortMyAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 8),
    _Rc2kCpuSerialPortMyAddr_Type()
)
rc2kCpuSerialPortMyAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortMyAddr.setStatus("current")
_Rc2kCpuSerialPortPeerAddr_Type = IpAddress
_Rc2kCpuSerialPortPeerAddr_Object = MibTableColumn
rc2kCpuSerialPortPeerAddr = _Rc2kCpuSerialPortPeerAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 9),
    _Rc2kCpuSerialPortPeerAddr_Type()
)
rc2kCpuSerialPortPeerAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortPeerAddr.setStatus("current")


class _Rc2kCpuSerialPortSlipMtu_Type(Integer32):
    """Custom type rc2kCpuSerialPortSlipMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 224),
    )


_Rc2kCpuSerialPortSlipMtu_Type.__name__ = "Integer32"
_Rc2kCpuSerialPortSlipMtu_Object = MibTableColumn
rc2kCpuSerialPortSlipMtu = _Rc2kCpuSerialPortSlipMtu_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 10),
    _Rc2kCpuSerialPortSlipMtu_Type()
)
rc2kCpuSerialPortSlipMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortSlipMtu.setStatus("current")


class _Rc2kCpuSerialPortSlipTxRxCompress_Type(TruthValue):
    """Custom type rc2kCpuSerialPortSlipTxRxCompress based on TruthValue"""


_Rc2kCpuSerialPortSlipTxRxCompress_Object = MibTableColumn
rc2kCpuSerialPortSlipTxRxCompress = _Rc2kCpuSerialPortSlipTxRxCompress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 11),
    _Rc2kCpuSerialPortSlipTxRxCompress_Type()
)
rc2kCpuSerialPortSlipTxRxCompress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortSlipTxRxCompress.setStatus("current")


class _Rc2kCpuSerialPortSlipRxCompress_Type(TruthValue):
    """Custom type rc2kCpuSerialPortSlipRxCompress based on TruthValue"""


_Rc2kCpuSerialPortSlipRxCompress_Object = MibTableColumn
rc2kCpuSerialPortSlipRxCompress = _Rc2kCpuSerialPortSlipRxCompress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 12),
    _Rc2kCpuSerialPortSlipRxCompress_Type()
)
rc2kCpuSerialPortSlipRxCompress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortSlipRxCompress.setStatus("current")


class _Rc2kCpuSerialPortPppConfigFile_Type(OctetString):
    """Custom type rc2kCpuSerialPortPppConfigFile based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_Rc2kCpuSerialPortPppConfigFile_Type.__name__ = "OctetString"
_Rc2kCpuSerialPortPppConfigFile_Object = MibTableColumn
rc2kCpuSerialPortPppConfigFile = _Rc2kCpuSerialPortPppConfigFile_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 3, 1, 13),
    _Rc2kCpuSerialPortPppConfigFile_Type()
)
rc2kCpuSerialPortPppConfigFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuSerialPortPppConfigFile.setStatus("current")
_Rc2kDevice_ObjectIdentity = ObjectIdentity
rc2kDevice = _Rc2kDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4)
)
_Rc2kDeviceGlobalTable_Object = MibTable
rc2kDeviceGlobalTable = _Rc2kDeviceGlobalTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1)
)
if mibBuilder.loadTexts:
    rc2kDeviceGlobalTable.setStatus("current")
_Rc2kDeviceGlobalEntry_Object = MibTableRow
rc2kDeviceGlobalEntry = _Rc2kDeviceGlobalEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1)
)
rc2kDeviceGlobalEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kDeviceGlobalSlot"),
)
if mibBuilder.loadTexts:
    rc2kDeviceGlobalEntry.setStatus("current")


class _Rc2kDeviceGlobalSlot_Type(Integer32):
    """Custom type rc2kDeviceGlobalSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 6),
    )


_Rc2kDeviceGlobalSlot_Type.__name__ = "Integer32"
_Rc2kDeviceGlobalSlot_Object = MibTableColumn
rc2kDeviceGlobalSlot = _Rc2kDeviceGlobalSlot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 1),
    _Rc2kDeviceGlobalSlot_Type()
)
rc2kDeviceGlobalSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalSlot.setStatus("current")
_Rc2kDeviceGlobalFlashBytesUsed_Type = Integer32
_Rc2kDeviceGlobalFlashBytesUsed_Object = MibTableColumn
rc2kDeviceGlobalFlashBytesUsed = _Rc2kDeviceGlobalFlashBytesUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 2),
    _Rc2kDeviceGlobalFlashBytesUsed_Type()
)
rc2kDeviceGlobalFlashBytesUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalFlashBytesUsed.setStatus("current")
_Rc2kDeviceGlobalFlashBytesFree_Type = Integer32
_Rc2kDeviceGlobalFlashBytesFree_Object = MibTableColumn
rc2kDeviceGlobalFlashBytesFree = _Rc2kDeviceGlobalFlashBytesFree_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 3),
    _Rc2kDeviceGlobalFlashBytesFree_Type()
)
rc2kDeviceGlobalFlashBytesFree.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalFlashBytesFree.setStatus("current")
_Rc2kDeviceGlobalFlashNumFiles_Type = Integer32
_Rc2kDeviceGlobalFlashNumFiles_Object = MibTableColumn
rc2kDeviceGlobalFlashNumFiles = _Rc2kDeviceGlobalFlashNumFiles_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 4),
    _Rc2kDeviceGlobalFlashNumFiles_Type()
)
rc2kDeviceGlobalFlashNumFiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalFlashNumFiles.setStatus("current")
_Rc2kDeviceGlobalPcmciaBytesUsed_Type = Integer32
_Rc2kDeviceGlobalPcmciaBytesUsed_Object = MibTableColumn
rc2kDeviceGlobalPcmciaBytesUsed = _Rc2kDeviceGlobalPcmciaBytesUsed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 5),
    _Rc2kDeviceGlobalPcmciaBytesUsed_Type()
)
rc2kDeviceGlobalPcmciaBytesUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalPcmciaBytesUsed.setStatus("current")
_Rc2kDeviceGlobalPcmciaBytesFree_Type = Integer32
_Rc2kDeviceGlobalPcmciaBytesFree_Object = MibTableColumn
rc2kDeviceGlobalPcmciaBytesFree = _Rc2kDeviceGlobalPcmciaBytesFree_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 6),
    _Rc2kDeviceGlobalPcmciaBytesFree_Type()
)
rc2kDeviceGlobalPcmciaBytesFree.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalPcmciaBytesFree.setStatus("current")
_Rc2kDeviceGlobalPcmciaNumFiles_Type = Integer32
_Rc2kDeviceGlobalPcmciaNumFiles_Object = MibTableColumn
rc2kDeviceGlobalPcmciaNumFiles = _Rc2kDeviceGlobalPcmciaNumFiles_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 7),
    _Rc2kDeviceGlobalPcmciaNumFiles_Type()
)
rc2kDeviceGlobalPcmciaNumFiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalPcmciaNumFiles.setStatus("current")


class _Rc2kDeviceGlobalAction_Type(Integer32):
    """Custom type rc2kDeviceGlobalAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("pcmciaStop", 3),
          ("resetPcmcia", 2))
    )


_Rc2kDeviceGlobalAction_Type.__name__ = "Integer32"
_Rc2kDeviceGlobalAction_Object = MibTableColumn
rc2kDeviceGlobalAction = _Rc2kDeviceGlobalAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 8),
    _Rc2kDeviceGlobalAction_Type()
)
rc2kDeviceGlobalAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalAction.setStatus("current")


class _Rc2kDeviceGlobalResult_Type(Integer32):
    """Custom type rc2kDeviceGlobalResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fail", 4),
          ("inProgress", 2),
          ("none", 1),
          ("success", 3))
    )


_Rc2kDeviceGlobalResult_Type.__name__ = "Integer32"
_Rc2kDeviceGlobalResult_Object = MibTableColumn
rc2kDeviceGlobalResult = _Rc2kDeviceGlobalResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 1, 1, 9),
    _Rc2kDeviceGlobalResult_Type()
)
rc2kDeviceGlobalResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceGlobalResult.setStatus("current")
_Rc2kDeviceSeparator1_Type = Integer32
_Rc2kDeviceSeparator1_Object = MibScalar
rc2kDeviceSeparator1 = _Rc2kDeviceSeparator1_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 2),
    _Rc2kDeviceSeparator1_Type()
)
rc2kDeviceSeparator1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceSeparator1.setStatus("current")
_Rc2kDeviceFlashFileTable_Object = MibTable
rc2kDeviceFlashFileTable = _Rc2kDeviceFlashFileTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 3)
)
if mibBuilder.loadTexts:
    rc2kDeviceFlashFileTable.setStatus("current")
_Rc2kDeviceFlashFileEntry_Object = MibTableRow
rc2kDeviceFlashFileEntry = _Rc2kDeviceFlashFileEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 3, 1)
)
rc2kDeviceFlashFileEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kDeviceFlashFileSlot"),
    (1, "RAPID-CITY", "rc2kDeviceFlashFileName"),
)
if mibBuilder.loadTexts:
    rc2kDeviceFlashFileEntry.setStatus("current")


class _Rc2kDeviceFlashFileSlot_Type(Integer32):
    """Custom type rc2kDeviceFlashFileSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 6),
    )


_Rc2kDeviceFlashFileSlot_Type.__name__ = "Integer32"
_Rc2kDeviceFlashFileSlot_Object = MibTableColumn
rc2kDeviceFlashFileSlot = _Rc2kDeviceFlashFileSlot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 3, 1, 1),
    _Rc2kDeviceFlashFileSlot_Type()
)
rc2kDeviceFlashFileSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceFlashFileSlot.setStatus("current")


class _Rc2kDeviceFlashFileName_Type(DisplayString):
    """Custom type rc2kDeviceFlashFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 114),
    )


_Rc2kDeviceFlashFileName_Type.__name__ = "DisplayString"
_Rc2kDeviceFlashFileName_Object = MibTableColumn
rc2kDeviceFlashFileName = _Rc2kDeviceFlashFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 3, 1, 2),
    _Rc2kDeviceFlashFileName_Type()
)
rc2kDeviceFlashFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceFlashFileName.setStatus("current")


class _Rc2kDeviceFlashFileDate_Type(DisplayString):
    """Custom type rc2kDeviceFlashFileDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_Rc2kDeviceFlashFileDate_Type.__name__ = "DisplayString"
_Rc2kDeviceFlashFileDate_Object = MibTableColumn
rc2kDeviceFlashFileDate = _Rc2kDeviceFlashFileDate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 3, 1, 3),
    _Rc2kDeviceFlashFileDate_Type()
)
rc2kDeviceFlashFileDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceFlashFileDate.setStatus("current")
_Rc2kDeviceFlashFileSize_Type = Integer32
_Rc2kDeviceFlashFileSize_Object = MibTableColumn
rc2kDeviceFlashFileSize = _Rc2kDeviceFlashFileSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 3, 1, 4),
    _Rc2kDeviceFlashFileSize_Type()
)
rc2kDeviceFlashFileSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceFlashFileSize.setStatus("current")
_Rc2kDevicePcmciaPresent_Type = TruthValue
_Rc2kDevicePcmciaPresent_Object = MibScalar
rc2kDevicePcmciaPresent = _Rc2kDevicePcmciaPresent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 4),
    _Rc2kDevicePcmciaPresent_Type()
)
rc2kDevicePcmciaPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDevicePcmciaPresent.setStatus("current")
_Rc2kDevicePcmciaFileTable_Object = MibTable
rc2kDevicePcmciaFileTable = _Rc2kDevicePcmciaFileTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 5)
)
if mibBuilder.loadTexts:
    rc2kDevicePcmciaFileTable.setStatus("current")
_Rc2kDevicePcmciaFileEntry_Object = MibTableRow
rc2kDevicePcmciaFileEntry = _Rc2kDevicePcmciaFileEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 5, 1)
)
rc2kDevicePcmciaFileEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kDevicePcmciaFileSlot"),
    (1, "RAPID-CITY", "rc2kDevicePcmciaFileName"),
)
if mibBuilder.loadTexts:
    rc2kDevicePcmciaFileEntry.setStatus("current")


class _Rc2kDevicePcmciaFileSlot_Type(Integer32):
    """Custom type rc2kDevicePcmciaFileSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 6),
    )


_Rc2kDevicePcmciaFileSlot_Type.__name__ = "Integer32"
_Rc2kDevicePcmciaFileSlot_Object = MibTableColumn
rc2kDevicePcmciaFileSlot = _Rc2kDevicePcmciaFileSlot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 5, 1, 1),
    _Rc2kDevicePcmciaFileSlot_Type()
)
rc2kDevicePcmciaFileSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDevicePcmciaFileSlot.setStatus("current")


class _Rc2kDevicePcmciaFileName_Type(DisplayString):
    """Custom type rc2kDevicePcmciaFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 114),
    )


_Rc2kDevicePcmciaFileName_Type.__name__ = "DisplayString"
_Rc2kDevicePcmciaFileName_Object = MibTableColumn
rc2kDevicePcmciaFileName = _Rc2kDevicePcmciaFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 5, 1, 2),
    _Rc2kDevicePcmciaFileName_Type()
)
rc2kDevicePcmciaFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDevicePcmciaFileName.setStatus("current")


class _Rc2kDevicePcmciaFileDate_Type(DisplayString):
    """Custom type rc2kDevicePcmciaFileDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_Rc2kDevicePcmciaFileDate_Type.__name__ = "DisplayString"
_Rc2kDevicePcmciaFileDate_Object = MibTableColumn
rc2kDevicePcmciaFileDate = _Rc2kDevicePcmciaFileDate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 5, 1, 3),
    _Rc2kDevicePcmciaFileDate_Type()
)
rc2kDevicePcmciaFileDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDevicePcmciaFileDate.setStatus("current")
_Rc2kDevicePcmciaFileSize_Type = Integer32
_Rc2kDevicePcmciaFileSize_Object = MibTableColumn
rc2kDevicePcmciaFileSize = _Rc2kDevicePcmciaFileSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 5, 1, 4),
    _Rc2kDevicePcmciaFileSize_Type()
)
rc2kDevicePcmciaFileSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDevicePcmciaFileSize.setStatus("current")
_Rc2kDeviceSeparator2_Type = Integer32
_Rc2kDeviceSeparator2_Object = MibScalar
rc2kDeviceSeparator2 = _Rc2kDeviceSeparator2_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 4, 6),
    _Rc2kDeviceSeparator2_Type()
)
rc2kDeviceSeparator2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kDeviceSeparator2.setStatus("current")
_Rc2kBootConfigTable_Object = MibTable
rc2kBootConfigTable = _Rc2kBootConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5)
)
if mibBuilder.loadTexts:
    rc2kBootConfigTable.setStatus("current")
_Rc2kBootConfigEntry_Object = MibTableRow
rc2kBootConfigEntry = _Rc2kBootConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1)
)
rc2kBootConfigEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kBootConfigSlot"),
)
if mibBuilder.loadTexts:
    rc2kBootConfigEntry.setStatus("current")


class _Rc2kBootConfigSlot_Type(Integer32):
    """Custom type rc2kBootConfigSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 6),
    )


_Rc2kBootConfigSlot_Type.__name__ = "Integer32"
_Rc2kBootConfigSlot_Object = MibTableColumn
rc2kBootConfigSlot = _Rc2kBootConfigSlot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 1),
    _Rc2kBootConfigSlot_Type()
)
rc2kBootConfigSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kBootConfigSlot.setStatus("current")


class _Rc2kBootConfigLastBootConfigSource_Type(DisplayString):
    """Custom type rc2kBootConfigLastBootConfigSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigLastBootConfigSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigLastBootConfigSource_Object = MibTableColumn
rc2kBootConfigLastBootConfigSource = _Rc2kBootConfigLastBootConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 2),
    _Rc2kBootConfigLastBootConfigSource_Type()
)
rc2kBootConfigLastBootConfigSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kBootConfigLastBootConfigSource.setStatus("current")


class _Rc2kBootConfigLastRuntimeImageSource_Type(DisplayString):
    """Custom type rc2kBootConfigLastRuntimeImageSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigLastRuntimeImageSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigLastRuntimeImageSource_Object = MibTableColumn
rc2kBootConfigLastRuntimeImageSource = _Rc2kBootConfigLastRuntimeImageSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 3),
    _Rc2kBootConfigLastRuntimeImageSource_Type()
)
rc2kBootConfigLastRuntimeImageSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kBootConfigLastRuntimeImageSource.setStatus("current")


class _Rc2kBootConfigLastRuntimeConfigSource_Type(DisplayString):
    """Custom type rc2kBootConfigLastRuntimeConfigSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigLastRuntimeConfigSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigLastRuntimeConfigSource_Object = MibTableColumn
rc2kBootConfigLastRuntimeConfigSource = _Rc2kBootConfigLastRuntimeConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 4),
    _Rc2kBootConfigLastRuntimeConfigSource_Type()
)
rc2kBootConfigLastRuntimeConfigSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kBootConfigLastRuntimeConfigSource.setStatus("current")


class _Rc2kBootConfigPrimaryImageSource_Type(DisplayString):
    """Custom type rc2kBootConfigPrimaryImageSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigPrimaryImageSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigPrimaryImageSource_Object = MibTableColumn
rc2kBootConfigPrimaryImageSource = _Rc2kBootConfigPrimaryImageSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 5),
    _Rc2kBootConfigPrimaryImageSource_Type()
)
rc2kBootConfigPrimaryImageSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigPrimaryImageSource.setStatus("current")


class _Rc2kBootConfigPrimaryConfigSource_Type(DisplayString):
    """Custom type rc2kBootConfigPrimaryConfigSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigPrimaryConfigSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigPrimaryConfigSource_Object = MibTableColumn
rc2kBootConfigPrimaryConfigSource = _Rc2kBootConfigPrimaryConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 6),
    _Rc2kBootConfigPrimaryConfigSource_Type()
)
rc2kBootConfigPrimaryConfigSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigPrimaryConfigSource.setStatus("current")


class _Rc2kBootConfigSecondaryImageSource_Type(DisplayString):
    """Custom type rc2kBootConfigSecondaryImageSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigSecondaryImageSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigSecondaryImageSource_Object = MibTableColumn
rc2kBootConfigSecondaryImageSource = _Rc2kBootConfigSecondaryImageSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 7),
    _Rc2kBootConfigSecondaryImageSource_Type()
)
rc2kBootConfigSecondaryImageSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigSecondaryImageSource.setStatus("current")


class _Rc2kBootConfigSecondaryConfigSource_Type(DisplayString):
    """Custom type rc2kBootConfigSecondaryConfigSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigSecondaryConfigSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigSecondaryConfigSource_Object = MibTableColumn
rc2kBootConfigSecondaryConfigSource = _Rc2kBootConfigSecondaryConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 8),
    _Rc2kBootConfigSecondaryConfigSource_Type()
)
rc2kBootConfigSecondaryConfigSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigSecondaryConfigSource.setStatus("current")


class _Rc2kBootConfigTertiaryImageSource_Type(DisplayString):
    """Custom type rc2kBootConfigTertiaryImageSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigTertiaryImageSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigTertiaryImageSource_Object = MibTableColumn
rc2kBootConfigTertiaryImageSource = _Rc2kBootConfigTertiaryImageSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 9),
    _Rc2kBootConfigTertiaryImageSource_Type()
)
rc2kBootConfigTertiaryImageSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigTertiaryImageSource.setStatus("current")


class _Rc2kBootConfigTertiaryConfigSource_Type(DisplayString):
    """Custom type rc2kBootConfigTertiaryConfigSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigTertiaryConfigSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigTertiaryConfigSource_Object = MibTableColumn
rc2kBootConfigTertiaryConfigSource = _Rc2kBootConfigTertiaryConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 10),
    _Rc2kBootConfigTertiaryConfigSource_Type()
)
rc2kBootConfigTertiaryConfigSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigTertiaryConfigSource.setStatus("current")
_Rc2kBootConfigEnableAutoBoot_Type = TruthValue
_Rc2kBootConfigEnableAutoBoot_Object = MibTableColumn
rc2kBootConfigEnableAutoBoot = _Rc2kBootConfigEnableAutoBoot_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 11),
    _Rc2kBootConfigEnableAutoBoot_Type()
)
rc2kBootConfigEnableAutoBoot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableAutoBoot.setStatus("current")
_Rc2kBootConfigEnableFactoryDefaults_Type = TruthValue
_Rc2kBootConfigEnableFactoryDefaults_Object = MibTableColumn
rc2kBootConfigEnableFactoryDefaults = _Rc2kBootConfigEnableFactoryDefaults_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 12),
    _Rc2kBootConfigEnableFactoryDefaults_Type()
)
rc2kBootConfigEnableFactoryDefaults.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableFactoryDefaults.setStatus("current")
_Rc2kBootConfigEnableDebugMode_Type = TruthValue
_Rc2kBootConfigEnableDebugMode_Object = MibTableColumn
rc2kBootConfigEnableDebugMode = _Rc2kBootConfigEnableDebugMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 13),
    _Rc2kBootConfigEnableDebugMode_Type()
)
rc2kBootConfigEnableDebugMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableDebugMode.setStatus("current")
_Rc2kBootConfigEnableHwWatchDogTimer_Type = TruthValue
_Rc2kBootConfigEnableHwWatchDogTimer_Object = MibTableColumn
rc2kBootConfigEnableHwWatchDogTimer = _Rc2kBootConfigEnableHwWatchDogTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 14),
    _Rc2kBootConfigEnableHwWatchDogTimer_Type()
)
rc2kBootConfigEnableHwWatchDogTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableHwWatchDogTimer.setStatus("current")
_Rc2kBootConfigEnableRebootOnError_Type = TruthValue
_Rc2kBootConfigEnableRebootOnError_Object = MibTableColumn
rc2kBootConfigEnableRebootOnError = _Rc2kBootConfigEnableRebootOnError_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 15),
    _Rc2kBootConfigEnableRebootOnError_Type()
)
rc2kBootConfigEnableRebootOnError.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableRebootOnError.setStatus("current")
_Rc2kBootConfigEnableTelnetServer_Type = TruthValue
_Rc2kBootConfigEnableTelnetServer_Object = MibTableColumn
rc2kBootConfigEnableTelnetServer = _Rc2kBootConfigEnableTelnetServer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 16),
    _Rc2kBootConfigEnableTelnetServer_Type()
)
rc2kBootConfigEnableTelnetServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableTelnetServer.setStatus("current")
_Rc2kBootConfigEnableRloginServer_Type = TruthValue
_Rc2kBootConfigEnableRloginServer_Object = MibTableColumn
rc2kBootConfigEnableRloginServer = _Rc2kBootConfigEnableRloginServer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 17),
    _Rc2kBootConfigEnableRloginServer_Type()
)
rc2kBootConfigEnableRloginServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableRloginServer.setStatus("current")
_Rc2kBootConfigEnableFtpServer_Type = TruthValue
_Rc2kBootConfigEnableFtpServer_Object = MibTableColumn
rc2kBootConfigEnableFtpServer = _Rc2kBootConfigEnableFtpServer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 18),
    _Rc2kBootConfigEnableFtpServer_Type()
)
rc2kBootConfigEnableFtpServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableFtpServer.setStatus("current")
_Rc2kBootConfigEnableTftpServer_Type = TruthValue
_Rc2kBootConfigEnableTftpServer_Object = MibTableColumn
rc2kBootConfigEnableTftpServer = _Rc2kBootConfigEnableTftpServer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 19),
    _Rc2kBootConfigEnableTftpServer_Type()
)
rc2kBootConfigEnableTftpServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableTftpServer.setStatus("current")
_Rc2kBootConfigSwVersion_Type = DisplayString
_Rc2kBootConfigSwVersion_Object = MibTableColumn
rc2kBootConfigSwVersion = _Rc2kBootConfigSwVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 20),
    _Rc2kBootConfigSwVersion_Type()
)
rc2kBootConfigSwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kBootConfigSwVersion.setStatus("current")


class _Rc2kBootConfigMulticastConfigProfile_Type(Integer32):
    """Custom type rc2kBootConfigMulticastConfigProfile based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_Rc2kBootConfigMulticastConfigProfile_Type.__name__ = "Integer32"
_Rc2kBootConfigMulticastConfigProfile_Object = MibTableColumn
rc2kBootConfigMulticastConfigProfile = _Rc2kBootConfigMulticastConfigProfile_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 21),
    _Rc2kBootConfigMulticastConfigProfile_Type()
)
rc2kBootConfigMulticastConfigProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kBootConfigMulticastConfigProfile.setStatus("current")
_Rc2kBootConfigEnableSshServer_Type = TruthValue
_Rc2kBootConfigEnableSshServer_Object = MibTableColumn
rc2kBootConfigEnableSshServer = _Rc2kBootConfigEnableSshServer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 22),
    _Rc2kBootConfigEnableSshServer_Type()
)
rc2kBootConfigEnableSshServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableSshServer.setStatus("current")
_Rc2kBootConfigEnableAltLed_Type = TruthValue
_Rc2kBootConfigEnableAltLed_Object = MibTableColumn
rc2kBootConfigEnableAltLed = _Rc2kBootConfigEnableAltLed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 23),
    _Rc2kBootConfigEnableAltLed_Type()
)
rc2kBootConfigEnableAltLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableAltLed.setStatus("current")


class _Rc2kBootConfigPrimaryBackupConfigSource_Type(DisplayString):
    """Custom type rc2kBootConfigPrimaryBackupConfigSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigPrimaryBackupConfigSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigPrimaryBackupConfigSource_Object = MibTableColumn
rc2kBootConfigPrimaryBackupConfigSource = _Rc2kBootConfigPrimaryBackupConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 24),
    _Rc2kBootConfigPrimaryBackupConfigSource_Type()
)
rc2kBootConfigPrimaryBackupConfigSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigPrimaryBackupConfigSource.setStatus("current")


class _Rc2kBootConfigSecondaryBackupConfigSource_Type(DisplayString):
    """Custom type rc2kBootConfigSecondaryBackupConfigSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigSecondaryBackupConfigSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigSecondaryBackupConfigSource_Object = MibTableColumn
rc2kBootConfigSecondaryBackupConfigSource = _Rc2kBootConfigSecondaryBackupConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 25),
    _Rc2kBootConfigSecondaryBackupConfigSource_Type()
)
rc2kBootConfigSecondaryBackupConfigSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigSecondaryBackupConfigSource.setStatus("current")


class _Rc2kBootConfigTertiaryBackupConfigSource_Type(DisplayString):
    """Custom type rc2kBootConfigTertiaryBackupConfigSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigTertiaryBackupConfigSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigTertiaryBackupConfigSource_Object = MibTableColumn
rc2kBootConfigTertiaryBackupConfigSource = _Rc2kBootConfigTertiaryBackupConfigSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 26),
    _Rc2kBootConfigTertiaryBackupConfigSource_Type()
)
rc2kBootConfigTertiaryBackupConfigSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigTertiaryBackupConfigSource.setStatus("current")
_Rc2kBootConfigEnable8616ReAutoneg_Type = TruthValue
_Rc2kBootConfigEnable8616ReAutoneg_Object = MibTableColumn
rc2kBootConfigEnable8616ReAutoneg = _Rc2kBootConfigEnable8616ReAutoneg_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 27),
    _Rc2kBootConfigEnable8616ReAutoneg_Type()
)
rc2kBootConfigEnable8616ReAutoneg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnable8616ReAutoneg.setStatus("current")


class _Rc2kBootConfigMezzImageSource_Type(DisplayString):
    """Custom type rc2kBootConfigMezzImageSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigMezzImageSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigMezzImageSource_Object = MibTableColumn
rc2kBootConfigMezzImageSource = _Rc2kBootConfigMezzImageSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 28),
    _Rc2kBootConfigMezzImageSource_Type()
)
rc2kBootConfigMezzImageSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigMezzImageSource.setStatus("current")
_Rc2kBootConfigEnableMezz_Type = TruthValue
_Rc2kBootConfigEnableMezz_Object = MibTableColumn
rc2kBootConfigEnableMezz = _Rc2kBootConfigEnableMezz_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 29),
    _Rc2kBootConfigEnableMezz_Type()
)
rc2kBootConfigEnableMezz.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableMezz.setStatus("current")


class _Rc2kBootConfigPrimaryLicenseSource_Type(DisplayString):
    """Custom type rc2kBootConfigPrimaryLicenseSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigPrimaryLicenseSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigPrimaryLicenseSource_Object = MibTableColumn
rc2kBootConfigPrimaryLicenseSource = _Rc2kBootConfigPrimaryLicenseSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 30),
    _Rc2kBootConfigPrimaryLicenseSource_Type()
)
rc2kBootConfigPrimaryLicenseSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigPrimaryLicenseSource.setStatus("current")


class _Rc2kBootConfigSecondaryLicenseSource_Type(DisplayString):
    """Custom type rc2kBootConfigSecondaryLicenseSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigSecondaryLicenseSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigSecondaryLicenseSource_Object = MibTableColumn
rc2kBootConfigSecondaryLicenseSource = _Rc2kBootConfigSecondaryLicenseSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 31),
    _Rc2kBootConfigSecondaryLicenseSource_Type()
)
rc2kBootConfigSecondaryLicenseSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigSecondaryLicenseSource.setStatus("current")


class _Rc2kBootConfigTertiaryLicenseSource_Type(DisplayString):
    """Custom type rc2kBootConfigTertiaryLicenseSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Rc2kBootConfigTertiaryLicenseSource_Type.__name__ = "DisplayString"
_Rc2kBootConfigTertiaryLicenseSource_Object = MibTableColumn
rc2kBootConfigTertiaryLicenseSource = _Rc2kBootConfigTertiaryLicenseSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 32),
    _Rc2kBootConfigTertiaryLicenseSource_Type()
)
rc2kBootConfigTertiaryLicenseSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigTertiaryLicenseSource.setStatus("current")
_Rc2kBootConfigEnableCfPcCompat_Type = TruthValue
_Rc2kBootConfigEnableCfPcCompat_Object = MibTableColumn
rc2kBootConfigEnableCfPcCompat = _Rc2kBootConfigEnableCfPcCompat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 5, 1, 44),
    _Rc2kBootConfigEnableCfPcCompat_Type()
)
rc2kBootConfigEnableCfPcCompat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kBootConfigEnableCfPcCompat.setStatus("current")
_Rc2kCardTable_Object = MibTable
rc2kCardTable = _Rc2kCardTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6)
)
if mibBuilder.loadTexts:
    rc2kCardTable.setStatus("current")
_Rc2kCardEntry_Object = MibTableRow
rc2kCardEntry = _Rc2kCardEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1)
)
rc2kCardEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kCardIndex"),
)
if mibBuilder.loadTexts:
    rc2kCardEntry.setStatus("current")


class _Rc2kCardIndex_Type(Integer32):
    """Custom type rc2kCardIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Rc2kCardIndex_Type.__name__ = "Integer32"
_Rc2kCardIndex_Object = MibTableColumn
rc2kCardIndex = _Rc2kCardIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 1),
    _Rc2kCardIndex_Type()
)
rc2kCardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardIndex.setStatus("current")


class _Rc2kCardFrontType_Type(Integer32):
    """Custom type rc2kCardFrontType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              537788672,
              537792768,
              539033880,
              539033888,
              539033904,
              539099400,
              539099408,
              540082456,
              540147976,
              540147984,
              540156168,
              540164360,
              540168452,
              540168456,
              540168464,
              540180744,
              540188936,
              541327624,
              541393154,
              541401350,
              542441732,
              542441736,
              545128704,
              572588320,
              572588336,
              572653832,
              573702408,
              573722888,
              573767937,
              573784321,
              574955782,
              575996168,
              606208304,
              606241072,
              607277342,
              607277346,
              607277360,
              607338755,
              607338764,
              607346947,
              631406896,
              632443170,
              632443184,
              632504588,
              807469360,
              807473440,
              808522000,
              808583432,
              808603912,
              817955120,
              1342316808,
              1344340272,
              1344344368,
              1344405784,
              1893859592,
              1899102468,
              1899106564,
              1926365441,
              1926369537)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("rc2k16x1000BaseIC", 540168464),
          ("rc2k16x1000BaseSXBB", 540147984),
          ("rc2k16x1000BaseT", 539099408),
          ("rc2k1x10GBaseLR", 573784321),
          ("rc2k1x10GBaseLW", 573767937),
          ("rc2k24x100BaseFX", 540082456),
          ("rc2k24x100BaseTX", 539033880),
          ("rc2k2xOC12", 541393154),
          ("rc2k32x100BaseTX", 539033888),
          ("rc2k32x100BaseTXM", 572588320),
          ("rc2k48x100BaseTX", 539033904),
          ("rc2k48x100BaseTXM", 572588336),
          ("rc2k4x1000BaseOPM", 540168452),
          ("rc2k4xATM", 542441732),
          ("rc2k61AlteonSAM", 1926365441),
          ("rc2k62AlteonSAM", 1926369537),
          ("rc2k6xPOS", 541401350),
          ("rc2k6xPOSM", 574955782),
          ("rc2k8x1000BaseIC", 540168456),
          ("rc2k8x1000BaseICM", 573722888),
          ("rc2k8x1000BaseLXBB", 540156168),
          ("rc2k8x1000BaseLXRBB", 540188936),
          ("rc2k8x1000BaseSXBB", 540147976),
          ("rc2k8x1000BaseSXBBM", 573702408),
          ("rc2k8x1000BaseSXRBB", 540180744),
          ("rc2k8x1000BaseT", 539099400),
          ("rc2k8x1000BaseTM", 572653832),
          ("rc2k8x1000BaseXDBB", 540164360),
          ("rc2k8xATM", 542441736),
          ("rc2k8xATMM", 575996168),
          ("rc2k8xOC3", 541327624),
          ("rc2kAlteonASFM", 1899106564),
          ("rc2kAlteonLP", 1893859592),
          ("rc2kAlteonWSM", 1899102468),
          ("rc2kCPU", 537788672),
          ("rc2kCPURed", 537792768),
          ("rc2kMg16x100BaseFX", 808522000),
          ("rc2kMg32x100BaseTX", 807473440),
          ("rc2kMg48x100BaseTC", 817955120),
          ("rc2kMg48x100BaseTX", 807469360),
          ("rc2kMg8x1000BaseIC", 808603912),
          ("rc2kMg8x1000BaseTX", 808583432),
          ("rc2kPP8300-24x1000BaseTX", 1344405784),
          ("rc2kPP8300-48x100BaseTX", 1344340272),
          ("rc2kPP8300-48x100BaseTXPOE", 1344344368),
          ("rc2kPP8300-CPU8x1000BaseSFP", 1342316808),
          ("rc2kPR12X10GBaseXLRS", 607338764),
          ("rc2kPR30X1000BaseSXBB", 607277342),
          ("rc2kPR34xXGRS", 607277346),
          ("rc2kPR3X10GBaseGbic", 607338755),
          ("rc2kPR3X10GBaseXZW", 607346947),
          ("rc2kPR48X1000BaseTX", 606208304),
          ("rc2kPR48x1000BaseGBRS", 607277360),
          ("rc2kPR48x1000BaseGTRS", 606241072),
          ("rc2kPRE12X10GBaseXL", 632504588),
          ("rc2kPRE34xXG", 632443170),
          ("rc2kPRE48x1000BaseGB", 632443184),
          ("rc2kPRE48x1000BaseGT", 631406896),
          ("rc2kRMON", 545128704))
    )


_Rc2kCardFrontType_Type.__name__ = "Integer32"
_Rc2kCardFrontType_Object = MibTableColumn
rc2kCardFrontType = _Rc2kCardFrontType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 2),
    _Rc2kCardFrontType_Type()
)
rc2kCardFrontType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontType.setStatus("current")


class _Rc2kCardFrontDescription_Type(DisplayString):
    """Custom type rc2kCardFrontDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardFrontDescription_Type.__name__ = "DisplayString"
_Rc2kCardFrontDescription_Object = MibTableColumn
rc2kCardFrontDescription = _Rc2kCardFrontDescription_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 3),
    _Rc2kCardFrontDescription_Type()
)
rc2kCardFrontDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontDescription.setStatus("current")


class _Rc2kCardFrontAdminStatus_Type(Integer32):
    """Custom type rc2kCardFrontAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("reset", 4),
          ("testing", 3),
          ("up", 1))
    )


_Rc2kCardFrontAdminStatus_Type.__name__ = "Integer32"
_Rc2kCardFrontAdminStatus_Object = MibTableColumn
rc2kCardFrontAdminStatus = _Rc2kCardFrontAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 4),
    _Rc2kCardFrontAdminStatus_Type()
)
rc2kCardFrontAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCardFrontAdminStatus.setStatus("current")


class _Rc2kCardFrontOperStatus_Type(Integer32):
    """Custom type rc2kCardFrontOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dormant", 5),
          ("down", 2),
          ("testing", 3),
          ("unknown", 4),
          ("up", 1))
    )


_Rc2kCardFrontOperStatus_Type.__name__ = "Integer32"
_Rc2kCardFrontOperStatus_Object = MibTableColumn
rc2kCardFrontOperStatus = _Rc2kCardFrontOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 5),
    _Rc2kCardFrontOperStatus_Type()
)
rc2kCardFrontOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontOperStatus.setStatus("current")


class _Rc2kCardFrontSerialNum_Type(DisplayString):
    """Custom type rc2kCardFrontSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardFrontSerialNum_Type.__name__ = "DisplayString"
_Rc2kCardFrontSerialNum_Object = MibTableColumn
rc2kCardFrontSerialNum = _Rc2kCardFrontSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 6),
    _Rc2kCardFrontSerialNum_Type()
)
rc2kCardFrontSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontSerialNum.setStatus("current")


class _Rc2kCardFrontHwVersion_Type(DisplayString):
    """Custom type rc2kCardFrontHwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardFrontHwVersion_Type.__name__ = "DisplayString"
_Rc2kCardFrontHwVersion_Object = MibTableColumn
rc2kCardFrontHwVersion = _Rc2kCardFrontHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 7),
    _Rc2kCardFrontHwVersion_Type()
)
rc2kCardFrontHwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontHwVersion.setStatus("current")


class _Rc2kCardFrontPartNumber_Type(DisplayString):
    """Custom type rc2kCardFrontPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardFrontPartNumber_Type.__name__ = "DisplayString"
_Rc2kCardFrontPartNumber_Object = MibTableColumn
rc2kCardFrontPartNumber = _Rc2kCardFrontPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 8),
    _Rc2kCardFrontPartNumber_Type()
)
rc2kCardFrontPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontPartNumber.setStatus("current")


class _Rc2kCardFrontDateCode_Type(DisplayString):
    """Custom type rc2kCardFrontDateCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardFrontDateCode_Type.__name__ = "DisplayString"
_Rc2kCardFrontDateCode_Object = MibTableColumn
rc2kCardFrontDateCode = _Rc2kCardFrontDateCode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 9),
    _Rc2kCardFrontDateCode_Type()
)
rc2kCardFrontDateCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontDateCode.setStatus("current")


class _Rc2kCardFrontDeviations_Type(DisplayString):
    """Custom type rc2kCardFrontDeviations based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardFrontDeviations_Type.__name__ = "DisplayString"
_Rc2kCardFrontDeviations_Object = MibTableColumn
rc2kCardFrontDeviations = _Rc2kCardFrontDeviations_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 10),
    _Rc2kCardFrontDeviations_Type()
)
rc2kCardFrontDeviations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontDeviations.setStatus("current")
_Rc2kCardFrontMacAddr_Type = MacAddress
_Rc2kCardFrontMacAddr_Object = MibTableColumn
rc2kCardFrontMacAddr = _Rc2kCardFrontMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 11),
    _Rc2kCardFrontMacAddr_Type()
)
rc2kCardFrontMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontMacAddr.setStatus("obsolete")


class _Rc2kCardBackType_Type(Integer32):
    """Custom type rc2kCardBackType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              536969472,
              538837248,
              546177280,
              546177282,
              546177283,
              546177286,
              546177288,
              605946112,
              613351682,
              613351690,
              613351861,
              613351863,
              613351871,
              630128906,
              630129087,
              807272704,
              1888354564)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("rc2kBFM0", 546177280),
          ("rc2kBFM2", 546177282),
          ("rc2kBFM3", 546177283),
          ("rc2kBFM4", 1888354564),
          ("rc2kBFM6", 546177286),
          ("rc2kBFM8", 546177288),
          ("rc2kBackplane", 536969472),
          ("rc2kDPM1", 613351861),
          ("rc2kDPM2", 613351682),
          ("rc2kDPM3", 613351863),
          ("rc2kEDPM2", 613351690),
          ("rc2kEDPM3", 613351871),
          ("rc2kEEDPM2", 630128906),
          ("rc2kEEDPM3", 630129087),
          ("rc2kFSFM", 605946112),
          ("rc2kMGSFM", 807272704),
          ("rc2kSFM", 538837248))
    )


_Rc2kCardBackType_Type.__name__ = "Integer32"
_Rc2kCardBackType_Object = MibTableColumn
rc2kCardBackType = _Rc2kCardBackType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 12),
    _Rc2kCardBackType_Type()
)
rc2kCardBackType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardBackType.setStatus("current")


class _Rc2kCardBackDescription_Type(DisplayString):
    """Custom type rc2kCardBackDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardBackDescription_Type.__name__ = "DisplayString"
_Rc2kCardBackDescription_Object = MibTableColumn
rc2kCardBackDescription = _Rc2kCardBackDescription_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 13),
    _Rc2kCardBackDescription_Type()
)
rc2kCardBackDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardBackDescription.setStatus("current")


class _Rc2kCardBackSerialNum_Type(DisplayString):
    """Custom type rc2kCardBackSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardBackSerialNum_Type.__name__ = "DisplayString"
_Rc2kCardBackSerialNum_Object = MibTableColumn
rc2kCardBackSerialNum = _Rc2kCardBackSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 14),
    _Rc2kCardBackSerialNum_Type()
)
rc2kCardBackSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardBackSerialNum.setStatus("current")


class _Rc2kCardBackHwVersion_Type(DisplayString):
    """Custom type rc2kCardBackHwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardBackHwVersion_Type.__name__ = "DisplayString"
_Rc2kCardBackHwVersion_Object = MibTableColumn
rc2kCardBackHwVersion = _Rc2kCardBackHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 15),
    _Rc2kCardBackHwVersion_Type()
)
rc2kCardBackHwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardBackHwVersion.setStatus("current")


class _Rc2kCardBackPartNumber_Type(DisplayString):
    """Custom type rc2kCardBackPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardBackPartNumber_Type.__name__ = "DisplayString"
_Rc2kCardBackPartNumber_Object = MibTableColumn
rc2kCardBackPartNumber = _Rc2kCardBackPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 16),
    _Rc2kCardBackPartNumber_Type()
)
rc2kCardBackPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardBackPartNumber.setStatus("current")


class _Rc2kCardBackDateCode_Type(DisplayString):
    """Custom type rc2kCardBackDateCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardBackDateCode_Type.__name__ = "DisplayString"
_Rc2kCardBackDateCode_Object = MibTableColumn
rc2kCardBackDateCode = _Rc2kCardBackDateCode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 17),
    _Rc2kCardBackDateCode_Type()
)
rc2kCardBackDateCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardBackDateCode.setStatus("current")


class _Rc2kCardBackDeviations_Type(DisplayString):
    """Custom type rc2kCardBackDeviations based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardBackDeviations_Type.__name__ = "DisplayString"
_Rc2kCardBackDeviations_Object = MibTableColumn
rc2kCardBackDeviations = _Rc2kCardBackDeviations_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 18),
    _Rc2kCardBackDeviations_Type()
)
rc2kCardBackDeviations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardBackDeviations.setStatus("current")


class _Rc2kCardPCMCIAType_Type(Integer32):
    """Custom type rc2kCardPCMCIAType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ataDisk", 4),
          ("ethernetCard", 3),
          ("modemCard", 2),
          ("none", 1))
    )


_Rc2kCardPCMCIAType_Type.__name__ = "Integer32"
_Rc2kCardPCMCIAType_Object = MibTableColumn
rc2kCardPCMCIAType = _Rc2kCardPCMCIAType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 19),
    _Rc2kCardPCMCIAType_Type()
)
rc2kCardPCMCIAType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardPCMCIAType.setStatus("current")


class _Rc2kCardPCMCIADescr_Type(DisplayString):
    """Custom type rc2kCardPCMCIADescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_Rc2kCardPCMCIADescr_Type.__name__ = "DisplayString"
_Rc2kCardPCMCIADescr_Object = MibTableColumn
rc2kCardPCMCIADescr = _Rc2kCardPCMCIADescr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 20),
    _Rc2kCardPCMCIADescr_Type()
)
rc2kCardPCMCIADescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardPCMCIADescr.setStatus("current")


class _Rc2kCardASICDescr_Type(DisplayString):
    """Custom type rc2kCardASICDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_Rc2kCardASICDescr_Type.__name__ = "DisplayString"
_Rc2kCardASICDescr_Object = MibTableColumn
rc2kCardASICDescr = _Rc2kCardASICDescr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 21),
    _Rc2kCardASICDescr_Type()
)
rc2kCardASICDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardASICDescr.setStatus("current")


class _Rc2kCardFrontMasterIO_Type(TruthValue):
    """Custom type rc2kCardFrontMasterIO based on TruthValue"""


_Rc2kCardFrontMasterIO_Object = MibTableColumn
rc2kCardFrontMasterIO = _Rc2kCardFrontMasterIO_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 22),
    _Rc2kCardFrontMasterIO_Type()
)
rc2kCardFrontMasterIO.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardFrontMasterIO.setStatus("current")


class _Rc2kCardSmltOnSingleCpSupported_Type(TruthValue):
    """Custom type rc2kCardSmltOnSingleCpSupported based on TruthValue"""


_Rc2kCardSmltOnSingleCpSupported_Object = MibTableColumn
rc2kCardSmltOnSingleCpSupported = _Rc2kCardSmltOnSingleCpSupported_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 23),
    _Rc2kCardSmltOnSingleCpSupported_Type()
)
rc2kCardSmltOnSingleCpSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardSmltOnSingleCpSupported.setStatus("current")


class _Rc2kCardMezzCard_Type(Integer32):
    """Custom type rc2kCardMezzCard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notpresent", 2),
          ("present", 3),
          ("running", 4),
          ("unsupported", 1))
    )


_Rc2kCardMezzCard_Type.__name__ = "Integer32"
_Rc2kCardMezzCard_Object = MibTableColumn
rc2kCardMezzCard = _Rc2kCardMezzCard_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 24),
    _Rc2kCardMezzCard_Type()
)
rc2kCardMezzCard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardMezzCard.setStatus("current")
_Rc2kCardMezzSerialNum_Type = OctetString
_Rc2kCardMezzSerialNum_Object = MibTableColumn
rc2kCardMezzSerialNum = _Rc2kCardMezzSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 26),
    _Rc2kCardMezzSerialNum_Type()
)
rc2kCardMezzSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardMezzSerialNum.setStatus("current")


class _Rc2kCardMezzHwVersion_Type(Integer32):
    """Custom type rc2kCardMezzHwVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("e0", 1),
          ("e1", 2),
          ("e2", 3),
          ("e3", 4),
          ("e4", 5),
          ("e5", 6),
          ("e6", 7),
          ("e7", 8),
          ("undefined", 0))
    )


_Rc2kCardMezzHwVersion_Type.__name__ = "Integer32"
_Rc2kCardMezzHwVersion_Object = MibTableColumn
rc2kCardMezzHwVersion = _Rc2kCardMezzHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 27),
    _Rc2kCardMezzHwVersion_Type()
)
rc2kCardMezzHwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardMezzHwVersion.setStatus("current")


class _Rc2kCardMezzPartNum_Type(Integer32):
    """Custom type rc2kCardMezzPartNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("p120615", 4),
          ("p120616", 1),
          ("p120617", 3),
          ("p120618", 2),
          ("p120672", 6),
          ("p120724", 5),
          ("p120851", 7),
          ("p120939", 8),
          ("undefined", 0))
    )


_Rc2kCardMezzPartNum_Type.__name__ = "Integer32"
_Rc2kCardMezzPartNum_Object = MibTableColumn
rc2kCardMezzPartNum = _Rc2kCardMezzPartNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 28),
    _Rc2kCardMezzPartNum_Type()
)
rc2kCardMezzPartNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardMezzPartNum.setStatus("current")


class _Rc2kCardSlotPriority_Type(Integer32):
    """Custom type rc2kCardSlotPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("high", 2),
          ("low", 3))
    )


_Rc2kCardSlotPriority_Type.__name__ = "Integer32"
_Rc2kCardSlotPriority_Object = MibTableColumn
rc2kCardSlotPriority = _Rc2kCardSlotPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 29),
    _Rc2kCardSlotPriority_Type()
)
rc2kCardSlotPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCardSlotPriority.setStatus("current")


class _Rc2kCardSlotOriginalPriority_Type(Integer32):
    """Custom type rc2kCardSlotOriginalPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("high", 2),
          ("low", 3))
    )


_Rc2kCardSlotOriginalPriority_Type.__name__ = "Integer32"
_Rc2kCardSlotOriginalPriority_Object = MibTableColumn
rc2kCardSlotOriginalPriority = _Rc2kCardSlotOriginalPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 30),
    _Rc2kCardSlotOriginalPriority_Type()
)
rc2kCardSlotOriginalPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardSlotOriginalPriority.setStatus("current")


class _Rc2kCardModuleSerialNum_Type(DisplayString):
    """Custom type rc2kCardModuleSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardModuleSerialNum_Type.__name__ = "DisplayString"
_Rc2kCardModuleSerialNum_Object = MibTableColumn
rc2kCardModuleSerialNum = _Rc2kCardModuleSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 33),
    _Rc2kCardModuleSerialNum_Type()
)
rc2kCardModuleSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardModuleSerialNum.setStatus("current")


class _Rc2kCardModulePartNumber_Type(DisplayString):
    """Custom type rc2kCardModulePartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardModulePartNumber_Type.__name__ = "DisplayString"
_Rc2kCardModulePartNumber_Object = MibTableColumn
rc2kCardModulePartNumber = _Rc2kCardModulePartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 34),
    _Rc2kCardModulePartNumber_Type()
)
rc2kCardModulePartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardModulePartNumber.setStatus("current")


class _Rc2kCardModuleAssemblyDate_Type(DisplayString):
    """Custom type rc2kCardModuleAssemblyDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kCardModuleAssemblyDate_Type.__name__ = "DisplayString"
_Rc2kCardModuleAssemblyDate_Object = MibTableColumn
rc2kCardModuleAssemblyDate = _Rc2kCardModuleAssemblyDate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 6, 1, 35),
    _Rc2kCardModuleAssemblyDate_Type()
)
rc2kCardModuleAssemblyDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCardModuleAssemblyDate.setStatus("current")
_Rc2kCopyFile_ObjectIdentity = ObjectIdentity
rc2kCopyFile = _Rc2kCopyFile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 7)
)


class _Rc2kCopyFileSource_Type(OctetString):
    """Custom type rc2kCopyFileSource based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_Rc2kCopyFileSource_Type.__name__ = "OctetString"
_Rc2kCopyFileSource_Object = MibScalar
rc2kCopyFileSource = _Rc2kCopyFileSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 7, 1),
    _Rc2kCopyFileSource_Type()
)
rc2kCopyFileSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCopyFileSource.setStatus("current")


class _Rc2kCopyFileDestination_Type(OctetString):
    """Custom type rc2kCopyFileDestination based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_Rc2kCopyFileDestination_Type.__name__ = "OctetString"
_Rc2kCopyFileDestination_Object = MibScalar
rc2kCopyFileDestination = _Rc2kCopyFileDestination_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 7, 2),
    _Rc2kCopyFileDestination_Type()
)
rc2kCopyFileDestination.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCopyFileDestination.setStatus("current")


class _Rc2kCopyFileAction_Type(Integer32):
    """Custom type rc2kCopyFileAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("start", 2))
    )


_Rc2kCopyFileAction_Type.__name__ = "Integer32"
_Rc2kCopyFileAction_Object = MibScalar
rc2kCopyFileAction = _Rc2kCopyFileAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 7, 3),
    _Rc2kCopyFileAction_Type()
)
rc2kCopyFileAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCopyFileAction.setStatus("current")


class _Rc2kCopyFileResult_Type(Integer32):
    """Custom type rc2kCopyFileResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("fail", 4),
          ("fileNotFound", 9),
          ("inProgress", 2),
          ("invalidDestination", 6),
          ("invalidSource", 5),
          ("none", 1),
          ("outOfMemory", 7),
          ("outOfSpace", 8),
          ("success", 3))
    )


_Rc2kCopyFileResult_Type.__name__ = "Integer32"
_Rc2kCopyFileResult_Object = MibScalar
rc2kCopyFileResult = _Rc2kCopyFileResult_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 7, 4),
    _Rc2kCopyFileResult_Type()
)
rc2kCopyFileResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCopyFileResult.setStatus("current")
_Rc2kQos_ObjectIdentity = ObjectIdentity
rc2kQos = _Rc2kQos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8)
)
_Rc2kQosQosTable_Object = MibTable
rc2kQosQosTable = _Rc2kQosQosTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1)
)
if mibBuilder.loadTexts:
    rc2kQosQosTable.setStatus("current")
_Rc2kQosQosEntry_Object = MibTableRow
rc2kQosQosEntry = _Rc2kQosQosEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1)
)
rc2kQosQosEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kQosQosRow"),
)
if mibBuilder.loadTexts:
    rc2kQosQosEntry.setStatus("current")


class _Rc2kQosQosRow_Type(Integer32):
    """Custom type rc2kQosQosRow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Rc2kQosQosRow_Type.__name__ = "Integer32"
_Rc2kQosQosRow_Object = MibTableColumn
rc2kQosQosRow = _Rc2kQosQosRow_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 1),
    _Rc2kQosQosRow_Type()
)
rc2kQosQosRow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosQosRow.setStatus("current")


class _Rc2kQosQosLevel_Type(Integer32):
    """Custom type rc2kQosQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosQosLevel_Type.__name__ = "Integer32"
_Rc2kQosQosLevel_Object = MibTableColumn
rc2kQosQosLevel = _Rc2kQosQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 2),
    _Rc2kQosQosLevel_Type()
)
rc2kQosQosLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosQosLevel.setStatus("current")


class _Rc2kQosQosName_Type(DisplayString):
    """Custom type rc2kQosQosName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_Rc2kQosQosName_Type.__name__ = "DisplayString"
_Rc2kQosQosName_Object = MibTableColumn
rc2kQosQosName = _Rc2kQosQosName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 3),
    _Rc2kQosQosName_Type()
)
rc2kQosQosName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosQosName.setStatus("current")
_Rc2kQosQosAdminWeight_Type = Integer32
_Rc2kQosQosAdminWeight_Object = MibTableColumn
rc2kQosQosAdminWeight = _Rc2kQosQosAdminWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 4),
    _Rc2kQosQosAdminWeight_Type()
)
rc2kQosQosAdminWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosQosAdminWeight.setStatus("current")
_Rc2kQosQosOperWeight_Type = Integer32
_Rc2kQosQosOperWeight_Object = MibTableColumn
rc2kQosQosOperWeight = _Rc2kQosQosOperWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 5),
    _Rc2kQosQosOperWeight_Type()
)
rc2kQosQosOperWeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosQosOperWeight.setStatus("current")


class _Rc2kQosOctapidMode_Type(Integer32):
    """Custom type rc2kQosOctapidMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mode100", 2),
          ("modeSingle", 1))
    )


_Rc2kQosOctapidMode_Type.__name__ = "Integer32"
_Rc2kQosOctapidMode_Object = MibTableColumn
rc2kQosOctapidMode = _Rc2kQosOctapidMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 6),
    _Rc2kQosOctapidMode_Type()
)
rc2kQosOctapidMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosOctapidMode.setStatus("deprecated")


class _Rc2kQosQosAdminThreshold_Type(Integer32):
    """Custom type rc2kQosQosAdminThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("allSdram", 8),
          ("fiveEight", 5),
          ("halfSdram", 4),
          ("none", 0),
          ("notpresent", 9),
          ("oneEight", 1),
          ("oneQuarter", 2),
          ("sevenEights", 7),
          ("threeEight", 3),
          ("threeQuarter", 6))
    )


_Rc2kQosQosAdminThreshold_Type.__name__ = "Integer32"
_Rc2kQosQosAdminThreshold_Object = MibTableColumn
rc2kQosQosAdminThreshold = _Rc2kQosQosAdminThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 7),
    _Rc2kQosQosAdminThreshold_Type()
)
rc2kQosQosAdminThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosQosAdminThreshold.setStatus("current")


class _Rc2kQosQosOperThreshold_Type(Integer32):
    """Custom type rc2kQosQosOperThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("allSdram", 8),
          ("fiveEight", 5),
          ("halfSdram", 4),
          ("none", 0),
          ("notpresent", 9),
          ("oneEight", 1),
          ("oneQuarter", 2),
          ("sevenEights", 7),
          ("threeEight", 3),
          ("threeQuarter", 6))
    )


_Rc2kQosQosOperThreshold_Type.__name__ = "Integer32"
_Rc2kQosQosOperThreshold_Object = MibTableColumn
rc2kQosQosOperThreshold = _Rc2kQosQosOperThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 8),
    _Rc2kQosQosOperThreshold_Type()
)
rc2kQosQosOperThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosQosOperThreshold.setStatus("current")


class _Rc2kQosPidMode_Type(Integer32):
    """Custom type rc2kQosPidMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mode100", 2),
          ("modeSingle", 1))
    )


_Rc2kQosPidMode_Type.__name__ = "Integer32"
_Rc2kQosPidMode_Object = MibTableColumn
rc2kQosPidMode = _Rc2kQosPidMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 1, 1, 9),
    _Rc2kQosPidMode_Type()
)
rc2kQosPidMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosPidMode.setStatus("current")
_Rc2kQosIngressTagToQosTable_Object = MibTable
rc2kQosIngressTagToQosTable = _Rc2kQosIngressTagToQosTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 2)
)
if mibBuilder.loadTexts:
    rc2kQosIngressTagToQosTable.setStatus("current")
_Rc2kQosIngressTagToQosEntry_Object = MibTableRow
rc2kQosIngressTagToQosEntry = _Rc2kQosIngressTagToQosEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 2, 1)
)
rc2kQosIngressTagToQosEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kQosIngressTagToQosRow"),
)
if mibBuilder.loadTexts:
    rc2kQosIngressTagToQosEntry.setStatus("current")


class _Rc2kQosIngressTagToQosRow_Type(Integer32):
    """Custom type rc2kQosIngressTagToQosRow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Rc2kQosIngressTagToQosRow_Type.__name__ = "Integer32"
_Rc2kQosIngressTagToQosRow_Object = MibTableColumn
rc2kQosIngressTagToQosRow = _Rc2kQosIngressTagToQosRow_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 2, 1, 1),
    _Rc2kQosIngressTagToQosRow_Type()
)
rc2kQosIngressTagToQosRow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosIngressTagToQosRow.setStatus("current")


class _Rc2kQosIngressTagToQosInIeee8021P_Type(Integer32):
    """Custom type rc2kQosIngressTagToQosInIeee8021P based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosIngressTagToQosInIeee8021P_Type.__name__ = "Integer32"
_Rc2kQosIngressTagToQosInIeee8021P_Object = MibTableColumn
rc2kQosIngressTagToQosInIeee8021P = _Rc2kQosIngressTagToQosInIeee8021P_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 2, 1, 2),
    _Rc2kQosIngressTagToQosInIeee8021P_Type()
)
rc2kQosIngressTagToQosInIeee8021P.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosIngressTagToQosInIeee8021P.setStatus("current")


class _Rc2kQosIngressTagToQosQosLevel_Type(Integer32):
    """Custom type rc2kQosIngressTagToQosQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosIngressTagToQosQosLevel_Type.__name__ = "Integer32"
_Rc2kQosIngressTagToQosQosLevel_Object = MibTableColumn
rc2kQosIngressTagToQosQosLevel = _Rc2kQosIngressTagToQosQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 2, 1, 3),
    _Rc2kQosIngressTagToQosQosLevel_Type()
)
rc2kQosIngressTagToQosQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosIngressTagToQosQosLevel.setStatus("current")
_Rc2kQosIngressDsFieldToQosTable_Object = MibTable
rc2kQosIngressDsFieldToQosTable = _Rc2kQosIngressDsFieldToQosTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 3)
)
if mibBuilder.loadTexts:
    rc2kQosIngressDsFieldToQosTable.setStatus("deprecated")
_Rc2kQosIngressDsFieldToQosEntry_Object = MibTableRow
rc2kQosIngressDsFieldToQosEntry = _Rc2kQosIngressDsFieldToQosEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 3, 1)
)
rc2kQosIngressDsFieldToQosEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kQosIngressDsFieldToQosRow"),
)
if mibBuilder.loadTexts:
    rc2kQosIngressDsFieldToQosEntry.setStatus("deprecated")


class _Rc2kQosIngressDsFieldToQosRow_Type(Integer32):
    """Custom type rc2kQosIngressDsFieldToQosRow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_Rc2kQosIngressDsFieldToQosRow_Type.__name__ = "Integer32"
_Rc2kQosIngressDsFieldToQosRow_Object = MibTableColumn
rc2kQosIngressDsFieldToQosRow = _Rc2kQosIngressDsFieldToQosRow_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 3, 1, 1),
    _Rc2kQosIngressDsFieldToQosRow_Type()
)
rc2kQosIngressDsFieldToQosRow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosIngressDsFieldToQosRow.setStatus("deprecated")


class _Rc2kQosIngressDsFieldToQosInDsField_Type(Integer32):
    """Custom type rc2kQosIngressDsFieldToQosInDsField based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Rc2kQosIngressDsFieldToQosInDsField_Type.__name__ = "Integer32"
_Rc2kQosIngressDsFieldToQosInDsField_Object = MibTableColumn
rc2kQosIngressDsFieldToQosInDsField = _Rc2kQosIngressDsFieldToQosInDsField_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 3, 1, 2),
    _Rc2kQosIngressDsFieldToQosInDsField_Type()
)
rc2kQosIngressDsFieldToQosInDsField.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosIngressDsFieldToQosInDsField.setStatus("deprecated")


class _Rc2kQosIngressDsFieldToQosQosLevel_Type(Integer32):
    """Custom type rc2kQosIngressDsFieldToQosQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosIngressDsFieldToQosQosLevel_Type.__name__ = "Integer32"
_Rc2kQosIngressDsFieldToQosQosLevel_Object = MibTableColumn
rc2kQosIngressDsFieldToQosQosLevel = _Rc2kQosIngressDsFieldToQosQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 3, 1, 3),
    _Rc2kQosIngressDsFieldToQosQosLevel_Type()
)
rc2kQosIngressDsFieldToQosQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosIngressDsFieldToQosQosLevel.setStatus("deprecated")
_Rc2kQosEgressQosToTagTable_Object = MibTable
rc2kQosEgressQosToTagTable = _Rc2kQosEgressQosToTagTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 4)
)
if mibBuilder.loadTexts:
    rc2kQosEgressQosToTagTable.setStatus("current")
_Rc2kQosEgressQosToTagEntry_Object = MibTableRow
rc2kQosEgressQosToTagEntry = _Rc2kQosEgressQosToTagEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 4, 1)
)
rc2kQosEgressQosToTagEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kQosEgressQosToTagRow"),
)
if mibBuilder.loadTexts:
    rc2kQosEgressQosToTagEntry.setStatus("current")


class _Rc2kQosEgressQosToTagRow_Type(Integer32):
    """Custom type rc2kQosEgressQosToTagRow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Rc2kQosEgressQosToTagRow_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToTagRow_Object = MibTableColumn
rc2kQosEgressQosToTagRow = _Rc2kQosEgressQosToTagRow_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 4, 1, 1),
    _Rc2kQosEgressQosToTagRow_Type()
)
rc2kQosEgressQosToTagRow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToTagRow.setStatus("current")


class _Rc2kQosEgressQosToTagQosLevel_Type(Integer32):
    """Custom type rc2kQosEgressQosToTagQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosEgressQosToTagQosLevel_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToTagQosLevel_Object = MibTableColumn
rc2kQosEgressQosToTagQosLevel = _Rc2kQosEgressQosToTagQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 4, 1, 2),
    _Rc2kQosEgressQosToTagQosLevel_Type()
)
rc2kQosEgressQosToTagQosLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToTagQosLevel.setStatus("current")


class _Rc2kQosEgressQosToTagOutIeee8021P_Type(Integer32):
    """Custom type rc2kQosEgressQosToTagOutIeee8021P based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosEgressQosToTagOutIeee8021P_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToTagOutIeee8021P_Object = MibTableColumn
rc2kQosEgressQosToTagOutIeee8021P = _Rc2kQosEgressQosToTagOutIeee8021P_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 4, 1, 3),
    _Rc2kQosEgressQosToTagOutIeee8021P_Type()
)
rc2kQosEgressQosToTagOutIeee8021P.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToTagOutIeee8021P.setStatus("current")
_Rc2kQosEgressQosToDsFieldTable_Object = MibTable
rc2kQosEgressQosToDsFieldTable = _Rc2kQosEgressQosToDsFieldTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 5)
)
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDsFieldTable.setStatus("deprecated")
_Rc2kQosEgressQosToDsFieldEntry_Object = MibTableRow
rc2kQosEgressQosToDsFieldEntry = _Rc2kQosEgressQosToDsFieldEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 5, 1)
)
rc2kQosEgressQosToDsFieldEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kQosEgressQosToDsFieldRow"),
)
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDsFieldEntry.setStatus("deprecated")


class _Rc2kQosEgressQosToDsFieldRow_Type(Integer32):
    """Custom type rc2kQosEgressQosToDsFieldRow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Rc2kQosEgressQosToDsFieldRow_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToDsFieldRow_Object = MibTableColumn
rc2kQosEgressQosToDsFieldRow = _Rc2kQosEgressQosToDsFieldRow_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 5, 1, 1),
    _Rc2kQosEgressQosToDsFieldRow_Type()
)
rc2kQosEgressQosToDsFieldRow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDsFieldRow.setStatus("deprecated")


class _Rc2kQosEgressQosToDsFieldQosLevel_Type(Integer32):
    """Custom type rc2kQosEgressQosToDsFieldQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosEgressQosToDsFieldQosLevel_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToDsFieldQosLevel_Object = MibTableColumn
rc2kQosEgressQosToDsFieldQosLevel = _Rc2kQosEgressQosToDsFieldQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 5, 1, 2),
    _Rc2kQosEgressQosToDsFieldQosLevel_Type()
)
rc2kQosEgressQosToDsFieldQosLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDsFieldQosLevel.setStatus("deprecated")


class _Rc2kQosEgressQosToDsFieldOutDsField_Type(Integer32):
    """Custom type rc2kQosEgressQosToDsFieldOutDsField based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Rc2kQosEgressQosToDsFieldOutDsField_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToDsFieldOutDsField_Object = MibTableColumn
rc2kQosEgressQosToDsFieldOutDsField = _Rc2kQosEgressQosToDsFieldOutDsField_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 5, 1, 3),
    _Rc2kQosEgressQosToDsFieldOutDsField_Type()
)
rc2kQosEgressQosToDsFieldOutDsField.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDsFieldOutDsField.setStatus("deprecated")
_Rc2kQosTrafficProfileTable_Object = MibTable
rc2kQosTrafficProfileTable = _Rc2kQosTrafficProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6)
)
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileTable.setStatus("current")
_Rc2kQosTrafficProfileEntry_Object = MibTableRow
rc2kQosTrafficProfileEntry = _Rc2kQosTrafficProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1)
)
rc2kQosTrafficProfileEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kQosTrafficProfileId"),
)
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileEntry.setStatus("current")


class _Rc2kQosTrafficProfileId_Type(Integer32):
    """Custom type rc2kQosTrafficProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_Rc2kQosTrafficProfileId_Type.__name__ = "Integer32"
_Rc2kQosTrafficProfileId_Object = MibTableColumn
rc2kQosTrafficProfileId = _Rc2kQosTrafficProfileId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 1),
    _Rc2kQosTrafficProfileId_Type()
)
rc2kQosTrafficProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileId.setStatus("current")


class _Rc2kQosTrafficProfileName_Type(DisplayString):
    """Custom type rc2kQosTrafficProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_Rc2kQosTrafficProfileName_Type.__name__ = "DisplayString"
_Rc2kQosTrafficProfileName_Object = MibTableColumn
rc2kQosTrafficProfileName = _Rc2kQosTrafficProfileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 2),
    _Rc2kQosTrafficProfileName_Type()
)
rc2kQosTrafficProfileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileName.setStatus("current")


class _Rc2kQosTrafficProfileEnable_Type(TruthValue):
    """Custom type rc2kQosTrafficProfileEnable based on TruthValue"""


_Rc2kQosTrafficProfileEnable_Object = MibTableColumn
rc2kQosTrafficProfileEnable = _Rc2kQosTrafficProfileEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 3),
    _Rc2kQosTrafficProfileEnable_Type()
)
rc2kQosTrafficProfileEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileEnable.setStatus("current")


class _Rc2kQosTrafficProfileTranslateDscpEnable_Type(TruthValue):
    """Custom type rc2kQosTrafficProfileTranslateDscpEnable based on TruthValue"""


_Rc2kQosTrafficProfileTranslateDscpEnable_Object = MibTableColumn
rc2kQosTrafficProfileTranslateDscpEnable = _Rc2kQosTrafficProfileTranslateDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 4),
    _Rc2kQosTrafficProfileTranslateDscpEnable_Type()
)
rc2kQosTrafficProfileTranslateDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileTranslateDscpEnable.setStatus("current")


class _Rc2kQosTrafficProfileInProfileDscp_Type(DisplayString):
    """Custom type rc2kQosTrafficProfileInProfileDscp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_Rc2kQosTrafficProfileInProfileDscp_Type.__name__ = "DisplayString"
_Rc2kQosTrafficProfileInProfileDscp_Object = MibTableColumn
rc2kQosTrafficProfileInProfileDscp = _Rc2kQosTrafficProfileInProfileDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 5),
    _Rc2kQosTrafficProfileInProfileDscp_Type()
)
rc2kQosTrafficProfileInProfileDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileInProfileDscp.setStatus("current")


class _Rc2kQosTrafficProfileOutProfileDscp_Type(DisplayString):
    """Custom type rc2kQosTrafficProfileOutProfileDscp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_Rc2kQosTrafficProfileOutProfileDscp_Type.__name__ = "DisplayString"
_Rc2kQosTrafficProfileOutProfileDscp_Object = MibTableColumn
rc2kQosTrafficProfileOutProfileDscp = _Rc2kQosTrafficProfileOutProfileDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 6),
    _Rc2kQosTrafficProfileOutProfileDscp_Type()
)
rc2kQosTrafficProfileOutProfileDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileOutProfileDscp.setStatus("current")


class _Rc2kQosTrafficProfileDiscardEnable_Type(TruthValue):
    """Custom type rc2kQosTrafficProfileDiscardEnable based on TruthValue"""


_Rc2kQosTrafficProfileDiscardEnable_Object = MibTableColumn
rc2kQosTrafficProfileDiscardEnable = _Rc2kQosTrafficProfileDiscardEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 7),
    _Rc2kQosTrafficProfileDiscardEnable_Type()
)
rc2kQosTrafficProfileDiscardEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileDiscardEnable.setStatus("current")
_Rc2kQosTrafficProfileAverageRate_Type = Integer32
_Rc2kQosTrafficProfileAverageRate_Object = MibTableColumn
rc2kQosTrafficProfileAverageRate = _Rc2kQosTrafficProfileAverageRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 8),
    _Rc2kQosTrafficProfileAverageRate_Type()
)
rc2kQosTrafficProfileAverageRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileAverageRate.setStatus("current")
_Rc2kQosTrafficProfilePeakRate_Type = Integer32
_Rc2kQosTrafficProfilePeakRate_Object = MibTableColumn
rc2kQosTrafficProfilePeakRate = _Rc2kQosTrafficProfilePeakRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 9),
    _Rc2kQosTrafficProfilePeakRate_Type()
)
rc2kQosTrafficProfilePeakRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfilePeakRate.setStatus("deprecated")
_Rc2kQosTrafficProfileRowStatus_Type = RowStatus
_Rc2kQosTrafficProfileRowStatus_Object = MibTableColumn
rc2kQosTrafficProfileRowStatus = _Rc2kQosTrafficProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 6, 1, 10),
    _Rc2kQosTrafficProfileRowStatus_Type()
)
rc2kQosTrafficProfileRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosTrafficProfileRowStatus.setStatus("current")
_Rc2kQosIngressDscpToQosTable_Object = MibTable
rc2kQosIngressDscpToQosTable = _Rc2kQosIngressDscpToQosTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 7)
)
if mibBuilder.loadTexts:
    rc2kQosIngressDscpToQosTable.setStatus("current")
_Rc2kQosIngressDscpToQosEntry_Object = MibTableRow
rc2kQosIngressDscpToQosEntry = _Rc2kQosIngressDscpToQosEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 7, 1)
)
rc2kQosIngressDscpToQosEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kQosIngressDscpToQosRow"),
)
if mibBuilder.loadTexts:
    rc2kQosIngressDscpToQosEntry.setStatus("current")


class _Rc2kQosIngressDscpToQosRow_Type(Integer32):
    """Custom type rc2kQosIngressDscpToQosRow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_Rc2kQosIngressDscpToQosRow_Type.__name__ = "Integer32"
_Rc2kQosIngressDscpToQosRow_Object = MibTableColumn
rc2kQosIngressDscpToQosRow = _Rc2kQosIngressDscpToQosRow_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 7, 1, 1),
    _Rc2kQosIngressDscpToQosRow_Type()
)
rc2kQosIngressDscpToQosRow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosIngressDscpToQosRow.setStatus("current")


class _Rc2kQosIngressDscpToQosInDscp_Type(Integer32):
    """Custom type rc2kQosIngressDscpToQosInDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Rc2kQosIngressDscpToQosInDscp_Type.__name__ = "Integer32"
_Rc2kQosIngressDscpToQosInDscp_Object = MibTableColumn
rc2kQosIngressDscpToQosInDscp = _Rc2kQosIngressDscpToQosInDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 7, 1, 2),
    _Rc2kQosIngressDscpToQosInDscp_Type()
)
rc2kQosIngressDscpToQosInDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosIngressDscpToQosInDscp.setStatus("current")


class _Rc2kQosIngressDscpToQosInDscpBinaryFormat_Type(DisplayString):
    """Custom type rc2kQosIngressDscpToQosInDscpBinaryFormat based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_Rc2kQosIngressDscpToQosInDscpBinaryFormat_Type.__name__ = "DisplayString"
_Rc2kQosIngressDscpToQosInDscpBinaryFormat_Object = MibTableColumn
rc2kQosIngressDscpToQosInDscpBinaryFormat = _Rc2kQosIngressDscpToQosInDscpBinaryFormat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 7, 1, 3),
    _Rc2kQosIngressDscpToQosInDscpBinaryFormat_Type()
)
rc2kQosIngressDscpToQosInDscpBinaryFormat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosIngressDscpToQosInDscpBinaryFormat.setStatus("current")


class _Rc2kQosIngressDscpToQosQosLevel_Type(Integer32):
    """Custom type rc2kQosIngressDscpToQosQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosIngressDscpToQosQosLevel_Type.__name__ = "Integer32"
_Rc2kQosIngressDscpToQosQosLevel_Object = MibTableColumn
rc2kQosIngressDscpToQosQosLevel = _Rc2kQosIngressDscpToQosQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 7, 1, 4),
    _Rc2kQosIngressDscpToQosQosLevel_Type()
)
rc2kQosIngressDscpToQosQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosIngressDscpToQosQosLevel.setStatus("current")
_Rc2kQosEgressQosToDscpTable_Object = MibTable
rc2kQosEgressQosToDscpTable = _Rc2kQosEgressQosToDscpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 8)
)
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDscpTable.setStatus("current")
_Rc2kQosEgressQosToDscpEntry_Object = MibTableRow
rc2kQosEgressQosToDscpEntry = _Rc2kQosEgressQosToDscpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 8, 1)
)
rc2kQosEgressQosToDscpEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kQosEgressQosToDscpRow"),
)
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDscpEntry.setStatus("current")


class _Rc2kQosEgressQosToDscpRow_Type(Integer32):
    """Custom type rc2kQosEgressQosToDscpRow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Rc2kQosEgressQosToDscpRow_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToDscpRow_Object = MibTableColumn
rc2kQosEgressQosToDscpRow = _Rc2kQosEgressQosToDscpRow_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 8, 1, 1),
    _Rc2kQosEgressQosToDscpRow_Type()
)
rc2kQosEgressQosToDscpRow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDscpRow.setStatus("current")


class _Rc2kQosEgressQosToDscpQosLevel_Type(Integer32):
    """Custom type rc2kQosEgressQosToDscpQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Rc2kQosEgressQosToDscpQosLevel_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToDscpQosLevel_Object = MibTableColumn
rc2kQosEgressQosToDscpQosLevel = _Rc2kQosEgressQosToDscpQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 8, 1, 2),
    _Rc2kQosEgressQosToDscpQosLevel_Type()
)
rc2kQosEgressQosToDscpQosLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDscpQosLevel.setStatus("current")


class _Rc2kQosEgressQosToDscpOutDscp_Type(Integer32):
    """Custom type rc2kQosEgressQosToDscpOutDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Rc2kQosEgressQosToDscpOutDscp_Type.__name__ = "Integer32"
_Rc2kQosEgressQosToDscpOutDscp_Object = MibTableColumn
rc2kQosEgressQosToDscpOutDscp = _Rc2kQosEgressQosToDscpOutDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 8, 1, 3),
    _Rc2kQosEgressQosToDscpOutDscp_Type()
)
rc2kQosEgressQosToDscpOutDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDscpOutDscp.setStatus("current")


class _Rc2kQosEgressQosToDscpOutDscpBinaryFormat_Type(DisplayString):
    """Custom type rc2kQosEgressQosToDscpOutDscpBinaryFormat based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_Rc2kQosEgressQosToDscpOutDscpBinaryFormat_Type.__name__ = "DisplayString"
_Rc2kQosEgressQosToDscpOutDscpBinaryFormat_Object = MibTableColumn
rc2kQosEgressQosToDscpOutDscpBinaryFormat = _Rc2kQosEgressQosToDscpOutDscpBinaryFormat_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 8, 8, 1, 4),
    _Rc2kQosEgressQosToDscpOutDscpBinaryFormat_Type()
)
rc2kQosEgressQosToDscpOutDscpBinaryFormat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kQosEgressQosToDscpOutDscpBinaryFormat.setStatus("current")
_Rc2kAtm_ObjectIdentity = ObjectIdentity
rc2kAtm = _Rc2kAtm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9)
)
_Rc2kAtmGlobal_ObjectIdentity = ObjectIdentity
rc2kAtmGlobal = _Rc2kAtmGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 1)
)
_Rc2kAtmElanStatsClearAll_Type = TruthValue
_Rc2kAtmElanStatsClearAll_Object = MibScalar
rc2kAtmElanStatsClearAll = _Rc2kAtmElanStatsClearAll_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 1, 1),
    _Rc2kAtmElanStatsClearAll_Type()
)
rc2kAtmElanStatsClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmElanStatsClearAll.setStatus("current")
_Rc2kAtmPortTable_Object = MibTable
rc2kAtmPortTable = _Rc2kAtmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2)
)
if mibBuilder.loadTexts:
    rc2kAtmPortTable.setStatus("current")
_Rc2kAtmPortEntry_Object = MibTableRow
rc2kAtmPortEntry = _Rc2kAtmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1)
)
rc2kAtmPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kAtmPortIfIndex"),
)
if mibBuilder.loadTexts:
    rc2kAtmPortEntry.setStatus("current")
_Rc2kAtmPortIfIndex_Type = InterfaceIndex
_Rc2kAtmPortIfIndex_Object = MibTableColumn
rc2kAtmPortIfIndex = _Rc2kAtmPortIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 1),
    _Rc2kAtmPortIfIndex_Type()
)
rc2kAtmPortIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortIfIndex.setStatus("current")


class _Rc2kAtmPortNumVpiBits_Type(Integer32):
    """Custom type rc2kAtmPortNumVpiBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Rc2kAtmPortNumVpiBits_Type.__name__ = "Integer32"
_Rc2kAtmPortNumVpiBits_Object = MibTableColumn
rc2kAtmPortNumVpiBits = _Rc2kAtmPortNumVpiBits_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 2),
    _Rc2kAtmPortNumVpiBits_Type()
)
rc2kAtmPortNumVpiBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPortNumVpiBits.setStatus("current")


class _Rc2kAtmPortNumVciBits_Type(Integer32):
    """Custom type rc2kAtmPortNumVciBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_Rc2kAtmPortNumVciBits_Type.__name__ = "Integer32"
_Rc2kAtmPortNumVciBits_Object = MibTableColumn
rc2kAtmPortNumVciBits = _Rc2kAtmPortNumVciBits_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 3),
    _Rc2kAtmPortNumVciBits_Type()
)
rc2kAtmPortNumVciBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPortNumVciBits.setStatus("current")


class _Rc2kAtmPortMediaType_Type(Integer32):
    """Custom type rc2kAtmPortMediaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ds3", 3),
          ("mmf", 2),
          ("smf", 1))
    )


_Rc2kAtmPortMediaType_Type.__name__ = "Integer32"
_Rc2kAtmPortMediaType_Object = MibTableColumn
rc2kAtmPortMediaType = _Rc2kAtmPortMediaType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 4),
    _Rc2kAtmPortMediaType_Type()
)
rc2kAtmPortMediaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortMediaType.setStatus("current")


class _Rc2kAtmPortScrambleEnable_Type(TruthValue):
    """Custom type rc2kAtmPortScrambleEnable based on TruthValue"""


_Rc2kAtmPortScrambleEnable_Object = MibTableColumn
rc2kAtmPortScrambleEnable = _Rc2kAtmPortScrambleEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 5),
    _Rc2kAtmPortScrambleEnable_Type()
)
rc2kAtmPortScrambleEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPortScrambleEnable.setStatus("current")


class _Rc2kAtmPortFramingMode_Type(Integer32):
    """Custom type rc2kAtmPortFramingMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ds3CbitAdm", 3),
          ("ds3CbitPlcp", 4),
          ("ds3M23Adm", 5),
          ("ds3M23Plcp", 6),
          ("sdh", 2),
          ("sonet", 1))
    )


_Rc2kAtmPortFramingMode_Type.__name__ = "Integer32"
_Rc2kAtmPortFramingMode_Object = MibTableColumn
rc2kAtmPortFramingMode = _Rc2kAtmPortFramingMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 6),
    _Rc2kAtmPortFramingMode_Type()
)
rc2kAtmPortFramingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPortFramingMode.setStatus("current")


class _Rc2kAtmPortClockSource_Type(Integer32):
    """Custom type rc2kAtmPortClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("freeRunning", 2),
          ("loopTimed", 1))
    )


_Rc2kAtmPortClockSource_Type.__name__ = "Integer32"
_Rc2kAtmPortClockSource_Object = MibTableColumn
rc2kAtmPortClockSource = _Rc2kAtmPortClockSource_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 7),
    _Rc2kAtmPortClockSource_Type()
)
rc2kAtmPortClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPortClockSource.setStatus("current")


class _Rc2kAtmPortLineSpeed_Type(Integer32):
    """Custom type rc2kAtmPortLineSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ds3", 3),
          ("oc12c", 2),
          ("oc3c", 1))
    )


_Rc2kAtmPortLineSpeed_Type.__name__ = "Integer32"
_Rc2kAtmPortLineSpeed_Object = MibTableColumn
rc2kAtmPortLineSpeed = _Rc2kAtmPortLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 8),
    _Rc2kAtmPortLineSpeed_Type()
)
rc2kAtmPortLineSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortLineSpeed.setStatus("current")


class _Rc2kAtmPortLoopBackMode_Type(Integer32):
    """Custom type rc2kAtmPortLoopBackMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ds3DiagLoop", 5),
          ("ds3LineLoop", 6),
          ("ds3PayloadLoop", 4),
          ("external", 3),
          ("internal", 2),
          ("off", 1))
    )


_Rc2kAtmPortLoopBackMode_Type.__name__ = "Integer32"
_Rc2kAtmPortLoopBackMode_Object = MibTableColumn
rc2kAtmPortLoopBackMode = _Rc2kAtmPortLoopBackMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 9),
    _Rc2kAtmPortLoopBackMode_Type()
)
rc2kAtmPortLoopBackMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPortLoopBackMode.setStatus("current")
_Rc2kAtmPortMacAddress_Type = MacAddress
_Rc2kAtmPortMacAddress_Object = MibTableColumn
rc2kAtmPortMacAddress = _Rc2kAtmPortMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 2, 1, 10),
    _Rc2kAtmPortMacAddress_Type()
)
rc2kAtmPortMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortMacAddress.setStatus("current")
_Rc2kAtmPvcTable_Object = MibTable
rc2kAtmPvcTable = _Rc2kAtmPvcTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3)
)
if mibBuilder.loadTexts:
    rc2kAtmPvcTable.setStatus("current")
_Rc2kAtmPvcEntry_Object = MibTableRow
rc2kAtmPvcEntry = _Rc2kAtmPvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1)
)
rc2kAtmPvcEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kAtmPvcIfIndex"),
    (0, "RAPID-CITY", "rc2kAtmPvcVpi"),
    (0, "RAPID-CITY", "rc2kAtmPvcVci"),
)
if mibBuilder.loadTexts:
    rc2kAtmPvcEntry.setStatus("current")
_Rc2kAtmPvcIfIndex_Type = InterfaceIndex
_Rc2kAtmPvcIfIndex_Object = MibTableColumn
rc2kAtmPvcIfIndex = _Rc2kAtmPvcIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 1),
    _Rc2kAtmPvcIfIndex_Type()
)
rc2kAtmPvcIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPvcIfIndex.setStatus("current")


class _Rc2kAtmPvcVpi_Type(Integer32):
    """Custom type rc2kAtmPvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Rc2kAtmPvcVpi_Type.__name__ = "Integer32"
_Rc2kAtmPvcVpi_Object = MibTableColumn
rc2kAtmPvcVpi = _Rc2kAtmPvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 2),
    _Rc2kAtmPvcVpi_Type()
)
rc2kAtmPvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPvcVpi.setStatus("current")


class _Rc2kAtmPvcVci_Type(Integer32):
    """Custom type rc2kAtmPvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_Rc2kAtmPvcVci_Type.__name__ = "Integer32"
_Rc2kAtmPvcVci_Object = MibTableColumn
rc2kAtmPvcVci = _Rc2kAtmPvcVci_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 3),
    _Rc2kAtmPvcVci_Type()
)
rc2kAtmPvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPvcVci.setStatus("current")
_Rc2kAtmPvcPvcId_Type = Integer32
_Rc2kAtmPvcPvcId_Object = MibTableColumn
rc2kAtmPvcPvcId = _Rc2kAtmPvcPvcId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 4),
    _Rc2kAtmPvcPvcId_Type()
)
rc2kAtmPvcPvcId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPvcPvcId.setStatus("current")
_Rc2kAtmPvcName_Type = DisplayString
_Rc2kAtmPvcName_Object = MibTableColumn
rc2kAtmPvcName = _Rc2kAtmPvcName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 5),
    _Rc2kAtmPvcName_Type()
)
rc2kAtmPvcName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcName.setStatus("current")


class _Rc2kAtmPvcEncapsulation_Type(Integer32):
    """Custom type rc2kAtmPvcEncapsulation based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llcSnap", 2),
          ("null", 1))
    )


_Rc2kAtmPvcEncapsulation_Type.__name__ = "Integer32"
_Rc2kAtmPvcEncapsulation_Object = MibTableColumn
rc2kAtmPvcEncapsulation = _Rc2kAtmPvcEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 6),
    _Rc2kAtmPvcEncapsulation_Type()
)
rc2kAtmPvcEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcEncapsulation.setStatus("current")


class _Rc2kAtmPvcServiceType_Type(Integer32):
    """Custom type rc2kAtmPvcServiceType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 1),
          ("vbr", 2))
    )


_Rc2kAtmPvcServiceType_Type.__name__ = "Integer32"
_Rc2kAtmPvcServiceType_Object = MibTableColumn
rc2kAtmPvcServiceType = _Rc2kAtmPvcServiceType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 7),
    _Rc2kAtmPvcServiceType_Type()
)
rc2kAtmPvcServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcServiceType.setStatus("current")


class _Rc2kAtmPvcPeakCellRate_Type(Integer32):
    """Custom type rc2kAtmPvcPeakCellRate based on Integer32"""
    defaultValue = 23584

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(86, 733490),
    )


_Rc2kAtmPvcPeakCellRate_Type.__name__ = "Integer32"
_Rc2kAtmPvcPeakCellRate_Object = MibTableColumn
rc2kAtmPvcPeakCellRate = _Rc2kAtmPvcPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 8),
    _Rc2kAtmPvcPeakCellRate_Type()
)
rc2kAtmPvcPeakCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcPeakCellRate.setStatus("current")


class _Rc2kAtmPvcSustainedCellRate_Type(Integer32):
    """Custom type rc2kAtmPvcSustainedCellRate based on Integer32"""
    defaultValue = 23584

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(86, 733490),
    )


_Rc2kAtmPvcSustainedCellRate_Type.__name__ = "Integer32"
_Rc2kAtmPvcSustainedCellRate_Object = MibTableColumn
rc2kAtmPvcSustainedCellRate = _Rc2kAtmPvcSustainedCellRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 9),
    _Rc2kAtmPvcSustainedCellRate_Type()
)
rc2kAtmPvcSustainedCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcSustainedCellRate.setStatus("current")


class _Rc2kAtmPvcMaxBurstSize_Type(Integer32):
    """Custom type rc2kAtmPvcMaxBurstSize based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 255),
    )


_Rc2kAtmPvcMaxBurstSize_Type.__name__ = "Integer32"
_Rc2kAtmPvcMaxBurstSize_Object = MibTableColumn
rc2kAtmPvcMaxBurstSize = _Rc2kAtmPvcMaxBurstSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 10),
    _Rc2kAtmPvcMaxBurstSize_Type()
)
rc2kAtmPvcMaxBurstSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcMaxBurstSize.setStatus("current")
_Rc2kAtmPvcRowStatus_Type = RowStatus
_Rc2kAtmPvcRowStatus_Object = MibTableColumn
rc2kAtmPvcRowStatus = _Rc2kAtmPvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 11),
    _Rc2kAtmPvcRowStatus_Type()
)
rc2kAtmPvcRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcRowStatus.setStatus("current")


class _Rc2kAtmPvcOamLbMgmtEnable_Type(TruthValue):
    """Custom type rc2kAtmPvcOamLbMgmtEnable based on TruthValue"""


_Rc2kAtmPvcOamLbMgmtEnable_Object = MibTableColumn
rc2kAtmPvcOamLbMgmtEnable = _Rc2kAtmPvcOamLbMgmtEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 12),
    _Rc2kAtmPvcOamLbMgmtEnable_Type()
)
rc2kAtmPvcOamLbMgmtEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamLbMgmtEnable.setStatus("current")


class _Rc2kAtmPvcOamLbSendFrequency_Type(Integer32):
    """Custom type rc2kAtmPvcOamLbSendFrequency based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_Rc2kAtmPvcOamLbSendFrequency_Type.__name__ = "Integer32"
_Rc2kAtmPvcOamLbSendFrequency_Object = MibTableColumn
rc2kAtmPvcOamLbSendFrequency = _Rc2kAtmPvcOamLbSendFrequency_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 13),
    _Rc2kAtmPvcOamLbSendFrequency_Type()
)
rc2kAtmPvcOamLbSendFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamLbSendFrequency.setStatus("current")


class _Rc2kAtmPvcOamLbRetryFrequency_Type(Integer32):
    """Custom type rc2kAtmPvcOamLbRetryFrequency based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_Rc2kAtmPvcOamLbRetryFrequency_Type.__name__ = "Integer32"
_Rc2kAtmPvcOamLbRetryFrequency_Object = MibTableColumn
rc2kAtmPvcOamLbRetryFrequency = _Rc2kAtmPvcOamLbRetryFrequency_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 14),
    _Rc2kAtmPvcOamLbRetryFrequency_Type()
)
rc2kAtmPvcOamLbRetryFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamLbRetryFrequency.setStatus("current")


class _Rc2kAtmPvcOamLbUpCount_Type(Integer32):
    """Custom type rc2kAtmPvcOamLbUpCount based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_Rc2kAtmPvcOamLbUpCount_Type.__name__ = "Integer32"
_Rc2kAtmPvcOamLbUpCount_Object = MibTableColumn
rc2kAtmPvcOamLbUpCount = _Rc2kAtmPvcOamLbUpCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 15),
    _Rc2kAtmPvcOamLbUpCount_Type()
)
rc2kAtmPvcOamLbUpCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamLbUpCount.setStatus("current")


class _Rc2kAtmPvcOamLbDownCount_Type(Integer32):
    """Custom type rc2kAtmPvcOamLbDownCount based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_Rc2kAtmPvcOamLbDownCount_Type.__name__ = "Integer32"
_Rc2kAtmPvcOamLbDownCount_Object = MibTableColumn
rc2kAtmPvcOamLbDownCount = _Rc2kAtmPvcOamLbDownCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 16),
    _Rc2kAtmPvcOamLbDownCount_Type()
)
rc2kAtmPvcOamLbDownCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamLbDownCount.setStatus("current")


class _Rc2kAtmPvcOamTrapEnable_Type(TruthValue):
    """Custom type rc2kAtmPvcOamTrapEnable based on TruthValue"""


_Rc2kAtmPvcOamTrapEnable_Object = MibTableColumn
rc2kAtmPvcOamTrapEnable = _Rc2kAtmPvcOamTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 17),
    _Rc2kAtmPvcOamTrapEnable_Type()
)
rc2kAtmPvcOamTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamTrapEnable.setStatus("current")


class _Rc2kAtmPvcOamVcStatus_Type(Integer32):
    """Custom type rc2kAtmPvcOamVcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("downVerify", 2),
          ("notManaged", 1),
          ("up", 5),
          ("upVerify", 4))
    )


_Rc2kAtmPvcOamVcStatus_Type.__name__ = "Integer32"
_Rc2kAtmPvcOamVcStatus_Object = MibTableColumn
rc2kAtmPvcOamVcStatus = _Rc2kAtmPvcOamVcStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 18),
    _Rc2kAtmPvcOamVcStatus_Type()
)
rc2kAtmPvcOamVcStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamVcStatus.setStatus("current")
_Rc2kAtmPvcOamLbRequestSent_Type = Counter32
_Rc2kAtmPvcOamLbRequestSent_Object = MibTableColumn
rc2kAtmPvcOamLbRequestSent = _Rc2kAtmPvcOamLbRequestSent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 19),
    _Rc2kAtmPvcOamLbRequestSent_Type()
)
rc2kAtmPvcOamLbRequestSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamLbRequestSent.setStatus("current")
_Rc2kAtmPvcOamLbReplySent_Type = Counter32
_Rc2kAtmPvcOamLbReplySent_Object = MibTableColumn
rc2kAtmPvcOamLbReplySent = _Rc2kAtmPvcOamLbReplySent_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 20),
    _Rc2kAtmPvcOamLbReplySent_Type()
)
rc2kAtmPvcOamLbReplySent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamLbReplySent.setStatus("current")
_Rc2kAtmPvcOamLbReplyReceived_Type = Counter32
_Rc2kAtmPvcOamLbReplyReceived_Object = MibTableColumn
rc2kAtmPvcOamLbReplyReceived = _Rc2kAtmPvcOamLbReplyReceived_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 3, 1, 21),
    _Rc2kAtmPvcOamLbReplyReceived_Type()
)
rc2kAtmPvcOamLbReplyReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPvcOamLbReplyReceived.setStatus("current")
_Rc2kAtm1483ElanTable_Object = MibTable
rc2kAtm1483ElanTable = _Rc2kAtm1483ElanTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5)
)
if mibBuilder.loadTexts:
    rc2kAtm1483ElanTable.setStatus("current")
_Rc2kAtm1483ElanEntry_Object = MibTableRow
rc2kAtm1483ElanEntry = _Rc2kAtm1483ElanEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1)
)
rc2kAtm1483ElanEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kAtm1483ElanIfIndex"),
    (0, "RAPID-CITY", "rc2kAtm1483ElanVlanId"),
)
if mibBuilder.loadTexts:
    rc2kAtm1483ElanEntry.setStatus("current")
_Rc2kAtm1483ElanIfIndex_Type = InterfaceIndex
_Rc2kAtm1483ElanIfIndex_Object = MibTableColumn
rc2kAtm1483ElanIfIndex = _Rc2kAtm1483ElanIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 1),
    _Rc2kAtm1483ElanIfIndex_Type()
)
rc2kAtm1483ElanIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanIfIndex.setStatus("current")
_Rc2kAtm1483ElanElanId_Type = Integer32
_Rc2kAtm1483ElanElanId_Object = MibTableColumn
rc2kAtm1483ElanElanId = _Rc2kAtm1483ElanElanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 2),
    _Rc2kAtm1483ElanElanId_Type()
)
rc2kAtm1483ElanElanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanElanId.setStatus("current")


class _Rc2kAtm1483ElanNumPvcIds_Type(Integer32):
    """Custom type rc2kAtm1483ElanNumPvcIds based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_Rc2kAtm1483ElanNumPvcIds_Type.__name__ = "Integer32"
_Rc2kAtm1483ElanNumPvcIds_Object = MibTableColumn
rc2kAtm1483ElanNumPvcIds = _Rc2kAtm1483ElanNumPvcIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 3),
    _Rc2kAtm1483ElanNumPvcIds_Type()
)
rc2kAtm1483ElanNumPvcIds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanNumPvcIds.setStatus("current")


class _Rc2kAtm1483ElanPvcIds_Type(IdList):
    """Custom type rc2kAtm1483ElanPvcIds based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )


_Rc2kAtm1483ElanPvcIds_Type.__name__ = "IdList"
_Rc2kAtm1483ElanPvcIds_Object = MibTableColumn
rc2kAtm1483ElanPvcIds = _Rc2kAtm1483ElanPvcIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 4),
    _Rc2kAtm1483ElanPvcIds_Type()
)
rc2kAtm1483ElanPvcIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanPvcIds.setStatus("current")


class _Rc2kAtm1483ElanVlanId_Type(Integer32):
    """Custom type rc2kAtm1483ElanVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Rc2kAtm1483ElanVlanId_Type.__name__ = "Integer32"
_Rc2kAtm1483ElanVlanId_Object = MibTableColumn
rc2kAtm1483ElanVlanId = _Rc2kAtm1483ElanVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 5),
    _Rc2kAtm1483ElanVlanId_Type()
)
rc2kAtm1483ElanVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanVlanId.setStatus("current")
_Rc2kAtm1483ElanRowStatus_Type = RowStatus
_Rc2kAtm1483ElanRowStatus_Object = MibTableColumn
rc2kAtm1483ElanRowStatus = _Rc2kAtm1483ElanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 6),
    _Rc2kAtm1483ElanRowStatus_Type()
)
rc2kAtm1483ElanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanRowStatus.setStatus("current")


class _Rc2kAtm1483ElanConnectType_Type(Integer32):
    """Custom type rc2kAtm1483ElanConnectType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bridged", 1),
          ("ip", 2),
          ("ipx", 3),
          ("muxIpIpx", 4))
    )


_Rc2kAtm1483ElanConnectType_Type.__name__ = "Integer32"
_Rc2kAtm1483ElanConnectType_Object = MibTableColumn
rc2kAtm1483ElanConnectType = _Rc2kAtm1483ElanConnectType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 7),
    _Rc2kAtm1483ElanConnectType_Type()
)
rc2kAtm1483ElanConnectType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanConnectType.setStatus("current")
_Rc2kAtm1483ElanVlanMacAddress_Type = MacAddress
_Rc2kAtm1483ElanVlanMacAddress_Object = MibTableColumn
rc2kAtm1483ElanVlanMacAddress = _Rc2kAtm1483ElanVlanMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 8),
    _Rc2kAtm1483ElanVlanMacAddress_Type()
)
rc2kAtm1483ElanVlanMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanVlanMacAddress.setStatus("current")
_Rc2kAtm1483ElanDummyMacAddress_Type = MacAddress
_Rc2kAtm1483ElanDummyMacAddress_Object = MibTableColumn
rc2kAtm1483ElanDummyMacAddress = _Rc2kAtm1483ElanDummyMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 9),
    _Rc2kAtm1483ElanDummyMacAddress_Type()
)
rc2kAtm1483ElanDummyMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanDummyMacAddress.setStatus("current")
_Rc2kAtm1483ElanLocalIpAddress_Type = IpAddress
_Rc2kAtm1483ElanLocalIpAddress_Object = MibTableColumn
rc2kAtm1483ElanLocalIpAddress = _Rc2kAtm1483ElanLocalIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 10),
    _Rc2kAtm1483ElanLocalIpAddress_Type()
)
rc2kAtm1483ElanLocalIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanLocalIpAddress.setStatus("current")
_Rc2kAtm1483ElanRemoteIpAddress_Type = IpAddress
_Rc2kAtm1483ElanRemoteIpAddress_Object = MibTableColumn
rc2kAtm1483ElanRemoteIpAddress = _Rc2kAtm1483ElanRemoteIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 11),
    _Rc2kAtm1483ElanRemoteIpAddress_Type()
)
rc2kAtm1483ElanRemoteIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanRemoteIpAddress.setStatus("current")


class _Rc2kAtm1483ElanInArpSendEnable_Type(TruthValue):
    """Custom type rc2kAtm1483ElanInArpSendEnable based on TruthValue"""


_Rc2kAtm1483ElanInArpSendEnable_Object = MibTableColumn
rc2kAtm1483ElanInArpSendEnable = _Rc2kAtm1483ElanInArpSendEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 12),
    _Rc2kAtm1483ElanInArpSendEnable_Type()
)
rc2kAtm1483ElanInArpSendEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanInArpSendEnable.setStatus("current")


class _Rc2kAtm1483ElanInArpSendInterval_Type(Integer32):
    """Custom type rc2kAtm1483ElanInArpSendInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_Rc2kAtm1483ElanInArpSendInterval_Type.__name__ = "Integer32"
_Rc2kAtm1483ElanInArpSendInterval_Object = MibTableColumn
rc2kAtm1483ElanInArpSendInterval = _Rc2kAtm1483ElanInArpSendInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 13),
    _Rc2kAtm1483ElanInArpSendInterval_Type()
)
rc2kAtm1483ElanInArpSendInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanInArpSendInterval.setStatus("current")


class _Rc2kAtm1483ElanIpxVlanEncapMethod_Type(Integer32):
    """Custom type rc2kAtm1483ElanIpxVlanEncapMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ether-ii", 3),
          ("llc", 1),
          ("raw", 4),
          ("snap", 2))
    )


_Rc2kAtm1483ElanIpxVlanEncapMethod_Type.__name__ = "Integer32"
_Rc2kAtm1483ElanIpxVlanEncapMethod_Object = MibTableColumn
rc2kAtm1483ElanIpxVlanEncapMethod = _Rc2kAtm1483ElanIpxVlanEncapMethod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 14),
    _Rc2kAtm1483ElanIpxVlanEncapMethod_Type()
)
rc2kAtm1483ElanIpxVlanEncapMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanIpxVlanEncapMethod.setStatus("current")


class _Rc2kAtm1483ElanIpxNetworkNum_Type(Integer32):
    """Custom type rc2kAtm1483ElanIpxNetworkNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Rc2kAtm1483ElanIpxNetworkNum_Type.__name__ = "Integer32"
_Rc2kAtm1483ElanIpxNetworkNum_Object = MibTableColumn
rc2kAtm1483ElanIpxNetworkNum = _Rc2kAtm1483ElanIpxNetworkNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 15),
    _Rc2kAtm1483ElanIpxNetworkNum_Type()
)
rc2kAtm1483ElanIpxNetworkNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanIpxNetworkNum.setStatus("current")
_Rc2kAtm1483ElanStgId_Type = Integer32
_Rc2kAtm1483ElanStgId_Object = MibTableColumn
rc2kAtm1483ElanStgId = _Rc2kAtm1483ElanStgId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 16),
    _Rc2kAtm1483ElanStgId_Type()
)
rc2kAtm1483ElanStgId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanStgId.setStatus("current")
_Rc2kAtm1483ElanrcStgTaggedBpduVlanId_Type = Integer32
_Rc2kAtm1483ElanrcStgTaggedBpduVlanId_Object = MibTableColumn
rc2kAtm1483ElanrcStgTaggedBpduVlanId = _Rc2kAtm1483ElanrcStgTaggedBpduVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 17),
    _Rc2kAtm1483ElanrcStgTaggedBpduVlanId_Type()
)
rc2kAtm1483ElanrcStgTaggedBpduVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanrcStgTaggedBpduVlanId.setStatus("current")


class _Rc2kAtm1483ElanIpxNetworkAddr_Type(OctetString):
    """Custom type rc2kAtm1483ElanIpxNetworkAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_Rc2kAtm1483ElanIpxNetworkAddr_Type.__name__ = "OctetString"
_Rc2kAtm1483ElanIpxNetworkAddr_Object = MibTableColumn
rc2kAtm1483ElanIpxNetworkAddr = _Rc2kAtm1483ElanIpxNetworkAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 5, 1, 18),
    _Rc2kAtm1483ElanIpxNetworkAddr_Type()
)
rc2kAtm1483ElanIpxNetworkAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtm1483ElanIpxNetworkAddr.setStatus("current")
_Rc2kAtmSioCardConfigTable_Object = MibTable
rc2kAtmSioCardConfigTable = _Rc2kAtmSioCardConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 8)
)
if mibBuilder.loadTexts:
    rc2kAtmSioCardConfigTable.setStatus("current")
_Rc2kAtmSioCardConfigEntry_Object = MibTableRow
rc2kAtmSioCardConfigEntry = _Rc2kAtmSioCardConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 8, 1)
)
rc2kAtmSioCardConfigEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kAtmSioCardConfigSlotIndex"),
)
if mibBuilder.loadTexts:
    rc2kAtmSioCardConfigEntry.setStatus("current")


class _Rc2kAtmSioCardConfigSlotIndex_Type(Integer32):
    """Custom type rc2kAtmSioCardConfigSlotIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Rc2kAtmSioCardConfigSlotIndex_Type.__name__ = "Integer32"
_Rc2kAtmSioCardConfigSlotIndex_Object = MibTableColumn
rc2kAtmSioCardConfigSlotIndex = _Rc2kAtmSioCardConfigSlotIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 8, 1, 1),
    _Rc2kAtmSioCardConfigSlotIndex_Type()
)
rc2kAtmSioCardConfigSlotIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmSioCardConfigSlotIndex.setStatus("current")


class _Rc2kAtmSioCardConfigAction_Type(Integer32):
    """Custom type rc2kAtmSioCardConfigAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("reset", 1))
    )


_Rc2kAtmSioCardConfigAction_Type.__name__ = "Integer32"
_Rc2kAtmSioCardConfigAction_Object = MibTableColumn
rc2kAtmSioCardConfigAction = _Rc2kAtmSioCardConfigAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 8, 1, 2),
    _Rc2kAtmSioCardConfigAction_Type()
)
rc2kAtmSioCardConfigAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmSioCardConfigAction.setStatus("current")


class _Rc2kAtmSioCardConfigTraceMode_Type(Integer32):
    """Custom type rc2kAtmSioCardConfigTraceMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("traceOn", 1))
    )


_Rc2kAtmSioCardConfigTraceMode_Type.__name__ = "Integer32"
_Rc2kAtmSioCardConfigTraceMode_Object = MibTableColumn
rc2kAtmSioCardConfigTraceMode = _Rc2kAtmSioCardConfigTraceMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 8, 1, 3),
    _Rc2kAtmSioCardConfigTraceMode_Type()
)
rc2kAtmSioCardConfigTraceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmSioCardConfigTraceMode.setStatus("current")
_Rc2kAtmSioCardConfigImageFileName_Type = DisplayString
_Rc2kAtmSioCardConfigImageFileName_Object = MibTableColumn
rc2kAtmSioCardConfigImageFileName = _Rc2kAtmSioCardConfigImageFileName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 8, 1, 4),
    _Rc2kAtmSioCardConfigImageFileName_Type()
)
rc2kAtmSioCardConfigImageFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmSioCardConfigImageFileName.setStatus("current")


class _Rc2kAtmSioCardConfigElanStatsEnable_Type(Integer32):
    """Custom type rc2kAtmSioCardConfigElanStatsEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_Rc2kAtmSioCardConfigElanStatsEnable_Type.__name__ = "Integer32"
_Rc2kAtmSioCardConfigElanStatsEnable_Object = MibTableColumn
rc2kAtmSioCardConfigElanStatsEnable = _Rc2kAtmSioCardConfigElanStatsEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 8, 1, 5),
    _Rc2kAtmSioCardConfigElanStatsEnable_Type()
)
rc2kAtmSioCardConfigElanStatsEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmSioCardConfigElanStatsEnable.setStatus("current")


class _Rc2kAtmSioCardConfigStatsPollPeriod_Type(Integer32):
    """Custom type rc2kAtmSioCardConfigStatsPollPeriod based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 15),
    )


_Rc2kAtmSioCardConfigStatsPollPeriod_Type.__name__ = "Integer32"
_Rc2kAtmSioCardConfigStatsPollPeriod_Object = MibTableColumn
rc2kAtmSioCardConfigStatsPollPeriod = _Rc2kAtmSioCardConfigStatsPollPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 8, 1, 6),
    _Rc2kAtmSioCardConfigStatsPollPeriod_Type()
)
rc2kAtmSioCardConfigStatsPollPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmSioCardConfigStatsPollPeriod.setStatus("current")
_Rc2kAtmPortStatsTable_Object = MibTable
rc2kAtmPortStatsTable = _Rc2kAtmPortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10)
)
if mibBuilder.loadTexts:
    rc2kAtmPortStatsTable.setStatus("current")
_Rc2kAtmPortStatsEntry_Object = MibTableRow
rc2kAtmPortStatsEntry = _Rc2kAtmPortStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1)
)
rc2kAtmPortStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kAtmPortStatsIfIndex"),
)
if mibBuilder.loadTexts:
    rc2kAtmPortStatsEntry.setStatus("current")
_Rc2kAtmPortStatsIfIndex_Type = InterfaceIndex
_Rc2kAtmPortStatsIfIndex_Object = MibTableColumn
rc2kAtmPortStatsIfIndex = _Rc2kAtmPortStatsIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 1),
    _Rc2kAtmPortStatsIfIndex_Type()
)
rc2kAtmPortStatsIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsIfIndex.setStatus("current")
_Rc2kAtmPortStatsInCells_Type = Counter64
_Rc2kAtmPortStatsInCells_Object = MibTableColumn
rc2kAtmPortStatsInCells = _Rc2kAtmPortStatsInCells_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 2),
    _Rc2kAtmPortStatsInCells_Type()
)
rc2kAtmPortStatsInCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsInCells.setStatus("current")
_Rc2kAtmPortStatsOutCells_Type = Counter64
_Rc2kAtmPortStatsOutCells_Object = MibTableColumn
rc2kAtmPortStatsOutCells = _Rc2kAtmPortStatsOutCells_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 3),
    _Rc2kAtmPortStatsOutCells_Type()
)
rc2kAtmPortStatsOutCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsOutCells.setStatus("current")
_Rc2kAtmPortStatsOutIdleCells_Type = Counter64
_Rc2kAtmPortStatsOutIdleCells_Object = MibTableColumn
rc2kAtmPortStatsOutIdleCells = _Rc2kAtmPortStatsOutIdleCells_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 4),
    _Rc2kAtmPortStatsOutIdleCells_Type()
)
rc2kAtmPortStatsOutIdleCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsOutIdleCells.setStatus("current")
_Rc2kAtmPortStatsInHecCorrected_Type = Counter32
_Rc2kAtmPortStatsInHecCorrected_Object = MibTableColumn
rc2kAtmPortStatsInHecCorrected = _Rc2kAtmPortStatsInHecCorrected_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 5),
    _Rc2kAtmPortStatsInHecCorrected_Type()
)
rc2kAtmPortStatsInHecCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsInHecCorrected.setStatus("current")
_Rc2kAtmPortStatsInHecUncorrected_Type = Counter32
_Rc2kAtmPortStatsInHecUncorrected_Object = MibTableColumn
rc2kAtmPortStatsInHecUncorrected = _Rc2kAtmPortStatsInHecUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 6),
    _Rc2kAtmPortStatsInHecUncorrected_Type()
)
rc2kAtmPortStatsInHecUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsInHecUncorrected.setStatus("current")
_Rc2kAtmPortStatsInUnknownProtos_Type = Counter32
_Rc2kAtmPortStatsInUnknownProtos_Object = MibTableColumn
rc2kAtmPortStatsInUnknownProtos = _Rc2kAtmPortStatsInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 7),
    _Rc2kAtmPortStatsInUnknownProtos_Type()
)
rc2kAtmPortStatsInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsInUnknownProtos.setStatus("current")
_Rc2kAtmPortStatsInPkts_Type = Counter32
_Rc2kAtmPortStatsInPkts_Object = MibTableColumn
rc2kAtmPortStatsInPkts = _Rc2kAtmPortStatsInPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 8),
    _Rc2kAtmPortStatsInPkts_Type()
)
rc2kAtmPortStatsInPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsInPkts.setStatus("current")
_Rc2kAtmPortStatsOutPkts_Type = Counter32
_Rc2kAtmPortStatsOutPkts_Object = MibTableColumn
rc2kAtmPortStatsOutPkts = _Rc2kAtmPortStatsOutPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 9),
    _Rc2kAtmPortStatsOutPkts_Type()
)
rc2kAtmPortStatsOutPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsOutPkts.setStatus("current")
_Rc2kAtmPortStatsInDroppedPkts_Type = Counter32
_Rc2kAtmPortStatsInDroppedPkts_Object = MibTableColumn
rc2kAtmPortStatsInDroppedPkts = _Rc2kAtmPortStatsInDroppedPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 10),
    _Rc2kAtmPortStatsInDroppedPkts_Type()
)
rc2kAtmPortStatsInDroppedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsInDroppedPkts.setStatus("current")
_Rc2kAtmPortStatsOutDroppedPkts_Type = Counter32
_Rc2kAtmPortStatsOutDroppedPkts_Object = MibTableColumn
rc2kAtmPortStatsOutDroppedPkts = _Rc2kAtmPortStatsOutDroppedPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 10, 1, 11),
    _Rc2kAtmPortStatsOutDroppedPkts_Type()
)
rc2kAtmPortStatsOutDroppedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmPortStatsOutDroppedPkts.setStatus("current")
_Rc2kAtmVPortStatsTable_Object = MibTable
rc2kAtmVPortStatsTable = _Rc2kAtmVPortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11)
)
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsTable.setStatus("current")
_Rc2kAtmVPortStatsEntry_Object = MibTableRow
rc2kAtmVPortStatsEntry = _Rc2kAtmVPortStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1)
)
rc2kAtmVPortStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kAtmVPortStatsIfIndex"),
    (0, "RAPID-CITY", "rc2kAtmVPortStatsVlanId"),
)
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsEntry.setStatus("current")
_Rc2kAtmVPortStatsIfIndex_Type = InterfaceIndex
_Rc2kAtmVPortStatsIfIndex_Object = MibTableColumn
rc2kAtmVPortStatsIfIndex = _Rc2kAtmVPortStatsIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 1),
    _Rc2kAtmVPortStatsIfIndex_Type()
)
rc2kAtmVPortStatsIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsIfIndex.setStatus("current")


class _Rc2kAtmVPortStatsVlanId_Type(Integer32):
    """Custom type rc2kAtmVPortStatsVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Rc2kAtmVPortStatsVlanId_Type.__name__ = "Integer32"
_Rc2kAtmVPortStatsVlanId_Object = MibTableColumn
rc2kAtmVPortStatsVlanId = _Rc2kAtmVPortStatsVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 2),
    _Rc2kAtmVPortStatsVlanId_Type()
)
rc2kAtmVPortStatsVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsVlanId.setStatus("current")


class _Rc2kAtmVPortStatsClear_Type(Integer32):
    """Custom type rc2kAtmVPortStatsClear based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("other", 0))
    )


_Rc2kAtmVPortStatsClear_Type.__name__ = "Integer32"
_Rc2kAtmVPortStatsClear_Object = MibTableColumn
rc2kAtmVPortStatsClear = _Rc2kAtmVPortStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 3),
    _Rc2kAtmVPortStatsClear_Type()
)
rc2kAtmVPortStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsClear.setStatus("current")
_Rc2kAtmVPortStatsInOctets_Type = Counter64
_Rc2kAtmVPortStatsInOctets_Object = MibTableColumn
rc2kAtmVPortStatsInOctets = _Rc2kAtmVPortStatsInOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 4),
    _Rc2kAtmVPortStatsInOctets_Type()
)
rc2kAtmVPortStatsInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsInOctets.setStatus("current")
_Rc2kAtmVPortStatsOutOctets_Type = Counter64
_Rc2kAtmVPortStatsOutOctets_Object = MibTableColumn
rc2kAtmVPortStatsOutOctets = _Rc2kAtmVPortStatsOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 5),
    _Rc2kAtmVPortStatsOutOctets_Type()
)
rc2kAtmVPortStatsOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsOutOctets.setStatus("current")
_Rc2kAtmVPortStatsInErrors_Type = Counter32
_Rc2kAtmVPortStatsInErrors_Object = MibTableColumn
rc2kAtmVPortStatsInErrors = _Rc2kAtmVPortStatsInErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 6),
    _Rc2kAtmVPortStatsInErrors_Type()
)
rc2kAtmVPortStatsInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsInErrors.setStatus("current")
_Rc2kAtmVPortStatsOutErrors_Type = Counter32
_Rc2kAtmVPortStatsOutErrors_Object = MibTableColumn
rc2kAtmVPortStatsOutErrors = _Rc2kAtmVPortStatsOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 7),
    _Rc2kAtmVPortStatsOutErrors_Type()
)
rc2kAtmVPortStatsOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsOutErrors.setStatus("current")
_Rc2kAtmVPortStatsInDiscards_Type = Counter32
_Rc2kAtmVPortStatsInDiscards_Object = MibTableColumn
rc2kAtmVPortStatsInDiscards = _Rc2kAtmVPortStatsInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 8),
    _Rc2kAtmVPortStatsInDiscards_Type()
)
rc2kAtmVPortStatsInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsInDiscards.setStatus("current")
_Rc2kAtmVPortStatsOutDiscards_Type = Counter32
_Rc2kAtmVPortStatsOutDiscards_Object = MibTableColumn
rc2kAtmVPortStatsOutDiscards = _Rc2kAtmVPortStatsOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 9),
    _Rc2kAtmVPortStatsOutDiscards_Type()
)
rc2kAtmVPortStatsOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsOutDiscards.setStatus("current")
_Rc2kAtmVPortStatsInUcastPkts_Type = Counter32
_Rc2kAtmVPortStatsInUcastPkts_Object = MibTableColumn
rc2kAtmVPortStatsInUcastPkts = _Rc2kAtmVPortStatsInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 10),
    _Rc2kAtmVPortStatsInUcastPkts_Type()
)
rc2kAtmVPortStatsInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsInUcastPkts.setStatus("current")
_Rc2kAtmVPortStatsOutUcastPkts_Type = Counter32
_Rc2kAtmVPortStatsOutUcastPkts_Object = MibTableColumn
rc2kAtmVPortStatsOutUcastPkts = _Rc2kAtmVPortStatsOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 11),
    _Rc2kAtmVPortStatsOutUcastPkts_Type()
)
rc2kAtmVPortStatsOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsOutUcastPkts.setStatus("current")
_Rc2kAtmVPortStatsInMulticastPkts_Type = Counter32
_Rc2kAtmVPortStatsInMulticastPkts_Object = MibTableColumn
rc2kAtmVPortStatsInMulticastPkts = _Rc2kAtmVPortStatsInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 12),
    _Rc2kAtmVPortStatsInMulticastPkts_Type()
)
rc2kAtmVPortStatsInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsInMulticastPkts.setStatus("current")
_Rc2kAtmVPortStatsOutMulticastPkts_Type = Counter32
_Rc2kAtmVPortStatsOutMulticastPkts_Object = MibTableColumn
rc2kAtmVPortStatsOutMulticastPkts = _Rc2kAtmVPortStatsOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 13),
    _Rc2kAtmVPortStatsOutMulticastPkts_Type()
)
rc2kAtmVPortStatsOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsOutMulticastPkts.setStatus("current")
_Rc2kAtmVPortStatsInBroadcastPkts_Type = Counter32
_Rc2kAtmVPortStatsInBroadcastPkts_Object = MibTableColumn
rc2kAtmVPortStatsInBroadcastPkts = _Rc2kAtmVPortStatsInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 14),
    _Rc2kAtmVPortStatsInBroadcastPkts_Type()
)
rc2kAtmVPortStatsInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsInBroadcastPkts.setStatus("current")
_Rc2kAtmVPortStatsOutBroadcastPkts_Type = Counter32
_Rc2kAtmVPortStatsOutBroadcastPkts_Object = MibTableColumn
rc2kAtmVPortStatsOutBroadcastPkts = _Rc2kAtmVPortStatsOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 9, 11, 1, 15),
    _Rc2kAtmVPortStatsOutBroadcastPkts_Type()
)
rc2kAtmVPortStatsOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kAtmVPortStatsOutBroadcastPkts.setStatus("current")
_Rc2kMdaCardTable_Object = MibTable
rc2kMdaCardTable = _Rc2kMdaCardTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10)
)
if mibBuilder.loadTexts:
    rc2kMdaCardTable.setStatus("current")
_Rc2kMdaCardEntry_Object = MibTableRow
rc2kMdaCardEntry = _Rc2kMdaCardEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1)
)
rc2kMdaCardEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kMdaCardSlotNum"),
    (0, "RAPID-CITY", "rc2kMdaCardMdaNum"),
)
if mibBuilder.loadTexts:
    rc2kMdaCardEntry.setStatus("current")


class _Rc2kMdaCardSlotNum_Type(Integer32):
    """Custom type rc2kMdaCardSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Rc2kMdaCardSlotNum_Type.__name__ = "Integer32"
_Rc2kMdaCardSlotNum_Object = MibTableColumn
rc2kMdaCardSlotNum = _Rc2kMdaCardSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 1),
    _Rc2kMdaCardSlotNum_Type()
)
rc2kMdaCardSlotNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardSlotNum.setStatus("current")


class _Rc2kMdaCardMdaNum_Type(Integer32):
    """Custom type rc2kMdaCardMdaNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_Rc2kMdaCardMdaNum_Type.__name__ = "Integer32"
_Rc2kMdaCardMdaNum_Object = MibTableColumn
rc2kMdaCardMdaNum = _Rc2kMdaCardMdaNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 2),
    _Rc2kMdaCardMdaNum_Type()
)
rc2kMdaCardMdaNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardMdaNum.setStatus("current")


class _Rc2kMdaCardType_Type(Integer32):
    """Custom type rc2kMdaCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              541327874,
              541331970,
              541393409,
              541397505,
              542376452,
              542380548,
              542388740,
              542441985,
              542446081,
              542839298,
              542970370,
              807469572,
              808518146,
              808518148,
              808583681,
              808591873,
              808616449,
              808624641)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("rc2k1x0c12cBaseMM", 542441985),
          ("rc2k1x0c12cBaseSM", 542446081),
          ("rc2k1x1000BaseLXBB", 808591873),
          ("rc2k1x1000BaseLXRBB", 808624641),
          ("rc2k1x1000BaseSXBB", 808583681),
          ("rc2k1x1000BaseSXRBB", 808616449),
          ("rc2k1xOc12PosBaseMMF", 541393409),
          ("rc2k1xOc12PosBaseSMF", 541397505),
          ("rc2k2x100BaseFX", 808518146),
          ("rc2k2xDs3", 542970370),
          ("rc2k2xE3", 542839298),
          ("rc2k2xOc3PosBaseMMF", 541327874),
          ("rc2k2xOc3PosBaseSMF", 541331970),
          ("rc2k4x100BaseFX", 808518148),
          ("rc2k4x100BaseTX", 807469572),
          ("rc2k4xOc3cBaseCOPPER", 542388740),
          ("rc2k4xOc3cBaseMM", 542376452),
          ("rc2k4xOc3cBaseSM", 542380548))
    )


_Rc2kMdaCardType_Type.__name__ = "Integer32"
_Rc2kMdaCardType_Object = MibTableColumn
rc2kMdaCardType = _Rc2kMdaCardType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 3),
    _Rc2kMdaCardType_Type()
)
rc2kMdaCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardType.setStatus("current")
_Rc2kMdaCardDescription_Type = DisplayString
_Rc2kMdaCardDescription_Object = MibTableColumn
rc2kMdaCardDescription = _Rc2kMdaCardDescription_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 4),
    _Rc2kMdaCardDescription_Type()
)
rc2kMdaCardDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardDescription.setStatus("current")


class _Rc2kMdaCardAdminStatus_Type(Integer32):
    """Custom type rc2kMdaCardAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("testing", 2),
          ("unknown", 3),
          ("up", 0))
    )


_Rc2kMdaCardAdminStatus_Type.__name__ = "Integer32"
_Rc2kMdaCardAdminStatus_Object = MibTableColumn
rc2kMdaCardAdminStatus = _Rc2kMdaCardAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 5),
    _Rc2kMdaCardAdminStatus_Type()
)
rc2kMdaCardAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kMdaCardAdminStatus.setStatus("current")


class _Rc2kMdaCardOperStatus_Type(Integer32):
    """Custom type rc2kMdaCardOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("testing", 2),
          ("unknown", 3),
          ("up", 0))
    )


_Rc2kMdaCardOperStatus_Type.__name__ = "Integer32"
_Rc2kMdaCardOperStatus_Object = MibTableColumn
rc2kMdaCardOperStatus = _Rc2kMdaCardOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 6),
    _Rc2kMdaCardOperStatus_Type()
)
rc2kMdaCardOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardOperStatus.setStatus("current")
_Rc2kMdaCardSerialNum_Type = DisplayString
_Rc2kMdaCardSerialNum_Object = MibTableColumn
rc2kMdaCardSerialNum = _Rc2kMdaCardSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 7),
    _Rc2kMdaCardSerialNum_Type()
)
rc2kMdaCardSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardSerialNum.setStatus("current")
_Rc2kMdaCardHwVersion_Type = DisplayString
_Rc2kMdaCardHwVersion_Object = MibTableColumn
rc2kMdaCardHwVersion = _Rc2kMdaCardHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 8),
    _Rc2kMdaCardHwVersion_Type()
)
rc2kMdaCardHwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardHwVersion.setStatus("current")
_Rc2kMdaCardPartNumber_Type = DisplayString
_Rc2kMdaCardPartNumber_Object = MibTableColumn
rc2kMdaCardPartNumber = _Rc2kMdaCardPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 9),
    _Rc2kMdaCardPartNumber_Type()
)
rc2kMdaCardPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardPartNumber.setStatus("current")
_Rc2kMdaCardDateCode_Type = DisplayString
_Rc2kMdaCardDateCode_Object = MibTableColumn
rc2kMdaCardDateCode = _Rc2kMdaCardDateCode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 10),
    _Rc2kMdaCardDateCode_Type()
)
rc2kMdaCardDateCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardDateCode.setStatus("current")
_Rc2kMdaCardDeviations_Type = DisplayString
_Rc2kMdaCardDeviations_Object = MibTableColumn
rc2kMdaCardDeviations = _Rc2kMdaCardDeviations_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 11),
    _Rc2kMdaCardDeviations_Type()
)
rc2kMdaCardDeviations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardDeviations.setStatus("current")
_Rc2kMdaCardMacAddr_Type = MacAddress
_Rc2kMdaCardMacAddr_Object = MibTableColumn
rc2kMdaCardMacAddr = _Rc2kMdaCardMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 12),
    _Rc2kMdaCardMacAddr_Type()
)
rc2kMdaCardMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardMacAddr.setStatus("current")
_Rc2kMdaCardNumPorts_Type = Integer32
_Rc2kMdaCardNumPorts_Object = MibTableColumn
rc2kMdaCardNumPorts = _Rc2kMdaCardNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 13),
    _Rc2kMdaCardNumPorts_Type()
)
rc2kMdaCardNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardNumPorts.setStatus("current")
_Rc2kMdaCardFirstIfIndex_Type = InterfaceIndex
_Rc2kMdaCardFirstIfIndex_Object = MibTableColumn
rc2kMdaCardFirstIfIndex = _Rc2kMdaCardFirstIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 14),
    _Rc2kMdaCardFirstIfIndex_Type()
)
rc2kMdaCardFirstIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardFirstIfIndex.setStatus("current")
_Rc2kMdaCardLastIfIndex_Type = InterfaceIndex
_Rc2kMdaCardLastIfIndex_Object = MibTableColumn
rc2kMdaCardLastIfIndex = _Rc2kMdaCardLastIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 10, 1, 15),
    _Rc2kMdaCardLastIfIndex_Type()
)
rc2kMdaCardLastIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kMdaCardLastIfIndex.setStatus("current")
_Rc2kCpuEthernetPortRouteTable_Object = MibTable
rc2kCpuEthernetPortRouteTable = _Rc2kCpuEthernetPortRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 11)
)
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortRouteTable.setStatus("current")
_Rc2kCpuEthernetPortRouteEntry_Object = MibTableRow
rc2kCpuEthernetPortRouteEntry = _Rc2kCpuEthernetPortRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 11, 1)
)
rc2kCpuEthernetPortRouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kCpuEthernetPortRouteNetwork"),
    (0, "RAPID-CITY", "rc2kCpuEthernetPortRouteGateway"),
)
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortRouteEntry.setStatus("current")
_Rc2kCpuEthernetPortRouteNetwork_Type = IpAddress
_Rc2kCpuEthernetPortRouteNetwork_Object = MibTableColumn
rc2kCpuEthernetPortRouteNetwork = _Rc2kCpuEthernetPortRouteNetwork_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 11, 1, 1),
    _Rc2kCpuEthernetPortRouteNetwork_Type()
)
rc2kCpuEthernetPortRouteNetwork.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortRouteNetwork.setStatus("current")
_Rc2kCpuEthernetPortRouteGateway_Type = IpAddress
_Rc2kCpuEthernetPortRouteGateway_Object = MibTableColumn
rc2kCpuEthernetPortRouteGateway = _Rc2kCpuEthernetPortRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 11, 1, 2),
    _Rc2kCpuEthernetPortRouteGateway_Type()
)
rc2kCpuEthernetPortRouteGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortRouteGateway.setStatus("current")
_Rc2kCpuEthernetPortRouteRowStatus_Type = RowStatus
_Rc2kCpuEthernetPortRouteRowStatus_Object = MibTableColumn
rc2kCpuEthernetPortRouteRowStatus = _Rc2kCpuEthernetPortRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 11, 1, 3),
    _Rc2kCpuEthernetPortRouteRowStatus_Type()
)
rc2kCpuEthernetPortRouteRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortRouteRowStatus.setStatus("current")
_Rc2kCPUTypeGeneralGroup_ObjectIdentity = ObjectIdentity
rc2kCPUTypeGeneralGroup = _Rc2kCPUTypeGeneralGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 12)
)


class _Rc2kCPUTypePrimary_Type(Integer32):
    """Custom type rc2kCPUTypePrimary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cpu8690Default", 1),
          ("cpu8690Upgrade", 2),
          ("cpu8691Default", 3),
          ("cpu8691Upgrade", 4),
          ("cpu8692Default", 5),
          ("cpu8692SuperMezz", 6),
          ("cpu8695Default", 7),
          ("cpu8895Default", 8),
          ("undefined", 255))
    )


_Rc2kCPUTypePrimary_Type.__name__ = "Integer32"
_Rc2kCPUTypePrimary_Object = MibScalar
rc2kCPUTypePrimary = _Rc2kCPUTypePrimary_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 12, 1),
    _Rc2kCPUTypePrimary_Type()
)
rc2kCPUTypePrimary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCPUTypePrimary.setStatus("current")


class _Rc2kCPUTypeSecondary_Type(Integer32):
    """Custom type rc2kCPUTypeSecondary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cpu8690Default", 1),
          ("cpu8690Upgrade", 2),
          ("cpu8691Default", 3),
          ("cpu8691Upgrade", 4),
          ("cpu8692Default", 5),
          ("cpu8692SuperMezz", 6),
          ("cpu8695Default", 7),
          ("cpu8895Default", 8),
          ("undefined", 255))
    )


_Rc2kCPUTypeSecondary_Type.__name__ = "Integer32"
_Rc2kCPUTypeSecondary_Object = MibScalar
rc2kCPUTypeSecondary = _Rc2kCPUTypeSecondary_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 12, 2),
    _Rc2kCPUTypeSecondary_Type()
)
rc2kCPUTypeSecondary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCPUTypeSecondary.setStatus("current")


class _Rc2kCPUTypePrimaryMemory_Type(Integer32):
    """Custom type rc2kCPUTypePrimaryMemory based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("mem1024MB", 5),
          ("mem128MB", 2),
          ("mem256MB", 3),
          ("mem512MB", 4),
          ("mem64MB", 1),
          ("undefined", 255))
    )


_Rc2kCPUTypePrimaryMemory_Type.__name__ = "Integer32"
_Rc2kCPUTypePrimaryMemory_Object = MibScalar
rc2kCPUTypePrimaryMemory = _Rc2kCPUTypePrimaryMemory_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 12, 3),
    _Rc2kCPUTypePrimaryMemory_Type()
)
rc2kCPUTypePrimaryMemory.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCPUTypePrimaryMemory.setStatus("current")


class _Rc2kCPUTypeSecondaryMemory_Type(Integer32):
    """Custom type rc2kCPUTypeSecondaryMemory based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("mem1024MB", 5),
          ("mem128MB", 2),
          ("mem256MB", 3),
          ("mem512MB", 4),
          ("mem64MB", 1),
          ("undefined", 255))
    )


_Rc2kCPUTypeSecondaryMemory_Type.__name__ = "Integer32"
_Rc2kCPUTypeSecondaryMemory_Object = MibScalar
rc2kCPUTypeSecondaryMemory = _Rc2kCPUTypeSecondaryMemory_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 12, 4),
    _Rc2kCPUTypeSecondaryMemory_Type()
)
rc2kCPUTypeSecondaryMemory.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rc2kCPUTypeSecondaryMemory.setStatus("current")
_Rc2kCpuEthernetPortIpv6RouteTable_Object = MibTable
rc2kCpuEthernetPortIpv6RouteTable = _Rc2kCpuEthernetPortIpv6RouteTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 13)
)
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortIpv6RouteTable.setStatus("current")
_Rc2kCpuEthernetPortIpv6RouteEntry_Object = MibTableRow
rc2kCpuEthernetPortIpv6RouteEntry = _Rc2kCpuEthernetPortIpv6RouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 13, 1)
)
rc2kCpuEthernetPortIpv6RouteEntry.setIndexNames(
    (0, "RAPID-CITY", "rc2kCpuEthernetPortIpv6RouteNetwork"),
    (0, "RAPID-CITY", "rc2kCpuEthernetPortIpv6RoutePrefixLength"),
    (0, "RAPID-CITY", "rc2kCpuEthernetPortIpv6RouteGateway"),
)
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortIpv6RouteEntry.setStatus("current")
_Rc2kCpuEthernetPortIpv6RouteNetwork_Type = Ipv6Address
_Rc2kCpuEthernetPortIpv6RouteNetwork_Object = MibTableColumn
rc2kCpuEthernetPortIpv6RouteNetwork = _Rc2kCpuEthernetPortIpv6RouteNetwork_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 13, 1, 1),
    _Rc2kCpuEthernetPortIpv6RouteNetwork_Type()
)
rc2kCpuEthernetPortIpv6RouteNetwork.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortIpv6RouteNetwork.setStatus("current")


class _Rc2kCpuEthernetPortIpv6RoutePrefixLength_Type(Integer32):
    """Custom type rc2kCpuEthernetPortIpv6RoutePrefixLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_Rc2kCpuEthernetPortIpv6RoutePrefixLength_Type.__name__ = "Integer32"
_Rc2kCpuEthernetPortIpv6RoutePrefixLength_Object = MibTableColumn
rc2kCpuEthernetPortIpv6RoutePrefixLength = _Rc2kCpuEthernetPortIpv6RoutePrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 13, 1, 2),
    _Rc2kCpuEthernetPortIpv6RoutePrefixLength_Type()
)
rc2kCpuEthernetPortIpv6RoutePrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortIpv6RoutePrefixLength.setStatus("current")
_Rc2kCpuEthernetPortIpv6RouteGateway_Type = Ipv6Address
_Rc2kCpuEthernetPortIpv6RouteGateway_Object = MibTableColumn
rc2kCpuEthernetPortIpv6RouteGateway = _Rc2kCpuEthernetPortIpv6RouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 13, 1, 3),
    _Rc2kCpuEthernetPortIpv6RouteGateway_Type()
)
rc2kCpuEthernetPortIpv6RouteGateway.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortIpv6RouteGateway.setStatus("current")
_Rc2kCpuEthernetPortIpv6RouteRowStatus_Type = RowStatus
_Rc2kCpuEthernetPortIpv6RouteRowStatus_Object = MibTableColumn
rc2kCpuEthernetPortIpv6RouteRowStatus = _Rc2kCpuEthernetPortIpv6RouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 100, 13, 1, 4),
    _Rc2kCpuEthernetPortIpv6RouteRowStatus_Type()
)
rc2kCpuEthernetPortIpv6RouteRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rc2kCpuEthernetPortIpv6RouteRowStatus.setStatus("current")
_RcPowerRanger_ObjectIdentity = ObjectIdentity
rcPowerRanger = _RcPowerRanger_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202)
)
_RcPowerRangerMib_ObjectIdentity = ObjectIdentity
rcPowerRangerMib = _RcPowerRangerMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1)
)
_RcPowerRangerNotifications_ObjectIdentity = ObjectIdentity
rcPowerRangerNotifications = _RcPowerRangerNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 0)
)
_RcPowerRangerObjects_ObjectIdentity = ObjectIdentity
rcPowerRangerObjects = _RcPowerRangerObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1)
)
_RcPrQos_ObjectIdentity = ObjectIdentity
rcPrQos = _RcPrQos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1)
)
_RcPrQosScalars_ObjectIdentity = ObjectIdentity
rcPrQosScalars = _RcPrQosScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 1)
)


class _RcPrQosPolicyNumPolicies_Type(Integer32):
    """Custom type rcPrQosPolicyNumPolicies based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12288),
    )


_RcPrQosPolicyNumPolicies_Type.__name__ = "Integer32"
_RcPrQosPolicyNumPolicies_Object = MibScalar
rcPrQosPolicyNumPolicies = _RcPrQosPolicyNumPolicies_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 1, 1),
    _RcPrQosPolicyNumPolicies_Type()
)
rcPrQosPolicyNumPolicies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosPolicyNumPolicies.setStatus("current")


class _RcPrQosTxQueueNumTemplates_Type(Integer32):
    """Custom type rcPrQosTxQueueNumTemplates based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 383),
    )


_RcPrQosTxQueueNumTemplates_Type.__name__ = "Integer32"
_RcPrQosTxQueueNumTemplates_Object = MibScalar
rcPrQosTxQueueNumTemplates = _RcPrQosTxQueueNumTemplates_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 1, 2),
    _RcPrQosTxQueueNumTemplates_Type()
)
rcPrQosTxQueueNumTemplates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueNumTemplates.setStatus("current")
_RcPrQosPolicyTable_Object = MibTable
rcPrQosPolicyTable = _RcPrQosPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcPrQosPolicyTable.setStatus("current")
_RcPrQosPolicyEntry_Object = MibTableRow
rcPrQosPolicyEntry = _RcPrQosPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 2, 1)
)
rcPrQosPolicyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrQosPolicyGpId"),
)
if mibBuilder.loadTexts:
    rcPrQosPolicyEntry.setStatus("current")


class _RcPrQosPolicyGpId_Type(Integer32):
    """Custom type rcPrQosPolicyGpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16383),
    )


_RcPrQosPolicyGpId_Type.__name__ = "Integer32"
_RcPrQosPolicyGpId_Object = MibTableColumn
rcPrQosPolicyGpId = _RcPrQosPolicyGpId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 2, 1, 1),
    _RcPrQosPolicyGpId_Type()
)
rcPrQosPolicyGpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosPolicyGpId.setStatus("current")


class _RcPrQosPolicyName_Type(DisplayString):
    """Custom type rcPrQosPolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrQosPolicyName_Type.__name__ = "DisplayString"
_RcPrQosPolicyName_Object = MibTableColumn
rcPrQosPolicyName = _RcPrQosPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 2, 1, 2),
    _RcPrQosPolicyName_Type()
)
rcPrQosPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosPolicyName.setStatus("current")


class _RcPrQosPolicyPeakRate_Type(Integer32):
    """Custom type rcPrQosPolicyPeakRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000000),
    )


_RcPrQosPolicyPeakRate_Type.__name__ = "Integer32"
_RcPrQosPolicyPeakRate_Object = MibTableColumn
rcPrQosPolicyPeakRate = _RcPrQosPolicyPeakRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 2, 1, 3),
    _RcPrQosPolicyPeakRate_Type()
)
rcPrQosPolicyPeakRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosPolicyPeakRate.setStatus("current")


class _RcPrQosPolicySvcRate_Type(Integer32):
    """Custom type rcPrQosPolicySvcRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000000),
    )


_RcPrQosPolicySvcRate_Type.__name__ = "Integer32"
_RcPrQosPolicySvcRate_Object = MibTableColumn
rcPrQosPolicySvcRate = _RcPrQosPolicySvcRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 2, 1, 4),
    _RcPrQosPolicySvcRate_Type()
)
rcPrQosPolicySvcRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosPolicySvcRate.setStatus("current")
_RcPrQosPolicyLaneMembers_Type = LaneSet
_RcPrQosPolicyLaneMembers_Object = MibTableColumn
rcPrQosPolicyLaneMembers = _RcPrQosPolicyLaneMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 2, 1, 5),
    _RcPrQosPolicyLaneMembers_Type()
)
rcPrQosPolicyLaneMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosPolicyLaneMembers.setStatus("current")
_RcPrQosPolicyRowStatus_Type = RowStatus
_RcPrQosPolicyRowStatus_Object = MibTableColumn
rcPrQosPolicyRowStatus = _RcPrQosPolicyRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 2, 1, 6),
    _RcPrQosPolicyRowStatus_Type()
)
rcPrQosPolicyRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosPolicyRowStatus.setStatus("current")
_RcPrQosLocalPolicyTable_Object = MibTable
rcPrQosLocalPolicyTable = _RcPrQosLocalPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3)
)
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyTable.setStatus("current")
_RcPrQosLocalPolicyEntry_Object = MibTableRow
rcPrQosLocalPolicyEntry = _RcPrQosLocalPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1)
)
rcPrQosLocalPolicyEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrQosLocalPolicyGpId"),
    (0, "RAPID-CITY", "rcPrQosLocalPolicyIndex"),
)
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyEntry.setStatus("current")


class _RcPrQosLocalPolicyGpId_Type(Integer32):
    """Custom type rcPrQosLocalPolicyGpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16383),
    )


_RcPrQosLocalPolicyGpId_Type.__name__ = "Integer32"
_RcPrQosLocalPolicyGpId_Object = MibTableColumn
rcPrQosLocalPolicyGpId = _RcPrQosLocalPolicyGpId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 1),
    _RcPrQosLocalPolicyGpId_Type()
)
rcPrQosLocalPolicyGpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyGpId.setStatus("current")


class _RcPrQosLocalPolicyIndex_Type(Integer32):
    """Custom type rcPrQosLocalPolicyIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16383),
    )


_RcPrQosLocalPolicyIndex_Type.__name__ = "Integer32"
_RcPrQosLocalPolicyIndex_Object = MibTableColumn
rcPrQosLocalPolicyIndex = _RcPrQosLocalPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 2),
    _RcPrQosLocalPolicyIndex_Type()
)
rcPrQosLocalPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyIndex.setStatus("current")


class _RcPrQosLocalPolicyPeakRate_Type(Integer32):
    """Custom type rcPrQosLocalPolicyPeakRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000000),
    )


_RcPrQosLocalPolicyPeakRate_Type.__name__ = "Integer32"
_RcPrQosLocalPolicyPeakRate_Object = MibTableColumn
rcPrQosLocalPolicyPeakRate = _RcPrQosLocalPolicyPeakRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 3),
    _RcPrQosLocalPolicyPeakRate_Type()
)
rcPrQosLocalPolicyPeakRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyPeakRate.setStatus("current")


class _RcPrQosLocalPolicySvcRate_Type(Integer32):
    """Custom type rcPrQosLocalPolicySvcRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000000),
    )


_RcPrQosLocalPolicySvcRate_Type.__name__ = "Integer32"
_RcPrQosLocalPolicySvcRate_Object = MibTableColumn
rcPrQosLocalPolicySvcRate = _RcPrQosLocalPolicySvcRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 4),
    _RcPrQosLocalPolicySvcRate_Type()
)
rcPrQosLocalPolicySvcRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicySvcRate.setStatus("current")
_RcPrQosLocalPolicyTotalPkts_Type = Counter64
_RcPrQosLocalPolicyTotalPkts_Object = MibTableColumn
rcPrQosLocalPolicyTotalPkts = _RcPrQosLocalPolicyTotalPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 5),
    _RcPrQosLocalPolicyTotalPkts_Type()
)
rcPrQosLocalPolicyTotalPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyTotalPkts.setStatus("current")
_RcPrQosLocalPolicyTotalBytes_Type = Counter64
_RcPrQosLocalPolicyTotalBytes_Object = MibTableColumn
rcPrQosLocalPolicyTotalBytes = _RcPrQosLocalPolicyTotalBytes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 6),
    _RcPrQosLocalPolicyTotalBytes_Type()
)
rcPrQosLocalPolicyTotalBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyTotalBytes.setStatus("current")
_RcPrQosLocalPolicyBytesOverPeak_Type = Counter64
_RcPrQosLocalPolicyBytesOverPeak_Object = MibTableColumn
rcPrQosLocalPolicyBytesOverPeak = _RcPrQosLocalPolicyBytesOverPeak_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 7),
    _RcPrQosLocalPolicyBytesOverPeak_Type()
)
rcPrQosLocalPolicyBytesOverPeak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyBytesOverPeak.setStatus("current")
_RcPrQosLocalPolicyBytesOverSvc_Type = Counter64
_RcPrQosLocalPolicyBytesOverSvc_Object = MibTableColumn
rcPrQosLocalPolicyBytesOverSvc = _RcPrQosLocalPolicyBytesOverSvc_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 8),
    _RcPrQosLocalPolicyBytesOverSvc_Type()
)
rcPrQosLocalPolicyBytesOverSvc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyBytesOverSvc.setStatus("current")
_RcPrQosLocalPolicyTotalPktsDropped_Type = Counter64
_RcPrQosLocalPolicyTotalPktsDropped_Object = MibTableColumn
rcPrQosLocalPolicyTotalPktsDropped = _RcPrQosLocalPolicyTotalPktsDropped_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 9),
    _RcPrQosLocalPolicyTotalPktsDropped_Type()
)
rcPrQosLocalPolicyTotalPktsDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyTotalPktsDropped.setStatus("current")


class _RcPrQosLocalPolicyLaneMember_Type(OctetString):
    """Custom type rcPrQosLocalPolicyLaneMember based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_RcPrQosLocalPolicyLaneMember_Type.__name__ = "OctetString"
_RcPrQosLocalPolicyLaneMember_Object = MibTableColumn
rcPrQosLocalPolicyLaneMember = _RcPrQosLocalPolicyLaneMember_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 3, 1, 10),
    _RcPrQosLocalPolicyLaneMember_Type()
)
rcPrQosLocalPolicyLaneMember.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosLocalPolicyLaneMember.setStatus("current")
_RcPrQosTxQueueTemplateTable_Object = MibTable
rcPrQosTxQueueTemplateTable = _RcPrQosTxQueueTemplateTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4)
)
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateTable.setStatus("current")
_RcPrQosTxQueueTemplateEntry_Object = MibTableRow
rcPrQosTxQueueTemplateEntry = _RcPrQosTxQueueTemplateEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1)
)
rcPrQosTxQueueTemplateEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrQosTxQueueTemplateId"),
)
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateEntry.setStatus("current")


class _RcPrQosTxQueueTemplateId_Type(Integer32):
    """Custom type rcPrQosTxQueueTemplateId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 386),
    )


_RcPrQosTxQueueTemplateId_Type.__name__ = "Integer32"
_RcPrQosTxQueueTemplateId_Object = MibTableColumn
rcPrQosTxQueueTemplateId = _RcPrQosTxQueueTemplateId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 1),
    _RcPrQosTxQueueTemplateId_Type()
)
rcPrQosTxQueueTemplateId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateId.setStatus("current")


class _RcPrQosTxQueueTemplateName_Type(DisplayString):
    """Custom type rcPrQosTxQueueTemplateName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrQosTxQueueTemplateName_Type.__name__ = "DisplayString"
_RcPrQosTxQueueTemplateName_Object = MibTableColumn
rcPrQosTxQueueTemplateName = _RcPrQosTxQueueTemplateName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 2),
    _RcPrQosTxQueueTemplateName_Type()
)
rcPrQosTxQueueTemplateName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateName.setStatus("current")


class _RcPrQosTxQueueTemplateMaxQueues_Type(Integer32):
    """Custom type rcPrQosTxQueueTemplateMaxQueues based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(8,
              64)
        )
    )
    namedValues = NamedValues(
        *(("eight", 8),
          ("sixtyfour", 64))
    )


_RcPrQosTxQueueTemplateMaxQueues_Type.__name__ = "Integer32"
_RcPrQosTxQueueTemplateMaxQueues_Object = MibTableColumn
rcPrQosTxQueueTemplateMaxQueues = _RcPrQosTxQueueTemplateMaxQueues_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 3),
    _RcPrQosTxQueueTemplateMaxQueues_Type()
)
rcPrQosTxQueueTemplateMaxQueues.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateMaxQueues.setStatus("current")


class _RcPrQosTxQueueTemplateBalancedQueues_Type(Integer32):
    """Custom type rcPrQosTxQueueTemplateBalancedQueues based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 48),
    )


_RcPrQosTxQueueTemplateBalancedQueues_Type.__name__ = "Integer32"
_RcPrQosTxQueueTemplateBalancedQueues_Object = MibTableColumn
rcPrQosTxQueueTemplateBalancedQueues = _RcPrQosTxQueueTemplateBalancedQueues_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 4),
    _RcPrQosTxQueueTemplateBalancedQueues_Type()
)
rcPrQosTxQueueTemplateBalancedQueues.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateBalancedQueues.setStatus("current")


class _RcPrQosTxQueueTemplateHiPriQueues_Type(Integer32):
    """Custom type rcPrQosTxQueueTemplateHiPriQueues based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RcPrQosTxQueueTemplateHiPriQueues_Type.__name__ = "Integer32"
_RcPrQosTxQueueTemplateHiPriQueues_Object = MibTableColumn
rcPrQosTxQueueTemplateHiPriQueues = _RcPrQosTxQueueTemplateHiPriQueues_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 5),
    _RcPrQosTxQueueTemplateHiPriQueues_Type()
)
rcPrQosTxQueueTemplateHiPriQueues.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateHiPriQueues.setStatus("current")


class _RcPrQosTxQueueTemplateLoPriQueues_Type(Integer32):
    """Custom type rcPrQosTxQueueTemplateLoPriQueues based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RcPrQosTxQueueTemplateLoPriQueues_Type.__name__ = "Integer32"
_RcPrQosTxQueueTemplateLoPriQueues_Object = MibTableColumn
rcPrQosTxQueueTemplateLoPriQueues = _RcPrQosTxQueueTemplateLoPriQueues_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 6),
    _RcPrQosTxQueueTemplateLoPriQueues_Type()
)
rcPrQosTxQueueTemplateLoPriQueues.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateLoPriQueues.setStatus("current")
_RcPrQosTxQueueTemplateTotalQueues_Type = Integer32
_RcPrQosTxQueueTemplateTotalQueues_Object = MibTableColumn
rcPrQosTxQueueTemplateTotalQueues = _RcPrQosTxQueueTemplateTotalQueues_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 7),
    _RcPrQosTxQueueTemplateTotalQueues_Type()
)
rcPrQosTxQueueTemplateTotalQueues.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateTotalQueues.setStatus("current")


class _RcPrQosTxQueueTemplateBalancedQList_Type(OctetString):
    """Custom type rcPrQosTxQueueTemplateBalancedQList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 200),
    )


_RcPrQosTxQueueTemplateBalancedQList_Type.__name__ = "OctetString"
_RcPrQosTxQueueTemplateBalancedQList_Object = MibTableColumn
rcPrQosTxQueueTemplateBalancedQList = _RcPrQosTxQueueTemplateBalancedQList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 8),
    _RcPrQosTxQueueTemplateBalancedQList_Type()
)
rcPrQosTxQueueTemplateBalancedQList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateBalancedQList.setStatus("current")


class _RcPrQosTxQueueTemplateHiPriQList_Type(OctetString):
    """Custom type rcPrQosTxQueueTemplateHiPriQList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 200),
    )


_RcPrQosTxQueueTemplateHiPriQList_Type.__name__ = "OctetString"
_RcPrQosTxQueueTemplateHiPriQList_Object = MibTableColumn
rcPrQosTxQueueTemplateHiPriQList = _RcPrQosTxQueueTemplateHiPriQList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 9),
    _RcPrQosTxQueueTemplateHiPriQList_Type()
)
rcPrQosTxQueueTemplateHiPriQList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateHiPriQList.setStatus("current")


class _RcPrQosTxQueueTemplateLoPriQList_Type(OctetString):
    """Custom type rcPrQosTxQueueTemplateLoPriQList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 200),
    )


_RcPrQosTxQueueTemplateLoPriQList_Type.__name__ = "OctetString"
_RcPrQosTxQueueTemplateLoPriQList_Object = MibTableColumn
rcPrQosTxQueueTemplateLoPriQList = _RcPrQosTxQueueTemplateLoPriQList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 10),
    _RcPrQosTxQueueTemplateLoPriQList_Type()
)
rcPrQosTxQueueTemplateLoPriQList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateLoPriQList.setStatus("current")


class _RcPrQosTxQueueTemplateTotalQLists_Type(OctetString):
    """Custom type rcPrQosTxQueueTemplateTotalQLists based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 600),
    )


_RcPrQosTxQueueTemplateTotalQLists_Type.__name__ = "OctetString"
_RcPrQosTxQueueTemplateTotalQLists_Object = MibTableColumn
rcPrQosTxQueueTemplateTotalQLists = _RcPrQosTxQueueTemplateTotalQLists_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 11),
    _RcPrQosTxQueueTemplateTotalQLists_Type()
)
rcPrQosTxQueueTemplateTotalQLists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateTotalQLists.setStatus("current")


class _RcPrQosTxQueueTemplateMinRateTotal_Type(Integer32):
    """Custom type rcPrQosTxQueueTemplateMinRateTotal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RcPrQosTxQueueTemplateMinRateTotal_Type.__name__ = "Integer32"
_RcPrQosTxQueueTemplateMinRateTotal_Object = MibTableColumn
rcPrQosTxQueueTemplateMinRateTotal = _RcPrQosTxQueueTemplateMinRateTotal_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 12),
    _RcPrQosTxQueueTemplateMinRateTotal_Type()
)
rcPrQosTxQueueTemplateMinRateTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateMinRateTotal.setStatus("current")


class _RcPrQosTxQueueTemplateMaxRateHiPri_Type(Integer32):
    """Custom type rcPrQosTxQueueTemplateMaxRateHiPri based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RcPrQosTxQueueTemplateMaxRateHiPri_Type.__name__ = "Integer32"
_RcPrQosTxQueueTemplateMaxRateHiPri_Object = MibTableColumn
rcPrQosTxQueueTemplateMaxRateHiPri = _RcPrQosTxQueueTemplateMaxRateHiPri_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 13),
    _RcPrQosTxQueueTemplateMaxRateHiPri_Type()
)
rcPrQosTxQueueTemplateMaxRateHiPri.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateMaxRateHiPri.setStatus("current")
_RcPrQosTxQueueTemplatePortMembers_Type = PortSet
_RcPrQosTxQueueTemplatePortMembers_Object = MibTableColumn
rcPrQosTxQueueTemplatePortMembers = _RcPrQosTxQueueTemplatePortMembers_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 14),
    _RcPrQosTxQueueTemplatePortMembers_Type()
)
rcPrQosTxQueueTemplatePortMembers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplatePortMembers.setStatus("current")


class _RcPrQosTxQueueTemplateFlags_Type(Integer32):
    """Custom type rcPrQosTxQueueTemplateFlags based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("committed", 2),
          ("created", 1),
          ("modified", 3))
    )


_RcPrQosTxQueueTemplateFlags_Type.__name__ = "Integer32"
_RcPrQosTxQueueTemplateFlags_Object = MibTableColumn
rcPrQosTxQueueTemplateFlags = _RcPrQosTxQueueTemplateFlags_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 15),
    _RcPrQosTxQueueTemplateFlags_Type()
)
rcPrQosTxQueueTemplateFlags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateFlags.setStatus("current")


class _RcPrQosTxQueueTemplateApply_Type(TruthValue):
    """Custom type rcPrQosTxQueueTemplateApply based on TruthValue"""


_RcPrQosTxQueueTemplateApply_Object = MibTableColumn
rcPrQosTxQueueTemplateApply = _RcPrQosTxQueueTemplateApply_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 16),
    _RcPrQosTxQueueTemplateApply_Type()
)
rcPrQosTxQueueTemplateApply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateApply.setStatus("current")
_RcPrQosTxQueueTemplateRowStatus_Type = RowStatus
_RcPrQosTxQueueTemplateRowStatus_Object = MibTableColumn
rcPrQosTxQueueTemplateRowStatus = _RcPrQosTxQueueTemplateRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 4, 1, 17),
    _RcPrQosTxQueueTemplateRowStatus_Type()
)
rcPrQosTxQueueTemplateRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTemplateRowStatus.setStatus("current")
_RcPrQosTxQueueTable_Object = MibTable
rcPrQosTxQueueTable = _RcPrQosTxQueueTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5)
)
if mibBuilder.loadTexts:
    rcPrQosTxQueueTable.setStatus("current")
_RcPrQosTxQueueEntry_Object = MibTableRow
rcPrQosTxQueueEntry = _RcPrQosTxQueueEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1)
)
rcPrQosTxQueueEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrQosTxQueueTid"),
    (0, "RAPID-CITY", "rcPrQosTxQueueQid"),
)
if mibBuilder.loadTexts:
    rcPrQosTxQueueEntry.setStatus("current")


class _RcPrQosTxQueueTid_Type(Integer32):
    """Custom type rcPrQosTxQueueTid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 386),
    )


_RcPrQosTxQueueTid_Type.__name__ = "Integer32"
_RcPrQosTxQueueTid_Object = MibTableColumn
rcPrQosTxQueueTid = _RcPrQosTxQueueTid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 1),
    _RcPrQosTxQueueTid_Type()
)
rcPrQosTxQueueTid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueTid.setStatus("current")


class _RcPrQosTxQueueQid_Type(Integer32):
    """Custom type rcPrQosTxQueueQid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcPrQosTxQueueQid_Type.__name__ = "Integer32"
_RcPrQosTxQueueQid_Object = MibTableColumn
rcPrQosTxQueueQid = _RcPrQosTxQueueQid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 2),
    _RcPrQosTxQueueQid_Type()
)
rcPrQosTxQueueQid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueQid.setStatus("current")


class _RcPrQosTxQueueName_Type(DisplayString):
    """Custom type rcPrQosTxQueueName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrQosTxQueueName_Type.__name__ = "DisplayString"
_RcPrQosTxQueueName_Object = MibTableColumn
rcPrQosTxQueueName = _RcPrQosTxQueueName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 3),
    _RcPrQosTxQueueName_Type()
)
rcPrQosTxQueueName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueName.setStatus("current")


class _RcPrQosTxQueueStyle_Type(Integer32):
    """Custom type rcPrQosTxQueueStyle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("balanced", 2),
          ("hipri", 1),
          ("lopri", 3))
    )


_RcPrQosTxQueueStyle_Type.__name__ = "Integer32"
_RcPrQosTxQueueStyle_Object = MibTableColumn
rcPrQosTxQueueStyle = _RcPrQosTxQueueStyle_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 4),
    _RcPrQosTxQueueStyle_Type()
)
rcPrQosTxQueueStyle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueStyle.setStatus("current")
_RcPrQosTxQueueWeight_Type = Integer32
_RcPrQosTxQueueWeight_Object = MibTableColumn
rcPrQosTxQueueWeight = _RcPrQosTxQueueWeight_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 5),
    _RcPrQosTxQueueWeight_Type()
)
rcPrQosTxQueueWeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueWeight.setStatus("current")
_RcPrQosTxQueueMaxRate_Type = Integer32
_RcPrQosTxQueueMaxRate_Object = MibTableColumn
rcPrQosTxQueueMaxRate = _RcPrQosTxQueueMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 6),
    _RcPrQosTxQueueMaxRate_Type()
)
rcPrQosTxQueueMaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueMaxRate.setStatus("current")
_RcPrQosTxQueueMinRate_Type = Integer32
_RcPrQosTxQueueMinRate_Object = MibTableColumn
rcPrQosTxQueueMinRate = _RcPrQosTxQueueMinRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 7),
    _RcPrQosTxQueueMinRate_Type()
)
rcPrQosTxQueueMinRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueMinRate.setStatus("current")
_RcPrQosTxQueueBquantum_Type = Integer32
_RcPrQosTxQueueBquantum_Object = MibTableColumn
rcPrQosTxQueueBquantum = _RcPrQosTxQueueBquantum_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 8),
    _RcPrQosTxQueueBquantum_Type()
)
rcPrQosTxQueueBquantum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueBquantum.setStatus("current")
_RcPrQosTxQueueMaxLength_Type = Integer32
_RcPrQosTxQueueMaxLength_Object = MibTableColumn
rcPrQosTxQueueMaxLength = _RcPrQosTxQueueMaxLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 9),
    _RcPrQosTxQueueMaxLength_Type()
)
rcPrQosTxQueueMaxLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueMaxLength.setStatus("current")


class _RcPrQosTxQueueWredCurveSet_Type(Integer32):
    """Custom type rcPrQosTxQueueWredCurveSet based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("highDrop", 4),
          ("lowDrop", 2),
          ("mediumDrop", 3),
          ("tailDrop", 1))
    )


_RcPrQosTxQueueWredCurveSet_Type.__name__ = "Integer32"
_RcPrQosTxQueueWredCurveSet_Object = MibTableColumn
rcPrQosTxQueueWredCurveSet = _RcPrQosTxQueueWredCurveSet_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 10),
    _RcPrQosTxQueueWredCurveSet_Type()
)
rcPrQosTxQueueWredCurveSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueWredCurveSet.setStatus("deprecated")
_RcPrQosTxQueueRowStatus_Type = RowStatus
_RcPrQosTxQueueRowStatus_Object = MibTableColumn
rcPrQosTxQueueRowStatus = _RcPrQosTxQueueRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 5, 1, 11),
    _RcPrQosTxQueueRowStatus_Type()
)
rcPrQosTxQueueRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosTxQueueRowStatus.setStatus("current")
_RcPrQosTxQueueStatsTable_Object = MibTable
rcPrQosTxQueueStatsTable = _RcPrQosTxQueueStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 6)
)
if mibBuilder.loadTexts:
    rcPrQosTxQueueStatsTable.setStatus("current")
_RcPrQosTxQueueStatsEntry_Object = MibTableRow
rcPrQosTxQueueStatsEntry = _RcPrQosTxQueueStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 6, 1)
)
rcPrQosTxQueueStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrQosTxQueueStatsPort"),
    (0, "RAPID-CITY", "rcPrQosTxQueueStatsQid"),
)
if mibBuilder.loadTexts:
    rcPrQosTxQueueStatsEntry.setStatus("current")
_RcPrQosTxQueueStatsPort_Type = InterfaceIndex
_RcPrQosTxQueueStatsPort_Object = MibTableColumn
rcPrQosTxQueueStatsPort = _RcPrQosTxQueueStatsPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 6, 1, 1),
    _RcPrQosTxQueueStatsPort_Type()
)
rcPrQosTxQueueStatsPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueStatsPort.setStatus("current")


class _RcPrQosTxQueueStatsQid_Type(Integer32):
    """Custom type rcPrQosTxQueueStatsQid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcPrQosTxQueueStatsQid_Type.__name__ = "Integer32"
_RcPrQosTxQueueStatsQid_Object = MibTableColumn
rcPrQosTxQueueStatsQid = _RcPrQosTxQueueStatsQid_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 6, 1, 2),
    _RcPrQosTxQueueStatsQid_Type()
)
rcPrQosTxQueueStatsQid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueStatsQid.setStatus("current")
_RcPrQosTxQueueStatsTotalPages_Type = Counter64
_RcPrQosTxQueueStatsTotalPages_Object = MibTableColumn
rcPrQosTxQueueStatsTotalPages = _RcPrQosTxQueueStatsTotalPages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 6, 1, 3),
    _RcPrQosTxQueueStatsTotalPages_Type()
)
rcPrQosTxQueueStatsTotalPages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueStatsTotalPages.setStatus("current")
_RcPrQosTxQueueStatsDroppedPages_Type = Counter64
_RcPrQosTxQueueStatsDroppedPages_Object = MibTableColumn
rcPrQosTxQueueStatsDroppedPages = _RcPrQosTxQueueStatsDroppedPages_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 6, 1, 4),
    _RcPrQosTxQueueStatsDroppedPages_Type()
)
rcPrQosTxQueueStatsDroppedPages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueStatsDroppedPages.setStatus("current")


class _RcPrQosTxQueueStatsUtilization_Type(Integer32):
    """Custom type rcPrQosTxQueueStatsUtilization based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RcPrQosTxQueueStatsUtilization_Type.__name__ = "Integer32"
_RcPrQosTxQueueStatsUtilization_Object = MibTableColumn
rcPrQosTxQueueStatsUtilization = _RcPrQosTxQueueStatsUtilization_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 6, 1, 5),
    _RcPrQosTxQueueStatsUtilization_Type()
)
rcPrQosTxQueueStatsUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosTxQueueStatsUtilization.setStatus("current")
_RcPrQosIngressExpToQosTable_Object = MibTable
rcPrQosIngressExpToQosTable = _RcPrQosIngressExpToQosTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 7)
)
if mibBuilder.loadTexts:
    rcPrQosIngressExpToQosTable.setStatus("current")
_RcPrQosIngressExpToQosEntry_Object = MibTableRow
rcPrQosIngressExpToQosEntry = _RcPrQosIngressExpToQosEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 7, 1)
)
rcPrQosIngressExpToQosEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrQosIngressExpToQosIndex"),
)
if mibBuilder.loadTexts:
    rcPrQosIngressExpToQosEntry.setStatus("current")


class _RcPrQosIngressExpToQosIndex_Type(Integer32):
    """Custom type rcPrQosIngressExpToQosIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RcPrQosIngressExpToQosIndex_Type.__name__ = "Integer32"
_RcPrQosIngressExpToQosIndex_Object = MibTableColumn
rcPrQosIngressExpToQosIndex = _RcPrQosIngressExpToQosIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 7, 1, 1),
    _RcPrQosIngressExpToQosIndex_Type()
)
rcPrQosIngressExpToQosIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcPrQosIngressExpToQosIndex.setStatus("current")


class _RcPrQosIngressExpToQosMplsExp_Type(Integer32):
    """Custom type rcPrQosIngressExpToQosMplsExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcPrQosIngressExpToQosMplsExp_Type.__name__ = "Integer32"
_RcPrQosIngressExpToQosMplsExp_Object = MibTableColumn
rcPrQosIngressExpToQosMplsExp = _RcPrQosIngressExpToQosMplsExp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 7, 1, 2),
    _RcPrQosIngressExpToQosMplsExp_Type()
)
rcPrQosIngressExpToQosMplsExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosIngressExpToQosMplsExp.setStatus("current")


class _RcPrQosIngressExpToQosLevel_Type(Integer32):
    """Custom type rcPrQosIngressExpToQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcPrQosIngressExpToQosLevel_Type.__name__ = "Integer32"
_RcPrQosIngressExpToQosLevel_Object = MibTableColumn
rcPrQosIngressExpToQosLevel = _RcPrQosIngressExpToQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 7, 1, 3),
    _RcPrQosIngressExpToQosLevel_Type()
)
rcPrQosIngressExpToQosLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosIngressExpToQosLevel.setStatus("current")
_RcPrQosIngressExpToQosRowStatus_Type = RowStatus
_RcPrQosIngressExpToQosRowStatus_Object = MibTableColumn
rcPrQosIngressExpToQosRowStatus = _RcPrQosIngressExpToQosRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 7, 1, 4),
    _RcPrQosIngressExpToQosRowStatus_Type()
)
rcPrQosIngressExpToQosRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosIngressExpToQosRowStatus.setStatus("current")
_RcPrQosEgressQosToExpTable_Object = MibTable
rcPrQosEgressQosToExpTable = _RcPrQosEgressQosToExpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 8)
)
if mibBuilder.loadTexts:
    rcPrQosEgressQosToExpTable.setStatus("current")
_RcPrQosEgressQosToExpEntry_Object = MibTableRow
rcPrQosEgressQosToExpEntry = _RcPrQosEgressQosToExpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 8, 1)
)
rcPrQosEgressQosToExpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrQosEgressQosToExpIndex"),
)
if mibBuilder.loadTexts:
    rcPrQosEgressQosToExpEntry.setStatus("current")


class _RcPrQosEgressQosToExpIndex_Type(Integer32):
    """Custom type rcPrQosEgressQosToExpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RcPrQosEgressQosToExpIndex_Type.__name__ = "Integer32"
_RcPrQosEgressQosToExpIndex_Object = MibTableColumn
rcPrQosEgressQosToExpIndex = _RcPrQosEgressQosToExpIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 8, 1, 1),
    _RcPrQosEgressQosToExpIndex_Type()
)
rcPrQosEgressQosToExpIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcPrQosEgressQosToExpIndex.setStatus("current")


class _RcPrQosEgressQosToExpQosLevel_Type(Integer32):
    """Custom type rcPrQosEgressQosToExpQosLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcPrQosEgressQosToExpQosLevel_Type.__name__ = "Integer32"
_RcPrQosEgressQosToExpQosLevel_Object = MibTableColumn
rcPrQosEgressQosToExpQosLevel = _RcPrQosEgressQosToExpQosLevel_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 8, 1, 2),
    _RcPrQosEgressQosToExpQosLevel_Type()
)
rcPrQosEgressQosToExpQosLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrQosEgressQosToExpQosLevel.setStatus("current")


class _RcPrQosEgressQosToExpMplsExp_Type(Integer32):
    """Custom type rcPrQosEgressQosToExpMplsExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RcPrQosEgressQosToExpMplsExp_Type.__name__ = "Integer32"
_RcPrQosEgressQosToExpMplsExp_Object = MibTableColumn
rcPrQosEgressQosToExpMplsExp = _RcPrQosEgressQosToExpMplsExp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 8, 1, 3),
    _RcPrQosEgressQosToExpMplsExp_Type()
)
rcPrQosEgressQosToExpMplsExp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosEgressQosToExpMplsExp.setStatus("current")
_RcPrQosEgressQosToExpRowStatus_Type = RowStatus
_RcPrQosEgressQosToExpRowStatus_Object = MibTableColumn
rcPrQosEgressQosToExpRowStatus = _RcPrQosEgressQosToExpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 1, 8, 1, 4),
    _RcPrQosEgressQosToExpRowStatus_Type()
)
rcPrQosEgressQosToExpRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrQosEgressQosToExpRowStatus.setStatus("current")
_RcPrFilter_ObjectIdentity = ObjectIdentity
rcPrFilter = _RcPrFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2)
)
_RcPrFilterScalars_ObjectIdentity = ObjectIdentity
rcPrFilterScalars = _RcPrFilterScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 1)
)


class _RcPrFilterActTableSize_Type(Integer32):
    """Custom type rcPrFilterActTableSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterActTableSize_Type.__name__ = "Integer32"
_RcPrFilterActTableSize_Object = MibScalar
rcPrFilterActTableSize = _RcPrFilterActTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 1, 1),
    _RcPrFilterActTableSize_Type()
)
rcPrFilterActTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterActTableSize.setStatus("current")


class _RcPrFilterAclTableSize_Type(Integer32):
    """Custom type rcPrFilterAclTableSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAclTableSize_Type.__name__ = "Integer32"
_RcPrFilterAclTableSize_Object = MibScalar
rcPrFilterAclTableSize = _RcPrFilterAclTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 1, 2),
    _RcPrFilterAclTableSize_Type()
)
rcPrFilterAclTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAclTableSize.setStatus("current")


class _RcPrFilterAceTableSize_Type(Integer32):
    """Custom type rcPrFilterAceTableSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000),
    )


_RcPrFilterAceTableSize_Type.__name__ = "Integer32"
_RcPrFilterAceTableSize_Object = MibScalar
rcPrFilterAceTableSize = _RcPrFilterAceTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 1, 3),
    _RcPrFilterAceTableSize_Type()
)
rcPrFilterAceTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceTableSize.setStatus("current")
_RcPrFilterAct_ObjectIdentity = ObjectIdentity
rcPrFilterAct = _RcPrFilterAct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2)
)
_RcPrFilterActTable_Object = MibTable
rcPrFilterActTable = _RcPrFilterActTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    rcPrFilterActTable.setStatus("current")
_RcPrFilterActEntry_Object = MibTableRow
rcPrFilterActEntry = _RcPrFilterActEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1)
)
rcPrFilterActEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterActId"),
)
if mibBuilder.loadTexts:
    rcPrFilterActEntry.setStatus("current")


class _RcPrFilterActId_Type(Integer32):
    """Custom type rcPrFilterActId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterActId_Type.__name__ = "Integer32"
_RcPrFilterActId_Object = MibTableColumn
rcPrFilterActId = _RcPrFilterActId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 1),
    _RcPrFilterActId_Type()
)
rcPrFilterActId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterActId.setStatus("current")


class _RcPrFilterActName_Type(DisplayString):
    """Custom type rcPrFilterActName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterActName_Type.__name__ = "DisplayString"
_RcPrFilterActName_Object = MibTableColumn
rcPrFilterActName = _RcPrFilterActName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 2),
    _RcPrFilterActName_Type()
)
rcPrFilterActName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActName.setStatus("current")


class _RcPrFilterActArpAttrs_Type(Integer32):
    """Custom type rcPrFilterActArpAttrs based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_RcPrFilterActArpAttrs_Type.__name__ = "Integer32"
_RcPrFilterActArpAttrs_Object = MibTableColumn
rcPrFilterActArpAttrs = _RcPrFilterActArpAttrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 3),
    _RcPrFilterActArpAttrs_Type()
)
rcPrFilterActArpAttrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActArpAttrs.setStatus("current")


class _RcPrFilterActEthernetAttrs_Type(Integer32):
    """Custom type rcPrFilterActEthernetAttrs based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcPrFilterActEthernetAttrs_Type.__name__ = "Integer32"
_RcPrFilterActEthernetAttrs_Object = MibTableColumn
rcPrFilterActEthernetAttrs = _RcPrFilterActEthernetAttrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 4),
    _RcPrFilterActEthernetAttrs_Type()
)
rcPrFilterActEthernetAttrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActEthernetAttrs.setStatus("current")


class _RcPrFilterActIpAttrs_Type(Integer32):
    """Custom type rcPrFilterActIpAttrs based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcPrFilterActIpAttrs_Type.__name__ = "Integer32"
_RcPrFilterActIpAttrs_Object = MibTableColumn
rcPrFilterActIpAttrs = _RcPrFilterActIpAttrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 5),
    _RcPrFilterActIpAttrs_Type()
)
rcPrFilterActIpAttrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActIpAttrs.setStatus("current")


class _RcPrFilterActProtocolAttrs_Type(Integer32):
    """Custom type rcPrFilterActProtocolAttrs based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcPrFilterActProtocolAttrs_Type.__name__ = "Integer32"
_RcPrFilterActProtocolAttrs_Object = MibTableColumn
rcPrFilterActProtocolAttrs = _RcPrFilterActProtocolAttrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 6),
    _RcPrFilterActProtocolAttrs_Type()
)
rcPrFilterActProtocolAttrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActProtocolAttrs.setStatus("current")


class _RcPrFilterActApply_Type(TruthValue):
    """Custom type rcPrFilterActApply based on TruthValue"""


_RcPrFilterActApply_Object = MibTableColumn
rcPrFilterActApply = _RcPrFilterActApply_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 7),
    _RcPrFilterActApply_Type()
)
rcPrFilterActApply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActApply.setStatus("current")
_RcPrFilterActRowStatus_Type = RowStatus
_RcPrFilterActRowStatus_Object = MibTableColumn
rcPrFilterActRowStatus = _RcPrFilterActRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 8),
    _RcPrFilterActRowStatus_Type()
)
rcPrFilterActRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActRowStatus.setStatus("current")


class _RcPrFilterActIpv6Attrs_Type(Integer32):
    """Custom type rcPrFilterActIpv6Attrs based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_RcPrFilterActIpv6Attrs_Type.__name__ = "Integer32"
_RcPrFilterActIpv6Attrs_Object = MibTableColumn
rcPrFilterActIpv6Attrs = _RcPrFilterActIpv6Attrs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 1, 1, 9),
    _RcPrFilterActIpv6Attrs_Type()
)
rcPrFilterActIpv6Attrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActIpv6Attrs.setStatus("current")
_RcPrFilterActPatternTable_Object = MibTable
rcPrFilterActPatternTable = _RcPrFilterActPatternTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2)
)
if mibBuilder.loadTexts:
    rcPrFilterActPatternTable.setStatus("current")
_RcPrFilterActPatternEntry_Object = MibTableRow
rcPrFilterActPatternEntry = _RcPrFilterActPatternEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2, 1)
)
rcPrFilterActPatternEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterActPatternActId"),
    (0, "RAPID-CITY", "rcPrFilterActPatternIndex"),
)
if mibBuilder.loadTexts:
    rcPrFilterActPatternEntry.setStatus("current")


class _RcPrFilterActPatternActId_Type(Integer32):
    """Custom type rcPrFilterActPatternActId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterActPatternActId_Type.__name__ = "Integer32"
_RcPrFilterActPatternActId_Object = MibTableColumn
rcPrFilterActPatternActId = _RcPrFilterActPatternActId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2, 1, 1),
    _RcPrFilterActPatternActId_Type()
)
rcPrFilterActPatternActId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterActPatternActId.setStatus("current")


class _RcPrFilterActPatternIndex_Type(Integer32):
    """Custom type rcPrFilterActPatternIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RcPrFilterActPatternIndex_Type.__name__ = "Integer32"
_RcPrFilterActPatternIndex_Object = MibTableColumn
rcPrFilterActPatternIndex = _RcPrFilterActPatternIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2, 1, 2),
    _RcPrFilterActPatternIndex_Type()
)
rcPrFilterActPatternIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterActPatternIndex.setStatus("current")


class _RcPrFilterActPatternName_Type(DisplayString):
    """Custom type rcPrFilterActPatternName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterActPatternName_Type.__name__ = "DisplayString"
_RcPrFilterActPatternName_Object = MibTableColumn
rcPrFilterActPatternName = _RcPrFilterActPatternName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2, 1, 3),
    _RcPrFilterActPatternName_Type()
)
rcPrFilterActPatternName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActPatternName.setStatus("current")


class _RcPrFilterActPatternBase_Type(Integer32):
    """Custom type rcPrFilterActPatternBase based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25)
        )
    )
    namedValues = NamedValues(
        *(("arpBegin", 5),
          ("ethTypeLenBegin", 4),
          ("etherBegin", 1),
          ("etherEnd", 20),
          ("icmpMsgBegin", 22),
          ("ipDstBegin", 12),
          ("ipHdrBegin", 6),
          ("ipHdrEnd", 21),
          ("ipOptionsBegin", 7),
          ("ipPayloadBegin", 8),
          ("ipProtoBegin", 10),
          ("ipSrcBegin", 11),
          ("ipTosBegin", 9),
          ("ipv6HdrBegin", 25),
          ("macDstBegin", 2),
          ("macSrcBegin", 3),
          ("none", 0),
          ("tcpBegin", 13),
          ("tcpDstportBegin", 15),
          ("tcpEnd", 23),
          ("tcpFlagsEnd", 16),
          ("tcpSrcportBegin", 14),
          ("udpBegin", 17),
          ("udpDstportBegin", 19),
          ("udpEnd", 24),
          ("udpSrcportBegin", 18))
    )


_RcPrFilterActPatternBase_Type.__name__ = "Integer32"
_RcPrFilterActPatternBase_Object = MibTableColumn
rcPrFilterActPatternBase = _RcPrFilterActPatternBase_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2, 1, 4),
    _RcPrFilterActPatternBase_Type()
)
rcPrFilterActPatternBase.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActPatternBase.setStatus("current")


class _RcPrFilterActPatternOffset_Type(Integer32):
    """Custom type rcPrFilterActPatternOffset based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 76800),
    )


_RcPrFilterActPatternOffset_Type.__name__ = "Integer32"
_RcPrFilterActPatternOffset_Object = MibTableColumn
rcPrFilterActPatternOffset = _RcPrFilterActPatternOffset_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2, 1, 5),
    _RcPrFilterActPatternOffset_Type()
)
rcPrFilterActPatternOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActPatternOffset.setStatus("current")


class _RcPrFilterActPatternLength_Type(Integer32):
    """Custom type rcPrFilterActPatternLength based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 56),
    )


_RcPrFilterActPatternLength_Type.__name__ = "Integer32"
_RcPrFilterActPatternLength_Object = MibTableColumn
rcPrFilterActPatternLength = _RcPrFilterActPatternLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2, 1, 6),
    _RcPrFilterActPatternLength_Type()
)
rcPrFilterActPatternLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActPatternLength.setStatus("current")
_RcPrFilterActPatternRowStatus_Type = RowStatus
_RcPrFilterActPatternRowStatus_Object = MibTableColumn
rcPrFilterActPatternRowStatus = _RcPrFilterActPatternRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 2, 2, 1, 7),
    _RcPrFilterActPatternRowStatus_Type()
)
rcPrFilterActPatternRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterActPatternRowStatus.setStatus("current")
_RcPrFilterAcl_ObjectIdentity = ObjectIdentity
rcPrFilterAcl = _RcPrFilterAcl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3)
)
_RcPrFilterAclTable_Object = MibTable
rcPrFilterAclTable = _RcPrFilterAclTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1)
)
if mibBuilder.loadTexts:
    rcPrFilterAclTable.setStatus("current")
_RcPrFilterAclEntry_Object = MibTableRow
rcPrFilterAclEntry = _RcPrFilterAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1)
)
rcPrFilterAclEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAclId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAclEntry.setStatus("current")


class _RcPrFilterAclId_Type(Integer32):
    """Custom type rcPrFilterAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAclId_Type.__name__ = "Integer32"
_RcPrFilterAclId_Object = MibTableColumn
rcPrFilterAclId = _RcPrFilterAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 1),
    _RcPrFilterAclId_Type()
)
rcPrFilterAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAclId.setStatus("current")


class _RcPrFilterAclActId_Type(Integer32):
    """Custom type rcPrFilterAclActId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAclActId_Type.__name__ = "Integer32"
_RcPrFilterAclActId_Object = MibTableColumn
rcPrFilterAclActId = _RcPrFilterAclActId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 2),
    _RcPrFilterAclActId_Type()
)
rcPrFilterAclActId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclActId.setStatus("current")


class _RcPrFilterAclName_Type(DisplayString):
    """Custom type rcPrFilterAclName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterAclName_Type.__name__ = "DisplayString"
_RcPrFilterAclName_Object = MibTableColumn
rcPrFilterAclName = _RcPrFilterAclName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 3),
    _RcPrFilterAclName_Type()
)
rcPrFilterAclName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclName.setStatus("current")


class _RcPrFilterAclType_Type(Integer32):
    """Custom type rcPrFilterAclType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inPort", 3),
          ("inVlan", 1),
          ("outPort", 4),
          ("outVlan", 2))
    )


_RcPrFilterAclType_Type.__name__ = "Integer32"
_RcPrFilterAclType_Object = MibTableColumn
rcPrFilterAclType = _RcPrFilterAclType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 4),
    _RcPrFilterAclType_Type()
)
rcPrFilterAclType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclType.setStatus("current")


class _RcPrFilterAclAceListSize_Type(Integer32):
    """Custom type rcPrFilterAclAceListSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RcPrFilterAclAceListSize_Type.__name__ = "Integer32"
_RcPrFilterAclAceListSize_Object = MibTableColumn
rcPrFilterAclAceListSize = _RcPrFilterAclAceListSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 5),
    _RcPrFilterAclAceListSize_Type()
)
rcPrFilterAclAceListSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAclAceListSize.setStatus("current")


class _RcPrFilterAclDefaultAction_Type(Integer32):
    """Custom type rcPrFilterAclDefaultAction based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 1),
          ("permit", 2))
    )


_RcPrFilterAclDefaultAction_Type.__name__ = "Integer32"
_RcPrFilterAclDefaultAction_Object = MibTableColumn
rcPrFilterAclDefaultAction = _RcPrFilterAclDefaultAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 6),
    _RcPrFilterAclDefaultAction_Type()
)
rcPrFilterAclDefaultAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclDefaultAction.setStatus("current")


class _RcPrFilterAclGlobalAction_Type(Integer32):
    """Custom type rcPrFilterAclGlobalAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("count", 3),
          ("count-ipfix", 7),
          ("ipfix", 5),
          ("mirror", 2),
          ("mirror-count", 4),
          ("mirror-count-ipfix", 8),
          ("mirror-ipfix", 6),
          ("none", 1))
    )


_RcPrFilterAclGlobalAction_Type.__name__ = "Integer32"
_RcPrFilterAclGlobalAction_Object = MibTableColumn
rcPrFilterAclGlobalAction = _RcPrFilterAclGlobalAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 7),
    _RcPrFilterAclGlobalAction_Type()
)
rcPrFilterAclGlobalAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclGlobalAction.setStatus("current")


class _RcPrFilterAclState_Type(EnableValue):
    """Custom type rcPrFilterAclState based on EnableValue"""


_RcPrFilterAclState_Object = MibTableColumn
rcPrFilterAclState = _RcPrFilterAclState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 8),
    _RcPrFilterAclState_Type()
)
rcPrFilterAclState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclState.setStatus("current")


class _RcPrFilterAclVlanList_Type(IdList):
    """Custom type rcPrFilterAclVlanList based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4096),
    )


_RcPrFilterAclVlanList_Type.__name__ = "IdList"
_RcPrFilterAclVlanList_Object = MibTableColumn
rcPrFilterAclVlanList = _RcPrFilterAclVlanList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 9),
    _RcPrFilterAclVlanList_Type()
)
rcPrFilterAclVlanList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclVlanList.setStatus("current")
_RcPrFilterAclPortList_Type = PortSet
_RcPrFilterAclPortList_Object = MibTableColumn
rcPrFilterAclPortList = _RcPrFilterAclPortList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 10),
    _RcPrFilterAclPortList_Type()
)
rcPrFilterAclPortList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclPortList.setStatus("current")
_RcPrFilterAclRowStatus_Type = RowStatus
_RcPrFilterAclRowStatus_Object = MibTableColumn
rcPrFilterAclRowStatus = _RcPrFilterAclRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 11),
    _RcPrFilterAclRowStatus_Type()
)
rcPrFilterAclRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclRowStatus.setStatus("current")


class _RcPrFilterAclNumVlanIds_Type(Integer32):
    """Custom type rcPrFilterAclNumVlanIds based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAclNumVlanIds_Type.__name__ = "Integer32"
_RcPrFilterAclNumVlanIds_Object = MibTableColumn
rcPrFilterAclNumVlanIds = _RcPrFilterAclNumVlanIds_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 12),
    _RcPrFilterAclNumVlanIds_Type()
)
rcPrFilterAclNumVlanIds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAclNumVlanIds.setStatus("current")


class _RcPrFilterAclPktType_Type(Integer32):
    """Custom type rcPrFilterAclPktType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv4", 1),
          ("ipv6", 2))
    )


_RcPrFilterAclPktType_Type.__name__ = "Integer32"
_RcPrFilterAclPktType_Object = MibTableColumn
rcPrFilterAclPktType = _RcPrFilterAclPktType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 1, 1, 13),
    _RcPrFilterAclPktType_Type()
)
rcPrFilterAclPktType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclPktType.setStatus("current")
_RcPrFilterAclStatsTable_Object = MibTable
rcPrFilterAclStatsTable = _RcPrFilterAclStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 2)
)
if mibBuilder.loadTexts:
    rcPrFilterAclStatsTable.setStatus("current")
_RcPrFilterAclStatsEntry_Object = MibTableRow
rcPrFilterAclStatsEntry = _RcPrFilterAclStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 2, 1)
)
rcPrFilterAclStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAclStatsAclId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAclStatsEntry.setStatus("current")


class _RcPrFilterAclStatsAclId_Type(Integer32):
    """Custom type rcPrFilterAclStatsAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAclStatsAclId_Type.__name__ = "Integer32"
_RcPrFilterAclStatsAclId_Object = MibTableColumn
rcPrFilterAclStatsAclId = _RcPrFilterAclStatsAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 2, 1, 1),
    _RcPrFilterAclStatsAclId_Type()
)
rcPrFilterAclStatsAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAclStatsAclId.setStatus("current")
_RcPrFilterAclStatsMatchDefaultCounterPkts_Type = Counter64
_RcPrFilterAclStatsMatchDefaultCounterPkts_Object = MibTableColumn
rcPrFilterAclStatsMatchDefaultCounterPkts = _RcPrFilterAclStatsMatchDefaultCounterPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 2, 1, 2),
    _RcPrFilterAclStatsMatchDefaultCounterPkts_Type()
)
rcPrFilterAclStatsMatchDefaultCounterPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAclStatsMatchDefaultCounterPkts.setStatus("current")
_RcPrFilterAclStatsMatchDefaultOctets_Type = Counter64
_RcPrFilterAclStatsMatchDefaultOctets_Object = MibTableColumn
rcPrFilterAclStatsMatchDefaultOctets = _RcPrFilterAclStatsMatchDefaultOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 2, 1, 3),
    _RcPrFilterAclStatsMatchDefaultOctets_Type()
)
rcPrFilterAclStatsMatchDefaultOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAclStatsMatchDefaultOctets.setStatus("current")
_RcPrFilterAclStatsClear_Type = TruthValue
_RcPrFilterAclStatsClear_Object = MibTableColumn
rcPrFilterAclStatsClear = _RcPrFilterAclStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 3, 2, 1, 4),
    _RcPrFilterAclStatsClear_Type()
)
rcPrFilterAclStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAclStatsClear.setStatus("current")
_RcPrFilterAce_ObjectIdentity = ObjectIdentity
rcPrFilterAce = _RcPrFilterAce_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4)
)
_RcPrFilterAceTable_Object = MibTable
rcPrFilterAceTable = _RcPrFilterAceTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1)
)
if mibBuilder.loadTexts:
    rcPrFilterAceTable.setStatus("current")
_RcPrFilterAceEntry_Object = MibTableRow
rcPrFilterAceEntry = _RcPrFilterAceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1)
)
rcPrFilterAceEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceEntry.setStatus("current")


class _RcPrFilterAceAclId_Type(Integer32):
    """Custom type rcPrFilterAceAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceAclId_Type.__name__ = "Integer32"
_RcPrFilterAceAclId_Object = MibTableColumn
rcPrFilterAceAclId = _RcPrFilterAceAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 1),
    _RcPrFilterAceAclId_Type()
)
rcPrFilterAceAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceAclId.setStatus("current")


class _RcPrFilterAceId_Type(Integer32):
    """Custom type rcPrFilterAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceId_Type.__name__ = "Integer32"
_RcPrFilterAceId_Object = MibTableColumn
rcPrFilterAceId = _RcPrFilterAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 2),
    _RcPrFilterAceId_Type()
)
rcPrFilterAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceId.setStatus("current")


class _RcPrFilterAceName_Type(DisplayString):
    """Custom type rcPrFilterAceName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterAceName_Type.__name__ = "DisplayString"
_RcPrFilterAceName_Object = MibTableColumn
rcPrFilterAceName = _RcPrFilterAceName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 3),
    _RcPrFilterAceName_Type()
)
rcPrFilterAceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceName.setStatus("current")


class _RcPrFilterAceMode_Type(Integer32):
    """Custom type rcPrFilterAceMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 1),
          ("none", 0),
          ("permit", 2))
    )


_RcPrFilterAceMode_Type.__name__ = "Integer32"
_RcPrFilterAceMode_Object = MibTableColumn
rcPrFilterAceMode = _RcPrFilterAceMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 4),
    _RcPrFilterAceMode_Type()
)
rcPrFilterAceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceMode.setStatus("current")


class _RcPrFilterAceRemarkDscp_Type(Integer32):
    """Custom type rcPrFilterAceRemarkDscp based on Integer32"""
    defaultValue = 256

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              8,
              10,
              12,
              14,
              16,
              18,
              20,
              22,
              24,
              26,
              28,
              30,
              32,
              34,
              36,
              38,
              40,
              46,
              48,
              56,
              256)
        )
    )
    namedValues = NamedValues(
        *(("disable", 256),
          ("phbaf11", 10),
          ("phbaf12", 12),
          ("phbaf13", 14),
          ("phbaf21", 18),
          ("phbaf22", 20),
          ("phbaf23", 22),
          ("phbaf31", 26),
          ("phbaf32", 28),
          ("phbaf33", 30),
          ("phbaf41", 34),
          ("phbaf42", 36),
          ("phbaf43", 38),
          ("phbcs0", 0),
          ("phbcs1", 8),
          ("phbcs2", 16),
          ("phbcs3", 24),
          ("phbcs4", 32),
          ("phbcs5", 40),
          ("phbcs6", 48),
          ("phbcs7", 56),
          ("phbef", 46))
    )


_RcPrFilterAceRemarkDscp_Type.__name__ = "Integer32"
_RcPrFilterAceRemarkDscp_Object = MibTableColumn
rcPrFilterAceRemarkDscp = _RcPrFilterAceRemarkDscp_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 5),
    _RcPrFilterAceRemarkDscp_Type()
)
rcPrFilterAceRemarkDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceRemarkDscp.setStatus("current")


class _RcPrFilterAceRemarkDot1Priority_Type(Integer32):
    """Custom type rcPrFilterAceRemarkDot1Priority based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("disable", 8),
          ("five", 5),
          ("four", 4),
          ("one", 1),
          ("seven", 7),
          ("six", 6),
          ("three", 3),
          ("two", 2),
          ("zero", 0))
    )


_RcPrFilterAceRemarkDot1Priority_Type.__name__ = "Integer32"
_RcPrFilterAceRemarkDot1Priority_Object = MibTableColumn
rcPrFilterAceRemarkDot1Priority = _RcPrFilterAceRemarkDot1Priority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 6),
    _RcPrFilterAceRemarkDot1Priority_Type()
)
rcPrFilterAceRemarkDot1Priority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceRemarkDot1Priority.setStatus("current")


class _RcPrFilterAceRedirectNextHop_Type(IpAddress):
    """Custom type rcPrFilterAceRedirectNextHop based on IpAddress"""
    defaultHexValue = "00000000"


_RcPrFilterAceRedirectNextHop_Object = MibTableColumn
rcPrFilterAceRedirectNextHop = _RcPrFilterAceRedirectNextHop_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 7),
    _RcPrFilterAceRedirectNextHop_Type()
)
rcPrFilterAceRedirectNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceRedirectNextHop.setStatus("current")


class _RcPrFilterAceRedirectUnreach_Type(Integer32):
    """Custom type rcPrFilterAceRedirectUnreach based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 1),
          ("permit", 2))
    )


_RcPrFilterAceRedirectUnreach_Type.__name__ = "Integer32"
_RcPrFilterAceRedirectUnreach_Object = MibTableColumn
rcPrFilterAceRedirectUnreach = _RcPrFilterAceRedirectUnreach_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 8),
    _RcPrFilterAceRedirectUnreach_Type()
)
rcPrFilterAceRedirectUnreach.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceRedirectUnreach.setStatus("current")


class _RcPrFilterAcePolice_Type(Integer32):
    """Custom type rcPrFilterAcePolice based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16383),
    )


_RcPrFilterAcePolice_Type.__name__ = "Integer32"
_RcPrFilterAcePolice_Object = MibTableColumn
rcPrFilterAcePolice = _RcPrFilterAcePolice_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 9),
    _RcPrFilterAcePolice_Type()
)
rcPrFilterAcePolice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePolice.setStatus("current")


class _RcPrFilterAceAdminState_Type(EnableValue):
    """Custom type rcPrFilterAceAdminState based on EnableValue"""


_RcPrFilterAceAdminState_Object = MibTableColumn
rcPrFilterAceAdminState = _RcPrFilterAceAdminState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 10),
    _RcPrFilterAceAdminState_Type()
)
rcPrFilterAceAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceAdminState.setStatus("current")


class _RcPrFilterAceOperState_Type(Integer32):
    """Custom type rcPrFilterAceOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcPrFilterAceOperState_Type.__name__ = "Integer32"
_RcPrFilterAceOperState_Object = MibTableColumn
rcPrFilterAceOperState = _RcPrFilterAceOperState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 11),
    _RcPrFilterAceOperState_Type()
)
rcPrFilterAceOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceOperState.setStatus("current")


class _RcPrFilterAceEgressQueue_Type(Integer32):
    """Custom type rcPrFilterAceEgressQueue based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RcPrFilterAceEgressQueue_Type.__name__ = "Integer32"
_RcPrFilterAceEgressQueue_Object = MibTableColumn
rcPrFilterAceEgressQueue = _RcPrFilterAceEgressQueue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 12),
    _RcPrFilterAceEgressQueue_Type()
)
rcPrFilterAceEgressQueue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEgressQueue.setStatus("current")


class _RcPrFilterAceEgressQueue1g_Type(Integer32):
    """Custom type rcPrFilterAceEgressQueue1g based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RcPrFilterAceEgressQueue1g_Type.__name__ = "Integer32"
_RcPrFilterAceEgressQueue1g_Object = MibTableColumn
rcPrFilterAceEgressQueue1g = _RcPrFilterAceEgressQueue1g_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 13),
    _RcPrFilterAceEgressQueue1g_Type()
)
rcPrFilterAceEgressQueue1g.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEgressQueue1g.setStatus("current")


class _RcPrFilterAceEgressQueue10g_Type(Integer32):
    """Custom type rcPrFilterAceEgressQueue10g based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RcPrFilterAceEgressQueue10g_Type.__name__ = "Integer32"
_RcPrFilterAceEgressQueue10g_Object = MibTableColumn
rcPrFilterAceEgressQueue10g = _RcPrFilterAceEgressQueue10g_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 14),
    _RcPrFilterAceEgressQueue10g_Type()
)
rcPrFilterAceEgressQueue10g.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEgressQueue10g.setStatus("current")


class _RcPrFilterAceEgressQueueNNSC_Type(Integer32):
    """Custom type rcPrFilterAceEgressQueueNNSC based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("bronze", 3),
          ("critical", 7),
          ("custom", 5),
          ("disable", 8),
          ("gold", 1),
          ("platinum", 0),
          ("premium", 6),
          ("silver", 2),
          ("standard", 4))
    )


_RcPrFilterAceEgressQueueNNSC_Type.__name__ = "Integer32"
_RcPrFilterAceEgressQueueNNSC_Object = MibTableColumn
rcPrFilterAceEgressQueueNNSC = _RcPrFilterAceEgressQueueNNSC_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 15),
    _RcPrFilterAceEgressQueueNNSC_Type()
)
rcPrFilterAceEgressQueueNNSC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEgressQueueNNSC.setStatus("current")


class _RcPrFilterAceFlags_Type(Integer32):
    """Custom type rcPrFilterAceFlags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RcPrFilterAceFlags_Type.__name__ = "Integer32"
_RcPrFilterAceFlags_Object = MibTableColumn
rcPrFilterAceFlags = _RcPrFilterAceFlags_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 16),
    _RcPrFilterAceFlags_Type()
)
rcPrFilterAceFlags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceFlags.setStatus("current")


class _RcPrFilterAceStopOnMatch_Type(EnableValue):
    """Custom type rcPrFilterAceStopOnMatch based on EnableValue"""


_RcPrFilterAceStopOnMatch_Object = MibTableColumn
rcPrFilterAceStopOnMatch = _RcPrFilterAceStopOnMatch_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 17),
    _RcPrFilterAceStopOnMatch_Type()
)
rcPrFilterAceStopOnMatch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceStopOnMatch.setStatus("current")


class _RcPrFilterAceMltIndex_Type(Integer32):
    """Custom type rcPrFilterAceMltIndex based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RcPrFilterAceMltIndex_Type.__name__ = "Integer32"
_RcPrFilterAceMltIndex_Object = MibTableColumn
rcPrFilterAceMltIndex = _RcPrFilterAceMltIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 18),
    _RcPrFilterAceMltIndex_Type()
)
rcPrFilterAceMltIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceMltIndex.setStatus("current")
_RcPrFilterAceRowStatus_Type = RowStatus
_RcPrFilterAceRowStatus_Object = MibTableColumn
rcPrFilterAceRowStatus = _RcPrFilterAceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 19),
    _RcPrFilterAceRowStatus_Type()
)
rcPrFilterAceRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceRowStatus.setStatus("current")


class _RcPrFilterAceIpfixState_Type(EnableValue):
    """Custom type rcPrFilterAceIpfixState based on EnableValue"""


_RcPrFilterAceIpfixState_Object = MibTableColumn
rcPrFilterAceIpfixState = _RcPrFilterAceIpfixState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 20),
    _RcPrFilterAceIpfixState_Type()
)
rcPrFilterAceIpfixState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpfixState.setStatus("current")
_RcPrFilterAceRedirectNextHopIpv6_Type = Ipv6Address
_RcPrFilterAceRedirectNextHopIpv6_Object = MibTableColumn
rcPrFilterAceRedirectNextHopIpv6 = _RcPrFilterAceRedirectNextHopIpv6_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 21),
    _RcPrFilterAceRedirectNextHopIpv6_Type()
)
rcPrFilterAceRedirectNextHopIpv6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceRedirectNextHopIpv6.setStatus("current")
_RcPrFilterAceDstPortList_Type = PortSet
_RcPrFilterAceDstPortList_Object = MibTableColumn
rcPrFilterAceDstPortList = _RcPrFilterAceDstPortList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 22),
    _RcPrFilterAceDstPortList_Type()
)
rcPrFilterAceDstPortList.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcPrFilterAceDstPortList.setStatus("current")


class _RcPrFilterAceDstVlanId_Type(Integer32):
    """Custom type rcPrFilterAceDstVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_RcPrFilterAceDstVlanId_Type.__name__ = "Integer32"
_RcPrFilterAceDstVlanId_Object = MibTableColumn
rcPrFilterAceDstVlanId = _RcPrFilterAceDstVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 23),
    _RcPrFilterAceDstVlanId_Type()
)
rcPrFilterAceDstVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcPrFilterAceDstVlanId.setStatus("current")


class _RcPrFilterAceDstMltId_Type(Integer32):
    """Custom type rcPrFilterAceDstMltId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_RcPrFilterAceDstMltId_Type.__name__ = "Integer32"
_RcPrFilterAceDstMltId_Object = MibTableColumn
rcPrFilterAceDstMltId = _RcPrFilterAceDstMltId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 1, 1, 24),
    _RcPrFilterAceDstMltId_Type()
)
rcPrFilterAceDstMltId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcPrFilterAceDstMltId.setStatus("current")
_RcPrFilterAceEthSrcAddrTable_Object = MibTable
rcPrFilterAceEthSrcAddrTable = _RcPrFilterAceEthSrcAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 2)
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthSrcAddrTable.setStatus("current")
_RcPrFilterAceEthSrcAddrEntry_Object = MibTableRow
rcPrFilterAceEthSrcAddrEntry = _RcPrFilterAceEthSrcAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 2, 1)
)
rcPrFilterAceEthSrcAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceEthSrcAddrAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceEthSrcAddrAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthSrcAddrEntry.setStatus("current")


class _RcPrFilterAceEthSrcAddrAclId_Type(Integer32):
    """Custom type rcPrFilterAceEthSrcAddrAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceEthSrcAddrAclId_Type.__name__ = "Integer32"
_RcPrFilterAceEthSrcAddrAclId_Object = MibTableColumn
rcPrFilterAceEthSrcAddrAclId = _RcPrFilterAceEthSrcAddrAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 2, 1, 1),
    _RcPrFilterAceEthSrcAddrAclId_Type()
)
rcPrFilterAceEthSrcAddrAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthSrcAddrAclId.setStatus("current")


class _RcPrFilterAceEthSrcAddrAceId_Type(Integer32):
    """Custom type rcPrFilterAceEthSrcAddrAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceEthSrcAddrAceId_Type.__name__ = "Integer32"
_RcPrFilterAceEthSrcAddrAceId_Object = MibTableColumn
rcPrFilterAceEthSrcAddrAceId = _RcPrFilterAceEthSrcAddrAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 2, 1, 2),
    _RcPrFilterAceEthSrcAddrAceId_Type()
)
rcPrFilterAceEthSrcAddrAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthSrcAddrAceId.setStatus("current")


class _RcPrFilterAceEthSrcAddrList_Type(OctetString):
    """Custom type rcPrFilterAceEthSrcAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceEthSrcAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceEthSrcAddrList_Object = MibTableColumn
rcPrFilterAceEthSrcAddrList = _RcPrFilterAceEthSrcAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 2, 1, 3),
    _RcPrFilterAceEthSrcAddrList_Type()
)
rcPrFilterAceEthSrcAddrList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthSrcAddrList.setStatus("current")


class _RcPrFilterAceEthSrcAddrListCount_Type(Integer32):
    """Custom type rcPrFilterAceEthSrcAddrListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceEthSrcAddrListCount_Type.__name__ = "Integer32"
_RcPrFilterAceEthSrcAddrListCount_Object = MibTableColumn
rcPrFilterAceEthSrcAddrListCount = _RcPrFilterAceEthSrcAddrListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 2, 1, 4),
    _RcPrFilterAceEthSrcAddrListCount_Type()
)
rcPrFilterAceEthSrcAddrListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthSrcAddrListCount.setStatus("current")


class _RcPrFilterAceEthSrcAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceEthSrcAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceEthSrcAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthSrcAddrOper_Object = MibTableColumn
rcPrFilterAceEthSrcAddrOper = _RcPrFilterAceEthSrcAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 2, 1, 5),
    _RcPrFilterAceEthSrcAddrOper_Type()
)
rcPrFilterAceEthSrcAddrOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthSrcAddrOper.setStatus("current")
_RcPrFilterAceEthSrcAddrRowStatus_Type = RowStatus
_RcPrFilterAceEthSrcAddrRowStatus_Object = MibTableColumn
rcPrFilterAceEthSrcAddrRowStatus = _RcPrFilterAceEthSrcAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 2, 1, 6),
    _RcPrFilterAceEthSrcAddrRowStatus_Type()
)
rcPrFilterAceEthSrcAddrRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthSrcAddrRowStatus.setStatus("current")
_RcPrFilterAceEthDstAddrTable_Object = MibTable
rcPrFilterAceEthDstAddrTable = _RcPrFilterAceEthDstAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 3)
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthDstAddrTable.setStatus("current")
_RcPrFilterAceEthDstAddrEntry_Object = MibTableRow
rcPrFilterAceEthDstAddrEntry = _RcPrFilterAceEthDstAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 3, 1)
)
rcPrFilterAceEthDstAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceEthDstAddrAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceEthDstAddrAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthDstAddrEntry.setStatus("current")


class _RcPrFilterAceEthDstAddrAclId_Type(Integer32):
    """Custom type rcPrFilterAceEthDstAddrAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceEthDstAddrAclId_Type.__name__ = "Integer32"
_RcPrFilterAceEthDstAddrAclId_Object = MibTableColumn
rcPrFilterAceEthDstAddrAclId = _RcPrFilterAceEthDstAddrAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 3, 1, 1),
    _RcPrFilterAceEthDstAddrAclId_Type()
)
rcPrFilterAceEthDstAddrAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthDstAddrAclId.setStatus("current")


class _RcPrFilterAceEthDstAddrAceId_Type(Integer32):
    """Custom type rcPrFilterAceEthDstAddrAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceEthDstAddrAceId_Type.__name__ = "Integer32"
_RcPrFilterAceEthDstAddrAceId_Object = MibTableColumn
rcPrFilterAceEthDstAddrAceId = _RcPrFilterAceEthDstAddrAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 3, 1, 2),
    _RcPrFilterAceEthDstAddrAceId_Type()
)
rcPrFilterAceEthDstAddrAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthDstAddrAceId.setStatus("current")


class _RcPrFilterAceEthDstAddrList_Type(OctetString):
    """Custom type rcPrFilterAceEthDstAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceEthDstAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceEthDstAddrList_Object = MibTableColumn
rcPrFilterAceEthDstAddrList = _RcPrFilterAceEthDstAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 3, 1, 3),
    _RcPrFilterAceEthDstAddrList_Type()
)
rcPrFilterAceEthDstAddrList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthDstAddrList.setStatus("current")


class _RcPrFilterAceEthDstAddrListCount_Type(Integer32):
    """Custom type rcPrFilterAceEthDstAddrListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceEthDstAddrListCount_Type.__name__ = "Integer32"
_RcPrFilterAceEthDstAddrListCount_Object = MibTableColumn
rcPrFilterAceEthDstAddrListCount = _RcPrFilterAceEthDstAddrListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 3, 1, 4),
    _RcPrFilterAceEthDstAddrListCount_Type()
)
rcPrFilterAceEthDstAddrListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthDstAddrListCount.setStatus("current")


class _RcPrFilterAceEthDstAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceEthDstAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceEthDstAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthDstAddrOper_Object = MibTableColumn
rcPrFilterAceEthDstAddrOper = _RcPrFilterAceEthDstAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 3, 1, 5),
    _RcPrFilterAceEthDstAddrOper_Type()
)
rcPrFilterAceEthDstAddrOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthDstAddrOper.setStatus("current")
_RcPrFilterAceEthDstAddrRowStatus_Type = RowStatus
_RcPrFilterAceEthDstAddrRowStatus_Object = MibTableColumn
rcPrFilterAceEthDstAddrRowStatus = _RcPrFilterAceEthDstAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 3, 1, 6),
    _RcPrFilterAceEthDstAddrRowStatus_Type()
)
rcPrFilterAceEthDstAddrRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthDstAddrRowStatus.setStatus("current")
_RcPrFilterAceEthEtherTable_Object = MibTable
rcPrFilterAceEthEtherTable = _RcPrFilterAceEthEtherTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 4)
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthEtherTable.setStatus("current")
_RcPrFilterAceEthEtherEntry_Object = MibTableRow
rcPrFilterAceEthEtherEntry = _RcPrFilterAceEthEtherEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 4, 1)
)
rcPrFilterAceEthEtherEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceEthEtherAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceEthEtherAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthEtherEntry.setStatus("current")


class _RcPrFilterAceEthEtherAclId_Type(Integer32):
    """Custom type rcPrFilterAceEthEtherAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceEthEtherAclId_Type.__name__ = "Integer32"
_RcPrFilterAceEthEtherAclId_Object = MibTableColumn
rcPrFilterAceEthEtherAclId = _RcPrFilterAceEthEtherAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 4, 1, 1),
    _RcPrFilterAceEthEtherAclId_Type()
)
rcPrFilterAceEthEtherAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthEtherAclId.setStatus("current")


class _RcPrFilterAceEthEtherAceId_Type(Integer32):
    """Custom type rcPrFilterAceEthEtherAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceEthEtherAceId_Type.__name__ = "Integer32"
_RcPrFilterAceEthEtherAceId_Object = MibTableColumn
rcPrFilterAceEthEtherAceId = _RcPrFilterAceEthEtherAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 4, 1, 2),
    _RcPrFilterAceEthEtherAceId_Type()
)
rcPrFilterAceEthEtherAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthEtherAceId.setStatus("current")


class _RcPrFilterAceEthEtherTypeList_Type(OctetString):
    """Custom type rcPrFilterAceEthEtherTypeList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceEthEtherTypeList_Type.__name__ = "OctetString"
_RcPrFilterAceEthEtherTypeList_Object = MibTableColumn
rcPrFilterAceEthEtherTypeList = _RcPrFilterAceEthEtherTypeList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 4, 1, 3),
    _RcPrFilterAceEthEtherTypeList_Type()
)
rcPrFilterAceEthEtherTypeList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthEtherTypeList.setStatus("current")


class _RcPrFilterAceEthEtherTypeListCount_Type(Integer32):
    """Custom type rcPrFilterAceEthEtherTypeListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceEthEtherTypeListCount_Type.__name__ = "Integer32"
_RcPrFilterAceEthEtherTypeListCount_Object = MibTableColumn
rcPrFilterAceEthEtherTypeListCount = _RcPrFilterAceEthEtherTypeListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 4, 1, 4),
    _RcPrFilterAceEthEtherTypeListCount_Type()
)
rcPrFilterAceEthEtherTypeListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthEtherTypeListCount.setStatus("current")


class _RcPrFilterAceEthEtherTypeOper_Type(Integer32):
    """Custom type rcPrFilterAceEthEtherTypeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceEthEtherTypeOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthEtherTypeOper_Object = MibTableColumn
rcPrFilterAceEthEtherTypeOper = _RcPrFilterAceEthEtherTypeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 4, 1, 5),
    _RcPrFilterAceEthEtherTypeOper_Type()
)
rcPrFilterAceEthEtherTypeOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthEtherTypeOper.setStatus("current")
_RcPrFilterAceEthEtherRowStatus_Type = RowStatus
_RcPrFilterAceEthEtherRowStatus_Object = MibTableColumn
rcPrFilterAceEthEtherRowStatus = _RcPrFilterAceEthEtherRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 4, 1, 6),
    _RcPrFilterAceEthEtherRowStatus_Type()
)
rcPrFilterAceEthEtherRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthEtherRowStatus.setStatus("current")
_RcPrFilterAceEthVlanTagPrioTable_Object = MibTable
rcPrFilterAceEthVlanTagPrioTable = _RcPrFilterAceEthVlanTagPrioTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 5)
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanTagPrioTable.setStatus("current")
_RcPrFilterAceEthVlanTagPrioEntry_Object = MibTableRow
rcPrFilterAceEthVlanTagPrioEntry = _RcPrFilterAceEthVlanTagPrioEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 5, 1)
)
rcPrFilterAceEthVlanTagPrioEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceEthVlanTagPrioAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceEthVlanTagPrioAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanTagPrioEntry.setStatus("current")


class _RcPrFilterAceEthVlanTagPrioAclId_Type(Integer32):
    """Custom type rcPrFilterAceEthVlanTagPrioAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceEthVlanTagPrioAclId_Type.__name__ = "Integer32"
_RcPrFilterAceEthVlanTagPrioAclId_Object = MibTableColumn
rcPrFilterAceEthVlanTagPrioAclId = _RcPrFilterAceEthVlanTagPrioAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 5, 1, 1),
    _RcPrFilterAceEthVlanTagPrioAclId_Type()
)
rcPrFilterAceEthVlanTagPrioAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanTagPrioAclId.setStatus("current")


class _RcPrFilterAceEthVlanTagPrioAceId_Type(Integer32):
    """Custom type rcPrFilterAceEthVlanTagPrioAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceEthVlanTagPrioAceId_Type.__name__ = "Integer32"
_RcPrFilterAceEthVlanTagPrioAceId_Object = MibTableColumn
rcPrFilterAceEthVlanTagPrioAceId = _RcPrFilterAceEthVlanTagPrioAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 5, 1, 2),
    _RcPrFilterAceEthVlanTagPrioAceId_Type()
)
rcPrFilterAceEthVlanTagPrioAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanTagPrioAceId.setStatus("current")


class _RcPrFilterAceEthVlanTagPrioVlanTagPrio_Type(Integer32):
    """Custom type rcPrFilterAceEthVlanTagPrioVlanTagPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("five", 5),
          ("four", 4),
          ("one", 1),
          ("seven", 7),
          ("six", 6),
          ("three", 3),
          ("two", 2),
          ("zero", 0))
    )


_RcPrFilterAceEthVlanTagPrioVlanTagPrio_Type.__name__ = "Integer32"
_RcPrFilterAceEthVlanTagPrioVlanTagPrio_Object = MibTableColumn
rcPrFilterAceEthVlanTagPrioVlanTagPrio = _RcPrFilterAceEthVlanTagPrioVlanTagPrio_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 5, 1, 3),
    _RcPrFilterAceEthVlanTagPrioVlanTagPrio_Type()
)
rcPrFilterAceEthVlanTagPrioVlanTagPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanTagPrioVlanTagPrio.setStatus("current")


class _RcPrFilterAceEthVlanTagPrioOper_Type(Integer32):
    """Custom type rcPrFilterAceEthVlanTagPrioOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceEthVlanTagPrioOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthVlanTagPrioOper_Object = MibTableColumn
rcPrFilterAceEthVlanTagPrioOper = _RcPrFilterAceEthVlanTagPrioOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 5, 1, 4),
    _RcPrFilterAceEthVlanTagPrioOper_Type()
)
rcPrFilterAceEthVlanTagPrioOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanTagPrioOper.setStatus("current")
_RcPrFilterAceEthVlanTagPrioRowStatus_Type = RowStatus
_RcPrFilterAceEthVlanTagPrioRowStatus_Object = MibTableColumn
rcPrFilterAceEthVlanTagPrioRowStatus = _RcPrFilterAceEthVlanTagPrioRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 5, 1, 5),
    _RcPrFilterAceEthVlanTagPrioRowStatus_Type()
)
rcPrFilterAceEthVlanTagPrioRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanTagPrioRowStatus.setStatus("current")
_RcPrFilterAceEthPortTable_Object = MibTable
rcPrFilterAceEthPortTable = _RcPrFilterAceEthPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 6)
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthPortTable.setStatus("current")
_RcPrFilterAceEthPortEntry_Object = MibTableRow
rcPrFilterAceEthPortEntry = _RcPrFilterAceEthPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 6, 1)
)
rcPrFilterAceEthPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceEthPortAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceEthPortAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthPortEntry.setStatus("current")


class _RcPrFilterAceEthPortAclId_Type(Integer32):
    """Custom type rcPrFilterAceEthPortAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceEthPortAclId_Type.__name__ = "Integer32"
_RcPrFilterAceEthPortAclId_Object = MibTableColumn
rcPrFilterAceEthPortAclId = _RcPrFilterAceEthPortAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 6, 1, 1),
    _RcPrFilterAceEthPortAclId_Type()
)
rcPrFilterAceEthPortAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthPortAclId.setStatus("current")


class _RcPrFilterAceEthPortAceId_Type(Integer32):
    """Custom type rcPrFilterAceEthPortAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceEthPortAceId_Type.__name__ = "Integer32"
_RcPrFilterAceEthPortAceId_Object = MibTableColumn
rcPrFilterAceEthPortAceId = _RcPrFilterAceEthPortAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 6, 1, 2),
    _RcPrFilterAceEthPortAceId_Type()
)
rcPrFilterAceEthPortAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthPortAceId.setStatus("current")
_RcPrFilterAceEthPortPort_Type = PortSet
_RcPrFilterAceEthPortPort_Object = MibTableColumn
rcPrFilterAceEthPortPort = _RcPrFilterAceEthPortPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 6, 1, 3),
    _RcPrFilterAceEthPortPort_Type()
)
rcPrFilterAceEthPortPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthPortPort.setStatus("current")


class _RcPrFilterAceEthPortOper_Type(Integer32):
    """Custom type rcPrFilterAceEthPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceEthPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthPortOper_Object = MibTableColumn
rcPrFilterAceEthPortOper = _RcPrFilterAceEthPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 6, 1, 4),
    _RcPrFilterAceEthPortOper_Type()
)
rcPrFilterAceEthPortOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthPortOper.setStatus("current")
_RcPrFilterAceEthPortRowStatus_Type = RowStatus
_RcPrFilterAceEthPortRowStatus_Object = MibTableColumn
rcPrFilterAceEthPortRowStatus = _RcPrFilterAceEthPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 6, 1, 5),
    _RcPrFilterAceEthPortRowStatus_Type()
)
rcPrFilterAceEthPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthPortRowStatus.setStatus("current")
_RcPrFilterAceEthVlanIdTable_Object = MibTable
rcPrFilterAceEthVlanIdTable = _RcPrFilterAceEthVlanIdTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 7)
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanIdTable.setStatus("current")
_RcPrFilterAceEthVlanIdEntry_Object = MibTableRow
rcPrFilterAceEthVlanIdEntry = _RcPrFilterAceEthVlanIdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 7, 1)
)
rcPrFilterAceEthVlanIdEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceEthVlanIdAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceEthVlanIdAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanIdEntry.setStatus("current")


class _RcPrFilterAceEthVlanIdAclId_Type(Integer32):
    """Custom type rcPrFilterAceEthVlanIdAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceEthVlanIdAclId_Type.__name__ = "Integer32"
_RcPrFilterAceEthVlanIdAclId_Object = MibTableColumn
rcPrFilterAceEthVlanIdAclId = _RcPrFilterAceEthVlanIdAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 7, 1, 1),
    _RcPrFilterAceEthVlanIdAclId_Type()
)
rcPrFilterAceEthVlanIdAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanIdAclId.setStatus("current")


class _RcPrFilterAceEthVlanIdAceId_Type(Integer32):
    """Custom type rcPrFilterAceEthVlanIdAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceEthVlanIdAceId_Type.__name__ = "Integer32"
_RcPrFilterAceEthVlanIdAceId_Object = MibTableColumn
rcPrFilterAceEthVlanIdAceId = _RcPrFilterAceEthVlanIdAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 7, 1, 2),
    _RcPrFilterAceEthVlanIdAceId_Type()
)
rcPrFilterAceEthVlanIdAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanIdAceId.setStatus("current")


class _RcPrFilterAceEthVlanIdVlanIdList_Type(IdList):
    """Custom type rcPrFilterAceEthVlanIdVlanIdList based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4096, 4096),
    )


_RcPrFilterAceEthVlanIdVlanIdList_Type.__name__ = "IdList"
_RcPrFilterAceEthVlanIdVlanIdList_Object = MibTableColumn
rcPrFilterAceEthVlanIdVlanIdList = _RcPrFilterAceEthVlanIdVlanIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 7, 1, 3),
    _RcPrFilterAceEthVlanIdVlanIdList_Type()
)
rcPrFilterAceEthVlanIdVlanIdList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanIdVlanIdList.setStatus("current")


class _RcPrFilterAceEthVlanIdOper_Type(Integer32):
    """Custom type rcPrFilterAceEthVlanIdOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceEthVlanIdOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthVlanIdOper_Object = MibTableColumn
rcPrFilterAceEthVlanIdOper = _RcPrFilterAceEthVlanIdOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 7, 1, 4),
    _RcPrFilterAceEthVlanIdOper_Type()
)
rcPrFilterAceEthVlanIdOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanIdOper.setStatus("current")
_RcPrFilterAceEthVlanIdRowStatus_Type = RowStatus
_RcPrFilterAceEthVlanIdRowStatus_Object = MibTableColumn
rcPrFilterAceEthVlanIdRowStatus = _RcPrFilterAceEthVlanIdRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 7, 1, 5),
    _RcPrFilterAceEthVlanIdRowStatus_Type()
)
rcPrFilterAceEthVlanIdRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceEthVlanIdRowStatus.setStatus("current")
_RcPrFilterAceArpTable_Object = MibTable
rcPrFilterAceArpTable = _RcPrFilterAceArpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 8)
)
if mibBuilder.loadTexts:
    rcPrFilterAceArpTable.setStatus("current")
_RcPrFilterAceArpEntry_Object = MibTableRow
rcPrFilterAceArpEntry = _RcPrFilterAceArpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 8, 1)
)
rcPrFilterAceArpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceArpAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceArpAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceArpEntry.setStatus("current")


class _RcPrFilterAceArpAclId_Type(Integer32):
    """Custom type rcPrFilterAceArpAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceArpAclId_Type.__name__ = "Integer32"
_RcPrFilterAceArpAclId_Object = MibTableColumn
rcPrFilterAceArpAclId = _RcPrFilterAceArpAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 8, 1, 1),
    _RcPrFilterAceArpAclId_Type()
)
rcPrFilterAceArpAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceArpAclId.setStatus("current")


class _RcPrFilterAceArpAceId_Type(Integer32):
    """Custom type rcPrFilterAceArpAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceArpAceId_Type.__name__ = "Integer32"
_RcPrFilterAceArpAceId_Object = MibTableColumn
rcPrFilterAceArpAceId = _RcPrFilterAceArpAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 8, 1, 2),
    _RcPrFilterAceArpAceId_Type()
)
rcPrFilterAceArpAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceArpAceId.setStatus("current")


class _RcPrFilterAceArpType_Type(Integer32):
    """Custom type rcPrFilterAceArpType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("operation", 1)
    )


_RcPrFilterAceArpType_Type.__name__ = "Integer32"
_RcPrFilterAceArpType_Object = MibTableColumn
rcPrFilterAceArpType = _RcPrFilterAceArpType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 8, 1, 3),
    _RcPrFilterAceArpType_Type()
)
rcPrFilterAceArpType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceArpType.setStatus("current")


class _RcPrFilterAceArpOper_Type(Integer32):
    """Custom type rcPrFilterAceArpOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("eq", 1)
    )


_RcPrFilterAceArpOper_Type.__name__ = "Integer32"
_RcPrFilterAceArpOper_Object = MibTableColumn
rcPrFilterAceArpOper = _RcPrFilterAceArpOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 8, 1, 4),
    _RcPrFilterAceArpOper_Type()
)
rcPrFilterAceArpOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceArpOper.setStatus("current")


class _RcPrFilterAceArpValue_Type(Integer32):
    """Custom type rcPrFilterAceArpValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("arpRequest", 1),
          ("arpResponse", 2))
    )


_RcPrFilterAceArpValue_Type.__name__ = "Integer32"
_RcPrFilterAceArpValue_Object = MibTableColumn
rcPrFilterAceArpValue = _RcPrFilterAceArpValue_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 8, 1, 5),
    _RcPrFilterAceArpValue_Type()
)
rcPrFilterAceArpValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceArpValue.setStatus("current")
_RcPrFilterAceArpRowStatus_Type = RowStatus
_RcPrFilterAceArpRowStatus_Object = MibTableColumn
rcPrFilterAceArpRowStatus = _RcPrFilterAceArpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 8, 1, 6),
    _RcPrFilterAceArpRowStatus_Type()
)
rcPrFilterAceArpRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceArpRowStatus.setStatus("current")
_RcPrFilterAceIpSrcAddrTable_Object = MibTable
rcPrFilterAceIpSrcAddrTable = _RcPrFilterAceIpSrcAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 9)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpSrcAddrTable.setStatus("current")
_RcPrFilterAceIpSrcAddrEntry_Object = MibTableRow
rcPrFilterAceIpSrcAddrEntry = _RcPrFilterAceIpSrcAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 9, 1)
)
rcPrFilterAceIpSrcAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpSrcAddrAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpSrcAddrAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpSrcAddrEntry.setStatus("current")


class _RcPrFilterAceIpSrcAddrAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpSrcAddrAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpSrcAddrAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpSrcAddrAclId_Object = MibTableColumn
rcPrFilterAceIpSrcAddrAclId = _RcPrFilterAceIpSrcAddrAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 9, 1, 1),
    _RcPrFilterAceIpSrcAddrAclId_Type()
)
rcPrFilterAceIpSrcAddrAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpSrcAddrAclId.setStatus("current")


class _RcPrFilterAceIpSrcAddrAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpSrcAddrAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpSrcAddrAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpSrcAddrAceId_Object = MibTableColumn
rcPrFilterAceIpSrcAddrAceId = _RcPrFilterAceIpSrcAddrAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 9, 1, 2),
    _RcPrFilterAceIpSrcAddrAceId_Type()
)
rcPrFilterAceIpSrcAddrAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpSrcAddrAceId.setStatus("current")


class _RcPrFilterAceIpSrcAddrList_Type(OctetString):
    """Custom type rcPrFilterAceIpSrcAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpSrcAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceIpSrcAddrList_Object = MibTableColumn
rcPrFilterAceIpSrcAddrList = _RcPrFilterAceIpSrcAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 9, 1, 3),
    _RcPrFilterAceIpSrcAddrList_Type()
)
rcPrFilterAceIpSrcAddrList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpSrcAddrList.setStatus("current")


class _RcPrFilterAceIpSrcAddrListCount_Type(Integer32):
    """Custom type rcPrFilterAceIpSrcAddrListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceIpSrcAddrListCount_Type.__name__ = "Integer32"
_RcPrFilterAceIpSrcAddrListCount_Object = MibTableColumn
rcPrFilterAceIpSrcAddrListCount = _RcPrFilterAceIpSrcAddrListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 9, 1, 4),
    _RcPrFilterAceIpSrcAddrListCount_Type()
)
rcPrFilterAceIpSrcAddrListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpSrcAddrListCount.setStatus("current")


class _RcPrFilterAceIpSrcAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpSrcAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2),
          ("prefix", 8))
    )


_RcPrFilterAceIpSrcAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpSrcAddrOper_Object = MibTableColumn
rcPrFilterAceIpSrcAddrOper = _RcPrFilterAceIpSrcAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 9, 1, 5),
    _RcPrFilterAceIpSrcAddrOper_Type()
)
rcPrFilterAceIpSrcAddrOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpSrcAddrOper.setStatus("current")
_RcPrFilterAceIpSrcAddrRowStatus_Type = RowStatus
_RcPrFilterAceIpSrcAddrRowStatus_Object = MibTableColumn
rcPrFilterAceIpSrcAddrRowStatus = _RcPrFilterAceIpSrcAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 9, 1, 6),
    _RcPrFilterAceIpSrcAddrRowStatus_Type()
)
rcPrFilterAceIpSrcAddrRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpSrcAddrRowStatus.setStatus("current")
_RcPrFilterAceIpDstAddrTable_Object = MibTable
rcPrFilterAceIpDstAddrTable = _RcPrFilterAceIpDstAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 10)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpDstAddrTable.setStatus("current")
_RcPrFilterAceIpDstAddrEntry_Object = MibTableRow
rcPrFilterAceIpDstAddrEntry = _RcPrFilterAceIpDstAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 10, 1)
)
rcPrFilterAceIpDstAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpDstAddrAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpDstAddrAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpDstAddrEntry.setStatus("current")


class _RcPrFilterAceIpDstAddrAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpDstAddrAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpDstAddrAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpDstAddrAclId_Object = MibTableColumn
rcPrFilterAceIpDstAddrAclId = _RcPrFilterAceIpDstAddrAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 10, 1, 1),
    _RcPrFilterAceIpDstAddrAclId_Type()
)
rcPrFilterAceIpDstAddrAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDstAddrAclId.setStatus("current")


class _RcPrFilterAceIpDstAddrAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpDstAddrAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpDstAddrAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpDstAddrAceId_Object = MibTableColumn
rcPrFilterAceIpDstAddrAceId = _RcPrFilterAceIpDstAddrAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 10, 1, 2),
    _RcPrFilterAceIpDstAddrAceId_Type()
)
rcPrFilterAceIpDstAddrAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDstAddrAceId.setStatus("current")


class _RcPrFilterAceIpDstAddrList_Type(OctetString):
    """Custom type rcPrFilterAceIpDstAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpDstAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceIpDstAddrList_Object = MibTableColumn
rcPrFilterAceIpDstAddrList = _RcPrFilterAceIpDstAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 10, 1, 3),
    _RcPrFilterAceIpDstAddrList_Type()
)
rcPrFilterAceIpDstAddrList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDstAddrList.setStatus("current")


class _RcPrFilterAceIpDstAddrListCount_Type(Integer32):
    """Custom type rcPrFilterAceIpDstAddrListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceIpDstAddrListCount_Type.__name__ = "Integer32"
_RcPrFilterAceIpDstAddrListCount_Object = MibTableColumn
rcPrFilterAceIpDstAddrListCount = _RcPrFilterAceIpDstAddrListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 10, 1, 4),
    _RcPrFilterAceIpDstAddrListCount_Type()
)
rcPrFilterAceIpDstAddrListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDstAddrListCount.setStatus("current")


class _RcPrFilterAceIpDstAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpDstAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2),
          ("prefix", 8))
    )


_RcPrFilterAceIpDstAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpDstAddrOper_Object = MibTableColumn
rcPrFilterAceIpDstAddrOper = _RcPrFilterAceIpDstAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 10, 1, 5),
    _RcPrFilterAceIpDstAddrOper_Type()
)
rcPrFilterAceIpDstAddrOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDstAddrOper.setStatus("current")
_RcPrFilterAceIpDstAddrRowStatus_Type = RowStatus
_RcPrFilterAceIpDstAddrRowStatus_Object = MibTableColumn
rcPrFilterAceIpDstAddrRowStatus = _RcPrFilterAceIpDstAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 10, 1, 6),
    _RcPrFilterAceIpDstAddrRowStatus_Type()
)
rcPrFilterAceIpDstAddrRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDstAddrRowStatus.setStatus("current")
_RcPrFilterAceIpDscpTable_Object = MibTable
rcPrFilterAceIpDscpTable = _RcPrFilterAceIpDscpTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 11)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpDscpTable.setStatus("current")
_RcPrFilterAceIpDscpEntry_Object = MibTableRow
rcPrFilterAceIpDscpEntry = _RcPrFilterAceIpDscpEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 11, 1)
)
rcPrFilterAceIpDscpEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpDscpAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpDscpAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpDscpEntry.setStatus("current")


class _RcPrFilterAceIpDscpAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpDscpAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpDscpAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpDscpAclId_Object = MibTableColumn
rcPrFilterAceIpDscpAclId = _RcPrFilterAceIpDscpAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 11, 1, 1),
    _RcPrFilterAceIpDscpAclId_Type()
)
rcPrFilterAceIpDscpAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDscpAclId.setStatus("current")


class _RcPrFilterAceIpDscpAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpDscpAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpDscpAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpDscpAceId_Object = MibTableColumn
rcPrFilterAceIpDscpAceId = _RcPrFilterAceIpDscpAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 11, 1, 2),
    _RcPrFilterAceIpDscpAceId_Type()
)
rcPrFilterAceIpDscpAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDscpAceId.setStatus("current")


class _RcPrFilterAceIpDscpList_Type(OctetString):
    """Custom type rcPrFilterAceIpDscpList based on OctetString"""
    defaultValue = OctetString("disable")

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpDscpList_Type.__name__ = "OctetString"
_RcPrFilterAceIpDscpList_Object = MibTableColumn
rcPrFilterAceIpDscpList = _RcPrFilterAceIpDscpList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 11, 1, 3),
    _RcPrFilterAceIpDscpList_Type()
)
rcPrFilterAceIpDscpList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDscpList.setStatus("current")


class _RcPrFilterAceIpDscpListCount_Type(Integer32):
    """Custom type rcPrFilterAceIpDscpListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceIpDscpListCount_Type.__name__ = "Integer32"
_RcPrFilterAceIpDscpListCount_Object = MibTableColumn
rcPrFilterAceIpDscpListCount = _RcPrFilterAceIpDscpListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 11, 1, 4),
    _RcPrFilterAceIpDscpListCount_Type()
)
rcPrFilterAceIpDscpListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDscpListCount.setStatus("current")


class _RcPrFilterAceIpDscpOper_Type(Integer32):
    """Custom type rcPrFilterAceIpDscpOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpDscpOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpDscpOper_Object = MibTableColumn
rcPrFilterAceIpDscpOper = _RcPrFilterAceIpDscpOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 11, 1, 5),
    _RcPrFilterAceIpDscpOper_Type()
)
rcPrFilterAceIpDscpOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDscpOper.setStatus("current")
_RcPrFilterAceIpDscpRowStatus_Type = RowStatus
_RcPrFilterAceIpDscpRowStatus_Object = MibTableColumn
rcPrFilterAceIpDscpRowStatus = _RcPrFilterAceIpDscpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 11, 1, 6),
    _RcPrFilterAceIpDscpRowStatus_Type()
)
rcPrFilterAceIpDscpRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpDscpRowStatus.setStatus("current")
_RcPrFilterAceIpProtoTable_Object = MibTable
rcPrFilterAceIpProtoTable = _RcPrFilterAceIpProtoTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 12)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpProtoTable.setStatus("current")
_RcPrFilterAceIpProtoEntry_Object = MibTableRow
rcPrFilterAceIpProtoEntry = _RcPrFilterAceIpProtoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 12, 1)
)
rcPrFilterAceIpProtoEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpProtoAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpProtoAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpProtoEntry.setStatus("current")


class _RcPrFilterAceIpProtoAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpProtoAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpProtoAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpProtoAclId_Object = MibTableColumn
rcPrFilterAceIpProtoAclId = _RcPrFilterAceIpProtoAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 12, 1, 1),
    _RcPrFilterAceIpProtoAclId_Type()
)
rcPrFilterAceIpProtoAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpProtoAclId.setStatus("current")


class _RcPrFilterAceIpProtoAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpProtoAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpProtoAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpProtoAceId_Object = MibTableColumn
rcPrFilterAceIpProtoAceId = _RcPrFilterAceIpProtoAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 12, 1, 2),
    _RcPrFilterAceIpProtoAceId_Type()
)
rcPrFilterAceIpProtoAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpProtoAceId.setStatus("current")


class _RcPrFilterAceIpProtoList_Type(OctetString):
    """Custom type rcPrFilterAceIpProtoList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpProtoList_Type.__name__ = "OctetString"
_RcPrFilterAceIpProtoList_Object = MibTableColumn
rcPrFilterAceIpProtoList = _RcPrFilterAceIpProtoList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 12, 1, 3),
    _RcPrFilterAceIpProtoList_Type()
)
rcPrFilterAceIpProtoList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpProtoList.setStatus("current")


class _RcPrFilterAceIpProtoListCount_Type(Integer32):
    """Custom type rcPrFilterAceIpProtoListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceIpProtoListCount_Type.__name__ = "Integer32"
_RcPrFilterAceIpProtoListCount_Object = MibTableColumn
rcPrFilterAceIpProtoListCount = _RcPrFilterAceIpProtoListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 12, 1, 4),
    _RcPrFilterAceIpProtoListCount_Type()
)
rcPrFilterAceIpProtoListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpProtoListCount.setStatus("current")


class _RcPrFilterAceIpProtoOper_Type(Integer32):
    """Custom type rcPrFilterAceIpProtoOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpProtoOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpProtoOper_Object = MibTableColumn
rcPrFilterAceIpProtoOper = _RcPrFilterAceIpProtoOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 12, 1, 5),
    _RcPrFilterAceIpProtoOper_Type()
)
rcPrFilterAceIpProtoOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpProtoOper.setStatus("current")
_RcPrFilterAceIpProtoRowStatus_Type = RowStatus
_RcPrFilterAceIpProtoRowStatus_Object = MibTableColumn
rcPrFilterAceIpProtoRowStatus = _RcPrFilterAceIpProtoRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 12, 1, 6),
    _RcPrFilterAceIpProtoRowStatus_Type()
)
rcPrFilterAceIpProtoRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpProtoRowStatus.setStatus("current")
_RcPrFilterAceIpOptionsTable_Object = MibTable
rcPrFilterAceIpOptionsTable = _RcPrFilterAceIpOptionsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 13)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpOptionsTable.setStatus("current")
_RcPrFilterAceIpOptionsEntry_Object = MibTableRow
rcPrFilterAceIpOptionsEntry = _RcPrFilterAceIpOptionsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 13, 1)
)
rcPrFilterAceIpOptionsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpOptionsAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpOptionsAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpOptionsEntry.setStatus("current")


class _RcPrFilterAceIpOptionsAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpOptionsAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpOptionsAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpOptionsAclId_Object = MibTableColumn
rcPrFilterAceIpOptionsAclId = _RcPrFilterAceIpOptionsAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 13, 1, 1),
    _RcPrFilterAceIpOptionsAclId_Type()
)
rcPrFilterAceIpOptionsAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpOptionsAclId.setStatus("current")


class _RcPrFilterAceIpOptionsAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpOptionsAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpOptionsAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpOptionsAceId_Object = MibTableColumn
rcPrFilterAceIpOptionsAceId = _RcPrFilterAceIpOptionsAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 13, 1, 2),
    _RcPrFilterAceIpOptionsAceId_Type()
)
rcPrFilterAceIpOptionsAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpOptionsAceId.setStatus("current")


class _RcPrFilterAceIpOptionsOptions_Type(Integer32):
    """Custom type rcPrFilterAceIpOptionsOptions based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              7,
              10,
              11,
              12,
              15,
              68,
              82,
              130,
              131,
              133,
              134,
              136,
              137,
              142,
              144,
              145,
              147,
              148,
              149,
              150,
              151,
              152,
              205)
        )
    )
    namedValues = NamedValues(
        *(("addressExtension", 147),
          ("baseSecurity", 130),
          ("commercialSecurity", 134),
          ("dynamicPacketState", 151),
          ("encode", 15),
          ("experimentalAccessControl", 142),
          ("experimentalFlowControl", 205),
          ("experimentalMeasurement", 10),
          ("extendedIP", 145),
          ("extendedSecurity", 133),
          ("imiTrafficDescriptor", 144),
          ("looseSourceRoute", 131),
          ("mtuProbe", 11),
          ("mtuReply", 12),
          ("noOperation", 1),
          ("nsapAddresses", 150),
          ("recordRoute", 7),
          ("routeAlert", 148),
          ("selectiveDirectedBroadcast", 149),
          ("streamID", 136),
          ("strictSourceRouting", 137),
          ("timestamp", 68),
          ("traceroute", 82),
          ("upstreamMulticastPacket", 152))
    )


_RcPrFilterAceIpOptionsOptions_Type.__name__ = "Integer32"
_RcPrFilterAceIpOptionsOptions_Object = MibTableColumn
rcPrFilterAceIpOptionsOptions = _RcPrFilterAceIpOptionsOptions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 13, 1, 3),
    _RcPrFilterAceIpOptionsOptions_Type()
)
rcPrFilterAceIpOptionsOptions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpOptionsOptions.setStatus("current")


class _RcPrFilterAceIpOptionsOper_Type(Integer32):
    """Custom type rcPrFilterAceIpOptionsOper based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            5
        )
    )
    namedValues = NamedValues(
        ("any", 5)
    )


_RcPrFilterAceIpOptionsOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpOptionsOper_Object = MibTableColumn
rcPrFilterAceIpOptionsOper = _RcPrFilterAceIpOptionsOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 13, 1, 4),
    _RcPrFilterAceIpOptionsOper_Type()
)
rcPrFilterAceIpOptionsOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpOptionsOper.setStatus("current")
_RcPrFilterAceIpOptionsRowStatus_Type = RowStatus
_RcPrFilterAceIpOptionsRowStatus_Object = MibTableColumn
rcPrFilterAceIpOptionsRowStatus = _RcPrFilterAceIpOptionsRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 13, 1, 5),
    _RcPrFilterAceIpOptionsRowStatus_Type()
)
rcPrFilterAceIpOptionsRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpOptionsRowStatus.setStatus("current")
_RcPrFilterAceIpFragTable_Object = MibTable
rcPrFilterAceIpFragTable = _RcPrFilterAceIpFragTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 14)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpFragTable.setStatus("current")
_RcPrFilterAceIpFragEntry_Object = MibTableRow
rcPrFilterAceIpFragEntry = _RcPrFilterAceIpFragEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 14, 1)
)
rcPrFilterAceIpFragEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpFragAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpFragAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpFragEntry.setStatus("current")


class _RcPrFilterAceIpFragAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpFragAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpFragAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpFragAclId_Object = MibTableColumn
rcPrFilterAceIpFragAclId = _RcPrFilterAceIpFragAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 14, 1, 1),
    _RcPrFilterAceIpFragAclId_Type()
)
rcPrFilterAceIpFragAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpFragAclId.setStatus("current")


class _RcPrFilterAceIpFragAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpFragAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpFragAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpFragAceId_Object = MibTableColumn
rcPrFilterAceIpFragAceId = _RcPrFilterAceIpFragAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 14, 1, 2),
    _RcPrFilterAceIpFragAceId_Type()
)
rcPrFilterAceIpFragAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpFragAceId.setStatus("current")


class _RcPrFilterAceIpFragFragmentation_Type(Integer32):
    """Custom type rcPrFilterAceIpFragFragmentation based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("anyFragment", 1),
          ("lastFragment", 4),
          ("moreFragment", 2),
          ("noFragment", 0),
          ("unused3", 3),
          ("unused5", 5),
          ("unused6", 6),
          ("unused7", 7))
    )


_RcPrFilterAceIpFragFragmentation_Type.__name__ = "Integer32"
_RcPrFilterAceIpFragFragmentation_Object = MibTableColumn
rcPrFilterAceIpFragFragmentation = _RcPrFilterAceIpFragFragmentation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 14, 1, 3),
    _RcPrFilterAceIpFragFragmentation_Type()
)
rcPrFilterAceIpFragFragmentation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpFragFragmentation.setStatus("current")


class _RcPrFilterAceIpFragOper_Type(Integer32):
    """Custom type rcPrFilterAceIpFragOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("eq", 1)
    )


_RcPrFilterAceIpFragOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpFragOper_Object = MibTableColumn
rcPrFilterAceIpFragOper = _RcPrFilterAceIpFragOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 14, 1, 4),
    _RcPrFilterAceIpFragOper_Type()
)
rcPrFilterAceIpFragOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpFragOper.setStatus("current")
_RcPrFilterAceIpFragRowStatus_Type = RowStatus
_RcPrFilterAceIpFragRowStatus_Object = MibTableColumn
rcPrFilterAceIpFragRowStatus = _RcPrFilterAceIpFragRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 14, 1, 5),
    _RcPrFilterAceIpFragRowStatus_Type()
)
rcPrFilterAceIpFragRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpFragRowStatus.setStatus("current")
_RcPrFilterAceProtoTcpSrcPortTable_Object = MibTable
rcPrFilterAceProtoTcpSrcPortTable = _RcPrFilterAceProtoTcpSrcPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 15)
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpSrcPortTable.setStatus("current")
_RcPrFilterAceProtoTcpSrcPortEntry_Object = MibTableRow
rcPrFilterAceProtoTcpSrcPortEntry = _RcPrFilterAceProtoTcpSrcPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 15, 1)
)
rcPrFilterAceProtoTcpSrcPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceProtoTcpSrcPortAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceProtoTcpSrcPortAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpSrcPortEntry.setStatus("current")


class _RcPrFilterAceProtoTcpSrcPortAclId_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpSrcPortAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceProtoTcpSrcPortAclId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpSrcPortAclId_Object = MibTableColumn
rcPrFilterAceProtoTcpSrcPortAclId = _RcPrFilterAceProtoTcpSrcPortAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 15, 1, 1),
    _RcPrFilterAceProtoTcpSrcPortAclId_Type()
)
rcPrFilterAceProtoTcpSrcPortAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpSrcPortAclId.setStatus("current")


class _RcPrFilterAceProtoTcpSrcPortAceId_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpSrcPortAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceProtoTcpSrcPortAceId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpSrcPortAceId_Object = MibTableColumn
rcPrFilterAceProtoTcpSrcPortAceId = _RcPrFilterAceProtoTcpSrcPortAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 15, 1, 2),
    _RcPrFilterAceProtoTcpSrcPortAceId_Type()
)
rcPrFilterAceProtoTcpSrcPortAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpSrcPortAceId.setStatus("current")


class _RcPrFilterAceProtoTcpSrcPortPort_Type(OctetString):
    """Custom type rcPrFilterAceProtoTcpSrcPortPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoTcpSrcPortPort_Type.__name__ = "OctetString"
_RcPrFilterAceProtoTcpSrcPortPort_Object = MibTableColumn
rcPrFilterAceProtoTcpSrcPortPort = _RcPrFilterAceProtoTcpSrcPortPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 15, 1, 3),
    _RcPrFilterAceProtoTcpSrcPortPort_Type()
)
rcPrFilterAceProtoTcpSrcPortPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpSrcPortPort.setStatus("current")


class _RcPrFilterAceProtoTcpSrcPortCount_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpSrcPortCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceProtoTcpSrcPortCount_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpSrcPortCount_Object = MibTableColumn
rcPrFilterAceProtoTcpSrcPortCount = _RcPrFilterAceProtoTcpSrcPortCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 15, 1, 4),
    _RcPrFilterAceProtoTcpSrcPortCount_Type()
)
rcPrFilterAceProtoTcpSrcPortCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpSrcPortCount.setStatus("current")


class _RcPrFilterAceProtoTcpSrcPortOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpSrcPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceProtoTcpSrcPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpSrcPortOper_Object = MibTableColumn
rcPrFilterAceProtoTcpSrcPortOper = _RcPrFilterAceProtoTcpSrcPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 15, 1, 5),
    _RcPrFilterAceProtoTcpSrcPortOper_Type()
)
rcPrFilterAceProtoTcpSrcPortOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpSrcPortOper.setStatus("current")
_RcPrFilterAceProtoTcpSrcPortRowStatus_Type = RowStatus
_RcPrFilterAceProtoTcpSrcPortRowStatus_Object = MibTableColumn
rcPrFilterAceProtoTcpSrcPortRowStatus = _RcPrFilterAceProtoTcpSrcPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 15, 1, 6),
    _RcPrFilterAceProtoTcpSrcPortRowStatus_Type()
)
rcPrFilterAceProtoTcpSrcPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpSrcPortRowStatus.setStatus("current")
_RcPrFilterAceProtoUdpSrcPortTable_Object = MibTable
rcPrFilterAceProtoUdpSrcPortTable = _RcPrFilterAceProtoUdpSrcPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 16)
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpSrcPortTable.setStatus("current")
_RcPrFilterAceProtoUdpSrcPortEntry_Object = MibTableRow
rcPrFilterAceProtoUdpSrcPortEntry = _RcPrFilterAceProtoUdpSrcPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 16, 1)
)
rcPrFilterAceProtoUdpSrcPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceProtoUdpSrcPortAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceProtoUdpSrcPortAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpSrcPortEntry.setStatus("current")


class _RcPrFilterAceProtoUdpSrcPortAclId_Type(Integer32):
    """Custom type rcPrFilterAceProtoUdpSrcPortAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceProtoUdpSrcPortAclId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoUdpSrcPortAclId_Object = MibTableColumn
rcPrFilterAceProtoUdpSrcPortAclId = _RcPrFilterAceProtoUdpSrcPortAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 16, 1, 1),
    _RcPrFilterAceProtoUdpSrcPortAclId_Type()
)
rcPrFilterAceProtoUdpSrcPortAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpSrcPortAclId.setStatus("current")


class _RcPrFilterAceProtoUdpSrcPortAceId_Type(Integer32):
    """Custom type rcPrFilterAceProtoUdpSrcPortAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceProtoUdpSrcPortAceId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoUdpSrcPortAceId_Object = MibTableColumn
rcPrFilterAceProtoUdpSrcPortAceId = _RcPrFilterAceProtoUdpSrcPortAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 16, 1, 2),
    _RcPrFilterAceProtoUdpSrcPortAceId_Type()
)
rcPrFilterAceProtoUdpSrcPortAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpSrcPortAceId.setStatus("current")


class _RcPrFilterAceProtoUdpSrcPortPort_Type(OctetString):
    """Custom type rcPrFilterAceProtoUdpSrcPortPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoUdpSrcPortPort_Type.__name__ = "OctetString"
_RcPrFilterAceProtoUdpSrcPortPort_Object = MibTableColumn
rcPrFilterAceProtoUdpSrcPortPort = _RcPrFilterAceProtoUdpSrcPortPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 16, 1, 3),
    _RcPrFilterAceProtoUdpSrcPortPort_Type()
)
rcPrFilterAceProtoUdpSrcPortPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpSrcPortPort.setStatus("current")


class _RcPrFilterAceProtoUdpSrcPortCount_Type(Integer32):
    """Custom type rcPrFilterAceProtoUdpSrcPortCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceProtoUdpSrcPortCount_Type.__name__ = "Integer32"
_RcPrFilterAceProtoUdpSrcPortCount_Object = MibTableColumn
rcPrFilterAceProtoUdpSrcPortCount = _RcPrFilterAceProtoUdpSrcPortCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 16, 1, 4),
    _RcPrFilterAceProtoUdpSrcPortCount_Type()
)
rcPrFilterAceProtoUdpSrcPortCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpSrcPortCount.setStatus("current")


class _RcPrFilterAceProtoUdpSrcPortOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoUdpSrcPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceProtoUdpSrcPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoUdpSrcPortOper_Object = MibTableColumn
rcPrFilterAceProtoUdpSrcPortOper = _RcPrFilterAceProtoUdpSrcPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 16, 1, 5),
    _RcPrFilterAceProtoUdpSrcPortOper_Type()
)
rcPrFilterAceProtoUdpSrcPortOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpSrcPortOper.setStatus("current")
_RcPrFilterAceProtoUdpSrcPortRowStatus_Type = RowStatus
_RcPrFilterAceProtoUdpSrcPortRowStatus_Object = MibTableColumn
rcPrFilterAceProtoUdpSrcPortRowStatus = _RcPrFilterAceProtoUdpSrcPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 16, 1, 6),
    _RcPrFilterAceProtoUdpSrcPortRowStatus_Type()
)
rcPrFilterAceProtoUdpSrcPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpSrcPortRowStatus.setStatus("current")
_RcPrFilterAceProtoTcpDstPortTable_Object = MibTable
rcPrFilterAceProtoTcpDstPortTable = _RcPrFilterAceProtoTcpDstPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 17)
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpDstPortTable.setStatus("current")
_RcPrFilterAceProtoTcpDstPortEntry_Object = MibTableRow
rcPrFilterAceProtoTcpDstPortEntry = _RcPrFilterAceProtoTcpDstPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 17, 1)
)
rcPrFilterAceProtoTcpDstPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceProtoTcpDstPortAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceProtoTcpDstPortAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpDstPortEntry.setStatus("current")


class _RcPrFilterAceProtoTcpDstPortAclId_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpDstPortAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceProtoTcpDstPortAclId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpDstPortAclId_Object = MibTableColumn
rcPrFilterAceProtoTcpDstPortAclId = _RcPrFilterAceProtoTcpDstPortAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 17, 1, 1),
    _RcPrFilterAceProtoTcpDstPortAclId_Type()
)
rcPrFilterAceProtoTcpDstPortAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpDstPortAclId.setStatus("current")


class _RcPrFilterAceProtoTcpDstPortAceId_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpDstPortAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceProtoTcpDstPortAceId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpDstPortAceId_Object = MibTableColumn
rcPrFilterAceProtoTcpDstPortAceId = _RcPrFilterAceProtoTcpDstPortAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 17, 1, 2),
    _RcPrFilterAceProtoTcpDstPortAceId_Type()
)
rcPrFilterAceProtoTcpDstPortAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpDstPortAceId.setStatus("current")


class _RcPrFilterAceProtoTcpDstPortPort_Type(OctetString):
    """Custom type rcPrFilterAceProtoTcpDstPortPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoTcpDstPortPort_Type.__name__ = "OctetString"
_RcPrFilterAceProtoTcpDstPortPort_Object = MibTableColumn
rcPrFilterAceProtoTcpDstPortPort = _RcPrFilterAceProtoTcpDstPortPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 17, 1, 3),
    _RcPrFilterAceProtoTcpDstPortPort_Type()
)
rcPrFilterAceProtoTcpDstPortPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpDstPortPort.setStatus("current")


class _RcPrFilterAceProtoTcpDstPortCount_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpDstPortCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceProtoTcpDstPortCount_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpDstPortCount_Object = MibTableColumn
rcPrFilterAceProtoTcpDstPortCount = _RcPrFilterAceProtoTcpDstPortCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 17, 1, 4),
    _RcPrFilterAceProtoTcpDstPortCount_Type()
)
rcPrFilterAceProtoTcpDstPortCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpDstPortCount.setStatus("current")


class _RcPrFilterAceProtoTcpDstPortOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpDstPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceProtoTcpDstPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpDstPortOper_Object = MibTableColumn
rcPrFilterAceProtoTcpDstPortOper = _RcPrFilterAceProtoTcpDstPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 17, 1, 5),
    _RcPrFilterAceProtoTcpDstPortOper_Type()
)
rcPrFilterAceProtoTcpDstPortOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpDstPortOper.setStatus("current")
_RcPrFilterAceProtoTcpDstPortRowStatus_Type = RowStatus
_RcPrFilterAceProtoTcpDstPortRowStatus_Object = MibTableColumn
rcPrFilterAceProtoTcpDstPortRowStatus = _RcPrFilterAceProtoTcpDstPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 17, 1, 6),
    _RcPrFilterAceProtoTcpDstPortRowStatus_Type()
)
rcPrFilterAceProtoTcpDstPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpDstPortRowStatus.setStatus("current")
_RcPrFilterAceProtoUdpDstPortTable_Object = MibTable
rcPrFilterAceProtoUdpDstPortTable = _RcPrFilterAceProtoUdpDstPortTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 18)
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpDstPortTable.setStatus("current")
_RcPrFilterAceProtoUdpDstPortEntry_Object = MibTableRow
rcPrFilterAceProtoUdpDstPortEntry = _RcPrFilterAceProtoUdpDstPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 18, 1)
)
rcPrFilterAceProtoUdpDstPortEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceProtoUdpDstPortAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceProtoUdpDstPortAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpDstPortEntry.setStatus("current")


class _RcPrFilterAceProtoUdpDstPortAclId_Type(Integer32):
    """Custom type rcPrFilterAceProtoUdpDstPortAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceProtoUdpDstPortAclId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoUdpDstPortAclId_Object = MibTableColumn
rcPrFilterAceProtoUdpDstPortAclId = _RcPrFilterAceProtoUdpDstPortAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 18, 1, 1),
    _RcPrFilterAceProtoUdpDstPortAclId_Type()
)
rcPrFilterAceProtoUdpDstPortAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpDstPortAclId.setStatus("current")


class _RcPrFilterAceProtoUdpDstPortAceId_Type(Integer32):
    """Custom type rcPrFilterAceProtoUdpDstPortAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceProtoUdpDstPortAceId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoUdpDstPortAceId_Object = MibTableColumn
rcPrFilterAceProtoUdpDstPortAceId = _RcPrFilterAceProtoUdpDstPortAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 18, 1, 2),
    _RcPrFilterAceProtoUdpDstPortAceId_Type()
)
rcPrFilterAceProtoUdpDstPortAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpDstPortAceId.setStatus("current")


class _RcPrFilterAceProtoUdpDstPortPort_Type(OctetString):
    """Custom type rcPrFilterAceProtoUdpDstPortPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoUdpDstPortPort_Type.__name__ = "OctetString"
_RcPrFilterAceProtoUdpDstPortPort_Object = MibTableColumn
rcPrFilterAceProtoUdpDstPortPort = _RcPrFilterAceProtoUdpDstPortPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 18, 1, 3),
    _RcPrFilterAceProtoUdpDstPortPort_Type()
)
rcPrFilterAceProtoUdpDstPortPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpDstPortPort.setStatus("current")


class _RcPrFilterAceProtoUdpDstPortCount_Type(Integer32):
    """Custom type rcPrFilterAceProtoUdpDstPortCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceProtoUdpDstPortCount_Type.__name__ = "Integer32"
_RcPrFilterAceProtoUdpDstPortCount_Object = MibTableColumn
rcPrFilterAceProtoUdpDstPortCount = _RcPrFilterAceProtoUdpDstPortCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 18, 1, 4),
    _RcPrFilterAceProtoUdpDstPortCount_Type()
)
rcPrFilterAceProtoUdpDstPortCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpDstPortCount.setStatus("current")


class _RcPrFilterAceProtoUdpDstPortOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoUdpDstPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceProtoUdpDstPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoUdpDstPortOper_Object = MibTableColumn
rcPrFilterAceProtoUdpDstPortOper = _RcPrFilterAceProtoUdpDstPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 18, 1, 5),
    _RcPrFilterAceProtoUdpDstPortOper_Type()
)
rcPrFilterAceProtoUdpDstPortOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpDstPortOper.setStatus("current")
_RcPrFilterAceProtoUdpDstPortRowStatus_Type = RowStatus
_RcPrFilterAceProtoUdpDstPortRowStatus_Object = MibTableColumn
rcPrFilterAceProtoUdpDstPortRowStatus = _RcPrFilterAceProtoUdpDstPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 18, 1, 6),
    _RcPrFilterAceProtoUdpDstPortRowStatus_Type()
)
rcPrFilterAceProtoUdpDstPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoUdpDstPortRowStatus.setStatus("current")
_RcPrFilterAceProtoIcmpMsgTypeTable_Object = MibTable
rcPrFilterAceProtoIcmpMsgTypeTable = _RcPrFilterAceProtoIcmpMsgTypeTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 19)
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoIcmpMsgTypeTable.setStatus("current")
_RcPrFilterAceProtoIcmpMsgTypeEntry_Object = MibTableRow
rcPrFilterAceProtoIcmpMsgTypeEntry = _RcPrFilterAceProtoIcmpMsgTypeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 19, 1)
)
rcPrFilterAceProtoIcmpMsgTypeEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceProtoIcmpMsgTypeAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceProtoIcmpMsgTypeAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoIcmpMsgTypeEntry.setStatus("current")


class _RcPrFilterAceProtoIcmpMsgTypeAclId_Type(Integer32):
    """Custom type rcPrFilterAceProtoIcmpMsgTypeAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceProtoIcmpMsgTypeAclId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoIcmpMsgTypeAclId_Object = MibTableColumn
rcPrFilterAceProtoIcmpMsgTypeAclId = _RcPrFilterAceProtoIcmpMsgTypeAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 19, 1, 1),
    _RcPrFilterAceProtoIcmpMsgTypeAclId_Type()
)
rcPrFilterAceProtoIcmpMsgTypeAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoIcmpMsgTypeAclId.setStatus("current")


class _RcPrFilterAceProtoIcmpMsgTypeAceId_Type(Integer32):
    """Custom type rcPrFilterAceProtoIcmpMsgTypeAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceProtoIcmpMsgTypeAceId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoIcmpMsgTypeAceId_Object = MibTableColumn
rcPrFilterAceProtoIcmpMsgTypeAceId = _RcPrFilterAceProtoIcmpMsgTypeAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 19, 1, 2),
    _RcPrFilterAceProtoIcmpMsgTypeAceId_Type()
)
rcPrFilterAceProtoIcmpMsgTypeAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoIcmpMsgTypeAceId.setStatus("current")


class _RcPrFilterAceProtoIcmpMsgTypeList_Type(OctetString):
    """Custom type rcPrFilterAceProtoIcmpMsgTypeList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoIcmpMsgTypeList_Type.__name__ = "OctetString"
_RcPrFilterAceProtoIcmpMsgTypeList_Object = MibTableColumn
rcPrFilterAceProtoIcmpMsgTypeList = _RcPrFilterAceProtoIcmpMsgTypeList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 19, 1, 3),
    _RcPrFilterAceProtoIcmpMsgTypeList_Type()
)
rcPrFilterAceProtoIcmpMsgTypeList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoIcmpMsgTypeList.setStatus("current")


class _RcPrFilterAceProtoIcmpMsgTypeCount_Type(Integer32):
    """Custom type rcPrFilterAceProtoIcmpMsgTypeCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceProtoIcmpMsgTypeCount_Type.__name__ = "Integer32"
_RcPrFilterAceProtoIcmpMsgTypeCount_Object = MibTableColumn
rcPrFilterAceProtoIcmpMsgTypeCount = _RcPrFilterAceProtoIcmpMsgTypeCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 19, 1, 4),
    _RcPrFilterAceProtoIcmpMsgTypeCount_Type()
)
rcPrFilterAceProtoIcmpMsgTypeCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoIcmpMsgTypeCount.setStatus("current")


class _RcPrFilterAceProtoIcmpMsgTypeOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoIcmpMsgTypeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceProtoIcmpMsgTypeOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoIcmpMsgTypeOper_Object = MibTableColumn
rcPrFilterAceProtoIcmpMsgTypeOper = _RcPrFilterAceProtoIcmpMsgTypeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 19, 1, 5),
    _RcPrFilterAceProtoIcmpMsgTypeOper_Type()
)
rcPrFilterAceProtoIcmpMsgTypeOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoIcmpMsgTypeOper.setStatus("current")
_RcPrFilterAceProtoIcmpMsgTypeRowStatus_Type = RowStatus
_RcPrFilterAceProtoIcmpMsgTypeRowStatus_Object = MibTableColumn
rcPrFilterAceProtoIcmpMsgTypeRowStatus = _RcPrFilterAceProtoIcmpMsgTypeRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 19, 1, 6),
    _RcPrFilterAceProtoIcmpMsgTypeRowStatus_Type()
)
rcPrFilterAceProtoIcmpMsgTypeRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoIcmpMsgTypeRowStatus.setStatus("current")
_RcPrFilterAceProtoTcpFlagsTable_Object = MibTable
rcPrFilterAceProtoTcpFlagsTable = _RcPrFilterAceProtoTcpFlagsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 20)
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpFlagsTable.setStatus("current")
_RcPrFilterAceProtoTcpFlagsEntry_Object = MibTableRow
rcPrFilterAceProtoTcpFlagsEntry = _RcPrFilterAceProtoTcpFlagsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 20, 1)
)
rcPrFilterAceProtoTcpFlagsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceProtoTcpFlagsAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceProtoTcpFlagsAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpFlagsEntry.setStatus("current")


class _RcPrFilterAceProtoTcpFlagsAclId_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpFlagsAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceProtoTcpFlagsAclId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpFlagsAclId_Object = MibTableColumn
rcPrFilterAceProtoTcpFlagsAclId = _RcPrFilterAceProtoTcpFlagsAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 20, 1, 1),
    _RcPrFilterAceProtoTcpFlagsAclId_Type()
)
rcPrFilterAceProtoTcpFlagsAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpFlagsAclId.setStatus("current")


class _RcPrFilterAceProtoTcpFlagsAceId_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpFlagsAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceProtoTcpFlagsAceId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpFlagsAceId_Object = MibTableColumn
rcPrFilterAceProtoTcpFlagsAceId = _RcPrFilterAceProtoTcpFlagsAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 20, 1, 2),
    _RcPrFilterAceProtoTcpFlagsAceId_Type()
)
rcPrFilterAceProtoTcpFlagsAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpFlagsAceId.setStatus("current")


class _RcPrFilterAceProtoTcpFlagsList_Type(OctetString):
    """Custom type rcPrFilterAceProtoTcpFlagsList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoTcpFlagsList_Type.__name__ = "OctetString"
_RcPrFilterAceProtoTcpFlagsList_Object = MibTableColumn
rcPrFilterAceProtoTcpFlagsList = _RcPrFilterAceProtoTcpFlagsList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 20, 1, 3),
    _RcPrFilterAceProtoTcpFlagsList_Type()
)
rcPrFilterAceProtoTcpFlagsList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpFlagsList.setStatus("current")


class _RcPrFilterAceProtoTcpFlagsCount_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpFlagsCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceProtoTcpFlagsCount_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpFlagsCount_Object = MibTableColumn
rcPrFilterAceProtoTcpFlagsCount = _RcPrFilterAceProtoTcpFlagsCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 20, 1, 4),
    _RcPrFilterAceProtoTcpFlagsCount_Type()
)
rcPrFilterAceProtoTcpFlagsCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpFlagsCount.setStatus("current")


class _RcPrFilterAceProtoTcpFlagsOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoTcpFlagsOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("matchAll", 7),
          ("matchAny", 6))
    )


_RcPrFilterAceProtoTcpFlagsOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoTcpFlagsOper_Object = MibTableColumn
rcPrFilterAceProtoTcpFlagsOper = _RcPrFilterAceProtoTcpFlagsOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 20, 1, 5),
    _RcPrFilterAceProtoTcpFlagsOper_Type()
)
rcPrFilterAceProtoTcpFlagsOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpFlagsOper.setStatus("current")
_RcPrFilterAceProtoTcpFlagsRowStatus_Type = RowStatus
_RcPrFilterAceProtoTcpFlagsRowStatus_Object = MibTableColumn
rcPrFilterAceProtoTcpFlagsRowStatus = _RcPrFilterAceProtoTcpFlagsRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 20, 1, 6),
    _RcPrFilterAceProtoTcpFlagsRowStatus_Type()
)
rcPrFilterAceProtoTcpFlagsRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoTcpFlagsRowStatus.setStatus("current")
_RcPrFilterAcePattern1Table_Object = MibTable
rcPrFilterAcePattern1Table = _RcPrFilterAcePattern1Table_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 21)
)
if mibBuilder.loadTexts:
    rcPrFilterAcePattern1Table.setStatus("current")
_RcPrFilterAcePattern1Entry_Object = MibTableRow
rcPrFilterAcePattern1Entry = _RcPrFilterAcePattern1Entry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 21, 1)
)
rcPrFilterAcePattern1Entry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAcePattern1AclId"),
    (0, "RAPID-CITY", "rcPrFilterAcePattern1AceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAcePattern1Entry.setStatus("current")


class _RcPrFilterAcePattern1AclId_Type(Integer32):
    """Custom type rcPrFilterAcePattern1AclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAcePattern1AclId_Type.__name__ = "Integer32"
_RcPrFilterAcePattern1AclId_Object = MibTableColumn
rcPrFilterAcePattern1AclId = _RcPrFilterAcePattern1AclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 21, 1, 1),
    _RcPrFilterAcePattern1AclId_Type()
)
rcPrFilterAcePattern1AclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern1AclId.setStatus("current")


class _RcPrFilterAcePattern1AceId_Type(Integer32):
    """Custom type rcPrFilterAcePattern1AceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAcePattern1AceId_Type.__name__ = "Integer32"
_RcPrFilterAcePattern1AceId_Object = MibTableColumn
rcPrFilterAcePattern1AceId = _RcPrFilterAcePattern1AceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 21, 1, 2),
    _RcPrFilterAcePattern1AceId_Type()
)
rcPrFilterAcePattern1AceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern1AceId.setStatus("current")


class _RcPrFilterAcePattern1Name_Type(DisplayString):
    """Custom type rcPrFilterAcePattern1Name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterAcePattern1Name_Type.__name__ = "DisplayString"
_RcPrFilterAcePattern1Name_Object = MibTableColumn
rcPrFilterAcePattern1Name = _RcPrFilterAcePattern1Name_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 21, 1, 3),
    _RcPrFilterAcePattern1Name_Type()
)
rcPrFilterAcePattern1Name.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern1Name.setStatus("current")


class _RcPrFilterAcePattern1Value_Type(OctetString):
    """Custom type rcPrFilterAcePattern1Value based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAcePattern1Value_Type.__name__ = "OctetString"
_RcPrFilterAcePattern1Value_Object = MibTableColumn
rcPrFilterAcePattern1Value = _RcPrFilterAcePattern1Value_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 21, 1, 4),
    _RcPrFilterAcePattern1Value_Type()
)
rcPrFilterAcePattern1Value.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern1Value.setStatus("current")


class _RcPrFilterAcePattern1Oper_Type(Integer32):
    """Custom type rcPrFilterAcePattern1Oper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3))
    )


_RcPrFilterAcePattern1Oper_Type.__name__ = "Integer32"
_RcPrFilterAcePattern1Oper_Object = MibTableColumn
rcPrFilterAcePattern1Oper = _RcPrFilterAcePattern1Oper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 21, 1, 5),
    _RcPrFilterAcePattern1Oper_Type()
)
rcPrFilterAcePattern1Oper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern1Oper.setStatus("current")
_RcPrFilterAcePattern1RowStatus_Type = RowStatus
_RcPrFilterAcePattern1RowStatus_Object = MibTableColumn
rcPrFilterAcePattern1RowStatus = _RcPrFilterAcePattern1RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 21, 1, 6),
    _RcPrFilterAcePattern1RowStatus_Type()
)
rcPrFilterAcePattern1RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern1RowStatus.setStatus("current")
_RcPrFilterAcePattern2Table_Object = MibTable
rcPrFilterAcePattern2Table = _RcPrFilterAcePattern2Table_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 22)
)
if mibBuilder.loadTexts:
    rcPrFilterAcePattern2Table.setStatus("current")
_RcPrFilterAcePattern2Entry_Object = MibTableRow
rcPrFilterAcePattern2Entry = _RcPrFilterAcePattern2Entry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 22, 1)
)
rcPrFilterAcePattern2Entry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAcePattern2AclId"),
    (0, "RAPID-CITY", "rcPrFilterAcePattern2AceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAcePattern2Entry.setStatus("current")


class _RcPrFilterAcePattern2AclId_Type(Integer32):
    """Custom type rcPrFilterAcePattern2AclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAcePattern2AclId_Type.__name__ = "Integer32"
_RcPrFilterAcePattern2AclId_Object = MibTableColumn
rcPrFilterAcePattern2AclId = _RcPrFilterAcePattern2AclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 22, 1, 1),
    _RcPrFilterAcePattern2AclId_Type()
)
rcPrFilterAcePattern2AclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern2AclId.setStatus("current")


class _RcPrFilterAcePattern2AceId_Type(Integer32):
    """Custom type rcPrFilterAcePattern2AceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAcePattern2AceId_Type.__name__ = "Integer32"
_RcPrFilterAcePattern2AceId_Object = MibTableColumn
rcPrFilterAcePattern2AceId = _RcPrFilterAcePattern2AceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 22, 1, 2),
    _RcPrFilterAcePattern2AceId_Type()
)
rcPrFilterAcePattern2AceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern2AceId.setStatus("current")


class _RcPrFilterAcePattern2Name_Type(DisplayString):
    """Custom type rcPrFilterAcePattern2Name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterAcePattern2Name_Type.__name__ = "DisplayString"
_RcPrFilterAcePattern2Name_Object = MibTableColumn
rcPrFilterAcePattern2Name = _RcPrFilterAcePattern2Name_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 22, 1, 3),
    _RcPrFilterAcePattern2Name_Type()
)
rcPrFilterAcePattern2Name.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern2Name.setStatus("current")


class _RcPrFilterAcePattern2Value_Type(OctetString):
    """Custom type rcPrFilterAcePattern2Value based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAcePattern2Value_Type.__name__ = "OctetString"
_RcPrFilterAcePattern2Value_Object = MibTableColumn
rcPrFilterAcePattern2Value = _RcPrFilterAcePattern2Value_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 22, 1, 4),
    _RcPrFilterAcePattern2Value_Type()
)
rcPrFilterAcePattern2Value.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern2Value.setStatus("current")


class _RcPrFilterAcePattern2Oper_Type(Integer32):
    """Custom type rcPrFilterAcePattern2Oper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3))
    )


_RcPrFilterAcePattern2Oper_Type.__name__ = "Integer32"
_RcPrFilterAcePattern2Oper_Object = MibTableColumn
rcPrFilterAcePattern2Oper = _RcPrFilterAcePattern2Oper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 22, 1, 5),
    _RcPrFilterAcePattern2Oper_Type()
)
rcPrFilterAcePattern2Oper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern2Oper.setStatus("current")
_RcPrFilterAcePattern2RowStatus_Type = RowStatus
_RcPrFilterAcePattern2RowStatus_Object = MibTableColumn
rcPrFilterAcePattern2RowStatus = _RcPrFilterAcePattern2RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 22, 1, 6),
    _RcPrFilterAcePattern2RowStatus_Type()
)
rcPrFilterAcePattern2RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern2RowStatus.setStatus("current")
_RcPrFilterAcePattern3Table_Object = MibTable
rcPrFilterAcePattern3Table = _RcPrFilterAcePattern3Table_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 23)
)
if mibBuilder.loadTexts:
    rcPrFilterAcePattern3Table.setStatus("current")
_RcPrFilterAcePattern3Entry_Object = MibTableRow
rcPrFilterAcePattern3Entry = _RcPrFilterAcePattern3Entry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 23, 1)
)
rcPrFilterAcePattern3Entry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAcePattern3AclId"),
    (0, "RAPID-CITY", "rcPrFilterAcePattern3AceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAcePattern3Entry.setStatus("current")


class _RcPrFilterAcePattern3AclId_Type(Integer32):
    """Custom type rcPrFilterAcePattern3AclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAcePattern3AclId_Type.__name__ = "Integer32"
_RcPrFilterAcePattern3AclId_Object = MibTableColumn
rcPrFilterAcePattern3AclId = _RcPrFilterAcePattern3AclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 23, 1, 1),
    _RcPrFilterAcePattern3AclId_Type()
)
rcPrFilterAcePattern3AclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern3AclId.setStatus("current")


class _RcPrFilterAcePattern3AceId_Type(Integer32):
    """Custom type rcPrFilterAcePattern3AceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAcePattern3AceId_Type.__name__ = "Integer32"
_RcPrFilterAcePattern3AceId_Object = MibTableColumn
rcPrFilterAcePattern3AceId = _RcPrFilterAcePattern3AceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 23, 1, 2),
    _RcPrFilterAcePattern3AceId_Type()
)
rcPrFilterAcePattern3AceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern3AceId.setStatus("current")


class _RcPrFilterAcePattern3Name_Type(DisplayString):
    """Custom type rcPrFilterAcePattern3Name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterAcePattern3Name_Type.__name__ = "DisplayString"
_RcPrFilterAcePattern3Name_Object = MibTableColumn
rcPrFilterAcePattern3Name = _RcPrFilterAcePattern3Name_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 23, 1, 3),
    _RcPrFilterAcePattern3Name_Type()
)
rcPrFilterAcePattern3Name.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern3Name.setStatus("current")


class _RcPrFilterAcePattern3Value_Type(OctetString):
    """Custom type rcPrFilterAcePattern3Value based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAcePattern3Value_Type.__name__ = "OctetString"
_RcPrFilterAcePattern3Value_Object = MibTableColumn
rcPrFilterAcePattern3Value = _RcPrFilterAcePattern3Value_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 23, 1, 4),
    _RcPrFilterAcePattern3Value_Type()
)
rcPrFilterAcePattern3Value.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern3Value.setStatus("current")


class _RcPrFilterAcePattern3Oper_Type(Integer32):
    """Custom type rcPrFilterAcePattern3Oper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ge", 4),
          ("le", 3))
    )


_RcPrFilterAcePattern3Oper_Type.__name__ = "Integer32"
_RcPrFilterAcePattern3Oper_Object = MibTableColumn
rcPrFilterAcePattern3Oper = _RcPrFilterAcePattern3Oper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 23, 1, 5),
    _RcPrFilterAcePattern3Oper_Type()
)
rcPrFilterAcePattern3Oper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern3Oper.setStatus("current")
_RcPrFilterAcePattern3RowStatus_Type = RowStatus
_RcPrFilterAcePattern3RowStatus_Object = MibTableColumn
rcPrFilterAcePattern3RowStatus = _RcPrFilterAcePattern3RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 23, 1, 6),
    _RcPrFilterAcePattern3RowStatus_Type()
)
rcPrFilterAcePattern3RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAcePattern3RowStatus.setStatus("current")
_RcPrFilterAceStatsTable_Object = MibTable
rcPrFilterAceStatsTable = _RcPrFilterAceStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 24)
)
if mibBuilder.loadTexts:
    rcPrFilterAceStatsTable.setStatus("current")
_RcPrFilterAceStatsEntry_Object = MibTableRow
rcPrFilterAceStatsEntry = _RcPrFilterAceStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 24, 1)
)
rcPrFilterAceStatsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceStatsAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceStatsAceId"),
    (0, "RAPID-CITY", "rcPrFilterAceStatsPortId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceStatsEntry.setStatus("current")


class _RcPrFilterAceStatsAclId_Type(Integer32):
    """Custom type rcPrFilterAceStatsAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceStatsAclId_Type.__name__ = "Integer32"
_RcPrFilterAceStatsAclId_Object = MibTableColumn
rcPrFilterAceStatsAclId = _RcPrFilterAceStatsAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 24, 1, 1),
    _RcPrFilterAceStatsAclId_Type()
)
rcPrFilterAceStatsAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceStatsAclId.setStatus("current")


class _RcPrFilterAceStatsAceId_Type(Integer32):
    """Custom type rcPrFilterAceStatsAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceStatsAceId_Type.__name__ = "Integer32"
_RcPrFilterAceStatsAceId_Object = MibTableColumn
rcPrFilterAceStatsAceId = _RcPrFilterAceStatsAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 24, 1, 2),
    _RcPrFilterAceStatsAceId_Type()
)
rcPrFilterAceStatsAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceStatsAceId.setStatus("current")


class _RcPrFilterAceStatsPortId_Type(Integer32):
    """Custom type rcPrFilterAceStatsPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 703),
    )


_RcPrFilterAceStatsPortId_Type.__name__ = "Integer32"
_RcPrFilterAceStatsPortId_Object = MibTableColumn
rcPrFilterAceStatsPortId = _RcPrFilterAceStatsPortId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 24, 1, 3),
    _RcPrFilterAceStatsPortId_Type()
)
rcPrFilterAceStatsPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceStatsPortId.setStatus("current")
_RcPrFilterAceStatsMatchCountPkts_Type = Counter64
_RcPrFilterAceStatsMatchCountPkts_Object = MibTableColumn
rcPrFilterAceStatsMatchCountPkts = _RcPrFilterAceStatsMatchCountPkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 24, 1, 4),
    _RcPrFilterAceStatsMatchCountPkts_Type()
)
rcPrFilterAceStatsMatchCountPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceStatsMatchCountPkts.setStatus("current")
_RcPrFilterAceStatsMatchCountOctets_Type = Counter64
_RcPrFilterAceStatsMatchCountOctets_Object = MibTableColumn
rcPrFilterAceStatsMatchCountOctets = _RcPrFilterAceStatsMatchCountOctets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 24, 1, 5),
    _RcPrFilterAceStatsMatchCountOctets_Type()
)
rcPrFilterAceStatsMatchCountOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceStatsMatchCountOctets.setStatus("current")
_RcPrFilterAceStatsClear_Type = TruthValue
_RcPrFilterAceStatsClear_Object = MibTableColumn
rcPrFilterAceStatsClear = _RcPrFilterAceStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 24, 1, 6),
    _RcPrFilterAceStatsClear_Type()
)
rcPrFilterAceStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceStatsClear.setStatus("current")
_RcPrFilterAceEthShowTable_Object = MibTable
rcPrFilterAceEthShowTable = _RcPrFilterAceEthShowTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25)
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowTable.setStatus("current")
_RcPrFilterAceEthShowEntry_Object = MibTableRow
rcPrFilterAceEthShowEntry = _RcPrFilterAceEthShowEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1)
)
rcPrFilterAceEthShowEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceEthShowAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceEthShowAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowEntry.setStatus("current")


class _RcPrFilterAceEthShowAclId_Type(Integer32):
    """Custom type rcPrFilterAceEthShowAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceEthShowAclId_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowAclId_Object = MibTableColumn
rcPrFilterAceEthShowAclId = _RcPrFilterAceEthShowAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 1),
    _RcPrFilterAceEthShowAclId_Type()
)
rcPrFilterAceEthShowAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowAclId.setStatus("current")


class _RcPrFilterAceEthShowAceId_Type(Integer32):
    """Custom type rcPrFilterAceEthShowAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceEthShowAceId_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowAceId_Object = MibTableColumn
rcPrFilterAceEthShowAceId = _RcPrFilterAceEthShowAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 2),
    _RcPrFilterAceEthShowAceId_Type()
)
rcPrFilterAceEthShowAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowAceId.setStatus("current")


class _RcPrFilterAceEthShowSrcAddrList_Type(OctetString):
    """Custom type rcPrFilterAceEthShowSrcAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceEthShowSrcAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceEthShowSrcAddrList_Object = MibTableColumn
rcPrFilterAceEthShowSrcAddrList = _RcPrFilterAceEthShowSrcAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 3),
    _RcPrFilterAceEthShowSrcAddrList_Type()
)
rcPrFilterAceEthShowSrcAddrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowSrcAddrList.setStatus("current")


class _RcPrFilterAceEthShowSrcAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceEthShowSrcAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceEthShowSrcAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowSrcAddrOper_Object = MibTableColumn
rcPrFilterAceEthShowSrcAddrOper = _RcPrFilterAceEthShowSrcAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 4),
    _RcPrFilterAceEthShowSrcAddrOper_Type()
)
rcPrFilterAceEthShowSrcAddrOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowSrcAddrOper.setStatus("current")


class _RcPrFilterAceEthShowDstAddrList_Type(OctetString):
    """Custom type rcPrFilterAceEthShowDstAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceEthShowDstAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceEthShowDstAddrList_Object = MibTableColumn
rcPrFilterAceEthShowDstAddrList = _RcPrFilterAceEthShowDstAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 5),
    _RcPrFilterAceEthShowDstAddrList_Type()
)
rcPrFilterAceEthShowDstAddrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowDstAddrList.setStatus("current")


class _RcPrFilterAceEthShowDstAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceEthShowDstAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceEthShowDstAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowDstAddrOper_Object = MibTableColumn
rcPrFilterAceEthShowDstAddrOper = _RcPrFilterAceEthShowDstAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 6),
    _RcPrFilterAceEthShowDstAddrOper_Type()
)
rcPrFilterAceEthShowDstAddrOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowDstAddrOper.setStatus("current")


class _RcPrFilterAceEthShowEtherTypeList_Type(OctetString):
    """Custom type rcPrFilterAceEthShowEtherTypeList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceEthShowEtherTypeList_Type.__name__ = "OctetString"
_RcPrFilterAceEthShowEtherTypeList_Object = MibTableColumn
rcPrFilterAceEthShowEtherTypeList = _RcPrFilterAceEthShowEtherTypeList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 7),
    _RcPrFilterAceEthShowEtherTypeList_Type()
)
rcPrFilterAceEthShowEtherTypeList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowEtherTypeList.setStatus("current")


class _RcPrFilterAceEthShowEtherTypeOper_Type(Integer32):
    """Custom type rcPrFilterAceEthShowEtherTypeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceEthShowEtherTypeOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowEtherTypeOper_Object = MibTableColumn
rcPrFilterAceEthShowEtherTypeOper = _RcPrFilterAceEthShowEtherTypeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 8),
    _RcPrFilterAceEthShowEtherTypeOper_Type()
)
rcPrFilterAceEthShowEtherTypeOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowEtherTypeOper.setStatus("current")


class _RcPrFilterAceEthShowVlanTagPrio_Type(Integer32):
    """Custom type rcPrFilterAceEthShowVlanTagPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("five", 5),
          ("four", 4),
          ("one", 1),
          ("seven", 7),
          ("six", 6),
          ("three", 3),
          ("two", 2),
          ("zero", 0))
    )


_RcPrFilterAceEthShowVlanTagPrio_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowVlanTagPrio_Object = MibTableColumn
rcPrFilterAceEthShowVlanTagPrio = _RcPrFilterAceEthShowVlanTagPrio_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 9),
    _RcPrFilterAceEthShowVlanTagPrio_Type()
)
rcPrFilterAceEthShowVlanTagPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowVlanTagPrio.setStatus("current")


class _RcPrFilterAceEthShowVlanTagPrioOper_Type(Integer32):
    """Custom type rcPrFilterAceEthShowVlanTagPrioOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceEthShowVlanTagPrioOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowVlanTagPrioOper_Object = MibTableColumn
rcPrFilterAceEthShowVlanTagPrioOper = _RcPrFilterAceEthShowVlanTagPrioOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 10),
    _RcPrFilterAceEthShowVlanTagPrioOper_Type()
)
rcPrFilterAceEthShowVlanTagPrioOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowVlanTagPrioOper.setStatus("current")
_RcPrFilterAceEthShowPort_Type = PortSet
_RcPrFilterAceEthShowPort_Object = MibTableColumn
rcPrFilterAceEthShowPort = _RcPrFilterAceEthShowPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 11),
    _RcPrFilterAceEthShowPort_Type()
)
rcPrFilterAceEthShowPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowPort.setStatus("current")


class _RcPrFilterAceEthShowPortOper_Type(Integer32):
    """Custom type rcPrFilterAceEthShowPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceEthShowPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowPortOper_Object = MibTableColumn
rcPrFilterAceEthShowPortOper = _RcPrFilterAceEthShowPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 12),
    _RcPrFilterAceEthShowPortOper_Type()
)
rcPrFilterAceEthShowPortOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowPortOper.setStatus("current")


class _RcPrFilterAceEthShowVlanIdList_Type(IdList):
    """Custom type rcPrFilterAceEthShowVlanIdList based on IdList"""
    subtypeSpec = IdList.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4096),
    )


_RcPrFilterAceEthShowVlanIdList_Type.__name__ = "IdList"
_RcPrFilterAceEthShowVlanIdList_Object = MibTableColumn
rcPrFilterAceEthShowVlanIdList = _RcPrFilterAceEthShowVlanIdList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 13),
    _RcPrFilterAceEthShowVlanIdList_Type()
)
rcPrFilterAceEthShowVlanIdList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowVlanIdList.setStatus("current")


class _RcPrFilterAceEthShowVlanIdOper_Type(Integer32):
    """Custom type rcPrFilterAceEthShowVlanIdOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceEthShowVlanIdOper_Type.__name__ = "Integer32"
_RcPrFilterAceEthShowVlanIdOper_Object = MibTableColumn
rcPrFilterAceEthShowVlanIdOper = _RcPrFilterAceEthShowVlanIdOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 25, 1, 14),
    _RcPrFilterAceEthShowVlanIdOper_Type()
)
rcPrFilterAceEthShowVlanIdOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceEthShowVlanIdOper.setStatus("current")
_RcPrFilterAceIpShowTable_Object = MibTable
rcPrFilterAceIpShowTable = _RcPrFilterAceIpShowTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowTable.setStatus("current")
_RcPrFilterAceIpShowEntry_Object = MibTableRow
rcPrFilterAceIpShowEntry = _RcPrFilterAceIpShowEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1)
)
rcPrFilterAceIpShowEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpShowAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpShowAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowEntry.setStatus("current")


class _RcPrFilterAceIpShowAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpShowAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpShowAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowAclId_Object = MibTableColumn
rcPrFilterAceIpShowAclId = _RcPrFilterAceIpShowAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 1),
    _RcPrFilterAceIpShowAclId_Type()
)
rcPrFilterAceIpShowAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowAclId.setStatus("current")


class _RcPrFilterAceIpShowAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpShowAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpShowAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowAceId_Object = MibTableColumn
rcPrFilterAceIpShowAceId = _RcPrFilterAceIpShowAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 2),
    _RcPrFilterAceIpShowAceId_Type()
)
rcPrFilterAceIpShowAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowAceId.setStatus("current")


class _RcPrFilterAceIpShowSrcAddrList_Type(OctetString):
    """Custom type rcPrFilterAceIpShowSrcAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpShowSrcAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceIpShowSrcAddrList_Object = MibTableColumn
rcPrFilterAceIpShowSrcAddrList = _RcPrFilterAceIpShowSrcAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 3),
    _RcPrFilterAceIpShowSrcAddrList_Type()
)
rcPrFilterAceIpShowSrcAddrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowSrcAddrList.setStatus("current")


class _RcPrFilterAceIpShowSrcAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpShowSrcAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              8,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2),
          ("prefix", 8))
    )


_RcPrFilterAceIpShowSrcAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowSrcAddrOper_Object = MibTableColumn
rcPrFilterAceIpShowSrcAddrOper = _RcPrFilterAceIpShowSrcAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 4),
    _RcPrFilterAceIpShowSrcAddrOper_Type()
)
rcPrFilterAceIpShowSrcAddrOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowSrcAddrOper.setStatus("current")


class _RcPrFilterAceIpShowDstAddrList_Type(OctetString):
    """Custom type rcPrFilterAceIpShowDstAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpShowDstAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceIpShowDstAddrList_Object = MibTableColumn
rcPrFilterAceIpShowDstAddrList = _RcPrFilterAceIpShowDstAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 5),
    _RcPrFilterAceIpShowDstAddrList_Type()
)
rcPrFilterAceIpShowDstAddrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowDstAddrList.setStatus("current")


class _RcPrFilterAceIpShowDstAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpShowDstAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              8,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2),
          ("prefix", 8))
    )


_RcPrFilterAceIpShowDstAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowDstAddrOper_Object = MibTableColumn
rcPrFilterAceIpShowDstAddrOper = _RcPrFilterAceIpShowDstAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 6),
    _RcPrFilterAceIpShowDstAddrOper_Type()
)
rcPrFilterAceIpShowDstAddrOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowDstAddrOper.setStatus("current")


class _RcPrFilterAceIpShowDscpList_Type(OctetString):
    """Custom type rcPrFilterAceIpShowDscpList based on OctetString"""
    defaultValue = OctetString("disable")

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpShowDscpList_Type.__name__ = "OctetString"
_RcPrFilterAceIpShowDscpList_Object = MibTableColumn
rcPrFilterAceIpShowDscpList = _RcPrFilterAceIpShowDscpList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 7),
    _RcPrFilterAceIpShowDscpList_Type()
)
rcPrFilterAceIpShowDscpList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowDscpList.setStatus("current")


class _RcPrFilterAceIpShowDscpOper_Type(Integer32):
    """Custom type rcPrFilterAceIpShowDscpOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpShowDscpOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowDscpOper_Object = MibTableColumn
rcPrFilterAceIpShowDscpOper = _RcPrFilterAceIpShowDscpOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 8),
    _RcPrFilterAceIpShowDscpOper_Type()
)
rcPrFilterAceIpShowDscpOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowDscpOper.setStatus("current")


class _RcPrFilterAceIpShowProtoList_Type(OctetString):
    """Custom type rcPrFilterAceIpShowProtoList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpShowProtoList_Type.__name__ = "OctetString"
_RcPrFilterAceIpShowProtoList_Object = MibTableColumn
rcPrFilterAceIpShowProtoList = _RcPrFilterAceIpShowProtoList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 9),
    _RcPrFilterAceIpShowProtoList_Type()
)
rcPrFilterAceIpShowProtoList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowProtoList.setStatus("current")


class _RcPrFilterAceIpShowProtoOper_Type(Integer32):
    """Custom type rcPrFilterAceIpShowProtoOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpShowProtoOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowProtoOper_Object = MibTableColumn
rcPrFilterAceIpShowProtoOper = _RcPrFilterAceIpShowProtoOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 10),
    _RcPrFilterAceIpShowProtoOper_Type()
)
rcPrFilterAceIpShowProtoOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowProtoOper.setStatus("current")


class _RcPrFilterAceIpShowOptions_Type(Integer32):
    """Custom type rcPrFilterAceIpShowOptions based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              7,
              10,
              11,
              12,
              15,
              68,
              82,
              130,
              131,
              133,
              134,
              136,
              137,
              142,
              144,
              145,
              147,
              148,
              149,
              150,
              151,
              152,
              205)
        )
    )
    namedValues = NamedValues(
        *(("addressExtension", 147),
          ("baseSecurity", 130),
          ("commercialSecurity", 134),
          ("dynamicPacketState", 151),
          ("encode", 15),
          ("experimentalAccessControl", 142),
          ("experimentalFlowControl", 205),
          ("experimentalMeasurement", 10),
          ("extendedIP", 145),
          ("extendedSecurity", 133),
          ("imiTrafficDescriptor", 144),
          ("looseSourceRoute", 131),
          ("mtuProbe", 11),
          ("mtuReply", 12),
          ("noOperation", 1),
          ("nsapAddresses", 150),
          ("recordRoute", 7),
          ("routeAlert", 148),
          ("selectiveDirectedBroadcast", 149),
          ("streamID", 136),
          ("strictSourceRouting", 137),
          ("timestamp", 68),
          ("traceroute", 82),
          ("upstreamMulticastPacket", 152))
    )


_RcPrFilterAceIpShowOptions_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowOptions_Object = MibTableColumn
rcPrFilterAceIpShowOptions = _RcPrFilterAceIpShowOptions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 11),
    _RcPrFilterAceIpShowOptions_Type()
)
rcPrFilterAceIpShowOptions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowOptions.setStatus("current")


class _RcPrFilterAceIpShowOptionsOper_Type(Integer32):
    """Custom type rcPrFilterAceIpShowOptionsOper based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            5
        )
    )
    namedValues = NamedValues(
        ("any", 5)
    )


_RcPrFilterAceIpShowOptionsOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowOptionsOper_Object = MibTableColumn
rcPrFilterAceIpShowOptionsOper = _RcPrFilterAceIpShowOptionsOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 12),
    _RcPrFilterAceIpShowOptionsOper_Type()
)
rcPrFilterAceIpShowOptionsOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowOptionsOper.setStatus("current")


class _RcPrFilterAceIpShowFragmentation_Type(Integer32):
    """Custom type rcPrFilterAceIpShowFragmentation based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("anyFragment", 1),
          ("lastFragment", 4),
          ("moreFragment", 2),
          ("noFragment", 0),
          ("unused3", 3),
          ("unused5", 5),
          ("unused6", 6),
          ("unused7", 7))
    )


_RcPrFilterAceIpShowFragmentation_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowFragmentation_Object = MibTableColumn
rcPrFilterAceIpShowFragmentation = _RcPrFilterAceIpShowFragmentation_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 13),
    _RcPrFilterAceIpShowFragmentation_Type()
)
rcPrFilterAceIpShowFragmentation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowFragmentation.setStatus("current")


class _RcPrFilterAceIpShowFragOper_Type(Integer32):
    """Custom type rcPrFilterAceIpShowFragOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1))
    )


_RcPrFilterAceIpShowFragOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpShowFragOper_Object = MibTableColumn
rcPrFilterAceIpShowFragOper = _RcPrFilterAceIpShowFragOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 26, 1, 14),
    _RcPrFilterAceIpShowFragOper_Type()
)
rcPrFilterAceIpShowFragOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpShowFragOper.setStatus("current")
_RcPrFilterAceProtoShowTable_Object = MibTable
rcPrFilterAceProtoShowTable = _RcPrFilterAceProtoShowTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27)
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowTable.setStatus("current")
_RcPrFilterAceProtoShowEntry_Object = MibTableRow
rcPrFilterAceProtoShowEntry = _RcPrFilterAceProtoShowEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1)
)
rcPrFilterAceProtoShowEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceProtoShowAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceProtoShowAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowEntry.setStatus("current")


class _RcPrFilterAceProtoShowAclId_Type(Integer32):
    """Custom type rcPrFilterAceProtoShowAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceProtoShowAclId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoShowAclId_Object = MibTableColumn
rcPrFilterAceProtoShowAclId = _RcPrFilterAceProtoShowAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 1),
    _RcPrFilterAceProtoShowAclId_Type()
)
rcPrFilterAceProtoShowAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowAclId.setStatus("current")


class _RcPrFilterAceProtoShowAceId_Type(Integer32):
    """Custom type rcPrFilterAceProtoShowAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceProtoShowAceId_Type.__name__ = "Integer32"
_RcPrFilterAceProtoShowAceId_Object = MibTableColumn
rcPrFilterAceProtoShowAceId = _RcPrFilterAceProtoShowAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 2),
    _RcPrFilterAceProtoShowAceId_Type()
)
rcPrFilterAceProtoShowAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowAceId.setStatus("current")


class _RcPrFilterAceProtoShowTcpSrcPort_Type(OctetString):
    """Custom type rcPrFilterAceProtoShowTcpSrcPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoShowTcpSrcPort_Type.__name__ = "OctetString"
_RcPrFilterAceProtoShowTcpSrcPort_Object = MibTableColumn
rcPrFilterAceProtoShowTcpSrcPort = _RcPrFilterAceProtoShowTcpSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 3),
    _RcPrFilterAceProtoShowTcpSrcPort_Type()
)
rcPrFilterAceProtoShowTcpSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowTcpSrcPort.setStatus("current")


class _RcPrFilterAceProtoShowTcpSrcPortOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoShowTcpSrcPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceProtoShowTcpSrcPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoShowTcpSrcPortOper_Object = MibTableColumn
rcPrFilterAceProtoShowTcpSrcPortOper = _RcPrFilterAceProtoShowTcpSrcPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 4),
    _RcPrFilterAceProtoShowTcpSrcPortOper_Type()
)
rcPrFilterAceProtoShowTcpSrcPortOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowTcpSrcPortOper.setStatus("current")


class _RcPrFilterAceProtoShowUdpSrcPort_Type(OctetString):
    """Custom type rcPrFilterAceProtoShowUdpSrcPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoShowUdpSrcPort_Type.__name__ = "OctetString"
_RcPrFilterAceProtoShowUdpSrcPort_Object = MibTableColumn
rcPrFilterAceProtoShowUdpSrcPort = _RcPrFilterAceProtoShowUdpSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 5),
    _RcPrFilterAceProtoShowUdpSrcPort_Type()
)
rcPrFilterAceProtoShowUdpSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowUdpSrcPort.setStatus("current")


class _RcPrFilterAceProtoShowUdpSrcPortOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoShowUdpSrcPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceProtoShowUdpSrcPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoShowUdpSrcPortOper_Object = MibTableColumn
rcPrFilterAceProtoShowUdpSrcPortOper = _RcPrFilterAceProtoShowUdpSrcPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 6),
    _RcPrFilterAceProtoShowUdpSrcPortOper_Type()
)
rcPrFilterAceProtoShowUdpSrcPortOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowUdpSrcPortOper.setStatus("current")


class _RcPrFilterAceProtoShowTcpDstPort_Type(OctetString):
    """Custom type rcPrFilterAceProtoShowTcpDstPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoShowTcpDstPort_Type.__name__ = "OctetString"
_RcPrFilterAceProtoShowTcpDstPort_Object = MibTableColumn
rcPrFilterAceProtoShowTcpDstPort = _RcPrFilterAceProtoShowTcpDstPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 7),
    _RcPrFilterAceProtoShowTcpDstPort_Type()
)
rcPrFilterAceProtoShowTcpDstPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowTcpDstPort.setStatus("current")


class _RcPrFilterAceProtoShowTcpDstPortOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoShowTcpDstPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceProtoShowTcpDstPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoShowTcpDstPortOper_Object = MibTableColumn
rcPrFilterAceProtoShowTcpDstPortOper = _RcPrFilterAceProtoShowTcpDstPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 8),
    _RcPrFilterAceProtoShowTcpDstPortOper_Type()
)
rcPrFilterAceProtoShowTcpDstPortOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowTcpDstPortOper.setStatus("current")


class _RcPrFilterAceProtoShowUdpDstPort_Type(OctetString):
    """Custom type rcPrFilterAceProtoShowUdpDstPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoShowUdpDstPort_Type.__name__ = "OctetString"
_RcPrFilterAceProtoShowUdpDstPort_Object = MibTableColumn
rcPrFilterAceProtoShowUdpDstPort = _RcPrFilterAceProtoShowUdpDstPort_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 9),
    _RcPrFilterAceProtoShowUdpDstPort_Type()
)
rcPrFilterAceProtoShowUdpDstPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowUdpDstPort.setStatus("current")


class _RcPrFilterAceProtoShowUdpDstPortOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoShowUdpDstPortOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3),
          ("ne", 2))
    )


_RcPrFilterAceProtoShowUdpDstPortOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoShowUdpDstPortOper_Object = MibTableColumn
rcPrFilterAceProtoShowUdpDstPortOper = _RcPrFilterAceProtoShowUdpDstPortOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 10),
    _RcPrFilterAceProtoShowUdpDstPortOper_Type()
)
rcPrFilterAceProtoShowUdpDstPortOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowUdpDstPortOper.setStatus("current")


class _RcPrFilterAceProtoShowIcmpMsgTypeList_Type(OctetString):
    """Custom type rcPrFilterAceProtoShowIcmpMsgTypeList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoShowIcmpMsgTypeList_Type.__name__ = "OctetString"
_RcPrFilterAceProtoShowIcmpMsgTypeList_Object = MibTableColumn
rcPrFilterAceProtoShowIcmpMsgTypeList = _RcPrFilterAceProtoShowIcmpMsgTypeList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 11),
    _RcPrFilterAceProtoShowIcmpMsgTypeList_Type()
)
rcPrFilterAceProtoShowIcmpMsgTypeList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowIcmpMsgTypeList.setStatus("current")


class _RcPrFilterAceProtoShowIcmpMsgTypeOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoShowIcmpMsgTypeOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceProtoShowIcmpMsgTypeOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoShowIcmpMsgTypeOper_Object = MibTableColumn
rcPrFilterAceProtoShowIcmpMsgTypeOper = _RcPrFilterAceProtoShowIcmpMsgTypeOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 12),
    _RcPrFilterAceProtoShowIcmpMsgTypeOper_Type()
)
rcPrFilterAceProtoShowIcmpMsgTypeOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowIcmpMsgTypeOper.setStatus("current")


class _RcPrFilterAceProtoShowTcpFlagsList_Type(OctetString):
    """Custom type rcPrFilterAceProtoShowTcpFlagsList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceProtoShowTcpFlagsList_Type.__name__ = "OctetString"
_RcPrFilterAceProtoShowTcpFlagsList_Object = MibTableColumn
rcPrFilterAceProtoShowTcpFlagsList = _RcPrFilterAceProtoShowTcpFlagsList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 13),
    _RcPrFilterAceProtoShowTcpFlagsList_Type()
)
rcPrFilterAceProtoShowTcpFlagsList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowTcpFlagsList.setStatus("current")


class _RcPrFilterAceProtoShowTcpFlagsOper_Type(Integer32):
    """Custom type rcPrFilterAceProtoShowTcpFlagsOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("matchAll", 7),
          ("matchAny", 6))
    )


_RcPrFilterAceProtoShowTcpFlagsOper_Type.__name__ = "Integer32"
_RcPrFilterAceProtoShowTcpFlagsOper_Object = MibTableColumn
rcPrFilterAceProtoShowTcpFlagsOper = _RcPrFilterAceProtoShowTcpFlagsOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 27, 1, 14),
    _RcPrFilterAceProtoShowTcpFlagsOper_Type()
)
rcPrFilterAceProtoShowTcpFlagsOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceProtoShowTcpFlagsOper.setStatus("current")
_RcPrFilterAcePatternShowTable_Object = MibTable
rcPrFilterAcePatternShowTable = _RcPrFilterAcePatternShowTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28)
)
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowTable.setStatus("current")
_RcPrFilterAcePatternShowEntry_Object = MibTableRow
rcPrFilterAcePatternShowEntry = _RcPrFilterAcePatternShowEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1)
)
rcPrFilterAcePatternShowEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAcePatternShowAclId"),
    (0, "RAPID-CITY", "rcPrFilterAcePatternShowAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowEntry.setStatus("current")


class _RcPrFilterAcePatternShowAclId_Type(Integer32):
    """Custom type rcPrFilterAcePatternShowAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAcePatternShowAclId_Type.__name__ = "Integer32"
_RcPrFilterAcePatternShowAclId_Object = MibTableColumn
rcPrFilterAcePatternShowAclId = _RcPrFilterAcePatternShowAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 1),
    _RcPrFilterAcePatternShowAclId_Type()
)
rcPrFilterAcePatternShowAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowAclId.setStatus("current")


class _RcPrFilterAcePatternShowAceId_Type(Integer32):
    """Custom type rcPrFilterAcePatternShowAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAcePatternShowAceId_Type.__name__ = "Integer32"
_RcPrFilterAcePatternShowAceId_Object = MibTableColumn
rcPrFilterAcePatternShowAceId = _RcPrFilterAcePatternShowAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 2),
    _RcPrFilterAcePatternShowAceId_Type()
)
rcPrFilterAcePatternShowAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowAceId.setStatus("current")


class _RcPrFilterAcePatternShowPattern1Name_Type(DisplayString):
    """Custom type rcPrFilterAcePatternShowPattern1Name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterAcePatternShowPattern1Name_Type.__name__ = "DisplayString"
_RcPrFilterAcePatternShowPattern1Name_Object = MibTableColumn
rcPrFilterAcePatternShowPattern1Name = _RcPrFilterAcePatternShowPattern1Name_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 3),
    _RcPrFilterAcePatternShowPattern1Name_Type()
)
rcPrFilterAcePatternShowPattern1Name.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern1Name.setStatus("current")


class _RcPrFilterAcePatternShowPattern1Value_Type(OctetString):
    """Custom type rcPrFilterAcePatternShowPattern1Value based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAcePatternShowPattern1Value_Type.__name__ = "OctetString"
_RcPrFilterAcePatternShowPattern1Value_Object = MibTableColumn
rcPrFilterAcePatternShowPattern1Value = _RcPrFilterAcePatternShowPattern1Value_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 4),
    _RcPrFilterAcePatternShowPattern1Value_Type()
)
rcPrFilterAcePatternShowPattern1Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern1Value.setStatus("current")


class _RcPrFilterAcePatternShowPattern1Oper_Type(Integer32):
    """Custom type rcPrFilterAcePatternShowPattern1Oper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3))
    )


_RcPrFilterAcePatternShowPattern1Oper_Type.__name__ = "Integer32"
_RcPrFilterAcePatternShowPattern1Oper_Object = MibTableColumn
rcPrFilterAcePatternShowPattern1Oper = _RcPrFilterAcePatternShowPattern1Oper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 5),
    _RcPrFilterAcePatternShowPattern1Oper_Type()
)
rcPrFilterAcePatternShowPattern1Oper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern1Oper.setStatus("current")


class _RcPrFilterAcePatternShowPattern2Name_Type(DisplayString):
    """Custom type rcPrFilterAcePatternShowPattern2Name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterAcePatternShowPattern2Name_Type.__name__ = "DisplayString"
_RcPrFilterAcePatternShowPattern2Name_Object = MibTableColumn
rcPrFilterAcePatternShowPattern2Name = _RcPrFilterAcePatternShowPattern2Name_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 6),
    _RcPrFilterAcePatternShowPattern2Name_Type()
)
rcPrFilterAcePatternShowPattern2Name.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern2Name.setStatus("current")


class _RcPrFilterAcePatternShowPattern2Value_Type(OctetString):
    """Custom type rcPrFilterAcePatternShowPattern2Value based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAcePatternShowPattern2Value_Type.__name__ = "OctetString"
_RcPrFilterAcePatternShowPattern2Value_Object = MibTableColumn
rcPrFilterAcePatternShowPattern2Value = _RcPrFilterAcePatternShowPattern2Value_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 7),
    _RcPrFilterAcePatternShowPattern2Value_Type()
)
rcPrFilterAcePatternShowPattern2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern2Value.setStatus("current")


class _RcPrFilterAcePatternShowPattern2Oper_Type(Integer32):
    """Custom type rcPrFilterAcePatternShowPattern2Oper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3))
    )


_RcPrFilterAcePatternShowPattern2Oper_Type.__name__ = "Integer32"
_RcPrFilterAcePatternShowPattern2Oper_Object = MibTableColumn
rcPrFilterAcePatternShowPattern2Oper = _RcPrFilterAcePatternShowPattern2Oper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 8),
    _RcPrFilterAcePatternShowPattern2Oper_Type()
)
rcPrFilterAcePatternShowPattern2Oper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern2Oper.setStatus("current")


class _RcPrFilterAcePatternShowPattern3Name_Type(DisplayString):
    """Custom type rcPrFilterAcePatternShowPattern3Name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcPrFilterAcePatternShowPattern3Name_Type.__name__ = "DisplayString"
_RcPrFilterAcePatternShowPattern3Name_Object = MibTableColumn
rcPrFilterAcePatternShowPattern3Name = _RcPrFilterAcePatternShowPattern3Name_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 9),
    _RcPrFilterAcePatternShowPattern3Name_Type()
)
rcPrFilterAcePatternShowPattern3Name.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern3Name.setStatus("current")


class _RcPrFilterAcePatternShowPattern3Value_Type(OctetString):
    """Custom type rcPrFilterAcePatternShowPattern3Value based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAcePatternShowPattern3Value_Type.__name__ = "OctetString"
_RcPrFilterAcePatternShowPattern3Value_Object = MibTableColumn
rcPrFilterAcePatternShowPattern3Value = _RcPrFilterAcePatternShowPattern3Value_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 10),
    _RcPrFilterAcePatternShowPattern3Value_Type()
)
rcPrFilterAcePatternShowPattern3Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern3Value.setStatus("current")


class _RcPrFilterAcePatternShowPattern3Oper_Type(Integer32):
    """Custom type rcPrFilterAcePatternShowPattern3Oper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ge", 4),
          ("le", 3))
    )


_RcPrFilterAcePatternShowPattern3Oper_Type.__name__ = "Integer32"
_RcPrFilterAcePatternShowPattern3Oper_Object = MibTableColumn
rcPrFilterAcePatternShowPattern3Oper = _RcPrFilterAcePatternShowPattern3Oper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 28, 1, 11),
    _RcPrFilterAcePatternShowPattern3Oper_Type()
)
rcPrFilterAcePatternShowPattern3Oper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAcePatternShowPattern3Oper.setStatus("current")
_RcPrFilterAceIpv6SrcAddrTable_Object = MibTable
rcPrFilterAceIpv6SrcAddrTable = _RcPrFilterAceIpv6SrcAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 29)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6SrcAddrTable.setStatus("current")
_RcPrFilterAceIpv6SrcAddrEntry_Object = MibTableRow
rcPrFilterAceIpv6SrcAddrEntry = _RcPrFilterAceIpv6SrcAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 29, 1)
)
rcPrFilterAceIpv6SrcAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpv6SrcAddrAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpv6SrcAddrAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6SrcAddrEntry.setStatus("current")


class _RcPrFilterAceIpv6SrcAddrAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpv6SrcAddrAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpv6SrcAddrAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6SrcAddrAclId_Object = MibTableColumn
rcPrFilterAceIpv6SrcAddrAclId = _RcPrFilterAceIpv6SrcAddrAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 29, 1, 1),
    _RcPrFilterAceIpv6SrcAddrAclId_Type()
)
rcPrFilterAceIpv6SrcAddrAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6SrcAddrAclId.setStatus("current")


class _RcPrFilterAceIpv6SrcAddrAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpv6SrcAddrAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpv6SrcAddrAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6SrcAddrAceId_Object = MibTableColumn
rcPrFilterAceIpv6SrcAddrAceId = _RcPrFilterAceIpv6SrcAddrAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 29, 1, 2),
    _RcPrFilterAceIpv6SrcAddrAceId_Type()
)
rcPrFilterAceIpv6SrcAddrAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6SrcAddrAceId.setStatus("current")


class _RcPrFilterAceIpv6SrcAddrList_Type(OctetString):
    """Custom type rcPrFilterAceIpv6SrcAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpv6SrcAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceIpv6SrcAddrList_Object = MibTableColumn
rcPrFilterAceIpv6SrcAddrList = _RcPrFilterAceIpv6SrcAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 29, 1, 3),
    _RcPrFilterAceIpv6SrcAddrList_Type()
)
rcPrFilterAceIpv6SrcAddrList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6SrcAddrList.setStatus("current")


class _RcPrFilterAceIpv6SrcAddrListCount_Type(Integer32):
    """Custom type rcPrFilterAceIpv6SrcAddrListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceIpv6SrcAddrListCount_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6SrcAddrListCount_Object = MibTableColumn
rcPrFilterAceIpv6SrcAddrListCount = _RcPrFilterAceIpv6SrcAddrListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 29, 1, 4),
    _RcPrFilterAceIpv6SrcAddrListCount_Type()
)
rcPrFilterAceIpv6SrcAddrListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6SrcAddrListCount.setStatus("current")


class _RcPrFilterAceIpv6SrcAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpv6SrcAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpv6SrcAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6SrcAddrOper_Object = MibTableColumn
rcPrFilterAceIpv6SrcAddrOper = _RcPrFilterAceIpv6SrcAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 29, 1, 5),
    _RcPrFilterAceIpv6SrcAddrOper_Type()
)
rcPrFilterAceIpv6SrcAddrOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6SrcAddrOper.setStatus("current")
_RcPrFilterAceIpv6SrcAddrRowStatus_Type = RowStatus
_RcPrFilterAceIpv6SrcAddrRowStatus_Object = MibTableColumn
rcPrFilterAceIpv6SrcAddrRowStatus = _RcPrFilterAceIpv6SrcAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 29, 1, 6),
    _RcPrFilterAceIpv6SrcAddrRowStatus_Type()
)
rcPrFilterAceIpv6SrcAddrRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6SrcAddrRowStatus.setStatus("current")
_RcPrFilterAceIpv6DstAddrTable_Object = MibTable
rcPrFilterAceIpv6DstAddrTable = _RcPrFilterAceIpv6DstAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 30)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6DstAddrTable.setStatus("current")
_RcPrFilterAceIpv6DstAddrEntry_Object = MibTableRow
rcPrFilterAceIpv6DstAddrEntry = _RcPrFilterAceIpv6DstAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 30, 1)
)
rcPrFilterAceIpv6DstAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpv6DstAddrAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpv6DstAddrAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6DstAddrEntry.setStatus("current")


class _RcPrFilterAceIpv6DstAddrAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpv6DstAddrAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpv6DstAddrAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6DstAddrAclId_Object = MibTableColumn
rcPrFilterAceIpv6DstAddrAclId = _RcPrFilterAceIpv6DstAddrAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 30, 1, 1),
    _RcPrFilterAceIpv6DstAddrAclId_Type()
)
rcPrFilterAceIpv6DstAddrAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6DstAddrAclId.setStatus("current")


class _RcPrFilterAceIpv6DstAddrAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpv6DstAddrAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpv6DstAddrAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6DstAddrAceId_Object = MibTableColumn
rcPrFilterAceIpv6DstAddrAceId = _RcPrFilterAceIpv6DstAddrAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 30, 1, 2),
    _RcPrFilterAceIpv6DstAddrAceId_Type()
)
rcPrFilterAceIpv6DstAddrAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6DstAddrAceId.setStatus("current")


class _RcPrFilterAceIpv6DstAddrList_Type(OctetString):
    """Custom type rcPrFilterAceIpv6DstAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpv6DstAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceIpv6DstAddrList_Object = MibTableColumn
rcPrFilterAceIpv6DstAddrList = _RcPrFilterAceIpv6DstAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 30, 1, 3),
    _RcPrFilterAceIpv6DstAddrList_Type()
)
rcPrFilterAceIpv6DstAddrList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6DstAddrList.setStatus("current")


class _RcPrFilterAceIpv6DstAddrListCount_Type(Integer32):
    """Custom type rcPrFilterAceIpv6DstAddrListCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RcPrFilterAceIpv6DstAddrListCount_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6DstAddrListCount_Object = MibTableColumn
rcPrFilterAceIpv6DstAddrListCount = _RcPrFilterAceIpv6DstAddrListCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 30, 1, 4),
    _RcPrFilterAceIpv6DstAddrListCount_Type()
)
rcPrFilterAceIpv6DstAddrListCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6DstAddrListCount.setStatus("current")


class _RcPrFilterAceIpv6DstAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpv6DstAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpv6DstAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6DstAddrOper_Object = MibTableColumn
rcPrFilterAceIpv6DstAddrOper = _RcPrFilterAceIpv6DstAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 30, 1, 5),
    _RcPrFilterAceIpv6DstAddrOper_Type()
)
rcPrFilterAceIpv6DstAddrOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6DstAddrOper.setStatus("current")
_RcPrFilterAceIpv6DstAddrRowStatus_Type = RowStatus
_RcPrFilterAceIpv6DstAddrRowStatus_Object = MibTableColumn
rcPrFilterAceIpv6DstAddrRowStatus = _RcPrFilterAceIpv6DstAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 30, 1, 6),
    _RcPrFilterAceIpv6DstAddrRowStatus_Type()
)
rcPrFilterAceIpv6DstAddrRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6DstAddrRowStatus.setStatus("current")
_RcPrFilterAceIpv6NextHdrTable_Object = MibTable
rcPrFilterAceIpv6NextHdrTable = _RcPrFilterAceIpv6NextHdrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 31)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6NextHdrTable.setStatus("current")
_RcPrFilterAceIpv6NextHdrEntry_Object = MibTableRow
rcPrFilterAceIpv6NextHdrEntry = _RcPrFilterAceIpv6NextHdrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 31, 1)
)
rcPrFilterAceIpv6NextHdrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpv6NextHdrAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpv6NextHdrAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6NextHdrEntry.setStatus("current")


class _RcPrFilterAceIpv6NextHdrAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpv6NextHdrAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpv6NextHdrAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6NextHdrAclId_Object = MibTableColumn
rcPrFilterAceIpv6NextHdrAclId = _RcPrFilterAceIpv6NextHdrAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 31, 1, 1),
    _RcPrFilterAceIpv6NextHdrAclId_Type()
)
rcPrFilterAceIpv6NextHdrAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6NextHdrAclId.setStatus("current")


class _RcPrFilterAceIpv6NextHdrAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpv6NextHdrAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpv6NextHdrAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6NextHdrAceId_Object = MibTableColumn
rcPrFilterAceIpv6NextHdrAceId = _RcPrFilterAceIpv6NextHdrAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 31, 1, 2),
    _RcPrFilterAceIpv6NextHdrAceId_Type()
)
rcPrFilterAceIpv6NextHdrAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6NextHdrAceId.setStatus("current")
_RcPrFilterAceIpv6NextHdrNextHdr_Type = Ipv6NextHdr
_RcPrFilterAceIpv6NextHdrNextHdr_Object = MibTableColumn
rcPrFilterAceIpv6NextHdrNextHdr = _RcPrFilterAceIpv6NextHdrNextHdr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 31, 1, 3),
    _RcPrFilterAceIpv6NextHdrNextHdr_Type()
)
rcPrFilterAceIpv6NextHdrNextHdr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6NextHdrNextHdr.setStatus("current")


class _RcPrFilterAceIpv6NextHdrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpv6NextHdrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpv6NextHdrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6NextHdrOper_Object = MibTableColumn
rcPrFilterAceIpv6NextHdrOper = _RcPrFilterAceIpv6NextHdrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 31, 1, 4),
    _RcPrFilterAceIpv6NextHdrOper_Type()
)
rcPrFilterAceIpv6NextHdrOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6NextHdrOper.setStatus("current")
_RcPrFilterAceIpv6NextHdrRowStatus_Type = RowStatus
_RcPrFilterAceIpv6NextHdrRowStatus_Object = MibTableColumn
rcPrFilterAceIpv6NextHdrRowStatus = _RcPrFilterAceIpv6NextHdrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 31, 1, 5),
    _RcPrFilterAceIpv6NextHdrRowStatus_Type()
)
rcPrFilterAceIpv6NextHdrRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6NextHdrRowStatus.setStatus("current")
_RcPrFilterAceIpv6ShowTable_Object = MibTable
rcPrFilterAceIpv6ShowTable = _RcPrFilterAceIpv6ShowTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32)
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowTable.setStatus("current")
_RcPrFilterAceIpv6ShowEntry_Object = MibTableRow
rcPrFilterAceIpv6ShowEntry = _RcPrFilterAceIpv6ShowEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1)
)
rcPrFilterAceIpv6ShowEntry.setIndexNames(
    (0, "RAPID-CITY", "rcPrFilterAceIpv6ShowAclId"),
    (0, "RAPID-CITY", "rcPrFilterAceIpv6ShowAceId"),
)
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowEntry.setStatus("current")


class _RcPrFilterAceIpv6ShowAclId_Type(Integer32):
    """Custom type rcPrFilterAceIpv6ShowAclId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcPrFilterAceIpv6ShowAclId_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6ShowAclId_Object = MibTableColumn
rcPrFilterAceIpv6ShowAclId = _RcPrFilterAceIpv6ShowAclId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1, 1),
    _RcPrFilterAceIpv6ShowAclId_Type()
)
rcPrFilterAceIpv6ShowAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowAclId.setStatus("current")


class _RcPrFilterAceIpv6ShowAceId_Type(Integer32):
    """Custom type rcPrFilterAceIpv6ShowAceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RcPrFilterAceIpv6ShowAceId_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6ShowAceId_Object = MibTableColumn
rcPrFilterAceIpv6ShowAceId = _RcPrFilterAceIpv6ShowAceId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1, 2),
    _RcPrFilterAceIpv6ShowAceId_Type()
)
rcPrFilterAceIpv6ShowAceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowAceId.setStatus("current")


class _RcPrFilterAceIpv6ShowSrcAddrList_Type(OctetString):
    """Custom type rcPrFilterAceIpv6ShowSrcAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpv6ShowSrcAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceIpv6ShowSrcAddrList_Object = MibTableColumn
rcPrFilterAceIpv6ShowSrcAddrList = _RcPrFilterAceIpv6ShowSrcAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1, 3),
    _RcPrFilterAceIpv6ShowSrcAddrList_Type()
)
rcPrFilterAceIpv6ShowSrcAddrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowSrcAddrList.setStatus("current")


class _RcPrFilterAceIpv6ShowSrcAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpv6ShowSrcAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpv6ShowSrcAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6ShowSrcAddrOper_Object = MibTableColumn
rcPrFilterAceIpv6ShowSrcAddrOper = _RcPrFilterAceIpv6ShowSrcAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1, 4),
    _RcPrFilterAceIpv6ShowSrcAddrOper_Type()
)
rcPrFilterAceIpv6ShowSrcAddrOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowSrcAddrOper.setStatus("current")


class _RcPrFilterAceIpv6ShowDstAddrList_Type(OctetString):
    """Custom type rcPrFilterAceIpv6ShowDstAddrList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1500),
    )


_RcPrFilterAceIpv6ShowDstAddrList_Type.__name__ = "OctetString"
_RcPrFilterAceIpv6ShowDstAddrList_Object = MibTableColumn
rcPrFilterAceIpv6ShowDstAddrList = _RcPrFilterAceIpv6ShowDstAddrList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1, 5),
    _RcPrFilterAceIpv6ShowDstAddrList_Type()
)
rcPrFilterAceIpv6ShowDstAddrList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowDstAddrList.setStatus("current")


class _RcPrFilterAceIpv6ShowDstAddrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpv6ShowDstAddrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpv6ShowDstAddrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6ShowDstAddrOper_Object = MibTableColumn
rcPrFilterAceIpv6ShowDstAddrOper = _RcPrFilterAceIpv6ShowDstAddrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1, 6),
    _RcPrFilterAceIpv6ShowDstAddrOper_Type()
)
rcPrFilterAceIpv6ShowDstAddrOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowDstAddrOper.setStatus("current")
_RcPrFilterAceIpv6ShowNxtHdrNxtHdr_Type = Ipv6NextHdr
_RcPrFilterAceIpv6ShowNxtHdrNxtHdr_Object = MibTableColumn
rcPrFilterAceIpv6ShowNxtHdrNxtHdr = _RcPrFilterAceIpv6ShowNxtHdrNxtHdr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1, 7),
    _RcPrFilterAceIpv6ShowNxtHdrNxtHdr_Type()
)
rcPrFilterAceIpv6ShowNxtHdrNxtHdr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowNxtHdrNxtHdr.setStatus("current")


class _RcPrFilterAceIpv6ShowNxtHdrOper_Type(Integer32):
    """Custom type rcPrFilterAceIpv6ShowNxtHdrOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("any", 255),
          ("eq", 1),
          ("ne", 2))
    )


_RcPrFilterAceIpv6ShowNxtHdrOper_Type.__name__ = "Integer32"
_RcPrFilterAceIpv6ShowNxtHdrOper_Object = MibTableColumn
rcPrFilterAceIpv6ShowNxtHdrOper = _RcPrFilterAceIpv6ShowNxtHdrOper_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 202, 1, 1, 2, 4, 32, 1, 8),
    _RcPrFilterAceIpv6ShowNxtHdrOper_Type()
)
rcPrFilterAceIpv6ShowNxtHdrOper.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcPrFilterAceIpv6ShowNxtHdrOper.setStatus("current")
_RcVrf_ObjectIdentity = ObjectIdentity
rcVrf = _RcVrf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203)
)
_RcVrfMib_ObjectIdentity = ObjectIdentity
rcVrfMib = _RcVrfMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1)
)
_RcVrfNotifications_ObjectIdentity = ObjectIdentity
rcVrfNotifications = _RcVrfNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 0)
)
_RcVrfObjects_ObjectIdentity = ObjectIdentity
rcVrfObjects = _RcVrfObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1)
)
_RcVrfConfig_ObjectIdentity = ObjectIdentity
rcVrfConfig = _RcVrfConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1)
)
_RcVrfConfigScalars_ObjectIdentity = ObjectIdentity
rcVrfConfigScalars = _RcVrfConfigScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 1)
)
_RcVrfConfigNextAvailableVrfId_Type = VrfIdentifier
_RcVrfConfigNextAvailableVrfId_Object = MibScalar
rcVrfConfigNextAvailableVrfId = _RcVrfConfigNextAvailableVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 1, 1),
    _RcVrfConfigNextAvailableVrfId_Type()
)
rcVrfConfigNextAvailableVrfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfConfigNextAvailableVrfId.setStatus("current")
_RcVrfConfigTable_Object = MibTable
rcVrfConfigTable = _RcVrfConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2)
)
if mibBuilder.loadTexts:
    rcVrfConfigTable.setStatus("current")
_RcVrfConfigEntry_Object = MibTableRow
rcVrfConfigEntry = _RcVrfConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1)
)
rcVrfConfigEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVrfId"),
)
if mibBuilder.loadTexts:
    rcVrfConfigEntry.setStatus("current")
_RcVrfId_Type = VrfIdentifier
_RcVrfId_Object = MibTableColumn
rcVrfId = _RcVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 1),
    _RcVrfId_Type()
)
rcVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVrfId.setStatus("current")
_RcVrfRowStatus_Type = RowStatus
_RcVrfRowStatus_Object = MibTableColumn
rcVrfRowStatus = _RcVrfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 2),
    _RcVrfRowStatus_Type()
)
rcVrfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfRowStatus.setStatus("current")


class _RcVrfName_Type(DisplayString):
    """Custom type rcVrfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RcVrfName_Type.__name__ = "DisplayString"
_RcVrfName_Object = MibTableColumn
rcVrfName = _RcVrfName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 3),
    _RcVrfName_Type()
)
rcVrfName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrfName.setStatus("current")


class _RcVrfContextName_Type(SnmpAdminString):
    """Custom type rcVrfContextName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RcVrfContextName_Type.__name__ = "SnmpAdminString"
_RcVrfContextName_Object = MibTableColumn
rcVrfContextName = _RcVrfContextName_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 4),
    _RcVrfContextName_Type()
)
rcVrfContextName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfContextName.setStatus("current")


class _RcVrfTrapEnable_Type(TruthValue):
    """Custom type rcVrfTrapEnable based on TruthValue"""


_RcVrfTrapEnable_Object = MibTableColumn
rcVrfTrapEnable = _RcVrfTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 5),
    _RcVrfTrapEnable_Type()
)
rcVrfTrapEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfTrapEnable.setStatus("current")


class _RcVrfMaxRoutes_Type(Unsigned32):
    """Custom type rcVrfMaxRoutes based on Unsigned32"""
    defaultValue = 10000


_RcVrfMaxRoutes_Object = MibTableColumn
rcVrfMaxRoutes = _RcVrfMaxRoutes_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 6),
    _RcVrfMaxRoutes_Type()
)
rcVrfMaxRoutes.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfMaxRoutes.setStatus("current")


class _RcVrfAdminStatus_Type(Integer32):
    """Custom type rcVrfAdminStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("unknown", 4),
          ("up", 1))
    )


_RcVrfAdminStatus_Type.__name__ = "Integer32"
_RcVrfAdminStatus_Object = MibTableColumn
rcVrfAdminStatus = _RcVrfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 7),
    _RcVrfAdminStatus_Type()
)
rcVrfAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfAdminStatus.setStatus("current")
_RcVrfVpnId_Type = VPNId
_RcVrfVpnId_Object = MibTableColumn
rcVrfVpnId = _RcVrfVpnId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 8),
    _RcVrfVpnId_Type()
)
rcVrfVpnId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfVpnId.setStatus("current")


class _RcVrfRpTrigger_Type(VrfRpTriggerBitCode):
    """Custom type rcVrfRpTrigger based on VrfRpTriggerBitCode"""
    defaultBinValue = "11"


_RcVrfRpTrigger_Object = MibTableColumn
rcVrfRpTrigger = _RcVrfRpTrigger_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 9),
    _RcVrfRpTrigger_Type()
)
rcVrfRpTrigger.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfRpTrigger.setStatus("current")


class _RcVrfMaxRoutesTrapEnable_Type(TruthValue):
    """Custom type rcVrfMaxRoutesTrapEnable based on TruthValue"""


_RcVrfMaxRoutesTrapEnable_Object = MibTableColumn
rcVrfMaxRoutesTrapEnable = _RcVrfMaxRoutesTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 1, 2, 1, 10),
    _RcVrfMaxRoutesTrapEnable_Type()
)
rcVrfMaxRoutesTrapEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfMaxRoutesTrapEnable.setStatus("current")
_RcVrfStat_ObjectIdentity = ObjectIdentity
rcVrfStat = _RcVrfStat_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2)
)
_RcVrfStatScalars_ObjectIdentity = ObjectIdentity
rcVrfStatScalars = _RcVrfStatScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 1)
)
_RcVrfConfiguredVRFs_Type = Unsigned32
_RcVrfConfiguredVRFs_Object = MibScalar
rcVrfConfiguredVRFs = _RcVrfConfiguredVRFs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 1, 1),
    _RcVrfConfiguredVRFs_Type()
)
rcVrfConfiguredVRFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfConfiguredVRFs.setStatus("current")
_RcVrfActiveVRFs_Type = Unsigned32
_RcVrfActiveVRFs_Object = MibScalar
rcVrfActiveVRFs = _RcVrfActiveVRFs_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 1, 2),
    _RcVrfActiveVRFs_Type()
)
rcVrfActiveVRFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfActiveVRFs.setStatus("current")
_RcVrfStatTable_Object = MibTable
rcVrfStatTable = _RcVrfStatTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2)
)
if mibBuilder.loadTexts:
    rcVrfStatTable.setStatus("current")
_RcVrfStatEntry_Object = MibTableRow
rcVrfStatEntry = _RcVrfStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2, 1)
)
rcVrfStatEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVrfId"),
)
if mibBuilder.loadTexts:
    rcVrfStatEntry.setStatus("current")
_RcVrfStatRouteEntries_Type = Unsigned32
_RcVrfStatRouteEntries_Object = MibTableColumn
rcVrfStatRouteEntries = _RcVrfStatRouteEntries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2, 1, 1),
    _RcVrfStatRouteEntries_Type()
)
rcVrfStatRouteEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfStatRouteEntries.setStatus("current")
_RcVrfStatFIBEntries_Type = Unsigned32
_RcVrfStatFIBEntries_Object = MibTableColumn
rcVrfStatFIBEntries = _RcVrfStatFIBEntries_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2, 1, 2),
    _RcVrfStatFIBEntries_Type()
)
rcVrfStatFIBEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfStatFIBEntries.setStatus("current")
_RcVrfStatUpTime_Type = TimeTicks
_RcVrfStatUpTime_Object = MibTableColumn
rcVrfStatUpTime = _RcVrfStatUpTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2, 1, 3),
    _RcVrfStatUpTime_Type()
)
rcVrfStatUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfStatUpTime.setStatus("current")


class _RcVrfOperStatus_Type(Integer32):
    """Custom type rcVrfOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_RcVrfOperStatus_Type.__name__ = "Integer32"
_RcVrfOperStatus_Object = MibTableColumn
rcVrfOperStatus = _RcVrfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2, 1, 4),
    _RcVrfOperStatus_Type()
)
rcVrfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfOperStatus.setStatus("current")
_RcVrfRpStatus_Type = VrfRpTriggerBitCode
_RcVrfRpStatus_Object = MibTableColumn
rcVrfRpStatus = _RcVrfRpStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2, 1, 5),
    _RcVrfRpStatus_Type()
)
rcVrfRpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfRpStatus.setStatus("current")
_RcVrfRouterAddressType_Type = InetAddressType
_RcVrfRouterAddressType_Object = MibTableColumn
rcVrfRouterAddressType = _RcVrfRouterAddressType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2, 1, 6),
    _RcVrfRouterAddressType_Type()
)
rcVrfRouterAddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfRouterAddressType.setStatus("current")
_RcVrfRouterAddress_Type = InetAddress
_RcVrfRouterAddress_Object = MibTableColumn
rcVrfRouterAddress = _RcVrfRouterAddress_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 2, 2, 1, 7),
    _RcVrfRouterAddress_Type()
)
rcVrfRouterAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfRouterAddress.setStatus("current")
_RcVrfIpVpnTableSize_Type = Integer32
_RcVrfIpVpnTableSize_Object = MibScalar
rcVrfIpVpnTableSize = _RcVrfIpVpnTableSize_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 3),
    _RcVrfIpVpnTableSize_Type()
)
rcVrfIpVpnTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrfIpVpnTableSize.setStatus("current")
_RcVrfIpVpnTable_Object = MibTable
rcVrfIpVpnTable = _RcVrfIpVpnTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4)
)
if mibBuilder.loadTexts:
    rcVrfIpVpnTable.setStatus("current")
_RcVrfIpVpnTableEntry_Object = MibTableRow
rcVrfIpVpnTableEntry = _RcVrfIpVpnTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4, 1)
)
rcVrfIpVpnTableEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVrfIpVpnVrfId"),
)
if mibBuilder.loadTexts:
    rcVrfIpVpnTableEntry.setStatus("current")
_RcVrfIpVpnVrfId_Type = VrfIdentifier
_RcVrfIpVpnVrfId_Object = MibTableColumn
rcVrfIpVpnVrfId = _RcVrfIpVpnVrfId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4, 1, 1),
    _RcVrfIpVpnVrfId_Type()
)
rcVrfIpVpnVrfId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVrfIpVpnVrfId.setStatus("current")


class _RcVrfIpVpnStatus_Type(EnableValue):
    """Custom type rcVrfIpVpnStatus based on EnableValue"""


_RcVrfIpVpnStatus_Object = MibTableColumn
rcVrfIpVpnStatus = _RcVrfIpVpnStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4, 1, 2),
    _RcVrfIpVpnStatus_Type()
)
rcVrfIpVpnStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfIpVpnStatus.setStatus("current")
_RcVrfIpVpnImportRTList_Type = IdList
_RcVrfIpVpnImportRTList_Object = MibTableColumn
rcVrfIpVpnImportRTList = _RcVrfIpVpnImportRTList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4, 1, 3),
    _RcVrfIpVpnImportRTList_Type()
)
rcVrfIpVpnImportRTList.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfIpVpnImportRTList.setStatus("current")
_RcVrfIpVpnExportRTList_Type = IdList
_RcVrfIpVpnExportRTList_Object = MibTableColumn
rcVrfIpVpnExportRTList = _RcVrfIpVpnExportRTList_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4, 1, 4),
    _RcVrfIpVpnExportRTList_Type()
)
rcVrfIpVpnExportRTList.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfIpVpnExportRTList.setStatus("current")


class _RcVrfIpVpnSvcLblAllocOpt_Type(Integer32):
    """Custom type rcVrfIpVpnSvcLblAllocOpt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("perVrf", 2),
          ("perVrfperNexthop", 1))
    )


_RcVrfIpVpnSvcLblAllocOpt_Type.__name__ = "Integer32"
_RcVrfIpVpnSvcLblAllocOpt_Object = MibTableColumn
rcVrfIpVpnSvcLblAllocOpt = _RcVrfIpVpnSvcLblAllocOpt_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4, 1, 5),
    _RcVrfIpVpnSvcLblAllocOpt_Type()
)
rcVrfIpVpnSvcLblAllocOpt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfIpVpnSvcLblAllocOpt.setStatus("current")
_RcVrfIpVpnRowStatus_Type = RowStatus
_RcVrfIpVpnRowStatus_Object = MibTableColumn
rcVrfIpVpnRowStatus = _RcVrfIpVpnRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4, 1, 6),
    _RcVrfIpVpnRowStatus_Type()
)
rcVrfIpVpnRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfIpVpnRowStatus.setStatus("current")


class _RcVrfIpVpnIsidNumber_Type(Integer32):
    """Custom type rcVrfIpVpnIsidNumber based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_RcVrfIpVpnIsidNumber_Type.__name__ = "Integer32"
_RcVrfIpVpnIsidNumber_Object = MibTableColumn
rcVrfIpVpnIsidNumber = _RcVrfIpVpnIsidNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 1, 4, 1, 7),
    _RcVrfIpVpnIsidNumber_Type()
)
rcVrfIpVpnIsidNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrfIpVpnIsidNumber.setStatus("current")
_RcVrfNotificationObjects_ObjectIdentity = ObjectIdentity
rcVrfNotificationObjects = _RcVrfNotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 203, 1, 2)
)
_RcVrrpv3_ObjectIdentity = ObjectIdentity
rcVrrpv3 = _RcVrrpv3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206)
)
_RcVrrpTmpMib_ObjectIdentity = ObjectIdentity
rcVrrpTmpMib = _RcVrrpTmpMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1)
)
_RcVrrpTmpNotifications_ObjectIdentity = ObjectIdentity
rcVrrpTmpNotifications = _RcVrrpTmpNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 0)
)
_RcVrrpTmpOperations_ObjectIdentity = ObjectIdentity
rcVrrpTmpOperations = _RcVrrpTmpOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1)
)


class _RcVrrpTmpNotificationCntl_Type(Integer32):
    """Custom type rcVrrpTmpNotificationCntl based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcVrrpTmpNotificationCntl_Type.__name__ = "Integer32"
_RcVrrpTmpNotificationCntl_Object = MibScalar
rcVrrpTmpNotificationCntl = _RcVrrpTmpNotificationCntl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 2),
    _RcVrrpTmpNotificationCntl_Type()
)
rcVrrpTmpNotificationCntl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpTmpNotificationCntl.setStatus("current")
_RcVrrpTmpOperationsTable_Object = MibTable
rcVrrpTmpOperationsTable = _RcVrrpTmpOperationsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7)
)
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsTable.setStatus("current")
_RcVrrpTmpOperationsEntry_Object = MibTableRow
rcVrrpTmpOperationsEntry = _RcVrrpTmpOperationsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1)
)
rcVrrpTmpOperationsEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVrrpTmpOperationsIfIndex"),
    (0, "RAPID-CITY", "rcVrrpTmpOperationsInetAddrType"),
    (0, "RAPID-CITY", "rcVrrpTmpOperationsVrId"),
)
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsEntry.setStatus("current")
_RcVrrpTmpOperationsIfIndex_Type = InterfaceIndex
_RcVrrpTmpOperationsIfIndex_Object = MibTableColumn
rcVrrpTmpOperationsIfIndex = _RcVrrpTmpOperationsIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 1),
    _RcVrrpTmpOperationsIfIndex_Type()
)
rcVrrpTmpOperationsIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsIfIndex.setStatus("current")
_RcVrrpTmpOperationsInetAddrType_Type = InetAddressType
_RcVrrpTmpOperationsInetAddrType_Object = MibTableColumn
rcVrrpTmpOperationsInetAddrType = _RcVrrpTmpOperationsInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 2),
    _RcVrrpTmpOperationsInetAddrType_Type()
)
rcVrrpTmpOperationsInetAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsInetAddrType.setStatus("current")
_RcVrrpTmpOperationsVrId_Type = VrId
_RcVrrpTmpOperationsVrId_Object = MibTableColumn
rcVrrpTmpOperationsVrId = _RcVrrpTmpOperationsVrId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 3),
    _RcVrrpTmpOperationsVrId_Type()
)
rcVrrpTmpOperationsVrId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsVrId.setStatus("current")
_RcVrrpTmpOperationsVirtualMacAddr_Type = MacAddress
_RcVrrpTmpOperationsVirtualMacAddr_Object = MibTableColumn
rcVrrpTmpOperationsVirtualMacAddr = _RcVrrpTmpOperationsVirtualMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 4),
    _RcVrrpTmpOperationsVirtualMacAddr_Type()
)
rcVrrpTmpOperationsVirtualMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsVirtualMacAddr.setStatus("current")


class _RcVrrpTmpOperationsState_Type(Integer32):
    """Custom type rcVrrpTmpOperationsState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("initialize", 1),
          ("master", 3))
    )


_RcVrrpTmpOperationsState_Type.__name__ = "Integer32"
_RcVrrpTmpOperationsState_Object = MibTableColumn
rcVrrpTmpOperationsState = _RcVrrpTmpOperationsState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 5),
    _RcVrrpTmpOperationsState_Type()
)
rcVrrpTmpOperationsState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsState.setStatus("current")


class _RcVrrpTmpOperationsPriority_Type(Integer32):
    """Custom type rcVrrpTmpOperationsPriority based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcVrrpTmpOperationsPriority_Type.__name__ = "Integer32"
_RcVrrpTmpOperationsPriority_Object = MibTableColumn
rcVrrpTmpOperationsPriority = _RcVrrpTmpOperationsPriority_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 6),
    _RcVrrpTmpOperationsPriority_Type()
)
rcVrrpTmpOperationsPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsPriority.setStatus("current")


class _RcVrrpTmpOperationsAddrCount_Type(Integer32):
    """Custom type rcVrrpTmpOperationsAddrCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RcVrrpTmpOperationsAddrCount_Type.__name__ = "Integer32"
_RcVrrpTmpOperationsAddrCount_Object = MibTableColumn
rcVrrpTmpOperationsAddrCount = _RcVrrpTmpOperationsAddrCount_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 7),
    _RcVrrpTmpOperationsAddrCount_Type()
)
rcVrrpTmpOperationsAddrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsAddrCount.setStatus("current")
_RcVrrpTmpOperationsMasterIpAddr_Type = InetAddress
_RcVrrpTmpOperationsMasterIpAddr_Object = MibTableColumn
rcVrrpTmpOperationsMasterIpAddr = _RcVrrpTmpOperationsMasterIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 8),
    _RcVrrpTmpOperationsMasterIpAddr_Type()
)
rcVrrpTmpOperationsMasterIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsMasterIpAddr.setStatus("current")
_RcVrrpTmpOperationsPrimaryIpAddr_Type = InetAddress
_RcVrrpTmpOperationsPrimaryIpAddr_Object = MibTableColumn
rcVrrpTmpOperationsPrimaryIpAddr = _RcVrrpTmpOperationsPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 9),
    _RcVrrpTmpOperationsPrimaryIpAddr_Type()
)
rcVrrpTmpOperationsPrimaryIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsPrimaryIpAddr.setStatus("current")


class _RcVrrpTmpOperationsAdvInterval_Type(TimeInterval):
    """Custom type rcVrrpTmpOperationsAdvInterval based on TimeInterval"""
    defaultValue = 100

    subtypeSpec = TimeInterval.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_RcVrrpTmpOperationsAdvInterval_Type.__name__ = "TimeInterval"
_RcVrrpTmpOperationsAdvInterval_Object = MibTableColumn
rcVrrpTmpOperationsAdvInterval = _RcVrrpTmpOperationsAdvInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 10),
    _RcVrrpTmpOperationsAdvInterval_Type()
)
rcVrrpTmpOperationsAdvInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsAdvInterval.setStatus("current")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsAdvInterval.setUnits("centiseconds")


class _RcVrrpTmpOperationsPreemptMode_Type(TruthValue):
    """Custom type rcVrrpTmpOperationsPreemptMode based on TruthValue"""


_RcVrrpTmpOperationsPreemptMode_Object = MibTableColumn
rcVrrpTmpOperationsPreemptMode = _RcVrrpTmpOperationsPreemptMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 11),
    _RcVrrpTmpOperationsPreemptMode_Type()
)
rcVrrpTmpOperationsPreemptMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsPreemptMode.setStatus("current")


class _RcVrrpTmpOperationsAcceptMode_Type(TruthValue):
    """Custom type rcVrrpTmpOperationsAcceptMode based on TruthValue"""


_RcVrrpTmpOperationsAcceptMode_Object = MibTableColumn
rcVrrpTmpOperationsAcceptMode = _RcVrrpTmpOperationsAcceptMode_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 12),
    _RcVrrpTmpOperationsAcceptMode_Type()
)
rcVrrpTmpOperationsAcceptMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsAcceptMode.setStatus("current")
_RcVrrpTmpOperationsUpTime_Type = TimeStamp
_RcVrrpTmpOperationsUpTime_Object = MibTableColumn
rcVrrpTmpOperationsUpTime = _RcVrrpTmpOperationsUpTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 13),
    _RcVrrpTmpOperationsUpTime_Type()
)
rcVrrpTmpOperationsUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsUpTime.setStatus("current")


class _RcVrrpTmpOperationsStorageType_Type(StorageType):
    """Custom type rcVrrpTmpOperationsStorageType based on StorageType"""


_RcVrrpTmpOperationsStorageType_Object = MibTableColumn
rcVrrpTmpOperationsStorageType = _RcVrrpTmpOperationsStorageType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 14),
    _RcVrrpTmpOperationsStorageType_Type()
)
rcVrrpTmpOperationsStorageType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsStorageType.setStatus("current")
_RcVrrpTmpOperationsRowStatus_Type = RowStatus
_RcVrrpTmpOperationsRowStatus_Object = MibTableColumn
rcVrrpTmpOperationsRowStatus = _RcVrrpTmpOperationsRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 7, 1, 15),
    _RcVrrpTmpOperationsRowStatus_Type()
)
rcVrrpTmpOperationsRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpOperationsRowStatus.setStatus("current")
_RcVrrpTmpAssociatedIpAddrTable_Object = MibTable
rcVrrpTmpAssociatedIpAddrTable = _RcVrrpTmpAssociatedIpAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 8)
)
if mibBuilder.loadTexts:
    rcVrrpTmpAssociatedIpAddrTable.setStatus("current")
_RcVrrpTmpAssociatedIpAddrEntry_Object = MibTableRow
rcVrrpTmpAssociatedIpAddrEntry = _RcVrrpTmpAssociatedIpAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 8, 1)
)
rcVrrpTmpAssociatedIpAddrEntry.setIndexNames(
    (0, "RAPID-CITY", "rcVrrpTmpOperationsIfIndex"),
    (0, "RAPID-CITY", "rcVrrpTmpOperationsInetAddrType"),
    (0, "RAPID-CITY", "rcVrrpTmpOperationsVrId"),
    (0, "RAPID-CITY", "rcVrrpTmpAssociatedIpAddr"),
    (0, "RAPID-CITY", "rcVrrpTmpAssociatedIpAddrPrefixLength"),
)
if mibBuilder.loadTexts:
    rcVrrpTmpAssociatedIpAddrEntry.setStatus("current")


class _RcVrrpTmpAssociatedIpAddr_Type(InetAddress):
    """Custom type rcVrrpTmpAssociatedIpAddr based on InetAddress"""
    subtypeSpec = InetAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 0),
        ValueSizeConstraint(4, 4),
        ValueSizeConstraint(16, 16),
    )


_RcVrrpTmpAssociatedIpAddr_Type.__name__ = "InetAddress"
_RcVrrpTmpAssociatedIpAddr_Object = MibTableColumn
rcVrrpTmpAssociatedIpAddr = _RcVrrpTmpAssociatedIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 8, 1, 1),
    _RcVrrpTmpAssociatedIpAddr_Type()
)
rcVrrpTmpAssociatedIpAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVrrpTmpAssociatedIpAddr.setStatus("current")
_RcVrrpTmpAssociatedIpAddrPrefixLength_Type = InetAddressPrefixLength
_RcVrrpTmpAssociatedIpAddrPrefixLength_Object = MibTableColumn
rcVrrpTmpAssociatedIpAddrPrefixLength = _RcVrrpTmpAssociatedIpAddrPrefixLength_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 8, 1, 2),
    _RcVrrpTmpAssociatedIpAddrPrefixLength_Type()
)
rcVrrpTmpAssociatedIpAddrPrefixLength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcVrrpTmpAssociatedIpAddrPrefixLength.setStatus("current")


class _RcVrrpTmpAssociatedStorageType_Type(StorageType):
    """Custom type rcVrrpTmpAssociatedStorageType based on StorageType"""


_RcVrrpTmpAssociatedStorageType_Object = MibTableColumn
rcVrrpTmpAssociatedStorageType = _RcVrrpTmpAssociatedStorageType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 8, 1, 3),
    _RcVrrpTmpAssociatedStorageType_Type()
)
rcVrrpTmpAssociatedStorageType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpAssociatedStorageType.setStatus("current")
_RcVrrpTmpAssociatedIpAddrRowStatus_Type = RowStatus
_RcVrrpTmpAssociatedIpAddrRowStatus_Object = MibTableColumn
rcVrrpTmpAssociatedIpAddrRowStatus = _RcVrrpTmpAssociatedIpAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 8, 1, 4),
    _RcVrrpTmpAssociatedIpAddrRowStatus_Type()
)
rcVrrpTmpAssociatedIpAddrRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpTmpAssociatedIpAddrRowStatus.setStatus("current")


class _RcVrrpTmpNewMasterReason_Type(Integer32):
    """Custom type rcVrrpTmpNewMasterReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("masterNoResponse", 3),
          ("notmaster", 0),
          ("preempted", 2),
          ("priority", 1))
    )


_RcVrrpTmpNewMasterReason_Type.__name__ = "Integer32"
_RcVrrpTmpNewMasterReason_Object = MibScalar
rcVrrpTmpNewMasterReason = _RcVrrpTmpNewMasterReason_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 9),
    _RcVrrpTmpNewMasterReason_Type()
)
rcVrrpTmpNewMasterReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpNewMasterReason.setStatus("current")


class _RcVrrpTmpTrapProtoErrReason_Type(Integer32):
    """Custom type rcVrrpTmpTrapProtoErrReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("checksumError", 2),
          ("hopLimitError", 0),
          ("versionError", 1),
          ("vridError", 3))
    )


_RcVrrpTmpTrapProtoErrReason_Type.__name__ = "Integer32"
_RcVrrpTmpTrapProtoErrReason_Object = MibScalar
rcVrrpTmpTrapProtoErrReason = _RcVrrpTmpTrapProtoErrReason_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 1, 10),
    _RcVrrpTmpTrapProtoErrReason_Type()
)
rcVrrpTmpTrapProtoErrReason.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    rcVrrpTmpTrapProtoErrReason.setStatus("current")
_RcVrrpTmpStatistics_ObjectIdentity = ObjectIdentity
rcVrrpTmpStatistics = _RcVrrpTmpStatistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2)
)
_RcVrrpTmpRouterChecksumErrors_Type = Counter32
_RcVrrpTmpRouterChecksumErrors_Object = MibScalar
rcVrrpTmpRouterChecksumErrors = _RcVrrpTmpRouterChecksumErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 1),
    _RcVrrpTmpRouterChecksumErrors_Type()
)
rcVrrpTmpRouterChecksumErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpRouterChecksumErrors.setStatus("current")
_RcVrrpTmpRouterVersionErrors_Type = Counter32
_RcVrrpTmpRouterVersionErrors_Object = MibScalar
rcVrrpTmpRouterVersionErrors = _RcVrrpTmpRouterVersionErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 2),
    _RcVrrpTmpRouterVersionErrors_Type()
)
rcVrrpTmpRouterVersionErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpRouterVersionErrors.setStatus("current")
_RcVrrpTmpRouterVrIdErrors_Type = Counter32
_RcVrrpTmpRouterVrIdErrors_Object = MibScalar
rcVrrpTmpRouterVrIdErrors = _RcVrrpTmpRouterVrIdErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 3),
    _RcVrrpTmpRouterVrIdErrors_Type()
)
rcVrrpTmpRouterVrIdErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpRouterVrIdErrors.setStatus("current")
_RcVrrpTmpRouterStatisticsTable_Object = MibTable
rcVrrpTmpRouterStatisticsTable = _RcVrrpTmpRouterStatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5)
)
if mibBuilder.loadTexts:
    rcVrrpTmpRouterStatisticsTable.setStatus("current")
_RcVrrpTmpRouterStatisticsEntry_Object = MibTableRow
rcVrrpTmpRouterStatisticsEntry = _RcVrrpTmpRouterStatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1)
)
if mibBuilder.loadTexts:
    rcVrrpTmpRouterStatisticsEntry.setStatus("current")
_RcVrrpTmpStatisticsMasterTransitions_Type = Counter32
_RcVrrpTmpStatisticsMasterTransitions_Object = MibTableColumn
rcVrrpTmpStatisticsMasterTransitions = _RcVrrpTmpStatisticsMasterTransitions_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 1),
    _RcVrrpTmpStatisticsMasterTransitions_Type()
)
rcVrrpTmpStatisticsMasterTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsMasterTransitions.setStatus("current")
_RcVrrpTmpStatisticsRcvdAdvertisements_Type = Counter32
_RcVrrpTmpStatisticsRcvdAdvertisements_Object = MibTableColumn
rcVrrpTmpStatisticsRcvdAdvertisements = _RcVrrpTmpStatisticsRcvdAdvertisements_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 2),
    _RcVrrpTmpStatisticsRcvdAdvertisements_Type()
)
rcVrrpTmpStatisticsRcvdAdvertisements.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsRcvdAdvertisements.setStatus("current")
_RcVrrpTmpStatisticsAdvIntervalErrors_Type = Counter32
_RcVrrpTmpStatisticsAdvIntervalErrors_Object = MibTableColumn
rcVrrpTmpStatisticsAdvIntervalErrors = _RcVrrpTmpStatisticsAdvIntervalErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 3),
    _RcVrrpTmpStatisticsAdvIntervalErrors_Type()
)
rcVrrpTmpStatisticsAdvIntervalErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsAdvIntervalErrors.setStatus("current")
_RcVrrpTmpStatisticsIpTtlErrors_Type = Counter32
_RcVrrpTmpStatisticsIpTtlErrors_Object = MibTableColumn
rcVrrpTmpStatisticsIpTtlErrors = _RcVrrpTmpStatisticsIpTtlErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 4),
    _RcVrrpTmpStatisticsIpTtlErrors_Type()
)
rcVrrpTmpStatisticsIpTtlErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsIpTtlErrors.setStatus("current")
_RcVrrpTmpStatisticsRcvdPriZeroPackets_Type = Counter32
_RcVrrpTmpStatisticsRcvdPriZeroPackets_Object = MibTableColumn
rcVrrpTmpStatisticsRcvdPriZeroPackets = _RcVrrpTmpStatisticsRcvdPriZeroPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 5),
    _RcVrrpTmpStatisticsRcvdPriZeroPackets_Type()
)
rcVrrpTmpStatisticsRcvdPriZeroPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsRcvdPriZeroPackets.setStatus("current")
_RcVrrpTmpStatisticsSentPriZeroPackets_Type = Counter32
_RcVrrpTmpStatisticsSentPriZeroPackets_Object = MibTableColumn
rcVrrpTmpStatisticsSentPriZeroPackets = _RcVrrpTmpStatisticsSentPriZeroPackets_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 6),
    _RcVrrpTmpStatisticsSentPriZeroPackets_Type()
)
rcVrrpTmpStatisticsSentPriZeroPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsSentPriZeroPackets.setStatus("current")
_RcVrrpTmpStatisticsRcvdInvalidTypePkts_Type = Counter32
_RcVrrpTmpStatisticsRcvdInvalidTypePkts_Object = MibTableColumn
rcVrrpTmpStatisticsRcvdInvalidTypePkts = _RcVrrpTmpStatisticsRcvdInvalidTypePkts_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 7),
    _RcVrrpTmpStatisticsRcvdInvalidTypePkts_Type()
)
rcVrrpTmpStatisticsRcvdInvalidTypePkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsRcvdInvalidTypePkts.setStatus("current")
_RcVrrpTmpStatisticsAddressListErrors_Type = Counter32
_RcVrrpTmpStatisticsAddressListErrors_Object = MibTableColumn
rcVrrpTmpStatisticsAddressListErrors = _RcVrrpTmpStatisticsAddressListErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 8),
    _RcVrrpTmpStatisticsAddressListErrors_Type()
)
rcVrrpTmpStatisticsAddressListErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsAddressListErrors.setStatus("current")
_RcVrrpTmpStatisticsPacketLengthErrors_Type = Counter32
_RcVrrpTmpStatisticsPacketLengthErrors_Object = MibTableColumn
rcVrrpTmpStatisticsPacketLengthErrors = _RcVrrpTmpStatisticsPacketLengthErrors_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 9),
    _RcVrrpTmpStatisticsPacketLengthErrors_Type()
)
rcVrrpTmpStatisticsPacketLengthErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsPacketLengthErrors.setStatus("current")
_RcVrrpTmpStatisticsRcvdInvalidAuthentications_Type = Counter32
_RcVrrpTmpStatisticsRcvdInvalidAuthentications_Object = MibTableColumn
rcVrrpTmpStatisticsRcvdInvalidAuthentications = _RcVrrpTmpStatisticsRcvdInvalidAuthentications_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 10),
    _RcVrrpTmpStatisticsRcvdInvalidAuthentications_Type()
)
rcVrrpTmpStatisticsRcvdInvalidAuthentications.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsRcvdInvalidAuthentications.setStatus("current")
_RcVrrpTmpStatisticsDiscontinuityTime_Type = TimeStamp
_RcVrrpTmpStatisticsDiscontinuityTime_Object = MibTableColumn
rcVrrpTmpStatisticsDiscontinuityTime = _RcVrrpTmpStatisticsDiscontinuityTime_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 11),
    _RcVrrpTmpStatisticsDiscontinuityTime_Type()
)
rcVrrpTmpStatisticsDiscontinuityTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsDiscontinuityTime.setStatus("current")
_RcVrrpTmpStatisticsRefreshRate_Type = Integer32
_RcVrrpTmpStatisticsRefreshRate_Object = MibTableColumn
rcVrrpTmpStatisticsRefreshRate = _RcVrrpTmpStatisticsRefreshRate_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 2, 5, 1, 12),
    _RcVrrpTmpStatisticsRefreshRate_Type()
)
rcVrrpTmpStatisticsRefreshRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsRefreshRate.setStatus("current")
if mibBuilder.loadTexts:
    rcVrrpTmpStatisticsRefreshRate.setUnits("milli-seconds")
_RcVrrpExtMib_ObjectIdentity = ObjectIdentity
rcVrrpExtMib = _RcVrrpExtMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2)
)
_RcVrrpExtObjects_ObjectIdentity = ObjectIdentity
rcVrrpExtObjects = _RcVrrpExtObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 1)
)
_RcVrrpExtScalars_ObjectIdentity = ObjectIdentity
rcVrrpExtScalars = _RcVrrpExtScalars_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 1, 1)
)


class _RcVrrpExtPingVirtualAddrEnable_Type(TruthValue):
    """Custom type rcVrrpExtPingVirtualAddrEnable based on TruthValue"""


_RcVrrpExtPingVirtualAddrEnable_Object = MibScalar
rcVrrpExtPingVirtualAddrEnable = _RcVrrpExtPingVirtualAddrEnable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 1, 1, 1),
    _RcVrrpExtPingVirtualAddrEnable_Type()
)
rcVrrpExtPingVirtualAddrEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcVrrpExtPingVirtualAddrEnable.setStatus("current")


class _RcVrrpExtVersionNumber_Type(Integer32):
    """Custom type rcVrrpExtVersionNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("version3", 3)
    )


_RcVrrpExtVersionNumber_Type.__name__ = "Integer32"
_RcVrrpExtVersionNumber_Object = MibScalar
rcVrrpExtVersionNumber = _RcVrrpExtVersionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 1, 1, 2),
    _RcVrrpExtVersionNumber_Type()
)
rcVrrpExtVersionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpExtVersionNumber.setStatus("current")


class _RcVrrpExtTrapStateTransitionType_Type(Integer32):
    """Custom type rcVrrpExtTrapStateTransitionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("backupToInitialize", 7),
          ("backupToMaster", 3),
          ("initializeToBackup", 6),
          ("initializeToMaster", 4),
          ("masterToBackup", 2),
          ("masterToInitialize", 5),
          ("none", 1))
    )


_RcVrrpExtTrapStateTransitionType_Type.__name__ = "Integer32"
_RcVrrpExtTrapStateTransitionType_Object = MibScalar
rcVrrpExtTrapStateTransitionType = _RcVrrpExtTrapStateTransitionType_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 1, 1, 3),
    _RcVrrpExtTrapStateTransitionType_Type()
)
rcVrrpExtTrapStateTransitionType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpExtTrapStateTransitionType.setStatus("current")


class _RcVrrpExtTrapStateTransitionCause_Type(Integer32):
    """Custom type rcVrrpExtTrapStateTransitionCause based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("higherPriorityAdvertizeReceived", 2),
          ("masterDownInterval", 5),
          ("none", 1),
          ("preempted", 6),
          ("rcVrrpAddrAndPhysicalAddrMatch", 4),
          ("shutdownReceived", 3))
    )


_RcVrrpExtTrapStateTransitionCause_Type.__name__ = "Integer32"
_RcVrrpExtTrapStateTransitionCause_Object = MibScalar
rcVrrpExtTrapStateTransitionCause = _RcVrrpExtTrapStateTransitionCause_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 1, 1, 4),
    _RcVrrpExtTrapStateTransitionCause_Type()
)
rcVrrpExtTrapStateTransitionCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpExtTrapStateTransitionCause.setStatus("current")
_RcVrrpExtOperationsVrId_Type = VrId
_RcVrrpExtOperationsVrId_Object = MibScalar
rcVrrpExtOperationsVrId = _RcVrrpExtOperationsVrId_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 1, 1, 5),
    _RcVrrpExtOperationsVrId_Type()
)
rcVrrpExtOperationsVrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsVrId.setStatus("current")
_RcVrrpExtNotifications_ObjectIdentity = ObjectIdentity
rcVrrpExtNotifications = _RcVrrpExtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 2)
)
_RcVrrpExtOperations_ObjectIdentity = ObjectIdentity
rcVrrpExtOperations = _RcVrrpExtOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3)
)
_RcVrrpExtOperationsTable_Object = MibTable
rcVrrpExtOperationsTable = _RcVrrpExtOperationsTable_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11)
)
if mibBuilder.loadTexts:
    rcVrrpExtOperationsTable.setStatus("current")
_RcVrrpExtOperationsEntry_Object = MibTableRow
rcVrrpExtOperationsEntry = _RcVrrpExtOperationsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1)
)
if mibBuilder.loadTexts:
    rcVrrpExtOperationsEntry.setStatus("current")


class _RcVrrpExtOperationsAction_Type(Integer32):
    """Custom type rcVrrpExtOperationsAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("preemptHoldDownTimer", 2))
    )


_RcVrrpExtOperationsAction_Type.__name__ = "Integer32"
_RcVrrpExtOperationsAction_Object = MibTableColumn
rcVrrpExtOperationsAction = _RcVrrpExtOperationsAction_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 1),
    _RcVrrpExtOperationsAction_Type()
)
rcVrrpExtOperationsAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsAction.setStatus("current")


class _RcVrrpExtOperationsBackUpMaster_Type(Integer32):
    """Custom type rcVrrpExtOperationsBackUpMaster based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcVrrpExtOperationsBackUpMaster_Type.__name__ = "Integer32"
_RcVrrpExtOperationsBackUpMaster_Object = MibTableColumn
rcVrrpExtOperationsBackUpMaster = _RcVrrpExtOperationsBackUpMaster_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 2),
    _RcVrrpExtOperationsBackUpMaster_Type()
)
rcVrrpExtOperationsBackUpMaster.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsBackUpMaster.setStatus("current")


class _RcVrrpExtOperationsBackUpMasterState_Type(Integer32):
    """Custom type rcVrrpExtOperationsBackUpMasterState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_RcVrrpExtOperationsBackUpMasterState_Type.__name__ = "Integer32"
_RcVrrpExtOperationsBackUpMasterState_Object = MibTableColumn
rcVrrpExtOperationsBackUpMasterState = _RcVrrpExtOperationsBackUpMasterState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 3),
    _RcVrrpExtOperationsBackUpMasterState_Type()
)
rcVrrpExtOperationsBackUpMasterState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsBackUpMasterState.setStatus("current")
_RcVrrpExtOperationsCriticalIpAddr_Type = InetAddress
_RcVrrpExtOperationsCriticalIpAddr_Object = MibTableColumn
rcVrrpExtOperationsCriticalIpAddr = _RcVrrpExtOperationsCriticalIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 4),
    _RcVrrpExtOperationsCriticalIpAddr_Type()
)
rcVrrpExtOperationsCriticalIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsCriticalIpAddr.setStatus("current")


class _RcVrrpExtOperationsCriticalIpAddrEnabled_Type(TruthValue):
    """Custom type rcVrrpExtOperationsCriticalIpAddrEnabled based on TruthValue"""


_RcVrrpExtOperationsCriticalIpAddrEnabled_Object = MibTableColumn
rcVrrpExtOperationsCriticalIpAddrEnabled = _RcVrrpExtOperationsCriticalIpAddrEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 5),
    _RcVrrpExtOperationsCriticalIpAddrEnabled_Type()
)
rcVrrpExtOperationsCriticalIpAddrEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsCriticalIpAddrEnabled.setStatus("current")


class _RcVrrpExtOperationsControl_Type(Integer32):
    """Custom type rcVrrpExtOperationsControl based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RcVrrpExtOperationsControl_Type.__name__ = "Integer32"
_RcVrrpExtOperationsControl_Object = MibTableColumn
rcVrrpExtOperationsControl = _RcVrrpExtOperationsControl_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 6),
    _RcVrrpExtOperationsControl_Type()
)
rcVrrpExtOperationsControl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsControl.setStatus("current")


class _RcVrrpExtOperationsHoldDownTimer_Type(Integer32):
    """Custom type rcVrrpExtOperationsHoldDownTimer based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21600),
    )


_RcVrrpExtOperationsHoldDownTimer_Type.__name__ = "Integer32"
_RcVrrpExtOperationsHoldDownTimer_Object = MibTableColumn
rcVrrpExtOperationsHoldDownTimer = _RcVrrpExtOperationsHoldDownTimer_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 7),
    _RcVrrpExtOperationsHoldDownTimer_Type()
)
rcVrrpExtOperationsHoldDownTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsHoldDownTimer.setStatus("current")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsHoldDownTimer.setUnits("seconds")


class _RcVrrpExtOperationsHoldDownState_Type(Integer32):
    """Custom type rcVrrpExtOperationsHoldDownState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("dormant", 1))
    )


_RcVrrpExtOperationsHoldDownState_Type.__name__ = "Integer32"
_RcVrrpExtOperationsHoldDownState_Object = MibTableColumn
rcVrrpExtOperationsHoldDownState = _RcVrrpExtOperationsHoldDownState_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 8),
    _RcVrrpExtOperationsHoldDownState_Type()
)
rcVrrpExtOperationsHoldDownState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsHoldDownState.setStatus("current")


class _RcVrrpExtOperationsHoldDownTimeRemaining_Type(Integer32):
    """Custom type rcVrrpExtOperationsHoldDownTimeRemaining based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21600),
    )


_RcVrrpExtOperationsHoldDownTimeRemaining_Type.__name__ = "Integer32"
_RcVrrpExtOperationsHoldDownTimeRemaining_Object = MibTableColumn
rcVrrpExtOperationsHoldDownTimeRemaining = _RcVrrpExtOperationsHoldDownTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 9),
    _RcVrrpExtOperationsHoldDownTimeRemaining_Type()
)
rcVrrpExtOperationsHoldDownTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsHoldDownTimeRemaining.setStatus("current")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsHoldDownTimeRemaining.setUnits("seconds")


class _RcVrrpExtOperationsFasterAdvInterval_Type(Integer32):
    """Custom type rcVrrpExtOperationsFasterAdvInterval based on Integer32"""
    defaultValue = 200

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 1000),
    )


_RcVrrpExtOperationsFasterAdvInterval_Type.__name__ = "Integer32"
_RcVrrpExtOperationsFasterAdvInterval_Object = MibTableColumn
rcVrrpExtOperationsFasterAdvInterval = _RcVrrpExtOperationsFasterAdvInterval_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 10),
    _RcVrrpExtOperationsFasterAdvInterval_Type()
)
rcVrrpExtOperationsFasterAdvInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsFasterAdvInterval.setStatus("current")


class _RcVrrpExtOperationsFasterAdvIntervalEnabled_Type(TruthValue):
    """Custom type rcVrrpExtOperationsFasterAdvIntervalEnabled based on TruthValue"""


_RcVrrpExtOperationsFasterAdvIntervalEnabled_Object = MibTableColumn
rcVrrpExtOperationsFasterAdvIntervalEnabled = _RcVrrpExtOperationsFasterAdvIntervalEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 11),
    _RcVrrpExtOperationsFasterAdvIntervalEnabled_Type()
)
rcVrrpExtOperationsFasterAdvIntervalEnabled.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsFasterAdvIntervalEnabled.setStatus("current")
_RcVrrpExtOperationsLinkLocalAddr_Type = InetAddress
_RcVrrpExtOperationsLinkLocalAddr_Object = MibTableColumn
rcVrrpExtOperationsLinkLocalAddr = _RcVrrpExtOperationsLinkLocalAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 12),
    _RcVrrpExtOperationsLinkLocalAddr_Type()
)
rcVrrpExtOperationsLinkLocalAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsLinkLocalAddr.setStatus("current")
_RcVrrpExtOperationsGlobalIpAddr_Type = InetAddress
_RcVrrpExtOperationsGlobalIpAddr_Object = MibTableColumn
rcVrrpExtOperationsGlobalIpAddr = _RcVrrpExtOperationsGlobalIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 3, 11, 1, 13),
    _RcVrrpExtOperationsGlobalIpAddr_Type()
)
rcVrrpExtOperationsGlobalIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rcVrrpExtOperationsGlobalIpAddr.setStatus("current")
_RcA1100_ObjectIdentity = ObjectIdentity
rcA1100 = _RcA1100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 2)
)
_RcA1250_ObjectIdentity = ObjectIdentity
rcA1250 = _RcA1250_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 6)
)
_RcA1150_ObjectIdentity = ObjectIdentity
rcA1150 = _RcA1150_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 7)
)
_RcA1200_ObjectIdentity = ObjectIdentity
rcA1200 = _RcA1200_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 8)
)
_RcA1050_ObjectIdentity = ObjectIdentity
rcA1050 = _RcA1050_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 9)
)
_RcA740_ObjectIdentity = ObjectIdentity
rcA740 = _RcA740_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 20)
)
_RcA750_ObjectIdentity = ObjectIdentity
rcA750 = _RcA750_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 21)
)
_RcA790_ObjectIdentity = ObjectIdentity
rcA790 = _RcA790_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 22)
)
_RcA750S_ObjectIdentity = ObjectIdentity
rcA750S = _RcA750S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 23)
)
_RcA8610_ObjectIdentity = ObjectIdentity
rcA8610 = _RcA8610_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 30)
)
_RcA8606_ObjectIdentity = ObjectIdentity
rcA8606 = _RcA8606_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 31)
)
_RcA8110_ObjectIdentity = ObjectIdentity
rcA8110 = _RcA8110_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 32)
)
_RcA8106_ObjectIdentity = ObjectIdentity
rcA8106 = _RcA8106_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 33)
)
_RcA8603_ObjectIdentity = ObjectIdentity
rcA8603 = _RcA8603_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 34)
)
_RcA8103_ObjectIdentity = ObjectIdentity
rcA8103 = _RcA8103_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 35)
)
_RcA8110co_ObjectIdentity = ObjectIdentity
rcA8110co = _RcA8110co_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 36)
)
_RcA8610co_ObjectIdentity = ObjectIdentity
rcA8610co = _RcA8610co_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 37)
)
_RcBayStack_ObjectIdentity = ObjectIdentity
rcBayStack = _RcBayStack_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 40)
)
_RcA1424_ObjectIdentity = ObjectIdentity
rcA1424 = _RcA1424_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 42)
)
_RcA1648_ObjectIdentity = ObjectIdentity
rcA1648 = _RcA1648_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 43)
)
_RcA1612_ObjectIdentity = ObjectIdentity
rcA1612 = _RcA1612_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 44)
)
_RcA1624_ObjectIdentity = ObjectIdentity
rcA1624 = _RcA1624_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 45)
)
_RcRBS2402_ObjectIdentity = ObjectIdentity
rcRBS2402 = _RcRBS2402_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 46)
)
_RcAtr8310_ObjectIdentity = ObjectIdentity
rcAtr8310 = _RcAtr8310_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 47)
)
_RcAtr8306_ObjectIdentity = ObjectIdentity
rcAtr8306 = _RcAtr8306_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 48)
)
_RcAtr8010_ObjectIdentity = ObjectIdentity
rcAtr8010 = _RcAtr8010_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 49)
)
_RcAtr8006_ObjectIdentity = ObjectIdentity
rcAtr8006 = _RcAtr8006_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 50)
)
_RcA8603r_ObjectIdentity = ObjectIdentity
rcA8603r = _RcA8603r_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 55)
)
_RcERS8603r_ObjectIdentity = ObjectIdentity
rcERS8603r = _RcERS8603r_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 56)
)
_RcA8803r_ObjectIdentity = ObjectIdentity
rcA8803r = _RcA8803r_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 57)
)
_RcA8806_ObjectIdentity = ObjectIdentity
rcA8806 = _RcA8806_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 58)
)
_RcA8810_ObjectIdentity = ObjectIdentity
rcA8810 = _RcA8810_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 59)
)
_RcA8810co_ObjectIdentity = ObjectIdentity
rcA8810co = _RcA8810co_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 60)
)
_RcVSP9012_ObjectIdentity = ObjectIdentity
rcVSP9012 = _RcVSP9012_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 201)
)
_RcA8003_ObjectIdentity = ObjectIdentity
rcA8003 = _RcA8003_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 280887555)
)
_RcA8006_ObjectIdentity = ObjectIdentity
rcA8006 = _RcA8006_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 280887558)
)
_RcA8010_ObjectIdentity = ObjectIdentity
rcA8010 = _RcA8010_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 280887562)
)
_RcA8010co_ObjectIdentity = ObjectIdentity
rcA8010co = _RcA8010co_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2272, 1623064842)
)
_SnmpV2_ObjectIdentity = ObjectIdentity
snmpV2 = _SnmpV2_ObjectIdentity(
    (1, 3, 6, 1, 6)
)
_SnmpModules_ObjectIdentity = ObjectIdentity
snmpModules = _SnmpModules_ObjectIdentity(
    (1, 3, 6, 1, 6, 3)
)
_SnmpMIB_ObjectIdentity = ObjectIdentity
snmpMIB = _SnmpMIB_ObjectIdentity(
    (1, 3, 6, 1, 6, 3, 1)
)
_SnmpMIBObjects_ObjectIdentity = ObjectIdentity
snmpMIBObjects = _SnmpMIBObjects_ObjectIdentity(
    (1, 3, 6, 1, 6, 3, 1, 1)
)
_SnmpTraps_ObjectIdentity = ObjectIdentity
snmpTraps = _SnmpTraps_ObjectIdentity(
    (1, 3, 6, 1, 6, 3, 1, 1, 5)
)
rcIpBgpTmpPeerAfEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcIpBgpExtPeerAfEntry")
)
rcIpBgpExtPeerAfEntry.setIndexNames(*rcIpBgpTmpPeerAfEntry.getIndexNames())
rcIpBgpTmpAfPathAttrEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcIpBgpExtAfPathAttrEntry")
)
rcIpBgpExtAfPathAttrEntry.setIndexNames(*rcIpBgpTmpAfPathAttrEntry.getIndexNames())
rcIpBgpTmpPeerAfEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcIpBgpTmpPeerAfErrorsEntry")
)
rcIpBgpTmpPeerAfErrorsEntry.setIndexNames(*rcIpBgpTmpPeerAfEntry.getIndexNames())
rcIpBgpTmpPeerAfEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcIpBgpTmpPeerAfEventTimesEntry")
)
rcIpBgpTmpPeerAfEventTimesEntry.setIndexNames(*rcIpBgpTmpPeerAfEntry.getIndexNames())
rcIpBgpTmpPeerAfEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcIpBgpTmpPeerAfConfiguredTimersEntry")
)
rcIpBgpTmpPeerAfConfiguredTimersEntry.setIndexNames(*rcIpBgpTmpPeerAfEntry.getIndexNames())
rcIpBgpTmpPeerAfEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcIpBgpTmpPeerAfNegotiatedTimersEntry")
)
rcIpBgpTmpPeerAfNegotiatedTimersEntry.setIndexNames(*rcIpBgpTmpPeerAfEntry.getIndexNames())
rcIpBgpTmpPeerAfEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcIpBgpTmpPeerAfCountersEntry")
)
rcIpBgpTmpPeerAfCountersEntry.setIndexNames(*rcIpBgpTmpPeerAfEntry.getIndexNames())
rcVrrpOperEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcVrrpRouterStatsEntry")
)
rcVrrpRouterStatsEntry.setIndexNames(*rcVrrpOperEntry.getIndexNames())
msdpPeerEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcMsdpPeerEntry")
)
rcMsdpPeerEntry.setIndexNames(*msdpPeerEntry.getIndexNames())
rcBfdTmpSessEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcBfdTmpSessPerfEntry")
)
rcBfdTmpSessPerfEntry.setIndexNames(*rcBfdTmpSessEntry.getIndexNames())
rcBfdTmpSessEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcBfdExtSessEntry")
)
rcBfdExtSessEntry.setIndexNames(*rcBfdTmpSessEntry.getIndexNames())
rcVrrpTmpOperationsEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcVrrpTmpRouterStatisticsEntry")
)
rcVrrpTmpRouterStatisticsEntry.setIndexNames(*rcVrrpTmpOperationsEntry.getIndexNames())
rcVrrpTmpOperationsEntry.registerAugmentions(
    ("RAPID-CITY",
     "rcVrrpExtOperationsEntry")
)
rcVrrpExtOperationsEntry.setIndexNames(*rcVrrpTmpOperationsEntry.getIndexNames())

# Managed Objects groups

rcOspfv3BasicGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 1)
)
rcOspfv3BasicGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3RouterId"),
        ("RAPID-CITY", "rcOspfv3AdminStat"),
        ("RAPID-CITY", "rcOspfv3VersionNumber"),
        ("RAPID-CITY", "rcOspfv3AreaBdrRtrStatus"),
        ("RAPID-CITY", "rcOspfv3ASBdrRtrStatus"),
        ("RAPID-CITY", "rcOspfv3AsScopeLsaCount"),
        ("RAPID-CITY", "rcOspfv3AsScopeLsaCksumSum"),
        ("RAPID-CITY", "rcOspfv3OriginateNewLsas"),
        ("RAPID-CITY", "rcOspfv3RxNewLsas"),
        ("RAPID-CITY", "rcOspfv3ExtLsaCount"),
        ("RAPID-CITY", "rcOspfv3ExtAreaLsdbLimit"),
        ("RAPID-CITY", "rcOspfv3MulticastExtensions"),
        ("RAPID-CITY", "rcOspfv3ExitOverflowInterval"),
        ("RAPID-CITY", "rcOspfv3DemandExtensions"),
        ("RAPID-CITY", "rcOspfv3TrafficEngineeringSupport"),
        ("RAPID-CITY", "rcOspfv3ReferenceBandwidth"),
        ("RAPID-CITY", "rcOspfv3RestartSupport"),
        ("RAPID-CITY", "rcOspfv3RestartInterval"),
        ("RAPID-CITY", "rcOspfv3RestartStatus"),
        ("RAPID-CITY", "rcOspfv3RestartAge"),
        ("RAPID-CITY", "rcOspfv3RestartExitReason"))
)
if mibBuilder.loadTexts:
    rcOspfv3BasicGroup.setStatus("current")

rcOspfv3AreaGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 2)
)
rcOspfv3AreaGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3ImportAsExtern"),
        ("RAPID-CITY", "rcOspfv3AreaSpfRuns"),
        ("RAPID-CITY", "rcOspfv3AreaBdrRtrCount"),
        ("RAPID-CITY", "rcOspfv3AreaAsBdrRtrCount"),
        ("RAPID-CITY", "rcOspfv3AreaScopeLsaCount"),
        ("RAPID-CITY", "rcOspfv3AreaScopeLsaCksumSum"),
        ("RAPID-CITY", "rcOspfv3AreaSummary"),
        ("RAPID-CITY", "rcOspfv3AreaStatus"),
        ("RAPID-CITY", "rcOspfv3StubMetric"),
        ("RAPID-CITY", "rcOspfv3AreaNssaTranslatorRole"),
        ("RAPID-CITY", "rcOspfv3AreaNssaTranslatorState"),
        ("RAPID-CITY", "rcOspfv3AreaNssaTranslatorStabilityInterval"),
        ("RAPID-CITY", "rcOspfv3AreaNssaTranslatorEvents"),
        ("RAPID-CITY", "rcOspfv3AreaStubMetricType"))
)
if mibBuilder.loadTexts:
    rcOspfv3AreaGroup.setStatus("current")

rcOspfv3AsLsdbGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 3)
)
rcOspfv3AsLsdbGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3AsLsdbSequence"),
        ("RAPID-CITY", "rcOspfv3AsLsdbAge"),
        ("RAPID-CITY", "rcOspfv3AsLsdbChecksum"),
        ("RAPID-CITY", "rcOspfv3AsLsdbAdvertisement"),
        ("RAPID-CITY", "rcOspfv3AsLsdbTypeKnown"))
)
if mibBuilder.loadTexts:
    rcOspfv3AsLsdbGroup.setStatus("current")

rcOspfv3AreaLsdbGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 4)
)
rcOspfv3AreaLsdbGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3AreaLsdbSequence"),
        ("RAPID-CITY", "rcOspfv3AreaLsdbAge"),
        ("RAPID-CITY", "rcOspfv3AreaLsdbChecksum"),
        ("RAPID-CITY", "rcOspfv3AreaLsdbAdvertisement"),
        ("RAPID-CITY", "rcOspfv3AreaLsdbTypeKnown"))
)
if mibBuilder.loadTexts:
    rcOspfv3AreaLsdbGroup.setStatus("current")

rcOspfv3LinkLsdbGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 5)
)
rcOspfv3LinkLsdbGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3LinkLsdbSequence"),
        ("RAPID-CITY", "rcOspfv3LinkLsdbAge"),
        ("RAPID-CITY", "rcOspfv3LinkLsdbChecksum"),
        ("RAPID-CITY", "rcOspfv3LinkLsdbAdvertisement"),
        ("RAPID-CITY", "rcOspfv3LinkLsdbTypeKnown"))
)
if mibBuilder.loadTexts:
    rcOspfv3LinkLsdbGroup.setStatus("current")

rcOspfv3HostGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 6)
)
rcOspfv3HostGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3HostMetric"),
        ("RAPID-CITY", "rcOspfv3HostStatus"),
        ("RAPID-CITY", "rcOspfv3HostAreaID"))
)
if mibBuilder.loadTexts:
    rcOspfv3HostGroup.setStatus("current")

rcOspfv3IfGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 7)
)
rcOspfv3IfGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3IfAreaId"),
        ("RAPID-CITY", "rcOspfv3IfType"),
        ("RAPID-CITY", "rcOspfv3IfAdminStat"),
        ("RAPID-CITY", "rcOspfv3IfRtrPriority"),
        ("RAPID-CITY", "rcOspfv3IfTransitDelay"),
        ("RAPID-CITY", "rcOspfv3IfRetransInterval"),
        ("RAPID-CITY", "rcOspfv3IfHelloInterval"),
        ("RAPID-CITY", "rcOspfv3IfRtrDeadInterval"),
        ("RAPID-CITY", "rcOspfv3IfPollInterval"),
        ("RAPID-CITY", "rcOspfv3IfState"),
        ("RAPID-CITY", "rcOspfv3IfDesignatedRouter"),
        ("RAPID-CITY", "rcOspfv3IfBackupDesignatedRouter"),
        ("RAPID-CITY", "rcOspfv3IfEvents"),
        ("RAPID-CITY", "rcOspfv3IfStatus"),
        ("RAPID-CITY", "rcOspfv3IfMulticastForwarding"),
        ("RAPID-CITY", "rcOspfv3IfDemand"),
        ("RAPID-CITY", "rcOspfv3IfMetricValue"),
        ("RAPID-CITY", "rcOspfv3IfLinkScopeLsaCount"),
        ("RAPID-CITY", "rcOspfv3IfLinkLsaCksumSum"),
        ("RAPID-CITY", "rcOspfv3IfInstId"),
        ("RAPID-CITY", "rcOspfv3IfDemandNbrProbe"),
        ("RAPID-CITY", "rcOspfv3IfDemandNbrProbeRetxLimit"),
        ("RAPID-CITY", "rcOspfv3IfDemandNbrProbeInterval"))
)
if mibBuilder.loadTexts:
    rcOspfv3IfGroup.setStatus("current")

rcOspfv3VirtIfGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 8)
)
rcOspfv3VirtIfGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3VirtIfIndex"),
        ("RAPID-CITY", "rcOspfv3VirtIfTransitDelay"),
        ("RAPID-CITY", "rcOspfv3VirtIfRetransInterval"),
        ("RAPID-CITY", "rcOspfv3VirtIfHelloInterval"),
        ("RAPID-CITY", "rcOspfv3VirtIfRtrDeadInterval"),
        ("RAPID-CITY", "rcOspfv3VirtIfState"),
        ("RAPID-CITY", "rcOspfv3VirtIfEvents"),
        ("RAPID-CITY", "rcOspfv3VirtIfStatus"),
        ("RAPID-CITY", "rcOspfv3VirtIfLinkScopeLsaCount"),
        ("RAPID-CITY", "rcOspfv3VirtIfLinkLsaCksumSum"))
)
if mibBuilder.loadTexts:
    rcOspfv3VirtIfGroup.setStatus("current")

rcOspfv3NbrGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 9)
)
rcOspfv3NbrGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3NbrAddressType"),
        ("RAPID-CITY", "rcOspfv3NbrAddress"),
        ("RAPID-CITY", "rcOspfv3NbrOptions"),
        ("RAPID-CITY", "rcOspfv3NbrPriority"),
        ("RAPID-CITY", "rcOspfv3NbrState"),
        ("RAPID-CITY", "rcOspfv3NbrEvents"),
        ("RAPID-CITY", "rcOspfv3NbrLsRetransQLen"),
        ("RAPID-CITY", "rcOspfv3NbrHelloSuppressed"),
        ("RAPID-CITY", "rcOspfv3NbrIfId"),
        ("RAPID-CITY", "rcOspfv3NbrRestartHelperStatus"),
        ("RAPID-CITY", "rcOspfv3NbrRestartHelperAge"),
        ("RAPID-CITY", "rcOspfv3NbrRestartHelperExitReason"))
)
if mibBuilder.loadTexts:
    rcOspfv3NbrGroup.setStatus("current")

rcOspfv3NbmaNbrGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 10)
)
rcOspfv3NbmaNbrGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3NbmaNbrPriority"),
        ("RAPID-CITY", "rcOspfv3NbmaNbrRtrId"),
        ("RAPID-CITY", "rcOspfv3NbmaNbrState"),
        ("RAPID-CITY", "rcOspfv3NbmaNbrStorageType"),
        ("RAPID-CITY", "rcOspfv3NbmaNbrStatus"))
)
if mibBuilder.loadTexts:
    rcOspfv3NbmaNbrGroup.setStatus("current")

rcOspfv3VirtNbrGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 11)
)
rcOspfv3VirtNbrGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3VirtNbrIfIndex"),
        ("RAPID-CITY", "rcOspfv3VirtNbrAddressType"),
        ("RAPID-CITY", "rcOspfv3VirtNbrAddress"),
        ("RAPID-CITY", "rcOspfv3VirtNbrOptions"),
        ("RAPID-CITY", "rcOspfv3VirtNbrState"),
        ("RAPID-CITY", "rcOspfv3VirtNbrEvents"),
        ("RAPID-CITY", "rcOspfv3VirtNbrLsRetransQLen"),
        ("RAPID-CITY", "rcOspfv3VirtNbrHelloSuppressed"),
        ("RAPID-CITY", "rcOspfv3VirtNbrIfId"),
        ("RAPID-CITY", "rcOspfv3VirtNbrRestartHelperStatus"),
        ("RAPID-CITY", "rcOspfv3VirtNbrRestartHelperAge"),
        ("RAPID-CITY", "rcOspfv3VirtNbrRestartHelperExitReason"))
)
if mibBuilder.loadTexts:
    rcOspfv3VirtNbrGroup.setStatus("current")

rcOspfv3AreaAggregateGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 1, 12)
)
rcOspfv3AreaAggregateGroup.setObjects(
      *(("RAPID-CITY", "rcOspfv3AreaAggregateStatus"),
        ("RAPID-CITY", "rcOspfv3AreaAggregateEffect"),
        ("RAPID-CITY", "rcOspfv3AreaAggregateRouteTag"),
        ("RAPID-CITY", "rcOspfv3AreaAggregateAdvertiseMetric"))
)
if mibBuilder.loadTexts:
    rcOspfv3AreaAggregateGroup.setStatus("current")


# Notification objects

rcIpBgpTmpEstablishedNotification = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 0, 1)
)
rcIpBgpTmpEstablishedNotification.setObjects(
      *(("BGP4-MIB", "bgpPeerRemoteAddr"),
        ("BGP4-MIB", "bgpPeerLastError"),
        ("BGP4-MIB", "bgpPeerState"))
)
if mibBuilder.loadTexts:
    rcIpBgpTmpEstablishedNotification.setStatus(
        "deprecated"
    )

rcIpBgpTmpBackwardTransNotification = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 0, 2)
)
rcIpBgpTmpBackwardTransNotification.setObjects(
      *(("BGP4-MIB", "bgpPeerRemoteAddr"),
        ("BGP4-MIB", "bgpPeerLastError"),
        ("BGP4-MIB", "bgpPeerState"))
)
if mibBuilder.loadTexts:
    rcIpBgpTmpBackwardTransNotification.setStatus(
        "deprecated"
    )

rcIpBgpTmpAfEstablishedNotification = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 0, 3)
)
rcIpBgpTmpAfEstablishedNotification.setObjects(
      *(("RAPID-CITY", "rcIpBgpTmpPeerAfPeerState"),
        ("RAPID-CITY", "rcIpBgpTmpPeerAfLocalPort"),
        ("RAPID-CITY", "rcIpBgpTmpPeerAfRemotePort"))
)
if mibBuilder.loadTexts:
    rcIpBgpTmpAfEstablishedNotification.setStatus(
        "current"
    )

rcIpBgpTmpAfBackwardTransitionNotification = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 8, 101, 17, 0, 4)
)
rcIpBgpTmpAfBackwardTransitionNotification.setObjects(
      *(("RAPID-CITY", "rcIpBgpTmpPeerAfPeerState"),
        ("RAPID-CITY", "rcIpBgpTmpPeerAfLocalPort"),
        ("RAPID-CITY", "rcIpBgpTmpPeerAfRemotePort"),
        ("RAPID-CITY", "rcIpBgpTmpPeerAfLastErrorCodeReceived"),
        ("RAPID-CITY", "rcIpBgpTmpPeerAfLastErrorSubCodeReceived"),
        ("RAPID-CITY", "rcIpBgpTmpPeerAfLastErrorReceivedText"))
)
if mibBuilder.loadTexts:
    rcIpBgpTmpAfBackwardTransitionNotification.setStatus(
        "current"
    )

rcnCardDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 1)
)
rcnCardDown.setObjects(
      *(("RAPID-CITY", "rcCardIndex"),
        ("RAPID-CITY", "rcCardAdminStatus"),
        ("RAPID-CITY", "rcCardOperStatus"))
)
if mibBuilder.loadTexts:
    rcnCardDown.setStatus(
        "current"
    )

rcnCardUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 2)
)
rcnCardUp.setObjects(
      *(("RAPID-CITY", "rcCardIndex"),
        ("RAPID-CITY", "rcCardAdminStatus"),
        ("RAPID-CITY", "rcCardOperStatus"))
)
if mibBuilder.loadTexts:
    rcnCardUp.setStatus(
        "current"
    )

rcnErrorNotification = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 3)
)
rcnErrorNotification.setObjects(
      *(("RAPID-CITY", "rcErrorLevel"),
        ("RAPID-CITY", "rcErrorCode"),
        ("RAPID-CITY", "rcErrorText"))
)
if mibBuilder.loadTexts:
    rcnErrorNotification.setStatus(
        "current"
    )

rcnStpNewRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 4)
)
rcnStpNewRoot.setObjects(
    ("RAPID-CITY", "rcStgId")
)
if mibBuilder.loadTexts:
    rcnStpNewRoot.setStatus(
        "current"
    )

rcnStpTopologyChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 5)
)
rcnStpTopologyChange.setObjects(
      *(("RAPID-CITY", "rcStgId"),
        ("RAPID-CITY", "rcPortIndex"))
)
if mibBuilder.loadTexts:
    rcnStpTopologyChange.setStatus(
        "current"
    )

rcnChasPowerSupplyDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 6)
)
rcnChasPowerSupplyDown.setObjects(
      *(("RAPID-CITY", "rcChasPowerSupplyId"),
        ("RAPID-CITY", "rcChasPowerSupplyOperStatus"))
)
if mibBuilder.loadTexts:
    rcnChasPowerSupplyDown.setStatus(
        "current"
    )

rcnChasFanDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 7)
)
rcnChasFanDown.setObjects(
      *(("RAPID-CITY", "rcChasFanId"),
        ("RAPID-CITY", "rcChasFanOperStatus"))
)
if mibBuilder.loadTexts:
    rcnChasFanDown.setStatus(
        "current"
    )

rcnLinkOscillation = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 8)
)
rcnLinkOscillation.setObjects(
    ("RAPID-CITY", "rcPortIndex")
)
if mibBuilder.loadTexts:
    rcnLinkOscillation.setStatus(
        "current"
    )

rcnMacViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 9)
)
rcnMacViolation.setObjects(
      *(("RAPID-CITY", "rcErrorText"),
        ("RAPID-CITY", "rcPortIndex"))
)
if mibBuilder.loadTexts:
    rcnMacViolation.setStatus(
        "current"
    )

rcnSonetTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 10)
)
rcnSonetTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPosSonetTrapType"),
        ("RAPID-CITY", "rcPosSonetTrapIndication"))
)
if mibBuilder.loadTexts:
    rcnSonetTrap.setStatus(
        "current"
    )

rcn2kCardDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 11)
)
rcn2kCardDown.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rc2kCardFrontAdminStatus"),
        ("RAPID-CITY", "rc2kCardFrontOperStatus"))
)
if mibBuilder.loadTexts:
    rcn2kCardDown.setStatus(
        "current"
    )

rcn2kCardUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 12)
)
rcn2kCardUp.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rc2kCardFrontAdminStatus"),
        ("RAPID-CITY", "rc2kCardFrontOperStatus"))
)
if mibBuilder.loadTexts:
    rcn2kCardUp.setStatus(
        "current"
    )

rcn2kTemperature = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 13)
)
rcn2kTemperature.setObjects(
    ("RAPID-CITY", "rc2kChassisTemperature")
)
if mibBuilder.loadTexts:
    rcn2kTemperature.setStatus(
        "current"
    )

rcnChasPowerSupplyUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 14)
)
rcnChasPowerSupplyUp.setObjects(
      *(("RAPID-CITY", "rcChasPowerSupplyId"),
        ("RAPID-CITY", "rcChasPowerSupplyOperStatus"))
)
if mibBuilder.loadTexts:
    rcnChasPowerSupplyUp.setStatus(
        "current"
    )

rcn2kAtmPvcLinkStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 15)
)
rcn2kAtmPvcLinkStateChange.setObjects(
      *(("RAPID-CITY", "rc2kAtmPvcIfIndex"),
        ("RAPID-CITY", "rc2kAtmPvcVpi"),
        ("RAPID-CITY", "rc2kAtmPvcVci"),
        ("RAPID-CITY", "rc2kAtmPvcOamVcStatus"))
)
if mibBuilder.loadTexts:
    rcn2kAtmPvcLinkStateChange.setStatus(
        "current"
    )

rcnStpTCN = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 16)
)
rcnStpTCN.setObjects(
      *(("RAPID-CITY", "rcStgId"),
        ("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcStgBridgeAddress"))
)
if mibBuilder.loadTexts:
    rcnStpTCN.setStatus(
        "current"
    )

rcnSmltIstLinkUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 17)
)
if mibBuilder.loadTexts:
    rcnSmltIstLinkUp.setStatus(
        "current"
    )

rcnSmltIstLinkDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 18)
)
if mibBuilder.loadTexts:
    rcnSmltIstLinkDown.setStatus(
        "current"
    )

rcnSmltLinkUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 19)
)
rcnSmltLinkUp.setObjects(
    ("RAPID-CITY", "rcMltSmltId")
)
if mibBuilder.loadTexts:
    rcnSmltLinkUp.setStatus(
        "current"
    )

rcnSmltLinkDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 20)
)
rcnSmltLinkDown.setObjects(
    ("RAPID-CITY", "rcMltSmltId")
)
if mibBuilder.loadTexts:
    rcnSmltLinkDown.setStatus(
        "current"
    )

rcnChasFanUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 21)
)
rcnChasFanUp.setObjects(
      *(("RAPID-CITY", "rcChasFanId"),
        ("RAPID-CITY", "rcChasFanOperStatus"))
)
if mibBuilder.loadTexts:
    rcnChasFanUp.setStatus(
        "current"
    )

rcnPasswordChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 22)
)
rcnPasswordChange.setObjects(
      *(("RAPID-CITY", "rcCliPasswordChange"),
        ("RAPID-CITY", "rcCliPassChangeResult"))
)
if mibBuilder.loadTexts:
    rcnPasswordChange.setStatus(
        "current"
    )

rcnEmError = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 23)
)
rcnEmError.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rcChasEmModeError"))
)
if mibBuilder.loadTexts:
    rcnEmError.setStatus(
        "current"
    )

rcnPcmciaCardRemoved = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 25)
)
if mibBuilder.loadTexts:
    rcnPcmciaCardRemoved.setStatus(
        "current"
    )

rcnSmartCpldTimerFired = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 26)
)
rcnSmartCpldTimerFired.setObjects(
    ("RAPID-CITY", "rc2kCardIndex")
)
if mibBuilder.loadTexts:
    rcnSmartCpldTimerFired.setStatus(
        "current"
    )

rcnCardCpldNotUpDate = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 27)
)
rcnCardCpldNotUpDate.setObjects(
    ("RAPID-CITY", "rc2kCardIndex")
)
if mibBuilder.loadTexts:
    rcnCardCpldNotUpDate.setStatus(
        "current"
    )

rcnIgapLogFileFull = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 28)
)
if mibBuilder.loadTexts:
    rcnIgapLogFileFull.setStatus(
        "current"
    )

rcnCpLimitShutDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 29)
)
rcnCpLimitShutDown.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("IF-MIB", "ifAdminStatus"),
        ("IF-MIB", "ifOperStatus"),
        ("RAPID-CITY", "rcPortCpLimitShutDown"))
)
if mibBuilder.loadTexts:
    rcnCpLimitShutDown.setStatus(
        "current"
    )

rcnSshServerEnabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 30)
)
rcnSshServerEnabled.setObjects(
    ("RAPID-CITY", "rcSshGlobalPort")
)
if mibBuilder.loadTexts:
    rcnSshServerEnabled.setStatus(
        "current"
    )

rcnSshServerDisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 31)
)
rcnSshServerDisabled.setObjects(
    ("RAPID-CITY", "rcSshGlobalPort")
)
if mibBuilder.loadTexts:
    rcnSshServerDisabled.setStatus(
        "current"
    )

rcnSshSessionLogin = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 32)
)
rcnSshSessionLogin.setObjects(
    ("RAPID-CITY", "rcSshGlobalHostIpAddr")
)
if mibBuilder.loadTexts:
    rcnSshSessionLogin.setStatus(
        "current"
    )

rcnSshSessionLogout = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 33)
)
rcnSshSessionLogout.setObjects(
    ("RAPID-CITY", "rcSshGlobalHostIpAddr")
)
if mibBuilder.loadTexts:
    rcnSshSessionLogout.setStatus(
        "current"
    )

rcnSshUnauthorizedAccess = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 34)
)
rcnSshUnauthorizedAccess.setObjects(
    ("RAPID-CITY", "rcSshGlobalHostIpAddr")
)
if mibBuilder.loadTexts:
    rcnSshUnauthorizedAccess.setStatus(
        "current"
    )

rcnHaCpuState = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 35)
)
rcnHaCpuState.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rcL2RedundancyHaCpuState"))
)
if mibBuilder.loadTexts:
    rcnHaCpuState.setStatus(
        "current"
    )

rcnInsufficientMemory = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 36)
)
rcnInsufficientMemory.setObjects(
    ("RAPID-CITY", "rc2kCardIndex")
)
if mibBuilder.loadTexts:
    rcnInsufficientMemory.setStatus(
        "current"
    )

rcnSaveConfigAction = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 37)
)
rcnSaveConfigAction.setObjects(
    ("RAPID-CITY", "rcSysActionL1")
)
if mibBuilder.loadTexts:
    rcnSaveConfigAction.setStatus(
        "current"
    )

rcnLoopDetectOnPort = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 38)
)
rcnLoopDetectOnPort.setObjects(
      *(("RAPID-CITY", "rcVlanId"),
        ("RAPID-CITY", "rcPortIndex"))
)
if mibBuilder.loadTexts:
    rcnLoopDetectOnPort.setStatus(
        "current"
    )

rcnbgpEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 39)
)
rcnbgpEstablished.setObjects(
      *(("RAPID-CITY", "rcIpBgpPeerIpAddress"),
        ("RAPID-CITY", "rcIpBgpPeerLastError"),
        ("RAPID-CITY", "rcIpBgpPeerState"))
)
if mibBuilder.loadTexts:
    rcnbgpEstablished.setStatus(
        "current"
    )

rcnbgpBackwardTransition = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 40)
)
rcnbgpBackwardTransition.setObjects(
      *(("RAPID-CITY", "rcIpBgpPeerIpAddress"),
        ("RAPID-CITY", "rcIpBgpPeerLastError"),
        ("RAPID-CITY", "rcIpBgpPeerState"))
)
if mibBuilder.loadTexts:
    rcnbgpBackwardTransition.setStatus(
        "current"
    )

rcnAggLinkUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 41)
)
rcnAggLinkUp.setObjects(
    ("RAPID-CITY", "rcMltId")
)
if mibBuilder.loadTexts:
    rcnAggLinkUp.setStatus(
        "current"
    )

rcnAggLinkDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 42)
)
rcnAggLinkDown.setObjects(
    ("RAPID-CITY", "rcMltId")
)
if mibBuilder.loadTexts:
    rcnAggLinkDown.setStatus(
        "current"
    )

rcnIgmpNewGroupMember = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 43)
)
rcnIgmpNewGroupMember.setObjects(
      *(("RAPID-CITY", "rcIgmpGroupIfIndex"),
        ("RAPID-CITY", "rcIgmpGroupIpAddress"),
        ("RAPID-CITY", "rcIgmpGroupInPort"),
        ("RAPID-CITY", "rcIgmpGroupMembers"))
)
if mibBuilder.loadTexts:
    rcnIgmpNewGroupMember.setStatus(
        "current"
    )

rcnIgmpLossGroupMember = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 44)
)
rcnIgmpLossGroupMember.setObjects(
      *(("RAPID-CITY", "rcIgmpGroupMembers"),
        ("RAPID-CITY", "rcIgmpGroupIpAddress"),
        ("RAPID-CITY", "rcIgmpGroupInPort"),
        ("RAPID-CITY", "rcIgmpGroupIfIndex"))
)
if mibBuilder.loadTexts:
    rcnIgmpLossGroupMember.setStatus(
        "current"
    )

rcnIgmpNewQuerier = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 45)
)
rcnIgmpNewQuerier.setObjects(
      *(("RAPID-CITY", "rcIgmpInterfaceExtnIfIndex"),
        ("IGMP-STD-MIB", "igmpInterfaceQuerier"))
)
if mibBuilder.loadTexts:
    rcnIgmpNewQuerier.setStatus(
        "current"
    )

rcnIgmpQuerierChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 46)
)
rcnIgmpQuerierChange.setObjects(
      *(("RAPID-CITY", "rcIgmpInterfaceExtnIfIndex"),
        ("RAPID-CITY", "rcIgmpInterfaceExtnNewQuerier"),
        ("IGMP-STD-MIB", "igmpInterfaceQuerier"))
)
if mibBuilder.loadTexts:
    rcnIgmpQuerierChange.setStatus(
        "current"
    )

rcnDvmrpIfStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 47)
)
rcnDvmrpIfStateChange.setObjects(
      *(("DVMRP-MIB", "dvmrpInterfaceIfIndex"),
        ("DVMRP-MIB", "dvmrpInterfaceOperState"))
)
if mibBuilder.loadTexts:
    rcnDvmrpIfStateChange.setStatus(
        "current"
    )

rcnDvmrpNewNbrChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 48)
)
rcnDvmrpNewNbrChange.setObjects(
      *(("DVMRP-MIB", "dvmrpNeighborIfIndex"),
        ("DVMRP-MIB", "dvmrpNeighborAddress"))
)
if mibBuilder.loadTexts:
    rcnDvmrpNewNbrChange.setStatus(
        "current"
    )

rcnDvmrpNbrLossChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 49)
)
rcnDvmrpNbrLossChange.setObjects(
      *(("DVMRP-MIB", "dvmrpNeighborIfIndex"),
        ("DVMRP-MIB", "dvmrpNeighborAddress"))
)
if mibBuilder.loadTexts:
    rcnDvmrpNbrLossChange.setStatus(
        "current"
    )

rcnFdbProtectViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 59)
)
rcnFdbProtectViolation.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcVlanId"))
)
if mibBuilder.loadTexts:
    rcnFdbProtectViolation.setStatus(
        "current"
    )

rcnLogMsgControl = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 60)
)
rcnLogMsgControl.setObjects(
      *(("RAPID-CITY", "rcSysMsgLogFrequency"),
        ("RAPID-CITY", "rcSysMsgLogText"))
)
if mibBuilder.loadTexts:
    rcnLogMsgControl.setStatus(
        "current"
    )

rcnSaveConfigFile = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 61)
)
rcnSaveConfigFile.setObjects(
      *(("RAPID-CITY", "rcSysActionL1"),
        ("RAPID-CITY", "rcSysConfigFileName"))
)
if mibBuilder.loadTexts:
    rcnSaveConfigFile.setStatus(
        "current"
    )

rcnDNSRequestResponse = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 62)
)
rcnDNSRequestResponse.setObjects(
      *(("RAPID-CITY", "rcSysDnsServerListIpAddr"),
        ("RAPID-CITY", "rcSysDnsRequestType"))
)
if mibBuilder.loadTexts:
    rcnDNSRequestResponse.setStatus(
        "current"
    )

rcnDuplicateIpAddress = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 63)
)
rcnDuplicateIpAddress.setObjects(
      *(("IP-MIB", "ipNetToMediaNetAddress"),
        ("IP-MIB", "ipNetToMediaPhysAddress"))
)
if mibBuilder.loadTexts:
    rcnDuplicateIpAddress.setStatus(
        "current"
    )

rcnLoopDetectPortDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 64)
)
rcnLoopDetectPortDown.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("IF-MIB", "ifAdminStatus"),
        ("IF-MIB", "ifOperStatus"))
)
if mibBuilder.loadTexts:
    rcnLoopDetectPortDown.setStatus(
        "current"
    )

rcnLoopDetectMacDiscard = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 67)
)
rcnLoopDetectMacDiscard.setObjects(
      *(("RAPID-CITY", "rcBridgeNewFdbAddress"),
        ("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcSysMacFlapLimitTime"),
        ("RAPID-CITY", "rcSysMacFlapLimitCount"))
)
if mibBuilder.loadTexts:
    rcnLoopDetectMacDiscard.setStatus(
        "current"
    )

rcnAutoRecoverPort = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 68)
)
rcnAutoRecoverPort.setObjects(
    ("RAPID-CITY", "rcPortIndex")
)
if mibBuilder.loadTexts:
    rcnAutoRecoverPort.setStatus(
        "current"
    )

rcnAutoRecoverLoopDetectedPort = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 69)
)
rcnAutoRecoverLoopDetectedPort.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcVlanNewLoopDetectedAction"))
)
if mibBuilder.loadTexts:
    rcnAutoRecoverLoopDetectedPort.setStatus(
        "current"
    )

rcnExtCpLimitShutDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 70)
)
rcnExtCpLimitShutDown.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("IF-MIB", "ifAdminStatus"))
)
if mibBuilder.loadTexts:
    rcnExtCpLimitShutDown.setStatus(
        "current"
    )

rcnExtCpLimitSopCongestion = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 71)
)
rcnExtCpLimitSopCongestion.setObjects(
      *(("RAPID-CITY", "rcSysExtCplimitSysOctapidCongested"),
        ("RAPID-CITY", "rcSysExtCplimitPortsMonitored"))
)
if mibBuilder.loadTexts:
    rcnExtCpLimitSopCongestion.setStatus(
        "current"
    )

rcnTacacsAuthFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 74)
)
rcnTacacsAuthFailure.setObjects(
    ("RAPID-CITY", "rcTacacsGlobalLastUserName")
)
if mibBuilder.loadTexts:
    rcnTacacsAuthFailure.setStatus(
        "current"
    )

rcnTacacsNoServers = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 75)
)
if mibBuilder.loadTexts:
    rcnTacacsNoServers.setStatus(
        "current"
    )

rcnTacacsRxUnsupportedFrame = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 76)
)
rcnTacacsRxUnsupportedFrame.setObjects(
      *(("RAPID-CITY", "rcTacacsGlobalLastAddressType"),
        ("RAPID-CITY", "rcTacacsGlobalLastAddress"))
)
if mibBuilder.loadTexts:
    rcnTacacsRxUnsupportedFrame.setStatus(
        "current"
    )

rcnTacacsExceededMaxLogins = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 77)
)
if mibBuilder.loadTexts:
    rcnTacacsExceededMaxLogins.setStatus(
        "current"
    )

rcnTacacsClientFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 78)
)
if mibBuilder.loadTexts:
    rcnTacacsClientFailure.setStatus(
        "current"
    )

rcnBpduReceived = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 79)
)
rcnBpduReceived.setObjects(
    ("RAPID-CITY", "rcPortBpduFilteringTimeout")
)
if mibBuilder.loadTexts:
    rcnBpduReceived.setStatus(
        "current"
    )

rcnVlacpPortDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 80)
)
rcnVlacpPortDown.setObjects(
    ("RAPID-CITY", "rcPortIndex")
)
if mibBuilder.loadTexts:
    rcnVlacpPortDown.setStatus(
        "current"
    )

rcnVlacpPortUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 81)
)
rcnVlacpPortUp.setObjects(
    ("RAPID-CITY", "rcPortIndex")
)
if mibBuilder.loadTexts:
    rcnVlacpPortUp.setStatus(
        "current"
    )

rcnExtCpLimitShutDownNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 82)
)
if mibBuilder.loadTexts:
    rcnExtCpLimitShutDownNormal.setStatus(
        "current"
    )

rcnEapMacIntrusion = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 83)
)
rcnEapMacIntrusion.setObjects(
      *(("RAPID-CITY", "rcSysIpAddr"),
        ("RAPID-CITY", "rcRadiusPaePortNumber"),
        ("RAPID-CITY", "rcRadiusEapLastAuthMac"),
        ("RAPID-CITY", "rcRadiusEapLastRejMac"))
)
if mibBuilder.loadTexts:
    rcnEapMacIntrusion.setStatus(
        "current"
    )

rcnInterCpuCommStatus = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 84)
)
rcnInterCpuCommStatus.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rcCardOperStatus"))
)
if mibBuilder.loadTexts:
    rcnInterCpuCommStatus.setStatus(
        "current"
    )

rcPlugOptModTemperatureStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 89)
)
rcPlugOptModTemperatureStatusTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPlugOptModTemperatureStatus"))
)
if mibBuilder.loadTexts:
    rcPlugOptModTemperatureStatusTrap.setStatus(
        "current"
    )

rcPlugOptModVoltageStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 90)
)
rcPlugOptModVoltageStatusTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPlugOptModVoltageStatus"))
)
if mibBuilder.loadTexts:
    rcPlugOptModVoltageStatusTrap.setStatus(
        "current"
    )

rcPlugOptModBiasStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 91)
)
rcPlugOptModBiasStatusTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPlugOptModBiasStatus"))
)
if mibBuilder.loadTexts:
    rcPlugOptModBiasStatusTrap.setStatus(
        "current"
    )

rcPlugOptModTxPowerStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 92)
)
rcPlugOptModTxPowerStatusTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPlugOptModTxPowerStatus"))
)
if mibBuilder.loadTexts:
    rcPlugOptModTxPowerStatusTrap.setStatus(
        "current"
    )

rcPlugOptModRxPowerStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 93)
)
rcPlugOptModRxPowerStatusTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPlugOptModRxPowerStatus"))
)
if mibBuilder.loadTexts:
    rcPlugOptModRxPowerStatusTrap.setStatus(
        "current"
    )

rcPlugOptModAux1StatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 94)
)
rcPlugOptModAux1StatusTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPlugOptModAux1Monitoring"),
        ("RAPID-CITY", "rcPlugOptModAux1Status"))
)
if mibBuilder.loadTexts:
    rcPlugOptModAux1StatusTrap.setStatus(
        "current"
    )

rcPlugOptModAux2StatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 95)
)
rcPlugOptModAux2StatusTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPlugOptModAux2Monitoring"),
        ("RAPID-CITY", "rcPlugOptModAux2Status"))
)
if mibBuilder.loadTexts:
    rcPlugOptModAux2StatusTrap.setStatus(
        "current"
    )

rcnMaxRouteWarnClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 110)
)
rcnMaxRouteWarnClear.setObjects(
    ("RAPID-CITY", "rcVrfName")
)
if mibBuilder.loadTexts:
    rcnMaxRouteWarnClear.setStatus(
        "current"
    )

rcnMaxRouteWarnSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 111)
)
rcnMaxRouteWarnSet.setObjects(
    ("RAPID-CITY", "rcVrfName")
)
if mibBuilder.loadTexts:
    rcnMaxRouteWarnSet.setStatus(
        "current"
    )

rcnMaxRouteDropClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 112)
)
rcnMaxRouteDropClear.setObjects(
    ("RAPID-CITY", "rcVrfName")
)
if mibBuilder.loadTexts:
    rcnMaxRouteDropClear.setStatus(
        "current"
    )

rcnMaxRouteDropSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 113)
)
rcnMaxRouteDropSet.setObjects(
    ("RAPID-CITY", "rcVrfName")
)
if mibBuilder.loadTexts:
    rcnMaxRouteDropSet.setStatus(
        "current"
    )

rcnMstpNewCistRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 117)
)
rcnMstpNewCistRoot.setObjects(
    ("RAPID-CITY", "rcStgBridgeAddress")
)
if mibBuilder.loadTexts:
    rcnMstpNewCistRoot.setStatus(
        "current"
    )

rcnMstpNewMstiRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 118)
)
rcnMstpNewMstiRoot.setObjects(
      *(("RAPID-CITY", "rcStgBridgeAddress"),
        ("RAPID-CITY", "rcStgId"))
)
if mibBuilder.loadTexts:
    rcnMstpNewMstiRoot.setStatus(
        "current"
    )

rcnMstpNewCistRegionalRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 119)
)
rcnMstpNewCistRegionalRoot.setObjects(
    ("RAPID-CITY", "rcStgBridgeAddress")
)
if mibBuilder.loadTexts:
    rcnMstpNewCistRegionalRoot.setStatus(
        "current"
    )

rcnRstpNewRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 120)
)
rcnRstpNewRoot.setObjects(
    ("RAPID-CITY", "rcStgBridgeAddress")
)
if mibBuilder.loadTexts:
    rcnRstpNewRoot.setStatus(
        "current"
    )

rcnRsmltEdgePeerModified = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 124)
)
rcnRsmltEdgePeerModified.setObjects(
    ("RAPID-CITY", "rcVlanName")
)
if mibBuilder.loadTexts:
    rcnRsmltEdgePeerModified.setStatus(
        "current"
    )

rcnTmuxParityError = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 165)
)
rcnTmuxParityError.setObjects(
    ("RAPID-CITY", "rc2kDeviceGlobalSlot")
)
if mibBuilder.loadTexts:
    rcnTmuxParityError.setStatus(
        "current"
    )

rcnChasPowerSupplyNoRedundancy = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 167)
)
if mibBuilder.loadTexts:
    rcnChasPowerSupplyNoRedundancy.setStatus(
        "current"
    )

rcnChasPowerSupplyRedundancy = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 168)
)
if mibBuilder.loadTexts:
    rcnChasPowerSupplyRedundancy.setStatus(
        "current"
    )

rcnLicenseTrialPeriodExpired = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 171)
)
if mibBuilder.loadTexts:
    rcnLicenseTrialPeriodExpired.setStatus(
        "current"
    )

rcnLicenseTrialPeriodExpiry = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 172)
)
rcnLicenseTrialPeriodExpiry.setObjects(
    ("RAPID-CITY", "rcSysLicenseTrialDaysLeft")
)
if mibBuilder.loadTexts:
    rcnLicenseTrialPeriodExpiry.setStatus(
        "current"
    )

rcnVrfUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 173)
)
rcnVrfUp.setObjects(
      *(("RAPID-CITY", "rcVrfName"),
        ("RAPID-CITY", "rcVrfOperStatus"))
)
if mibBuilder.loadTexts:
    rcnVrfUp.setStatus(
        "current"
    )

rcnVrfDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 174)
)
rcnVrfDown.setObjects(
      *(("RAPID-CITY", "rcVrfName"),
        ("RAPID-CITY", "rcVrfOperStatus"))
)
if mibBuilder.loadTexts:
    rcnVrfDown.setStatus(
        "current"
    )

rcnMrouteIngressThresholdExceeded = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 175)
)
rcnMrouteIngressThresholdExceeded.setObjects(
      *(("RAPID-CITY", "rcIpResourceUsageGlobalIngressRecInUse"),
        ("RAPID-CITY", "rcIpResourceUsageGlobalIngressThreshold"))
)
if mibBuilder.loadTexts:
    rcnMrouteIngressThresholdExceeded.setStatus(
        "current"
    )

rcnMrouteEgressThresholdExceeded = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 176)
)
rcnMrouteEgressThresholdExceeded.setObjects(
      *(("RAPID-CITY", "rcIpResourceUsageGlobalEgressRecInUse"),
        ("RAPID-CITY", "rcIpResourceUsageGlobalEgressThreshold"))
)
if mibBuilder.loadTexts:
    rcnMrouteEgressThresholdExceeded.setStatus(
        "current"
    )

rcnRemoteMirroringStatus = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 177)
)
rcnRemoteMirroringStatus.setObjects(
      *(("RAPID-CITY", "rcPortRemoteMirroringIndex"),
        ("RAPID-CITY", "rcPortRemoteMirroringEnable"),
        ("RAPID-CITY", "rcPortRemoteMirroringMode"))
)
if mibBuilder.loadTexts:
    rcnRemoteMirroringStatus.setStatus(
        "current"
    )

rcnMaxMrouteWarnSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 178)
)
rcnMaxMrouteWarnSet.setObjects(
    ("RAPID-CITY", "rcVrfName")
)
if mibBuilder.loadTexts:
    rcnMaxMrouteWarnSet.setStatus(
        "current"
    )

rcnMaxMrouteDropSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 179)
)
rcnMaxMrouteDropSet.setObjects(
    ("RAPID-CITY", "rcVrfName")
)
if mibBuilder.loadTexts:
    rcnMaxMrouteDropSet.setStatus(
        "current"
    )

rcnMaxMrouteWarnClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 180)
)
rcnMaxMrouteWarnClear.setObjects(
    ("RAPID-CITY", "rcVrfName")
)
if mibBuilder.loadTexts:
    rcnMaxMrouteWarnClear.setStatus(
        "current"
    )

rcnMaxMrouteDropClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 181)
)
rcnMaxMrouteDropClear.setObjects(
    ("RAPID-CITY", "rcVrfName")
)
if mibBuilder.loadTexts:
    rcnMaxMrouteDropClear.setStatus(
        "current"
    )

rcnAggLinkStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 182)
)
rcnAggLinkStateChange.setObjects(
      *(("RAPID-CITY", "rcMltId"),
        ("RAPID-CITY", "rcMltAggTrapEvent"))
)
if mibBuilder.loadTexts:
    rcnAggLinkStateChange.setStatus(
        "current"
    )

rcnBfdSessExceedThreshold = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 183)
)
rcnBfdSessExceedThreshold.setObjects(
      *(("RAPID-CITY", "rcBfdTmpSessDiscriminator"),
        ("RAPID-CITY", "rcBfdTmpSessAddr"))
)
if mibBuilder.loadTexts:
    rcnBfdSessExceedThreshold.setStatus(
        "current"
    )

rcnBfdStatusChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 184)
)
rcnBfdStatusChange.setObjects(
      *(("RAPID-CITY", "rcBfdTmpSessDiscriminator"),
        ("RAPID-CITY", "rcBfdTmpSessRemoteDiscr"),
        ("RAPID-CITY", "rcBfdTmpSessAddr"),
        ("RAPID-CITY", "rcBfdTmpSessState"),
        ("RAPID-CITY", "rcBfdTmpSessState"))
)
if mibBuilder.loadTexts:
    rcnBfdStatusChange.setStatus(
        "current"
    )

rcnChasPowerSupplyRunningLow = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 185)
)
if mibBuilder.loadTexts:
    rcnChasPowerSupplyRunningLow.setStatus(
        "current"
    )

rcnIsisPlsbMetricMismatchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 192)
)
rcnIsisPlsbMetricMismatchTrap.setObjects(
      *(("RAPID-CITY", "rcIsisLocalLspId"),
        ("RAPID-CITY", "rcIsisLocall1Metric"),
        ("RAPID-CITY", "rcIsisNgbLspId"),
        ("RAPID-CITY", "rcIsisNgbl1Metric"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisTrapIndicator"),
        ("RAPID-CITY", "rcIsisLocalHostName"),
        ("RAPID-CITY", "rcIsisNgbHostName"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbMetricMismatchTrap.setStatus(
        "current"
    )

rcnIsisPlsbDuplicateSysidTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 193)
)
rcnIsisPlsbDuplicateSysidTrap.setObjects(
      *(("RAPID-CITY", "rcIsisLocalSysId"),
        ("RAPID-CITY", "rcIsisLocalInterface"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisTrapIndicator"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbDuplicateSysidTrap.setStatus(
        "current"
    )

rcnIsisPlsbLsdbUpdateTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 194)
)
rcnIsisPlsbLsdbUpdateTrap.setObjects(
    ("RAPID-CITY", "rcIsisPlsbTrapType")
)
if mibBuilder.loadTexts:
    rcnIsisPlsbLsdbUpdateTrap.setStatus(
        "current"
    )

rcnChasFanCoolingLow = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 196)
)
rcnChasFanCoolingLow.setObjects(
      *(("RAPID-CITY", "rcChasFanOperStatus"),
        ("RAPID-CITY", "rcChasFanType"),
        ("RAPID-CITY", "rcErrorLevel"),
        ("RAPID-CITY", "rcErrorText"))
)
if mibBuilder.loadTexts:
    rcnChasFanCoolingLow.setStatus(
        "current"
    )

rcnSmpFtpFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 205)
)
if mibBuilder.loadTexts:
    rcnSmpFtpFail.setStatus(
        "current"
    )

rcnSmpLogFileDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 206)
)
if mibBuilder.loadTexts:
    rcnSmpLogFileDeleted.setStatus(
        "current"
    )

rcnPimMaxInterfaceWarnSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 213)
)
if mibBuilder.loadTexts:
    rcnPimMaxInterfaceWarnSet.setStatus(
        "current"
    )

rcnPimMaxNeighborsWarnSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 214)
)
if mibBuilder.loadTexts:
    rcnPimMaxNeighborsWarnSet.setStatus(
        "current"
    )

rcnPimMaxPassiveInterfaceWarnSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 215)
)
if mibBuilder.loadTexts:
    rcnPimMaxPassiveInterfaceWarnSet.setStatus(
        "current"
    )

rcnLegacyCardDetected = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 265)
)
rcnLegacyCardDetected.setObjects(
    ("RAPID-CITY", "rc2kCardIndex")
)
if mibBuilder.loadTexts:
    rcnLegacyCardDetected.setStatus(
        "current"
    )

rcnPrFilterRspMemoryFull = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 266)
)
rcnPrFilterRspMemoryFull.setObjects(
      *(("RAPID-CITY", "rcPrFilterAclId"),
        ("RAPID-CITY", "rc2kCardIndex"))
)
if mibBuilder.loadTexts:
    rcnPrFilterRspMemoryFull.setStatus(
        "current"
    )

rcnPrFilterStatsCntExst = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 267)
)
rcnPrFilterStatsCntExst.setObjects(
      *(("RAPID-CITY", "rcPrFilterAclId"),
        ("RAPID-CITY", "rc2kCardIndex"))
)
if mibBuilder.loadTexts:
    rcnPrFilterStatsCntExst.setStatus(
        "current"
    )

rcnIsisPlsbBvidMismatchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 278)
)
rcnIsisPlsbBvidMismatchTrap.setObjects(
      *(("RAPID-CITY", "rcIsisLocalSysId"),
        ("RAPID-CITY", "rcIsisLocalPrimaryBvid"),
        ("RAPID-CITY", "rcIsisLocalPrimaryTieBrkAlg"),
        ("RAPID-CITY", "rcIsisLocalSecondaryBvid"),
        ("RAPID-CITY", "rcIsisLocalSecondaryTieBrkAlg"),
        ("RAPID-CITY", "rcIsisNgbSysId"),
        ("RAPID-CITY", "rcIsisNgbPrimaryBvid"),
        ("RAPID-CITY", "rcIsisNgbPrimaryTieBrkAlg"),
        ("RAPID-CITY", "rcIsisNgbSecondaryBvid"),
        ("RAPID-CITY", "rcIsisNgbSecondaryTieBrkAlg"),
        ("RAPID-CITY", "rcIsisLocalBvidCounter"),
        ("RAPID-CITY", "rcIsisNgbBvidCounter"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisTrapIndicator"),
        ("RAPID-CITY", "rcIsisNgbHostName"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbBvidMismatchTrap.setStatus(
        "current"
    )

rcnIsisPlsbSmltVirtBmacMismatchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 279)
)
rcnIsisPlsbSmltVirtBmacMismatchTrap.setObjects(
      *(("RAPID-CITY", "rcIsisLocalVirtualBmac"),
        ("RAPID-CITY", "rcIsisPeerVirtualBmac"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisTrapIndicator"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbSmltVirtBmacMismatchTrap.setStatus(
        "current"
    )

rcnIsisPlsbSmltPeerBmacMismatchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 280)
)
rcnIsisPlsbSmltPeerBmacMismatchTrap.setObjects(
      *(("RAPID-CITY", "rcIsisSysId"),
        ("RAPID-CITY", "rcIsisSmltPeerSysId"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisTrapIndicator"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbSmltPeerBmacMismatchTrap.setStatus(
        "current"
    )

rcnIsisPlsbAdjStateTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 281)
)
rcnIsisPlsbAdjStateTrap.setObjects(
      *(("RAPID-CITY", "rcIsisNgbSysId"),
        ("RAPID-CITY", "rcIsisLocalInterface"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisAdjState"),
        ("RAPID-CITY", "rcIsisNgbHostName"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbAdjStateTrap.setStatus(
        "current"
    )

rcnIsisPlsbDuplicateNnameTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 282)
)
rcnIsisPlsbDuplicateNnameTrap.setObjects(
      *(("RAPID-CITY", "rcIsisNgbNickname"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisTrapIndicator"),
        ("RAPID-CITY", "rcIsisNgbSysId"),
        ("RAPID-CITY", "rcIsisDuplicateNnameCounter"),
        ("RAPID-CITY", "rcIsisNgbHostName"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbDuplicateNnameTrap.setStatus(
        "current"
    )

rcnIsisPlsbSmltSplitBebMismatchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 283)
)
rcnIsisPlsbSmltSplitBebMismatchTrap.setObjects(
      *(("RAPID-CITY", "rcIsisLocalSmltSplitBeb"),
        ("RAPID-CITY", "rcIsisPeerSmltSplitBeb"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisTrapIndicator"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbSmltSplitBebMismatchTrap.setStatus(
        "current"
    )

rcnIsisPlsbMultiLinkAdjTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 284)
)
rcnIsisPlsbMultiLinkAdjTrap.setObjects(
      *(("RAPID-CITY", "rcIsisNgbSysId"),
        ("RAPID-CITY", "rcIsisLocalInterface"),
        ("RAPID-CITY", "rcIsisPrevInterface"),
        ("RAPID-CITY", "rcIsisPlsbTrapType"),
        ("RAPID-CITY", "rcIsisNgbHostName"),
        ("RAPID-CITY", "rcIsisTrapIndicator"))
)
if mibBuilder.loadTexts:
    rcnIsisPlsbMultiLinkAdjTrap.setStatus(
        "current"
    )

rcnVLacpFlapDetectShutDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 0, 289)
)
rcnVLacpFlapDetectShutDown.setObjects(
    ("RAPID-CITY", "rcPortIndex")
)
if mibBuilder.loadTexts:
    rcnVLacpFlapDetectShutDown.setStatus(
        "current"
    )

rcCardDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 1)
)
rcCardDown.setObjects(
      *(("RAPID-CITY", "rcCardIndex"),
        ("RAPID-CITY", "rcCardAdminStatus"),
        ("RAPID-CITY", "rcCardOperStatus"))
)
if mibBuilder.loadTexts:
    rcCardDown.setStatus(
        "current"
    )

rcCardUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 2)
)
rcCardUp.setObjects(
      *(("RAPID-CITY", "rcCardIndex"),
        ("RAPID-CITY", "rcCardAdminStatus"),
        ("RAPID-CITY", "rcCardOperStatus"))
)
if mibBuilder.loadTexts:
    rcCardUp.setStatus(
        "current"
    )

rcErrorNotification = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 3)
)
rcErrorNotification.setObjects(
      *(("RAPID-CITY", "rcErrorLevel"),
        ("RAPID-CITY", "rcErrorCode"),
        ("RAPID-CITY", "rcErrorText"))
)
if mibBuilder.loadTexts:
    rcErrorNotification.setStatus(
        "current"
    )

rcStpNewRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 4)
)
rcStpNewRoot.setObjects(
    ("RAPID-CITY", "rcStgId")
)
if mibBuilder.loadTexts:
    rcStpNewRoot.setStatus(
        "current"
    )

rcStpTopologyChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 5)
)
rcStpTopologyChange.setObjects(
      *(("RAPID-CITY", "rcStgId"),
        ("RAPID-CITY", "rcPortIndex"))
)
if mibBuilder.loadTexts:
    rcStpTopologyChange.setStatus(
        "current"
    )

rcChasPowerSupplyDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 6)
)
rcChasPowerSupplyDown.setObjects(
      *(("RAPID-CITY", "rcChasPowerSupplyId"),
        ("RAPID-CITY", "rcChasPowerSupplyOperStatus"))
)
if mibBuilder.loadTexts:
    rcChasPowerSupplyDown.setStatus(
        "current"
    )

rcChasFanDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 7)
)
rcChasFanDown.setObjects(
      *(("RAPID-CITY", "rcChasFanId"),
        ("RAPID-CITY", "rcChasFanOperStatus"))
)
if mibBuilder.loadTexts:
    rcChasFanDown.setStatus(
        "current"
    )

rcLinkOscillation = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 8)
)
rcLinkOscillation.setObjects(
    ("RAPID-CITY", "rcPortIndex")
)
if mibBuilder.loadTexts:
    rcLinkOscillation.setStatus(
        "current"
    )

rcMacViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 9)
)
rcMacViolation.setObjects(
      *(("RAPID-CITY", "rcErrorText"),
        ("RAPID-CITY", "rcPortIndex"))
)
if mibBuilder.loadTexts:
    rcMacViolation.setStatus(
        "current"
    )

rcSonetTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 10)
)
rcSonetTrap.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcPosSonetTrapType"),
        ("RAPID-CITY", "rcPosSonetTrapIndication"))
)
if mibBuilder.loadTexts:
    rcSonetTrap.setStatus(
        "current"
    )

rc2kCardDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 11)
)
rc2kCardDown.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rc2kCardFrontAdminStatus"),
        ("RAPID-CITY", "rc2kCardFrontOperStatus"))
)
if mibBuilder.loadTexts:
    rc2kCardDown.setStatus(
        "current"
    )

rc2kCardUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 12)
)
rc2kCardUp.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rc2kCardFrontAdminStatus"),
        ("RAPID-CITY", "rc2kCardFrontOperStatus"))
)
if mibBuilder.loadTexts:
    rc2kCardUp.setStatus(
        "current"
    )

rc2kTemperature = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 13)
)
rc2kTemperature.setObjects(
    ("RAPID-CITY", "rc2kChassisTemperature")
)
if mibBuilder.loadTexts:
    rc2kTemperature.setStatus(
        "current"
    )

rcChasPowerSupplyUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 14)
)
rcChasPowerSupplyUp.setObjects(
      *(("RAPID-CITY", "rcChasPowerSupplyId"),
        ("RAPID-CITY", "rcChasPowerSupplyOperStatus"))
)
if mibBuilder.loadTexts:
    rcChasPowerSupplyUp.setStatus(
        "current"
    )

rc2kAtmPvcLinkStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 15)
)
rc2kAtmPvcLinkStateChange.setObjects(
      *(("RAPID-CITY", "rc2kAtmPvcIfIndex"),
        ("RAPID-CITY", "rc2kAtmPvcVpi"),
        ("RAPID-CITY", "rc2kAtmPvcVci"),
        ("RAPID-CITY", "rc2kAtmPvcOamVcStatus"))
)
if mibBuilder.loadTexts:
    rc2kAtmPvcLinkStateChange.setStatus(
        "current"
    )

rcStpTCN = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 16)
)
rcStpTCN.setObjects(
      *(("RAPID-CITY", "rcStgId"),
        ("RAPID-CITY", "rcPortIndex"),
        ("RAPID-CITY", "rcStgBridgeAddress"))
)
if mibBuilder.loadTexts:
    rcStpTCN.setStatus(
        "current"
    )

rcSmltIstLinkUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 17)
)
if mibBuilder.loadTexts:
    rcSmltIstLinkUp.setStatus(
        "current"
    )

rcSmltIstLinkDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 18)
)
if mibBuilder.loadTexts:
    rcSmltIstLinkDown.setStatus(
        "current"
    )

rcSmltLinkUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 19)
)
rcSmltLinkUp.setObjects(
    ("RAPID-CITY", "rcMltSmltId")
)
if mibBuilder.loadTexts:
    rcSmltLinkUp.setStatus(
        "current"
    )

rcSmltLinkDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 20)
)
rcSmltLinkDown.setObjects(
    ("RAPID-CITY", "rcMltSmltId")
)
if mibBuilder.loadTexts:
    rcSmltLinkDown.setStatus(
        "current"
    )

rcChasFanUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 21)
)
rcChasFanUp.setObjects(
      *(("RAPID-CITY", "rcChasFanId"),
        ("RAPID-CITY", "rcChasFanOperStatus"))
)
if mibBuilder.loadTexts:
    rcChasFanUp.setStatus(
        "current"
    )

rcPasswordChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 22)
)
rcPasswordChange.setObjects(
      *(("RAPID-CITY", "rcCliPasswordChange"),
        ("RAPID-CITY", "rcCliPassChangeResult"))
)
if mibBuilder.loadTexts:
    rcPasswordChange.setStatus(
        "current"
    )

rcEmError = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 23)
)
rcEmError.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rcChasEmModeError"))
)
if mibBuilder.loadTexts:
    rcEmError.setStatus(
        "current"
    )

rcPcmciaCardRemoved = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 25)
)
if mibBuilder.loadTexts:
    rcPcmciaCardRemoved.setStatus(
        "current"
    )

rcSmartCpldTimerFired = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 26)
)
rcSmartCpldTimerFired.setObjects(
    ("RAPID-CITY", "rc2kCardIndex")
)
if mibBuilder.loadTexts:
    rcSmartCpldTimerFired.setStatus(
        "current"
    )

rcCardCpldNotUpDate = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 27)
)
rcCardCpldNotUpDate.setObjects(
    ("RAPID-CITY", "rc2kCardIndex")
)
if mibBuilder.loadTexts:
    rcCardCpldNotUpDate.setStatus(
        "current"
    )

rcIgapLogFileFull = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 28)
)
if mibBuilder.loadTexts:
    rcIgapLogFileFull.setStatus(
        "current"
    )

rcCpLimitShutDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 29)
)
rcCpLimitShutDown.setObjects(
      *(("RAPID-CITY", "rcPortIndex"),
        ("IF-MIB", "ifAdminStatus"),
        ("IF-MIB", "ifOperStatus"),
        ("RAPID-CITY", "rcPortCpLimitShutDown"))
)
if mibBuilder.loadTexts:
    rcCpLimitShutDown.setStatus(
        "current"
    )

rcSshServerEnabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 30)
)
rcSshServerEnabled.setObjects(
    ("RAPID-CITY", "rcSshGlobalPort")
)
if mibBuilder.loadTexts:
    rcSshServerEnabled.setStatus(
        "current"
    )

rcSshServerDisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 31)
)
rcSshServerDisabled.setObjects(
    ("RAPID-CITY", "rcSshGlobalPort")
)
if mibBuilder.loadTexts:
    rcSshServerDisabled.setStatus(
        "current"
    )

rcSshSessionLogin = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 32)
)
rcSshSessionLogin.setObjects(
    ("RAPID-CITY", "rcSshGlobalHostIpAddr")
)
if mibBuilder.loadTexts:
    rcSshSessionLogin.setStatus(
        "current"
    )

rcSshSessionLogout = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 33)
)
rcSshSessionLogout.setObjects(
    ("RAPID-CITY", "rcSshGlobalHostIpAddr")
)
if mibBuilder.loadTexts:
    rcSshSessionLogout.setStatus(
        "current"
    )

rcSshUnauthorizedAccess = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 34)
)
rcSshUnauthorizedAccess.setObjects(
    ("RAPID-CITY", "rcSshGlobalHostIpAddr")
)
if mibBuilder.loadTexts:
    rcSshUnauthorizedAccess.setStatus(
        "current"
    )

rcHaCpuState = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 35)
)
rcHaCpuState.setObjects(
      *(("RAPID-CITY", "rc2kCardIndex"),
        ("RAPID-CITY", "rcL2RedundancyHaCpuState"))
)
if mibBuilder.loadTexts:
    rcHaCpuState.setStatus(
        "current"
    )

rcInsufficientMemory = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 36)
)
rcInsufficientMemory.setObjects(
    ("RAPID-CITY", "rc2kCardIndex")
)
if mibBuilder.loadTexts:
    rcInsufficientMemory.setStatus(
        "current"
    )

rcSaveConfigAction = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 37)
)
rcSaveConfigAction.setObjects(
    ("RAPID-CITY", "rcSysActionL1")
)
if mibBuilder.loadTexts:
    rcSaveConfigAction.setStatus(
        "current"
    )

rcLoopDetectOnPort = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 38)
)
rcLoopDetectOnPort.setObjects(
      *(("RAPID-CITY", "rcVlanId"),
        ("RAPID-CITY", "rcPortIndex"))
)
if mibBuilder.loadTexts:
    rcLoopDetectOnPort.setStatus(
        "current"
    )

rcbgpEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 39)
)
rcbgpEstablished.setObjects(
      *(("RAPID-CITY", "rcIpBgpPeerIpAddress"),
        ("RAPID-CITY", "rcIpBgpPeerLastError"),
        ("RAPID-CITY", "rcIpBgpPeerState"))
)
if mibBuilder.loadTexts:
    rcbgpEstablished.setStatus(
        "current"
    )

rcbgpBackwardTransition = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 40)
)
rcbgpBackwardTransition.setObjects(
      *(("RAPID-CITY", "rcIpBgpPeerIpAddress"),
        ("RAPID-CITY", "rcIpBgpPeerLastError"),
        ("RAPID-CITY", "rcIpBgpPeerState"))
)
if mibBuilder.loadTexts:
    rcbgpBackwardTransition.setStatus(
        "current"
    )

rcAggLinkUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 41)
)
rcAggLinkUp.setObjects(
    ("RAPID-CITY", "rcMltId")
)
if mibBuilder.loadTexts:
    rcAggLinkUp.setStatus(
        "current"
    )

rcAggLinkDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 42)
)
rcAggLinkDown.setObjects(
    ("RAPID-CITY", "rcMltId")
)
if mibBuilder.loadTexts:
    rcAggLinkDown.setStatus(
        "current"
    )

rcIgmpNewGroupMember = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 43)
)
rcIgmpNewGroupMember.setObjects(
      *(("RAPID-CITY", "rcIgmpGroupIfIndex"),
        ("RAPID-CITY", "rcIgmpGroupIpAddress"),
        ("RAPID-CITY", "rcIgmpGroupInPort"),
        ("RAPID-CITY", "rcIgmpGroupMembers"))
)
if mibBuilder.loadTexts:
    rcIgmpNewGroupMember.setStatus(
        "current"
    )

rcIgmpLossGroupMember = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 44)
)
rcIgmpLossGroupMember.setObjects(
      *(("RAPID-CITY", "rcIgmpGroupMembers"),
        ("RAPID-CITY", "rcIgmpGroupIpAddress"),
        ("RAPID-CITY", "rcIgmpGroupInPort"),
        ("RAPID-CITY", "rcIgmpGroupIfIndex"))
)
if mibBuilder.loadTexts:
    rcIgmpLossGroupMember.setStatus(
        "current"
    )

rcIgmpNewQuerier = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 45)
)
rcIgmpNewQuerier.setObjects(
      *(("RAPID-CITY", "rcIgmpInterfaceExtnIfIndex"),
        ("IGMP-STD-MIB", "igmpInterfaceQuerier"))
)
if mibBuilder.loadTexts:
    rcIgmpNewQuerier.setStatus(
        "current"
    )

rcIgmpQuerierChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 46)
)
rcIgmpQuerierChange.setObjects(
      *(("RAPID-CITY", "rcIgmpInterfaceExtnIfIndex"),
        ("RAPID-CITY", "rcIgmpInterfaceExtnNewQuerier"),
        ("IGMP-STD-MIB", "igmpInterfaceQuerier"))
)
if mibBuilder.loadTexts:
    rcIgmpQuerierChange.setStatus(
        "current"
    )

rcDvmrpIfStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 47)
)
rcDvmrpIfStateChange.setObjects(
      *(("DVMRP-MIB", "dvmrpInterfaceIfIndex"),
        ("DVMRP-MIB", "dvmrpInterfaceOperState"))
)
if mibBuilder.loadTexts:
    rcDvmrpIfStateChange.setStatus(
        "current"
    )

rcDvmrpNewNbrChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 48)
)
rcDvmrpNewNbrChange.setObjects(
      *(("DVMRP-MIB", "dvmrpNeighborIfIndex"),
        ("DVMRP-MIB", "dvmrpNeighborAddress"))
)
if mibBuilder.loadTexts:
    rcDvmrpNewNbrChange.setStatus(
        "current"
    )

rcDvmrpNbrLossChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 21, 49)
)
rcDvmrpNbrLossChange.setObjects(
      *(("DVMRP-MIB", "dvmrpNeighborIfIndex"),
        ("DVMRP-MIB", "dvmrpNeighborAddress"))
)
if mibBuilder.loadTexts:
    rcDvmrpNbrLossChange.setStatus(
        "current"
    )

rcnSlppPortDownEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 0, 1)
)
rcnSlppPortDownEvent.setObjects(
      *(("RAPID-CITY", "rcSlppPortSlppEnable"),
        ("RAPID-CITY", "rcSlppVlanSlppEnable"),
        ("RAPID-CITY", "rcSlppIncomingVlanId"),
        ("RAPID-CITY", "rcSlppSrcMacAddress"))
)
if mibBuilder.loadTexts:
    rcnSlppPortDownEvent.setStatus(
        "obsolete"
    )

rcnSlppPortDownEventNew = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 64, 1, 0, 2)
)
rcnSlppPortDownEventNew.setObjects(
      *(("RAPID-CITY", "rcSlppRxPortIndex"),
        ("RAPID-CITY", "rcSlppRxVlanId"),
        ("RAPID-CITY", "rcSlppIncomingVlanId"),
        ("RAPID-CITY", "rcSlppSrcMacAddress"))
)
if mibBuilder.loadTexts:
    rcnSlppPortDownEventNew.setStatus(
        "current"
    )

rcVrrpTrapStateTransition = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 73, 1, 2, 1)
)
rcVrrpTrapStateTransition.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("RAPID-CITY", "rcVrrpTrapStateTransitionType"),
        ("RAPID-CITY", "rcVrrpTrapStateTransitionCause"),
        ("RAPID-CITY", "rcVrrpOperVrId"),
        ("RAPID-CITY", "rcVrrpOperIpAddr"),
        ("RAPID-CITY", "rcVrrpOperMasterIpAddr"))
)
if mibBuilder.loadTexts:
    rcVrrpTrapStateTransition.setStatus(
        "current"
    )

rcnMsdpMaxSACacheWarnSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 1)
)
rcnMsdpMaxSACacheWarnSet.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("RAPID-CITY", "rcMsdpSACacheType"))
)
if mibBuilder.loadTexts:
    rcnMsdpMaxSACacheWarnSet.setStatus(
        "current"
    )

rcnMsdpMaxSACacheWarnClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 2)
)
rcnMsdpMaxSACacheWarnClear.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("RAPID-CITY", "rcMsdpSACacheType"))
)
if mibBuilder.loadTexts:
    rcnMsdpMaxSACacheWarnClear.setStatus(
        "current"
    )

rcnMsdpMaxSACacheErrorSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 3)
)
rcnMsdpMaxSACacheErrorSet.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("RAPID-CITY", "rcMsdpSACacheType"))
)
if mibBuilder.loadTexts:
    rcnMsdpMaxSACacheErrorSet.setStatus(
        "current"
    )

rcnMsdpMaxSACacheErrorClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 4)
)
rcnMsdpMaxSACacheErrorClear.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("RAPID-CITY", "rcMsdpSACacheType"))
)
if mibBuilder.loadTexts:
    rcnMsdpMaxSACacheErrorClear.setStatus(
        "current"
    )

rcnMsdpMaxPeerSACacheWarnSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 5)
)
rcnMsdpMaxPeerSACacheWarnSet.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("RAPID-CITY", "rcMsdpPeerSALimit"))
)
if mibBuilder.loadTexts:
    rcnMsdpMaxPeerSACacheWarnSet.setStatus(
        "current"
    )

rcnMsdpMaxPeerSACacheWarnClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 6)
)
rcnMsdpMaxPeerSACacheWarnClear.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("RAPID-CITY", "rcMsdpPeerSALimit"))
)
if mibBuilder.loadTexts:
    rcnMsdpMaxPeerSACacheWarnClear.setStatus(
        "current"
    )

rcnMsdpMaxPeerSACacheErrorSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 7)
)
rcnMsdpMaxPeerSACacheErrorSet.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("RAPID-CITY", "rcMsdpPeerSALimit"))
)
if mibBuilder.loadTexts:
    rcnMsdpMaxPeerSACacheErrorSet.setStatus(
        "current"
    )

rcnMsdpMaxPeerSACacheErrorClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 8)
)
rcnMsdpMaxPeerSACacheErrorClear.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("RAPID-CITY", "rcMsdpPeerSALimit"))
)
if mibBuilder.loadTexts:
    rcnMsdpMaxPeerSACacheErrorClear.setStatus(
        "current"
    )

rcnMsdpEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 9)
)
rcnMsdpEstablished.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("MSDP-MIB", "msdpPeerFsmEstablishedTransitions"))
)
if mibBuilder.loadTexts:
    rcnMsdpEstablished.setStatus(
        "current"
    )

rcnMsdpBackwardTransition = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 80, 1, 0, 10)
)
rcnMsdpBackwardTransition.setObjects(
      *(("RAPID-CITY", "rcMsdpVrfId"),
        ("MSDP-MIB", "msdpPeerState"))
)
if mibBuilder.loadTexts:
    rcnMsdpBackwardTransition.setStatus(
        "current"
    )

rcBfdTmpSessUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 0, 1)
)
rcBfdTmpSessUp.setObjects(
      *(("RAPID-CITY", "rcBfdTmpSessDiag"),
        ("RAPID-CITY", "rcBfdTmpSessDiag"))
)
if mibBuilder.loadTexts:
    rcBfdTmpSessUp.setStatus(
        "current"
    )

rcBfdTmpSessDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 81, 1, 0, 2)
)
rcBfdTmpSessDown.setObjects(
      *(("RAPID-CITY", "rcBfdTmpSessDiag"),
        ("RAPID-CITY", "rcBfdTmpSessDiag"))
)
if mibBuilder.loadTexts:
    rcBfdTmpSessDown.setStatus(
        "current"
    )

rcVrrpTmpTrapNewMaster = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 0, 1)
)
rcVrrpTmpTrapNewMaster.setObjects(
      *(("RAPID-CITY", "rcVrrpTmpOperationsMasterIpAddr"),
        ("RAPID-CITY", "rcVrrpTmpNewMasterReason"))
)
if mibBuilder.loadTexts:
    rcVrrpTmpTrapNewMaster.setStatus(
        "current"
    )

rcVrrpTmpTrapProtoError = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 1, 0, 3)
)
rcVrrpTmpTrapProtoError.setObjects(
    ("RAPID-CITY", "rcVrrpTmpTrapProtoErrReason")
)
if mibBuilder.loadTexts:
    rcVrrpTmpTrapProtoError.setStatus(
        "current"
    )

rcVrrpExtTrapStateTransition = NotificationType(
    (1, 3, 6, 1, 4, 1, 2272, 1, 206, 2, 2, 1)
)
rcVrrpExtTrapStateTransition.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("RAPID-CITY", "rcVrrpExtTrapStateTransitionType"),
        ("RAPID-CITY", "rcVrrpExtTrapStateTransitionCause"),
        ("RAPID-CITY", "rcVrrpExtOperationsVrId"),
        ("RAPID-CITY", "rcVrrpTmpOperationsPrimaryIpAddr"),
        ("RAPID-CITY", "rcVrrpTmpOperationsMasterIpAddr"))
)
if mibBuilder.loadTexts:
    rcVrrpExtTrapStateTransition.setStatus(
        "current"
    )


# Notifications groups


# Agent capabilities


# Module compliance

rcOspfv3Compliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 2272, 1, 67, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    rcOspfv3Compliance.setStatus(
        "current"
    )


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "RAPID-CITY",
    **{"BridgeId": BridgeId,
       "Timeout": Timeout,
       "EnableValue": EnableValue,
       "RcLongDisplayString": RcLongDisplayString,
       "InterfaceIndex": InterfaceIndex,
       "InterfaceIndexOrZero": InterfaceIndexOrZero,
       "PortSet": PortSet,
       "IdList": IdList,
       "VrfIdentifier": VrfIdentifier,
       "Ipv6NextHdr": Ipv6NextHdr,
       "KhiStatusValue": KhiStatusValue,
       "RcIpBgpTmpIdentifierTC": RcIpBgpTmpIdentifierTC,
       "RcIpBgpTmpAddressFamilyIdentifierTC": RcIpBgpTmpAddressFamilyIdentifierTC,
       "RcIpBgpTmpSubsequentAddressFamilyIdentifierTC": RcIpBgpTmpSubsequentAddressFamilyIdentifierTC,
       "RcBfdTmpSessIndexTC": RcBfdTmpSessIndexTC,
       "RcBfdTmpInterval": RcBfdTmpInterval,
       "RcBfdTmpDiag": RcBfdTmpDiag,
       "IpAddressOriginTC": IpAddressOriginTC,
       "IpAddressStatusTC": IpAddressStatusTC,
       "UpToRefreshInterval": UpToRefreshInterval,
       "RouterDeadRange": RouterDeadRange,
       "LaneSet": LaneSet,
       "IsisPlsbNodeNickName": IsisPlsbNodeNickName,
       "IsisSystemID": IsisSystemID,
       "VPNId": VPNId,
       "VrfRpTriggerBitCode": VrfRpTriggerBitCode,
       "IsisDefaultL1Metric": IsisDefaultL1Metric,
       "IsisWideL1Metric": IsisWideL1Metric,
       "IsisPlsbBvid": IsisPlsbBvid,
       "IsisPlsbBvidTieBrkAlg": IsisPlsbBvidTieBrkAlg,
       "CfmRelayActionFieldValue": CfmRelayActionFieldValue,
       "CfmIngressActionFieldValue": CfmIngressActionFieldValue,
       "CfmEgressActionFieldValue": CfmEgressActionFieldValue,
       "LldpPortIdSubtype": LldpPortIdSubtype,
       "LldpPortId": LldpPortId,
       "internet": internet,
       "rapidCity": rapidCity,
       "rcMgmt": rcMgmt,
       "rcSystem": rcSystem,
       "rcSysIpAddr": rcSysIpAddr,
       "rcSysNetMask": rcSysNetMask,
       "rcSysBroadcast": rcSysBroadcast,
       "rcSysCommReadWriteAll": rcSysCommReadWriteAll,
       "rcSysCommReadWrite": rcSysCommReadWrite,
       "rcSysCommReadOnly": rcSysCommReadOnly,
       "rcSysVersion": rcSysVersion,
       "rcSysAction": rcSysAction,
       "rcSysResult": rcSysResult,
       "rcSysLastChange": rcSysLastChange,
       "rcSysLastVlanChange": rcSysLastVlanChange,
       "rcSysLastStatisticsReset": rcSysLastStatisticsReset,
       "rcSysBufferUtil": rcSysBufferUtil,
       "rcSysBufferUtilPeak": rcSysBufferUtilPeak,
       "rcSysBufferUtilPeakTime": rcSysBufferUtilPeakTime,
       "rcSysNVRamSize": rcSysNVRamSize,
       "rcSysNVRamUsed": rcSysNVRamUsed,
       "rcSysLastSaveToNVRam": rcSysLastSaveToNVRam,
       "rcSysLastSaveToStandbyNVRam": rcSysLastSaveToStandbyNVRam,
       "rcSysCpuUtil": rcSysCpuUtil,
       "rcSysSwitchFabricUtil": rcSysSwitchFabricUtil,
       "rcSysRmonMemSize": rcSysRmonMemSize,
       "rcSysRmonEnable": rcSysRmonEnable,
       "rcSysRmonSaveConfig": rcSysRmonSaveConfig,
       "rcSysRmonTrapOption": rcSysRmonTrapOption,
       "rcSysSupportRouting": rcSysSupportRouting,
       "rcSysSupportWebServer": rcSysSupportWebServer,
       "rcSysLastIpAddrChange": rcSysLastIpAddrChange,
       "rcSysCommReadWriteLayer3": rcSysCommReadWriteLayer3,
       "rcSysCommReadWriteLayer2": rcSysCommReadWriteLayer2,
       "rcSysAccessPolicyEnable": rcSysAccessPolicyEnable,
       "rcSysDefaultRuntimeConfigFileName": rcSysDefaultRuntimeConfigFileName,
       "rcSysDefaultBootConfigFileName": rcSysDefaultBootConfigFileName,
       "rcSysConfigFileName": rcSysConfigFileName,
       "rcSysLastRunTimeConfigSave": rcSysLastRunTimeConfigSave,
       "rcSysLastRunTimeConfigSaveToSlave": rcSysLastRunTimeConfigSaveToSlave,
       "rcSysLastBootConfigSave": rcSysLastBootConfigSave,
       "rcSysLastBootConfigSaveOnSlave": rcSysLastBootConfigSaveOnSlave,
       "rcSysRmonUtilizationMethod": rcSysRmonUtilizationMethod,
       "rcSysCommReadWriteLayer1": rcSysCommReadWriteLayer1,
       "rcSysOtherBufferUtil": rcSysOtherBufferUtil,
       "rcSysOtherBufferUtilPeak": rcSysOtherBufferUtilPeak,
       "rcSysOtherBufferUtilPeakTime": rcSysOtherBufferUtilPeakTime,
       "rcSysOtherCpuUtil": rcSysOtherCpuUtil,
       "rcSysOtherSwitchFabricUtil": rcSysOtherSwitchFabricUtil,
       "rcSysDramSize": rcSysDramSize,
       "rcSysDramUsed": rcSysDramUsed,
       "rcSysDramFree": rcSysDramFree,
       "rcSysDramMaxBlockFree": rcSysDramMaxBlockFree,
       "rcSysVirtualIpAddr": rcSysVirtualIpAddr,
       "rcSysVirtualNetMask": rcSysVirtualNetMask,
       "rcSysReadWriteLevel": rcSysReadWriteLevel,
       "rcSysMTUSize": rcSysMTUSize,
       "rcSysClockSyncTime": rcSysClockSyncTime,
       "rcSysForceTrapSender": rcSysForceTrapSender,
       "rcSysMrouteStrLimit": rcSysMrouteStrLimit,
       "rcSysTrapRecvTable": rcSysTrapRecvTable,
       "rcSysTrapRecvEntry": rcSysTrapRecvEntry,
       "rcSysTrapRecvAddress": rcSysTrapRecvAddress,
       "rcSysTrapRecvVersion": rcSysTrapRecvVersion,
       "rcSysTrapRecvCommunity": rcSysTrapRecvCommunity,
       "rcSysTrapRecvSrcAddress": rcSysTrapRecvSrcAddress,
       "rcSysTrapRecvRowStatus": rcSysTrapRecvRowStatus,
       "rcSysAccessPolicyTable": rcSysAccessPolicyTable,
       "rcSysAccessPolicyEntry": rcSysAccessPolicyEntry,
       "rcSysAccessPolicyId": rcSysAccessPolicyId,
       "rcSysAccessPolicyName": rcSysAccessPolicyName,
       "rcSysAccessPolicyPolicyEnable": rcSysAccessPolicyPolicyEnable,
       "rcSysAccessPolicyMode": rcSysAccessPolicyMode,
       "rcSysAccessPolicyService": rcSysAccessPolicyService,
       "rcSysAccessPolicyPrecedence": rcSysAccessPolicyPrecedence,
       "rcSysAccessPolicyNetAddr": rcSysAccessPolicyNetAddr,
       "rcSysAccessPolicyNetMask": rcSysAccessPolicyNetMask,
       "rcSysAccessPolicyTrustedHostAddr": rcSysAccessPolicyTrustedHostAddr,
       "rcSysAccessPolicyTrustedHostUserName": rcSysAccessPolicyTrustedHostUserName,
       "rcSysAccessPolicyAccessLevel": rcSysAccessPolicyAccessLevel,
       "rcSysAccessPolicyLog": rcSysAccessPolicyLog,
       "rcSysAccessPolicyUsage": rcSysAccessPolicyUsage,
       "rcSysAccessPolicyRowStatus": rcSysAccessPolicyRowStatus,
       "rcSysAccessPolicyAccessStrict": rcSysAccessPolicyAccessStrict,
       "rcSysAccessPolicyNetInetAddrType": rcSysAccessPolicyNetInetAddrType,
       "rcSysAccessPolicyNetInetAddress": rcSysAccessPolicyNetInetAddress,
       "rcSysAccessPolicyNetInetAddrPrefixLen": rcSysAccessPolicyNetInetAddrPrefixLen,
       "rcSysAccessPolicyTrustedHostInetAddress": rcSysAccessPolicyTrustedHostInetAddress,
       "rcSysTrapSenderTable": rcSysTrapSenderTable,
       "rcSysTrapSenderEntry": rcSysTrapSenderEntry,
       "rcSysTrapSenderRecvAddress": rcSysTrapSenderRecvAddress,
       "rcSysTrapSenderSrcAddress": rcSysTrapSenderSrcAddress,
       "rcSysDnsServerListTable": rcSysDnsServerListTable,
       "rcSysDnsServerListEntry": rcSysDnsServerListEntry,
       "rcSysDnsServerListType": rcSysDnsServerListType,
       "rcSysDnsServerListIp": rcSysDnsServerListIp,
       "rcSysDnsServerListStatus": rcSysDnsServerListStatus,
       "rcSysDnsServerListRequestCount": rcSysDnsServerListRequestCount,
       "rcSysDnsServerListSuccessCount": rcSysDnsServerListSuccessCount,
       "rcSysDnsServerListRowStatus": rcSysDnsServerListRowStatus,
       "rcSysDnsServerListAddressType": rcSysDnsServerListAddressType,
       "rcSysDnsServerListAddress": rcSysDnsServerListAddress,
       "rcSysDnsHostTable": rcSysDnsHostTable,
       "rcSysDnsHostEntry": rcSysDnsHostEntry,
       "rcSysDnsHostData": rcSysDnsHostData,
       "rcSysDnsHostName": rcSysDnsHostName,
       "rcSysDnsHostIpAddress": rcSysDnsHostIpAddress,
       "rcSysDnsHostSource": rcSysDnsHostSource,
       "rcSysDnsHostAddressType": rcSysDnsHostAddressType,
       "rcSysDnsHostAddress": rcSysDnsHostAddress,
       "rcSysMsgLogFrequency": rcSysMsgLogFrequency,
       "rcSysMsgLogText": rcSysMsgLogText,
       "rcSysForceIpHdrSender": rcSysForceIpHdrSender,
       "rcSysDnsDomainName": rcSysDnsDomainName,
       "rcSysDnsServerListIpAddr": rcSysDnsServerListIpAddr,
       "rcSysDnsRequestType": rcSysDnsRequestType,
       "rcSysSpanningTreeOperMode": rcSysSpanningTreeOperMode,
       "rcSysSpanningTreeAdminMode": rcSysSpanningTreeAdminMode,
       "rcSysAutoRecoverDelay": rcSysAutoRecoverDelay,
       "rcSysMacFlapLimitTime": rcSysMacFlapLimitTime,
       "rcSysMacFlapLimitCount": rcSysMacFlapLimitCount,
       "rcSysExtCplimitEnable": rcSysExtCplimitEnable,
       "rcSysExtCplimitMinCongTime": rcSysExtCplimitMinCongTime,
       "rcSysExtCplimitMaxPorts": rcSysExtCplimitMaxPorts,
       "rcSysExtCplimitPortCongTime": rcSysExtCplimitPortCongTime,
       "rcSysExtCplimitTrapLevel": rcSysExtCplimitTrapLevel,
       "rcSysExtCplimitSysOctapidCongested": rcSysExtCplimitSysOctapidCongested,
       "rcSysExtCplimitPortsMonitored": rcSysExtCplimitPortsMonitored,
       "rcSysExtCplimitPortsShutDown": rcSysExtCplimitPortsShutDown,
       "rcSysActionL1": rcSysActionL1,
       "rcSysActionL2": rcSysActionL2,
       "rcSysActionL3": rcSysActionL3,
       "rcSysActionRwa": rcSysActionRwa,
       "rcSysPowerUsage": rcSysPowerUsage,
       "rcSysPowerAvailable": rcSysPowerAvailable,
       "rcSysFrcMsgControlTable": rcSysFrcMsgControlTable,
       "rcSysFrcMsgControlEntry": rcSysFrcMsgControlEntry,
       "rcSysFrcMsgControlPatternId": rcSysFrcMsgControlPatternId,
       "rcSysFrcMsgControlPattern": rcSysFrcMsgControlPattern,
       "rcSysFrcMsgControlRowStatus": rcSysFrcMsgControlRowStatus,
       "rcSysAccPolSnmpGrpTable": rcSysAccPolSnmpGrpTable,
       "rcSysAccPolSnmpGrpEntry": rcSysAccPolSnmpGrpEntry,
       "rcSysAccPolSnmpGrpName": rcSysAccPolSnmpGrpName,
       "rcSysAccPolSnmpGrpModel": rcSysAccPolSnmpGrpModel,
       "rcSysAccPolSnmpGrpRowStatus": rcSysAccPolSnmpGrpRowStatus,
       "rcSysVirtualIpv6Addr": rcSysVirtualIpv6Addr,
       "rcSysVirtualIpv6PrefixLength": rcSysVirtualIpv6PrefixLength,
       "rcSysConfigMode": rcSysConfigMode,
       "rcSysLicenseTrialDaysLeft": rcSysLicenseTrialDaysLeft,
       "rcTftp": rcTftp,
       "rcTftpHost": rcTftpHost,
       "rcTftpFile": rcTftpFile,
       "rcTftpAction": rcTftpAction,
       "rcTftpResult": rcTftpResult,
       "rcVlan": rcVlan,
       "rcVlanNumVlans": rcVlanNumVlans,
       "rcVlanTable": rcVlanTable,
       "rcVlanEntry": rcVlanEntry,
       "rcVlanId": rcVlanId,
       "rcVlanName": rcVlanName,
       "rcVlanColor": rcVlanColor,
       "rcVlanHighPriority": rcVlanHighPriority,
       "rcVlanRoutingEnable": rcVlanRoutingEnable,
       "rcVlanIfIndex": rcVlanIfIndex,
       "rcVlanAction": rcVlanAction,
       "rcVlanResult": rcVlanResult,
       "rcVlanStgId": rcVlanStgId,
       "rcVlanType": rcVlanType,
       "rcVlanPortMembers": rcVlanPortMembers,
       "rcVlanActiveMembers": rcVlanActiveMembers,
       "rcVlanStaticMembers": rcVlanStaticMembers,
       "rcVlanNotAllowToJoin": rcVlanNotAllowToJoin,
       "rcVlanProtocolId": rcVlanProtocolId,
       "rcVlanSubnetAddr": rcVlanSubnetAddr,
       "rcVlanSubnetMask": rcVlanSubnetMask,
       "rcVlanAgingTime": rcVlanAgingTime,
       "rcVlanMacAddress": rcVlanMacAddress,
       "rcVlanRowStatus": rcVlanRowStatus,
       "rcVlanIgmpSnoopEnable": rcVlanIgmpSnoopEnable,
       "rcVlanIgmpSnoopReportProxyEnable": rcVlanIgmpSnoopReportProxyEnable,
       "rcVlanIgmpSnoopRobustness": rcVlanIgmpSnoopRobustness,
       "rcVlanIgmpSnoopQueryInterval": rcVlanIgmpSnoopQueryInterval,
       "rcVlanIgmpSnoopMRouterPorts": rcVlanIgmpSnoopMRouterPorts,
       "rcVlanUserDefinedPid": rcVlanUserDefinedPid,
       "rcVlanIgmpSnoopActiveMRouterPorts": rcVlanIgmpSnoopActiveMRouterPorts,
       "rcVlanProtocolIds": rcVlanProtocolIds,
       "rcVlanIgmpSnoopActiveQuerier": rcVlanIgmpSnoopActiveQuerier,
       "rcVlanIgmpSnoopMRouterExpiration": rcVlanIgmpSnoopMRouterExpiration,
       "rcVlanIgmpSnoopQuerierPort": rcVlanIgmpSnoopQuerierPort,
       "rcVlanUserPriority": rcVlanUserPriority,
       "rcVlanQosLevel": rcVlanQosLevel,
       "rcVlanTosValue": rcVlanTosValue,
       "rcVlanEncap": rcVlanEncap,
       "rcVlanFirewallVlanType": rcVlanFirewallVlanType,
       "rcVlanFdbAging": rcVlanFdbAging,
       "rcVlanFirewallClusterId": rcVlanFirewallClusterId,
       "rcVlanOspfPassivePortMember": rcVlanOspfPassivePortMember,
       "rcVlanUnkDstMacDiscard": rcVlanUnkDstMacDiscard,
       "rcVlanNlbMode": rcVlanNlbMode,
       "rcVlanVrfId": rcVlanVrfId,
       "rcVlanVrfName": rcVlanVrfName,
       "rcVlanNodalMepList": rcVlanNodalMepList,
       "rcVlanNumOfNodalMep": rcVlanNumOfNodalMep,
       "rcVlanNodalMipLevelList": rcVlanNodalMipLevelList,
       "rcVlanNumOfNodalMipLevel": rcVlanNumOfNodalMipLevel,
       "rcVlanIpMultinettingEnable": rcVlanIpMultinettingEnable,
       "rcVlanAssociatedIpMultinettingVlan": rcVlanAssociatedIpMultinettingVlan,
       "rcVlanPlsbIsid": rcVlanPlsbIsid,
       "rcVlanPortTable": rcVlanPortTable,
       "rcVlanPortEntry": rcVlanPortEntry,
       "rcVlanPortIndex": rcVlanPortIndex,
       "rcVlanPortNumVlanIds": rcVlanPortNumVlanIds,
       "rcVlanPortVlanIds": rcVlanPortVlanIds,
       "rcVlanPortType": rcVlanPortType,
       "rcVlanPortDiscardTaggedFrames": rcVlanPortDiscardTaggedFrames,
       "rcVlanPortDiscardUntaggedFrames": rcVlanPortDiscardUntaggedFrames,
       "rcVlanPortDefaultVlanId": rcVlanPortDefaultVlanId,
       "rcVlanPortPerformTagging": rcVlanPortPerformTagging,
       "rcVlanPortSVlanPortType": rcVlanPortSVlanPortType,
       "rcVlanPortLoopDetect": rcVlanPortLoopDetect,
       "rcVlanPortFirstPortInOpid": rcVlanPortFirstPortInOpid,
       "rcVlanPortLastPortInOpid": rcVlanPortLastPortInOpid,
       "rcVlanPortUntagDefaultVlan": rcVlanPortUntagDefaultVlan,
       "rcVlanPortLoopDetectAction": rcVlanPortLoopDetectAction,
       "rcVlanPortArpDetect": rcVlanPortArpDetect,
       "rcVlanPortSpoofDetect": rcVlanPortSpoofDetect,
       "rcVlanPortVlanIdList": rcVlanPortVlanIdList,
       "rcVlanMacTable": rcVlanMacTable,
       "rcVlanMacEntry": rcVlanMacEntry,
       "rcVlanMacVlanId": rcVlanMacVlanId,
       "rcVlanMacAddr": rcVlanMacAddr,
       "rcVlanMacRowStatus": rcVlanMacRowStatus,
       "rcVlanIgmpSnoopNumGroups": rcVlanIgmpSnoopNumGroups,
       "rcVlanIgmpSnoopTable": rcVlanIgmpSnoopTable,
       "rcVlanIgmpSnoopEntry": rcVlanIgmpSnoopEntry,
       "rcVlanIgmpSnoopVlanId": rcVlanIgmpSnoopVlanId,
       "rcVlanIgmpSnoopIpAddress": rcVlanIgmpSnoopIpAddress,
       "rcVlanIgmpSnoopIfIndex": rcVlanIgmpSnoopIfIndex,
       "rcVlanIgmpSnoopMember": rcVlanIgmpSnoopMember,
       "rcVlanIgmpSnoopExpiration": rcVlanIgmpSnoopExpiration,
       "rcVlanIgmpSnoopType": rcVlanIgmpSnoopType,
       "rcVlanIgmpSnoopStaticTable": rcVlanIgmpSnoopStaticTable,
       "rcVlanIgmpSnoopStaticEntry": rcVlanIgmpSnoopStaticEntry,
       "rcVlanIgmpSnoopStaticVlanId": rcVlanIgmpSnoopStaticVlanId,
       "rcVlanIgmpSnoopStaticIpAddress": rcVlanIgmpSnoopStaticIpAddress,
       "rcVlanIgmpSnoopStaticMemberPorts": rcVlanIgmpSnoopStaticMemberPorts,
       "rcVlanIgmpSnoopStaticRowStatus": rcVlanIgmpSnoopStaticRowStatus,
       "rcVlanIgmpSnoopStaticNotAllowedToJoin": rcVlanIgmpSnoopStaticNotAllowedToJoin,
       "rcVlanIgmpSnoopAccessTable": rcVlanIgmpSnoopAccessTable,
       "rcVlanIgmpSnoopAccessEntry": rcVlanIgmpSnoopAccessEntry,
       "rcVlanIgmpSnoopAccessVlanId": rcVlanIgmpSnoopAccessVlanId,
       "rcVlanIgmpSnoopAccessGrpAddr": rcVlanIgmpSnoopAccessGrpAddr,
       "rcVlanIgmpSnoopAccessHostAddr": rcVlanIgmpSnoopAccessHostAddr,
       "rcVlanIgmpSnoopAccessHostMask": rcVlanIgmpSnoopAccessHostMask,
       "rcVlanIgmpSnoopAccessMode": rcVlanIgmpSnoopAccessMode,
       "rcVlanIgmpSnoopAccessRowStatus": rcVlanIgmpSnoopAccessRowStatus,
       "rcVlanIgmpSnoopSenderTable": rcVlanIgmpSnoopSenderTable,
       "rcVlanIgmpSnoopSenderEntry": rcVlanIgmpSnoopSenderEntry,
       "rcVlanIgmpSnoopSenderVlanId": rcVlanIgmpSnoopSenderVlanId,
       "rcVlanIgmpSnoopSenderIpAddress": rcVlanIgmpSnoopSenderIpAddress,
       "rcVlanIgmpSnoopSenderIfIndex": rcVlanIgmpSnoopSenderIfIndex,
       "rcVlanIgmpSnoopSenderMember": rcVlanIgmpSnoopSenderMember,
       "rcVlanIgmpSnoopSenderAction": rcVlanIgmpSnoopSenderAction,
       "rcVlanLoopDetectedTable": rcVlanLoopDetectedTable,
       "rcVlanLoopDetectedEntry": rcVlanLoopDetectedEntry,
       "rcVlanLoopDetectedPortIndex": rcVlanLoopDetectedPortIndex,
       "rcVlanLoopDetectedVlanId": rcVlanLoopDetectedVlanId,
       "rcVlanLoopDetectedValue": rcVlanLoopDetectedValue,
       "rcVlanDsapSsapTable": rcVlanDsapSsapTable,
       "rcVlanDsapSsapEntry": rcVlanDsapSsapEntry,
       "rcVlanDsapSsapVlanId": rcVlanDsapSsapVlanId,
       "rcVlanDsapSsapPid": rcVlanDsapSsapPid,
       "rcVlanDsapSsapRowStatus": rcVlanDsapSsapRowStatus,
       "rcVlanNewLoopDetectedTable": rcVlanNewLoopDetectedTable,
       "rcVlanNewLoopDetectedEntry": rcVlanNewLoopDetectedEntry,
       "rcVlanNewLoopDetectedPortIndex": rcVlanNewLoopDetectedPortIndex,
       "rcVlanNewLoopDetectedVlanId": rcVlanNewLoopDetectedVlanId,
       "rcVlanNewLoopDetectedMac": rcVlanNewLoopDetectedMac,
       "rcVlanNewLoopDetectedAction": rcVlanNewLoopDetectedAction,
       "rcVlanNewLoopDetectedSmltRemote": rcVlanNewLoopDetectedSmltRemote,
       "rcVlanClearMacRecordTable": rcVlanClearMacRecordTable,
       "rcVlanClearMacRecordEntry": rcVlanClearMacRecordEntry,
       "rcVlanClearMacRecordAddr": rcVlanClearMacRecordAddr,
       "rcVlanClearMacRecordVlanId": rcVlanClearMacRecordVlanId,
       "rcVlanClearMacRecordAllVlanIds": rcVlanClearMacRecordAllVlanIds,
       "rcVlanClearMacRecordForceDelete": rcVlanClearMacRecordForceDelete,
       "rcVlanClearMacRecordLCForceDelete": rcVlanClearMacRecordLCForceDelete,
       "rcChassis": rcChassis,
       "rcChasType": rcChasType,
       "rcChasSerialNumber": rcChasSerialNumber,
       "rcChasHardwareRevision": rcChasHardwareRevision,
       "rcChasNumSlots": rcChasNumSlots,
       "rcChasNumPorts": rcChasNumPorts,
       "rcChasTestResult": rcChasTestResult,
       "rcChasFan": rcChasFan,
       "rcChasFanTable": rcChasFanTable,
       "rcChasFanEntry": rcChasFanEntry,
       "rcChasFanId": rcChasFanId,
       "rcChasFanOperStatus": rcChasFanOperStatus,
       "rcChasFanAmbientTemperature": rcChasFanAmbientTemperature,
       "rcChasFanType": rcChasFanType,
       "rcChasPowerSupply": rcChasPowerSupply,
       "rcChasPowerSupplyTable": rcChasPowerSupplyTable,
       "rcChasPowerSupplyEntry": rcChasPowerSupplyEntry,
       "rcChasPowerSupplyId": rcChasPowerSupplyId,
       "rcChasPowerSupplyOperStatus": rcChasPowerSupplyOperStatus,
       "rcChasPowerSupplyDetailTable": rcChasPowerSupplyDetailTable,
       "rcChasPowerSupplyDetailEntry": rcChasPowerSupplyDetailEntry,
       "rcChasPowerSupplyDetailId": rcChasPowerSupplyDetailId,
       "rcChasPowerSupplyDetailType": rcChasPowerSupplyDetailType,
       "rcChasPowerSupplyDetailSerialNumber": rcChasPowerSupplyDetailSerialNumber,
       "rcChasPowerSupplyDetailHardwareRevision": rcChasPowerSupplyDetailHardwareRevision,
       "rcChasPowerSupplyDetailPartNumber": rcChasPowerSupplyDetailPartNumber,
       "rcChasPowerSupplyDetailDescription": rcChasPowerSupplyDetailDescription,
       "rcChasPowerSupplyDetailInputLineVoltage": rcChasPowerSupplyDetailInputLineVoltage,
       "rcChasPowerSupplyDetailOperLineVoltage": rcChasPowerSupplyDetailOperLineVoltage,
       "rcCard": rcCard,
       "rcCardTable": rcCardTable,
       "rcCardEntry": rcCardEntry,
       "rcCardIndex": rcCardIndex,
       "rcCardType": rcCardType,
       "rcCardSerialNumber": rcCardSerialNumber,
       "rcCardHardwareRevision": rcCardHardwareRevision,
       "rcCardAdminStatus": rcCardAdminStatus,
       "rcCardOperStatus": rcCardOperStatus,
       "rcCardPCMCIAType": rcCardPCMCIAType,
       "rcCardPartNumber": rcCardPartNumber,
       "rcPort": rcPort,
       "rcPortTable": rcPortTable,
       "rcPortEntry": rcPortEntry,
       "rcPortIndex": rcPortIndex,
       "rcPortType": rcPortType,
       "rcPortConnectorType": rcPortConnectorType,
       "rcPortPerformRouting": rcPortPerformRouting,
       "rcPortHighPriority": rcPortHighPriority,
       "rcPortAction": rcPortAction,
       "rcPortResult": rcPortResult,
       "rcPortPrimaryConnector": rcPortPrimaryConnector,
       "rcPortActiveConnector": rcPortActiveConnector,
       "rcPortBackupConnectorStatus": rcPortBackupConnectorStatus,
       "rcPortAutoNegotiate": rcPortAutoNegotiate,
       "rcPortAdminDuplex": rcPortAdminDuplex,
       "rcPortOperDuplex": rcPortOperDuplex,
       "rcPortAdminSpeed": rcPortAdminSpeed,
       "rcPortOperSpeed": rcPortOperSpeed,
       "rcPortMltId": rcPortMltId,
       "rcPortLocked": rcPortLocked,
       "rcPortAutoNegotiationSupported": rcPortAutoNegotiationSupported,
       "rcPortSingleRoutablePort": rcPortSingleRoutablePort,
       "rcPortUnknownMacDiscard": rcPortUnknownMacDiscard,
       "rcPortNumStateTransition": rcPortNumStateTransition,
       "rcPortUserPriority": rcPortUserPriority,
       "rcPortAllowOversizeFrame": rcPortAllowOversizeFrame,
       "rcPortQosLevel": rcPortQosLevel,
       "rcPortDiffServEnable": rcPortDiffServEnable,
       "rcPortDiffServType": rcPortDiffServType,
       "rcPortDiffServIeee8021POverrideEnable": rcPortDiffServIeee8021POverrideEnable,
       "rcPortVendorDescr": rcPortVendorDescr,
       "rcPortName": rcPortName,
       "rcPortOctapidId": rcPortOctapidId,
       "rcPortWan": rcPortWan,
       "rcPortTransport": rcPortTransport,
       "rcPortMultimediaFilterEnable": rcPortMultimediaFilterEnable,
       "rcPortMultimediaDevSelection": rcPortMultimediaDevSelection,
       "rcPortAdminRouting": rcPortAdminRouting,
       "rcPortOperRouting": rcPortOperRouting,
       "rcPortPid": rcPortPid,
       "rcPortIeee8021POverrideEnable": rcPortIeee8021POverrideEnable,
       "rcPortCpLimitShutDown": rcPortCpLimitShutDown,
       "rcPortHighSecureEnable": rcPortHighSecureEnable,
       "rcPortMrouteStrLimit": rcPortMrouteStrLimit,
       "rcPortMrouteStrTimerCheck": rcPortMrouteStrTimerCheck,
       "rcPortMrouteStrLimitEnable": rcPortMrouteStrLimitEnable,
       "rcPortAutoNegAd": rcPortAutoNegAd,
       "rcPortAutoRecoverPort": rcPortAutoRecoverPort,
       "rcPortExtCplimitConf": rcPortExtCplimitConf,
       "rcPortExtCplimitUtilRate": rcPortExtCplimitUtilRate,
       "rcPortEgressRateLimit": rcPortEgressRateLimit,
       "rcPortEgressRateLimitState": rcPortEgressRateLimitState,
       "rcPortBpduFilteringTimerCount": rcPortBpduFilteringTimerCount,
       "rcPortBpduFilteringTimeout": rcPortBpduFilteringTimeout,
       "rcPortBpduFilteringAdminEnabled": rcPortBpduFilteringAdminEnabled,
       "rcPortBpduFilteringOperEnabled": rcPortBpduFilteringOperEnabled,
       "rcPortCpLimitEnable": rcPortCpLimitEnable,
       "rcPortCpMulticastLimit": rcPortCpMulticastLimit,
       "rcPortCpBroadcastLimit": rcPortCpBroadcastLimit,
       "rcPortClockSource": rcPortClockSource,
       "rcPortIngressRateLimit": rcPortIngressRateLimit,
       "rcPortIngressRateLimitState": rcPortIngressRateLimitState,
       "rcPortVrfIdList": rcPortVrfIdList,
       "rcPortVrfNameList": rcPortVrfNameList,
       "rcPortBrouterVrfId": rcPortBrouterVrfId,
       "rcPortBrouterVrfName": rcPortBrouterVrfName,
       "rcPortVrfCount": rcPortVrfCount,
       "rcPortPcapTable": rcPortPcapTable,
       "rcPortPcapEntry": rcPortPcapEntry,
       "rcPortPcapIndex": rcPortPcapIndex,
       "rcPortPcapEnable": rcPortPcapEnable,
       "rcPortPcapMode": rcPortPcapMode,
       "rcPortPcapFilterListSize": rcPortPcapFilterListSize,
       "rcPortPcapFilterList": rcPortPcapFilterList,
       "rcPortPcapAclFilterListSize": rcPortPcapAclFilterListSize,
       "rcPortPcapAclFilterList": rcPortPcapAclFilterList,
       "rcPortLacpTable": rcPortLacpTable,
       "rcPortLacpEntry": rcPortLacpEntry,
       "rcPortLacpAdminEnable": rcPortLacpAdminEnable,
       "rcPortLacpOperEnable": rcPortLacpOperEnable,
       "rcPortLacpFastPeriodicTime": rcPortLacpFastPeriodicTime,
       "rcPortLacpSlowPeriodicTime": rcPortLacpSlowPeriodicTime,
       "rcPortLacpTimeoutScale": rcPortLacpTimeoutScale,
       "rcPortLacpAggrWaitTime": rcPortLacpAggrWaitTime,
       "rcPortLacpFastPeriodicTimeOper": rcPortLacpFastPeriodicTimeOper,
       "rcPortLacpSlowPeriodicTimeOper": rcPortLacpSlowPeriodicTimeOper,
       "rcPortLacpTimeoutScaleOper": rcPortLacpTimeoutScaleOper,
       "rcPortLacpAggrWaitTimeOper": rcPortLacpAggrWaitTimeOper,
       "rcPortVLacpTable": rcPortVLacpTable,
       "rcPortVLacpEntry": rcPortVLacpEntry,
       "rcPortVLacpAdminEnable": rcPortVLacpAdminEnable,
       "rcPortVLacpOperEnable": rcPortVLacpOperEnable,
       "rcPortVLacpFastPeriodicTimer": rcPortVLacpFastPeriodicTimer,
       "rcPortVLacpSlowPeriodicTimer": rcPortVLacpSlowPeriodicTimer,
       "rcPortVLacpTimeout": rcPortVLacpTimeout,
       "rcPortVLacpTimeoutScale": rcPortVLacpTimeoutScale,
       "rcPortVLacpEtherType": rcPortVLacpEtherType,
       "rcPortVLacpEtherMacAddress": rcPortVLacpEtherMacAddress,
       "rcPortVLacpPortState": rcPortVLacpPortState,
       "rcPortVLacpFlapDetectEnable": rcPortVLacpFlapDetectEnable,
       "rcPortVLacpFlapFrequency": rcPortVLacpFlapFrequency,
       "rcPortVLacpFlapInterval": rcPortVLacpFlapInterval,
       "rcPortVLacpTotalFlapCount": rcPortVLacpTotalFlapCount,
       "rcPortVLacpFirstFlapTimeStamp": rcPortVLacpFirstFlapTimeStamp,
       "rcPortVLacpLastFlapTimeStamp": rcPortVLacpLastFlapTimeStamp,
       "rcPortVLacpFlapClearStats": rcPortVLacpFlapClearStats,
       "rcPortRemoteMirroringTable": rcPortRemoteMirroringTable,
       "rcPortRemoteMirroringEntry": rcPortRemoteMirroringEntry,
       "rcPortRemoteMirroringIndex": rcPortRemoteMirroringIndex,
       "rcPortRemoteMirroringEnable": rcPortRemoteMirroringEnable,
       "rcPortRemoteMirroringMode": rcPortRemoteMirroringMode,
       "rcPortRemoteMirroringSrcMac": rcPortRemoteMirroringSrcMac,
       "rcPortRemoteMirroringDstMac": rcPortRemoteMirroringDstMac,
       "rcPortRemoteMirroringEtherType": rcPortRemoteMirroringEtherType,
       "rcPortRemoteMirroringVlanIdListSize": rcPortRemoteMirroringVlanIdListSize,
       "rcPortRemoteMirroringVlanIdList": rcPortRemoteMirroringVlanIdList,
       "rcPortRemoteMirroringRowStatus": rcPortRemoteMirroringRowStatus,
       "rcPortMgmtLinkTable": rcPortMgmtLinkTable,
       "rcPortMgmtLinkEntry": rcPortMgmtLinkEntry,
       "rcPortMgmtLinkIndex": rcPortMgmtLinkIndex,
       "rcPortMgmtLinkDescr": rcPortMgmtLinkDescr,
       "rcPortMgmtLinkOperStatus": rcPortMgmtLinkOperStatus,
       "rcPortMgmtLinkAutoNegotiate": rcPortMgmtLinkAutoNegotiate,
       "rcPortMgmtLinkDuplex": rcPortMgmtLinkDuplex,
       "rcPortMgmtLinkSpeed": rcPortMgmtLinkSpeed,
       "rcPortFlushMacTable": rcPortFlushMacTable,
       "rcPortFlushMacEntry": rcPortFlushMacEntry,
       "rcPortFlushMacPortNum": rcPortFlushMacPortNum,
       "rcPortFlushMacAddr": rcPortFlushMacAddr,
       "rcPortFlushMacVlanId": rcPortFlushMacVlanId,
       "rcPortLock": rcPortLock,
       "rcPortLockEnable": rcPortLockEnable,
       "rcPortLockLockedPorts": rcPortLockLockedPorts,
       "rcChasAruMode": rcChasAruMode,
       "rcChasQuidMode": rcChasQuidMode,
       "rcChasEocModeAdminStatus": rcChasEocModeAdminStatus,
       "rcChasEocModeOperStatus": rcChasEocModeOperStatus,
       "rcAgentTable": rcAgentTable,
       "rcAgentEntry": rcAgentEntry,
       "rcAgentId": rcAgentId,
       "rcAgentSlot": rcAgentSlot,
       "rcAgentIpAddr": rcAgentIpAddr,
       "rcChasBrouterPorts": rcChasBrouterPorts,
       "rcChasGlobalFilterEnable": rcChasGlobalFilterEnable,
       "rcChasVlanBySrcMacEnable": rcChasVlanBySrcMacEnable,
       "rcChasDiffServEcnCompatibilityEnable": rcChasDiffServEcnCompatibilityEnable,
       "rcChasNewEnhancedOperMode": rcChasNewEnhancedOperMode,
       "rcChasNewEMMode": rcChasNewEMMode,
       "rcChasEmModeError": rcChasEmModeError,
       "rcChasEnhancedOperMode": rcChasEnhancedOperMode,
       "rcChasEMMode": rcChasEMMode,
       "rcChasFtpDaemonInSecondaryCpu": rcChasFtpDaemonInSecondaryCpu,
       "rcChasSmltOnSingleCpEnable": rcChasSmltOnSingleCpEnable,
       "rcChasNewVlanOptmMode": rcChasNewVlanOptmMode,
       "rcChasVlanOptmMode": rcChasVlanOptmMode,
       "rcLaunchPad": rcLaunchPad,
       "rcLaunchPadTable": rcLaunchPadTable,
       "rcLaunchPadEntry": rcLaunchPadEntry,
       "rcLaunchPadSlotId": rcLaunchPadSlotId,
       "rcLaunchPadMiniSlotId": rcLaunchPadMiniSlotId,
       "rcLaunchPadAppType": rcLaunchPadAppType,
       "rcLaunchPadMiniSlotIp": rcLaunchPadMiniSlotIp,
       "rcLaunchPadNaapLpState": rcLaunchPadNaapLpState,
       "rcLaunchPadMiniSlotSwVersion": rcLaunchPadMiniSlotSwVersion,
       "rcLaunchPadHWType": rcLaunchPadHWType,
       "rcLaunchPadClusterTable": rcLaunchPadClusterTable,
       "rcLaunchPadClusterEntry": rcLaunchPadClusterEntry,
       "rcLaunchPadClusterId": rcLaunchPadClusterId,
       "rcLaunchPadClusterType": rcLaunchPadClusterType,
       "rcLaunchPadClusterSize": rcLaunchPadClusterSize,
       "rcLaunchPadClusterMembers": rcLaunchPadClusterMembers,
       "rcLaunchPadClusterRowStatus": rcLaunchPadClusterRowStatus,
       "rcLaunchPadClusterMgmtVlan": rcLaunchPadClusterMgmtVlan,
       "rcLaunchPadClusterSyncVlan": rcLaunchPadClusterSyncVlan,
       "rcLaunchPadClusterTpsSize": rcLaunchPadClusterTpsSize,
       "rcLaunchPadClusterTpsMembers": rcLaunchPadClusterTpsMembers,
       "rcLaunchPadClusterPortMember": rcLaunchPadClusterPortMember,
       "rcChasNaapEnable": rcChasNaapEnable,
       "rcChasGlobalFilterOrderingEnable": rcChasGlobalFilterOrderingEnable,
       "rcChasNewGlobalFilterOrderingEnable": rcChasNewGlobalFilterOrderingEnable,
       "rcChasWsmDirectMode": rcChasWsmDirectMode,
       "rcChasRspMode": rcChasRspMode,
       "rcChasRspOperMode": rcChasRspOperMode,
       "rcChasRspModeError": rcChasRspModeError,
       "rcChasMcastCheckPktEnable": rcChasMcastCheckPktEnable,
       "rcChasSystemMonitorEnable": rcChasSystemMonitorEnable,
       "rcChasSysMonMonitoringEnable": rcChasSysMonMonitoringEnable,
       "rcChasSysMonDetectionTime": rcChasSysMonDetectionTime,
       "rcChasNewMulticastResourceReservation": rcChasNewMulticastResourceReservation,
       "rcChasMulticastResourceReservation": rcChasMulticastResourceReservation,
       "rcChasNewMaxVlanResourceReservation": rcChasNewMaxVlanResourceReservation,
       "rcChasMaxVlanResourceReservation": rcChasMaxVlanResourceReservation,
       "rcChasMgidUsageVlanCurrent": rcChasMgidUsageVlanCurrent,
       "rcChasMgidUsageVlanRemaining": rcChasMgidUsageVlanRemaining,
       "rcChasMgidUsageMulticastCurrent": rcChasMgidUsageMulticastCurrent,
       "rcChasMgidUsageMulticastRemaining": rcChasMgidUsageMulticastRemaining,
       "rcChasPowerManagementEnable": rcChasPowerManagementEnable,
       "rcChasForceTopologyIpFlagEnable": rcChasForceTopologyIpFlagEnable,
       "rcChasCircuitlessIpId": rcChasCircuitlessIpId,
       "rcChasPowerManagementOriginalEnable": rcChasPowerManagementOriginalEnable,
       "rcChasPowerManagementFanCheck": rcChasPowerManagementFanCheck,
       "rcChasPowerManagementFanCheckOriginalState": rcChasPowerManagementFanCheckOriginalState,
       "rcChasTakeIOCardOfflineEnable": rcChasTakeIOCardOfflineEnable,
       "rcChasAutoResetFabricEnable": rcChasAutoResetFabricEnable,
       "rcMirror": rcMirror,
       "rcMirrorSaveConfig": rcMirrorSaveConfig,
       "rcMirrorByPort": rcMirrorByPort,
       "rcMirrorByPortEnable": rcMirrorByPortEnable,
       "rcMirrorByPortMirrorPort": rcMirrorByPortMirrorPort,
       "rcMirrorByPortEnableMirroredPortOne": rcMirrorByPortEnableMirroredPortOne,
       "rcMirrorByPortMirroredPortOne": rcMirrorByPortMirroredPortOne,
       "rcMirrorByPortEnableMirroredPortTwo": rcMirrorByPortEnableMirroredPortTwo,
       "rcMirrorByPortMirroredPortTwo": rcMirrorByPortMirroredPortTwo,
       "rcDipSwitch": rcDipSwitch,
       "rcIsolateUnconfigPorts": rcIsolateUnconfigPorts,
       "rcUseFactorySettings": rcUseFactorySettings,
       "rcHighPriorityMode": rcHighPriorityMode,
       "rcTblSize": rcTblSize,
       "rcTblRmonStatSize": rcTblRmonStatSize,
       "rcTblRmonHistoryControlSize": rcTblRmonHistoryControlSize,
       "rcTblRmonHistoryEnetSize": rcTblRmonHistoryEnetSize,
       "rcTblRmonAlarmSize": rcTblRmonAlarmSize,
       "rcTblRmonEventSize": rcTblRmonEventSize,
       "rcTblRmonLogSize": rcTblRmonLogSize,
       "rcTblArTblSize": rcTblArTblSize,
       "rcTblArFree": rcTblArFree,
       "rcTblArNoSpace": rcTblArNoSpace,
       "rcTblArAdded": rcTblArAdded,
       "rcTblArDeleted": rcTblArDeleted,
       "rcTblArMacAdded": rcTblArMacAdded,
       "rcTblArMacDeleted": rcTblArMacDeleted,
       "rcTblArMacMoved": rcTblArMacMoved,
       "rcTblArIpAdded": rcTblArIpAdded,
       "rcTblArIpDeleted": rcTblArIpDeleted,
       "rcTblArMcastTblSize": rcTblArMcastTblSize,
       "rcTblArFreeMcastGroups": rcTblArFreeMcastGroups,
       "rcTblArIpMcastAdded": rcTblArIpMcastAdded,
       "rcTblArIpMcastDeleted": rcTblArIpMcastDeleted,
       "rcTblArVlanByPortAdded": rcTblArVlanByPortAdded,
       "rcTblArVlanByPortDeleted": rcTblArVlanByPortDeleted,
       "rcTblArVlanByProtocolAdded": rcTblArVlanByProtocolAdded,
       "rcTblArVlanByProtocolDeleted": rcTblArVlanByProtocolDeleted,
       "rcTblArVlanByIpSubnetAdded": rcTblArVlanByIpSubnetAdded,
       "rcTblArVlanByIpSubnetDeleted": rcTblArVlanByIpSubnetDeleted,
       "rcTblArIpSubnetsAdded": rcTblArIpSubnetsAdded,
       "rcTblArIpSubnetsDeleted": rcTblArIpSubnetsDeleted,
       "rcTblArRsvpsAdded": rcTblArRsvpsAdded,
       "rcTblArRsvpsDeleted": rcTblArRsvpsDeleted,
       "rcTblBrdgFdbSize": rcTblBrdgFdbSize,
       "rcTblBrdgStaticSize": rcTblBrdgStaticSize,
       "rcTblIpAddrSize": rcTblIpAddrSize,
       "rcTblIpForwardingSize": rcTblIpForwardingSize,
       "rcTblIpNetToMediaSize": rcTblIpNetToMediaSize,
       "rcTblIpBestPlusAltRouteSize": rcTblIpBestPlusAltRouteSize,
       "rcTblIpBestPathSize": rcTblIpBestPathSize,
       "rcTblIpBestPlusAltPathSize": rcTblIpBestPlusAltPathSize,
       "rcIp": rcIp,
       "rcIpConf": rcIpConf,
       "rcIpConfTable": rcIpConfTable,
       "rcIpConfEntry": rcIpConfEntry,
       "rcIpConfIfIndex": rcIpConfIfIndex,
       "rcIpConfAdvertDefRte": rcIpConfAdvertDefRte,
       "rcIpConfAcceptDefRte": rcIpConfAcceptDefRte,
       "rcIpConfRowStatus": rcIpConfRowStatus,
       "rcIpConfRipEnable": rcIpConfRipEnable,
       "rcIpConfOspfEnable": rcIpConfOspfEnable,
       "rcIpConfIgmpEnable": rcIpConfIgmpEnable,
       "rcIpConfAddrAssigned": rcIpConfAddrAssigned,
       "rcIpConfDhcpEnable": rcIpConfDhcpEnable,
       "rcIpConfTriggeredUpdateEnable": rcIpConfTriggeredUpdateEnable,
       "rcIpConfAutoAggrerateEnable": rcIpConfAutoAggrerateEnable,
       "rcIpConfGenerateDefaultRoute": rcIpConfGenerateDefaultRoute,
       "rcIpConfAdvertiseWhenDown": rcIpConfAdvertiseWhenDown,
       "rcIpConfDirectBroadcastEnable": rcIpConfDirectBroadcastEnable,
       "rcIpConfRipInPolicy": rcIpConfRipInPolicy,
       "rcIpConfRipOutPolicy": rcIpConfRipOutPolicy,
       "rcIpConfOspfIfType": rcIpConfOspfIfType,
       "rcIpConfRipCost": rcIpConfRipCost,
       "rcIpConfRipHolddown": rcIpConfRipHolddown,
       "rcIpConfRipTimeout": rcIpConfRipTimeout,
       "rcIpConfRsmltEnable": rcIpConfRsmltEnable,
       "rcIpConfReversePathCheckEnable": rcIpConfReversePathCheckEnable,
       "rcIpConfReversePathCheckMode": rcIpConfReversePathCheckMode,
       "rcIpConfIsisEnable": rcIpConfIsisEnable,
       "rcIpConfBfdEnable": rcIpConfBfdEnable,
       "rcIpConfIpVpnLiteEnable": rcIpConfIpVpnLiteEnable,
       "rcIpConfOspfTable": rcIpConfOspfTable,
       "rcIpConfOspfEntry": rcIpConfOspfEntry,
       "rcIpConfOspfIfIndex": rcIpConfOspfIfIndex,
       "rcIpConfOspfRtrPriority": rcIpConfOspfRtrPriority,
       "rcIpConfOspfMetric": rcIpConfOspfMetric,
       "rcIpConfOspfAuthKey": rcIpConfOspfAuthKey,
       "rcIpConfOspfRowStatus": rcIpConfOspfRowStatus,
       "rcIpConfOspfHelloInterval": rcIpConfOspfHelloInterval,
       "rcIpConfOspfRtrDeadInterval": rcIpConfOspfRtrDeadInterval,
       "rcIpConfOspfIfAreaId": rcIpConfOspfIfAreaId,
       "rcIpConfOspfAuthType": rcIpConfOspfAuthType,
       "rcIpConfOspfPollInterval": rcIpConfOspfPollInterval,
       "rcIpConfOspfIfMtuIgnore": rcIpConfOspfIfMtuIgnore,
       "rcIpConfOspfBfdEnable": rcIpConfOspfBfdEnable,
       "rcIpConfOspfDefaultMetric": rcIpConfOspfDefaultMetric,
       "rcIpConfOspfDefaultMetric10MegPort": rcIpConfOspfDefaultMetric10MegPort,
       "rcIpConfOspfDefaultMetric100MegPort": rcIpConfOspfDefaultMetric100MegPort,
       "rcIpConfOspfDefaultMetric1000MegPort": rcIpConfOspfDefaultMetric1000MegPort,
       "rcIpConfOspfDefaultMetric10000MegPort": rcIpConfOspfDefaultMetric10000MegPort,
       "rcIpConfOspf": rcIpConfOspf,
       "rcIpConfOspfTrapEnable": rcIpConfOspfTrapEnable,
       "rcIpConfOspfAutoVirtLinkEnable": rcIpConfOspfAutoVirtLinkEnable,
       "rcIpConfOspfSpfHoldDownTime": rcIpConfOspfSpfHoldDownTime,
       "rcIpConfOspfAction": rcIpConfOspfAction,
       "rcIpConfOspfRfc1583Compatibility": rcIpConfOspfRfc1583Compatibility,
       "rcIpConfGlobal": rcIpConfGlobal,
       "rcIpConfGlobalRipHoldDownTime": rcIpConfGlobalRipHoldDownTime,
       "rcIpConfGlobalIcmpNetUnreach": rcIpConfGlobalIcmpNetUnreach,
       "rcIpConfGlobalEcmpEnable": rcIpConfGlobalEcmpEnable,
       "rcIpConfGlobalEcmpMaxPath": rcIpConfGlobalEcmpMaxPath,
       "rcIpConfGlobalAlternativeEnable": rcIpConfGlobalAlternativeEnable,
       "rcIpConfGlobalRouteDiscoveryEnable": rcIpConfGlobalRouteDiscoveryEnable,
       "rcIpConfGlobalRipTimeOutInterval": rcIpConfGlobalRipTimeOutInterval,
       "rcIpConfGlobalRipDefImportMetric": rcIpConfGlobalRipDefImportMetric,
       "rcIpConfGlobalEcmp1PathList": rcIpConfGlobalEcmp1PathList,
       "rcIpConfGlobalEcmp2PathList": rcIpConfGlobalEcmp2PathList,
       "rcIpConfGlobalEcmp3PathList": rcIpConfGlobalEcmp3PathList,
       "rcIpConfGlobalEcmp4PathList": rcIpConfGlobalEcmp4PathList,
       "rcIpConfGlobalEcmpPathListApply": rcIpConfGlobalEcmpPathListApply,
       "rcIpConfGlobalIcmpRedirectMsg": rcIpConfGlobalIcmpRedirectMsg,
       "rcIpConfGlobalArpThreshold": rcIpConfGlobalArpThreshold,
       "rcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable": rcIpConfGlobalAllowMoreSpecificNonLocalRouteEnable,
       "rcIpConfGlobalUdpCheckSumEnable": rcIpConfGlobalUdpCheckSumEnable,
       "rcIpConfGlobalSuperNetEnable": rcIpConfGlobalSuperNetEnable,
       "rcIpConfOspfAreaTable": rcIpConfOspfAreaTable,
       "rcIpConfOspfAreaEntry": rcIpConfOspfAreaEntry,
       "rcIpConfOspfAreaId": rcIpConfOspfAreaId,
       "rcIpConfOspfAreaImportSummary": rcIpConfOspfAreaImportSummary,
       "rcIpConfOspfAreaActiveIfCount": rcIpConfOspfAreaActiveIfCount,
       "rcIpConfV2Table": rcIpConfV2Table,
       "rcIpConfV2Entry": rcIpConfV2Entry,
       "rcIpConfV2Index": rcIpConfV2Index,
       "rcIpConfV2Addr": rcIpConfV2Addr,
       "rcIpConfV2RowStatus": rcIpConfV2RowStatus,
       "rcIpConfV2AdvertDefRte": rcIpConfV2AdvertDefRte,
       "rcIpConfV2AcceptDefRte": rcIpConfV2AcceptDefRte,
       "rcIpConfV2RipEnable": rcIpConfV2RipEnable,
       "rcIpConfV2OspfEnable": rcIpConfV2OspfEnable,
       "rcIpConfV2IgmpEnable": rcIpConfV2IgmpEnable,
       "rcIpConfV2AddrAssigned": rcIpConfV2AddrAssigned,
       "rcIpConfV2TriggeredUpdateEnable": rcIpConfV2TriggeredUpdateEnable,
       "rcIpConfV2RipAutoAggrerateEnable": rcIpConfV2RipAutoAggrerateEnable,
       "rcIpConfV2RipGenerateDefaultRoute": rcIpConfV2RipGenerateDefaultRoute,
       "rcIpConfV2AdvertiseWhenDown": rcIpConfV2AdvertiseWhenDown,
       "rcIpConfOspfV2Table": rcIpConfOspfV2Table,
       "rcIpConfOspfV2Entry": rcIpConfOspfV2Entry,
       "rcIpConfOspfV2IfIndex": rcIpConfOspfV2IfIndex,
       "rcIpConfOspfV2IpAddr": rcIpConfOspfV2IpAddr,
       "rcIpConfOspfV2RtrPriority": rcIpConfOspfV2RtrPriority,
       "rcIpConfOspfV2Metric": rcIpConfOspfV2Metric,
       "rcIpConfOspfV2AuthKey": rcIpConfOspfV2AuthKey,
       "rcIpConfOspfV2RowStatus": rcIpConfOspfV2RowStatus,
       "rcIpConfOspfV2HelloInterval": rcIpConfOspfV2HelloInterval,
       "rcIpConfOspfV2RtrDeadInterval": rcIpConfOspfV2RtrDeadInterval,
       "rcIpConfOspfV2IfAreaId": rcIpConfOspfV2IfAreaId,
       "rcIpConfOspfV2AuthType": rcIpConfOspfV2AuthType,
       "rcIpConfOspfAreaAggregateTable": rcIpConfOspfAreaAggregateTable,
       "rcIpConfOspfAreaAggregateEntry": rcIpConfOspfAreaAggregateEntry,
       "rcIpConfOspfAreaAggregateAreaID": rcIpConfOspfAreaAggregateAreaID,
       "rcIpConfOspfAreaAggregateLsdbType": rcIpConfOspfAreaAggregateLsdbType,
       "rcIpConfOspfAreaAggregateNet": rcIpConfOspfAreaAggregateNet,
       "rcIpConfOspfAreaAggregateMask": rcIpConfOspfAreaAggregateMask,
       "rcIpConfOspfAreaAggregateAdvertiseMetric": rcIpConfOspfAreaAggregateAdvertiseMetric,
       "rcIpConfOspfAreaAggregateEffect": rcIpConfOspfAreaAggregateEffect,
       "rcIpConfRsmltTable": rcIpConfRsmltTable,
       "rcIpConfRsmltEntry": rcIpConfRsmltEntry,
       "rcIpConfRsmltIfIndex": rcIpConfRsmltIfIndex,
       "rcIpConfRsmltHoldDownTimer": rcIpConfRsmltHoldDownTimer,
       "rcIpConfRsmltHoldUpTimer": rcIpConfRsmltHoldUpTimer,
       "rcIpConfRsmltRowStatus": rcIpConfRsmltRowStatus,
       "rcIpConfBfdTable": rcIpConfBfdTable,
       "rcIpConfBfdEntry": rcIpConfBfdEntry,
       "rcIpConfBfdIfIndex": rcIpConfBfdIfIndex,
       "rcIpConfBfdMinRxInterval": rcIpConfBfdMinRxInterval,
       "rcIpConfBfdTxInterval": rcIpConfBfdTxInterval,
       "rcIpConfBfdMultiplier": rcIpConfBfdMultiplier,
       "rcIpConfBfdRowStatus": rcIpConfBfdRowStatus,
       "rcIpConfBfdHoldOffInterval": rcIpConfBfdHoldOffInterval,
       "rcIpConfBfdStaticFlag": rcIpConfBfdStaticFlag,
       "rcIpAddrTable": rcIpAddrTable,
       "rcIpAddrEntry": rcIpAddrEntry,
       "rcIpAdEntIfIndex": rcIpAdEntIfIndex,
       "rcIpAdEntAddr": rcIpAdEntAddr,
       "rcIpAdEntNetMask": rcIpAdEntNetMask,
       "rcIpAdEntBcastAddrFormat": rcIpAdEntBcastAddrFormat,
       "rcIpAdEntReasmMaxSize": rcIpAdEntReasmMaxSize,
       "rcIpAdEntRowStatus": rcIpAdEntRowStatus,
       "rcIpAdEntVlanId": rcIpAdEntVlanId,
       "rcIpAdEntBrouterPort": rcIpAdEntBrouterPort,
       "rcIpAdEntMacOffset": rcIpAdEntMacOffset,
       "rcIpAdEntIfType": rcIpAdEntIfType,
       "rcIpAdEntVrfId": rcIpAdEntVrfId,
       "rcIpFlowTable": rcIpFlowTable,
       "rcIpFlowEntry": rcIpFlowEntry,
       "rcIpFlowSrcIpAddress": rcIpFlowSrcIpAddress,
       "rcIpFlowSrcIpPort": rcIpFlowSrcIpPort,
       "rcIpFlowDstIpAddress": rcIpFlowDstIpAddress,
       "rcIpFlowDstIpPort": rcIpFlowDstIpPort,
       "rcIpFlowProtocol": rcIpFlowProtocol,
       "rcIpFlowRowStatus": rcIpFlowRowStatus,
       "rcIpRouting": rcIpRouting,
       "rcIpRoutingRedistributeRipToOspf": rcIpRoutingRedistributeRipToOspf,
       "rcIpRoutingRedistributeRipToOspfEnable": rcIpRoutingRedistributeRipToOspfEnable,
       "rcIpRoutingRedistributeRipToOspfExplicitMetric": rcIpRoutingRedistributeRipToOspfExplicitMetric,
       "rcIpRoutingRedistributeRipToOspfUseExplicitMetric": rcIpRoutingRedistributeRipToOspfUseExplicitMetric,
       "rcIpRoutingRedistributeRipToOspfExternalMetricType": rcIpRoutingRedistributeRipToOspfExternalMetricType,
       "rcIpRoutingRedistributeOspfToRip": rcIpRoutingRedistributeOspfToRip,
       "rcIpRoutingRedistributeOspfToRipEnable": rcIpRoutingRedistributeOspfToRipEnable,
       "rcIpRoutingRedistributeOspfToRipExplicitMetric": rcIpRoutingRedistributeOspfToRipExplicitMetric,
       "rcIpRoutingRedistributeOspfToRipUseExplicitMetric": rcIpRoutingRedistributeOspfToRipUseExplicitMetric,
       "rcIpRoutingRedistributeDirectToOspf": rcIpRoutingRedistributeDirectToOspf,
       "rcIpRoutingRedistributeDirectToOspfEnable": rcIpRoutingRedistributeDirectToOspfEnable,
       "rcIpRoutingRedistributeDirectToOspfMethod": rcIpRoutingRedistributeDirectToOspfMethod,
       "rcIpRoutingRedistributeDirectToOspfExplicitMetric": rcIpRoutingRedistributeDirectToOspfExplicitMetric,
       "rcIpRoutingRedistributeDirectToOspfExternalMetricType": rcIpRoutingRedistributeDirectToOspfExternalMetricType,
       "rcIpRoutingRedistributeStaticToOspf": rcIpRoutingRedistributeStaticToOspf,
       "rcIpRoutingRedistributeStaticToOspfEnable": rcIpRoutingRedistributeStaticToOspfEnable,
       "rcIpRoutingRedistributeStaticToOspfExplicitMetric": rcIpRoutingRedistributeStaticToOspfExplicitMetric,
       "rcIpRoutingRedistributeStaticToOspfUseExplicitMetric": rcIpRoutingRedistributeStaticToOspfUseExplicitMetric,
       "rcIpRoutingRedistributeStaticToOspfExternalMetricType": rcIpRoutingRedistributeStaticToOspfExternalMetricType,
       "rcIpRoutingRedistributeStaticToOspfAdvertDefRte": rcIpRoutingRedistributeStaticToOspfAdvertDefRte,
       "rcIpRoutingRedistributeDirectToRip": rcIpRoutingRedistributeDirectToRip,
       "rcIpRoutingRedistributeDirectToRipEnable": rcIpRoutingRedistributeDirectToRipEnable,
       "rcIpRoutingRedistributeStaticToRip": rcIpRoutingRedistributeStaticToRip,
       "rcIpRoutingRedistributeStaticToRipEnable": rcIpRoutingRedistributeStaticToRipEnable,
       "rcIpConfIgmpTable": rcIpConfIgmpTable,
       "rcIpConfIgmpEntry": rcIpConfIgmpEntry,
       "rcIpConfIgmpIfIndex": rcIpConfIgmpIfIndex,
       "rcIpConfIgmpQueryInterval": rcIpConfIgmpQueryInterval,
       "rcIpConfIgmpVersion": rcIpConfIgmpVersion,
       "rcIpConfIgmpQueryMaxResponseTime": rcIpConfIgmpQueryMaxResponseTime,
       "rcIpConfIgmpQuerierPresentTimeout": rcIpConfIgmpQuerierPresentTimeout,
       "rcIpConfIgmpLeaveEnabled": rcIpConfIgmpLeaveEnabled,
       "rcIpConfIgmpRowStatus": rcIpConfIgmpRowStatus,
       "rcIpConfIgmpRobustness": rcIpConfIgmpRobustness,
       "rcIpConfIgmpLastMemberQueryInterval": rcIpConfIgmpLastMemberQueryInterval,
       "rcIpConfIgmpSnoopEnable": rcIpConfIgmpSnoopEnable,
       "rcIpConfIgmpProxySnoopEnable": rcIpConfIgmpProxySnoopEnable,
       "rcIgmpGroupTable": rcIgmpGroupTable,
       "rcIgmpGroupEntry": rcIgmpGroupEntry,
       "rcIgmpGroupIpAddress": rcIgmpGroupIpAddress,
       "rcIgmpGroupMembers": rcIgmpGroupMembers,
       "rcIgmpGroupInPort": rcIgmpGroupInPort,
       "rcIgmpGroupExpiration": rcIgmpGroupExpiration,
       "rcIgmpGroupIfIndex": rcIgmpGroupIfIndex,
       "rcIgmpGroupUserId": rcIgmpGroupUserId,
       "rcIgmpGroupMemberState": rcIgmpGroupMemberState,
       "rcIgmpGroupSessionTime": rcIgmpGroupSessionTime,
       "rcIpRouteTable": rcIpRouteTable,
       "rcIpRouteEntry": rcIpRouteEntry,
       "rcIpRouteDest": rcIpRouteDest,
       "rcIpRouteMask": rcIpRouteMask,
       "rcIpRouteNextHop": rcIpRouteNextHop,
       "rcIpRouteMetric": rcIpRouteMetric,
       "rcIpRouteIfIndex": rcIpRouteIfIndex,
       "rcIpRouteType": rcIpRouteType,
       "rcIpRouteProto": rcIpRouteProto,
       "rcIpRouteAge": rcIpRouteAge,
       "rcIpRouteRowStatus": rcIpRouteRowStatus,
       "rcIpRoutePref": rcIpRoutePref,
       "rcIpRouteAltSequence": rcIpRouteAltSequence,
       "rcIpRoutePathType": rcIpRoutePathType,
       "rcIpRouteSrcVrfId": rcIpRouteSrcVrfId,
       "rcIpRouteNextHopId": rcIpRouteNextHopId,
       "rcIpConfDhcpTable": rcIpConfDhcpTable,
       "rcIpConfDhcpEntry": rcIpConfDhcpEntry,
       "rcIpConfDhcpIfIndex": rcIpConfDhcpIfIndex,
       "rcIpConfDhcpMaxHop": rcIpConfDhcpMaxHop,
       "rcIpConfDhcpMinSec": rcIpConfDhcpMinSec,
       "rcIpConfDhcpMode": rcIpConfDhcpMode,
       "rcIpConfDhcpRowStatus": rcIpConfDhcpRowStatus,
       "rcIpConfDhcpNumRequests": rcIpConfDhcpNumRequests,
       "rcIpConfDhcpNumReplies": rcIpConfDhcpNumReplies,
       "rcIpConfDhcpAlwaysBroadcast": rcIpConfDhcpAlwaysBroadcast,
       "rcIpDhcpForwardTable": rcIpDhcpForwardTable,
       "rcIpDhcpForwardEntry": rcIpDhcpForwardEntry,
       "rcIpDhcpForwardAgentAddr": rcIpDhcpForwardAgentAddr,
       "rcIpDhcpForwardServerAddr": rcIpDhcpForwardServerAddr,
       "rcIpDhcpForwardEnable": rcIpDhcpForwardEnable,
       "rcIpDhcpForwardMode": rcIpDhcpForwardMode,
       "rcIpDhcpForwardRowStatus": rcIpDhcpForwardRowStatus,
       "rcIpFilter": rcIpFilter,
       "rcIpFilterFilterTableSize": rcIpFilterFilterTableSize,
       "rcIpFilterGlobalListTableSize": rcIpFilterGlobalListTableSize,
       "rcIpFilterBaseListTableSize": rcIpFilterBaseListTableSize,
       "rcIpFilterPortTableSize": rcIpFilterPortTableSize,
       "rcIpFilterNextAvailFilterId": rcIpFilterNextAvailFilterId,
       "rcIpFilterTable": rcIpFilterTable,
       "rcIpFilterEntry": rcIpFilterEntry,
       "rcIpFilterType": rcIpFilterType,
       "rcIpFilterDstAddr": rcIpFilterDstAddr,
       "rcIpFilterDstMask": rcIpFilterDstMask,
       "rcIpFilterSrcAddr": rcIpFilterSrcAddr,
       "rcIpFilterSrcMask": rcIpFilterSrcMask,
       "rcIpFilterId": rcIpFilterId,
       "rcIpFilterName": rcIpFilterName,
       "rcIpFilterProtocolType": rcIpFilterProtocolType,
       "rcIpFilterSrcPort": rcIpFilterSrcPort,
       "rcIpFilterSrcOption": rcIpFilterSrcOption,
       "rcIpFilterDstPort": rcIpFilterDstPort,
       "rcIpFilterDstOption": rcIpFilterDstOption,
       "rcIpFilterCopyToCpu": rcIpFilterCopyToCpu,
       "rcIpFilterMirror": rcIpFilterMirror,
       "rcIpFilterHighPriority": rcIpFilterHighPriority,
       "rcIpFilterTcpConnect": rcIpFilterTcpConnect,
       "rcIpFilterIeeeVlanPriority": rcIpFilterIeeeVlanPriority,
       "rcIpFilterUsePktLimit": rcIpFilterUsePktLimit,
       "rcIpFilterPktLimit": rcIpFilterPktLimit,
       "rcIpFilterRowStatus": rcIpFilterRowStatus,
       "rcIpFilterMode": rcIpFilterMode,
       "rcIpFilterIpTosRule": rcIpFilterIpTosRule,
       "rcIpFilterStopOnMatch": rcIpFilterStopOnMatch,
       "rcIpFilterDiffServMatchIeee8021PEnable": rcIpFilterDiffServMatchIeee8021PEnable,
       "rcIpFilterDiffServMatchIeee8021P": rcIpFilterDiffServMatchIeee8021P,
       "rcIpFilterDiffServMatchDscpEnable": rcIpFilterDiffServMatchDscpEnable,
       "rcIpFilterDiffServMatchDscp": rcIpFilterDiffServMatchDscp,
       "rcIpFilterDiffServMatchDscpReserved": rcIpFilterDiffServMatchDscpReserved,
       "rcIpFilterDiffServModifyIeee8021PEnable": rcIpFilterDiffServModifyIeee8021PEnable,
       "rcIpFilterDiffServModifyIeee8021P": rcIpFilterDiffServModifyIeee8021P,
       "rcIpFilterDiffServModifyDscpEnable": rcIpFilterDiffServModifyDscpEnable,
       "rcIpFilterDiffServModifyDscp": rcIpFilterDiffServModifyDscp,
       "rcIpFilterDiffServModifyDscpReserved": rcIpFilterDiffServModifyDscpReserved,
       "rcIpFilterDiffServTrafficProfileId": rcIpFilterDiffServTrafficProfileId,
       "rcIpFilterMatchIcmpRequest": rcIpFilterMatchIcmpRequest,
       "rcIpFilterMatchIpFragment": rcIpFilterMatchIpFragment,
       "rcIpFilterStatisticEnable": rcIpFilterStatisticEnable,
       "rcIpFilterInOctets": rcIpFilterInOctets,
       "rcIpFilterInPackets": rcIpFilterInPackets,
       "rcIpFilterRateLimitDiscardPackets": rcIpFilterRateLimitDiscardPackets,
       "rcIpFilterNextHopForwardIpAddr": rcIpFilterNextHopForwardIpAddr,
       "rcIpFilterNextHopUnreachableDropEnable": rcIpFilterNextHopUnreachableDropEnable,
       "rcIpFilterProtocolTypeUsrDefined": rcIpFilterProtocolTypeUsrDefined,
       "rcIpFilterIngressOctets": rcIpFilterIngressOctets,
       "rcIpFilterIngressPkts": rcIpFilterIngressPkts,
       "rcIpFilterRateLimitDiscardPkts": rcIpFilterRateLimitDiscardPkts,
       "rcIpFilterGlobalListTable": rcIpFilterGlobalListTable,
       "rcIpFilterGlobalListEntry": rcIpFilterGlobalListEntry,
       "rcIpFilterGlobalListId": rcIpFilterGlobalListId,
       "rcIpFilterGlobalListName": rcIpFilterGlobalListName,
       "rcIpFilterGlobalListFilterIdListSize": rcIpFilterGlobalListFilterIdListSize,
       "rcIpFilterGlobalListFilterIdList": rcIpFilterGlobalListFilterIdList,
       "rcIpFilterGlobalListRowStatus": rcIpFilterGlobalListRowStatus,
       "rcIpFilterGlobalListMemberPorts": rcIpFilterGlobalListMemberPorts,
       "rcIpFilterBaseListTable": rcIpFilterBaseListTable,
       "rcIpFilterBaseListEntry": rcIpFilterBaseListEntry,
       "rcIpFilterBaseListId": rcIpFilterBaseListId,
       "rcIpFilterBaseListName": rcIpFilterBaseListName,
       "rcIpFilterBaseListFilterIdListSize": rcIpFilterBaseListFilterIdListSize,
       "rcIpFilterBaseListFilterIdList": rcIpFilterBaseListFilterIdList,
       "rcIpFilterBaseListRowStatus": rcIpFilterBaseListRowStatus,
       "rcIpFilterBaseListMemberPorts": rcIpFilterBaseListMemberPorts,
       "rcIpFilterPortTable": rcIpFilterPortTable,
       "rcIpFilterPortEntry": rcIpFilterPortEntry,
       "rcIpFilterPortIfIndex": rcIpFilterPortIfIndex,
       "rcIpFilterPortFilterListSize": rcIpFilterPortFilterListSize,
       "rcIpFilterPortFilterList": rcIpFilterPortFilterList,
       "rcIpFilterPortMode": rcIpFilterPortMode,
       "rcIpFilterPortEnable": rcIpFilterPortEnable,
       "rcIpFilterPortRowStatus": rcIpFilterPortRowStatus,
       "rcIpFilterPortDefaultAction": rcIpFilterPortDefaultAction,
       "rcIpFilterPortNumGlobalFilters": rcIpFilterPortNumGlobalFilters,
       "rcIpFilterPortNumBaseFilters": rcIpFilterPortNumBaseFilters,
       "rcIpFilterMediaDevTableSize": rcIpFilterMediaDevTableSize,
       "rcIpFilterMediaDevTable": rcIpFilterMediaDevTable,
       "rcIpFilterMediaDevEntry": rcIpFilterMediaDevEntry,
       "rcIpFilterMediaDevId": rcIpFilterMediaDevId,
       "rcIpFilterMediaDevName": rcIpFilterMediaDevName,
       "rcIpFilterMediaDevPlatformType": rcIpFilterMediaDevPlatformType,
       "rcIpFilterMediaDevDeviceType": rcIpFilterMediaDevDeviceType,
       "rcIpFilterMediaDevIpAddress": rcIpFilterMediaDevIpAddress,
       "rcIpFilterMediaDevStreamsIds": rcIpFilterMediaDevStreamsIds,
       "rcIpFilterMediaDevMemberPorts": rcIpFilterMediaDevMemberPorts,
       "rcIpFilterMediaDevStatisticEnable": rcIpFilterMediaDevStatisticEnable,
       "rcIpFilterMediaDevRowStatus": rcIpFilterMediaDevRowStatus,
       "rcIpFilterMediaStreamTableSize": rcIpFilterMediaStreamTableSize,
       "rcIpFilterMediaStreamTable": rcIpFilterMediaStreamTable,
       "rcIpFilterMediaStreamEntry": rcIpFilterMediaStreamEntry,
       "rcIpFilterMediaStreamMediaId": rcIpFilterMediaStreamMediaId,
       "rcIpFilterMediaStreamStreamId": rcIpFilterMediaStreamStreamId,
       "rcIpFilterMediaStreamName": rcIpFilterMediaStreamName,
       "rcIpFilterMediaStreamProtocol": rcIpFilterMediaStreamProtocol,
       "rcIpFilterMediaStreamPortMin": rcIpFilterMediaStreamPortMin,
       "rcIpFilterMediaStreamPortMax": rcIpFilterMediaStreamPortMax,
       "rcIpFilterMediaStreamPortOption": rcIpFilterMediaStreamPortOption,
       "rcIpFilterMediaStreamType": rcIpFilterMediaStreamType,
       "rcIpFilterMediaStreamRemarkDscp": rcIpFilterMediaStreamRemarkDscp,
       "rcIpFilterMediaStreamMatchDscp": rcIpFilterMediaStreamMatchDscp,
       "rcIpFilterMediaStreamRowStatus": rcIpFilterMediaStreamRowStatus,
       "rcIpPolicy": rcIpPolicy,
       "rcIpPolicyAddrTableSize": rcIpPolicyAddrTableSize,
       "rcIpPolicyAddrTable": rcIpPolicyAddrTable,
       "rcIpPolicyAddrEntry": rcIpPolicyAddrEntry,
       "rcIpPolicyAddrIpAddr": rcIpPolicyAddrIpAddr,
       "rcIpPolicyAddrId": rcIpPolicyAddrId,
       "rcIpPolicyAddrAddrListIdListSize": rcIpPolicyAddrAddrListIdListSize,
       "rcIpPolicyAddrAddrListIdList": rcIpPolicyAddrAddrListIdList,
       "rcIpPolicyAddrRowStatus": rcIpPolicyAddrRowStatus,
       "rcIpPolicyNetTableSize": rcIpPolicyNetTableSize,
       "rcIpPolicyNetTable": rcIpPolicyNetTable,
       "rcIpPolicyNetEntry": rcIpPolicyNetEntry,
       "rcIpPolicyNetAddr": rcIpPolicyNetAddr,
       "rcIpPolicyNetMask": rcIpPolicyNetMask,
       "rcIpPolicyNetId": rcIpPolicyNetId,
       "rcIpPolicyNetNetListIdListSize": rcIpPolicyNetNetListIdListSize,
       "rcIpPolicyNetNetListIdList": rcIpPolicyNetNetListIdList,
       "rcIpPolicyNetRowStatus": rcIpPolicyNetRowStatus,
       "rcIpPolicyAddrListTableSize": rcIpPolicyAddrListTableSize,
       "rcIpPolicyAddrListTable": rcIpPolicyAddrListTable,
       "rcIpPolicyAddrListEntry": rcIpPolicyAddrListEntry,
       "rcIpPolicyAddrListId": rcIpPolicyAddrListId,
       "rcIpPolicyAddrListName": rcIpPolicyAddrListName,
       "rcIpPolicyAddrListIdListSize": rcIpPolicyAddrListIdListSize,
       "rcIpPolicyAddrListIdList": rcIpPolicyAddrListIdList,
       "rcIpPolicyAddrListPolicyIdListSize": rcIpPolicyAddrListPolicyIdListSize,
       "rcIpPolicyAddrListPolicyIdList": rcIpPolicyAddrListPolicyIdList,
       "rcIpPolicyAddrListRowStatus": rcIpPolicyAddrListRowStatus,
       "rcIpPolicyRipAnnounceTableSize": rcIpPolicyRipAnnounceTableSize,
       "rcIpPolicyRipAnnounceTable": rcIpPolicyRipAnnounceTable,
       "rcIpPolicyRipAnnounceEntry": rcIpPolicyRipAnnounceEntry,
       "rcIpPolicyRipAnnounceId": rcIpPolicyRipAnnounceId,
       "rcIpPolicyRipAnnounceName": rcIpPolicyRipAnnounceName,
       "rcIpPolicyRipAnnounceEnable": rcIpPolicyRipAnnounceEnable,
       "rcIpPolicyRipAnnounceExactNetListId": rcIpPolicyRipAnnounceExactNetListId,
       "rcIpPolicyRipAnnounceRangeNetListId": rcIpPolicyRipAnnounceRangeNetListId,
       "rcIpPolicyRipAnnounceRipGatewayListId": rcIpPolicyRipAnnounceRipGatewayListId,
       "rcIpPolicyRipAnnounceRipInterfaceListId": rcIpPolicyRipAnnounceRipInterfaceListId,
       "rcIpPolicyRipAnnounceOspfRouterListId": rcIpPolicyRipAnnounceOspfRouterListId,
       "rcIpPolicyRipAnnounceAnnounceInterfaceListId": rcIpPolicyRipAnnounceAnnounceInterfaceListId,
       "rcIpPolicyRipAnnouncePrecedence": rcIpPolicyRipAnnouncePrecedence,
       "rcIpPolicyRipAnnounceRouteSource": rcIpPolicyRipAnnounceRouteSource,
       "rcIpPolicyRipAnnounceAdvertiseNetListId": rcIpPolicyRipAnnounceAdvertiseNetListId,
       "rcIpPolicyRipAnnounceAction": rcIpPolicyRipAnnounceAction,
       "rcIpPolicyRipAnnounceOspfRouteType": rcIpPolicyRipAnnounceOspfRouteType,
       "rcIpPolicyRipAnnounceRipMetric": rcIpPolicyRipAnnounceRipMetric,
       "rcIpPolicyRipAnnounceRowStatus": rcIpPolicyRipAnnounceRowStatus,
       "rcIpPolicyOspfAnnounceTableSize": rcIpPolicyOspfAnnounceTableSize,
       "rcIpPolicyOspfAnnounceTable": rcIpPolicyOspfAnnounceTable,
       "rcIpPolicyOspfAnnounceEntry": rcIpPolicyOspfAnnounceEntry,
       "rcIpPolicyOspfAnnounceId": rcIpPolicyOspfAnnounceId,
       "rcIpPolicyOspfAnnounceName": rcIpPolicyOspfAnnounceName,
       "rcIpPolicyOspfAnnounceEnable": rcIpPolicyOspfAnnounceEnable,
       "rcIpPolicyOspfAnnounceExactNetListId": rcIpPolicyOspfAnnounceExactNetListId,
       "rcIpPolicyOspfAnnounceRangeNetListId": rcIpPolicyOspfAnnounceRangeNetListId,
       "rcIpPolicyOspfAnnounceRipGatewayListId": rcIpPolicyOspfAnnounceRipGatewayListId,
       "rcIpPolicyOspfAnnounceRipInterfaceListId": rcIpPolicyOspfAnnounceRipInterfaceListId,
       "rcIpPolicyOspfAnnouncePrecedence": rcIpPolicyOspfAnnouncePrecedence,
       "rcIpPolicyOspfAnnounceRouteSource": rcIpPolicyOspfAnnounceRouteSource,
       "rcIpPolicyOspfAnnounceAdvertiseNetListId": rcIpPolicyOspfAnnounceAdvertiseNetListId,
       "rcIpPolicyOspfAnnounceAction": rcIpPolicyOspfAnnounceAction,
       "rcIpPolicyOspfAnnounceExtMetricType": rcIpPolicyOspfAnnounceExtMetricType,
       "rcIpPolicyOspfAnnounceExtMetric": rcIpPolicyOspfAnnounceExtMetric,
       "rcIpPolicyOspfAnnounceRowStatus": rcIpPolicyOspfAnnounceRowStatus,
       "rcIpPolicyRipAcceptTableSize": rcIpPolicyRipAcceptTableSize,
       "rcIpPolicyRipAcceptTable": rcIpPolicyRipAcceptTable,
       "rcIpPolicyRipAcceptEntry": rcIpPolicyRipAcceptEntry,
       "rcIpPolicyRipAcceptId": rcIpPolicyRipAcceptId,
       "rcIpPolicyRipAcceptName": rcIpPolicyRipAcceptName,
       "rcIpPolicyRipAcceptEnable": rcIpPolicyRipAcceptEnable,
       "rcIpPolicyRipAcceptExactNetListId": rcIpPolicyRipAcceptExactNetListId,
       "rcIpPolicyRipAcceptRangeNetListId": rcIpPolicyRipAcceptRangeNetListId,
       "rcIpPolicyRipAcceptRipGatewayListId": rcIpPolicyRipAcceptRipGatewayListId,
       "rcIpPolicyRipAcceptRipInterfaceListId": rcIpPolicyRipAcceptRipInterfaceListId,
       "rcIpPolicyRipAcceptPrecedence": rcIpPolicyRipAcceptPrecedence,
       "rcIpPolicyRipAcceptAction": rcIpPolicyRipAcceptAction,
       "rcIpPolicyRipAcceptInjectNetListId": rcIpPolicyRipAcceptInjectNetListId,
       "rcIpPolicyRipAcceptApplyMask": rcIpPolicyRipAcceptApplyMask,
       "rcIpPolicyRipAcceptRowStatus": rcIpPolicyRipAcceptRowStatus,
       "rcIpPolicyOspfAcceptTableSize": rcIpPolicyOspfAcceptTableSize,
       "rcIpPolicyOspfAcceptTable": rcIpPolicyOspfAcceptTable,
       "rcIpPolicyOspfAcceptEntry": rcIpPolicyOspfAcceptEntry,
       "rcIpPolicyOspfAcceptId": rcIpPolicyOspfAcceptId,
       "rcIpPolicyOspfAcceptName": rcIpPolicyOspfAcceptName,
       "rcIpPolicyOspfAcceptEnable": rcIpPolicyOspfAcceptEnable,
       "rcIpPolicyOspfAcceptExactNetListId": rcIpPolicyOspfAcceptExactNetListId,
       "rcIpPolicyOspfAcceptRangeNetListId": rcIpPolicyOspfAcceptRangeNetListId,
       "rcIpPolicyOspfAcceptPrecedence": rcIpPolicyOspfAcceptPrecedence,
       "rcIpPolicyOspfAcceptAction": rcIpPolicyOspfAcceptAction,
       "rcIpPolicyOspfAcceptInjectNetListId": rcIpPolicyOspfAcceptInjectNetListId,
       "rcIpPolicyOspfAcceptExtType": rcIpPolicyOspfAcceptExtType,
       "rcIpPolicyOspfAcceptRowStatus": rcIpPolicyOspfAcceptRowStatus,
       "rcIpPolicyNetListTableSize": rcIpPolicyNetListTableSize,
       "rcIpPolicyNetListTable": rcIpPolicyNetListTable,
       "rcIpPolicyNetListEntry": rcIpPolicyNetListEntry,
       "rcIpPolicyNetListId": rcIpPolicyNetListId,
       "rcIpPolicyNetListName": rcIpPolicyNetListName,
       "rcIpPolicyNetListIdListSize": rcIpPolicyNetListIdListSize,
       "rcIpPolicyNetListIdList": rcIpPolicyNetListIdList,
       "rcIpPolicyNetListPolicyIdListSize": rcIpPolicyNetListPolicyIdListSize,
       "rcIpPolicyNetListPolicyIdList": rcIpPolicyNetListPolicyIdList,
       "rcIpPolicyNetListRowStatus": rcIpPolicyNetListRowStatus,
       "rcIpDvmrp": rcIpDvmrp,
       "rcIpDvmrpGlobal": rcIpDvmrpGlobal,
       "rcIpDvmrpGlobalEnable": rcIpDvmrpGlobalEnable,
       "rcIpDvmrpGlobalUpdateInterval": rcIpDvmrpGlobalUpdateInterval,
       "rcIpDvmrpGlobalTriggeredUpdateInterval": rcIpDvmrpGlobalTriggeredUpdateInterval,
       "rcIpDvmrpGlobalLeafTimeOut": rcIpDvmrpGlobalLeafTimeOut,
       "rcIpDvmrpGlobalNbrTimeOut": rcIpDvmrpGlobalNbrTimeOut,
       "rcIpDvmrpGlobalNbrProbeInterval": rcIpDvmrpGlobalNbrProbeInterval,
       "rcIpDvmrpGlobalRouteExpireTimeOut": rcIpDvmrpGlobalRouteExpireTimeOut,
       "rcIpDvmrpGlobalFwdCacheTimeOut": rcIpDvmrpGlobalFwdCacheTimeOut,
       "rcIpDvmrpGlobalRouteDiscardTimeOut": rcIpDvmrpGlobalRouteDiscardTimeOut,
       "rcIpDvmrpGlobalRouteSwitchTimeOut": rcIpDvmrpGlobalRouteSwitchTimeOut,
       "rcIpDvmrpGlobalGenerateTrap": rcIpDvmrpGlobalGenerateTrap,
       "rcIpDvmrpGlobalGenerateLog": rcIpDvmrpGlobalGenerateLog,
       "rcIpDvmrpTable": rcIpDvmrpTable,
       "rcIpDvmrpTableEntry": rcIpDvmrpTableEntry,
       "rcIpDvmrpTableIfIndex": rcIpDvmrpTableIfIndex,
       "rcIpDvmrpTableEnable": rcIpDvmrpTableEnable,
       "rcIpDvmrpTableMetric": rcIpDvmrpTableMetric,
       "rcIpDvmrpTableAdvSelf": rcIpDvmrpTableAdvSelf,
       "rcIpDvmrpTableLocalAddr": rcIpDvmrpTableLocalAddr,
       "rcIpDvmrpTableInPolicyName": rcIpDvmrpTableInPolicyName,
       "rcIpDvmrpTableOutPolicyName": rcIpDvmrpTableOutPolicyName,
       "rcIpDvmrpTableDefRtLis": rcIpDvmrpTableDefRtLis,
       "rcIpDvmrpTableDefRtSup": rcIpDvmrpTableDefRtSup,
       "rcIpDvmrpTableDefRtMet": rcIpDvmrpTableDefRtMet,
       "rcIpDvmrpTableInterfaceType": rcIpDvmrpTableInterfaceType,
       "rcIpUdp": rcIpUdp,
       "rcIpUdpProtocolTableSize": rcIpUdpProtocolTableSize,
       "rcIpUdpProtocolTable": rcIpUdpProtocolTable,
       "rcIpUdpProtocolEntry": rcIpUdpProtocolEntry,
       "rcIpUdpProtocolPortNumber": rcIpUdpProtocolPortNumber,
       "rcIpUdpProtocolName": rcIpUdpProtocolName,
       "rcIpUdpProtocolRowStatus": rcIpUdpProtocolRowStatus,
       "rcIpUdpPortFwdTableSize": rcIpUdpPortFwdTableSize,
       "rcIpUdpPortFwdTable": rcIpUdpPortFwdTable,
       "rcIpUdpPortFwdEntry": rcIpUdpPortFwdEntry,
       "rcIpUdpPortFwdDestPort": rcIpUdpPortFwdDestPort,
       "rcIpUdpPortFwdDestAddr": rcIpUdpPortFwdDestAddr,
       "rcIpUdpPortFwdId": rcIpUdpPortFwdId,
       "rcIpUdpPortFwdFwdListIdListSize": rcIpUdpPortFwdFwdListIdListSize,
       "rcIpUdpPortFwdFwdListIdList": rcIpUdpPortFwdFwdListIdList,
       "rcIpUdpPortFwdNumFwdPackets": rcIpUdpPortFwdNumFwdPackets,
       "rcIpUdpPortFwdNumDropPacketsTtlExpired": rcIpUdpPortFwdNumDropPacketsTtlExpired,
       "rcIpUdpPortFwdNumDropPacketsDestUnreach": rcIpUdpPortFwdNumDropPacketsDestUnreach,
       "rcIpUdpPortFwdRowStatus": rcIpUdpPortFwdRowStatus,
       "rcIpUdpPortFwdListTableSize": rcIpUdpPortFwdListTableSize,
       "rcIpUdpPortFwdListTable": rcIpUdpPortFwdListTable,
       "rcIpUdpPortFwdListEntry": rcIpUdpPortFwdListEntry,
       "rcIpUdpPortFwdListId": rcIpUdpPortFwdListId,
       "rcIpUdpPortFwdListName": rcIpUdpPortFwdListName,
       "rcIpUdpPortFwdListFwdIdListSize": rcIpUdpPortFwdListFwdIdListSize,
       "rcIpUdpPortFwdListFwdIdList": rcIpUdpPortFwdListFwdIdList,
       "rcIpUdpPortFwdListRowStatus": rcIpUdpPortFwdListRowStatus,
       "rcIpUdpConfBroadcastIntfTableSize": rcIpUdpConfBroadcastIntfTableSize,
       "rcIpUdpConfBroadcastIntfTable": rcIpUdpConfBroadcastIntfTable,
       "rcIpUdpConfBroadcastIntfEntry": rcIpUdpConfBroadcastIntfEntry,
       "rcIpUdpConfBroadcastIntfLocalIfAddr": rcIpUdpConfBroadcastIntfLocalIfAddr,
       "rcIpUdpConfBroadcastIntfUdpPortFwdListId": rcIpUdpConfBroadcastIntfUdpPortFwdListId,
       "rcIpUdpConfBroadcastIntfMaxTtl": rcIpUdpConfBroadcastIntfMaxTtl,
       "rcIpUdpConfBroadcastIntfNumRxPkts": rcIpUdpConfBroadcastIntfNumRxPkts,
       "rcIpUdpConfBroadcastIntfNumFwdPkts": rcIpUdpConfBroadcastIntfNumFwdPkts,
       "rcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired": rcIpUdpConfBroadcastIntfNumDropPktsMaxTtlExpired,
       "rcIpUdpConfBroadcastIntfNumDropPktsDestUnreach": rcIpUdpConfBroadcastIntfNumDropPktsDestUnreach,
       "rcIpUdpConfBroadcastIntfNumDropPktsUnknownPort": rcIpUdpConfBroadcastIntfNumDropPktsUnknownPort,
       "rcIpUdpConfBroadcastIntfRowStatus": rcIpUdpConfBroadcastIntfRowStatus,
       "rcIpUdpConfBroadcastIntfBroadCastMask": rcIpUdpConfBroadcastIntfBroadCastMask,
       "rcIpTosRule": rcIpTosRule,
       "rcIpTosRuleAndMask": rcIpTosRuleAndMask,
       "rcIpTosRuleOrRule1": rcIpTosRuleOrRule1,
       "rcIpTosRuleOrRule2": rcIpTosRuleOrRule2,
       "rcIpTosRuleOrRule3": rcIpTosRuleOrRule3,
       "rcIpTosRuleTosPriorityEnable": rcIpTosRuleTosPriorityEnable,
       "rcIpTosRuleTosThreshold": rcIpTosRuleTosThreshold,
       "rcIpStaticRoute": rcIpStaticRoute,
       "rcIpStaticRouteTableSize": rcIpStaticRouteTableSize,
       "rcIpStaticRouteTable": rcIpStaticRouteTable,
       "rcIpStaticRouteEntry": rcIpStaticRouteEntry,
       "rcIpStaticRouteDest": rcIpStaticRouteDest,
       "rcIpStaticRouteMask": rcIpStaticRouteMask,
       "rcIpStaticRouteNextHop": rcIpStaticRouteNextHop,
       "rcIpStaticRouteMetric": rcIpStaticRouteMetric,
       "rcIpStaticRouteIfIndex": rcIpStaticRouteIfIndex,
       "rcIpStaticRoutePreference": rcIpStaticRoutePreference,
       "rcIpStaticRouteEnable": rcIpStaticRouteEnable,
       "rcIpStaticRouteStatus": rcIpStaticRouteStatus,
       "rcIpStaticRouteRowStatus": rcIpStaticRouteRowStatus,
       "rcIpStaticRouteLocalNextHop": rcIpStaticRouteLocalNextHop,
       "rcIpStaticRouteBfdTableSize": rcIpStaticRouteBfdTableSize,
       "rcIpStaticRouteBfdTable": rcIpStaticRouteBfdTable,
       "rcIpStaticRouteBfdEntry": rcIpStaticRouteBfdEntry,
       "rcIpStaticRouteBfdNextHop": rcIpStaticRouteBfdNextHop,
       "rcIpStaticRouteBfdRowStatus": rcIpStaticRouteBfdRowStatus,
       "rcIpPim": rcIpPim,
       "rcIpPimGlobal": rcIpPimGlobal,
       "rcIpPimGlobalEnable": rcIpPimGlobalEnable,
       "rcIpPimGlobalMode": rcIpPimGlobalMode,
       "rcIpPimGlobalMbr": rcIpPimGlobalMbr,
       "rcIpPimGlobalRegisterSuppTimer": rcIpPimGlobalRegisterSuppTimer,
       "rcIpPimGlobalInterfaceTableSize": rcIpPimGlobalInterfaceTableSize,
       "rcIpPimGlobalUniRouteChgTimeOut": rcIpPimGlobalUniRouteChgTimeOut,
       "rcIpPimGlobalDiscardDataTimeOut": rcIpPimGlobalDiscardDataTimeOut,
       "rcIpPimGlobalCRPADVTimeOut": rcIpPimGlobalCRPADVTimeOut,
       "rcIpPimGlobalBootStrapPeriod": rcIpPimGlobalBootStrapPeriod,
       "rcIpPimGlobalStaticRP": rcIpPimGlobalStaticRP,
       "rcIpPimGlobalActivityChkInterval": rcIpPimGlobalActivityChkInterval,
       "rcIpPimGlobalFwdCacheTimeOut": rcIpPimGlobalFwdCacheTimeOut,
       "rcIpPimGlobalFastJoinPrune": rcIpPimGlobalFastJoinPrune,
       "rcIpPimGlobalStaticRPSpecificRt": rcIpPimGlobalStaticRPSpecificRt,
       "rcIpPimTable": rcIpPimTable,
       "rcIpPimEntry": rcIpPimEntry,
       "rcIpPimIfIndex": rcIpPimIfIndex,
       "rcIpPimEnable": rcIpPimEnable,
       "rcIpPimMode": rcIpPimMode,
       "rcIpPimHelloInterval": rcIpPimHelloInterval,
       "rcIpPimJoinPruneInterval": rcIpPimJoinPruneInterval,
       "rcIpPimCBSRPreference": rcIpPimCBSRPreference,
       "rcIpPimIntfType": rcIpPimIntfType,
       "rcIpPimInterfaceTable": rcIpPimInterfaceTable,
       "rcIpPimInterfaceEntry": rcIpPimInterfaceEntry,
       "rcIpPimInterfaceIfIndex": rcIpPimInterfaceIfIndex,
       "rcIpPimInterfaceOperState": rcIpPimInterfaceOperState,
       "rcIpPimInterfaceType": rcIpPimInterfaceType,
       "rcIpPimInterfaceCBSREnable": rcIpPimInterfaceCBSREnable,
       "rcIpPimStaticRPTable": rcIpPimStaticRPTable,
       "rcIpPimStaticRPEntry": rcIpPimStaticRPEntry,
       "rcIpPimStaticRPGroupAddress": rcIpPimStaticRPGroupAddress,
       "rcIpPimStaticRPGroupMask": rcIpPimStaticRPGroupMask,
       "rcIpPimStaticRPAddress": rcIpPimStaticRPAddress,
       "rcIpPimStaticRPRowStatus": rcIpPimStaticRPRowStatus,
       "rcIpPimStaticRPStatus": rcIpPimStaticRPStatus,
       "rcIpPimCurrBsr": rcIpPimCurrBsr,
       "rcIpPimCurrBsrAddress": rcIpPimCurrBsrAddress,
       "rcIpPimCurrBsrFragmentTag": rcIpPimCurrBsrFragmentTag,
       "rcIpPimCurrBsrHashMask": rcIpPimCurrBsrHashMask,
       "rcIpPimCurrBsrPriority": rcIpPimCurrBsrPriority,
       "rcIpPimCurrBsrBootStrapTimer": rcIpPimCurrBsrBootStrapTimer,
       "rcIpPimVirtualNbrTable": rcIpPimVirtualNbrTable,
       "rcIpPimVirtualNbrEntry": rcIpPimVirtualNbrEntry,
       "rcIpPimVirtualNbrAddress": rcIpPimVirtualNbrAddress,
       "rcIpPimVirtualNbrIfIndex": rcIpPimVirtualNbrIfIndex,
       "rcIpPimVirtualNbrRowStatus": rcIpPimVirtualNbrRowStatus,
       "rcIpMulticastArpTable": rcIpMulticastArpTable,
       "rcIpMulticastArpEntry": rcIpMulticastArpEntry,
       "rcIpMulticastArpVlanId": rcIpMulticastArpVlanId,
       "rcIpMulticastArpMacAddress": rcIpMulticastArpMacAddress,
       "rcIpMulticastArpIpAddress": rcIpMulticastArpIpAddress,
       "rcIpMulticastArpPorts": rcIpMulticastArpPorts,
       "rcIpMulticastArpNumMltIds": rcIpMulticastArpNumMltIds,
       "rcIpMulticastArpMltIds": rcIpMulticastArpMltIds,
       "rcIpMulticastArpRowStatus": rcIpMulticastArpRowStatus,
       "rcIpMulticastTable": rcIpMulticastTable,
       "rcIpMulticastEntry": rcIpMulticastEntry,
       "rcIpMulticastIfIndex": rcIpMulticastIfIndex,
       "rcIpMulticastMulticastIp": rcIpMulticastMulticastIp,
       "rcIpCops": rcIpCops,
       "rcCopsGlobalEnable": rcCopsGlobalEnable,
       "rcIpRipInterface": rcIpRipInterface,
       "rcIpRipInterfaceTable": rcIpRipInterfaceTable,
       "rcIpRipInterfaceEntry": rcIpRipInterfaceEntry,
       "rcIpRipInterfaceAddress": rcIpRipInterfaceAddress,
       "rcIpRipInterfaceIfIndex": rcIpRipInterfaceIfIndex,
       "rcIpRipInterfaceRipEnable": rcIpRipInterfaceRipEnable,
       "rcIpRipInterfaceAccDefRte": rcIpRipInterfaceAccDefRte,
       "rcIpRipInterfaceAdvDefRte": rcIpRipInterfaceAdvDefRte,
       "rcIpRipInterfaceAutoAggregate": rcIpRipInterfaceAutoAggregate,
       "rcIpRipInterfaceCost": rcIpRipInterfaceCost,
       "rcIpRipInterfaceListen": rcIpRipInterfaceListen,
       "rcIpRipInterfacePoison": rcIpRipInterfacePoison,
       "rcIpRipInterfaceSupply": rcIpRipInterfaceSupply,
       "rcIpRipInterfaceTriggeredUpdate": rcIpRipInterfaceTriggeredUpdate,
       "rcIpRipInterfaceInPolicy": rcIpRipInterfaceInPolicy,
       "rcIpRipInterfaceOutPolicy": rcIpRipInterfaceOutPolicy,
       "rcIpRipInterfaceProxyAnnounceFlag": rcIpRipInterfaceProxyAnnounceFlag,
       "rcIpRipInterfaceHolddown": rcIpRipInterfaceHolddown,
       "rcIpRipInterfaceTimeout": rcIpRipInterfaceTimeout,
       "rcIpMulticastTimedPruneTable": rcIpMulticastTimedPruneTable,
       "rcIpMulticastTimedPruneEntry": rcIpMulticastTimedPruneEntry,
       "rcIpMulticastTimedPruneGroupAddress": rcIpMulticastTimedPruneGroupAddress,
       "rcIpMulticastTimedPruneSourceAddress": rcIpMulticastTimedPruneSourceAddress,
       "rcIpMulticastTimedPruneSrcSubnetMask": rcIpMulticastTimedPruneSrcSubnetMask,
       "rcIpMulticastTimedPruneAgingTimer": rcIpMulticastTimedPruneAgingTimer,
       "rcIpMulticastTimedPruneTimeLeft": rcIpMulticastTimedPruneTimeLeft,
       "rcIpMulticastTimedPruneLastActivity": rcIpMulticastTimedPruneLastActivity,
       "rcIpMulticastTimedPruneRowStatus": rcIpMulticastTimedPruneRowStatus,
       "rcIpConfIcmpRdiscTable": rcIpConfIcmpRdiscTable,
       "rcIpConfIcmpRdiscEntry": rcIpConfIcmpRdiscEntry,
       "rcIpConfIcmpRdiscIfIndex": rcIpConfIcmpRdiscIfIndex,
       "rcIpConfIcmpRdiscAdvAddress": rcIpConfIcmpRdiscAdvAddress,
       "rcIpConfIcmpRdiscAdvFlag": rcIpConfIcmpRdiscAdvFlag,
       "rcIpConfIcmpRdiscAdvLifetime": rcIpConfIcmpRdiscAdvLifetime,
       "rcIpConfIcmpRdiscMaxAdvInterval": rcIpConfIcmpRdiscMaxAdvInterval,
       "rcIpConfIcmpRdiscMinAdvInterval": rcIpConfIcmpRdiscMinAdvInterval,
       "rcIpConfIcmpRdiscPreferenceLevel": rcIpConfIcmpRdiscPreferenceLevel,
       "rcIpMulticastSoftwareForwarding": rcIpMulticastSoftwareForwarding,
       "rcIpMulticastSoftwareForwardingEnable": rcIpMulticastSoftwareForwardingEnable,
       "rcIpMulticastSoftwareForwardingThreshold": rcIpMulticastSoftwareForwardingThreshold,
       "rcIpMrouteHw": rcIpMrouteHw,
       "rcIpMrouteHwTable": rcIpMrouteHwTable,
       "rcIpMrouteHwEntry": rcIpMrouteHwEntry,
       "rcIpMrouteHwGroupAddress": rcIpMrouteHwGroupAddress,
       "rcIpMrouteHwSubnet": rcIpMrouteHwSubnet,
       "rcIpMrouteHwInvlan": rcIpMrouteHwInvlan,
       "rcIpMrouteHwPruned": rcIpMrouteHwPruned,
       "rcIpMrouteHwIndex": rcIpMrouteHwIndex,
       "rcIpMrouteHwPrunesTable": rcIpMrouteHwPrunesTable,
       "rcIpMrouteHwPrunesEntry": rcIpMrouteHwPrunesEntry,
       "rcIpMrouteHwPrunesGroupAddress": rcIpMrouteHwPrunesGroupAddress,
       "rcIpMrouteHwPrunesSubnet": rcIpMrouteHwPrunesSubnet,
       "rcIpMrouteHwPrunesInvlan": rcIpMrouteHwPrunesInvlan,
       "rcIpMrouteHwPrunesNeighbor": rcIpMrouteHwPrunesNeighbor,
       "rcIpMrouteHwPrunesTimer": rcIpMrouteHwPrunesTimer,
       "rcIpMrouteHwSourcesTable": rcIpMrouteHwSourcesTable,
       "rcIpMrouteHwSourcesEntry": rcIpMrouteHwSourcesEntry,
       "rcIpMrouteHwSourcesGroupAddress": rcIpMrouteHwSourcesGroupAddress,
       "rcIpMrouteHwSourcesSubnet": rcIpMrouteHwSourcesSubnet,
       "rcIpMrouteHwSourcesInvlan": rcIpMrouteHwSourcesInvlan,
       "rcIpMrouteHwSourcesAddress": rcIpMrouteHwSourcesAddress,
       "rcIpMrouteHwSourcesIngressPort": rcIpMrouteHwSourcesIngressPort,
       "rcIpMrouteHwEgressVlansTable": rcIpMrouteHwEgressVlansTable,
       "rcIpMrouteHwEgressVlansEntry": rcIpMrouteHwEgressVlansEntry,
       "rcIpMrouteHwEgressVlansGroupAddress": rcIpMrouteHwEgressVlansGroupAddress,
       "rcIpMrouteHwEgressVlansSubnet": rcIpMrouteHwEgressVlansSubnet,
       "rcIpMrouteHwEgressVlansInvlan": rcIpMrouteHwEgressVlansInvlan,
       "rcIpMrouteHwEgressVlansId": rcIpMrouteHwEgressVlansId,
       "rcIpMrouteHwEgressVlansPorts": rcIpMrouteHwEgressVlansPorts,
       "rcIpMrouteHwEgressVlansIndex": rcIpMrouteHwEgressVlansIndex,
       "rcIpResourceUsage": rcIpResourceUsage,
       "rcIpResourceUsageGlobal": rcIpResourceUsageGlobal,
       "rcIpResourceUsageGlobalIngressRecInUse": rcIpResourceUsageGlobalIngressRecInUse,
       "rcIpResourceUsageGlobalEgressRecInUse": rcIpResourceUsageGlobalEgressRecInUse,
       "rcIpResourceUsageGlobalIngressThreshold": rcIpResourceUsageGlobalIngressThreshold,
       "rcIpResourceUsageGlobalEgressThreshold": rcIpResourceUsageGlobalEgressThreshold,
       "rcIpResourceUsageGlobalSendTrapAndLog": rcIpResourceUsageGlobalSendTrapAndLog,
       "rcIpResourceUsageGlobalSendTrapOnly": rcIpResourceUsageGlobalSendTrapOnly,
       "rcIpResourceUsageGlobalLogMsgOnly": rcIpResourceUsageGlobalLogMsgOnly,
       "rcIpRsmlt": rcIpRsmlt,
       "rcIpRsmltGlobal": rcIpRsmltGlobal,
       "rcIpRsmltGlobalTableSize": rcIpRsmltGlobalTableSize,
       "rcIpRsmltEdgeSupportEnable": rcIpRsmltEdgeSupportEnable,
       "rcIpRsmltOperTable": rcIpRsmltOperTable,
       "rcIpRsmltOperEntry": rcIpRsmltOperEntry,
       "rcIpRsmltOperIfIndex": rcIpRsmltOperIfIndex,
       "rcIpRsmltOperAdminStatus": rcIpRsmltOperAdminStatus,
       "rcIpRsmltOperHoldDownTimer": rcIpRsmltOperHoldDownTimer,
       "rcIpRsmltOperHoldDownTimeRemaining": rcIpRsmltOperHoldDownTimeRemaining,
       "rcIpRsmltOperHoldUpTimer": rcIpRsmltOperHoldUpTimer,
       "rcIpRsmltOperHoldUpTimeRemaining": rcIpRsmltOperHoldUpTimeRemaining,
       "rcIpRsmltOperIpAddr": rcIpRsmltOperIpAddr,
       "rcIpRsmltOperOperStatus": rcIpRsmltOperOperStatus,
       "rcIpRsmltOperSmltId": rcIpRsmltOperSmltId,
       "rcIpRsmltOperSltId": rcIpRsmltOperSltId,
       "rcIpRsmltOperVlanId": rcIpRsmltOperVlanId,
       "rcIpRsmltOperMacAddr": rcIpRsmltOperMacAddr,
       "rcIpRsmltOperRowStatus": rcIpRsmltOperRowStatus,
       "rcIpRsmltOperVrfId": rcIpRsmltOperVrfId,
       "rcIpRsmltOperVrfName": rcIpRsmltOperVrfName,
       "rcIpRsmltPeerTable": rcIpRsmltPeerTable,
       "rcIpRsmltPeerEntry": rcIpRsmltPeerEntry,
       "rcIpRsmltPeerIfIndex": rcIpRsmltPeerIfIndex,
       "rcIpRsmltPeerAdminStatus": rcIpRsmltPeerAdminStatus,
       "rcIpRsmltPeerHoldDownTimer": rcIpRsmltPeerHoldDownTimer,
       "rcIpRsmltPeerHoldDownTimeRemaining": rcIpRsmltPeerHoldDownTimeRemaining,
       "rcIpRsmltPeerHoldUpTimer": rcIpRsmltPeerHoldUpTimer,
       "rcIpRsmltPeerHoldUpTimeRemaining": rcIpRsmltPeerHoldUpTimeRemaining,
       "rcIpRsmltPeerIpAddr": rcIpRsmltPeerIpAddr,
       "rcIpRsmltPeerOperStatus": rcIpRsmltPeerOperStatus,
       "rcIpRsmltPeerSmltId": rcIpRsmltPeerSmltId,
       "rcIpRsmltPeerSltId": rcIpRsmltPeerSltId,
       "rcIpRsmltPeerVlanId": rcIpRsmltPeerVlanId,
       "rcIpRsmltPeerMacAddr": rcIpRsmltPeerMacAddr,
       "rcIpRsmltPeerVrfId": rcIpRsmltPeerVrfId,
       "rcIpRsmltPeerVrfName": rcIpRsmltPeerVrfName,
       "rcIpRsmltEdgePeerTable": rcIpRsmltEdgePeerTable,
       "rcIpRsmltEdgePeerEntry": rcIpRsmltEdgePeerEntry,
       "rcIpRsmltEdgeVlanId": rcIpRsmltEdgeVlanId,
       "rcIpRsmltEdgePeerIpAddress": rcIpRsmltEdgePeerIpAddress,
       "rcIpRsmltEdgePeerMacAddress": rcIpRsmltEdgePeerMacAddress,
       "rcIpRsmltEdgePeerVrfId": rcIpRsmltEdgePeerVrfId,
       "rcIpRsmltEdgePeerVrfName": rcIpRsmltEdgePeerVrfName,
       "rcIpv6RsmltOperTable": rcIpv6RsmltOperTable,
       "rcIpv6RsmltOperEntry": rcIpv6RsmltOperEntry,
       "rcIpv6RsmltOperIfIndex": rcIpv6RsmltOperIfIndex,
       "rcIpv6RsmltOperIpv6Addr": rcIpv6RsmltOperIpv6Addr,
       "rcIpv6RsmltOperIpv6PrefixLength": rcIpv6RsmltOperIpv6PrefixLength,
       "rcIpv6RsmltOperAdminStatus": rcIpv6RsmltOperAdminStatus,
       "rcIpv6RsmltOperHoldDownTimer": rcIpv6RsmltOperHoldDownTimer,
       "rcIpv6RsmltOperHoldDownTimeRemaining": rcIpv6RsmltOperHoldDownTimeRemaining,
       "rcIpv6RsmltOperHoldUpTimer": rcIpv6RsmltOperHoldUpTimer,
       "rcIpv6RsmltOperHoldUpTimeRemaining": rcIpv6RsmltOperHoldUpTimeRemaining,
       "rcIpv6RsmltOperOperStatus": rcIpv6RsmltOperOperStatus,
       "rcIpv6RsmltOperSmltId": rcIpv6RsmltOperSmltId,
       "rcIpv6RsmltOperSltId": rcIpv6RsmltOperSltId,
       "rcIpv6RsmltOperVlanId": rcIpv6RsmltOperVlanId,
       "rcIpv6RsmltOperMacAddr": rcIpv6RsmltOperMacAddr,
       "rcIpv6RsmltOperVrfId": rcIpv6RsmltOperVrfId,
       "rcIpv6RsmltOperVrfName": rcIpv6RsmltOperVrfName,
       "rcIpv6RsmltPeerTable": rcIpv6RsmltPeerTable,
       "rcIpv6RsmltPeerEntry": rcIpv6RsmltPeerEntry,
       "rcIpv6RsmltPeerIfIndex": rcIpv6RsmltPeerIfIndex,
       "rcIpv6RsmltPeerIpv6Addr": rcIpv6RsmltPeerIpv6Addr,
       "rcIpv6RsmltPeerIpv6PrefixLength": rcIpv6RsmltPeerIpv6PrefixLength,
       "rcIpv6RsmltPeerAdminStatus": rcIpv6RsmltPeerAdminStatus,
       "rcIpv6RsmltPeerHoldDownTimer": rcIpv6RsmltPeerHoldDownTimer,
       "rcIpv6RsmltPeerHoldDownTimeRemaining": rcIpv6RsmltPeerHoldDownTimeRemaining,
       "rcIpv6RsmltPeerHoldUpTimer": rcIpv6RsmltPeerHoldUpTimer,
       "rcIpv6RsmltPeerHoldUpTimeRemaining": rcIpv6RsmltPeerHoldUpTimeRemaining,
       "rcIpv6RsmltPeerOperStatus": rcIpv6RsmltPeerOperStatus,
       "rcIpv6RsmltPeerSmltId": rcIpv6RsmltPeerSmltId,
       "rcIpv6RsmltPeerSltId": rcIpv6RsmltPeerSltId,
       "rcIpv6RsmltPeerVlanId": rcIpv6RsmltPeerVlanId,
       "rcIpv6RsmltPeerMacAddr": rcIpv6RsmltPeerMacAddr,
       "rcIpv6RsmltPeerVrfId": rcIpv6RsmltPeerVrfId,
       "rcIpv6RsmltPeerVrfName": rcIpv6RsmltPeerVrfName,
       "rcIpv6RsmltEdgePeerTable": rcIpv6RsmltEdgePeerTable,
       "rcIpv6RsmltEdgePeerEntry": rcIpv6RsmltEdgePeerEntry,
       "rcIpv6RsmltEdgePeerVlanId": rcIpv6RsmltEdgePeerVlanId,
       "rcIpv6RsmltEdgePeerIpv6Address": rcIpv6RsmltEdgePeerIpv6Address,
       "rcIpv6RsmltEdgePeerIpv6PrefixLength": rcIpv6RsmltEdgePeerIpv6PrefixLength,
       "rcIpv6RsmltEdgePeerMacAddress": rcIpv6RsmltEdgePeerMacAddress,
       "rcIpv6RsmltEdgePeerVrfId": rcIpv6RsmltEdgePeerVrfId,
       "rcIpv6RsmltEdgePeerVrfName": rcIpv6RsmltEdgePeerVrfName,
       "rcIpv6RsmltEdgePeerIsRaPrefix": rcIpv6RsmltEdgePeerIsRaPrefix,
       "rcIpv6RsmltEdgePeerConfType": rcIpv6RsmltEdgePeerConfType,
       "rcIpv6RsmltEdgePeerNoAdvertise": rcIpv6RsmltEdgePeerNoAdvertise,
       "rcIpv6RsmltEdgePeerOspf6Advertise": rcIpv6RsmltEdgePeerOspf6Advertise,
       "rcIpv6RsmltEdgePeerPrefCandidate": rcIpv6RsmltEdgePeerPrefCandidate,
       "rcIpv6RsmltEdgePeerPfxValidLife": rcIpv6RsmltEdgePeerPfxValidLife,
       "rcIpv6RsmltEdgePeerPfxPrefLife": rcIpv6RsmltEdgePeerPfxPrefLife,
       "rcIpv6RsmltEdgePeerPfxOnLinkFlag": rcIpv6RsmltEdgePeerPfxOnLinkFlag,
       "rcIpv6RsmltEdgePeerPfxAutoFlag": rcIpv6RsmltEdgePeerPfxAutoFlag,
       "rcIpVpn": rcIpVpn,
       "rcIpVpnRouteDistinguisherTableSize": rcIpVpnRouteDistinguisherTableSize,
       "rcIpVpnRouteDistinguisherTable": rcIpVpnRouteDistinguisherTable,
       "rcIpVpnRouteDistinguisherEntry": rcIpVpnRouteDistinguisherEntry,
       "rcIpVpnVrfId": rcIpVpnVrfId,
       "rcIpVpnRouteDistinguisherType": rcIpVpnRouteDistinguisherType,
       "rcIpVpnRouteDistinguisherAddress": rcIpVpnRouteDistinguisherAddress,
       "rcIpVpnRouteDistinguisherAsNumber": rcIpVpnRouteDistinguisherAsNumber,
       "rcIpVpnRouteDistinguisherAssignedNum": rcIpVpnRouteDistinguisherAssignedNum,
       "rcIpVpnRouteDistinguisherRowStatus": rcIpVpnRouteDistinguisherRowStatus,
       "rcIpVpnRouteTargetTableSize": rcIpVpnRouteTargetTableSize,
       "rcIpVpnRouteTargetTable": rcIpVpnRouteTargetTable,
       "rcIpVpnRouteTargetEntry": rcIpVpnRouteTargetEntry,
       "rcIpVpnRouteTargetIndex": rcIpVpnRouteTargetIndex,
       "rcIpVpnRouteTargetType": rcIpVpnRouteTargetType,
       "rcIpVpnRouteTargetIpAddress": rcIpVpnRouteTargetIpAddress,
       "rcIpVpnRouteTargetAsNumber": rcIpVpnRouteTargetAsNumber,
       "rcIpVpnRouteTargetAssignedNum": rcIpVpnRouteTargetAssignedNum,
       "rcIpVpnRouteTargetRowStatus": rcIpVpnRouteTargetRowStatus,
       "rcIpGenPolicy": rcIpGenPolicy,
       "rcIpAsPathAccessListTableSize": rcIpAsPathAccessListTableSize,
       "rcIpAsPathAccessListTable": rcIpAsPathAccessListTable,
       "rcIpAsPathAccessListEntry": rcIpAsPathAccessListEntry,
       "rcIpAsPathAccessListId": rcIpAsPathAccessListId,
       "rcIpAsPathAccessListMemberId": rcIpAsPathAccessListMemberId,
       "rcIpAsPathAccessListMode": rcIpAsPathAccessListMode,
       "rcIpAsPathAccessListAsRegularExpression": rcIpAsPathAccessListAsRegularExpression,
       "rcIpAsPathAccessListRowStatus": rcIpAsPathAccessListRowStatus,
       "rcIpCommunityAccessListTableSize": rcIpCommunityAccessListTableSize,
       "rcIpCommunityAccessListTable": rcIpCommunityAccessListTable,
       "rcIpCommunityAccessListEntry": rcIpCommunityAccessListEntry,
       "rcIpCommunityAccessListId": rcIpCommunityAccessListId,
       "rcIpCommunityAccessListMemberId": rcIpCommunityAccessListMemberId,
       "rcIpCommunityAccessListMode": rcIpCommunityAccessListMode,
       "rcIpCommunityAccessListCommunity": rcIpCommunityAccessListCommunity,
       "rcIpCommunityAccessListRowStatus": rcIpCommunityAccessListRowStatus,
       "rcIpAccessListTableSize": rcIpAccessListTableSize,
       "rcIpAccessListTable": rcIpAccessListTable,
       "rcIpAccessListEntry": rcIpAccessListEntry,
       "rcIpAccessListId": rcIpAccessListId,
       "rcIpAccessListMode": rcIpAccessListMode,
       "rcIpAccessListNetwork": rcIpAccessListNetwork,
       "rcIpAccessListNetworkMask": rcIpAccessListNetworkMask,
       "rcIpAccessListName": rcIpAccessListName,
       "rcIpAccessListRowStatus": rcIpAccessListRowStatus,
       "rcIpExtendedAccessListTableSize": rcIpExtendedAccessListTableSize,
       "rcIpExtendedAccessListTable": rcIpExtendedAccessListTable,
       "rcIpExtendedAccessListEntry": rcIpExtendedAccessListEntry,
       "rcIpExtendedAccessListId": rcIpExtendedAccessListId,
       "rcIpExtendedAccessListMode": rcIpExtendedAccessListMode,
       "rcIpExtendedAccessListNetwork": rcIpExtendedAccessListNetwork,
       "rcIpExtendedAccessListNetworkWildCard": rcIpExtendedAccessListNetworkWildCard,
       "rcIpExtendedAccessListNetworkMask": rcIpExtendedAccessListNetworkMask,
       "rcIpExtendedAccessListNetworkMaskWildCard": rcIpExtendedAccessListNetworkMaskWildCard,
       "rcIpExtendedAccessListName": rcIpExtendedAccessListName,
       "rcIpExtendedAccessListRowStatus": rcIpExtendedAccessListRowStatus,
       "rcIpPrefixListTableSize": rcIpPrefixListTableSize,
       "rcIpPrefixListTable": rcIpPrefixListTable,
       "rcIpPrefixListEntry": rcIpPrefixListEntry,
       "rcIpPrefixListId": rcIpPrefixListId,
       "rcIpPrefixListPrefix": rcIpPrefixListPrefix,
       "rcIpPrefixListPrefixMaskLen": rcIpPrefixListPrefixMaskLen,
       "rcIpPrefixListMaskLenFrom": rcIpPrefixListMaskLenFrom,
       "rcIpPrefixListMaskLenUpto": rcIpPrefixListMaskLenUpto,
       "rcIpPrefixListName": rcIpPrefixListName,
       "rcIpPrefixListRowStatus": rcIpPrefixListRowStatus,
       "rcIpRoutePolicyTableSize": rcIpRoutePolicyTableSize,
       "rcIpRoutePolicyApply": rcIpRoutePolicyApply,
       "rcIpRoutePolicyTable": rcIpRoutePolicyTable,
       "rcIpRoutePolicyEntry": rcIpRoutePolicyEntry,
       "rcIpRoutePolicyId": rcIpRoutePolicyId,
       "rcIpRoutePolicySequenceNumber": rcIpRoutePolicySequenceNumber,
       "rcIpRoutePolicyName": rcIpRoutePolicyName,
       "rcIpRoutePolicyEnable": rcIpRoutePolicyEnable,
       "rcIpRoutePolicyMode": rcIpRoutePolicyMode,
       "rcIpRoutePolicyMatchProtocol": rcIpRoutePolicyMatchProtocol,
       "rcIpRoutePolicyMatchAsPath": rcIpRoutePolicyMatchAsPath,
       "rcIpRoutePolicyMatchCommunity": rcIpRoutePolicyMatchCommunity,
       "rcIpRoutePolicyMatchCommunityExact": rcIpRoutePolicyMatchCommunityExact,
       "rcIpRoutePolicyMatchNetwork": rcIpRoutePolicyMatchNetwork,
       "rcIpRoutePolicyMatchIpRouteSource": rcIpRoutePolicyMatchIpRouteSource,
       "rcIpRoutePolicyMatchNextHop": rcIpRoutePolicyMatchNextHop,
       "rcIpRoutePolicyMatchInterface": rcIpRoutePolicyMatchInterface,
       "rcIpRoutePolicyMatchRouteType": rcIpRoutePolicyMatchRouteType,
       "rcIpRoutePolicyMatchMetric": rcIpRoutePolicyMatchMetric,
       "rcIpRoutePolicyMatchTag": rcIpRoutePolicyMatchTag,
       "rcIpRoutePolicySetRoutePreference": rcIpRoutePolicySetRoutePreference,
       "rcIpRoutePolicySetAsPath": rcIpRoutePolicySetAsPath,
       "rcIpRoutePolicySetAsPathMode": rcIpRoutePolicySetAsPathMode,
       "rcIpRoutePolicySetAutomaticTag": rcIpRoutePolicySetAutomaticTag,
       "rcIpRoutePolicySetCommunityNumber": rcIpRoutePolicySetCommunityNumber,
       "rcIpRoutePolicySetCommunityMode": rcIpRoutePolicySetCommunityMode,
       "rcIpRoutePolicySetMetricTypeInternal": rcIpRoutePolicySetMetricTypeInternal,
       "rcIpRoutePolicySetMetric": rcIpRoutePolicySetMetric,
       "rcIpRoutePolicySetMetricType": rcIpRoutePolicySetMetricType,
       "rcIpRoutePolicySetNextHop": rcIpRoutePolicySetNextHop,
       "rcIpRoutePolicySetOrigin": rcIpRoutePolicySetOrigin,
       "rcIpRoutePolicySetLocalPref": rcIpRoutePolicySetLocalPref,
       "rcIpRoutePolicySetOriginEgpAs": rcIpRoutePolicySetOriginEgpAs,
       "rcIpRoutePolicySetTag": rcIpRoutePolicySetTag,
       "rcIpRoutePolicySetWeight": rcIpRoutePolicySetWeight,
       "rcIpRoutePolicySetInjectNetList": rcIpRoutePolicySetInjectNetList,
       "rcIpRoutePolicyRowStatus": rcIpRoutePolicyRowStatus,
       "rcIpRoutePolicySetMask": rcIpRoutePolicySetMask,
       "rcIpRoutePolicyNssaPbit": rcIpRoutePolicyNssaPbit,
       "rcIpRoutePolicyMatchVrf": rcIpRoutePolicyMatchVrf,
       "rcIpRoutePolicyMatchExtCommunity": rcIpRoutePolicyMatchExtCommunity,
       "rcIpRoutePolicySetExtCommunity": rcIpRoutePolicySetExtCommunity,
       "rcIpRoutePolicySetExtCommunityMode": rcIpRoutePolicySetExtCommunityMode,
       "rcIpRoutePolicyMatchLocalPref": rcIpRoutePolicyMatchLocalPref,
       "rcIpRoutePolicyMatchIpRouteDest": rcIpRoutePolicyMatchIpRouteDest,
       "rcIpRoutePolicyMatchExtendedPref": rcIpRoutePolicyMatchExtendedPref,
       "rcIpRoutePolicyIpv6SetNextHop": rcIpRoutePolicyIpv6SetNextHop,
       "rcIpRedistributeTableSize": rcIpRedistributeTableSize,
       "rcIpRedistributeApply": rcIpRedistributeApply,
       "rcIpRedistributeTable": rcIpRedistributeTable,
       "rcIpRedistributeEntry": rcIpRedistributeEntry,
       "rcIpRedistributeProtocol": rcIpRedistributeProtocol,
       "rcIpRedistributeRouteSource": rcIpRedistributeRouteSource,
       "rcIpRedistributeEnable": rcIpRedistributeEnable,
       "rcIpRedistributeMetric": rcIpRedistributeMetric,
       "rcIpRedistributeMetricType": rcIpRedistributeMetricType,
       "rcIpRedistributeMatchRouteType": rcIpRedistributeMatchRouteType,
       "rcIpRedistributeSetTag": rcIpRedistributeSetTag,
       "rcIpRedistributeSubnets": rcIpRedistributeSubnets,
       "rcIpRedistributeRoutePolicy": rcIpRedistributeRoutePolicy,
       "rcIpRedistributeASNumber": rcIpRedistributeASNumber,
       "rcIpRedistributeWeight": rcIpRedistributeWeight,
       "rcIpRedistributeDefaultOriginate": rcIpRedistributeDefaultOriginate,
       "rcIpRedistributeRowStatus": rcIpRedistributeRowStatus,
       "rcIpRedistributeLevel": rcIpRedistributeLevel,
       "rcIpOspfInFilterTableSize": rcIpOspfInFilterTableSize,
       "rcIpOspfInFilterApply": rcIpOspfInFilterApply,
       "rcIpOspfInFilterTable": rcIpOspfInFilterTable,
       "rcIpOspfInFilterEntry": rcIpOspfInFilterEntry,
       "rcIpOspfInFilterAdvertisingRtr": rcIpOspfInFilterAdvertisingRtr,
       "rcIpOspfInFilterEnable": rcIpOspfInFilterEnable,
       "rcIpOspfInFilterMetricType": rcIpOspfInFilterMetricType,
       "rcIpOspfInFilterPolicyName": rcIpOspfInFilterPolicyName,
       "rcIpOspfInFilterRowStatus": rcIpOspfInFilterRowStatus,
       "rcIpRoutePrefTableSize": rcIpRoutePrefTableSize,
       "rcIpRoutePrefTable": rcIpRoutePrefTable,
       "rcIpRoutePrefEntry": rcIpRoutePrefEntry,
       "rcIpRoutePrefProtocol": rcIpRoutePrefProtocol,
       "rcIpRoutePrefDefault": rcIpRoutePrefDefault,
       "rcIpRoutePrefConfigured": rcIpRoutePrefConfigured,
       "rcIpRedistributeInterVrfTable": rcIpRedistributeInterVrfTable,
       "rcIpRedistributeInterVrfEntry": rcIpRedistributeInterVrfEntry,
       "rcIpRedistributeInterVrfDstVrfId": rcIpRedistributeInterVrfDstVrfId,
       "rcIpRedistributeInterVrfProtocol": rcIpRedistributeInterVrfProtocol,
       "rcIpRedistributeInterVrfSrcVrfId": rcIpRedistributeInterVrfSrcVrfId,
       "rcIpRedistributeInterVrfRouteSource": rcIpRedistributeInterVrfRouteSource,
       "rcIpRedistributeInterVrfEnable": rcIpRedistributeInterVrfEnable,
       "rcIpRedistributeInterVrfMetric": rcIpRedistributeInterVrfMetric,
       "rcIpRedistributeInterVrfMetricType": rcIpRedistributeInterVrfMetricType,
       "rcIpRedistributeInterVrfMatchRouteType": rcIpRedistributeInterVrfMatchRouteType,
       "rcIpRedistributeInterVrfSetTag": rcIpRedistributeInterVrfSetTag,
       "rcIpRedistributeInterVrfSubnets": rcIpRedistributeInterVrfSubnets,
       "rcIpRedistributeInterVrfRoutePolicy": rcIpRedistributeInterVrfRoutePolicy,
       "rcIpRedistributeInterVrfASNumber": rcIpRedistributeInterVrfASNumber,
       "rcIpRedistributeInterVrfWeight": rcIpRedistributeInterVrfWeight,
       "rcIpRedistributeInterVrfDefaultOriginate": rcIpRedistributeInterVrfDefaultOriginate,
       "rcIpRedistributeInterVrfRowStatus": rcIpRedistributeInterVrfRowStatus,
       "rcIpExtCommunityAccessListTableSize": rcIpExtCommunityAccessListTableSize,
       "rcIpExtCommunityAccessListTable": rcIpExtCommunityAccessListTable,
       "rcIpExtCommunityAccessListEntry": rcIpExtCommunityAccessListEntry,
       "rcIpExtCommunityAccessListId": rcIpExtCommunityAccessListId,
       "rcIpExtCommunityAccessListMemberId": rcIpExtCommunityAccessListMemberId,
       "rcIpExtCommunityAccessListRTType": rcIpExtCommunityAccessListRTType,
       "rcIpExtCommunityAccessListRTAddress": rcIpExtCommunityAccessListRTAddress,
       "rcIpExtCommunityAccessListRTAsNumber": rcIpExtCommunityAccessListRTAsNumber,
       "rcIpExtCommunityAccessListRTAssignedNum": rcIpExtCommunityAccessListRTAssignedNum,
       "rcIpExtCommunityAccessListSooType": rcIpExtCommunityAccessListSooType,
       "rcIpExtCommunityAccessListSooAddress": rcIpExtCommunityAccessListSooAddress,
       "rcIpExtCommunityAccessListSooAsNumber": rcIpExtCommunityAccessListSooAsNumber,
       "rcIpExtCommunityAccessListSooAssignedNum": rcIpExtCommunityAccessListSooAssignedNum,
       "rcIpExtCommunityAccessListVrfId": rcIpExtCommunityAccessListVrfId,
       "rcIpExtCommunityAccessListRowStatus": rcIpExtCommunityAccessListRowStatus,
       "rcIpExtACLTable": rcIpExtACLTable,
       "rcIpExtACLEntry": rcIpExtACLEntry,
       "rcIpExtACLPrefixSourceAddr": rcIpExtACLPrefixSourceAddr,
       "rcIpExtACLPrefixSourceMask": rcIpExtACLPrefixSourceMask,
       "rcIpExtACLPrefixDestinationAddr": rcIpExtACLPrefixDestinationAddr,
       "rcIpExtACLPrefixDestinationMask": rcIpExtACLPrefixDestinationMask,
       "rcIpExtACLPrefixName": rcIpExtACLPrefixName,
       "rcIpExtACLPrefixRowStatus": rcIpExtACLPrefixRowStatus,
       "rcIpBgp": rcIpBgp,
       "rcIpBgpGeneralGroup": rcIpBgpGeneralGroup,
       "rcIpBgpGeneralGroupLocalAs": rcIpBgpGeneralGroupLocalAs,
       "rcIpBgpGeneralGroupAdminStatus": rcIpBgpGeneralGroupAdminStatus,
       "rcIpBgpGeneralGroupDefaultMetric": rcIpBgpGeneralGroupDefaultMetric,
       "rcIpBgpGeneralGroupDefaultLocalPreference": rcIpBgpGeneralGroupDefaultLocalPreference,
       "rcIpBgpGeneralGroupDefaultInformationOriginate": rcIpBgpGeneralGroupDefaultInformationOriginate,
       "rcIpBgpGeneralGroupBestPathMissingAsWorst": rcIpBgpGeneralGroupBestPathMissingAsWorst,
       "rcIpBgpGeneralGroupBestPathMedConfed": rcIpBgpGeneralGroupBestPathMedConfed,
       "rcIpBgpGeneralGroupIgnoreIllegalRouterId": rcIpBgpGeneralGroupIgnoreIllegalRouterId,
       "rcIpBgpGeneralGroupAlwaysCompareMed": rcIpBgpGeneralGroupAlwaysCompareMed,
       "rcIpBgpGeneralGroupAutoPeerRestart": rcIpBgpGeneralGroupAutoPeerRestart,
       "rcIpBgpGeneralGroupAutoSummary": rcIpBgpGeneralGroupAutoSummary,
       "rcIpBgpGeneralGroupSynchronization": rcIpBgpGeneralGroupSynchronization,
       "rcIpBgpGeneralGroupMaxEqualcostRoutes": rcIpBgpGeneralGroupMaxEqualcostRoutes,
       "rcIpBgpGeneralGroupIbgpReportImportRoute": rcIpBgpGeneralGroupIbgpReportImportRoute,
       "rcIpBgpGeneralGroupAggregate": rcIpBgpGeneralGroupAggregate,
       "rcIpBgpGeneralGroupFlapDampEnable": rcIpBgpGeneralGroupFlapDampEnable,
       "rcIpBgpGeneralGroupDebugMask": rcIpBgpGeneralGroupDebugMask,
       "rcIpBgpGeneralGroupTrapEnable": rcIpBgpGeneralGroupTrapEnable,
       "rcIpBgpGeneralGroupQuickStart": rcIpBgpGeneralGroupQuickStart,
       "rcIpBgpGeneralGroupDeterministicMed": rcIpBgpGeneralGroupDeterministicMed,
       "rcIpBgpGeneralGroupRouteRefresh": rcIpBgpGeneralGroupRouteRefresh,
       "rcIpBgpGeneralGroupRoutePolicyIn": rcIpBgpGeneralGroupRoutePolicyIn,
       "rcIpBgpGeneralGroupRoutePolicyOut": rcIpBgpGeneralGroupRoutePolicyOut,
       "rcIpBgpGeneralGroupDefaultInformationOriginateIpv6": rcIpBgpGeneralGroupDefaultInformationOriginateIpv6,
       "rcIpBgpGeneralGroupNewLocalAs": rcIpBgpGeneralGroupNewLocalAs,
       "rcIpBgpGeneralGroup4ByteAs": rcIpBgpGeneralGroup4ByteAs,
       "rcIpBgpGeneralGroupAsDot": rcIpBgpGeneralGroupAsDot,
       "rcIpBgpAggregateTableSize": rcIpBgpAggregateTableSize,
       "rcIpBgpAggregateTable": rcIpBgpAggregateTable,
       "rcIpBgpAggregateEntry": rcIpBgpAggregateEntry,
       "rcIpBgpAggregateAddress": rcIpBgpAggregateAddress,
       "rcIpBgpAggregateMask": rcIpBgpAggregateMask,
       "rcIpBgpAggregateAsSetGenerate": rcIpBgpAggregateAsSetGenerate,
       "rcIpBgpAggregateSummaryOnly": rcIpBgpAggregateSummaryOnly,
       "rcIpBgpAggregateSuppressPolicy": rcIpBgpAggregateSuppressPolicy,
       "rcIpBgpAggregateAdvertisePolicy": rcIpBgpAggregateAdvertisePolicy,
       "rcIpBgpAggregateAttributePolicy": rcIpBgpAggregateAttributePolicy,
       "rcIpBgpAggregateRowStatus": rcIpBgpAggregateRowStatus,
       "rcIpBgpConfederationGroup": rcIpBgpConfederationGroup,
       "rcIpBgpConfederationIdentifier": rcIpBgpConfederationIdentifier,
       "rcIpBgpConfederationPeers": rcIpBgpConfederationPeers,
       "rcIpBgpRouteReflectorGroup": rcIpBgpRouteReflectorGroup,
       "rcIpBgpRouteReflectionEnable": rcIpBgpRouteReflectionEnable,
       "rcIpBgpRouteReflectorClusterId": rcIpBgpRouteReflectorClusterId,
       "rcIpBgpRouteReflectorClientToClientReflection": rcIpBgpRouteReflectorClientToClientReflection,
       "rcIpBgpRouteReflectionOperState": rcIpBgpRouteReflectionOperState,
       "rcIpBgpNetworkTableSize": rcIpBgpNetworkTableSize,
       "rcIpBgpNetworkTable": rcIpBgpNetworkTable,
       "rcIpBgpNetworkEntry": rcIpBgpNetworkEntry,
       "rcIpBgpNetworkAddr": rcIpBgpNetworkAddr,
       "rcIpBgpNetworkMask": rcIpBgpNetworkMask,
       "rcIpBgpNetworkRowStatus": rcIpBgpNetworkRowStatus,
       "rcIpBgpNetworkMetric": rcIpBgpNetworkMetric,
       "rcIpBgpPeerTableSize": rcIpBgpPeerTableSize,
       "rcIpBgpPeerTable": rcIpBgpPeerTable,
       "rcIpBgpPeerEntry": rcIpBgpPeerEntry,
       "rcIpBgpPeerEnable": rcIpBgpPeerEnable,
       "rcIpBgpPeerIpAddress": rcIpBgpPeerIpAddress,
       "rcIpBgpPeerRemoteAs": rcIpBgpPeerRemoteAs,
       "rcIpBgpPeerGroupName": rcIpBgpPeerGroupName,
       "rcIpBgpPeerDefaultOriginate": rcIpBgpPeerDefaultOriginate,
       "rcIpBgpPeerEbgpMultiHop": rcIpBgpPeerEbgpMultiHop,
       "rcIpBgpPeerAdvertisementInterval": rcIpBgpPeerAdvertisementInterval,
       "rcIpBgpPeerPassword": rcIpBgpPeerPassword,
       "rcIpBgpPeerWeight": rcIpBgpPeerWeight,
       "rcIpBgpPeerMaxPrefix": rcIpBgpPeerMaxPrefix,
       "rcIpBgpPeerNextHopSelf": rcIpBgpPeerNextHopSelf,
       "rcIpBgpPeerRoutePolicyIn": rcIpBgpPeerRoutePolicyIn,
       "rcIpBgpPeerRoutePolicyOut": rcIpBgpPeerRoutePolicyOut,
       "rcIpBgpPeerRouteReflectorClient": rcIpBgpPeerRouteReflectorClient,
       "rcIpBgpPeerSoftReconfigurationIn": rcIpBgpPeerSoftReconfigurationIn,
       "rcIpBgpPeerSoftReconfiguration": rcIpBgpPeerSoftReconfiguration,
       "rcIpBgpPeerRemovePrivateAs": rcIpBgpPeerRemovePrivateAs,
       "rcIpBgpPeerRowStatus": rcIpBgpPeerRowStatus,
       "rcIpBgpPeerMD5Authentication": rcIpBgpPeerMD5Authentication,
       "rcIpBgpPeerDebugMask": rcIpBgpPeerDebugMask,
       "rcIpBgpPeerSendCommunity": rcIpBgpPeerSendCommunity,
       "rcIpBgpPeerUpdateSourceInterface": rcIpBgpPeerUpdateSourceInterface,
       "rcIpBgpPeerState": rcIpBgpPeerState,
       "rcIpBgpPeerLastError": rcIpBgpPeerLastError,
       "rcIpBgpPeerVpnv4Address": rcIpBgpPeerVpnv4Address,
       "rcIpBgpPeerIpvpnLiteCap": rcIpBgpPeerIpvpnLiteCap,
       "rcIpBgpPeerSooAddress": rcIpBgpPeerSooAddress,
       "rcIpBgpPeerSooAsNumber": rcIpBgpPeerSooAsNumber,
       "rcIpBgpPeerSooAssignedNum": rcIpBgpPeerSooAssignedNum,
       "rcIpBgpPeerSooType": rcIpBgpPeerSooType,
       "rcIpBgpPeerRouteRefresh": rcIpBgpPeerRouteRefresh,
       "rcIpBgpPeerAsOverride": rcIpBgpPeerAsOverride,
       "rcIpBgpPeerAllowAsIn": rcIpBgpPeerAllowAsIn,
       "rcIpBgpPeerBfdEnable": rcIpBgpPeerBfdEnable,
       "rcIpBgpPeerGroupTableSize": rcIpBgpPeerGroupTableSize,
       "rcIpBgpPeerGroupTable": rcIpBgpPeerGroupTable,
       "rcIpBgpPeerGroupEntry": rcIpBgpPeerGroupEntry,
       "rcIpBgpPeerGroupEnable": rcIpBgpPeerGroupEnable,
       "rcIpBgpPeerGroupIndex": rcIpBgpPeerGroupIndex,
       "rcIpBgpPeerGroupGroupName": rcIpBgpPeerGroupGroupName,
       "rcIpBgpPeerGroupRemoteAs": rcIpBgpPeerGroupRemoteAs,
       "rcIpBgpPeerGroupDefaultOriginate": rcIpBgpPeerGroupDefaultOriginate,
       "rcIpBgpPeerGroupEbgpMultiHop": rcIpBgpPeerGroupEbgpMultiHop,
       "rcIpBgpPeerGroupAdvertisementInterval": rcIpBgpPeerGroupAdvertisementInterval,
       "rcIpBgpPeerGroupKeepAlive": rcIpBgpPeerGroupKeepAlive,
       "rcIpBgpPeerGroupHoldTime": rcIpBgpPeerGroupHoldTime,
       "rcIpBgpPeerGroupWeight": rcIpBgpPeerGroupWeight,
       "rcIpBgpPeerGroupMaxPrefix": rcIpBgpPeerGroupMaxPrefix,
       "rcIpBgpPeerGroupNextHopSelf": rcIpBgpPeerGroupNextHopSelf,
       "rcIpBgpPeerGroupRoutePolicyIn": rcIpBgpPeerGroupRoutePolicyIn,
       "rcIpBgpPeerGroupRoutePolicyOut": rcIpBgpPeerGroupRoutePolicyOut,
       "rcIpBgpPeerGroupRouteReflectorClient": rcIpBgpPeerGroupRouteReflectorClient,
       "rcIpBgpPeerGroupSoftReconfigurationIn": rcIpBgpPeerGroupSoftReconfigurationIn,
       "rcIpBgpPeerGroupSoftReconfiguration": rcIpBgpPeerGroupSoftReconfiguration,
       "rcIpBgpPeerGroupPassword": rcIpBgpPeerGroupPassword,
       "rcIpBgpPeerGroupRemovePrivateAs": rcIpBgpPeerGroupRemovePrivateAs,
       "rcIpBgpPeerGroupRowStatus": rcIpBgpPeerGroupRowStatus,
       "rcIpBgpPeerGroupMD5Authentication": rcIpBgpPeerGroupMD5Authentication,
       "rcIpBgpPeerGroupSendCommunity": rcIpBgpPeerGroupSendCommunity,
       "rcIpBgpPeerGroupUpdateSourceInterface": rcIpBgpPeerGroupUpdateSourceInterface,
       "rcIpBgpPeerGroupVpnv4Address": rcIpBgpPeerGroupVpnv4Address,
       "rcIpBgpPeerGroupIpvpnLiteCap": rcIpBgpPeerGroupIpvpnLiteCap,
       "rcIpBgpPeerGroupSooAddress": rcIpBgpPeerGroupSooAddress,
       "rcIpBgpPeerGroupSooAsNumber": rcIpBgpPeerGroupSooAsNumber,
       "rcIpBgpPeerGroupSooAssignedNum": rcIpBgpPeerGroupSooAssignedNum,
       "rcIpBgpPeerGroupSooType": rcIpBgpPeerGroupSooType,
       "rcIpBgpPeerGroupRouteRefresh": rcIpBgpPeerGroupRouteRefresh,
       "rcIpBgpPeerGroupAsOverride": rcIpBgpPeerGroupAsOverride,
       "rcIpBgpPeerGroupAllowAsIn": rcIpBgpPeerGroupAllowAsIn,
       "rcIpBgpPeerGroupDefaultOriginateIpv6": rcIpBgpPeerGroupDefaultOriginateIpv6,
       "rcIpBgpPeerGroupAfUpdateSourceInterfaceType": rcIpBgpPeerGroupAfUpdateSourceInterfaceType,
       "rcIpBgpPeerGroupAfUpdateSourceInterface": rcIpBgpPeerGroupAfUpdateSourceInterface,
       "rcIpBgpPeerGroupIpv6Cap": rcIpBgpPeerGroupIpv6Cap,
       "rcIpBgpPeerGroupIpv6RoutePolicyIn": rcIpBgpPeerGroupIpv6RoutePolicyIn,
       "rcIpBgpPeerGroupIpv6RoutePolicyOut": rcIpBgpPeerGroupIpv6RoutePolicyOut,
       "rcIpBgpPeerGroupBfdEnable": rcIpBgpPeerGroupBfdEnable,
       "rcIpBgpRcvdDampenedPathAttrTableSize": rcIpBgpRcvdDampenedPathAttrTableSize,
       "rcIpBgpRcvdDampenedPathAttrTable": rcIpBgpRcvdDampenedPathAttrTable,
       "rcIpBgpDampenedPathAttrEntry": rcIpBgpDampenedPathAttrEntry,
       "rcIpBgpPathAttrPeer": rcIpBgpPathAttrPeer,
       "rcIpBgpPathAttrIpAddrPrefixLen": rcIpBgpPathAttrIpAddrPrefixLen,
       "rcIpBgpPathAttrIpAddrPrefix": rcIpBgpPathAttrIpAddrPrefix,
       "rcIpBgpPathAttrFlapPenalty": rcIpBgpPathAttrFlapPenalty,
       "rcIpBgpPathAttrFlapCount": rcIpBgpPathAttrFlapCount,
       "rcIpBgpPathAttrRouteDampened": rcIpBgpPathAttrRouteDampened,
       "rcIpBgpPathAttrReuseTime": rcIpBgpPathAttrReuseTime,
       "rcIpBgpPathAttrReuseTimeRemain": rcIpBgpPathAttrReuseTimeRemain,
       "rcIpBgp4PathAttrTableSize": rcIpBgp4PathAttrTableSize,
       "rcIpBgp4PathAttrTable": rcIpBgp4PathAttrTable,
       "rcIpBgp4PathAttrEntry": rcIpBgp4PathAttrEntry,
       "rcIpBgp4PathAttrPeer": rcIpBgp4PathAttrPeer,
       "rcIpBgp4PathAttrIpAddrPrefixLen": rcIpBgp4PathAttrIpAddrPrefixLen,
       "rcIpBgp4PathAttrIpAddrPrefix": rcIpBgp4PathAttrIpAddrPrefix,
       "rcIpBgp4PathAttrCommunities": rcIpBgp4PathAttrCommunities,
       "rcIpBgp4PathAttrOriginateId": rcIpBgp4PathAttrOriginateId,
       "rcIpBgp4PathAttrClusterId": rcIpBgp4PathAttrClusterId,
       "rcIpBgpExt": rcIpBgpExt,
       "rcIpBgpExtAggregateAfTableSize": rcIpBgpExtAggregateAfTableSize,
       "rcIpBgpExtAggregateAfTable": rcIpBgpExtAggregateAfTable,
       "rcIpBgpExtAggregateAfEntry": rcIpBgpExtAggregateAfEntry,
       "rcIpBgpExtAggregateAfAddressType": rcIpBgpExtAggregateAfAddressType,
       "rcIpBgpExtAggregateAfAddress": rcIpBgpExtAggregateAfAddress,
       "rcIpBgpExtAggregateAfPrefixLen": rcIpBgpExtAggregateAfPrefixLen,
       "rcIpBgpExtAggregateAfAsSetGenerate": rcIpBgpExtAggregateAfAsSetGenerate,
       "rcIpBgpExtAggregateAfSummaryOnly": rcIpBgpExtAggregateAfSummaryOnly,
       "rcIpBgpExtAggregateAfSuppressPolicy": rcIpBgpExtAggregateAfSuppressPolicy,
       "rcIpBgpExtAggregateAfAdvertisePolicy": rcIpBgpExtAggregateAfAdvertisePolicy,
       "rcIpBgpExtAggregateAfAttributePolicy": rcIpBgpExtAggregateAfAttributePolicy,
       "rcIpBgpExtAggregateAfRowStatus": rcIpBgpExtAggregateAfRowStatus,
       "rcIpBgpExtNetworkAfTableSize": rcIpBgpExtNetworkAfTableSize,
       "rcIpBgpExtNetworkAfTable": rcIpBgpExtNetworkAfTable,
       "rcIpBgpExtNetworkAfEntry": rcIpBgpExtNetworkAfEntry,
       "rcIpBgpExtNetworkAfAddrType": rcIpBgpExtNetworkAfAddrType,
       "rcIpBgpExtNetworkAfAddr": rcIpBgpExtNetworkAfAddr,
       "rcIpBgpExtNetworkAfPrefixLen": rcIpBgpExtNetworkAfPrefixLen,
       "rcIpBgpExtNetworkAfMetric": rcIpBgpExtNetworkAfMetric,
       "rcIpBgpExtNetworkAfRowStatus": rcIpBgpExtNetworkAfRowStatus,
       "rcIpBgpExtPeerAfTableSize": rcIpBgpExtPeerAfTableSize,
       "rcIpBgpExtPeerAfTable": rcIpBgpExtPeerAfTable,
       "rcIpBgpExtPeerAfEntry": rcIpBgpExtPeerAfEntry,
       "rcIpBgpExtPeerAfGroupName": rcIpBgpExtPeerAfGroupName,
       "rcIpBgpExtPeerAfDefaultOriginate": rcIpBgpExtPeerAfDefaultOriginate,
       "rcIpBgpExtPeerAfDefaultOriginateIpv6": rcIpBgpExtPeerAfDefaultOriginateIpv6,
       "rcIpBgpExtPeerAfEbgpMultiHop": rcIpBgpExtPeerAfEbgpMultiHop,
       "rcIpBgpExtPeerAfAdvertisementInterval": rcIpBgpExtPeerAfAdvertisementInterval,
       "rcIpBgpExtPeerAfPassword": rcIpBgpExtPeerAfPassword,
       "rcIpBgpExtPeerAfWeight": rcIpBgpExtPeerAfWeight,
       "rcIpBgpExtPeerAfMaxPrefix": rcIpBgpExtPeerAfMaxPrefix,
       "rcIpBgpExtPeerAfNextHopSelf": rcIpBgpExtPeerAfNextHopSelf,
       "rcIpBgpExtPeerAfRoutePolicyIn": rcIpBgpExtPeerAfRoutePolicyIn,
       "rcIpBgpExtPeerAfRoutePolicyOut": rcIpBgpExtPeerAfRoutePolicyOut,
       "rcIpBgpExtPeerAfRouteReflectorClient": rcIpBgpExtPeerAfRouteReflectorClient,
       "rcIpBgpExtPeerAfSoftReconfigurationIn": rcIpBgpExtPeerAfSoftReconfigurationIn,
       "rcIpBgpExtPeerAfSoftReconfiguration": rcIpBgpExtPeerAfSoftReconfiguration,
       "rcIpBgpExtPeerAfRemovePrivateAs": rcIpBgpExtPeerAfRemovePrivateAs,
       "rcIpBgpExtPeerAfMD5Authentication": rcIpBgpExtPeerAfMD5Authentication,
       "rcIpBgpExtPeerAfDebugMask": rcIpBgpExtPeerAfDebugMask,
       "rcIpBgpExtPeerAfSendCommunity": rcIpBgpExtPeerAfSendCommunity,
       "rcIpBgpExtPeerAfUpdateSourceInterface": rcIpBgpExtPeerAfUpdateSourceInterface,
       "rcIpBgpExtPeerAfVpnv4Address": rcIpBgpExtPeerAfVpnv4Address,
       "rcIpBgpExtPeerAfIpv6Cap": rcIpBgpExtPeerAfIpv6Cap,
       "rcIpBgpExtPeerAfIpvpnLiteCap": rcIpBgpExtPeerAfIpvpnLiteCap,
       "rcIpBgpExtPeerAfSooAddress": rcIpBgpExtPeerAfSooAddress,
       "rcIpBgpExtPeerAfSooAsNumber": rcIpBgpExtPeerAfSooAsNumber,
       "rcIpBgpExtPeerAfSooAssignedNum": rcIpBgpExtPeerAfSooAssignedNum,
       "rcIpBgpExtPeerAfSooType": rcIpBgpExtPeerAfSooType,
       "rcIpBgpExtPeerAfRouteRefresh": rcIpBgpExtPeerAfRouteRefresh,
       "rcIpBgpExtPeerAfAsOverride": rcIpBgpExtPeerAfAsOverride,
       "rcIpBgpExtPeerAfAllowAsIn": rcIpBgpExtPeerAfAllowAsIn,
       "rcIpBgpExtPeerAfIpv6RoutePolicyIn": rcIpBgpExtPeerAfIpv6RoutePolicyIn,
       "rcIpBgpExtPeerAfIpv6RoutePolicyOut": rcIpBgpExtPeerAfIpv6RoutePolicyOut,
       "rcIpBgpExtPeerAfEnable": rcIpBgpExtPeerAfEnable,
       "rcIpBgpExtPeerAfRemoteAs": rcIpBgpExtPeerAfRemoteAs,
       "rcIpBgpExtPeerAfConnectRetryInterval": rcIpBgpExtPeerAfConnectRetryInterval,
       "rcIpBgpExtPeerAfHoldTimeConfigured": rcIpBgpExtPeerAfHoldTimeConfigured,
       "rcIpBgpExtPeerAfKeepAliveConfigured": rcIpBgpExtPeerAfKeepAliveConfigured,
       "rcIpBgpExtPeerAfRowStatus": rcIpBgpExtPeerAfRowStatus,
       "rcIpBgpExtPeerAfNewRemoteAs": rcIpBgpExtPeerAfNewRemoteAs,
       "rcIpBgpExtPeerAfBfdEnable": rcIpBgpExtPeerAfBfdEnable,
       "rcIpBgpExtAfPathAttrTable": rcIpBgpExtAfPathAttrTable,
       "rcIpBgpExtAfPathAttrEntry": rcIpBgpExtAfPathAttrEntry,
       "rcIpBgpExtAfPathAttrUnknown": rcIpBgpExtAfPathAttrUnknown,
       "rcIpBgpExtAfPathAttrCommunities": rcIpBgpExtAfPathAttrCommunities,
       "rcIpBgpExtAfPathAttrOriginateId": rcIpBgpExtAfPathAttrOriginateId,
       "rcIpBgpExtAfPathAttrClusterId": rcIpBgpExtAfPathAttrClusterId,
       "rcIpBgpTmp": rcIpBgpTmp,
       "rcIpBgpTmpNotification": rcIpBgpTmpNotification,
       "rcIpBgpTmpEstablishedNotification": rcIpBgpTmpEstablishedNotification,
       "rcIpBgpTmpBackwardTransNotification": rcIpBgpTmpBackwardTransNotification,
       "rcIpBgpTmpAfEstablishedNotification": rcIpBgpTmpAfEstablishedNotification,
       "rcIpBgpTmpAfBackwardTransitionNotification": rcIpBgpTmpAfBackwardTransitionNotification,
       "rcIpBgpTmpLocalAsNew": rcIpBgpTmpLocalAsNew,
       "rcIpBgpTmpPeerAf": rcIpBgpTmpPeerAf,
       "rcIpBgpTmpPeerAfTable": rcIpBgpTmpPeerAfTable,
       "rcIpBgpTmpPeerAfEntry": rcIpBgpTmpPeerAfEntry,
       "rcIpBgpTmpPeerAfInstance": rcIpBgpTmpPeerAfInstance,
       "rcIpBgpTmpPeerAfLocalAddrType": rcIpBgpTmpPeerAfLocalAddrType,
       "rcIpBgpTmpPeerAfLocalAddr": rcIpBgpTmpPeerAfLocalAddr,
       "rcIpBgpTmpPeerAfRemoteAddrType": rcIpBgpTmpPeerAfRemoteAddrType,
       "rcIpBgpTmpPeerAfRemoteAddr": rcIpBgpTmpPeerAfRemoteAddr,
       "rcIpBgpTmpPeerAfLocalPort": rcIpBgpTmpPeerAfLocalPort,
       "rcIpBgpTmpPeerAfLocalAs": rcIpBgpTmpPeerAfLocalAs,
       "rcIpBgpTmpPeerAfRemotePort": rcIpBgpTmpPeerAfRemotePort,
       "rcIpBgpTmpPeerAfRemoteAs": rcIpBgpTmpPeerAfRemoteAs,
       "rcIpBgpTmpPeerAfIdentifier": rcIpBgpTmpPeerAfIdentifier,
       "rcIpBgpTmpPeerAfAdminStatus": rcIpBgpTmpPeerAfAdminStatus,
       "rcIpBgpTmpPeerAfPeerState": rcIpBgpTmpPeerAfPeerState,
       "rcIpBgpTmpPeerAfConfiguredVersion": rcIpBgpTmpPeerAfConfiguredVersion,
       "rcIpBgpTmpPeerAfNegotiatedVersion": rcIpBgpTmpPeerAfNegotiatedVersion,
       "rcIpBgpTmpPeerAfErrors": rcIpBgpTmpPeerAfErrors,
       "rcIpBgpTmpPeerAfErrorsTable": rcIpBgpTmpPeerAfErrorsTable,
       "rcIpBgpTmpPeerAfErrorsEntry": rcIpBgpTmpPeerAfErrorsEntry,
       "rcIpBgpTmpPeerAfLastErrorCodeReceived": rcIpBgpTmpPeerAfLastErrorCodeReceived,
       "rcIpBgpTmpPeerAfLastErrorSubCodeReceived": rcIpBgpTmpPeerAfLastErrorSubCodeReceived,
       "rcIpBgpTmpPeerAfLastErrorReceivedTime": rcIpBgpTmpPeerAfLastErrorReceivedTime,
       "rcIpBgpTmpPeerAfLastErrorReceivedText": rcIpBgpTmpPeerAfLastErrorReceivedText,
       "rcIpBgpTmpPeerAfLastErrorReceivedData": rcIpBgpTmpPeerAfLastErrorReceivedData,
       "rcIpBgpTmpPeerAfLastErrorCodeSent": rcIpBgpTmpPeerAfLastErrorCodeSent,
       "rcIpBgpTmpPeerAfLastErrorSubCodeSent": rcIpBgpTmpPeerAfLastErrorSubCodeSent,
       "rcIpBgpTmpPeerAfLastErrorSentTime": rcIpBgpTmpPeerAfLastErrorSentTime,
       "rcIpBgpTmpPeerAfLastErrorSentText": rcIpBgpTmpPeerAfLastErrorSentText,
       "rcIpBgpTmpPeerAfLastErrorSentData": rcIpBgpTmpPeerAfLastErrorSentData,
       "rcIpBgpTmpPeerAfTimers": rcIpBgpTmpPeerAfTimers,
       "rcIpBgpTmpPeerAfEventTimesTable": rcIpBgpTmpPeerAfEventTimesTable,
       "rcIpBgpTmpPeerAfEventTimesEntry": rcIpBgpTmpPeerAfEventTimesEntry,
       "rcIpBgpTmpPeerAfFsmEstablishedTime": rcIpBgpTmpPeerAfFsmEstablishedTime,
       "rcIpBgpTmpPeerAfInUpdatesElapsedTime": rcIpBgpTmpPeerAfInUpdatesElapsedTime,
       "rcIpBgpTmpPeerAfConfiguredTimersTable": rcIpBgpTmpPeerAfConfiguredTimersTable,
       "rcIpBgpTmpPeerAfConfiguredTimersEntry": rcIpBgpTmpPeerAfConfiguredTimersEntry,
       "rcIpBgpTmpPeerAfConnectRetryInterval": rcIpBgpTmpPeerAfConnectRetryInterval,
       "rcIpBgpTmpPeerAfHoldTimeConfigured": rcIpBgpTmpPeerAfHoldTimeConfigured,
       "rcIpBgpTmpPeerAfKeepAliveConfigured": rcIpBgpTmpPeerAfKeepAliveConfigured,
       "rcIpBgpTmpPeerAfMinASOrigInterval": rcIpBgpTmpPeerAfMinASOrigInterval,
       "rcIpBgpTmpPeerAfMinRouteAdverInterval": rcIpBgpTmpPeerAfMinRouteAdverInterval,
       "rcIpBgpTmpPeerAfNegotiatedTimersTable": rcIpBgpTmpPeerAfNegotiatedTimersTable,
       "rcIpBgpTmpPeerAfNegotiatedTimersEntry": rcIpBgpTmpPeerAfNegotiatedTimersEntry,
       "rcIpBgpTmpPeerAfHoldTime": rcIpBgpTmpPeerAfHoldTime,
       "rcIpBgpTmpPeerAfKeepAlive": rcIpBgpTmpPeerAfKeepAlive,
       "rcIpBgpTmpPeerAfCounters": rcIpBgpTmpPeerAfCounters,
       "rcIpBgpTmpPeerAfCountersTable": rcIpBgpTmpPeerAfCountersTable,
       "rcIpBgpTmpPeerAfCountersEntry": rcIpBgpTmpPeerAfCountersEntry,
       "rcIpBgpTmpPeerAfInUpdates": rcIpBgpTmpPeerAfInUpdates,
       "rcIpBgpTmpPeerAfOutUpdates": rcIpBgpTmpPeerAfOutUpdates,
       "rcIpBgpTmpPeerAfInTotalMessages": rcIpBgpTmpPeerAfInTotalMessages,
       "rcIpBgpTmpPeerAfOutTotalMessages": rcIpBgpTmpPeerAfOutTotalMessages,
       "rcIpBgpTmpPeerAfFsmEstablishedTransitions": rcIpBgpTmpPeerAfFsmEstablishedTransitions,
       "rcIpBgpTmpRib": rcIpBgpTmpRib,
       "rcIpBgpTmpNlriTable": rcIpBgpTmpNlriTable,
       "rcIpBgpTmpNlriEntry": rcIpBgpTmpNlriEntry,
       "rcIpBgpTmpNlriIndex": rcIpBgpTmpNlriIndex,
       "rcIpBgpTmpNlriAfi": rcIpBgpTmpNlriAfi,
       "rcIpBgpTmpNlriSafi": rcIpBgpTmpNlriSafi,
       "rcIpBgpTmpNlriPrefixType": rcIpBgpTmpNlriPrefixType,
       "rcIpBgpTmpNlriPrefix": rcIpBgpTmpNlriPrefix,
       "rcIpBgpTmpNlriPrefixLen": rcIpBgpTmpNlriPrefixLen,
       "rcIpBgpTmpNlriBest": rcIpBgpTmpNlriBest,
       "rcIpBgpTmpNlriCalcLocalPref": rcIpBgpTmpNlriCalcLocalPref,
       "rcIpBgpTmpAfPathAttrIndex": rcIpBgpTmpAfPathAttrIndex,
       "rcIpBgpTmpAfPathAttrUnknownIndex": rcIpBgpTmpAfPathAttrUnknownIndex,
       "rcIpBgpTmpAfPathAttrCounter": rcIpBgpTmpAfPathAttrCounter,
       "rcIpBgpTmpAfPathAttrTable": rcIpBgpTmpAfPathAttrTable,
       "rcIpBgpTmpAfPathAttrEntry": rcIpBgpTmpAfPathAttrEntry,
       "rcIpBgpTmpAfPathAttrOrigin": rcIpBgpTmpAfPathAttrOrigin,
       "rcIpBgpTmpAfPathAttrNextHopAddrType": rcIpBgpTmpAfPathAttrNextHopAddrType,
       "rcIpBgpTmpAfPathAttrNextHopAddr": rcIpBgpTmpAfPathAttrNextHopAddr,
       "rcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType": rcIpBgpTmpAfPathAttrLinkLocalNextHopAddrType,
       "rcIpBgpTmpAfPathAttrLinkLocalNextHopAddr": rcIpBgpTmpAfPathAttrLinkLocalNextHopAddr,
       "rcIpBgpTmpAfPathAttrMedPresent": rcIpBgpTmpAfPathAttrMedPresent,
       "rcIpBgpTmpAfPathAttrMed": rcIpBgpTmpAfPathAttrMed,
       "rcIpBgpTmpAfPathAttrLocalPref": rcIpBgpTmpAfPathAttrLocalPref,
       "rcIpBgpTmpAfPathAttrAtomicAggregate": rcIpBgpTmpAfPathAttrAtomicAggregate,
       "rcIpBgpTmpAfPathAttrAggregatorAS": rcIpBgpTmpAfPathAttrAggregatorAS,
       "rcIpBgpTmpAfPathAttrAggregatorAddr": rcIpBgpTmpAfPathAttrAggregatorAddr,
       "rcIpBgpTmpAsPathCalcLength": rcIpBgpTmpAsPathCalcLength,
       "rcIpBgpTmpAsPathIndex": rcIpBgpTmpAsPathIndex,
       "rcIpBgpTmpAsPathString": rcIpBgpTmpAsPathString,
       "rcIpBgpTmpExtensions": rcIpBgpTmpExtensions,
       "rcIpMpls": rcIpMpls,
       "rcIpMplsIfTable": rcIpMplsIfTable,
       "rcIpMplsIfEntry": rcIpMplsIfEntry,
       "rcIpMplsIfIfIndex": rcIpMplsIfIfIndex,
       "rcIpMplsIfLdpAdminState": rcIpMplsIfLdpAdminState,
       "rcIpMplsIfLdpSessionKeepAlive": rcIpMplsIfLdpSessionKeepAlive,
       "rcIpMplsIfLdpHelloHoldTime": rcIpMplsIfLdpHelloHoldTime,
       "rcIpMplsIfLdpTransportAddr": rcIpMplsIfLdpTransportAddr,
       "rcIpMplsIfLdpImportPolicy": rcIpMplsIfLdpImportPolicy,
       "rcIpMplsIfRsvpAdminState": rcIpMplsIfRsvpAdminState,
       "rcIpMplsIfRefreshReduction": rcIpMplsIfRefreshReduction,
       "rcIpMplsIfRefreshInterval": rcIpMplsIfRefreshInterval,
       "rcIpMplsIfRefreshMultiplier": rcIpMplsIfRefreshMultiplier,
       "rcIpMplsIfRsvpHelloInterval": rcIpMplsIfRsvpHelloInterval,
       "rcIpMplsIfMessageBundling": rcIpMplsIfMessageBundling,
       "rcIpMplsIfMtu": rcIpMplsIfMtu,
       "rcIpMplsIfRowStatus": rcIpMplsIfRowStatus,
       "rcIpInterVrfStaticRoute": rcIpInterVrfStaticRoute,
       "rcIpInterVrfStaticRouteTableSize": rcIpInterVrfStaticRouteTableSize,
       "rcIpInterVrfStaticRouteTable": rcIpInterVrfStaticRouteTable,
       "rcIpInterVrfStaticRouteEntry": rcIpInterVrfStaticRouteEntry,
       "rcIpInterVrfStaticRouteOwnerVrfId": rcIpInterVrfStaticRouteOwnerVrfId,
       "rcIpInterVrfStaticRouteDest": rcIpInterVrfStaticRouteDest,
       "rcIpInterVrfStaticRouteMask": rcIpInterVrfStaticRouteMask,
       "rcIpInterVrfStaticRouteNextHop": rcIpInterVrfStaticRouteNextHop,
       "rcIpInterVrfStaticRouteMetric": rcIpInterVrfStaticRouteMetric,
       "rcIpInterVrfStaticRouteIfIndex": rcIpInterVrfStaticRouteIfIndex,
       "rcIpInterVrfStaticRoutePreference": rcIpInterVrfStaticRoutePreference,
       "rcIpInterVrfStaticRouteEnable": rcIpInterVrfStaticRouteEnable,
       "rcIpInterVrfStaticRouteStatus": rcIpInterVrfStaticRouteStatus,
       "rcIpInterVrfStaticRouteRowStatus": rcIpInterVrfStaticRouteRowStatus,
       "rcIpInterVrfStaticRouteLocalNextHop": rcIpInterVrfStaticRouteLocalNextHop,
       "rcIpInterVrfStaticRouteNextHopVrfId": rcIpInterVrfStaticRouteNextHopVrfId,
       "rcIpBfd": rcIpBfd,
       "rcIpBfdTrapEnabled": rcIpBfdTrapEnabled,
       "rcIpBfdHoldOffTimerInterval": rcIpBfdHoldOffTimerInterval,
       "rcIpStaticMRoute": rcIpStaticMRoute,
       "rcIpStaticMRouteMib": rcIpStaticMRouteMib,
       "rcIpStaticMRouteNotifications": rcIpStaticMRouteNotifications,
       "rcIpStaticMRouteObjects": rcIpStaticMRouteObjects,
       "rcIpStaticMRouteTable": rcIpStaticMRouteTable,
       "rcIpStaticMRouteEntry": rcIpStaticMRouteEntry,
       "rcIpStaticMRouteIpAddressType": rcIpStaticMRouteIpAddressType,
       "rcIpStaticMRouteIpAddress": rcIpStaticMRouteIpAddress,
       "rcIpStaticMRouteMask": rcIpStaticMRouteMask,
       "rcIpStaticMRouteRpfAddressType": rcIpStaticMRouteRpfAddressType,
       "rcIpStaticMRouteRpfAddress": rcIpStaticMRouteRpfAddress,
       "rcIpStaticMRoutePreference": rcIpStaticMRoutePreference,
       "rcIpStaticMRouteEnable": rcIpStaticMRouteEnable,
       "rcIpStaticMRouteRowStatus": rcIpStaticMRouteRowStatus,
       "rcIpEcmp": rcIpEcmp,
       "rcIpEcmpMib": rcIpEcmpMib,
       "rcIpEcmpObjects": rcIpEcmpObjects,
       "rcIpEcmpRouteTable": rcIpEcmpRouteTable,
       "rcIpEcmpRouteEntry": rcIpEcmpRouteEntry,
       "rcIpEcmpRouteSrcIp": rcIpEcmpRouteSrcIp,
       "rcIpEcmpRouteDstIp": rcIpEcmpRouteDstIp,
       "rcIpEcmpRouteDstMask": rcIpEcmpRouteDstMask,
       "rcIpEcmpRouteNextHopLegacy": rcIpEcmpRouteNextHopLegacy,
       "rcIpEcmpRouteNextHopRMod": rcIpEcmpRouteNextHopRMod,
       "rcIPClearArpRecordTable": rcIPClearArpRecordTable,
       "rcIPClearArpRecordEntry": rcIPClearArpRecordEntry,
       "rcIPClearArpRecordIpAddr": rcIPClearArpRecordIpAddr,
       "rcIPClearArpRecordVlanId": rcIPClearArpRecordVlanId,
       "rcIPClearArpRecordLCForceDelete": rcIPClearArpRecordLCForceDelete,
       "rcIPClearIPMCRecordTable": rcIPClearIPMCRecordTable,
       "rcIPClearIPMCRecordEntry": rcIPClearIPMCRecordEntry,
       "rcIPClearIPMCRecordGroup": rcIPClearIPMCRecordGroup,
       "rcIPClearIPMCRecordVlanId": rcIPClearIPMCRecordVlanId,
       "rcIPClearIPMCRecordSource": rcIPClearIPMCRecordSource,
       "rcIPClearIPMCRecordLCForceDelete": rcIPClearIPMCRecordLCForceDelete,
       "rcIpMulticastSquareSmlt": rcIpMulticastSquareSmlt,
       "rcIpMulticastSquareSmltEnable": rcIpMulticastSquareSmltEnable,
       "rcArp": rcArp,
       "rcArpExtLifeTime": rcArpExtLifeTime,
       "rcArpExtTable": rcArpExtTable,
       "rcArpExtEntry": rcArpExtEntry,
       "rcArpExtEntIfIndex": rcArpExtEntIfIndex,
       "rcArpExtEntDoProxy": rcArpExtEntDoProxy,
       "rcArpExtEntDoResp": rcArpExtEntDoResp,
       "rcArpExtEntDoFlood": rcArpExtEntDoFlood,
       "rcArpExtV2Table": rcArpExtV2Table,
       "rcArpExtV2Entry": rcArpExtV2Entry,
       "rcArpExtV2EntIfIndex": rcArpExtV2EntIfIndex,
       "rcArpExtV2EntIpIfAddr": rcArpExtV2EntIpIfAddr,
       "rcArpExtV2EntDoProxy": rcArpExtV2EntDoProxy,
       "rcArpExtV2EntDoResp": rcArpExtV2EntDoResp,
       "rcRip": rcRip,
       "rcRipExtOperation": rcRipExtOperation,
       "rcRipExtUpdateTime": rcRipExtUpdateTime,
       "rcRipExtTable": rcRipExtTable,
       "rcRipExtEntry": rcRipExtEntry,
       "rcRipExtEntIfIndex": rcRipExtEntIfIndex,
       "rcRipExtEntTalk": rcRipExtEntTalk,
       "rcRipExtEntListen": rcRipExtEntListen,
       "rcRipExtEntPoison": rcRipExtEntPoison,
       "rcRipExtV2Table": rcRipExtV2Table,
       "rcRipExtV2Entry": rcRipExtV2Entry,
       "rcRipExtV2EntIfIndex": rcRipExtV2EntIfIndex,
       "rcRipExtV2EntIpIfAddr": rcRipExtV2EntIpIfAddr,
       "rcRipExtV2EntTalk": rcRipExtV2EntTalk,
       "rcRipExtV2EntListen": rcRipExtV2EntListen,
       "rcRipExtV2EntPoison": rcRipExtV2EntPoison,
       "rcTest": rcTest,
       "rcTestExtTable": rcTestExtTable,
       "rcTestEntry": rcTestEntry,
       "rcTestExtIfIndex": rcTestExtIfIndex,
       "rcTestExtPassCount": rcTestExtPassCount,
       "rcTestExtFailCount": rcTestExtFailCount,
       "rcTestTypes": rcTestTypes,
       "rcTestTypesFabric": rcTestTypesFabric,
       "rcTestTypesArTable": rcTestTypesArTable,
       "rcTestTypesExtLoopBack": rcTestTypesExtLoopBack,
       "rcTestCodes": rcTestCodes,
       "rcTestCodesNoReceive": rcTestCodesNoReceive,
       "rcTestCodesBadSeq": rcTestCodesBadSeq,
       "rcTestCodesBadLen": rcTestCodesBadLen,
       "rcTestCodesBadData": rcTestCodesBadData,
       "rcStat": rcStat,
       "rcStatTable": rcStatTable,
       "rcStatEntry": rcStatEntry,
       "rcStatPortIndex": rcStatPortIndex,
       "rcStatFrameTooShorts": rcStatFrameTooShorts,
       "rcStatBridgeInUnicastFrames": rcStatBridgeInUnicastFrames,
       "rcStatBridgeInMulticastFrames": rcStatBridgeInMulticastFrames,
       "rcStatBridgeInBroadcastFrames": rcStatBridgeInBroadcastFrames,
       "rcStatBridgeInDiscards": rcStatBridgeInDiscards,
       "rcStatBridgeOutUnicastFrames": rcStatBridgeOutUnicastFrames,
       "rcStatBridgeOutMulticastFrames": rcStatBridgeOutMulticastFrames,
       "rcStatBridgeOutBroadcastFrames": rcStatBridgeOutBroadcastFrames,
       "rcStatRouteInUnicastFrames": rcStatRouteInUnicastFrames,
       "rcStatRouteInMulticastFrames": rcStatRouteInMulticastFrames,
       "rcStatRouteInDiscards": rcStatRouteInDiscards,
       "rcStatRouteOutUnicastFrames": rcStatRouteOutUnicastFrames,
       "rcStatRouteOutMulticastFrames": rcStatRouteOutMulticastFrames,
       "rcStatStgForwardTransitions": rcStatStgForwardTransitions,
       "rcStatStgInConfigBpdus": rcStatStgInConfigBpdus,
       "rcStatStgInTcnBpdus": rcStatStgInTcnBpdus,
       "rcStatStgInBadBpdus": rcStatStgInBadBpdus,
       "rcStatStgOutConfigBpdus": rcStatStgOutConfigBpdus,
       "rcStatStgOutTcnBpdus": rcStatStgOutTcnBpdus,
       "rcStatBridgeOutFrames": rcStatBridgeOutFrames,
       "rcStatGigTable": rcStatGigTable,
       "rcStatGigEntry": rcStatGigEntry,
       "rcStatGigPortIndex": rcStatGigPortIndex,
       "rcStatGigLinkFailures": rcStatGigLinkFailures,
       "rcStatGigPacketErrors": rcStatGigPacketErrors,
       "rcStatGigCarrierErrors": rcStatGigCarrierErrors,
       "rcStatGigLinkInactiveErrors": rcStatGigLinkInactiveErrors,
       "rcStatGigInFlowCtrlPkts": rcStatGigInFlowCtrlPkts,
       "rcStatGigOutFlowCtrlPkts": rcStatGigOutFlowCtrlPkts,
       "rcStatOspf": rcStatOspf,
       "rcStatOspfBuffersAllocated": rcStatOspfBuffersAllocated,
       "rcStatOspfBuffersFreed": rcStatOspfBuffersFreed,
       "rcStatOspfBufferAllocFailures": rcStatOspfBufferAllocFailures,
       "rcStatOspfBufferFreeFailures": rcStatOspfBufferFreeFailures,
       "rcStatOspfTxPackets": rcStatOspfTxPackets,
       "rcStatOspfRxPackets": rcStatOspfRxPackets,
       "rcStatOspfTxDropPackets": rcStatOspfTxDropPackets,
       "rcStatOspfRxDropPackets": rcStatOspfRxDropPackets,
       "rcStatOspfRxBadPackets": rcStatOspfRxBadPackets,
       "rcStatOspfSpfRuns": rcStatOspfSpfRuns,
       "rcStatOspfLastSpfRun": rcStatOspfLastSpfRun,
       "rcStatOspfLsdbTblSize": rcStatOspfLsdbTblSize,
       "rcStatOspfRoutes": rcStatOspfRoutes,
       "rcStatOspfAdjacencies": rcStatOspfAdjacencies,
       "rcStatOspfAreas": rcStatOspfAreas,
       "rcStatIgmp": rcStatIgmp,
       "rcStatIgmpInMsgs": rcStatIgmpInMsgs,
       "rcStatIgmpInErrors": rcStatIgmpInErrors,
       "rcStatIgmpInQueries": rcStatIgmpInQueries,
       "rcStatIgmpInReports": rcStatIgmpInReports,
       "rcStatIgmpInLeaves": rcStatIgmpInLeaves,
       "rcStatIgmpInvalid": rcStatIgmpInvalid,
       "rcStatIgmpOutMsgs": rcStatIgmpOutMsgs,
       "rcStatOspfIfTable": rcStatOspfIfTable,
       "rcStatOspfIfEntry": rcStatOspfIfEntry,
       "rcStatOspfIfIndex": rcStatOspfIfIndex,
       "rcStatOspfIfRxHellos": rcStatOspfIfRxHellos,
       "rcStatOspfIfRxDBDescrs": rcStatOspfIfRxDBDescrs,
       "rcStatOspfIfRxLSUpdates": rcStatOspfIfRxLSUpdates,
       "rcStatOspfIfRxLSReqs": rcStatOspfIfRxLSReqs,
       "rcStatOspfIfRxLSAcks": rcStatOspfIfRxLSAcks,
       "rcStatOspfIfTxHellos": rcStatOspfIfTxHellos,
       "rcStatOspfIfTxDBDescrs": rcStatOspfIfTxDBDescrs,
       "rcStatOspfIfTxLSUpdates": rcStatOspfIfTxLSUpdates,
       "rcStatOspfIfTxLSReqs": rcStatOspfIfTxLSReqs,
       "rcStatOspfIfTxLSAcks": rcStatOspfIfTxLSAcks,
       "rcStatOspfIfVersionMismatches": rcStatOspfIfVersionMismatches,
       "rcStatOspfIfAreaMismatches": rcStatOspfIfAreaMismatches,
       "rcStatOspfIfAuthTypeMismatches": rcStatOspfIfAuthTypeMismatches,
       "rcStatOspfIfAuthFailures": rcStatOspfIfAuthFailures,
       "rcStatOspfIfNetMaskMismatches": rcStatOspfIfNetMaskMismatches,
       "rcStatOspfIfHelloIntervalMismatches": rcStatOspfIfHelloIntervalMismatches,
       "rcStatOspfIfDeadIntervalMismatches": rcStatOspfIfDeadIntervalMismatches,
       "rcStatOspfIfOptionMismatches": rcStatOspfIfOptionMismatches,
       "rcStatMlt": rcStatMlt,
       "rcStatMltIfExtnTable": rcStatMltIfExtnTable,
       "rcStatMltIfExtnEntry": rcStatMltIfExtnEntry,
       "rcStatMltIfExtnMltId": rcStatMltIfExtnMltId,
       "rcStatMltIfExtnIfInMulticastPkts": rcStatMltIfExtnIfInMulticastPkts,
       "rcStatMltIfExtnIfInBroadcastPkts": rcStatMltIfExtnIfInBroadcastPkts,
       "rcStatMltIfExtnIfOutMulticastPkts": rcStatMltIfExtnIfOutMulticastPkts,
       "rcStatMltIfExtnIfOutBroadcastPkts": rcStatMltIfExtnIfOutBroadcastPkts,
       "rcStatMltIfExtnIfHCInOctets": rcStatMltIfExtnIfHCInOctets,
       "rcStatMltIfExtnIfHCInUcastPkts": rcStatMltIfExtnIfHCInUcastPkts,
       "rcStatMltIfExtnIfHCInMulticastPkt": rcStatMltIfExtnIfHCInMulticastPkt,
       "rcStatMltIfExtnIfHCInBroadcastPkt": rcStatMltIfExtnIfHCInBroadcastPkt,
       "rcStatMltIfExtnIfHCOutOctets": rcStatMltIfExtnIfHCOutOctets,
       "rcStatMltIfExtnIfHCOutUcastPkts": rcStatMltIfExtnIfHCOutUcastPkts,
       "rcStatMltIfExtnIfHCOutMulticast": rcStatMltIfExtnIfHCOutMulticast,
       "rcStatMltIfExtnIfHCOutBroadcast": rcStatMltIfExtnIfHCOutBroadcast,
       "rcStatMltEtherTable": rcStatMltEtherTable,
       "rcStatMltEtherEntry": rcStatMltEtherEntry,
       "rcStatMltEtherMltId": rcStatMltEtherMltId,
       "rcStatMltEtherAlignmentErrors": rcStatMltEtherAlignmentErrors,
       "rcStatMltEtherFCSErrors": rcStatMltEtherFCSErrors,
       "rcStatMltEtherSingleCollFrames": rcStatMltEtherSingleCollFrames,
       "rcStatMltEtherMultipleCollFrames": rcStatMltEtherMultipleCollFrames,
       "rcStatMltEtherSQETestError": rcStatMltEtherSQETestError,
       "rcStatMltEtherDeferredTransmiss": rcStatMltEtherDeferredTransmiss,
       "rcStatMltEtherLateCollisions": rcStatMltEtherLateCollisions,
       "rcStatMltEtherExcessiveCollis": rcStatMltEtherExcessiveCollis,
       "rcStatMltEtherIMacTransmitError": rcStatMltEtherIMacTransmitError,
       "rcStatMltEtherCarrierSenseError": rcStatMltEtherCarrierSenseError,
       "rcStatMltEtherFrameTooLong": rcStatMltEtherFrameTooLong,
       "rcStatMltEtherIMacReceiveError": rcStatMltEtherIMacReceiveError,
       "rcStatMltIpTable": rcStatMltIpTable,
       "rcStatMltIpEntry": rcStatMltIpEntry,
       "rcStatMltIpMltId": rcStatMltIpMltId,
       "rcStatMltIpInReceives": rcStatMltIpInReceives,
       "rcStatMltIpInHdrErrors": rcStatMltIpInHdrErrors,
       "rcStatMltIpInAddrErrors": rcStatMltIpInAddrErrors,
       "rcStatMltIpForwDatagrams": rcStatMltIpForwDatagrams,
       "rcStatMltIpInUnknownProtos": rcStatMltIpInUnknownProtos,
       "rcStatMltIpInDiscards": rcStatMltIpInDiscards,
       "rcStatMltIpInDelivers": rcStatMltIpInDelivers,
       "rcStatMltIpOutRequest": rcStatMltIpOutRequest,
       "rcStatMltIpOutDiscards": rcStatMltIpOutDiscards,
       "rcStatMltIpOutNoRoutes": rcStatMltIpOutNoRoutes,
       "rcStatMltIpReasmReqds": rcStatMltIpReasmReqds,
       "rcStatMltIpReasmOKs": rcStatMltIpReasmOKs,
       "rcStatMltIpReasmFails": rcStatMltIpReasmFails,
       "rcStatMltIpFragOKs": rcStatMltIpFragOKs,
       "rcStatMltIpFragFails": rcStatMltIpFragFails,
       "rcStatMltIpFragCreates": rcStatMltIpFragCreates,
       "rcStatMltIpRoutingDiscards": rcStatMltIpRoutingDiscards,
       "rcStatSmltIstDownCnt": rcStatSmltIstDownCnt,
       "rcStatSmltHelloTxMsgCnt": rcStatSmltHelloTxMsgCnt,
       "rcStatSmltHelloRxMsgCnt": rcStatSmltHelloRxMsgCnt,
       "rcStatSmltLearnMacAddrTxMsgCnt": rcStatSmltLearnMacAddrTxMsgCnt,
       "rcStatSmltLearnMacAddrRxMsgCnt": rcStatSmltLearnMacAddrRxMsgCnt,
       "rcStatSmltMacAddrAgeOutTxMsgCnt": rcStatSmltMacAddrAgeOutTxMsgCnt,
       "rcStatSmltMacAddrAgeOutRxMsgCnt": rcStatSmltMacAddrAgeOutRxMsgCnt,
       "rcStatSmltMacAddrAgeExpTxMsgCnt": rcStatSmltMacAddrAgeExpTxMsgCnt,
       "rcStatSmltMacAddrAgeExpRxMsgCnt": rcStatSmltMacAddrAgeExpRxMsgCnt,
       "rcStatSmltStgInfoTxMsgCnt": rcStatSmltStgInfoTxMsgCnt,
       "rcStatSmltStgInfoRxMsgCnt": rcStatSmltStgInfoRxMsgCnt,
       "rcStatSmltDelMacAddrTxMsgCnt": rcStatSmltDelMacAddrTxMsgCnt,
       "rcStatSmltDelMacAddrRxMsgCnt": rcStatSmltDelMacAddrRxMsgCnt,
       "rcStatSmltSmltDownTxMsgCnt": rcStatSmltSmltDownTxMsgCnt,
       "rcStatSmltSmltDownRxMsgCnt": rcStatSmltSmltDownRxMsgCnt,
       "rcStatSmltSmltUpTxMsgCnt": rcStatSmltSmltUpTxMsgCnt,
       "rcStatSmltSmltUpRxMsgCnt": rcStatSmltSmltUpRxMsgCnt,
       "rcStatSmltSendMacTblTxMsgCnt": rcStatSmltSendMacTblTxMsgCnt,
       "rcStatSmltSendMacTblRxMsgCnt": rcStatSmltSendMacTblRxMsgCnt,
       "rcStatSmltIgmpTxMsgCnt": rcStatSmltIgmpTxMsgCnt,
       "rcStatSmltIgmpRxMsgCnt": rcStatSmltIgmpRxMsgCnt,
       "rcStatSmltPortDownTxMsgCnt": rcStatSmltPortDownTxMsgCnt,
       "rcStatSmltPortDownRxMsgCnt": rcStatSmltPortDownRxMsgCnt,
       "rcStatSmltReqMacTblTxMsgCnt": rcStatSmltReqMacTblTxMsgCnt,
       "rcStatSmltReqMacTblRxMsgCnt": rcStatSmltReqMacTblRxMsgCnt,
       "rcStatSmltRxUnknownMsgTypeCnt": rcStatSmltRxUnknownMsgTypeCnt,
       "rcStatOspfIfV2Table": rcStatOspfIfV2Table,
       "rcStatOspfIfV2Entry": rcStatOspfIfV2Entry,
       "rcStatOspfIfV2Index": rcStatOspfIfV2Index,
       "rcStatOspfIfV2Addr": rcStatOspfIfV2Addr,
       "rcStatOspfIfV2RxHellos": rcStatOspfIfV2RxHellos,
       "rcStatOspfIfV2RxDBDescrs": rcStatOspfIfV2RxDBDescrs,
       "rcStatOspfIfV2RxLSUpdates": rcStatOspfIfV2RxLSUpdates,
       "rcStatOspfIfV2RxLSReqs": rcStatOspfIfV2RxLSReqs,
       "rcStatOspfIfV2RxLSAcks": rcStatOspfIfV2RxLSAcks,
       "rcStatOspfIfV2TxHellos": rcStatOspfIfV2TxHellos,
       "rcStatOspfIfV2TxDBDescrs": rcStatOspfIfV2TxDBDescrs,
       "rcStatOspfIfV2TxLSUpdates": rcStatOspfIfV2TxLSUpdates,
       "rcStatOspfIfV2TxLSReqs": rcStatOspfIfV2TxLSReqs,
       "rcStatOspfIfV2TxLSAcks": rcStatOspfIfV2TxLSAcks,
       "rcStatOspfIfV2VersionMismatches": rcStatOspfIfV2VersionMismatches,
       "rcStatOspfIfV2AreaMismatches": rcStatOspfIfV2AreaMismatches,
       "rcStatOspfIfV2AuthTypeMismatches": rcStatOspfIfV2AuthTypeMismatches,
       "rcStatOspfIfV2AuthFailures": rcStatOspfIfV2AuthFailures,
       "rcStatOspfIfV2NetMaskMismatches": rcStatOspfIfV2NetMaskMismatches,
       "rcStatOspfIfV2HelloIntervalMismatches": rcStatOspfIfV2HelloIntervalMismatches,
       "rcStatOspfIfV2DeadIntervalMismatches": rcStatOspfIfV2DeadIntervalMismatches,
       "rcStatOspfIfV2OptionMismatches": rcStatOspfIfV2OptionMismatches,
       "rcStatPos": rcStatPos,
       "rcStatPosControlTable": rcStatPosControlTable,
       "rcStatPosControlEntry": rcStatPosControlEntry,
       "rcStatPosControlPortIndex": rcStatPosControlPortIndex,
       "rcStatPosControlInErrors": rcStatPosControlInErrors,
       "rcStatPosControlInUnknownProtos": rcStatPosControlInUnknownProtos,
       "rcStatPosControlOutErrors": rcStatPosControlOutErrors,
       "rcStatPosControlHCInOctets": rcStatPosControlHCInOctets,
       "rcStatPosControlHCInUcastPkts": rcStatPosControlHCInUcastPkts,
       "rcStatPosControlHCInMulticastPkts": rcStatPosControlHCInMulticastPkts,
       "rcStatPosControlHCInBroadcastPkts": rcStatPosControlHCInBroadcastPkts,
       "rcStatPosControlHCInDiscards": rcStatPosControlHCInDiscards,
       "rcStatPosControlHCOutOctets": rcStatPosControlHCOutOctets,
       "rcStatPosControlHCOutUcastPkts": rcStatPosControlHCOutUcastPkts,
       "rcStatPosControlHCOutMulticastPkts": rcStatPosControlHCOutMulticastPkts,
       "rcStatPosControlHCOutBroadcastPkts": rcStatPosControlHCOutBroadcastPkts,
       "rcStatPosControlHCOutDiscards": rcStatPosControlHCOutDiscards,
       "rcStatMulticast": rcStatMulticast,
       "rcStatMulticastSourceGroupThresholdExceeded": rcStatMulticastSourceGroupThresholdExceeded,
       "rcStatMulticastEgressStreamThresholdExceeded": rcStatMulticastEgressStreamThresholdExceeded,
       "rcStatBgp": rcStatBgp,
       "rcStatBgpStarts": rcStatBgpStarts,
       "rcStatBgpStops": rcStatBgpStops,
       "rcStatBgpOpens": rcStatBgpOpens,
       "rcStatBgpCloses": rcStatBgpCloses,
       "rcStatBgpFails": rcStatBgpFails,
       "rcStatBgpFatals": rcStatBgpFatals,
       "rcStatBgpConnExps": rcStatBgpConnExps,
       "rcStatBgpHoldExps": rcStatBgpHoldExps,
       "rcStatBgpKeepExps": rcStatBgpKeepExps,
       "rcStatBgpRxOpens": rcStatBgpRxOpens,
       "rcStatBgpRxKeeps": rcStatBgpRxKeeps,
       "rcStatBgpRxUpdates": rcStatBgpRxUpdates,
       "rcStatBgpRxNotifys": rcStatBgpRxNotifys,
       "rcStatBgpTxOpens": rcStatBgpTxOpens,
       "rcStatBgpTxKeeps": rcStatBgpTxKeeps,
       "rcStatBgpTxUpdates": rcStatBgpTxUpdates,
       "rcStatBgpTxNotifys": rcStatBgpTxNotifys,
       "rcStatBgpBadEvents": rcStatBgpBadEvents,
       "rcStatBgpSyncFails": rcStatBgpSyncFails,
       "rcStatBgpTrEvent": rcStatBgpTrEvent,
       "rcStatBgpRxECodeHeader": rcStatBgpRxECodeHeader,
       "rcStatBgpRxECodeOpen": rcStatBgpRxECodeOpen,
       "rcStatBgpRxECodeUpdate": rcStatBgpRxECodeUpdate,
       "rcStatBgpRxECodeHoldtimer": rcStatBgpRxECodeHoldtimer,
       "rcStatBgpRxECodeFSM": rcStatBgpRxECodeFSM,
       "rcStatBgpRxECodeCease": rcStatBgpRxECodeCease,
       "rcStatBgpRxHdrCodeNoSync": rcStatBgpRxHdrCodeNoSync,
       "rcStatBgpRxHdrCodeInvalidMsgLen": rcStatBgpRxHdrCodeInvalidMsgLen,
       "rcStatBgpRxHdrCodeInvalidMsgType": rcStatBgpRxHdrCodeInvalidMsgType,
       "rcStatBgpRxOpCodeBadVer": rcStatBgpRxOpCodeBadVer,
       "rcStatBgpRxOpCodeBadAs": rcStatBgpRxOpCodeBadAs,
       "rcStatBgpRxOpCodeBadRtID": rcStatBgpRxOpCodeBadRtID,
       "rcStatBgpRxOpCodeUnsuppOption": rcStatBgpRxOpCodeUnsuppOption,
       "rcStatBgpRxOpCodeAuthFail": rcStatBgpRxOpCodeAuthFail,
       "rcStatBgpRxOpCodeBadHold": rcStatBgpRxOpCodeBadHold,
       "rcStatBgpRxUpdCodeMalformedAttrList": rcStatBgpRxUpdCodeMalformedAttrList,
       "rcStatBgpRxUpdCodeWelknownAttrUnrecog": rcStatBgpRxUpdCodeWelknownAttrUnrecog,
       "rcStatBgpRxUpdCodeWelknownAttrMiss": rcStatBgpRxUpdCodeWelknownAttrMiss,
       "rcStatBgpRxUpdCodeAttrFlagError": rcStatBgpRxUpdCodeAttrFlagError,
       "rcStatBgpRxUpdCodeAttrLenError": rcStatBgpRxUpdCodeAttrLenError,
       "rcStatBgpRxUpdCodeBadORIGINAttr": rcStatBgpRxUpdCodeBadORIGINAttr,
       "rcStatBgpRxUpdCodeASRoutingLoop": rcStatBgpRxUpdCodeASRoutingLoop,
       "rcStatBgpRxUpdCodeBadNHAttr": rcStatBgpRxUpdCodeBadNHAttr,
       "rcStatBgpRxUpdCodeOptionalAttrError": rcStatBgpRxUpdCodeOptionalAttrError,
       "rcStatBgpRxUpdCodeBadNetworkField": rcStatBgpRxUpdCodeBadNetworkField,
       "rcStatBgpRxUpdCodeMalformedASPath": rcStatBgpRxUpdCodeMalformedASPath,
       "rcStatBgpTxECodeHeader": rcStatBgpTxECodeHeader,
       "rcStatBgpTxECodeOpen": rcStatBgpTxECodeOpen,
       "rcStatBgpTxECodeUpdate": rcStatBgpTxECodeUpdate,
       "rcStatBgpTxECodeHoldtimer": rcStatBgpTxECodeHoldtimer,
       "rcStatBgpTxECodeFSM": rcStatBgpTxECodeFSM,
       "rcStatBgpTxECodeCease": rcStatBgpTxECodeCease,
       "rcStatBgpTxHdrCodeNoSync": rcStatBgpTxHdrCodeNoSync,
       "rcStatBgpTxHdrCodeInvalidMsgLen": rcStatBgpTxHdrCodeInvalidMsgLen,
       "rcStatBgpTxHdrCodeInvalidMsgType": rcStatBgpTxHdrCodeInvalidMsgType,
       "rcStatBgpTxOpCodeBadVer": rcStatBgpTxOpCodeBadVer,
       "rcStatBgpTxOpCodeBadAs": rcStatBgpTxOpCodeBadAs,
       "rcStatBgpTxOpCodeBadRtID": rcStatBgpTxOpCodeBadRtID,
       "rcStatBgpTxOpCodeUnsuppOption": rcStatBgpTxOpCodeUnsuppOption,
       "rcStatBgpTxOpCodeAuthFail": rcStatBgpTxOpCodeAuthFail,
       "rcStatBgpTxOpCodeBadHold": rcStatBgpTxOpCodeBadHold,
       "rcStatBgpTxUpdCodeMalformedAttrList": rcStatBgpTxUpdCodeMalformedAttrList,
       "rcStatBgpTxUpdCodeWelknownAttrUnrecog": rcStatBgpTxUpdCodeWelknownAttrUnrecog,
       "rcStatBgpTxUpdCodeWelknownAttrMiss": rcStatBgpTxUpdCodeWelknownAttrMiss,
       "rcStatBgpTxUpdCodeAttrFlagError": rcStatBgpTxUpdCodeAttrFlagError,
       "rcStatBgpTxUpdCodeAttrLenError": rcStatBgpTxUpdCodeAttrLenError,
       "rcStatBgpTxUpdCodeBadORIGINAttr": rcStatBgpTxUpdCodeBadORIGINAttr,
       "rcStatBgpTxUpdCodeASRoutingLoop": rcStatBgpTxUpdCodeASRoutingLoop,
       "rcStatBgpTxUpdCodeBadNHAttr": rcStatBgpTxUpdCodeBadNHAttr,
       "rcStatBgpTxUpdCodeOptionalAttrError": rcStatBgpTxUpdCodeOptionalAttrError,
       "rcStatBgpTxUpdCodeBadNetworkField": rcStatBgpTxUpdCodeBadNetworkField,
       "rcStatBgpTxUpdCodeMalformedASPath": rcStatBgpTxUpdCodeMalformedASPath,
       "rcStatBgpReset": rcStatBgpReset,
       "rcStatBgpPeerTable": rcStatBgpPeerTable,
       "rcStatBgpPeerEntry": rcStatBgpPeerEntry,
       "rcStatBgpPeerAddr": rcStatBgpPeerAddr,
       "rcStatBgpPeerStarts": rcStatBgpPeerStarts,
       "rcStatBgpPeerStops": rcStatBgpPeerStops,
       "rcStatBgpPeerOpens": rcStatBgpPeerOpens,
       "rcStatBgpPeerCloses": rcStatBgpPeerCloses,
       "rcStatBgpPeerFails": rcStatBgpPeerFails,
       "rcStatBgpPeerFatals": rcStatBgpPeerFatals,
       "rcStatBgpPeerConnExps": rcStatBgpPeerConnExps,
       "rcStatBgpPeerHoldExps": rcStatBgpPeerHoldExps,
       "rcStatBgpPeerKeepExps": rcStatBgpPeerKeepExps,
       "rcStatBgpPeerTxMsgs": rcStatBgpPeerTxMsgs,
       "rcStatBgpPeerTxOpens": rcStatBgpPeerTxOpens,
       "rcStatBgpPeerTxKeeps": rcStatBgpPeerTxKeeps,
       "rcStatBgpPeerTxUpdates": rcStatBgpPeerTxUpdates,
       "rcStatBgpPeerTxNotifys": rcStatBgpPeerTxNotifys,
       "rcStatBgpPeerRxMsgs": rcStatBgpPeerRxMsgs,
       "rcStatBgpPeerRxInCompPkts": rcStatBgpPeerRxInCompPkts,
       "rcStatBgpPeerRxOpens": rcStatBgpPeerRxOpens,
       "rcStatBgpPeerRxKeeps": rcStatBgpPeerRxKeeps,
       "rcStatBgpPeerRxUpdates": rcStatBgpPeerRxUpdates,
       "rcStatBgpPeerRxNotifys": rcStatBgpPeerRxNotifys,
       "rcStatBgpPeerBadEvents": rcStatBgpPeerBadEvents,
       "rcStatBgpPeerSyncFails": rcStatBgpPeerSyncFails,
       "rcStatBgpPeerRcvdTooShort": rcStatBgpPeerRcvdTooShort,
       "rcStatBgpPeerNoMarker": rcStatBgpPeerNoMarker,
       "rcStatBgpPeerDropped": rcStatBgpPeerDropped,
       "rcStatBgpPeerBadMsgTypes": rcStatBgpPeerBadMsgTypes,
       "rcStatBgpPeerTrEvent": rcStatBgpPeerTrEvent,
       "rcStatBgpPeerTxRoutes": rcStatBgpPeerTxRoutes,
       "rcStatBgpPeerRxRoutesAdded": rcStatBgpPeerRxRoutesAdded,
       "rcStatBgpPeerRxRoutesReplaced": rcStatBgpPeerRxRoutesReplaced,
       "rcStatBgpPeerRxNlri": rcStatBgpPeerRxNlri,
       "rcStatBgpPeerRxValidUpdates": rcStatBgpPeerRxValidUpdates,
       "rcStatBgpPeerRxECodeHeader": rcStatBgpPeerRxECodeHeader,
       "rcStatBgpPeerRxECodeOpen": rcStatBgpPeerRxECodeOpen,
       "rcStatBgpPeerRxECodeUpdate": rcStatBgpPeerRxECodeUpdate,
       "rcStatBgpPeerRxECodeHoldtimer": rcStatBgpPeerRxECodeHoldtimer,
       "rcStatBgpPeerRxECodeFSM": rcStatBgpPeerRxECodeFSM,
       "rcStatBgpPeerRxECodeCease": rcStatBgpPeerRxECodeCease,
       "rcStatBgpPeerRxHdrCodeNoSync": rcStatBgpPeerRxHdrCodeNoSync,
       "rcStatBgpPeerRxHdrCodeInvalidMsgLen": rcStatBgpPeerRxHdrCodeInvalidMsgLen,
       "rcStatBgpPeerRxHdrCodeInvalidMsgType": rcStatBgpPeerRxHdrCodeInvalidMsgType,
       "rcStatBgpPeerRxOpCodeBadVer": rcStatBgpPeerRxOpCodeBadVer,
       "rcStatBgpPeerRxOpCodeBadAs": rcStatBgpPeerRxOpCodeBadAs,
       "rcStatBgpPeerRxOpCodeBadRtID": rcStatBgpPeerRxOpCodeBadRtID,
       "rcStatBgpPeerRxOpCodeUnsuppOption": rcStatBgpPeerRxOpCodeUnsuppOption,
       "rcStatBgpPeerRxOpCodeAuthFail": rcStatBgpPeerRxOpCodeAuthFail,
       "rcStatBgpPeerRxOpCodeBadHold": rcStatBgpPeerRxOpCodeBadHold,
       "rcStatBgpPeerRxUpdCodeMalformedAttrList": rcStatBgpPeerRxUpdCodeMalformedAttrList,
       "rcStatBgpPeerRxUpdCodeWelknownAttrUnrecog": rcStatBgpPeerRxUpdCodeWelknownAttrUnrecog,
       "rcStatBgpPeerRxUpdCodeWelknownAttrMiss": rcStatBgpPeerRxUpdCodeWelknownAttrMiss,
       "rcStatBgpPeerRxUpdCodeAttrFlagError": rcStatBgpPeerRxUpdCodeAttrFlagError,
       "rcStatBgpPeerRxUpdCodeAttrLenError": rcStatBgpPeerRxUpdCodeAttrLenError,
       "rcStatBgpPeerRxUpdCodeBadORIGINAttr": rcStatBgpPeerRxUpdCodeBadORIGINAttr,
       "rcStatBgpPeerRxUpdCodeASRoutingLoop": rcStatBgpPeerRxUpdCodeASRoutingLoop,
       "rcStatBgpPeerRxUpdCodeBadNHAttr": rcStatBgpPeerRxUpdCodeBadNHAttr,
       "rcStatBgpPeerRxUpdCodeOptionalAttrError": rcStatBgpPeerRxUpdCodeOptionalAttrError,
       "rcStatBgpPeerRxUpdCodeBadNetworkField": rcStatBgpPeerRxUpdCodeBadNetworkField,
       "rcStatBgpPeerRxUpdCodeMalformedASPath": rcStatBgpPeerRxUpdCodeMalformedASPath,
       "rcStatBgpPeerTxECodeHeader": rcStatBgpPeerTxECodeHeader,
       "rcStatBgpPeerTxECodeOpen": rcStatBgpPeerTxECodeOpen,
       "rcStatBgpPeerTxECodeUpdate": rcStatBgpPeerTxECodeUpdate,
       "rcStatBgpPeerTxECodeHoldtimer": rcStatBgpPeerTxECodeHoldtimer,
       "rcStatBgpPeerTxECodeFSM": rcStatBgpPeerTxECodeFSM,
       "rcStatBgpPeerTxECodeCease": rcStatBgpPeerTxECodeCease,
       "rcStatBgpPeerTxHdrCodeNoSync": rcStatBgpPeerTxHdrCodeNoSync,
       "rcStatBgpPeerTxHdrCodeInvalidMsgLen": rcStatBgpPeerTxHdrCodeInvalidMsgLen,
       "rcStatBgpPeerTxHdrCodeInvalidMsgType": rcStatBgpPeerTxHdrCodeInvalidMsgType,
       "rcStatBgpPeerTxOpCodeBadVer": rcStatBgpPeerTxOpCodeBadVer,
       "rcStatBgpPeerTxOpCodeBadAs": rcStatBgpPeerTxOpCodeBadAs,
       "rcStatBgpPeerTxOpCodeBadRtID": rcStatBgpPeerTxOpCodeBadRtID,
       "rcStatBgpPeerTxOpCodeUnsuppOption": rcStatBgpPeerTxOpCodeUnsuppOption,
       "rcStatBgpPeerTxOpCodeAuthFail": rcStatBgpPeerTxOpCodeAuthFail,
       "rcStatBgpPeerTxOpCodeBadHold": rcStatBgpPeerTxOpCodeBadHold,
       "rcStatBgpPeerTxUpdCodeMalformedAttrList": rcStatBgpPeerTxUpdCodeMalformedAttrList,
       "rcStatBgpPeerTxUpdCodeWelknownAttrUnrecog": rcStatBgpPeerTxUpdCodeWelknownAttrUnrecog,
       "rcStatBgpPeerTxUpdCodeWelknownAttrMiss": rcStatBgpPeerTxUpdCodeWelknownAttrMiss,
       "rcStatBgpPeerTxUpdCodeAttrFlagError": rcStatBgpPeerTxUpdCodeAttrFlagError,
       "rcStatBgpPeerTxUpdCodeAttrLenError": rcStatBgpPeerTxUpdCodeAttrLenError,
       "rcStatBgpPeerTxUpdCodeBadORIGINAttr": rcStatBgpPeerTxUpdCodeBadORIGINAttr,
       "rcStatBgpPeerTxUpdCodeASRoutingLoop": rcStatBgpPeerTxUpdCodeASRoutingLoop,
       "rcStatBgpPeerTxUpdCodeBadNHAttr": rcStatBgpPeerTxUpdCodeBadNHAttr,
       "rcStatBgpPeerTxUpdCodeOptionalAttrError": rcStatBgpPeerTxUpdCodeOptionalAttrError,
       "rcStatBgpPeerTxUpdCodeBadNetworkField": rcStatBgpPeerTxUpdCodeBadNetworkField,
       "rcStatBgpPeerTxUpdCodeMalformedASPath": rcStatBgpPeerTxUpdCodeMalformedASPath,
       "rcStatBgpPeerReset": rcStatBgpPeerReset,
       "rcStatBgpPeerAfTable": rcStatBgpPeerAfTable,
       "rcStatBgpPeerAfEntry": rcStatBgpPeerAfEntry,
       "rcStatBgpPeerAfAddrType": rcStatBgpPeerAfAddrType,
       "rcStatBgpPeerAfAddr": rcStatBgpPeerAfAddr,
       "rcStatBgpPeerAfStarts": rcStatBgpPeerAfStarts,
       "rcStatBgpPeerAfStops": rcStatBgpPeerAfStops,
       "rcStatBgpPeerAfOpens": rcStatBgpPeerAfOpens,
       "rcStatBgpPeerAfCloses": rcStatBgpPeerAfCloses,
       "rcStatBgpPeerAfFails": rcStatBgpPeerAfFails,
       "rcStatBgpPeerAfFatals": rcStatBgpPeerAfFatals,
       "rcStatBgpPeerAfConnExps": rcStatBgpPeerAfConnExps,
       "rcStatBgpPeerAfHoldExps": rcStatBgpPeerAfHoldExps,
       "rcStatBgpPeerAfKeepExps": rcStatBgpPeerAfKeepExps,
       "rcStatBgpPeerAfTxMsgs": rcStatBgpPeerAfTxMsgs,
       "rcStatBgpPeerAfTxOpens": rcStatBgpPeerAfTxOpens,
       "rcStatBgpPeerAfTxKeeps": rcStatBgpPeerAfTxKeeps,
       "rcStatBgpPeerAfTxUpdates": rcStatBgpPeerAfTxUpdates,
       "rcStatBgpPeerAfTxNotifys": rcStatBgpPeerAfTxNotifys,
       "rcStatBgpPeerAfRxMsgs": rcStatBgpPeerAfRxMsgs,
       "rcStatBgpPeerAfRxInCompPkts": rcStatBgpPeerAfRxInCompPkts,
       "rcStatBgpPeerAfRxOpens": rcStatBgpPeerAfRxOpens,
       "rcStatBgpPeerAfRxKeeps": rcStatBgpPeerAfRxKeeps,
       "rcStatBgpPeerAfRxUpdates": rcStatBgpPeerAfRxUpdates,
       "rcStatBgpPeerAfRxNotifys": rcStatBgpPeerAfRxNotifys,
       "rcStatBgpPeerAfBadEvents": rcStatBgpPeerAfBadEvents,
       "rcStatBgpPeerAfSyncFails": rcStatBgpPeerAfSyncFails,
       "rcStatBgpPeerAfRcvdTooShort": rcStatBgpPeerAfRcvdTooShort,
       "rcStatBgpPeerAfNoMarker": rcStatBgpPeerAfNoMarker,
       "rcStatBgpPeerAfDropped": rcStatBgpPeerAfDropped,
       "rcStatBgpPeerAfBadMsgTypes": rcStatBgpPeerAfBadMsgTypes,
       "rcStatBgpPeerAfTrEvent": rcStatBgpPeerAfTrEvent,
       "rcStatBgpPeerAfTxRoutes": rcStatBgpPeerAfTxRoutes,
       "rcStatBgpPeerAfRxRoutesAdded": rcStatBgpPeerAfRxRoutesAdded,
       "rcStatBgpPeerAfRxRoutesReplaced": rcStatBgpPeerAfRxRoutesReplaced,
       "rcStatBgpPeerAfRxNlri": rcStatBgpPeerAfRxNlri,
       "rcStatBgpPeerAfRxValidUpdates": rcStatBgpPeerAfRxValidUpdates,
       "rcStatBgpPeerAfRxECodeHeader": rcStatBgpPeerAfRxECodeHeader,
       "rcStatBgpPeerAfRxECodeOpen": rcStatBgpPeerAfRxECodeOpen,
       "rcStatBgpPeerAfRxECodeUpdate": rcStatBgpPeerAfRxECodeUpdate,
       "rcStatBgpPeerAfRxECodeHoldtimer": rcStatBgpPeerAfRxECodeHoldtimer,
       "rcStatBgpPeerAfRxECodeFSM": rcStatBgpPeerAfRxECodeFSM,
       "rcStatBgpPeerAfRxECodeCease": rcStatBgpPeerAfRxECodeCease,
       "rcStatBgpPeerAfRxHdrCodeNoSync": rcStatBgpPeerAfRxHdrCodeNoSync,
       "rcStatBgpPeerAfRxHdrCodeInvalidMsgLen": rcStatBgpPeerAfRxHdrCodeInvalidMsgLen,
       "rcStatBgpPeerAfRxHdrCodeInvalidMsgType": rcStatBgpPeerAfRxHdrCodeInvalidMsgType,
       "rcStatBgpPeerAfRxOpCodeBadVer": rcStatBgpPeerAfRxOpCodeBadVer,
       "rcStatBgpPeerAfRxOpCodeBadAs": rcStatBgpPeerAfRxOpCodeBadAs,
       "rcStatBgpPeerAfRxOpCodeBadRtID": rcStatBgpPeerAfRxOpCodeBadRtID,
       "rcStatBgpPeerAfRxOpCodeUnsuppOption": rcStatBgpPeerAfRxOpCodeUnsuppOption,
       "rcStatBgpPeerAfRxOpCodeAuthFail": rcStatBgpPeerAfRxOpCodeAuthFail,
       "rcStatBgpPeerAfRxOpCodeBadHold": rcStatBgpPeerAfRxOpCodeBadHold,
       "rcStatBgpPeerAfRxUpdCodeMalformedAttrList": rcStatBgpPeerAfRxUpdCodeMalformedAttrList,
       "rcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog": rcStatBgpPeerAfRxUpdCodeWelknownAttrUnrecog,
       "rcStatBgpPeerAfRxUpdCodeWelknownAttrMiss": rcStatBgpPeerAfRxUpdCodeWelknownAttrMiss,
       "rcStatBgpPeerAfRxUpdCodeAttrFlagError": rcStatBgpPeerAfRxUpdCodeAttrFlagError,
       "rcStatBgpPeerAfRxUpdCodeAttrLenError": rcStatBgpPeerAfRxUpdCodeAttrLenError,
       "rcStatBgpPeerAfRxUpdCodeBadORIGINAttr": rcStatBgpPeerAfRxUpdCodeBadORIGINAttr,
       "rcStatBgpPeerAfRxUpdCodeASRoutingLoop": rcStatBgpPeerAfRxUpdCodeASRoutingLoop,
       "rcStatBgpPeerAfRxUpdCodeBadNHAttr": rcStatBgpPeerAfRxUpdCodeBadNHAttr,
       "rcStatBgpPeerAfRxUpdCodeOptionalAttrError": rcStatBgpPeerAfRxUpdCodeOptionalAttrError,
       "rcStatBgpPeerAfRxUpdCodeBadNetworkField": rcStatBgpPeerAfRxUpdCodeBadNetworkField,
       "rcStatBgpPeerAfRxUpdCodeMalformedASPath": rcStatBgpPeerAfRxUpdCodeMalformedASPath,
       "rcStatBgpPeerAfTxECodeHeader": rcStatBgpPeerAfTxECodeHeader,
       "rcStatBgpPeerAfTxECodeOpen": rcStatBgpPeerAfTxECodeOpen,
       "rcStatBgpPeerAfTxECodeUpdate": rcStatBgpPeerAfTxECodeUpdate,
       "rcStatBgpPeerAfTxECodeHoldtimer": rcStatBgpPeerAfTxECodeHoldtimer,
       "rcStatBgpPeerAfTxECodeFSM": rcStatBgpPeerAfTxECodeFSM,
       "rcStatBgpPeerAfTxECodeCease": rcStatBgpPeerAfTxECodeCease,
       "rcStatBgpPeerAfTxHdrCodeNoSync": rcStatBgpPeerAfTxHdrCodeNoSync,
       "rcStatBgpPeerAfTxHdrCodeInvalidMsgLen": rcStatBgpPeerAfTxHdrCodeInvalidMsgLen,
       "rcStatBgpPeerAfTxHdrCodeInvalidMsgType": rcStatBgpPeerAfTxHdrCodeInvalidMsgType,
       "rcStatBgpPeerAfTxOpCodeBadVer": rcStatBgpPeerAfTxOpCodeBadVer,
       "rcStatBgpPeerAfTxOpCodeBadAs": rcStatBgpPeerAfTxOpCodeBadAs,
       "rcStatBgpPeerAfTxOpCodeBadRtID": rcStatBgpPeerAfTxOpCodeBadRtID,
       "rcStatBgpPeerAfTxOpCodeUnsuppOption": rcStatBgpPeerAfTxOpCodeUnsuppOption,
       "rcStatBgpPeerAfTxOpCodeAuthFail": rcStatBgpPeerAfTxOpCodeAuthFail,
       "rcStatBgpPeerAfTxOpCodeBadHold": rcStatBgpPeerAfTxOpCodeBadHold,
       "rcStatBgpPeerAfTxUpdCodeMalformedAttrList": rcStatBgpPeerAfTxUpdCodeMalformedAttrList,
       "rcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog": rcStatBgpPeerAfTxUpdCodeWelknownAttrUnrecog,
       "rcStatBgpPeerAfTxUpdCodeWelknownAttrMiss": rcStatBgpPeerAfTxUpdCodeWelknownAttrMiss,
       "rcStatBgpPeerAfTxUpdCodeAttrFlagError": rcStatBgpPeerAfTxUpdCodeAttrFlagError,
       "rcStatBgpPeerAfTxUpdCodeAttrLenError": rcStatBgpPeerAfTxUpdCodeAttrLenError,
       "rcStatBgpPeerAfTxUpdCodeBadORIGINAttr": rcStatBgpPeerAfTxUpdCodeBadORIGINAttr,
       "rcStatBgpPeerAfTxUpdCodeASRoutingLoop": rcStatBgpPeerAfTxUpdCodeASRoutingLoop,
       "rcStatBgpPeerAfTxUpdCodeBadNHAttr": rcStatBgpPeerAfTxUpdCodeBadNHAttr,
       "rcStatBgpPeerAfTxUpdCodeOptionalAttrError": rcStatBgpPeerAfTxUpdCodeOptionalAttrError,
       "rcStatBgpPeerAfTxUpdCodeBadNetworkField": rcStatBgpPeerAfTxUpdCodeBadNetworkField,
       "rcStatBgpPeerAfTxUpdCodeMalformedASPath": rcStatBgpPeerAfTxUpdCodeMalformedASPath,
       "rcStatBgpPeerAfReset": rcStatBgpPeerAfReset,
       "rcStg": rcStg,
       "rcStgMaxStgs": rcStgMaxStgs,
       "rcStgNumStgs": rcStgNumStgs,
       "rcStgUnassignedPorts": rcStgUnassignedPorts,
       "rcStgTable": rcStgTable,
       "rcStgEntry": rcStgEntry,
       "rcStgId": rcStgId,
       "rcStgTaggedBpduAddress": rcStgTaggedBpduAddress,
       "rcStgTaggedBpduVlanId": rcStgTaggedBpduVlanId,
       "rcStgBridgeAddress": rcStgBridgeAddress,
       "rcStgNumPorts": rcStgNumPorts,
       "rcStgProtocolSpecification": rcStgProtocolSpecification,
       "rcStgPriority": rcStgPriority,
       "rcStgTimeSinceTopologyChange": rcStgTimeSinceTopologyChange,
       "rcStgTopChanges": rcStgTopChanges,
       "rcStgDesignatedRoot": rcStgDesignatedRoot,
       "rcStgRootCost": rcStgRootCost,
       "rcStgRootPort": rcStgRootPort,
       "rcStgMaxAge": rcStgMaxAge,
       "rcStgHelloTime": rcStgHelloTime,
       "rcStgHoldTime": rcStgHoldTime,
       "rcStgForwardDelay": rcStgForwardDelay,
       "rcStgBridgeMaxAge": rcStgBridgeMaxAge,
       "rcStgBridgeHelloTime": rcStgBridgeHelloTime,
       "rcStgBridgeForwardDelay": rcStgBridgeForwardDelay,
       "rcStgEnableStp": rcStgEnableStp,
       "rcStgStpTrapEnable": rcStgStpTrapEnable,
       "rcStgPortMembers": rcStgPortMembers,
       "rcStgRowStatus": rcStgRowStatus,
       "rcStgPortStpState": rcStgPortStpState,
       "rcStgType": rcStgType,
       "rcStgNtStgEnable": rcStgNtStgEnable,
       "rcStgPortTable": rcStgPortTable,
       "rcStgPortEntry": rcStgPortEntry,
       "rcStgPort": rcStgPort,
       "rcStgPortStgId": rcStgPortStgId,
       "rcStgPortPriority": rcStgPortPriority,
       "rcStgPortState": rcStgPortState,
       "rcStgPortEnableStp": rcStgPortEnableStp,
       "rcStgPortFastStart": rcStgPortFastStart,
       "rcStgPortPathCost": rcStgPortPathCost,
       "rcStgPortDesignatedRoot": rcStgPortDesignatedRoot,
       "rcStgPortDesignatedCost": rcStgPortDesignatedCost,
       "rcStgPortDesignatedBridge": rcStgPortDesignatedBridge,
       "rcStgPortDesignatedPort": rcStgPortDesignatedPort,
       "rcStgPortForwardTransitions": rcStgPortForwardTransitions,
       "rcStgPortInConfigBpdus": rcStgPortInConfigBpdus,
       "rcStgPortInTcnBpdus": rcStgPortInTcnBpdus,
       "rcStgPortInBadBpdus": rcStgPortInBadBpdus,
       "rcStgPortOutConfigBpdus": rcStgPortOutConfigBpdus,
       "rcStgPortOutTcnBpdus": rcStgPortOutTcnBpdus,
       "rcStgPortRowStatus": rcStgPortRowStatus,
       "rcStgPortChangeDetection": rcStgPortChangeDetection,
       "rcStgPortPathCost32": rcStgPortPathCost32,
       "rcStgNotAllowedPorts": rcStgNotAllowedPorts,
       "rcBridge": rcBridge,
       "rcBridgeFdbTable": rcBridgeFdbTable,
       "rcBridgeFdbEntry": rcBridgeFdbEntry,
       "rcBridgeFdbStatus": rcBridgeFdbStatus,
       "rcBridgeFdbAddress": rcBridgeFdbAddress,
       "rcBridgeFdbPort": rcBridgeFdbPort,
       "rcBridgeFdbMonitor": rcBridgeFdbMonitor,
       "rcBridgeFdbPriority": rcBridgeFdbPriority,
       "rcBridgeFdbQosLevel": rcBridgeFdbQosLevel,
       "rcBridgeFdbSmltRemote": rcBridgeFdbSmltRemote,
       "rcBridgeFdbVlanId": rcBridgeFdbVlanId,
       "rcBridgeFdbTblSize": rcBridgeFdbTblSize,
       "rcBridgeStaticTable": rcBridgeStaticTable,
       "rcBridgeStaticEntry": rcBridgeStaticEntry,
       "rcBridgeStaticAddress": rcBridgeStaticAddress,
       "rcBridgeStaticPort": rcBridgeStaticPort,
       "rcBridgeStaticMonitor": rcBridgeStaticMonitor,
       "rcBridgeStaticPriority": rcBridgeStaticPriority,
       "rcBridgeStaticStatus": rcBridgeStaticStatus,
       "rcBridgeStaticQosLevel": rcBridgeStaticQosLevel,
       "rcBridgeStaticVlanId": rcBridgeStaticVlanId,
       "rcBridgeStaticTblSize": rcBridgeStaticTblSize,
       "rcBridgeFilterTable": rcBridgeFilterTable,
       "rcBridgeFilterEntry": rcBridgeFilterEntry,
       "rcBridgeFilterAddress": rcBridgeFilterAddress,
       "rcBridgeFilterPort": rcBridgeFilterPort,
       "rcBridgeFilterNotAllowedFrom": rcBridgeFilterNotAllowedFrom,
       "rcBridgeFilterStatus": rcBridgeFilterStatus,
       "rcBridgeFilterVlanId": rcBridgeFilterVlanId,
       "rcBridgeFilterPcap": rcBridgeFilterPcap,
       "rcBridgeFilterDestDiscard": rcBridgeFilterDestDiscard,
       "rcBridgeFilterSrcDiscard": rcBridgeFilterSrcDiscard,
       "rcBridgeFilterTblSize": rcBridgeFilterTblSize,
       "rcBridgeUnknownMacDiscardTable": rcBridgeUnknownMacDiscardTable,
       "rcBridgeUnknownMacDiscardEntry": rcBridgeUnknownMacDiscardEntry,
       "rcBridgeUnknownMacDiscardIfIndex": rcBridgeUnknownMacDiscardIfIndex,
       "rcBridgeUnknownMacDiscardAutoLearnEnable": rcBridgeUnknownMacDiscardAutoLearnEnable,
       "rcBridgeUnknownMacDiscardAutoLearnMode": rcBridgeUnknownMacDiscardAutoLearnMode,
       "rcBridgeUnknownMacDiscardAutoLearnTableMode": rcBridgeUnknownMacDiscardAutoLearnTableMode,
       "rcBridgeUnknownMacDiscardLogViolations": rcBridgeUnknownMacDiscardLogViolations,
       "rcBridgeUnknownMacDiscardSendTrap": rcBridgeUnknownMacDiscardSendTrap,
       "rcBridgeUnknownMacDiscardDisablePort": rcBridgeUnknownMacDiscardDisablePort,
       "rcBridgeUnknownMacDiscardDefaultAutoLearnMonitor": rcBridgeUnknownMacDiscardDefaultAutoLearnMonitor,
       "rcBridgeUnknownMacDiscardDefaultAutoLearnPriority": rcBridgeUnknownMacDiscardDefaultAutoLearnPriority,
       "rcBridgeUnknownMacDiscardMacCountMax": rcBridgeUnknownMacDiscardMacCountMax,
       "rcBridgeUnknownMacDiscardMacCountCur": rcBridgeUnknownMacDiscardMacCountCur,
       "rcBridgeManualEditTable": rcBridgeManualEditTable,
       "rcBridgeManualEditEntry": rcBridgeManualEditEntry,
       "rcBridgeManualEditAddress": rcBridgeManualEditAddress,
       "rcBridgeManualEditPorts": rcBridgeManualEditPorts,
       "rcBridgeManualEditMonitor": rcBridgeManualEditMonitor,
       "rcBridgeManualEditPriority": rcBridgeManualEditPriority,
       "rcBridgeManualEditStatus": rcBridgeManualEditStatus,
       "rcBridgeManualEditTblSize": rcBridgeManualEditTblSize,
       "rcBridgeAutoLearnTable": rcBridgeAutoLearnTable,
       "rcBridgeAutoLearnEntry": rcBridgeAutoLearnEntry,
       "rcBridgeAutoLearnAddress": rcBridgeAutoLearnAddress,
       "rcBridgeAutoLearnPort": rcBridgeAutoLearnPort,
       "rcBridgeAutoLearnMonitor": rcBridgeAutoLearnMonitor,
       "rcBridgeAutoLearnPriority": rcBridgeAutoLearnPriority,
       "rcBridgeAutoLearnAction": rcBridgeAutoLearnAction,
       "rcBridgeAutoLearnTblSize": rcBridgeAutoLearnTblSize,
       "rcBridgeStaticMulticastTable": rcBridgeStaticMulticastTable,
       "rcBridgeStaticMulticastEntry": rcBridgeStaticMulticastEntry,
       "rcBridgeStaticMulticastAddress": rcBridgeStaticMulticastAddress,
       "rcBridgeStaticMulticastForwardingPorts": rcBridgeStaticMulticastForwardingPorts,
       "rcBridgeStaticMulticastMltIds": rcBridgeStaticMulticastMltIds,
       "rcBridgeStaticMulticastRowStatus": rcBridgeStaticMulticastRowStatus,
       "rcBridgeStaticMulticastVlanId": rcBridgeStaticMulticastVlanId,
       "rcBridgeStaticMulticastNumMltIds": rcBridgeStaticMulticastNumMltIds,
       "rcBridgeStaticMulticastTblSize": rcBridgeStaticMulticastTblSize,
       "rcRateLimitTable": rcRateLimitTable,
       "rcRateLimitEntry": rcRateLimitEntry,
       "rcRateLimitIfIndex": rcRateLimitIfIndex,
       "rcRateLimitIfTrafficType": rcRateLimitIfTrafficType,
       "rcRateLimitIfAllowedRate": rcRateLimitIfAllowedRate,
       "rcRateLimitIfEnable": rcRateLimitIfEnable,
       "rcRateLimitIfAllowedRatePps": rcRateLimitIfAllowedRatePps,
       "rcRateLimitIfAllowedRateKbps": rcRateLimitIfAllowedRateKbps,
       "rcBridgeStaticMcastTable": rcBridgeStaticMcastTable,
       "rcBridgeStaticMcastEntry": rcBridgeStaticMcastEntry,
       "rcBridgeStaticMcastVlanId": rcBridgeStaticMcastVlanId,
       "rcBridgeStaticMcastAddress": rcBridgeStaticMcastAddress,
       "rcBridgeStaticMcastForwardingPorts": rcBridgeStaticMcastForwardingPorts,
       "rcBridgeStaticMcastMltIds": rcBridgeStaticMcastMltIds,
       "rcBridgeStaticMcastNumMltIds": rcBridgeStaticMcastNumMltIds,
       "rcBridgeStaticMcastRowStatus": rcBridgeStaticMcastRowStatus,
       "rcBridgeFdbProtectTable": rcBridgeFdbProtectTable,
       "rcBridgeFdbProtectEntry": rcBridgeFdbProtectEntry,
       "rcBridgeFdbProtectPortNum": rcBridgeFdbProtectPortNum,
       "rcBridgeFdbProtectMaxMacCount": rcBridgeFdbProtectMaxMacCount,
       "rcBridgeFdbProtectMinMacCount": rcBridgeFdbProtectMinMacCount,
       "rcBridgeFdbProtectEnable": rcBridgeFdbProtectEnable,
       "rcBridgeFdbProtectCurrentMacCount": rcBridgeFdbProtectCurrentMacCount,
       "rcBridgeFdbProtectMacLearning": rcBridgeFdbProtectMacLearning,
       "rcBridgeFdbProtectViolationLogTrap": rcBridgeFdbProtectViolationLogTrap,
       "rcBridgeFdbProtectViolationDownPort": rcBridgeFdbProtectViolationDownPort,
       "rcBridgeNewFdbTable": rcBridgeNewFdbTable,
       "rcBridgeNewFdbEntry": rcBridgeNewFdbEntry,
       "rcBridgeNewFdbStatus": rcBridgeNewFdbStatus,
       "rcBridgeNewFdbAddress": rcBridgeNewFdbAddress,
       "rcBridgeNewFdbPort": rcBridgeNewFdbPort,
       "rcBridgeNewFdbMonitor": rcBridgeNewFdbMonitor,
       "rcBridgeNewFdbQosLevel": rcBridgeNewFdbQosLevel,
       "rcBridgeNewFdbSmltRemote": rcBridgeNewFdbSmltRemote,
       "rcBridgeNewFdbVlanId": rcBridgeNewFdbVlanId,
       "rcBridgeRemoteMacTable": rcBridgeRemoteMacTable,
       "rcBridgeRemoteMacEntry": rcBridgeRemoteMacEntry,
       "rcBridgeRemoteMacVlanId": rcBridgeRemoteMacVlanId,
       "rcBridgeRemoteMacAddr": rcBridgeRemoteMacAddr,
       "rcBridgeRemoteMacStatus": rcBridgeRemoteMacStatus,
       "rcBridgeRemoteMacDestAddr": rcBridgeRemoteMacDestAddr,
       "rcBridgeRemoteMacPrimaryBVlanId": rcBridgeRemoteMacPrimaryBVlanId,
       "rcBridgeRemoteMacPrimaryDestSysName": rcBridgeRemoteMacPrimaryDestSysName,
       "rcBridgeRemoteMacPrimaryPort": rcBridgeRemoteMacPrimaryPort,
       "rcBridgeRemoteMacSecondaryBVlanId": rcBridgeRemoteMacSecondaryBVlanId,
       "rcBridgeRemoteMacSecondaryDestSysName": rcBridgeRemoteMacSecondaryDestSysName,
       "rcBridgeRemoteMacSecondaryPort": rcBridgeRemoteMacSecondaryPort,
       "rcBridgeRemoteMacSmltRemote": rcBridgeRemoteMacSmltRemote,
       "rcBoot": rcBoot,
       "rcBootFlashSwVersion": rcBootFlashSwVersion,
       "rcBootPcmciaSwVersion": rcBootPcmciaSwVersion,
       "rcBootLastBootSource": rcBootLastBootSource,
       "rcBootPrimary": rcBootPrimary,
       "rcBootSecondary": rcBootSecondary,
       "rcBootTertiary": rcBootTertiary,
       "rcDevice": rcDevice,
       "rcDeviceLastBootSource": rcDeviceLastBootSource,
       "rcDevicePrimarySource": rcDevicePrimarySource,
       "rcDevicePrimarySourceFileName": rcDevicePrimarySourceFileName,
       "rcDeviceSecondarySource": rcDeviceSecondarySource,
       "rcDeviceSecondarySourceFileName": rcDeviceSecondarySourceFileName,
       "rcDeviceTertiarySource": rcDeviceTertiarySource,
       "rcDeviceTertiarySourceFileName": rcDeviceTertiarySourceFileName,
       "rcDeviceConfigSource": rcDeviceConfigSource,
       "rcDeviceConfigSourceFileName": rcDeviceConfigSourceFileName,
       "rcDeviceFlashBytesUsed": rcDeviceFlashBytesUsed,
       "rcDeviceFlashBytesFree": rcDeviceFlashBytesFree,
       "rcDevicePcmciaBytesUsed": rcDevicePcmciaBytesUsed,
       "rcDevicePcmciaBytesFree": rcDevicePcmciaBytesFree,
       "rcDeviceAction": rcDeviceAction,
       "rcDeviceResult": rcDeviceResult,
       "rcDeviceFlashNumFiles": rcDeviceFlashNumFiles,
       "rcDevicePcmciaNumFiles": rcDevicePcmciaNumFiles,
       "rcDeviceFlashTable": rcDeviceFlashTable,
       "rcDeviceFlashEntry": rcDeviceFlashEntry,
       "rcDeviceFlashFileNum": rcDeviceFlashFileNum,
       "rcDeviceFlashFileName": rcDeviceFlashFileName,
       "rcDeviceFlashFileVersion": rcDeviceFlashFileVersion,
       "rcDeviceFlashFileType": rcDeviceFlashFileType,
       "rcDeviceFlashFileMode": rcDeviceFlashFileMode,
       "rcDeviceFlashFileSize": rcDeviceFlashFileSize,
       "rcDeviceFlashFileCrc": rcDeviceFlashFileCrc,
       "rcDeviceFlashFileStatus": rcDeviceFlashFileStatus,
       "rcDeviceFlashRowStatus": rcDeviceFlashRowStatus,
       "rcDevicePcmciaTable": rcDevicePcmciaTable,
       "rcDevicePcmciaEntry": rcDevicePcmciaEntry,
       "rcDevicePcmciaFileNum": rcDevicePcmciaFileNum,
       "rcDevicePcmciaFileName": rcDevicePcmciaFileName,
       "rcDevicePcmciaFileVersion": rcDevicePcmciaFileVersion,
       "rcDevicePcmciaFileType": rcDevicePcmciaFileType,
       "rcDevicePcmciaFileMode": rcDevicePcmciaFileMode,
       "rcDevicePcmciaFileSize": rcDevicePcmciaFileSize,
       "rcDevicePcmciaFileCrc": rcDevicePcmciaFileCrc,
       "rcDevicePcmciaFileStatus": rcDevicePcmciaFileStatus,
       "rcDevicePcmciaRowStatus": rcDevicePcmciaRowStatus,
       "rcMlt": rcMlt,
       "rcMltNumMlts": rcMltNumMlts,
       "rcMltPotentialMembers": rcMltPotentialMembers,
       "rcMltIstSessionEnable": rcMltIstSessionEnable,
       "rcMltIstSessionStatus": rcMltIstSessionStatus,
       "rcMltIstPeerIp": rcMltIstPeerIp,
       "rcMltIstVlanId": rcMltIstVlanId,
       "rcMltTable": rcMltTable,
       "rcMltEntry": rcMltEntry,
       "rcMltId": rcMltId,
       "rcMltName": rcMltName,
       "rcMltPortMembers": rcMltPortMembers,
       "rcMltPortType": rcMltPortType,
       "rcMltNumVlanIds": rcMltNumVlanIds,
       "rcMltVlanIds": rcMltVlanIds,
       "rcMltRowStatus": rcMltRowStatus,
       "rcMltEnable": rcMltEnable,
       "rcMltLoadBalance": rcMltLoadBalance,
       "rcMltDistributionAlgorithm": rcMltDistributionAlgorithm,
       "rcMltIfIndex": rcMltIfIndex,
       "rcMltMltType": rcMltMltType,
       "rcMltSmltId": rcMltSmltId,
       "rcMltRunningType": rcMltRunningType,
       "rcMltSvlanPortType": rcMltSvlanPortType,
       "rcMltMulticastDistribution": rcMltMulticastDistribution,
       "rcMltAggregatable": rcMltAggregatable,
       "rcMltClearLinkAggregate": rcMltClearLinkAggregate,
       "rcMltNtStgEnable": rcMltNtStgEnable,
       "rcMltDesignatedPort": rcMltDesignatedPort,
       "rcMltAggOperState": rcMltAggOperState,
       "rcMltAggTimeOfLastOperChange": rcMltAggTimeOfLastOperChange,
       "rcMltAggMinLink": rcMltAggMinLink,
       "rcMltVlanIdList": rcMltVlanIdList,
       "rcMltMcastDistribution": rcMltMcastDistribution,
       "rcMltMcastDistributionEnable": rcMltMcastDistributionEnable,
       "rcMltMcastDistributionGrpMask": rcMltMcastDistributionGrpMask,
       "rcMltMcastDistributionSrcMask": rcMltMcastDistributionSrcMask,
       "rcMltMcastDistributionRedistributionEnable": rcMltMcastDistributionRedistributionEnable,
       "rcSltPortTable": rcSltPortTable,
       "rcSltPortEntry": rcSltPortEntry,
       "rcSltPortIfIndex": rcSltPortIfIndex,
       "rcSltPortSmltId": rcSltPortSmltId,
       "rcSltPortOperType": rcSltPortOperType,
       "rcSltPortRowStatus": rcSltPortRowStatus,
       "rcMltNotificationObjects": rcMltNotificationObjects,
       "rcMltAggTrapEvent": rcMltAggTrapEvent,
       "rcMltIstStpEnable": rcMltIstStpEnable,
       "rcWeb": rcWeb,
       "rcWebEnableServer": rcWebEnableServer,
       "rcWebRWAUserName": rcWebRWAUserName,
       "rcWebRWAPassword": rcWebRWAPassword,
       "rcWebRWUserName": rcWebRWUserName,
       "rcWebRWPassword": rcWebRWPassword,
       "rcWebROUserName": rcWebROUserName,
       "rcWebROPassword": rcWebROPassword,
       "rcWebLastChange": rcWebLastChange,
       "rcWebNumHits": rcWebNumHits,
       "rcWebNumAccessChecks": rcWebNumAccessChecks,
       "rcWebNumAccessBlocks": rcWebNumAccessBlocks,
       "rcWebNumRxErrors": rcWebNumRxErrors,
       "rcWebNumTxErrors": rcWebNumTxErrors,
       "rcWebNumSetRequest": rcWebNumSetRequest,
       "rcWebPrimaryHtmlSourceDir": rcWebPrimaryHtmlSourceDir,
       "rcWebSecondaryHtmlSourceDir": rcWebSecondaryHtmlSourceDir,
       "rcWebTertiaryHtmlSourceDir": rcWebTertiaryHtmlSourceDir,
       "rcWebRWL3UserName": rcWebRWL3UserName,
       "rcWebRWL3Password": rcWebRWL3Password,
       "rcWebRWL2UserName": rcWebRWL2UserName,
       "rcWebRWL2Password": rcWebRWL2Password,
       "rcWebDefaultDisplayRows": rcWebDefaultDisplayRows,
       "rcWebLastHostAccessBlocked": rcWebLastHostAccessBlocked,
       "rcWebHelpTftpSourceDir": rcWebHelpTftpSourceDir,
       "rcWebHttpPort": rcWebHttpPort,
       "rcWebSecureOnly": rcWebSecureOnly,
       "rcWebHttpsPort": rcWebHttpsPort,
       "rcCli": rcCli,
       "rcCliRWAUserName": rcCliRWAUserName,
       "rcCliRWAPassword": rcCliRWAPassword,
       "rcCliRWUserName": rcCliRWUserName,
       "rcCliRWPassword": rcCliRWPassword,
       "rcCliRWL3UserName": rcCliRWL3UserName,
       "rcCliRWL3Password": rcCliRWL3Password,
       "rcCliRWL2UserName": rcCliRWL2UserName,
       "rcCliRWL2Password": rcCliRWL2Password,
       "rcCliROUserName": rcCliROUserName,
       "rcCliROPassword": rcCliROPassword,
       "rcCliMaxTelnetSessions": rcCliMaxTelnetSessions,
       "rcCliMaxRloginSessions": rcCliMaxRloginSessions,
       "rcCliTimeout": rcCliTimeout,
       "rcCliNumAccessViolations": rcCliNumAccessViolations,
       "rcCliRWL1UserName": rcCliRWL1UserName,
       "rcCliRWL1Password": rcCliRWL1Password,
       "rcCliPasswordChange": rcCliPasswordChange,
       "rcCliPassChangeResult": rcCliPassChangeResult,
       "rcCliRWEnable": rcCliRWEnable,
       "rcCliRWL1Enable": rcCliRWL1Enable,
       "rcCliRWL2Enable": rcCliRWL2Enable,
       "rcCliRWL3Enable": rcCliRWL3Enable,
       "rcCliROEnable": rcCliROEnable,
       "rcError": rcError,
       "rcErrorLevel": rcErrorLevel,
       "rcErrorCode": rcErrorCode,
       "rcErrorText": rcErrorText,
       "rcErrorReturnCode": rcErrorReturnCode,
       "rcErrorSendTrap": rcErrorSendTrap,
       "rcTraps": rcTraps,
       "rcTrapsMib": rcTrapsMib,
       "rcnCardDown": rcnCardDown,
       "rcnCardUp": rcnCardUp,
       "rcnErrorNotification": rcnErrorNotification,
       "rcnStpNewRoot": rcnStpNewRoot,
       "rcnStpTopologyChange": rcnStpTopologyChange,
       "rcnChasPowerSupplyDown": rcnChasPowerSupplyDown,
       "rcnChasFanDown": rcnChasFanDown,
       "rcnLinkOscillation": rcnLinkOscillation,
       "rcnMacViolation": rcnMacViolation,
       "rcnSonetTrap": rcnSonetTrap,
       "rcn2kCardDown": rcn2kCardDown,
       "rcn2kCardUp": rcn2kCardUp,
       "rcn2kTemperature": rcn2kTemperature,
       "rcnChasPowerSupplyUp": rcnChasPowerSupplyUp,
       "rcn2kAtmPvcLinkStateChange": rcn2kAtmPvcLinkStateChange,
       "rcnStpTCN": rcnStpTCN,
       "rcnSmltIstLinkUp": rcnSmltIstLinkUp,
       "rcnSmltIstLinkDown": rcnSmltIstLinkDown,
       "rcnSmltLinkUp": rcnSmltLinkUp,
       "rcnSmltLinkDown": rcnSmltLinkDown,
       "rcnChasFanUp": rcnChasFanUp,
       "rcnPasswordChange": rcnPasswordChange,
       "rcnEmError": rcnEmError,
       "rcnPcmciaCardRemoved": rcnPcmciaCardRemoved,
       "rcnSmartCpldTimerFired": rcnSmartCpldTimerFired,
       "rcnCardCpldNotUpDate": rcnCardCpldNotUpDate,
       "rcnIgapLogFileFull": rcnIgapLogFileFull,
       "rcnCpLimitShutDown": rcnCpLimitShutDown,
       "rcnSshServerEnabled": rcnSshServerEnabled,
       "rcnSshServerDisabled": rcnSshServerDisabled,
       "rcnSshSessionLogin": rcnSshSessionLogin,
       "rcnSshSessionLogout": rcnSshSessionLogout,
       "rcnSshUnauthorizedAccess": rcnSshUnauthorizedAccess,
       "rcnHaCpuState": rcnHaCpuState,
       "rcnInsufficientMemory": rcnInsufficientMemory,
       "rcnSaveConfigAction": rcnSaveConfigAction,
       "rcnLoopDetectOnPort": rcnLoopDetectOnPort,
       "rcnbgpEstablished": rcnbgpEstablished,
       "rcnbgpBackwardTransition": rcnbgpBackwardTransition,
       "rcnAggLinkUp": rcnAggLinkUp,
       "rcnAggLinkDown": rcnAggLinkDown,
       "rcnIgmpNewGroupMember": rcnIgmpNewGroupMember,
       "rcnIgmpLossGroupMember": rcnIgmpLossGroupMember,
       "rcnIgmpNewQuerier": rcnIgmpNewQuerier,
       "rcnIgmpQuerierChange": rcnIgmpQuerierChange,
       "rcnDvmrpIfStateChange": rcnDvmrpIfStateChange,
       "rcnDvmrpNewNbrChange": rcnDvmrpNewNbrChange,
       "rcnDvmrpNbrLossChange": rcnDvmrpNbrLossChange,
       "rcnFdbProtectViolation": rcnFdbProtectViolation,
       "rcnLogMsgControl": rcnLogMsgControl,
       "rcnSaveConfigFile": rcnSaveConfigFile,
       "rcnDNSRequestResponse": rcnDNSRequestResponse,
       "rcnDuplicateIpAddress": rcnDuplicateIpAddress,
       "rcnLoopDetectPortDown": rcnLoopDetectPortDown,
       "rcnLoopDetectMacDiscard": rcnLoopDetectMacDiscard,
       "rcnAutoRecoverPort": rcnAutoRecoverPort,
       "rcnAutoRecoverLoopDetectedPort": rcnAutoRecoverLoopDetectedPort,
       "rcnExtCpLimitShutDown": rcnExtCpLimitShutDown,
       "rcnExtCpLimitSopCongestion": rcnExtCpLimitSopCongestion,
       "rcnTacacsAuthFailure": rcnTacacsAuthFailure,
       "rcnTacacsNoServers": rcnTacacsNoServers,
       "rcnTacacsRxUnsupportedFrame": rcnTacacsRxUnsupportedFrame,
       "rcnTacacsExceededMaxLogins": rcnTacacsExceededMaxLogins,
       "rcnTacacsClientFailure": rcnTacacsClientFailure,
       "rcnBpduReceived": rcnBpduReceived,
       "rcnVlacpPortDown": rcnVlacpPortDown,
       "rcnVlacpPortUp": rcnVlacpPortUp,
       "rcnExtCpLimitShutDownNormal": rcnExtCpLimitShutDownNormal,
       "rcnEapMacIntrusion": rcnEapMacIntrusion,
       "rcnInterCpuCommStatus": rcnInterCpuCommStatus,
       "rcPlugOptModTemperatureStatusTrap": rcPlugOptModTemperatureStatusTrap,
       "rcPlugOptModVoltageStatusTrap": rcPlugOptModVoltageStatusTrap,
       "rcPlugOptModBiasStatusTrap": rcPlugOptModBiasStatusTrap,
       "rcPlugOptModTxPowerStatusTrap": rcPlugOptModTxPowerStatusTrap,
       "rcPlugOptModRxPowerStatusTrap": rcPlugOptModRxPowerStatusTrap,
       "rcPlugOptModAux1StatusTrap": rcPlugOptModAux1StatusTrap,
       "rcPlugOptModAux2StatusTrap": rcPlugOptModAux2StatusTrap,
       "rcnMaxRouteWarnClear": rcnMaxRouteWarnClear,
       "rcnMaxRouteWarnSet": rcnMaxRouteWarnSet,
       "rcnMaxRouteDropClear": rcnMaxRouteDropClear,
       "rcnMaxRouteDropSet": rcnMaxRouteDropSet,
       "rcnMstpNewCistRoot": rcnMstpNewCistRoot,
       "rcnMstpNewMstiRoot": rcnMstpNewMstiRoot,
       "rcnMstpNewCistRegionalRoot": rcnMstpNewCistRegionalRoot,
       "rcnRstpNewRoot": rcnRstpNewRoot,
       "rcnRsmltEdgePeerModified": rcnRsmltEdgePeerModified,
       "rcnTmuxParityError": rcnTmuxParityError,
       "rcnChasPowerSupplyNoRedundancy": rcnChasPowerSupplyNoRedundancy,
       "rcnChasPowerSupplyRedundancy": rcnChasPowerSupplyRedundancy,
       "rcnLicenseTrialPeriodExpired": rcnLicenseTrialPeriodExpired,
       "rcnLicenseTrialPeriodExpiry": rcnLicenseTrialPeriodExpiry,
       "rcnVrfUp": rcnVrfUp,
       "rcnVrfDown": rcnVrfDown,
       "rcnMrouteIngressThresholdExceeded": rcnMrouteIngressThresholdExceeded,
       "rcnMrouteEgressThresholdExceeded": rcnMrouteEgressThresholdExceeded,
       "rcnRemoteMirroringStatus": rcnRemoteMirroringStatus,
       "rcnMaxMrouteWarnSet": rcnMaxMrouteWarnSet,
       "rcnMaxMrouteDropSet": rcnMaxMrouteDropSet,
       "rcnMaxMrouteWarnClear": rcnMaxMrouteWarnClear,
       "rcnMaxMrouteDropClear": rcnMaxMrouteDropClear,
       "rcnAggLinkStateChange": rcnAggLinkStateChange,
       "rcnBfdSessExceedThreshold": rcnBfdSessExceedThreshold,
       "rcnBfdStatusChange": rcnBfdStatusChange,
       "rcnChasPowerSupplyRunningLow": rcnChasPowerSupplyRunningLow,
       "rcnIsisPlsbMetricMismatchTrap": rcnIsisPlsbMetricMismatchTrap,
       "rcnIsisPlsbDuplicateSysidTrap": rcnIsisPlsbDuplicateSysidTrap,
       "rcnIsisPlsbLsdbUpdateTrap": rcnIsisPlsbLsdbUpdateTrap,
       "rcnChasFanCoolingLow": rcnChasFanCoolingLow,
       "rcnSmpFtpFail": rcnSmpFtpFail,
       "rcnSmpLogFileDeleted": rcnSmpLogFileDeleted,
       "rcnPimMaxInterfaceWarnSet": rcnPimMaxInterfaceWarnSet,
       "rcnPimMaxNeighborsWarnSet": rcnPimMaxNeighborsWarnSet,
       "rcnPimMaxPassiveInterfaceWarnSet": rcnPimMaxPassiveInterfaceWarnSet,
       "rcnLegacyCardDetected": rcnLegacyCardDetected,
       "rcnPrFilterRspMemoryFull": rcnPrFilterRspMemoryFull,
       "rcnPrFilterStatsCntExst": rcnPrFilterStatsCntExst,
       "rcnIsisPlsbBvidMismatchTrap": rcnIsisPlsbBvidMismatchTrap,
       "rcnIsisPlsbSmltVirtBmacMismatchTrap": rcnIsisPlsbSmltVirtBmacMismatchTrap,
       "rcnIsisPlsbSmltPeerBmacMismatchTrap": rcnIsisPlsbSmltPeerBmacMismatchTrap,
       "rcnIsisPlsbAdjStateTrap": rcnIsisPlsbAdjStateTrap,
       "rcnIsisPlsbDuplicateNnameTrap": rcnIsisPlsbDuplicateNnameTrap,
       "rcnIsisPlsbSmltSplitBebMismatchTrap": rcnIsisPlsbSmltSplitBebMismatchTrap,
       "rcnIsisPlsbMultiLinkAdjTrap": rcnIsisPlsbMultiLinkAdjTrap,
       "rcnVLacpFlapDetectShutDown": rcnVLacpFlapDetectShutDown,
       "rcCardDown": rcCardDown,
       "rcCardUp": rcCardUp,
       "rcErrorNotification": rcErrorNotification,
       "rcStpNewRoot": rcStpNewRoot,
       "rcStpTopologyChange": rcStpTopologyChange,
       "rcChasPowerSupplyDown": rcChasPowerSupplyDown,
       "rcChasFanDown": rcChasFanDown,
       "rcLinkOscillation": rcLinkOscillation,
       "rcMacViolation": rcMacViolation,
       "rcSonetTrap": rcSonetTrap,
       "rc2kCardDown": rc2kCardDown,
       "rc2kCardUp": rc2kCardUp,
       "rc2kTemperature": rc2kTemperature,
       "rcChasPowerSupplyUp": rcChasPowerSupplyUp,
       "rc2kAtmPvcLinkStateChange": rc2kAtmPvcLinkStateChange,
       "rcStpTCN": rcStpTCN,
       "rcSmltIstLinkUp": rcSmltIstLinkUp,
       "rcSmltIstLinkDown": rcSmltIstLinkDown,
       "rcSmltLinkUp": rcSmltLinkUp,
       "rcSmltLinkDown": rcSmltLinkDown,
       "rcChasFanUp": rcChasFanUp,
       "rcPasswordChange": rcPasswordChange,
       "rcEmError": rcEmError,
       "rcPcmciaCardRemoved": rcPcmciaCardRemoved,
       "rcSmartCpldTimerFired": rcSmartCpldTimerFired,
       "rcCardCpldNotUpDate": rcCardCpldNotUpDate,
       "rcIgapLogFileFull": rcIgapLogFileFull,
       "rcCpLimitShutDown": rcCpLimitShutDown,
       "rcSshServerEnabled": rcSshServerEnabled,
       "rcSshServerDisabled": rcSshServerDisabled,
       "rcSshSessionLogin": rcSshSessionLogin,
       "rcSshSessionLogout": rcSshSessionLogout,
       "rcSshUnauthorizedAccess": rcSshUnauthorizedAccess,
       "rcHaCpuState": rcHaCpuState,
       "rcInsufficientMemory": rcInsufficientMemory,
       "rcSaveConfigAction": rcSaveConfigAction,
       "rcLoopDetectOnPort": rcLoopDetectOnPort,
       "rcbgpEstablished": rcbgpEstablished,
       "rcbgpBackwardTransition": rcbgpBackwardTransition,
       "rcAggLinkUp": rcAggLinkUp,
       "rcAggLinkDown": rcAggLinkDown,
       "rcIgmpNewGroupMember": rcIgmpNewGroupMember,
       "rcIgmpLossGroupMember": rcIgmpLossGroupMember,
       "rcIgmpNewQuerier": rcIgmpNewQuerier,
       "rcIgmpQuerierChange": rcIgmpQuerierChange,
       "rcDvmrpIfStateChange": rcDvmrpIfStateChange,
       "rcDvmrpNewNbrChange": rcDvmrpNewNbrChange,
       "rcDvmrpNbrLossChange": rcDvmrpNbrLossChange,
       "rcSyslog": rcSyslog,
       "rcSyslogGlobal": rcSyslogGlobal,
       "rcSyslogGlobalEnable": rcSyslogGlobalEnable,
       "rcSyslogGlobalMaxHosts": rcSyslogGlobalMaxHosts,
       "rcSyslogGlobalOperState": rcSyslogGlobalOperState,
       "rcSyslogGlobalHeader": rcSyslogGlobalHeader,
       "rcSyslogHostTbl": rcSyslogHostTbl,
       "rcSyslogHostEntry": rcSyslogHostEntry,
       "rcSyslogHostId": rcSyslogHostId,
       "rcSyslogHostIpAddr": rcSyslogHostIpAddr,
       "rcSyslogHostUdpPort": rcSyslogHostUdpPort,
       "rcSyslogHostFacility": rcSyslogHostFacility,
       "rcSyslogHostModuleId": rcSyslogHostModuleId,
       "rcSyslogHostModuleId2": rcSyslogHostModuleId2,
       "rcSyslogHostSeverity": rcSyslogHostSeverity,
       "rcSyslogHostMapInfoSeverity": rcSyslogHostMapInfoSeverity,
       "rcSyslogHostMapWarningSeverity": rcSyslogHostMapWarningSeverity,
       "rcSyslogHostMapErrorSeverity": rcSyslogHostMapErrorSeverity,
       "rcSyslogHostMapMfgSeverity": rcSyslogHostMapMfgSeverity,
       "rcSyslogHostMapFatalSeverity": rcSyslogHostMapFatalSeverity,
       "rcSyslogHostMapTraceMsg": rcSyslogHostMapTraceMsg,
       "rcSyslogHostMapTrapMsg": rcSyslogHostMapTrapMsg,
       "rcSyslogHostLogTraceMsgs": rcSyslogHostLogTraceMsgs,
       "rcSyslogHostLogTrapMsgs": rcSyslogHostLogTrapMsgs,
       "rcSyslogHostEnable": rcSyslogHostEnable,
       "rcSyslogHostRowStatus": rcSyslogHostRowStatus,
       "rcDiag": rcDiag,
       "rcDiagMirrorByPortTable": rcDiagMirrorByPortTable,
       "rcDiagMirrorByPortEntry": rcDiagMirrorByPortEntry,
       "rcDiagMirrorByPortId": rcDiagMirrorByPortId,
       "rcDiagMirrorByPortMirroredPort": rcDiagMirrorByPortMirroredPort,
       "rcDiagMirrorByPortMirroringPort": rcDiagMirrorByPortMirroringPort,
       "rcDiagMirrorByPortMode": rcDiagMirrorByPortMode,
       "rcDiagMirrorByPortEnable": rcDiagMirrorByPortEnable,
       "rcDiagMirrorByPortRowStatus": rcDiagMirrorByPortRowStatus,
       "rcDiagMirrorByPortOctapidId": rcDiagMirrorByPortOctapidId,
       "rcDiagMirrorByPortPid": rcDiagMirrorByPortPid,
       "rcDiagMirrorRemoteMirrorVlanId": rcDiagMirrorRemoteMirrorVlanId,
       "rcDiagMirrorByPortMirroredPortList": rcDiagMirrorByPortMirroredPortList,
       "rcDiagMirrorByPortMirroringPortList": rcDiagMirrorByPortMirroringPortList,
       "rcDiagMirrorMirroringVlanId": rcDiagMirrorMirroringVlanId,
       "rcDiagMirrorMirroringMltId": rcDiagMirrorMirroringMltId,
       "rcDiagMirrorMirroringMgId": rcDiagMirrorMirroringMgId,
       "rcDiagPortConvSteeringTable": rcDiagPortConvSteeringTable,
       "rcDiagPortConvSteeringEntry": rcDiagPortConvSteeringEntry,
       "rcDiagPortConvSteeringId": rcDiagPortConvSteeringId,
       "rcDiagPortConvSteeringPortOne": rcDiagPortConvSteeringPortOne,
       "rcDiagPortConvSteeringPortTwo": rcDiagPortConvSteeringPortTwo,
       "rcDiagPortConvSteeringMode": rcDiagPortConvSteeringMode,
       "rcDiagPortConvSteeringForwardPort": rcDiagPortConvSteeringForwardPort,
       "rcDiagPortConvSteeringEnable": rcDiagPortConvSteeringEnable,
       "rcDiagPortConvSteeringRowStatus": rcDiagPortConvSteeringRowStatus,
       "rcDiagMacConvSteeringTable": rcDiagMacConvSteeringTable,
       "rcDiagMacConvSteeringEntry": rcDiagMacConvSteeringEntry,
       "rcDiagMacConvSteeringId": rcDiagMacConvSteeringId,
       "rcDiagMacConvSteeringSrcMac": rcDiagMacConvSteeringSrcMac,
       "rcDiagMacConvSteeringDstMac": rcDiagMacConvSteeringDstMac,
       "rcDiagMacConvSteeringInPort": rcDiagMacConvSteeringInPort,
       "rcDiagMacConvSteeringForwardPort": rcDiagMacConvSteeringForwardPort,
       "rcDiagMacConvSteeringEnable": rcDiagMacConvSteeringEnable,
       "rcDiagMacConvSteeringRowStatus": rcDiagMacConvSteeringRowStatus,
       "rcDiagSaveConfig": rcDiagSaveConfig,
       "rcDiagMirrorByPortTblSize": rcDiagMirrorByPortTblSize,
       "rcDiagPortConvSteeringTblSize": rcDiagPortConvSteeringTblSize,
       "rcDiagMacConvSteeringTblSize": rcDiagMacConvSteeringTblSize,
       "rcDiagDiagnosticsEnable": rcDiagDiagnosticsEnable,
       "rcDiagPcap": rcDiagPcap,
       "rcDiagPcapEnable": rcDiagPcapEnable,
       "rcDiagPcapBufferWrap": rcDiagPcapBufferWrap,
       "rcDiagPcapPcmciaWrap": rcDiagPcapPcmciaWrap,
       "rcDiagPcapFrameSize": rcDiagPcapFrameSize,
       "rcDiagPcapBufferSize": rcDiagPcapBufferSize,
       "rcDiagPcapAutoSave": rcDiagPcapAutoSave,
       "rcDiagPcapAutoSaveFileName": rcDiagPcapAutoSaveFileName,
       "rcDiagPcapAutoSaveDevice": rcDiagPcapAutoSaveDevice,
       "rcDiagPcapAutoSaveNetworkIpAddress": rcDiagPcapAutoSaveNetworkIpAddress,
       "rcDiagPcapFilterTableSize": rcDiagPcapFilterTableSize,
       "rcDiagPcapFilterTable": rcDiagPcapFilterTable,
       "rcDiagPcapFilterEntry": rcDiagPcapFilterEntry,
       "rcDiagPcapFilterId": rcDiagPcapFilterId,
       "rcDiagPcapFilterEnable": rcDiagPcapFilterEnable,
       "rcDiagPcapFilterAction": rcDiagPcapFilterAction,
       "rcDiagPcapFilterSrcMac": rcDiagPcapFilterSrcMac,
       "rcDiagPcapFilterSrcMask": rcDiagPcapFilterSrcMask,
       "rcDiagPcapFilterIsInverseSrcMac": rcDiagPcapFilterIsInverseSrcMac,
       "rcDiagPcapFilterDstMac": rcDiagPcapFilterDstMac,
       "rcDiagPcapFilterDstMask": rcDiagPcapFilterDstMask,
       "rcDiagPcapFilterIsInverseDstMac": rcDiagPcapFilterIsInverseDstMac,
       "rcDiagPcapFilterVlanId": rcDiagPcapFilterVlanId,
       "rcDiagPcapFilterToVlanId": rcDiagPcapFilterToVlanId,
       "rcDiagPcapFilterIsInverseVlanId": rcDiagPcapFilterIsInverseVlanId,
       "rcDiagPcapFilterPbit": rcDiagPcapFilterPbit,
       "rcDiagPcapFilterToPbit": rcDiagPcapFilterToPbit,
       "rcDiagPcapFilterIsInversePbit": rcDiagPcapFilterIsInversePbit,
       "rcDiagPcapFilterEtherType": rcDiagPcapFilterEtherType,
       "rcDiagPcapFilterToEtherType": rcDiagPcapFilterToEtherType,
       "rcDiagPcapFilterIsInverseEtherType": rcDiagPcapFilterIsInverseEtherType,
       "rcDiagPcapFilterProtocolType": rcDiagPcapFilterProtocolType,
       "rcDiagPcapFilterToProtocolType": rcDiagPcapFilterToProtocolType,
       "rcDiagPcapFilterIsInverseProtocolType": rcDiagPcapFilterIsInverseProtocolType,
       "rcDiagPcapFilterSrcIp": rcDiagPcapFilterSrcIp,
       "rcDiagPcapFilterToSrcIp": rcDiagPcapFilterToSrcIp,
       "rcDiagPcapFilterIsInverseSrcIp": rcDiagPcapFilterIsInverseSrcIp,
       "rcDiagPcapFilterDstIp": rcDiagPcapFilterDstIp,
       "rcDiagPcapFilterToDstIp": rcDiagPcapFilterToDstIp,
       "rcDiagPcapFilterIsInverseDstIp": rcDiagPcapFilterIsInverseDstIp,
       "rcDiagPcapFilterDscp": rcDiagPcapFilterDscp,
       "rcDiagPcapFilterToDscp": rcDiagPcapFilterToDscp,
       "rcDiagPcapFilterIsInverseDscp": rcDiagPcapFilterIsInverseDscp,
       "rcDiagPcapFilterRowStatus": rcDiagPcapFilterRowStatus,
       "rcDiagPcapFilterDscpMatchZero": rcDiagPcapFilterDscpMatchZero,
       "rcDiagPcapFilterPbitMatchZero": rcDiagPcapFilterPbitMatchZero,
       "rcDiagPcapAdvancedFilterTableSize": rcDiagPcapAdvancedFilterTableSize,
       "rcDiagPcapAdvancedFilterTable": rcDiagPcapAdvancedFilterTable,
       "rcDiagPcapAdvancedFilterEntry": rcDiagPcapAdvancedFilterEntry,
       "rcDiagPcapAdvancedFilterId": rcDiagPcapAdvancedFilterId,
       "rcDiagPcapAdvancedFilterUdpPort": rcDiagPcapAdvancedFilterUdpPort,
       "rcDiagPcapAdvancedFilterToUdpPort": rcDiagPcapAdvancedFilterToUdpPort,
       "rcDiagPcapAdvancedFilterIsInverseUdpPort": rcDiagPcapAdvancedFilterIsInverseUdpPort,
       "rcDiagPcapAdvancedFilterTcpPort": rcDiagPcapAdvancedFilterTcpPort,
       "rcDiagPcapAdvancedFilterToTcpPort": rcDiagPcapAdvancedFilterToTcpPort,
       "rcDiagPcapAdvancedFilterIsInverseTcpPort": rcDiagPcapAdvancedFilterIsInverseTcpPort,
       "rcDiagPcapAdvancedFilterUserDefinedData": rcDiagPcapAdvancedFilterUserDefinedData,
       "rcDiagPcapAdvancedFilterUserDefinedDataSize": rcDiagPcapAdvancedFilterUserDefinedDataSize,
       "rcDiagPcapAdvancedFilterUserDefinedOffset": rcDiagPcapAdvancedFilterUserDefinedOffset,
       "rcDiagPcapAdvancedFilterIsInverseUserDefined": rcDiagPcapAdvancedFilterIsInverseUserDefined,
       "rcDiagPcapAdvancedFilterTimer": rcDiagPcapAdvancedFilterTimer,
       "rcDiagPcapAdvancedFilterPacketCount": rcDiagPcapAdvancedFilterPacketCount,
       "rcDiagPcapAdvancedFilterRefreshTimer": rcDiagPcapAdvancedFilterRefreshTimer,
       "rcDiagPcapAdvancedFilterRowStatus": rcDiagPcapAdvancedFilterRowStatus,
       "rcDiagPcapCopyFileName": rcDiagPcapCopyFileName,
       "rcDiagPcapResetStat": rcDiagPcapResetStat,
       "rcDiagPcapStatPacketCapacityCount": rcDiagPcapStatPacketCapacityCount,
       "rcDiagPcapStatNumberOfPacketsReceived": rcDiagPcapStatNumberOfPacketsReceived,
       "rcDiagPcapStatNumberOfPacketsAccumulated": rcDiagPcapStatNumberOfPacketsAccumulated,
       "rcDiagPcapStatNumberOfPacketsDroppedInPcapEngine": rcDiagPcapStatNumberOfPacketsDroppedInPcapEngine,
       "rcDiagPcapStatNumberOfPacketsDroppedInHardware": rcDiagPcapStatNumberOfPacketsDroppedInHardware,
       "rcDiagPcapDataValid": rcDiagPcapDataValid,
       "rcDiagPcapEtherTypeForSvlanLevel": rcDiagPcapEtherTypeForSvlanLevel,
       "rcIpx": rcIpx,
       "rcIpxRoutingEnable": rcIpxRoutingEnable,
       "rcIpxAddrTable": rcIpxAddrTable,
       "rcIpxAddrEntry": rcIpxAddrEntry,
       "rcIpxAddrVlanId": rcIpxAddrVlanId,
       "rcIpxAddrNetAddr": rcIpxAddrNetAddr,
       "rcIpxAddrEncap": rcIpxAddrEncap,
       "rcIpxAddrEntryStatus": rcIpxAddrEntryStatus,
       "rcIpxAddrTicks": rcIpxAddrTicks,
       "rcIpxPolicyNetTableSize": rcIpxPolicyNetTableSize,
       "rcIpxPolicyNetTable": rcIpxPolicyNetTable,
       "rcIpxPolicyNetEntry": rcIpxPolicyNetEntry,
       "rcIpxPolicyNetId": rcIpxPolicyNetId,
       "rcIpxPolicyNetFromNet": rcIpxPolicyNetFromNet,
       "rcIpxPolicyNetToNet": rcIpxPolicyNetToNet,
       "rcIpxPolicyNetName": rcIpxPolicyNetName,
       "rcIpxPolicyNetRowStatus": rcIpxPolicyNetRowStatus,
       "rcIpxPolicyServTableSize": rcIpxPolicyServTableSize,
       "rcIpxPolicyServTable": rcIpxPolicyServTable,
       "rcIpxPolicyServEntry": rcIpxPolicyServEntry,
       "rcIpxPolicyServId": rcIpxPolicyServId,
       "rcIpxPolicyServServiceType": rcIpxPolicyServServiceType,
       "rcIpxPolicyServServiceName": rcIpxPolicyServServiceName,
       "rcIpxPolicyServName": rcIpxPolicyServName,
       "rcIpxPolicyServRowStatus": rcIpxPolicyServRowStatus,
       "rcIpxPolicyListTableSize": rcIpxPolicyListTableSize,
       "rcIpxPolicyListTable": rcIpxPolicyListTable,
       "rcIpxPolicyListEntry": rcIpxPolicyListEntry,
       "rcIpxPolicyListId": rcIpxPolicyListId,
       "rcIpxPolicyListSeqnum": rcIpxPolicyListSeqnum,
       "rcIpxPolicyListName": rcIpxPolicyListName,
       "rcIpxPolicyListEnable": rcIpxPolicyListEnable,
       "rcIpxPolicyListAction": rcIpxPolicyListAction,
       "rcIpxPolicyListRouteSource": rcIpxPolicyListRouteSource,
       "rcIpxPolicyListMatchNetList": rcIpxPolicyListMatchNetList,
       "rcIpxPolicyListMatchServList": rcIpxPolicyListMatchServList,
       "rcIpxPolicyListHops": rcIpxPolicyListHops,
       "rcIpxPolicyListTicks": rcIpxPolicyListTicks,
       "rcIpxPolicyListRowStatus": rcIpxPolicyListRowStatus,
       "rcIpxRipOutFilterTableSize": rcIpxRipOutFilterTableSize,
       "rcIpxRipOutFilterTable": rcIpxRipOutFilterTable,
       "rcIpxRipOutFilterEntry": rcIpxRipOutFilterEntry,
       "rcIpxRipOutFilterInterface": rcIpxRipOutFilterInterface,
       "rcIpxRipOutFilterPolicyName": rcIpxRipOutFilterPolicyName,
       "rcIpxRipOutFilterRowStatus": rcIpxRipOutFilterRowStatus,
       "rcIpxSapOutFilterTableSize": rcIpxSapOutFilterTableSize,
       "rcIpxSapOutFilterTable": rcIpxSapOutFilterTable,
       "rcIpxSapOutFilterEntry": rcIpxSapOutFilterEntry,
       "rcIpxSapOutFilterInterface": rcIpxSapOutFilterInterface,
       "rcIpxSapOutFilterPolicyName": rcIpxSapOutFilterPolicyName,
       "rcIpxSapOutFilterRowStatus": rcIpxSapOutFilterRowStatus,
       "rcIpxRipInFilterTableSize": rcIpxRipInFilterTableSize,
       "rcIpxRipInFilterTable": rcIpxRipInFilterTable,
       "rcIpxRipInFilterEntry": rcIpxRipInFilterEntry,
       "rcIpxRipInFilterInterface": rcIpxRipInFilterInterface,
       "rcIpxRipInFilterPolicyName": rcIpxRipInFilterPolicyName,
       "rcIpxRipInFilterRowStatus": rcIpxRipInFilterRowStatus,
       "rcIpxSapInFilterTableSize": rcIpxSapInFilterTableSize,
       "rcIpxSapInFilterTable": rcIpxSapInFilterTable,
       "rcIpxSapInFilterEntry": rcIpxSapInFilterEntry,
       "rcIpxSapInFilterInterface": rcIpxSapInFilterInterface,
       "rcIpxSapInFilterPolicyName": rcIpxSapInFilterPolicyName,
       "rcIpxSapInFilterRowStatus": rcIpxSapInFilterRowStatus,
       "rcIpxRoutingMethod": rcIpxRoutingMethod,
       "rcIpxSapInterfaceTable": rcIpxSapInterfaceTable,
       "rcIpxSapInterfaceEntry": rcIpxSapInterfaceEntry,
       "rcIpxSapInterfaceNetNum": rcIpxSapInterfaceNetNum,
       "rcIpxSapInterfaceInPolicy": rcIpxSapInterfaceInPolicy,
       "rcIpxSapInterfaceOutPolicy": rcIpxSapInterfaceOutPolicy,
       "rcIpxRipInterfaceTable": rcIpxRipInterfaceTable,
       "rcIpxRipInterfaceEntry": rcIpxRipInterfaceEntry,
       "rcIpxRipInterfaceNetNum": rcIpxRipInterfaceNetNum,
       "rcIpxRipInterfaceInPolicy": rcIpxRipInterfaceInPolicy,
       "rcIpxRipInterfaceOutPolicy": rcIpxRipInterfaceOutPolicy,
       "rcIpxBrouterTable": rcIpxBrouterTable,
       "rcIpxBrouterEntry": rcIpxBrouterEntry,
       "rcIpxBrouterPortIndex": rcIpxBrouterPortIndex,
       "rcIpxBrouterVlanId": rcIpxBrouterVlanId,
       "rcIpxBrouterNetAddr": rcIpxBrouterNetAddr,
       "rcIpxBrouterEncap": rcIpxBrouterEncap,
       "rcIpxBrouterMacOffset": rcIpxBrouterMacOffset,
       "rcIpxBrouterTicks": rcIpxBrouterTicks,
       "rcIpxBrouterRowStatus": rcIpxBrouterRowStatus,
       "rcIpxRsmlt": rcIpxRsmlt,
       "rcIpxRsmltGlobal": rcIpxRsmltGlobal,
       "rcIpxRsmltGlobalTableSize": rcIpxRsmltGlobalTableSize,
       "rcIpxRsmltOperTable": rcIpxRsmltOperTable,
       "rcIpxRsmltOperEntry": rcIpxRsmltOperEntry,
       "rcIpxRsmltOperVlanId": rcIpxRsmltOperVlanId,
       "rcIpxRsmltOperIfIndex": rcIpxRsmltOperIfIndex,
       "rcIpxRsmltOperAdminStatus": rcIpxRsmltOperAdminStatus,
       "rcIpxRsmltOperHoldDownTimer": rcIpxRsmltOperHoldDownTimer,
       "rcIpxRsmltOperHoldDownTimeRemaining": rcIpxRsmltOperHoldDownTimeRemaining,
       "rcIpxRsmltOperHoldUpTimer": rcIpxRsmltOperHoldUpTimer,
       "rcIpxRsmltOperHoldUpTimeRemaining": rcIpxRsmltOperHoldUpTimeRemaining,
       "rcIpxRsmltOperOperStatus": rcIpxRsmltOperOperStatus,
       "rcIpxRsmltOperSmltId": rcIpxRsmltOperSmltId,
       "rcIpxRsmltOperSltId": rcIpxRsmltOperSltId,
       "rcIpxRsmltOperRowStatus": rcIpxRsmltOperRowStatus,
       "rcIpxRsmltOperMacAddr": rcIpxRsmltOperMacAddr,
       "rcIpxRsmltPeerTable": rcIpxRsmltPeerTable,
       "rcIpxRsmltPeerEntry": rcIpxRsmltPeerEntry,
       "rcIpxRsmltPeerVlanId": rcIpxRsmltPeerVlanId,
       "rcIpxRsmltPeerIfIndex": rcIpxRsmltPeerIfIndex,
       "rcIpxRsmltPeerAdminStatus": rcIpxRsmltPeerAdminStatus,
       "rcIpxRsmltPeerHoldDownTimer": rcIpxRsmltPeerHoldDownTimer,
       "rcIpxRsmltPeerHoldDownTimeRemaining": rcIpxRsmltPeerHoldDownTimeRemaining,
       "rcIpxRsmltPeerHoldUpTimer": rcIpxRsmltPeerHoldUpTimer,
       "rcIpxRsmltPeerHoldUpTimeRemaining": rcIpxRsmltPeerHoldUpTimeRemaining,
       "rcIpxRsmltPeerOperStatus": rcIpxRsmltPeerOperStatus,
       "rcIpxRsmltPeerSmltId": rcIpxRsmltPeerSmltId,
       "rcIpxRsmltPeerSltId": rcIpxRsmltPeerSltId,
       "rcIpxRsmltPeerMacAddr": rcIpxRsmltPeerMacAddr,
       "rcIpxRipGlobal": rcIpxRipGlobal,
       "rcIpxRipGlobalPace": rcIpxRipGlobalPace,
       "rcIpxRipGlobalUpdate": rcIpxRipGlobalUpdate,
       "rcIpxRipGlobalAgeMultiplier": rcIpxRipGlobalAgeMultiplier,
       "rcPos": rcPos,
       "rcPosPppIpxTable": rcPosPppIpxTable,
       "rcPosPppIpxEntry": rcPosPppIpxEntry,
       "rcPosPppIpxIfIndex": rcPosPppIpxIfIndex,
       "rcPosPppIpxIpxcpAdminStatus": rcPosPppIpxIpxcpAdminStatus,
       "rcPosPppIpxOperStatus": rcPosPppIpxOperStatus,
       "rcPosPppIpxNetAddr": rcPosPppIpxNetAddr,
       "rcPosPppIpxRoutingProtocol": rcPosPppIpxRoutingProtocol,
       "rcPosSonetTable": rcPosSonetTable,
       "rcPosSonetEntry": rcPosSonetEntry,
       "rcPosSonetIndex": rcPosSonetIndex,
       "rcPosSonetFraming": rcPosSonetFraming,
       "rcPosSonetSectionTrace": rcPosSonetSectionTrace,
       "rcPosSonetSectionGrowth": rcPosSonetSectionGrowth,
       "rcPosSonetSyncronization": rcPosSonetSyncronization,
       "rcPosSonetStsPathTrace": rcPosSonetStsPathTrace,
       "rcPosSonetPathSignalLabel": rcPosSonetPathSignalLabel,
       "rcPosSonetClockSource": rcPosSonetClockSource,
       "rcPosSonetScramble": rcPosSonetScramble,
       "rcPosSonetOperStatusFraming": rcPosSonetOperStatusFraming,
       "rcPosSonetOperStatusClockSource": rcPosSonetOperStatusClockSource,
       "rcPosSonetOperStatusScramble": rcPosSonetOperStatusScramble,
       "rcPosSonetOperStatusSectionTrace": rcPosSonetOperStatusSectionTrace,
       "rcPosSonetOperStatusPathSignalLabel": rcPosSonetOperStatusPathSignalLabel,
       "rcPosLineStatusTable": rcPosLineStatusTable,
       "rcPosLineStatusEntry": rcPosLineStatusEntry,
       "rcPosLineStatusIndex": rcPosLineStatusIndex,
       "rcPosLineStatusLocalMACAddress": rcPosLineStatusLocalMACAddress,
       "rcPosLineStatusRemoteMACAddress": rcPosLineStatusRemoteMACAddress,
       "rcPosLineStatusLocalIpAddr": rcPosLineStatusLocalIpAddr,
       "rcPosLineStatusRemoteIpAddr": rcPosLineStatusRemoteIpAddr,
       "rcPosLineStatusOutQuality": rcPosLineStatusOutQuality,
       "rcPosLineStatusLocalPeriod": rcPosLineStatusLocalPeriod,
       "rcPosLineStatusDeviceType": rcPosLineStatusDeviceType,
       "rcPosLineStatusDeviceRev": rcPosLineStatusDeviceRev,
       "rcPosLineStatusIpxRoutingProtocol": rcPosLineStatusIpxRoutingProtocol,
       "rcPosLineConfigTable": rcPosLineConfigTable,
       "rcPosLineConfigEntry": rcPosLineConfigEntry,
       "rcPosLineConfigIndex": rcPosLineConfigIndex,
       "rcPosLineConfigLocalMACAddress": rcPosLineConfigLocalMACAddress,
       "rcPosLineConfigRemoteMACAddress": rcPosLineConfigRemoteMACAddress,
       "rcPosLineConfigLocalIpAddr": rcPosLineConfigLocalIpAddr,
       "rcPosLineConfigRemoteIpAddr": rcPosLineConfigRemoteIpAddr,
       "rcPosLineConfigRemoteReportPeriod": rcPosLineConfigRemoteReportPeriod,
       "rcPosLineConfigLqrThreshold": rcPosLineConfigLqrThreshold,
       "rcPosLineConfigOutQuality": rcPosLineConfigOutQuality,
       "rcPosLineConfigPppStp": rcPosLineConfigPppStp,
       "rcPosLineConfigLoopBack": rcPosLineConfigLoopBack,
       "rcPosLineConfigIpxVlanMacAddress": rcPosLineConfigIpxVlanMacAddress,
       "rcPosLineConfigIpxRemoteMacAddress": rcPosLineConfigIpxRemoteMacAddress,
       "rcPosSonetTrap": rcPosSonetTrap,
       "rcPosSonetTrapType": rcPosSonetTrapType,
       "rcPosSonetTrapIndication": rcPosSonetTrapIndication,
       "rcPosSioCardConfigTable": rcPosSioCardConfigTable,
       "rcPosSioCardConfigEntry": rcPosSioCardConfigEntry,
       "rcPosSioCardConfigSlotIndex": rcPosSioCardConfigSlotIndex,
       "rcPosSioCardConfigAction": rcPosSioCardConfigAction,
       "rcPosSioCardConfigTraceMode": rcPosSioCardConfigTraceMode,
       "rcPosSioCardConfigImageFileName": rcPosSioCardConfigImageFileName,
       "rcPosOperStatusTable": rcPosOperStatusTable,
       "rcPosOperStatusEntry": rcPosOperStatusEntry,
       "rcPosOperStatusIndex": rcPosOperStatusIndex,
       "rcPosOperStatusLqrStatus": rcPosOperStatusLqrStatus,
       "rcPosOperStatusLineLqrThreshold": rcPosOperStatusLineLqrThreshold,
       "rcPosOperStatusLinkMagicNumber": rcPosOperStatusLinkMagicNumber,
       "rcPosOperStatusLinePppStp": rcPosOperStatusLinePppStp,
       "rcLinkFlapDetect": rcLinkFlapDetect,
       "rcLinkFlapDetectAutoPortDownEnable": rcLinkFlapDetectAutoPortDownEnable,
       "rcLinkFlapDetectSendTrap": rcLinkFlapDetectSendTrap,
       "rcLinkFlapDetectFrequency": rcLinkFlapDetectFrequency,
       "rcLinkFlapDetectInterval": rcLinkFlapDetectInterval,
       "rcV1Traps": rcV1Traps,
       "rcRadius": rcRadius,
       "rcRadiusGlobal": rcRadiusGlobal,
       "rcRadiusGlobalEnable": rcRadiusGlobalEnable,
       "rcRadiusGlobalMaxNumberServer": rcRadiusGlobalMaxNumberServer,
       "rcRadiusGlobalAttributeValue": rcRadiusGlobalAttributeValue,
       "rcRadiusGlobalServerTableSize": rcRadiusGlobalServerTableSize,
       "rcRadiusGlobalAcctEnable": rcRadiusGlobalAcctEnable,
       "rcRadiusGlobalAcctAttributeValue": rcRadiusGlobalAcctAttributeValue,
       "rcRadiusGlobalAcctIncludeCli": rcRadiusGlobalAcctIncludeCli,
       "rcRadiusGlobalClearStat": rcRadiusGlobalClearStat,
       "rcRadiusGlobalMcastAttributeValue": rcRadiusGlobalMcastAttributeValue,
       "rcRadiusGlobalAuthInfoAttributeValue": rcRadiusGlobalAuthInfoAttributeValue,
       "rcRadiusGlobalCommandAccess": rcRadiusGlobalCommandAccess,
       "rcRadiusGlobalCliCommands": rcRadiusGlobalCliCommands,
       "rcRadiusGlobalIgapLogFSize": rcRadiusGlobalIgapLogFSize,
       "rcRadiusGlobalCliProfEnable": rcRadiusGlobalCliProfEnable,
       "rcRadiusGlobalAuthInvalidServerAddress": rcRadiusGlobalAuthInvalidServerAddress,
       "rcRadiusGlobalSourceIpFlag": rcRadiusGlobalSourceIpFlag,
       "rcRadiusGlobalCliCmdCount": rcRadiusGlobalCliCmdCount,
       "rcRadiusServerTable": rcRadiusServerTable,
       "rcRadiusServerEntry": rcRadiusServerEntry,
       "rcRadiusServerPriority": rcRadiusServerPriority,
       "rcRadiusServerAddress": rcRadiusServerAddress,
       "rcRadiusServerTimeOut": rcRadiusServerTimeOut,
       "rcRadiusServerEnable": rcRadiusServerEnable,
       "rcRadiusServerMaxRetries": rcRadiusServerMaxRetries,
       "rcRadiusServerUdpPort": rcRadiusServerUdpPort,
       "rcRadiusServerSecretKey": rcRadiusServerSecretKey,
       "rcRadiusServerAccessRequests": rcRadiusServerAccessRequests,
       "rcRadiusServerAccessAccepts": rcRadiusServerAccessAccepts,
       "rcRadiusServerAccessRejects": rcRadiusServerAccessRejects,
       "rcRadiusServerBadResponses": rcRadiusServerBadResponses,
       "rcRadiusServerPendingRequests": rcRadiusServerPendingRequests,
       "rcRadiusServerClientRetries": rcRadiusServerClientRetries,
       "rcRadiusServerRowStatus": rcRadiusServerRowStatus,
       "rcRadiusServerAcctEnable": rcRadiusServerAcctEnable,
       "rcRadiusServerAcctUdpPort": rcRadiusServerAcctUdpPort,
       "rcRadiusServerAcctOnRequests": rcRadiusServerAcctOnRequests,
       "rcRadiusServerAcctOffRequests": rcRadiusServerAcctOffRequests,
       "rcRadiusServerAcctStartRequests": rcRadiusServerAcctStartRequests,
       "rcRadiusServerAcctStopRequests": rcRadiusServerAcctStopRequests,
       "rcRadiusServerAcctInterimRequests": rcRadiusServerAcctInterimRequests,
       "rcRadiusServerAcctBadResponses": rcRadiusServerAcctBadResponses,
       "rcRadiusServerAcctPendingRequests": rcRadiusServerAcctPendingRequests,
       "rcRadiusServerAcctClientRetries": rcRadiusServerAcctClientRetries,
       "rcRadiusServTable": rcRadiusServTable,
       "rcRadiusServEntry": rcRadiusServEntry,
       "rcRadiusServPriority": rcRadiusServPriority,
       "rcRadiusServAddress": rcRadiusServAddress,
       "rcRadiusServTimeOut": rcRadiusServTimeOut,
       "rcRadiusServEnable": rcRadiusServEnable,
       "rcRadiusServMaxRetries": rcRadiusServMaxRetries,
       "rcRadiusServUdpPort": rcRadiusServUdpPort,
       "rcRadiusServSecretKey": rcRadiusServSecretKey,
       "rcRadiusServAccessRequests": rcRadiusServAccessRequests,
       "rcRadiusServAccessAccepts": rcRadiusServAccessAccepts,
       "rcRadiusServAccessRejects": rcRadiusServAccessRejects,
       "rcRadiusServBadResponses": rcRadiusServBadResponses,
       "rcRadiusServPendingRequests": rcRadiusServPendingRequests,
       "rcRadiusServClientRetries": rcRadiusServClientRetries,
       "rcRadiusServRowStatus": rcRadiusServRowStatus,
       "rcRadiusServAcctEnable": rcRadiusServAcctEnable,
       "rcRadiusServAcctUdpPort": rcRadiusServAcctUdpPort,
       "rcRadiusServAcctOnRequests": rcRadiusServAcctOnRequests,
       "rcRadiusServAcctOffRequests": rcRadiusServAcctOffRequests,
       "rcRadiusServAcctStartRequests": rcRadiusServAcctStartRequests,
       "rcRadiusServAcctStopRequests": rcRadiusServAcctStopRequests,
       "rcRadiusServAcctInterimRequests": rcRadiusServAcctInterimRequests,
       "rcRadiusServAcctBadResponses": rcRadiusServAcctBadResponses,
       "rcRadiusServAcctPendingRequests": rcRadiusServAcctPendingRequests,
       "rcRadiusServAcctClientRetries": rcRadiusServAcctClientRetries,
       "rcRadiusServUsedBy": rcRadiusServUsedBy,
       "rcRadiusServNasIpAddress": rcRadiusServNasIpAddress,
       "rcRadiusServRoundTripTime": rcRadiusServRoundTripTime,
       "rcRadiusServAccessChallanges": rcRadiusServAccessChallanges,
       "rcRadiusServSourceIpAddr": rcRadiusServSourceIpAddr,
       "rcRadiusGlobalSnmp": rcRadiusGlobalSnmp,
       "rcRadiusGlobalSnmpEnable": rcRadiusGlobalSnmpEnable,
       "rcRadiusGlobalSnmpAcctEnable": rcRadiusGlobalSnmpAcctEnable,
       "rcRadiusGlobalSnmpReAuthenticateTimer": rcRadiusGlobalSnmpReAuthenticateTimer,
       "rcRadiusGlobalSnmpAbortSessionTimer": rcRadiusGlobalSnmpAbortSessionTimer,
       "rcRadiusGlobalSnmpUserName": rcRadiusGlobalSnmpUserName,
       "rcRadiusEapLastRejMac": rcRadiusEapLastRejMac,
       "rcRadiusPaePortNumber": rcRadiusPaePortNumber,
       "rcRadiusEapLastAuthMac": rcRadiusEapLastAuthMac,
       "rcIgmp": rcIgmp,
       "rcIgmpInterfaceExtnTable": rcIgmpInterfaceExtnTable,
       "rcIgmpInterfaceExtnEntry": rcIgmpInterfaceExtnEntry,
       "rcIgmpInterfaceExtnIfIndex": rcIgmpInterfaceExtnIfIndex,
       "rcIgmpInterfaceExtnSnoopEnable": rcIgmpInterfaceExtnSnoopEnable,
       "rcIgmpInterfaceExtnProxySnoopEnable": rcIgmpInterfaceExtnProxySnoopEnable,
       "rcIgmpInterfaceExtnMaxAdvertiseInterval": rcIgmpInterfaceExtnMaxAdvertiseInterval,
       "rcIgmpInterfaceExtnMinAdvertiseInterval": rcIgmpInterfaceExtnMinAdvertiseInterval,
       "rcIgmpInterfaceExtnMaxInitialAdvertiseInterval": rcIgmpInterfaceExtnMaxInitialAdvertiseInterval,
       "rcIgmpInterfaceExtnMaxInitialAdvertments": rcIgmpInterfaceExtnMaxInitialAdvertments,
       "rcIgmpInterfaceExtnNeighborDeadInterval": rcIgmpInterfaceExtnNeighborDeadInterval,
       "rcIgmpInterfaceExtnFastLeaveEnable": rcIgmpInterfaceExtnFastLeaveEnable,
       "rcIgmpInterfaceExtnFastLeavePortMembers": rcIgmpInterfaceExtnFastLeavePortMembers,
       "rcIgmpInterfaceExtnMrdiscEnable": rcIgmpInterfaceExtnMrdiscEnable,
       "rcIgmpInterfaceExtnDiscoveredRouterPorts": rcIgmpInterfaceExtnDiscoveredRouterPorts,
       "rcIgmpInterfaceExtnSnoopMRouterPorts": rcIgmpInterfaceExtnSnoopMRouterPorts,
       "rcIgmpInterfaceExtnSnoopActiveMRouterPorts": rcIgmpInterfaceExtnSnoopActiveMRouterPorts,
       "rcIgmpInterfaceExtnSnoopMRouterExpiration": rcIgmpInterfaceExtnSnoopMRouterExpiration,
       "rcIgmpInterfaceExtnFlushAction": rcIgmpInterfaceExtnFlushAction,
       "rcIgmpInterfaceExtnRouterAlertEnable": rcIgmpInterfaceExtnRouterAlertEnable,
       "rcIgmpInterfaceExtnSsmEnable": rcIgmpInterfaceExtnSsmEnable,
       "rcIgmpInterfaceExtnIgapEnable": rcIgmpInterfaceExtnIgapEnable,
       "rcIgmpInterfaceExtnAccntEnable": rcIgmpInterfaceExtnAccntEnable,
       "rcIgmpInterfaceExtnAuthEnable": rcIgmpInterfaceExtnAuthEnable,
       "rcIgmpInterfaceExtnStreamLimitEnable": rcIgmpInterfaceExtnStreamLimitEnable,
       "rcIgmpInterfaceExtnMaxStreams": rcIgmpInterfaceExtnMaxStreams,
       "rcIgmpInterfaceExtnNumStreams": rcIgmpInterfaceExtnNumStreams,
       "rcIgmpInterfaceExtnNewQuerier": rcIgmpInterfaceExtnNewQuerier,
       "rcIgmpInterfaceExtnSnoopQuerierEnable": rcIgmpInterfaceExtnSnoopQuerierEnable,
       "rcIgmpInterfaceExtnSnoopQuerierAddr": rcIgmpInterfaceExtnSnoopQuerierAddr,
       "rcIgmpInterfaceExtnMvrEnable": rcIgmpInterfaceExtnMvrEnable,
       "rcIgmpInterfaceExtnMvrProxyEnable": rcIgmpInterfaceExtnMvrProxyEnable,
       "rcIgmpInterfaceExtnDynamicDowngradeEnable": rcIgmpInterfaceExtnDynamicDowngradeEnable,
       "rcIgmpInterfaceExtnCompatibilityModeEnable": rcIgmpInterfaceExtnCompatibilityModeEnable,
       "rcIgmpInterfaceExtnOperVersion": rcIgmpInterfaceExtnOperVersion,
       "rcIgmpStaticTable": rcIgmpStaticTable,
       "rcIgmpStaticEntry": rcIgmpStaticEntry,
       "rcIgmpStaticIfIndex": rcIgmpStaticIfIndex,
       "rcIgmpStaticGrpAddr": rcIgmpStaticGrpAddr,
       "rcIgmpStaticMemberPorts": rcIgmpStaticMemberPorts,
       "rcIgmpStaticNotAllowedToJoin": rcIgmpStaticNotAllowedToJoin,
       "rcIgmpStaticRowStatus": rcIgmpStaticRowStatus,
       "rcIgmpStaticToGrpAddr": rcIgmpStaticToGrpAddr,
       "rcIgmpAccessTable": rcIgmpAccessTable,
       "rcIgmpAccessEntry": rcIgmpAccessEntry,
       "rcIgmpAccessIfIndex": rcIgmpAccessIfIndex,
       "rcIgmpAccessGrpAddr": rcIgmpAccessGrpAddr,
       "rcIgmpAccessHostAddr": rcIgmpAccessHostAddr,
       "rcIgmpAccessMode": rcIgmpAccessMode,
       "rcIgmpAccessRowStatus": rcIgmpAccessRowStatus,
       "rcIgmpAccessHostMask": rcIgmpAccessHostMask,
       "rcIgmpSenderTable": rcIgmpSenderTable,
       "rcIgmpSenderEntry": rcIgmpSenderEntry,
       "rcIgmpSenderGrpAddr": rcIgmpSenderGrpAddr,
       "rcIgmpSenderIfIndex": rcIgmpSenderIfIndex,
       "rcIgmpSenderMemberAddr": rcIgmpSenderMemberAddr,
       "rcIgmpSenderAction": rcIgmpSenderAction,
       "rcIgmpSenderTPort": rcIgmpSenderTPort,
       "rcIgmpSenderState": rcIgmpSenderState,
       "rcIgmpSsmGlobal": rcIgmpSsmGlobal,
       "rcIgmpSsmGlobalDynamicLearning": rcIgmpSsmGlobalDynamicLearning,
       "rcIgmpSsmGlobalAdminAction": rcIgmpSsmGlobalAdminAction,
       "rcIgmpSsmGlobalRangeGroup": rcIgmpSsmGlobalRangeGroup,
       "rcIgmpSsmGlobalRangeMask": rcIgmpSsmGlobalRangeMask,
       "rcIgmpSsmTable": rcIgmpSsmTable,
       "rcIgmpSsmEntry": rcIgmpSsmEntry,
       "rcIgmpSsmIpMulticastGrp": rcIgmpSsmIpMulticastGrp,
       "rcIgmpSsmIpSource": rcIgmpSsmIpSource,
       "rcIgmpSsmLearningMode": rcIgmpSsmLearningMode,
       "rcIgmpSsmActivity": rcIgmpSsmActivity,
       "rcIgmpSsmAdminState": rcIgmpSsmAdminState,
       "rcIgmpSsmRowStatus": rcIgmpSsmRowStatus,
       "rcIgmpNewAccessTable": rcIgmpNewAccessTable,
       "rcIgmpNewAccessEntry": rcIgmpNewAccessEntry,
       "rcIgmpNewAccessIfIndex": rcIgmpNewAccessIfIndex,
       "rcIgmpNewAccessPrefixListId": rcIgmpNewAccessPrefixListId,
       "rcIgmpNewAccessPrefixListName": rcIgmpNewAccessPrefixListName,
       "rcIgmpNewAccessHostAddr": rcIgmpNewAccessHostAddr,
       "rcIgmpNewAccessHostMask": rcIgmpNewAccessHostMask,
       "rcIgmpNewAccessActionMode": rcIgmpNewAccessActionMode,
       "rcIgmpNewAccessRowStatus": rcIgmpNewAccessRowStatus,
       "rcIgmpChannelLimitTable": rcIgmpChannelLimitTable,
       "rcIgmpChannelLimitEntry": rcIgmpChannelLimitEntry,
       "rcIgmpChannelLimitIfIndex": rcIgmpChannelLimitIfIndex,
       "rcIgmpChannelLimitPort": rcIgmpChannelLimitPort,
       "rcIgmpChannelLimitMaxStreams": rcIgmpChannelLimitMaxStreams,
       "rcIgmpChannelLimitNumStreams": rcIgmpChannelLimitNumStreams,
       "rcIgmpChannelLimitRowStatus": rcIgmpChannelLimitRowStatus,
       "rcIgmpIgapServiceAbilityTable": rcIgmpIgapServiceAbilityTable,
       "rcIgmpIgapServiceAbilityEntry": rcIgmpIgapServiceAbilityEntry,
       "rcIgmpIgapServiceAbilityIfIndex": rcIgmpIgapServiceAbilityIfIndex,
       "rcIgmpIgapServiceAbilityAuthSuccess": rcIgmpIgapServiceAbilityAuthSuccess,
       "rcIgmpIgapServiceAbilityAuthReject": rcIgmpIgapServiceAbilityAuthReject,
       "rcIgmpIgapServiceAbilityRespTimeout": rcIgmpIgapServiceAbilityRespTimeout,
       "rcIgmpIgapServiceAbilityPapJoinReq": rcIgmpIgapServiceAbilityPapJoinReq,
       "rcIgmpIgapServiceAbilityBasicQuery": rcIgmpIgapServiceAbilityBasicQuery,
       "rcIgmpIgapServiceAbilityBasicLeave": rcIgmpIgapServiceAbilityBasicLeave,
       "rcIgmpIgapServiceAbilityClearStat": rcIgmpIgapServiceAbilityClearStat,
       "rcIgmpIgapGlobal": rcIgmpIgapGlobal,
       "rcIgmpIgapGlobalClearAllStat": rcIgmpIgapGlobalClearAllStat,
       "rcIgmpGlobalParams": rcIgmpGlobalParams,
       "rcIgmpFastLeaveMode": rcIgmpFastLeaveMode,
       "rcIgmpGenerateTrap": rcIgmpGenerateTrap,
       "rcIgmpGenerateLog": rcIgmpGenerateLog,
       "rcIgmpMvr": rcIgmpMvr,
       "rcIgmpCacheExtnTable": rcIgmpCacheExtnTable,
       "rcIgmpCacheExtnEntry": rcIgmpCacheExtnEntry,
       "rcIgmpCacheExtnType": rcIgmpCacheExtnType,
       "rcIgmpCacheExtnStaticPorts": rcIgmpCacheExtnStaticPorts,
       "rcIgmpSnoopTraceTable": rcIgmpSnoopTraceTable,
       "rcIgmpSnoopTraceEntry": rcIgmpSnoopTraceEntry,
       "rcIgmpSnoopGrpAddr": rcIgmpSnoopGrpAddr,
       "rcIgmpSnoopSrcAddr": rcIgmpSnoopSrcAddr,
       "rcIgmpSnoopOutVlan": rcIgmpSnoopOutVlan,
       "rcIgmpSnoopInPort": rcIgmpSnoopInPort,
       "rcIgmpSnoopInVlan": rcIgmpSnoopInVlan,
       "rcIgmpSnoopOutPort": rcIgmpSnoopOutPort,
       "rcIgmpNewGroupTable": rcIgmpNewGroupTable,
       "rcIgmpNewGroupEntry": rcIgmpNewGroupEntry,
       "rcIgmpNewGroupIpAddress": rcIgmpNewGroupIpAddress,
       "rcIgmpNewGroupMembers": rcIgmpNewGroupMembers,
       "rcIgmpNewGroupInPort": rcIgmpNewGroupInPort,
       "rcIgmpNewGroupExpiration": rcIgmpNewGroupExpiration,
       "rcIgmpNewGroupIfIndex": rcIgmpNewGroupIfIndex,
       "rcIgmpNewGroupUserId": rcIgmpNewGroupUserId,
       "rcIgmpNewGroupMemberState": rcIgmpNewGroupMemberState,
       "rcIgmpNewGroupSessionTime": rcIgmpNewGroupSessionTime,
       "rcIgmpMvrGroupTable": rcIgmpMvrGroupTable,
       "rcIgmpMvrGroupEntry": rcIgmpMvrGroupEntry,
       "rcIgmpMvrGroupGroupAddress": rcIgmpMvrGroupGroupAddress,
       "rcIgmpMvrGroupVlanId": rcIgmpMvrGroupVlanId,
       "rcIgmpMvrGroupIgmpVersion": rcIgmpMvrGroupIgmpVersion,
       "rcIgmpMvrGroupLivingTime": rcIgmpMvrGroupLivingTime,
       "rcIgmpMvrVlanTable": rcIgmpMvrVlanTable,
       "rcIgmpMvrVlanEntry": rcIgmpMvrVlanEntry,
       "rcIgmpMvrVlanMvrVlanId": rcIgmpMvrVlanMvrVlanId,
       "rcIgmpMvrVlanMvrVlanProxy": rcIgmpMvrVlanMvrVlanProxy,
       "rcIgmpMvrVlanSourcePort": rcIgmpMvrVlanSourcePort,
       "rcIgmpMvrVlanSourceAddress": rcIgmpMvrVlanSourceAddress,
       "rcIgmpMvrReceiverTable": rcIgmpMvrReceiverTable,
       "rcIgmpMvrReceiverEntry": rcIgmpMvrReceiverEntry,
       "rcIgmpMvrReceiverVlanId": rcIgmpMvrReceiverVlanId,
       "rcIgmpMvrReceiverRowStatus": rcIgmpMvrReceiverRowStatus,
       "rcUserSetTime": rcUserSetTime,
       "rcUserSetTimeYear": rcUserSetTimeYear,
       "rcUserSetTimeMonth": rcUserSetTimeMonth,
       "rcUserSetTimeDate": rcUserSetTimeDate,
       "rcUserSetTimeHour": rcUserSetTimeHour,
       "rcUserSetTimeMinute": rcUserSetTimeMinute,
       "rcUserSetTimeSecond": rcUserSetTimeSecond,
       "rcL2Redundancy": rcL2Redundancy,
       "rcL2RedundancyHaCpuState": rcL2RedundancyHaCpuState,
       "rcL2RedundancyHaEvent": rcL2RedundancyHaEvent,
       "rcL2RedundancyEnable": rcL2RedundancyEnable,
       "rcL2RedundancyStandbyCpu": rcL2RedundancyStandbyCpu,
       "rcNtp": rcNtp,
       "rcNtpGlobal": rcNtpGlobal,
       "rcNtpGlobalEnable": rcNtpGlobalEnable,
       "rcNtpGlobalInterval": rcNtpGlobalInterval,
       "rcNtpServerTable": rcNtpServerTable,
       "rcNtpServerEntry": rcNtpServerEntry,
       "rcNtpServerAddress": rcNtpServerAddress,
       "rcNtpServerEnable": rcNtpServerEnable,
       "rcNtpServerAuthentication": rcNtpServerAuthentication,
       "rcNtpServerKeyId": rcNtpServerKeyId,
       "rcNtpServerAccessAttempts": rcNtpServerAccessAttempts,
       "rcNtpServerAccessSuccess": rcNtpServerAccessSuccess,
       "rcNtpServerAccessFailure": rcNtpServerAccessFailure,
       "rcNtpServerRowStatus": rcNtpServerRowStatus,
       "rcNtpServerStratum": rcNtpServerStratum,
       "rcNtpServerVersion": rcNtpServerVersion,
       "rcNtpServerRootDelay": rcNtpServerRootDelay,
       "rcNtpServerPrecision": rcNtpServerPrecision,
       "rcNtpServerReachable": rcNtpServerReachable,
       "rcNtpServerSynchronized": rcNtpServerSynchronized,
       "rcNtpKeyTable": rcNtpKeyTable,
       "rcNtpKeyEntry": rcNtpKeyEntry,
       "rcNtpKeyId": rcNtpKeyId,
       "rcNtpKeySecret": rcNtpKeySecret,
       "rcNtpKeyRowStatus": rcNtpKeyRowStatus,
       "rcSsh": rcSsh,
       "rcSshGlobal": rcSshGlobal,
       "rcSshGlobalVersion": rcSshGlobalVersion,
       "rcSshGlobalPort": rcSshGlobalPort,
       "rcSshGlobalMaxSession": rcSshGlobalMaxSession,
       "rcSshGlobalTimeout": rcSshGlobalTimeout,
       "rcSshGlobalRsaKeySize": rcSshGlobalRsaKeySize,
       "rcSshGlobalDsaKeySize": rcSshGlobalDsaKeySize,
       "rcSshGlobalRsaAuth": rcSshGlobalRsaAuth,
       "rcSshGlobalDsaAuth": rcSshGlobalDsaAuth,
       "rcSshGlobalPassAuth": rcSshGlobalPassAuth,
       "rcSshGlobalKeyAction": rcSshGlobalKeyAction,
       "rcSshGlobalEnable": rcSshGlobalEnable,
       "rcSshGlobalHostIpAddr": rcSshGlobalHostIpAddr,
       "rcSslMipTable": rcSslMipTable,
       "rcSslMipTableEntry": rcSslMipTableEntry,
       "rcSslMipSlot": rcSslMipSlot,
       "rcSslMipMip": rcSslMipMip,
       "rcSvlan": rcSvlan,
       "rcSvlanGlobal": rcSvlanGlobal,
       "rcSvlanActiveLevel": rcSvlanActiveLevel,
       "rcSvlanTable": rcSvlanTable,
       "rcSvlanEntry": rcSvlanEntry,
       "rcSvlanId": rcSvlanId,
       "rcSvlanLevel": rcSvlanLevel,
       "rcSvlanEtherType": rcSvlanEtherType,
       "rcTengEnet": rcTengEnet,
       "rcTengEnetStats": rcTengEnetStats,
       "rcTengDot3StatsTable": rcTengDot3StatsTable,
       "rcTengDot3StatsEntry": rcTengDot3StatsEntry,
       "rcTengDot3StatsIndex": rcTengDot3StatsIndex,
       "rcTengDot3StatsAlignmentErrors": rcTengDot3StatsAlignmentErrors,
       "rcTengDot3StatsFCSErrors": rcTengDot3StatsFCSErrors,
       "rcTengDot3StatsSingleCollisionFrames": rcTengDot3StatsSingleCollisionFrames,
       "rcTengDot3StatsMultipleCollisionFrames": rcTengDot3StatsMultipleCollisionFrames,
       "rcTengDot3StatsSQETestErrors": rcTengDot3StatsSQETestErrors,
       "rcTengDot3StatsDeferredTransmissions": rcTengDot3StatsDeferredTransmissions,
       "rcTengDot3StatsLateCollisions": rcTengDot3StatsLateCollisions,
       "rcTengDot3StatsExcessiveCollisions": rcTengDot3StatsExcessiveCollisions,
       "rcTengDot3StatsInternalMacTransmitErrors": rcTengDot3StatsInternalMacTransmitErrors,
       "rcTengDot3StatsCarrierSenseErrors": rcTengDot3StatsCarrierSenseErrors,
       "rcTengDot3StatsFrameTooLongs": rcTengDot3StatsFrameTooLongs,
       "rcTengDot3StatsInternalMacReceiveErrors": rcTengDot3StatsInternalMacReceiveErrors,
       "rcTengDot3StatsEtherChipSet": rcTengDot3StatsEtherChipSet,
       "rcTengDot3StatsLinkFailures": rcTengDot3StatsLinkFailures,
       "rcTengDot3StatsPacketErrors": rcTengDot3StatsPacketErrors,
       "rcTengDot3StatsCarrierErrors": rcTengDot3StatsCarrierErrors,
       "rcTengDot3StatsLinkInactiveErrors": rcTengDot3StatsLinkInactiveErrors,
       "rcTengDot3StatsInFlowCtrlPkts": rcTengDot3StatsInFlowCtrlPkts,
       "rcTengDot3StatsOutFlowCtrlPkts": rcTengDot3StatsOutFlowCtrlPkts,
       "rcTengDot3StatsFrameTooShorts": rcTengDot3StatsFrameTooShorts,
       "rcTengStatTable": rcTengStatTable,
       "rcTengStatEntry": rcTengStatEntry,
       "rcTengStatIndex": rcTengStatIndex,
       "rcTengStatBridgeInUnicastFrames": rcTengStatBridgeInUnicastFrames,
       "rcTengStatBridgeInMulticastFrames": rcTengStatBridgeInMulticastFrames,
       "rcTengStatBridgeInBroadcastFrames": rcTengStatBridgeInBroadcastFrames,
       "rcTengStatBridgeInDiscards": rcTengStatBridgeInDiscards,
       "rcTengStatBridgeOutUnicastFrames": rcTengStatBridgeOutUnicastFrames,
       "rcTengStatBridgeOutMulticastFrames": rcTengStatBridgeOutMulticastFrames,
       "rcTengStatBridgeOutBroadcastFrames": rcTengStatBridgeOutBroadcastFrames,
       "rcTengStatRouteInUnicastFrames": rcTengStatRouteInUnicastFrames,
       "rcTengStatRouteInMulticastFrames": rcTengStatRouteInMulticastFrames,
       "rcTengStatRouteInDiscards": rcTengStatRouteInDiscards,
       "rcTengStatRouteOutUnicastFrames": rcTengStatRouteOutUnicastFrames,
       "rcTengStatRouteOutMulticastFrames": rcTengStatRouteOutMulticastFrames,
       "rcTengStatStgForwardTransitions": rcTengStatStgForwardTransitions,
       "rcTengStatStgInConfigBpdus": rcTengStatStgInConfigBpdus,
       "rcTengStatStgInTcnBpdus": rcTengStatStgInTcnBpdus,
       "rcTengStatStgInBadBpdus": rcTengStatStgInBadBpdus,
       "rcTengStatStgOutConfigBpdus": rcTengStatStgOutConfigBpdus,
       "rcTengStatStgOutTcnBpdus": rcTengStatStgOutTcnBpdus,
       "rcTengStatBridgeOutFrames": rcTengStatBridgeOutFrames,
       "rcTengIfTable": rcTengIfTable,
       "rcTengIfEntry": rcTengIfEntry,
       "rcTengIfIndex": rcTengIfIndex,
       "rcTengIfDescr": rcTengIfDescr,
       "rcTengIfType": rcTengIfType,
       "rcTengIfMtu": rcTengIfMtu,
       "rcTengIfSpeed": rcTengIfSpeed,
       "rcTengIfPhysAddress": rcTengIfPhysAddress,
       "rcTengIfAdminStatus": rcTengIfAdminStatus,
       "rcTengIfOperStatus": rcTengIfOperStatus,
       "rcTengIfLastChange": rcTengIfLastChange,
       "rcTengIfInOctets": rcTengIfInOctets,
       "rcTengIfInUcastPkts": rcTengIfInUcastPkts,
       "rcTengIfInNUcastPkts": rcTengIfInNUcastPkts,
       "rcTengIfInDiscards": rcTengIfInDiscards,
       "rcTengIfInErrors": rcTengIfInErrors,
       "rcTengIfInUnknownProtos": rcTengIfInUnknownProtos,
       "rcTengIfOutOctets": rcTengIfOutOctets,
       "rcTengIfOutUcastPkts": rcTengIfOutUcastPkts,
       "rcTengIfOutNUcastPkts": rcTengIfOutNUcastPkts,
       "rcTengIfOutDiscards": rcTengIfOutDiscards,
       "rcTengIfOutErrors": rcTengIfOutErrors,
       "rcTengIfOutQLen": rcTengIfOutQLen,
       "rcTengIfSpecific": rcTengIfSpecific,
       "rcTengIfXTable": rcTengIfXTable,
       "rcTengIfXEntry": rcTengIfXEntry,
       "rcTengIfXIndex": rcTengIfXIndex,
       "rcTengIfName": rcTengIfName,
       "rcTengIfInMulticastPkts": rcTengIfInMulticastPkts,
       "rcTengIfInBroadcastPkts": rcTengIfInBroadcastPkts,
       "rcTengIfOutMulticastPkts": rcTengIfOutMulticastPkts,
       "rcTengIfOutBroadcastPkts": rcTengIfOutBroadcastPkts,
       "rcTengIfHCInOctets": rcTengIfHCInOctets,
       "rcTengIfHCInUcastPkts": rcTengIfHCInUcastPkts,
       "rcTengIfHCInMulticastPkts": rcTengIfHCInMulticastPkts,
       "rcTengIfHCInBroadcastPkts": rcTengIfHCInBroadcastPkts,
       "rcTengIfHCOutOctets": rcTengIfHCOutOctets,
       "rcTengIfHCOutUcastPkts": rcTengIfHCOutUcastPkts,
       "rcTengIfHCOutMulticastPkts": rcTengIfHCOutMulticastPkts,
       "rcTengIfHCOutBroadcastPkts": rcTengIfHCOutBroadcastPkts,
       "rcTengIfLinkUpDownTrapEnable": rcTengIfLinkUpDownTrapEnable,
       "rcTengIfHighSpeed": rcTengIfHighSpeed,
       "rcTengIfPromiscuousMode": rcTengIfPromiscuousMode,
       "rcTengIfConnectorPresent": rcTengIfConnectorPresent,
       "rcWisTrap": rcWisTrap,
       "rcWisSonetTrapType": rcWisSonetTrapType,
       "rcWisSonetTrapIndication": rcWisSonetTrapIndication,
       "rcRec": rcRec,
       "rcRecReservTable": rcRecReservTable,
       "rcRecReservTablEntry": rcRecReservTablEntry,
       "rcRecReservRecordType": rcRecReservRecordType,
       "rcRecReservUsed": rcRecReservUsed,
       "rcRecReservReserved": rcRecReservReserved,
       "rcRecReservNewReserved": rcRecReservNewReserved,
       "rcRecReservDefReserved": rcRecReservDefReserved,
       "rcLacp": rcLacp,
       "rcLacpGlobal": rcLacpGlobal,
       "rcLacpGlobalEnable": rcLacpGlobalEnable,
       "rcLacpGlobalSystemPriority": rcLacpGlobalSystemPriority,
       "rcLacpGlobalFastPeriodicTime": rcLacpGlobalFastPeriodicTime,
       "rcLacpGlobalSlowPeriodicTime": rcLacpGlobalSlowPeriodicTime,
       "rcLacpGlobalTimeoutScale": rcLacpGlobalTimeoutScale,
       "rcLacpGlobalAggrWaitTime": rcLacpGlobalAggrWaitTime,
       "rcLacpGlobalVlacpEnable": rcLacpGlobalVlacpEnable,
       "rcLacpGlobalFastPeriodicTimeOper": rcLacpGlobalFastPeriodicTimeOper,
       "rcLacpGlobalSlowPeriodicTimeOper": rcLacpGlobalSlowPeriodicTimeOper,
       "rcLacpGlobalTimeoutScaleOper": rcLacpGlobalTimeoutScaleOper,
       "rcLacpGlobalAggrWaitTimeOper": rcLacpGlobalAggrWaitTimeOper,
       "rcLacpGlobalSmltSysId": rcLacpGlobalSmltSysId,
       "rcLacpGlobalVlacpHoldTime": rcLacpGlobalVlacpHoldTime,
       "rcLicense": rcLicense,
       "rcLicenseNumber": rcLicenseNumber,
       "rcLicenseBitMap": rcLicenseBitMap,
       "rcEap": rcEap,
       "rcFdb": rcFdb,
       "rcGlobalMacFilterTable": rcGlobalMacFilterTable,
       "rcGlobalMacFilterEntry": rcGlobalMacFilterEntry,
       "rcGlobalMacFilterAddress": rcGlobalMacFilterAddress,
       "rcGlobalMacFilterRowStatus": rcGlobalMacFilterRowStatus,
       "rcIpv6": rcIpv6,
       "rcIpv6Mib": rcIpv6Mib,
       "rcIpv6Notifications": rcIpv6Notifications,
       "rcIpv6Objects": rcIpv6Objects,
       "rcIpv6Scalars": rcIpv6Scalars,
       "rcIpv6IcmpErrorInterval": rcIpv6IcmpErrorInterval,
       "rcIpv6MulticastAdminStatus": rcIpv6MulticastAdminStatus,
       "rcIpv6IcmpNetUnreach": rcIpv6IcmpNetUnreach,
       "rcIpv6IcmpRedirectMsg": rcIpv6IcmpRedirectMsg,
       "rcIpv6IcmpErrorQuota": rcIpv6IcmpErrorQuota,
       "rcIpv6PrefixListTableSize": rcIpv6PrefixListTableSize,
       "rcIpv6InterfaceTable": rcIpv6InterfaceTable,
       "rcIpv6InterfaceEntry": rcIpv6InterfaceEntry,
       "rcIpv6InterfaceIfIndex": rcIpv6InterfaceIfIndex,
       "rcIpv6InterfaceIdentifier": rcIpv6InterfaceIdentifier,
       "rcIpv6InterfaceIdentifierLength": rcIpv6InterfaceIdentifierLength,
       "rcIpv6InterfaceDescr": rcIpv6InterfaceDescr,
       "rcIpv6InterfaceVlanId": rcIpv6InterfaceVlanId,
       "rcIpv6InterfaceType": rcIpv6InterfaceType,
       "rcIpv6InterfaceReasmMaxSize": rcIpv6InterfaceReasmMaxSize,
       "rcIpv6InterfacePhysAddress": rcIpv6InterfacePhysAddress,
       "rcIpv6InterfaceAdminStatus": rcIpv6InterfaceAdminStatus,
       "rcIpv6InterfaceOperStatus": rcIpv6InterfaceOperStatus,
       "rcIpv6InterfaceReachableTime": rcIpv6InterfaceReachableTime,
       "rcIpv6InterfaceRetransmitTime": rcIpv6InterfaceRetransmitTime,
       "rcIpv6InterfaceMulticastAdminStatus": rcIpv6InterfaceMulticastAdminStatus,
       "rcIpv6InterfaceRowStatus": rcIpv6InterfaceRowStatus,
       "rcIpv6InterfaceDhcpEnabled": rcIpv6InterfaceDhcpEnabled,
       "rcIpv6InterfaceMacOffset": rcIpv6InterfaceMacOffset,
       "rcIpv6AddressTable": rcIpv6AddressTable,
       "rcIpv6AddressEntry": rcIpv6AddressEntry,
       "rcIpv6AddressIfIndex": rcIpv6AddressIfIndex,
       "rcIpv6AddressAddr": rcIpv6AddressAddr,
       "rcIpv6AddressType": rcIpv6AddressType,
       "rcIpv6AddressPrefixLength": rcIpv6AddressPrefixLength,
       "rcIpv6AddressPrefix": rcIpv6AddressPrefix,
       "rcIpv6AddressOrigin": rcIpv6AddressOrigin,
       "rcIpv6AddressStatus": rcIpv6AddressStatus,
       "rcIpv6AddressCreated": rcIpv6AddressCreated,
       "rcIpv6AddressLastChanged": rcIpv6AddressLastChanged,
       "rcIpv6AddressRowStatus": rcIpv6AddressRowStatus,
       "rcIpv6PrefixTable": rcIpv6PrefixTable,
       "rcIpv6PrefixEntry": rcIpv6PrefixEntry,
       "rcIpv6PrefixIfIndex": rcIpv6PrefixIfIndex,
       "rcIpv6PrefixAddr": rcIpv6PrefixAddr,
       "rcIpv6PrefixLength": rcIpv6PrefixLength,
       "rcIpv6PrefixVlanId": rcIpv6PrefixVlanId,
       "rcIpv6PrefixUseDefaultVal": rcIpv6PrefixUseDefaultVal,
       "rcIpv6PrefixValidLife": rcIpv6PrefixValidLife,
       "rcIpv6PrefixPreferredLife": rcIpv6PrefixPreferredLife,
       "rcIpv6PrefixAtValidLife": rcIpv6PrefixAtValidLife,
       "rcIpv6PrefixAtPreferredLife": rcIpv6PrefixAtPreferredLife,
       "rcIpv6PrefixInfinite": rcIpv6PrefixInfinite,
       "rcIpv6PrefixOnLinkFlag": rcIpv6PrefixOnLinkFlag,
       "rcIpv6PrefixAutoFlag": rcIpv6PrefixAutoFlag,
       "rcIpv6PrefixAddressEui": rcIpv6PrefixAddressEui,
       "rcIpv6PrefixNoAdvertise": rcIpv6PrefixNoAdvertise,
       "rcIpv6PrefixRowStatus": rcIpv6PrefixRowStatus,
       "rcIpv6PrefixValidLifetime": rcIpv6PrefixValidLifetime,
       "rcIpv6PrefixPreferredLifetime": rcIpv6PrefixPreferredLifetime,
       "rcIpv6RouterAdvertTable": rcIpv6RouterAdvertTable,
       "rcIpv6RouterAdvertEntry": rcIpv6RouterAdvertEntry,
       "rcIpv6RouterAdvertIfIndex": rcIpv6RouterAdvertIfIndex,
       "rcIpv6RouterAdvertSendAdverts": rcIpv6RouterAdvertSendAdverts,
       "rcIpv6RouterAdvertUseDefaultVal": rcIpv6RouterAdvertUseDefaultVal,
       "rcIpv6RouterAdvertMaxInterval": rcIpv6RouterAdvertMaxInterval,
       "rcIpv6RouterAdvertMinInterval": rcIpv6RouterAdvertMinInterval,
       "rcIpv6RouterAdvertReachableTime": rcIpv6RouterAdvertReachableTime,
       "rcIpv6RouterAdvertRetransmitTimer": rcIpv6RouterAdvertRetransmitTimer,
       "rcIpv6RouterAdvertDefaultLifeTime": rcIpv6RouterAdvertDefaultLifeTime,
       "rcIpv6RouterAdvertCurHopLimit": rcIpv6RouterAdvertCurHopLimit,
       "rcIpv6RouterAdvertManagedFlag": rcIpv6RouterAdvertManagedFlag,
       "rcIpv6RouterAdvertOtherConfigFlag": rcIpv6RouterAdvertOtherConfigFlag,
       "rcIpv6RouterAdvertDadNsNum": rcIpv6RouterAdvertDadNsNum,
       "rcIpv6RouterAdvertLinkMTU": rcIpv6RouterAdvertLinkMTU,
       "rcIpv6StaticRouteTable": rcIpv6StaticRouteTable,
       "rcIpv6StaticRouteEntry": rcIpv6StaticRouteEntry,
       "rcIpv6StaticRouteDest": rcIpv6StaticRouteDest,
       "rcIpv6StaticRoutePrefixLength": rcIpv6StaticRoutePrefixLength,
       "rcIpv6StaticRouteNextHop": rcIpv6StaticRouteNextHop,
       "rcIpv6StaticRouteIfIndex": rcIpv6StaticRouteIfIndex,
       "rcIpv6StaticRouteDistance": rcIpv6StaticRouteDistance,
       "rcIpv6StaticRouteStatus": rcIpv6StaticRouteStatus,
       "rcIpv6StaticRoutePreference": rcIpv6StaticRoutePreference,
       "rcIpv6StaticRouteEnable": rcIpv6StaticRouteEnable,
       "rcIpv6StaticRouteRowStatus": rcIpv6StaticRouteRowStatus,
       "rcIpv6NetToPhysicalTable": rcIpv6NetToPhysicalTable,
       "rcIpv6NetToPhysicalEntry": rcIpv6NetToPhysicalEntry,
       "rcIpv6NetToPhysicalIfIndex": rcIpv6NetToPhysicalIfIndex,
       "rcIpv6NetToPhysicalNetAddress": rcIpv6NetToPhysicalNetAddress,
       "rcIpv6NetToPhysicalPhysAddress": rcIpv6NetToPhysicalPhysAddress,
       "rcIpv6NetToPhysicalInterface": rcIpv6NetToPhysicalInterface,
       "rcIpv6NetToPhysicalLastUpdated": rcIpv6NetToPhysicalLastUpdated,
       "rcIpv6NetToPhysicalType": rcIpv6NetToPhysicalType,
       "rcIpv6NetToPhysicalState": rcIpv6NetToPhysicalState,
       "rcIpv6NetToPhysicalRowStatus": rcIpv6NetToPhysicalRowStatus,
       "rcIpv6PrefixListTable": rcIpv6PrefixListTable,
       "rcIpv6PrefixListEntry": rcIpv6PrefixListEntry,
       "rcIpv6PrefixListId": rcIpv6PrefixListId,
       "rcIpv6PrefixListPrefix": rcIpv6PrefixListPrefix,
       "rcIpv6PrefixListPrefixMaskLen": rcIpv6PrefixListPrefixMaskLen,
       "rcIpv6PrefixListMaskLenFrom": rcIpv6PrefixListMaskLenFrom,
       "rcIpv6PrefixListMaskLenUpto": rcIpv6PrefixListMaskLenUpto,
       "rcIpv6PrefixListName": rcIpv6PrefixListName,
       "rcIpv6PrefixListRowStatus": rcIpv6PrefixListRowStatus,
       "rcIpv6ConfDhcpRelayTable": rcIpv6ConfDhcpRelayTable,
       "rcIpv6ConfDhcpRelayEntry": rcIpv6ConfDhcpRelayEntry,
       "rcIpv6ConfDhcpIfIndex": rcIpv6ConfDhcpIfIndex,
       "rcIpv6ConfDhcpMaxHop": rcIpv6ConfDhcpMaxHop,
       "rcIpv6ConfDhcpRemoteIdEnabled": rcIpv6ConfDhcpRemoteIdEnabled,
       "rcIpv6ConfDhcpNumRequests": rcIpv6ConfDhcpNumRequests,
       "rcIpv6ConfDhcpNumReplies": rcIpv6ConfDhcpNumReplies,
       "rcIpv6ConfDhcpRowStatus": rcIpv6ConfDhcpRowStatus,
       "rcIpv6DhcpForwardTable": rcIpv6DhcpForwardTable,
       "rcIpv6DhcpForwardEntry": rcIpv6DhcpForwardEntry,
       "rcIpv6DhcpForwardAgentAddr": rcIpv6DhcpForwardAgentAddr,
       "rcIpv6DhcpForwardServerAddr": rcIpv6DhcpForwardServerAddr,
       "rcIpv6DhcpForwardEnabled": rcIpv6DhcpForwardEnabled,
       "rcIpv6DhcpForwardRowStatus": rcIpv6DhcpForwardRowStatus,
       "rcIpv6RadiusServTable": rcIpv6RadiusServTable,
       "rcIpv6RadiusServEntry": rcIpv6RadiusServEntry,
       "rcIpv6RadiusServAddress": rcIpv6RadiusServAddress,
       "rcIpv6RadiusServUsedBy": rcIpv6RadiusServUsedBy,
       "rcIpv6RadiusServPriority": rcIpv6RadiusServPriority,
       "rcIpv6RadiusServTimeOut": rcIpv6RadiusServTimeOut,
       "rcIpv6RadiusServEnable": rcIpv6RadiusServEnable,
       "rcIpv6RadiusServMaxRetries": rcIpv6RadiusServMaxRetries,
       "rcIpv6RadiusServUdpPort": rcIpv6RadiusServUdpPort,
       "rcIpv6RadiusServSecretKey": rcIpv6RadiusServSecretKey,
       "rcIpv6RadiusServAccessRequests": rcIpv6RadiusServAccessRequests,
       "rcIpv6RadiusServAccessAccepts": rcIpv6RadiusServAccessAccepts,
       "rcIpv6RadiusServAccessRejects": rcIpv6RadiusServAccessRejects,
       "rcIpv6RadiusServBadResponses": rcIpv6RadiusServBadResponses,
       "rcIpv6RadiusServPendingRequests": rcIpv6RadiusServPendingRequests,
       "rcIpv6RadiusServClientRetries": rcIpv6RadiusServClientRetries,
       "rcIpv6RadiusServAcctEnable": rcIpv6RadiusServAcctEnable,
       "rcIpv6RadiusServAcctUdpPort": rcIpv6RadiusServAcctUdpPort,
       "rcIpv6RadiusServAcctOnRequests": rcIpv6RadiusServAcctOnRequests,
       "rcIpv6RadiusServAcctOffRequests": rcIpv6RadiusServAcctOffRequests,
       "rcIpv6RadiusServAcctStartRequests": rcIpv6RadiusServAcctStartRequests,
       "rcIpv6RadiusServAcctStopRequests": rcIpv6RadiusServAcctStopRequests,
       "rcIpv6RadiusServAcctInterimRequests": rcIpv6RadiusServAcctInterimRequests,
       "rcIpv6RadiusServAcctBadResponses": rcIpv6RadiusServAcctBadResponses,
       "rcIpv6RadiusServAcctPendingRequests": rcIpv6RadiusServAcctPendingRequests,
       "rcIpv6RadiusServAcctClientRetries": rcIpv6RadiusServAcctClientRetries,
       "rcIpv6RadiusServNasIpAddress": rcIpv6RadiusServNasIpAddress,
       "rcIpv6RadiusServRoundTripTime": rcIpv6RadiusServRoundTripTime,
       "rcIpv6RadiusServAccessChallanges": rcIpv6RadiusServAccessChallanges,
       "rcIpv6RadiusServSourceIpAddr": rcIpv6RadiusServSourceIpAddr,
       "rcIpv6RadiusServRowStatus": rcIpv6RadiusServRowStatus,
       "rcIsis": rcIsis,
       "rcIsisGlobalGroup": rcIsisGlobalGroup,
       "rcIsisGlobalAreaAuthType": rcIsisGlobalAreaAuthType,
       "rcIsisGlobalAreaKeyId": rcIsisGlobalAreaKeyId,
       "rcIsisGlobalAreaAuthKey": rcIsisGlobalAreaAuthKey,
       "rcIsisGlobalDomainAuthType": rcIsisGlobalDomainAuthType,
       "rcIsisGlobalDomainKeyId": rcIsisGlobalDomainKeyId,
       "rcIsisGlobalDomainAuthKey": rcIsisGlobalDomainAuthKey,
       "rcIsisGlobalCsnpInt": rcIsisGlobalCsnpInt,
       "rcIsisGlobalRxmtLspInt": rcIsisGlobalRxmtLspInt,
       "rcIsisGlobalPSNPInterval": rcIsisGlobalPSNPInterval,
       "rcIsisGlobalHostName": rcIsisGlobalHostName,
       "rcIsisGlobalSpfDelay": rcIsisGlobalSpfDelay,
       "rcIsisGlobalControlVlan": rcIsisGlobalControlVlan,
       "rcIsisGlobalIpSourceAddress": rcIsisGlobalIpSourceAddress,
       "rcIsisGlobalIpSourceAddressType": rcIsisGlobalIpSourceAddressType,
       "rcIsisCircuitTable": rcIsisCircuitTable,
       "rcIsisCircuitEntry": rcIsisCircuitEntry,
       "rcIsisCircuitIndex": rcIsisCircuitIndex,
       "rcIsisCircuitType": rcIsisCircuitType,
       "rcIsisCircuitAuthType": rcIsisCircuitAuthType,
       "rcIsisCircuitKeyId": rcIsisCircuitKeyId,
       "rcIsisCircuitAuthKey": rcIsisCircuitAuthKey,
       "rcIsisCircuitAddr": rcIsisCircuitAddr,
       "rcIsisCircuitMask": rcIsisCircuitMask,
       "rcIsisCircuitOperState": rcIsisCircuitOperState,
       "rcIsisCircuitNumAdj": rcIsisCircuitNumAdj,
       "rcIsisCircuitNumUpAdj": rcIsisCircuitNumUpAdj,
       "rcIsisStats": rcIsisStats,
       "rcIsisStatsClearErrorCounters": rcIsisStatsClearErrorCounters,
       "rcIsisStatsClearPacketCounters": rcIsisStatsClearPacketCounters,
       "rcIsisPlsbTable": rcIsisPlsbTable,
       "rcIsisPlsbEntry": rcIsisPlsbEntry,
       "rcIsisPlsbId": rcIsisPlsbId,
       "rcIsisPlsbRowStatus": rcIsisPlsbRowStatus,
       "rcIsisPlsbNodeNickName": rcIsisPlsbNodeNickName,
       "rcIsisPlsbVlans": rcIsisPlsbVlans,
       "rcIsisPlsbLsdbTrap": rcIsisPlsbLsdbTrap,
       "rcIsisPlsbState": rcIsisPlsbState,
       "rcIsisPlsbIpShortcut": rcIsisPlsbIpShortcut,
       "rcIsisPlsbPrimaryVlan": rcIsisPlsbPrimaryVlan,
       "rcIsisPlsbSmltSplitBEB": rcIsisPlsbSmltSplitBEB,
       "rcIsisPlsbSmltBmac": rcIsisPlsbSmltBmac,
       "rcIsisPlsbSmltPeerSysId": rcIsisPlsbSmltPeerSysId,
       "rcIsisCircuitPlsbTable": rcIsisCircuitPlsbTable,
       "rcIsisCircuitPlsbEntry": rcIsisCircuitPlsbEntry,
       "rcIsisCircuitPlsbIndex": rcIsisCircuitPlsbIndex,
       "rcIsisCircuitPlsbId": rcIsisCircuitPlsbId,
       "rcIsisCircuitPlsbRowStatus": rcIsisCircuitPlsbRowStatus,
       "rcIsisCircuitPlsbState": rcIsisCircuitPlsbState,
       "rcIsisCircuitPlsbType": rcIsisCircuitPlsbType,
       "rcIsisCircuitPlsbL1Metric": rcIsisCircuitPlsbL1Metric,
       "rcIsisCircuitPlsbWideL1Metric": rcIsisCircuitPlsbWideL1Metric,
       "rcIsisPlsbUnicastFibTable": rcIsisPlsbUnicastFibTable,
       "rcIsisPlsbUnicastFibEntry": rcIsisPlsbUnicastFibEntry,
       "rcIsisPlsbUnicastFibDestinationMacAddr": rcIsisPlsbUnicastFibDestinationMacAddr,
       "rcIsisPlsbUnicastFibVlan": rcIsisPlsbUnicastFibVlan,
       "rcIsisPlsbUnicastFibSysId": rcIsisPlsbUnicastFibSysId,
       "rcIsisPlsbUnicastFibOutgoingPort": rcIsisPlsbUnicastFibOutgoingPort,
       "rcIsisPlsbMulticastFibTable": rcIsisPlsbMulticastFibTable,
       "rcIsisPlsbMulticastFibEntry": rcIsisPlsbMulticastFibEntry,
       "rcIsisPlsbMulticastFibMcastDestMacAddr": rcIsisPlsbMulticastFibMcastDestMacAddr,
       "rcIsisPlsbMulticastFibVlan": rcIsisPlsbMulticastFibVlan,
       "rcIsisPlsbMulticastFibSysId": rcIsisPlsbMulticastFibSysId,
       "rcIsisPlsbMulticastFibIsid": rcIsisPlsbMulticastFibIsid,
       "rcIsisPlsbMulticastFibOutgoingPorts": rcIsisPlsbMulticastFibOutgoingPorts,
       "rcIsisPlsbIsidTable": rcIsisPlsbIsidTable,
       "rcIsisPlsbIsidEntry": rcIsisPlsbIsidEntry,
       "rcIsisPlsbIsidSourceName": rcIsisPlsbIsidSourceName,
       "rcIsisPlsbIsidId": rcIsisPlsbIsidId,
       "rcIsisPlsbIsidSysId": rcIsisPlsbIsidSysId,
       "rcIsisPlsbIsidType": rcIsisPlsbIsidType,
       "rcIsisTrap": rcIsisTrap,
       "rcIsisLocalLspId": rcIsisLocalLspId,
       "rcIsisLocall1Metric": rcIsisLocall1Metric,
       "rcIsisNgbLspId": rcIsisNgbLspId,
       "rcIsisNgbl1Metric": rcIsisNgbl1Metric,
       "rcIsisPlsbTrapType": rcIsisPlsbTrapType,
       "rcIsisLocalSysId": rcIsisLocalSysId,
       "rcIsisLocalInterface": rcIsisLocalInterface,
       "rcIsisTrapIndicator": rcIsisTrapIndicator,
       "rcIsisLocalNickname": rcIsisLocalNickname,
       "rcIsisNgbNickname": rcIsisNgbNickname,
       "rcIsisNgbSysId": rcIsisNgbSysId,
       "rcIsisLocalPrimaryBvid": rcIsisLocalPrimaryBvid,
       "rcIsisLocalPrimaryTieBrkAlg": rcIsisLocalPrimaryTieBrkAlg,
       "rcIsisLocalSecondaryBvid": rcIsisLocalSecondaryBvid,
       "rcIsisLocalSecondaryTieBrkAlg": rcIsisLocalSecondaryTieBrkAlg,
       "rcIsisNgbPrimaryBvid": rcIsisNgbPrimaryBvid,
       "rcIsisNgbPrimaryTieBrkAlg": rcIsisNgbPrimaryTieBrkAlg,
       "rcIsisNgbSecondaryBvid": rcIsisNgbSecondaryBvid,
       "rcIsisNgbSecondaryTieBrkAlg": rcIsisNgbSecondaryTieBrkAlg,
       "rcIsisLocalVirtualBmac": rcIsisLocalVirtualBmac,
       "rcIsisPeerVirtualBmac": rcIsisPeerVirtualBmac,
       "rcIsisSysId": rcIsisSysId,
       "rcIsisSmltPeerSysId": rcIsisSmltPeerSysId,
       "rcIsisAdjState": rcIsisAdjState,
       "rcIsisDuplicateNnameCounter": rcIsisDuplicateNnameCounter,
       "rcIsisLocalBvidCounter": rcIsisLocalBvidCounter,
       "rcIsisNgbBvidCounter": rcIsisNgbBvidCounter,
       "rcIsisLocalSmltSplitBeb": rcIsisLocalSmltSplitBeb,
       "rcIsisPeerSmltSplitBeb": rcIsisPeerSmltSplitBeb,
       "rcIsisLocalHostName": rcIsisLocalHostName,
       "rcIsisNgbHostName": rcIsisNgbHostName,
       "rcIsisPrevInterface": rcIsisPrevInterface,
       "rcIsisAdjTable": rcIsisAdjTable,
       "rcIsisAdjEntry": rcIsisAdjEntry,
       "rcIsisAdjCircIndex": rcIsisAdjCircIndex,
       "rcIsisAdjIndex": rcIsisAdjIndex,
       "rcIsisAdjHostName": rcIsisAdjHostName,
       "rcIsisAdjIfIndex": rcIsisAdjIfIndex,
       "rcIsisLSPTable": rcIsisLSPTable,
       "rcIsisLSPEntry": rcIsisLSPEntry,
       "rcIsisLSPLevel": rcIsisLSPLevel,
       "rcIsisLSPID": rcIsisLSPID,
       "rcIsisLSPSeq": rcIsisLSPSeq,
       "rcIsisLSPHostName": rcIsisLSPHostName,
       "rcIsisLSPNickName": rcIsisLSPNickName,
       "rcIsisLSPLifetimeRemain": rcIsisLSPLifetimeRemain,
       "rcIsisPlsbIpUnicastFibTable": rcIsisPlsbIpUnicastFibTable,
       "rcIsisPlsbIpUnicastFibEntry": rcIsisPlsbIpUnicastFibEntry,
       "rcIsisPlsbIpUnicastFibVrfId": rcIsisPlsbIpUnicastFibVrfId,
       "rcIsisPlsbIpUnicastFibDestinationIpAddrType": rcIsisPlsbIpUnicastFibDestinationIpAddrType,
       "rcIsisPlsbIpUnicastFibDestinationIpAddr": rcIsisPlsbIpUnicastFibDestinationIpAddr,
       "rcIsisPlsbIpUnicastFibDestinationMask": rcIsisPlsbIpUnicastFibDestinationMask,
       "rcIsisPlsbIpUnicastFibNextHopBmac": rcIsisPlsbIpUnicastFibNextHopBmac,
       "rcIsisPlsbIpUnicastFibVlan": rcIsisPlsbIpUnicastFibVlan,
       "rcIsisPlsbIpUnicastFibIsid": rcIsisPlsbIpUnicastFibIsid,
       "rcIsisPlsbIpUnicastFibNextHopName": rcIsisPlsbIpUnicastFibNextHopName,
       "rcIsisPlsbIpUnicastFibOutgoingPort": rcIsisPlsbIpUnicastFibOutgoingPort,
       "rcIsisPlsbIpUnicastFibPrefixCost": rcIsisPlsbIpUnicastFibPrefixCost,
       "rcIsisPlsbIpUnicastFibSpbmCost": rcIsisPlsbIpUnicastFibSpbmCost,
       "rcIsisPlsbUcastFibTable": rcIsisPlsbUcastFibTable,
       "rcIsisPlsbUcastFibEntry": rcIsisPlsbUcastFibEntry,
       "rcIsisPlsbUcastFibSysId": rcIsisPlsbUcastFibSysId,
       "rcIsisPlsbUcastFibVlan": rcIsisPlsbUcastFibVlan,
       "rcIsisPlsbUcastFibDestinationMacAddr": rcIsisPlsbUcastFibDestinationMacAddr,
       "rcIsisPlsbUcastFibOutgoingPort": rcIsisPlsbUcastFibOutgoingPort,
       "rcIsisPlsbUcastFibHostName": rcIsisPlsbUcastFibHostName,
       "rcIsisPlsbUcastFibCost": rcIsisPlsbUcastFibCost,
       "rcIsisPlsbMcastFibTable": rcIsisPlsbMcastFibTable,
       "rcIsisPlsbMcastFibEntry": rcIsisPlsbMcastFibEntry,
       "rcIsisPlsbMcastFibSysId": rcIsisPlsbMcastFibSysId,
       "rcIsisPlsbMcastFibVlan": rcIsisPlsbMcastFibVlan,
       "rcIsisPlsbMcastFibMcastDestMacAddr": rcIsisPlsbMcastFibMcastDestMacAddr,
       "rcIsisPlsbMcastFibIsid": rcIsisPlsbMcastFibIsid,
       "rcIsisPlsbMcastFibNickName": rcIsisPlsbMcastFibNickName,
       "rcIsisPlsbMcastFibType": rcIsisPlsbMcastFibType,
       "rcIsisPlsbMcastFibOutgoingPorts": rcIsisPlsbMcastFibOutgoingPorts,
       "rcIsisPlsbMcastFibHostName": rcIsisPlsbMcastFibHostName,
       "rcIsisPlsbNodeTable": rcIsisPlsbNodeTable,
       "rcIsisPlsbNodeEntry": rcIsisPlsbNodeEntry,
       "rcIsisPlsbNodeSysId": rcIsisPlsbNodeSysId,
       "rcIsisPlsbNodePrimaryParentSysId": rcIsisPlsbNodePrimaryParentSysId,
       "rcIsisPlsbNodePrimaryBvlan": rcIsisPlsbNodePrimaryBvlan,
       "rcIsisPlsbNodeSecondaryParentSysId": rcIsisPlsbNodeSecondaryParentSysId,
       "rcIsisPlsbNodeSecondaryBvlan": rcIsisPlsbNodeSecondaryBvlan,
       "rcIsisSpbmPortDropStatsTable": rcIsisSpbmPortDropStatsTable,
       "rcIsisSpbmPortDropStatsEntry": rcIsisSpbmPortDropStatsEntry,
       "rcIsisSpbmPortDropStatsPortIndex": rcIsisSpbmPortDropStatsPortIndex,
       "rcIsisSpbmPortDropStatsVlanId": rcIsisSpbmPortDropStatsVlanId,
       "rcIsisSpbmPortDropStatsVlanType": rcIsisSpbmPortDropStatsVlanType,
       "rcIsisSpbmPortDropStatsUnknownUcastSrcAddr": rcIsisSpbmPortDropStatsUnknownUcastSrcAddr,
       "rcIsisSpbmPortDropStatsRpfcUcastSrcAddr": rcIsisSpbmPortDropStatsRpfcUcastSrcAddr,
       "rcIsisSpbmPortDropStatsUnknownUcastDestAddr": rcIsisSpbmPortDropStatsUnknownUcastDestAddr,
       "rcIsisSpbmPortDropStatsUnknownMcastDestAddr": rcIsisSpbmPortDropStatsUnknownMcastDestAddr,
       "rcIsisSpbmPortDropStatsRpfcMcastSrcAddr": rcIsisSpbmPortDropStatsRpfcMcastSrcAddr,
       "rcIsisSpbmPortDropStatsLastDropMac": rcIsisSpbmPortDropStatsLastDropMac,
       "rcIsisSpbmPortDropStatsIsMacDestAddr": rcIsisSpbmPortDropStatsIsMacDestAddr,
       "rcIsisSpbmPortDropStatsLastDropMacHostName": rcIsisSpbmPortDropStatsLastDropMacHostName,
       "rcSlpp": rcSlpp,
       "rcSlppMib": rcSlppMib,
       "rcSlppNotifications": rcSlppNotifications,
       "rcnSlppPortDownEvent": rcnSlppPortDownEvent,
       "rcnSlppPortDownEventNew": rcnSlppPortDownEventNew,
       "rcSlppObjects": rcSlppObjects,
       "rcSlppScalars": rcSlppScalars,
       "rcSlppGlobalEnable": rcSlppGlobalEnable,
       "rcSlppTransmissionInterval": rcSlppTransmissionInterval,
       "rcSlppEtherType": rcSlppEtherType,
       "rcSlppVlanTable": rcSlppVlanTable,
       "rcSlppVlanEntry": rcSlppVlanEntry,
       "rcSlppVlanVlanId": rcSlppVlanVlanId,
       "rcSlppVlanSlppEnable": rcSlppVlanSlppEnable,
       "rcSlppVlanRowStatus": rcSlppVlanRowStatus,
       "rcSlppPortTable": rcSlppPortTable,
       "rcSlppPortEntry": rcSlppPortEntry,
       "rcSlppPortIfIndex": rcSlppPortIfIndex,
       "rcSlppPortPktRxThreshold": rcSlppPortPktRxThreshold,
       "rcSlppPortSlppEnable": rcSlppPortSlppEnable,
       "rcSlppPortIncomingVlanId": rcSlppPortIncomingVlanId,
       "rcSlppPortSrcNodeType": rcSlppPortSrcNodeType,
       "rcSlppNotificationObjects": rcSlppNotificationObjects,
       "rcSlppIncomingVlanId": rcSlppIncomingVlanId,
       "rcSlppSrcMacAddress": rcSlppSrcMacAddress,
       "rcSlppRxPortIndex": rcSlppRxPortIndex,
       "rcSlppRxVlanId": rcSlppRxVlanId,
       "rcTacacs": rcTacacs,
       "rcTacacsGlobal": rcTacacsGlobal,
       "rcTacacsGlobalEnable": rcTacacsGlobalEnable,
       "rcTacacsGlobalLastUserName": rcTacacsGlobalLastUserName,
       "rcTacacsGlobalLastAddressType": rcTacacsGlobalLastAddressType,
       "rcTacacsGlobalLastAddress": rcTacacsGlobalLastAddress,
       "rcTacacsAccounting": rcTacacsAccounting,
       "rcTacacsAuthentication": rcTacacsAuthentication,
       "rcTacacsServerTable": rcTacacsServerTable,
       "rcTacacsServerEntry": rcTacacsServerEntry,
       "rcTacacsServerAddressType": rcTacacsServerAddressType,
       "rcTacacsServerAddress": rcTacacsServerAddress,
       "rcTacacsServerPortNumber": rcTacacsServerPortNumber,
       "rcTacacsServerConnectionType": rcTacacsServerConnectionType,
       "rcTacacsServerConnectionStatus": rcTacacsServerConnectionStatus,
       "rcTacacsServerTimeout": rcTacacsServerTimeout,
       "rcTacacsServerKey": rcTacacsServerKey,
       "rcTacacsServerSourceIpInterfaceEnabled": rcTacacsServerSourceIpInterfaceEnabled,
       "rcTacacsServerSourceIpInterfaceType": rcTacacsServerSourceIpInterfaceType,
       "rcTacacsServerSourceIpInterface": rcTacacsServerSourceIpInterface,
       "rcTacacsServerPriority": rcTacacsServerPriority,
       "rcTacacsServerRowStatus": rcTacacsServerRowStatus,
       "rcIpfix": rcIpfix,
       "rcIpfixMib": rcIpfixMib,
       "rcIpfixConfGlobal": rcIpfixConfGlobal,
       "rcIpfixConfState": rcIpfixConfState,
       "rcIpfixTable": rcIpfixTable,
       "rcIpfixConfSlotTable": rcIpfixConfSlotTable,
       "rcIpfixConfSlotEntry": rcIpfixConfSlotEntry,
       "rcIpfixConfSlotNum": rcIpfixConfSlotNum,
       "rcIpfixConfSlotAgingIntv": rcIpfixConfSlotAgingIntv,
       "rcIpfixConfSlotActiveTimeout": rcIpfixConfSlotActiveTimeout,
       "rcIpfixConfSlotExportIntv": rcIpfixConfSlotExportIntv,
       "rcIpfixConfSlotExportState": rcIpfixConfSlotExportState,
       "rcIpfixConfSlotTempRefIntvSec": rcIpfixConfSlotTempRefIntvSec,
       "rcIpfixConfSlotTempRefIntvPkts": rcIpfixConfSlotTempRefIntvPkts,
       "rcIpfixCollectorTable": rcIpfixCollectorTable,
       "rcIpfixCollectorEntry": rcIpfixCollectorEntry,
       "rcIpfixCollectorSlotNum": rcIpfixCollectorSlotNum,
       "rcIpfixCollectorAddressType": rcIpfixCollectorAddressType,
       "rcIpfixCollectorAddress": rcIpfixCollectorAddress,
       "rcIpfixCollectorProtocol": rcIpfixCollectorProtocol,
       "rcIpfixCollectorDestPort": rcIpfixCollectorDestPort,
       "rcIpfixCollectorExporterIpType": rcIpfixCollectorExporterIpType,
       "rcIpfixCollectorExporterIp": rcIpfixCollectorExporterIp,
       "rcIpfixCollectorProtoVer": rcIpfixCollectorProtoVer,
       "rcIpfixCollectorState": rcIpfixCollectorState,
       "rcIpfixCollectorRowStatus": rcIpfixCollectorRowStatus,
       "rcIpfixConfPortTable": rcIpfixConfPortTable,
       "rcIpfixConfPortEntry": rcIpfixConfPortEntry,
       "rcIpfixConfPortId": rcIpfixConfPortId,
       "rcIpfixConfPortSampleRate": rcIpfixConfPortSampleRate,
       "rcIpfixConfPortHashPolyCoeffs": rcIpfixConfPortHashPolyCoeffs,
       "rcIpfixConfPortHashPolySeed": rcIpfixConfPortHashPolySeed,
       "rcIpfixConfPortFlush": rcIpfixConfPortFlush,
       "rcIpfixConfPortAllTraffic": rcIpfixConfPortAllTraffic,
       "rcIpfixConfPortHashKeyId": rcIpfixConfPortHashKeyId,
       "rcIpfixConfPortDynamicSampRate": rcIpfixConfPortDynamicSampRate,
       "rcIpfixHashStatsTable": rcIpfixHashStatsTable,
       "rcIpfixHashStatsEntry": rcIpfixHashStatsEntry,
       "rcIpfixHashStatsSlotNum": rcIpfixHashStatsSlotNum,
       "rcIpfixHashStatsHashOverflows": rcIpfixHashStatsHashOverflows,
       "rcIpfixHashStatsHashDrops": rcIpfixHashStatsHashDrops,
       "rcIpfixHashStatsClear": rcIpfixHashStatsClear,
       "rcIpfixHashStatsClearTime": rcIpfixHashStatsClearTime,
       "rcIpfixExporterStatsTable": rcIpfixExporterStatsTable,
       "rcIpfixExporterStatsEntry": rcIpfixExporterStatsEntry,
       "rcIpfixExporterStatsSlotNum": rcIpfixExporterStatsSlotNum,
       "rcIpfixExporterStatsCollectorType": rcIpfixExporterStatsCollectorType,
       "rcIpfixExporterStatsCollector": rcIpfixExporterStatsCollector,
       "rcIpfixExporterStatsOutPkts": rcIpfixExporterStatsOutPkts,
       "rcIpfixExporterStatsOutOctets": rcIpfixExporterStatsOutOctets,
       "rcIpfixExporterStatsPktsLoss": rcIpfixExporterStatsPktsLoss,
       "rcIpfixExporterStatsClear": rcIpfixExporterStatsClear,
       "rcIpfixExporterStatsClearTime": rcIpfixExporterStatsClearTime,
       "rcOspfv3": rcOspfv3,
       "rcOspfv3Mib": rcOspfv3Mib,
       "rcOspfv3Objects": rcOspfv3Objects,
       "rcOspfv3GeneralGroup": rcOspfv3GeneralGroup,
       "rcOspfv3RouterId": rcOspfv3RouterId,
       "rcOspfv3AdminStat": rcOspfv3AdminStat,
       "rcOspfv3VersionNumber": rcOspfv3VersionNumber,
       "rcOspfv3AreaBdrRtrStatus": rcOspfv3AreaBdrRtrStatus,
       "rcOspfv3ASBdrRtrStatus": rcOspfv3ASBdrRtrStatus,
       "rcOspfv3AsScopeLsaCount": rcOspfv3AsScopeLsaCount,
       "rcOspfv3AsScopeLsaCksumSum": rcOspfv3AsScopeLsaCksumSum,
       "rcOspfv3OriginateNewLsas": rcOspfv3OriginateNewLsas,
       "rcOspfv3RxNewLsas": rcOspfv3RxNewLsas,
       "rcOspfv3ExtLsaCount": rcOspfv3ExtLsaCount,
       "rcOspfv3ExtAreaLsdbLimit": rcOspfv3ExtAreaLsdbLimit,
       "rcOspfv3MulticastExtensions": rcOspfv3MulticastExtensions,
       "rcOspfv3ExitOverflowInterval": rcOspfv3ExitOverflowInterval,
       "rcOspfv3DemandExtensions": rcOspfv3DemandExtensions,
       "rcOspfv3TrafficEngineeringSupport": rcOspfv3TrafficEngineeringSupport,
       "rcOspfv3ReferenceBandwidth": rcOspfv3ReferenceBandwidth,
       "rcOspfv3RestartSupport": rcOspfv3RestartSupport,
       "rcOspfv3RestartInterval": rcOspfv3RestartInterval,
       "rcOspfv3RestartStatus": rcOspfv3RestartStatus,
       "rcOspfv3RestartAge": rcOspfv3RestartAge,
       "rcOspfv3RestartExitReason": rcOspfv3RestartExitReason,
       "rcOspfv3BadLsaIgnore": rcOspfv3BadLsaIgnore,
       "rcOspfv3AreaTable": rcOspfv3AreaTable,
       "rcOspfv3AreaEntry": rcOspfv3AreaEntry,
       "rcOspfv3AreaId": rcOspfv3AreaId,
       "rcOspfv3ImportAsExtern": rcOspfv3ImportAsExtern,
       "rcOspfv3AreaSpfRuns": rcOspfv3AreaSpfRuns,
       "rcOspfv3AreaBdrRtrCount": rcOspfv3AreaBdrRtrCount,
       "rcOspfv3AreaAsBdrRtrCount": rcOspfv3AreaAsBdrRtrCount,
       "rcOspfv3AreaScopeLsaCount": rcOspfv3AreaScopeLsaCount,
       "rcOspfv3AreaScopeLsaCksumSum": rcOspfv3AreaScopeLsaCksumSum,
       "rcOspfv3AreaSummary": rcOspfv3AreaSummary,
       "rcOspfv3AreaStatus": rcOspfv3AreaStatus,
       "rcOspfv3StubMetric": rcOspfv3StubMetric,
       "rcOspfv3AreaNssaTranslatorRole": rcOspfv3AreaNssaTranslatorRole,
       "rcOspfv3AreaNssaTranslatorState": rcOspfv3AreaNssaTranslatorState,
       "rcOspfv3AreaNssaTranslatorStabilityInterval": rcOspfv3AreaNssaTranslatorStabilityInterval,
       "rcOspfv3AreaNssaTranslatorEvents": rcOspfv3AreaNssaTranslatorEvents,
       "rcOspfv3AreaStubMetricType": rcOspfv3AreaStubMetricType,
       "rcOspfv3AsLsdbTable": rcOspfv3AsLsdbTable,
       "rcOspfv3AsLsdbEntry": rcOspfv3AsLsdbEntry,
       "rcOspfv3AsLsdbType": rcOspfv3AsLsdbType,
       "rcOspfv3AsLsdbRouterId": rcOspfv3AsLsdbRouterId,
       "rcOspfv3AsLsdbLsid": rcOspfv3AsLsdbLsid,
       "rcOspfv3AsLsdbSequence": rcOspfv3AsLsdbSequence,
       "rcOspfv3AsLsdbAge": rcOspfv3AsLsdbAge,
       "rcOspfv3AsLsdbChecksum": rcOspfv3AsLsdbChecksum,
       "rcOspfv3AsLsdbAdvertisement": rcOspfv3AsLsdbAdvertisement,
       "rcOspfv3AsLsdbTypeKnown": rcOspfv3AsLsdbTypeKnown,
       "rcOspfv3AreaLsdbTable": rcOspfv3AreaLsdbTable,
       "rcOspfv3AreaLsdbEntry": rcOspfv3AreaLsdbEntry,
       "rcOspfv3AreaLsdbAreaId": rcOspfv3AreaLsdbAreaId,
       "rcOspfv3AreaLsdbType": rcOspfv3AreaLsdbType,
       "rcOspfv3AreaLsdbRouterId": rcOspfv3AreaLsdbRouterId,
       "rcOspfv3AreaLsdbLsid": rcOspfv3AreaLsdbLsid,
       "rcOspfv3AreaLsdbSequence": rcOspfv3AreaLsdbSequence,
       "rcOspfv3AreaLsdbAge": rcOspfv3AreaLsdbAge,
       "rcOspfv3AreaLsdbChecksum": rcOspfv3AreaLsdbChecksum,
       "rcOspfv3AreaLsdbAdvertisement": rcOspfv3AreaLsdbAdvertisement,
       "rcOspfv3AreaLsdbTypeKnown": rcOspfv3AreaLsdbTypeKnown,
       "rcOspfv3LinkLsdbTable": rcOspfv3LinkLsdbTable,
       "rcOspfv3LinkLsdbEntry": rcOspfv3LinkLsdbEntry,
       "rcOspfv3LinkLsdbIfIndex": rcOspfv3LinkLsdbIfIndex,
       "rcOspfv3LinkLsdbType": rcOspfv3LinkLsdbType,
       "rcOspfv3LinkLsdbRouterId": rcOspfv3LinkLsdbRouterId,
       "rcOspfv3LinkLsdbLsid": rcOspfv3LinkLsdbLsid,
       "rcOspfv3LinkLsdbSequence": rcOspfv3LinkLsdbSequence,
       "rcOspfv3LinkLsdbAge": rcOspfv3LinkLsdbAge,
       "rcOspfv3LinkLsdbChecksum": rcOspfv3LinkLsdbChecksum,
       "rcOspfv3LinkLsdbAdvertisement": rcOspfv3LinkLsdbAdvertisement,
       "rcOspfv3LinkLsdbTypeKnown": rcOspfv3LinkLsdbTypeKnown,
       "rcOspfv3HostTable": rcOspfv3HostTable,
       "rcOspfv3HostEntry": rcOspfv3HostEntry,
       "rcOspfv3HostAddressType": rcOspfv3HostAddressType,
       "rcOspfv3HostAddress": rcOspfv3HostAddress,
       "rcOspfv3HostMetric": rcOspfv3HostMetric,
       "rcOspfv3HostStatus": rcOspfv3HostStatus,
       "rcOspfv3HostAreaID": rcOspfv3HostAreaID,
       "rcOspfv3IfTable": rcOspfv3IfTable,
       "rcOspfv3IfEntry": rcOspfv3IfEntry,
       "rcOspfv3IfIndex": rcOspfv3IfIndex,
       "rcOspfv3IfAreaId": rcOspfv3IfAreaId,
       "rcOspfv3IfType": rcOspfv3IfType,
       "rcOspfv3IfAdminStat": rcOspfv3IfAdminStat,
       "rcOspfv3IfRtrPriority": rcOspfv3IfRtrPriority,
       "rcOspfv3IfTransitDelay": rcOspfv3IfTransitDelay,
       "rcOspfv3IfRetransInterval": rcOspfv3IfRetransInterval,
       "rcOspfv3IfHelloInterval": rcOspfv3IfHelloInterval,
       "rcOspfv3IfRtrDeadInterval": rcOspfv3IfRtrDeadInterval,
       "rcOspfv3IfPollInterval": rcOspfv3IfPollInterval,
       "rcOspfv3IfState": rcOspfv3IfState,
       "rcOspfv3IfDesignatedRouter": rcOspfv3IfDesignatedRouter,
       "rcOspfv3IfBackupDesignatedRouter": rcOspfv3IfBackupDesignatedRouter,
       "rcOspfv3IfEvents": rcOspfv3IfEvents,
       "rcOspfv3IfStatus": rcOspfv3IfStatus,
       "rcOspfv3IfMulticastForwarding": rcOspfv3IfMulticastForwarding,
       "rcOspfv3IfDemand": rcOspfv3IfDemand,
       "rcOspfv3IfMetricValue": rcOspfv3IfMetricValue,
       "rcOspfv3IfLinkScopeLsaCount": rcOspfv3IfLinkScopeLsaCount,
       "rcOspfv3IfLinkLsaCksumSum": rcOspfv3IfLinkLsaCksumSum,
       "rcOspfv3IfInstId": rcOspfv3IfInstId,
       "rcOspfv3IfDemandNbrProbe": rcOspfv3IfDemandNbrProbe,
       "rcOspfv3IfDemandNbrProbeRetxLimit": rcOspfv3IfDemandNbrProbeRetxLimit,
       "rcOspfv3IfDemandNbrProbeInterval": rcOspfv3IfDemandNbrProbeInterval,
       "rcOspfv3VirtIfTable": rcOspfv3VirtIfTable,
       "rcOspfv3VirtIfEntry": rcOspfv3VirtIfEntry,
       "rcOspfv3VirtIfAreaId": rcOspfv3VirtIfAreaId,
       "rcOspfv3VirtIfNeighbor": rcOspfv3VirtIfNeighbor,
       "rcOspfv3VirtIfIndex": rcOspfv3VirtIfIndex,
       "rcOspfv3VirtIfTransitDelay": rcOspfv3VirtIfTransitDelay,
       "rcOspfv3VirtIfRetransInterval": rcOspfv3VirtIfRetransInterval,
       "rcOspfv3VirtIfHelloInterval": rcOspfv3VirtIfHelloInterval,
       "rcOspfv3VirtIfRtrDeadInterval": rcOspfv3VirtIfRtrDeadInterval,
       "rcOspfv3VirtIfState": rcOspfv3VirtIfState,
       "rcOspfv3VirtIfEvents": rcOspfv3VirtIfEvents,
       "rcOspfv3VirtIfStatus": rcOspfv3VirtIfStatus,
       "rcOspfv3VirtIfLinkScopeLsaCount": rcOspfv3VirtIfLinkScopeLsaCount,
       "rcOspfv3VirtIfLinkLsaCksumSum": rcOspfv3VirtIfLinkLsaCksumSum,
       "rcOspfv3NbrTable": rcOspfv3NbrTable,
       "rcOspfv3NbrEntry": rcOspfv3NbrEntry,
       "rcOspfv3NbrIfIndex": rcOspfv3NbrIfIndex,
       "rcOspfv3NbrRtrId": rcOspfv3NbrRtrId,
       "rcOspfv3NbrAddressType": rcOspfv3NbrAddressType,
       "rcOspfv3NbrAddress": rcOspfv3NbrAddress,
       "rcOspfv3NbrOptions": rcOspfv3NbrOptions,
       "rcOspfv3NbrPriority": rcOspfv3NbrPriority,
       "rcOspfv3NbrState": rcOspfv3NbrState,
       "rcOspfv3NbrEvents": rcOspfv3NbrEvents,
       "rcOspfv3NbrLsRetransQLen": rcOspfv3NbrLsRetransQLen,
       "rcOspfv3NbrHelloSuppressed": rcOspfv3NbrHelloSuppressed,
       "rcOspfv3NbrIfId": rcOspfv3NbrIfId,
       "rcOspfv3NbrRestartHelperStatus": rcOspfv3NbrRestartHelperStatus,
       "rcOspfv3NbrRestartHelperAge": rcOspfv3NbrRestartHelperAge,
       "rcOspfv3NbrRestartHelperExitReason": rcOspfv3NbrRestartHelperExitReason,
       "rcOspfv3NbmaNbrTable": rcOspfv3NbmaNbrTable,
       "rcOspfv3NbmaNbrEntry": rcOspfv3NbmaNbrEntry,
       "rcOspfv3NbmaNbrIfIndex": rcOspfv3NbmaNbrIfIndex,
       "rcOspfv3NbmaNbrAddress": rcOspfv3NbmaNbrAddress,
       "rcOspfv3NbmaNbrPriority": rcOspfv3NbmaNbrPriority,
       "rcOspfv3NbmaNbrRtrId": rcOspfv3NbmaNbrRtrId,
       "rcOspfv3NbmaNbrState": rcOspfv3NbmaNbrState,
       "rcOspfv3NbmaNbrStorageType": rcOspfv3NbmaNbrStorageType,
       "rcOspfv3NbmaNbrStatus": rcOspfv3NbmaNbrStatus,
       "rcOspfv3VirtNbrTable": rcOspfv3VirtNbrTable,
       "rcOspfv3VirtNbrEntry": rcOspfv3VirtNbrEntry,
       "rcOspfv3VirtNbrArea": rcOspfv3VirtNbrArea,
       "rcOspfv3VirtNbrRtrId": rcOspfv3VirtNbrRtrId,
       "rcOspfv3VirtNbrIfIndex": rcOspfv3VirtNbrIfIndex,
       "rcOspfv3VirtNbrAddressType": rcOspfv3VirtNbrAddressType,
       "rcOspfv3VirtNbrAddress": rcOspfv3VirtNbrAddress,
       "rcOspfv3VirtNbrOptions": rcOspfv3VirtNbrOptions,
       "rcOspfv3VirtNbrState": rcOspfv3VirtNbrState,
       "rcOspfv3VirtNbrEvents": rcOspfv3VirtNbrEvents,
       "rcOspfv3VirtNbrLsRetransQLen": rcOspfv3VirtNbrLsRetransQLen,
       "rcOspfv3VirtNbrHelloSuppressed": rcOspfv3VirtNbrHelloSuppressed,
       "rcOspfv3VirtNbrIfId": rcOspfv3VirtNbrIfId,
       "rcOspfv3VirtNbrRestartHelperStatus": rcOspfv3VirtNbrRestartHelperStatus,
       "rcOspfv3VirtNbrRestartHelperAge": rcOspfv3VirtNbrRestartHelperAge,
       "rcOspfv3VirtNbrRestartHelperExitReason": rcOspfv3VirtNbrRestartHelperExitReason,
       "rcOspfv3AreaAggregateTable": rcOspfv3AreaAggregateTable,
       "rcOspfv3AreaAggregateEntry": rcOspfv3AreaAggregateEntry,
       "rcOspfv3AreaAggregateAreaID": rcOspfv3AreaAggregateAreaID,
       "rcOspfv3AreaAggregateAreaLsdbType": rcOspfv3AreaAggregateAreaLsdbType,
       "rcOspfv3AreaAggregatePrefix": rcOspfv3AreaAggregatePrefix,
       "rcOspfv3AreaAggregatePrefixLength": rcOspfv3AreaAggregatePrefixLength,
       "rcOspfv3AreaAggregateStatus": rcOspfv3AreaAggregateStatus,
       "rcOspfv3AreaAggregateEffect": rcOspfv3AreaAggregateEffect,
       "rcOspfv3AreaAggregateRouteTag": rcOspfv3AreaAggregateRouteTag,
       "rcOspfv3AreaAggregateAdvertiseMetric": rcOspfv3AreaAggregateAdvertiseMetric,
       "rcOspfv3Stats": rcOspfv3Stats,
       "rcOspfv3StatsTxPackets": rcOspfv3StatsTxPackets,
       "rcOspfv3StatsRxPackets": rcOspfv3StatsRxPackets,
       "rcOspfv3StatsTxDropPackets": rcOspfv3StatsTxDropPackets,
       "rcOspfv3StatsRxDropPackets": rcOspfv3StatsRxDropPackets,
       "rcOspfv3StatsRxBadPackets": rcOspfv3StatsRxBadPackets,
       "rcOspfv3StatsSpfRuns": rcOspfv3StatsSpfRuns,
       "rcOspfv3StatsLastSpfRun": rcOspfv3StatsLastSpfRun,
       "rcOspfv3StatsLsdbTblSize": rcOspfv3StatsLsdbTblSize,
       "rcOspfv3StatsBadLsReqs": rcOspfv3StatsBadLsReqs,
       "rcOspfv3StatsSeqMismatches": rcOspfv3StatsSeqMismatches,
       "rcOspfv3Conformance": rcOspfv3Conformance,
       "rcOspfv3Groups": rcOspfv3Groups,
       "rcOspfv3BasicGroup": rcOspfv3BasicGroup,
       "rcOspfv3AreaGroup": rcOspfv3AreaGroup,
       "rcOspfv3AsLsdbGroup": rcOspfv3AsLsdbGroup,
       "rcOspfv3AreaLsdbGroup": rcOspfv3AreaLsdbGroup,
       "rcOspfv3LinkLsdbGroup": rcOspfv3LinkLsdbGroup,
       "rcOspfv3HostGroup": rcOspfv3HostGroup,
       "rcOspfv3IfGroup": rcOspfv3IfGroup,
       "rcOspfv3VirtIfGroup": rcOspfv3VirtIfGroup,
       "rcOspfv3NbrGroup": rcOspfv3NbrGroup,
       "rcOspfv3NbmaNbrGroup": rcOspfv3NbmaNbrGroup,
       "rcOspfv3VirtNbrGroup": rcOspfv3VirtNbrGroup,
       "rcOspfv3AreaAggregateGroup": rcOspfv3AreaAggregateGroup,
       "rcOspfv3Compliances": rcOspfv3Compliances,
       "rcOspfv3Compliance": rcOspfv3Compliance,
       "rcCfm": rcCfm,
       "rcCfmMaintenanceDomainTable": rcCfmMaintenanceDomainTable,
       "rcCfmMaintenanceDomainEntry": rcCfmMaintenanceDomainEntry,
       "rcCfmMaintenanceDomainIndex": rcCfmMaintenanceDomainIndex,
       "rcCfmMaintenanceDomainName": rcCfmMaintenanceDomainName,
       "rcCfmMaintenanceDomainRowStatus": rcCfmMaintenanceDomainRowStatus,
       "rcCfmMaintenanceDomainNumOfMa": rcCfmMaintenanceDomainNumOfMa,
       "rcCfmMaintenanceDomainLevel": rcCfmMaintenanceDomainLevel,
       "rcCfmMaintenanceDomainNumOfMip": rcCfmMaintenanceDomainNumOfMip,
       "rcCfmMaintenanceDomainType": rcCfmMaintenanceDomainType,
       "rcCfmMaintenanceAssociationTable": rcCfmMaintenanceAssociationTable,
       "rcCfmMaintenanceAssociationEntry": rcCfmMaintenanceAssociationEntry,
       "rcCfmMaintenanceAssociationDomainIndex": rcCfmMaintenanceAssociationDomainIndex,
       "rcCfmMaintenanceAssociationAssociationIndex": rcCfmMaintenanceAssociationAssociationIndex,
       "rcCfmMaintenanceAssociationDomainName": rcCfmMaintenanceAssociationDomainName,
       "rcCfmMaintenanceAssociationAssociationName": rcCfmMaintenanceAssociationAssociationName,
       "rcCfmMaintenanceAssociationAdminState": rcCfmMaintenanceAssociationAdminState,
       "rcCfmMaintenanceAssociationRowStatus": rcCfmMaintenanceAssociationRowStatus,
       "rcCfmMaintenanceAssociationNumOfMep": rcCfmMaintenanceAssociationNumOfMep,
       "rcCfmMaintenanceEndPointTable": rcCfmMaintenanceEndPointTable,
       "rcCfmMaintenanceEndPointEntry": rcCfmMaintenanceEndPointEntry,
       "rcCfmMaintenanceEndPointDomainIndex": rcCfmMaintenanceEndPointDomainIndex,
       "rcCfmMaintenanceEndPointAssociationIndex": rcCfmMaintenanceEndPointAssociationIndex,
       "rcCfmMaintenanceEndPointId": rcCfmMaintenanceEndPointId,
       "rcCfmMaintenanceEndPointDomainName": rcCfmMaintenanceEndPointDomainName,
       "rcCfmMaintenanceEndPointAssociationName": rcCfmMaintenanceEndPointAssociationName,
       "rcCfmMaintenanceEndPointAdminState": rcCfmMaintenanceEndPointAdminState,
       "rcCfmMaintenanceEndPointRowStatus": rcCfmMaintenanceEndPointRowStatus,
       "rcCfmMaintenanceEndPointMepType": rcCfmMaintenanceEndPointMepType,
       "rcCfmMaintenanceEndPointServiceDescription": rcCfmMaintenanceEndPointServiceDescription,
       "rcCfmMaintenanceEndPointMepStatus": rcCfmMaintenanceEndPointMepStatus,
       "rcCfmGlobals": rcCfmGlobals,
       "rcCfmGlobalsEtherType": rcCfmGlobalsEtherType,
       "rcCfmGlobalsSpbmAdminState": rcCfmGlobalsSpbmAdminState,
       "rcCfmGlobalsSpbmLevel": rcCfmGlobalsSpbmLevel,
       "rcCfmGlobalsSpbmMepId": rcCfmGlobalsSpbmMepId,
       "rcCfmGlobalsCmacAdminState": rcCfmGlobalsCmacAdminState,
       "rcCfmGlobalsCmacLevel": rcCfmGlobalsCmacLevel,
       "rcCfmGlobalsCmacMepId": rcCfmGlobalsCmacMepId,
       "rcCfmTransmitLbmTable": rcCfmTransmitLbmTable,
       "rcCfmTransmitLbmEntry": rcCfmTransmitLbmEntry,
       "rcCfmTransmitLbmDomainIndex": rcCfmTransmitLbmDomainIndex,
       "rcCfmTransmitLbmAssociationIndex": rcCfmTransmitLbmAssociationIndex,
       "rcCfmTransmitLbmIndex": rcCfmTransmitLbmIndex,
       "rcCfmTransmitLbmDomainName": rcCfmTransmitLbmDomainName,
       "rcCfmTransmitLbmAssociationName": rcCfmTransmitLbmAssociationName,
       "rcCfmTransmitLbmDestMacAddress": rcCfmTransmitLbmDestMacAddress,
       "rcCfmTransmitLbmDestMepId": rcCfmTransmitLbmDestMepId,
       "rcCfmTransmitLbmDestIsMepId": rcCfmTransmitLbmDestIsMepId,
       "rcCfmTransmitLbmMessages": rcCfmTransmitLbmMessages,
       "rcCfmTransmitLbmVlanPriority": rcCfmTransmitLbmVlanPriority,
       "rcCfmTransmitLbmVlanDropEnable": rcCfmTransmitLbmVlanDropEnable,
       "rcCfmTransmitLbmSeqNumber": rcCfmTransmitLbmSeqNumber,
       "rcCfmTransmitLbmResultOk": rcCfmTransmitLbmResultOk,
       "rcCfmTransmitLbmStatus": rcCfmTransmitLbmStatus,
       "rcCfmTransmitLbmResult": rcCfmTransmitLbmResult,
       "rcCfmTransmitLbmTimeoutInt": rcCfmTransmitLbmTimeoutInt,
       "rcCfmTransmitLbmInterFrameInt": rcCfmTransmitLbmInterFrameInt,
       "rcCfmTransmitLbmTestPattern": rcCfmTransmitLbmTestPattern,
       "rcCfmTransmitLbmDataSize": rcCfmTransmitLbmDataSize,
       "rcCfmTransmitLbmFrameSize": rcCfmTransmitLbmFrameSize,
       "rcCfmTransmitLbmSourceMode": rcCfmTransmitLbmSourceMode,
       "rcCfmTransmitLtmTable": rcCfmTransmitLtmTable,
       "rcCfmTransmitLtmEntry": rcCfmTransmitLtmEntry,
       "rcCfmTransmitLtmDomainIndex": rcCfmTransmitLtmDomainIndex,
       "rcCfmTransmitLtmAssociationIndex": rcCfmTransmitLtmAssociationIndex,
       "rcCfmTransmitLtmIndex": rcCfmTransmitLtmIndex,
       "rcCfmTransmitLtmDomainName": rcCfmTransmitLtmDomainName,
       "rcCfmTransmitLtmAssociationName": rcCfmTransmitLtmAssociationName,
       "rcCfmTransmitLtmVlanPriority": rcCfmTransmitLtmVlanPriority,
       "rcCfmTransmitLtmDestMacAddress": rcCfmTransmitLtmDestMacAddress,
       "rcCfmTransmitLtmDestMepId": rcCfmTransmitLtmDestMepId,
       "rcCfmTransmitLtmDestIsMepId": rcCfmTransmitLtmDestIsMepId,
       "rcCfmTransmitLtmTtl": rcCfmTransmitLtmTtl,
       "rcCfmTransmitLtmSeqNumber": rcCfmTransmitLtmSeqNumber,
       "rcCfmTransmitLtmResultOk": rcCfmTransmitLtmResultOk,
       "rcCfmTransmitLtmStatus": rcCfmTransmitLtmStatus,
       "rcCfmTransmitLtmResult": rcCfmTransmitLtmResult,
       "rcCfmTransmitLtmFlag": rcCfmTransmitLtmFlag,
       "rcCfmTransmitLtmSourceMode": rcCfmTransmitLtmSourceMode,
       "rcCfmLtrReplyTable": rcCfmLtrReplyTable,
       "rcCfmLtrReplyEntry": rcCfmLtrReplyEntry,
       "rcCfmLtrReplyDomainIndex": rcCfmLtrReplyDomainIndex,
       "rcCfmLtrReplyAssociationIndex": rcCfmLtrReplyAssociationIndex,
       "rcCfmLtrReplyMepId": rcCfmLtrReplyMepId,
       "rcCfmLtrReplySeqNumber": rcCfmLtrReplySeqNumber,
       "rcCfmLtrReplyHop": rcCfmLtrReplyHop,
       "rcCfmLtrReplyReceiveOrder": rcCfmLtrReplyReceiveOrder,
       "rcCfmLtrReplyTtl": rcCfmLtrReplyTtl,
       "rcCfmLtrReplyDomainName": rcCfmLtrReplyDomainName,
       "rcCfmLtrReplyAssociationName": rcCfmLtrReplyAssociationName,
       "rcCfmLtrReplyForwarded": rcCfmLtrReplyForwarded,
       "rcCfmLtrReplyTerminalMep": rcCfmLtrReplyTerminalMep,
       "rcCfmLtrReplyLastEgressIdentifier": rcCfmLtrReplyLastEgressIdentifier,
       "rcCfmLtrReplyNextEgressIdentifier": rcCfmLtrReplyNextEgressIdentifier,
       "rcCfmLtrReplyRelayAction": rcCfmLtrReplyRelayAction,
       "rcCfmLtrReplySrcMac": rcCfmLtrReplySrcMac,
       "rcCfmLtrReplyIngressAction": rcCfmLtrReplyIngressAction,
       "rcCfmLtrReplyIngressMac": rcCfmLtrReplyIngressMac,
       "rcCfmLtrReplyIngressPortIdSubtype": rcCfmLtrReplyIngressPortIdSubtype,
       "rcCfmLtrReplyIngressPortId": rcCfmLtrReplyIngressPortId,
       "rcCfmLtrReplyEgressAction": rcCfmLtrReplyEgressAction,
       "rcCfmLtrReplyEgressMac": rcCfmLtrReplyEgressMac,
       "rcCfmLtrReplyEgressPortIdSubtype": rcCfmLtrReplyEgressPortIdSubtype,
       "rcCfmLtrReplyEgressPortId": rcCfmLtrReplyEgressPortId,
       "rcCfmTransmitL2PingTable": rcCfmTransmitL2PingTable,
       "rcCfmTransmitL2PingEntry": rcCfmTransmitL2PingEntry,
       "rcCfmTransmitL2PingVlanId": rcCfmTransmitL2PingVlanId,
       "rcCfmTransmitL2PingDestMacAddress": rcCfmTransmitL2PingDestMacAddress,
       "rcCfmTransmitL2PingHostName": rcCfmTransmitL2PingHostName,
       "rcCfmTransmitL2PingDestIsHostName": rcCfmTransmitL2PingDestIsHostName,
       "rcCfmTransmitL2PingMessages": rcCfmTransmitL2PingMessages,
       "rcCfmTransmitL2PingPriority": rcCfmTransmitL2PingPriority,
       "rcCfmTransmitL2PingTimeoutInt": rcCfmTransmitL2PingTimeoutInt,
       "rcCfmTransmitL2PingTestPattern": rcCfmTransmitL2PingTestPattern,
       "rcCfmTransmitL2PingDataSize": rcCfmTransmitL2PingDataSize,
       "rcCfmTransmitL2PingFrameSize": rcCfmTransmitL2PingFrameSize,
       "rcCfmTransmitL2PingSourceMode": rcCfmTransmitL2PingSourceMode,
       "rcCfmTransmitL2PingSeqNumber": rcCfmTransmitL2PingSeqNumber,
       "rcCfmTransmitL2PingResultOk": rcCfmTransmitL2PingResultOk,
       "rcCfmTransmitL2PingStatus": rcCfmTransmitL2PingStatus,
       "rcCfmTransmitL2PingResult": rcCfmTransmitL2PingResult,
       "rcCfmTransmitL2TraceTable": rcCfmTransmitL2TraceTable,
       "rcCfmTransmitL2TraceEntry": rcCfmTransmitL2TraceEntry,
       "rcCfmTransmitL2TraceVlanId": rcCfmTransmitL2TraceVlanId,
       "rcCfmTransmitL2TracePriority": rcCfmTransmitL2TracePriority,
       "rcCfmTransmitL2TraceDestMacAddress": rcCfmTransmitL2TraceDestMacAddress,
       "rcCfmTransmitL2TraceHostName": rcCfmTransmitL2TraceHostName,
       "rcCfmTransmitL2TraceIsid": rcCfmTransmitL2TraceIsid,
       "rcCfmTransmitL2TraceNickName": rcCfmTransmitL2TraceNickName,
       "rcCfmTransmitL2TraceDestIsHostName": rcCfmTransmitL2TraceDestIsHostName,
       "rcCfmTransmitL2TraceIsidTree": rcCfmTransmitL2TraceIsidTree,
       "rcCfmTransmitL2TraceTtl": rcCfmTransmitL2TraceTtl,
       "rcCfmTransmitL2TraceSourceMode": rcCfmTransmitL2TraceSourceMode,
       "rcCfmTransmitL2TraceSeqNumber": rcCfmTransmitL2TraceSeqNumber,
       "rcCfmTransmitL2TraceResultOk": rcCfmTransmitL2TraceResultOk,
       "rcCfmTransmitL2TraceStatus": rcCfmTransmitL2TraceStatus,
       "rcCfmTransmitL2TraceFlag": rcCfmTransmitL2TraceFlag,
       "rcCfmL2TraceReplyTable": rcCfmL2TraceReplyTable,
       "rcCfmL2TraceReplyEntry": rcCfmL2TraceReplyEntry,
       "rcCfmL2TraceReplyVlanId": rcCfmL2TraceReplyVlanId,
       "rcCfmL2TraceReplySeqNumber": rcCfmL2TraceReplySeqNumber,
       "rcCfmL2TraceReplyHop": rcCfmL2TraceReplyHop,
       "rcCfmL2TraceReplyReceiveOrder": rcCfmL2TraceReplyReceiveOrder,
       "rcCfmL2TraceReplyTtl": rcCfmL2TraceReplyTtl,
       "rcCfmL2TraceReplySrcMac": rcCfmL2TraceReplySrcMac,
       "rcCfmL2TraceReplyHostName": rcCfmL2TraceReplyHostName,
       "rcCfmL2TraceReplyLastSrcMac": rcCfmL2TraceReplyLastSrcMac,
       "rcCfmL2TraceReplyLastHostName": rcCfmL2TraceReplyLastHostName,
       "rcCfmTransmitL2IpPingTable": rcCfmTransmitL2IpPingTable,
       "rcCfmTransmitL2IpPingEntry": rcCfmTransmitL2IpPingEntry,
       "rcCfmTransmitL2IpPingIpAddrType": rcCfmTransmitL2IpPingIpAddrType,
       "rcCfmTransmitL2IpPingIpAddr": rcCfmTransmitL2IpPingIpAddr,
       "rcCfmTransmitL2IpPingVrfId": rcCfmTransmitL2IpPingVrfId,
       "rcCfmTransmitL2IpPingVrfName": rcCfmTransmitL2IpPingVrfName,
       "rcCfmTransmitL2IpPingMessages": rcCfmTransmitL2IpPingMessages,
       "rcCfmTransmitL2IpPingTimeoutInt": rcCfmTransmitL2IpPingTimeoutInt,
       "rcCfmTransmitL2IpPingTestPattern": rcCfmTransmitL2IpPingTestPattern,
       "rcCfmTransmitL2IpPingDataSize": rcCfmTransmitL2IpPingDataSize,
       "rcCfmTransmitL2IpPingStatus": rcCfmTransmitL2IpPingStatus,
       "rcCfmTransmitL2IpPingResultOk": rcCfmTransmitL2IpPingResultOk,
       "rcCfmTransmitL2IpPingPathsFound": rcCfmTransmitL2IpPingPathsFound,
       "rcCfmTransmitL2IpPingRowStatus": rcCfmTransmitL2IpPingRowStatus,
       "rcCfmL2IpPingReplyTable": rcCfmL2IpPingReplyTable,
       "rcCfmL2IpPingReplyEntry": rcCfmL2IpPingReplyEntry,
       "rcCfmL2IpPingReplyIpAddrType": rcCfmL2IpPingReplyIpAddrType,
       "rcCfmL2IpPingReplyIpAddr": rcCfmL2IpPingReplyIpAddr,
       "rcCfmL2IpPingReplySendOrder": rcCfmL2IpPingReplySendOrder,
       "rcCfmL2IpPingReplyVrfId": rcCfmL2IpPingReplyVrfId,
       "rcCfmL2IpPingReplyVlanId": rcCfmL2IpPingReplyVlanId,
       "rcCfmL2IpPingReplyDestMacAddress": rcCfmL2IpPingReplyDestMacAddress,
       "rcCfmL2IpPingReplyPortNum": rcCfmL2IpPingReplyPortNum,
       "rcCfmL2IpPingReplyDestHostName": rcCfmL2IpPingReplyDestHostName,
       "rcCfmL2IpPingReplySize": rcCfmL2IpPingReplySize,
       "rcCfmL2IpPingReplyPktsTx": rcCfmL2IpPingReplyPktsTx,
       "rcCfmL2IpPingReplyPktsRx": rcCfmL2IpPingReplyPktsRx,
       "rcCfmL2IpPingReplyPercentLossWhole": rcCfmL2IpPingReplyPercentLossWhole,
       "rcCfmL2IpPingReplyPercentLossFract": rcCfmL2IpPingReplyPercentLossFract,
       "rcCfmL2IpPingReplyMinRoundTrip": rcCfmL2IpPingReplyMinRoundTrip,
       "rcCfmL2IpPingReplyMaxRoundTrip": rcCfmL2IpPingReplyMaxRoundTrip,
       "rcCfmL2IpPingReplyRttAvgWhole": rcCfmL2IpPingReplyRttAvgWhole,
       "rcCfmL2IpPingReplyRttAvgFract": rcCfmL2IpPingReplyRttAvgFract,
       "rcCfmL2IpPingReplyFlag": rcCfmL2IpPingReplyFlag,
       "rcCfmTransmitL2IpTraceTable": rcCfmTransmitL2IpTraceTable,
       "rcCfmTransmitL2IpTraceEntry": rcCfmTransmitL2IpTraceEntry,
       "rcCfmTransmitL2IpTraceIpAddrType": rcCfmTransmitL2IpTraceIpAddrType,
       "rcCfmTransmitL2IpTraceIpAddr": rcCfmTransmitL2IpTraceIpAddr,
       "rcCfmTransmitL2IpTraceVrfId": rcCfmTransmitL2IpTraceVrfId,
       "rcCfmTransmitL2IpTraceVrfName": rcCfmTransmitL2IpTraceVrfName,
       "rcCfmTransmitL2IpTraceTtl": rcCfmTransmitL2IpTraceTtl,
       "rcCfmTransmitL2IpTraceStatus": rcCfmTransmitL2IpTraceStatus,
       "rcCfmTransmitL2IpTraceResultOk": rcCfmTransmitL2IpTraceResultOk,
       "rcCfmTransmitL2IpTracePathsFound": rcCfmTransmitL2IpTracePathsFound,
       "rcCfmTransmitL2IpTraceRowStatus": rcCfmTransmitL2IpTraceRowStatus,
       "rcCfmL2IpTraceReplyTable": rcCfmL2IpTraceReplyTable,
       "rcCfmL2IpTraceReplyEntry": rcCfmL2IpTraceReplyEntry,
       "rcCfmL2IpTraceReplyIpAddrType": rcCfmL2IpTraceReplyIpAddrType,
       "rcCfmL2IpTraceReplyIpAddr": rcCfmL2IpTraceReplyIpAddr,
       "rcCfmL2IpTraceReplySendOrder": rcCfmL2IpTraceReplySendOrder,
       "rcCfmL2IpTraceReplyHop": rcCfmL2IpTraceReplyHop,
       "rcCfmL2IpTraceReplyReceiveOrder": rcCfmL2IpTraceReplyReceiveOrder,
       "rcCfmL2IpTraceReplyTtl": rcCfmL2IpTraceReplyTtl,
       "rcCfmL2IpTraceReplyVrfId": rcCfmL2IpTraceReplyVrfId,
       "rcCfmL2IpTraceReplyVlanId": rcCfmL2IpTraceReplyVlanId,
       "rcCfmL2IpTraceReplyDestMacAddress": rcCfmL2IpTraceReplyDestMacAddress,
       "rcCfmL2IpTraceReplySeqNumber": rcCfmL2IpTraceReplySeqNumber,
       "rcCfmL2IpTraceReplyPortNum": rcCfmL2IpTraceReplyPortNum,
       "rcCfmL2IpTraceReplySrcMac": rcCfmL2IpTraceReplySrcMac,
       "rcCfmL2IpTraceReplyHostName": rcCfmL2IpTraceReplyHostName,
       "rcCfmL2IpTraceReplyLastSrcMac": rcCfmL2IpTraceReplyLastSrcMac,
       "rcCfmL2IpTraceReplyLastHostName": rcCfmL2IpTraceReplyLastHostName,
       "rcCfmL2IpTraceReplyFlag": rcCfmL2IpTraceReplyFlag,
       "rcPlugOptMod": rcPlugOptMod,
       "rcPlugOptModTable": rcPlugOptModTable,
       "rcPlugOptModEntry": rcPlugOptModEntry,
       "rcPlugOptModPortIndex": rcPlugOptModPortIndex,
       "rcPlugOptModDdmStatusMask": rcPlugOptModDdmStatusMask,
       "rcPlugOptModCalibration": rcPlugOptModCalibration,
       "rcPlugOptModPowerMeasure": rcPlugOptModPowerMeasure,
       "rcPlugOptModConnectorType": rcPlugOptModConnectorType,
       "rcPlugOptModVendorName": rcPlugOptModVendorName,
       "rcPlugOptModVendorPartNumber": rcPlugOptModVendorPartNumber,
       "rcPlugOptModVendorRevNumber": rcPlugOptModVendorRevNumber,
       "rcPlugOptModVendorSN": rcPlugOptModVendorSN,
       "rcPlugOptModVendorDateCode": rcPlugOptModVendorDateCode,
       "rcPlugOptModPEC": rcPlugOptModPEC,
       "rcPlugOptModCLEI": rcPlugOptModCLEI,
       "rcPlugOptModSupportsDDM": rcPlugOptModSupportsDDM,
       "rcPlugOptModAux1Monitoring": rcPlugOptModAux1Monitoring,
       "rcPlugOptModAux2Monitoring": rcPlugOptModAux2Monitoring,
       "rcPlugOptModWaveLength": rcPlugOptModWaveLength,
       "rcPlugOptModTemperature": rcPlugOptModTemperature,
       "rcPlugOptModTemperatureHighAlarmThreshold": rcPlugOptModTemperatureHighAlarmThreshold,
       "rcPlugOptModTemperatureLowAlarmThreshold": rcPlugOptModTemperatureLowAlarmThreshold,
       "rcPlugOptModTemperatureHighWarningThreshold": rcPlugOptModTemperatureHighWarningThreshold,
       "rcPlugOptModTemperatureLowWarningThreshold": rcPlugOptModTemperatureLowWarningThreshold,
       "rcPlugOptModVoltage": rcPlugOptModVoltage,
       "rcPlugOptModVoltageHighAlarmThreshold": rcPlugOptModVoltageHighAlarmThreshold,
       "rcPlugOptModVoltageLowAlarmThreshold": rcPlugOptModVoltageLowAlarmThreshold,
       "rcPlugOptModVoltageHighWarningThreshold": rcPlugOptModVoltageHighWarningThreshold,
       "rcPlugOptModVoltageLowWarningThreshold": rcPlugOptModVoltageLowWarningThreshold,
       "rcPlugOptModBias": rcPlugOptModBias,
       "rcPlugOptModBiasHighAlarmThreshold": rcPlugOptModBiasHighAlarmThreshold,
       "rcPlugOptModBiasLowAlarmThreshold": rcPlugOptModBiasLowAlarmThreshold,
       "rcPlugOptModBiasHighWarningThreshold": rcPlugOptModBiasHighWarningThreshold,
       "rcPlugOptModBiasLowWarningThreshold": rcPlugOptModBiasLowWarningThreshold,
       "rcPlugOptModTxPower": rcPlugOptModTxPower,
       "rcPlugOptModTxPowerHighAlarmThreshold": rcPlugOptModTxPowerHighAlarmThreshold,
       "rcPlugOptModTxPowerLowAlarmThreshold": rcPlugOptModTxPowerLowAlarmThreshold,
       "rcPlugOptModTxPowerHighWarningThreshold": rcPlugOptModTxPowerHighWarningThreshold,
       "rcPlugOptModTxPowerLowWarningThreshold": rcPlugOptModTxPowerLowWarningThreshold,
       "rcPlugOptModRxPower": rcPlugOptModRxPower,
       "rcPlugOptModRxPowerHighAlarmThreshold": rcPlugOptModRxPowerHighAlarmThreshold,
       "rcPlugOptModRxPowerLowAlarmThreshold": rcPlugOptModRxPowerLowAlarmThreshold,
       "rcPlugOptModRxPowerHighWarningThreshold": rcPlugOptModRxPowerHighWarningThreshold,
       "rcPlugOptModRxPowerLowWarningThreshold": rcPlugOptModRxPowerLowWarningThreshold,
       "rcPlugOptModAux1": rcPlugOptModAux1,
       "rcPlugOptModAux1HighAlarmThreshold": rcPlugOptModAux1HighAlarmThreshold,
       "rcPlugOptModAux1LowAlarmThreshold": rcPlugOptModAux1LowAlarmThreshold,
       "rcPlugOptModAux1HighWarningThreshold": rcPlugOptModAux1HighWarningThreshold,
       "rcPlugOptModAux1LowWarningThreshold": rcPlugOptModAux1LowWarningThreshold,
       "rcPlugOptModAux2": rcPlugOptModAux2,
       "rcPlugOptModAux2HighAlarmThreshold": rcPlugOptModAux2HighAlarmThreshold,
       "rcPlugOptModAux2LowAlarmThreshold": rcPlugOptModAux2LowAlarmThreshold,
       "rcPlugOptModAux2HighWarningThreshold": rcPlugOptModAux2HighWarningThreshold,
       "rcPlugOptModAux2LowWarningThreshold": rcPlugOptModAux2LowWarningThreshold,
       "rcPlugOptModTemperatureStatus": rcPlugOptModTemperatureStatus,
       "rcPlugOptModVoltageStatus": rcPlugOptModVoltageStatus,
       "rcPlugOptModBiasStatus": rcPlugOptModBiasStatus,
       "rcPlugOptModTxPowerStatus": rcPlugOptModTxPowerStatus,
       "rcPlugOptModRxPowerStatus": rcPlugOptModRxPowerStatus,
       "rcPlugOptModAux1Status": rcPlugOptModAux1Status,
       "rcPlugOptModAux2Status": rcPlugOptModAux2Status,
       "rcPlugOptModScalars": rcPlugOptModScalars,
       "rcPlugOptModDdmMonitor": rcPlugOptModDdmMonitor,
       "rcPlugOptModDdmMonitorInterval": rcPlugOptModDdmMonitorInterval,
       "rcPlugOptModDdmTrapSend": rcPlugOptModDdmTrapSend,
       "rcPlugOptModDdmAlarmPortdown": rcPlugOptModDdmAlarmPortdown,
       "rcVrrp": rcVrrp,
       "rcVrrpMib": rcVrrpMib,
       "rcVrrpObjects": rcVrrpObjects,
       "rcVrrpScalars": rcVrrpScalars,
       "rcVrrpPingVirtualAddrEnable": rcVrrpPingVirtualAddrEnable,
       "rcVrrpTrapStateTransitionType": rcVrrpTrapStateTransitionType,
       "rcVrrpTrapStateTransitionCause": rcVrrpTrapStateTransitionCause,
       "rcVrrpOperTable": rcVrrpOperTable,
       "rcVrrpOperEntry": rcVrrpOperEntry,
       "rcVrrpOperIfIndex": rcVrrpOperIfIndex,
       "rcVrrpOperVrId": rcVrrpOperVrId,
       "rcVrrpOperIpAddr": rcVrrpOperIpAddr,
       "rcVrrpOperVirtualMacAddr": rcVrrpOperVirtualMacAddr,
       "rcVrrpOperState": rcVrrpOperState,
       "rcVrrpOperControl": rcVrrpOperControl,
       "rcVrrpOperPriority": rcVrrpOperPriority,
       "rcVrrpOperIpAddrCount": rcVrrpOperIpAddrCount,
       "rcVrrpOperMasterIpAddr": rcVrrpOperMasterIpAddr,
       "rcVrrpOperAuthType": rcVrrpOperAuthType,
       "rcVrrpOperAuthKey": rcVrrpOperAuthKey,
       "rcVrrpOperHMACMD5Key": rcVrrpOperHMACMD5Key,
       "rcVrrpOperAdvertisementInterval": rcVrrpOperAdvertisementInterval,
       "rcVrrpOperPreemptMode": rcVrrpOperPreemptMode,
       "rcVrrpOperVirtualRouterUpTime": rcVrrpOperVirtualRouterUpTime,
       "rcVrrpOperRowStatus": rcVrrpOperRowStatus,
       "rcVrrpOperCriticalIpAddr": rcVrrpOperCriticalIpAddr,
       "rcVrrpOperHoldDownTimer": rcVrrpOperHoldDownTimer,
       "rcVrrpOperHoldDownState": rcVrrpOperHoldDownState,
       "rcVrrpOperHoldDownTimeRemaining": rcVrrpOperHoldDownTimeRemaining,
       "rcVrrpOperAction": rcVrrpOperAction,
       "rcVrrpOperCriticalIpAddrEnable": rcVrrpOperCriticalIpAddrEnable,
       "rcVrrpOperBackUpMaster": rcVrrpOperBackUpMaster,
       "rcVrrpOperBackUpMasterState": rcVrrpOperBackUpMasterState,
       "rcVrrpOperFasterAdvInterval": rcVrrpOperFasterAdvInterval,
       "rcVrrpOperFasterAdvIntervalEnable": rcVrrpOperFasterAdvIntervalEnable,
       "rcVrrpRouterStatsTable": rcVrrpRouterStatsTable,
       "rcVrrpRouterStatsEntry": rcVrrpRouterStatsEntry,
       "rcVrrpStatsIfIndex": rcVrrpStatsIfIndex,
       "rcVrrpStatsVrId": rcVrrpStatsVrId,
       "rcVrrpStatsBecomeMaster": rcVrrpStatsBecomeMaster,
       "rcVrrpStatsAdvertiseRcvd": rcVrrpStatsAdvertiseRcvd,
       "rcVrrpStatsAdvertiseIntervalErrors": rcVrrpStatsAdvertiseIntervalErrors,
       "rcVrrpStatsPasswdSecurityViolations": rcVrrpStatsPasswdSecurityViolations,
       "rcVrrpStatsHmacSecurityViolations": rcVrrpStatsHmacSecurityViolations,
       "rcVrrpStatsIpTtlErrors": rcVrrpStatsIpTtlErrors,
       "rcVrrpStatsPriorityZeroPktsRcvd": rcVrrpStatsPriorityZeroPktsRcvd,
       "rcVrrpStatsPriorityZeroPktsSent": rcVrrpStatsPriorityZeroPktsSent,
       "rcVrrpStatsInvalidTypePktsRcvd": rcVrrpStatsInvalidTypePktsRcvd,
       "rcVrrpStatsAddressListErrors": rcVrrpStatsAddressListErrors,
       "rcVrrpStatsUnknownAuthType": rcVrrpStatsUnknownAuthType,
       "rcVrrpStatsAuthTypeErrors": rcVrrpStatsAuthTypeErrors,
       "rcVrrpNotifications": rcVrrpNotifications,
       "rcVrrpTrapStateTransition": rcVrrpTrapStateTransition,
       "rcMpls": rcMpls,
       "rcMplsMib": rcMplsMib,
       "rcMplsNotifications": rcMplsNotifications,
       "rcMplsObjects": rcMplsObjects,
       "rcMplsGlobalGroup": rcMplsGlobalGroup,
       "rcMplsGlobalScalars": rcMplsGlobalScalars,
       "rcMplsRouterId": rcMplsRouterId,
       "rcMplsLdpAdminStatus": rcMplsLdpAdminStatus,
       "rcMplsLdpPenultimateHopPop": rcMplsLdpPenultimateHopPop,
       "rcMplsLdpHelloHoldTimer": rcMplsLdpHelloHoldTimer,
       "rcMplsLdpSessionKeepAlive": rcMplsLdpSessionKeepAlive,
       "rcMplsLdpPathVectorLimit": rcMplsLdpPathVectorLimit,
       "rcMplsLdpHopCountLimit": rcMplsLdpHopCountLimit,
       "rcMplsLdpEgressPolicyStatus": rcMplsLdpEgressPolicyStatus,
       "rcMplsRsvpAdminStatus": rcMplsRsvpAdminStatus,
       "rcMplsRsvpPenultimateHopPop": rcMplsRsvpPenultimateHopPop,
       "rcMplsRsvpHelloInterval": rcMplsRsvpHelloInterval,
       "rcMplsRsvpRefreshReduction": rcMplsRsvpRefreshReduction,
       "rcMplsRsvpRefreshInterval": rcMplsRsvpRefreshInterval,
       "rcMplsRsvpRefreshMultiplier": rcMplsRsvpRefreshMultiplier,
       "rcMplsRsvpMessageBundling": rcMplsRsvpMessageBundling,
       "rcMplsLspIngressStartLabel": rcMplsLspIngressStartLabel,
       "rcMplsLspEgressStartLabel": rcMplsLspEgressStartLabel,
       "rcMplsLspIngressPktEnable": rcMplsLspIngressPktEnable,
       "rcMplsLspEgressPktEnable": rcMplsLspEgressPktEnable,
       "rcMplsLdpClearStats": rcMplsLdpClearStats,
       "rcMplsRsvpClearStats": rcMplsRsvpClearStats,
       "rcMplsLspClearStats": rcMplsLspClearStats,
       "rcMplsIpStaticFecTable": rcMplsIpStaticFecTable,
       "rcMplsIpStaticFecEntry": rcMplsIpStaticFecEntry,
       "rcMplsIpStaticFecDest": rcMplsIpStaticFecDest,
       "rcMplsIpStaticFecMask": rcMplsIpStaticFecMask,
       "rcMplsIpStaticFecTunnelName": rcMplsIpStaticFecTunnelName,
       "rcMplsIpStaticFecTunnelId": rcMplsIpStaticFecTunnelId,
       "rcMplsIpStaticFecEgressAddr": rcMplsIpStaticFecEgressAddr,
       "rcMplsIpStaticFecEgressMask": rcMplsIpStaticFecEgressMask,
       "rcMplsIpStaticFecState": rcMplsIpStaticFecState,
       "rcMplsIpStaticFecRowStatus": rcMplsIpStaticFecRowStatus,
       "rcMplsIpFtnTable": rcMplsIpFtnTable,
       "rcMplsIpFtnEntry": rcMplsIpFtnEntry,
       "rcMplsIpFtnDest": rcMplsIpFtnDest,
       "rcMplsIpFtnMask": rcMplsIpFtnMask,
       "rcMplsIpFtnType": rcMplsIpFtnType,
       "rcMplsIpFtnOutLabel": rcMplsIpFtnOutLabel,
       "rcMplsIpFtnOutIfIndex": rcMplsIpFtnOutIfIndex,
       "rcMplsIpFtnNextHop": rcMplsIpFtnNextHop,
       "rcMplsIpIlmTable": rcMplsIpIlmTable,
       "rcMplsIpIlmEntry": rcMplsIpIlmEntry,
       "rcMplsIpIlmInLabel": rcMplsIpIlmInLabel,
       "rcMplsIpIlmInIfIndex": rcMplsIpIlmInIfIndex,
       "rcMplsIpIlmOutLabel": rcMplsIpIlmOutLabel,
       "rcMplsIpIlmOutIfIndex": rcMplsIpIlmOutIfIndex,
       "rcMplsIpIlmNextHop": rcMplsIpIlmNextHop,
       "rcMplsIngressLspStatTable": rcMplsIngressLspStatTable,
       "rcMplsIngressLspStatEntry": rcMplsIngressLspStatEntry,
       "rcMplsIngressLspPort": rcMplsIngressLspPort,
       "rcMplsIngressLspLabel": rcMplsIngressLspLabel,
       "rcMplsIngressLspPkts": rcMplsIngressLspPkts,
       "rcMplsEgressLspStatTable": rcMplsEgressLspStatTable,
       "rcMplsEgressLspStatEntry": rcMplsEgressLspStatEntry,
       "rcMplsEgressLspPort": rcMplsEgressLspPort,
       "rcMplsEgressLspLabel": rcMplsEgressLspLabel,
       "rcMplsEgressLspPkts": rcMplsEgressLspPkts,
       "rcMplsRsvpGroup": rcMplsRsvpGroup,
       "rcMplsRsvpSummaryGroup": rcMplsRsvpSummaryGroup,
       "rcMplsRsvpSummaryVersion": rcMplsRsvpSummaryVersion,
       "rcMplsRsvpSummaryState": rcMplsRsvpSummaryState,
       "rcMplsRsvpSummaryLSPRetryTimer": rcMplsRsvpSummaryLSPRetryTimer,
       "rcMplsRsvpSummaryLSPRetryLimit": rcMplsRsvpSummaryLSPRetryLimit,
       "rcMplsRsvpSummaryLSPDecayRate": rcMplsRsvpSummaryLSPDecayRate,
       "rcMplsRsvpSummaryPHP": rcMplsRsvpSummaryPHP,
       "rcMplsRsvpTunnelExtTable": rcMplsRsvpTunnelExtTable,
       "rcMplsRsvpTunnelExtEntry": rcMplsRsvpTunnelExtEntry,
       "rcMplsRsvpTunnelExtIndex": rcMplsRsvpTunnelExtIndex,
       "rcMplsRsvpTunnelExtInstance": rcMplsRsvpTunnelExtInstance,
       "rcMplsRsvpTunnelExtIngressLSRId": rcMplsRsvpTunnelExtIngressLSRId,
       "rcMplsRsvpTunnelExtEgressLSRId": rcMplsRsvpTunnelExtEgressLSRId,
       "rcMplsRsvpTunnelExtName": rcMplsRsvpTunnelExtName,
       "rcMplsRsvpTunnelExtSwitchover": rcMplsRsvpTunnelExtSwitchover,
       "rcMplsRsvpTunnelExtActiveStatus": rcMplsRsvpTunnelExtActiveStatus,
       "rcMplsRsvpTunnelExtResStyle": rcMplsRsvpTunnelExtResStyle,
       "rcMplsRsvpTunnelExtLspId": rcMplsRsvpTunnelExtLspId,
       "rcMplsRsvpTunnelExtERO": rcMplsRsvpTunnelExtERO,
       "rcMplsRsvpTunnelExtRRO": rcMplsRsvpTunnelExtRRO,
       "rcMplsRsvpTunnelExtInIfIndex": rcMplsRsvpTunnelExtInIfIndex,
       "rcMplsRsvpTunnelExtInLabel": rcMplsRsvpTunnelExtInLabel,
       "rcMplsRsvpTunnelExtInNeighbor": rcMplsRsvpTunnelExtInNeighbor,
       "rcMplsRsvpTunnelExtOutIfIndex": rcMplsRsvpTunnelExtOutIfIndex,
       "rcMplsRsvpTunnelExtOutLabel": rcMplsRsvpTunnelExtOutLabel,
       "rcMplsRsvpTunnelExtOutNeighbor": rcMplsRsvpTunnelExtOutNeighbor,
       "rcMplsRsvpTunnelExtTSpecRate": rcMplsRsvpTunnelExtTSpecRate,
       "rcMplsRsvpTunnelExtTSpecSize": rcMplsRsvpTunnelExtTSpecSize,
       "rcMplsRsvpTunnelExtTSpecPeak": rcMplsRsvpTunnelExtTSpecPeak,
       "rcMplsRsvpTunnelExtTSpecMin": rcMplsRsvpTunnelExtTSpecMin,
       "rcMplsRsvpTunnelExtTSpecMax": rcMplsRsvpTunnelExtTSpecMax,
       "rcMplsRsvpTunnelExtInstanceUpTime": rcMplsRsvpTunnelExtInstanceUpTime,
       "rcMplsRsvpTunnelExtLSPUpTime": rcMplsRsvpTunnelExtLSPUpTime,
       "rcMplsRsvpNeighborTable": rcMplsRsvpNeighborTable,
       "rcMplsRsvpNeighborEntry": rcMplsRsvpNeighborEntry,
       "rcMplsRsvpNeighborAddress": rcMplsRsvpNeighborAddress,
       "rcMplsRsvpNeighborHelloState": rcMplsRsvpNeighborHelloState,
       "rcMplsRsvpNeighborIfIndex": rcMplsRsvpNeighborIfIndex,
       "rcMplsRsvpNeighborTime": rcMplsRsvpNeighborTime,
       "rcMplsRsvpNeighborPeriod": rcMplsRsvpNeighborPeriod,
       "rcMplsRsvpNeighborSendCnt": rcMplsRsvpNeighborSendCnt,
       "rcMplsRsvpNeighborRcvCnt": rcMplsRsvpNeighborRcvCnt,
       "rcMplsRsvpNeighborLocalInstance": rcMplsRsvpNeighborLocalInstance,
       "rcMplsRsvpNeighborRemoteInstance": rcMplsRsvpNeighborRemoteInstance,
       "rcMplsRsvpNeighborCreationTime": rcMplsRsvpNeighborCreationTime,
       "rcMplsRsvpNeighborLastPktRxTime": rcMplsRsvpNeighborLastPktRxTime,
       "rcMplsRsvpNeighborRefReduction": rcMplsRsvpNeighborRefReduction,
       "rcMplsRsvpInterfaceTable": rcMplsRsvpInterfaceTable,
       "rcMplsRsvpInterfaceEntry": rcMplsRsvpInterfaceEntry,
       "rcMplsRsvpInterfaceIfIndex": rcMplsRsvpInterfaceIfIndex,
       "rcMplsRsvpInterfaceAddress": rcMplsRsvpInterfaceAddress,
       "rcMplsRsvpInterfaceRefreshInterval": rcMplsRsvpInterfaceRefreshInterval,
       "rcMplsRsvpInterfaceRefreshMult": rcMplsRsvpInterfaceRefreshMult,
       "rcMplsRsvpInterfaceHelloInterval": rcMplsRsvpInterfaceHelloInterval,
       "rcMplsRsvpInterfaceRefreshReduction": rcMplsRsvpInterfaceRefreshReduction,
       "rcMplsRsvpInterfaceMessageBundling": rcMplsRsvpInterfaceMessageBundling,
       "rcMplsRsvpStatsTable": rcMplsRsvpStatsTable,
       "rcMplsRsvpStatsEntry": rcMplsRsvpStatsEntry,
       "rcMplsRsvpStatsIfIndex": rcMplsRsvpStatsIfIndex,
       "rcMplsRsvpStatsPathRcv": rcMplsRsvpStatsPathRcv,
       "rcMplsRsvpStatsPathSent": rcMplsRsvpStatsPathSent,
       "rcMplsRsvpStatsPathErrRcv": rcMplsRsvpStatsPathErrRcv,
       "rcMplsRsvpStatsPathErrSent": rcMplsRsvpStatsPathErrSent,
       "rcMplsRsvpStatsPathTearRcv": rcMplsRsvpStatsPathTearRcv,
       "rcMplsRsvpStatsPathTearSent": rcMplsRsvpStatsPathTearSent,
       "rcMplsRsvpStatsResvRcv": rcMplsRsvpStatsResvRcv,
       "rcMplsRsvpStatsResvSent": rcMplsRsvpStatsResvSent,
       "rcMplsRsvpStatsResvErrRcv": rcMplsRsvpStatsResvErrRcv,
       "rcMplsRsvpStatsResvErrSent": rcMplsRsvpStatsResvErrSent,
       "rcMplsRsvpStatsResvTearRcv": rcMplsRsvpStatsResvTearRcv,
       "rcMplsRsvpStatsResvTearSent": rcMplsRsvpStatsResvTearSent,
       "rcMplsRsvpStatsConfTearRcv": rcMplsRsvpStatsConfTearRcv,
       "rcMplsRsvpStatsConfTearSent": rcMplsRsvpStatsConfTearSent,
       "rcMplsRsvpStatsAckRcv": rcMplsRsvpStatsAckRcv,
       "rcMplsRsvpStatsAckSent": rcMplsRsvpStatsAckSent,
       "rcMplsRsvpStatsSRefreshRcv": rcMplsRsvpStatsSRefreshRcv,
       "rcMplsRsvpStatsSRefreshSent": rcMplsRsvpStatsSRefreshSent,
       "rcMplsRsvpStatsHelloReqRcv": rcMplsRsvpStatsHelloReqRcv,
       "rcMplsRsvpStatsHelloReqSent": rcMplsRsvpStatsHelloReqSent,
       "rcMplsRsvpStatsHelloAckRcv": rcMplsRsvpStatsHelloAckRcv,
       "rcMplsRsvpStatsHelloAckSent": rcMplsRsvpStatsHelloAckSent,
       "rcMplsRsvpStatsBadIpHdr": rcMplsRsvpStatsBadIpHdr,
       "rcMplsRsvpStatsBadVersion": rcMplsRsvpStatsBadVersion,
       "rcMplsRsvpStatsBadRsvpLen": rcMplsRsvpStatsBadRsvpLen,
       "rcMplsRsvpStatsBadCksum": rcMplsRsvpStatsBadCksum,
       "rcMplsRsvpStatsBadMsgType": rcMplsRsvpStatsBadMsgType,
       "rcMplsRsvpStatsBadMsgForm": rcMplsRsvpStatsBadMsgForm,
       "rcMplsRsvpStatsBadIntf": rcMplsRsvpStatsBadIntf,
       "rcMplsRsvpStatsClear": rcMplsRsvpStatsClear,
       "rcMplsLdpGroup": rcMplsLdpGroup,
       "rcMplsLdpSummaryGroup": rcMplsLdpSummaryGroup,
       "rcMplsLdpSummaryIntAdjCount": rcMplsLdpSummaryIntAdjCount,
       "rcMplsLdpSummaryExtAdjCount": rcMplsLdpSummaryExtAdjCount,
       "rcMplsLdpSummarySessionCount": rcMplsLdpSummarySessionCount,
       "rcMplsLdpSummaryRouteCount": rcMplsLdpSummaryRouteCount,
       "rcMplsLdpSummaryLdpId": rcMplsLdpSummaryLdpId,
       "rcMplsLdpSummaryLspCount": rcMplsLdpSummaryLspCount,
       "rcMplsLdpSummaryInSegCount": rcMplsLdpSummaryInSegCount,
       "rcMplsLdpSummaryOutSegCount": rcMplsLdpSummaryOutSegCount,
       "rcMplsLdpSummaryRedistConn": rcMplsLdpSummaryRedistConn,
       "rcMplsLdpDiscoveryTable": rcMplsLdpDiscoveryTable,
       "rcMplsLdpDiscoveryEntry": rcMplsLdpDiscoveryEntry,
       "rcMplsLdpDiscoveryIfIndex": rcMplsLdpDiscoveryIfIndex,
       "rcMplsLdpDiscoveryPeerLdpId": rcMplsLdpDiscoveryPeerLdpId,
       "rcMplsLdpDiscoveryPeerTransportAddr": rcMplsLdpDiscoveryPeerTransportAddr,
       "rcMplsLdpDiscoveryNegotiatedHoldTime": rcMplsLdpDiscoveryNegotiatedHoldTime,
       "rcMplsLdpDiscoveryConfSeqNum": rcMplsLdpDiscoveryConfSeqNum,
       "rcMplsLdpDiscoveryExtendedDiscovery": rcMplsLdpDiscoveryExtendedDiscovery,
       "rcMplsLdpPathTable": rcMplsLdpPathTable,
       "rcMplsLdpPathEntry": rcMplsLdpPathEntry,
       "rcMplsLdpPathType": rcMplsLdpPathType,
       "rcMplsLdpPathAddrType": rcMplsLdpPathAddrType,
       "rcMplsLdpPathAddrPrefixLength": rcMplsLdpPathAddrPrefixLength,
       "rcMplsLdpPathAddr": rcMplsLdpPathAddr,
       "rcMplsLdpPathInLabel": rcMplsLdpPathInLabel,
       "rcMplsLdpPathRemotePeerTable": rcMplsLdpPathRemotePeerTable,
       "rcMplsLdpPathRemotePeerEntry": rcMplsLdpPathRemotePeerEntry,
       "rcMplsLdpPathRemotePeerType": rcMplsLdpPathRemotePeerType,
       "rcMplsLdpPathRemotePeerAddrType": rcMplsLdpPathRemotePeerAddrType,
       "rcMplsLdpPathRemotePeerAddrPrefixLength": rcMplsLdpPathRemotePeerAddrPrefixLength,
       "rcMplsLdpPathRemotePeerAddr": rcMplsLdpPathRemotePeerAddr,
       "rcMplsLdpPathRemotePeerId": rcMplsLdpPathRemotePeerId,
       "rcMplsLdpPathRemotePeerLdpId": rcMplsLdpPathRemotePeerLdpId,
       "rcMplsLdpPathRemotePeerOutLabel": rcMplsLdpPathRemotePeerOutLabel,
       "rcMplsLdpPathRemotePeerState": rcMplsLdpPathRemotePeerState,
       "rcMplsLdpRouteTable": rcMplsLdpRouteTable,
       "rcMplsLdpRouteEntry": rcMplsLdpRouteEntry,
       "rcMplsLdpRouteType": rcMplsLdpRouteType,
       "rcMplsLdpRouteAddrType": rcMplsLdpRouteAddrType,
       "rcMplsLdpRouteAddrPrefixLength": rcMplsLdpRouteAddrPrefixLength,
       "rcMplsLdpRouteAddr": rcMplsLdpRouteAddr,
       "rcMplsLdpRouteIfIndex": rcMplsLdpRouteIfIndex,
       "rcMplsLdpRouteNextHopAddrType": rcMplsLdpRouteNextHopAddrType,
       "rcMplsLdpRouteNextHopAddr": rcMplsLdpRouteNextHopAddr,
       "rcMplsLdpSessionTable": rcMplsLdpSessionTable,
       "rcMplsLdpSessionEntry": rcMplsLdpSessionEntry,
       "rcMplsLdpSessionEntityLdpId": rcMplsLdpSessionEntityLdpId,
       "rcMplsLdpSessionEntityIndex": rcMplsLdpSessionEntityIndex,
       "rcMplsLdpSessionPeerLdpId": rcMplsLdpSessionPeerLdpId,
       "rcMplsLdpSessionStateLastChange": rcMplsLdpSessionStateLastChange,
       "rcMplsLdpSessionState": rcMplsLdpSessionState,
       "rcMplsLdpSessionRole": rcMplsLdpSessionRole,
       "rcMplsLdpSessionProtocolVersion": rcMplsLdpSessionProtocolVersion,
       "rcMplsLdpSessionKeepAliveHoldTimeRem": rcMplsLdpSessionKeepAliveHoldTimeRem,
       "rcMplsLdpSessionKeepAliveTime": rcMplsLdpSessionKeepAliveTime,
       "rcMplsLdpSessionMaxPduLength": rcMplsLdpSessionMaxPduLength,
       "rcMplsLdpSessionDiscontinuityTime": rcMplsLdpSessionDiscontinuityTime,
       "rcMplsLdpSessionHoldTime": rcMplsLdpSessionHoldTime,
       "rcMplsLdpSessionUpTime": rcMplsLdpSessionUpTime,
       "rcMplsLdpSessionMessagesSent": rcMplsLdpSessionMessagesSent,
       "rcMplsLdpSessionMessagesRecv": rcMplsLdpSessionMessagesRecv,
       "rcMplsLdpInterfaceTable": rcMplsLdpInterfaceTable,
       "rcMplsLdpInterfaceEntry": rcMplsLdpInterfaceEntry,
       "rcMplsLdpInterfaceIfIndex": rcMplsLdpInterfaceIfIndex,
       "rcMplsLdpInterfaceNbrCount": rcMplsLdpInterfaceNbrCount,
       "rcMplsLdpInterfaceNextHello": rcMplsLdpInterfaceNextHello,
       "rcMplsLdpInterfaceConfHoldTime": rcMplsLdpInterfaceConfHoldTime,
       "rcMplsLdpInterfaceNegHoldTime": rcMplsLdpInterfaceNegHoldTime,
       "rcMplsLdpInterfaceHelloInterval": rcMplsLdpInterfaceHelloInterval,
       "rcMplsLdpStatsTable": rcMplsLdpStatsTable,
       "rcMplsLdpStatsEntry": rcMplsLdpStatsEntry,
       "rcMplsLdpStatsPeerAddress": rcMplsLdpStatsPeerAddress,
       "rcMplsLdpStatsNotifyRecv": rcMplsLdpStatsNotifyRecv,
       "rcMplsLdpStatsNotifySent": rcMplsLdpStatsNotifySent,
       "rcMplsLdpStatsHelloRecv": rcMplsLdpStatsHelloRecv,
       "rcMplsLdpStatsHelloSent": rcMplsLdpStatsHelloSent,
       "rcMplsLdpStatsInitRecv": rcMplsLdpStatsInitRecv,
       "rcMplsLdpStatsInitSent": rcMplsLdpStatsInitSent,
       "rcMplsLdpStatsKeepRecv": rcMplsLdpStatsKeepRecv,
       "rcMplsLdpStatsKeepSent": rcMplsLdpStatsKeepSent,
       "rcMplsLdpStatsAddrRecv": rcMplsLdpStatsAddrRecv,
       "rcMplsLdpStatsAddrSent": rcMplsLdpStatsAddrSent,
       "rcMplsLdpStatsAddrWdrRecv": rcMplsLdpStatsAddrWdrRecv,
       "rcMplsLdpStatsAddrWdrSent": rcMplsLdpStatsAddrWdrSent,
       "rcMplsLdpStatsLabelMapRecv": rcMplsLdpStatsLabelMapRecv,
       "rcMplsLdpStatsLabelMapSent": rcMplsLdpStatsLabelMapSent,
       "rcMplsLdpStatsLabelReqRecv": rcMplsLdpStatsLabelReqRecv,
       "rcMplsLdpStatsLabelReqSent": rcMplsLdpStatsLabelReqSent,
       "rcMplsLdpStatsLabelWdrRecv": rcMplsLdpStatsLabelWdrRecv,
       "rcMplsLdpStatsLabelWdrSent": rcMplsLdpStatsLabelWdrSent,
       "rcMplsLdpStatsLabelRelRecv": rcMplsLdpStatsLabelRelRecv,
       "rcMplsLdpStatsLabelRelSent": rcMplsLdpStatsLabelRelSent,
       "rcMplsLdpStatsLabelAbrRecv": rcMplsLdpStatsLabelAbrRecv,
       "rcMplsLdpStatsLabelAbrSent": rcMplsLdpStatsLabelAbrSent,
       "rcMplsLdpStatsSessionUp": rcMplsLdpStatsSessionUp,
       "rcMplsLdpStatsSessionDown": rcMplsLdpStatsSessionDown,
       "rcMplsLdpStatsBadLdpIdentifierErrors": rcMplsLdpStatsBadLdpIdentifierErrors,
       "rcMplsLdpStatsBadPduLengthErrors": rcMplsLdpStatsBadPduLengthErrors,
       "rcMplsLdpStatsBadMessageLengthErrors": rcMplsLdpStatsBadMessageLengthErrors,
       "rcMplsLdpStatsUnknownMessageErrors": rcMplsLdpStatsUnknownMessageErrors,
       "rcMplsLdpStatsUnknownTlvErrors": rcMplsLdpStatsUnknownTlvErrors,
       "rcMplsLdpStatsBadTlvLengthErrors": rcMplsLdpStatsBadTlvLengthErrors,
       "rcMplsLdpStatsMalformedTlvValueErrors": rcMplsLdpStatsMalformedTlvValueErrors,
       "rcMplsLdpStatsHoldTimerExpErrors": rcMplsLdpStatsHoldTimerExpErrors,
       "rcMplsLdpStatsSessionRejectedNoHelloErrors": rcMplsLdpStatsSessionRejectedNoHelloErrors,
       "rcMplsLdpStatsSessionRejectedBadParmAdvErrors": rcMplsLdpStatsSessionRejectedBadParmAdvErrors,
       "rcMplsLdpStatsSessionRejectedMaxPduErrors": rcMplsLdpStatsSessionRejectedMaxPduErrors,
       "rcMplsLdpStatsSessionRejectedBadLabelRangeErrors": rcMplsLdpStatsSessionRejectedBadLabelRangeErrors,
       "rcMplsLdpStatsSessionRejectedSetupAbortErrors": rcMplsLdpStatsSessionRejectedSetupAbortErrors,
       "rcMplsLdpStatsSessionRejectedBadKeepaliveErrors": rcMplsLdpStatsSessionRejectedBadKeepaliveErrors,
       "rcMplsLdpStatsSessionOtherErrors": rcMplsLdpStatsSessionOtherErrors,
       "rcMplsLdpStatsClear": rcMplsLdpStatsClear,
       "rcMplsNotificationObjects": rcMplsNotificationObjects,
       "rcMplsLdpStatusNotificationEnable": rcMplsLdpStatusNotificationEnable,
       "rcMplsLdpSessionThresholdNotificationEnable": rcMplsLdpSessionThresholdNotificationEnable,
       "rcMplsLdpPathVectorLimitNotificationEnable": rcMplsLdpPathVectorLimitNotificationEnable,
       "rcIpMRoute": rcIpMRoute,
       "rcIpMRouteMIBObjects": rcIpMRouteMIBObjects,
       "rcIpMRouteScalars": rcIpMRouteScalars,
       "rcIpMRouteStatsEnabled": rcIpMRouteStatsEnabled,
       "rcIpMRouteStatsClear": rcIpMRouteStatsClear,
       "rcIpMRouteStatsTable": rcIpMRouteStatsTable,
       "rcIpMRouteStatsEntry": rcIpMRouteStatsEntry,
       "rcIpMRouteStatsGroupAddress": rcIpMRouteStatsGroupAddress,
       "rcIpMRouteStatsSourceCount": rcIpMRouteStatsSourceCount,
       "rcIpMRouteStatsPkts": rcIpMRouteStatsPkts,
       "rcIpMRouteStatsBytes": rcIpMRouteStatsBytes,
       "rcIpMRouteStatsAverageSizePerPkt": rcIpMRouteStatsAverageSizePerPkt,
       "rcIpMRouteStatsDropPkts": rcIpMRouteStatsDropPkts,
       "rcIpMRouteStatsDropBytes": rcIpMRouteStatsDropBytes,
       "rcIpMRouteStatsPktsPerSecond": rcIpMRouteStatsPktsPerSecond,
       "rcPlsb": rcPlsb,
       "rcPlsbGlobal": rcPlsbGlobal,
       "rcPlsbGlobalVlans": rcPlsbGlobalVlans,
       "rcPlsbGlobalEnable": rcPlsbGlobalEnable,
       "rcPlsbGlobalMsti": rcPlsbGlobalMsti,
       "rcPlsbGlobalEtherType": rcPlsbGlobalEtherType,
       "rcMsdp": rcMsdp,
       "rcMsdpMib": rcMsdpMib,
       "rcMsdpNotifications": rcMsdpNotifications,
       "rcnMsdpMaxSACacheWarnSet": rcnMsdpMaxSACacheWarnSet,
       "rcnMsdpMaxSACacheWarnClear": rcnMsdpMaxSACacheWarnClear,
       "rcnMsdpMaxSACacheErrorSet": rcnMsdpMaxSACacheErrorSet,
       "rcnMsdpMaxSACacheErrorClear": rcnMsdpMaxSACacheErrorClear,
       "rcnMsdpMaxPeerSACacheWarnSet": rcnMsdpMaxPeerSACacheWarnSet,
       "rcnMsdpMaxPeerSACacheWarnClear": rcnMsdpMaxPeerSACacheWarnClear,
       "rcnMsdpMaxPeerSACacheErrorSet": rcnMsdpMaxPeerSACacheErrorSet,
       "rcnMsdpMaxPeerSACacheErrorClear": rcnMsdpMaxPeerSACacheErrorClear,
       "rcnMsdpEstablished": rcnMsdpEstablished,
       "rcnMsdpBackwardTransition": rcnMsdpBackwardTransition,
       "rcMsdpObjects": rcMsdpObjects,
       "rcMsdpScalars": rcMsdpScalars,
       "rcMsdpRouteMapName": rcMsdpRouteMapName,
       "rcMsdpRedistributeFilterEnabled": rcMsdpRedistributeFilterEnabled,
       "rcMsdpRedistributeFilterApply": rcMsdpRedistributeFilterApply,
       "rcMsdpImplicitDefaultPeerEnabled": rcMsdpImplicitDefaultPeerEnabled,
       "rcMsdpSACacheStatsClear": rcMsdpSACacheStatsClear,
       "rcMsdpPeerTable": rcMsdpPeerTable,
       "rcMsdpPeerEntry": rcMsdpPeerEntry,
       "rcMsdpPeerAsNumber": rcMsdpPeerAsNumber,
       "rcMsdpPeerTooShortMessages": rcMsdpPeerTooShortMessages,
       "rcMsdpPeerInBadMessages": rcMsdpPeerInBadMessages,
       "rcMsdpPeerInKeepAliveMessages": rcMsdpPeerInKeepAliveMessages,
       "rcMsdpPeerOutKeepAliveMessages": rcMsdpPeerOutKeepAliveMessages,
       "rcMsdpPeerInSAFilterEnabled": rcMsdpPeerInSAFilterEnabled,
       "rcMsdpPeerInSAFilterRouteMapName": rcMsdpPeerInSAFilterRouteMapName,
       "rcMsdpPeerOutSAFilterEnabled": rcMsdpPeerOutSAFilterEnabled,
       "rcMsdpPeerOutSAFilterRouteMapName": rcMsdpPeerOutSAFilterRouteMapName,
       "rcMsdpPeerDescription": rcMsdpPeerDescription,
       "rcMsdpPeerSALimit": rcMsdpPeerSALimit,
       "rcMsdpPeerMd5AuthEnabled": rcMsdpPeerMd5AuthEnabled,
       "rcMsdpPeerMd5AuthPassword": rcMsdpPeerMd5AuthPassword,
       "rcMsdpPeerSAsLearnedFromThisPeer": rcMsdpPeerSAsLearnedFromThisPeer,
       "rcMsdpPeerSAsAdvertisedToThisPeer": rcMsdpPeerSAsAdvertisedToThisPeer,
       "rcMsdpPeerUpOrDownTime": rcMsdpPeerUpOrDownTime,
       "rcMsdpPeerConnAndStatsClearedTime": rcMsdpPeerConnAndStatsClearedTime,
       "rcMsdpPeerRouteMapName": rcMsdpPeerRouteMapName,
       "rcMsdpPeerAdminEnabled": rcMsdpPeerAdminEnabled,
       "rcMsdpPeerOperEnabled": rcMsdpPeerOperEnabled,
       "rcMsdpPeerDefaultPeerState": rcMsdpPeerDefaultPeerState,
       "rcMsdpPeerDefaultPeer": rcMsdpPeerDefaultPeer,
       "rcMsdpSACacheTable": rcMsdpSACacheTable,
       "rcMsdpSACacheEntry": rcMsdpSACacheEntry,
       "rcMsdpSACacheGroupAddr": rcMsdpSACacheGroupAddr,
       "rcMsdpSACacheSourceAddr": rcMsdpSACacheSourceAddr,
       "rcMsdpSACacheOriginRP": rcMsdpSACacheOriginRP,
       "rcMsdpSACacheTypeInformation": rcMsdpSACacheTypeInformation,
       "rcMsdpSACacheOriginatorAsNumber": rcMsdpSACacheOriginatorAsNumber,
       "rcMsdpSACacheRouteType": rcMsdpSACacheRouteType,
       "rcMsdpNotificationObjects": rcMsdpNotificationObjects,
       "rcMsdpSACacheType": rcMsdpSACacheType,
       "rcMsdpVrfId": rcMsdpVrfId,
       "rcBfd": rcBfd,
       "rcBfdTmpMib": rcBfdTmpMib,
       "rcBfdTmpNotifications": rcBfdTmpNotifications,
       "rcBfdTmpSessUp": rcBfdTmpSessUp,
       "rcBfdTmpSessDown": rcBfdTmpSessDown,
       "rcBfdTmpObjects": rcBfdTmpObjects,
       "rcBfdTmpScalarObjects": rcBfdTmpScalarObjects,
       "rcBfdTmpAdminStatus": rcBfdTmpAdminStatus,
       "rcBfdTmpVersionNumber": rcBfdTmpVersionNumber,
       "rcBfdTmpSessNotificationsEnable": rcBfdTmpSessNotificationsEnable,
       "rcBfdTmpSessTable": rcBfdTmpSessTable,
       "rcBfdTmpSessEntry": rcBfdTmpSessEntry,
       "rcBfdTmpSessIndex": rcBfdTmpSessIndex,
       "rcBfdTmpSessApplicationId": rcBfdTmpSessApplicationId,
       "rcBfdTmpSessDiscriminator": rcBfdTmpSessDiscriminator,
       "rcBfdTmpSessRemoteDiscr": rcBfdTmpSessRemoteDiscr,
       "rcBfdTmpSessUdpPort": rcBfdTmpSessUdpPort,
       "rcBfdTmpSessState": rcBfdTmpSessState,
       "rcBfdTmpSessRemoteHeardFlag": rcBfdTmpSessRemoteHeardFlag,
       "rcBfdTmpSessDiag": rcBfdTmpSessDiag,
       "rcBfdTmpSessOperMode": rcBfdTmpSessOperMode,
       "rcBfdTmpSessDemandModeDesiredFlag": rcBfdTmpSessDemandModeDesiredFlag,
       "rcBfdTmpSessEchoFuncModeDesiredFlag": rcBfdTmpSessEchoFuncModeDesiredFlag,
       "rcBfdTmpSessControlPlanIndepFlag": rcBfdTmpSessControlPlanIndepFlag,
       "rcBfdTmpSessAddrType": rcBfdTmpSessAddrType,
       "rcBfdTmpSessAddr": rcBfdTmpSessAddr,
       "rcBfdTmpSessDesiredMinTxInterval": rcBfdTmpSessDesiredMinTxInterval,
       "rcBfdTmpSessReqMinRxInterval": rcBfdTmpSessReqMinRxInterval,
       "rcBfdTmpSessReqMinEchoRxInterval": rcBfdTmpSessReqMinEchoRxInterval,
       "rcBfdTmpSessDetectMult": rcBfdTmpSessDetectMult,
       "rcBfdTmpSessStorType": rcBfdTmpSessStorType,
       "rcBfdTmpSessRowStatus": rcBfdTmpSessRowStatus,
       "rcBfdTmpSessAuthPresFlag": rcBfdTmpSessAuthPresFlag,
       "rcBfdTmpSessAuthenticationType": rcBfdTmpSessAuthenticationType,
       "rcBfdTmpSessPerfTable": rcBfdTmpSessPerfTable,
       "rcBfdTmpSessPerfEntry": rcBfdTmpSessPerfEntry,
       "rcBfdTmpSessPerfPktIn": rcBfdTmpSessPerfPktIn,
       "rcBfdTmpSessPerfPktOut": rcBfdTmpSessPerfPktOut,
       "rcBfdTmpSessUpTime": rcBfdTmpSessUpTime,
       "rcBfdTmpSessPerfLastSessDownTime": rcBfdTmpSessPerfLastSessDownTime,
       "rcBfdTmpSessPerfLastCommLostDiag": rcBfdTmpSessPerfLastCommLostDiag,
       "rcBfdTmpSessPerfSessUpCount": rcBfdTmpSessPerfSessUpCount,
       "rcBfdTmpSessPerfDiscTime": rcBfdTmpSessPerfDiscTime,
       "rcBfdTmpSessPerfPktInHC": rcBfdTmpSessPerfPktInHC,
       "rcBfdTmpSessPerfPktOutHC": rcBfdTmpSessPerfPktOutHC,
       "rcBfdTmpSessMapTable": rcBfdTmpSessMapTable,
       "rcBfdTmpSessMapEntry": rcBfdTmpSessMapEntry,
       "rcBfdTmpSessMapBfdIndex": rcBfdTmpSessMapBfdIndex,
       "rcBfdExtMib": rcBfdExtMib,
       "rcBfdExtObjects": rcBfdExtObjects,
       "rcBfdExtSessTable": rcBfdExtSessTable,
       "rcBfdExtSessEntry": rcBfdExtSessEntry,
       "rcBfdExtSessPeerState": rcBfdExtSessPeerState,
       "rcBfdExtSessPeerAddrType": rcBfdExtSessPeerAddrType,
       "rcBfdExtSessPeerAddr": rcBfdExtSessPeerAddr,
       "rcBfdExtSessApp": rcBfdExtSessApp,
       "rcBfdExtSessAppRun": rcBfdExtSessAppRun,
       "rcKhi": rcKhi,
       "rcKhiConfig": rcKhiConfig,
       "rcKhiConfigKhiAdminState": rcKhiConfigKhiAdminState,
       "rcKhiConfigKhiBootDelay": rcKhiConfigKhiBootDelay,
       "rcKhiConfigClearAction": rcKhiConfigClearAction,
       "rcKhiConfigPortKhiAdminState": rcKhiConfigPortKhiAdminState,
       "rcKhiConfigPerfKhiAdminState": rcKhiConfigPerfKhiAdminState,
       "rcKhiConfigChasKhiAdminState": rcKhiConfigChasKhiAdminState,
       "rcKhiConfigForwardingKhiAdminState": rcKhiConfigForwardingKhiAdminState,
       "rcKhiConfigMgmtKhiAdminState": rcKhiConfigMgmtKhiAdminState,
       "rcKhiHighLevel": rcKhiHighLevel,
       "rcKhiHighLevelKhiOperStatus": rcKhiHighLevelKhiOperStatus,
       "rcKhiHighLevelChassisCurrentStatus": rcKhiHighLevelChassisCurrentStatus,
       "rcKhiHighLevelChassisFirstHighestEvent": rcKhiHighLevelChassisFirstHighestEvent,
       "rcKhiHighLevelChassisFirstHighestEventTime": rcKhiHighLevelChassisFirstHighestEventTime,
       "rcKhiHighLevelChassisRefStatus": rcKhiHighLevelChassisRefStatus,
       "rcKhiHighLevelChassisStatusLastClearTime": rcKhiHighLevelChassisStatusLastClearTime,
       "rcKhiHighLevelCpuPerfCurrentStatus": rcKhiHighLevelCpuPerfCurrentStatus,
       "rcKhiHighLevelCpuPerfFirstHighestEvent": rcKhiHighLevelCpuPerfFirstHighestEvent,
       "rcKhiHighLevelCpuPerfFirstHighestEventTime": rcKhiHighLevelCpuPerfFirstHighestEventTime,
       "rcKhiHighLevelCpuPerfRefStatus": rcKhiHighLevelCpuPerfRefStatus,
       "rcKhiHighLevelCpuPerfStatusLastClearTime": rcKhiHighLevelCpuPerfStatusLastClearTime,
       "rcKhiHighLevelPortCurrentStatus": rcKhiHighLevelPortCurrentStatus,
       "rcKhiHighLevelPortFirstHighestEvent": rcKhiHighLevelPortFirstHighestEvent,
       "rcKhiHighLevelPortFirstHighestEventTime": rcKhiHighLevelPortFirstHighestEventTime,
       "rcKhiHighLevelPortRefStatus": rcKhiHighLevelPortRefStatus,
       "rcKhiHighLevelPortStatusLastClearTime": rcKhiHighLevelPortStatusLastClearTime,
       "rcKhiHighLevelForwardingCurrentStatus": rcKhiHighLevelForwardingCurrentStatus,
       "rcKhiHighLevelForwardingFirstHighestEvent": rcKhiHighLevelForwardingFirstHighestEvent,
       "rcKhiHighLevelForwardingFirstHighestEventTime": rcKhiHighLevelForwardingFirstHighestEventTime,
       "rcKhiHighLevelForwardingRefStatus": rcKhiHighLevelForwardingRefStatus,
       "rcKhiHighLevelForwardingStatusLastClearTime": rcKhiHighLevelForwardingStatusLastClearTime,
       "rcKhiHighLevelTotalConfigVlanCount": rcKhiHighLevelTotalConfigVlanCount,
       "rcKhiHighLevelTotalConfigIpIfCount": rcKhiHighLevelTotalConfigIpIfCount,
       "rcKhiHighLevelTotalOperIpIfCurrentCount": rcKhiHighLevelTotalOperIpIfCurrentCount,
       "rcKhiHighLevelIpIfFirstChangeTime": rcKhiHighLevelIpIfFirstChangeTime,
       "rcKhiHighLevelTotalOperIpIfReferenceCount": rcKhiHighLevelTotalOperIpIfReferenceCount,
       "rcKhiHighLevelIpIfLastClearTime": rcKhiHighLevelIpIfLastClearTime,
       "rcKhiHighLevelGlobalRouterTotalRouteCount": rcKhiHighLevelGlobalRouterTotalRouteCount,
       "rcKhiHighLevelGlobalRouterTotalRouteRefCount": rcKhiHighLevelGlobalRouterTotalRouteRefCount,
       "rcKhiHighLevelGlobalRouterLastClearTime": rcKhiHighLevelGlobalRouterLastClearTime,
       "rcKhiHighLevelGlobalRouterTotalBestRouteCount": rcKhiHighLevelGlobalRouterTotalBestRouteCount,
       "rcKhiHighLevelGlobalRouterBestRouteRefCount": rcKhiHighLevelGlobalRouterBestRouteRefCount,
       "rcKhiHighLevelGlobalRouterBestRouteLastClearTime": rcKhiHighLevelGlobalRouterBestRouteLastClearTime,
       "rcKhiHighLevelNonZeroVrfsTotalRouteCount": rcKhiHighLevelNonZeroVrfsTotalRouteCount,
       "rcKhiHighLevelNonZeroVrfsTotalRouteRefCount": rcKhiHighLevelNonZeroVrfsTotalRouteRefCount,
       "rcKhiHighLevelNonZeroVrfsRouteLastClearTime": rcKhiHighLevelNonZeroVrfsRouteLastClearTime,
       "rcKhiHighLevelNonZeroVrfsTotalBestRouteCount": rcKhiHighLevelNonZeroVrfsTotalBestRouteCount,
       "rcKhiHighLevelNonZeroVrfsBestRouteRefCount": rcKhiHighLevelNonZeroVrfsBestRouteRefCount,
       "rcKhiHighLevelNonZeroVrfsBestRouteLastClearTime": rcKhiHighLevelNonZeroVrfsBestRouteLastClearTime,
       "rcKhiHighLevelFdbRecordCount": rcKhiHighLevelFdbRecordCount,
       "rcKhiHighLevelFdbRecordRefCount": rcKhiHighLevelFdbRecordRefCount,
       "rcKhiHighLevelFdbRecordLastClearTime": rcKhiHighLevelFdbRecordLastClearTime,
       "rcKhiHighLevelGlobalRouterProtocolState": rcKhiHighLevelGlobalRouterProtocolState,
       "rcKhiHighLevelGlobalRouterProtocolStateLastClearTime": rcKhiHighLevelGlobalRouterProtocolStateLastClearTime,
       "rcKhiHighLevelNonZeroVrfsProtocolState": rcKhiHighLevelNonZeroVrfsProtocolState,
       "rcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime": rcKhiHighLevelNonZeroVrfsProtocolStateLastClearTime,
       "rcKhiHighLevelIstCurrentStatus": rcKhiHighLevelIstCurrentStatus,
       "rcKhiHighLevelIstFirstHighestEvent": rcKhiHighLevelIstFirstHighestEvent,
       "rcKhiHighLevelIstFirstHighestEventTime": rcKhiHighLevelIstFirstHighestEventTime,
       "rcKhiHighLevelIstStatusLastClearTime": rcKhiHighLevelIstStatusLastClearTime,
       "rcKhiHighLevelSmltOperPortsCount": rcKhiHighLevelSmltOperPortsCount,
       "rcKhiHighLevelSmltOperPortsChangeTime": rcKhiHighLevelSmltOperPortsChangeTime,
       "rcKhiHighLevelSmltOperPortsReferenceCount": rcKhiHighLevelSmltOperPortsReferenceCount,
       "rcKhiHighLevelSmltOperPortsLastClearTime": rcKhiHighLevelSmltOperPortsLastClearTime,
       "rcKhiHighLevelTotalSmltConfigPorts": rcKhiHighLevelTotalSmltConfigPorts,
       "rcKhiHighLevelLogCurrentStatus": rcKhiHighLevelLogCurrentStatus,
       "rcKhiHighLevelLogFirstHighestEvent": rcKhiHighLevelLogFirstHighestEvent,
       "rcKhiHighLevelLogFirstHighestEventTime": rcKhiHighLevelLogFirstHighestEventTime,
       "rcKhiHighLevelLogRefStatus": rcKhiHighLevelLogRefStatus,
       "rcKhiHighLevelLogStatusLastClearTime": rcKhiHighLevelLogStatusLastClearTime,
       "rcKhiHighLevelNumOfTcpConnection": rcKhiHighLevelNumOfTcpConnection,
       "rcKhiHighLevelNumOfActiveTcpConnection": rcKhiHighLevelNumOfActiveTcpConnection,
       "rcKhiHighLevelNumOfCliUsers": rcKhiHighLevelNumOfCliUsers,
       "rcKhiChassis": rcKhiChassis,
       "rcKhiChassisChasTemperature": rcKhiChassisChasTemperature,
       "rcKhiChassisTemperatureFirstHigherAlert": rcKhiChassisTemperatureFirstHigherAlert,
       "rcKhiChassisTemperatureFirstHigherAlertTime": rcKhiChassisTemperatureFirstHigherAlertTime,
       "rcKhiChassisChasTemperatureStatusIndication": rcKhiChassisChasTemperatureStatusIndication,
       "rcKhiChassisMasterCpuMezzOperState": rcKhiChassisMasterCpuMezzOperState,
       "rcKhiChassisMasterCpuMezzStatusIndication": rcKhiChassisMasterCpuMezzStatusIndication,
       "rcKhiChassisStandbyCpuMezzOperState": rcKhiChassisStandbyCpuMezzOperState,
       "rcKhiChassisStandbyCpuMezzStatusIndication": rcKhiChassisStandbyCpuMezzStatusIndication,
       "rcKhiChassisStandbyCpuState": rcKhiChassisStandbyCpuState,
       "rcKhiChassisStandbyCpuStatusIndication": rcKhiChassisStandbyCpuStatusIndication,
       "rcKhiChassisHistoryTable": rcKhiChassisHistoryTable,
       "rcKhiChassisHistoryEntry": rcKhiChassisHistoryEntry,
       "rcKhiChassisHistoryIndex": rcKhiChassisHistoryIndex,
       "rcKhiChassisHistoryTemperatureStateChange": rcKhiChassisHistoryTemperatureStateChange,
       "rcKhiChassisHistoryTemperatureStateChangeTime": rcKhiChassisHistoryTemperatureStateChangeTime,
       "rcKhiChassisFanTable": rcKhiChassisFanTable,
       "rcKhiChassisFanEntry": rcKhiChassisFanEntry,
       "rcKhiChassisFanId": rcKhiChassisFanId,
       "rcKhiChassisFanOperState": rcKhiChassisFanOperState,
       "rcKhiChassisFanFirstStateChange": rcKhiChassisFanFirstStateChange,
       "rcKhiChassisFanFirstStateChangeTime": rcKhiChassisFanFirstStateChangeTime,
       "rcKhiChassisFanOperStatusIndication": rcKhiChassisFanOperStatusIndication,
       "rcKhiChassisFanTemperature": rcKhiChassisFanTemperature,
       "rcKhiChassisFanTempFirstHigherAlert": rcKhiChassisFanTempFirstHigherAlert,
       "rcKhiChassisFanTempFirstHigherAlertTime": rcKhiChassisFanTempFirstHigherAlertTime,
       "rcKhiChassisFanTempStatusIndication": rcKhiChassisFanTempStatusIndication,
       "rcKhiChassisFanOperHistoryTable": rcKhiChassisFanOperHistoryTable,
       "rcKhiChassisFanOperHistoryEntry": rcKhiChassisFanOperHistoryEntry,
       "rcKhiChassisFanOperHistoryFanId": rcKhiChassisFanOperHistoryFanId,
       "rcKhiChassisFanOperHistoryIndex": rcKhiChassisFanOperHistoryIndex,
       "rcKhiChassisFanOperHistoryStateChange": rcKhiChassisFanOperHistoryStateChange,
       "rcKhiChassisFanOperHistoryStateChangeTime": rcKhiChassisFanOperHistoryStateChangeTime,
       "rcKhiChassisFanTempHistoryTable": rcKhiChassisFanTempHistoryTable,
       "rcKhiChassisFanTempHistoryEntry": rcKhiChassisFanTempHistoryEntry,
       "rcKhiChassisFanTempHistoryFanId": rcKhiChassisFanTempHistoryFanId,
       "rcKhiChassisFanTempHistoryIndex": rcKhiChassisFanTempHistoryIndex,
       "rcKhiChassisFanTempHistoryTempStateChange": rcKhiChassisFanTempHistoryTempStateChange,
       "rcKhiChassisFanTempHistoryTempStateChangeTime": rcKhiChassisFanTempHistoryTempStateChangeTime,
       "rcKhiChassisPowerSupplyTable": rcKhiChassisPowerSupplyTable,
       "rcKhiChassisPowerSupplyEntry": rcKhiChassisPowerSupplyEntry,
       "rcKhiChassisPowerSupplyId": rcKhiChassisPowerSupplyId,
       "rcKhiChassisPowerSupplyOperState": rcKhiChassisPowerSupplyOperState,
       "rcKhiChassisPowerSupplyFirstStateChange": rcKhiChassisPowerSupplyFirstStateChange,
       "rcKhiChassisPowerSupplyFirstStateChangeTime": rcKhiChassisPowerSupplyFirstStateChangeTime,
       "rcKhiChassisPowerSupplyStatusIndication": rcKhiChassisPowerSupplyStatusIndication,
       "rcKhiChassisPowerSupplyHistoryTable": rcKhiChassisPowerSupplyHistoryTable,
       "rcKhiChassisPowerSupplyHistoryEntry": rcKhiChassisPowerSupplyHistoryEntry,
       "rcKhiChassisPowerSupplyHistoryPSId": rcKhiChassisPowerSupplyHistoryPSId,
       "rcKhiChassisPowerSupplyHistoryIndex": rcKhiChassisPowerSupplyHistoryIndex,
       "rcKhiChassisPowerSupplyHistoryOperStateChange": rcKhiChassisPowerSupplyHistoryOperStateChange,
       "rcKhiChassisPowerSupplyHistoryOperStateChangeTime": rcKhiChassisPowerSupplyHistoryOperStateChangeTime,
       "rcKhiChassisLineCardTable": rcKhiChassisLineCardTable,
       "rcKhiChassisLineCardEntry": rcKhiChassisLineCardEntry,
       "rcKhiChassisLineCardSlot": rcKhiChassisLineCardSlot,
       "rcKhiChassisLineCardOperState": rcKhiChassisLineCardOperState,
       "rcKhiChassisLineCardAdminState": rcKhiChassisLineCardAdminState,
       "rcKhiChassisLineCardFirstStateChange": rcKhiChassisLineCardFirstStateChange,
       "rcKhiChassisLineCardFirstStateChangeTime": rcKhiChassisLineCardFirstStateChangeTime,
       "rcKhiChassisLineCardStatusIndication": rcKhiChassisLineCardStatusIndication,
       "rcKhiChassisLineCardHistoryTable": rcKhiChassisLineCardHistoryTable,
       "rcKhiChassisLineCardHistoryEntry": rcKhiChassisLineCardHistoryEntry,
       "rcKhiChassisLineCardHistoryLCId": rcKhiChassisLineCardHistoryLCId,
       "rcKhiChassisLineCardHistoryIndex": rcKhiChassisLineCardHistoryIndex,
       "rcKhiChassisLineCardHistoryOperStateChange": rcKhiChassisLineCardHistoryOperStateChange,
       "rcKhiChassisLineCardHistoryOperStateChangeTime": rcKhiChassisLineCardHistoryOperStateChangeTime,
       "rcKhiPerformance": rcKhiPerformance,
       "rcKhiPerformanceCurrentCpuUtil": rcKhiPerformanceCurrentCpuUtil,
       "rcKhiPerformanceFirstHigherCpuUtil": rcKhiPerformanceFirstHigherCpuUtil,
       "rcKhiPerformanceCpuUtilFirstHigherAlertTime": rcKhiPerformanceCpuUtilFirstHigherAlertTime,
       "rcKhiPerformanceCpuUtilStatus": rcKhiPerformanceCpuUtilStatus,
       "rcKhiPerformanceCurrentSwitchFabricUtil": rcKhiPerformanceCurrentSwitchFabricUtil,
       "rcKhiPerformanceFirstHigherSwitchFabricUtil": rcKhiPerformanceFirstHigherSwitchFabricUtil,
       "rcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime": rcKhiPerformanceSwitchFabricUtilFirstHigherAlertTime,
       "rcKhiPerformanceSwitchFabricUtilStatus": rcKhiPerformanceSwitchFabricUtilStatus,
       "rcKhiPerformanceCurrentOtherSwitchFabricUtil": rcKhiPerformanceCurrentOtherSwitchFabricUtil,
       "rcKhiPerformanceFirstHigherOtherSwitchFabricUtil": rcKhiPerformanceFirstHigherOtherSwitchFabricUtil,
       "rcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime": rcKhiPerformanceOtherSwitchFabricUtilFirstHigherAlertTime,
       "rcKhiPerformanceOtherSwitchFabricUtilStatus": rcKhiPerformanceOtherSwitchFabricUtilStatus,
       "rcKhiPerformanceCurrentBufferUtil": rcKhiPerformanceCurrentBufferUtil,
       "rcKhiPerformanceFirstHigherBufferUtil": rcKhiPerformanceFirstHigherBufferUtil,
       "rcKhiPerformanceBufferUtilFirstHigherAlertTime": rcKhiPerformanceBufferUtilFirstHigherAlertTime,
       "rcKhiPerformanceBufferUtilStatus": rcKhiPerformanceBufferUtilStatus,
       "rcKhiPerformanceCurrentDRamUsed": rcKhiPerformanceCurrentDRamUsed,
       "rcKhiPerformanceFirstHigherDRamUsed": rcKhiPerformanceFirstHigherDRamUsed,
       "rcKhiPerformanceDRamUsedFirstHigherAlertTime": rcKhiPerformanceDRamUsedFirstHigherAlertTime,
       "rcKhiPerformanceDRamUsedStatus": rcKhiPerformanceDRamUsedStatus,
       "rcKhiPerformanceSuspendedTaskStatus": rcKhiPerformanceSuspendedTaskStatus,
       "rcKhiPerformanceCPUControlFirstHigherAlertTime": rcKhiPerformanceCPUControlFirstHigherAlertTime,
       "rcKhiPerformanceCPUControlStatus": rcKhiPerformanceCPUControlStatus,
       "rcKhiPerformanceCurrentNoFBuf": rcKhiPerformanceCurrentNoFBuf,
       "rcKhiPerformanceFirstHigherNoFBuf": rcKhiPerformanceFirstHigherNoFBuf,
       "rcKhiPerformanceCurrentTxPacketsDropped": rcKhiPerformanceCurrentTxPacketsDropped,
       "rcKhiPerformanceFirstHigherTxPacketsDropped": rcKhiPerformanceFirstHigherTxPacketsDropped,
       "rcKhiPerformanceCurrentOutError": rcKhiPerformanceCurrentOutError,
       "rcKhiPerformanceFirstHigherOutError": rcKhiPerformanceFirstHigherOutError,
       "rcKhiPerformanceSuspendedTaskTable": rcKhiPerformanceSuspendedTaskTable,
       "rcKhiPerformanceSuspendedTaskEntry": rcKhiPerformanceSuspendedTaskEntry,
       "rcKhiPerformanceSuspendedTaskIndex": rcKhiPerformanceSuspendedTaskIndex,
       "rcKhiPerformanceSuspendedTaskId": rcKhiPerformanceSuspendedTaskId,
       "rcKhiPerformanceSuspendedTaskName": rcKhiPerformanceSuspendedTaskName,
       "rcKhiPerformanceSuspendedTaskSuspendedTime": rcKhiPerformanceSuspendedTaskSuspendedTime,
       "rcKhiPerformanceHistoryTable": rcKhiPerformanceHistoryTable,
       "rcKhiPerformanceHistoryEntry": rcKhiPerformanceHistoryEntry,
       "rcKhiPerformanceHistoryIndex": rcKhiPerformanceHistoryIndex,
       "rcKhiPerformanceHistoryCpuUtil": rcKhiPerformanceHistoryCpuUtil,
       "rcKhiPerformanceHistoryCpuUtilTimeStamp": rcKhiPerformanceHistoryCpuUtilTimeStamp,
       "rcKhiPerformanceHistorySwitchFabricUtil": rcKhiPerformanceHistorySwitchFabricUtil,
       "rcKhiPerformanceHistorySwitchFabricUtilTimeStamp": rcKhiPerformanceHistorySwitchFabricUtilTimeStamp,
       "rcKhiPerformanceHistoryOtherSwitchFabricUtil": rcKhiPerformanceHistoryOtherSwitchFabricUtil,
       "rcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp": rcKhiPerformanceHistoryOtherSwitchFabricUtilTimeStamp,
       "rcKhiPerformanceHistoryBufferUtil": rcKhiPerformanceHistoryBufferUtil,
       "rcKhiPerformanceHistoryBufferUtilTimeStamp": rcKhiPerformanceHistoryBufferUtilTimeStamp,
       "rcKhiPerformanceHistoryDRamUsed": rcKhiPerformanceHistoryDRamUsed,
       "rcKhiPerformanceHistoryDRamUsedTimeStamp": rcKhiPerformanceHistoryDRamUsedTimeStamp,
       "rcKhiPerformanceHistoryCPUControlTimeStamp": rcKhiPerformanceHistoryCPUControlTimeStamp,
       "rcKhiPerformanceHistoryNoFBuf": rcKhiPerformanceHistoryNoFBuf,
       "rcKhiPerformanceHistoryTxPacketsDropped": rcKhiPerformanceHistoryTxPacketsDropped,
       "rcKhiPerformanceHistoryOutError": rcKhiPerformanceHistoryOutError,
       "rcKhiPort": rcKhiPort,
       "rcKhiPortSystemStats": rcKhiPortSystemStats,
       "rcKhiPortSystemStatsTotalUnicastRxPkts": rcKhiPortSystemStatsTotalUnicastRxPkts,
       "rcKhiPortSystemStatsTotalUnicastTxPkts": rcKhiPortSystemStatsTotalUnicastTxPkts,
       "rcKhiPortSystemStatsUnicastPktsTxRxRatio": rcKhiPortSystemStatsUnicastPktsTxRxRatio,
       "rcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus": rcKhiPortSystemStatsUnicastPktsTxRxRatioHealthStatus,
       "rcKhiPortSystemStatsTotalMulticastRxPkts": rcKhiPortSystemStatsTotalMulticastRxPkts,
       "rcKhiPortSystemStatsTotalMulticastTxPkts": rcKhiPortSystemStatsTotalMulticastTxPkts,
       "rcKhiPortSystemStatsTotalBroadcastRxPkts": rcKhiPortSystemStatsTotalBroadcastRxPkts,
       "rcKhiPortSystemStatsTotalBroadcastTxPkts": rcKhiPortSystemStatsTotalBroadcastTxPkts,
       "rcKhiPortState": rcKhiPortState,
       "rcKhiPortStateTotalPortsUp": rcKhiPortStateTotalPortsUp,
       "rcKhiPortStatePortsUpList": rcKhiPortStatePortsUpList,
       "rcKhiPortStatePortsUpReferenceList": rcKhiPortStatePortsUpReferenceList,
       "rcKhiPortStatePortsUpHealthStatus": rcKhiPortStatePortsUpHealthStatus,
       "rcKhiPortStateTotalPortsDown": rcKhiPortStateTotalPortsDown,
       "rcKhiPortStatePortsDownList": rcKhiPortStatePortsDownList,
       "rcKhiPortStateTotalSmltPortsUp": rcKhiPortStateTotalSmltPortsUp,
       "rcKhiPortStateSmltPortsUpList": rcKhiPortStateSmltPortsUpList,
       "rcKhiPortStateSmltPortsUpReferenceList": rcKhiPortStateSmltPortsUpReferenceList,
       "rcKhiPortStateSmltPortsUpHealthStatus": rcKhiPortStateSmltPortsUpHealthStatus,
       "rcKhiPortStateTotalSmltPortsDown": rcKhiPortStateTotalSmltPortsDown,
       "rcKhiPortStateSmltPortsDownList": rcKhiPortStateSmltPortsDownList,
       "rcKhiPortStateTotalIstPortsUp": rcKhiPortStateTotalIstPortsUp,
       "rcKhiPortStateIstPortsUpList": rcKhiPortStateIstPortsUpList,
       "rcKhiPortStateIstPortsUpReferenceList": rcKhiPortStateIstPortsUpReferenceList,
       "rcKhiPortStateIstPortsUpHealthStatus": rcKhiPortStateIstPortsUpHealthStatus,
       "rcKhiPortStateTotalIstPortsDown": rcKhiPortStateTotalIstPortsDown,
       "rcKhiPortStateIstPortsDownList": rcKhiPortStateIstPortsDownList,
       "rcKhiPortStateTotalPortUpEvents": rcKhiPortStateTotalPortUpEvents,
       "rcKhiPortStatePortUpEventList": rcKhiPortStatePortUpEventList,
       "rcKhiPortStatePortUpEventsHealthStatus": rcKhiPortStatePortUpEventsHealthStatus,
       "rcKhiPortStatePortUpEventFirstEventTs": rcKhiPortStatePortUpEventFirstEventTs,
       "rcKhiPortStateTotalPortDownEvents": rcKhiPortStateTotalPortDownEvents,
       "rcKhiPortStatePortDownEventList": rcKhiPortStatePortDownEventList,
       "rcKhiPortStatePortDownEventsHealthStatus": rcKhiPortStatePortDownEventsHealthStatus,
       "rcKhiPortStatePortDownEventFirstEventTs": rcKhiPortStatePortDownEventFirstEventTs,
       "rcKhiPortStateTotalSmltPortUpEvents": rcKhiPortStateTotalSmltPortUpEvents,
       "rcKhiPortStateSmltPortUpEventList": rcKhiPortStateSmltPortUpEventList,
       "rcKhiPortStateSmltPortUpEventsHealthStatus": rcKhiPortStateSmltPortUpEventsHealthStatus,
       "rcKhiPortStateSmltPortUpEventFirstEventTs": rcKhiPortStateSmltPortUpEventFirstEventTs,
       "rcKhiPortStateTotalSmltPortDownEvents": rcKhiPortStateTotalSmltPortDownEvents,
       "rcKhiPortStateSmltPortDownEventList": rcKhiPortStateSmltPortDownEventList,
       "rcKhiPortStateSmltPortDownEventsHealthStatus": rcKhiPortStateSmltPortDownEventsHealthStatus,
       "rcKhiPortStateSmltPortDownEventFirstEventTs": rcKhiPortStateSmltPortDownEventFirstEventTs,
       "rcKhiPortStateTotalIstPortUpEvents": rcKhiPortStateTotalIstPortUpEvents,
       "rcKhiPortStateIstPortUpEventList": rcKhiPortStateIstPortUpEventList,
       "rcKhiPortStateIstPortUpEventsHealthStatus": rcKhiPortStateIstPortUpEventsHealthStatus,
       "rcKhiPortStateIstPortUpEventFirstEventTs": rcKhiPortStateIstPortUpEventFirstEventTs,
       "rcKhiPortStateTotalIstPortDownEvents": rcKhiPortStateTotalIstPortDownEvents,
       "rcKhiPortStateIstPortDownEventList": rcKhiPortStateIstPortDownEventList,
       "rcKhiPortStateIstPortDownEventsHealthStatus": rcKhiPortStateIstPortDownEventsHealthStatus,
       "rcKhiPortStateIstPortDownEventFirstEventTs": rcKhiPortStateIstPortDownEventFirstEventTs,
       "rcKhiPortStateEventsHistoryTable": rcKhiPortStateEventsHistoryTable,
       "rcKhiPortStateEventsHistoryEntry": rcKhiPortStateEventsHistoryEntry,
       "rcKhiPortStateEventsHistoryIndex": rcKhiPortStateEventsHistoryIndex,
       "rcKhiPortStateEventsHistoryTimestamp": rcKhiPortStateEventsHistoryTimestamp,
       "rcKhiPortStateEventsHistoryPort": rcKhiPortStateEventsHistoryPort,
       "rcKhiPortStateEventsHistoryEvent": rcKhiPortStateEventsHistoryEvent,
       "rcKhiPortErrors": rcKhiPortErrors,
       "rcKhiPortErrorsEventsTable": rcKhiPortErrorsEventsTable,
       "rcKhiPortErrorsEventsEntry": rcKhiPortErrorsEventsEntry,
       "rcKhiPortErrorsEventsPortNum": rcKhiPortErrorsEventsPortNum,
       "rcKhiPortErrorsEventsSingleCollisionErr": rcKhiPortErrorsEventsSingleCollisionErr,
       "rcKhiPortErrorsEventsMultipleCollisionErr": rcKhiPortErrorsEventsMultipleCollisionErr,
       "rcKhiPortErrorsEventsLateCollisionErr": rcKhiPortErrorsEventsLateCollisionErr,
       "rcKhiPortErrorsEventsExcessiveCollisionErr": rcKhiPortErrorsEventsExcessiveCollisionErr,
       "rcKhiPortErrorsEventsMacRxErr": rcKhiPortErrorsEventsMacRxErr,
       "rcKhiPortErrorsEventsMacTxErr": rcKhiPortErrorsEventsMacTxErr,
       "rcKhiPortErrorsEventsDeferTxErr": rcKhiPortErrorsEventsDeferTxErr,
       "rcKhiPortErrorsEventsPacketErr": rcKhiPortErrorsEventsPacketErr,
       "rcKhiPortErrorsEventsLinkInactiveErr": rcKhiPortErrorsEventsLinkInactiveErr,
       "rcKhiPortErrorsEventsUnknownProtoErr": rcKhiPortErrorsEventsUnknownProtoErr,
       "rcKhiPortErrorsEventsInFlwctrlErr": rcKhiPortErrorsEventsInFlwctrlErr,
       "rcKhiPortErrorsEventsOutFlwctrlErr": rcKhiPortErrorsEventsOutFlwctrlErr,
       "rcKhiPortErrorsEventsAlignErr": rcKhiPortErrorsEventsAlignErr,
       "rcKhiPortErrorsEventsFCSErr": rcKhiPortErrorsEventsFCSErr,
       "rcKhiPortErrorsEventsFramesLongErr": rcKhiPortErrorsEventsFramesLongErr,
       "rcKhiPortErrorsEventsTooShortErr": rcKhiPortErrorsEventsTooShortErr,
       "rcKhiPortErrorsEventsLinkFailureErr": rcKhiPortErrorsEventsLinkFailureErr,
       "rcKhiPortErrorsEventsCarrierSenseErr": rcKhiPortErrorsEventsCarrierSenseErr,
       "rcKhiPortErrorsEventsCarrierErr": rcKhiPortErrorsEventsCarrierErr,
       "rcKhiPortErrorsEventsSQETestErr": rcKhiPortErrorsEventsSQETestErr,
       "rcKhiPortErrorsHistoryTable": rcKhiPortErrorsHistoryTable,
       "rcKhiPortErrorsHistoryEntry": rcKhiPortErrorsHistoryEntry,
       "rcKhiPortErrorsHistoryIndex": rcKhiPortErrorsHistoryIndex,
       "rcKhiPortErrorsHistoryTimestamp": rcKhiPortErrorsHistoryTimestamp,
       "rcKhiPortErrorsHistoryPort": rcKhiPortErrorsHistoryPort,
       "rcKhiPortErrorsHistoryErrorEvents": rcKhiPortErrorsHistoryErrorEvents,
       "rcKhiForwarding": rcKhiForwarding,
       "rcKhiForwardingAsicHealthTable": rcKhiForwardingAsicHealthTable,
       "rcKhiForwardingAsicHealthEntry": rcKhiForwardingAsicHealthEntry,
       "rcKhiForwardingAsicHealthSlotNumber": rcKhiForwardingAsicHealthSlotNumber,
       "rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt": rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstCnt,
       "rcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt": rcKhiForwardingAsicHealthMidLnIngBkPrsureRstCnt,
       "rcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt": rcKhiForwardingAsicHealthRightLnIngBkPrsureRstCnt,
       "rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus": rcKhiForwardingAsicHealthLeftLnIngBkPrsureRstStatus,
       "rcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus": rcKhiForwardingAsicHealthMidLnIngBkPrsureRstStatus,
       "rcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus": rcKhiForwardingAsicHealthRightLnIngBkPrsureRstStatus,
       "rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt": rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstCnt,
       "rcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt": rcKhiForwardingAsicHealthMidLnIngSPIProtoRstCnt,
       "rcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt": rcKhiForwardingAsicHealthRightLnIngSPIProtoRstCnt,
       "rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus": rcKhiForwardingAsicHealthLeftLnIngSPIProtoRstStatus,
       "rcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus": rcKhiForwardingAsicHealthMidLnIngSPIProtoRstStatus,
       "rcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus": rcKhiForwardingAsicHealthRightLnIngSPIProtoRstStatus,
       "rcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt": rcKhiForwardingAsicHealthLeftLnIngSPIDefragCnt,
       "rcKhiForwardingAsicHealthMidLnIngSPIDefragCnt": rcKhiForwardingAsicHealthMidLnIngSPIDefragCnt,
       "rcKhiForwardingAsicHealthRightLnIngSPIDefragCnt": rcKhiForwardingAsicHealthRightLnIngSPIDefragCnt,
       "rcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus": rcKhiForwardingAsicHealthLeftLnIngSPIDefragStatus,
       "rcKhiForwardingAsicHealthMidLnIngSPIDefragStatus": rcKhiForwardingAsicHealthMidLnIngSPIDefragStatus,
       "rcKhiForwardingAsicHealthRightLnIngSPIDefragStatus": rcKhiForwardingAsicHealthRightLnIngSPIDefragStatus,
       "rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt": rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstCnt,
       "rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt": rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstCnt,
       "rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt": rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstCnt,
       "rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus": rcKhiForwardingAsicHealthLeftLnEgrMcastQFullRstStatus,
       "rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus": rcKhiForwardingAsicHealthMidLnEgrMcastQFullRstStatus,
       "rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus": rcKhiForwardingAsicHealthRightLnEgrMcastQFullRstStatus,
       "rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt": rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstCnt,
       "rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt": rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstCnt,
       "rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt": rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstCnt,
       "rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus": rcKhiForwardingAsicHealthLeftLnEgrFreePgErrRstStatus,
       "rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus": rcKhiForwardingAsicHealthMidLnEgrFreePgErrRstStatus,
       "rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus": rcKhiForwardingAsicHealthRightLnEgrFreePgErrRstStatus,
       "rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt": rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstCnt,
       "rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt": rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstCnt,
       "rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt": rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstCnt,
       "rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus": rcKhiForwardingAsicHealthLeftLnEgrUcastQFullRstStatus,
       "rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus": rcKhiForwardingAsicHealthMidLnEgrUcastQFullRstStatus,
       "rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus": rcKhiForwardingAsicHealthRightLnEgrUcastQFullRstStatus,
       "rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt": rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtRstCnt,
       "rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt": rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtRstCnt,
       "rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt": rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtRstCnt,
       "rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus": rcKhiForwardingAsicHealthLeftLnEgrFreePgLwrLmtStatus,
       "rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus": rcKhiForwardingAsicHealthMidLnEgrFreePgLwrLmtStatus,
       "rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus": rcKhiForwardingAsicHealthRightLnEgrFreePgLwrLmtStatus,
       "rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt": rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchRstCnt,
       "rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt": rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchRstCnt,
       "rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt": rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchRstCnt,
       "rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus": rcKhiForwardingAsicHealthLeftLnEgrRepIDMismatchStatus,
       "rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus": rcKhiForwardingAsicHealthMidLnEgrRepIDMismatchStatus,
       "rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus": rcKhiForwardingAsicHealthRightLnEgrRepIDMismatchStatus,
       "rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt": rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepRstCnt,
       "rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt": rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepRstCnt,
       "rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt": rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepRstCnt,
       "rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus": rcKhiForwardingAsicHealthLeftLnEgrNoBeepBeepStatus,
       "rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus": rcKhiForwardingAsicHealthMidLnEgrNoBeepBeepStatus,
       "rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus": rcKhiForwardingAsicHealthRightLnEgrNoBeepBeepStatus,
       "rcKhiForwardingRSPStateTable": rcKhiForwardingRSPStateTable,
       "rcKhiForwardingRSPStateEntry": rcKhiForwardingRSPStateEntry,
       "rcKhiForwardingRSPStateSlotNumber": rcKhiForwardingRSPStateSlotNumber,
       "rcKhiForwardingRSPStateDirection": rcKhiForwardingRSPStateDirection,
       "rcKhiForwardingRSPStateLeftLnErrMask": rcKhiForwardingRSPStateLeftLnErrMask,
       "rcKhiForwardingRSPStateMidLnErrMask": rcKhiForwardingRSPStateMidLnErrMask,
       "rcKhiForwardingRSPStateRightLnErrMask": rcKhiForwardingRSPStateRightLnErrMask,
       "rcKhiForwardingRSPStateLeftLnHealthStatus": rcKhiForwardingRSPStateLeftLnHealthStatus,
       "rcKhiForwardingRSPStateMidLnHealthStatus": rcKhiForwardingRSPStateMidLnHealthStatus,
       "rcKhiForwardingRSPStateRightLnHealthStatus": rcKhiForwardingRSPStateRightLnHealthStatus,
       "rcKhiForwardingRSPStatsTable": rcKhiForwardingRSPStatsTable,
       "rcKhiForwardingRSPStatsEntry": rcKhiForwardingRSPStatsEntry,
       "rcKhiForwardingRSPStatsSlotNumber": rcKhiForwardingRSPStatsSlotNumber,
       "rcKhiForwardingRSPStatsDirection": rcKhiForwardingRSPStatsDirection,
       "rcKhiForwardingRSPStatsLeftLnTotalAMPkts": rcKhiForwardingRSPStatsLeftLnTotalAMPkts,
       "rcKhiForwardingRSPStatsMidLnTotalAMPkts": rcKhiForwardingRSPStatsMidLnTotalAMPkts,
       "rcKhiForwardingRSPStatsRightLnTotalAMPkts": rcKhiForwardingRSPStatsRightLnTotalAMPkts,
       "rcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts": rcKhiForwardingRSPStatsLeftLnTotalAMRxErrPkts,
       "rcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts": rcKhiForwardingRSPStatsMidLnTotalAMRxErrPkts,
       "rcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts": rcKhiForwardingRSPStatsRightLnTotalAMRxErrPkts,
       "rcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus": rcKhiForwardingRSPStatsLeftLnAMRxErrPktsStatus,
       "rcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus": rcKhiForwardingRSPStatsMidLnAMRxErrPktsStatus,
       "rcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus": rcKhiForwardingRSPStatsRightLnAMRxErrPktsStatus,
       "rcKhiForwardingRSPStatsLeftLnTotalAMShortPkts": rcKhiForwardingRSPStatsLeftLnTotalAMShortPkts,
       "rcKhiForwardingRSPStatsMidLnTotalAMShortPkts": rcKhiForwardingRSPStatsMidLnTotalAMShortPkts,
       "rcKhiForwardingRSPStatsRightLnTotalAMShortPkts": rcKhiForwardingRSPStatsRightLnTotalAMShortPkts,
       "rcKhiForwardingRSPStatsLeftLnAMShortPktsStatus": rcKhiForwardingRSPStatsLeftLnAMShortPktsStatus,
       "rcKhiForwardingRSPStatsMidLnAMShortPktsStatus": rcKhiForwardingRSPStatsMidLnAMShortPktsStatus,
       "rcKhiForwardingRSPStatsRightLnAMShortPktsStatus": rcKhiForwardingRSPStatsRightLnAMShortPktsStatus,
       "rcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops": rcKhiForwardingRSPStatsLeftLnTotalAMCongestionDrops,
       "rcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops": rcKhiForwardingRSPStatsMidLnTotalAMCongestionDrops,
       "rcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops": rcKhiForwardingRSPStatsRightLnTotalAMCongestionDrops,
       "rcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus": rcKhiForwardingRSPStatsLeftLnAMCongestionDropStatus,
       "rcKhiForwardingRSPStatsMidLnAMCongestionDropStatus": rcKhiForwardingRSPStatsMidLnAMCongestionDropStatus,
       "rcKhiForwardingRSPStatsRightLnAMCongestionDropStatus": rcKhiForwardingRSPStatsRightLnAMCongestionDropStatus,
       "rcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts": rcKhiForwardingRSPStatsLeftLnTotalAMProcErrPkts,
       "rcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts": rcKhiForwardingRSPStatsMidLnTotalAMProcErrPkts,
       "rcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts": rcKhiForwardingRSPStatsRightLnTotalAMProcErrPkts,
       "rcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus": rcKhiForwardingRSPStatsLeftLnAMProcErrPktsStatus,
       "rcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus": rcKhiForwardingRSPStatsMidLnAMProcErrPktsStatus,
       "rcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus": rcKhiForwardingRSPStatsRightLnAMProcErrPktsStatus,
       "rcKhiForwardingRSPStatsLeftLnTotalAMExpPkts": rcKhiForwardingRSPStatsLeftLnTotalAMExpPkts,
       "rcKhiForwardingRSPStatsMidLnTotalAMExpPkts": rcKhiForwardingRSPStatsMidLnTotalAMExpPkts,
       "rcKhiForwardingRSPStatsRightLnTotalAMExpPkts": rcKhiForwardingRSPStatsRightLnTotalAMExpPkts,
       "rcKhiForwardingRSPStatsLeftLnAMExpPktsStatus": rcKhiForwardingRSPStatsLeftLnAMExpPktsStatus,
       "rcKhiForwardingRSPStatsMidLnAMExpPktsStatus": rcKhiForwardingRSPStatsMidLnAMExpPktsStatus,
       "rcKhiForwardingRSPStatsRightLnAMExpPktsStatus": rcKhiForwardingRSPStatsRightLnAMExpPktsStatus,
       "rcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts": rcKhiForwardingRSPStatsLeftLnTotalPMFwdPkts,
       "rcKhiForwardingRSPStatsMidLnTotalPMFwdPkts": rcKhiForwardingRSPStatsMidLnTotalPMFwdPkts,
       "rcKhiForwardingRSPStatsRightLnTotalPMFwdPkts": rcKhiForwardingRSPStatsRightLnTotalPMFwdPkts,
       "rcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts": rcKhiForwardingRSPStatsLeftLnTotalPMDropErrPkts,
       "rcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts": rcKhiForwardingRSPStatsMidLnTotalPMDropErrPkts,
       "rcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts": rcKhiForwardingRSPStatsRightLnTotalPMDropErrPkts,
       "rcKhiForwardingRSPStatsLeftLnPMDropErrStatus": rcKhiForwardingRSPStatsLeftLnPMDropErrStatus,
       "rcKhiForwardingRSPStatsMidLnPMDropErrStatus": rcKhiForwardingRSPStatsMidLnPMDropErrStatus,
       "rcKhiForwardingRSPStatsRightLnPMDropErrStatus": rcKhiForwardingRSPStatsRightLnPMDropErrStatus,
       "rcKhiForwardingF2XHealthTable": rcKhiForwardingF2XHealthTable,
       "rcKhiForwardingF2XHealthEntry": rcKhiForwardingF2XHealthEntry,
       "rcKhiForwardingF2XHealthSlotNumber": rcKhiForwardingF2XHealthSlotNumber,
       "rcKhiForwardingF2XHealthLeftLnErrMask": rcKhiForwardingF2XHealthLeftLnErrMask,
       "rcKhiForwardingF2XHealthMidLnErrMask": rcKhiForwardingF2XHealthMidLnErrMask,
       "rcKhiForwardingF2XHealthRightLnErrMask": rcKhiForwardingF2XHealthRightLnErrMask,
       "rcKhiForwardingF2XHealthLeftLnHealthStatus": rcKhiForwardingF2XHealthLeftLnHealthStatus,
       "rcKhiForwardingF2XHealthMidLnHealthStatus": rcKhiForwardingF2XHealthMidLnHealthStatus,
       "rcKhiForwardingF2XHealthRightLnHealthStatus": rcKhiForwardingF2XHealthRightLnHealthStatus,
       "rcKhiForwardingHistoryTable": rcKhiForwardingHistoryTable,
       "rcKhiForwardingHistoryEntry": rcKhiForwardingHistoryEntry,
       "rcKhiForwardingHistoryIndex": rcKhiForwardingHistoryIndex,
       "rcKhiForwardingHistoryTimeStamp": rcKhiForwardingHistoryTimeStamp,
       "rcKhiForwardingHistorySlotNumber": rcKhiForwardingHistorySlotNumber,
       "rcKhiForwardingHistoryLane": rcKhiForwardingHistoryLane,
       "rcKhiForwardingHistoryEvent": rcKhiForwardingHistoryEvent,
       "rcKhiForwardingCurrentStatusTable": rcKhiForwardingCurrentStatusTable,
       "rcKhiForwardingCurrentStatusEntry": rcKhiForwardingCurrentStatusEntry,
       "rcKhiForwardingCurrentStatusSlotNumber": rcKhiForwardingCurrentStatusSlotNumber,
       "rcKhiForwardingCurrentStatusLeftLnHealth": rcKhiForwardingCurrentStatusLeftLnHealth,
       "rcKhiForwardingCurrentStatusLeftLnErrMask": rcKhiForwardingCurrentStatusLeftLnErrMask,
       "rcKhiForwardingCurrentStatusMidLnHealth": rcKhiForwardingCurrentStatusMidLnHealth,
       "rcKhiForwardingCurrentStatusMidLnErrMask": rcKhiForwardingCurrentStatusMidLnErrMask,
       "rcKhiForwardingCurrentStatusRightLnHealth": rcKhiForwardingCurrentStatusRightLnHealth,
       "rcKhiForwardingCurrentStatusRightLnErrMask": rcKhiForwardingCurrentStatusRightLnErrMask,
       "rcKhiProtocol": rcKhiProtocol,
       "rcKhiOspfTable": rcKhiOspfTable,
       "rcKhiOspfEntry": rcKhiOspfEntry,
       "rcKhiOspfVrfId": rcKhiOspfVrfId,
       "rcKhiOspfRouteTableSize": rcKhiOspfRouteTableSize,
       "rcKhiOspfRefRouteTableSize": rcKhiOspfRefRouteTableSize,
       "rcKhiOspfLsdbTableSize": rcKhiOspfLsdbTableSize,
       "rcKhiOspfNumOfInterfaces": rcKhiOspfNumOfInterfaces,
       "rcKhiOspfNumOfAdjacency": rcKhiOspfNumOfAdjacency,
       "rcKhiOspfRefNumOfAdjacency": rcKhiOspfRefNumOfAdjacency,
       "rcKhiOspfLastClearTimestamp": rcKhiOspfLastClearTimestamp,
       "rcKhiOspfFirstEventTimestamp": rcKhiOspfFirstEventTimestamp,
       "rcKhiOspfHistoryTable": rcKhiOspfHistoryTable,
       "rcKhiOspfHistoryEntry": rcKhiOspfHistoryEntry,
       "rcKhiOspfHistoryVrfId": rcKhiOspfHistoryVrfId,
       "rcKhiOspfHistoryIndex": rcKhiOspfHistoryIndex,
       "rcKhiOspfHistoryLsdbTableSize": rcKhiOspfHistoryLsdbTableSize,
       "rcKhiOspfHistoryNumOfAdjacency": rcKhiOspfHistoryNumOfAdjacency,
       "rcKhiOspfHistoryTimestamp": rcKhiOspfHistoryTimestamp,
       "rcKhiBgpTable": rcKhiBgpTable,
       "rcKhiBgpEntry": rcKhiBgpEntry,
       "rcKhiBgpVrfId": rcKhiBgpVrfId,
       "rcKhiBgpUpdateSent": rcKhiBgpUpdateSent,
       "rcKhiBgpUpdateRecvd": rcKhiBgpUpdateRecvd,
       "rcKhiBgpNotifySent": rcKhiBgpNotifySent,
       "rcKhiBgpNotifyRecvd": rcKhiBgpNotifyRecvd,
       "rcKhiBgpBadEvents": rcKhiBgpBadEvents,
       "rcKhiBgpRouteTableSize": rcKhiBgpRouteTableSize,
       "rcKhiBgpRefRouteTableSize": rcKhiBgpRefRouteTableSize,
       "rcKhiBgpEstablishedNbrs": rcKhiBgpEstablishedNbrs,
       "rcKhiBgpRefEstablishedNbrs": rcKhiBgpRefEstablishedNbrs,
       "rcKhiBgpNumOfAggregates": rcKhiBgpNumOfAggregates,
       "rcKhiBgpNumOfImportedRoutes": rcKhiBgpNumOfImportedRoutes,
       "rcKhiBgpLastClearTimestamp": rcKhiBgpLastClearTimestamp,
       "rcKhiBgpFirstEventTimestamp": rcKhiBgpFirstEventTimestamp,
       "rcKhiBgpHistoryTable": rcKhiBgpHistoryTable,
       "rcKhiBgpHistoryEntry": rcKhiBgpHistoryEntry,
       "rcKhiBgpHistoryVrfId": rcKhiBgpHistoryVrfId,
       "rcKhiBgpHistoryIndex": rcKhiBgpHistoryIndex,
       "rcKhiBgpHistoryRibCount": rcKhiBgpHistoryRibCount,
       "rcKhiBgpHistoryNumOfPeers": rcKhiBgpHistoryNumOfPeers,
       "rcKhiBgpHistoryTimestamp": rcKhiBgpHistoryTimestamp,
       "rcKhiPimTable": rcKhiPimTable,
       "rcKhiPimEntry": rcKhiPimEntry,
       "rcKhiPimVrfId": rcKhiPimVrfId,
       "rcKhiPimRoutes": rcKhiPimRoutes,
       "rcKhiPimRefRoutes": rcKhiPimRefRoutes,
       "rcKhiPimAdjacencies": rcKhiPimAdjacencies,
       "rcKhiPimRefAdjacencies": rcKhiPimRefAdjacencies,
       "rcKhiPimLastClearTimestamp": rcKhiPimLastClearTimestamp,
       "rcKhiPimFirstEventTimestamp": rcKhiPimFirstEventTimestamp,
       "rcKhiPimHistoryTable": rcKhiPimHistoryTable,
       "rcKhiPimHistoryEntry": rcKhiPimHistoryEntry,
       "rcKhiPimHistoryVrfId": rcKhiPimHistoryVrfId,
       "rcKhiPimHistoryIndex": rcKhiPimHistoryIndex,
       "rcKhiPimHistoryRouteCount": rcKhiPimHistoryRouteCount,
       "rcKhiPimHistoryAdjacencies": rcKhiPimHistoryAdjacencies,
       "rcKhiPimHistoryTimestamp": rcKhiPimHistoryTimestamp,
       "rcKhiIgmpHistoryTable": rcKhiIgmpHistoryTable,
       "rcKhiIgmpHistoryEntry": rcKhiIgmpHistoryEntry,
       "rcKhiIgmpHistoryVrfId": rcKhiIgmpHistoryVrfId,
       "rcKhiIgmpHistoryIndex": rcKhiIgmpHistoryIndex,
       "rcKhiIgmpHistoryGroupCount": rcKhiIgmpHistoryGroupCount,
       "rcKhiIgmpHistorySenderCount": rcKhiIgmpHistorySenderCount,
       "rcKhiIgmpHistoryTimestamp": rcKhiIgmpHistoryTimestamp,
       "rcKhiIgmpSnoopHistoryTable": rcKhiIgmpSnoopHistoryTable,
       "rcKhiIgmpSnoopHistoryEntry": rcKhiIgmpSnoopHistoryEntry,
       "rcKhiIgmpSnoopHistoryVrfId": rcKhiIgmpSnoopHistoryVrfId,
       "rcKhiIgmpSnoopHistoryIndex": rcKhiIgmpSnoopHistoryIndex,
       "rcKhiIgmpSnoopHistoryStreamCount": rcKhiIgmpSnoopHistoryStreamCount,
       "rcKhiIgmpSnoopHistoryHostCount": rcKhiIgmpSnoopHistoryHostCount,
       "rcKhiIgmpSnoopHistoryTimestamp": rcKhiIgmpSnoopHistoryTimestamp,
       "rcKhiVlacpTotalPortCount": rcKhiVlacpTotalPortCount,
       "rcKhiVlacpPortUpCount": rcKhiVlacpPortUpCount,
       "rcKhiIstState": rcKhiIstState,
       "rcKhiFirstIstSyncTimeStamp": rcKhiFirstIstSyncTimeStamp,
       "rcKhiLastIstSyncTimeStamp": rcKhiLastIstSyncTimeStamp,
       "rcKhiNumIstUpEvents": rcKhiNumIstUpEvents,
       "rcKhiNumIstDownEvents": rcKhiNumIstDownEvents,
       "rcKhiNumSmltDownEventsSent": rcKhiNumSmltDownEventsSent,
       "rcKhiLastSmltDownEventSentTimeStamp": rcKhiLastSmltDownEventSentTimeStamp,
       "rcKhiNumSmltDownEventsRecv": rcKhiNumSmltDownEventsRecv,
       "rcKhiLastSmltDownEventRecvTimeStamp": rcKhiLastSmltDownEventRecvTimeStamp,
       "rcKhiNumSmltUpEventsSent": rcKhiNumSmltUpEventsSent,
       "rcKhiLastSmltUpEventSentTimeStamp": rcKhiLastSmltUpEventSentTimeStamp,
       "rcKhiNumSmltUpEventsRecv": rcKhiNumSmltUpEventsRecv,
       "rcKhiLastSmltUpEventRecvTimeStamp": rcKhiLastSmltUpEventRecvTimeStamp,
       "rcKhiNumSendMacAddrSent": rcKhiNumSendMacAddrSent,
       "rcKhiLastSendMacAddrSentTimeStamp": rcKhiLastSendMacAddrSentTimeStamp,
       "rcKhiNumSendMacAddrRecv": rcKhiNumSendMacAddrRecv,
       "rcKhiLastSendMacAddrRecvTimeStamp": rcKhiLastSendMacAddrRecvTimeStamp,
       "rcKhiIstHistoryTable": rcKhiIstHistoryTable,
       "rcKhiIstHistoryEntry": rcKhiIstHistoryEntry,
       "rcKhiIstHistoryIndex": rcKhiIstHistoryIndex,
       "rcKhiIstHistoryIstStatus": rcKhiIstHistoryIstStatus,
       "rcKhiIstHistoryTimestamp": rcKhiIstHistoryTimestamp,
       "rcKhiSmltHistoryTable": rcKhiSmltHistoryTable,
       "rcKhiSmltHistoryEntry": rcKhiSmltHistoryEntry,
       "rcKhiSmltHistoryIndex": rcKhiSmltHistoryIndex,
       "rcKhiSmltHistorySmltId": rcKhiSmltHistorySmltId,
       "rcKhiSmltHistorySmltStatus": rcKhiSmltHistorySmltStatus,
       "rcKhiSmltHistoryTimestamp": rcKhiSmltHistoryTimestamp,
       "rcKhiSmltTable": rcKhiSmltTable,
       "rcKhiSmltEntry": rcKhiSmltEntry,
       "rcKhiSmltId": rcKhiSmltId,
       "rcKhiSmltStatus": rcKhiSmltStatus,
       "rcKhiSmltUpEvents": rcKhiSmltUpEvents,
       "rcKhiSmltDownEvents": rcKhiSmltDownEvents,
       "rcKhiMgmt": rcKhiMgmt,
       "rcKhiMgmtCurrentLogStatus": rcKhiMgmtCurrentLogStatus,
       "rcKhiMgmtLogFirstHighestEvent": rcKhiMgmtLogFirstHighestEvent,
       "rcKhiMgmtLogFirstHighestEventTime": rcKhiMgmtLogFirstHighestEventTime,
       "rcKhiMgmtLogRefStatus": rcKhiMgmtLogRefStatus,
       "rcKhiMgmtLogStatusLastClearTime": rcKhiMgmtLogStatusLastClearTime,
       "rcKhiMgmtLogHistoryTable": rcKhiMgmtLogHistoryTable,
       "rcKhiMgmtLogHistoryEntry": rcKhiMgmtLogHistoryEntry,
       "rcKhiMgmtLogHistoryIndex": rcKhiMgmtLogHistoryIndex,
       "rcKhiMgmtLogHistoryStatus": rcKhiMgmtLogHistoryStatus,
       "rcKhiMgmtLogHistoryTimestamp": rcKhiMgmtLogHistoryTimestamp,
       "rcKhiIpInterface": rcKhiIpInterface,
       "rcKhiIpInterfaceHistoryTable": rcKhiIpInterfaceHistoryTable,
       "rcKhiIpInterfaceHistoryEntry": rcKhiIpInterfaceHistoryEntry,
       "rcKhiIpInterfaceHistoryIndex": rcKhiIpInterfaceHistoryIndex,
       "rcKhiIpInterfaceHistoryTimestamp": rcKhiIpInterfaceHistoryTimestamp,
       "rcKhiIpInterfaceHistoryIpAddr": rcKhiIpInterfaceHistoryIpAddr,
       "rcKhiIpInterfaceHistoryVlanId": rcKhiIpInterfaceHistoryVlanId,
       "rcKhiIpInterfaceHistoryEvent": rcKhiIpInterfaceHistoryEvent,
       "rc2k": rc2k,
       "rc2kChassis": rc2kChassis,
       "rc2kChassisPortOperStatus": rc2kChassisPortOperStatus,
       "rc2kChassisTemperature": rc2kChassisTemperature,
       "rc2kChassisAmbientLowerTemperature": rc2kChassisAmbientLowerTemperature,
       "rc2kChassisAmbientUpperTemperature": rc2kChassisAmbientUpperTemperature,
       "rc2kChassisBaseMacAddr": rc2kChassisBaseMacAddr,
       "rc2kChassisMacAddrCapacity": rc2kChassisMacAddrCapacity,
       "rc2kCpuEthernetPortTable": rc2kCpuEthernetPortTable,
       "rc2kCpuEthernetPortEntry": rc2kCpuEthernetPortEntry,
       "rc2kCpuEthernetPortIfIndex": rc2kCpuEthernetPortIfIndex,
       "rc2kCpuEthernetPortDescr": rc2kCpuEthernetPortDescr,
       "rc2kCpuEthernetPortAdminStatus": rc2kCpuEthernetPortAdminStatus,
       "rc2kCpuEthernetPortOperStatus": rc2kCpuEthernetPortOperStatus,
       "rc2kCpuEthernetPortAddr": rc2kCpuEthernetPortAddr,
       "rc2kCpuEthernetPortMask": rc2kCpuEthernetPortMask,
       "rc2kCpuEthernetPortGateway": rc2kCpuEthernetPortGateway,
       "rc2kCpuEthernetPortNetwork": rc2kCpuEthernetPortNetwork,
       "rc2kCpuEthernetPortAutoNegotiate": rc2kCpuEthernetPortAutoNegotiate,
       "rc2kCpuEthernetPortAdminDuplex": rc2kCpuEthernetPortAdminDuplex,
       "rc2kCpuEthernetPortOperDuplex": rc2kCpuEthernetPortOperDuplex,
       "rc2kCpuEthernetPortAdminSpeed": rc2kCpuEthernetPortAdminSpeed,
       "rc2kCpuEthernetPortOperSpeed": rc2kCpuEthernetPortOperSpeed,
       "rc2kCpuEthernetPortEnableBootp": rc2kCpuEthernetPortEnableBootp,
       "rc2kCpuEthernetPortMgmtMacAddr": rc2kCpuEthernetPortMgmtMacAddr,
       "rc2kCpuSerialPortTable": rc2kCpuSerialPortTable,
       "rc2kCpuSerialPortEntry": rc2kCpuSerialPortEntry,
       "rc2kCpuSerialPortIfIndex": rc2kCpuSerialPortIfIndex,
       "rc2kCpuSerialPortDescr": rc2kCpuSerialPortDescr,
       "rc2kCpuSerialPortMode": rc2kCpuSerialPortMode,
       "rc2kCpuSerialPortAdminStatus": rc2kCpuSerialPortAdminStatus,
       "rc2kCpuSerialPortOperStatus": rc2kCpuSerialPortOperStatus,
       "rc2kCpuSerialPortBaudRate": rc2kCpuSerialPortBaudRate,
       "rc2kCpuSerialPortDataBits": rc2kCpuSerialPortDataBits,
       "rc2kCpuSerialPortMyAddr": rc2kCpuSerialPortMyAddr,
       "rc2kCpuSerialPortPeerAddr": rc2kCpuSerialPortPeerAddr,
       "rc2kCpuSerialPortSlipMtu": rc2kCpuSerialPortSlipMtu,
       "rc2kCpuSerialPortSlipTxRxCompress": rc2kCpuSerialPortSlipTxRxCompress,
       "rc2kCpuSerialPortSlipRxCompress": rc2kCpuSerialPortSlipRxCompress,
       "rc2kCpuSerialPortPppConfigFile": rc2kCpuSerialPortPppConfigFile,
       "rc2kDevice": rc2kDevice,
       "rc2kDeviceGlobalTable": rc2kDeviceGlobalTable,
       "rc2kDeviceGlobalEntry": rc2kDeviceGlobalEntry,
       "rc2kDeviceGlobalSlot": rc2kDeviceGlobalSlot,
       "rc2kDeviceGlobalFlashBytesUsed": rc2kDeviceGlobalFlashBytesUsed,
       "rc2kDeviceGlobalFlashBytesFree": rc2kDeviceGlobalFlashBytesFree,
       "rc2kDeviceGlobalFlashNumFiles": rc2kDeviceGlobalFlashNumFiles,
       "rc2kDeviceGlobalPcmciaBytesUsed": rc2kDeviceGlobalPcmciaBytesUsed,
       "rc2kDeviceGlobalPcmciaBytesFree": rc2kDeviceGlobalPcmciaBytesFree,
       "rc2kDeviceGlobalPcmciaNumFiles": rc2kDeviceGlobalPcmciaNumFiles,
       "rc2kDeviceGlobalAction": rc2kDeviceGlobalAction,
       "rc2kDeviceGlobalResult": rc2kDeviceGlobalResult,
       "rc2kDeviceSeparator1": rc2kDeviceSeparator1,
       "rc2kDeviceFlashFileTable": rc2kDeviceFlashFileTable,
       "rc2kDeviceFlashFileEntry": rc2kDeviceFlashFileEntry,
       "rc2kDeviceFlashFileSlot": rc2kDeviceFlashFileSlot,
       "rc2kDeviceFlashFileName": rc2kDeviceFlashFileName,
       "rc2kDeviceFlashFileDate": rc2kDeviceFlashFileDate,
       "rc2kDeviceFlashFileSize": rc2kDeviceFlashFileSize,
       "rc2kDevicePcmciaPresent": rc2kDevicePcmciaPresent,
       "rc2kDevicePcmciaFileTable": rc2kDevicePcmciaFileTable,
       "rc2kDevicePcmciaFileEntry": rc2kDevicePcmciaFileEntry,
       "rc2kDevicePcmciaFileSlot": rc2kDevicePcmciaFileSlot,
       "rc2kDevicePcmciaFileName": rc2kDevicePcmciaFileName,
       "rc2kDevicePcmciaFileDate": rc2kDevicePcmciaFileDate,
       "rc2kDevicePcmciaFileSize": rc2kDevicePcmciaFileSize,
       "rc2kDeviceSeparator2": rc2kDeviceSeparator2,
       "rc2kBootConfigTable": rc2kBootConfigTable,
       "rc2kBootConfigEntry": rc2kBootConfigEntry,
       "rc2kBootConfigSlot": rc2kBootConfigSlot,
       "rc2kBootConfigLastBootConfigSource": rc2kBootConfigLastBootConfigSource,
       "rc2kBootConfigLastRuntimeImageSource": rc2kBootConfigLastRuntimeImageSource,
       "rc2kBootConfigLastRuntimeConfigSource": rc2kBootConfigLastRuntimeConfigSource,
       "rc2kBootConfigPrimaryImageSource": rc2kBootConfigPrimaryImageSource,
       "rc2kBootConfigPrimaryConfigSource": rc2kBootConfigPrimaryConfigSource,
       "rc2kBootConfigSecondaryImageSource": rc2kBootConfigSecondaryImageSource,
       "rc2kBootConfigSecondaryConfigSource": rc2kBootConfigSecondaryConfigSource,
       "rc2kBootConfigTertiaryImageSource": rc2kBootConfigTertiaryImageSource,
       "rc2kBootConfigTertiaryConfigSource": rc2kBootConfigTertiaryConfigSource,
       "rc2kBootConfigEnableAutoBoot": rc2kBootConfigEnableAutoBoot,
       "rc2kBootConfigEnableFactoryDefaults": rc2kBootConfigEnableFactoryDefaults,
       "rc2kBootConfigEnableDebugMode": rc2kBootConfigEnableDebugMode,
       "rc2kBootConfigEnableHwWatchDogTimer": rc2kBootConfigEnableHwWatchDogTimer,
       "rc2kBootConfigEnableRebootOnError": rc2kBootConfigEnableRebootOnError,
       "rc2kBootConfigEnableTelnetServer": rc2kBootConfigEnableTelnetServer,
       "rc2kBootConfigEnableRloginServer": rc2kBootConfigEnableRloginServer,
       "rc2kBootConfigEnableFtpServer": rc2kBootConfigEnableFtpServer,
       "rc2kBootConfigEnableTftpServer": rc2kBootConfigEnableTftpServer,
       "rc2kBootConfigSwVersion": rc2kBootConfigSwVersion,
       "rc2kBootConfigMulticastConfigProfile": rc2kBootConfigMulticastConfigProfile,
       "rc2kBootConfigEnableSshServer": rc2kBootConfigEnableSshServer,
       "rc2kBootConfigEnableAltLed": rc2kBootConfigEnableAltLed,
       "rc2kBootConfigPrimaryBackupConfigSource": rc2kBootConfigPrimaryBackupConfigSource,
       "rc2kBootConfigSecondaryBackupConfigSource": rc2kBootConfigSecondaryBackupConfigSource,
       "rc2kBootConfigTertiaryBackupConfigSource": rc2kBootConfigTertiaryBackupConfigSource,
       "rc2kBootConfigEnable8616ReAutoneg": rc2kBootConfigEnable8616ReAutoneg,
       "rc2kBootConfigMezzImageSource": rc2kBootConfigMezzImageSource,
       "rc2kBootConfigEnableMezz": rc2kBootConfigEnableMezz,
       "rc2kBootConfigPrimaryLicenseSource": rc2kBootConfigPrimaryLicenseSource,
       "rc2kBootConfigSecondaryLicenseSource": rc2kBootConfigSecondaryLicenseSource,
       "rc2kBootConfigTertiaryLicenseSource": rc2kBootConfigTertiaryLicenseSource,
       "rc2kBootConfigEnableCfPcCompat": rc2kBootConfigEnableCfPcCompat,
       "rc2kCardTable": rc2kCardTable,
       "rc2kCardEntry": rc2kCardEntry,
       "rc2kCardIndex": rc2kCardIndex,
       "rc2kCardFrontType": rc2kCardFrontType,
       "rc2kCardFrontDescription": rc2kCardFrontDescription,
       "rc2kCardFrontAdminStatus": rc2kCardFrontAdminStatus,
       "rc2kCardFrontOperStatus": rc2kCardFrontOperStatus,
       "rc2kCardFrontSerialNum": rc2kCardFrontSerialNum,
       "rc2kCardFrontHwVersion": rc2kCardFrontHwVersion,
       "rc2kCardFrontPartNumber": rc2kCardFrontPartNumber,
       "rc2kCardFrontDateCode": rc2kCardFrontDateCode,
       "rc2kCardFrontDeviations": rc2kCardFrontDeviations,
       "rc2kCardFrontMacAddr": rc2kCardFrontMacAddr,
       "rc2kCardBackType": rc2kCardBackType,
       "rc2kCardBackDescription": rc2kCardBackDescription,
       "rc2kCardBackSerialNum": rc2kCardBackSerialNum,
       "rc2kCardBackHwVersion": rc2kCardBackHwVersion,
       "rc2kCardBackPartNumber": rc2kCardBackPartNumber,
       "rc2kCardBackDateCode": rc2kCardBackDateCode,
       "rc2kCardBackDeviations": rc2kCardBackDeviations,
       "rc2kCardPCMCIAType": rc2kCardPCMCIAType,
       "rc2kCardPCMCIADescr": rc2kCardPCMCIADescr,
       "rc2kCardASICDescr": rc2kCardASICDescr,
       "rc2kCardFrontMasterIO": rc2kCardFrontMasterIO,
       "rc2kCardSmltOnSingleCpSupported": rc2kCardSmltOnSingleCpSupported,
       "rc2kCardMezzCard": rc2kCardMezzCard,
       "rc2kCardMezzSerialNum": rc2kCardMezzSerialNum,
       "rc2kCardMezzHwVersion": rc2kCardMezzHwVersion,
       "rc2kCardMezzPartNum": rc2kCardMezzPartNum,
       "rc2kCardSlotPriority": rc2kCardSlotPriority,
       "rc2kCardSlotOriginalPriority": rc2kCardSlotOriginalPriority,
       "rc2kCardModuleSerialNum": rc2kCardModuleSerialNum,
       "rc2kCardModulePartNumber": rc2kCardModulePartNumber,
       "rc2kCardModuleAssemblyDate": rc2kCardModuleAssemblyDate,
       "rc2kCopyFile": rc2kCopyFile,
       "rc2kCopyFileSource": rc2kCopyFileSource,
       "rc2kCopyFileDestination": rc2kCopyFileDestination,
       "rc2kCopyFileAction": rc2kCopyFileAction,
       "rc2kCopyFileResult": rc2kCopyFileResult,
       "rc2kQos": rc2kQos,
       "rc2kQosQosTable": rc2kQosQosTable,
       "rc2kQosQosEntry": rc2kQosQosEntry,
       "rc2kQosQosRow": rc2kQosQosRow,
       "rc2kQosQosLevel": rc2kQosQosLevel,
       "rc2kQosQosName": rc2kQosQosName,
       "rc2kQosQosAdminWeight": rc2kQosQosAdminWeight,
       "rc2kQosQosOperWeight": rc2kQosQosOperWeight,
       "rc2kQosOctapidMode": rc2kQosOctapidMode,
       "rc2kQosQosAdminThreshold": rc2kQosQosAdminThreshold,
       "rc2kQosQosOperThreshold": rc2kQosQosOperThreshold,
       "rc2kQosPidMode": rc2kQosPidMode,
       "rc2kQosIngressTagToQosTable": rc2kQosIngressTagToQosTable,
       "rc2kQosIngressTagToQosEntry": rc2kQosIngressTagToQosEntry,
       "rc2kQosIngressTagToQosRow": rc2kQosIngressTagToQosRow,
       "rc2kQosIngressTagToQosInIeee8021P": rc2kQosIngressTagToQosInIeee8021P,
       "rc2kQosIngressTagToQosQosLevel": rc2kQosIngressTagToQosQosLevel,
       "rc2kQosIngressDsFieldToQosTable": rc2kQosIngressDsFieldToQosTable,
       "rc2kQosIngressDsFieldToQosEntry": rc2kQosIngressDsFieldToQosEntry,
       "rc2kQosIngressDsFieldToQosRow": rc2kQosIngressDsFieldToQosRow,
       "rc2kQosIngressDsFieldToQosInDsField": rc2kQosIngressDsFieldToQosInDsField,
       "rc2kQosIngressDsFieldToQosQosLevel": rc2kQosIngressDsFieldToQosQosLevel,
       "rc2kQosEgressQosToTagTable": rc2kQosEgressQosToTagTable,
       "rc2kQosEgressQosToTagEntry": rc2kQosEgressQosToTagEntry,
       "rc2kQosEgressQosToTagRow": rc2kQosEgressQosToTagRow,
       "rc2kQosEgressQosToTagQosLevel": rc2kQosEgressQosToTagQosLevel,
       "rc2kQosEgressQosToTagOutIeee8021P": rc2kQosEgressQosToTagOutIeee8021P,
       "rc2kQosEgressQosToDsFieldTable": rc2kQosEgressQosToDsFieldTable,
       "rc2kQosEgressQosToDsFieldEntry": rc2kQosEgressQosToDsFieldEntry,
       "rc2kQosEgressQosToDsFieldRow": rc2kQosEgressQosToDsFieldRow,
       "rc2kQosEgressQosToDsFieldQosLevel": rc2kQosEgressQosToDsFieldQosLevel,
       "rc2kQosEgressQosToDsFieldOutDsField": rc2kQosEgressQosToDsFieldOutDsField,
       "rc2kQosTrafficProfileTable": rc2kQosTrafficProfileTable,
       "rc2kQosTrafficProfileEntry": rc2kQosTrafficProfileEntry,
       "rc2kQosTrafficProfileId": rc2kQosTrafficProfileId,
       "rc2kQosTrafficProfileName": rc2kQosTrafficProfileName,
       "rc2kQosTrafficProfileEnable": rc2kQosTrafficProfileEnable,
       "rc2kQosTrafficProfileTranslateDscpEnable": rc2kQosTrafficProfileTranslateDscpEnable,
       "rc2kQosTrafficProfileInProfileDscp": rc2kQosTrafficProfileInProfileDscp,
       "rc2kQosTrafficProfileOutProfileDscp": rc2kQosTrafficProfileOutProfileDscp,
       "rc2kQosTrafficProfileDiscardEnable": rc2kQosTrafficProfileDiscardEnable,
       "rc2kQosTrafficProfileAverageRate": rc2kQosTrafficProfileAverageRate,
       "rc2kQosTrafficProfilePeakRate": rc2kQosTrafficProfilePeakRate,
       "rc2kQosTrafficProfileRowStatus": rc2kQosTrafficProfileRowStatus,
       "rc2kQosIngressDscpToQosTable": rc2kQosIngressDscpToQosTable,
       "rc2kQosIngressDscpToQosEntry": rc2kQosIngressDscpToQosEntry,
       "rc2kQosIngressDscpToQosRow": rc2kQosIngressDscpToQosRow,
       "rc2kQosIngressDscpToQosInDscp": rc2kQosIngressDscpToQosInDscp,
       "rc2kQosIngressDscpToQosInDscpBinaryFormat": rc2kQosIngressDscpToQosInDscpBinaryFormat,
       "rc2kQosIngressDscpToQosQosLevel": rc2kQosIngressDscpToQosQosLevel,
       "rc2kQosEgressQosToDscpTable": rc2kQosEgressQosToDscpTable,
       "rc2kQosEgressQosToDscpEntry": rc2kQosEgressQosToDscpEntry,
       "rc2kQosEgressQosToDscpRow": rc2kQosEgressQosToDscpRow,
       "rc2kQosEgressQosToDscpQosLevel": rc2kQosEgressQosToDscpQosLevel,
       "rc2kQosEgressQosToDscpOutDscp": rc2kQosEgressQosToDscpOutDscp,
       "rc2kQosEgressQosToDscpOutDscpBinaryFormat": rc2kQosEgressQosToDscpOutDscpBinaryFormat,
       "rc2kAtm": rc2kAtm,
       "rc2kAtmGlobal": rc2kAtmGlobal,
       "rc2kAtmElanStatsClearAll": rc2kAtmElanStatsClearAll,
       "rc2kAtmPortTable": rc2kAtmPortTable,
       "rc2kAtmPortEntry": rc2kAtmPortEntry,
       "rc2kAtmPortIfIndex": rc2kAtmPortIfIndex,
       "rc2kAtmPortNumVpiBits": rc2kAtmPortNumVpiBits,
       "rc2kAtmPortNumVciBits": rc2kAtmPortNumVciBits,
       "rc2kAtmPortMediaType": rc2kAtmPortMediaType,
       "rc2kAtmPortScrambleEnable": rc2kAtmPortScrambleEnable,
       "rc2kAtmPortFramingMode": rc2kAtmPortFramingMode,
       "rc2kAtmPortClockSource": rc2kAtmPortClockSource,
       "rc2kAtmPortLineSpeed": rc2kAtmPortLineSpeed,
       "rc2kAtmPortLoopBackMode": rc2kAtmPortLoopBackMode,
       "rc2kAtmPortMacAddress": rc2kAtmPortMacAddress,
       "rc2kAtmPvcTable": rc2kAtmPvcTable,
       "rc2kAtmPvcEntry": rc2kAtmPvcEntry,
       "rc2kAtmPvcIfIndex": rc2kAtmPvcIfIndex,
       "rc2kAtmPvcVpi": rc2kAtmPvcVpi,
       "rc2kAtmPvcVci": rc2kAtmPvcVci,
       "rc2kAtmPvcPvcId": rc2kAtmPvcPvcId,
       "rc2kAtmPvcName": rc2kAtmPvcName,
       "rc2kAtmPvcEncapsulation": rc2kAtmPvcEncapsulation,
       "rc2kAtmPvcServiceType": rc2kAtmPvcServiceType,
       "rc2kAtmPvcPeakCellRate": rc2kAtmPvcPeakCellRate,
       "rc2kAtmPvcSustainedCellRate": rc2kAtmPvcSustainedCellRate,
       "rc2kAtmPvcMaxBurstSize": rc2kAtmPvcMaxBurstSize,
       "rc2kAtmPvcRowStatus": rc2kAtmPvcRowStatus,
       "rc2kAtmPvcOamLbMgmtEnable": rc2kAtmPvcOamLbMgmtEnable,
       "rc2kAtmPvcOamLbSendFrequency": rc2kAtmPvcOamLbSendFrequency,
       "rc2kAtmPvcOamLbRetryFrequency": rc2kAtmPvcOamLbRetryFrequency,
       "rc2kAtmPvcOamLbUpCount": rc2kAtmPvcOamLbUpCount,
       "rc2kAtmPvcOamLbDownCount": rc2kAtmPvcOamLbDownCount,
       "rc2kAtmPvcOamTrapEnable": rc2kAtmPvcOamTrapEnable,
       "rc2kAtmPvcOamVcStatus": rc2kAtmPvcOamVcStatus,
       "rc2kAtmPvcOamLbRequestSent": rc2kAtmPvcOamLbRequestSent,
       "rc2kAtmPvcOamLbReplySent": rc2kAtmPvcOamLbReplySent,
       "rc2kAtmPvcOamLbReplyReceived": rc2kAtmPvcOamLbReplyReceived,
       "rc2kAtm1483ElanTable": rc2kAtm1483ElanTable,
       "rc2kAtm1483ElanEntry": rc2kAtm1483ElanEntry,
       "rc2kAtm1483ElanIfIndex": rc2kAtm1483ElanIfIndex,
       "rc2kAtm1483ElanElanId": rc2kAtm1483ElanElanId,
       "rc2kAtm1483ElanNumPvcIds": rc2kAtm1483ElanNumPvcIds,
       "rc2kAtm1483ElanPvcIds": rc2kAtm1483ElanPvcIds,
       "rc2kAtm1483ElanVlanId": rc2kAtm1483ElanVlanId,
       "rc2kAtm1483ElanRowStatus": rc2kAtm1483ElanRowStatus,
       "rc2kAtm1483ElanConnectType": rc2kAtm1483ElanConnectType,
       "rc2kAtm1483ElanVlanMacAddress": rc2kAtm1483ElanVlanMacAddress,
       "rc2kAtm1483ElanDummyMacAddress": rc2kAtm1483ElanDummyMacAddress,
       "rc2kAtm1483ElanLocalIpAddress": rc2kAtm1483ElanLocalIpAddress,
       "rc2kAtm1483ElanRemoteIpAddress": rc2kAtm1483ElanRemoteIpAddress,
       "rc2kAtm1483ElanInArpSendEnable": rc2kAtm1483ElanInArpSendEnable,
       "rc2kAtm1483ElanInArpSendInterval": rc2kAtm1483ElanInArpSendInterval,
       "rc2kAtm1483ElanIpxVlanEncapMethod": rc2kAtm1483ElanIpxVlanEncapMethod,
       "rc2kAtm1483ElanIpxNetworkNum": rc2kAtm1483ElanIpxNetworkNum,
       "rc2kAtm1483ElanStgId": rc2kAtm1483ElanStgId,
       "rc2kAtm1483ElanrcStgTaggedBpduVlanId": rc2kAtm1483ElanrcStgTaggedBpduVlanId,
       "rc2kAtm1483ElanIpxNetworkAddr": rc2kAtm1483ElanIpxNetworkAddr,
       "rc2kAtmSioCardConfigTable": rc2kAtmSioCardConfigTable,
       "rc2kAtmSioCardConfigEntry": rc2kAtmSioCardConfigEntry,
       "rc2kAtmSioCardConfigSlotIndex": rc2kAtmSioCardConfigSlotIndex,
       "rc2kAtmSioCardConfigAction": rc2kAtmSioCardConfigAction,
       "rc2kAtmSioCardConfigTraceMode": rc2kAtmSioCardConfigTraceMode,
       "rc2kAtmSioCardConfigImageFileName": rc2kAtmSioCardConfigImageFileName,
       "rc2kAtmSioCardConfigElanStatsEnable": rc2kAtmSioCardConfigElanStatsEnable,
       "rc2kAtmSioCardConfigStatsPollPeriod": rc2kAtmSioCardConfigStatsPollPeriod,
       "rc2kAtmPortStatsTable": rc2kAtmPortStatsTable,
       "rc2kAtmPortStatsEntry": rc2kAtmPortStatsEntry,
       "rc2kAtmPortStatsIfIndex": rc2kAtmPortStatsIfIndex,
       "rc2kAtmPortStatsInCells": rc2kAtmPortStatsInCells,
       "rc2kAtmPortStatsOutCells": rc2kAtmPortStatsOutCells,
       "rc2kAtmPortStatsOutIdleCells": rc2kAtmPortStatsOutIdleCells,
       "rc2kAtmPortStatsInHecCorrected": rc2kAtmPortStatsInHecCorrected,
       "rc2kAtmPortStatsInHecUncorrected": rc2kAtmPortStatsInHecUncorrected,
       "rc2kAtmPortStatsInUnknownProtos": rc2kAtmPortStatsInUnknownProtos,
       "rc2kAtmPortStatsInPkts": rc2kAtmPortStatsInPkts,
       "rc2kAtmPortStatsOutPkts": rc2kAtmPortStatsOutPkts,
       "rc2kAtmPortStatsInDroppedPkts": rc2kAtmPortStatsInDroppedPkts,
       "rc2kAtmPortStatsOutDroppedPkts": rc2kAtmPortStatsOutDroppedPkts,
       "rc2kAtmVPortStatsTable": rc2kAtmVPortStatsTable,
       "rc2kAtmVPortStatsEntry": rc2kAtmVPortStatsEntry,
       "rc2kAtmVPortStatsIfIndex": rc2kAtmVPortStatsIfIndex,
       "rc2kAtmVPortStatsVlanId": rc2kAtmVPortStatsVlanId,
       "rc2kAtmVPortStatsClear": rc2kAtmVPortStatsClear,
       "rc2kAtmVPortStatsInOctets": rc2kAtmVPortStatsInOctets,
       "rc2kAtmVPortStatsOutOctets": rc2kAtmVPortStatsOutOctets,
       "rc2kAtmVPortStatsInErrors": rc2kAtmVPortStatsInErrors,
       "rc2kAtmVPortStatsOutErrors": rc2kAtmVPortStatsOutErrors,
       "rc2kAtmVPortStatsInDiscards": rc2kAtmVPortStatsInDiscards,
       "rc2kAtmVPortStatsOutDiscards": rc2kAtmVPortStatsOutDiscards,
       "rc2kAtmVPortStatsInUcastPkts": rc2kAtmVPortStatsInUcastPkts,
       "rc2kAtmVPortStatsOutUcastPkts": rc2kAtmVPortStatsOutUcastPkts,
       "rc2kAtmVPortStatsInMulticastPkts": rc2kAtmVPortStatsInMulticastPkts,
       "rc2kAtmVPortStatsOutMulticastPkts": rc2kAtmVPortStatsOutMulticastPkts,
       "rc2kAtmVPortStatsInBroadcastPkts": rc2kAtmVPortStatsInBroadcastPkts,
       "rc2kAtmVPortStatsOutBroadcastPkts": rc2kAtmVPortStatsOutBroadcastPkts,
       "rc2kMdaCardTable": rc2kMdaCardTable,
       "rc2kMdaCardEntry": rc2kMdaCardEntry,
       "rc2kMdaCardSlotNum": rc2kMdaCardSlotNum,
       "rc2kMdaCardMdaNum": rc2kMdaCardMdaNum,
       "rc2kMdaCardType": rc2kMdaCardType,
       "rc2kMdaCardDescription": rc2kMdaCardDescription,
       "rc2kMdaCardAdminStatus": rc2kMdaCardAdminStatus,
       "rc2kMdaCardOperStatus": rc2kMdaCardOperStatus,
       "rc2kMdaCardSerialNum": rc2kMdaCardSerialNum,
       "rc2kMdaCardHwVersion": rc2kMdaCardHwVersion,
       "rc2kMdaCardPartNumber": rc2kMdaCardPartNumber,
       "rc2kMdaCardDateCode": rc2kMdaCardDateCode,
       "rc2kMdaCardDeviations": rc2kMdaCardDeviations,
       "rc2kMdaCardMacAddr": rc2kMdaCardMacAddr,
       "rc2kMdaCardNumPorts": rc2kMdaCardNumPorts,
       "rc2kMdaCardFirstIfIndex": rc2kMdaCardFirstIfIndex,
       "rc2kMdaCardLastIfIndex": rc2kMdaCardLastIfIndex,
       "rc2kCpuEthernetPortRouteTable": rc2kCpuEthernetPortRouteTable,
       "rc2kCpuEthernetPortRouteEntry": rc2kCpuEthernetPortRouteEntry,
       "rc2kCpuEthernetPortRouteNetwork": rc2kCpuEthernetPortRouteNetwork,
       "rc2kCpuEthernetPortRouteGateway": rc2kCpuEthernetPortRouteGateway,
       "rc2kCpuEthernetPortRouteRowStatus": rc2kCpuEthernetPortRouteRowStatus,
       "rc2kCPUTypeGeneralGroup": rc2kCPUTypeGeneralGroup,
       "rc2kCPUTypePrimary": rc2kCPUTypePrimary,
       "rc2kCPUTypeSecondary": rc2kCPUTypeSecondary,
       "rc2kCPUTypePrimaryMemory": rc2kCPUTypePrimaryMemory,
       "rc2kCPUTypeSecondaryMemory": rc2kCPUTypeSecondaryMemory,
       "rc2kCpuEthernetPortIpv6RouteTable": rc2kCpuEthernetPortIpv6RouteTable,
       "rc2kCpuEthernetPortIpv6RouteEntry": rc2kCpuEthernetPortIpv6RouteEntry,
       "rc2kCpuEthernetPortIpv6RouteNetwork": rc2kCpuEthernetPortIpv6RouteNetwork,
       "rc2kCpuEthernetPortIpv6RoutePrefixLength": rc2kCpuEthernetPortIpv6RoutePrefixLength,
       "rc2kCpuEthernetPortIpv6RouteGateway": rc2kCpuEthernetPortIpv6RouteGateway,
       "rc2kCpuEthernetPortIpv6RouteRowStatus": rc2kCpuEthernetPortIpv6RouteRowStatus,
       "rcPowerRanger": rcPowerRanger,
       "rcPowerRangerMib": rcPowerRangerMib,
       "rcPowerRangerNotifications": rcPowerRangerNotifications,
       "rcPowerRangerObjects": rcPowerRangerObjects,
       "rcPrQos": rcPrQos,
       "rcPrQosScalars": rcPrQosScalars,
       "rcPrQosPolicyNumPolicies": rcPrQosPolicyNumPolicies,
       "rcPrQosTxQueueNumTemplates": rcPrQosTxQueueNumTemplates,
       "rcPrQosPolicyTable": rcPrQosPolicyTable,
       "rcPrQosPolicyEntry": rcPrQosPolicyEntry,
       "rcPrQosPolicyGpId": rcPrQosPolicyGpId,
       "rcPrQosPolicyName": rcPrQosPolicyName,
       "rcPrQosPolicyPeakRate": rcPrQosPolicyPeakRate,
       "rcPrQosPolicySvcRate": rcPrQosPolicySvcRate,
       "rcPrQosPolicyLaneMembers": rcPrQosPolicyLaneMembers,
       "rcPrQosPolicyRowStatus": rcPrQosPolicyRowStatus,
       "rcPrQosLocalPolicyTable": rcPrQosLocalPolicyTable,
       "rcPrQosLocalPolicyEntry": rcPrQosLocalPolicyEntry,
       "rcPrQosLocalPolicyGpId": rcPrQosLocalPolicyGpId,
       "rcPrQosLocalPolicyIndex": rcPrQosLocalPolicyIndex,
       "rcPrQosLocalPolicyPeakRate": rcPrQosLocalPolicyPeakRate,
       "rcPrQosLocalPolicySvcRate": rcPrQosLocalPolicySvcRate,
       "rcPrQosLocalPolicyTotalPkts": rcPrQosLocalPolicyTotalPkts,
       "rcPrQosLocalPolicyTotalBytes": rcPrQosLocalPolicyTotalBytes,
       "rcPrQosLocalPolicyBytesOverPeak": rcPrQosLocalPolicyBytesOverPeak,
       "rcPrQosLocalPolicyBytesOverSvc": rcPrQosLocalPolicyBytesOverSvc,
       "rcPrQosLocalPolicyTotalPktsDropped": rcPrQosLocalPolicyTotalPktsDropped,
       "rcPrQosLocalPolicyLaneMember": rcPrQosLocalPolicyLaneMember,
       "rcPrQosTxQueueTemplateTable": rcPrQosTxQueueTemplateTable,
       "rcPrQosTxQueueTemplateEntry": rcPrQosTxQueueTemplateEntry,
       "rcPrQosTxQueueTemplateId": rcPrQosTxQueueTemplateId,
       "rcPrQosTxQueueTemplateName": rcPrQosTxQueueTemplateName,
       "rcPrQosTxQueueTemplateMaxQueues": rcPrQosTxQueueTemplateMaxQueues,
       "rcPrQosTxQueueTemplateBalancedQueues": rcPrQosTxQueueTemplateBalancedQueues,
       "rcPrQosTxQueueTemplateHiPriQueues": rcPrQosTxQueueTemplateHiPriQueues,
       "rcPrQosTxQueueTemplateLoPriQueues": rcPrQosTxQueueTemplateLoPriQueues,
       "rcPrQosTxQueueTemplateTotalQueues": rcPrQosTxQueueTemplateTotalQueues,
       "rcPrQosTxQueueTemplateBalancedQList": rcPrQosTxQueueTemplateBalancedQList,
       "rcPrQosTxQueueTemplateHiPriQList": rcPrQosTxQueueTemplateHiPriQList,
       "rcPrQosTxQueueTemplateLoPriQList": rcPrQosTxQueueTemplateLoPriQList,
       "rcPrQosTxQueueTemplateTotalQLists": rcPrQosTxQueueTemplateTotalQLists,
       "rcPrQosTxQueueTemplateMinRateTotal": rcPrQosTxQueueTemplateMinRateTotal,
       "rcPrQosTxQueueTemplateMaxRateHiPri": rcPrQosTxQueueTemplateMaxRateHiPri,
       "rcPrQosTxQueueTemplatePortMembers": rcPrQosTxQueueTemplatePortMembers,
       "rcPrQosTxQueueTemplateFlags": rcPrQosTxQueueTemplateFlags,
       "rcPrQosTxQueueTemplateApply": rcPrQosTxQueueTemplateApply,
       "rcPrQosTxQueueTemplateRowStatus": rcPrQosTxQueueTemplateRowStatus,
       "rcPrQosTxQueueTable": rcPrQosTxQueueTable,
       "rcPrQosTxQueueEntry": rcPrQosTxQueueEntry,
       "rcPrQosTxQueueTid": rcPrQosTxQueueTid,
       "rcPrQosTxQueueQid": rcPrQosTxQueueQid,
       "rcPrQosTxQueueName": rcPrQosTxQueueName,
       "rcPrQosTxQueueStyle": rcPrQosTxQueueStyle,
       "rcPrQosTxQueueWeight": rcPrQosTxQueueWeight,
       "rcPrQosTxQueueMaxRate": rcPrQosTxQueueMaxRate,
       "rcPrQosTxQueueMinRate": rcPrQosTxQueueMinRate,
       "rcPrQosTxQueueBquantum": rcPrQosTxQueueBquantum,
       "rcPrQosTxQueueMaxLength": rcPrQosTxQueueMaxLength,
       "rcPrQosTxQueueWredCurveSet": rcPrQosTxQueueWredCurveSet,
       "rcPrQosTxQueueRowStatus": rcPrQosTxQueueRowStatus,
       "rcPrQosTxQueueStatsTable": rcPrQosTxQueueStatsTable,
       "rcPrQosTxQueueStatsEntry": rcPrQosTxQueueStatsEntry,
       "rcPrQosTxQueueStatsPort": rcPrQosTxQueueStatsPort,
       "rcPrQosTxQueueStatsQid": rcPrQosTxQueueStatsQid,
       "rcPrQosTxQueueStatsTotalPages": rcPrQosTxQueueStatsTotalPages,
       "rcPrQosTxQueueStatsDroppedPages": rcPrQosTxQueueStatsDroppedPages,
       "rcPrQosTxQueueStatsUtilization": rcPrQosTxQueueStatsUtilization,
       "rcPrQosIngressExpToQosTable": rcPrQosIngressExpToQosTable,
       "rcPrQosIngressExpToQosEntry": rcPrQosIngressExpToQosEntry,
       "rcPrQosIngressExpToQosIndex": rcPrQosIngressExpToQosIndex,
       "rcPrQosIngressExpToQosMplsExp": rcPrQosIngressExpToQosMplsExp,
       "rcPrQosIngressExpToQosLevel": rcPrQosIngressExpToQosLevel,
       "rcPrQosIngressExpToQosRowStatus": rcPrQosIngressExpToQosRowStatus,
       "rcPrQosEgressQosToExpTable": rcPrQosEgressQosToExpTable,
       "rcPrQosEgressQosToExpEntry": rcPrQosEgressQosToExpEntry,
       "rcPrQosEgressQosToExpIndex": rcPrQosEgressQosToExpIndex,
       "rcPrQosEgressQosToExpQosLevel": rcPrQosEgressQosToExpQosLevel,
       "rcPrQosEgressQosToExpMplsExp": rcPrQosEgressQosToExpMplsExp,
       "rcPrQosEgressQosToExpRowStatus": rcPrQosEgressQosToExpRowStatus,
       "rcPrFilter": rcPrFilter,
       "rcPrFilterScalars": rcPrFilterScalars,
       "rcPrFilterActTableSize": rcPrFilterActTableSize,
       "rcPrFilterAclTableSize": rcPrFilterAclTableSize,
       "rcPrFilterAceTableSize": rcPrFilterAceTableSize,
       "rcPrFilterAct": rcPrFilterAct,
       "rcPrFilterActTable": rcPrFilterActTable,
       "rcPrFilterActEntry": rcPrFilterActEntry,
       "rcPrFilterActId": rcPrFilterActId,
       "rcPrFilterActName": rcPrFilterActName,
       "rcPrFilterActArpAttrs": rcPrFilterActArpAttrs,
       "rcPrFilterActEthernetAttrs": rcPrFilterActEthernetAttrs,
       "rcPrFilterActIpAttrs": rcPrFilterActIpAttrs,
       "rcPrFilterActProtocolAttrs": rcPrFilterActProtocolAttrs,
       "rcPrFilterActApply": rcPrFilterActApply,
       "rcPrFilterActRowStatus": rcPrFilterActRowStatus,
       "rcPrFilterActIpv6Attrs": rcPrFilterActIpv6Attrs,
       "rcPrFilterActPatternTable": rcPrFilterActPatternTable,
       "rcPrFilterActPatternEntry": rcPrFilterActPatternEntry,
       "rcPrFilterActPatternActId": rcPrFilterActPatternActId,
       "rcPrFilterActPatternIndex": rcPrFilterActPatternIndex,
       "rcPrFilterActPatternName": rcPrFilterActPatternName,
       "rcPrFilterActPatternBase": rcPrFilterActPatternBase,
       "rcPrFilterActPatternOffset": rcPrFilterActPatternOffset,
       "rcPrFilterActPatternLength": rcPrFilterActPatternLength,
       "rcPrFilterActPatternRowStatus": rcPrFilterActPatternRowStatus,
       "rcPrFilterAcl": rcPrFilterAcl,
       "rcPrFilterAclTable": rcPrFilterAclTable,
       "rcPrFilterAclEntry": rcPrFilterAclEntry,
       "rcPrFilterAclId": rcPrFilterAclId,
       "rcPrFilterAclActId": rcPrFilterAclActId,
       "rcPrFilterAclName": rcPrFilterAclName,
       "rcPrFilterAclType": rcPrFilterAclType,
       "rcPrFilterAclAceListSize": rcPrFilterAclAceListSize,
       "rcPrFilterAclDefaultAction": rcPrFilterAclDefaultAction,
       "rcPrFilterAclGlobalAction": rcPrFilterAclGlobalAction,
       "rcPrFilterAclState": rcPrFilterAclState,
       "rcPrFilterAclVlanList": rcPrFilterAclVlanList,
       "rcPrFilterAclPortList": rcPrFilterAclPortList,
       "rcPrFilterAclRowStatus": rcPrFilterAclRowStatus,
       "rcPrFilterAclNumVlanIds": rcPrFilterAclNumVlanIds,
       "rcPrFilterAclPktType": rcPrFilterAclPktType,
       "rcPrFilterAclStatsTable": rcPrFilterAclStatsTable,
       "rcPrFilterAclStatsEntry": rcPrFilterAclStatsEntry,
       "rcPrFilterAclStatsAclId": rcPrFilterAclStatsAclId,
       "rcPrFilterAclStatsMatchDefaultCounterPkts": rcPrFilterAclStatsMatchDefaultCounterPkts,
       "rcPrFilterAclStatsMatchDefaultOctets": rcPrFilterAclStatsMatchDefaultOctets,
       "rcPrFilterAclStatsClear": rcPrFilterAclStatsClear,
       "rcPrFilterAce": rcPrFilterAce,
       "rcPrFilterAceTable": rcPrFilterAceTable,
       "rcPrFilterAceEntry": rcPrFilterAceEntry,
       "rcPrFilterAceAclId": rcPrFilterAceAclId,
       "rcPrFilterAceId": rcPrFilterAceId,
       "rcPrFilterAceName": rcPrFilterAceName,
       "rcPrFilterAceMode": rcPrFilterAceMode,
       "rcPrFilterAceRemarkDscp": rcPrFilterAceRemarkDscp,
       "rcPrFilterAceRemarkDot1Priority": rcPrFilterAceRemarkDot1Priority,
       "rcPrFilterAceRedirectNextHop": rcPrFilterAceRedirectNextHop,
       "rcPrFilterAceRedirectUnreach": rcPrFilterAceRedirectUnreach,
       "rcPrFilterAcePolice": rcPrFilterAcePolice,
       "rcPrFilterAceAdminState": rcPrFilterAceAdminState,
       "rcPrFilterAceOperState": rcPrFilterAceOperState,
       "rcPrFilterAceEgressQueue": rcPrFilterAceEgressQueue,
       "rcPrFilterAceEgressQueue1g": rcPrFilterAceEgressQueue1g,
       "rcPrFilterAceEgressQueue10g": rcPrFilterAceEgressQueue10g,
       "rcPrFilterAceEgressQueueNNSC": rcPrFilterAceEgressQueueNNSC,
       "rcPrFilterAceFlags": rcPrFilterAceFlags,
       "rcPrFilterAceStopOnMatch": rcPrFilterAceStopOnMatch,
       "rcPrFilterAceMltIndex": rcPrFilterAceMltIndex,
       "rcPrFilterAceRowStatus": rcPrFilterAceRowStatus,
       "rcPrFilterAceIpfixState": rcPrFilterAceIpfixState,
       "rcPrFilterAceRedirectNextHopIpv6": rcPrFilterAceRedirectNextHopIpv6,
       "rcPrFilterAceDstPortList": rcPrFilterAceDstPortList,
       "rcPrFilterAceDstVlanId": rcPrFilterAceDstVlanId,
       "rcPrFilterAceDstMltId": rcPrFilterAceDstMltId,
       "rcPrFilterAceEthSrcAddrTable": rcPrFilterAceEthSrcAddrTable,
       "rcPrFilterAceEthSrcAddrEntry": rcPrFilterAceEthSrcAddrEntry,
       "rcPrFilterAceEthSrcAddrAclId": rcPrFilterAceEthSrcAddrAclId,
       "rcPrFilterAceEthSrcAddrAceId": rcPrFilterAceEthSrcAddrAceId,
       "rcPrFilterAceEthSrcAddrList": rcPrFilterAceEthSrcAddrList,
       "rcPrFilterAceEthSrcAddrListCount": rcPrFilterAceEthSrcAddrListCount,
       "rcPrFilterAceEthSrcAddrOper": rcPrFilterAceEthSrcAddrOper,
       "rcPrFilterAceEthSrcAddrRowStatus": rcPrFilterAceEthSrcAddrRowStatus,
       "rcPrFilterAceEthDstAddrTable": rcPrFilterAceEthDstAddrTable,
       "rcPrFilterAceEthDstAddrEntry": rcPrFilterAceEthDstAddrEntry,
       "rcPrFilterAceEthDstAddrAclId": rcPrFilterAceEthDstAddrAclId,
       "rcPrFilterAceEthDstAddrAceId": rcPrFilterAceEthDstAddrAceId,
       "rcPrFilterAceEthDstAddrList": rcPrFilterAceEthDstAddrList,
       "rcPrFilterAceEthDstAddrListCount": rcPrFilterAceEthDstAddrListCount,
       "rcPrFilterAceEthDstAddrOper": rcPrFilterAceEthDstAddrOper,
       "rcPrFilterAceEthDstAddrRowStatus": rcPrFilterAceEthDstAddrRowStatus,
       "rcPrFilterAceEthEtherTable": rcPrFilterAceEthEtherTable,
       "rcPrFilterAceEthEtherEntry": rcPrFilterAceEthEtherEntry,
       "rcPrFilterAceEthEtherAclId": rcPrFilterAceEthEtherAclId,
       "rcPrFilterAceEthEtherAceId": rcPrFilterAceEthEtherAceId,
       "rcPrFilterAceEthEtherTypeList": rcPrFilterAceEthEtherTypeList,
       "rcPrFilterAceEthEtherTypeListCount": rcPrFilterAceEthEtherTypeListCount,
       "rcPrFilterAceEthEtherTypeOper": rcPrFilterAceEthEtherTypeOper,
       "rcPrFilterAceEthEtherRowStatus": rcPrFilterAceEthEtherRowStatus,
       "rcPrFilterAceEthVlanTagPrioTable": rcPrFilterAceEthVlanTagPrioTable,
       "rcPrFilterAceEthVlanTagPrioEntry": rcPrFilterAceEthVlanTagPrioEntry,
       "rcPrFilterAceEthVlanTagPrioAclId": rcPrFilterAceEthVlanTagPrioAclId,
       "rcPrFilterAceEthVlanTagPrioAceId": rcPrFilterAceEthVlanTagPrioAceId,
       "rcPrFilterAceEthVlanTagPrioVlanTagPrio": rcPrFilterAceEthVlanTagPrioVlanTagPrio,
       "rcPrFilterAceEthVlanTagPrioOper": rcPrFilterAceEthVlanTagPrioOper,
       "rcPrFilterAceEthVlanTagPrioRowStatus": rcPrFilterAceEthVlanTagPrioRowStatus,
       "rcPrFilterAceEthPortTable": rcPrFilterAceEthPortTable,
       "rcPrFilterAceEthPortEntry": rcPrFilterAceEthPortEntry,
       "rcPrFilterAceEthPortAclId": rcPrFilterAceEthPortAclId,
       "rcPrFilterAceEthPortAceId": rcPrFilterAceEthPortAceId,
       "rcPrFilterAceEthPortPort": rcPrFilterAceEthPortPort,
       "rcPrFilterAceEthPortOper": rcPrFilterAceEthPortOper,
       "rcPrFilterAceEthPortRowStatus": rcPrFilterAceEthPortRowStatus,
       "rcPrFilterAceEthVlanIdTable": rcPrFilterAceEthVlanIdTable,
       "rcPrFilterAceEthVlanIdEntry": rcPrFilterAceEthVlanIdEntry,
       "rcPrFilterAceEthVlanIdAclId": rcPrFilterAceEthVlanIdAclId,
       "rcPrFilterAceEthVlanIdAceId": rcPrFilterAceEthVlanIdAceId,
       "rcPrFilterAceEthVlanIdVlanIdList": rcPrFilterAceEthVlanIdVlanIdList,
       "rcPrFilterAceEthVlanIdOper": rcPrFilterAceEthVlanIdOper,
       "rcPrFilterAceEthVlanIdRowStatus": rcPrFilterAceEthVlanIdRowStatus,
       "rcPrFilterAceArpTable": rcPrFilterAceArpTable,
       "rcPrFilterAceArpEntry": rcPrFilterAceArpEntry,
       "rcPrFilterAceArpAclId": rcPrFilterAceArpAclId,
       "rcPrFilterAceArpAceId": rcPrFilterAceArpAceId,
       "rcPrFilterAceArpType": rcPrFilterAceArpType,
       "rcPrFilterAceArpOper": rcPrFilterAceArpOper,
       "rcPrFilterAceArpValue": rcPrFilterAceArpValue,
       "rcPrFilterAceArpRowStatus": rcPrFilterAceArpRowStatus,
       "rcPrFilterAceIpSrcAddrTable": rcPrFilterAceIpSrcAddrTable,
       "rcPrFilterAceIpSrcAddrEntry": rcPrFilterAceIpSrcAddrEntry,
       "rcPrFilterAceIpSrcAddrAclId": rcPrFilterAceIpSrcAddrAclId,
       "rcPrFilterAceIpSrcAddrAceId": rcPrFilterAceIpSrcAddrAceId,
       "rcPrFilterAceIpSrcAddrList": rcPrFilterAceIpSrcAddrList,
       "rcPrFilterAceIpSrcAddrListCount": rcPrFilterAceIpSrcAddrListCount,
       "rcPrFilterAceIpSrcAddrOper": rcPrFilterAceIpSrcAddrOper,
       "rcPrFilterAceIpSrcAddrRowStatus": rcPrFilterAceIpSrcAddrRowStatus,
       "rcPrFilterAceIpDstAddrTable": rcPrFilterAceIpDstAddrTable,
       "rcPrFilterAceIpDstAddrEntry": rcPrFilterAceIpDstAddrEntry,
       "rcPrFilterAceIpDstAddrAclId": rcPrFilterAceIpDstAddrAclId,
       "rcPrFilterAceIpDstAddrAceId": rcPrFilterAceIpDstAddrAceId,
       "rcPrFilterAceIpDstAddrList": rcPrFilterAceIpDstAddrList,
       "rcPrFilterAceIpDstAddrListCount": rcPrFilterAceIpDstAddrListCount,
       "rcPrFilterAceIpDstAddrOper": rcPrFilterAceIpDstAddrOper,
       "rcPrFilterAceIpDstAddrRowStatus": rcPrFilterAceIpDstAddrRowStatus,
       "rcPrFilterAceIpDscpTable": rcPrFilterAceIpDscpTable,
       "rcPrFilterAceIpDscpEntry": rcPrFilterAceIpDscpEntry,
       "rcPrFilterAceIpDscpAclId": rcPrFilterAceIpDscpAclId,
       "rcPrFilterAceIpDscpAceId": rcPrFilterAceIpDscpAceId,
       "rcPrFilterAceIpDscpList": rcPrFilterAceIpDscpList,
       "rcPrFilterAceIpDscpListCount": rcPrFilterAceIpDscpListCount,
       "rcPrFilterAceIpDscpOper": rcPrFilterAceIpDscpOper,
       "rcPrFilterAceIpDscpRowStatus": rcPrFilterAceIpDscpRowStatus,
       "rcPrFilterAceIpProtoTable": rcPrFilterAceIpProtoTable,
       "rcPrFilterAceIpProtoEntry": rcPrFilterAceIpProtoEntry,
       "rcPrFilterAceIpProtoAclId": rcPrFilterAceIpProtoAclId,
       "rcPrFilterAceIpProtoAceId": rcPrFilterAceIpProtoAceId,
       "rcPrFilterAceIpProtoList": rcPrFilterAceIpProtoList,
       "rcPrFilterAceIpProtoListCount": rcPrFilterAceIpProtoListCount,
       "rcPrFilterAceIpProtoOper": rcPrFilterAceIpProtoOper,
       "rcPrFilterAceIpProtoRowStatus": rcPrFilterAceIpProtoRowStatus,
       "rcPrFilterAceIpOptionsTable": rcPrFilterAceIpOptionsTable,
       "rcPrFilterAceIpOptionsEntry": rcPrFilterAceIpOptionsEntry,
       "rcPrFilterAceIpOptionsAclId": rcPrFilterAceIpOptionsAclId,
       "rcPrFilterAceIpOptionsAceId": rcPrFilterAceIpOptionsAceId,
       "rcPrFilterAceIpOptionsOptions": rcPrFilterAceIpOptionsOptions,
       "rcPrFilterAceIpOptionsOper": rcPrFilterAceIpOptionsOper,
       "rcPrFilterAceIpOptionsRowStatus": rcPrFilterAceIpOptionsRowStatus,
       "rcPrFilterAceIpFragTable": rcPrFilterAceIpFragTable,
       "rcPrFilterAceIpFragEntry": rcPrFilterAceIpFragEntry,
       "rcPrFilterAceIpFragAclId": rcPrFilterAceIpFragAclId,
       "rcPrFilterAceIpFragAceId": rcPrFilterAceIpFragAceId,
       "rcPrFilterAceIpFragFragmentation": rcPrFilterAceIpFragFragmentation,
       "rcPrFilterAceIpFragOper": rcPrFilterAceIpFragOper,
       "rcPrFilterAceIpFragRowStatus": rcPrFilterAceIpFragRowStatus,
       "rcPrFilterAceProtoTcpSrcPortTable": rcPrFilterAceProtoTcpSrcPortTable,
       "rcPrFilterAceProtoTcpSrcPortEntry": rcPrFilterAceProtoTcpSrcPortEntry,
       "rcPrFilterAceProtoTcpSrcPortAclId": rcPrFilterAceProtoTcpSrcPortAclId,
       "rcPrFilterAceProtoTcpSrcPortAceId": rcPrFilterAceProtoTcpSrcPortAceId,
       "rcPrFilterAceProtoTcpSrcPortPort": rcPrFilterAceProtoTcpSrcPortPort,
       "rcPrFilterAceProtoTcpSrcPortCount": rcPrFilterAceProtoTcpSrcPortCount,
       "rcPrFilterAceProtoTcpSrcPortOper": rcPrFilterAceProtoTcpSrcPortOper,
       "rcPrFilterAceProtoTcpSrcPortRowStatus": rcPrFilterAceProtoTcpSrcPortRowStatus,
       "rcPrFilterAceProtoUdpSrcPortTable": rcPrFilterAceProtoUdpSrcPortTable,
       "rcPrFilterAceProtoUdpSrcPortEntry": rcPrFilterAceProtoUdpSrcPortEntry,
       "rcPrFilterAceProtoUdpSrcPortAclId": rcPrFilterAceProtoUdpSrcPortAclId,
       "rcPrFilterAceProtoUdpSrcPortAceId": rcPrFilterAceProtoUdpSrcPortAceId,
       "rcPrFilterAceProtoUdpSrcPortPort": rcPrFilterAceProtoUdpSrcPortPort,
       "rcPrFilterAceProtoUdpSrcPortCount": rcPrFilterAceProtoUdpSrcPortCount,
       "rcPrFilterAceProtoUdpSrcPortOper": rcPrFilterAceProtoUdpSrcPortOper,
       "rcPrFilterAceProtoUdpSrcPortRowStatus": rcPrFilterAceProtoUdpSrcPortRowStatus,
       "rcPrFilterAceProtoTcpDstPortTable": rcPrFilterAceProtoTcpDstPortTable,
       "rcPrFilterAceProtoTcpDstPortEntry": rcPrFilterAceProtoTcpDstPortEntry,
       "rcPrFilterAceProtoTcpDstPortAclId": rcPrFilterAceProtoTcpDstPortAclId,
       "rcPrFilterAceProtoTcpDstPortAceId": rcPrFilterAceProtoTcpDstPortAceId,
       "rcPrFilterAceProtoTcpDstPortPort": rcPrFilterAceProtoTcpDstPortPort,
       "rcPrFilterAceProtoTcpDstPortCount": rcPrFilterAceProtoTcpDstPortCount,
       "rcPrFilterAceProtoTcpDstPortOper": rcPrFilterAceProtoTcpDstPortOper,
       "rcPrFilterAceProtoTcpDstPortRowStatus": rcPrFilterAceProtoTcpDstPortRowStatus,
       "rcPrFilterAceProtoUdpDstPortTable": rcPrFilterAceProtoUdpDstPortTable,
       "rcPrFilterAceProtoUdpDstPortEntry": rcPrFilterAceProtoUdpDstPortEntry,
       "rcPrFilterAceProtoUdpDstPortAclId": rcPrFilterAceProtoUdpDstPortAclId,
       "rcPrFilterAceProtoUdpDstPortAceId": rcPrFilterAceProtoUdpDstPortAceId,
       "rcPrFilterAceProtoUdpDstPortPort": rcPrFilterAceProtoUdpDstPortPort,
       "rcPrFilterAceProtoUdpDstPortCount": rcPrFilterAceProtoUdpDstPortCount,
       "rcPrFilterAceProtoUdpDstPortOper": rcPrFilterAceProtoUdpDstPortOper,
       "rcPrFilterAceProtoUdpDstPortRowStatus": rcPrFilterAceProtoUdpDstPortRowStatus,
       "rcPrFilterAceProtoIcmpMsgTypeTable": rcPrFilterAceProtoIcmpMsgTypeTable,
       "rcPrFilterAceProtoIcmpMsgTypeEntry": rcPrFilterAceProtoIcmpMsgTypeEntry,
       "rcPrFilterAceProtoIcmpMsgTypeAclId": rcPrFilterAceProtoIcmpMsgTypeAclId,
       "rcPrFilterAceProtoIcmpMsgTypeAceId": rcPrFilterAceProtoIcmpMsgTypeAceId,
       "rcPrFilterAceProtoIcmpMsgTypeList": rcPrFilterAceProtoIcmpMsgTypeList,
       "rcPrFilterAceProtoIcmpMsgTypeCount": rcPrFilterAceProtoIcmpMsgTypeCount,
       "rcPrFilterAceProtoIcmpMsgTypeOper": rcPrFilterAceProtoIcmpMsgTypeOper,
       "rcPrFilterAceProtoIcmpMsgTypeRowStatus": rcPrFilterAceProtoIcmpMsgTypeRowStatus,
       "rcPrFilterAceProtoTcpFlagsTable": rcPrFilterAceProtoTcpFlagsTable,
       "rcPrFilterAceProtoTcpFlagsEntry": rcPrFilterAceProtoTcpFlagsEntry,
       "rcPrFilterAceProtoTcpFlagsAclId": rcPrFilterAceProtoTcpFlagsAclId,
       "rcPrFilterAceProtoTcpFlagsAceId": rcPrFilterAceProtoTcpFlagsAceId,
       "rcPrFilterAceProtoTcpFlagsList": rcPrFilterAceProtoTcpFlagsList,
       "rcPrFilterAceProtoTcpFlagsCount": rcPrFilterAceProtoTcpFlagsCount,
       "rcPrFilterAceProtoTcpFlagsOper": rcPrFilterAceProtoTcpFlagsOper,
       "rcPrFilterAceProtoTcpFlagsRowStatus": rcPrFilterAceProtoTcpFlagsRowStatus,
       "rcPrFilterAcePattern1Table": rcPrFilterAcePattern1Table,
       "rcPrFilterAcePattern1Entry": rcPrFilterAcePattern1Entry,
       "rcPrFilterAcePattern1AclId": rcPrFilterAcePattern1AclId,
       "rcPrFilterAcePattern1AceId": rcPrFilterAcePattern1AceId,
       "rcPrFilterAcePattern1Name": rcPrFilterAcePattern1Name,
       "rcPrFilterAcePattern1Value": rcPrFilterAcePattern1Value,
       "rcPrFilterAcePattern1Oper": rcPrFilterAcePattern1Oper,
       "rcPrFilterAcePattern1RowStatus": rcPrFilterAcePattern1RowStatus,
       "rcPrFilterAcePattern2Table": rcPrFilterAcePattern2Table,
       "rcPrFilterAcePattern2Entry": rcPrFilterAcePattern2Entry,
       "rcPrFilterAcePattern2AclId": rcPrFilterAcePattern2AclId,
       "rcPrFilterAcePattern2AceId": rcPrFilterAcePattern2AceId,
       "rcPrFilterAcePattern2Name": rcPrFilterAcePattern2Name,
       "rcPrFilterAcePattern2Value": rcPrFilterAcePattern2Value,
       "rcPrFilterAcePattern2Oper": rcPrFilterAcePattern2Oper,
       "rcPrFilterAcePattern2RowStatus": rcPrFilterAcePattern2RowStatus,
       "rcPrFilterAcePattern3Table": rcPrFilterAcePattern3Table,
       "rcPrFilterAcePattern3Entry": rcPrFilterAcePattern3Entry,
       "rcPrFilterAcePattern3AclId": rcPrFilterAcePattern3AclId,
       "rcPrFilterAcePattern3AceId": rcPrFilterAcePattern3AceId,
       "rcPrFilterAcePattern3Name": rcPrFilterAcePattern3Name,
       "rcPrFilterAcePattern3Value": rcPrFilterAcePattern3Value,
       "rcPrFilterAcePattern3Oper": rcPrFilterAcePattern3Oper,
       "rcPrFilterAcePattern3RowStatus": rcPrFilterAcePattern3RowStatus,
       "rcPrFilterAceStatsTable": rcPrFilterAceStatsTable,
       "rcPrFilterAceStatsEntry": rcPrFilterAceStatsEntry,
       "rcPrFilterAceStatsAclId": rcPrFilterAceStatsAclId,
       "rcPrFilterAceStatsAceId": rcPrFilterAceStatsAceId,
       "rcPrFilterAceStatsPortId": rcPrFilterAceStatsPortId,
       "rcPrFilterAceStatsMatchCountPkts": rcPrFilterAceStatsMatchCountPkts,
       "rcPrFilterAceStatsMatchCountOctets": rcPrFilterAceStatsMatchCountOctets,
       "rcPrFilterAceStatsClear": rcPrFilterAceStatsClear,
       "rcPrFilterAceEthShowTable": rcPrFilterAceEthShowTable,
       "rcPrFilterAceEthShowEntry": rcPrFilterAceEthShowEntry,
       "rcPrFilterAceEthShowAclId": rcPrFilterAceEthShowAclId,
       "rcPrFilterAceEthShowAceId": rcPrFilterAceEthShowAceId,
       "rcPrFilterAceEthShowSrcAddrList": rcPrFilterAceEthShowSrcAddrList,
       "rcPrFilterAceEthShowSrcAddrOper": rcPrFilterAceEthShowSrcAddrOper,
       "rcPrFilterAceEthShowDstAddrList": rcPrFilterAceEthShowDstAddrList,
       "rcPrFilterAceEthShowDstAddrOper": rcPrFilterAceEthShowDstAddrOper,
       "rcPrFilterAceEthShowEtherTypeList": rcPrFilterAceEthShowEtherTypeList,
       "rcPrFilterAceEthShowEtherTypeOper": rcPrFilterAceEthShowEtherTypeOper,
       "rcPrFilterAceEthShowVlanTagPrio": rcPrFilterAceEthShowVlanTagPrio,
       "rcPrFilterAceEthShowVlanTagPrioOper": rcPrFilterAceEthShowVlanTagPrioOper,
       "rcPrFilterAceEthShowPort": rcPrFilterAceEthShowPort,
       "rcPrFilterAceEthShowPortOper": rcPrFilterAceEthShowPortOper,
       "rcPrFilterAceEthShowVlanIdList": rcPrFilterAceEthShowVlanIdList,
       "rcPrFilterAceEthShowVlanIdOper": rcPrFilterAceEthShowVlanIdOper,
       "rcPrFilterAceIpShowTable": rcPrFilterAceIpShowTable,
       "rcPrFilterAceIpShowEntry": rcPrFilterAceIpShowEntry,
       "rcPrFilterAceIpShowAclId": rcPrFilterAceIpShowAclId,
       "rcPrFilterAceIpShowAceId": rcPrFilterAceIpShowAceId,
       "rcPrFilterAceIpShowSrcAddrList": rcPrFilterAceIpShowSrcAddrList,
       "rcPrFilterAceIpShowSrcAddrOper": rcPrFilterAceIpShowSrcAddrOper,
       "rcPrFilterAceIpShowDstAddrList": rcPrFilterAceIpShowDstAddrList,
       "rcPrFilterAceIpShowDstAddrOper": rcPrFilterAceIpShowDstAddrOper,
       "rcPrFilterAceIpShowDscpList": rcPrFilterAceIpShowDscpList,
       "rcPrFilterAceIpShowDscpOper": rcPrFilterAceIpShowDscpOper,
       "rcPrFilterAceIpShowProtoList": rcPrFilterAceIpShowProtoList,
       "rcPrFilterAceIpShowProtoOper": rcPrFilterAceIpShowProtoOper,
       "rcPrFilterAceIpShowOptions": rcPrFilterAceIpShowOptions,
       "rcPrFilterAceIpShowOptionsOper": rcPrFilterAceIpShowOptionsOper,
       "rcPrFilterAceIpShowFragmentation": rcPrFilterAceIpShowFragmentation,
       "rcPrFilterAceIpShowFragOper": rcPrFilterAceIpShowFragOper,
       "rcPrFilterAceProtoShowTable": rcPrFilterAceProtoShowTable,
       "rcPrFilterAceProtoShowEntry": rcPrFilterAceProtoShowEntry,
       "rcPrFilterAceProtoShowAclId": rcPrFilterAceProtoShowAclId,
       "rcPrFilterAceProtoShowAceId": rcPrFilterAceProtoShowAceId,
       "rcPrFilterAceProtoShowTcpSrcPort": rcPrFilterAceProtoShowTcpSrcPort,
       "rcPrFilterAceProtoShowTcpSrcPortOper": rcPrFilterAceProtoShowTcpSrcPortOper,
       "rcPrFilterAceProtoShowUdpSrcPort": rcPrFilterAceProtoShowUdpSrcPort,
       "rcPrFilterAceProtoShowUdpSrcPortOper": rcPrFilterAceProtoShowUdpSrcPortOper,
       "rcPrFilterAceProtoShowTcpDstPort": rcPrFilterAceProtoShowTcpDstPort,
       "rcPrFilterAceProtoShowTcpDstPortOper": rcPrFilterAceProtoShowTcpDstPortOper,
       "rcPrFilterAceProtoShowUdpDstPort": rcPrFilterAceProtoShowUdpDstPort,
       "rcPrFilterAceProtoShowUdpDstPortOper": rcPrFilterAceProtoShowUdpDstPortOper,
       "rcPrFilterAceProtoShowIcmpMsgTypeList": rcPrFilterAceProtoShowIcmpMsgTypeList,
       "rcPrFilterAceProtoShowIcmpMsgTypeOper": rcPrFilterAceProtoShowIcmpMsgTypeOper,
       "rcPrFilterAceProtoShowTcpFlagsList": rcPrFilterAceProtoShowTcpFlagsList,
       "rcPrFilterAceProtoShowTcpFlagsOper": rcPrFilterAceProtoShowTcpFlagsOper,
       "rcPrFilterAcePatternShowTable": rcPrFilterAcePatternShowTable,
       "rcPrFilterAcePatternShowEntry": rcPrFilterAcePatternShowEntry,
       "rcPrFilterAcePatternShowAclId": rcPrFilterAcePatternShowAclId,
       "rcPrFilterAcePatternShowAceId": rcPrFilterAcePatternShowAceId,
       "rcPrFilterAcePatternShowPattern1Name": rcPrFilterAcePatternShowPattern1Name,
       "rcPrFilterAcePatternShowPattern1Value": rcPrFilterAcePatternShowPattern1Value,
       "rcPrFilterAcePatternShowPattern1Oper": rcPrFilterAcePatternShowPattern1Oper,
       "rcPrFilterAcePatternShowPattern2Name": rcPrFilterAcePatternShowPattern2Name,
       "rcPrFilterAcePatternShowPattern2Value": rcPrFilterAcePatternShowPattern2Value,
       "rcPrFilterAcePatternShowPattern2Oper": rcPrFilterAcePatternShowPattern2Oper,
       "rcPrFilterAcePatternShowPattern3Name": rcPrFilterAcePatternShowPattern3Name,
       "rcPrFilterAcePatternShowPattern3Value": rcPrFilterAcePatternShowPattern3Value,
       "rcPrFilterAcePatternShowPattern3Oper": rcPrFilterAcePatternShowPattern3Oper,
       "rcPrFilterAceIpv6SrcAddrTable": rcPrFilterAceIpv6SrcAddrTable,
       "rcPrFilterAceIpv6SrcAddrEntry": rcPrFilterAceIpv6SrcAddrEntry,
       "rcPrFilterAceIpv6SrcAddrAclId": rcPrFilterAceIpv6SrcAddrAclId,
       "rcPrFilterAceIpv6SrcAddrAceId": rcPrFilterAceIpv6SrcAddrAceId,
       "rcPrFilterAceIpv6SrcAddrList": rcPrFilterAceIpv6SrcAddrList,
       "rcPrFilterAceIpv6SrcAddrListCount": rcPrFilterAceIpv6SrcAddrListCount,
       "rcPrFilterAceIpv6SrcAddrOper": rcPrFilterAceIpv6SrcAddrOper,
       "rcPrFilterAceIpv6SrcAddrRowStatus": rcPrFilterAceIpv6SrcAddrRowStatus,
       "rcPrFilterAceIpv6DstAddrTable": rcPrFilterAceIpv6DstAddrTable,
       "rcPrFilterAceIpv6DstAddrEntry": rcPrFilterAceIpv6DstAddrEntry,
       "rcPrFilterAceIpv6DstAddrAclId": rcPrFilterAceIpv6DstAddrAclId,
       "rcPrFilterAceIpv6DstAddrAceId": rcPrFilterAceIpv6DstAddrAceId,
       "rcPrFilterAceIpv6DstAddrList": rcPrFilterAceIpv6DstAddrList,
       "rcPrFilterAceIpv6DstAddrListCount": rcPrFilterAceIpv6DstAddrListCount,
       "rcPrFilterAceIpv6DstAddrOper": rcPrFilterAceIpv6DstAddrOper,
       "rcPrFilterAceIpv6DstAddrRowStatus": rcPrFilterAceIpv6DstAddrRowStatus,
       "rcPrFilterAceIpv6NextHdrTable": rcPrFilterAceIpv6NextHdrTable,
       "rcPrFilterAceIpv6NextHdrEntry": rcPrFilterAceIpv6NextHdrEntry,
       "rcPrFilterAceIpv6NextHdrAclId": rcPrFilterAceIpv6NextHdrAclId,
       "rcPrFilterAceIpv6NextHdrAceId": rcPrFilterAceIpv6NextHdrAceId,
       "rcPrFilterAceIpv6NextHdrNextHdr": rcPrFilterAceIpv6NextHdrNextHdr,
       "rcPrFilterAceIpv6NextHdrOper": rcPrFilterAceIpv6NextHdrOper,
       "rcPrFilterAceIpv6NextHdrRowStatus": rcPrFilterAceIpv6NextHdrRowStatus,
       "rcPrFilterAceIpv6ShowTable": rcPrFilterAceIpv6ShowTable,
       "rcPrFilterAceIpv6ShowEntry": rcPrFilterAceIpv6ShowEntry,
       "rcPrFilterAceIpv6ShowAclId": rcPrFilterAceIpv6ShowAclId,
       "rcPrFilterAceIpv6ShowAceId": rcPrFilterAceIpv6ShowAceId,
       "rcPrFilterAceIpv6ShowSrcAddrList": rcPrFilterAceIpv6ShowSrcAddrList,
       "rcPrFilterAceIpv6ShowSrcAddrOper": rcPrFilterAceIpv6ShowSrcAddrOper,
       "rcPrFilterAceIpv6ShowDstAddrList": rcPrFilterAceIpv6ShowDstAddrList,
       "rcPrFilterAceIpv6ShowDstAddrOper": rcPrFilterAceIpv6ShowDstAddrOper,
       "rcPrFilterAceIpv6ShowNxtHdrNxtHdr": rcPrFilterAceIpv6ShowNxtHdrNxtHdr,
       "rcPrFilterAceIpv6ShowNxtHdrOper": rcPrFilterAceIpv6ShowNxtHdrOper,
       "rcVrf": rcVrf,
       "rcVrfMib": rcVrfMib,
       "rcVrfNotifications": rcVrfNotifications,
       "rcVrfObjects": rcVrfObjects,
       "rcVrfConfig": rcVrfConfig,
       "rcVrfConfigScalars": rcVrfConfigScalars,
       "rcVrfConfigNextAvailableVrfId": rcVrfConfigNextAvailableVrfId,
       "rcVrfConfigTable": rcVrfConfigTable,
       "rcVrfConfigEntry": rcVrfConfigEntry,
       "rcVrfId": rcVrfId,
       "rcVrfRowStatus": rcVrfRowStatus,
       "rcVrfName": rcVrfName,
       "rcVrfContextName": rcVrfContextName,
       "rcVrfTrapEnable": rcVrfTrapEnable,
       "rcVrfMaxRoutes": rcVrfMaxRoutes,
       "rcVrfAdminStatus": rcVrfAdminStatus,
       "rcVrfVpnId": rcVrfVpnId,
       "rcVrfRpTrigger": rcVrfRpTrigger,
       "rcVrfMaxRoutesTrapEnable": rcVrfMaxRoutesTrapEnable,
       "rcVrfStat": rcVrfStat,
       "rcVrfStatScalars": rcVrfStatScalars,
       "rcVrfConfiguredVRFs": rcVrfConfiguredVRFs,
       "rcVrfActiveVRFs": rcVrfActiveVRFs,
       "rcVrfStatTable": rcVrfStatTable,
       "rcVrfStatEntry": rcVrfStatEntry,
       "rcVrfStatRouteEntries": rcVrfStatRouteEntries,
       "rcVrfStatFIBEntries": rcVrfStatFIBEntries,
       "rcVrfStatUpTime": rcVrfStatUpTime,
       "rcVrfOperStatus": rcVrfOperStatus,
       "rcVrfRpStatus": rcVrfRpStatus,
       "rcVrfRouterAddressType": rcVrfRouterAddressType,
       "rcVrfRouterAddress": rcVrfRouterAddress,
       "rcVrfIpVpnTableSize": rcVrfIpVpnTableSize,
       "rcVrfIpVpnTable": rcVrfIpVpnTable,
       "rcVrfIpVpnTableEntry": rcVrfIpVpnTableEntry,
       "rcVrfIpVpnVrfId": rcVrfIpVpnVrfId,
       "rcVrfIpVpnStatus": rcVrfIpVpnStatus,
       "rcVrfIpVpnImportRTList": rcVrfIpVpnImportRTList,
       "rcVrfIpVpnExportRTList": rcVrfIpVpnExportRTList,
       "rcVrfIpVpnSvcLblAllocOpt": rcVrfIpVpnSvcLblAllocOpt,
       "rcVrfIpVpnRowStatus": rcVrfIpVpnRowStatus,
       "rcVrfIpVpnIsidNumber": rcVrfIpVpnIsidNumber,
       "rcVrfNotificationObjects": rcVrfNotificationObjects,
       "rcVrrpv3": rcVrrpv3,
       "rcVrrpTmpMib": rcVrrpTmpMib,
       "rcVrrpTmpNotifications": rcVrrpTmpNotifications,
       "rcVrrpTmpTrapNewMaster": rcVrrpTmpTrapNewMaster,
       "rcVrrpTmpTrapProtoError": rcVrrpTmpTrapProtoError,
       "rcVrrpTmpOperations": rcVrrpTmpOperations,
       "rcVrrpTmpNotificationCntl": rcVrrpTmpNotificationCntl,
       "rcVrrpTmpOperationsTable": rcVrrpTmpOperationsTable,
       "rcVrrpTmpOperationsEntry": rcVrrpTmpOperationsEntry,
       "rcVrrpTmpOperationsIfIndex": rcVrrpTmpOperationsIfIndex,
       "rcVrrpTmpOperationsInetAddrType": rcVrrpTmpOperationsInetAddrType,
       "rcVrrpTmpOperationsVrId": rcVrrpTmpOperationsVrId,
       "rcVrrpTmpOperationsVirtualMacAddr": rcVrrpTmpOperationsVirtualMacAddr,
       "rcVrrpTmpOperationsState": rcVrrpTmpOperationsState,
       "rcVrrpTmpOperationsPriority": rcVrrpTmpOperationsPriority,
       "rcVrrpTmpOperationsAddrCount": rcVrrpTmpOperationsAddrCount,
       "rcVrrpTmpOperationsMasterIpAddr": rcVrrpTmpOperationsMasterIpAddr,
       "rcVrrpTmpOperationsPrimaryIpAddr": rcVrrpTmpOperationsPrimaryIpAddr,
       "rcVrrpTmpOperationsAdvInterval": rcVrrpTmpOperationsAdvInterval,
       "rcVrrpTmpOperationsPreemptMode": rcVrrpTmpOperationsPreemptMode,
       "rcVrrpTmpOperationsAcceptMode": rcVrrpTmpOperationsAcceptMode,
       "rcVrrpTmpOperationsUpTime": rcVrrpTmpOperationsUpTime,
       "rcVrrpTmpOperationsStorageType": rcVrrpTmpOperationsStorageType,
       "rcVrrpTmpOperationsRowStatus": rcVrrpTmpOperationsRowStatus,
       "rcVrrpTmpAssociatedIpAddrTable": rcVrrpTmpAssociatedIpAddrTable,
       "rcVrrpTmpAssociatedIpAddrEntry": rcVrrpTmpAssociatedIpAddrEntry,
       "rcVrrpTmpAssociatedIpAddr": rcVrrpTmpAssociatedIpAddr,
       "rcVrrpTmpAssociatedIpAddrPrefixLength": rcVrrpTmpAssociatedIpAddrPrefixLength,
       "rcVrrpTmpAssociatedStorageType": rcVrrpTmpAssociatedStorageType,
       "rcVrrpTmpAssociatedIpAddrRowStatus": rcVrrpTmpAssociatedIpAddrRowStatus,
       "rcVrrpTmpNewMasterReason": rcVrrpTmpNewMasterReason,
       "rcVrrpTmpTrapProtoErrReason": rcVrrpTmpTrapProtoErrReason,
       "rcVrrpTmpStatistics": rcVrrpTmpStatistics,
       "rcVrrpTmpRouterChecksumErrors": rcVrrpTmpRouterChecksumErrors,
       "rcVrrpTmpRouterVersionErrors": rcVrrpTmpRouterVersionErrors,
       "rcVrrpTmpRouterVrIdErrors": rcVrrpTmpRouterVrIdErrors,
       "rcVrrpTmpRouterStatisticsTable": rcVrrpTmpRouterStatisticsTable,
       "rcVrrpTmpRouterStatisticsEntry": rcVrrpTmpRouterStatisticsEntry,
       "rcVrrpTmpStatisticsMasterTransitions": rcVrrpTmpStatisticsMasterTransitions,
       "rcVrrpTmpStatisticsRcvdAdvertisements": rcVrrpTmpStatisticsRcvdAdvertisements,
       "rcVrrpTmpStatisticsAdvIntervalErrors": rcVrrpTmpStatisticsAdvIntervalErrors,
       "rcVrrpTmpStatisticsIpTtlErrors": rcVrrpTmpStatisticsIpTtlErrors,
       "rcVrrpTmpStatisticsRcvdPriZeroPackets": rcVrrpTmpStatisticsRcvdPriZeroPackets,
       "rcVrrpTmpStatisticsSentPriZeroPackets": rcVrrpTmpStatisticsSentPriZeroPackets,
       "rcVrrpTmpStatisticsRcvdInvalidTypePkts": rcVrrpTmpStatisticsRcvdInvalidTypePkts,
       "rcVrrpTmpStatisticsAddressListErrors": rcVrrpTmpStatisticsAddressListErrors,
       "rcVrrpTmpStatisticsPacketLengthErrors": rcVrrpTmpStatisticsPacketLengthErrors,
       "rcVrrpTmpStatisticsRcvdInvalidAuthentications": rcVrrpTmpStatisticsRcvdInvalidAuthentications,
       "rcVrrpTmpStatisticsDiscontinuityTime": rcVrrpTmpStatisticsDiscontinuityTime,
       "rcVrrpTmpStatisticsRefreshRate": rcVrrpTmpStatisticsRefreshRate,
       "rcVrrpExtMib": rcVrrpExtMib,
       "rcVrrpExtObjects": rcVrrpExtObjects,
       "rcVrrpExtScalars": rcVrrpExtScalars,
       "rcVrrpExtPingVirtualAddrEnable": rcVrrpExtPingVirtualAddrEnable,
       "rcVrrpExtVersionNumber": rcVrrpExtVersionNumber,
       "rcVrrpExtTrapStateTransitionType": rcVrrpExtTrapStateTransitionType,
       "rcVrrpExtTrapStateTransitionCause": rcVrrpExtTrapStateTransitionCause,
       "rcVrrpExtOperationsVrId": rcVrrpExtOperationsVrId,
       "rcVrrpExtNotifications": rcVrrpExtNotifications,
       "rcVrrpExtTrapStateTransition": rcVrrpExtTrapStateTransition,
       "rcVrrpExtOperations": rcVrrpExtOperations,
       "rcVrrpExtOperationsTable": rcVrrpExtOperationsTable,
       "rcVrrpExtOperationsEntry": rcVrrpExtOperationsEntry,
       "rcVrrpExtOperationsAction": rcVrrpExtOperationsAction,
       "rcVrrpExtOperationsBackUpMaster": rcVrrpExtOperationsBackUpMaster,
       "rcVrrpExtOperationsBackUpMasterState": rcVrrpExtOperationsBackUpMasterState,
       "rcVrrpExtOperationsCriticalIpAddr": rcVrrpExtOperationsCriticalIpAddr,
       "rcVrrpExtOperationsCriticalIpAddrEnabled": rcVrrpExtOperationsCriticalIpAddrEnabled,
       "rcVrrpExtOperationsControl": rcVrrpExtOperationsControl,
       "rcVrrpExtOperationsHoldDownTimer": rcVrrpExtOperationsHoldDownTimer,
       "rcVrrpExtOperationsHoldDownState": rcVrrpExtOperationsHoldDownState,
       "rcVrrpExtOperationsHoldDownTimeRemaining": rcVrrpExtOperationsHoldDownTimeRemaining,
       "rcVrrpExtOperationsFasterAdvInterval": rcVrrpExtOperationsFasterAdvInterval,
       "rcVrrpExtOperationsFasterAdvIntervalEnabled": rcVrrpExtOperationsFasterAdvIntervalEnabled,
       "rcVrrpExtOperationsLinkLocalAddr": rcVrrpExtOperationsLinkLocalAddr,
       "rcVrrpExtOperationsGlobalIpAddr": rcVrrpExtOperationsGlobalIpAddr,
       "rcA1100": rcA1100,
       "rcA1250": rcA1250,
       "rcA1150": rcA1150,
       "rcA1200": rcA1200,
       "rcA1050": rcA1050,
       "rcA740": rcA740,
       "rcA750": rcA750,
       "rcA790": rcA790,
       "rcA750S": rcA750S,
       "rcA8610": rcA8610,
       "rcA8606": rcA8606,
       "rcA8110": rcA8110,
       "rcA8106": rcA8106,
       "rcA8603": rcA8603,
       "rcA8103": rcA8103,
       "rcA8110co": rcA8110co,
       "rcA8610co": rcA8610co,
       "rcBayStack": rcBayStack,
       "rcA1424": rcA1424,
       "rcA1648": rcA1648,
       "rcA1612": rcA1612,
       "rcA1624": rcA1624,
       "rcRBS2402": rcRBS2402,
       "rcAtr8310": rcAtr8310,
       "rcAtr8306": rcAtr8306,
       "rcAtr8010": rcAtr8010,
       "rcAtr8006": rcAtr8006,
       "rcA8603r": rcA8603r,
       "rcERS8603r": rcERS8603r,
       "rcA8803r": rcA8803r,
       "rcA8806": rcA8806,
       "rcA8810": rcA8810,
       "rcA8810co": rcA8810co,
       "rcVSP9012": rcVSP9012,
       "rcA8003": rcA8003,
       "rcA8006": rcA8006,
       "rcA8010": rcA8010,
       "rcA8010co": rcA8010co,
       "snmpV2": snmpV2,
       "snmpModules": snmpModules,
       "snmpMIB": snmpMIB,
       "snmpMIBObjects": snmpMIBObjects,
       "snmpTraps": snmpTraps}
)

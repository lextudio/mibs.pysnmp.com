# SNMP MIB module (DACS-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/DACS-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 21:22:53 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions



class MacAddress(OctetString):
    """Custom type MacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )




# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_Rad_ObjectIdentity = ObjectIdentity
rad = _Rad_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164)
)
_RadTokenRing_ObjectIdentity = ObjectIdentity
radTokenRing = _RadTokenRing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 1)
)
_RadFddi_ObjectIdentity = ObjectIdentity
radFddi = _RadFddi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 2)
)
_RadWan_ObjectIdentity = ObjectIdentity
radWan = _RadWan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3)
)
_WanGen_ObjectIdentity = ObjectIdentity
wanGen = _WanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1)
)
_ChasWanGen_ObjectIdentity = ObjectIdentity
chasWanGen = _ChasWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1)
)


class _ChasVersion_Type(DisplayString):
    """Custom type chasVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_ChasVersion_Type.__name__ = "DisplayString"
_ChasVersion_Object = MibScalar
chasVersion = _ChasVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 1),
    _ChasVersion_Type()
)
chasVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasVersion.setStatus("mandatory")
_ChasTotalNoOfSlt_Type = Integer32
_ChasTotalNoOfSlt_Object = MibScalar
chasTotalNoOfSlt = _ChasTotalNoOfSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 2),
    _ChasTotalNoOfSlt_Type()
)
chasTotalNoOfSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasTotalNoOfSlt.setStatus("mandatory")
_ChasTotalNoOfIoSlt_Type = Integer32
_ChasTotalNoOfIoSlt_Object = MibScalar
chasTotalNoOfIoSlt = _ChasTotalNoOfIoSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 3),
    _ChasTotalNoOfIoSlt_Type()
)
chasTotalNoOfIoSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasTotalNoOfIoSlt.setStatus("mandatory")
_ChasTotalNoOfPsSlt_Type = Integer32
_ChasTotalNoOfPsSlt_Object = MibScalar
chasTotalNoOfPsSlt = _ChasTotalNoOfPsSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 4),
    _ChasTotalNoOfPsSlt_Type()
)
chasTotalNoOfPsSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasTotalNoOfPsSlt.setStatus("mandatory")
_ChasTotalNoOfClSlt_Type = Integer32
_ChasTotalNoOfClSlt_Object = MibScalar
chasTotalNoOfClSlt = _ChasTotalNoOfClSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 5),
    _ChasTotalNoOfClSlt_Type()
)
chasTotalNoOfClSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasTotalNoOfClSlt.setStatus("mandatory")
_AgnWanGen_ObjectIdentity = ObjectIdentity
agnWanGen = _AgnWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2)
)
_StatAgnGen_ObjectIdentity = ObjectIdentity
statAgnGen = _StatAgnGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1)
)


class _AgnSDateFormat_Type(Integer32):
    """Custom type agnSDateFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ddMMYYYY", 1),
          ("mmDDYYYY", 2),
          ("yyyyDDMM", 3),
          ("yyyyMMDD", 4))
    )


_AgnSDateFormat_Type.__name__ = "Integer32"
_AgnSDateFormat_Object = MibScalar
agnSDateFormat = _AgnSDateFormat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 1),
    _AgnSDateFormat_Type()
)
agnSDateFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSDateFormat.setStatus("mandatory")


class _AgnSDateCmd_Type(DisplayString):
    """Custom type agnSDateCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSDateCmd_Type.__name__ = "DisplayString"
_AgnSDateCmd_Object = MibScalar
agnSDateCmd = _AgnSDateCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 2),
    _AgnSDateCmd_Type()
)
agnSDateCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSDateCmd.setStatus("mandatory")


class _AgnSTimeCmd_Type(DisplayString):
    """Custom type agnSTimeCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSTimeCmd_Type.__name__ = "DisplayString"
_AgnSTimeCmd_Object = MibScalar
agnSTimeCmd = _AgnSTimeCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 3),
    _AgnSTimeCmd_Type()
)
agnSTimeCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSTimeCmd.setStatus("mandatory")
_AgnSActiveCnfg_Type = Integer32
_AgnSActiveCnfg_Object = MibScalar
agnSActiveCnfg = _AgnSActiveCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 4),
    _AgnSActiveCnfg_Type()
)
agnSActiveCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSActiveCnfg.setStatus("mandatory")
_AgnSEditCnfg_Type = Integer32
_AgnSEditCnfg_Object = MibScalar
agnSEditCnfg = _AgnSEditCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 5),
    _AgnSEditCnfg_Type()
)
agnSEditCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSEditCnfg.setStatus("mandatory")


class _AgnSLastCnfgFlipTime_Type(DisplayString):
    """Custom type agnSLastCnfgFlipTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSLastCnfgFlipTime_Type.__name__ = "DisplayString"
_AgnSLastCnfgFlipTime_Object = MibScalar
agnSLastCnfgFlipTime = _AgnSLastCnfgFlipTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 6),
    _AgnSLastCnfgFlipTime_Type()
)
agnSLastCnfgFlipTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSLastCnfgFlipTime.setStatus("mandatory")


class _AgnSLastCnfgFlipCause_Type(DisplayString):
    """Custom type agnSLastCnfgFlipCause based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSLastCnfgFlipCause_Type.__name__ = "DisplayString"
_AgnSLastCnfgFlipCause_Object = MibScalar
agnSLastCnfgFlipCause = _AgnSLastCnfgFlipCause_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 7),
    _AgnSLastCnfgFlipCause_Type()
)
agnSLastCnfgFlipCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSLastCnfgFlipCause.setStatus("mandatory")


class _AgnSEditBy_Type(Integer32):
    """Custom type agnSEditBy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lcd", 7),
          ("none", 1),
          ("snmp", 2),
          ("terCon1", 3),
          ("terCon2", 4),
          ("terInbandCon1", 5),
          ("terInbandCon2", 6))
    )


_AgnSEditBy_Type.__name__ = "Integer32"
_AgnSEditBy_Object = MibScalar
agnSEditBy = _AgnSEditBy_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 8),
    _AgnSEditBy_Type()
)
agnSEditBy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSEditBy.setStatus("mandatory")


class _AgnSClkSrc_Type(Integer32):
    """Custom type agnSClkSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("internal", 3),
          ("master", 1))
    )


_AgnSClkSrc_Type.__name__ = "Integer32"
_AgnSClkSrc_Object = MibScalar
agnSClkSrc = _AgnSClkSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 9),
    _AgnSClkSrc_Type()
)
agnSClkSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSClkSrc.setStatus("mandatory")


class _AgnSAlrStatus_Type(Integer32):
    """Custom type agnSAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_AgnSAlrStatus_Type.__name__ = "Integer32"
_AgnSAlrStatus_Object = MibScalar
agnSAlrStatus = _AgnSAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 10),
    _AgnSAlrStatus_Type()
)
agnSAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrStatus.setStatus("mandatory")


class _AgnSAlrStatusAll_Type(Integer32):
    """Custom type agnSAlrStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_AgnSAlrStatusAll_Type.__name__ = "Integer32"
_AgnSAlrStatusAll_Object = MibScalar
agnSAlrStatusAll = _AgnSAlrStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 11),
    _AgnSAlrStatusAll_Type()
)
agnSAlrStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrStatusAll.setStatus("mandatory")


class _AgnSMaskedAlrStat_Type(Integer32):
    """Custom type agnSMaskedAlrStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_AgnSMaskedAlrStat_Type.__name__ = "Integer32"
_AgnSMaskedAlrStat_Object = MibScalar
agnSMaskedAlrStat = _AgnSMaskedAlrStat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 12),
    _AgnSMaskedAlrStat_Type()
)
agnSMaskedAlrStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSMaskedAlrStat.setStatus("mandatory")


class _AgnSMaskedAlrStatAll_Type(Integer32):
    """Custom type agnSMaskedAlrStatAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_AgnSMaskedAlrStatAll_Type.__name__ = "Integer32"
_AgnSMaskedAlrStatAll_Object = MibScalar
agnSMaskedAlrStatAll = _AgnSMaskedAlrStatAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 13),
    _AgnSMaskedAlrStatAll_Type()
)
agnSMaskedAlrStatAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSMaskedAlrStatAll.setStatus("mandatory")


class _AgnSTstStatAll_Type(Integer32):
    """Custom type agnSTstStatAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSTstStatAll_Type.__name__ = "Integer32"
_AgnSTstStatAll_Object = MibScalar
agnSTstStatAll = _AgnSTstStatAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 14),
    _AgnSTstStatAll_Type()
)
agnSTstStatAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSTstStatAll.setStatus("mandatory")
_AgnSAlrTable_Object = MibTable
agnSAlrTable = _AgnSAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15)
)
if mibBuilder.loadTexts:
    agnSAlrTable.setStatus("mandatory")
_AgnSAlrEntry_Object = MibTableRow
agnSAlrEntry = _AgnSAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1)
)
agnSAlrEntry.setIndexNames(
    (0, "DACS-MIB", "agnSAlrIdx"),
)
if mibBuilder.loadTexts:
    agnSAlrEntry.setStatus("mandatory")
_AgnSAlrIdx_Type = Integer32
_AgnSAlrIdx_Object = MibTableColumn
agnSAlrIdx = _AgnSAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 1),
    _AgnSAlrIdx_Type()
)
agnSAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrIdx.setStatus("mandatory")


class _AgnSAlrCodeDescription_Type(DisplayString):
    """Custom type agnSAlrCodeDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSAlrCodeDescription_Type.__name__ = "DisplayString"
_AgnSAlrCodeDescription_Object = MibTableColumn
agnSAlrCodeDescription = _AgnSAlrCodeDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 2),
    _AgnSAlrCodeDescription_Type()
)
agnSAlrCodeDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrCodeDescription.setStatus("mandatory")
_AgnSAlrCode_Type = Integer32
_AgnSAlrCode_Object = MibTableColumn
agnSAlrCode = _AgnSAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 3),
    _AgnSAlrCode_Type()
)
agnSAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrCode.setStatus("mandatory")


class _AgnSAlrSeverity_Type(Integer32):
    """Custom type agnSAlrSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_AgnSAlrSeverity_Type.__name__ = "Integer32"
_AgnSAlrSeverity_Object = MibTableColumn
agnSAlrSeverity = _AgnSAlrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 4),
    _AgnSAlrSeverity_Type()
)
agnSAlrSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrSeverity.setStatus("mandatory")


class _AgnSAlrState_Type(Integer32):
    """Custom type agnSAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSAlrState_Type.__name__ = "Integer32"
_AgnSAlrState_Object = MibTableColumn
agnSAlrState = _AgnSAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 5),
    _AgnSAlrState_Type()
)
agnSAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrState.setStatus("mandatory")
_AgnSAlrCounter_Type = Integer32
_AgnSAlrCounter_Object = MibTableColumn
agnSAlrCounter = _AgnSAlrCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 6),
    _AgnSAlrCounter_Type()
)
agnSAlrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrCounter.setStatus("mandatory")


class _AgnSAlrMask_Type(Integer32):
    """Custom type agnSAlrMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSAlrMask_Type.__name__ = "Integer32"
_AgnSAlrMask_Object = MibTableColumn
agnSAlrMask = _AgnSAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 7),
    _AgnSAlrMask_Type()
)
agnSAlrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrMask.setStatus("mandatory")


class _AgnSAlrInvert_Type(Integer32):
    """Custom type agnSAlrInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSAlrInvert_Type.__name__ = "Integer32"
_AgnSAlrInvert_Object = MibTableColumn
agnSAlrInvert = _AgnSAlrInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 8),
    _AgnSAlrInvert_Type()
)
agnSAlrInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrInvert.setStatus("mandatory")


class _AgnSClearAlrCmd_Type(Integer32):
    """Custom type agnSClearAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSClearAlrCmd_Type.__name__ = "Integer32"
_AgnSClearAlrCmd_Object = MibScalar
agnSClearAlrCmd = _AgnSClearAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 16),
    _AgnSClearAlrCmd_Type()
)
agnSClearAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSClearAlrCmd.setStatus("mandatory")


class _AgnSClearAllAlrCmd_Type(Integer32):
    """Custom type agnSClearAllAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSClearAllAlrCmd_Type.__name__ = "Integer32"
_AgnSClearAllAlrCmd_Object = MibScalar
agnSClearAllAlrCmd = _AgnSClearAllAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 17),
    _AgnSClearAllAlrCmd_Type()
)
agnSClearAllAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSClearAllAlrCmd.setStatus("mandatory")


class _AgnSSanityCheckStatus_Type(Integer32):
    """Custom type agnSSanityCheckStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("ok", 4),
          ("unknown", 1),
          ("warning", 3))
    )


_AgnSSanityCheckStatus_Type.__name__ = "Integer32"
_AgnSSanityCheckStatus_Object = MibScalar
agnSSanityCheckStatus = _AgnSSanityCheckStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 18),
    _AgnSSanityCheckStatus_Type()
)
agnSSanityCheckStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSSanityCheckStatus.setStatus("mandatory")
_AgnSNoOfSanityCheckErr_Type = Integer32
_AgnSNoOfSanityCheckErr_Object = MibScalar
agnSNoOfSanityCheckErr = _AgnSNoOfSanityCheckErr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 19),
    _AgnSNoOfSanityCheckErr_Type()
)
agnSNoOfSanityCheckErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSNoOfSanityCheckErr.setStatus("mandatory")
_AgnSErrListTable_Object = MibTable
agnSErrListTable = _AgnSErrListTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20)
)
if mibBuilder.loadTexts:
    agnSErrListTable.setStatus("mandatory")
_AgnSErrListEntry_Object = MibTableRow
agnSErrListEntry = _AgnSErrListEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1)
)
agnSErrListEntry.setIndexNames(
    (0, "DACS-MIB", "agnSErrIdx"),
)
if mibBuilder.loadTexts:
    agnSErrListEntry.setStatus("mandatory")
_AgnSErrIdx_Type = Integer32
_AgnSErrIdx_Object = MibTableColumn
agnSErrIdx = _AgnSErrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1, 1),
    _AgnSErrIdx_Type()
)
agnSErrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSErrIdx.setStatus("mandatory")


class _AgnSErrDescription_Type(DisplayString):
    """Custom type agnSErrDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSErrDescription_Type.__name__ = "DisplayString"
_AgnSErrDescription_Object = MibTableColumn
agnSErrDescription = _AgnSErrDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1, 2),
    _AgnSErrDescription_Type()
)
agnSErrDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSErrDescription.setStatus("mandatory")
_AgnSMaxNoOfCnfg_Type = Integer32
_AgnSMaxNoOfCnfg_Object = MibScalar
agnSMaxNoOfCnfg = _AgnSMaxNoOfCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 21),
    _AgnSMaxNoOfCnfg_Type()
)
agnSMaxNoOfCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSMaxNoOfCnfg.setStatus("mandatory")
_AgnSCnfgTable_Object = MibTable
agnSCnfgTable = _AgnSCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22)
)
if mibBuilder.loadTexts:
    agnSCnfgTable.setStatus("mandatory")
_AgnSCnfgEntry_Object = MibTableRow
agnSCnfgEntry = _AgnSCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1)
)
agnSCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "agnSEntryIdx"),
)
if mibBuilder.loadTexts:
    agnSCnfgEntry.setStatus("mandatory")
_AgnSEntryIdx_Type = Integer32
_AgnSEntryIdx_Object = MibTableColumn
agnSEntryIdx = _AgnSEntryIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1, 1),
    _AgnSEntryIdx_Type()
)
agnSEntryIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSEntryIdx.setStatus("mandatory")


class _AgnSEntryIsValid_Type(Integer32):
    """Custom type agnSEntryIsValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnSEntryIsValid_Type.__name__ = "Integer32"
_AgnSEntryIsValid_Object = MibTableColumn
agnSEntryIsValid = _AgnSEntryIsValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1, 2),
    _AgnSEntryIsValid_Type()
)
agnSEntryIsValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSEntryIsValid.setStatus("mandatory")
_CnfgAgnGen_ObjectIdentity = ObjectIdentity
cnfgAgnGen = _CnfgAgnGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2)
)


class _AgnCSanityCheckCmd_Type(Integer32):
    """Custom type agnCSanityCheckCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCSanityCheckCmd_Type.__name__ = "Integer32"
_AgnCSanityCheckCmd_Object = MibScalar
agnCSanityCheckCmd = _AgnCSanityCheckCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 1),
    _AgnCSanityCheckCmd_Type()
)
agnCSanityCheckCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSanityCheckCmd.setStatus("mandatory")


class _AgnCSaveCnfgIdxCmd_Type(Integer32):
    """Custom type agnCSaveCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgnCSaveCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCSaveCnfgIdxCmd_Object = MibScalar
agnCSaveCnfgIdxCmd = _AgnCSaveCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 2),
    _AgnCSaveCnfgIdxCmd_Type()
)
agnCSaveCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSaveCnfgIdxCmd.setStatus("mandatory")


class _AgnCLoadCnfgIdxCmd_Type(Integer32):
    """Custom type agnCLoadCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgnCLoadCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCLoadCnfgIdxCmd_Object = MibScalar
agnCLoadCnfgIdxCmd = _AgnCLoadCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 3),
    _AgnCLoadCnfgIdxCmd_Type()
)
agnCLoadCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCLoadCnfgIdxCmd.setStatus("mandatory")
_AgnCClkSrcTable_Object = MibTable
agnCClkSrcTable = _AgnCClkSrcTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4)
)
if mibBuilder.loadTexts:
    agnCClkSrcTable.setStatus("mandatory")
_AgnCClkSrcEntry_Object = MibTableRow
agnCClkSrcEntry = _AgnCClkSrcEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1)
)
agnCClkSrcEntry.setIndexNames(
    (0, "DACS-MIB", "agnCClkCnfgIdx"),
    (0, "DACS-MIB", "agnCClkSrcIdx"),
)
if mibBuilder.loadTexts:
    agnCClkSrcEntry.setStatus("mandatory")


class _AgnCClkCnfgIdx_Type(Integer32):
    """Custom type agnCClkCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnCClkCnfgIdx_Type.__name__ = "Integer32"
_AgnCClkCnfgIdx_Object = MibTableColumn
agnCClkCnfgIdx = _AgnCClkCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 1),
    _AgnCClkCnfgIdx_Type()
)
agnCClkCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCClkCnfgIdx.setStatus("mandatory")


class _AgnCClkSrcIdx_Type(Integer32):
    """Custom type agnCClkSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_AgnCClkSrcIdx_Type.__name__ = "Integer32"
_AgnCClkSrcIdx_Object = MibTableColumn
agnCClkSrcIdx = _AgnCClkSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 2),
    _AgnCClkSrcIdx_Type()
)
agnCClkSrcIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCClkSrcIdx.setStatus("mandatory")


class _AgnCClkSrcMode_Type(Integer32):
    """Custom type agnCClkSrcMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("internal", 1),
          ("rxClk", 2))
    )


_AgnCClkSrcMode_Type.__name__ = "Integer32"
_AgnCClkSrcMode_Object = MibTableColumn
agnCClkSrcMode = _AgnCClkSrcMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 3),
    _AgnCClkSrcMode_Type()
)
agnCClkSrcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCClkSrcMode.setStatus("mandatory")


class _AgnCClkSrcSlt_Type(Integer32):
    """Custom type agnCClkSrcSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_AgnCClkSrcSlt_Type.__name__ = "Integer32"
_AgnCClkSrcSlt_Object = MibTableColumn
agnCClkSrcSlt = _AgnCClkSrcSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 4),
    _AgnCClkSrcSlt_Type()
)
agnCClkSrcSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCClkSrcSlt.setStatus("mandatory")


class _AgnCClkSrcPrt_Type(Integer32):
    """Custom type agnCClkSrcPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              100)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("notApplicable", 100))
    )


_AgnCClkSrcPrt_Type.__name__ = "Integer32"
_AgnCClkSrcPrt_Object = MibTableColumn
agnCClkSrcPrt = _AgnCClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 5),
    _AgnCClkSrcPrt_Type()
)
agnCClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCClkSrcPrt.setStatus("mandatory")


class _AgnCDeleteCnfgIdxCmd_Type(Integer32):
    """Custom type agnCDeleteCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgnCDeleteCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCDeleteCnfgIdxCmd_Object = MibScalar
agnCDeleteCnfgIdxCmd = _AgnCDeleteCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 5),
    _AgnCDeleteCnfgIdxCmd_Type()
)
agnCDeleteCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCDeleteCnfgIdxCmd.setStatus("mandatory")


class _AgnCDefaultCnfgIdxCmd_Type(Integer32):
    """Custom type agnCDefaultCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgnCDefaultCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCDefaultCnfgIdxCmd_Object = MibScalar
agnCDefaultCnfgIdxCmd = _AgnCDefaultCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 6),
    _AgnCDefaultCnfgIdxCmd_Type()
)
agnCDefaultCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCDefaultCnfgIdxCmd.setStatus("mandatory")
_AgnCnfgDataTable_Object = MibTable
agnCnfgDataTable = _AgnCnfgDataTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7)
)
if mibBuilder.loadTexts:
    agnCnfgDataTable.setStatus("mandatory")
_AgnCnfgDataEntry_Object = MibTableRow
agnCnfgDataEntry = _AgnCnfgDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1)
)
agnCnfgDataEntry.setIndexNames(
    (0, "DACS-MIB", "agnCnfgIdx"),
)
if mibBuilder.loadTexts:
    agnCnfgDataEntry.setStatus("mandatory")


class _AgnCnfgIdx_Type(Integer32):
    """Custom type agnCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnCnfgIdx_Type.__name__ = "Integer32"
_AgnCnfgIdx_Object = MibTableColumn
agnCnfgIdx = _AgnCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 1),
    _AgnCnfgIdx_Type()
)
agnCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgIdx.setStatus("mandatory")


class _AgnCnfgDesc_Type(DisplayString):
    """Custom type agnCnfgDesc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_AgnCnfgDesc_Type.__name__ = "DisplayString"
_AgnCnfgDesc_Object = MibTableColumn
agnCnfgDesc = _AgnCnfgDesc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 2),
    _AgnCnfgDesc_Type()
)
agnCnfgDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgDesc.setStatus("mandatory")


class _AgnCnfgUpdDate_Type(DisplayString):
    """Custom type agnCnfgUpdDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnCnfgUpdDate_Type.__name__ = "DisplayString"
_AgnCnfgUpdDate_Object = MibTableColumn
agnCnfgUpdDate = _AgnCnfgUpdDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 3),
    _AgnCnfgUpdDate_Type()
)
agnCnfgUpdDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgUpdDate.setStatus("mandatory")


class _AgnCnfgUpdTime_Type(DisplayString):
    """Custom type agnCnfgUpdTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnCnfgUpdTime_Type.__name__ = "DisplayString"
_AgnCnfgUpdTime_Object = MibTableColumn
agnCnfgUpdTime = _AgnCnfgUpdTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 4),
    _AgnCnfgUpdTime_Type()
)
agnCnfgUpdTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgUpdTime.setStatus("mandatory")
_AgnCnfgUpdMnger_Type = IpAddress
_AgnCnfgUpdMnger_Object = MibTableColumn
agnCnfgUpdMnger = _AgnCnfgUpdMnger_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 5),
    _AgnCnfgUpdMnger_Type()
)
agnCnfgUpdMnger.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgUpdMnger.setStatus("mandatory")
_AgnCnfgAlarm_ObjectIdentity = ObjectIdentity
agnCnfgAlarm = _AgnCnfgAlarm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8)
)


class _AgnCnfgAlrFilterWindow_Type(Integer32):
    """Custom type agnCnfgAlrFilterWindow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_AgnCnfgAlrFilterWindow_Type.__name__ = "Integer32"
_AgnCnfgAlrFilterWindow_Object = MibScalar
agnCnfgAlrFilterWindow = _AgnCnfgAlrFilterWindow_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 1),
    _AgnCnfgAlrFilterWindow_Type()
)
agnCnfgAlrFilterWindow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrFilterWindow.setStatus("mandatory")
_AgnCnfgAlrTable_Object = MibTable
agnCnfgAlrTable = _AgnCnfgAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2)
)
if mibBuilder.loadTexts:
    agnCnfgAlrTable.setStatus("mandatory")
_AgnCnfgAlrEntry_Object = MibTableRow
agnCnfgAlrEntry = _AgnCnfgAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1)
)
agnCnfgAlrEntry.setIndexNames(
    (0, "DACS-MIB", "agnCnfgAlrCode"),
    (0, "DACS-MIB", "agnCnfgAlrSlot"),
    (0, "DACS-MIB", "agnCnfgAlrPort"),
)
if mibBuilder.loadTexts:
    agnCnfgAlrEntry.setStatus("mandatory")
_AgnCnfgAlrCode_Type = Integer32
_AgnCnfgAlrCode_Object = MibTableColumn
agnCnfgAlrCode = _AgnCnfgAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 1),
    _AgnCnfgAlrCode_Type()
)
agnCnfgAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgAlrCode.setStatus("mandatory")


class _AgnCnfgAlrSlot_Type(Integer32):
    """Custom type agnCnfgAlrSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              200,
              255)
        )
    )
    namedValues = NamedValues(
        *(("all", 200),
          ("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_AgnCnfgAlrSlot_Type.__name__ = "Integer32"
_AgnCnfgAlrSlot_Object = MibTableColumn
agnCnfgAlrSlot = _AgnCnfgAlrSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 2),
    _AgnCnfgAlrSlot_Type()
)
agnCnfgAlrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgAlrSlot.setStatus("mandatory")
_AgnCnfgAlrPort_Type = Integer32
_AgnCnfgAlrPort_Object = MibTableColumn
agnCnfgAlrPort = _AgnCnfgAlrPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 3),
    _AgnCnfgAlrPort_Type()
)
agnCnfgAlrPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgAlrPort.setStatus("mandatory")


class _AgnCnfgAlrMask_Type(Integer32):
    """Custom type agnCnfgAlrMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("noAndSave", 2),
          ("yes", 3),
          ("yesAndSave", 4))
    )


_AgnCnfgAlrMask_Type.__name__ = "Integer32"
_AgnCnfgAlrMask_Object = MibTableColumn
agnCnfgAlrMask = _AgnCnfgAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 4),
    _AgnCnfgAlrMask_Type()
)
agnCnfgAlrMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrMask.setStatus("mandatory")


class _AgnCnfgAlrInvert_Type(Integer32):
    """Custom type agnCnfgAlrInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnCnfgAlrInvert_Type.__name__ = "Integer32"
_AgnCnfgAlrInvert_Object = MibTableColumn
agnCnfgAlrInvert = _AgnCnfgAlrInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 5),
    _AgnCnfgAlrInvert_Type()
)
agnCnfgAlrInvert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrInvert.setStatus("mandatory")


class _AgnCnfgAlrFilter_Type(Integer32):
    """Custom type agnCnfgAlrFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnCnfgAlrFilter_Type.__name__ = "Integer32"
_AgnCnfgAlrFilter_Object = MibTableColumn
agnCnfgAlrFilter = _AgnCnfgAlrFilter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 6),
    _AgnCnfgAlrFilter_Type()
)
agnCnfgAlrFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrFilter.setStatus("mandatory")
_AgnCnfgAlrFilterSet_Type = Integer32
_AgnCnfgAlrFilterSet_Object = MibTableColumn
agnCnfgAlrFilterSet = _AgnCnfgAlrFilterSet_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 7),
    _AgnCnfgAlrFilterSet_Type()
)
agnCnfgAlrFilterSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrFilterSet.setStatus("mandatory")
_AgnCnfgAlrFilterReset_Type = Integer32
_AgnCnfgAlrFilterReset_Object = MibTableColumn
agnCnfgAlrFilterReset = _AgnCnfgAlrFilterReset_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 8),
    _AgnCnfgAlrFilterReset_Type()
)
agnCnfgAlrFilterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrFilterReset.setStatus("mandatory")
_AgnCnfgAlrReportTable_Object = MibTable
agnCnfgAlrReportTable = _AgnCnfgAlrReportTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3)
)
if mibBuilder.loadTexts:
    agnCnfgAlrReportTable.setStatus("mandatory")
_AgnCnfgAlrReportEntry_Object = MibTableRow
agnCnfgAlrReportEntry = _AgnCnfgAlrReportEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1)
)
agnCnfgAlrReportEntry.setIndexNames(
    (0, "DACS-MIB", "agnCnfgAlrReportType"),
)
if mibBuilder.loadTexts:
    agnCnfgAlrReportEntry.setStatus("mandatory")


class _AgnCnfgAlrReportType_Type(Integer32):
    """Custom type agnCnfgAlrReportType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("alrLedBlink", 5),
          ("alrLedOn", 4),
          ("buffer", 2),
          ("relay", 3),
          ("relay2", 6),
          ("trap", 1))
    )


_AgnCnfgAlrReportType_Type.__name__ = "Integer32"
_AgnCnfgAlrReportType_Object = MibTableColumn
agnCnfgAlrReportType = _AgnCnfgAlrReportType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 1),
    _AgnCnfgAlrReportType_Type()
)
agnCnfgAlrReportType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgAlrReportType.setStatus("mandatory")


class _AgnCnfgAlrStartReportOn_Type(Integer32):
    """Custom type agnCnfgAlrStartReportOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("noReport", 2),
          ("warning", 6))
    )


_AgnCnfgAlrStartReportOn_Type.__name__ = "Integer32"
_AgnCnfgAlrStartReportOn_Object = MibTableColumn
agnCnfgAlrStartReportOn = _AgnCnfgAlrStartReportOn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 2),
    _AgnCnfgAlrStartReportOn_Type()
)
agnCnfgAlrStartReportOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrStartReportOn.setStatus("mandatory")


class _AgnCnfgAlrStartReportOff_Type(Integer32):
    """Custom type agnCnfgAlrStartReportOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("noReport", 2),
          ("notApplicable", 1),
          ("warning", 6))
    )


_AgnCnfgAlrStartReportOff_Type.__name__ = "Integer32"
_AgnCnfgAlrStartReportOff_Object = MibTableColumn
agnCnfgAlrStartReportOff = _AgnCnfgAlrStartReportOff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 3),
    _AgnCnfgAlrStartReportOff_Type()
)
agnCnfgAlrStartReportOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrStartReportOff.setStatus("mandatory")


class _AgnCOffsetCmd_Type(Integer32):
    """Custom type agnCOffsetCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("notApplicable", 1),
          ("u1", 3))
    )


_AgnCOffsetCmd_Type.__name__ = "Integer32"
_AgnCOffsetCmd_Object = MibScalar
agnCOffsetCmd = _AgnCOffsetCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 9),
    _AgnCOffsetCmd_Type()
)
agnCOffsetCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCOffsetCmd.setStatus("mandatory")
_CmprAgnGen_ObjectIdentity = ObjectIdentity
cmprAgnGen = _CmprAgnGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3)
)
_AgnCmprTable_Object = MibTable
agnCmprTable = _AgnCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1)
)
if mibBuilder.loadTexts:
    agnCmprTable.setStatus("mandatory")
_AgnCmprEntry_Object = MibTableRow
agnCmprEntry = _AgnCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1)
)
agnCmprEntry.setIndexNames(
    (0, "DACS-MIB", "agnCmprTypIdx"),
    (0, "DACS-MIB", "agnCmprCnfgIdx"),
    (0, "DACS-MIB", "agnCmprVersion"),
)
if mibBuilder.loadTexts:
    agnCmprEntry.setStatus("mandatory")
_AgnCmprTypIdx_Type = Integer32
_AgnCmprTypIdx_Object = MibTableColumn
agnCmprTypIdx = _AgnCmprTypIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 1),
    _AgnCmprTypIdx_Type()
)
agnCmprTypIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCmprTypIdx.setStatus("mandatory")
_AgnCmprCnfgIdx_Type = Integer32
_AgnCmprCnfgIdx_Object = MibTableColumn
agnCmprCnfgIdx = _AgnCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 2),
    _AgnCmprCnfgIdx_Type()
)
agnCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCmprCnfgIdx.setStatus("mandatory")
_AgnCmprVersion_Type = Integer32
_AgnCmprVersion_Object = MibTableColumn
agnCmprVersion = _AgnCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 3),
    _AgnCmprVersion_Type()
)
agnCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCmprVersion.setStatus("mandatory")
_AgnCmprObj_Type = OctetString
_AgnCmprObj_Object = MibTableColumn
agnCmprObj = _AgnCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 4),
    _AgnCmprObj_Type()
)
agnCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCmprObj.setStatus("mandatory")
_AgnDlciCmprTable_Object = MibTable
agnDlciCmprTable = _AgnDlciCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2)
)
if mibBuilder.loadTexts:
    agnDlciCmprTable.setStatus("mandatory")
_AgnDlciCmprEntry_Object = MibTableRow
agnDlciCmprEntry = _AgnDlciCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1)
)
agnDlciCmprEntry.setIndexNames(
    (0, "DACS-MIB", "agnDlciCmprCnfgIdx"),
    (0, "DACS-MIB", "agnDlciCmprVersion"),
    (0, "DACS-MIB", "agnDlciCmprDlciIdx"),
)
if mibBuilder.loadTexts:
    agnDlciCmprEntry.setStatus("mandatory")
_AgnDlciCmprCnfgIdx_Type = Integer32
_AgnDlciCmprCnfgIdx_Object = MibTableColumn
agnDlciCmprCnfgIdx = _AgnDlciCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 1),
    _AgnDlciCmprCnfgIdx_Type()
)
agnDlciCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciCmprCnfgIdx.setStatus("mandatory")
_AgnDlciCmprVersion_Type = Integer32
_AgnDlciCmprVersion_Object = MibTableColumn
agnDlciCmprVersion = _AgnDlciCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 2),
    _AgnDlciCmprVersion_Type()
)
agnDlciCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciCmprVersion.setStatus("mandatory")
_AgnDlciCmprDlciIdx_Type = Integer32
_AgnDlciCmprDlciIdx_Object = MibTableColumn
agnDlciCmprDlciIdx = _AgnDlciCmprDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 3),
    _AgnDlciCmprDlciIdx_Type()
)
agnDlciCmprDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciCmprDlciIdx.setStatus("mandatory")
_AgnDlciCmprObj_Type = OctetString
_AgnDlciCmprObj_Object = MibTableColumn
agnDlciCmprObj = _AgnDlciCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 4),
    _AgnDlciCmprObj_Type()
)
agnDlciCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciCmprObj.setStatus("mandatory")
_AgnAlarmsCmprTable_Object = MibTable
agnAlarmsCmprTable = _AgnAlarmsCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3)
)
if mibBuilder.loadTexts:
    agnAlarmsCmprTable.setStatus("mandatory")
_AgnAlarmsCmprEntry_Object = MibTableRow
agnAlarmsCmprEntry = _AgnAlarmsCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1)
)
agnAlarmsCmprEntry.setIndexNames(
    (0, "DACS-MIB", "agnAlarmsCmprVersion"),
    (0, "DACS-MIB", "agnAlarmsCmprAlarmIdx"),
)
if mibBuilder.loadTexts:
    agnAlarmsCmprEntry.setStatus("mandatory")
_AgnAlarmsCmprVersion_Type = Integer32
_AgnAlarmsCmprVersion_Object = MibTableColumn
agnAlarmsCmprVersion = _AgnAlarmsCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 1),
    _AgnAlarmsCmprVersion_Type()
)
agnAlarmsCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlarmsCmprVersion.setStatus("mandatory")
_AgnAlarmsCmprAlarmIdx_Type = Integer32
_AgnAlarmsCmprAlarmIdx_Object = MibTableColumn
agnAlarmsCmprAlarmIdx = _AgnAlarmsCmprAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 2),
    _AgnAlarmsCmprAlarmIdx_Type()
)
agnAlarmsCmprAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlarmsCmprAlarmIdx.setStatus("mandatory")
_AgnAlarmsCmprObj_Type = OctetString
_AgnAlarmsCmprObj_Object = MibTableColumn
agnAlarmsCmprObj = _AgnAlarmsCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 3),
    _AgnAlarmsCmprObj_Type()
)
agnAlarmsCmprObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlarmsCmprObj.setStatus("mandatory")
_AgnAlrBufCmprTable_Object = MibTable
agnAlrBufCmprTable = _AgnAlrBufCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4)
)
if mibBuilder.loadTexts:
    agnAlrBufCmprTable.setStatus("mandatory")
_AgnAlrBufCmprEntry_Object = MibTableRow
agnAlrBufCmprEntry = _AgnAlrBufCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1)
)
agnAlrBufCmprEntry.setIndexNames(
    (0, "DACS-MIB", "agnAlrBufCmprVersion"),
    (0, "DACS-MIB", "agnAlrBufCmprAlarmIdx"),
)
if mibBuilder.loadTexts:
    agnAlrBufCmprEntry.setStatus("mandatory")
_AgnAlrBufCmprVersion_Type = Integer32
_AgnAlrBufCmprVersion_Object = MibTableColumn
agnAlrBufCmprVersion = _AgnAlrBufCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 1),
    _AgnAlrBufCmprVersion_Type()
)
agnAlrBufCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlrBufCmprVersion.setStatus("mandatory")
_AgnAlrBufCmprAlarmIdx_Type = Integer32
_AgnAlrBufCmprAlarmIdx_Object = MibTableColumn
agnAlrBufCmprAlarmIdx = _AgnAlrBufCmprAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 2),
    _AgnAlrBufCmprAlarmIdx_Type()
)
agnAlrBufCmprAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlrBufCmprAlarmIdx.setStatus("mandatory")
_AgnAlrBufCmprObj_Type = OctetString
_AgnAlrBufCmprObj_Object = MibTableColumn
agnAlrBufCmprObj = _AgnAlrBufCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 3),
    _AgnAlrBufCmprObj_Type()
)
agnAlrBufCmprObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlrBufCmprObj.setStatus("mandatory")
_AgnSCmprErrListTable_Object = MibTable
agnSCmprErrListTable = _AgnSCmprErrListTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5)
)
if mibBuilder.loadTexts:
    agnSCmprErrListTable.setStatus("mandatory")
_AgnSCmprErrListEntry_Object = MibTableRow
agnSCmprErrListEntry = _AgnSCmprErrListEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1)
)
agnSCmprErrListEntry.setIndexNames(
    (0, "DACS-MIB", "agnSCmprErrVersion"),
    (0, "DACS-MIB", "agnSCmprErrIdx"),
)
if mibBuilder.loadTexts:
    agnSCmprErrListEntry.setStatus("mandatory")
_AgnSCmprErrVersion_Type = Integer32
_AgnSCmprErrVersion_Object = MibTableColumn
agnSCmprErrVersion = _AgnSCmprErrVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 1),
    _AgnSCmprErrVersion_Type()
)
agnSCmprErrVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSCmprErrVersion.setStatus("mandatory")
_AgnSCmprErrIdx_Type = Integer32
_AgnSCmprErrIdx_Object = MibTableColumn
agnSCmprErrIdx = _AgnSCmprErrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 2),
    _AgnSCmprErrIdx_Type()
)
agnSCmprErrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSCmprErrIdx.setStatus("mandatory")
_AgnSCmprErrObj_Type = OctetString
_AgnSCmprErrObj_Object = MibTableColumn
agnSCmprErrObj = _AgnSCmprErrObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 3),
    _AgnSCmprErrObj_Type()
)
agnSCmprErrObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSCmprErrObj.setStatus("mandatory")
_AgnTsCmprTable_Object = MibTable
agnTsCmprTable = _AgnTsCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6)
)
if mibBuilder.loadTexts:
    agnTsCmprTable.setStatus("mandatory")
_AgnTsCmprEntry_Object = MibTableRow
agnTsCmprEntry = _AgnTsCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1)
)
agnTsCmprEntry.setIndexNames(
    (0, "DACS-MIB", "agnTsCmprVerIdx"),
    (0, "DACS-MIB", "agnTsCmprCnfgIdx"),
    (0, "DACS-MIB", "agnTsCmprSlotIdx"),
    (0, "DACS-MIB", "agnTsCmprPortIdx"),
    (0, "DACS-MIB", "agnTsCmprPduIdx"),
)
if mibBuilder.loadTexts:
    agnTsCmprEntry.setStatus("mandatory")
_AgnTsCmprVerIdx_Type = Integer32
_AgnTsCmprVerIdx_Object = MibTableColumn
agnTsCmprVerIdx = _AgnTsCmprVerIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 1),
    _AgnTsCmprVerIdx_Type()
)
agnTsCmprVerIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprVerIdx.setStatus("mandatory")
_AgnTsCmprCnfgIdx_Type = Integer32
_AgnTsCmprCnfgIdx_Object = MibTableColumn
agnTsCmprCnfgIdx = _AgnTsCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 2),
    _AgnTsCmprCnfgIdx_Type()
)
agnTsCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprCnfgIdx.setStatus("mandatory")
_AgnTsCmprSlotIdx_Type = Integer32
_AgnTsCmprSlotIdx_Object = MibTableColumn
agnTsCmprSlotIdx = _AgnTsCmprSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 3),
    _AgnTsCmprSlotIdx_Type()
)
agnTsCmprSlotIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprSlotIdx.setStatus("mandatory")
_AgnTsCmprPortIdx_Type = Integer32
_AgnTsCmprPortIdx_Object = MibTableColumn
agnTsCmprPortIdx = _AgnTsCmprPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 4),
    _AgnTsCmprPortIdx_Type()
)
agnTsCmprPortIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprPortIdx.setStatus("mandatory")
_AgnTsCmprPduIdx_Type = Integer32
_AgnTsCmprPduIdx_Object = MibTableColumn
agnTsCmprPduIdx = _AgnTsCmprPduIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 5),
    _AgnTsCmprPduIdx_Type()
)
agnTsCmprPduIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprPduIdx.setStatus("mandatory")
_AgnTsCmprData_Type = OctetString
_AgnTsCmprData_Object = MibTableColumn
agnTsCmprData = _AgnTsCmprData_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 6),
    _AgnTsCmprData_Type()
)
agnTsCmprData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTsCmprData.setStatus("mandatory")
_AgnXCmprTable_Object = MibTable
agnXCmprTable = _AgnXCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7)
)
if mibBuilder.loadTexts:
    agnXCmprTable.setStatus("mandatory")
_AgnXCmprEntry_Object = MibTableRow
agnXCmprEntry = _AgnXCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1)
)
agnXCmprEntry.setIndexNames(
    (0, "DACS-MIB", "agnXCmprTypIdx"),
    (0, "DACS-MIB", "agnXCmprVersion"),
    (0, "DACS-MIB", "agnXCmprIdx3"),
    (0, "DACS-MIB", "agnXCmprIdx4"),
    (0, "DACS-MIB", "agnXCmprIdx5"),
    (0, "DACS-MIB", "agnXCmprIdx6"),
    (0, "DACS-MIB", "agnXCmprIdx7"),
)
if mibBuilder.loadTexts:
    agnXCmprEntry.setStatus("mandatory")
_AgnXCmprTypIdx_Type = Integer32
_AgnXCmprTypIdx_Object = MibTableColumn
agnXCmprTypIdx = _AgnXCmprTypIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 1),
    _AgnXCmprTypIdx_Type()
)
agnXCmprTypIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprTypIdx.setStatus("mandatory")
_AgnXCmprVersion_Type = Integer32
_AgnXCmprVersion_Object = MibTableColumn
agnXCmprVersion = _AgnXCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 2),
    _AgnXCmprVersion_Type()
)
agnXCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprVersion.setStatus("mandatory")
_AgnXCmprIdx3_Type = Integer32
_AgnXCmprIdx3_Object = MibTableColumn
agnXCmprIdx3 = _AgnXCmprIdx3_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 3),
    _AgnXCmprIdx3_Type()
)
agnXCmprIdx3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx3.setStatus("mandatory")
_AgnXCmprIdx4_Type = Integer32
_AgnXCmprIdx4_Object = MibTableColumn
agnXCmprIdx4 = _AgnXCmprIdx4_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 4),
    _AgnXCmprIdx4_Type()
)
agnXCmprIdx4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx4.setStatus("mandatory")
_AgnXCmprIdx5_Type = Integer32
_AgnXCmprIdx5_Object = MibTableColumn
agnXCmprIdx5 = _AgnXCmprIdx5_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 5),
    _AgnXCmprIdx5_Type()
)
agnXCmprIdx5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx5.setStatus("mandatory")
_AgnXCmprIdx6_Type = Integer32
_AgnXCmprIdx6_Object = MibTableColumn
agnXCmprIdx6 = _AgnXCmprIdx6_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 6),
    _AgnXCmprIdx6_Type()
)
agnXCmprIdx6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx6.setStatus("mandatory")
_AgnXCmprIdx7_Type = Integer32
_AgnXCmprIdx7_Object = MibTableColumn
agnXCmprIdx7 = _AgnXCmprIdx7_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 7),
    _AgnXCmprIdx7_Type()
)
agnXCmprIdx7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx7.setStatus("mandatory")
_AgnXCmprObj_Type = OctetString
_AgnXCmprObj_Object = MibTableColumn
agnXCmprObj = _AgnXCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 8),
    _AgnXCmprObj_Type()
)
agnXCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnXCmprObj.setStatus("mandatory")
_AlrBuffGen_ObjectIdentity = ObjectIdentity
alrBuffGen = _AlrBuffGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4)
)
_AlrBufTable_Object = MibTable
alrBufTable = _AlrBufTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1)
)
if mibBuilder.loadTexts:
    alrBufTable.setStatus("mandatory")
_AlrBufEntry_Object = MibTableRow
alrBufEntry = _AlrBufEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1)
)
alrBufEntry.setIndexNames(
    (0, "DACS-MIB", "alrBufIdx"),
)
if mibBuilder.loadTexts:
    alrBufEntry.setStatus("mandatory")
_AlrBufIdx_Type = Integer32
_AlrBufIdx_Object = MibTableColumn
alrBufIdx = _AlrBufIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 1),
    _AlrBufIdx_Type()
)
alrBufIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufIdx.setStatus("mandatory")


class _AlrBufDescription_Type(DisplayString):
    """Custom type alrBufDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AlrBufDescription_Type.__name__ = "DisplayString"
_AlrBufDescription_Object = MibTableColumn
alrBufDescription = _AlrBufDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 2),
    _AlrBufDescription_Type()
)
alrBufDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufDescription.setStatus("mandatory")
_AgnFlipDb_ObjectIdentity = ObjectIdentity
agnFlipDb = _AgnFlipDb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5)
)
_AgnCAgendaTable_Object = MibTable
agnCAgendaTable = _AgnCAgendaTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1)
)
if mibBuilder.loadTexts:
    agnCAgendaTable.setStatus("mandatory")
_AgnCAgendaEntry_Object = MibTableRow
agnCAgendaEntry = _AgnCAgendaEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1)
)
agnCAgendaEntry.setIndexNames(
    (0, "DACS-MIB", "agnCAgendaCnfgIdx"),
    (0, "DACS-MIB", "agnCAgendaDayIdx"),
)
if mibBuilder.loadTexts:
    agnCAgendaEntry.setStatus("mandatory")


class _AgnCAgendaCnfgIdx_Type(Integer32):
    """Custom type agnCAgendaCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnCAgendaCnfgIdx_Type.__name__ = "Integer32"
_AgnCAgendaCnfgIdx_Object = MibTableColumn
agnCAgendaCnfgIdx = _AgnCAgendaCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 1),
    _AgnCAgendaCnfgIdx_Type()
)
agnCAgendaCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCAgendaCnfgIdx.setStatus("mandatory")


class _AgnCAgendaDayIdx_Type(Integer32):
    """Custom type agnCAgendaDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("friday", 6),
          ("monday", 2),
          ("saturday", 7),
          ("sunday", 1),
          ("thursday", 5),
          ("tuesday", 3),
          ("wednesday", 4))
    )


_AgnCAgendaDayIdx_Type.__name__ = "Integer32"
_AgnCAgendaDayIdx_Object = MibTableColumn
agnCAgendaDayIdx = _AgnCAgendaDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 2),
    _AgnCAgendaDayIdx_Type()
)
agnCAgendaDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCAgendaDayIdx.setStatus("mandatory")


class _AgnCAgendaDayCategory_Type(Integer32):
    """Custom type agnCAgendaDayCategory based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fullWorkday", 1),
          ("partialWorkday", 2),
          ("weekend", 3))
    )


_AgnCAgendaDayCategory_Type.__name__ = "Integer32"
_AgnCAgendaDayCategory_Object = MibTableColumn
agnCAgendaDayCategory = _AgnCAgendaDayCategory_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 3),
    _AgnCAgendaDayCategory_Type()
)
agnCAgendaDayCategory.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCAgendaDayCategory.setStatus("mandatory")
_AgnCFlipNetEventsTable_Object = MibTable
agnCFlipNetEventsTable = _AgnCFlipNetEventsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2)
)
if mibBuilder.loadTexts:
    agnCFlipNetEventsTable.setStatus("mandatory")
_AgnCFlipNetEventsEntry_Object = MibTableRow
agnCFlipNetEventsEntry = _AgnCFlipNetEventsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1)
)
agnCFlipNetEventsEntry.setIndexNames(
    (0, "DACS-MIB", "agnCFlipNetEventsCnfgIdx"),
    (0, "DACS-MIB", "agnCFlipNetEventIdx"),
)
if mibBuilder.loadTexts:
    agnCFlipNetEventsEntry.setStatus("mandatory")


class _AgnCFlipNetEventsCnfgIdx_Type(Integer32):
    """Custom type agnCFlipNetEventsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnCFlipNetEventsCnfgIdx_Type.__name__ = "Integer32"
_AgnCFlipNetEventsCnfgIdx_Object = MibTableColumn
agnCFlipNetEventsCnfgIdx = _AgnCFlipNetEventsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 1),
    _AgnCFlipNetEventsCnfgIdx_Type()
)
agnCFlipNetEventsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCFlipNetEventsCnfgIdx.setStatus("mandatory")


class _AgnCFlipNetEventIdx_Type(Integer32):
    """Custom type agnCFlipNetEventIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnCFlipNetEventIdx_Type.__name__ = "Integer32"
_AgnCFlipNetEventIdx_Object = MibTableColumn
agnCFlipNetEventIdx = _AgnCFlipNetEventIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 2),
    _AgnCFlipNetEventIdx_Type()
)
agnCFlipNetEventIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCFlipNetEventIdx.setStatus("mandatory")


class _AgnCFlipNetEventActive_Type(Integer32):
    """Custom type agnCFlipNetEventActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnCFlipNetEventActive_Type.__name__ = "Integer32"
_AgnCFlipNetEventActive_Object = MibTableColumn
agnCFlipNetEventActive = _AgnCFlipNetEventActive_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 3),
    _AgnCFlipNetEventActive_Type()
)
agnCFlipNetEventActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventActive.setStatus("mandatory")


class _AgnCFlipNetEventType_Type(Integer32):
    """Custom type agnCFlipNetEventType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("congestion", 3),
          ("linkDown", 2),
          ("time", 1))
    )


_AgnCFlipNetEventType_Type.__name__ = "Integer32"
_AgnCFlipNetEventType_Object = MibTableColumn
agnCFlipNetEventType = _AgnCFlipNetEventType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 4),
    _AgnCFlipNetEventType_Type()
)
agnCFlipNetEventType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventType.setStatus("mandatory")


class _AgnCFlipNetEventNo_Type(Integer32):
    """Custom type agnCFlipNetEventNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_AgnCFlipNetEventNo_Type.__name__ = "Integer32"
_AgnCFlipNetEventNo_Object = MibTableColumn
agnCFlipNetEventNo = _AgnCFlipNetEventNo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 5),
    _AgnCFlipNetEventNo_Type()
)
agnCFlipNetEventNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventNo.setStatus("mandatory")


class _AgnCFlipNetEventSlot_Type(Integer32):
    """Custom type agnCFlipNetEventSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_AgnCFlipNetEventSlot_Type.__name__ = "Integer32"
_AgnCFlipNetEventSlot_Object = MibTableColumn
agnCFlipNetEventSlot = _AgnCFlipNetEventSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 6),
    _AgnCFlipNetEventSlot_Type()
)
agnCFlipNetEventSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventSlot.setStatus("mandatory")


class _AgnCFlipNetEventPort_Type(Integer32):
    """Custom type agnCFlipNetEventPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("notApplicable", 100))
    )


_AgnCFlipNetEventPort_Type.__name__ = "Integer32"
_AgnCFlipNetEventPort_Object = MibTableColumn
agnCFlipNetEventPort = _AgnCFlipNetEventPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 7),
    _AgnCFlipNetEventPort_Type()
)
agnCFlipNetEventPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventPort.setStatus("mandatory")


class _AgnCFlipNetEventISD_Type(Integer32):
    """Custom type agnCFlipNetEventISD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 999),
    )


_AgnCFlipNetEventISD_Type.__name__ = "Integer32"
_AgnCFlipNetEventISD_Object = MibTableColumn
agnCFlipNetEventISD = _AgnCFlipNetEventISD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 8),
    _AgnCFlipNetEventISD_Type()
)
agnCFlipNetEventISD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventISD.setStatus("mandatory")


class _AgnCFlipNetEventOSD_Type(Integer32):
    """Custom type agnCFlipNetEventOSD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 999),
    )


_AgnCFlipNetEventOSD_Type.__name__ = "Integer32"
_AgnCFlipNetEventOSD_Object = MibTableColumn
agnCFlipNetEventOSD = _AgnCFlipNetEventOSD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 9),
    _AgnCFlipNetEventOSD_Type()
)
agnCFlipNetEventOSD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventOSD.setStatus("mandatory")


class _AgnCFlipNetEventDayType_Type(Integer32):
    """Custom type agnCFlipNetEventDayType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fullWorkday", 2),
          ("notApplicable", 1),
          ("partialWorkday", 3),
          ("weekend", 4))
    )


_AgnCFlipNetEventDayType_Type.__name__ = "Integer32"
_AgnCFlipNetEventDayType_Object = MibTableColumn
agnCFlipNetEventDayType = _AgnCFlipNetEventDayType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 10),
    _AgnCFlipNetEventDayType_Type()
)
agnCFlipNetEventDayType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventDayType.setStatus("mandatory")


class _AgnCFlipNetEventStartTime_Type(DisplayString):
    """Custom type agnCFlipNetEventStartTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_AgnCFlipNetEventStartTime_Type.__name__ = "DisplayString"
_AgnCFlipNetEventStartTime_Object = MibTableColumn
agnCFlipNetEventStartTime = _AgnCFlipNetEventStartTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 11),
    _AgnCFlipNetEventStartTime_Type()
)
agnCFlipNetEventStartTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventStartTime.setStatus("mandatory")


class _AgnCFlipNetEventEndTime_Type(DisplayString):
    """Custom type agnCFlipNetEventEndTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_AgnCFlipNetEventEndTime_Type.__name__ = "DisplayString"
_AgnCFlipNetEventEndTime_Object = MibTableColumn
agnCFlipNetEventEndTime = _AgnCFlipNetEventEndTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 12),
    _AgnCFlipNetEventEndTime_Type()
)
agnCFlipNetEventEndTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventEndTime.setStatus("mandatory")
_AgnCFlipTable_Object = MibTable
agnCFlipTable = _AgnCFlipTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3)
)
if mibBuilder.loadTexts:
    agnCFlipTable.setStatus("mandatory")
_AgnCFlipEntry_Object = MibTableRow
agnCFlipEntry = _AgnCFlipEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1)
)
agnCFlipEntry.setIndexNames(
    (0, "DACS-MIB", "agnCFlipCnfgIdx"),
    (0, "DACS-MIB", "agnCFlipIdx"),
)
if mibBuilder.loadTexts:
    agnCFlipEntry.setStatus("mandatory")


class _AgnCFlipCnfgIdx_Type(Integer32):
    """Custom type agnCFlipCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnCFlipCnfgIdx_Type.__name__ = "Integer32"
_AgnCFlipCnfgIdx_Object = MibTableColumn
agnCFlipCnfgIdx = _AgnCFlipCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 1),
    _AgnCFlipCnfgIdx_Type()
)
agnCFlipCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCFlipCnfgIdx.setStatus("mandatory")


class _AgnCFlipIdx_Type(Integer32):
    """Custom type agnCFlipIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnCFlipIdx_Type.__name__ = "Integer32"
_AgnCFlipIdx_Object = MibTableColumn
agnCFlipIdx = _AgnCFlipIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 2),
    _AgnCFlipIdx_Type()
)
agnCFlipIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCFlipIdx.setStatus("mandatory")


class _AgnCFlipActive_Type(Integer32):
    """Custom type agnCFlipActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnCFlipActive_Type.__name__ = "Integer32"
_AgnCFlipActive_Object = MibTableColumn
agnCFlipActive = _AgnCFlipActive_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 3),
    _AgnCFlipActive_Type()
)
agnCFlipActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipActive.setStatus("mandatory")


class _AgnCFlipLogicalExp_Type(DisplayString):
    """Custom type agnCFlipLogicalExp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_AgnCFlipLogicalExp_Type.__name__ = "DisplayString"
_AgnCFlipLogicalExp_Object = MibTableColumn
agnCFlipLogicalExp = _AgnCFlipLogicalExp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 4),
    _AgnCFlipLogicalExp_Type()
)
agnCFlipLogicalExp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipLogicalExp.setStatus("mandatory")


class _AgnCFlipDbNo_Type(Integer32):
    """Custom type agnCFlipDbNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnCFlipDbNo_Type.__name__ = "Integer32"
_AgnCFlipDbNo_Object = MibTableColumn
agnCFlipDbNo = _AgnCFlipDbNo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 5),
    _AgnCFlipDbNo_Type()
)
agnCFlipDbNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipDbNo.setStatus("mandatory")


class _AgnCFlipDiscardDe_Type(Integer32):
    """Custom type agnCFlipDiscardDe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_AgnCFlipDiscardDe_Type.__name__ = "Integer32"
_AgnCFlipDiscardDe_Object = MibTableColumn
agnCFlipDiscardDe = _AgnCFlipDiscardDe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 6),
    _AgnCFlipDiscardDe_Type()
)
agnCFlipDiscardDe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipDiscardDe.setStatus("mandatory")
_AgnFlipDbControls_ObjectIdentity = ObjectIdentity
agnFlipDbControls = _AgnFlipDbControls_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4)
)


class _AgnCFlipDbSanityCheckCmd_Type(Integer32):
    """Custom type agnCFlipDbSanityCheckCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCFlipDbSanityCheckCmd_Type.__name__ = "Integer32"
_AgnCFlipDbSanityCheckCmd_Object = MibScalar
agnCFlipDbSanityCheckCmd = _AgnCFlipDbSanityCheckCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 1),
    _AgnCFlipDbSanityCheckCmd_Type()
)
agnCFlipDbSanityCheckCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipDbSanityCheckCmd.setStatus("mandatory")


class _AgnCSaveFlipDbCmd_Type(Integer32):
    """Custom type agnCSaveFlipDbCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCSaveFlipDbCmd_Type.__name__ = "Integer32"
_AgnCSaveFlipDbCmd_Object = MibScalar
agnCSaveFlipDbCmd = _AgnCSaveFlipDbCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 2),
    _AgnCSaveFlipDbCmd_Type()
)
agnCSaveFlipDbCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSaveFlipDbCmd.setStatus("mandatory")


class _AgnCSaveNetCnfgIdxCmd_Type(Integer32):
    """Custom type agnCSaveNetCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnCSaveNetCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCSaveNetCnfgIdxCmd_Object = MibScalar
agnCSaveNetCnfgIdxCmd = _AgnCSaveNetCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 3),
    _AgnCSaveNetCnfgIdxCmd_Type()
)
agnCSaveNetCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSaveNetCnfgIdxCmd.setStatus("mandatory")


class _AgnCSaveNetFlipDbCmd_Type(Integer32):
    """Custom type agnCSaveNetFlipDbCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCSaveNetFlipDbCmd_Type.__name__ = "Integer32"
_AgnCSaveNetFlipDbCmd_Object = MibScalar
agnCSaveNetFlipDbCmd = _AgnCSaveNetFlipDbCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 4),
    _AgnCSaveNetFlipDbCmd_Type()
)
agnCSaveNetFlipDbCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSaveNetFlipDbCmd.setStatus("mandatory")


class _AgnCNetGoCmd_Type(Integer32):
    """Custom type agnCNetGoCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCNetGoCmd_Type.__name__ = "Integer32"
_AgnCNetGoCmd_Object = MibScalar
agnCNetGoCmd = _AgnCNetGoCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 5),
    _AgnCNetGoCmd_Type()
)
agnCNetGoCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCNetGoCmd.setStatus("mandatory")


class _AgnCNetDelay_Type(Integer32):
    """Custom type agnCNetDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 999),
    )


_AgnCNetDelay_Type.__name__ = "Integer32"
_AgnCNetDelay_Object = MibScalar
agnCNetDelay = _AgnCNetDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 6),
    _AgnCNetDelay_Type()
)
agnCNetDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCNetDelay.setStatus("mandatory")


class _AgnCNetEventsBcast_Type(Integer32):
    """Custom type agnCNetEventsBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3))
    )


_AgnCNetEventsBcast_Type.__name__ = "Integer32"
_AgnCNetEventsBcast_Object = MibScalar
agnCNetEventsBcast = _AgnCNetEventsBcast_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 7),
    _AgnCNetEventsBcast_Type()
)
agnCNetEventsBcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCNetEventsBcast.setStatus("mandatory")


class _AgnCNetEventsBcastInterval_Type(Integer32):
    """Custom type agnCNetEventsBcastInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 60),
    )


_AgnCNetEventsBcastInterval_Type.__name__ = "Integer32"
_AgnCNetEventsBcastInterval_Object = MibScalar
agnCNetEventsBcastInterval = _AgnCNetEventsBcastInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 8),
    _AgnCNetEventsBcastInterval_Type()
)
agnCNetEventsBcastInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCNetEventsBcastInterval.setStatus("mandatory")
_AgnSa_ObjectIdentity = ObjectIdentity
agnSa = _AgnSa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 6)
)
_AgnSaSwchStatus_Type = Integer32
_AgnSaSwchStatus_Object = MibScalar
agnSaSwchStatus = _AgnSaSwchStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 6, 1),
    _AgnSaSwchStatus_Type()
)
agnSaSwchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSaSwchStatus.setStatus("mandatory")
_AgnListDecoding_ObjectIdentity = ObjectIdentity
agnListDecoding = _AgnListDecoding_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7)
)
_AgnListDecodingTable_Object = MibTable
agnListDecodingTable = _AgnListDecodingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1)
)
if mibBuilder.loadTexts:
    agnListDecodingTable.setStatus("mandatory")
_AgnListDecodingEntry_Object = MibTableRow
agnListDecodingEntry = _AgnListDecodingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1)
)
agnListDecodingEntry.setIndexNames(
    (0, "DACS-MIB", "agnListDecodingType"),
    (0, "DACS-MIB", "agnListDecodingCode"),
)
if mibBuilder.loadTexts:
    agnListDecodingEntry.setStatus("mandatory")


class _AgnListDecodingType_Type(Integer32):
    """Custom type agnListDecodingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alr", 1),
          ("sanity", 2))
    )


_AgnListDecodingType_Type.__name__ = "Integer32"
_AgnListDecodingType_Object = MibTableColumn
agnListDecodingType = _AgnListDecodingType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 1),
    _AgnListDecodingType_Type()
)
agnListDecodingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnListDecodingType.setStatus("mandatory")
_AgnListDecodingCode_Type = Integer32
_AgnListDecodingCode_Object = MibTableColumn
agnListDecodingCode = _AgnListDecodingCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 2),
    _AgnListDecodingCode_Type()
)
agnListDecodingCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnListDecodingCode.setStatus("mandatory")


class _AgnListDecodingDescription_Type(DisplayString):
    """Custom type agnListDecodingDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnListDecodingDescription_Type.__name__ = "DisplayString"
_AgnListDecodingDescription_Object = MibTableColumn
agnListDecodingDescription = _AgnListDecodingDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 3),
    _AgnListDecodingDescription_Type()
)
agnListDecodingDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnListDecodingDescription.setStatus("mandatory")


class _AgnListDecodingDefState_Type(Integer32):
    """Custom type agnListDecodingDefState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("event", 3),
          ("major", 5),
          ("minor", 4),
          ("notApplicable", 1))
    )


_AgnListDecodingDefState_Type.__name__ = "Integer32"
_AgnListDecodingDefState_Object = MibTableColumn
agnListDecodingDefState = _AgnListDecodingDefState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 4),
    _AgnListDecodingDefState_Type()
)
agnListDecodingDefState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnListDecodingDefState.setStatus("mandatory")


class _AgnListDecodingSeverity_Type(Integer32):
    """Custom type agnListDecodingSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("notApplicable", 1),
          ("warning", 6))
    )


_AgnListDecodingSeverity_Type.__name__ = "Integer32"
_AgnListDecodingSeverity_Object = MibTableColumn
agnListDecodingSeverity = _AgnListDecodingSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 5),
    _AgnListDecodingSeverity_Type()
)
agnListDecodingSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnListDecodingSeverity.setStatus("mandatory")


class _AgnListDecodingAcmRelaySlt_Type(Integer32):
    """Custom type agnListDecodingAcmRelaySlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("none", 1),
          ("notApplicable", 255))
    )


_AgnListDecodingAcmRelaySlt_Type.__name__ = "Integer32"
_AgnListDecodingAcmRelaySlt_Object = MibTableColumn
agnListDecodingAcmRelaySlt = _AgnListDecodingAcmRelaySlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 6),
    _AgnListDecodingAcmRelaySlt_Type()
)
agnListDecodingAcmRelaySlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnListDecodingAcmRelaySlt.setStatus("mandatory")


class _AgnListDecodingAcmRelayPrt_Type(Integer32):
    """Custom type agnListDecodingAcmRelayPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("notApplicable", 255))
    )


_AgnListDecodingAcmRelayPrt_Type.__name__ = "Integer32"
_AgnListDecodingAcmRelayPrt_Object = MibTableColumn
agnListDecodingAcmRelayPrt = _AgnListDecodingAcmRelayPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 7),
    _AgnListDecodingAcmRelayPrt_Type()
)
agnListDecodingAcmRelayPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnListDecodingAcmRelayPrt.setStatus("mandatory")
_AgnSystemDlci_ObjectIdentity = ObjectIdentity
agnSystemDlci = _AgnSystemDlci_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8)
)
_AgnDlciTable_Object = MibTable
agnDlciTable = _AgnDlciTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1)
)
if mibBuilder.loadTexts:
    agnDlciTable.setStatus("mandatory")
_AgnDlciEntry_Object = MibTableRow
agnDlciEntry = _AgnDlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1)
)
agnDlciEntry.setIndexNames(
    (0, "DACS-MIB", "agnDlciCnfgIdx"),
    (0, "DACS-MIB", "agnDlciLSltIdx"),
    (0, "DACS-MIB", "agnDlciLPrtIdx"),
    (0, "DACS-MIB", "agnDlciHIdx"),
    (0, "DACS-MIB", "agnDlciHSltIdx"),
    (0, "DACS-MIB", "agnDlciHPrtIdx"),
    (0, "DACS-MIB", "agnDlciLIdx"),
)
if mibBuilder.loadTexts:
    agnDlciEntry.setStatus("mandatory")


class _AgnDlciCnfgIdx_Type(Integer32):
    """Custom type agnDlciCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnDlciCnfgIdx_Type.__name__ = "Integer32"
_AgnDlciCnfgIdx_Object = MibTableColumn
agnDlciCnfgIdx = _AgnDlciCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 1),
    _AgnDlciCnfgIdx_Type()
)
agnDlciCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciCnfgIdx.setStatus("mandatory")


class _AgnDlciLSltIdx_Type(Integer32):
    """Custom type agnDlciLSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("vs", 254))
    )


_AgnDlciLSltIdx_Type.__name__ = "Integer32"
_AgnDlciLSltIdx_Object = MibTableColumn
agnDlciLSltIdx = _AgnDlciLSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 2),
    _AgnDlciLSltIdx_Type()
)
agnDlciLSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciLSltIdx.setStatus("mandatory")
_AgnDlciLPrtIdx_Type = Integer32
_AgnDlciLPrtIdx_Object = MibTableColumn
agnDlciLPrtIdx = _AgnDlciLPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 3),
    _AgnDlciLPrtIdx_Type()
)
agnDlciLPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciLPrtIdx.setStatus("mandatory")


class _AgnDlciLIdx_Type(Integer32):
    """Custom type agnDlciLIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 991),
    )


_AgnDlciLIdx_Type.__name__ = "Integer32"
_AgnDlciLIdx_Object = MibTableColumn
agnDlciLIdx = _AgnDlciLIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 4),
    _AgnDlciLIdx_Type()
)
agnDlciLIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciLIdx.setStatus("mandatory")


class _AgnDlciHSltIdx_Type(Integer32):
    """Custom type agnDlciHSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_AgnDlciHSltIdx_Type.__name__ = "Integer32"
_AgnDlciHSltIdx_Object = MibTableColumn
agnDlciHSltIdx = _AgnDlciHSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 5),
    _AgnDlciHSltIdx_Type()
)
agnDlciHSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciHSltIdx.setStatus("mandatory")
_AgnDlciHPrtIdx_Type = Integer32
_AgnDlciHPrtIdx_Object = MibTableColumn
agnDlciHPrtIdx = _AgnDlciHPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 6),
    _AgnDlciHPrtIdx_Type()
)
agnDlciHPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciHPrtIdx.setStatus("mandatory")


class _AgnDlciHIdx_Type(Integer32):
    """Custom type agnDlciHIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_AgnDlciHIdx_Type.__name__ = "Integer32"
_AgnDlciHIdx_Object = MibTableColumn
agnDlciHIdx = _AgnDlciHIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 7),
    _AgnDlciHIdx_Type()
)
agnDlciHIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciHIdx.setStatus("mandatory")


class _AgnDlciTxBc_Type(Integer32):
    """Custom type agnDlciTxBc based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc1024Kbps", 25),
          ("txBc112Kbps", 37),
          ("txBc1152Kbps", 26),
          ("txBc1280Kbps", 27),
          ("txBc128Kbps", 16),
          ("txBc1344Kbps", 28),
          ("txBc14400bps", 7),
          ("txBc1472Kbps", 29),
          ("txBc1536Kbps", 42),
          ("txBc16000bps", 36),
          ("txBc1600Kbps", 30),
          ("txBc168Kbps", 38),
          ("txBc1728Kbps", 31),
          ("txBc1792Kbps", 43),
          ("txBc1856Kbps", 32),
          ("txBc19200bps", 8),
          ("txBc1920Kbps", 33),
          ("txBc192Kbps", 17),
          ("txBc1984Kbps", 34),
          ("txBc2048Kbps", 35),
          ("txBc224Kbps", 39),
          ("txBc256Kbps", 18),
          ("txBc28800bps", 9),
          ("txBc32000bps", 10),
          ("txBc320Kbps", 19),
          ("txBc336Kbps", 40),
          ("txBc38400bps", 11),
          ("txBc384Kbps", 20),
          ("txBc448Kbps", 21),
          ("txBc48000bps", 12),
          ("txBc5100bps", 3),
          ("txBc512Kbps", 22),
          ("txBc56000bps", 13),
          ("txBc57600bps", 14),
          ("txBc6400bps", 4),
          ("txBc64Kbps", 15),
          ("txBc672Kbps", 41),
          ("txBc768Kbps", 23),
          ("txBc8300bps", 5),
          ("txBc896Kbps", 24),
          ("txBc9600bps", 6),
          ("zero", 2))
    )


_AgnDlciTxBc_Type.__name__ = "Integer32"
_AgnDlciTxBc_Object = MibTableColumn
agnDlciTxBc = _AgnDlciTxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 8),
    _AgnDlciTxBc_Type()
)
agnDlciTxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciTxBc.setStatus("mandatory")


class _AgnDlciTxBe_Type(Integer32):
    """Custom type agnDlciTxBe based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBe1024Kbps", 25),
          ("txBe112Kbps", 37),
          ("txBe1152Kbps", 26),
          ("txBe1280Kbps", 27),
          ("txBe128Kbps", 16),
          ("txBe1344Kbps", 28),
          ("txBe14400bps", 7),
          ("txBe1472Kbps", 29),
          ("txBe1536Kbps", 42),
          ("txBe16000bps", 36),
          ("txBe1600Kbps", 30),
          ("txBe168Kbps", 38),
          ("txBe1728Kbps", 31),
          ("txBe1792Kbps", 43),
          ("txBe1856Kbps", 32),
          ("txBe19200bps", 8),
          ("txBe1920Kbps", 33),
          ("txBe192Kbps", 17),
          ("txBe1984Kbps", 34),
          ("txBe2048Kbps", 35),
          ("txBe224Kbps", 39),
          ("txBe256Kbps", 18),
          ("txBe28800bps", 9),
          ("txBe32000bps", 10),
          ("txBe320Kbps", 19),
          ("txBe336Kbps", 40),
          ("txBe38400bps", 11),
          ("txBe384Kbps", 20),
          ("txBe448Kbps", 21),
          ("txBe48000bps", 12),
          ("txBe5100bps", 3),
          ("txBe512Kbps", 22),
          ("txBe56000bps", 13),
          ("txBe57600bps", 14),
          ("txBe6400bps", 4),
          ("txBe64Kbps", 15),
          ("txBe672Kbps", 41),
          ("txBe768Kbps", 23),
          ("txBe8300bps", 5),
          ("txBe896Kbps", 24),
          ("txBe9600bps", 6),
          ("zero", 2))
    )


_AgnDlciTxBe_Type.__name__ = "Integer32"
_AgnDlciTxBe_Object = MibTableColumn
agnDlciTxBe = _AgnDlciTxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 9),
    _AgnDlciTxBe_Type()
)
agnDlciTxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciTxBe.setStatus("mandatory")


class _AgnDlciRxBc_Type(Integer32):
    """Custom type agnDlciRxBc based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc1024Kbps", 25),
          ("rxBc112Kbps", 37),
          ("rxBc1152Kbps", 26),
          ("rxBc1280Kbps", 27),
          ("rxBc128Kbps", 16),
          ("rxBc1344Kbps", 28),
          ("rxBc14400bps", 7),
          ("rxBc1472Kbps", 29),
          ("rxBc1536Kbps", 42),
          ("rxBc16000bps", 36),
          ("rxBc1600Kbps", 30),
          ("rxBc168Kbps", 38),
          ("rxBc1728Kbps", 31),
          ("rxBc1792Kbps", 43),
          ("rxBc1856Kbps", 32),
          ("rxBc19200bps", 8),
          ("rxBc1920Kbps", 33),
          ("rxBc192Kbps", 17),
          ("rxBc1984Kbps", 34),
          ("rxBc2048Kbps", 35),
          ("rxBc224Kbps", 39),
          ("rxBc256Kbps", 18),
          ("rxBc28800bps", 9),
          ("rxBc32000bps", 10),
          ("rxBc320Kbps", 19),
          ("rxBc336Kbps", 40),
          ("rxBc38400bps", 11),
          ("rxBc384Kbps", 20),
          ("rxBc448Kbps", 21),
          ("rxBc48000bps", 12),
          ("rxBc5100bps", 3),
          ("rxBc512Kbps", 22),
          ("rxBc56000bps", 13),
          ("rxBc57600bps", 14),
          ("rxBc6400bps", 4),
          ("rxBc64Kbps", 15),
          ("rxBc672Kbps", 41),
          ("rxBc768Kbps", 23),
          ("rxBc8300bps", 5),
          ("rxBc896Kbps", 24),
          ("rxBc9600bps", 6),
          ("zero", 2))
    )


_AgnDlciRxBc_Type.__name__ = "Integer32"
_AgnDlciRxBc_Object = MibTableColumn
agnDlciRxBc = _AgnDlciRxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 10),
    _AgnDlciRxBc_Type()
)
agnDlciRxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciRxBc.setStatus("mandatory")


class _AgnDlciRxBe_Type(Integer32):
    """Custom type agnDlciRxBe based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBe1024Kbps", 25),
          ("rxBe112Kbps", 37),
          ("rxBe1152Kbps", 26),
          ("rxBe1280Kbps", 27),
          ("rxBe128Kbps", 16),
          ("rxBe1344Kbps", 28),
          ("rxBe14400bps", 7),
          ("rxBe1472Kbps", 29),
          ("rxBe1536Kbps", 42),
          ("rxBe16000bps", 36),
          ("rxBe1600Kbps", 30),
          ("rxBe168Kbps", 38),
          ("rxBe1728Kbps", 31),
          ("rxBe1792Kbps", 43),
          ("rxBe1856Kbps", 32),
          ("rxBe19200bps", 8),
          ("rxBe1920Kbps", 33),
          ("rxBe192Kbps", 17),
          ("rxBe1984Kbps", 34),
          ("rxBe2048Kbps", 35),
          ("rxBe224Kbps", 39),
          ("rxBe256Kbps", 18),
          ("rxBe28800bps", 9),
          ("rxBe32000bps", 10),
          ("rxBe320Kbps", 19),
          ("rxBe336Kbps", 40),
          ("rxBe38400bps", 11),
          ("rxBe384Kbps", 20),
          ("rxBe448Kbps", 21),
          ("rxBe48000bps", 12),
          ("rxBe5100bps", 3),
          ("rxBe512Kbps", 22),
          ("rxBe56000bps", 13),
          ("rxBe57600bps", 14),
          ("rxBe6400bps", 4),
          ("rxBe64Kbps", 15),
          ("rxBe672Kbps", 41),
          ("rxBe768Kbps", 23),
          ("rxBe8300bps", 5),
          ("rxBe896Kbps", 24),
          ("rxBe9600bps", 6),
          ("zero", 2))
    )


_AgnDlciRxBe_Type.__name__ = "Integer32"
_AgnDlciRxBe_Object = MibTableColumn
agnDlciRxBe = _AgnDlciRxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 11),
    _AgnDlciRxBe_Type()
)
agnDlciRxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciRxBe.setStatus("mandatory")


class _AgnDlciPriority_Type(Integer32):
    """Custom type agnDlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AgnDlciPriority_Type.__name__ = "Integer32"
_AgnDlciPriority_Object = MibTableColumn
agnDlciPriority = _AgnDlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 12),
    _AgnDlciPriority_Type()
)
agnDlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciPriority.setStatus("mandatory")


class _AgnDlciStatus_Type(Integer32):
    """Custom type agnDlciStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_AgnDlciStatus_Type.__name__ = "Integer32"
_AgnDlciStatus_Object = MibTableColumn
agnDlciStatus = _AgnDlciStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 13),
    _AgnDlciStatus_Type()
)
agnDlciStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciStatus.setStatus("mandatory")


class _AgnDlciSpoofing_Type(Integer32):
    """Custom type agnDlciSpoofing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnDlciSpoofing_Type.__name__ = "Integer32"
_AgnDlciSpoofing_Object = MibTableColumn
agnDlciSpoofing = _AgnDlciSpoofing_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 14),
    _AgnDlciSpoofing_Type()
)
agnDlciSpoofing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciSpoofing.setStatus("mandatory")


class _AgnDlciFunnelEnable_Type(Integer32):
    """Custom type agnDlciFunnelEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3))
    )


_AgnDlciFunnelEnable_Type.__name__ = "Integer32"
_AgnDlciFunnelEnable_Object = MibTableColumn
agnDlciFunnelEnable = _AgnDlciFunnelEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 15),
    _AgnDlciFunnelEnable_Type()
)
agnDlciFunnelEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciFunnelEnable.setStatus("mandatory")


class _AgnDlciRoutingProtocol_Type(Integer32):
    """Custom type agnDlciRoutingProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 4),
          ("notApplicable", 1),
          ("rip", 2),
          ("rip2", 3))
    )


_AgnDlciRoutingProtocol_Type.__name__ = "Integer32"
_AgnDlciRoutingProtocol_Object = MibTableColumn
agnDlciRoutingProtocol = _AgnDlciRoutingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 16),
    _AgnDlciRoutingProtocol_Type()
)
agnDlciRoutingProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciRoutingProtocol.setStatus("mandatory")


class _AgnDlciRowStatus_Type(Integer32):
    """Custom type agnDlciRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 6))
    )


_AgnDlciRowStatus_Type.__name__ = "Integer32"
_AgnDlciRowStatus_Object = MibTableColumn
agnDlciRowStatus = _AgnDlciRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 17),
    _AgnDlciRowStatus_Type()
)
agnDlciRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciRowStatus.setStatus("mandatory")
_AgnVoiceSwitching_ObjectIdentity = ObjectIdentity
agnVoiceSwitching = _AgnVoiceSwitching_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9)
)
_AgnVoiceSwConfTable_Object = MibTable
agnVoiceSwConfTable = _AgnVoiceSwConfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1)
)
if mibBuilder.loadTexts:
    agnVoiceSwConfTable.setStatus("mandatory")
_AgnVoiceSwConfEntry_Object = MibTableRow
agnVoiceSwConfEntry = _AgnVoiceSwConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1)
)
agnVoiceSwConfEntry.setIndexNames(
    (0, "DACS-MIB", "agnVoiceSwConfIdx"),
)
if mibBuilder.loadTexts:
    agnVoiceSwConfEntry.setStatus("mandatory")


class _AgnVoiceSwConfIdx_Type(Integer32):
    """Custom type agnVoiceSwConfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnVoiceSwConfIdx_Type.__name__ = "Integer32"
_AgnVoiceSwConfIdx_Object = MibTableColumn
agnVoiceSwConfIdx = _AgnVoiceSwConfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 1),
    _AgnVoiceSwConfIdx_Type()
)
agnVoiceSwConfIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfIdx.setStatus("mandatory")


class _AgnVoiceSwConfZoneId_Type(DisplayString):
    """Custom type agnVoiceSwConfZoneId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 2),
    )


_AgnVoiceSwConfZoneId_Type.__name__ = "DisplayString"
_AgnVoiceSwConfZoneId_Object = MibTableColumn
agnVoiceSwConfZoneId = _AgnVoiceSwConfZoneId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 2),
    _AgnVoiceSwConfZoneId_Type()
)
agnVoiceSwConfZoneId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfZoneId.setStatus("mandatory")


class _AgnVoiceSwConfNodeId_Type(DisplayString):
    """Custom type agnVoiceSwConfNodeId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 3),
    )


_AgnVoiceSwConfNodeId_Type.__name__ = "DisplayString"
_AgnVoiceSwConfNodeId_Object = MibTableColumn
agnVoiceSwConfNodeId = _AgnVoiceSwConfNodeId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 3),
    _AgnVoiceSwConfNodeId_Type()
)
agnVoiceSwConfNodeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfNodeId.setStatus("mandatory")


class _AgnVoiceSwConfNoOfHops_Type(Integer32):
    """Custom type agnVoiceSwConfNoOfHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_AgnVoiceSwConfNoOfHops_Type.__name__ = "Integer32"
_AgnVoiceSwConfNoOfHops_Object = MibTableColumn
agnVoiceSwConfNoOfHops = _AgnVoiceSwConfNoOfHops_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 4),
    _AgnVoiceSwConfNoOfHops_Type()
)
agnVoiceSwConfNoOfHops.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfNoOfHops.setStatus("mandatory")
_AgnVoiceSwConfRtTable_Object = MibTable
agnVoiceSwConfRtTable = _AgnVoiceSwConfRtTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2)
)
if mibBuilder.loadTexts:
    agnVoiceSwConfRtTable.setStatus("mandatory")
_AgnVoiceSwConfRtEntry_Object = MibTableRow
agnVoiceSwConfRtEntry = _AgnVoiceSwConfRtEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1)
)
agnVoiceSwConfRtEntry.setIndexNames(
    (0, "DACS-MIB", "agnVoiceSwConfRtDbId"),
    (0, "DACS-MIB", "agnVoiceSwConfRtIdx"),
)
if mibBuilder.loadTexts:
    agnVoiceSwConfRtEntry.setStatus("mandatory")


class _AgnVoiceSwConfRtDbId_Type(Integer32):
    """Custom type agnVoiceSwConfRtDbId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnVoiceSwConfRtDbId_Type.__name__ = "Integer32"
_AgnVoiceSwConfRtDbId_Object = MibTableColumn
agnVoiceSwConfRtDbId = _AgnVoiceSwConfRtDbId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 1),
    _AgnVoiceSwConfRtDbId_Type()
)
agnVoiceSwConfRtDbId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtDbId.setStatus("mandatory")
_AgnVoiceSwConfRtIdx_Type = Integer32
_AgnVoiceSwConfRtIdx_Object = MibTableColumn
agnVoiceSwConfRtIdx = _AgnVoiceSwConfRtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 2),
    _AgnVoiceSwConfRtIdx_Type()
)
agnVoiceSwConfRtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtIdx.setStatus("mandatory")


class _AgnVoiceSwConfRtDigits_Type(DisplayString):
    """Custom type agnVoiceSwConfRtDigits based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_AgnVoiceSwConfRtDigits_Type.__name__ = "DisplayString"
_AgnVoiceSwConfRtDigits_Object = MibTableColumn
agnVoiceSwConfRtDigits = _AgnVoiceSwConfRtDigits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 3),
    _AgnVoiceSwConfRtDigits_Type()
)
agnVoiceSwConfRtDigits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtDigits.setStatus("mandatory")


class _AgnVoiceSwConfRtAction_Type(Integer32):
    """Custom type agnVoiceSwConfRtAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("del", 7),
          ("hgr", 6),
          ("in", 5),
          ("node", 3),
          ("notApplicable", 1),
          ("rep", 8),
          ("shortDialing", 4),
          ("zone", 2))
    )


_AgnVoiceSwConfRtAction_Type.__name__ = "Integer32"
_AgnVoiceSwConfRtAction_Object = MibTableColumn
agnVoiceSwConfRtAction = _AgnVoiceSwConfRtAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 4),
    _AgnVoiceSwConfRtAction_Type()
)
agnVoiceSwConfRtAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtAction.setStatus("mandatory")


class _AgnVoiceSwConfRtData_Type(DisplayString):
    """Custom type agnVoiceSwConfRtData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_AgnVoiceSwConfRtData_Type.__name__ = "DisplayString"
_AgnVoiceSwConfRtData_Object = MibTableColumn
agnVoiceSwConfRtData = _AgnVoiceSwConfRtData_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 5),
    _AgnVoiceSwConfRtData_Type()
)
agnVoiceSwConfRtData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtData.setStatus("mandatory")


class _AgnVoiceSwConfRtSlot_Type(Integer32):
    """Custom type agnVoiceSwConfRtSlot based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_AgnVoiceSwConfRtSlot_Type.__name__ = "Integer32"
_AgnVoiceSwConfRtSlot_Object = MibTableColumn
agnVoiceSwConfRtSlot = _AgnVoiceSwConfRtSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 6),
    _AgnVoiceSwConfRtSlot_Type()
)
agnVoiceSwConfRtSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtSlot.setStatus("mandatory")


class _AgnVoiceSwConfRtPort_Type(Integer32):
    """Custom type agnVoiceSwConfRtPort based on Integer32"""
    defaultValue = 0


_AgnVoiceSwConfRtPort_Object = MibTableColumn
agnVoiceSwConfRtPort = _AgnVoiceSwConfRtPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 7),
    _AgnVoiceSwConfRtPort_Type()
)
agnVoiceSwConfRtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtPort.setStatus("mandatory")


class _AgnVoiceSwConfRtDlci_Type(Integer32):
    """Custom type agnVoiceSwConfRtDlci based on Integer32"""
    defaultValue = 15


_AgnVoiceSwConfRtDlci_Object = MibTableColumn
agnVoiceSwConfRtDlci = _AgnVoiceSwConfRtDlci_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 8),
    _AgnVoiceSwConfRtDlci_Type()
)
agnVoiceSwConfRtDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtDlci.setStatus("mandatory")


class _AgnVoiceSwConfRtRowStatus_Type(Integer32):
    """Custom type agnVoiceSwConfRtRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("createAndWait", 5),
          ("destroy", 6),
          ("notInService", 2),
          ("notReady", 3))
    )


_AgnVoiceSwConfRtRowStatus_Type.__name__ = "Integer32"
_AgnVoiceSwConfRtRowStatus_Object = MibTableColumn
agnVoiceSwConfRtRowStatus = _AgnVoiceSwConfRtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 9),
    _AgnVoiceSwConfRtRowStatus_Type()
)
agnVoiceSwConfRtRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtRowStatus.setStatus("mandatory")
_AgnVoiceSwConfHGTable_Object = MibTable
agnVoiceSwConfHGTable = _AgnVoiceSwConfHGTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5)
)
if mibBuilder.loadTexts:
    agnVoiceSwConfHGTable.setStatus("mandatory")
_AgnVoiceSwConfHGEntry_Object = MibTableRow
agnVoiceSwConfHGEntry = _AgnVoiceSwConfHGEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1)
)
agnVoiceSwConfHGEntry.setIndexNames(
    (0, "DACS-MIB", "agnVoiceSwConfHGdbIdx"),
    (0, "DACS-MIB", "agnVoiceSwConfHGIdx"),
)
if mibBuilder.loadTexts:
    agnVoiceSwConfHGEntry.setStatus("mandatory")


class _AgnVoiceSwConfHGdbIdx_Type(Integer32):
    """Custom type agnVoiceSwConfHGdbIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnVoiceSwConfHGdbIdx_Type.__name__ = "Integer32"
_AgnVoiceSwConfHGdbIdx_Object = MibTableColumn
agnVoiceSwConfHGdbIdx = _AgnVoiceSwConfHGdbIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 1),
    _AgnVoiceSwConfHGdbIdx_Type()
)
agnVoiceSwConfHGdbIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGdbIdx.setStatus("mandatory")


class _AgnVoiceSwConfHGIdx_Type(Integer32):
    """Custom type agnVoiceSwConfHGIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnVoiceSwConfHGIdx_Type.__name__ = "Integer32"
_AgnVoiceSwConfHGIdx_Object = MibTableColumn
agnVoiceSwConfHGIdx = _AgnVoiceSwConfHGIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 2),
    _AgnVoiceSwConfHGIdx_Type()
)
agnVoiceSwConfHGIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGIdx.setStatus("mandatory")


class _AgnVoiceSwConfHGConnect_Type(Integer32):
    """Custom type agnVoiceSwConfHGConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnVoiceSwConfHGConnect_Type.__name__ = "Integer32"
_AgnVoiceSwConfHGConnect_Object = MibTableColumn
agnVoiceSwConfHGConnect = _AgnVoiceSwConfHGConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 3),
    _AgnVoiceSwConfHGConnect_Type()
)
agnVoiceSwConfHGConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGConnect.setStatus("mandatory")


class _AgnVoiceSwConfHGExt_Type(Integer32):
    """Custom type agnVoiceSwConfHGExt based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_AgnVoiceSwConfHGExt_Type.__name__ = "Integer32"
_AgnVoiceSwConfHGExt_Object = MibTableColumn
agnVoiceSwConfHGExt = _AgnVoiceSwConfHGExt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 4),
    _AgnVoiceSwConfHGExt_Type()
)
agnVoiceSwConfHGExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGExt.setStatus("mandatory")
_AgnSigProfile_ObjectIdentity = ObjectIdentity
agnSigProfile = _AgnSigProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10)
)
_AgnSigProfileTable_Object = MibTable
agnSigProfileTable = _AgnSigProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1)
)
if mibBuilder.loadTexts:
    agnSigProfileTable.setStatus("mandatory")
_AgnSigProfileEntry_Object = MibTableRow
agnSigProfileEntry = _AgnSigProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1)
)
agnSigProfileEntry.setIndexNames(
    (0, "DACS-MIB", "agnSigProfileCnfgIdx"),
    (0, "DACS-MIB", "agnSigProfileIdx"),
    (0, "DACS-MIB", "agnSigProfileRxTx"),
)
if mibBuilder.loadTexts:
    agnSigProfileEntry.setStatus("mandatory")


class _AgnSigProfileCnfgIdx_Type(Integer32):
    """Custom type agnSigProfileCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnSigProfileCnfgIdx_Type.__name__ = "Integer32"
_AgnSigProfileCnfgIdx_Object = MibTableColumn
agnSigProfileCnfgIdx = _AgnSigProfileCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 1),
    _AgnSigProfileCnfgIdx_Type()
)
agnSigProfileCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSigProfileCnfgIdx.setStatus("mandatory")


class _AgnSigProfileIdx_Type(Integer32):
    """Custom type agnSigProfileIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AgnSigProfileIdx_Type.__name__ = "Integer32"
_AgnSigProfileIdx_Object = MibTableColumn
agnSigProfileIdx = _AgnSigProfileIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 2),
    _AgnSigProfileIdx_Type()
)
agnSigProfileIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSigProfileIdx.setStatus("mandatory")


class _AgnSigProfileRxTx_Type(Integer32):
    """Custom type agnSigProfileRxTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rx", 1),
          ("tx", 2))
    )


_AgnSigProfileRxTx_Type.__name__ = "Integer32"
_AgnSigProfileRxTx_Object = MibTableColumn
agnSigProfileRxTx = _AgnSigProfileRxTx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 3),
    _AgnSigProfileRxTx_Type()
)
agnSigProfileRxTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSigProfileRxTx.setStatus("mandatory")
_AgnSigProfileABCD_Type = OctetString
_AgnSigProfileABCD_Object = MibTableColumn
agnSigProfileABCD = _AgnSigProfileABCD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 4),
    _AgnSigProfileABCD_Type()
)
agnSigProfileABCD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSigProfileABCD.setStatus("mandatory")
_AgnSystemTs_ObjectIdentity = ObjectIdentity
agnSystemTs = _AgnSystemTs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11)
)
_AgnTsTable_Object = MibTable
agnTsTable = _AgnTsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1)
)
if mibBuilder.loadTexts:
    agnTsTable.setStatus("mandatory")
_AgnTsEntry_Object = MibTableRow
agnTsEntry = _AgnTsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1)
)
agnTsEntry.setIndexNames(
    (0, "DACS-MIB", "agnTsCnfgIdx"),
    (0, "DACS-MIB", "agnTsSltIdx"),
    (0, "DACS-MIB", "agnTsPrtIdx"),
    (0, "DACS-MIB", "agnTsIdx"),
    (0, "DACS-MIB", "agnTsBitIdx"),
    (0, "DACS-MIB", "agnTsConSltIdx"),
    (0, "DACS-MIB", "agnTsConPrtIdx"),
    (0, "DACS-MIB", "agnTsConIdx"),
)
if mibBuilder.loadTexts:
    agnTsEntry.setStatus("mandatory")


class _AgnTsCnfgIdx_Type(Integer32):
    """Custom type agnTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnTsCnfgIdx_Type.__name__ = "Integer32"
_AgnTsCnfgIdx_Object = MibTableColumn
agnTsCnfgIdx = _AgnTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 1),
    _AgnTsCnfgIdx_Type()
)
agnTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCnfgIdx.setStatus("mandatory")


class _AgnTsSltIdx_Type(Integer32):
    """Custom type agnTsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_AgnTsSltIdx_Type.__name__ = "Integer32"
_AgnTsSltIdx_Object = MibTableColumn
agnTsSltIdx = _AgnTsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 2),
    _AgnTsSltIdx_Type()
)
agnTsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsSltIdx.setStatus("mandatory")
_AgnTsPrtIdx_Type = Integer32
_AgnTsPrtIdx_Object = MibTableColumn
agnTsPrtIdx = _AgnTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 3),
    _AgnTsPrtIdx_Type()
)
agnTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsPrtIdx.setStatus("mandatory")


class _AgnTsIdx_Type(Integer32):
    """Custom type agnTsIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_AgnTsIdx_Type.__name__ = "Integer32"
_AgnTsIdx_Object = MibTableColumn
agnTsIdx = _AgnTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 4),
    _AgnTsIdx_Type()
)
agnTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsIdx.setStatus("mandatory")
_AgnTsBitIdx_Type = Integer32
_AgnTsBitIdx_Object = MibTableColumn
agnTsBitIdx = _AgnTsBitIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 5),
    _AgnTsBitIdx_Type()
)
agnTsBitIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsBitIdx.setStatus("mandatory")


class _AgnTsConSltIdx_Type(Integer32):
    """Custom type agnTsConSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_AgnTsConSltIdx_Type.__name__ = "Integer32"
_AgnTsConSltIdx_Object = MibTableColumn
agnTsConSltIdx = _AgnTsConSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 6),
    _AgnTsConSltIdx_Type()
)
agnTsConSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsConSltIdx.setStatus("mandatory")
_AgnTsConPrtIdx_Type = Integer32
_AgnTsConPrtIdx_Object = MibTableColumn
agnTsConPrtIdx = _AgnTsConPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 7),
    _AgnTsConPrtIdx_Type()
)
agnTsConPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsConPrtIdx.setStatus("mandatory")


class _AgnTsConIdx_Type(Integer32):
    """Custom type agnTsConIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnTsConIdx_Type.__name__ = "Integer32"
_AgnTsConIdx_Object = MibTableColumn
agnTsConIdx = _AgnTsConIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 8),
    _AgnTsConIdx_Type()
)
agnTsConIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsConIdx.setStatus("mandatory")


class _AgnTsType_Type(Integer32):
    """Custom type agnTsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("data", 3),
          ("mng", 6),
          ("spare", 7),
          ("unknown", 1),
          ("vcMP", 4),
          ("voice", 2))
    )


_AgnTsType_Type.__name__ = "Integer32"
_AgnTsType_Object = MibTableColumn
agnTsType = _AgnTsType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 9),
    _AgnTsType_Type()
)
agnTsType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTsType.setStatus("mandatory")


class _AgnTsRowStatus_Type(Integer32):
    """Custom type agnTsRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 6))
    )


_AgnTsRowStatus_Type.__name__ = "Integer32"
_AgnTsRowStatus_Object = MibTableColumn
agnTsRowStatus = _AgnTsRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 10),
    _AgnTsRowStatus_Type()
)
agnTsRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTsRowStatus.setStatus("mandatory")


class _AgnTsDirection_Type(Integer32):
    """Custom type agnTsDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("bcastDst", 6),
          ("bcastSrc", 5),
          ("both", 4),
          ("notApplicable", 1),
          ("rx", 2),
          ("tx", 3))
    )


_AgnTsDirection_Type.__name__ = "Integer32"
_AgnTsDirection_Object = MibTableColumn
agnTsDirection = _AgnTsDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 11),
    _AgnTsDirection_Type()
)
agnTsDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTsDirection.setStatus("mandatory")
_MdlWanGen_ObjectIdentity = ObjectIdentity
mdlWanGen = _MdlWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3)
)
_StatMdlGen_ObjectIdentity = ObjectIdentity
statMdlGen = _StatMdlGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1)
)
_MdlSInstTable_Object = MibTable
mdlSInstTable = _MdlSInstTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    mdlSInstTable.setStatus("mandatory")
_MdlSInstEntry_Object = MibTableRow
mdlSInstEntry = _MdlSInstEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1)
)
mdlSInstEntry.setIndexNames(
    (0, "DACS-MIB", "mdlSInstSltIdx"),
)
if mibBuilder.loadTexts:
    mdlSInstEntry.setStatus("mandatory")


class _MdlSInstSltIdx_Type(Integer32):
    """Custom type mdlSInstSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlSInstSltIdx_Type.__name__ = "Integer32"
_MdlSInstSltIdx_Object = MibTableColumn
mdlSInstSltIdx = _MdlSInstSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 1),
    _MdlSInstSltIdx_Type()
)
mdlSInstSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSInstSltIdx.setStatus("mandatory")


class _MdlSInstCardType_Type(Integer32):
    """Custom type mdlSInstCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9,
              10,
              11,
              20,
              21,
              22,
              23,
              24,
              25,
              31,
              32,
              33,
              34,
              35,
              36,
              60,
              61,
              72,
              80,
              81,
              82,
              83,
              84,
              85,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              130,
              131,
              132,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              204,
              210,
              211,
              212,
              213,
              214,
              215,
              220,
              221,
              222,
              223,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              240,
              241,
              242,
              243,
              253,
              254)
        )
    )
    namedValues = NamedValues(
        *(("acm", 9),
          ("cl1", 20),
          ("cl2", 22),
          ("cl2Eth", 23),
          ("cl3", 24),
          ("cl3Eth", 25),
          ("clEth", 21),
          ("empty", 2),
          ("hs12", 127),
          ("hs2", 120),
          ("hs3", 121),
          ("hs4", 132),
          ("hs4E1", 131),
          ("hs4T1", 130),
          ("hs6", 126),
          ("hs703", 123),
          ("hsQM", 124),
          ("hsq", 122),
          ("hsqN", 125),
          ("hsr", 156),
          ("hss", 157),
          ("hss12", 242),
          ("hss6", 243),
          ("hsu", 150),
          ("hsu1", 158),
          ("hsu12", 240),
          ("hsu6", 241),
          ("hsuI", 155),
          ("ls12", 159),
          ("ls2A2Ts", 116),
          ("ls2AATandTSdm", 115),
          ("ls2ACcittX50", 113),
          ("ls2ACcittX58", 114),
          ("ls2ATandTSdm", 112),
          ("ls2CcittX50", 110),
          ("ls2CcittX58", 111),
          ("ls2M", 117),
          ("ls6", 160),
          ("ls6V1EandM", 161),
          ("ls6V1Fxo", 162),
          ("ls6V1Fxs", 163),
          ("ls6V2EandM", 164),
          ("ls6V2Fxo", 165),
          ("ls6V2Fxs", 166),
          ("ls6VfEandM", 167),
          ("ls6VfFxo", 168),
          ("ls6VfFxs", 169),
          ("mPh1", 31),
          ("mPh1E1DSU", 35),
          ("mPh1E1LTU", 36),
          ("mPh1T1CSU", 34),
          ("mPh1T1DSU", 33),
          ("mPh3", 32),
          ("mPl3", 61),
          ("mPl6", 60),
          ("mPv4", 72),
          ("mbeA", 151),
          ("mbeB", 152),
          ("mbeU", 153),
          ("mhs1DDS", 184),
          ("mhs1G703", 183),
          ("mhs1V24", 187),
          ("mhs1V35", 182),
          ("mhs1V36", 181),
          ("mhs1X21", 186),
          ("mhs2e1", 195),
          ("mhs2t1", 196),
          ("mhs3", 185),
          ("mhs4", 188),
          ("mhsE1Hs", 189),
          ("mhsHy2e1", 197),
          ("mhsHy2t1", 198),
          ("mhsHyE1Hs", 191),
          ("mhsHyT1Hs", 192),
          ("mhsPriE1", 222),
          ("mhsPriT1", 223),
          ("mhsS", 220),
          ("mhsT1Hs", 190),
          ("mhsU", 221),
          ("ml20", 97),
          ("mlfHybE12", 199),
          ("mlfHybE1Hs", 193),
          ("mlfHybT12", 204),
          ("mlfHybT1Hs", 194),
          ("mls3", 201),
          ("mls6", 200),
          ("mtMl1E1DSU", 102),
          ("mtMl1E1DSUfb", 106),
          ("mtMl1E1LTU", 103),
          ("mtMl1E1LTUfb", 107),
          ("mtMl1T1CSU", 101),
          ("mtMl1T1CSUfb", 105),
          ("mtMl1T1DSU", 100),
          ("mtMl1T1DSUfb", 104),
          ("mtMl2E1", 109),
          ("mtMl2T1", 108),
          ("mtMl4E1", 99),
          ("mtMl4T1", 98),
          ("mtMlE1Fiber", 91),
          ("mtMlE1FiberFb", 93),
          ("mtMlF2E1", 89),
          ("mtMlF2T1", 88),
          ("mtMlT1Fiber", 90),
          ("mtMlT1FiberFb", 92),
          ("mtmlH1E1", 95),
          ("mtmlHE1", 94),
          ("mtmlHSE1", 96),
          ("mtvc2", 148),
          ("mvc4", 210),
          ("mvc4PbxE1", 211),
          ("mvc4PbxE1Slave", 214),
          ("mvc4PbxT1Csu", 213),
          ("mvc4PbxT1Dsu", 212),
          ("mvc4PbxT1Slave", 215),
          ("mvg1Lan", 253),
          ("mvg2Lan", 254),
          ("ps100W", 11),
          ("ps60W", 10),
          ("tre", 154),
          ("unknown", 1),
          ("vc12EandM", 230),
          ("vc12Fxo", 231),
          ("vc12Fxs", 232),
          ("vc26EandM", 147),
          ("vc2EandM", 140),
          ("vc2Fxo1", 142),
          ("vc2Fxo2", 144),
          ("vc2Fxo3", 146),
          ("vc2Fxs1Plar", 141),
          ("vc2Fxs2", 143),
          ("vc2Fxs3", 145),
          ("vc2R2Fxs", 149),
          ("vc3EandM", 170),
          ("vc3Fxo", 171),
          ("vc3Fxs", 172),
          ("vc6AgFxo", 236),
          ("vc6AgFxs", 237),
          ("vc6EandM", 176),
          ("vc6Fxo", 177),
          ("vc6Fxs", 178),
          ("vc6aEandM", 233),
          ("vc6aFxo", 234),
          ("vc6aFxs", 235),
          ("vcPbx", 173),
          ("vcPbxE1", 175),
          ("vcPbxT1", 174),
          ("vcq", 179),
          ("vf3EandM", 80),
          ("vf3Fxo", 82),
          ("vf3Fxs", 81),
          ("vfPbx", 83),
          ("vfPbxE1", 85),
          ("vfPbxT1", 84))
    )


_MdlSInstCardType_Type.__name__ = "Integer32"
_MdlSInstCardType_Object = MibTableColumn
mdlSInstCardType = _MdlSInstCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 2),
    _MdlSInstCardType_Type()
)
mdlSInstCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSInstCardType.setStatus("mandatory")


class _MdlSHwVersion_Type(DisplayString):
    """Custom type mdlSHwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSHwVersion_Type.__name__ = "DisplayString"
_MdlSHwVersion_Object = MibTableColumn
mdlSHwVersion = _MdlSHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 3),
    _MdlSHwVersion_Type()
)
mdlSHwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSHwVersion.setStatus("mandatory")


class _MdlSSwVersion_Type(DisplayString):
    """Custom type mdlSSwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSSwVersion_Type.__name__ = "DisplayString"
_MdlSSwVersion_Object = MibTableColumn
mdlSSwVersion = _MdlSSwVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 4),
    _MdlSSwVersion_Type()
)
mdlSSwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSSwVersion.setStatus("mandatory")


class _MdlSAlrStatus_Type(Integer32):
    """Custom type mdlSAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSAlrStatus_Type.__name__ = "Integer32"
_MdlSAlrStatus_Object = MibTableColumn
mdlSAlrStatus = _MdlSAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 5),
    _MdlSAlrStatus_Type()
)
mdlSAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrStatus.setStatus("mandatory")


class _MdlSAlrStatusAll_Type(Integer32):
    """Custom type mdlSAlrStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSAlrStatusAll_Type.__name__ = "Integer32"
_MdlSAlrStatusAll_Object = MibTableColumn
mdlSAlrStatusAll = _MdlSAlrStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 6),
    _MdlSAlrStatusAll_Type()
)
mdlSAlrStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrStatusAll.setStatus("mandatory")


class _MdlSMaskedAlrStat_Type(Integer32):
    """Custom type mdlSMaskedAlrStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSMaskedAlrStat_Type.__name__ = "Integer32"
_MdlSMaskedAlrStat_Object = MibTableColumn
mdlSMaskedAlrStat = _MdlSMaskedAlrStat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 7),
    _MdlSMaskedAlrStat_Type()
)
mdlSMaskedAlrStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSMaskedAlrStat.setStatus("mandatory")


class _MdlSMaskedAlrStatAll_Type(Integer32):
    """Custom type mdlSMaskedAlrStatAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSMaskedAlrStatAll_Type.__name__ = "Integer32"
_MdlSMaskedAlrStatAll_Object = MibTableColumn
mdlSMaskedAlrStatAll = _MdlSMaskedAlrStatAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 8),
    _MdlSMaskedAlrStatAll_Type()
)
mdlSMaskedAlrStatAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSMaskedAlrStatAll.setStatus("mandatory")


class _MdlSTstStatusAll_Type(Integer32):
    """Custom type mdlSTstStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSTstStatusAll_Type.__name__ = "Integer32"
_MdlSTstStatusAll_Object = MibTableColumn
mdlSTstStatusAll = _MdlSTstStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 9),
    _MdlSTstStatusAll_Type()
)
mdlSTstStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSTstStatusAll.setStatus("mandatory")


class _MdlSClearAlrCmd_Type(Integer32):
    """Custom type mdlSClearAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSClearAlrCmd_Type.__name__ = "Integer32"
_MdlSClearAlrCmd_Object = MibTableColumn
mdlSClearAlrCmd = _MdlSClearAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 10),
    _MdlSClearAlrCmd_Type()
)
mdlSClearAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSClearAlrCmd.setStatus("mandatory")


class _MdlSClearAllAlrCmd_Type(Integer32):
    """Custom type mdlSClearAllAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSClearAllAlrCmd_Type.__name__ = "Integer32"
_MdlSClearAllAlrCmd_Object = MibTableColumn
mdlSClearAllAlrCmd = _MdlSClearAllAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 11),
    _MdlSClearAllAlrCmd_Type()
)
mdlSClearAllAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSClearAllAlrCmd.setStatus("mandatory")
_MdlSAlrTable_Object = MibTable
mdlSAlrTable = _MdlSAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2)
)
if mibBuilder.loadTexts:
    mdlSAlrTable.setStatus("mandatory")
_MdlSAlrEntry_Object = MibTableRow
mdlSAlrEntry = _MdlSAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1)
)
mdlSAlrEntry.setIndexNames(
    (0, "DACS-MIB", "mdlSAlrSltIdx"),
    (0, "DACS-MIB", "mdlSAlrIdx"),
)
if mibBuilder.loadTexts:
    mdlSAlrEntry.setStatus("mandatory")
_MdlSAlrIdx_Type = Integer32
_MdlSAlrIdx_Object = MibTableColumn
mdlSAlrIdx = _MdlSAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 1),
    _MdlSAlrIdx_Type()
)
mdlSAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrIdx.setStatus("mandatory")


class _MdlSAlrSltIdx_Type(Integer32):
    """Custom type mdlSAlrSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlSAlrSltIdx_Type.__name__ = "Integer32"
_MdlSAlrSltIdx_Object = MibTableColumn
mdlSAlrSltIdx = _MdlSAlrSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 2),
    _MdlSAlrSltIdx_Type()
)
mdlSAlrSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrSltIdx.setStatus("mandatory")


class _MdlSAlrCodeDescription_Type(DisplayString):
    """Custom type mdlSAlrCodeDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSAlrCodeDescription_Type.__name__ = "DisplayString"
_MdlSAlrCodeDescription_Object = MibTableColumn
mdlSAlrCodeDescription = _MdlSAlrCodeDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 3),
    _MdlSAlrCodeDescription_Type()
)
mdlSAlrCodeDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrCodeDescription.setStatus("mandatory")
_MdlSAlrCode_Type = Integer32
_MdlSAlrCode_Object = MibTableColumn
mdlSAlrCode = _MdlSAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 4),
    _MdlSAlrCode_Type()
)
mdlSAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrCode.setStatus("mandatory")


class _MdlSAlrSeverity_Type(Integer32):
    """Custom type mdlSAlrSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_MdlSAlrSeverity_Type.__name__ = "Integer32"
_MdlSAlrSeverity_Object = MibTableColumn
mdlSAlrSeverity = _MdlSAlrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 5),
    _MdlSAlrSeverity_Type()
)
mdlSAlrSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrSeverity.setStatus("mandatory")


class _MdlSAlrState_Type(Integer32):
    """Custom type mdlSAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrState_Type.__name__ = "Integer32"
_MdlSAlrState_Object = MibTableColumn
mdlSAlrState = _MdlSAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 6),
    _MdlSAlrState_Type()
)
mdlSAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrState.setStatus("mandatory")
_MdlSAlrCounter_Type = Integer32
_MdlSAlrCounter_Object = MibTableColumn
mdlSAlrCounter = _MdlSAlrCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 7),
    _MdlSAlrCounter_Type()
)
mdlSAlrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrCounter.setStatus("mandatory")


class _MdlSAlrMask_Type(Integer32):
    """Custom type mdlSAlrMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrMask_Type.__name__ = "Integer32"
_MdlSAlrMask_Object = MibTableColumn
mdlSAlrMask = _MdlSAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 8),
    _MdlSAlrMask_Type()
)
mdlSAlrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrMask.setStatus("mandatory")


class _MdlSAlrInvert_Type(Integer32):
    """Custom type mdlSAlrInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrInvert_Type.__name__ = "Integer32"
_MdlSAlrInvert_Object = MibTableColumn
mdlSAlrInvert = _MdlSAlrInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 9),
    _MdlSAlrInvert_Type()
)
mdlSAlrInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrInvert.setStatus("mandatory")
_CnfgMdlGen_ObjectIdentity = ObjectIdentity
cnfgMdlGen = _CnfgMdlGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2)
)
_MdlCPrgTable_Object = MibTable
mdlCPrgTable = _MdlCPrgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    mdlCPrgTable.setStatus("mandatory")
_MdlCPrgEntry_Object = MibTableRow
mdlCPrgEntry = _MdlCPrgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1)
)
mdlCPrgEntry.setIndexNames(
    (0, "DACS-MIB", "mdlCCnfgIdx"),
    (0, "DACS-MIB", "mdlCSltIdx"),
)
if mibBuilder.loadTexts:
    mdlCPrgEntry.setStatus("mandatory")


class _MdlCCnfgIdx_Type(Integer32):
    """Custom type mdlCCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_MdlCCnfgIdx_Type.__name__ = "Integer32"
_MdlCCnfgIdx_Object = MibTableColumn
mdlCCnfgIdx = _MdlCCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 1),
    _MdlCCnfgIdx_Type()
)
mdlCCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCCnfgIdx.setStatus("mandatory")


class _MdlCSltIdx_Type(Integer32):
    """Custom type mdlCSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlCSltIdx_Type.__name__ = "Integer32"
_MdlCSltIdx_Object = MibTableColumn
mdlCSltIdx = _MdlCSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 2),
    _MdlCSltIdx_Type()
)
mdlCSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCSltIdx.setStatus("mandatory")


class _MdlCPrgCardType_Type(Integer32):
    """Custom type mdlCPrgCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              20,
              21,
              22,
              23,
              24,
              25,
              31,
              32,
              33,
              34,
              35,
              36,
              60,
              80,
              81,
              82,
              83,
              84,
              85,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              130,
              131,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              204,
              210,
              211,
              212,
              213,
              214,
              215,
              220,
              221,
              222,
              223,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              240,
              241,
              242,
              243,
              253,
              254)
        )
    )
    namedValues = NamedValues(
        *(("acm", 9),
          ("cl1", 20),
          ("cl2", 22),
          ("cl2Eth", 23),
          ("cl3", 24),
          ("cl3Eth", 25),
          ("clEth", 21),
          ("empty", 2),
          ("hs12", 127),
          ("hs2", 120),
          ("hs3", 121),
          ("hs4E1", 131),
          ("hs4T1", 130),
          ("hs6", 126),
          ("hs703", 123),
          ("hsQM", 124),
          ("hsq", 122),
          ("hsqN", 125),
          ("hsr", 156),
          ("hss", 157),
          ("hss12", 242),
          ("hss6", 243),
          ("hsu", 150),
          ("hsu1", 158),
          ("hsu12", 240),
          ("hsu6", 241),
          ("hsuI", 155),
          ("ls12", 159),
          ("ls2A2Ts", 116),
          ("ls2AATandTSdm", 115),
          ("ls2ACcittX50", 113),
          ("ls2ACcittX58", 114),
          ("ls2ATandTSdm", 112),
          ("ls2CcittX50", 110),
          ("ls2CcittX58", 111),
          ("ls2M", 117),
          ("ls6", 160),
          ("ls6V1EandM", 161),
          ("ls6V1Fxo", 162),
          ("ls6V1Fxs", 163),
          ("ls6V2EandM", 164),
          ("ls6V2Fxo", 165),
          ("ls6V2Fxs", 166),
          ("ls6VfEandM", 167),
          ("ls6VfFxo", 168),
          ("ls6VfFxs", 169),
          ("mPh1", 31),
          ("mPh1E1DSU", 35),
          ("mPh1E1LTU", 36),
          ("mPh1T1CSU", 34),
          ("mPh1T1DSU", 33),
          ("mPh3", 32),
          ("mPl6", 60),
          ("mbeA", 151),
          ("mbeB", 152),
          ("mbeU", 153),
          ("mhs1DDS", 184),
          ("mhs1G703", 183),
          ("mhs1V24", 187),
          ("mhs1V35", 182),
          ("mhs1V36", 181),
          ("mhs1X21", 186),
          ("mhs2e1", 195),
          ("mhs2t1", 196),
          ("mhs3", 185),
          ("mhs4", 188),
          ("mhsE1Hs", 189),
          ("mhsHy2e1", 197),
          ("mhsHy2t1", 198),
          ("mhsHyE1Hs", 191),
          ("mhsHyT1Hs", 192),
          ("mhsPriE1", 222),
          ("mhsPriT1", 223),
          ("mhsS", 220),
          ("mhsT1Hs", 190),
          ("mhsU", 221),
          ("ml20", 97),
          ("mlfHybE12", 199),
          ("mlfHybE1Hs", 193),
          ("mlfHybT12", 204),
          ("mlfHybT1Hs", 194),
          ("mls3", 201),
          ("mls6", 200),
          ("mtMl1E1DSU", 102),
          ("mtMl1E1DSUfb", 106),
          ("mtMl1E1LTU", 103),
          ("mtMl1E1LTUfb", 107),
          ("mtMl1T1CSU", 101),
          ("mtMl1T1CSUfb", 105),
          ("mtMl1T1DSU", 100),
          ("mtMl1T1DSUfb", 104),
          ("mtMl2E1", 109),
          ("mtMl2T1", 108),
          ("mtMl4E1", 99),
          ("mtMl4T1", 98),
          ("mtMlE1Fiber", 91),
          ("mtMlE1FiberFb", 93),
          ("mtMlF2E1", 89),
          ("mtMlF2T1", 88),
          ("mtMlT1Fiber", 90),
          ("mtMlT1FiberFb", 92),
          ("mtmlH1E1", 95),
          ("mtmlHE1", 94),
          ("mtmlHSE1", 96),
          ("mtvc2", 148),
          ("mvc4", 210),
          ("mvc4PbxE1", 211),
          ("mvc4PbxE1Slave", 214),
          ("mvc4PbxT1Csu", 213),
          ("mvc4PbxT1Dsu", 212),
          ("mvc4PbxT1Slave", 215),
          ("mvg1Lan", 253),
          ("mvg2Lan", 254),
          ("ps110x100W", 13),
          ("ps110x60W", 12),
          ("ps180W", 16),
          ("ps220x100W", 15),
          ("ps220x60W", 14),
          ("ps48x100W", 11),
          ("ps48x60W", 10),
          ("tre", 154),
          ("unknown", 1),
          ("vc12EandM", 230),
          ("vc12Fxo", 231),
          ("vc12Fxs", 232),
          ("vc26EandM", 147),
          ("vc2EandM", 140),
          ("vc2Fxo1", 142),
          ("vc2Fxo2", 144),
          ("vc2Fxo3", 146),
          ("vc2Fxs1Plar", 141),
          ("vc2Fxs2", 143),
          ("vc2Fxs3", 145),
          ("vc2R2Fxs", 149),
          ("vc3EandM", 170),
          ("vc3Fxo", 171),
          ("vc3Fxs", 172),
          ("vc6AgFxo", 236),
          ("vc6AgFxs", 237),
          ("vc6EandM", 176),
          ("vc6Fxo", 177),
          ("vc6Fxs", 178),
          ("vc6aEandM", 233),
          ("vc6aFxo", 234),
          ("vc6aFxs", 235),
          ("vcPbx", 173),
          ("vcPbxE1", 175),
          ("vcPbxT1", 174),
          ("vcq", 179),
          ("vf3EandM", 80),
          ("vf3Fxo", 82),
          ("vf3Fxs", 81),
          ("vfPbx", 83),
          ("vfPbxE1", 85),
          ("vfPbxT1", 84))
    )


_MdlCPrgCardType_Type.__name__ = "Integer32"
_MdlCPrgCardType_Object = MibTableColumn
mdlCPrgCardType = _MdlCPrgCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 3),
    _MdlCPrgCardType_Type()
)
mdlCPrgCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCPrgCardType.setStatus("mandatory")
_MdlCNoOfExternPrt_Type = Integer32
_MdlCNoOfExternPrt_Object = MibTableColumn
mdlCNoOfExternPrt = _MdlCNoOfExternPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 4),
    _MdlCNoOfExternPrt_Type()
)
mdlCNoOfExternPrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCNoOfExternPrt.setStatus("mandatory")
_MdlCNoOfInternPrt_Type = Integer32
_MdlCNoOfInternPrt_Object = MibTableColumn
mdlCNoOfInternPrt = _MdlCNoOfInternPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 5),
    _MdlCNoOfInternPrt_Type()
)
mdlCNoOfInternPrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCNoOfInternPrt.setStatus("mandatory")
_CmprMdlGen_ObjectIdentity = ObjectIdentity
cmprMdlGen = _CmprMdlGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3)
)
_MdlCmprTable_Object = MibTable
mdlCmprTable = _MdlCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1)
)
if mibBuilder.loadTexts:
    mdlCmprTable.setStatus("mandatory")
_MdlCmprEntry_Object = MibTableRow
mdlCmprEntry = _MdlCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1)
)
mdlCmprEntry.setIndexNames(
    (0, "DACS-MIB", "mdlCmprTypIdx"),
    (0, "DACS-MIB", "mdlCmprCnfgIdx"),
    (0, "DACS-MIB", "mdlCmprVersion"),
    (0, "DACS-MIB", "mdlCmprSltIdx"),
)
if mibBuilder.loadTexts:
    mdlCmprEntry.setStatus("mandatory")
_MdlCmprTypIdx_Type = Integer32
_MdlCmprTypIdx_Object = MibTableColumn
mdlCmprTypIdx = _MdlCmprTypIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 1),
    _MdlCmprTypIdx_Type()
)
mdlCmprTypIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCmprTypIdx.setStatus("mandatory")
_MdlCmprCnfgIdx_Type = Integer32
_MdlCmprCnfgIdx_Object = MibTableColumn
mdlCmprCnfgIdx = _MdlCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 2),
    _MdlCmprCnfgIdx_Type()
)
mdlCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCmprCnfgIdx.setStatus("mandatory")
_MdlCmprVersion_Type = Integer32
_MdlCmprVersion_Object = MibTableColumn
mdlCmprVersion = _MdlCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 3),
    _MdlCmprVersion_Type()
)
mdlCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCmprVersion.setStatus("mandatory")


class _MdlCmprSltIdx_Type(Integer32):
    """Custom type mdlCmprSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlCmprSltIdx_Type.__name__ = "Integer32"
_MdlCmprSltIdx_Object = MibTableColumn
mdlCmprSltIdx = _MdlCmprSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 4),
    _MdlCmprSltIdx_Type()
)
mdlCmprSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCmprSltIdx.setStatus("mandatory")
_MdlCmprObj_Type = OctetString
_MdlCmprObj_Object = MibTableColumn
mdlCmprObj = _MdlCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 5),
    _MdlCmprObj_Type()
)
mdlCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCmprObj.setStatus("mandatory")
_MdlAlarmsCmprTable_Object = MibTable
mdlAlarmsCmprTable = _MdlAlarmsCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2)
)
if mibBuilder.loadTexts:
    mdlAlarmsCmprTable.setStatus("mandatory")
_MdlAlarmsCmprEntry_Object = MibTableRow
mdlAlarmsCmprEntry = _MdlAlarmsCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1)
)
mdlAlarmsCmprEntry.setIndexNames(
    (0, "DACS-MIB", "mdlAlarmsCmprVersion"),
    (0, "DACS-MIB", "mdlAlarmsCmprAlarmSlot"),
    (0, "DACS-MIB", "mdlAlarmsCmprAlarmIdx"),
)
if mibBuilder.loadTexts:
    mdlAlarmsCmprEntry.setStatus("mandatory")
_MdlAlarmsCmprVersion_Type = Integer32
_MdlAlarmsCmprVersion_Object = MibTableColumn
mdlAlarmsCmprVersion = _MdlAlarmsCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 1),
    _MdlAlarmsCmprVersion_Type()
)
mdlAlarmsCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmsCmprVersion.setStatus("mandatory")
_MdlAlarmsCmprAlarmSlot_Type = Integer32
_MdlAlarmsCmprAlarmSlot_Object = MibTableColumn
mdlAlarmsCmprAlarmSlot = _MdlAlarmsCmprAlarmSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 2),
    _MdlAlarmsCmprAlarmSlot_Type()
)
mdlAlarmsCmprAlarmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmsCmprAlarmSlot.setStatus("mandatory")
_MdlAlarmsCmprAlarmIdx_Type = Integer32
_MdlAlarmsCmprAlarmIdx_Object = MibTableColumn
mdlAlarmsCmprAlarmIdx = _MdlAlarmsCmprAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 3),
    _MdlAlarmsCmprAlarmIdx_Type()
)
mdlAlarmsCmprAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmsCmprAlarmIdx.setStatus("mandatory")
_MdlAlarmsCmprObj_Type = OctetString
_MdlAlarmsCmprObj_Object = MibTableColumn
mdlAlarmsCmprObj = _MdlAlarmsCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 4),
    _MdlAlarmsCmprObj_Type()
)
mdlAlarmsCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlAlarmsCmprObj.setStatus("mandatory")
_PrtWanGen_ObjectIdentity = ObjectIdentity
prtWanGen = _PrtWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4)
)
_StatPrtGen_ObjectIdentity = ObjectIdentity
statPrtGen = _StatPrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1)
)
_PrtSInstTable_Object = MibTable
prtSInstTable = _PrtSInstTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1)
)
if mibBuilder.loadTexts:
    prtSInstTable.setStatus("mandatory")
_PrtSInstEntry_Object = MibTableRow
prtSInstEntry = _PrtSInstEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1)
)
prtSInstEntry.setIndexNames(
    (0, "DACS-MIB", "prtSInstSltIdx"),
    (0, "DACS-MIB", "prtSInstPrtIdx"),
)
if mibBuilder.loadTexts:
    prtSInstEntry.setStatus("mandatory")


class _PrtSInstSltIdx_Type(Integer32):
    """Custom type prtSInstSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtSInstSltIdx_Type.__name__ = "Integer32"
_PrtSInstSltIdx_Object = MibTableColumn
prtSInstSltIdx = _PrtSInstSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 1),
    _PrtSInstSltIdx_Type()
)
prtSInstSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInstSltIdx.setStatus("mandatory")
_PrtSInstPrtIdx_Type = Integer32
_PrtSInstPrtIdx_Object = MibTableColumn
prtSInstPrtIdx = _PrtSInstPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 2),
    _PrtSInstPrtIdx_Type()
)
prtSInstPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInstPrtIdx.setStatus("mandatory")


class _PrtSInstPrtType_Type(Integer32):
    """Custom type prtSInstPrtType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("cl", 12),
          ("ethernet", 15),
          ("external", 2),
          ("highSpeedDDS", 9),
          ("highSpeedG703", 8),
          ("highSpeedV24", 5),
          ("highSpeedV35", 4),
          ("highSpeedV36", 6),
          ("highSpeedX21", 7),
          ("internal", 3),
          ("isdns", 13),
          ("isdnu", 14),
          ("lowSpeed", 10),
          ("voice", 11),
          ("voiceS0", 16))
    )


_PrtSInstPrtType_Type.__name__ = "Integer32"
_PrtSInstPrtType_Object = MibTableColumn
prtSInstPrtType = _PrtSInstPrtType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 3),
    _PrtSInstPrtType_Type()
)
prtSInstPrtType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInstPrtType.setStatus("mandatory")
_PrtSInstIfIndex_Type = Integer32
_PrtSInstIfIndex_Object = MibTableColumn
prtSInstIfIndex = _PrtSInstIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 4),
    _PrtSInstIfIndex_Type()
)
prtSInstIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInstIfIndex.setStatus("mandatory")


class _PrtSActiveStatus_Type(Integer32):
    """Custom type prtSActiveStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notUsed", 2),
          ("offLine", 3),
          ("offLineRedundancy", 5),
          ("onLine", 4),
          ("onLineRedundancy", 6),
          ("unknown", 1))
    )


_PrtSActiveStatus_Type.__name__ = "Integer32"
_PrtSActiveStatus_Object = MibTableColumn
prtSActiveStatus = _PrtSActiveStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 5),
    _PrtSActiveStatus_Type()
)
prtSActiveStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSActiveStatus.setStatus("mandatory")


class _PrtSAlrStatus_Type(Integer32):
    """Custom type prtSAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_PrtSAlrStatus_Type.__name__ = "Integer32"
_PrtSAlrStatus_Object = MibTableColumn
prtSAlrStatus = _PrtSAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 6),
    _PrtSAlrStatus_Type()
)
prtSAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrStatus.setStatus("mandatory")


class _PrtSMaskedAlrStat_Type(Integer32):
    """Custom type prtSMaskedAlrStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_PrtSMaskedAlrStat_Type.__name__ = "Integer32"
_PrtSMaskedAlrStat_Object = MibTableColumn
prtSMaskedAlrStat = _PrtSMaskedAlrStat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 7),
    _PrtSMaskedAlrStat_Type()
)
prtSMaskedAlrStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSMaskedAlrStat.setStatus("mandatory")


class _PrtSClearAlrCmd_Type(Integer32):
    """Custom type prtSClearAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSClearAlrCmd_Type.__name__ = "Integer32"
_PrtSClearAlrCmd_Object = MibTableColumn
prtSClearAlrCmd = _PrtSClearAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 8),
    _PrtSClearAlrCmd_Type()
)
prtSClearAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSClearAlrCmd.setStatus("mandatory")
_PrtSTestMask_Type = Integer32
_PrtSTestMask_Object = MibTableColumn
prtSTestMask = _PrtSTestMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 9),
    _PrtSTestMask_Type()
)
prtSTestMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSTestMask.setStatus("mandatory")


class _PrtSTstCmd_Type(Integer32):
    """Custom type prtSTstCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("allDlciLocalLoop", 11),
          ("allDlciRemoteLoop", 13),
          ("backwardToneInject", 18),
          ("bert", 8),
          ("bertAndRemLoopOnRemUnit", 15),
          ("block", 17),
          ("dlciLocalLoop", 10),
          ("dlciRemoteLoop", 12),
          ("extInitLocalLoop", 14),
          ("ft1Enable", 21),
          ("lb1", 23),
          ("lb2", 24),
          ("lbbd", 22),
          ("llb", 19),
          ("locAndRemMainLoops", 4),
          ("localLoop", 2),
          ("none", 1),
          ("remLoopOnExtUnit", 7),
          ("remLoopOnRemUnit", 16),
          ("remoteAnalogLoop", 5),
          ("remoteDigitalLoop", 6),
          ("remoteLoop", 3),
          ("rlb", 20),
          ("toneInjection", 9))
    )


_PrtSTstCmd_Type.__name__ = "Integer32"
_PrtSTstCmd_Object = MibTableColumn
prtSTstCmd = _PrtSTstCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 10),
    _PrtSTstCmd_Type()
)
prtSTstCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSTstCmd.setStatus("mandatory")
_PrtSTstDuration_Type = Integer32
_PrtSTstDuration_Object = MibTableColumn
prtSTstDuration = _PrtSTstDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 11),
    _PrtSTstDuration_Type()
)
prtSTstDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSTstDuration.setStatus("mandatory")


class _PrtSBertClrCmd_Type(Integer32):
    """Custom type prtSBertClrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSBertClrCmd_Type.__name__ = "Integer32"
_PrtSBertClrCmd_Object = MibTableColumn
prtSBertClrCmd = _PrtSBertClrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 12),
    _PrtSBertClrCmd_Type()
)
prtSBertClrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSBertClrCmd.setStatus("mandatory")
_PrtSBertTstRslt_Type = Integer32
_PrtSBertTstRslt_Object = MibTableColumn
prtSBertTstRslt = _PrtSBertTstRslt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 13),
    _PrtSBertTstRslt_Type()
)
prtSBertTstRslt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSBertTstRslt.setStatus("mandatory")


class _PrtSInterfaceType_Type(DisplayString):
    """Custom type prtSInterfaceType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtSInterfaceType_Type.__name__ = "DisplayString"
_PrtSInterfaceType_Object = MibTableColumn
prtSInterfaceType = _PrtSInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 14),
    _PrtSInterfaceType_Type()
)
prtSInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInterfaceType.setStatus("mandatory")
_PrtSParamStatus_Type = OctetString
_PrtSParamStatus_Object = MibTableColumn
prtSParamStatus = _PrtSParamStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 15),
    _PrtSParamStatus_Type()
)
prtSParamStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSParamStatus.setStatus("mandatory")
_PrtSAlrTable_Object = MibTable
prtSAlrTable = _PrtSAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2)
)
if mibBuilder.loadTexts:
    prtSAlrTable.setStatus("mandatory")
_PrtSAlrEntry_Object = MibTableRow
prtSAlrEntry = _PrtSAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1)
)
prtSAlrEntry.setIndexNames(
    (0, "DACS-MIB", "prtSAlrSltIdx"),
    (0, "DACS-MIB", "prtSAlrPrtIdx"),
    (0, "DACS-MIB", "prtSAlrIdx"),
)
if mibBuilder.loadTexts:
    prtSAlrEntry.setStatus("mandatory")
_PrtSAlrIdx_Type = Integer32
_PrtSAlrIdx_Object = MibTableColumn
prtSAlrIdx = _PrtSAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 1),
    _PrtSAlrIdx_Type()
)
prtSAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrIdx.setStatus("mandatory")


class _PrtSAlrSltIdx_Type(Integer32):
    """Custom type prtSAlrSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_PrtSAlrSltIdx_Type.__name__ = "Integer32"
_PrtSAlrSltIdx_Object = MibTableColumn
prtSAlrSltIdx = _PrtSAlrSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 2),
    _PrtSAlrSltIdx_Type()
)
prtSAlrSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrSltIdx.setStatus("mandatory")
_PrtSAlrPrtIdx_Type = Integer32
_PrtSAlrPrtIdx_Object = MibTableColumn
prtSAlrPrtIdx = _PrtSAlrPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 3),
    _PrtSAlrPrtIdx_Type()
)
prtSAlrPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrPrtIdx.setStatus("mandatory")


class _PrtSAlrCodeDescription_Type(DisplayString):
    """Custom type prtSAlrCodeDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtSAlrCodeDescription_Type.__name__ = "DisplayString"
_PrtSAlrCodeDescription_Object = MibTableColumn
prtSAlrCodeDescription = _PrtSAlrCodeDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 4),
    _PrtSAlrCodeDescription_Type()
)
prtSAlrCodeDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrCodeDescription.setStatus("mandatory")
_PrtSAlrCode_Type = Integer32
_PrtSAlrCode_Object = MibTableColumn
prtSAlrCode = _PrtSAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 5),
    _PrtSAlrCode_Type()
)
prtSAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrCode.setStatus("mandatory")


class _PrtSAlrSeverity_Type(Integer32):
    """Custom type prtSAlrSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_PrtSAlrSeverity_Type.__name__ = "Integer32"
_PrtSAlrSeverity_Object = MibTableColumn
prtSAlrSeverity = _PrtSAlrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 6),
    _PrtSAlrSeverity_Type()
)
prtSAlrSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrSeverity.setStatus("mandatory")


class _PrtSAlrState_Type(Integer32):
    """Custom type prtSAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlrState_Type.__name__ = "Integer32"
_PrtSAlrState_Object = MibTableColumn
prtSAlrState = _PrtSAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 7),
    _PrtSAlrState_Type()
)
prtSAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrState.setStatus("mandatory")
_PrtSAlrCounter_Type = Integer32
_PrtSAlrCounter_Object = MibTableColumn
prtSAlrCounter = _PrtSAlrCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 8),
    _PrtSAlrCounter_Type()
)
prtSAlrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrCounter.setStatus("mandatory")


class _PrtSAlrMask_Type(Integer32):
    """Custom type prtSAlrMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlrMask_Type.__name__ = "Integer32"
_PrtSAlrMask_Object = MibTableColumn
prtSAlrMask = _PrtSAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 9),
    _PrtSAlrMask_Type()
)
prtSAlrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrMask.setStatus("mandatory")


class _PrtSAlrInvert_Type(Integer32):
    """Custom type prtSAlrInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlrInvert_Type.__name__ = "Integer32"
_PrtSAlrInvert_Object = MibTableColumn
prtSAlrInvert = _PrtSAlrInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 10),
    _PrtSAlrInvert_Type()
)
prtSAlrInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrInvert.setStatus("mandatory")
_StatisPrtGen_ObjectIdentity = ObjectIdentity
statisPrtGen = _StatisPrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3)
)
_PrtFrStatis_ObjectIdentity = ObjectIdentity
prtFrStatis = _PrtFrStatis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1)
)
_PrtFrStatisTable_Object = MibTable
prtFrStatisTable = _PrtFrStatisTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    prtFrStatisTable.setStatus("mandatory")
_PrtFrStatisEntry_Object = MibTableRow
prtFrStatisEntry = _PrtFrStatisEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1)
)
prtFrStatisEntry.setIndexNames(
    (0, "DACS-MIB", "prtFrStatisSltIdx"),
    (0, "DACS-MIB", "prtFrStatisPrtIdx"),
    (0, "DACS-MIB", "prtFrStatisInvIdx"),
)
if mibBuilder.loadTexts:
    prtFrStatisEntry.setStatus("mandatory")


class _PrtFrStatisSltIdx_Type(Integer32):
    """Custom type prtFrStatisSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtFrStatisSltIdx_Type.__name__ = "Integer32"
_PrtFrStatisSltIdx_Object = MibTableColumn
prtFrStatisSltIdx = _PrtFrStatisSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 1),
    _PrtFrStatisSltIdx_Type()
)
prtFrStatisSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrStatisSltIdx.setStatus("mandatory")


class _PrtFrStatisPrtIdx_Type(Integer32):
    """Custom type prtFrStatisPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtFrStatisPrtIdx_Type.__name__ = "Integer32"
_PrtFrStatisPrtIdx_Object = MibTableColumn
prtFrStatisPrtIdx = _PrtFrStatisPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 2),
    _PrtFrStatisPrtIdx_Type()
)
prtFrStatisPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrStatisPrtIdx.setStatus("mandatory")


class _PrtFrStatisInvIdx_Type(Integer32):
    """Custom type prtFrStatisInvIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentInv", 1),
          ("last", 2))
    )


_PrtFrStatisInvIdx_Type.__name__ = "Integer32"
_PrtFrStatisInvIdx_Object = MibTableColumn
prtFrStatisInvIdx = _PrtFrStatisInvIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 3),
    _PrtFrStatisInvIdx_Type()
)
prtFrStatisInvIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrStatisInvIdx.setStatus("mandatory")


class _PrtFrTimeElapsed_Type(Integer32):
    """Custom type prtFrTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_PrtFrTimeElapsed_Type.__name__ = "Integer32"
_PrtFrTimeElapsed_Object = MibTableColumn
prtFrTimeElapsed = _PrtFrTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 4),
    _PrtFrTimeElapsed_Type()
)
prtFrTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTimeElapsed.setStatus("mandatory")
_PrtFrRxTotalFrames_Type = Counter32
_PrtFrRxTotalFrames_Object = MibTableColumn
prtFrRxTotalFrames = _PrtFrRxTotalFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 5),
    _PrtFrRxTotalFrames_Type()
)
prtFrRxTotalFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxTotalFrames.setStatus("mandatory")
_PrtFrTxTotalFrames_Type = Counter32
_PrtFrTxTotalFrames_Object = MibTableColumn
prtFrTxTotalFrames = _PrtFrTxTotalFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 6),
    _PrtFrTxTotalFrames_Type()
)
prtFrTxTotalFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxTotalFrames.setStatus("mandatory")
_PrtFrRxTotalBytes_Type = Counter32
_PrtFrRxTotalBytes_Object = MibTableColumn
prtFrRxTotalBytes = _PrtFrRxTotalBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 7),
    _PrtFrRxTotalBytes_Type()
)
prtFrRxTotalBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxTotalBytes.setStatus("mandatory")
_PrtFrTxTotalBytes_Type = Counter32
_PrtFrTxTotalBytes_Object = MibTableColumn
prtFrTxTotalBytes = _PrtFrTxTotalBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 8),
    _PrtFrTxTotalBytes_Type()
)
prtFrTxTotalBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxTotalBytes.setStatus("mandatory")
_PrtFrRxMngFrames_Type = Counter32
_PrtFrRxMngFrames_Object = MibTableColumn
prtFrRxMngFrames = _PrtFrRxMngFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 9),
    _PrtFrRxMngFrames_Type()
)
prtFrRxMngFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxMngFrames.setStatus("mandatory")
_PrtFrTxMngFrames_Type = Counter32
_PrtFrTxMngFrames_Object = MibTableColumn
prtFrTxMngFrames = _PrtFrTxMngFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 10),
    _PrtFrTxMngFrames_Type()
)
prtFrTxMngFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxMngFrames.setStatus("mandatory")
_PrtFrRxDeFrames_Type = Counter32
_PrtFrRxDeFrames_Object = MibTableColumn
prtFrRxDeFrames = _PrtFrRxDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 11),
    _PrtFrRxDeFrames_Type()
)
prtFrRxDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxDeFrames.setStatus("mandatory")
_PrtFrTxDeFrames_Type = Counter32
_PrtFrTxDeFrames_Object = MibTableColumn
prtFrTxDeFrames = _PrtFrTxDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 12),
    _PrtFrTxDeFrames_Type()
)
prtFrTxDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxDeFrames.setStatus("mandatory")
_PrtFrRxDcrdCongDeFr_Type = Counter32
_PrtFrRxDcrdCongDeFr_Object = MibTableColumn
prtFrRxDcrdCongDeFr = _PrtFrRxDcrdCongDeFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 13),
    _PrtFrRxDcrdCongDeFr_Type()
)
prtFrRxDcrdCongDeFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxDcrdCongDeFr.setStatus("mandatory")
_PrtFrTxDcrdCongDeFr_Type = Counter32
_PrtFrTxDcrdCongDeFr_Object = MibTableColumn
prtFrTxDcrdCongDeFr = _PrtFrTxDcrdCongDeFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 14),
    _PrtFrTxDcrdCongDeFr_Type()
)
prtFrTxDcrdCongDeFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxDcrdCongDeFr.setStatus("mandatory")
_PrtFrRxDcrdCongAllFr_Type = Counter32
_PrtFrRxDcrdCongAllFr_Object = MibTableColumn
prtFrRxDcrdCongAllFr = _PrtFrRxDcrdCongAllFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 15),
    _PrtFrRxDcrdCongAllFr_Type()
)
prtFrRxDcrdCongAllFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxDcrdCongAllFr.setStatus("mandatory")
_PrtFrTxDcrdCongAllFr_Type = Counter32
_PrtFrTxDcrdCongAllFr_Object = MibTableColumn
prtFrTxDcrdCongAllFr = _PrtFrTxDcrdCongAllFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 16),
    _PrtFrTxDcrdCongAllFr_Type()
)
prtFrTxDcrdCongAllFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxDcrdCongAllFr.setStatus("mandatory")
_PrtFrRxFecn_Type = Counter32
_PrtFrRxFecn_Object = MibTableColumn
prtFrRxFecn = _PrtFrRxFecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 17),
    _PrtFrRxFecn_Type()
)
prtFrRxFecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxFecn.setStatus("mandatory")
_PrtFrTxFecn_Type = Counter32
_PrtFrTxFecn_Object = MibTableColumn
prtFrTxFecn = _PrtFrTxFecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 18),
    _PrtFrTxFecn_Type()
)
prtFrTxFecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxFecn.setStatus("mandatory")
_PrtFrRxBecn_Type = Counter32
_PrtFrRxBecn_Object = MibTableColumn
prtFrRxBecn = _PrtFrRxBecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 19),
    _PrtFrRxBecn_Type()
)
prtFrRxBecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxBecn.setStatus("mandatory")
_PrtFrTxBecn_Type = Counter32
_PrtFrTxBecn_Object = MibTableColumn
prtFrTxBecn = _PrtFrTxBecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 20),
    _PrtFrTxBecn_Type()
)
prtFrTxBecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxBecn.setStatus("mandatory")
_PrtFrRxBeViol_Type = Counter32
_PrtFrRxBeViol_Object = MibTableColumn
prtFrRxBeViol = _PrtFrRxBeViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 21),
    _PrtFrRxBeViol_Type()
)
prtFrRxBeViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxBeViol.setStatus("mandatory")
_PrtFrTxBeViol_Type = Counter32
_PrtFrTxBeViol_Object = MibTableColumn
prtFrTxBeViol = _PrtFrTxBeViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 22),
    _PrtFrTxBeViol_Type()
)
prtFrTxBeViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxBeViol.setStatus("mandatory")
_PrtFrRxBcViol_Type = Counter32
_PrtFrRxBcViol_Object = MibTableColumn
prtFrRxBcViol = _PrtFrRxBcViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 23),
    _PrtFrRxBcViol_Type()
)
prtFrRxBcViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxBcViol.setStatus("mandatory")
_PrtFrTxBcViol_Type = Counter32
_PrtFrTxBcViol_Object = MibTableColumn
prtFrTxBcViol = _PrtFrTxBcViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 24),
    _PrtFrTxBcViol_Type()
)
prtFrTxBcViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxBcViol.setStatus("mandatory")
_PrtCrStatis_ObjectIdentity = ObjectIdentity
prtCrStatis = _PrtCrStatis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2)
)
_PrtCrStatisTable_Object = MibTable
prtCrStatisTable = _PrtCrStatisTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    prtCrStatisTable.setStatus("mandatory")
_PrtCrStatisEntry_Object = MibTableRow
prtCrStatisEntry = _PrtCrStatisEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1)
)
prtCrStatisEntry.setIndexNames(
    (0, "DACS-MIB", "prtCrStatisSltIdx"),
    (0, "DACS-MIB", "prtCrStatisPrtIdx"),
    (0, "DACS-MIB", "prtCrStatisInvIdx"),
)
if mibBuilder.loadTexts:
    prtCrStatisEntry.setStatus("mandatory")


class _PrtCrStatisSltIdx_Type(Integer32):
    """Custom type prtCrStatisSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtCrStatisSltIdx_Type.__name__ = "Integer32"
_PrtCrStatisSltIdx_Object = MibTableColumn
prtCrStatisSltIdx = _PrtCrStatisSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 1),
    _PrtCrStatisSltIdx_Type()
)
prtCrStatisSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrStatisSltIdx.setStatus("mandatory")


class _PrtCrStatisPrtIdx_Type(Integer32):
    """Custom type prtCrStatisPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtCrStatisPrtIdx_Type.__name__ = "Integer32"
_PrtCrStatisPrtIdx_Object = MibTableColumn
prtCrStatisPrtIdx = _PrtCrStatisPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 2),
    _PrtCrStatisPrtIdx_Type()
)
prtCrStatisPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrStatisPrtIdx.setStatus("mandatory")


class _PrtCrStatisInvIdx_Type(Integer32):
    """Custom type prtCrStatisInvIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentInv", 1),
          ("last", 2))
    )


_PrtCrStatisInvIdx_Type.__name__ = "Integer32"
_PrtCrStatisInvIdx_Object = MibTableColumn
prtCrStatisInvIdx = _PrtCrStatisInvIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 3),
    _PrtCrStatisInvIdx_Type()
)
prtCrStatisInvIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrStatisInvIdx.setStatus("mandatory")


class _PrtCrTimeElapsed_Type(Integer32):
    """Custom type prtCrTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_PrtCrTimeElapsed_Type.__name__ = "Integer32"
_PrtCrTimeElapsed_Object = MibTableColumn
prtCrTimeElapsed = _PrtCrTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 4),
    _PrtCrTimeElapsed_Type()
)
prtCrTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrTimeElapsed.setStatus("mandatory")
_PrtCrRxTotalCells_Type = Counter32
_PrtCrRxTotalCells_Object = MibTableColumn
prtCrRxTotalCells = _PrtCrRxTotalCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 5),
    _PrtCrRxTotalCells_Type()
)
prtCrRxTotalCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrRxTotalCells.setStatus("mandatory")
_PrtCrTxTotalCells_Type = Counter32
_PrtCrTxTotalCells_Object = MibTableColumn
prtCrTxTotalCells = _PrtCrTxTotalCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 6),
    _PrtCrTxTotalCells_Type()
)
prtCrTxTotalCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrTxTotalCells.setStatus("mandatory")
_PrtCrRxDataCells_Type = Counter32
_PrtCrRxDataCells_Object = MibTableColumn
prtCrRxDataCells = _PrtCrRxDataCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 7),
    _PrtCrRxDataCells_Type()
)
prtCrRxDataCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrRxDataCells.setStatus("mandatory")
_PrtCrTxDataCells_Type = Counter32
_PrtCrTxDataCells_Object = MibTableColumn
prtCrTxDataCells = _PrtCrTxDataCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 8),
    _PrtCrTxDataCells_Type()
)
prtCrTxDataCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrTxDataCells.setStatus("mandatory")
_PrtDlciStatis_ObjectIdentity = ObjectIdentity
prtDlciStatis = _PrtDlciStatis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3)
)
_PrtDlciStatisTable_Object = MibTable
prtDlciStatisTable = _PrtDlciStatisTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1)
)
if mibBuilder.loadTexts:
    prtDlciStatisTable.setStatus("mandatory")
_PrtDlciStatisEntry_Object = MibTableRow
prtDlciStatisEntry = _PrtDlciStatisEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1)
)
prtDlciStatisEntry.setIndexNames(
    (0, "DACS-MIB", "prtDlciSltIdx"),
    (0, "DACS-MIB", "prtDlciPrtIdx"),
    (0, "DACS-MIB", "prtDlciIdx"),
)
if mibBuilder.loadTexts:
    prtDlciStatisEntry.setStatus("mandatory")


class _PrtDlciSltIdx_Type(Integer32):
    """Custom type prtDlciSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtDlciSltIdx_Type.__name__ = "Integer32"
_PrtDlciSltIdx_Object = MibTableColumn
prtDlciSltIdx = _PrtDlciSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 1),
    _PrtDlciSltIdx_Type()
)
prtDlciSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciSltIdx.setStatus("mandatory")


class _PrtDlciPrtIdx_Type(Integer32):
    """Custom type prtDlciPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtDlciPrtIdx_Type.__name__ = "Integer32"
_PrtDlciPrtIdx_Object = MibTableColumn
prtDlciPrtIdx = _PrtDlciPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 2),
    _PrtDlciPrtIdx_Type()
)
prtDlciPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciPrtIdx.setStatus("mandatory")


class _PrtDlciIdx_Type(Integer32):
    """Custom type prtDlciIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtDlciIdx_Type.__name__ = "Integer32"
_PrtDlciIdx_Object = MibTableColumn
prtDlciIdx = _PrtDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 3),
    _PrtDlciIdx_Type()
)
prtDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciIdx.setStatus("mandatory")
_PrtDlciRxDeFrames_Type = Counter32
_PrtDlciRxDeFrames_Object = MibTableColumn
prtDlciRxDeFrames = _PrtDlciRxDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 4),
    _PrtDlciRxDeFrames_Type()
)
prtDlciRxDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxDeFrames.setStatus("mandatory")
_PrtDlciTxDeFrames_Type = Counter32
_PrtDlciTxDeFrames_Object = MibTableColumn
prtDlciTxDeFrames = _PrtDlciTxDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 5),
    _PrtDlciTxDeFrames_Type()
)
prtDlciTxDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxDeFrames.setStatus("mandatory")
_PrtDlciRxDcrdCongDeFr_Type = Counter32
_PrtDlciRxDcrdCongDeFr_Object = MibTableColumn
prtDlciRxDcrdCongDeFr = _PrtDlciRxDcrdCongDeFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 6),
    _PrtDlciRxDcrdCongDeFr_Type()
)
prtDlciRxDcrdCongDeFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxDcrdCongDeFr.setStatus("mandatory")
_PrtDlciTxDcrdCongDeFr_Type = Counter32
_PrtDlciTxDcrdCongDeFr_Object = MibTableColumn
prtDlciTxDcrdCongDeFr = _PrtDlciTxDcrdCongDeFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 7),
    _PrtDlciTxDcrdCongDeFr_Type()
)
prtDlciTxDcrdCongDeFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxDcrdCongDeFr.setStatus("mandatory")
_PrtDlciRxDcrdCongAllFr_Type = Counter32
_PrtDlciRxDcrdCongAllFr_Object = MibTableColumn
prtDlciRxDcrdCongAllFr = _PrtDlciRxDcrdCongAllFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 8),
    _PrtDlciRxDcrdCongAllFr_Type()
)
prtDlciRxDcrdCongAllFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxDcrdCongAllFr.setStatus("mandatory")
_PrtDlciTxDcrdCongAllFr_Type = Counter32
_PrtDlciTxDcrdCongAllFr_Object = MibTableColumn
prtDlciTxDcrdCongAllFr = _PrtDlciTxDcrdCongAllFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 9),
    _PrtDlciTxDcrdCongAllFr_Type()
)
prtDlciTxDcrdCongAllFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxDcrdCongAllFr.setStatus("mandatory")
_PrtDlciTxFecn_Type = Counter32
_PrtDlciTxFecn_Object = MibTableColumn
prtDlciTxFecn = _PrtDlciTxFecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 10),
    _PrtDlciTxFecn_Type()
)
prtDlciTxFecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxFecn.setStatus("mandatory")
_PrtDlciTxBecn_Type = Counter32
_PrtDlciTxBecn_Object = MibTableColumn
prtDlciTxBecn = _PrtDlciTxBecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 11),
    _PrtDlciTxBecn_Type()
)
prtDlciTxBecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxBecn.setStatus("mandatory")
_PrtDlciRxBeViol_Type = Counter32
_PrtDlciRxBeViol_Object = MibTableColumn
prtDlciRxBeViol = _PrtDlciRxBeViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 12),
    _PrtDlciRxBeViol_Type()
)
prtDlciRxBeViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxBeViol.setStatus("mandatory")
_PrtDlciTxBeViol_Type = Counter32
_PrtDlciTxBeViol_Object = MibTableColumn
prtDlciTxBeViol = _PrtDlciTxBeViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 13),
    _PrtDlciTxBeViol_Type()
)
prtDlciTxBeViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxBeViol.setStatus("mandatory")
_PrtDlciRxBcViol_Type = Counter32
_PrtDlciRxBcViol_Object = MibTableColumn
prtDlciRxBcViol = _PrtDlciRxBcViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 14),
    _PrtDlciRxBcViol_Type()
)
prtDlciRxBcViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxBcViol.setStatus("mandatory")
_PrtDlciTxBcViol_Type = Counter32
_PrtDlciTxBcViol_Object = MibTableColumn
prtDlciTxBcViol = _PrtDlciTxBcViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 15),
    _PrtDlciTxBcViol_Type()
)
prtDlciTxBcViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxBcViol.setStatus("mandatory")
_PrtT1Statis_ObjectIdentity = ObjectIdentity
prtT1Statis = _PrtT1Statis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4)
)
_PrtT1FdlMsgTable_Object = MibTable
prtT1FdlMsgTable = _PrtT1FdlMsgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1)
)
if mibBuilder.loadTexts:
    prtT1FdlMsgTable.setStatus("mandatory")
_PrtT1FdlMsgEntry_Object = MibTableRow
prtT1FdlMsgEntry = _PrtT1FdlMsgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1)
)
prtT1FdlMsgEntry.setIndexNames(
    (0, "DACS-MIB", "prtT1FdlMsgSltIdx"),
    (0, "DACS-MIB", "prtT1FdlMsgPrtIdx"),
    (0, "DACS-MIB", "prtT1FdlMsgFdlTxRx"),
)
if mibBuilder.loadTexts:
    prtT1FdlMsgEntry.setStatus("mandatory")


class _PrtT1FdlMsgSltIdx_Type(Integer32):
    """Custom type prtT1FdlMsgSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtT1FdlMsgSltIdx_Type.__name__ = "Integer32"
_PrtT1FdlMsgSltIdx_Object = MibTableColumn
prtT1FdlMsgSltIdx = _PrtT1FdlMsgSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 1),
    _PrtT1FdlMsgSltIdx_Type()
)
prtT1FdlMsgSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1FdlMsgSltIdx.setStatus("mandatory")


class _PrtT1FdlMsgPrtIdx_Type(Integer32):
    """Custom type prtT1FdlMsgPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtT1FdlMsgPrtIdx_Type.__name__ = "Integer32"
_PrtT1FdlMsgPrtIdx_Object = MibTableColumn
prtT1FdlMsgPrtIdx = _PrtT1FdlMsgPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 2),
    _PrtT1FdlMsgPrtIdx_Type()
)
prtT1FdlMsgPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1FdlMsgPrtIdx.setStatus("mandatory")


class _PrtT1FdlMsgFdlTxRx_Type(Integer32):
    """Custom type prtT1FdlMsgFdlTxRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rx", 2),
          ("tx", 1))
    )


_PrtT1FdlMsgFdlTxRx_Type.__name__ = "Integer32"
_PrtT1FdlMsgFdlTxRx_Object = MibTableColumn
prtT1FdlMsgFdlTxRx = _PrtT1FdlMsgFdlTxRx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 3),
    _PrtT1FdlMsgFdlTxRx_Type()
)
prtT1FdlMsgFdlTxRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1FdlMsgFdlTxRx.setStatus("mandatory")
_PrtT1FdlMsg_Type = OctetString
_PrtT1FdlMsg_Object = MibTableColumn
prtT1FdlMsg = _PrtT1FdlMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 4),
    _PrtT1FdlMsg_Type()
)
prtT1FdlMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1FdlMsg.setStatus("mandatory")
_CnfgPrtGen_ObjectIdentity = ObjectIdentity
cnfgPrtGen = _CnfgPrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2)
)
_PrtExTsSplitTable_Object = MibTable
prtExTsSplitTable = _PrtExTsSplitTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1)
)
if mibBuilder.loadTexts:
    prtExTsSplitTable.setStatus("mandatory")
_PrtExTsSplitEntry_Object = MibTableRow
prtExTsSplitEntry = _PrtExTsSplitEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1)
)
prtExTsSplitEntry.setIndexNames(
    (0, "DACS-MIB", "prtExTsCnfgIdx"),
    (0, "DACS-MIB", "prtExTsSltIdx"),
    (0, "DACS-MIB", "prtExTsPrtIdx"),
    (0, "DACS-MIB", "prtExTsIdx"),
    (0, "DACS-MIB", "prtExTsBit"),
)
if mibBuilder.loadTexts:
    prtExTsSplitEntry.setStatus("mandatory")


class _PrtExTsCnfgIdx_Type(Integer32):
    """Custom type prtExTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExTsCnfgIdx_Type.__name__ = "Integer32"
_PrtExTsCnfgIdx_Object = MibTableColumn
prtExTsCnfgIdx = _PrtExTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 1),
    _PrtExTsCnfgIdx_Type()
)
prtExTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsCnfgIdx.setStatus("mandatory")


class _PrtExTsSltIdx_Type(Integer32):
    """Custom type prtExTsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExTsSltIdx_Type.__name__ = "Integer32"
_PrtExTsSltIdx_Object = MibTableColumn
prtExTsSltIdx = _PrtExTsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 2),
    _PrtExTsSltIdx_Type()
)
prtExTsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsSltIdx.setStatus("mandatory")
_PrtExTsPrtIdx_Type = Integer32
_PrtExTsPrtIdx_Object = MibTableColumn
prtExTsPrtIdx = _PrtExTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 3),
    _PrtExTsPrtIdx_Type()
)
prtExTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsPrtIdx.setStatus("mandatory")
_PrtExTsIdx_Type = Integer32
_PrtExTsIdx_Object = MibTableColumn
prtExTsIdx = _PrtExTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 4),
    _PrtExTsIdx_Type()
)
prtExTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsIdx.setStatus("mandatory")


class _PrtExTsBit_Type(Integer32):
    """Custom type prtExTsBit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PrtExTsBit_Type.__name__ = "Integer32"
_PrtExTsBit_Object = MibTableColumn
prtExTsBit = _PrtExTsBit_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 5),
    _PrtExTsBit_Type()
)
prtExTsBit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsBit.setStatus("mandatory")


class _PrtExTsIConSlot_Type(Integer32):
    """Custom type prtExTsIConSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_PrtExTsIConSlot_Type.__name__ = "Integer32"
_PrtExTsIConSlot_Object = MibTableColumn
prtExTsIConSlot = _PrtExTsIConSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 6),
    _PrtExTsIConSlot_Type()
)
prtExTsIConSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTsIConSlot.setStatus("mandatory")
_PrtExTsIConPrt_Type = Integer32
_PrtExTsIConPrt_Object = MibTableColumn
prtExTsIConPrt = _PrtExTsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 7),
    _PrtExTsIConPrt_Type()
)
prtExTsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTsIConPrt.setStatus("mandatory")
_PrtCnfgAgenda_ObjectIdentity = ObjectIdentity
prtCnfgAgenda = _PrtCnfgAgenda_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2)
)
_PrtAgendaBehaviourTable_Object = MibTable
prtAgendaBehaviourTable = _PrtAgendaBehaviourTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1)
)
if mibBuilder.loadTexts:
    prtAgendaBehaviourTable.setStatus("mandatory")
_PrtAgendaBehaviourEntry_Object = MibTableRow
prtAgendaBehaviourEntry = _PrtAgendaBehaviourEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1)
)
prtAgendaBehaviourEntry.setIndexNames(
    (0, "DACS-MIB", "prtAgendaBehaviourCnfgIdx"),
    (0, "DACS-MIB", "prtAgendaBehaviourSltIdx"),
    (0, "DACS-MIB", "prtAgendaBehaviourPrtIdx"),
)
if mibBuilder.loadTexts:
    prtAgendaBehaviourEntry.setStatus("mandatory")


class _PrtAgendaBehaviourCnfgIdx_Type(Integer32):
    """Custom type prtAgendaBehaviourCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtAgendaBehaviourCnfgIdx_Type.__name__ = "Integer32"
_PrtAgendaBehaviourCnfgIdx_Object = MibTableColumn
prtAgendaBehaviourCnfgIdx = _PrtAgendaBehaviourCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 1),
    _PrtAgendaBehaviourCnfgIdx_Type()
)
prtAgendaBehaviourCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAgendaBehaviourCnfgIdx.setStatus("mandatory")
_PrtAgendaBehaviourSltIdx_Type = Integer32
_PrtAgendaBehaviourSltIdx_Object = MibTableColumn
prtAgendaBehaviourSltIdx = _PrtAgendaBehaviourSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 2),
    _PrtAgendaBehaviourSltIdx_Type()
)
prtAgendaBehaviourSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAgendaBehaviourSltIdx.setStatus("mandatory")
_PrtAgendaBehaviourPrtIdx_Type = Integer32
_PrtAgendaBehaviourPrtIdx_Object = MibTableColumn
prtAgendaBehaviourPrtIdx = _PrtAgendaBehaviourPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 3),
    _PrtAgendaBehaviourPrtIdx_Type()
)
prtAgendaBehaviourPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAgendaBehaviourPrtIdx.setStatus("mandatory")


class _PrtAgendaBehaviourOnOff_Type(Integer32):
    """Custom type prtAgendaBehaviourOnOff based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtAgendaBehaviourOnOff_Type.__name__ = "Integer32"
_PrtAgendaBehaviourOnOff_Object = MibTableColumn
prtAgendaBehaviourOnOff = _PrtAgendaBehaviourOnOff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 4),
    _PrtAgendaBehaviourOnOff_Type()
)
prtAgendaBehaviourOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAgendaBehaviourOnOff.setStatus("mandatory")
_PrtCnfgAgendaTable_Object = MibTable
prtCnfgAgendaTable = _PrtCnfgAgendaTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2)
)
if mibBuilder.loadTexts:
    prtCnfgAgendaTable.setStatus("mandatory")
_PrtCnfgAgendaEntry_Object = MibTableRow
prtCnfgAgendaEntry = _PrtCnfgAgendaEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1)
)
prtCnfgAgendaEntry.setIndexNames(
    (0, "DACS-MIB", "prtCnfgAgendaCnfgIdx"),
    (0, "DACS-MIB", "prtCnfgAgendaSltIdx"),
    (0, "DACS-MIB", "prtCnfgAgendaPrtIdx"),
    (0, "DACS-MIB", "prtCnfgAgendaDayIdx"),
    (0, "DACS-MIB", "prtCnfgAgendaSesId"),
)
if mibBuilder.loadTexts:
    prtCnfgAgendaEntry.setStatus("mandatory")


class _PrtCnfgAgendaCnfgIdx_Type(Integer32):
    """Custom type prtCnfgAgendaCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtCnfgAgendaCnfgIdx_Type.__name__ = "Integer32"
_PrtCnfgAgendaCnfgIdx_Object = MibTableColumn
prtCnfgAgendaCnfgIdx = _PrtCnfgAgendaCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 1),
    _PrtCnfgAgendaCnfgIdx_Type()
)
prtCnfgAgendaCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaCnfgIdx.setStatus("mandatory")
_PrtCnfgAgendaSltIdx_Type = Integer32
_PrtCnfgAgendaSltIdx_Object = MibTableColumn
prtCnfgAgendaSltIdx = _PrtCnfgAgendaSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 2),
    _PrtCnfgAgendaSltIdx_Type()
)
prtCnfgAgendaSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaSltIdx.setStatus("mandatory")
_PrtCnfgAgendaPrtIdx_Type = Integer32
_PrtCnfgAgendaPrtIdx_Object = MibTableColumn
prtCnfgAgendaPrtIdx = _PrtCnfgAgendaPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 3),
    _PrtCnfgAgendaPrtIdx_Type()
)
prtCnfgAgendaPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaPrtIdx.setStatus("mandatory")


class _PrtCnfgAgendaDayIdx_Type(Integer32):
    """Custom type prtCnfgAgendaDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("friday", 5),
          ("monday", 1),
          ("saturday", 6),
          ("sunday", 7),
          ("thursday", 4),
          ("tuesday", 2),
          ("wednesday", 3))
    )


_PrtCnfgAgendaDayIdx_Type.__name__ = "Integer32"
_PrtCnfgAgendaDayIdx_Object = MibTableColumn
prtCnfgAgendaDayIdx = _PrtCnfgAgendaDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 4),
    _PrtCnfgAgendaDayIdx_Type()
)
prtCnfgAgendaDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaDayIdx.setStatus("mandatory")


class _PrtCnfgAgendaSesId_Type(Integer32):
    """Custom type prtCnfgAgendaSesId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_PrtCnfgAgendaSesId_Type.__name__ = "Integer32"
_PrtCnfgAgendaSesId_Object = MibTableColumn
prtCnfgAgendaSesId = _PrtCnfgAgendaSesId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 5),
    _PrtCnfgAgendaSesId_Type()
)
prtCnfgAgendaSesId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaSesId.setStatus("mandatory")


class _PrtCnfgAgendaFrom_Type(Integer32):
    """Custom type prtCnfgAgendaFrom based on Integer32"""
    defaultValue = 86400

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_PrtCnfgAgendaFrom_Type.__name__ = "Integer32"
_PrtCnfgAgendaFrom_Object = MibTableColumn
prtCnfgAgendaFrom = _PrtCnfgAgendaFrom_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 6),
    _PrtCnfgAgendaFrom_Type()
)
prtCnfgAgendaFrom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCnfgAgendaFrom.setStatus("mandatory")


class _PrtCnfgAgendaTo_Type(Integer32):
    """Custom type prtCnfgAgendaTo based on Integer32"""
    defaultValue = 86400

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_PrtCnfgAgendaTo_Type.__name__ = "Integer32"
_PrtCnfgAgendaTo_Object = MibTableColumn
prtCnfgAgendaTo = _PrtCnfgAgendaTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 7),
    _PrtCnfgAgendaTo_Type()
)
prtCnfgAgendaTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCnfgAgendaTo.setStatus("mandatory")
_PrtGenCnfgTable_Object = MibTable
prtGenCnfgTable = _PrtGenCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3)
)
if mibBuilder.loadTexts:
    prtGenCnfgTable.setStatus("mandatory")
_PrtGenCnfgEntry_Object = MibTableRow
prtGenCnfgEntry = _PrtGenCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1)
)
prtGenCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtGenCnfgIdx"),
    (0, "DACS-MIB", "prtGenCnfgSltIdx"),
    (0, "DACS-MIB", "prtGenCnfgPrtIdx"),
)
if mibBuilder.loadTexts:
    prtGenCnfgEntry.setStatus("mandatory")


class _PrtGenCnfgIdx_Type(Integer32):
    """Custom type prtGenCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtGenCnfgIdx_Type.__name__ = "Integer32"
_PrtGenCnfgIdx_Object = MibTableColumn
prtGenCnfgIdx = _PrtGenCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 1),
    _PrtGenCnfgIdx_Type()
)
prtGenCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenCnfgIdx.setStatus("mandatory")


class _PrtGenCnfgSltIdx_Type(Integer32):
    """Custom type prtGenCnfgSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtGenCnfgSltIdx_Type.__name__ = "Integer32"
_PrtGenCnfgSltIdx_Object = MibTableColumn
prtGenCnfgSltIdx = _PrtGenCnfgSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 2),
    _PrtGenCnfgSltIdx_Type()
)
prtGenCnfgSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenCnfgSltIdx.setStatus("mandatory")
_PrtGenCnfgPrtIdx_Type = Integer32
_PrtGenCnfgPrtIdx_Object = MibTableColumn
prtGenCnfgPrtIdx = _PrtGenCnfgPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 3),
    _PrtGenCnfgPrtIdx_Type()
)
prtGenCnfgPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenCnfgPrtIdx.setStatus("mandatory")


class _PrtGenCnfgLinkToSlot_Type(Integer32):
    """Custom type prtGenCnfgLinkToSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtGenCnfgLinkToSlot_Type.__name__ = "Integer32"
_PrtGenCnfgLinkToSlot_Object = MibTableColumn
prtGenCnfgLinkToSlot = _PrtGenCnfgLinkToSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 4),
    _PrtGenCnfgLinkToSlot_Type()
)
prtGenCnfgLinkToSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgLinkToSlot.setStatus("mandatory")
_PrtGenCnfgLinkToPort_Type = Integer32
_PrtGenCnfgLinkToPort_Object = MibTableColumn
prtGenCnfgLinkToPort = _PrtGenCnfgLinkToPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 5),
    _PrtGenCnfgLinkToPort_Type()
)
prtGenCnfgLinkToPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgLinkToPort.setStatus("mandatory")


class _PrtGenCnfgPortId_Type(Integer32):
    """Custom type prtGenCnfgPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PrtGenCnfgPortId_Type.__name__ = "Integer32"
_PrtGenCnfgPortId_Object = MibTableColumn
prtGenCnfgPortId = _PrtGenCnfgPortId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 6),
    _PrtGenCnfgPortId_Type()
)
prtGenCnfgPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgPortId.setStatus("mandatory")
_CmprPrtGen_ObjectIdentity = ObjectIdentity
cmprPrtGen = _CmprPrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3)
)
_PrtCmprTable_Object = MibTable
prtCmprTable = _PrtCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1)
)
if mibBuilder.loadTexts:
    prtCmprTable.setStatus("mandatory")
_PrtCmprEntry_Object = MibTableRow
prtCmprEntry = _PrtCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1)
)
prtCmprEntry.setIndexNames(
    (0, "DACS-MIB", "prtCmprTypIdx"),
    (0, "DACS-MIB", "prtCmprCnfgIdx"),
    (0, "DACS-MIB", "prtCmprVersion"),
    (0, "DACS-MIB", "prtCmprSltIdx"),
    (0, "DACS-MIB", "prtCmprPrtIdx"),
)
if mibBuilder.loadTexts:
    prtCmprEntry.setStatus("mandatory")
_PrtCmprTypIdx_Type = Integer32
_PrtCmprTypIdx_Object = MibTableColumn
prtCmprTypIdx = _PrtCmprTypIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 1),
    _PrtCmprTypIdx_Type()
)
prtCmprTypIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprTypIdx.setStatus("mandatory")
_PrtCmprCnfgIdx_Type = Integer32
_PrtCmprCnfgIdx_Object = MibTableColumn
prtCmprCnfgIdx = _PrtCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 2),
    _PrtCmprCnfgIdx_Type()
)
prtCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprCnfgIdx.setStatus("mandatory")
_PrtCmprVersion_Type = Integer32
_PrtCmprVersion_Object = MibTableColumn
prtCmprVersion = _PrtCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 3),
    _PrtCmprVersion_Type()
)
prtCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprVersion.setStatus("mandatory")


class _PrtCmprSltIdx_Type(Integer32):
    """Custom type prtCmprSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_PrtCmprSltIdx_Type.__name__ = "Integer32"
_PrtCmprSltIdx_Object = MibTableColumn
prtCmprSltIdx = _PrtCmprSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 4),
    _PrtCmprSltIdx_Type()
)
prtCmprSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprSltIdx.setStatus("mandatory")
_PrtCmprPrtIdx_Type = Integer32
_PrtCmprPrtIdx_Object = MibTableColumn
prtCmprPrtIdx = _PrtCmprPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 5),
    _PrtCmprPrtIdx_Type()
)
prtCmprPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprPrtIdx.setStatus("mandatory")
_PrtCmprObj_Type = OctetString
_PrtCmprObj_Object = MibTableColumn
prtCmprObj = _PrtCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 6),
    _PrtCmprObj_Type()
)
prtCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCmprObj.setStatus("mandatory")
_PrtDlciCmprTable_Object = MibTable
prtDlciCmprTable = _PrtDlciCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2)
)
if mibBuilder.loadTexts:
    prtDlciCmprTable.setStatus("mandatory")
_PrtDlciCmprEntry_Object = MibTableRow
prtDlciCmprEntry = _PrtDlciCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1)
)
prtDlciCmprEntry.setIndexNames(
    (0, "DACS-MIB", "prtDlciCmprCnfgIdx"),
    (0, "DACS-MIB", "prtDlciCmprVersion"),
    (0, "DACS-MIB", "prtDlciCmprSltIdx"),
    (0, "DACS-MIB", "prtDlciCmprPrtIdx"),
    (0, "DACS-MIB", "prtDlciCmprDlciIdx"),
)
if mibBuilder.loadTexts:
    prtDlciCmprEntry.setStatus("mandatory")
_PrtDlciCmprCnfgIdx_Type = Integer32
_PrtDlciCmprCnfgIdx_Object = MibTableColumn
prtDlciCmprCnfgIdx = _PrtDlciCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 1),
    _PrtDlciCmprCnfgIdx_Type()
)
prtDlciCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprCnfgIdx.setStatus("mandatory")
_PrtDlciCmprVersion_Type = Integer32
_PrtDlciCmprVersion_Object = MibTableColumn
prtDlciCmprVersion = _PrtDlciCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 2),
    _PrtDlciCmprVersion_Type()
)
prtDlciCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprVersion.setStatus("mandatory")


class _PrtDlciCmprSltIdx_Type(Integer32):
    """Custom type prtDlciCmprSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtDlciCmprSltIdx_Type.__name__ = "Integer32"
_PrtDlciCmprSltIdx_Object = MibTableColumn
prtDlciCmprSltIdx = _PrtDlciCmprSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 3),
    _PrtDlciCmprSltIdx_Type()
)
prtDlciCmprSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprSltIdx.setStatus("mandatory")


class _PrtDlciCmprPrtIdx_Type(Integer32):
    """Custom type prtDlciCmprPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109))
    )


_PrtDlciCmprPrtIdx_Type.__name__ = "Integer32"
_PrtDlciCmprPrtIdx_Object = MibTableColumn
prtDlciCmprPrtIdx = _PrtDlciCmprPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 4),
    _PrtDlciCmprPrtIdx_Type()
)
prtDlciCmprPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprPrtIdx.setStatus("mandatory")
_PrtDlciCmprDlciIdx_Type = Integer32
_PrtDlciCmprDlciIdx_Object = MibTableColumn
prtDlciCmprDlciIdx = _PrtDlciCmprDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 5),
    _PrtDlciCmprDlciIdx_Type()
)
prtDlciCmprDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprDlciIdx.setStatus("mandatory")
_PrtDlciCmprObj_Type = OctetString
_PrtDlciCmprObj_Object = MibTableColumn
prtDlciCmprObj = _PrtDlciCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 6),
    _PrtDlciCmprObj_Type()
)
prtDlciCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDlciCmprObj.setStatus("mandatory")
_PrtAlarmsCmprTable_Object = MibTable
prtAlarmsCmprTable = _PrtAlarmsCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3)
)
if mibBuilder.loadTexts:
    prtAlarmsCmprTable.setStatus("mandatory")
_PrtAlarmsCmprEntry_Object = MibTableRow
prtAlarmsCmprEntry = _PrtAlarmsCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1)
)
prtAlarmsCmprEntry.setIndexNames(
    (0, "DACS-MIB", "prtAlarmsCmprVersion"),
    (0, "DACS-MIB", "prtAlarmsCmprAlarmSlot"),
    (0, "DACS-MIB", "prtAlarmsCmprAlarmPort"),
    (0, "DACS-MIB", "prtAlarmsCmprAlarmIdx"),
)
if mibBuilder.loadTexts:
    prtAlarmsCmprEntry.setStatus("mandatory")
_PrtAlarmsCmprVersion_Type = Integer32
_PrtAlarmsCmprVersion_Object = MibTableColumn
prtAlarmsCmprVersion = _PrtAlarmsCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 1),
    _PrtAlarmsCmprVersion_Type()
)
prtAlarmsCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprVersion.setStatus("mandatory")
_PrtAlarmsCmprAlarmSlot_Type = Integer32
_PrtAlarmsCmprAlarmSlot_Object = MibTableColumn
prtAlarmsCmprAlarmSlot = _PrtAlarmsCmprAlarmSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 2),
    _PrtAlarmsCmprAlarmSlot_Type()
)
prtAlarmsCmprAlarmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprAlarmSlot.setStatus("mandatory")
_PrtAlarmsCmprAlarmPort_Type = Integer32
_PrtAlarmsCmprAlarmPort_Object = MibTableColumn
prtAlarmsCmprAlarmPort = _PrtAlarmsCmprAlarmPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 3),
    _PrtAlarmsCmprAlarmPort_Type()
)
prtAlarmsCmprAlarmPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprAlarmPort.setStatus("mandatory")
_PrtAlarmsCmprAlarmIdx_Type = Integer32
_PrtAlarmsCmprAlarmIdx_Object = MibTableColumn
prtAlarmsCmprAlarmIdx = _PrtAlarmsCmprAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 4),
    _PrtAlarmsCmprAlarmIdx_Type()
)
prtAlarmsCmprAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprAlarmIdx.setStatus("mandatory")
_PrtAlarmsCmprObj_Type = OctetString
_PrtAlarmsCmprObj_Object = MibTableColumn
prtAlarmsCmprObj = _PrtAlarmsCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 5),
    _PrtAlarmsCmprObj_Type()
)
prtAlarmsCmprObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprObj.setStatus("mandatory")
_MapWanGen_ObjectIdentity = ObjectIdentity
mapWanGen = _MapWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5)
)
_AgnLinkMapTable_Object = MibTable
agnLinkMapTable = _AgnLinkMapTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1)
)
if mibBuilder.loadTexts:
    agnLinkMapTable.setStatus("mandatory")
_AgnLinkMapEntry_Object = MibTableRow
agnLinkMapEntry = _AgnLinkMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1)
)
agnLinkMapEntry.setIndexNames(
    (0, "DACS-MIB", "mapLinkId"),
)
if mibBuilder.loadTexts:
    agnLinkMapEntry.setStatus("mandatory")
_MapLinkId_Type = Integer32
_MapLinkId_Object = MibTableColumn
mapLinkId = _MapLinkId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 1),
    _MapLinkId_Type()
)
mapLinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mapLinkId.setStatus("mandatory")


class _MapLinkSltIdx_Type(Integer32):
    """Custom type mapLinkSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_MapLinkSltIdx_Type.__name__ = "Integer32"
_MapLinkSltIdx_Object = MibTableColumn
mapLinkSltIdx = _MapLinkSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 2),
    _MapLinkSltIdx_Type()
)
mapLinkSltIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mapLinkSltIdx.setStatus("mandatory")


class _MapLinkPrtIdx_Type(Integer32):
    """Custom type mapLinkPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109),
          ("noConnect", 100))
    )


_MapLinkPrtIdx_Type.__name__ = "Integer32"
_MapLinkPrtIdx_Object = MibTableColumn
mapLinkPrtIdx = _MapLinkPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 3),
    _MapLinkPrtIdx_Type()
)
mapLinkPrtIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mapLinkPrtIdx.setStatus("mandatory")


class _MapLinkStatus_Type(Integer32):
    """Custom type mapLinkStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 1),
          ("up", 3))
    )


_MapLinkStatus_Type.__name__ = "Integer32"
_MapLinkStatus_Object = MibTableColumn
mapLinkStatus = _MapLinkStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 4),
    _MapLinkStatus_Type()
)
mapLinkStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mapLinkStatus.setStatus("mandatory")
_DiverseIfWanGen_ObjectIdentity = ObjectIdentity
diverseIfWanGen = _DiverseIfWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6)
)
_EthIf_ObjectIdentity = ObjectIdentity
ethIf = _EthIf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1)
)
_EthIfTable_Object = MibTable
ethIfTable = _EthIfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1)
)
if mibBuilder.loadTexts:
    ethIfTable.setStatus("mandatory")
_EthIfEntry_Object = MibTableRow
ethIfEntry = _EthIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1)
)
ethIfEntry.setIndexNames(
    (0, "DACS-MIB", "ethIfIdx"),
)
if mibBuilder.loadTexts:
    ethIfEntry.setStatus("mandatory")
_EthIfIdx_Type = Integer32
_EthIfIdx_Object = MibTableColumn
ethIfIdx = _EthIfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 1),
    _EthIfIdx_Type()
)
ethIfIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIdx.setStatus("mandatory")


class _EthMode_Type(Integer32):
    """Custom type ethMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 2),
          ("halfDuplex", 1))
    )


_EthMode_Type.__name__ = "Integer32"
_EthMode_Object = MibTableColumn
ethMode = _EthMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 2),
    _EthMode_Type()
)
ethMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethMode.setStatus("mandatory")


class _EthBridgingMode_Type(Integer32):
    """Custom type ethBridgingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("filtered", 1),
          ("transparent", 2))
    )


_EthBridgingMode_Type.__name__ = "Integer32"
_EthBridgingMode_Object = MibTableColumn
ethBridgingMode = _EthBridgingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 3),
    _EthBridgingMode_Type()
)
ethBridgingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethBridgingMode.setStatus("mandatory")
_MuxHub_ObjectIdentity = ObjectIdentity
muxHub = _MuxHub_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2)
)
_AgnMux_ObjectIdentity = ObjectIdentity
agnMux = _AgnMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 1)
)
_MdlMux_ObjectIdentity = ObjectIdentity
mdlMux = _MdlMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2)
)
_CnfgMdlMux_ObjectIdentity = ObjectIdentity
cnfgMdlMux = _CnfgMdlMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1)
)
_MdlPbxFramerCnfg_ObjectIdentity = ObjectIdentity
mdlPbxFramerCnfg = _MdlPbxFramerCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1)
)
_MdlPbxFramerCnfgTable_Object = MibTable
mdlPbxFramerCnfgTable = _MdlPbxFramerCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1)
)
if mibBuilder.loadTexts:
    mdlPbxFramerCnfgTable.setStatus("mandatory")
_MdlPbxFramerCnfgEntry_Object = MibTableRow
mdlPbxFramerCnfgEntry = _MdlPbxFramerCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1)
)
mdlPbxFramerCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "mdlPbxFraCnfgIdx"),
    (0, "DACS-MIB", "mdlPbxFraSltIdx"),
)
if mibBuilder.loadTexts:
    mdlPbxFramerCnfgEntry.setStatus("mandatory")


class _MdlPbxFraCnfgIdx_Type(Integer32):
    """Custom type mdlPbxFraCnfgIdx based on Integer32"""
    defaultValue = 1


_MdlPbxFraCnfgIdx_Object = MibTableColumn
mdlPbxFraCnfgIdx = _MdlPbxFraCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 1),
    _MdlPbxFraCnfgIdx_Type()
)
mdlPbxFraCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPbxFraCnfgIdx.setStatus("mandatory")


class _MdlPbxFraSltIdx_Type(Integer32):
    """Custom type mdlPbxFraSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_MdlPbxFraSltIdx_Type.__name__ = "Integer32"
_MdlPbxFraSltIdx_Object = MibTableColumn
mdlPbxFraSltIdx = _MdlPbxFraSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 2),
    _MdlPbxFraSltIdx_Type()
)
mdlPbxFraSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPbxFraSltIdx.setStatus("mandatory")


class _MdlPbxFraEnhEcho_Type(Integer32):
    """Custom type mdlPbxFraEnhEcho based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("ms16", 3),
          ("ms32", 4),
          ("notApplicable", 1))
    )


_MdlPbxFraEnhEcho_Type.__name__ = "Integer32"
_MdlPbxFraEnhEcho_Object = MibTableColumn
mdlPbxFraEnhEcho = _MdlPbxFraEnhEcho_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 3),
    _MdlPbxFraEnhEcho_Type()
)
mdlPbxFraEnhEcho.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraEnhEcho.setStatus("mandatory")


class _MdlPbxFraTSGroupAss_Type(Integer32):
    """Custom type mdlPbxFraTSGroupAss based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              255)
        )
    )
    namedValues = NamedValues(
        *(("group1", 1),
          ("group2", 2),
          ("group3", 3),
          ("group4", 4),
          ("group5", 5),
          ("group6", 6),
          ("group7", 7),
          ("group8", 8),
          ("notApplicable", 255))
    )


_MdlPbxFraTSGroupAss_Type.__name__ = "Integer32"
_MdlPbxFraTSGroupAss_Object = MibTableColumn
mdlPbxFraTSGroupAss = _MdlPbxFraTSGroupAss_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 4),
    _MdlPbxFraTSGroupAss_Type()
)
mdlPbxFraTSGroupAss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraTSGroupAss.setStatus("mandatory")


class _MdlPbxFraSignalMode_Type(Integer32):
    """Custom type mdlPbxFraSignalMode based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("casTrans", 4),
          ("ccsTrans", 6),
          ("notApplicable", 1),
          ("tieInvert", 3),
          ("tieTrunk", 2),
          ("userDefined", 5))
    )


_MdlPbxFraSignalMode_Type.__name__ = "Integer32"
_MdlPbxFraSignalMode_Object = MibTableColumn
mdlPbxFraSignalMode = _MdlPbxFraSignalMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 5),
    _MdlPbxFraSignalMode_Type()
)
mdlPbxFraSignalMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraSignalMode.setStatus("mandatory")


class _MdlPbxFraSignalVector_Type(OctetString):
    """Custom type mdlPbxFraSignalVector based on OctetString"""
    defaultHexValue = "0000"


_MdlPbxFraSignalVector_Object = MibTableColumn
mdlPbxFraSignalVector = _MdlPbxFraSignalVector_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 6),
    _MdlPbxFraSignalVector_Type()
)
mdlPbxFraSignalVector.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraSignalVector.setStatus("mandatory")


class _MdlPbxFraSignalMask_Type(OctetString):
    """Custom type mdlPbxFraSignalMask based on OctetString"""
    defaultHexValue = "ffff"


_MdlPbxFraSignalMask_Object = MibTableColumn
mdlPbxFraSignalMask = _MdlPbxFraSignalMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 7),
    _MdlPbxFraSignalMask_Type()
)
mdlPbxFraSignalMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraSignalMask.setStatus("mandatory")


class _MdlPbxFraFramerSlot_Type(Integer32):
    """Custom type mdlPbxFraFramerSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_MdlPbxFraFramerSlot_Type.__name__ = "Integer32"
_MdlPbxFraFramerSlot_Object = MibTableColumn
mdlPbxFraFramerSlot = _MdlPbxFraFramerSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 8),
    _MdlPbxFraFramerSlot_Type()
)
mdlPbxFraFramerSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraFramerSlot.setStatus("mandatory")


class _MdlPbxFraSignaling_Type(Integer32):
    """Custom type mdlPbxFraSignaling based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 2),
          ("localTermination", 3),
          ("notApplicable", 1))
    )


_MdlPbxFraSignaling_Type.__name__ = "Integer32"
_MdlPbxFraSignaling_Object = MibTableColumn
mdlPbxFraSignaling = _MdlPbxFraSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 9),
    _MdlPbxFraSignaling_Type()
)
mdlPbxFraSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraSignaling.setStatus("mandatory")
_PrtMux_ObjectIdentity = ObjectIdentity
prtMux = _PrtMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3)
)
_StatPrtMux_ObjectIdentity = ObjectIdentity
statPrtMux = _StatPrtMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1)
)
_PrtSExHsfStatTable_Object = MibTable
prtSExHsfStatTable = _PrtSExHsfStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6)
)
if mibBuilder.loadTexts:
    prtSExHsfStatTable.setStatus("mandatory")
_PrtSExHsfStatEntry_Object = MibTableRow
prtSExHsfStatEntry = _PrtSExHsfStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1)
)
prtSExHsfStatEntry.setIndexNames(
    (0, "DACS-MIB", "prtSExHsfSltIdx"),
    (0, "DACS-MIB", "prtSExHsfPrtIdx"),
)
if mibBuilder.loadTexts:
    prtSExHsfStatEntry.setStatus("mandatory")


class _PrtSExHsfSltIdx_Type(Integer32):
    """Custom type prtSExHsfSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtSExHsfSltIdx_Type.__name__ = "Integer32"
_PrtSExHsfSltIdx_Object = MibTableColumn
prtSExHsfSltIdx = _PrtSExHsfSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 1),
    _PrtSExHsfSltIdx_Type()
)
prtSExHsfSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSExHsfSltIdx.setStatus("mandatory")


class _PrtSExHsfPrtIdx_Type(Integer32):
    """Custom type prtSExHsfPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtSExHsfPrtIdx_Type.__name__ = "Integer32"
_PrtSExHsfPrtIdx_Object = MibTableColumn
prtSExHsfPrtIdx = _PrtSExHsfPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 2),
    _PrtSExHsfPrtIdx_Type()
)
prtSExHsfPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSExHsfPrtIdx.setStatus("mandatory")


class _PrtSExHsfInterfaceTyp_Type(Integer32):
    """Custom type prtSExHsfInterfaceTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rs422", 3),
          ("unknown", 1),
          ("v35", 2))
    )


_PrtSExHsfInterfaceTyp_Type.__name__ = "Integer32"
_PrtSExHsfInterfaceTyp_Object = MibTableColumn
prtSExHsfInterfaceTyp = _PrtSExHsfInterfaceTyp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 3),
    _PrtSExHsfInterfaceTyp_Type()
)
prtSExHsfInterfaceTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSExHsfInterfaceTyp.setStatus("mandatory")


class _PrtSExHsfRts_Type(Integer32):
    """Custom type prtSExHsfRts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("notActive", 2),
          ("unknown", 1))
    )


_PrtSExHsfRts_Type.__name__ = "Integer32"
_PrtSExHsfRts_Object = MibTableColumn
prtSExHsfRts = _PrtSExHsfRts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 4),
    _PrtSExHsfRts_Type()
)
prtSExHsfRts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSExHsfRts.setStatus("mandatory")
_CnfgPrtMux_ObjectIdentity = ObjectIdentity
cnfgPrtMux = _CnfgPrtMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2)
)
_PrtClCnfg_ObjectIdentity = ObjectIdentity
prtClCnfg = _PrtClCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1)
)
_PrtExClCnfgTable_Object = MibTable
prtExClCnfgTable = _PrtExClCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1)
)
if mibBuilder.loadTexts:
    prtExClCnfgTable.setStatus("mandatory")
_PrtExClCnfgEntry_Object = MibTableRow
prtExClCnfgEntry = _PrtExClCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1)
)
prtExClCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExClCnfgIdx"),
    (0, "DACS-MIB", "prtExClSltIdx"),
    (0, "DACS-MIB", "prtExClPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExClCnfgEntry.setStatus("mandatory")


class _PrtExClCnfgIdx_Type(Integer32):
    """Custom type prtExClCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExClCnfgIdx_Type.__name__ = "Integer32"
_PrtExClCnfgIdx_Object = MibTableColumn
prtExClCnfgIdx = _PrtExClCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 1),
    _PrtExClCnfgIdx_Type()
)
prtExClCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClCnfgIdx.setStatus("mandatory")


class _PrtExClSltIdx_Type(Integer32):
    """Custom type prtExClSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("notApplicable", 255))
    )


_PrtExClSltIdx_Type.__name__ = "Integer32"
_PrtExClSltIdx_Object = MibTableColumn
prtExClSltIdx = _PrtExClSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 2),
    _PrtExClSltIdx_Type()
)
prtExClSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClSltIdx.setStatus("mandatory")


class _PrtExClPrtIdx_Type(Integer32):
    """Custom type prtExClPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2))
    )


_PrtExClPrtIdx_Type.__name__ = "Integer32"
_PrtExClPrtIdx_Object = MibTableColumn
prtExClPrtIdx = _PrtExClPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 3),
    _PrtExClPrtIdx_Type()
)
prtExClPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClPrtIdx.setStatus("mandatory")


class _PrtExClUsage_Type(Integer32):
    """Custom type prtExClUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("muxPpp", 6),
          ("muxSlip", 5),
          ("nmsPpp", 4),
          ("nmsSlip", 3),
          ("noUse", 2),
          ("terminal", 7),
          ("unknown", 1))
    )


_PrtExClUsage_Type.__name__ = "Integer32"
_PrtExClUsage_Object = MibTableColumn
prtExClUsage = _PrtExClUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 4),
    _PrtExClUsage_Type()
)
prtExClUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClUsage.setStatus("mandatory")


class _PrtExClRate_Type(Integer32):
    """Custom type prtExClRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("r115200Bps", 9),
          ("r1200Bps", 2),
          ("r19200Bps", 6),
          ("r2400Bps", 3),
          ("r300Bps", 1),
          ("r38400Bps", 7),
          ("r4800Bps", 4),
          ("r57600Bps", 8),
          ("r9600Bps", 5))
    )


_PrtExClRate_Type.__name__ = "Integer32"
_PrtExClRate_Object = MibTableColumn
prtExClRate = _PrtExClRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 5),
    _PrtExClRate_Type()
)
prtExClRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClRate.setStatus("mandatory")


class _PrtExClDataBits_Type(Integer32):
    """Custom type prtExClDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dataBits7Bits", 1),
          ("dataBits8Bits", 2))
    )


_PrtExClDataBits_Type.__name__ = "Integer32"
_PrtExClDataBits_Object = MibTableColumn
prtExClDataBits = _PrtExClDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 6),
    _PrtExClDataBits_Type()
)
prtExClDataBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClDataBits.setStatus("mandatory")


class _PrtExClParity_Type(Integer32):
    """Custom type prtExClParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 2),
          ("none", 3),
          ("odd", 1))
    )


_PrtExClParity_Type.__name__ = "Integer32"
_PrtExClParity_Object = MibTableColumn
prtExClParity = _PrtExClParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 7),
    _PrtExClParity_Type()
)
prtExClParity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClParity.setStatus("mandatory")


class _PrtExClStopBits_Type(Integer32):
    """Custom type prtExClStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("stopBits1Bit", 1),
          ("stopBits1dot5Bits", 2),
          ("stopBits2Bits", 3))
    )


_PrtExClStopBits_Type.__name__ = "Integer32"
_PrtExClStopBits_Object = MibTableColumn
prtExClStopBits = _PrtExClStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 8),
    _PrtExClStopBits_Type()
)
prtExClStopBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClStopBits.setStatus("mandatory")


class _PrtExClRoutingProtocol_Type(Integer32):
    """Custom type prtExClRoutingProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("rip2", 2))
    )


_PrtExClRoutingProtocol_Type.__name__ = "Integer32"
_PrtExClRoutingProtocol_Object = MibTableColumn
prtExClRoutingProtocol = _PrtExClRoutingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 9),
    _PrtExClRoutingProtocol_Type()
)
prtExClRoutingProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClRoutingProtocol.setStatus("mandatory")
_PrtPh1MlCnfg_ObjectIdentity = ObjectIdentity
prtPh1MlCnfg = _PrtPh1MlCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2)
)
_PrtExPh1MlCnfgTable_Object = MibTable
prtExPh1MlCnfgTable = _PrtExPh1MlCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1)
)
if mibBuilder.loadTexts:
    prtExPh1MlCnfgTable.setStatus("mandatory")
_PrtExPh1MlCnfgEntry_Object = MibTableRow
prtExPh1MlCnfgEntry = _PrtExPh1MlCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1)
)
prtExPh1MlCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExPh1MlCnfgIdx"),
    (0, "DACS-MIB", "prtExPh1MlSltIdx"),
    (0, "DACS-MIB", "prtExPh1MlPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPh1MlCnfgEntry.setStatus("mandatory")


class _PrtExPh1MlCnfgIdx_Type(Integer32):
    """Custom type prtExPh1MlCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPh1MlCnfgIdx_Type.__name__ = "Integer32"
_PrtExPh1MlCnfgIdx_Object = MibTableColumn
prtExPh1MlCnfgIdx = _PrtExPh1MlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 1),
    _PrtExPh1MlCnfgIdx_Type()
)
prtExPh1MlCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlCnfgIdx.setStatus("mandatory")


class _PrtExPh1MlSltIdx_Type(Integer32):
    """Custom type prtExPh1MlSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExPh1MlSltIdx_Type.__name__ = "Integer32"
_PrtExPh1MlSltIdx_Object = MibTableColumn
prtExPh1MlSltIdx = _PrtExPh1MlSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 2),
    _PrtExPh1MlSltIdx_Type()
)
prtExPh1MlSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlSltIdx.setStatus("mandatory")


class _PrtExPh1MlPrtIdx_Type(Integer32):
    """Custom type prtExPh1MlPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              101)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("inPrt1", 101))
    )


_PrtExPh1MlPrtIdx_Type.__name__ = "Integer32"
_PrtExPh1MlPrtIdx_Object = MibTableColumn
prtExPh1MlPrtIdx = _PrtExPh1MlPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 3),
    _PrtExPh1MlPrtIdx_Type()
)
prtExPh1MlPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlPrtIdx.setStatus("mandatory")


class _PrtExPh1MlConnect_Type(Integer32):
    """Custom type prtExPh1MlConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPh1MlConnect_Type.__name__ = "Integer32"
_PrtExPh1MlConnect_Object = MibTableColumn
prtExPh1MlConnect = _PrtExPh1MlConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 4),
    _PrtExPh1MlConnect_Type()
)
prtExPh1MlConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlConnect.setStatus("mandatory")


class _PrtExPh1MlLineType_Type(Integer32):
    """Custom type prtExPh1MlLineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("esfT1", 2),
          ("g732nE1", 4),
          ("g732nE1CRC", 5),
          ("g732sE1", 6),
          ("g732sE1CRC", 7),
          ("sfT1", 3))
    )


_PrtExPh1MlLineType_Type.__name__ = "Integer32"
_PrtExPh1MlLineType_Object = MibTableColumn
prtExPh1MlLineType = _PrtExPh1MlLineType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 5),
    _PrtExPh1MlLineType_Type()
)
prtExPh1MlLineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlLineType.setStatus("mandatory")


class _PrtExPh1MlLineCode_Type(Integer32):
    """Custom type prtExPh1MlLineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("b7T1", 1),
          ("b8zsT1", 2),
          ("hdb3E1", 4),
          ("notApplicable", 255),
          ("transT1", 3))
    )


_PrtExPh1MlLineCode_Type.__name__ = "Integer32"
_PrtExPh1MlLineCode_Object = MibTableColumn
prtExPh1MlLineCode = _PrtExPh1MlLineCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 6),
    _PrtExPh1MlLineCode_Type()
)
prtExPh1MlLineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlLineCode.setStatus("mandatory")


class _PrtExPh1MlLineLen_Type(Integer32):
    """Custom type prtExPh1MlLineLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("len0p133ft", 2),
          ("len134p266ft", 3),
          ("len267p399ft", 4),
          ("len400p533ft", 5),
          ("len534p655ft", 6),
          ("lenFcc68", 7),
          ("notApplicable", 255),
          ("unknown", 1))
    )


_PrtExPh1MlLineLen_Type.__name__ = "Integer32"
_PrtExPh1MlLineLen_Object = MibTableColumn
prtExPh1MlLineLen = _PrtExPh1MlLineLen_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 7),
    _PrtExPh1MlLineLen_Type()
)
prtExPh1MlLineLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlLineLen.setStatus("mandatory")


class _PrtExPh1MlRestoreTime_Type(Integer32):
    """Custom type prtExPh1MlRestoreTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ccittE1", 4),
          ("restoreT10sec62411", 3),
          ("restoreT1secFast", 2))
    )


_PrtExPh1MlRestoreTime_Type.__name__ = "Integer32"
_PrtExPh1MlRestoreTime_Object = MibTableColumn
prtExPh1MlRestoreTime = _PrtExPh1MlRestoreTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 8),
    _PrtExPh1MlRestoreTime_Type()
)
prtExPh1MlRestoreTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRestoreTime.setStatus("mandatory")


class _PrtExPh1MlTxGain_Type(Integer32):
    """Custom type prtExPh1MlTxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("txGain0db", 2),
          ("txGain15db", 4),
          ("txGain22dot5db", 5),
          ("txGain7dot5db", 3))
    )


_PrtExPh1MlTxGain_Type.__name__ = "Integer32"
_PrtExPh1MlTxGain_Object = MibTableColumn
prtExPh1MlTxGain = _PrtExPh1MlTxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 9),
    _PrtExPh1MlTxGain_Type()
)
prtExPh1MlTxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTxGain.setStatus("mandatory")


class _PrtExPh1MlRxSensitivity_Type(Integer32):
    """Custom type prtExPh1MlRxSensitivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high36dBm", 3),
          ("longHaul", 5),
          ("low26dBm", 2),
          ("notApplicable", 1),
          ("shortHaul", 4))
    )


_PrtExPh1MlRxSensitivity_Type.__name__ = "Integer32"
_PrtExPh1MlRxSensitivity_Object = MibTableColumn
prtExPh1MlRxSensitivity = _PrtExPh1MlRxSensitivity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 10),
    _PrtExPh1MlRxSensitivity_Type()
)
prtExPh1MlRxSensitivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRxSensitivity.setStatus("mandatory")
_PrtExPh1MlIdleCode_Type = Integer32
_PrtExPh1MlIdleCode_Object = MibTableColumn
prtExPh1MlIdleCode = _PrtExPh1MlIdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 11),
    _PrtExPh1MlIdleCode_Type()
)
prtExPh1MlIdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlIdleCode.setStatus("mandatory")


class _PrtExPh1MlTdmTrunk_Type(Integer32):
    """Custom type prtExPh1MlTdmTrunk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("linkA", 1),
          ("linkB", 2),
          ("none", 3),
          ("notApplicable", 255))
    )


_PrtExPh1MlTdmTrunk_Type.__name__ = "Integer32"
_PrtExPh1MlTdmTrunk_Object = MibTableColumn
prtExPh1MlTdmTrunk = _PrtExPh1MlTdmTrunk_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 12),
    _PrtExPh1MlTdmTrunk_Type()
)
prtExPh1MlTdmTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTdmTrunk.setStatus("mandatory")


class _PrtExPh1MlClkMode_Type(Integer32):
    """Custom type prtExPh1MlClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("internalLocal", 1),
          ("loopBackLocal", 2),
          ("nodalTiming", 3))
    )


_PrtExPh1MlClkMode_Type.__name__ = "Integer32"
_PrtExPh1MlClkMode_Object = MibTableColumn
prtExPh1MlClkMode = _PrtExPh1MlClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 13),
    _PrtExPh1MlClkMode_Type()
)
prtExPh1MlClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlClkMode.setStatus("mandatory")


class _PrtExPh1MlMfClkSrcSlt_Type(Integer32):
    """Custom type prtExPh1MlMfClkSrcSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("local", 2),
          ("notApplicable", 1))
    )


_PrtExPh1MlMfClkSrcSlt_Type.__name__ = "Integer32"
_PrtExPh1MlMfClkSrcSlt_Object = MibTableColumn
prtExPh1MlMfClkSrcSlt = _PrtExPh1MlMfClkSrcSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 14),
    _PrtExPh1MlMfClkSrcSlt_Type()
)
prtExPh1MlMfClkSrcSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlMfClkSrcSlt.setStatus("mandatory")


class _PrtExPh1MlMfClkSrcPrt_Type(Integer32):
    """Custom type prtExPh1MlMfClkSrcPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              101,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("inPrt1", 101),
          ("notApplicable", 255))
    )


_PrtExPh1MlMfClkSrcPrt_Type.__name__ = "Integer32"
_PrtExPh1MlMfClkSrcPrt_Object = MibTableColumn
prtExPh1MlMfClkSrcPrt = _PrtExPh1MlMfClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 15),
    _PrtExPh1MlMfClkSrcPrt_Type()
)
prtExPh1MlMfClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlMfClkSrcPrt.setStatus("mandatory")


class _PrtExPh1MlFdlType_Type(Integer32):
    """Custom type prtExPh1MlFdlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("command", 3),
          ("notApplicable", 1),
          ("response", 2))
    )


_PrtExPh1MlFdlType_Type.__name__ = "Integer32"
_PrtExPh1MlFdlType_Object = MibTableColumn
prtExPh1MlFdlType = _PrtExPh1MlFdlType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 16),
    _PrtExPh1MlFdlType_Type()
)
prtExPh1MlFdlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlFdlType.setStatus("mandatory")


class _PrtExPh1MlInbandMng_Type(Integer32):
    """Custom type prtExPh1MlInbandMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dedicatedFr", 6),
          ("dedicatedPpp", 5),
          ("dedicatedTs", 4),
          ("fdlOrTs0", 3),
          ("notApplicable", 255),
          ("off", 2))
    )


_PrtExPh1MlInbandMng_Type.__name__ = "Integer32"
_PrtExPh1MlInbandMng_Object = MibTableColumn
prtExPh1MlInbandMng = _PrtExPh1MlInbandMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 17),
    _PrtExPh1MlInbandMng_Type()
)
prtExPh1MlInbandMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlInbandMng.setStatus("mandatory")


class _PrtExPh1MlInbandMngRate_Type(Integer32):
    """Custom type prtExPh1MlInbandMngRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r12k", 4),
          ("r16k", 5),
          ("r20k", 8),
          ("r32k", 6),
          ("r4k", 2),
          ("r64k", 7),
          ("r8k", 3))
    )


_PrtExPh1MlInbandMngRate_Type.__name__ = "Integer32"
_PrtExPh1MlInbandMngRate_Object = MibTableColumn
prtExPh1MlInbandMngRate = _PrtExPh1MlInbandMngRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 18),
    _PrtExPh1MlInbandMngRate_Type()
)
prtExPh1MlInbandMngRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlInbandMngRate.setStatus("mandatory")


class _PrtExPh1MlRedundType_Type(Integer32):
    """Custom type prtExPh1MlRedundType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dualCableAIS", 2),
          ("dualCableParallelTx", 4),
          ("none", 1),
          ("yCable", 3))
    )


_PrtExPh1MlRedundType_Type.__name__ = "Integer32"
_PrtExPh1MlRedundType_Object = MibTableColumn
prtExPh1MlRedundType = _PrtExPh1MlRedundType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 19),
    _PrtExPh1MlRedundType_Type()
)
prtExPh1MlRedundType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRedundType.setStatus("mandatory")


class _PrtExPh1MlRedundSlot_Type(Integer32):
    """Custom type prtExPh1MlRedundSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_PrtExPh1MlRedundSlot_Type.__name__ = "Integer32"
_PrtExPh1MlRedundSlot_Object = MibTableColumn
prtExPh1MlRedundSlot = _PrtExPh1MlRedundSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 20),
    _PrtExPh1MlRedundSlot_Type()
)
prtExPh1MlRedundSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRedundSlot.setStatus("mandatory")


class _PrtExPh1MlRedundPort_Type(Integer32):
    """Custom type prtExPh1MlRedundPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              101,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("inPrt1", 101),
          ("notApplicable", 255))
    )


_PrtExPh1MlRedundPort_Type.__name__ = "Integer32"
_PrtExPh1MlRedundPort_Object = MibTableColumn
prtExPh1MlRedundPort = _PrtExPh1MlRedundPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 21),
    _PrtExPh1MlRedundPort_Type()
)
prtExPh1MlRedundPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRedundPort.setStatus("mandatory")


class _PrtExPh1MlRedundRecTime_Type(Integer32):
    """Custom type prtExPh1MlRedundRecTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_PrtExPh1MlRedundRecTime_Type.__name__ = "Integer32"
_PrtExPh1MlRedundRecTime_Object = MibTableColumn
prtExPh1MlRedundRecTime = _PrtExPh1MlRedundRecTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 22),
    _PrtExPh1MlRedundRecTime_Type()
)
prtExPh1MlRedundRecTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRedundRecTime.setStatus("mandatory")


class _PrtExPh1MlInbandMngRoutProt_Type(Integer32):
    """Custom type prtExPh1MlInbandMngRoutProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("proprietary", 3),
          ("rip2", 2))
    )


_PrtExPh1MlInbandMngRoutProt_Type.__name__ = "Integer32"
_PrtExPh1MlInbandMngRoutProt_Object = MibTableColumn
prtExPh1MlInbandMngRoutProt = _PrtExPh1MlInbandMngRoutProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 23),
    _PrtExPh1MlInbandMngRoutProt_Type()
)
prtExPh1MlInbandMngRoutProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlInbandMngRoutProt.setStatus("mandatory")


class _PrtExPh1MlIfType_Type(Integer32):
    """Custom type prtExPh1MlIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("csu", 2),
          ("dsu", 3),
          ("ltu", 4),
          ("notApplicable", 1))
    )


_PrtExPh1MlIfType_Type.__name__ = "Integer32"
_PrtExPh1MlIfType_Object = MibTableColumn
prtExPh1MlIfType = _PrtExPh1MlIfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 24),
    _PrtExPh1MlIfType_Type()
)
prtExPh1MlIfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlIfType.setStatus("mandatory")
_PrtExPh1MlTsTable_Object = MibTable
prtExPh1MlTsTable = _PrtExPh1MlTsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2)
)
if mibBuilder.loadTexts:
    prtExPh1MlTsTable.setStatus("mandatory")
_PrtExPh1MlTsEntry_Object = MibTableRow
prtExPh1MlTsEntry = _PrtExPh1MlTsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1)
)
prtExPh1MlTsEntry.setIndexNames(
    (0, "DACS-MIB", "prtExPh1MlTsCnfgIdx"),
    (0, "DACS-MIB", "prtExPh1MlTsSltIdx"),
    (0, "DACS-MIB", "prtExPh1MlTsPrtIdx"),
    (0, "DACS-MIB", "prtExPh1MlTsIdx"),
)
if mibBuilder.loadTexts:
    prtExPh1MlTsEntry.setStatus("mandatory")


class _PrtExPh1MlTsCnfgIdx_Type(Integer32):
    """Custom type prtExPh1MlTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPh1MlTsCnfgIdx_Type.__name__ = "Integer32"
_PrtExPh1MlTsCnfgIdx_Object = MibTableColumn
prtExPh1MlTsCnfgIdx = _PrtExPh1MlTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 1),
    _PrtExPh1MlTsCnfgIdx_Type()
)
prtExPh1MlTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsCnfgIdx.setStatus("mandatory")


class _PrtExPh1MlTsSltIdx_Type(Integer32):
    """Custom type prtExPh1MlTsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExPh1MlTsSltIdx_Type.__name__ = "Integer32"
_PrtExPh1MlTsSltIdx_Object = MibTableColumn
prtExPh1MlTsSltIdx = _PrtExPh1MlTsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 2),
    _PrtExPh1MlTsSltIdx_Type()
)
prtExPh1MlTsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsSltIdx.setStatus("mandatory")


class _PrtExPh1MlTsPrtIdx_Type(Integer32):
    """Custom type prtExPh1MlTsPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              101)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("inPrt1", 101))
    )


_PrtExPh1MlTsPrtIdx_Type.__name__ = "Integer32"
_PrtExPh1MlTsPrtIdx_Object = MibTableColumn
prtExPh1MlTsPrtIdx = _PrtExPh1MlTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 3),
    _PrtExPh1MlTsPrtIdx_Type()
)
prtExPh1MlTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsPrtIdx.setStatus("mandatory")
_PrtExPh1MlTsIdx_Type = Integer32
_PrtExPh1MlTsIdx_Object = MibTableColumn
prtExPh1MlTsIdx = _PrtExPh1MlTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 4),
    _PrtExPh1MlTsIdx_Type()
)
prtExPh1MlTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsIdx.setStatus("mandatory")


class _PrtExPh1MlTsIConSlot_Type(Integer32):
    """Custom type prtExPh1MlTsIConSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("split", 4))
    )


_PrtExPh1MlTsIConSlot_Type.__name__ = "Integer32"
_PrtExPh1MlTsIConSlot_Object = MibTableColumn
prtExPh1MlTsIConSlot = _PrtExPh1MlTsIConSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 5),
    _PrtExPh1MlTsIConSlot_Type()
)
prtExPh1MlTsIConSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsIConSlot.setStatus("mandatory")
_PrtExPh1MlTsIConPrt_Type = Integer32
_PrtExPh1MlTsIConPrt_Object = MibTableColumn
prtExPh1MlTsIConPrt = _PrtExPh1MlTsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 6),
    _PrtExPh1MlTsIConPrt_Type()
)
prtExPh1MlTsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsIConPrt.setStatus("mandatory")
_PrtExPh1MlTsIConTs_Type = Integer32
_PrtExPh1MlTsIConTs_Object = MibTableColumn
prtExPh1MlTsIConTs = _PrtExPh1MlTsIConTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 7),
    _PrtExPh1MlTsIConTs_Type()
)
prtExPh1MlTsIConTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsIConTs.setStatus("mandatory")
_PrtExPh1MlTsExt_Type = ObjectIdentifier
_PrtExPh1MlTsExt_Object = MibTableColumn
prtExPh1MlTsExt = _PrtExPh1MlTsExt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 8),
    _PrtExPh1MlTsExt_Type()
)
prtExPh1MlTsExt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsExt.setStatus("mandatory")
_PrtInPh1MlCnfgTable_Object = MibTable
prtInPh1MlCnfgTable = _PrtInPh1MlCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3)
)
if mibBuilder.loadTexts:
    prtInPh1MlCnfgTable.setStatus("mandatory")
_PrtInPh1MlCnfgEntry_Object = MibTableRow
prtInPh1MlCnfgEntry = _PrtInPh1MlCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1)
)
prtInPh1MlCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtInPh1MlCnfgIdx"),
    (0, "DACS-MIB", "prtInPh1MlSltType"),
    (0, "DACS-MIB", "prtInPh1MlPrtIdx"),
)
if mibBuilder.loadTexts:
    prtInPh1MlCnfgEntry.setStatus("mandatory")


class _PrtInPh1MlCnfgIdx_Type(Integer32):
    """Custom type prtInPh1MlCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInPh1MlCnfgIdx_Type.__name__ = "Integer32"
_PrtInPh1MlCnfgIdx_Object = MibTableColumn
prtInPh1MlCnfgIdx = _PrtInPh1MlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 1),
    _PrtInPh1MlCnfgIdx_Type()
)
prtInPh1MlCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlCnfgIdx.setStatus("mandatory")


class _PrtInPh1MlSltType_Type(Integer32):
    """Custom type prtInPh1MlSltType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtInPh1MlSltType_Type.__name__ = "Integer32"
_PrtInPh1MlSltType_Object = MibTableColumn
prtInPh1MlSltType = _PrtInPh1MlSltType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 2),
    _PrtInPh1MlSltType_Type()
)
prtInPh1MlSltType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlSltType.setStatus("mandatory")
_PrtInPh1MlPrtIdx_Type = Integer32
_PrtInPh1MlPrtIdx_Object = MibTableColumn
prtInPh1MlPrtIdx = _PrtInPh1MlPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 3),
    _PrtInPh1MlPrtIdx_Type()
)
prtInPh1MlPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlPrtIdx.setStatus("mandatory")


class _PrtInPh1MlConnect_Type(Integer32):
    """Custom type prtInPh1MlConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInPh1MlConnect_Type.__name__ = "Integer32"
_PrtInPh1MlConnect_Object = MibTableColumn
prtInPh1MlConnect = _PrtInPh1MlConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 4),
    _PrtInPh1MlConnect_Type()
)
prtInPh1MlConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlConnect.setStatus("mandatory")


class _PrtInPh1MlRate_Type(Integer32):
    """Custom type prtInPh1MlRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              100)
        )
    )
    namedValues = NamedValues(
        *(("noRate", 100),
          ("r10x56eq560Kbps", 19),
          ("r10x64eq640Kbps", 20),
          ("r11x56eq616Kbps", 21),
          ("r11x64eq704Kbps", 22),
          ("r12x56eq672Kbps", 23),
          ("r12x64eq768Kbps", 24),
          ("r13x56eq728Kbps", 25),
          ("r13x64eq832Kbps", 26),
          ("r14x56eq784Kbps", 27),
          ("r14x64eq896Kbps", 28),
          ("r15x56eq840Kbps", 29),
          ("r15x64eq960Kbps", 30),
          ("r16x56eq896Kbps", 31),
          ("r16x64eq1024Kbps", 32),
          ("r17x56eq952Kbps", 33),
          ("r17x64eq1088Kbps", 34),
          ("r18x56eq1008Kbps", 35),
          ("r18x64eq1152Kbps", 36),
          ("r19x56eq1064Kbps", 37),
          ("r19x64eq1216Kbps", 38),
          ("r1x56eq56Kbps", 1),
          ("r1x64eq64Kbps", 2),
          ("r20x56eq1120Kbps", 39),
          ("r20x64eq1280Kbps", 40),
          ("r21x56eq1176Kbps", 41),
          ("r21x64eq1344Kbps", 42),
          ("r22x56eq1232Kbps", 43),
          ("r22x64eq1408Kbps", 44),
          ("r23x56eq1288Kbps", 45),
          ("r23x64eq1472Kbps", 46),
          ("r24x56eq1344Kbps", 47),
          ("r24x64eq1536Kbps", 48),
          ("r25x56eq1400Kbps", 49),
          ("r25x64eq1600Kbps", 50),
          ("r26x56eq1456Kbps", 51),
          ("r26x64eq1664Kbps", 52),
          ("r27x56eq1512Kbps", 53),
          ("r27x64eq1728Kbps", 54),
          ("r28x56eq1568Kbps", 55),
          ("r28x64eq1792Kbps", 56),
          ("r29x56eq1624Kbps", 57),
          ("r29x64eq1856Kbps", 58),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 4),
          ("r30x56eq1680Kbps", 59),
          ("r30x64eq1920Kbps", 60),
          ("r31x56eq1736Kbps", 61),
          ("r31x64eq1984Kbps", 62),
          ("r3x56eq168Kbps", 5),
          ("r3x64eq192Kbps", 6),
          ("r4x56eq224Kbps", 7),
          ("r4x64eq256Kbps", 8),
          ("r5x56eq280Kbps", 9),
          ("r5x64eq320Kbps", 10),
          ("r6x56eq336Kbps", 11),
          ("r6x64eq384Kbps", 12),
          ("r7x56eq392Kbps", 13),
          ("r7x64eq448Kbps", 14),
          ("r8x56eq448Kbps", 15),
          ("r8x64eq512Kbps", 16),
          ("r9x56eq504Kbps", 17),
          ("r9x64eq576Kbps", 18))
    )


_PrtInPh1MlRate_Type.__name__ = "Integer32"
_PrtInPh1MlRate_Object = MibTableColumn
prtInPh1MlRate = _PrtInPh1MlRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 5),
    _PrtInPh1MlRate_Type()
)
prtInPh1MlRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlRate.setStatus("mandatory")


class _PrtInPh1MlProtocol_Type(Integer32):
    """Custom type prtInPh1MlProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("fr", 1),
          ("frPlus", 2),
          ("hdlcSdlc", 4),
          ("pCellRelay", 3),
          ("transparentHdlc", 5))
    )


_PrtInPh1MlProtocol_Type.__name__ = "Integer32"
_PrtInPh1MlProtocol_Object = MibTableColumn
prtInPh1MlProtocol = _PrtInPh1MlProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 6),
    _PrtInPh1MlProtocol_Type()
)
prtInPh1MlProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlProtocol.setStatus("mandatory")


class _PrtInPh1MlConnectionTyp_Type(Integer32):
    """Custom type prtInPh1MlConnectionTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("otherNet", 4),
          ("pubNet", 5),
          ("sameNetManaged", 1),
          ("sameNetNotMana", 2),
          ("user", 3))
    )


_PrtInPh1MlConnectionTyp_Type.__name__ = "Integer32"
_PrtInPh1MlConnectionTyp_Object = MibTableColumn
prtInPh1MlConnectionTyp = _PrtInPh1MlConnectionTyp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 7),
    _PrtInPh1MlConnectionTyp_Type()
)
prtInPh1MlConnectionTyp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlConnectionTyp.setStatus("mandatory")


class _PrtInPh1MlCongResponse_Type(Integer32):
    """Custom type prtInPh1MlCongResponse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("flowControl", 3),
          ("no", 2))
    )


_PrtInPh1MlCongResponse_Type.__name__ = "Integer32"
_PrtInPh1MlCongResponse_Object = MibTableColumn
prtInPh1MlCongResponse = _PrtInPh1MlCongResponse_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 8),
    _PrtInPh1MlCongResponse_Type()
)
prtInPh1MlCongResponse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlCongResponse.setStatus("mandatory")
_PrtInPh1MlCongLevel_Type = Integer32
_PrtInPh1MlCongLevel_Object = MibTableColumn
prtInPh1MlCongLevel = _PrtInPh1MlCongLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 9),
    _PrtInPh1MlCongLevel_Type()
)
prtInPh1MlCongLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlCongLevel.setStatus("mandatory")


class _PrtInPh1MlTc_Type(Integer32):
    """Custom type prtInPh1MlTc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("tc1sec", 1),
          ("tc2sec", 2),
          ("tc3sec", 3),
          ("tc4sec", 4))
    )


_PrtInPh1MlTc_Type.__name__ = "Integer32"
_PrtInPh1MlTc_Object = MibTableColumn
prtInPh1MlTc = _PrtInPh1MlTc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 10),
    _PrtInPh1MlTc_Type()
)
prtInPh1MlTc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlTc.setStatus("mandatory")


class _PrtInPh1MlFlowControl_Type(Integer32):
    """Custom type prtInPh1MlFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fecnBecn", 3),
          ("none", 2))
    )


_PrtInPh1MlFlowControl_Type.__name__ = "Integer32"
_PrtInPh1MlFlowControl_Object = MibTableColumn
prtInPh1MlFlowControl = _PrtInPh1MlFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 11),
    _PrtInPh1MlFlowControl_Type()
)
prtInPh1MlFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFlowControl.setStatus("mandatory")


class _PrtInPh1MlSegment_Type(Integer32):
    """Custom type prtInPh1MlSegment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("s1180Byte", 11),
          ("s150Byte", 3),
          ("s236Byte", 7),
          ("s264Byte", 4),
          ("s36Byte", 2),
          ("s378Byte", 5),
          ("s472Byte", 8),
          ("s492Byte", 6),
          ("s708Byte", 9),
          ("s944Byte", 10))
    )


_PrtInPh1MlSegment_Type.__name__ = "Integer32"
_PrtInPh1MlSegment_Object = MibTableColumn
prtInPh1MlSegment = _PrtInPh1MlSegment_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 12),
    _PrtInPh1MlSegment_Type()
)
prtInPh1MlSegment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlSegment.setStatus("mandatory")


class _PrtInPh1MlFrMngProt_Type(Integer32):
    """Custom type prtInPh1MlFrMngProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("annexA", 5),
          ("ansiT1", 4),
          ("lmi", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtInPh1MlFrMngProt_Type.__name__ = "Integer32"
_PrtInPh1MlFrMngProt_Object = MibTableColumn
prtInPh1MlFrMngProt = _PrtInPh1MlFrMngProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 13),
    _PrtInPh1MlFrMngProt_Type()
)
prtInPh1MlFrMngProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFrMngProt.setStatus("mandatory")


class _PrtInPh1MlEnqPeriod_Type(Integer32):
    """Custom type prtInPh1MlEnqPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_PrtInPh1MlEnqPeriod_Type.__name__ = "Integer32"
_PrtInPh1MlEnqPeriod_Object = MibTableColumn
prtInPh1MlEnqPeriod = _PrtInPh1MlEnqPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 14),
    _PrtInPh1MlEnqPeriod_Type()
)
prtInPh1MlEnqPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlEnqPeriod.setStatus("mandatory")


class _PrtInPh1MlFullRptPeriod_Type(Integer32):
    """Custom type prtInPh1MlFullRptPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PrtInPh1MlFullRptPeriod_Type.__name__ = "Integer32"
_PrtInPh1MlFullRptPeriod_Object = MibTableColumn
prtInPh1MlFullRptPeriod = _PrtInPh1MlFullRptPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 15),
    _PrtInPh1MlFullRptPeriod_Type()
)
prtInPh1MlFullRptPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFullRptPeriod.setStatus("mandatory")


class _PrtInPh1MlFrWindowSize_Type(Integer32):
    """Custom type prtInPh1MlFrWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_PrtInPh1MlFrWindowSize_Type.__name__ = "Integer32"
_PrtInPh1MlFrWindowSize_Object = MibTableColumn
prtInPh1MlFrWindowSize = _PrtInPh1MlFrWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 16),
    _PrtInPh1MlFrWindowSize_Type()
)
prtInPh1MlFrWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFrWindowSize.setStatus("mandatory")


class _PrtInPh1MlErrorsThreshold_Type(Integer32):
    """Custom type prtInPh1MlErrorsThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_PrtInPh1MlErrorsThreshold_Type.__name__ = "Integer32"
_PrtInPh1MlErrorsThreshold_Object = MibTableColumn
prtInPh1MlErrorsThreshold = _PrtInPh1MlErrorsThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 17),
    _PrtInPh1MlErrorsThreshold_Type()
)
prtInPh1MlErrorsThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlErrorsThreshold.setStatus("mandatory")


class _PrtInPh1MlMaxIdleTime_Type(Integer32):
    """Custom type prtInPh1MlMaxIdleTime based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1800),
    )


_PrtInPh1MlMaxIdleTime_Type.__name__ = "Integer32"
_PrtInPh1MlMaxIdleTime_Object = MibTableColumn
prtInPh1MlMaxIdleTime = _PrtInPh1MlMaxIdleTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 18),
    _PrtInPh1MlMaxIdleTime_Type()
)
prtInPh1MlMaxIdleTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlMaxIdleTime.setStatus("mandatory")


class _PrtInPh1MlBearerCh_Type(Integer32):
    """Custom type prtInPh1MlBearerCh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("chB1andchB2", 5),
          ("channelB1", 3),
          ("channelB2", 4),
          ("none", 255),
          ("notApplicable", 1))
    )


_PrtInPh1MlBearerCh_Type.__name__ = "Integer32"
_PrtInPh1MlBearerCh_Object = MibTableColumn
prtInPh1MlBearerCh = _PrtInPh1MlBearerCh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 19),
    _PrtInPh1MlBearerCh_Type()
)
prtInPh1MlBearerCh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlBearerCh.setStatus("mandatory")


class _PrtInPh1MlAssociatedExCh_Type(Integer32):
    """Custom type prtInPh1MlAssociatedExCh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("notApplicable", 255))
    )


_PrtInPh1MlAssociatedExCh_Type.__name__ = "Integer32"
_PrtInPh1MlAssociatedExCh_Object = MibTableColumn
prtInPh1MlAssociatedExCh = _PrtInPh1MlAssociatedExCh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 20),
    _PrtInPh1MlAssociatedExCh_Type()
)
prtInPh1MlAssociatedExCh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlAssociatedExCh.setStatus("mandatory")


class _PrtInPh1MlClockEncoding_Type(Integer32):
    """Custom type prtInPh1MlClockEncoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("diffManchester", 6),
          ("fm0", 4),
          ("manchester", 5),
          ("notApplicable", 1),
          ("nrz", 2),
          ("nrzI", 3))
    )


_PrtInPh1MlClockEncoding_Type.__name__ = "Integer32"
_PrtInPh1MlClockEncoding_Object = MibTableColumn
prtInPh1MlClockEncoding = _PrtInPh1MlClockEncoding_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 21),
    _PrtInPh1MlClockEncoding_Type()
)
prtInPh1MlClockEncoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlClockEncoding.setStatus("mandatory")


class _PrtInPh1MlMinSeparators_Type(Integer32):
    """Custom type prtInPh1MlMinSeparators based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_PrtInPh1MlMinSeparators_Type.__name__ = "Integer32"
_PrtInPh1MlMinSeparators_Object = MibTableColumn
prtInPh1MlMinSeparators = _PrtInPh1MlMinSeparators_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 22),
    _PrtInPh1MlMinSeparators_Type()
)
prtInPh1MlMinSeparators.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlMinSeparators.setStatus("mandatory")


class _PrtInPh1MlCcittCrc_Type(Integer32):
    """Custom type prtInPh1MlCcittCrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("crc16", 2),
          ("crc32", 3),
          ("notApplicable", 1))
    )


_PrtInPh1MlCcittCrc_Type.__name__ = "Integer32"
_PrtInPh1MlCcittCrc_Object = MibTableColumn
prtInPh1MlCcittCrc = _PrtInPh1MlCcittCrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 23),
    _PrtInPh1MlCcittCrc_Type()
)
prtInPh1MlCcittCrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlCcittCrc.setStatus("mandatory")


class _PrtInPh1MlFrameSeparator_Type(Integer32):
    """Custom type prtInPh1MlFrameSeparator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("flags", 3),
          ("idles", 2),
          ("notApplicable", 1))
    )


_PrtInPh1MlFrameSeparator_Type.__name__ = "Integer32"
_PrtInPh1MlFrameSeparator_Object = MibTableColumn
prtInPh1MlFrameSeparator = _PrtInPh1MlFrameSeparator_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 24),
    _PrtInPh1MlFrameSeparator_Type()
)
prtInPh1MlFrameSeparator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFrameSeparator.setStatus("mandatory")
_PrtInPh1MlDlciTable_Object = MibTable
prtInPh1MlDlciTable = _PrtInPh1MlDlciTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4)
)
if mibBuilder.loadTexts:
    prtInPh1MlDlciTable.setStatus("mandatory")
_PrtInPh1MlDlciEntry_Object = MibTableRow
prtInPh1MlDlciEntry = _PrtInPh1MlDlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1)
)
prtInPh1MlDlciEntry.setIndexNames(
    (0, "DACS-MIB", "prtInPh1MlDlciCnfgIdx"),
    (0, "DACS-MIB", "prtInPh1MlDlciSltIdx"),
    (0, "DACS-MIB", "prtInPh1MlDlciPrtIdx"),
    (0, "DACS-MIB", "prtInPh1MlDlciIdx"),
)
if mibBuilder.loadTexts:
    prtInPh1MlDlciEntry.setStatus("mandatory")


class _PrtInPh1MlDlciCnfgIdx_Type(Integer32):
    """Custom type prtInPh1MlDlciCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInPh1MlDlciCnfgIdx_Type.__name__ = "Integer32"
_PrtInPh1MlDlciCnfgIdx_Object = MibTableColumn
prtInPh1MlDlciCnfgIdx = _PrtInPh1MlDlciCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 1),
    _PrtInPh1MlDlciCnfgIdx_Type()
)
prtInPh1MlDlciCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciCnfgIdx.setStatus("mandatory")


class _PrtInPh1MlDlciSltIdx_Type(Integer32):
    """Custom type prtInPh1MlDlciSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInPh1MlDlciSltIdx_Type.__name__ = "Integer32"
_PrtInPh1MlDlciSltIdx_Object = MibTableColumn
prtInPh1MlDlciSltIdx = _PrtInPh1MlDlciSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 2),
    _PrtInPh1MlDlciSltIdx_Type()
)
prtInPh1MlDlciSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciSltIdx.setStatus("mandatory")


class _PrtInPh1MlDlciPrtIdx_Type(Integer32):
    """Custom type prtInPh1MlDlciPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102,
              103)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103))
    )


_PrtInPh1MlDlciPrtIdx_Type.__name__ = "Integer32"
_PrtInPh1MlDlciPrtIdx_Object = MibTableColumn
prtInPh1MlDlciPrtIdx = _PrtInPh1MlDlciPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 3),
    _PrtInPh1MlDlciPrtIdx_Type()
)
prtInPh1MlDlciPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciPrtIdx.setStatus("mandatory")


class _PrtInPh1MlDlciIdx_Type(Integer32):
    """Custom type prtInPh1MlDlciIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtInPh1MlDlciIdx_Type.__name__ = "Integer32"
_PrtInPh1MlDlciIdx_Object = MibTableColumn
prtInPh1MlDlciIdx = _PrtInPh1MlDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 4),
    _PrtInPh1MlDlciIdx_Type()
)
prtInPh1MlDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciIdx.setStatus("mandatory")


class _PrtInPh1MlDlciValid_Type(Integer32):
    """Custom type prtInPh1MlDlciValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInPh1MlDlciValid_Type.__name__ = "Integer32"
_PrtInPh1MlDlciValid_Object = MibTableColumn
prtInPh1MlDlciValid = _PrtInPh1MlDlciValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 5),
    _PrtInPh1MlDlciValid_Type()
)
prtInPh1MlDlciValid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciValid.setStatus("mandatory")


class _PrtInPh1MlDlciIConSlt_Type(Integer32):
    """Custom type prtInPh1MlDlciIConSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2))
    )


_PrtInPh1MlDlciIConSlt_Type.__name__ = "Integer32"
_PrtInPh1MlDlciIConSlt_Object = MibTableColumn
prtInPh1MlDlciIConSlt = _PrtInPh1MlDlciIConSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 6),
    _PrtInPh1MlDlciIConSlt_Type()
)
prtInPh1MlDlciIConSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciIConSlt.setStatus("mandatory")


class _PrtInPh1MlDlciIConPrt_Type(Integer32):
    """Custom type prtInPh1MlDlciIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("clNMS", 99),
          ("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109),
          ("noConnect", 100))
    )


_PrtInPh1MlDlciIConPrt_Type.__name__ = "Integer32"
_PrtInPh1MlDlciIConPrt_Object = MibTableColumn
prtInPh1MlDlciIConPrt = _PrtInPh1MlDlciIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 7),
    _PrtInPh1MlDlciIConPrt_Type()
)
prtInPh1MlDlciIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciIConPrt.setStatus("mandatory")


class _PrtInPh1MlDlciIConDlci_Type(Integer32):
    """Custom type prtInPh1MlDlciIConDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtInPh1MlDlciIConDlci_Type.__name__ = "Integer32"
_PrtInPh1MlDlciIConDlci_Object = MibTableColumn
prtInPh1MlDlciIConDlci = _PrtInPh1MlDlciIConDlci_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 8),
    _PrtInPh1MlDlciIConDlci_Type()
)
prtInPh1MlDlciIConDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciIConDlci.setStatus("mandatory")


class _PrtInPh1MlDlciTxBc_Type(Integer32):
    """Custom type prtInPh1MlDlciTxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc1024Kbps", 21),
          ("txBc128Kbps", 13),
          ("txBc14200bps", 4),
          ("txBc19200bps", 5),
          ("txBc192Kbps", 14),
          ("txBc256Kbps", 15),
          ("txBc28800bps", 6),
          ("txBc32000bps", 7),
          ("txBc320Kbps", 16),
          ("txBc38400bps", 8),
          ("txBc384Kbps", 17),
          ("txBc448Kbps", 18),
          ("txBc48000bps", 9),
          ("txBc512Kbps", 19),
          ("txBc56000bps", 10),
          ("txBc57600bps", 11),
          ("txBc64Kbps", 12),
          ("txBc768Kbps", 20),
          ("txBc9600bps", 3),
          ("zero", 2))
    )


_PrtInPh1MlDlciTxBc_Type.__name__ = "Integer32"
_PrtInPh1MlDlciTxBc_Object = MibTableColumn
prtInPh1MlDlciTxBc = _PrtInPh1MlDlciTxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 9),
    _PrtInPh1MlDlciTxBc_Type()
)
prtInPh1MlDlciTxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciTxBc.setStatus("mandatory")


class _PrtInPh1MlDlciTxBe_Type(Integer32):
    """Custom type prtInPh1MlDlciTxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBe1024Kbps", 21),
          ("txBe128Kbps", 13),
          ("txBe14200bps", 4),
          ("txBe19200bps", 5),
          ("txBe192Kbps", 14),
          ("txBe256Kbps", 15),
          ("txBe28800bps", 6),
          ("txBe32000bps", 7),
          ("txBe320Kbps", 16),
          ("txBe38400bps", 8),
          ("txBe384Kbps", 17),
          ("txBe448Kbps", 18),
          ("txBe48000bps", 9),
          ("txBe512Kbps", 19),
          ("txBe56000bps", 10),
          ("txBe57600bps", 11),
          ("txBe64Kbps", 12),
          ("txBe768Kbps", 20),
          ("txBe9600bps", 3),
          ("zero", 2))
    )


_PrtInPh1MlDlciTxBe_Type.__name__ = "Integer32"
_PrtInPh1MlDlciTxBe_Object = MibTableColumn
prtInPh1MlDlciTxBe = _PrtInPh1MlDlciTxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 10),
    _PrtInPh1MlDlciTxBe_Type()
)
prtInPh1MlDlciTxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciTxBe.setStatus("mandatory")


class _PrtInPh1MlDlciRxBc_Type(Integer32):
    """Custom type prtInPh1MlDlciRxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc1024Kbps", 21),
          ("rxBc128Kbps", 13),
          ("rxBc14200bps", 4),
          ("rxBc19200bps", 5),
          ("rxBc192Kbps", 14),
          ("rxBc256Kbps", 15),
          ("rxBc28800bps", 6),
          ("rxBc32000bps", 7),
          ("rxBc320Kbps", 16),
          ("rxBc38400bps", 8),
          ("rxBc384Kbps", 17),
          ("rxBc448Kbps", 18),
          ("rxBc48000bps", 9),
          ("rxBc512Kbps", 19),
          ("rxBc56000bps", 10),
          ("rxBc57600bps", 11),
          ("rxBc64Kbps", 12),
          ("rxBc768Kbps", 20),
          ("rxBc9600bps", 3),
          ("zero", 2))
    )


_PrtInPh1MlDlciRxBc_Type.__name__ = "Integer32"
_PrtInPh1MlDlciRxBc_Object = MibTableColumn
prtInPh1MlDlciRxBc = _PrtInPh1MlDlciRxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 11),
    _PrtInPh1MlDlciRxBc_Type()
)
prtInPh1MlDlciRxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciRxBc.setStatus("mandatory")


class _PrtInPh1MlDlciRxBe_Type(Integer32):
    """Custom type prtInPh1MlDlciRxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBe1024Kbps", 21),
          ("rxBe128Kbps", 13),
          ("rxBe14200bps", 4),
          ("rxBe19200bps", 5),
          ("rxBe192Kbps", 14),
          ("rxBe256Kbps", 15),
          ("rxBe28800bps", 6),
          ("rxBe32000bps", 7),
          ("rxBe320Kbps", 16),
          ("rxBe38400bps", 8),
          ("rxBe384Kbps", 17),
          ("rxBe448Kbps", 18),
          ("rxBe48000bps", 9),
          ("rxBe512Kbps", 19),
          ("rxBe56000bps", 10),
          ("rxBe57600bps", 11),
          ("rxBe64Kbps", 12),
          ("rxBe768Kbps", 20),
          ("rxBe9600bps", 3),
          ("zero", 2))
    )


_PrtInPh1MlDlciRxBe_Type.__name__ = "Integer32"
_PrtInPh1MlDlciRxBe_Object = MibTableColumn
prtInPh1MlDlciRxBe = _PrtInPh1MlDlciRxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 12),
    _PrtInPh1MlDlciRxBe_Type()
)
prtInPh1MlDlciRxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciRxBe.setStatus("mandatory")


class _PrtInPh1MlDlciPriority_Type(Integer32):
    """Custom type prtInPh1MlDlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PrtInPh1MlDlciPriority_Type.__name__ = "Integer32"
_PrtInPh1MlDlciPriority_Object = MibTableColumn
prtInPh1MlDlciPriority = _PrtInPh1MlDlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 13),
    _PrtInPh1MlDlciPriority_Type()
)
prtInPh1MlDlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciPriority.setStatus("mandatory")


class _PrtInPh1MlDlciStatus_Type(Integer32):
    """Custom type prtInPh1MlDlciStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_PrtInPh1MlDlciStatus_Type.__name__ = "Integer32"
_PrtInPh1MlDlciStatus_Object = MibTableColumn
prtInPh1MlDlciStatus = _PrtInPh1MlDlciStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 14),
    _PrtInPh1MlDlciStatus_Type()
)
prtInPh1MlDlciStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciStatus.setStatus("mandatory")
_PrtPhMlCnfgTable_Object = MibTable
prtPhMlCnfgTable = _PrtPhMlCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5)
)
if mibBuilder.loadTexts:
    prtPhMlCnfgTable.setStatus("mandatory")
_PrtPhMlCnfgEntry_Object = MibTableRow
prtPhMlCnfgEntry = _PrtPhMlCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1)
)
prtPhMlCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtPhMlCnfgIdx"),
    (0, "DACS-MIB", "prtPhMlSltIdx"),
    (0, "DACS-MIB", "prtPhMlPrtIdx"),
)
if mibBuilder.loadTexts:
    prtPhMlCnfgEntry.setStatus("mandatory")


class _PrtPhMlCnfgIdx_Type(Integer32):
    """Custom type prtPhMlCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtPhMlCnfgIdx_Type.__name__ = "Integer32"
_PrtPhMlCnfgIdx_Object = MibTableColumn
prtPhMlCnfgIdx = _PrtPhMlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 1),
    _PrtPhMlCnfgIdx_Type()
)
prtPhMlCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhMlCnfgIdx.setStatus("mandatory")


class _PrtPhMlSltIdx_Type(Integer32):
    """Custom type prtPhMlSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtPhMlSltIdx_Type.__name__ = "Integer32"
_PrtPhMlSltIdx_Object = MibTableColumn
prtPhMlSltIdx = _PrtPhMlSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 2),
    _PrtPhMlSltIdx_Type()
)
prtPhMlSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhMlSltIdx.setStatus("mandatory")


class _PrtPhMlPrtIdx_Type(Integer32):
    """Custom type prtPhMlPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtPhMlPrtIdx_Type.__name__ = "Integer32"
_PrtPhMlPrtIdx_Object = MibTableColumn
prtPhMlPrtIdx = _PrtPhMlPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 3),
    _PrtPhMlPrtIdx_Type()
)
prtPhMlPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhMlPrtIdx.setStatus("mandatory")


class _PrtPhMlConnect_Type(Integer32):
    """Custom type prtPhMlConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtPhMlConnect_Type.__name__ = "Integer32"
_PrtPhMlConnect_Object = MibTableColumn
prtPhMlConnect = _PrtPhMlConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 4),
    _PrtPhMlConnect_Type()
)
prtPhMlConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlConnect.setStatus("mandatory")


class _PrtPhMlRate_Type(Integer32):
    """Custom type prtPhMlRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              6,
              8,
              10,
              12,
              14,
              16,
              18,
              20,
              22,
              24,
              26,
              28,
              30,
              32,
              34,
              36,
              38,
              40,
              42,
              44,
              46,
              48,
              50,
              52,
              54,
              56,
              58,
              60,
              62)
        )
    )
    namedValues = NamedValues(
        *(("r10x64eq640Kbps", 20),
          ("r11x64eq704Kbps", 22),
          ("r12x64eq768Kbps", 24),
          ("r13x64eq832Kbps", 26),
          ("r14x64eq896Kbps", 28),
          ("r15x64eq960Kbps", 30),
          ("r16x64eq1024Kbps", 32),
          ("r17x64eq1088Kbps", 34),
          ("r18x64eq1152Kbps", 36),
          ("r19x64eq1216Kbps", 38),
          ("r20x64eq1280Kbps", 40),
          ("r21x64eq1344Kbps", 42),
          ("r22x64eq1408Kbps", 44),
          ("r23x64eq1472Kbps", 46),
          ("r24x64eq1536Kbps", 48),
          ("r25x64eq1600Kbps", 50),
          ("r26x64eq1664Kbps", 52),
          ("r27x64eq1728Kbps", 54),
          ("r28x64eq1792Kbps", 56),
          ("r29x64eq1856Kbps", 58),
          ("r2x64eq128Kbps", 4),
          ("r30x64eq1920Kbps", 60),
          ("r31x64eq1984Kbps", 62),
          ("r3x64eq192Kbps", 6),
          ("r4x64eq256Kbps", 8),
          ("r5x64eq320Kbps", 10),
          ("r6x64eq384Kbps", 12),
          ("r7x64eq448Kbps", 14),
          ("r8x64eq512Kbps", 16),
          ("r9x64eq576Kbps", 18))
    )


_PrtPhMlRate_Type.__name__ = "Integer32"
_PrtPhMlRate_Object = MibTableColumn
prtPhMlRate = _PrtPhMlRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 5),
    _PrtPhMlRate_Type()
)
prtPhMlRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlRate.setStatus("mandatory")


class _PrtPhMlCAS_Type(Integer32):
    """Custom type prtPhMlCAS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtPhMlCAS_Type.__name__ = "Integer32"
_PrtPhMlCAS_Object = MibTableColumn
prtPhMlCAS = _PrtPhMlCAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 6),
    _PrtPhMlCAS_Type()
)
prtPhMlCAS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlCAS.setStatus("mandatory")


class _PrtPhMlClockMode_Type(Integer32):
    """Custom type prtPhMlClockMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 4),
          ("ext-dce", 3))
    )


_PrtPhMlClockMode_Type.__name__ = "Integer32"
_PrtPhMlClockMode_Object = MibTableColumn
prtPhMlClockMode = _PrtPhMlClockMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 7),
    _PrtPhMlClockMode_Type()
)
prtPhMlClockMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlClockMode.setStatus("mandatory")


class _PrtPhMlSatBuffer_Type(Integer32):
    """Custom type prtPhMlSatBuffer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtPhMlSatBuffer_Type.__name__ = "Integer32"
_PrtPhMlSatBuffer_Object = MibTableColumn
prtPhMlSatBuffer = _PrtPhMlSatBuffer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 8),
    _PrtPhMlSatBuffer_Type()
)
prtPhMlSatBuffer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlSatBuffer.setStatus("mandatory")


class _PrtPhMlDialProcess_Type(Integer32):
    """Custom type prtPhMlDialProcess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("callIn", 3),
          ("callOut", 4),
          ("no", 2),
          ("notApplicable", 1))
    )


_PrtPhMlDialProcess_Type.__name__ = "Integer32"
_PrtPhMlDialProcess_Object = MibTableColumn
prtPhMlDialProcess = _PrtPhMlDialProcess_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 9),
    _PrtPhMlDialProcess_Type()
)
prtPhMlDialProcess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlDialProcess.setStatus("mandatory")


class _PrtPhMlSyncRestore_Type(Integer32):
    """Custom type prtPhMlSyncRestore based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_PrtPhMlSyncRestore_Type.__name__ = "Integer32"
_PrtPhMlSyncRestore_Object = MibTableColumn
prtPhMlSyncRestore = _PrtPhMlSyncRestore_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 10),
    _PrtPhMlSyncRestore_Type()
)
prtPhMlSyncRestore.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlSyncRestore.setStatus("mandatory")


class _PrtPhMlBus_Type(Integer32):
    """Custom type prtPhMlBus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("busA", 2),
          ("busB", 3),
          ("none", 1))
    )


_PrtPhMlBus_Type.__name__ = "Integer32"
_PrtPhMlBus_Object = MibTableColumn
prtPhMlBus = _PrtPhMlBus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 11),
    _PrtPhMlBus_Type()
)
prtPhMlBus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlBus.setStatus("mandatory")


class _PrtPhMlMfSyncSlot_Type(Integer32):
    """Custom type prtPhMlMfSyncSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("none", 2))
    )


_PrtPhMlMfSyncSlot_Type.__name__ = "Integer32"
_PrtPhMlMfSyncSlot_Object = MibTableColumn
prtPhMlMfSyncSlot = _PrtPhMlMfSyncSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 12),
    _PrtPhMlMfSyncSlot_Type()
)
prtPhMlMfSyncSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlMfSyncSlot.setStatus("mandatory")
_PrtPhPlCnfg_ObjectIdentity = ObjectIdentity
prtPhPlCnfg = _PrtPhPlCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3)
)
_PrtExPhPlCnfgTable_Object = MibTable
prtExPhPlCnfgTable = _PrtExPhPlCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1)
)
if mibBuilder.loadTexts:
    prtExPhPlCnfgTable.setStatus("mandatory")
_PrtExPhPlCnfgEntry_Object = MibTableRow
prtExPhPlCnfgEntry = _PrtExPhPlCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1)
)
prtExPhPlCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExPhPlCnfgIdx"),
    (0, "DACS-MIB", "prtExPhPlSltIdx"),
    (0, "DACS-MIB", "prtExPhPlPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPhPlCnfgEntry.setStatus("mandatory")


class _PrtExPhPlCnfgIdx_Type(Integer32):
    """Custom type prtExPhPlCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPhPlCnfgIdx_Type.__name__ = "Integer32"
_PrtExPhPlCnfgIdx_Object = MibTableColumn
prtExPhPlCnfgIdx = _PrtExPhPlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 1),
    _PrtExPhPlCnfgIdx_Type()
)
prtExPhPlCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlCnfgIdx.setStatus("mandatory")


class _PrtExPhPlSltIdx_Type(Integer32):
    """Custom type prtExPhPlSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPhPlSltIdx_Type.__name__ = "Integer32"
_PrtExPhPlSltIdx_Object = MibTableColumn
prtExPhPlSltIdx = _PrtExPhPlSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 2),
    _PrtExPhPlSltIdx_Type()
)
prtExPhPlSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlSltIdx.setStatus("mandatory")


class _PrtExPhPlPrtIdx_Type(Integer32):
    """Custom type prtExPhPlPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtExPhPlPrtIdx_Type.__name__ = "Integer32"
_PrtExPhPlPrtIdx_Object = MibTableColumn
prtExPhPlPrtIdx = _PrtExPhPlPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 3),
    _PrtExPhPlPrtIdx_Type()
)
prtExPhPlPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlPrtIdx.setStatus("mandatory")


class _PrtExPhPlConnect_Type(Integer32):
    """Custom type prtExPhPlConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPhPlConnect_Type.__name__ = "Integer32"
_PrtExPhPlConnect_Object = MibTableColumn
prtExPhPlConnect = _PrtExPhPlConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 4),
    _PrtExPhPlConnect_Type()
)
prtExPhPlConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlConnect.setStatus("mandatory")


class _PrtExPhPlHRate_Type(Integer32):
    """Custom type prtExPhPlHRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r1008KbpsLE", 34),
          ("r1024KbpsE", 35),
          ("r1064KbpsE", 36),
          ("r1088KbpsE", 37),
          ("r1120KbpsE", 38),
          ("r112KbpsNLE", 6),
          ("r1152KbpsLE", 39),
          ("r115d2KbpsNLE", 72),
          ("r1176KbpsE", 40),
          ("r1216KbpsE", 41),
          ("r1232KbpsE", 42),
          ("r1280KbpsE", 43),
          ("r1288KbpsE", 44),
          ("r128KbpsNLE", 7),
          ("r1344KbpsNLE", 45),
          ("r1400KbpsE", 46),
          ("r1408KbpsE", 47),
          ("r1456KbpsE", 48),
          ("r1472KbpsE", 49),
          ("r14d4KbpsNLE", 66),
          ("r1512KbpsE", 50),
          ("r1536KbpsE", 51),
          ("r1568KbpsE", 52),
          ("r1600KbpsE", 53),
          ("r1624KbpsE", 54),
          ("r1664KbpsE", 55),
          ("r1680KbpsE", 56),
          ("r168KbpsNLE", 8),
          ("r16KbpsNLE", 67),
          ("r1728KbpsE", 57),
          ("r1736KbpsE", 58),
          ("r1792KbpsNLE", 59),
          ("r1856KbpsE", 60),
          ("r1920KbpsE", 61),
          ("r192KbpsNLE", 9),
          ("r1984KbpsE", 62),
          ("r19d2KbpsNLE", 68),
          ("r2048KbpsE", 63),
          ("r224KbpsNLE", 10),
          ("r24000bps", 73),
          ("r256KbpsNLE", 11),
          ("r280KbpsE", 12),
          ("r28d8KbpsNLE", 69),
          ("r320KbpsE", 13),
          ("r32KbpsNLE", 2),
          ("r336KbpsNLE", 14),
          ("r384KbpsNLE", 15),
          ("r38d4KbpsNLE", 70),
          ("r392KbpsE", 16),
          ("r448KbpsNLE", 17),
          ("r48KbpsNLE", 3),
          ("r504KbpsLE", 18),
          ("r512KbpsE", 19),
          ("r560KbpsE", 20),
          ("r56KbpsNLE", 4),
          ("r576KbpsLE", 21),
          ("r57d6KbpsNLE", 71),
          ("r616KbpsE", 22),
          ("r640KbpsE", 23),
          ("r64KbpsNLE", 5),
          ("r672KbpsNLE", 24),
          ("r704KbpsE", 25),
          ("r728KbpsE", 26),
          ("r768KbpsNLE", 27),
          ("r784KbpsE", 28),
          ("r832KbpsE", 29),
          ("r840KbpsE", 30),
          ("r896KbpsNLE", 31),
          ("r952KbpsE", 32),
          ("r960KbpsE", 33),
          ("r9d6KbpsNLE", 65))
    )


_PrtExPhPlHRate_Type.__name__ = "Integer32"
_PrtExPhPlHRate_Object = MibTableColumn
prtExPhPlHRate = _PrtExPhPlHRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 5),
    _PrtExPhPlHRate_Type()
)
prtExPhPlHRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlHRate.setStatus("mandatory")


class _PrtExPhPlLRate_Type(Integer32):
    """Custom type prtExPhPlLRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r100bpsNLE", 21),
          ("r112000bps", 18),
          ("r115200bps", 19),
          ("r1200bpsNLE", 5),
          ("r128000bps", 22),
          ("r14400bpsLE", 9),
          ("r16000bpsNLE", 20),
          ("r19200bpsNLE", 10),
          ("r24000bps", 23),
          ("r2400bpsNLE", 6),
          ("r28800bpsLE", 11),
          ("r300bpsNLE", 2),
          ("r32000bpsNLE", 12),
          ("r38400bpsNLE", 13),
          ("r48000bpsNLE", 14),
          ("r4800bpsNLE", 7),
          ("r56000bpsNLE", 15),
          ("r57600bpsLE", 16),
          ("r600bpsNLE", 3),
          ("r64000bpsNLE", 17),
          ("r800bpsNLE", 4),
          ("r9600bpsNLE", 8))
    )


_PrtExPhPlLRate_Type.__name__ = "Integer32"
_PrtExPhPlLRate_Object = MibTableColumn
prtExPhPlLRate = _PrtExPhPlLRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 6),
    _PrtExPhPlLRate_Type()
)
prtExPhPlLRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlLRate.setStatus("mandatory")


class _PrtExPhPlProtocol_Type(Integer32):
    """Custom type prtExPhPlProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("activePPP", 8),
          ("async", 6),
          ("asyncReliable", 7),
          ("fr", 1),
          ("frPlus", 2),
          ("hdlcSdlc", 4),
          ("pCellRelay", 3),
          ("pppAgent", 10),
          ("slip", 9),
          ("slipAgent", 11),
          ("sna", 13),
          ("transparent", 12),
          ("transparentHdlc", 5))
    )


_PrtExPhPlProtocol_Type.__name__ = "Integer32"
_PrtExPhPlProtocol_Object = MibTableColumn
prtExPhPlProtocol = _PrtExPhPlProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 7),
    _PrtExPhPlProtocol_Type()
)
prtExPhPlProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlProtocol.setStatus("mandatory")


class _PrtExPhPlConnectionTyp_Type(Integer32):
    """Custom type prtExPhPlConnectionTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("otherNet", 4),
          ("pubNet", 5),
          ("sameNetManaged", 1),
          ("sameNetNotMana", 2),
          ("user", 3))
    )


_PrtExPhPlConnectionTyp_Type.__name__ = "Integer32"
_PrtExPhPlConnectionTyp_Object = MibTableColumn
prtExPhPlConnectionTyp = _PrtExPhPlConnectionTyp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 8),
    _PrtExPhPlConnectionTyp_Type()
)
prtExPhPlConnectionTyp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlConnectionTyp.setStatus("mandatory")


class _PrtExPhPlClkMode_Type(Integer32):
    """Custom type prtExPhPlClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 3),
          ("extDce", 2),
          ("int", 4),
          ("lbt", 5))
    )


_PrtExPhPlClkMode_Type.__name__ = "Integer32"
_PrtExPhPlClkMode_Object = MibTableColumn
prtExPhPlClkMode = _PrtExPhPlClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 9),
    _PrtExPhPlClkMode_Type()
)
prtExPhPlClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlClkMode.setStatus("mandatory")


class _PrtExPhPlDceClkSrc_Type(Integer32):
    """Custom type prtExPhPlDceClkSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("nodalTiming", 3),
          ("notApplicable", 1))
    )


_PrtExPhPlDceClkSrc_Type.__name__ = "Integer32"
_PrtExPhPlDceClkSrc_Object = MibTableColumn
prtExPhPlDceClkSrc = _PrtExPhPlDceClkSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 10),
    _PrtExPhPlDceClkSrc_Type()
)
prtExPhPlDceClkSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDceClkSrc.setStatus("mandatory")


class _PrtExPhPlCongResponse_Type(Integer32):
    """Custom type prtExPhPlCongResponse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flowControl", 3),
          ("no", 2),
          ("toFlowControl", 4))
    )


_PrtExPhPlCongResponse_Type.__name__ = "Integer32"
_PrtExPhPlCongResponse_Object = MibTableColumn
prtExPhPlCongResponse = _PrtExPhPlCongResponse_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 11),
    _PrtExPhPlCongResponse_Type()
)
prtExPhPlCongResponse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlCongResponse.setStatus("mandatory")


class _PrtExPhPlCongLevel_Type(Integer32):
    """Custom type prtExPhPlCongLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 70),
    )


_PrtExPhPlCongLevel_Type.__name__ = "Integer32"
_PrtExPhPlCongLevel_Object = MibTableColumn
prtExPhPlCongLevel = _PrtExPhPlCongLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 12),
    _PrtExPhPlCongLevel_Type()
)
prtExPhPlCongLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlCongLevel.setStatus("mandatory")


class _PrtExPhPlTc_Type(Integer32):
    """Custom type prtExPhPlTc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("tc1sec", 1),
          ("tc2sec", 2),
          ("tc3sec", 3),
          ("tc4sec", 4))
    )


_PrtExPhPlTc_Type.__name__ = "Integer32"
_PrtExPhPlTc_Object = MibTableColumn
prtExPhPlTc = _PrtExPhPlTc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 13),
    _PrtExPhPlTc_Type()
)
prtExPhPlTc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlTc.setStatus("mandatory")


class _PrtExPhPlFlowControl_Type(Integer32):
    """Custom type prtExPhPlFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("dtrCts", 5),
          ("fecnBecn", 3),
          ("none", 2),
          ("speedReduction", 6),
          ("xonXoff", 4))
    )


_PrtExPhPlFlowControl_Type.__name__ = "Integer32"
_PrtExPhPlFlowControl_Object = MibTableColumn
prtExPhPlFlowControl = _PrtExPhPlFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 14),
    _PrtExPhPlFlowControl_Type()
)
prtExPhPlFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFlowControl.setStatus("mandatory")


class _PrtExPhPlDcdRts_Type(Integer32):
    """Custom type prtExPhPlDcdRts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 3),
          ("notApplicable", 1),
          ("on", 2))
    )


_PrtExPhPlDcdRts_Type.__name__ = "Integer32"
_PrtExPhPlDcdRts_Object = MibTableColumn
prtExPhPlDcdRts = _PrtExPhPlDcdRts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 15),
    _PrtExPhPlDcdRts_Type()
)
prtExPhPlDcdRts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDcdRts.setStatus("mandatory")


class _PrtExPhPlDcdRtsControlPath_Type(Integer32):
    """Custom type prtExPhPlDcdRtsControlPath based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtExPhPlDcdRtsControlPath_Type.__name__ = "Integer32"
_PrtExPhPlDcdRtsControlPath_Object = MibTableColumn
prtExPhPlDcdRtsControlPath = _PrtExPhPlDcdRtsControlPath_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 16),
    _PrtExPhPlDcdRtsControlPath_Type()
)
prtExPhPlDcdRtsControlPath.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDcdRtsControlPath.setStatus("mandatory")


class _PrtExPhPlDataBits_Type(Integer32):
    """Custom type prtExPhPlDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dataBits7Bits", 2),
          ("dataBits8Bits", 3),
          ("notApplicable", 1))
    )


_PrtExPhPlDataBits_Type.__name__ = "Integer32"
_PrtExPhPlDataBits_Object = MibTableColumn
prtExPhPlDataBits = _PrtExPhPlDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 17),
    _PrtExPhPlDataBits_Type()
)
prtExPhPlDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDataBits.setStatus("mandatory")


class _PrtExPhPlParity_Type(Integer32):
    """Custom type prtExPhPlParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("none", 4),
          ("notApplicable", 1),
          ("odd", 2))
    )


_PrtExPhPlParity_Type.__name__ = "Integer32"
_PrtExPhPlParity_Object = MibTableColumn
prtExPhPlParity = _PrtExPhPlParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 18),
    _PrtExPhPlParity_Type()
)
prtExPhPlParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlParity.setStatus("mandatory")


class _PrtExPhPlStopBits_Type(Integer32):
    """Custom type prtExPhPlStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("sb1Bit", 2),
          ("sb1dot5Bits", 3),
          ("sb2Bits", 4))
    )


_PrtExPhPlStopBits_Type.__name__ = "Integer32"
_PrtExPhPlStopBits_Object = MibTableColumn
prtExPhPlStopBits = _PrtExPhPlStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 19),
    _PrtExPhPlStopBits_Type()
)
prtExPhPlStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlStopBits.setStatus("mandatory")
_PrtExPhPlLXon_Type = Integer32
_PrtExPhPlLXon_Object = MibTableColumn
prtExPhPlLXon = _PrtExPhPlLXon_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 20),
    _PrtExPhPlLXon_Type()
)
prtExPhPlLXon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlLXon.setStatus("mandatory")
_PrtExPhPlLXoff_Type = Integer32
_PrtExPhPlLXoff_Object = MibTableColumn
prtExPhPlLXoff = _PrtExPhPlLXoff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 21),
    _PrtExPhPlLXoff_Type()
)
prtExPhPlLXoff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlLXoff.setStatus("mandatory")


class _PrtExPhPlFrMngProt_Type(Integer32):
    """Custom type prtExPhPlFrMngProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("annexA", 5),
          ("ansiT1", 4),
          ("lmi", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtExPhPlFrMngProt_Type.__name__ = "Integer32"
_PrtExPhPlFrMngProt_Object = MibTableColumn
prtExPhPlFrMngProt = _PrtExPhPlFrMngProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 22),
    _PrtExPhPlFrMngProt_Type()
)
prtExPhPlFrMngProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFrMngProt.setStatus("mandatory")


class _PrtExPhPlEnqPeriod_Type(Integer32):
    """Custom type prtExPhPlEnqPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_PrtExPhPlEnqPeriod_Type.__name__ = "Integer32"
_PrtExPhPlEnqPeriod_Object = MibTableColumn
prtExPhPlEnqPeriod = _PrtExPhPlEnqPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 23),
    _PrtExPhPlEnqPeriod_Type()
)
prtExPhPlEnqPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlEnqPeriod.setStatus("mandatory")


class _PrtExPhPlFullRptPeriod_Type(Integer32):
    """Custom type prtExPhPlFullRptPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPhPlFullRptPeriod_Type.__name__ = "Integer32"
_PrtExPhPlFullRptPeriod_Object = MibTableColumn
prtExPhPlFullRptPeriod = _PrtExPhPlFullRptPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 24),
    _PrtExPhPlFullRptPeriod_Type()
)
prtExPhPlFullRptPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFullRptPeriod.setStatus("mandatory")


class _PrtExPhPlFrWindowSize_Type(Integer32):
    """Custom type prtExPhPlFrWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_PrtExPhPlFrWindowSize_Type.__name__ = "Integer32"
_PrtExPhPlFrWindowSize_Object = MibTableColumn
prtExPhPlFrWindowSize = _PrtExPhPlFrWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 25),
    _PrtExPhPlFrWindowSize_Type()
)
prtExPhPlFrWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFrWindowSize.setStatus("mandatory")


class _PrtExPhPlErrorsThreshold_Type(Integer32):
    """Custom type prtExPhPlErrorsThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_PrtExPhPlErrorsThreshold_Type.__name__ = "Integer32"
_PrtExPhPlErrorsThreshold_Object = MibTableColumn
prtExPhPlErrorsThreshold = _PrtExPhPlErrorsThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 26),
    _PrtExPhPlErrorsThreshold_Type()
)
prtExPhPlErrorsThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlErrorsThreshold.setStatus("mandatory")


class _PrtExPhPlPvcCreateMsg_Type(Integer32):
    """Custom type prtExPhPlPvcCreateMsg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPhPlPvcCreateMsg_Type.__name__ = "Integer32"
_PrtExPhPlPvcCreateMsg_Object = MibTableColumn
prtExPhPlPvcCreateMsg = _PrtExPhPlPvcCreateMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 27),
    _PrtExPhPlPvcCreateMsg_Type()
)
prtExPhPlPvcCreateMsg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlPvcCreateMsg.setStatus("mandatory")


class _PrtExPhPlCllmMsg_Type(Integer32):
    """Custom type prtExPhPlCllmMsg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPhPlCllmMsg_Type.__name__ = "Integer32"
_PrtExPhPlCllmMsg_Object = MibTableColumn
prtExPhPlCllmMsg = _PrtExPhPlCllmMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 28),
    _PrtExPhPlCllmMsg_Type()
)
prtExPhPlCllmMsg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlCllmMsg.setStatus("mandatory")


class _PrtExPhPlProtDelayLevel_Type(Integer32):
    """Custom type prtExPhPlProtDelayLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("s150Byte", 3),
          ("s264Byte", 4),
          ("s36Byte", 2),
          ("s378Byte", 5),
          ("s492Byte", 6))
    )


_PrtExPhPlProtDelayLevel_Type.__name__ = "Integer32"
_PrtExPhPlProtDelayLevel_Object = MibTableColumn
prtExPhPlProtDelayLevel = _PrtExPhPlProtDelayLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 29),
    _PrtExPhPlProtDelayLevel_Type()
)
prtExPhPlProtDelayLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlProtDelayLevel.setStatus("mandatory")


class _PrtExPhPlClockEncoding_Type(Integer32):
    """Custom type prtExPhPlClockEncoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("diffManchester", 6),
          ("fm0", 4),
          ("manchester", 5),
          ("notApplicable", 1),
          ("nrz", 2),
          ("nrzI", 3))
    )


_PrtExPhPlClockEncoding_Type.__name__ = "Integer32"
_PrtExPhPlClockEncoding_Object = MibTableColumn
prtExPhPlClockEncoding = _PrtExPhPlClockEncoding_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 30),
    _PrtExPhPlClockEncoding_Type()
)
prtExPhPlClockEncoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlClockEncoding.setStatus("mandatory")


class _PrtExPhPlMinSeparators_Type(Integer32):
    """Custom type prtExPhPlMinSeparators based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_PrtExPhPlMinSeparators_Type.__name__ = "Integer32"
_PrtExPhPlMinSeparators_Object = MibTableColumn
prtExPhPlMinSeparators = _PrtExPhPlMinSeparators_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 31),
    _PrtExPhPlMinSeparators_Type()
)
prtExPhPlMinSeparators.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlMinSeparators.setStatus("mandatory")


class _PrtExPhPlCcittCrc_Type(Integer32):
    """Custom type prtExPhPlCcittCrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("crc16", 2),
          ("crc32", 3),
          ("notApplicable", 1))
    )


_PrtExPhPlCcittCrc_Type.__name__ = "Integer32"
_PrtExPhPlCcittCrc_Object = MibTableColumn
prtExPhPlCcittCrc = _PrtExPhPlCcittCrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 32),
    _PrtExPhPlCcittCrc_Type()
)
prtExPhPlCcittCrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlCcittCrc.setStatus("mandatory")


class _PrtExPhPlFrameSeparator_Type(Integer32):
    """Custom type prtExPhPlFrameSeparator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("flags", 3),
          ("idles", 2),
          ("notApplicable", 1))
    )


_PrtExPhPlFrameSeparator_Type.__name__ = "Integer32"
_PrtExPhPlFrameSeparator_Object = MibTableColumn
prtExPhPlFrameSeparator = _PrtExPhPlFrameSeparator_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 33),
    _PrtExPhPlFrameSeparator_Type()
)
prtExPhPlFrameSeparator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFrameSeparator.setStatus("mandatory")
_PrtExPhPlDlciTable_Object = MibTable
prtExPhPlDlciTable = _PrtExPhPlDlciTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2)
)
if mibBuilder.loadTexts:
    prtExPhPlDlciTable.setStatus("mandatory")
_PrtExPhPlDlciEntry_Object = MibTableRow
prtExPhPlDlciEntry = _PrtExPhPlDlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1)
)
prtExPhPlDlciEntry.setIndexNames(
    (0, "DACS-MIB", "prtExPhPlDlciCnfgIdx"),
    (0, "DACS-MIB", "prtExPhPlDlciSltIdx"),
    (0, "DACS-MIB", "prtExPhPlDlciPrtIdx"),
    (0, "DACS-MIB", "prtExPhPlDlciIdx"),
)
if mibBuilder.loadTexts:
    prtExPhPlDlciEntry.setStatus("mandatory")


class _PrtExPhPlDlciCnfgIdx_Type(Integer32):
    """Custom type prtExPhPlDlciCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPhPlDlciCnfgIdx_Type.__name__ = "Integer32"
_PrtExPhPlDlciCnfgIdx_Object = MibTableColumn
prtExPhPlDlciCnfgIdx = _PrtExPhPlDlciCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 1),
    _PrtExPhPlDlciCnfgIdx_Type()
)
prtExPhPlDlciCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciCnfgIdx.setStatus("mandatory")


class _PrtExPhPlDlciSltIdx_Type(Integer32):
    """Custom type prtExPhPlDlciSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPhPlDlciSltIdx_Type.__name__ = "Integer32"
_PrtExPhPlDlciSltIdx_Object = MibTableColumn
prtExPhPlDlciSltIdx = _PrtExPhPlDlciSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 2),
    _PrtExPhPlDlciSltIdx_Type()
)
prtExPhPlDlciSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciSltIdx.setStatus("mandatory")


class _PrtExPhPlDlciPrtIdx_Type(Integer32):
    """Custom type prtExPhPlDlciPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtExPhPlDlciPrtIdx_Type.__name__ = "Integer32"
_PrtExPhPlDlciPrtIdx_Object = MibTableColumn
prtExPhPlDlciPrtIdx = _PrtExPhPlDlciPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 3),
    _PrtExPhPlDlciPrtIdx_Type()
)
prtExPhPlDlciPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciPrtIdx.setStatus("mandatory")


class _PrtExPhPlDlciIdx_Type(Integer32):
    """Custom type prtExPhPlDlciIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtExPhPlDlciIdx_Type.__name__ = "Integer32"
_PrtExPhPlDlciIdx_Object = MibTableColumn
prtExPhPlDlciIdx = _PrtExPhPlDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 4),
    _PrtExPhPlDlciIdx_Type()
)
prtExPhPlDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciIdx.setStatus("mandatory")


class _PrtExPhPlDlciValid_Type(Integer32):
    """Custom type prtExPhPlDlciValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPhPlDlciValid_Type.__name__ = "Integer32"
_PrtExPhPlDlciValid_Object = MibTableColumn
prtExPhPlDlciValid = _PrtExPhPlDlciValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 5),
    _PrtExPhPlDlciValid_Type()
)
prtExPhPlDlciValid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciValid.setStatus("mandatory")


class _PrtExPhPlDlciIConSlt_Type(Integer32):
    """Custom type prtExPhPlDlciIConSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_PrtExPhPlDlciIConSlt_Type.__name__ = "Integer32"
_PrtExPhPlDlciIConSlt_Object = MibTableColumn
prtExPhPlDlciIConSlt = _PrtExPhPlDlciIConSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 6),
    _PrtExPhPlDlciIConSlt_Type()
)
prtExPhPlDlciIConSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciIConSlt.setStatus("mandatory")


class _PrtExPhPlDlciIConPrt_Type(Integer32):
    """Custom type prtExPhPlDlciIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110)
        )
    )
    namedValues = NamedValues(
        *(("clNMS", 99),
          ("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109),
          ("noConnect", 100))
    )


_PrtExPhPlDlciIConPrt_Type.__name__ = "Integer32"
_PrtExPhPlDlciIConPrt_Object = MibTableColumn
prtExPhPlDlciIConPrt = _PrtExPhPlDlciIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 7),
    _PrtExPhPlDlciIConPrt_Type()
)
prtExPhPlDlciIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciIConPrt.setStatus("mandatory")


class _PrtExPhPlDlciIConDlci_Type(Integer32):
    """Custom type prtExPhPlDlciIConDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtExPhPlDlciIConDlci_Type.__name__ = "Integer32"
_PrtExPhPlDlciIConDlci_Object = MibTableColumn
prtExPhPlDlciIConDlci = _PrtExPhPlDlciIConDlci_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 8),
    _PrtExPhPlDlciIConDlci_Type()
)
prtExPhPlDlciIConDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciIConDlci.setStatus("mandatory")


class _PrtExPhPlDlciTxBc_Type(Integer32):
    """Custom type prtExPhPlDlciTxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc1024Kbps", 21),
          ("txBc112Kbps", 26),
          ("txBc128Kbps", 13),
          ("txBc14400bps", 4),
          ("txBc16000bps", 25),
          ("txBc19200bps", 5),
          ("txBc192Kbps", 14),
          ("txBc256Kbps", 15),
          ("txBc28800bps", 6),
          ("txBc32000bps", 7),
          ("txBc320Kbps", 16),
          ("txBc38400bps", 8),
          ("txBc384Kbps", 17),
          ("txBc448Kbps", 18),
          ("txBc48000bps", 9),
          ("txBc512Kbps", 19),
          ("txBc56000bps", 10),
          ("txBc57600bps", 11),
          ("txBc64Kbps", 12),
          ("txBc768Kbps", 20),
          ("txBc9600bps", 3),
          ("zero", 2))
    )


_PrtExPhPlDlciTxBc_Type.__name__ = "Integer32"
_PrtExPhPlDlciTxBc_Object = MibTableColumn
prtExPhPlDlciTxBc = _PrtExPhPlDlciTxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 9),
    _PrtExPhPlDlciTxBc_Type()
)
prtExPhPlDlciTxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciTxBc.setStatus("mandatory")


class _PrtExPhPlDlciTxBe_Type(Integer32):
    """Custom type prtExPhPlDlciTxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc112Kbps", 26),
          ("txBc16000bps", 25),
          ("txBe1024Kbps", 21),
          ("txBe128Kbps", 13),
          ("txBe14400bps", 4),
          ("txBe19200bps", 5),
          ("txBe192Kbps", 14),
          ("txBe256Kbps", 15),
          ("txBe28800bps", 6),
          ("txBe32000bps", 7),
          ("txBe320Kbps", 16),
          ("txBe38400bps", 8),
          ("txBe384Kbps", 17),
          ("txBe448Kbps", 18),
          ("txBe48000bps", 9),
          ("txBe512Kbps", 19),
          ("txBe56000bps", 10),
          ("txBe57600bps", 11),
          ("txBe64Kbps", 12),
          ("txBe768Kbps", 20),
          ("txBe9600bps", 3),
          ("zero", 2))
    )


_PrtExPhPlDlciTxBe_Type.__name__ = "Integer32"
_PrtExPhPlDlciTxBe_Object = MibTableColumn
prtExPhPlDlciTxBe = _PrtExPhPlDlciTxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 10),
    _PrtExPhPlDlciTxBe_Type()
)
prtExPhPlDlciTxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciTxBe.setStatus("mandatory")


class _PrtExPhPlDlciRxBc_Type(Integer32):
    """Custom type prtExPhPlDlciRxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc1024Kbps", 21),
          ("rxBc112Kbps", 26),
          ("rxBc128Kbps", 13),
          ("rxBc14400bps", 4),
          ("rxBc16000bps", 25),
          ("rxBc19200bps", 5),
          ("rxBc192Kbps", 14),
          ("rxBc256Kbps", 15),
          ("rxBc28800bps", 6),
          ("rxBc32000bps", 7),
          ("rxBc320Kbps", 16),
          ("rxBc38400bps", 8),
          ("rxBc384Kbps", 17),
          ("rxBc448Kbps", 18),
          ("rxBc48000bps", 9),
          ("rxBc512Kbps", 19),
          ("rxBc56000bps", 10),
          ("rxBc57600bps", 11),
          ("rxBc64Kbps", 12),
          ("rxBc768Kbps", 20),
          ("rxBc9600bps", 3),
          ("zero", 2))
    )


_PrtExPhPlDlciRxBc_Type.__name__ = "Integer32"
_PrtExPhPlDlciRxBc_Object = MibTableColumn
prtExPhPlDlciRxBc = _PrtExPhPlDlciRxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 11),
    _PrtExPhPlDlciRxBc_Type()
)
prtExPhPlDlciRxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciRxBc.setStatus("mandatory")


class _PrtExPhPlDlciRxBe_Type(Integer32):
    """Custom type prtExPhPlDlciRxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc112Kbps", 26),
          ("rxBc16000bps", 25),
          ("rxBe1024Kbps", 21),
          ("rxBe128Kbps", 13),
          ("rxBe14400bps", 4),
          ("rxBe19200bps", 5),
          ("rxBe192Kbps", 14),
          ("rxBe256Kbps", 15),
          ("rxBe28800bps", 6),
          ("rxBe32000bps", 7),
          ("rxBe320Kbps", 16),
          ("rxBe38400bps", 8),
          ("rxBe384Kbps", 17),
          ("rxBe448Kbps", 18),
          ("rxBe48000bps", 9),
          ("rxBe512Kbps", 19),
          ("rxBe56000bps", 10),
          ("rxBe57600bps", 11),
          ("rxBe64Kbps", 12),
          ("rxBe768Kbps", 20),
          ("rxBe9600bps", 3),
          ("zero", 2))
    )


_PrtExPhPlDlciRxBe_Type.__name__ = "Integer32"
_PrtExPhPlDlciRxBe_Object = MibTableColumn
prtExPhPlDlciRxBe = _PrtExPhPlDlciRxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 12),
    _PrtExPhPlDlciRxBe_Type()
)
prtExPhPlDlciRxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciRxBe.setStatus("mandatory")


class _PrtExPhPlDlciPriority_Type(Integer32):
    """Custom type prtExPhPlDlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PrtExPhPlDlciPriority_Type.__name__ = "Integer32"
_PrtExPhPlDlciPriority_Object = MibTableColumn
prtExPhPlDlciPriority = _PrtExPhPlDlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 13),
    _PrtExPhPlDlciPriority_Type()
)
prtExPhPlDlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciPriority.setStatus("mandatory")


class _PrtExPhPlDlciStatus_Type(Integer32):
    """Custom type prtExPhPlDlciStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_PrtExPhPlDlciStatus_Type.__name__ = "Integer32"
_PrtExPhPlDlciStatus_Object = MibTableColumn
prtExPhPlDlciStatus = _PrtExPhPlDlciStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 14),
    _PrtExPhPlDlciStatus_Type()
)
prtExPhPlDlciStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciStatus.setStatus("mandatory")
_PrtExPhPlModemTable_Object = MibTable
prtExPhPlModemTable = _PrtExPhPlModemTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3)
)
if mibBuilder.loadTexts:
    prtExPhPlModemTable.setStatus("mandatory")
_PrtExPhPlModemEntry_Object = MibTableRow
prtExPhPlModemEntry = _PrtExPhPlModemEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1)
)
prtExPhPlModemEntry.setIndexNames(
    (0, "DACS-MIB", "prtExPhPlModemCnfgIdx"),
    (0, "DACS-MIB", "prtExPhPlModemSltIdx"),
    (0, "DACS-MIB", "prtExPhPlModemPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPhPlModemEntry.setStatus("mandatory")


class _PrtExPhPlModemCnfgIdx_Type(Integer32):
    """Custom type prtExPhPlModemCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPhPlModemCnfgIdx_Type.__name__ = "Integer32"
_PrtExPhPlModemCnfgIdx_Object = MibTableColumn
prtExPhPlModemCnfgIdx = _PrtExPhPlModemCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 1),
    _PrtExPhPlModemCnfgIdx_Type()
)
prtExPhPlModemCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlModemCnfgIdx.setStatus("mandatory")


class _PrtExPhPlModemSltIdx_Type(Integer32):
    """Custom type prtExPhPlModemSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPhPlModemSltIdx_Type.__name__ = "Integer32"
_PrtExPhPlModemSltIdx_Object = MibTableColumn
prtExPhPlModemSltIdx = _PrtExPhPlModemSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 2),
    _PrtExPhPlModemSltIdx_Type()
)
prtExPhPlModemSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlModemSltIdx.setStatus("mandatory")


class _PrtExPhPlModemPrtIdx_Type(Integer32):
    """Custom type prtExPhPlModemPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtExPhPlModemPrtIdx_Type.__name__ = "Integer32"
_PrtExPhPlModemPrtIdx_Object = MibTableColumn
prtExPhPlModemPrtIdx = _PrtExPhPlModemPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 3),
    _PrtExPhPlModemPrtIdx_Type()
)
prtExPhPlModemPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlModemPrtIdx.setStatus("mandatory")


class _PrtExPhPlModemStatus_Type(Integer32):
    """Custom type prtExPhPlModemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_PrtExPhPlModemStatus_Type.__name__ = "Integer32"
_PrtExPhPlModemStatus_Object = MibTableColumn
prtExPhPlModemStatus = _PrtExPhPlModemStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 4),
    _PrtExPhPlModemStatus_Type()
)
prtExPhPlModemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemStatus.setStatus("mandatory")


class _PrtExPhPlModemActivate_Type(Integer32):
    """Custom type prtExPhPlModemActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("always", 3),
          ("notApplicable", 255),
          ("onFirstFrame", 2))
    )


_PrtExPhPlModemActivate_Type.__name__ = "Integer32"
_PrtExPhPlModemActivate_Object = MibTableColumn
prtExPhPlModemActivate = _PrtExPhPlModemActivate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 5),
    _PrtExPhPlModemActivate_Type()
)
prtExPhPlModemActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemActivate.setStatus("mandatory")
_PrtExPhPlModemMaxIdleTime_Type = Integer32
_PrtExPhPlModemMaxIdleTime_Object = MibTableColumn
prtExPhPlModemMaxIdleTime = _PrtExPhPlModemMaxIdleTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 6),
    _PrtExPhPlModemMaxIdleTime_Type()
)
prtExPhPlModemMaxIdleTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemMaxIdleTime.setStatus("mandatory")
_PrtExPhPlModemTimeBtwnCalls_Type = Integer32
_PrtExPhPlModemTimeBtwnCalls_Object = MibTableColumn
prtExPhPlModemTimeBtwnCalls = _PrtExPhPlModemTimeBtwnCalls_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 7),
    _PrtExPhPlModemTimeBtwnCalls_Type()
)
prtExPhPlModemTimeBtwnCalls.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemTimeBtwnCalls.setStatus("mandatory")
_PrtExPhPlModemCallDelay_Type = Integer32
_PrtExPhPlModemCallDelay_Object = MibTableColumn
prtExPhPlModemCallDelay = _PrtExPhPlModemCallDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 8),
    _PrtExPhPlModemCallDelay_Type()
)
prtExPhPlModemCallDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemCallDelay.setStatus("mandatory")
_PrtLs2Cnfg_ObjectIdentity = ObjectIdentity
prtLs2Cnfg = _PrtLs2Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4)
)
_PrtExLs2CnfgTable_Object = MibTable
prtExLs2CnfgTable = _PrtExLs2CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1)
)
if mibBuilder.loadTexts:
    prtExLs2CnfgTable.setStatus("mandatory")
_PrtExLs2CnfgEntry_Object = MibTableRow
prtExLs2CnfgEntry = _PrtExLs2CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1)
)
prtExLs2CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExLs2CnfgIdx"),
    (0, "DACS-MIB", "prtExLs2SltIdx"),
    (0, "DACS-MIB", "prtExLs2PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExLs2CnfgEntry.setStatus("mandatory")


class _PrtExLs2CnfgIdx_Type(Integer32):
    """Custom type prtExLs2CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExLs2CnfgIdx_Type.__name__ = "Integer32"
_PrtExLs2CnfgIdx_Object = MibTableColumn
prtExLs2CnfgIdx = _PrtExLs2CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 1),
    _PrtExLs2CnfgIdx_Type()
)
prtExLs2CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs2CnfgIdx.setStatus("mandatory")


class _PrtExLs2SltIdx_Type(Integer32):
    """Custom type prtExLs2SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExLs2SltIdx_Type.__name__ = "Integer32"
_PrtExLs2SltIdx_Object = MibTableColumn
prtExLs2SltIdx = _PrtExLs2SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 2),
    _PrtExLs2SltIdx_Type()
)
prtExLs2SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs2SltIdx.setStatus("mandatory")


class _PrtExLs2PrtIdx_Type(Integer32):
    """Custom type prtExLs2PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtExLs2PrtIdx_Type.__name__ = "Integer32"
_PrtExLs2PrtIdx_Object = MibTableColumn
prtExLs2PrtIdx = _PrtExLs2PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 3),
    _PrtExLs2PrtIdx_Type()
)
prtExLs2PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs2PrtIdx.setStatus("mandatory")


class _PrtExLs2Connect_Type(Integer32):
    """Custom type prtExLs2Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExLs2Connect_Type.__name__ = "Integer32"
_PrtExLs2Connect_Object = MibTableColumn
prtExLs2Connect = _PrtExLs2Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 4),
    _PrtExLs2Connect_Type()
)
prtExLs2Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2Connect.setStatus("mandatory")


class _PrtExLs2Rate_Type(Integer32):
    """Custom type prtExLs2Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("r19200bps", 5),
          ("r2400bps", 2),
          ("r4800bps", 3),
          ("r9600bps", 4))
    )


_PrtExLs2Rate_Type.__name__ = "Integer32"
_PrtExLs2Rate_Object = MibTableColumn
prtExLs2Rate = _PrtExLs2Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 5),
    _PrtExLs2Rate_Type()
)
prtExLs2Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2Rate.setStatus("mandatory")


class _PrtExLs2ClkMode_Type(Integer32):
    """Custom type prtExLs2ClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 3),
          ("ext-dce", 2))
    )


_PrtExLs2ClkMode_Type.__name__ = "Integer32"
_PrtExLs2ClkMode_Object = MibTableColumn
prtExLs2ClkMode = _PrtExLs2ClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 6),
    _PrtExLs2ClkMode_Type()
)
prtExLs2ClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2ClkMode.setStatus("mandatory")


class _PrtExLs2Cts_Type(Integer32):
    """Custom type prtExLs2Cts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("rts-max", 4),
          ("rts-min", 3))
    )


_PrtExLs2Cts_Type.__name__ = "Integer32"
_PrtExLs2Cts_Object = MibTableColumn
prtExLs2Cts = _PrtExLs2Cts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 7),
    _PrtExLs2Cts_Type()
)
prtExLs2Cts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2Cts.setStatus("mandatory")


class _PrtExLs2Dcd_Type(Integer32):
    """Custom type prtExLs2Dcd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("card-sync", 3),
          ("on", 2))
    )


_PrtExLs2Dcd_Type.__name__ = "Integer32"
_PrtExLs2Dcd_Object = MibTableColumn
prtExLs2Dcd = _PrtExLs2Dcd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 8),
    _PrtExLs2Dcd_Type()
)
prtExLs2Dcd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2Dcd.setStatus("mandatory")


class _PrtExLs2EnvIdx_Type(Integer32):
    """Custom type prtExLs2EnvIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_PrtExLs2EnvIdx_Type.__name__ = "Integer32"
_PrtExLs2EnvIdx_Object = MibTableColumn
prtExLs2EnvIdx = _PrtExLs2EnvIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 9),
    _PrtExLs2EnvIdx_Type()
)
prtExLs2EnvIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2EnvIdx.setStatus("mandatory")
_PrtInLs2CnfgTable_Object = MibTable
prtInLs2CnfgTable = _PrtInLs2CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2)
)
if mibBuilder.loadTexts:
    prtInLs2CnfgTable.setStatus("mandatory")
_PrtInLs2CnfgEntry_Object = MibTableRow
prtInLs2CnfgEntry = _PrtInLs2CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1)
)
prtInLs2CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtInLs2CnfgIdx"),
    (0, "DACS-MIB", "prtInLs2SltIdx"),
    (0, "DACS-MIB", "prtInLs2PrtIdx"),
)
if mibBuilder.loadTexts:
    prtInLs2CnfgEntry.setStatus("mandatory")


class _PrtInLs2CnfgIdx_Type(Integer32):
    """Custom type prtInLs2CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInLs2CnfgIdx_Type.__name__ = "Integer32"
_PrtInLs2CnfgIdx_Object = MibTableColumn
prtInLs2CnfgIdx = _PrtInLs2CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 1),
    _PrtInLs2CnfgIdx_Type()
)
prtInLs2CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs2CnfgIdx.setStatus("mandatory")


class _PrtInLs2SltIdx_Type(Integer32):
    """Custom type prtInLs2SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInLs2SltIdx_Type.__name__ = "Integer32"
_PrtInLs2SltIdx_Object = MibTableColumn
prtInLs2SltIdx = _PrtInLs2SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 2),
    _PrtInLs2SltIdx_Type()
)
prtInLs2SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs2SltIdx.setStatus("mandatory")


class _PrtInLs2PrtIdx_Type(Integer32):
    """Custom type prtInLs2PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102))
    )


_PrtInLs2PrtIdx_Type.__name__ = "Integer32"
_PrtInLs2PrtIdx_Object = MibTableColumn
prtInLs2PrtIdx = _PrtInLs2PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 3),
    _PrtInLs2PrtIdx_Type()
)
prtInLs2PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs2PrtIdx.setStatus("mandatory")


class _PrtInLs2Connect_Type(Integer32):
    """Custom type prtInLs2Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInLs2Connect_Type.__name__ = "Integer32"
_PrtInLs2Connect_Object = MibTableColumn
prtInLs2Connect = _PrtInLs2Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 4),
    _PrtInLs2Connect_Type()
)
prtInLs2Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2Connect.setStatus("mandatory")


class _PrtInLs2Group_Type(Integer32):
    """Custom type prtInLs2Group based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_PrtInLs2Group_Type.__name__ = "Integer32"
_PrtInLs2Group_Object = MibTableColumn
prtInLs2Group = _PrtInLs2Group_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 5),
    _PrtInLs2Group_Type()
)
prtInLs2Group.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2Group.setStatus("mandatory")


class _PrtInLs2Member_Type(Integer32):
    """Custom type prtInLs2Member based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_PrtInLs2Member_Type.__name__ = "Integer32"
_PrtInLs2Member_Object = MibTableColumn
prtInLs2Member = _PrtInLs2Member_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 6),
    _PrtInLs2Member_Type()
)
prtInLs2Member.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2Member.setStatus("mandatory")


class _PrtInLs2LinkTo_Type(Integer32):
    """Custom type prtInLs2LinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInLs2LinkTo_Type.__name__ = "Integer32"
_PrtInLs2LinkTo_Object = MibTableColumn
prtInLs2LinkTo = _PrtInLs2LinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 7),
    _PrtInLs2LinkTo_Type()
)
prtInLs2LinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2LinkTo.setStatus("deprecated")


class _PrtInLs2EnvAssign_Type(Integer32):
    """Custom type prtInLs2EnvAssign based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("manual", 3))
    )


_PrtInLs2EnvAssign_Type.__name__ = "Integer32"
_PrtInLs2EnvAssign_Object = MibTableColumn
prtInLs2EnvAssign = _PrtInLs2EnvAssign_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 8),
    _PrtInLs2EnvAssign_Type()
)
prtInLs2EnvAssign.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2EnvAssign.setStatus("mandatory")
_PrtVc2CnfgTable_Object = MibTable
prtVc2CnfgTable = _PrtVc2CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5)
)
if mibBuilder.loadTexts:
    prtVc2CnfgTable.setStatus("mandatory")
_PrtVc2CnfgEntry_Object = MibTableRow
prtVc2CnfgEntry = _PrtVc2CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1)
)
prtVc2CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtVc2CnfgIdx"),
    (0, "DACS-MIB", "prtVc2SltIdx"),
    (0, "DACS-MIB", "prtVc2PrtIdx"),
)
if mibBuilder.loadTexts:
    prtVc2CnfgEntry.setStatus("mandatory")


class _PrtVc2CnfgIdx_Type(Integer32):
    """Custom type prtVc2CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtVc2CnfgIdx_Type.__name__ = "Integer32"
_PrtVc2CnfgIdx_Object = MibTableColumn
prtVc2CnfgIdx = _PrtVc2CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 1),
    _PrtVc2CnfgIdx_Type()
)
prtVc2CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtVc2CnfgIdx.setStatus("mandatory")


class _PrtVc2SltIdx_Type(Integer32):
    """Custom type prtVc2SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtVc2SltIdx_Type.__name__ = "Integer32"
_PrtVc2SltIdx_Object = MibTableColumn
prtVc2SltIdx = _PrtVc2SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 2),
    _PrtVc2SltIdx_Type()
)
prtVc2SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtVc2SltIdx.setStatus("mandatory")


class _PrtVc2PrtIdx_Type(Integer32):
    """Custom type prtVc2PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtVc2PrtIdx_Type.__name__ = "Integer32"
_PrtVc2PrtIdx_Object = MibTableColumn
prtVc2PrtIdx = _PrtVc2PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 3),
    _PrtVc2PrtIdx_Type()
)
prtVc2PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtVc2PrtIdx.setStatus("mandatory")


class _PrtExVc2Connect_Type(Integer32):
    """Custom type prtExVc2Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExVc2Connect_Type.__name__ = "Integer32"
_PrtExVc2Connect_Object = MibTableColumn
prtExVc2Connect = _PrtExVc2Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 4),
    _PrtExVc2Connect_Type()
)
prtExVc2Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Connect.setStatus("mandatory")
_PrtExVc2TransGain_Type = Integer32
_PrtExVc2TransGain_Object = MibTableColumn
prtExVc2TransGain = _PrtExVc2TransGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 5),
    _PrtExVc2TransGain_Type()
)
prtExVc2TransGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2TransGain.setStatus("mandatory")
_PrtExVc2ReceiveGain_Type = Integer32
_PrtExVc2ReceiveGain_Object = MibTableColumn
prtExVc2ReceiveGain = _PrtExVc2ReceiveGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 6),
    _PrtExVc2ReceiveGain_Type()
)
prtExVc2ReceiveGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2ReceiveGain.setStatus("mandatory")


class _PrtExVc2Wire_Type(Integer32):
    """Custom type prtExVc2Wire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("w2wire", 1),
          ("w4wire", 2))
    )


_PrtExVc2Wire_Type.__name__ = "Integer32"
_PrtExVc2Wire_Object = MibTableColumn
prtExVc2Wire = _PrtExVc2Wire_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 7),
    _PrtExVc2Wire_Type()
)
prtExVc2Wire.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Wire.setStatus("mandatory")


class _PrtExVc2CodingLaw_Type(Integer32):
    """Custom type prtExVc2CodingLaw based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aLAW", 1),
          ("uLAW", 2))
    )


_PrtExVc2CodingLaw_Type.__name__ = "Integer32"
_PrtExVc2CodingLaw_Object = MibTableColumn
prtExVc2CodingLaw = _PrtExVc2CodingLaw_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 8),
    _PrtExVc2CodingLaw_Type()
)
prtExVc2CodingLaw.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2CodingLaw.setStatus("mandatory")


class _PrtExVc2Sig_Type(Integer32):
    """Custom type prtExVc2Sig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("chAssociatedE1", 3),
          ("noSignaling", 1),
          ("robbedBitFrame", 4),
          ("robbedBitMultiFrame", 2))
    )


_PrtExVc2Sig_Type.__name__ = "Integer32"
_PrtExVc2Sig_Object = MibTableColumn
prtExVc2Sig = _PrtExVc2Sig_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 9),
    _PrtExVc2Sig_Type()
)
prtExVc2Sig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Sig.setStatus("mandatory")


class _PrtExVc2Oos_Type(Integer32):
    """Custom type prtExVc2Oos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 3),
          ("forcedBusy", 2),
          ("forcedIdle", 1),
          ("idleBusy", 4),
          ("notApplicable", 5))
    )


_PrtExVc2Oos_Type.__name__ = "Integer32"
_PrtExVc2Oos_Object = MibTableColumn
prtExVc2Oos = _PrtExVc2Oos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 10),
    _PrtExVc2Oos_Type()
)
prtExVc2Oos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Oos.setStatus("mandatory")


class _PrtExVc2LinkTo_Type(Integer32):
    """Custom type prtExVc2LinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExVc2LinkTo_Type.__name__ = "Integer32"
_PrtExVc2LinkTo_Object = MibTableColumn
prtExVc2LinkTo = _PrtExVc2LinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 11),
    _PrtExVc2LinkTo_Type()
)
prtExVc2LinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2LinkTo.setStatus("deprecated")


class _PrtExVc2OperMode_Type(Integer32):
    """Custom type prtExVc2OperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 4),
          ("normal", 2),
          ("unidirectRx", 3))
    )


_PrtExVc2OperMode_Type.__name__ = "Integer32"
_PrtExVc2OperMode_Object = MibTableColumn
prtExVc2OperMode = _PrtExVc2OperMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 12),
    _PrtExVc2OperMode_Type()
)
prtExVc2OperMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2OperMode.setStatus("mandatory")


class _PrtExVc2SigProfile_Type(Integer32):
    """Custom type prtExVc2SigProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("manual", 2),
          ("meteringPulse", 7),
          ("notApplicable", 1),
          ("p1", 3),
          ("p2", 4),
          ("p3Fxo3S3", 5),
          ("p4", 8),
          ("reversePolarity", 6))
    )


_PrtExVc2SigProfile_Type.__name__ = "Integer32"
_PrtExVc2SigProfile_Object = MibTableColumn
prtExVc2SigProfile = _PrtExVc2SigProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 13),
    _PrtExVc2SigProfile_Type()
)
prtExVc2SigProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2SigProfile.setStatus("mandatory")


class _PrtExVc2CallEnable_Type(Integer32):
    """Custom type prtExVc2CallEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 4),
          ("incoming", 2),
          ("notApplicable", 1),
          ("outgoing", 3))
    )


_PrtExVc2CallEnable_Type.__name__ = "Integer32"
_PrtExVc2CallEnable_Object = MibTableColumn
prtExVc2CallEnable = _PrtExVc2CallEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 14),
    _PrtExVc2CallEnable_Type()
)
prtExVc2CallEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2CallEnable.setStatus("mandatory")


class _PrtExVc2R2Delay_Type(Integer32):
    """Custom type prtExVc2R2Delay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("satellite", 3),
          ("terrestrial", 2))
    )


_PrtExVc2R2Delay_Type.__name__ = "Integer32"
_PrtExVc2R2Delay_Object = MibTableColumn
prtExVc2R2Delay = _PrtExVc2R2Delay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 15),
    _PrtExVc2R2Delay_Type()
)
prtExVc2R2Delay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2R2Delay.setStatus("mandatory")


class _PrtExVc2CasStd_Type(Integer32):
    """Custom type prtExVc2CasStd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r2Q422", 2),
          ("specialA", 3),
          ("specialB", 4),
          ("specialC", 5),
          ("specialD", 6),
          ("specialE", 7),
          ("specialF", 8),
          ("specialG", 9))
    )


_PrtExVc2CasStd_Type.__name__ = "Integer32"
_PrtExVc2CasStd_Object = MibTableColumn
prtExVc2CasStd = _PrtExVc2CasStd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 16),
    _PrtExVc2CasStd_Type()
)
prtExVc2CasStd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2CasStd.setStatus("mandatory")


class _PrtExVc2EchoCanceler_Type(Integer32):
    """Custom type prtExVc2EchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtExVc2EchoCanceler_Type.__name__ = "Integer32"
_PrtExVc2EchoCanceler_Object = MibTableColumn
prtExVc2EchoCanceler = _PrtExVc2EchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 17),
    _PrtExVc2EchoCanceler_Type()
)
prtExVc2EchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2EchoCanceler.setStatus("mandatory")


class _PrtExVc2IfType_Type(Integer32):
    """Custom type prtExVc2IfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("fxo", 4),
          ("fxs", 5),
          ("notApplicable", 1),
          ("w2Em", 2),
          ("w4Em", 3))
    )


_PrtExVc2IfType_Type.__name__ = "Integer32"
_PrtExVc2IfType_Object = MibTableColumn
prtExVc2IfType = _PrtExVc2IfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 18),
    _PrtExVc2IfType_Type()
)
prtExVc2IfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2IfType.setStatus("mandatory")


class _PrtExVc2Encoding_Type(Integer32):
    """Custom type prtExVc2Encoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("notApplicable", 1),
          ("pcm", 2))
    )


_PrtExVc2Encoding_Type.__name__ = "Integer32"
_PrtExVc2Encoding_Object = MibTableColumn
prtExVc2Encoding = _PrtExVc2Encoding_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 19),
    _PrtExVc2Encoding_Type()
)
prtExVc2Encoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Encoding.setStatus("mandatory")
_PrtExVc2TxBitCode_Type = OctetString
_PrtExVc2TxBitCode_Object = MibTableColumn
prtExVc2TxBitCode = _PrtExVc2TxBitCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 20),
    _PrtExVc2TxBitCode_Type()
)
prtExVc2TxBitCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2TxBitCode.setStatus("mandatory")
_PrtExVc2RxBitOutput_Type = OctetString
_PrtExVc2RxBitOutput_Object = MibTableColumn
prtExVc2RxBitOutput = _PrtExVc2RxBitOutput_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 21),
    _PrtExVc2RxBitOutput_Type()
)
prtExVc2RxBitOutput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2RxBitOutput.setStatus("mandatory")


class _PrtExVc2MeterRate_Type(Integer32):
    """Custom type prtExVc2MeterRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r12Khz", 3),
          ("r16Khz", 2))
    )


_PrtExVc2MeterRate_Type.__name__ = "Integer32"
_PrtExVc2MeterRate_Object = MibTableColumn
prtExVc2MeterRate = _PrtExVc2MeterRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 22),
    _PrtExVc2MeterRate_Type()
)
prtExVc2MeterRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2MeterRate.setStatus("mandatory")


class _PrtExVc2IfSignaling_Type(Integer32):
    """Custom type prtExVc2IfSignaling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("groundStart", 3),
          ("loopStart", 2),
          ("notApplicable", 1))
    )


_PrtExVc2IfSignaling_Type.__name__ = "Integer32"
_PrtExVc2IfSignaling_Object = MibTableColumn
prtExVc2IfSignaling = _PrtExVc2IfSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 23),
    _PrtExVc2IfSignaling_Type()
)
prtExVc2IfSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2IfSignaling.setStatus("mandatory")


class _PrtExVc2SeizeAck_Type(Integer32):
    """Custom type prtExVc2SeizeAck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExVc2SeizeAck_Type.__name__ = "Integer32"
_PrtExVc2SeizeAck_Object = MibTableColumn
prtExVc2SeizeAck = _PrtExVc2SeizeAck_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 24),
    _PrtExVc2SeizeAck_Type()
)
prtExVc2SeizeAck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2SeizeAck.setStatus("mandatory")


class _PrtExVc2EandMType_Type(Integer32):
    """Custom type prtExVc2EandMType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("type1", 2),
          ("type2", 3),
          ("type3", 4),
          ("type5", 5))
    )


_PrtExVc2EandMType_Type.__name__ = "Integer32"
_PrtExVc2EandMType_Object = MibTableColumn
prtExVc2EandMType = _PrtExVc2EandMType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 25),
    _PrtExVc2EandMType_Type()
)
prtExVc2EandMType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2EandMType.setStatus("mandatory")
_PrtHsfCnfgTable_Object = MibTable
prtHsfCnfgTable = _PrtHsfCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6)
)
if mibBuilder.loadTexts:
    prtHsfCnfgTable.setStatus("mandatory")
_PrtHsfCnfgEntry_Object = MibTableRow
prtHsfCnfgEntry = _PrtHsfCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1)
)
prtHsfCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtHsfCnfgIdx"),
    (0, "DACS-MIB", "prtHsfSltIdx"),
    (0, "DACS-MIB", "prtHsfPrtIdx"),
)
if mibBuilder.loadTexts:
    prtHsfCnfgEntry.setStatus("mandatory")


class _PrtHsfCnfgIdx_Type(Integer32):
    """Custom type prtHsfCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtHsfCnfgIdx_Type.__name__ = "Integer32"
_PrtHsfCnfgIdx_Object = MibTableColumn
prtHsfCnfgIdx = _PrtHsfCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 1),
    _PrtHsfCnfgIdx_Type()
)
prtHsfCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHsfCnfgIdx.setStatus("mandatory")


class _PrtHsfSltIdx_Type(Integer32):
    """Custom type prtHsfSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtHsfSltIdx_Type.__name__ = "Integer32"
_PrtHsfSltIdx_Object = MibTableColumn
prtHsfSltIdx = _PrtHsfSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 2),
    _PrtHsfSltIdx_Type()
)
prtHsfSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHsfSltIdx.setStatus("mandatory")


class _PrtHsfPrtIdx_Type(Integer32):
    """Custom type prtHsfPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtHsfPrtIdx_Type.__name__ = "Integer32"
_PrtHsfPrtIdx_Object = MibTableColumn
prtHsfPrtIdx = _PrtHsfPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 3),
    _PrtHsfPrtIdx_Type()
)
prtHsfPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHsfPrtIdx.setStatus("mandatory")


class _PrtExHsfConnect_Type(Integer32):
    """Custom type prtExHsfConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExHsfConnect_Type.__name__ = "Integer32"
_PrtExHsfConnect_Object = MibTableColumn
prtExHsfConnect = _PrtExHsfConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 4),
    _PrtExHsfConnect_Type()
)
prtExHsfConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfConnect.setStatus("mandatory")


class _PrtExHsfRate_Type(Integer32):
    """Custom type prtExHsfRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63)
        )
    )
    namedValues = NamedValues(
        *(("r10x56eq560Kbps", 19),
          ("r10x64eq640Kbps", 20),
          ("r11x56eq616Kbps", 21),
          ("r11x64eq704Kbps", 22),
          ("r12x56eq672Kbps", 23),
          ("r12x64eq768Kbps", 24),
          ("r13x56eq728Kbps", 25),
          ("r13x64eq832Kbps", 26),
          ("r14x56eq784Kbps", 27),
          ("r14x64eq896Kbps", 28),
          ("r15x56eq840Kbps", 29),
          ("r15x64eq960Kbps", 30),
          ("r16x56eq896Kbps", 31),
          ("r16x64eq1024Kbps", 32),
          ("r17x56eq952Kbps", 33),
          ("r17x64eq1088Kbps", 34),
          ("r18x56eq1008Kbps", 35),
          ("r18x64eq1152Kbps", 36),
          ("r19x56eq1064Kbps", 37),
          ("r19x64eq1216Kbps", 38),
          ("r1x56eq56Kbps", 1),
          ("r1x64eq64Kbps", 2),
          ("r20x56eq1120Kbps", 39),
          ("r20x64eq1280Kbps", 40),
          ("r21x56eq1176Kbps", 41),
          ("r21x64eq1344Kbps", 42),
          ("r22x56eq1232Kbps", 43),
          ("r22x64eq1408Kbps", 44),
          ("r23x56eq1288Kbps", 45),
          ("r23x64eq1472Kbps", 46),
          ("r24x56eq1344Kbps", 47),
          ("r24x64eq1536Kbps", 48),
          ("r25x56eq1400Kbps", 49),
          ("r25x64eq1600Kbps", 50),
          ("r26x56eq1456Kbps", 51),
          ("r26x64eq1664Kbps", 52),
          ("r27x56eq1512Kbps", 53),
          ("r27x64eq1728Kbps", 54),
          ("r28x56eq1568Kbps", 55),
          ("r28x64eq1792Kbps", 56),
          ("r29x56eq1624Kbps", 57),
          ("r29x64eq1856Kbps", 58),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 4),
          ("r30x56eq1680Kbps", 59),
          ("r30x64eq1920Kbps", 60),
          ("r31x56eq1736Kbps", 61),
          ("r31x64eq1984Kbps", 62),
          ("r32Kbps", 63),
          ("r3x56eq168Kbps", 5),
          ("r3x64eq192Kbps", 6),
          ("r4x56eq224Kbps", 7),
          ("r4x64eq256Kbps", 8),
          ("r5x56eq280Kbps", 9),
          ("r5x64eq320Kbps", 10),
          ("r6x56eq336Kbps", 11),
          ("r6x64eq384Kbps", 12),
          ("r7x56eq392Kbps", 13),
          ("r7x64eq448Kbps", 14),
          ("r8x56eq448Kbps", 15),
          ("r8x64eq512Kbps", 16),
          ("r9x56eq504Kbps", 17),
          ("r9x64eq576Kbps", 18))
    )


_PrtExHsfRate_Type.__name__ = "Integer32"
_PrtExHsfRate_Object = MibTableColumn
prtExHsfRate = _PrtExHsfRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 5),
    _PrtExHsfRate_Type()
)
prtExHsfRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfRate.setStatus("mandatory")


class _PrtExHsfClkMode_Type(Integer32):
    """Custom type prtExHsfClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 3),
          ("ext-dce", 2),
          ("none", 4))
    )


_PrtExHsfClkMode_Type.__name__ = "Integer32"
_PrtExHsfClkMode_Object = MibTableColumn
prtExHsfClkMode = _PrtExHsfClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 6),
    _PrtExHsfClkMode_Type()
)
prtExHsfClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfClkMode.setStatus("mandatory")


class _PrtExHsfCts_Type(Integer32):
    """Custom type prtExHsfCts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("on", 2),
          ("rts", 3))
    )


_PrtExHsfCts_Type.__name__ = "Integer32"
_PrtExHsfCts_Object = MibTableColumn
prtExHsfCts = _PrtExHsfCts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 7),
    _PrtExHsfCts_Type()
)
prtExHsfCts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfCts.setStatus("mandatory")


class _PrtExHsfFifoSize_Type(Integer32):
    """Custom type prtExHsfFifoSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("s16bits", 3),
          ("s30bits", 4),
          ("s52bits", 5),
          ("s72bits", 6))
    )


_PrtExHsfFifoSize_Type.__name__ = "Integer32"
_PrtExHsfFifoSize_Object = MibTableColumn
prtExHsfFifoSize = _PrtExHsfFifoSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 8),
    _PrtExHsfFifoSize_Type()
)
prtExHsfFifoSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfFifoSize.setStatus("mandatory")


class _PrtExHsfLinkTo_Type(Integer32):
    """Custom type prtExHsfLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHsfLinkTo_Type.__name__ = "Integer32"
_PrtExHsfLinkTo_Object = MibTableColumn
prtExHsfLinkTo = _PrtExHsfLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 9),
    _PrtExHsfLinkTo_Type()
)
prtExHsfLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfLinkTo.setStatus("deprecated")


class _PrtExHsfOperMode_Type(Integer32):
    """Custom type prtExHsfOperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 4),
          ("normal", 2),
          ("unidirectRx", 3))
    )


_PrtExHsfOperMode_Type.__name__ = "Integer32"
_PrtExHsfOperMode_Object = MibTableColumn
prtExHsfOperMode = _PrtExHsfOperMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 10),
    _PrtExHsfOperMode_Type()
)
prtExHsfOperMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfOperMode.setStatus("mandatory")


class _PrtExHsfInbandLoopback_Type(Integer32):
    """Custom type prtExHsfInbandLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("ft1Enabled", 3),
          ("notApplicable", 1))
    )


_PrtExHsfInbandLoopback_Type.__name__ = "Integer32"
_PrtExHsfInbandLoopback_Object = MibTableColumn
prtExHsfInbandLoopback = _PrtExHsfInbandLoopback_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 11),
    _PrtExHsfInbandLoopback_Type()
)
prtExHsfInbandLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfInbandLoopback.setStatus("mandatory")


class _PrtExHsfClkPolarity_Type(Integer32):
    """Custom type prtExHsfClkPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invert", 3),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtExHsfClkPolarity_Type.__name__ = "Integer32"
_PrtExHsfClkPolarity_Object = MibTableColumn
prtExHsfClkPolarity = _PrtExHsfClkPolarity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 12),
    _PrtExHsfClkPolarity_Type()
)
prtExHsfClkPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfClkPolarity.setStatus("mandatory")
_PrtHs4Cnfg_ObjectIdentity = ObjectIdentity
prtHs4Cnfg = _PrtHs4Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7)
)
_PrtExHs4CnfgTable_Object = MibTable
prtExHs4CnfgTable = _PrtExHs4CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1)
)
if mibBuilder.loadTexts:
    prtExHs4CnfgTable.setStatus("mandatory")
_PrtExHs4CnfgEntry_Object = MibTableRow
prtExHs4CnfgEntry = _PrtExHs4CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1)
)
prtExHs4CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExHs4CnfgIdx"),
    (0, "DACS-MIB", "prtExHs4SltIdx"),
    (0, "DACS-MIB", "prtExHs4PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExHs4CnfgEntry.setStatus("mandatory")


class _PrtExHs4CnfgIdx_Type(Integer32):
    """Custom type prtExHs4CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExHs4CnfgIdx_Type.__name__ = "Integer32"
_PrtExHs4CnfgIdx_Object = MibTableColumn
prtExHs4CnfgIdx = _PrtExHs4CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 1),
    _PrtExHs4CnfgIdx_Type()
)
prtExHs4CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4CnfgIdx.setStatus("mandatory")


class _PrtExHs4SltIdx_Type(Integer32):
    """Custom type prtExHs4SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHs4SltIdx_Type.__name__ = "Integer32"
_PrtExHs4SltIdx_Object = MibTableColumn
prtExHs4SltIdx = _PrtExHs4SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 2),
    _PrtExHs4SltIdx_Type()
)
prtExHs4SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4SltIdx.setStatus("mandatory")


class _PrtExHs4PrtIdx_Type(Integer32):
    """Custom type prtExHs4PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExHs4PrtIdx_Type.__name__ = "Integer32"
_PrtExHs4PrtIdx_Object = MibTableColumn
prtExHs4PrtIdx = _PrtExHs4PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 3),
    _PrtExHs4PrtIdx_Type()
)
prtExHs4PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4PrtIdx.setStatus("mandatory")


class _PrtExHs4Connect_Type(Integer32):
    """Custom type prtExHs4Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExHs4Connect_Type.__name__ = "Integer32"
_PrtExHs4Connect_Object = MibTableColumn
prtExHs4Connect = _PrtExHs4Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 4),
    _PrtExHs4Connect_Type()
)
prtExHs4Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4Connect.setStatus("mandatory")


class _PrtExHs4LineType_Type(Integer32):
    """Custom type prtExHs4LineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("esfT1", 2),
          ("g732nE1", 4),
          ("g732nE1CRC", 5),
          ("g732sE1", 6),
          ("g732sE1CRC", 7),
          ("sfT1", 3))
    )


_PrtExHs4LineType_Type.__name__ = "Integer32"
_PrtExHs4LineType_Object = MibTableColumn
prtExHs4LineType = _PrtExHs4LineType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 5),
    _PrtExHs4LineType_Type()
)
prtExHs4LineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4LineType.setStatus("mandatory")


class _PrtExHs4LineCode_Type(Integer32):
    """Custom type prtExHs4LineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("b7T1", 1),
          ("b8zsT1", 2),
          ("hdb3E1", 4))
    )


_PrtExHs4LineCode_Type.__name__ = "Integer32"
_PrtExHs4LineCode_Object = MibTableColumn
prtExHs4LineCode = _PrtExHs4LineCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 6),
    _PrtExHs4LineCode_Type()
)
prtExHs4LineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4LineCode.setStatus("mandatory")


class _PrtExHs4LineLen_Type(Integer32):
    """Custom type prtExHs4LineLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("fcc68", 7),
          ("len0p133ft", 2),
          ("len134p266ft", 3),
          ("len267p399ft", 4),
          ("len400p533ft", 5),
          ("len534p655ft", 6),
          ("unknown", 1))
    )


_PrtExHs4LineLen_Type.__name__ = "Integer32"
_PrtExHs4LineLen_Object = MibTableColumn
prtExHs4LineLen = _PrtExHs4LineLen_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 7),
    _PrtExHs4LineLen_Type()
)
prtExHs4LineLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4LineLen.setStatus("mandatory")


class _PrtExHs4RestoreT_Type(Integer32):
    """Custom type prtExHs4RestoreT based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ccittE1", 4),
          ("restoreT10sec62411", 3),
          ("restoreT1secFast", 2))
    )


_PrtExHs4RestoreT_Type.__name__ = "Integer32"
_PrtExHs4RestoreT_Object = MibTableColumn
prtExHs4RestoreT = _PrtExHs4RestoreT_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 8),
    _PrtExHs4RestoreT_Type()
)
prtExHs4RestoreT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4RestoreT.setStatus("mandatory")


class _PrtExHs4OosSig_Type(Integer32):
    """Custom type prtExHs4OosSig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 5),
          ("forcedBusy", 4),
          ("forcedIdle", 3),
          ("idleBusy", 6),
          ("notsupported", 2))
    )


_PrtExHs4OosSig_Type.__name__ = "Integer32"
_PrtExHs4OosSig_Object = MibTableColumn
prtExHs4OosSig = _PrtExHs4OosSig_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 9),
    _PrtExHs4OosSig_Type()
)
prtExHs4OosSig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4OosSig.setStatus("mandatory")


class _PrtExHs4OosCode_Type(Integer32):
    """Custom type prtExHs4OosCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("notsupported", 2),
          ("oosCode00H", 3),
          ("oosCode1aH", 4),
          ("oosCode54H", 5),
          ("oosCode7eH", 6),
          ("oosCode7fH", 7),
          ("oosCode98H", 8),
          ("oosCode9eH", 9),
          ("oosCoded5H", 10),
          ("oosCodee4H", 11),
          ("oosCodeffH", 12))
    )


_PrtExHs4OosCode_Type.__name__ = "Integer32"
_PrtExHs4OosCode_Object = MibTableColumn
prtExHs4OosCode = _PrtExHs4OosCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 10),
    _PrtExHs4OosCode_Type()
)
prtExHs4OosCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4OosCode.setStatus("mandatory")
_PrtExHs4IdleCode_Type = Integer32
_PrtExHs4IdleCode_Object = MibTableColumn
prtExHs4IdleCode = _PrtExHs4IdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 11),
    _PrtExHs4IdleCode_Type()
)
prtExHs4IdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4IdleCode.setStatus("mandatory")


class _PrtExHs4MfClkSrcSlt_Type(Integer32):
    """Custom type prtExHs4MfClkSrcSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("local", 2))
    )


_PrtExHs4MfClkSrcSlt_Type.__name__ = "Integer32"
_PrtExHs4MfClkSrcSlt_Object = MibTableColumn
prtExHs4MfClkSrcSlt = _PrtExHs4MfClkSrcSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 12),
    _PrtExHs4MfClkSrcSlt_Type()
)
prtExHs4MfClkSrcSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4MfClkSrcSlt.setStatus("mandatory")


class _PrtExHs4MfClkSrcPrt_Type(Integer32):
    """Custom type prtExHs4MfClkSrcPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              101)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("inPrt1", 101))
    )


_PrtExHs4MfClkSrcPrt_Type.__name__ = "Integer32"
_PrtExHs4MfClkSrcPrt_Object = MibTableColumn
prtExHs4MfClkSrcPrt = _PrtExHs4MfClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 13),
    _PrtExHs4MfClkSrcPrt_Type()
)
prtExHs4MfClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4MfClkSrcPrt.setStatus("mandatory")
_PrtExHs4TsCnfgTable_Object = MibTable
prtExHs4TsCnfgTable = _PrtExHs4TsCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2)
)
if mibBuilder.loadTexts:
    prtExHs4TsCnfgTable.setStatus("mandatory")
_PrtExHs4TsEntry_Object = MibTableRow
prtExHs4TsEntry = _PrtExHs4TsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1)
)
prtExHs4TsEntry.setIndexNames(
    (0, "DACS-MIB", "prtExHs4TsCnfgIdx"),
    (0, "DACS-MIB", "prtExHs4TsSltIdx"),
    (0, "DACS-MIB", "prtExHs4TsPrtIdx"),
    (0, "DACS-MIB", "prtExHs4TsIdx"),
)
if mibBuilder.loadTexts:
    prtExHs4TsEntry.setStatus("mandatory")


class _PrtExHs4TsCnfgIdx_Type(Integer32):
    """Custom type prtExHs4TsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExHs4TsCnfgIdx_Type.__name__ = "Integer32"
_PrtExHs4TsCnfgIdx_Object = MibTableColumn
prtExHs4TsCnfgIdx = _PrtExHs4TsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 1),
    _PrtExHs4TsCnfgIdx_Type()
)
prtExHs4TsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4TsCnfgIdx.setStatus("mandatory")


class _PrtExHs4TsSltIdx_Type(Integer32):
    """Custom type prtExHs4TsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHs4TsSltIdx_Type.__name__ = "Integer32"
_PrtExHs4TsSltIdx_Object = MibTableColumn
prtExHs4TsSltIdx = _PrtExHs4TsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 2),
    _PrtExHs4TsSltIdx_Type()
)
prtExHs4TsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4TsSltIdx.setStatus("mandatory")


class _PrtExHs4TsPrtIdx_Type(Integer32):
    """Custom type prtExHs4TsPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExHs4TsPrtIdx_Type.__name__ = "Integer32"
_PrtExHs4TsPrtIdx_Object = MibTableColumn
prtExHs4TsPrtIdx = _PrtExHs4TsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 3),
    _PrtExHs4TsPrtIdx_Type()
)
prtExHs4TsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4TsPrtIdx.setStatus("mandatory")
_PrtExHs4TsIdx_Type = Integer32
_PrtExHs4TsIdx_Object = MibTableColumn
prtExHs4TsIdx = _PrtExHs4TsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 4),
    _PrtExHs4TsIdx_Type()
)
prtExHs4TsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4TsIdx.setStatus("mandatory")


class _PrtExHs4TsIConSlot_Type(Integer32):
    """Custom type prtExHs4TsIConSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              100)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("split", 100))
    )


_PrtExHs4TsIConSlot_Type.__name__ = "Integer32"
_PrtExHs4TsIConSlot_Object = MibTableColumn
prtExHs4TsIConSlot = _PrtExHs4TsIConSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 5),
    _PrtExHs4TsIConSlot_Type()
)
prtExHs4TsIConSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4TsIConSlot.setStatus("mandatory")


class _PrtExHs4TsIConPrt_Type(Integer32):
    """Custom type prtExHs4TsIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              100)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("noConnect", 100))
    )


_PrtExHs4TsIConPrt_Type.__name__ = "Integer32"
_PrtExHs4TsIConPrt_Object = MibTableColumn
prtExHs4TsIConPrt = _PrtExHs4TsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 6),
    _PrtExHs4TsIConPrt_Type()
)
prtExHs4TsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4TsIConPrt.setStatus("mandatory")
_PrtExHs4TsIConTs_Type = Integer32
_PrtExHs4TsIConTs_Object = MibTableColumn
prtExHs4TsIConTs = _PrtExHs4TsIConTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 7),
    _PrtExHs4TsIConTs_Type()
)
prtExHs4TsIConTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4TsIConTs.setStatus("mandatory")
_PrtHsiCnfg_ObjectIdentity = ObjectIdentity
prtHsiCnfg = _PrtHsiCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8)
)
_PrtExHsiCnfgTable_Object = MibTable
prtExHsiCnfgTable = _PrtExHsiCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1)
)
if mibBuilder.loadTexts:
    prtExHsiCnfgTable.setStatus("mandatory")
_PrtExHsiCnfgEntry_Object = MibTableRow
prtExHsiCnfgEntry = _PrtExHsiCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1)
)
prtExHsiCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExHsiCnfgIdx"),
    (0, "DACS-MIB", "prtExHsiSltIdx"),
    (0, "DACS-MIB", "prtExHsiPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExHsiCnfgEntry.setStatus("mandatory")


class _PrtExHsiCnfgIdx_Type(Integer32):
    """Custom type prtExHsiCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExHsiCnfgIdx_Type.__name__ = "Integer32"
_PrtExHsiCnfgIdx_Object = MibTableColumn
prtExHsiCnfgIdx = _PrtExHsiCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 1),
    _PrtExHsiCnfgIdx_Type()
)
prtExHsiCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsiCnfgIdx.setStatus("mandatory")


class _PrtExHsiSltIdx_Type(Integer32):
    """Custom type prtExHsiSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHsiSltIdx_Type.__name__ = "Integer32"
_PrtExHsiSltIdx_Object = MibTableColumn
prtExHsiSltIdx = _PrtExHsiSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 2),
    _PrtExHsiSltIdx_Type()
)
prtExHsiSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsiSltIdx.setStatus("mandatory")


class _PrtExHsiPrtIdx_Type(Integer32):
    """Custom type prtExHsiPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtExHsiPrtIdx_Type.__name__ = "Integer32"
_PrtExHsiPrtIdx_Object = MibTableColumn
prtExHsiPrtIdx = _PrtExHsiPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 3),
    _PrtExHsiPrtIdx_Type()
)
prtExHsiPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsiPrtIdx.setStatus("mandatory")


class _PrtExHsiConnect_Type(Integer32):
    """Custom type prtExHsiConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("v51", 4),
          ("yes", 3))
    )


_PrtExHsiConnect_Type.__name__ = "Integer32"
_PrtExHsiConnect_Object = MibTableColumn
prtExHsiConnect = _PrtExHsiConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 4),
    _PrtExHsiConnect_Type()
)
prtExHsiConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiConnect.setStatus("mandatory")


class _PrtExHsiRate_Type(Integer32):
    """Custom type prtExHsiRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("r1200bps", 3),
          ("r128kbps", 12),
          ("r19200bps", 7),
          ("r2400bps", 4),
          ("r38400bps", 8),
          ("r4800bps", 5),
          ("r48kbps", 9),
          ("r56kbps", 10),
          ("r600bps", 2),
          ("r64kbps", 11),
          ("r9600bps", 6))
    )


_PrtExHsiRate_Type.__name__ = "Integer32"
_PrtExHsiRate_Object = MibTableColumn
prtExHsiRate = _PrtExHsiRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 5),
    _PrtExHsiRate_Type()
)
prtExHsiRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiRate.setStatus("mandatory")


class _PrtExHsiLinkTo_Type(Integer32):
    """Custom type prtExHsiLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHsiLinkTo_Type.__name__ = "Integer32"
_PrtExHsiLinkTo_Object = MibTableColumn
prtExHsiLinkTo = _PrtExHsiLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 6),
    _PrtExHsiLinkTo_Type()
)
prtExHsiLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiLinkTo.setStatus("deprecated")


class _PrtExHsiInterface_Type(Integer32):
    """Custom type prtExHsiInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("lt", 1),
          ("lt1", 4),
          ("notApplicable", 255),
          ("nt", 2),
          ("te", 3))
    )


_PrtExHsiInterface_Type.__name__ = "Integer32"
_PrtExHsiInterface_Object = MibTableColumn
prtExHsiInterface = _PrtExHsiInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 7),
    _PrtExHsiInterface_Type()
)
prtExHsiInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiInterface.setStatus("mandatory")


class _PrtExHsiActType_Type(Integer32):
    """Custom type prtExHsiActType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("type1", 2),
          ("type2", 3),
          ("type3", 4))
    )


_PrtExHsiActType_Type.__name__ = "Integer32"
_PrtExHsiActType_Object = MibTableColumn
prtExHsiActType = _PrtExHsiActType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 8),
    _PrtExHsiActType_Type()
)
prtExHsiActType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiActType.setStatus("mandatory")
_PrtInHsiCnfgTable_Object = MibTable
prtInHsiCnfgTable = _PrtInHsiCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2)
)
if mibBuilder.loadTexts:
    prtInHsiCnfgTable.setStatus("mandatory")
_PrtInHsiCnfgEntry_Object = MibTableRow
prtInHsiCnfgEntry = _PrtInHsiCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1)
)
prtInHsiCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtInHsiCnfgIdx"),
    (0, "DACS-MIB", "prtInHsiSltIdx"),
    (0, "DACS-MIB", "prtInHsiPrtIdx"),
)
if mibBuilder.loadTexts:
    prtInHsiCnfgEntry.setStatus("mandatory")


class _PrtInHsiCnfgIdx_Type(Integer32):
    """Custom type prtInHsiCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInHsiCnfgIdx_Type.__name__ = "Integer32"
_PrtInHsiCnfgIdx_Object = MibTableColumn
prtInHsiCnfgIdx = _PrtInHsiCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 1),
    _PrtInHsiCnfgIdx_Type()
)
prtInHsiCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInHsiCnfgIdx.setStatus("mandatory")


class _PrtInHsiSltIdx_Type(Integer32):
    """Custom type prtInHsiSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInHsiSltIdx_Type.__name__ = "Integer32"
_PrtInHsiSltIdx_Object = MibTableColumn
prtInHsiSltIdx = _PrtInHsiSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 2),
    _PrtInHsiSltIdx_Type()
)
prtInHsiSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInHsiSltIdx.setStatus("mandatory")
_PrtInHsiPrtIdx_Type = Integer32
_PrtInHsiPrtIdx_Object = MibTableColumn
prtInHsiPrtIdx = _PrtInHsiPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 3),
    _PrtInHsiPrtIdx_Type()
)
prtInHsiPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInHsiPrtIdx.setStatus("mandatory")


class _PrtInHsiConnect_Type(Integer32):
    """Custom type prtInHsiConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInHsiConnect_Type.__name__ = "Integer32"
_PrtInHsiConnect_Object = MibTableColumn
prtInHsiConnect = _PrtInHsiConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 4),
    _PrtInHsiConnect_Type()
)
prtInHsiConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInHsiConnect.setStatus("mandatory")


class _PrtInHsiRate_Type(Integer32):
    """Custom type prtInHsiRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              255)
        )
    )
    namedValues = NamedValues(
        *(("concentrated", 13),
          ("notApplicable", 255),
          ("r1200bps", 3),
          ("r128kbps", 12),
          ("r19200bps", 7),
          ("r2400bps", 4),
          ("r38400bps", 8),
          ("r4800bps", 5),
          ("r48kbps", 9),
          ("r56kbps", 10),
          ("r600bps", 2),
          ("r64kbps", 11),
          ("r9600bps", 6))
    )


_PrtInHsiRate_Type.__name__ = "Integer32"
_PrtInHsiRate_Object = MibTableColumn
prtInHsiRate = _PrtInHsiRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 5),
    _PrtInHsiRate_Type()
)
prtInHsiRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInHsiRate.setStatus("mandatory")
_PrtInHsiConcentratedTo_Type = Integer32
_PrtInHsiConcentratedTo_Object = MibTableColumn
prtInHsiConcentratedTo = _PrtInHsiConcentratedTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 6),
    _PrtInHsiConcentratedTo_Type()
)
prtInHsiConcentratedTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInHsiConcentratedTo.setStatus("mandatory")
_PrtPVc4Cnfg_ObjectIdentity = ObjectIdentity
prtPVc4Cnfg = _PrtPVc4Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9)
)
_PrtExPVc4CnfgTable_Object = MibTable
prtExPVc4CnfgTable = _PrtExPVc4CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1)
)
if mibBuilder.loadTexts:
    prtExPVc4CnfgTable.setStatus("mandatory")
_PrtExPVc4CnfgEntry_Object = MibTableRow
prtExPVc4CnfgEntry = _PrtExPVc4CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1)
)
prtExPVc4CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExPVc4CnfgIdx"),
    (0, "DACS-MIB", "prtExPVc4SltIdx"),
    (0, "DACS-MIB", "prtExPVc4PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPVc4CnfgEntry.setStatus("mandatory")


class _PrtExPVc4CnfgIdx_Type(Integer32):
    """Custom type prtExPVc4CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPVc4CnfgIdx_Type.__name__ = "Integer32"
_PrtExPVc4CnfgIdx_Object = MibTableColumn
prtExPVc4CnfgIdx = _PrtExPVc4CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 1),
    _PrtExPVc4CnfgIdx_Type()
)
prtExPVc4CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4CnfgIdx.setStatus("mandatory")


class _PrtExPVc4SltIdx_Type(Integer32):
    """Custom type prtExPVc4SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPVc4SltIdx_Type.__name__ = "Integer32"
_PrtExPVc4SltIdx_Object = MibTableColumn
prtExPVc4SltIdx = _PrtExPVc4SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 2),
    _PrtExPVc4SltIdx_Type()
)
prtExPVc4SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4SltIdx.setStatus("mandatory")


class _PrtExPVc4PrtIdx_Type(Integer32):
    """Custom type prtExPVc4PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              101,
              102,
              103,
              104)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104))
    )


_PrtExPVc4PrtIdx_Type.__name__ = "Integer32"
_PrtExPVc4PrtIdx_Object = MibTableColumn
prtExPVc4PrtIdx = _PrtExPVc4PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 3),
    _PrtExPVc4PrtIdx_Type()
)
prtExPVc4PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4PrtIdx.setStatus("mandatory")


class _PrtExPVc4PrtType_Type(Integer32):
    """Custom type prtExPVc4PrtType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("eAndM", 1),
          ("fxo", 2),
          ("fxs", 3),
          ("internal", 4),
          ("s0", 5))
    )


_PrtExPVc4PrtType_Type.__name__ = "Integer32"
_PrtExPVc4PrtType_Object = MibTableColumn
prtExPVc4PrtType = _PrtExPVc4PrtType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 4),
    _PrtExPVc4PrtType_Type()
)
prtExPVc4PrtType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4PrtType.setStatus("mandatory")


class _PrtExPVc4Connect_Type(Integer32):
    """Custom type prtExPVc4Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPVc4Connect_Type.__name__ = "Integer32"
_PrtExPVc4Connect_Object = MibTableColumn
prtExPVc4Connect = _PrtExPVc4Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 5),
    _PrtExPVc4Connect_Type()
)
prtExPVc4Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Connect.setStatus("mandatory")


class _PrtExPVc4IfType_Type(Integer32):
    """Custom type prtExPVc4IfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("e1Framer", 8),
          ("e1Slave", 9),
          ("eAndM2wires", 3),
          ("eAndM4wires", 2),
          ("fxoGnd", 4),
          ("fxoLoop", 5),
          ("fxsGnd", 6),
          ("fxsLoop", 7),
          ("t1Framer", 10),
          ("t1Slave", 11),
          ("unknown", 1))
    )


_PrtExPVc4IfType_Type.__name__ = "Integer32"
_PrtExPVc4IfType_Object = MibTableColumn
prtExPVc4IfType = _PrtExPVc4IfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 6),
    _PrtExPVc4IfType_Type()
)
prtExPVc4IfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4IfType.setStatus("mandatory")
_PrtExPVc4TxGain_Type = Integer32
_PrtExPVc4TxGain_Object = MibTableColumn
prtExPVc4TxGain = _PrtExPVc4TxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 7),
    _PrtExPVc4TxGain_Type()
)
prtExPVc4TxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4TxGain.setStatus("mandatory")
_PrtExPVc4RxGain_Type = Integer32
_PrtExPVc4RxGain_Object = MibTableColumn
prtExPVc4RxGain = _PrtExPVc4RxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 8),
    _PrtExPVc4RxGain_Type()
)
prtExPVc4RxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4RxGain.setStatus("mandatory")


class _PrtExPVc4MaxRate_Type(Integer32):
    """Custom type prtExPVc4MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("r4800bps", 2),
          ("r7200bps", 3),
          ("r9600bps", 4))
    )


_PrtExPVc4MaxRate_Type.__name__ = "Integer32"
_PrtExPVc4MaxRate_Object = MibTableColumn
prtExPVc4MaxRate = _PrtExPVc4MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 9),
    _PrtExPVc4MaxRate_Type()
)
prtExPVc4MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4MaxRate.setStatus("mandatory")


class _PrtExPVc4Tc_Type(Integer32):
    """Custom type prtExPVc4Tc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("t1sec", 1),
          ("t2sec", 2),
          ("t3sec", 3),
          ("t4sec", 4))
    )


_PrtExPVc4Tc_Type.__name__ = "Integer32"
_PrtExPVc4Tc_Object = MibTableColumn
prtExPVc4Tc = _PrtExPVc4Tc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 10),
    _PrtExPVc4Tc_Type()
)
prtExPVc4Tc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Tc.setStatus("mandatory")


class _PrtExPVc4Oos_Type(Integer32):
    """Custom type prtExPVc4Oos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 5),
          ("forcedBusy", 4),
          ("forcedIdle", 3),
          ("idleBusy", 6),
          ("notSupported", 2))
    )


_PrtExPVc4Oos_Type.__name__ = "Integer32"
_PrtExPVc4Oos_Object = MibTableColumn
prtExPVc4Oos = _PrtExPVc4Oos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 11),
    _PrtExPVc4Oos_Type()
)
prtExPVc4Oos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Oos.setStatus("mandatory")


class _PrtExPVc4EchoCanceler_Type(Integer32):
    """Custom type prtExPVc4EchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtExPVc4EchoCanceler_Type.__name__ = "Integer32"
_PrtExPVc4EchoCanceler_Object = MibTableColumn
prtExPVc4EchoCanceler = _PrtExPVc4EchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 12),
    _PrtExPVc4EchoCanceler_Type()
)
prtExPVc4EchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4EchoCanceler.setStatus("mandatory")


class _PrtExPVc4VarDelay_Type(Integer32):
    """Custom type prtExPVc4VarDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 300),
    )


_PrtExPVc4VarDelay_Type.__name__ = "Integer32"
_PrtExPVc4VarDelay_Object = MibTableColumn
prtExPVc4VarDelay = _PrtExPVc4VarDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 13),
    _PrtExPVc4VarDelay_Type()
)
prtExPVc4VarDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4VarDelay.setStatus("mandatory")


class _PrtExPVc4CongLevel_Type(Integer32):
    """Custom type prtExPVc4CongLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 70),
    )


_PrtExPVc4CongLevel_Type.__name__ = "Integer32"
_PrtExPVc4CongLevel_Object = MibTableColumn
prtExPVc4CongLevel = _PrtExPVc4CongLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 14),
    _PrtExPVc4CongLevel_Type()
)
prtExPVc4CongLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4CongLevel.setStatus("mandatory")


class _PrtExPVc4Wire_Type(Integer32):
    """Custom type prtExPVc4Wire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("w2wire", 1),
          ("w4wire", 2))
    )


_PrtExPVc4Wire_Type.__name__ = "Integer32"
_PrtExPVc4Wire_Object = MibTableColumn
prtExPVc4Wire = _PrtExPVc4Wire_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 15),
    _PrtExPVc4Wire_Type()
)
prtExPVc4Wire.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Wire.setStatus("mandatory")


class _PrtExPVc4ExtensionType_Type(Integer32):
    """Custom type prtExPVc4ExtensionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("forceConnect", 2),
          ("notApplicable", 1),
          ("voiceSwitching", 3))
    )


_PrtExPVc4ExtensionType_Type.__name__ = "Integer32"
_PrtExPVc4ExtensionType_Object = MibTableColumn
prtExPVc4ExtensionType = _PrtExPVc4ExtensionType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 16),
    _PrtExPVc4ExtensionType_Type()
)
prtExPVc4ExtensionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4ExtensionType.setStatus("mandatory")


class _PrtExPVc4ExtensionNumber_Type(DisplayString):
    """Custom type prtExPVc4ExtensionNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_PrtExPVc4ExtensionNumber_Type.__name__ = "DisplayString"
_PrtExPVc4ExtensionNumber_Object = MibTableColumn
prtExPVc4ExtensionNumber = _PrtExPVc4ExtensionNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 17),
    _PrtExPVc4ExtensionNumber_Type()
)
prtExPVc4ExtensionNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4ExtensionNumber.setStatus("mandatory")


class _PrtExPVc4OutPulsing_Type(Integer32):
    """Custom type prtExPVc4OutPulsing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPVc4OutPulsing_Type.__name__ = "Integer32"
_PrtExPVc4OutPulsing_Object = MibTableColumn
prtExPVc4OutPulsing = _PrtExPVc4OutPulsing_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 18),
    _PrtExPVc4OutPulsing_Type()
)
prtExPVc4OutPulsing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4OutPulsing.setStatus("mandatory")


class _PrtExPVc4HuntGroupMb_Type(Integer32):
    """Custom type prtExPVc4HuntGroupMb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPVc4HuntGroupMb_Type.__name__ = "Integer32"
_PrtExPVc4HuntGroupMb_Object = MibTableColumn
prtExPVc4HuntGroupMb = _PrtExPVc4HuntGroupMb_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 19),
    _PrtExPVc4HuntGroupMb_Type()
)
prtExPVc4HuntGroupMb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4HuntGroupMb.setStatus("mandatory")


class _PrtExPVc4HuntGroupIdx_Type(Integer32):
    """Custom type prtExPVc4HuntGroupIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_PrtExPVc4HuntGroupIdx_Type.__name__ = "Integer32"
_PrtExPVc4HuntGroupIdx_Object = MibTableColumn
prtExPVc4HuntGroupIdx = _PrtExPVc4HuntGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 20),
    _PrtExPVc4HuntGroupIdx_Type()
)
prtExPVc4HuntGroupIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4HuntGroupIdx.setStatus("mandatory")


class _PrtExPVc4AutoFaxMode_Type(Integer32):
    """Custom type prtExPVc4AutoFaxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPVc4AutoFaxMode_Type.__name__ = "Integer32"
_PrtExPVc4AutoFaxMode_Object = MibTableColumn
prtExPVc4AutoFaxMode = _PrtExPVc4AutoFaxMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 21),
    _PrtExPVc4AutoFaxMode_Type()
)
prtExPVc4AutoFaxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4AutoFaxMode.setStatus("mandatory")


class _PrtExPVc4FaxRate_Type(Integer32):
    """Custom type prtExPVc4FaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("r4800bps", 2),
          ("r7200bps", 3),
          ("r9600bps", 4))
    )


_PrtExPVc4FaxRate_Type.__name__ = "Integer32"
_PrtExPVc4FaxRate_Object = MibTableColumn
prtExPVc4FaxRate = _PrtExPVc4FaxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 22),
    _PrtExPVc4FaxRate_Type()
)
prtExPVc4FaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4FaxRate.setStatus("mandatory")


class _PrtExPVc4SeizeAck_Type(Integer32):
    """Custom type prtExPVc4SeizeAck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPVc4SeizeAck_Type.__name__ = "Integer32"
_PrtExPVc4SeizeAck_Object = MibTableColumn
prtExPVc4SeizeAck = _PrtExPVc4SeizeAck_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 23),
    _PrtExPVc4SeizeAck_Type()
)
prtExPVc4SeizeAck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4SeizeAck.setStatus("mandatory")


class _PrtExPVc4SignalingProtocol_Type(Integer32):
    """Custom type prtExPVc4SignalingProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("delayStart", 2),
          ("immediateStart", 3),
          ("winkStart", 4))
    )


_PrtExPVc4SignalingProtocol_Type.__name__ = "Integer32"
_PrtExPVc4SignalingProtocol_Object = MibTableColumn
prtExPVc4SignalingProtocol = _PrtExPVc4SignalingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 24),
    _PrtExPVc4SignalingProtocol_Type()
)
prtExPVc4SignalingProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4SignalingProtocol.setStatus("mandatory")
_PrtExPVc4DelayStart_Type = Integer32
_PrtExPVc4DelayStart_Object = MibTableColumn
prtExPVc4DelayStart = _PrtExPVc4DelayStart_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 25),
    _PrtExPVc4DelayStart_Type()
)
prtExPVc4DelayStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DelayStart.setStatus("mandatory")
_PrtExPVc4WinkMinDuration_Type = Integer32
_PrtExPVc4WinkMinDuration_Object = MibTableColumn
prtExPVc4WinkMinDuration = _PrtExPVc4WinkMinDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 26),
    _PrtExPVc4WinkMinDuration_Type()
)
prtExPVc4WinkMinDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4WinkMinDuration.setStatus("mandatory")
_PrtExPVc4WinkMaxDuration_Type = Integer32
_PrtExPVc4WinkMaxDuration_Object = MibTableColumn
prtExPVc4WinkMaxDuration = _PrtExPVc4WinkMaxDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 27),
    _PrtExPVc4WinkMaxDuration_Type()
)
prtExPVc4WinkMaxDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4WinkMaxDuration.setStatus("mandatory")
_PrtExPVc4DlciTable_Object = MibTable
prtExPVc4DlciTable = _PrtExPVc4DlciTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2)
)
if mibBuilder.loadTexts:
    prtExPVc4DlciTable.setStatus("mandatory")
_PrtExPVc4DlciEntry_Object = MibTableRow
prtExPVc4DlciEntry = _PrtExPVc4DlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1)
)
prtExPVc4DlciEntry.setIndexNames(
    (0, "DACS-MIB", "prtExPVc4DlciCnfgIdx"),
    (0, "DACS-MIB", "prtExPVc4DlciSltIdx"),
    (0, "DACS-MIB", "prtExPVc4DlciPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPVc4DlciEntry.setStatus("mandatory")


class _PrtExPVc4DlciCnfgIdx_Type(Integer32):
    """Custom type prtExPVc4DlciCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPVc4DlciCnfgIdx_Type.__name__ = "Integer32"
_PrtExPVc4DlciCnfgIdx_Object = MibTableColumn
prtExPVc4DlciCnfgIdx = _PrtExPVc4DlciCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 1),
    _PrtExPVc4DlciCnfgIdx_Type()
)
prtExPVc4DlciCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4DlciCnfgIdx.setStatus("mandatory")


class _PrtExPVc4DlciSltIdx_Type(Integer32):
    """Custom type prtExPVc4DlciSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPVc4DlciSltIdx_Type.__name__ = "Integer32"
_PrtExPVc4DlciSltIdx_Object = MibTableColumn
prtExPVc4DlciSltIdx = _PrtExPVc4DlciSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 2),
    _PrtExPVc4DlciSltIdx_Type()
)
prtExPVc4DlciSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4DlciSltIdx.setStatus("mandatory")


class _PrtExPVc4DlciPrtIdx_Type(Integer32):
    """Custom type prtExPVc4DlciPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4))
    )


_PrtExPVc4DlciPrtIdx_Type.__name__ = "Integer32"
_PrtExPVc4DlciPrtIdx_Object = MibTableColumn
prtExPVc4DlciPrtIdx = _PrtExPVc4DlciPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 3),
    _PrtExPVc4DlciPrtIdx_Type()
)
prtExPVc4DlciPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4DlciPrtIdx.setStatus("mandatory")


class _PrtExPVc4DlciValid_Type(Integer32):
    """Custom type prtExPVc4DlciValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPVc4DlciValid_Type.__name__ = "Integer32"
_PrtExPVc4DlciValid_Object = MibTableColumn
prtExPVc4DlciValid = _PrtExPVc4DlciValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 4),
    _PrtExPVc4DlciValid_Type()
)
prtExPVc4DlciValid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciValid.setStatus("mandatory")


class _PrtExPVc4DlciIConSlt_Type(Integer32):
    """Custom type prtExPVc4DlciIConSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_PrtExPVc4DlciIConSlt_Type.__name__ = "Integer32"
_PrtExPVc4DlciIConSlt_Object = MibTableColumn
prtExPVc4DlciIConSlt = _PrtExPVc4DlciIConSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 5),
    _PrtExPVc4DlciIConSlt_Type()
)
prtExPVc4DlciIConSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciIConSlt.setStatus("mandatory")


class _PrtExPVc4DlciIConPrt_Type(Integer32):
    """Custom type prtExPVc4DlciIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109),
          ("noConnect", 100))
    )


_PrtExPVc4DlciIConPrt_Type.__name__ = "Integer32"
_PrtExPVc4DlciIConPrt_Object = MibTableColumn
prtExPVc4DlciIConPrt = _PrtExPVc4DlciIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 6),
    _PrtExPVc4DlciIConPrt_Type()
)
prtExPVc4DlciIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciIConPrt.setStatus("mandatory")


class _PrtExPVc4DlciIConDlci_Type(Integer32):
    """Custom type prtExPVc4DlciIConDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtExPVc4DlciIConDlci_Type.__name__ = "Integer32"
_PrtExPVc4DlciIConDlci_Object = MibTableColumn
prtExPVc4DlciIConDlci = _PrtExPVc4DlciIConDlci_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 7),
    _PrtExPVc4DlciIConDlci_Type()
)
prtExPVc4DlciIConDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciIConDlci.setStatus("mandatory")


class _PrtExPVc4DlciTxBc_Type(Integer32):
    """Custom type prtExPVc4DlciTxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc1024Kbps", 21),
          ("txBc112Kbps", 26),
          ("txBc128Kbps", 13),
          ("txBc14400bps", 4),
          ("txBc16000bps", 25),
          ("txBc19200bps", 5),
          ("txBc192Kbps", 14),
          ("txBc256Kbps", 15),
          ("txBc28800bps", 6),
          ("txBc32000bps", 7),
          ("txBc320Kbps", 16),
          ("txBc38400bps", 8),
          ("txBc384Kbps", 17),
          ("txBc448Kbps", 18),
          ("txBc48000bps", 9),
          ("txBc512Kbps", 19),
          ("txBc56000bps", 10),
          ("txBc57600bps", 11),
          ("txBc64Kbps", 12),
          ("txBc768Kbps", 20),
          ("txBc9600bps", 3),
          ("zero", 2))
    )


_PrtExPVc4DlciTxBc_Type.__name__ = "Integer32"
_PrtExPVc4DlciTxBc_Object = MibTableColumn
prtExPVc4DlciTxBc = _PrtExPVc4DlciTxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 8),
    _PrtExPVc4DlciTxBc_Type()
)
prtExPVc4DlciTxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciTxBc.setStatus("mandatory")


class _PrtExPVc4DlciTxBe_Type(Integer32):
    """Custom type prtExPVc4DlciTxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc112Kbps", 26),
          ("txBc16000bps", 25),
          ("txBe1024Kbps", 21),
          ("txBe128Kbps", 13),
          ("txBe14400bps", 4),
          ("txBe19200bps", 5),
          ("txBe192Kbps", 14),
          ("txBe256Kbps", 15),
          ("txBe28800bps", 6),
          ("txBe32000bps", 7),
          ("txBe320Kbps", 16),
          ("txBe38400bps", 8),
          ("txBe384Kbps", 17),
          ("txBe448Kbps", 18),
          ("txBe48000bps", 9),
          ("txBe512Kbps", 19),
          ("txBe56000bps", 10),
          ("txBe57600bps", 11),
          ("txBe64Kbps", 12),
          ("txBe768Kbps", 20),
          ("txBe9600bps", 3),
          ("zero", 2))
    )


_PrtExPVc4DlciTxBe_Type.__name__ = "Integer32"
_PrtExPVc4DlciTxBe_Object = MibTableColumn
prtExPVc4DlciTxBe = _PrtExPVc4DlciTxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 9),
    _PrtExPVc4DlciTxBe_Type()
)
prtExPVc4DlciTxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciTxBe.setStatus("mandatory")


class _PrtExPVc4DlciRxBc_Type(Integer32):
    """Custom type prtExPVc4DlciRxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc1024Kbps", 21),
          ("rxBc112Kbps", 26),
          ("rxBc128Kbps", 13),
          ("rxBc14400bps", 4),
          ("rxBc16000bps", 25),
          ("rxBc19200bps", 5),
          ("rxBc192Kbps", 14),
          ("rxBc256Kbps", 15),
          ("rxBc28800bps", 6),
          ("rxBc32000bps", 7),
          ("rxBc320Kbps", 16),
          ("rxBc38400bps", 8),
          ("rxBc384Kbps", 17),
          ("rxBc448Kbps", 18),
          ("rxBc48000bps", 9),
          ("rxBc512Kbps", 19),
          ("rxBc56000bps", 10),
          ("rxBc57600bps", 11),
          ("rxBc64Kbps", 12),
          ("rxBc768Kbps", 20),
          ("rxBc9600bps", 3),
          ("zero", 2))
    )


_PrtExPVc4DlciRxBc_Type.__name__ = "Integer32"
_PrtExPVc4DlciRxBc_Object = MibTableColumn
prtExPVc4DlciRxBc = _PrtExPVc4DlciRxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 10),
    _PrtExPVc4DlciRxBc_Type()
)
prtExPVc4DlciRxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciRxBc.setStatus("mandatory")


class _PrtExPVc4DlciRxBe_Type(Integer32):
    """Custom type prtExPVc4DlciRxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc112Kbps", 26),
          ("rxBc16000bps", 25),
          ("rxBe1024Kbps", 21),
          ("rxBe128Kbps", 13),
          ("rxBe14400bps", 4),
          ("rxBe19200bps", 5),
          ("rxBe192Kbps", 14),
          ("rxBe256Kbps", 15),
          ("rxBe28800bps", 6),
          ("rxBe32000bps", 7),
          ("rxBe320Kbps", 16),
          ("rxBe38400bps", 8),
          ("rxBe384Kbps", 17),
          ("rxBe448Kbps", 18),
          ("rxBe48000bps", 9),
          ("rxBe512Kbps", 19),
          ("rxBe56000bps", 10),
          ("rxBe57600bps", 11),
          ("rxBe64Kbps", 12),
          ("rxBe768Kbps", 20),
          ("rxBe9600bps", 3),
          ("zero", 2))
    )


_PrtExPVc4DlciRxBe_Type.__name__ = "Integer32"
_PrtExPVc4DlciRxBe_Object = MibTableColumn
prtExPVc4DlciRxBe = _PrtExPVc4DlciRxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 11),
    _PrtExPVc4DlciRxBe_Type()
)
prtExPVc4DlciRxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciRxBe.setStatus("mandatory")


class _PrtExPVc4DlciPriority_Type(Integer32):
    """Custom type prtExPVc4DlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 8),
    )


_PrtExPVc4DlciPriority_Type.__name__ = "Integer32"
_PrtExPVc4DlciPriority_Object = MibTableColumn
prtExPVc4DlciPriority = _PrtExPVc4DlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 12),
    _PrtExPVc4DlciPriority_Type()
)
prtExPVc4DlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciPriority.setStatus("mandatory")


class _PrtExPVc4DlciStatus_Type(Integer32):
    """Custom type prtExPVc4DlciStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_PrtExPVc4DlciStatus_Type.__name__ = "Integer32"
_PrtExPVc4DlciStatus_Object = MibTableColumn
prtExPVc4DlciStatus = _PrtExPVc4DlciStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 13),
    _PrtExPVc4DlciStatus_Type()
)
prtExPVc4DlciStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4DlciStatus.setStatus("mandatory")
_PrtHsrCnfg_ObjectIdentity = ObjectIdentity
prtHsrCnfg = _PrtHsrCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10)
)
_PrtExHsrCnfgTable_Object = MibTable
prtExHsrCnfgTable = _PrtExHsrCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1)
)
if mibBuilder.loadTexts:
    prtExHsrCnfgTable.setStatus("mandatory")
_PrtExHsrCnfgEntry_Object = MibTableRow
prtExHsrCnfgEntry = _PrtExHsrCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1)
)
prtExHsrCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExHsrCnfgIdx"),
    (0, "DACS-MIB", "prtExHsrSltIdx"),
    (0, "DACS-MIB", "prtExHsrPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExHsrCnfgEntry.setStatus("mandatory")


class _PrtExHsrCnfgIdx_Type(Integer32):
    """Custom type prtExHsrCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExHsrCnfgIdx_Type.__name__ = "Integer32"
_PrtExHsrCnfgIdx_Object = MibTableColumn
prtExHsrCnfgIdx = _PrtExHsrCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 1),
    _PrtExHsrCnfgIdx_Type()
)
prtExHsrCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsrCnfgIdx.setStatus("mandatory")


class _PrtExHsrSltIdx_Type(Integer32):
    """Custom type prtExHsrSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHsrSltIdx_Type.__name__ = "Integer32"
_PrtExHsrSltIdx_Object = MibTableColumn
prtExHsrSltIdx = _PrtExHsrSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 2),
    _PrtExHsrSltIdx_Type()
)
prtExHsrSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsrSltIdx.setStatus("mandatory")
_PrtExHsrPrtIdx_Type = Integer32
_PrtExHsrPrtIdx_Object = MibTableColumn
prtExHsrPrtIdx = _PrtExHsrPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 3),
    _PrtExHsrPrtIdx_Type()
)
prtExHsrPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsrPrtIdx.setStatus("mandatory")


class _PrtExHsrConnect_Type(Integer32):
    """Custom type prtExHsrConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExHsrConnect_Type.__name__ = "Integer32"
_PrtExHsrConnect_Object = MibTableColumn
prtExHsrConnect = _PrtExHsrConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 4),
    _PrtExHsrConnect_Type()
)
prtExHsrConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrConnect.setStatus("mandatory")


class _PrtExHsrProtocol_Type(Integer32):
    """Custom type prtExHsrProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("async", 3),
          ("sync", 2))
    )


_PrtExHsrProtocol_Type.__name__ = "Integer32"
_PrtExHsrProtocol_Object = MibTableColumn
prtExHsrProtocol = _PrtExHsrProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 5),
    _PrtExHsrProtocol_Type()
)
prtExHsrProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrProtocol.setStatus("mandatory")


class _PrtExHsrRate_Type(Integer32):
    """Custom type prtExHsrRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("r115200bps", 15),
          ("r1200bps", 3),
          ("r128000bps", 16),
          ("r16000bps", 12),
          ("r19200bps", 7),
          ("r2400bps", 4),
          ("r32000bps", 13),
          ("r38400bps", 8),
          ("r4800bps", 5),
          ("r48kbps", 9),
          ("r56kbps", 10),
          ("r57600bps", 14),
          ("r600bps", 2),
          ("r64kbps", 11),
          ("r9600bps", 6))
    )


_PrtExHsrRate_Type.__name__ = "Integer32"
_PrtExHsrRate_Object = MibTableColumn
prtExHsrRate = _PrtExHsrRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 6),
    _PrtExHsrRate_Type()
)
prtExHsrRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRate.setStatus("mandatory")


class _PrtExHsrDataBits_Type(Integer32):
    """Custom type prtExHsrDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("d5bits", 1),
          ("d6bits", 2),
          ("d7bits", 3),
          ("d8bits", 4),
          ("notApplicable", 255))
    )


_PrtExHsrDataBits_Type.__name__ = "Integer32"
_PrtExHsrDataBits_Object = MibTableColumn
prtExHsrDataBits = _PrtExHsrDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 7),
    _PrtExHsrDataBits_Type()
)
prtExHsrDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrDataBits.setStatus("mandatory")


class _PrtExHsrParity_Type(Integer32):
    """Custom type prtExHsrParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("even", 5),
          ("no", 2),
          ("notApplicable", 255),
          ("odd", 4),
          ("yes", 3))
    )


_PrtExHsrParity_Type.__name__ = "Integer32"
_PrtExHsrParity_Object = MibTableColumn
prtExHsrParity = _PrtExHsrParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 8),
    _PrtExHsrParity_Type()
)
prtExHsrParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrParity.setStatus("mandatory")


class _PrtExHsrStopBits_Type(Integer32):
    """Custom type prtExHsrStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("stopBits1Bit", 1),
          ("stopBits2Bits", 2))
    )


_PrtExHsrStopBits_Type.__name__ = "Integer32"
_PrtExHsrStopBits_Object = MibTableColumn
prtExHsrStopBits = _PrtExHsrStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 9),
    _PrtExHsrStopBits_Type()
)
prtExHsrStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrStopBits.setStatus("mandatory")


class _PrtExHsrCts_Type(Integer32):
    """Custom type prtExHsrCts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("on", 2),
          ("rts", 3))
    )


_PrtExHsrCts_Type.__name__ = "Integer32"
_PrtExHsrCts_Object = MibTableColumn
prtExHsrCts = _PrtExHsrCts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 10),
    _PrtExHsrCts_Type()
)
prtExHsrCts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrCts.setStatus("mandatory")


class _PrtExHsrClkMode_Type(Integer32):
    """Custom type prtExHsrClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("extDce", 2),
          ("notApplicable", 255))
    )


_PrtExHsrClkMode_Type.__name__ = "Integer32"
_PrtExHsrClkMode_Object = MibTableColumn
prtExHsrClkMode = _PrtExHsrClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 11),
    _PrtExHsrClkMode_Type()
)
prtExHsrClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrClkMode.setStatus("mandatory")


class _PrtExHsrLinkTo_Type(Integer32):
    """Custom type prtExHsrLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_PrtExHsrLinkTo_Type.__name__ = "Integer32"
_PrtExHsrLinkTo_Object = MibTableColumn
prtExHsrLinkTo = _PrtExHsrLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 12),
    _PrtExHsrLinkTo_Type()
)
prtExHsrLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrLinkTo.setStatus("deprecated")


class _PrtExHsrDcdDsr_Type(Integer32):
    """Custom type prtExHsrDcdDsr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 3),
          ("local", 2),
          ("notApplicable", 1))
    )


_PrtExHsrDcdDsr_Type.__name__ = "Integer32"
_PrtExHsrDcdDsr_Object = MibTableColumn
prtExHsrDcdDsr = _PrtExHsrDcdDsr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 13),
    _PrtExHsrDcdDsr_Type()
)
prtExHsrDcdDsr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrDcdDsr.setStatus("mandatory")


class _PrtExHsrOperMode_Type(Integer32):
    """Custom type prtExHsrOperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 4),
          ("normal", 2),
          ("unidirectRx", 3))
    )


_PrtExHsrOperMode_Type.__name__ = "Integer32"
_PrtExHsrOperMode_Object = MibTableColumn
prtExHsrOperMode = _PrtExHsrOperMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 14),
    _PrtExHsrOperMode_Type()
)
prtExHsrOperMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrOperMode.setStatus("mandatory")


class _PrtExHsrRtsDtr_Type(Integer32):
    """Custom type prtExHsrRtsDtr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 3),
          ("local", 2),
          ("notApplicable", 1))
    )


_PrtExHsrRtsDtr_Type.__name__ = "Integer32"
_PrtExHsrRtsDtr_Object = MibTableColumn
prtExHsrRtsDtr = _PrtExHsrRtsDtr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 15),
    _PrtExHsrRtsDtr_Type()
)
prtExHsrRtsDtr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRtsDtr.setStatus("mandatory")


class _PrtExHsrLlbEnable_Type(Integer32):
    """Custom type prtExHsrLlbEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtExHsrLlbEnable_Type.__name__ = "Integer32"
_PrtExHsrLlbEnable_Object = MibTableColumn
prtExHsrLlbEnable = _PrtExHsrLlbEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 16),
    _PrtExHsrLlbEnable_Type()
)
prtExHsrLlbEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrLlbEnable.setStatus("mandatory")


class _PrtExHsrRlbEnable_Type(Integer32):
    """Custom type prtExHsrRlbEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtExHsrRlbEnable_Type.__name__ = "Integer32"
_PrtExHsrRlbEnable_Object = MibTableColumn
prtExHsrRlbEnable = _PrtExHsrRlbEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 17),
    _PrtExHsrRlbEnable_Type()
)
prtExHsrRlbEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRlbEnable.setStatus("mandatory")


class _PrtExHsrRateAdapt_Type(Integer32):
    """Custom type prtExHsrRateAdapt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("proprietary", 2),
          ("v110", 3))
    )


_PrtExHsrRateAdapt_Type.__name__ = "Integer32"
_PrtExHsrRateAdapt_Object = MibTableColumn
prtExHsrRateAdapt = _PrtExHsrRateAdapt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 18),
    _PrtExHsrRateAdapt_Type()
)
prtExHsrRateAdapt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRateAdapt.setStatus("mandatory")
_PrtMbeCnfg_ObjectIdentity = ObjectIdentity
prtMbeCnfg = _PrtMbeCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11)
)
_PrtExMbeCnfgTable_Object = MibTable
prtExMbeCnfgTable = _PrtExMbeCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1)
)
if mibBuilder.loadTexts:
    prtExMbeCnfgTable.setStatus("mandatory")
_PrtExMbeCnfgEntry_Object = MibTableRow
prtExMbeCnfgEntry = _PrtExMbeCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1)
)
prtExMbeCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExMbeCnfgIdx"),
    (0, "DACS-MIB", "prtExMbeSltIdx"),
    (0, "DACS-MIB", "prtExMbePrtIdx"),
)
if mibBuilder.loadTexts:
    prtExMbeCnfgEntry.setStatus("mandatory")


class _PrtExMbeCnfgIdx_Type(Integer32):
    """Custom type prtExMbeCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExMbeCnfgIdx_Type.__name__ = "Integer32"
_PrtExMbeCnfgIdx_Object = MibTableColumn
prtExMbeCnfgIdx = _PrtExMbeCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 1),
    _PrtExMbeCnfgIdx_Type()
)
prtExMbeCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExMbeCnfgIdx.setStatus("mandatory")


class _PrtExMbeSltIdx_Type(Integer32):
    """Custom type prtExMbeSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExMbeSltIdx_Type.__name__ = "Integer32"
_PrtExMbeSltIdx_Object = MibTableColumn
prtExMbeSltIdx = _PrtExMbeSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 2),
    _PrtExMbeSltIdx_Type()
)
prtExMbeSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExMbeSltIdx.setStatus("mandatory")


class _PrtExMbePrtIdx_Type(Integer32):
    """Custom type prtExMbePrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExMbePrtIdx_Type.__name__ = "Integer32"
_PrtExMbePrtIdx_Object = MibTableColumn
prtExMbePrtIdx = _PrtExMbePrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 3),
    _PrtExMbePrtIdx_Type()
)
prtExMbePrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExMbePrtIdx.setStatus("mandatory")


class _PrtExMbeLan_Type(Integer32):
    """Custom type prtExMbeLan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("main", 2),
          ("remote", 1))
    )


_PrtExMbeLan_Type.__name__ = "Integer32"
_PrtExMbeLan_Object = MibTableColumn
prtExMbeLan = _PrtExMbeLan_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 4),
    _PrtExMbeLan_Type()
)
prtExMbeLan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExMbeLan.setStatus("mandatory")
_PrtInMbeCnfgTable_Object = MibTable
prtInMbeCnfgTable = _PrtInMbeCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2)
)
if mibBuilder.loadTexts:
    prtInMbeCnfgTable.setStatus("mandatory")
_PrtInMbeCnfgEntry_Object = MibTableRow
prtInMbeCnfgEntry = _PrtInMbeCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1)
)
prtInMbeCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtInMbeCnfgIdx"),
    (0, "DACS-MIB", "prtInMbeSltIdx"),
    (0, "DACS-MIB", "prtInMbePrtIdx"),
)
if mibBuilder.loadTexts:
    prtInMbeCnfgEntry.setStatus("mandatory")


class _PrtInMbeCnfgIdx_Type(Integer32):
    """Custom type prtInMbeCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInMbeCnfgIdx_Type.__name__ = "Integer32"
_PrtInMbeCnfgIdx_Object = MibTableColumn
prtInMbeCnfgIdx = _PrtInMbeCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 1),
    _PrtInMbeCnfgIdx_Type()
)
prtInMbeCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInMbeCnfgIdx.setStatus("mandatory")


class _PrtInMbeSltIdx_Type(Integer32):
    """Custom type prtInMbeSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInMbeSltIdx_Type.__name__ = "Integer32"
_PrtInMbeSltIdx_Object = MibTableColumn
prtInMbeSltIdx = _PrtInMbeSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 2),
    _PrtInMbeSltIdx_Type()
)
prtInMbeSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInMbeSltIdx.setStatus("mandatory")


class _PrtInMbePrtIdx_Type(Integer32):
    """Custom type prtInMbePrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            101
        )
    )
    namedValues = NamedValues(
        ("inPrt1", 101)
    )


_PrtInMbePrtIdx_Type.__name__ = "Integer32"
_PrtInMbePrtIdx_Object = MibTableColumn
prtInMbePrtIdx = _PrtInMbePrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 3),
    _PrtInMbePrtIdx_Type()
)
prtInMbePrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInMbePrtIdx.setStatus("mandatory")


class _PrtInMbeConnect_Type(Integer32):
    """Custom type prtInMbeConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInMbeConnect_Type.__name__ = "Integer32"
_PrtInMbeConnect_Object = MibTableColumn
prtInMbeConnect = _PrtInMbeConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 4),
    _PrtInMbeConnect_Type()
)
prtInMbeConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInMbeConnect.setStatus("mandatory")


class _PrtInMbeRate_Type(Integer32):
    """Custom type prtInMbeRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("r10x64eq640Kbps", 10),
          ("r11x64eq704Kbps", 11),
          ("r12x64eq768Kbps", 12),
          ("r13x64eq832Kbps", 13),
          ("r14x64eq896Kbps", 14),
          ("r15x64eq960Kbps", 15),
          ("r16x64eq1024Kbps", 16),
          ("r17x64eq1088Kbps", 17),
          ("r18x64eq1152Kbps", 18),
          ("r19x64eq1216Kbps", 19),
          ("r1x64eq64Kbps", 1),
          ("r20x64eq1280Kbps", 20),
          ("r21x64eq1344Kbps", 21),
          ("r22x64eq1408Kbps", 22),
          ("r23x64eq1472Kbps", 23),
          ("r24x64eq1536Kbps", 24),
          ("r2x64eq128Kbps", 2),
          ("r3x64eq192Kbps", 3),
          ("r4x64eq256Kbps", 4),
          ("r5x64eq320Kbps", 5),
          ("r6x64eq384Kbps", 6),
          ("r7x64eq448Kbps", 7),
          ("r8x64eq512Kbps", 8),
          ("r9x64eq576Kbps", 9))
    )


_PrtInMbeRate_Type.__name__ = "Integer32"
_PrtInMbeRate_Object = MibTableColumn
prtInMbeRate = _PrtInMbeRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 5),
    _PrtInMbeRate_Type()
)
prtInMbeRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInMbeRate.setStatus("mandatory")


class _PrtInMbeLinkTo_Type(Integer32):
    """Custom type prtInMbeLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInMbeLinkTo_Type.__name__ = "Integer32"
_PrtInMbeLinkTo_Object = MibTableColumn
prtInMbeLinkTo = _PrtInMbeLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 6),
    _PrtInMbeLinkTo_Type()
)
prtInMbeLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInMbeLinkTo.setStatus("deprecated")
_PrtTreCnfg_ObjectIdentity = ObjectIdentity
prtTreCnfg = _PrtTreCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12)
)
_PrtExTreCnfgTable_Object = MibTable
prtExTreCnfgTable = _PrtExTreCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1)
)
if mibBuilder.loadTexts:
    prtExTreCnfgTable.setStatus("mandatory")
_PrtExTreCnfgEntry_Object = MibTableRow
prtExTreCnfgEntry = _PrtExTreCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1)
)
prtExTreCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExTreCnfgIdx"),
    (0, "DACS-MIB", "prtExTreSltIdx"),
    (0, "DACS-MIB", "prtExTrePrtIdx"),
)
if mibBuilder.loadTexts:
    prtExTreCnfgEntry.setStatus("mandatory")


class _PrtExTreCnfgIdx_Type(Integer32):
    """Custom type prtExTreCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExTreCnfgIdx_Type.__name__ = "Integer32"
_PrtExTreCnfgIdx_Object = MibTableColumn
prtExTreCnfgIdx = _PrtExTreCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 1),
    _PrtExTreCnfgIdx_Type()
)
prtExTreCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTreCnfgIdx.setStatus("mandatory")


class _PrtExTreSltIdx_Type(Integer32):
    """Custom type prtExTreSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExTreSltIdx_Type.__name__ = "Integer32"
_PrtExTreSltIdx_Object = MibTableColumn
prtExTreSltIdx = _PrtExTreSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 2),
    _PrtExTreSltIdx_Type()
)
prtExTreSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTreSltIdx.setStatus("mandatory")


class _PrtExTrePrtIdx_Type(Integer32):
    """Custom type prtExTrePrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExTrePrtIdx_Type.__name__ = "Integer32"
_PrtExTrePrtIdx_Object = MibTableColumn
prtExTrePrtIdx = _PrtExTrePrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 3),
    _PrtExTrePrtIdx_Type()
)
prtExTrePrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTrePrtIdx.setStatus("mandatory")


class _PrtExTreLan_Type(Integer32):
    """Custom type prtExTreLan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("main", 2),
          ("remote", 1))
    )


_PrtExTreLan_Type.__name__ = "Integer32"
_PrtExTreLan_Object = MibTableColumn
prtExTreLan = _PrtExTreLan_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 4),
    _PrtExTreLan_Type()
)
prtExTreLan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTreLan.setStatus("mandatory")


class _PrtExTreLanRate_Type(Integer32):
    """Custom type prtExTreLanRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("r16M", 2),
          ("r4M", 1))
    )


_PrtExTreLanRate_Type.__name__ = "Integer32"
_PrtExTreLanRate_Object = MibTableColumn
prtExTreLanRate = _PrtExTreLanRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 5),
    _PrtExTreLanRate_Type()
)
prtExTreLanRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTreLanRate.setStatus("mandatory")
_PrtInTreCnfgTable_Object = MibTable
prtInTreCnfgTable = _PrtInTreCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2)
)
if mibBuilder.loadTexts:
    prtInTreCnfgTable.setStatus("mandatory")
_PrtInTreCnfgEntry_Object = MibTableRow
prtInTreCnfgEntry = _PrtInTreCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1)
)
prtInTreCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtInTreCnfgIdx"),
    (0, "DACS-MIB", "prtInTreSltIdx"),
    (0, "DACS-MIB", "prtInTrePrtIdx"),
)
if mibBuilder.loadTexts:
    prtInTreCnfgEntry.setStatus("mandatory")


class _PrtInTreCnfgIdx_Type(Integer32):
    """Custom type prtInTreCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInTreCnfgIdx_Type.__name__ = "Integer32"
_PrtInTreCnfgIdx_Object = MibTableColumn
prtInTreCnfgIdx = _PrtInTreCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 1),
    _PrtInTreCnfgIdx_Type()
)
prtInTreCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInTreCnfgIdx.setStatus("mandatory")


class _PrtInTreSltIdx_Type(Integer32):
    """Custom type prtInTreSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInTreSltIdx_Type.__name__ = "Integer32"
_PrtInTreSltIdx_Object = MibTableColumn
prtInTreSltIdx = _PrtInTreSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 2),
    _PrtInTreSltIdx_Type()
)
prtInTreSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInTreSltIdx.setStatus("mandatory")


class _PrtInTrePrtIdx_Type(Integer32):
    """Custom type prtInTrePrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            101
        )
    )
    namedValues = NamedValues(
        ("inPrt1", 101)
    )


_PrtInTrePrtIdx_Type.__name__ = "Integer32"
_PrtInTrePrtIdx_Object = MibTableColumn
prtInTrePrtIdx = _PrtInTrePrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 3),
    _PrtInTrePrtIdx_Type()
)
prtInTrePrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInTrePrtIdx.setStatus("mandatory")


class _PrtInTreConnect_Type(Integer32):
    """Custom type prtInTreConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInTreConnect_Type.__name__ = "Integer32"
_PrtInTreConnect_Object = MibTableColumn
prtInTreConnect = _PrtInTreConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 4),
    _PrtInTreConnect_Type()
)
prtInTreConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInTreConnect.setStatus("mandatory")


class _PrtInTreRate_Type(Integer32):
    """Custom type prtInTreRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("r1x56eq56Kbps", 1),
          ("r1x64eq64Kbps", 2),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 4),
          ("r3x56eq168Kbps", 5),
          ("r3x64eq192Kbps", 6),
          ("r4x56eq224Kbps", 7),
          ("r4x64eq256Kbps", 8),
          ("r5x56eq280Kbps", 9),
          ("r5x64eq320Kbps", 10),
          ("r6x56eq336Kbps", 11),
          ("r6x64eq384Kbps", 12),
          ("r7x56eq392Kbps", 13),
          ("r7x64eq448Kbps", 14),
          ("r8x56eq448Kbps", 15),
          ("r8x64eq512Kbps", 16),
          ("r9x56eq504Kbps", 17))
    )


_PrtInTreRate_Type.__name__ = "Integer32"
_PrtInTreRate_Object = MibTableColumn
prtInTreRate = _PrtInTreRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 5),
    _PrtInTreRate_Type()
)
prtInTreRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInTreRate.setStatus("mandatory")


class _PrtInTreLinkTo_Type(Integer32):
    """Custom type prtInTreLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInTreLinkTo_Type.__name__ = "Integer32"
_PrtInTreLinkTo_Object = MibTableColumn
prtInTreLinkTo = _PrtInTreLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 6),
    _PrtInTreLinkTo_Type()
)
prtInTreLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInTreLinkTo.setStatus("deprecated")
_PrtLs6Cnfg_ObjectIdentity = ObjectIdentity
prtLs6Cnfg = _PrtLs6Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13)
)
_PrtExLs6CnfgTable_Object = MibTable
prtExLs6CnfgTable = _PrtExLs6CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1)
)
if mibBuilder.loadTexts:
    prtExLs6CnfgTable.setStatus("mandatory")
_PrtExLs6CnfgEntry_Object = MibTableRow
prtExLs6CnfgEntry = _PrtExLs6CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1)
)
prtExLs6CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExLs6CnfgIdx"),
    (0, "DACS-MIB", "prtExLs6SltIdx"),
    (0, "DACS-MIB", "prtExLs6PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExLs6CnfgEntry.setStatus("mandatory")


class _PrtExLs6CnfgIdx_Type(Integer32):
    """Custom type prtExLs6CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExLs6CnfgIdx_Type.__name__ = "Integer32"
_PrtExLs6CnfgIdx_Object = MibTableColumn
prtExLs6CnfgIdx = _PrtExLs6CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 1),
    _PrtExLs6CnfgIdx_Type()
)
prtExLs6CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6CnfgIdx.setStatus("mandatory")


class _PrtExLs6SltIdx_Type(Integer32):
    """Custom type prtExLs6SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExLs6SltIdx_Type.__name__ = "Integer32"
_PrtExLs6SltIdx_Object = MibTableColumn
prtExLs6SltIdx = _PrtExLs6SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 2),
    _PrtExLs6SltIdx_Type()
)
prtExLs6SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6SltIdx.setStatus("mandatory")


class _PrtExLs6PrtIdx_Type(Integer32):
    """Custom type prtExLs6PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtExLs6PrtIdx_Type.__name__ = "Integer32"
_PrtExLs6PrtIdx_Object = MibTableColumn
prtExLs6PrtIdx = _PrtExLs6PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 3),
    _PrtExLs6PrtIdx_Type()
)
prtExLs6PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6PrtIdx.setStatus("mandatory")


class _PrtExLs6Connect_Type(Integer32):
    """Custom type prtExLs6Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExLs6Connect_Type.__name__ = "Integer32"
_PrtExLs6Connect_Object = MibTableColumn
prtExLs6Connect = _PrtExLs6Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 4),
    _PrtExLs6Connect_Type()
)
prtExLs6Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6Connect.setStatus("mandatory")


class _PrtExLs6Protocol_Type(Integer32):
    """Custom type prtExLs6Protocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("async", 3),
          ("sync", 2))
    )


_PrtExLs6Protocol_Type.__name__ = "Integer32"
_PrtExLs6Protocol_Object = MibTableColumn
prtExLs6Protocol = _PrtExLs6Protocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 5),
    _PrtExLs6Protocol_Type()
)
prtExLs6Protocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6Protocol.setStatus("mandatory")


class _PrtExLs6Rate_Type(Integer32):
    """Custom type prtExLs6Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("r1200bps", 4),
          ("r14400bps", 10),
          ("r16000bps", 11),
          ("r19200bps", 12),
          ("r24000bps", 13),
          ("r2400bps", 5),
          ("r28800bps", 14),
          ("r300bps", 2),
          ("r32000bps", 15),
          ("r38400bps", 16),
          ("r48000bps", 17),
          ("r4800bps", 6),
          ("r56000bps", 18),
          ("r57600bps", 19),
          ("r600bps", 3),
          ("r64000bps", 20),
          ("r7200bps", 7),
          ("r8000bps", 8),
          ("r9600bps", 9))
    )


_PrtExLs6Rate_Type.__name__ = "Integer32"
_PrtExLs6Rate_Object = MibTableColumn
prtExLs6Rate = _PrtExLs6Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 6),
    _PrtExLs6Rate_Type()
)
prtExLs6Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6Rate.setStatus("mandatory")


class _PrtExLs6ClkMode_Type(Integer32):
    """Custom type prtExLs6ClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte1", 3),
          ("extDce", 2),
          ("notApplicable", 255))
    )


_PrtExLs6ClkMode_Type.__name__ = "Integer32"
_PrtExLs6ClkMode_Object = MibTableColumn
prtExLs6ClkMode = _PrtExLs6ClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 7),
    _PrtExLs6ClkMode_Type()
)
prtExLs6ClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6ClkMode.setStatus("mandatory")


class _PrtExLs6CtrlSignal_Type(Integer32):
    """Custom type prtExLs6CtrlSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dtrAndRts", 4),
          ("local", 2),
          ("rts", 3))
    )


_PrtExLs6CtrlSignal_Type.__name__ = "Integer32"
_PrtExLs6CtrlSignal_Object = MibTableColumn
prtExLs6CtrlSignal = _PrtExLs6CtrlSignal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 8),
    _PrtExLs6CtrlSignal_Type()
)
prtExLs6CtrlSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6CtrlSignal.setStatus("mandatory")


class _PrtExLs6DataBits_Type(Integer32):
    """Custom type prtExLs6DataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("d6bits", 1),
          ("d7bits", 2),
          ("d8bits", 3),
          ("d9bits", 4),
          ("notApplicable", 255))
    )


_PrtExLs6DataBits_Type.__name__ = "Integer32"
_PrtExLs6DataBits_Object = MibTableColumn
prtExLs6DataBits = _PrtExLs6DataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 9),
    _PrtExLs6DataBits_Type()
)
prtExLs6DataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6DataBits.setStatus("mandatory")


class _PrtExLs6Cts_Type(Integer32):
    """Custom type prtExLs6Cts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("on", 2),
          ("rts", 3))
    )


_PrtExLs6Cts_Type.__name__ = "Integer32"
_PrtExLs6Cts_Object = MibTableColumn
prtExLs6Cts = _PrtExLs6Cts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 10),
    _PrtExLs6Cts_Type()
)
prtExLs6Cts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6Cts.setStatus("mandatory")


class _PrtExLs6LinkToInternal_Type(Integer32):
    """Custom type prtExLs6LinkToInternal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102,
              255)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102),
          ("notApplicable", 255))
    )


_PrtExLs6LinkToInternal_Type.__name__ = "Integer32"
_PrtExLs6LinkToInternal_Object = MibTableColumn
prtExLs6LinkToInternal = _PrtExLs6LinkToInternal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 11),
    _PrtExLs6LinkToInternal_Type()
)
prtExLs6LinkToInternal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6LinkToInternal.setStatus("mandatory")
_PrtExLs6VCnfgTable_Object = MibTable
prtExLs6VCnfgTable = _PrtExLs6VCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2)
)
if mibBuilder.loadTexts:
    prtExLs6VCnfgTable.setStatus("mandatory")
_PrtExLs6VCnfgEntry_Object = MibTableRow
prtExLs6VCnfgEntry = _PrtExLs6VCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1)
)
prtExLs6VCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExLs6VCnfgIdx"),
    (0, "DACS-MIB", "prtExLs6VSltIdx"),
    (0, "DACS-MIB", "prtExLs6VPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExLs6VCnfgEntry.setStatus("mandatory")


class _PrtExLs6VCnfgIdx_Type(Integer32):
    """Custom type prtExLs6VCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExLs6VCnfgIdx_Type.__name__ = "Integer32"
_PrtExLs6VCnfgIdx_Object = MibTableColumn
prtExLs6VCnfgIdx = _PrtExLs6VCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 1),
    _PrtExLs6VCnfgIdx_Type()
)
prtExLs6VCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6VCnfgIdx.setStatus("mandatory")


class _PrtExLs6VSltIdx_Type(Integer32):
    """Custom type prtExLs6VSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExLs6VSltIdx_Type.__name__ = "Integer32"
_PrtExLs6VSltIdx_Object = MibTableColumn
prtExLs6VSltIdx = _PrtExLs6VSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 2),
    _PrtExLs6VSltIdx_Type()
)
prtExLs6VSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6VSltIdx.setStatus("mandatory")


class _PrtExLs6VPrtIdx_Type(Integer32):
    """Custom type prtExLs6VPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("exPrt7", 7),
          ("exPrt8", 8))
    )


_PrtExLs6VPrtIdx_Type.__name__ = "Integer32"
_PrtExLs6VPrtIdx_Object = MibTableColumn
prtExLs6VPrtIdx = _PrtExLs6VPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 3),
    _PrtExLs6VPrtIdx_Type()
)
prtExLs6VPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6VPrtIdx.setStatus("mandatory")


class _PrtExLs6VConnect_Type(Integer32):
    """Custom type prtExLs6VConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExLs6VConnect_Type.__name__ = "Integer32"
_PrtExLs6VConnect_Object = MibTableColumn
prtExLs6VConnect = _PrtExLs6VConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 4),
    _PrtExLs6VConnect_Type()
)
prtExLs6VConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VConnect.setStatus("mandatory")


class _PrtExLs6VRate_Type(Integer32):
    """Custom type prtExLs6VRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("r16000bps", 6),
          ("r24000bps", 7),
          ("r32000bps", 8),
          ("r64000bps", 9),
          ("r6400bps", 2),
          ("r7200bps", 3),
          ("r8000bps", 4),
          ("r9600bps", 5))
    )


_PrtExLs6VRate_Type.__name__ = "Integer32"
_PrtExLs6VRate_Object = MibTableColumn
prtExLs6VRate = _PrtExLs6VRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 5),
    _PrtExLs6VRate_Type()
)
prtExLs6VRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VRate.setStatus("mandatory")


class _PrtExLs6VEchoCanceler_Type(Integer32):
    """Custom type prtExLs6VEchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtExLs6VEchoCanceler_Type.__name__ = "Integer32"
_PrtExLs6VEchoCanceler_Object = MibTableColumn
prtExLs6VEchoCanceler = _PrtExLs6VEchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 6),
    _PrtExLs6VEchoCanceler_Type()
)
prtExLs6VEchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VEchoCanceler.setStatus("mandatory")


class _PrtExLs6VIfType_Type(Integer32):
    """Custom type prtExLs6VIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("w2wire", 1),
          ("w4wire", 2))
    )


_PrtExLs6VIfType_Type.__name__ = "Integer32"
_PrtExLs6VIfType_Object = MibTableColumn
prtExLs6VIfType = _PrtExLs6VIfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 7),
    _PrtExLs6VIfType_Type()
)
prtExLs6VIfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VIfType.setStatus("mandatory")
_PrtExLs6VTxGain_Type = Integer32
_PrtExLs6VTxGain_Object = MibTableColumn
prtExLs6VTxGain = _PrtExLs6VTxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 8),
    _PrtExLs6VTxGain_Type()
)
prtExLs6VTxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VTxGain.setStatus("mandatory")
_PrtExLs6VRxGain_Type = Integer32
_PrtExLs6VRxGain_Object = MibTableColumn
prtExLs6VRxGain = _PrtExLs6VRxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 9),
    _PrtExLs6VRxGain_Type()
)
prtExLs6VRxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VRxGain.setStatus("mandatory")


class _PrtExLs6VOos_Type(Integer32):
    """Custom type prtExLs6VOos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 3),
          ("forcedBusy", 2),
          ("forcedIdle", 1),
          ("idleBusy", 4))
    )


_PrtExLs6VOos_Type.__name__ = "Integer32"
_PrtExLs6VOos_Object = MibTableColumn
prtExLs6VOos = _PrtExLs6VOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 10),
    _PrtExLs6VOos_Type()
)
prtExLs6VOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VOos.setStatus("mandatory")
_PrtInLs6CnfgTable_Object = MibTable
prtInLs6CnfgTable = _PrtInLs6CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3)
)
if mibBuilder.loadTexts:
    prtInLs6CnfgTable.setStatus("mandatory")
_PrtInLs6CnfgEntry_Object = MibTableRow
prtInLs6CnfgEntry = _PrtInLs6CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1)
)
prtInLs6CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtInLs6CnfgIdx"),
    (0, "DACS-MIB", "prtInLs6SltIdx"),
    (0, "DACS-MIB", "prtInLs6PrtIdx"),
)
if mibBuilder.loadTexts:
    prtInLs6CnfgEntry.setStatus("mandatory")


class _PrtInLs6CnfgIdx_Type(Integer32):
    """Custom type prtInLs6CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInLs6CnfgIdx_Type.__name__ = "Integer32"
_PrtInLs6CnfgIdx_Object = MibTableColumn
prtInLs6CnfgIdx = _PrtInLs6CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 1),
    _PrtInLs6CnfgIdx_Type()
)
prtInLs6CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs6CnfgIdx.setStatus("mandatory")


class _PrtInLs6SltIdx_Type(Integer32):
    """Custom type prtInLs6SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInLs6SltIdx_Type.__name__ = "Integer32"
_PrtInLs6SltIdx_Object = MibTableColumn
prtInLs6SltIdx = _PrtInLs6SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 2),
    _PrtInLs6SltIdx_Type()
)
prtInLs6SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs6SltIdx.setStatus("mandatory")


class _PrtInLs6PrtIdx_Type(Integer32):
    """Custom type prtInLs6PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102))
    )


_PrtInLs6PrtIdx_Type.__name__ = "Integer32"
_PrtInLs6PrtIdx_Object = MibTableColumn
prtInLs6PrtIdx = _PrtInLs6PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 3),
    _PrtInLs6PrtIdx_Type()
)
prtInLs6PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs6PrtIdx.setStatus("mandatory")


class _PrtInLs6Connect_Type(Integer32):
    """Custom type prtInLs6Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInLs6Connect_Type.__name__ = "Integer32"
_PrtInLs6Connect_Object = MibTableColumn
prtInLs6Connect = _PrtInLs6Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 4),
    _PrtInLs6Connect_Type()
)
prtInLs6Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6Connect.setStatus("mandatory")


class _PrtInLs6TandemMode_Type(Integer32):
    """Custom type prtInLs6TandemMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noTandem", 1),
          ("tandemMaster", 2),
          ("tandemSlave", 3))
    )


_PrtInLs6TandemMode_Type.__name__ = "Integer32"
_PrtInLs6TandemMode_Object = MibTableColumn
prtInLs6TandemMode = _PrtInLs6TandemMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 5),
    _PrtInLs6TandemMode_Type()
)
prtInLs6TandemMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6TandemMode.setStatus("mandatory")


class _PrtInLs6Rate_Type(Integer32):
    """Custom type prtInLs6Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("r128Kbps", 4),
          ("r192Kbps", 7),
          ("r256Kbps", 5),
          ("r32Kbps", 1),
          ("r384Kbps", 6),
          ("r512Kbps", 8),
          ("r56Kbps", 2),
          ("r64Kpbs", 3),
          ("r768Kbps", 9))
    )


_PrtInLs6Rate_Type.__name__ = "Integer32"
_PrtInLs6Rate_Object = MibTableColumn
prtInLs6Rate = _PrtInLs6Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 6),
    _PrtInLs6Rate_Type()
)
prtInLs6Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6Rate.setStatus("mandatory")


class _PrtInLs6RemoteType_Type(Integer32):
    """Custom type prtInLs6RemoteType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("km2kSlave", 2),
          ("km2kStandalone", 3),
          ("ls6", 1),
          ("notApplicable", 255))
    )


_PrtInLs6RemoteType_Type.__name__ = "Integer32"
_PrtInLs6RemoteType_Object = MibTableColumn
prtInLs6RemoteType = _PrtInLs6RemoteType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 7),
    _PrtInLs6RemoteType_Type()
)
prtInLs6RemoteType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6RemoteType.setStatus("mandatory")


class _PrtInLs6LinkTo_Type(Integer32):
    """Custom type prtInLs6LinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtInLs6LinkTo_Type.__name__ = "Integer32"
_PrtInLs6LinkTo_Object = MibTableColumn
prtInLs6LinkTo = _PrtInLs6LinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 8),
    _PrtInLs6LinkTo_Type()
)
prtInLs6LinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6LinkTo.setStatus("deprecated")
_PrtVc3Cnfg_ObjectIdentity = ObjectIdentity
prtVc3Cnfg = _PrtVc3Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14)
)
_PrtExVc3CnfgTable_Object = MibTable
prtExVc3CnfgTable = _PrtExVc3CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1)
)
if mibBuilder.loadTexts:
    prtExVc3CnfgTable.setStatus("mandatory")
_PrtExVc3CnfgEntry_Object = MibTableRow
prtExVc3CnfgEntry = _PrtExVc3CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1)
)
prtExVc3CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExVc3CnfgIdx"),
    (0, "DACS-MIB", "prtExVc3SltIdx"),
    (0, "DACS-MIB", "prtExVc3PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExVc3CnfgEntry.setStatus("mandatory")


class _PrtExVc3CnfgIdx_Type(Integer32):
    """Custom type prtExVc3CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExVc3CnfgIdx_Type.__name__ = "Integer32"
_PrtExVc3CnfgIdx_Object = MibTableColumn
prtExVc3CnfgIdx = _PrtExVc3CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 1),
    _PrtExVc3CnfgIdx_Type()
)
prtExVc3CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVc3CnfgIdx.setStatus("mandatory")


class _PrtExVc3SltIdx_Type(Integer32):
    """Custom type prtExVc3SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExVc3SltIdx_Type.__name__ = "Integer32"
_PrtExVc3SltIdx_Object = MibTableColumn
prtExVc3SltIdx = _PrtExVc3SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 2),
    _PrtExVc3SltIdx_Type()
)
prtExVc3SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVc3SltIdx.setStatus("mandatory")


class _PrtExVc3PrtIdx_Type(Integer32):
    """Custom type prtExVc3PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3))
    )


_PrtExVc3PrtIdx_Type.__name__ = "Integer32"
_PrtExVc3PrtIdx_Object = MibTableColumn
prtExVc3PrtIdx = _PrtExVc3PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 3),
    _PrtExVc3PrtIdx_Type()
)
prtExVc3PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVc3PrtIdx.setStatus("mandatory")


class _PrtExVc3Connect_Type(Integer32):
    """Custom type prtExVc3Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExVc3Connect_Type.__name__ = "Integer32"
_PrtExVc3Connect_Object = MibTableColumn
prtExVc3Connect = _PrtExVc3Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 4),
    _PrtExVc3Connect_Type()
)
prtExVc3Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3Connect.setStatus("mandatory")
_PrtExVc3TransGain_Type = Integer32
_PrtExVc3TransGain_Object = MibTableColumn
prtExVc3TransGain = _PrtExVc3TransGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 5),
    _PrtExVc3TransGain_Type()
)
prtExVc3TransGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3TransGain.setStatus("mandatory")
_PrtExVc3ReceiveGain_Type = Integer32
_PrtExVc3ReceiveGain_Object = MibTableColumn
prtExVc3ReceiveGain = _PrtExVc3ReceiveGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 6),
    _PrtExVc3ReceiveGain_Type()
)
prtExVc3ReceiveGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3ReceiveGain.setStatus("mandatory")


class _PrtExVc3Wire_Type(Integer32):
    """Custom type prtExVc3Wire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("w2wire", 1),
          ("w4wire", 2))
    )


_PrtExVc3Wire_Type.__name__ = "Integer32"
_PrtExVc3Wire_Object = MibTableColumn
prtExVc3Wire = _PrtExVc3Wire_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 7),
    _PrtExVc3Wire_Type()
)
prtExVc3Wire.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3Wire.setStatus("mandatory")


class _PrtExVc3Rate_Type(Integer32):
    """Custom type prtExVc3Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("r4800bps", 2),
          ("r9600bps", 1))
    )


_PrtExVc3Rate_Type.__name__ = "Integer32"
_PrtExVc3Rate_Object = MibTableColumn
prtExVc3Rate = _PrtExVc3Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 8),
    _PrtExVc3Rate_Type()
)
prtExVc3Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3Rate.setStatus("mandatory")


class _PrtExVc3EchoCanceler_Type(Integer32):
    """Custom type prtExVc3EchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtExVc3EchoCanceler_Type.__name__ = "Integer32"
_PrtExVc3EchoCanceler_Object = MibTableColumn
prtExVc3EchoCanceler = _PrtExVc3EchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 9),
    _PrtExVc3EchoCanceler_Type()
)
prtExVc3EchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3EchoCanceler.setStatus("mandatory")
_PrtInVc3CnfgTable_Object = MibTable
prtInVc3CnfgTable = _PrtInVc3CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2)
)
if mibBuilder.loadTexts:
    prtInVc3CnfgTable.setStatus("mandatory")
_PrtInVc3CnfgEntry_Object = MibTableRow
prtInVc3CnfgEntry = _PrtInVc3CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1)
)
prtInVc3CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtInVc3CnfgIdx"),
    (0, "DACS-MIB", "prtInVc3SltIdx"),
    (0, "DACS-MIB", "prtInVc3PrtIdx"),
)
if mibBuilder.loadTexts:
    prtInVc3CnfgEntry.setStatus("mandatory")


class _PrtInVc3CnfgIdx_Type(Integer32):
    """Custom type prtInVc3CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInVc3CnfgIdx_Type.__name__ = "Integer32"
_PrtInVc3CnfgIdx_Object = MibTableColumn
prtInVc3CnfgIdx = _PrtInVc3CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 1),
    _PrtInVc3CnfgIdx_Type()
)
prtInVc3CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInVc3CnfgIdx.setStatus("mandatory")


class _PrtInVc3SltIdx_Type(Integer32):
    """Custom type prtInVc3SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInVc3SltIdx_Type.__name__ = "Integer32"
_PrtInVc3SltIdx_Object = MibTableColumn
prtInVc3SltIdx = _PrtInVc3SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 2),
    _PrtInVc3SltIdx_Type()
)
prtInVc3SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInVc3SltIdx.setStatus("mandatory")


class _PrtInVc3PrtIdx_Type(Integer32):
    """Custom type prtInVc3PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            101
        )
    )
    namedValues = NamedValues(
        ("inPrt1", 101)
    )


_PrtInVc3PrtIdx_Type.__name__ = "Integer32"
_PrtInVc3PrtIdx_Object = MibTableColumn
prtInVc3PrtIdx = _PrtInVc3PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 3),
    _PrtInVc3PrtIdx_Type()
)
prtInVc3PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInVc3PrtIdx.setStatus("mandatory")


class _PrtInVc3Connect_Type(Integer32):
    """Custom type prtInVc3Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInVc3Connect_Type.__name__ = "Integer32"
_PrtInVc3Connect_Object = MibTableColumn
prtInVc3Connect = _PrtInVc3Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 4),
    _PrtInVc3Connect_Type()
)
prtInVc3Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInVc3Connect.setStatus("mandatory")


class _PrtInVc3Rate_Type(Integer32):
    """Custom type prtInVc3Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("r16000bps", 2),
          ("r32000bps", 1))
    )


_PrtInVc3Rate_Type.__name__ = "Integer32"
_PrtInVc3Rate_Object = MibTableColumn
prtInVc3Rate = _PrtInVc3Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 5),
    _PrtInVc3Rate_Type()
)
prtInVc3Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInVc3Rate.setStatus("mandatory")


class _PrtInVc3Oos_Type(Integer32):
    """Custom type prtInVc3Oos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 3),
          ("forcedBusy", 2),
          ("forcedIdle", 1),
          ("idleBusy", 4))
    )


_PrtInVc3Oos_Type.__name__ = "Integer32"
_PrtInVc3Oos_Object = MibTableColumn
prtInVc3Oos = _PrtInVc3Oos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 6),
    _PrtInVc3Oos_Type()
)
prtInVc3Oos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInVc3Oos.setStatus("mandatory")


class _PrtInVc3LinkTo_Type(Integer32):
    """Custom type prtInVc3LinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInVc3LinkTo_Type.__name__ = "Integer32"
_PrtInVc3LinkTo_Object = MibTableColumn
prtInVc3LinkTo = _PrtInVc3LinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 7),
    _PrtInVc3LinkTo_Type()
)
prtInVc3LinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInVc3LinkTo.setStatus("deprecated")
_PrtVcPbxCnfg_ObjectIdentity = ObjectIdentity
prtVcPbxCnfg = _PrtVcPbxCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15)
)
_PrtExVcPbxCnfgTable_Object = MibTable
prtExVcPbxCnfgTable = _PrtExVcPbxCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1)
)
if mibBuilder.loadTexts:
    prtExVcPbxCnfgTable.setStatus("mandatory")
_PrtExVcPbxCnfgEntry_Object = MibTableRow
prtExVcPbxCnfgEntry = _PrtExVcPbxCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1)
)
prtExVcPbxCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtExVcPbxCnfgIdx"),
    (0, "DACS-MIB", "prtExVcPbxSltIdx"),
    (0, "DACS-MIB", "prtExVcPbxPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExVcPbxCnfgEntry.setStatus("mandatory")


class _PrtExVcPbxCnfgIdx_Type(Integer32):
    """Custom type prtExVcPbxCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExVcPbxCnfgIdx_Type.__name__ = "Integer32"
_PrtExVcPbxCnfgIdx_Object = MibTableColumn
prtExVcPbxCnfgIdx = _PrtExVcPbxCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 1),
    _PrtExVcPbxCnfgIdx_Type()
)
prtExVcPbxCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxCnfgIdx.setStatus("mandatory")


class _PrtExVcPbxSltIdx_Type(Integer32):
    """Custom type prtExVcPbxSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExVcPbxSltIdx_Type.__name__ = "Integer32"
_PrtExVcPbxSltIdx_Object = MibTableColumn
prtExVcPbxSltIdx = _PrtExVcPbxSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 2),
    _PrtExVcPbxSltIdx_Type()
)
prtExVcPbxSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxSltIdx.setStatus("mandatory")


class _PrtExVcPbxPrtIdx_Type(Integer32):
    """Custom type prtExVcPbxPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExVcPbxPrtIdx_Type.__name__ = "Integer32"
_PrtExVcPbxPrtIdx_Object = MibTableColumn
prtExVcPbxPrtIdx = _PrtExVcPbxPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 3),
    _PrtExVcPbxPrtIdx_Type()
)
prtExVcPbxPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxPrtIdx.setStatus("mandatory")


class _PrtExVcPbxConnect_Type(Integer32):
    """Custom type prtExVcPbxConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExVcPbxConnect_Type.__name__ = "Integer32"
_PrtExVcPbxConnect_Object = MibTableColumn
prtExVcPbxConnect = _PrtExVcPbxConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 4),
    _PrtExVcPbxConnect_Type()
)
prtExVcPbxConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxConnect.setStatus("mandatory")


class _PrtExVcPbxGroup_Type(Integer32):
    """Custom type prtExVcPbxGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExVcPbxGroup_Type.__name__ = "Integer32"
_PrtExVcPbxGroup_Object = MibTableColumn
prtExVcPbxGroup = _PrtExVcPbxGroup_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 5),
    _PrtExVcPbxGroup_Type()
)
prtExVcPbxGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxGroup.setStatus("mandatory")


class _PrtExVcPbxTransparent_Type(Integer32):
    """Custom type prtExVcPbxTransparent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 255),
          ("yes", 3))
    )


_PrtExVcPbxTransparent_Type.__name__ = "Integer32"
_PrtExVcPbxTransparent_Object = MibTableColumn
prtExVcPbxTransparent = _PrtExVcPbxTransparent_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 6),
    _PrtExVcPbxTransparent_Type()
)
prtExVcPbxTransparent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTransparent.setStatus("mandatory")
_PrtExVcPbxTransSignalTs_Type = Integer32
_PrtExVcPbxTransSignalTs_Object = MibTableColumn
prtExVcPbxTransSignalTs = _PrtExVcPbxTransSignalTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 7),
    _PrtExVcPbxTransSignalTs_Type()
)
prtExVcPbxTransSignalTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTransSignalTs.setStatus("mandatory")


class _PrtExVcPbxFrame_Type(Integer32):
    """Custom type prtExVcPbxFrame based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("esfT1", 2),
          ("g732nE1", 4),
          ("g732nE1CRC", 5),
          ("g732sE1", 6),
          ("g732sE1CRC", 7),
          ("notApplicable", 255),
          ("sfT1", 3))
    )


_PrtExVcPbxFrame_Type.__name__ = "Integer32"
_PrtExVcPbxFrame_Object = MibTableColumn
prtExVcPbxFrame = _PrtExVcPbxFrame_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 8),
    _PrtExVcPbxFrame_Type()
)
prtExVcPbxFrame.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxFrame.setStatus("mandatory")


class _PrtExVcPbxRestoreTime_Type(Integer32):
    """Custom type prtExVcPbxRestoreTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ccittE1", 4),
          ("notApplicable", 255),
          ("restoreT10sec62411", 3),
          ("restoreT1secFast", 2))
    )


_PrtExVcPbxRestoreTime_Type.__name__ = "Integer32"
_PrtExVcPbxRestoreTime_Object = MibTableColumn
prtExVcPbxRestoreTime = _PrtExVcPbxRestoreTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 9),
    _PrtExVcPbxRestoreTime_Type()
)
prtExVcPbxRestoreTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxRestoreTime.setStatus("mandatory")


class _PrtExVcPbxLineCode_Type(Integer32):
    """Custom type prtExVcPbxLineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("b7zsT1", 1),
          ("b8zsT1", 2),
          ("hdb3E1", 4),
          ("notApplicable", 255),
          ("transT1", 3))
    )


_PrtExVcPbxLineCode_Type.__name__ = "Integer32"
_PrtExVcPbxLineCode_Object = MibTableColumn
prtExVcPbxLineCode = _PrtExVcPbxLineCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 10),
    _PrtExVcPbxLineCode_Type()
)
prtExVcPbxLineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxLineCode.setStatus("mandatory")


class _PrtExVcPbxLineLength_Type(Integer32):
    """Custom type prtExVcPbxLineLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("len0p133ft", 2),
          ("len134p266ft", 3),
          ("len267p399ft", 4),
          ("len400p533ft", 5),
          ("len534p655ft", 6),
          ("notApplicable", 255),
          ("unknown", 1))
    )


_PrtExVcPbxLineLength_Type.__name__ = "Integer32"
_PrtExVcPbxLineLength_Object = MibTableColumn
prtExVcPbxLineLength = _PrtExVcPbxLineLength_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 11),
    _PrtExVcPbxLineLength_Type()
)
prtExVcPbxLineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxLineLength.setStatus("mandatory")


class _PrtExVcPbxLinkTo_Type(Integer32):
    """Custom type prtExVcPbxLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExVcPbxLinkTo_Type.__name__ = "Integer32"
_PrtExVcPbxLinkTo_Object = MibTableColumn
prtExVcPbxLinkTo = _PrtExVcPbxLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 12),
    _PrtExVcPbxLinkTo_Type()
)
prtExVcPbxLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxLinkTo.setStatus("deprecated")


class _PrtExVcPbxSignalOper_Type(Integer32):
    """Custom type prtExVcPbxSignalOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bEqA", 3),
          ("inverseA", 4),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtExVcPbxSignalOper_Type.__name__ = "Integer32"
_PrtExVcPbxSignalOper_Object = MibTableColumn
prtExVcPbxSignalOper = _PrtExVcPbxSignalOper_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 13),
    _PrtExVcPbxSignalOper_Type()
)
prtExVcPbxSignalOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxSignalOper.setStatus("mandatory")


class _PrtExVcPbxIdleCode_Type(Integer32):
    """Custom type prtExVcPbxIdleCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("h1a", 10),
          ("h54", 9),
          ("h7e", 8),
          ("h7f", 7),
          ("h98", 6),
          ("h9e", 5),
          ("hd5", 4),
          ("he4", 3),
          ("hff", 2),
          ("notApplicable", 1))
    )


_PrtExVcPbxIdleCode_Type.__name__ = "Integer32"
_PrtExVcPbxIdleCode_Object = MibTableColumn
prtExVcPbxIdleCode = _PrtExVcPbxIdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 14),
    _PrtExVcPbxIdleCode_Type()
)
prtExVcPbxIdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxIdleCode.setStatus("mandatory")
_PrtIn1p6VcPbxCnfgTable_Object = MibTable
prtIn1p6VcPbxCnfgTable = _PrtIn1p6VcPbxCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2)
)
if mibBuilder.loadTexts:
    prtIn1p6VcPbxCnfgTable.setStatus("mandatory")
_PrtIn1p6VcPbxCnfgEntry_Object = MibTableRow
prtIn1p6VcPbxCnfgEntry = _PrtIn1p6VcPbxCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1)
)
prtIn1p6VcPbxCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtIn1p6VcPbxCnfgIdx"),
    (0, "DACS-MIB", "prtIn1p6VcPbxSltIdx"),
    (0, "DACS-MIB", "prtIn1p6VcPbxPrtIdx"),
)
if mibBuilder.loadTexts:
    prtIn1p6VcPbxCnfgEntry.setStatus("mandatory")


class _PrtIn1p6VcPbxCnfgIdx_Type(Integer32):
    """Custom type prtIn1p6VcPbxCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIn1p6VcPbxCnfgIdx_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxCnfgIdx_Object = MibTableColumn
prtIn1p6VcPbxCnfgIdx = _PrtIn1p6VcPbxCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 1),
    _PrtIn1p6VcPbxCnfgIdx_Type()
)
prtIn1p6VcPbxCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxCnfgIdx.setStatus("mandatory")


class _PrtIn1p6VcPbxSltIdx_Type(Integer32):
    """Custom type prtIn1p6VcPbxSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtIn1p6VcPbxSltIdx_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxSltIdx_Object = MibTableColumn
prtIn1p6VcPbxSltIdx = _PrtIn1p6VcPbxSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 2),
    _PrtIn1p6VcPbxSltIdx_Type()
)
prtIn1p6VcPbxSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxSltIdx.setStatus("mandatory")


class _PrtIn1p6VcPbxPrtIdx_Type(Integer32):
    """Custom type prtIn1p6VcPbxPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102,
              103,
              104,
              105,
              106)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106))
    )


_PrtIn1p6VcPbxPrtIdx_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxPrtIdx_Object = MibTableColumn
prtIn1p6VcPbxPrtIdx = _PrtIn1p6VcPbxPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 3),
    _PrtIn1p6VcPbxPrtIdx_Type()
)
prtIn1p6VcPbxPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxPrtIdx.setStatus("mandatory")


class _PrtIn1p6VcPbxConnect_Type(Integer32):
    """Custom type prtIn1p6VcPbxConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtIn1p6VcPbxConnect_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxConnect_Object = MibTableColumn
prtIn1p6VcPbxConnect = _PrtIn1p6VcPbxConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 4),
    _PrtIn1p6VcPbxConnect_Type()
)
prtIn1p6VcPbxConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxConnect.setStatus("mandatory")


class _PrtIn1p6VcPbxRate_Type(Integer32):
    """Custom type prtIn1p6VcPbxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("r12800bps", 6),
          ("r4800bps", 1),
          ("r6400bps", 2),
          ("r7200bps", 3),
          ("r8000bps", 4),
          ("r9600bps", 5))
    )


_PrtIn1p6VcPbxRate_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxRate_Object = MibTableColumn
prtIn1p6VcPbxRate = _PrtIn1p6VcPbxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 5),
    _PrtIn1p6VcPbxRate_Type()
)
prtIn1p6VcPbxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxRate.setStatus("mandatory")


class _PrtIn1p6VcPbxEchoCanceler_Type(Integer32):
    """Custom type prtIn1p6VcPbxEchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtIn1p6VcPbxEchoCanceler_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxEchoCanceler_Object = MibTableColumn
prtIn1p6VcPbxEchoCanceler = _PrtIn1p6VcPbxEchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 6),
    _PrtIn1p6VcPbxEchoCanceler_Type()
)
prtIn1p6VcPbxEchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxEchoCanceler.setStatus("mandatory")


class _PrtIn1p6VcPbxPabxTs_Type(Integer32):
    """Custom type prtIn1p6VcPbxPabxTs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_PrtIn1p6VcPbxPabxTs_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxPabxTs_Object = MibTableColumn
prtIn1p6VcPbxPabxTs = _PrtIn1p6VcPbxPabxTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 7),
    _PrtIn1p6VcPbxPabxTs_Type()
)
prtIn1p6VcPbxPabxTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxPabxTs.setStatus("mandatory")
_PrtIn7p8VcPbxCnfgTable_Object = MibTable
prtIn7p8VcPbxCnfgTable = _PrtIn7p8VcPbxCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3)
)
if mibBuilder.loadTexts:
    prtIn7p8VcPbxCnfgTable.setStatus("mandatory")
_PrtIn7p8VcPbxCnfgEntry_Object = MibTableRow
prtIn7p8VcPbxCnfgEntry = _PrtIn7p8VcPbxCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1)
)
prtIn7p8VcPbxCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtIn7p8VcPbxCnfgIdx"),
    (0, "DACS-MIB", "prtIn7p8VcPbxSltIdx"),
    (0, "DACS-MIB", "prtIn7p8VcPbxPrtIdx"),
)
if mibBuilder.loadTexts:
    prtIn7p8VcPbxCnfgEntry.setStatus("mandatory")


class _PrtIn7p8VcPbxCnfgIdx_Type(Integer32):
    """Custom type prtIn7p8VcPbxCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIn7p8VcPbxCnfgIdx_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxCnfgIdx_Object = MibTableColumn
prtIn7p8VcPbxCnfgIdx = _PrtIn7p8VcPbxCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 1),
    _PrtIn7p8VcPbxCnfgIdx_Type()
)
prtIn7p8VcPbxCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxCnfgIdx.setStatus("mandatory")


class _PrtIn7p8VcPbxSltIdx_Type(Integer32):
    """Custom type prtIn7p8VcPbxSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtIn7p8VcPbxSltIdx_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxSltIdx_Object = MibTableColumn
prtIn7p8VcPbxSltIdx = _PrtIn7p8VcPbxSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 2),
    _PrtIn7p8VcPbxSltIdx_Type()
)
prtIn7p8VcPbxSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxSltIdx.setStatus("mandatory")


class _PrtIn7p8VcPbxPrtIdx_Type(Integer32):
    """Custom type prtIn7p8VcPbxPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(107,
              108)
        )
    )
    namedValues = NamedValues(
        *(("inPrt7", 107),
          ("inPrt8", 108))
    )


_PrtIn7p8VcPbxPrtIdx_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxPrtIdx_Object = MibTableColumn
prtIn7p8VcPbxPrtIdx = _PrtIn7p8VcPbxPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 3),
    _PrtIn7p8VcPbxPrtIdx_Type()
)
prtIn7p8VcPbxPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxPrtIdx.setStatus("mandatory")


class _PrtIn7p8VcPbxConnect_Type(Integer32):
    """Custom type prtIn7p8VcPbxConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtIn7p8VcPbxConnect_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxConnect_Object = MibTableColumn
prtIn7p8VcPbxConnect = _PrtIn7p8VcPbxConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 4),
    _PrtIn7p8VcPbxConnect_Type()
)
prtIn7p8VcPbxConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxConnect.setStatus("mandatory")


class _PrtIn7p8VcPbxMode_Type(Integer32):
    """Custom type prtIn7p8VcPbxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("server", 2))
    )


_PrtIn7p8VcPbxMode_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxMode_Object = MibTableColumn
prtIn7p8VcPbxMode = _PrtIn7p8VcPbxMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 5),
    _PrtIn7p8VcPbxMode_Type()
)
prtIn7p8VcPbxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxMode.setStatus("mandatory")


class _PrtIn7p8VcPbxRate_Type(Integer32):
    """Custom type prtIn7p8VcPbxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("r16Kbps", 2),
          ("r32Kbps", 1))
    )


_PrtIn7p8VcPbxRate_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxRate_Object = MibTableColumn
prtIn7p8VcPbxRate = _PrtIn7p8VcPbxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 6),
    _PrtIn7p8VcPbxRate_Type()
)
prtIn7p8VcPbxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxRate.setStatus("mandatory")


class _PrtIn7p8VcPbxSignalMode_Type(Integer32):
    """Custom type prtIn7p8VcPbxSignalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("aBit", 2),
          ("abcBit", 3),
          ("abcdBit", 4),
          ("none", 1))
    )


_PrtIn7p8VcPbxSignalMode_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxSignalMode_Object = MibTableColumn
prtIn7p8VcPbxSignalMode = _PrtIn7p8VcPbxSignalMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 7),
    _PrtIn7p8VcPbxSignalMode_Type()
)
prtIn7p8VcPbxSignalMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxSignalMode.setStatus("mandatory")


class _PrtIn7p8VcPbxOos_Type(Integer32):
    """Custom type prtIn7p8VcPbxOos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forcedBusy", 2),
          ("forcedIdle", 1))
    )


_PrtIn7p8VcPbxOos_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxOos_Object = MibTableColumn
prtIn7p8VcPbxOos = _PrtIn7p8VcPbxOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 8),
    _PrtIn7p8VcPbxOos_Type()
)
prtIn7p8VcPbxOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxOos.setStatus("mandatory")


class _PrtIn7p8VcPbxLinkTo_Type(Integer32):
    """Custom type prtIn7p8VcPbxLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtIn7p8VcPbxLinkTo_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxLinkTo_Object = MibTableColumn
prtIn7p8VcPbxLinkTo = _PrtIn7p8VcPbxLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 9),
    _PrtIn7p8VcPbxLinkTo_Type()
)
prtIn7p8VcPbxLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxLinkTo.setStatus("deprecated")
_PrtExVcPbxTsTable_Object = MibTable
prtExVcPbxTsTable = _PrtExVcPbxTsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4)
)
if mibBuilder.loadTexts:
    prtExVcPbxTsTable.setStatus("mandatory")
_PrtExVcPbxTsEntry_Object = MibTableRow
prtExVcPbxTsEntry = _PrtExVcPbxTsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1)
)
prtExVcPbxTsEntry.setIndexNames(
    (0, "DACS-MIB", "prtExVcPbxTsCnfgIdx"),
    (0, "DACS-MIB", "prtExVcPbxTsSltIdx"),
    (0, "DACS-MIB", "prtExVcPbxTsPrtIdx"),
    (0, "DACS-MIB", "prtExVcPbxTsIdx"),
)
if mibBuilder.loadTexts:
    prtExVcPbxTsEntry.setStatus("mandatory")


class _PrtExVcPbxTsCnfgIdx_Type(Integer32):
    """Custom type prtExVcPbxTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExVcPbxTsCnfgIdx_Type.__name__ = "Integer32"
_PrtExVcPbxTsCnfgIdx_Object = MibTableColumn
prtExVcPbxTsCnfgIdx = _PrtExVcPbxTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 1),
    _PrtExVcPbxTsCnfgIdx_Type()
)
prtExVcPbxTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxTsCnfgIdx.setStatus("mandatory")


class _PrtExVcPbxTsSltIdx_Type(Integer32):
    """Custom type prtExVcPbxTsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExVcPbxTsSltIdx_Type.__name__ = "Integer32"
_PrtExVcPbxTsSltIdx_Object = MibTableColumn
prtExVcPbxTsSltIdx = _PrtExVcPbxTsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 2),
    _PrtExVcPbxTsSltIdx_Type()
)
prtExVcPbxTsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxTsSltIdx.setStatus("mandatory")


class _PrtExVcPbxTsPrtIdx_Type(Integer32):
    """Custom type prtExVcPbxTsPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExVcPbxTsPrtIdx_Type.__name__ = "Integer32"
_PrtExVcPbxTsPrtIdx_Object = MibTableColumn
prtExVcPbxTsPrtIdx = _PrtExVcPbxTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 3),
    _PrtExVcPbxTsPrtIdx_Type()
)
prtExVcPbxTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxTsPrtIdx.setStatus("mandatory")
_PrtExVcPbxTsIdx_Type = Integer32
_PrtExVcPbxTsIdx_Object = MibTableColumn
prtExVcPbxTsIdx = _PrtExVcPbxTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 4),
    _PrtExVcPbxTsIdx_Type()
)
prtExVcPbxTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxTsIdx.setStatus("mandatory")


class _PrtExVcPbxTsMode_Type(Integer32):
    """Custom type prtExVcPbxTsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("compressed", 2),
          ("transparent", 3),
          ("unused", 1))
    )


_PrtExVcPbxTsMode_Type.__name__ = "Integer32"
_PrtExVcPbxTsMode_Object = MibTableColumn
prtExVcPbxTsMode = _PrtExVcPbxTsMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 5),
    _PrtExVcPbxTsMode_Type()
)
prtExVcPbxTsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsMode.setStatus("mandatory")


class _PrtExVcPbxTsIConSlot_Type(Integer32):
    """Custom type prtExVcPbxTsIConSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2))
    )


_PrtExVcPbxTsIConSlot_Type.__name__ = "Integer32"
_PrtExVcPbxTsIConSlot_Object = MibTableColumn
prtExVcPbxTsIConSlot = _PrtExVcPbxTsIConSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 6),
    _PrtExVcPbxTsIConSlot_Type()
)
prtExVcPbxTsIConSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsIConSlot.setStatus("mandatory")


class _PrtExVcPbxTsIConPrt_Type(Integer32):
    """Custom type prtExVcPbxTsIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(100,
              101,
              102,
              103,
              104,
              105,
              106)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("noConnect", 100))
    )


_PrtExVcPbxTsIConPrt_Type.__name__ = "Integer32"
_PrtExVcPbxTsIConPrt_Object = MibTableColumn
prtExVcPbxTsIConPrt = _PrtExVcPbxTsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 7),
    _PrtExVcPbxTsIConPrt_Type()
)
prtExVcPbxTsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsIConPrt.setStatus("mandatory")
_PrtIsdnCnfg_ObjectIdentity = ObjectIdentity
prtIsdnCnfg = _PrtIsdnCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16)
)
_PrtIsdnCnfgTable_Object = MibTable
prtIsdnCnfgTable = _PrtIsdnCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1)
)
if mibBuilder.loadTexts:
    prtIsdnCnfgTable.setStatus("mandatory")
_PrtIsdnCnfgEntry_Object = MibTableRow
prtIsdnCnfgEntry = _PrtIsdnCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1)
)
prtIsdnCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtIsdnCnfgIdx"),
    (0, "DACS-MIB", "prtIsdnSltIdx"),
    (0, "DACS-MIB", "prtIsdnPrtIdx"),
)
if mibBuilder.loadTexts:
    prtIsdnCnfgEntry.setStatus("mandatory")


class _PrtIsdnCnfgIdx_Type(Integer32):
    """Custom type prtIsdnCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIsdnCnfgIdx_Type.__name__ = "Integer32"
_PrtIsdnCnfgIdx_Object = MibTableColumn
prtIsdnCnfgIdx = _PrtIsdnCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 1),
    _PrtIsdnCnfgIdx_Type()
)
prtIsdnCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnCnfgIdx.setStatus("mandatory")


class _PrtIsdnSltIdx_Type(Integer32):
    """Custom type prtIsdnSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              103,
              104,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("notApplicable", 255))
    )


_PrtIsdnSltIdx_Type.__name__ = "Integer32"
_PrtIsdnSltIdx_Object = MibTableColumn
prtIsdnSltIdx = _PrtIsdnSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 2),
    _PrtIsdnSltIdx_Type()
)
prtIsdnSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnSltIdx.setStatus("mandatory")
_PrtIsdnPrtIdx_Type = Integer32
_PrtIsdnPrtIdx_Object = MibTableColumn
prtIsdnPrtIdx = _PrtIsdnPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 3),
    _PrtIsdnPrtIdx_Type()
)
prtIsdnPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnPrtIdx.setStatus("mandatory")


class _PrtIsdnConnect_Type(Integer32):
    """Custom type prtIsdnConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtIsdnConnect_Type.__name__ = "Integer32"
_PrtIsdnConnect_Object = MibTableColumn
prtIsdnConnect = _PrtIsdnConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 4),
    _PrtIsdnConnect_Type()
)
prtIsdnConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnConnect.setStatus("mandatory")


class _PrtIsdnSignalingProtocol_Type(Integer32):
    """Custom type prtIsdnSignalingProtocol based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              6,
              7,
              9,
              10,
              17,
              18,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dms100", 7),
          ("ess5", 6),
          ("etsi", 3),
          ("ins1500", 18),
          ("ins64", 17),
          ("ni1", 9),
          ("ni2", 10),
          ("notApplicable", 255),
          ("other", 1))
    )


_PrtIsdnSignalingProtocol_Type.__name__ = "Integer32"
_PrtIsdnSignalingProtocol_Object = MibTableColumn
prtIsdnSignalingProtocol = _PrtIsdnSignalingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 5),
    _PrtIsdnSignalingProtocol_Type()
)
prtIsdnSignalingProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnSignalingProtocol.setStatus("mandatory")


class _PrtIsdnBasicRateLineTopology_Type(Integer32):
    """Custom type prtIsdnBasicRateLineTopology based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("pointToMultipoint", 2),
          ("pointToPoint", 1))
    )


_PrtIsdnBasicRateLineTopology_Type.__name__ = "Integer32"
_PrtIsdnBasicRateLineTopology_Object = MibTableColumn
prtIsdnBasicRateLineTopology = _PrtIsdnBasicRateLineTopology_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 6),
    _PrtIsdnBasicRateLineTopology_Type()
)
prtIsdnBasicRateLineTopology.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnBasicRateLineTopology.setStatus("mandatory")


class _PrtIsdnMode_Type(Integer32):
    """Custom type prtIsdnMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dialup", 1),
          ("leased", 2),
          ("notApplicable", 255),
          ("syncLeased", 3))
    )


_PrtIsdnMode_Type.__name__ = "Integer32"
_PrtIsdnMode_Object = MibTableColumn
prtIsdnMode = _PrtIsdnMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 7),
    _PrtIsdnMode_Type()
)
prtIsdnMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnMode.setStatus("mandatory")


class _PrtIsdnFilter_Type(Integer32):
    """Custom type prtIsdnFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("answerAll", 2),
          ("notApplicable", 1),
          ("rejectAll", 3),
          ("selective", 4))
    )


_PrtIsdnFilter_Type.__name__ = "Integer32"
_PrtIsdnFilter_Object = MibTableColumn
prtIsdnFilter = _PrtIsdnFilter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 8),
    _PrtIsdnFilter_Type()
)
prtIsdnFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnFilter.setStatus("mandatory")


class _PrtIsdnSimultaneousCall_Type(Integer32):
    """Custom type prtIsdnSimultaneousCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("accept", 2),
          ("notApplicable", 1),
          ("reject", 3))
    )


_PrtIsdnSimultaneousCall_Type.__name__ = "Integer32"
_PrtIsdnSimultaneousCall_Object = MibTableColumn
prtIsdnSimultaneousCall = _PrtIsdnSimultaneousCall_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 9),
    _PrtIsdnSimultaneousCall_Type()
)
prtIsdnSimultaneousCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnSimultaneousCall.setStatus("mandatory")
_PrtIsdnNumOfAbstractTerm_Type = Integer32
_PrtIsdnNumOfAbstractTerm_Object = MibTableColumn
prtIsdnNumOfAbstractTerm = _PrtIsdnNumOfAbstractTerm_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 10),
    _PrtIsdnNumOfAbstractTerm_Type()
)
prtIsdnNumOfAbstractTerm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnNumOfAbstractTerm.setStatus("mandatory")


class _PrtIsdnSwitchMode_Type(Integer32):
    """Custom type prtIsdnSwitchMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("connect", 4),
          ("manual", 3),
          ("notApplicable", 1))
    )


_PrtIsdnSwitchMode_Type.__name__ = "Integer32"
_PrtIsdnSwitchMode_Object = MibTableColumn
prtIsdnSwitchMode = _PrtIsdnSwitchMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 11),
    _PrtIsdnSwitchMode_Type()
)
prtIsdnSwitchMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnSwitchMode.setStatus("mandatory")
_PrtIsdnEndpointTable_Object = MibTable
prtIsdnEndpointTable = _PrtIsdnEndpointTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2)
)
if mibBuilder.loadTexts:
    prtIsdnEndpointTable.setStatus("mandatory")
_PrtIsdnEndpointEntry_Object = MibTableRow
prtIsdnEndpointEntry = _PrtIsdnEndpointEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1)
)
prtIsdnEndpointEntry.setIndexNames(
    (0, "DACS-MIB", "prtIsdnEndpointCnfgIdx"),
    (0, "DACS-MIB", "prtIsdnEndpointSltIdx"),
    (0, "DACS-MIB", "prtIsdnEndpointPrtIdx"),
    (0, "DACS-MIB", "prtIsdnEndpointIdx"),
)
if mibBuilder.loadTexts:
    prtIsdnEndpointEntry.setStatus("mandatory")


class _PrtIsdnEndpointCnfgIdx_Type(Integer32):
    """Custom type prtIsdnEndpointCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIsdnEndpointCnfgIdx_Type.__name__ = "Integer32"
_PrtIsdnEndpointCnfgIdx_Object = MibTableColumn
prtIsdnEndpointCnfgIdx = _PrtIsdnEndpointCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 1),
    _PrtIsdnEndpointCnfgIdx_Type()
)
prtIsdnEndpointCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnEndpointCnfgIdx.setStatus("mandatory")


class _PrtIsdnEndpointSltIdx_Type(Integer32):
    """Custom type prtIsdnEndpointSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              103,
              104,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("notApplicable", 255))
    )


_PrtIsdnEndpointSltIdx_Type.__name__ = "Integer32"
_PrtIsdnEndpointSltIdx_Object = MibTableColumn
prtIsdnEndpointSltIdx = _PrtIsdnEndpointSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 2),
    _PrtIsdnEndpointSltIdx_Type()
)
prtIsdnEndpointSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnEndpointSltIdx.setStatus("mandatory")
_PrtIsdnEndpointPrtIdx_Type = Integer32
_PrtIsdnEndpointPrtIdx_Object = MibTableColumn
prtIsdnEndpointPrtIdx = _PrtIsdnEndpointPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 3),
    _PrtIsdnEndpointPrtIdx_Type()
)
prtIsdnEndpointPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnEndpointPrtIdx.setStatus("mandatory")


class _PrtIsdnEndpointIdx_Type(Integer32):
    """Custom type prtIsdnEndpointIdx based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atei1", 1),
          ("atei2", 2))
    )


_PrtIsdnEndpointIdx_Type.__name__ = "Integer32"
_PrtIsdnEndpointIdx_Object = MibTableColumn
prtIsdnEndpointIdx = _PrtIsdnEndpointIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 4),
    _PrtIsdnEndpointIdx_Type()
)
prtIsdnEndpointIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnEndpointIdx.setStatus("mandatory")


class _PrtIsdnEndpointTeiType_Type(Integer32):
    """Custom type prtIsdnEndpointTeiType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 1),
          ("notApplicable", 255),
          ("static", 2))
    )


_PrtIsdnEndpointTeiType_Type.__name__ = "Integer32"
_PrtIsdnEndpointTeiType_Object = MibTableColumn
prtIsdnEndpointTeiType = _PrtIsdnEndpointTeiType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 5),
    _PrtIsdnEndpointTeiType_Type()
)
prtIsdnEndpointTeiType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnEndpointTeiType.setStatus("mandatory")
_PrtIsdnEndpointTeiValue_Type = Integer32
_PrtIsdnEndpointTeiValue_Object = MibTableColumn
prtIsdnEndpointTeiValue = _PrtIsdnEndpointTeiValue_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 6),
    _PrtIsdnEndpointTeiValue_Type()
)
prtIsdnEndpointTeiValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnEndpointTeiValue.setStatus("mandatory")
_PrtIsdnEndpointSpid_Type = DisplayString
_PrtIsdnEndpointSpid_Object = MibTableColumn
prtIsdnEndpointSpid = _PrtIsdnEndpointSpid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 7),
    _PrtIsdnEndpointSpid_Type()
)
prtIsdnEndpointSpid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnEndpointSpid.setStatus("mandatory")


class _PrtIsdnEndpointBearerCh_Type(Integer32):
    """Custom type prtIsdnEndpointBearerCh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("anyChannel", 2),
          ("channelB1", 3),
          ("channelB2", 4),
          ("notApplicable", 1))
    )


_PrtIsdnEndpointBearerCh_Type.__name__ = "Integer32"
_PrtIsdnEndpointBearerCh_Object = MibTableColumn
prtIsdnEndpointBearerCh = _PrtIsdnEndpointBearerCh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 8),
    _PrtIsdnEndpointBearerCh_Type()
)
prtIsdnEndpointBearerCh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnEndpointBearerCh.setStatus("mandatory")


class _PrtIsdnEndpointRowStatus_Type(Integer32):
    """Custom type prtIsdnEndpointRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 6))
    )


_PrtIsdnEndpointRowStatus_Type.__name__ = "Integer32"
_PrtIsdnEndpointRowStatus_Object = MibTableColumn
prtIsdnEndpointRowStatus = _PrtIsdnEndpointRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 9),
    _PrtIsdnEndpointRowStatus_Type()
)
prtIsdnEndpointRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnEndpointRowStatus.setStatus("mandatory")
_PrtIsdnDirectoryTable_Object = MibTable
prtIsdnDirectoryTable = _PrtIsdnDirectoryTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3)
)
if mibBuilder.loadTexts:
    prtIsdnDirectoryTable.setStatus("mandatory")
_PrtIsdnDirectoryEntry_Object = MibTableRow
prtIsdnDirectoryEntry = _PrtIsdnDirectoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1)
)
prtIsdnDirectoryEntry.setIndexNames(
    (0, "DACS-MIB", "prtIsdnDirectoryCnfgIdx"),
    (0, "DACS-MIB", "prtIsdnDirectorySltIdx"),
    (0, "DACS-MIB", "prtIsdnDirectoryPrtIdx"),
)
if mibBuilder.loadTexts:
    prtIsdnDirectoryEntry.setStatus("mandatory")


class _PrtIsdnDirectoryCnfgIdx_Type(Integer32):
    """Custom type prtIsdnDirectoryCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIsdnDirectoryCnfgIdx_Type.__name__ = "Integer32"
_PrtIsdnDirectoryCnfgIdx_Object = MibTableColumn
prtIsdnDirectoryCnfgIdx = _PrtIsdnDirectoryCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 1),
    _PrtIsdnDirectoryCnfgIdx_Type()
)
prtIsdnDirectoryCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnDirectoryCnfgIdx.setStatus("mandatory")


class _PrtIsdnDirectorySltIdx_Type(Integer32):
    """Custom type prtIsdnDirectorySltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              103,
              104)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxMlA", 103),
          ("kmxMlB", 104))
    )


_PrtIsdnDirectorySltIdx_Type.__name__ = "Integer32"
_PrtIsdnDirectorySltIdx_Object = MibTableColumn
prtIsdnDirectorySltIdx = _PrtIsdnDirectorySltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 2),
    _PrtIsdnDirectorySltIdx_Type()
)
prtIsdnDirectorySltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnDirectorySltIdx.setStatus("mandatory")
_PrtIsdnDirectoryPrtIdx_Type = Integer32
_PrtIsdnDirectoryPrtIdx_Object = MibTableColumn
prtIsdnDirectoryPrtIdx = _PrtIsdnDirectoryPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 3),
    _PrtIsdnDirectoryPrtIdx_Type()
)
prtIsdnDirectoryPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnDirectoryPrtIdx.setStatus("mandatory")


class _PrtIsdnDirectoryLocalAddr_Type(DisplayString):
    """Custom type prtIsdnDirectoryLocalAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 20),
    )


_PrtIsdnDirectoryLocalAddr_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryLocalAddr_Object = MibTableColumn
prtIsdnDirectoryLocalAddr = _PrtIsdnDirectoryLocalAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 4),
    _PrtIsdnDirectoryLocalAddr_Type()
)
prtIsdnDirectoryLocalAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryLocalAddr.setStatus("mandatory")


class _PrtIsdnDirectoryLocalSubAddr_Type(DisplayString):
    """Custom type prtIsdnDirectoryLocalSubAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 6),
    )


_PrtIsdnDirectoryLocalSubAddr_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryLocalSubAddr_Object = MibTableColumn
prtIsdnDirectoryLocalSubAddr = _PrtIsdnDirectoryLocalSubAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 5),
    _PrtIsdnDirectoryLocalSubAddr_Type()
)
prtIsdnDirectoryLocalSubAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryLocalSubAddr.setStatus("mandatory")


class _PrtIsdnDirectoryRemoteAddr_Type(DisplayString):
    """Custom type prtIsdnDirectoryRemoteAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 20),
    )


_PrtIsdnDirectoryRemoteAddr_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryRemoteAddr_Object = MibTableColumn
prtIsdnDirectoryRemoteAddr = _PrtIsdnDirectoryRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 6),
    _PrtIsdnDirectoryRemoteAddr_Type()
)
prtIsdnDirectoryRemoteAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRemoteAddr.setStatus("mandatory")


class _PrtIsdnDirectoryRemoteSubAddr_Type(DisplayString):
    """Custom type prtIsdnDirectoryRemoteSubAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 6),
    )


_PrtIsdnDirectoryRemoteSubAddr_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryRemoteSubAddr_Object = MibTableColumn
prtIsdnDirectoryRemoteSubAddr = _PrtIsdnDirectoryRemoteSubAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 7),
    _PrtIsdnDirectoryRemoteSubAddr_Type()
)
prtIsdnDirectoryRemoteSubAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRemoteSubAddr.setStatus("mandatory")


class _PrtIsdnDirectoryPrtNu_Type(Integer32):
    """Custom type prtIsdnDirectoryPrtNu based on Integer32"""
    defaultValue = 1


_PrtIsdnDirectoryPrtNu_Object = MibTableColumn
prtIsdnDirectoryPrtNu = _PrtIsdnDirectoryPrtNu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 8),
    _PrtIsdnDirectoryPrtNu_Type()
)
prtIsdnDirectoryPrtNu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryPrtNu.setStatus("mandatory")


class _PrtIsdnDirectoryTeiId_Type(Integer32):
    """Custom type prtIsdnDirectoryTeiId based on Integer32"""
    defaultValue = 1


_PrtIsdnDirectoryTeiId_Object = MibTableColumn
prtIsdnDirectoryTeiId = _PrtIsdnDirectoryTeiId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 9),
    _PrtIsdnDirectoryTeiId_Type()
)
prtIsdnDirectoryTeiId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryTeiId.setStatus("mandatory")


class _PrtIsdnDirectoryRowStatus_Type(Integer32):
    """Custom type prtIsdnDirectoryRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 6))
    )


_PrtIsdnDirectoryRowStatus_Type.__name__ = "Integer32"
_PrtIsdnDirectoryRowStatus_Object = MibTableColumn
prtIsdnDirectoryRowStatus = _PrtIsdnDirectoryRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 10),
    _PrtIsdnDirectoryRowStatus_Type()
)
prtIsdnDirectoryRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRowStatus.setStatus("mandatory")


class _PrtIsdnDirectoryLocalAddr2_Type(DisplayString):
    """Custom type prtIsdnDirectoryLocalAddr2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 20),
    )


_PrtIsdnDirectoryLocalAddr2_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryLocalAddr2_Object = MibTableColumn
prtIsdnDirectoryLocalAddr2 = _PrtIsdnDirectoryLocalAddr2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 11),
    _PrtIsdnDirectoryLocalAddr2_Type()
)
prtIsdnDirectoryLocalAddr2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryLocalAddr2.setStatus("mandatory")


class _PrtIsdnDirectoryLocalSubAddr2_Type(DisplayString):
    """Custom type prtIsdnDirectoryLocalSubAddr2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 6),
    )


_PrtIsdnDirectoryLocalSubAddr2_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryLocalSubAddr2_Object = MibTableColumn
prtIsdnDirectoryLocalSubAddr2 = _PrtIsdnDirectoryLocalSubAddr2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 12),
    _PrtIsdnDirectoryLocalSubAddr2_Type()
)
prtIsdnDirectoryLocalSubAddr2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryLocalSubAddr2.setStatus("mandatory")


class _PrtIsdnDirectoryRemoteAddr2_Type(DisplayString):
    """Custom type prtIsdnDirectoryRemoteAddr2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 20),
    )


_PrtIsdnDirectoryRemoteAddr2_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryRemoteAddr2_Object = MibTableColumn
prtIsdnDirectoryRemoteAddr2 = _PrtIsdnDirectoryRemoteAddr2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 13),
    _PrtIsdnDirectoryRemoteAddr2_Type()
)
prtIsdnDirectoryRemoteAddr2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRemoteAddr2.setStatus("mandatory")


class _PrtIsdnDirectoryRemoteSubAddr2_Type(DisplayString):
    """Custom type prtIsdnDirectoryRemoteSubAddr2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 6),
    )


_PrtIsdnDirectoryRemoteSubAddr2_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryRemoteSubAddr2_Object = MibTableColumn
prtIsdnDirectoryRemoteSubAddr2 = _PrtIsdnDirectoryRemoteSubAddr2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 14),
    _PrtIsdnDirectoryRemoteSubAddr2_Type()
)
prtIsdnDirectoryRemoteSubAddr2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRemoteSubAddr2.setStatus("mandatory")
_PrtLogicalCnfg_ObjectIdentity = ObjectIdentity
prtLogicalCnfg = _PrtLogicalCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17)
)
_PrtLogicalCnfgTable_Object = MibTable
prtLogicalCnfgTable = _PrtLogicalCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1)
)
if mibBuilder.loadTexts:
    prtLogicalCnfgTable.setStatus("mandatory")
_PrtLogicalCnfgEntry_Object = MibTableRow
prtLogicalCnfgEntry = _PrtLogicalCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1)
)
prtLogicalCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtLogicalCnfgIdx"),
    (0, "DACS-MIB", "prtLogicalSltIdx"),
    (0, "DACS-MIB", "prtLogicalPrtIdx"),
)
if mibBuilder.loadTexts:
    prtLogicalCnfgEntry.setStatus("mandatory")


class _PrtLogicalCnfgIdx_Type(Integer32):
    """Custom type prtLogicalCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtLogicalCnfgIdx_Type.__name__ = "Integer32"
_PrtLogicalCnfgIdx_Object = MibTableColumn
prtLogicalCnfgIdx = _PrtLogicalCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 1),
    _PrtLogicalCnfgIdx_Type()
)
prtLogicalCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtLogicalCnfgIdx.setStatus("mandatory")


class _PrtLogicalSltIdx_Type(Integer32):
    """Custom type prtLogicalSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtLogicalSltIdx_Type.__name__ = "Integer32"
_PrtLogicalSltIdx_Object = MibTableColumn
prtLogicalSltIdx = _PrtLogicalSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 2),
    _PrtLogicalSltIdx_Type()
)
prtLogicalSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtLogicalSltIdx.setStatus("mandatory")
_PrtLogicalPrtIdx_Type = Integer32
_PrtLogicalPrtIdx_Object = MibTableColumn
prtLogicalPrtIdx = _PrtLogicalPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 3),
    _PrtLogicalPrtIdx_Type()
)
prtLogicalPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtLogicalPrtIdx.setStatus("mandatory")


class _PrtLogicalConnect_Type(Integer32):
    """Custom type prtLogicalConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtLogicalConnect_Type.__name__ = "Integer32"
_PrtLogicalConnect_Object = MibTableColumn
prtLogicalConnect = _PrtLogicalConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 4),
    _PrtLogicalConnect_Type()
)
prtLogicalConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLogicalConnect.setStatus("mandatory")


class _PrtLogicalFunction_Type(Integer32):
    """Custom type prtLogicalFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("encapsulator", 3),
          ("huntGroup", 4),
          ("linkSelector", 2),
          ("notApplicable", 1))
    )


_PrtLogicalFunction_Type.__name__ = "Integer32"
_PrtLogicalFunction_Object = MibTableColumn
prtLogicalFunction = _PrtLogicalFunction_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 5),
    _PrtLogicalFunction_Type()
)
prtLogicalFunction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLogicalFunction.setStatus("mandatory")


class _PrtLogicalRowStatus_Type(Integer32):
    """Custom type prtLogicalRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 6))
    )


_PrtLogicalRowStatus_Type.__name__ = "Integer32"
_PrtLogicalRowStatus_Object = MibTableColumn
prtLogicalRowStatus = _PrtLogicalRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 6),
    _PrtLogicalRowStatus_Type()
)
prtLogicalRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLogicalRowStatus.setStatus("mandatory")
_LinkSelectorCnfgTable_Object = MibTable
linkSelectorCnfgTable = _LinkSelectorCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2)
)
if mibBuilder.loadTexts:
    linkSelectorCnfgTable.setStatus("mandatory")
_LinkSelectorCnfgEntry_Object = MibTableRow
linkSelectorCnfgEntry = _LinkSelectorCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1)
)
linkSelectorCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "linkSelectorCnfgIdx"),
    (0, "DACS-MIB", "linkSelectorSltIdx"),
    (0, "DACS-MIB", "linkSelectorPrtIdx"),
)
if mibBuilder.loadTexts:
    linkSelectorCnfgEntry.setStatus("mandatory")


class _LinkSelectorCnfgIdx_Type(Integer32):
    """Custom type linkSelectorCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_LinkSelectorCnfgIdx_Type.__name__ = "Integer32"
_LinkSelectorCnfgIdx_Object = MibTableColumn
linkSelectorCnfgIdx = _LinkSelectorCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 1),
    _LinkSelectorCnfgIdx_Type()
)
linkSelectorCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    linkSelectorCnfgIdx.setStatus("mandatory")


class _LinkSelectorSltIdx_Type(Integer32):
    """Custom type linkSelectorSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_LinkSelectorSltIdx_Type.__name__ = "Integer32"
_LinkSelectorSltIdx_Object = MibTableColumn
linkSelectorSltIdx = _LinkSelectorSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 2),
    _LinkSelectorSltIdx_Type()
)
linkSelectorSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    linkSelectorSltIdx.setStatus("mandatory")
_LinkSelectorPrtIdx_Type = Integer32
_LinkSelectorPrtIdx_Object = MibTableColumn
linkSelectorPrtIdx = _LinkSelectorPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 3),
    _LinkSelectorPrtIdx_Type()
)
linkSelectorPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    linkSelectorPrtIdx.setStatus("mandatory")


class _LinkSelectorMaxIdleTime_Type(Integer32):
    """Custom type linkSelectorMaxIdleTime based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_LinkSelectorMaxIdleTime_Type.__name__ = "Integer32"
_LinkSelectorMaxIdleTime_Object = MibTableColumn
linkSelectorMaxIdleTime = _LinkSelectorMaxIdleTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 4),
    _LinkSelectorMaxIdleTime_Type()
)
linkSelectorMaxIdleTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    linkSelectorMaxIdleTime.setStatus("mandatory")


class _LinkSelectorMode_Type(Integer32):
    """Custom type linkSelectorMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("bod", 3),
          ("notApplicable", 1))
    )


_LinkSelectorMode_Type.__name__ = "Integer32"
_LinkSelectorMode_Object = MibTableColumn
linkSelectorMode = _LinkSelectorMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 5),
    _LinkSelectorMode_Type()
)
linkSelectorMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    linkSelectorMode.setStatus("mandatory")


class _LinkSelectorRevert_Type(Integer32):
    """Custom type linkSelectorRevert based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("manual", 3),
          ("notApplicable", 1))
    )


_LinkSelectorRevert_Type.__name__ = "Integer32"
_LinkSelectorRevert_Object = MibTableColumn
linkSelectorRevert = _LinkSelectorRevert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 6),
    _LinkSelectorRevert_Type()
)
linkSelectorRevert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    linkSelectorRevert.setStatus("mandatory")


class _LinkSelectorMinBUSession_Type(Integer32):
    """Custom type linkSelectorMinBUSession based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_LinkSelectorMinBUSession_Type.__name__ = "Integer32"
_LinkSelectorMinBUSession_Object = MibTableColumn
linkSelectorMinBUSession = _LinkSelectorMinBUSession_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 7),
    _LinkSelectorMinBUSession_Type()
)
linkSelectorMinBUSession.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    linkSelectorMinBUSession.setStatus("mandatory")
_LinkSelectorPLinkTable_Object = MibTable
linkSelectorPLinkTable = _LinkSelectorPLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3)
)
if mibBuilder.loadTexts:
    linkSelectorPLinkTable.setStatus("mandatory")
_LinkSelectorPLinkEntry_Object = MibTableRow
linkSelectorPLinkEntry = _LinkSelectorPLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1)
)
linkSelectorPLinkEntry.setIndexNames(
    (0, "DACS-MIB", "pLinkCnfgIdx"),
    (0, "DACS-MIB", "pLinkSltIdx"),
    (0, "DACS-MIB", "pLinkPrtIdx"),
    (0, "DACS-MIB", "pLinkIdx"),
)
if mibBuilder.loadTexts:
    linkSelectorPLinkEntry.setStatus("mandatory")


class _PLinkCnfgIdx_Type(Integer32):
    """Custom type pLinkCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PLinkCnfgIdx_Type.__name__ = "Integer32"
_PLinkCnfgIdx_Object = MibTableColumn
pLinkCnfgIdx = _PLinkCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 1),
    _PLinkCnfgIdx_Type()
)
pLinkCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pLinkCnfgIdx.setStatus("mandatory")


class _PLinkSltIdx_Type(Integer32):
    """Custom type pLinkSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PLinkSltIdx_Type.__name__ = "Integer32"
_PLinkSltIdx_Object = MibTableColumn
pLinkSltIdx = _PLinkSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 2),
    _PLinkSltIdx_Type()
)
pLinkSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pLinkSltIdx.setStatus("mandatory")


class _PLinkPrtIdx_Type(Integer32):
    """Custom type pLinkPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 250),
    )


_PLinkPrtIdx_Type.__name__ = "Integer32"
_PLinkPrtIdx_Object = MibTableColumn
pLinkPrtIdx = _PLinkPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 3),
    _PLinkPrtIdx_Type()
)
pLinkPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pLinkPrtIdx.setStatus("mandatory")


class _PLinkIdx_Type(Integer32):
    """Custom type pLinkIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PLinkIdx_Type.__name__ = "Integer32"
_PLinkIdx_Object = MibTableColumn
pLinkIdx = _PLinkIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 4),
    _PLinkIdx_Type()
)
pLinkIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pLinkIdx.setStatus("mandatory")


class _PLinkSlotNu_Type(Integer32):
    """Custom type pLinkSlotNu based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_PLinkSlotNu_Type.__name__ = "Integer32"
_PLinkSlotNu_Object = MibTableColumn
pLinkSlotNu = _PLinkSlotNu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 5),
    _PLinkSlotNu_Type()
)
pLinkSlotNu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pLinkSlotNu.setStatus("mandatory")


class _PLinkPortNu_Type(Integer32):
    """Custom type pLinkPortNu based on Integer32"""
    defaultValue = 100


_PLinkPortNu_Object = MibTableColumn
pLinkPortNu = _PLinkPortNu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 6),
    _PLinkPortNu_Type()
)
pLinkPortNu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pLinkPortNu.setStatus("mandatory")


class _PLinkPrioNu_Type(Integer32):
    """Custom type pLinkPrioNu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PLinkPrioNu_Type.__name__ = "Integer32"
_PLinkPrioNu_Object = MibTableColumn
pLinkPrioNu = _PLinkPrioNu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 7),
    _PLinkPrioNu_Type()
)
pLinkPrioNu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pLinkPrioNu.setStatus("mandatory")


class _PLinkVRate_Type(Integer32):
    """Custom type pLinkVRate based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              100)
        )
    )
    namedValues = NamedValues(
        *(("noRate", 100),
          ("r10x56eq560Kbps", 19),
          ("r10x64eq640Kbps", 20),
          ("r11x56eq616Kbps", 21),
          ("r11x64eq704Kbps", 22),
          ("r12x56eq672Kbps", 23),
          ("r12x64eq768Kbps", 24),
          ("r13x56eq728Kbps", 25),
          ("r13x64eq832Kbps", 26),
          ("r14x56eq784Kbps", 27),
          ("r14x64eq896Kbps", 28),
          ("r15x56eq840Kbps", 29),
          ("r15x64eq960Kbps", 30),
          ("r16x56eq896Kbps", 31),
          ("r16x64eq1024Kbps", 32),
          ("r17x56eq952Kbps", 33),
          ("r17x64eq1088Kbps", 34),
          ("r18x56eq1008Kbps", 35),
          ("r18x64eq1152Kbps", 36),
          ("r19x56eq1064Kbps", 37),
          ("r19x64eq1216Kbps", 38),
          ("r1x56eq56Kbps", 1),
          ("r1x64eq64Kbps", 2),
          ("r20x56eq1120Kbps", 39),
          ("r20x64eq1280Kbps", 40),
          ("r21x56eq1176Kbps", 41),
          ("r21x64eq1344Kbps", 42),
          ("r22x56eq1232Kbps", 43),
          ("r22x64eq1408Kbps", 44),
          ("r23x56eq1288Kbps", 45),
          ("r23x64eq1472Kbps", 46),
          ("r24x56eq1344Kbps", 47),
          ("r24x64eq1536Kbps", 48),
          ("r25x56eq1400Kbps", 49),
          ("r25x64eq1600Kbps", 50),
          ("r26x56eq1456Kbps", 51),
          ("r26x64eq1664Kbps", 52),
          ("r27x56eq1512Kbps", 53),
          ("r27x64eq1728Kbps", 54),
          ("r28x56eq1568Kbps", 55),
          ("r28x64eq1792Kbps", 56),
          ("r29x56eq1624Kbps", 57),
          ("r29x64eq1856Kbps", 58),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 4),
          ("r30x56eq1680Kbps", 59),
          ("r30x64eq1920Kbps", 60),
          ("r31x56eq1736Kbps", 61),
          ("r31x64eq1984Kbps", 62),
          ("r3x56eq168Kbps", 5),
          ("r3x64eq192Kbps", 6),
          ("r4x56eq224Kbps", 7),
          ("r4x64eq256Kbps", 8),
          ("r5x56eq280Kbps", 9),
          ("r5x64eq320Kbps", 10),
          ("r6x56eq336Kbps", 11),
          ("r6x64eq384Kbps", 12),
          ("r7x56eq392Kbps", 13),
          ("r7x64eq448Kbps", 14),
          ("r8x56eq448Kbps", 15),
          ("r8x64eq512Kbps", 16),
          ("r9x56eq504Kbps", 17),
          ("r9x64eq576Kbps", 18))
    )


_PLinkVRate_Type.__name__ = "Integer32"
_PLinkVRate_Object = MibTableColumn
pLinkVRate = _PLinkVRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 8),
    _PLinkVRate_Type()
)
pLinkVRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pLinkVRate.setStatus("mandatory")
_PrtFrPlusCnfg_ObjectIdentity = ObjectIdentity
prtFrPlusCnfg = _PrtFrPlusCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18)
)
_PrtFrPlusCnfgTable_Object = MibTable
prtFrPlusCnfgTable = _PrtFrPlusCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1)
)
if mibBuilder.loadTexts:
    prtFrPlusCnfgTable.setStatus("mandatory")
_PrtFrPlusCnfgEntry_Object = MibTableRow
prtFrPlusCnfgEntry = _PrtFrPlusCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1)
)
prtFrPlusCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtFrPlusCnfgIdx"),
    (0, "DACS-MIB", "prtFrPlusSltIdx"),
    (0, "DACS-MIB", "prtFrPlusPrtIdx"),
)
if mibBuilder.loadTexts:
    prtFrPlusCnfgEntry.setStatus("mandatory")


class _PrtFrPlusCnfgIdx_Type(Integer32):
    """Custom type prtFrPlusCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtFrPlusCnfgIdx_Type.__name__ = "Integer32"
_PrtFrPlusCnfgIdx_Object = MibTableColumn
prtFrPlusCnfgIdx = _PrtFrPlusCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 1),
    _PrtFrPlusCnfgIdx_Type()
)
prtFrPlusCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrPlusCnfgIdx.setStatus("mandatory")


class _PrtFrPlusSltIdx_Type(Integer32):
    """Custom type prtFrPlusSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtFrPlusSltIdx_Type.__name__ = "Integer32"
_PrtFrPlusSltIdx_Object = MibTableColumn
prtFrPlusSltIdx = _PrtFrPlusSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 2),
    _PrtFrPlusSltIdx_Type()
)
prtFrPlusSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrPlusSltIdx.setStatus("mandatory")
_PrtFrPlusPrtIdx_Type = Integer32
_PrtFrPlusPrtIdx_Object = MibTableColumn
prtFrPlusPrtIdx = _PrtFrPlusPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 3),
    _PrtFrPlusPrtIdx_Type()
)
prtFrPlusPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrPlusPrtIdx.setStatus("mandatory")


class _PrtFrPlusNotSegmentedPriorities_Type(OctetString):
    """Custom type prtFrPlusNotSegmentedPriorities based on OctetString"""
    defaultHexValue = "00"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_PrtFrPlusNotSegmentedPriorities_Type.__name__ = "OctetString"
_PrtFrPlusNotSegmentedPriorities_Object = MibTableColumn
prtFrPlusNotSegmentedPriorities = _PrtFrPlusNotSegmentedPriorities_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 4),
    _PrtFrPlusNotSegmentedPriorities_Type()
)
prtFrPlusNotSegmentedPriorities.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtFrPlusNotSegmentedPriorities.setStatus("mandatory")
_PrtMl4Cnfg_ObjectIdentity = ObjectIdentity
prtMl4Cnfg = _PrtMl4Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19)
)
_PrtMl4CnfgTable_Object = MibTable
prtMl4CnfgTable = _PrtMl4CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1)
)
if mibBuilder.loadTexts:
    prtMl4CnfgTable.setStatus("mandatory")
_PrtMl4CnfgEntry_Object = MibTableRow
prtMl4CnfgEntry = _PrtMl4CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1)
)
prtMl4CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtMl4CnfgIdx"),
    (0, "DACS-MIB", "prtMl4SltIdx"),
    (0, "DACS-MIB", "prtMl4PrtIdx"),
)
if mibBuilder.loadTexts:
    prtMl4CnfgEntry.setStatus("mandatory")


class _PrtMl4CnfgIdx_Type(Integer32):
    """Custom type prtMl4CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtMl4CnfgIdx_Type.__name__ = "Integer32"
_PrtMl4CnfgIdx_Object = MibTableColumn
prtMl4CnfgIdx = _PrtMl4CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 1),
    _PrtMl4CnfgIdx_Type()
)
prtMl4CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMl4CnfgIdx.setStatus("mandatory")


class _PrtMl4SltIdx_Type(Integer32):
    """Custom type prtMl4SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtMl4SltIdx_Type.__name__ = "Integer32"
_PrtMl4SltIdx_Object = MibTableColumn
prtMl4SltIdx = _PrtMl4SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 2),
    _PrtMl4SltIdx_Type()
)
prtMl4SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMl4SltIdx.setStatus("mandatory")


class _PrtMl4PrtIdx_Type(Integer32):
    """Custom type prtMl4PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4))
    )


_PrtMl4PrtIdx_Type.__name__ = "Integer32"
_PrtMl4PrtIdx_Object = MibTableColumn
prtMl4PrtIdx = _PrtMl4PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 3),
    _PrtMl4PrtIdx_Type()
)
prtMl4PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMl4PrtIdx.setStatus("mandatory")


class _PrtMl4SigProfile_Type(Integer32):
    """Custom type prtMl4SigProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("p1", 3),
          ("p2", 4),
          ("p3", 5),
          ("p4", 6),
          ("p5", 7))
    )


_PrtMl4SigProfile_Type.__name__ = "Integer32"
_PrtMl4SigProfile_Object = MibTableColumn
prtMl4SigProfile = _PrtMl4SigProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 4),
    _PrtMl4SigProfile_Type()
)
prtMl4SigProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4SigProfile.setStatus("mandatory")


class _PrtMl4CGA_Type(Integer32):
    """Custom type prtMl4CGA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("full", 3),
          ("none", 1),
          ("trans", 2))
    )


_PrtMl4CGA_Type.__name__ = "Integer32"
_PrtMl4CGA_Object = MibTableColumn
prtMl4CGA = _PrtMl4CGA_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 5),
    _PrtMl4CGA_Type()
)
prtMl4CGA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4CGA.setStatus("mandatory")


class _PrtMl4Oos_Type(Integer32):
    """Custom type prtMl4Oos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 5),
          ("forcedBusy", 4),
          ("forcedIdle", 3),
          ("idleBusy", 6),
          ("notSupported", 2))
    )


_PrtMl4Oos_Type.__name__ = "Integer32"
_PrtMl4Oos_Object = MibTableColumn
prtMl4Oos = _PrtMl4Oos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 6),
    _PrtMl4Oos_Type()
)
prtMl4Oos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4Oos.setStatus("mandatory")


class _PrtMl4VoiceOos_Type(OctetString):
    """Custom type prtMl4VoiceOos based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtMl4VoiceOos_Type.__name__ = "OctetString"
_PrtMl4VoiceOos_Object = MibTableColumn
prtMl4VoiceOos = _PrtMl4VoiceOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 7),
    _PrtMl4VoiceOos_Type()
)
prtMl4VoiceOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4VoiceOos.setStatus("mandatory")


class _PrtMl4DataOos_Type(OctetString):
    """Custom type prtMl4DataOos based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtMl4DataOos_Type.__name__ = "OctetString"
_PrtMl4DataOos_Object = MibTableColumn
prtMl4DataOos = _PrtMl4DataOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 8),
    _PrtMl4DataOos_Type()
)
prtMl4DataOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4DataOos.setStatus("mandatory")


class _PrtMl4Service_Type(Integer32):
    """Custom type prtMl4Service based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("leasedLine", 2),
          ("notApplicable", 1),
          ("v51", 3))
    )


_PrtMl4Service_Type.__name__ = "Integer32"
_PrtMl4Service_Object = MibTableColumn
prtMl4Service = _PrtMl4Service_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 9),
    _PrtMl4Service_Type()
)
prtMl4Service.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4Service.setStatus("mandatory")
_PrtAcmCnfg_ObjectIdentity = ObjectIdentity
prtAcmCnfg = _PrtAcmCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20)
)
_PrtAcmCnfgTable_Object = MibTable
prtAcmCnfgTable = _PrtAcmCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1)
)
if mibBuilder.loadTexts:
    prtAcmCnfgTable.setStatus("mandatory")
_PrtAcmCnfgEntry_Object = MibTableRow
prtAcmCnfgEntry = _PrtAcmCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1)
)
prtAcmCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtAcmCnfgIdx"),
    (0, "DACS-MIB", "prtAcmSltIdx"),
    (0, "DACS-MIB", "prtAcmPrtIdx"),
)
if mibBuilder.loadTexts:
    prtAcmCnfgEntry.setStatus("mandatory")


class _PrtAcmCnfgIdx_Type(Integer32):
    """Custom type prtAcmCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtAcmCnfgIdx_Type.__name__ = "Integer32"
_PrtAcmCnfgIdx_Object = MibTableColumn
prtAcmCnfgIdx = _PrtAcmCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 1),
    _PrtAcmCnfgIdx_Type()
)
prtAcmCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAcmCnfgIdx.setStatus("mandatory")


class _PrtAcmSltIdx_Type(Integer32):
    """Custom type prtAcmSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtAcmSltIdx_Type.__name__ = "Integer32"
_PrtAcmSltIdx_Object = MibTableColumn
prtAcmSltIdx = _PrtAcmSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 2),
    _PrtAcmSltIdx_Type()
)
prtAcmSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAcmSltIdx.setStatus("mandatory")


class _PrtAcmPrtIdx_Type(Integer32):
    """Custom type prtAcmPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtAcmPrtIdx_Type.__name__ = "Integer32"
_PrtAcmPrtIdx_Object = MibTableColumn
prtAcmPrtIdx = _PrtAcmPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 3),
    _PrtAcmPrtIdx_Type()
)
prtAcmPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAcmPrtIdx.setStatus("mandatory")


class _PrtAcmConnect_Type(Integer32):
    """Custom type prtAcmConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtAcmConnect_Type.__name__ = "Integer32"
_PrtAcmConnect_Object = MibTableColumn
prtAcmConnect = _PrtAcmConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 4),
    _PrtAcmConnect_Type()
)
prtAcmConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAcmConnect.setStatus("mandatory")


class _PrtAcmActiveState_Type(Integer32):
    """Custom type prtAcmActiveState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2))
    )


_PrtAcmActiveState_Type.__name__ = "Integer32"
_PrtAcmActiveState_Object = MibTableColumn
prtAcmActiveState = _PrtAcmActiveState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 5),
    _PrtAcmActiveState_Type()
)
prtAcmActiveState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAcmActiveState.setStatus("mandatory")


class _PrtAcmAlrString_Type(DisplayString):
    """Custom type prtAcmAlrString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 35),
    )


_PrtAcmAlrString_Type.__name__ = "DisplayString"
_PrtAcmAlrString_Object = MibTableColumn
prtAcmAlrString = _PrtAcmAlrString_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 6),
    _PrtAcmAlrString_Type()
)
prtAcmAlrString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAcmAlrString.setStatus("mandatory")
_DacsMux_ObjectIdentity = ObjectIdentity
dacsMux = _DacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3)
)
_SystemDacsMux_ObjectIdentity = ObjectIdentity
systemDacsMux = _SystemDacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1)
)
_SysSa_ObjectIdentity = ObjectIdentity
sysSa = _SysSa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1)
)
_SysSaSwchStatus_Type = Integer32
_SysSaSwchStatus_Object = MibScalar
sysSaSwchStatus = _SysSaSwchStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 1),
    _SysSaSwchStatus_Type()
)
sysSaSwchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaSwchStatus.setStatus("mandatory")


class _SysSaSwRevision_Type(DisplayString):
    """Custom type sysSaSwRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSaSwRevision_Type.__name__ = "DisplayString"
_SysSaSwRevision_Object = MibScalar
sysSaSwRevision = _SysSaSwRevision_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 2),
    _SysSaSwRevision_Type()
)
sysSaSwRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaSwRevision.setStatus("mandatory")


class _SysSaHwVersion_Type(DisplayString):
    """Custom type sysSaHwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSaHwVersion_Type.__name__ = "DisplayString"
_SysSaHwVersion_Object = MibScalar
sysSaHwVersion = _SysSaHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 3),
    _SysSaHwVersion_Type()
)
sysSaHwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaHwVersion.setStatus("mandatory")
_SysSaPorts_Type = Integer32
_SysSaPorts_Object = MibScalar
sysSaPorts = _SysSaPorts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 4),
    _SysSaPorts_Type()
)
sysSaPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaPorts.setStatus("mandatory")
_SysSaReadSwch_Type = Integer32
_SysSaReadSwch_Object = MibScalar
sysSaReadSwch = _SysSaReadSwch_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 5),
    _SysSaReadSwch_Type()
)
sysSaReadSwch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSaReadSwch.setStatus("mandatory")
_SysHub_ObjectIdentity = ObjectIdentity
sysHub = _SysHub_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2)
)
_SysChas_ObjectIdentity = ObjectIdentity
sysChas = _SysChas_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1)
)
_ChassTotalNoOfSlt_Type = Integer32
_ChassTotalNoOfSlt_Object = MibScalar
chassTotalNoOfSlt = _ChassTotalNoOfSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 1),
    _ChassTotalNoOfSlt_Type()
)
chassTotalNoOfSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfSlt.setStatus("mandatory")
_ChassTotalNoOfIoSlt_Type = Integer32
_ChassTotalNoOfIoSlt_Object = MibScalar
chassTotalNoOfIoSlt = _ChassTotalNoOfIoSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 2),
    _ChassTotalNoOfIoSlt_Type()
)
chassTotalNoOfIoSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfIoSlt.setStatus("mandatory")
_ChassTotalNoOfPsSlt_Type = Integer32
_ChassTotalNoOfPsSlt_Object = MibScalar
chassTotalNoOfPsSlt = _ChassTotalNoOfPsSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 3),
    _ChassTotalNoOfPsSlt_Type()
)
chassTotalNoOfPsSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfPsSlt.setStatus("mandatory")
_ChassTotalNoOfClSlt_Type = Integer32
_ChassTotalNoOfClSlt_Object = MibScalar
chassTotalNoOfClSlt = _ChassTotalNoOfClSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 4),
    _ChassTotalNoOfClSlt_Type()
)
chassTotalNoOfClSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfClSlt.setStatus("mandatory")
_ChassTotalNoOfMlSlt_Type = Integer32
_ChassTotalNoOfMlSlt_Object = MibScalar
chassTotalNoOfMlSlt = _ChassTotalNoOfMlSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 5),
    _ChassTotalNoOfMlSlt_Type()
)
chassTotalNoOfMlSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfMlSlt.setStatus("mandatory")
_SysDcl_ObjectIdentity = ObjectIdentity
sysDcl = _SysDcl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2)
)
_SysDclTable_Object = MibTable
sysDclTable = _SysDclTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    sysDclTable.setStatus("mandatory")
_SysDclEntry_Object = MibTableRow
sysDclEntry = _SysDclEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1)
)
sysDclEntry.setIndexNames(
    (0, "DACS-MIB", "sysDclCnfgIdx"),
)
if mibBuilder.loadTexts:
    sysDclEntry.setStatus("mandatory")


class _SysDclCnfgIdx_Type(Integer32):
    """Custom type sysDclCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDclCnfgIdx_Type.__name__ = "Integer32"
_SysDclCnfgIdx_Object = MibTableColumn
sysDclCnfgIdx = _SysDclCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 1),
    _SysDclCnfgIdx_Type()
)
sysDclCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDclCnfgIdx.setStatus("mandatory")


class _SysDclRedundancy_Type(Integer32):
    """Custom type sysDclRedundancy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysDclRedundancy_Type.__name__ = "Integer32"
_SysDclRedundancy_Object = MibTableColumn
sysDclRedundancy = _SysDclRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 2),
    _SysDclRedundancy_Type()
)
sysDclRedundancy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclRedundancy.setStatus("mandatory")


class _SysDclActiveCl_Type(Integer32):
    """Custom type sysDclActiveCl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("dclA", 2),
          ("dclB", 3))
    )


_SysDclActiveCl_Type.__name__ = "Integer32"
_SysDclActiveCl_Object = MibTableColumn
sysDclActiveCl = _SysDclActiveCl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 3),
    _SysDclActiveCl_Type()
)
sysDclActiveCl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclActiveCl.setStatus("mandatory")


class _SysDclFlipDelay_Type(Integer32):
    """Custom type sysDclFlipDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("t1min", 1),
          ("t2min", 2),
          ("t3min", 3),
          ("t4min", 4))
    )


_SysDclFlipDelay_Type.__name__ = "Integer32"
_SysDclFlipDelay_Object = MibTableColumn
sysDclFlipDelay = _SysDclFlipDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 4),
    _SysDclFlipDelay_Type()
)
sysDclFlipDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclFlipDelay.setStatus("mandatory")


class _SysDclOnline_Type(Integer32):
    """Custom type sysDclOnline based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dclA", 1),
          ("dclB", 2))
    )


_SysDclOnline_Type.__name__ = "Integer32"
_SysDclOnline_Object = MibScalar
sysDclOnline = _SysDclOnline_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 2),
    _SysDclOnline_Type()
)
sysDclOnline.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDclOnline.setStatus("mandatory")
_SysDclCopyDbTable_Object = MibTable
sysDclCopyDbTable = _SysDclCopyDbTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3)
)
if mibBuilder.loadTexts:
    sysDclCopyDbTable.setStatus("mandatory")
_SysDclCopyDbEntry_Object = MibTableRow
sysDclCopyDbEntry = _SysDclCopyDbEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1)
)
sysDclCopyDbEntry.setIndexNames(
    (0, "DACS-MIB", "sysDclCopyDbIdx"),
)
if mibBuilder.loadTexts:
    sysDclCopyDbEntry.setStatus("mandatory")


class _SysDclCopyDbIdx_Type(Integer32):
    """Custom type sysDclCopyDbIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDclCopyDbIdx_Type.__name__ = "Integer32"
_SysDclCopyDbIdx_Object = MibTableColumn
sysDclCopyDbIdx = _SysDclCopyDbIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1, 1),
    _SysDclCopyDbIdx_Type()
)
sysDclCopyDbIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDclCopyDbIdx.setStatus("mandatory")


class _SysDclCopyDbCmd_Type(Integer32):
    """Custom type sysDclCopyDbCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysDclCopyDbCmd_Type.__name__ = "Integer32"
_SysDclCopyDbCmd_Object = MibTableColumn
sysDclCopyDbCmd = _SysDclCopyDbCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1, 2),
    _SysDclCopyDbCmd_Type()
)
sysDclCopyDbCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclCopyDbCmd.setStatus("mandatory")
_SysStatus_ObjectIdentity = ObjectIdentity
sysStatus = _SysStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3)
)


class _SysSDateFormat_Type(Integer32):
    """Custom type sysSDateFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ddMMYYYY", 1),
          ("mmDDYYYY", 2),
          ("yyyyMMDD", 4))
    )


_SysSDateFormat_Type.__name__ = "Integer32"
_SysSDateFormat_Object = MibScalar
sysSDateFormat = _SysSDateFormat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 1),
    _SysSDateFormat_Type()
)
sysSDateFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSDateFormat.setStatus("mandatory")


class _SysSDateCmd_Type(DisplayString):
    """Custom type sysSDateCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSDateCmd_Type.__name__ = "DisplayString"
_SysSDateCmd_Object = MibScalar
sysSDateCmd = _SysSDateCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 2),
    _SysSDateCmd_Type()
)
sysSDateCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSDateCmd.setStatus("mandatory")


class _SysSTimeCmd_Type(DisplayString):
    """Custom type sysSTimeCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSTimeCmd_Type.__name__ = "DisplayString"
_SysSTimeCmd_Object = MibScalar
sysSTimeCmd = _SysSTimeCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 3),
    _SysSTimeCmd_Type()
)
sysSTimeCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSTimeCmd.setStatus("mandatory")
_SysSActiveCnfg_Type = Integer32
_SysSActiveCnfg_Object = MibScalar
sysSActiveCnfg = _SysSActiveCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 4),
    _SysSActiveCnfg_Type()
)
sysSActiveCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSActiveCnfg.setStatus("mandatory")
_SysSEditCnfg_Type = Integer32
_SysSEditCnfg_Object = MibScalar
sysSEditCnfg = _SysSEditCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 5),
    _SysSEditCnfg_Type()
)
sysSEditCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSEditCnfg.setStatus("mandatory")


class _SysSEditBy_Type(Integer32):
    """Custom type sysSEditBy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lcd", 7),
          ("none", 1),
          ("snmp", 2),
          ("terCon1", 3),
          ("terCon2", 4),
          ("terInbandCon1", 5),
          ("terInbandCon2", 6))
    )


_SysSEditBy_Type.__name__ = "Integer32"
_SysSEditBy_Object = MibScalar
sysSEditBy = _SysSEditBy_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 6),
    _SysSEditBy_Type()
)
sysSEditBy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSEditBy.setStatus("mandatory")


class _SysSClkSrc_Type(Integer32):
    """Custom type sysSClkSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("internal", 3),
          ("master", 1),
          ("ml", 4))
    )


_SysSClkSrc_Type.__name__ = "Integer32"
_SysSClkSrc_Object = MibScalar
sysSClkSrc = _SysSClkSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 7),
    _SysSClkSrc_Type()
)
sysSClkSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSClkSrc.setStatus("mandatory")


class _SysSAlrStatus_Type(Integer32):
    """Custom type sysSAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("major", 3),
          ("minor", 4),
          ("off", 2))
    )


_SysSAlrStatus_Type.__name__ = "Integer32"
_SysSAlrStatus_Object = MibScalar
sysSAlrStatus = _SysSAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 8),
    _SysSAlrStatus_Type()
)
sysSAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrStatus.setStatus("mandatory")


class _SysSAlrStatusAll_Type(Integer32):
    """Custom type sysSAlrStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("major", 3),
          ("minor", 4),
          ("off", 2))
    )


_SysSAlrStatusAll_Type.__name__ = "Integer32"
_SysSAlrStatusAll_Object = MibScalar
sysSAlrStatusAll = _SysSAlrStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 9),
    _SysSAlrStatusAll_Type()
)
sysSAlrStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrStatusAll.setStatus("mandatory")


class _SysSTestStatus_Type(Integer32):
    """Custom type sysSTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSTestStatus_Type.__name__ = "Integer32"
_SysSTestStatus_Object = MibScalar
sysSTestStatus = _SysSTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 10),
    _SysSTestStatus_Type()
)
sysSTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSTestStatus.setStatus("mandatory")


class _SysSSanityCheckStatus_Type(Integer32):
    """Custom type sysSSanityCheckStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("ok", 4),
          ("unknown", 1),
          ("warning", 3))
    )


_SysSSanityCheckStatus_Type.__name__ = "Integer32"
_SysSSanityCheckStatus_Object = MibScalar
sysSSanityCheckStatus = _SysSSanityCheckStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 11),
    _SysSSanityCheckStatus_Type()
)
sysSSanityCheckStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSSanityCheckStatus.setStatus("mandatory")
_SysSNoOfSanityCheckErr_Type = Integer32
_SysSNoOfSanityCheckErr_Object = MibScalar
sysSNoOfSanityCheckErr = _SysSNoOfSanityCheckErr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 12),
    _SysSNoOfSanityCheckErr_Type()
)
sysSNoOfSanityCheckErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSNoOfSanityCheckErr.setStatus("mandatory")
_SysSErrListTable_Object = MibTable
sysSErrListTable = _SysSErrListTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13)
)
if mibBuilder.loadTexts:
    sysSErrListTable.setStatus("mandatory")
_SysSErrListEntry_Object = MibTableRow
sysSErrListEntry = _SysSErrListEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1)
)
sysSErrListEntry.setIndexNames(
    (0, "DACS-MIB", "sysSErrType"),
    (0, "DACS-MIB", "sysSErrIdx"),
)
if mibBuilder.loadTexts:
    sysSErrListEntry.setStatus("mandatory")


class _SysSErrType_Type(Integer32):
    """Custom type sysSErrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("error", 1),
          ("warning", 2))
    )


_SysSErrType_Type.__name__ = "Integer32"
_SysSErrType_Object = MibTableColumn
sysSErrType = _SysSErrType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 1),
    _SysSErrType_Type()
)
sysSErrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSErrType.setStatus("mandatory")
_SysSErrIdx_Type = Integer32
_SysSErrIdx_Object = MibTableColumn
sysSErrIdx = _SysSErrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 2),
    _SysSErrIdx_Type()
)
sysSErrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSErrIdx.setStatus("mandatory")


class _SysSErrDescription_Type(DisplayString):
    """Custom type sysSErrDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSErrDescription_Type.__name__ = "DisplayString"
_SysSErrDescription_Object = MibTableColumn
sysSErrDescription = _SysSErrDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 3),
    _SysSErrDescription_Type()
)
sysSErrDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSErrDescription.setStatus("mandatory")
_SysSMaxNoOfCnfg_Type = Integer32
_SysSMaxNoOfCnfg_Object = MibScalar
sysSMaxNoOfCnfg = _SysSMaxNoOfCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 14),
    _SysSMaxNoOfCnfg_Type()
)
sysSMaxNoOfCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSMaxNoOfCnfg.setStatus("mandatory")
_SysSSelfTestResult_Type = Integer32
_SysSSelfTestResult_Object = MibScalar
sysSSelfTestResult = _SysSSelfTestResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 15),
    _SysSSelfTestResult_Type()
)
sysSSelfTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSSelfTestResult.setStatus("mandatory")


class _SysSRelayState_Type(Integer32):
    """Custom type sysSRelayState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_SysSRelayState_Type.__name__ = "Integer32"
_SysSRelayState_Object = MibScalar
sysSRelayState = _SysSRelayState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 16),
    _SysSRelayState_Type()
)
sysSRelayState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRelayState.setStatus("mandatory")


class _SysSInvertedAlr_Type(Integer32):
    """Custom type sysSInvertedAlr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_SysSInvertedAlr_Type.__name__ = "Integer32"
_SysSInvertedAlr_Object = MibScalar
sysSInvertedAlr = _SysSInvertedAlr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 17),
    _SysSInvertedAlr_Type()
)
sysSInvertedAlr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSInvertedAlr.setStatus("mandatory")
_SysSRdnFlipTable_Object = MibTable
sysSRdnFlipTable = _SysSRdnFlipTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18)
)
if mibBuilder.loadTexts:
    sysSRdnFlipTable.setStatus("mandatory")
_SysSRdnFlipEntry_Object = MibTableRow
sysSRdnFlipEntry = _SysSRdnFlipEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1)
)
sysSRdnFlipEntry.setIndexNames(
    (0, "DACS-MIB", "sysSRdnFlipIdx"),
)
if mibBuilder.loadTexts:
    sysSRdnFlipEntry.setStatus("mandatory")
_SysSRdnFlipIdx_Type = Integer32
_SysSRdnFlipIdx_Object = MibTableColumn
sysSRdnFlipIdx = _SysSRdnFlipIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 1),
    _SysSRdnFlipIdx_Type()
)
sysSRdnFlipIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipIdx.setStatus("mandatory")


class _SysSRdnFlipSlot_Type(Integer32):
    """Custom type sysSRdnFlipSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_SysSRdnFlipSlot_Type.__name__ = "Integer32"
_SysSRdnFlipSlot_Object = MibTableColumn
sysSRdnFlipSlot = _SysSRdnFlipSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 2),
    _SysSRdnFlipSlot_Type()
)
sysSRdnFlipSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipSlot.setStatus("mandatory")
_SysSRdnFlipPort_Type = Integer32
_SysSRdnFlipPort_Object = MibTableColumn
sysSRdnFlipPort = _SysSRdnFlipPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 3),
    _SysSRdnFlipPort_Type()
)
sysSRdnFlipPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipPort.setStatus("mandatory")
_SysSRdnFlipCause_Type = DisplayString
_SysSRdnFlipCause_Object = MibTableColumn
sysSRdnFlipCause = _SysSRdnFlipCause_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 4),
    _SysSRdnFlipCause_Type()
)
sysSRdnFlipCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipCause.setStatus("mandatory")
_SysSRdnFlipDate_Type = DisplayString
_SysSRdnFlipDate_Object = MibTableColumn
sysSRdnFlipDate = _SysSRdnFlipDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 5),
    _SysSRdnFlipDate_Type()
)
sysSRdnFlipDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipDate.setStatus("mandatory")
_SysSRdnFlipTime_Type = DisplayString
_SysSRdnFlipTime_Object = MibTableColumn
sysSRdnFlipTime = _SysSRdnFlipTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 6),
    _SysSRdnFlipTime_Type()
)
sysSRdnFlipTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipTime.setStatus("mandatory")


class _SysSRdnFlipTableClearCmd_Type(Integer32):
    """Custom type sysSRdnFlipTableClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSRdnFlipTableClearCmd_Type.__name__ = "Integer32"
_SysSRdnFlipTableClearCmd_Object = MibScalar
sysSRdnFlipTableClearCmd = _SysSRdnFlipTableClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 19),
    _SysSRdnFlipTableClearCmd_Type()
)
sysSRdnFlipTableClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSRdnFlipTableClearCmd.setStatus("mandatory")
_SysSRdnFlipCmd_Type = ObjectIdentifier
_SysSRdnFlipCmd_Object = MibScalar
sysSRdnFlipCmd = _SysSRdnFlipCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 20),
    _SysSRdnFlipCmd_Type()
)
sysSRdnFlipCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSRdnFlipCmd.setStatus("mandatory")
_SysCurrentAlr_ObjectIdentity = ObjectIdentity
sysCurrentAlr = _SysCurrentAlr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4)
)
_SysSAlrTable_Object = MibTable
sysSAlrTable = _SysSAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1)
)
if mibBuilder.loadTexts:
    sysSAlrTable.setStatus("mandatory")
_SysSAlrEntry_Object = MibTableRow
sysSAlrEntry = _SysSAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1)
)
sysSAlrEntry.setIndexNames(
    (0, "DACS-MIB", "sysSAlrIdx"),
)
if mibBuilder.loadTexts:
    sysSAlrEntry.setStatus("mandatory")
_SysSAlrIdx_Type = Integer32
_SysSAlrIdx_Object = MibTableColumn
sysSAlrIdx = _SysSAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 1),
    _SysSAlrIdx_Type()
)
sysSAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrIdx.setStatus("mandatory")
_SysSAlrCode_Type = Integer32
_SysSAlrCode_Object = MibTableColumn
sysSAlrCode = _SysSAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 2),
    _SysSAlrCode_Type()
)
sysSAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrCode.setStatus("mandatory")


class _SysSAlrState_Type(Integer32):
    """Custom type sysSAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("major", 5),
          ("minor", 4))
    )


_SysSAlrState_Type.__name__ = "Integer32"
_SysSAlrState_Object = MibTableColumn
sysSAlrState = _SysSAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 3),
    _SysSAlrState_Type()
)
sysSAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrState.setStatus("mandatory")


class _SysSAlarmMask_Type(Integer32):
    """Custom type sysSAlarmMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlarmMask_Type.__name__ = "Integer32"
_SysSAlarmMask_Object = MibTableColumn
sysSAlarmMask = _SysSAlarmMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 4),
    _SysSAlarmMask_Type()
)
sysSAlarmMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlarmMask.setStatus("mandatory")


class _SysSAlarmInvert_Type(Integer32):
    """Custom type sysSAlarmInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlarmInvert_Type.__name__ = "Integer32"
_SysSAlarmInvert_Object = MibTableColumn
sysSAlarmInvert = _SysSAlarmInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 5),
    _SysSAlarmInvert_Type()
)
sysSAlarmInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlarmInvert.setStatus("mandatory")


class _SysSAlrClearCmd_Type(Integer32):
    """Custom type sysSAlrClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlrClearCmd_Type.__name__ = "Integer32"
_SysSAlrClearCmd_Object = MibScalar
sysSAlrClearCmd = _SysSAlrClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 2),
    _SysSAlrClearCmd_Type()
)
sysSAlrClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrClearCmd.setStatus("mandatory")


class _SysSAlrClearAllCmd_Type(Integer32):
    """Custom type sysSAlrClearAllCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlrClearAllCmd_Type.__name__ = "Integer32"
_SysSAlrClearAllCmd_Object = MibScalar
sysSAlrClearAllCmd = _SysSAlrClearAllCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 3),
    _SysSAlrClearAllCmd_Type()
)
sysSAlrClearAllCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrClearAllCmd.setStatus("mandatory")


class _SysSAlrMaskAll_Type(Integer32):
    """Custom type sysSAlrMaskAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlrMaskAll_Type.__name__ = "Integer32"
_SysSAlrMaskAll_Object = MibScalar
sysSAlrMaskAll = _SysSAlrMaskAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 4),
    _SysSAlrMaskAll_Type()
)
sysSAlrMaskAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrMaskAll.setStatus("mandatory")


class _SysSAlrMask_Type(OctetString):
    """Custom type sysSAlrMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_SysSAlrMask_Type.__name__ = "OctetString"
_SysSAlrMask_Object = MibScalar
sysSAlrMask = _SysSAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 5),
    _SysSAlrMask_Type()
)
sysSAlrMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrMask.setStatus("mandatory")


class _SysSAlrDataUpdateCmd_Type(Integer32):
    """Custom type sysSAlrDataUpdateCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlrDataUpdateCmd_Type.__name__ = "Integer32"
_SysSAlrDataUpdateCmd_Object = MibScalar
sysSAlrDataUpdateCmd = _SysSAlrDataUpdateCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 6),
    _SysSAlrDataUpdateCmd_Type()
)
sysSAlrDataUpdateCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrDataUpdateCmd.setStatus("mandatory")
_SysBufferAlr_ObjectIdentity = ObjectIdentity
sysBufferAlr = _SysBufferAlr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5)
)
_SysBufferAlrTable_Object = MibTable
sysBufferAlrTable = _SysBufferAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1)
)
if mibBuilder.loadTexts:
    sysBufferAlrTable.setStatus("mandatory")
_SysBufferAlrEntry_Object = MibTableRow
sysBufferAlrEntry = _SysBufferAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1)
)
sysBufferAlrEntry.setIndexNames(
    (0, "DACS-MIB", "sysBufferAlrIdx"),
)
if mibBuilder.loadTexts:
    sysBufferAlrEntry.setStatus("mandatory")
_SysBufferAlrIdx_Type = Integer32
_SysBufferAlrIdx_Object = MibTableColumn
sysBufferAlrIdx = _SysBufferAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 1),
    _SysBufferAlrIdx_Type()
)
sysBufferAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrIdx.setStatus("mandatory")
_SysBufferAlrCode_Type = Integer32
_SysBufferAlrCode_Object = MibTableColumn
sysBufferAlrCode = _SysBufferAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 2),
    _SysBufferAlrCode_Type()
)
sysBufferAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrCode.setStatus("mandatory")


class _SysBufferAlrState_Type(Integer32):
    """Custom type sysBufferAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("major", 5),
          ("minor", 4),
          ("off", 2))
    )


_SysBufferAlrState_Type.__name__ = "Integer32"
_SysBufferAlrState_Object = MibTableColumn
sysBufferAlrState = _SysBufferAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 3),
    _SysBufferAlrState_Type()
)
sysBufferAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrState.setStatus("mandatory")


class _SysBufferAlrSlot_Type(Integer32):
    """Custom type sysBufferAlrSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_SysBufferAlrSlot_Type.__name__ = "Integer32"
_SysBufferAlrSlot_Object = MibTableColumn
sysBufferAlrSlot = _SysBufferAlrSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 4),
    _SysBufferAlrSlot_Type()
)
sysBufferAlrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrSlot.setStatus("mandatory")
_SysBufferAlrPort_Type = Integer32
_SysBufferAlrPort_Object = MibTableColumn
sysBufferAlrPort = _SysBufferAlrPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 5),
    _SysBufferAlrPort_Type()
)
sysBufferAlrPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrPort.setStatus("mandatory")


class _SysBufferAlrDate_Type(DisplayString):
    """Custom type sysBufferAlrDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysBufferAlrDate_Type.__name__ = "DisplayString"
_SysBufferAlrDate_Object = MibTableColumn
sysBufferAlrDate = _SysBufferAlrDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 6),
    _SysBufferAlrDate_Type()
)
sysBufferAlrDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrDate.setStatus("mandatory")


class _SysBufferAlrTime_Type(DisplayString):
    """Custom type sysBufferAlrTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysBufferAlrTime_Type.__name__ = "DisplayString"
_SysBufferAlrTime_Object = MibTableColumn
sysBufferAlrTime = _SysBufferAlrTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 7),
    _SysBufferAlrTime_Type()
)
sysBufferAlrTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrTime.setStatus("mandatory")


class _SysBufferAlrClearCmd_Type(Integer32):
    """Custom type sysBufferAlrClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysBufferAlrClearCmd_Type.__name__ = "Integer32"
_SysBufferAlrClearCmd_Object = MibScalar
sysBufferAlrClearCmd = _SysBufferAlrClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 2),
    _SysBufferAlrClearCmd_Type()
)
sysBufferAlrClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysBufferAlrClearCmd.setStatus("mandatory")
_SysConfig_ObjectIdentity = ObjectIdentity
sysConfig = _SysConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6)
)
_SysCClkSrcTable_Object = MibTable
sysCClkSrcTable = _SysCClkSrcTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1)
)
if mibBuilder.loadTexts:
    sysCClkSrcTable.setStatus("mandatory")
_SysCClkSrcEntry_Object = MibTableRow
sysCClkSrcEntry = _SysCClkSrcEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1)
)
sysCClkSrcEntry.setIndexNames(
    (0, "DACS-MIB", "sysCClkCnfgIdx"),
    (0, "DACS-MIB", "sysCClkSrcIdx"),
)
if mibBuilder.loadTexts:
    sysCClkSrcEntry.setStatus("mandatory")


class _SysCClkCnfgIdx_Type(Integer32):
    """Custom type sysCClkCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysCClkCnfgIdx_Type.__name__ = "Integer32"
_SysCClkCnfgIdx_Object = MibTableColumn
sysCClkCnfgIdx = _SysCClkCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 1),
    _SysCClkCnfgIdx_Type()
)
sysCClkCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCClkCnfgIdx.setStatus("mandatory")


class _SysCClkSrcIdx_Type(Integer32):
    """Custom type sysCClkSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("master", 1))
    )


_SysCClkSrcIdx_Type.__name__ = "Integer32"
_SysCClkSrcIdx_Object = MibTableColumn
sysCClkSrcIdx = _SysCClkSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 2),
    _SysCClkSrcIdx_Type()
)
sysCClkSrcIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCClkSrcIdx.setStatus("mandatory")


class _SysCClkSrcMode_Type(Integer32):
    """Custom type sysCClkSrcMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("internal", 2),
          ("lbt", 5),
          ("none", 1),
          ("notApplicable", 255),
          ("rxClk", 3),
          ("station", 4))
    )


_SysCClkSrcMode_Type.__name__ = "Integer32"
_SysCClkSrcMode_Object = MibTableColumn
sysCClkSrcMode = _SysCClkSrcMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 3),
    _SysCClkSrcMode_Type()
)
sysCClkSrcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkSrcMode.setStatus("mandatory")
_SysCClkSrcPrt_Type = Integer32
_SysCClkSrcPrt_Object = MibTableColumn
sysCClkSrcPrt = _SysCClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 4),
    _SysCClkSrcPrt_Type()
)
sysCClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkSrcPrt.setStatus("mandatory")


class _SysCClkStationFreq_Type(Integer32):
    """Custom type sysCClkStationFreq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("f1544Khz", 2),
          ("f2048Khz", 3),
          ("notApplicable", 1))
    )


_SysCClkStationFreq_Type.__name__ = "Integer32"
_SysCClkStationFreq_Object = MibTableColumn
sysCClkStationFreq = _SysCClkStationFreq_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 5),
    _SysCClkStationFreq_Type()
)
sysCClkStationFreq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkStationFreq.setStatus("mandatory")
_SysCnfgTable_Object = MibTable
sysCnfgTable = _SysCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2)
)
if mibBuilder.loadTexts:
    sysCnfgTable.setStatus("mandatory")
_SysCnfgEntry_Object = MibTableRow
sysCnfgEntry = _SysCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1)
)
sysCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "sysCnfgIdx"),
)
if mibBuilder.loadTexts:
    sysCnfgEntry.setStatus("mandatory")


class _SysCnfgIdx_Type(Integer32):
    """Custom type sysCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysCnfgIdx_Type.__name__ = "Integer32"
_SysCnfgIdx_Object = MibTableColumn
sysCnfgIdx = _SysCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 1),
    _SysCnfgIdx_Type()
)
sysCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCnfgIdx.setStatus("mandatory")


class _SysCMatrixMode_Type(Integer32):
    """Custom type sysCMatrixMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 2),
          ("notApplicable", 1),
          ("unidirectional", 3))
    )


_SysCMatrixMode_Type.__name__ = "Integer32"
_SysCMatrixMode_Object = MibTableColumn
sysCMatrixMode = _SysCMatrixMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 2),
    _SysCMatrixMode_Type()
)
sysCMatrixMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCMatrixMode.setStatus("mandatory")


class _SysCIsdnFormat_Type(Integer32):
    """Custom type sysCIsdnFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("nt", 3),
          ("te", 2))
    )


_SysCIsdnFormat_Type.__name__ = "Integer32"
_SysCIsdnFormat_Object = MibTableColumn
sysCIsdnFormat = _SysCIsdnFormat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 3),
    _SysCIsdnFormat_Type()
)
sysCIsdnFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCIsdnFormat.setStatus("mandatory")


class _SysCRoutingOnEth_Type(Integer32):
    """Custom type sysCRoutingOnEth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip2", 4))
    )


_SysCRoutingOnEth_Type.__name__ = "Integer32"
_SysCRoutingOnEth_Object = MibTableColumn
sysCRoutingOnEth = _SysCRoutingOnEth_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 4),
    _SysCRoutingOnEth_Type()
)
sysCRoutingOnEth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRoutingOnEth.setStatus("mandatory")
_SysCRdnTable_Object = MibTable
sysCRdnTable = _SysCRdnTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3)
)
if mibBuilder.loadTexts:
    sysCRdnTable.setStatus("mandatory")
_SysCRdnEntry_Object = MibTableRow
sysCRdnEntry = _SysCRdnEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1)
)
sysCRdnEntry.setIndexNames(
    (0, "DACS-MIB", "sysCRdnCnfgIdx"),
    (0, "DACS-MIB", "sysCRdnPrimeSlot"),
    (0, "DACS-MIB", "sysCRdnPrimePort"),
)
if mibBuilder.loadTexts:
    sysCRdnEntry.setStatus("mandatory")
_SysCRdnCnfgIdx_Type = Integer32
_SysCRdnCnfgIdx_Object = MibTableColumn
sysCRdnCnfgIdx = _SysCRdnCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 1),
    _SysCRdnCnfgIdx_Type()
)
sysCRdnCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCRdnCnfgIdx.setStatus("mandatory")


class _SysCRdnPrimeSlot_Type(Integer32):
    """Custom type sysCRdnPrimeSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_SysCRdnPrimeSlot_Type.__name__ = "Integer32"
_SysCRdnPrimeSlot_Object = MibTableColumn
sysCRdnPrimeSlot = _SysCRdnPrimeSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 2),
    _SysCRdnPrimeSlot_Type()
)
sysCRdnPrimeSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCRdnPrimeSlot.setStatus("mandatory")
_SysCRdnPrimePort_Type = Integer32
_SysCRdnPrimePort_Object = MibTableColumn
sysCRdnPrimePort = _SysCRdnPrimePort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 3),
    _SysCRdnPrimePort_Type()
)
sysCRdnPrimePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCRdnPrimePort.setStatus("mandatory")


class _SysCRdnSecSlot_Type(Integer32):
    """Custom type sysCRdnSecSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_SysCRdnSecSlot_Type.__name__ = "Integer32"
_SysCRdnSecSlot_Object = MibTableColumn
sysCRdnSecSlot = _SysCRdnSecSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 4),
    _SysCRdnSecSlot_Type()
)
sysCRdnSecSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRdnSecSlot.setStatus("mandatory")
_SysCRdnSecPort_Type = Integer32
_SysCRdnSecPort_Object = MibTableColumn
sysCRdnSecPort = _SysCRdnSecPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 5),
    _SysCRdnSecPort_Type()
)
sysCRdnSecPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRdnSecPort.setStatus("mandatory")


class _SysCRdnMode_Type(Integer32):
    """Custom type sysCRdnMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("backup", 5),
          ("dualCableAIS", 2),
          ("dualCableParallelTx", 4),
          ("singleSlotProtection", 6),
          ("yCable", 3))
    )


_SysCRdnMode_Type.__name__ = "Integer32"
_SysCRdnMode_Object = MibTableColumn
sysCRdnMode = _SysCRdnMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 6),
    _SysCRdnMode_Type()
)
sysCRdnMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRdnMode.setStatus("mandatory")


class _SysCRdnRecMode_Type(Integer32):
    """Custom type sysCRdnRecMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("manual", 3))
    )


_SysCRdnRecMode_Type.__name__ = "Integer32"
_SysCRdnRecMode_Object = MibTableColumn
sysCRdnRecMode = _SysCRdnRecMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 7),
    _SysCRdnRecMode_Type()
)
sysCRdnRecMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRdnRecMode.setStatus("mandatory")


class _SysCRdnRecTime_Type(Integer32):
    """Custom type sysCRdnRecTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_SysCRdnRecTime_Type.__name__ = "Integer32"
_SysCRdnRecTime_Object = MibTableColumn
sysCRdnRecTime = _SysCRdnRecTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 8),
    _SysCRdnRecTime_Type()
)
sysCRdnRecTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRdnRecTime.setStatus("mandatory")


class _SysCRdnHwSwFlip_Type(Integer32):
    """Custom type sysCRdnHwSwFlip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hw", 2),
          ("notApplicable", 1),
          ("sw", 3))
    )


_SysCRdnHwSwFlip_Type.__name__ = "Integer32"
_SysCRdnHwSwFlip_Object = MibTableColumn
sysCRdnHwSwFlip = _SysCRdnHwSwFlip_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 9),
    _SysCRdnHwSwFlip_Type()
)
sysCRdnHwSwFlip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRdnHwSwFlip.setStatus("mandatory")


class _SysCRdnRowStatus_Type(Integer32):
    """Custom type sysCRdnRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 6))
    )


_SysCRdnRowStatus_Type.__name__ = "Integer32"
_SysCRdnRowStatus_Object = MibTableColumn
sysCRdnRowStatus = _SysCRdnRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 10),
    _SysCRdnRowStatus_Type()
)
sysCRdnRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRdnRowStatus.setStatus("mandatory")


class _SysCRdnOnline_Type(Integer32):
    """Custom type sysCRdnOnline based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("primary", 2),
          ("secondary", 3))
    )


_SysCRdnOnline_Type.__name__ = "Integer32"
_SysCRdnOnline_Object = MibTableColumn
sysCRdnOnline = _SysCRdnOnline_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 11),
    _SysCRdnOnline_Type()
)
sysCRdnOnline.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCRdnOnline.setStatus("mandatory")
_SysDbase_ObjectIdentity = ObjectIdentity
sysDbase = _SysDbase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7)
)


class _SysDbaseSanityCheckCmd_Type(Integer32):
    """Custom type sysDbaseSanityCheckCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysDbaseSanityCheckCmd_Type.__name__ = "Integer32"
_SysDbaseSanityCheckCmd_Object = MibScalar
sysDbaseSanityCheckCmd = _SysDbaseSanityCheckCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 1),
    _SysDbaseSanityCheckCmd_Type()
)
sysDbaseSanityCheckCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseSanityCheckCmd.setStatus("mandatory")


class _SysDbaseDownloadCnfgIdxCmd_Type(Integer32):
    """Custom type sysDbaseDownloadCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDbaseDownloadCnfgIdxCmd_Type.__name__ = "Integer32"
_SysDbaseDownloadCnfgIdxCmd_Object = MibScalar
sysDbaseDownloadCnfgIdxCmd = _SysDbaseDownloadCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 2),
    _SysDbaseDownloadCnfgIdxCmd_Type()
)
sysDbaseDownloadCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseDownloadCnfgIdxCmd.setStatus("mandatory")


class _SysDbaseUploadCnfgIdxCmd_Type(Integer32):
    """Custom type sysDbaseUploadCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDbaseUploadCnfgIdxCmd_Type.__name__ = "Integer32"
_SysDbaseUploadCnfgIdxCmd_Object = MibScalar
sysDbaseUploadCnfgIdxCmd = _SysDbaseUploadCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 3),
    _SysDbaseUploadCnfgIdxCmd_Type()
)
sysDbaseUploadCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseUploadCnfgIdxCmd.setStatus("mandatory")
_SysDbaseFlipTable_Object = MibTable
sysDbaseFlipTable = _SysDbaseFlipTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4)
)
if mibBuilder.loadTexts:
    sysDbaseFlipTable.setStatus("mandatory")
_SysDbaseFlipEntry_Object = MibTableRow
sysDbaseFlipEntry = _SysDbaseFlipEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1)
)
sysDbaseFlipEntry.setIndexNames(
    (0, "DACS-MIB", "sysDbaseFlipIdx"),
)
if mibBuilder.loadTexts:
    sysDbaseFlipEntry.setStatus("mandatory")


class _SysDbaseFlipIdx_Type(Integer32):
    """Custom type sysDbaseFlipIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDbaseFlipIdx_Type.__name__ = "Integer32"
_SysDbaseFlipIdx_Object = MibTableColumn
sysDbaseFlipIdx = _SysDbaseFlipIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 1),
    _SysDbaseFlipIdx_Type()
)
sysDbaseFlipIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDbaseFlipIdx.setStatus("mandatory")


class _SysDbaseFlipTime_Type(DisplayString):
    """Custom type sysDbaseFlipTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysDbaseFlipTime_Type.__name__ = "DisplayString"
_SysDbaseFlipTime_Object = MibTableColumn
sysDbaseFlipTime = _SysDbaseFlipTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 2),
    _SysDbaseFlipTime_Type()
)
sysDbaseFlipTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseFlipTime.setStatus("mandatory")


class _SysDbaseFlipActivation_Type(Integer32):
    """Custom type sysDbaseFlipActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_SysDbaseFlipActivation_Type.__name__ = "Integer32"
_SysDbaseFlipActivation_Object = MibTableColumn
sysDbaseFlipActivation = _SysDbaseFlipActivation_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 3),
    _SysDbaseFlipActivation_Type()
)
sysDbaseFlipActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseFlipActivation.setStatus("mandatory")
_MdlDacsMux_ObjectIdentity = ObjectIdentity
mdlDacsMux = _MdlDacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2)
)
_MdlGen_ObjectIdentity = ObjectIdentity
mdlGen = _MdlGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1)
)
_MdlSTable_Object = MibTable
mdlSTable = _MdlSTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1)
)
if mibBuilder.loadTexts:
    mdlSTable.setStatus("mandatory")
_MdlSEntry_Object = MibTableRow
mdlSEntry = _MdlSEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1)
)
mdlSEntry.setIndexNames(
    (0, "DACS-MIB", "mdlSSltIdx"),
)
if mibBuilder.loadTexts:
    mdlSEntry.setStatus("mandatory")


class _MdlSSltIdx_Type(Integer32):
    """Custom type mdlSSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("psA", 1),
          ("psB", 2))
    )


_MdlSSltIdx_Type.__name__ = "Integer32"
_MdlSSltIdx_Object = MibTableColumn
mdlSSltIdx = _MdlSSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 1),
    _MdlSSltIdx_Type()
)
mdlSSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSSltIdx.setStatus("mandatory")


class _MdlSCardType_Type(Integer32):
    """Custom type mdlSCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11,
              20,
              21,
              22,
              23,
              24,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              40,
              41,
              42,
              43,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              59,
              60,
              61,
              70,
              71,
              72,
              80,
              81,
              82,
              90,
              91,
              92,
              100,
              110,
              111,
              112,
              113,
              114,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              210,
              211,
              212,
              213)
        )
    )
    namedValues = NamedValues(
        *(("dCl", 20),
          ("dE1DSU", 32),
          ("dE1F", 37),
          ("dE1Hdsl", 40),
          ("dE1HdslS", 42),
          ("dE1LTU", 33),
          ("dE1aDSU", 34),
          ("dE1aLTU", 35),
          ("dHS2", 100),
          ("dT1CSU", 31),
          ("dT1DSU", 30),
          ("dT1F", 36),
          ("dT1Hdsl", 41),
          ("dT1HdslS", 43),
          ("dcl2", 22),
          ("dcl2Eth", 23),
          ("de3", 212),
          ("de3f", 213),
          ("dim10BaseT", 206),
          ("dimE1", 207),
          ("dimHssi", 204),
          ("dimRS422", 202),
          ("dimRS530", 203),
          ("dimV35", 201),
          ("dimX21", 205),
          ("dt3", 210),
          ("dt3f", 211),
          ("empty", 2),
          ("kCl", 21),
          ("kClEth", 24),
          ("kHS1", 110),
          ("kHS2", 111),
          ("kHS703", 114),
          ("kHSU1", 112),
          ("kHSU2", 113),
          ("kLS1", 70),
          ("kLS1New", 71),
          ("kLS2", 72),
          ("kMBE", 81),
          ("kMBENew", 82),
          ("kML1", 50),
          ("kML10", 59),
          ("kML10New", 61),
          ("kML2", 51),
          ("kML3", 52),
          ("kML4", 53),
          ("kML5", 54),
          ("kML6", 55),
          ("kML7", 56),
          ("kML8", 57),
          ("kMLF", 60),
          ("kTRE", 80),
          ("kVC1EM", 130),
          ("kVC1FXO", 131),
          ("kVC1FXS", 132),
          ("kVC1MEM", 133),
          ("kVC1MFXO", 134),
          ("kVC1MFXS", 135),
          ("kVC1MFXSW", 136),
          ("kVC2EM", 137),
          ("kVC2FXO", 138),
          ("kVC2FXS", 139),
          ("kVC2s1EM", 140),
          ("kVC2s1FXO", 141),
          ("kVC2s1FXS", 142),
          ("kVC3EM", 143),
          ("kVC3FXO", 144),
          ("kVC3FXS", 145),
          ("kVC3S0", 146),
          ("kVF1EM", 170),
          ("kVF1FXO", 171),
          ("kVF1FXS", 172),
          ("kVF3EM", 173),
          ("kVF3FXO", 174),
          ("kVF3FXS", 175),
          ("kVF4EM", 176),
          ("kVF4FXO", 177),
          ("kVF4FXO3", 189),
          ("kVF4FXS", 178),
          ("kVF4FXS3", 190),
          ("kVF4FXSW", 179),
          ("kVF4NS0", 191),
          ("kVF4S0", 180),
          ("kVF5E1PbxSlave", 182),
          ("kVF5E1PbxSlaveNew", 186),
          ("kVF5PbxE1", 181),
          ("kVF5PbxE1New", 185),
          ("kVF5PbxT1", 183),
          ("kVF5PbxT1New", 187),
          ("kVF5T1PbxSlave", 184),
          ("kVF5T1PbxSlaveNew", 188),
          ("kVF6E1s16", 192),
          ("kVF6E1s31", 193),
          ("kVF6T1s12", 194),
          ("kVF6T1s24", 195),
          ("kVF8EM", 196),
          ("kVF8FXO", 197),
          ("kVF8FXS", 198),
          ("kai", 90),
          ("kdi", 91),
          ("kdiCH", 92),
          ("psAC", 10),
          ("psDC", 11),
          ("unknown", 1))
    )


_MdlSCardType_Type.__name__ = "Integer32"
_MdlSCardType_Object = MibTableColumn
mdlSCardType = _MdlSCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 2),
    _MdlSCardType_Type()
)
mdlSCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSCardType.setStatus("mandatory")


class _MdlSHwVer_Type(DisplayString):
    """Custom type mdlSHwVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSHwVer_Type.__name__ = "DisplayString"
_MdlSHwVer_Object = MibTableColumn
mdlSHwVer = _MdlSHwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 3),
    _MdlSHwVer_Type()
)
mdlSHwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSHwVer.setStatus("mandatory")


class _MdlSSwVer_Type(DisplayString):
    """Custom type mdlSSwVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSSwVer_Type.__name__ = "DisplayString"
_MdlSSwVer_Object = MibTableColumn
mdlSSwVer = _MdlSSwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 4),
    _MdlSSwVer_Type()
)
mdlSSwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSSwVer.setStatus("mandatory")


class _MdlSAlarmStatus_Type(Integer32):
    """Custom type mdlSAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("major", 3),
          ("minor", 4),
          ("off", 2))
    )


_MdlSAlarmStatus_Type.__name__ = "Integer32"
_MdlSAlarmStatus_Object = MibTableColumn
mdlSAlarmStatus = _MdlSAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 5),
    _MdlSAlarmStatus_Type()
)
mdlSAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlarmStatus.setStatus("mandatory")


class _MdlSAlarmStatusAll_Type(Integer32):
    """Custom type mdlSAlarmStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("major", 3),
          ("minor", 4),
          ("off", 2))
    )


_MdlSAlarmStatusAll_Type.__name__ = "Integer32"
_MdlSAlarmStatusAll_Object = MibTableColumn
mdlSAlarmStatusAll = _MdlSAlarmStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 6),
    _MdlSAlarmStatusAll_Type()
)
mdlSAlarmStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlarmStatusAll.setStatus("mandatory")


class _MdlSTestStatus_Type(Integer32):
    """Custom type mdlSTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSTestStatus_Type.__name__ = "Integer32"
_MdlSTestStatus_Object = MibTableColumn
mdlSTestStatus = _MdlSTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 7),
    _MdlSTestStatus_Type()
)
mdlSTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSTestStatus.setStatus("mandatory")


class _MdlSHwStatus_Type(Integer32):
    """Custom type mdlSHwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("ok", 3))
    )


_MdlSHwStatus_Type.__name__ = "Integer32"
_MdlSHwStatus_Object = MibTableColumn
mdlSHwStatus = _MdlSHwStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 8),
    _MdlSHwStatus_Type()
)
mdlSHwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSHwStatus.setStatus("mandatory")


class _MdlSActivity_Type(Integer32):
    """Custom type mdlSActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("offline", 2),
          ("online", 3))
    )


_MdlSActivity_Type.__name__ = "Integer32"
_MdlSActivity_Object = MibTableColumn
mdlSActivity = _MdlSActivity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 9),
    _MdlSActivity_Type()
)
mdlSActivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSActivity.setStatus("mandatory")


class _MdlSAlrClearCmd_Type(Integer32):
    """Custom type mdlSAlrClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrClearCmd_Type.__name__ = "Integer32"
_MdlSAlrClearCmd_Object = MibTableColumn
mdlSAlrClearCmd = _MdlSAlrClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 10),
    _MdlSAlrClearCmd_Type()
)
mdlSAlrClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSAlrClearCmd.setStatus("mandatory")


class _MdlSAlrClearAllCmd_Type(Integer32):
    """Custom type mdlSAlrClearAllCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrClearAllCmd_Type.__name__ = "Integer32"
_MdlSAlrClearAllCmd_Object = MibTableColumn
mdlSAlrClearAllCmd = _MdlSAlrClearAllCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 11),
    _MdlSAlrClearAllCmd_Type()
)
mdlSAlrClearAllCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSAlrClearAllCmd.setStatus("mandatory")


class _MdlSAlrMaskAll_Type(Integer32):
    """Custom type mdlSAlrMaskAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrMaskAll_Type.__name__ = "Integer32"
_MdlSAlrMaskAll_Object = MibTableColumn
mdlSAlrMaskAll = _MdlSAlrMaskAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 12),
    _MdlSAlrMaskAll_Type()
)
mdlSAlrMaskAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSAlrMaskAll.setStatus("mandatory")
_MdlSCmd_Type = Integer32
_MdlSCmd_Object = MibTableColumn
mdlSCmd = _MdlSCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 13),
    _MdlSCmd_Type()
)
mdlSCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSCmd.setStatus("mandatory")
_MdlCTable_Object = MibTable
mdlCTable = _MdlCTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2)
)
if mibBuilder.loadTexts:
    mdlCTable.setStatus("mandatory")
_MdlCEntry_Object = MibTableRow
mdlCEntry = _MdlCEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1)
)
mdlCEntry.setIndexNames(
    (0, "DACS-MIB", "mdlCConfigIdx"),
    (0, "DACS-MIB", "mdlCSlotIdx"),
)
if mibBuilder.loadTexts:
    mdlCEntry.setStatus("mandatory")


class _MdlCConfigIdx_Type(Integer32):
    """Custom type mdlCConfigIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_MdlCConfigIdx_Type.__name__ = "Integer32"
_MdlCConfigIdx_Object = MibTableColumn
mdlCConfigIdx = _MdlCConfigIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 1),
    _MdlCConfigIdx_Type()
)
mdlCConfigIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCConfigIdx.setStatus("mandatory")


class _MdlCSlotIdx_Type(Integer32):
    """Custom type mdlCSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("psA", 1),
          ("psB", 2))
    )


_MdlCSlotIdx_Type.__name__ = "Integer32"
_MdlCSlotIdx_Object = MibTableColumn
mdlCSlotIdx = _MdlCSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 2),
    _MdlCSlotIdx_Type()
)
mdlCSlotIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCSlotIdx.setStatus("mandatory")


class _MdlCProgCardType_Type(Integer32):
    """Custom type mdlCProgCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11,
              20,
              21,
              22,
              23,
              24,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              40,
              41,
              42,
              43,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              59,
              60,
              61,
              70,
              71,
              72,
              80,
              81,
              82,
              90,
              91,
              92,
              100,
              110,
              111,
              112,
              113,
              114,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              210,
              211,
              212,
              213)
        )
    )
    namedValues = NamedValues(
        *(("dCl", 20),
          ("dE1DSU", 32),
          ("dE1F", 37),
          ("dE1Hdsl", 40),
          ("dE1HdslS", 42),
          ("dE1LTU", 33),
          ("dE1aDSU", 34),
          ("dE1aLTU", 35),
          ("dHS2", 100),
          ("dT1CSU", 31),
          ("dT1DSU", 30),
          ("dT1F", 36),
          ("dT1Hdsl", 41),
          ("dT1HdslS", 43),
          ("dcl2", 22),
          ("dcl2Eth", 23),
          ("de3", 212),
          ("de3f", 213),
          ("dim10BaseT", 206),
          ("dimE1", 207),
          ("dimHssi", 204),
          ("dimRS422", 202),
          ("dimRS530", 203),
          ("dimV35", 201),
          ("dimX21", 205),
          ("dt3", 210),
          ("dt3f", 211),
          ("empty", 2),
          ("kCl", 21),
          ("kClEth", 24),
          ("kHS1", 110),
          ("kHS2", 111),
          ("kHS703", 114),
          ("kHSU1", 112),
          ("kHSU2", 113),
          ("kLS1", 70),
          ("kLS1New", 71),
          ("kLS2", 72),
          ("kMBE", 81),
          ("kMBENew", 82),
          ("kML1", 50),
          ("kML10", 59),
          ("kML10New", 61),
          ("kML2", 51),
          ("kML3", 52),
          ("kML4", 53),
          ("kML5", 54),
          ("kML6", 55),
          ("kML7", 56),
          ("kML8", 57),
          ("kMLF", 60),
          ("kTRE", 80),
          ("kVC1EM", 130),
          ("kVC1FXO", 131),
          ("kVC1FXS", 132),
          ("kVC1MEM", 133),
          ("kVC1MFXO", 134),
          ("kVC1MFXS", 135),
          ("kVC1MFXSW", 136),
          ("kVC2EM", 137),
          ("kVC2FXO", 138),
          ("kVC2FXS", 139),
          ("kVC2s1EM", 140),
          ("kVC2s1FXO", 141),
          ("kVC2s1FXS", 142),
          ("kVC3EM", 143),
          ("kVC3FXO", 144),
          ("kVC3FXS", 145),
          ("kVC3S0", 146),
          ("kVF1EM", 170),
          ("kVF1FXO", 171),
          ("kVF1FXS", 172),
          ("kVF3EM", 173),
          ("kVF3FXO", 174),
          ("kVF3FXS", 175),
          ("kVF4EM", 176),
          ("kVF4FXO", 177),
          ("kVF4FXO3", 189),
          ("kVF4FXS", 178),
          ("kVF4FXS3", 190),
          ("kVF4FXSW", 179),
          ("kVF4NS0", 191),
          ("kVF4S0", 180),
          ("kVF5E1PbxSlave", 182),
          ("kVF5E1PbxSlaveNew", 186),
          ("kVF5PbxE1", 181),
          ("kVF5PbxE1New", 185),
          ("kVF5PbxT1", 183),
          ("kVF5PbxT1New", 187),
          ("kVF5T1PbxSlave", 184),
          ("kVF5T1PbxSlaveNew", 188),
          ("kVF6E1s16", 192),
          ("kVF6E1s31", 193),
          ("kVF6T1s12", 194),
          ("kVF6T1s24", 195),
          ("kVF8EM", 196),
          ("kVF8FXO", 197),
          ("kVF8FXS", 198),
          ("kai", 90),
          ("kdi", 91),
          ("kdiCH", 92),
          ("psAC", 10),
          ("psDC", 11),
          ("unknown", 1))
    )


_MdlCProgCardType_Type.__name__ = "Integer32"
_MdlCProgCardType_Object = MibTableColumn
mdlCProgCardType = _MdlCProgCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 3),
    _MdlCProgCardType_Type()
)
mdlCProgCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCProgCardType.setStatus("mandatory")
_MdlCNoOfExtPrt_Type = Integer32
_MdlCNoOfExtPrt_Object = MibTableColumn
mdlCNoOfExtPrt = _MdlCNoOfExtPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 4),
    _MdlCNoOfExtPrt_Type()
)
mdlCNoOfExtPrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCNoOfExtPrt.setStatus("mandatory")
_MdlCNoOfIntPrt_Type = Integer32
_MdlCNoOfIntPrt_Object = MibTableColumn
mdlCNoOfIntPrt = _MdlCNoOfIntPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 5),
    _MdlCNoOfIntPrt_Type()
)
mdlCNoOfIntPrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCNoOfIntPrt.setStatus("mandatory")
_MdlAlr_ObjectIdentity = ObjectIdentity
mdlAlr = _MdlAlr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3)
)
_MdlAlrTable_Object = MibTable
mdlAlrTable = _MdlAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1)
)
if mibBuilder.loadTexts:
    mdlAlrTable.setStatus("mandatory")
_MdlAlrEntry_Object = MibTableRow
mdlAlrEntry = _MdlAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1)
)
mdlAlrEntry.setIndexNames(
    (0, "DACS-MIB", "mdlAlrSltIdx"),
    (0, "DACS-MIB", "mdlAlrIdx"),
)
if mibBuilder.loadTexts:
    mdlAlrEntry.setStatus("mandatory")
_MdlAlrIdx_Type = Integer32
_MdlAlrIdx_Object = MibTableColumn
mdlAlrIdx = _MdlAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 1),
    _MdlAlrIdx_Type()
)
mdlAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrIdx.setStatus("mandatory")


class _MdlAlrSltIdx_Type(Integer32):
    """Custom type mdlAlrSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("psA", 1),
          ("psB", 2))
    )


_MdlAlrSltIdx_Type.__name__ = "Integer32"
_MdlAlrSltIdx_Object = MibTableColumn
mdlAlrSltIdx = _MdlAlrSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 2),
    _MdlAlrSltIdx_Type()
)
mdlAlrSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrSltIdx.setStatus("mandatory")
_MdlAlrCode_Type = Integer32
_MdlAlrCode_Object = MibTableColumn
mdlAlrCode = _MdlAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 3),
    _MdlAlrCode_Type()
)
mdlAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrCode.setStatus("mandatory")


class _MdlAlrState_Type(Integer32):
    """Custom type mdlAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("major", 5),
          ("minor", 4))
    )


_MdlAlrState_Type.__name__ = "Integer32"
_MdlAlrState_Object = MibTableColumn
mdlAlrState = _MdlAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 4),
    _MdlAlrState_Type()
)
mdlAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrState.setStatus("mandatory")


class _MdlAlarmMask_Type(Integer32):
    """Custom type mdlAlarmMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlAlarmMask_Type.__name__ = "Integer32"
_MdlAlarmMask_Object = MibTableColumn
mdlAlarmMask = _MdlAlarmMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 5),
    _MdlAlarmMask_Type()
)
mdlAlarmMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmMask.setStatus("mandatory")


class _MdlAlarmInvert_Type(Integer32):
    """Custom type mdlAlarmInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlAlarmInvert_Type.__name__ = "Integer32"
_MdlAlarmInvert_Object = MibTableColumn
mdlAlarmInvert = _MdlAlarmInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 6),
    _MdlAlarmInvert_Type()
)
mdlAlarmInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmInvert.setStatus("mandatory")
_MdlAlrMaskTable_Object = MibTable
mdlAlrMaskTable = _MdlAlrMaskTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2)
)
if mibBuilder.loadTexts:
    mdlAlrMaskTable.setStatus("mandatory")
_MdlAlrMaskEntry_Object = MibTableRow
mdlAlrMaskEntry = _MdlAlrMaskEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1)
)
mdlAlrMaskEntry.setIndexNames(
    (0, "DACS-MIB", "mdlAlrMaskSltIdx"),
)
if mibBuilder.loadTexts:
    mdlAlrMaskEntry.setStatus("mandatory")


class _MdlAlrMaskSltIdx_Type(Integer32):
    """Custom type mdlAlrMaskSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("psA", 1),
          ("psB", 2))
    )


_MdlAlrMaskSltIdx_Type.__name__ = "Integer32"
_MdlAlrMaskSltIdx_Object = MibTableColumn
mdlAlrMaskSltIdx = _MdlAlrMaskSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1, 1),
    _MdlAlrMaskSltIdx_Type()
)
mdlAlrMaskSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrMaskSltIdx.setStatus("mandatory")


class _MdlAlrMask_Type(OctetString):
    """Custom type mdlAlrMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 10),
    )


_MdlAlrMask_Type.__name__ = "OctetString"
_MdlAlrMask_Object = MibTableColumn
mdlAlrMask = _MdlAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1, 2),
    _MdlAlrMask_Type()
)
mdlAlrMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlAlrMask.setStatus("mandatory")
_MdlCl_ObjectIdentity = ObjectIdentity
mdlCl = _MdlCl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2)
)
_MdlClTable_Object = MibTable
mdlClTable = _MdlClTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mdlClTable.setStatus("mandatory")
_MdlClEntry_Object = MibTableRow
mdlClEntry = _MdlClEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1)
)
mdlClEntry.setIndexNames(
    (0, "DACS-MIB", "mdlClIdx"),
)
if mibBuilder.loadTexts:
    mdlClEntry.setStatus("mandatory")


class _MdlClIdx_Type(Integer32):
    """Custom type mdlClIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4))
    )


_MdlClIdx_Type.__name__ = "Integer32"
_MdlClIdx_Object = MibTableColumn
mdlClIdx = _MdlClIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 1),
    _MdlClIdx_Type()
)
mdlClIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClIdx.setStatus("mandatory")
_MdlClSwchStatus_Type = Integer32
_MdlClSwchStatus_Object = MibTableColumn
mdlClSwchStatus = _MdlClSwchStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 2),
    _MdlClSwchStatus_Type()
)
mdlClSwchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClSwchStatus.setStatus("mandatory")


class _MdlClLastFlipDate_Type(DisplayString):
    """Custom type mdlClLastFlipDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlClLastFlipDate_Type.__name__ = "DisplayString"
_MdlClLastFlipDate_Object = MibTableColumn
mdlClLastFlipDate = _MdlClLastFlipDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 3),
    _MdlClLastFlipDate_Type()
)
mdlClLastFlipDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClLastFlipDate.setStatus("mandatory")


class _MdlClLastFlipTime_Type(DisplayString):
    """Custom type mdlClLastFlipTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlClLastFlipTime_Type.__name__ = "DisplayString"
_MdlClLastFlipTime_Object = MibTableColumn
mdlClLastFlipTime = _MdlClLastFlipTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 4),
    _MdlClLastFlipTime_Type()
)
mdlClLastFlipTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClLastFlipTime.setStatus("mandatory")


class _MdlClLastFlipCause_Type(DisplayString):
    """Custom type mdlClLastFlipCause based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlClLastFlipCause_Type.__name__ = "DisplayString"
_MdlClLastFlipCause_Object = MibTableColumn
mdlClLastFlipCause = _MdlClLastFlipCause_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 5),
    _MdlClLastFlipCause_Type()
)
mdlClLastFlipCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClLastFlipCause.setStatus("mandatory")
_MdlPs_ObjectIdentity = ObjectIdentity
mdlPs = _MdlPs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3)
)
_MdlPsTable_Object = MibTable
mdlPsTable = _MdlPsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1)
)
if mibBuilder.loadTexts:
    mdlPsTable.setStatus("mandatory")
_MdlPsEntry_Object = MibTableRow
mdlPsEntry = _MdlPsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1)
)
mdlPsEntry.setIndexNames(
    (0, "DACS-MIB", "mdlPsIdx"),
)
if mibBuilder.loadTexts:
    mdlPsEntry.setStatus("mandatory")


class _MdlPsIdx_Type(Integer32):
    """Custom type mdlPsIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("psA", 1),
          ("psB", 2))
    )


_MdlPsIdx_Type.__name__ = "Integer32"
_MdlPsIdx_Object = MibTableColumn
mdlPsIdx = _MdlPsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 1),
    _MdlPsIdx_Type()
)
mdlPsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPsIdx.setStatus("mandatory")


class _MdlPsStatus_Type(Integer32):
    """Custom type mdlPsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("notActive", 1))
    )


_MdlPsStatus_Type.__name__ = "Integer32"
_MdlPsStatus_Object = MibTableColumn
mdlPsStatus = _MdlPsStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 2),
    _MdlPsStatus_Type()
)
mdlPsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPsStatus.setStatus("mandatory")


class _MdlPsTestResult_Type(Integer32):
    """Custom type mdlPsTestResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("f12V", 2),
          ("f5V", 3),
          ("ok", 1))
    )


_MdlPsTestResult_Type.__name__ = "Integer32"
_MdlPsTestResult_Object = MibTableColumn
mdlPsTestResult = _MdlPsTestResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 3),
    _MdlPsTestResult_Type()
)
mdlPsTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPsTestResult.setStatus("mandatory")
_PrtDacsMux_ObjectIdentity = ObjectIdentity
prtDacsMux = _PrtDacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3)
)
_PrtGen_ObjectIdentity = ObjectIdentity
prtGen = _PrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1)
)
_PrtGenParamTable_Object = MibTable
prtGenParamTable = _PrtGenParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1)
)
if mibBuilder.loadTexts:
    prtGenParamTable.setStatus("mandatory")
_PrtGenEntry_Object = MibTableRow
prtGenEntry = _PrtGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1)
)
prtGenEntry.setIndexNames(
    (0, "DACS-MIB", "prtGenPrtIdx"),
)
if mibBuilder.loadTexts:
    prtGenEntry.setStatus("mandatory")
_PrtGenPrtIdx_Type = Integer32
_PrtGenPrtIdx_Object = MibTableColumn
prtGenPrtIdx = _PrtGenPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 1),
    _PrtGenPrtIdx_Type()
)
prtGenPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenPrtIdx.setStatus("mandatory")


class _PrtGenSlt_Type(Integer32):
    """Custom type prtGenSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("standAlone", 255))
    )


_PrtGenSlt_Type.__name__ = "Integer32"
_PrtGenSlt_Object = MibTableColumn
prtGenSlt = _PrtGenSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 2),
    _PrtGenSlt_Type()
)
prtGenSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenSlt.setStatus("mandatory")


class _PrtGenExtInt_Type(Integer32):
    """Custom type prtGenExtInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("external", 2),
          ("internal", 3))
    )


_PrtGenExtInt_Type.__name__ = "Integer32"
_PrtGenExtInt_Object = MibTableColumn
prtGenExtInt = _PrtGenExtInt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 3),
    _PrtGenExtInt_Type()
)
prtGenExtInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenExtInt.setStatus("mandatory")
_PrtGenIfIndex_Type = Integer32
_PrtGenIfIndex_Object = MibTableColumn
prtGenIfIndex = _PrtGenIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 4),
    _PrtGenIfIndex_Type()
)
prtGenIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenIfIndex.setStatus("mandatory")


class _PrtGenActiveStatus_Type(Integer32):
    """Custom type prtGenActiveStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notUsed", 2),
          ("offLine", 3),
          ("offLineRedundancy", 5),
          ("onLine", 4),
          ("onLineRedundancy", 6),
          ("unknown", 1))
    )


_PrtGenActiveStatus_Type.__name__ = "Integer32"
_PrtGenActiveStatus_Object = MibTableColumn
prtGenActiveStatus = _PrtGenActiveStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 5),
    _PrtGenActiveStatus_Type()
)
prtGenActiveStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenActiveStatus.setStatus("mandatory")


class _PrtGenAlrStatus_Type(Integer32):
    """Custom type prtGenAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("major", 3),
          ("minor", 4),
          ("off", 2))
    )


_PrtGenAlrStatus_Type.__name__ = "Integer32"
_PrtGenAlrStatus_Object = MibTableColumn
prtGenAlrStatus = _PrtGenAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 6),
    _PrtGenAlrStatus_Type()
)
prtGenAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenAlrStatus.setStatus("mandatory")


class _PrtGenTestStatus_Type(Integer32):
    """Custom type prtGenTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtGenTestStatus_Type.__name__ = "Integer32"
_PrtGenTestStatus_Object = MibTableColumn
prtGenTestStatus = _PrtGenTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 7),
    _PrtGenTestStatus_Type()
)
prtGenTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestStatus.setStatus("mandatory")
_PrtGenTestMask_Type = Integer32
_PrtGenTestMask_Object = MibTableColumn
prtGenTestMask = _PrtGenTestMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 8),
    _PrtGenTestMask_Type()
)
prtGenTestMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestMask.setStatus("mandatory")
_PrtGenTestCmd_Type = Integer32
_PrtGenTestCmd_Object = MibTableColumn
prtGenTestCmd = _PrtGenTestCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 9),
    _PrtGenTestCmd_Type()
)
prtGenTestCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTestCmd.setStatus("mandatory")
_PrtGenTestRunning_Type = Integer32
_PrtGenTestRunning_Object = MibTableColumn
prtGenTestRunning = _PrtGenTestRunning_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 10),
    _PrtGenTestRunning_Type()
)
prtGenTestRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestRunning.setStatus("mandatory")


class _PrtGenType_Type(Integer32):
    """Custom type prtGenType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dim", 13),
          ("e1", 3),
          ("e1Dsu", 8),
          ("e1F", 12),
          ("e1Ltu", 7),
          ("e3", 16),
          ("e3f", 18),
          ("hdsl", 9),
          ("hs", 4),
          ("isdn", 14),
          ("other", 255),
          ("sp", 10),
          ("t1", 2),
          ("t1Csu", 5),
          ("t1Dsu", 6),
          ("t1F", 11),
          ("t3", 15),
          ("t3f", 17),
          ("unknown", 1))
    )


_PrtGenType_Type.__name__ = "Integer32"
_PrtGenType_Object = MibTableColumn
prtGenType = _PrtGenType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 11),
    _PrtGenType_Type()
)
prtGenType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenType.setStatus("mandatory")


class _PrtGenInterfaceType_Type(DisplayString):
    """Custom type prtGenInterfaceType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtGenInterfaceType_Type.__name__ = "DisplayString"
_PrtGenInterfaceType_Object = MibTableColumn
prtGenInterfaceType = _PrtGenInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 12),
    _PrtGenInterfaceType_Type()
)
prtGenInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenInterfaceType.setStatus("mandatory")


class _PrtGenAlrClearCmd_Type(Integer32):
    """Custom type prtGenAlrClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtGenAlrClearCmd_Type.__name__ = "Integer32"
_PrtGenAlrClearCmd_Object = MibTableColumn
prtGenAlrClearCmd = _PrtGenAlrClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 13),
    _PrtGenAlrClearCmd_Type()
)
prtGenAlrClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenAlrClearCmd.setStatus("mandatory")


class _PrtGenAlrMaskAll_Type(Integer32):
    """Custom type prtGenAlrMaskAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtGenAlrMaskAll_Type.__name__ = "Integer32"
_PrtGenAlrMaskAll_Object = MibTableColumn
prtGenAlrMaskAll = _PrtGenAlrMaskAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 14),
    _PrtGenAlrMaskAll_Type()
)
prtGenAlrMaskAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenAlrMaskAll.setStatus("mandatory")
_PrtGenParamStatus_Type = OctetString
_PrtGenParamStatus_Object = MibTableColumn
prtGenParamStatus = _PrtGenParamStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 15),
    _PrtGenParamStatus_Type()
)
prtGenParamStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenParamStatus.setStatus("mandatory")
_PrtGenTestDurationTable_Object = MibTable
prtGenTestDurationTable = _PrtGenTestDurationTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2)
)
if mibBuilder.loadTexts:
    prtGenTestDurationTable.setStatus("mandatory")
_PrtGenTestDurationEntry_Object = MibTableRow
prtGenTestDurationEntry = _PrtGenTestDurationEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1)
)
prtGenTestDurationEntry.setIndexNames(
    (0, "DACS-MIB", "prtGenTestPrtIdx"),
    (0, "DACS-MIB", "prtGenTestIdx"),
)
if mibBuilder.loadTexts:
    prtGenTestDurationEntry.setStatus("mandatory")
_PrtGenTestPrtIdx_Type = Integer32
_PrtGenTestPrtIdx_Object = MibTableColumn
prtGenTestPrtIdx = _PrtGenTestPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 1),
    _PrtGenTestPrtIdx_Type()
)
prtGenTestPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestPrtIdx.setStatus("mandatory")


class _PrtGenTestIdx_Type(Integer32):
    """Custom type prtGenTestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("bert", 3),
          ("llb", 6),
          ("localLoop", 1),
          ("plb", 4),
          ("remoteLoop", 2),
          ("rlb", 5),
          ("rxInband", 9),
          ("toneInjection", 7),
          ("txInband", 8))
    )


_PrtGenTestIdx_Type.__name__ = "Integer32"
_PrtGenTestIdx_Object = MibTableColumn
prtGenTestIdx = _PrtGenTestIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 2),
    _PrtGenTestIdx_Type()
)
prtGenTestIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestIdx.setStatus("mandatory")
_PrtGenTestDuration_Type = Integer32
_PrtGenTestDuration_Object = MibTableColumn
prtGenTestDuration = _PrtGenTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 3),
    _PrtGenTestDuration_Type()
)
prtGenTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTestDuration.setStatus("mandatory")
_PrtGenTsTable_Object = MibTable
prtGenTsTable = _PrtGenTsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3)
)
if mibBuilder.loadTexts:
    prtGenTsTable.setStatus("mandatory")
_PrtGenTsEntry_Object = MibTableRow
prtGenTsEntry = _PrtGenTsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1)
)
prtGenTsEntry.setIndexNames(
    (0, "DACS-MIB", "prtGenTsCnfgIdx"),
    (0, "DACS-MIB", "prtGenTsPrtIdx"),
    (0, "DACS-MIB", "prtGenTsIdx"),
)
if mibBuilder.loadTexts:
    prtGenTsEntry.setStatus("mandatory")


class _PrtGenTsCnfgIdx_Type(Integer32):
    """Custom type prtGenTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtGenTsCnfgIdx_Type.__name__ = "Integer32"
_PrtGenTsCnfgIdx_Object = MibTableColumn
prtGenTsCnfgIdx = _PrtGenTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 1),
    _PrtGenTsCnfgIdx_Type()
)
prtGenTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTsCnfgIdx.setStatus("mandatory")
_PrtGenTsPrtIdx_Type = Integer32
_PrtGenTsPrtIdx_Object = MibTableColumn
prtGenTsPrtIdx = _PrtGenTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 2),
    _PrtGenTsPrtIdx_Type()
)
prtGenTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTsPrtIdx.setStatus("mandatory")
_PrtGenTsIdx_Type = Integer32
_PrtGenTsIdx_Object = MibTableColumn
prtGenTsIdx = _PrtGenTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 3),
    _PrtGenTsIdx_Type()
)
prtGenTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTsIdx.setStatus("mandatory")


class _PrtGenTsType_Type(Integer32):
    """Custom type prtGenTsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("data", 3),
          ("mng", 6),
          ("nc", 5),
          ("unknown", 1),
          ("vcMP", 4),
          ("voice", 2))
    )


_PrtGenTsType_Type.__name__ = "Integer32"
_PrtGenTsType_Object = MibTableColumn
prtGenTsType = _PrtGenTsType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 4),
    _PrtGenTsType_Type()
)
prtGenTsType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTsType.setStatus("mandatory")
_PrtGenTsIConPrt_Type = Integer32
_PrtGenTsIConPrt_Object = MibTableColumn
prtGenTsIConPrt = _PrtGenTsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 5),
    _PrtGenTsIConPrt_Type()
)
prtGenTsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTsIConPrt.setStatus("mandatory")
_PrtGenTsIConTs_Type = Integer32
_PrtGenTsIConTs_Object = MibTableColumn
prtGenTsIConTs = _PrtGenTsIConTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 6),
    _PrtGenTsIConTs_Type()
)
prtGenTsIConTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTsIConTs.setStatus("mandatory")
_PrtAlr_ObjectIdentity = ObjectIdentity
prtAlr = _PrtAlr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4)
)
_PrtSAlarmTable_Object = MibTable
prtSAlarmTable = _PrtSAlarmTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1)
)
if mibBuilder.loadTexts:
    prtSAlarmTable.setStatus("mandatory")
_PrtSAlarmEntry_Object = MibTableRow
prtSAlarmEntry = _PrtSAlarmEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1)
)
prtSAlarmEntry.setIndexNames(
    (0, "DACS-MIB", "prtSAlarmPrtIdx"),
    (0, "DACS-MIB", "prtSAlarmIdx"),
)
if mibBuilder.loadTexts:
    prtSAlarmEntry.setStatus("mandatory")
_PrtSAlarmIdx_Type = Integer32
_PrtSAlarmIdx_Object = MibTableColumn
prtSAlarmIdx = _PrtSAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 1),
    _PrtSAlarmIdx_Type()
)
prtSAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmIdx.setStatus("mandatory")
_PrtSAlarmPrtIdx_Type = Integer32
_PrtSAlarmPrtIdx_Object = MibTableColumn
prtSAlarmPrtIdx = _PrtSAlarmPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 2),
    _PrtSAlarmPrtIdx_Type()
)
prtSAlarmPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmPrtIdx.setStatus("mandatory")
_PrtSAlarmCode_Type = Integer32
_PrtSAlarmCode_Object = MibTableColumn
prtSAlarmCode = _PrtSAlarmCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 3),
    _PrtSAlarmCode_Type()
)
prtSAlarmCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmCode.setStatus("mandatory")


class _PrtSAlarmState_Type(Integer32):
    """Custom type prtSAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("major", 5),
          ("minor", 4))
    )


_PrtSAlarmState_Type.__name__ = "Integer32"
_PrtSAlarmState_Object = MibTableColumn
prtSAlarmState = _PrtSAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 4),
    _PrtSAlarmState_Type()
)
prtSAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmState.setStatus("mandatory")


class _PrtSAlarmMask_Type(Integer32):
    """Custom type prtSAlarmMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlarmMask_Type.__name__ = "Integer32"
_PrtSAlarmMask_Object = MibTableColumn
prtSAlarmMask = _PrtSAlarmMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 5),
    _PrtSAlarmMask_Type()
)
prtSAlarmMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmMask.setStatus("mandatory")


class _PrtSAlarmInvert_Type(Integer32):
    """Custom type prtSAlarmInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlarmInvert_Type.__name__ = "Integer32"
_PrtSAlarmInvert_Object = MibTableColumn
prtSAlarmInvert = _PrtSAlarmInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 6),
    _PrtSAlarmInvert_Type()
)
prtSAlarmInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmInvert.setStatus("mandatory")
_PrtAlrMaskTable_Object = MibTable
prtAlrMaskTable = _PrtAlrMaskTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2)
)
if mibBuilder.loadTexts:
    prtAlrMaskTable.setStatus("mandatory")
_PrtAlrMaskEntry_Object = MibTableRow
prtAlrMaskEntry = _PrtAlrMaskEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1)
)
prtAlrMaskEntry.setIndexNames(
    (0, "DACS-MIB", "prtAlrMaskPrtIdx"),
)
if mibBuilder.loadTexts:
    prtAlrMaskEntry.setStatus("mandatory")
_PrtAlrMaskPrtIdx_Type = Integer32
_PrtAlrMaskPrtIdx_Object = MibTableColumn
prtAlrMaskPrtIdx = _PrtAlrMaskPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1, 1),
    _PrtAlrMaskPrtIdx_Type()
)
prtAlrMaskPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlrMaskPrtIdx.setStatus("mandatory")


class _PrtAlrMask_Type(OctetString):
    """Custom type prtAlrMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_PrtAlrMask_Type.__name__ = "OctetString"
_PrtAlrMask_Object = MibTableColumn
prtAlrMask = _PrtAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1, 2),
    _PrtAlrMask_Type()
)
prtAlrMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAlrMask.setStatus("mandatory")
_PrtBertTable_Object = MibTable
prtBertTable = _PrtBertTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5)
)
if mibBuilder.loadTexts:
    prtBertTable.setStatus("mandatory")
_PrtBertEntry_Object = MibTableRow
prtBertEntry = _PrtBertEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1)
)
prtBertEntry.setIndexNames(
    (0, "DACS-MIB", "prtBertPrtIdx"),
)
if mibBuilder.loadTexts:
    prtBertEntry.setStatus("mandatory")
_PrtBertPrtIdx_Type = Integer32
_PrtBertPrtIdx_Object = MibTableColumn
prtBertPrtIdx = _PrtBertPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 1),
    _PrtBertPrtIdx_Type()
)
prtBertPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertPrtIdx.setStatus("mandatory")


class _PrtBertPattern_Type(Integer32):
    """Custom type prtBertPattern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              255)
        )
    )
    namedValues = NamedValues(
        *(("alternate", 26),
          ("mark", 27),
          ("notApplicable", 255),
          ("p1M7S", 24),
          ("p1S7M", 25),
          ("p2047", 8),
          ("p2E10m1", 7),
          ("p2E15m1", 9),
          ("p2E17m1", 10),
          ("p2E18m1", 11),
          ("p2E20m1", 12),
          ("p2E21m1", 14),
          ("p2E22m1", 15),
          ("p2E23m1", 16),
          ("p2E25m1", 17),
          ("p2E28m1", 18),
          ("p2E29m1", 19),
          ("p2E31m1", 20),
          ("p2E32m1", 21),
          ("p2E3m1", 1),
          ("p2E4m1", 2),
          ("p2E5m1", 3),
          ("p2E6m1", 4),
          ("p2E7m1", 5),
          ("p511", 6),
          ("p63", 23),
          ("qrss", 13),
          ("rj011", 22),
          ("space", 28))
    )


_PrtBertPattern_Type.__name__ = "Integer32"
_PrtBertPattern_Object = MibTableColumn
prtBertPattern = _PrtBertPattern_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 2),
    _PrtBertPattern_Type()
)
prtBertPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertPattern.setStatus("mandatory")


class _PrtBertInjectRate_Type(Integer32):
    """Custom type prtBertInjectRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noError", 1),
          ("notApplicable", 255),
          ("r10Em1", 2),
          ("r10Em2", 3),
          ("r10Em3", 4),
          ("r10Em4", 5),
          ("r10Em5", 6),
          ("r10Em6", 7),
          ("r10Em7", 8),
          ("single", 9))
    )


_PrtBertInjectRate_Type.__name__ = "Integer32"
_PrtBertInjectRate_Object = MibTableColumn
prtBertInjectRate = _PrtBertInjectRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 3),
    _PrtBertInjectRate_Type()
)
prtBertInjectRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertInjectRate.setStatus("mandatory")


class _PrtBertInjectErrRateCmd_Type(Integer32):
    """Custom type prtBertInjectErrRateCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtBertInjectErrRateCmd_Type.__name__ = "Integer32"
_PrtBertInjectErrRateCmd_Object = MibTableColumn
prtBertInjectErrRateCmd = _PrtBertInjectErrRateCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 4),
    _PrtBertInjectErrRateCmd_Type()
)
prtBertInjectErrRateCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertInjectErrRateCmd.setStatus("mandatory")


class _PrtBertInjectSingleErrCmd_Type(Integer32):
    """Custom type prtBertInjectSingleErrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtBertInjectSingleErrCmd_Type.__name__ = "Integer32"
_PrtBertInjectSingleErrCmd_Object = MibTableColumn
prtBertInjectSingleErrCmd = _PrtBertInjectSingleErrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 5),
    _PrtBertInjectSingleErrCmd_Type()
)
prtBertInjectSingleErrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertInjectSingleErrCmd.setStatus("mandatory")
_PrtBertRunTime_Type = Integer32
_PrtBertRunTime_Object = MibTableColumn
prtBertRunTime = _PrtBertRunTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 6),
    _PrtBertRunTime_Type()
)
prtBertRunTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertRunTime.setStatus("mandatory")
_PrtBertESs_Type = Integer32
_PrtBertESs_Object = MibTableColumn
prtBertESs = _PrtBertESs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 7),
    _PrtBertESs_Type()
)
prtBertESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertESs.setStatus("mandatory")
_PrtBertSyncLoss_Type = Integer32
_PrtBertSyncLoss_Object = MibTableColumn
prtBertSyncLoss = _PrtBertSyncLoss_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 8),
    _PrtBertSyncLoss_Type()
)
prtBertSyncLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertSyncLoss.setStatus("mandatory")
_PrtBertErrorBits_Type = Integer32
_PrtBertErrorBits_Object = MibTableColumn
prtBertErrorBits = _PrtBertErrorBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 9),
    _PrtBertErrorBits_Type()
)
prtBertErrorBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertErrorBits.setStatus("mandatory")


class _PrtBertClearCounters_Type(Integer32):
    """Custom type prtBertClearCounters based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtBertClearCounters_Type.__name__ = "Integer32"
_PrtBertClearCounters_Object = MibTableColumn
prtBertClearCounters = _PrtBertClearCounters_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 10),
    _PrtBertClearCounters_Type()
)
prtBertClearCounters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertClearCounters.setStatus("mandatory")


class _PrtBertSyncStatus_Type(Integer32):
    """Custom type prtBertSyncStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("sync", 3),
          ("syncLoss", 2))
    )


_PrtBertSyncStatus_Type.__name__ = "Integer32"
_PrtBertSyncStatus_Object = MibTableColumn
prtBertSyncStatus = _PrtBertSyncStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 11),
    _PrtBertSyncStatus_Type()
)
prtBertSyncStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertSyncStatus.setStatus("mandatory")


class _PrtBertTs_Type(OctetString):
    """Custom type prtBertTs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtBertTs_Type.__name__ = "OctetString"
_PrtBertTs_Object = MibTableColumn
prtBertTs = _PrtBertTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 12),
    _PrtBertTs_Type()
)
prtBertTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertTs.setStatus("mandatory")
_PrtMonTable_Object = MibTable
prtMonTable = _PrtMonTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6)
)
if mibBuilder.loadTexts:
    prtMonTable.setStatus("mandatory")
_PrtMonEntry_Object = MibTableRow
prtMonEntry = _PrtMonEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1)
)
prtMonEntry.setIndexNames(
    (0, "DACS-MIB", "prtMonCnfgIdx"),
    (0, "DACS-MIB", "prtMonitoringIdx"),
)
if mibBuilder.loadTexts:
    prtMonEntry.setStatus("mandatory")


class _PrtMonCnfgIdx_Type(Integer32):
    """Custom type prtMonCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtMonCnfgIdx_Type.__name__ = "Integer32"
_PrtMonCnfgIdx_Object = MibTableColumn
prtMonCnfgIdx = _PrtMonCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 1),
    _PrtMonCnfgIdx_Type()
)
prtMonCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMonCnfgIdx.setStatus("mandatory")
_PrtMonitoringIdx_Type = Integer32
_PrtMonitoringIdx_Object = MibTableColumn
prtMonitoringIdx = _PrtMonitoringIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 2),
    _PrtMonitoringIdx_Type()
)
prtMonitoringIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMonitoringIdx.setStatus("mandatory")


class _PrtMonitoringEnable_Type(Integer32):
    """Custom type prtMonitoringEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtMonitoringEnable_Type.__name__ = "Integer32"
_PrtMonitoringEnable_Object = MibTableColumn
prtMonitoringEnable = _PrtMonitoringEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 3),
    _PrtMonitoringEnable_Type()
)
prtMonitoringEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMonitoringEnable.setStatus("mandatory")


class _PrtMonitoringTSs_Type(OctetString):
    """Custom type prtMonitoringTSs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtMonitoringTSs_Type.__name__ = "OctetString"
_PrtMonitoringTSs_Object = MibTableColumn
prtMonitoringTSs = _PrtMonitoringTSs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 4),
    _PrtMonitoringTSs_Type()
)
prtMonitoringTSs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMonitoringTSs.setStatus("mandatory")
_PrtMonitoredPort_Type = Integer32
_PrtMonitoredPort_Object = MibTableColumn
prtMonitoredPort = _PrtMonitoredPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 5),
    _PrtMonitoredPort_Type()
)
prtMonitoredPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMonitoredPort.setStatus("mandatory")


class _PrtMonitoredTSs_Type(OctetString):
    """Custom type prtMonitoredTSs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtMonitoredTSs_Type.__name__ = "OctetString"
_PrtMonitoredTSs_Object = MibTableColumn
prtMonitoredTSs = _PrtMonitoredTSs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 6),
    _PrtMonitoredTSs_Type()
)
prtMonitoredTSs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMonitoredTSs.setStatus("mandatory")
_PrtCfgParam_ObjectIdentity = ObjectIdentity
prtCfgParam = _PrtCfgParam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7)
)
_PrtCfgParamTable_Object = MibTable
prtCfgParamTable = _PrtCfgParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1)
)
if mibBuilder.loadTexts:
    prtCfgParamTable.setStatus("mandatory")
_PrtCfgParamEntry_Object = MibTableRow
prtCfgParamEntry = _PrtCfgParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1)
)
prtCfgParamEntry.setIndexNames(
    (0, "DACS-MIB", "prtCfgParamCnfgIdx"),
    (0, "DACS-MIB", "prtCfgParamIdx"),
)
if mibBuilder.loadTexts:
    prtCfgParamEntry.setStatus("mandatory")


class _PrtCfgParamCnfgIdx_Type(Integer32):
    """Custom type prtCfgParamCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtCfgParamCnfgIdx_Type.__name__ = "Integer32"
_PrtCfgParamCnfgIdx_Object = MibTableColumn
prtCfgParamCnfgIdx = _PrtCfgParamCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 1),
    _PrtCfgParamCnfgIdx_Type()
)
prtCfgParamCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCfgParamCnfgIdx.setStatus("mandatory")
_PrtCfgParamIdx_Type = Integer32
_PrtCfgParamIdx_Object = MibTableColumn
prtCfgParamIdx = _PrtCfgParamIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 2),
    _PrtCfgParamIdx_Type()
)
prtCfgParamIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCfgParamIdx.setStatus("mandatory")


class _PrtCfgParamSlt_Type(Integer32):
    """Custom type prtCfgParamSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("notApplicable", 255))
    )


_PrtCfgParamSlt_Type.__name__ = "Integer32"
_PrtCfgParamSlt_Object = MibTableColumn
prtCfgParamSlt = _PrtCfgParamSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 3),
    _PrtCfgParamSlt_Type()
)
prtCfgParamSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCfgParamSlt.setStatus("mandatory")


class _PrtCfgParamOperatedMl_Type(Integer32):
    """Custom type prtCfgParamOperatedMl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              103,
              104)
        )
    )
    namedValues = NamedValues(
        *(("kmxMlA", 103),
          ("kmxMlB", 104),
          ("notApplicable", 1))
    )


_PrtCfgParamOperatedMl_Type.__name__ = "Integer32"
_PrtCfgParamOperatedMl_Object = MibTableColumn
prtCfgParamOperatedMl = _PrtCfgParamOperatedMl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 4),
    _PrtCfgParamOperatedMl_Type()
)
prtCfgParamOperatedMl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamOperatedMl.setStatus("mandatory")


class _PrtCfgParamMlAtoMlBPrio_Type(Integer32):
    """Custom type prtCfgParamMlAtoMlBPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("notApplicable", 1))
    )


_PrtCfgParamMlAtoMlBPrio_Type.__name__ = "Integer32"
_PrtCfgParamMlAtoMlBPrio_Object = MibTableColumn
prtCfgParamMlAtoMlBPrio = _PrtCfgParamMlAtoMlBPrio_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 5),
    _PrtCfgParamMlAtoMlBPrio_Type()
)
prtCfgParamMlAtoMlBPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamMlAtoMlBPrio.setStatus("mandatory")


class _PrtCfgParamMlBtoMlAPrio_Type(Integer32):
    """Custom type prtCfgParamMlBtoMlAPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("notApplicable", 1))
    )


_PrtCfgParamMlBtoMlAPrio_Type.__name__ = "Integer32"
_PrtCfgParamMlBtoMlAPrio_Object = MibTableColumn
prtCfgParamMlBtoMlAPrio = _PrtCfgParamMlBtoMlAPrio_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 6),
    _PrtCfgParamMlBtoMlAPrio_Type()
)
prtCfgParamMlBtoMlAPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamMlBtoMlAPrio.setStatus("mandatory")


class _PrtCfgParamInbandLoopDetection_Type(Integer32):
    """Custom type prtCfgParamInbandLoopDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtCfgParamInbandLoopDetection_Type.__name__ = "Integer32"
_PrtCfgParamInbandLoopDetection_Object = MibTableColumn
prtCfgParamInbandLoopDetection = _PrtCfgParamInbandLoopDetection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 7),
    _PrtCfgParamInbandLoopDetection_Type()
)
prtCfgParamInbandLoopDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamInbandLoopDetection.setStatus("mandatory")
_PrtT1E1_ObjectIdentity = ObjectIdentity
prtT1E1 = _PrtT1E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2)
)
_PrtT1E1StatTable_Object = MibTable
prtT1E1StatTable = _PrtT1E1StatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1)
)
if mibBuilder.loadTexts:
    prtT1E1StatTable.setStatus("mandatory")
_PrtT1E1StatEntry_Object = MibTableRow
prtT1E1StatEntry = _PrtT1E1StatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1)
)
prtT1E1StatEntry.setIndexNames(
    (0, "DACS-MIB", "prtT1E1SPrtIdx"),
)
if mibBuilder.loadTexts:
    prtT1E1StatEntry.setStatus("mandatory")
_PrtT1E1SPrtIdx_Type = Integer32
_PrtT1E1SPrtIdx_Object = MibTableColumn
prtT1E1SPrtIdx = _PrtT1E1SPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 1),
    _PrtT1E1SPrtIdx_Type()
)
prtT1E1SPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1SPrtIdx.setStatus("mandatory")


class _PrtT1E1SSlt_Type(Integer32):
    """Custom type prtT1E1SSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtT1E1SSlt_Type.__name__ = "Integer32"
_PrtT1E1SSlt_Object = MibTableColumn
prtT1E1SSlt = _PrtT1E1SSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 2),
    _PrtT1E1SSlt_Type()
)
prtT1E1SSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1SSlt.setStatus("mandatory")
_PrtT1E1OosCount_Type = Gauge32
_PrtT1E1OosCount_Object = MibTableColumn
prtT1E1OosCount = _PrtT1E1OosCount_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 3),
    _PrtT1E1OosCount_Type()
)
prtT1E1OosCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1OosCount.setStatus("mandatory")
_PrtT1E1BpvLastMin_Type = Gauge32
_PrtT1E1BpvLastMin_Object = MibTableColumn
prtT1E1BpvLastMin = _PrtT1E1BpvLastMin_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 4),
    _PrtT1E1BpvLastMin_Type()
)
prtT1E1BpvLastMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1BpvLastMin.setStatus("mandatory")
_PrtT1E1BpvMax_Type = Gauge32
_PrtT1E1BpvMax_Object = MibTableColumn
prtT1E1BpvMax = _PrtT1E1BpvMax_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 5),
    _PrtT1E1BpvMax_Type()
)
prtT1E1BpvMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1BpvMax.setStatus("mandatory")
_PrtT1E1CnfgTable_Object = MibTable
prtT1E1CnfgTable = _PrtT1E1CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2)
)
if mibBuilder.loadTexts:
    prtT1E1CnfgTable.setStatus("mandatory")
_PrtT1E1CnfgEntry_Object = MibTableRow
prtT1E1CnfgEntry = _PrtT1E1CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1)
)
prtT1E1CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtT1E1CnfgIdx"),
    (0, "DACS-MIB", "prtT1E1PrtIdx"),
)
if mibBuilder.loadTexts:
    prtT1E1CnfgEntry.setStatus("mandatory")


class _PrtT1E1CnfgIdx_Type(Integer32):
    """Custom type prtT1E1CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtT1E1CnfgIdx_Type.__name__ = "Integer32"
_PrtT1E1CnfgIdx_Object = MibTableColumn
prtT1E1CnfgIdx = _PrtT1E1CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 1),
    _PrtT1E1CnfgIdx_Type()
)
prtT1E1CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1CnfgIdx.setStatus("mandatory")
_PrtT1E1PrtIdx_Type = Integer32
_PrtT1E1PrtIdx_Object = MibTableColumn
prtT1E1PrtIdx = _PrtT1E1PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 2),
    _PrtT1E1PrtIdx_Type()
)
prtT1E1PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1PrtIdx.setStatus("mandatory")


class _PrtT1E1Slt_Type(Integer32):
    """Custom type prtT1E1Slt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              103,
              104,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("standAlone", 255))
    )


_PrtT1E1Slt_Type.__name__ = "Integer32"
_PrtT1E1Slt_Object = MibTableColumn
prtT1E1Slt = _PrtT1E1Slt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 3),
    _PrtT1E1Slt_Type()
)
prtT1E1Slt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1Slt.setStatus("mandatory")


class _PrtT1E1LineType_Type(Integer32):
    """Custom type prtT1E1LineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("d4", 3),
          ("e1", 4),
          ("e1Crc", 5),
          ("e1CrcMF", 7),
          ("e1MF", 6),
          ("esf", 2),
          ("other", 1),
          ("unframed", 8))
    )


_PrtT1E1LineType_Type.__name__ = "Integer32"
_PrtT1E1LineType_Object = MibTableColumn
prtT1E1LineType = _PrtT1E1LineType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 4),
    _PrtT1E1LineType_Type()
)
prtT1E1LineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LineType.setStatus("mandatory")


class _PrtT1E1LineCode_Type(Integer32):
    """Custom type prtT1E1LineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ami", 5),
          ("b8zs", 2),
          ("hdb3", 3),
          ("jbzs", 1),
          ("other", 6),
          ("zbtsi", 4))
    )


_PrtT1E1LineCode_Type.__name__ = "Integer32"
_PrtT1E1LineCode_Object = MibTableColumn
prtT1E1LineCode = _PrtT1E1LineCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 5),
    _PrtT1E1LineCode_Type()
)
prtT1E1LineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LineCode.setStatus("mandatory")


class _PrtT1E1SignalMode_Type(Integer32):
    """Custom type prtT1E1SignalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bitOriented", 3),
          ("messageOriented", 4),
          ("none", 1),
          ("robbedBit", 2))
    )


_PrtT1E1SignalMode_Type.__name__ = "Integer32"
_PrtT1E1SignalMode_Object = MibTableColumn
prtT1E1SignalMode = _PrtT1E1SignalMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 6),
    _PrtT1E1SignalMode_Type()
)
prtT1E1SignalMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1SignalMode.setStatus("mandatory")


class _PrtT1E1Fdl_Type(Integer32):
    """Custom type prtT1E1Fdl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("ansi-T1-403", 2),
          ("att-54016", 4),
          ("fdl-none", 8),
          ("other", 1),
          ("transFdl", 16))
    )


_PrtT1E1Fdl_Type.__name__ = "Integer32"
_PrtT1E1Fdl_Object = MibTableColumn
prtT1E1Fdl = _PrtT1E1Fdl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 7),
    _PrtT1E1Fdl_Type()
)
prtT1E1Fdl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1Fdl.setStatus("mandatory")


class _PrtT1E1FdlMode_Type(Integer32):
    """Custom type prtT1E1FdlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("carrier", 3),
          ("notApplicable", 255),
          ("other", 1),
          ("user", 2))
    )


_PrtT1E1FdlMode_Type.__name__ = "Integer32"
_PrtT1E1FdlMode_Object = MibTableColumn
prtT1E1FdlMode = _PrtT1E1FdlMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 8),
    _PrtT1E1FdlMode_Type()
)
prtT1E1FdlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1FdlMode.setStatus("mandatory")


class _PrtT1E1Sync_Type(Integer32):
    """Custom type prtT1E1Sync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ccitt", 3),
          ("fast", 4),
          ("other", 1),
          ("tr62411", 2))
    )


_PrtT1E1Sync_Type.__name__ = "Integer32"
_PrtT1E1Sync_Object = MibTableColumn
prtT1E1Sync = _PrtT1E1Sync_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 9),
    _PrtT1E1Sync_Type()
)
prtT1E1Sync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1Sync.setStatus("mandatory")


class _PrtT1E1CGA_Type(Integer32):
    """Custom type prtT1E1CGA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("full", 3),
          ("none", 1),
          ("trans", 2))
    )


_PrtT1E1CGA_Type.__name__ = "Integer32"
_PrtT1E1CGA_Object = MibTableColumn
prtT1E1CGA = _PrtT1E1CGA_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 10),
    _PrtT1E1CGA_Type()
)
prtT1E1CGA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1CGA.setStatus("mandatory")


class _PrtT1E1IdleCode_Type(OctetString):
    """Custom type prtT1E1IdleCode based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtT1E1IdleCode_Type.__name__ = "OctetString"
_PrtT1E1IdleCode_Object = MibTableColumn
prtT1E1IdleCode = _PrtT1E1IdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 11),
    _PrtT1E1IdleCode_Type()
)
prtT1E1IdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1IdleCode.setStatus("mandatory")


class _PrtT1E1OosSignal_Type(Integer32):
    """Custom type prtT1E1OosSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 5),
          ("forcedBusy", 4),
          ("forcedIdle", 3),
          ("idleBusy", 6),
          ("notsupported", 2))
    )


_PrtT1E1OosSignal_Type.__name__ = "Integer32"
_PrtT1E1OosSignal_Object = MibTableColumn
prtT1E1OosSignal = _PrtT1E1OosSignal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 12),
    _PrtT1E1OosSignal_Type()
)
prtT1E1OosSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1OosSignal.setStatus("mandatory")


class _PrtT1E1VoiceOos_Type(OctetString):
    """Custom type prtT1E1VoiceOos based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtT1E1VoiceOos_Type.__name__ = "OctetString"
_PrtT1E1VoiceOos_Object = MibTableColumn
prtT1E1VoiceOos = _PrtT1E1VoiceOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 13),
    _PrtT1E1VoiceOos_Type()
)
prtT1E1VoiceOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1VoiceOos.setStatus("mandatory")


class _PrtT1E1DataOos_Type(OctetString):
    """Custom type prtT1E1DataOos based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtT1E1DataOos_Type.__name__ = "OctetString"
_PrtT1E1DataOos_Object = MibTableColumn
prtT1E1DataOos = _PrtT1E1DataOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 14),
    _PrtT1E1DataOos_Type()
)
prtT1E1DataOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1DataOos.setStatus("mandatory")


class _PrtT1E1LineLengthMask_Type(Integer32):
    """Custom type prtT1E1LineLengthMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("fcc68", 7),
          ("len0p133ft", 2),
          ("len134p266ft", 3),
          ("len267p399ft", 4),
          ("len400p533ft", 5),
          ("len534p655ft", 6),
          ("unknown", 1))
    )


_PrtT1E1LineLengthMask_Type.__name__ = "Integer32"
_PrtT1E1LineLengthMask_Object = MibTableColumn
prtT1E1LineLengthMask = _PrtT1E1LineLengthMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 15),
    _PrtT1E1LineLengthMask_Type()
)
prtT1E1LineLengthMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LineLengthMask.setStatus("mandatory")


class _PrtT1E1TxGainMask_Type(Integer32):
    """Custom type prtT1E1TxGainMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("txGain0db", 2),
          ("txGain15db", 4),
          ("txGain22dot5db", 5),
          ("txGain7dot5db", 3))
    )


_PrtT1E1TxGainMask_Type.__name__ = "Integer32"
_PrtT1E1TxGainMask_Object = MibTableColumn
prtT1E1TxGainMask = _PrtT1E1TxGainMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 16),
    _PrtT1E1TxGainMask_Type()
)
prtT1E1TxGainMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1TxGainMask.setStatus("mandatory")


class _PrtT1E1InbandMng_Type(Integer32):
    """Custom type prtT1E1InbandMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("dedicatedFr", 6),
          ("dedicatedPpp", 5),
          ("dedicatedTs", 4),
          ("fdlOrTs0", 3),
          ("internal", 7),
          ("off", 2))
    )


_PrtT1E1InbandMng_Type.__name__ = "Integer32"
_PrtT1E1InbandMng_Object = MibTableColumn
prtT1E1InbandMng = _PrtT1E1InbandMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 17),
    _PrtT1E1InbandMng_Type()
)
prtT1E1InbandMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1InbandMng.setStatus("mandatory")


class _PrtT1E1InbandMngRate_Type(Integer32):
    """Custom type prtT1E1InbandMngRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r12k", 4),
          ("r16k", 5),
          ("r20k", 8),
          ("r32k", 6),
          ("r4k", 2),
          ("r64k", 7),
          ("r8k", 3))
    )


_PrtT1E1InbandMngRate_Type.__name__ = "Integer32"
_PrtT1E1InbandMngRate_Object = MibTableColumn
prtT1E1InbandMngRate = _PrtT1E1InbandMngRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 18),
    _PrtT1E1InbandMngRate_Type()
)
prtT1E1InbandMngRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1InbandMngRate.setStatus("mandatory")
_PrtT1E1DedicatedTs_Type = Integer32
_PrtT1E1DedicatedTs_Object = MibTableColumn
prtT1E1DedicatedTs = _PrtT1E1DedicatedTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 19),
    _PrtT1E1DedicatedTs_Type()
)
prtT1E1DedicatedTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1DedicatedTs.setStatus("mandatory")


class _PrtT1E1InbandMngRoutProt_Type(Integer32):
    """Custom type prtT1E1InbandMngRoutProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip2", 4))
    )


_PrtT1E1InbandMngRoutProt_Type.__name__ = "Integer32"
_PrtT1E1InbandMngRoutProt_Object = MibTableColumn
prtT1E1InbandMngRoutProt = _PrtT1E1InbandMngRoutProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 20),
    _PrtT1E1InbandMngRoutProt_Type()
)
prtT1E1InbandMngRoutProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1InbandMngRoutProt.setStatus("mandatory")


class _PrtT1E1LinkMode_Type(Integer32):
    """Custom type prtT1E1LinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("regular", 2),
          ("transparent", 3))
    )


_PrtT1E1LinkMode_Type.__name__ = "Integer32"
_PrtT1E1LinkMode_Object = MibTableColumn
prtT1E1LinkMode = _PrtT1E1LinkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 21),
    _PrtT1E1LinkMode_Type()
)
prtT1E1LinkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LinkMode.setStatus("mandatory")


class _PrtT1E1Multiplier_Type(Integer32):
    """Custom type prtT1E1Multiplier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("br56", 2),
          ("br64", 3),
          ("notApplicable", 1))
    )


_PrtT1E1Multiplier_Type.__name__ = "Integer32"
_PrtT1E1Multiplier_Object = MibTableColumn
prtT1E1Multiplier = _PrtT1E1Multiplier_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 22),
    _PrtT1E1Multiplier_Type()
)
prtT1E1Multiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1Multiplier.setStatus("mandatory")


class _PrtT1E1RxGain_Type(Integer32):
    """Custom type prtT1E1RxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("longHaul", 6),
          ("notApplicable", 1),
          ("rxGain12dB", 2),
          ("rxGain30dB", 3),
          ("rxGain36dB", 4),
          ("shortHaul", 5))
    )


_PrtT1E1RxGain_Type.__name__ = "Integer32"
_PrtT1E1RxGain_Object = MibTableColumn
prtT1E1RxGain = _PrtT1E1RxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 23),
    _PrtT1E1RxGain_Type()
)
prtT1E1RxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1RxGain.setStatus("mandatory")


class _PrtT1E1RAI_Type(Integer32):
    """Custom type prtT1E1RAI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtT1E1RAI_Type.__name__ = "Integer32"
_PrtT1E1RAI_Object = MibTableColumn
prtT1E1RAI = _PrtT1E1RAI_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 24),
    _PrtT1E1RAI_Type()
)
prtT1E1RAI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1RAI.setStatus("mandatory")


class _PrtT1E1LineMode_Type(Integer32):
    """Custom type prtT1E1LineMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("csu", 2),
          ("dsu", 3),
          ("ltu", 4),
          ("notApplicable", 1))
    )


_PrtT1E1LineMode_Type.__name__ = "Integer32"
_PrtT1E1LineMode_Object = MibTableColumn
prtT1E1LineMode = _PrtT1E1LineMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 25),
    _PrtT1E1LineMode_Type()
)
prtT1E1LineMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LineMode.setStatus("mandatory")
_PrtT1E1TS0SaBits_Type = OctetString
_PrtT1E1TS0SaBits_Object = MibTableColumn
prtT1E1TS0SaBits = _PrtT1E1TS0SaBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 26),
    _PrtT1E1TS0SaBits_Type()
)
prtT1E1TS0SaBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1TS0SaBits.setStatus("mandatory")
_PrtT1E1FdlMsgTable_Object = MibTable
prtT1E1FdlMsgTable = _PrtT1E1FdlMsgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3)
)
if mibBuilder.loadTexts:
    prtT1E1FdlMsgTable.setStatus("mandatory")
_PrtT1E1FdlMsgEntry_Object = MibTableRow
prtT1E1FdlMsgEntry = _PrtT1E1FdlMsgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1)
)
prtT1E1FdlMsgEntry.setIndexNames(
    (0, "DACS-MIB", "prtT1E1FdlMsgPrtIdx"),
    (0, "DACS-MIB", "prtT1E1FdlMsgFdlType"),
)
if mibBuilder.loadTexts:
    prtT1E1FdlMsgEntry.setStatus("mandatory")
_PrtT1E1FdlMsgPrtIdx_Type = Integer32
_PrtT1E1FdlMsgPrtIdx_Object = MibTableColumn
prtT1E1FdlMsgPrtIdx = _PrtT1E1FdlMsgPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 1),
    _PrtT1E1FdlMsgPrtIdx_Type()
)
prtT1E1FdlMsgPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1FdlMsgPrtIdx.setStatus("mandatory")


class _PrtT1E1FdlMsgFdlType_Type(Integer32):
    """Custom type prtT1E1FdlMsgFdlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("receive", 2),
          ("send", 1))
    )


_PrtT1E1FdlMsgFdlType_Type.__name__ = "Integer32"
_PrtT1E1FdlMsgFdlType_Object = MibTableColumn
prtT1E1FdlMsgFdlType = _PrtT1E1FdlMsgFdlType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 2),
    _PrtT1E1FdlMsgFdlType_Type()
)
prtT1E1FdlMsgFdlType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1FdlMsgFdlType.setStatus("mandatory")


class _PrtT1E1FdlMsgSlt_Type(Integer32):
    """Custom type prtT1E1FdlMsgSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtT1E1FdlMsgSlt_Type.__name__ = "Integer32"
_PrtT1E1FdlMsgSlt_Object = MibTableColumn
prtT1E1FdlMsgSlt = _PrtT1E1FdlMsgSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 3),
    _PrtT1E1FdlMsgSlt_Type()
)
prtT1E1FdlMsgSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1FdlMsgSlt.setStatus("mandatory")
_PrtT1E1FdlMsg_Type = OctetString
_PrtT1E1FdlMsg_Object = MibTableColumn
prtT1E1FdlMsg = _PrtT1E1FdlMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 4),
    _PrtT1E1FdlMsg_Type()
)
prtT1E1FdlMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1FdlMsg.setStatus("mandatory")
_PrtHS_ObjectIdentity = ObjectIdentity
prtHS = _PrtHS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3)
)
_PrtHSParamTable_Object = MibTable
prtHSParamTable = _PrtHSParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1)
)
if mibBuilder.loadTexts:
    prtHSParamTable.setStatus("mandatory")
_PrtHSParamEntry_Object = MibTableRow
prtHSParamEntry = _PrtHSParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1)
)
prtHSParamEntry.setIndexNames(
    (0, "DACS-MIB", "prtHSCnfgIdx"),
    (0, "DACS-MIB", "prtHSPrtIdx"),
)
if mibBuilder.loadTexts:
    prtHSParamEntry.setStatus("mandatory")


class _PrtHSCnfgIdx_Type(Integer32):
    """Custom type prtHSCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtHSCnfgIdx_Type.__name__ = "Integer32"
_PrtHSCnfgIdx_Object = MibTableColumn
prtHSCnfgIdx = _PrtHSCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 1),
    _PrtHSCnfgIdx_Type()
)
prtHSCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSCnfgIdx.setStatus("mandatory")
_PrtHSPrtIdx_Type = Integer32
_PrtHSPrtIdx_Object = MibTableColumn
prtHSPrtIdx = _PrtHSPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 2),
    _PrtHSPrtIdx_Type()
)
prtHSPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSPrtIdx.setStatus("mandatory")


class _PrtHSSlt_Type(Integer32):
    """Custom type prtHSSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtHSSlt_Type.__name__ = "Integer32"
_PrtHSSlt_Object = MibTableColumn
prtHSSlt = _PrtHSSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 3),
    _PrtHSSlt_Type()
)
prtHSSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSSlt.setStatus("mandatory")


class _PrtHSRate_Type(Integer32):
    """Custom type prtHSRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66)
        )
    )
    namedValues = NamedValues(
        *(("r0x56eq0Kbps", 1),
          ("r0x64eq0Kbps", 33),
          ("r10x56eq560Kbps", 11),
          ("r10x64eq640Kbps", 43),
          ("r11x56eq616Kbps", 12),
          ("r11x64eq704Kbps", 44),
          ("r12x56eq672Kbps", 13),
          ("r12x64eq768Kbps", 45),
          ("r13x56eq728Kbps", 14),
          ("r13x64eq832Kbps", 46),
          ("r14x56eq784Kbps", 15),
          ("r14x64eq896Kbps", 47),
          ("r15x56eq840Kbps", 16),
          ("r15x64eq960Kbps", 48),
          ("r16x56eq896Kbps", 17),
          ("r16x64eq1024Kbps", 49),
          ("r17x56eq952Kbps", 18),
          ("r17x64eq1088Kbps", 50),
          ("r18x56eq1008Kbps", 19),
          ("r18x64eq1152Kbps", 51),
          ("r19x56eq1064Kbps", 20),
          ("r19x64eq1216Kbps", 52),
          ("r1x56eq56Kbps", 2),
          ("r1x64eq64Kbps", 34),
          ("r20x56eq1120Kbps", 21),
          ("r20x64eq1280Kbps", 53),
          ("r21x56eq1176Kbps", 22),
          ("r21x64eq1344Kbps", 54),
          ("r22x56eq1232Kbps", 23),
          ("r22x64eq1408Kbps", 55),
          ("r23x56eq1288Kbps", 24),
          ("r23x64eq1472Kbps", 56),
          ("r24x56eq1344Kbps", 25),
          ("r24x64eq1536Kbps", 57),
          ("r25x56eq1400Kbps", 26),
          ("r25x64eq1600Kbps", 58),
          ("r26x56eq1456Kbps", 27),
          ("r26x64eq1664Kbps", 59),
          ("r27x56eq1512Kbps", 28),
          ("r27x64eq1728Kbps", 60),
          ("r28x56eq1568Kbps", 29),
          ("r28x64eq1792Kbps", 61),
          ("r29x56eq1624Kbps", 30),
          ("r29x64eq1856Kbps", 62),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 35),
          ("r30x56eq1680Kbps", 31),
          ("r30x64eq1920Kbps", 63),
          ("r31x56eq1736Kbps", 32),
          ("r31x64eq1984Kbps", 64),
          ("r32x56eq1792Kbps", 66),
          ("r32x64eq2048Kbps", 65),
          ("r3x56eq168Kbps", 4),
          ("r3x64eq192Kbps", 36),
          ("r4x56eq224Kbps", 5),
          ("r4x64eq256Kbps", 37),
          ("r5x56eq280Kbps", 6),
          ("r5x64eq320Kbps", 38),
          ("r6x56eq336Kbps", 7),
          ("r6x64eq384Kbps", 39),
          ("r7x56eq392Kbps", 8),
          ("r7x64eq448Kbps", 40),
          ("r8x56eq448Kbps", 9),
          ("r8x64eq512Kbps", 41),
          ("r9x56eq504Kbps", 10),
          ("r9x64eq576Kbps", 42))
    )


_PrtHSRate_Type.__name__ = "Integer32"
_PrtHSRate_Object = MibTableColumn
prtHSRate = _PrtHSRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 4),
    _PrtHSRate_Type()
)
prtHSRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSRate.setStatus("mandatory")


class _PrtHSFifoSize_Type(Integer32):
    """Custom type prtHSFifoSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("b104bit", 4),
          ("b144bit", 5),
          ("b32bit", 2),
          ("b60bit", 3),
          ("notApplicable", 255))
    )


_PrtHSFifoSize_Type.__name__ = "Integer32"
_PrtHSFifoSize_Object = MibTableColumn
prtHSFifoSize = _PrtHSFifoSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 5),
    _PrtHSFifoSize_Type()
)
prtHSFifoSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSFifoSize.setStatus("mandatory")


class _PrtHSClkMode_Type(Integer32):
    """Custom type prtHSClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte1", 2),
          ("dte2", 3),
          ("notApplicable", 255))
    )


_PrtHSClkMode_Type.__name__ = "Integer32"
_PrtHSClkMode_Object = MibTableColumn
prtHSClkMode = _PrtHSClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 6),
    _PrtHSClkMode_Type()
)
prtHSClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSClkMode.setStatus("mandatory")


class _PrtHSCTS_Type(Integer32):
    """Custom type prtHSCTS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("rts", 2))
    )


_PrtHSCTS_Type.__name__ = "Integer32"
_PrtHSCTS_Object = MibTableColumn
prtHSCTS = _PrtHSCTS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 7),
    _PrtHSCTS_Type()
)
prtHSCTS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSCTS.setStatus("mandatory")


class _PrtHSRtsState_Type(Integer32):
    """Custom type prtHSRtsState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 3))
    )


_PrtHSRtsState_Type.__name__ = "Integer32"
_PrtHSRtsState_Object = MibTableColumn
prtHSRtsState = _PrtHSRtsState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 8),
    _PrtHSRtsState_Type()
)
prtHSRtsState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSRtsState.setStatus("mandatory")
_PrtHSBertTable_Object = MibTable
prtHSBertTable = _PrtHSBertTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2)
)
if mibBuilder.loadTexts:
    prtHSBertTable.setStatus("mandatory")
_PrtHSBertEntry_Object = MibTableRow
prtHSBertEntry = _PrtHSBertEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1)
)
prtHSBertEntry.setIndexNames(
    (0, "DACS-MIB", "prtHSBertPrtIdx"),
)
if mibBuilder.loadTexts:
    prtHSBertEntry.setStatus("mandatory")
_PrtHSBertPrtIdx_Type = Integer32
_PrtHSBertPrtIdx_Object = MibTableColumn
prtHSBertPrtIdx = _PrtHSBertPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 1),
    _PrtHSBertPrtIdx_Type()
)
prtHSBertPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSBertPrtIdx.setStatus("mandatory")


class _PrtHSBertSlt_Type(Integer32):
    """Custom type prtHSBertSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtHSBertSlt_Type.__name__ = "Integer32"
_PrtHSBertSlt_Object = MibTableColumn
prtHSBertSlt = _PrtHSBertSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 2),
    _PrtHSBertSlt_Type()
)
prtHSBertSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSBertSlt.setStatus("mandatory")


class _PrtHSBertCountClr_Type(Integer32):
    """Custom type prtHSBertCountClr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtHSBertCountClr_Type.__name__ = "Integer32"
_PrtHSBertCountClr_Object = MibTableColumn
prtHSBertCountClr = _PrtHSBertCountClr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 3),
    _PrtHSBertCountClr_Type()
)
prtHSBertCountClr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSBertCountClr.setStatus("mandatory")
_PrtHSBertTestResult_Type = Integer32
_PrtHSBertTestResult_Object = MibTableColumn
prtHSBertTestResult = _PrtHSBertTestResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 4),
    _PrtHSBertTestResult_Type()
)
prtHSBertTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSBertTestResult.setStatus("mandatory")
_PrtSP_ObjectIdentity = ObjectIdentity
prtSP = _PrtSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4)
)
_PrtSpCnfgTable_Object = MibTable
prtSpCnfgTable = _PrtSpCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1)
)
if mibBuilder.loadTexts:
    prtSpCnfgTable.setStatus("mandatory")
_PrtSpCnfgEntry_Object = MibTableRow
prtSpCnfgEntry = _PrtSpCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1)
)
prtSpCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtSpCnfgIdx"),
    (0, "DACS-MIB", "prtSpPrtIdx"),
)
if mibBuilder.loadTexts:
    prtSpCnfgEntry.setStatus("mandatory")


class _PrtSpCnfgIdx_Type(Integer32):
    """Custom type prtSpCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtSpCnfgIdx_Type.__name__ = "Integer32"
_PrtSpCnfgIdx_Object = MibTableColumn
prtSpCnfgIdx = _PrtSpCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 1),
    _PrtSpCnfgIdx_Type()
)
prtSpCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSpCnfgIdx.setStatus("mandatory")
_PrtSpPrtIdx_Type = Integer32
_PrtSpPrtIdx_Object = MibTableColumn
prtSpPrtIdx = _PrtSpPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 2),
    _PrtSpPrtIdx_Type()
)
prtSpPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSpPrtIdx.setStatus("mandatory")


class _PrtSpUsage_Type(Integer32):
    """Custom type prtSpUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dialOut", 8),
          ("muxPpp", 6),
          ("muxSlip", 5),
          ("nmsPpp", 4),
          ("nmsSlip", 3),
          ("noUse", 2),
          ("terminal", 7),
          ("unknown", 1))
    )


_PrtSpUsage_Type.__name__ = "Integer32"
_PrtSpUsage_Object = MibTableColumn
prtSpUsage = _PrtSpUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 3),
    _PrtSpUsage_Type()
)
prtSpUsage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpUsage.setStatus("mandatory")


class _PrtSpRate_Type(Integer32):
    """Custom type prtSpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("s115200bps", 10),
          ("s1200bps", 3),
          ("s19200bps", 7),
          ("s2400bps", 4),
          ("s300bps", 2),
          ("s38400bps", 8),
          ("s4800bps", 5),
          ("s57600bps", 9),
          ("s9600bps", 6))
    )


_PrtSpRate_Type.__name__ = "Integer32"
_PrtSpRate_Object = MibTableColumn
prtSpRate = _PrtSpRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 4),
    _PrtSpRate_Type()
)
prtSpRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpRate.setStatus("mandatory")


class _PrtSpDataBits_Type(Integer32):
    """Custom type prtSpDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dataBits7", 1),
          ("dataBits8", 2))
    )


_PrtSpDataBits_Type.__name__ = "Integer32"
_PrtSpDataBits_Object = MibTableColumn
prtSpDataBits = _PrtSpDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 5),
    _PrtSpDataBits_Type()
)
prtSpDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpDataBits.setStatus("mandatory")


class _PrtSpParity_Type(Integer32):
    """Custom type prtSpParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("none", 1),
          ("odd", 2))
    )


_PrtSpParity_Type.__name__ = "Integer32"
_PrtSpParity_Object = MibTableColumn
prtSpParity = _PrtSpParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 6),
    _PrtSpParity_Type()
)
prtSpParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpParity.setStatus("mandatory")


class _PrtSpCallOutMode_Type(Integer32):
    """Custom type prtSpCallOutMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("all", 3),
          ("major", 4),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtSpCallOutMode_Type.__name__ = "Integer32"
_PrtSpCallOutMode_Object = MibTableColumn
prtSpCallOutMode = _PrtSpCallOutMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 7),
    _PrtSpCallOutMode_Type()
)
prtSpCallOutMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpCallOutMode.setStatus("mandatory")


class _PrtSpInterface_Type(Integer32):
    """Custom type prtSpInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 2))
    )


_PrtSpInterface_Type.__name__ = "Integer32"
_PrtSpInterface_Object = MibTableColumn
prtSpInterface = _PrtSpInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 8),
    _PrtSpInterface_Type()
)
prtSpInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpInterface.setStatus("mandatory")


class _PrtSpCTS_Type(Integer32):
    """Custom type prtSpCTS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("on", 2),
          ("rts", 3))
    )


_PrtSpCTS_Type.__name__ = "Integer32"
_PrtSpCTS_Object = MibTableColumn
prtSpCTS = _PrtSpCTS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 9),
    _PrtSpCTS_Type()
)
prtSpCTS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpCTS.setStatus("mandatory")


class _PrtSpDcdDelay_Type(Integer32):
    """Custom type prtSpDcdDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("d0", 2),
          ("d10", 3),
          ("d100", 5),
          ("d200", 6),
          ("d300", 7),
          ("d50", 4),
          ("notApplicable", 1))
    )


_PrtSpDcdDelay_Type.__name__ = "Integer32"
_PrtSpDcdDelay_Object = MibTableColumn
prtSpDcdDelay = _PrtSpDcdDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 10),
    _PrtSpDcdDelay_Type()
)
prtSpDcdDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpDcdDelay.setStatus("mandatory")


class _PrtSpDsr_Type(Integer32):
    """Custom type prtSpDsr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dtr", 3),
          ("notApplicable", 1),
          ("on", 2))
    )


_PrtSpDsr_Type.__name__ = "Integer32"
_PrtSpDsr_Object = MibTableColumn
prtSpDsr = _PrtSpDsr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 11),
    _PrtSpDsr_Type()
)
prtSpDsr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpDsr.setStatus("mandatory")


class _PrtSpNoOfRetries_Type(Integer32):
    """Custom type prtSpNoOfRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_PrtSpNoOfRetries_Type.__name__ = "Integer32"
_PrtSpNoOfRetries_Object = MibTableColumn
prtSpNoOfRetries = _PrtSpNoOfRetries_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 12),
    _PrtSpNoOfRetries_Type()
)
prtSpNoOfRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpNoOfRetries.setStatus("mandatory")


class _PrtSpWaitForConnect_Type(Integer32):
    """Custom type prtSpWaitForConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("t30sec", 2),
          ("t45sec", 3),
          ("t60sec", 4))
    )


_PrtSpWaitForConnect_Type.__name__ = "Integer32"
_PrtSpWaitForConnect_Object = MibTableColumn
prtSpWaitForConnect = _PrtSpWaitForConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 13),
    _PrtSpWaitForConnect_Type()
)
prtSpWaitForConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpWaitForConnect.setStatus("mandatory")


class _PrtSpDialMode_Type(Integer32):
    """Custom type prtSpDialMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("pulse", 3),
          ("tone", 2))
    )


_PrtSpDialMode_Type.__name__ = "Integer32"
_PrtSpDialMode_Object = MibTableColumn
prtSpDialMode = _PrtSpDialMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 14),
    _PrtSpDialMode_Type()
)
prtSpDialMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpDialMode.setStatus("mandatory")


class _PrtSpAltNumMode_Type(Integer32):
    """Custom type prtSpAltNumMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtSpAltNumMode_Type.__name__ = "Integer32"
_PrtSpAltNumMode_Object = MibTableColumn
prtSpAltNumMode = _PrtSpAltNumMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 15),
    _PrtSpAltNumMode_Type()
)
prtSpAltNumMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpAltNumMode.setStatus("mandatory")


class _PrtSpPrimaryNum_Type(DisplayString):
    """Custom type prtSpPrimaryNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_PrtSpPrimaryNum_Type.__name__ = "DisplayString"
_PrtSpPrimaryNum_Object = MibTableColumn
prtSpPrimaryNum = _PrtSpPrimaryNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 16),
    _PrtSpPrimaryNum_Type()
)
prtSpPrimaryNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpPrimaryNum.setStatus("mandatory")


class _PrtSpAltNum_Type(DisplayString):
    """Custom type prtSpAltNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_PrtSpAltNum_Type.__name__ = "DisplayString"
_PrtSpAltNum_Object = MibTableColumn
prtSpAltNum = _PrtSpAltNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 17),
    _PrtSpAltNum_Type()
)
prtSpAltNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpAltNum.setStatus("mandatory")


class _PrtSpRoutProtocol_Type(Integer32):
    """Custom type prtSpRoutProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip2", 4))
    )


_PrtSpRoutProtocol_Type.__name__ = "Integer32"
_PrtSpRoutProtocol_Object = MibTableColumn
prtSpRoutProtocol = _PrtSpRoutProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 18),
    _PrtSpRoutProtocol_Type()
)
prtSpRoutProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpRoutProtocol.setStatus("mandatory")


class _PrtSpCmd_Type(OctetString):
    """Custom type prtSpCmd based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_PrtSpCmd_Type.__name__ = "OctetString"
_PrtSpCmd_Object = MibTableColumn
prtSpCmd = _PrtSpCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 19),
    _PrtSpCmd_Type()
)
prtSpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpCmd.setStatus("mandatory")


class _PrtSpActCallOut_Type(Integer32):
    """Custom type prtSpActCallOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("always", 2),
          ("linkFail", 3),
          ("notApplicable", 1))
    )


_PrtSpActCallOut_Type.__name__ = "Integer32"
_PrtSpActCallOut_Object = MibTableColumn
prtSpActCallOut = _PrtSpActCallOut_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 20),
    _PrtSpActCallOut_Type()
)
prtSpActCallOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpActCallOut.setStatus("mandatory")


class _PrtSpAlrRelayMode_Type(Integer32):
    """Custom type prtSpAlrRelayMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invert", 3),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtSpAlrRelayMode_Type.__name__ = "Integer32"
_PrtSpAlrRelayMode_Object = MibTableColumn
prtSpAlrRelayMode = _PrtSpAlrRelayMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 21),
    _PrtSpAlrRelayMode_Type()
)
prtSpAlrRelayMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpAlrRelayMode.setStatus("mandatory")
_PrtDim_ObjectIdentity = ObjectIdentity
prtDim = _PrtDim_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5)
)
_PrtDimCnfgTable_Object = MibTable
prtDimCnfgTable = _PrtDimCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1)
)
if mibBuilder.loadTexts:
    prtDimCnfgTable.setStatus("mandatory")
_PrtDimCnfgEntry_Object = MibTableRow
prtDimCnfgEntry = _PrtDimCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1)
)
prtDimCnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtDimCnfgIdx"),
    (0, "DACS-MIB", "prtDimIdx"),
)
if mibBuilder.loadTexts:
    prtDimCnfgEntry.setStatus("mandatory")


class _PrtDimCnfgIdx_Type(Integer32):
    """Custom type prtDimCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtDimCnfgIdx_Type.__name__ = "Integer32"
_PrtDimCnfgIdx_Object = MibTableColumn
prtDimCnfgIdx = _PrtDimCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 1),
    _PrtDimCnfgIdx_Type()
)
prtDimCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDimCnfgIdx.setStatus("mandatory")
_PrtDimIdx_Type = Integer32
_PrtDimIdx_Object = MibTableColumn
prtDimIdx = _PrtDimIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 2),
    _PrtDimIdx_Type()
)
prtDimIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDimIdx.setStatus("mandatory")


class _PrtDimTxMode_Type(Integer32):
    """Custom type prtDimTxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 3),
          ("regularTx", 2))
    )


_PrtDimTxMode_Type.__name__ = "Integer32"
_PrtDimTxMode_Object = MibTableColumn
prtDimTxMode = _PrtDimTxMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 3),
    _PrtDimTxMode_Type()
)
prtDimTxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimTxMode.setStatus("mandatory")


class _PrtDimPolarity_Type(Integer32):
    """Custom type prtDimPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 3),
          ("normalClk", 2))
    )


_PrtDimPolarity_Type.__name__ = "Integer32"
_PrtDimPolarity_Object = MibTableColumn
prtDimPolarity = _PrtDimPolarity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 4),
    _PrtDimPolarity_Type()
)
prtDimPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimPolarity.setStatus("mandatory")


class _PrtDimClkMode_Type(Integer32):
    """Custom type prtDimClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dce", 3),
          ("extDce", 2),
          ("extSmooth", 5),
          ("smooth", 4))
    )


_PrtDimClkMode_Type.__name__ = "Integer32"
_PrtDimClkMode_Object = MibTableColumn
prtDimClkMode = _PrtDimClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 5),
    _PrtDimClkMode_Type()
)
prtDimClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimClkMode.setStatus("mandatory")


class _PrtDimMaxDelay_Type(Integer32):
    """Custom type prtDimMaxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("t16msec", 2),
          ("t64msec", 3))
    )


_PrtDimMaxDelay_Type.__name__ = "Integer32"
_PrtDimMaxDelay_Object = MibTableColumn
prtDimMaxDelay = _PrtDimMaxDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 6),
    _PrtDimMaxDelay_Type()
)
prtDimMaxDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimMaxDelay.setStatus("mandatory")


class _PrtDimMng_Type(Integer32):
    """Custom type prtDimMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("ts1", 3))
    )


_PrtDimMng_Type.__name__ = "Integer32"
_PrtDimMng_Object = MibTableColumn
prtDimMng = _PrtDimMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 7),
    _PrtDimMng_Type()
)
prtDimMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimMng.setStatus("mandatory")
_PrtDimDestTable_Object = MibTable
prtDimDestTable = _PrtDimDestTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2)
)
if mibBuilder.loadTexts:
    prtDimDestTable.setStatus("mandatory")
_PrtDimDestEntry_Object = MibTableRow
prtDimDestEntry = _PrtDimDestEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1)
)
prtDimDestEntry.setIndexNames(
    (0, "DACS-MIB", "prtDestCnfgIdx"),
    (0, "DACS-MIB", "prtDestDimIdx"),
    (0, "DACS-MIB", "prtDestIdx"),
)
if mibBuilder.loadTexts:
    prtDimDestEntry.setStatus("mandatory")


class _PrtDestCnfgIdx_Type(Integer32):
    """Custom type prtDestCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtDestCnfgIdx_Type.__name__ = "Integer32"
_PrtDestCnfgIdx_Object = MibTableColumn
prtDestCnfgIdx = _PrtDestCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 1),
    _PrtDestCnfgIdx_Type()
)
prtDestCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDestCnfgIdx.setStatus("mandatory")
_PrtDestDimIdx_Type = Integer32
_PrtDestDimIdx_Object = MibTableColumn
prtDestDimIdx = _PrtDestDimIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 2),
    _PrtDestDimIdx_Type()
)
prtDestDimIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDestDimIdx.setStatus("mandatory")


class _PrtDestIdx_Type(Integer32):
    """Custom type prtDestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PrtDestIdx_Type.__name__ = "Integer32"
_PrtDestIdx_Object = MibTableColumn
prtDestIdx = _PrtDestIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 3),
    _PrtDestIdx_Type()
)
prtDestIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDestIdx.setStatus("mandatory")
_PrtDest_Type = Integer32
_PrtDest_Object = MibTableColumn
prtDest = _PrtDest_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 4),
    _PrtDest_Type()
)
prtDest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDest.setStatus("mandatory")


class _PrtDestConnect_Type(Integer32):
    """Custom type prtDestConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtDestConnect_Type.__name__ = "Integer32"
_PrtDestConnect_Object = MibTableColumn
prtDestConnect = _PrtDestConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 5),
    _PrtDestConnect_Type()
)
prtDestConnect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDestConnect.setStatus("mandatory")
_PrtI_ObjectIdentity = ObjectIdentity
prtI = _PrtI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6)
)
_PrtICnfgTable_Object = MibTable
prtICnfgTable = _PrtICnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1)
)
if mibBuilder.loadTexts:
    prtICnfgTable.setStatus("mandatory")
_PrtICnfgEntry_Object = MibTableRow
prtICnfgEntry = _PrtICnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1)
)
prtICnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtICnfgIdx"),
    (0, "DACS-MIB", "prtIIdx"),
)
if mibBuilder.loadTexts:
    prtICnfgEntry.setStatus("mandatory")


class _PrtICnfgIdx_Type(Integer32):
    """Custom type prtICnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtICnfgIdx_Type.__name__ = "Integer32"
_PrtICnfgIdx_Object = MibTableColumn
prtICnfgIdx = _PrtICnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 1),
    _PrtICnfgIdx_Type()
)
prtICnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtICnfgIdx.setStatus("mandatory")
_PrtIIdx_Type = Integer32
_PrtIIdx_Object = MibTableColumn
prtIIdx = _PrtIIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 2),
    _PrtIIdx_Type()
)
prtIIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIIdx.setStatus("mandatory")


class _PrtIRate_Type(Integer32):
    """Custom type prtIRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("nc", 2),
          ("notApplicable", 1),
          ("r2bit", 3),
          ("r4bit", 4),
          ("r8bit", 5))
    )


_PrtIRate_Type.__name__ = "Integer32"
_PrtIRate_Object = MibTableColumn
prtIRate = _PrtIRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 3),
    _PrtIRate_Type()
)
prtIRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIRate.setStatus("mandatory")


class _PrtIConnect_Type(Integer32):
    """Custom type prtIConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtIConnect_Type.__name__ = "Integer32"
_PrtIConnect_Object = MibTableColumn
prtIConnect = _PrtIConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 4),
    _PrtIConnect_Type()
)
prtIConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIConnect.setStatus("mandatory")
_PrtHdsl_ObjectIdentity = ObjectIdentity
prtHdsl = _PrtHdsl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7)
)
_PrtHdslTable_Object = MibTable
prtHdslTable = _PrtHdslTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1)
)
if mibBuilder.loadTexts:
    prtHdslTable.setStatus("mandatory")
_PrtHdslEntry_Object = MibTableRow
prtHdslEntry = _PrtHdslEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1)
)
prtHdslEntry.setIndexNames(
    (0, "DACS-MIB", "prtHdslIdx"),
)
if mibBuilder.loadTexts:
    prtHdslEntry.setStatus("mandatory")
_PrtHdslIdx_Type = Integer32
_PrtHdslIdx_Object = MibTableColumn
prtHdslIdx = _PrtHdslIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 1),
    _PrtHdslIdx_Type()
)
prtHdslIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHdslIdx.setStatus("mandatory")


class _PrtHdslMode_Type(Integer32):
    """Custom type prtHdslMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("central", 2),
          ("notApplicable", 1),
          ("remote", 3))
    )


_PrtHdslMode_Type.__name__ = "Integer32"
_PrtHdslMode_Object = MibTableColumn
prtHdslMode = _PrtHdslMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 2),
    _PrtHdslMode_Type()
)
prtHdslMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHdslMode.setStatus("mandatory")


class _PrtHdslRptrType_Type(Integer32):
    """Custom type prtHdslRptrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hrpt", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtHdslRptrType_Type.__name__ = "Integer32"
_PrtHdslRptrType_Object = MibTableColumn
prtHdslRptrType = _PrtHdslRptrType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 3),
    _PrtHdslRptrType_Type()
)
prtHdslRptrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHdslRptrType.setStatus("mandatory")
_PrtT3E3_ObjectIdentity = ObjectIdentity
prtT3E3 = _PrtT3E3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8)
)
_PrtT3E3CnfgTable_Object = MibTable
prtT3E3CnfgTable = _PrtT3E3CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1)
)
if mibBuilder.loadTexts:
    prtT3E3CnfgTable.setStatus("mandatory")
_PrtT3E3CnfgEntry_Object = MibTableRow
prtT3E3CnfgEntry = _PrtT3E3CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1)
)
prtT3E3CnfgEntry.setIndexNames(
    (0, "DACS-MIB", "prtT3E3CnfgIdx"),
    (0, "DACS-MIB", "prtT3E3PrtIdx"),
)
if mibBuilder.loadTexts:
    prtT3E3CnfgEntry.setStatus("mandatory")


class _PrtT3E3CnfgIdx_Type(Integer32):
    """Custom type prtT3E3CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtT3E3CnfgIdx_Type.__name__ = "Integer32"
_PrtT3E3CnfgIdx_Object = MibTableColumn
prtT3E3CnfgIdx = _PrtT3E3CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 1),
    _PrtT3E3CnfgIdx_Type()
)
prtT3E3CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT3E3CnfgIdx.setStatus("mandatory")
_PrtT3E3PrtIdx_Type = Integer32
_PrtT3E3PrtIdx_Object = MibTableColumn
prtT3E3PrtIdx = _PrtT3E3PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 2),
    _PrtT3E3PrtIdx_Type()
)
prtT3E3PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT3E3PrtIdx.setStatus("mandatory")


class _PrtT3E3Slt_Type(Integer32):
    """Custom type prtT3E3Slt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtT3E3Slt_Type.__name__ = "Integer32"
_PrtT3E3Slt_Object = MibTableColumn
prtT3E3Slt = _PrtT3E3Slt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 3),
    _PrtT3E3Slt_Type()
)
prtT3E3Slt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT3E3Slt.setStatus("mandatory")


class _PrtT3E3LineLength_Type(Integer32):
    """Custom type prtT3E3LineLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("len0p450ft", 2),
          ("len451p900ft", 3),
          ("notApplicable", 1))
    )


_PrtT3E3LineLength_Type.__name__ = "Integer32"
_PrtT3E3LineLength_Object = MibTableColumn
prtT3E3LineLength = _PrtT3E3LineLength_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 4),
    _PrtT3E3LineLength_Type()
)
prtT3E3LineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT3E3LineLength.setStatus("mandatory")


class _PrtT3E3InbandMng_Type(Integer32):
    """Custom type prtT3E3InbandMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cBit", 3),
          ("cBitTx", 5),
          ("cBitTxMng", 6),
          ("cBitTxRxMng", 4),
          ("m13", 7),
          ("notApplicable", 1),
          ("off", 2))
    )


_PrtT3E3InbandMng_Type.__name__ = "Integer32"
_PrtT3E3InbandMng_Object = MibTableColumn
prtT3E3InbandMng = _PrtT3E3InbandMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 5),
    _PrtT3E3InbandMng_Type()
)
prtT3E3InbandMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT3E3InbandMng.setStatus("mandatory")
_GenDacsMux_ObjectIdentity = ObjectIdentity
genDacsMux = _GenDacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4)
)
_CmprTable_Object = MibTable
cmprTable = _CmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1)
)
if mibBuilder.loadTexts:
    cmprTable.setStatus("mandatory")
_CmprEntry_Object = MibTableRow
cmprEntry = _CmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1)
)
cmprEntry.setIndexNames(
    (0, "DACS-MIB", "cmprTypeIdx"),
    (0, "DACS-MIB", "cmprCnfgIdx"),
    (0, "DACS-MIB", "cmprVersion"),
    (0, "DACS-MIB", "cmprSltIdx"),
    (0, "DACS-MIB", "cmprPrtIdx"),
)
if mibBuilder.loadTexts:
    cmprEntry.setStatus("mandatory")
_CmprTypeIdx_Type = Integer32
_CmprTypeIdx_Object = MibTableColumn
cmprTypeIdx = _CmprTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 1),
    _CmprTypeIdx_Type()
)
cmprTypeIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprTypeIdx.setStatus("mandatory")
_CmprCnfgIdx_Type = Integer32
_CmprCnfgIdx_Object = MibTableColumn
cmprCnfgIdx = _CmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 2),
    _CmprCnfgIdx_Type()
)
cmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprCnfgIdx.setStatus("mandatory")
_CmprVersion_Type = Integer32
_CmprVersion_Object = MibTableColumn
cmprVersion = _CmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 3),
    _CmprVersion_Type()
)
cmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprVersion.setStatus("mandatory")


class _CmprSltIdx_Type(Integer32):
    """Custom type cmprSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_CmprSltIdx_Type.__name__ = "Integer32"
_CmprSltIdx_Object = MibTableColumn
cmprSltIdx = _CmprSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 4),
    _CmprSltIdx_Type()
)
cmprSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprSltIdx.setStatus("mandatory")
_CmprPrtIdx_Type = Integer32
_CmprPrtIdx_Object = MibTableColumn
cmprPrtIdx = _CmprPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 5),
    _CmprPrtIdx_Type()
)
cmprPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprPrtIdx.setStatus("mandatory")
_CmprObj_Type = OctetString
_CmprObj_Object = MibTableColumn
cmprObj = _CmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 6),
    _CmprObj_Type()
)
cmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cmprObj.setStatus("mandatory")
_MapLinkTable_Object = MibTable
mapLinkTable = _MapLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2)
)
if mibBuilder.loadTexts:
    mapLinkTable.setStatus("mandatory")
_MapLinkEntry_Object = MibTableRow
mapLinkEntry = _MapLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1)
)
mapLinkEntry.setIndexNames(
    (0, "DACS-MIB", "mapLinkIdx"),
)
if mibBuilder.loadTexts:
    mapLinkEntry.setStatus("mandatory")
_MapLinkIdx_Type = Integer32
_MapLinkIdx_Object = MibTableColumn
mapLinkIdx = _MapLinkIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 1),
    _MapLinkIdx_Type()
)
mapLinkIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mapLinkIdx.setStatus("mandatory")


class _MapLinkSlotIdx_Type(Integer32):
    """Custom type mapLinkSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_MapLinkSlotIdx_Type.__name__ = "Integer32"
_MapLinkSlotIdx_Object = MibTableColumn
mapLinkSlotIdx = _MapLinkSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 2),
    _MapLinkSlotIdx_Type()
)
mapLinkSlotIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mapLinkSlotIdx.setStatus("mandatory")
_MapLinkPortIdx_Type = Integer32
_MapLinkPortIdx_Object = MibTableColumn
mapLinkPortIdx = _MapLinkPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 3),
    _MapLinkPortIdx_Type()
)
mapLinkPortIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mapLinkPortIdx.setStatus("mandatory")


class _MapLinkState_Type(Integer32):
    """Custom type mapLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 1),
          ("up", 3))
    )


_MapLinkState_Type.__name__ = "Integer32"
_MapLinkState_Object = MibTableColumn
mapLinkState = _MapLinkState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 4),
    _MapLinkState_Type()
)
mapLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mapLinkState.setStatus("mandatory")
_AlrGenTable_Object = MibTable
alrGenTable = _AlrGenTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3)
)
if mibBuilder.loadTexts:
    alrGenTable.setStatus("mandatory")
_AlrGenEntry_Object = MibTableRow
alrGenEntry = _AlrGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1)
)
alrGenEntry.setIndexNames(
    (0, "DACS-MIB", "alrGenCode"),
)
if mibBuilder.loadTexts:
    alrGenEntry.setStatus("mandatory")
_AlrGenCode_Type = Integer32
_AlrGenCode_Object = MibTableColumn
alrGenCode = _AlrGenCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 1),
    _AlrGenCode_Type()
)
alrGenCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenCode.setStatus("mandatory")


class _AlrGenDescription_Type(DisplayString):
    """Custom type alrGenDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AlrGenDescription_Type.__name__ = "DisplayString"
_AlrGenDescription_Object = MibTableColumn
alrGenDescription = _AlrGenDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 2),
    _AlrGenDescription_Type()
)
alrGenDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenDescription.setStatus("mandatory")


class _AlrGenLevel_Type(Integer32):
    """Custom type alrGenLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("card", 3),
          ("notApplicable", 1),
          ("port", 4),
          ("system", 2))
    )


_AlrGenLevel_Type.__name__ = "Integer32"
_AlrGenLevel_Object = MibTableColumn
alrGenLevel = _AlrGenLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 3),
    _AlrGenLevel_Type()
)
alrGenLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenLevel.setStatus("mandatory")


class _AlrGenSlotType_Type(Integer32):
    """Custom type alrGenSlotType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("clAndIo", 5),
          ("io", 4),
          ("notApplicable", 1),
          ("ps", 2))
    )


_AlrGenSlotType_Type.__name__ = "Integer32"
_AlrGenSlotType_Object = MibTableColumn
alrGenSlotType = _AlrGenSlotType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 4),
    _AlrGenSlotType_Type()
)
alrGenSlotType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenSlotType.setStatus("mandatory")


class _AlrGenSeverity_Type(Integer32):
    """Custom type alrGenSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("major", 5),
          ("minor", 4),
          ("notApplicable", 1))
    )


_AlrGenSeverity_Type.__name__ = "Integer32"
_AlrGenSeverity_Object = MibTableColumn
alrGenSeverity = _AlrGenSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 5),
    _AlrGenSeverity_Type()
)
alrGenSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrGenSeverity.setStatus("mandatory")


class _AlrGenDebounce_Type(Integer32):
    """Custom type alrGenDebounce based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AlrGenDebounce_Type.__name__ = "Integer32"
_AlrGenDebounce_Object = MibTableColumn
alrGenDebounce = _AlrGenDebounce_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 6),
    _AlrGenDebounce_Type()
)
alrGenDebounce.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrGenDebounce.setStatus("mandatory")
_RadBridges_ObjectIdentity = ObjectIdentity
radBridges = _RadBridges_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4)
)
_RadConverters_ObjectIdentity = ObjectIdentity
radConverters = _RadConverters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 5)
)
_RadGen_ObjectIdentity = ObjectIdentity
radGen = _RadGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6)
)
_Systems_ObjectIdentity = ObjectIdentity
systems = _Systems_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1)
)
_RadSysTR_ObjectIdentity = ObjectIdentity
radSysTR = _RadSysTR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 1)
)
_RadRADring_ObjectIdentity = ObjectIdentity
radRADring = _RadRADring_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 1)
)
_RadTMA_ObjectIdentity = ObjectIdentity
radTMA = _RadTMA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 2)
)
_RadRingMonitor_ObjectIdentity = ObjectIdentity
radRingMonitor = _RadRingMonitor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 3)
)
_RadSysFddi_ObjectIdentity = ObjectIdentity
radSysFddi = _RadSysFddi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 2)
)
_RadFDX100_ObjectIdentity = ObjectIdentity
radFDX100 = _RadFDX100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 2, 1)
)
_RadSysWan_ObjectIdentity = ObjectIdentity
radSysWan = _RadSysWan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3)
)
_RadMP2100_ObjectIdentity = ObjectIdentity
radMP2100 = _RadMP2100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 1)
)
_RadMP2104_ObjectIdentity = ObjectIdentity
radMP2104 = _RadMP2104_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 2)
)
_RadMP2100B_ObjectIdentity = ObjectIdentity
radMP2100B = _RadMP2100B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 3)
)
_RadMP2100F_ObjectIdentity = ObjectIdentity
radMP2100F = _RadMP2100F_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 4)
)
_RadMP2100H_ObjectIdentity = ObjectIdentity
radMP2100H = _RadMP2100H_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 5)
)
_RadMP2104H_ObjectIdentity = ObjectIdentity
radMP2104H = _RadMP2104H_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 6)
)
_RadMP2200B_ObjectIdentity = ObjectIdentity
radMP2200B = _RadMP2200B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 7)
)
_RadMP2200F_ObjectIdentity = ObjectIdentity
radMP2200F = _RadMP2200F_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 8)
)
_RadMX3000_ObjectIdentity = ObjectIdentity
radMX3000 = _RadMX3000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 9)
)
_RadMX3004_ObjectIdentity = ObjectIdentity
radMX3004 = _RadMX3004_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 10)
)
_RadMX30_ObjectIdentity = ObjectIdentity
radMX30 = _RadMX30_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 11)
)
_RadMX300_ObjectIdentity = ObjectIdentity
radMX300 = _RadMX300_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 12)
)
_RadVOIP_ObjectIdentity = ObjectIdentity
radVOIP = _RadVOIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 13)
)
_RadKM2100_ObjectIdentity = ObjectIdentity
radKM2100 = _RadKM2100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 15)
)
_RadKM2104_ObjectIdentity = ObjectIdentity
radKM2104 = _RadKM2104_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 16)
)
_RadDXC30_ObjectIdentity = ObjectIdentity
radDXC30 = _RadDXC30_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 20)
)
_RadDXC10A_ObjectIdentity = ObjectIdentity
radDXC10A = _RadDXC10A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 21)
)
_RadDXC8R_ObjectIdentity = ObjectIdentity
radDXC8R = _RadDXC8R_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 22)
)
_RadDXC30E_ObjectIdentity = ObjectIdentity
radDXC30E = _RadDXC30E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 23)
)
_RadFcdT1_ObjectIdentity = ObjectIdentity
radFcdT1 = _RadFcdT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 30)
)
_RadFcdE1_ObjectIdentity = ObjectIdentity
radFcdE1 = _RadFcdE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 31)
)
_RadFcdE1I_ObjectIdentity = ObjectIdentity
radFcdE1I = _RadFcdE1I_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 32)
)
_RadFcdT1M_ObjectIdentity = ObjectIdentity
radFcdT1M = _RadFcdT1M_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 33)
)
_RadFcdE1M_ObjectIdentity = ObjectIdentity
radFcdE1M = _RadFcdE1M_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 34)
)
_RadFcdIP_ObjectIdentity = ObjectIdentity
radFcdIP = _RadFcdIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 35)
)
_RadFcdT1A_ObjectIdentity = ObjectIdentity
radFcdT1A = _RadFcdT1A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 36)
)
_RadFcdE1A_ObjectIdentity = ObjectIdentity
radFcdE1A = _RadFcdE1A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 37)
)
_RadFcdW_ObjectIdentity = ObjectIdentity
radFcdW = _RadFcdW_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 38)
)
_RadHtuE1Sa_ObjectIdentity = ObjectIdentity
radHtuE1Sa = _RadHtuE1Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 40)
)
_RadHtuE1_ObjectIdentity = ObjectIdentity
radHtuE1 = _RadHtuE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 41)
)
_RadHtu2Sa_ObjectIdentity = ObjectIdentity
radHtu2Sa = _RadHtu2Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 42)
)
_RadHtu2_ObjectIdentity = ObjectIdentity
radHtu2 = _RadHtu2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 43)
)
_RadAsmi450R768Sa_ObjectIdentity = ObjectIdentity
radAsmi450R768Sa = _RadAsmi450R768Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 44)
)
_RadAsmi450R768_ObjectIdentity = ObjectIdentity
radAsmi450R768 = _RadAsmi450R768_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 45)
)
_RadAsmi450R1152Sa_ObjectIdentity = ObjectIdentity
radAsmi450R1152Sa = _RadAsmi450R1152Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 46)
)
_RadAsmi450R1152_ObjectIdentity = ObjectIdentity
radAsmi450R1152 = _RadAsmi450R1152_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 47)
)
_RadLrs12F_ObjectIdentity = ObjectIdentity
radLrs12F = _RadLrs12F_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 48)
)
_RadLrs12B_ObjectIdentity = ObjectIdentity
radLrs12B = _RadLrs12B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 49)
)
_RadHcdE1Sa_ObjectIdentity = ObjectIdentity
radHcdE1Sa = _RadHcdE1Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 51)
)
_RadHcdE1_ObjectIdentity = ObjectIdentity
radHcdE1 = _RadHcdE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 52)
)
_RadHtuT1Sa_ObjectIdentity = ObjectIdentity
radHtuT1Sa = _RadHtuT1Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 53)
)
_RadHtuT1_ObjectIdentity = ObjectIdentity
radHtuT1 = _RadHtuT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 54)
)
_RadOptimux4E1_ObjectIdentity = ObjectIdentity
radOptimux4E1 = _RadOptimux4E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 55)
)
_RadOptimux4T1_ObjectIdentity = ObjectIdentity
radOptimux4T1 = _RadOptimux4T1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 56)
)
_RadOptimuxXLE1_ObjectIdentity = ObjectIdentity
radOptimuxXLE1 = _RadOptimuxXLE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 57)
)
_RadOptimuxXLT1_ObjectIdentity = ObjectIdentity
radOptimuxXLT1 = _RadOptimuxXLT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 58)
)
_RadOptimuxXL16E1_ObjectIdentity = ObjectIdentity
radOptimuxXL16E1 = _RadOptimuxXL16E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 59)
)
_RadImx64_ObjectIdentity = ObjectIdentity
radImx64 = _RadImx64_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 60)
)
_RadImx6L_ObjectIdentity = ObjectIdentity
radImx6L = _RadImx6L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 61)
)
_RadImx2_ObjectIdentity = ObjectIdentity
radImx2 = _RadImx2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 62)
)
_RadImx4T1_ObjectIdentity = ObjectIdentity
radImx4T1 = _RadImx4T1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 63)
)
_RadImx4E1_ObjectIdentity = ObjectIdentity
radImx4E1 = _RadImx4E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 64)
)
_RadImx2T1E1_ObjectIdentity = ObjectIdentity
radImx2T1E1 = _RadImx2T1E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 65)
)
_RadHtuE1SaV2_ObjectIdentity = ObjectIdentity
radHtuE1SaV2 = _RadHtuE1SaV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 70)
)
_RadHtuE1V2_ObjectIdentity = ObjectIdentity
radHtuE1V2 = _RadHtuE1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 71)
)
_RadFomiE3_ObjectIdentity = ObjectIdentity
radFomiE3 = _RadFomiE3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 72)
)
_RadFomiT3_ObjectIdentity = ObjectIdentity
radFomiT3 = _RadFomiT3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 73)
)
_RadOpt4E1C_ObjectIdentity = ObjectIdentity
radOpt4E1C = _RadOpt4E1C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 74)
)
_RadOpt4T1C_ObjectIdentity = ObjectIdentity
radOpt4T1C = _RadOpt4T1C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 75)
)
_RadPrbiE3_ObjectIdentity = ObjectIdentity
radPrbiE3 = _RadPrbiE3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 76)
)
_RadPrbiT3_ObjectIdentity = ObjectIdentity
radPrbiT3 = _RadPrbiT3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 77)
)
_RadHcd4Sa_ObjectIdentity = ObjectIdentity
radHcd4Sa = _RadHcd4Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 78)
)
_RadFRmon_ObjectIdentity = ObjectIdentity
radFRmon = _RadFRmon_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 80)
)
_RadSysBRG_ObjectIdentity = ObjectIdentity
radSysBRG = _RadSysBRG_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4)
)
_RadTRE1_ObjectIdentity = ObjectIdentity
radTRE1 = _RadTRE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 1)
)
_RadTRE1D_ObjectIdentity = ObjectIdentity
radTRE1D = _RadTRE1D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 2)
)
_RadTRE8_ObjectIdentity = ObjectIdentity
radTRE8 = _RadTRE8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 3)
)
_RadTRE8D_ObjectIdentity = ObjectIdentity
radTRE8D = _RadTRE8D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 4)
)
_RadMBE1_ObjectIdentity = ObjectIdentity
radMBE1 = _RadMBE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 5)
)
_RadMBE1D_ObjectIdentity = ObjectIdentity
radMBE1D = _RadMBE1D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 6)
)
_RadMBE8_ObjectIdentity = ObjectIdentity
radMBE8 = _RadMBE8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 7)
)
_RadMBE8D_ObjectIdentity = ObjectIdentity
radMBE8D = _RadMBE8D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 8)
)
_RadMLBT_ObjectIdentity = ObjectIdentity
radMLBT = _RadMLBT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 9)
)
_RadFEB4DAS_ObjectIdentity = ObjectIdentity
radFEB4DAS = _RadFEB4DAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 10)
)
_RadTrimBrg10_ObjectIdentity = ObjectIdentity
radTrimBrg10 = _RadTrimBrg10_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 11)
)
_RadTrimBrg16_ObjectIdentity = ObjectIdentity
radTrimBrg16 = _RadTrimBrg16_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 12)
)
_RadRRTRE8_ObjectIdentity = ObjectIdentity
radRRTRE8 = _RadRRTRE8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 13)
)
_RadRRTRE8D_ObjectIdentity = ObjectIdentity
radRRTRE8D = _RadRRTRE8D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 14)
)
_RadRRMLBT_ObjectIdentity = ObjectIdentity
radRRMLBT = _RadRRMLBT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 15)
)
_RadRRMLBTF_ObjectIdentity = ObjectIdentity
radRRMLBTF = _RadRRMLBTF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 16)
)
_RadRRTRE1D_ObjectIdentity = ObjectIdentity
radRRTRE1D = _RadRRTRE1D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 17)
)
_RadTRERAS_ObjectIdentity = ObjectIdentity
radTRERAS = _RadTRERAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 18)
)
_RadTRERASa_ObjectIdentity = ObjectIdentity
radTRERASa = _RadTRERASa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 19)
)
_RadMBERAS_ObjectIdentity = ObjectIdentity
radMBERAS = _RadMBERAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 20)
)
_RadMBERASa_ObjectIdentity = ObjectIdentity
radMBERASa = _RadMBERASa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 21)
)
_RadFEB4FDX_ObjectIdentity = ObjectIdentity
radFEB4FDX = _RadFEB4FDX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 22)
)
_RadFEB4SAS_ObjectIdentity = ObjectIdentity
radFEB4SAS = _RadFEB4SAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 23)
)
_RadRRFTBDAS_ObjectIdentity = ObjectIdentity
radRRFTBDAS = _RadRRFTBDAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 24)
)
_RadRRFTBSAS_ObjectIdentity = ObjectIdentity
radRRFTBSAS = _RadRRFTBSAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 25)
)
_RadFTBDAS_ObjectIdentity = ObjectIdentity
radFTBDAS = _RadFTBDAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 26)
)
_RadFTBSAS_ObjectIdentity = ObjectIdentity
radFTBSAS = _RadFTBSAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 27)
)
_RadFastWay100_ObjectIdentity = ObjectIdentity
radFastWay100 = _RadFastWay100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 28)
)
_RadSysCnvrtr_ObjectIdentity = ObjectIdentity
radSysCnvrtr = _RadSysCnvrtr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5)
)
_RadSTC1_ObjectIdentity = ObjectIdentity
radSTC1 = _RadSTC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 1)
)
_RadSTC2_ObjectIdentity = ObjectIdentity
radSTC2 = _RadSTC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 3)
)
_RadSTC1UDP_ObjectIdentity = ObjectIdentity
radSTC1UDP = _RadSTC1UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 4)
)
_RadSTC2UDP_ObjectIdentity = ObjectIdentity
radSTC2UDP = _RadSTC2UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 6)
)
_RadFTC1_ObjectIdentity = ObjectIdentity
radFTC1 = _RadFTC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 10)
)
_RadFTC2_ObjectIdentity = ObjectIdentity
radFTC2 = _RadFTC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 12)
)
_RadFTC1UDP_ObjectIdentity = ObjectIdentity
radFTC1UDP = _RadFTC1UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 13)
)
_RadFTC2UDP_ObjectIdentity = ObjectIdentity
radFTC2UDP = _RadFTC2UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 15)
)
_RadSEC1_ObjectIdentity = ObjectIdentity
radSEC1 = _RadSEC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 20)
)
_RadSEC2_ObjectIdentity = ObjectIdentity
radSEC2 = _RadSEC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 22)
)
_RadSEC1UDP_ObjectIdentity = ObjectIdentity
radSEC1UDP = _RadSEC1UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 23)
)
_RadSEC2UDP_ObjectIdentity = ObjectIdentity
radSEC2UDP = _RadSEC2UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 25)
)
_RadFEC1_ObjectIdentity = ObjectIdentity
radFEC1 = _RadFEC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 30)
)
_RadFEC2_ObjectIdentity = ObjectIdentity
radFEC2 = _RadFEC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 32)
)
_RadFEC1UDP_ObjectIdentity = ObjectIdentity
radFEC1UDP = _RadFEC1UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 33)
)
_RadFEC2UDP_ObjectIdentity = ObjectIdentity
radFEC2UDP = _RadFEC2UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 35)
)
_RadSysStkHub_ObjectIdentity = ObjectIdentity
radSysStkHub = _RadSysStkHub_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7)
)
_RadRBHE_ObjectIdentity = ObjectIdentity
radRBHE = _RadRBHE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 1)
)
_RadRBHT_ObjectIdentity = ObjectIdentity
radRBHT = _RadRBHT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 2)
)
_RadETS4fddiDAS_ObjectIdentity = ObjectIdentity
radETS4fddiDAS = _RadETS4fddiDAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 3)
)
_RadETS4fddiSAS_ObjectIdentity = ObjectIdentity
radETS4fddiSAS = _RadETS4fddiSAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 4)
)
_RadSAHEMX_ObjectIdentity = ObjectIdentity
radSAHEMX = _RadSAHEMX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 5)
)
_RadSAHTM_ObjectIdentity = ObjectIdentity
radSAHTM = _RadSAHTM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 6)
)
_RadETS4_ObjectIdentity = ObjectIdentity
radETS4 = _RadETS4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 7)
)
_RadSAHEMU_ObjectIdentity = ObjectIdentity
radSAHEMU = _RadSAHEMU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 8)
)
_Unknown_ObjectIdentity = ObjectIdentity
unknown = _Unknown_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 9)
)
_RadSAH16Eint_ObjectIdentity = ObjectIdentity
radSAH16Eint = _RadSAH16Eint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 10)
)
_RadSAH16Tint_ObjectIdentity = ObjectIdentity
radSAH16Tint = _RadSAH16Tint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 11)
)
_RadSAH16Eext_ObjectIdentity = ObjectIdentity
radSAH16Eext = _RadSAH16Eext_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 12)
)
_RadSAH16Text_ObjectIdentity = ObjectIdentity
radSAH16Text = _RadSAH16Text_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 13)
)
_RadSysPS_ObjectIdentity = ObjectIdentity
radSysPS = _RadSysPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8)
)
_RadSPS2_ObjectIdentity = ObjectIdentity
radSPS2 = _RadSPS2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 1)
)
_RadSPS3_ObjectIdentity = ObjectIdentity
radSPS3 = _RadSPS3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 2)
)
_RadSPS6_ObjectIdentity = ObjectIdentity
radSPS6 = _RadSPS6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 3)
)
_RadSPS9_ObjectIdentity = ObjectIdentity
radSPS9 = _RadSPS9_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 4)
)
_RadSPS12_ObjectIdentity = ObjectIdentity
radSPS12 = _RadSPS12_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 5)
)
_RadAPD2_ObjectIdentity = ObjectIdentity
radAPD2 = _RadAPD2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 6)
)
_RadAPD8_ObjectIdentity = ObjectIdentity
radAPD8 = _RadAPD8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 7)
)
_RadAPS8_ObjectIdentity = ObjectIdentity
radAPS8 = _RadAPS8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 8)
)
_RadAPS16_ObjectIdentity = ObjectIdentity
radAPS16 = _RadAPS16_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 9)
)
_RadAPS24_ObjectIdentity = ObjectIdentity
radAPS24 = _RadAPS24_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 10)
)
_RadSPS3S_ObjectIdentity = ObjectIdentity
radSPS3S = _RadSPS3S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 11)
)
_RadFPS8_ObjectIdentity = ObjectIdentity
radFPS8 = _RadFPS8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 12)
)
_RadFPS12_ObjectIdentity = ObjectIdentity
radFPS12 = _RadFPS12_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 13)
)
_RadSPS3ScSL_ObjectIdentity = ObjectIdentity
radSPS3ScSL = _RadSPS3ScSL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 14)
)
_RadSPS3Sc2S_ObjectIdentity = ObjectIdentity
radSPS3Sc2S = _RadSPS3Sc2S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 15)
)
_RadFPS8c_ObjectIdentity = ObjectIdentity
radFPS8c = _RadFPS8c_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 16)
)
_RadFPS4_ObjectIdentity = ObjectIdentity
radFPS4 = _RadFPS4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 17)
)
_RadSysEth_ObjectIdentity = ObjectIdentity
radSysEth = _RadSysEth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9)
)
_RadEP8T_ObjectIdentity = ObjectIdentity
radEP8T = _RadEP8T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 1)
)
_RadEP4TAUI_ObjectIdentity = ObjectIdentity
radEP4TAUI = _RadEP4TAUI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 2)
)
_RadEP4T2FL_ObjectIdentity = ObjectIdentity
radEP4T2FL = _RadEP4T2FL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 3)
)
_RadEP4TFL_ObjectIdentity = ObjectIdentity
radEP4TFL = _RadEP4TFL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 4)
)
_RadEP4FL_ObjectIdentity = ObjectIdentity
radEP4FL = _RadEP4FL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 5)
)
_RadEPR8T_ObjectIdentity = ObjectIdentity
radEPR8T = _RadEPR8T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 7)
)
_RadEPR4TAUI_ObjectIdentity = ObjectIdentity
radEPR4TAUI = _RadEPR4TAUI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 8)
)
_RadEPR4T2FL_ObjectIdentity = ObjectIdentity
radEPR4T2FL = _RadEPR4T2FL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 9)
)
_RadEPR4TFL_ObjectIdentity = ObjectIdentity
radEPR4TFL = _RadEPR4TFL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 10)
)
_RadEPR4FL_ObjectIdentity = ObjectIdentity
radEPR4FL = _RadEPR4FL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 11)
)
_RadSysRtr_ObjectIdentity = ObjectIdentity
radSysRtr = _RadSysRtr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11)
)
_RadRTED_ObjectIdentity = ObjectIdentity
radRTED = _RadRTED_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 1)
)
_RadRTEM_ObjectIdentity = ObjectIdentity
radRTEM = _RadRTEM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 2)
)
_RadRTEC_ObjectIdentity = ObjectIdentity
radRTEC = _RadRTEC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 3)
)
_RadWebRanger_ObjectIdentity = ObjectIdentity
radWebRanger = _RadWebRanger_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 4)
)
_RadTinyRouter_ObjectIdentity = ObjectIdentity
radTinyRouter = _RadTinyRouter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 5)
)
_RadSysAtm_ObjectIdentity = ObjectIdentity
radSysAtm = _RadSysAtm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12)
)
_RadStarSwitch_ObjectIdentity = ObjectIdentity
radStarSwitch = _RadStarSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1)
)
_RadStarSwitchATM25_ObjectIdentity = ObjectIdentity
radStarSwitchATM25 = _RadStarSwitchATM25_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 1)
)
_RadStarSwitchATM25L_ObjectIdentity = ObjectIdentity
radStarSwitchATM25L = _RadStarSwitchATM25L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 2)
)
_RadStarSwitchATM155_ObjectIdentity = ObjectIdentity
radStarSwitchATM155 = _RadStarSwitchATM155_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 3)
)
_RadAtmCsuDsu_ObjectIdentity = ObjectIdentity
radAtmCsuDsu = _RadAtmCsuDsu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2)
)
_RadAmcdE1_ObjectIdentity = ObjectIdentity
radAmcdE1 = _RadAmcdE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 1)
)
_RadAmcdT1_ObjectIdentity = ObjectIdentity
radAmcdT1 = _RadAmcdT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 2)
)
_RadAce20E_ObjectIdentity = ObjectIdentity
radAce20E = _RadAce20E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 3)
)
_RadAce20T_ObjectIdentity = ObjectIdentity
radAce20T = _RadAce20T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 4)
)
_RadAce2005_ObjectIdentity = ObjectIdentity
radAce2005 = _RadAce2005_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 5)
)
_RadAce2002_ObjectIdentity = ObjectIdentity
radAce2002 = _RadAce2002_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 6)
)
_RadAce2E_ObjectIdentity = ObjectIdentity
radAce2E = _RadAce2E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 8)
)
_RadAce2T_ObjectIdentity = ObjectIdentity
radAce2T = _RadAce2T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 9)
)
_RadAce_ObjectIdentity = ObjectIdentity
radAce = _RadAce_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3)
)
_RadAce101_ObjectIdentity = ObjectIdentity
radAce101 = _RadAce101_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 1)
)
_RadAce102_ObjectIdentity = ObjectIdentity
radAce102 = _RadAce102_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 2)
)
_Agnt_ObjectIdentity = ObjectIdentity
agnt = _Agnt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2)
)
_AgnHwVersion_Type = DisplayString
_AgnHwVersion_Object = MibScalar
agnHwVersion = _AgnHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 1),
    _AgnHwVersion_Type()
)
agnHwVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnHwVersion.setStatus("mandatory")
_AgnTrapMask_Type = Integer32
_AgnTrapMask_Object = MibScalar
agnTrapMask = _AgnTrapMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 2),
    _AgnTrapMask_Type()
)
agnTrapMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTrapMask.setStatus("mandatory")
_AgnTrapValue_Type = OctetString
_AgnTrapValue_Object = MibScalar
agnTrapValue = _AgnTrapValue_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 3),
    _AgnTrapValue_Type()
)
agnTrapValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTrapValue.setStatus("deprecated")
_AgnChangeCnt_Type = Counter32
_AgnChangeCnt_Object = MibScalar
agnChangeCnt = _AgnChangeCnt_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 4),
    _AgnChangeCnt_Type()
)
agnChangeCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnChangeCnt.setStatus("mandatory")
_AgnSpecific_Type = ObjectIdentifier
_AgnSpecific_Object = MibScalar
agnSpecific = _AgnSpecific_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 5),
    _AgnSpecific_Type()
)
agnSpecific.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSpecific.setStatus("mandatory")
_AgnConfigMsg_Type = OctetString
_AgnConfigMsg_Object = MibScalar
agnConfigMsg = _AgnConfigMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 6),
    _AgnConfigMsg_Type()
)
agnConfigMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnConfigMsg.setStatus("mandatory")
_MngTrapIpTable_Object = MibTable
mngTrapIpTable = _MngTrapIpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7)
)
if mibBuilder.loadTexts:
    mngTrapIpTable.setStatus("mandatory")
_MngEntry_Object = MibTableRow
mngEntry = _MngEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1)
)
mngEntry.setIndexNames(
    (0, "DACS-MIB", "mngID"),
)
if mibBuilder.loadTexts:
    mngEntry.setStatus("mandatory")
_MngID_Type = Integer32
_MngID_Object = MibTableColumn
mngID = _MngID_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 1),
    _MngID_Type()
)
mngID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mngID.setStatus("mandatory")
_MngIP_Type = IpAddress
_MngIP_Object = MibTableColumn
mngIP = _MngIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 2),
    _MngIP_Type()
)
mngIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mngIP.setStatus("mandatory")
_MngIPMask_Type = IpAddress
_MngIPMask_Object = MibTableColumn
mngIPMask = _MngIPMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 3),
    _MngIPMask_Type()
)
mngIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mngIPMask.setStatus("deprecated")
_MngTrapMask_Type = Integer32
_MngTrapMask_Object = MibTableColumn
mngTrapMask = _MngTrapMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 4),
    _MngTrapMask_Type()
)
mngTrapMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mngTrapMask.setStatus("mandatory")


class _AgnIndication_Type(Integer32):
    """Custom type agnIndication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("event", 6),
          ("faulty", 1),
          ("major", 5),
          ("minor", 4),
          ("normal", 3),
          ("warning", 2))
    )


_AgnIndication_Type.__name__ = "Integer32"
_AgnIndication_Object = MibScalar
agnIndication = _AgnIndication_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 8),
    _AgnIndication_Type()
)
agnIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnIndication.setStatus("mandatory")


class _AgnMonitorModeCmd_Type(Integer32):
    """Custom type agnMonitorModeCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_AgnMonitorModeCmd_Type.__name__ = "Integer32"
_AgnMonitorModeCmd_Object = MibScalar
agnMonitorModeCmd = _AgnMonitorModeCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 9),
    _AgnMonitorModeCmd_Type()
)
agnMonitorModeCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnMonitorModeCmd.setStatus("mandatory")
_AgnLed_Type = OctetString
_AgnLed_Object = MibScalar
agnLed = _AgnLed_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 10),
    _AgnLed_Type()
)
agnLed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnLed.setStatus("mandatory")
_TrapTable_Object = MibTable
trapTable = _TrapTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11)
)
if mibBuilder.loadTexts:
    trapTable.setStatus("mandatory")
_TrapEntry_Object = MibTableRow
trapEntry = _TrapEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1)
)
trapEntry.setIndexNames(
    (0, "DACS-MIB", "trapID"),
)
if mibBuilder.loadTexts:
    trapEntry.setStatus("mandatory")
_TrapID_Type = Integer32
_TrapID_Object = MibTableColumn
trapID = _TrapID_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 1),
    _TrapID_Type()
)
trapID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapID.setStatus("mandatory")
_TrapVal_Type = DisplayString
_TrapVal_Object = MibTableColumn
trapVal = _TrapVal_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 2),
    _TrapVal_Type()
)
trapVal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapVal.setStatus("mandatory")
_TrapTimeSinceOccurrence_Type = TimeTicks
_TrapTimeSinceOccurrence_Object = MibTableColumn
trapTimeSinceOccurrence = _TrapTimeSinceOccurrence_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 3),
    _TrapTimeSinceOccurrence_Type()
)
trapTimeSinceOccurrence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapTimeSinceOccurrence.setStatus("mandatory")
_FileTransfer_ObjectIdentity = ObjectIdentity
fileTransfer = _FileTransfer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12)
)
_FileServerIP_Type = IpAddress
_FileServerIP_Object = MibScalar
fileServerIP = _FileServerIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 1),
    _FileServerIP_Type()
)
fileServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileServerIP.setStatus("mandatory")
_FileName_Type = DisplayString
_FileName_Object = MibScalar
fileName = _FileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 2),
    _FileName_Type()
)
fileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileName.setStatus("mandatory")


class _FileTransCmd_Type(Integer32):
    """Custom type fileTransCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("coProcDwnLoad", 4),
          ("configDwnLoad", 2),
          ("configUpLoad", 3),
          ("dwnLoadUserFile", 6),
          ("noOp", 255),
          ("stateUpLoad", 5),
          ("swDwnLoad", 1),
          ("upLoadUserFile", 7))
    )


_FileTransCmd_Type.__name__ = "Integer32"
_FileTransCmd_Object = MibScalar
fileTransCmd = _FileTransCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 3),
    _FileTransCmd_Type()
)
fileTransCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileTransCmd.setStatus("mandatory")
_TftpRetryTimeOut_Type = Integer32
_TftpRetryTimeOut_Object = MibScalar
tftpRetryTimeOut = _TftpRetryTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 4),
    _TftpRetryTimeOut_Type()
)
tftpRetryTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpRetryTimeOut.setStatus("mandatory")
_TftpTotalTimeOut_Type = Integer32
_TftpTotalTimeOut_Object = MibScalar
tftpTotalTimeOut = _TftpTotalTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 5),
    _TftpTotalTimeOut_Type()
)
tftpTotalTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpTotalTimeOut.setStatus("mandatory")


class _TftpStatus_Type(Integer32):
    """Custom type tftpStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("connecting", 3),
          ("endedOk", 6),
          ("endedTimeOut", 5),
          ("error", 7),
          ("noOp", 2),
          ("transferringData", 4))
    )


_TftpStatus_Type.__name__ = "Integer32"
_TftpStatus_Object = MibScalar
tftpStatus = _TftpStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 6),
    _TftpStatus_Type()
)
tftpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpStatus.setStatus("mandatory")


class _TftpError_Type(OctetString):
    """Custom type tftpError based on OctetString"""
    defaultHexValue = "0000"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_TftpError_Type.__name__ = "OctetString"
_TftpError_Object = MibScalar
tftpError = _TftpError_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 7),
    _TftpError_Type()
)
tftpError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tftpError.setStatus("mandatory")
_FileTransferToSubSystems_Type = OctetString
_FileTransferToSubSystems_Object = MibScalar
fileTransferToSubSystems = _FileTransferToSubSystems_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 8),
    _FileTransferToSubSystems_Type()
)
fileTransferToSubSystems.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileTransferToSubSystems.setStatus("mandatory")
_FileNameWithinProduct_Type = DisplayString
_FileNameWithinProduct_Object = MibScalar
fileNameWithinProduct = _FileNameWithinProduct_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 9),
    _FileNameWithinProduct_Type()
)
fileNameWithinProduct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileNameWithinProduct.setStatus("mandatory")


class _SystemReset_Type(Integer32):
    """Custom type systemReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3),
          ("resetConfig", 4))
    )


_SystemReset_Type.__name__ = "Integer32"
_SystemReset_Object = MibScalar
systemReset = _SystemReset_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 13),
    _SystemReset_Type()
)
systemReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemReset.setStatus("mandatory")
_SystemTiming_ObjectIdentity = ObjectIdentity
systemTiming = _SystemTiming_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14)
)
_SystemDate_Type = DisplayString
_SystemDate_Object = MibScalar
systemDate = _SystemDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 1),
    _SystemDate_Type()
)
systemDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemDate.setStatus("mandatory")
_SystemTime_Type = DisplayString
_SystemTime_Object = MibScalar
systemTime = _SystemTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 2),
    _SystemTime_Type()
)
systemTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemTime.setStatus("mandatory")
_SystemPort_ObjectIdentity = ObjectIdentity
systemPort = _SystemPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15)
)
_PhysicalConnectorTable_Object = MibTable
physicalConnectorTable = _PhysicalConnectorTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1)
)
if mibBuilder.loadTexts:
    physicalConnectorTable.setStatus("mandatory")
_PhysicalConnectorEntry_Object = MibTableRow
physicalConnectorEntry = _PhysicalConnectorEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1)
)
physicalConnectorEntry.setIndexNames(
    (0, "DACS-MIB", "portIdx"),
)
if mibBuilder.loadTexts:
    physicalConnectorEntry.setStatus("mandatory")
_PortIdx_Type = Integer32
_PortIdx_Object = MibTableColumn
portIdx = _PortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 1),
    _PortIdx_Type()
)
portIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portIdx.setStatus("mandatory")


class _PhysicalConnector_Type(Integer32):
    """Custom type physicalConnector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              40,
              41,
              255)
        )
    )
    namedValues = NamedValues(
        *(("aui", 7),
          ("block4W", 41),
          ("bnc", 5),
          ("crossUtp", 9),
          ("db15", 18),
          ("db25", 17),
          ("db9", 21),
          ("eth4381", 32),
          ("ethBnc", 30),
          ("fc", 27),
          ("g703", 12),
          ("g703E1", 22),
          ("g703E1-LTU", 23),
          ("none", 255),
          ("other", 1),
          ("rj45", 10),
          ("rj45ethernet", 19),
          ("rs422", 8),
          ("rs530", 3),
          ("sc", 24),
          ("scsi26", 31),
          ("scsi50", 34),
          ("sf1", 36),
          ("sf2", 38),
          ("st", 25),
          ("stl", 26),
          ("tb5w", 28),
          ("termBlock3AndRj45", 13),
          ("termBlock5AndRj45", 20),
          ("termBlock6AndRj45", 29),
          ("terminalBlock3", 14),
          ("terminalBlock4", 37),
          ("terminalBlock5", 15),
          ("terminalBlock7", 16),
          ("twoBnc", 33),
          ("twoMiniBnc", 35),
          ("utp", 6),
          ("v24", 11),
          ("v35", 2),
          ("v36", 40),
          ("x21", 4))
    )


_PhysicalConnector_Type.__name__ = "Integer32"
_PhysicalConnector_Object = MibTableColumn
physicalConnector = _PhysicalConnector_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 2),
    _PhysicalConnector_Type()
)
physicalConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    physicalConnector.setStatus("mandatory")


class _PortOptWaveLength_Type(Integer32):
    """Custom type portOptWaveLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("nm1300", 3),
          ("nm1300Laser", 4),
          ("nm1550Laser", 5),
          ("nm850", 2),
          ("notApplicable", 1))
    )


_PortOptWaveLength_Type.__name__ = "Integer32"
_PortOptWaveLength_Object = MibTableColumn
portOptWaveLength = _PortOptWaveLength_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 3),
    _PortOptWaveLength_Type()
)
portOptWaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portOptWaveLength.setStatus("mandatory")
_PrtSupervisory_ObjectIdentity = ObjectIdentity
prtSupervisory = _PrtSupervisory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2)
)
_PrtSpTable_Object = MibTable
prtSpTable = _PrtSpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1)
)
if mibBuilder.loadTexts:
    prtSpTable.setStatus("mandatory")
_PrtSpEntry_Object = MibTableRow
prtSpEntry = _PrtSpEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1)
)
prtSpEntry.setIndexNames(
    (0, "DACS-MIB", "prtSupervisoryIndex"),
)
if mibBuilder.loadTexts:
    prtSpEntry.setStatus("mandatory")
_PrtSupervisoryIndex_Type = Integer32
_PrtSupervisoryIndex_Object = MibTableColumn
prtSupervisoryIndex = _PrtSupervisoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 1),
    _PrtSupervisoryIndex_Type()
)
prtSupervisoryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSupervisoryIndex.setStatus("mandatory")


class _PrtSupervisoryRate_Type(Integer32):
    """Custom type prtSupervisoryRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("s115200bps", 10),
          ("s1200bps", 3),
          ("s19200bps", 7),
          ("s2400bps", 4),
          ("s300bps", 2),
          ("s38400bps", 8),
          ("s4800bps", 5),
          ("s57600bps", 9),
          ("s9600bps", 6))
    )


_PrtSupervisoryRate_Type.__name__ = "Integer32"
_PrtSupervisoryRate_Object = MibTableColumn
prtSupervisoryRate = _PrtSupervisoryRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 2),
    _PrtSupervisoryRate_Type()
)
prtSupervisoryRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryRate.setStatus("mandatory")


class _PrtSupervisoryDataBits_Type(Integer32):
    """Custom type prtSupervisoryDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dataBits7", 1),
          ("dataBits8", 2))
    )


_PrtSupervisoryDataBits_Type.__name__ = "Integer32"
_PrtSupervisoryDataBits_Object = MibTableColumn
prtSupervisoryDataBits = _PrtSupervisoryDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 3),
    _PrtSupervisoryDataBits_Type()
)
prtSupervisoryDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryDataBits.setStatus("mandatory")


class _PrtSupervisoryParity_Type(Integer32):
    """Custom type prtSupervisoryParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("none", 1),
          ("odd", 2))
    )


_PrtSupervisoryParity_Type.__name__ = "Integer32"
_PrtSupervisoryParity_Object = MibTableColumn
prtSupervisoryParity = _PrtSupervisoryParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 4),
    _PrtSupervisoryParity_Type()
)
prtSupervisoryParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryParity.setStatus("mandatory")


class _PrtSupervisoryStopBits_Type(Integer32):
    """Custom type prtSupervisoryStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("stopBits1", 2),
          ("stopBits1dot5", 3),
          ("stopBits2", 4))
    )


_PrtSupervisoryStopBits_Type.__name__ = "Integer32"
_PrtSupervisoryStopBits_Object = MibTableColumn
prtSupervisoryStopBits = _PrtSupervisoryStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 5),
    _PrtSupervisoryStopBits_Type()
)
prtSupervisoryStopBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSupervisoryStopBits.setStatus("mandatory")


class _PrtSupervisoryUsage_Type(Integer32):
    """Custom type prtSupervisoryUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dialOut", 8),
          ("muxPpp", 7),
          ("muxSlip", 6),
          ("nmsPpp", 5),
          ("nmsSlip", 4),
          ("noUse", 2),
          ("terminal", 3),
          ("unknown", 1))
    )


_PrtSupervisoryUsage_Type.__name__ = "Integer32"
_PrtSupervisoryUsage_Object = MibTableColumn
prtSupervisoryUsage = _PrtSupervisoryUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 6),
    _PrtSupervisoryUsage_Type()
)
prtSupervisoryUsage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryUsage.setStatus("mandatory")


class _PrtSupervisoryInterface_Type(Integer32):
    """Custom type prtSupervisoryInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 3),
          ("notApplicable", 1))
    )


_PrtSupervisoryInterface_Type.__name__ = "Integer32"
_PrtSupervisoryInterface_Object = MibTableColumn
prtSupervisoryInterface = _PrtSupervisoryInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 7),
    _PrtSupervisoryInterface_Type()
)
prtSupervisoryInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryInterface.setStatus("mandatory")


class _PrtSupervisoryCTS_Type(Integer32):
    """Custom type prtSupervisoryCTS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dteIgnore", 5),
          ("dteWait", 4),
          ("notApplicable", 1),
          ("on", 2),
          ("rts", 3))
    )


_PrtSupervisoryCTS_Type.__name__ = "Integer32"
_PrtSupervisoryCTS_Object = MibTableColumn
prtSupervisoryCTS = _PrtSupervisoryCTS_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 8),
    _PrtSupervisoryCTS_Type()
)
prtSupervisoryCTS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryCTS.setStatus("mandatory")


class _PrtSupervisoryDcdDelay_Type(Integer32):
    """Custom type prtSupervisoryDcdDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("d0", 2),
          ("d10", 3),
          ("d100", 5),
          ("d200", 6),
          ("d300", 7),
          ("d50", 4),
          ("notApplicable", 1))
    )


_PrtSupervisoryDcdDelay_Type.__name__ = "Integer32"
_PrtSupervisoryDcdDelay_Object = MibTableColumn
prtSupervisoryDcdDelay = _PrtSupervisoryDcdDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 9),
    _PrtSupervisoryDcdDelay_Type()
)
prtSupervisoryDcdDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryDcdDelay.setStatus("mandatory")


class _PrtSupervisoryDSR_Type(Integer32):
    """Custom type prtSupervisoryDSR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dtr", 3),
          ("notApplicable", 1),
          ("on", 2))
    )


_PrtSupervisoryDSR_Type.__name__ = "Integer32"
_PrtSupervisoryDSR_Object = MibTableColumn
prtSupervisoryDSR = _PrtSupervisoryDSR_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 10),
    _PrtSupervisoryDSR_Type()
)
prtSupervisoryDSR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryDSR.setStatus("mandatory")


class _PrtSupervisoryRoutProtocol_Type(Integer32):
    """Custom type prtSupervisoryRoutProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip2", 4))
    )


_PrtSupervisoryRoutProtocol_Type.__name__ = "Integer32"
_PrtSupervisoryRoutProtocol_Object = MibTableColumn
prtSupervisoryRoutProtocol = _PrtSupervisoryRoutProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 11),
    _PrtSupervisoryRoutProtocol_Type()
)
prtSupervisoryRoutProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryRoutProtocol.setStatus("mandatory")
_PrtPerformance_ObjectIdentity = ObjectIdentity
prtPerformance = _PrtPerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3)
)
_PrtPerfTable_Object = MibTable
prtPerfTable = _PrtPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1)
)
if mibBuilder.loadTexts:
    prtPerfTable.setStatus("mandatory")
_PrtPerfEntry_Object = MibTableRow
prtPerfEntry = _PrtPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1)
)
prtPerfEntry.setIndexNames(
    (0, "DACS-MIB", "prtPerfIdx"),
    (0, "DACS-MIB", "prtPerfPeriodRef"),
)
if mibBuilder.loadTexts:
    prtPerfEntry.setStatus("mandatory")
_PrtPerfIdx_Type = Integer32
_PrtPerfIdx_Object = MibTableColumn
prtPerfIdx = _PrtPerfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 1),
    _PrtPerfIdx_Type()
)
prtPerfIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfIdx.setStatus("mandatory")


class _PrtPerfPeriodRef_Type(Integer32):
    """Custom type prtPerfPeriodRef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentPeriod", 1),
          ("lastPeriod", 2))
    )


_PrtPerfPeriodRef_Type.__name__ = "Integer32"
_PrtPerfPeriodRef_Object = MibTableColumn
prtPerfPeriodRef = _PrtPerfPeriodRef_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 2),
    _PrtPerfPeriodRef_Type()
)
prtPerfPeriodRef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfPeriodRef.setStatus("mandatory")
_PrtPerfElapsedTime_Type = Integer32
_PrtPerfElapsedTime_Object = MibTableColumn
prtPerfElapsedTime = _PrtPerfElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 3),
    _PrtPerfElapsedTime_Type()
)
prtPerfElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfElapsedTime.setStatus("mandatory")
_PrtPerfUAS_Type = Integer32
_PrtPerfUAS_Object = MibTableColumn
prtPerfUAS = _PrtPerfUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 4),
    _PrtPerfUAS_Type()
)
prtPerfUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfUAS.setStatus("mandatory")
_PrtPerfES_Type = Integer32
_PrtPerfES_Object = MibTableColumn
prtPerfES = _PrtPerfES_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 5),
    _PrtPerfES_Type()
)
prtPerfES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfES.setStatus("mandatory")
_PrtPerfSES_Type = Integer32
_PrtPerfSES_Object = MibTableColumn
prtPerfSES = _PrtPerfSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 6),
    _PrtPerfSES_Type()
)
prtPerfSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfSES.setStatus("mandatory")
_PrtPerfBBE_Type = Integer32
_PrtPerfBBE_Object = MibTableColumn
prtPerfBBE = _PrtPerfBBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 7),
    _PrtPerfBBE_Type()
)
prtPerfBBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfBBE.setStatus("mandatory")
_PrtPerfBlocksPerSec_Type = Integer32
_PrtPerfBlocksPerSec_Object = MibTableColumn
prtPerfBlocksPerSec = _PrtPerfBlocksPerSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 8),
    _PrtPerfBlocksPerSec_Type()
)
prtPerfBlocksPerSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfBlocksPerSec.setStatus("mandatory")
_PrtPerfTimeTag_Type = TimeTicks
_PrtPerfTimeTag_Object = MibTableColumn
prtPerfTimeTag = _PrtPerfTimeTag_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 9),
    _PrtPerfTimeTag_Type()
)
prtPerfTimeTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfTimeTag.setStatus("mandatory")


class _PrtPerfSaveAndResetCmd_Type(Integer32):
    """Custom type prtPerfSaveAndResetCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtPerfSaveAndResetCmd_Type.__name__ = "Integer32"
_PrtPerfSaveAndResetCmd_Object = MibTableColumn
prtPerfSaveAndResetCmd = _PrtPerfSaveAndResetCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 10),
    _PrtPerfSaveAndResetCmd_Type()
)
prtPerfSaveAndResetCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPerfSaveAndResetCmd.setStatus("mandatory")
_PrtTest_ObjectIdentity = ObjectIdentity
prtTest = _PrtTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4)
)
_PrtTestTable_Object = MibTable
prtTestTable = _PrtTestTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1)
)
if mibBuilder.loadTexts:
    prtTestTable.setStatus("mandatory")
_PrtTestEntry_Object = MibTableRow
prtTestEntry = _PrtTestEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1)
)
prtTestEntry.setIndexNames(
    (0, "DACS-MIB", "prtTestIdx"),
)
if mibBuilder.loadTexts:
    prtTestEntry.setStatus("mandatory")
_PrtTestIdx_Type = Integer32
_PrtTestIdx_Object = MibTableColumn
prtTestIdx = _PrtTestIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 1),
    _PrtTestIdx_Type()
)
prtTestIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestIdx.setStatus("mandatory")
_PrtTestCmdAndStatus_Type = Integer32
_PrtTestCmdAndStatus_Object = MibTableColumn
prtTestCmdAndStatus = _PrtTestCmdAndStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 2),
    _PrtTestCmdAndStatus_Type()
)
prtTestCmdAndStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestCmdAndStatus.setStatus("mandatory")
_PrtBertCounter_Type = Integer32
_PrtBertCounter_Object = MibTableColumn
prtBertCounter = _PrtBertCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 3),
    _PrtBertCounter_Type()
)
prtBertCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertCounter.setStatus("mandatory")


class _PrtTestInitiator_Type(Integer32):
    """Custom type prtTestInitiator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dteRouter", 4),
          ("remoteUnit", 3),
          ("unknown", 1),
          ("user", 2))
    )


_PrtTestInitiator_Type.__name__ = "Integer32"
_PrtTestInitiator_Object = MibTableColumn
prtTestInitiator = _PrtTestInitiator_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 4),
    _PrtTestInitiator_Type()
)
prtTestInitiator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestInitiator.setStatus("mandatory")
_PrtParam_ObjectIdentity = ObjectIdentity
prtParam = _PrtParam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5)
)
_PrtParamTable_Object = MibTable
prtParamTable = _PrtParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1)
)
if mibBuilder.loadTexts:
    prtParamTable.setStatus("mandatory")
_PrtParamEntry_Object = MibTableRow
prtParamEntry = _PrtParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1)
)
prtParamEntry.setIndexNames(
    (0, "DACS-MIB", "prtParamIdx"),
)
if mibBuilder.loadTexts:
    prtParamEntry.setStatus("mandatory")
_PrtParamIdx_Type = Integer32
_PrtParamIdx_Object = MibTableColumn
prtParamIdx = _PrtParamIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 1),
    _PrtParamIdx_Type()
)
prtParamIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtParamIdx.setStatus("mandatory")
_PrtControlCnfg_Type = Integer32
_PrtControlCnfg_Object = MibTableColumn
prtControlCnfg = _PrtControlCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 2),
    _PrtControlCnfg_Type()
)
prtControlCnfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtControlCnfg.setStatus("mandatory")


class _SystemResetAllStatsCmd_Type(Integer32):
    """Custom type systemResetAllStatsCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SystemResetAllStatsCmd_Type.__name__ = "Integer32"
_SystemResetAllStatsCmd_Object = MibScalar
systemResetAllStatsCmd = _SystemResetAllStatsCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 16),
    _SystemResetAllStatsCmd_Type()
)
systemResetAllStatsCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemResetAllStatsCmd.setStatus("mandatory")


class _SystemClearTablesCmd_Type(Integer32):
    """Custom type systemClearTablesCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("tempCnfgTables", 3))
    )


_SystemClearTablesCmd_Type.__name__ = "Integer32"
_SystemClearTablesCmd_Object = MibScalar
systemClearTablesCmd = _SystemClearTablesCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 17),
    _SystemClearTablesCmd_Type()
)
systemClearTablesCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemClearTablesCmd.setStatus("mandatory")
_SystemParameter_Type = Integer32
_SystemParameter_Object = MibScalar
systemParameter = _SystemParameter_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 18),
    _SystemParameter_Type()
)
systemParameter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemParameter.setStatus("mandatory")
_AgnGlobalAlarmMask_Type = OctetString
_AgnGlobalAlarmMask_Object = MibScalar
agnGlobalAlarmMask = _AgnGlobalAlarmMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 19),
    _AgnGlobalAlarmMask_Type()
)
agnGlobalAlarmMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnGlobalAlarmMask.setStatus("mandatory")


class _AlarmSeverity_Type(Integer32):
    """Custom type alarmSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_AlarmSeverity_Type.__name__ = "Integer32"
_AlarmSeverity_Object = MibScalar
alarmSeverity = _AlarmSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 20),
    _AlarmSeverity_Type()
)
alarmSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmSeverity.setStatus("mandatory")


class _AlarmState_Type(Integer32):
    """Custom type alarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AlarmState_Type.__name__ = "Integer32"
_AlarmState_Object = MibScalar
alarmState = _AlarmState_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 21),
    _AlarmState_Type()
)
alarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmState.setStatus("mandatory")


class _AgnTestStatus_Type(Integer32):
    """Custom type agnTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnTestStatus_Type.__name__ = "Integer32"
_AgnTestStatus_Object = MibScalar
agnTestStatus = _AgnTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 22),
    _AgnTestStatus_Type()
)
agnTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTestStatus.setStatus("mandatory")


class _SystemSaveAndResetAllStatsCmd_Type(Integer32):
    """Custom type systemSaveAndResetAllStatsCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SystemSaveAndResetAllStatsCmd_Type.__name__ = "Integer32"
_SystemSaveAndResetAllStatsCmd_Object = MibScalar
systemSaveAndResetAllStatsCmd = _SystemSaveAndResetAllStatsCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 23),
    _SystemSaveAndResetAllStatsCmd_Type()
)
systemSaveAndResetAllStatsCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemSaveAndResetAllStatsCmd.setStatus("mandatory")
_SystemDefaultGateway_Type = IpAddress
_SystemDefaultGateway_Object = MibScalar
systemDefaultGateway = _SystemDefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 24),
    _SystemDefaultGateway_Type()
)
systemDefaultGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemDefaultGateway.setStatus("mandatory")
_SystemPsTable_Object = MibTable
systemPsTable = _SystemPsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25)
)
if mibBuilder.loadTexts:
    systemPsTable.setStatus("mandatory")
_SystemPsEntry_Object = MibTableRow
systemPsEntry = _SystemPsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1)
)
systemPsEntry.setIndexNames(
    (0, "DACS-MIB", "systemPsIndex1"),
    (0, "DACS-MIB", "systemPsIndex2"),
)
if mibBuilder.loadTexts:
    systemPsEntry.setStatus("mandatory")
_SystemPsIndex1_Type = Integer32
_SystemPsIndex1_Object = MibTableColumn
systemPsIndex1 = _SystemPsIndex1_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 1),
    _SystemPsIndex1_Type()
)
systemPsIndex1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPsIndex1.setStatus("mandatory")
_SystemPsIndex2_Type = Integer32
_SystemPsIndex2_Object = MibTableColumn
systemPsIndex2 = _SystemPsIndex2_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 2),
    _SystemPsIndex2_Type()
)
systemPsIndex2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPsIndex2.setStatus("mandatory")


class _SystemPsType_Type(Integer32):
    """Custom type systemPsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ac", 2),
          ("acDc", 4),
          ("dc", 3),
          ("none", 1))
    )


_SystemPsType_Type.__name__ = "Integer32"
_SystemPsType_Object = MibTableColumn
systemPsType = _SystemPsType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 3),
    _SystemPsType_Type()
)
systemPsType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPsType.setStatus("mandatory")
_RadStkHub_ObjectIdentity = ObjectIdentity
radStkHub = _RadStkHub_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 7)
)

# Managed Objects groups


# Notification objects

alarmsTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 1)
)
alarmsTrap.setObjects(
    ("DACS-MIB", "alrBufDescription")
)
if mibBuilder.loadTexts:
    alarmsTrap.setStatus(
        ""
    )

sanityTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 2)
)
sanityTrap.setObjects(
      *(("DACS-MIB", "agnSSanityCheckStatus"),
        ("DACS-MIB", "agnCSaveCnfgIdxCmd"))
)
if mibBuilder.loadTexts:
    sanityTrap.setStatus(
        ""
    )

cnfgFlipTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 3)
)
cnfgFlipTrap.setObjects(
    ("DACS-MIB", "agnSActiveCnfg")
)
if mibBuilder.loadTexts:
    cnfgFlipTrap.setStatus(
        ""
    )

flipDbChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 4)
)
if mibBuilder.loadTexts:
    flipDbChangeTrap.setStatus(
        ""
    )

statusChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 5)
)
statusChangedTrap.setObjects(
    ("DACS-MIB", "agnLed")
)
if mibBuilder.loadTexts:
    statusChangedTrap.setStatus(
        ""
    )

sanityCheckTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 1)
)
sanityCheckTrap.setObjects(
      *(("DACS-MIB", "sysSSanityCheckStatus"),
        ("DACS-MIB", "sysDbaseDownloadCnfgIdxCmd"))
)
if mibBuilder.loadTexts:
    sanityCheckTrap.setStatus(
        ""
    )

dacsMuxAlarmsTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 2)
)
if mibBuilder.loadTexts:
    dacsMuxAlarmsTrap.setStatus(
        ""
    )

mdlConnectTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 3)
)
mdlConnectTrap.setObjects(
      *(("DACS-MIB", "mdlSCardType"),
        ("DACS-MIB", "mdlSActivity"))
)
if mibBuilder.loadTexts:
    mdlConnectTrap.setStatus(
        ""
    )

sysAlrStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 4)
)
sysAlrStatusTrap.setObjects(
      *(("DACS-MIB", "sysSAlrStatusAll"),
        ("DACS-MIB", "sysSAlrStatus"))
)
if mibBuilder.loadTexts:
    sysAlrStatusTrap.setStatus(
        ""
    )

sysStatusChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 5)
)
sysStatusChangedTrap.setObjects(
    ("DACS-MIB", "agnLed")
)
if mibBuilder.loadTexts:
    sysStatusChangedTrap.setStatus(
        ""
    )

cnfgUpdateTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 6)
)
if mibBuilder.loadTexts:
    cnfgUpdateTrap.setStatus(
        ""
    )

tftpStatusChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 1)
)
tftpStatusChangeTrap.setObjects(
    ("DACS-MIB", "tftpStatus")
)
if mibBuilder.loadTexts:
    tftpStatusChangeTrap.setStatus(
        ""
    )

agnStatusChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 2)
)
agnStatusChangeTrap.setObjects(
    ("DACS-MIB", "agnIndication")
)
if mibBuilder.loadTexts:
    agnStatusChangeTrap.setStatus(
        ""
    )

prtStatusChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 3)
)
if mibBuilder.loadTexts:
    prtStatusChangeTrap.setStatus(
        ""
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "DACS-MIB",
    **{"MacAddress": MacAddress,
       "rad": rad,
       "radTokenRing": radTokenRing,
       "radFddi": radFddi,
       "radWan": radWan,
       "wanGen": wanGen,
       "chasWanGen": chasWanGen,
       "chasVersion": chasVersion,
       "chasTotalNoOfSlt": chasTotalNoOfSlt,
       "chasTotalNoOfIoSlt": chasTotalNoOfIoSlt,
       "chasTotalNoOfPsSlt": chasTotalNoOfPsSlt,
       "chasTotalNoOfClSlt": chasTotalNoOfClSlt,
       "agnWanGen": agnWanGen,
       "statAgnGen": statAgnGen,
       "agnSDateFormat": agnSDateFormat,
       "agnSDateCmd": agnSDateCmd,
       "agnSTimeCmd": agnSTimeCmd,
       "agnSActiveCnfg": agnSActiveCnfg,
       "agnSEditCnfg": agnSEditCnfg,
       "agnSLastCnfgFlipTime": agnSLastCnfgFlipTime,
       "agnSLastCnfgFlipCause": agnSLastCnfgFlipCause,
       "agnSEditBy": agnSEditBy,
       "agnSClkSrc": agnSClkSrc,
       "agnSAlrStatus": agnSAlrStatus,
       "agnSAlrStatusAll": agnSAlrStatusAll,
       "agnSMaskedAlrStat": agnSMaskedAlrStat,
       "agnSMaskedAlrStatAll": agnSMaskedAlrStatAll,
       "agnSTstStatAll": agnSTstStatAll,
       "agnSAlrTable": agnSAlrTable,
       "agnSAlrEntry": agnSAlrEntry,
       "agnSAlrIdx": agnSAlrIdx,
       "agnSAlrCodeDescription": agnSAlrCodeDescription,
       "agnSAlrCode": agnSAlrCode,
       "agnSAlrSeverity": agnSAlrSeverity,
       "agnSAlrState": agnSAlrState,
       "agnSAlrCounter": agnSAlrCounter,
       "agnSAlrMask": agnSAlrMask,
       "agnSAlrInvert": agnSAlrInvert,
       "agnSClearAlrCmd": agnSClearAlrCmd,
       "agnSClearAllAlrCmd": agnSClearAllAlrCmd,
       "agnSSanityCheckStatus": agnSSanityCheckStatus,
       "agnSNoOfSanityCheckErr": agnSNoOfSanityCheckErr,
       "agnSErrListTable": agnSErrListTable,
       "agnSErrListEntry": agnSErrListEntry,
       "agnSErrIdx": agnSErrIdx,
       "agnSErrDescription": agnSErrDescription,
       "agnSMaxNoOfCnfg": agnSMaxNoOfCnfg,
       "agnSCnfgTable": agnSCnfgTable,
       "agnSCnfgEntry": agnSCnfgEntry,
       "agnSEntryIdx": agnSEntryIdx,
       "agnSEntryIsValid": agnSEntryIsValid,
       "cnfgAgnGen": cnfgAgnGen,
       "agnCSanityCheckCmd": agnCSanityCheckCmd,
       "agnCSaveCnfgIdxCmd": agnCSaveCnfgIdxCmd,
       "agnCLoadCnfgIdxCmd": agnCLoadCnfgIdxCmd,
       "agnCClkSrcTable": agnCClkSrcTable,
       "agnCClkSrcEntry": agnCClkSrcEntry,
       "agnCClkCnfgIdx": agnCClkCnfgIdx,
       "agnCClkSrcIdx": agnCClkSrcIdx,
       "agnCClkSrcMode": agnCClkSrcMode,
       "agnCClkSrcSlt": agnCClkSrcSlt,
       "agnCClkSrcPrt": agnCClkSrcPrt,
       "agnCDeleteCnfgIdxCmd": agnCDeleteCnfgIdxCmd,
       "agnCDefaultCnfgIdxCmd": agnCDefaultCnfgIdxCmd,
       "agnCnfgDataTable": agnCnfgDataTable,
       "agnCnfgDataEntry": agnCnfgDataEntry,
       "agnCnfgIdx": agnCnfgIdx,
       "agnCnfgDesc": agnCnfgDesc,
       "agnCnfgUpdDate": agnCnfgUpdDate,
       "agnCnfgUpdTime": agnCnfgUpdTime,
       "agnCnfgUpdMnger": agnCnfgUpdMnger,
       "agnCnfgAlarm": agnCnfgAlarm,
       "agnCnfgAlrFilterWindow": agnCnfgAlrFilterWindow,
       "agnCnfgAlrTable": agnCnfgAlrTable,
       "agnCnfgAlrEntry": agnCnfgAlrEntry,
       "agnCnfgAlrCode": agnCnfgAlrCode,
       "agnCnfgAlrSlot": agnCnfgAlrSlot,
       "agnCnfgAlrPort": agnCnfgAlrPort,
       "agnCnfgAlrMask": agnCnfgAlrMask,
       "agnCnfgAlrInvert": agnCnfgAlrInvert,
       "agnCnfgAlrFilter": agnCnfgAlrFilter,
       "agnCnfgAlrFilterSet": agnCnfgAlrFilterSet,
       "agnCnfgAlrFilterReset": agnCnfgAlrFilterReset,
       "agnCnfgAlrReportTable": agnCnfgAlrReportTable,
       "agnCnfgAlrReportEntry": agnCnfgAlrReportEntry,
       "agnCnfgAlrReportType": agnCnfgAlrReportType,
       "agnCnfgAlrStartReportOn": agnCnfgAlrStartReportOn,
       "agnCnfgAlrStartReportOff": agnCnfgAlrStartReportOff,
       "agnCOffsetCmd": agnCOffsetCmd,
       "cmprAgnGen": cmprAgnGen,
       "agnCmprTable": agnCmprTable,
       "agnCmprEntry": agnCmprEntry,
       "agnCmprTypIdx": agnCmprTypIdx,
       "agnCmprCnfgIdx": agnCmprCnfgIdx,
       "agnCmprVersion": agnCmprVersion,
       "agnCmprObj": agnCmprObj,
       "agnDlciCmprTable": agnDlciCmprTable,
       "agnDlciCmprEntry": agnDlciCmprEntry,
       "agnDlciCmprCnfgIdx": agnDlciCmprCnfgIdx,
       "agnDlciCmprVersion": agnDlciCmprVersion,
       "agnDlciCmprDlciIdx": agnDlciCmprDlciIdx,
       "agnDlciCmprObj": agnDlciCmprObj,
       "agnAlarmsCmprTable": agnAlarmsCmprTable,
       "agnAlarmsCmprEntry": agnAlarmsCmprEntry,
       "agnAlarmsCmprVersion": agnAlarmsCmprVersion,
       "agnAlarmsCmprAlarmIdx": agnAlarmsCmprAlarmIdx,
       "agnAlarmsCmprObj": agnAlarmsCmprObj,
       "agnAlrBufCmprTable": agnAlrBufCmprTable,
       "agnAlrBufCmprEntry": agnAlrBufCmprEntry,
       "agnAlrBufCmprVersion": agnAlrBufCmprVersion,
       "agnAlrBufCmprAlarmIdx": agnAlrBufCmprAlarmIdx,
       "agnAlrBufCmprObj": agnAlrBufCmprObj,
       "agnSCmprErrListTable": agnSCmprErrListTable,
       "agnSCmprErrListEntry": agnSCmprErrListEntry,
       "agnSCmprErrVersion": agnSCmprErrVersion,
       "agnSCmprErrIdx": agnSCmprErrIdx,
       "agnSCmprErrObj": agnSCmprErrObj,
       "agnTsCmprTable": agnTsCmprTable,
       "agnTsCmprEntry": agnTsCmprEntry,
       "agnTsCmprVerIdx": agnTsCmprVerIdx,
       "agnTsCmprCnfgIdx": agnTsCmprCnfgIdx,
       "agnTsCmprSlotIdx": agnTsCmprSlotIdx,
       "agnTsCmprPortIdx": agnTsCmprPortIdx,
       "agnTsCmprPduIdx": agnTsCmprPduIdx,
       "agnTsCmprData": agnTsCmprData,
       "agnXCmprTable": agnXCmprTable,
       "agnXCmprEntry": agnXCmprEntry,
       "agnXCmprTypIdx": agnXCmprTypIdx,
       "agnXCmprVersion": agnXCmprVersion,
       "agnXCmprIdx3": agnXCmprIdx3,
       "agnXCmprIdx4": agnXCmprIdx4,
       "agnXCmprIdx5": agnXCmprIdx5,
       "agnXCmprIdx6": agnXCmprIdx6,
       "agnXCmprIdx7": agnXCmprIdx7,
       "agnXCmprObj": agnXCmprObj,
       "alrBuffGen": alrBuffGen,
       "alrBufTable": alrBufTable,
       "alrBufEntry": alrBufEntry,
       "alrBufIdx": alrBufIdx,
       "alrBufDescription": alrBufDescription,
       "agnFlipDb": agnFlipDb,
       "agnCAgendaTable": agnCAgendaTable,
       "agnCAgendaEntry": agnCAgendaEntry,
       "agnCAgendaCnfgIdx": agnCAgendaCnfgIdx,
       "agnCAgendaDayIdx": agnCAgendaDayIdx,
       "agnCAgendaDayCategory": agnCAgendaDayCategory,
       "agnCFlipNetEventsTable": agnCFlipNetEventsTable,
       "agnCFlipNetEventsEntry": agnCFlipNetEventsEntry,
       "agnCFlipNetEventsCnfgIdx": agnCFlipNetEventsCnfgIdx,
       "agnCFlipNetEventIdx": agnCFlipNetEventIdx,
       "agnCFlipNetEventActive": agnCFlipNetEventActive,
       "agnCFlipNetEventType": agnCFlipNetEventType,
       "agnCFlipNetEventNo": agnCFlipNetEventNo,
       "agnCFlipNetEventSlot": agnCFlipNetEventSlot,
       "agnCFlipNetEventPort": agnCFlipNetEventPort,
       "agnCFlipNetEventISD": agnCFlipNetEventISD,
       "agnCFlipNetEventOSD": agnCFlipNetEventOSD,
       "agnCFlipNetEventDayType": agnCFlipNetEventDayType,
       "agnCFlipNetEventStartTime": agnCFlipNetEventStartTime,
       "agnCFlipNetEventEndTime": agnCFlipNetEventEndTime,
       "agnCFlipTable": agnCFlipTable,
       "agnCFlipEntry": agnCFlipEntry,
       "agnCFlipCnfgIdx": agnCFlipCnfgIdx,
       "agnCFlipIdx": agnCFlipIdx,
       "agnCFlipActive": agnCFlipActive,
       "agnCFlipLogicalExp": agnCFlipLogicalExp,
       "agnCFlipDbNo": agnCFlipDbNo,
       "agnCFlipDiscardDe": agnCFlipDiscardDe,
       "agnFlipDbControls": agnFlipDbControls,
       "agnCFlipDbSanityCheckCmd": agnCFlipDbSanityCheckCmd,
       "agnCSaveFlipDbCmd": agnCSaveFlipDbCmd,
       "agnCSaveNetCnfgIdxCmd": agnCSaveNetCnfgIdxCmd,
       "agnCSaveNetFlipDbCmd": agnCSaveNetFlipDbCmd,
       "agnCNetGoCmd": agnCNetGoCmd,
       "agnCNetDelay": agnCNetDelay,
       "agnCNetEventsBcast": agnCNetEventsBcast,
       "agnCNetEventsBcastInterval": agnCNetEventsBcastInterval,
       "agnSa": agnSa,
       "agnSaSwchStatus": agnSaSwchStatus,
       "agnListDecoding": agnListDecoding,
       "agnListDecodingTable": agnListDecodingTable,
       "agnListDecodingEntry": agnListDecodingEntry,
       "agnListDecodingType": agnListDecodingType,
       "agnListDecodingCode": agnListDecodingCode,
       "agnListDecodingDescription": agnListDecodingDescription,
       "agnListDecodingDefState": agnListDecodingDefState,
       "agnListDecodingSeverity": agnListDecodingSeverity,
       "agnListDecodingAcmRelaySlt": agnListDecodingAcmRelaySlt,
       "agnListDecodingAcmRelayPrt": agnListDecodingAcmRelayPrt,
       "agnSystemDlci": agnSystemDlci,
       "agnDlciTable": agnDlciTable,
       "agnDlciEntry": agnDlciEntry,
       "agnDlciCnfgIdx": agnDlciCnfgIdx,
       "agnDlciLSltIdx": agnDlciLSltIdx,
       "agnDlciLPrtIdx": agnDlciLPrtIdx,
       "agnDlciLIdx": agnDlciLIdx,
       "agnDlciHSltIdx": agnDlciHSltIdx,
       "agnDlciHPrtIdx": agnDlciHPrtIdx,
       "agnDlciHIdx": agnDlciHIdx,
       "agnDlciTxBc": agnDlciTxBc,
       "agnDlciTxBe": agnDlciTxBe,
       "agnDlciRxBc": agnDlciRxBc,
       "agnDlciRxBe": agnDlciRxBe,
       "agnDlciPriority": agnDlciPriority,
       "agnDlciStatus": agnDlciStatus,
       "agnDlciSpoofing": agnDlciSpoofing,
       "agnDlciFunnelEnable": agnDlciFunnelEnable,
       "agnDlciRoutingProtocol": agnDlciRoutingProtocol,
       "agnDlciRowStatus": agnDlciRowStatus,
       "agnVoiceSwitching": agnVoiceSwitching,
       "agnVoiceSwConfTable": agnVoiceSwConfTable,
       "agnVoiceSwConfEntry": agnVoiceSwConfEntry,
       "agnVoiceSwConfIdx": agnVoiceSwConfIdx,
       "agnVoiceSwConfZoneId": agnVoiceSwConfZoneId,
       "agnVoiceSwConfNodeId": agnVoiceSwConfNodeId,
       "agnVoiceSwConfNoOfHops": agnVoiceSwConfNoOfHops,
       "agnVoiceSwConfRtTable": agnVoiceSwConfRtTable,
       "agnVoiceSwConfRtEntry": agnVoiceSwConfRtEntry,
       "agnVoiceSwConfRtDbId": agnVoiceSwConfRtDbId,
       "agnVoiceSwConfRtIdx": agnVoiceSwConfRtIdx,
       "agnVoiceSwConfRtDigits": agnVoiceSwConfRtDigits,
       "agnVoiceSwConfRtAction": agnVoiceSwConfRtAction,
       "agnVoiceSwConfRtData": agnVoiceSwConfRtData,
       "agnVoiceSwConfRtSlot": agnVoiceSwConfRtSlot,
       "agnVoiceSwConfRtPort": agnVoiceSwConfRtPort,
       "agnVoiceSwConfRtDlci": agnVoiceSwConfRtDlci,
       "agnVoiceSwConfRtRowStatus": agnVoiceSwConfRtRowStatus,
       "agnVoiceSwConfHGTable": agnVoiceSwConfHGTable,
       "agnVoiceSwConfHGEntry": agnVoiceSwConfHGEntry,
       "agnVoiceSwConfHGdbIdx": agnVoiceSwConfHGdbIdx,
       "agnVoiceSwConfHGIdx": agnVoiceSwConfHGIdx,
       "agnVoiceSwConfHGConnect": agnVoiceSwConfHGConnect,
       "agnVoiceSwConfHGExt": agnVoiceSwConfHGExt,
       "agnSigProfile": agnSigProfile,
       "agnSigProfileTable": agnSigProfileTable,
       "agnSigProfileEntry": agnSigProfileEntry,
       "agnSigProfileCnfgIdx": agnSigProfileCnfgIdx,
       "agnSigProfileIdx": agnSigProfileIdx,
       "agnSigProfileRxTx": agnSigProfileRxTx,
       "agnSigProfileABCD": agnSigProfileABCD,
       "agnSystemTs": agnSystemTs,
       "agnTsTable": agnTsTable,
       "agnTsEntry": agnTsEntry,
       "agnTsCnfgIdx": agnTsCnfgIdx,
       "agnTsSltIdx": agnTsSltIdx,
       "agnTsPrtIdx": agnTsPrtIdx,
       "agnTsIdx": agnTsIdx,
       "agnTsBitIdx": agnTsBitIdx,
       "agnTsConSltIdx": agnTsConSltIdx,
       "agnTsConPrtIdx": agnTsConPrtIdx,
       "agnTsConIdx": agnTsConIdx,
       "agnTsType": agnTsType,
       "agnTsRowStatus": agnTsRowStatus,
       "agnTsDirection": agnTsDirection,
       "mdlWanGen": mdlWanGen,
       "statMdlGen": statMdlGen,
       "mdlSInstTable": mdlSInstTable,
       "mdlSInstEntry": mdlSInstEntry,
       "mdlSInstSltIdx": mdlSInstSltIdx,
       "mdlSInstCardType": mdlSInstCardType,
       "mdlSHwVersion": mdlSHwVersion,
       "mdlSSwVersion": mdlSSwVersion,
       "mdlSAlrStatus": mdlSAlrStatus,
       "mdlSAlrStatusAll": mdlSAlrStatusAll,
       "mdlSMaskedAlrStat": mdlSMaskedAlrStat,
       "mdlSMaskedAlrStatAll": mdlSMaskedAlrStatAll,
       "mdlSTstStatusAll": mdlSTstStatusAll,
       "mdlSClearAlrCmd": mdlSClearAlrCmd,
       "mdlSClearAllAlrCmd": mdlSClearAllAlrCmd,
       "mdlSAlrTable": mdlSAlrTable,
       "mdlSAlrEntry": mdlSAlrEntry,
       "mdlSAlrIdx": mdlSAlrIdx,
       "mdlSAlrSltIdx": mdlSAlrSltIdx,
       "mdlSAlrCodeDescription": mdlSAlrCodeDescription,
       "mdlSAlrCode": mdlSAlrCode,
       "mdlSAlrSeverity": mdlSAlrSeverity,
       "mdlSAlrState": mdlSAlrState,
       "mdlSAlrCounter": mdlSAlrCounter,
       "mdlSAlrMask": mdlSAlrMask,
       "mdlSAlrInvert": mdlSAlrInvert,
       "cnfgMdlGen": cnfgMdlGen,
       "mdlCPrgTable": mdlCPrgTable,
       "mdlCPrgEntry": mdlCPrgEntry,
       "mdlCCnfgIdx": mdlCCnfgIdx,
       "mdlCSltIdx": mdlCSltIdx,
       "mdlCPrgCardType": mdlCPrgCardType,
       "mdlCNoOfExternPrt": mdlCNoOfExternPrt,
       "mdlCNoOfInternPrt": mdlCNoOfInternPrt,
       "cmprMdlGen": cmprMdlGen,
       "mdlCmprTable": mdlCmprTable,
       "mdlCmprEntry": mdlCmprEntry,
       "mdlCmprTypIdx": mdlCmprTypIdx,
       "mdlCmprCnfgIdx": mdlCmprCnfgIdx,
       "mdlCmprVersion": mdlCmprVersion,
       "mdlCmprSltIdx": mdlCmprSltIdx,
       "mdlCmprObj": mdlCmprObj,
       "mdlAlarmsCmprTable": mdlAlarmsCmprTable,
       "mdlAlarmsCmprEntry": mdlAlarmsCmprEntry,
       "mdlAlarmsCmprVersion": mdlAlarmsCmprVersion,
       "mdlAlarmsCmprAlarmSlot": mdlAlarmsCmprAlarmSlot,
       "mdlAlarmsCmprAlarmIdx": mdlAlarmsCmprAlarmIdx,
       "mdlAlarmsCmprObj": mdlAlarmsCmprObj,
       "prtWanGen": prtWanGen,
       "statPrtGen": statPrtGen,
       "prtSInstTable": prtSInstTable,
       "prtSInstEntry": prtSInstEntry,
       "prtSInstSltIdx": prtSInstSltIdx,
       "prtSInstPrtIdx": prtSInstPrtIdx,
       "prtSInstPrtType": prtSInstPrtType,
       "prtSInstIfIndex": prtSInstIfIndex,
       "prtSActiveStatus": prtSActiveStatus,
       "prtSAlrStatus": prtSAlrStatus,
       "prtSMaskedAlrStat": prtSMaskedAlrStat,
       "prtSClearAlrCmd": prtSClearAlrCmd,
       "prtSTestMask": prtSTestMask,
       "prtSTstCmd": prtSTstCmd,
       "prtSTstDuration": prtSTstDuration,
       "prtSBertClrCmd": prtSBertClrCmd,
       "prtSBertTstRslt": prtSBertTstRslt,
       "prtSInterfaceType": prtSInterfaceType,
       "prtSParamStatus": prtSParamStatus,
       "prtSAlrTable": prtSAlrTable,
       "prtSAlrEntry": prtSAlrEntry,
       "prtSAlrIdx": prtSAlrIdx,
       "prtSAlrSltIdx": prtSAlrSltIdx,
       "prtSAlrPrtIdx": prtSAlrPrtIdx,
       "prtSAlrCodeDescription": prtSAlrCodeDescription,
       "prtSAlrCode": prtSAlrCode,
       "prtSAlrSeverity": prtSAlrSeverity,
       "prtSAlrState": prtSAlrState,
       "prtSAlrCounter": prtSAlrCounter,
       "prtSAlrMask": prtSAlrMask,
       "prtSAlrInvert": prtSAlrInvert,
       "statisPrtGen": statisPrtGen,
       "prtFrStatis": prtFrStatis,
       "prtFrStatisTable": prtFrStatisTable,
       "prtFrStatisEntry": prtFrStatisEntry,
       "prtFrStatisSltIdx": prtFrStatisSltIdx,
       "prtFrStatisPrtIdx": prtFrStatisPrtIdx,
       "prtFrStatisInvIdx": prtFrStatisInvIdx,
       "prtFrTimeElapsed": prtFrTimeElapsed,
       "prtFrRxTotalFrames": prtFrRxTotalFrames,
       "prtFrTxTotalFrames": prtFrTxTotalFrames,
       "prtFrRxTotalBytes": prtFrRxTotalBytes,
       "prtFrTxTotalBytes": prtFrTxTotalBytes,
       "prtFrRxMngFrames": prtFrRxMngFrames,
       "prtFrTxMngFrames": prtFrTxMngFrames,
       "prtFrRxDeFrames": prtFrRxDeFrames,
       "prtFrTxDeFrames": prtFrTxDeFrames,
       "prtFrRxDcrdCongDeFr": prtFrRxDcrdCongDeFr,
       "prtFrTxDcrdCongDeFr": prtFrTxDcrdCongDeFr,
       "prtFrRxDcrdCongAllFr": prtFrRxDcrdCongAllFr,
       "prtFrTxDcrdCongAllFr": prtFrTxDcrdCongAllFr,
       "prtFrRxFecn": prtFrRxFecn,
       "prtFrTxFecn": prtFrTxFecn,
       "prtFrRxBecn": prtFrRxBecn,
       "prtFrTxBecn": prtFrTxBecn,
       "prtFrRxBeViol": prtFrRxBeViol,
       "prtFrTxBeViol": prtFrTxBeViol,
       "prtFrRxBcViol": prtFrRxBcViol,
       "prtFrTxBcViol": prtFrTxBcViol,
       "prtCrStatis": prtCrStatis,
       "prtCrStatisTable": prtCrStatisTable,
       "prtCrStatisEntry": prtCrStatisEntry,
       "prtCrStatisSltIdx": prtCrStatisSltIdx,
       "prtCrStatisPrtIdx": prtCrStatisPrtIdx,
       "prtCrStatisInvIdx": prtCrStatisInvIdx,
       "prtCrTimeElapsed": prtCrTimeElapsed,
       "prtCrRxTotalCells": prtCrRxTotalCells,
       "prtCrTxTotalCells": prtCrTxTotalCells,
       "prtCrRxDataCells": prtCrRxDataCells,
       "prtCrTxDataCells": prtCrTxDataCells,
       "prtDlciStatis": prtDlciStatis,
       "prtDlciStatisTable": prtDlciStatisTable,
       "prtDlciStatisEntry": prtDlciStatisEntry,
       "prtDlciSltIdx": prtDlciSltIdx,
       "prtDlciPrtIdx": prtDlciPrtIdx,
       "prtDlciIdx": prtDlciIdx,
       "prtDlciRxDeFrames": prtDlciRxDeFrames,
       "prtDlciTxDeFrames": prtDlciTxDeFrames,
       "prtDlciRxDcrdCongDeFr": prtDlciRxDcrdCongDeFr,
       "prtDlciTxDcrdCongDeFr": prtDlciTxDcrdCongDeFr,
       "prtDlciRxDcrdCongAllFr": prtDlciRxDcrdCongAllFr,
       "prtDlciTxDcrdCongAllFr": prtDlciTxDcrdCongAllFr,
       "prtDlciTxFecn": prtDlciTxFecn,
       "prtDlciTxBecn": prtDlciTxBecn,
       "prtDlciRxBeViol": prtDlciRxBeViol,
       "prtDlciTxBeViol": prtDlciTxBeViol,
       "prtDlciRxBcViol": prtDlciRxBcViol,
       "prtDlciTxBcViol": prtDlciTxBcViol,
       "prtT1Statis": prtT1Statis,
       "prtT1FdlMsgTable": prtT1FdlMsgTable,
       "prtT1FdlMsgEntry": prtT1FdlMsgEntry,
       "prtT1FdlMsgSltIdx": prtT1FdlMsgSltIdx,
       "prtT1FdlMsgPrtIdx": prtT1FdlMsgPrtIdx,
       "prtT1FdlMsgFdlTxRx": prtT1FdlMsgFdlTxRx,
       "prtT1FdlMsg": prtT1FdlMsg,
       "cnfgPrtGen": cnfgPrtGen,
       "prtExTsSplitTable": prtExTsSplitTable,
       "prtExTsSplitEntry": prtExTsSplitEntry,
       "prtExTsCnfgIdx": prtExTsCnfgIdx,
       "prtExTsSltIdx": prtExTsSltIdx,
       "prtExTsPrtIdx": prtExTsPrtIdx,
       "prtExTsIdx": prtExTsIdx,
       "prtExTsBit": prtExTsBit,
       "prtExTsIConSlot": prtExTsIConSlot,
       "prtExTsIConPrt": prtExTsIConPrt,
       "prtCnfgAgenda": prtCnfgAgenda,
       "prtAgendaBehaviourTable": prtAgendaBehaviourTable,
       "prtAgendaBehaviourEntry": prtAgendaBehaviourEntry,
       "prtAgendaBehaviourCnfgIdx": prtAgendaBehaviourCnfgIdx,
       "prtAgendaBehaviourSltIdx": prtAgendaBehaviourSltIdx,
       "prtAgendaBehaviourPrtIdx": prtAgendaBehaviourPrtIdx,
       "prtAgendaBehaviourOnOff": prtAgendaBehaviourOnOff,
       "prtCnfgAgendaTable": prtCnfgAgendaTable,
       "prtCnfgAgendaEntry": prtCnfgAgendaEntry,
       "prtCnfgAgendaCnfgIdx": prtCnfgAgendaCnfgIdx,
       "prtCnfgAgendaSltIdx": prtCnfgAgendaSltIdx,
       "prtCnfgAgendaPrtIdx": prtCnfgAgendaPrtIdx,
       "prtCnfgAgendaDayIdx": prtCnfgAgendaDayIdx,
       "prtCnfgAgendaSesId": prtCnfgAgendaSesId,
       "prtCnfgAgendaFrom": prtCnfgAgendaFrom,
       "prtCnfgAgendaTo": prtCnfgAgendaTo,
       "prtGenCnfgTable": prtGenCnfgTable,
       "prtGenCnfgEntry": prtGenCnfgEntry,
       "prtGenCnfgIdx": prtGenCnfgIdx,
       "prtGenCnfgSltIdx": prtGenCnfgSltIdx,
       "prtGenCnfgPrtIdx": prtGenCnfgPrtIdx,
       "prtGenCnfgLinkToSlot": prtGenCnfgLinkToSlot,
       "prtGenCnfgLinkToPort": prtGenCnfgLinkToPort,
       "prtGenCnfgPortId": prtGenCnfgPortId,
       "cmprPrtGen": cmprPrtGen,
       "prtCmprTable": prtCmprTable,
       "prtCmprEntry": prtCmprEntry,
       "prtCmprTypIdx": prtCmprTypIdx,
       "prtCmprCnfgIdx": prtCmprCnfgIdx,
       "prtCmprVersion": prtCmprVersion,
       "prtCmprSltIdx": prtCmprSltIdx,
       "prtCmprPrtIdx": prtCmprPrtIdx,
       "prtCmprObj": prtCmprObj,
       "prtDlciCmprTable": prtDlciCmprTable,
       "prtDlciCmprEntry": prtDlciCmprEntry,
       "prtDlciCmprCnfgIdx": prtDlciCmprCnfgIdx,
       "prtDlciCmprVersion": prtDlciCmprVersion,
       "prtDlciCmprSltIdx": prtDlciCmprSltIdx,
       "prtDlciCmprPrtIdx": prtDlciCmprPrtIdx,
       "prtDlciCmprDlciIdx": prtDlciCmprDlciIdx,
       "prtDlciCmprObj": prtDlciCmprObj,
       "prtAlarmsCmprTable": prtAlarmsCmprTable,
       "prtAlarmsCmprEntry": prtAlarmsCmprEntry,
       "prtAlarmsCmprVersion": prtAlarmsCmprVersion,
       "prtAlarmsCmprAlarmSlot": prtAlarmsCmprAlarmSlot,
       "prtAlarmsCmprAlarmPort": prtAlarmsCmprAlarmPort,
       "prtAlarmsCmprAlarmIdx": prtAlarmsCmprAlarmIdx,
       "prtAlarmsCmprObj": prtAlarmsCmprObj,
       "mapWanGen": mapWanGen,
       "agnLinkMapTable": agnLinkMapTable,
       "agnLinkMapEntry": agnLinkMapEntry,
       "mapLinkId": mapLinkId,
       "mapLinkSltIdx": mapLinkSltIdx,
       "mapLinkPrtIdx": mapLinkPrtIdx,
       "mapLinkStatus": mapLinkStatus,
       "diverseIfWanGen": diverseIfWanGen,
       "ethIf": ethIf,
       "ethIfTable": ethIfTable,
       "ethIfEntry": ethIfEntry,
       "ethIfIdx": ethIfIdx,
       "ethMode": ethMode,
       "ethBridgingMode": ethBridgingMode,
       "muxHub": muxHub,
       "alarmsTrap": alarmsTrap,
       "sanityTrap": sanityTrap,
       "cnfgFlipTrap": cnfgFlipTrap,
       "flipDbChangeTrap": flipDbChangeTrap,
       "statusChangedTrap": statusChangedTrap,
       "agnMux": agnMux,
       "mdlMux": mdlMux,
       "cnfgMdlMux": cnfgMdlMux,
       "mdlPbxFramerCnfg": mdlPbxFramerCnfg,
       "mdlPbxFramerCnfgTable": mdlPbxFramerCnfgTable,
       "mdlPbxFramerCnfgEntry": mdlPbxFramerCnfgEntry,
       "mdlPbxFraCnfgIdx": mdlPbxFraCnfgIdx,
       "mdlPbxFraSltIdx": mdlPbxFraSltIdx,
       "mdlPbxFraEnhEcho": mdlPbxFraEnhEcho,
       "mdlPbxFraTSGroupAss": mdlPbxFraTSGroupAss,
       "mdlPbxFraSignalMode": mdlPbxFraSignalMode,
       "mdlPbxFraSignalVector": mdlPbxFraSignalVector,
       "mdlPbxFraSignalMask": mdlPbxFraSignalMask,
       "mdlPbxFraFramerSlot": mdlPbxFraFramerSlot,
       "mdlPbxFraSignaling": mdlPbxFraSignaling,
       "prtMux": prtMux,
       "statPrtMux": statPrtMux,
       "prtSExHsfStatTable": prtSExHsfStatTable,
       "prtSExHsfStatEntry": prtSExHsfStatEntry,
       "prtSExHsfSltIdx": prtSExHsfSltIdx,
       "prtSExHsfPrtIdx": prtSExHsfPrtIdx,
       "prtSExHsfInterfaceTyp": prtSExHsfInterfaceTyp,
       "prtSExHsfRts": prtSExHsfRts,
       "cnfgPrtMux": cnfgPrtMux,
       "prtClCnfg": prtClCnfg,
       "prtExClCnfgTable": prtExClCnfgTable,
       "prtExClCnfgEntry": prtExClCnfgEntry,
       "prtExClCnfgIdx": prtExClCnfgIdx,
       "prtExClSltIdx": prtExClSltIdx,
       "prtExClPrtIdx": prtExClPrtIdx,
       "prtExClUsage": prtExClUsage,
       "prtExClRate": prtExClRate,
       "prtExClDataBits": prtExClDataBits,
       "prtExClParity": prtExClParity,
       "prtExClStopBits": prtExClStopBits,
       "prtExClRoutingProtocol": prtExClRoutingProtocol,
       "prtPh1MlCnfg": prtPh1MlCnfg,
       "prtExPh1MlCnfgTable": prtExPh1MlCnfgTable,
       "prtExPh1MlCnfgEntry": prtExPh1MlCnfgEntry,
       "prtExPh1MlCnfgIdx": prtExPh1MlCnfgIdx,
       "prtExPh1MlSltIdx": prtExPh1MlSltIdx,
       "prtExPh1MlPrtIdx": prtExPh1MlPrtIdx,
       "prtExPh1MlConnect": prtExPh1MlConnect,
       "prtExPh1MlLineType": prtExPh1MlLineType,
       "prtExPh1MlLineCode": prtExPh1MlLineCode,
       "prtExPh1MlLineLen": prtExPh1MlLineLen,
       "prtExPh1MlRestoreTime": prtExPh1MlRestoreTime,
       "prtExPh1MlTxGain": prtExPh1MlTxGain,
       "prtExPh1MlRxSensitivity": prtExPh1MlRxSensitivity,
       "prtExPh1MlIdleCode": prtExPh1MlIdleCode,
       "prtExPh1MlTdmTrunk": prtExPh1MlTdmTrunk,
       "prtExPh1MlClkMode": prtExPh1MlClkMode,
       "prtExPh1MlMfClkSrcSlt": prtExPh1MlMfClkSrcSlt,
       "prtExPh1MlMfClkSrcPrt": prtExPh1MlMfClkSrcPrt,
       "prtExPh1MlFdlType": prtExPh1MlFdlType,
       "prtExPh1MlInbandMng": prtExPh1MlInbandMng,
       "prtExPh1MlInbandMngRate": prtExPh1MlInbandMngRate,
       "prtExPh1MlRedundType": prtExPh1MlRedundType,
       "prtExPh1MlRedundSlot": prtExPh1MlRedundSlot,
       "prtExPh1MlRedundPort": prtExPh1MlRedundPort,
       "prtExPh1MlRedundRecTime": prtExPh1MlRedundRecTime,
       "prtExPh1MlInbandMngRoutProt": prtExPh1MlInbandMngRoutProt,
       "prtExPh1MlIfType": prtExPh1MlIfType,
       "prtExPh1MlTsTable": prtExPh1MlTsTable,
       "prtExPh1MlTsEntry": prtExPh1MlTsEntry,
       "prtExPh1MlTsCnfgIdx": prtExPh1MlTsCnfgIdx,
       "prtExPh1MlTsSltIdx": prtExPh1MlTsSltIdx,
       "prtExPh1MlTsPrtIdx": prtExPh1MlTsPrtIdx,
       "prtExPh1MlTsIdx": prtExPh1MlTsIdx,
       "prtExPh1MlTsIConSlot": prtExPh1MlTsIConSlot,
       "prtExPh1MlTsIConPrt": prtExPh1MlTsIConPrt,
       "prtExPh1MlTsIConTs": prtExPh1MlTsIConTs,
       "prtExPh1MlTsExt": prtExPh1MlTsExt,
       "prtInPh1MlCnfgTable": prtInPh1MlCnfgTable,
       "prtInPh1MlCnfgEntry": prtInPh1MlCnfgEntry,
       "prtInPh1MlCnfgIdx": prtInPh1MlCnfgIdx,
       "prtInPh1MlSltType": prtInPh1MlSltType,
       "prtInPh1MlPrtIdx": prtInPh1MlPrtIdx,
       "prtInPh1MlConnect": prtInPh1MlConnect,
       "prtInPh1MlRate": prtInPh1MlRate,
       "prtInPh1MlProtocol": prtInPh1MlProtocol,
       "prtInPh1MlConnectionTyp": prtInPh1MlConnectionTyp,
       "prtInPh1MlCongResponse": prtInPh1MlCongResponse,
       "prtInPh1MlCongLevel": prtInPh1MlCongLevel,
       "prtInPh1MlTc": prtInPh1MlTc,
       "prtInPh1MlFlowControl": prtInPh1MlFlowControl,
       "prtInPh1MlSegment": prtInPh1MlSegment,
       "prtInPh1MlFrMngProt": prtInPh1MlFrMngProt,
       "prtInPh1MlEnqPeriod": prtInPh1MlEnqPeriod,
       "prtInPh1MlFullRptPeriod": prtInPh1MlFullRptPeriod,
       "prtInPh1MlFrWindowSize": prtInPh1MlFrWindowSize,
       "prtInPh1MlErrorsThreshold": prtInPh1MlErrorsThreshold,
       "prtInPh1MlMaxIdleTime": prtInPh1MlMaxIdleTime,
       "prtInPh1MlBearerCh": prtInPh1MlBearerCh,
       "prtInPh1MlAssociatedExCh": prtInPh1MlAssociatedExCh,
       "prtInPh1MlClockEncoding": prtInPh1MlClockEncoding,
       "prtInPh1MlMinSeparators": prtInPh1MlMinSeparators,
       "prtInPh1MlCcittCrc": prtInPh1MlCcittCrc,
       "prtInPh1MlFrameSeparator": prtInPh1MlFrameSeparator,
       "prtInPh1MlDlciTable": prtInPh1MlDlciTable,
       "prtInPh1MlDlciEntry": prtInPh1MlDlciEntry,
       "prtInPh1MlDlciCnfgIdx": prtInPh1MlDlciCnfgIdx,
       "prtInPh1MlDlciSltIdx": prtInPh1MlDlciSltIdx,
       "prtInPh1MlDlciPrtIdx": prtInPh1MlDlciPrtIdx,
       "prtInPh1MlDlciIdx": prtInPh1MlDlciIdx,
       "prtInPh1MlDlciValid": prtInPh1MlDlciValid,
       "prtInPh1MlDlciIConSlt": prtInPh1MlDlciIConSlt,
       "prtInPh1MlDlciIConPrt": prtInPh1MlDlciIConPrt,
       "prtInPh1MlDlciIConDlci": prtInPh1MlDlciIConDlci,
       "prtInPh1MlDlciTxBc": prtInPh1MlDlciTxBc,
       "prtInPh1MlDlciTxBe": prtInPh1MlDlciTxBe,
       "prtInPh1MlDlciRxBc": prtInPh1MlDlciRxBc,
       "prtInPh1MlDlciRxBe": prtInPh1MlDlciRxBe,
       "prtInPh1MlDlciPriority": prtInPh1MlDlciPriority,
       "prtInPh1MlDlciStatus": prtInPh1MlDlciStatus,
       "prtPhMlCnfgTable": prtPhMlCnfgTable,
       "prtPhMlCnfgEntry": prtPhMlCnfgEntry,
       "prtPhMlCnfgIdx": prtPhMlCnfgIdx,
       "prtPhMlSltIdx": prtPhMlSltIdx,
       "prtPhMlPrtIdx": prtPhMlPrtIdx,
       "prtPhMlConnect": prtPhMlConnect,
       "prtPhMlRate": prtPhMlRate,
       "prtPhMlCAS": prtPhMlCAS,
       "prtPhMlClockMode": prtPhMlClockMode,
       "prtPhMlSatBuffer": prtPhMlSatBuffer,
       "prtPhMlDialProcess": prtPhMlDialProcess,
       "prtPhMlSyncRestore": prtPhMlSyncRestore,
       "prtPhMlBus": prtPhMlBus,
       "prtPhMlMfSyncSlot": prtPhMlMfSyncSlot,
       "prtPhPlCnfg": prtPhPlCnfg,
       "prtExPhPlCnfgTable": prtExPhPlCnfgTable,
       "prtExPhPlCnfgEntry": prtExPhPlCnfgEntry,
       "prtExPhPlCnfgIdx": prtExPhPlCnfgIdx,
       "prtExPhPlSltIdx": prtExPhPlSltIdx,
       "prtExPhPlPrtIdx": prtExPhPlPrtIdx,
       "prtExPhPlConnect": prtExPhPlConnect,
       "prtExPhPlHRate": prtExPhPlHRate,
       "prtExPhPlLRate": prtExPhPlLRate,
       "prtExPhPlProtocol": prtExPhPlProtocol,
       "prtExPhPlConnectionTyp": prtExPhPlConnectionTyp,
       "prtExPhPlClkMode": prtExPhPlClkMode,
       "prtExPhPlDceClkSrc": prtExPhPlDceClkSrc,
       "prtExPhPlCongResponse": prtExPhPlCongResponse,
       "prtExPhPlCongLevel": prtExPhPlCongLevel,
       "prtExPhPlTc": prtExPhPlTc,
       "prtExPhPlFlowControl": prtExPhPlFlowControl,
       "prtExPhPlDcdRts": prtExPhPlDcdRts,
       "prtExPhPlDcdRtsControlPath": prtExPhPlDcdRtsControlPath,
       "prtExPhPlDataBits": prtExPhPlDataBits,
       "prtExPhPlParity": prtExPhPlParity,
       "prtExPhPlStopBits": prtExPhPlStopBits,
       "prtExPhPlLXon": prtExPhPlLXon,
       "prtExPhPlLXoff": prtExPhPlLXoff,
       "prtExPhPlFrMngProt": prtExPhPlFrMngProt,
       "prtExPhPlEnqPeriod": prtExPhPlEnqPeriod,
       "prtExPhPlFullRptPeriod": prtExPhPlFullRptPeriod,
       "prtExPhPlFrWindowSize": prtExPhPlFrWindowSize,
       "prtExPhPlErrorsThreshold": prtExPhPlErrorsThreshold,
       "prtExPhPlPvcCreateMsg": prtExPhPlPvcCreateMsg,
       "prtExPhPlCllmMsg": prtExPhPlCllmMsg,
       "prtExPhPlProtDelayLevel": prtExPhPlProtDelayLevel,
       "prtExPhPlClockEncoding": prtExPhPlClockEncoding,
       "prtExPhPlMinSeparators": prtExPhPlMinSeparators,
       "prtExPhPlCcittCrc": prtExPhPlCcittCrc,
       "prtExPhPlFrameSeparator": prtExPhPlFrameSeparator,
       "prtExPhPlDlciTable": prtExPhPlDlciTable,
       "prtExPhPlDlciEntry": prtExPhPlDlciEntry,
       "prtExPhPlDlciCnfgIdx": prtExPhPlDlciCnfgIdx,
       "prtExPhPlDlciSltIdx": prtExPhPlDlciSltIdx,
       "prtExPhPlDlciPrtIdx": prtExPhPlDlciPrtIdx,
       "prtExPhPlDlciIdx": prtExPhPlDlciIdx,
       "prtExPhPlDlciValid": prtExPhPlDlciValid,
       "prtExPhPlDlciIConSlt": prtExPhPlDlciIConSlt,
       "prtExPhPlDlciIConPrt": prtExPhPlDlciIConPrt,
       "prtExPhPlDlciIConDlci": prtExPhPlDlciIConDlci,
       "prtExPhPlDlciTxBc": prtExPhPlDlciTxBc,
       "prtExPhPlDlciTxBe": prtExPhPlDlciTxBe,
       "prtExPhPlDlciRxBc": prtExPhPlDlciRxBc,
       "prtExPhPlDlciRxBe": prtExPhPlDlciRxBe,
       "prtExPhPlDlciPriority": prtExPhPlDlciPriority,
       "prtExPhPlDlciStatus": prtExPhPlDlciStatus,
       "prtExPhPlModemTable": prtExPhPlModemTable,
       "prtExPhPlModemEntry": prtExPhPlModemEntry,
       "prtExPhPlModemCnfgIdx": prtExPhPlModemCnfgIdx,
       "prtExPhPlModemSltIdx": prtExPhPlModemSltIdx,
       "prtExPhPlModemPrtIdx": prtExPhPlModemPrtIdx,
       "prtExPhPlModemStatus": prtExPhPlModemStatus,
       "prtExPhPlModemActivate": prtExPhPlModemActivate,
       "prtExPhPlModemMaxIdleTime": prtExPhPlModemMaxIdleTime,
       "prtExPhPlModemTimeBtwnCalls": prtExPhPlModemTimeBtwnCalls,
       "prtExPhPlModemCallDelay": prtExPhPlModemCallDelay,
       "prtLs2Cnfg": prtLs2Cnfg,
       "prtExLs2CnfgTable": prtExLs2CnfgTable,
       "prtExLs2CnfgEntry": prtExLs2CnfgEntry,
       "prtExLs2CnfgIdx": prtExLs2CnfgIdx,
       "prtExLs2SltIdx": prtExLs2SltIdx,
       "prtExLs2PrtIdx": prtExLs2PrtIdx,
       "prtExLs2Connect": prtExLs2Connect,
       "prtExLs2Rate": prtExLs2Rate,
       "prtExLs2ClkMode": prtExLs2ClkMode,
       "prtExLs2Cts": prtExLs2Cts,
       "prtExLs2Dcd": prtExLs2Dcd,
       "prtExLs2EnvIdx": prtExLs2EnvIdx,
       "prtInLs2CnfgTable": prtInLs2CnfgTable,
       "prtInLs2CnfgEntry": prtInLs2CnfgEntry,
       "prtInLs2CnfgIdx": prtInLs2CnfgIdx,
       "prtInLs2SltIdx": prtInLs2SltIdx,
       "prtInLs2PrtIdx": prtInLs2PrtIdx,
       "prtInLs2Connect": prtInLs2Connect,
       "prtInLs2Group": prtInLs2Group,
       "prtInLs2Member": prtInLs2Member,
       "prtInLs2LinkTo": prtInLs2LinkTo,
       "prtInLs2EnvAssign": prtInLs2EnvAssign,
       "prtVc2CnfgTable": prtVc2CnfgTable,
       "prtVc2CnfgEntry": prtVc2CnfgEntry,
       "prtVc2CnfgIdx": prtVc2CnfgIdx,
       "prtVc2SltIdx": prtVc2SltIdx,
       "prtVc2PrtIdx": prtVc2PrtIdx,
       "prtExVc2Connect": prtExVc2Connect,
       "prtExVc2TransGain": prtExVc2TransGain,
       "prtExVc2ReceiveGain": prtExVc2ReceiveGain,
       "prtExVc2Wire": prtExVc2Wire,
       "prtExVc2CodingLaw": prtExVc2CodingLaw,
       "prtExVc2Sig": prtExVc2Sig,
       "prtExVc2Oos": prtExVc2Oos,
       "prtExVc2LinkTo": prtExVc2LinkTo,
       "prtExVc2OperMode": prtExVc2OperMode,
       "prtExVc2SigProfile": prtExVc2SigProfile,
       "prtExVc2CallEnable": prtExVc2CallEnable,
       "prtExVc2R2Delay": prtExVc2R2Delay,
       "prtExVc2CasStd": prtExVc2CasStd,
       "prtExVc2EchoCanceler": prtExVc2EchoCanceler,
       "prtExVc2IfType": prtExVc2IfType,
       "prtExVc2Encoding": prtExVc2Encoding,
       "prtExVc2TxBitCode": prtExVc2TxBitCode,
       "prtExVc2RxBitOutput": prtExVc2RxBitOutput,
       "prtExVc2MeterRate": prtExVc2MeterRate,
       "prtExVc2IfSignaling": prtExVc2IfSignaling,
       "prtExVc2SeizeAck": prtExVc2SeizeAck,
       "prtExVc2EandMType": prtExVc2EandMType,
       "prtHsfCnfgTable": prtHsfCnfgTable,
       "prtHsfCnfgEntry": prtHsfCnfgEntry,
       "prtHsfCnfgIdx": prtHsfCnfgIdx,
       "prtHsfSltIdx": prtHsfSltIdx,
       "prtHsfPrtIdx": prtHsfPrtIdx,
       "prtExHsfConnect": prtExHsfConnect,
       "prtExHsfRate": prtExHsfRate,
       "prtExHsfClkMode": prtExHsfClkMode,
       "prtExHsfCts": prtExHsfCts,
       "prtExHsfFifoSize": prtExHsfFifoSize,
       "prtExHsfLinkTo": prtExHsfLinkTo,
       "prtExHsfOperMode": prtExHsfOperMode,
       "prtExHsfInbandLoopback": prtExHsfInbandLoopback,
       "prtExHsfClkPolarity": prtExHsfClkPolarity,
       "prtHs4Cnfg": prtHs4Cnfg,
       "prtExHs4CnfgTable": prtExHs4CnfgTable,
       "prtExHs4CnfgEntry": prtExHs4CnfgEntry,
       "prtExHs4CnfgIdx": prtExHs4CnfgIdx,
       "prtExHs4SltIdx": prtExHs4SltIdx,
       "prtExHs4PrtIdx": prtExHs4PrtIdx,
       "prtExHs4Connect": prtExHs4Connect,
       "prtExHs4LineType": prtExHs4LineType,
       "prtExHs4LineCode": prtExHs4LineCode,
       "prtExHs4LineLen": prtExHs4LineLen,
       "prtExHs4RestoreT": prtExHs4RestoreT,
       "prtExHs4OosSig": prtExHs4OosSig,
       "prtExHs4OosCode": prtExHs4OosCode,
       "prtExHs4IdleCode": prtExHs4IdleCode,
       "prtExHs4MfClkSrcSlt": prtExHs4MfClkSrcSlt,
       "prtExHs4MfClkSrcPrt": prtExHs4MfClkSrcPrt,
       "prtExHs4TsCnfgTable": prtExHs4TsCnfgTable,
       "prtExHs4TsEntry": prtExHs4TsEntry,
       "prtExHs4TsCnfgIdx": prtExHs4TsCnfgIdx,
       "prtExHs4TsSltIdx": prtExHs4TsSltIdx,
       "prtExHs4TsPrtIdx": prtExHs4TsPrtIdx,
       "prtExHs4TsIdx": prtExHs4TsIdx,
       "prtExHs4TsIConSlot": prtExHs4TsIConSlot,
       "prtExHs4TsIConPrt": prtExHs4TsIConPrt,
       "prtExHs4TsIConTs": prtExHs4TsIConTs,
       "prtHsiCnfg": prtHsiCnfg,
       "prtExHsiCnfgTable": prtExHsiCnfgTable,
       "prtExHsiCnfgEntry": prtExHsiCnfgEntry,
       "prtExHsiCnfgIdx": prtExHsiCnfgIdx,
       "prtExHsiSltIdx": prtExHsiSltIdx,
       "prtExHsiPrtIdx": prtExHsiPrtIdx,
       "prtExHsiConnect": prtExHsiConnect,
       "prtExHsiRate": prtExHsiRate,
       "prtExHsiLinkTo": prtExHsiLinkTo,
       "prtExHsiInterface": prtExHsiInterface,
       "prtExHsiActType": prtExHsiActType,
       "prtInHsiCnfgTable": prtInHsiCnfgTable,
       "prtInHsiCnfgEntry": prtInHsiCnfgEntry,
       "prtInHsiCnfgIdx": prtInHsiCnfgIdx,
       "prtInHsiSltIdx": prtInHsiSltIdx,
       "prtInHsiPrtIdx": prtInHsiPrtIdx,
       "prtInHsiConnect": prtInHsiConnect,
       "prtInHsiRate": prtInHsiRate,
       "prtInHsiConcentratedTo": prtInHsiConcentratedTo,
       "prtPVc4Cnfg": prtPVc4Cnfg,
       "prtExPVc4CnfgTable": prtExPVc4CnfgTable,
       "prtExPVc4CnfgEntry": prtExPVc4CnfgEntry,
       "prtExPVc4CnfgIdx": prtExPVc4CnfgIdx,
       "prtExPVc4SltIdx": prtExPVc4SltIdx,
       "prtExPVc4PrtIdx": prtExPVc4PrtIdx,
       "prtExPVc4PrtType": prtExPVc4PrtType,
       "prtExPVc4Connect": prtExPVc4Connect,
       "prtExPVc4IfType": prtExPVc4IfType,
       "prtExPVc4TxGain": prtExPVc4TxGain,
       "prtExPVc4RxGain": prtExPVc4RxGain,
       "prtExPVc4MaxRate": prtExPVc4MaxRate,
       "prtExPVc4Tc": prtExPVc4Tc,
       "prtExPVc4Oos": prtExPVc4Oos,
       "prtExPVc4EchoCanceler": prtExPVc4EchoCanceler,
       "prtExPVc4VarDelay": prtExPVc4VarDelay,
       "prtExPVc4CongLevel": prtExPVc4CongLevel,
       "prtExPVc4Wire": prtExPVc4Wire,
       "prtExPVc4ExtensionType": prtExPVc4ExtensionType,
       "prtExPVc4ExtensionNumber": prtExPVc4ExtensionNumber,
       "prtExPVc4OutPulsing": prtExPVc4OutPulsing,
       "prtExPVc4HuntGroupMb": prtExPVc4HuntGroupMb,
       "prtExPVc4HuntGroupIdx": prtExPVc4HuntGroupIdx,
       "prtExPVc4AutoFaxMode": prtExPVc4AutoFaxMode,
       "prtExPVc4FaxRate": prtExPVc4FaxRate,
       "prtExPVc4SeizeAck": prtExPVc4SeizeAck,
       "prtExPVc4SignalingProtocol": prtExPVc4SignalingProtocol,
       "prtExPVc4DelayStart": prtExPVc4DelayStart,
       "prtExPVc4WinkMinDuration": prtExPVc4WinkMinDuration,
       "prtExPVc4WinkMaxDuration": prtExPVc4WinkMaxDuration,
       "prtExPVc4DlciTable": prtExPVc4DlciTable,
       "prtExPVc4DlciEntry": prtExPVc4DlciEntry,
       "prtExPVc4DlciCnfgIdx": prtExPVc4DlciCnfgIdx,
       "prtExPVc4DlciSltIdx": prtExPVc4DlciSltIdx,
       "prtExPVc4DlciPrtIdx": prtExPVc4DlciPrtIdx,
       "prtExPVc4DlciValid": prtExPVc4DlciValid,
       "prtExPVc4DlciIConSlt": prtExPVc4DlciIConSlt,
       "prtExPVc4DlciIConPrt": prtExPVc4DlciIConPrt,
       "prtExPVc4DlciIConDlci": prtExPVc4DlciIConDlci,
       "prtExPVc4DlciTxBc": prtExPVc4DlciTxBc,
       "prtExPVc4DlciTxBe": prtExPVc4DlciTxBe,
       "prtExPVc4DlciRxBc": prtExPVc4DlciRxBc,
       "prtExPVc4DlciRxBe": prtExPVc4DlciRxBe,
       "prtExPVc4DlciPriority": prtExPVc4DlciPriority,
       "prtExPVc4DlciStatus": prtExPVc4DlciStatus,
       "prtHsrCnfg": prtHsrCnfg,
       "prtExHsrCnfgTable": prtExHsrCnfgTable,
       "prtExHsrCnfgEntry": prtExHsrCnfgEntry,
       "prtExHsrCnfgIdx": prtExHsrCnfgIdx,
       "prtExHsrSltIdx": prtExHsrSltIdx,
       "prtExHsrPrtIdx": prtExHsrPrtIdx,
       "prtExHsrConnect": prtExHsrConnect,
       "prtExHsrProtocol": prtExHsrProtocol,
       "prtExHsrRate": prtExHsrRate,
       "prtExHsrDataBits": prtExHsrDataBits,
       "prtExHsrParity": prtExHsrParity,
       "prtExHsrStopBits": prtExHsrStopBits,
       "prtExHsrCts": prtExHsrCts,
       "prtExHsrClkMode": prtExHsrClkMode,
       "prtExHsrLinkTo": prtExHsrLinkTo,
       "prtExHsrDcdDsr": prtExHsrDcdDsr,
       "prtExHsrOperMode": prtExHsrOperMode,
       "prtExHsrRtsDtr": prtExHsrRtsDtr,
       "prtExHsrLlbEnable": prtExHsrLlbEnable,
       "prtExHsrRlbEnable": prtExHsrRlbEnable,
       "prtExHsrRateAdapt": prtExHsrRateAdapt,
       "prtMbeCnfg": prtMbeCnfg,
       "prtExMbeCnfgTable": prtExMbeCnfgTable,
       "prtExMbeCnfgEntry": prtExMbeCnfgEntry,
       "prtExMbeCnfgIdx": prtExMbeCnfgIdx,
       "prtExMbeSltIdx": prtExMbeSltIdx,
       "prtExMbePrtIdx": prtExMbePrtIdx,
       "prtExMbeLan": prtExMbeLan,
       "prtInMbeCnfgTable": prtInMbeCnfgTable,
       "prtInMbeCnfgEntry": prtInMbeCnfgEntry,
       "prtInMbeCnfgIdx": prtInMbeCnfgIdx,
       "prtInMbeSltIdx": prtInMbeSltIdx,
       "prtInMbePrtIdx": prtInMbePrtIdx,
       "prtInMbeConnect": prtInMbeConnect,
       "prtInMbeRate": prtInMbeRate,
       "prtInMbeLinkTo": prtInMbeLinkTo,
       "prtTreCnfg": prtTreCnfg,
       "prtExTreCnfgTable": prtExTreCnfgTable,
       "prtExTreCnfgEntry": prtExTreCnfgEntry,
       "prtExTreCnfgIdx": prtExTreCnfgIdx,
       "prtExTreSltIdx": prtExTreSltIdx,
       "prtExTrePrtIdx": prtExTrePrtIdx,
       "prtExTreLan": prtExTreLan,
       "prtExTreLanRate": prtExTreLanRate,
       "prtInTreCnfgTable": prtInTreCnfgTable,
       "prtInTreCnfgEntry": prtInTreCnfgEntry,
       "prtInTreCnfgIdx": prtInTreCnfgIdx,
       "prtInTreSltIdx": prtInTreSltIdx,
       "prtInTrePrtIdx": prtInTrePrtIdx,
       "prtInTreConnect": prtInTreConnect,
       "prtInTreRate": prtInTreRate,
       "prtInTreLinkTo": prtInTreLinkTo,
       "prtLs6Cnfg": prtLs6Cnfg,
       "prtExLs6CnfgTable": prtExLs6CnfgTable,
       "prtExLs6CnfgEntry": prtExLs6CnfgEntry,
       "prtExLs6CnfgIdx": prtExLs6CnfgIdx,
       "prtExLs6SltIdx": prtExLs6SltIdx,
       "prtExLs6PrtIdx": prtExLs6PrtIdx,
       "prtExLs6Connect": prtExLs6Connect,
       "prtExLs6Protocol": prtExLs6Protocol,
       "prtExLs6Rate": prtExLs6Rate,
       "prtExLs6ClkMode": prtExLs6ClkMode,
       "prtExLs6CtrlSignal": prtExLs6CtrlSignal,
       "prtExLs6DataBits": prtExLs6DataBits,
       "prtExLs6Cts": prtExLs6Cts,
       "prtExLs6LinkToInternal": prtExLs6LinkToInternal,
       "prtExLs6VCnfgTable": prtExLs6VCnfgTable,
       "prtExLs6VCnfgEntry": prtExLs6VCnfgEntry,
       "prtExLs6VCnfgIdx": prtExLs6VCnfgIdx,
       "prtExLs6VSltIdx": prtExLs6VSltIdx,
       "prtExLs6VPrtIdx": prtExLs6VPrtIdx,
       "prtExLs6VConnect": prtExLs6VConnect,
       "prtExLs6VRate": prtExLs6VRate,
       "prtExLs6VEchoCanceler": prtExLs6VEchoCanceler,
       "prtExLs6VIfType": prtExLs6VIfType,
       "prtExLs6VTxGain": prtExLs6VTxGain,
       "prtExLs6VRxGain": prtExLs6VRxGain,
       "prtExLs6VOos": prtExLs6VOos,
       "prtInLs6CnfgTable": prtInLs6CnfgTable,
       "prtInLs6CnfgEntry": prtInLs6CnfgEntry,
       "prtInLs6CnfgIdx": prtInLs6CnfgIdx,
       "prtInLs6SltIdx": prtInLs6SltIdx,
       "prtInLs6PrtIdx": prtInLs6PrtIdx,
       "prtInLs6Connect": prtInLs6Connect,
       "prtInLs6TandemMode": prtInLs6TandemMode,
       "prtInLs6Rate": prtInLs6Rate,
       "prtInLs6RemoteType": prtInLs6RemoteType,
       "prtInLs6LinkTo": prtInLs6LinkTo,
       "prtVc3Cnfg": prtVc3Cnfg,
       "prtExVc3CnfgTable": prtExVc3CnfgTable,
       "prtExVc3CnfgEntry": prtExVc3CnfgEntry,
       "prtExVc3CnfgIdx": prtExVc3CnfgIdx,
       "prtExVc3SltIdx": prtExVc3SltIdx,
       "prtExVc3PrtIdx": prtExVc3PrtIdx,
       "prtExVc3Connect": prtExVc3Connect,
       "prtExVc3TransGain": prtExVc3TransGain,
       "prtExVc3ReceiveGain": prtExVc3ReceiveGain,
       "prtExVc3Wire": prtExVc3Wire,
       "prtExVc3Rate": prtExVc3Rate,
       "prtExVc3EchoCanceler": prtExVc3EchoCanceler,
       "prtInVc3CnfgTable": prtInVc3CnfgTable,
       "prtInVc3CnfgEntry": prtInVc3CnfgEntry,
       "prtInVc3CnfgIdx": prtInVc3CnfgIdx,
       "prtInVc3SltIdx": prtInVc3SltIdx,
       "prtInVc3PrtIdx": prtInVc3PrtIdx,
       "prtInVc3Connect": prtInVc3Connect,
       "prtInVc3Rate": prtInVc3Rate,
       "prtInVc3Oos": prtInVc3Oos,
       "prtInVc3LinkTo": prtInVc3LinkTo,
       "prtVcPbxCnfg": prtVcPbxCnfg,
       "prtExVcPbxCnfgTable": prtExVcPbxCnfgTable,
       "prtExVcPbxCnfgEntry": prtExVcPbxCnfgEntry,
       "prtExVcPbxCnfgIdx": prtExVcPbxCnfgIdx,
       "prtExVcPbxSltIdx": prtExVcPbxSltIdx,
       "prtExVcPbxPrtIdx": prtExVcPbxPrtIdx,
       "prtExVcPbxConnect": prtExVcPbxConnect,
       "prtExVcPbxGroup": prtExVcPbxGroup,
       "prtExVcPbxTransparent": prtExVcPbxTransparent,
       "prtExVcPbxTransSignalTs": prtExVcPbxTransSignalTs,
       "prtExVcPbxFrame": prtExVcPbxFrame,
       "prtExVcPbxRestoreTime": prtExVcPbxRestoreTime,
       "prtExVcPbxLineCode": prtExVcPbxLineCode,
       "prtExVcPbxLineLength": prtExVcPbxLineLength,
       "prtExVcPbxLinkTo": prtExVcPbxLinkTo,
       "prtExVcPbxSignalOper": prtExVcPbxSignalOper,
       "prtExVcPbxIdleCode": prtExVcPbxIdleCode,
       "prtIn1p6VcPbxCnfgTable": prtIn1p6VcPbxCnfgTable,
       "prtIn1p6VcPbxCnfgEntry": prtIn1p6VcPbxCnfgEntry,
       "prtIn1p6VcPbxCnfgIdx": prtIn1p6VcPbxCnfgIdx,
       "prtIn1p6VcPbxSltIdx": prtIn1p6VcPbxSltIdx,
       "prtIn1p6VcPbxPrtIdx": prtIn1p6VcPbxPrtIdx,
       "prtIn1p6VcPbxConnect": prtIn1p6VcPbxConnect,
       "prtIn1p6VcPbxRate": prtIn1p6VcPbxRate,
       "prtIn1p6VcPbxEchoCanceler": prtIn1p6VcPbxEchoCanceler,
       "prtIn1p6VcPbxPabxTs": prtIn1p6VcPbxPabxTs,
       "prtIn7p8VcPbxCnfgTable": prtIn7p8VcPbxCnfgTable,
       "prtIn7p8VcPbxCnfgEntry": prtIn7p8VcPbxCnfgEntry,
       "prtIn7p8VcPbxCnfgIdx": prtIn7p8VcPbxCnfgIdx,
       "prtIn7p8VcPbxSltIdx": prtIn7p8VcPbxSltIdx,
       "prtIn7p8VcPbxPrtIdx": prtIn7p8VcPbxPrtIdx,
       "prtIn7p8VcPbxConnect": prtIn7p8VcPbxConnect,
       "prtIn7p8VcPbxMode": prtIn7p8VcPbxMode,
       "prtIn7p8VcPbxRate": prtIn7p8VcPbxRate,
       "prtIn7p8VcPbxSignalMode": prtIn7p8VcPbxSignalMode,
       "prtIn7p8VcPbxOos": prtIn7p8VcPbxOos,
       "prtIn7p8VcPbxLinkTo": prtIn7p8VcPbxLinkTo,
       "prtExVcPbxTsTable": prtExVcPbxTsTable,
       "prtExVcPbxTsEntry": prtExVcPbxTsEntry,
       "prtExVcPbxTsCnfgIdx": prtExVcPbxTsCnfgIdx,
       "prtExVcPbxTsSltIdx": prtExVcPbxTsSltIdx,
       "prtExVcPbxTsPrtIdx": prtExVcPbxTsPrtIdx,
       "prtExVcPbxTsIdx": prtExVcPbxTsIdx,
       "prtExVcPbxTsMode": prtExVcPbxTsMode,
       "prtExVcPbxTsIConSlot": prtExVcPbxTsIConSlot,
       "prtExVcPbxTsIConPrt": prtExVcPbxTsIConPrt,
       "prtIsdnCnfg": prtIsdnCnfg,
       "prtIsdnCnfgTable": prtIsdnCnfgTable,
       "prtIsdnCnfgEntry": prtIsdnCnfgEntry,
       "prtIsdnCnfgIdx": prtIsdnCnfgIdx,
       "prtIsdnSltIdx": prtIsdnSltIdx,
       "prtIsdnPrtIdx": prtIsdnPrtIdx,
       "prtIsdnConnect": prtIsdnConnect,
       "prtIsdnSignalingProtocol": prtIsdnSignalingProtocol,
       "prtIsdnBasicRateLineTopology": prtIsdnBasicRateLineTopology,
       "prtIsdnMode": prtIsdnMode,
       "prtIsdnFilter": prtIsdnFilter,
       "prtIsdnSimultaneousCall": prtIsdnSimultaneousCall,
       "prtIsdnNumOfAbstractTerm": prtIsdnNumOfAbstractTerm,
       "prtIsdnSwitchMode": prtIsdnSwitchMode,
       "prtIsdnEndpointTable": prtIsdnEndpointTable,
       "prtIsdnEndpointEntry": prtIsdnEndpointEntry,
       "prtIsdnEndpointCnfgIdx": prtIsdnEndpointCnfgIdx,
       "prtIsdnEndpointSltIdx": prtIsdnEndpointSltIdx,
       "prtIsdnEndpointPrtIdx": prtIsdnEndpointPrtIdx,
       "prtIsdnEndpointIdx": prtIsdnEndpointIdx,
       "prtIsdnEndpointTeiType": prtIsdnEndpointTeiType,
       "prtIsdnEndpointTeiValue": prtIsdnEndpointTeiValue,
       "prtIsdnEndpointSpid": prtIsdnEndpointSpid,
       "prtIsdnEndpointBearerCh": prtIsdnEndpointBearerCh,
       "prtIsdnEndpointRowStatus": prtIsdnEndpointRowStatus,
       "prtIsdnDirectoryTable": prtIsdnDirectoryTable,
       "prtIsdnDirectoryEntry": prtIsdnDirectoryEntry,
       "prtIsdnDirectoryCnfgIdx": prtIsdnDirectoryCnfgIdx,
       "prtIsdnDirectorySltIdx": prtIsdnDirectorySltIdx,
       "prtIsdnDirectoryPrtIdx": prtIsdnDirectoryPrtIdx,
       "prtIsdnDirectoryLocalAddr": prtIsdnDirectoryLocalAddr,
       "prtIsdnDirectoryLocalSubAddr": prtIsdnDirectoryLocalSubAddr,
       "prtIsdnDirectoryRemoteAddr": prtIsdnDirectoryRemoteAddr,
       "prtIsdnDirectoryRemoteSubAddr": prtIsdnDirectoryRemoteSubAddr,
       "prtIsdnDirectoryPrtNu": prtIsdnDirectoryPrtNu,
       "prtIsdnDirectoryTeiId": prtIsdnDirectoryTeiId,
       "prtIsdnDirectoryRowStatus": prtIsdnDirectoryRowStatus,
       "prtIsdnDirectoryLocalAddr2": prtIsdnDirectoryLocalAddr2,
       "prtIsdnDirectoryLocalSubAddr2": prtIsdnDirectoryLocalSubAddr2,
       "prtIsdnDirectoryRemoteAddr2": prtIsdnDirectoryRemoteAddr2,
       "prtIsdnDirectoryRemoteSubAddr2": prtIsdnDirectoryRemoteSubAddr2,
       "prtLogicalCnfg": prtLogicalCnfg,
       "prtLogicalCnfgTable": prtLogicalCnfgTable,
       "prtLogicalCnfgEntry": prtLogicalCnfgEntry,
       "prtLogicalCnfgIdx": prtLogicalCnfgIdx,
       "prtLogicalSltIdx": prtLogicalSltIdx,
       "prtLogicalPrtIdx": prtLogicalPrtIdx,
       "prtLogicalConnect": prtLogicalConnect,
       "prtLogicalFunction": prtLogicalFunction,
       "prtLogicalRowStatus": prtLogicalRowStatus,
       "linkSelectorCnfgTable": linkSelectorCnfgTable,
       "linkSelectorCnfgEntry": linkSelectorCnfgEntry,
       "linkSelectorCnfgIdx": linkSelectorCnfgIdx,
       "linkSelectorSltIdx": linkSelectorSltIdx,
       "linkSelectorPrtIdx": linkSelectorPrtIdx,
       "linkSelectorMaxIdleTime": linkSelectorMaxIdleTime,
       "linkSelectorMode": linkSelectorMode,
       "linkSelectorRevert": linkSelectorRevert,
       "linkSelectorMinBUSession": linkSelectorMinBUSession,
       "linkSelectorPLinkTable": linkSelectorPLinkTable,
       "linkSelectorPLinkEntry": linkSelectorPLinkEntry,
       "pLinkCnfgIdx": pLinkCnfgIdx,
       "pLinkSltIdx": pLinkSltIdx,
       "pLinkPrtIdx": pLinkPrtIdx,
       "pLinkIdx": pLinkIdx,
       "pLinkSlotNu": pLinkSlotNu,
       "pLinkPortNu": pLinkPortNu,
       "pLinkPrioNu": pLinkPrioNu,
       "pLinkVRate": pLinkVRate,
       "prtFrPlusCnfg": prtFrPlusCnfg,
       "prtFrPlusCnfgTable": prtFrPlusCnfgTable,
       "prtFrPlusCnfgEntry": prtFrPlusCnfgEntry,
       "prtFrPlusCnfgIdx": prtFrPlusCnfgIdx,
       "prtFrPlusSltIdx": prtFrPlusSltIdx,
       "prtFrPlusPrtIdx": prtFrPlusPrtIdx,
       "prtFrPlusNotSegmentedPriorities": prtFrPlusNotSegmentedPriorities,
       "prtMl4Cnfg": prtMl4Cnfg,
       "prtMl4CnfgTable": prtMl4CnfgTable,
       "prtMl4CnfgEntry": prtMl4CnfgEntry,
       "prtMl4CnfgIdx": prtMl4CnfgIdx,
       "prtMl4SltIdx": prtMl4SltIdx,
       "prtMl4PrtIdx": prtMl4PrtIdx,
       "prtMl4SigProfile": prtMl4SigProfile,
       "prtMl4CGA": prtMl4CGA,
       "prtMl4Oos": prtMl4Oos,
       "prtMl4VoiceOos": prtMl4VoiceOos,
       "prtMl4DataOos": prtMl4DataOos,
       "prtMl4Service": prtMl4Service,
       "prtAcmCnfg": prtAcmCnfg,
       "prtAcmCnfgTable": prtAcmCnfgTable,
       "prtAcmCnfgEntry": prtAcmCnfgEntry,
       "prtAcmCnfgIdx": prtAcmCnfgIdx,
       "prtAcmSltIdx": prtAcmSltIdx,
       "prtAcmPrtIdx": prtAcmPrtIdx,
       "prtAcmConnect": prtAcmConnect,
       "prtAcmActiveState": prtAcmActiveState,
       "prtAcmAlrString": prtAcmAlrString,
       "dacsMux": dacsMux,
       "sanityCheckTrap": sanityCheckTrap,
       "dacsMuxAlarmsTrap": dacsMuxAlarmsTrap,
       "mdlConnectTrap": mdlConnectTrap,
       "sysAlrStatusTrap": sysAlrStatusTrap,
       "sysStatusChangedTrap": sysStatusChangedTrap,
       "cnfgUpdateTrap": cnfgUpdateTrap,
       "systemDacsMux": systemDacsMux,
       "sysSa": sysSa,
       "sysSaSwchStatus": sysSaSwchStatus,
       "sysSaSwRevision": sysSaSwRevision,
       "sysSaHwVersion": sysSaHwVersion,
       "sysSaPorts": sysSaPorts,
       "sysSaReadSwch": sysSaReadSwch,
       "sysHub": sysHub,
       "sysChas": sysChas,
       "chassTotalNoOfSlt": chassTotalNoOfSlt,
       "chassTotalNoOfIoSlt": chassTotalNoOfIoSlt,
       "chassTotalNoOfPsSlt": chassTotalNoOfPsSlt,
       "chassTotalNoOfClSlt": chassTotalNoOfClSlt,
       "chassTotalNoOfMlSlt": chassTotalNoOfMlSlt,
       "sysDcl": sysDcl,
       "sysDclTable": sysDclTable,
       "sysDclEntry": sysDclEntry,
       "sysDclCnfgIdx": sysDclCnfgIdx,
       "sysDclRedundancy": sysDclRedundancy,
       "sysDclActiveCl": sysDclActiveCl,
       "sysDclFlipDelay": sysDclFlipDelay,
       "sysDclOnline": sysDclOnline,
       "sysDclCopyDbTable": sysDclCopyDbTable,
       "sysDclCopyDbEntry": sysDclCopyDbEntry,
       "sysDclCopyDbIdx": sysDclCopyDbIdx,
       "sysDclCopyDbCmd": sysDclCopyDbCmd,
       "sysStatus": sysStatus,
       "sysSDateFormat": sysSDateFormat,
       "sysSDateCmd": sysSDateCmd,
       "sysSTimeCmd": sysSTimeCmd,
       "sysSActiveCnfg": sysSActiveCnfg,
       "sysSEditCnfg": sysSEditCnfg,
       "sysSEditBy": sysSEditBy,
       "sysSClkSrc": sysSClkSrc,
       "sysSAlrStatus": sysSAlrStatus,
       "sysSAlrStatusAll": sysSAlrStatusAll,
       "sysSTestStatus": sysSTestStatus,
       "sysSSanityCheckStatus": sysSSanityCheckStatus,
       "sysSNoOfSanityCheckErr": sysSNoOfSanityCheckErr,
       "sysSErrListTable": sysSErrListTable,
       "sysSErrListEntry": sysSErrListEntry,
       "sysSErrType": sysSErrType,
       "sysSErrIdx": sysSErrIdx,
       "sysSErrDescription": sysSErrDescription,
       "sysSMaxNoOfCnfg": sysSMaxNoOfCnfg,
       "sysSSelfTestResult": sysSSelfTestResult,
       "sysSRelayState": sysSRelayState,
       "sysSInvertedAlr": sysSInvertedAlr,
       "sysSRdnFlipTable": sysSRdnFlipTable,
       "sysSRdnFlipEntry": sysSRdnFlipEntry,
       "sysSRdnFlipIdx": sysSRdnFlipIdx,
       "sysSRdnFlipSlot": sysSRdnFlipSlot,
       "sysSRdnFlipPort": sysSRdnFlipPort,
       "sysSRdnFlipCause": sysSRdnFlipCause,
       "sysSRdnFlipDate": sysSRdnFlipDate,
       "sysSRdnFlipTime": sysSRdnFlipTime,
       "sysSRdnFlipTableClearCmd": sysSRdnFlipTableClearCmd,
       "sysSRdnFlipCmd": sysSRdnFlipCmd,
       "sysCurrentAlr": sysCurrentAlr,
       "sysSAlrTable": sysSAlrTable,
       "sysSAlrEntry": sysSAlrEntry,
       "sysSAlrIdx": sysSAlrIdx,
       "sysSAlrCode": sysSAlrCode,
       "sysSAlrState": sysSAlrState,
       "sysSAlarmMask": sysSAlarmMask,
       "sysSAlarmInvert": sysSAlarmInvert,
       "sysSAlrClearCmd": sysSAlrClearCmd,
       "sysSAlrClearAllCmd": sysSAlrClearAllCmd,
       "sysSAlrMaskAll": sysSAlrMaskAll,
       "sysSAlrMask": sysSAlrMask,
       "sysSAlrDataUpdateCmd": sysSAlrDataUpdateCmd,
       "sysBufferAlr": sysBufferAlr,
       "sysBufferAlrTable": sysBufferAlrTable,
       "sysBufferAlrEntry": sysBufferAlrEntry,
       "sysBufferAlrIdx": sysBufferAlrIdx,
       "sysBufferAlrCode": sysBufferAlrCode,
       "sysBufferAlrState": sysBufferAlrState,
       "sysBufferAlrSlot": sysBufferAlrSlot,
       "sysBufferAlrPort": sysBufferAlrPort,
       "sysBufferAlrDate": sysBufferAlrDate,
       "sysBufferAlrTime": sysBufferAlrTime,
       "sysBufferAlrClearCmd": sysBufferAlrClearCmd,
       "sysConfig": sysConfig,
       "sysCClkSrcTable": sysCClkSrcTable,
       "sysCClkSrcEntry": sysCClkSrcEntry,
       "sysCClkCnfgIdx": sysCClkCnfgIdx,
       "sysCClkSrcIdx": sysCClkSrcIdx,
       "sysCClkSrcMode": sysCClkSrcMode,
       "sysCClkSrcPrt": sysCClkSrcPrt,
       "sysCClkStationFreq": sysCClkStationFreq,
       "sysCnfgTable": sysCnfgTable,
       "sysCnfgEntry": sysCnfgEntry,
       "sysCnfgIdx": sysCnfgIdx,
       "sysCMatrixMode": sysCMatrixMode,
       "sysCIsdnFormat": sysCIsdnFormat,
       "sysCRoutingOnEth": sysCRoutingOnEth,
       "sysCRdnTable": sysCRdnTable,
       "sysCRdnEntry": sysCRdnEntry,
       "sysCRdnCnfgIdx": sysCRdnCnfgIdx,
       "sysCRdnPrimeSlot": sysCRdnPrimeSlot,
       "sysCRdnPrimePort": sysCRdnPrimePort,
       "sysCRdnSecSlot": sysCRdnSecSlot,
       "sysCRdnSecPort": sysCRdnSecPort,
       "sysCRdnMode": sysCRdnMode,
       "sysCRdnRecMode": sysCRdnRecMode,
       "sysCRdnRecTime": sysCRdnRecTime,
       "sysCRdnHwSwFlip": sysCRdnHwSwFlip,
       "sysCRdnRowStatus": sysCRdnRowStatus,
       "sysCRdnOnline": sysCRdnOnline,
       "sysDbase": sysDbase,
       "sysDbaseSanityCheckCmd": sysDbaseSanityCheckCmd,
       "sysDbaseDownloadCnfgIdxCmd": sysDbaseDownloadCnfgIdxCmd,
       "sysDbaseUploadCnfgIdxCmd": sysDbaseUploadCnfgIdxCmd,
       "sysDbaseFlipTable": sysDbaseFlipTable,
       "sysDbaseFlipEntry": sysDbaseFlipEntry,
       "sysDbaseFlipIdx": sysDbaseFlipIdx,
       "sysDbaseFlipTime": sysDbaseFlipTime,
       "sysDbaseFlipActivation": sysDbaseFlipActivation,
       "mdlDacsMux": mdlDacsMux,
       "mdlGen": mdlGen,
       "mdlSTable": mdlSTable,
       "mdlSEntry": mdlSEntry,
       "mdlSSltIdx": mdlSSltIdx,
       "mdlSCardType": mdlSCardType,
       "mdlSHwVer": mdlSHwVer,
       "mdlSSwVer": mdlSSwVer,
       "mdlSAlarmStatus": mdlSAlarmStatus,
       "mdlSAlarmStatusAll": mdlSAlarmStatusAll,
       "mdlSTestStatus": mdlSTestStatus,
       "mdlSHwStatus": mdlSHwStatus,
       "mdlSActivity": mdlSActivity,
       "mdlSAlrClearCmd": mdlSAlrClearCmd,
       "mdlSAlrClearAllCmd": mdlSAlrClearAllCmd,
       "mdlSAlrMaskAll": mdlSAlrMaskAll,
       "mdlSCmd": mdlSCmd,
       "mdlCTable": mdlCTable,
       "mdlCEntry": mdlCEntry,
       "mdlCConfigIdx": mdlCConfigIdx,
       "mdlCSlotIdx": mdlCSlotIdx,
       "mdlCProgCardType": mdlCProgCardType,
       "mdlCNoOfExtPrt": mdlCNoOfExtPrt,
       "mdlCNoOfIntPrt": mdlCNoOfIntPrt,
       "mdlAlr": mdlAlr,
       "mdlAlrTable": mdlAlrTable,
       "mdlAlrEntry": mdlAlrEntry,
       "mdlAlrIdx": mdlAlrIdx,
       "mdlAlrSltIdx": mdlAlrSltIdx,
       "mdlAlrCode": mdlAlrCode,
       "mdlAlrState": mdlAlrState,
       "mdlAlarmMask": mdlAlarmMask,
       "mdlAlarmInvert": mdlAlarmInvert,
       "mdlAlrMaskTable": mdlAlrMaskTable,
       "mdlAlrMaskEntry": mdlAlrMaskEntry,
       "mdlAlrMaskSltIdx": mdlAlrMaskSltIdx,
       "mdlAlrMask": mdlAlrMask,
       "mdlCl": mdlCl,
       "mdlClTable": mdlClTable,
       "mdlClEntry": mdlClEntry,
       "mdlClIdx": mdlClIdx,
       "mdlClSwchStatus": mdlClSwchStatus,
       "mdlClLastFlipDate": mdlClLastFlipDate,
       "mdlClLastFlipTime": mdlClLastFlipTime,
       "mdlClLastFlipCause": mdlClLastFlipCause,
       "mdlPs": mdlPs,
       "mdlPsTable": mdlPsTable,
       "mdlPsEntry": mdlPsEntry,
       "mdlPsIdx": mdlPsIdx,
       "mdlPsStatus": mdlPsStatus,
       "mdlPsTestResult": mdlPsTestResult,
       "prtDacsMux": prtDacsMux,
       "prtGen": prtGen,
       "prtGenParamTable": prtGenParamTable,
       "prtGenEntry": prtGenEntry,
       "prtGenPrtIdx": prtGenPrtIdx,
       "prtGenSlt": prtGenSlt,
       "prtGenExtInt": prtGenExtInt,
       "prtGenIfIndex": prtGenIfIndex,
       "prtGenActiveStatus": prtGenActiveStatus,
       "prtGenAlrStatus": prtGenAlrStatus,
       "prtGenTestStatus": prtGenTestStatus,
       "prtGenTestMask": prtGenTestMask,
       "prtGenTestCmd": prtGenTestCmd,
       "prtGenTestRunning": prtGenTestRunning,
       "prtGenType": prtGenType,
       "prtGenInterfaceType": prtGenInterfaceType,
       "prtGenAlrClearCmd": prtGenAlrClearCmd,
       "prtGenAlrMaskAll": prtGenAlrMaskAll,
       "prtGenParamStatus": prtGenParamStatus,
       "prtGenTestDurationTable": prtGenTestDurationTable,
       "prtGenTestDurationEntry": prtGenTestDurationEntry,
       "prtGenTestPrtIdx": prtGenTestPrtIdx,
       "prtGenTestIdx": prtGenTestIdx,
       "prtGenTestDuration": prtGenTestDuration,
       "prtGenTsTable": prtGenTsTable,
       "prtGenTsEntry": prtGenTsEntry,
       "prtGenTsCnfgIdx": prtGenTsCnfgIdx,
       "prtGenTsPrtIdx": prtGenTsPrtIdx,
       "prtGenTsIdx": prtGenTsIdx,
       "prtGenTsType": prtGenTsType,
       "prtGenTsIConPrt": prtGenTsIConPrt,
       "prtGenTsIConTs": prtGenTsIConTs,
       "prtAlr": prtAlr,
       "prtSAlarmTable": prtSAlarmTable,
       "prtSAlarmEntry": prtSAlarmEntry,
       "prtSAlarmIdx": prtSAlarmIdx,
       "prtSAlarmPrtIdx": prtSAlarmPrtIdx,
       "prtSAlarmCode": prtSAlarmCode,
       "prtSAlarmState": prtSAlarmState,
       "prtSAlarmMask": prtSAlarmMask,
       "prtSAlarmInvert": prtSAlarmInvert,
       "prtAlrMaskTable": prtAlrMaskTable,
       "prtAlrMaskEntry": prtAlrMaskEntry,
       "prtAlrMaskPrtIdx": prtAlrMaskPrtIdx,
       "prtAlrMask": prtAlrMask,
       "prtBertTable": prtBertTable,
       "prtBertEntry": prtBertEntry,
       "prtBertPrtIdx": prtBertPrtIdx,
       "prtBertPattern": prtBertPattern,
       "prtBertInjectRate": prtBertInjectRate,
       "prtBertInjectErrRateCmd": prtBertInjectErrRateCmd,
       "prtBertInjectSingleErrCmd": prtBertInjectSingleErrCmd,
       "prtBertRunTime": prtBertRunTime,
       "prtBertESs": prtBertESs,
       "prtBertSyncLoss": prtBertSyncLoss,
       "prtBertErrorBits": prtBertErrorBits,
       "prtBertClearCounters": prtBertClearCounters,
       "prtBertSyncStatus": prtBertSyncStatus,
       "prtBertTs": prtBertTs,
       "prtMonTable": prtMonTable,
       "prtMonEntry": prtMonEntry,
       "prtMonCnfgIdx": prtMonCnfgIdx,
       "prtMonitoringIdx": prtMonitoringIdx,
       "prtMonitoringEnable": prtMonitoringEnable,
       "prtMonitoringTSs": prtMonitoringTSs,
       "prtMonitoredPort": prtMonitoredPort,
       "prtMonitoredTSs": prtMonitoredTSs,
       "prtCfgParam": prtCfgParam,
       "prtCfgParamTable": prtCfgParamTable,
       "prtCfgParamEntry": prtCfgParamEntry,
       "prtCfgParamCnfgIdx": prtCfgParamCnfgIdx,
       "prtCfgParamIdx": prtCfgParamIdx,
       "prtCfgParamSlt": prtCfgParamSlt,
       "prtCfgParamOperatedMl": prtCfgParamOperatedMl,
       "prtCfgParamMlAtoMlBPrio": prtCfgParamMlAtoMlBPrio,
       "prtCfgParamMlBtoMlAPrio": prtCfgParamMlBtoMlAPrio,
       "prtCfgParamInbandLoopDetection": prtCfgParamInbandLoopDetection,
       "prtT1E1": prtT1E1,
       "prtT1E1StatTable": prtT1E1StatTable,
       "prtT1E1StatEntry": prtT1E1StatEntry,
       "prtT1E1SPrtIdx": prtT1E1SPrtIdx,
       "prtT1E1SSlt": prtT1E1SSlt,
       "prtT1E1OosCount": prtT1E1OosCount,
       "prtT1E1BpvLastMin": prtT1E1BpvLastMin,
       "prtT1E1BpvMax": prtT1E1BpvMax,
       "prtT1E1CnfgTable": prtT1E1CnfgTable,
       "prtT1E1CnfgEntry": prtT1E1CnfgEntry,
       "prtT1E1CnfgIdx": prtT1E1CnfgIdx,
       "prtT1E1PrtIdx": prtT1E1PrtIdx,
       "prtT1E1Slt": prtT1E1Slt,
       "prtT1E1LineType": prtT1E1LineType,
       "prtT1E1LineCode": prtT1E1LineCode,
       "prtT1E1SignalMode": prtT1E1SignalMode,
       "prtT1E1Fdl": prtT1E1Fdl,
       "prtT1E1FdlMode": prtT1E1FdlMode,
       "prtT1E1Sync": prtT1E1Sync,
       "prtT1E1CGA": prtT1E1CGA,
       "prtT1E1IdleCode": prtT1E1IdleCode,
       "prtT1E1OosSignal": prtT1E1OosSignal,
       "prtT1E1VoiceOos": prtT1E1VoiceOos,
       "prtT1E1DataOos": prtT1E1DataOos,
       "prtT1E1LineLengthMask": prtT1E1LineLengthMask,
       "prtT1E1TxGainMask": prtT1E1TxGainMask,
       "prtT1E1InbandMng": prtT1E1InbandMng,
       "prtT1E1InbandMngRate": prtT1E1InbandMngRate,
       "prtT1E1DedicatedTs": prtT1E1DedicatedTs,
       "prtT1E1InbandMngRoutProt": prtT1E1InbandMngRoutProt,
       "prtT1E1LinkMode": prtT1E1LinkMode,
       "prtT1E1Multiplier": prtT1E1Multiplier,
       "prtT1E1RxGain": prtT1E1RxGain,
       "prtT1E1RAI": prtT1E1RAI,
       "prtT1E1LineMode": prtT1E1LineMode,
       "prtT1E1TS0SaBits": prtT1E1TS0SaBits,
       "prtT1E1FdlMsgTable": prtT1E1FdlMsgTable,
       "prtT1E1FdlMsgEntry": prtT1E1FdlMsgEntry,
       "prtT1E1FdlMsgPrtIdx": prtT1E1FdlMsgPrtIdx,
       "prtT1E1FdlMsgFdlType": prtT1E1FdlMsgFdlType,
       "prtT1E1FdlMsgSlt": prtT1E1FdlMsgSlt,
       "prtT1E1FdlMsg": prtT1E1FdlMsg,
       "prtHS": prtHS,
       "prtHSParamTable": prtHSParamTable,
       "prtHSParamEntry": prtHSParamEntry,
       "prtHSCnfgIdx": prtHSCnfgIdx,
       "prtHSPrtIdx": prtHSPrtIdx,
       "prtHSSlt": prtHSSlt,
       "prtHSRate": prtHSRate,
       "prtHSFifoSize": prtHSFifoSize,
       "prtHSClkMode": prtHSClkMode,
       "prtHSCTS": prtHSCTS,
       "prtHSRtsState": prtHSRtsState,
       "prtHSBertTable": prtHSBertTable,
       "prtHSBertEntry": prtHSBertEntry,
       "prtHSBertPrtIdx": prtHSBertPrtIdx,
       "prtHSBertSlt": prtHSBertSlt,
       "prtHSBertCountClr": prtHSBertCountClr,
       "prtHSBertTestResult": prtHSBertTestResult,
       "prtSP": prtSP,
       "prtSpCnfgTable": prtSpCnfgTable,
       "prtSpCnfgEntry": prtSpCnfgEntry,
       "prtSpCnfgIdx": prtSpCnfgIdx,
       "prtSpPrtIdx": prtSpPrtIdx,
       "prtSpUsage": prtSpUsage,
       "prtSpRate": prtSpRate,
       "prtSpDataBits": prtSpDataBits,
       "prtSpParity": prtSpParity,
       "prtSpCallOutMode": prtSpCallOutMode,
       "prtSpInterface": prtSpInterface,
       "prtSpCTS": prtSpCTS,
       "prtSpDcdDelay": prtSpDcdDelay,
       "prtSpDsr": prtSpDsr,
       "prtSpNoOfRetries": prtSpNoOfRetries,
       "prtSpWaitForConnect": prtSpWaitForConnect,
       "prtSpDialMode": prtSpDialMode,
       "prtSpAltNumMode": prtSpAltNumMode,
       "prtSpPrimaryNum": prtSpPrimaryNum,
       "prtSpAltNum": prtSpAltNum,
       "prtSpRoutProtocol": prtSpRoutProtocol,
       "prtSpCmd": prtSpCmd,
       "prtSpActCallOut": prtSpActCallOut,
       "prtSpAlrRelayMode": prtSpAlrRelayMode,
       "prtDim": prtDim,
       "prtDimCnfgTable": prtDimCnfgTable,
       "prtDimCnfgEntry": prtDimCnfgEntry,
       "prtDimCnfgIdx": prtDimCnfgIdx,
       "prtDimIdx": prtDimIdx,
       "prtDimTxMode": prtDimTxMode,
       "prtDimPolarity": prtDimPolarity,
       "prtDimClkMode": prtDimClkMode,
       "prtDimMaxDelay": prtDimMaxDelay,
       "prtDimMng": prtDimMng,
       "prtDimDestTable": prtDimDestTable,
       "prtDimDestEntry": prtDimDestEntry,
       "prtDestCnfgIdx": prtDestCnfgIdx,
       "prtDestDimIdx": prtDestDimIdx,
       "prtDestIdx": prtDestIdx,
       "prtDest": prtDest,
       "prtDestConnect": prtDestConnect,
       "prtI": prtI,
       "prtICnfgTable": prtICnfgTable,
       "prtICnfgEntry": prtICnfgEntry,
       "prtICnfgIdx": prtICnfgIdx,
       "prtIIdx": prtIIdx,
       "prtIRate": prtIRate,
       "prtIConnect": prtIConnect,
       "prtHdsl": prtHdsl,
       "prtHdslTable": prtHdslTable,
       "prtHdslEntry": prtHdslEntry,
       "prtHdslIdx": prtHdslIdx,
       "prtHdslMode": prtHdslMode,
       "prtHdslRptrType": prtHdslRptrType,
       "prtT3E3": prtT3E3,
       "prtT3E3CnfgTable": prtT3E3CnfgTable,
       "prtT3E3CnfgEntry": prtT3E3CnfgEntry,
       "prtT3E3CnfgIdx": prtT3E3CnfgIdx,
       "prtT3E3PrtIdx": prtT3E3PrtIdx,
       "prtT3E3Slt": prtT3E3Slt,
       "prtT3E3LineLength": prtT3E3LineLength,
       "prtT3E3InbandMng": prtT3E3InbandMng,
       "genDacsMux": genDacsMux,
       "cmprTable": cmprTable,
       "cmprEntry": cmprEntry,
       "cmprTypeIdx": cmprTypeIdx,
       "cmprCnfgIdx": cmprCnfgIdx,
       "cmprVersion": cmprVersion,
       "cmprSltIdx": cmprSltIdx,
       "cmprPrtIdx": cmprPrtIdx,
       "cmprObj": cmprObj,
       "mapLinkTable": mapLinkTable,
       "mapLinkEntry": mapLinkEntry,
       "mapLinkIdx": mapLinkIdx,
       "mapLinkSlotIdx": mapLinkSlotIdx,
       "mapLinkPortIdx": mapLinkPortIdx,
       "mapLinkState": mapLinkState,
       "alrGenTable": alrGenTable,
       "alrGenEntry": alrGenEntry,
       "alrGenCode": alrGenCode,
       "alrGenDescription": alrGenDescription,
       "alrGenLevel": alrGenLevel,
       "alrGenSlotType": alrGenSlotType,
       "alrGenSeverity": alrGenSeverity,
       "alrGenDebounce": alrGenDebounce,
       "radBridges": radBridges,
       "radConverters": radConverters,
       "radGen": radGen,
       "systems": systems,
       "tftpStatusChangeTrap": tftpStatusChangeTrap,
       "agnStatusChangeTrap": agnStatusChangeTrap,
       "prtStatusChangeTrap": prtStatusChangeTrap,
       "radSysTR": radSysTR,
       "radRADring": radRADring,
       "radTMA": radTMA,
       "radRingMonitor": radRingMonitor,
       "radSysFddi": radSysFddi,
       "radFDX100": radFDX100,
       "radSysWan": radSysWan,
       "radMP2100": radMP2100,
       "radMP2104": radMP2104,
       "radMP2100B": radMP2100B,
       "radMP2100F": radMP2100F,
       "radMP2100H": radMP2100H,
       "radMP2104H": radMP2104H,
       "radMP2200B": radMP2200B,
       "radMP2200F": radMP2200F,
       "radMX3000": radMX3000,
       "radMX3004": radMX3004,
       "radMX30": radMX30,
       "radMX300": radMX300,
       "radVOIP": radVOIP,
       "radKM2100": radKM2100,
       "radKM2104": radKM2104,
       "radDXC30": radDXC30,
       "radDXC10A": radDXC10A,
       "radDXC8R": radDXC8R,
       "radDXC30E": radDXC30E,
       "radFcdT1": radFcdT1,
       "radFcdE1": radFcdE1,
       "radFcdE1I": radFcdE1I,
       "radFcdT1M": radFcdT1M,
       "radFcdE1M": radFcdE1M,
       "radFcdIP": radFcdIP,
       "radFcdT1A": radFcdT1A,
       "radFcdE1A": radFcdE1A,
       "radFcdW": radFcdW,
       "radHtuE1Sa": radHtuE1Sa,
       "radHtuE1": radHtuE1,
       "radHtu2Sa": radHtu2Sa,
       "radHtu2": radHtu2,
       "radAsmi450R768Sa": radAsmi450R768Sa,
       "radAsmi450R768": radAsmi450R768,
       "radAsmi450R1152Sa": radAsmi450R1152Sa,
       "radAsmi450R1152": radAsmi450R1152,
       "radLrs12F": radLrs12F,
       "radLrs12B": radLrs12B,
       "radHcdE1Sa": radHcdE1Sa,
       "radHcdE1": radHcdE1,
       "radHtuT1Sa": radHtuT1Sa,
       "radHtuT1": radHtuT1,
       "radOptimux4E1": radOptimux4E1,
       "radOptimux4T1": radOptimux4T1,
       "radOptimuxXLE1": radOptimuxXLE1,
       "radOptimuxXLT1": radOptimuxXLT1,
       "radOptimuxXL16E1": radOptimuxXL16E1,
       "radImx64": radImx64,
       "radImx6L": radImx6L,
       "radImx2": radImx2,
       "radImx4T1": radImx4T1,
       "radImx4E1": radImx4E1,
       "radImx2T1E1": radImx2T1E1,
       "radHtuE1SaV2": radHtuE1SaV2,
       "radHtuE1V2": radHtuE1V2,
       "radFomiE3": radFomiE3,
       "radFomiT3": radFomiT3,
       "radOpt4E1C": radOpt4E1C,
       "radOpt4T1C": radOpt4T1C,
       "radPrbiE3": radPrbiE3,
       "radPrbiT3": radPrbiT3,
       "radHcd4Sa": radHcd4Sa,
       "radFRmon": radFRmon,
       "radSysBRG": radSysBRG,
       "radTRE1": radTRE1,
       "radTRE1D": radTRE1D,
       "radTRE8": radTRE8,
       "radTRE8D": radTRE8D,
       "radMBE1": radMBE1,
       "radMBE1D": radMBE1D,
       "radMBE8": radMBE8,
       "radMBE8D": radMBE8D,
       "radMLBT": radMLBT,
       "radFEB4DAS": radFEB4DAS,
       "radTrimBrg10": radTrimBrg10,
       "radTrimBrg16": radTrimBrg16,
       "radRRTRE8": radRRTRE8,
       "radRRTRE8D": radRRTRE8D,
       "radRRMLBT": radRRMLBT,
       "radRRMLBTF": radRRMLBTF,
       "radRRTRE1D": radRRTRE1D,
       "radTRERAS": radTRERAS,
       "radTRERASa": radTRERASa,
       "radMBERAS": radMBERAS,
       "radMBERASa": radMBERASa,
       "radFEB4FDX": radFEB4FDX,
       "radFEB4SAS": radFEB4SAS,
       "radRRFTBDAS": radRRFTBDAS,
       "radRRFTBSAS": radRRFTBSAS,
       "radFTBDAS": radFTBDAS,
       "radFTBSAS": radFTBSAS,
       "radFastWay100": radFastWay100,
       "radSysCnvrtr": radSysCnvrtr,
       "radSTC1": radSTC1,
       "radSTC2": radSTC2,
       "radSTC1UDP": radSTC1UDP,
       "radSTC2UDP": radSTC2UDP,
       "radFTC1": radFTC1,
       "radFTC2": radFTC2,
       "radFTC1UDP": radFTC1UDP,
       "radFTC2UDP": radFTC2UDP,
       "radSEC1": radSEC1,
       "radSEC2": radSEC2,
       "radSEC1UDP": radSEC1UDP,
       "radSEC2UDP": radSEC2UDP,
       "radFEC1": radFEC1,
       "radFEC2": radFEC2,
       "radFEC1UDP": radFEC1UDP,
       "radFEC2UDP": radFEC2UDP,
       "radSysStkHub": radSysStkHub,
       "radRBHE": radRBHE,
       "radRBHT": radRBHT,
       "radETS4fddiDAS": radETS4fddiDAS,
       "radETS4fddiSAS": radETS4fddiSAS,
       "radSAHEMX": radSAHEMX,
       "radSAHTM": radSAHTM,
       "radETS4": radETS4,
       "radSAHEMU": radSAHEMU,
       "unknown": unknown,
       "radSAH16Eint": radSAH16Eint,
       "radSAH16Tint": radSAH16Tint,
       "radSAH16Eext": radSAH16Eext,
       "radSAH16Text": radSAH16Text,
       "radSysPS": radSysPS,
       "radSPS2": radSPS2,
       "radSPS3": radSPS3,
       "radSPS6": radSPS6,
       "radSPS9": radSPS9,
       "radSPS12": radSPS12,
       "radAPD2": radAPD2,
       "radAPD8": radAPD8,
       "radAPS8": radAPS8,
       "radAPS16": radAPS16,
       "radAPS24": radAPS24,
       "radSPS3S": radSPS3S,
       "radFPS8": radFPS8,
       "radFPS12": radFPS12,
       "radSPS3ScSL": radSPS3ScSL,
       "radSPS3Sc2S": radSPS3Sc2S,
       "radFPS8c": radFPS8c,
       "radFPS4": radFPS4,
       "radSysEth": radSysEth,
       "radEP8T": radEP8T,
       "radEP4TAUI": radEP4TAUI,
       "radEP4T2FL": radEP4T2FL,
       "radEP4TFL": radEP4TFL,
       "radEP4FL": radEP4FL,
       "radEPR8T": radEPR8T,
       "radEPR4TAUI": radEPR4TAUI,
       "radEPR4T2FL": radEPR4T2FL,
       "radEPR4TFL": radEPR4TFL,
       "radEPR4FL": radEPR4FL,
       "radSysRtr": radSysRtr,
       "radRTED": radRTED,
       "radRTEM": radRTEM,
       "radRTEC": radRTEC,
       "radWebRanger": radWebRanger,
       "radTinyRouter": radTinyRouter,
       "radSysAtm": radSysAtm,
       "radStarSwitch": radStarSwitch,
       "radStarSwitchATM25": radStarSwitchATM25,
       "radStarSwitchATM25L": radStarSwitchATM25L,
       "radStarSwitchATM155": radStarSwitchATM155,
       "radAtmCsuDsu": radAtmCsuDsu,
       "radAmcdE1": radAmcdE1,
       "radAmcdT1": radAmcdT1,
       "radAce20E": radAce20E,
       "radAce20T": radAce20T,
       "radAce2005": radAce2005,
       "radAce2002": radAce2002,
       "radAce2E": radAce2E,
       "radAce2T": radAce2T,
       "radAce": radAce,
       "radAce101": radAce101,
       "radAce102": radAce102,
       "agnt": agnt,
       "agnHwVersion": agnHwVersion,
       "agnTrapMask": agnTrapMask,
       "agnTrapValue": agnTrapValue,
       "agnChangeCnt": agnChangeCnt,
       "agnSpecific": agnSpecific,
       "agnConfigMsg": agnConfigMsg,
       "mngTrapIpTable": mngTrapIpTable,
       "mngEntry": mngEntry,
       "mngID": mngID,
       "mngIP": mngIP,
       "mngIPMask": mngIPMask,
       "mngTrapMask": mngTrapMask,
       "agnIndication": agnIndication,
       "agnMonitorModeCmd": agnMonitorModeCmd,
       "agnLed": agnLed,
       "trapTable": trapTable,
       "trapEntry": trapEntry,
       "trapID": trapID,
       "trapVal": trapVal,
       "trapTimeSinceOccurrence": trapTimeSinceOccurrence,
       "fileTransfer": fileTransfer,
       "fileServerIP": fileServerIP,
       "fileName": fileName,
       "fileTransCmd": fileTransCmd,
       "tftpRetryTimeOut": tftpRetryTimeOut,
       "tftpTotalTimeOut": tftpTotalTimeOut,
       "tftpStatus": tftpStatus,
       "tftpError": tftpError,
       "fileTransferToSubSystems": fileTransferToSubSystems,
       "fileNameWithinProduct": fileNameWithinProduct,
       "systemReset": systemReset,
       "systemTiming": systemTiming,
       "systemDate": systemDate,
       "systemTime": systemTime,
       "systemPort": systemPort,
       "physicalConnectorTable": physicalConnectorTable,
       "physicalConnectorEntry": physicalConnectorEntry,
       "portIdx": portIdx,
       "physicalConnector": physicalConnector,
       "portOptWaveLength": portOptWaveLength,
       "prtSupervisory": prtSupervisory,
       "prtSpTable": prtSpTable,
       "prtSpEntry": prtSpEntry,
       "prtSupervisoryIndex": prtSupervisoryIndex,
       "prtSupervisoryRate": prtSupervisoryRate,
       "prtSupervisoryDataBits": prtSupervisoryDataBits,
       "prtSupervisoryParity": prtSupervisoryParity,
       "prtSupervisoryStopBits": prtSupervisoryStopBits,
       "prtSupervisoryUsage": prtSupervisoryUsage,
       "prtSupervisoryInterface": prtSupervisoryInterface,
       "prtSupervisoryCTS": prtSupervisoryCTS,
       "prtSupervisoryDcdDelay": prtSupervisoryDcdDelay,
       "prtSupervisoryDSR": prtSupervisoryDSR,
       "prtSupervisoryRoutProtocol": prtSupervisoryRoutProtocol,
       "prtPerformance": prtPerformance,
       "prtPerfTable": prtPerfTable,
       "prtPerfEntry": prtPerfEntry,
       "prtPerfIdx": prtPerfIdx,
       "prtPerfPeriodRef": prtPerfPeriodRef,
       "prtPerfElapsedTime": prtPerfElapsedTime,
       "prtPerfUAS": prtPerfUAS,
       "prtPerfES": prtPerfES,
       "prtPerfSES": prtPerfSES,
       "prtPerfBBE": prtPerfBBE,
       "prtPerfBlocksPerSec": prtPerfBlocksPerSec,
       "prtPerfTimeTag": prtPerfTimeTag,
       "prtPerfSaveAndResetCmd": prtPerfSaveAndResetCmd,
       "prtTest": prtTest,
       "prtTestTable": prtTestTable,
       "prtTestEntry": prtTestEntry,
       "prtTestIdx": prtTestIdx,
       "prtTestCmdAndStatus": prtTestCmdAndStatus,
       "prtBertCounter": prtBertCounter,
       "prtTestInitiator": prtTestInitiator,
       "prtParam": prtParam,
       "prtParamTable": prtParamTable,
       "prtParamEntry": prtParamEntry,
       "prtParamIdx": prtParamIdx,
       "prtControlCnfg": prtControlCnfg,
       "systemResetAllStatsCmd": systemResetAllStatsCmd,
       "systemClearTablesCmd": systemClearTablesCmd,
       "systemParameter": systemParameter,
       "agnGlobalAlarmMask": agnGlobalAlarmMask,
       "alarmSeverity": alarmSeverity,
       "alarmState": alarmState,
       "agnTestStatus": agnTestStatus,
       "systemSaveAndResetAllStatsCmd": systemSaveAndResetAllStatsCmd,
       "systemDefaultGateway": systemDefaultGateway,
       "systemPsTable": systemPsTable,
       "systemPsEntry": systemPsEntry,
       "systemPsIndex1": systemPsIndex1,
       "systemPsIndex2": systemPsIndex2,
       "systemPsType": systemPsType,
       "radStkHub": radStkHub}
)

# SNMP MIB module (BTI-7000-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/BTI-7000-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 20:49:51 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(bti7000,
 btiModules) = mibBuilder.importSymbols(
    "BTI-MIB",
    "bti7000",
    "btiModules")

(AdminStatus,
 AmdPortType,
 AmdType,
 AreaID,
 BERType,
 CondReportType,
 CondServiceAffecting,
 CondSeverity,
 CpType,
 DesignatedRouterPriority,
 DuplexModeType,
 EnvNotifCodeType,
 FiberType,
 FixedX10,
 FixedX100,
 HoursAndMinutes,
 InetAddress,
 InetAddressType,
 InitializeCmd,
 LldpChassisId,
 LldpChassisIdSubtype,
 LldpPortId,
 LldpPortIdSubtype,
 LoopbackType,
 MediaRateType,
 MirrorConfigType,
 NotifCodeType,
 NotifObjectType,
 OaType,
 OcnType,
 OdunType,
 OperStatQlfr,
 OperStatus,
 PMIntervalType,
 PMMontype,
 PMValidity,
 PassivePortType,
 PowerFeedModeType,
 ProtSwEvtType,
 ProtSwOpCmd,
 ProtectionStatusType,
 PvxL1PortType,
 PvxPortType,
 ShelfConfigType,
 ShelfType,
 SlotType,
 StmnType,
 StsnType,
 SwitchIdxType,
 SyncSwEvtType,
 TimeZone,
 Unsigned64,
 UpgradeCompleteStage,
 VcnType,
 WDMGrid,
 XCType,
 XcvrProtocolType,
 XcvrType) = mibBuilder.importSymbols(
    "BTI-TC-MIB",
    "AdminStatus",
    "AmdPortType",
    "AmdType",
    "AreaID",
    "BERType",
    "CondReportType",
    "CondServiceAffecting",
    "CondSeverity",
    "CpType",
    "DesignatedRouterPriority",
    "DuplexModeType",
    "EnvNotifCodeType",
    "FiberType",
    "FixedX10",
    "FixedX100",
    "HoursAndMinutes",
    "InetAddress",
    "InetAddressType",
    "InitializeCmd",
    "LldpChassisId",
    "LldpChassisIdSubtype",
    "LldpPortId",
    "LldpPortIdSubtype",
    "LoopbackType",
    "MediaRateType",
    "MirrorConfigType",
    "NotifCodeType",
    "NotifObjectType",
    "OaType",
    "OcnType",
    "OdunType",
    "OperStatQlfr",
    "OperStatus",
    "PMIntervalType",
    "PMMontype",
    "PMValidity",
    "PassivePortType",
    "PowerFeedModeType",
    "ProtSwEvtType",
    "ProtSwOpCmd",
    "ProtectionStatusType",
    "PvxL1PortType",
    "PvxPortType",
    "ShelfConfigType",
    "ShelfType",
    "SlotType",
    "StmnType",
    "StsnType",
    "SwitchIdxType",
    "SyncSwEvtType",
    "TimeZone",
    "Unsigned64",
    "UpgradeCompleteStage",
    "VcnType",
    "WDMGrid",
    "XCType",
    "XcvrProtocolType",
    "XcvrType")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "iso")

(DateAndTime,
 DisplayString,
 MacAddress,
 RowStatus,
 TextualConvention,
 TruthValue) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DateAndTime",
    "DisplayString",
    "MacAddress",
    "RowStatus",
    "TextualConvention",
    "TruthValue")


# MODULE-IDENTITY

bti7000Mib = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 1, 3)
)
bti7000Mib.setRevisions(
        ("2012-10-09 12:00",
         "2012-08-29 12:00",
         "2012-02-10 12:00",
         "2011-09-26 12:00",
         "2011-04-26 12:00",
         "2011-03-28 12:00",
         "2011-02-25 12:00",
         "2010-09-17 12:00",
         "2010-08-06 12:00",
         "2010-06-18 12:00",
         "2010-02-12 12:00",
         "2009-01-19 12:00",
         "2008-12-19 12:00",
         "2008-10-10 12:00",
         "2008-05-30 12:00",
         "2007-09-14 12:00",
         "2007-07-16 12:00",
         "2007-03-09 12:00",
         "2006-08-25 12:00",
         "2005-12-05 12:00",
         "2005-07-25 12:00",
         "2005-01-07 12:00",
         "2004-09-23 12:00",
         "2004-09-09 14:34",
         "2004-04-14 22:35",
         "2003-12-01 12:00")
)


# Types definitions


# TEXTUAL-CONVENTIONS



class DbBackupAndRestoreCmd(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cancelRestore", 7),
          ("commitRestore", 6),
          ("invokeBackup", 2),
          ("invokeRestore", 4),
          ("loadRestore", 3),
          ("noOp", 1))
    )



class DbBackupAndRestoreType(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("remote", 2),
          ("remoteSftp", 3))
    )



class SwUpgradeCmd(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cancUpgrade", 6),
          ("checkUpgrade", 2),
          ("cmmtUpgrade", 5),
          ("invkScpUpgrade", 7),
          ("invkUpgrade", 4),
          ("loadUpgrade", 3),
          ("noOp", 1))
    )



class SwUpgradeFileTransferType(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ftp", 1),
          ("sftp", 2))
    )



class DataCommsPingCmd(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("ping", 2),
          ("pingInProgress", 3))
    )



# MIB Managed Objects in the order of their OIDs

_Objects_ObjectIdentity = ObjectIdentity
objects = _Objects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1)
)
_NetworkElement_ObjectIdentity = ObjectIdentity
networkElement = _NetworkElement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1)
)


class _NeSWVersion_Type(DisplayString):
    """Custom type neSWVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_NeSWVersion_Type.__name__ = "DisplayString"
_NeSWVersion_Object = MibScalar
neSWVersion = _NeSWVersion_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 1),
    _NeSWVersion_Type()
)
neSWVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    neSWVersion.setStatus("current")


class _NeNum_Type(Integer32):
    """Custom type neNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_NeNum_Type.__name__ = "Integer32"
_NeNum_Object = MibScalar
neNum = _NeNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 2),
    _NeNum_Type()
)
neNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neNum.setStatus("current")


class _NeSiteNum_Type(Integer32):
    """Custom type neSiteNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_NeSiteNum_Type.__name__ = "Integer32"
_NeSiteNum_Object = MibScalar
neSiteNum = _NeSiteNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 3),
    _NeSiteNum_Type()
)
neSiteNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neSiteNum.setStatus("current")
_NeDateAndTime_Type = DateAndTime
_NeDateAndTime_Object = MibScalar
neDateAndTime = _NeDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 4),
    _NeDateAndTime_Type()
)
neDateAndTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neDateAndTime.setStatus("current")
_NeTimeZone_Type = TimeZone
_NeTimeZone_Object = MibScalar
neTimeZone = _NeTimeZone_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 5),
    _NeTimeZone_Type()
)
neTimeZone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neTimeZone.setStatus("current")


class _NeAutoDST_Type(Integer32):
    """Custom type neAutoDST based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_NeAutoDST_Type.__name__ = "Integer32"
_NeAutoDST_Object = MibScalar
neAutoDST = _NeAutoDST_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 6),
    _NeAutoDST_Type()
)
neAutoDST.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neAutoDST.setStatus("current")
_NeGateway_Type = IpAddress
_NeGateway_Object = MibScalar
neGateway = _NeGateway_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 7),
    _NeGateway_Type()
)
neGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neGateway.setStatus("current")
_NeSecGateway_Type = IpAddress
_NeSecGateway_Object = MibScalar
neSecGateway = _NeSecGateway_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 8),
    _NeSecGateway_Type()
)
neSecGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neSecGateway.setStatus("current")
_NeActiveGateway_Type = IpAddress
_NeActiveGateway_Object = MibScalar
neActiveGateway = _NeActiveGateway_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 9),
    _NeActiveGateway_Type()
)
neActiveGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    neActiveGateway.setStatus("current")


class _NeAutoProv_Type(Integer32):
    """Custom type neAutoProv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("autoEnabled", 3),
          ("autoProvOff", 4),
          ("disabled", 2),
          ("enabled", 1))
    )


_NeAutoProv_Type.__name__ = "Integer32"
_NeAutoProv_Object = MibScalar
neAutoProv = _NeAutoProv_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 10),
    _NeAutoProv_Type()
)
neAutoProv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neAutoProv.setStatus("current")
_NeAutoDeProv_Type = HoursAndMinutes
_NeAutoDeProv_Object = MibScalar
neAutoDeProv = _NeAutoDeProv_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 11),
    _NeAutoDeProv_Type()
)
neAutoDeProv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neAutoDeProv.setStatus("obsolete")
_NeAutoEnabledTimer_Type = HoursAndMinutes
_NeAutoEnabledTimer_Object = MibScalar
neAutoEnabledTimer = _NeAutoEnabledTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 12),
    _NeAutoEnabledTimer_Type()
)
neAutoEnabledTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neAutoEnabledTimer.setStatus("current")
_NtpClient_ObjectIdentity = ObjectIdentity
ntpClient = _NtpClient_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13)
)
_NtpClientPollingRate_Type = HoursAndMinutes
_NtpClientPollingRate_Object = MibScalar
ntpClientPollingRate = _NtpClientPollingRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 1),
    _NtpClientPollingRate_Type()
)
ntpClientPollingRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpClientPollingRate.setStatus("current")


class _NtpClientAuthKey_Type(Integer32):
    """Custom type ntpClientAuthKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_NtpClientAuthKey_Type.__name__ = "Integer32"
_NtpClientAuthKey_Object = MibScalar
ntpClientAuthKey = _NtpClientAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 2),
    _NtpClientAuthKey_Type()
)
ntpClientAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpClientAuthKey.setStatus("obsolete")


class _NtpClientSyncState_Type(DisplayString):
    """Custom type ntpClientSyncState based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_NtpClientSyncState_Type.__name__ = "DisplayString"
_NtpClientSyncState_Object = MibScalar
ntpClientSyncState = _NtpClientSyncState_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 3),
    _NtpClientSyncState_Type()
)
ntpClientSyncState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpClientSyncState.setStatus("current")


class _NtpClientStratum_Type(Integer32):
    """Custom type ntpClientStratum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_NtpClientStratum_Type.__name__ = "Integer32"
_NtpClientStratum_Object = MibScalar
ntpClientStratum = _NtpClientStratum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 4),
    _NtpClientStratum_Type()
)
ntpClientStratum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpClientStratum.setStatus("current")


class _NtpClientRefIPAddr_Type(DisplayString):
    """Custom type ntpClientRefIPAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_NtpClientRefIPAddr_Type.__name__ = "DisplayString"
_NtpClientRefIPAddr_Object = MibScalar
ntpClientRefIPAddr = _NtpClientRefIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 5),
    _NtpClientRefIPAddr_Type()
)
ntpClientRefIPAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpClientRefIPAddr.setStatus("current")
_NtpClientAssocTable_Object = MibTable
ntpClientAssocTable = _NtpClientAssocTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6)
)
if mibBuilder.loadTexts:
    ntpClientAssocTable.setStatus("current")
_NtpClientAssocEntry_Object = MibTableRow
ntpClientAssocEntry = _NtpClientAssocEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1)
)
ntpClientAssocEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ntpClientAssocIdx"),
)
if mibBuilder.loadTexts:
    ntpClientAssocEntry.setStatus("current")
_NtpClientAssocIdx_Type = IpAddress
_NtpClientAssocIdx_Object = MibTableColumn
ntpClientAssocIdx = _NtpClientAssocIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1, 1),
    _NtpClientAssocIdx_Type()
)
ntpClientAssocIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ntpClientAssocIdx.setStatus("current")
_NtpClientAssocRowStatus_Type = RowStatus
_NtpClientAssocRowStatus_Object = MibTableColumn
ntpClientAssocRowStatus = _NtpClientAssocRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1, 100),
    _NtpClientAssocRowStatus_Type()
)
ntpClientAssocRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ntpClientAssocRowStatus.setStatus("current")
_NtpOldTimeAndDate_Type = DateAndTime
_NtpOldTimeAndDate_Object = MibScalar
ntpOldTimeAndDate = _NtpOldTimeAndDate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 7),
    _NtpOldTimeAndDate_Type()
)
ntpOldTimeAndDate.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ntpOldTimeAndDate.setStatus("current")
_NtpNewTimeAndDate_Type = DateAndTime
_NtpNewTimeAndDate_Object = MibScalar
ntpNewTimeAndDate = _NtpNewTimeAndDate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 8),
    _NtpNewTimeAndDate_Type()
)
ntpNewTimeAndDate.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ntpNewTimeAndDate.setStatus("current")
_NtpRefIP_Type = IpAddress
_NtpRefIP_Object = MibScalar
ntpRefIP = _NtpRefIP_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 9),
    _NtpRefIP_Type()
)
ntpRefIP.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ntpRefIP.setStatus("current")
_NtpRefStratum_Type = Unsigned32
_NtpRefStratum_Object = MibScalar
ntpRefStratum = _NtpRefStratum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 10),
    _NtpRefStratum_Type()
)
ntpRefStratum.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ntpRefStratum.setStatus("current")


class _NeFPDetect_Type(Integer32):
    """Custom type neFPDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_NeFPDetect_Type.__name__ = "Integer32"
_NeFPDetect_Object = MibScalar
neFPDetect = _NeFPDetect_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 14),
    _NeFPDetect_Type()
)
neFPDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neFPDetect.setStatus("current")


class _NeHTAutoShutdown_Type(Integer32):
    """Custom type neHTAutoShutdown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_NeHTAutoShutdown_Type.__name__ = "Integer32"
_NeHTAutoShutdown_Object = MibScalar
neHTAutoShutdown = _NeHTAutoShutdown_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 15),
    _NeHTAutoShutdown_Type()
)
neHTAutoShutdown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    neHTAutoShutdown.setStatus("current")
_Inventory_ObjectIdentity = ObjectIdentity
inventory = _Inventory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2)
)
_ShelfInvTable_Object = MibTable
shelfInvTable = _ShelfInvTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1)
)
if mibBuilder.loadTexts:
    shelfInvTable.setStatus("current")
_ShelfInvEntry_Object = MibTableRow
shelfInvEntry = _ShelfInvEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1)
)
shelfInvEntry.setIndexNames(
    (0, "BTI-7000-MIB", "shelfInvIdx"),
)
if mibBuilder.loadTexts:
    shelfInvEntry.setStatus("current")


class _ShelfInvIdx_Type(Integer32):
    """Custom type shelfInvIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_ShelfInvIdx_Type.__name__ = "Integer32"
_ShelfInvIdx_Object = MibTableColumn
shelfInvIdx = _ShelfInvIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 1),
    _ShelfInvIdx_Type()
)
shelfInvIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvIdx.setStatus("current")


class _ShelfInvExpectedNEName_Type(DisplayString):
    """Custom type shelfInvExpectedNEName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_ShelfInvExpectedNEName_Type.__name__ = "DisplayString"
_ShelfInvExpectedNEName_Object = MibTableColumn
shelfInvExpectedNEName = _ShelfInvExpectedNEName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 2),
    _ShelfInvExpectedNEName_Type()
)
shelfInvExpectedNEName.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvExpectedNEName.setStatus("current")


class _ShelfInvExpectedIPAddress_Type(DisplayString):
    """Custom type shelfInvExpectedIPAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_ShelfInvExpectedIPAddress_Type.__name__ = "DisplayString"
_ShelfInvExpectedIPAddress_Object = MibTableColumn
shelfInvExpectedIPAddress = _ShelfInvExpectedIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 3),
    _ShelfInvExpectedIPAddress_Type()
)
shelfInvExpectedIPAddress.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvExpectedIPAddress.setStatus("current")


class _ShelfInvExpectedShelfNum_Type(Integer32):
    """Custom type shelfInvExpectedShelfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_ShelfInvExpectedShelfNum_Type.__name__ = "Integer32"
_ShelfInvExpectedShelfNum_Object = MibTableColumn
shelfInvExpectedShelfNum = _ShelfInvExpectedShelfNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 4),
    _ShelfInvExpectedShelfNum_Type()
)
shelfInvExpectedShelfNum.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvExpectedShelfNum.setStatus("current")


class _ShelfInvExpectedMSISerialNum_Type(DisplayString):
    """Custom type shelfInvExpectedMSISerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ShelfInvExpectedMSISerialNum_Type.__name__ = "DisplayString"
_ShelfInvExpectedMSISerialNum_Object = MibTableColumn
shelfInvExpectedMSISerialNum = _ShelfInvExpectedMSISerialNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 5),
    _ShelfInvExpectedMSISerialNum_Type()
)
shelfInvExpectedMSISerialNum.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvExpectedMSISerialNum.setStatus("current")


class _ShelfInvDiscoveredNEName_Type(DisplayString):
    """Custom type shelfInvDiscoveredNEName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_ShelfInvDiscoveredNEName_Type.__name__ = "DisplayString"
_ShelfInvDiscoveredNEName_Object = MibTableColumn
shelfInvDiscoveredNEName = _ShelfInvDiscoveredNEName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 6),
    _ShelfInvDiscoveredNEName_Type()
)
shelfInvDiscoveredNEName.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvDiscoveredNEName.setStatus("current")


class _ShelfInvDiscoveredIPAddress_Type(DisplayString):
    """Custom type shelfInvDiscoveredIPAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_ShelfInvDiscoveredIPAddress_Type.__name__ = "DisplayString"
_ShelfInvDiscoveredIPAddress_Object = MibTableColumn
shelfInvDiscoveredIPAddress = _ShelfInvDiscoveredIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 7),
    _ShelfInvDiscoveredIPAddress_Type()
)
shelfInvDiscoveredIPAddress.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvDiscoveredIPAddress.setStatus("current")


class _ShelfInvDiscoveredShelfNum_Type(Integer32):
    """Custom type shelfInvDiscoveredShelfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_ShelfInvDiscoveredShelfNum_Type.__name__ = "Integer32"
_ShelfInvDiscoveredShelfNum_Object = MibTableColumn
shelfInvDiscoveredShelfNum = _ShelfInvDiscoveredShelfNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 8),
    _ShelfInvDiscoveredShelfNum_Type()
)
shelfInvDiscoveredShelfNum.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvDiscoveredShelfNum.setStatus("current")


class _ShelfInvDiscoveredMSISerialNum_Type(DisplayString):
    """Custom type shelfInvDiscoveredMSISerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ShelfInvDiscoveredMSISerialNum_Type.__name__ = "DisplayString"
_ShelfInvDiscoveredMSISerialNum_Object = MibTableColumn
shelfInvDiscoveredMSISerialNum = _ShelfInvDiscoveredMSISerialNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 9),
    _ShelfInvDiscoveredMSISerialNum_Type()
)
shelfInvDiscoveredMSISerialNum.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfInvDiscoveredMSISerialNum.setStatus("current")
_ShelfInvType_Type = ShelfType
_ShelfInvType_Object = MibTableColumn
shelfInvType = _ShelfInvType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 10),
    _ShelfInvType_Type()
)
shelfInvType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvType.setStatus("current")


class _ShelfInvShortName_Type(DisplayString):
    """Custom type shelfInvShortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_ShelfInvShortName_Type.__name__ = "DisplayString"
_ShelfInvShortName_Object = MibTableColumn
shelfInvShortName = _ShelfInvShortName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 11),
    _ShelfInvShortName_Type()
)
shelfInvShortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvShortName.setStatus("current")


class _ShelfInvName_Type(DisplayString):
    """Custom type shelfInvName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_ShelfInvName_Type.__name__ = "DisplayString"
_ShelfInvName_Object = MibTableColumn
shelfInvName = _ShelfInvName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 12),
    _ShelfInvName_Type()
)
shelfInvName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvName.setStatus("current")


class _ShelfInvChassisPEC_Type(DisplayString):
    """Custom type shelfInvChassisPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ShelfInvChassisPEC_Type.__name__ = "DisplayString"
_ShelfInvChassisPEC_Object = MibTableColumn
shelfInvChassisPEC = _ShelfInvChassisPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 13),
    _ShelfInvChassisPEC_Type()
)
shelfInvChassisPEC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvChassisPEC.setStatus("current")


class _ShelfInvChassisCLEI_Type(DisplayString):
    """Custom type shelfInvChassisCLEI based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ShelfInvChassisCLEI_Type.__name__ = "DisplayString"
_ShelfInvChassisCLEI_Object = MibTableColumn
shelfInvChassisCLEI = _ShelfInvChassisCLEI_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 14),
    _ShelfInvChassisCLEI_Type()
)
shelfInvChassisCLEI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvChassisCLEI.setStatus("current")


class _ShelfInvAssemblyPEC_Type(DisplayString):
    """Custom type shelfInvAssemblyPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ShelfInvAssemblyPEC_Type.__name__ = "DisplayString"
_ShelfInvAssemblyPEC_Object = MibTableColumn
shelfInvAssemblyPEC = _ShelfInvAssemblyPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 15),
    _ShelfInvAssemblyPEC_Type()
)
shelfInvAssemblyPEC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvAssemblyPEC.setStatus("obsolete")


class _ShelfInvRev_Type(Integer32):
    """Custom type shelfInvRev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_ShelfInvRev_Type.__name__ = "Integer32"
_ShelfInvRev_Object = MibTableColumn
shelfInvRev = _ShelfInvRev_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 16),
    _ShelfInvRev_Type()
)
shelfInvRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvRev.setStatus("current")
_ShelfInvConfig_Type = ShelfConfigType
_ShelfInvConfig_Object = MibTableColumn
shelfInvConfig = _ShelfInvConfig_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 17),
    _ShelfInvConfig_Type()
)
shelfInvConfig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvConfig.setStatus("deprecated")


class _ShelfInvUSI_Type(DisplayString):
    """Custom type shelfInvUSI based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ShelfInvUSI_Type.__name__ = "DisplayString"
_ShelfInvUSI_Object = MibTableColumn
shelfInvUSI = _ShelfInvUSI_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 18),
    _ShelfInvUSI_Type()
)
shelfInvUSI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvUSI.setStatus("current")


class _ShelfInvSerialNum_Type(DisplayString):
    """Custom type shelfInvSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ShelfInvSerialNum_Type.__name__ = "DisplayString"
_ShelfInvSerialNum_Object = MibTableColumn
shelfInvSerialNum = _ShelfInvSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 19),
    _ShelfInvSerialNum_Type()
)
shelfInvSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvSerialNum.setStatus("current")


class _ShelfInvMfgDate_Type(DisplayString):
    """Custom type shelfInvMfgDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ShelfInvMfgDate_Type.__name__ = "DisplayString"
_ShelfInvMfgDate_Object = MibTableColumn
shelfInvMfgDate = _ShelfInvMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 20),
    _ShelfInvMfgDate_Type()
)
shelfInvMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvMfgDate.setStatus("current")


class _ShelfInvMfgLoc_Type(DisplayString):
    """Custom type shelfInvMfgLoc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ShelfInvMfgLoc_Type.__name__ = "DisplayString"
_ShelfInvMfgLoc_Object = MibTableColumn
shelfInvMfgLoc = _ShelfInvMfgLoc_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 21),
    _ShelfInvMfgLoc_Type()
)
shelfInvMfgLoc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvMfgLoc.setStatus("current")


class _ShelfInvTestDate_Type(DisplayString):
    """Custom type shelfInvTestDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ShelfInvTestDate_Type.__name__ = "DisplayString"
_ShelfInvTestDate_Object = MibTableColumn
shelfInvTestDate = _ShelfInvTestDate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 22),
    _ShelfInvTestDate_Type()
)
shelfInvTestDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvTestDate.setStatus("current")


class _ShelfInvTestLoc_Type(DisplayString):
    """Custom type shelfInvTestLoc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ShelfInvTestLoc_Type.__name__ = "DisplayString"
_ShelfInvTestLoc_Object = MibTableColumn
shelfInvTestLoc = _ShelfInvTestLoc_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 23),
    _ShelfInvTestLoc_Type()
)
shelfInvTestLoc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfInvTestLoc.setStatus("current")
_SlotInvTable_Object = MibTable
slotInvTable = _SlotInvTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2)
)
if mibBuilder.loadTexts:
    slotInvTable.setStatus("current")
_SlotInvEntry_Object = MibTableRow
slotInvEntry = _SlotInvEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1)
)
slotInvEntry.setIndexNames(
    (0, "BTI-7000-MIB", "slotInvShelfIdx"),
    (0, "BTI-7000-MIB", "slotInvSlotTypeIdx"),
    (0, "BTI-7000-MIB", "slotInvSlotIdx"),
)
if mibBuilder.loadTexts:
    slotInvEntry.setStatus("current")


class _SlotInvShelfIdx_Type(Integer32):
    """Custom type slotInvShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_SlotInvShelfIdx_Type.__name__ = "Integer32"
_SlotInvShelfIdx_Object = MibTableColumn
slotInvShelfIdx = _SlotInvShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 1),
    _SlotInvShelfIdx_Type()
)
slotInvShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    slotInvShelfIdx.setStatus("current")
_SlotInvSlotTypeIdx_Type = SlotType
_SlotInvSlotTypeIdx_Object = MibTableColumn
slotInvSlotTypeIdx = _SlotInvSlotTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 2),
    _SlotInvSlotTypeIdx_Type()
)
slotInvSlotTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    slotInvSlotTypeIdx.setStatus("current")


class _SlotInvSlotIdx_Type(Integer32):
    """Custom type slotInvSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_SlotInvSlotIdx_Type.__name__ = "Integer32"
_SlotInvSlotIdx_Object = MibTableColumn
slotInvSlotIdx = _SlotInvSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 3),
    _SlotInvSlotIdx_Type()
)
slotInvSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    slotInvSlotIdx.setStatus("current")


class _SlotInvSWVersion_Type(DisplayString):
    """Custom type slotInvSWVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SlotInvSWVersion_Type.__name__ = "DisplayString"
_SlotInvSWVersion_Object = MibTableColumn
slotInvSWVersion = _SlotInvSWVersion_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 4),
    _SlotInvSWVersion_Type()
)
slotInvSWVersion.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    slotInvSWVersion.setStatus("current")


class _SlotInvPackShortName_Type(DisplayString):
    """Custom type slotInvPackShortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_SlotInvPackShortName_Type.__name__ = "DisplayString"
_SlotInvPackShortName_Object = MibTableColumn
slotInvPackShortName = _SlotInvPackShortName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 5),
    _SlotInvPackShortName_Type()
)
slotInvPackShortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackShortName.setStatus("current")


class _SlotInvPackName_Type(DisplayString):
    """Custom type slotInvPackName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_SlotInvPackName_Type.__name__ = "DisplayString"
_SlotInvPackName_Object = MibTableColumn
slotInvPackName = _SlotInvPackName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 6),
    _SlotInvPackName_Type()
)
slotInvPackName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackName.setStatus("current")


class _SlotInvPackPEC_Type(DisplayString):
    """Custom type slotInvPackPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SlotInvPackPEC_Type.__name__ = "DisplayString"
_SlotInvPackPEC_Object = MibTableColumn
slotInvPackPEC = _SlotInvPackPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 7),
    _SlotInvPackPEC_Type()
)
slotInvPackPEC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackPEC.setStatus("current")


class _SlotInvPackCLEI_Type(DisplayString):
    """Custom type slotInvPackCLEI based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SlotInvPackCLEI_Type.__name__ = "DisplayString"
_SlotInvPackCLEI_Object = MibTableColumn
slotInvPackCLEI = _SlotInvPackCLEI_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 8),
    _SlotInvPackCLEI_Type()
)
slotInvPackCLEI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackCLEI.setStatus("current")


class _SlotInvPackSerialNum_Type(DisplayString):
    """Custom type slotInvPackSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SlotInvPackSerialNum_Type.__name__ = "DisplayString"
_SlotInvPackSerialNum_Object = MibTableColumn
slotInvPackSerialNum = _SlotInvPackSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 9),
    _SlotInvPackSerialNum_Type()
)
slotInvPackSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackSerialNum.setStatus("current")


class _SlotInvPackRev_Type(Integer32):
    """Custom type slotInvPackRev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SlotInvPackRev_Type.__name__ = "Integer32"
_SlotInvPackRev_Object = MibTableColumn
slotInvPackRev = _SlotInvPackRev_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 10),
    _SlotInvPackRev_Type()
)
slotInvPackRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackRev.setStatus("current")


class _SlotInvPackMfgDate_Type(DisplayString):
    """Custom type slotInvPackMfgDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SlotInvPackMfgDate_Type.__name__ = "DisplayString"
_SlotInvPackMfgDate_Object = MibTableColumn
slotInvPackMfgDate = _SlotInvPackMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 11),
    _SlotInvPackMfgDate_Type()
)
slotInvPackMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackMfgDate.setStatus("current")


class _SlotInvPackMfgLoc_Type(DisplayString):
    """Custom type slotInvPackMfgLoc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SlotInvPackMfgLoc_Type.__name__ = "DisplayString"
_SlotInvPackMfgLoc_Object = MibTableColumn
slotInvPackMfgLoc = _SlotInvPackMfgLoc_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 12),
    _SlotInvPackMfgLoc_Type()
)
slotInvPackMfgLoc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackMfgLoc.setStatus("current")


class _SlotInvPackTestDate_Type(DisplayString):
    """Custom type slotInvPackTestDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SlotInvPackTestDate_Type.__name__ = "DisplayString"
_SlotInvPackTestDate_Object = MibTableColumn
slotInvPackTestDate = _SlotInvPackTestDate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 13),
    _SlotInvPackTestDate_Type()
)
slotInvPackTestDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackTestDate.setStatus("current")


class _SlotInvPackTestLoc_Type(DisplayString):
    """Custom type slotInvPackTestLoc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SlotInvPackTestLoc_Type.__name__ = "DisplayString"
_SlotInvPackTestLoc_Object = MibTableColumn
slotInvPackTestLoc = _SlotInvPackTestLoc_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 14),
    _SlotInvPackTestLoc_Type()
)
slotInvPackTestLoc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackTestLoc.setStatus("current")
_SlotInvUpgradeStage_Type = UpgradeCompleteStage
_SlotInvUpgradeStage_Object = MibTableColumn
slotInvUpgradeStage = _SlotInvUpgradeStage_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 15),
    _SlotInvUpgradeStage_Type()
)
slotInvUpgradeStage.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    slotInvUpgradeStage.setStatus("current")


class _SlotInvUpgradeResult_Type(Integer32):
    """Custom type slotInvUpgradeResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("failure", 2),
          ("success", 1))
    )


_SlotInvUpgradeResult_Type.__name__ = "Integer32"
_SlotInvUpgradeResult_Object = MibTableColumn
slotInvUpgradeResult = _SlotInvUpgradeResult_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 16),
    _SlotInvUpgradeResult_Type()
)
slotInvUpgradeResult.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    slotInvUpgradeResult.setStatus("current")


class _SlotInvPackUSI_Type(DisplayString):
    """Custom type slotInvPackUSI based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SlotInvPackUSI_Type.__name__ = "DisplayString"
_SlotInvPackUSI_Object = MibTableColumn
slotInvPackUSI = _SlotInvPackUSI_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 17),
    _SlotInvPackUSI_Type()
)
slotInvPackUSI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvPackUSI.setStatus("current")


class _SlotInvTempHighTh_Type(Integer32):
    """Custom type slotInvTempHighTh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SlotInvTempHighTh_Type.__name__ = "Integer32"
_SlotInvTempHighTh_Object = MibTableColumn
slotInvTempHighTh = _SlotInvTempHighTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 18),
    _SlotInvTempHighTh_Type()
)
slotInvTempHighTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvTempHighTh.setStatus("current")
if mibBuilder.loadTexts:
    slotInvTempHighTh.setUnits("degrees Celsius")


class _SlotInvTempShutdownTh_Type(Integer32):
    """Custom type slotInvTempShutdownTh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SlotInvTempShutdownTh_Type.__name__ = "Integer32"
_SlotInvTempShutdownTh_Object = MibTableColumn
slotInvTempShutdownTh = _SlotInvTempShutdownTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 19),
    _SlotInvTempShutdownTh_Type()
)
slotInvTempShutdownTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvTempShutdownTh.setStatus("current")
if mibBuilder.loadTexts:
    slotInvTempShutdownTh.setUnits("degrees Celsius")
_PluggableInvTable_Object = MibTable
pluggableInvTable = _PluggableInvTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3)
)
if mibBuilder.loadTexts:
    pluggableInvTable.setStatus("current")
_PluggableInvEntry_Object = MibTableRow
pluggableInvEntry = _PluggableInvEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1)
)
pluggableInvEntry.setIndexNames(
    (0, "BTI-7000-MIB", "pluggableInvShelfIdx"),
    (0, "BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
    (0, "BTI-7000-MIB", "pluggableInvSlotIdx"),
    (0, "BTI-7000-MIB", "pluggableInvPortIdx"),
)
if mibBuilder.loadTexts:
    pluggableInvEntry.setStatus("current")


class _PluggableInvShelfIdx_Type(Integer32):
    """Custom type pluggableInvShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_PluggableInvShelfIdx_Type.__name__ = "Integer32"
_PluggableInvShelfIdx_Object = MibTableColumn
pluggableInvShelfIdx = _PluggableInvShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 1),
    _PluggableInvShelfIdx_Type()
)
pluggableInvShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pluggableInvShelfIdx.setStatus("current")
_PluggableInvSlotTypeIdx_Type = SlotType
_PluggableInvSlotTypeIdx_Object = MibTableColumn
pluggableInvSlotTypeIdx = _PluggableInvSlotTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 2),
    _PluggableInvSlotTypeIdx_Type()
)
pluggableInvSlotTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pluggableInvSlotTypeIdx.setStatus("current")


class _PluggableInvSlotIdx_Type(Integer32):
    """Custom type pluggableInvSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_PluggableInvSlotIdx_Type.__name__ = "Integer32"
_PluggableInvSlotIdx_Object = MibTableColumn
pluggableInvSlotIdx = _PluggableInvSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 3),
    _PluggableInvSlotIdx_Type()
)
pluggableInvSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pluggableInvSlotIdx.setStatus("current")


class _PluggableInvPortIdx_Type(Integer32):
    """Custom type pluggableInvPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_PluggableInvPortIdx_Type.__name__ = "Integer32"
_PluggableInvPortIdx_Object = MibTableColumn
pluggableInvPortIdx = _PluggableInvPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 4),
    _PluggableInvPortIdx_Type()
)
pluggableInvPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pluggableInvPortIdx.setStatus("current")


class _PluggableInvType_Type(Integer32):
    """Custom type pluggableInvType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("sfp", 2),
          ("unknown", 1),
          ("xfp", 3))
    )


_PluggableInvType_Type.__name__ = "Integer32"
_PluggableInvType_Object = MibTableColumn
pluggableInvType = _PluggableInvType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 5),
    _PluggableInvType_Type()
)
pluggableInvType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvType.setStatus("current")


class _PluggableInvPEC_Type(DisplayString):
    """Custom type pluggableInvPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PluggableInvPEC_Type.__name__ = "DisplayString"
_PluggableInvPEC_Object = MibTableColumn
pluggableInvPEC = _PluggableInvPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 6),
    _PluggableInvPEC_Type()
)
pluggableInvPEC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvPEC.setStatus("current")


class _PluggableInvCLEI_Type(DisplayString):
    """Custom type pluggableInvCLEI based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PluggableInvCLEI_Type.__name__ = "DisplayString"
_PluggableInvCLEI_Object = MibTableColumn
pluggableInvCLEI = _PluggableInvCLEI_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 7),
    _PluggableInvCLEI_Type()
)
pluggableInvCLEI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvCLEI.setStatus("current")


class _PluggableInvVendorName_Type(DisplayString):
    """Custom type pluggableInvVendorName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_PluggableInvVendorName_Type.__name__ = "DisplayString"
_PluggableInvVendorName_Object = MibTableColumn
pluggableInvVendorName = _PluggableInvVendorName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 8),
    _PluggableInvVendorName_Type()
)
pluggableInvVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvVendorName.setStatus("current")


class _PluggableInvVendorOUI_Type(DisplayString):
    """Custom type pluggableInvVendorOUI based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_PluggableInvVendorOUI_Type.__name__ = "DisplayString"
_PluggableInvVendorOUI_Object = MibTableColumn
pluggableInvVendorOUI = _PluggableInvVendorOUI_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 9),
    _PluggableInvVendorOUI_Type()
)
pluggableInvVendorOUI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvVendorOUI.setStatus("current")


class _PluggableInvVendorPartNum_Type(DisplayString):
    """Custom type pluggableInvVendorPartNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_PluggableInvVendorPartNum_Type.__name__ = "DisplayString"
_PluggableInvVendorPartNum_Object = MibTableColumn
pluggableInvVendorPartNum = _PluggableInvVendorPartNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 10),
    _PluggableInvVendorPartNum_Type()
)
pluggableInvVendorPartNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvVendorPartNum.setStatus("current")


class _PluggableInvVendorRev_Type(DisplayString):
    """Custom type pluggableInvVendorRev based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_PluggableInvVendorRev_Type.__name__ = "DisplayString"
_PluggableInvVendorRev_Object = MibTableColumn
pluggableInvVendorRev = _PluggableInvVendorRev_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 11),
    _PluggableInvVendorRev_Type()
)
pluggableInvVendorRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvVendorRev.setStatus("current")


class _PluggableInvVendorSerialNum_Type(DisplayString):
    """Custom type pluggableInvVendorSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PluggableInvVendorSerialNum_Type.__name__ = "DisplayString"
_PluggableInvVendorSerialNum_Object = MibTableColumn
pluggableInvVendorSerialNum = _PluggableInvVendorSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 12),
    _PluggableInvVendorSerialNum_Type()
)
pluggableInvVendorSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvVendorSerialNum.setStatus("current")


class _PluggableInvMfgDate_Type(DisplayString):
    """Custom type pluggableInvMfgDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_PluggableInvMfgDate_Type.__name__ = "DisplayString"
_PluggableInvMfgDate_Object = MibTableColumn
pluggableInvMfgDate = _PluggableInvMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 13),
    _PluggableInvMfgDate_Type()
)
pluggableInvMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvMfgDate.setStatus("current")


class _PluggableInvConnectorType_Type(Integer32):
    """Custom type pluggableInvConnectorType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("bnctnc", 5),
          ("cp", 14),
          ("fcch", 6),
          ("fcs1cc", 3),
          ("fcs2cc", 4),
          ("fj", 7),
          ("hssdc2", 13),
          ("lc", 8),
          ("mtrj", 9),
          ("mu", 10),
          ("op", 12),
          ("sc", 2),
          ("sg", 11),
          ("unknown", 1),
          ("vs", 15))
    )


_PluggableInvConnectorType_Type.__name__ = "Integer32"
_PluggableInvConnectorType_Object = MibTableColumn
pluggableInvConnectorType = _PluggableInvConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 14),
    _PluggableInvConnectorType_Type()
)
pluggableInvConnectorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvConnectorType.setStatus("current")


class _PluggableInvMinBitRate_Type(Integer32):
    """Custom type pluggableInvMinBitRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_PluggableInvMinBitRate_Type.__name__ = "Integer32"
_PluggableInvMinBitRate_Object = MibTableColumn
pluggableInvMinBitRate = _PluggableInvMinBitRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 15),
    _PluggableInvMinBitRate_Type()
)
pluggableInvMinBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvMinBitRate.setStatus("current")
if mibBuilder.loadTexts:
    pluggableInvMinBitRate.setUnits("MBits/sec")


class _PluggableInvMaxBitRate_Type(Integer32):
    """Custom type pluggableInvMaxBitRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_PluggableInvMaxBitRate_Type.__name__ = "Integer32"
_PluggableInvMaxBitRate_Object = MibTableColumn
pluggableInvMaxBitRate = _PluggableInvMaxBitRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 16),
    _PluggableInvMaxBitRate_Type()
)
pluggableInvMaxBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvMaxBitRate.setStatus("current")
if mibBuilder.loadTexts:
    pluggableInvMaxBitRate.setUnits("MBits/sec")


class _PluggableInvNomBitRate_Type(Integer32):
    """Custom type pluggableInvNomBitRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_PluggableInvNomBitRate_Type.__name__ = "Integer32"
_PluggableInvNomBitRate_Object = MibTableColumn
pluggableInvNomBitRate = _PluggableInvNomBitRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 17),
    _PluggableInvNomBitRate_Type()
)
pluggableInvNomBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvNomBitRate.setStatus("current")
if mibBuilder.loadTexts:
    pluggableInvNomBitRate.setUnits("MBits/sec")


class _PluggableInvEncoding_Type(DisplayString):
    """Custom type pluggableInvEncoding based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_PluggableInvEncoding_Type.__name__ = "DisplayString"
_PluggableInvEncoding_Object = MibTableColumn
pluggableInvEncoding = _PluggableInvEncoding_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 18),
    _PluggableInvEncoding_Type()
)
pluggableInvEncoding.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvEncoding.setStatus("current")
_PluggableInvWavelength_Type = FixedX100
_PluggableInvWavelength_Object = MibTableColumn
pluggableInvWavelength = _PluggableInvWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 19),
    _PluggableInvWavelength_Type()
)
pluggableInvWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvWavelength.setStatus("current")
if mibBuilder.loadTexts:
    pluggableInvWavelength.setUnits("nanometers/100")


class _PluggableInvReach_Type(Integer32):
    """Custom type pluggableInvReach based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_PluggableInvReach_Type.__name__ = "Integer32"
_PluggableInvReach_Object = MibTableColumn
pluggableInvReach = _PluggableInvReach_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 20),
    _PluggableInvReach_Type()
)
pluggableInvReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvReach.setStatus("current")
if mibBuilder.loadTexts:
    pluggableInvReach.setUnits("kilometers")
_PluggableInvTxFaultImpl_Type = TruthValue
_PluggableInvTxFaultImpl_Object = MibTableColumn
pluggableInvTxFaultImpl = _PluggableInvTxFaultImpl_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 21),
    _PluggableInvTxFaultImpl_Type()
)
pluggableInvTxFaultImpl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvTxFaultImpl.setStatus("current")
_PluggableInvLOSImpl_Type = TruthValue
_PluggableInvLOSImpl_Object = MibTableColumn
pluggableInvLOSImpl = _PluggableInvLOSImpl_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 22),
    _PluggableInvLOSImpl_Type()
)
pluggableInvLOSImpl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvLOSImpl.setStatus("current")
_PluggableInvDDiagImpl_Type = TruthValue
_PluggableInvDDiagImpl_Object = MibTableColumn
pluggableInvDDiagImpl = _PluggableInvDDiagImpl_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 23),
    _PluggableInvDDiagImpl_Type()
)
pluggableInvDDiagImpl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvDDiagImpl.setStatus("current")
_PluggableInvTxDisableImpl_Type = TruthValue
_PluggableInvTxDisableImpl_Object = MibTableColumn
pluggableInvTxDisableImpl = _PluggableInvTxDisableImpl_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 24),
    _PluggableInvTxDisableImpl_Type()
)
pluggableInvTxDisableImpl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvTxDisableImpl.setStatus("current")


class _PluggableInvMedia_Type(Integer32):
    """Custom type pluggableInvMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("electrical", 2),
          ("optical", 3),
          ("unknown", 1))
    )


_PluggableInvMedia_Type.__name__ = "Integer32"
_PluggableInvMedia_Object = MibTableColumn
pluggableInvMedia = _PluggableInvMedia_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 25),
    _PluggableInvMedia_Type()
)
pluggableInvMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvMedia.setStatus("current")


class _PluggableInvUSI_Type(DisplayString):
    """Custom type pluggableInvUSI based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PluggableInvUSI_Type.__name__ = "DisplayString"
_PluggableInvUSI_Object = MibTableColumn
pluggableInvUSI = _PluggableInvUSI_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 26),
    _PluggableInvUSI_Type()
)
pluggableInvUSI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvUSI.setStatus("current")
_PluggableInvWavelengthMin_Type = FixedX100
_PluggableInvWavelengthMin_Object = MibTableColumn
pluggableInvWavelengthMin = _PluggableInvWavelengthMin_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 27),
    _PluggableInvWavelengthMin_Type()
)
pluggableInvWavelengthMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvWavelengthMin.setStatus("current")
if mibBuilder.loadTexts:
    pluggableInvWavelengthMin.setUnits("nanometers/100")
_PluggableInvWavelengthMax_Type = FixedX100
_PluggableInvWavelengthMax_Object = MibTableColumn
pluggableInvWavelengthMax = _PluggableInvWavelengthMax_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 28),
    _PluggableInvWavelengthMax_Type()
)
pluggableInvWavelengthMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvWavelengthMax.setStatus("current")
if mibBuilder.loadTexts:
    pluggableInvWavelengthMax.setUnits("nanometers/100")


class _PluggableInvWavelengthSpacing_Type(Integer32):
    """Custom type pluggableInvWavelengthSpacing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(50, 50),
        ValueRangeConstraint(100, 100),
    )


_PluggableInvWavelengthSpacing_Type.__name__ = "Integer32"
_PluggableInvWavelengthSpacing_Object = MibTableColumn
pluggableInvWavelengthSpacing = _PluggableInvWavelengthSpacing_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 29),
    _PluggableInvWavelengthSpacing_Type()
)
pluggableInvWavelengthSpacing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pluggableInvWavelengthSpacing.setStatus("current")
if mibBuilder.loadTexts:
    pluggableInvWavelengthSpacing.setUnits("GHz")
_SlotInvDataTable_Object = MibTable
slotInvDataTable = _SlotInvDataTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4)
)
if mibBuilder.loadTexts:
    slotInvDataTable.setStatus("current")
_SlotInvDataEntry_Object = MibTableRow
slotInvDataEntry = _SlotInvDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1)
)
slotInvDataEntry.setIndexNames(
    (0, "BTI-7000-MIB", "slotInvDataShelfIdx"),
    (0, "BTI-7000-MIB", "slotInvDataSlotTypeIdx"),
    (0, "BTI-7000-MIB", "slotInvDataSlotIdx"),
    (0, "BTI-7000-MIB", "slotInvDataRecordIdx"),
    (0, "BTI-7000-MIB", "slotInvDataNameIdx"),
)
if mibBuilder.loadTexts:
    slotInvDataEntry.setStatus("current")


class _SlotInvDataShelfIdx_Type(Integer32):
    """Custom type slotInvDataShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_SlotInvDataShelfIdx_Type.__name__ = "Integer32"
_SlotInvDataShelfIdx_Object = MibTableColumn
slotInvDataShelfIdx = _SlotInvDataShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 1),
    _SlotInvDataShelfIdx_Type()
)
slotInvDataShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    slotInvDataShelfIdx.setStatus("current")
_SlotInvDataSlotTypeIdx_Type = SlotType
_SlotInvDataSlotTypeIdx_Object = MibTableColumn
slotInvDataSlotTypeIdx = _SlotInvDataSlotTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 2),
    _SlotInvDataSlotTypeIdx_Type()
)
slotInvDataSlotTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    slotInvDataSlotTypeIdx.setStatus("current")


class _SlotInvDataSlotIdx_Type(Integer32):
    """Custom type slotInvDataSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_SlotInvDataSlotIdx_Type.__name__ = "Integer32"
_SlotInvDataSlotIdx_Object = MibTableColumn
slotInvDataSlotIdx = _SlotInvDataSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 3),
    _SlotInvDataSlotIdx_Type()
)
slotInvDataSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    slotInvDataSlotIdx.setStatus("current")
_SlotInvDataRecordIdx_Type = Unsigned32
_SlotInvDataRecordIdx_Object = MibTableColumn
slotInvDataRecordIdx = _SlotInvDataRecordIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 4),
    _SlotInvDataRecordIdx_Type()
)
slotInvDataRecordIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    slotInvDataRecordIdx.setStatus("current")


class _SlotInvDataNameIdx_Type(Integer32):
    """Custom type slotInvDataNameIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dispersion", 3),
          ("loss", 2),
          ("wavelength", 1))
    )


_SlotInvDataNameIdx_Type.__name__ = "Integer32"
_SlotInvDataNameIdx_Object = MibTableColumn
slotInvDataNameIdx = _SlotInvDataNameIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 5),
    _SlotInvDataNameIdx_Type()
)
slotInvDataNameIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    slotInvDataNameIdx.setStatus("current")
_SlotInvDataValue_Type = DisplayString
_SlotInvDataValue_Object = MibTableColumn
slotInvDataValue = _SlotInvDataValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 6),
    _SlotInvDataValue_Type()
)
slotInvDataValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotInvDataValue.setStatus("current")
_Equipment_ObjectIdentity = ObjectIdentity
equipment = _Equipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3)
)
_ShelfTable_Object = MibTable
shelfTable = _ShelfTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1)
)
if mibBuilder.loadTexts:
    shelfTable.setStatus("current")
_ShelfEntry_Object = MibTableRow
shelfEntry = _ShelfEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1)
)
shelfEntry.setIndexNames(
    (0, "BTI-7000-MIB", "shelfIdx"),
)
if mibBuilder.loadTexts:
    shelfEntry.setStatus("current")


class _ShelfIdx_Type(Integer32):
    """Custom type shelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_ShelfIdx_Type.__name__ = "Integer32"
_ShelfIdx_Object = MibTableColumn
shelfIdx = _ShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 1),
    _ShelfIdx_Type()
)
shelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfIdx.setStatus("current")


class _ShelfProvConfig_Type(ShelfConfigType):
    """Custom type shelfProvConfig based on ShelfConfigType"""


_ShelfProvConfig_Object = MibTableColumn
shelfProvConfig = _ShelfProvConfig_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 2),
    _ShelfProvConfig_Type()
)
shelfProvConfig.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfProvConfig.setStatus("deprecated")
_ShelfDiscConfig_Type = ShelfConfigType
_ShelfDiscConfig_Object = MibTableColumn
shelfDiscConfig = _ShelfDiscConfig_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 3),
    _ShelfDiscConfig_Type()
)
shelfDiscConfig.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    shelfDiscConfig.setStatus("deprecated")


class _ShelfType_Type(ShelfType):
    """Custom type shelfType based on ShelfType"""


_ShelfType_Object = MibTableColumn
shelfType = _ShelfType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 4),
    _ShelfType_Type()
)
shelfType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfType.setStatus("current")


class _ShelfPEC_Type(DisplayString):
    """Custom type shelfPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_ShelfPEC_Type.__name__ = "DisplayString"
_ShelfPEC_Object = MibTableColumn
shelfPEC = _ShelfPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 5),
    _ShelfPEC_Type()
)
shelfPEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfPEC.setStatus("current")


class _ShelfAdminStatus_Type(AdminStatus):
    """Custom type shelfAdminStatus based on AdminStatus"""


_ShelfAdminStatus_Object = MibTableColumn
shelfAdminStatus = _ShelfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 6),
    _ShelfAdminStatus_Type()
)
shelfAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfAdminStatus.setStatus("current")
_ShelfOperStatus_Type = OperStatus
_ShelfOperStatus_Object = MibTableColumn
shelfOperStatus = _ShelfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 7),
    _ShelfOperStatus_Type()
)
shelfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfOperStatus.setStatus("current")
_ShelfOperStatQlfr_Type = OperStatQlfr
_ShelfOperStatQlfr_Object = MibTableColumn
shelfOperStatQlfr = _ShelfOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 8),
    _ShelfOperStatQlfr_Type()
)
shelfOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shelfOperStatQlfr.setStatus("current")


class _ShelfId_Type(DisplayString):
    """Custom type shelfId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_ShelfId_Type.__name__ = "DisplayString"
_ShelfId_Object = MibTableColumn
shelfId = _ShelfId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 9),
    _ShelfId_Type()
)
shelfId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfId.setStatus("current")
_ShelfCustom1_Type = DisplayString
_ShelfCustom1_Object = MibTableColumn
shelfCustom1 = _ShelfCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 10),
    _ShelfCustom1_Type()
)
shelfCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfCustom1.setStatus("current")
_ShelfCustom2_Type = DisplayString
_ShelfCustom2_Object = MibTableColumn
shelfCustom2 = _ShelfCustom2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 11),
    _ShelfCustom2_Type()
)
shelfCustom2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfCustom2.setStatus("current")
_ShelfCustom3_Type = DisplayString
_ShelfCustom3_Object = MibTableColumn
shelfCustom3 = _ShelfCustom3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 12),
    _ShelfCustom3_Type()
)
shelfCustom3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfCustom3.setStatus("current")


class _ShelfPowerFeedA_Type(PowerFeedModeType):
    """Custom type shelfPowerFeedA based on PowerFeedModeType"""


_ShelfPowerFeedA_Object = MibTableColumn
shelfPowerFeedA = _ShelfPowerFeedA_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 13),
    _ShelfPowerFeedA_Type()
)
shelfPowerFeedA.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfPowerFeedA.setStatus("current")


class _ShelfPowerFeedB_Type(PowerFeedModeType):
    """Custom type shelfPowerFeedB based on PowerFeedModeType"""


_ShelfPowerFeedB_Object = MibTableColumn
shelfPowerFeedB = _ShelfPowerFeedB_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 14),
    _ShelfPowerFeedB_Type()
)
shelfPowerFeedB.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfPowerFeedB.setStatus("current")
_ShelfRowStatus_Type = RowStatus
_ShelfRowStatus_Object = MibTableColumn
shelfRowStatus = _ShelfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 100),
    _ShelfRowStatus_Type()
)
shelfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    shelfRowStatus.setStatus("current")
_CpTable_Object = MibTable
cpTable = _CpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2)
)
if mibBuilder.loadTexts:
    cpTable.setStatus("current")
_CpEntry_Object = MibTableRow
cpEntry = _CpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1)
)
cpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "cpTypeIdx"),
    (0, "BTI-7000-MIB", "cpShelfIdx"),
    (0, "BTI-7000-MIB", "cpSlotIdx"),
)
if mibBuilder.loadTexts:
    cpEntry.setStatus("current")
_CpTypeIdx_Type = CpType
_CpTypeIdx_Object = MibTableColumn
cpTypeIdx = _CpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 1),
    _CpTypeIdx_Type()
)
cpTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    cpTypeIdx.setStatus("current")


class _CpShelfIdx_Type(Integer32):
    """Custom type cpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_CpShelfIdx_Type.__name__ = "Integer32"
_CpShelfIdx_Object = MibTableColumn
cpShelfIdx = _CpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 2),
    _CpShelfIdx_Type()
)
cpShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    cpShelfIdx.setStatus("current")


class _CpSlotIdx_Type(Integer32):
    """Custom type cpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_CpSlotIdx_Type.__name__ = "Integer32"
_CpSlotIdx_Object = MibTableColumn
cpSlotIdx = _CpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 3),
    _CpSlotIdx_Type()
)
cpSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    cpSlotIdx.setStatus("current")


class _CpPEC_Type(DisplayString):
    """Custom type cpPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_CpPEC_Type.__name__ = "DisplayString"
_CpPEC_Object = MibTableColumn
cpPEC = _CpPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 4),
    _CpPEC_Type()
)
cpPEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cpPEC.setStatus("current")


class _CpAdminStatus_Type(AdminStatus):
    """Custom type cpAdminStatus based on AdminStatus"""


_CpAdminStatus_Object = MibTableColumn
cpAdminStatus = _CpAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 5),
    _CpAdminStatus_Type()
)
cpAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cpAdminStatus.setStatus("current")
_CpOperStatus_Type = OperStatus
_CpOperStatus_Object = MibTableColumn
cpOperStatus = _CpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 6),
    _CpOperStatus_Type()
)
cpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpOperStatus.setStatus("current")
_CpOperStatQlfr_Type = OperStatQlfr
_CpOperStatQlfr_Object = MibTableColumn
cpOperStatQlfr = _CpOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 7),
    _CpOperStatQlfr_Type()
)
cpOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpOperStatQlfr.setStatus("current")


class _CpId_Type(DisplayString):
    """Custom type cpId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CpId_Type.__name__ = "DisplayString"
_CpId_Object = MibTableColumn
cpId = _CpId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 8),
    _CpId_Type()
)
cpId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cpId.setStatus("current")
_CpCustom1_Type = DisplayString
_CpCustom1_Object = MibTableColumn
cpCustom1 = _CpCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 9),
    _CpCustom1_Type()
)
cpCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cpCustom1.setStatus("current")
_CpCustom2_Type = DisplayString
_CpCustom2_Object = MibTableColumn
cpCustom2 = _CpCustom2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 10),
    _CpCustom2_Type()
)
cpCustom2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cpCustom2.setStatus("current")
_CpCustom3_Type = DisplayString
_CpCustom3_Object = MibTableColumn
cpCustom3 = _CpCustom3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 11),
    _CpCustom3_Type()
)
cpCustom3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cpCustom3.setStatus("current")
_CpUpgradeStage_Type = UpgradeCompleteStage
_CpUpgradeStage_Object = MibTableColumn
cpUpgradeStage = _CpUpgradeStage_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 12),
    _CpUpgradeStage_Type()
)
cpUpgradeStage.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    cpUpgradeStage.setStatus("current")


class _CpUpgradeResult_Type(Integer32):
    """Custom type cpUpgradeResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("failure", 2),
          ("success", 1))
    )


_CpUpgradeResult_Type.__name__ = "Integer32"
_CpUpgradeResult_Object = MibTableColumn
cpUpgradeResult = _CpUpgradeResult_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 13),
    _CpUpgradeResult_Type()
)
cpUpgradeResult.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    cpUpgradeResult.setStatus("current")
_CpRowStatus_Type = RowStatus
_CpRowStatus_Object = MibTableColumn
cpRowStatus = _CpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 100),
    _CpRowStatus_Type()
)
cpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cpRowStatus.setStatus("current")
_Facilities_ObjectIdentity = ObjectIdentity
facilities = _Facilities_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4)
)
_OaTable_Object = MibTable
oaTable = _OaTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1)
)
if mibBuilder.loadTexts:
    oaTable.setStatus("current")
_OaEntry_Object = MibTableRow
oaEntry = _OaEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1)
)
oaEntry.setIndexNames(
    (0, "BTI-7000-MIB", "oaTypeIdx"),
    (0, "BTI-7000-MIB", "oaShelfIdx"),
    (0, "BTI-7000-MIB", "oaSlotIdx"),
    (0, "BTI-7000-MIB", "oaIdx"),
)
if mibBuilder.loadTexts:
    oaEntry.setStatus("current")
_OaTypeIdx_Type = OaType
_OaTypeIdx_Object = MibTableColumn
oaTypeIdx = _OaTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 1),
    _OaTypeIdx_Type()
)
oaTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    oaTypeIdx.setStatus("current")


class _OaShelfIdx_Type(Integer32):
    """Custom type oaShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OaShelfIdx_Type.__name__ = "Integer32"
_OaShelfIdx_Object = MibTableColumn
oaShelfIdx = _OaShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 2),
    _OaShelfIdx_Type()
)
oaShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    oaShelfIdx.setStatus("current")


class _OaSlotIdx_Type(Integer32):
    """Custom type oaSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OaSlotIdx_Type.__name__ = "Integer32"
_OaSlotIdx_Object = MibTableColumn
oaSlotIdx = _OaSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 3),
    _OaSlotIdx_Type()
)
oaSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    oaSlotIdx.setStatus("current")


class _OaIdx_Type(Integer32):
    """Custom type oaIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_OaIdx_Type.__name__ = "Integer32"
_OaIdx_Object = MibTableColumn
oaIdx = _OaIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 4),
    _OaIdx_Type()
)
oaIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    oaIdx.setStatus("current")


class _OaCaseTempMaxTh_Type(Integer32):
    """Custom type oaCaseTempMaxTh based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaCaseTempMaxTh_Type.__name__ = "Integer32"
_OaCaseTempMaxTh_Object = MibTableColumn
oaCaseTempMaxTh = _OaCaseTempMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 5),
    _OaCaseTempMaxTh_Type()
)
oaCaseTempMaxTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaCaseTempMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    oaCaseTempMaxTh.setUnits("degrees Celsius")


class _OaCaseTempMaxShutdownTh_Type(Integer32):
    """Custom type oaCaseTempMaxShutdownTh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaCaseTempMaxShutdownTh_Type.__name__ = "Integer32"
_OaCaseTempMaxShutdownTh_Object = MibTableColumn
oaCaseTempMaxShutdownTh = _OaCaseTempMaxShutdownTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 6),
    _OaCaseTempMaxShutdownTh_Type()
)
oaCaseTempMaxShutdownTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCaseTempMaxShutdownTh.setStatus("current")
if mibBuilder.loadTexts:
    oaCaseTempMaxShutdownTh.setUnits("degrees Celsius")


class _OaLaserTempMinShutdownTh_Type(Integer32):
    """Custom type oaLaserTempMinShutdownTh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaLaserTempMinShutdownTh_Type.__name__ = "Integer32"
_OaLaserTempMinShutdownTh_Object = MibTableColumn
oaLaserTempMinShutdownTh = _OaLaserTempMinShutdownTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 7),
    _OaLaserTempMinShutdownTh_Type()
)
oaLaserTempMinShutdownTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaserTempMinShutdownTh.setStatus("current")
if mibBuilder.loadTexts:
    oaLaserTempMinShutdownTh.setUnits("degrees Celsius")


class _OaLaserTempMaxShutdownTh_Type(Integer32):
    """Custom type oaLaserTempMaxShutdownTh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaLaserTempMaxShutdownTh_Type.__name__ = "Integer32"
_OaLaserTempMaxShutdownTh_Object = MibTableColumn
oaLaserTempMaxShutdownTh = _OaLaserTempMaxShutdownTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 8),
    _OaLaserTempMaxShutdownTh_Type()
)
oaLaserTempMaxShutdownTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaserTempMaxShutdownTh.setStatus("current")
if mibBuilder.loadTexts:
    oaLaserTempMaxShutdownTh.setUnits("degrees Celsius")
_OaOpticalPwrReceivedMinTh_Type = FixedX10
_OaOpticalPwrReceivedMinTh_Object = MibTableColumn
oaOpticalPwrReceivedMinTh = _OaOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 9),
    _OaOpticalPwrReceivedMinTh_Type()
)
oaOpticalPwrReceivedMinTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaOpticalPwrReceivedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    oaOpticalPwrReceivedMinTh.setUnits("dBm/10")
_OaOpticalPwrReceivedMaxTh_Type = FixedX10
_OaOpticalPwrReceivedMaxTh_Object = MibTableColumn
oaOpticalPwrReceivedMaxTh = _OaOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 10),
    _OaOpticalPwrReceivedMaxTh_Type()
)
oaOpticalPwrReceivedMaxTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    oaOpticalPwrReceivedMaxTh.setUnits("dBm/10")


class _OaSSIOpticalPwrReceivedMaxTh_Type(FixedX10):
    """Custom type oaSSIOpticalPwrReceivedMaxTh based on FixedX10"""
    defaultValue = 55


_OaSSIOpticalPwrReceivedMaxTh_Object = MibTableColumn
oaSSIOpticalPwrReceivedMaxTh = _OaSSIOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 11),
    _OaSSIOpticalPwrReceivedMaxTh_Type()
)
oaSSIOpticalPwrReceivedMaxTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaSSIOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    oaSSIOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_OaOpticalPwrTransmittedMinTh_Type = FixedX10
_OaOpticalPwrTransmittedMinTh_Object = MibTableColumn
oaOpticalPwrTransmittedMinTh = _OaOpticalPwrTransmittedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 12),
    _OaOpticalPwrTransmittedMinTh_Type()
)
oaOpticalPwrTransmittedMinTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaOpticalPwrTransmittedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    oaOpticalPwrTransmittedMinTh.setUnits("dBm/10")
_OaOpticalPwrTransmittedMaxTh_Type = FixedX10
_OaOpticalPwrTransmittedMaxTh_Object = MibTableColumn
oaOpticalPwrTransmittedMaxTh = _OaOpticalPwrTransmittedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 13),
    _OaOpticalPwrTransmittedMaxTh_Type()
)
oaOpticalPwrTransmittedMaxTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaOpticalPwrTransmittedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    oaOpticalPwrTransmittedMaxTh.setUnits("dBm/10")
_OaBackReflectionSafetyTh_Type = FixedX10
_OaBackReflectionSafetyTh_Object = MibTableColumn
oaBackReflectionSafetyTh = _OaBackReflectionSafetyTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 14),
    _OaBackReflectionSafetyTh_Type()
)
oaBackReflectionSafetyTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaBackReflectionSafetyTh.setStatus("current")
if mibBuilder.loadTexts:
    oaBackReflectionSafetyTh.setUnits("dBm/10")


class _OaMSInsertionLossMaxTh_Type(FixedX10):
    """Custom type oaMSInsertionLossMaxTh based on FixedX10"""
    defaultValue = 150


_OaMSInsertionLossMaxTh_Object = MibTableColumn
oaMSInsertionLossMaxTh = _OaMSInsertionLossMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 15),
    _OaMSInsertionLossMaxTh_Type()
)
oaMSInsertionLossMaxTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaMSInsertionLossMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    oaMSInsertionLossMaxTh.setUnits("dB/10")


class _OaCaseTemp_Type(Integer32):
    """Custom type oaCaseTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaCaseTemp_Type.__name__ = "Integer32"
_OaCaseTemp_Object = MibTableColumn
oaCaseTemp = _OaCaseTemp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 16),
    _OaCaseTemp_Type()
)
oaCaseTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCaseTemp.setStatus("current")
if mibBuilder.loadTexts:
    oaCaseTemp.setUnits("degrees Celsius")


class _OaLaser1Temp_Type(Integer32):
    """Custom type oaLaser1Temp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaLaser1Temp_Type.__name__ = "Integer32"
_OaLaser1Temp_Object = MibTableColumn
oaLaser1Temp = _OaLaser1Temp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 17),
    _OaLaser1Temp_Type()
)
oaLaser1Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaser1Temp.setStatus("current")
if mibBuilder.loadTexts:
    oaLaser1Temp.setUnits("degrees Celsius")


class _OaLaser2Temp_Type(Integer32):
    """Custom type oaLaser2Temp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaLaser2Temp_Type.__name__ = "Integer32"
_OaLaser2Temp_Object = MibTableColumn
oaLaser2Temp = _OaLaser2Temp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 18),
    _OaLaser2Temp_Type()
)
oaLaser2Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaser2Temp.setStatus("current")
if mibBuilder.loadTexts:
    oaLaser2Temp.setUnits("degrees Celsius")
_OaOpticalPwrReceived_Type = FixedX10
_OaOpticalPwrReceived_Object = MibTableColumn
oaOpticalPwrReceived = _OaOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 19),
    _OaOpticalPwrReceived_Type()
)
oaOpticalPwrReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    oaOpticalPwrReceived.setUnits("dBm/10")
_OaSSIOpticalPwrReceived_Type = FixedX10
_OaSSIOpticalPwrReceived_Object = MibTableColumn
oaSSIOpticalPwrReceived = _OaSSIOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 20),
    _OaSSIOpticalPwrReceived_Type()
)
oaSSIOpticalPwrReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaSSIOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    oaSSIOpticalPwrReceived.setUnits("dBm/10")
_OaOpticalPwrTransmitted_Type = FixedX10
_OaOpticalPwrTransmitted_Object = MibTableColumn
oaOpticalPwrTransmitted = _OaOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 21),
    _OaOpticalPwrTransmitted_Type()
)
oaOpticalPwrTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    oaOpticalPwrTransmitted.setUnits("dBm/10")
_OaMSInsertionLoss_Type = FixedX10
_OaMSInsertionLoss_Object = MibTableColumn
oaMSInsertionLoss = _OaMSInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 22),
    _OaMSInsertionLoss_Type()
)
oaMSInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaMSInsertionLoss.setStatus("current")
if mibBuilder.loadTexts:
    oaMSInsertionLoss.setUnits("dB/10")
_OaEffectiveGain_Type = FixedX10
_OaEffectiveGain_Object = MibTableColumn
oaEffectiveGain = _OaEffectiveGain_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 33),
    _OaEffectiveGain_Type()
)
oaEffectiveGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaEffectiveGain.setStatus("current")
if mibBuilder.loadTexts:
    oaEffectiveGain.setUnits("dB/10")
_OaFSOOpticalPwrTransmitted_Type = FixedX10
_OaFSOOpticalPwrTransmitted_Object = MibTableColumn
oaFSOOpticalPwrTransmitted = _OaFSOOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 34),
    _OaFSOOpticalPwrTransmitted_Type()
)
oaFSOOpticalPwrTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaFSOOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    oaFSOOpticalPwrTransmitted.setUnits("dBm/10")
_OaLaser1Current_Type = FixedX10
_OaLaser1Current_Object = MibTableColumn
oaLaser1Current = _OaLaser1Current_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 35),
    _OaLaser1Current_Type()
)
oaLaser1Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaser1Current.setStatus("current")
if mibBuilder.loadTexts:
    oaLaser1Current.setUnits("mAmp/10")
_OaLaser2Current_Type = FixedX10
_OaLaser2Current_Object = MibTableColumn
oaLaser2Current = _OaLaser2Current_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 36),
    _OaLaser2Current_Type()
)
oaLaser2Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaser2Current.setStatus("current")
if mibBuilder.loadTexts:
    oaLaser2Current.setUnits("mAmp/10")
_OaLaser1Power_Type = FixedX10
_OaLaser1Power_Object = MibTableColumn
oaLaser1Power = _OaLaser1Power_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 37),
    _OaLaser1Power_Type()
)
oaLaser1Power.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaser1Power.setStatus("current")
if mibBuilder.loadTexts:
    oaLaser1Power.setUnits("mWatts/10")
_OaLaser2Power_Type = FixedX10
_OaLaser2Power_Object = MibTableColumn
oaLaser2Power = _OaLaser2Power_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 38),
    _OaLaser2Power_Type()
)
oaLaser2Power.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaser2Power.setStatus("current")
if mibBuilder.loadTexts:
    oaLaser2Power.setUnits("mWatts/10")
_OaOpticalBackReflection_Type = FixedX10
_OaOpticalBackReflection_Object = MibTableColumn
oaOpticalBackReflection = _OaOpticalBackReflection_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 39),
    _OaOpticalBackReflection_Type()
)
oaOpticalBackReflection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaOpticalBackReflection.setStatus("current")
if mibBuilder.loadTexts:
    oaOpticalBackReflection.setUnits("dB/10")
_OaVariableOpticalAttenuation_Type = FixedX10
_OaVariableOpticalAttenuation_Object = MibTableColumn
oaVariableOpticalAttenuation = _OaVariableOpticalAttenuation_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 40),
    _OaVariableOpticalAttenuation_Type()
)
oaVariableOpticalAttenuation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaVariableOpticalAttenuation.setStatus("current")
if mibBuilder.loadTexts:
    oaVariableOpticalAttenuation.setUnits("dB/10")


class _OaAdminStatus_Type(AdminStatus):
    """Custom type oaAdminStatus based on AdminStatus"""


_OaAdminStatus_Object = MibTableColumn
oaAdminStatus = _OaAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 41),
    _OaAdminStatus_Type()
)
oaAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaAdminStatus.setStatus("current")
_OaOperStatus_Type = OperStatus
_OaOperStatus_Object = MibTableColumn
oaOperStatus = _OaOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 42),
    _OaOperStatus_Type()
)
oaOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaOperStatus.setStatus("current")
_OaOperStatQlfr_Type = OperStatQlfr
_OaOperStatQlfr_Object = MibTableColumn
oaOperStatQlfr = _OaOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 43),
    _OaOperStatQlfr_Type()
)
oaOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaOperStatQlfr.setStatus("current")


class _OaAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type oaAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_OaAutoEnableTimer_Object = MibTableColumn
oaAutoEnableTimer = _OaAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 44),
    _OaAutoEnableTimer_Type()
)
oaAutoEnableTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaAutoEnableTimer.setStatus("current")
_OaActAutoEnableTimer_Type = HoursAndMinutes
_OaActAutoEnableTimer_Object = MibTableColumn
oaActAutoEnableTimer = _OaActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 45),
    _OaActAutoEnableTimer_Type()
)
oaActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaActAutoEnableTimer.setStatus("current")


class _OaModeSetting_Type(Integer32):
    """Custom type oaModeSetting based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("constantGain", 2),
          ("constantPower", 3))
    )


_OaModeSetting_Type.__name__ = "Integer32"
_OaModeSetting_Object = MibTableColumn
oaModeSetting = _OaModeSetting_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 46),
    _OaModeSetting_Type()
)
oaModeSetting.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaModeSetting.setStatus("current")
_OaGainSetting_Type = FixedX10
_OaGainSetting_Object = MibTableColumn
oaGainSetting = _OaGainSetting_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 47),
    _OaGainSetting_Type()
)
oaGainSetting.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaGainSetting.setStatus("current")
if mibBuilder.loadTexts:
    oaGainSetting.setUnits("dB")
_OaPwrSetting_Type = FixedX10
_OaPwrSetting_Object = MibTableColumn
oaPwrSetting = _OaPwrSetting_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 48),
    _OaPwrSetting_Type()
)
oaPwrSetting.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaPwrSetting.setStatus("current")
if mibBuilder.loadTexts:
    oaPwrSetting.setUnits("dBm")


class _OaTiltCompSetting_Type(FixedX10):
    """Custom type oaTiltCompSetting based on FixedX10"""
    defaultValue = 0


_OaTiltCompSetting_Object = MibTableColumn
oaTiltCompSetting = _OaTiltCompSetting_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 49),
    _OaTiltCompSetting_Type()
)
oaTiltCompSetting.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaTiltCompSetting.setStatus("current")
if mibBuilder.loadTexts:
    oaTiltCompSetting.setUnits("dB")


class _OaStatus_Type(Integer32):
    """Custom type oaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("constantGain", 2),
          ("constantGainOff", 6),
          ("constantLaserCurrent", 8),
          ("constantLaserCurrentOff", 9),
          ("constantLaserPower", 10),
          ("constantLaserPowerOff", 11),
          ("constantPower", 3),
          ("constantPowerOff", 7),
          ("eyeSafe", 4),
          ("none", 1),
          ("shutdown", 5))
    )


_OaStatus_Type.__name__ = "Integer32"
_OaStatus_Object = MibTableColumn
oaStatus = _OaStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 50),
    _OaStatus_Type()
)
oaStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaStatus.setStatus("current")


class _OaLaserStatus_Type(Integer32):
    """Custom type oaLaserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_OaLaserStatus_Type.__name__ = "Integer32"
_OaLaserStatus_Object = MibTableColumn
oaLaserStatus = _OaLaserStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 51),
    _OaLaserStatus_Type()
)
oaLaserStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaLaserStatus.setStatus("current")


class _OaId1_Type(DisplayString):
    """Custom type oaId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_OaId1_Type.__name__ = "DisplayString"
_OaId1_Object = MibTableColumn
oaId1 = _OaId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 52),
    _OaId1_Type()
)
oaId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaId1.setStatus("current")


class _OaId2_Type(DisplayString):
    """Custom type oaId2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_OaId2_Type.__name__ = "DisplayString"
_OaId2_Object = MibTableColumn
oaId2 = _OaId2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 53),
    _OaId2_Type()
)
oaId2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaId2.setStatus("current")


class _OaFiberType_Type(FiberType):
    """Custom type oaFiberType based on FiberType"""


_OaFiberType_Object = MibTableColumn
oaFiberType = _OaFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 54),
    _OaFiberType_Type()
)
oaFiberType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaFiberType.setStatus("current")


class _OaGrid_Type(WDMGrid):
    """Custom type oaGrid based on WDMGrid"""


_OaGrid_Object = MibTableColumn
oaGrid = _OaGrid_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 55),
    _OaGrid_Type()
)
oaGrid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaGrid.setStatus("current")


class _OaNumChannels_Type(Integer32):
    """Custom type oaNumChannels based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 40),
    )


_OaNumChannels_Type.__name__ = "Integer32"
_OaNumChannels_Object = MibTableColumn
oaNumChannels = _OaNumChannels_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 56),
    _OaNumChannels_Type()
)
oaNumChannels.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaNumChannels.setStatus("current")
_OaCustom1_Type = DisplayString
_OaCustom1_Object = MibTableColumn
oaCustom1 = _OaCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 57),
    _OaCustom1_Type()
)
oaCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaCustom1.setStatus("current")
_OaCustom2_Type = DisplayString
_OaCustom2_Object = MibTableColumn
oaCustom2 = _OaCustom2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 58),
    _OaCustom2_Type()
)
oaCustom2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaCustom2.setStatus("current")
_OaCustom3_Type = DisplayString
_OaCustom3_Object = MibTableColumn
oaCustom3 = _OaCustom3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 59),
    _OaCustom3_Type()
)
oaCustom3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaCustom3.setStatus("current")
_OaWavelength_Type = FixedX100
_OaWavelength_Object = MibTableColumn
oaWavelength = _OaWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 60),
    _OaWavelength_Type()
)
oaWavelength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaWavelength.setStatus("current")
_OaRemoteId_Type = DisplayString
_OaRemoteId_Object = MibTableColumn
oaRemoteId = _OaRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 61),
    _OaRemoteId_Type()
)
oaRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaRemoteId.setStatus("current")
_OaRowStatus_Type = RowStatus
_OaRowStatus_Object = MibTableColumn
oaRowStatus = _OaRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 100),
    _OaRowStatus_Type()
)
oaRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oaRowStatus.setStatus("current")
_XcvrTable_Object = MibTable
xcvrTable = _XcvrTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2)
)
if mibBuilder.loadTexts:
    xcvrTable.setStatus("current")
_XcvrEntry_Object = MibTableRow
xcvrEntry = _XcvrEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1)
)
xcvrEntry.setIndexNames(
    (0, "BTI-7000-MIB", "xcvrTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrIdx"),
)
if mibBuilder.loadTexts:
    xcvrEntry.setStatus("current")
_XcvrTypeIdx_Type = XcvrType
_XcvrTypeIdx_Object = MibTableColumn
xcvrTypeIdx = _XcvrTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 1),
    _XcvrTypeIdx_Type()
)
xcvrTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    xcvrTypeIdx.setStatus("current")


class _XcvrShelfIdx_Type(Integer32):
    """Custom type xcvrShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrShelfIdx_Type.__name__ = "Integer32"
_XcvrShelfIdx_Object = MibTableColumn
xcvrShelfIdx = _XcvrShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 2),
    _XcvrShelfIdx_Type()
)
xcvrShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    xcvrShelfIdx.setStatus("current")


class _XcvrSlotIdx_Type(Integer32):
    """Custom type xcvrSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrSlotIdx_Type.__name__ = "Integer32"
_XcvrSlotIdx_Object = MibTableColumn
xcvrSlotIdx = _XcvrSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 3),
    _XcvrSlotIdx_Type()
)
xcvrSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    xcvrSlotIdx.setStatus("current")


class _XcvrIdx_Type(Integer32):
    """Custom type xcvrIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrIdx_Type.__name__ = "Integer32"
_XcvrIdx_Object = MibTableColumn
xcvrIdx = _XcvrIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 4),
    _XcvrIdx_Type()
)
xcvrIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    xcvrIdx.setStatus("current")
_XcvrOpticalPwrReceivedMinTh_Type = FixedX10
_XcvrOpticalPwrReceivedMinTh_Object = MibTableColumn
xcvrOpticalPwrReceivedMinTh = _XcvrOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 5),
    _XcvrOpticalPwrReceivedMinTh_Type()
)
xcvrOpticalPwrReceivedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceivedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceivedMinTh.setUnits("dBm/10")
_XcvrOpticalPwrReceivedMaxTh_Type = FixedX10
_XcvrOpticalPwrReceivedMaxTh_Object = MibTableColumn
xcvrOpticalPwrReceivedMaxTh = _XcvrOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 6),
    _XcvrOpticalPwrReceivedMaxTh_Type()
)
xcvrOpticalPwrReceivedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_XcvrOpticalPwrTransmittedMinTh_Type = FixedX10
_XcvrOpticalPwrTransmittedMinTh_Object = MibTableColumn
xcvrOpticalPwrTransmittedMinTh = _XcvrOpticalPwrTransmittedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 7),
    _XcvrOpticalPwrTransmittedMinTh_Type()
)
xcvrOpticalPwrTransmittedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmittedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmittedMinTh.setUnits("dBm/10")
_XcvrOpticalPwrTransmittedMaxTh_Type = FixedX10
_XcvrOpticalPwrTransmittedMaxTh_Object = MibTableColumn
xcvrOpticalPwrTransmittedMaxTh = _XcvrOpticalPwrTransmittedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 8),
    _XcvrOpticalPwrTransmittedMaxTh_Type()
)
xcvrOpticalPwrTransmittedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmittedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmittedMaxTh.setUnits("dBm/10")
_XcvrOpticalPwrReceived_Type = FixedX10
_XcvrOpticalPwrReceived_Object = MibTableColumn
xcvrOpticalPwrReceived = _XcvrOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 9),
    _XcvrOpticalPwrReceived_Type()
)
xcvrOpticalPwrReceived.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceived.setUnits("dBm/10")
_XcvrOpticalPwrTransmitted_Type = FixedX10
_XcvrOpticalPwrTransmitted_Object = MibTableColumn
xcvrOpticalPwrTransmitted = _XcvrOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 10),
    _XcvrOpticalPwrTransmitted_Type()
)
xcvrOpticalPwrTransmitted.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmitted.setUnits("dBm/10")
_XcvrProtSwEvtType_Type = ProtSwEvtType
_XcvrProtSwEvtType_Object = MibTableColumn
xcvrProtSwEvtType = _XcvrProtSwEvtType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 11),
    _XcvrProtSwEvtType_Type()
)
xcvrProtSwEvtType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    xcvrProtSwEvtType.setStatus("current")


class _XcvrPEC_Type(DisplayString):
    """Custom type xcvrPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_XcvrPEC_Type.__name__ = "DisplayString"
_XcvrPEC_Object = MibTableColumn
xcvrPEC = _XcvrPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 12),
    _XcvrPEC_Type()
)
xcvrPEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrPEC.setStatus("current")


class _XcvrAdminStatus_Type(AdminStatus):
    """Custom type xcvrAdminStatus based on AdminStatus"""


_XcvrAdminStatus_Object = MibTableColumn
xcvrAdminStatus = _XcvrAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 13),
    _XcvrAdminStatus_Type()
)
xcvrAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrAdminStatus.setStatus("current")
_XcvrOperStatus_Type = OperStatus
_XcvrOperStatus_Object = MibTableColumn
xcvrOperStatus = _XcvrOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 14),
    _XcvrOperStatus_Type()
)
xcvrOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrOperStatus.setStatus("current")
_XcvrOperStatQlfr_Type = OperStatQlfr
_XcvrOperStatQlfr_Object = MibTableColumn
xcvrOperStatQlfr = _XcvrOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 15),
    _XcvrOperStatQlfr_Type()
)
xcvrOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrOperStatQlfr.setStatus("current")


class _XcvrAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type xcvrAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_XcvrAutoEnableTimer_Object = MibTableColumn
xcvrAutoEnableTimer = _XcvrAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 16),
    _XcvrAutoEnableTimer_Type()
)
xcvrAutoEnableTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrAutoEnableTimer.setStatus("current")
_XcvrActAutoEnableTimer_Type = HoursAndMinutes
_XcvrActAutoEnableTimer_Object = MibTableColumn
xcvrActAutoEnableTimer = _XcvrActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 17),
    _XcvrActAutoEnableTimer_Type()
)
xcvrActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrActAutoEnableTimer.setStatus("current")
_XcvrProtocol_Type = XcvrProtocolType
_XcvrProtocol_Object = MibTableColumn
xcvrProtocol = _XcvrProtocol_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 18),
    _XcvrProtocol_Type()
)
xcvrProtocol.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrProtocol.setStatus("current")
_XcvrWavelength_Type = FixedX100
_XcvrWavelength_Object = MibTableColumn
xcvrWavelength = _XcvrWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 19),
    _XcvrWavelength_Type()
)
xcvrWavelength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrWavelength.setStatus("current")


class _XcvrVendorPN1_Type(DisplayString):
    """Custom type xcvrVendorPN1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_XcvrVendorPN1_Type.__name__ = "DisplayString"
_XcvrVendorPN1_Object = MibTableColumn
xcvrVendorPN1 = _XcvrVendorPN1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 20),
    _XcvrVendorPN1_Type()
)
xcvrVendorPN1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrVendorPN1.setStatus("current")


class _XcvrVendorPN2_Type(DisplayString):
    """Custom type xcvrVendorPN2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_XcvrVendorPN2_Type.__name__ = "DisplayString"
_XcvrVendorPN2_Object = MibTableColumn
xcvrVendorPN2 = _XcvrVendorPN2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 21),
    _XcvrVendorPN2_Type()
)
xcvrVendorPN2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrVendorPN2.setStatus("current")


class _XcvrVendorPN3_Type(DisplayString):
    """Custom type xcvrVendorPN3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_XcvrVendorPN3_Type.__name__ = "DisplayString"
_XcvrVendorPN3_Object = MibTableColumn
xcvrVendorPN3 = _XcvrVendorPN3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 22),
    _XcvrVendorPN3_Type()
)
xcvrVendorPN3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrVendorPN3.setStatus("current")


class _XcvrPhyPMMon_Type(Integer32):
    """Custom type xcvrPhyPMMon based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_XcvrPhyPMMon_Type.__name__ = "Integer32"
_XcvrPhyPMMon_Object = MibTableColumn
xcvrPhyPMMon = _XcvrPhyPMMon_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 23),
    _XcvrPhyPMMon_Type()
)
xcvrPhyPMMon.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrPhyPMMon.setStatus("current")


class _XcvrFPSD_Type(Integer32):
    """Custom type xcvrFPSD based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_XcvrFPSD_Type.__name__ = "Integer32"
_XcvrFPSD_Object = MibTableColumn
xcvrFPSD = _XcvrFPSD_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 24),
    _XcvrFPSD_Type()
)
xcvrFPSD.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrFPSD.setStatus("current")


class _XcvrLaserStatus_Type(Integer32):
    """Custom type xcvrLaserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("aisl", 4),
          ("idle", 3),
          ("msais", 5),
          ("odu2ais", 6),
          ("odu2lck", 9),
          ("odu2oci", 10),
          ("off", 2),
          ("on", 1),
          ("prbs", 7),
          ("remoteFault", 8))
    )


_XcvrLaserStatus_Type.__name__ = "Integer32"
_XcvrLaserStatus_Object = MibTableColumn
xcvrLaserStatus = _XcvrLaserStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 25),
    _XcvrLaserStatus_Type()
)
xcvrLaserStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrLaserStatus.setStatus("current")


class _XcvrId1_Type(DisplayString):
    """Custom type xcvrId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_XcvrId1_Type.__name__ = "DisplayString"
_XcvrId1_Object = MibTableColumn
xcvrId1 = _XcvrId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 26),
    _XcvrId1_Type()
)
xcvrId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrId1.setStatus("current")


class _XcvrId2_Type(DisplayString):
    """Custom type xcvrId2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_XcvrId2_Type.__name__ = "DisplayString"
_XcvrId2_Object = MibTableColumn
xcvrId2 = _XcvrId2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 27),
    _XcvrId2_Type()
)
xcvrId2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrId2.setStatus("current")


class _XcvrFiberType_Type(FiberType):
    """Custom type xcvrFiberType based on FiberType"""


_XcvrFiberType_Object = MibTableColumn
xcvrFiberType = _XcvrFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 28),
    _XcvrFiberType_Type()
)
xcvrFiberType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrFiberType.setStatus("current")


class _XcvrGrid_Type(WDMGrid):
    """Custom type xcvrGrid based on WDMGrid"""


_XcvrGrid_Object = MibTableColumn
xcvrGrid = _XcvrGrid_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 29),
    _XcvrGrid_Type()
)
xcvrGrid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrGrid.setStatus("current")
_XcvrCustom1_Type = DisplayString
_XcvrCustom1_Object = MibTableColumn
xcvrCustom1 = _XcvrCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 30),
    _XcvrCustom1_Type()
)
xcvrCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrCustom1.setStatus("current")
_XcvrCustom2_Type = DisplayString
_XcvrCustom2_Object = MibTableColumn
xcvrCustom2 = _XcvrCustom2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 31),
    _XcvrCustom2_Type()
)
xcvrCustom2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrCustom2.setStatus("current")
_XcvrCustom3_Type = DisplayString
_XcvrCustom3_Object = MibTableColumn
xcvrCustom3 = _XcvrCustom3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 32),
    _XcvrCustom3_Type()
)
xcvrCustom3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrCustom3.setStatus("current")


class _XcvrTraceLabel_Type(DisplayString):
    """Custom type xcvrTraceLabel based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_XcvrTraceLabel_Type.__name__ = "DisplayString"
_XcvrTraceLabel_Object = MibTableColumn
xcvrTraceLabel = _XcvrTraceLabel_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 33),
    _XcvrTraceLabel_Type()
)
xcvrTraceLabel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrTraceLabel.setStatus("current")


class _XcvrExpectedTraceLabel_Type(DisplayString):
    """Custom type xcvrExpectedTraceLabel based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_XcvrExpectedTraceLabel_Type.__name__ = "DisplayString"
_XcvrExpectedTraceLabel_Object = MibTableColumn
xcvrExpectedTraceLabel = _XcvrExpectedTraceLabel_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 34),
    _XcvrExpectedTraceLabel_Type()
)
xcvrExpectedTraceLabel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrExpectedTraceLabel.setStatus("current")


class _XcvrReceivedTraceLabel_Type(DisplayString):
    """Custom type xcvrReceivedTraceLabel based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_XcvrReceivedTraceLabel_Type.__name__ = "DisplayString"
_XcvrReceivedTraceLabel_Object = MibTableColumn
xcvrReceivedTraceLabel = _XcvrReceivedTraceLabel_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 35),
    _XcvrReceivedTraceLabel_Type()
)
xcvrReceivedTraceLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrReceivedTraceLabel.setStatus("current")


class _XcvrSDBERTh_Type(BERType):
    """Custom type xcvrSDBERTh based on BERType"""


_XcvrSDBERTh_Object = MibTableColumn
xcvrSDBERTh = _XcvrSDBERTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 36),
    _XcvrSDBERTh_Type()
)
xcvrSDBERTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrSDBERTh.setStatus("current")


class _XcvrLoopbackType_Type(LoopbackType):
    """Custom type xcvrLoopbackType based on LoopbackType"""


_XcvrLoopbackType_Object = MibTableColumn
xcvrLoopbackType = _XcvrLoopbackType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 37),
    _XcvrLoopbackType_Type()
)
xcvrLoopbackType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrLoopbackType.setStatus("current")
_XcvrRemoteId_Type = DisplayString
_XcvrRemoteId_Object = MibTableColumn
xcvrRemoteId = _XcvrRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 38),
    _XcvrRemoteId_Type()
)
xcvrRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrRemoteId.setStatus("current")
_XcvrRowStatus_Type = RowStatus
_XcvrRowStatus_Object = MibTableColumn
xcvrRowStatus = _XcvrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 100),
    _XcvrRowStatus_Type()
)
xcvrRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrRowStatus.setStatus("current")
_AmdTable_Object = MibTable
amdTable = _AmdTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3)
)
if mibBuilder.loadTexts:
    amdTable.setStatus("obsolete")
_AmdEntry_Object = MibTableRow
amdEntry = _AmdEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1)
)
amdEntry.setIndexNames(
    (0, "BTI-7000-MIB", "amdTypeIdx"),
    (0, "BTI-7000-MIB", "amdShelfIdx"),
    (0, "BTI-7000-MIB", "amdSlotIdx"),
    (0, "BTI-7000-MIB", "amdLineIdx"),
    (0, "BTI-7000-MIB", "amdPortIdx"),
)
if mibBuilder.loadTexts:
    amdEntry.setStatus("obsolete")
_AmdTypeIdx_Type = AmdType
_AmdTypeIdx_Object = MibTableColumn
amdTypeIdx = _AmdTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 1),
    _AmdTypeIdx_Type()
)
amdTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdTypeIdx.setStatus("obsolete")


class _AmdShelfIdx_Type(Integer32):
    """Custom type amdShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_AmdShelfIdx_Type.__name__ = "Integer32"
_AmdShelfIdx_Object = MibTableColumn
amdShelfIdx = _AmdShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 2),
    _AmdShelfIdx_Type()
)
amdShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdShelfIdx.setStatus("obsolete")


class _AmdSlotIdx_Type(Integer32):
    """Custom type amdSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_AmdSlotIdx_Type.__name__ = "Integer32"
_AmdSlotIdx_Object = MibTableColumn
amdSlotIdx = _AmdSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 3),
    _AmdSlotIdx_Type()
)
amdSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdSlotIdx.setStatus("obsolete")


class _AmdLineIdx_Type(Integer32):
    """Custom type amdLineIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_AmdLineIdx_Type.__name__ = "Integer32"
_AmdLineIdx_Object = MibTableColumn
amdLineIdx = _AmdLineIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 4),
    _AmdLineIdx_Type()
)
amdLineIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdLineIdx.setStatus("obsolete")
_AmdPortIdx_Type = AmdPortType
_AmdPortIdx_Object = MibTableColumn
amdPortIdx = _AmdPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 5),
    _AmdPortIdx_Type()
)
amdPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdPortIdx.setStatus("obsolete")
_AmdOpticalPwrReceivedMinTh_Type = FixedX10
_AmdOpticalPwrReceivedMinTh_Object = MibTableColumn
amdOpticalPwrReceivedMinTh = _AmdOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 6),
    _AmdOpticalPwrReceivedMinTh_Type()
)
amdOpticalPwrReceivedMinTh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdOpticalPwrReceivedMinTh.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdOpticalPwrReceivedMinTh.setUnits("dBm/10")
_AmdOpticalPwrReceivedMaxTh_Type = FixedX10
_AmdOpticalPwrReceivedMaxTh_Object = MibTableColumn
amdOpticalPwrReceivedMaxTh = _AmdOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 7),
    _AmdOpticalPwrReceivedMaxTh_Type()
)
amdOpticalPwrReceivedMaxTh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdOpticalPwrReceivedMaxTh.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_AmdOpticalPwrTransmittedTarget_Type = FixedX10
_AmdOpticalPwrTransmittedTarget_Object = MibTableColumn
amdOpticalPwrTransmittedTarget = _AmdOpticalPwrTransmittedTarget_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 8),
    _AmdOpticalPwrTransmittedTarget_Type()
)
amdOpticalPwrTransmittedTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdOpticalPwrTransmittedTarget.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdOpticalPwrTransmittedTarget.setUnits("dBm/10")
_AmdOpticalAttenuationTarget_Type = FixedX10
_AmdOpticalAttenuationTarget_Object = MibTableColumn
amdOpticalAttenuationTarget = _AmdOpticalAttenuationTarget_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 9),
    _AmdOpticalAttenuationTarget_Type()
)
amdOpticalAttenuationTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdOpticalAttenuationTarget.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdOpticalAttenuationTarget.setUnits("dB/10")
_AmdOpticalPwrReceived_Type = FixedX10
_AmdOpticalPwrReceived_Object = MibTableColumn
amdOpticalPwrReceived = _AmdOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 10),
    _AmdOpticalPwrReceived_Type()
)
amdOpticalPwrReceived.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdOpticalPwrReceived.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdOpticalPwrReceived.setUnits("dBm/10")
_AmdOpticalPwrTransmitted_Type = FixedX10
_AmdOpticalPwrTransmitted_Object = MibTableColumn
amdOpticalPwrTransmitted = _AmdOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 11),
    _AmdOpticalPwrTransmitted_Type()
)
amdOpticalPwrTransmitted.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdOpticalPwrTransmitted.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdOpticalPwrTransmitted.setUnits("dBm/10")
_AmdOpticalAttentuation_Type = FixedX10
_AmdOpticalAttentuation_Object = MibTableColumn
amdOpticalAttentuation = _AmdOpticalAttentuation_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 12),
    _AmdOpticalAttentuation_Type()
)
amdOpticalAttentuation.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdOpticalAttentuation.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdOpticalAttentuation.setUnits("dB/10")


class _AmdAdminStatus_Type(AdminStatus):
    """Custom type amdAdminStatus based on AdminStatus"""


_AmdAdminStatus_Object = MibTableColumn
amdAdminStatus = _AmdAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 13),
    _AmdAdminStatus_Type()
)
amdAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdAdminStatus.setStatus("obsolete")
_AmdOperStatus_Type = OperStatus
_AmdOperStatus_Object = MibTableColumn
amdOperStatus = _AmdOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 14),
    _AmdOperStatus_Type()
)
amdOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdOperStatus.setStatus("obsolete")
_AmdOperStatQlfr_Type = OperStatQlfr
_AmdOperStatQlfr_Object = MibTableColumn
amdOperStatQlfr = _AmdOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 15),
    _AmdOperStatQlfr_Type()
)
amdOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdOperStatQlfr.setStatus("obsolete")


class _AmdAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type amdAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_AmdAutoEnableTimer_Object = MibTableColumn
amdAutoEnableTimer = _AmdAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 16),
    _AmdAutoEnableTimer_Type()
)
amdAutoEnableTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdAutoEnableTimer.setStatus("obsolete")
_AmdActAutoEnableTimer_Type = HoursAndMinutes
_AmdActAutoEnableTimer_Object = MibTableColumn
amdActAutoEnableTimer = _AmdActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 17),
    _AmdActAutoEnableTimer_Type()
)
amdActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdActAutoEnableTimer.setStatus("obsolete")
_AmdWavelength_Type = FixedX100
_AmdWavelength_Object = MibTableColumn
amdWavelength = _AmdWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 18),
    _AmdWavelength_Type()
)
amdWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdWavelength.setStatus("obsolete")


class _AmdId1_Type(DisplayString):
    """Custom type amdId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_AmdId1_Type.__name__ = "DisplayString"
_AmdId1_Object = MibTableColumn
amdId1 = _AmdId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 19),
    _AmdId1_Type()
)
amdId1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdId1.setStatus("obsolete")


class _AmdId2_Type(DisplayString):
    """Custom type amdId2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_AmdId2_Type.__name__ = "DisplayString"
_AmdId2_Object = MibTableColumn
amdId2 = _AmdId2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 20),
    _AmdId2_Type()
)
amdId2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdId2.setStatus("obsolete")


class _AmdFiberType_Type(FiberType):
    """Custom type amdFiberType based on FiberType"""


_AmdFiberType_Object = MibTableColumn
amdFiberType = _AmdFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 21),
    _AmdFiberType_Type()
)
amdFiberType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdFiberType.setStatus("obsolete")


class _AmdGrid_Type(WDMGrid):
    """Custom type amdGrid based on WDMGrid"""


_AmdGrid_Object = MibTableColumn
amdGrid = _AmdGrid_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 22),
    _AmdGrid_Type()
)
amdGrid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdGrid.setStatus("obsolete")
_AmdCustom1_Type = DisplayString
_AmdCustom1_Object = MibTableColumn
amdCustom1 = _AmdCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 23),
    _AmdCustom1_Type()
)
amdCustom1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdCustom1.setStatus("obsolete")
_AmdCustom2_Type = DisplayString
_AmdCustom2_Object = MibTableColumn
amdCustom2 = _AmdCustom2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 24),
    _AmdCustom2_Type()
)
amdCustom2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdCustom2.setStatus("obsolete")
_AmdCustom3_Type = DisplayString
_AmdCustom3_Object = MibTableColumn
amdCustom3 = _AmdCustom3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 25),
    _AmdCustom3_Type()
)
amdCustom3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amdCustom3.setStatus("obsolete")
_AmdRowStatus_Type = RowStatus
_AmdRowStatus_Object = MibTableColumn
amdRowStatus = _AmdRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 100),
    _AmdRowStatus_Type()
)
amdRowStatus.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    amdRowStatus.setStatus("obsolete")
_PassivePortTable_Object = MibTable
passivePortTable = _PassivePortTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4)
)
if mibBuilder.loadTexts:
    passivePortTable.setStatus("current")
_PassivePortEntry_Object = MibTableRow
passivePortEntry = _PassivePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1)
)
passivePortEntry.setIndexNames(
    (0, "BTI-7000-MIB", "passivePortCpTypeIdx"),
    (0, "BTI-7000-MIB", "passivePortShelfIdx"),
    (0, "BTI-7000-MIB", "passivePortSlotIdx"),
    (0, "BTI-7000-MIB", "passivePortLineIdx"),
    (0, "BTI-7000-MIB", "passivePortTypeIdx"),
)
if mibBuilder.loadTexts:
    passivePortEntry.setStatus("current")
_PassivePortCpTypeIdx_Type = CpType
_PassivePortCpTypeIdx_Object = MibTableColumn
passivePortCpTypeIdx = _PassivePortCpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 1),
    _PassivePortCpTypeIdx_Type()
)
passivePortCpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    passivePortCpTypeIdx.setStatus("current")


class _PassivePortShelfIdx_Type(Integer32):
    """Custom type passivePortShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_PassivePortShelfIdx_Type.__name__ = "Integer32"
_PassivePortShelfIdx_Object = MibTableColumn
passivePortShelfIdx = _PassivePortShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 2),
    _PassivePortShelfIdx_Type()
)
passivePortShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    passivePortShelfIdx.setStatus("current")


class _PassivePortSlotIdx_Type(Integer32):
    """Custom type passivePortSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_PassivePortSlotIdx_Type.__name__ = "Integer32"
_PassivePortSlotIdx_Object = MibTableColumn
passivePortSlotIdx = _PassivePortSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 3),
    _PassivePortSlotIdx_Type()
)
passivePortSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    passivePortSlotIdx.setStatus("current")


class _PassivePortLineIdx_Type(Integer32):
    """Custom type passivePortLineIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_PassivePortLineIdx_Type.__name__ = "Integer32"
_PassivePortLineIdx_Object = MibTableColumn
passivePortLineIdx = _PassivePortLineIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 4),
    _PassivePortLineIdx_Type()
)
passivePortLineIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    passivePortLineIdx.setStatus("current")
_PassivePortTypeIdx_Type = PassivePortType
_PassivePortTypeIdx_Object = MibTableColumn
passivePortTypeIdx = _PassivePortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 5),
    _PassivePortTypeIdx_Type()
)
passivePortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    passivePortTypeIdx.setStatus("current")


class _PassivePortId1_Type(DisplayString):
    """Custom type passivePortId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PassivePortId1_Type.__name__ = "DisplayString"
_PassivePortId1_Object = MibTableColumn
passivePortId1 = _PassivePortId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 6),
    _PassivePortId1_Type()
)
passivePortId1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passivePortId1.setStatus("current")


class _PassivePortId2_Type(DisplayString):
    """Custom type passivePortId2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PassivePortId2_Type.__name__ = "DisplayString"
_PassivePortId2_Object = MibTableColumn
passivePortId2 = _PassivePortId2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 7),
    _PassivePortId2_Type()
)
passivePortId2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passivePortId2.setStatus("current")
_PassivePortFiberType_Type = FiberType
_PassivePortFiberType_Object = MibTableColumn
passivePortFiberType = _PassivePortFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 8),
    _PassivePortFiberType_Type()
)
passivePortFiberType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passivePortFiberType.setStatus("current")
_PassivePortGrid_Type = WDMGrid
_PassivePortGrid_Object = MibTableColumn
passivePortGrid = _PassivePortGrid_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 9),
    _PassivePortGrid_Type()
)
passivePortGrid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passivePortGrid.setStatus("current")


class _PassivePortNumChannels_Type(Integer32):
    """Custom type passivePortNumChannels based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65536),
    )


_PassivePortNumChannels_Type.__name__ = "Integer32"
_PassivePortNumChannels_Object = MibTableColumn
passivePortNumChannels = _PassivePortNumChannels_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 10),
    _PassivePortNumChannels_Type()
)
passivePortNumChannels.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passivePortNumChannels.setStatus("current")
_PassivePortWavelength_Type = FixedX100
_PassivePortWavelength_Object = MibTableColumn
passivePortWavelength = _PassivePortWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 11),
    _PassivePortWavelength_Type()
)
passivePortWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    passivePortWavelength.setStatus("current")
_PassivePortCustom1_Type = DisplayString
_PassivePortCustom1_Object = MibTableColumn
passivePortCustom1 = _PassivePortCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 12),
    _PassivePortCustom1_Type()
)
passivePortCustom1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passivePortCustom1.setStatus("current")
_PassivePortCustom2_Type = DisplayString
_PassivePortCustom2_Object = MibTableColumn
passivePortCustom2 = _PassivePortCustom2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 13),
    _PassivePortCustom2_Type()
)
passivePortCustom2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passivePortCustom2.setStatus("current")
_PassivePortCustom3_Type = DisplayString
_PassivePortCustom3_Object = MibTableColumn
passivePortCustom3 = _PassivePortCustom3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 14),
    _PassivePortCustom3_Type()
)
passivePortCustom3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passivePortCustom3.setStatus("current")
_PassivePortRemoteId_Type = DisplayString
_PassivePortRemoteId_Object = MibTableColumn
passivePortRemoteId = _PassivePortRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 15),
    _PassivePortRemoteId_Type()
)
passivePortRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    passivePortRemoteId.setStatus("current")
_PassivePortRowStatus_Type = RowStatus
_PassivePortRowStatus_Object = MibTableColumn
passivePortRowStatus = _PassivePortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 100),
    _PassivePortRowStatus_Type()
)
passivePortRowStatus.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    passivePortRowStatus.setStatus("current")
_OcnTable_Object = MibTable
ocnTable = _OcnTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5)
)
if mibBuilder.loadTexts:
    ocnTable.setStatus("current")
_OcnEntry_Object = MibTableRow
ocnEntry = _OcnEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1)
)
ocnEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ocnTypeIdx"),
    (0, "BTI-7000-MIB", "ocnShelfIdx"),
    (0, "BTI-7000-MIB", "ocnSlotIdx"),
    (0, "BTI-7000-MIB", "ocnPortIdx"),
)
if mibBuilder.loadTexts:
    ocnEntry.setStatus("current")
_OcnTypeIdx_Type = OcnType
_OcnTypeIdx_Object = MibTableColumn
ocnTypeIdx = _OcnTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 1),
    _OcnTypeIdx_Type()
)
ocnTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ocnTypeIdx.setStatus("current")


class _OcnShelfIdx_Type(Integer32):
    """Custom type ocnShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OcnShelfIdx_Type.__name__ = "Integer32"
_OcnShelfIdx_Object = MibTableColumn
ocnShelfIdx = _OcnShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 2),
    _OcnShelfIdx_Type()
)
ocnShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ocnShelfIdx.setStatus("current")


class _OcnSlotIdx_Type(Integer32):
    """Custom type ocnSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OcnSlotIdx_Type.__name__ = "Integer32"
_OcnSlotIdx_Object = MibTableColumn
ocnSlotIdx = _OcnSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 3),
    _OcnSlotIdx_Type()
)
ocnSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ocnSlotIdx.setStatus("current")


class _OcnPortIdx_Type(Integer32):
    """Custom type ocnPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_OcnPortIdx_Type.__name__ = "Integer32"
_OcnPortIdx_Object = MibTableColumn
ocnPortIdx = _OcnPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 4),
    _OcnPortIdx_Type()
)
ocnPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ocnPortIdx.setStatus("current")
_OcnOpticalPwrReceivedMinTh_Type = FixedX10
_OcnOpticalPwrReceivedMinTh_Object = MibTableColumn
ocnOpticalPwrReceivedMinTh = _OcnOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 5),
    _OcnOpticalPwrReceivedMinTh_Type()
)
ocnOpticalPwrReceivedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnOpticalPwrReceivedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    ocnOpticalPwrReceivedMinTh.setUnits("dBm/10")
_OcnOpticalPwrReceivedMaxTh_Type = FixedX10
_OcnOpticalPwrReceivedMaxTh_Object = MibTableColumn
ocnOpticalPwrReceivedMaxTh = _OcnOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 6),
    _OcnOpticalPwrReceivedMaxTh_Type()
)
ocnOpticalPwrReceivedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    ocnOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_OcnOpticalPwrTransmittedMinTh_Type = FixedX10
_OcnOpticalPwrTransmittedMinTh_Object = MibTableColumn
ocnOpticalPwrTransmittedMinTh = _OcnOpticalPwrTransmittedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 7),
    _OcnOpticalPwrTransmittedMinTh_Type()
)
ocnOpticalPwrTransmittedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmittedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmittedMinTh.setUnits("dBm/10")
_OcnOpticalPwrTransmittedMaxTh_Type = FixedX10
_OcnOpticalPwrTransmittedMaxTh_Object = MibTableColumn
ocnOpticalPwrTransmittedMaxTh = _OcnOpticalPwrTransmittedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 8),
    _OcnOpticalPwrTransmittedMaxTh_Type()
)
ocnOpticalPwrTransmittedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmittedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmittedMaxTh.setUnits("dBm/10")
_OcnOpticalPwrReceived_Type = FixedX10
_OcnOpticalPwrReceived_Object = MibTableColumn
ocnOpticalPwrReceived = _OcnOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 9),
    _OcnOpticalPwrReceived_Type()
)
ocnOpticalPwrReceived.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ocnOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    ocnOpticalPwrReceived.setUnits("dBm/10")
_OcnOpticalPwrTransmitted_Type = FixedX10
_OcnOpticalPwrTransmitted_Object = MibTableColumn
ocnOpticalPwrTransmitted = _OcnOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 10),
    _OcnOpticalPwrTransmitted_Type()
)
ocnOpticalPwrTransmitted.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmitted.setUnits("dBm/10")
_OcnBER_Type = BERType
_OcnBER_Object = MibTableColumn
ocnBER = _OcnBER_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 11),
    _OcnBER_Type()
)
ocnBER.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ocnBER.setStatus("current")


class _OcnBERTh_Type(BERType):
    """Custom type ocnBERTh based on BERType"""


_OcnBERTh_Object = MibTableColumn
ocnBERTh = _OcnBERTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 12),
    _OcnBERTh_Type()
)
ocnBERTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnBERTh.setStatus("current")


class _OcnPEC_Type(DisplayString):
    """Custom type ocnPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_OcnPEC_Type.__name__ = "DisplayString"
_OcnPEC_Object = MibTableColumn
ocnPEC = _OcnPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 13),
    _OcnPEC_Type()
)
ocnPEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnPEC.setStatus("current")


class _OcnAdminStatus_Type(AdminStatus):
    """Custom type ocnAdminStatus based on AdminStatus"""


_OcnAdminStatus_Object = MibTableColumn
ocnAdminStatus = _OcnAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 14),
    _OcnAdminStatus_Type()
)
ocnAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnAdminStatus.setStatus("current")
_OcnOperStatus_Type = OperStatus
_OcnOperStatus_Object = MibTableColumn
ocnOperStatus = _OcnOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 15),
    _OcnOperStatus_Type()
)
ocnOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnOperStatus.setStatus("current")
_OcnOperStatQlfr_Type = OperStatQlfr
_OcnOperStatQlfr_Object = MibTableColumn
ocnOperStatQlfr = _OcnOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 16),
    _OcnOperStatQlfr_Type()
)
ocnOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnOperStatQlfr.setStatus("current")


class _OcnAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type ocnAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_OcnAutoEnableTimer_Object = MibTableColumn
ocnAutoEnableTimer = _OcnAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 17),
    _OcnAutoEnableTimer_Type()
)
ocnAutoEnableTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnAutoEnableTimer.setStatus("current")
_OcnActAutoEnableTimer_Type = HoursAndMinutes
_OcnActAutoEnableTimer_Object = MibTableColumn
ocnActAutoEnableTimer = _OcnActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 18),
    _OcnActAutoEnableTimer_Type()
)
ocnActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnActAutoEnableTimer.setStatus("current")
_OcnWavelength_Type = FixedX100
_OcnWavelength_Object = MibTableColumn
ocnWavelength = _OcnWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 19),
    _OcnWavelength_Type()
)
ocnWavelength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnWavelength.setStatus("current")


class _OcnVendorPN1_Type(DisplayString):
    """Custom type ocnVendorPN1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_OcnVendorPN1_Type.__name__ = "DisplayString"
_OcnVendorPN1_Object = MibTableColumn
ocnVendorPN1 = _OcnVendorPN1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 20),
    _OcnVendorPN1_Type()
)
ocnVendorPN1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnVendorPN1.setStatus("current")


class _OcnVendorPN2_Type(DisplayString):
    """Custom type ocnVendorPN2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_OcnVendorPN2_Type.__name__ = "DisplayString"
_OcnVendorPN2_Object = MibTableColumn
ocnVendorPN2 = _OcnVendorPN2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 21),
    _OcnVendorPN2_Type()
)
ocnVendorPN2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnVendorPN2.setStatus("current")


class _OcnVendorPN3_Type(DisplayString):
    """Custom type ocnVendorPN3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_OcnVendorPN3_Type.__name__ = "DisplayString"
_OcnVendorPN3_Object = MibTableColumn
ocnVendorPN3 = _OcnVendorPN3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 22),
    _OcnVendorPN3_Type()
)
ocnVendorPN3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnVendorPN3.setStatus("current")


class _OcnPhyPMMon_Type(Integer32):
    """Custom type ocnPhyPMMon based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_OcnPhyPMMon_Type.__name__ = "Integer32"
_OcnPhyPMMon_Object = MibTableColumn
ocnPhyPMMon = _OcnPhyPMMon_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 23),
    _OcnPhyPMMon_Type()
)
ocnPhyPMMon.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnPhyPMMon.setStatus("current")


class _OcnLaserStatus_Type(Integer32):
    """Custom type ocnLaserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_OcnLaserStatus_Type.__name__ = "Integer32"
_OcnLaserStatus_Object = MibTableColumn
ocnLaserStatus = _OcnLaserStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 24),
    _OcnLaserStatus_Type()
)
ocnLaserStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnLaserStatus.setStatus("current")


class _OcnId1_Type(DisplayString):
    """Custom type ocnId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_OcnId1_Type.__name__ = "DisplayString"
_OcnId1_Object = MibTableColumn
ocnId1 = _OcnId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 25),
    _OcnId1_Type()
)
ocnId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnId1.setStatus("current")


class _OcnFiberType_Type(FiberType):
    """Custom type ocnFiberType based on FiberType"""


_OcnFiberType_Object = MibTableColumn
ocnFiberType = _OcnFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 26),
    _OcnFiberType_Type()
)
ocnFiberType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnFiberType.setStatus("current")
_OcnCustom1_Type = DisplayString
_OcnCustom1_Object = MibTableColumn
ocnCustom1 = _OcnCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 27),
    _OcnCustom1_Type()
)
ocnCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnCustom1.setStatus("current")


class _OcnTOHTransparency_Type(Integer32):
    """Custom type ocnTOHTransparency based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_OcnTOHTransparency_Type.__name__ = "Integer32"
_OcnTOHTransparency_Object = MibTableColumn
ocnTOHTransparency = _OcnTOHTransparency_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 28),
    _OcnTOHTransparency_Type()
)
ocnTOHTransparency.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnTOHTransparency.setStatus("current")


class _OcnLineMapping_Type(Integer32):
    """Custom type ocnLineMapping based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("odu1ToOtu2", 2),
          ("otu1", 5),
          ("otu2", 3),
          ("subOdu1ToOtu1", 4),
          ("unmapped", 1))
    )


_OcnLineMapping_Type.__name__ = "Integer32"
_OcnLineMapping_Object = MibTableColumn
ocnLineMapping = _OcnLineMapping_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 29),
    _OcnLineMapping_Type()
)
ocnLineMapping.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnLineMapping.setStatus("current")
_OcnProtSwEvtType_Type = ProtSwEvtType
_OcnProtSwEvtType_Object = MibTableColumn
ocnProtSwEvtType = _OcnProtSwEvtType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 30),
    _OcnProtSwEvtType_Type()
)
ocnProtSwEvtType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ocnProtSwEvtType.setStatus("current")


class _OcnDCCTransparency_Type(Integer32):
    """Custom type ocnDCCTransparency based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_OcnDCCTransparency_Type.__name__ = "Integer32"
_OcnDCCTransparency_Object = MibTableColumn
ocnDCCTransparency = _OcnDCCTransparency_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 31),
    _OcnDCCTransparency_Type()
)
ocnDCCTransparency.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnDCCTransparency.setStatus("current")


class _OcnTransparencyChannel_Type(Integer32):
    """Custom type ocnTransparencyChannel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )


_OcnTransparencyChannel_Type.__name__ = "Integer32"
_OcnTransparencyChannel_Object = MibTableColumn
ocnTransparencyChannel = _OcnTransparencyChannel_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 32),
    _OcnTransparencyChannel_Type()
)
ocnTransparencyChannel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnTransparencyChannel.setStatus("current")
_OcnRemoteId_Type = DisplayString
_OcnRemoteId_Object = MibTableColumn
ocnRemoteId = _OcnRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 33),
    _OcnRemoteId_Type()
)
ocnRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnRemoteId.setStatus("current")
_OcnRowStatus_Type = RowStatus
_OcnRowStatus_Object = MibTableColumn
ocnRowStatus = _OcnRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 100),
    _OcnRowStatus_Type()
)
ocnRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnRowStatus.setStatus("current")
_StsnTable_Object = MibTable
stsnTable = _StsnTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6)
)
if mibBuilder.loadTexts:
    stsnTable.setStatus("current")
_StsnEntry_Object = MibTableRow
stsnEntry = _StsnEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1)
)
stsnEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stsnTypeIdx"),
    (0, "BTI-7000-MIB", "stsnShelfIdx"),
    (0, "BTI-7000-MIB", "stsnSlotIdx"),
    (0, "BTI-7000-MIB", "stsnPortIdx"),
    (0, "BTI-7000-MIB", "stsnIdx"),
)
if mibBuilder.loadTexts:
    stsnEntry.setStatus("current")
_StsnTypeIdx_Type = StsnType
_StsnTypeIdx_Object = MibTableColumn
stsnTypeIdx = _StsnTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 1),
    _StsnTypeIdx_Type()
)
stsnTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stsnTypeIdx.setStatus("current")


class _StsnShelfIdx_Type(Integer32):
    """Custom type stsnShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StsnShelfIdx_Type.__name__ = "Integer32"
_StsnShelfIdx_Object = MibTableColumn
stsnShelfIdx = _StsnShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 2),
    _StsnShelfIdx_Type()
)
stsnShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stsnShelfIdx.setStatus("current")


class _StsnSlotIdx_Type(Integer32):
    """Custom type stsnSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StsnSlotIdx_Type.__name__ = "Integer32"
_StsnSlotIdx_Object = MibTableColumn
stsnSlotIdx = _StsnSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 3),
    _StsnSlotIdx_Type()
)
stsnSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stsnSlotIdx.setStatus("current")


class _StsnPortIdx_Type(Integer32):
    """Custom type stsnPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StsnPortIdx_Type.__name__ = "Integer32"
_StsnPortIdx_Object = MibTableColumn
stsnPortIdx = _StsnPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 4),
    _StsnPortIdx_Type()
)
stsnPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stsnPortIdx.setStatus("current")


class _StsnIdx_Type(Integer32):
    """Custom type stsnIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 192),
    )


_StsnIdx_Type.__name__ = "Integer32"
_StsnIdx_Object = MibTableColumn
stsnIdx = _StsnIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 5),
    _StsnIdx_Type()
)
stsnIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stsnIdx.setStatus("current")
_StsnProtSwEvtType_Type = ProtSwEvtType
_StsnProtSwEvtType_Object = MibTableColumn
stsnProtSwEvtType = _StsnProtSwEvtType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 6),
    _StsnProtSwEvtType_Type()
)
stsnProtSwEvtType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stsnProtSwEvtType.setStatus("current")
_StsnBER_Type = BERType
_StsnBER_Object = MibTableColumn
stsnBER = _StsnBER_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 7),
    _StsnBER_Type()
)
stsnBER.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stsnBER.setStatus("current")
_StsnBERTh_Type = BERType
_StsnBERTh_Object = MibTableColumn
stsnBERTh = _StsnBERTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 8),
    _StsnBERTh_Type()
)
stsnBERTh.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stsnBERTh.setStatus("current")
_StsnProtSwStatus_Type = OperStatQlfr
_StsnProtSwStatus_Object = MibTableColumn
stsnProtSwStatus = _StsnProtSwStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 9),
    _StsnProtSwStatus_Type()
)
stsnProtSwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnProtSwStatus.setStatus("current")
_StmnTable_Object = MibTable
stmnTable = _StmnTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7)
)
if mibBuilder.loadTexts:
    stmnTable.setStatus("current")
_StmnEntry_Object = MibTableRow
stmnEntry = _StmnEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1)
)
stmnEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stmnTypeIdx"),
    (0, "BTI-7000-MIB", "stmnShelfIdx"),
    (0, "BTI-7000-MIB", "stmnSlotIdx"),
    (0, "BTI-7000-MIB", "stmnPortIdx"),
)
if mibBuilder.loadTexts:
    stmnEntry.setStatus("current")
_StmnTypeIdx_Type = StmnType
_StmnTypeIdx_Object = MibTableColumn
stmnTypeIdx = _StmnTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 1),
    _StmnTypeIdx_Type()
)
stmnTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stmnTypeIdx.setStatus("current")


class _StmnShelfIdx_Type(Integer32):
    """Custom type stmnShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StmnShelfIdx_Type.__name__ = "Integer32"
_StmnShelfIdx_Object = MibTableColumn
stmnShelfIdx = _StmnShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 2),
    _StmnShelfIdx_Type()
)
stmnShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stmnShelfIdx.setStatus("current")


class _StmnSlotIdx_Type(Integer32):
    """Custom type stmnSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StmnSlotIdx_Type.__name__ = "Integer32"
_StmnSlotIdx_Object = MibTableColumn
stmnSlotIdx = _StmnSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 3),
    _StmnSlotIdx_Type()
)
stmnSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stmnSlotIdx.setStatus("current")


class _StmnPortIdx_Type(Integer32):
    """Custom type stmnPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_StmnPortIdx_Type.__name__ = "Integer32"
_StmnPortIdx_Object = MibTableColumn
stmnPortIdx = _StmnPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 4),
    _StmnPortIdx_Type()
)
stmnPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stmnPortIdx.setStatus("current")
_StmnOpticalPwrReceivedMinTh_Type = FixedX10
_StmnOpticalPwrReceivedMinTh_Object = MibTableColumn
stmnOpticalPwrReceivedMinTh = _StmnOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 5),
    _StmnOpticalPwrReceivedMinTh_Type()
)
stmnOpticalPwrReceivedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnOpticalPwrReceivedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    stmnOpticalPwrReceivedMinTh.setUnits("dBm/10")
_StmnOpticalPwrReceivedMaxTh_Type = FixedX10
_StmnOpticalPwrReceivedMaxTh_Object = MibTableColumn
stmnOpticalPwrReceivedMaxTh = _StmnOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 6),
    _StmnOpticalPwrReceivedMaxTh_Type()
)
stmnOpticalPwrReceivedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    stmnOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_StmnOpticalPwrTransmittedMinTh_Type = FixedX10
_StmnOpticalPwrTransmittedMinTh_Object = MibTableColumn
stmnOpticalPwrTransmittedMinTh = _StmnOpticalPwrTransmittedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 7),
    _StmnOpticalPwrTransmittedMinTh_Type()
)
stmnOpticalPwrTransmittedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmittedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmittedMinTh.setUnits("dBm/10")
_StmnOpticalPwrTransmittedMaxTh_Type = FixedX10
_StmnOpticalPwrTransmittedMaxTh_Object = MibTableColumn
stmnOpticalPwrTransmittedMaxTh = _StmnOpticalPwrTransmittedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 8),
    _StmnOpticalPwrTransmittedMaxTh_Type()
)
stmnOpticalPwrTransmittedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmittedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmittedMaxTh.setUnits("dBm/10")
_StmnOpticalPwrReceived_Type = FixedX10
_StmnOpticalPwrReceived_Object = MibTableColumn
stmnOpticalPwrReceived = _StmnOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 9),
    _StmnOpticalPwrReceived_Type()
)
stmnOpticalPwrReceived.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stmnOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    stmnOpticalPwrReceived.setUnits("dBm/10")
_StmnOpticalPwrTransmitted_Type = FixedX10
_StmnOpticalPwrTransmitted_Object = MibTableColumn
stmnOpticalPwrTransmitted = _StmnOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 10),
    _StmnOpticalPwrTransmitted_Type()
)
stmnOpticalPwrTransmitted.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmitted.setUnits("dBm/10")
_StmnBER_Type = BERType
_StmnBER_Object = MibTableColumn
stmnBER = _StmnBER_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 11),
    _StmnBER_Type()
)
stmnBER.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stmnBER.setStatus("current")


class _StmnBERTh_Type(BERType):
    """Custom type stmnBERTh based on BERType"""


_StmnBERTh_Object = MibTableColumn
stmnBERTh = _StmnBERTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 12),
    _StmnBERTh_Type()
)
stmnBERTh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnBERTh.setStatus("current")


class _StmnPEC_Type(DisplayString):
    """Custom type stmnPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_StmnPEC_Type.__name__ = "DisplayString"
_StmnPEC_Object = MibTableColumn
stmnPEC = _StmnPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 13),
    _StmnPEC_Type()
)
stmnPEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnPEC.setStatus("current")


class _StmnAdminStatus_Type(AdminStatus):
    """Custom type stmnAdminStatus based on AdminStatus"""


_StmnAdminStatus_Object = MibTableColumn
stmnAdminStatus = _StmnAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 14),
    _StmnAdminStatus_Type()
)
stmnAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnAdminStatus.setStatus("current")
_StmnOperStatus_Type = OperStatus
_StmnOperStatus_Object = MibTableColumn
stmnOperStatus = _StmnOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 15),
    _StmnOperStatus_Type()
)
stmnOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnOperStatus.setStatus("current")
_StmnOperStatQlfr_Type = OperStatQlfr
_StmnOperStatQlfr_Object = MibTableColumn
stmnOperStatQlfr = _StmnOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 16),
    _StmnOperStatQlfr_Type()
)
stmnOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnOperStatQlfr.setStatus("current")


class _StmnAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type stmnAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_StmnAutoEnableTimer_Object = MibTableColumn
stmnAutoEnableTimer = _StmnAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 17),
    _StmnAutoEnableTimer_Type()
)
stmnAutoEnableTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnAutoEnableTimer.setStatus("current")
_StmnActAutoEnableTimer_Type = HoursAndMinutes
_StmnActAutoEnableTimer_Object = MibTableColumn
stmnActAutoEnableTimer = _StmnActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 18),
    _StmnActAutoEnableTimer_Type()
)
stmnActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnActAutoEnableTimer.setStatus("current")
_StmnWavelength_Type = FixedX100
_StmnWavelength_Object = MibTableColumn
stmnWavelength = _StmnWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 19),
    _StmnWavelength_Type()
)
stmnWavelength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnWavelength.setStatus("current")


class _StmnVendorPN1_Type(DisplayString):
    """Custom type stmnVendorPN1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_StmnVendorPN1_Type.__name__ = "DisplayString"
_StmnVendorPN1_Object = MibTableColumn
stmnVendorPN1 = _StmnVendorPN1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 20),
    _StmnVendorPN1_Type()
)
stmnVendorPN1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnVendorPN1.setStatus("current")


class _StmnVendorPN2_Type(DisplayString):
    """Custom type stmnVendorPN2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_StmnVendorPN2_Type.__name__ = "DisplayString"
_StmnVendorPN2_Object = MibTableColumn
stmnVendorPN2 = _StmnVendorPN2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 21),
    _StmnVendorPN2_Type()
)
stmnVendorPN2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnVendorPN2.setStatus("current")


class _StmnVendorPN3_Type(DisplayString):
    """Custom type stmnVendorPN3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_StmnVendorPN3_Type.__name__ = "DisplayString"
_StmnVendorPN3_Object = MibTableColumn
stmnVendorPN3 = _StmnVendorPN3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 22),
    _StmnVendorPN3_Type()
)
stmnVendorPN3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnVendorPN3.setStatus("current")


class _StmnPhyPMMon_Type(Integer32):
    """Custom type stmnPhyPMMon based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_StmnPhyPMMon_Type.__name__ = "Integer32"
_StmnPhyPMMon_Object = MibTableColumn
stmnPhyPMMon = _StmnPhyPMMon_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 23),
    _StmnPhyPMMon_Type()
)
stmnPhyPMMon.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnPhyPMMon.setStatus("current")


class _StmnLaserStatus_Type(Integer32):
    """Custom type stmnLaserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_StmnLaserStatus_Type.__name__ = "Integer32"
_StmnLaserStatus_Object = MibTableColumn
stmnLaserStatus = _StmnLaserStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 24),
    _StmnLaserStatus_Type()
)
stmnLaserStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnLaserStatus.setStatus("current")


class _StmnId1_Type(DisplayString):
    """Custom type stmnId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_StmnId1_Type.__name__ = "DisplayString"
_StmnId1_Object = MibTableColumn
stmnId1 = _StmnId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 25),
    _StmnId1_Type()
)
stmnId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnId1.setStatus("current")


class _StmnFiberType_Type(FiberType):
    """Custom type stmnFiberType based on FiberType"""


_StmnFiberType_Object = MibTableColumn
stmnFiberType = _StmnFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 26),
    _StmnFiberType_Type()
)
stmnFiberType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnFiberType.setStatus("current")
_StmnCustom1_Type = DisplayString
_StmnCustom1_Object = MibTableColumn
stmnCustom1 = _StmnCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 27),
    _StmnCustom1_Type()
)
stmnCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnCustom1.setStatus("current")


class _StmnTOHTransparency_Type(Integer32):
    """Custom type stmnTOHTransparency based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_StmnTOHTransparency_Type.__name__ = "Integer32"
_StmnTOHTransparency_Object = MibTableColumn
stmnTOHTransparency = _StmnTOHTransparency_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 28),
    _StmnTOHTransparency_Type()
)
stmnTOHTransparency.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnTOHTransparency.setStatus("current")


class _StmnLineMapping_Type(Integer32):
    """Custom type stmnLineMapping based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("odu1ToOtu2", 2),
          ("otu1", 5),
          ("otu2", 3),
          ("subOdu1ToOtu1", 4),
          ("unmapped", 1))
    )


_StmnLineMapping_Type.__name__ = "Integer32"
_StmnLineMapping_Object = MibTableColumn
stmnLineMapping = _StmnLineMapping_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 29),
    _StmnLineMapping_Type()
)
stmnLineMapping.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnLineMapping.setStatus("current")
_StmnProtSwEvtType_Type = ProtSwEvtType
_StmnProtSwEvtType_Object = MibTableColumn
stmnProtSwEvtType = _StmnProtSwEvtType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 30),
    _StmnProtSwEvtType_Type()
)
stmnProtSwEvtType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    stmnProtSwEvtType.setStatus("current")


class _StmnDCCTransparency_Type(Integer32):
    """Custom type stmnDCCTransparency based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_StmnDCCTransparency_Type.__name__ = "Integer32"
_StmnDCCTransparency_Object = MibTableColumn
stmnDCCTransparency = _StmnDCCTransparency_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 31),
    _StmnDCCTransparency_Type()
)
stmnDCCTransparency.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnDCCTransparency.setStatus("current")


class _StmnTransparencyChannel_Type(Integer32):
    """Custom type stmnTransparencyChannel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_StmnTransparencyChannel_Type.__name__ = "Integer32"
_StmnTransparencyChannel_Object = MibTableColumn
stmnTransparencyChannel = _StmnTransparencyChannel_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 32),
    _StmnTransparencyChannel_Type()
)
stmnTransparencyChannel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnTransparencyChannel.setStatus("current")
_StmnRemoteId_Type = DisplayString
_StmnRemoteId_Object = MibTableColumn
stmnRemoteId = _StmnRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 33),
    _StmnRemoteId_Type()
)
stmnRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnRemoteId.setStatus("current")
_StmnRowStatus_Type = RowStatus
_StmnRowStatus_Object = MibTableColumn
stmnRowStatus = _StmnRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 100),
    _StmnRowStatus_Type()
)
stmnRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnRowStatus.setStatus("current")
_VcnTable_Object = MibTable
vcnTable = _VcnTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8)
)
if mibBuilder.loadTexts:
    vcnTable.setStatus("current")
_VcnEntry_Object = MibTableRow
vcnEntry = _VcnEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1)
)
vcnEntry.setIndexNames(
    (0, "BTI-7000-MIB", "vcnTypeIdx"),
    (0, "BTI-7000-MIB", "vcnShelfIdx"),
    (0, "BTI-7000-MIB", "vcnSlotIdx"),
    (0, "BTI-7000-MIB", "vcnPortIdx"),
    (0, "BTI-7000-MIB", "vcnIdx"),
)
if mibBuilder.loadTexts:
    vcnEntry.setStatus("current")
_VcnTypeIdx_Type = VcnType
_VcnTypeIdx_Object = MibTableColumn
vcnTypeIdx = _VcnTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 1),
    _VcnTypeIdx_Type()
)
vcnTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    vcnTypeIdx.setStatus("current")


class _VcnShelfIdx_Type(Integer32):
    """Custom type vcnShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcnShelfIdx_Type.__name__ = "Integer32"
_VcnShelfIdx_Object = MibTableColumn
vcnShelfIdx = _VcnShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 2),
    _VcnShelfIdx_Type()
)
vcnShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    vcnShelfIdx.setStatus("current")


class _VcnSlotIdx_Type(Integer32):
    """Custom type vcnSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcnSlotIdx_Type.__name__ = "Integer32"
_VcnSlotIdx_Object = MibTableColumn
vcnSlotIdx = _VcnSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 3),
    _VcnSlotIdx_Type()
)
vcnSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    vcnSlotIdx.setStatus("current")


class _VcnPortIdx_Type(Integer32):
    """Custom type vcnPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcnPortIdx_Type.__name__ = "Integer32"
_VcnPortIdx_Object = MibTableColumn
vcnPortIdx = _VcnPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 4),
    _VcnPortIdx_Type()
)
vcnPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    vcnPortIdx.setStatus("current")


class _VcnIdx_Type(Integer32):
    """Custom type vcnIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_VcnIdx_Type.__name__ = "Integer32"
_VcnIdx_Object = MibTableColumn
vcnIdx = _VcnIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 5),
    _VcnIdx_Type()
)
vcnIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    vcnIdx.setStatus("current")
_VcnProtSwEvtType_Type = ProtSwEvtType
_VcnProtSwEvtType_Object = MibTableColumn
vcnProtSwEvtType = _VcnProtSwEvtType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 6),
    _VcnProtSwEvtType_Type()
)
vcnProtSwEvtType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    vcnProtSwEvtType.setStatus("current")
_VcnBER_Type = BERType
_VcnBER_Object = MibTableColumn
vcnBER = _VcnBER_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 7),
    _VcnBER_Type()
)
vcnBER.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    vcnBER.setStatus("current")
_VcnBERTh_Type = BERType
_VcnBERTh_Object = MibTableColumn
vcnBERTh = _VcnBERTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 8),
    _VcnBERTh_Type()
)
vcnBERTh.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    vcnBERTh.setStatus("current")
_VcnProtSwStatus_Type = OperStatQlfr
_VcnProtSwStatus_Object = MibTableColumn
vcnProtSwStatus = _VcnProtSwStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 9),
    _VcnProtSwStatus_Type()
)
vcnProtSwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnProtSwStatus.setStatus("current")
_GeTable_Object = MibTable
geTable = _GeTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9)
)
if mibBuilder.loadTexts:
    geTable.setStatus("current")
_GeEntry_Object = MibTableRow
geEntry = _GeEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1)
)
geEntry.setIndexNames(
    (0, "BTI-7000-MIB", "geShelfIdx"),
    (0, "BTI-7000-MIB", "geSlotIdx"),
    (0, "BTI-7000-MIB", "gePortIdx"),
)
if mibBuilder.loadTexts:
    geEntry.setStatus("current")


class _GeShelfIdx_Type(Integer32):
    """Custom type geShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_GeShelfIdx_Type.__name__ = "Integer32"
_GeShelfIdx_Object = MibTableColumn
geShelfIdx = _GeShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 1),
    _GeShelfIdx_Type()
)
geShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    geShelfIdx.setStatus("current")


class _GeSlotIdx_Type(Integer32):
    """Custom type geSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_GeSlotIdx_Type.__name__ = "Integer32"
_GeSlotIdx_Object = MibTableColumn
geSlotIdx = _GeSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 2),
    _GeSlotIdx_Type()
)
geSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    geSlotIdx.setStatus("current")


class _GePortIdx_Type(Integer32):
    """Custom type gePortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_GePortIdx_Type.__name__ = "Integer32"
_GePortIdx_Object = MibTableColumn
gePortIdx = _GePortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 3),
    _GePortIdx_Type()
)
gePortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    gePortIdx.setStatus("current")
_GeOpticalPwrReceivedMinTh_Type = FixedX10
_GeOpticalPwrReceivedMinTh_Object = MibTableColumn
geOpticalPwrReceivedMinTh = _GeOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 4),
    _GeOpticalPwrReceivedMinTh_Type()
)
geOpticalPwrReceivedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geOpticalPwrReceivedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    geOpticalPwrReceivedMinTh.setUnits("dBm/10")
_GeOpticalPwrReceivedMaxTh_Type = FixedX10
_GeOpticalPwrReceivedMaxTh_Object = MibTableColumn
geOpticalPwrReceivedMaxTh = _GeOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 5),
    _GeOpticalPwrReceivedMaxTh_Type()
)
geOpticalPwrReceivedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    geOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_GeOpticalPwrTransmittedMinTh_Type = FixedX10
_GeOpticalPwrTransmittedMinTh_Object = MibTableColumn
geOpticalPwrTransmittedMinTh = _GeOpticalPwrTransmittedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 6),
    _GeOpticalPwrTransmittedMinTh_Type()
)
geOpticalPwrTransmittedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geOpticalPwrTransmittedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    geOpticalPwrTransmittedMinTh.setUnits("dBm/10")
_GeOpticalPwrTransmittedMaxTh_Type = FixedX10
_GeOpticalPwrTransmittedMaxTh_Object = MibTableColumn
geOpticalPwrTransmittedMaxTh = _GeOpticalPwrTransmittedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 7),
    _GeOpticalPwrTransmittedMaxTh_Type()
)
geOpticalPwrTransmittedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geOpticalPwrTransmittedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    geOpticalPwrTransmittedMaxTh.setUnits("dBm/10")
_GeOpticalPwrReceived_Type = FixedX10
_GeOpticalPwrReceived_Object = MibTableColumn
geOpticalPwrReceived = _GeOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 8),
    _GeOpticalPwrReceived_Type()
)
geOpticalPwrReceived.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    geOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    geOpticalPwrReceived.setUnits("dBm/10")
_GeOpticalPwrTransmitted_Type = FixedX10
_GeOpticalPwrTransmitted_Object = MibTableColumn
geOpticalPwrTransmitted = _GeOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 9),
    _GeOpticalPwrTransmitted_Type()
)
geOpticalPwrTransmitted.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    geOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    geOpticalPwrTransmitted.setUnits("dBm/10")


class _GePEC_Type(DisplayString):
    """Custom type gePEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_GePEC_Type.__name__ = "DisplayString"
_GePEC_Object = MibTableColumn
gePEC = _GePEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 10),
    _GePEC_Type()
)
gePEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    gePEC.setStatus("current")


class _GeAdminStatus_Type(AdminStatus):
    """Custom type geAdminStatus based on AdminStatus"""


_GeAdminStatus_Object = MibTableColumn
geAdminStatus = _GeAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 11),
    _GeAdminStatus_Type()
)
geAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geAdminStatus.setStatus("current")
_GeOperStatus_Type = OperStatus
_GeOperStatus_Object = MibTableColumn
geOperStatus = _GeOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 12),
    _GeOperStatus_Type()
)
geOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geOperStatus.setStatus("current")
_GeOperStatQlfr_Type = OperStatQlfr
_GeOperStatQlfr_Object = MibTableColumn
geOperStatQlfr = _GeOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 13),
    _GeOperStatQlfr_Type()
)
geOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geOperStatQlfr.setStatus("current")


class _GeAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type geAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_GeAutoEnableTimer_Object = MibTableColumn
geAutoEnableTimer = _GeAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 14),
    _GeAutoEnableTimer_Type()
)
geAutoEnableTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geAutoEnableTimer.setStatus("current")
_GeActAutoEnableTimer_Type = HoursAndMinutes
_GeActAutoEnableTimer_Object = MibTableColumn
geActAutoEnableTimer = _GeActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 15),
    _GeActAutoEnableTimer_Type()
)
geActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geActAutoEnableTimer.setStatus("current")
_GeWavelength_Type = FixedX100
_GeWavelength_Object = MibTableColumn
geWavelength = _GeWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 16),
    _GeWavelength_Type()
)
geWavelength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geWavelength.setStatus("current")


class _GeVendorPN1_Type(DisplayString):
    """Custom type geVendorPN1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_GeVendorPN1_Type.__name__ = "DisplayString"
_GeVendorPN1_Object = MibTableColumn
geVendorPN1 = _GeVendorPN1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 17),
    _GeVendorPN1_Type()
)
geVendorPN1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geVendorPN1.setStatus("current")


class _GeVendorPN2_Type(DisplayString):
    """Custom type geVendorPN2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_GeVendorPN2_Type.__name__ = "DisplayString"
_GeVendorPN2_Object = MibTableColumn
geVendorPN2 = _GeVendorPN2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 18),
    _GeVendorPN2_Type()
)
geVendorPN2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geVendorPN2.setStatus("current")


class _GeVendorPN3_Type(DisplayString):
    """Custom type geVendorPN3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_GeVendorPN3_Type.__name__ = "DisplayString"
_GeVendorPN3_Object = MibTableColumn
geVendorPN3 = _GeVendorPN3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 19),
    _GeVendorPN3_Type()
)
geVendorPN3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geVendorPN3.setStatus("current")


class _GePhyPMMon_Type(Integer32):
    """Custom type gePhyPMMon based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_GePhyPMMon_Type.__name__ = "Integer32"
_GePhyPMMon_Object = MibTableColumn
gePhyPMMon = _GePhyPMMon_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 20),
    _GePhyPMMon_Type()
)
gePhyPMMon.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    gePhyPMMon.setStatus("current")


class _GeFPSD_Type(Integer32):
    """Custom type geFPSD based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_GeFPSD_Type.__name__ = "Integer32"
_GeFPSD_Object = MibTableColumn
geFPSD = _GeFPSD_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 21),
    _GeFPSD_Type()
)
geFPSD.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geFPSD.setStatus("current")


class _GeLaserStatus_Type(Integer32):
    """Custom type geLaserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_GeLaserStatus_Type.__name__ = "Integer32"
_GeLaserStatus_Object = MibTableColumn
geLaserStatus = _GeLaserStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 22),
    _GeLaserStatus_Type()
)
geLaserStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geLaserStatus.setStatus("current")


class _GeId1_Type(DisplayString):
    """Custom type geId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_GeId1_Type.__name__ = "DisplayString"
_GeId1_Object = MibTableColumn
geId1 = _GeId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 23),
    _GeId1_Type()
)
geId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geId1.setStatus("current")


class _GeFiberType_Type(FiberType):
    """Custom type geFiberType based on FiberType"""


_GeFiberType_Object = MibTableColumn
geFiberType = _GeFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 24),
    _GeFiberType_Type()
)
geFiberType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geFiberType.setStatus("current")
_GeCustom1_Type = DisplayString
_GeCustom1_Object = MibTableColumn
geCustom1 = _GeCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 25),
    _GeCustom1_Type()
)
geCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geCustom1.setStatus("current")
_GeSpeed_Type = Gauge32
_GeSpeed_Object = MibTableColumn
geSpeed = _GeSpeed_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 26),
    _GeSpeed_Type()
)
geSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geSpeed.setStatus("current")
if mibBuilder.loadTexts:
    geSpeed.setUnits("Mbps")
_GeDuplex_Type = DuplexModeType
_GeDuplex_Object = MibTableColumn
geDuplex = _GeDuplex_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 27),
    _GeDuplex_Type()
)
geDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geDuplex.setStatus("current")


class _GeMediaRate_Type(MediaRateType):
    """Custom type geMediaRate based on MediaRateType"""


_GeMediaRate_Object = MibTableColumn
geMediaRate = _GeMediaRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 28),
    _GeMediaRate_Type()
)
geMediaRate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geMediaRate.setStatus("current")
_GeMTU_Type = Integer32
_GeMTU_Object = MibTableColumn
geMTU = _GeMTU_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 29),
    _GeMTU_Type()
)
geMTU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geMTU.setStatus("current")
_GeMACAddr_Type = MacAddress
_GeMACAddr_Object = MibTableColumn
geMACAddr = _GeMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 30),
    _GeMACAddr_Type()
)
geMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geMACAddr.setStatus("current")


class _GeGfpMode_Type(Integer32):
    """Custom type geGfpMode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("gfpf", 2),
          ("gfpt", 3),
          ("unmapped", 1))
    )


_GeGfpMode_Type.__name__ = "Integer32"
_GeGfpMode_Object = MibTableColumn
geGfpMode = _GeGfpMode_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 31),
    _GeGfpMode_Type()
)
geGfpMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geGfpMode.setStatus("current")


class _GeFlowControl_Type(Integer32):
    """Custom type geFlowControl based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("transparent", 1))
    )


_GeFlowControl_Type.__name__ = "Integer32"
_GeFlowControl_Object = MibTableColumn
geFlowControl = _GeFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 32),
    _GeFlowControl_Type()
)
geFlowControl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geFlowControl.setStatus("current")
_GeRemoteId_Type = DisplayString
_GeRemoteId_Object = MibTableColumn
geRemoteId = _GeRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 33),
    _GeRemoteId_Type()
)
geRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geRemoteId.setStatus("current")
_GeRowStatus_Type = RowStatus
_GeRowStatus_Object = MibTableColumn
geRowStatus = _GeRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 100),
    _GeRowStatus_Type()
)
geRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    geRowStatus.setStatus("current")
_FeTable_Object = MibTable
feTable = _FeTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10)
)
if mibBuilder.loadTexts:
    feTable.setStatus("current")
_FeEntry_Object = MibTableRow
feEntry = _FeEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1)
)
feEntry.setIndexNames(
    (0, "BTI-7000-MIB", "feShelfIdx"),
    (0, "BTI-7000-MIB", "feSlotIdx"),
    (0, "BTI-7000-MIB", "fePortIdx"),
)
if mibBuilder.loadTexts:
    feEntry.setStatus("current")


class _FeShelfIdx_Type(Integer32):
    """Custom type feShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_FeShelfIdx_Type.__name__ = "Integer32"
_FeShelfIdx_Object = MibTableColumn
feShelfIdx = _FeShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 1),
    _FeShelfIdx_Type()
)
feShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    feShelfIdx.setStatus("current")


class _FeSlotIdx_Type(Integer32):
    """Custom type feSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FeSlotIdx_Type.__name__ = "Integer32"
_FeSlotIdx_Object = MibTableColumn
feSlotIdx = _FeSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 2),
    _FeSlotIdx_Type()
)
feSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    feSlotIdx.setStatus("current")


class _FePortIdx_Type(Integer32):
    """Custom type fePortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 6),
    )


_FePortIdx_Type.__name__ = "Integer32"
_FePortIdx_Object = MibTableColumn
fePortIdx = _FePortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 3),
    _FePortIdx_Type()
)
fePortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    fePortIdx.setStatus("current")


class _FeId1_Type(DisplayString):
    """Custom type feId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FeId1_Type.__name__ = "DisplayString"
_FeId1_Object = MibTableColumn
feId1 = _FeId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 4),
    _FeId1_Type()
)
feId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    feId1.setStatus("current")
_FeCustom1_Type = DisplayString
_FeCustom1_Object = MibTableColumn
feCustom1 = _FeCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 5),
    _FeCustom1_Type()
)
feCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    feCustom1.setStatus("current")
_FeSpeed_Type = Gauge32
_FeSpeed_Object = MibTableColumn
feSpeed = _FeSpeed_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 6),
    _FeSpeed_Type()
)
feSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    feSpeed.setStatus("current")
if mibBuilder.loadTexts:
    feSpeed.setUnits("Mbps")
_FeDuplex_Type = DuplexModeType
_FeDuplex_Object = MibTableColumn
feDuplex = _FeDuplex_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 7),
    _FeDuplex_Type()
)
feDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    feDuplex.setStatus("current")
_FeMediaRate_Type = MediaRateType
_FeMediaRate_Object = MibTableColumn
feMediaRate = _FeMediaRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 8),
    _FeMediaRate_Type()
)
feMediaRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    feMediaRate.setStatus("current")
_FeMTU_Type = Integer32
_FeMTU_Object = MibTableColumn
feMTU = _FeMTU_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 9),
    _FeMTU_Type()
)
feMTU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    feMTU.setStatus("current")
_FeMACAddr_Type = MacAddress
_FeMACAddr_Object = MibTableColumn
feMACAddr = _FeMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 10),
    _FeMACAddr_Type()
)
feMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    feMACAddr.setStatus("current")
_FeRemoteId_Type = DisplayString
_FeRemoteId_Object = MibTableColumn
feRemoteId = _FeRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 11),
    _FeRemoteId_Type()
)
feRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    feRemoteId.setStatus("current")
_FeRowStatus_Type = RowStatus
_FeRowStatus_Object = MibTableColumn
feRowStatus = _FeRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 100),
    _FeRowStatus_Type()
)
feRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    feRowStatus.setStatus("current")
_VcgTable_Object = MibTable
vcgTable = _VcgTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11)
)
if mibBuilder.loadTexts:
    vcgTable.setStatus("current")
_VcgEntry_Object = MibTableRow
vcgEntry = _VcgEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1)
)
vcgEntry.setIndexNames(
    (0, "BTI-7000-MIB", "vcgShelfIdx"),
    (0, "BTI-7000-MIB", "vcgSlotIdx"),
    (0, "BTI-7000-MIB", "vcgPortIdx"),
    (0, "BTI-7000-MIB", "vcgIdx"),
)
if mibBuilder.loadTexts:
    vcgEntry.setStatus("current")


class _VcgShelfIdx_Type(Integer32):
    """Custom type vcgShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcgShelfIdx_Type.__name__ = "Integer32"
_VcgShelfIdx_Object = MibTableColumn
vcgShelfIdx = _VcgShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 1),
    _VcgShelfIdx_Type()
)
vcgShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgShelfIdx.setStatus("current")


class _VcgSlotIdx_Type(Integer32):
    """Custom type vcgSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcgSlotIdx_Type.__name__ = "Integer32"
_VcgSlotIdx_Object = MibTableColumn
vcgSlotIdx = _VcgSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 2),
    _VcgSlotIdx_Type()
)
vcgSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgSlotIdx.setStatus("current")


class _VcgPortIdx_Type(Integer32):
    """Custom type vcgPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcgPortIdx_Type.__name__ = "Integer32"
_VcgPortIdx_Object = MibTableColumn
vcgPortIdx = _VcgPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 3),
    _VcgPortIdx_Type()
)
vcgPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgPortIdx.setStatus("current")


class _VcgIdx_Type(Integer32):
    """Custom type vcgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VcgIdx_Type.__name__ = "Integer32"
_VcgIdx_Object = MibTableColumn
vcgIdx = _VcgIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 4),
    _VcgIdx_Type()
)
vcgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgIdx.setStatus("current")


class _VcgType_Type(Integer32):
    """Custom type vcgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23)
        )
    )
    namedValues = NamedValues(
        *(("sts1c19v", 8),
          ("sts1c21v", 1),
          ("sts1c22v", 9),
          ("sts1c2v", 2),
          ("sts1c31v", 21),
          ("sts1c37v", 10),
          ("sts1c3v", 7),
          ("sts1c6v", 19),
          ("sts1c74v", 11),
          ("sts3c10v", 22),
          ("sts3c12v", 13),
          ("sts3c1v", 4),
          ("sts3c24v", 14),
          ("sts3c2v", 20),
          ("sts3c6v", 12),
          ("sts3c7v", 3),
          ("vc410v", 23),
          ("vc412v", 16),
          ("vc41v", 6),
          ("vc424v", 17),
          ("vc42v", 18),
          ("vc46v", 15),
          ("vc47v", 5))
    )


_VcgType_Type.__name__ = "Integer32"
_VcgType_Object = MibTableColumn
vcgType = _VcgType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 5),
    _VcgType_Type()
)
vcgType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgType.setStatus("current")


class _VcgTimeSlotIndices_Type(DisplayString):
    """Custom type vcgTimeSlotIndices based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 511),
    )


_VcgTimeSlotIndices_Type.__name__ = "DisplayString"
_VcgTimeSlotIndices_Object = MibTableColumn
vcgTimeSlotIndices = _VcgTimeSlotIndices_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 6),
    _VcgTimeSlotIndices_Type()
)
vcgTimeSlotIndices.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgTimeSlotIndices.setStatus("current")
_VcgRowStatus_Type = RowStatus
_VcgRowStatus_Object = MibTableColumn
vcgRowStatus = _VcgRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 100),
    _VcgRowStatus_Type()
)
vcgRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgRowStatus.setStatus("current")
_FcTable_Object = MibTable
fcTable = _FcTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12)
)
if mibBuilder.loadTexts:
    fcTable.setStatus("current")
_FcEntry_Object = MibTableRow
fcEntry = _FcEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1)
)
fcEntry.setIndexNames(
    (0, "BTI-7000-MIB", "fcShelfIdx"),
    (0, "BTI-7000-MIB", "fcSlotIdx"),
    (0, "BTI-7000-MIB", "fcPortIdx"),
)
if mibBuilder.loadTexts:
    fcEntry.setStatus("current")


class _FcShelfIdx_Type(Integer32):
    """Custom type fcShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_FcShelfIdx_Type.__name__ = "Integer32"
_FcShelfIdx_Object = MibTableColumn
fcShelfIdx = _FcShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 1),
    _FcShelfIdx_Type()
)
fcShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    fcShelfIdx.setStatus("current")


class _FcSlotIdx_Type(Integer32):
    """Custom type fcSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_FcSlotIdx_Type.__name__ = "Integer32"
_FcSlotIdx_Object = MibTableColumn
fcSlotIdx = _FcSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 2),
    _FcSlotIdx_Type()
)
fcSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    fcSlotIdx.setStatus("current")


class _FcPortIdx_Type(Integer32):
    """Custom type fcPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_FcPortIdx_Type.__name__ = "Integer32"
_FcPortIdx_Object = MibTableColumn
fcPortIdx = _FcPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 3),
    _FcPortIdx_Type()
)
fcPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    fcPortIdx.setStatus("current")


class _FcRate_Type(Integer32):
    """Custom type fcRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fourGbs", 3),
          ("oneGbs", 1),
          ("twoGbs", 2))
    )


_FcRate_Type.__name__ = "Integer32"
_FcRate_Object = MibTableColumn
fcRate = _FcRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 4),
    _FcRate_Type()
)
fcRate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcRate.setStatus("current")
_FcOpticalPwrReceivedMinTh_Type = FixedX10
_FcOpticalPwrReceivedMinTh_Object = MibTableColumn
fcOpticalPwrReceivedMinTh = _FcOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 5),
    _FcOpticalPwrReceivedMinTh_Type()
)
fcOpticalPwrReceivedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcOpticalPwrReceivedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    fcOpticalPwrReceivedMinTh.setUnits("dBm/10")
_FcOpticalPwrReceivedMaxTh_Type = FixedX10
_FcOpticalPwrReceivedMaxTh_Object = MibTableColumn
fcOpticalPwrReceivedMaxTh = _FcOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 6),
    _FcOpticalPwrReceivedMaxTh_Type()
)
fcOpticalPwrReceivedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    fcOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_FcOpticalPwrTransmittedMinTh_Type = FixedX10
_FcOpticalPwrTransmittedMinTh_Object = MibTableColumn
fcOpticalPwrTransmittedMinTh = _FcOpticalPwrTransmittedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 7),
    _FcOpticalPwrTransmittedMinTh_Type()
)
fcOpticalPwrTransmittedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcOpticalPwrTransmittedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    fcOpticalPwrTransmittedMinTh.setUnits("dBm/10")
_FcOpticalPwrTransmittedMaxTh_Type = FixedX10
_FcOpticalPwrTransmittedMaxTh_Object = MibTableColumn
fcOpticalPwrTransmittedMaxTh = _FcOpticalPwrTransmittedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 8),
    _FcOpticalPwrTransmittedMaxTh_Type()
)
fcOpticalPwrTransmittedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcOpticalPwrTransmittedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    fcOpticalPwrTransmittedMaxTh.setUnits("dBm/10")
_FcOpticalPwrReceived_Type = FixedX10
_FcOpticalPwrReceived_Object = MibTableColumn
fcOpticalPwrReceived = _FcOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 9),
    _FcOpticalPwrReceived_Type()
)
fcOpticalPwrReceived.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    fcOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    fcOpticalPwrReceived.setUnits("dBm/10")
_FcOpticalPwrTransmitted_Type = FixedX10
_FcOpticalPwrTransmitted_Object = MibTableColumn
fcOpticalPwrTransmitted = _FcOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 10),
    _FcOpticalPwrTransmitted_Type()
)
fcOpticalPwrTransmitted.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    fcOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    fcOpticalPwrTransmitted.setUnits("dBm/10")


class _FcPEC_Type(DisplayString):
    """Custom type fcPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FcPEC_Type.__name__ = "DisplayString"
_FcPEC_Object = MibTableColumn
fcPEC = _FcPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 11),
    _FcPEC_Type()
)
fcPEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcPEC.setStatus("current")


class _FcAdminStatus_Type(AdminStatus):
    """Custom type fcAdminStatus based on AdminStatus"""


_FcAdminStatus_Object = MibTableColumn
fcAdminStatus = _FcAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 12),
    _FcAdminStatus_Type()
)
fcAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcAdminStatus.setStatus("current")
_FcOperStatus_Type = OperStatus
_FcOperStatus_Object = MibTableColumn
fcOperStatus = _FcOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 13),
    _FcOperStatus_Type()
)
fcOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcOperStatus.setStatus("current")
_FcOperStatQlfr_Type = OperStatQlfr
_FcOperStatQlfr_Object = MibTableColumn
fcOperStatQlfr = _FcOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 14),
    _FcOperStatQlfr_Type()
)
fcOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcOperStatQlfr.setStatus("current")


class _FcAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type fcAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_FcAutoEnableTimer_Object = MibTableColumn
fcAutoEnableTimer = _FcAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 15),
    _FcAutoEnableTimer_Type()
)
fcAutoEnableTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcAutoEnableTimer.setStatus("current")
_FcActAutoEnableTimer_Type = HoursAndMinutes
_FcActAutoEnableTimer_Object = MibTableColumn
fcActAutoEnableTimer = _FcActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 16),
    _FcActAutoEnableTimer_Type()
)
fcActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcActAutoEnableTimer.setStatus("current")
_FcWavelength_Type = FixedX100
_FcWavelength_Object = MibTableColumn
fcWavelength = _FcWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 17),
    _FcWavelength_Type()
)
fcWavelength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcWavelength.setStatus("current")


class _FcVendorPN1_Type(DisplayString):
    """Custom type fcVendorPN1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_FcVendorPN1_Type.__name__ = "DisplayString"
_FcVendorPN1_Object = MibTableColumn
fcVendorPN1 = _FcVendorPN1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 18),
    _FcVendorPN1_Type()
)
fcVendorPN1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcVendorPN1.setStatus("current")


class _FcVendorPN2_Type(DisplayString):
    """Custom type fcVendorPN2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_FcVendorPN2_Type.__name__ = "DisplayString"
_FcVendorPN2_Object = MibTableColumn
fcVendorPN2 = _FcVendorPN2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 19),
    _FcVendorPN2_Type()
)
fcVendorPN2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcVendorPN2.setStatus("current")


class _FcVendorPN3_Type(DisplayString):
    """Custom type fcVendorPN3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_FcVendorPN3_Type.__name__ = "DisplayString"
_FcVendorPN3_Object = MibTableColumn
fcVendorPN3 = _FcVendorPN3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 20),
    _FcVendorPN3_Type()
)
fcVendorPN3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcVendorPN3.setStatus("current")


class _FcPhyPMMon_Type(Integer32):
    """Custom type fcPhyPMMon based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_FcPhyPMMon_Type.__name__ = "Integer32"
_FcPhyPMMon_Object = MibTableColumn
fcPhyPMMon = _FcPhyPMMon_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 21),
    _FcPhyPMMon_Type()
)
fcPhyPMMon.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcPhyPMMon.setStatus("current")


class _FcFPSD_Type(Integer32):
    """Custom type fcFPSD based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_FcFPSD_Type.__name__ = "Integer32"
_FcFPSD_Object = MibTableColumn
fcFPSD = _FcFPSD_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 22),
    _FcFPSD_Type()
)
fcFPSD.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcFPSD.setStatus("current")


class _FcLaserStatus_Type(Integer32):
    """Custom type fcLaserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FcLaserStatus_Type.__name__ = "Integer32"
_FcLaserStatus_Object = MibTableColumn
fcLaserStatus = _FcLaserStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 23),
    _FcLaserStatus_Type()
)
fcLaserStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcLaserStatus.setStatus("current")


class _FcId1_Type(DisplayString):
    """Custom type fcId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FcId1_Type.__name__ = "DisplayString"
_FcId1_Object = MibTableColumn
fcId1 = _FcId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 24),
    _FcId1_Type()
)
fcId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcId1.setStatus("current")


class _FcFiberType_Type(FiberType):
    """Custom type fcFiberType based on FiberType"""


_FcFiberType_Object = MibTableColumn
fcFiberType = _FcFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 25),
    _FcFiberType_Type()
)
fcFiberType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcFiberType.setStatus("current")
_FcCustom1_Type = DisplayString
_FcCustom1_Object = MibTableColumn
fcCustom1 = _FcCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 26),
    _FcCustom1_Type()
)
fcCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcCustom1.setStatus("current")


class _FcGfpMode_Type(Integer32):
    """Custom type fcGfpMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("gfpt", 2),
          ("unmapped", 1))
    )


_FcGfpMode_Type.__name__ = "Integer32"
_FcGfpMode_Object = MibTableColumn
fcGfpMode = _FcGfpMode_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 27),
    _FcGfpMode_Type()
)
fcGfpMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcGfpMode.setStatus("current")
_FcRemoteId_Type = DisplayString
_FcRemoteId_Object = MibTableColumn
fcRemoteId = _FcRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 28),
    _FcRemoteId_Type()
)
fcRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcRemoteId.setStatus("current")
_FcRowStatus_Type = RowStatus
_FcRowStatus_Object = MibTableColumn
fcRowStatus = _FcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 100),
    _FcRowStatus_Type()
)
fcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fcRowStatus.setStatus("current")
_EthIntfTable_Object = MibTable
ethIntfTable = _EthIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14)
)
if mibBuilder.loadTexts:
    ethIntfTable.setStatus("current")
_EthIntfEntry_Object = MibTableRow
ethIntfEntry = _EthIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1)
)
ethIntfEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ethIntfShelfIdx"),
    (0, "BTI-7000-MIB", "ethIntfSlotIdx"),
    (0, "BTI-7000-MIB", "ethIntfPortTypeIdx"),
    (0, "BTI-7000-MIB", "ethIntfPortIdx"),
)
if mibBuilder.loadTexts:
    ethIntfEntry.setStatus("current")


class _EthIntfShelfIdx_Type(Integer32):
    """Custom type ethIntfShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_EthIntfShelfIdx_Type.__name__ = "Integer32"
_EthIntfShelfIdx_Object = MibTableColumn
ethIntfShelfIdx = _EthIntfShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 1),
    _EthIntfShelfIdx_Type()
)
ethIntfShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ethIntfShelfIdx.setStatus("current")


class _EthIntfSlotIdx_Type(Integer32):
    """Custom type ethIntfSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_EthIntfSlotIdx_Type.__name__ = "Integer32"
_EthIntfSlotIdx_Object = MibTableColumn
ethIntfSlotIdx = _EthIntfSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 2),
    _EthIntfSlotIdx_Type()
)
ethIntfSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ethIntfSlotIdx.setStatus("current")
_EthIntfPortTypeIdx_Type = PvxL1PortType
_EthIntfPortTypeIdx_Object = MibTableColumn
ethIntfPortTypeIdx = _EthIntfPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 3),
    _EthIntfPortTypeIdx_Type()
)
ethIntfPortTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ethIntfPortTypeIdx.setStatus("current")


class _EthIntfPortIdx_Type(Integer32):
    """Custom type ethIntfPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_EthIntfPortIdx_Type.__name__ = "Integer32"
_EthIntfPortIdx_Object = MibTableColumn
ethIntfPortIdx = _EthIntfPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 4),
    _EthIntfPortIdx_Type()
)
ethIntfPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ethIntfPortIdx.setStatus("current")
_EthIntfOpticalPwrReceivedMinTh_Type = FixedX10
_EthIntfOpticalPwrReceivedMinTh_Object = MibTableColumn
ethIntfOpticalPwrReceivedMinTh = _EthIntfOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 5),
    _EthIntfOpticalPwrReceivedMinTh_Type()
)
ethIntfOpticalPwrReceivedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrReceivedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrReceivedMinTh.setUnits("dBm/10")
_EthIntfOpticalPwrReceivedMaxTh_Type = FixedX10
_EthIntfOpticalPwrReceivedMaxTh_Object = MibTableColumn
ethIntfOpticalPwrReceivedMaxTh = _EthIntfOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 6),
    _EthIntfOpticalPwrReceivedMaxTh_Type()
)
ethIntfOpticalPwrReceivedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_EthIntfOpticalPwrTransmittedMinTh_Type = FixedX10
_EthIntfOpticalPwrTransmittedMinTh_Object = MibTableColumn
ethIntfOpticalPwrTransmittedMinTh = _EthIntfOpticalPwrTransmittedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 7),
    _EthIntfOpticalPwrTransmittedMinTh_Type()
)
ethIntfOpticalPwrTransmittedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrTransmittedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrTransmittedMinTh.setUnits("dBm/10")
_EthIntfOpticalPwrTransmittedMaxTh_Type = FixedX10
_EthIntfOpticalPwrTransmittedMaxTh_Object = MibTableColumn
ethIntfOpticalPwrTransmittedMaxTh = _EthIntfOpticalPwrTransmittedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 8),
    _EthIntfOpticalPwrTransmittedMaxTh_Type()
)
ethIntfOpticalPwrTransmittedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrTransmittedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrTransmittedMaxTh.setUnits("dBm/10")
_EthIntfOpticalPwrReceived_Type = FixedX10
_EthIntfOpticalPwrReceived_Object = MibTableColumn
ethIntfOpticalPwrReceived = _EthIntfOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 9),
    _EthIntfOpticalPwrReceived_Type()
)
ethIntfOpticalPwrReceived.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrReceived.setUnits("dBm/10")
_EthIntfOpticalPwrTransmitted_Type = FixedX10
_EthIntfOpticalPwrTransmitted_Object = MibTableColumn
ethIntfOpticalPwrTransmitted = _EthIntfOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 10),
    _EthIntfOpticalPwrTransmitted_Type()
)
ethIntfOpticalPwrTransmitted.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    ethIntfOpticalPwrTransmitted.setUnits("dBm/10")


class _EthIntfPEC_Type(DisplayString):
    """Custom type ethIntfPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_EthIntfPEC_Type.__name__ = "DisplayString"
_EthIntfPEC_Object = MibTableColumn
ethIntfPEC = _EthIntfPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 11),
    _EthIntfPEC_Type()
)
ethIntfPEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfPEC.setStatus("current")


class _EthIntfAdminStatus_Type(Integer32):
    """Custom type ethIntfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_EthIntfAdminStatus_Type.__name__ = "Integer32"
_EthIntfAdminStatus_Object = MibTableColumn
ethIntfAdminStatus = _EthIntfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 12),
    _EthIntfAdminStatus_Type()
)
ethIntfAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfAdminStatus.setStatus("current")
_EthIntfOperStatus_Type = OperStatus
_EthIntfOperStatus_Object = MibTableColumn
ethIntfOperStatus = _EthIntfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 13),
    _EthIntfOperStatus_Type()
)
ethIntfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfOperStatus.setStatus("current")
_EthIntfOperStatQlfr_Type = OperStatQlfr
_EthIntfOperStatQlfr_Object = MibTableColumn
ethIntfOperStatQlfr = _EthIntfOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 14),
    _EthIntfOperStatQlfr_Type()
)
ethIntfOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfOperStatQlfr.setStatus("current")


class _EthIntfAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type ethIntfAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_EthIntfAutoEnableTimer_Object = MibTableColumn
ethIntfAutoEnableTimer = _EthIntfAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 15),
    _EthIntfAutoEnableTimer_Type()
)
ethIntfAutoEnableTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfAutoEnableTimer.setStatus("current")
_EthIntfActAutoEnableTimer_Type = HoursAndMinutes
_EthIntfActAutoEnableTimer_Object = MibTableColumn
ethIntfActAutoEnableTimer = _EthIntfActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 16),
    _EthIntfActAutoEnableTimer_Type()
)
ethIntfActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfActAutoEnableTimer.setStatus("current")
_EthIntfWavelength_Type = FixedX100
_EthIntfWavelength_Object = MibTableColumn
ethIntfWavelength = _EthIntfWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 17),
    _EthIntfWavelength_Type()
)
ethIntfWavelength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfWavelength.setStatus("current")


class _EthIntfVendorPN1_Type(DisplayString):
    """Custom type ethIntfVendorPN1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_EthIntfVendorPN1_Type.__name__ = "DisplayString"
_EthIntfVendorPN1_Object = MibTableColumn
ethIntfVendorPN1 = _EthIntfVendorPN1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 18),
    _EthIntfVendorPN1_Type()
)
ethIntfVendorPN1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfVendorPN1.setStatus("current")


class _EthIntfVendorPN2_Type(DisplayString):
    """Custom type ethIntfVendorPN2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_EthIntfVendorPN2_Type.__name__ = "DisplayString"
_EthIntfVendorPN2_Object = MibTableColumn
ethIntfVendorPN2 = _EthIntfVendorPN2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 19),
    _EthIntfVendorPN2_Type()
)
ethIntfVendorPN2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfVendorPN2.setStatus("current")


class _EthIntfVendorPN3_Type(DisplayString):
    """Custom type ethIntfVendorPN3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_EthIntfVendorPN3_Type.__name__ = "DisplayString"
_EthIntfVendorPN3_Object = MibTableColumn
ethIntfVendorPN3 = _EthIntfVendorPN3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 20),
    _EthIntfVendorPN3_Type()
)
ethIntfVendorPN3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfVendorPN3.setStatus("current")


class _EthIntfPhyPMMon_Type(Integer32):
    """Custom type ethIntfPhyPMMon based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_EthIntfPhyPMMon_Type.__name__ = "Integer32"
_EthIntfPhyPMMon_Object = MibTableColumn
ethIntfPhyPMMon = _EthIntfPhyPMMon_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 21),
    _EthIntfPhyPMMon_Type()
)
ethIntfPhyPMMon.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfPhyPMMon.setStatus("current")


class _EthIntfFPSD_Type(Integer32):
    """Custom type ethIntfFPSD based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_EthIntfFPSD_Type.__name__ = "Integer32"
_EthIntfFPSD_Object = MibTableColumn
ethIntfFPSD = _EthIntfFPSD_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 22),
    _EthIntfFPSD_Type()
)
ethIntfFPSD.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfFPSD.setStatus("current")


class _EthIntfLaserStatus_Type(Integer32):
    """Custom type ethIntfLaserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_EthIntfLaserStatus_Type.__name__ = "Integer32"
_EthIntfLaserStatus_Object = MibTableColumn
ethIntfLaserStatus = _EthIntfLaserStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 23),
    _EthIntfLaserStatus_Type()
)
ethIntfLaserStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfLaserStatus.setStatus("current")


class _EthIntfId1_Type(DisplayString):
    """Custom type ethIntfId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_EthIntfId1_Type.__name__ = "DisplayString"
_EthIntfId1_Object = MibTableColumn
ethIntfId1 = _EthIntfId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 24),
    _EthIntfId1_Type()
)
ethIntfId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfId1.setStatus("current")


class _EthIntfFiberType_Type(FiberType):
    """Custom type ethIntfFiberType based on FiberType"""


_EthIntfFiberType_Object = MibTableColumn
ethIntfFiberType = _EthIntfFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 25),
    _EthIntfFiberType_Type()
)
ethIntfFiberType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfFiberType.setStatus("current")
_EthIntfCustom1_Type = DisplayString
_EthIntfCustom1_Object = MibTableColumn
ethIntfCustom1 = _EthIntfCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 26),
    _EthIntfCustom1_Type()
)
ethIntfCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfCustom1.setStatus("current")
_EthIntfSpeed_Type = Gauge32
_EthIntfSpeed_Object = MibTableColumn
ethIntfSpeed = _EthIntfSpeed_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 27),
    _EthIntfSpeed_Type()
)
ethIntfSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfSpeed.setStatus("current")
if mibBuilder.loadTexts:
    ethIntfSpeed.setUnits("Mbps")


class _EthIntfDuplex_Type(Integer32):
    """Custom type ethIntfDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("both", 3),
          ("full", 2),
          ("half", 1))
    )


_EthIntfDuplex_Type.__name__ = "Integer32"
_EthIntfDuplex_Object = MibTableColumn
ethIntfDuplex = _EthIntfDuplex_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 28),
    _EthIntfDuplex_Type()
)
ethIntfDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfDuplex.setStatus("current")


class _EthIntfMediaRate_Type(MediaRateType):
    """Custom type ethIntfMediaRate based on MediaRateType"""


_EthIntfMediaRate_Object = MibTableColumn
ethIntfMediaRate = _EthIntfMediaRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 29),
    _EthIntfMediaRate_Type()
)
ethIntfMediaRate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfMediaRate.setStatus("current")


class _EthIntfMTU_Type(Integer32):
    """Custom type ethIntfMTU based on Integer32"""
    defaultValue = 1518

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1518, 9600),
    )


_EthIntfMTU_Type.__name__ = "Integer32"
_EthIntfMTU_Object = MibTableColumn
ethIntfMTU = _EthIntfMTU_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 30),
    _EthIntfMTU_Type()
)
ethIntfMTU.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfMTU.setStatus("current")


class _EthIntfLinkStatus_Type(Integer32):
    """Custom type ethIntfLinkStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_EthIntfLinkStatus_Type.__name__ = "Integer32"
_EthIntfLinkStatus_Object = MibTableColumn
ethIntfLinkStatus = _EthIntfLinkStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 31),
    _EthIntfLinkStatus_Type()
)
ethIntfLinkStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfLinkStatus.setStatus("current")


class _EthIntfLagId_Type(Integer32):
    """Custom type ethIntfLagId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_EthIntfLagId_Type.__name__ = "Integer32"
_EthIntfLagId_Object = MibTableColumn
ethIntfLagId = _EthIntfLagId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 32),
    _EthIntfLagId_Type()
)
ethIntfLagId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfLagId.setStatus("current")
_EthIntfLagPortPriority_Type = Integer32
_EthIntfLagPortPriority_Object = MibTableColumn
ethIntfLagPortPriority = _EthIntfLagPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 33),
    _EthIntfLagPortPriority_Type()
)
ethIntfLagPortPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfLagPortPriority.setStatus("current")


class _EthIntfBER_Type(BERType):
    """Custom type ethIntfBER based on BERType"""


_EthIntfBER_Object = MibTableColumn
ethIntfBER = _EthIntfBER_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 37),
    _EthIntfBER_Type()
)
ethIntfBER.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfBER.setStatus("current")
_EthIntfMACAddr_Type = MacAddress
_EthIntfMACAddr_Object = MibTableColumn
ethIntfMACAddr = _EthIntfMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 39),
    _EthIntfMACAddr_Type()
)
ethIntfMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfMACAddr.setStatus("current")


class _EthIntfLineMapping_Type(Integer32):
    """Custom type ethIntfLineMapping based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 3),
          ("otu2gfp1", 2),
          ("stacking", 4),
          ("tenglanphy", 1))
    )


_EthIntfLineMapping_Type.__name__ = "Integer32"
_EthIntfLineMapping_Object = MibTableColumn
ethIntfLineMapping = _EthIntfLineMapping_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 40),
    _EthIntfLineMapping_Type()
)
ethIntfLineMapping.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfLineMapping.setStatus("current")


class _EthIntfErrorCorrection_Type(Integer32):
    """Custom type ethIntfErrorCorrection based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("efec", 3),
          ("fec", 2),
          ("none", 1))
    )


_EthIntfErrorCorrection_Type.__name__ = "Integer32"
_EthIntfErrorCorrection_Object = MibTableColumn
ethIntfErrorCorrection = _EthIntfErrorCorrection_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 41),
    _EthIntfErrorCorrection_Type()
)
ethIntfErrorCorrection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfErrorCorrection.setStatus("current")


class _EthIntfLpbkOpCmd_Type(Integer32):
    """Custom type ethIntfLpbkOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("oprLpbk", 2),
          ("rlsLpbk", 3))
    )


_EthIntfLpbkOpCmd_Type.__name__ = "Integer32"
_EthIntfLpbkOpCmd_Object = MibTableColumn
ethIntfLpbkOpCmd = _EthIntfLpbkOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 42),
    _EthIntfLpbkOpCmd_Type()
)
ethIntfLpbkOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIntfLpbkOpCmd.setStatus("current")
_EthIntfRemoteId_Type = DisplayString
_EthIntfRemoteId_Object = MibTableColumn
ethIntfRemoteId = _EthIntfRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 43),
    _EthIntfRemoteId_Type()
)
ethIntfRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfRemoteId.setStatus("current")


class _EthIntfMirrorConfig_Type(MirrorConfigType):
    """Custom type ethIntfMirrorConfig based on MirrorConfigType"""


_EthIntfMirrorConfig_Object = MibTableColumn
ethIntfMirrorConfig = _EthIntfMirrorConfig_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 44),
    _EthIntfMirrorConfig_Type()
)
ethIntfMirrorConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIntfMirrorConfig.setStatus("current")


class _EthIntfLldpAdminStatus_Type(Integer32):
    """Custom type ethIntfLldpAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_EthIntfLldpAdminStatus_Type.__name__ = "Integer32"
_EthIntfLldpAdminStatus_Object = MibTableColumn
ethIntfLldpAdminStatus = _EthIntfLldpAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 45),
    _EthIntfLldpAdminStatus_Type()
)
ethIntfLldpAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIntfLldpAdminStatus.setStatus("current")
_EthIntfLldpRemChassisIdSubtype_Type = LldpChassisIdSubtype
_EthIntfLldpRemChassisIdSubtype_Object = MibTableColumn
ethIntfLldpRemChassisIdSubtype = _EthIntfLldpRemChassisIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 46),
    _EthIntfLldpRemChassisIdSubtype_Type()
)
ethIntfLldpRemChassisIdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfLldpRemChassisIdSubtype.setStatus("current")
_EthIntfLldpRemChassisId_Type = LldpChassisId
_EthIntfLldpRemChassisId_Object = MibTableColumn
ethIntfLldpRemChassisId = _EthIntfLldpRemChassisId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 47),
    _EthIntfLldpRemChassisId_Type()
)
ethIntfLldpRemChassisId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfLldpRemChassisId.setStatus("current")
_EthIntfLldpRemPortIdSubtype_Type = LldpPortIdSubtype
_EthIntfLldpRemPortIdSubtype_Object = MibTableColumn
ethIntfLldpRemPortIdSubtype = _EthIntfLldpRemPortIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 48),
    _EthIntfLldpRemPortIdSubtype_Type()
)
ethIntfLldpRemPortIdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfLldpRemPortIdSubtype.setStatus("current")
_EthIntfLldpRemPortId_Type = LldpPortId
_EthIntfLldpRemPortId_Object = MibTableColumn
ethIntfLldpRemPortId = _EthIntfLldpRemPortId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 49),
    _EthIntfLldpRemPortId_Type()
)
ethIntfLldpRemPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfLldpRemPortId.setStatus("current")
_EthIntfBouncingStateChangeCount_Type = Integer32
_EthIntfBouncingStateChangeCount_Object = MibTableColumn
ethIntfBouncingStateChangeCount = _EthIntfBouncingStateChangeCount_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 50),
    _EthIntfBouncingStateChangeCount_Type()
)
ethIntfBouncingStateChangeCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIntfBouncingStateChangeCount.setStatus("current")
_EthIntfRowStatus_Type = RowStatus
_EthIntfRowStatus_Object = MibTableColumn
ethIntfRowStatus = _EthIntfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 100),
    _EthIntfRowStatus_Type()
)
ethIntfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethIntfRowStatus.setStatus("current")
_OdunTable_Object = MibTable
odunTable = _OdunTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15)
)
if mibBuilder.loadTexts:
    odunTable.setStatus("current")
_OdunEntry_Object = MibTableRow
odunEntry = _OdunEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1)
)
odunEntry.setIndexNames(
    (0, "BTI-7000-MIB", "odunTypeIdx"),
    (0, "BTI-7000-MIB", "odunShelfIdx"),
    (0, "BTI-7000-MIB", "odunSlotIdx"),
    (0, "BTI-7000-MIB", "odunPortIdx"),
)
if mibBuilder.loadTexts:
    odunEntry.setStatus("current")
_OdunTypeIdx_Type = OdunType
_OdunTypeIdx_Object = MibTableColumn
odunTypeIdx = _OdunTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 1),
    _OdunTypeIdx_Type()
)
odunTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    odunTypeIdx.setStatus("current")


class _OdunShelfIdx_Type(Integer32):
    """Custom type odunShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OdunShelfIdx_Type.__name__ = "Integer32"
_OdunShelfIdx_Object = MibTableColumn
odunShelfIdx = _OdunShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 2),
    _OdunShelfIdx_Type()
)
odunShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    odunShelfIdx.setStatus("current")


class _OdunSlotIdx_Type(Integer32):
    """Custom type odunSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OdunSlotIdx_Type.__name__ = "Integer32"
_OdunSlotIdx_Object = MibTableColumn
odunSlotIdx = _OdunSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 3),
    _OdunSlotIdx_Type()
)
odunSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    odunSlotIdx.setStatus("current")


class _OdunPortIdx_Type(Integer32):
    """Custom type odunPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_OdunPortIdx_Type.__name__ = "Integer32"
_OdunPortIdx_Object = MibTableColumn
odunPortIdx = _OdunPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 4),
    _OdunPortIdx_Type()
)
odunPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    odunPortIdx.setStatus("current")


class _OdunIdx_Type(Integer32):
    """Custom type odunIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_OdunIdx_Type.__name__ = "Integer32"
_OdunIdx_Object = MibTableColumn
odunIdx = _OdunIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 5),
    _OdunIdx_Type()
)
odunIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    odunIdx.setStatus("current")
_BriTable_Object = MibTable
briTable = _BriTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16)
)
if mibBuilder.loadTexts:
    briTable.setStatus("current")
_BriEntry_Object = MibTableRow
briEntry = _BriEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1)
)
briEntry.setIndexNames(
    (0, "BTI-7000-MIB", "briShelfIdx"),
    (0, "BTI-7000-MIB", "briSlotIdx"),
    (0, "BTI-7000-MIB", "briPortIdx"),
)
if mibBuilder.loadTexts:
    briEntry.setStatus("current")


class _BriShelfIdx_Type(Integer32):
    """Custom type briShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_BriShelfIdx_Type.__name__ = "Integer32"
_BriShelfIdx_Object = MibTableColumn
briShelfIdx = _BriShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 1),
    _BriShelfIdx_Type()
)
briShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    briShelfIdx.setStatus("current")


class _BriSlotIdx_Type(Integer32):
    """Custom type briSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_BriSlotIdx_Type.__name__ = "Integer32"
_BriSlotIdx_Object = MibTableColumn
briSlotIdx = _BriSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 2),
    _BriSlotIdx_Type()
)
briSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    briSlotIdx.setStatus("current")


class _BriPortIdx_Type(Integer32):
    """Custom type briPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_BriPortIdx_Type.__name__ = "Integer32"
_BriPortIdx_Object = MibTableColumn
briPortIdx = _BriPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 3),
    _BriPortIdx_Type()
)
briPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    briPortIdx.setStatus("current")


class _BriProtocol_Type(Integer32):
    """Custom type briProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("dvbAsi", 6),
          ("escon", 2),
          ("fx100", 1),
          ("hdSdi", 4),
          ("hdSdi1001", 5),
          ("sdSdi", 3))
    )


_BriProtocol_Type.__name__ = "Integer32"
_BriProtocol_Object = MibTableColumn
briProtocol = _BriProtocol_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 4),
    _BriProtocol_Type()
)
briProtocol.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briProtocol.setStatus("current")
_BriOpticalPwrReceivedMinTh_Type = FixedX10
_BriOpticalPwrReceivedMinTh_Object = MibTableColumn
briOpticalPwrReceivedMinTh = _BriOpticalPwrReceivedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 5),
    _BriOpticalPwrReceivedMinTh_Type()
)
briOpticalPwrReceivedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briOpticalPwrReceivedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    briOpticalPwrReceivedMinTh.setUnits("dBm/10")
_BriOpticalPwrReceivedMaxTh_Type = FixedX10
_BriOpticalPwrReceivedMaxTh_Object = MibTableColumn
briOpticalPwrReceivedMaxTh = _BriOpticalPwrReceivedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 6),
    _BriOpticalPwrReceivedMaxTh_Type()
)
briOpticalPwrReceivedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briOpticalPwrReceivedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    briOpticalPwrReceivedMaxTh.setUnits("dBm/10")
_BriOpticalPwrTransmittedMinTh_Type = FixedX10
_BriOpticalPwrTransmittedMinTh_Object = MibTableColumn
briOpticalPwrTransmittedMinTh = _BriOpticalPwrTransmittedMinTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 7),
    _BriOpticalPwrTransmittedMinTh_Type()
)
briOpticalPwrTransmittedMinTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briOpticalPwrTransmittedMinTh.setStatus("current")
if mibBuilder.loadTexts:
    briOpticalPwrTransmittedMinTh.setUnits("dBm/10")
_BriOpticalPwrTransmittedMaxTh_Type = FixedX10
_BriOpticalPwrTransmittedMaxTh_Object = MibTableColumn
briOpticalPwrTransmittedMaxTh = _BriOpticalPwrTransmittedMaxTh_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 8),
    _BriOpticalPwrTransmittedMaxTh_Type()
)
briOpticalPwrTransmittedMaxTh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briOpticalPwrTransmittedMaxTh.setStatus("current")
if mibBuilder.loadTexts:
    briOpticalPwrTransmittedMaxTh.setUnits("dBm/10")
_BriOpticalPwrReceived_Type = FixedX10
_BriOpticalPwrReceived_Object = MibTableColumn
briOpticalPwrReceived = _BriOpticalPwrReceived_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 9),
    _BriOpticalPwrReceived_Type()
)
briOpticalPwrReceived.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    briOpticalPwrReceived.setStatus("current")
if mibBuilder.loadTexts:
    briOpticalPwrReceived.setUnits("dBm/10")
_BriOpticalPwrTransmitted_Type = FixedX10
_BriOpticalPwrTransmitted_Object = MibTableColumn
briOpticalPwrTransmitted = _BriOpticalPwrTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 10),
    _BriOpticalPwrTransmitted_Type()
)
briOpticalPwrTransmitted.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    briOpticalPwrTransmitted.setStatus("current")
if mibBuilder.loadTexts:
    briOpticalPwrTransmitted.setUnits("dBm/10")


class _BriPEC_Type(DisplayString):
    """Custom type briPEC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_BriPEC_Type.__name__ = "DisplayString"
_BriPEC_Object = MibTableColumn
briPEC = _BriPEC_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 11),
    _BriPEC_Type()
)
briPEC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briPEC.setStatus("current")


class _BriAdminStatus_Type(AdminStatus):
    """Custom type briAdminStatus based on AdminStatus"""


_BriAdminStatus_Object = MibTableColumn
briAdminStatus = _BriAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 12),
    _BriAdminStatus_Type()
)
briAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briAdminStatus.setStatus("current")
_BriOperStatus_Type = OperStatus
_BriOperStatus_Object = MibTableColumn
briOperStatus = _BriOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 13),
    _BriOperStatus_Type()
)
briOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briOperStatus.setStatus("current")
_BriOperStatQlfr_Type = OperStatQlfr
_BriOperStatQlfr_Object = MibTableColumn
briOperStatQlfr = _BriOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 14),
    _BriOperStatQlfr_Type()
)
briOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briOperStatQlfr.setStatus("current")


class _BriAutoEnableTimer_Type(HoursAndMinutes):
    """Custom type briAutoEnableTimer based on HoursAndMinutes"""
    defaultValue = OctetString("008-00")


_BriAutoEnableTimer_Object = MibTableColumn
briAutoEnableTimer = _BriAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 15),
    _BriAutoEnableTimer_Type()
)
briAutoEnableTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briAutoEnableTimer.setStatus("current")
_BriActAutoEnableTimer_Type = HoursAndMinutes
_BriActAutoEnableTimer_Object = MibTableColumn
briActAutoEnableTimer = _BriActAutoEnableTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 16),
    _BriActAutoEnableTimer_Type()
)
briActAutoEnableTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briActAutoEnableTimer.setStatus("current")
_BriWavelength_Type = FixedX100
_BriWavelength_Object = MibTableColumn
briWavelength = _BriWavelength_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 17),
    _BriWavelength_Type()
)
briWavelength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briWavelength.setStatus("current")


class _BriVendorPN1_Type(DisplayString):
    """Custom type briVendorPN1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_BriVendorPN1_Type.__name__ = "DisplayString"
_BriVendorPN1_Object = MibTableColumn
briVendorPN1 = _BriVendorPN1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 18),
    _BriVendorPN1_Type()
)
briVendorPN1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briVendorPN1.setStatus("current")


class _BriVendorPN2_Type(DisplayString):
    """Custom type briVendorPN2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_BriVendorPN2_Type.__name__ = "DisplayString"
_BriVendorPN2_Object = MibTableColumn
briVendorPN2 = _BriVendorPN2_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 19),
    _BriVendorPN2_Type()
)
briVendorPN2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briVendorPN2.setStatus("current")


class _BriVendorPN3_Type(DisplayString):
    """Custom type briVendorPN3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_BriVendorPN3_Type.__name__ = "DisplayString"
_BriVendorPN3_Object = MibTableColumn
briVendorPN3 = _BriVendorPN3_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 20),
    _BriVendorPN3_Type()
)
briVendorPN3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briVendorPN3.setStatus("current")


class _BriPhyPMMon_Type(Integer32):
    """Custom type briPhyPMMon based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_BriPhyPMMon_Type.__name__ = "Integer32"
_BriPhyPMMon_Object = MibTableColumn
briPhyPMMon = _BriPhyPMMon_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 21),
    _BriPhyPMMon_Type()
)
briPhyPMMon.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briPhyPMMon.setStatus("current")


class _BriLaserStatus_Type(Integer32):
    """Custom type briLaserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_BriLaserStatus_Type.__name__ = "Integer32"
_BriLaserStatus_Object = MibTableColumn
briLaserStatus = _BriLaserStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 22),
    _BriLaserStatus_Type()
)
briLaserStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briLaserStatus.setStatus("current")


class _BriId1_Type(DisplayString):
    """Custom type briId1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_BriId1_Type.__name__ = "DisplayString"
_BriId1_Object = MibTableColumn
briId1 = _BriId1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 23),
    _BriId1_Type()
)
briId1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briId1.setStatus("current")


class _BriFiberType_Type(FiberType):
    """Custom type briFiberType based on FiberType"""


_BriFiberType_Object = MibTableColumn
briFiberType = _BriFiberType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 24),
    _BriFiberType_Type()
)
briFiberType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briFiberType.setStatus("current")
_BriCustom1_Type = DisplayString
_BriCustom1_Object = MibTableColumn
briCustom1 = _BriCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 25),
    _BriCustom1_Type()
)
briCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briCustom1.setStatus("current")
_BriBitRate_Type = FixedX100
_BriBitRate_Object = MibTableColumn
briBitRate = _BriBitRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 26),
    _BriBitRate_Type()
)
briBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briBitRate.setStatus("current")
_BriRemoteId_Type = DisplayString
_BriRemoteId_Object = MibTableColumn
briRemoteId = _BriRemoteId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 27),
    _BriRemoteId_Type()
)
briRemoteId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briRemoteId.setStatus("current")
_BriRowStatus_Type = RowStatus
_BriRowStatus_Object = MibTableColumn
briRowStatus = _BriRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 100),
    _BriRowStatus_Type()
)
briRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    briRowStatus.setStatus("current")
_DataComms_ObjectIdentity = ObjectIdentity
dataComms = _DataComms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5)
)
_OscTable_Object = MibTable
oscTable = _OscTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1)
)
if mibBuilder.loadTexts:
    oscTable.setStatus("current")
_OscEntry_Object = MibTableRow
oscEntry = _OscEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1)
)
oscEntry.setIndexNames(
    (0, "BTI-7000-MIB", "oscShelfIdx"),
    (0, "BTI-7000-MIB", "oscSlotIdx"),
    (0, "BTI-7000-MIB", "oscIdx"),
)
if mibBuilder.loadTexts:
    oscEntry.setStatus("current")


class _OscShelfIdx_Type(Integer32):
    """Custom type oscShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OscShelfIdx_Type.__name__ = "Integer32"
_OscShelfIdx_Object = MibTableColumn
oscShelfIdx = _OscShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 1),
    _OscShelfIdx_Type()
)
oscShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    oscShelfIdx.setStatus("current")


class _OscSlotIdx_Type(Integer32):
    """Custom type oscSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OscSlotIdx_Type.__name__ = "Integer32"
_OscSlotIdx_Object = MibTableColumn
oscSlotIdx = _OscSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 2),
    _OscSlotIdx_Type()
)
oscSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    oscSlotIdx.setStatus("current")


class _OscIdx_Type(Integer32):
    """Custom type oscIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_OscIdx_Type.__name__ = "Integer32"
_OscIdx_Object = MibTableColumn
oscIdx = _OscIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 3),
    _OscIdx_Type()
)
oscIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    oscIdx.setStatus("current")


class _OscAdminStatus_Type(AdminStatus):
    """Custom type oscAdminStatus based on AdminStatus"""


_OscAdminStatus_Object = MibTableColumn
oscAdminStatus = _OscAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 4),
    _OscAdminStatus_Type()
)
oscAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oscAdminStatus.setStatus("current")
_OscOperStatus_Type = OperStatus
_OscOperStatus_Object = MibTableColumn
oscOperStatus = _OscOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 5),
    _OscOperStatus_Type()
)
oscOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscOperStatus.setStatus("current")
_OscOperStatQlfr_Type = OperStatQlfr
_OscOperStatQlfr_Object = MibTableColumn
oscOperStatQlfr = _OscOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 6),
    _OscOperStatQlfr_Type()
)
oscOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscOperStatQlfr.setStatus("current")
_OscCustom1_Type = DisplayString
_OscCustom1_Object = MibTableColumn
oscCustom1 = _OscCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 7),
    _OscCustom1_Type()
)
oscCustom1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oscCustom1.setStatus("current")


class _OscType_Type(Integer32):
    """Custom type oscType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("electrical", 2),
          ("logical", 3),
          ("optical", 1))
    )


_OscType_Type.__name__ = "Integer32"
_OscType_Object = MibTableColumn
oscType = _OscType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 8),
    _OscType_Type()
)
oscType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscType.setStatus("current")
_OscUnmbrd_Type = TruthValue
_OscUnmbrd_Object = MibTableColumn
oscUnmbrd = _OscUnmbrd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 9),
    _OscUnmbrd_Type()
)
oscUnmbrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscUnmbrd.setStatus("current")
_OscSpeed_Type = Gauge32
_OscSpeed_Object = MibTableColumn
oscSpeed = _OscSpeed_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 10),
    _OscSpeed_Type()
)
oscSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscSpeed.setStatus("current")
if mibBuilder.loadTexts:
    oscSpeed.setUnits("Mbps")
_OscDuplex_Type = DuplexModeType
_OscDuplex_Object = MibTableColumn
oscDuplex = _OscDuplex_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 11),
    _OscDuplex_Type()
)
oscDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscDuplex.setStatus("current")
_OscMediaRate_Type = MediaRateType
_OscMediaRate_Object = MibTableColumn
oscMediaRate = _OscMediaRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 12),
    _OscMediaRate_Type()
)
oscMediaRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscMediaRate.setStatus("current")
_OscMTU_Type = Integer32
_OscMTU_Object = MibTableColumn
oscMTU = _OscMTU_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 13),
    _OscMTU_Type()
)
oscMTU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscMTU.setStatus("current")
_OscMACAddr_Type = MacAddress
_OscMACAddr_Object = MibTableColumn
oscMACAddr = _OscMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 14),
    _OscMACAddr_Type()
)
oscMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscMACAddr.setStatus("current")
_OscIPAddr_Type = IpAddress
_OscIPAddr_Object = MibTableColumn
oscIPAddr = _OscIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 15),
    _OscIPAddr_Type()
)
oscIPAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oscIPAddr.setStatus("current")
_OscIPMask_Type = IpAddress
_OscIPMask_Object = MibTableColumn
oscIPMask = _OscIPMask_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 16),
    _OscIPMask_Type()
)
oscIPMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oscIPMask.setStatus("current")
_OscIPBcast_Type = IpAddress
_OscIPBcast_Object = MibTableColumn
oscIPBcast = _OscIPBcast_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 17),
    _OscIPBcast_Type()
)
oscIPBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscIPBcast.setStatus("current")
_OscRowStatus_Type = RowStatus
_OscRowStatus_Object = MibTableColumn
oscRowStatus = _OscRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 100),
    _OscRowStatus_Type()
)
oscRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    oscRowStatus.setStatus("current")
_NetMgmtTable_Object = MibTable
netMgmtTable = _NetMgmtTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2)
)
if mibBuilder.loadTexts:
    netMgmtTable.setStatus("current")
_NetMgmtEntry_Object = MibTableRow
netMgmtEntry = _NetMgmtEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1)
)
netMgmtEntry.setIndexNames(
    (0, "BTI-7000-MIB", "netMgmtIdx"),
)
if mibBuilder.loadTexts:
    netMgmtEntry.setStatus("current")


class _NetMgmtIdx_Type(Integer32):
    """Custom type netMgmtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("craft", 2),
          ("nms", 1))
    )


_NetMgmtIdx_Type.__name__ = "Integer32"
_NetMgmtIdx_Object = MibTableColumn
netMgmtIdx = _NetMgmtIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 1),
    _NetMgmtIdx_Type()
)
netMgmtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    netMgmtIdx.setStatus("current")


class _NetMgmtAdminStatus_Type(AdminStatus):
    """Custom type netMgmtAdminStatus based on AdminStatus"""


_NetMgmtAdminStatus_Object = MibTableColumn
netMgmtAdminStatus = _NetMgmtAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 2),
    _NetMgmtAdminStatus_Type()
)
netMgmtAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    netMgmtAdminStatus.setStatus("current")
_NetMgmtOperStatus_Type = OperStatus
_NetMgmtOperStatus_Object = MibTableColumn
netMgmtOperStatus = _NetMgmtOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 3),
    _NetMgmtOperStatus_Type()
)
netMgmtOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtOperStatus.setStatus("current")
_NetMgmtOperStatQlfr_Type = OperStatQlfr
_NetMgmtOperStatQlfr_Object = MibTableColumn
netMgmtOperStatQlfr = _NetMgmtOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 4),
    _NetMgmtOperStatQlfr_Type()
)
netMgmtOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtOperStatQlfr.setStatus("current")
_NetMgmtIPAddr_Type = IpAddress
_NetMgmtIPAddr_Object = MibTableColumn
netMgmtIPAddr = _NetMgmtIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 5),
    _NetMgmtIPAddr_Type()
)
netMgmtIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    netMgmtIPAddr.setStatus("current")
_NetMgmtIPMask_Type = IpAddress
_NetMgmtIPMask_Object = MibTableColumn
netMgmtIPMask = _NetMgmtIPMask_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 6),
    _NetMgmtIPMask_Type()
)
netMgmtIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    netMgmtIPMask.setStatus("current")
_NetMgmtIPBcast_Type = IpAddress
_NetMgmtIPBcast_Object = MibTableColumn
netMgmtIPBcast = _NetMgmtIPBcast_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 7),
    _NetMgmtIPBcast_Type()
)
netMgmtIPBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtIPBcast.setStatus("current")
_NetMgmtCustom1_Type = DisplayString
_NetMgmtCustom1_Object = MibTableColumn
netMgmtCustom1 = _NetMgmtCustom1_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 8),
    _NetMgmtCustom1_Type()
)
netMgmtCustom1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    netMgmtCustom1.setStatus("current")


class _NetMgmtType_Type(Integer32):
    """Custom type netMgmtType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("electrical", 2),
          ("logical", 3),
          ("optical", 1))
    )


_NetMgmtType_Type.__name__ = "Integer32"
_NetMgmtType_Object = MibTableColumn
netMgmtType = _NetMgmtType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 9),
    _NetMgmtType_Type()
)
netMgmtType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtType.setStatus("current")
_NetMgmtUnmbrd_Type = TruthValue
_NetMgmtUnmbrd_Object = MibTableColumn
netMgmtUnmbrd = _NetMgmtUnmbrd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 10),
    _NetMgmtUnmbrd_Type()
)
netMgmtUnmbrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtUnmbrd.setStatus("current")
_NetMgmtSpeed_Type = Gauge32
_NetMgmtSpeed_Object = MibTableColumn
netMgmtSpeed = _NetMgmtSpeed_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 11),
    _NetMgmtSpeed_Type()
)
netMgmtSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtSpeed.setStatus("current")
if mibBuilder.loadTexts:
    netMgmtSpeed.setUnits("Mbps")
_NetMgmtDuplex_Type = DuplexModeType
_NetMgmtDuplex_Object = MibTableColumn
netMgmtDuplex = _NetMgmtDuplex_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 12),
    _NetMgmtDuplex_Type()
)
netMgmtDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtDuplex.setStatus("current")
_NetMgmtMediaRate_Type = MediaRateType
_NetMgmtMediaRate_Object = MibTableColumn
netMgmtMediaRate = _NetMgmtMediaRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 13),
    _NetMgmtMediaRate_Type()
)
netMgmtMediaRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtMediaRate.setStatus("current")
_NetMgmtMTU_Type = Integer32
_NetMgmtMTU_Object = MibTableColumn
netMgmtMTU = _NetMgmtMTU_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 14),
    _NetMgmtMTU_Type()
)
netMgmtMTU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtMTU.setStatus("current")
_NetMgmtMACAddr_Type = MacAddress
_NetMgmtMACAddr_Object = MibTableColumn
netMgmtMACAddr = _NetMgmtMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 15),
    _NetMgmtMACAddr_Type()
)
netMgmtMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    netMgmtMACAddr.setStatus("current")
_SerialTable_Object = MibTable
serialTable = _SerialTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3)
)
if mibBuilder.loadTexts:
    serialTable.setStatus("current")
_SerialEntry_Object = MibTableRow
serialEntry = _SerialEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1)
)
serialEntry.setIndexNames(
    (0, "BTI-7000-MIB", "serialPortIdx"),
)
if mibBuilder.loadTexts:
    serialEntry.setStatus("current")


class _SerialPortIdx_Type(Integer32):
    """Custom type serialPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_SerialPortIdx_Type.__name__ = "Integer32"
_SerialPortIdx_Object = MibTableColumn
serialPortIdx = _SerialPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 1),
    _SerialPortIdx_Type()
)
serialPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    serialPortIdx.setStatus("current")
_SerialBaudRate_Type = Unsigned32
_SerialBaudRate_Object = MibTableColumn
serialBaudRate = _SerialBaudRate_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 2),
    _SerialBaudRate_Type()
)
serialBaudRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serialBaudRate.setStatus("current")


class _SerialDataBits_Type(Integer32):
    """Custom type serialDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SerialDataBits_Type.__name__ = "Integer32"
_SerialDataBits_Object = MibTableColumn
serialDataBits = _SerialDataBits_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 3),
    _SerialDataBits_Type()
)
serialDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serialDataBits.setStatus("current")


class _SerialParity_Type(Integer32):
    """Custom type serialParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("none", 1),
          ("odd", 2))
    )


_SerialParity_Type.__name__ = "Integer32"
_SerialParity_Object = MibTableColumn
serialParity = _SerialParity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 4),
    _SerialParity_Type()
)
serialParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serialParity.setStatus("current")


class _SerialStopBits_Type(Integer32):
    """Custom type serialStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("one", 1),
          ("two", 2))
    )


_SerialStopBits_Type.__name__ = "Integer32"
_SerialStopBits_Object = MibTableColumn
serialStopBits = _SerialStopBits_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 5),
    _SerialStopBits_Type()
)
serialStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serialStopBits.setStatus("current")
_Gcc0ConfigTable_Object = MibTable
gcc0ConfigTable = _Gcc0ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4)
)
if mibBuilder.loadTexts:
    gcc0ConfigTable.setStatus("current")
_Gcc0ConfigEntry_Object = MibTableRow
gcc0ConfigEntry = _Gcc0ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1)
)
gcc0ConfigEntry.setIndexNames(
    (0, "BTI-7000-MIB", "gcc0ConfigCpTypeIdx"),
    (0, "BTI-7000-MIB", "gcc0ConfigShelfIdx"),
    (0, "BTI-7000-MIB", "gcc0ConfigSlotIdx"),
    (0, "BTI-7000-MIB", "gcc0ConfigPortIdx"),
)
if mibBuilder.loadTexts:
    gcc0ConfigEntry.setStatus("current")
_Gcc0ConfigCpTypeIdx_Type = CpType
_Gcc0ConfigCpTypeIdx_Object = MibTableColumn
gcc0ConfigCpTypeIdx = _Gcc0ConfigCpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 1),
    _Gcc0ConfigCpTypeIdx_Type()
)
gcc0ConfigCpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gcc0ConfigCpTypeIdx.setStatus("current")


class _Gcc0ConfigShelfIdx_Type(Integer32):
    """Custom type gcc0ConfigShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_Gcc0ConfigShelfIdx_Type.__name__ = "Integer32"
_Gcc0ConfigShelfIdx_Object = MibTableColumn
gcc0ConfigShelfIdx = _Gcc0ConfigShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 2),
    _Gcc0ConfigShelfIdx_Type()
)
gcc0ConfigShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gcc0ConfigShelfIdx.setStatus("current")


class _Gcc0ConfigSlotIdx_Type(Integer32):
    """Custom type gcc0ConfigSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_Gcc0ConfigSlotIdx_Type.__name__ = "Integer32"
_Gcc0ConfigSlotIdx_Object = MibTableColumn
gcc0ConfigSlotIdx = _Gcc0ConfigSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 3),
    _Gcc0ConfigSlotIdx_Type()
)
gcc0ConfigSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gcc0ConfigSlotIdx.setStatus("current")


class _Gcc0ConfigPortIdx_Type(Integer32):
    """Custom type gcc0ConfigPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_Gcc0ConfigPortIdx_Type.__name__ = "Integer32"
_Gcc0ConfigPortIdx_Object = MibTableColumn
gcc0ConfigPortIdx = _Gcc0ConfigPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 4),
    _Gcc0ConfigPortIdx_Type()
)
gcc0ConfigPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gcc0ConfigPortIdx.setStatus("current")


class _Gcc0ConfigMode_Type(Integer32):
    """Custom type gcc0ConfigMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fullRate", 1),
          ("lowRate", 2))
    )


_Gcc0ConfigMode_Type.__name__ = "Integer32"
_Gcc0ConfigMode_Object = MibTableColumn
gcc0ConfigMode = _Gcc0ConfigMode_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 5),
    _Gcc0ConfigMode_Type()
)
gcc0ConfigMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    gcc0ConfigMode.setStatus("current")


class _Gcc0ConfigAdminStatus_Type(AdminStatus):
    """Custom type gcc0ConfigAdminStatus based on AdminStatus"""


_Gcc0ConfigAdminStatus_Object = MibTableColumn
gcc0ConfigAdminStatus = _Gcc0ConfigAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 6),
    _Gcc0ConfigAdminStatus_Type()
)
gcc0ConfigAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    gcc0ConfigAdminStatus.setStatus("current")
_Gcc0ConfigOperStatus_Type = OperStatus
_Gcc0ConfigOperStatus_Object = MibTableColumn
gcc0ConfigOperStatus = _Gcc0ConfigOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 7),
    _Gcc0ConfigOperStatus_Type()
)
gcc0ConfigOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gcc0ConfigOperStatus.setStatus("current")
_Gcc0ConfigOperStatQlfr_Type = OperStatQlfr
_Gcc0ConfigOperStatQlfr_Object = MibTableColumn
gcc0ConfigOperStatQlfr = _Gcc0ConfigOperStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 8),
    _Gcc0ConfigOperStatQlfr_Type()
)
gcc0ConfigOperStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gcc0ConfigOperStatQlfr.setStatus("current")
_Gcc0ConfigRowStatus_Type = RowStatus
_Gcc0ConfigRowStatus_Object = MibTableColumn
gcc0ConfigRowStatus = _Gcc0ConfigRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 9),
    _Gcc0ConfigRowStatus_Type()
)
gcc0ConfigRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    gcc0ConfigRowStatus.setStatus("current")
_IpExtInterfaceTable_Object = MibTable
ipExtInterfaceTable = _IpExtInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5)
)
if mibBuilder.loadTexts:
    ipExtInterfaceTable.setStatus("current")
_IpExtInterfaceTableEntry_Object = MibTableRow
ipExtInterfaceTableEntry = _IpExtInterfaceTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1)
)
ipExtInterfaceTableEntry.setIndexNames(
    (0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfSubPortNumber"),
)
if mibBuilder.loadTexts:
    ipExtInterfaceTableEntry.setStatus("current")
_PvxL2IntfSubPortNumber_Type = Integer32
_PvxL2IntfSubPortNumber_Object = MibTableColumn
pvxL2IntfSubPortNumber = _PvxL2IntfSubPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 1),
    _PvxL2IntfSubPortNumber_Type()
)
pvxL2IntfSubPortNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IntfSubPortNumber.setStatus("current")
_IpExtIntfPrimaryState_Type = OperStatus
_IpExtIntfPrimaryState_Object = MibTableColumn
ipExtIntfPrimaryState = _IpExtIntfPrimaryState_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 2),
    _IpExtIntfPrimaryState_Type()
)
ipExtIntfPrimaryState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfPrimaryState.setStatus("current")
_IpExtIntfSecondaryState_Type = OperStatQlfr
_IpExtIntfSecondaryState_Object = MibTableColumn
ipExtIntfSecondaryState = _IpExtIntfSecondaryState_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 3),
    _IpExtIntfSecondaryState_Type()
)
ipExtIntfSecondaryState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfSecondaryState.setStatus("current")
_IpExtIntfCmdPrimaryState_Type = OperStatus
_IpExtIntfCmdPrimaryState_Object = MibTableColumn
ipExtIntfCmdPrimaryState = _IpExtIntfCmdPrimaryState_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 4),
    _IpExtIntfCmdPrimaryState_Type()
)
ipExtIntfCmdPrimaryState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfCmdPrimaryState.setStatus("current")
_IpExtIntfNumberedStatus_Type = TruthValue
_IpExtIntfNumberedStatus_Object = MibTableColumn
ipExtIntfNumberedStatus = _IpExtIntfNumberedStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 5),
    _IpExtIntfNumberedStatus_Type()
)
ipExtIntfNumberedStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipExtIntfNumberedStatus.setStatus("current")
_IpExtIntfAddressType_Type = InetAddressType
_IpExtIntfAddressType_Object = MibTableColumn
ipExtIntfAddressType = _IpExtIntfAddressType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 6),
    _IpExtIntfAddressType_Type()
)
ipExtIntfAddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfAddressType.setStatus("current")
_IpExtIntfAddress_Type = InetAddress
_IpExtIntfAddress_Object = MibTableColumn
ipExtIntfAddress = _IpExtIntfAddress_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 7),
    _IpExtIntfAddress_Type()
)
ipExtIntfAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfAddress.setStatus("current")
_IpExtIntfSubnetMask_Type = InetAddress
_IpExtIntfSubnetMask_Object = MibTableColumn
ipExtIntfSubnetMask = _IpExtIntfSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 8),
    _IpExtIntfSubnetMask_Type()
)
ipExtIntfSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfSubnetMask.setStatus("current")
_IpExtIntfProxyARPStatus_Type = TruthValue
_IpExtIntfProxyARPStatus_Object = MibTableColumn
ipExtIntfProxyARPStatus = _IpExtIntfProxyARPStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 9),
    _IpExtIntfProxyARPStatus_Type()
)
ipExtIntfProxyARPStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfProxyARPStatus.setStatus("current")


class _IpExtIntfDescription_Type(DisplayString):
    """Custom type ipExtIntfDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_IpExtIntfDescription_Type.__name__ = "DisplayString"
_IpExtIntfDescription_Object = MibTableColumn
ipExtIntfDescription = _IpExtIntfDescription_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 10),
    _IpExtIntfDescription_Type()
)
ipExtIntfDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfDescription.setStatus("current")
_IpExtIntfMACAddr_Type = MacAddress
_IpExtIntfMACAddr_Object = MibTableColumn
ipExtIntfMACAddr = _IpExtIntfMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 11),
    _IpExtIntfMACAddr_Type()
)
ipExtIntfMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfMACAddr.setStatus("current")
_IpExtIntfOperStatus_Type = OperStatus
_IpExtIntfOperStatus_Object = MibTableColumn
ipExtIntfOperStatus = _IpExtIntfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 12),
    _IpExtIntfOperStatus_Type()
)
ipExtIntfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfOperStatus.setStatus("current")


class _IpExtIntfType_Type(Integer32):
    """Custom type ipExtIntfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("electrical", 2),
          ("logical", 3),
          ("optical", 1))
    )


_IpExtIntfType_Type.__name__ = "Integer32"
_IpExtIntfType_Object = MibTableColumn
ipExtIntfType = _IpExtIntfType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 13),
    _IpExtIntfType_Type()
)
ipExtIntfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfType.setStatus("current")
_IpExtIntfBroadcastAddress_Type = InetAddress
_IpExtIntfBroadcastAddress_Object = MibTableColumn
ipExtIntfBroadcastAddress = _IpExtIntfBroadcastAddress_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 14),
    _IpExtIntfBroadcastAddress_Type()
)
ipExtIntfBroadcastAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfBroadcastAddress.setStatus("current")
_IpExtIntfSpeed_Type = Gauge32
_IpExtIntfSpeed_Object = MibTableColumn
ipExtIntfSpeed = _IpExtIntfSpeed_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 15),
    _IpExtIntfSpeed_Type()
)
ipExtIntfSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfSpeed.setStatus("current")
_IpExtIntfMode_Type = DuplexModeType
_IpExtIntfMode_Object = MibTableColumn
ipExtIntfMode = _IpExtIntfMode_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 16),
    _IpExtIntfMode_Type()
)
ipExtIntfMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfMode.setStatus("current")
_IpExtIntfMTUSize_Type = Integer32
_IpExtIntfMTUSize_Object = MibTableColumn
ipExtIntfMTUSize = _IpExtIntfMTUSize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 17),
    _IpExtIntfMTUSize_Type()
)
ipExtIntfMTUSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfMTUSize.setStatus("current")
_IpExtIntfLastChange_Type = Integer32
_IpExtIntfLastChange_Object = MibTableColumn
ipExtIntfLastChange = _IpExtIntfLastChange_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 18),
    _IpExtIntfLastChange_Type()
)
ipExtIntfLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfLastChange.setStatus("current")
_IpExtIntfGateway_Type = InetAddress
_IpExtIntfGateway_Object = MibTableColumn
ipExtIntfGateway = _IpExtIntfGateway_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 19),
    _IpExtIntfGateway_Type()
)
ipExtIntfGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfGateway.setStatus("current")
_IpExtIntfRowStatus_Type = RowStatus
_IpExtIntfRowStatus_Object = MibTableColumn
ipExtIntfRowStatus = _IpExtIntfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 100),
    _IpExtIntfRowStatus_Type()
)
ipExtIntfRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExtIntfRowStatus.setStatus("current")
_Performance_ObjectIdentity = ObjectIdentity
performance = _Performance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6)
)
_OaCrntPMTable_Object = MibTable
oaCrntPMTable = _OaCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1)
)
if mibBuilder.loadTexts:
    oaCrntPMTable.setStatus("current")
_OaCrntPMEntry_Object = MibTableRow
oaCrntPMEntry = _OaCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1)
)
oaCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "oaCrntPMOaTypeIdx"),
    (0, "BTI-7000-MIB", "oaCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "oaCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "oaCrntPMOaIdx"),
    (0, "BTI-7000-MIB", "oaCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    oaCrntPMEntry.setStatus("current")
_OaCrntPMOaTypeIdx_Type = OaType
_OaCrntPMOaTypeIdx_Object = MibTableColumn
oaCrntPMOaTypeIdx = _OaCrntPMOaTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 1),
    _OaCrntPMOaTypeIdx_Type()
)
oaCrntPMOaTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaCrntPMOaTypeIdx.setStatus("current")


class _OaCrntPMShelfIdx_Type(Integer32):
    """Custom type oaCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OaCrntPMShelfIdx_Type.__name__ = "Integer32"
_OaCrntPMShelfIdx_Object = MibTableColumn
oaCrntPMShelfIdx = _OaCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 2),
    _OaCrntPMShelfIdx_Type()
)
oaCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaCrntPMShelfIdx.setStatus("current")


class _OaCrntPMSlotIdx_Type(Integer32):
    """Custom type oaCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OaCrntPMSlotIdx_Type.__name__ = "Integer32"
_OaCrntPMSlotIdx_Object = MibTableColumn
oaCrntPMSlotIdx = _OaCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 3),
    _OaCrntPMSlotIdx_Type()
)
oaCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaCrntPMSlotIdx.setStatus("current")


class _OaCrntPMOaIdx_Type(Integer32):
    """Custom type oaCrntPMOaIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_OaCrntPMOaIdx_Type.__name__ = "Integer32"
_OaCrntPMOaIdx_Object = MibTableColumn
oaCrntPMOaIdx = _OaCrntPMOaIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 4),
    _OaCrntPMOaIdx_Type()
)
oaCrntPMOaIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaCrntPMOaIdx.setStatus("current")
_OaCrntPMIntervalTypeIdx_Type = PMIntervalType
_OaCrntPMIntervalTypeIdx_Object = MibTableColumn
oaCrntPMIntervalTypeIdx = _OaCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 5),
    _OaCrntPMIntervalTypeIdx_Type()
)
oaCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaCrntPMIntervalTypeIdx.setStatus("current")


class _OaCrntPMCaseTempValue_Type(Integer32):
    """Custom type oaCrntPMCaseTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaCrntPMCaseTempValue_Type.__name__ = "Integer32"
_OaCrntPMCaseTempValue_Object = MibTableColumn
oaCrntPMCaseTempValue = _OaCrntPMCaseTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 6),
    _OaCrntPMCaseTempValue_Type()
)
oaCrntPMCaseTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMCaseTempValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMCaseTempValue.setUnits("degrees Celsius")
_OaCrntPMCaseTempTimeStamp_Type = DateAndTime
_OaCrntPMCaseTempTimeStamp_Object = MibTableColumn
oaCrntPMCaseTempTimeStamp = _OaCrntPMCaseTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 7),
    _OaCrntPMCaseTempTimeStamp_Type()
)
oaCrntPMCaseTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMCaseTempTimeStamp.setStatus("current")
_OaCrntPMCaseTempValidity_Type = PMValidity
_OaCrntPMCaseTempValidity_Object = MibTableColumn
oaCrntPMCaseTempValidity = _OaCrntPMCaseTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 8),
    _OaCrntPMCaseTempValidity_Type()
)
oaCrntPMCaseTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMCaseTempValidity.setStatus("current")


class _OaCrntPMLaser1TempValue_Type(Integer32):
    """Custom type oaCrntPMLaser1TempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaCrntPMLaser1TempValue_Type.__name__ = "Integer32"
_OaCrntPMLaser1TempValue_Object = MibTableColumn
oaCrntPMLaser1TempValue = _OaCrntPMLaser1TempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 9),
    _OaCrntPMLaser1TempValue_Type()
)
oaCrntPMLaser1TempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1TempValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMLaser1TempValue.setUnits("degrees Celsius")
_OaCrntPMLaser1TempTimeStamp_Type = DateAndTime
_OaCrntPMLaser1TempTimeStamp_Object = MibTableColumn
oaCrntPMLaser1TempTimeStamp = _OaCrntPMLaser1TempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 10),
    _OaCrntPMLaser1TempTimeStamp_Type()
)
oaCrntPMLaser1TempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1TempTimeStamp.setStatus("current")
_OaCrntPMLaser1TempValidity_Type = PMValidity
_OaCrntPMLaser1TempValidity_Object = MibTableColumn
oaCrntPMLaser1TempValidity = _OaCrntPMLaser1TempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 11),
    _OaCrntPMLaser1TempValidity_Type()
)
oaCrntPMLaser1TempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1TempValidity.setStatus("current")


class _OaCrntPMLaser2TempValue_Type(Integer32):
    """Custom type oaCrntPMLaser2TempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaCrntPMLaser2TempValue_Type.__name__ = "Integer32"
_OaCrntPMLaser2TempValue_Object = MibTableColumn
oaCrntPMLaser2TempValue = _OaCrntPMLaser2TempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 12),
    _OaCrntPMLaser2TempValue_Type()
)
oaCrntPMLaser2TempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2TempValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMLaser2TempValue.setUnits("degrees Celsius")
_OaCrntPMLaser2TempTimeStamp_Type = DateAndTime
_OaCrntPMLaser2TempTimeStamp_Object = MibTableColumn
oaCrntPMLaser2TempTimeStamp = _OaCrntPMLaser2TempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 13),
    _OaCrntPMLaser2TempTimeStamp_Type()
)
oaCrntPMLaser2TempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2TempTimeStamp.setStatus("current")
_OaCrntPMLaser2TempValidity_Type = PMValidity
_OaCrntPMLaser2TempValidity_Object = MibTableColumn
oaCrntPMLaser2TempValidity = _OaCrntPMLaser2TempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 14),
    _OaCrntPMLaser2TempValidity_Type()
)
oaCrntPMLaser2TempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2TempValidity.setStatus("current")
_OaCrntPMOPRValue_Type = FixedX10
_OaCrntPMOPRValue_Object = MibTableColumn
oaCrntPMOPRValue = _OaCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 15),
    _OaCrntPMOPRValue_Type()
)
oaCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMOPRValue.setUnits("dBm/10")
_OaCrntPMOPRTimeStamp_Type = DateAndTime
_OaCrntPMOPRTimeStamp_Object = MibTableColumn
oaCrntPMOPRTimeStamp = _OaCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 16),
    _OaCrntPMOPRTimeStamp_Type()
)
oaCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOPRTimeStamp.setStatus("current")
_OaCrntPMOPRValidity_Type = PMValidity
_OaCrntPMOPRValidity_Object = MibTableColumn
oaCrntPMOPRValidity = _OaCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 17),
    _OaCrntPMOPRValidity_Type()
)
oaCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOPRValidity.setStatus("current")
_OaCrntPMSSIOPRValue_Type = FixedX10
_OaCrntPMSSIOPRValue_Object = MibTableColumn
oaCrntPMSSIOPRValue = _OaCrntPMSSIOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 18),
    _OaCrntPMSSIOPRValue_Type()
)
oaCrntPMSSIOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMSSIOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMSSIOPRValue.setUnits("dBm/10")
_OaCrntPMSSIOPRTimeStamp_Type = DateAndTime
_OaCrntPMSSIOPRTimeStamp_Object = MibTableColumn
oaCrntPMSSIOPRTimeStamp = _OaCrntPMSSIOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 19),
    _OaCrntPMSSIOPRTimeStamp_Type()
)
oaCrntPMSSIOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMSSIOPRTimeStamp.setStatus("current")
_OaCrntPMSSIOPRValidity_Type = PMValidity
_OaCrntPMSSIOPRValidity_Object = MibTableColumn
oaCrntPMSSIOPRValidity = _OaCrntPMSSIOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 20),
    _OaCrntPMSSIOPRValidity_Type()
)
oaCrntPMSSIOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMSSIOPRValidity.setStatus("current")
_OaCrntPMOPTValue_Type = FixedX10
_OaCrntPMOPTValue_Object = MibTableColumn
oaCrntPMOPTValue = _OaCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 21),
    _OaCrntPMOPTValue_Type()
)
oaCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMOPTValue.setUnits("dBm/10")
_OaCrntPMOPTTimeStamp_Type = DateAndTime
_OaCrntPMOPTTimeStamp_Object = MibTableColumn
oaCrntPMOPTTimeStamp = _OaCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 22),
    _OaCrntPMOPTTimeStamp_Type()
)
oaCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOPTTimeStamp.setStatus("current")
_OaCrntPMOPTValidity_Type = PMValidity
_OaCrntPMOPTValidity_Object = MibTableColumn
oaCrntPMOPTValidity = _OaCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 23),
    _OaCrntPMOPTValidity_Type()
)
oaCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOPTValidity.setStatus("current")
_OaCrntPMMSInsLossValue_Type = FixedX10
_OaCrntPMMSInsLossValue_Object = MibTableColumn
oaCrntPMMSInsLossValue = _OaCrntPMMSInsLossValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 24),
    _OaCrntPMMSInsLossValue_Type()
)
oaCrntPMMSInsLossValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMMSInsLossValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMMSInsLossValue.setUnits("dB/10")
_OaCrntPMMSInsLossTimeStamp_Type = DateAndTime
_OaCrntPMMSInsLossTimeStamp_Object = MibTableColumn
oaCrntPMMSInsLossTimeStamp = _OaCrntPMMSInsLossTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 25),
    _OaCrntPMMSInsLossTimeStamp_Type()
)
oaCrntPMMSInsLossTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMMSInsLossTimeStamp.setStatus("current")
_OaCrntPMMSInsLossValidity_Type = PMValidity
_OaCrntPMMSInsLossValidity_Object = MibTableColumn
oaCrntPMMSInsLossValidity = _OaCrntPMMSInsLossValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 26),
    _OaCrntPMMSInsLossValidity_Type()
)
oaCrntPMMSInsLossValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMMSInsLossValidity.setStatus("current")
_OaCrntPMEffectiveGainValue_Type = FixedX10
_OaCrntPMEffectiveGainValue_Object = MibTableColumn
oaCrntPMEffectiveGainValue = _OaCrntPMEffectiveGainValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 27),
    _OaCrntPMEffectiveGainValue_Type()
)
oaCrntPMEffectiveGainValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMEffectiveGainValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMEffectiveGainValue.setUnits("dB/10")
_OaCrntPMEffectiveGainTimeStamp_Type = DateAndTime
_OaCrntPMEffectiveGainTimeStamp_Object = MibTableColumn
oaCrntPMEffectiveGainTimeStamp = _OaCrntPMEffectiveGainTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 28),
    _OaCrntPMEffectiveGainTimeStamp_Type()
)
oaCrntPMEffectiveGainTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMEffectiveGainTimeStamp.setStatus("current")
_OaCrntPMEffectiveGainValidity_Type = PMValidity
_OaCrntPMEffectiveGainValidity_Object = MibTableColumn
oaCrntPMEffectiveGainValidity = _OaCrntPMEffectiveGainValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 29),
    _OaCrntPMEffectiveGainValidity_Type()
)
oaCrntPMEffectiveGainValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMEffectiveGainValidity.setStatus("current")
_OaCrntPMFSOOPTValue_Type = FixedX10
_OaCrntPMFSOOPTValue_Object = MibTableColumn
oaCrntPMFSOOPTValue = _OaCrntPMFSOOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 30),
    _OaCrntPMFSOOPTValue_Type()
)
oaCrntPMFSOOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMFSOOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMFSOOPTValue.setUnits("dBm/10")
_OaCrntPMFSOOPTTimeStamp_Type = DateAndTime
_OaCrntPMFSOOPTTimeStamp_Object = MibTableColumn
oaCrntPMFSOOPTTimeStamp = _OaCrntPMFSOOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 31),
    _OaCrntPMFSOOPTTimeStamp_Type()
)
oaCrntPMFSOOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMFSOOPTTimeStamp.setStatus("current")
_OaCrntPMFSOOPTValidity_Type = PMValidity
_OaCrntPMFSOOPTValidity_Object = MibTableColumn
oaCrntPMFSOOPTValidity = _OaCrntPMFSOOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 32),
    _OaCrntPMFSOOPTValidity_Type()
)
oaCrntPMFSOOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMFSOOPTValidity.setStatus("current")
_OaCrntPMLaser1CurrentValue_Type = FixedX10
_OaCrntPMLaser1CurrentValue_Object = MibTableColumn
oaCrntPMLaser1CurrentValue = _OaCrntPMLaser1CurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 33),
    _OaCrntPMLaser1CurrentValue_Type()
)
oaCrntPMLaser1CurrentValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1CurrentValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMLaser1CurrentValue.setUnits("mAmp/10")
_OaCrntPMLaser1CurrentTimeStamp_Type = DateAndTime
_OaCrntPMLaser1CurrentTimeStamp_Object = MibTableColumn
oaCrntPMLaser1CurrentTimeStamp = _OaCrntPMLaser1CurrentTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 34),
    _OaCrntPMLaser1CurrentTimeStamp_Type()
)
oaCrntPMLaser1CurrentTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1CurrentTimeStamp.setStatus("current")
_OaCrntPMLaser1CurrentValidity_Type = PMValidity
_OaCrntPMLaser1CurrentValidity_Object = MibTableColumn
oaCrntPMLaser1CurrentValidity = _OaCrntPMLaser1CurrentValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 35),
    _OaCrntPMLaser1CurrentValidity_Type()
)
oaCrntPMLaser1CurrentValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1CurrentValidity.setStatus("current")
_OaCrntPMLaser2CurrentValue_Type = FixedX10
_OaCrntPMLaser2CurrentValue_Object = MibTableColumn
oaCrntPMLaser2CurrentValue = _OaCrntPMLaser2CurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 36),
    _OaCrntPMLaser2CurrentValue_Type()
)
oaCrntPMLaser2CurrentValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2CurrentValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMLaser2CurrentValue.setUnits("mAmp/10")
_OaCrntPMLaser2CurrentTimeStamp_Type = DateAndTime
_OaCrntPMLaser2CurrentTimeStamp_Object = MibTableColumn
oaCrntPMLaser2CurrentTimeStamp = _OaCrntPMLaser2CurrentTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 37),
    _OaCrntPMLaser2CurrentTimeStamp_Type()
)
oaCrntPMLaser2CurrentTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2CurrentTimeStamp.setStatus("current")
_OaCrntPMLaser2CurrentValidity_Type = PMValidity
_OaCrntPMLaser2CurrentValidity_Object = MibTableColumn
oaCrntPMLaser2CurrentValidity = _OaCrntPMLaser2CurrentValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 38),
    _OaCrntPMLaser2CurrentValidity_Type()
)
oaCrntPMLaser2CurrentValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2CurrentValidity.setStatus("current")
_OaCrntPMLaser1PowerValue_Type = FixedX10
_OaCrntPMLaser1PowerValue_Object = MibTableColumn
oaCrntPMLaser1PowerValue = _OaCrntPMLaser1PowerValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 39),
    _OaCrntPMLaser1PowerValue_Type()
)
oaCrntPMLaser1PowerValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1PowerValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMLaser1PowerValue.setUnits("mWatts/10")
_OaCrntPMLaser1PowerTimeStamp_Type = DateAndTime
_OaCrntPMLaser1PowerTimeStamp_Object = MibTableColumn
oaCrntPMLaser1PowerTimeStamp = _OaCrntPMLaser1PowerTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 40),
    _OaCrntPMLaser1PowerTimeStamp_Type()
)
oaCrntPMLaser1PowerTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1PowerTimeStamp.setStatus("current")
_OaCrntPMLaser1PowerValidity_Type = PMValidity
_OaCrntPMLaser1PowerValidity_Object = MibTableColumn
oaCrntPMLaser1PowerValidity = _OaCrntPMLaser1PowerValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 41),
    _OaCrntPMLaser1PowerValidity_Type()
)
oaCrntPMLaser1PowerValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser1PowerValidity.setStatus("current")
_OaCrntPMLaser2PowerValue_Type = FixedX10
_OaCrntPMLaser2PowerValue_Object = MibTableColumn
oaCrntPMLaser2PowerValue = _OaCrntPMLaser2PowerValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 42),
    _OaCrntPMLaser2PowerValue_Type()
)
oaCrntPMLaser2PowerValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2PowerValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMLaser2PowerValue.setUnits("mWatts/10")
_OaCrntPMLaser2PowerTimeStamp_Type = DateAndTime
_OaCrntPMLaser2PowerTimeStamp_Object = MibTableColumn
oaCrntPMLaser2PowerTimeStamp = _OaCrntPMLaser2PowerTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 43),
    _OaCrntPMLaser2PowerTimeStamp_Type()
)
oaCrntPMLaser2PowerTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2PowerTimeStamp.setStatus("current")
_OaCrntPMLaser2PowerValidity_Type = PMValidity
_OaCrntPMLaser2PowerValidity_Object = MibTableColumn
oaCrntPMLaser2PowerValidity = _OaCrntPMLaser2PowerValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 44),
    _OaCrntPMLaser2PowerValidity_Type()
)
oaCrntPMLaser2PowerValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMLaser2PowerValidity.setStatus("current")
_OaCrntPMOBRValue_Type = FixedX10
_OaCrntPMOBRValue_Object = MibTableColumn
oaCrntPMOBRValue = _OaCrntPMOBRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 45),
    _OaCrntPMOBRValue_Type()
)
oaCrntPMOBRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOBRValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMOBRValue.setUnits("dB/10")
_OaCrntPMOBRTimeStamp_Type = DateAndTime
_OaCrntPMOBRTimeStamp_Object = MibTableColumn
oaCrntPMOBRTimeStamp = _OaCrntPMOBRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 46),
    _OaCrntPMOBRTimeStamp_Type()
)
oaCrntPMOBRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOBRTimeStamp.setStatus("current")
_OaCrntPMOBRValidity_Type = PMValidity
_OaCrntPMOBRValidity_Object = MibTableColumn
oaCrntPMOBRValidity = _OaCrntPMOBRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 47),
    _OaCrntPMOBRValidity_Type()
)
oaCrntPMOBRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMOBRValidity.setStatus("current")
_OaCrntPMVOAValue_Type = FixedX10
_OaCrntPMVOAValue_Object = MibTableColumn
oaCrntPMVOAValue = _OaCrntPMVOAValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 48),
    _OaCrntPMVOAValue_Type()
)
oaCrntPMVOAValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMVOAValue.setStatus("current")
if mibBuilder.loadTexts:
    oaCrntPMVOAValue.setUnits("dB/10")
_OaCrntPMVOATimeStamp_Type = DateAndTime
_OaCrntPMVOATimeStamp_Object = MibTableColumn
oaCrntPMVOATimeStamp = _OaCrntPMVOATimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 49),
    _OaCrntPMVOATimeStamp_Type()
)
oaCrntPMVOATimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMVOATimeStamp.setStatus("current")
_OaCrntPMVOAValidity_Type = PMValidity
_OaCrntPMVOAValidity_Object = MibTableColumn
oaCrntPMVOAValidity = _OaCrntPMVOAValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 50),
    _OaCrntPMVOAValidity_Type()
)
oaCrntPMVOAValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaCrntPMVOAValidity.setStatus("current")
_OaHistPMTable_Object = MibTable
oaHistPMTable = _OaHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2)
)
if mibBuilder.loadTexts:
    oaHistPMTable.setStatus("current")
_OaHistPMEntry_Object = MibTableRow
oaHistPMEntry = _OaHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1)
)
oaHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "oaHistPMOaTypeIdx"),
    (0, "BTI-7000-MIB", "oaHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "oaHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "oaHistPMOaIdx"),
    (0, "BTI-7000-MIB", "oaHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "oaHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    oaHistPMEntry.setStatus("current")
_OaHistPMOaTypeIdx_Type = OaType
_OaHistPMOaTypeIdx_Object = MibTableColumn
oaHistPMOaTypeIdx = _OaHistPMOaTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 1),
    _OaHistPMOaTypeIdx_Type()
)
oaHistPMOaTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaHistPMOaTypeIdx.setStatus("current")


class _OaHistPMShelfIdx_Type(Integer32):
    """Custom type oaHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OaHistPMShelfIdx_Type.__name__ = "Integer32"
_OaHistPMShelfIdx_Object = MibTableColumn
oaHistPMShelfIdx = _OaHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 2),
    _OaHistPMShelfIdx_Type()
)
oaHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaHistPMShelfIdx.setStatus("current")


class _OaHistPMSlotIdx_Type(Integer32):
    """Custom type oaHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OaHistPMSlotIdx_Type.__name__ = "Integer32"
_OaHistPMSlotIdx_Object = MibTableColumn
oaHistPMSlotIdx = _OaHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 3),
    _OaHistPMSlotIdx_Type()
)
oaHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaHistPMSlotIdx.setStatus("current")


class _OaHistPMOaIdx_Type(Integer32):
    """Custom type oaHistPMOaIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_OaHistPMOaIdx_Type.__name__ = "Integer32"
_OaHistPMOaIdx_Object = MibTableColumn
oaHistPMOaIdx = _OaHistPMOaIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 4),
    _OaHistPMOaIdx_Type()
)
oaHistPMOaIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaHistPMOaIdx.setStatus("current")
_OaHistPMIntervalTypeIdx_Type = PMIntervalType
_OaHistPMIntervalTypeIdx_Object = MibTableColumn
oaHistPMIntervalTypeIdx = _OaHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 5),
    _OaHistPMIntervalTypeIdx_Type()
)
oaHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaHistPMIntervalTypeIdx.setStatus("current")


class _OaHistPMIntervalIdx_Type(Integer32):
    """Custom type oaHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_OaHistPMIntervalIdx_Type.__name__ = "Integer32"
_OaHistPMIntervalIdx_Object = MibTableColumn
oaHistPMIntervalIdx = _OaHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 6),
    _OaHistPMIntervalIdx_Type()
)
oaHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaHistPMIntervalIdx.setStatus("current")


class _OaHistPMCaseTempValue_Type(Integer32):
    """Custom type oaHistPMCaseTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaHistPMCaseTempValue_Type.__name__ = "Integer32"
_OaHistPMCaseTempValue_Object = MibTableColumn
oaHistPMCaseTempValue = _OaHistPMCaseTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 7),
    _OaHistPMCaseTempValue_Type()
)
oaHistPMCaseTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMCaseTempValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMCaseTempValue.setUnits("degrees Celsius")
_OaHistPMCaseTempTimeStamp_Type = DateAndTime
_OaHistPMCaseTempTimeStamp_Object = MibTableColumn
oaHistPMCaseTempTimeStamp = _OaHistPMCaseTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 8),
    _OaHistPMCaseTempTimeStamp_Type()
)
oaHistPMCaseTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMCaseTempTimeStamp.setStatus("current")
_OaHistPMCaseTempValidity_Type = PMValidity
_OaHistPMCaseTempValidity_Object = MibTableColumn
oaHistPMCaseTempValidity = _OaHistPMCaseTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 9),
    _OaHistPMCaseTempValidity_Type()
)
oaHistPMCaseTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMCaseTempValidity.setStatus("current")


class _OaHistPMLaser1TempValue_Type(Integer32):
    """Custom type oaHistPMLaser1TempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaHistPMLaser1TempValue_Type.__name__ = "Integer32"
_OaHistPMLaser1TempValue_Object = MibTableColumn
oaHistPMLaser1TempValue = _OaHistPMLaser1TempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 10),
    _OaHistPMLaser1TempValue_Type()
)
oaHistPMLaser1TempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1TempValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMLaser1TempValue.setUnits("degrees Celsius")
_OaHistPMLaser1TempTimeStamp_Type = DateAndTime
_OaHistPMLaser1TempTimeStamp_Object = MibTableColumn
oaHistPMLaser1TempTimeStamp = _OaHistPMLaser1TempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 11),
    _OaHistPMLaser1TempTimeStamp_Type()
)
oaHistPMLaser1TempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1TempTimeStamp.setStatus("current")
_OaHistPMLaser1TempValidity_Type = PMValidity
_OaHistPMLaser1TempValidity_Object = MibTableColumn
oaHistPMLaser1TempValidity = _OaHistPMLaser1TempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 12),
    _OaHistPMLaser1TempValidity_Type()
)
oaHistPMLaser1TempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1TempValidity.setStatus("current")


class _OaHistPMLaser2TempValue_Type(Integer32):
    """Custom type oaHistPMLaser2TempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OaHistPMLaser2TempValue_Type.__name__ = "Integer32"
_OaHistPMLaser2TempValue_Object = MibTableColumn
oaHistPMLaser2TempValue = _OaHistPMLaser2TempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 13),
    _OaHistPMLaser2TempValue_Type()
)
oaHistPMLaser2TempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2TempValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMLaser2TempValue.setUnits("degrees Celsius")
_OaHistPMLaser2TempTimeStamp_Type = DateAndTime
_OaHistPMLaser2TempTimeStamp_Object = MibTableColumn
oaHistPMLaser2TempTimeStamp = _OaHistPMLaser2TempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 14),
    _OaHistPMLaser2TempTimeStamp_Type()
)
oaHistPMLaser2TempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2TempTimeStamp.setStatus("current")
_OaHistPMLaser2TempValidity_Type = PMValidity
_OaHistPMLaser2TempValidity_Object = MibTableColumn
oaHistPMLaser2TempValidity = _OaHistPMLaser2TempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 15),
    _OaHistPMLaser2TempValidity_Type()
)
oaHistPMLaser2TempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2TempValidity.setStatus("current")
_OaHistPMOPRValue_Type = FixedX10
_OaHistPMOPRValue_Object = MibTableColumn
oaHistPMOPRValue = _OaHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 16),
    _OaHistPMOPRValue_Type()
)
oaHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMOPRValue.setUnits("dBm/10")
_OaHistPMOPRTimeStamp_Type = DateAndTime
_OaHistPMOPRTimeStamp_Object = MibTableColumn
oaHistPMOPRTimeStamp = _OaHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 17),
    _OaHistPMOPRTimeStamp_Type()
)
oaHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOPRTimeStamp.setStatus("current")
_OaHistPMOPRValidity_Type = PMValidity
_OaHistPMOPRValidity_Object = MibTableColumn
oaHistPMOPRValidity = _OaHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 18),
    _OaHistPMOPRValidity_Type()
)
oaHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOPRValidity.setStatus("current")
_OaHistPMSSIOPRValue_Type = FixedX10
_OaHistPMSSIOPRValue_Object = MibTableColumn
oaHistPMSSIOPRValue = _OaHistPMSSIOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 19),
    _OaHistPMSSIOPRValue_Type()
)
oaHistPMSSIOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMSSIOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMSSIOPRValue.setUnits("dBm/10")
_OaHistPMSSIOPRTimeStamp_Type = DateAndTime
_OaHistPMSSIOPRTimeStamp_Object = MibTableColumn
oaHistPMSSIOPRTimeStamp = _OaHistPMSSIOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 20),
    _OaHistPMSSIOPRTimeStamp_Type()
)
oaHistPMSSIOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMSSIOPRTimeStamp.setStatus("current")
_OaHistPMSSIOPRValidity_Type = PMValidity
_OaHistPMSSIOPRValidity_Object = MibTableColumn
oaHistPMSSIOPRValidity = _OaHistPMSSIOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 21),
    _OaHistPMSSIOPRValidity_Type()
)
oaHistPMSSIOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMSSIOPRValidity.setStatus("current")
_OaHistPMOPTValue_Type = FixedX10
_OaHistPMOPTValue_Object = MibTableColumn
oaHistPMOPTValue = _OaHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 22),
    _OaHistPMOPTValue_Type()
)
oaHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMOPTValue.setUnits("dBm/10")
_OaHistPMOPTTimeStamp_Type = DateAndTime
_OaHistPMOPTTimeStamp_Object = MibTableColumn
oaHistPMOPTTimeStamp = _OaHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 23),
    _OaHistPMOPTTimeStamp_Type()
)
oaHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOPTTimeStamp.setStatus("current")
_OaHistPMOPTValidity_Type = PMValidity
_OaHistPMOPTValidity_Object = MibTableColumn
oaHistPMOPTValidity = _OaHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 24),
    _OaHistPMOPTValidity_Type()
)
oaHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOPTValidity.setStatus("current")
_OaHistPMMSInsLossValue_Type = FixedX10
_OaHistPMMSInsLossValue_Object = MibTableColumn
oaHistPMMSInsLossValue = _OaHistPMMSInsLossValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 25),
    _OaHistPMMSInsLossValue_Type()
)
oaHistPMMSInsLossValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMMSInsLossValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMMSInsLossValue.setUnits("dB/10")
_OaHistPMMSInsLossTimeStamp_Type = DateAndTime
_OaHistPMMSInsLossTimeStamp_Object = MibTableColumn
oaHistPMMSInsLossTimeStamp = _OaHistPMMSInsLossTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 26),
    _OaHistPMMSInsLossTimeStamp_Type()
)
oaHistPMMSInsLossTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMMSInsLossTimeStamp.setStatus("current")
_OaHistPMMSInsLossValidity_Type = PMValidity
_OaHistPMMSInsLossValidity_Object = MibTableColumn
oaHistPMMSInsLossValidity = _OaHistPMMSInsLossValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 27),
    _OaHistPMMSInsLossValidity_Type()
)
oaHistPMMSInsLossValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMMSInsLossValidity.setStatus("current")
_OaHistPMEffectiveGainValue_Type = FixedX10
_OaHistPMEffectiveGainValue_Object = MibTableColumn
oaHistPMEffectiveGainValue = _OaHistPMEffectiveGainValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 28),
    _OaHistPMEffectiveGainValue_Type()
)
oaHistPMEffectiveGainValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMEffectiveGainValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMEffectiveGainValue.setUnits("dB/10")
_OaHistPMEffectiveGainTimeStamp_Type = DateAndTime
_OaHistPMEffectiveGainTimeStamp_Object = MibTableColumn
oaHistPMEffectiveGainTimeStamp = _OaHistPMEffectiveGainTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 29),
    _OaHistPMEffectiveGainTimeStamp_Type()
)
oaHistPMEffectiveGainTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMEffectiveGainTimeStamp.setStatus("current")
_OaHistPMEffectiveGainValidity_Type = PMValidity
_OaHistPMEffectiveGainValidity_Object = MibTableColumn
oaHistPMEffectiveGainValidity = _OaHistPMEffectiveGainValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 30),
    _OaHistPMEffectiveGainValidity_Type()
)
oaHistPMEffectiveGainValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMEffectiveGainValidity.setStatus("current")
_OaHistPMFSOOPTValue_Type = FixedX10
_OaHistPMFSOOPTValue_Object = MibTableColumn
oaHistPMFSOOPTValue = _OaHistPMFSOOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 31),
    _OaHistPMFSOOPTValue_Type()
)
oaHistPMFSOOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMFSOOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMFSOOPTValue.setUnits("dBm/10")
_OaHistPMFSOOPTTimeStamp_Type = DateAndTime
_OaHistPMFSOOPTTimeStamp_Object = MibTableColumn
oaHistPMFSOOPTTimeStamp = _OaHistPMFSOOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 32),
    _OaHistPMFSOOPTTimeStamp_Type()
)
oaHistPMFSOOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMFSOOPTTimeStamp.setStatus("current")
_OaHistPMFSOOPTValidity_Type = PMValidity
_OaHistPMFSOOPTValidity_Object = MibTableColumn
oaHistPMFSOOPTValidity = _OaHistPMFSOOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 33),
    _OaHistPMFSOOPTValidity_Type()
)
oaHistPMFSOOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMFSOOPTValidity.setStatus("current")
_OaHistPMLaser1CurrentValue_Type = FixedX10
_OaHistPMLaser1CurrentValue_Object = MibTableColumn
oaHistPMLaser1CurrentValue = _OaHistPMLaser1CurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 34),
    _OaHistPMLaser1CurrentValue_Type()
)
oaHistPMLaser1CurrentValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1CurrentValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMLaser1CurrentValue.setUnits("mAmp/10")
_OaHistPMLaser1CurrentTimeStamp_Type = DateAndTime
_OaHistPMLaser1CurrentTimeStamp_Object = MibTableColumn
oaHistPMLaser1CurrentTimeStamp = _OaHistPMLaser1CurrentTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 35),
    _OaHistPMLaser1CurrentTimeStamp_Type()
)
oaHistPMLaser1CurrentTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1CurrentTimeStamp.setStatus("current")
_OaHistPMLaser1CurrentValidity_Type = PMValidity
_OaHistPMLaser1CurrentValidity_Object = MibTableColumn
oaHistPMLaser1CurrentValidity = _OaHistPMLaser1CurrentValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 36),
    _OaHistPMLaser1CurrentValidity_Type()
)
oaHistPMLaser1CurrentValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1CurrentValidity.setStatus("current")
_OaHistPMLaser2CurrentValue_Type = FixedX10
_OaHistPMLaser2CurrentValue_Object = MibTableColumn
oaHistPMLaser2CurrentValue = _OaHistPMLaser2CurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 37),
    _OaHistPMLaser2CurrentValue_Type()
)
oaHistPMLaser2CurrentValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2CurrentValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMLaser2CurrentValue.setUnits("mAmp/10")
_OaHistPMLaser2CurrentTimeStamp_Type = DateAndTime
_OaHistPMLaser2CurrentTimeStamp_Object = MibTableColumn
oaHistPMLaser2CurrentTimeStamp = _OaHistPMLaser2CurrentTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 38),
    _OaHistPMLaser2CurrentTimeStamp_Type()
)
oaHistPMLaser2CurrentTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2CurrentTimeStamp.setStatus("current")
_OaHistPMLaser2CurrentValidity_Type = PMValidity
_OaHistPMLaser2CurrentValidity_Object = MibTableColumn
oaHistPMLaser2CurrentValidity = _OaHistPMLaser2CurrentValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 39),
    _OaHistPMLaser2CurrentValidity_Type()
)
oaHistPMLaser2CurrentValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2CurrentValidity.setStatus("current")
_OaHistPMLaser1PowerValue_Type = FixedX10
_OaHistPMLaser1PowerValue_Object = MibTableColumn
oaHistPMLaser1PowerValue = _OaHistPMLaser1PowerValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 40),
    _OaHistPMLaser1PowerValue_Type()
)
oaHistPMLaser1PowerValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1PowerValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMLaser1PowerValue.setUnits("mWatts/10")
_OaHistPMLaser1PowerTimeStamp_Type = DateAndTime
_OaHistPMLaser1PowerTimeStamp_Object = MibTableColumn
oaHistPMLaser1PowerTimeStamp = _OaHistPMLaser1PowerTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 41),
    _OaHistPMLaser1PowerTimeStamp_Type()
)
oaHistPMLaser1PowerTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1PowerTimeStamp.setStatus("current")
_OaHistPMLaser1PowerValidity_Type = PMValidity
_OaHistPMLaser1PowerValidity_Object = MibTableColumn
oaHistPMLaser1PowerValidity = _OaHistPMLaser1PowerValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 42),
    _OaHistPMLaser1PowerValidity_Type()
)
oaHistPMLaser1PowerValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser1PowerValidity.setStatus("current")
_OaHistPMLaser2PowerValue_Type = FixedX10
_OaHistPMLaser2PowerValue_Object = MibTableColumn
oaHistPMLaser2PowerValue = _OaHistPMLaser2PowerValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 43),
    _OaHistPMLaser2PowerValue_Type()
)
oaHistPMLaser2PowerValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2PowerValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMLaser2PowerValue.setUnits("mWatts/10")
_OaHistPMLaser2PowerTimeStamp_Type = DateAndTime
_OaHistPMLaser2PowerTimeStamp_Object = MibTableColumn
oaHistPMLaser2PowerTimeStamp = _OaHistPMLaser2PowerTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 44),
    _OaHistPMLaser2PowerTimeStamp_Type()
)
oaHistPMLaser2PowerTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2PowerTimeStamp.setStatus("current")
_OaHistPMLaser2PowerValidity_Type = PMValidity
_OaHistPMLaser2PowerValidity_Object = MibTableColumn
oaHistPMLaser2PowerValidity = _OaHistPMLaser2PowerValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 45),
    _OaHistPMLaser2PowerValidity_Type()
)
oaHistPMLaser2PowerValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMLaser2PowerValidity.setStatus("current")
_OaHistPMOBRValue_Type = FixedX10
_OaHistPMOBRValue_Object = MibTableColumn
oaHistPMOBRValue = _OaHistPMOBRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 46),
    _OaHistPMOBRValue_Type()
)
oaHistPMOBRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOBRValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMOBRValue.setUnits("dB/10")
_OaHistPMOBRTimeStamp_Type = DateAndTime
_OaHistPMOBRTimeStamp_Object = MibTableColumn
oaHistPMOBRTimeStamp = _OaHistPMOBRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 47),
    _OaHistPMOBRTimeStamp_Type()
)
oaHistPMOBRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOBRTimeStamp.setStatus("current")
_OaHistPMOBRValidity_Type = PMValidity
_OaHistPMOBRValidity_Object = MibTableColumn
oaHistPMOBRValidity = _OaHistPMOBRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 48),
    _OaHistPMOBRValidity_Type()
)
oaHistPMOBRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMOBRValidity.setStatus("current")
_OaHistPMVOAValue_Type = FixedX10
_OaHistPMVOAValue_Object = MibTableColumn
oaHistPMVOAValue = _OaHistPMVOAValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 49),
    _OaHistPMVOAValue_Type()
)
oaHistPMVOAValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMVOAValue.setStatus("current")
if mibBuilder.loadTexts:
    oaHistPMVOAValue.setUnits("dB/10")
_OaHistPMVOATimeStamp_Type = DateAndTime
_OaHistPMVOATimeStamp_Object = MibTableColumn
oaHistPMVOATimeStamp = _OaHistPMVOATimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 50),
    _OaHistPMVOATimeStamp_Type()
)
oaHistPMVOATimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMVOATimeStamp.setStatus("current")
_OaHistPMVOAValidity_Type = PMValidity
_OaHistPMVOAValidity_Object = MibTableColumn
oaHistPMVOAValidity = _OaHistPMVOAValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 51),
    _OaHistPMVOAValidity_Type()
)
oaHistPMVOAValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oaHistPMVOAValidity.setStatus("current")
_XcvrCrntPMTable_Object = MibTable
xcvrCrntPMTable = _XcvrCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3)
)
if mibBuilder.loadTexts:
    xcvrCrntPMTable.setStatus("current")
_XcvrCrntPMEntry_Object = MibTableRow
xcvrCrntPMEntry = _XcvrCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1)
)
xcvrCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "xcvrCrntPMTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrCrntPMIdx"),
    (0, "BTI-7000-MIB", "xcvrCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    xcvrCrntPMEntry.setStatus("current")
_XcvrCrntPMTypeIdx_Type = XcvrType
_XcvrCrntPMTypeIdx_Object = MibTableColumn
xcvrCrntPMTypeIdx = _XcvrCrntPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 1),
    _XcvrCrntPMTypeIdx_Type()
)
xcvrCrntPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrCrntPMTypeIdx.setStatus("current")


class _XcvrCrntPMShelfIdx_Type(Integer32):
    """Custom type xcvrCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrCrntPMShelfIdx_Type.__name__ = "Integer32"
_XcvrCrntPMShelfIdx_Object = MibTableColumn
xcvrCrntPMShelfIdx = _XcvrCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 2),
    _XcvrCrntPMShelfIdx_Type()
)
xcvrCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrCrntPMShelfIdx.setStatus("current")


class _XcvrCrntPMSlotIdx_Type(Integer32):
    """Custom type xcvrCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrCrntPMSlotIdx_Type.__name__ = "Integer32"
_XcvrCrntPMSlotIdx_Object = MibTableColumn
xcvrCrntPMSlotIdx = _XcvrCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 3),
    _XcvrCrntPMSlotIdx_Type()
)
xcvrCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrCrntPMSlotIdx.setStatus("current")


class _XcvrCrntPMIdx_Type(Integer32):
    """Custom type xcvrCrntPMIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrCrntPMIdx_Type.__name__ = "Integer32"
_XcvrCrntPMIdx_Object = MibTableColumn
xcvrCrntPMIdx = _XcvrCrntPMIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 4),
    _XcvrCrntPMIdx_Type()
)
xcvrCrntPMIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrCrntPMIdx.setStatus("current")
_XcvrCrntPMIntervalTypeIdx_Type = PMIntervalType
_XcvrCrntPMIntervalTypeIdx_Object = MibTableColumn
xcvrCrntPMIntervalTypeIdx = _XcvrCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 5),
    _XcvrCrntPMIntervalTypeIdx_Type()
)
xcvrCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrCrntPMIntervalTypeIdx.setStatus("current")
_XcvrCrntPMOPRValue_Type = FixedX10
_XcvrCrntPMOPRValue_Object = MibTableColumn
xcvrCrntPMOPRValue = _XcvrCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 6),
    _XcvrCrntPMOPRValue_Type()
)
xcvrCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRValue.setUnits("dBm/10")
_XcvrCrntPMOPRTimeStamp_Type = DateAndTime
_XcvrCrntPMOPRTimeStamp_Object = MibTableColumn
xcvrCrntPMOPRTimeStamp = _XcvrCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 7),
    _XcvrCrntPMOPRTimeStamp_Type()
)
xcvrCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRTimeStamp.setStatus("current")
_XcvrCrntPMOPRValidity_Type = PMValidity
_XcvrCrntPMOPRValidity_Object = MibTableColumn
xcvrCrntPMOPRValidity = _XcvrCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 8),
    _XcvrCrntPMOPRValidity_Type()
)
xcvrCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRValidity.setStatus("current")
_XcvrCrntPMOPTValue_Type = FixedX10
_XcvrCrntPMOPTValue_Object = MibTableColumn
xcvrCrntPMOPTValue = _XcvrCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 9),
    _XcvrCrntPMOPTValue_Type()
)
xcvrCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTValue.setUnits("dBm/10")
_XcvrCrntPMOPTTimeStamp_Type = DateAndTime
_XcvrCrntPMOPTTimeStamp_Object = MibTableColumn
xcvrCrntPMOPTTimeStamp = _XcvrCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 10),
    _XcvrCrntPMOPTTimeStamp_Type()
)
xcvrCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTTimeStamp.setStatus("current")
_XcvrCrntPMOPTValidity_Type = PMValidity
_XcvrCrntPMOPTValidity_Object = MibTableColumn
xcvrCrntPMOPTValidity = _XcvrCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 11),
    _XcvrCrntPMOPTValidity_Type()
)
xcvrCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTValidity.setStatus("current")


class _XcvrCrntPMTempValue_Type(Integer32):
    """Custom type xcvrCrntPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_XcvrCrntPMTempValue_Type.__name__ = "Integer32"
_XcvrCrntPMTempValue_Object = MibTableColumn
xcvrCrntPMTempValue = _XcvrCrntPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 12),
    _XcvrCrntPMTempValue_Type()
)
xcvrCrntPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMTempValue.setUnits("degrees Celsius")
_XcvrCrntPMTempTimeStamp_Type = DateAndTime
_XcvrCrntPMTempTimeStamp_Object = MibTableColumn
xcvrCrntPMTempTimeStamp = _XcvrCrntPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 13),
    _XcvrCrntPMTempTimeStamp_Type()
)
xcvrCrntPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTempTimeStamp.setStatus("current")
_XcvrCrntPMTempValidity_Type = PMValidity
_XcvrCrntPMTempValidity_Object = MibTableColumn
xcvrCrntPMTempValidity = _XcvrCrntPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 14),
    _XcvrCrntPMTempValidity_Type()
)
xcvrCrntPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTempValidity.setStatus("current")
_XcvrCrntPMSupplyVoltageValue_Type = FixedX10
_XcvrCrntPMSupplyVoltageValue_Object = MibTableColumn
xcvrCrntPMSupplyVoltageValue = _XcvrCrntPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 15),
    _XcvrCrntPMSupplyVoltageValue_Type()
)
xcvrCrntPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMSupplyVoltageValue.setUnits("mVolts/10")
_XcvrCrntPMSupplyVoltageTimeStamp_Type = DateAndTime
_XcvrCrntPMSupplyVoltageTimeStamp_Object = MibTableColumn
xcvrCrntPMSupplyVoltageTimeStamp = _XcvrCrntPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 16),
    _XcvrCrntPMSupplyVoltageTimeStamp_Type()
)
xcvrCrntPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSupplyVoltageTimeStamp.setStatus("current")
_XcvrCrntPMSupplyVoltageValidity_Type = PMValidity
_XcvrCrntPMSupplyVoltageValidity_Object = MibTableColumn
xcvrCrntPMSupplyVoltageValidity = _XcvrCrntPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 17),
    _XcvrCrntPMSupplyVoltageValidity_Type()
)
xcvrCrntPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSupplyVoltageValidity.setStatus("current")


class _XcvrCrntPMLBCValue_Type(Integer32):
    """Custom type xcvrCrntPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_XcvrCrntPMLBCValue_Type.__name__ = "Integer32"
_XcvrCrntPMLBCValue_Object = MibTableColumn
xcvrCrntPMLBCValue = _XcvrCrntPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 18),
    _XcvrCrntPMLBCValue_Type()
)
xcvrCrntPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMLBCValue.setUnits("mAmp")
_XcvrCrntPMLBCTimeStamp_Type = DateAndTime
_XcvrCrntPMLBCTimeStamp_Object = MibTableColumn
xcvrCrntPMLBCTimeStamp = _XcvrCrntPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 19),
    _XcvrCrntPMLBCTimeStamp_Type()
)
xcvrCrntPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMLBCTimeStamp.setStatus("current")
_XcvrCrntPMLBCValidity_Type = PMValidity
_XcvrCrntPMLBCValidity_Object = MibTableColumn
xcvrCrntPMLBCValidity = _XcvrCrntPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 20),
    _XcvrCrntPMLBCValidity_Type()
)
xcvrCrntPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMLBCValidity.setStatus("current")
_XcvrCrntPMCVSValue_Type = Unsigned32
_XcvrCrntPMCVSValue_Object = MibTableColumn
xcvrCrntPMCVSValue = _XcvrCrntPMCVSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 21),
    _XcvrCrntPMCVSValue_Type()
)
xcvrCrntPMCVSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMCVSValue.setStatus("current")
_XcvrCrntPMCVSTimeStamp_Type = DateAndTime
_XcvrCrntPMCVSTimeStamp_Object = MibTableColumn
xcvrCrntPMCVSTimeStamp = _XcvrCrntPMCVSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 22),
    _XcvrCrntPMCVSTimeStamp_Type()
)
xcvrCrntPMCVSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMCVSTimeStamp.setStatus("current")
_XcvrCrntPMCVSValidity_Type = PMValidity
_XcvrCrntPMCVSValidity_Object = MibTableColumn
xcvrCrntPMCVSValidity = _XcvrCrntPMCVSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 23),
    _XcvrCrntPMCVSValidity_Type()
)
xcvrCrntPMCVSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMCVSValidity.setStatus("current")
_XcvrCrntPMESSValue_Type = Unsigned32
_XcvrCrntPMESSValue_Object = MibTableColumn
xcvrCrntPMESSValue = _XcvrCrntPMESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 24),
    _XcvrCrntPMESSValue_Type()
)
xcvrCrntPMESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMESSValue.setStatus("current")
_XcvrCrntPMESSTimeStamp_Type = DateAndTime
_XcvrCrntPMESSTimeStamp_Object = MibTableColumn
xcvrCrntPMESSTimeStamp = _XcvrCrntPMESSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 25),
    _XcvrCrntPMESSTimeStamp_Type()
)
xcvrCrntPMESSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMESSTimeStamp.setStatus("current")
_XcvrCrntPMESSValidity_Type = PMValidity
_XcvrCrntPMESSValidity_Object = MibTableColumn
xcvrCrntPMESSValidity = _XcvrCrntPMESSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 26),
    _XcvrCrntPMESSValidity_Type()
)
xcvrCrntPMESSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMESSValidity.setStatus("current")
_XcvrCrntPMSESSValue_Type = Unsigned32
_XcvrCrntPMSESSValue_Object = MibTableColumn
xcvrCrntPMSESSValue = _XcvrCrntPMSESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 27),
    _XcvrCrntPMSESSValue_Type()
)
xcvrCrntPMSESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSESSValue.setStatus("current")
_XcvrCrntPMSESSTimeStamp_Type = DateAndTime
_XcvrCrntPMSESSTimeStamp_Object = MibTableColumn
xcvrCrntPMSESSTimeStamp = _XcvrCrntPMSESSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 28),
    _XcvrCrntPMSESSTimeStamp_Type()
)
xcvrCrntPMSESSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSESSTimeStamp.setStatus("current")
_XcvrCrntPMSESSValidity_Type = PMValidity
_XcvrCrntPMSESSValidity_Object = MibTableColumn
xcvrCrntPMSESSValidity = _XcvrCrntPMSESSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 29),
    _XcvrCrntPMSESSValidity_Type()
)
xcvrCrntPMSESSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSESSValidity.setStatus("current")
_XcvrCrntPMSEFSSValue_Type = Unsigned32
_XcvrCrntPMSEFSSValue_Object = MibTableColumn
xcvrCrntPMSEFSSValue = _XcvrCrntPMSEFSSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 30),
    _XcvrCrntPMSEFSSValue_Type()
)
xcvrCrntPMSEFSSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSEFSSValue.setStatus("current")
_XcvrCrntPMSEFSSTimeStamp_Type = DateAndTime
_XcvrCrntPMSEFSSTimeStamp_Object = MibTableColumn
xcvrCrntPMSEFSSTimeStamp = _XcvrCrntPMSEFSSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 31),
    _XcvrCrntPMSEFSSTimeStamp_Type()
)
xcvrCrntPMSEFSSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSEFSSTimeStamp.setStatus("current")
_XcvrCrntPMSEFSSValidity_Type = PMValidity
_XcvrCrntPMSEFSSValidity_Object = MibTableColumn
xcvrCrntPMSEFSSValidity = _XcvrCrntPMSEFSSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 32),
    _XcvrCrntPMSEFSSValidity_Type()
)
xcvrCrntPMSEFSSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSEFSSValidity.setStatus("current")
_XcvrCrntPMRSEBValue_Type = Unsigned32
_XcvrCrntPMRSEBValue_Object = MibTableColumn
xcvrCrntPMRSEBValue = _XcvrCrntPMRSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 33),
    _XcvrCrntPMRSEBValue_Type()
)
xcvrCrntPMRSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSEBValue.setStatus("current")
_XcvrCrntPMRSEBTimeStamp_Type = DateAndTime
_XcvrCrntPMRSEBTimeStamp_Object = MibTableColumn
xcvrCrntPMRSEBTimeStamp = _XcvrCrntPMRSEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 34),
    _XcvrCrntPMRSEBTimeStamp_Type()
)
xcvrCrntPMRSEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSEBTimeStamp.setStatus("current")
_XcvrCrntPMRSEBValidity_Type = PMValidity
_XcvrCrntPMRSEBValidity_Object = MibTableColumn
xcvrCrntPMRSEBValidity = _XcvrCrntPMRSEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 35),
    _XcvrCrntPMRSEBValidity_Type()
)
xcvrCrntPMRSEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSEBValidity.setStatus("current")
_XcvrCrntPMRSBBEValue_Type = Unsigned32
_XcvrCrntPMRSBBEValue_Object = MibTableColumn
xcvrCrntPMRSBBEValue = _XcvrCrntPMRSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 36),
    _XcvrCrntPMRSBBEValue_Type()
)
xcvrCrntPMRSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSBBEValue.setStatus("current")
_XcvrCrntPMRSBBETimeStamp_Type = DateAndTime
_XcvrCrntPMRSBBETimeStamp_Object = MibTableColumn
xcvrCrntPMRSBBETimeStamp = _XcvrCrntPMRSBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 37),
    _XcvrCrntPMRSBBETimeStamp_Type()
)
xcvrCrntPMRSBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSBBETimeStamp.setStatus("current")
_XcvrCrntPMRSBBEValidity_Type = PMValidity
_XcvrCrntPMRSBBEValidity_Object = MibTableColumn
xcvrCrntPMRSBBEValidity = _XcvrCrntPMRSBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 38),
    _XcvrCrntPMRSBBEValidity_Type()
)
xcvrCrntPMRSBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSBBEValidity.setStatus("current")
_XcvrCrntPMRSESValue_Type = Unsigned32
_XcvrCrntPMRSESValue_Object = MibTableColumn
xcvrCrntPMRSESValue = _XcvrCrntPMRSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 39),
    _XcvrCrntPMRSESValue_Type()
)
xcvrCrntPMRSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSESValue.setStatus("current")
_XcvrCrntPMRSESTimeStamp_Type = DateAndTime
_XcvrCrntPMRSESTimeStamp_Object = MibTableColumn
xcvrCrntPMRSESTimeStamp = _XcvrCrntPMRSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 40),
    _XcvrCrntPMRSESTimeStamp_Type()
)
xcvrCrntPMRSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSESTimeStamp.setStatus("current")
_XcvrCrntPMRSESValidity_Type = PMValidity
_XcvrCrntPMRSESValidity_Object = MibTableColumn
xcvrCrntPMRSESValidity = _XcvrCrntPMRSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 41),
    _XcvrCrntPMRSESValidity_Type()
)
xcvrCrntPMRSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSESValidity.setStatus("current")
_XcvrCrntPMRSSESValue_Type = Unsigned32
_XcvrCrntPMRSSESValue_Object = MibTableColumn
xcvrCrntPMRSSESValue = _XcvrCrntPMRSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 42),
    _XcvrCrntPMRSSESValue_Type()
)
xcvrCrntPMRSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSSESValue.setStatus("current")
_XcvrCrntPMRSSESTimeStamp_Type = DateAndTime
_XcvrCrntPMRSSESTimeStamp_Object = MibTableColumn
xcvrCrntPMRSSESTimeStamp = _XcvrCrntPMRSSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 43),
    _XcvrCrntPMRSSESTimeStamp_Type()
)
xcvrCrntPMRSSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSSESTimeStamp.setStatus("current")
_XcvrCrntPMRSSESValidity_Type = PMValidity
_XcvrCrntPMRSSESValidity_Object = MibTableColumn
xcvrCrntPMRSSESValidity = _XcvrCrntPMRSSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 44),
    _XcvrCrntPMRSSESValidity_Type()
)
xcvrCrntPMRSSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSSESValidity.setStatus("current")
_XcvrCrntPMRSOFSValue_Type = Unsigned32
_XcvrCrntPMRSOFSValue_Object = MibTableColumn
xcvrCrntPMRSOFSValue = _XcvrCrntPMRSOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 45),
    _XcvrCrntPMRSOFSValue_Type()
)
xcvrCrntPMRSOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSOFSValue.setStatus("current")
_XcvrCrntPMRSOFSTimeStamp_Type = DateAndTime
_XcvrCrntPMRSOFSTimeStamp_Object = MibTableColumn
xcvrCrntPMRSOFSTimeStamp = _XcvrCrntPMRSOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 46),
    _XcvrCrntPMRSOFSTimeStamp_Type()
)
xcvrCrntPMRSOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSOFSTimeStamp.setStatus("current")
_XcvrCrntPMRSOFSValidity_Type = PMValidity
_XcvrCrntPMRSOFSValidity_Object = MibTableColumn
xcvrCrntPMRSOFSValidity = _XcvrCrntPMRSOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 47),
    _XcvrCrntPMRSOFSValidity_Type()
)
xcvrCrntPMRSOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSOFSValidity.setStatus("current")
_XcvrCrntPMCVValue_Type = Unsigned32
_XcvrCrntPMCVValue_Object = MibTableColumn
xcvrCrntPMCVValue = _XcvrCrntPMCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 48),
    _XcvrCrntPMCVValue_Type()
)
xcvrCrntPMCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMCVValue.setStatus("current")
_XcvrCrntPMCVTimeStamp_Type = DateAndTime
_XcvrCrntPMCVTimeStamp_Object = MibTableColumn
xcvrCrntPMCVTimeStamp = _XcvrCrntPMCVTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 49),
    _XcvrCrntPMCVTimeStamp_Type()
)
xcvrCrntPMCVTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMCVTimeStamp.setStatus("current")
_XcvrCrntPMCVValidity_Type = PMValidity
_XcvrCrntPMCVValidity_Object = MibTableColumn
xcvrCrntPMCVValidity = _XcvrCrntPMCVValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 50),
    _XcvrCrntPMCVValidity_Type()
)
xcvrCrntPMCVValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMCVValidity.setStatus("current")
_XcvrCrntPMESValue_Type = Unsigned32
_XcvrCrntPMESValue_Object = MibTableColumn
xcvrCrntPMESValue = _XcvrCrntPMESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 51),
    _XcvrCrntPMESValue_Type()
)
xcvrCrntPMESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMESValue.setStatus("current")
_XcvrCrntPMESTimeStamp_Type = DateAndTime
_XcvrCrntPMESTimeStamp_Object = MibTableColumn
xcvrCrntPMESTimeStamp = _XcvrCrntPMESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 52),
    _XcvrCrntPMESTimeStamp_Type()
)
xcvrCrntPMESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMESTimeStamp.setStatus("current")
_XcvrCrntPMESValidity_Type = PMValidity
_XcvrCrntPMESValidity_Object = MibTableColumn
xcvrCrntPMESValidity = _XcvrCrntPMESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 53),
    _XcvrCrntPMESValidity_Type()
)
xcvrCrntPMESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMESValidity.setStatus("current")
_XcvrCrntPMSESValue_Type = Unsigned32
_XcvrCrntPMSESValue_Object = MibTableColumn
xcvrCrntPMSESValue = _XcvrCrntPMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 54),
    _XcvrCrntPMSESValue_Type()
)
xcvrCrntPMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSESValue.setStatus("current")
_XcvrCrntPMSESTimeStamp_Type = DateAndTime
_XcvrCrntPMSESTimeStamp_Object = MibTableColumn
xcvrCrntPMSESTimeStamp = _XcvrCrntPMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 55),
    _XcvrCrntPMSESTimeStamp_Type()
)
xcvrCrntPMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSESTimeStamp.setStatus("current")
_XcvrCrntPMSESValidity_Type = PMValidity
_XcvrCrntPMSESValidity_Object = MibTableColumn
xcvrCrntPMSESValidity = _XcvrCrntPMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 56),
    _XcvrCrntPMSESValidity_Type()
)
xcvrCrntPMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSESValidity.setStatus("current")
_XcvrCrntPMINVBLKValue_Type = Unsigned32
_XcvrCrntPMINVBLKValue_Object = MibTableColumn
xcvrCrntPMINVBLKValue = _XcvrCrntPMINVBLKValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 57),
    _XcvrCrntPMINVBLKValue_Type()
)
xcvrCrntPMINVBLKValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMINVBLKValue.setStatus("current")
_XcvrCrntPMINVBLKTimeStamp_Type = DateAndTime
_XcvrCrntPMINVBLKTimeStamp_Object = MibTableColumn
xcvrCrntPMINVBLKTimeStamp = _XcvrCrntPMINVBLKTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 58),
    _XcvrCrntPMINVBLKTimeStamp_Type()
)
xcvrCrntPMINVBLKTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMINVBLKTimeStamp.setStatus("current")
_XcvrCrntPMINVBLKValidity_Type = PMValidity
_XcvrCrntPMINVBLKValidity_Object = MibTableColumn
xcvrCrntPMINVBLKValidity = _XcvrCrntPMINVBLKValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 59),
    _XcvrCrntPMINVBLKValidity_Type()
)
xcvrCrntPMINVBLKValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMINVBLKValidity.setStatus("current")
_XcvrCrntPMNBITCRValue_Type = Unsigned32
_XcvrCrntPMNBITCRValue_Object = MibTableColumn
xcvrCrntPMNBITCRValue = _XcvrCrntPMNBITCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 60),
    _XcvrCrntPMNBITCRValue_Type()
)
xcvrCrntPMNBITCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMNBITCRValue.setStatus("current")
_XcvrCrntPMNBITCRTimeStamp_Type = DateAndTime
_XcvrCrntPMNBITCRTimeStamp_Object = MibTableColumn
xcvrCrntPMNBITCRTimeStamp = _XcvrCrntPMNBITCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 61),
    _XcvrCrntPMNBITCRTimeStamp_Type()
)
xcvrCrntPMNBITCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBITCRTimeStamp.setStatus("current")
_XcvrCrntPMNBITCRValidity_Type = PMValidity
_XcvrCrntPMNBITCRValidity_Object = MibTableColumn
xcvrCrntPMNBITCRValidity = _XcvrCrntPMNBITCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 62),
    _XcvrCrntPMNBITCRValidity_Type()
)
xcvrCrntPMNBITCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBITCRValidity.setStatus("current")
_XcvrCrntPMNBYTCRValue_Type = Unsigned32
_XcvrCrntPMNBYTCRValue_Object = MibTableColumn
xcvrCrntPMNBYTCRValue = _XcvrCrntPMNBYTCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 63),
    _XcvrCrntPMNBYTCRValue_Type()
)
xcvrCrntPMNBYTCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMNBYTCRValue.setStatus("current")
_XcvrCrntPMNBYTCRTimeStamp_Type = DateAndTime
_XcvrCrntPMNBYTCRTimeStamp_Object = MibTableColumn
xcvrCrntPMNBYTCRTimeStamp = _XcvrCrntPMNBYTCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 64),
    _XcvrCrntPMNBYTCRTimeStamp_Type()
)
xcvrCrntPMNBYTCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBYTCRTimeStamp.setStatus("current")
_XcvrCrntPMNBYTCRValidity_Type = PMValidity
_XcvrCrntPMNBYTCRValidity_Object = MibTableColumn
xcvrCrntPMNBYTCRValidity = _XcvrCrntPMNBYTCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 65),
    _XcvrCrntPMNBYTCRValidity_Type()
)
xcvrCrntPMNBYTCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBYTCRValidity.setStatus("current")
_XcvrCrntPMUNCRCDWValue_Type = Unsigned32
_XcvrCrntPMUNCRCDWValue_Object = MibTableColumn
xcvrCrntPMUNCRCDWValue = _XcvrCrntPMUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 66),
    _XcvrCrntPMUNCRCDWValue_Type()
)
xcvrCrntPMUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMUNCRCDWValue.setStatus("current")
_XcvrCrntPMUNCRCDWTimeStamp_Type = DateAndTime
_XcvrCrntPMUNCRCDWTimeStamp_Object = MibTableColumn
xcvrCrntPMUNCRCDWTimeStamp = _XcvrCrntPMUNCRCDWTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 67),
    _XcvrCrntPMUNCRCDWTimeStamp_Type()
)
xcvrCrntPMUNCRCDWTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMUNCRCDWTimeStamp.setStatus("current")
_XcvrCrntPMUNCRCDWValidity_Type = PMValidity
_XcvrCrntPMUNCRCDWValidity_Object = MibTableColumn
xcvrCrntPMUNCRCDWValidity = _XcvrCrntPMUNCRCDWValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 68),
    _XcvrCrntPMUNCRCDWValidity_Type()
)
xcvrCrntPMUNCRCDWValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMUNCRCDWValidity.setStatus("current")
_XcvrCrntPMTBYCRXValue_Type = Unsigned64
_XcvrCrntPMTBYCRXValue_Object = MibTableColumn
xcvrCrntPMTBYCRXValue = _XcvrCrntPMTBYCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 69),
    _XcvrCrntPMTBYCRXValue_Type()
)
xcvrCrntPMTBYCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTBYCRXValue.setStatus("current")
_XcvrCrntPMTBYCRXTimeStamp_Type = DateAndTime
_XcvrCrntPMTBYCRXTimeStamp_Object = MibTableColumn
xcvrCrntPMTBYCRXTimeStamp = _XcvrCrntPMTBYCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 70),
    _XcvrCrntPMTBYCRXTimeStamp_Type()
)
xcvrCrntPMTBYCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTBYCRXTimeStamp.setStatus("current")
_XcvrCrntPMTBYCRXValidity_Type = PMValidity
_XcvrCrntPMTBYCRXValidity_Object = MibTableColumn
xcvrCrntPMTBYCRXValidity = _XcvrCrntPMTBYCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 71),
    _XcvrCrntPMTBYCRXValidity_Type()
)
xcvrCrntPMTBYCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTBYCRXValidity.setStatus("current")
_XcvrCrntPMTBYCRXInitialize_Type = InitializeCmd
_XcvrCrntPMTBYCRXInitialize_Object = MibTableColumn
xcvrCrntPMTBYCRXInitialize = _XcvrCrntPMTBYCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 72),
    _XcvrCrntPMTBYCRXInitialize_Type()
)
xcvrCrntPMTBYCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMTBYCRXInitialize.setStatus("current")
_XcvrCrntPMTFRCRXValue_Type = Unsigned64
_XcvrCrntPMTFRCRXValue_Object = MibTableColumn
xcvrCrntPMTFRCRXValue = _XcvrCrntPMTFRCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 73),
    _XcvrCrntPMTFRCRXValue_Type()
)
xcvrCrntPMTFRCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTFRCRXValue.setStatus("current")
_XcvrCrntPMTFRCRXTimeStamp_Type = DateAndTime
_XcvrCrntPMTFRCRXTimeStamp_Object = MibTableColumn
xcvrCrntPMTFRCRXTimeStamp = _XcvrCrntPMTFRCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 74),
    _XcvrCrntPMTFRCRXTimeStamp_Type()
)
xcvrCrntPMTFRCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTFRCRXTimeStamp.setStatus("current")
_XcvrCrntPMTFRCRXValidity_Type = PMValidity
_XcvrCrntPMTFRCRXValidity_Object = MibTableColumn
xcvrCrntPMTFRCRXValidity = _XcvrCrntPMTFRCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 75),
    _XcvrCrntPMTFRCRXValidity_Type()
)
xcvrCrntPMTFRCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMTFRCRXValidity.setStatus("current")
_XcvrCrntPMTFRCRXInitialize_Type = InitializeCmd
_XcvrCrntPMTFRCRXInitialize_Object = MibTableColumn
xcvrCrntPMTFRCRXInitialize = _XcvrCrntPMTFRCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 76),
    _XcvrCrntPMTFRCRXInitialize_Type()
)
xcvrCrntPMTFRCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMTFRCRXInitialize.setStatus("current")
_XcvrCrntPMBCSTValue_Type = Unsigned64
_XcvrCrntPMBCSTValue_Object = MibTableColumn
xcvrCrntPMBCSTValue = _XcvrCrntPMBCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 77),
    _XcvrCrntPMBCSTValue_Type()
)
xcvrCrntPMBCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMBCSTValue.setStatus("current")
_XcvrCrntPMBCSTTimeStamp_Type = DateAndTime
_XcvrCrntPMBCSTTimeStamp_Object = MibTableColumn
xcvrCrntPMBCSTTimeStamp = _XcvrCrntPMBCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 78),
    _XcvrCrntPMBCSTTimeStamp_Type()
)
xcvrCrntPMBCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMBCSTTimeStamp.setStatus("current")
_XcvrCrntPMBCSTValidity_Type = PMValidity
_XcvrCrntPMBCSTValidity_Object = MibTableColumn
xcvrCrntPMBCSTValidity = _XcvrCrntPMBCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 79),
    _XcvrCrntPMBCSTValidity_Type()
)
xcvrCrntPMBCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMBCSTValidity.setStatus("current")
_XcvrCrntPMBCSTInitialize_Type = InitializeCmd
_XcvrCrntPMBCSTInitialize_Object = MibTableColumn
xcvrCrntPMBCSTInitialize = _XcvrCrntPMBCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 80),
    _XcvrCrntPMBCSTInitialize_Type()
)
xcvrCrntPMBCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMBCSTInitialize.setStatus("current")
_XcvrCrntPMMCSTValue_Type = Unsigned64
_XcvrCrntPMMCSTValue_Object = MibTableColumn
xcvrCrntPMMCSTValue = _XcvrCrntPMMCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 81),
    _XcvrCrntPMMCSTValue_Type()
)
xcvrCrntPMMCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMMCSTValue.setStatus("current")
_XcvrCrntPMMCSTTimeStamp_Type = DateAndTime
_XcvrCrntPMMCSTTimeStamp_Object = MibTableColumn
xcvrCrntPMMCSTTimeStamp = _XcvrCrntPMMCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 82),
    _XcvrCrntPMMCSTTimeStamp_Type()
)
xcvrCrntPMMCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMMCSTTimeStamp.setStatus("current")
_XcvrCrntPMMCSTValidity_Type = PMValidity
_XcvrCrntPMMCSTValidity_Object = MibTableColumn
xcvrCrntPMMCSTValidity = _XcvrCrntPMMCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 83),
    _XcvrCrntPMMCSTValidity_Type()
)
xcvrCrntPMMCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMMCSTValidity.setStatus("current")
_XcvrCrntPMMCSTInitialize_Type = InitializeCmd
_XcvrCrntPMMCSTInitialize_Object = MibTableColumn
xcvrCrntPMMCSTInitialize = _XcvrCrntPMMCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 84),
    _XcvrCrntPMMCSTInitialize_Type()
)
xcvrCrntPMMCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMMCSTInitialize.setStatus("current")
_XcvrCrntPMSIZE64Value_Type = Unsigned64
_XcvrCrntPMSIZE64Value_Object = MibTableColumn
xcvrCrntPMSIZE64Value = _XcvrCrntPMSIZE64Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 85),
    _XcvrCrntPMSIZE64Value_Type()
)
xcvrCrntPMSIZE64Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE64Value.setStatus("current")
_XcvrCrntPMSIZE64TimeStamp_Type = DateAndTime
_XcvrCrntPMSIZE64TimeStamp_Object = MibTableColumn
xcvrCrntPMSIZE64TimeStamp = _XcvrCrntPMSIZE64TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 86),
    _XcvrCrntPMSIZE64TimeStamp_Type()
)
xcvrCrntPMSIZE64TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE64TimeStamp.setStatus("current")
_XcvrCrntPMSIZE64Validity_Type = PMValidity
_XcvrCrntPMSIZE64Validity_Object = MibTableColumn
xcvrCrntPMSIZE64Validity = _XcvrCrntPMSIZE64Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 87),
    _XcvrCrntPMSIZE64Validity_Type()
)
xcvrCrntPMSIZE64Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE64Validity.setStatus("current")
_XcvrCrntPMSIZE64Initialize_Type = InitializeCmd
_XcvrCrntPMSIZE64Initialize_Object = MibTableColumn
xcvrCrntPMSIZE64Initialize = _XcvrCrntPMSIZE64Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 88),
    _XcvrCrntPMSIZE64Initialize_Type()
)
xcvrCrntPMSIZE64Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE64Initialize.setStatus("current")
_XcvrCrntPMSIZE65To127Value_Type = Unsigned64
_XcvrCrntPMSIZE65To127Value_Object = MibTableColumn
xcvrCrntPMSIZE65To127Value = _XcvrCrntPMSIZE65To127Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 89),
    _XcvrCrntPMSIZE65To127Value_Type()
)
xcvrCrntPMSIZE65To127Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE65To127Value.setStatus("current")
_XcvrCrntPMSIZE65To127TimeStamp_Type = DateAndTime
_XcvrCrntPMSIZE65To127TimeStamp_Object = MibTableColumn
xcvrCrntPMSIZE65To127TimeStamp = _XcvrCrntPMSIZE65To127TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 90),
    _XcvrCrntPMSIZE65To127TimeStamp_Type()
)
xcvrCrntPMSIZE65To127TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE65To127TimeStamp.setStatus("current")
_XcvrCrntPMSIZE65To127Validity_Type = PMValidity
_XcvrCrntPMSIZE65To127Validity_Object = MibTableColumn
xcvrCrntPMSIZE65To127Validity = _XcvrCrntPMSIZE65To127Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 91),
    _XcvrCrntPMSIZE65To127Validity_Type()
)
xcvrCrntPMSIZE65To127Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE65To127Validity.setStatus("current")
_XcvrCrntPMSIZE65To127Initialize_Type = InitializeCmd
_XcvrCrntPMSIZE65To127Initialize_Object = MibTableColumn
xcvrCrntPMSIZE65To127Initialize = _XcvrCrntPMSIZE65To127Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 92),
    _XcvrCrntPMSIZE65To127Initialize_Type()
)
xcvrCrntPMSIZE65To127Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE65To127Initialize.setStatus("current")
_XcvrCrntPMSIZE128To255Value_Type = Unsigned64
_XcvrCrntPMSIZE128To255Value_Object = MibTableColumn
xcvrCrntPMSIZE128To255Value = _XcvrCrntPMSIZE128To255Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 93),
    _XcvrCrntPMSIZE128To255Value_Type()
)
xcvrCrntPMSIZE128To255Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE128To255Value.setStatus("current")
_XcvrCrntPMSIZE128To255TimeStamp_Type = DateAndTime
_XcvrCrntPMSIZE128To255TimeStamp_Object = MibTableColumn
xcvrCrntPMSIZE128To255TimeStamp = _XcvrCrntPMSIZE128To255TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 94),
    _XcvrCrntPMSIZE128To255TimeStamp_Type()
)
xcvrCrntPMSIZE128To255TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE128To255TimeStamp.setStatus("current")
_XcvrCrntPMSIZE128To255Validity_Type = PMValidity
_XcvrCrntPMSIZE128To255Validity_Object = MibTableColumn
xcvrCrntPMSIZE128To255Validity = _XcvrCrntPMSIZE128To255Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 95),
    _XcvrCrntPMSIZE128To255Validity_Type()
)
xcvrCrntPMSIZE128To255Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE128To255Validity.setStatus("current")
_XcvrCrntPMSIZE128To255Initialize_Type = InitializeCmd
_XcvrCrntPMSIZE128To255Initialize_Object = MibTableColumn
xcvrCrntPMSIZE128To255Initialize = _XcvrCrntPMSIZE128To255Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 96),
    _XcvrCrntPMSIZE128To255Initialize_Type()
)
xcvrCrntPMSIZE128To255Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE128To255Initialize.setStatus("current")
_XcvrCrntPMSIZE256To511Value_Type = Unsigned64
_XcvrCrntPMSIZE256To511Value_Object = MibTableColumn
xcvrCrntPMSIZE256To511Value = _XcvrCrntPMSIZE256To511Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 97),
    _XcvrCrntPMSIZE256To511Value_Type()
)
xcvrCrntPMSIZE256To511Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE256To511Value.setStatus("current")
_XcvrCrntPMSIZE256To511TimeStamp_Type = DateAndTime
_XcvrCrntPMSIZE256To511TimeStamp_Object = MibTableColumn
xcvrCrntPMSIZE256To511TimeStamp = _XcvrCrntPMSIZE256To511TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 98),
    _XcvrCrntPMSIZE256To511TimeStamp_Type()
)
xcvrCrntPMSIZE256To511TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE256To511TimeStamp.setStatus("current")
_XcvrCrntPMSIZE256To511Validity_Type = PMValidity
_XcvrCrntPMSIZE256To511Validity_Object = MibTableColumn
xcvrCrntPMSIZE256To511Validity = _XcvrCrntPMSIZE256To511Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 99),
    _XcvrCrntPMSIZE256To511Validity_Type()
)
xcvrCrntPMSIZE256To511Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE256To511Validity.setStatus("current")
_XcvrCrntPMSIZE256To511Initialize_Type = InitializeCmd
_XcvrCrntPMSIZE256To511Initialize_Object = MibTableColumn
xcvrCrntPMSIZE256To511Initialize = _XcvrCrntPMSIZE256To511Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 100),
    _XcvrCrntPMSIZE256To511Initialize_Type()
)
xcvrCrntPMSIZE256To511Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE256To511Initialize.setStatus("current")
_XcvrCrntPMSIZE512To1023Value_Type = Unsigned64
_XcvrCrntPMSIZE512To1023Value_Object = MibTableColumn
xcvrCrntPMSIZE512To1023Value = _XcvrCrntPMSIZE512To1023Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 101),
    _XcvrCrntPMSIZE512To1023Value_Type()
)
xcvrCrntPMSIZE512To1023Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE512To1023Value.setStatus("current")
_XcvrCrntPMSIZE512To1023TimeStamp_Type = DateAndTime
_XcvrCrntPMSIZE512To1023TimeStamp_Object = MibTableColumn
xcvrCrntPMSIZE512To1023TimeStamp = _XcvrCrntPMSIZE512To1023TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 102),
    _XcvrCrntPMSIZE512To1023TimeStamp_Type()
)
xcvrCrntPMSIZE512To1023TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE512To1023TimeStamp.setStatus("current")
_XcvrCrntPMSIZE512To1023Validity_Type = PMValidity
_XcvrCrntPMSIZE512To1023Validity_Object = MibTableColumn
xcvrCrntPMSIZE512To1023Validity = _XcvrCrntPMSIZE512To1023Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 103),
    _XcvrCrntPMSIZE512To1023Validity_Type()
)
xcvrCrntPMSIZE512To1023Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE512To1023Validity.setStatus("current")
_XcvrCrntPMSIZE512To1023Initialize_Type = InitializeCmd
_XcvrCrntPMSIZE512To1023Initialize_Object = MibTableColumn
xcvrCrntPMSIZE512To1023Initialize = _XcvrCrntPMSIZE512To1023Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 104),
    _XcvrCrntPMSIZE512To1023Initialize_Type()
)
xcvrCrntPMSIZE512To1023Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE512To1023Initialize.setStatus("current")
_XcvrCrntPMSIZE1024To1518Value_Type = Unsigned64
_XcvrCrntPMSIZE1024To1518Value_Object = MibTableColumn
xcvrCrntPMSIZE1024To1518Value = _XcvrCrntPMSIZE1024To1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 105),
    _XcvrCrntPMSIZE1024To1518Value_Type()
)
xcvrCrntPMSIZE1024To1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE1024To1518Value.setStatus("current")
_XcvrCrntPMSIZE1024To1518TimeStamp_Type = DateAndTime
_XcvrCrntPMSIZE1024To1518TimeStamp_Object = MibTableColumn
xcvrCrntPMSIZE1024To1518TimeStamp = _XcvrCrntPMSIZE1024To1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 106),
    _XcvrCrntPMSIZE1024To1518TimeStamp_Type()
)
xcvrCrntPMSIZE1024To1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE1024To1518TimeStamp.setStatus("current")
_XcvrCrntPMSIZE1024To1518Validity_Type = PMValidity
_XcvrCrntPMSIZE1024To1518Validity_Object = MibTableColumn
xcvrCrntPMSIZE1024To1518Validity = _XcvrCrntPMSIZE1024To1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 107),
    _XcvrCrntPMSIZE1024To1518Validity_Type()
)
xcvrCrntPMSIZE1024To1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE1024To1518Validity.setStatus("current")
_XcvrCrntPMSIZE1024To1518Initialize_Type = InitializeCmd
_XcvrCrntPMSIZE1024To1518Initialize_Object = MibTableColumn
xcvrCrntPMSIZE1024To1518Initialize = _XcvrCrntPMSIZE1024To1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 108),
    _XcvrCrntPMSIZE1024To1518Initialize_Type()
)
xcvrCrntPMSIZE1024To1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZE1024To1518Initialize.setStatus("current")
_XcvrCrntPMSIZEOver1518Value_Type = Unsigned64
_XcvrCrntPMSIZEOver1518Value_Object = MibTableColumn
xcvrCrntPMSIZEOver1518Value = _XcvrCrntPMSIZEOver1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 109),
    _XcvrCrntPMSIZEOver1518Value_Type()
)
xcvrCrntPMSIZEOver1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZEOver1518Value.setStatus("current")
_XcvrCrntPMSIZEOver1518TimeStamp_Type = DateAndTime
_XcvrCrntPMSIZEOver1518TimeStamp_Object = MibTableColumn
xcvrCrntPMSIZEOver1518TimeStamp = _XcvrCrntPMSIZEOver1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 110),
    _XcvrCrntPMSIZEOver1518TimeStamp_Type()
)
xcvrCrntPMSIZEOver1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZEOver1518TimeStamp.setStatus("current")
_XcvrCrntPMSIZEOver1518Validity_Type = PMValidity
_XcvrCrntPMSIZEOver1518Validity_Object = MibTableColumn
xcvrCrntPMSIZEOver1518Validity = _XcvrCrntPMSIZEOver1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 111),
    _XcvrCrntPMSIZEOver1518Validity_Type()
)
xcvrCrntPMSIZEOver1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZEOver1518Validity.setStatus("current")
_XcvrCrntPMSIZEOver1518Initialize_Type = InitializeCmd
_XcvrCrntPMSIZEOver1518Initialize_Object = MibTableColumn
xcvrCrntPMSIZEOver1518Initialize = _XcvrCrntPMSIZEOver1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 112),
    _XcvrCrntPMSIZEOver1518Initialize_Type()
)
xcvrCrntPMSIZEOver1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSIZEOver1518Initialize.setStatus("current")
_XcvrCrntPMFCSEValue_Type = Unsigned32
_XcvrCrntPMFCSEValue_Object = MibTableColumn
xcvrCrntPMFCSEValue = _XcvrCrntPMFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 113),
    _XcvrCrntPMFCSEValue_Type()
)
xcvrCrntPMFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMFCSEValue.setStatus("current")
_XcvrCrntPMFCSETimeStamp_Type = DateAndTime
_XcvrCrntPMFCSETimeStamp_Object = MibTableColumn
xcvrCrntPMFCSETimeStamp = _XcvrCrntPMFCSETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 114),
    _XcvrCrntPMFCSETimeStamp_Type()
)
xcvrCrntPMFCSETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMFCSETimeStamp.setStatus("current")
_XcvrCrntPMFCSEValidity_Type = PMValidity
_XcvrCrntPMFCSEValidity_Object = MibTableColumn
xcvrCrntPMFCSEValidity = _XcvrCrntPMFCSEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 115),
    _XcvrCrntPMFCSEValidity_Type()
)
xcvrCrntPMFCSEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMFCSEValidity.setStatus("current")
_XcvrCrntPMFRDRValue_Type = Unsigned32
_XcvrCrntPMFRDRValue_Object = MibTableColumn
xcvrCrntPMFRDRValue = _XcvrCrntPMFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 116),
    _XcvrCrntPMFRDRValue_Type()
)
xcvrCrntPMFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMFRDRValue.setStatus("current")
_XcvrCrntPMFRDRTimeStamp_Type = DateAndTime
_XcvrCrntPMFRDRTimeStamp_Object = MibTableColumn
xcvrCrntPMFRDRTimeStamp = _XcvrCrntPMFRDRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 117),
    _XcvrCrntPMFRDRTimeStamp_Type()
)
xcvrCrntPMFRDRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMFRDRTimeStamp.setStatus("current")
_XcvrCrntPMFRDRValidity_Type = PMValidity
_XcvrCrntPMFRDRValidity_Object = MibTableColumn
xcvrCrntPMFRDRValidity = _XcvrCrntPMFRDRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 118),
    _XcvrCrntPMFRDRValidity_Type()
)
xcvrCrntPMFRDRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMFRDRValidity.setStatus("current")
_XcvrCrntPMUSIZEValue_Type = Unsigned32
_XcvrCrntPMUSIZEValue_Object = MibTableColumn
xcvrCrntPMUSIZEValue = _XcvrCrntPMUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 119),
    _XcvrCrntPMUSIZEValue_Type()
)
xcvrCrntPMUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMUSIZEValue.setStatus("current")
_XcvrCrntPMUSIZETimeStamp_Type = DateAndTime
_XcvrCrntPMUSIZETimeStamp_Object = MibTableColumn
xcvrCrntPMUSIZETimeStamp = _XcvrCrntPMUSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 120),
    _XcvrCrntPMUSIZETimeStamp_Type()
)
xcvrCrntPMUSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMUSIZETimeStamp.setStatus("current")
_XcvrCrntPMUSIZEValidity_Type = PMValidity
_XcvrCrntPMUSIZEValidity_Object = MibTableColumn
xcvrCrntPMUSIZEValidity = _XcvrCrntPMUSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 121),
    _XcvrCrntPMUSIZEValidity_Type()
)
xcvrCrntPMUSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMUSIZEValidity.setStatus("current")
_XcvrCrntPMOSIZEValue_Type = Unsigned32
_XcvrCrntPMOSIZEValue_Object = MibTableColumn
xcvrCrntPMOSIZEValue = _XcvrCrntPMOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 122),
    _XcvrCrntPMOSIZEValue_Type()
)
xcvrCrntPMOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOSIZEValue.setStatus("current")
_XcvrCrntPMOSIZETimeStamp_Type = DateAndTime
_XcvrCrntPMOSIZETimeStamp_Object = MibTableColumn
xcvrCrntPMOSIZETimeStamp = _XcvrCrntPMOSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 123),
    _XcvrCrntPMOSIZETimeStamp_Type()
)
xcvrCrntPMOSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOSIZETimeStamp.setStatus("current")
_XcvrCrntPMOSIZEValidity_Type = PMValidity
_XcvrCrntPMOSIZEValidity_Object = MibTableColumn
xcvrCrntPMOSIZEValidity = _XcvrCrntPMOSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 124),
    _XcvrCrntPMOSIZEValidity_Type()
)
xcvrCrntPMOSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOSIZEValidity.setStatus("current")
_XcvrCrntPMFRGTValue_Type = Unsigned32
_XcvrCrntPMFRGTValue_Object = MibTableColumn
xcvrCrntPMFRGTValue = _XcvrCrntPMFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 125),
    _XcvrCrntPMFRGTValue_Type()
)
xcvrCrntPMFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMFRGTValue.setStatus("current")
_XcvrCrntPMFRGTTimeStamp_Type = DateAndTime
_XcvrCrntPMFRGTTimeStamp_Object = MibTableColumn
xcvrCrntPMFRGTTimeStamp = _XcvrCrntPMFRGTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 126),
    _XcvrCrntPMFRGTTimeStamp_Type()
)
xcvrCrntPMFRGTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMFRGTTimeStamp.setStatus("current")
_XcvrCrntPMFRGTValidity_Type = PMValidity
_XcvrCrntPMFRGTValidity_Object = MibTableColumn
xcvrCrntPMFRGTValidity = _XcvrCrntPMFRGTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 127),
    _XcvrCrntPMFRGTValidity_Type()
)
xcvrCrntPMFRGTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMFRGTValidity.setStatus("current")
_XcvrCrntPMJABRValue_Type = Unsigned32
_XcvrCrntPMJABRValue_Object = MibTableColumn
xcvrCrntPMJABRValue = _XcvrCrntPMJABRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 128),
    _XcvrCrntPMJABRValue_Type()
)
xcvrCrntPMJABRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMJABRValue.setStatus("current")
_XcvrCrntPMJABRTimeStamp_Type = DateAndTime
_XcvrCrntPMJABRTimeStamp_Object = MibTableColumn
xcvrCrntPMJABRTimeStamp = _XcvrCrntPMJABRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 129),
    _XcvrCrntPMJABRTimeStamp_Type()
)
xcvrCrntPMJABRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMJABRTimeStamp.setStatus("current")
_XcvrCrntPMJABRValidity_Type = PMValidity
_XcvrCrntPMJABRValidity_Object = MibTableColumn
xcvrCrntPMJABRValidity = _XcvrCrntPMJABRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 130),
    _XcvrCrntPMJABRValidity_Type()
)
xcvrCrntPMJABRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMJABRValidity.setStatus("current")
_XcvrCrntPMOTUEBValue_Type = Unsigned32
_XcvrCrntPMOTUEBValue_Object = MibTableColumn
xcvrCrntPMOTUEBValue = _XcvrCrntPMOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 131),
    _XcvrCrntPMOTUEBValue_Type()
)
xcvrCrntPMOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUEBValue.setStatus("current")
_XcvrCrntPMOTUEBTimeStamp_Type = DateAndTime
_XcvrCrntPMOTUEBTimeStamp_Object = MibTableColumn
xcvrCrntPMOTUEBTimeStamp = _XcvrCrntPMOTUEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 132),
    _XcvrCrntPMOTUEBTimeStamp_Type()
)
xcvrCrntPMOTUEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUEBTimeStamp.setStatus("current")
_XcvrCrntPMOTUEBValidity_Type = PMValidity
_XcvrCrntPMOTUEBValidity_Object = MibTableColumn
xcvrCrntPMOTUEBValidity = _XcvrCrntPMOTUEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 133),
    _XcvrCrntPMOTUEBValidity_Type()
)
xcvrCrntPMOTUEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUEBValidity.setStatus("current")
_XcvrCrntPMOTUBBEValue_Type = Unsigned32
_XcvrCrntPMOTUBBEValue_Object = MibTableColumn
xcvrCrntPMOTUBBEValue = _XcvrCrntPMOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 134),
    _XcvrCrntPMOTUBBEValue_Type()
)
xcvrCrntPMOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUBBEValue.setStatus("current")
_XcvrCrntPMOTUBBETimeStamp_Type = DateAndTime
_XcvrCrntPMOTUBBETimeStamp_Object = MibTableColumn
xcvrCrntPMOTUBBETimeStamp = _XcvrCrntPMOTUBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 135),
    _XcvrCrntPMOTUBBETimeStamp_Type()
)
xcvrCrntPMOTUBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUBBETimeStamp.setStatus("current")
_XcvrCrntPMOTUBBEValidity_Type = PMValidity
_XcvrCrntPMOTUBBEValidity_Object = MibTableColumn
xcvrCrntPMOTUBBEValidity = _XcvrCrntPMOTUBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 136),
    _XcvrCrntPMOTUBBEValidity_Type()
)
xcvrCrntPMOTUBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUBBEValidity.setStatus("current")
_XcvrCrntPMOTUESValue_Type = Unsigned32
_XcvrCrntPMOTUESValue_Object = MibTableColumn
xcvrCrntPMOTUESValue = _XcvrCrntPMOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 137),
    _XcvrCrntPMOTUESValue_Type()
)
xcvrCrntPMOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUESValue.setStatus("current")
_XcvrCrntPMOTUESTimeStamp_Type = DateAndTime
_XcvrCrntPMOTUESTimeStamp_Object = MibTableColumn
xcvrCrntPMOTUESTimeStamp = _XcvrCrntPMOTUESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 138),
    _XcvrCrntPMOTUESTimeStamp_Type()
)
xcvrCrntPMOTUESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUESTimeStamp.setStatus("current")
_XcvrCrntPMOTUESValidity_Type = PMValidity
_XcvrCrntPMOTUESValidity_Object = MibTableColumn
xcvrCrntPMOTUESValidity = _XcvrCrntPMOTUESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 139),
    _XcvrCrntPMOTUESValidity_Type()
)
xcvrCrntPMOTUESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUESValidity.setStatus("current")
_XcvrCrntPMOTUSESValue_Type = Unsigned32
_XcvrCrntPMOTUSESValue_Object = MibTableColumn
xcvrCrntPMOTUSESValue = _XcvrCrntPMOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 140),
    _XcvrCrntPMOTUSESValue_Type()
)
xcvrCrntPMOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUSESValue.setStatus("current")
_XcvrCrntPMOTUSESTimeStamp_Type = DateAndTime
_XcvrCrntPMOTUSESTimeStamp_Object = MibTableColumn
xcvrCrntPMOTUSESTimeStamp = _XcvrCrntPMOTUSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 141),
    _XcvrCrntPMOTUSESTimeStamp_Type()
)
xcvrCrntPMOTUSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUSESTimeStamp.setStatus("current")
_XcvrCrntPMOTUSESValidity_Type = PMValidity
_XcvrCrntPMOTUSESValidity_Object = MibTableColumn
xcvrCrntPMOTUSESValidity = _XcvrCrntPMOTUSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 142),
    _XcvrCrntPMOTUSESValidity_Type()
)
xcvrCrntPMOTUSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUSESValidity.setStatus("current")
_XcvrCrntPMOTUOFSValue_Type = Unsigned32
_XcvrCrntPMOTUOFSValue_Object = MibTableColumn
xcvrCrntPMOTUOFSValue = _XcvrCrntPMOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 143),
    _XcvrCrntPMOTUOFSValue_Type()
)
xcvrCrntPMOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUOFSValue.setStatus("current")
_XcvrCrntPMOTUOFSTimeStamp_Type = DateAndTime
_XcvrCrntPMOTUOFSTimeStamp_Object = MibTableColumn
xcvrCrntPMOTUOFSTimeStamp = _XcvrCrntPMOTUOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 144),
    _XcvrCrntPMOTUOFSTimeStamp_Type()
)
xcvrCrntPMOTUOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUOFSTimeStamp.setStatus("current")
_XcvrCrntPMOTUOFSValidity_Type = PMValidity
_XcvrCrntPMOTUOFSValidity_Object = MibTableColumn
xcvrCrntPMOTUOFSValidity = _XcvrCrntPMOTUOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 145),
    _XcvrCrntPMOTUOFSValidity_Type()
)
xcvrCrntPMOTUOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUOFSValidity.setStatus("current")
_XcvrCrntPMSupplyVoltage2Value_Type = FixedX10
_XcvrCrntPMSupplyVoltage2Value_Object = MibTableColumn
xcvrCrntPMSupplyVoltage2Value = _XcvrCrntPMSupplyVoltage2Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 146),
    _XcvrCrntPMSupplyVoltage2Value_Type()
)
xcvrCrntPMSupplyVoltage2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSupplyVoltage2Value.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMSupplyVoltage2Value.setUnits("mVolts/10")
_XcvrCrntPMSupplyVoltage2TimeStamp_Type = DateAndTime
_XcvrCrntPMSupplyVoltage2TimeStamp_Object = MibTableColumn
xcvrCrntPMSupplyVoltage2TimeStamp = _XcvrCrntPMSupplyVoltage2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 147),
    _XcvrCrntPMSupplyVoltage2TimeStamp_Type()
)
xcvrCrntPMSupplyVoltage2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSupplyVoltage2TimeStamp.setStatus("current")
_XcvrCrntPMSupplyVoltage2Validity_Type = PMValidity
_XcvrCrntPMSupplyVoltage2Validity_Object = MibTableColumn
xcvrCrntPMSupplyVoltage2Validity = _XcvrCrntPMSupplyVoltage2Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 148),
    _XcvrCrntPMSupplyVoltage2Validity_Type()
)
xcvrCrntPMSupplyVoltage2Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMSupplyVoltage2Validity.setStatus("current")
_XcvrCrntPMCVSInitialize_Type = InitializeCmd
_XcvrCrntPMCVSInitialize_Object = MibTableColumn
xcvrCrntPMCVSInitialize = _XcvrCrntPMCVSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 149),
    _XcvrCrntPMCVSInitialize_Type()
)
xcvrCrntPMCVSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMCVSInitialize.setStatus("current")
_XcvrCrntPMESSInitialize_Type = InitializeCmd
_XcvrCrntPMESSInitialize_Object = MibTableColumn
xcvrCrntPMESSInitialize = _XcvrCrntPMESSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 150),
    _XcvrCrntPMESSInitialize_Type()
)
xcvrCrntPMESSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMESSInitialize.setStatus("current")
_XcvrCrntPMSESSInitialize_Type = InitializeCmd
_XcvrCrntPMSESSInitialize_Object = MibTableColumn
xcvrCrntPMSESSInitialize = _XcvrCrntPMSESSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 151),
    _XcvrCrntPMSESSInitialize_Type()
)
xcvrCrntPMSESSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSESSInitialize.setStatus("current")
_XcvrCrntPMSEFSSInitialize_Type = InitializeCmd
_XcvrCrntPMSEFSSInitialize_Object = MibTableColumn
xcvrCrntPMSEFSSInitialize = _XcvrCrntPMSEFSSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 152),
    _XcvrCrntPMSEFSSInitialize_Type()
)
xcvrCrntPMSEFSSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSEFSSInitialize.setStatus("current")
_XcvrCrntPMRSEBInitialize_Type = InitializeCmd
_XcvrCrntPMRSEBInitialize_Object = MibTableColumn
xcvrCrntPMRSEBInitialize = _XcvrCrntPMRSEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 153),
    _XcvrCrntPMRSEBInitialize_Type()
)
xcvrCrntPMRSEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSEBInitialize.setStatus("current")
_XcvrCrntPMRSBBEInitialize_Type = InitializeCmd
_XcvrCrntPMRSBBEInitialize_Object = MibTableColumn
xcvrCrntPMRSBBEInitialize = _XcvrCrntPMRSBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 154),
    _XcvrCrntPMRSBBEInitialize_Type()
)
xcvrCrntPMRSBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSBBEInitialize.setStatus("current")
_XcvrCrntPMRSESInitialize_Type = InitializeCmd
_XcvrCrntPMRSESInitialize_Object = MibTableColumn
xcvrCrntPMRSESInitialize = _XcvrCrntPMRSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 155),
    _XcvrCrntPMRSESInitialize_Type()
)
xcvrCrntPMRSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSESInitialize.setStatus("current")
_XcvrCrntPMRSSESInitialize_Type = InitializeCmd
_XcvrCrntPMRSSESInitialize_Object = MibTableColumn
xcvrCrntPMRSSESInitialize = _XcvrCrntPMRSSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 156),
    _XcvrCrntPMRSSESInitialize_Type()
)
xcvrCrntPMRSSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSSESInitialize.setStatus("current")
_XcvrCrntPMRSOFSInitialize_Type = InitializeCmd
_XcvrCrntPMRSOFSInitialize_Object = MibTableColumn
xcvrCrntPMRSOFSInitialize = _XcvrCrntPMRSOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 157),
    _XcvrCrntPMRSOFSInitialize_Type()
)
xcvrCrntPMRSOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSOFSInitialize.setStatus("current")
_XcvrCrntPMCVInitialize_Type = InitializeCmd
_XcvrCrntPMCVInitialize_Object = MibTableColumn
xcvrCrntPMCVInitialize = _XcvrCrntPMCVInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 158),
    _XcvrCrntPMCVInitialize_Type()
)
xcvrCrntPMCVInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMCVInitialize.setStatus("current")
_XcvrCrntPMESInitialize_Type = InitializeCmd
_XcvrCrntPMESInitialize_Object = MibTableColumn
xcvrCrntPMESInitialize = _XcvrCrntPMESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 159),
    _XcvrCrntPMESInitialize_Type()
)
xcvrCrntPMESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMESInitialize.setStatus("current")
_XcvrCrntPMSESInitialize_Type = InitializeCmd
_XcvrCrntPMSESInitialize_Object = MibTableColumn
xcvrCrntPMSESInitialize = _XcvrCrntPMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 160),
    _XcvrCrntPMSESInitialize_Type()
)
xcvrCrntPMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMSESInitialize.setStatus("current")
_XcvrCrntPMINVBLKInitialize_Type = InitializeCmd
_XcvrCrntPMINVBLKInitialize_Object = MibTableColumn
xcvrCrntPMINVBLKInitialize = _XcvrCrntPMINVBLKInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 161),
    _XcvrCrntPMINVBLKInitialize_Type()
)
xcvrCrntPMINVBLKInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMINVBLKInitialize.setStatus("current")
_XcvrCrntPMNBITCRInitialize_Type = InitializeCmd
_XcvrCrntPMNBITCRInitialize_Object = MibTableColumn
xcvrCrntPMNBITCRInitialize = _XcvrCrntPMNBITCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 162),
    _XcvrCrntPMNBITCRInitialize_Type()
)
xcvrCrntPMNBITCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMNBITCRInitialize.setStatus("current")
_XcvrCrntPMNBYTCRInitialize_Type = InitializeCmd
_XcvrCrntPMNBYTCRInitialize_Object = MibTableColumn
xcvrCrntPMNBYTCRInitialize = _XcvrCrntPMNBYTCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 163),
    _XcvrCrntPMNBYTCRInitialize_Type()
)
xcvrCrntPMNBYTCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMNBYTCRInitialize.setStatus("current")
_XcvrCrntPMUNCRCDWInitialize_Type = InitializeCmd
_XcvrCrntPMUNCRCDWInitialize_Object = MibTableColumn
xcvrCrntPMUNCRCDWInitialize = _XcvrCrntPMUNCRCDWInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 164),
    _XcvrCrntPMUNCRCDWInitialize_Type()
)
xcvrCrntPMUNCRCDWInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMUNCRCDWInitialize.setStatus("current")
_XcvrCrntPMFCSEInitialize_Type = InitializeCmd
_XcvrCrntPMFCSEInitialize_Object = MibTableColumn
xcvrCrntPMFCSEInitialize = _XcvrCrntPMFCSEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 165),
    _XcvrCrntPMFCSEInitialize_Type()
)
xcvrCrntPMFCSEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMFCSEInitialize.setStatus("current")
_XcvrCrntPMFRDRInitialize_Type = InitializeCmd
_XcvrCrntPMFRDRInitialize_Object = MibTableColumn
xcvrCrntPMFRDRInitialize = _XcvrCrntPMFRDRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 166),
    _XcvrCrntPMFRDRInitialize_Type()
)
xcvrCrntPMFRDRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMFRDRInitialize.setStatus("current")
_XcvrCrntPMUSIZEInitialize_Type = InitializeCmd
_XcvrCrntPMUSIZEInitialize_Object = MibTableColumn
xcvrCrntPMUSIZEInitialize = _XcvrCrntPMUSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 167),
    _XcvrCrntPMUSIZEInitialize_Type()
)
xcvrCrntPMUSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMUSIZEInitialize.setStatus("current")
_XcvrCrntPMOSIZEInitialize_Type = InitializeCmd
_XcvrCrntPMOSIZEInitialize_Object = MibTableColumn
xcvrCrntPMOSIZEInitialize = _XcvrCrntPMOSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 168),
    _XcvrCrntPMOSIZEInitialize_Type()
)
xcvrCrntPMOSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOSIZEInitialize.setStatus("current")
_XcvrCrntPMFRGTInitialize_Type = InitializeCmd
_XcvrCrntPMFRGTInitialize_Object = MibTableColumn
xcvrCrntPMFRGTInitialize = _XcvrCrntPMFRGTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 169),
    _XcvrCrntPMFRGTInitialize_Type()
)
xcvrCrntPMFRGTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMFRGTInitialize.setStatus("current")
_XcvrCrntPMJABRInitialize_Type = InitializeCmd
_XcvrCrntPMJABRInitialize_Object = MibTableColumn
xcvrCrntPMJABRInitialize = _XcvrCrntPMJABRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 170),
    _XcvrCrntPMJABRInitialize_Type()
)
xcvrCrntPMJABRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMJABRInitialize.setStatus("current")
_XcvrCrntPMOTUEBInitialize_Type = InitializeCmd
_XcvrCrntPMOTUEBInitialize_Object = MibTableColumn
xcvrCrntPMOTUEBInitialize = _XcvrCrntPMOTUEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 171),
    _XcvrCrntPMOTUEBInitialize_Type()
)
xcvrCrntPMOTUEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUEBInitialize.setStatus("current")
_XcvrCrntPMOTUBBEInitialize_Type = InitializeCmd
_XcvrCrntPMOTUBBEInitialize_Object = MibTableColumn
xcvrCrntPMOTUBBEInitialize = _XcvrCrntPMOTUBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 172),
    _XcvrCrntPMOTUBBEInitialize_Type()
)
xcvrCrntPMOTUBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUBBEInitialize.setStatus("current")
_XcvrCrntPMOTUESInitialize_Type = InitializeCmd
_XcvrCrntPMOTUESInitialize_Object = MibTableColumn
xcvrCrntPMOTUESInitialize = _XcvrCrntPMOTUESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 173),
    _XcvrCrntPMOTUESInitialize_Type()
)
xcvrCrntPMOTUESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUESInitialize.setStatus("current")
_XcvrCrntPMOTUSESInitialize_Type = InitializeCmd
_XcvrCrntPMOTUSESInitialize_Object = MibTableColumn
xcvrCrntPMOTUSESInitialize = _XcvrCrntPMOTUSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 174),
    _XcvrCrntPMOTUSESInitialize_Type()
)
xcvrCrntPMOTUSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUSESInitialize.setStatus("current")
_XcvrCrntPMOTUOFSInitialize_Type = InitializeCmd
_XcvrCrntPMOTUOFSInitialize_Object = MibTableColumn
xcvrCrntPMOTUOFSInitialize = _XcvrCrntPMOTUOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 175),
    _XcvrCrntPMOTUOFSInitialize_Type()
)
xcvrCrntPMOTUOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUOFSInitialize.setStatus("current")
_XcvrCrntPMUASSValue_Type = Unsigned32
_XcvrCrntPMUASSValue_Object = MibTableColumn
xcvrCrntPMUASSValue = _XcvrCrntPMUASSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 176),
    _XcvrCrntPMUASSValue_Type()
)
xcvrCrntPMUASSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMUASSValue.setStatus("current")
_XcvrCrntPMUASSTimeStamp_Type = DateAndTime
_XcvrCrntPMUASSTimeStamp_Object = MibTableColumn
xcvrCrntPMUASSTimeStamp = _XcvrCrntPMUASSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 177),
    _XcvrCrntPMUASSTimeStamp_Type()
)
xcvrCrntPMUASSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMUASSTimeStamp.setStatus("current")
_XcvrCrntPMUASSValidity_Type = PMValidity
_XcvrCrntPMUASSValidity_Object = MibTableColumn
xcvrCrntPMUASSValidity = _XcvrCrntPMUASSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 178),
    _XcvrCrntPMUASSValidity_Type()
)
xcvrCrntPMUASSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMUASSValidity.setStatus("current")
_XcvrCrntPMUASSInitialize_Type = InitializeCmd
_XcvrCrntPMUASSInitialize_Object = MibTableColumn
xcvrCrntPMUASSInitialize = _XcvrCrntPMUASSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 179),
    _XcvrCrntPMUASSInitialize_Type()
)
xcvrCrntPMUASSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMUASSInitialize.setStatus("current")
_XcvrCrntPMRSUASValue_Type = Unsigned32
_XcvrCrntPMRSUASValue_Object = MibTableColumn
xcvrCrntPMRSUASValue = _XcvrCrntPMRSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 180),
    _XcvrCrntPMRSUASValue_Type()
)
xcvrCrntPMRSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSUASValue.setStatus("current")
_XcvrCrntPMRSUASTimeStamp_Type = DateAndTime
_XcvrCrntPMRSUASTimeStamp_Object = MibTableColumn
xcvrCrntPMRSUASTimeStamp = _XcvrCrntPMRSUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 181),
    _XcvrCrntPMRSUASTimeStamp_Type()
)
xcvrCrntPMRSUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSUASTimeStamp.setStatus("current")
_XcvrCrntPMRSUASValidity_Type = PMValidity
_XcvrCrntPMRSUASValidity_Object = MibTableColumn
xcvrCrntPMRSUASValidity = _XcvrCrntPMRSUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 182),
    _XcvrCrntPMRSUASValidity_Type()
)
xcvrCrntPMRSUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMRSUASValidity.setStatus("current")
_XcvrCrntPMRSUASInitialize_Type = InitializeCmd
_XcvrCrntPMRSUASInitialize_Object = MibTableColumn
xcvrCrntPMRSUASInitialize = _XcvrCrntPMRSUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 183),
    _XcvrCrntPMRSUASInitialize_Type()
)
xcvrCrntPMRSUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMRSUASInitialize.setStatus("current")
_XcvrCrntPMUASValue_Type = Unsigned32
_XcvrCrntPMUASValue_Object = MibTableColumn
xcvrCrntPMUASValue = _XcvrCrntPMUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 184),
    _XcvrCrntPMUASValue_Type()
)
xcvrCrntPMUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMUASValue.setStatus("current")
_XcvrCrntPMUASTimeStamp_Type = DateAndTime
_XcvrCrntPMUASTimeStamp_Object = MibTableColumn
xcvrCrntPMUASTimeStamp = _XcvrCrntPMUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 185),
    _XcvrCrntPMUASTimeStamp_Type()
)
xcvrCrntPMUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMUASTimeStamp.setStatus("current")
_XcvrCrntPMUASValidity_Type = PMValidity
_XcvrCrntPMUASValidity_Object = MibTableColumn
xcvrCrntPMUASValidity = _XcvrCrntPMUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 186),
    _XcvrCrntPMUASValidity_Type()
)
xcvrCrntPMUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMUASValidity.setStatus("current")
_XcvrCrntPMUASInitialize_Type = InitializeCmd
_XcvrCrntPMUASInitialize_Object = MibTableColumn
xcvrCrntPMUASInitialize = _XcvrCrntPMUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 187),
    _XcvrCrntPMUASInitialize_Type()
)
xcvrCrntPMUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMUASInitialize.setStatus("current")
_XcvrCrntPMOTUUASValue_Type = Unsigned32
_XcvrCrntPMOTUUASValue_Object = MibTableColumn
xcvrCrntPMOTUUASValue = _XcvrCrntPMOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 188),
    _XcvrCrntPMOTUUASValue_Type()
)
xcvrCrntPMOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUUASValue.setStatus("current")
_XcvrCrntPMOTUUASTimeStamp_Type = DateAndTime
_XcvrCrntPMOTUUASTimeStamp_Object = MibTableColumn
xcvrCrntPMOTUUASTimeStamp = _XcvrCrntPMOTUUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 189),
    _XcvrCrntPMOTUUASTimeStamp_Type()
)
xcvrCrntPMOTUUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUUASTimeStamp.setStatus("current")
_XcvrCrntPMOTUUASValidity_Type = PMValidity
_XcvrCrntPMOTUUASValidity_Object = MibTableColumn
xcvrCrntPMOTUUASValidity = _XcvrCrntPMOTUUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 190),
    _XcvrCrntPMOTUUASValidity_Type()
)
xcvrCrntPMOTUUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUUASValidity.setStatus("current")
_XcvrCrntPMOTUUASInitialize_Type = InitializeCmd
_XcvrCrntPMOTUUASInitialize_Object = MibTableColumn
xcvrCrntPMOTUUASInitialize = _XcvrCrntPMOTUUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 191),
    _XcvrCrntPMOTUUASInitialize_Type()
)
xcvrCrntPMOTUUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTUUASInitialize.setStatus("current")
_XcvrCrntPMOTNBERValue_Type = DisplayString
_XcvrCrntPMOTNBERValue_Object = MibTableColumn
xcvrCrntPMOTNBERValue = _XcvrCrntPMOTNBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 192),
    _XcvrCrntPMOTNBERValue_Type()
)
xcvrCrntPMOTNBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTNBERValue.setStatus("current")
_XcvrCrntPMOTNBERTimeStamp_Type = DateAndTime
_XcvrCrntPMOTNBERTimeStamp_Object = MibTableColumn
xcvrCrntPMOTNBERTimeStamp = _XcvrCrntPMOTNBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 193),
    _XcvrCrntPMOTNBERTimeStamp_Type()
)
xcvrCrntPMOTNBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTNBERTimeStamp.setStatus("current")
_XcvrCrntPMOTNBERValidity_Type = PMValidity
_XcvrCrntPMOTNBERValidity_Object = MibTableColumn
xcvrCrntPMOTNBERValidity = _XcvrCrntPMOTNBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 194),
    _XcvrCrntPMOTNBERValidity_Type()
)
xcvrCrntPMOTNBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTNBERValidity.setStatus("current")
_XcvrCrntPMOTNBERInitialize_Type = InitializeCmd
_XcvrCrntPMOTNBERInitialize_Object = MibTableColumn
xcvrCrntPMOTNBERInitialize = _XcvrCrntPMOTNBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 195),
    _XcvrCrntPMOTNBERInitialize_Type()
)
xcvrCrntPMOTNBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTNBERInitialize.setStatus("current")
_XcvrCrntPMOTNAVGBERValue_Type = DisplayString
_XcvrCrntPMOTNAVGBERValue_Object = MibTableColumn
xcvrCrntPMOTNAVGBERValue = _XcvrCrntPMOTNAVGBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 196),
    _XcvrCrntPMOTNAVGBERValue_Type()
)
xcvrCrntPMOTNAVGBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTNAVGBERValue.setStatus("current")
_XcvrCrntPMOTNAVGBERTimeStamp_Type = DateAndTime
_XcvrCrntPMOTNAVGBERTimeStamp_Object = MibTableColumn
xcvrCrntPMOTNAVGBERTimeStamp = _XcvrCrntPMOTNAVGBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 197),
    _XcvrCrntPMOTNAVGBERTimeStamp_Type()
)
xcvrCrntPMOTNAVGBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTNAVGBERTimeStamp.setStatus("current")
_XcvrCrntPMOTNAVGBERValidity_Type = PMValidity
_XcvrCrntPMOTNAVGBERValidity_Object = MibTableColumn
xcvrCrntPMOTNAVGBERValidity = _XcvrCrntPMOTNAVGBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 198),
    _XcvrCrntPMOTNAVGBERValidity_Type()
)
xcvrCrntPMOTNAVGBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOTNAVGBERValidity.setStatus("current")
_XcvrCrntPMOTNAVGBERInitialize_Type = InitializeCmd
_XcvrCrntPMOTNAVGBERInitialize_Object = MibTableColumn
xcvrCrntPMOTNAVGBERInitialize = _XcvrCrntPMOTNAVGBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 199),
    _XcvrCrntPMOTNAVGBERInitialize_Type()
)
xcvrCrntPMOTNAVGBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOTNAVGBERInitialize.setStatus("current")
_XcvrCrntPMNBITCR64BitValue_Type = Unsigned64
_XcvrCrntPMNBITCR64BitValue_Object = MibTableColumn
xcvrCrntPMNBITCR64BitValue = _XcvrCrntPMNBITCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 200),
    _XcvrCrntPMNBITCR64BitValue_Type()
)
xcvrCrntPMNBITCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBITCR64BitValue.setStatus("current")
_XcvrCrntPMNBITCR64BitTimeStamp_Type = DateAndTime
_XcvrCrntPMNBITCR64BitTimeStamp_Object = MibTableColumn
xcvrCrntPMNBITCR64BitTimeStamp = _XcvrCrntPMNBITCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 201),
    _XcvrCrntPMNBITCR64BitTimeStamp_Type()
)
xcvrCrntPMNBITCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBITCR64BitTimeStamp.setStatus("current")
_XcvrCrntPMNBITCR64BitValidity_Type = PMValidity
_XcvrCrntPMNBITCR64BitValidity_Object = MibTableColumn
xcvrCrntPMNBITCR64BitValidity = _XcvrCrntPMNBITCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 202),
    _XcvrCrntPMNBITCR64BitValidity_Type()
)
xcvrCrntPMNBITCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBITCR64BitValidity.setStatus("current")
_XcvrCrntPMNBITCR64BitInitialize_Type = InitializeCmd
_XcvrCrntPMNBITCR64BitInitialize_Object = MibTableColumn
xcvrCrntPMNBITCR64BitInitialize = _XcvrCrntPMNBITCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 203),
    _XcvrCrntPMNBITCR64BitInitialize_Type()
)
xcvrCrntPMNBITCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMNBITCR64BitInitialize.setStatus("current")
_XcvrCrntPMNBYTCR64BitValue_Type = Unsigned64
_XcvrCrntPMNBYTCR64BitValue_Object = MibTableColumn
xcvrCrntPMNBYTCR64BitValue = _XcvrCrntPMNBYTCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 204),
    _XcvrCrntPMNBYTCR64BitValue_Type()
)
xcvrCrntPMNBYTCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBYTCR64BitValue.setStatus("current")
_XcvrCrntPMNBYTCR64BitTimeStamp_Type = DateAndTime
_XcvrCrntPMNBYTCR64BitTimeStamp_Object = MibTableColumn
xcvrCrntPMNBYTCR64BitTimeStamp = _XcvrCrntPMNBYTCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 205),
    _XcvrCrntPMNBYTCR64BitTimeStamp_Type()
)
xcvrCrntPMNBYTCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBYTCR64BitTimeStamp.setStatus("current")
_XcvrCrntPMNBYTCR64BitValidity_Type = PMValidity
_XcvrCrntPMNBYTCR64BitValidity_Object = MibTableColumn
xcvrCrntPMNBYTCR64BitValidity = _XcvrCrntPMNBYTCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 206),
    _XcvrCrntPMNBYTCR64BitValidity_Type()
)
xcvrCrntPMNBYTCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMNBYTCR64BitValidity.setStatus("current")
_XcvrCrntPMNBYTCR64BitInitialize_Type = InitializeCmd
_XcvrCrntPMNBYTCR64BitInitialize_Object = MibTableColumn
xcvrCrntPMNBYTCR64BitInitialize = _XcvrCrntPMNBYTCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 207),
    _XcvrCrntPMNBYTCR64BitInitialize_Type()
)
xcvrCrntPMNBYTCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMNBYTCR64BitInitialize.setStatus("current")
_XcvrCrntPMOPRMinValue_Type = FixedX10
_XcvrCrntPMOPRMinValue_Object = MibTableColumn
xcvrCrntPMOPRMinValue = _XcvrCrntPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 208),
    _XcvrCrntPMOPRMinValue_Type()
)
xcvrCrntPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMinValue.setUnits("dBm/10")
_XcvrCrntPMOPRMinTimeStamp_Type = DateAndTime
_XcvrCrntPMOPRMinTimeStamp_Object = MibTableColumn
xcvrCrntPMOPRMinTimeStamp = _XcvrCrntPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 209),
    _XcvrCrntPMOPRMinTimeStamp_Type()
)
xcvrCrntPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMinTimeStamp.setStatus("current")
_XcvrCrntPMOPRMinValidity_Type = PMValidity
_XcvrCrntPMOPRMinValidity_Object = MibTableColumn
xcvrCrntPMOPRMinValidity = _XcvrCrntPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 210),
    _XcvrCrntPMOPRMinValidity_Type()
)
xcvrCrntPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMinValidity.setStatus("current")
_XcvrCrntPMOPRMinInitialize_Type = InitializeCmd
_XcvrCrntPMOPRMinInitialize_Object = MibTableColumn
xcvrCrntPMOPRMinInitialize = _XcvrCrntPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 211),
    _XcvrCrntPMOPRMinInitialize_Type()
)
xcvrCrntPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMinInitialize.setStatus("current")
_XcvrCrntPMOPRMaxValue_Type = FixedX10
_XcvrCrntPMOPRMaxValue_Object = MibTableColumn
xcvrCrntPMOPRMaxValue = _XcvrCrntPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 212),
    _XcvrCrntPMOPRMaxValue_Type()
)
xcvrCrntPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMaxValue.setUnits("dBm/10")
_XcvrCrntPMOPRMaxTimeStamp_Type = DateAndTime
_XcvrCrntPMOPRMaxTimeStamp_Object = MibTableColumn
xcvrCrntPMOPRMaxTimeStamp = _XcvrCrntPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 213),
    _XcvrCrntPMOPRMaxTimeStamp_Type()
)
xcvrCrntPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMaxTimeStamp.setStatus("current")
_XcvrCrntPMOPRMaxValidity_Type = PMValidity
_XcvrCrntPMOPRMaxValidity_Object = MibTableColumn
xcvrCrntPMOPRMaxValidity = _XcvrCrntPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 214),
    _XcvrCrntPMOPRMaxValidity_Type()
)
xcvrCrntPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMaxValidity.setStatus("current")
_XcvrCrntPMOPRMaxInitialize_Type = InitializeCmd
_XcvrCrntPMOPRMaxInitialize_Object = MibTableColumn
xcvrCrntPMOPRMaxInitialize = _XcvrCrntPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 215),
    _XcvrCrntPMOPRMaxInitialize_Type()
)
xcvrCrntPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRMaxInitialize.setStatus("current")
_XcvrCrntPMOPRAvgValue_Type = FixedX10
_XcvrCrntPMOPRAvgValue_Object = MibTableColumn
xcvrCrntPMOPRAvgValue = _XcvrCrntPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 216),
    _XcvrCrntPMOPRAvgValue_Type()
)
xcvrCrntPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRAvgValue.setUnits("dBm/10")
_XcvrCrntPMOPRAvgTimeStamp_Type = DateAndTime
_XcvrCrntPMOPRAvgTimeStamp_Object = MibTableColumn
xcvrCrntPMOPRAvgTimeStamp = _XcvrCrntPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 217),
    _XcvrCrntPMOPRAvgTimeStamp_Type()
)
xcvrCrntPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRAvgTimeStamp.setStatus("current")
_XcvrCrntPMOPRAvgValidity_Type = PMValidity
_XcvrCrntPMOPRAvgValidity_Object = MibTableColumn
xcvrCrntPMOPRAvgValidity = _XcvrCrntPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 218),
    _XcvrCrntPMOPRAvgValidity_Type()
)
xcvrCrntPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRAvgValidity.setStatus("current")
_XcvrCrntPMOPRAvgInitialize_Type = InitializeCmd
_XcvrCrntPMOPRAvgInitialize_Object = MibTableColumn
xcvrCrntPMOPRAvgInitialize = _XcvrCrntPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 219),
    _XcvrCrntPMOPRAvgInitialize_Type()
)
xcvrCrntPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOPRAvgInitialize.setStatus("current")
_XcvrCrntPMOPTMinValue_Type = FixedX10
_XcvrCrntPMOPTMinValue_Object = MibTableColumn
xcvrCrntPMOPTMinValue = _XcvrCrntPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 220),
    _XcvrCrntPMOPTMinValue_Type()
)
xcvrCrntPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMinValue.setUnits("dBm/10")
_XcvrCrntPMOPTMinTimeStamp_Type = DateAndTime
_XcvrCrntPMOPTMinTimeStamp_Object = MibTableColumn
xcvrCrntPMOPTMinTimeStamp = _XcvrCrntPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 221),
    _XcvrCrntPMOPTMinTimeStamp_Type()
)
xcvrCrntPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMinTimeStamp.setStatus("current")
_XcvrCrntPMOPTMinValidity_Type = PMValidity
_XcvrCrntPMOPTMinValidity_Object = MibTableColumn
xcvrCrntPMOPTMinValidity = _XcvrCrntPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 222),
    _XcvrCrntPMOPTMinValidity_Type()
)
xcvrCrntPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMinValidity.setStatus("current")
_XcvrCrntPMOPTMinInitialize_Type = InitializeCmd
_XcvrCrntPMOPTMinInitialize_Object = MibTableColumn
xcvrCrntPMOPTMinInitialize = _XcvrCrntPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 223),
    _XcvrCrntPMOPTMinInitialize_Type()
)
xcvrCrntPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMinInitialize.setStatus("current")
_XcvrCrntPMOPTMaxValue_Type = FixedX10
_XcvrCrntPMOPTMaxValue_Object = MibTableColumn
xcvrCrntPMOPTMaxValue = _XcvrCrntPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 224),
    _XcvrCrntPMOPTMaxValue_Type()
)
xcvrCrntPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMaxValue.setUnits("dBm/10")
_XcvrCrntPMOPTMaxTimeStamp_Type = DateAndTime
_XcvrCrntPMOPTMaxTimeStamp_Object = MibTableColumn
xcvrCrntPMOPTMaxTimeStamp = _XcvrCrntPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 225),
    _XcvrCrntPMOPTMaxTimeStamp_Type()
)
xcvrCrntPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMaxTimeStamp.setStatus("current")
_XcvrCrntPMOPTMaxValidity_Type = PMValidity
_XcvrCrntPMOPTMaxValidity_Object = MibTableColumn
xcvrCrntPMOPTMaxValidity = _XcvrCrntPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 226),
    _XcvrCrntPMOPTMaxValidity_Type()
)
xcvrCrntPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMaxValidity.setStatus("current")
_XcvrCrntPMOPTMaxInitialize_Type = InitializeCmd
_XcvrCrntPMOPTMaxInitialize_Object = MibTableColumn
xcvrCrntPMOPTMaxInitialize = _XcvrCrntPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 227),
    _XcvrCrntPMOPTMaxInitialize_Type()
)
xcvrCrntPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTMaxInitialize.setStatus("current")
_XcvrCrntPMOPTAvgValue_Type = FixedX10
_XcvrCrntPMOPTAvgValue_Object = MibTableColumn
xcvrCrntPMOPTAvgValue = _XcvrCrntPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 228),
    _XcvrCrntPMOPTAvgValue_Type()
)
xcvrCrntPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTAvgValue.setUnits("dBm/10")
_XcvrCrntPMOPTAvgTimeStamp_Type = DateAndTime
_XcvrCrntPMOPTAvgTimeStamp_Object = MibTableColumn
xcvrCrntPMOPTAvgTimeStamp = _XcvrCrntPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 229),
    _XcvrCrntPMOPTAvgTimeStamp_Type()
)
xcvrCrntPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTAvgTimeStamp.setStatus("current")
_XcvrCrntPMOPTAvgValidity_Type = PMValidity
_XcvrCrntPMOPTAvgValidity_Object = MibTableColumn
xcvrCrntPMOPTAvgValidity = _XcvrCrntPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 230),
    _XcvrCrntPMOPTAvgValidity_Type()
)
xcvrCrntPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTAvgValidity.setStatus("current")
_XcvrCrntPMOPTAvgInitialize_Type = InitializeCmd
_XcvrCrntPMOPTAvgInitialize_Object = MibTableColumn
xcvrCrntPMOPTAvgInitialize = _XcvrCrntPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 231),
    _XcvrCrntPMOPTAvgInitialize_Type()
)
xcvrCrntPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrCrntPMOPTAvgInitialize.setStatus("current")
_XcvrHistPMTable_Object = MibTable
xcvrHistPMTable = _XcvrHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4)
)
if mibBuilder.loadTexts:
    xcvrHistPMTable.setStatus("current")
_XcvrHistPMEntry_Object = MibTableRow
xcvrHistPMEntry = _XcvrHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1)
)
xcvrHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "xcvrHistPMTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrHistPMIdx"),
    (0, "BTI-7000-MIB", "xcvrHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    xcvrHistPMEntry.setStatus("current")
_XcvrHistPMTypeIdx_Type = XcvrType
_XcvrHistPMTypeIdx_Object = MibTableColumn
xcvrHistPMTypeIdx = _XcvrHistPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 1),
    _XcvrHistPMTypeIdx_Type()
)
xcvrHistPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrHistPMTypeIdx.setStatus("current")


class _XcvrHistPMShelfIdx_Type(Integer32):
    """Custom type xcvrHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrHistPMShelfIdx_Type.__name__ = "Integer32"
_XcvrHistPMShelfIdx_Object = MibTableColumn
xcvrHistPMShelfIdx = _XcvrHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 2),
    _XcvrHistPMShelfIdx_Type()
)
xcvrHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrHistPMShelfIdx.setStatus("current")


class _XcvrHistPMSlotIdx_Type(Integer32):
    """Custom type xcvrHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrHistPMSlotIdx_Type.__name__ = "Integer32"
_XcvrHistPMSlotIdx_Object = MibTableColumn
xcvrHistPMSlotIdx = _XcvrHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 3),
    _XcvrHistPMSlotIdx_Type()
)
xcvrHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrHistPMSlotIdx.setStatus("current")


class _XcvrHistPMIdx_Type(Integer32):
    """Custom type xcvrHistPMIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrHistPMIdx_Type.__name__ = "Integer32"
_XcvrHistPMIdx_Object = MibTableColumn
xcvrHistPMIdx = _XcvrHistPMIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 4),
    _XcvrHistPMIdx_Type()
)
xcvrHistPMIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrHistPMIdx.setStatus("current")
_XcvrHistPMIntervalTypeIdx_Type = PMIntervalType
_XcvrHistPMIntervalTypeIdx_Object = MibTableColumn
xcvrHistPMIntervalTypeIdx = _XcvrHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 5),
    _XcvrHistPMIntervalTypeIdx_Type()
)
xcvrHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrHistPMIntervalTypeIdx.setStatus("current")


class _XcvrHistPMIntervalIdx_Type(Integer32):
    """Custom type xcvrHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_XcvrHistPMIntervalIdx_Type.__name__ = "Integer32"
_XcvrHistPMIntervalIdx_Object = MibTableColumn
xcvrHistPMIntervalIdx = _XcvrHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 6),
    _XcvrHistPMIntervalIdx_Type()
)
xcvrHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrHistPMIntervalIdx.setStatus("current")
_XcvrHistPMOPRValue_Type = FixedX10
_XcvrHistPMOPRValue_Object = MibTableColumn
xcvrHistPMOPRValue = _XcvrHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 7),
    _XcvrHistPMOPRValue_Type()
)
xcvrHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMOPRValue.setUnits("dBm/10")
_XcvrHistPMOPRTimeStamp_Type = DateAndTime
_XcvrHistPMOPRTimeStamp_Object = MibTableColumn
xcvrHistPMOPRTimeStamp = _XcvrHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 8),
    _XcvrHistPMOPRTimeStamp_Type()
)
xcvrHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRTimeStamp.setStatus("current")
_XcvrHistPMOPRValidity_Type = PMValidity
_XcvrHistPMOPRValidity_Object = MibTableColumn
xcvrHistPMOPRValidity = _XcvrHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 9),
    _XcvrHistPMOPRValidity_Type()
)
xcvrHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRValidity.setStatus("current")
_XcvrHistPMOPTValue_Type = FixedX10
_XcvrHistPMOPTValue_Object = MibTableColumn
xcvrHistPMOPTValue = _XcvrHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 10),
    _XcvrHistPMOPTValue_Type()
)
xcvrHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMOPTValue.setUnits("dBm/10")
_XcvrHistPMOPTTimeStamp_Type = DateAndTime
_XcvrHistPMOPTTimeStamp_Object = MibTableColumn
xcvrHistPMOPTTimeStamp = _XcvrHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 11),
    _XcvrHistPMOPTTimeStamp_Type()
)
xcvrHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTTimeStamp.setStatus("current")
_XcvrHistPMOPTValidity_Type = PMValidity
_XcvrHistPMOPTValidity_Object = MibTableColumn
xcvrHistPMOPTValidity = _XcvrHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 12),
    _XcvrHistPMOPTValidity_Type()
)
xcvrHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTValidity.setStatus("current")


class _XcvrHistPMTempValue_Type(Integer32):
    """Custom type xcvrHistPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_XcvrHistPMTempValue_Type.__name__ = "Integer32"
_XcvrHistPMTempValue_Object = MibTableColumn
xcvrHistPMTempValue = _XcvrHistPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 13),
    _XcvrHistPMTempValue_Type()
)
xcvrHistPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMTempValue.setUnits("degrees Celsius")
_XcvrHistPMTempTimeStamp_Type = DateAndTime
_XcvrHistPMTempTimeStamp_Object = MibTableColumn
xcvrHistPMTempTimeStamp = _XcvrHistPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 14),
    _XcvrHistPMTempTimeStamp_Type()
)
xcvrHistPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTempTimeStamp.setStatus("current")
_XcvrHistPMTempValidity_Type = PMValidity
_XcvrHistPMTempValidity_Object = MibTableColumn
xcvrHistPMTempValidity = _XcvrHistPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 15),
    _XcvrHistPMTempValidity_Type()
)
xcvrHistPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTempValidity.setStatus("current")
_XcvrHistPMSupplyVoltageValue_Type = FixedX10
_XcvrHistPMSupplyVoltageValue_Object = MibTableColumn
xcvrHistPMSupplyVoltageValue = _XcvrHistPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 16),
    _XcvrHistPMSupplyVoltageValue_Type()
)
xcvrHistPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMSupplyVoltageValue.setUnits("mVolts/10")
_XcvrHistPMSupplyVoltageTimeStamp_Type = DateAndTime
_XcvrHistPMSupplyVoltageTimeStamp_Object = MibTableColumn
xcvrHistPMSupplyVoltageTimeStamp = _XcvrHistPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 17),
    _XcvrHistPMSupplyVoltageTimeStamp_Type()
)
xcvrHistPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSupplyVoltageTimeStamp.setStatus("current")
_XcvrHistPMSupplyVoltageValidity_Type = PMValidity
_XcvrHistPMSupplyVoltageValidity_Object = MibTableColumn
xcvrHistPMSupplyVoltageValidity = _XcvrHistPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 18),
    _XcvrHistPMSupplyVoltageValidity_Type()
)
xcvrHistPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSupplyVoltageValidity.setStatus("current")


class _XcvrHistPMLBCValue_Type(Integer32):
    """Custom type xcvrHistPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_XcvrHistPMLBCValue_Type.__name__ = "Integer32"
_XcvrHistPMLBCValue_Object = MibTableColumn
xcvrHistPMLBCValue = _XcvrHistPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 19),
    _XcvrHistPMLBCValue_Type()
)
xcvrHistPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMLBCValue.setUnits("mAmp")
_XcvrHistPMLBCTimeStamp_Type = DateAndTime
_XcvrHistPMLBCTimeStamp_Object = MibTableColumn
xcvrHistPMLBCTimeStamp = _XcvrHistPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 20),
    _XcvrHistPMLBCTimeStamp_Type()
)
xcvrHistPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMLBCTimeStamp.setStatus("current")
_XcvrHistPMLBCValidity_Type = PMValidity
_XcvrHistPMLBCValidity_Object = MibTableColumn
xcvrHistPMLBCValidity = _XcvrHistPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 21),
    _XcvrHistPMLBCValidity_Type()
)
xcvrHistPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMLBCValidity.setStatus("current")
_XcvrHistPMCVSValue_Type = Unsigned32
_XcvrHistPMCVSValue_Object = MibTableColumn
xcvrHistPMCVSValue = _XcvrHistPMCVSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 22),
    _XcvrHistPMCVSValue_Type()
)
xcvrHistPMCVSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMCVSValue.setStatus("current")
_XcvrHistPMCVSTimeStamp_Type = DateAndTime
_XcvrHistPMCVSTimeStamp_Object = MibTableColumn
xcvrHistPMCVSTimeStamp = _XcvrHistPMCVSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 23),
    _XcvrHistPMCVSTimeStamp_Type()
)
xcvrHistPMCVSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMCVSTimeStamp.setStatus("current")
_XcvrHistPMCVSValidity_Type = PMValidity
_XcvrHistPMCVSValidity_Object = MibTableColumn
xcvrHistPMCVSValidity = _XcvrHistPMCVSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 24),
    _XcvrHistPMCVSValidity_Type()
)
xcvrHistPMCVSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMCVSValidity.setStatus("current")
_XcvrHistPMESSValue_Type = Unsigned32
_XcvrHistPMESSValue_Object = MibTableColumn
xcvrHistPMESSValue = _XcvrHistPMESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 25),
    _XcvrHistPMESSValue_Type()
)
xcvrHistPMESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMESSValue.setStatus("current")
_XcvrHistPMESSTimeStamp_Type = DateAndTime
_XcvrHistPMESSTimeStamp_Object = MibTableColumn
xcvrHistPMESSTimeStamp = _XcvrHistPMESSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 26),
    _XcvrHistPMESSTimeStamp_Type()
)
xcvrHistPMESSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMESSTimeStamp.setStatus("current")
_XcvrHistPMESSValidity_Type = PMValidity
_XcvrHistPMESSValidity_Object = MibTableColumn
xcvrHistPMESSValidity = _XcvrHistPMESSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 27),
    _XcvrHistPMESSValidity_Type()
)
xcvrHistPMESSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMESSValidity.setStatus("current")
_XcvrHistPMSESSValue_Type = Unsigned32
_XcvrHistPMSESSValue_Object = MibTableColumn
xcvrHistPMSESSValue = _XcvrHistPMSESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 28),
    _XcvrHistPMSESSValue_Type()
)
xcvrHistPMSESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSESSValue.setStatus("current")
_XcvrHistPMSESSTimeStamp_Type = DateAndTime
_XcvrHistPMSESSTimeStamp_Object = MibTableColumn
xcvrHistPMSESSTimeStamp = _XcvrHistPMSESSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 29),
    _XcvrHistPMSESSTimeStamp_Type()
)
xcvrHistPMSESSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSESSTimeStamp.setStatus("current")
_XcvrHistPMSESSValidity_Type = PMValidity
_XcvrHistPMSESSValidity_Object = MibTableColumn
xcvrHistPMSESSValidity = _XcvrHistPMSESSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 30),
    _XcvrHistPMSESSValidity_Type()
)
xcvrHistPMSESSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSESSValidity.setStatus("current")
_XcvrHistPMSEFSSValue_Type = Unsigned32
_XcvrHistPMSEFSSValue_Object = MibTableColumn
xcvrHistPMSEFSSValue = _XcvrHistPMSEFSSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 31),
    _XcvrHistPMSEFSSValue_Type()
)
xcvrHistPMSEFSSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSEFSSValue.setStatus("current")
_XcvrHistPMSEFSSTimeStamp_Type = DateAndTime
_XcvrHistPMSEFSSTimeStamp_Object = MibTableColumn
xcvrHistPMSEFSSTimeStamp = _XcvrHistPMSEFSSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 32),
    _XcvrHistPMSEFSSTimeStamp_Type()
)
xcvrHistPMSEFSSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSEFSSTimeStamp.setStatus("current")
_XcvrHistPMSEFSSValidity_Type = PMValidity
_XcvrHistPMSEFSSValidity_Object = MibTableColumn
xcvrHistPMSEFSSValidity = _XcvrHistPMSEFSSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 33),
    _XcvrHistPMSEFSSValidity_Type()
)
xcvrHistPMSEFSSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSEFSSValidity.setStatus("current")
_XcvrHistPMRSEBValue_Type = Unsigned32
_XcvrHistPMRSEBValue_Object = MibTableColumn
xcvrHistPMRSEBValue = _XcvrHistPMRSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 34),
    _XcvrHistPMRSEBValue_Type()
)
xcvrHistPMRSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSEBValue.setStatus("current")
_XcvrHistPMRSEBTimeStamp_Type = DateAndTime
_XcvrHistPMRSEBTimeStamp_Object = MibTableColumn
xcvrHistPMRSEBTimeStamp = _XcvrHistPMRSEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 35),
    _XcvrHistPMRSEBTimeStamp_Type()
)
xcvrHistPMRSEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSEBTimeStamp.setStatus("current")
_XcvrHistPMRSEBValidity_Type = PMValidity
_XcvrHistPMRSEBValidity_Object = MibTableColumn
xcvrHistPMRSEBValidity = _XcvrHistPMRSEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 36),
    _XcvrHistPMRSEBValidity_Type()
)
xcvrHistPMRSEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSEBValidity.setStatus("current")
_XcvrHistPMRSBBEValue_Type = Unsigned32
_XcvrHistPMRSBBEValue_Object = MibTableColumn
xcvrHistPMRSBBEValue = _XcvrHistPMRSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 37),
    _XcvrHistPMRSBBEValue_Type()
)
xcvrHistPMRSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSBBEValue.setStatus("current")
_XcvrHistPMRSBBETimeStamp_Type = DateAndTime
_XcvrHistPMRSBBETimeStamp_Object = MibTableColumn
xcvrHistPMRSBBETimeStamp = _XcvrHistPMRSBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 38),
    _XcvrHistPMRSBBETimeStamp_Type()
)
xcvrHistPMRSBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSBBETimeStamp.setStatus("current")
_XcvrHistPMRSBBEValidity_Type = PMValidity
_XcvrHistPMRSBBEValidity_Object = MibTableColumn
xcvrHistPMRSBBEValidity = _XcvrHistPMRSBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 39),
    _XcvrHistPMRSBBEValidity_Type()
)
xcvrHistPMRSBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSBBEValidity.setStatus("current")
_XcvrHistPMRSESValue_Type = Unsigned32
_XcvrHistPMRSESValue_Object = MibTableColumn
xcvrHistPMRSESValue = _XcvrHistPMRSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 40),
    _XcvrHistPMRSESValue_Type()
)
xcvrHistPMRSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSESValue.setStatus("current")
_XcvrHistPMRSESTimeStamp_Type = DateAndTime
_XcvrHistPMRSESTimeStamp_Object = MibTableColumn
xcvrHistPMRSESTimeStamp = _XcvrHistPMRSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 41),
    _XcvrHistPMRSESTimeStamp_Type()
)
xcvrHistPMRSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSESTimeStamp.setStatus("current")
_XcvrHistPMRSESValidity_Type = PMValidity
_XcvrHistPMRSESValidity_Object = MibTableColumn
xcvrHistPMRSESValidity = _XcvrHistPMRSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 42),
    _XcvrHistPMRSESValidity_Type()
)
xcvrHistPMRSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSESValidity.setStatus("current")
_XcvrHistPMRSSESValue_Type = Unsigned32
_XcvrHistPMRSSESValue_Object = MibTableColumn
xcvrHistPMRSSESValue = _XcvrHistPMRSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 43),
    _XcvrHistPMRSSESValue_Type()
)
xcvrHistPMRSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSSESValue.setStatus("current")
_XcvrHistPMRSSESTimeStamp_Type = DateAndTime
_XcvrHistPMRSSESTimeStamp_Object = MibTableColumn
xcvrHistPMRSSESTimeStamp = _XcvrHistPMRSSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 44),
    _XcvrHistPMRSSESTimeStamp_Type()
)
xcvrHistPMRSSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSSESTimeStamp.setStatus("current")
_XcvrHistPMRSSESValidity_Type = PMValidity
_XcvrHistPMRSSESValidity_Object = MibTableColumn
xcvrHistPMRSSESValidity = _XcvrHistPMRSSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 45),
    _XcvrHistPMRSSESValidity_Type()
)
xcvrHistPMRSSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSSESValidity.setStatus("current")
_XcvrHistPMRSOFSValue_Type = Unsigned32
_XcvrHistPMRSOFSValue_Object = MibTableColumn
xcvrHistPMRSOFSValue = _XcvrHistPMRSOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 46),
    _XcvrHistPMRSOFSValue_Type()
)
xcvrHistPMRSOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSOFSValue.setStatus("current")
_XcvrHistPMRSOFSTimeStamp_Type = DateAndTime
_XcvrHistPMRSOFSTimeStamp_Object = MibTableColumn
xcvrHistPMRSOFSTimeStamp = _XcvrHistPMRSOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 47),
    _XcvrHistPMRSOFSTimeStamp_Type()
)
xcvrHistPMRSOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSOFSTimeStamp.setStatus("current")
_XcvrHistPMRSOFSValidity_Type = PMValidity
_XcvrHistPMRSOFSValidity_Object = MibTableColumn
xcvrHistPMRSOFSValidity = _XcvrHistPMRSOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 48),
    _XcvrHistPMRSOFSValidity_Type()
)
xcvrHistPMRSOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSOFSValidity.setStatus("current")
_XcvrHistPMCVValue_Type = Unsigned32
_XcvrHistPMCVValue_Object = MibTableColumn
xcvrHistPMCVValue = _XcvrHistPMCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 49),
    _XcvrHistPMCVValue_Type()
)
xcvrHistPMCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMCVValue.setStatus("current")
_XcvrHistPMCVTimeStamp_Type = DateAndTime
_XcvrHistPMCVTimeStamp_Object = MibTableColumn
xcvrHistPMCVTimeStamp = _XcvrHistPMCVTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 50),
    _XcvrHistPMCVTimeStamp_Type()
)
xcvrHistPMCVTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMCVTimeStamp.setStatus("current")
_XcvrHistPMCVValidity_Type = PMValidity
_XcvrHistPMCVValidity_Object = MibTableColumn
xcvrHistPMCVValidity = _XcvrHistPMCVValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 51),
    _XcvrHistPMCVValidity_Type()
)
xcvrHistPMCVValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMCVValidity.setStatus("current")
_XcvrHistPMESValue_Type = Unsigned32
_XcvrHistPMESValue_Object = MibTableColumn
xcvrHistPMESValue = _XcvrHistPMESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 52),
    _XcvrHistPMESValue_Type()
)
xcvrHistPMESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMESValue.setStatus("current")
_XcvrHistPMESTimeStamp_Type = DateAndTime
_XcvrHistPMESTimeStamp_Object = MibTableColumn
xcvrHistPMESTimeStamp = _XcvrHistPMESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 53),
    _XcvrHistPMESTimeStamp_Type()
)
xcvrHistPMESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMESTimeStamp.setStatus("current")
_XcvrHistPMESValidity_Type = PMValidity
_XcvrHistPMESValidity_Object = MibTableColumn
xcvrHistPMESValidity = _XcvrHistPMESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 54),
    _XcvrHistPMESValidity_Type()
)
xcvrHistPMESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMESValidity.setStatus("current")
_XcvrHistPMSESValue_Type = Unsigned32
_XcvrHistPMSESValue_Object = MibTableColumn
xcvrHistPMSESValue = _XcvrHistPMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 55),
    _XcvrHistPMSESValue_Type()
)
xcvrHistPMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSESValue.setStatus("current")
_XcvrHistPMSESTimeStamp_Type = DateAndTime
_XcvrHistPMSESTimeStamp_Object = MibTableColumn
xcvrHistPMSESTimeStamp = _XcvrHistPMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 56),
    _XcvrHistPMSESTimeStamp_Type()
)
xcvrHistPMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSESTimeStamp.setStatus("current")
_XcvrHistPMSESValidity_Type = PMValidity
_XcvrHistPMSESValidity_Object = MibTableColumn
xcvrHistPMSESValidity = _XcvrHistPMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 57),
    _XcvrHistPMSESValidity_Type()
)
xcvrHistPMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSESValidity.setStatus("current")
_XcvrHistPMINVBLKValue_Type = Unsigned32
_XcvrHistPMINVBLKValue_Object = MibTableColumn
xcvrHistPMINVBLKValue = _XcvrHistPMINVBLKValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 58),
    _XcvrHistPMINVBLKValue_Type()
)
xcvrHistPMINVBLKValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMINVBLKValue.setStatus("current")
_XcvrHistPMINVBLKTimeStamp_Type = DateAndTime
_XcvrHistPMINVBLKTimeStamp_Object = MibTableColumn
xcvrHistPMINVBLKTimeStamp = _XcvrHistPMINVBLKTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 59),
    _XcvrHistPMINVBLKTimeStamp_Type()
)
xcvrHistPMINVBLKTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMINVBLKTimeStamp.setStatus("current")
_XcvrHistPMINVBLKValidity_Type = PMValidity
_XcvrHistPMINVBLKValidity_Object = MibTableColumn
xcvrHistPMINVBLKValidity = _XcvrHistPMINVBLKValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 60),
    _XcvrHistPMINVBLKValidity_Type()
)
xcvrHistPMINVBLKValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMINVBLKValidity.setStatus("current")
_XcvrHistPMNBITCRValue_Type = Unsigned32
_XcvrHistPMNBITCRValue_Object = MibTableColumn
xcvrHistPMNBITCRValue = _XcvrHistPMNBITCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 61),
    _XcvrHistPMNBITCRValue_Type()
)
xcvrHistPMNBITCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMNBITCRValue.setStatus("current")
_XcvrHistPMNBITCRTimeStamp_Type = DateAndTime
_XcvrHistPMNBITCRTimeStamp_Object = MibTableColumn
xcvrHistPMNBITCRTimeStamp = _XcvrHistPMNBITCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 62),
    _XcvrHistPMNBITCRTimeStamp_Type()
)
xcvrHistPMNBITCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBITCRTimeStamp.setStatus("current")
_XcvrHistPMNBITCRValidity_Type = PMValidity
_XcvrHistPMNBITCRValidity_Object = MibTableColumn
xcvrHistPMNBITCRValidity = _XcvrHistPMNBITCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 63),
    _XcvrHistPMNBITCRValidity_Type()
)
xcvrHistPMNBITCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBITCRValidity.setStatus("current")
_XcvrHistPMNBYTCRValue_Type = Unsigned32
_XcvrHistPMNBYTCRValue_Object = MibTableColumn
xcvrHistPMNBYTCRValue = _XcvrHistPMNBYTCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 64),
    _XcvrHistPMNBYTCRValue_Type()
)
xcvrHistPMNBYTCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMNBYTCRValue.setStatus("current")
_XcvrHistPMNBYTCRTimeStamp_Type = DateAndTime
_XcvrHistPMNBYTCRTimeStamp_Object = MibTableColumn
xcvrHistPMNBYTCRTimeStamp = _XcvrHistPMNBYTCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 65),
    _XcvrHistPMNBYTCRTimeStamp_Type()
)
xcvrHistPMNBYTCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBYTCRTimeStamp.setStatus("current")
_XcvrHistPMNBYTCRValidity_Type = PMValidity
_XcvrHistPMNBYTCRValidity_Object = MibTableColumn
xcvrHistPMNBYTCRValidity = _XcvrHistPMNBYTCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 66),
    _XcvrHistPMNBYTCRValidity_Type()
)
xcvrHistPMNBYTCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBYTCRValidity.setStatus("current")
_XcvrHistPMUNCRCDWValue_Type = Unsigned32
_XcvrHistPMUNCRCDWValue_Object = MibTableColumn
xcvrHistPMUNCRCDWValue = _XcvrHistPMUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 67),
    _XcvrHistPMUNCRCDWValue_Type()
)
xcvrHistPMUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMUNCRCDWValue.setStatus("current")
_XcvrHistPMUNCRCDWTimeStamp_Type = DateAndTime
_XcvrHistPMUNCRCDWTimeStamp_Object = MibTableColumn
xcvrHistPMUNCRCDWTimeStamp = _XcvrHistPMUNCRCDWTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 68),
    _XcvrHistPMUNCRCDWTimeStamp_Type()
)
xcvrHistPMUNCRCDWTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMUNCRCDWTimeStamp.setStatus("current")
_XcvrHistPMUNCRCDWValidity_Type = PMValidity
_XcvrHistPMUNCRCDWValidity_Object = MibTableColumn
xcvrHistPMUNCRCDWValidity = _XcvrHistPMUNCRCDWValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 69),
    _XcvrHistPMUNCRCDWValidity_Type()
)
xcvrHistPMUNCRCDWValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMUNCRCDWValidity.setStatus("current")
_XcvrHistPMTBYCRXValue_Type = Unsigned64
_XcvrHistPMTBYCRXValue_Object = MibTableColumn
xcvrHistPMTBYCRXValue = _XcvrHistPMTBYCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 70),
    _XcvrHistPMTBYCRXValue_Type()
)
xcvrHistPMTBYCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTBYCRXValue.setStatus("current")
_XcvrHistPMTBYCRXTimeStamp_Type = DateAndTime
_XcvrHistPMTBYCRXTimeStamp_Object = MibTableColumn
xcvrHistPMTBYCRXTimeStamp = _XcvrHistPMTBYCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 71),
    _XcvrHistPMTBYCRXTimeStamp_Type()
)
xcvrHistPMTBYCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTBYCRXTimeStamp.setStatus("current")
_XcvrHistPMTBYCRXValidity_Type = PMValidity
_XcvrHistPMTBYCRXValidity_Object = MibTableColumn
xcvrHistPMTBYCRXValidity = _XcvrHistPMTBYCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 72),
    _XcvrHistPMTBYCRXValidity_Type()
)
xcvrHistPMTBYCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTBYCRXValidity.setStatus("current")
_XcvrHistPMTBYCRXInitialize_Type = InitializeCmd
_XcvrHistPMTBYCRXInitialize_Object = MibTableColumn
xcvrHistPMTBYCRXInitialize = _XcvrHistPMTBYCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 73),
    _XcvrHistPMTBYCRXInitialize_Type()
)
xcvrHistPMTBYCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMTBYCRXInitialize.setStatus("current")
_XcvrHistPMTFRCRXValue_Type = Unsigned64
_XcvrHistPMTFRCRXValue_Object = MibTableColumn
xcvrHistPMTFRCRXValue = _XcvrHistPMTFRCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 74),
    _XcvrHistPMTFRCRXValue_Type()
)
xcvrHistPMTFRCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTFRCRXValue.setStatus("current")
_XcvrHistPMTFRCRXTimeStamp_Type = DateAndTime
_XcvrHistPMTFRCRXTimeStamp_Object = MibTableColumn
xcvrHistPMTFRCRXTimeStamp = _XcvrHistPMTFRCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 75),
    _XcvrHistPMTFRCRXTimeStamp_Type()
)
xcvrHistPMTFRCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTFRCRXTimeStamp.setStatus("current")
_XcvrHistPMTFRCRXValidity_Type = PMValidity
_XcvrHistPMTFRCRXValidity_Object = MibTableColumn
xcvrHistPMTFRCRXValidity = _XcvrHistPMTFRCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 76),
    _XcvrHistPMTFRCRXValidity_Type()
)
xcvrHistPMTFRCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMTFRCRXValidity.setStatus("current")
_XcvrHistPMTFRCRXInitialize_Type = InitializeCmd
_XcvrHistPMTFRCRXInitialize_Object = MibTableColumn
xcvrHistPMTFRCRXInitialize = _XcvrHistPMTFRCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 77),
    _XcvrHistPMTFRCRXInitialize_Type()
)
xcvrHistPMTFRCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMTFRCRXInitialize.setStatus("current")
_XcvrHistPMBCSTValue_Type = Unsigned64
_XcvrHistPMBCSTValue_Object = MibTableColumn
xcvrHistPMBCSTValue = _XcvrHistPMBCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 78),
    _XcvrHistPMBCSTValue_Type()
)
xcvrHistPMBCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMBCSTValue.setStatus("current")
_XcvrHistPMBCSTTimeStamp_Type = DateAndTime
_XcvrHistPMBCSTTimeStamp_Object = MibTableColumn
xcvrHistPMBCSTTimeStamp = _XcvrHistPMBCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 79),
    _XcvrHistPMBCSTTimeStamp_Type()
)
xcvrHistPMBCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMBCSTTimeStamp.setStatus("current")
_XcvrHistPMBCSTValidity_Type = PMValidity
_XcvrHistPMBCSTValidity_Object = MibTableColumn
xcvrHistPMBCSTValidity = _XcvrHistPMBCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 80),
    _XcvrHistPMBCSTValidity_Type()
)
xcvrHistPMBCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMBCSTValidity.setStatus("current")
_XcvrHistPMBCSTInitialize_Type = InitializeCmd
_XcvrHistPMBCSTInitialize_Object = MibTableColumn
xcvrHistPMBCSTInitialize = _XcvrHistPMBCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 81),
    _XcvrHistPMBCSTInitialize_Type()
)
xcvrHistPMBCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMBCSTInitialize.setStatus("current")
_XcvrHistPMMCSTValue_Type = Unsigned64
_XcvrHistPMMCSTValue_Object = MibTableColumn
xcvrHistPMMCSTValue = _XcvrHistPMMCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 82),
    _XcvrHistPMMCSTValue_Type()
)
xcvrHistPMMCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMMCSTValue.setStatus("current")
_XcvrHistPMMCSTTimeStamp_Type = DateAndTime
_XcvrHistPMMCSTTimeStamp_Object = MibTableColumn
xcvrHistPMMCSTTimeStamp = _XcvrHistPMMCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 83),
    _XcvrHistPMMCSTTimeStamp_Type()
)
xcvrHistPMMCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMMCSTTimeStamp.setStatus("current")
_XcvrHistPMMCSTValidity_Type = PMValidity
_XcvrHistPMMCSTValidity_Object = MibTableColumn
xcvrHistPMMCSTValidity = _XcvrHistPMMCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 84),
    _XcvrHistPMMCSTValidity_Type()
)
xcvrHistPMMCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMMCSTValidity.setStatus("current")
_XcvrHistPMMCSTInitialize_Type = InitializeCmd
_XcvrHistPMMCSTInitialize_Object = MibTableColumn
xcvrHistPMMCSTInitialize = _XcvrHistPMMCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 85),
    _XcvrHistPMMCSTInitialize_Type()
)
xcvrHistPMMCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMMCSTInitialize.setStatus("current")
_XcvrHistPMSIZE64Value_Type = Unsigned64
_XcvrHistPMSIZE64Value_Object = MibTableColumn
xcvrHistPMSIZE64Value = _XcvrHistPMSIZE64Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 86),
    _XcvrHistPMSIZE64Value_Type()
)
xcvrHistPMSIZE64Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE64Value.setStatus("current")
_XcvrHistPMSIZE64TimeStamp_Type = DateAndTime
_XcvrHistPMSIZE64TimeStamp_Object = MibTableColumn
xcvrHistPMSIZE64TimeStamp = _XcvrHistPMSIZE64TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 87),
    _XcvrHistPMSIZE64TimeStamp_Type()
)
xcvrHistPMSIZE64TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE64TimeStamp.setStatus("current")
_XcvrHistPMSIZE64Validity_Type = PMValidity
_XcvrHistPMSIZE64Validity_Object = MibTableColumn
xcvrHistPMSIZE64Validity = _XcvrHistPMSIZE64Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 88),
    _XcvrHistPMSIZE64Validity_Type()
)
xcvrHistPMSIZE64Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE64Validity.setStatus("current")
_XcvrHistPMSIZE64Initialize_Type = InitializeCmd
_XcvrHistPMSIZE64Initialize_Object = MibTableColumn
xcvrHistPMSIZE64Initialize = _XcvrHistPMSIZE64Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 89),
    _XcvrHistPMSIZE64Initialize_Type()
)
xcvrHistPMSIZE64Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE64Initialize.setStatus("current")
_XcvrHistPMSIZE65To127Value_Type = Unsigned64
_XcvrHistPMSIZE65To127Value_Object = MibTableColumn
xcvrHistPMSIZE65To127Value = _XcvrHistPMSIZE65To127Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 90),
    _XcvrHistPMSIZE65To127Value_Type()
)
xcvrHistPMSIZE65To127Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE65To127Value.setStatus("current")
_XcvrHistPMSIZE65To127TimeStamp_Type = DateAndTime
_XcvrHistPMSIZE65To127TimeStamp_Object = MibTableColumn
xcvrHistPMSIZE65To127TimeStamp = _XcvrHistPMSIZE65To127TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 91),
    _XcvrHistPMSIZE65To127TimeStamp_Type()
)
xcvrHistPMSIZE65To127TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE65To127TimeStamp.setStatus("current")
_XcvrHistPMSIZE65To127Validity_Type = PMValidity
_XcvrHistPMSIZE65To127Validity_Object = MibTableColumn
xcvrHistPMSIZE65To127Validity = _XcvrHistPMSIZE65To127Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 92),
    _XcvrHistPMSIZE65To127Validity_Type()
)
xcvrHistPMSIZE65To127Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE65To127Validity.setStatus("current")
_XcvrHistPMSIZE65To127Initialize_Type = InitializeCmd
_XcvrHistPMSIZE65To127Initialize_Object = MibTableColumn
xcvrHistPMSIZE65To127Initialize = _XcvrHistPMSIZE65To127Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 93),
    _XcvrHistPMSIZE65To127Initialize_Type()
)
xcvrHistPMSIZE65To127Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE65To127Initialize.setStatus("current")
_XcvrHistPMSIZE128To255Value_Type = Unsigned64
_XcvrHistPMSIZE128To255Value_Object = MibTableColumn
xcvrHistPMSIZE128To255Value = _XcvrHistPMSIZE128To255Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 94),
    _XcvrHistPMSIZE128To255Value_Type()
)
xcvrHistPMSIZE128To255Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE128To255Value.setStatus("current")
_XcvrHistPMSIZE128To255TimeStamp_Type = DateAndTime
_XcvrHistPMSIZE128To255TimeStamp_Object = MibTableColumn
xcvrHistPMSIZE128To255TimeStamp = _XcvrHistPMSIZE128To255TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 95),
    _XcvrHistPMSIZE128To255TimeStamp_Type()
)
xcvrHistPMSIZE128To255TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE128To255TimeStamp.setStatus("current")
_XcvrHistPMSIZE128To255Validity_Type = PMValidity
_XcvrHistPMSIZE128To255Validity_Object = MibTableColumn
xcvrHistPMSIZE128To255Validity = _XcvrHistPMSIZE128To255Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 96),
    _XcvrHistPMSIZE128To255Validity_Type()
)
xcvrHistPMSIZE128To255Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE128To255Validity.setStatus("current")
_XcvrHistPMSIZE128To255Initialize_Type = InitializeCmd
_XcvrHistPMSIZE128To255Initialize_Object = MibTableColumn
xcvrHistPMSIZE128To255Initialize = _XcvrHistPMSIZE128To255Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 97),
    _XcvrHistPMSIZE128To255Initialize_Type()
)
xcvrHistPMSIZE128To255Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE128To255Initialize.setStatus("current")
_XcvrHistPMSIZE256To511Value_Type = Unsigned64
_XcvrHistPMSIZE256To511Value_Object = MibTableColumn
xcvrHistPMSIZE256To511Value = _XcvrHistPMSIZE256To511Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 98),
    _XcvrHistPMSIZE256To511Value_Type()
)
xcvrHistPMSIZE256To511Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE256To511Value.setStatus("current")
_XcvrHistPMSIZE256To511TimeStamp_Type = DateAndTime
_XcvrHistPMSIZE256To511TimeStamp_Object = MibTableColumn
xcvrHistPMSIZE256To511TimeStamp = _XcvrHistPMSIZE256To511TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 99),
    _XcvrHistPMSIZE256To511TimeStamp_Type()
)
xcvrHistPMSIZE256To511TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE256To511TimeStamp.setStatus("current")
_XcvrHistPMSIZE256To511Validity_Type = PMValidity
_XcvrHistPMSIZE256To511Validity_Object = MibTableColumn
xcvrHistPMSIZE256To511Validity = _XcvrHistPMSIZE256To511Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 100),
    _XcvrHistPMSIZE256To511Validity_Type()
)
xcvrHistPMSIZE256To511Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE256To511Validity.setStatus("current")
_XcvrHistPMSIZE256To511Initialize_Type = InitializeCmd
_XcvrHistPMSIZE256To511Initialize_Object = MibTableColumn
xcvrHistPMSIZE256To511Initialize = _XcvrHistPMSIZE256To511Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 101),
    _XcvrHistPMSIZE256To511Initialize_Type()
)
xcvrHistPMSIZE256To511Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE256To511Initialize.setStatus("current")
_XcvrHistPMSIZE512To1023Value_Type = Unsigned64
_XcvrHistPMSIZE512To1023Value_Object = MibTableColumn
xcvrHistPMSIZE512To1023Value = _XcvrHistPMSIZE512To1023Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 102),
    _XcvrHistPMSIZE512To1023Value_Type()
)
xcvrHistPMSIZE512To1023Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE512To1023Value.setStatus("current")
_XcvrHistPMSIZE512To1023TimeStamp_Type = DateAndTime
_XcvrHistPMSIZE512To1023TimeStamp_Object = MibTableColumn
xcvrHistPMSIZE512To1023TimeStamp = _XcvrHistPMSIZE512To1023TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 103),
    _XcvrHistPMSIZE512To1023TimeStamp_Type()
)
xcvrHistPMSIZE512To1023TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE512To1023TimeStamp.setStatus("current")
_XcvrHistPMSIZE512To1023Validity_Type = PMValidity
_XcvrHistPMSIZE512To1023Validity_Object = MibTableColumn
xcvrHistPMSIZE512To1023Validity = _XcvrHistPMSIZE512To1023Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 104),
    _XcvrHistPMSIZE512To1023Validity_Type()
)
xcvrHistPMSIZE512To1023Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE512To1023Validity.setStatus("current")
_XcvrHistPMSIZE512To1023Initialize_Type = InitializeCmd
_XcvrHistPMSIZE512To1023Initialize_Object = MibTableColumn
xcvrHistPMSIZE512To1023Initialize = _XcvrHistPMSIZE512To1023Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 105),
    _XcvrHistPMSIZE512To1023Initialize_Type()
)
xcvrHistPMSIZE512To1023Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE512To1023Initialize.setStatus("current")
_XcvrHistPMSIZE1024To1518Value_Type = Unsigned64
_XcvrHistPMSIZE1024To1518Value_Object = MibTableColumn
xcvrHistPMSIZE1024To1518Value = _XcvrHistPMSIZE1024To1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 106),
    _XcvrHistPMSIZE1024To1518Value_Type()
)
xcvrHistPMSIZE1024To1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE1024To1518Value.setStatus("current")
_XcvrHistPMSIZE1024To1518TimeStamp_Type = DateAndTime
_XcvrHistPMSIZE1024To1518TimeStamp_Object = MibTableColumn
xcvrHistPMSIZE1024To1518TimeStamp = _XcvrHistPMSIZE1024To1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 107),
    _XcvrHistPMSIZE1024To1518TimeStamp_Type()
)
xcvrHistPMSIZE1024To1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE1024To1518TimeStamp.setStatus("current")
_XcvrHistPMSIZE1024To1518Validity_Type = PMValidity
_XcvrHistPMSIZE1024To1518Validity_Object = MibTableColumn
xcvrHistPMSIZE1024To1518Validity = _XcvrHistPMSIZE1024To1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 108),
    _XcvrHistPMSIZE1024To1518Validity_Type()
)
xcvrHistPMSIZE1024To1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE1024To1518Validity.setStatus("current")
_XcvrHistPMSIZE1024To1518Initialize_Type = InitializeCmd
_XcvrHistPMSIZE1024To1518Initialize_Object = MibTableColumn
xcvrHistPMSIZE1024To1518Initialize = _XcvrHistPMSIZE1024To1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 109),
    _XcvrHistPMSIZE1024To1518Initialize_Type()
)
xcvrHistPMSIZE1024To1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSIZE1024To1518Initialize.setStatus("current")
_XcvrHistPMSIZEOver1518Value_Type = Unsigned64
_XcvrHistPMSIZEOver1518Value_Object = MibTableColumn
xcvrHistPMSIZEOver1518Value = _XcvrHistPMSIZEOver1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 110),
    _XcvrHistPMSIZEOver1518Value_Type()
)
xcvrHistPMSIZEOver1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZEOver1518Value.setStatus("current")
_XcvrHistPMSIZEOver1518TimeStamp_Type = DateAndTime
_XcvrHistPMSIZEOver1518TimeStamp_Object = MibTableColumn
xcvrHistPMSIZEOver1518TimeStamp = _XcvrHistPMSIZEOver1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 111),
    _XcvrHistPMSIZEOver1518TimeStamp_Type()
)
xcvrHistPMSIZEOver1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZEOver1518TimeStamp.setStatus("current")
_XcvrHistPMSIZEOver1518Validity_Type = PMValidity
_XcvrHistPMSIZEOver1518Validity_Object = MibTableColumn
xcvrHistPMSIZEOver1518Validity = _XcvrHistPMSIZEOver1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 112),
    _XcvrHistPMSIZEOver1518Validity_Type()
)
xcvrHistPMSIZEOver1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSIZEOver1518Validity.setStatus("current")
_XcvrHistPMSIZEOver1518Initialize_Type = InitializeCmd
_XcvrHistPMSIZEOver1518Initialize_Object = MibTableColumn
xcvrHistPMSIZEOver1518Initialize = _XcvrHistPMSIZEOver1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 113),
    _XcvrHistPMSIZEOver1518Initialize_Type()
)
xcvrHistPMSIZEOver1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSIZEOver1518Initialize.setStatus("current")
_XcvrHistPMFCSEValue_Type = Unsigned32
_XcvrHistPMFCSEValue_Object = MibTableColumn
xcvrHistPMFCSEValue = _XcvrHistPMFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 114),
    _XcvrHistPMFCSEValue_Type()
)
xcvrHistPMFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMFCSEValue.setStatus("current")
_XcvrHistPMFCSETimeStamp_Type = DateAndTime
_XcvrHistPMFCSETimeStamp_Object = MibTableColumn
xcvrHistPMFCSETimeStamp = _XcvrHistPMFCSETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 115),
    _XcvrHistPMFCSETimeStamp_Type()
)
xcvrHistPMFCSETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMFCSETimeStamp.setStatus("current")
_XcvrHistPMFCSEValidity_Type = PMValidity
_XcvrHistPMFCSEValidity_Object = MibTableColumn
xcvrHistPMFCSEValidity = _XcvrHistPMFCSEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 116),
    _XcvrHistPMFCSEValidity_Type()
)
xcvrHistPMFCSEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMFCSEValidity.setStatus("current")
_XcvrHistPMFRDRValue_Type = Unsigned32
_XcvrHistPMFRDRValue_Object = MibTableColumn
xcvrHistPMFRDRValue = _XcvrHistPMFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 117),
    _XcvrHistPMFRDRValue_Type()
)
xcvrHistPMFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMFRDRValue.setStatus("current")
_XcvrHistPMFRDRTimeStamp_Type = DateAndTime
_XcvrHistPMFRDRTimeStamp_Object = MibTableColumn
xcvrHistPMFRDRTimeStamp = _XcvrHistPMFRDRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 118),
    _XcvrHistPMFRDRTimeStamp_Type()
)
xcvrHistPMFRDRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMFRDRTimeStamp.setStatus("current")
_XcvrHistPMFRDRValidity_Type = PMValidity
_XcvrHistPMFRDRValidity_Object = MibTableColumn
xcvrHistPMFRDRValidity = _XcvrHistPMFRDRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 119),
    _XcvrHistPMFRDRValidity_Type()
)
xcvrHistPMFRDRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMFRDRValidity.setStatus("current")
_XcvrHistPMUSIZEValue_Type = Unsigned32
_XcvrHistPMUSIZEValue_Object = MibTableColumn
xcvrHistPMUSIZEValue = _XcvrHistPMUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 120),
    _XcvrHistPMUSIZEValue_Type()
)
xcvrHistPMUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMUSIZEValue.setStatus("current")
_XcvrHistPMUSIZETimeStamp_Type = DateAndTime
_XcvrHistPMUSIZETimeStamp_Object = MibTableColumn
xcvrHistPMUSIZETimeStamp = _XcvrHistPMUSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 121),
    _XcvrHistPMUSIZETimeStamp_Type()
)
xcvrHistPMUSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMUSIZETimeStamp.setStatus("current")
_XcvrHistPMUSIZEValidity_Type = PMValidity
_XcvrHistPMUSIZEValidity_Object = MibTableColumn
xcvrHistPMUSIZEValidity = _XcvrHistPMUSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 122),
    _XcvrHistPMUSIZEValidity_Type()
)
xcvrHistPMUSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMUSIZEValidity.setStatus("current")
_XcvrHistPMOSIZEValue_Type = Unsigned32
_XcvrHistPMOSIZEValue_Object = MibTableColumn
xcvrHistPMOSIZEValue = _XcvrHistPMOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 123),
    _XcvrHistPMOSIZEValue_Type()
)
xcvrHistPMOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOSIZEValue.setStatus("current")
_XcvrHistPMOSIZETimeStamp_Type = DateAndTime
_XcvrHistPMOSIZETimeStamp_Object = MibTableColumn
xcvrHistPMOSIZETimeStamp = _XcvrHistPMOSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 124),
    _XcvrHistPMOSIZETimeStamp_Type()
)
xcvrHistPMOSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOSIZETimeStamp.setStatus("current")
_XcvrHistPMOSIZEValidity_Type = PMValidity
_XcvrHistPMOSIZEValidity_Object = MibTableColumn
xcvrHistPMOSIZEValidity = _XcvrHistPMOSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 125),
    _XcvrHistPMOSIZEValidity_Type()
)
xcvrHistPMOSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOSIZEValidity.setStatus("current")
_XcvrHistPMFRGTValue_Type = Unsigned32
_XcvrHistPMFRGTValue_Object = MibTableColumn
xcvrHistPMFRGTValue = _XcvrHistPMFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 126),
    _XcvrHistPMFRGTValue_Type()
)
xcvrHistPMFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMFRGTValue.setStatus("current")
_XcvrHistPMFRGTTimeStamp_Type = DateAndTime
_XcvrHistPMFRGTTimeStamp_Object = MibTableColumn
xcvrHistPMFRGTTimeStamp = _XcvrHistPMFRGTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 127),
    _XcvrHistPMFRGTTimeStamp_Type()
)
xcvrHistPMFRGTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMFRGTTimeStamp.setStatus("current")
_XcvrHistPMFRGTValidity_Type = PMValidity
_XcvrHistPMFRGTValidity_Object = MibTableColumn
xcvrHistPMFRGTValidity = _XcvrHistPMFRGTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 128),
    _XcvrHistPMFRGTValidity_Type()
)
xcvrHistPMFRGTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMFRGTValidity.setStatus("current")
_XcvrHistPMJABRValue_Type = Unsigned32
_XcvrHistPMJABRValue_Object = MibTableColumn
xcvrHistPMJABRValue = _XcvrHistPMJABRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 129),
    _XcvrHistPMJABRValue_Type()
)
xcvrHistPMJABRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMJABRValue.setStatus("current")
_XcvrHistPMJABRTimeStamp_Type = DateAndTime
_XcvrHistPMJABRTimeStamp_Object = MibTableColumn
xcvrHistPMJABRTimeStamp = _XcvrHistPMJABRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 130),
    _XcvrHistPMJABRTimeStamp_Type()
)
xcvrHistPMJABRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMJABRTimeStamp.setStatus("current")
_XcvrHistPMJABRValidity_Type = PMValidity
_XcvrHistPMJABRValidity_Object = MibTableColumn
xcvrHistPMJABRValidity = _XcvrHistPMJABRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 131),
    _XcvrHistPMJABRValidity_Type()
)
xcvrHistPMJABRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMJABRValidity.setStatus("current")
_XcvrHistPMOTUEBValue_Type = Unsigned32
_XcvrHistPMOTUEBValue_Object = MibTableColumn
xcvrHistPMOTUEBValue = _XcvrHistPMOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 132),
    _XcvrHistPMOTUEBValue_Type()
)
xcvrHistPMOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUEBValue.setStatus("current")
_XcvrHistPMOTUEBTimeStamp_Type = DateAndTime
_XcvrHistPMOTUEBTimeStamp_Object = MibTableColumn
xcvrHistPMOTUEBTimeStamp = _XcvrHistPMOTUEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 133),
    _XcvrHistPMOTUEBTimeStamp_Type()
)
xcvrHistPMOTUEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUEBTimeStamp.setStatus("current")
_XcvrHistPMOTUEBValidity_Type = PMValidity
_XcvrHistPMOTUEBValidity_Object = MibTableColumn
xcvrHistPMOTUEBValidity = _XcvrHistPMOTUEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 134),
    _XcvrHistPMOTUEBValidity_Type()
)
xcvrHistPMOTUEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUEBValidity.setStatus("current")
_XcvrHistPMOTUBBEValue_Type = Unsigned32
_XcvrHistPMOTUBBEValue_Object = MibTableColumn
xcvrHistPMOTUBBEValue = _XcvrHistPMOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 135),
    _XcvrHistPMOTUBBEValue_Type()
)
xcvrHistPMOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUBBEValue.setStatus("current")
_XcvrHistPMOTUBBETimeStamp_Type = DateAndTime
_XcvrHistPMOTUBBETimeStamp_Object = MibTableColumn
xcvrHistPMOTUBBETimeStamp = _XcvrHistPMOTUBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 136),
    _XcvrHistPMOTUBBETimeStamp_Type()
)
xcvrHistPMOTUBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUBBETimeStamp.setStatus("current")
_XcvrHistPMOTUBBEValidity_Type = PMValidity
_XcvrHistPMOTUBBEValidity_Object = MibTableColumn
xcvrHistPMOTUBBEValidity = _XcvrHistPMOTUBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 137),
    _XcvrHistPMOTUBBEValidity_Type()
)
xcvrHistPMOTUBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUBBEValidity.setStatus("current")
_XcvrHistPMOTUESValue_Type = Unsigned32
_XcvrHistPMOTUESValue_Object = MibTableColumn
xcvrHistPMOTUESValue = _XcvrHistPMOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 138),
    _XcvrHistPMOTUESValue_Type()
)
xcvrHistPMOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUESValue.setStatus("current")
_XcvrHistPMOTUESTimeStamp_Type = DateAndTime
_XcvrHistPMOTUESTimeStamp_Object = MibTableColumn
xcvrHistPMOTUESTimeStamp = _XcvrHistPMOTUESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 139),
    _XcvrHistPMOTUESTimeStamp_Type()
)
xcvrHistPMOTUESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUESTimeStamp.setStatus("current")
_XcvrHistPMOTUESValidity_Type = PMValidity
_XcvrHistPMOTUESValidity_Object = MibTableColumn
xcvrHistPMOTUESValidity = _XcvrHistPMOTUESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 140),
    _XcvrHistPMOTUESValidity_Type()
)
xcvrHistPMOTUESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUESValidity.setStatus("current")
_XcvrHistPMOTUSESValue_Type = Unsigned32
_XcvrHistPMOTUSESValue_Object = MibTableColumn
xcvrHistPMOTUSESValue = _XcvrHistPMOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 141),
    _XcvrHistPMOTUSESValue_Type()
)
xcvrHistPMOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUSESValue.setStatus("current")
_XcvrHistPMOTUSESTimeStamp_Type = DateAndTime
_XcvrHistPMOTUSESTimeStamp_Object = MibTableColumn
xcvrHistPMOTUSESTimeStamp = _XcvrHistPMOTUSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 142),
    _XcvrHistPMOTUSESTimeStamp_Type()
)
xcvrHistPMOTUSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUSESTimeStamp.setStatus("current")
_XcvrHistPMOTUSESValidity_Type = PMValidity
_XcvrHistPMOTUSESValidity_Object = MibTableColumn
xcvrHistPMOTUSESValidity = _XcvrHistPMOTUSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 143),
    _XcvrHistPMOTUSESValidity_Type()
)
xcvrHistPMOTUSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUSESValidity.setStatus("current")
_XcvrHistPMOTUOFSValue_Type = Unsigned32
_XcvrHistPMOTUOFSValue_Object = MibTableColumn
xcvrHistPMOTUOFSValue = _XcvrHistPMOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 144),
    _XcvrHistPMOTUOFSValue_Type()
)
xcvrHistPMOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUOFSValue.setStatus("current")
_XcvrHistPMOTUOFSTimeStamp_Type = DateAndTime
_XcvrHistPMOTUOFSTimeStamp_Object = MibTableColumn
xcvrHistPMOTUOFSTimeStamp = _XcvrHistPMOTUOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 145),
    _XcvrHistPMOTUOFSTimeStamp_Type()
)
xcvrHistPMOTUOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUOFSTimeStamp.setStatus("current")
_XcvrHistPMOTUOFSValidity_Type = PMValidity
_XcvrHistPMOTUOFSValidity_Object = MibTableColumn
xcvrHistPMOTUOFSValidity = _XcvrHistPMOTUOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 146),
    _XcvrHistPMOTUOFSValidity_Type()
)
xcvrHistPMOTUOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUOFSValidity.setStatus("current")
_XcvrHistPMSupplyVoltage2Value_Type = FixedX10
_XcvrHistPMSupplyVoltage2Value_Object = MibTableColumn
xcvrHistPMSupplyVoltage2Value = _XcvrHistPMSupplyVoltage2Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 147),
    _XcvrHistPMSupplyVoltage2Value_Type()
)
xcvrHistPMSupplyVoltage2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSupplyVoltage2Value.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMSupplyVoltage2Value.setUnits("mVolts/10")
_XcvrHistPMSupplyVoltage2TimeStamp_Type = DateAndTime
_XcvrHistPMSupplyVoltage2TimeStamp_Object = MibTableColumn
xcvrHistPMSupplyVoltage2TimeStamp = _XcvrHistPMSupplyVoltage2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 148),
    _XcvrHistPMSupplyVoltage2TimeStamp_Type()
)
xcvrHistPMSupplyVoltage2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSupplyVoltage2TimeStamp.setStatus("current")
_XcvrHistPMSupplyVoltage2Validity_Type = PMValidity
_XcvrHistPMSupplyVoltage2Validity_Object = MibTableColumn
xcvrHistPMSupplyVoltage2Validity = _XcvrHistPMSupplyVoltage2Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 149),
    _XcvrHistPMSupplyVoltage2Validity_Type()
)
xcvrHistPMSupplyVoltage2Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMSupplyVoltage2Validity.setStatus("current")
_XcvrHistPMCVSInitialize_Type = InitializeCmd
_XcvrHistPMCVSInitialize_Object = MibTableColumn
xcvrHistPMCVSInitialize = _XcvrHistPMCVSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 150),
    _XcvrHistPMCVSInitialize_Type()
)
xcvrHistPMCVSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMCVSInitialize.setStatus("current")
_XcvrHistPMESSInitialize_Type = InitializeCmd
_XcvrHistPMESSInitialize_Object = MibTableColumn
xcvrHistPMESSInitialize = _XcvrHistPMESSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 151),
    _XcvrHistPMESSInitialize_Type()
)
xcvrHistPMESSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMESSInitialize.setStatus("current")
_XcvrHistPMSESSInitialize_Type = InitializeCmd
_XcvrHistPMSESSInitialize_Object = MibTableColumn
xcvrHistPMSESSInitialize = _XcvrHistPMSESSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 152),
    _XcvrHistPMSESSInitialize_Type()
)
xcvrHistPMSESSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSESSInitialize.setStatus("current")
_XcvrHistPMSEFSSInitialize_Type = InitializeCmd
_XcvrHistPMSEFSSInitialize_Object = MibTableColumn
xcvrHistPMSEFSSInitialize = _XcvrHistPMSEFSSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 153),
    _XcvrHistPMSEFSSInitialize_Type()
)
xcvrHistPMSEFSSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSEFSSInitialize.setStatus("current")
_XcvrHistPMRSEBInitialize_Type = InitializeCmd
_XcvrHistPMRSEBInitialize_Object = MibTableColumn
xcvrHistPMRSEBInitialize = _XcvrHistPMRSEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 154),
    _XcvrHistPMRSEBInitialize_Type()
)
xcvrHistPMRSEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSEBInitialize.setStatus("current")
_XcvrHistPMRSBBEInitialize_Type = InitializeCmd
_XcvrHistPMRSBBEInitialize_Object = MibTableColumn
xcvrHistPMRSBBEInitialize = _XcvrHistPMRSBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 155),
    _XcvrHistPMRSBBEInitialize_Type()
)
xcvrHistPMRSBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSBBEInitialize.setStatus("current")
_XcvrHistPMRSESInitialize_Type = InitializeCmd
_XcvrHistPMRSESInitialize_Object = MibTableColumn
xcvrHistPMRSESInitialize = _XcvrHistPMRSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 156),
    _XcvrHistPMRSESInitialize_Type()
)
xcvrHistPMRSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSESInitialize.setStatus("current")
_XcvrHistPMRSSESInitialize_Type = InitializeCmd
_XcvrHistPMRSSESInitialize_Object = MibTableColumn
xcvrHistPMRSSESInitialize = _XcvrHistPMRSSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 157),
    _XcvrHistPMRSSESInitialize_Type()
)
xcvrHistPMRSSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSSESInitialize.setStatus("current")
_XcvrHistPMRSOFSInitialize_Type = InitializeCmd
_XcvrHistPMRSOFSInitialize_Object = MibTableColumn
xcvrHistPMRSOFSInitialize = _XcvrHistPMRSOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 158),
    _XcvrHistPMRSOFSInitialize_Type()
)
xcvrHistPMRSOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSOFSInitialize.setStatus("current")
_XcvrHistPMCVInitialize_Type = InitializeCmd
_XcvrHistPMCVInitialize_Object = MibTableColumn
xcvrHistPMCVInitialize = _XcvrHistPMCVInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 159),
    _XcvrHistPMCVInitialize_Type()
)
xcvrHistPMCVInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMCVInitialize.setStatus("current")
_XcvrHistPMESInitialize_Type = InitializeCmd
_XcvrHistPMESInitialize_Object = MibTableColumn
xcvrHistPMESInitialize = _XcvrHistPMESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 160),
    _XcvrHistPMESInitialize_Type()
)
xcvrHistPMESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMESInitialize.setStatus("current")
_XcvrHistPMSESInitialize_Type = InitializeCmd
_XcvrHistPMSESInitialize_Object = MibTableColumn
xcvrHistPMSESInitialize = _XcvrHistPMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 161),
    _XcvrHistPMSESInitialize_Type()
)
xcvrHistPMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMSESInitialize.setStatus("current")
_XcvrHistPMINVBLKInitialize_Type = InitializeCmd
_XcvrHistPMINVBLKInitialize_Object = MibTableColumn
xcvrHistPMINVBLKInitialize = _XcvrHistPMINVBLKInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 162),
    _XcvrHistPMINVBLKInitialize_Type()
)
xcvrHistPMINVBLKInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMINVBLKInitialize.setStatus("current")
_XcvrHistPMNBITCRInitialize_Type = InitializeCmd
_XcvrHistPMNBITCRInitialize_Object = MibTableColumn
xcvrHistPMNBITCRInitialize = _XcvrHistPMNBITCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 163),
    _XcvrHistPMNBITCRInitialize_Type()
)
xcvrHistPMNBITCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMNBITCRInitialize.setStatus("current")
_XcvrHistPMNBYTCRInitialize_Type = InitializeCmd
_XcvrHistPMNBYTCRInitialize_Object = MibTableColumn
xcvrHistPMNBYTCRInitialize = _XcvrHistPMNBYTCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 164),
    _XcvrHistPMNBYTCRInitialize_Type()
)
xcvrHistPMNBYTCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMNBYTCRInitialize.setStatus("current")
_XcvrHistPMUNCRCDWInitialize_Type = InitializeCmd
_XcvrHistPMUNCRCDWInitialize_Object = MibTableColumn
xcvrHistPMUNCRCDWInitialize = _XcvrHistPMUNCRCDWInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 165),
    _XcvrHistPMUNCRCDWInitialize_Type()
)
xcvrHistPMUNCRCDWInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMUNCRCDWInitialize.setStatus("current")
_XcvrHistPMFCSEInitialize_Type = InitializeCmd
_XcvrHistPMFCSEInitialize_Object = MibTableColumn
xcvrHistPMFCSEInitialize = _XcvrHistPMFCSEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 166),
    _XcvrHistPMFCSEInitialize_Type()
)
xcvrHistPMFCSEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMFCSEInitialize.setStatus("current")
_XcvrHistPMFRDRInitialize_Type = InitializeCmd
_XcvrHistPMFRDRInitialize_Object = MibTableColumn
xcvrHistPMFRDRInitialize = _XcvrHistPMFRDRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 167),
    _XcvrHistPMFRDRInitialize_Type()
)
xcvrHistPMFRDRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMFRDRInitialize.setStatus("current")
_XcvrHistPMUSIZEInitialize_Type = InitializeCmd
_XcvrHistPMUSIZEInitialize_Object = MibTableColumn
xcvrHistPMUSIZEInitialize = _XcvrHistPMUSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 168),
    _XcvrHistPMUSIZEInitialize_Type()
)
xcvrHistPMUSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMUSIZEInitialize.setStatus("current")
_XcvrHistPMOSIZEInitialize_Type = InitializeCmd
_XcvrHistPMOSIZEInitialize_Object = MibTableColumn
xcvrHistPMOSIZEInitialize = _XcvrHistPMOSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 169),
    _XcvrHistPMOSIZEInitialize_Type()
)
xcvrHistPMOSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOSIZEInitialize.setStatus("current")
_XcvrHistPMFRGTInitialize_Type = InitializeCmd
_XcvrHistPMFRGTInitialize_Object = MibTableColumn
xcvrHistPMFRGTInitialize = _XcvrHistPMFRGTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 170),
    _XcvrHistPMFRGTInitialize_Type()
)
xcvrHistPMFRGTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMFRGTInitialize.setStatus("current")
_XcvrHistPMJABRInitialize_Type = InitializeCmd
_XcvrHistPMJABRInitialize_Object = MibTableColumn
xcvrHistPMJABRInitialize = _XcvrHistPMJABRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 171),
    _XcvrHistPMJABRInitialize_Type()
)
xcvrHistPMJABRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMJABRInitialize.setStatus("current")
_XcvrHistPMOTUEBInitialize_Type = InitializeCmd
_XcvrHistPMOTUEBInitialize_Object = MibTableColumn
xcvrHistPMOTUEBInitialize = _XcvrHistPMOTUEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 172),
    _XcvrHistPMOTUEBInitialize_Type()
)
xcvrHistPMOTUEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUEBInitialize.setStatus("current")
_XcvrHistPMOTUBBEInitialize_Type = InitializeCmd
_XcvrHistPMOTUBBEInitialize_Object = MibTableColumn
xcvrHistPMOTUBBEInitialize = _XcvrHistPMOTUBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 173),
    _XcvrHistPMOTUBBEInitialize_Type()
)
xcvrHistPMOTUBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUBBEInitialize.setStatus("current")
_XcvrHistPMOTUESInitialize_Type = InitializeCmd
_XcvrHistPMOTUESInitialize_Object = MibTableColumn
xcvrHistPMOTUESInitialize = _XcvrHistPMOTUESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 174),
    _XcvrHistPMOTUESInitialize_Type()
)
xcvrHistPMOTUESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUESInitialize.setStatus("current")
_XcvrHistPMOTUSESInitialize_Type = InitializeCmd
_XcvrHistPMOTUSESInitialize_Object = MibTableColumn
xcvrHistPMOTUSESInitialize = _XcvrHistPMOTUSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 175),
    _XcvrHistPMOTUSESInitialize_Type()
)
xcvrHistPMOTUSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUSESInitialize.setStatus("current")
_XcvrHistPMOTUOFSInitialize_Type = InitializeCmd
_XcvrHistPMOTUOFSInitialize_Object = MibTableColumn
xcvrHistPMOTUOFSInitialize = _XcvrHistPMOTUOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 176),
    _XcvrHistPMOTUOFSInitialize_Type()
)
xcvrHistPMOTUOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUOFSInitialize.setStatus("current")
_XcvrHistPMUASSValue_Type = Unsigned32
_XcvrHistPMUASSValue_Object = MibTableColumn
xcvrHistPMUASSValue = _XcvrHistPMUASSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 177),
    _XcvrHistPMUASSValue_Type()
)
xcvrHistPMUASSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMUASSValue.setStatus("current")
_XcvrHistPMUASSTimeStamp_Type = DateAndTime
_XcvrHistPMUASSTimeStamp_Object = MibTableColumn
xcvrHistPMUASSTimeStamp = _XcvrHistPMUASSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 178),
    _XcvrHistPMUASSTimeStamp_Type()
)
xcvrHistPMUASSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMUASSTimeStamp.setStatus("current")
_XcvrHistPMUASSValidity_Type = PMValidity
_XcvrHistPMUASSValidity_Object = MibTableColumn
xcvrHistPMUASSValidity = _XcvrHistPMUASSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 179),
    _XcvrHistPMUASSValidity_Type()
)
xcvrHistPMUASSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMUASSValidity.setStatus("current")
_XcvrHistPMUASSInitialize_Type = InitializeCmd
_XcvrHistPMUASSInitialize_Object = MibTableColumn
xcvrHistPMUASSInitialize = _XcvrHistPMUASSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 180),
    _XcvrHistPMUASSInitialize_Type()
)
xcvrHistPMUASSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMUASSInitialize.setStatus("current")
_XcvrHistPMRSUASValue_Type = Unsigned32
_XcvrHistPMRSUASValue_Object = MibTableColumn
xcvrHistPMRSUASValue = _XcvrHistPMRSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 181),
    _XcvrHistPMRSUASValue_Type()
)
xcvrHistPMRSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSUASValue.setStatus("current")
_XcvrHistPMRSUASTimeStamp_Type = DateAndTime
_XcvrHistPMRSUASTimeStamp_Object = MibTableColumn
xcvrHistPMRSUASTimeStamp = _XcvrHistPMRSUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 182),
    _XcvrHistPMRSUASTimeStamp_Type()
)
xcvrHistPMRSUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSUASTimeStamp.setStatus("current")
_XcvrHistPMRSUASValidity_Type = PMValidity
_XcvrHistPMRSUASValidity_Object = MibTableColumn
xcvrHistPMRSUASValidity = _XcvrHistPMRSUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 183),
    _XcvrHistPMRSUASValidity_Type()
)
xcvrHistPMRSUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMRSUASValidity.setStatus("current")
_XcvrHistPMRSUASInitialize_Type = InitializeCmd
_XcvrHistPMRSUASInitialize_Object = MibTableColumn
xcvrHistPMRSUASInitialize = _XcvrHistPMRSUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 184),
    _XcvrHistPMRSUASInitialize_Type()
)
xcvrHistPMRSUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMRSUASInitialize.setStatus("current")
_XcvrHistPMUASValue_Type = Unsigned32
_XcvrHistPMUASValue_Object = MibTableColumn
xcvrHistPMUASValue = _XcvrHistPMUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 185),
    _XcvrHistPMUASValue_Type()
)
xcvrHistPMUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMUASValue.setStatus("current")
_XcvrHistPMUASTimeStamp_Type = DateAndTime
_XcvrHistPMUASTimeStamp_Object = MibTableColumn
xcvrHistPMUASTimeStamp = _XcvrHistPMUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 186),
    _XcvrHistPMUASTimeStamp_Type()
)
xcvrHistPMUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMUASTimeStamp.setStatus("current")
_XcvrHistPMUASValidity_Type = PMValidity
_XcvrHistPMUASValidity_Object = MibTableColumn
xcvrHistPMUASValidity = _XcvrHistPMUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 187),
    _XcvrHistPMUASValidity_Type()
)
xcvrHistPMUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMUASValidity.setStatus("current")
_XcvrHistPMUASInitialize_Type = InitializeCmd
_XcvrHistPMUASInitialize_Object = MibTableColumn
xcvrHistPMUASInitialize = _XcvrHistPMUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 188),
    _XcvrHistPMUASInitialize_Type()
)
xcvrHistPMUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMUASInitialize.setStatus("current")
_XcvrHistPMOTUUASValue_Type = Unsigned32
_XcvrHistPMOTUUASValue_Object = MibTableColumn
xcvrHistPMOTUUASValue = _XcvrHistPMOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 189),
    _XcvrHistPMOTUUASValue_Type()
)
xcvrHistPMOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUUASValue.setStatus("current")
_XcvrHistPMOTUUASTimeStamp_Type = DateAndTime
_XcvrHistPMOTUUASTimeStamp_Object = MibTableColumn
xcvrHistPMOTUUASTimeStamp = _XcvrHistPMOTUUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 190),
    _XcvrHistPMOTUUASTimeStamp_Type()
)
xcvrHistPMOTUUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUUASTimeStamp.setStatus("current")
_XcvrHistPMOTUUASValidity_Type = PMValidity
_XcvrHistPMOTUUASValidity_Object = MibTableColumn
xcvrHistPMOTUUASValidity = _XcvrHistPMOTUUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 191),
    _XcvrHistPMOTUUASValidity_Type()
)
xcvrHistPMOTUUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTUUASValidity.setStatus("current")
_XcvrHistPMOTUUASInitialize_Type = InitializeCmd
_XcvrHistPMOTUUASInitialize_Object = MibTableColumn
xcvrHistPMOTUUASInitialize = _XcvrHistPMOTUUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 192),
    _XcvrHistPMOTUUASInitialize_Type()
)
xcvrHistPMOTUUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTUUASInitialize.setStatus("current")
_XcvrHistPMOTNBERValue_Type = DisplayString
_XcvrHistPMOTNBERValue_Object = MibTableColumn
xcvrHistPMOTNBERValue = _XcvrHistPMOTNBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 193),
    _XcvrHistPMOTNBERValue_Type()
)
xcvrHistPMOTNBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTNBERValue.setStatus("current")
_XcvrHistPMOTNBERTimeStamp_Type = DateAndTime
_XcvrHistPMOTNBERTimeStamp_Object = MibTableColumn
xcvrHistPMOTNBERTimeStamp = _XcvrHistPMOTNBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 194),
    _XcvrHistPMOTNBERTimeStamp_Type()
)
xcvrHistPMOTNBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTNBERTimeStamp.setStatus("current")
_XcvrHistPMOTNBERValidity_Type = PMValidity
_XcvrHistPMOTNBERValidity_Object = MibTableColumn
xcvrHistPMOTNBERValidity = _XcvrHistPMOTNBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 195),
    _XcvrHistPMOTNBERValidity_Type()
)
xcvrHistPMOTNBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTNBERValidity.setStatus("current")
_XcvrHistPMOTNBERInitialize_Type = InitializeCmd
_XcvrHistPMOTNBERInitialize_Object = MibTableColumn
xcvrHistPMOTNBERInitialize = _XcvrHistPMOTNBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 196),
    _XcvrHistPMOTNBERInitialize_Type()
)
xcvrHistPMOTNBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTNBERInitialize.setStatus("current")
_XcvrHistPMOTNAVGBERValue_Type = DisplayString
_XcvrHistPMOTNAVGBERValue_Object = MibTableColumn
xcvrHistPMOTNAVGBERValue = _XcvrHistPMOTNAVGBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 197),
    _XcvrHistPMOTNAVGBERValue_Type()
)
xcvrHistPMOTNAVGBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTNAVGBERValue.setStatus("current")
_XcvrHistPMOTNAVGBERTimeStamp_Type = DateAndTime
_XcvrHistPMOTNAVGBERTimeStamp_Object = MibTableColumn
xcvrHistPMOTNAVGBERTimeStamp = _XcvrHistPMOTNAVGBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 198),
    _XcvrHistPMOTNAVGBERTimeStamp_Type()
)
xcvrHistPMOTNAVGBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTNAVGBERTimeStamp.setStatus("current")
_XcvrHistPMOTNAVGBERValidity_Type = PMValidity
_XcvrHistPMOTNAVGBERValidity_Object = MibTableColumn
xcvrHistPMOTNAVGBERValidity = _XcvrHistPMOTNAVGBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 199),
    _XcvrHistPMOTNAVGBERValidity_Type()
)
xcvrHistPMOTNAVGBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOTNAVGBERValidity.setStatus("current")
_XcvrHistPMOTNAVGBERInitialize_Type = InitializeCmd
_XcvrHistPMOTNAVGBERInitialize_Object = MibTableColumn
xcvrHistPMOTNAVGBERInitialize = _XcvrHistPMOTNAVGBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 200),
    _XcvrHistPMOTNAVGBERInitialize_Type()
)
xcvrHistPMOTNAVGBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOTNAVGBERInitialize.setStatus("current")
_XcvrHistPMNBITCR64BitValue_Type = Unsigned64
_XcvrHistPMNBITCR64BitValue_Object = MibTableColumn
xcvrHistPMNBITCR64BitValue = _XcvrHistPMNBITCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 201),
    _XcvrHistPMNBITCR64BitValue_Type()
)
xcvrHistPMNBITCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBITCR64BitValue.setStatus("current")
_XcvrHistPMNBITCR64BitTimeStamp_Type = DateAndTime
_XcvrHistPMNBITCR64BitTimeStamp_Object = MibTableColumn
xcvrHistPMNBITCR64BitTimeStamp = _XcvrHistPMNBITCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 202),
    _XcvrHistPMNBITCR64BitTimeStamp_Type()
)
xcvrHistPMNBITCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBITCR64BitTimeStamp.setStatus("current")
_XcvrHistPMNBITCR64BitValidity_Type = PMValidity
_XcvrHistPMNBITCR64BitValidity_Object = MibTableColumn
xcvrHistPMNBITCR64BitValidity = _XcvrHistPMNBITCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 203),
    _XcvrHistPMNBITCR64BitValidity_Type()
)
xcvrHistPMNBITCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBITCR64BitValidity.setStatus("current")
_XcvrHistPMNBITCR64BitInitialize_Type = InitializeCmd
_XcvrHistPMNBITCR64BitInitialize_Object = MibTableColumn
xcvrHistPMNBITCR64BitInitialize = _XcvrHistPMNBITCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 204),
    _XcvrHistPMNBITCR64BitInitialize_Type()
)
xcvrHistPMNBITCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMNBITCR64BitInitialize.setStatus("current")
_XcvrHistPMNBYTCR64BitValue_Type = Unsigned64
_XcvrHistPMNBYTCR64BitValue_Object = MibTableColumn
xcvrHistPMNBYTCR64BitValue = _XcvrHistPMNBYTCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 205),
    _XcvrHistPMNBYTCR64BitValue_Type()
)
xcvrHistPMNBYTCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBYTCR64BitValue.setStatus("current")
_XcvrHistPMNBYTCR64BitTimeStamp_Type = DateAndTime
_XcvrHistPMNBYTCR64BitTimeStamp_Object = MibTableColumn
xcvrHistPMNBYTCR64BitTimeStamp = _XcvrHistPMNBYTCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 206),
    _XcvrHistPMNBYTCR64BitTimeStamp_Type()
)
xcvrHistPMNBYTCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBYTCR64BitTimeStamp.setStatus("current")
_XcvrHistPMNBYTCR64BitValidity_Type = PMValidity
_XcvrHistPMNBYTCR64BitValidity_Object = MibTableColumn
xcvrHistPMNBYTCR64BitValidity = _XcvrHistPMNBYTCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 207),
    _XcvrHistPMNBYTCR64BitValidity_Type()
)
xcvrHistPMNBYTCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMNBYTCR64BitValidity.setStatus("current")
_XcvrHistPMNBYTCR64BitInitialize_Type = InitializeCmd
_XcvrHistPMNBYTCR64BitInitialize_Object = MibTableColumn
xcvrHistPMNBYTCR64BitInitialize = _XcvrHistPMNBYTCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 208),
    _XcvrHistPMNBYTCR64BitInitialize_Type()
)
xcvrHistPMNBYTCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMNBYTCR64BitInitialize.setStatus("current")
_XcvrHistPMOPRMinValue_Type = FixedX10
_XcvrHistPMOPRMinValue_Object = MibTableColumn
xcvrHistPMOPRMinValue = _XcvrHistPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 209),
    _XcvrHistPMOPRMinValue_Type()
)
xcvrHistPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMinValue.setUnits("dBm/10")
_XcvrHistPMOPRMinTimeStamp_Type = DateAndTime
_XcvrHistPMOPRMinTimeStamp_Object = MibTableColumn
xcvrHistPMOPRMinTimeStamp = _XcvrHistPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 210),
    _XcvrHistPMOPRMinTimeStamp_Type()
)
xcvrHistPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMinTimeStamp.setStatus("current")
_XcvrHistPMOPRMinValidity_Type = PMValidity
_XcvrHistPMOPRMinValidity_Object = MibTableColumn
xcvrHistPMOPRMinValidity = _XcvrHistPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 211),
    _XcvrHistPMOPRMinValidity_Type()
)
xcvrHistPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMinValidity.setStatus("current")
_XcvrHistPMOPRMinInitialize_Type = InitializeCmd
_XcvrHistPMOPRMinInitialize_Object = MibTableColumn
xcvrHistPMOPRMinInitialize = _XcvrHistPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 212),
    _XcvrHistPMOPRMinInitialize_Type()
)
xcvrHistPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMinInitialize.setStatus("current")
_XcvrHistPMOPRMaxValue_Type = FixedX10
_XcvrHistPMOPRMaxValue_Object = MibTableColumn
xcvrHistPMOPRMaxValue = _XcvrHistPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 213),
    _XcvrHistPMOPRMaxValue_Type()
)
xcvrHistPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMaxValue.setUnits("dBm/10")
_XcvrHistPMOPRMaxTimeStamp_Type = DateAndTime
_XcvrHistPMOPRMaxTimeStamp_Object = MibTableColumn
xcvrHistPMOPRMaxTimeStamp = _XcvrHistPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 214),
    _XcvrHistPMOPRMaxTimeStamp_Type()
)
xcvrHistPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMaxTimeStamp.setStatus("current")
_XcvrHistPMOPRMaxValidity_Type = PMValidity
_XcvrHistPMOPRMaxValidity_Object = MibTableColumn
xcvrHistPMOPRMaxValidity = _XcvrHistPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 215),
    _XcvrHistPMOPRMaxValidity_Type()
)
xcvrHistPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMaxValidity.setStatus("current")
_XcvrHistPMOPRMaxInitialize_Type = InitializeCmd
_XcvrHistPMOPRMaxInitialize_Object = MibTableColumn
xcvrHistPMOPRMaxInitialize = _XcvrHistPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 216),
    _XcvrHistPMOPRMaxInitialize_Type()
)
xcvrHistPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOPRMaxInitialize.setStatus("current")
_XcvrHistPMOPRAvgValue_Type = FixedX10
_XcvrHistPMOPRAvgValue_Object = MibTableColumn
xcvrHistPMOPRAvgValue = _XcvrHistPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 217),
    _XcvrHistPMOPRAvgValue_Type()
)
xcvrHistPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMOPRAvgValue.setUnits("dBm/10")
_XcvrHistPMOPRAvgTimeStamp_Type = DateAndTime
_XcvrHistPMOPRAvgTimeStamp_Object = MibTableColumn
xcvrHistPMOPRAvgTimeStamp = _XcvrHistPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 218),
    _XcvrHistPMOPRAvgTimeStamp_Type()
)
xcvrHistPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRAvgTimeStamp.setStatus("current")
_XcvrHistPMOPRAvgValidity_Type = PMValidity
_XcvrHistPMOPRAvgValidity_Object = MibTableColumn
xcvrHistPMOPRAvgValidity = _XcvrHistPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 219),
    _XcvrHistPMOPRAvgValidity_Type()
)
xcvrHistPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPRAvgValidity.setStatus("current")
_XcvrHistPMOPRAvgInitialize_Type = InitializeCmd
_XcvrHistPMOPRAvgInitialize_Object = MibTableColumn
xcvrHistPMOPRAvgInitialize = _XcvrHistPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 220),
    _XcvrHistPMOPRAvgInitialize_Type()
)
xcvrHistPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOPRAvgInitialize.setStatus("current")
_XcvrHistPMOPTMinValue_Type = FixedX10
_XcvrHistPMOPTMinValue_Object = MibTableColumn
xcvrHistPMOPTMinValue = _XcvrHistPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 221),
    _XcvrHistPMOPTMinValue_Type()
)
xcvrHistPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMinValue.setUnits("dBm/10")
_XcvrHistPMOPTMinTimeStamp_Type = DateAndTime
_XcvrHistPMOPTMinTimeStamp_Object = MibTableColumn
xcvrHistPMOPTMinTimeStamp = _XcvrHistPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 222),
    _XcvrHistPMOPTMinTimeStamp_Type()
)
xcvrHistPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMinTimeStamp.setStatus("current")
_XcvrHistPMOPTMinValidity_Type = PMValidity
_XcvrHistPMOPTMinValidity_Object = MibTableColumn
xcvrHistPMOPTMinValidity = _XcvrHistPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 223),
    _XcvrHistPMOPTMinValidity_Type()
)
xcvrHistPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMinValidity.setStatus("current")
_XcvrHistPMOPTMinInitialize_Type = InitializeCmd
_XcvrHistPMOPTMinInitialize_Object = MibTableColumn
xcvrHistPMOPTMinInitialize = _XcvrHistPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 224),
    _XcvrHistPMOPTMinInitialize_Type()
)
xcvrHistPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMinInitialize.setStatus("current")
_XcvrHistPMOPTMaxValue_Type = FixedX10
_XcvrHistPMOPTMaxValue_Object = MibTableColumn
xcvrHistPMOPTMaxValue = _XcvrHistPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 225),
    _XcvrHistPMOPTMaxValue_Type()
)
xcvrHistPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMaxValue.setUnits("dBm/10")
_XcvrHistPMOPTMaxTimeStamp_Type = DateAndTime
_XcvrHistPMOPTMaxTimeStamp_Object = MibTableColumn
xcvrHistPMOPTMaxTimeStamp = _XcvrHistPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 226),
    _XcvrHistPMOPTMaxTimeStamp_Type()
)
xcvrHistPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMaxTimeStamp.setStatus("current")
_XcvrHistPMOPTMaxValidity_Type = PMValidity
_XcvrHistPMOPTMaxValidity_Object = MibTableColumn
xcvrHistPMOPTMaxValidity = _XcvrHistPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 227),
    _XcvrHistPMOPTMaxValidity_Type()
)
xcvrHistPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMaxValidity.setStatus("current")
_XcvrHistPMOPTMaxInitialize_Type = InitializeCmd
_XcvrHistPMOPTMaxInitialize_Object = MibTableColumn
xcvrHistPMOPTMaxInitialize = _XcvrHistPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 228),
    _XcvrHistPMOPTMaxInitialize_Type()
)
xcvrHistPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOPTMaxInitialize.setStatus("current")
_XcvrHistPMOPTAvgValue_Type = FixedX10
_XcvrHistPMOPTAvgValue_Object = MibTableColumn
xcvrHistPMOPTAvgValue = _XcvrHistPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 229),
    _XcvrHistPMOPTAvgValue_Type()
)
xcvrHistPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    xcvrHistPMOPTAvgValue.setUnits("dBm/10")
_XcvrHistPMOPTAvgTimeStamp_Type = DateAndTime
_XcvrHistPMOPTAvgTimeStamp_Object = MibTableColumn
xcvrHistPMOPTAvgTimeStamp = _XcvrHistPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 230),
    _XcvrHistPMOPTAvgTimeStamp_Type()
)
xcvrHistPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTAvgTimeStamp.setStatus("current")
_XcvrHistPMOPTAvgValidity_Type = PMValidity
_XcvrHistPMOPTAvgValidity_Object = MibTableColumn
xcvrHistPMOPTAvgValidity = _XcvrHistPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 231),
    _XcvrHistPMOPTAvgValidity_Type()
)
xcvrHistPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcvrHistPMOPTAvgValidity.setStatus("current")
_XcvrHistPMOPTAvgInitialize_Type = InitializeCmd
_XcvrHistPMOPTAvgInitialize_Object = MibTableColumn
xcvrHistPMOPTAvgInitialize = _XcvrHistPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 232),
    _XcvrHistPMOPTAvgInitialize_Type()
)
xcvrHistPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrHistPMOPTAvgInitialize.setStatus("current")
_XcvrPMThresholdTable_Object = MibTable
xcvrPMThresholdTable = _XcvrPMThresholdTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5)
)
if mibBuilder.loadTexts:
    xcvrPMThresholdTable.setStatus("current")
_XcvrPMThresholdEntry_Object = MibTableRow
xcvrPMThresholdEntry = _XcvrPMThresholdEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1)
)
xcvrPMThresholdEntry.setIndexNames(
    (0, "BTI-7000-MIB", "xcvrPMThresholdTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrPMThresholdShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrPMThresholdSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrPMThresholdIdx"),
    (0, "BTI-7000-MIB", "xcvrPMThresholdIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    xcvrPMThresholdEntry.setStatus("current")
_XcvrPMThresholdTypeIdx_Type = XcvrType
_XcvrPMThresholdTypeIdx_Object = MibTableColumn
xcvrPMThresholdTypeIdx = _XcvrPMThresholdTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 1),
    _XcvrPMThresholdTypeIdx_Type()
)
xcvrPMThresholdTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrPMThresholdTypeIdx.setStatus("current")


class _XcvrPMThresholdShelfIdx_Type(Integer32):
    """Custom type xcvrPMThresholdShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrPMThresholdShelfIdx_Type.__name__ = "Integer32"
_XcvrPMThresholdShelfIdx_Object = MibTableColumn
xcvrPMThresholdShelfIdx = _XcvrPMThresholdShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 2),
    _XcvrPMThresholdShelfIdx_Type()
)
xcvrPMThresholdShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrPMThresholdShelfIdx.setStatus("current")


class _XcvrPMThresholdSlotIdx_Type(Integer32):
    """Custom type xcvrPMThresholdSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrPMThresholdSlotIdx_Type.__name__ = "Integer32"
_XcvrPMThresholdSlotIdx_Object = MibTableColumn
xcvrPMThresholdSlotIdx = _XcvrPMThresholdSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 3),
    _XcvrPMThresholdSlotIdx_Type()
)
xcvrPMThresholdSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrPMThresholdSlotIdx.setStatus("current")


class _XcvrPMThresholdIdx_Type(Integer32):
    """Custom type xcvrPMThresholdIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrPMThresholdIdx_Type.__name__ = "Integer32"
_XcvrPMThresholdIdx_Object = MibTableColumn
xcvrPMThresholdIdx = _XcvrPMThresholdIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 4),
    _XcvrPMThresholdIdx_Type()
)
xcvrPMThresholdIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrPMThresholdIdx.setStatus("current")
_XcvrPMThresholdIntervalTypeIdx_Type = PMIntervalType
_XcvrPMThresholdIntervalTypeIdx_Object = MibTableColumn
xcvrPMThresholdIntervalTypeIdx = _XcvrPMThresholdIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 5),
    _XcvrPMThresholdIntervalTypeIdx_Type()
)
xcvrPMThresholdIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrPMThresholdIntervalTypeIdx.setStatus("current")
_XcvrPMThresholdCVSValue_Type = Unsigned32
_XcvrPMThresholdCVSValue_Object = MibTableColumn
xcvrPMThresholdCVSValue = _XcvrPMThresholdCVSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 6),
    _XcvrPMThresholdCVSValue_Type()
)
xcvrPMThresholdCVSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdCVSValue.setStatus("current")
_XcvrPMThresholdESSValue_Type = Unsigned32
_XcvrPMThresholdESSValue_Object = MibTableColumn
xcvrPMThresholdESSValue = _XcvrPMThresholdESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 7),
    _XcvrPMThresholdESSValue_Type()
)
xcvrPMThresholdESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdESSValue.setStatus("current")
_XcvrPMThresholdSESSValue_Type = Unsigned32
_XcvrPMThresholdSESSValue_Object = MibTableColumn
xcvrPMThresholdSESSValue = _XcvrPMThresholdSESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 8),
    _XcvrPMThresholdSESSValue_Type()
)
xcvrPMThresholdSESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdSESSValue.setStatus("current")
_XcvrPMThresholdSEFSSValue_Type = Unsigned32
_XcvrPMThresholdSEFSSValue_Object = MibTableColumn
xcvrPMThresholdSEFSSValue = _XcvrPMThresholdSEFSSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 9),
    _XcvrPMThresholdSEFSSValue_Type()
)
xcvrPMThresholdSEFSSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdSEFSSValue.setStatus("current")
_XcvrPMThresholdRSEBValue_Type = Unsigned32
_XcvrPMThresholdRSEBValue_Object = MibTableColumn
xcvrPMThresholdRSEBValue = _XcvrPMThresholdRSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 10),
    _XcvrPMThresholdRSEBValue_Type()
)
xcvrPMThresholdRSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdRSEBValue.setStatus("current")
_XcvrPMThresholdRSBBEValue_Type = Unsigned32
_XcvrPMThresholdRSBBEValue_Object = MibTableColumn
xcvrPMThresholdRSBBEValue = _XcvrPMThresholdRSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 11),
    _XcvrPMThresholdRSBBEValue_Type()
)
xcvrPMThresholdRSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdRSBBEValue.setStatus("current")
_XcvrPMThresholdRSESValue_Type = Unsigned32
_XcvrPMThresholdRSESValue_Object = MibTableColumn
xcvrPMThresholdRSESValue = _XcvrPMThresholdRSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 12),
    _XcvrPMThresholdRSESValue_Type()
)
xcvrPMThresholdRSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdRSESValue.setStatus("current")
_XcvrPMThresholdRSSESValue_Type = Unsigned32
_XcvrPMThresholdRSSESValue_Object = MibTableColumn
xcvrPMThresholdRSSESValue = _XcvrPMThresholdRSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 13),
    _XcvrPMThresholdRSSESValue_Type()
)
xcvrPMThresholdRSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdRSSESValue.setStatus("current")
_XcvrPMThresholdRSOFSValue_Type = Unsigned32
_XcvrPMThresholdRSOFSValue_Object = MibTableColumn
xcvrPMThresholdRSOFSValue = _XcvrPMThresholdRSOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 14),
    _XcvrPMThresholdRSOFSValue_Type()
)
xcvrPMThresholdRSOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdRSOFSValue.setStatus("current")
_XcvrPMThresholdCVValue_Type = Unsigned32
_XcvrPMThresholdCVValue_Object = MibTableColumn
xcvrPMThresholdCVValue = _XcvrPMThresholdCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 15),
    _XcvrPMThresholdCVValue_Type()
)
xcvrPMThresholdCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdCVValue.setStatus("current")
_XcvrPMThresholdESValue_Type = Unsigned32
_XcvrPMThresholdESValue_Object = MibTableColumn
xcvrPMThresholdESValue = _XcvrPMThresholdESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 16),
    _XcvrPMThresholdESValue_Type()
)
xcvrPMThresholdESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdESValue.setStatus("current")
_XcvrPMThresholdSESValue_Type = Unsigned32
_XcvrPMThresholdSESValue_Object = MibTableColumn
xcvrPMThresholdSESValue = _XcvrPMThresholdSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 17),
    _XcvrPMThresholdSESValue_Type()
)
xcvrPMThresholdSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdSESValue.setStatus("current")
_XcvrPMThresholdINVBLKValue_Type = Unsigned32
_XcvrPMThresholdINVBLKValue_Object = MibTableColumn
xcvrPMThresholdINVBLKValue = _XcvrPMThresholdINVBLKValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 18),
    _XcvrPMThresholdINVBLKValue_Type()
)
xcvrPMThresholdINVBLKValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdINVBLKValue.setStatus("current")
_XcvrPMThresholdUNCRCDWValue_Type = Unsigned32
_XcvrPMThresholdUNCRCDWValue_Object = MibTableColumn
xcvrPMThresholdUNCRCDWValue = _XcvrPMThresholdUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 21),
    _XcvrPMThresholdUNCRCDWValue_Type()
)
xcvrPMThresholdUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdUNCRCDWValue.setStatus("current")
_XcvrPMThresholdFCSEValue_Type = Unsigned32
_XcvrPMThresholdFCSEValue_Object = MibTableColumn
xcvrPMThresholdFCSEValue = _XcvrPMThresholdFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 22),
    _XcvrPMThresholdFCSEValue_Type()
)
xcvrPMThresholdFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdFCSEValue.setStatus("current")
_XcvrPMThresholdFRDRValue_Type = Unsigned32
_XcvrPMThresholdFRDRValue_Object = MibTableColumn
xcvrPMThresholdFRDRValue = _XcvrPMThresholdFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 23),
    _XcvrPMThresholdFRDRValue_Type()
)
xcvrPMThresholdFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdFRDRValue.setStatus("current")
_XcvrPMThresholdUSIZEValue_Type = Unsigned32
_XcvrPMThresholdUSIZEValue_Object = MibTableColumn
xcvrPMThresholdUSIZEValue = _XcvrPMThresholdUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 24),
    _XcvrPMThresholdUSIZEValue_Type()
)
xcvrPMThresholdUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdUSIZEValue.setStatus("current")
_XcvrPMThresholdOSIZEValue_Type = Unsigned32
_XcvrPMThresholdOSIZEValue_Object = MibTableColumn
xcvrPMThresholdOSIZEValue = _XcvrPMThresholdOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 25),
    _XcvrPMThresholdOSIZEValue_Type()
)
xcvrPMThresholdOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdOSIZEValue.setStatus("current")
_XcvrPMThresholdFRGTValue_Type = Unsigned32
_XcvrPMThresholdFRGTValue_Object = MibTableColumn
xcvrPMThresholdFRGTValue = _XcvrPMThresholdFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 26),
    _XcvrPMThresholdFRGTValue_Type()
)
xcvrPMThresholdFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdFRGTValue.setStatus("current")
_XcvrPMThresholdJABRValue_Type = Unsigned32
_XcvrPMThresholdJABRValue_Object = MibTableColumn
xcvrPMThresholdJABRValue = _XcvrPMThresholdJABRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 27),
    _XcvrPMThresholdJABRValue_Type()
)
xcvrPMThresholdJABRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdJABRValue.setStatus("current")
_XcvrPMThresholdOTUEBValue_Type = Unsigned32
_XcvrPMThresholdOTUEBValue_Object = MibTableColumn
xcvrPMThresholdOTUEBValue = _XcvrPMThresholdOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 28),
    _XcvrPMThresholdOTUEBValue_Type()
)
xcvrPMThresholdOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdOTUEBValue.setStatus("current")
_XcvrPMThresholdOTUBBEValue_Type = Unsigned32
_XcvrPMThresholdOTUBBEValue_Object = MibTableColumn
xcvrPMThresholdOTUBBEValue = _XcvrPMThresholdOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 29),
    _XcvrPMThresholdOTUBBEValue_Type()
)
xcvrPMThresholdOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdOTUBBEValue.setStatus("current")
_XcvrPMThresholdOTUESValue_Type = Unsigned32
_XcvrPMThresholdOTUESValue_Object = MibTableColumn
xcvrPMThresholdOTUESValue = _XcvrPMThresholdOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 30),
    _XcvrPMThresholdOTUESValue_Type()
)
xcvrPMThresholdOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdOTUESValue.setStatus("current")
_XcvrPMThresholdOTUSESValue_Type = Unsigned32
_XcvrPMThresholdOTUSESValue_Object = MibTableColumn
xcvrPMThresholdOTUSESValue = _XcvrPMThresholdOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 31),
    _XcvrPMThresholdOTUSESValue_Type()
)
xcvrPMThresholdOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdOTUSESValue.setStatus("current")
_XcvrPMThresholdOTUOFSValue_Type = Unsigned32
_XcvrPMThresholdOTUOFSValue_Object = MibTableColumn
xcvrPMThresholdOTUOFSValue = _XcvrPMThresholdOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 32),
    _XcvrPMThresholdOTUOFSValue_Type()
)
xcvrPMThresholdOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdOTUOFSValue.setStatus("current")
_XcvrPMThresholdUASSValue_Type = Unsigned32
_XcvrPMThresholdUASSValue_Object = MibTableColumn
xcvrPMThresholdUASSValue = _XcvrPMThresholdUASSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 33),
    _XcvrPMThresholdUASSValue_Type()
)
xcvrPMThresholdUASSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdUASSValue.setStatus("current")
_XcvrPMThresholdRSUASValue_Type = Unsigned32
_XcvrPMThresholdRSUASValue_Object = MibTableColumn
xcvrPMThresholdRSUASValue = _XcvrPMThresholdRSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 34),
    _XcvrPMThresholdRSUASValue_Type()
)
xcvrPMThresholdRSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdRSUASValue.setStatus("current")
_XcvrPMThresholdUASValue_Type = Unsigned32
_XcvrPMThresholdUASValue_Object = MibTableColumn
xcvrPMThresholdUASValue = _XcvrPMThresholdUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 35),
    _XcvrPMThresholdUASValue_Type()
)
xcvrPMThresholdUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdUASValue.setStatus("current")
_XcvrPMThresholdOTUUASValue_Type = Unsigned32
_XcvrPMThresholdOTUUASValue_Object = MibTableColumn
xcvrPMThresholdOTUUASValue = _XcvrPMThresholdOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 36),
    _XcvrPMThresholdOTUUASValue_Type()
)
xcvrPMThresholdOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrPMThresholdOTUUASValue.setStatus("current")
_AmdCrntPMTable_Object = MibTable
amdCrntPMTable = _AmdCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6)
)
if mibBuilder.loadTexts:
    amdCrntPMTable.setStatus("obsolete")
_AmdCrntPMEntry_Object = MibTableRow
amdCrntPMEntry = _AmdCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1)
)
amdCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "amdCrntPMTypeIdx"),
    (0, "BTI-7000-MIB", "amdCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "amdCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "amdCrntPMLineIdx"),
    (0, "BTI-7000-MIB", "amdCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "amdCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    amdCrntPMEntry.setStatus("obsolete")
_AmdCrntPMTypeIdx_Type = AmdType
_AmdCrntPMTypeIdx_Object = MibTableColumn
amdCrntPMTypeIdx = _AmdCrntPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 1),
    _AmdCrntPMTypeIdx_Type()
)
amdCrntPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdCrntPMTypeIdx.setStatus("obsolete")


class _AmdCrntPMShelfIdx_Type(Integer32):
    """Custom type amdCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_AmdCrntPMShelfIdx_Type.__name__ = "Integer32"
_AmdCrntPMShelfIdx_Object = MibTableColumn
amdCrntPMShelfIdx = _AmdCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 2),
    _AmdCrntPMShelfIdx_Type()
)
amdCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdCrntPMShelfIdx.setStatus("obsolete")


class _AmdCrntPMSlotIdx_Type(Integer32):
    """Custom type amdCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_AmdCrntPMSlotIdx_Type.__name__ = "Integer32"
_AmdCrntPMSlotIdx_Object = MibTableColumn
amdCrntPMSlotIdx = _AmdCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 3),
    _AmdCrntPMSlotIdx_Type()
)
amdCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdCrntPMSlotIdx.setStatus("obsolete")


class _AmdCrntPMLineIdx_Type(Integer32):
    """Custom type amdCrntPMLineIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_AmdCrntPMLineIdx_Type.__name__ = "Integer32"
_AmdCrntPMLineIdx_Object = MibTableColumn
amdCrntPMLineIdx = _AmdCrntPMLineIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 4),
    _AmdCrntPMLineIdx_Type()
)
amdCrntPMLineIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdCrntPMLineIdx.setStatus("obsolete")
_AmdCrntPMPortIdx_Type = AmdPortType
_AmdCrntPMPortIdx_Object = MibTableColumn
amdCrntPMPortIdx = _AmdCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 5),
    _AmdCrntPMPortIdx_Type()
)
amdCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdCrntPMPortIdx.setStatus("obsolete")
_AmdCrntPMIntervalTypeIdx_Type = PMIntervalType
_AmdCrntPMIntervalTypeIdx_Object = MibTableColumn
amdCrntPMIntervalTypeIdx = _AmdCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 6),
    _AmdCrntPMIntervalTypeIdx_Type()
)
amdCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdCrntPMIntervalTypeIdx.setStatus("obsolete")
_AmdCrntPMOPRValue_Type = FixedX10
_AmdCrntPMOPRValue_Object = MibTableColumn
amdCrntPMOPRValue = _AmdCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 7),
    _AmdCrntPMOPRValue_Type()
)
amdCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMOPRValue.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdCrntPMOPRValue.setUnits("dBm/10")
_AmdCrntPMOPRTimeStamp_Type = DateAndTime
_AmdCrntPMOPRTimeStamp_Object = MibTableColumn
amdCrntPMOPRTimeStamp = _AmdCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 8),
    _AmdCrntPMOPRTimeStamp_Type()
)
amdCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMOPRTimeStamp.setStatus("obsolete")
_AmdCrntPMOPRValidity_Type = PMValidity
_AmdCrntPMOPRValidity_Object = MibTableColumn
amdCrntPMOPRValidity = _AmdCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 9),
    _AmdCrntPMOPRValidity_Type()
)
amdCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMOPRValidity.setStatus("obsolete")
_AmdCrntPMOPTValue_Type = FixedX10
_AmdCrntPMOPTValue_Object = MibTableColumn
amdCrntPMOPTValue = _AmdCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 10),
    _AmdCrntPMOPTValue_Type()
)
amdCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMOPTValue.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdCrntPMOPTValue.setUnits("dBm/10")
_AmdCrntPMOPTTimeStamp_Type = DateAndTime
_AmdCrntPMOPTTimeStamp_Object = MibTableColumn
amdCrntPMOPTTimeStamp = _AmdCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 11),
    _AmdCrntPMOPTTimeStamp_Type()
)
amdCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMOPTTimeStamp.setStatus("obsolete")
_AmdCrntPMOPTValidity_Type = PMValidity
_AmdCrntPMOPTValidity_Object = MibTableColumn
amdCrntPMOPTValidity = _AmdCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 12),
    _AmdCrntPMOPTValidity_Type()
)
amdCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMOPTValidity.setStatus("obsolete")
_AmdCrntPMVOAValue_Type = FixedX10
_AmdCrntPMVOAValue_Object = MibTableColumn
amdCrntPMVOAValue = _AmdCrntPMVOAValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 13),
    _AmdCrntPMVOAValue_Type()
)
amdCrntPMVOAValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMVOAValue.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdCrntPMVOAValue.setUnits("dB/10")
_AmdCrntPMVOATimeStamp_Type = DateAndTime
_AmdCrntPMVOATimeStamp_Object = MibTableColumn
amdCrntPMVOATimeStamp = _AmdCrntPMVOATimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 14),
    _AmdCrntPMVOATimeStamp_Type()
)
amdCrntPMVOATimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMVOATimeStamp.setStatus("obsolete")
_AmdCrntPMVOAValidity_Type = PMValidity
_AmdCrntPMVOAValidity_Object = MibTableColumn
amdCrntPMVOAValidity = _AmdCrntPMVOAValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 15),
    _AmdCrntPMVOAValidity_Type()
)
amdCrntPMVOAValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMVOAValidity.setStatus("obsolete")


class _AmdCrntPMLitChnValue_Type(Integer32):
    """Custom type amdCrntPMLitChnValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_AmdCrntPMLitChnValue_Type.__name__ = "Integer32"
_AmdCrntPMLitChnValue_Object = MibTableColumn
amdCrntPMLitChnValue = _AmdCrntPMLitChnValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 16),
    _AmdCrntPMLitChnValue_Type()
)
amdCrntPMLitChnValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMLitChnValue.setStatus("obsolete")
_AmdCrntPMLitChnTimeStamp_Type = DateAndTime
_AmdCrntPMLitChnTimeStamp_Object = MibTableColumn
amdCrntPMLitChnTimeStamp = _AmdCrntPMLitChnTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 17),
    _AmdCrntPMLitChnTimeStamp_Type()
)
amdCrntPMLitChnTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMLitChnTimeStamp.setStatus("obsolete")
_AmdCrntPMLitChnValidity_Type = PMValidity
_AmdCrntPMLitChnValidity_Object = MibTableColumn
amdCrntPMLitChnValidity = _AmdCrntPMLitChnValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 18),
    _AmdCrntPMLitChnValidity_Type()
)
amdCrntPMLitChnValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdCrntPMLitChnValidity.setStatus("obsolete")
_AmdHistPMTable_Object = MibTable
amdHistPMTable = _AmdHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7)
)
if mibBuilder.loadTexts:
    amdHistPMTable.setStatus("obsolete")
_AmdHistPMEntry_Object = MibTableRow
amdHistPMEntry = _AmdHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1)
)
amdHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "amdHistPMTypeIdx"),
    (0, "BTI-7000-MIB", "amdHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "amdHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "amdHistPMLineIdx"),
    (0, "BTI-7000-MIB", "amdHistPMPortIdx"),
    (0, "BTI-7000-MIB", "amdHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "amdHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    amdHistPMEntry.setStatus("obsolete")
_AmdHistPMTypeIdx_Type = AmdType
_AmdHistPMTypeIdx_Object = MibTableColumn
amdHistPMTypeIdx = _AmdHistPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 1),
    _AmdHistPMTypeIdx_Type()
)
amdHistPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdHistPMTypeIdx.setStatus("obsolete")


class _AmdHistPMShelfIdx_Type(Integer32):
    """Custom type amdHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_AmdHistPMShelfIdx_Type.__name__ = "Integer32"
_AmdHistPMShelfIdx_Object = MibTableColumn
amdHistPMShelfIdx = _AmdHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 2),
    _AmdHistPMShelfIdx_Type()
)
amdHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdHistPMShelfIdx.setStatus("obsolete")


class _AmdHistPMSlotIdx_Type(Integer32):
    """Custom type amdHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_AmdHistPMSlotIdx_Type.__name__ = "Integer32"
_AmdHistPMSlotIdx_Object = MibTableColumn
amdHistPMSlotIdx = _AmdHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 3),
    _AmdHistPMSlotIdx_Type()
)
amdHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdHistPMSlotIdx.setStatus("obsolete")


class _AmdHistPMLineIdx_Type(Integer32):
    """Custom type amdHistPMLineIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_AmdHistPMLineIdx_Type.__name__ = "Integer32"
_AmdHistPMLineIdx_Object = MibTableColumn
amdHistPMLineIdx = _AmdHistPMLineIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 4),
    _AmdHistPMLineIdx_Type()
)
amdHistPMLineIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdHistPMLineIdx.setStatus("obsolete")
_AmdHistPMPortIdx_Type = AmdPortType
_AmdHistPMPortIdx_Object = MibTableColumn
amdHistPMPortIdx = _AmdHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 5),
    _AmdHistPMPortIdx_Type()
)
amdHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdHistPMPortIdx.setStatus("obsolete")
_AmdHistPMIntervalTypeIdx_Type = PMIntervalType
_AmdHistPMIntervalTypeIdx_Object = MibTableColumn
amdHistPMIntervalTypeIdx = _AmdHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 6),
    _AmdHistPMIntervalTypeIdx_Type()
)
amdHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdHistPMIntervalTypeIdx.setStatus("obsolete")


class _AmdHistPMIntervalIdx_Type(Integer32):
    """Custom type amdHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AmdHistPMIntervalIdx_Type.__name__ = "Integer32"
_AmdHistPMIntervalIdx_Object = MibTableColumn
amdHistPMIntervalIdx = _AmdHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 7),
    _AmdHistPMIntervalIdx_Type()
)
amdHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amdHistPMIntervalIdx.setStatus("obsolete")
_AmdHistPMOPRValue_Type = FixedX10
_AmdHistPMOPRValue_Object = MibTableColumn
amdHistPMOPRValue = _AmdHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 8),
    _AmdHistPMOPRValue_Type()
)
amdHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMOPRValue.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdHistPMOPRValue.setUnits("dBm/10")
_AmdHistPMOPRTimeStamp_Type = DateAndTime
_AmdHistPMOPRTimeStamp_Object = MibTableColumn
amdHistPMOPRTimeStamp = _AmdHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 9),
    _AmdHistPMOPRTimeStamp_Type()
)
amdHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMOPRTimeStamp.setStatus("obsolete")
_AmdHistPMOPRValidity_Type = PMValidity
_AmdHistPMOPRValidity_Object = MibTableColumn
amdHistPMOPRValidity = _AmdHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 10),
    _AmdHistPMOPRValidity_Type()
)
amdHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMOPRValidity.setStatus("obsolete")
_AmdHistPMOPTValue_Type = FixedX10
_AmdHistPMOPTValue_Object = MibTableColumn
amdHistPMOPTValue = _AmdHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 11),
    _AmdHistPMOPTValue_Type()
)
amdHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMOPTValue.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdHistPMOPTValue.setUnits("dBm/10")
_AmdHistPMOPTTimeStamp_Type = DateAndTime
_AmdHistPMOPTTimeStamp_Object = MibTableColumn
amdHistPMOPTTimeStamp = _AmdHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 12),
    _AmdHistPMOPTTimeStamp_Type()
)
amdHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMOPTTimeStamp.setStatus("obsolete")
_AmdHistPMOPTValidity_Type = PMValidity
_AmdHistPMOPTValidity_Object = MibTableColumn
amdHistPMOPTValidity = _AmdHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 13),
    _AmdHistPMOPTValidity_Type()
)
amdHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMOPTValidity.setStatus("obsolete")
_AmdHistPMVOAValue_Type = FixedX10
_AmdHistPMVOAValue_Object = MibTableColumn
amdHistPMVOAValue = _AmdHistPMVOAValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 14),
    _AmdHistPMVOAValue_Type()
)
amdHistPMVOAValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMVOAValue.setStatus("obsolete")
if mibBuilder.loadTexts:
    amdHistPMVOAValue.setUnits("dB/10")
_AmdHistPMVOATimeStamp_Type = DateAndTime
_AmdHistPMVOATimeStamp_Object = MibTableColumn
amdHistPMVOATimeStamp = _AmdHistPMVOATimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 15),
    _AmdHistPMVOATimeStamp_Type()
)
amdHistPMVOATimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMVOATimeStamp.setStatus("obsolete")
_AmdHistPMVOAValidity_Type = PMValidity
_AmdHistPMVOAValidity_Object = MibTableColumn
amdHistPMVOAValidity = _AmdHistPMVOAValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 16),
    _AmdHistPMVOAValidity_Type()
)
amdHistPMVOAValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMVOAValidity.setStatus("obsolete")


class _AmdHistPMLitChnValue_Type(Integer32):
    """Custom type amdHistPMLitChnValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_AmdHistPMLitChnValue_Type.__name__ = "Integer32"
_AmdHistPMLitChnValue_Object = MibTableColumn
amdHistPMLitChnValue = _AmdHistPMLitChnValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 17),
    _AmdHistPMLitChnValue_Type()
)
amdHistPMLitChnValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMLitChnValue.setStatus("obsolete")
_AmdHistPMLitChnTimeStamp_Type = DateAndTime
_AmdHistPMLitChnTimeStamp_Object = MibTableColumn
amdHistPMLitChnTimeStamp = _AmdHistPMLitChnTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 18),
    _AmdHistPMLitChnTimeStamp_Type()
)
amdHistPMLitChnTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMLitChnTimeStamp.setStatus("obsolete")
_AmdHistPMLitChnValidity_Type = PMValidity
_AmdHistPMLitChnValidity_Object = MibTableColumn
amdHistPMLitChnValidity = _AmdHistPMLitChnValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 19),
    _AmdHistPMLitChnValidity_Type()
)
amdHistPMLitChnValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amdHistPMLitChnValidity.setStatus("obsolete")
_OcnCrntPMTable_Object = MibTable
ocnCrntPMTable = _OcnCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8)
)
if mibBuilder.loadTexts:
    ocnCrntPMTable.setStatus("current")
_OcnCrntPMEntry_Object = MibTableRow
ocnCrntPMEntry = _OcnCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1)
)
ocnCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ocnCrntPMTypeIdx"),
    (0, "BTI-7000-MIB", "ocnCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "ocnCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "ocnCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "ocnCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    ocnCrntPMEntry.setStatus("current")
_OcnCrntPMTypeIdx_Type = OcnType
_OcnCrntPMTypeIdx_Object = MibTableColumn
ocnCrntPMTypeIdx = _OcnCrntPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 1),
    _OcnCrntPMTypeIdx_Type()
)
ocnCrntPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnCrntPMTypeIdx.setStatus("current")


class _OcnCrntPMShelfIdx_Type(Integer32):
    """Custom type ocnCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OcnCrntPMShelfIdx_Type.__name__ = "Integer32"
_OcnCrntPMShelfIdx_Object = MibTableColumn
ocnCrntPMShelfIdx = _OcnCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 2),
    _OcnCrntPMShelfIdx_Type()
)
ocnCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnCrntPMShelfIdx.setStatus("current")


class _OcnCrntPMSlotIdx_Type(Integer32):
    """Custom type ocnCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OcnCrntPMSlotIdx_Type.__name__ = "Integer32"
_OcnCrntPMSlotIdx_Object = MibTableColumn
ocnCrntPMSlotIdx = _OcnCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 3),
    _OcnCrntPMSlotIdx_Type()
)
ocnCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnCrntPMSlotIdx.setStatus("current")


class _OcnCrntPMPortIdx_Type(Integer32):
    """Custom type ocnCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_OcnCrntPMPortIdx_Type.__name__ = "Integer32"
_OcnCrntPMPortIdx_Object = MibTableColumn
ocnCrntPMPortIdx = _OcnCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 4),
    _OcnCrntPMPortIdx_Type()
)
ocnCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnCrntPMPortIdx.setStatus("current")
_OcnCrntPMIntervalTypeIdx_Type = PMIntervalType
_OcnCrntPMIntervalTypeIdx_Object = MibTableColumn
ocnCrntPMIntervalTypeIdx = _OcnCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 5),
    _OcnCrntPMIntervalTypeIdx_Type()
)
ocnCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnCrntPMIntervalTypeIdx.setStatus("current")
_OcnCrntPMOPRValue_Type = FixedX10
_OcnCrntPMOPRValue_Object = MibTableColumn
ocnCrntPMOPRValue = _OcnCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 6),
    _OcnCrntPMOPRValue_Type()
)
ocnCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMOPRValue.setUnits("dBm/10")
_OcnCrntPMOPRTimeStamp_Type = DateAndTime
_OcnCrntPMOPRTimeStamp_Object = MibTableColumn
ocnCrntPMOPRTimeStamp = _OcnCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 7),
    _OcnCrntPMOPRTimeStamp_Type()
)
ocnCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRTimeStamp.setStatus("current")
_OcnCrntPMOPRValidity_Type = PMValidity
_OcnCrntPMOPRValidity_Object = MibTableColumn
ocnCrntPMOPRValidity = _OcnCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 8),
    _OcnCrntPMOPRValidity_Type()
)
ocnCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRValidity.setStatus("current")
_OcnCrntPMOPTValue_Type = FixedX10
_OcnCrntPMOPTValue_Object = MibTableColumn
ocnCrntPMOPTValue = _OcnCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 9),
    _OcnCrntPMOPTValue_Type()
)
ocnCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMOPTValue.setUnits("dBm/10")
_OcnCrntPMOPTTimeStamp_Type = DateAndTime
_OcnCrntPMOPTTimeStamp_Object = MibTableColumn
ocnCrntPMOPTTimeStamp = _OcnCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 10),
    _OcnCrntPMOPTTimeStamp_Type()
)
ocnCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTTimeStamp.setStatus("current")
_OcnCrntPMOPTValidity_Type = PMValidity
_OcnCrntPMOPTValidity_Object = MibTableColumn
ocnCrntPMOPTValidity = _OcnCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 11),
    _OcnCrntPMOPTValidity_Type()
)
ocnCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTValidity.setStatus("current")


class _OcnCrntPMTempValue_Type(Integer32):
    """Custom type ocnCrntPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OcnCrntPMTempValue_Type.__name__ = "Integer32"
_OcnCrntPMTempValue_Object = MibTableColumn
ocnCrntPMTempValue = _OcnCrntPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 12),
    _OcnCrntPMTempValue_Type()
)
ocnCrntPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMTempValue.setUnits("degrees Celsius")
_OcnCrntPMTempTimeStamp_Type = DateAndTime
_OcnCrntPMTempTimeStamp_Object = MibTableColumn
ocnCrntPMTempTimeStamp = _OcnCrntPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 13),
    _OcnCrntPMTempTimeStamp_Type()
)
ocnCrntPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMTempTimeStamp.setStatus("current")
_OcnCrntPMTempValidity_Type = PMValidity
_OcnCrntPMTempValidity_Object = MibTableColumn
ocnCrntPMTempValidity = _OcnCrntPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 14),
    _OcnCrntPMTempValidity_Type()
)
ocnCrntPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMTempValidity.setStatus("current")
_OcnCrntPMSupplyVoltageValue_Type = FixedX10
_OcnCrntPMSupplyVoltageValue_Object = MibTableColumn
ocnCrntPMSupplyVoltageValue = _OcnCrntPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 15),
    _OcnCrntPMSupplyVoltageValue_Type()
)
ocnCrntPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMSupplyVoltageValue.setUnits("mVolts/10")
_OcnCrntPMSupplyVoltageTimeStamp_Type = DateAndTime
_OcnCrntPMSupplyVoltageTimeStamp_Object = MibTableColumn
ocnCrntPMSupplyVoltageTimeStamp = _OcnCrntPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 16),
    _OcnCrntPMSupplyVoltageTimeStamp_Type()
)
ocnCrntPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSupplyVoltageTimeStamp.setStatus("current")
_OcnCrntPMSupplyVoltageValidity_Type = PMValidity
_OcnCrntPMSupplyVoltageValidity_Object = MibTableColumn
ocnCrntPMSupplyVoltageValidity = _OcnCrntPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 17),
    _OcnCrntPMSupplyVoltageValidity_Type()
)
ocnCrntPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSupplyVoltageValidity.setStatus("current")


class _OcnCrntPMLBCValue_Type(Integer32):
    """Custom type ocnCrntPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OcnCrntPMLBCValue_Type.__name__ = "Integer32"
_OcnCrntPMLBCValue_Object = MibTableColumn
ocnCrntPMLBCValue = _OcnCrntPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 18),
    _OcnCrntPMLBCValue_Type()
)
ocnCrntPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMLBCValue.setUnits("mAmp")
_OcnCrntPMLBCTimeStamp_Type = DateAndTime
_OcnCrntPMLBCTimeStamp_Object = MibTableColumn
ocnCrntPMLBCTimeStamp = _OcnCrntPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 19),
    _OcnCrntPMLBCTimeStamp_Type()
)
ocnCrntPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMLBCTimeStamp.setStatus("current")
_OcnCrntPMLBCValidity_Type = PMValidity
_OcnCrntPMLBCValidity_Object = MibTableColumn
ocnCrntPMLBCValidity = _OcnCrntPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 20),
    _OcnCrntPMLBCValidity_Type()
)
ocnCrntPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMLBCValidity.setStatus("current")
_OcnCrntPMCVSValue_Type = Unsigned32
_OcnCrntPMCVSValue_Object = MibTableColumn
ocnCrntPMCVSValue = _OcnCrntPMCVSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 21),
    _OcnCrntPMCVSValue_Type()
)
ocnCrntPMCVSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMCVSValue.setStatus("current")
_OcnCrntPMCVSTimeStamp_Type = DateAndTime
_OcnCrntPMCVSTimeStamp_Object = MibTableColumn
ocnCrntPMCVSTimeStamp = _OcnCrntPMCVSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 22),
    _OcnCrntPMCVSTimeStamp_Type()
)
ocnCrntPMCVSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMCVSTimeStamp.setStatus("current")
_OcnCrntPMCVSValidity_Type = PMValidity
_OcnCrntPMCVSValidity_Object = MibTableColumn
ocnCrntPMCVSValidity = _OcnCrntPMCVSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 23),
    _OcnCrntPMCVSValidity_Type()
)
ocnCrntPMCVSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMCVSValidity.setStatus("current")
_OcnCrntPMESSValue_Type = Unsigned32
_OcnCrntPMESSValue_Object = MibTableColumn
ocnCrntPMESSValue = _OcnCrntPMESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 24),
    _OcnCrntPMESSValue_Type()
)
ocnCrntPMESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMESSValue.setStatus("current")
_OcnCrntPMESSTimeStamp_Type = DateAndTime
_OcnCrntPMESSTimeStamp_Object = MibTableColumn
ocnCrntPMESSTimeStamp = _OcnCrntPMESSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 25),
    _OcnCrntPMESSTimeStamp_Type()
)
ocnCrntPMESSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMESSTimeStamp.setStatus("current")
_OcnCrntPMESSValidity_Type = PMValidity
_OcnCrntPMESSValidity_Object = MibTableColumn
ocnCrntPMESSValidity = _OcnCrntPMESSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 26),
    _OcnCrntPMESSValidity_Type()
)
ocnCrntPMESSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMESSValidity.setStatus("current")
_OcnCrntPMSESSValue_Type = Unsigned32
_OcnCrntPMSESSValue_Object = MibTableColumn
ocnCrntPMSESSValue = _OcnCrntPMSESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 27),
    _OcnCrntPMSESSValue_Type()
)
ocnCrntPMSESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMSESSValue.setStatus("current")
_OcnCrntPMSESSTimeStamp_Type = DateAndTime
_OcnCrntPMSESSTimeStamp_Object = MibTableColumn
ocnCrntPMSESSTimeStamp = _OcnCrntPMSESSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 28),
    _OcnCrntPMSESSTimeStamp_Type()
)
ocnCrntPMSESSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSESSTimeStamp.setStatus("current")
_OcnCrntPMSESSValidity_Type = PMValidity
_OcnCrntPMSESSValidity_Object = MibTableColumn
ocnCrntPMSESSValidity = _OcnCrntPMSESSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 29),
    _OcnCrntPMSESSValidity_Type()
)
ocnCrntPMSESSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSESSValidity.setStatus("current")
_OcnCrntPMSEFSSValue_Type = Unsigned32
_OcnCrntPMSEFSSValue_Object = MibTableColumn
ocnCrntPMSEFSSValue = _OcnCrntPMSEFSSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 30),
    _OcnCrntPMSEFSSValue_Type()
)
ocnCrntPMSEFSSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMSEFSSValue.setStatus("current")
_OcnCrntPMSEFSSTimeStamp_Type = DateAndTime
_OcnCrntPMSEFSSTimeStamp_Object = MibTableColumn
ocnCrntPMSEFSSTimeStamp = _OcnCrntPMSEFSSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 31),
    _OcnCrntPMSEFSSTimeStamp_Type()
)
ocnCrntPMSEFSSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSEFSSTimeStamp.setStatus("current")
_OcnCrntPMSEFSSValidity_Type = PMValidity
_OcnCrntPMSEFSSValidity_Object = MibTableColumn
ocnCrntPMSEFSSValidity = _OcnCrntPMSEFSSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 32),
    _OcnCrntPMSEFSSValidity_Type()
)
ocnCrntPMSEFSSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSEFSSValidity.setStatus("current")
_OcnCrntPMSupplyVoltage2Value_Type = FixedX10
_OcnCrntPMSupplyVoltage2Value_Object = MibTableColumn
ocnCrntPMSupplyVoltage2Value = _OcnCrntPMSupplyVoltage2Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 33),
    _OcnCrntPMSupplyVoltage2Value_Type()
)
ocnCrntPMSupplyVoltage2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSupplyVoltage2Value.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMSupplyVoltage2Value.setUnits("mVolts/10")
_OcnCrntPMSupplyVoltage2TimeStamp_Type = DateAndTime
_OcnCrntPMSupplyVoltage2TimeStamp_Object = MibTableColumn
ocnCrntPMSupplyVoltage2TimeStamp = _OcnCrntPMSupplyVoltage2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 34),
    _OcnCrntPMSupplyVoltage2TimeStamp_Type()
)
ocnCrntPMSupplyVoltage2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSupplyVoltage2TimeStamp.setStatus("current")
_OcnCrntPMSupplyVoltage2Validity_Type = PMValidity
_OcnCrntPMSupplyVoltage2Validity_Object = MibTableColumn
ocnCrntPMSupplyVoltage2Validity = _OcnCrntPMSupplyVoltage2Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 35),
    _OcnCrntPMSupplyVoltage2Validity_Type()
)
ocnCrntPMSupplyVoltage2Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSupplyVoltage2Validity.setStatus("current")
_OcnCrntPMCVLValue_Type = Unsigned32
_OcnCrntPMCVLValue_Object = MibTableColumn
ocnCrntPMCVLValue = _OcnCrntPMCVLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 36),
    _OcnCrntPMCVLValue_Type()
)
ocnCrntPMCVLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMCVLValue.setStatus("current")
_OcnCrntPMCVLTimeStamp_Type = DateAndTime
_OcnCrntPMCVLTimeStamp_Object = MibTableColumn
ocnCrntPMCVLTimeStamp = _OcnCrntPMCVLTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 37),
    _OcnCrntPMCVLTimeStamp_Type()
)
ocnCrntPMCVLTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMCVLTimeStamp.setStatus("current")
_OcnCrntPMCVLValidity_Type = PMValidity
_OcnCrntPMCVLValidity_Object = MibTableColumn
ocnCrntPMCVLValidity = _OcnCrntPMCVLValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 38),
    _OcnCrntPMCVLValidity_Type()
)
ocnCrntPMCVLValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMCVLValidity.setStatus("current")
_OcnCrntPMESLValue_Type = Unsigned32
_OcnCrntPMESLValue_Object = MibTableColumn
ocnCrntPMESLValue = _OcnCrntPMESLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 39),
    _OcnCrntPMESLValue_Type()
)
ocnCrntPMESLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMESLValue.setStatus("current")
_OcnCrntPMESLTimeStamp_Type = DateAndTime
_OcnCrntPMESLTimeStamp_Object = MibTableColumn
ocnCrntPMESLTimeStamp = _OcnCrntPMESLTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 40),
    _OcnCrntPMESLTimeStamp_Type()
)
ocnCrntPMESLTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMESLTimeStamp.setStatus("current")
_OcnCrntPMESLValidity_Type = PMValidity
_OcnCrntPMESLValidity_Object = MibTableColumn
ocnCrntPMESLValidity = _OcnCrntPMESLValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 41),
    _OcnCrntPMESLValidity_Type()
)
ocnCrntPMESLValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMESLValidity.setStatus("current")
_OcnCrntPMSESLValue_Type = Unsigned32
_OcnCrntPMSESLValue_Object = MibTableColumn
ocnCrntPMSESLValue = _OcnCrntPMSESLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 42),
    _OcnCrntPMSESLValue_Type()
)
ocnCrntPMSESLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMSESLValue.setStatus("current")
_OcnCrntPMSESLTimeStamp_Type = DateAndTime
_OcnCrntPMSESLTimeStamp_Object = MibTableColumn
ocnCrntPMSESLTimeStamp = _OcnCrntPMSESLTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 43),
    _OcnCrntPMSESLTimeStamp_Type()
)
ocnCrntPMSESLTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSESLTimeStamp.setStatus("current")
_OcnCrntPMSESLValidity_Type = PMValidity
_OcnCrntPMSESLValidity_Object = MibTableColumn
ocnCrntPMSESLValidity = _OcnCrntPMSESLValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 44),
    _OcnCrntPMSESLValidity_Type()
)
ocnCrntPMSESLValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMSESLValidity.setStatus("current")
_OcnCrntPMUASLValue_Type = Unsigned32
_OcnCrntPMUASLValue_Object = MibTableColumn
ocnCrntPMUASLValue = _OcnCrntPMUASLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 45),
    _OcnCrntPMUASLValue_Type()
)
ocnCrntPMUASLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMUASLValue.setStatus("current")
_OcnCrntPMUASLTimeStamp_Type = DateAndTime
_OcnCrntPMUASLTimeStamp_Object = MibTableColumn
ocnCrntPMUASLTimeStamp = _OcnCrntPMUASLTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 46),
    _OcnCrntPMUASLTimeStamp_Type()
)
ocnCrntPMUASLTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMUASLTimeStamp.setStatus("current")
_OcnCrntPMUASLValidity_Type = PMValidity
_OcnCrntPMUASLValidity_Object = MibTableColumn
ocnCrntPMUASLValidity = _OcnCrntPMUASLValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 47),
    _OcnCrntPMUASLValidity_Type()
)
ocnCrntPMUASLValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMUASLValidity.setStatus("current")
_OcnCrntPMOTUEBValue_Type = Unsigned32
_OcnCrntPMOTUEBValue_Object = MibTableColumn
ocnCrntPMOTUEBValue = _OcnCrntPMOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 48),
    _OcnCrntPMOTUEBValue_Type()
)
ocnCrntPMOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUEBValue.setStatus("current")
_OcnCrntPMOTUEBTimeStamp_Type = DateAndTime
_OcnCrntPMOTUEBTimeStamp_Object = MibTableColumn
ocnCrntPMOTUEBTimeStamp = _OcnCrntPMOTUEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 49),
    _OcnCrntPMOTUEBTimeStamp_Type()
)
ocnCrntPMOTUEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUEBTimeStamp.setStatus("current")
_OcnCrntPMOTUEBValidity_Type = PMValidity
_OcnCrntPMOTUEBValidity_Object = MibTableColumn
ocnCrntPMOTUEBValidity = _OcnCrntPMOTUEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 50),
    _OcnCrntPMOTUEBValidity_Type()
)
ocnCrntPMOTUEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUEBValidity.setStatus("current")
_OcnCrntPMOTUBBEValue_Type = Unsigned32
_OcnCrntPMOTUBBEValue_Object = MibTableColumn
ocnCrntPMOTUBBEValue = _OcnCrntPMOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 51),
    _OcnCrntPMOTUBBEValue_Type()
)
ocnCrntPMOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUBBEValue.setStatus("current")
_OcnCrntPMOTUBBETimeStamp_Type = DateAndTime
_OcnCrntPMOTUBBETimeStamp_Object = MibTableColumn
ocnCrntPMOTUBBETimeStamp = _OcnCrntPMOTUBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 52),
    _OcnCrntPMOTUBBETimeStamp_Type()
)
ocnCrntPMOTUBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUBBETimeStamp.setStatus("current")
_OcnCrntPMOTUBBEValidity_Type = PMValidity
_OcnCrntPMOTUBBEValidity_Object = MibTableColumn
ocnCrntPMOTUBBEValidity = _OcnCrntPMOTUBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 53),
    _OcnCrntPMOTUBBEValidity_Type()
)
ocnCrntPMOTUBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUBBEValidity.setStatus("current")
_OcnCrntPMOTUESValue_Type = Unsigned32
_OcnCrntPMOTUESValue_Object = MibTableColumn
ocnCrntPMOTUESValue = _OcnCrntPMOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 54),
    _OcnCrntPMOTUESValue_Type()
)
ocnCrntPMOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUESValue.setStatus("current")
_OcnCrntPMOTUESTimeStamp_Type = DateAndTime
_OcnCrntPMOTUESTimeStamp_Object = MibTableColumn
ocnCrntPMOTUESTimeStamp = _OcnCrntPMOTUESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 55),
    _OcnCrntPMOTUESTimeStamp_Type()
)
ocnCrntPMOTUESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUESTimeStamp.setStatus("current")
_OcnCrntPMOTUESValidity_Type = PMValidity
_OcnCrntPMOTUESValidity_Object = MibTableColumn
ocnCrntPMOTUESValidity = _OcnCrntPMOTUESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 56),
    _OcnCrntPMOTUESValidity_Type()
)
ocnCrntPMOTUESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUESValidity.setStatus("current")
_OcnCrntPMOTUSESValue_Type = Unsigned32
_OcnCrntPMOTUSESValue_Object = MibTableColumn
ocnCrntPMOTUSESValue = _OcnCrntPMOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 57),
    _OcnCrntPMOTUSESValue_Type()
)
ocnCrntPMOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUSESValue.setStatus("current")
_OcnCrntPMOTUSESTimeStamp_Type = DateAndTime
_OcnCrntPMOTUSESTimeStamp_Object = MibTableColumn
ocnCrntPMOTUSESTimeStamp = _OcnCrntPMOTUSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 58),
    _OcnCrntPMOTUSESTimeStamp_Type()
)
ocnCrntPMOTUSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUSESTimeStamp.setStatus("current")
_OcnCrntPMOTUSESValidity_Type = PMValidity
_OcnCrntPMOTUSESValidity_Object = MibTableColumn
ocnCrntPMOTUSESValidity = _OcnCrntPMOTUSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 59),
    _OcnCrntPMOTUSESValidity_Type()
)
ocnCrntPMOTUSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUSESValidity.setStatus("current")
_OcnCrntPMOTUOFSValue_Type = Unsigned32
_OcnCrntPMOTUOFSValue_Object = MibTableColumn
ocnCrntPMOTUOFSValue = _OcnCrntPMOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 60),
    _OcnCrntPMOTUOFSValue_Type()
)
ocnCrntPMOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUOFSValue.setStatus("current")
_OcnCrntPMOTUOFSTimeStamp_Type = DateAndTime
_OcnCrntPMOTUOFSTimeStamp_Object = MibTableColumn
ocnCrntPMOTUOFSTimeStamp = _OcnCrntPMOTUOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 61),
    _OcnCrntPMOTUOFSTimeStamp_Type()
)
ocnCrntPMOTUOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUOFSTimeStamp.setStatus("current")
_OcnCrntPMOTUOFSValidity_Type = PMValidity
_OcnCrntPMOTUOFSValidity_Object = MibTableColumn
ocnCrntPMOTUOFSValidity = _OcnCrntPMOTUOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 62),
    _OcnCrntPMOTUOFSValidity_Type()
)
ocnCrntPMOTUOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUOFSValidity.setStatus("current")
_OcnCrntPMNBITCRValue_Type = Unsigned32
_OcnCrntPMNBITCRValue_Object = MibTableColumn
ocnCrntPMNBITCRValue = _OcnCrntPMNBITCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 63),
    _OcnCrntPMNBITCRValue_Type()
)
ocnCrntPMNBITCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMNBITCRValue.setStatus("current")
_OcnCrntPMNBITCRTimeStamp_Type = DateAndTime
_OcnCrntPMNBITCRTimeStamp_Object = MibTableColumn
ocnCrntPMNBITCRTimeStamp = _OcnCrntPMNBITCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 64),
    _OcnCrntPMNBITCRTimeStamp_Type()
)
ocnCrntPMNBITCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBITCRTimeStamp.setStatus("current")
_OcnCrntPMNBITCRValidity_Type = PMValidity
_OcnCrntPMNBITCRValidity_Object = MibTableColumn
ocnCrntPMNBITCRValidity = _OcnCrntPMNBITCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 65),
    _OcnCrntPMNBITCRValidity_Type()
)
ocnCrntPMNBITCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBITCRValidity.setStatus("current")
_OcnCrntPMNBYTCRValue_Type = Unsigned32
_OcnCrntPMNBYTCRValue_Object = MibTableColumn
ocnCrntPMNBYTCRValue = _OcnCrntPMNBYTCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 66),
    _OcnCrntPMNBYTCRValue_Type()
)
ocnCrntPMNBYTCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMNBYTCRValue.setStatus("current")
_OcnCrntPMNBYTCRTimeStamp_Type = DateAndTime
_OcnCrntPMNBYTCRTimeStamp_Object = MibTableColumn
ocnCrntPMNBYTCRTimeStamp = _OcnCrntPMNBYTCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 67),
    _OcnCrntPMNBYTCRTimeStamp_Type()
)
ocnCrntPMNBYTCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBYTCRTimeStamp.setStatus("current")
_OcnCrntPMNBYTCRValidity_Type = PMValidity
_OcnCrntPMNBYTCRValidity_Object = MibTableColumn
ocnCrntPMNBYTCRValidity = _OcnCrntPMNBYTCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 68),
    _OcnCrntPMNBYTCRValidity_Type()
)
ocnCrntPMNBYTCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBYTCRValidity.setStatus("current")
_OcnCrntPMUNCRCDWValue_Type = Unsigned32
_OcnCrntPMUNCRCDWValue_Object = MibTableColumn
ocnCrntPMUNCRCDWValue = _OcnCrntPMUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 69),
    _OcnCrntPMUNCRCDWValue_Type()
)
ocnCrntPMUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMUNCRCDWValue.setStatus("current")
_OcnCrntPMUNCRCDWTimeStamp_Type = DateAndTime
_OcnCrntPMUNCRCDWTimeStamp_Object = MibTableColumn
ocnCrntPMUNCRCDWTimeStamp = _OcnCrntPMUNCRCDWTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 70),
    _OcnCrntPMUNCRCDWTimeStamp_Type()
)
ocnCrntPMUNCRCDWTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMUNCRCDWTimeStamp.setStatus("current")
_OcnCrntPMUNCRCDWValidity_Type = PMValidity
_OcnCrntPMUNCRCDWValidity_Object = MibTableColumn
ocnCrntPMUNCRCDWValidity = _OcnCrntPMUNCRCDWValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 71),
    _OcnCrntPMUNCRCDWValidity_Type()
)
ocnCrntPMUNCRCDWValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMUNCRCDWValidity.setStatus("current")
_OcnCrntPMCVSInitialize_Type = InitializeCmd
_OcnCrntPMCVSInitialize_Object = MibTableColumn
ocnCrntPMCVSInitialize = _OcnCrntPMCVSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 72),
    _OcnCrntPMCVSInitialize_Type()
)
ocnCrntPMCVSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMCVSInitialize.setStatus("current")
_OcnCrntPMESSInitialize_Type = InitializeCmd
_OcnCrntPMESSInitialize_Object = MibTableColumn
ocnCrntPMESSInitialize = _OcnCrntPMESSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 73),
    _OcnCrntPMESSInitialize_Type()
)
ocnCrntPMESSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMESSInitialize.setStatus("current")
_OcnCrntPMSESSInitialize_Type = InitializeCmd
_OcnCrntPMSESSInitialize_Object = MibTableColumn
ocnCrntPMSESSInitialize = _OcnCrntPMSESSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 74),
    _OcnCrntPMSESSInitialize_Type()
)
ocnCrntPMSESSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMSESSInitialize.setStatus("current")
_OcnCrntPMSEFSSInitialize_Type = InitializeCmd
_OcnCrntPMSEFSSInitialize_Object = MibTableColumn
ocnCrntPMSEFSSInitialize = _OcnCrntPMSEFSSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 75),
    _OcnCrntPMSEFSSInitialize_Type()
)
ocnCrntPMSEFSSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMSEFSSInitialize.setStatus("current")
_OcnCrntPMCVLInitialize_Type = InitializeCmd
_OcnCrntPMCVLInitialize_Object = MibTableColumn
ocnCrntPMCVLInitialize = _OcnCrntPMCVLInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 76),
    _OcnCrntPMCVLInitialize_Type()
)
ocnCrntPMCVLInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMCVLInitialize.setStatus("current")
_OcnCrntPMESLInitialize_Type = InitializeCmd
_OcnCrntPMESLInitialize_Object = MibTableColumn
ocnCrntPMESLInitialize = _OcnCrntPMESLInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 77),
    _OcnCrntPMESLInitialize_Type()
)
ocnCrntPMESLInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMESLInitialize.setStatus("current")
_OcnCrntPMSESLInitialize_Type = InitializeCmd
_OcnCrntPMSESLInitialize_Object = MibTableColumn
ocnCrntPMSESLInitialize = _OcnCrntPMSESLInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 78),
    _OcnCrntPMSESLInitialize_Type()
)
ocnCrntPMSESLInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMSESLInitialize.setStatus("current")
_OcnCrntPMUASLInitialize_Type = InitializeCmd
_OcnCrntPMUASLInitialize_Object = MibTableColumn
ocnCrntPMUASLInitialize = _OcnCrntPMUASLInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 79),
    _OcnCrntPMUASLInitialize_Type()
)
ocnCrntPMUASLInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMUASLInitialize.setStatus("current")
_OcnCrntPMOTUEBInitialize_Type = InitializeCmd
_OcnCrntPMOTUEBInitialize_Object = MibTableColumn
ocnCrntPMOTUEBInitialize = _OcnCrntPMOTUEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 80),
    _OcnCrntPMOTUEBInitialize_Type()
)
ocnCrntPMOTUEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUEBInitialize.setStatus("current")
_OcnCrntPMOTUBBEInitialize_Type = InitializeCmd
_OcnCrntPMOTUBBEInitialize_Object = MibTableColumn
ocnCrntPMOTUBBEInitialize = _OcnCrntPMOTUBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 81),
    _OcnCrntPMOTUBBEInitialize_Type()
)
ocnCrntPMOTUBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUBBEInitialize.setStatus("current")
_OcnCrntPMOTUESInitialize_Type = InitializeCmd
_OcnCrntPMOTUESInitialize_Object = MibTableColumn
ocnCrntPMOTUESInitialize = _OcnCrntPMOTUESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 82),
    _OcnCrntPMOTUESInitialize_Type()
)
ocnCrntPMOTUESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUESInitialize.setStatus("current")
_OcnCrntPMOTUSESInitialize_Type = InitializeCmd
_OcnCrntPMOTUSESInitialize_Object = MibTableColumn
ocnCrntPMOTUSESInitialize = _OcnCrntPMOTUSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 83),
    _OcnCrntPMOTUSESInitialize_Type()
)
ocnCrntPMOTUSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUSESInitialize.setStatus("current")
_OcnCrntPMOTUOFSInitialize_Type = InitializeCmd
_OcnCrntPMOTUOFSInitialize_Object = MibTableColumn
ocnCrntPMOTUOFSInitialize = _OcnCrntPMOTUOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 84),
    _OcnCrntPMOTUOFSInitialize_Type()
)
ocnCrntPMOTUOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUOFSInitialize.setStatus("current")
_OcnCrntPMNBITCRInitialize_Type = InitializeCmd
_OcnCrntPMNBITCRInitialize_Object = MibTableColumn
ocnCrntPMNBITCRInitialize = _OcnCrntPMNBITCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 85),
    _OcnCrntPMNBITCRInitialize_Type()
)
ocnCrntPMNBITCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMNBITCRInitialize.setStatus("current")
_OcnCrntPMNBYTCRInitialize_Type = InitializeCmd
_OcnCrntPMNBYTCRInitialize_Object = MibTableColumn
ocnCrntPMNBYTCRInitialize = _OcnCrntPMNBYTCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 86),
    _OcnCrntPMNBYTCRInitialize_Type()
)
ocnCrntPMNBYTCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMNBYTCRInitialize.setStatus("current")
_OcnCrntPMUNCRCDWInitialize_Type = InitializeCmd
_OcnCrntPMUNCRCDWInitialize_Object = MibTableColumn
ocnCrntPMUNCRCDWInitialize = _OcnCrntPMUNCRCDWInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 87),
    _OcnCrntPMUNCRCDWInitialize_Type()
)
ocnCrntPMUNCRCDWInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMUNCRCDWInitialize.setStatus("current")
_OcnCrntPMOTNBERValue_Type = DisplayString
_OcnCrntPMOTNBERValue_Object = MibTableColumn
ocnCrntPMOTNBERValue = _OcnCrntPMOTNBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 88),
    _OcnCrntPMOTNBERValue_Type()
)
ocnCrntPMOTNBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTNBERValue.setStatus("current")
_OcnCrntPMOTNBERTimeStamp_Type = DateAndTime
_OcnCrntPMOTNBERTimeStamp_Object = MibTableColumn
ocnCrntPMOTNBERTimeStamp = _OcnCrntPMOTNBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 89),
    _OcnCrntPMOTNBERTimeStamp_Type()
)
ocnCrntPMOTNBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTNBERTimeStamp.setStatus("current")
_OcnCrntPMOTNBERValidity_Type = PMValidity
_OcnCrntPMOTNBERValidity_Object = MibTableColumn
ocnCrntPMOTNBERValidity = _OcnCrntPMOTNBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 90),
    _OcnCrntPMOTNBERValidity_Type()
)
ocnCrntPMOTNBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTNBERValidity.setStatus("current")
_OcnCrntPMOTNBERInitialize_Type = InitializeCmd
_OcnCrntPMOTNBERInitialize_Object = MibTableColumn
ocnCrntPMOTNBERInitialize = _OcnCrntPMOTNBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 91),
    _OcnCrntPMOTNBERInitialize_Type()
)
ocnCrntPMOTNBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTNBERInitialize.setStatus("current")
_OcnCrntPMOTNAVGBERValue_Type = DisplayString
_OcnCrntPMOTNAVGBERValue_Object = MibTableColumn
ocnCrntPMOTNAVGBERValue = _OcnCrntPMOTNAVGBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 92),
    _OcnCrntPMOTNAVGBERValue_Type()
)
ocnCrntPMOTNAVGBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTNAVGBERValue.setStatus("current")
_OcnCrntPMOTNAVGBERTimeStamp_Type = DateAndTime
_OcnCrntPMOTNAVGBERTimeStamp_Object = MibTableColumn
ocnCrntPMOTNAVGBERTimeStamp = _OcnCrntPMOTNAVGBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 93),
    _OcnCrntPMOTNAVGBERTimeStamp_Type()
)
ocnCrntPMOTNAVGBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTNAVGBERTimeStamp.setStatus("current")
_OcnCrntPMOTNAVGBERValidity_Type = PMValidity
_OcnCrntPMOTNAVGBERValidity_Object = MibTableColumn
ocnCrntPMOTNAVGBERValidity = _OcnCrntPMOTNAVGBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 94),
    _OcnCrntPMOTNAVGBERValidity_Type()
)
ocnCrntPMOTNAVGBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTNAVGBERValidity.setStatus("current")
_OcnCrntPMOTNAVGBERInitialize_Type = InitializeCmd
_OcnCrntPMOTNAVGBERInitialize_Object = MibTableColumn
ocnCrntPMOTNAVGBERInitialize = _OcnCrntPMOTNAVGBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 95),
    _OcnCrntPMOTNAVGBERInitialize_Type()
)
ocnCrntPMOTNAVGBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTNAVGBERInitialize.setStatus("current")
_OcnCrntPMNBITCR64BitValue_Type = Unsigned64
_OcnCrntPMNBITCR64BitValue_Object = MibTableColumn
ocnCrntPMNBITCR64BitValue = _OcnCrntPMNBITCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 96),
    _OcnCrntPMNBITCR64BitValue_Type()
)
ocnCrntPMNBITCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBITCR64BitValue.setStatus("current")
_OcnCrntPMNBITCR64BitTimeStamp_Type = DateAndTime
_OcnCrntPMNBITCR64BitTimeStamp_Object = MibTableColumn
ocnCrntPMNBITCR64BitTimeStamp = _OcnCrntPMNBITCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 97),
    _OcnCrntPMNBITCR64BitTimeStamp_Type()
)
ocnCrntPMNBITCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBITCR64BitTimeStamp.setStatus("current")
_OcnCrntPMNBITCR64BitValidity_Type = PMValidity
_OcnCrntPMNBITCR64BitValidity_Object = MibTableColumn
ocnCrntPMNBITCR64BitValidity = _OcnCrntPMNBITCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 98),
    _OcnCrntPMNBITCR64BitValidity_Type()
)
ocnCrntPMNBITCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBITCR64BitValidity.setStatus("current")
_OcnCrntPMNBITCR64BitInitialize_Type = InitializeCmd
_OcnCrntPMNBITCR64BitInitialize_Object = MibTableColumn
ocnCrntPMNBITCR64BitInitialize = _OcnCrntPMNBITCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 99),
    _OcnCrntPMNBITCR64BitInitialize_Type()
)
ocnCrntPMNBITCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMNBITCR64BitInitialize.setStatus("current")
_OcnCrntPMNBYTCR64BitValue_Type = Unsigned64
_OcnCrntPMNBYTCR64BitValue_Object = MibTableColumn
ocnCrntPMNBYTCR64BitValue = _OcnCrntPMNBYTCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 100),
    _OcnCrntPMNBYTCR64BitValue_Type()
)
ocnCrntPMNBYTCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBYTCR64BitValue.setStatus("current")
_OcnCrntPMNBYTCR64BitTimeStamp_Type = DateAndTime
_OcnCrntPMNBYTCR64BitTimeStamp_Object = MibTableColumn
ocnCrntPMNBYTCR64BitTimeStamp = _OcnCrntPMNBYTCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 101),
    _OcnCrntPMNBYTCR64BitTimeStamp_Type()
)
ocnCrntPMNBYTCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBYTCR64BitTimeStamp.setStatus("current")
_OcnCrntPMNBYTCR64BitValidity_Type = PMValidity
_OcnCrntPMNBYTCR64BitValidity_Object = MibTableColumn
ocnCrntPMNBYTCR64BitValidity = _OcnCrntPMNBYTCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 102),
    _OcnCrntPMNBYTCR64BitValidity_Type()
)
ocnCrntPMNBYTCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMNBYTCR64BitValidity.setStatus("current")
_OcnCrntPMNBYTCR64BitInitialize_Type = InitializeCmd
_OcnCrntPMNBYTCR64BitInitialize_Object = MibTableColumn
ocnCrntPMNBYTCR64BitInitialize = _OcnCrntPMNBYTCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 103),
    _OcnCrntPMNBYTCR64BitInitialize_Type()
)
ocnCrntPMNBYTCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMNBYTCR64BitInitialize.setStatus("current")
_OcnCrntPMUASSValue_Type = Unsigned32
_OcnCrntPMUASSValue_Object = MibTableColumn
ocnCrntPMUASSValue = _OcnCrntPMUASSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 104),
    _OcnCrntPMUASSValue_Type()
)
ocnCrntPMUASSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMUASSValue.setStatus("current")
_OcnCrntPMUASSTimeStamp_Type = DateAndTime
_OcnCrntPMUASSTimeStamp_Object = MibTableColumn
ocnCrntPMUASSTimeStamp = _OcnCrntPMUASSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 105),
    _OcnCrntPMUASSTimeStamp_Type()
)
ocnCrntPMUASSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMUASSTimeStamp.setStatus("current")
_OcnCrntPMUASSValidity_Type = PMValidity
_OcnCrntPMUASSValidity_Object = MibTableColumn
ocnCrntPMUASSValidity = _OcnCrntPMUASSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 106),
    _OcnCrntPMUASSValidity_Type()
)
ocnCrntPMUASSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMUASSValidity.setStatus("current")
_OcnCrntPMUASSInitialize_Type = InitializeCmd
_OcnCrntPMUASSInitialize_Object = MibTableColumn
ocnCrntPMUASSInitialize = _OcnCrntPMUASSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 107),
    _OcnCrntPMUASSInitialize_Type()
)
ocnCrntPMUASSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMUASSInitialize.setStatus("current")
_OcnCrntPMOTUUASValue_Type = Unsigned32
_OcnCrntPMOTUUASValue_Object = MibTableColumn
ocnCrntPMOTUUASValue = _OcnCrntPMOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 108),
    _OcnCrntPMOTUUASValue_Type()
)
ocnCrntPMOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUUASValue.setStatus("current")
_OcnCrntPMOTUUASTimeStamp_Type = DateAndTime
_OcnCrntPMOTUUASTimeStamp_Object = MibTableColumn
ocnCrntPMOTUUASTimeStamp = _OcnCrntPMOTUUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 109),
    _OcnCrntPMOTUUASTimeStamp_Type()
)
ocnCrntPMOTUUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUUASTimeStamp.setStatus("current")
_OcnCrntPMOTUUASValidity_Type = PMValidity
_OcnCrntPMOTUUASValidity_Object = MibTableColumn
ocnCrntPMOTUUASValidity = _OcnCrntPMOTUUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 110),
    _OcnCrntPMOTUUASValidity_Type()
)
ocnCrntPMOTUUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOTUUASValidity.setStatus("current")
_OcnCrntPMOTUUASInitialize_Type = InitializeCmd
_OcnCrntPMOTUUASInitialize_Object = MibTableColumn
ocnCrntPMOTUUASInitialize = _OcnCrntPMOTUUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 111),
    _OcnCrntPMOTUUASInitialize_Type()
)
ocnCrntPMOTUUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOTUUASInitialize.setStatus("current")
_OcnCrntPMOPRMinValue_Type = FixedX10
_OcnCrntPMOPRMinValue_Object = MibTableColumn
ocnCrntPMOPRMinValue = _OcnCrntPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 112),
    _OcnCrntPMOPRMinValue_Type()
)
ocnCrntPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMinValue.setUnits("dBm/10")
_OcnCrntPMOPRMinTimeStamp_Type = DateAndTime
_OcnCrntPMOPRMinTimeStamp_Object = MibTableColumn
ocnCrntPMOPRMinTimeStamp = _OcnCrntPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 113),
    _OcnCrntPMOPRMinTimeStamp_Type()
)
ocnCrntPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMinTimeStamp.setStatus("current")
_OcnCrntPMOPRMinValidity_Type = PMValidity
_OcnCrntPMOPRMinValidity_Object = MibTableColumn
ocnCrntPMOPRMinValidity = _OcnCrntPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 114),
    _OcnCrntPMOPRMinValidity_Type()
)
ocnCrntPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMinValidity.setStatus("current")
_OcnCrntPMOPRMinInitialize_Type = InitializeCmd
_OcnCrntPMOPRMinInitialize_Object = MibTableColumn
ocnCrntPMOPRMinInitialize = _OcnCrntPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 115),
    _OcnCrntPMOPRMinInitialize_Type()
)
ocnCrntPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMinInitialize.setStatus("current")
_OcnCrntPMOPRMaxValue_Type = FixedX10
_OcnCrntPMOPRMaxValue_Object = MibTableColumn
ocnCrntPMOPRMaxValue = _OcnCrntPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 116),
    _OcnCrntPMOPRMaxValue_Type()
)
ocnCrntPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMaxValue.setUnits("dBm/10")
_OcnCrntPMOPRMaxTimeStamp_Type = DateAndTime
_OcnCrntPMOPRMaxTimeStamp_Object = MibTableColumn
ocnCrntPMOPRMaxTimeStamp = _OcnCrntPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 117),
    _OcnCrntPMOPRMaxTimeStamp_Type()
)
ocnCrntPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMaxTimeStamp.setStatus("current")
_OcnCrntPMOPRMaxValidity_Type = PMValidity
_OcnCrntPMOPRMaxValidity_Object = MibTableColumn
ocnCrntPMOPRMaxValidity = _OcnCrntPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 118),
    _OcnCrntPMOPRMaxValidity_Type()
)
ocnCrntPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMaxValidity.setStatus("current")
_OcnCrntPMOPRMaxInitialize_Type = InitializeCmd
_OcnCrntPMOPRMaxInitialize_Object = MibTableColumn
ocnCrntPMOPRMaxInitialize = _OcnCrntPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 119),
    _OcnCrntPMOPRMaxInitialize_Type()
)
ocnCrntPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOPRMaxInitialize.setStatus("current")
_OcnCrntPMOPRAvgValue_Type = FixedX10
_OcnCrntPMOPRAvgValue_Object = MibTableColumn
ocnCrntPMOPRAvgValue = _OcnCrntPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 120),
    _OcnCrntPMOPRAvgValue_Type()
)
ocnCrntPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMOPRAvgValue.setUnits("dBm/10")
_OcnCrntPMOPRAvgTimeStamp_Type = DateAndTime
_OcnCrntPMOPRAvgTimeStamp_Object = MibTableColumn
ocnCrntPMOPRAvgTimeStamp = _OcnCrntPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 121),
    _OcnCrntPMOPRAvgTimeStamp_Type()
)
ocnCrntPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRAvgTimeStamp.setStatus("current")
_OcnCrntPMOPRAvgValidity_Type = PMValidity
_OcnCrntPMOPRAvgValidity_Object = MibTableColumn
ocnCrntPMOPRAvgValidity = _OcnCrntPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 122),
    _OcnCrntPMOPRAvgValidity_Type()
)
ocnCrntPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPRAvgValidity.setStatus("current")
_OcnCrntPMOPRAvgInitialize_Type = InitializeCmd
_OcnCrntPMOPRAvgInitialize_Object = MibTableColumn
ocnCrntPMOPRAvgInitialize = _OcnCrntPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 123),
    _OcnCrntPMOPRAvgInitialize_Type()
)
ocnCrntPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOPRAvgInitialize.setStatus("current")
_OcnCrntPMOPTMinValue_Type = FixedX10
_OcnCrntPMOPTMinValue_Object = MibTableColumn
ocnCrntPMOPTMinValue = _OcnCrntPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 124),
    _OcnCrntPMOPTMinValue_Type()
)
ocnCrntPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMinValue.setUnits("dBm/10")
_OcnCrntPMOPTMinTimeStamp_Type = DateAndTime
_OcnCrntPMOPTMinTimeStamp_Object = MibTableColumn
ocnCrntPMOPTMinTimeStamp = _OcnCrntPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 125),
    _OcnCrntPMOPTMinTimeStamp_Type()
)
ocnCrntPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMinTimeStamp.setStatus("current")
_OcnCrntPMOPTMinValidity_Type = PMValidity
_OcnCrntPMOPTMinValidity_Object = MibTableColumn
ocnCrntPMOPTMinValidity = _OcnCrntPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 126),
    _OcnCrntPMOPTMinValidity_Type()
)
ocnCrntPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMinValidity.setStatus("current")
_OcnCrntPMOPTMinInitialize_Type = InitializeCmd
_OcnCrntPMOPTMinInitialize_Object = MibTableColumn
ocnCrntPMOPTMinInitialize = _OcnCrntPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 127),
    _OcnCrntPMOPTMinInitialize_Type()
)
ocnCrntPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMinInitialize.setStatus("current")
_OcnCrntPMOPTMaxValue_Type = FixedX10
_OcnCrntPMOPTMaxValue_Object = MibTableColumn
ocnCrntPMOPTMaxValue = _OcnCrntPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 128),
    _OcnCrntPMOPTMaxValue_Type()
)
ocnCrntPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMaxValue.setUnits("dBm/10")
_OcnCrntPMOPTMaxTimeStamp_Type = DateAndTime
_OcnCrntPMOPTMaxTimeStamp_Object = MibTableColumn
ocnCrntPMOPTMaxTimeStamp = _OcnCrntPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 129),
    _OcnCrntPMOPTMaxTimeStamp_Type()
)
ocnCrntPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMaxTimeStamp.setStatus("current")
_OcnCrntPMOPTMaxValidity_Type = PMValidity
_OcnCrntPMOPTMaxValidity_Object = MibTableColumn
ocnCrntPMOPTMaxValidity = _OcnCrntPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 130),
    _OcnCrntPMOPTMaxValidity_Type()
)
ocnCrntPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMaxValidity.setStatus("current")
_OcnCrntPMOPTMaxInitialize_Type = InitializeCmd
_OcnCrntPMOPTMaxInitialize_Object = MibTableColumn
ocnCrntPMOPTMaxInitialize = _OcnCrntPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 131),
    _OcnCrntPMOPTMaxInitialize_Type()
)
ocnCrntPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOPTMaxInitialize.setStatus("current")
_OcnCrntPMOPTAvgValue_Type = FixedX10
_OcnCrntPMOPTAvgValue_Object = MibTableColumn
ocnCrntPMOPTAvgValue = _OcnCrntPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 132),
    _OcnCrntPMOPTAvgValue_Type()
)
ocnCrntPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnCrntPMOPTAvgValue.setUnits("dBm/10")
_OcnCrntPMOPTAvgTimeStamp_Type = DateAndTime
_OcnCrntPMOPTAvgTimeStamp_Object = MibTableColumn
ocnCrntPMOPTAvgTimeStamp = _OcnCrntPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 133),
    _OcnCrntPMOPTAvgTimeStamp_Type()
)
ocnCrntPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTAvgTimeStamp.setStatus("current")
_OcnCrntPMOPTAvgValidity_Type = PMValidity
_OcnCrntPMOPTAvgValidity_Object = MibTableColumn
ocnCrntPMOPTAvgValidity = _OcnCrntPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 134),
    _OcnCrntPMOPTAvgValidity_Type()
)
ocnCrntPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnCrntPMOPTAvgValidity.setStatus("current")
_OcnCrntPMOPTAvgInitialize_Type = InitializeCmd
_OcnCrntPMOPTAvgInitialize_Object = MibTableColumn
ocnCrntPMOPTAvgInitialize = _OcnCrntPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 135),
    _OcnCrntPMOPTAvgInitialize_Type()
)
ocnCrntPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnCrntPMOPTAvgInitialize.setStatus("current")
_OcnHistPMTable_Object = MibTable
ocnHistPMTable = _OcnHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9)
)
if mibBuilder.loadTexts:
    ocnHistPMTable.setStatus("current")
_OcnHistPMEntry_Object = MibTableRow
ocnHistPMEntry = _OcnHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1)
)
ocnHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ocnHistPMTypeIdx"),
    (0, "BTI-7000-MIB", "ocnHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "ocnHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "ocnHistPMPortIdx"),
    (0, "BTI-7000-MIB", "ocnHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "ocnHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    ocnHistPMEntry.setStatus("current")
_OcnHistPMTypeIdx_Type = OcnType
_OcnHistPMTypeIdx_Object = MibTableColumn
ocnHistPMTypeIdx = _OcnHistPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 1),
    _OcnHistPMTypeIdx_Type()
)
ocnHistPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnHistPMTypeIdx.setStatus("current")


class _OcnHistPMShelfIdx_Type(Integer32):
    """Custom type ocnHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OcnHistPMShelfIdx_Type.__name__ = "Integer32"
_OcnHistPMShelfIdx_Object = MibTableColumn
ocnHistPMShelfIdx = _OcnHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 2),
    _OcnHistPMShelfIdx_Type()
)
ocnHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnHistPMShelfIdx.setStatus("current")


class _OcnHistPMSlotIdx_Type(Integer32):
    """Custom type ocnHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OcnHistPMSlotIdx_Type.__name__ = "Integer32"
_OcnHistPMSlotIdx_Object = MibTableColumn
ocnHistPMSlotIdx = _OcnHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 3),
    _OcnHistPMSlotIdx_Type()
)
ocnHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnHistPMSlotIdx.setStatus("current")


class _OcnHistPMPortIdx_Type(Integer32):
    """Custom type ocnHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_OcnHistPMPortIdx_Type.__name__ = "Integer32"
_OcnHistPMPortIdx_Object = MibTableColumn
ocnHistPMPortIdx = _OcnHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 4),
    _OcnHistPMPortIdx_Type()
)
ocnHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnHistPMPortIdx.setStatus("current")
_OcnHistPMIntervalTypeIdx_Type = PMIntervalType
_OcnHistPMIntervalTypeIdx_Object = MibTableColumn
ocnHistPMIntervalTypeIdx = _OcnHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 5),
    _OcnHistPMIntervalTypeIdx_Type()
)
ocnHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnHistPMIntervalTypeIdx.setStatus("current")


class _OcnHistPMIntervalIdx_Type(Integer32):
    """Custom type ocnHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_OcnHistPMIntervalIdx_Type.__name__ = "Integer32"
_OcnHistPMIntervalIdx_Object = MibTableColumn
ocnHistPMIntervalIdx = _OcnHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 6),
    _OcnHistPMIntervalIdx_Type()
)
ocnHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnHistPMIntervalIdx.setStatus("current")
_OcnHistPMOPRValue_Type = FixedX10
_OcnHistPMOPRValue_Object = MibTableColumn
ocnHistPMOPRValue = _OcnHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 7),
    _OcnHistPMOPRValue_Type()
)
ocnHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMOPRValue.setUnits("dBm/10")
_OcnHistPMOPRTimeStamp_Type = DateAndTime
_OcnHistPMOPRTimeStamp_Object = MibTableColumn
ocnHistPMOPRTimeStamp = _OcnHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 8),
    _OcnHistPMOPRTimeStamp_Type()
)
ocnHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRTimeStamp.setStatus("current")
_OcnHistPMOPRValidity_Type = PMValidity
_OcnHistPMOPRValidity_Object = MibTableColumn
ocnHistPMOPRValidity = _OcnHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 9),
    _OcnHistPMOPRValidity_Type()
)
ocnHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRValidity.setStatus("current")
_OcnHistPMOPTValue_Type = FixedX10
_OcnHistPMOPTValue_Object = MibTableColumn
ocnHistPMOPTValue = _OcnHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 10),
    _OcnHistPMOPTValue_Type()
)
ocnHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMOPTValue.setUnits("dBm/10")
_OcnHistPMOPTTimeStamp_Type = DateAndTime
_OcnHistPMOPTTimeStamp_Object = MibTableColumn
ocnHistPMOPTTimeStamp = _OcnHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 11),
    _OcnHistPMOPTTimeStamp_Type()
)
ocnHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTTimeStamp.setStatus("current")
_OcnHistPMOPTValidity_Type = PMValidity
_OcnHistPMOPTValidity_Object = MibTableColumn
ocnHistPMOPTValidity = _OcnHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 12),
    _OcnHistPMOPTValidity_Type()
)
ocnHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTValidity.setStatus("current")


class _OcnHistPMTempValue_Type(Integer32):
    """Custom type ocnHistPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OcnHistPMTempValue_Type.__name__ = "Integer32"
_OcnHistPMTempValue_Object = MibTableColumn
ocnHistPMTempValue = _OcnHistPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 13),
    _OcnHistPMTempValue_Type()
)
ocnHistPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMTempValue.setUnits("degrees Celsius")
_OcnHistPMTempTimeStamp_Type = DateAndTime
_OcnHistPMTempTimeStamp_Object = MibTableColumn
ocnHistPMTempTimeStamp = _OcnHistPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 14),
    _OcnHistPMTempTimeStamp_Type()
)
ocnHistPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMTempTimeStamp.setStatus("current")
_OcnHistPMTempValidity_Type = PMValidity
_OcnHistPMTempValidity_Object = MibTableColumn
ocnHistPMTempValidity = _OcnHistPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 15),
    _OcnHistPMTempValidity_Type()
)
ocnHistPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMTempValidity.setStatus("current")
_OcnHistPMSupplyVoltageValue_Type = FixedX10
_OcnHistPMSupplyVoltageValue_Object = MibTableColumn
ocnHistPMSupplyVoltageValue = _OcnHistPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 16),
    _OcnHistPMSupplyVoltageValue_Type()
)
ocnHistPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMSupplyVoltageValue.setUnits("mVolts/10")
_OcnHistPMSupplyVoltageTimeStamp_Type = DateAndTime
_OcnHistPMSupplyVoltageTimeStamp_Object = MibTableColumn
ocnHistPMSupplyVoltageTimeStamp = _OcnHistPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 17),
    _OcnHistPMSupplyVoltageTimeStamp_Type()
)
ocnHistPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSupplyVoltageTimeStamp.setStatus("current")
_OcnHistPMSupplyVoltageValidity_Type = PMValidity
_OcnHistPMSupplyVoltageValidity_Object = MibTableColumn
ocnHistPMSupplyVoltageValidity = _OcnHistPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 18),
    _OcnHistPMSupplyVoltageValidity_Type()
)
ocnHistPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSupplyVoltageValidity.setStatus("current")


class _OcnHistPMLBCValue_Type(Integer32):
    """Custom type ocnHistPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_OcnHistPMLBCValue_Type.__name__ = "Integer32"
_OcnHistPMLBCValue_Object = MibTableColumn
ocnHistPMLBCValue = _OcnHistPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 19),
    _OcnHistPMLBCValue_Type()
)
ocnHistPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMLBCValue.setUnits("mAmp")
_OcnHistPMLBCTimeStamp_Type = DateAndTime
_OcnHistPMLBCTimeStamp_Object = MibTableColumn
ocnHistPMLBCTimeStamp = _OcnHistPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 20),
    _OcnHistPMLBCTimeStamp_Type()
)
ocnHistPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMLBCTimeStamp.setStatus("current")
_OcnHistPMLBCValidity_Type = PMValidity
_OcnHistPMLBCValidity_Object = MibTableColumn
ocnHistPMLBCValidity = _OcnHistPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 21),
    _OcnHistPMLBCValidity_Type()
)
ocnHistPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMLBCValidity.setStatus("current")
_OcnHistPMCVSValue_Type = Unsigned32
_OcnHistPMCVSValue_Object = MibTableColumn
ocnHistPMCVSValue = _OcnHistPMCVSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 22),
    _OcnHistPMCVSValue_Type()
)
ocnHistPMCVSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMCVSValue.setStatus("current")
_OcnHistPMCVSTimeStamp_Type = DateAndTime
_OcnHistPMCVSTimeStamp_Object = MibTableColumn
ocnHistPMCVSTimeStamp = _OcnHistPMCVSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 23),
    _OcnHistPMCVSTimeStamp_Type()
)
ocnHistPMCVSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMCVSTimeStamp.setStatus("current")
_OcnHistPMCVSValidity_Type = PMValidity
_OcnHistPMCVSValidity_Object = MibTableColumn
ocnHistPMCVSValidity = _OcnHistPMCVSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 24),
    _OcnHistPMCVSValidity_Type()
)
ocnHistPMCVSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMCVSValidity.setStatus("current")
_OcnHistPMESSValue_Type = Unsigned32
_OcnHistPMESSValue_Object = MibTableColumn
ocnHistPMESSValue = _OcnHistPMESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 25),
    _OcnHistPMESSValue_Type()
)
ocnHistPMESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMESSValue.setStatus("current")
_OcnHistPMESSTimeStamp_Type = DateAndTime
_OcnHistPMESSTimeStamp_Object = MibTableColumn
ocnHistPMESSTimeStamp = _OcnHistPMESSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 26),
    _OcnHistPMESSTimeStamp_Type()
)
ocnHistPMESSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMESSTimeStamp.setStatus("current")
_OcnHistPMESSValidity_Type = PMValidity
_OcnHistPMESSValidity_Object = MibTableColumn
ocnHistPMESSValidity = _OcnHistPMESSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 27),
    _OcnHistPMESSValidity_Type()
)
ocnHistPMESSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMESSValidity.setStatus("current")
_OcnHistPMSESSValue_Type = Unsigned32
_OcnHistPMSESSValue_Object = MibTableColumn
ocnHistPMSESSValue = _OcnHistPMSESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 28),
    _OcnHistPMSESSValue_Type()
)
ocnHistPMSESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMSESSValue.setStatus("current")
_OcnHistPMSESSTimeStamp_Type = DateAndTime
_OcnHistPMSESSTimeStamp_Object = MibTableColumn
ocnHistPMSESSTimeStamp = _OcnHistPMSESSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 29),
    _OcnHistPMSESSTimeStamp_Type()
)
ocnHistPMSESSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSESSTimeStamp.setStatus("current")
_OcnHistPMSESSValidity_Type = PMValidity
_OcnHistPMSESSValidity_Object = MibTableColumn
ocnHistPMSESSValidity = _OcnHistPMSESSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 30),
    _OcnHistPMSESSValidity_Type()
)
ocnHistPMSESSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSESSValidity.setStatus("current")
_OcnHistPMSEFSSValue_Type = Unsigned32
_OcnHistPMSEFSSValue_Object = MibTableColumn
ocnHistPMSEFSSValue = _OcnHistPMSEFSSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 31),
    _OcnHistPMSEFSSValue_Type()
)
ocnHistPMSEFSSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMSEFSSValue.setStatus("current")
_OcnHistPMSEFSSTimeStamp_Type = DateAndTime
_OcnHistPMSEFSSTimeStamp_Object = MibTableColumn
ocnHistPMSEFSSTimeStamp = _OcnHistPMSEFSSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 32),
    _OcnHistPMSEFSSTimeStamp_Type()
)
ocnHistPMSEFSSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSEFSSTimeStamp.setStatus("current")
_OcnHistPMSEFSSValidity_Type = PMValidity
_OcnHistPMSEFSSValidity_Object = MibTableColumn
ocnHistPMSEFSSValidity = _OcnHistPMSEFSSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 33),
    _OcnHistPMSEFSSValidity_Type()
)
ocnHistPMSEFSSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSEFSSValidity.setStatus("current")
_OcnHistPMSupplyVoltage2Value_Type = FixedX10
_OcnHistPMSupplyVoltage2Value_Object = MibTableColumn
ocnHistPMSupplyVoltage2Value = _OcnHistPMSupplyVoltage2Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 34),
    _OcnHistPMSupplyVoltage2Value_Type()
)
ocnHistPMSupplyVoltage2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSupplyVoltage2Value.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMSupplyVoltage2Value.setUnits("mVolts/10")
_OcnHistPMSupplyVoltage2TimeStamp_Type = DateAndTime
_OcnHistPMSupplyVoltage2TimeStamp_Object = MibTableColumn
ocnHistPMSupplyVoltage2TimeStamp = _OcnHistPMSupplyVoltage2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 35),
    _OcnHistPMSupplyVoltage2TimeStamp_Type()
)
ocnHistPMSupplyVoltage2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSupplyVoltage2TimeStamp.setStatus("current")
_OcnHistPMSupplyVoltage2Validity_Type = PMValidity
_OcnHistPMSupplyVoltage2Validity_Object = MibTableColumn
ocnHistPMSupplyVoltage2Validity = _OcnHistPMSupplyVoltage2Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 36),
    _OcnHistPMSupplyVoltage2Validity_Type()
)
ocnHistPMSupplyVoltage2Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSupplyVoltage2Validity.setStatus("current")
_OcnHistPMCVLValue_Type = Unsigned32
_OcnHistPMCVLValue_Object = MibTableColumn
ocnHistPMCVLValue = _OcnHistPMCVLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 37),
    _OcnHistPMCVLValue_Type()
)
ocnHistPMCVLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMCVLValue.setStatus("current")
_OcnHistPMCVLTimeStamp_Type = DateAndTime
_OcnHistPMCVLTimeStamp_Object = MibTableColumn
ocnHistPMCVLTimeStamp = _OcnHistPMCVLTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 38),
    _OcnHistPMCVLTimeStamp_Type()
)
ocnHistPMCVLTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMCVLTimeStamp.setStatus("current")
_OcnHistPMCVLValidity_Type = PMValidity
_OcnHistPMCVLValidity_Object = MibTableColumn
ocnHistPMCVLValidity = _OcnHistPMCVLValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 39),
    _OcnHistPMCVLValidity_Type()
)
ocnHistPMCVLValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMCVLValidity.setStatus("current")
_OcnHistPMESLValue_Type = Unsigned32
_OcnHistPMESLValue_Object = MibTableColumn
ocnHistPMESLValue = _OcnHistPMESLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 40),
    _OcnHistPMESLValue_Type()
)
ocnHistPMESLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMESLValue.setStatus("current")
_OcnHistPMESLTimeStamp_Type = DateAndTime
_OcnHistPMESLTimeStamp_Object = MibTableColumn
ocnHistPMESLTimeStamp = _OcnHistPMESLTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 41),
    _OcnHistPMESLTimeStamp_Type()
)
ocnHistPMESLTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMESLTimeStamp.setStatus("current")
_OcnHistPMESLValidity_Type = PMValidity
_OcnHistPMESLValidity_Object = MibTableColumn
ocnHistPMESLValidity = _OcnHistPMESLValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 42),
    _OcnHistPMESLValidity_Type()
)
ocnHistPMESLValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMESLValidity.setStatus("current")
_OcnHistPMSESLValue_Type = Unsigned32
_OcnHistPMSESLValue_Object = MibTableColumn
ocnHistPMSESLValue = _OcnHistPMSESLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 43),
    _OcnHistPMSESLValue_Type()
)
ocnHistPMSESLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMSESLValue.setStatus("current")
_OcnHistPMSESLTimeStamp_Type = DateAndTime
_OcnHistPMSESLTimeStamp_Object = MibTableColumn
ocnHistPMSESLTimeStamp = _OcnHistPMSESLTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 44),
    _OcnHistPMSESLTimeStamp_Type()
)
ocnHistPMSESLTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSESLTimeStamp.setStatus("current")
_OcnHistPMSESLValidity_Type = PMValidity
_OcnHistPMSESLValidity_Object = MibTableColumn
ocnHistPMSESLValidity = _OcnHistPMSESLValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 45),
    _OcnHistPMSESLValidity_Type()
)
ocnHistPMSESLValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMSESLValidity.setStatus("current")
_OcnHistPMUASLValue_Type = Unsigned32
_OcnHistPMUASLValue_Object = MibTableColumn
ocnHistPMUASLValue = _OcnHistPMUASLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 46),
    _OcnHistPMUASLValue_Type()
)
ocnHistPMUASLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMUASLValue.setStatus("current")
_OcnHistPMUASLTimeStamp_Type = DateAndTime
_OcnHistPMUASLTimeStamp_Object = MibTableColumn
ocnHistPMUASLTimeStamp = _OcnHistPMUASLTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 47),
    _OcnHistPMUASLTimeStamp_Type()
)
ocnHistPMUASLTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMUASLTimeStamp.setStatus("current")
_OcnHistPMUASLValidity_Type = PMValidity
_OcnHistPMUASLValidity_Object = MibTableColumn
ocnHistPMUASLValidity = _OcnHistPMUASLValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 48),
    _OcnHistPMUASLValidity_Type()
)
ocnHistPMUASLValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMUASLValidity.setStatus("current")
_OcnHistPMOTUEBValue_Type = Unsigned32
_OcnHistPMOTUEBValue_Object = MibTableColumn
ocnHistPMOTUEBValue = _OcnHistPMOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 49),
    _OcnHistPMOTUEBValue_Type()
)
ocnHistPMOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUEBValue.setStatus("current")
_OcnHistPMOTUEBTimeStamp_Type = DateAndTime
_OcnHistPMOTUEBTimeStamp_Object = MibTableColumn
ocnHistPMOTUEBTimeStamp = _OcnHistPMOTUEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 50),
    _OcnHistPMOTUEBTimeStamp_Type()
)
ocnHistPMOTUEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUEBTimeStamp.setStatus("current")
_OcnHistPMOTUEBValidity_Type = PMValidity
_OcnHistPMOTUEBValidity_Object = MibTableColumn
ocnHistPMOTUEBValidity = _OcnHistPMOTUEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 51),
    _OcnHistPMOTUEBValidity_Type()
)
ocnHistPMOTUEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUEBValidity.setStatus("current")
_OcnHistPMOTUBBEValue_Type = Unsigned32
_OcnHistPMOTUBBEValue_Object = MibTableColumn
ocnHistPMOTUBBEValue = _OcnHistPMOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 52),
    _OcnHistPMOTUBBEValue_Type()
)
ocnHistPMOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUBBEValue.setStatus("current")
_OcnHistPMOTUBBETimeStamp_Type = DateAndTime
_OcnHistPMOTUBBETimeStamp_Object = MibTableColumn
ocnHistPMOTUBBETimeStamp = _OcnHistPMOTUBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 53),
    _OcnHistPMOTUBBETimeStamp_Type()
)
ocnHistPMOTUBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUBBETimeStamp.setStatus("current")
_OcnHistPMOTUBBEValidity_Type = PMValidity
_OcnHistPMOTUBBEValidity_Object = MibTableColumn
ocnHistPMOTUBBEValidity = _OcnHistPMOTUBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 54),
    _OcnHistPMOTUBBEValidity_Type()
)
ocnHistPMOTUBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUBBEValidity.setStatus("current")
_OcnHistPMOTUESValue_Type = Unsigned32
_OcnHistPMOTUESValue_Object = MibTableColumn
ocnHistPMOTUESValue = _OcnHistPMOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 55),
    _OcnHistPMOTUESValue_Type()
)
ocnHistPMOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUESValue.setStatus("current")
_OcnHistPMOTUESTimeStamp_Type = DateAndTime
_OcnHistPMOTUESTimeStamp_Object = MibTableColumn
ocnHistPMOTUESTimeStamp = _OcnHistPMOTUESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 56),
    _OcnHistPMOTUESTimeStamp_Type()
)
ocnHistPMOTUESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUESTimeStamp.setStatus("current")
_OcnHistPMOTUESValidity_Type = PMValidity
_OcnHistPMOTUESValidity_Object = MibTableColumn
ocnHistPMOTUESValidity = _OcnHistPMOTUESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 57),
    _OcnHistPMOTUESValidity_Type()
)
ocnHistPMOTUESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUESValidity.setStatus("current")
_OcnHistPMOTUSESValue_Type = Unsigned32
_OcnHistPMOTUSESValue_Object = MibTableColumn
ocnHistPMOTUSESValue = _OcnHistPMOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 58),
    _OcnHistPMOTUSESValue_Type()
)
ocnHistPMOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUSESValue.setStatus("current")
_OcnHistPMOTUSESTimeStamp_Type = DateAndTime
_OcnHistPMOTUSESTimeStamp_Object = MibTableColumn
ocnHistPMOTUSESTimeStamp = _OcnHistPMOTUSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 59),
    _OcnHistPMOTUSESTimeStamp_Type()
)
ocnHistPMOTUSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUSESTimeStamp.setStatus("current")
_OcnHistPMOTUSESValidity_Type = PMValidity
_OcnHistPMOTUSESValidity_Object = MibTableColumn
ocnHistPMOTUSESValidity = _OcnHistPMOTUSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 60),
    _OcnHistPMOTUSESValidity_Type()
)
ocnHistPMOTUSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUSESValidity.setStatus("current")
_OcnHistPMOTUOFSValue_Type = Unsigned32
_OcnHistPMOTUOFSValue_Object = MibTableColumn
ocnHistPMOTUOFSValue = _OcnHistPMOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 61),
    _OcnHistPMOTUOFSValue_Type()
)
ocnHistPMOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUOFSValue.setStatus("current")
_OcnHistPMOTUOFSTimeStamp_Type = DateAndTime
_OcnHistPMOTUOFSTimeStamp_Object = MibTableColumn
ocnHistPMOTUOFSTimeStamp = _OcnHistPMOTUOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 62),
    _OcnHistPMOTUOFSTimeStamp_Type()
)
ocnHistPMOTUOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUOFSTimeStamp.setStatus("current")
_OcnHistPMOTUOFSValidity_Type = PMValidity
_OcnHistPMOTUOFSValidity_Object = MibTableColumn
ocnHistPMOTUOFSValidity = _OcnHistPMOTUOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 63),
    _OcnHistPMOTUOFSValidity_Type()
)
ocnHistPMOTUOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUOFSValidity.setStatus("current")
_OcnHistPMNBITCRValue_Type = Unsigned32
_OcnHistPMNBITCRValue_Object = MibTableColumn
ocnHistPMNBITCRValue = _OcnHistPMNBITCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 64),
    _OcnHistPMNBITCRValue_Type()
)
ocnHistPMNBITCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMNBITCRValue.setStatus("current")
_OcnHistPMNBITCRTimeStamp_Type = DateAndTime
_OcnHistPMNBITCRTimeStamp_Object = MibTableColumn
ocnHistPMNBITCRTimeStamp = _OcnHistPMNBITCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 65),
    _OcnHistPMNBITCRTimeStamp_Type()
)
ocnHistPMNBITCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBITCRTimeStamp.setStatus("current")
_OcnHistPMNBITCRValidity_Type = PMValidity
_OcnHistPMNBITCRValidity_Object = MibTableColumn
ocnHistPMNBITCRValidity = _OcnHistPMNBITCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 66),
    _OcnHistPMNBITCRValidity_Type()
)
ocnHistPMNBITCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBITCRValidity.setStatus("current")
_OcnHistPMNBYTCRValue_Type = Unsigned32
_OcnHistPMNBYTCRValue_Object = MibTableColumn
ocnHistPMNBYTCRValue = _OcnHistPMNBYTCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 67),
    _OcnHistPMNBYTCRValue_Type()
)
ocnHistPMNBYTCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMNBYTCRValue.setStatus("current")
_OcnHistPMNBYTCRTimeStamp_Type = DateAndTime
_OcnHistPMNBYTCRTimeStamp_Object = MibTableColumn
ocnHistPMNBYTCRTimeStamp = _OcnHistPMNBYTCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 68),
    _OcnHistPMNBYTCRTimeStamp_Type()
)
ocnHistPMNBYTCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBYTCRTimeStamp.setStatus("current")
_OcnHistPMNBYTCRValidity_Type = PMValidity
_OcnHistPMNBYTCRValidity_Object = MibTableColumn
ocnHistPMNBYTCRValidity = _OcnHistPMNBYTCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 69),
    _OcnHistPMNBYTCRValidity_Type()
)
ocnHistPMNBYTCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBYTCRValidity.setStatus("current")
_OcnHistPMUNCRCDWValue_Type = Unsigned32
_OcnHistPMUNCRCDWValue_Object = MibTableColumn
ocnHistPMUNCRCDWValue = _OcnHistPMUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 70),
    _OcnHistPMUNCRCDWValue_Type()
)
ocnHistPMUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMUNCRCDWValue.setStatus("current")
_OcnHistPMUNCRCDWTimeStamp_Type = DateAndTime
_OcnHistPMUNCRCDWTimeStamp_Object = MibTableColumn
ocnHistPMUNCRCDWTimeStamp = _OcnHistPMUNCRCDWTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 71),
    _OcnHistPMUNCRCDWTimeStamp_Type()
)
ocnHistPMUNCRCDWTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMUNCRCDWTimeStamp.setStatus("current")
_OcnHistPMUNCRCDWValidity_Type = PMValidity
_OcnHistPMUNCRCDWValidity_Object = MibTableColumn
ocnHistPMUNCRCDWValidity = _OcnHistPMUNCRCDWValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 72),
    _OcnHistPMUNCRCDWValidity_Type()
)
ocnHistPMUNCRCDWValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMUNCRCDWValidity.setStatus("current")
_OcnHistPMCVSInitialize_Type = InitializeCmd
_OcnHistPMCVSInitialize_Object = MibTableColumn
ocnHistPMCVSInitialize = _OcnHistPMCVSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 73),
    _OcnHistPMCVSInitialize_Type()
)
ocnHistPMCVSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMCVSInitialize.setStatus("current")
_OcnHistPMESSInitialize_Type = InitializeCmd
_OcnHistPMESSInitialize_Object = MibTableColumn
ocnHistPMESSInitialize = _OcnHistPMESSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 74),
    _OcnHistPMESSInitialize_Type()
)
ocnHistPMESSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMESSInitialize.setStatus("current")
_OcnHistPMSESSInitialize_Type = InitializeCmd
_OcnHistPMSESSInitialize_Object = MibTableColumn
ocnHistPMSESSInitialize = _OcnHistPMSESSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 75),
    _OcnHistPMSESSInitialize_Type()
)
ocnHistPMSESSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMSESSInitialize.setStatus("current")
_OcnHistPMSEFSSInitialize_Type = InitializeCmd
_OcnHistPMSEFSSInitialize_Object = MibTableColumn
ocnHistPMSEFSSInitialize = _OcnHistPMSEFSSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 76),
    _OcnHistPMSEFSSInitialize_Type()
)
ocnHistPMSEFSSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMSEFSSInitialize.setStatus("current")
_OcnHistPMCVLInitialize_Type = InitializeCmd
_OcnHistPMCVLInitialize_Object = MibTableColumn
ocnHistPMCVLInitialize = _OcnHistPMCVLInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 77),
    _OcnHistPMCVLInitialize_Type()
)
ocnHistPMCVLInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMCVLInitialize.setStatus("current")
_OcnHistPMESLInitialize_Type = InitializeCmd
_OcnHistPMESLInitialize_Object = MibTableColumn
ocnHistPMESLInitialize = _OcnHistPMESLInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 78),
    _OcnHistPMESLInitialize_Type()
)
ocnHistPMESLInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMESLInitialize.setStatus("current")
_OcnHistPMSESLInitialize_Type = InitializeCmd
_OcnHistPMSESLInitialize_Object = MibTableColumn
ocnHistPMSESLInitialize = _OcnHistPMSESLInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 79),
    _OcnHistPMSESLInitialize_Type()
)
ocnHistPMSESLInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMSESLInitialize.setStatus("current")
_OcnHistPMUASLInitialize_Type = InitializeCmd
_OcnHistPMUASLInitialize_Object = MibTableColumn
ocnHistPMUASLInitialize = _OcnHistPMUASLInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 80),
    _OcnHistPMUASLInitialize_Type()
)
ocnHistPMUASLInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMUASLInitialize.setStatus("current")
_OcnHistPMOTUEBInitialize_Type = InitializeCmd
_OcnHistPMOTUEBInitialize_Object = MibTableColumn
ocnHistPMOTUEBInitialize = _OcnHistPMOTUEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 81),
    _OcnHistPMOTUEBInitialize_Type()
)
ocnHistPMOTUEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUEBInitialize.setStatus("current")
_OcnHistPMOTUBBEInitialize_Type = InitializeCmd
_OcnHistPMOTUBBEInitialize_Object = MibTableColumn
ocnHistPMOTUBBEInitialize = _OcnHistPMOTUBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 82),
    _OcnHistPMOTUBBEInitialize_Type()
)
ocnHistPMOTUBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUBBEInitialize.setStatus("current")
_OcnHistPMOTUESInitialize_Type = InitializeCmd
_OcnHistPMOTUESInitialize_Object = MibTableColumn
ocnHistPMOTUESInitialize = _OcnHistPMOTUESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 83),
    _OcnHistPMOTUESInitialize_Type()
)
ocnHistPMOTUESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUESInitialize.setStatus("current")
_OcnHistPMOTUSESInitialize_Type = InitializeCmd
_OcnHistPMOTUSESInitialize_Object = MibTableColumn
ocnHistPMOTUSESInitialize = _OcnHistPMOTUSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 84),
    _OcnHistPMOTUSESInitialize_Type()
)
ocnHistPMOTUSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUSESInitialize.setStatus("current")
_OcnHistPMOTUOFSInitialize_Type = InitializeCmd
_OcnHistPMOTUOFSInitialize_Object = MibTableColumn
ocnHistPMOTUOFSInitialize = _OcnHistPMOTUOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 85),
    _OcnHistPMOTUOFSInitialize_Type()
)
ocnHistPMOTUOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUOFSInitialize.setStatus("current")
_OcnHistPMNBITCRInitialize_Type = InitializeCmd
_OcnHistPMNBITCRInitialize_Object = MibTableColumn
ocnHistPMNBITCRInitialize = _OcnHistPMNBITCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 86),
    _OcnHistPMNBITCRInitialize_Type()
)
ocnHistPMNBITCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMNBITCRInitialize.setStatus("current")
_OcnHistPMNBYTCRInitialize_Type = InitializeCmd
_OcnHistPMNBYTCRInitialize_Object = MibTableColumn
ocnHistPMNBYTCRInitialize = _OcnHistPMNBYTCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 87),
    _OcnHistPMNBYTCRInitialize_Type()
)
ocnHistPMNBYTCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMNBYTCRInitialize.setStatus("current")
_OcnHistPMUNCRCDWInitialize_Type = InitializeCmd
_OcnHistPMUNCRCDWInitialize_Object = MibTableColumn
ocnHistPMUNCRCDWInitialize = _OcnHistPMUNCRCDWInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 88),
    _OcnHistPMUNCRCDWInitialize_Type()
)
ocnHistPMUNCRCDWInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMUNCRCDWInitialize.setStatus("current")
_OcnHistPMOTNBERValue_Type = DisplayString
_OcnHistPMOTNBERValue_Object = MibTableColumn
ocnHistPMOTNBERValue = _OcnHistPMOTNBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 89),
    _OcnHistPMOTNBERValue_Type()
)
ocnHistPMOTNBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTNBERValue.setStatus("current")
_OcnHistPMOTNBERTimeStamp_Type = DateAndTime
_OcnHistPMOTNBERTimeStamp_Object = MibTableColumn
ocnHistPMOTNBERTimeStamp = _OcnHistPMOTNBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 90),
    _OcnHistPMOTNBERTimeStamp_Type()
)
ocnHistPMOTNBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTNBERTimeStamp.setStatus("current")
_OcnHistPMOTNBERValidity_Type = PMValidity
_OcnHistPMOTNBERValidity_Object = MibTableColumn
ocnHistPMOTNBERValidity = _OcnHistPMOTNBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 91),
    _OcnHistPMOTNBERValidity_Type()
)
ocnHistPMOTNBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTNBERValidity.setStatus("current")
_OcnHistPMOTNBERInitialize_Type = InitializeCmd
_OcnHistPMOTNBERInitialize_Object = MibTableColumn
ocnHistPMOTNBERInitialize = _OcnHistPMOTNBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 92),
    _OcnHistPMOTNBERInitialize_Type()
)
ocnHistPMOTNBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTNBERInitialize.setStatus("current")
_OcnHistPMOTNAVGBERValue_Type = DisplayString
_OcnHistPMOTNAVGBERValue_Object = MibTableColumn
ocnHistPMOTNAVGBERValue = _OcnHistPMOTNAVGBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 93),
    _OcnHistPMOTNAVGBERValue_Type()
)
ocnHistPMOTNAVGBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTNAVGBERValue.setStatus("current")
_OcnHistPMOTNAVGBERTimeStamp_Type = DateAndTime
_OcnHistPMOTNAVGBERTimeStamp_Object = MibTableColumn
ocnHistPMOTNAVGBERTimeStamp = _OcnHistPMOTNAVGBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 94),
    _OcnHistPMOTNAVGBERTimeStamp_Type()
)
ocnHistPMOTNAVGBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTNAVGBERTimeStamp.setStatus("current")
_OcnHistPMOTNAVGBERValidity_Type = PMValidity
_OcnHistPMOTNAVGBERValidity_Object = MibTableColumn
ocnHistPMOTNAVGBERValidity = _OcnHistPMOTNAVGBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 95),
    _OcnHistPMOTNAVGBERValidity_Type()
)
ocnHistPMOTNAVGBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTNAVGBERValidity.setStatus("current")
_OcnHistPMOTNAVGBERInitialize_Type = InitializeCmd
_OcnHistPMOTNAVGBERInitialize_Object = MibTableColumn
ocnHistPMOTNAVGBERInitialize = _OcnHistPMOTNAVGBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 96),
    _OcnHistPMOTNAVGBERInitialize_Type()
)
ocnHistPMOTNAVGBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTNAVGBERInitialize.setStatus("current")
_OcnHistPMNBITCR64BitValue_Type = Unsigned64
_OcnHistPMNBITCR64BitValue_Object = MibTableColumn
ocnHistPMNBITCR64BitValue = _OcnHistPMNBITCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 97),
    _OcnHistPMNBITCR64BitValue_Type()
)
ocnHistPMNBITCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBITCR64BitValue.setStatus("current")
_OcnHistPMNBITCR64BitTimeStamp_Type = DateAndTime
_OcnHistPMNBITCR64BitTimeStamp_Object = MibTableColumn
ocnHistPMNBITCR64BitTimeStamp = _OcnHistPMNBITCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 98),
    _OcnHistPMNBITCR64BitTimeStamp_Type()
)
ocnHistPMNBITCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBITCR64BitTimeStamp.setStatus("current")
_OcnHistPMNBITCR64BitValidity_Type = PMValidity
_OcnHistPMNBITCR64BitValidity_Object = MibTableColumn
ocnHistPMNBITCR64BitValidity = _OcnHistPMNBITCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 99),
    _OcnHistPMNBITCR64BitValidity_Type()
)
ocnHistPMNBITCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBITCR64BitValidity.setStatus("current")
_OcnHistPMNBITCR64BitInitialize_Type = InitializeCmd
_OcnHistPMNBITCR64BitInitialize_Object = MibTableColumn
ocnHistPMNBITCR64BitInitialize = _OcnHistPMNBITCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 100),
    _OcnHistPMNBITCR64BitInitialize_Type()
)
ocnHistPMNBITCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMNBITCR64BitInitialize.setStatus("current")
_OcnHistPMNBYTCR64BitValue_Type = Unsigned64
_OcnHistPMNBYTCR64BitValue_Object = MibTableColumn
ocnHistPMNBYTCR64BitValue = _OcnHistPMNBYTCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 101),
    _OcnHistPMNBYTCR64BitValue_Type()
)
ocnHistPMNBYTCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBYTCR64BitValue.setStatus("current")
_OcnHistPMNBYTCR64BitTimeStamp_Type = DateAndTime
_OcnHistPMNBYTCR64BitTimeStamp_Object = MibTableColumn
ocnHistPMNBYTCR64BitTimeStamp = _OcnHistPMNBYTCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 102),
    _OcnHistPMNBYTCR64BitTimeStamp_Type()
)
ocnHistPMNBYTCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBYTCR64BitTimeStamp.setStatus("current")
_OcnHistPMNBYTCR64BitValidity_Type = PMValidity
_OcnHistPMNBYTCR64BitValidity_Object = MibTableColumn
ocnHistPMNBYTCR64BitValidity = _OcnHistPMNBYTCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 103),
    _OcnHistPMNBYTCR64BitValidity_Type()
)
ocnHistPMNBYTCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMNBYTCR64BitValidity.setStatus("current")
_OcnHistPMNBYTCR64BitInitialize_Type = InitializeCmd
_OcnHistPMNBYTCR64BitInitialize_Object = MibTableColumn
ocnHistPMNBYTCR64BitInitialize = _OcnHistPMNBYTCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 104),
    _OcnHistPMNBYTCR64BitInitialize_Type()
)
ocnHistPMNBYTCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMNBYTCR64BitInitialize.setStatus("current")
_OcnHistPMUASSValue_Type = Unsigned32
_OcnHistPMUASSValue_Object = MibTableColumn
ocnHistPMUASSValue = _OcnHistPMUASSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 105),
    _OcnHistPMUASSValue_Type()
)
ocnHistPMUASSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMUASSValue.setStatus("current")
_OcnHistPMUASSTimeStamp_Type = DateAndTime
_OcnHistPMUASSTimeStamp_Object = MibTableColumn
ocnHistPMUASSTimeStamp = _OcnHistPMUASSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 106),
    _OcnHistPMUASSTimeStamp_Type()
)
ocnHistPMUASSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMUASSTimeStamp.setStatus("current")
_OcnHistPMUASSValidity_Type = PMValidity
_OcnHistPMUASSValidity_Object = MibTableColumn
ocnHistPMUASSValidity = _OcnHistPMUASSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 107),
    _OcnHistPMUASSValidity_Type()
)
ocnHistPMUASSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMUASSValidity.setStatus("current")
_OcnHistPMUASSInitialize_Type = InitializeCmd
_OcnHistPMUASSInitialize_Object = MibTableColumn
ocnHistPMUASSInitialize = _OcnHistPMUASSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 108),
    _OcnHistPMUASSInitialize_Type()
)
ocnHistPMUASSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMUASSInitialize.setStatus("current")
_OcnHistPMOTUUASValue_Type = Unsigned32
_OcnHistPMOTUUASValue_Object = MibTableColumn
ocnHistPMOTUUASValue = _OcnHistPMOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 109),
    _OcnHistPMOTUUASValue_Type()
)
ocnHistPMOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUUASValue.setStatus("current")
_OcnHistPMOTUUASTimeStamp_Type = DateAndTime
_OcnHistPMOTUUASTimeStamp_Object = MibTableColumn
ocnHistPMOTUUASTimeStamp = _OcnHistPMOTUUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 110),
    _OcnHistPMOTUUASTimeStamp_Type()
)
ocnHistPMOTUUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUUASTimeStamp.setStatus("current")
_OcnHistPMOTUUASValidity_Type = PMValidity
_OcnHistPMOTUUASValidity_Object = MibTableColumn
ocnHistPMOTUUASValidity = _OcnHistPMOTUUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 111),
    _OcnHistPMOTUUASValidity_Type()
)
ocnHistPMOTUUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOTUUASValidity.setStatus("current")
_OcnHistPMOTUUASInitialize_Type = InitializeCmd
_OcnHistPMOTUUASInitialize_Object = MibTableColumn
ocnHistPMOTUUASInitialize = _OcnHistPMOTUUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 112),
    _OcnHistPMOTUUASInitialize_Type()
)
ocnHistPMOTUUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOTUUASInitialize.setStatus("current")
_OcnHistPMOPRMinValue_Type = FixedX10
_OcnHistPMOPRMinValue_Object = MibTableColumn
ocnHistPMOPRMinValue = _OcnHistPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 113),
    _OcnHistPMOPRMinValue_Type()
)
ocnHistPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMOPRMinValue.setUnits("dBm/10")
_OcnHistPMOPRMinTimeStamp_Type = DateAndTime
_OcnHistPMOPRMinTimeStamp_Object = MibTableColumn
ocnHistPMOPRMinTimeStamp = _OcnHistPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 114),
    _OcnHistPMOPRMinTimeStamp_Type()
)
ocnHistPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRMinTimeStamp.setStatus("current")
_OcnHistPMOPRMinValidity_Type = PMValidity
_OcnHistPMOPRMinValidity_Object = MibTableColumn
ocnHistPMOPRMinValidity = _OcnHistPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 115),
    _OcnHistPMOPRMinValidity_Type()
)
ocnHistPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRMinValidity.setStatus("current")
_OcnHistPMOPRMinInitialize_Type = InitializeCmd
_OcnHistPMOPRMinInitialize_Object = MibTableColumn
ocnHistPMOPRMinInitialize = _OcnHistPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 116),
    _OcnHistPMOPRMinInitialize_Type()
)
ocnHistPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOPRMinInitialize.setStatus("current")
_OcnHistPMOPRMaxValue_Type = FixedX10
_OcnHistPMOPRMaxValue_Object = MibTableColumn
ocnHistPMOPRMaxValue = _OcnHistPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 117),
    _OcnHistPMOPRMaxValue_Type()
)
ocnHistPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMOPRMaxValue.setUnits("dBm/10")
_OcnHistPMOPRMaxTimeStamp_Type = DateAndTime
_OcnHistPMOPRMaxTimeStamp_Object = MibTableColumn
ocnHistPMOPRMaxTimeStamp = _OcnHistPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 118),
    _OcnHistPMOPRMaxTimeStamp_Type()
)
ocnHistPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRMaxTimeStamp.setStatus("current")
_OcnHistPMOPRMaxValidity_Type = PMValidity
_OcnHistPMOPRMaxValidity_Object = MibTableColumn
ocnHistPMOPRMaxValidity = _OcnHistPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 119),
    _OcnHistPMOPRMaxValidity_Type()
)
ocnHistPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRMaxValidity.setStatus("current")
_OcnHistPMOPRMaxInitialize_Type = InitializeCmd
_OcnHistPMOPRMaxInitialize_Object = MibTableColumn
ocnHistPMOPRMaxInitialize = _OcnHistPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 120),
    _OcnHistPMOPRMaxInitialize_Type()
)
ocnHistPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOPRMaxInitialize.setStatus("current")
_OcnHistPMOPRAvgValue_Type = FixedX10
_OcnHistPMOPRAvgValue_Object = MibTableColumn
ocnHistPMOPRAvgValue = _OcnHistPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 121),
    _OcnHistPMOPRAvgValue_Type()
)
ocnHistPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMOPRAvgValue.setUnits("dBm/10")
_OcnHistPMOPRAvgTimeStamp_Type = DateAndTime
_OcnHistPMOPRAvgTimeStamp_Object = MibTableColumn
ocnHistPMOPRAvgTimeStamp = _OcnHistPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 122),
    _OcnHistPMOPRAvgTimeStamp_Type()
)
ocnHistPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRAvgTimeStamp.setStatus("current")
_OcnHistPMOPRAvgValidity_Type = PMValidity
_OcnHistPMOPRAvgValidity_Object = MibTableColumn
ocnHistPMOPRAvgValidity = _OcnHistPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 123),
    _OcnHistPMOPRAvgValidity_Type()
)
ocnHistPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPRAvgValidity.setStatus("current")
_OcnHistPMOPRAvgInitialize_Type = InitializeCmd
_OcnHistPMOPRAvgInitialize_Object = MibTableColumn
ocnHistPMOPRAvgInitialize = _OcnHistPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 124),
    _OcnHistPMOPRAvgInitialize_Type()
)
ocnHistPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOPRAvgInitialize.setStatus("current")
_OcnHistPMOPTMinValue_Type = FixedX10
_OcnHistPMOPTMinValue_Object = MibTableColumn
ocnHistPMOPTMinValue = _OcnHistPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 125),
    _OcnHistPMOPTMinValue_Type()
)
ocnHistPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMOPTMinValue.setUnits("dBm/10")
_OcnHistPMOPTMinTimeStamp_Type = DateAndTime
_OcnHistPMOPTMinTimeStamp_Object = MibTableColumn
ocnHistPMOPTMinTimeStamp = _OcnHistPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 126),
    _OcnHistPMOPTMinTimeStamp_Type()
)
ocnHistPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTMinTimeStamp.setStatus("current")
_OcnHistPMOPTMinValidity_Type = PMValidity
_OcnHistPMOPTMinValidity_Object = MibTableColumn
ocnHistPMOPTMinValidity = _OcnHistPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 127),
    _OcnHistPMOPTMinValidity_Type()
)
ocnHistPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTMinValidity.setStatus("current")
_OcnHistPMOPTMinInitialize_Type = InitializeCmd
_OcnHistPMOPTMinInitialize_Object = MibTableColumn
ocnHistPMOPTMinInitialize = _OcnHistPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 128),
    _OcnHistPMOPTMinInitialize_Type()
)
ocnHistPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOPTMinInitialize.setStatus("current")
_OcnHistPMOPTMaxValue_Type = FixedX10
_OcnHistPMOPTMaxValue_Object = MibTableColumn
ocnHistPMOPTMaxValue = _OcnHistPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 129),
    _OcnHistPMOPTMaxValue_Type()
)
ocnHistPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMOPTMaxValue.setUnits("dBm/10")
_OcnHistPMOPTMaxTimeStamp_Type = DateAndTime
_OcnHistPMOPTMaxTimeStamp_Object = MibTableColumn
ocnHistPMOPTMaxTimeStamp = _OcnHistPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 130),
    _OcnHistPMOPTMaxTimeStamp_Type()
)
ocnHistPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTMaxTimeStamp.setStatus("current")
_OcnHistPMOPTMaxValidity_Type = PMValidity
_OcnHistPMOPTMaxValidity_Object = MibTableColumn
ocnHistPMOPTMaxValidity = _OcnHistPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 131),
    _OcnHistPMOPTMaxValidity_Type()
)
ocnHistPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTMaxValidity.setStatus("current")
_OcnHistPMOPTMaxInitialize_Type = InitializeCmd
_OcnHistPMOPTMaxInitialize_Object = MibTableColumn
ocnHistPMOPTMaxInitialize = _OcnHistPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 132),
    _OcnHistPMOPTMaxInitialize_Type()
)
ocnHistPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOPTMaxInitialize.setStatus("current")
_OcnHistPMOPTAvgValue_Type = FixedX10
_OcnHistPMOPTAvgValue_Object = MibTableColumn
ocnHistPMOPTAvgValue = _OcnHistPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 133),
    _OcnHistPMOPTAvgValue_Type()
)
ocnHistPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    ocnHistPMOPTAvgValue.setUnits("dBm/10")
_OcnHistPMOPTAvgTimeStamp_Type = DateAndTime
_OcnHistPMOPTAvgTimeStamp_Object = MibTableColumn
ocnHistPMOPTAvgTimeStamp = _OcnHistPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 134),
    _OcnHistPMOPTAvgTimeStamp_Type()
)
ocnHistPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTAvgTimeStamp.setStatus("current")
_OcnHistPMOPTAvgValidity_Type = PMValidity
_OcnHistPMOPTAvgValidity_Object = MibTableColumn
ocnHistPMOPTAvgValidity = _OcnHistPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 135),
    _OcnHistPMOPTAvgValidity_Type()
)
ocnHistPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocnHistPMOPTAvgValidity.setStatus("current")
_OcnHistPMOPTAvgInitialize_Type = InitializeCmd
_OcnHistPMOPTAvgInitialize_Object = MibTableColumn
ocnHistPMOPTAvgInitialize = _OcnHistPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 136),
    _OcnHistPMOPTAvgInitialize_Type()
)
ocnHistPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnHistPMOPTAvgInitialize.setStatus("current")
_OcnPMThresholdTable_Object = MibTable
ocnPMThresholdTable = _OcnPMThresholdTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10)
)
if mibBuilder.loadTexts:
    ocnPMThresholdTable.setStatus("current")
_OcnPMThresholdEntry_Object = MibTableRow
ocnPMThresholdEntry = _OcnPMThresholdEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1)
)
ocnPMThresholdEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ocnPMThresholdTypeIdx"),
    (0, "BTI-7000-MIB", "ocnPMThresholdShelfIdx"),
    (0, "BTI-7000-MIB", "ocnPMThresholdSlotIdx"),
    (0, "BTI-7000-MIB", "ocnPMThresholdPortIdx"),
    (0, "BTI-7000-MIB", "ocnPMThresholdIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    ocnPMThresholdEntry.setStatus("current")
_OcnPMThresholdTypeIdx_Type = OcnType
_OcnPMThresholdTypeIdx_Object = MibTableColumn
ocnPMThresholdTypeIdx = _OcnPMThresholdTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 1),
    _OcnPMThresholdTypeIdx_Type()
)
ocnPMThresholdTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnPMThresholdTypeIdx.setStatus("current")


class _OcnPMThresholdShelfIdx_Type(Integer32):
    """Custom type ocnPMThresholdShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OcnPMThresholdShelfIdx_Type.__name__ = "Integer32"
_OcnPMThresholdShelfIdx_Object = MibTableColumn
ocnPMThresholdShelfIdx = _OcnPMThresholdShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 2),
    _OcnPMThresholdShelfIdx_Type()
)
ocnPMThresholdShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnPMThresholdShelfIdx.setStatus("current")


class _OcnPMThresholdSlotIdx_Type(Integer32):
    """Custom type ocnPMThresholdSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OcnPMThresholdSlotIdx_Type.__name__ = "Integer32"
_OcnPMThresholdSlotIdx_Object = MibTableColumn
ocnPMThresholdSlotIdx = _OcnPMThresholdSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 3),
    _OcnPMThresholdSlotIdx_Type()
)
ocnPMThresholdSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnPMThresholdSlotIdx.setStatus("current")


class _OcnPMThresholdPortIdx_Type(Integer32):
    """Custom type ocnPMThresholdPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_OcnPMThresholdPortIdx_Type.__name__ = "Integer32"
_OcnPMThresholdPortIdx_Object = MibTableColumn
ocnPMThresholdPortIdx = _OcnPMThresholdPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 4),
    _OcnPMThresholdPortIdx_Type()
)
ocnPMThresholdPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnPMThresholdPortIdx.setStatus("current")
_OcnPMThresholdIntervalTypeIdx_Type = PMIntervalType
_OcnPMThresholdIntervalTypeIdx_Object = MibTableColumn
ocnPMThresholdIntervalTypeIdx = _OcnPMThresholdIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 5),
    _OcnPMThresholdIntervalTypeIdx_Type()
)
ocnPMThresholdIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnPMThresholdIntervalTypeIdx.setStatus("current")
_OcnPMThresholdCVSValue_Type = Unsigned32
_OcnPMThresholdCVSValue_Object = MibTableColumn
ocnPMThresholdCVSValue = _OcnPMThresholdCVSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 6),
    _OcnPMThresholdCVSValue_Type()
)
ocnPMThresholdCVSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdCVSValue.setStatus("current")
_OcnPMThresholdESSValue_Type = Unsigned32
_OcnPMThresholdESSValue_Object = MibTableColumn
ocnPMThresholdESSValue = _OcnPMThresholdESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 7),
    _OcnPMThresholdESSValue_Type()
)
ocnPMThresholdESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdESSValue.setStatus("current")
_OcnPMThresholdSESSValue_Type = Unsigned32
_OcnPMThresholdSESSValue_Object = MibTableColumn
ocnPMThresholdSESSValue = _OcnPMThresholdSESSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 8),
    _OcnPMThresholdSESSValue_Type()
)
ocnPMThresholdSESSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdSESSValue.setStatus("current")
_OcnPMThresholdSEFSSValue_Type = Unsigned32
_OcnPMThresholdSEFSSValue_Object = MibTableColumn
ocnPMThresholdSEFSSValue = _OcnPMThresholdSEFSSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 9),
    _OcnPMThresholdSEFSSValue_Type()
)
ocnPMThresholdSEFSSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdSEFSSValue.setStatus("current")
_OcnPMThresholdCVLValue_Type = Unsigned32
_OcnPMThresholdCVLValue_Object = MibTableColumn
ocnPMThresholdCVLValue = _OcnPMThresholdCVLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 10),
    _OcnPMThresholdCVLValue_Type()
)
ocnPMThresholdCVLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdCVLValue.setStatus("current")
_OcnPMThresholdESLValue_Type = Unsigned32
_OcnPMThresholdESLValue_Object = MibTableColumn
ocnPMThresholdESLValue = _OcnPMThresholdESLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 11),
    _OcnPMThresholdESLValue_Type()
)
ocnPMThresholdESLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdESLValue.setStatus("current")
_OcnPMThresholdSESLValue_Type = Unsigned32
_OcnPMThresholdSESLValue_Object = MibTableColumn
ocnPMThresholdSESLValue = _OcnPMThresholdSESLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 12),
    _OcnPMThresholdSESLValue_Type()
)
ocnPMThresholdSESLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdSESLValue.setStatus("current")
_OcnPMThresholdUASLValue_Type = Unsigned32
_OcnPMThresholdUASLValue_Object = MibTableColumn
ocnPMThresholdUASLValue = _OcnPMThresholdUASLValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 13),
    _OcnPMThresholdUASLValue_Type()
)
ocnPMThresholdUASLValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdUASLValue.setStatus("current")
_OcnPMThresholdOTUEBValue_Type = Unsigned32
_OcnPMThresholdOTUEBValue_Object = MibTableColumn
ocnPMThresholdOTUEBValue = _OcnPMThresholdOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 14),
    _OcnPMThresholdOTUEBValue_Type()
)
ocnPMThresholdOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdOTUEBValue.setStatus("current")
_OcnPMThresholdOTUBBEValue_Type = Unsigned32
_OcnPMThresholdOTUBBEValue_Object = MibTableColumn
ocnPMThresholdOTUBBEValue = _OcnPMThresholdOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 15),
    _OcnPMThresholdOTUBBEValue_Type()
)
ocnPMThresholdOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdOTUBBEValue.setStatus("current")
_OcnPMThresholdOTUESValue_Type = Unsigned32
_OcnPMThresholdOTUESValue_Object = MibTableColumn
ocnPMThresholdOTUESValue = _OcnPMThresholdOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 16),
    _OcnPMThresholdOTUESValue_Type()
)
ocnPMThresholdOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdOTUESValue.setStatus("current")
_OcnPMThresholdOTUSESValue_Type = Unsigned32
_OcnPMThresholdOTUSESValue_Object = MibTableColumn
ocnPMThresholdOTUSESValue = _OcnPMThresholdOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 17),
    _OcnPMThresholdOTUSESValue_Type()
)
ocnPMThresholdOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdOTUSESValue.setStatus("current")
_OcnPMThresholdOTUOFSValue_Type = Unsigned32
_OcnPMThresholdOTUOFSValue_Object = MibTableColumn
ocnPMThresholdOTUOFSValue = _OcnPMThresholdOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 18),
    _OcnPMThresholdOTUOFSValue_Type()
)
ocnPMThresholdOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdOTUOFSValue.setStatus("current")
_OcnPMThresholdUNCRCDWValue_Type = Unsigned32
_OcnPMThresholdUNCRCDWValue_Object = MibTableColumn
ocnPMThresholdUNCRCDWValue = _OcnPMThresholdUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 21),
    _OcnPMThresholdUNCRCDWValue_Type()
)
ocnPMThresholdUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdUNCRCDWValue.setStatus("current")
_OcnPMThresholdUASSValue_Type = Unsigned32
_OcnPMThresholdUASSValue_Object = MibTableColumn
ocnPMThresholdUASSValue = _OcnPMThresholdUASSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 22),
    _OcnPMThresholdUASSValue_Type()
)
ocnPMThresholdUASSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdUASSValue.setStatus("current")
_OcnPMThresholdOTUUASValue_Type = Unsigned32
_OcnPMThresholdOTUUASValue_Object = MibTableColumn
ocnPMThresholdOTUUASValue = _OcnPMThresholdOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 23),
    _OcnPMThresholdOTUUASValue_Type()
)
ocnPMThresholdOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnPMThresholdOTUUASValue.setStatus("current")
_StsnCrntPMTable_Object = MibTable
stsnCrntPMTable = _StsnCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11)
)
if mibBuilder.loadTexts:
    stsnCrntPMTable.setStatus("current")
_StsnCrntPMEntry_Object = MibTableRow
stsnCrntPMEntry = _StsnCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1)
)
stsnCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stsnCrntPMTypeIdx"),
    (0, "BTI-7000-MIB", "stsnCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "stsnCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "stsnCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "stsnCrntPMIdx"),
    (0, "BTI-7000-MIB", "stsnCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    stsnCrntPMEntry.setStatus("current")
_StsnCrntPMTypeIdx_Type = StsnType
_StsnCrntPMTypeIdx_Object = MibTableColumn
stsnCrntPMTypeIdx = _StsnCrntPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 1),
    _StsnCrntPMTypeIdx_Type()
)
stsnCrntPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnCrntPMTypeIdx.setStatus("current")


class _StsnCrntPMShelfIdx_Type(Integer32):
    """Custom type stsnCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StsnCrntPMShelfIdx_Type.__name__ = "Integer32"
_StsnCrntPMShelfIdx_Object = MibTableColumn
stsnCrntPMShelfIdx = _StsnCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 2),
    _StsnCrntPMShelfIdx_Type()
)
stsnCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnCrntPMShelfIdx.setStatus("current")


class _StsnCrntPMSlotIdx_Type(Integer32):
    """Custom type stsnCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StsnCrntPMSlotIdx_Type.__name__ = "Integer32"
_StsnCrntPMSlotIdx_Object = MibTableColumn
stsnCrntPMSlotIdx = _StsnCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 3),
    _StsnCrntPMSlotIdx_Type()
)
stsnCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnCrntPMSlotIdx.setStatus("current")


class _StsnCrntPMPortIdx_Type(Integer32):
    """Custom type stsnCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StsnCrntPMPortIdx_Type.__name__ = "Integer32"
_StsnCrntPMPortIdx_Object = MibTableColumn
stsnCrntPMPortIdx = _StsnCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 4),
    _StsnCrntPMPortIdx_Type()
)
stsnCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnCrntPMPortIdx.setStatus("current")


class _StsnCrntPMIdx_Type(Integer32):
    """Custom type stsnCrntPMIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 192),
    )


_StsnCrntPMIdx_Type.__name__ = "Integer32"
_StsnCrntPMIdx_Object = MibTableColumn
stsnCrntPMIdx = _StsnCrntPMIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 5),
    _StsnCrntPMIdx_Type()
)
stsnCrntPMIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnCrntPMIdx.setStatus("current")
_StsnCrntPMIntervalTypeIdx_Type = PMIntervalType
_StsnCrntPMIntervalTypeIdx_Object = MibTableColumn
stsnCrntPMIntervalTypeIdx = _StsnCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 6),
    _StsnCrntPMIntervalTypeIdx_Type()
)
stsnCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnCrntPMIntervalTypeIdx.setStatus("current")
_StsnCrntPMCVPValue_Type = Unsigned32
_StsnCrntPMCVPValue_Object = MibTableColumn
stsnCrntPMCVPValue = _StsnCrntPMCVPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 7),
    _StsnCrntPMCVPValue_Type()
)
stsnCrntPMCVPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMCVPValue.setStatus("current")
_StsnCrntPMCVPTimeStamp_Type = DateAndTime
_StsnCrntPMCVPTimeStamp_Object = MibTableColumn
stsnCrntPMCVPTimeStamp = _StsnCrntPMCVPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 8),
    _StsnCrntPMCVPTimeStamp_Type()
)
stsnCrntPMCVPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMCVPTimeStamp.setStatus("current")
_StsnCrntPMCVPValidity_Type = PMValidity
_StsnCrntPMCVPValidity_Object = MibTableColumn
stsnCrntPMCVPValidity = _StsnCrntPMCVPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 9),
    _StsnCrntPMCVPValidity_Type()
)
stsnCrntPMCVPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMCVPValidity.setStatus("current")
_StsnCrntPMESPValue_Type = Unsigned32
_StsnCrntPMESPValue_Object = MibTableColumn
stsnCrntPMESPValue = _StsnCrntPMESPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 10),
    _StsnCrntPMESPValue_Type()
)
stsnCrntPMESPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMESPValue.setStatus("current")
_StsnCrntPMESPTimeStamp_Type = DateAndTime
_StsnCrntPMESPTimeStamp_Object = MibTableColumn
stsnCrntPMESPTimeStamp = _StsnCrntPMESPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 11),
    _StsnCrntPMESPTimeStamp_Type()
)
stsnCrntPMESPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMESPTimeStamp.setStatus("current")
_StsnCrntPMESPValidity_Type = PMValidity
_StsnCrntPMESPValidity_Object = MibTableColumn
stsnCrntPMESPValidity = _StsnCrntPMESPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 12),
    _StsnCrntPMESPValidity_Type()
)
stsnCrntPMESPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMESPValidity.setStatus("current")
_StsnCrntPMSESPValue_Type = Unsigned32
_StsnCrntPMSESPValue_Object = MibTableColumn
stsnCrntPMSESPValue = _StsnCrntPMSESPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 13),
    _StsnCrntPMSESPValue_Type()
)
stsnCrntPMSESPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMSESPValue.setStatus("current")
_StsnCrntPMSESPTimeStamp_Type = DateAndTime
_StsnCrntPMSESPTimeStamp_Object = MibTableColumn
stsnCrntPMSESPTimeStamp = _StsnCrntPMSESPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 14),
    _StsnCrntPMSESPTimeStamp_Type()
)
stsnCrntPMSESPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMSESPTimeStamp.setStatus("current")
_StsnCrntPMSESPValidity_Type = PMValidity
_StsnCrntPMSESPValidity_Object = MibTableColumn
stsnCrntPMSESPValidity = _StsnCrntPMSESPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 15),
    _StsnCrntPMSESPValidity_Type()
)
stsnCrntPMSESPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMSESPValidity.setStatus("current")
_StsnCrntPMUASPValue_Type = Unsigned32
_StsnCrntPMUASPValue_Object = MibTableColumn
stsnCrntPMUASPValue = _StsnCrntPMUASPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 16),
    _StsnCrntPMUASPValue_Type()
)
stsnCrntPMUASPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMUASPValue.setStatus("current")
_StsnCrntPMUASPTimeStamp_Type = DateAndTime
_StsnCrntPMUASPTimeStamp_Object = MibTableColumn
stsnCrntPMUASPTimeStamp = _StsnCrntPMUASPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 17),
    _StsnCrntPMUASPTimeStamp_Type()
)
stsnCrntPMUASPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMUASPTimeStamp.setStatus("current")
_StsnCrntPMUASPValidity_Type = PMValidity
_StsnCrntPMUASPValidity_Object = MibTableColumn
stsnCrntPMUASPValidity = _StsnCrntPMUASPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 18),
    _StsnCrntPMUASPValidity_Type()
)
stsnCrntPMUASPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMUASPValidity.setStatus("current")
_StsnCrntPMFCPValue_Type = Unsigned32
_StsnCrntPMFCPValue_Object = MibTableColumn
stsnCrntPMFCPValue = _StsnCrntPMFCPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 19),
    _StsnCrntPMFCPValue_Type()
)
stsnCrntPMFCPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMFCPValue.setStatus("current")
_StsnCrntPMFCPTimeStamp_Type = DateAndTime
_StsnCrntPMFCPTimeStamp_Object = MibTableColumn
stsnCrntPMFCPTimeStamp = _StsnCrntPMFCPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 20),
    _StsnCrntPMFCPTimeStamp_Type()
)
stsnCrntPMFCPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMFCPTimeStamp.setStatus("current")
_StsnCrntPMFCPValidity_Type = PMValidity
_StsnCrntPMFCPValidity_Object = MibTableColumn
stsnCrntPMFCPValidity = _StsnCrntPMFCPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 21),
    _StsnCrntPMFCPValidity_Type()
)
stsnCrntPMFCPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnCrntPMFCPValidity.setStatus("current")
_StsnCrntPMCVPInitialize_Type = InitializeCmd
_StsnCrntPMCVPInitialize_Object = MibTableColumn
stsnCrntPMCVPInitialize = _StsnCrntPMCVPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 22),
    _StsnCrntPMCVPInitialize_Type()
)
stsnCrntPMCVPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMCVPInitialize.setStatus("current")
_StsnCrntPMESPInitialize_Type = InitializeCmd
_StsnCrntPMESPInitialize_Object = MibTableColumn
stsnCrntPMESPInitialize = _StsnCrntPMESPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 23),
    _StsnCrntPMESPInitialize_Type()
)
stsnCrntPMESPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMESPInitialize.setStatus("current")
_StsnCrntPMSESPInitialize_Type = InitializeCmd
_StsnCrntPMSESPInitialize_Object = MibTableColumn
stsnCrntPMSESPInitialize = _StsnCrntPMSESPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 24),
    _StsnCrntPMSESPInitialize_Type()
)
stsnCrntPMSESPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMSESPInitialize.setStatus("current")
_StsnCrntPMUASPInitialize_Type = InitializeCmd
_StsnCrntPMUASPInitialize_Object = MibTableColumn
stsnCrntPMUASPInitialize = _StsnCrntPMUASPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 25),
    _StsnCrntPMUASPInitialize_Type()
)
stsnCrntPMUASPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMUASPInitialize.setStatus("current")
_StsnCrntPMFCPInitialize_Type = InitializeCmd
_StsnCrntPMFCPInitialize_Object = MibTableColumn
stsnCrntPMFCPInitialize = _StsnCrntPMFCPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 26),
    _StsnCrntPMFCPInitialize_Type()
)
stsnCrntPMFCPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnCrntPMFCPInitialize.setStatus("current")
_StsnHistPMTable_Object = MibTable
stsnHistPMTable = _StsnHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12)
)
if mibBuilder.loadTexts:
    stsnHistPMTable.setStatus("current")
_StsnHistPMEntry_Object = MibTableRow
stsnHistPMEntry = _StsnHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1)
)
stsnHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stsnHistPMTypeIdx"),
    (0, "BTI-7000-MIB", "stsnHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "stsnHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "stsnHistPMPortIdx"),
    (0, "BTI-7000-MIB", "stsnHistPMIdx"),
    (0, "BTI-7000-MIB", "stsnHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "stsnHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    stsnHistPMEntry.setStatus("current")
_StsnHistPMTypeIdx_Type = StsnType
_StsnHistPMTypeIdx_Object = MibTableColumn
stsnHistPMTypeIdx = _StsnHistPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 1),
    _StsnHistPMTypeIdx_Type()
)
stsnHistPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnHistPMTypeIdx.setStatus("current")


class _StsnHistPMShelfIdx_Type(Integer32):
    """Custom type stsnHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StsnHistPMShelfIdx_Type.__name__ = "Integer32"
_StsnHistPMShelfIdx_Object = MibTableColumn
stsnHistPMShelfIdx = _StsnHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 2),
    _StsnHistPMShelfIdx_Type()
)
stsnHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnHistPMShelfIdx.setStatus("current")


class _StsnHistPMSlotIdx_Type(Integer32):
    """Custom type stsnHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StsnHistPMSlotIdx_Type.__name__ = "Integer32"
_StsnHistPMSlotIdx_Object = MibTableColumn
stsnHistPMSlotIdx = _StsnHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 3),
    _StsnHistPMSlotIdx_Type()
)
stsnHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnHistPMSlotIdx.setStatus("current")


class _StsnHistPMPortIdx_Type(Integer32):
    """Custom type stsnHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StsnHistPMPortIdx_Type.__name__ = "Integer32"
_StsnHistPMPortIdx_Object = MibTableColumn
stsnHistPMPortIdx = _StsnHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 4),
    _StsnHistPMPortIdx_Type()
)
stsnHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnHistPMPortIdx.setStatus("current")


class _StsnHistPMIdx_Type(Integer32):
    """Custom type stsnHistPMIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 192),
    )


_StsnHistPMIdx_Type.__name__ = "Integer32"
_StsnHistPMIdx_Object = MibTableColumn
stsnHistPMIdx = _StsnHistPMIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 5),
    _StsnHistPMIdx_Type()
)
stsnHistPMIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnHistPMIdx.setStatus("current")
_StsnHistPMIntervalTypeIdx_Type = PMIntervalType
_StsnHistPMIntervalTypeIdx_Object = MibTableColumn
stsnHistPMIntervalTypeIdx = _StsnHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 6),
    _StsnHistPMIntervalTypeIdx_Type()
)
stsnHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnHistPMIntervalTypeIdx.setStatus("current")


class _StsnHistPMIntervalIdx_Type(Integer32):
    """Custom type stsnHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_StsnHistPMIntervalIdx_Type.__name__ = "Integer32"
_StsnHistPMIntervalIdx_Object = MibTableColumn
stsnHistPMIntervalIdx = _StsnHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 7),
    _StsnHistPMIntervalIdx_Type()
)
stsnHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnHistPMIntervalIdx.setStatus("current")
_StsnHistPMCVPValue_Type = Unsigned32
_StsnHistPMCVPValue_Object = MibTableColumn
stsnHistPMCVPValue = _StsnHistPMCVPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 8),
    _StsnHistPMCVPValue_Type()
)
stsnHistPMCVPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMCVPValue.setStatus("current")
_StsnHistPMCVPTimeStamp_Type = DateAndTime
_StsnHistPMCVPTimeStamp_Object = MibTableColumn
stsnHistPMCVPTimeStamp = _StsnHistPMCVPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 9),
    _StsnHistPMCVPTimeStamp_Type()
)
stsnHistPMCVPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMCVPTimeStamp.setStatus("current")
_StsnHistPMCVPValidity_Type = PMValidity
_StsnHistPMCVPValidity_Object = MibTableColumn
stsnHistPMCVPValidity = _StsnHistPMCVPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 10),
    _StsnHistPMCVPValidity_Type()
)
stsnHistPMCVPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMCVPValidity.setStatus("current")
_StsnHistPMESPValue_Type = Unsigned32
_StsnHistPMESPValue_Object = MibTableColumn
stsnHistPMESPValue = _StsnHistPMESPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 11),
    _StsnHistPMESPValue_Type()
)
stsnHistPMESPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMESPValue.setStatus("current")
_StsnHistPMESPTimeStamp_Type = DateAndTime
_StsnHistPMESPTimeStamp_Object = MibTableColumn
stsnHistPMESPTimeStamp = _StsnHistPMESPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 12),
    _StsnHistPMESPTimeStamp_Type()
)
stsnHistPMESPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMESPTimeStamp.setStatus("current")
_StsnHistPMESPValidity_Type = PMValidity
_StsnHistPMESPValidity_Object = MibTableColumn
stsnHistPMESPValidity = _StsnHistPMESPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 13),
    _StsnHistPMESPValidity_Type()
)
stsnHistPMESPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMESPValidity.setStatus("current")
_StsnHistPMSESPValue_Type = Unsigned32
_StsnHistPMSESPValue_Object = MibTableColumn
stsnHistPMSESPValue = _StsnHistPMSESPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 14),
    _StsnHistPMSESPValue_Type()
)
stsnHistPMSESPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMSESPValue.setStatus("current")
_StsnHistPMSESPTimeStamp_Type = DateAndTime
_StsnHistPMSESPTimeStamp_Object = MibTableColumn
stsnHistPMSESPTimeStamp = _StsnHistPMSESPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 15),
    _StsnHistPMSESPTimeStamp_Type()
)
stsnHistPMSESPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMSESPTimeStamp.setStatus("current")
_StsnHistPMSESPValidity_Type = PMValidity
_StsnHistPMSESPValidity_Object = MibTableColumn
stsnHistPMSESPValidity = _StsnHistPMSESPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 16),
    _StsnHistPMSESPValidity_Type()
)
stsnHistPMSESPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMSESPValidity.setStatus("current")
_StsnHistPMUASPValue_Type = Unsigned32
_StsnHistPMUASPValue_Object = MibTableColumn
stsnHistPMUASPValue = _StsnHistPMUASPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 17),
    _StsnHistPMUASPValue_Type()
)
stsnHistPMUASPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMUASPValue.setStatus("current")
_StsnHistPMUASPTimeStamp_Type = DateAndTime
_StsnHistPMUASPTimeStamp_Object = MibTableColumn
stsnHistPMUASPTimeStamp = _StsnHistPMUASPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 18),
    _StsnHistPMUASPTimeStamp_Type()
)
stsnHistPMUASPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMUASPTimeStamp.setStatus("current")
_StsnHistPMUASPValidity_Type = PMValidity
_StsnHistPMUASPValidity_Object = MibTableColumn
stsnHistPMUASPValidity = _StsnHistPMUASPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 19),
    _StsnHistPMUASPValidity_Type()
)
stsnHistPMUASPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMUASPValidity.setStatus("current")
_StsnHistPMFCPValue_Type = Unsigned32
_StsnHistPMFCPValue_Object = MibTableColumn
stsnHistPMFCPValue = _StsnHistPMFCPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 20),
    _StsnHistPMFCPValue_Type()
)
stsnHistPMFCPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMFCPValue.setStatus("current")
_StsnHistPMFCPTimeStamp_Type = DateAndTime
_StsnHistPMFCPTimeStamp_Object = MibTableColumn
stsnHistPMFCPTimeStamp = _StsnHistPMFCPTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 21),
    _StsnHistPMFCPTimeStamp_Type()
)
stsnHistPMFCPTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMFCPTimeStamp.setStatus("current")
_StsnHistPMFCPValidity_Type = PMValidity
_StsnHistPMFCPValidity_Object = MibTableColumn
stsnHistPMFCPValidity = _StsnHistPMFCPValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 22),
    _StsnHistPMFCPValidity_Type()
)
stsnHistPMFCPValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stsnHistPMFCPValidity.setStatus("current")
_StsnHistPMCVPInitialize_Type = InitializeCmd
_StsnHistPMCVPInitialize_Object = MibTableColumn
stsnHistPMCVPInitialize = _StsnHistPMCVPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 23),
    _StsnHistPMCVPInitialize_Type()
)
stsnHistPMCVPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMCVPInitialize.setStatus("current")
_StsnHistPMESPInitialize_Type = InitializeCmd
_StsnHistPMESPInitialize_Object = MibTableColumn
stsnHistPMESPInitialize = _StsnHistPMESPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 24),
    _StsnHistPMESPInitialize_Type()
)
stsnHistPMESPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMESPInitialize.setStatus("current")
_StsnHistPMSESPInitialize_Type = InitializeCmd
_StsnHistPMSESPInitialize_Object = MibTableColumn
stsnHistPMSESPInitialize = _StsnHistPMSESPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 25),
    _StsnHistPMSESPInitialize_Type()
)
stsnHistPMSESPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMSESPInitialize.setStatus("current")
_StsnHistPMUASPInitialize_Type = InitializeCmd
_StsnHistPMUASPInitialize_Object = MibTableColumn
stsnHistPMUASPInitialize = _StsnHistPMUASPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 26),
    _StsnHistPMUASPInitialize_Type()
)
stsnHistPMUASPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMUASPInitialize.setStatus("current")
_StsnHistPMFCPInitialize_Type = InitializeCmd
_StsnHistPMFCPInitialize_Object = MibTableColumn
stsnHistPMFCPInitialize = _StsnHistPMFCPInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 27),
    _StsnHistPMFCPInitialize_Type()
)
stsnHistPMFCPInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnHistPMFCPInitialize.setStatus("current")
_StsnPMThresholdByPortTable_Object = MibTable
stsnPMThresholdByPortTable = _StsnPMThresholdByPortTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13)
)
if mibBuilder.loadTexts:
    stsnPMThresholdByPortTable.setStatus("current")
_StsnPMThresholdByPortEntry_Object = MibTableRow
stsnPMThresholdByPortEntry = _StsnPMThresholdByPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1)
)
stsnPMThresholdByPortEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stsnPMThresholdByPortTypeIdx"),
    (0, "BTI-7000-MIB", "stsnPMThresholdByPortShelfIdx"),
    (0, "BTI-7000-MIB", "stsnPMThresholdByPortSlotIdx"),
    (0, "BTI-7000-MIB", "stsnPMThresholdByPortIdx"),
    (0, "BTI-7000-MIB", "stsnPMThresholdByPortIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    stsnPMThresholdByPortEntry.setStatus("current")
_StsnPMThresholdByPortTypeIdx_Type = StsnType
_StsnPMThresholdByPortTypeIdx_Object = MibTableColumn
stsnPMThresholdByPortTypeIdx = _StsnPMThresholdByPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 1),
    _StsnPMThresholdByPortTypeIdx_Type()
)
stsnPMThresholdByPortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortTypeIdx.setStatus("current")


class _StsnPMThresholdByPortShelfIdx_Type(Integer32):
    """Custom type stsnPMThresholdByPortShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StsnPMThresholdByPortShelfIdx_Type.__name__ = "Integer32"
_StsnPMThresholdByPortShelfIdx_Object = MibTableColumn
stsnPMThresholdByPortShelfIdx = _StsnPMThresholdByPortShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 2),
    _StsnPMThresholdByPortShelfIdx_Type()
)
stsnPMThresholdByPortShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortShelfIdx.setStatus("current")


class _StsnPMThresholdByPortSlotIdx_Type(Integer32):
    """Custom type stsnPMThresholdByPortSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StsnPMThresholdByPortSlotIdx_Type.__name__ = "Integer32"
_StsnPMThresholdByPortSlotIdx_Object = MibTableColumn
stsnPMThresholdByPortSlotIdx = _StsnPMThresholdByPortSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 3),
    _StsnPMThresholdByPortSlotIdx_Type()
)
stsnPMThresholdByPortSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortSlotIdx.setStatus("current")


class _StsnPMThresholdByPortIdx_Type(Integer32):
    """Custom type stsnPMThresholdByPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StsnPMThresholdByPortIdx_Type.__name__ = "Integer32"
_StsnPMThresholdByPortIdx_Object = MibTableColumn
stsnPMThresholdByPortIdx = _StsnPMThresholdByPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 4),
    _StsnPMThresholdByPortIdx_Type()
)
stsnPMThresholdByPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortIdx.setStatus("current")
_StsnPMThresholdByPortIntervalTypeIdx_Type = PMIntervalType
_StsnPMThresholdByPortIntervalTypeIdx_Object = MibTableColumn
stsnPMThresholdByPortIntervalTypeIdx = _StsnPMThresholdByPortIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 5),
    _StsnPMThresholdByPortIntervalTypeIdx_Type()
)
stsnPMThresholdByPortIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortIntervalTypeIdx.setStatus("current")
_StsnPMThresholdByPortCVPValue_Type = Unsigned32
_StsnPMThresholdByPortCVPValue_Object = MibTableColumn
stsnPMThresholdByPortCVPValue = _StsnPMThresholdByPortCVPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 6),
    _StsnPMThresholdByPortCVPValue_Type()
)
stsnPMThresholdByPortCVPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortCVPValue.setStatus("current")
_StsnPMThresholdByPortESPValue_Type = Unsigned32
_StsnPMThresholdByPortESPValue_Object = MibTableColumn
stsnPMThresholdByPortESPValue = _StsnPMThresholdByPortESPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 9),
    _StsnPMThresholdByPortESPValue_Type()
)
stsnPMThresholdByPortESPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortESPValue.setStatus("current")
_StsnPMThresholdByPortSESPValue_Type = Unsigned32
_StsnPMThresholdByPortSESPValue_Object = MibTableColumn
stsnPMThresholdByPortSESPValue = _StsnPMThresholdByPortSESPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 10),
    _StsnPMThresholdByPortSESPValue_Type()
)
stsnPMThresholdByPortSESPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortSESPValue.setStatus("current")
_StsnPMThresholdByPortUASPValue_Type = Unsigned32
_StsnPMThresholdByPortUASPValue_Object = MibTableColumn
stsnPMThresholdByPortUASPValue = _StsnPMThresholdByPortUASPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 11),
    _StsnPMThresholdByPortUASPValue_Type()
)
stsnPMThresholdByPortUASPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortUASPValue.setStatus("current")
_StsnPMThresholdByPortFCPValue_Type = Unsigned32
_StsnPMThresholdByPortFCPValue_Object = MibTableColumn
stsnPMThresholdByPortFCPValue = _StsnPMThresholdByPortFCPValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 12),
    _StsnPMThresholdByPortFCPValue_Type()
)
stsnPMThresholdByPortFCPValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnPMThresholdByPortFCPValue.setStatus("current")
_StmnCrntPMTable_Object = MibTable
stmnCrntPMTable = _StmnCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14)
)
if mibBuilder.loadTexts:
    stmnCrntPMTable.setStatus("current")
_StmnCrntPMEntry_Object = MibTableRow
stmnCrntPMEntry = _StmnCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1)
)
stmnCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stmnCrntPMTypeIdx"),
    (0, "BTI-7000-MIB", "stmnCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "stmnCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "stmnCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "stmnCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    stmnCrntPMEntry.setStatus("current")
_StmnCrntPMTypeIdx_Type = StmnType
_StmnCrntPMTypeIdx_Object = MibTableColumn
stmnCrntPMTypeIdx = _StmnCrntPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 1),
    _StmnCrntPMTypeIdx_Type()
)
stmnCrntPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnCrntPMTypeIdx.setStatus("current")


class _StmnCrntPMShelfIdx_Type(Integer32):
    """Custom type stmnCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StmnCrntPMShelfIdx_Type.__name__ = "Integer32"
_StmnCrntPMShelfIdx_Object = MibTableColumn
stmnCrntPMShelfIdx = _StmnCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 2),
    _StmnCrntPMShelfIdx_Type()
)
stmnCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnCrntPMShelfIdx.setStatus("current")


class _StmnCrntPMSlotIdx_Type(Integer32):
    """Custom type stmnCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StmnCrntPMSlotIdx_Type.__name__ = "Integer32"
_StmnCrntPMSlotIdx_Object = MibTableColumn
stmnCrntPMSlotIdx = _StmnCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 3),
    _StmnCrntPMSlotIdx_Type()
)
stmnCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnCrntPMSlotIdx.setStatus("current")


class _StmnCrntPMPortIdx_Type(Integer32):
    """Custom type stmnCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_StmnCrntPMPortIdx_Type.__name__ = "Integer32"
_StmnCrntPMPortIdx_Object = MibTableColumn
stmnCrntPMPortIdx = _StmnCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 4),
    _StmnCrntPMPortIdx_Type()
)
stmnCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnCrntPMPortIdx.setStatus("current")
_StmnCrntPMIntervalTypeIdx_Type = PMIntervalType
_StmnCrntPMIntervalTypeIdx_Object = MibTableColumn
stmnCrntPMIntervalTypeIdx = _StmnCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 5),
    _StmnCrntPMIntervalTypeIdx_Type()
)
stmnCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnCrntPMIntervalTypeIdx.setStatus("current")
_StmnCrntPMOPRValue_Type = FixedX10
_StmnCrntPMOPRValue_Object = MibTableColumn
stmnCrntPMOPRValue = _StmnCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 6),
    _StmnCrntPMOPRValue_Type()
)
stmnCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMOPRValue.setUnits("dBm/10")
_StmnCrntPMOPRTimeStamp_Type = DateAndTime
_StmnCrntPMOPRTimeStamp_Object = MibTableColumn
stmnCrntPMOPRTimeStamp = _StmnCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 7),
    _StmnCrntPMOPRTimeStamp_Type()
)
stmnCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRTimeStamp.setStatus("current")
_StmnCrntPMOPRValidity_Type = PMValidity
_StmnCrntPMOPRValidity_Object = MibTableColumn
stmnCrntPMOPRValidity = _StmnCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 8),
    _StmnCrntPMOPRValidity_Type()
)
stmnCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRValidity.setStatus("current")
_StmnCrntPMOPTValue_Type = FixedX10
_StmnCrntPMOPTValue_Object = MibTableColumn
stmnCrntPMOPTValue = _StmnCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 9),
    _StmnCrntPMOPTValue_Type()
)
stmnCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMOPTValue.setUnits("dBm/10")
_StmnCrntPMOPTTimeStamp_Type = DateAndTime
_StmnCrntPMOPTTimeStamp_Object = MibTableColumn
stmnCrntPMOPTTimeStamp = _StmnCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 10),
    _StmnCrntPMOPTTimeStamp_Type()
)
stmnCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTTimeStamp.setStatus("current")
_StmnCrntPMOPTValidity_Type = PMValidity
_StmnCrntPMOPTValidity_Object = MibTableColumn
stmnCrntPMOPTValidity = _StmnCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 11),
    _StmnCrntPMOPTValidity_Type()
)
stmnCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTValidity.setStatus("current")


class _StmnCrntPMTempValue_Type(Integer32):
    """Custom type stmnCrntPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_StmnCrntPMTempValue_Type.__name__ = "Integer32"
_StmnCrntPMTempValue_Object = MibTableColumn
stmnCrntPMTempValue = _StmnCrntPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 12),
    _StmnCrntPMTempValue_Type()
)
stmnCrntPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMTempValue.setUnits("degrees Celsius")
_StmnCrntPMTempTimeStamp_Type = DateAndTime
_StmnCrntPMTempTimeStamp_Object = MibTableColumn
stmnCrntPMTempTimeStamp = _StmnCrntPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 13),
    _StmnCrntPMTempTimeStamp_Type()
)
stmnCrntPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMTempTimeStamp.setStatus("current")
_StmnCrntPMTempValidity_Type = PMValidity
_StmnCrntPMTempValidity_Object = MibTableColumn
stmnCrntPMTempValidity = _StmnCrntPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 14),
    _StmnCrntPMTempValidity_Type()
)
stmnCrntPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMTempValidity.setStatus("current")
_StmnCrntPMSupplyVoltageValue_Type = FixedX10
_StmnCrntPMSupplyVoltageValue_Object = MibTableColumn
stmnCrntPMSupplyVoltageValue = _StmnCrntPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 15),
    _StmnCrntPMSupplyVoltageValue_Type()
)
stmnCrntPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMSupplyVoltageValue.setUnits("mVolts/10")
_StmnCrntPMSupplyVoltageTimeStamp_Type = DateAndTime
_StmnCrntPMSupplyVoltageTimeStamp_Object = MibTableColumn
stmnCrntPMSupplyVoltageTimeStamp = _StmnCrntPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 16),
    _StmnCrntPMSupplyVoltageTimeStamp_Type()
)
stmnCrntPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMSupplyVoltageTimeStamp.setStatus("current")
_StmnCrntPMSupplyVoltageValidity_Type = PMValidity
_StmnCrntPMSupplyVoltageValidity_Object = MibTableColumn
stmnCrntPMSupplyVoltageValidity = _StmnCrntPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 17),
    _StmnCrntPMSupplyVoltageValidity_Type()
)
stmnCrntPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMSupplyVoltageValidity.setStatus("current")


class _StmnCrntPMLBCValue_Type(Integer32):
    """Custom type stmnCrntPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_StmnCrntPMLBCValue_Type.__name__ = "Integer32"
_StmnCrntPMLBCValue_Object = MibTableColumn
stmnCrntPMLBCValue = _StmnCrntPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 18),
    _StmnCrntPMLBCValue_Type()
)
stmnCrntPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMLBCValue.setUnits("mAmp")
_StmnCrntPMLBCTimeStamp_Type = DateAndTime
_StmnCrntPMLBCTimeStamp_Object = MibTableColumn
stmnCrntPMLBCTimeStamp = _StmnCrntPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 19),
    _StmnCrntPMLBCTimeStamp_Type()
)
stmnCrntPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMLBCTimeStamp.setStatus("current")
_StmnCrntPMLBCValidity_Type = PMValidity
_StmnCrntPMLBCValidity_Object = MibTableColumn
stmnCrntPMLBCValidity = _StmnCrntPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 20),
    _StmnCrntPMLBCValidity_Type()
)
stmnCrntPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMLBCValidity.setStatus("current")
_StmnCrntPMRSEBValue_Type = Unsigned32
_StmnCrntPMRSEBValue_Object = MibTableColumn
stmnCrntPMRSEBValue = _StmnCrntPMRSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 21),
    _StmnCrntPMRSEBValue_Type()
)
stmnCrntPMRSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSEBValue.setStatus("current")
_StmnCrntPMRSEBTimeStamp_Type = DateAndTime
_StmnCrntPMRSEBTimeStamp_Object = MibTableColumn
stmnCrntPMRSEBTimeStamp = _StmnCrntPMRSEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 22),
    _StmnCrntPMRSEBTimeStamp_Type()
)
stmnCrntPMRSEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSEBTimeStamp.setStatus("current")
_StmnCrntPMRSEBValidity_Type = PMValidity
_StmnCrntPMRSEBValidity_Object = MibTableColumn
stmnCrntPMRSEBValidity = _StmnCrntPMRSEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 23),
    _StmnCrntPMRSEBValidity_Type()
)
stmnCrntPMRSEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSEBValidity.setStatus("current")
_StmnCrntPMRSBBEValue_Type = Unsigned32
_StmnCrntPMRSBBEValue_Object = MibTableColumn
stmnCrntPMRSBBEValue = _StmnCrntPMRSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 24),
    _StmnCrntPMRSBBEValue_Type()
)
stmnCrntPMRSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSBBEValue.setStatus("current")
_StmnCrntPMRSBBETimeStamp_Type = DateAndTime
_StmnCrntPMRSBBETimeStamp_Object = MibTableColumn
stmnCrntPMRSBBETimeStamp = _StmnCrntPMRSBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 25),
    _StmnCrntPMRSBBETimeStamp_Type()
)
stmnCrntPMRSBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSBBETimeStamp.setStatus("current")
_StmnCrntPMRSBBEValidity_Type = PMValidity
_StmnCrntPMRSBBEValidity_Object = MibTableColumn
stmnCrntPMRSBBEValidity = _StmnCrntPMRSBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 26),
    _StmnCrntPMRSBBEValidity_Type()
)
stmnCrntPMRSBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSBBEValidity.setStatus("current")
_StmnCrntPMRSESValue_Type = Unsigned32
_StmnCrntPMRSESValue_Object = MibTableColumn
stmnCrntPMRSESValue = _StmnCrntPMRSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 27),
    _StmnCrntPMRSESValue_Type()
)
stmnCrntPMRSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSESValue.setStatus("current")
_StmnCrntPMRSESTimeStamp_Type = DateAndTime
_StmnCrntPMRSESTimeStamp_Object = MibTableColumn
stmnCrntPMRSESTimeStamp = _StmnCrntPMRSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 28),
    _StmnCrntPMRSESTimeStamp_Type()
)
stmnCrntPMRSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSESTimeStamp.setStatus("current")
_StmnCrntPMRSESValidity_Type = PMValidity
_StmnCrntPMRSESValidity_Object = MibTableColumn
stmnCrntPMRSESValidity = _StmnCrntPMRSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 29),
    _StmnCrntPMRSESValidity_Type()
)
stmnCrntPMRSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSESValidity.setStatus("current")
_StmnCrntPMRSSESValue_Type = Unsigned32
_StmnCrntPMRSSESValue_Object = MibTableColumn
stmnCrntPMRSSESValue = _StmnCrntPMRSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 30),
    _StmnCrntPMRSSESValue_Type()
)
stmnCrntPMRSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSSESValue.setStatus("current")
_StmnCrntPMRSSESTimeStamp_Type = DateAndTime
_StmnCrntPMRSSESTimeStamp_Object = MibTableColumn
stmnCrntPMRSSESTimeStamp = _StmnCrntPMRSSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 31),
    _StmnCrntPMRSSESTimeStamp_Type()
)
stmnCrntPMRSSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSSESTimeStamp.setStatus("current")
_StmnCrntPMRSSESValidity_Type = PMValidity
_StmnCrntPMRSSESValidity_Object = MibTableColumn
stmnCrntPMRSSESValidity = _StmnCrntPMRSSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 32),
    _StmnCrntPMRSSESValidity_Type()
)
stmnCrntPMRSSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSSESValidity.setStatus("current")
_StmnCrntPMRSOFSValue_Type = Unsigned32
_StmnCrntPMRSOFSValue_Object = MibTableColumn
stmnCrntPMRSOFSValue = _StmnCrntPMRSOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 33),
    _StmnCrntPMRSOFSValue_Type()
)
stmnCrntPMRSOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSOFSValue.setStatus("current")
_StmnCrntPMRSOFSTimeStamp_Type = DateAndTime
_StmnCrntPMRSOFSTimeStamp_Object = MibTableColumn
stmnCrntPMRSOFSTimeStamp = _StmnCrntPMRSOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 34),
    _StmnCrntPMRSOFSTimeStamp_Type()
)
stmnCrntPMRSOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSOFSTimeStamp.setStatus("current")
_StmnCrntPMRSOFSValidity_Type = PMValidity
_StmnCrntPMRSOFSValidity_Object = MibTableColumn
stmnCrntPMRSOFSValidity = _StmnCrntPMRSOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 35),
    _StmnCrntPMRSOFSValidity_Type()
)
stmnCrntPMRSOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSOFSValidity.setStatus("current")
_StmnCrntPMSupplyVoltage2Value_Type = FixedX10
_StmnCrntPMSupplyVoltage2Value_Object = MibTableColumn
stmnCrntPMSupplyVoltage2Value = _StmnCrntPMSupplyVoltage2Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 36),
    _StmnCrntPMSupplyVoltage2Value_Type()
)
stmnCrntPMSupplyVoltage2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMSupplyVoltage2Value.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMSupplyVoltage2Value.setUnits("mVolts/10")
_StmnCrntPMSupplyVoltage2TimeStamp_Type = DateAndTime
_StmnCrntPMSupplyVoltage2TimeStamp_Object = MibTableColumn
stmnCrntPMSupplyVoltage2TimeStamp = _StmnCrntPMSupplyVoltage2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 37),
    _StmnCrntPMSupplyVoltage2TimeStamp_Type()
)
stmnCrntPMSupplyVoltage2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMSupplyVoltage2TimeStamp.setStatus("current")
_StmnCrntPMSupplyVoltage2Validity_Type = PMValidity
_StmnCrntPMSupplyVoltage2Validity_Object = MibTableColumn
stmnCrntPMSupplyVoltage2Validity = _StmnCrntPMSupplyVoltage2Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 38),
    _StmnCrntPMSupplyVoltage2Validity_Type()
)
stmnCrntPMSupplyVoltage2Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMSupplyVoltage2Validity.setStatus("current")
_StmnCrntPMMSEBValue_Type = Unsigned32
_StmnCrntPMMSEBValue_Object = MibTableColumn
stmnCrntPMMSEBValue = _StmnCrntPMMSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 39),
    _StmnCrntPMMSEBValue_Type()
)
stmnCrntPMMSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSEBValue.setStatus("current")
_StmnCrntPMMSEBTimeStamp_Type = DateAndTime
_StmnCrntPMMSEBTimeStamp_Object = MibTableColumn
stmnCrntPMMSEBTimeStamp = _StmnCrntPMMSEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 40),
    _StmnCrntPMMSEBTimeStamp_Type()
)
stmnCrntPMMSEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSEBTimeStamp.setStatus("current")
_StmnCrntPMMSEBValidity_Type = PMValidity
_StmnCrntPMMSEBValidity_Object = MibTableColumn
stmnCrntPMMSEBValidity = _StmnCrntPMMSEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 41),
    _StmnCrntPMMSEBValidity_Type()
)
stmnCrntPMMSEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSEBValidity.setStatus("current")
_StmnCrntPMMSBBEValue_Type = Unsigned32
_StmnCrntPMMSBBEValue_Object = MibTableColumn
stmnCrntPMMSBBEValue = _StmnCrntPMMSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 42),
    _StmnCrntPMMSBBEValue_Type()
)
stmnCrntPMMSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSBBEValue.setStatus("current")
_StmnCrntPMMSBBETimeStamp_Type = DateAndTime
_StmnCrntPMMSBBETimeStamp_Object = MibTableColumn
stmnCrntPMMSBBETimeStamp = _StmnCrntPMMSBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 43),
    _StmnCrntPMMSBBETimeStamp_Type()
)
stmnCrntPMMSBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSBBETimeStamp.setStatus("current")
_StmnCrntPMMSBBEValidity_Type = PMValidity
_StmnCrntPMMSBBEValidity_Object = MibTableColumn
stmnCrntPMMSBBEValidity = _StmnCrntPMMSBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 44),
    _StmnCrntPMMSBBEValidity_Type()
)
stmnCrntPMMSBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSBBEValidity.setStatus("current")
_StmnCrntPMMSESValue_Type = Unsigned32
_StmnCrntPMMSESValue_Object = MibTableColumn
stmnCrntPMMSESValue = _StmnCrntPMMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 45),
    _StmnCrntPMMSESValue_Type()
)
stmnCrntPMMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSESValue.setStatus("current")
_StmnCrntPMMSESTimeStamp_Type = DateAndTime
_StmnCrntPMMSESTimeStamp_Object = MibTableColumn
stmnCrntPMMSESTimeStamp = _StmnCrntPMMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 46),
    _StmnCrntPMMSESTimeStamp_Type()
)
stmnCrntPMMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSESTimeStamp.setStatus("current")
_StmnCrntPMMSESValidity_Type = PMValidity
_StmnCrntPMMSESValidity_Object = MibTableColumn
stmnCrntPMMSESValidity = _StmnCrntPMMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 47),
    _StmnCrntPMMSESValidity_Type()
)
stmnCrntPMMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSESValidity.setStatus("current")
_StmnCrntPMMSSESValue_Type = Unsigned32
_StmnCrntPMMSSESValue_Object = MibTableColumn
stmnCrntPMMSSESValue = _StmnCrntPMMSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 48),
    _StmnCrntPMMSSESValue_Type()
)
stmnCrntPMMSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSSESValue.setStatus("current")
_StmnCrntPMMSSESTimeStamp_Type = DateAndTime
_StmnCrntPMMSSESTimeStamp_Object = MibTableColumn
stmnCrntPMMSSESTimeStamp = _StmnCrntPMMSSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 49),
    _StmnCrntPMMSSESTimeStamp_Type()
)
stmnCrntPMMSSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSSESTimeStamp.setStatus("current")
_StmnCrntPMMSSESValidity_Type = PMValidity
_StmnCrntPMMSSESValidity_Object = MibTableColumn
stmnCrntPMMSSESValidity = _StmnCrntPMMSSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 50),
    _StmnCrntPMMSSESValidity_Type()
)
stmnCrntPMMSSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSSESValidity.setStatus("current")
_StmnCrntPMMSUASValue_Type = Unsigned32
_StmnCrntPMMSUASValue_Object = MibTableColumn
stmnCrntPMMSUASValue = _StmnCrntPMMSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 51),
    _StmnCrntPMMSUASValue_Type()
)
stmnCrntPMMSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSUASValue.setStatus("current")
_StmnCrntPMMSUASTimeStamp_Type = DateAndTime
_StmnCrntPMMSUASTimeStamp_Object = MibTableColumn
stmnCrntPMMSUASTimeStamp = _StmnCrntPMMSUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 52),
    _StmnCrntPMMSUASTimeStamp_Type()
)
stmnCrntPMMSUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSUASTimeStamp.setStatus("current")
_StmnCrntPMMSUASValidity_Type = PMValidity
_StmnCrntPMMSUASValidity_Object = MibTableColumn
stmnCrntPMMSUASValidity = _StmnCrntPMMSUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 53),
    _StmnCrntPMMSUASValidity_Type()
)
stmnCrntPMMSUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMMSUASValidity.setStatus("current")
_StmnCrntPMOTUEBValue_Type = Unsigned32
_StmnCrntPMOTUEBValue_Object = MibTableColumn
stmnCrntPMOTUEBValue = _StmnCrntPMOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 54),
    _StmnCrntPMOTUEBValue_Type()
)
stmnCrntPMOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUEBValue.setStatus("current")
_StmnCrntPMOTUEBTimeStamp_Type = DateAndTime
_StmnCrntPMOTUEBTimeStamp_Object = MibTableColumn
stmnCrntPMOTUEBTimeStamp = _StmnCrntPMOTUEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 55),
    _StmnCrntPMOTUEBTimeStamp_Type()
)
stmnCrntPMOTUEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUEBTimeStamp.setStatus("current")
_StmnCrntPMOTUEBValidity_Type = PMValidity
_StmnCrntPMOTUEBValidity_Object = MibTableColumn
stmnCrntPMOTUEBValidity = _StmnCrntPMOTUEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 56),
    _StmnCrntPMOTUEBValidity_Type()
)
stmnCrntPMOTUEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUEBValidity.setStatus("current")
_StmnCrntPMOTUBBEValue_Type = Unsigned32
_StmnCrntPMOTUBBEValue_Object = MibTableColumn
stmnCrntPMOTUBBEValue = _StmnCrntPMOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 57),
    _StmnCrntPMOTUBBEValue_Type()
)
stmnCrntPMOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUBBEValue.setStatus("current")
_StmnCrntPMOTUBBETimeStamp_Type = DateAndTime
_StmnCrntPMOTUBBETimeStamp_Object = MibTableColumn
stmnCrntPMOTUBBETimeStamp = _StmnCrntPMOTUBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 58),
    _StmnCrntPMOTUBBETimeStamp_Type()
)
stmnCrntPMOTUBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUBBETimeStamp.setStatus("current")
_StmnCrntPMOTUBBEValidity_Type = PMValidity
_StmnCrntPMOTUBBEValidity_Object = MibTableColumn
stmnCrntPMOTUBBEValidity = _StmnCrntPMOTUBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 59),
    _StmnCrntPMOTUBBEValidity_Type()
)
stmnCrntPMOTUBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUBBEValidity.setStatus("current")
_StmnCrntPMOTUESValue_Type = Unsigned32
_StmnCrntPMOTUESValue_Object = MibTableColumn
stmnCrntPMOTUESValue = _StmnCrntPMOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 60),
    _StmnCrntPMOTUESValue_Type()
)
stmnCrntPMOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUESValue.setStatus("current")
_StmnCrntPMOTUESTimeStamp_Type = DateAndTime
_StmnCrntPMOTUESTimeStamp_Object = MibTableColumn
stmnCrntPMOTUESTimeStamp = _StmnCrntPMOTUESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 61),
    _StmnCrntPMOTUESTimeStamp_Type()
)
stmnCrntPMOTUESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUESTimeStamp.setStatus("current")
_StmnCrntPMOTUESValidity_Type = PMValidity
_StmnCrntPMOTUESValidity_Object = MibTableColumn
stmnCrntPMOTUESValidity = _StmnCrntPMOTUESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 62),
    _StmnCrntPMOTUESValidity_Type()
)
stmnCrntPMOTUESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUESValidity.setStatus("current")
_StmnCrntPMOTUSESValue_Type = Unsigned32
_StmnCrntPMOTUSESValue_Object = MibTableColumn
stmnCrntPMOTUSESValue = _StmnCrntPMOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 63),
    _StmnCrntPMOTUSESValue_Type()
)
stmnCrntPMOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUSESValue.setStatus("current")
_StmnCrntPMOTUSESTimeStamp_Type = DateAndTime
_StmnCrntPMOTUSESTimeStamp_Object = MibTableColumn
stmnCrntPMOTUSESTimeStamp = _StmnCrntPMOTUSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 64),
    _StmnCrntPMOTUSESTimeStamp_Type()
)
stmnCrntPMOTUSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUSESTimeStamp.setStatus("current")
_StmnCrntPMOTUSESValidity_Type = PMValidity
_StmnCrntPMOTUSESValidity_Object = MibTableColumn
stmnCrntPMOTUSESValidity = _StmnCrntPMOTUSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 65),
    _StmnCrntPMOTUSESValidity_Type()
)
stmnCrntPMOTUSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUSESValidity.setStatus("current")
_StmnCrntPMOTUOFSValue_Type = Unsigned32
_StmnCrntPMOTUOFSValue_Object = MibTableColumn
stmnCrntPMOTUOFSValue = _StmnCrntPMOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 66),
    _StmnCrntPMOTUOFSValue_Type()
)
stmnCrntPMOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUOFSValue.setStatus("current")
_StmnCrntPMOTUOFSTimeStamp_Type = DateAndTime
_StmnCrntPMOTUOFSTimeStamp_Object = MibTableColumn
stmnCrntPMOTUOFSTimeStamp = _StmnCrntPMOTUOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 67),
    _StmnCrntPMOTUOFSTimeStamp_Type()
)
stmnCrntPMOTUOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUOFSTimeStamp.setStatus("current")
_StmnCrntPMOTUOFSValidity_Type = PMValidity
_StmnCrntPMOTUOFSValidity_Object = MibTableColumn
stmnCrntPMOTUOFSValidity = _StmnCrntPMOTUOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 68),
    _StmnCrntPMOTUOFSValidity_Type()
)
stmnCrntPMOTUOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUOFSValidity.setStatus("current")
_StmnCrntPMNBITCRValue_Type = Unsigned32
_StmnCrntPMNBITCRValue_Object = MibTableColumn
stmnCrntPMNBITCRValue = _StmnCrntPMNBITCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 69),
    _StmnCrntPMNBITCRValue_Type()
)
stmnCrntPMNBITCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMNBITCRValue.setStatus("current")
_StmnCrntPMNBITCRTimeStamp_Type = DateAndTime
_StmnCrntPMNBITCRTimeStamp_Object = MibTableColumn
stmnCrntPMNBITCRTimeStamp = _StmnCrntPMNBITCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 70),
    _StmnCrntPMNBITCRTimeStamp_Type()
)
stmnCrntPMNBITCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBITCRTimeStamp.setStatus("current")
_StmnCrntPMNBITCRValidity_Type = PMValidity
_StmnCrntPMNBITCRValidity_Object = MibTableColumn
stmnCrntPMNBITCRValidity = _StmnCrntPMNBITCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 71),
    _StmnCrntPMNBITCRValidity_Type()
)
stmnCrntPMNBITCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBITCRValidity.setStatus("current")
_StmnCrntPMNBYTCRValue_Type = Unsigned32
_StmnCrntPMNBYTCRValue_Object = MibTableColumn
stmnCrntPMNBYTCRValue = _StmnCrntPMNBYTCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 72),
    _StmnCrntPMNBYTCRValue_Type()
)
stmnCrntPMNBYTCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMNBYTCRValue.setStatus("current")
_StmnCrntPMNBYTCRTimeStamp_Type = DateAndTime
_StmnCrntPMNBYTCRTimeStamp_Object = MibTableColumn
stmnCrntPMNBYTCRTimeStamp = _StmnCrntPMNBYTCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 73),
    _StmnCrntPMNBYTCRTimeStamp_Type()
)
stmnCrntPMNBYTCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBYTCRTimeStamp.setStatus("current")
_StmnCrntPMNBYTCRValidity_Type = PMValidity
_StmnCrntPMNBYTCRValidity_Object = MibTableColumn
stmnCrntPMNBYTCRValidity = _StmnCrntPMNBYTCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 74),
    _StmnCrntPMNBYTCRValidity_Type()
)
stmnCrntPMNBYTCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBYTCRValidity.setStatus("current")
_StmnCrntPMUNCRCDWValue_Type = Unsigned32
_StmnCrntPMUNCRCDWValue_Object = MibTableColumn
stmnCrntPMUNCRCDWValue = _StmnCrntPMUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 75),
    _StmnCrntPMUNCRCDWValue_Type()
)
stmnCrntPMUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMUNCRCDWValue.setStatus("current")
_StmnCrntPMUNCRCDWTimeStamp_Type = DateAndTime
_StmnCrntPMUNCRCDWTimeStamp_Object = MibTableColumn
stmnCrntPMUNCRCDWTimeStamp = _StmnCrntPMUNCRCDWTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 76),
    _StmnCrntPMUNCRCDWTimeStamp_Type()
)
stmnCrntPMUNCRCDWTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMUNCRCDWTimeStamp.setStatus("current")
_StmnCrntPMUNCRCDWValidity_Type = PMValidity
_StmnCrntPMUNCRCDWValidity_Object = MibTableColumn
stmnCrntPMUNCRCDWValidity = _StmnCrntPMUNCRCDWValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 77),
    _StmnCrntPMUNCRCDWValidity_Type()
)
stmnCrntPMUNCRCDWValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMUNCRCDWValidity.setStatus("current")
_StmnCrntPMRSEBInitialize_Type = InitializeCmd
_StmnCrntPMRSEBInitialize_Object = MibTableColumn
stmnCrntPMRSEBInitialize = _StmnCrntPMRSEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 78),
    _StmnCrntPMRSEBInitialize_Type()
)
stmnCrntPMRSEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSEBInitialize.setStatus("current")
_StmnCrntPMRSBBEInitialize_Type = InitializeCmd
_StmnCrntPMRSBBEInitialize_Object = MibTableColumn
stmnCrntPMRSBBEInitialize = _StmnCrntPMRSBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 79),
    _StmnCrntPMRSBBEInitialize_Type()
)
stmnCrntPMRSBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSBBEInitialize.setStatus("current")
_StmnCrntPMRSESInitialize_Type = InitializeCmd
_StmnCrntPMRSESInitialize_Object = MibTableColumn
stmnCrntPMRSESInitialize = _StmnCrntPMRSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 80),
    _StmnCrntPMRSESInitialize_Type()
)
stmnCrntPMRSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSESInitialize.setStatus("current")
_StmnCrntPMRSSESInitialize_Type = InitializeCmd
_StmnCrntPMRSSESInitialize_Object = MibTableColumn
stmnCrntPMRSSESInitialize = _StmnCrntPMRSSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 81),
    _StmnCrntPMRSSESInitialize_Type()
)
stmnCrntPMRSSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSSESInitialize.setStatus("current")
_StmnCrntPMRSOFSInitialize_Type = InitializeCmd
_StmnCrntPMRSOFSInitialize_Object = MibTableColumn
stmnCrntPMRSOFSInitialize = _StmnCrntPMRSOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 82),
    _StmnCrntPMRSOFSInitialize_Type()
)
stmnCrntPMRSOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSOFSInitialize.setStatus("current")
_StmnCrntPMMSEBInitialize_Type = InitializeCmd
_StmnCrntPMMSEBInitialize_Object = MibTableColumn
stmnCrntPMMSEBInitialize = _StmnCrntPMMSEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 83),
    _StmnCrntPMMSEBInitialize_Type()
)
stmnCrntPMMSEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSEBInitialize.setStatus("current")
_StmnCrntPMMSBBEInitialize_Type = InitializeCmd
_StmnCrntPMMSBBEInitialize_Object = MibTableColumn
stmnCrntPMMSBBEInitialize = _StmnCrntPMMSBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 84),
    _StmnCrntPMMSBBEInitialize_Type()
)
stmnCrntPMMSBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSBBEInitialize.setStatus("current")
_StmnCrntPMMSESInitialize_Type = InitializeCmd
_StmnCrntPMMSESInitialize_Object = MibTableColumn
stmnCrntPMMSESInitialize = _StmnCrntPMMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 85),
    _StmnCrntPMMSESInitialize_Type()
)
stmnCrntPMMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSESInitialize.setStatus("current")
_StmnCrntPMMSSESInitialize_Type = InitializeCmd
_StmnCrntPMMSSESInitialize_Object = MibTableColumn
stmnCrntPMMSSESInitialize = _StmnCrntPMMSSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 86),
    _StmnCrntPMMSSESInitialize_Type()
)
stmnCrntPMMSSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSSESInitialize.setStatus("current")
_StmnCrntPMMSUASInitialize_Type = InitializeCmd
_StmnCrntPMMSUASInitialize_Object = MibTableColumn
stmnCrntPMMSUASInitialize = _StmnCrntPMMSUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 87),
    _StmnCrntPMMSUASInitialize_Type()
)
stmnCrntPMMSUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMMSUASInitialize.setStatus("current")
_StmnCrntPMOTUEBInitialize_Type = InitializeCmd
_StmnCrntPMOTUEBInitialize_Object = MibTableColumn
stmnCrntPMOTUEBInitialize = _StmnCrntPMOTUEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 88),
    _StmnCrntPMOTUEBInitialize_Type()
)
stmnCrntPMOTUEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUEBInitialize.setStatus("current")
_StmnCrntPMOTUBBEInitialize_Type = InitializeCmd
_StmnCrntPMOTUBBEInitialize_Object = MibTableColumn
stmnCrntPMOTUBBEInitialize = _StmnCrntPMOTUBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 89),
    _StmnCrntPMOTUBBEInitialize_Type()
)
stmnCrntPMOTUBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUBBEInitialize.setStatus("current")
_StmnCrntPMOTUESInitialize_Type = InitializeCmd
_StmnCrntPMOTUESInitialize_Object = MibTableColumn
stmnCrntPMOTUESInitialize = _StmnCrntPMOTUESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 90),
    _StmnCrntPMOTUESInitialize_Type()
)
stmnCrntPMOTUESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUESInitialize.setStatus("current")
_StmnCrntPMOTUSESInitialize_Type = InitializeCmd
_StmnCrntPMOTUSESInitialize_Object = MibTableColumn
stmnCrntPMOTUSESInitialize = _StmnCrntPMOTUSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 91),
    _StmnCrntPMOTUSESInitialize_Type()
)
stmnCrntPMOTUSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUSESInitialize.setStatus("current")
_StmnCrntPMOTUOFSInitialize_Type = InitializeCmd
_StmnCrntPMOTUOFSInitialize_Object = MibTableColumn
stmnCrntPMOTUOFSInitialize = _StmnCrntPMOTUOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 92),
    _StmnCrntPMOTUOFSInitialize_Type()
)
stmnCrntPMOTUOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUOFSInitialize.setStatus("current")
_StmnCrntPMNBITCRInitialize_Type = InitializeCmd
_StmnCrntPMNBITCRInitialize_Object = MibTableColumn
stmnCrntPMNBITCRInitialize = _StmnCrntPMNBITCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 93),
    _StmnCrntPMNBITCRInitialize_Type()
)
stmnCrntPMNBITCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMNBITCRInitialize.setStatus("current")
_StmnCrntPMNBYTCRInitialize_Type = InitializeCmd
_StmnCrntPMNBYTCRInitialize_Object = MibTableColumn
stmnCrntPMNBYTCRInitialize = _StmnCrntPMNBYTCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 94),
    _StmnCrntPMNBYTCRInitialize_Type()
)
stmnCrntPMNBYTCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMNBYTCRInitialize.setStatus("current")
_StmnCrntPMUNCRCDWInitialize_Type = InitializeCmd
_StmnCrntPMUNCRCDWInitialize_Object = MibTableColumn
stmnCrntPMUNCRCDWInitialize = _StmnCrntPMUNCRCDWInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 95),
    _StmnCrntPMUNCRCDWInitialize_Type()
)
stmnCrntPMUNCRCDWInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMUNCRCDWInitialize.setStatus("current")
_StmnCrntPMOTNBERValue_Type = DisplayString
_StmnCrntPMOTNBERValue_Object = MibTableColumn
stmnCrntPMOTNBERValue = _StmnCrntPMOTNBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 96),
    _StmnCrntPMOTNBERValue_Type()
)
stmnCrntPMOTNBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTNBERValue.setStatus("current")
_StmnCrntPMOTNBERTimeStamp_Type = DateAndTime
_StmnCrntPMOTNBERTimeStamp_Object = MibTableColumn
stmnCrntPMOTNBERTimeStamp = _StmnCrntPMOTNBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 97),
    _StmnCrntPMOTNBERTimeStamp_Type()
)
stmnCrntPMOTNBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTNBERTimeStamp.setStatus("current")
_StmnCrntPMOTNBERValidity_Type = PMValidity
_StmnCrntPMOTNBERValidity_Object = MibTableColumn
stmnCrntPMOTNBERValidity = _StmnCrntPMOTNBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 98),
    _StmnCrntPMOTNBERValidity_Type()
)
stmnCrntPMOTNBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTNBERValidity.setStatus("current")
_StmnCrntPMOTNBERInitialize_Type = InitializeCmd
_StmnCrntPMOTNBERInitialize_Object = MibTableColumn
stmnCrntPMOTNBERInitialize = _StmnCrntPMOTNBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 99),
    _StmnCrntPMOTNBERInitialize_Type()
)
stmnCrntPMOTNBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTNBERInitialize.setStatus("current")
_StmnCrntPMOTNAVGBERValue_Type = DisplayString
_StmnCrntPMOTNAVGBERValue_Object = MibTableColumn
stmnCrntPMOTNAVGBERValue = _StmnCrntPMOTNAVGBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 100),
    _StmnCrntPMOTNAVGBERValue_Type()
)
stmnCrntPMOTNAVGBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTNAVGBERValue.setStatus("current")
_StmnCrntPMOTNAVGBERTimeStamp_Type = DateAndTime
_StmnCrntPMOTNAVGBERTimeStamp_Object = MibTableColumn
stmnCrntPMOTNAVGBERTimeStamp = _StmnCrntPMOTNAVGBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 101),
    _StmnCrntPMOTNAVGBERTimeStamp_Type()
)
stmnCrntPMOTNAVGBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTNAVGBERTimeStamp.setStatus("current")
_StmnCrntPMOTNAVGBERValidity_Type = PMValidity
_StmnCrntPMOTNAVGBERValidity_Object = MibTableColumn
stmnCrntPMOTNAVGBERValidity = _StmnCrntPMOTNAVGBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 102),
    _StmnCrntPMOTNAVGBERValidity_Type()
)
stmnCrntPMOTNAVGBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTNAVGBERValidity.setStatus("current")
_StmnCrntPMOTNAVGBERInitialize_Type = InitializeCmd
_StmnCrntPMOTNAVGBERInitialize_Object = MibTableColumn
stmnCrntPMOTNAVGBERInitialize = _StmnCrntPMOTNAVGBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 103),
    _StmnCrntPMOTNAVGBERInitialize_Type()
)
stmnCrntPMOTNAVGBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTNAVGBERInitialize.setStatus("current")
_StmnCrntPMNBITCR64BitValue_Type = Unsigned64
_StmnCrntPMNBITCR64BitValue_Object = MibTableColumn
stmnCrntPMNBITCR64BitValue = _StmnCrntPMNBITCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 104),
    _StmnCrntPMNBITCR64BitValue_Type()
)
stmnCrntPMNBITCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBITCR64BitValue.setStatus("current")
_StmnCrntPMNBITCR64BitTimeStamp_Type = DateAndTime
_StmnCrntPMNBITCR64BitTimeStamp_Object = MibTableColumn
stmnCrntPMNBITCR64BitTimeStamp = _StmnCrntPMNBITCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 105),
    _StmnCrntPMNBITCR64BitTimeStamp_Type()
)
stmnCrntPMNBITCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBITCR64BitTimeStamp.setStatus("current")
_StmnCrntPMNBITCR64BitValidity_Type = PMValidity
_StmnCrntPMNBITCR64BitValidity_Object = MibTableColumn
stmnCrntPMNBITCR64BitValidity = _StmnCrntPMNBITCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 106),
    _StmnCrntPMNBITCR64BitValidity_Type()
)
stmnCrntPMNBITCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBITCR64BitValidity.setStatus("current")
_StmnCrntPMNBITCR64BitInitialize_Type = InitializeCmd
_StmnCrntPMNBITCR64BitInitialize_Object = MibTableColumn
stmnCrntPMNBITCR64BitInitialize = _StmnCrntPMNBITCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 107),
    _StmnCrntPMNBITCR64BitInitialize_Type()
)
stmnCrntPMNBITCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMNBITCR64BitInitialize.setStatus("current")
_StmnCrntPMNBYTCR64BitValue_Type = Unsigned64
_StmnCrntPMNBYTCR64BitValue_Object = MibTableColumn
stmnCrntPMNBYTCR64BitValue = _StmnCrntPMNBYTCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 108),
    _StmnCrntPMNBYTCR64BitValue_Type()
)
stmnCrntPMNBYTCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBYTCR64BitValue.setStatus("current")
_StmnCrntPMNBYTCR64BitTimeStamp_Type = DateAndTime
_StmnCrntPMNBYTCR64BitTimeStamp_Object = MibTableColumn
stmnCrntPMNBYTCR64BitTimeStamp = _StmnCrntPMNBYTCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 109),
    _StmnCrntPMNBYTCR64BitTimeStamp_Type()
)
stmnCrntPMNBYTCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBYTCR64BitTimeStamp.setStatus("current")
_StmnCrntPMNBYTCR64BitValidity_Type = PMValidity
_StmnCrntPMNBYTCR64BitValidity_Object = MibTableColumn
stmnCrntPMNBYTCR64BitValidity = _StmnCrntPMNBYTCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 110),
    _StmnCrntPMNBYTCR64BitValidity_Type()
)
stmnCrntPMNBYTCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMNBYTCR64BitValidity.setStatus("current")
_StmnCrntPMNBYTCR64BitInitialize_Type = InitializeCmd
_StmnCrntPMNBYTCR64BitInitialize_Object = MibTableColumn
stmnCrntPMNBYTCR64BitInitialize = _StmnCrntPMNBYTCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 111),
    _StmnCrntPMNBYTCR64BitInitialize_Type()
)
stmnCrntPMNBYTCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMNBYTCR64BitInitialize.setStatus("current")
_StmnCrntPMRSUASValue_Type = Unsigned32
_StmnCrntPMRSUASValue_Object = MibTableColumn
stmnCrntPMRSUASValue = _StmnCrntPMRSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 112),
    _StmnCrntPMRSUASValue_Type()
)
stmnCrntPMRSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSUASValue.setStatus("current")
_StmnCrntPMRSUASTimeStamp_Type = DateAndTime
_StmnCrntPMRSUASTimeStamp_Object = MibTableColumn
stmnCrntPMRSUASTimeStamp = _StmnCrntPMRSUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 113),
    _StmnCrntPMRSUASTimeStamp_Type()
)
stmnCrntPMRSUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSUASTimeStamp.setStatus("current")
_StmnCrntPMRSUASValidity_Type = PMValidity
_StmnCrntPMRSUASValidity_Object = MibTableColumn
stmnCrntPMRSUASValidity = _StmnCrntPMRSUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 114),
    _StmnCrntPMRSUASValidity_Type()
)
stmnCrntPMRSUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMRSUASValidity.setStatus("current")
_StmnCrntPMRSUASInitialize_Type = InitializeCmd
_StmnCrntPMRSUASInitialize_Object = MibTableColumn
stmnCrntPMRSUASInitialize = _StmnCrntPMRSUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 115),
    _StmnCrntPMRSUASInitialize_Type()
)
stmnCrntPMRSUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMRSUASInitialize.setStatus("current")
_StmnCrntPMOTUUASValue_Type = Unsigned32
_StmnCrntPMOTUUASValue_Object = MibTableColumn
stmnCrntPMOTUUASValue = _StmnCrntPMOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 116),
    _StmnCrntPMOTUUASValue_Type()
)
stmnCrntPMOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUUASValue.setStatus("current")
_StmnCrntPMOTUUASTimeStamp_Type = DateAndTime
_StmnCrntPMOTUUASTimeStamp_Object = MibTableColumn
stmnCrntPMOTUUASTimeStamp = _StmnCrntPMOTUUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 117),
    _StmnCrntPMOTUUASTimeStamp_Type()
)
stmnCrntPMOTUUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUUASTimeStamp.setStatus("current")
_StmnCrntPMOTUUASValidity_Type = PMValidity
_StmnCrntPMOTUUASValidity_Object = MibTableColumn
stmnCrntPMOTUUASValidity = _StmnCrntPMOTUUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 118),
    _StmnCrntPMOTUUASValidity_Type()
)
stmnCrntPMOTUUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOTUUASValidity.setStatus("current")
_StmnCrntPMOTUUASInitialize_Type = InitializeCmd
_StmnCrntPMOTUUASInitialize_Object = MibTableColumn
stmnCrntPMOTUUASInitialize = _StmnCrntPMOTUUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 119),
    _StmnCrntPMOTUUASInitialize_Type()
)
stmnCrntPMOTUUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOTUUASInitialize.setStatus("current")
_StmnCrntPMOPRMinValue_Type = FixedX10
_StmnCrntPMOPRMinValue_Object = MibTableColumn
stmnCrntPMOPRMinValue = _StmnCrntPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 120),
    _StmnCrntPMOPRMinValue_Type()
)
stmnCrntPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMinValue.setUnits("dBm/10")
_StmnCrntPMOPRMinTimeStamp_Type = DateAndTime
_StmnCrntPMOPRMinTimeStamp_Object = MibTableColumn
stmnCrntPMOPRMinTimeStamp = _StmnCrntPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 121),
    _StmnCrntPMOPRMinTimeStamp_Type()
)
stmnCrntPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMinTimeStamp.setStatus("current")
_StmnCrntPMOPRMinValidity_Type = PMValidity
_StmnCrntPMOPRMinValidity_Object = MibTableColumn
stmnCrntPMOPRMinValidity = _StmnCrntPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 122),
    _StmnCrntPMOPRMinValidity_Type()
)
stmnCrntPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMinValidity.setStatus("current")
_StmnCrntPMOPRMinInitialize_Type = InitializeCmd
_StmnCrntPMOPRMinInitialize_Object = MibTableColumn
stmnCrntPMOPRMinInitialize = _StmnCrntPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 123),
    _StmnCrntPMOPRMinInitialize_Type()
)
stmnCrntPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMinInitialize.setStatus("current")
_StmnCrntPMOPRMaxValue_Type = FixedX10
_StmnCrntPMOPRMaxValue_Object = MibTableColumn
stmnCrntPMOPRMaxValue = _StmnCrntPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 124),
    _StmnCrntPMOPRMaxValue_Type()
)
stmnCrntPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMaxValue.setUnits("dBm/10")
_StmnCrntPMOPRMaxTimeStamp_Type = DateAndTime
_StmnCrntPMOPRMaxTimeStamp_Object = MibTableColumn
stmnCrntPMOPRMaxTimeStamp = _StmnCrntPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 125),
    _StmnCrntPMOPRMaxTimeStamp_Type()
)
stmnCrntPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMaxTimeStamp.setStatus("current")
_StmnCrntPMOPRMaxValidity_Type = PMValidity
_StmnCrntPMOPRMaxValidity_Object = MibTableColumn
stmnCrntPMOPRMaxValidity = _StmnCrntPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 126),
    _StmnCrntPMOPRMaxValidity_Type()
)
stmnCrntPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMaxValidity.setStatus("current")
_StmnCrntPMOPRMaxInitialize_Type = InitializeCmd
_StmnCrntPMOPRMaxInitialize_Object = MibTableColumn
stmnCrntPMOPRMaxInitialize = _StmnCrntPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 127),
    _StmnCrntPMOPRMaxInitialize_Type()
)
stmnCrntPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOPRMaxInitialize.setStatus("current")
_StmnCrntPMOPRAvgValue_Type = FixedX10
_StmnCrntPMOPRAvgValue_Object = MibTableColumn
stmnCrntPMOPRAvgValue = _StmnCrntPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 128),
    _StmnCrntPMOPRAvgValue_Type()
)
stmnCrntPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMOPRAvgValue.setUnits("dBm/10")
_StmnCrntPMOPRAvgTimeStamp_Type = DateAndTime
_StmnCrntPMOPRAvgTimeStamp_Object = MibTableColumn
stmnCrntPMOPRAvgTimeStamp = _StmnCrntPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 129),
    _StmnCrntPMOPRAvgTimeStamp_Type()
)
stmnCrntPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRAvgTimeStamp.setStatus("current")
_StmnCrntPMOPRAvgValidity_Type = PMValidity
_StmnCrntPMOPRAvgValidity_Object = MibTableColumn
stmnCrntPMOPRAvgValidity = _StmnCrntPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 130),
    _StmnCrntPMOPRAvgValidity_Type()
)
stmnCrntPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPRAvgValidity.setStatus("current")
_StmnCrntPMOPRAvgInitialize_Type = InitializeCmd
_StmnCrntPMOPRAvgInitialize_Object = MibTableColumn
stmnCrntPMOPRAvgInitialize = _StmnCrntPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 131),
    _StmnCrntPMOPRAvgInitialize_Type()
)
stmnCrntPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOPRAvgInitialize.setStatus("current")
_StmnCrntPMOPTMinValue_Type = FixedX10
_StmnCrntPMOPTMinValue_Object = MibTableColumn
stmnCrntPMOPTMinValue = _StmnCrntPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 132),
    _StmnCrntPMOPTMinValue_Type()
)
stmnCrntPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMinValue.setUnits("dBm/10")
_StmnCrntPMOPTMinTimeStamp_Type = DateAndTime
_StmnCrntPMOPTMinTimeStamp_Object = MibTableColumn
stmnCrntPMOPTMinTimeStamp = _StmnCrntPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 133),
    _StmnCrntPMOPTMinTimeStamp_Type()
)
stmnCrntPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMinTimeStamp.setStatus("current")
_StmnCrntPMOPTMinValidity_Type = PMValidity
_StmnCrntPMOPTMinValidity_Object = MibTableColumn
stmnCrntPMOPTMinValidity = _StmnCrntPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 134),
    _StmnCrntPMOPTMinValidity_Type()
)
stmnCrntPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMinValidity.setStatus("current")
_StmnCrntPMOPTMinInitialize_Type = InitializeCmd
_StmnCrntPMOPTMinInitialize_Object = MibTableColumn
stmnCrntPMOPTMinInitialize = _StmnCrntPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 135),
    _StmnCrntPMOPTMinInitialize_Type()
)
stmnCrntPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMinInitialize.setStatus("current")
_StmnCrntPMOPTMaxValue_Type = FixedX10
_StmnCrntPMOPTMaxValue_Object = MibTableColumn
stmnCrntPMOPTMaxValue = _StmnCrntPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 136),
    _StmnCrntPMOPTMaxValue_Type()
)
stmnCrntPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMaxValue.setUnits("dBm/10")
_StmnCrntPMOPTMaxTimeStamp_Type = DateAndTime
_StmnCrntPMOPTMaxTimeStamp_Object = MibTableColumn
stmnCrntPMOPTMaxTimeStamp = _StmnCrntPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 137),
    _StmnCrntPMOPTMaxTimeStamp_Type()
)
stmnCrntPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMaxTimeStamp.setStatus("current")
_StmnCrntPMOPTMaxValidity_Type = PMValidity
_StmnCrntPMOPTMaxValidity_Object = MibTableColumn
stmnCrntPMOPTMaxValidity = _StmnCrntPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 138),
    _StmnCrntPMOPTMaxValidity_Type()
)
stmnCrntPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMaxValidity.setStatus("current")
_StmnCrntPMOPTMaxInitialize_Type = InitializeCmd
_StmnCrntPMOPTMaxInitialize_Object = MibTableColumn
stmnCrntPMOPTMaxInitialize = _StmnCrntPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 139),
    _StmnCrntPMOPTMaxInitialize_Type()
)
stmnCrntPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOPTMaxInitialize.setStatus("current")
_StmnCrntPMOPTAvgValue_Type = FixedX10
_StmnCrntPMOPTAvgValue_Object = MibTableColumn
stmnCrntPMOPTAvgValue = _StmnCrntPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 140),
    _StmnCrntPMOPTAvgValue_Type()
)
stmnCrntPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnCrntPMOPTAvgValue.setUnits("dBm/10")
_StmnCrntPMOPTAvgTimeStamp_Type = DateAndTime
_StmnCrntPMOPTAvgTimeStamp_Object = MibTableColumn
stmnCrntPMOPTAvgTimeStamp = _StmnCrntPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 141),
    _StmnCrntPMOPTAvgTimeStamp_Type()
)
stmnCrntPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTAvgTimeStamp.setStatus("current")
_StmnCrntPMOPTAvgValidity_Type = PMValidity
_StmnCrntPMOPTAvgValidity_Object = MibTableColumn
stmnCrntPMOPTAvgValidity = _StmnCrntPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 142),
    _StmnCrntPMOPTAvgValidity_Type()
)
stmnCrntPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnCrntPMOPTAvgValidity.setStatus("current")
_StmnCrntPMOPTAvgInitialize_Type = InitializeCmd
_StmnCrntPMOPTAvgInitialize_Object = MibTableColumn
stmnCrntPMOPTAvgInitialize = _StmnCrntPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 143),
    _StmnCrntPMOPTAvgInitialize_Type()
)
stmnCrntPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnCrntPMOPTAvgInitialize.setStatus("current")
_StmnHistPMTable_Object = MibTable
stmnHistPMTable = _StmnHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15)
)
if mibBuilder.loadTexts:
    stmnHistPMTable.setStatus("current")
_StmnHistPMEntry_Object = MibTableRow
stmnHistPMEntry = _StmnHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1)
)
stmnHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stmnHistPMTypeIdx"),
    (0, "BTI-7000-MIB", "stmnHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "stmnHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "stmnHistPMPortIdx"),
    (0, "BTI-7000-MIB", "stmnHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "stmnHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    stmnHistPMEntry.setStatus("current")
_StmnHistPMTypeIdx_Type = StmnType
_StmnHistPMTypeIdx_Object = MibTableColumn
stmnHistPMTypeIdx = _StmnHistPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 1),
    _StmnHistPMTypeIdx_Type()
)
stmnHistPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnHistPMTypeIdx.setStatus("current")


class _StmnHistPMShelfIdx_Type(Integer32):
    """Custom type stmnHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StmnHistPMShelfIdx_Type.__name__ = "Integer32"
_StmnHistPMShelfIdx_Object = MibTableColumn
stmnHistPMShelfIdx = _StmnHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 2),
    _StmnHistPMShelfIdx_Type()
)
stmnHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnHistPMShelfIdx.setStatus("current")


class _StmnHistPMSlotIdx_Type(Integer32):
    """Custom type stmnHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StmnHistPMSlotIdx_Type.__name__ = "Integer32"
_StmnHistPMSlotIdx_Object = MibTableColumn
stmnHistPMSlotIdx = _StmnHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 3),
    _StmnHistPMSlotIdx_Type()
)
stmnHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnHistPMSlotIdx.setStatus("current")


class _StmnHistPMPortIdx_Type(Integer32):
    """Custom type stmnHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_StmnHistPMPortIdx_Type.__name__ = "Integer32"
_StmnHistPMPortIdx_Object = MibTableColumn
stmnHistPMPortIdx = _StmnHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 4),
    _StmnHistPMPortIdx_Type()
)
stmnHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnHistPMPortIdx.setStatus("current")
_StmnHistPMIntervalTypeIdx_Type = PMIntervalType
_StmnHistPMIntervalTypeIdx_Object = MibTableColumn
stmnHistPMIntervalTypeIdx = _StmnHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 5),
    _StmnHistPMIntervalTypeIdx_Type()
)
stmnHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnHistPMIntervalTypeIdx.setStatus("current")


class _StmnHistPMIntervalIdx_Type(Integer32):
    """Custom type stmnHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_StmnHistPMIntervalIdx_Type.__name__ = "Integer32"
_StmnHistPMIntervalIdx_Object = MibTableColumn
stmnHistPMIntervalIdx = _StmnHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 6),
    _StmnHistPMIntervalIdx_Type()
)
stmnHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnHistPMIntervalIdx.setStatus("current")
_StmnHistPMOPRValue_Type = FixedX10
_StmnHistPMOPRValue_Object = MibTableColumn
stmnHistPMOPRValue = _StmnHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 7),
    _StmnHistPMOPRValue_Type()
)
stmnHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMOPRValue.setUnits("dBm/10")
_StmnHistPMOPRTimeStamp_Type = DateAndTime
_StmnHistPMOPRTimeStamp_Object = MibTableColumn
stmnHistPMOPRTimeStamp = _StmnHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 8),
    _StmnHistPMOPRTimeStamp_Type()
)
stmnHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRTimeStamp.setStatus("current")
_StmnHistPMOPRValidity_Type = PMValidity
_StmnHistPMOPRValidity_Object = MibTableColumn
stmnHistPMOPRValidity = _StmnHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 9),
    _StmnHistPMOPRValidity_Type()
)
stmnHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRValidity.setStatus("current")
_StmnHistPMOPTValue_Type = FixedX10
_StmnHistPMOPTValue_Object = MibTableColumn
stmnHistPMOPTValue = _StmnHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 10),
    _StmnHistPMOPTValue_Type()
)
stmnHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMOPTValue.setUnits("dBm/10")
_StmnHistPMOPTTimeStamp_Type = DateAndTime
_StmnHistPMOPTTimeStamp_Object = MibTableColumn
stmnHistPMOPTTimeStamp = _StmnHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 11),
    _StmnHistPMOPTTimeStamp_Type()
)
stmnHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTTimeStamp.setStatus("current")
_StmnHistPMOPTValidity_Type = PMValidity
_StmnHistPMOPTValidity_Object = MibTableColumn
stmnHistPMOPTValidity = _StmnHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 12),
    _StmnHistPMOPTValidity_Type()
)
stmnHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTValidity.setStatus("current")


class _StmnHistPMTempValue_Type(Integer32):
    """Custom type stmnHistPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_StmnHistPMTempValue_Type.__name__ = "Integer32"
_StmnHistPMTempValue_Object = MibTableColumn
stmnHistPMTempValue = _StmnHistPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 13),
    _StmnHistPMTempValue_Type()
)
stmnHistPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMTempValue.setUnits("degrees Celsius")
_StmnHistPMTempTimeStamp_Type = DateAndTime
_StmnHistPMTempTimeStamp_Object = MibTableColumn
stmnHistPMTempTimeStamp = _StmnHistPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 14),
    _StmnHistPMTempTimeStamp_Type()
)
stmnHistPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMTempTimeStamp.setStatus("current")
_StmnHistPMTempValidity_Type = PMValidity
_StmnHistPMTempValidity_Object = MibTableColumn
stmnHistPMTempValidity = _StmnHistPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 15),
    _StmnHistPMTempValidity_Type()
)
stmnHistPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMTempValidity.setStatus("current")
_StmnHistPMSupplyVoltageValue_Type = FixedX10
_StmnHistPMSupplyVoltageValue_Object = MibTableColumn
stmnHistPMSupplyVoltageValue = _StmnHistPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 16),
    _StmnHistPMSupplyVoltageValue_Type()
)
stmnHistPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMSupplyVoltageValue.setUnits("mVolts/10")
_StmnHistPMSupplyVoltageTimeStamp_Type = DateAndTime
_StmnHistPMSupplyVoltageTimeStamp_Object = MibTableColumn
stmnHistPMSupplyVoltageTimeStamp = _StmnHistPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 17),
    _StmnHistPMSupplyVoltageTimeStamp_Type()
)
stmnHistPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMSupplyVoltageTimeStamp.setStatus("current")
_StmnHistPMSupplyVoltageValidity_Type = PMValidity
_StmnHistPMSupplyVoltageValidity_Object = MibTableColumn
stmnHistPMSupplyVoltageValidity = _StmnHistPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 18),
    _StmnHistPMSupplyVoltageValidity_Type()
)
stmnHistPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMSupplyVoltageValidity.setStatus("current")


class _StmnHistPMLBCValue_Type(Integer32):
    """Custom type stmnHistPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_StmnHistPMLBCValue_Type.__name__ = "Integer32"
_StmnHistPMLBCValue_Object = MibTableColumn
stmnHistPMLBCValue = _StmnHistPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 19),
    _StmnHistPMLBCValue_Type()
)
stmnHistPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMLBCValue.setUnits("mAmp")
_StmnHistPMLBCTimeStamp_Type = DateAndTime
_StmnHistPMLBCTimeStamp_Object = MibTableColumn
stmnHistPMLBCTimeStamp = _StmnHistPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 20),
    _StmnHistPMLBCTimeStamp_Type()
)
stmnHistPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMLBCTimeStamp.setStatus("current")
_StmnHistPMLBCValidity_Type = PMValidity
_StmnHistPMLBCValidity_Object = MibTableColumn
stmnHistPMLBCValidity = _StmnHistPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 21),
    _StmnHistPMLBCValidity_Type()
)
stmnHistPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMLBCValidity.setStatus("current")
_StmnHistPMRSEBValue_Type = Unsigned32
_StmnHistPMRSEBValue_Object = MibTableColumn
stmnHistPMRSEBValue = _StmnHistPMRSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 22),
    _StmnHistPMRSEBValue_Type()
)
stmnHistPMRSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSEBValue.setStatus("current")
_StmnHistPMRSEBTimeStamp_Type = DateAndTime
_StmnHistPMRSEBTimeStamp_Object = MibTableColumn
stmnHistPMRSEBTimeStamp = _StmnHistPMRSEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 23),
    _StmnHistPMRSEBTimeStamp_Type()
)
stmnHistPMRSEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSEBTimeStamp.setStatus("current")
_StmnHistPMRSEBValidity_Type = PMValidity
_StmnHistPMRSEBValidity_Object = MibTableColumn
stmnHistPMRSEBValidity = _StmnHistPMRSEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 24),
    _StmnHistPMRSEBValidity_Type()
)
stmnHistPMRSEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSEBValidity.setStatus("current")
_StmnHistPMRSBBEValue_Type = Unsigned32
_StmnHistPMRSBBEValue_Object = MibTableColumn
stmnHistPMRSBBEValue = _StmnHistPMRSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 25),
    _StmnHistPMRSBBEValue_Type()
)
stmnHistPMRSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSBBEValue.setStatus("current")
_StmnHistPMRSBBETimeStamp_Type = DateAndTime
_StmnHistPMRSBBETimeStamp_Object = MibTableColumn
stmnHistPMRSBBETimeStamp = _StmnHistPMRSBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 26),
    _StmnHistPMRSBBETimeStamp_Type()
)
stmnHistPMRSBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSBBETimeStamp.setStatus("current")
_StmnHistPMRSBBEValidity_Type = PMValidity
_StmnHistPMRSBBEValidity_Object = MibTableColumn
stmnHistPMRSBBEValidity = _StmnHistPMRSBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 27),
    _StmnHistPMRSBBEValidity_Type()
)
stmnHistPMRSBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSBBEValidity.setStatus("current")
_StmnHistPMRSESValue_Type = Unsigned32
_StmnHistPMRSESValue_Object = MibTableColumn
stmnHistPMRSESValue = _StmnHistPMRSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 28),
    _StmnHistPMRSESValue_Type()
)
stmnHistPMRSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSESValue.setStatus("current")
_StmnHistPMRSESTimeStamp_Type = DateAndTime
_StmnHistPMRSESTimeStamp_Object = MibTableColumn
stmnHistPMRSESTimeStamp = _StmnHistPMRSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 29),
    _StmnHistPMRSESTimeStamp_Type()
)
stmnHistPMRSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSESTimeStamp.setStatus("current")
_StmnHistPMRSESValidity_Type = PMValidity
_StmnHistPMRSESValidity_Object = MibTableColumn
stmnHistPMRSESValidity = _StmnHistPMRSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 30),
    _StmnHistPMRSESValidity_Type()
)
stmnHistPMRSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSESValidity.setStatus("current")
_StmnHistPMRSSESValue_Type = Unsigned32
_StmnHistPMRSSESValue_Object = MibTableColumn
stmnHistPMRSSESValue = _StmnHistPMRSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 31),
    _StmnHistPMRSSESValue_Type()
)
stmnHistPMRSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSSESValue.setStatus("current")
_StmnHistPMRSSESTimeStamp_Type = DateAndTime
_StmnHistPMRSSESTimeStamp_Object = MibTableColumn
stmnHistPMRSSESTimeStamp = _StmnHistPMRSSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 32),
    _StmnHistPMRSSESTimeStamp_Type()
)
stmnHistPMRSSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSSESTimeStamp.setStatus("current")
_StmnHistPMRSSESValidity_Type = PMValidity
_StmnHistPMRSSESValidity_Object = MibTableColumn
stmnHistPMRSSESValidity = _StmnHistPMRSSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 33),
    _StmnHistPMRSSESValidity_Type()
)
stmnHistPMRSSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSSESValidity.setStatus("current")
_StmnHistPMRSOFSValue_Type = Unsigned32
_StmnHistPMRSOFSValue_Object = MibTableColumn
stmnHistPMRSOFSValue = _StmnHistPMRSOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 34),
    _StmnHistPMRSOFSValue_Type()
)
stmnHistPMRSOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSOFSValue.setStatus("current")
_StmnHistPMRSOFSTimeStamp_Type = DateAndTime
_StmnHistPMRSOFSTimeStamp_Object = MibTableColumn
stmnHistPMRSOFSTimeStamp = _StmnHistPMRSOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 35),
    _StmnHistPMRSOFSTimeStamp_Type()
)
stmnHistPMRSOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSOFSTimeStamp.setStatus("current")
_StmnHistPMRSOFSValidity_Type = PMValidity
_StmnHistPMRSOFSValidity_Object = MibTableColumn
stmnHistPMRSOFSValidity = _StmnHistPMRSOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 36),
    _StmnHistPMRSOFSValidity_Type()
)
stmnHistPMRSOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSOFSValidity.setStatus("current")
_StmnHistPMSupplyVoltage2Value_Type = FixedX10
_StmnHistPMSupplyVoltage2Value_Object = MibTableColumn
stmnHistPMSupplyVoltage2Value = _StmnHistPMSupplyVoltage2Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 37),
    _StmnHistPMSupplyVoltage2Value_Type()
)
stmnHistPMSupplyVoltage2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMSupplyVoltage2Value.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMSupplyVoltage2Value.setUnits("mVolts/10")
_StmnHistPMSupplyVoltage2TimeStamp_Type = DateAndTime
_StmnHistPMSupplyVoltage2TimeStamp_Object = MibTableColumn
stmnHistPMSupplyVoltage2TimeStamp = _StmnHistPMSupplyVoltage2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 38),
    _StmnHistPMSupplyVoltage2TimeStamp_Type()
)
stmnHistPMSupplyVoltage2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMSupplyVoltage2TimeStamp.setStatus("current")
_StmnHistPMSupplyVoltage2Validity_Type = PMValidity
_StmnHistPMSupplyVoltage2Validity_Object = MibTableColumn
stmnHistPMSupplyVoltage2Validity = _StmnHistPMSupplyVoltage2Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 39),
    _StmnHistPMSupplyVoltage2Validity_Type()
)
stmnHistPMSupplyVoltage2Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMSupplyVoltage2Validity.setStatus("current")
_StmnHistPMMSEBValue_Type = Unsigned32
_StmnHistPMMSEBValue_Object = MibTableColumn
stmnHistPMMSEBValue = _StmnHistPMMSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 40),
    _StmnHistPMMSEBValue_Type()
)
stmnHistPMMSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSEBValue.setStatus("current")
_StmnHistPMMSEBTimeStamp_Type = DateAndTime
_StmnHistPMMSEBTimeStamp_Object = MibTableColumn
stmnHistPMMSEBTimeStamp = _StmnHistPMMSEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 41),
    _StmnHistPMMSEBTimeStamp_Type()
)
stmnHistPMMSEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSEBTimeStamp.setStatus("current")
_StmnHistPMMSEBValidity_Type = PMValidity
_StmnHistPMMSEBValidity_Object = MibTableColumn
stmnHistPMMSEBValidity = _StmnHistPMMSEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 42),
    _StmnHistPMMSEBValidity_Type()
)
stmnHistPMMSEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSEBValidity.setStatus("current")
_StmnHistPMMSBBEValue_Type = Unsigned32
_StmnHistPMMSBBEValue_Object = MibTableColumn
stmnHistPMMSBBEValue = _StmnHistPMMSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 43),
    _StmnHistPMMSBBEValue_Type()
)
stmnHistPMMSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSBBEValue.setStatus("current")
_StmnHistPMMSBBETimeStamp_Type = DateAndTime
_StmnHistPMMSBBETimeStamp_Object = MibTableColumn
stmnHistPMMSBBETimeStamp = _StmnHistPMMSBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 44),
    _StmnHistPMMSBBETimeStamp_Type()
)
stmnHistPMMSBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSBBETimeStamp.setStatus("current")
_StmnHistPMMSBBEValidity_Type = PMValidity
_StmnHistPMMSBBEValidity_Object = MibTableColumn
stmnHistPMMSBBEValidity = _StmnHistPMMSBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 45),
    _StmnHistPMMSBBEValidity_Type()
)
stmnHistPMMSBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSBBEValidity.setStatus("current")
_StmnHistPMMSESValue_Type = Unsigned32
_StmnHistPMMSESValue_Object = MibTableColumn
stmnHistPMMSESValue = _StmnHistPMMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 46),
    _StmnHistPMMSESValue_Type()
)
stmnHistPMMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSESValue.setStatus("current")
_StmnHistPMMSESTimeStamp_Type = DateAndTime
_StmnHistPMMSESTimeStamp_Object = MibTableColumn
stmnHistPMMSESTimeStamp = _StmnHistPMMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 47),
    _StmnHistPMMSESTimeStamp_Type()
)
stmnHistPMMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSESTimeStamp.setStatus("current")
_StmnHistPMMSESValidity_Type = PMValidity
_StmnHistPMMSESValidity_Object = MibTableColumn
stmnHistPMMSESValidity = _StmnHistPMMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 48),
    _StmnHistPMMSESValidity_Type()
)
stmnHistPMMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSESValidity.setStatus("current")
_StmnHistPMMSSESValue_Type = Unsigned32
_StmnHistPMMSSESValue_Object = MibTableColumn
stmnHistPMMSSESValue = _StmnHistPMMSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 49),
    _StmnHistPMMSSESValue_Type()
)
stmnHistPMMSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSSESValue.setStatus("current")
_StmnHistPMMSSESTimeStamp_Type = DateAndTime
_StmnHistPMMSSESTimeStamp_Object = MibTableColumn
stmnHistPMMSSESTimeStamp = _StmnHistPMMSSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 50),
    _StmnHistPMMSSESTimeStamp_Type()
)
stmnHistPMMSSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSSESTimeStamp.setStatus("current")
_StmnHistPMMSSESValidity_Type = PMValidity
_StmnHistPMMSSESValidity_Object = MibTableColumn
stmnHistPMMSSESValidity = _StmnHistPMMSSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 51),
    _StmnHistPMMSSESValidity_Type()
)
stmnHistPMMSSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSSESValidity.setStatus("current")
_StmnHistPMMSUASValue_Type = Unsigned32
_StmnHistPMMSUASValue_Object = MibTableColumn
stmnHistPMMSUASValue = _StmnHistPMMSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 52),
    _StmnHistPMMSUASValue_Type()
)
stmnHistPMMSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSUASValue.setStatus("current")
_StmnHistPMMSUASTimeStamp_Type = DateAndTime
_StmnHistPMMSUASTimeStamp_Object = MibTableColumn
stmnHistPMMSUASTimeStamp = _StmnHistPMMSUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 53),
    _StmnHistPMMSUASTimeStamp_Type()
)
stmnHistPMMSUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSUASTimeStamp.setStatus("current")
_StmnHistPMMSUASValidity_Type = PMValidity
_StmnHistPMMSUASValidity_Object = MibTableColumn
stmnHistPMMSUASValidity = _StmnHistPMMSUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 54),
    _StmnHistPMMSUASValidity_Type()
)
stmnHistPMMSUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMMSUASValidity.setStatus("current")
_StmnHistPMOTUEBValue_Type = Unsigned32
_StmnHistPMOTUEBValue_Object = MibTableColumn
stmnHistPMOTUEBValue = _StmnHistPMOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 55),
    _StmnHistPMOTUEBValue_Type()
)
stmnHistPMOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUEBValue.setStatus("current")
_StmnHistPMOTUEBTimeStamp_Type = DateAndTime
_StmnHistPMOTUEBTimeStamp_Object = MibTableColumn
stmnHistPMOTUEBTimeStamp = _StmnHistPMOTUEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 56),
    _StmnHistPMOTUEBTimeStamp_Type()
)
stmnHistPMOTUEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUEBTimeStamp.setStatus("current")
_StmnHistPMOTUEBValidity_Type = PMValidity
_StmnHistPMOTUEBValidity_Object = MibTableColumn
stmnHistPMOTUEBValidity = _StmnHistPMOTUEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 57),
    _StmnHistPMOTUEBValidity_Type()
)
stmnHistPMOTUEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUEBValidity.setStatus("current")
_StmnHistPMOTUBBEValue_Type = Unsigned32
_StmnHistPMOTUBBEValue_Object = MibTableColumn
stmnHistPMOTUBBEValue = _StmnHistPMOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 58),
    _StmnHistPMOTUBBEValue_Type()
)
stmnHistPMOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUBBEValue.setStatus("current")
_StmnHistPMOTUBBETimeStamp_Type = DateAndTime
_StmnHistPMOTUBBETimeStamp_Object = MibTableColumn
stmnHistPMOTUBBETimeStamp = _StmnHistPMOTUBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 59),
    _StmnHistPMOTUBBETimeStamp_Type()
)
stmnHistPMOTUBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUBBETimeStamp.setStatus("current")
_StmnHistPMOTUBBEValidity_Type = PMValidity
_StmnHistPMOTUBBEValidity_Object = MibTableColumn
stmnHistPMOTUBBEValidity = _StmnHistPMOTUBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 60),
    _StmnHistPMOTUBBEValidity_Type()
)
stmnHistPMOTUBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUBBEValidity.setStatus("current")
_StmnHistPMOTUESValue_Type = Unsigned32
_StmnHistPMOTUESValue_Object = MibTableColumn
stmnHistPMOTUESValue = _StmnHistPMOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 61),
    _StmnHistPMOTUESValue_Type()
)
stmnHistPMOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUESValue.setStatus("current")
_StmnHistPMOTUESTimeStamp_Type = DateAndTime
_StmnHistPMOTUESTimeStamp_Object = MibTableColumn
stmnHistPMOTUESTimeStamp = _StmnHistPMOTUESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 62),
    _StmnHistPMOTUESTimeStamp_Type()
)
stmnHistPMOTUESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUESTimeStamp.setStatus("current")
_StmnHistPMOTUESValidity_Type = PMValidity
_StmnHistPMOTUESValidity_Object = MibTableColumn
stmnHistPMOTUESValidity = _StmnHistPMOTUESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 63),
    _StmnHistPMOTUESValidity_Type()
)
stmnHistPMOTUESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUESValidity.setStatus("current")
_StmnHistPMOTUSESValue_Type = Unsigned32
_StmnHistPMOTUSESValue_Object = MibTableColumn
stmnHistPMOTUSESValue = _StmnHistPMOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 64),
    _StmnHistPMOTUSESValue_Type()
)
stmnHistPMOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUSESValue.setStatus("current")
_StmnHistPMOTUSESTimeStamp_Type = DateAndTime
_StmnHistPMOTUSESTimeStamp_Object = MibTableColumn
stmnHistPMOTUSESTimeStamp = _StmnHistPMOTUSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 65),
    _StmnHistPMOTUSESTimeStamp_Type()
)
stmnHistPMOTUSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUSESTimeStamp.setStatus("current")
_StmnHistPMOTUSESValidity_Type = PMValidity
_StmnHistPMOTUSESValidity_Object = MibTableColumn
stmnHistPMOTUSESValidity = _StmnHistPMOTUSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 66),
    _StmnHistPMOTUSESValidity_Type()
)
stmnHistPMOTUSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUSESValidity.setStatus("current")
_StmnHistPMOTUOFSValue_Type = Unsigned32
_StmnHistPMOTUOFSValue_Object = MibTableColumn
stmnHistPMOTUOFSValue = _StmnHistPMOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 67),
    _StmnHistPMOTUOFSValue_Type()
)
stmnHistPMOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUOFSValue.setStatus("current")
_StmnHistPMOTUOFSTimeStamp_Type = DateAndTime
_StmnHistPMOTUOFSTimeStamp_Object = MibTableColumn
stmnHistPMOTUOFSTimeStamp = _StmnHistPMOTUOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 68),
    _StmnHistPMOTUOFSTimeStamp_Type()
)
stmnHistPMOTUOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUOFSTimeStamp.setStatus("current")
_StmnHistPMOTUOFSValidity_Type = PMValidity
_StmnHistPMOTUOFSValidity_Object = MibTableColumn
stmnHistPMOTUOFSValidity = _StmnHistPMOTUOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 69),
    _StmnHistPMOTUOFSValidity_Type()
)
stmnHistPMOTUOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUOFSValidity.setStatus("current")
_StmnHistPMNBITCRValue_Type = Unsigned32
_StmnHistPMNBITCRValue_Object = MibTableColumn
stmnHistPMNBITCRValue = _StmnHistPMNBITCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 70),
    _StmnHistPMNBITCRValue_Type()
)
stmnHistPMNBITCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMNBITCRValue.setStatus("current")
_StmnHistPMNBITCRTimeStamp_Type = DateAndTime
_StmnHistPMNBITCRTimeStamp_Object = MibTableColumn
stmnHistPMNBITCRTimeStamp = _StmnHistPMNBITCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 71),
    _StmnHistPMNBITCRTimeStamp_Type()
)
stmnHistPMNBITCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBITCRTimeStamp.setStatus("current")
_StmnHistPMNBITCRValidity_Type = PMValidity
_StmnHistPMNBITCRValidity_Object = MibTableColumn
stmnHistPMNBITCRValidity = _StmnHistPMNBITCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 72),
    _StmnHistPMNBITCRValidity_Type()
)
stmnHistPMNBITCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBITCRValidity.setStatus("current")
_StmnHistPMNBYTCRValue_Type = Unsigned32
_StmnHistPMNBYTCRValue_Object = MibTableColumn
stmnHistPMNBYTCRValue = _StmnHistPMNBYTCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 73),
    _StmnHistPMNBYTCRValue_Type()
)
stmnHistPMNBYTCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMNBYTCRValue.setStatus("current")
_StmnHistPMNBYTCRTimeStamp_Type = DateAndTime
_StmnHistPMNBYTCRTimeStamp_Object = MibTableColumn
stmnHistPMNBYTCRTimeStamp = _StmnHistPMNBYTCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 74),
    _StmnHistPMNBYTCRTimeStamp_Type()
)
stmnHistPMNBYTCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBYTCRTimeStamp.setStatus("current")
_StmnHistPMNBYTCRValidity_Type = PMValidity
_StmnHistPMNBYTCRValidity_Object = MibTableColumn
stmnHistPMNBYTCRValidity = _StmnHistPMNBYTCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 75),
    _StmnHistPMNBYTCRValidity_Type()
)
stmnHistPMNBYTCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBYTCRValidity.setStatus("current")
_StmnHistPMUNCRCDWValue_Type = Unsigned32
_StmnHistPMUNCRCDWValue_Object = MibTableColumn
stmnHistPMUNCRCDWValue = _StmnHistPMUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 76),
    _StmnHistPMUNCRCDWValue_Type()
)
stmnHistPMUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMUNCRCDWValue.setStatus("current")
_StmnHistPMUNCRCDWTimeStamp_Type = DateAndTime
_StmnHistPMUNCRCDWTimeStamp_Object = MibTableColumn
stmnHistPMUNCRCDWTimeStamp = _StmnHistPMUNCRCDWTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 77),
    _StmnHistPMUNCRCDWTimeStamp_Type()
)
stmnHistPMUNCRCDWTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMUNCRCDWTimeStamp.setStatus("current")
_StmnHistPMUNCRCDWValidity_Type = PMValidity
_StmnHistPMUNCRCDWValidity_Object = MibTableColumn
stmnHistPMUNCRCDWValidity = _StmnHistPMUNCRCDWValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 78),
    _StmnHistPMUNCRCDWValidity_Type()
)
stmnHistPMUNCRCDWValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMUNCRCDWValidity.setStatus("current")
_StmnHistPMRSEBInitialize_Type = InitializeCmd
_StmnHistPMRSEBInitialize_Object = MibTableColumn
stmnHistPMRSEBInitialize = _StmnHistPMRSEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 79),
    _StmnHistPMRSEBInitialize_Type()
)
stmnHistPMRSEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSEBInitialize.setStatus("current")
_StmnHistPMRSBBEInitialize_Type = InitializeCmd
_StmnHistPMRSBBEInitialize_Object = MibTableColumn
stmnHistPMRSBBEInitialize = _StmnHistPMRSBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 80),
    _StmnHistPMRSBBEInitialize_Type()
)
stmnHistPMRSBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSBBEInitialize.setStatus("current")
_StmnHistPMRSESInitialize_Type = InitializeCmd
_StmnHistPMRSESInitialize_Object = MibTableColumn
stmnHistPMRSESInitialize = _StmnHistPMRSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 81),
    _StmnHistPMRSESInitialize_Type()
)
stmnHistPMRSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSESInitialize.setStatus("current")
_StmnHistPMRSSESInitialize_Type = InitializeCmd
_StmnHistPMRSSESInitialize_Object = MibTableColumn
stmnHistPMRSSESInitialize = _StmnHistPMRSSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 82),
    _StmnHistPMRSSESInitialize_Type()
)
stmnHistPMRSSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSSESInitialize.setStatus("current")
_StmnHistPMRSOFSInitialize_Type = InitializeCmd
_StmnHistPMRSOFSInitialize_Object = MibTableColumn
stmnHistPMRSOFSInitialize = _StmnHistPMRSOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 83),
    _StmnHistPMRSOFSInitialize_Type()
)
stmnHistPMRSOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSOFSInitialize.setStatus("current")
_StmnHistPMMSEBInitialize_Type = InitializeCmd
_StmnHistPMMSEBInitialize_Object = MibTableColumn
stmnHistPMMSEBInitialize = _StmnHistPMMSEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 84),
    _StmnHistPMMSEBInitialize_Type()
)
stmnHistPMMSEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSEBInitialize.setStatus("current")
_StmnHistPMMSBBEInitialize_Type = InitializeCmd
_StmnHistPMMSBBEInitialize_Object = MibTableColumn
stmnHistPMMSBBEInitialize = _StmnHistPMMSBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 85),
    _StmnHistPMMSBBEInitialize_Type()
)
stmnHistPMMSBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSBBEInitialize.setStatus("current")
_StmnHistPMMSESInitialize_Type = InitializeCmd
_StmnHistPMMSESInitialize_Object = MibTableColumn
stmnHistPMMSESInitialize = _StmnHistPMMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 86),
    _StmnHistPMMSESInitialize_Type()
)
stmnHistPMMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSESInitialize.setStatus("current")
_StmnHistPMMSSESInitialize_Type = InitializeCmd
_StmnHistPMMSSESInitialize_Object = MibTableColumn
stmnHistPMMSSESInitialize = _StmnHistPMMSSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 87),
    _StmnHistPMMSSESInitialize_Type()
)
stmnHistPMMSSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSSESInitialize.setStatus("current")
_StmnHistPMMSUASInitialize_Type = InitializeCmd
_StmnHistPMMSUASInitialize_Object = MibTableColumn
stmnHistPMMSUASInitialize = _StmnHistPMMSUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 88),
    _StmnHistPMMSUASInitialize_Type()
)
stmnHistPMMSUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMMSUASInitialize.setStatus("current")
_StmnHistPMOTUEBInitialize_Type = InitializeCmd
_StmnHistPMOTUEBInitialize_Object = MibTableColumn
stmnHistPMOTUEBInitialize = _StmnHistPMOTUEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 89),
    _StmnHistPMOTUEBInitialize_Type()
)
stmnHistPMOTUEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUEBInitialize.setStatus("current")
_StmnHistPMOTUBBEInitialize_Type = InitializeCmd
_StmnHistPMOTUBBEInitialize_Object = MibTableColumn
stmnHistPMOTUBBEInitialize = _StmnHistPMOTUBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 90),
    _StmnHistPMOTUBBEInitialize_Type()
)
stmnHistPMOTUBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUBBEInitialize.setStatus("current")
_StmnHistPMOTUESInitialize_Type = InitializeCmd
_StmnHistPMOTUESInitialize_Object = MibTableColumn
stmnHistPMOTUESInitialize = _StmnHistPMOTUESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 91),
    _StmnHistPMOTUESInitialize_Type()
)
stmnHistPMOTUESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUESInitialize.setStatus("current")
_StmnHistPMOTUSESInitialize_Type = InitializeCmd
_StmnHistPMOTUSESInitialize_Object = MibTableColumn
stmnHistPMOTUSESInitialize = _StmnHistPMOTUSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 92),
    _StmnHistPMOTUSESInitialize_Type()
)
stmnHistPMOTUSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUSESInitialize.setStatus("current")
_StmnHistPMOTUOFSInitialize_Type = InitializeCmd
_StmnHistPMOTUOFSInitialize_Object = MibTableColumn
stmnHistPMOTUOFSInitialize = _StmnHistPMOTUOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 93),
    _StmnHistPMOTUOFSInitialize_Type()
)
stmnHistPMOTUOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUOFSInitialize.setStatus("current")
_StmnHistPMNBITCRInitialize_Type = InitializeCmd
_StmnHistPMNBITCRInitialize_Object = MibTableColumn
stmnHistPMNBITCRInitialize = _StmnHistPMNBITCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 94),
    _StmnHistPMNBITCRInitialize_Type()
)
stmnHistPMNBITCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMNBITCRInitialize.setStatus("current")
_StmnHistPMNBYTCRInitialize_Type = InitializeCmd
_StmnHistPMNBYTCRInitialize_Object = MibTableColumn
stmnHistPMNBYTCRInitialize = _StmnHistPMNBYTCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 95),
    _StmnHistPMNBYTCRInitialize_Type()
)
stmnHistPMNBYTCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMNBYTCRInitialize.setStatus("current")
_StmnHistPMUNCRCDWInitialize_Type = InitializeCmd
_StmnHistPMUNCRCDWInitialize_Object = MibTableColumn
stmnHistPMUNCRCDWInitialize = _StmnHistPMUNCRCDWInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 96),
    _StmnHistPMUNCRCDWInitialize_Type()
)
stmnHistPMUNCRCDWInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMUNCRCDWInitialize.setStatus("current")
_StmnHistPMOTNBERValue_Type = DisplayString
_StmnHistPMOTNBERValue_Object = MibTableColumn
stmnHistPMOTNBERValue = _StmnHistPMOTNBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 97),
    _StmnHistPMOTNBERValue_Type()
)
stmnHistPMOTNBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTNBERValue.setStatus("current")
_StmnHistPMOTNBERTimeStamp_Type = DateAndTime
_StmnHistPMOTNBERTimeStamp_Object = MibTableColumn
stmnHistPMOTNBERTimeStamp = _StmnHistPMOTNBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 98),
    _StmnHistPMOTNBERTimeStamp_Type()
)
stmnHistPMOTNBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTNBERTimeStamp.setStatus("current")
_StmnHistPMOTNBERValidity_Type = PMValidity
_StmnHistPMOTNBERValidity_Object = MibTableColumn
stmnHistPMOTNBERValidity = _StmnHistPMOTNBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 99),
    _StmnHistPMOTNBERValidity_Type()
)
stmnHistPMOTNBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTNBERValidity.setStatus("current")
_StmnHistPMOTNBERInitialize_Type = InitializeCmd
_StmnHistPMOTNBERInitialize_Object = MibTableColumn
stmnHistPMOTNBERInitialize = _StmnHistPMOTNBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 100),
    _StmnHistPMOTNBERInitialize_Type()
)
stmnHistPMOTNBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTNBERInitialize.setStatus("current")
_StmnHistPMOTNAVGBERValue_Type = DisplayString
_StmnHistPMOTNAVGBERValue_Object = MibTableColumn
stmnHistPMOTNAVGBERValue = _StmnHistPMOTNAVGBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 101),
    _StmnHistPMOTNAVGBERValue_Type()
)
stmnHistPMOTNAVGBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTNAVGBERValue.setStatus("current")
_StmnHistPMOTNAVGBERTimeStamp_Type = DateAndTime
_StmnHistPMOTNAVGBERTimeStamp_Object = MibTableColumn
stmnHistPMOTNAVGBERTimeStamp = _StmnHistPMOTNAVGBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 102),
    _StmnHistPMOTNAVGBERTimeStamp_Type()
)
stmnHistPMOTNAVGBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTNAVGBERTimeStamp.setStatus("current")
_StmnHistPMOTNAVGBERValidity_Type = PMValidity
_StmnHistPMOTNAVGBERValidity_Object = MibTableColumn
stmnHistPMOTNAVGBERValidity = _StmnHistPMOTNAVGBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 103),
    _StmnHistPMOTNAVGBERValidity_Type()
)
stmnHistPMOTNAVGBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTNAVGBERValidity.setStatus("current")
_StmnHistPMOTNAVGBERInitialize_Type = InitializeCmd
_StmnHistPMOTNAVGBERInitialize_Object = MibTableColumn
stmnHistPMOTNAVGBERInitialize = _StmnHistPMOTNAVGBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 104),
    _StmnHistPMOTNAVGBERInitialize_Type()
)
stmnHistPMOTNAVGBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTNAVGBERInitialize.setStatus("current")
_StmnHistPMNBITCR64BitValue_Type = Unsigned64
_StmnHistPMNBITCR64BitValue_Object = MibTableColumn
stmnHistPMNBITCR64BitValue = _StmnHistPMNBITCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 105),
    _StmnHistPMNBITCR64BitValue_Type()
)
stmnHistPMNBITCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBITCR64BitValue.setStatus("current")
_StmnHistPMNBITCR64BitTimeStamp_Type = DateAndTime
_StmnHistPMNBITCR64BitTimeStamp_Object = MibTableColumn
stmnHistPMNBITCR64BitTimeStamp = _StmnHistPMNBITCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 106),
    _StmnHistPMNBITCR64BitTimeStamp_Type()
)
stmnHistPMNBITCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBITCR64BitTimeStamp.setStatus("current")
_StmnHistPMNBITCR64BitValidity_Type = PMValidity
_StmnHistPMNBITCR64BitValidity_Object = MibTableColumn
stmnHistPMNBITCR64BitValidity = _StmnHistPMNBITCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 107),
    _StmnHistPMNBITCR64BitValidity_Type()
)
stmnHistPMNBITCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBITCR64BitValidity.setStatus("current")
_StmnHistPMNBITCR64BitInitialize_Type = InitializeCmd
_StmnHistPMNBITCR64BitInitialize_Object = MibTableColumn
stmnHistPMNBITCR64BitInitialize = _StmnHistPMNBITCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 108),
    _StmnHistPMNBITCR64BitInitialize_Type()
)
stmnHistPMNBITCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMNBITCR64BitInitialize.setStatus("current")
_StmnHistPMNBYTCR64BitValue_Type = Unsigned64
_StmnHistPMNBYTCR64BitValue_Object = MibTableColumn
stmnHistPMNBYTCR64BitValue = _StmnHistPMNBYTCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 109),
    _StmnHistPMNBYTCR64BitValue_Type()
)
stmnHistPMNBYTCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBYTCR64BitValue.setStatus("current")
_StmnHistPMNBYTCR64BitTimeStamp_Type = DateAndTime
_StmnHistPMNBYTCR64BitTimeStamp_Object = MibTableColumn
stmnHistPMNBYTCR64BitTimeStamp = _StmnHistPMNBYTCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 110),
    _StmnHistPMNBYTCR64BitTimeStamp_Type()
)
stmnHistPMNBYTCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBYTCR64BitTimeStamp.setStatus("current")
_StmnHistPMNBYTCR64BitValidity_Type = PMValidity
_StmnHistPMNBYTCR64BitValidity_Object = MibTableColumn
stmnHistPMNBYTCR64BitValidity = _StmnHistPMNBYTCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 111),
    _StmnHistPMNBYTCR64BitValidity_Type()
)
stmnHistPMNBYTCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMNBYTCR64BitValidity.setStatus("current")
_StmnHistPMNBYTCR64BitInitialize_Type = InitializeCmd
_StmnHistPMNBYTCR64BitInitialize_Object = MibTableColumn
stmnHistPMNBYTCR64BitInitialize = _StmnHistPMNBYTCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 112),
    _StmnHistPMNBYTCR64BitInitialize_Type()
)
stmnHistPMNBYTCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMNBYTCR64BitInitialize.setStatus("current")
_StmnHistPMRSUASValue_Type = Unsigned32
_StmnHistPMRSUASValue_Object = MibTableColumn
stmnHistPMRSUASValue = _StmnHistPMRSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 113),
    _StmnHistPMRSUASValue_Type()
)
stmnHistPMRSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSUASValue.setStatus("current")
_StmnHistPMRSUASTimeStamp_Type = DateAndTime
_StmnHistPMRSUASTimeStamp_Object = MibTableColumn
stmnHistPMRSUASTimeStamp = _StmnHistPMRSUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 114),
    _StmnHistPMRSUASTimeStamp_Type()
)
stmnHistPMRSUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSUASTimeStamp.setStatus("current")
_StmnHistPMRSUASValidity_Type = PMValidity
_StmnHistPMRSUASValidity_Object = MibTableColumn
stmnHistPMRSUASValidity = _StmnHistPMRSUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 115),
    _StmnHistPMRSUASValidity_Type()
)
stmnHistPMRSUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMRSUASValidity.setStatus("current")
_StmnHistPMRSUASInitialize_Type = InitializeCmd
_StmnHistPMRSUASInitialize_Object = MibTableColumn
stmnHistPMRSUASInitialize = _StmnHistPMRSUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 116),
    _StmnHistPMRSUASInitialize_Type()
)
stmnHistPMRSUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMRSUASInitialize.setStatus("current")
_StmnHistPMOTUUASValue_Type = Unsigned32
_StmnHistPMOTUUASValue_Object = MibTableColumn
stmnHistPMOTUUASValue = _StmnHistPMOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 117),
    _StmnHistPMOTUUASValue_Type()
)
stmnHistPMOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUUASValue.setStatus("current")
_StmnHistPMOTUUASTimeStamp_Type = DateAndTime
_StmnHistPMOTUUASTimeStamp_Object = MibTableColumn
stmnHistPMOTUUASTimeStamp = _StmnHistPMOTUUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 118),
    _StmnHistPMOTUUASTimeStamp_Type()
)
stmnHistPMOTUUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUUASTimeStamp.setStatus("current")
_StmnHistPMOTUUASValidity_Type = PMValidity
_StmnHistPMOTUUASValidity_Object = MibTableColumn
stmnHistPMOTUUASValidity = _StmnHistPMOTUUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 119),
    _StmnHistPMOTUUASValidity_Type()
)
stmnHistPMOTUUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOTUUASValidity.setStatus("current")
_StmnHistPMOTUUASInitialize_Type = InitializeCmd
_StmnHistPMOTUUASInitialize_Object = MibTableColumn
stmnHistPMOTUUASInitialize = _StmnHistPMOTUUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 120),
    _StmnHistPMOTUUASInitialize_Type()
)
stmnHistPMOTUUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOTUUASInitialize.setStatus("current")
_StmnHistPMOPRMinValue_Type = FixedX10
_StmnHistPMOPRMinValue_Object = MibTableColumn
stmnHistPMOPRMinValue = _StmnHistPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 121),
    _StmnHistPMOPRMinValue_Type()
)
stmnHistPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMOPRMinValue.setUnits("dBm/10")
_StmnHistPMOPRMinTimeStamp_Type = DateAndTime
_StmnHistPMOPRMinTimeStamp_Object = MibTableColumn
stmnHistPMOPRMinTimeStamp = _StmnHistPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 122),
    _StmnHistPMOPRMinTimeStamp_Type()
)
stmnHistPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRMinTimeStamp.setStatus("current")
_StmnHistPMOPRMinValidity_Type = PMValidity
_StmnHistPMOPRMinValidity_Object = MibTableColumn
stmnHistPMOPRMinValidity = _StmnHistPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 123),
    _StmnHistPMOPRMinValidity_Type()
)
stmnHistPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRMinValidity.setStatus("current")
_StmnHistPMOPRMinInitialize_Type = InitializeCmd
_StmnHistPMOPRMinInitialize_Object = MibTableColumn
stmnHistPMOPRMinInitialize = _StmnHistPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 124),
    _StmnHistPMOPRMinInitialize_Type()
)
stmnHistPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOPRMinInitialize.setStatus("current")
_StmnHistPMOPRMaxValue_Type = FixedX10
_StmnHistPMOPRMaxValue_Object = MibTableColumn
stmnHistPMOPRMaxValue = _StmnHistPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 125),
    _StmnHistPMOPRMaxValue_Type()
)
stmnHistPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMOPRMaxValue.setUnits("dBm/10")
_StmnHistPMOPRMaxTimeStamp_Type = DateAndTime
_StmnHistPMOPRMaxTimeStamp_Object = MibTableColumn
stmnHistPMOPRMaxTimeStamp = _StmnHistPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 126),
    _StmnHistPMOPRMaxTimeStamp_Type()
)
stmnHistPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRMaxTimeStamp.setStatus("current")
_StmnHistPMOPRMaxValidity_Type = PMValidity
_StmnHistPMOPRMaxValidity_Object = MibTableColumn
stmnHistPMOPRMaxValidity = _StmnHistPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 127),
    _StmnHistPMOPRMaxValidity_Type()
)
stmnHistPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRMaxValidity.setStatus("current")
_StmnHistPMOPRMaxInitialize_Type = InitializeCmd
_StmnHistPMOPRMaxInitialize_Object = MibTableColumn
stmnHistPMOPRMaxInitialize = _StmnHistPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 128),
    _StmnHistPMOPRMaxInitialize_Type()
)
stmnHistPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOPRMaxInitialize.setStatus("current")
_StmnHistPMOPRAvgValue_Type = FixedX10
_StmnHistPMOPRAvgValue_Object = MibTableColumn
stmnHistPMOPRAvgValue = _StmnHistPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 129),
    _StmnHistPMOPRAvgValue_Type()
)
stmnHistPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMOPRAvgValue.setUnits("dBm/10")
_StmnHistPMOPRAvgTimeStamp_Type = DateAndTime
_StmnHistPMOPRAvgTimeStamp_Object = MibTableColumn
stmnHistPMOPRAvgTimeStamp = _StmnHistPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 130),
    _StmnHistPMOPRAvgTimeStamp_Type()
)
stmnHistPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRAvgTimeStamp.setStatus("current")
_StmnHistPMOPRAvgValidity_Type = PMValidity
_StmnHistPMOPRAvgValidity_Object = MibTableColumn
stmnHistPMOPRAvgValidity = _StmnHistPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 131),
    _StmnHistPMOPRAvgValidity_Type()
)
stmnHistPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPRAvgValidity.setStatus("current")
_StmnHistPMOPRAvgInitialize_Type = InitializeCmd
_StmnHistPMOPRAvgInitialize_Object = MibTableColumn
stmnHistPMOPRAvgInitialize = _StmnHistPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 132),
    _StmnHistPMOPRAvgInitialize_Type()
)
stmnHistPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOPRAvgInitialize.setStatus("current")
_StmnHistPMOPTMinValue_Type = FixedX10
_StmnHistPMOPTMinValue_Object = MibTableColumn
stmnHistPMOPTMinValue = _StmnHistPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 133),
    _StmnHistPMOPTMinValue_Type()
)
stmnHistPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMOPTMinValue.setUnits("dBm/10")
_StmnHistPMOPTMinTimeStamp_Type = DateAndTime
_StmnHistPMOPTMinTimeStamp_Object = MibTableColumn
stmnHistPMOPTMinTimeStamp = _StmnHistPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 134),
    _StmnHistPMOPTMinTimeStamp_Type()
)
stmnHistPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTMinTimeStamp.setStatus("current")
_StmnHistPMOPTMinValidity_Type = PMValidity
_StmnHistPMOPTMinValidity_Object = MibTableColumn
stmnHistPMOPTMinValidity = _StmnHistPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 135),
    _StmnHistPMOPTMinValidity_Type()
)
stmnHistPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTMinValidity.setStatus("current")
_StmnHistPMOPTMinInitialize_Type = InitializeCmd
_StmnHistPMOPTMinInitialize_Object = MibTableColumn
stmnHistPMOPTMinInitialize = _StmnHistPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 136),
    _StmnHistPMOPTMinInitialize_Type()
)
stmnHistPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOPTMinInitialize.setStatus("current")
_StmnHistPMOPTMaxValue_Type = FixedX10
_StmnHistPMOPTMaxValue_Object = MibTableColumn
stmnHistPMOPTMaxValue = _StmnHistPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 137),
    _StmnHistPMOPTMaxValue_Type()
)
stmnHistPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMOPTMaxValue.setUnits("dBm/10")
_StmnHistPMOPTMaxTimeStamp_Type = DateAndTime
_StmnHistPMOPTMaxTimeStamp_Object = MibTableColumn
stmnHistPMOPTMaxTimeStamp = _StmnHistPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 138),
    _StmnHistPMOPTMaxTimeStamp_Type()
)
stmnHistPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTMaxTimeStamp.setStatus("current")
_StmnHistPMOPTMaxValidity_Type = PMValidity
_StmnHistPMOPTMaxValidity_Object = MibTableColumn
stmnHistPMOPTMaxValidity = _StmnHistPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 139),
    _StmnHistPMOPTMaxValidity_Type()
)
stmnHistPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTMaxValidity.setStatus("current")
_StmnHistPMOPTMaxInitialize_Type = InitializeCmd
_StmnHistPMOPTMaxInitialize_Object = MibTableColumn
stmnHistPMOPTMaxInitialize = _StmnHistPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 140),
    _StmnHistPMOPTMaxInitialize_Type()
)
stmnHistPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOPTMaxInitialize.setStatus("current")
_StmnHistPMOPTAvgValue_Type = FixedX10
_StmnHistPMOPTAvgValue_Object = MibTableColumn
stmnHistPMOPTAvgValue = _StmnHistPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 141),
    _StmnHistPMOPTAvgValue_Type()
)
stmnHistPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    stmnHistPMOPTAvgValue.setUnits("dBm/10")
_StmnHistPMOPTAvgTimeStamp_Type = DateAndTime
_StmnHistPMOPTAvgTimeStamp_Object = MibTableColumn
stmnHistPMOPTAvgTimeStamp = _StmnHistPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 142),
    _StmnHistPMOPTAvgTimeStamp_Type()
)
stmnHistPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTAvgTimeStamp.setStatus("current")
_StmnHistPMOPTAvgValidity_Type = PMValidity
_StmnHistPMOPTAvgValidity_Object = MibTableColumn
stmnHistPMOPTAvgValidity = _StmnHistPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 143),
    _StmnHistPMOPTAvgValidity_Type()
)
stmnHistPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmnHistPMOPTAvgValidity.setStatus("current")
_StmnHistPMOPTAvgInitialize_Type = InitializeCmd
_StmnHistPMOPTAvgInitialize_Object = MibTableColumn
stmnHistPMOPTAvgInitialize = _StmnHistPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 144),
    _StmnHistPMOPTAvgInitialize_Type()
)
stmnHistPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnHistPMOPTAvgInitialize.setStatus("current")
_StmnPMThresholdTable_Object = MibTable
stmnPMThresholdTable = _StmnPMThresholdTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16)
)
if mibBuilder.loadTexts:
    stmnPMThresholdTable.setStatus("current")
_StmnPMThresholdEntry_Object = MibTableRow
stmnPMThresholdEntry = _StmnPMThresholdEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1)
)
stmnPMThresholdEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stmnPMThresholdTypeIdx"),
    (0, "BTI-7000-MIB", "stmnPMThresholdShelfIdx"),
    (0, "BTI-7000-MIB", "stmnPMThresholdSlotIdx"),
    (0, "BTI-7000-MIB", "stmnPMThresholdPortIdx"),
    (0, "BTI-7000-MIB", "stmnPMThresholdIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    stmnPMThresholdEntry.setStatus("current")
_StmnPMThresholdTypeIdx_Type = StmnType
_StmnPMThresholdTypeIdx_Object = MibTableColumn
stmnPMThresholdTypeIdx = _StmnPMThresholdTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 1),
    _StmnPMThresholdTypeIdx_Type()
)
stmnPMThresholdTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnPMThresholdTypeIdx.setStatus("current")


class _StmnPMThresholdShelfIdx_Type(Integer32):
    """Custom type stmnPMThresholdShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StmnPMThresholdShelfIdx_Type.__name__ = "Integer32"
_StmnPMThresholdShelfIdx_Object = MibTableColumn
stmnPMThresholdShelfIdx = _StmnPMThresholdShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 2),
    _StmnPMThresholdShelfIdx_Type()
)
stmnPMThresholdShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnPMThresholdShelfIdx.setStatus("current")


class _StmnPMThresholdSlotIdx_Type(Integer32):
    """Custom type stmnPMThresholdSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StmnPMThresholdSlotIdx_Type.__name__ = "Integer32"
_StmnPMThresholdSlotIdx_Object = MibTableColumn
stmnPMThresholdSlotIdx = _StmnPMThresholdSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 3),
    _StmnPMThresholdSlotIdx_Type()
)
stmnPMThresholdSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnPMThresholdSlotIdx.setStatus("current")


class _StmnPMThresholdPortIdx_Type(Integer32):
    """Custom type stmnPMThresholdPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_StmnPMThresholdPortIdx_Type.__name__ = "Integer32"
_StmnPMThresholdPortIdx_Object = MibTableColumn
stmnPMThresholdPortIdx = _StmnPMThresholdPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 4),
    _StmnPMThresholdPortIdx_Type()
)
stmnPMThresholdPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnPMThresholdPortIdx.setStatus("current")
_StmnPMThresholdIntervalTypeIdx_Type = PMIntervalType
_StmnPMThresholdIntervalTypeIdx_Object = MibTableColumn
stmnPMThresholdIntervalTypeIdx = _StmnPMThresholdIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 5),
    _StmnPMThresholdIntervalTypeIdx_Type()
)
stmnPMThresholdIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnPMThresholdIntervalTypeIdx.setStatus("current")
_StmnPMThresholdRSEBValue_Type = Unsigned32
_StmnPMThresholdRSEBValue_Object = MibTableColumn
stmnPMThresholdRSEBValue = _StmnPMThresholdRSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 6),
    _StmnPMThresholdRSEBValue_Type()
)
stmnPMThresholdRSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdRSEBValue.setStatus("current")
_StmnPMThresholdRSBBEValue_Type = Unsigned32
_StmnPMThresholdRSBBEValue_Object = MibTableColumn
stmnPMThresholdRSBBEValue = _StmnPMThresholdRSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 7),
    _StmnPMThresholdRSBBEValue_Type()
)
stmnPMThresholdRSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdRSBBEValue.setStatus("current")
_StmnPMThresholdRSESValue_Type = Unsigned32
_StmnPMThresholdRSESValue_Object = MibTableColumn
stmnPMThresholdRSESValue = _StmnPMThresholdRSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 8),
    _StmnPMThresholdRSESValue_Type()
)
stmnPMThresholdRSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdRSESValue.setStatus("current")
_StmnPMThresholdRSSESValue_Type = Unsigned32
_StmnPMThresholdRSSESValue_Object = MibTableColumn
stmnPMThresholdRSSESValue = _StmnPMThresholdRSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 9),
    _StmnPMThresholdRSSESValue_Type()
)
stmnPMThresholdRSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdRSSESValue.setStatus("current")
_StmnPMThresholdRSOFSValue_Type = Unsigned32
_StmnPMThresholdRSOFSValue_Object = MibTableColumn
stmnPMThresholdRSOFSValue = _StmnPMThresholdRSOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 10),
    _StmnPMThresholdRSOFSValue_Type()
)
stmnPMThresholdRSOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdRSOFSValue.setStatus("current")
_StmnPMThresholdMSEBValue_Type = Unsigned32
_StmnPMThresholdMSEBValue_Object = MibTableColumn
stmnPMThresholdMSEBValue = _StmnPMThresholdMSEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 11),
    _StmnPMThresholdMSEBValue_Type()
)
stmnPMThresholdMSEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdMSEBValue.setStatus("current")
_StmnPMThresholdMSBBEValue_Type = Unsigned32
_StmnPMThresholdMSBBEValue_Object = MibTableColumn
stmnPMThresholdMSBBEValue = _StmnPMThresholdMSBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 12),
    _StmnPMThresholdMSBBEValue_Type()
)
stmnPMThresholdMSBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdMSBBEValue.setStatus("current")
_StmnPMThresholdMSESValue_Type = Unsigned32
_StmnPMThresholdMSESValue_Object = MibTableColumn
stmnPMThresholdMSESValue = _StmnPMThresholdMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 13),
    _StmnPMThresholdMSESValue_Type()
)
stmnPMThresholdMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdMSESValue.setStatus("current")
_StmnPMThresholdMSSESValue_Type = Unsigned32
_StmnPMThresholdMSSESValue_Object = MibTableColumn
stmnPMThresholdMSSESValue = _StmnPMThresholdMSSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 14),
    _StmnPMThresholdMSSESValue_Type()
)
stmnPMThresholdMSSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdMSSESValue.setStatus("current")
_StmnPMThresholdMSUASValue_Type = Unsigned32
_StmnPMThresholdMSUASValue_Object = MibTableColumn
stmnPMThresholdMSUASValue = _StmnPMThresholdMSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 15),
    _StmnPMThresholdMSUASValue_Type()
)
stmnPMThresholdMSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdMSUASValue.setStatus("current")
_StmnPMThresholdOTUEBValue_Type = Unsigned32
_StmnPMThresholdOTUEBValue_Object = MibTableColumn
stmnPMThresholdOTUEBValue = _StmnPMThresholdOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 16),
    _StmnPMThresholdOTUEBValue_Type()
)
stmnPMThresholdOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdOTUEBValue.setStatus("current")
_StmnPMThresholdOTUBBEValue_Type = Unsigned32
_StmnPMThresholdOTUBBEValue_Object = MibTableColumn
stmnPMThresholdOTUBBEValue = _StmnPMThresholdOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 17),
    _StmnPMThresholdOTUBBEValue_Type()
)
stmnPMThresholdOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdOTUBBEValue.setStatus("current")
_StmnPMThresholdOTUESValue_Type = Unsigned32
_StmnPMThresholdOTUESValue_Object = MibTableColumn
stmnPMThresholdOTUESValue = _StmnPMThresholdOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 18),
    _StmnPMThresholdOTUESValue_Type()
)
stmnPMThresholdOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdOTUESValue.setStatus("current")
_StmnPMThresholdOTUSESValue_Type = Unsigned32
_StmnPMThresholdOTUSESValue_Object = MibTableColumn
stmnPMThresholdOTUSESValue = _StmnPMThresholdOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 19),
    _StmnPMThresholdOTUSESValue_Type()
)
stmnPMThresholdOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdOTUSESValue.setStatus("current")
_StmnPMThresholdOTUOFSValue_Type = Unsigned32
_StmnPMThresholdOTUOFSValue_Object = MibTableColumn
stmnPMThresholdOTUOFSValue = _StmnPMThresholdOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 20),
    _StmnPMThresholdOTUOFSValue_Type()
)
stmnPMThresholdOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdOTUOFSValue.setStatus("current")
_StmnPMThresholdUNCRCDWValue_Type = Unsigned32
_StmnPMThresholdUNCRCDWValue_Object = MibTableColumn
stmnPMThresholdUNCRCDWValue = _StmnPMThresholdUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 23),
    _StmnPMThresholdUNCRCDWValue_Type()
)
stmnPMThresholdUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdUNCRCDWValue.setStatus("current")
_StmnPMThresholdRSUASValue_Type = Unsigned32
_StmnPMThresholdRSUASValue_Object = MibTableColumn
stmnPMThresholdRSUASValue = _StmnPMThresholdRSUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 24),
    _StmnPMThresholdRSUASValue_Type()
)
stmnPMThresholdRSUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdRSUASValue.setStatus("current")
_StmnPMThresholdOTUUASValue_Type = Unsigned32
_StmnPMThresholdOTUUASValue_Object = MibTableColumn
stmnPMThresholdOTUUASValue = _StmnPMThresholdOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 25),
    _StmnPMThresholdOTUUASValue_Type()
)
stmnPMThresholdOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnPMThresholdOTUUASValue.setStatus("current")
_VcnCrntPMTable_Object = MibTable
vcnCrntPMTable = _VcnCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17)
)
if mibBuilder.loadTexts:
    vcnCrntPMTable.setStatus("current")
_VcnCrntPMEntry_Object = MibTableRow
vcnCrntPMEntry = _VcnCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1)
)
vcnCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "vcnCrntPMTypeIdx"),
    (0, "BTI-7000-MIB", "vcnCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "vcnCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "vcnCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "vcnCrntPMIdx"),
    (0, "BTI-7000-MIB", "vcnCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    vcnCrntPMEntry.setStatus("current")
_VcnCrntPMTypeIdx_Type = VcnType
_VcnCrntPMTypeIdx_Object = MibTableColumn
vcnCrntPMTypeIdx = _VcnCrntPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 1),
    _VcnCrntPMTypeIdx_Type()
)
vcnCrntPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnCrntPMTypeIdx.setStatus("current")


class _VcnCrntPMShelfIdx_Type(Integer32):
    """Custom type vcnCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcnCrntPMShelfIdx_Type.__name__ = "Integer32"
_VcnCrntPMShelfIdx_Object = MibTableColumn
vcnCrntPMShelfIdx = _VcnCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 2),
    _VcnCrntPMShelfIdx_Type()
)
vcnCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnCrntPMShelfIdx.setStatus("current")


class _VcnCrntPMSlotIdx_Type(Integer32):
    """Custom type vcnCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcnCrntPMSlotIdx_Type.__name__ = "Integer32"
_VcnCrntPMSlotIdx_Object = MibTableColumn
vcnCrntPMSlotIdx = _VcnCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 3),
    _VcnCrntPMSlotIdx_Type()
)
vcnCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnCrntPMSlotIdx.setStatus("current")


class _VcnCrntPMPortIdx_Type(Integer32):
    """Custom type vcnCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcnCrntPMPortIdx_Type.__name__ = "Integer32"
_VcnCrntPMPortIdx_Object = MibTableColumn
vcnCrntPMPortIdx = _VcnCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 4),
    _VcnCrntPMPortIdx_Type()
)
vcnCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnCrntPMPortIdx.setStatus("current")


class _VcnCrntPMIdx_Type(Integer32):
    """Custom type vcnCrntPMIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_VcnCrntPMIdx_Type.__name__ = "Integer32"
_VcnCrntPMIdx_Object = MibTableColumn
vcnCrntPMIdx = _VcnCrntPMIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 5),
    _VcnCrntPMIdx_Type()
)
vcnCrntPMIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnCrntPMIdx.setStatus("current")
_VcnCrntPMIntervalTypeIdx_Type = PMIntervalType
_VcnCrntPMIntervalTypeIdx_Object = MibTableColumn
vcnCrntPMIntervalTypeIdx = _VcnCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 6),
    _VcnCrntPMIntervalTypeIdx_Type()
)
vcnCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnCrntPMIntervalTypeIdx.setStatus("current")
_VcnCrntPMHPEBValue_Type = Unsigned32
_VcnCrntPMHPEBValue_Object = MibTableColumn
vcnCrntPMHPEBValue = _VcnCrntPMHPEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 7),
    _VcnCrntPMHPEBValue_Type()
)
vcnCrntPMHPEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPEBValue.setStatus("current")
_VcnCrntPMHPEBTimeStamp_Type = DateAndTime
_VcnCrntPMHPEBTimeStamp_Object = MibTableColumn
vcnCrntPMHPEBTimeStamp = _VcnCrntPMHPEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 8),
    _VcnCrntPMHPEBTimeStamp_Type()
)
vcnCrntPMHPEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPEBTimeStamp.setStatus("current")
_VcnCrntPMHPEBValidity_Type = PMValidity
_VcnCrntPMHPEBValidity_Object = MibTableColumn
vcnCrntPMHPEBValidity = _VcnCrntPMHPEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 9),
    _VcnCrntPMHPEBValidity_Type()
)
vcnCrntPMHPEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPEBValidity.setStatus("current")
_VcnCrntPMHPBBEValue_Type = Unsigned32
_VcnCrntPMHPBBEValue_Object = MibTableColumn
vcnCrntPMHPBBEValue = _VcnCrntPMHPBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 10),
    _VcnCrntPMHPBBEValue_Type()
)
vcnCrntPMHPBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPBBEValue.setStatus("current")
_VcnCrntPMHPBBETimeStamp_Type = DateAndTime
_VcnCrntPMHPBBETimeStamp_Object = MibTableColumn
vcnCrntPMHPBBETimeStamp = _VcnCrntPMHPBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 11),
    _VcnCrntPMHPBBETimeStamp_Type()
)
vcnCrntPMHPBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPBBETimeStamp.setStatus("current")
_VcnCrntPMHPBBEValidity_Type = PMValidity
_VcnCrntPMHPBBEValidity_Object = MibTableColumn
vcnCrntPMHPBBEValidity = _VcnCrntPMHPBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 12),
    _VcnCrntPMHPBBEValidity_Type()
)
vcnCrntPMHPBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPBBEValidity.setStatus("current")
_VcnCrntPMHPESValue_Type = Unsigned32
_VcnCrntPMHPESValue_Object = MibTableColumn
vcnCrntPMHPESValue = _VcnCrntPMHPESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 13),
    _VcnCrntPMHPESValue_Type()
)
vcnCrntPMHPESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPESValue.setStatus("current")
_VcnCrntPMHPESTimeStamp_Type = DateAndTime
_VcnCrntPMHPESTimeStamp_Object = MibTableColumn
vcnCrntPMHPESTimeStamp = _VcnCrntPMHPESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 14),
    _VcnCrntPMHPESTimeStamp_Type()
)
vcnCrntPMHPESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPESTimeStamp.setStatus("current")
_VcnCrntPMHPESValidity_Type = PMValidity
_VcnCrntPMHPESValidity_Object = MibTableColumn
vcnCrntPMHPESValidity = _VcnCrntPMHPESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 15),
    _VcnCrntPMHPESValidity_Type()
)
vcnCrntPMHPESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPESValidity.setStatus("current")
_VcnCrntPMHPSESValue_Type = Unsigned32
_VcnCrntPMHPSESValue_Object = MibTableColumn
vcnCrntPMHPSESValue = _VcnCrntPMHPSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 16),
    _VcnCrntPMHPSESValue_Type()
)
vcnCrntPMHPSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPSESValue.setStatus("current")
_VcnCrntPMHPSESTimeStamp_Type = DateAndTime
_VcnCrntPMHPSESTimeStamp_Object = MibTableColumn
vcnCrntPMHPSESTimeStamp = _VcnCrntPMHPSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 17),
    _VcnCrntPMHPSESTimeStamp_Type()
)
vcnCrntPMHPSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPSESTimeStamp.setStatus("current")
_VcnCrntPMHPSESValidity_Type = PMValidity
_VcnCrntPMHPSESValidity_Object = MibTableColumn
vcnCrntPMHPSESValidity = _VcnCrntPMHPSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 18),
    _VcnCrntPMHPSESValidity_Type()
)
vcnCrntPMHPSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPSESValidity.setStatus("current")
_VcnCrntPMHPUASValue_Type = Unsigned32
_VcnCrntPMHPUASValue_Object = MibTableColumn
vcnCrntPMHPUASValue = _VcnCrntPMHPUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 19),
    _VcnCrntPMHPUASValue_Type()
)
vcnCrntPMHPUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPUASValue.setStatus("current")
_VcnCrntPMHPUASTimeStamp_Type = DateAndTime
_VcnCrntPMHPUASTimeStamp_Object = MibTableColumn
vcnCrntPMHPUASTimeStamp = _VcnCrntPMHPUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 20),
    _VcnCrntPMHPUASTimeStamp_Type()
)
vcnCrntPMHPUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPUASTimeStamp.setStatus("current")
_VcnCrntPMHPUASValidity_Type = PMValidity
_VcnCrntPMHPUASValidity_Object = MibTableColumn
vcnCrntPMHPUASValidity = _VcnCrntPMHPUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 21),
    _VcnCrntPMHPUASValidity_Type()
)
vcnCrntPMHPUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnCrntPMHPUASValidity.setStatus("current")
_VcnCrntPMHPEBInitialize_Type = InitializeCmd
_VcnCrntPMHPEBInitialize_Object = MibTableColumn
vcnCrntPMHPEBInitialize = _VcnCrntPMHPEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 22),
    _VcnCrntPMHPEBInitialize_Type()
)
vcnCrntPMHPEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPEBInitialize.setStatus("current")
_VcnCrntPMHPBBEInitialize_Type = InitializeCmd
_VcnCrntPMHPBBEInitialize_Object = MibTableColumn
vcnCrntPMHPBBEInitialize = _VcnCrntPMHPBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 23),
    _VcnCrntPMHPBBEInitialize_Type()
)
vcnCrntPMHPBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPBBEInitialize.setStatus("current")
_VcnCrntPMHPESInitialize_Type = InitializeCmd
_VcnCrntPMHPESInitialize_Object = MibTableColumn
vcnCrntPMHPESInitialize = _VcnCrntPMHPESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 24),
    _VcnCrntPMHPESInitialize_Type()
)
vcnCrntPMHPESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPESInitialize.setStatus("current")
_VcnCrntPMHPSESInitialize_Type = InitializeCmd
_VcnCrntPMHPSESInitialize_Object = MibTableColumn
vcnCrntPMHPSESInitialize = _VcnCrntPMHPSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 25),
    _VcnCrntPMHPSESInitialize_Type()
)
vcnCrntPMHPSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPSESInitialize.setStatus("current")
_VcnCrntPMHPUASInitialize_Type = InitializeCmd
_VcnCrntPMHPUASInitialize_Object = MibTableColumn
vcnCrntPMHPUASInitialize = _VcnCrntPMHPUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 26),
    _VcnCrntPMHPUASInitialize_Type()
)
vcnCrntPMHPUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnCrntPMHPUASInitialize.setStatus("current")
_VcnHistPMTable_Object = MibTable
vcnHistPMTable = _VcnHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18)
)
if mibBuilder.loadTexts:
    vcnHistPMTable.setStatus("current")
_VcnHistPMEntry_Object = MibTableRow
vcnHistPMEntry = _VcnHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1)
)
vcnHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "vcnHistPMTypeIdx"),
    (0, "BTI-7000-MIB", "vcnHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "vcnHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "vcnHistPMPortIdx"),
    (0, "BTI-7000-MIB", "vcnHistPMIdx"),
    (0, "BTI-7000-MIB", "vcnHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "vcnHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    vcnHistPMEntry.setStatus("current")
_VcnHistPMTypeIdx_Type = VcnType
_VcnHistPMTypeIdx_Object = MibTableColumn
vcnHistPMTypeIdx = _VcnHistPMTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 1),
    _VcnHistPMTypeIdx_Type()
)
vcnHistPMTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnHistPMTypeIdx.setStatus("current")


class _VcnHistPMShelfIdx_Type(Integer32):
    """Custom type vcnHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcnHistPMShelfIdx_Type.__name__ = "Integer32"
_VcnHistPMShelfIdx_Object = MibTableColumn
vcnHistPMShelfIdx = _VcnHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 2),
    _VcnHistPMShelfIdx_Type()
)
vcnHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnHistPMShelfIdx.setStatus("current")


class _VcnHistPMSlotIdx_Type(Integer32):
    """Custom type vcnHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcnHistPMSlotIdx_Type.__name__ = "Integer32"
_VcnHistPMSlotIdx_Object = MibTableColumn
vcnHistPMSlotIdx = _VcnHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 3),
    _VcnHistPMSlotIdx_Type()
)
vcnHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnHistPMSlotIdx.setStatus("current")


class _VcnHistPMPortIdx_Type(Integer32):
    """Custom type vcnHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcnHistPMPortIdx_Type.__name__ = "Integer32"
_VcnHistPMPortIdx_Object = MibTableColumn
vcnHistPMPortIdx = _VcnHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 4),
    _VcnHistPMPortIdx_Type()
)
vcnHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnHistPMPortIdx.setStatus("current")


class _VcnHistPMIdx_Type(Integer32):
    """Custom type vcnHistPMIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_VcnHistPMIdx_Type.__name__ = "Integer32"
_VcnHistPMIdx_Object = MibTableColumn
vcnHistPMIdx = _VcnHistPMIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 5),
    _VcnHistPMIdx_Type()
)
vcnHistPMIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnHistPMIdx.setStatus("current")
_VcnHistPMIntervalTypeIdx_Type = PMIntervalType
_VcnHistPMIntervalTypeIdx_Object = MibTableColumn
vcnHistPMIntervalTypeIdx = _VcnHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 6),
    _VcnHistPMIntervalTypeIdx_Type()
)
vcnHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnHistPMIntervalTypeIdx.setStatus("current")


class _VcnHistPMIntervalIdx_Type(Integer32):
    """Custom type vcnHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_VcnHistPMIntervalIdx_Type.__name__ = "Integer32"
_VcnHistPMIntervalIdx_Object = MibTableColumn
vcnHistPMIntervalIdx = _VcnHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 7),
    _VcnHistPMIntervalIdx_Type()
)
vcnHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnHistPMIntervalIdx.setStatus("current")
_VcnHistPMHPEBValue_Type = Unsigned32
_VcnHistPMHPEBValue_Object = MibTableColumn
vcnHistPMHPEBValue = _VcnHistPMHPEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 8),
    _VcnHistPMHPEBValue_Type()
)
vcnHistPMHPEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPEBValue.setStatus("current")
_VcnHistPMHPEBTimeStamp_Type = DateAndTime
_VcnHistPMHPEBTimeStamp_Object = MibTableColumn
vcnHistPMHPEBTimeStamp = _VcnHistPMHPEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 9),
    _VcnHistPMHPEBTimeStamp_Type()
)
vcnHistPMHPEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPEBTimeStamp.setStatus("current")
_VcnHistPMHPEBValidity_Type = PMValidity
_VcnHistPMHPEBValidity_Object = MibTableColumn
vcnHistPMHPEBValidity = _VcnHistPMHPEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 10),
    _VcnHistPMHPEBValidity_Type()
)
vcnHistPMHPEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPEBValidity.setStatus("current")
_VcnHistPMHPBBEValue_Type = Unsigned32
_VcnHistPMHPBBEValue_Object = MibTableColumn
vcnHistPMHPBBEValue = _VcnHistPMHPBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 11),
    _VcnHistPMHPBBEValue_Type()
)
vcnHistPMHPBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPBBEValue.setStatus("current")
_VcnHistPMHPBBETimeStamp_Type = DateAndTime
_VcnHistPMHPBBETimeStamp_Object = MibTableColumn
vcnHistPMHPBBETimeStamp = _VcnHistPMHPBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 12),
    _VcnHistPMHPBBETimeStamp_Type()
)
vcnHistPMHPBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPBBETimeStamp.setStatus("current")
_VcnHistPMHPBBEValidity_Type = PMValidity
_VcnHistPMHPBBEValidity_Object = MibTableColumn
vcnHistPMHPBBEValidity = _VcnHistPMHPBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 13),
    _VcnHistPMHPBBEValidity_Type()
)
vcnHistPMHPBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPBBEValidity.setStatus("current")
_VcnHistPMHPESValue_Type = Unsigned32
_VcnHistPMHPESValue_Object = MibTableColumn
vcnHistPMHPESValue = _VcnHistPMHPESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 14),
    _VcnHistPMHPESValue_Type()
)
vcnHistPMHPESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPESValue.setStatus("current")
_VcnHistPMHPESTimeStamp_Type = DateAndTime
_VcnHistPMHPESTimeStamp_Object = MibTableColumn
vcnHistPMHPESTimeStamp = _VcnHistPMHPESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 15),
    _VcnHistPMHPESTimeStamp_Type()
)
vcnHistPMHPESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPESTimeStamp.setStatus("current")
_VcnHistPMHPESValidity_Type = PMValidity
_VcnHistPMHPESValidity_Object = MibTableColumn
vcnHistPMHPESValidity = _VcnHistPMHPESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 16),
    _VcnHistPMHPESValidity_Type()
)
vcnHistPMHPESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPESValidity.setStatus("current")
_VcnHistPMHPSESValue_Type = Unsigned32
_VcnHistPMHPSESValue_Object = MibTableColumn
vcnHistPMHPSESValue = _VcnHistPMHPSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 17),
    _VcnHistPMHPSESValue_Type()
)
vcnHistPMHPSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPSESValue.setStatus("current")
_VcnHistPMHPSESTimeStamp_Type = DateAndTime
_VcnHistPMHPSESTimeStamp_Object = MibTableColumn
vcnHistPMHPSESTimeStamp = _VcnHistPMHPSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 18),
    _VcnHistPMHPSESTimeStamp_Type()
)
vcnHistPMHPSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPSESTimeStamp.setStatus("current")
_VcnHistPMHPSESValidity_Type = PMValidity
_VcnHistPMHPSESValidity_Object = MibTableColumn
vcnHistPMHPSESValidity = _VcnHistPMHPSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 19),
    _VcnHistPMHPSESValidity_Type()
)
vcnHistPMHPSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPSESValidity.setStatus("current")
_VcnHistPMHPUASValue_Type = Unsigned32
_VcnHistPMHPUASValue_Object = MibTableColumn
vcnHistPMHPUASValue = _VcnHistPMHPUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 20),
    _VcnHistPMHPUASValue_Type()
)
vcnHistPMHPUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPUASValue.setStatus("current")
_VcnHistPMHPUASTimeStamp_Type = DateAndTime
_VcnHistPMHPUASTimeStamp_Object = MibTableColumn
vcnHistPMHPUASTimeStamp = _VcnHistPMHPUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 21),
    _VcnHistPMHPUASTimeStamp_Type()
)
vcnHistPMHPUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPUASTimeStamp.setStatus("current")
_VcnHistPMHPUASValidity_Type = PMValidity
_VcnHistPMHPUASValidity_Object = MibTableColumn
vcnHistPMHPUASValidity = _VcnHistPMHPUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 22),
    _VcnHistPMHPUASValidity_Type()
)
vcnHistPMHPUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcnHistPMHPUASValidity.setStatus("current")
_VcnHistPMHPEBInitialize_Type = InitializeCmd
_VcnHistPMHPEBInitialize_Object = MibTableColumn
vcnHistPMHPEBInitialize = _VcnHistPMHPEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 23),
    _VcnHistPMHPEBInitialize_Type()
)
vcnHistPMHPEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPEBInitialize.setStatus("current")
_VcnHistPMHPBBEInitialize_Type = InitializeCmd
_VcnHistPMHPBBEInitialize_Object = MibTableColumn
vcnHistPMHPBBEInitialize = _VcnHistPMHPBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 24),
    _VcnHistPMHPBBEInitialize_Type()
)
vcnHistPMHPBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPBBEInitialize.setStatus("current")
_VcnHistPMHPESInitialize_Type = InitializeCmd
_VcnHistPMHPESInitialize_Object = MibTableColumn
vcnHistPMHPESInitialize = _VcnHistPMHPESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 25),
    _VcnHistPMHPESInitialize_Type()
)
vcnHistPMHPESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPESInitialize.setStatus("current")
_VcnHistPMHPSESInitialize_Type = InitializeCmd
_VcnHistPMHPSESInitialize_Object = MibTableColumn
vcnHistPMHPSESInitialize = _VcnHistPMHPSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 26),
    _VcnHistPMHPSESInitialize_Type()
)
vcnHistPMHPSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPSESInitialize.setStatus("current")
_VcnHistPMHPUASInitialize_Type = InitializeCmd
_VcnHistPMHPUASInitialize_Object = MibTableColumn
vcnHistPMHPUASInitialize = _VcnHistPMHPUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 27),
    _VcnHistPMHPUASInitialize_Type()
)
vcnHistPMHPUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnHistPMHPUASInitialize.setStatus("current")
_VcnPMThresholdByPortTable_Object = MibTable
vcnPMThresholdByPortTable = _VcnPMThresholdByPortTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19)
)
if mibBuilder.loadTexts:
    vcnPMThresholdByPortTable.setStatus("current")
_VcnPMThresholdByPortEntry_Object = MibTableRow
vcnPMThresholdByPortEntry = _VcnPMThresholdByPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1)
)
vcnPMThresholdByPortEntry.setIndexNames(
    (0, "BTI-7000-MIB", "vcnPMThresholdByPortTypeIdx"),
    (0, "BTI-7000-MIB", "vcnPMThresholdByPortShelfIdx"),
    (0, "BTI-7000-MIB", "vcnPMThresholdByPortSlotIdx"),
    (0, "BTI-7000-MIB", "vcnPMThresholdByPortIdx"),
    (0, "BTI-7000-MIB", "vcnPMThresholdByPortIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    vcnPMThresholdByPortEntry.setStatus("current")
_VcnPMThresholdByPortTypeIdx_Type = VcnType
_VcnPMThresholdByPortTypeIdx_Object = MibTableColumn
vcnPMThresholdByPortTypeIdx = _VcnPMThresholdByPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 1),
    _VcnPMThresholdByPortTypeIdx_Type()
)
vcnPMThresholdByPortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortTypeIdx.setStatus("current")


class _VcnPMThresholdByPortShelfIdx_Type(Integer32):
    """Custom type vcnPMThresholdByPortShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcnPMThresholdByPortShelfIdx_Type.__name__ = "Integer32"
_VcnPMThresholdByPortShelfIdx_Object = MibTableColumn
vcnPMThresholdByPortShelfIdx = _VcnPMThresholdByPortShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 2),
    _VcnPMThresholdByPortShelfIdx_Type()
)
vcnPMThresholdByPortShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortShelfIdx.setStatus("current")


class _VcnPMThresholdByPortSlotIdx_Type(Integer32):
    """Custom type vcnPMThresholdByPortSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcnPMThresholdByPortSlotIdx_Type.__name__ = "Integer32"
_VcnPMThresholdByPortSlotIdx_Object = MibTableColumn
vcnPMThresholdByPortSlotIdx = _VcnPMThresholdByPortSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 3),
    _VcnPMThresholdByPortSlotIdx_Type()
)
vcnPMThresholdByPortSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortSlotIdx.setStatus("current")


class _VcnPMThresholdByPortIdx_Type(Integer32):
    """Custom type vcnPMThresholdByPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcnPMThresholdByPortIdx_Type.__name__ = "Integer32"
_VcnPMThresholdByPortIdx_Object = MibTableColumn
vcnPMThresholdByPortIdx = _VcnPMThresholdByPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 4),
    _VcnPMThresholdByPortIdx_Type()
)
vcnPMThresholdByPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortIdx.setStatus("current")
_VcnPMThresholdByPortIntervalTypeIdx_Type = PMIntervalType
_VcnPMThresholdByPortIntervalTypeIdx_Object = MibTableColumn
vcnPMThresholdByPortIntervalTypeIdx = _VcnPMThresholdByPortIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 5),
    _VcnPMThresholdByPortIntervalTypeIdx_Type()
)
vcnPMThresholdByPortIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortIntervalTypeIdx.setStatus("current")
_VcnPMThresholdByPortHPEBValue_Type = Unsigned32
_VcnPMThresholdByPortHPEBValue_Object = MibTableColumn
vcnPMThresholdByPortHPEBValue = _VcnPMThresholdByPortHPEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 6),
    _VcnPMThresholdByPortHPEBValue_Type()
)
vcnPMThresholdByPortHPEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortHPEBValue.setStatus("current")
_VcnPMThresholdByPortHPBBEValue_Type = Unsigned32
_VcnPMThresholdByPortHPBBEValue_Object = MibTableColumn
vcnPMThresholdByPortHPBBEValue = _VcnPMThresholdByPortHPBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 7),
    _VcnPMThresholdByPortHPBBEValue_Type()
)
vcnPMThresholdByPortHPBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortHPBBEValue.setStatus("current")
_VcnPMThresholdByPortHPESValue_Type = Unsigned32
_VcnPMThresholdByPortHPESValue_Object = MibTableColumn
vcnPMThresholdByPortHPESValue = _VcnPMThresholdByPortHPESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 8),
    _VcnPMThresholdByPortHPESValue_Type()
)
vcnPMThresholdByPortHPESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortHPESValue.setStatus("current")
_VcnPMThresholdByPortHPSESValue_Type = Unsigned32
_VcnPMThresholdByPortHPSESValue_Object = MibTableColumn
vcnPMThresholdByPortHPSESValue = _VcnPMThresholdByPortHPSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 9),
    _VcnPMThresholdByPortHPSESValue_Type()
)
vcnPMThresholdByPortHPSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortHPSESValue.setStatus("current")
_VcnPMThresholdByPortHPUASValue_Type = Unsigned32
_VcnPMThresholdByPortHPUASValue_Object = MibTableColumn
vcnPMThresholdByPortHPUASValue = _VcnPMThresholdByPortHPUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 10),
    _VcnPMThresholdByPortHPUASValue_Type()
)
vcnPMThresholdByPortHPUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnPMThresholdByPortHPUASValue.setStatus("current")
_GeCrntPMTable_Object = MibTable
geCrntPMTable = _GeCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20)
)
if mibBuilder.loadTexts:
    geCrntPMTable.setStatus("current")
_GeCrntPMEntry_Object = MibTableRow
geCrntPMEntry = _GeCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1)
)
geCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "geCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "geCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "geCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "geCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    geCrntPMEntry.setStatus("current")


class _GeCrntPMShelfIdx_Type(Integer32):
    """Custom type geCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_GeCrntPMShelfIdx_Type.__name__ = "Integer32"
_GeCrntPMShelfIdx_Object = MibTableColumn
geCrntPMShelfIdx = _GeCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 1),
    _GeCrntPMShelfIdx_Type()
)
geCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geCrntPMShelfIdx.setStatus("current")


class _GeCrntPMSlotIdx_Type(Integer32):
    """Custom type geCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_GeCrntPMSlotIdx_Type.__name__ = "Integer32"
_GeCrntPMSlotIdx_Object = MibTableColumn
geCrntPMSlotIdx = _GeCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 2),
    _GeCrntPMSlotIdx_Type()
)
geCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geCrntPMSlotIdx.setStatus("current")


class _GeCrntPMPortIdx_Type(Integer32):
    """Custom type geCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_GeCrntPMPortIdx_Type.__name__ = "Integer32"
_GeCrntPMPortIdx_Object = MibTableColumn
geCrntPMPortIdx = _GeCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 3),
    _GeCrntPMPortIdx_Type()
)
geCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geCrntPMPortIdx.setStatus("current")
_GeCrntPMIntervalTypeIdx_Type = PMIntervalType
_GeCrntPMIntervalTypeIdx_Object = MibTableColumn
geCrntPMIntervalTypeIdx = _GeCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 4),
    _GeCrntPMIntervalTypeIdx_Type()
)
geCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geCrntPMIntervalTypeIdx.setStatus("current")
_GeCrntPMOPRValue_Type = FixedX10
_GeCrntPMOPRValue_Object = MibTableColumn
geCrntPMOPRValue = _GeCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 5),
    _GeCrntPMOPRValue_Type()
)
geCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMOPRValue.setUnits("dBm/10")
_GeCrntPMOPRTimeStamp_Type = DateAndTime
_GeCrntPMOPRTimeStamp_Object = MibTableColumn
geCrntPMOPRTimeStamp = _GeCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 6),
    _GeCrntPMOPRTimeStamp_Type()
)
geCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRTimeStamp.setStatus("current")
_GeCrntPMOPRValidity_Type = PMValidity
_GeCrntPMOPRValidity_Object = MibTableColumn
geCrntPMOPRValidity = _GeCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 7),
    _GeCrntPMOPRValidity_Type()
)
geCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRValidity.setStatus("current")
_GeCrntPMOPTValue_Type = FixedX10
_GeCrntPMOPTValue_Object = MibTableColumn
geCrntPMOPTValue = _GeCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 8),
    _GeCrntPMOPTValue_Type()
)
geCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMOPTValue.setUnits("dBm/10")
_GeCrntPMOPTTimeStamp_Type = DateAndTime
_GeCrntPMOPTTimeStamp_Object = MibTableColumn
geCrntPMOPTTimeStamp = _GeCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 9),
    _GeCrntPMOPTTimeStamp_Type()
)
geCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTTimeStamp.setStatus("current")
_GeCrntPMOPTValidity_Type = PMValidity
_GeCrntPMOPTValidity_Object = MibTableColumn
geCrntPMOPTValidity = _GeCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 10),
    _GeCrntPMOPTValidity_Type()
)
geCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTValidity.setStatus("current")


class _GeCrntPMTempValue_Type(Integer32):
    """Custom type geCrntPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_GeCrntPMTempValue_Type.__name__ = "Integer32"
_GeCrntPMTempValue_Object = MibTableColumn
geCrntPMTempValue = _GeCrntPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 11),
    _GeCrntPMTempValue_Type()
)
geCrntPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMTempValue.setUnits("degrees Celsius")
_GeCrntPMTempTimeStamp_Type = DateAndTime
_GeCrntPMTempTimeStamp_Object = MibTableColumn
geCrntPMTempTimeStamp = _GeCrntPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 12),
    _GeCrntPMTempTimeStamp_Type()
)
geCrntPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTempTimeStamp.setStatus("current")
_GeCrntPMTempValidity_Type = PMValidity
_GeCrntPMTempValidity_Object = MibTableColumn
geCrntPMTempValidity = _GeCrntPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 13),
    _GeCrntPMTempValidity_Type()
)
geCrntPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTempValidity.setStatus("current")
_GeCrntPMSupplyVoltageValue_Type = FixedX10
_GeCrntPMSupplyVoltageValue_Object = MibTableColumn
geCrntPMSupplyVoltageValue = _GeCrntPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 14),
    _GeCrntPMSupplyVoltageValue_Type()
)
geCrntPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMSupplyVoltageValue.setUnits("mVolts/10")
_GeCrntPMSupplyVoltageTimeStamp_Type = DateAndTime
_GeCrntPMSupplyVoltageTimeStamp_Object = MibTableColumn
geCrntPMSupplyVoltageTimeStamp = _GeCrntPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 15),
    _GeCrntPMSupplyVoltageTimeStamp_Type()
)
geCrntPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSupplyVoltageTimeStamp.setStatus("current")
_GeCrntPMSupplyVoltageValidity_Type = PMValidity
_GeCrntPMSupplyVoltageValidity_Object = MibTableColumn
geCrntPMSupplyVoltageValidity = _GeCrntPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 16),
    _GeCrntPMSupplyVoltageValidity_Type()
)
geCrntPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSupplyVoltageValidity.setStatus("current")


class _GeCrntPMLBCValue_Type(Integer32):
    """Custom type geCrntPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_GeCrntPMLBCValue_Type.__name__ = "Integer32"
_GeCrntPMLBCValue_Object = MibTableColumn
geCrntPMLBCValue = _GeCrntPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 17),
    _GeCrntPMLBCValue_Type()
)
geCrntPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMLBCValue.setUnits("mAmp")
_GeCrntPMLBCTimeStamp_Type = DateAndTime
_GeCrntPMLBCTimeStamp_Object = MibTableColumn
geCrntPMLBCTimeStamp = _GeCrntPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 18),
    _GeCrntPMLBCTimeStamp_Type()
)
geCrntPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMLBCTimeStamp.setStatus("current")
_GeCrntPMLBCValidity_Type = PMValidity
_GeCrntPMLBCValidity_Object = MibTableColumn
geCrntPMLBCValidity = _GeCrntPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 19),
    _GeCrntPMLBCValidity_Type()
)
geCrntPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMLBCValidity.setStatus("current")
_GeCrntPMCVValue_Type = Unsigned32
_GeCrntPMCVValue_Object = MibTableColumn
geCrntPMCVValue = _GeCrntPMCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 20),
    _GeCrntPMCVValue_Type()
)
geCrntPMCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMCVValue.setStatus("current")
_GeCrntPMCVTimeStamp_Type = DateAndTime
_GeCrntPMCVTimeStamp_Object = MibTableColumn
geCrntPMCVTimeStamp = _GeCrntPMCVTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 21),
    _GeCrntPMCVTimeStamp_Type()
)
geCrntPMCVTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMCVTimeStamp.setStatus("current")
_GeCrntPMCVValidity_Type = PMValidity
_GeCrntPMCVValidity_Object = MibTableColumn
geCrntPMCVValidity = _GeCrntPMCVValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 22),
    _GeCrntPMCVValidity_Type()
)
geCrntPMCVValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMCVValidity.setStatus("current")
_GeCrntPMESValue_Type = Unsigned32
_GeCrntPMESValue_Object = MibTableColumn
geCrntPMESValue = _GeCrntPMESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 23),
    _GeCrntPMESValue_Type()
)
geCrntPMESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMESValue.setStatus("current")
_GeCrntPMESTimeStamp_Type = DateAndTime
_GeCrntPMESTimeStamp_Object = MibTableColumn
geCrntPMESTimeStamp = _GeCrntPMESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 24),
    _GeCrntPMESTimeStamp_Type()
)
geCrntPMESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMESTimeStamp.setStatus("current")
_GeCrntPMESValidity_Type = PMValidity
_GeCrntPMESValidity_Object = MibTableColumn
geCrntPMESValidity = _GeCrntPMESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 25),
    _GeCrntPMESValidity_Type()
)
geCrntPMESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMESValidity.setStatus("current")
_GeCrntPMSESValue_Type = Unsigned32
_GeCrntPMSESValue_Object = MibTableColumn
geCrntPMSESValue = _GeCrntPMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 26),
    _GeCrntPMSESValue_Type()
)
geCrntPMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSESValue.setStatus("current")
_GeCrntPMSESTimeStamp_Type = DateAndTime
_GeCrntPMSESTimeStamp_Object = MibTableColumn
geCrntPMSESTimeStamp = _GeCrntPMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 27),
    _GeCrntPMSESTimeStamp_Type()
)
geCrntPMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSESTimeStamp.setStatus("current")
_GeCrntPMSESValidity_Type = PMValidity
_GeCrntPMSESValidity_Object = MibTableColumn
geCrntPMSESValidity = _GeCrntPMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 28),
    _GeCrntPMSESValidity_Type()
)
geCrntPMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSESValidity.setStatus("current")
_GeCrntPMTFRCRXValue_Type = Unsigned64
_GeCrntPMTFRCRXValue_Object = MibTableColumn
geCrntPMTFRCRXValue = _GeCrntPMTFRCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 29),
    _GeCrntPMTFRCRXValue_Type()
)
geCrntPMTFRCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTFRCRXValue.setStatus("current")
_GeCrntPMTFRCRXTimeStamp_Type = DateAndTime
_GeCrntPMTFRCRXTimeStamp_Object = MibTableColumn
geCrntPMTFRCRXTimeStamp = _GeCrntPMTFRCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 30),
    _GeCrntPMTFRCRXTimeStamp_Type()
)
geCrntPMTFRCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTFRCRXTimeStamp.setStatus("current")
_GeCrntPMTFRCRXValidity_Type = PMValidity
_GeCrntPMTFRCRXValidity_Object = MibTableColumn
geCrntPMTFRCRXValidity = _GeCrntPMTFRCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 31),
    _GeCrntPMTFRCRXValidity_Type()
)
geCrntPMTFRCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTFRCRXValidity.setStatus("current")
_GeCrntPMTFRCRXInitialize_Type = InitializeCmd
_GeCrntPMTFRCRXInitialize_Object = MibTableColumn
geCrntPMTFRCRXInitialize = _GeCrntPMTFRCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 32),
    _GeCrntPMTFRCRXInitialize_Type()
)
geCrntPMTFRCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMTFRCRXInitialize.setStatus("current")
_GeCrntPMTFRCTXValue_Type = Unsigned64
_GeCrntPMTFRCTXValue_Object = MibTableColumn
geCrntPMTFRCTXValue = _GeCrntPMTFRCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 33),
    _GeCrntPMTFRCTXValue_Type()
)
geCrntPMTFRCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTFRCTXValue.setStatus("current")
_GeCrntPMTFRCTXTimeStamp_Type = DateAndTime
_GeCrntPMTFRCTXTimeStamp_Object = MibTableColumn
geCrntPMTFRCTXTimeStamp = _GeCrntPMTFRCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 34),
    _GeCrntPMTFRCTXTimeStamp_Type()
)
geCrntPMTFRCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTFRCTXTimeStamp.setStatus("current")
_GeCrntPMTFRCTXValidity_Type = PMValidity
_GeCrntPMTFRCTXValidity_Object = MibTableColumn
geCrntPMTFRCTXValidity = _GeCrntPMTFRCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 35),
    _GeCrntPMTFRCTXValidity_Type()
)
geCrntPMTFRCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTFRCTXValidity.setStatus("current")
_GeCrntPMTFRCTXInitialize_Type = InitializeCmd
_GeCrntPMTFRCTXInitialize_Object = MibTableColumn
geCrntPMTFRCTXInitialize = _GeCrntPMTFRCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 36),
    _GeCrntPMTFRCTXInitialize_Type()
)
geCrntPMTFRCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMTFRCTXInitialize.setStatus("current")
_GeCrntPMFRDRValue_Type = Unsigned32
_GeCrntPMFRDRValue_Object = MibTableColumn
geCrntPMFRDRValue = _GeCrntPMFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 37),
    _GeCrntPMFRDRValue_Type()
)
geCrntPMFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMFRDRValue.setStatus("current")
_GeCrntPMFRDRTimeStamp_Type = DateAndTime
_GeCrntPMFRDRTimeStamp_Object = MibTableColumn
geCrntPMFRDRTimeStamp = _GeCrntPMFRDRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 38),
    _GeCrntPMFRDRTimeStamp_Type()
)
geCrntPMFRDRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMFRDRTimeStamp.setStatus("current")
_GeCrntPMFRDRValidity_Type = PMValidity
_GeCrntPMFRDRValidity_Object = MibTableColumn
geCrntPMFRDRValidity = _GeCrntPMFRDRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 39),
    _GeCrntPMFRDRValidity_Type()
)
geCrntPMFRDRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMFRDRValidity.setStatus("current")
_GeCrntPMFCSEValue_Type = Unsigned32
_GeCrntPMFCSEValue_Object = MibTableColumn
geCrntPMFCSEValue = _GeCrntPMFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 40),
    _GeCrntPMFCSEValue_Type()
)
geCrntPMFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMFCSEValue.setStatus("current")
_GeCrntPMFCSETimeStamp_Type = DateAndTime
_GeCrntPMFCSETimeStamp_Object = MibTableColumn
geCrntPMFCSETimeStamp = _GeCrntPMFCSETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 41),
    _GeCrntPMFCSETimeStamp_Type()
)
geCrntPMFCSETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMFCSETimeStamp.setStatus("current")
_GeCrntPMFCSEValidity_Type = PMValidity
_GeCrntPMFCSEValidity_Object = MibTableColumn
geCrntPMFCSEValidity = _GeCrntPMFCSEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 42),
    _GeCrntPMFCSEValidity_Type()
)
geCrntPMFCSEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMFCSEValidity.setStatus("current")
_GeCrntPMTBYCRXValue_Type = Unsigned64
_GeCrntPMTBYCRXValue_Object = MibTableColumn
geCrntPMTBYCRXValue = _GeCrntPMTBYCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 43),
    _GeCrntPMTBYCRXValue_Type()
)
geCrntPMTBYCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTBYCRXValue.setStatus("current")
_GeCrntPMTBYCRXTimeStamp_Type = DateAndTime
_GeCrntPMTBYCRXTimeStamp_Object = MibTableColumn
geCrntPMTBYCRXTimeStamp = _GeCrntPMTBYCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 44),
    _GeCrntPMTBYCRXTimeStamp_Type()
)
geCrntPMTBYCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTBYCRXTimeStamp.setStatus("current")
_GeCrntPMTBYCRXValidity_Type = PMValidity
_GeCrntPMTBYCRXValidity_Object = MibTableColumn
geCrntPMTBYCRXValidity = _GeCrntPMTBYCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 45),
    _GeCrntPMTBYCRXValidity_Type()
)
geCrntPMTBYCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTBYCRXValidity.setStatus("current")
_GeCrntPMTBYCRXInitialize_Type = InitializeCmd
_GeCrntPMTBYCRXInitialize_Object = MibTableColumn
geCrntPMTBYCRXInitialize = _GeCrntPMTBYCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 46),
    _GeCrntPMTBYCRXInitialize_Type()
)
geCrntPMTBYCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMTBYCRXInitialize.setStatus("current")
_GeCrntPMTBYCTXValue_Type = Unsigned64
_GeCrntPMTBYCTXValue_Object = MibTableColumn
geCrntPMTBYCTXValue = _GeCrntPMTBYCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 47),
    _GeCrntPMTBYCTXValue_Type()
)
geCrntPMTBYCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTBYCTXValue.setStatus("current")
_GeCrntPMTBYCTXTimeStamp_Type = DateAndTime
_GeCrntPMTBYCTXTimeStamp_Object = MibTableColumn
geCrntPMTBYCTXTimeStamp = _GeCrntPMTBYCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 48),
    _GeCrntPMTBYCTXTimeStamp_Type()
)
geCrntPMTBYCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTBYCTXTimeStamp.setStatus("current")
_GeCrntPMTBYCTXValidity_Type = PMValidity
_GeCrntPMTBYCTXValidity_Object = MibTableColumn
geCrntPMTBYCTXValidity = _GeCrntPMTBYCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 49),
    _GeCrntPMTBYCTXValidity_Type()
)
geCrntPMTBYCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTBYCTXValidity.setStatus("current")
_GeCrntPMTBYCTXInitialize_Type = InitializeCmd
_GeCrntPMTBYCTXInitialize_Object = MibTableColumn
geCrntPMTBYCTXInitialize = _GeCrntPMTBYCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 50),
    _GeCrntPMTBYCTXInitialize_Type()
)
geCrntPMTBYCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMTBYCTXInitialize.setStatus("current")
_GeCrntPMBCSTValue_Type = Unsigned64
_GeCrntPMBCSTValue_Object = MibTableColumn
geCrntPMBCSTValue = _GeCrntPMBCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 51),
    _GeCrntPMBCSTValue_Type()
)
geCrntPMBCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMBCSTValue.setStatus("current")
_GeCrntPMBCSTTimeStamp_Type = DateAndTime
_GeCrntPMBCSTTimeStamp_Object = MibTableColumn
geCrntPMBCSTTimeStamp = _GeCrntPMBCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 52),
    _GeCrntPMBCSTTimeStamp_Type()
)
geCrntPMBCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMBCSTTimeStamp.setStatus("current")
_GeCrntPMBCSTValidity_Type = PMValidity
_GeCrntPMBCSTValidity_Object = MibTableColumn
geCrntPMBCSTValidity = _GeCrntPMBCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 53),
    _GeCrntPMBCSTValidity_Type()
)
geCrntPMBCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMBCSTValidity.setStatus("current")
_GeCrntPMBCSTInitialize_Type = InitializeCmd
_GeCrntPMBCSTInitialize_Object = MibTableColumn
geCrntPMBCSTInitialize = _GeCrntPMBCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 54),
    _GeCrntPMBCSTInitialize_Type()
)
geCrntPMBCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMBCSTInitialize.setStatus("current")
_GeCrntPMMCSTValue_Type = Unsigned64
_GeCrntPMMCSTValue_Object = MibTableColumn
geCrntPMMCSTValue = _GeCrntPMMCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 55),
    _GeCrntPMMCSTValue_Type()
)
geCrntPMMCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMMCSTValue.setStatus("current")
_GeCrntPMMCSTTimeStamp_Type = DateAndTime
_GeCrntPMMCSTTimeStamp_Object = MibTableColumn
geCrntPMMCSTTimeStamp = _GeCrntPMMCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 56),
    _GeCrntPMMCSTTimeStamp_Type()
)
geCrntPMMCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMMCSTTimeStamp.setStatus("current")
_GeCrntPMMCSTValidity_Type = PMValidity
_GeCrntPMMCSTValidity_Object = MibTableColumn
geCrntPMMCSTValidity = _GeCrntPMMCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 57),
    _GeCrntPMMCSTValidity_Type()
)
geCrntPMMCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMMCSTValidity.setStatus("current")
_GeCrntPMMCSTInitialize_Type = InitializeCmd
_GeCrntPMMCSTInitialize_Object = MibTableColumn
geCrntPMMCSTInitialize = _GeCrntPMMCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 58),
    _GeCrntPMMCSTInitialize_Type()
)
geCrntPMMCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMMCSTInitialize.setStatus("current")
_GeCrntPMSIZE64Value_Type = Unsigned64
_GeCrntPMSIZE64Value_Object = MibTableColumn
geCrntPMSIZE64Value = _GeCrntPMSIZE64Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 59),
    _GeCrntPMSIZE64Value_Type()
)
geCrntPMSIZE64Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE64Value.setStatus("current")
_GeCrntPMSIZE64TimeStamp_Type = DateAndTime
_GeCrntPMSIZE64TimeStamp_Object = MibTableColumn
geCrntPMSIZE64TimeStamp = _GeCrntPMSIZE64TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 60),
    _GeCrntPMSIZE64TimeStamp_Type()
)
geCrntPMSIZE64TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE64TimeStamp.setStatus("current")
_GeCrntPMSIZE64Validity_Type = PMValidity
_GeCrntPMSIZE64Validity_Object = MibTableColumn
geCrntPMSIZE64Validity = _GeCrntPMSIZE64Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 61),
    _GeCrntPMSIZE64Validity_Type()
)
geCrntPMSIZE64Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE64Validity.setStatus("current")
_GeCrntPMSIZE64Initialize_Type = InitializeCmd
_GeCrntPMSIZE64Initialize_Object = MibTableColumn
geCrntPMSIZE64Initialize = _GeCrntPMSIZE64Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 62),
    _GeCrntPMSIZE64Initialize_Type()
)
geCrntPMSIZE64Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSIZE64Initialize.setStatus("current")
_GeCrntPMSIZE65To127Value_Type = Unsigned64
_GeCrntPMSIZE65To127Value_Object = MibTableColumn
geCrntPMSIZE65To127Value = _GeCrntPMSIZE65To127Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 63),
    _GeCrntPMSIZE65To127Value_Type()
)
geCrntPMSIZE65To127Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE65To127Value.setStatus("current")
_GeCrntPMSIZE65To127TimeStamp_Type = DateAndTime
_GeCrntPMSIZE65To127TimeStamp_Object = MibTableColumn
geCrntPMSIZE65To127TimeStamp = _GeCrntPMSIZE65To127TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 64),
    _GeCrntPMSIZE65To127TimeStamp_Type()
)
geCrntPMSIZE65To127TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE65To127TimeStamp.setStatus("current")
_GeCrntPMSIZE65To127Validity_Type = PMValidity
_GeCrntPMSIZE65To127Validity_Object = MibTableColumn
geCrntPMSIZE65To127Validity = _GeCrntPMSIZE65To127Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 65),
    _GeCrntPMSIZE65To127Validity_Type()
)
geCrntPMSIZE65To127Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE65To127Validity.setStatus("current")
_GeCrntPMSIZE65To127Initialize_Type = InitializeCmd
_GeCrntPMSIZE65To127Initialize_Object = MibTableColumn
geCrntPMSIZE65To127Initialize = _GeCrntPMSIZE65To127Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 66),
    _GeCrntPMSIZE65To127Initialize_Type()
)
geCrntPMSIZE65To127Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSIZE65To127Initialize.setStatus("current")
_GeCrntPMSIZE128To255Value_Type = Unsigned64
_GeCrntPMSIZE128To255Value_Object = MibTableColumn
geCrntPMSIZE128To255Value = _GeCrntPMSIZE128To255Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 67),
    _GeCrntPMSIZE128To255Value_Type()
)
geCrntPMSIZE128To255Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE128To255Value.setStatus("current")
_GeCrntPMSIZE128To255TimeStamp_Type = DateAndTime
_GeCrntPMSIZE128To255TimeStamp_Object = MibTableColumn
geCrntPMSIZE128To255TimeStamp = _GeCrntPMSIZE128To255TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 68),
    _GeCrntPMSIZE128To255TimeStamp_Type()
)
geCrntPMSIZE128To255TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE128To255TimeStamp.setStatus("current")
_GeCrntPMSIZE128To255Validity_Type = PMValidity
_GeCrntPMSIZE128To255Validity_Object = MibTableColumn
geCrntPMSIZE128To255Validity = _GeCrntPMSIZE128To255Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 69),
    _GeCrntPMSIZE128To255Validity_Type()
)
geCrntPMSIZE128To255Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE128To255Validity.setStatus("current")
_GeCrntPMSIZE128To255Initialize_Type = InitializeCmd
_GeCrntPMSIZE128To255Initialize_Object = MibTableColumn
geCrntPMSIZE128To255Initialize = _GeCrntPMSIZE128To255Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 70),
    _GeCrntPMSIZE128To255Initialize_Type()
)
geCrntPMSIZE128To255Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSIZE128To255Initialize.setStatus("current")
_GeCrntPMSIZE256To511Value_Type = Unsigned64
_GeCrntPMSIZE256To511Value_Object = MibTableColumn
geCrntPMSIZE256To511Value = _GeCrntPMSIZE256To511Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 71),
    _GeCrntPMSIZE256To511Value_Type()
)
geCrntPMSIZE256To511Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE256To511Value.setStatus("current")
_GeCrntPMSIZE256To511TimeStamp_Type = DateAndTime
_GeCrntPMSIZE256To511TimeStamp_Object = MibTableColumn
geCrntPMSIZE256To511TimeStamp = _GeCrntPMSIZE256To511TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 72),
    _GeCrntPMSIZE256To511TimeStamp_Type()
)
geCrntPMSIZE256To511TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE256To511TimeStamp.setStatus("current")
_GeCrntPMSIZE256To511Validity_Type = PMValidity
_GeCrntPMSIZE256To511Validity_Object = MibTableColumn
geCrntPMSIZE256To511Validity = _GeCrntPMSIZE256To511Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 73),
    _GeCrntPMSIZE256To511Validity_Type()
)
geCrntPMSIZE256To511Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE256To511Validity.setStatus("current")
_GeCrntPMSIZE256To511Initialize_Type = InitializeCmd
_GeCrntPMSIZE256To511Initialize_Object = MibTableColumn
geCrntPMSIZE256To511Initialize = _GeCrntPMSIZE256To511Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 74),
    _GeCrntPMSIZE256To511Initialize_Type()
)
geCrntPMSIZE256To511Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSIZE256To511Initialize.setStatus("current")
_GeCrntPMSIZE512To1023Value_Type = Unsigned64
_GeCrntPMSIZE512To1023Value_Object = MibTableColumn
geCrntPMSIZE512To1023Value = _GeCrntPMSIZE512To1023Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 75),
    _GeCrntPMSIZE512To1023Value_Type()
)
geCrntPMSIZE512To1023Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE512To1023Value.setStatus("current")
_GeCrntPMSIZE512To1023TimeStamp_Type = DateAndTime
_GeCrntPMSIZE512To1023TimeStamp_Object = MibTableColumn
geCrntPMSIZE512To1023TimeStamp = _GeCrntPMSIZE512To1023TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 76),
    _GeCrntPMSIZE512To1023TimeStamp_Type()
)
geCrntPMSIZE512To1023TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE512To1023TimeStamp.setStatus("current")
_GeCrntPMSIZE512To1023Validity_Type = PMValidity
_GeCrntPMSIZE512To1023Validity_Object = MibTableColumn
geCrntPMSIZE512To1023Validity = _GeCrntPMSIZE512To1023Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 77),
    _GeCrntPMSIZE512To1023Validity_Type()
)
geCrntPMSIZE512To1023Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE512To1023Validity.setStatus("current")
_GeCrntPMSIZE512To1023Initialize_Type = InitializeCmd
_GeCrntPMSIZE512To1023Initialize_Object = MibTableColumn
geCrntPMSIZE512To1023Initialize = _GeCrntPMSIZE512To1023Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 78),
    _GeCrntPMSIZE512To1023Initialize_Type()
)
geCrntPMSIZE512To1023Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSIZE512To1023Initialize.setStatus("current")
_GeCrntPMSIZE1024To1518Value_Type = Unsigned64
_GeCrntPMSIZE1024To1518Value_Object = MibTableColumn
geCrntPMSIZE1024To1518Value = _GeCrntPMSIZE1024To1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 79),
    _GeCrntPMSIZE1024To1518Value_Type()
)
geCrntPMSIZE1024To1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE1024To1518Value.setStatus("current")
_GeCrntPMSIZE1024To1518TimeStamp_Type = DateAndTime
_GeCrntPMSIZE1024To1518TimeStamp_Object = MibTableColumn
geCrntPMSIZE1024To1518TimeStamp = _GeCrntPMSIZE1024To1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 80),
    _GeCrntPMSIZE1024To1518TimeStamp_Type()
)
geCrntPMSIZE1024To1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE1024To1518TimeStamp.setStatus("current")
_GeCrntPMSIZE1024To1518Validity_Type = PMValidity
_GeCrntPMSIZE1024To1518Validity_Object = MibTableColumn
geCrntPMSIZE1024To1518Validity = _GeCrntPMSIZE1024To1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 81),
    _GeCrntPMSIZE1024To1518Validity_Type()
)
geCrntPMSIZE1024To1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZE1024To1518Validity.setStatus("current")
_GeCrntPMSIZE1024To1518Initialize_Type = InitializeCmd
_GeCrntPMSIZE1024To1518Initialize_Object = MibTableColumn
geCrntPMSIZE1024To1518Initialize = _GeCrntPMSIZE1024To1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 82),
    _GeCrntPMSIZE1024To1518Initialize_Type()
)
geCrntPMSIZE1024To1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSIZE1024To1518Initialize.setStatus("current")
_GeCrntPMSIZEOver1518Value_Type = Unsigned64
_GeCrntPMSIZEOver1518Value_Object = MibTableColumn
geCrntPMSIZEOver1518Value = _GeCrntPMSIZEOver1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 83),
    _GeCrntPMSIZEOver1518Value_Type()
)
geCrntPMSIZEOver1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZEOver1518Value.setStatus("current")
_GeCrntPMSIZEOver1518TimeStamp_Type = DateAndTime
_GeCrntPMSIZEOver1518TimeStamp_Object = MibTableColumn
geCrntPMSIZEOver1518TimeStamp = _GeCrntPMSIZEOver1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 84),
    _GeCrntPMSIZEOver1518TimeStamp_Type()
)
geCrntPMSIZEOver1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZEOver1518TimeStamp.setStatus("current")
_GeCrntPMSIZEOver1518Validity_Type = PMValidity
_GeCrntPMSIZEOver1518Validity_Object = MibTableColumn
geCrntPMSIZEOver1518Validity = _GeCrntPMSIZEOver1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 85),
    _GeCrntPMSIZEOver1518Validity_Type()
)
geCrntPMSIZEOver1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMSIZEOver1518Validity.setStatus("current")
_GeCrntPMSIZEOver1518Initialize_Type = InitializeCmd
_GeCrntPMSIZEOver1518Initialize_Object = MibTableColumn
geCrntPMSIZEOver1518Initialize = _GeCrntPMSIZEOver1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 86),
    _GeCrntPMSIZEOver1518Initialize_Type()
)
geCrntPMSIZEOver1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSIZEOver1518Initialize.setStatus("current")
_GeCrntPMTPFCRXValue_Type = Unsigned64
_GeCrntPMTPFCRXValue_Object = MibTableColumn
geCrntPMTPFCRXValue = _GeCrntPMTPFCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 87),
    _GeCrntPMTPFCRXValue_Type()
)
geCrntPMTPFCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTPFCRXValue.setStatus("current")
_GeCrntPMTPFCRXTimeStamp_Type = DateAndTime
_GeCrntPMTPFCRXTimeStamp_Object = MibTableColumn
geCrntPMTPFCRXTimeStamp = _GeCrntPMTPFCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 88),
    _GeCrntPMTPFCRXTimeStamp_Type()
)
geCrntPMTPFCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTPFCRXTimeStamp.setStatus("current")
_GeCrntPMTPFCRXValidity_Type = PMValidity
_GeCrntPMTPFCRXValidity_Object = MibTableColumn
geCrntPMTPFCRXValidity = _GeCrntPMTPFCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 89),
    _GeCrntPMTPFCRXValidity_Type()
)
geCrntPMTPFCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTPFCRXValidity.setStatus("current")
_GeCrntPMTPFCRXInitialize_Type = InitializeCmd
_GeCrntPMTPFCRXInitialize_Object = MibTableColumn
geCrntPMTPFCRXInitialize = _GeCrntPMTPFCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 90),
    _GeCrntPMTPFCRXInitialize_Type()
)
geCrntPMTPFCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMTPFCRXInitialize.setStatus("current")
_GeCrntPMTPFCTXValue_Type = Unsigned64
_GeCrntPMTPFCTXValue_Object = MibTableColumn
geCrntPMTPFCTXValue = _GeCrntPMTPFCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 91),
    _GeCrntPMTPFCTXValue_Type()
)
geCrntPMTPFCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTPFCTXValue.setStatus("current")
_GeCrntPMTPFCTXTimeStamp_Type = DateAndTime
_GeCrntPMTPFCTXTimeStamp_Object = MibTableColumn
geCrntPMTPFCTXTimeStamp = _GeCrntPMTPFCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 92),
    _GeCrntPMTPFCTXTimeStamp_Type()
)
geCrntPMTPFCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTPFCTXTimeStamp.setStatus("current")
_GeCrntPMTPFCTXValidity_Type = PMValidity
_GeCrntPMTPFCTXValidity_Object = MibTableColumn
geCrntPMTPFCTXValidity = _GeCrntPMTPFCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 93),
    _GeCrntPMTPFCTXValidity_Type()
)
geCrntPMTPFCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMTPFCTXValidity.setStatus("current")
_GeCrntPMTPFCTXInitialize_Type = InitializeCmd
_GeCrntPMTPFCTXInitialize_Object = MibTableColumn
geCrntPMTPFCTXInitialize = _GeCrntPMTPFCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 94),
    _GeCrntPMTPFCTXInitialize_Type()
)
geCrntPMTPFCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMTPFCTXInitialize.setStatus("current")
_GeCrntPMUSIZEValue_Type = Unsigned32
_GeCrntPMUSIZEValue_Object = MibTableColumn
geCrntPMUSIZEValue = _GeCrntPMUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 95),
    _GeCrntPMUSIZEValue_Type()
)
geCrntPMUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMUSIZEValue.setStatus("current")
_GeCrntPMUSIZETimeStamp_Type = DateAndTime
_GeCrntPMUSIZETimeStamp_Object = MibTableColumn
geCrntPMUSIZETimeStamp = _GeCrntPMUSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 96),
    _GeCrntPMUSIZETimeStamp_Type()
)
geCrntPMUSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMUSIZETimeStamp.setStatus("current")
_GeCrntPMUSIZEValidity_Type = PMValidity
_GeCrntPMUSIZEValidity_Object = MibTableColumn
geCrntPMUSIZEValidity = _GeCrntPMUSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 97),
    _GeCrntPMUSIZEValidity_Type()
)
geCrntPMUSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMUSIZEValidity.setStatus("current")
_GeCrntPMOSIZEValue_Type = Unsigned32
_GeCrntPMOSIZEValue_Object = MibTableColumn
geCrntPMOSIZEValue = _GeCrntPMOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 98),
    _GeCrntPMOSIZEValue_Type()
)
geCrntPMOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMOSIZEValue.setStatus("current")
_GeCrntPMOSIZETimeStamp_Type = DateAndTime
_GeCrntPMOSIZETimeStamp_Object = MibTableColumn
geCrntPMOSIZETimeStamp = _GeCrntPMOSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 99),
    _GeCrntPMOSIZETimeStamp_Type()
)
geCrntPMOSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOSIZETimeStamp.setStatus("current")
_GeCrntPMOSIZEValidity_Type = PMValidity
_GeCrntPMOSIZEValidity_Object = MibTableColumn
geCrntPMOSIZEValidity = _GeCrntPMOSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 100),
    _GeCrntPMOSIZEValidity_Type()
)
geCrntPMOSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOSIZEValidity.setStatus("current")
_GeCrntPMFRGTValue_Type = Unsigned32
_GeCrntPMFRGTValue_Object = MibTableColumn
geCrntPMFRGTValue = _GeCrntPMFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 101),
    _GeCrntPMFRGTValue_Type()
)
geCrntPMFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMFRGTValue.setStatus("current")
_GeCrntPMFRGTTimeStamp_Type = DateAndTime
_GeCrntPMFRGTTimeStamp_Object = MibTableColumn
geCrntPMFRGTTimeStamp = _GeCrntPMFRGTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 102),
    _GeCrntPMFRGTTimeStamp_Type()
)
geCrntPMFRGTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMFRGTTimeStamp.setStatus("current")
_GeCrntPMFRGTValidity_Type = PMValidity
_GeCrntPMFRGTValidity_Object = MibTableColumn
geCrntPMFRGTValidity = _GeCrntPMFRGTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 103),
    _GeCrntPMFRGTValidity_Type()
)
geCrntPMFRGTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMFRGTValidity.setStatus("current")
_GeCrntPMJABRValue_Type = Unsigned32
_GeCrntPMJABRValue_Object = MibTableColumn
geCrntPMJABRValue = _GeCrntPMJABRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 104),
    _GeCrntPMJABRValue_Type()
)
geCrntPMJABRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMJABRValue.setStatus("current")
_GeCrntPMJABRTimeStamp_Type = DateAndTime
_GeCrntPMJABRTimeStamp_Object = MibTableColumn
geCrntPMJABRTimeStamp = _GeCrntPMJABRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 105),
    _GeCrntPMJABRTimeStamp_Type()
)
geCrntPMJABRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMJABRTimeStamp.setStatus("current")
_GeCrntPMJABRValidity_Type = PMValidity
_GeCrntPMJABRValidity_Object = MibTableColumn
geCrntPMJABRValidity = _GeCrntPMJABRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 106),
    _GeCrntPMJABRValidity_Type()
)
geCrntPMJABRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMJABRValidity.setStatus("current")
_GeCrntPMCVInitialize_Type = InitializeCmd
_GeCrntPMCVInitialize_Object = MibTableColumn
geCrntPMCVInitialize = _GeCrntPMCVInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 107),
    _GeCrntPMCVInitialize_Type()
)
geCrntPMCVInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMCVInitialize.setStatus("current")
_GeCrntPMESInitialize_Type = InitializeCmd
_GeCrntPMESInitialize_Object = MibTableColumn
geCrntPMESInitialize = _GeCrntPMESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 108),
    _GeCrntPMESInitialize_Type()
)
geCrntPMESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMESInitialize.setStatus("current")
_GeCrntPMSESInitialize_Type = InitializeCmd
_GeCrntPMSESInitialize_Object = MibTableColumn
geCrntPMSESInitialize = _GeCrntPMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 109),
    _GeCrntPMSESInitialize_Type()
)
geCrntPMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMSESInitialize.setStatus("current")
_GeCrntPMFCSEInitialize_Type = InitializeCmd
_GeCrntPMFCSEInitialize_Object = MibTableColumn
geCrntPMFCSEInitialize = _GeCrntPMFCSEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 110),
    _GeCrntPMFCSEInitialize_Type()
)
geCrntPMFCSEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMFCSEInitialize.setStatus("current")
_GeCrntPMFRDRInitialize_Type = InitializeCmd
_GeCrntPMFRDRInitialize_Object = MibTableColumn
geCrntPMFRDRInitialize = _GeCrntPMFRDRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 111),
    _GeCrntPMFRDRInitialize_Type()
)
geCrntPMFRDRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMFRDRInitialize.setStatus("current")
_GeCrntPMUSIZEInitialize_Type = InitializeCmd
_GeCrntPMUSIZEInitialize_Object = MibTableColumn
geCrntPMUSIZEInitialize = _GeCrntPMUSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 112),
    _GeCrntPMUSIZEInitialize_Type()
)
geCrntPMUSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMUSIZEInitialize.setStatus("current")
_GeCrntPMOSIZEInitialize_Type = InitializeCmd
_GeCrntPMOSIZEInitialize_Object = MibTableColumn
geCrntPMOSIZEInitialize = _GeCrntPMOSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 113),
    _GeCrntPMOSIZEInitialize_Type()
)
geCrntPMOSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMOSIZEInitialize.setStatus("current")
_GeCrntPMFRGTInitialize_Type = InitializeCmd
_GeCrntPMFRGTInitialize_Object = MibTableColumn
geCrntPMFRGTInitialize = _GeCrntPMFRGTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 114),
    _GeCrntPMFRGTInitialize_Type()
)
geCrntPMFRGTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMFRGTInitialize.setStatus("current")
_GeCrntPMJABRInitialize_Type = InitializeCmd
_GeCrntPMJABRInitialize_Object = MibTableColumn
geCrntPMJABRInitialize = _GeCrntPMJABRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 115),
    _GeCrntPMJABRInitialize_Type()
)
geCrntPMJABRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMJABRInitialize.setStatus("current")
_GeCrntPMUASValue_Type = Unsigned32
_GeCrntPMUASValue_Object = MibTableColumn
geCrntPMUASValue = _GeCrntPMUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 116),
    _GeCrntPMUASValue_Type()
)
geCrntPMUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMUASValue.setStatus("current")
_GeCrntPMUASTimeStamp_Type = DateAndTime
_GeCrntPMUASTimeStamp_Object = MibTableColumn
geCrntPMUASTimeStamp = _GeCrntPMUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 117),
    _GeCrntPMUASTimeStamp_Type()
)
geCrntPMUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMUASTimeStamp.setStatus("current")
_GeCrntPMUASValidity_Type = PMValidity
_GeCrntPMUASValidity_Object = MibTableColumn
geCrntPMUASValidity = _GeCrntPMUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 118),
    _GeCrntPMUASValidity_Type()
)
geCrntPMUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMUASValidity.setStatus("current")
_GeCrntPMUASInitialize_Type = InitializeCmd
_GeCrntPMUASInitialize_Object = MibTableColumn
geCrntPMUASInitialize = _GeCrntPMUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 119),
    _GeCrntPMUASInitialize_Type()
)
geCrntPMUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMUASInitialize.setStatus("current")
_GeCrntPMOPRMinValue_Type = FixedX10
_GeCrntPMOPRMinValue_Object = MibTableColumn
geCrntPMOPRMinValue = _GeCrntPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 120),
    _GeCrntPMOPRMinValue_Type()
)
geCrntPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMOPRMinValue.setUnits("dBm/10")
_GeCrntPMOPRMinTimeStamp_Type = DateAndTime
_GeCrntPMOPRMinTimeStamp_Object = MibTableColumn
geCrntPMOPRMinTimeStamp = _GeCrntPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 121),
    _GeCrntPMOPRMinTimeStamp_Type()
)
geCrntPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRMinTimeStamp.setStatus("current")
_GeCrntPMOPRMinValidity_Type = PMValidity
_GeCrntPMOPRMinValidity_Object = MibTableColumn
geCrntPMOPRMinValidity = _GeCrntPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 122),
    _GeCrntPMOPRMinValidity_Type()
)
geCrntPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRMinValidity.setStatus("current")
_GeCrntPMOPRMinInitialize_Type = InitializeCmd
_GeCrntPMOPRMinInitialize_Object = MibTableColumn
geCrntPMOPRMinInitialize = _GeCrntPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 123),
    _GeCrntPMOPRMinInitialize_Type()
)
geCrntPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMOPRMinInitialize.setStatus("current")
_GeCrntPMOPRMaxValue_Type = FixedX10
_GeCrntPMOPRMaxValue_Object = MibTableColumn
geCrntPMOPRMaxValue = _GeCrntPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 124),
    _GeCrntPMOPRMaxValue_Type()
)
geCrntPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMOPRMaxValue.setUnits("dBm/10")
_GeCrntPMOPRMaxTimeStamp_Type = DateAndTime
_GeCrntPMOPRMaxTimeStamp_Object = MibTableColumn
geCrntPMOPRMaxTimeStamp = _GeCrntPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 125),
    _GeCrntPMOPRMaxTimeStamp_Type()
)
geCrntPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRMaxTimeStamp.setStatus("current")
_GeCrntPMOPRMaxValidity_Type = PMValidity
_GeCrntPMOPRMaxValidity_Object = MibTableColumn
geCrntPMOPRMaxValidity = _GeCrntPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 126),
    _GeCrntPMOPRMaxValidity_Type()
)
geCrntPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRMaxValidity.setStatus("current")
_GeCrntPMOPRMaxInitialize_Type = InitializeCmd
_GeCrntPMOPRMaxInitialize_Object = MibTableColumn
geCrntPMOPRMaxInitialize = _GeCrntPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 127),
    _GeCrntPMOPRMaxInitialize_Type()
)
geCrntPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMOPRMaxInitialize.setStatus("current")
_GeCrntPMOPRAvgValue_Type = FixedX10
_GeCrntPMOPRAvgValue_Object = MibTableColumn
geCrntPMOPRAvgValue = _GeCrntPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 128),
    _GeCrntPMOPRAvgValue_Type()
)
geCrntPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMOPRAvgValue.setUnits("dBm/10")
_GeCrntPMOPRAvgTimeStamp_Type = DateAndTime
_GeCrntPMOPRAvgTimeStamp_Object = MibTableColumn
geCrntPMOPRAvgTimeStamp = _GeCrntPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 129),
    _GeCrntPMOPRAvgTimeStamp_Type()
)
geCrntPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRAvgTimeStamp.setStatus("current")
_GeCrntPMOPRAvgValidity_Type = PMValidity
_GeCrntPMOPRAvgValidity_Object = MibTableColumn
geCrntPMOPRAvgValidity = _GeCrntPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 130),
    _GeCrntPMOPRAvgValidity_Type()
)
geCrntPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPRAvgValidity.setStatus("current")
_GeCrntPMOPRAvgInitialize_Type = InitializeCmd
_GeCrntPMOPRAvgInitialize_Object = MibTableColumn
geCrntPMOPRAvgInitialize = _GeCrntPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 131),
    _GeCrntPMOPRAvgInitialize_Type()
)
geCrntPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMOPRAvgInitialize.setStatus("current")
_GeCrntPMOPTMinValue_Type = FixedX10
_GeCrntPMOPTMinValue_Object = MibTableColumn
geCrntPMOPTMinValue = _GeCrntPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 132),
    _GeCrntPMOPTMinValue_Type()
)
geCrntPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMOPTMinValue.setUnits("dBm/10")
_GeCrntPMOPTMinTimeStamp_Type = DateAndTime
_GeCrntPMOPTMinTimeStamp_Object = MibTableColumn
geCrntPMOPTMinTimeStamp = _GeCrntPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 133),
    _GeCrntPMOPTMinTimeStamp_Type()
)
geCrntPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTMinTimeStamp.setStatus("current")
_GeCrntPMOPTMinValidity_Type = PMValidity
_GeCrntPMOPTMinValidity_Object = MibTableColumn
geCrntPMOPTMinValidity = _GeCrntPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 134),
    _GeCrntPMOPTMinValidity_Type()
)
geCrntPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTMinValidity.setStatus("current")
_GeCrntPMOPTMinInitialize_Type = InitializeCmd
_GeCrntPMOPTMinInitialize_Object = MibTableColumn
geCrntPMOPTMinInitialize = _GeCrntPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 135),
    _GeCrntPMOPTMinInitialize_Type()
)
geCrntPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMOPTMinInitialize.setStatus("current")
_GeCrntPMOPTMaxValue_Type = FixedX10
_GeCrntPMOPTMaxValue_Object = MibTableColumn
geCrntPMOPTMaxValue = _GeCrntPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 136),
    _GeCrntPMOPTMaxValue_Type()
)
geCrntPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMOPTMaxValue.setUnits("dBm/10")
_GeCrntPMOPTMaxTimeStamp_Type = DateAndTime
_GeCrntPMOPTMaxTimeStamp_Object = MibTableColumn
geCrntPMOPTMaxTimeStamp = _GeCrntPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 137),
    _GeCrntPMOPTMaxTimeStamp_Type()
)
geCrntPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTMaxTimeStamp.setStatus("current")
_GeCrntPMOPTMaxValidity_Type = PMValidity
_GeCrntPMOPTMaxValidity_Object = MibTableColumn
geCrntPMOPTMaxValidity = _GeCrntPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 138),
    _GeCrntPMOPTMaxValidity_Type()
)
geCrntPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTMaxValidity.setStatus("current")
_GeCrntPMOPTMaxInitialize_Type = InitializeCmd
_GeCrntPMOPTMaxInitialize_Object = MibTableColumn
geCrntPMOPTMaxInitialize = _GeCrntPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 139),
    _GeCrntPMOPTMaxInitialize_Type()
)
geCrntPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMOPTMaxInitialize.setStatus("current")
_GeCrntPMOPTAvgValue_Type = FixedX10
_GeCrntPMOPTAvgValue_Object = MibTableColumn
geCrntPMOPTAvgValue = _GeCrntPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 140),
    _GeCrntPMOPTAvgValue_Type()
)
geCrntPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    geCrntPMOPTAvgValue.setUnits("dBm/10")
_GeCrntPMOPTAvgTimeStamp_Type = DateAndTime
_GeCrntPMOPTAvgTimeStamp_Object = MibTableColumn
geCrntPMOPTAvgTimeStamp = _GeCrntPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 141),
    _GeCrntPMOPTAvgTimeStamp_Type()
)
geCrntPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTAvgTimeStamp.setStatus("current")
_GeCrntPMOPTAvgValidity_Type = PMValidity
_GeCrntPMOPTAvgValidity_Object = MibTableColumn
geCrntPMOPTAvgValidity = _GeCrntPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 142),
    _GeCrntPMOPTAvgValidity_Type()
)
geCrntPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geCrntPMOPTAvgValidity.setStatus("current")
_GeCrntPMOPTAvgInitialize_Type = InitializeCmd
_GeCrntPMOPTAvgInitialize_Object = MibTableColumn
geCrntPMOPTAvgInitialize = _GeCrntPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 143),
    _GeCrntPMOPTAvgInitialize_Type()
)
geCrntPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geCrntPMOPTAvgInitialize.setStatus("current")
_GeHistPMTable_Object = MibTable
geHistPMTable = _GeHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21)
)
if mibBuilder.loadTexts:
    geHistPMTable.setStatus("current")
_GeHistPMEntry_Object = MibTableRow
geHistPMEntry = _GeHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1)
)
geHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "geHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "geHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "geHistPMPortIdx"),
    (0, "BTI-7000-MIB", "geHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "geHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    geHistPMEntry.setStatus("current")


class _GeHistPMShelfIdx_Type(Integer32):
    """Custom type geHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_GeHistPMShelfIdx_Type.__name__ = "Integer32"
_GeHistPMShelfIdx_Object = MibTableColumn
geHistPMShelfIdx = _GeHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 1),
    _GeHistPMShelfIdx_Type()
)
geHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geHistPMShelfIdx.setStatus("current")


class _GeHistPMSlotIdx_Type(Integer32):
    """Custom type geHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_GeHistPMSlotIdx_Type.__name__ = "Integer32"
_GeHistPMSlotIdx_Object = MibTableColumn
geHistPMSlotIdx = _GeHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 2),
    _GeHistPMSlotIdx_Type()
)
geHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geHistPMSlotIdx.setStatus("current")


class _GeHistPMPortIdx_Type(Integer32):
    """Custom type geHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_GeHistPMPortIdx_Type.__name__ = "Integer32"
_GeHistPMPortIdx_Object = MibTableColumn
geHistPMPortIdx = _GeHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 3),
    _GeHistPMPortIdx_Type()
)
geHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geHistPMPortIdx.setStatus("current")
_GeHistPMIntervalTypeIdx_Type = PMIntervalType
_GeHistPMIntervalTypeIdx_Object = MibTableColumn
geHistPMIntervalTypeIdx = _GeHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 4),
    _GeHistPMIntervalTypeIdx_Type()
)
geHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geHistPMIntervalTypeIdx.setStatus("current")


class _GeHistPMIntervalIdx_Type(Integer32):
    """Custom type geHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_GeHistPMIntervalIdx_Type.__name__ = "Integer32"
_GeHistPMIntervalIdx_Object = MibTableColumn
geHistPMIntervalIdx = _GeHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 5),
    _GeHistPMIntervalIdx_Type()
)
geHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geHistPMIntervalIdx.setStatus("current")
_GeHistPMOPRValue_Type = FixedX10
_GeHistPMOPRValue_Object = MibTableColumn
geHistPMOPRValue = _GeHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 6),
    _GeHistPMOPRValue_Type()
)
geHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMOPRValue.setUnits("dBm/10")
_GeHistPMOPRTimeStamp_Type = DateAndTime
_GeHistPMOPRTimeStamp_Object = MibTableColumn
geHistPMOPRTimeStamp = _GeHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 7),
    _GeHistPMOPRTimeStamp_Type()
)
geHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRTimeStamp.setStatus("current")
_GeHistPMOPRValidity_Type = PMValidity
_GeHistPMOPRValidity_Object = MibTableColumn
geHistPMOPRValidity = _GeHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 8),
    _GeHistPMOPRValidity_Type()
)
geHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRValidity.setStatus("current")
_GeHistPMOPTValue_Type = FixedX10
_GeHistPMOPTValue_Object = MibTableColumn
geHistPMOPTValue = _GeHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 9),
    _GeHistPMOPTValue_Type()
)
geHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMOPTValue.setUnits("dBm/10")
_GeHistPMOPTTimeStamp_Type = DateAndTime
_GeHistPMOPTTimeStamp_Object = MibTableColumn
geHistPMOPTTimeStamp = _GeHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 10),
    _GeHistPMOPTTimeStamp_Type()
)
geHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTTimeStamp.setStatus("current")
_GeHistPMOPTValidity_Type = PMValidity
_GeHistPMOPTValidity_Object = MibTableColumn
geHistPMOPTValidity = _GeHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 11),
    _GeHistPMOPTValidity_Type()
)
geHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTValidity.setStatus("current")


class _GeHistPMTempValue_Type(Integer32):
    """Custom type geHistPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_GeHistPMTempValue_Type.__name__ = "Integer32"
_GeHistPMTempValue_Object = MibTableColumn
geHistPMTempValue = _GeHistPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 12),
    _GeHistPMTempValue_Type()
)
geHistPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMTempValue.setUnits("degrees Celsius")
_GeHistPMTempTimeStamp_Type = DateAndTime
_GeHistPMTempTimeStamp_Object = MibTableColumn
geHistPMTempTimeStamp = _GeHistPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 13),
    _GeHistPMTempTimeStamp_Type()
)
geHistPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTempTimeStamp.setStatus("current")
_GeHistPMTempValidity_Type = PMValidity
_GeHistPMTempValidity_Object = MibTableColumn
geHistPMTempValidity = _GeHistPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 14),
    _GeHistPMTempValidity_Type()
)
geHistPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTempValidity.setStatus("current")
_GeHistPMSupplyVoltageValue_Type = FixedX10
_GeHistPMSupplyVoltageValue_Object = MibTableColumn
geHistPMSupplyVoltageValue = _GeHistPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 15),
    _GeHistPMSupplyVoltageValue_Type()
)
geHistPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMSupplyVoltageValue.setUnits("mVolts/10")
_GeHistPMSupplyVoltageTimeStamp_Type = DateAndTime
_GeHistPMSupplyVoltageTimeStamp_Object = MibTableColumn
geHistPMSupplyVoltageTimeStamp = _GeHistPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 16),
    _GeHistPMSupplyVoltageTimeStamp_Type()
)
geHistPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSupplyVoltageTimeStamp.setStatus("current")
_GeHistPMSupplyVoltageValidity_Type = PMValidity
_GeHistPMSupplyVoltageValidity_Object = MibTableColumn
geHistPMSupplyVoltageValidity = _GeHistPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 17),
    _GeHistPMSupplyVoltageValidity_Type()
)
geHistPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSupplyVoltageValidity.setStatus("current")


class _GeHistPMLBCValue_Type(Integer32):
    """Custom type geHistPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_GeHistPMLBCValue_Type.__name__ = "Integer32"
_GeHistPMLBCValue_Object = MibTableColumn
geHistPMLBCValue = _GeHistPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 18),
    _GeHistPMLBCValue_Type()
)
geHistPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMLBCValue.setUnits("mAmp")
_GeHistPMLBCTimeStamp_Type = DateAndTime
_GeHistPMLBCTimeStamp_Object = MibTableColumn
geHistPMLBCTimeStamp = _GeHistPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 19),
    _GeHistPMLBCTimeStamp_Type()
)
geHistPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMLBCTimeStamp.setStatus("current")
_GeHistPMLBCValidity_Type = PMValidity
_GeHistPMLBCValidity_Object = MibTableColumn
geHistPMLBCValidity = _GeHistPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 20),
    _GeHistPMLBCValidity_Type()
)
geHistPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMLBCValidity.setStatus("current")
_GeHistPMCVValue_Type = Unsigned32
_GeHistPMCVValue_Object = MibTableColumn
geHistPMCVValue = _GeHistPMCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 21),
    _GeHistPMCVValue_Type()
)
geHistPMCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMCVValue.setStatus("current")
_GeHistPMCVTimeStamp_Type = DateAndTime
_GeHistPMCVTimeStamp_Object = MibTableColumn
geHistPMCVTimeStamp = _GeHistPMCVTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 22),
    _GeHistPMCVTimeStamp_Type()
)
geHistPMCVTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMCVTimeStamp.setStatus("current")
_GeHistPMCVValidity_Type = PMValidity
_GeHistPMCVValidity_Object = MibTableColumn
geHistPMCVValidity = _GeHistPMCVValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 23),
    _GeHistPMCVValidity_Type()
)
geHistPMCVValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMCVValidity.setStatus("current")
_GeHistPMESValue_Type = Unsigned32
_GeHistPMESValue_Object = MibTableColumn
geHistPMESValue = _GeHistPMESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 24),
    _GeHistPMESValue_Type()
)
geHistPMESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMESValue.setStatus("current")
_GeHistPMESTimeStamp_Type = DateAndTime
_GeHistPMESTimeStamp_Object = MibTableColumn
geHistPMESTimeStamp = _GeHistPMESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 25),
    _GeHistPMESTimeStamp_Type()
)
geHistPMESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMESTimeStamp.setStatus("current")
_GeHistPMESValidity_Type = PMValidity
_GeHistPMESValidity_Object = MibTableColumn
geHistPMESValidity = _GeHistPMESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 26),
    _GeHistPMESValidity_Type()
)
geHistPMESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMESValidity.setStatus("current")
_GeHistPMSESValue_Type = Unsigned32
_GeHistPMSESValue_Object = MibTableColumn
geHistPMSESValue = _GeHistPMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 27),
    _GeHistPMSESValue_Type()
)
geHistPMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSESValue.setStatus("current")
_GeHistPMSESTimeStamp_Type = DateAndTime
_GeHistPMSESTimeStamp_Object = MibTableColumn
geHistPMSESTimeStamp = _GeHistPMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 28),
    _GeHistPMSESTimeStamp_Type()
)
geHistPMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSESTimeStamp.setStatus("current")
_GeHistPMSESValidity_Type = PMValidity
_GeHistPMSESValidity_Object = MibTableColumn
geHistPMSESValidity = _GeHistPMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 29),
    _GeHistPMSESValidity_Type()
)
geHistPMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSESValidity.setStatus("current")
_GeHistPMTFRCRXValue_Type = Unsigned64
_GeHistPMTFRCRXValue_Object = MibTableColumn
geHistPMTFRCRXValue = _GeHistPMTFRCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 30),
    _GeHistPMTFRCRXValue_Type()
)
geHistPMTFRCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTFRCRXValue.setStatus("current")
_GeHistPMTFRCRXTimeStamp_Type = DateAndTime
_GeHistPMTFRCRXTimeStamp_Object = MibTableColumn
geHistPMTFRCRXTimeStamp = _GeHistPMTFRCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 31),
    _GeHistPMTFRCRXTimeStamp_Type()
)
geHistPMTFRCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTFRCRXTimeStamp.setStatus("current")
_GeHistPMTFRCRXValidity_Type = PMValidity
_GeHistPMTFRCRXValidity_Object = MibTableColumn
geHistPMTFRCRXValidity = _GeHistPMTFRCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 32),
    _GeHistPMTFRCRXValidity_Type()
)
geHistPMTFRCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTFRCRXValidity.setStatus("current")
_GeHistPMTFRCRXInitialize_Type = InitializeCmd
_GeHistPMTFRCRXInitialize_Object = MibTableColumn
geHistPMTFRCRXInitialize = _GeHistPMTFRCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 33),
    _GeHistPMTFRCRXInitialize_Type()
)
geHistPMTFRCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMTFRCRXInitialize.setStatus("current")
_GeHistPMTFRCTXValue_Type = Unsigned64
_GeHistPMTFRCTXValue_Object = MibTableColumn
geHistPMTFRCTXValue = _GeHistPMTFRCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 34),
    _GeHistPMTFRCTXValue_Type()
)
geHistPMTFRCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTFRCTXValue.setStatus("current")
_GeHistPMTFRCTXTimeStamp_Type = DateAndTime
_GeHistPMTFRCTXTimeStamp_Object = MibTableColumn
geHistPMTFRCTXTimeStamp = _GeHistPMTFRCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 35),
    _GeHistPMTFRCTXTimeStamp_Type()
)
geHistPMTFRCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTFRCTXTimeStamp.setStatus("current")
_GeHistPMTFRCTXValidity_Type = PMValidity
_GeHistPMTFRCTXValidity_Object = MibTableColumn
geHistPMTFRCTXValidity = _GeHistPMTFRCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 36),
    _GeHistPMTFRCTXValidity_Type()
)
geHistPMTFRCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTFRCTXValidity.setStatus("current")
_GeHistPMTFRCTXInitialize_Type = InitializeCmd
_GeHistPMTFRCTXInitialize_Object = MibTableColumn
geHistPMTFRCTXInitialize = _GeHistPMTFRCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 37),
    _GeHistPMTFRCTXInitialize_Type()
)
geHistPMTFRCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMTFRCTXInitialize.setStatus("current")
_GeHistPMFRDRValue_Type = Unsigned32
_GeHistPMFRDRValue_Object = MibTableColumn
geHistPMFRDRValue = _GeHistPMFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 38),
    _GeHistPMFRDRValue_Type()
)
geHistPMFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMFRDRValue.setStatus("current")
_GeHistPMFRDRTimeStamp_Type = DateAndTime
_GeHistPMFRDRTimeStamp_Object = MibTableColumn
geHistPMFRDRTimeStamp = _GeHistPMFRDRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 39),
    _GeHistPMFRDRTimeStamp_Type()
)
geHistPMFRDRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMFRDRTimeStamp.setStatus("current")
_GeHistPMFRDRValidity_Type = PMValidity
_GeHistPMFRDRValidity_Object = MibTableColumn
geHistPMFRDRValidity = _GeHistPMFRDRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 40),
    _GeHistPMFRDRValidity_Type()
)
geHistPMFRDRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMFRDRValidity.setStatus("current")
_GeHistPMFCSEValue_Type = Unsigned32
_GeHistPMFCSEValue_Object = MibTableColumn
geHistPMFCSEValue = _GeHistPMFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 41),
    _GeHistPMFCSEValue_Type()
)
geHistPMFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMFCSEValue.setStatus("current")
_GeHistPMFCSETimeStamp_Type = DateAndTime
_GeHistPMFCSETimeStamp_Object = MibTableColumn
geHistPMFCSETimeStamp = _GeHistPMFCSETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 42),
    _GeHistPMFCSETimeStamp_Type()
)
geHistPMFCSETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMFCSETimeStamp.setStatus("current")
_GeHistPMFCSEValidity_Type = PMValidity
_GeHistPMFCSEValidity_Object = MibTableColumn
geHistPMFCSEValidity = _GeHistPMFCSEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 43),
    _GeHistPMFCSEValidity_Type()
)
geHistPMFCSEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMFCSEValidity.setStatus("current")
_GeHistPMTBYCRXValue_Type = Unsigned64
_GeHistPMTBYCRXValue_Object = MibTableColumn
geHistPMTBYCRXValue = _GeHistPMTBYCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 44),
    _GeHistPMTBYCRXValue_Type()
)
geHistPMTBYCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTBYCRXValue.setStatus("current")
_GeHistPMTBYCRXTimeStamp_Type = DateAndTime
_GeHistPMTBYCRXTimeStamp_Object = MibTableColumn
geHistPMTBYCRXTimeStamp = _GeHistPMTBYCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 45),
    _GeHistPMTBYCRXTimeStamp_Type()
)
geHistPMTBYCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTBYCRXTimeStamp.setStatus("current")
_GeHistPMTBYCRXValidity_Type = PMValidity
_GeHistPMTBYCRXValidity_Object = MibTableColumn
geHistPMTBYCRXValidity = _GeHistPMTBYCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 46),
    _GeHistPMTBYCRXValidity_Type()
)
geHistPMTBYCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTBYCRXValidity.setStatus("current")
_GeHistPMTBYCRXInitialize_Type = InitializeCmd
_GeHistPMTBYCRXInitialize_Object = MibTableColumn
geHistPMTBYCRXInitialize = _GeHistPMTBYCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 47),
    _GeHistPMTBYCRXInitialize_Type()
)
geHistPMTBYCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMTBYCRXInitialize.setStatus("current")
_GeHistPMTBYCTXValue_Type = Unsigned64
_GeHistPMTBYCTXValue_Object = MibTableColumn
geHistPMTBYCTXValue = _GeHistPMTBYCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 48),
    _GeHistPMTBYCTXValue_Type()
)
geHistPMTBYCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTBYCTXValue.setStatus("current")
_GeHistPMTBYCTXTimeStamp_Type = DateAndTime
_GeHistPMTBYCTXTimeStamp_Object = MibTableColumn
geHistPMTBYCTXTimeStamp = _GeHistPMTBYCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 49),
    _GeHistPMTBYCTXTimeStamp_Type()
)
geHistPMTBYCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTBYCTXTimeStamp.setStatus("current")
_GeHistPMTBYCTXValidity_Type = PMValidity
_GeHistPMTBYCTXValidity_Object = MibTableColumn
geHistPMTBYCTXValidity = _GeHistPMTBYCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 50),
    _GeHistPMTBYCTXValidity_Type()
)
geHistPMTBYCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTBYCTXValidity.setStatus("current")
_GeHistPMTBYCTXInitialize_Type = InitializeCmd
_GeHistPMTBYCTXInitialize_Object = MibTableColumn
geHistPMTBYCTXInitialize = _GeHistPMTBYCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 51),
    _GeHistPMTBYCTXInitialize_Type()
)
geHistPMTBYCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMTBYCTXInitialize.setStatus("current")
_GeHistPMBCSTValue_Type = Unsigned64
_GeHistPMBCSTValue_Object = MibTableColumn
geHistPMBCSTValue = _GeHistPMBCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 52),
    _GeHistPMBCSTValue_Type()
)
geHistPMBCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMBCSTValue.setStatus("current")
_GeHistPMBCSTTimeStamp_Type = DateAndTime
_GeHistPMBCSTTimeStamp_Object = MibTableColumn
geHistPMBCSTTimeStamp = _GeHistPMBCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 53),
    _GeHistPMBCSTTimeStamp_Type()
)
geHistPMBCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMBCSTTimeStamp.setStatus("current")
_GeHistPMBCSTValidity_Type = PMValidity
_GeHistPMBCSTValidity_Object = MibTableColumn
geHistPMBCSTValidity = _GeHistPMBCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 54),
    _GeHistPMBCSTValidity_Type()
)
geHistPMBCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMBCSTValidity.setStatus("current")
_GeHistPMBCSTInitialize_Type = InitializeCmd
_GeHistPMBCSTInitialize_Object = MibTableColumn
geHistPMBCSTInitialize = _GeHistPMBCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 55),
    _GeHistPMBCSTInitialize_Type()
)
geHistPMBCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMBCSTInitialize.setStatus("current")
_GeHistPMMCSTValue_Type = Unsigned64
_GeHistPMMCSTValue_Object = MibTableColumn
geHistPMMCSTValue = _GeHistPMMCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 56),
    _GeHistPMMCSTValue_Type()
)
geHistPMMCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMMCSTValue.setStatus("current")
_GeHistPMMCSTTimeStamp_Type = DateAndTime
_GeHistPMMCSTTimeStamp_Object = MibTableColumn
geHistPMMCSTTimeStamp = _GeHistPMMCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 57),
    _GeHistPMMCSTTimeStamp_Type()
)
geHistPMMCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMMCSTTimeStamp.setStatus("current")
_GeHistPMMCSTValidity_Type = PMValidity
_GeHistPMMCSTValidity_Object = MibTableColumn
geHistPMMCSTValidity = _GeHistPMMCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 58),
    _GeHistPMMCSTValidity_Type()
)
geHistPMMCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMMCSTValidity.setStatus("current")
_GeHistPMMCSTInitialize_Type = InitializeCmd
_GeHistPMMCSTInitialize_Object = MibTableColumn
geHistPMMCSTInitialize = _GeHistPMMCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 59),
    _GeHistPMMCSTInitialize_Type()
)
geHistPMMCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMMCSTInitialize.setStatus("current")
_GeHistPMSIZE64Value_Type = Unsigned64
_GeHistPMSIZE64Value_Object = MibTableColumn
geHistPMSIZE64Value = _GeHistPMSIZE64Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 60),
    _GeHistPMSIZE64Value_Type()
)
geHistPMSIZE64Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE64Value.setStatus("current")
_GeHistPMSIZE64TimeStamp_Type = DateAndTime
_GeHistPMSIZE64TimeStamp_Object = MibTableColumn
geHistPMSIZE64TimeStamp = _GeHistPMSIZE64TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 61),
    _GeHistPMSIZE64TimeStamp_Type()
)
geHistPMSIZE64TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE64TimeStamp.setStatus("current")
_GeHistPMSIZE64Validity_Type = PMValidity
_GeHistPMSIZE64Validity_Object = MibTableColumn
geHistPMSIZE64Validity = _GeHistPMSIZE64Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 62),
    _GeHistPMSIZE64Validity_Type()
)
geHistPMSIZE64Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE64Validity.setStatus("current")
_GeHistPMSIZE64Initialize_Type = InitializeCmd
_GeHistPMSIZE64Initialize_Object = MibTableColumn
geHistPMSIZE64Initialize = _GeHistPMSIZE64Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 63),
    _GeHistPMSIZE64Initialize_Type()
)
geHistPMSIZE64Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSIZE64Initialize.setStatus("current")
_GeHistPMSIZE65To127Value_Type = Unsigned64
_GeHistPMSIZE65To127Value_Object = MibTableColumn
geHistPMSIZE65To127Value = _GeHistPMSIZE65To127Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 64),
    _GeHistPMSIZE65To127Value_Type()
)
geHistPMSIZE65To127Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE65To127Value.setStatus("current")
_GeHistPMSIZE65To127TimeStamp_Type = DateAndTime
_GeHistPMSIZE65To127TimeStamp_Object = MibTableColumn
geHistPMSIZE65To127TimeStamp = _GeHistPMSIZE65To127TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 65),
    _GeHistPMSIZE65To127TimeStamp_Type()
)
geHistPMSIZE65To127TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE65To127TimeStamp.setStatus("current")
_GeHistPMSIZE65To127Validity_Type = PMValidity
_GeHistPMSIZE65To127Validity_Object = MibTableColumn
geHistPMSIZE65To127Validity = _GeHistPMSIZE65To127Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 66),
    _GeHistPMSIZE65To127Validity_Type()
)
geHistPMSIZE65To127Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE65To127Validity.setStatus("current")
_GeHistPMSIZE65To127Initialize_Type = InitializeCmd
_GeHistPMSIZE65To127Initialize_Object = MibTableColumn
geHistPMSIZE65To127Initialize = _GeHistPMSIZE65To127Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 67),
    _GeHistPMSIZE65To127Initialize_Type()
)
geHistPMSIZE65To127Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSIZE65To127Initialize.setStatus("current")
_GeHistPMSIZE128To255Value_Type = Unsigned64
_GeHistPMSIZE128To255Value_Object = MibTableColumn
geHistPMSIZE128To255Value = _GeHistPMSIZE128To255Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 68),
    _GeHistPMSIZE128To255Value_Type()
)
geHistPMSIZE128To255Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE128To255Value.setStatus("current")
_GeHistPMSIZE128To255TimeStamp_Type = DateAndTime
_GeHistPMSIZE128To255TimeStamp_Object = MibTableColumn
geHistPMSIZE128To255TimeStamp = _GeHistPMSIZE128To255TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 69),
    _GeHistPMSIZE128To255TimeStamp_Type()
)
geHistPMSIZE128To255TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE128To255TimeStamp.setStatus("current")
_GeHistPMSIZE128To255Validity_Type = PMValidity
_GeHistPMSIZE128To255Validity_Object = MibTableColumn
geHistPMSIZE128To255Validity = _GeHistPMSIZE128To255Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 70),
    _GeHistPMSIZE128To255Validity_Type()
)
geHistPMSIZE128To255Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE128To255Validity.setStatus("current")
_GeHistPMSIZE128To255Initialize_Type = InitializeCmd
_GeHistPMSIZE128To255Initialize_Object = MibTableColumn
geHistPMSIZE128To255Initialize = _GeHistPMSIZE128To255Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 71),
    _GeHistPMSIZE128To255Initialize_Type()
)
geHistPMSIZE128To255Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSIZE128To255Initialize.setStatus("current")
_GeHistPMSIZE256To511Value_Type = Unsigned64
_GeHistPMSIZE256To511Value_Object = MibTableColumn
geHistPMSIZE256To511Value = _GeHistPMSIZE256To511Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 72),
    _GeHistPMSIZE256To511Value_Type()
)
geHistPMSIZE256To511Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE256To511Value.setStatus("current")
_GeHistPMSIZE256To511TimeStamp_Type = DateAndTime
_GeHistPMSIZE256To511TimeStamp_Object = MibTableColumn
geHistPMSIZE256To511TimeStamp = _GeHistPMSIZE256To511TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 73),
    _GeHistPMSIZE256To511TimeStamp_Type()
)
geHistPMSIZE256To511TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE256To511TimeStamp.setStatus("current")
_GeHistPMSIZE256To511Validity_Type = PMValidity
_GeHistPMSIZE256To511Validity_Object = MibTableColumn
geHistPMSIZE256To511Validity = _GeHistPMSIZE256To511Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 74),
    _GeHistPMSIZE256To511Validity_Type()
)
geHistPMSIZE256To511Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE256To511Validity.setStatus("current")
_GeHistPMSIZE256To511Initialize_Type = InitializeCmd
_GeHistPMSIZE256To511Initialize_Object = MibTableColumn
geHistPMSIZE256To511Initialize = _GeHistPMSIZE256To511Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 75),
    _GeHistPMSIZE256To511Initialize_Type()
)
geHistPMSIZE256To511Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSIZE256To511Initialize.setStatus("current")
_GeHistPMSIZE512To1023Value_Type = Unsigned64
_GeHistPMSIZE512To1023Value_Object = MibTableColumn
geHistPMSIZE512To1023Value = _GeHistPMSIZE512To1023Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 76),
    _GeHistPMSIZE512To1023Value_Type()
)
geHistPMSIZE512To1023Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE512To1023Value.setStatus("current")
_GeHistPMSIZE512To1023TimeStamp_Type = DateAndTime
_GeHistPMSIZE512To1023TimeStamp_Object = MibTableColumn
geHistPMSIZE512To1023TimeStamp = _GeHistPMSIZE512To1023TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 77),
    _GeHistPMSIZE512To1023TimeStamp_Type()
)
geHistPMSIZE512To1023TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE512To1023TimeStamp.setStatus("current")
_GeHistPMSIZE512To1023Validity_Type = PMValidity
_GeHistPMSIZE512To1023Validity_Object = MibTableColumn
geHistPMSIZE512To1023Validity = _GeHistPMSIZE512To1023Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 78),
    _GeHistPMSIZE512To1023Validity_Type()
)
geHistPMSIZE512To1023Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE512To1023Validity.setStatus("current")
_GeHistPMSIZE512To1023Initialize_Type = InitializeCmd
_GeHistPMSIZE512To1023Initialize_Object = MibTableColumn
geHistPMSIZE512To1023Initialize = _GeHistPMSIZE512To1023Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 79),
    _GeHistPMSIZE512To1023Initialize_Type()
)
geHistPMSIZE512To1023Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSIZE512To1023Initialize.setStatus("current")
_GeHistPMSIZE1024To1518Value_Type = Unsigned64
_GeHistPMSIZE1024To1518Value_Object = MibTableColumn
geHistPMSIZE1024To1518Value = _GeHistPMSIZE1024To1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 80),
    _GeHistPMSIZE1024To1518Value_Type()
)
geHistPMSIZE1024To1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE1024To1518Value.setStatus("current")
_GeHistPMSIZE1024To1518TimeStamp_Type = DateAndTime
_GeHistPMSIZE1024To1518TimeStamp_Object = MibTableColumn
geHistPMSIZE1024To1518TimeStamp = _GeHistPMSIZE1024To1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 81),
    _GeHistPMSIZE1024To1518TimeStamp_Type()
)
geHistPMSIZE1024To1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE1024To1518TimeStamp.setStatus("current")
_GeHistPMSIZE1024To1518Validity_Type = PMValidity
_GeHistPMSIZE1024To1518Validity_Object = MibTableColumn
geHistPMSIZE1024To1518Validity = _GeHistPMSIZE1024To1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 82),
    _GeHistPMSIZE1024To1518Validity_Type()
)
geHistPMSIZE1024To1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZE1024To1518Validity.setStatus("current")
_GeHistPMSIZE1024To1518Initialize_Type = InitializeCmd
_GeHistPMSIZE1024To1518Initialize_Object = MibTableColumn
geHistPMSIZE1024To1518Initialize = _GeHistPMSIZE1024To1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 83),
    _GeHistPMSIZE1024To1518Initialize_Type()
)
geHistPMSIZE1024To1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSIZE1024To1518Initialize.setStatus("current")
_GeHistPMSIZEOver1518Value_Type = Unsigned64
_GeHistPMSIZEOver1518Value_Object = MibTableColumn
geHistPMSIZEOver1518Value = _GeHistPMSIZEOver1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 84),
    _GeHistPMSIZEOver1518Value_Type()
)
geHistPMSIZEOver1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZEOver1518Value.setStatus("current")
_GeHistPMSIZEOver1518TimeStamp_Type = DateAndTime
_GeHistPMSIZEOver1518TimeStamp_Object = MibTableColumn
geHistPMSIZEOver1518TimeStamp = _GeHistPMSIZEOver1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 85),
    _GeHistPMSIZEOver1518TimeStamp_Type()
)
geHistPMSIZEOver1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZEOver1518TimeStamp.setStatus("current")
_GeHistPMSIZEOver1518Validity_Type = PMValidity
_GeHistPMSIZEOver1518Validity_Object = MibTableColumn
geHistPMSIZEOver1518Validity = _GeHistPMSIZEOver1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 86),
    _GeHistPMSIZEOver1518Validity_Type()
)
geHistPMSIZEOver1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMSIZEOver1518Validity.setStatus("current")
_GeHistPMSIZEOver1518Initialize_Type = InitializeCmd
_GeHistPMSIZEOver1518Initialize_Object = MibTableColumn
geHistPMSIZEOver1518Initialize = _GeHistPMSIZEOver1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 87),
    _GeHistPMSIZEOver1518Initialize_Type()
)
geHistPMSIZEOver1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSIZEOver1518Initialize.setStatus("current")
_GeHistPMTPFCRXValue_Type = Unsigned64
_GeHistPMTPFCRXValue_Object = MibTableColumn
geHistPMTPFCRXValue = _GeHistPMTPFCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 88),
    _GeHistPMTPFCRXValue_Type()
)
geHistPMTPFCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTPFCRXValue.setStatus("current")
_GeHistPMTPFCRXTimeStamp_Type = DateAndTime
_GeHistPMTPFCRXTimeStamp_Object = MibTableColumn
geHistPMTPFCRXTimeStamp = _GeHistPMTPFCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 89),
    _GeHistPMTPFCRXTimeStamp_Type()
)
geHistPMTPFCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTPFCRXTimeStamp.setStatus("current")
_GeHistPMTPFCRXValidity_Type = PMValidity
_GeHistPMTPFCRXValidity_Object = MibTableColumn
geHistPMTPFCRXValidity = _GeHistPMTPFCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 90),
    _GeHistPMTPFCRXValidity_Type()
)
geHistPMTPFCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTPFCRXValidity.setStatus("current")
_GeHistPMTPFCRXInitialize_Type = InitializeCmd
_GeHistPMTPFCRXInitialize_Object = MibTableColumn
geHistPMTPFCRXInitialize = _GeHistPMTPFCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 91),
    _GeHistPMTPFCRXInitialize_Type()
)
geHistPMTPFCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMTPFCRXInitialize.setStatus("current")
_GeHistPMTPFCTXValue_Type = Unsigned64
_GeHistPMTPFCTXValue_Object = MibTableColumn
geHistPMTPFCTXValue = _GeHistPMTPFCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 92),
    _GeHistPMTPFCTXValue_Type()
)
geHistPMTPFCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTPFCTXValue.setStatus("current")
_GeHistPMTPFCTXTimeStamp_Type = DateAndTime
_GeHistPMTPFCTXTimeStamp_Object = MibTableColumn
geHistPMTPFCTXTimeStamp = _GeHistPMTPFCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 93),
    _GeHistPMTPFCTXTimeStamp_Type()
)
geHistPMTPFCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTPFCTXTimeStamp.setStatus("current")
_GeHistPMTPFCTXValidity_Type = PMValidity
_GeHistPMTPFCTXValidity_Object = MibTableColumn
geHistPMTPFCTXValidity = _GeHistPMTPFCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 94),
    _GeHistPMTPFCTXValidity_Type()
)
geHistPMTPFCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMTPFCTXValidity.setStatus("current")
_GeHistPMTPFCTXInitialize_Type = InitializeCmd
_GeHistPMTPFCTXInitialize_Object = MibTableColumn
geHistPMTPFCTXInitialize = _GeHistPMTPFCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 95),
    _GeHistPMTPFCTXInitialize_Type()
)
geHistPMTPFCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMTPFCTXInitialize.setStatus("current")
_GeHistPMUSIZEValue_Type = Unsigned32
_GeHistPMUSIZEValue_Object = MibTableColumn
geHistPMUSIZEValue = _GeHistPMUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 96),
    _GeHistPMUSIZEValue_Type()
)
geHistPMUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMUSIZEValue.setStatus("current")
_GeHistPMUSIZETimeStamp_Type = DateAndTime
_GeHistPMUSIZETimeStamp_Object = MibTableColumn
geHistPMUSIZETimeStamp = _GeHistPMUSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 97),
    _GeHistPMUSIZETimeStamp_Type()
)
geHistPMUSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMUSIZETimeStamp.setStatus("current")
_GeHistPMUSIZEValidity_Type = PMValidity
_GeHistPMUSIZEValidity_Object = MibTableColumn
geHistPMUSIZEValidity = _GeHistPMUSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 98),
    _GeHistPMUSIZEValidity_Type()
)
geHistPMUSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMUSIZEValidity.setStatus("current")
_GeHistPMOSIZEValue_Type = Unsigned32
_GeHistPMOSIZEValue_Object = MibTableColumn
geHistPMOSIZEValue = _GeHistPMOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 99),
    _GeHistPMOSIZEValue_Type()
)
geHistPMOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMOSIZEValue.setStatus("current")
_GeHistPMOSIZETimeStamp_Type = DateAndTime
_GeHistPMOSIZETimeStamp_Object = MibTableColumn
geHistPMOSIZETimeStamp = _GeHistPMOSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 100),
    _GeHistPMOSIZETimeStamp_Type()
)
geHistPMOSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOSIZETimeStamp.setStatus("current")
_GeHistPMOSIZEValidity_Type = PMValidity
_GeHistPMOSIZEValidity_Object = MibTableColumn
geHistPMOSIZEValidity = _GeHistPMOSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 101),
    _GeHistPMOSIZEValidity_Type()
)
geHistPMOSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOSIZEValidity.setStatus("current")
_GeHistPMFRGTValue_Type = Unsigned32
_GeHistPMFRGTValue_Object = MibTableColumn
geHistPMFRGTValue = _GeHistPMFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 102),
    _GeHistPMFRGTValue_Type()
)
geHistPMFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMFRGTValue.setStatus("current")
_GeHistPMFRGTTimeStamp_Type = DateAndTime
_GeHistPMFRGTTimeStamp_Object = MibTableColumn
geHistPMFRGTTimeStamp = _GeHistPMFRGTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 103),
    _GeHistPMFRGTTimeStamp_Type()
)
geHistPMFRGTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMFRGTTimeStamp.setStatus("current")
_GeHistPMFRGTValidity_Type = PMValidity
_GeHistPMFRGTValidity_Object = MibTableColumn
geHistPMFRGTValidity = _GeHistPMFRGTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 104),
    _GeHistPMFRGTValidity_Type()
)
geHistPMFRGTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMFRGTValidity.setStatus("current")
_GeHistPMJABRValue_Type = Unsigned32
_GeHistPMJABRValue_Object = MibTableColumn
geHistPMJABRValue = _GeHistPMJABRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 105),
    _GeHistPMJABRValue_Type()
)
geHistPMJABRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMJABRValue.setStatus("current")
_GeHistPMJABRTimeStamp_Type = DateAndTime
_GeHistPMJABRTimeStamp_Object = MibTableColumn
geHistPMJABRTimeStamp = _GeHistPMJABRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 106),
    _GeHistPMJABRTimeStamp_Type()
)
geHistPMJABRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMJABRTimeStamp.setStatus("current")
_GeHistPMJABRValidity_Type = PMValidity
_GeHistPMJABRValidity_Object = MibTableColumn
geHistPMJABRValidity = _GeHistPMJABRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 107),
    _GeHistPMJABRValidity_Type()
)
geHistPMJABRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMJABRValidity.setStatus("current")
_GeHistPMCVInitialize_Type = InitializeCmd
_GeHistPMCVInitialize_Object = MibTableColumn
geHistPMCVInitialize = _GeHistPMCVInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 108),
    _GeHistPMCVInitialize_Type()
)
geHistPMCVInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMCVInitialize.setStatus("current")
_GeHistPMESInitialize_Type = InitializeCmd
_GeHistPMESInitialize_Object = MibTableColumn
geHistPMESInitialize = _GeHistPMESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 109),
    _GeHistPMESInitialize_Type()
)
geHistPMESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMESInitialize.setStatus("current")
_GeHistPMSESInitialize_Type = InitializeCmd
_GeHistPMSESInitialize_Object = MibTableColumn
geHistPMSESInitialize = _GeHistPMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 110),
    _GeHistPMSESInitialize_Type()
)
geHistPMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMSESInitialize.setStatus("current")
_GeHistPMFCSEInitialize_Type = InitializeCmd
_GeHistPMFCSEInitialize_Object = MibTableColumn
geHistPMFCSEInitialize = _GeHistPMFCSEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 111),
    _GeHistPMFCSEInitialize_Type()
)
geHistPMFCSEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMFCSEInitialize.setStatus("current")
_GeHistPMFRDRInitialize_Type = InitializeCmd
_GeHistPMFRDRInitialize_Object = MibTableColumn
geHistPMFRDRInitialize = _GeHistPMFRDRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 112),
    _GeHistPMFRDRInitialize_Type()
)
geHistPMFRDRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMFRDRInitialize.setStatus("current")
_GeHistPMUSIZEInitialize_Type = InitializeCmd
_GeHistPMUSIZEInitialize_Object = MibTableColumn
geHistPMUSIZEInitialize = _GeHistPMUSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 113),
    _GeHistPMUSIZEInitialize_Type()
)
geHistPMUSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMUSIZEInitialize.setStatus("current")
_GeHistPMOSIZEInitialize_Type = InitializeCmd
_GeHistPMOSIZEInitialize_Object = MibTableColumn
geHistPMOSIZEInitialize = _GeHistPMOSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 114),
    _GeHistPMOSIZEInitialize_Type()
)
geHistPMOSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMOSIZEInitialize.setStatus("current")
_GeHistPMFRGTInitialize_Type = InitializeCmd
_GeHistPMFRGTInitialize_Object = MibTableColumn
geHistPMFRGTInitialize = _GeHistPMFRGTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 115),
    _GeHistPMFRGTInitialize_Type()
)
geHistPMFRGTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMFRGTInitialize.setStatus("current")
_GeHistPMJABRInitialize_Type = InitializeCmd
_GeHistPMJABRInitialize_Object = MibTableColumn
geHistPMJABRInitialize = _GeHistPMJABRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 116),
    _GeHistPMJABRInitialize_Type()
)
geHistPMJABRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMJABRInitialize.setStatus("current")
_GeHistPMUASValue_Type = Unsigned32
_GeHistPMUASValue_Object = MibTableColumn
geHistPMUASValue = _GeHistPMUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 117),
    _GeHistPMUASValue_Type()
)
geHistPMUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMUASValue.setStatus("current")
_GeHistPMUASTimeStamp_Type = DateAndTime
_GeHistPMUASTimeStamp_Object = MibTableColumn
geHistPMUASTimeStamp = _GeHistPMUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 118),
    _GeHistPMUASTimeStamp_Type()
)
geHistPMUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMUASTimeStamp.setStatus("current")
_GeHistPMUASValidity_Type = PMValidity
_GeHistPMUASValidity_Object = MibTableColumn
geHistPMUASValidity = _GeHistPMUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 119),
    _GeHistPMUASValidity_Type()
)
geHistPMUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMUASValidity.setStatus("current")
_GeHistPMUASInitialize_Type = InitializeCmd
_GeHistPMUASInitialize_Object = MibTableColumn
geHistPMUASInitialize = _GeHistPMUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 120),
    _GeHistPMUASInitialize_Type()
)
geHistPMUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMUASInitialize.setStatus("current")
_GeHistPMOPRMinValue_Type = FixedX10
_GeHistPMOPRMinValue_Object = MibTableColumn
geHistPMOPRMinValue = _GeHistPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 121),
    _GeHistPMOPRMinValue_Type()
)
geHistPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMOPRMinValue.setUnits("dBm/10")
_GeHistPMOPRMinTimeStamp_Type = DateAndTime
_GeHistPMOPRMinTimeStamp_Object = MibTableColumn
geHistPMOPRMinTimeStamp = _GeHistPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 122),
    _GeHistPMOPRMinTimeStamp_Type()
)
geHistPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRMinTimeStamp.setStatus("current")
_GeHistPMOPRMinValidity_Type = PMValidity
_GeHistPMOPRMinValidity_Object = MibTableColumn
geHistPMOPRMinValidity = _GeHistPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 123),
    _GeHistPMOPRMinValidity_Type()
)
geHistPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRMinValidity.setStatus("current")
_GeHistPMOPRMinInitialize_Type = InitializeCmd
_GeHistPMOPRMinInitialize_Object = MibTableColumn
geHistPMOPRMinInitialize = _GeHistPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 124),
    _GeHistPMOPRMinInitialize_Type()
)
geHistPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMOPRMinInitialize.setStatus("current")
_GeHistPMOPRMaxValue_Type = FixedX10
_GeHistPMOPRMaxValue_Object = MibTableColumn
geHistPMOPRMaxValue = _GeHistPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 125),
    _GeHistPMOPRMaxValue_Type()
)
geHistPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMOPRMaxValue.setUnits("dBm/10")
_GeHistPMOPRMaxTimeStamp_Type = DateAndTime
_GeHistPMOPRMaxTimeStamp_Object = MibTableColumn
geHistPMOPRMaxTimeStamp = _GeHistPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 126),
    _GeHistPMOPRMaxTimeStamp_Type()
)
geHistPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRMaxTimeStamp.setStatus("current")
_GeHistPMOPRMaxValidity_Type = PMValidity
_GeHistPMOPRMaxValidity_Object = MibTableColumn
geHistPMOPRMaxValidity = _GeHistPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 127),
    _GeHistPMOPRMaxValidity_Type()
)
geHistPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRMaxValidity.setStatus("current")
_GeHistPMOPRMaxInitialize_Type = InitializeCmd
_GeHistPMOPRMaxInitialize_Object = MibTableColumn
geHistPMOPRMaxInitialize = _GeHistPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 128),
    _GeHistPMOPRMaxInitialize_Type()
)
geHistPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMOPRMaxInitialize.setStatus("current")
_GeHistPMOPRAvgValue_Type = FixedX10
_GeHistPMOPRAvgValue_Object = MibTableColumn
geHistPMOPRAvgValue = _GeHistPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 129),
    _GeHistPMOPRAvgValue_Type()
)
geHistPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMOPRAvgValue.setUnits("dBm/10")
_GeHistPMOPRAvgTimeStamp_Type = DateAndTime
_GeHistPMOPRAvgTimeStamp_Object = MibTableColumn
geHistPMOPRAvgTimeStamp = _GeHistPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 130),
    _GeHistPMOPRAvgTimeStamp_Type()
)
geHistPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRAvgTimeStamp.setStatus("current")
_GeHistPMOPRAvgValidity_Type = PMValidity
_GeHistPMOPRAvgValidity_Object = MibTableColumn
geHistPMOPRAvgValidity = _GeHistPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 131),
    _GeHistPMOPRAvgValidity_Type()
)
geHistPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPRAvgValidity.setStatus("current")
_GeHistPMOPRAvgInitialize_Type = InitializeCmd
_GeHistPMOPRAvgInitialize_Object = MibTableColumn
geHistPMOPRAvgInitialize = _GeHistPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 132),
    _GeHistPMOPRAvgInitialize_Type()
)
geHistPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMOPRAvgInitialize.setStatus("current")
_GeHistPMOPTMinValue_Type = FixedX10
_GeHistPMOPTMinValue_Object = MibTableColumn
geHistPMOPTMinValue = _GeHistPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 133),
    _GeHistPMOPTMinValue_Type()
)
geHistPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMOPTMinValue.setUnits("dBm/10")
_GeHistPMOPTMinTimeStamp_Type = DateAndTime
_GeHistPMOPTMinTimeStamp_Object = MibTableColumn
geHistPMOPTMinTimeStamp = _GeHistPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 134),
    _GeHistPMOPTMinTimeStamp_Type()
)
geHistPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTMinTimeStamp.setStatus("current")
_GeHistPMOPTMinValidity_Type = PMValidity
_GeHistPMOPTMinValidity_Object = MibTableColumn
geHistPMOPTMinValidity = _GeHistPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 135),
    _GeHistPMOPTMinValidity_Type()
)
geHistPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTMinValidity.setStatus("current")
_GeHistPMOPTMinInitialize_Type = InitializeCmd
_GeHistPMOPTMinInitialize_Object = MibTableColumn
geHistPMOPTMinInitialize = _GeHistPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 136),
    _GeHistPMOPTMinInitialize_Type()
)
geHistPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMOPTMinInitialize.setStatus("current")
_GeHistPMOPTMaxValue_Type = FixedX10
_GeHistPMOPTMaxValue_Object = MibTableColumn
geHistPMOPTMaxValue = _GeHistPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 137),
    _GeHistPMOPTMaxValue_Type()
)
geHistPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMOPTMaxValue.setUnits("dBm/10")
_GeHistPMOPTMaxTimeStamp_Type = DateAndTime
_GeHistPMOPTMaxTimeStamp_Object = MibTableColumn
geHistPMOPTMaxTimeStamp = _GeHistPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 138),
    _GeHistPMOPTMaxTimeStamp_Type()
)
geHistPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTMaxTimeStamp.setStatus("current")
_GeHistPMOPTMaxValidity_Type = PMValidity
_GeHistPMOPTMaxValidity_Object = MibTableColumn
geHistPMOPTMaxValidity = _GeHistPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 139),
    _GeHistPMOPTMaxValidity_Type()
)
geHistPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTMaxValidity.setStatus("current")
_GeHistPMOPTMaxInitialize_Type = InitializeCmd
_GeHistPMOPTMaxInitialize_Object = MibTableColumn
geHistPMOPTMaxInitialize = _GeHistPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 140),
    _GeHistPMOPTMaxInitialize_Type()
)
geHistPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMOPTMaxInitialize.setStatus("current")
_GeHistPMOPTAvgValue_Type = FixedX10
_GeHistPMOPTAvgValue_Object = MibTableColumn
geHistPMOPTAvgValue = _GeHistPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 141),
    _GeHistPMOPTAvgValue_Type()
)
geHistPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    geHistPMOPTAvgValue.setUnits("dBm/10")
_GeHistPMOPTAvgTimeStamp_Type = DateAndTime
_GeHistPMOPTAvgTimeStamp_Object = MibTableColumn
geHistPMOPTAvgTimeStamp = _GeHistPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 142),
    _GeHistPMOPTAvgTimeStamp_Type()
)
geHistPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTAvgTimeStamp.setStatus("current")
_GeHistPMOPTAvgValidity_Type = PMValidity
_GeHistPMOPTAvgValidity_Object = MibTableColumn
geHistPMOPTAvgValidity = _GeHistPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 143),
    _GeHistPMOPTAvgValidity_Type()
)
geHistPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geHistPMOPTAvgValidity.setStatus("current")
_GeHistPMOPTAvgInitialize_Type = InitializeCmd
_GeHistPMOPTAvgInitialize_Object = MibTableColumn
geHistPMOPTAvgInitialize = _GeHistPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 144),
    _GeHistPMOPTAvgInitialize_Type()
)
geHistPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geHistPMOPTAvgInitialize.setStatus("current")
_GePMThresholdTable_Object = MibTable
gePMThresholdTable = _GePMThresholdTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22)
)
if mibBuilder.loadTexts:
    gePMThresholdTable.setStatus("current")
_GePMThresholdEntry_Object = MibTableRow
gePMThresholdEntry = _GePMThresholdEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1)
)
gePMThresholdEntry.setIndexNames(
    (0, "BTI-7000-MIB", "gePMThresholdShelfIdx"),
    (0, "BTI-7000-MIB", "gePMThresholdSlotIdx"),
    (0, "BTI-7000-MIB", "gePMThresholdPortIdx"),
    (0, "BTI-7000-MIB", "gePMThresholdIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    gePMThresholdEntry.setStatus("current")


class _GePMThresholdShelfIdx_Type(Integer32):
    """Custom type gePMThresholdShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_GePMThresholdShelfIdx_Type.__name__ = "Integer32"
_GePMThresholdShelfIdx_Object = MibTableColumn
gePMThresholdShelfIdx = _GePMThresholdShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 1),
    _GePMThresholdShelfIdx_Type()
)
gePMThresholdShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gePMThresholdShelfIdx.setStatus("current")


class _GePMThresholdSlotIdx_Type(Integer32):
    """Custom type gePMThresholdSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_GePMThresholdSlotIdx_Type.__name__ = "Integer32"
_GePMThresholdSlotIdx_Object = MibTableColumn
gePMThresholdSlotIdx = _GePMThresholdSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 2),
    _GePMThresholdSlotIdx_Type()
)
gePMThresholdSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gePMThresholdSlotIdx.setStatus("current")


class _GePMThresholdPortIdx_Type(Integer32):
    """Custom type gePMThresholdPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_GePMThresholdPortIdx_Type.__name__ = "Integer32"
_GePMThresholdPortIdx_Object = MibTableColumn
gePMThresholdPortIdx = _GePMThresholdPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 3),
    _GePMThresholdPortIdx_Type()
)
gePMThresholdPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gePMThresholdPortIdx.setStatus("current")
_GePMThresholdIntervalTypeIdx_Type = PMIntervalType
_GePMThresholdIntervalTypeIdx_Object = MibTableColumn
gePMThresholdIntervalTypeIdx = _GePMThresholdIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 4),
    _GePMThresholdIntervalTypeIdx_Type()
)
gePMThresholdIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gePMThresholdIntervalTypeIdx.setStatus("current")
_GePMThresholdCVValue_Type = Unsigned32
_GePMThresholdCVValue_Object = MibTableColumn
gePMThresholdCVValue = _GePMThresholdCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 5),
    _GePMThresholdCVValue_Type()
)
gePMThresholdCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdCVValue.setStatus("current")
_GePMThresholdESValue_Type = Unsigned32
_GePMThresholdESValue_Object = MibTableColumn
gePMThresholdESValue = _GePMThresholdESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 6),
    _GePMThresholdESValue_Type()
)
gePMThresholdESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdESValue.setStatus("current")
_GePMThresholdSESValue_Type = Unsigned32
_GePMThresholdSESValue_Object = MibTableColumn
gePMThresholdSESValue = _GePMThresholdSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 7),
    _GePMThresholdSESValue_Type()
)
gePMThresholdSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdSESValue.setStatus("current")
_GePMThresholdFRDRValue_Type = Unsigned32
_GePMThresholdFRDRValue_Object = MibTableColumn
gePMThresholdFRDRValue = _GePMThresholdFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 8),
    _GePMThresholdFRDRValue_Type()
)
gePMThresholdFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdFRDRValue.setStatus("current")
_GePMThresholdFCSEValue_Type = Unsigned32
_GePMThresholdFCSEValue_Object = MibTableColumn
gePMThresholdFCSEValue = _GePMThresholdFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 9),
    _GePMThresholdFCSEValue_Type()
)
gePMThresholdFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdFCSEValue.setStatus("current")
_GePMThresholdUSIZEValue_Type = Unsigned32
_GePMThresholdUSIZEValue_Object = MibTableColumn
gePMThresholdUSIZEValue = _GePMThresholdUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 10),
    _GePMThresholdUSIZEValue_Type()
)
gePMThresholdUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdUSIZEValue.setStatus("current")
_GePMThresholdOSIZEValue_Type = Unsigned32
_GePMThresholdOSIZEValue_Object = MibTableColumn
gePMThresholdOSIZEValue = _GePMThresholdOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 11),
    _GePMThresholdOSIZEValue_Type()
)
gePMThresholdOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdOSIZEValue.setStatus("current")
_GePMThresholdFRGTValue_Type = Unsigned32
_GePMThresholdFRGTValue_Object = MibTableColumn
gePMThresholdFRGTValue = _GePMThresholdFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 12),
    _GePMThresholdFRGTValue_Type()
)
gePMThresholdFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdFRGTValue.setStatus("current")
_GePMThresholdJABRValue_Type = Unsigned32
_GePMThresholdJABRValue_Object = MibTableColumn
gePMThresholdJABRValue = _GePMThresholdJABRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 13),
    _GePMThresholdJABRValue_Type()
)
gePMThresholdJABRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdJABRValue.setStatus("current")
_GePMThresholdUASValue_Type = Unsigned32
_GePMThresholdUASValue_Object = MibTableColumn
gePMThresholdUASValue = _GePMThresholdUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 14),
    _GePMThresholdUASValue_Type()
)
gePMThresholdUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gePMThresholdUASValue.setStatus("current")
_FcCrntPMTable_Object = MibTable
fcCrntPMTable = _FcCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23)
)
if mibBuilder.loadTexts:
    fcCrntPMTable.setStatus("current")
_FcCrntPMEntry_Object = MibTableRow
fcCrntPMEntry = _FcCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1)
)
fcCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "fcCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "fcCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "fcCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "fcCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    fcCrntPMEntry.setStatus("current")


class _FcCrntPMShelfIdx_Type(Integer32):
    """Custom type fcCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_FcCrntPMShelfIdx_Type.__name__ = "Integer32"
_FcCrntPMShelfIdx_Object = MibTableColumn
fcCrntPMShelfIdx = _FcCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 1),
    _FcCrntPMShelfIdx_Type()
)
fcCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcCrntPMShelfIdx.setStatus("current")


class _FcCrntPMSlotIdx_Type(Integer32):
    """Custom type fcCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_FcCrntPMSlotIdx_Type.__name__ = "Integer32"
_FcCrntPMSlotIdx_Object = MibTableColumn
fcCrntPMSlotIdx = _FcCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 2),
    _FcCrntPMSlotIdx_Type()
)
fcCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcCrntPMSlotIdx.setStatus("current")


class _FcCrntPMPortIdx_Type(Integer32):
    """Custom type fcCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_FcCrntPMPortIdx_Type.__name__ = "Integer32"
_FcCrntPMPortIdx_Object = MibTableColumn
fcCrntPMPortIdx = _FcCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 3),
    _FcCrntPMPortIdx_Type()
)
fcCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcCrntPMPortIdx.setStatus("current")
_FcCrntPMIntervalTypeIdx_Type = PMIntervalType
_FcCrntPMIntervalTypeIdx_Object = MibTableColumn
fcCrntPMIntervalTypeIdx = _FcCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 4),
    _FcCrntPMIntervalTypeIdx_Type()
)
fcCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcCrntPMIntervalTypeIdx.setStatus("current")
_FcCrntPMOPRValue_Type = FixedX10
_FcCrntPMOPRValue_Object = MibTableColumn
fcCrntPMOPRValue = _FcCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 5),
    _FcCrntPMOPRValue_Type()
)
fcCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMOPRValue.setUnits("dBm/10")
_FcCrntPMOPRTimeStamp_Type = DateAndTime
_FcCrntPMOPRTimeStamp_Object = MibTableColumn
fcCrntPMOPRTimeStamp = _FcCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 6),
    _FcCrntPMOPRTimeStamp_Type()
)
fcCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRTimeStamp.setStatus("current")
_FcCrntPMOPRValidity_Type = PMValidity
_FcCrntPMOPRValidity_Object = MibTableColumn
fcCrntPMOPRValidity = _FcCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 7),
    _FcCrntPMOPRValidity_Type()
)
fcCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRValidity.setStatus("current")
_FcCrntPMOPTValue_Type = FixedX10
_FcCrntPMOPTValue_Object = MibTableColumn
fcCrntPMOPTValue = _FcCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 8),
    _FcCrntPMOPTValue_Type()
)
fcCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMOPTValue.setUnits("dBm/10")
_FcCrntPMOPTTimeStamp_Type = DateAndTime
_FcCrntPMOPTTimeStamp_Object = MibTableColumn
fcCrntPMOPTTimeStamp = _FcCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 9),
    _FcCrntPMOPTTimeStamp_Type()
)
fcCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTTimeStamp.setStatus("current")
_FcCrntPMOPTValidity_Type = PMValidity
_FcCrntPMOPTValidity_Object = MibTableColumn
fcCrntPMOPTValidity = _FcCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 10),
    _FcCrntPMOPTValidity_Type()
)
fcCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTValidity.setStatus("current")


class _FcCrntPMTempValue_Type(Integer32):
    """Custom type fcCrntPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_FcCrntPMTempValue_Type.__name__ = "Integer32"
_FcCrntPMTempValue_Object = MibTableColumn
fcCrntPMTempValue = _FcCrntPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 11),
    _FcCrntPMTempValue_Type()
)
fcCrntPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMTempValue.setUnits("degrees Celsius")
_FcCrntPMTempTimeStamp_Type = DateAndTime
_FcCrntPMTempTimeStamp_Object = MibTableColumn
fcCrntPMTempTimeStamp = _FcCrntPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 12),
    _FcCrntPMTempTimeStamp_Type()
)
fcCrntPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMTempTimeStamp.setStatus("current")
_FcCrntPMTempValidity_Type = PMValidity
_FcCrntPMTempValidity_Object = MibTableColumn
fcCrntPMTempValidity = _FcCrntPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 13),
    _FcCrntPMTempValidity_Type()
)
fcCrntPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMTempValidity.setStatus("current")
_FcCrntPMSupplyVoltageValue_Type = FixedX10
_FcCrntPMSupplyVoltageValue_Object = MibTableColumn
fcCrntPMSupplyVoltageValue = _FcCrntPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 14),
    _FcCrntPMSupplyVoltageValue_Type()
)
fcCrntPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMSupplyVoltageValue.setUnits("mVolts/10")
_FcCrntPMSupplyVoltageTimeStamp_Type = DateAndTime
_FcCrntPMSupplyVoltageTimeStamp_Object = MibTableColumn
fcCrntPMSupplyVoltageTimeStamp = _FcCrntPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 15),
    _FcCrntPMSupplyVoltageTimeStamp_Type()
)
fcCrntPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMSupplyVoltageTimeStamp.setStatus("current")
_FcCrntPMSupplyVoltageValidity_Type = PMValidity
_FcCrntPMSupplyVoltageValidity_Object = MibTableColumn
fcCrntPMSupplyVoltageValidity = _FcCrntPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 16),
    _FcCrntPMSupplyVoltageValidity_Type()
)
fcCrntPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMSupplyVoltageValidity.setStatus("current")


class _FcCrntPMLBCValue_Type(Integer32):
    """Custom type fcCrntPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_FcCrntPMLBCValue_Type.__name__ = "Integer32"
_FcCrntPMLBCValue_Object = MibTableColumn
fcCrntPMLBCValue = _FcCrntPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 17),
    _FcCrntPMLBCValue_Type()
)
fcCrntPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMLBCValue.setUnits("mAmp")
_FcCrntPMLBCTimeStamp_Type = DateAndTime
_FcCrntPMLBCTimeStamp_Object = MibTableColumn
fcCrntPMLBCTimeStamp = _FcCrntPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 18),
    _FcCrntPMLBCTimeStamp_Type()
)
fcCrntPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMLBCTimeStamp.setStatus("current")
_FcCrntPMLBCValidity_Type = PMValidity
_FcCrntPMLBCValidity_Object = MibTableColumn
fcCrntPMLBCValidity = _FcCrntPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 19),
    _FcCrntPMLBCValidity_Type()
)
fcCrntPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMLBCValidity.setStatus("current")
_FcCrntPMCVValue_Type = Unsigned32
_FcCrntPMCVValue_Object = MibTableColumn
fcCrntPMCVValue = _FcCrntPMCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 20),
    _FcCrntPMCVValue_Type()
)
fcCrntPMCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMCVValue.setStatus("current")
_FcCrntPMCVTimeStamp_Type = DateAndTime
_FcCrntPMCVTimeStamp_Object = MibTableColumn
fcCrntPMCVTimeStamp = _FcCrntPMCVTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 21),
    _FcCrntPMCVTimeStamp_Type()
)
fcCrntPMCVTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMCVTimeStamp.setStatus("current")
_FcCrntPMCVValidity_Type = PMValidity
_FcCrntPMCVValidity_Object = MibTableColumn
fcCrntPMCVValidity = _FcCrntPMCVValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 22),
    _FcCrntPMCVValidity_Type()
)
fcCrntPMCVValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMCVValidity.setStatus("current")
_FcCrntPMESValue_Type = Unsigned32
_FcCrntPMESValue_Object = MibTableColumn
fcCrntPMESValue = _FcCrntPMESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 23),
    _FcCrntPMESValue_Type()
)
fcCrntPMESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMESValue.setStatus("current")
_FcCrntPMESTimeStamp_Type = DateAndTime
_FcCrntPMESTimeStamp_Object = MibTableColumn
fcCrntPMESTimeStamp = _FcCrntPMESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 24),
    _FcCrntPMESTimeStamp_Type()
)
fcCrntPMESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMESTimeStamp.setStatus("current")
_FcCrntPMESValidity_Type = PMValidity
_FcCrntPMESValidity_Object = MibTableColumn
fcCrntPMESValidity = _FcCrntPMESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 25),
    _FcCrntPMESValidity_Type()
)
fcCrntPMESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMESValidity.setStatus("current")
_FcCrntPMSESValue_Type = Unsigned32
_FcCrntPMSESValue_Object = MibTableColumn
fcCrntPMSESValue = _FcCrntPMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 26),
    _FcCrntPMSESValue_Type()
)
fcCrntPMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMSESValue.setStatus("current")
_FcCrntPMSESTimeStamp_Type = DateAndTime
_FcCrntPMSESTimeStamp_Object = MibTableColumn
fcCrntPMSESTimeStamp = _FcCrntPMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 27),
    _FcCrntPMSESTimeStamp_Type()
)
fcCrntPMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMSESTimeStamp.setStatus("current")
_FcCrntPMSESValidity_Type = PMValidity
_FcCrntPMSESValidity_Object = MibTableColumn
fcCrntPMSESValidity = _FcCrntPMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 28),
    _FcCrntPMSESValidity_Type()
)
fcCrntPMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMSESValidity.setStatus("current")
_FcCrntPMCVInitialize_Type = InitializeCmd
_FcCrntPMCVInitialize_Object = MibTableColumn
fcCrntPMCVInitialize = _FcCrntPMCVInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 29),
    _FcCrntPMCVInitialize_Type()
)
fcCrntPMCVInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMCVInitialize.setStatus("current")
_FcCrntPMESInitialize_Type = InitializeCmd
_FcCrntPMESInitialize_Object = MibTableColumn
fcCrntPMESInitialize = _FcCrntPMESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 30),
    _FcCrntPMESInitialize_Type()
)
fcCrntPMESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMESInitialize.setStatus("current")
_FcCrntPMSESInitialize_Type = InitializeCmd
_FcCrntPMSESInitialize_Object = MibTableColumn
fcCrntPMSESInitialize = _FcCrntPMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 31),
    _FcCrntPMSESInitialize_Type()
)
fcCrntPMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMSESInitialize.setStatus("current")
_FcCrntPMUASValue_Type = Unsigned32
_FcCrntPMUASValue_Object = MibTableColumn
fcCrntPMUASValue = _FcCrntPMUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 32),
    _FcCrntPMUASValue_Type()
)
fcCrntPMUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMUASValue.setStatus("current")
_FcCrntPMUASTimeStamp_Type = DateAndTime
_FcCrntPMUASTimeStamp_Object = MibTableColumn
fcCrntPMUASTimeStamp = _FcCrntPMUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 33),
    _FcCrntPMUASTimeStamp_Type()
)
fcCrntPMUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMUASTimeStamp.setStatus("current")
_FcCrntPMUASValidity_Type = PMValidity
_FcCrntPMUASValidity_Object = MibTableColumn
fcCrntPMUASValidity = _FcCrntPMUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 34),
    _FcCrntPMUASValidity_Type()
)
fcCrntPMUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMUASValidity.setStatus("current")
_FcCrntPMUASInitialize_Type = InitializeCmd
_FcCrntPMUASInitialize_Object = MibTableColumn
fcCrntPMUASInitialize = _FcCrntPMUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 35),
    _FcCrntPMUASInitialize_Type()
)
fcCrntPMUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMUASInitialize.setStatus("current")
_FcCrntPMOPRMinValue_Type = FixedX10
_FcCrntPMOPRMinValue_Object = MibTableColumn
fcCrntPMOPRMinValue = _FcCrntPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 36),
    _FcCrntPMOPRMinValue_Type()
)
fcCrntPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMOPRMinValue.setUnits("dBm/10")
_FcCrntPMOPRMinTimeStamp_Type = DateAndTime
_FcCrntPMOPRMinTimeStamp_Object = MibTableColumn
fcCrntPMOPRMinTimeStamp = _FcCrntPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 37),
    _FcCrntPMOPRMinTimeStamp_Type()
)
fcCrntPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRMinTimeStamp.setStatus("current")
_FcCrntPMOPRMinValidity_Type = PMValidity
_FcCrntPMOPRMinValidity_Object = MibTableColumn
fcCrntPMOPRMinValidity = _FcCrntPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 38),
    _FcCrntPMOPRMinValidity_Type()
)
fcCrntPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRMinValidity.setStatus("current")
_FcCrntPMOPRMinInitialize_Type = InitializeCmd
_FcCrntPMOPRMinInitialize_Object = MibTableColumn
fcCrntPMOPRMinInitialize = _FcCrntPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 39),
    _FcCrntPMOPRMinInitialize_Type()
)
fcCrntPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMOPRMinInitialize.setStatus("current")
_FcCrntPMOPRMaxValue_Type = FixedX10
_FcCrntPMOPRMaxValue_Object = MibTableColumn
fcCrntPMOPRMaxValue = _FcCrntPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 40),
    _FcCrntPMOPRMaxValue_Type()
)
fcCrntPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMOPRMaxValue.setUnits("dBm/10")
_FcCrntPMOPRMaxTimeStamp_Type = DateAndTime
_FcCrntPMOPRMaxTimeStamp_Object = MibTableColumn
fcCrntPMOPRMaxTimeStamp = _FcCrntPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 41),
    _FcCrntPMOPRMaxTimeStamp_Type()
)
fcCrntPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRMaxTimeStamp.setStatus("current")
_FcCrntPMOPRMaxValidity_Type = PMValidity
_FcCrntPMOPRMaxValidity_Object = MibTableColumn
fcCrntPMOPRMaxValidity = _FcCrntPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 42),
    _FcCrntPMOPRMaxValidity_Type()
)
fcCrntPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRMaxValidity.setStatus("current")
_FcCrntPMOPRMaxInitialize_Type = InitializeCmd
_FcCrntPMOPRMaxInitialize_Object = MibTableColumn
fcCrntPMOPRMaxInitialize = _FcCrntPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 43),
    _FcCrntPMOPRMaxInitialize_Type()
)
fcCrntPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMOPRMaxInitialize.setStatus("current")
_FcCrntPMOPRAvgValue_Type = FixedX10
_FcCrntPMOPRAvgValue_Object = MibTableColumn
fcCrntPMOPRAvgValue = _FcCrntPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 44),
    _FcCrntPMOPRAvgValue_Type()
)
fcCrntPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMOPRAvgValue.setUnits("dBm/10")
_FcCrntPMOPRAvgTimeStamp_Type = DateAndTime
_FcCrntPMOPRAvgTimeStamp_Object = MibTableColumn
fcCrntPMOPRAvgTimeStamp = _FcCrntPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 45),
    _FcCrntPMOPRAvgTimeStamp_Type()
)
fcCrntPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRAvgTimeStamp.setStatus("current")
_FcCrntPMOPRAvgValidity_Type = PMValidity
_FcCrntPMOPRAvgValidity_Object = MibTableColumn
fcCrntPMOPRAvgValidity = _FcCrntPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 46),
    _FcCrntPMOPRAvgValidity_Type()
)
fcCrntPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPRAvgValidity.setStatus("current")
_FcCrntPMOPRAvgInitialize_Type = InitializeCmd
_FcCrntPMOPRAvgInitialize_Object = MibTableColumn
fcCrntPMOPRAvgInitialize = _FcCrntPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 47),
    _FcCrntPMOPRAvgInitialize_Type()
)
fcCrntPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMOPRAvgInitialize.setStatus("current")
_FcCrntPMOPTMinValue_Type = FixedX10
_FcCrntPMOPTMinValue_Object = MibTableColumn
fcCrntPMOPTMinValue = _FcCrntPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 48),
    _FcCrntPMOPTMinValue_Type()
)
fcCrntPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMOPTMinValue.setUnits("dBm/10")
_FcCrntPMOPTMinTimeStamp_Type = DateAndTime
_FcCrntPMOPTMinTimeStamp_Object = MibTableColumn
fcCrntPMOPTMinTimeStamp = _FcCrntPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 49),
    _FcCrntPMOPTMinTimeStamp_Type()
)
fcCrntPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTMinTimeStamp.setStatus("current")
_FcCrntPMOPTMinValidity_Type = PMValidity
_FcCrntPMOPTMinValidity_Object = MibTableColumn
fcCrntPMOPTMinValidity = _FcCrntPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 50),
    _FcCrntPMOPTMinValidity_Type()
)
fcCrntPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTMinValidity.setStatus("current")
_FcCrntPMOPTMinInitialize_Type = InitializeCmd
_FcCrntPMOPTMinInitialize_Object = MibTableColumn
fcCrntPMOPTMinInitialize = _FcCrntPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 51),
    _FcCrntPMOPTMinInitialize_Type()
)
fcCrntPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMOPTMinInitialize.setStatus("current")
_FcCrntPMOPTMaxValue_Type = FixedX10
_FcCrntPMOPTMaxValue_Object = MibTableColumn
fcCrntPMOPTMaxValue = _FcCrntPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 52),
    _FcCrntPMOPTMaxValue_Type()
)
fcCrntPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMOPTMaxValue.setUnits("dBm/10")
_FcCrntPMOPTMaxTimeStamp_Type = DateAndTime
_FcCrntPMOPTMaxTimeStamp_Object = MibTableColumn
fcCrntPMOPTMaxTimeStamp = _FcCrntPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 53),
    _FcCrntPMOPTMaxTimeStamp_Type()
)
fcCrntPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTMaxTimeStamp.setStatus("current")
_FcCrntPMOPTMaxValidity_Type = PMValidity
_FcCrntPMOPTMaxValidity_Object = MibTableColumn
fcCrntPMOPTMaxValidity = _FcCrntPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 54),
    _FcCrntPMOPTMaxValidity_Type()
)
fcCrntPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTMaxValidity.setStatus("current")
_FcCrntPMOPTMaxInitialize_Type = InitializeCmd
_FcCrntPMOPTMaxInitialize_Object = MibTableColumn
fcCrntPMOPTMaxInitialize = _FcCrntPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 55),
    _FcCrntPMOPTMaxInitialize_Type()
)
fcCrntPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMOPTMaxInitialize.setStatus("current")
_FcCrntPMOPTAvgValue_Type = FixedX10
_FcCrntPMOPTAvgValue_Object = MibTableColumn
fcCrntPMOPTAvgValue = _FcCrntPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 56),
    _FcCrntPMOPTAvgValue_Type()
)
fcCrntPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    fcCrntPMOPTAvgValue.setUnits("dBm/10")
_FcCrntPMOPTAvgTimeStamp_Type = DateAndTime
_FcCrntPMOPTAvgTimeStamp_Object = MibTableColumn
fcCrntPMOPTAvgTimeStamp = _FcCrntPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 57),
    _FcCrntPMOPTAvgTimeStamp_Type()
)
fcCrntPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTAvgTimeStamp.setStatus("current")
_FcCrntPMOPTAvgValidity_Type = PMValidity
_FcCrntPMOPTAvgValidity_Object = MibTableColumn
fcCrntPMOPTAvgValidity = _FcCrntPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 58),
    _FcCrntPMOPTAvgValidity_Type()
)
fcCrntPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCrntPMOPTAvgValidity.setStatus("current")
_FcCrntPMOPTAvgInitialize_Type = InitializeCmd
_FcCrntPMOPTAvgInitialize_Object = MibTableColumn
fcCrntPMOPTAvgInitialize = _FcCrntPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 59),
    _FcCrntPMOPTAvgInitialize_Type()
)
fcCrntPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCrntPMOPTAvgInitialize.setStatus("current")
_FcHistPMTable_Object = MibTable
fcHistPMTable = _FcHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24)
)
if mibBuilder.loadTexts:
    fcHistPMTable.setStatus("current")
_FcHistPMEntry_Object = MibTableRow
fcHistPMEntry = _FcHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1)
)
fcHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "fcHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "fcHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "fcHistPMPortIdx"),
    (0, "BTI-7000-MIB", "fcHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "fcHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    fcHistPMEntry.setStatus("current")


class _FcHistPMShelfIdx_Type(Integer32):
    """Custom type fcHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_FcHistPMShelfIdx_Type.__name__ = "Integer32"
_FcHistPMShelfIdx_Object = MibTableColumn
fcHistPMShelfIdx = _FcHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 1),
    _FcHistPMShelfIdx_Type()
)
fcHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcHistPMShelfIdx.setStatus("current")


class _FcHistPMSlotIdx_Type(Integer32):
    """Custom type fcHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_FcHistPMSlotIdx_Type.__name__ = "Integer32"
_FcHistPMSlotIdx_Object = MibTableColumn
fcHistPMSlotIdx = _FcHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 2),
    _FcHistPMSlotIdx_Type()
)
fcHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcHistPMSlotIdx.setStatus("current")


class _FcHistPMPortIdx_Type(Integer32):
    """Custom type fcHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_FcHistPMPortIdx_Type.__name__ = "Integer32"
_FcHistPMPortIdx_Object = MibTableColumn
fcHistPMPortIdx = _FcHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 3),
    _FcHistPMPortIdx_Type()
)
fcHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcHistPMPortIdx.setStatus("current")
_FcHistPMIntervalTypeIdx_Type = PMIntervalType
_FcHistPMIntervalTypeIdx_Object = MibTableColumn
fcHistPMIntervalTypeIdx = _FcHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 4),
    _FcHistPMIntervalTypeIdx_Type()
)
fcHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcHistPMIntervalTypeIdx.setStatus("current")


class _FcHistPMIntervalIdx_Type(Integer32):
    """Custom type fcHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_FcHistPMIntervalIdx_Type.__name__ = "Integer32"
_FcHistPMIntervalIdx_Object = MibTableColumn
fcHistPMIntervalIdx = _FcHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 5),
    _FcHistPMIntervalIdx_Type()
)
fcHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcHistPMIntervalIdx.setStatus("current")
_FcHistPMOPRValue_Type = FixedX10
_FcHistPMOPRValue_Object = MibTableColumn
fcHistPMOPRValue = _FcHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 6),
    _FcHistPMOPRValue_Type()
)
fcHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMOPRValue.setUnits("dBm/10")
_FcHistPMOPRTimeStamp_Type = DateAndTime
_FcHistPMOPRTimeStamp_Object = MibTableColumn
fcHistPMOPRTimeStamp = _FcHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 7),
    _FcHistPMOPRTimeStamp_Type()
)
fcHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRTimeStamp.setStatus("current")
_FcHistPMOPRValidity_Type = PMValidity
_FcHistPMOPRValidity_Object = MibTableColumn
fcHistPMOPRValidity = _FcHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 8),
    _FcHistPMOPRValidity_Type()
)
fcHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRValidity.setStatus("current")
_FcHistPMOPTValue_Type = FixedX10
_FcHistPMOPTValue_Object = MibTableColumn
fcHistPMOPTValue = _FcHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 9),
    _FcHistPMOPTValue_Type()
)
fcHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMOPTValue.setUnits("dBm/10")
_FcHistPMOPTTimeStamp_Type = DateAndTime
_FcHistPMOPTTimeStamp_Object = MibTableColumn
fcHistPMOPTTimeStamp = _FcHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 10),
    _FcHistPMOPTTimeStamp_Type()
)
fcHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTTimeStamp.setStatus("current")
_FcHistPMOPTValidity_Type = PMValidity
_FcHistPMOPTValidity_Object = MibTableColumn
fcHistPMOPTValidity = _FcHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 11),
    _FcHistPMOPTValidity_Type()
)
fcHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTValidity.setStatus("current")


class _FcHistPMTempValue_Type(Integer32):
    """Custom type fcHistPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_FcHistPMTempValue_Type.__name__ = "Integer32"
_FcHistPMTempValue_Object = MibTableColumn
fcHistPMTempValue = _FcHistPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 12),
    _FcHistPMTempValue_Type()
)
fcHistPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMTempValue.setUnits("degrees Celsius")
_FcHistPMTempTimeStamp_Type = DateAndTime
_FcHistPMTempTimeStamp_Object = MibTableColumn
fcHistPMTempTimeStamp = _FcHistPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 13),
    _FcHistPMTempTimeStamp_Type()
)
fcHistPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMTempTimeStamp.setStatus("current")
_FcHistPMTempValidity_Type = PMValidity
_FcHistPMTempValidity_Object = MibTableColumn
fcHistPMTempValidity = _FcHistPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 14),
    _FcHistPMTempValidity_Type()
)
fcHistPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMTempValidity.setStatus("current")
_FcHistPMSupplyVoltageValue_Type = FixedX10
_FcHistPMSupplyVoltageValue_Object = MibTableColumn
fcHistPMSupplyVoltageValue = _FcHistPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 15),
    _FcHistPMSupplyVoltageValue_Type()
)
fcHistPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMSupplyVoltageValue.setUnits("mVolts/10")
_FcHistPMSupplyVoltageTimeStamp_Type = DateAndTime
_FcHistPMSupplyVoltageTimeStamp_Object = MibTableColumn
fcHistPMSupplyVoltageTimeStamp = _FcHistPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 16),
    _FcHistPMSupplyVoltageTimeStamp_Type()
)
fcHistPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMSupplyVoltageTimeStamp.setStatus("current")
_FcHistPMSupplyVoltageValidity_Type = PMValidity
_FcHistPMSupplyVoltageValidity_Object = MibTableColumn
fcHistPMSupplyVoltageValidity = _FcHistPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 17),
    _FcHistPMSupplyVoltageValidity_Type()
)
fcHistPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMSupplyVoltageValidity.setStatus("current")


class _FcHistPMLBCValue_Type(Integer32):
    """Custom type fcHistPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_FcHistPMLBCValue_Type.__name__ = "Integer32"
_FcHistPMLBCValue_Object = MibTableColumn
fcHistPMLBCValue = _FcHistPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 18),
    _FcHistPMLBCValue_Type()
)
fcHistPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMLBCValue.setUnits("mAmp")
_FcHistPMLBCTimeStamp_Type = DateAndTime
_FcHistPMLBCTimeStamp_Object = MibTableColumn
fcHistPMLBCTimeStamp = _FcHistPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 19),
    _FcHistPMLBCTimeStamp_Type()
)
fcHistPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMLBCTimeStamp.setStatus("current")
_FcHistPMLBCValidity_Type = PMValidity
_FcHistPMLBCValidity_Object = MibTableColumn
fcHistPMLBCValidity = _FcHistPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 20),
    _FcHistPMLBCValidity_Type()
)
fcHistPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMLBCValidity.setStatus("current")
_FcHistPMCVValue_Type = Unsigned32
_FcHistPMCVValue_Object = MibTableColumn
fcHistPMCVValue = _FcHistPMCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 21),
    _FcHistPMCVValue_Type()
)
fcHistPMCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMCVValue.setStatus("current")
_FcHistPMCVTimeStamp_Type = DateAndTime
_FcHistPMCVTimeStamp_Object = MibTableColumn
fcHistPMCVTimeStamp = _FcHistPMCVTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 22),
    _FcHistPMCVTimeStamp_Type()
)
fcHistPMCVTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMCVTimeStamp.setStatus("current")
_FcHistPMCVValidity_Type = PMValidity
_FcHistPMCVValidity_Object = MibTableColumn
fcHistPMCVValidity = _FcHistPMCVValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 23),
    _FcHistPMCVValidity_Type()
)
fcHistPMCVValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMCVValidity.setStatus("current")
_FcHistPMESValue_Type = Unsigned32
_FcHistPMESValue_Object = MibTableColumn
fcHistPMESValue = _FcHistPMESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 24),
    _FcHistPMESValue_Type()
)
fcHistPMESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMESValue.setStatus("current")
_FcHistPMESTimeStamp_Type = DateAndTime
_FcHistPMESTimeStamp_Object = MibTableColumn
fcHistPMESTimeStamp = _FcHistPMESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 25),
    _FcHistPMESTimeStamp_Type()
)
fcHistPMESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMESTimeStamp.setStatus("current")
_FcHistPMESValidity_Type = PMValidity
_FcHistPMESValidity_Object = MibTableColumn
fcHistPMESValidity = _FcHistPMESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 26),
    _FcHistPMESValidity_Type()
)
fcHistPMESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMESValidity.setStatus("current")
_FcHistPMSESValue_Type = Unsigned32
_FcHistPMSESValue_Object = MibTableColumn
fcHistPMSESValue = _FcHistPMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 27),
    _FcHistPMSESValue_Type()
)
fcHistPMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMSESValue.setStatus("current")
_FcHistPMSESTimeStamp_Type = DateAndTime
_FcHistPMSESTimeStamp_Object = MibTableColumn
fcHistPMSESTimeStamp = _FcHistPMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 28),
    _FcHistPMSESTimeStamp_Type()
)
fcHistPMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMSESTimeStamp.setStatus("current")
_FcHistPMSESValidity_Type = PMValidity
_FcHistPMSESValidity_Object = MibTableColumn
fcHistPMSESValidity = _FcHistPMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 29),
    _FcHistPMSESValidity_Type()
)
fcHistPMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMSESValidity.setStatus("current")
_FcHistPMCVInitialize_Type = InitializeCmd
_FcHistPMCVInitialize_Object = MibTableColumn
fcHistPMCVInitialize = _FcHistPMCVInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 30),
    _FcHistPMCVInitialize_Type()
)
fcHistPMCVInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMCVInitialize.setStatus("current")
_FcHistPMESInitialize_Type = InitializeCmd
_FcHistPMESInitialize_Object = MibTableColumn
fcHistPMESInitialize = _FcHistPMESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 31),
    _FcHistPMESInitialize_Type()
)
fcHistPMESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMESInitialize.setStatus("current")
_FcHistPMSESInitialize_Type = InitializeCmd
_FcHistPMSESInitialize_Object = MibTableColumn
fcHistPMSESInitialize = _FcHistPMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 32),
    _FcHistPMSESInitialize_Type()
)
fcHistPMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMSESInitialize.setStatus("current")
_FcHistPMUASValue_Type = Unsigned32
_FcHistPMUASValue_Object = MibTableColumn
fcHistPMUASValue = _FcHistPMUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 33),
    _FcHistPMUASValue_Type()
)
fcHistPMUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMUASValue.setStatus("current")
_FcHistPMUASTimeStamp_Type = DateAndTime
_FcHistPMUASTimeStamp_Object = MibTableColumn
fcHistPMUASTimeStamp = _FcHistPMUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 34),
    _FcHistPMUASTimeStamp_Type()
)
fcHistPMUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMUASTimeStamp.setStatus("current")
_FcHistPMUASValidity_Type = PMValidity
_FcHistPMUASValidity_Object = MibTableColumn
fcHistPMUASValidity = _FcHistPMUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 35),
    _FcHistPMUASValidity_Type()
)
fcHistPMUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMUASValidity.setStatus("current")
_FcHistPMUASInitialize_Type = InitializeCmd
_FcHistPMUASInitialize_Object = MibTableColumn
fcHistPMUASInitialize = _FcHistPMUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 36),
    _FcHistPMUASInitialize_Type()
)
fcHistPMUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMUASInitialize.setStatus("current")
_FcHistPMOPRMinValue_Type = FixedX10
_FcHistPMOPRMinValue_Object = MibTableColumn
fcHistPMOPRMinValue = _FcHistPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 37),
    _FcHistPMOPRMinValue_Type()
)
fcHistPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMOPRMinValue.setUnits("dBm/10")
_FcHistPMOPRMinTimeStamp_Type = DateAndTime
_FcHistPMOPRMinTimeStamp_Object = MibTableColumn
fcHistPMOPRMinTimeStamp = _FcHistPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 38),
    _FcHistPMOPRMinTimeStamp_Type()
)
fcHistPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRMinTimeStamp.setStatus("current")
_FcHistPMOPRMinValidity_Type = PMValidity
_FcHistPMOPRMinValidity_Object = MibTableColumn
fcHistPMOPRMinValidity = _FcHistPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 39),
    _FcHistPMOPRMinValidity_Type()
)
fcHistPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRMinValidity.setStatus("current")
_FcHistPMOPRMinInitialize_Type = InitializeCmd
_FcHistPMOPRMinInitialize_Object = MibTableColumn
fcHistPMOPRMinInitialize = _FcHistPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 40),
    _FcHistPMOPRMinInitialize_Type()
)
fcHistPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMOPRMinInitialize.setStatus("current")
_FcHistPMOPRMaxValue_Type = FixedX10
_FcHistPMOPRMaxValue_Object = MibTableColumn
fcHistPMOPRMaxValue = _FcHistPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 41),
    _FcHistPMOPRMaxValue_Type()
)
fcHistPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMOPRMaxValue.setUnits("dBm/10")
_FcHistPMOPRMaxTimeStamp_Type = DateAndTime
_FcHistPMOPRMaxTimeStamp_Object = MibTableColumn
fcHistPMOPRMaxTimeStamp = _FcHistPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 42),
    _FcHistPMOPRMaxTimeStamp_Type()
)
fcHistPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRMaxTimeStamp.setStatus("current")
_FcHistPMOPRMaxValidity_Type = PMValidity
_FcHistPMOPRMaxValidity_Object = MibTableColumn
fcHistPMOPRMaxValidity = _FcHistPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 43),
    _FcHistPMOPRMaxValidity_Type()
)
fcHistPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRMaxValidity.setStatus("current")
_FcHistPMOPRMaxInitialize_Type = InitializeCmd
_FcHistPMOPRMaxInitialize_Object = MibTableColumn
fcHistPMOPRMaxInitialize = _FcHistPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 44),
    _FcHistPMOPRMaxInitialize_Type()
)
fcHistPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMOPRMaxInitialize.setStatus("current")
_FcHistPMOPRAvgValue_Type = FixedX10
_FcHistPMOPRAvgValue_Object = MibTableColumn
fcHistPMOPRAvgValue = _FcHistPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 45),
    _FcHistPMOPRAvgValue_Type()
)
fcHistPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMOPRAvgValue.setUnits("dBm/10")
_FcHistPMOPRAvgTimeStamp_Type = DateAndTime
_FcHistPMOPRAvgTimeStamp_Object = MibTableColumn
fcHistPMOPRAvgTimeStamp = _FcHistPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 46),
    _FcHistPMOPRAvgTimeStamp_Type()
)
fcHistPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRAvgTimeStamp.setStatus("current")
_FcHistPMOPRAvgValidity_Type = PMValidity
_FcHistPMOPRAvgValidity_Object = MibTableColumn
fcHistPMOPRAvgValidity = _FcHistPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 47),
    _FcHistPMOPRAvgValidity_Type()
)
fcHistPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPRAvgValidity.setStatus("current")
_FcHistPMOPRAvgInitialize_Type = InitializeCmd
_FcHistPMOPRAvgInitialize_Object = MibTableColumn
fcHistPMOPRAvgInitialize = _FcHistPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 48),
    _FcHistPMOPRAvgInitialize_Type()
)
fcHistPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMOPRAvgInitialize.setStatus("current")
_FcHistPMOPTMinValue_Type = FixedX10
_FcHistPMOPTMinValue_Object = MibTableColumn
fcHistPMOPTMinValue = _FcHistPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 49),
    _FcHistPMOPTMinValue_Type()
)
fcHistPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMOPTMinValue.setUnits("dBm/10")
_FcHistPMOPTMinTimeStamp_Type = DateAndTime
_FcHistPMOPTMinTimeStamp_Object = MibTableColumn
fcHistPMOPTMinTimeStamp = _FcHistPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 50),
    _FcHistPMOPTMinTimeStamp_Type()
)
fcHistPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTMinTimeStamp.setStatus("current")
_FcHistPMOPTMinValidity_Type = PMValidity
_FcHistPMOPTMinValidity_Object = MibTableColumn
fcHistPMOPTMinValidity = _FcHistPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 51),
    _FcHistPMOPTMinValidity_Type()
)
fcHistPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTMinValidity.setStatus("current")
_FcHistPMOPTMinInitialize_Type = InitializeCmd
_FcHistPMOPTMinInitialize_Object = MibTableColumn
fcHistPMOPTMinInitialize = _FcHistPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 52),
    _FcHistPMOPTMinInitialize_Type()
)
fcHistPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMOPTMinInitialize.setStatus("current")
_FcHistPMOPTMaxValue_Type = FixedX10
_FcHistPMOPTMaxValue_Object = MibTableColumn
fcHistPMOPTMaxValue = _FcHistPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 53),
    _FcHistPMOPTMaxValue_Type()
)
fcHistPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMOPTMaxValue.setUnits("dBm/10")
_FcHistPMOPTMaxTimeStamp_Type = DateAndTime
_FcHistPMOPTMaxTimeStamp_Object = MibTableColumn
fcHistPMOPTMaxTimeStamp = _FcHistPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 54),
    _FcHistPMOPTMaxTimeStamp_Type()
)
fcHistPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTMaxTimeStamp.setStatus("current")
_FcHistPMOPTMaxValidity_Type = PMValidity
_FcHistPMOPTMaxValidity_Object = MibTableColumn
fcHistPMOPTMaxValidity = _FcHistPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 55),
    _FcHistPMOPTMaxValidity_Type()
)
fcHistPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTMaxValidity.setStatus("current")
_FcHistPMOPTMaxInitialize_Type = InitializeCmd
_FcHistPMOPTMaxInitialize_Object = MibTableColumn
fcHistPMOPTMaxInitialize = _FcHistPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 56),
    _FcHistPMOPTMaxInitialize_Type()
)
fcHistPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMOPTMaxInitialize.setStatus("current")
_FcHistPMOPTAvgValue_Type = FixedX10
_FcHistPMOPTAvgValue_Object = MibTableColumn
fcHistPMOPTAvgValue = _FcHistPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 57),
    _FcHistPMOPTAvgValue_Type()
)
fcHistPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    fcHistPMOPTAvgValue.setUnits("dBm/10")
_FcHistPMOPTAvgTimeStamp_Type = DateAndTime
_FcHistPMOPTAvgTimeStamp_Object = MibTableColumn
fcHistPMOPTAvgTimeStamp = _FcHistPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 58),
    _FcHistPMOPTAvgTimeStamp_Type()
)
fcHistPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTAvgTimeStamp.setStatus("current")
_FcHistPMOPTAvgValidity_Type = PMValidity
_FcHistPMOPTAvgValidity_Object = MibTableColumn
fcHistPMOPTAvgValidity = _FcHistPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 59),
    _FcHistPMOPTAvgValidity_Type()
)
fcHistPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcHistPMOPTAvgValidity.setStatus("current")
_FcHistPMOPTAvgInitialize_Type = InitializeCmd
_FcHistPMOPTAvgInitialize_Object = MibTableColumn
fcHistPMOPTAvgInitialize = _FcHistPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 60),
    _FcHistPMOPTAvgInitialize_Type()
)
fcHistPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcHistPMOPTAvgInitialize.setStatus("current")
_FcPMThresholdTable_Object = MibTable
fcPMThresholdTable = _FcPMThresholdTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25)
)
if mibBuilder.loadTexts:
    fcPMThresholdTable.setStatus("current")
_FcPMThresholdEntry_Object = MibTableRow
fcPMThresholdEntry = _FcPMThresholdEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1)
)
fcPMThresholdEntry.setIndexNames(
    (0, "BTI-7000-MIB", "fcPMThresholdShelfIdx"),
    (0, "BTI-7000-MIB", "fcPMThresholdSlotIdx"),
    (0, "BTI-7000-MIB", "fcPMThresholdPortIdx"),
    (0, "BTI-7000-MIB", "fcPMThresholdIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    fcPMThresholdEntry.setStatus("current")


class _FcPMThresholdShelfIdx_Type(Integer32):
    """Custom type fcPMThresholdShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_FcPMThresholdShelfIdx_Type.__name__ = "Integer32"
_FcPMThresholdShelfIdx_Object = MibTableColumn
fcPMThresholdShelfIdx = _FcPMThresholdShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 1),
    _FcPMThresholdShelfIdx_Type()
)
fcPMThresholdShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcPMThresholdShelfIdx.setStatus("current")


class _FcPMThresholdSlotIdx_Type(Integer32):
    """Custom type fcPMThresholdSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_FcPMThresholdSlotIdx_Type.__name__ = "Integer32"
_FcPMThresholdSlotIdx_Object = MibTableColumn
fcPMThresholdSlotIdx = _FcPMThresholdSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 2),
    _FcPMThresholdSlotIdx_Type()
)
fcPMThresholdSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcPMThresholdSlotIdx.setStatus("current")


class _FcPMThresholdPortIdx_Type(Integer32):
    """Custom type fcPMThresholdPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_FcPMThresholdPortIdx_Type.__name__ = "Integer32"
_FcPMThresholdPortIdx_Object = MibTableColumn
fcPMThresholdPortIdx = _FcPMThresholdPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 3),
    _FcPMThresholdPortIdx_Type()
)
fcPMThresholdPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcPMThresholdPortIdx.setStatus("current")
_FcPMThresholdIntervalTypeIdx_Type = PMIntervalType
_FcPMThresholdIntervalTypeIdx_Object = MibTableColumn
fcPMThresholdIntervalTypeIdx = _FcPMThresholdIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 4),
    _FcPMThresholdIntervalTypeIdx_Type()
)
fcPMThresholdIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcPMThresholdIntervalTypeIdx.setStatus("current")
_FcPMThresholdCVValue_Type = Unsigned32
_FcPMThresholdCVValue_Object = MibTableColumn
fcPMThresholdCVValue = _FcPMThresholdCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 5),
    _FcPMThresholdCVValue_Type()
)
fcPMThresholdCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcPMThresholdCVValue.setStatus("current")
_FcPMThresholdESValue_Type = Unsigned32
_FcPMThresholdESValue_Object = MibTableColumn
fcPMThresholdESValue = _FcPMThresholdESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 6),
    _FcPMThresholdESValue_Type()
)
fcPMThresholdESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcPMThresholdESValue.setStatus("current")
_FcPMThresholdSESValue_Type = Unsigned32
_FcPMThresholdSESValue_Object = MibTableColumn
fcPMThresholdSESValue = _FcPMThresholdSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 7),
    _FcPMThresholdSESValue_Type()
)
fcPMThresholdSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcPMThresholdSESValue.setStatus("current")
_FcPMThresholdUASValue_Type = Unsigned32
_FcPMThresholdUASValue_Object = MibTableColumn
fcPMThresholdUASValue = _FcPMThresholdUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 8),
    _FcPMThresholdUASValue_Type()
)
fcPMThresholdUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcPMThresholdUASValue.setStatus("current")
_EthL1IFCrntPMTable_Object = MibTable
ethL1IFCrntPMTable = _EthL1IFCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26)
)
if mibBuilder.loadTexts:
    ethL1IFCrntPMTable.setStatus("current")
_EthL1IFCrntPMEntry_Object = MibTableRow
ethL1IFCrntPMEntry = _EthL1IFCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1)
)
ethL1IFCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ethL1IFCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "ethL1IFCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "ethL1IFCrntPMPortTypeIdx"),
    (0, "BTI-7000-MIB", "ethL1IFCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "ethL1IFCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    ethL1IFCrntPMEntry.setStatus("current")


class _EthL1IFCrntPMShelfIdx_Type(Integer32):
    """Custom type ethL1IFCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_EthL1IFCrntPMShelfIdx_Type.__name__ = "Integer32"
_EthL1IFCrntPMShelfIdx_Object = MibTableColumn
ethL1IFCrntPMShelfIdx = _EthL1IFCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 1),
    _EthL1IFCrntPMShelfIdx_Type()
)
ethL1IFCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFCrntPMShelfIdx.setStatus("current")


class _EthL1IFCrntPMSlotIdx_Type(Integer32):
    """Custom type ethL1IFCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_EthL1IFCrntPMSlotIdx_Type.__name__ = "Integer32"
_EthL1IFCrntPMSlotIdx_Object = MibTableColumn
ethL1IFCrntPMSlotIdx = _EthL1IFCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 2),
    _EthL1IFCrntPMSlotIdx_Type()
)
ethL1IFCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSlotIdx.setStatus("current")
_EthL1IFCrntPMPortTypeIdx_Type = PvxL1PortType
_EthL1IFCrntPMPortTypeIdx_Object = MibTableColumn
ethL1IFCrntPMPortTypeIdx = _EthL1IFCrntPMPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 3),
    _EthL1IFCrntPMPortTypeIdx_Type()
)
ethL1IFCrntPMPortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFCrntPMPortTypeIdx.setStatus("current")


class _EthL1IFCrntPMPortIdx_Type(Integer32):
    """Custom type ethL1IFCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_EthL1IFCrntPMPortIdx_Type.__name__ = "Integer32"
_EthL1IFCrntPMPortIdx_Object = MibTableColumn
ethL1IFCrntPMPortIdx = _EthL1IFCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 4),
    _EthL1IFCrntPMPortIdx_Type()
)
ethL1IFCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFCrntPMPortIdx.setStatus("current")
_EthL1IFCrntPMIntervalTypeIdx_Type = PMIntervalType
_EthL1IFCrntPMIntervalTypeIdx_Object = MibTableColumn
ethL1IFCrntPMIntervalTypeIdx = _EthL1IFCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 5),
    _EthL1IFCrntPMIntervalTypeIdx_Type()
)
ethL1IFCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFCrntPMIntervalTypeIdx.setStatus("current")
_EthL1IFCrntPMOPRValue_Type = FixedX10
_EthL1IFCrntPMOPRValue_Object = MibTableColumn
ethL1IFCrntPMOPRValue = _EthL1IFCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 6),
    _EthL1IFCrntPMOPRValue_Type()
)
ethL1IFCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRValue.setUnits("dBm/10")
_EthL1IFCrntPMOPRTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOPRTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOPRTimeStamp = _EthL1IFCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 7),
    _EthL1IFCrntPMOPRTimeStamp_Type()
)
ethL1IFCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRTimeStamp.setStatus("current")
_EthL1IFCrntPMOPRValidity_Type = PMValidity
_EthL1IFCrntPMOPRValidity_Object = MibTableColumn
ethL1IFCrntPMOPRValidity = _EthL1IFCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 8),
    _EthL1IFCrntPMOPRValidity_Type()
)
ethL1IFCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRValidity.setStatus("current")
_EthL1IFCrntPMOPTValue_Type = FixedX10
_EthL1IFCrntPMOPTValue_Object = MibTableColumn
ethL1IFCrntPMOPTValue = _EthL1IFCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 9),
    _EthL1IFCrntPMOPTValue_Type()
)
ethL1IFCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTValue.setUnits("dBm/10")
_EthL1IFCrntPMOPTTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOPTTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOPTTimeStamp = _EthL1IFCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 10),
    _EthL1IFCrntPMOPTTimeStamp_Type()
)
ethL1IFCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTTimeStamp.setStatus("current")
_EthL1IFCrntPMOPTValidity_Type = PMValidity
_EthL1IFCrntPMOPTValidity_Object = MibTableColumn
ethL1IFCrntPMOPTValidity = _EthL1IFCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 11),
    _EthL1IFCrntPMOPTValidity_Type()
)
ethL1IFCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTValidity.setStatus("current")


class _EthL1IFCrntPMTempValue_Type(Integer32):
    """Custom type ethL1IFCrntPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_EthL1IFCrntPMTempValue_Type.__name__ = "Integer32"
_EthL1IFCrntPMTempValue_Object = MibTableColumn
ethL1IFCrntPMTempValue = _EthL1IFCrntPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 12),
    _EthL1IFCrntPMTempValue_Type()
)
ethL1IFCrntPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMTempValue.setUnits("degrees Celsius")
_EthL1IFCrntPMTempTimeStamp_Type = DateAndTime
_EthL1IFCrntPMTempTimeStamp_Object = MibTableColumn
ethL1IFCrntPMTempTimeStamp = _EthL1IFCrntPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 13),
    _EthL1IFCrntPMTempTimeStamp_Type()
)
ethL1IFCrntPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMTempTimeStamp.setStatus("current")
_EthL1IFCrntPMTempValidity_Type = PMValidity
_EthL1IFCrntPMTempValidity_Object = MibTableColumn
ethL1IFCrntPMTempValidity = _EthL1IFCrntPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 14),
    _EthL1IFCrntPMTempValidity_Type()
)
ethL1IFCrntPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMTempValidity.setStatus("current")
_EthL1IFCrntPMSupplyVoltageValue_Type = FixedX10
_EthL1IFCrntPMSupplyVoltageValue_Object = MibTableColumn
ethL1IFCrntPMSupplyVoltageValue = _EthL1IFCrntPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 15),
    _EthL1IFCrntPMSupplyVoltageValue_Type()
)
ethL1IFCrntPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSupplyVoltageValue.setUnits("mVolts/10")
_EthL1IFCrntPMSupplyVoltageTimeStamp_Type = DateAndTime
_EthL1IFCrntPMSupplyVoltageTimeStamp_Object = MibTableColumn
ethL1IFCrntPMSupplyVoltageTimeStamp = _EthL1IFCrntPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 16),
    _EthL1IFCrntPMSupplyVoltageTimeStamp_Type()
)
ethL1IFCrntPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSupplyVoltageTimeStamp.setStatus("current")
_EthL1IFCrntPMSupplyVoltageValidity_Type = PMValidity
_EthL1IFCrntPMSupplyVoltageValidity_Object = MibTableColumn
ethL1IFCrntPMSupplyVoltageValidity = _EthL1IFCrntPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 17),
    _EthL1IFCrntPMSupplyVoltageValidity_Type()
)
ethL1IFCrntPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSupplyVoltageValidity.setStatus("current")
_EthL1IFCrntPMSupplyVoltage2Value_Type = FixedX10
_EthL1IFCrntPMSupplyVoltage2Value_Object = MibTableColumn
ethL1IFCrntPMSupplyVoltage2Value = _EthL1IFCrntPMSupplyVoltage2Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 18),
    _EthL1IFCrntPMSupplyVoltage2Value_Type()
)
ethL1IFCrntPMSupplyVoltage2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSupplyVoltage2Value.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSupplyVoltage2Value.setUnits("mVolts/10")
_EthL1IFCrntPMSupplyVoltage2TimeStamp_Type = DateAndTime
_EthL1IFCrntPMSupplyVoltage2TimeStamp_Object = MibTableColumn
ethL1IFCrntPMSupplyVoltage2TimeStamp = _EthL1IFCrntPMSupplyVoltage2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 19),
    _EthL1IFCrntPMSupplyVoltage2TimeStamp_Type()
)
ethL1IFCrntPMSupplyVoltage2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSupplyVoltage2TimeStamp.setStatus("current")
_EthL1IFCrntPMSupplyVoltage2Validity_Type = PMValidity
_EthL1IFCrntPMSupplyVoltage2Validity_Object = MibTableColumn
ethL1IFCrntPMSupplyVoltage2Validity = _EthL1IFCrntPMSupplyVoltage2Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 20),
    _EthL1IFCrntPMSupplyVoltage2Validity_Type()
)
ethL1IFCrntPMSupplyVoltage2Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSupplyVoltage2Validity.setStatus("current")


class _EthL1IFCrntPMLBCValue_Type(Integer32):
    """Custom type ethL1IFCrntPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_EthL1IFCrntPMLBCValue_Type.__name__ = "Integer32"
_EthL1IFCrntPMLBCValue_Object = MibTableColumn
ethL1IFCrntPMLBCValue = _EthL1IFCrntPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 21),
    _EthL1IFCrntPMLBCValue_Type()
)
ethL1IFCrntPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMLBCValue.setUnits("mAmp")
_EthL1IFCrntPMLBCTimeStamp_Type = DateAndTime
_EthL1IFCrntPMLBCTimeStamp_Object = MibTableColumn
ethL1IFCrntPMLBCTimeStamp = _EthL1IFCrntPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 22),
    _EthL1IFCrntPMLBCTimeStamp_Type()
)
ethL1IFCrntPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMLBCTimeStamp.setStatus("current")
_EthL1IFCrntPMLBCValidity_Type = PMValidity
_EthL1IFCrntPMLBCValidity_Object = MibTableColumn
ethL1IFCrntPMLBCValidity = _EthL1IFCrntPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 23),
    _EthL1IFCrntPMLBCValidity_Type()
)
ethL1IFCrntPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMLBCValidity.setStatus("current")
_EthL1IFCrntPMCVValue_Type = Unsigned32
_EthL1IFCrntPMCVValue_Object = MibTableColumn
ethL1IFCrntPMCVValue = _EthL1IFCrntPMCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 24),
    _EthL1IFCrntPMCVValue_Type()
)
ethL1IFCrntPMCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMCVValue.setStatus("current")
_EthL1IFCrntPMCVTimeStamp_Type = DateAndTime
_EthL1IFCrntPMCVTimeStamp_Object = MibTableColumn
ethL1IFCrntPMCVTimeStamp = _EthL1IFCrntPMCVTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 25),
    _EthL1IFCrntPMCVTimeStamp_Type()
)
ethL1IFCrntPMCVTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMCVTimeStamp.setStatus("current")
_EthL1IFCrntPMCVValidity_Type = PMValidity
_EthL1IFCrntPMCVValidity_Object = MibTableColumn
ethL1IFCrntPMCVValidity = _EthL1IFCrntPMCVValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 26),
    _EthL1IFCrntPMCVValidity_Type()
)
ethL1IFCrntPMCVValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMCVValidity.setStatus("current")
_EthL1IFCrntPMCVInitialize_Type = InitializeCmd
_EthL1IFCrntPMCVInitialize_Object = MibTableColumn
ethL1IFCrntPMCVInitialize = _EthL1IFCrntPMCVInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 27),
    _EthL1IFCrntPMCVInitialize_Type()
)
ethL1IFCrntPMCVInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMCVInitialize.setStatus("current")
_EthL1IFCrntPMINVBLKValue_Type = Unsigned32
_EthL1IFCrntPMINVBLKValue_Object = MibTableColumn
ethL1IFCrntPMINVBLKValue = _EthL1IFCrntPMINVBLKValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 28),
    _EthL1IFCrntPMINVBLKValue_Type()
)
ethL1IFCrntPMINVBLKValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMINVBLKValue.setStatus("current")
_EthL1IFCrntPMINVBLKTimeStamp_Type = DateAndTime
_EthL1IFCrntPMINVBLKTimeStamp_Object = MibTableColumn
ethL1IFCrntPMINVBLKTimeStamp = _EthL1IFCrntPMINVBLKTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 29),
    _EthL1IFCrntPMINVBLKTimeStamp_Type()
)
ethL1IFCrntPMINVBLKTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMINVBLKTimeStamp.setStatus("current")
_EthL1IFCrntPMINVBLKValidity_Type = PMValidity
_EthL1IFCrntPMINVBLKValidity_Object = MibTableColumn
ethL1IFCrntPMINVBLKValidity = _EthL1IFCrntPMINVBLKValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 30),
    _EthL1IFCrntPMINVBLKValidity_Type()
)
ethL1IFCrntPMINVBLKValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMINVBLKValidity.setStatus("current")
_EthL1IFCrntPMINVBLKInitialize_Type = InitializeCmd
_EthL1IFCrntPMINVBLKInitialize_Object = MibTableColumn
ethL1IFCrntPMINVBLKInitialize = _EthL1IFCrntPMINVBLKInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 31),
    _EthL1IFCrntPMINVBLKInitialize_Type()
)
ethL1IFCrntPMINVBLKInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMINVBLKInitialize.setStatus("current")
_EthL1IFCrntPMESValue_Type = Unsigned32
_EthL1IFCrntPMESValue_Object = MibTableColumn
ethL1IFCrntPMESValue = _EthL1IFCrntPMESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 32),
    _EthL1IFCrntPMESValue_Type()
)
ethL1IFCrntPMESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMESValue.setStatus("current")
_EthL1IFCrntPMESTimeStamp_Type = DateAndTime
_EthL1IFCrntPMESTimeStamp_Object = MibTableColumn
ethL1IFCrntPMESTimeStamp = _EthL1IFCrntPMESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 33),
    _EthL1IFCrntPMESTimeStamp_Type()
)
ethL1IFCrntPMESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMESTimeStamp.setStatus("current")
_EthL1IFCrntPMESValidity_Type = PMValidity
_EthL1IFCrntPMESValidity_Object = MibTableColumn
ethL1IFCrntPMESValidity = _EthL1IFCrntPMESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 34),
    _EthL1IFCrntPMESValidity_Type()
)
ethL1IFCrntPMESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMESValidity.setStatus("current")
_EthL1IFCrntPMESInitialize_Type = InitializeCmd
_EthL1IFCrntPMESInitialize_Object = MibTableColumn
ethL1IFCrntPMESInitialize = _EthL1IFCrntPMESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 35),
    _EthL1IFCrntPMESInitialize_Type()
)
ethL1IFCrntPMESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMESInitialize.setStatus("current")
_EthL1IFCrntPMSESValue_Type = Unsigned32
_EthL1IFCrntPMSESValue_Object = MibTableColumn
ethL1IFCrntPMSESValue = _EthL1IFCrntPMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 36),
    _EthL1IFCrntPMSESValue_Type()
)
ethL1IFCrntPMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSESValue.setStatus("current")
_EthL1IFCrntPMSESTimeStamp_Type = DateAndTime
_EthL1IFCrntPMSESTimeStamp_Object = MibTableColumn
ethL1IFCrntPMSESTimeStamp = _EthL1IFCrntPMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 37),
    _EthL1IFCrntPMSESTimeStamp_Type()
)
ethL1IFCrntPMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSESTimeStamp.setStatus("current")
_EthL1IFCrntPMSESValidity_Type = PMValidity
_EthL1IFCrntPMSESValidity_Object = MibTableColumn
ethL1IFCrntPMSESValidity = _EthL1IFCrntPMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 38),
    _EthL1IFCrntPMSESValidity_Type()
)
ethL1IFCrntPMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSESValidity.setStatus("current")
_EthL1IFCrntPMSESInitialize_Type = InitializeCmd
_EthL1IFCrntPMSESInitialize_Object = MibTableColumn
ethL1IFCrntPMSESInitialize = _EthL1IFCrntPMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 39),
    _EthL1IFCrntPMSESInitialize_Type()
)
ethL1IFCrntPMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMSESInitialize.setStatus("current")
_EthL1IFCrntPMOTUEBValue_Type = Unsigned32
_EthL1IFCrntPMOTUEBValue_Object = MibTableColumn
ethL1IFCrntPMOTUEBValue = _EthL1IFCrntPMOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 40),
    _EthL1IFCrntPMOTUEBValue_Type()
)
ethL1IFCrntPMOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUEBValue.setStatus("current")
_EthL1IFCrntPMOTUEBTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOTUEBTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOTUEBTimeStamp = _EthL1IFCrntPMOTUEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 41),
    _EthL1IFCrntPMOTUEBTimeStamp_Type()
)
ethL1IFCrntPMOTUEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUEBTimeStamp.setStatus("current")
_EthL1IFCrntPMOTUEBValidity_Type = PMValidity
_EthL1IFCrntPMOTUEBValidity_Object = MibTableColumn
ethL1IFCrntPMOTUEBValidity = _EthL1IFCrntPMOTUEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 42),
    _EthL1IFCrntPMOTUEBValidity_Type()
)
ethL1IFCrntPMOTUEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUEBValidity.setStatus("current")
_EthL1IFCrntPMOTUEBInitialize_Type = InitializeCmd
_EthL1IFCrntPMOTUEBInitialize_Object = MibTableColumn
ethL1IFCrntPMOTUEBInitialize = _EthL1IFCrntPMOTUEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 43),
    _EthL1IFCrntPMOTUEBInitialize_Type()
)
ethL1IFCrntPMOTUEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUEBInitialize.setStatus("current")
_EthL1IFCrntPMOTUBBEValue_Type = Unsigned32
_EthL1IFCrntPMOTUBBEValue_Object = MibTableColumn
ethL1IFCrntPMOTUBBEValue = _EthL1IFCrntPMOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 44),
    _EthL1IFCrntPMOTUBBEValue_Type()
)
ethL1IFCrntPMOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUBBEValue.setStatus("current")
_EthL1IFCrntPMOTUBBETimeStamp_Type = DateAndTime
_EthL1IFCrntPMOTUBBETimeStamp_Object = MibTableColumn
ethL1IFCrntPMOTUBBETimeStamp = _EthL1IFCrntPMOTUBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 45),
    _EthL1IFCrntPMOTUBBETimeStamp_Type()
)
ethL1IFCrntPMOTUBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUBBETimeStamp.setStatus("current")
_EthL1IFCrntPMOTUBBEValidity_Type = PMValidity
_EthL1IFCrntPMOTUBBEValidity_Object = MibTableColumn
ethL1IFCrntPMOTUBBEValidity = _EthL1IFCrntPMOTUBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 46),
    _EthL1IFCrntPMOTUBBEValidity_Type()
)
ethL1IFCrntPMOTUBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUBBEValidity.setStatus("current")
_EthL1IFCrntPMOTUBBEInitialize_Type = InitializeCmd
_EthL1IFCrntPMOTUBBEInitialize_Object = MibTableColumn
ethL1IFCrntPMOTUBBEInitialize = _EthL1IFCrntPMOTUBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 47),
    _EthL1IFCrntPMOTUBBEInitialize_Type()
)
ethL1IFCrntPMOTUBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUBBEInitialize.setStatus("current")
_EthL1IFCrntPMOTUESValue_Type = Unsigned32
_EthL1IFCrntPMOTUESValue_Object = MibTableColumn
ethL1IFCrntPMOTUESValue = _EthL1IFCrntPMOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 48),
    _EthL1IFCrntPMOTUESValue_Type()
)
ethL1IFCrntPMOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUESValue.setStatus("current")
_EthL1IFCrntPMOTUESTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOTUESTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOTUESTimeStamp = _EthL1IFCrntPMOTUESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 49),
    _EthL1IFCrntPMOTUESTimeStamp_Type()
)
ethL1IFCrntPMOTUESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUESTimeStamp.setStatus("current")
_EthL1IFCrntPMOTUESValidity_Type = PMValidity
_EthL1IFCrntPMOTUESValidity_Object = MibTableColumn
ethL1IFCrntPMOTUESValidity = _EthL1IFCrntPMOTUESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 50),
    _EthL1IFCrntPMOTUESValidity_Type()
)
ethL1IFCrntPMOTUESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUESValidity.setStatus("current")
_EthL1IFCrntPMOTUESInitialize_Type = InitializeCmd
_EthL1IFCrntPMOTUESInitialize_Object = MibTableColumn
ethL1IFCrntPMOTUESInitialize = _EthL1IFCrntPMOTUESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 51),
    _EthL1IFCrntPMOTUESInitialize_Type()
)
ethL1IFCrntPMOTUESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUESInitialize.setStatus("current")
_EthL1IFCrntPMOTUSESValue_Type = Unsigned32
_EthL1IFCrntPMOTUSESValue_Object = MibTableColumn
ethL1IFCrntPMOTUSESValue = _EthL1IFCrntPMOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 52),
    _EthL1IFCrntPMOTUSESValue_Type()
)
ethL1IFCrntPMOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUSESValue.setStatus("current")
_EthL1IFCrntPMOTUSESTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOTUSESTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOTUSESTimeStamp = _EthL1IFCrntPMOTUSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 53),
    _EthL1IFCrntPMOTUSESTimeStamp_Type()
)
ethL1IFCrntPMOTUSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUSESTimeStamp.setStatus("current")
_EthL1IFCrntPMOTUSESValidity_Type = PMValidity
_EthL1IFCrntPMOTUSESValidity_Object = MibTableColumn
ethL1IFCrntPMOTUSESValidity = _EthL1IFCrntPMOTUSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 54),
    _EthL1IFCrntPMOTUSESValidity_Type()
)
ethL1IFCrntPMOTUSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUSESValidity.setStatus("current")
_EthL1IFCrntPMOTUSESInitialize_Type = InitializeCmd
_EthL1IFCrntPMOTUSESInitialize_Object = MibTableColumn
ethL1IFCrntPMOTUSESInitialize = _EthL1IFCrntPMOTUSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 55),
    _EthL1IFCrntPMOTUSESInitialize_Type()
)
ethL1IFCrntPMOTUSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUSESInitialize.setStatus("current")
_EthL1IFCrntPMOTUOFSValue_Type = Unsigned32
_EthL1IFCrntPMOTUOFSValue_Object = MibTableColumn
ethL1IFCrntPMOTUOFSValue = _EthL1IFCrntPMOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 56),
    _EthL1IFCrntPMOTUOFSValue_Type()
)
ethL1IFCrntPMOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUOFSValue.setStatus("current")
_EthL1IFCrntPMOTUOFSTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOTUOFSTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOTUOFSTimeStamp = _EthL1IFCrntPMOTUOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 57),
    _EthL1IFCrntPMOTUOFSTimeStamp_Type()
)
ethL1IFCrntPMOTUOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUOFSTimeStamp.setStatus("current")
_EthL1IFCrntPMOTUOFSValidity_Type = PMValidity
_EthL1IFCrntPMOTUOFSValidity_Object = MibTableColumn
ethL1IFCrntPMOTUOFSValidity = _EthL1IFCrntPMOTUOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 58),
    _EthL1IFCrntPMOTUOFSValidity_Type()
)
ethL1IFCrntPMOTUOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUOFSValidity.setStatus("current")
_EthL1IFCrntPMOTUOFSInitialize_Type = InitializeCmd
_EthL1IFCrntPMOTUOFSInitialize_Object = MibTableColumn
ethL1IFCrntPMOTUOFSInitialize = _EthL1IFCrntPMOTUOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 59),
    _EthL1IFCrntPMOTUOFSInitialize_Type()
)
ethL1IFCrntPMOTUOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUOFSInitialize.setStatus("current")
_EthL1IFCrntPMNBITCRValue_Type = Unsigned32
_EthL1IFCrntPMNBITCRValue_Object = MibTableColumn
ethL1IFCrntPMNBITCRValue = _EthL1IFCrntPMNBITCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 60),
    _EthL1IFCrntPMNBITCRValue_Type()
)
ethL1IFCrntPMNBITCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBITCRValue.setStatus("current")
_EthL1IFCrntPMNBITCRTimeStamp_Type = DateAndTime
_EthL1IFCrntPMNBITCRTimeStamp_Object = MibTableColumn
ethL1IFCrntPMNBITCRTimeStamp = _EthL1IFCrntPMNBITCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 61),
    _EthL1IFCrntPMNBITCRTimeStamp_Type()
)
ethL1IFCrntPMNBITCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBITCRTimeStamp.setStatus("current")
_EthL1IFCrntPMNBITCRValidity_Type = PMValidity
_EthL1IFCrntPMNBITCRValidity_Object = MibTableColumn
ethL1IFCrntPMNBITCRValidity = _EthL1IFCrntPMNBITCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 62),
    _EthL1IFCrntPMNBITCRValidity_Type()
)
ethL1IFCrntPMNBITCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBITCRValidity.setStatus("current")
_EthL1IFCrntPMNBITCRInitialize_Type = InitializeCmd
_EthL1IFCrntPMNBITCRInitialize_Object = MibTableColumn
ethL1IFCrntPMNBITCRInitialize = _EthL1IFCrntPMNBITCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 63),
    _EthL1IFCrntPMNBITCRInitialize_Type()
)
ethL1IFCrntPMNBITCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBITCRInitialize.setStatus("current")
_EthL1IFCrntPMNBYTCRValue_Type = Unsigned32
_EthL1IFCrntPMNBYTCRValue_Object = MibTableColumn
ethL1IFCrntPMNBYTCRValue = _EthL1IFCrntPMNBYTCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 64),
    _EthL1IFCrntPMNBYTCRValue_Type()
)
ethL1IFCrntPMNBYTCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBYTCRValue.setStatus("current")
_EthL1IFCrntPMNBYTCRTimeStamp_Type = DateAndTime
_EthL1IFCrntPMNBYTCRTimeStamp_Object = MibTableColumn
ethL1IFCrntPMNBYTCRTimeStamp = _EthL1IFCrntPMNBYTCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 65),
    _EthL1IFCrntPMNBYTCRTimeStamp_Type()
)
ethL1IFCrntPMNBYTCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBYTCRTimeStamp.setStatus("current")
_EthL1IFCrntPMNBYTCRValidity_Type = PMValidity
_EthL1IFCrntPMNBYTCRValidity_Object = MibTableColumn
ethL1IFCrntPMNBYTCRValidity = _EthL1IFCrntPMNBYTCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 66),
    _EthL1IFCrntPMNBYTCRValidity_Type()
)
ethL1IFCrntPMNBYTCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBYTCRValidity.setStatus("current")
_EthL1IFCrntPMNBYTCRInitialize_Type = InitializeCmd
_EthL1IFCrntPMNBYTCRInitialize_Object = MibTableColumn
ethL1IFCrntPMNBYTCRInitialize = _EthL1IFCrntPMNBYTCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 67),
    _EthL1IFCrntPMNBYTCRInitialize_Type()
)
ethL1IFCrntPMNBYTCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBYTCRInitialize.setStatus("current")
_EthL1IFCrntPMUNCRCDWValue_Type = Unsigned32
_EthL1IFCrntPMUNCRCDWValue_Object = MibTableColumn
ethL1IFCrntPMUNCRCDWValue = _EthL1IFCrntPMUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 68),
    _EthL1IFCrntPMUNCRCDWValue_Type()
)
ethL1IFCrntPMUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMUNCRCDWValue.setStatus("current")
_EthL1IFCrntPMUNCRCDWTimeStamp_Type = DateAndTime
_EthL1IFCrntPMUNCRCDWTimeStamp_Object = MibTableColumn
ethL1IFCrntPMUNCRCDWTimeStamp = _EthL1IFCrntPMUNCRCDWTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 69),
    _EthL1IFCrntPMUNCRCDWTimeStamp_Type()
)
ethL1IFCrntPMUNCRCDWTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMUNCRCDWTimeStamp.setStatus("current")
_EthL1IFCrntPMUNCRCDWValidity_Type = PMValidity
_EthL1IFCrntPMUNCRCDWValidity_Object = MibTableColumn
ethL1IFCrntPMUNCRCDWValidity = _EthL1IFCrntPMUNCRCDWValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 70),
    _EthL1IFCrntPMUNCRCDWValidity_Type()
)
ethL1IFCrntPMUNCRCDWValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMUNCRCDWValidity.setStatus("current")
_EthL1IFCrntPMUNCRCDWInitialize_Type = InitializeCmd
_EthL1IFCrntPMUNCRCDWInitialize_Object = MibTableColumn
ethL1IFCrntPMUNCRCDWInitialize = _EthL1IFCrntPMUNCRCDWInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 71),
    _EthL1IFCrntPMUNCRCDWInitialize_Type()
)
ethL1IFCrntPMUNCRCDWInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMUNCRCDWInitialize.setStatus("current")
_EthL1IFCrntPMOTNBERValue_Type = DisplayString
_EthL1IFCrntPMOTNBERValue_Object = MibTableColumn
ethL1IFCrntPMOTNBERValue = _EthL1IFCrntPMOTNBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 72),
    _EthL1IFCrntPMOTNBERValue_Type()
)
ethL1IFCrntPMOTNBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTNBERValue.setStatus("current")
_EthL1IFCrntPMOTNBERTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOTNBERTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOTNBERTimeStamp = _EthL1IFCrntPMOTNBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 73),
    _EthL1IFCrntPMOTNBERTimeStamp_Type()
)
ethL1IFCrntPMOTNBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTNBERTimeStamp.setStatus("current")
_EthL1IFCrntPMOTNBERValidity_Type = PMValidity
_EthL1IFCrntPMOTNBERValidity_Object = MibTableColumn
ethL1IFCrntPMOTNBERValidity = _EthL1IFCrntPMOTNBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 74),
    _EthL1IFCrntPMOTNBERValidity_Type()
)
ethL1IFCrntPMOTNBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTNBERValidity.setStatus("current")
_EthL1IFCrntPMOTNBERInitialize_Type = InitializeCmd
_EthL1IFCrntPMOTNBERInitialize_Object = MibTableColumn
ethL1IFCrntPMOTNBERInitialize = _EthL1IFCrntPMOTNBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 75),
    _EthL1IFCrntPMOTNBERInitialize_Type()
)
ethL1IFCrntPMOTNBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTNBERInitialize.setStatus("current")
_EthL1IFCrntPMOTNAVGBERValue_Type = DisplayString
_EthL1IFCrntPMOTNAVGBERValue_Object = MibTableColumn
ethL1IFCrntPMOTNAVGBERValue = _EthL1IFCrntPMOTNAVGBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 76),
    _EthL1IFCrntPMOTNAVGBERValue_Type()
)
ethL1IFCrntPMOTNAVGBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTNAVGBERValue.setStatus("current")
_EthL1IFCrntPMOTNAVGBERTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOTNAVGBERTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOTNAVGBERTimeStamp = _EthL1IFCrntPMOTNAVGBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 77),
    _EthL1IFCrntPMOTNAVGBERTimeStamp_Type()
)
ethL1IFCrntPMOTNAVGBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTNAVGBERTimeStamp.setStatus("current")
_EthL1IFCrntPMOTNAVGBERValidity_Type = PMValidity
_EthL1IFCrntPMOTNAVGBERValidity_Object = MibTableColumn
ethL1IFCrntPMOTNAVGBERValidity = _EthL1IFCrntPMOTNAVGBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 78),
    _EthL1IFCrntPMOTNAVGBERValidity_Type()
)
ethL1IFCrntPMOTNAVGBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTNAVGBERValidity.setStatus("current")
_EthL1IFCrntPMOTNAVGBERInitialize_Type = InitializeCmd
_EthL1IFCrntPMOTNAVGBERInitialize_Object = MibTableColumn
ethL1IFCrntPMOTNAVGBERInitialize = _EthL1IFCrntPMOTNAVGBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 79),
    _EthL1IFCrntPMOTNAVGBERInitialize_Type()
)
ethL1IFCrntPMOTNAVGBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTNAVGBERInitialize.setStatus("current")
_EthL1IFCrntPMNBITCR64BitValue_Type = Unsigned64
_EthL1IFCrntPMNBITCR64BitValue_Object = MibTableColumn
ethL1IFCrntPMNBITCR64BitValue = _EthL1IFCrntPMNBITCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 80),
    _EthL1IFCrntPMNBITCR64BitValue_Type()
)
ethL1IFCrntPMNBITCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBITCR64BitValue.setStatus("current")
_EthL1IFCrntPMNBITCR64BitTimeStamp_Type = DateAndTime
_EthL1IFCrntPMNBITCR64BitTimeStamp_Object = MibTableColumn
ethL1IFCrntPMNBITCR64BitTimeStamp = _EthL1IFCrntPMNBITCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 81),
    _EthL1IFCrntPMNBITCR64BitTimeStamp_Type()
)
ethL1IFCrntPMNBITCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBITCR64BitTimeStamp.setStatus("current")
_EthL1IFCrntPMNBITCR64BitValidity_Type = PMValidity
_EthL1IFCrntPMNBITCR64BitValidity_Object = MibTableColumn
ethL1IFCrntPMNBITCR64BitValidity = _EthL1IFCrntPMNBITCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 82),
    _EthL1IFCrntPMNBITCR64BitValidity_Type()
)
ethL1IFCrntPMNBITCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBITCR64BitValidity.setStatus("current")
_EthL1IFCrntPMNBITCR64BitInitialize_Type = InitializeCmd
_EthL1IFCrntPMNBITCR64BitInitialize_Object = MibTableColumn
ethL1IFCrntPMNBITCR64BitInitialize = _EthL1IFCrntPMNBITCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 83),
    _EthL1IFCrntPMNBITCR64BitInitialize_Type()
)
ethL1IFCrntPMNBITCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBITCR64BitInitialize.setStatus("current")
_EthL1IFCrntPMNBYTCR64BitValue_Type = Unsigned64
_EthL1IFCrntPMNBYTCR64BitValue_Object = MibTableColumn
ethL1IFCrntPMNBYTCR64BitValue = _EthL1IFCrntPMNBYTCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 84),
    _EthL1IFCrntPMNBYTCR64BitValue_Type()
)
ethL1IFCrntPMNBYTCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBYTCR64BitValue.setStatus("current")
_EthL1IFCrntPMNBYTCR64BitTimeStamp_Type = DateAndTime
_EthL1IFCrntPMNBYTCR64BitTimeStamp_Object = MibTableColumn
ethL1IFCrntPMNBYTCR64BitTimeStamp = _EthL1IFCrntPMNBYTCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 85),
    _EthL1IFCrntPMNBYTCR64BitTimeStamp_Type()
)
ethL1IFCrntPMNBYTCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBYTCR64BitTimeStamp.setStatus("current")
_EthL1IFCrntPMNBYTCR64BitValidity_Type = PMValidity
_EthL1IFCrntPMNBYTCR64BitValidity_Object = MibTableColumn
ethL1IFCrntPMNBYTCR64BitValidity = _EthL1IFCrntPMNBYTCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 86),
    _EthL1IFCrntPMNBYTCR64BitValidity_Type()
)
ethL1IFCrntPMNBYTCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBYTCR64BitValidity.setStatus("current")
_EthL1IFCrntPMNBYTCR64BitInitialize_Type = InitializeCmd
_EthL1IFCrntPMNBYTCR64BitInitialize_Object = MibTableColumn
ethL1IFCrntPMNBYTCR64BitInitialize = _EthL1IFCrntPMNBYTCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 87),
    _EthL1IFCrntPMNBYTCR64BitInitialize_Type()
)
ethL1IFCrntPMNBYTCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMNBYTCR64BitInitialize.setStatus("current")
_EthL1IFCrntPMUASValue_Type = Unsigned32
_EthL1IFCrntPMUASValue_Object = MibTableColumn
ethL1IFCrntPMUASValue = _EthL1IFCrntPMUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 88),
    _EthL1IFCrntPMUASValue_Type()
)
ethL1IFCrntPMUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMUASValue.setStatus("current")
_EthL1IFCrntPMUASTimeStamp_Type = DateAndTime
_EthL1IFCrntPMUASTimeStamp_Object = MibTableColumn
ethL1IFCrntPMUASTimeStamp = _EthL1IFCrntPMUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 89),
    _EthL1IFCrntPMUASTimeStamp_Type()
)
ethL1IFCrntPMUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMUASTimeStamp.setStatus("current")
_EthL1IFCrntPMUASValidity_Type = PMValidity
_EthL1IFCrntPMUASValidity_Object = MibTableColumn
ethL1IFCrntPMUASValidity = _EthL1IFCrntPMUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 90),
    _EthL1IFCrntPMUASValidity_Type()
)
ethL1IFCrntPMUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMUASValidity.setStatus("current")
_EthL1IFCrntPMUASInitialize_Type = InitializeCmd
_EthL1IFCrntPMUASInitialize_Object = MibTableColumn
ethL1IFCrntPMUASInitialize = _EthL1IFCrntPMUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 91),
    _EthL1IFCrntPMUASInitialize_Type()
)
ethL1IFCrntPMUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMUASInitialize.setStatus("current")
_EthL1IFCrntPMOTUUASValue_Type = Unsigned32
_EthL1IFCrntPMOTUUASValue_Object = MibTableColumn
ethL1IFCrntPMOTUUASValue = _EthL1IFCrntPMOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 92),
    _EthL1IFCrntPMOTUUASValue_Type()
)
ethL1IFCrntPMOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUUASValue.setStatus("current")
_EthL1IFCrntPMOTUUASTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOTUUASTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOTUUASTimeStamp = _EthL1IFCrntPMOTUUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 93),
    _EthL1IFCrntPMOTUUASTimeStamp_Type()
)
ethL1IFCrntPMOTUUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUUASTimeStamp.setStatus("current")
_EthL1IFCrntPMOTUUASValidity_Type = PMValidity
_EthL1IFCrntPMOTUUASValidity_Object = MibTableColumn
ethL1IFCrntPMOTUUASValidity = _EthL1IFCrntPMOTUUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 94),
    _EthL1IFCrntPMOTUUASValidity_Type()
)
ethL1IFCrntPMOTUUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUUASValidity.setStatus("current")
_EthL1IFCrntPMOTUUASInitialize_Type = InitializeCmd
_EthL1IFCrntPMOTUUASInitialize_Object = MibTableColumn
ethL1IFCrntPMOTUUASInitialize = _EthL1IFCrntPMOTUUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 95),
    _EthL1IFCrntPMOTUUASInitialize_Type()
)
ethL1IFCrntPMOTUUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOTUUASInitialize.setStatus("current")
_EthL1IFCrntPMOPRMinValue_Type = FixedX10
_EthL1IFCrntPMOPRMinValue_Object = MibTableColumn
ethL1IFCrntPMOPRMinValue = _EthL1IFCrntPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 96),
    _EthL1IFCrntPMOPRMinValue_Type()
)
ethL1IFCrntPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMinValue.setUnits("dBm/10")
_EthL1IFCrntPMOPRMinTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOPRMinTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOPRMinTimeStamp = _EthL1IFCrntPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 97),
    _EthL1IFCrntPMOPRMinTimeStamp_Type()
)
ethL1IFCrntPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMinTimeStamp.setStatus("current")
_EthL1IFCrntPMOPRMinValidity_Type = PMValidity
_EthL1IFCrntPMOPRMinValidity_Object = MibTableColumn
ethL1IFCrntPMOPRMinValidity = _EthL1IFCrntPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 98),
    _EthL1IFCrntPMOPRMinValidity_Type()
)
ethL1IFCrntPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMinValidity.setStatus("current")
_EthL1IFCrntPMOPRMinInitialize_Type = InitializeCmd
_EthL1IFCrntPMOPRMinInitialize_Object = MibTableColumn
ethL1IFCrntPMOPRMinInitialize = _EthL1IFCrntPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 99),
    _EthL1IFCrntPMOPRMinInitialize_Type()
)
ethL1IFCrntPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMinInitialize.setStatus("current")
_EthL1IFCrntPMOPRMaxValue_Type = FixedX10
_EthL1IFCrntPMOPRMaxValue_Object = MibTableColumn
ethL1IFCrntPMOPRMaxValue = _EthL1IFCrntPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 100),
    _EthL1IFCrntPMOPRMaxValue_Type()
)
ethL1IFCrntPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMaxValue.setUnits("dBm/10")
_EthL1IFCrntPMOPRMaxTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOPRMaxTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOPRMaxTimeStamp = _EthL1IFCrntPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 101),
    _EthL1IFCrntPMOPRMaxTimeStamp_Type()
)
ethL1IFCrntPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMaxTimeStamp.setStatus("current")
_EthL1IFCrntPMOPRMaxValidity_Type = PMValidity
_EthL1IFCrntPMOPRMaxValidity_Object = MibTableColumn
ethL1IFCrntPMOPRMaxValidity = _EthL1IFCrntPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 102),
    _EthL1IFCrntPMOPRMaxValidity_Type()
)
ethL1IFCrntPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMaxValidity.setStatus("current")
_EthL1IFCrntPMOPRMaxInitialize_Type = InitializeCmd
_EthL1IFCrntPMOPRMaxInitialize_Object = MibTableColumn
ethL1IFCrntPMOPRMaxInitialize = _EthL1IFCrntPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 103),
    _EthL1IFCrntPMOPRMaxInitialize_Type()
)
ethL1IFCrntPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRMaxInitialize.setStatus("current")
_EthL1IFCrntPMOPRAvgValue_Type = FixedX10
_EthL1IFCrntPMOPRAvgValue_Object = MibTableColumn
ethL1IFCrntPMOPRAvgValue = _EthL1IFCrntPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 104),
    _EthL1IFCrntPMOPRAvgValue_Type()
)
ethL1IFCrntPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRAvgValue.setUnits("dBm/10")
_EthL1IFCrntPMOPRAvgTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOPRAvgTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOPRAvgTimeStamp = _EthL1IFCrntPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 105),
    _EthL1IFCrntPMOPRAvgTimeStamp_Type()
)
ethL1IFCrntPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRAvgTimeStamp.setStatus("current")
_EthL1IFCrntPMOPRAvgValidity_Type = PMValidity
_EthL1IFCrntPMOPRAvgValidity_Object = MibTableColumn
ethL1IFCrntPMOPRAvgValidity = _EthL1IFCrntPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 106),
    _EthL1IFCrntPMOPRAvgValidity_Type()
)
ethL1IFCrntPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRAvgValidity.setStatus("current")
_EthL1IFCrntPMOPRAvgInitialize_Type = InitializeCmd
_EthL1IFCrntPMOPRAvgInitialize_Object = MibTableColumn
ethL1IFCrntPMOPRAvgInitialize = _EthL1IFCrntPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 107),
    _EthL1IFCrntPMOPRAvgInitialize_Type()
)
ethL1IFCrntPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPRAvgInitialize.setStatus("current")
_EthL1IFCrntPMOPTMinValue_Type = FixedX10
_EthL1IFCrntPMOPTMinValue_Object = MibTableColumn
ethL1IFCrntPMOPTMinValue = _EthL1IFCrntPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 108),
    _EthL1IFCrntPMOPTMinValue_Type()
)
ethL1IFCrntPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMinValue.setUnits("dBm/10")
_EthL1IFCrntPMOPTMinTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOPTMinTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOPTMinTimeStamp = _EthL1IFCrntPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 109),
    _EthL1IFCrntPMOPTMinTimeStamp_Type()
)
ethL1IFCrntPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMinTimeStamp.setStatus("current")
_EthL1IFCrntPMOPTMinValidity_Type = PMValidity
_EthL1IFCrntPMOPTMinValidity_Object = MibTableColumn
ethL1IFCrntPMOPTMinValidity = _EthL1IFCrntPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 110),
    _EthL1IFCrntPMOPTMinValidity_Type()
)
ethL1IFCrntPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMinValidity.setStatus("current")
_EthL1IFCrntPMOPTMinInitialize_Type = InitializeCmd
_EthL1IFCrntPMOPTMinInitialize_Object = MibTableColumn
ethL1IFCrntPMOPTMinInitialize = _EthL1IFCrntPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 111),
    _EthL1IFCrntPMOPTMinInitialize_Type()
)
ethL1IFCrntPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMinInitialize.setStatus("current")
_EthL1IFCrntPMOPTMaxValue_Type = FixedX10
_EthL1IFCrntPMOPTMaxValue_Object = MibTableColumn
ethL1IFCrntPMOPTMaxValue = _EthL1IFCrntPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 112),
    _EthL1IFCrntPMOPTMaxValue_Type()
)
ethL1IFCrntPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMaxValue.setUnits("dBm/10")
_EthL1IFCrntPMOPTMaxTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOPTMaxTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOPTMaxTimeStamp = _EthL1IFCrntPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 113),
    _EthL1IFCrntPMOPTMaxTimeStamp_Type()
)
ethL1IFCrntPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMaxTimeStamp.setStatus("current")
_EthL1IFCrntPMOPTMaxValidity_Type = PMValidity
_EthL1IFCrntPMOPTMaxValidity_Object = MibTableColumn
ethL1IFCrntPMOPTMaxValidity = _EthL1IFCrntPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 114),
    _EthL1IFCrntPMOPTMaxValidity_Type()
)
ethL1IFCrntPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMaxValidity.setStatus("current")
_EthL1IFCrntPMOPTMaxInitialize_Type = InitializeCmd
_EthL1IFCrntPMOPTMaxInitialize_Object = MibTableColumn
ethL1IFCrntPMOPTMaxInitialize = _EthL1IFCrntPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 115),
    _EthL1IFCrntPMOPTMaxInitialize_Type()
)
ethL1IFCrntPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTMaxInitialize.setStatus("current")
_EthL1IFCrntPMOPTAvgValue_Type = FixedX10
_EthL1IFCrntPMOPTAvgValue_Object = MibTableColumn
ethL1IFCrntPMOPTAvgValue = _EthL1IFCrntPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 116),
    _EthL1IFCrntPMOPTAvgValue_Type()
)
ethL1IFCrntPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTAvgValue.setUnits("dBm/10")
_EthL1IFCrntPMOPTAvgTimeStamp_Type = DateAndTime
_EthL1IFCrntPMOPTAvgTimeStamp_Object = MibTableColumn
ethL1IFCrntPMOPTAvgTimeStamp = _EthL1IFCrntPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 117),
    _EthL1IFCrntPMOPTAvgTimeStamp_Type()
)
ethL1IFCrntPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTAvgTimeStamp.setStatus("current")
_EthL1IFCrntPMOPTAvgValidity_Type = PMValidity
_EthL1IFCrntPMOPTAvgValidity_Object = MibTableColumn
ethL1IFCrntPMOPTAvgValidity = _EthL1IFCrntPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 118),
    _EthL1IFCrntPMOPTAvgValidity_Type()
)
ethL1IFCrntPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTAvgValidity.setStatus("current")
_EthL1IFCrntPMOPTAvgInitialize_Type = InitializeCmd
_EthL1IFCrntPMOPTAvgInitialize_Object = MibTableColumn
ethL1IFCrntPMOPTAvgInitialize = _EthL1IFCrntPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 119),
    _EthL1IFCrntPMOPTAvgInitialize_Type()
)
ethL1IFCrntPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFCrntPMOPTAvgInitialize.setStatus("current")
_EthL1IFHistPMTable_Object = MibTable
ethL1IFHistPMTable = _EthL1IFHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27)
)
if mibBuilder.loadTexts:
    ethL1IFHistPMTable.setStatus("current")
_EthL1IFHistPMEntry_Object = MibTableRow
ethL1IFHistPMEntry = _EthL1IFHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1)
)
ethL1IFHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ethL1IFHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "ethL1IFHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "ethL1IFHistPMPortTypeIdx"),
    (0, "BTI-7000-MIB", "ethL1IFHistPMPortIdx"),
    (0, "BTI-7000-MIB", "ethL1IFHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "ethL1IFHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    ethL1IFHistPMEntry.setStatus("current")


class _EthL1IFHistPMShelfIdx_Type(Integer32):
    """Custom type ethL1IFHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_EthL1IFHistPMShelfIdx_Type.__name__ = "Integer32"
_EthL1IFHistPMShelfIdx_Object = MibTableColumn
ethL1IFHistPMShelfIdx = _EthL1IFHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 1),
    _EthL1IFHistPMShelfIdx_Type()
)
ethL1IFHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFHistPMShelfIdx.setStatus("current")


class _EthL1IFHistPMSlotIdx_Type(Integer32):
    """Custom type ethL1IFHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_EthL1IFHistPMSlotIdx_Type.__name__ = "Integer32"
_EthL1IFHistPMSlotIdx_Object = MibTableColumn
ethL1IFHistPMSlotIdx = _EthL1IFHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 2),
    _EthL1IFHistPMSlotIdx_Type()
)
ethL1IFHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFHistPMSlotIdx.setStatus("current")
_EthL1IFHistPMPortTypeIdx_Type = PvxL1PortType
_EthL1IFHistPMPortTypeIdx_Object = MibTableColumn
ethL1IFHistPMPortTypeIdx = _EthL1IFHistPMPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 3),
    _EthL1IFHistPMPortTypeIdx_Type()
)
ethL1IFHistPMPortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFHistPMPortTypeIdx.setStatus("current")


class _EthL1IFHistPMPortIdx_Type(Integer32):
    """Custom type ethL1IFHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_EthL1IFHistPMPortIdx_Type.__name__ = "Integer32"
_EthL1IFHistPMPortIdx_Object = MibTableColumn
ethL1IFHistPMPortIdx = _EthL1IFHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 4),
    _EthL1IFHistPMPortIdx_Type()
)
ethL1IFHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFHistPMPortIdx.setStatus("current")
_EthL1IFHistPMIntervalTypeIdx_Type = PMIntervalType
_EthL1IFHistPMIntervalTypeIdx_Object = MibTableColumn
ethL1IFHistPMIntervalTypeIdx = _EthL1IFHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 5),
    _EthL1IFHistPMIntervalTypeIdx_Type()
)
ethL1IFHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFHistPMIntervalTypeIdx.setStatus("current")


class _EthL1IFHistPMIntervalIdx_Type(Integer32):
    """Custom type ethL1IFHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_EthL1IFHistPMIntervalIdx_Type.__name__ = "Integer32"
_EthL1IFHistPMIntervalIdx_Object = MibTableColumn
ethL1IFHistPMIntervalIdx = _EthL1IFHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 6),
    _EthL1IFHistPMIntervalIdx_Type()
)
ethL1IFHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFHistPMIntervalIdx.setStatus("current")
_EthL1IFHistPMOPRValue_Type = FixedX10
_EthL1IFHistPMOPRValue_Object = MibTableColumn
ethL1IFHistPMOPRValue = _EthL1IFHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 7),
    _EthL1IFHistPMOPRValue_Type()
)
ethL1IFHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRValue.setUnits("dBm/10")
_EthL1IFHistPMOPRTimeStamp_Type = DateAndTime
_EthL1IFHistPMOPRTimeStamp_Object = MibTableColumn
ethL1IFHistPMOPRTimeStamp = _EthL1IFHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 8),
    _EthL1IFHistPMOPRTimeStamp_Type()
)
ethL1IFHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRTimeStamp.setStatus("current")
_EthL1IFHistPMOPRValidity_Type = PMValidity
_EthL1IFHistPMOPRValidity_Object = MibTableColumn
ethL1IFHistPMOPRValidity = _EthL1IFHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 9),
    _EthL1IFHistPMOPRValidity_Type()
)
ethL1IFHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRValidity.setStatus("current")
_EthL1IFHistPMOPTValue_Type = FixedX10
_EthL1IFHistPMOPTValue_Object = MibTableColumn
ethL1IFHistPMOPTValue = _EthL1IFHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 10),
    _EthL1IFHistPMOPTValue_Type()
)
ethL1IFHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTValue.setUnits("dBm/10")
_EthL1IFHistPMOPTTimeStamp_Type = DateAndTime
_EthL1IFHistPMOPTTimeStamp_Object = MibTableColumn
ethL1IFHistPMOPTTimeStamp = _EthL1IFHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 11),
    _EthL1IFHistPMOPTTimeStamp_Type()
)
ethL1IFHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTTimeStamp.setStatus("current")
_EthL1IFHistPMOPTValidity_Type = PMValidity
_EthL1IFHistPMOPTValidity_Object = MibTableColumn
ethL1IFHistPMOPTValidity = _EthL1IFHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 12),
    _EthL1IFHistPMOPTValidity_Type()
)
ethL1IFHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTValidity.setStatus("current")


class _EthL1IFHistPMTempValue_Type(Integer32):
    """Custom type ethL1IFHistPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_EthL1IFHistPMTempValue_Type.__name__ = "Integer32"
_EthL1IFHistPMTempValue_Object = MibTableColumn
ethL1IFHistPMTempValue = _EthL1IFHistPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 13),
    _EthL1IFHistPMTempValue_Type()
)
ethL1IFHistPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMTempValue.setUnits("degrees Celsius")
_EthL1IFHistPMTempTimeStamp_Type = DateAndTime
_EthL1IFHistPMTempTimeStamp_Object = MibTableColumn
ethL1IFHistPMTempTimeStamp = _EthL1IFHistPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 14),
    _EthL1IFHistPMTempTimeStamp_Type()
)
ethL1IFHistPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMTempTimeStamp.setStatus("current")
_EthL1IFHistPMTempValidity_Type = PMValidity
_EthL1IFHistPMTempValidity_Object = MibTableColumn
ethL1IFHistPMTempValidity = _EthL1IFHistPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 15),
    _EthL1IFHistPMTempValidity_Type()
)
ethL1IFHistPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMTempValidity.setStatus("current")
_EthL1IFHistPMSupplyVoltageValue_Type = FixedX10
_EthL1IFHistPMSupplyVoltageValue_Object = MibTableColumn
ethL1IFHistPMSupplyVoltageValue = _EthL1IFHistPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 16),
    _EthL1IFHistPMSupplyVoltageValue_Type()
)
ethL1IFHistPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMSupplyVoltageValue.setUnits("mVolts/10")
_EthL1IFHistPMSupplyVoltageTimeStamp_Type = DateAndTime
_EthL1IFHistPMSupplyVoltageTimeStamp_Object = MibTableColumn
ethL1IFHistPMSupplyVoltageTimeStamp = _EthL1IFHistPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 17),
    _EthL1IFHistPMSupplyVoltageTimeStamp_Type()
)
ethL1IFHistPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMSupplyVoltageTimeStamp.setStatus("current")
_EthL1IFHistPMSupplyVoltageValidity_Type = PMValidity
_EthL1IFHistPMSupplyVoltageValidity_Object = MibTableColumn
ethL1IFHistPMSupplyVoltageValidity = _EthL1IFHistPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 18),
    _EthL1IFHistPMSupplyVoltageValidity_Type()
)
ethL1IFHistPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMSupplyVoltageValidity.setStatus("current")
_EthL1IFHistPMSupplyVoltage2Value_Type = FixedX10
_EthL1IFHistPMSupplyVoltage2Value_Object = MibTableColumn
ethL1IFHistPMSupplyVoltage2Value = _EthL1IFHistPMSupplyVoltage2Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 19),
    _EthL1IFHistPMSupplyVoltage2Value_Type()
)
ethL1IFHistPMSupplyVoltage2Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMSupplyVoltage2Value.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMSupplyVoltage2Value.setUnits("mVolts/10")
_EthL1IFHistPMSupplyVoltage2TimeStamp_Type = DateAndTime
_EthL1IFHistPMSupplyVoltage2TimeStamp_Object = MibTableColumn
ethL1IFHistPMSupplyVoltage2TimeStamp = _EthL1IFHistPMSupplyVoltage2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 20),
    _EthL1IFHistPMSupplyVoltage2TimeStamp_Type()
)
ethL1IFHistPMSupplyVoltage2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMSupplyVoltage2TimeStamp.setStatus("current")
_EthL1IFHistPMSupplyVoltage2Validity_Type = PMValidity
_EthL1IFHistPMSupplyVoltage2Validity_Object = MibTableColumn
ethL1IFHistPMSupplyVoltage2Validity = _EthL1IFHistPMSupplyVoltage2Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 21),
    _EthL1IFHistPMSupplyVoltage2Validity_Type()
)
ethL1IFHistPMSupplyVoltage2Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMSupplyVoltage2Validity.setStatus("current")


class _EthL1IFHistPMLBCValue_Type(Integer32):
    """Custom type ethL1IFHistPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_EthL1IFHistPMLBCValue_Type.__name__ = "Integer32"
_EthL1IFHistPMLBCValue_Object = MibTableColumn
ethL1IFHistPMLBCValue = _EthL1IFHistPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 22),
    _EthL1IFHistPMLBCValue_Type()
)
ethL1IFHistPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMLBCValue.setUnits("mAmp")
_EthL1IFHistPMLBCTimeStamp_Type = DateAndTime
_EthL1IFHistPMLBCTimeStamp_Object = MibTableColumn
ethL1IFHistPMLBCTimeStamp = _EthL1IFHistPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 23),
    _EthL1IFHistPMLBCTimeStamp_Type()
)
ethL1IFHistPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMLBCTimeStamp.setStatus("current")
_EthL1IFHistPMLBCValidity_Type = PMValidity
_EthL1IFHistPMLBCValidity_Object = MibTableColumn
ethL1IFHistPMLBCValidity = _EthL1IFHistPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 24),
    _EthL1IFHistPMLBCValidity_Type()
)
ethL1IFHistPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMLBCValidity.setStatus("current")
_EthL1IFHistPMCVValue_Type = Unsigned32
_EthL1IFHistPMCVValue_Object = MibTableColumn
ethL1IFHistPMCVValue = _EthL1IFHistPMCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 25),
    _EthL1IFHistPMCVValue_Type()
)
ethL1IFHistPMCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMCVValue.setStatus("current")
_EthL1IFHistPMCVTimeStamp_Type = DateAndTime
_EthL1IFHistPMCVTimeStamp_Object = MibTableColumn
ethL1IFHistPMCVTimeStamp = _EthL1IFHistPMCVTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 26),
    _EthL1IFHistPMCVTimeStamp_Type()
)
ethL1IFHistPMCVTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMCVTimeStamp.setStatus("current")
_EthL1IFHistPMCVValidity_Type = PMValidity
_EthL1IFHistPMCVValidity_Object = MibTableColumn
ethL1IFHistPMCVValidity = _EthL1IFHistPMCVValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 27),
    _EthL1IFHistPMCVValidity_Type()
)
ethL1IFHistPMCVValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMCVValidity.setStatus("current")
_EthL1IFHistPMCVInitialize_Type = InitializeCmd
_EthL1IFHistPMCVInitialize_Object = MibTableColumn
ethL1IFHistPMCVInitialize = _EthL1IFHistPMCVInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 28),
    _EthL1IFHistPMCVInitialize_Type()
)
ethL1IFHistPMCVInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMCVInitialize.setStatus("current")
_EthL1IFHistPMINVBLKValue_Type = Unsigned32
_EthL1IFHistPMINVBLKValue_Object = MibTableColumn
ethL1IFHistPMINVBLKValue = _EthL1IFHistPMINVBLKValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 29),
    _EthL1IFHistPMINVBLKValue_Type()
)
ethL1IFHistPMINVBLKValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMINVBLKValue.setStatus("current")
_EthL1IFHistPMINVBLKTimeStamp_Type = DateAndTime
_EthL1IFHistPMINVBLKTimeStamp_Object = MibTableColumn
ethL1IFHistPMINVBLKTimeStamp = _EthL1IFHistPMINVBLKTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 30),
    _EthL1IFHistPMINVBLKTimeStamp_Type()
)
ethL1IFHistPMINVBLKTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMINVBLKTimeStamp.setStatus("current")
_EthL1IFHistPMINVBLKValidity_Type = PMValidity
_EthL1IFHistPMINVBLKValidity_Object = MibTableColumn
ethL1IFHistPMINVBLKValidity = _EthL1IFHistPMINVBLKValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 31),
    _EthL1IFHistPMINVBLKValidity_Type()
)
ethL1IFHistPMINVBLKValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMINVBLKValidity.setStatus("current")
_EthL1IFHistPMINVBLKInitialize_Type = InitializeCmd
_EthL1IFHistPMINVBLKInitialize_Object = MibTableColumn
ethL1IFHistPMINVBLKInitialize = _EthL1IFHistPMINVBLKInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 32),
    _EthL1IFHistPMINVBLKInitialize_Type()
)
ethL1IFHistPMINVBLKInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMINVBLKInitialize.setStatus("current")
_EthL1IFHistPMESValue_Type = Unsigned32
_EthL1IFHistPMESValue_Object = MibTableColumn
ethL1IFHistPMESValue = _EthL1IFHistPMESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 33),
    _EthL1IFHistPMESValue_Type()
)
ethL1IFHistPMESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMESValue.setStatus("current")
_EthL1IFHistPMESTimeStamp_Type = DateAndTime
_EthL1IFHistPMESTimeStamp_Object = MibTableColumn
ethL1IFHistPMESTimeStamp = _EthL1IFHistPMESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 34),
    _EthL1IFHistPMESTimeStamp_Type()
)
ethL1IFHistPMESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMESTimeStamp.setStatus("current")
_EthL1IFHistPMESValidity_Type = PMValidity
_EthL1IFHistPMESValidity_Object = MibTableColumn
ethL1IFHistPMESValidity = _EthL1IFHistPMESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 35),
    _EthL1IFHistPMESValidity_Type()
)
ethL1IFHistPMESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMESValidity.setStatus("current")
_EthL1IFHistPMESInitialize_Type = InitializeCmd
_EthL1IFHistPMESInitialize_Object = MibTableColumn
ethL1IFHistPMESInitialize = _EthL1IFHistPMESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 36),
    _EthL1IFHistPMESInitialize_Type()
)
ethL1IFHistPMESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMESInitialize.setStatus("current")
_EthL1IFHistPMSESValue_Type = Unsigned32
_EthL1IFHistPMSESValue_Object = MibTableColumn
ethL1IFHistPMSESValue = _EthL1IFHistPMSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 37),
    _EthL1IFHistPMSESValue_Type()
)
ethL1IFHistPMSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMSESValue.setStatus("current")
_EthL1IFHistPMSESTimeStamp_Type = DateAndTime
_EthL1IFHistPMSESTimeStamp_Object = MibTableColumn
ethL1IFHistPMSESTimeStamp = _EthL1IFHistPMSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 38),
    _EthL1IFHistPMSESTimeStamp_Type()
)
ethL1IFHistPMSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMSESTimeStamp.setStatus("current")
_EthL1IFHistPMSESValidity_Type = PMValidity
_EthL1IFHistPMSESValidity_Object = MibTableColumn
ethL1IFHistPMSESValidity = _EthL1IFHistPMSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 39),
    _EthL1IFHistPMSESValidity_Type()
)
ethL1IFHistPMSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMSESValidity.setStatus("current")
_EthL1IFHistPMSESInitialize_Type = InitializeCmd
_EthL1IFHistPMSESInitialize_Object = MibTableColumn
ethL1IFHistPMSESInitialize = _EthL1IFHistPMSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 40),
    _EthL1IFHistPMSESInitialize_Type()
)
ethL1IFHistPMSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMSESInitialize.setStatus("current")
_EthL1IFHistPMOTUEBValue_Type = Unsigned32
_EthL1IFHistPMOTUEBValue_Object = MibTableColumn
ethL1IFHistPMOTUEBValue = _EthL1IFHistPMOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 41),
    _EthL1IFHistPMOTUEBValue_Type()
)
ethL1IFHistPMOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUEBValue.setStatus("current")
_EthL1IFHistPMOTUEBTimeStamp_Type = DateAndTime
_EthL1IFHistPMOTUEBTimeStamp_Object = MibTableColumn
ethL1IFHistPMOTUEBTimeStamp = _EthL1IFHistPMOTUEBTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 42),
    _EthL1IFHistPMOTUEBTimeStamp_Type()
)
ethL1IFHistPMOTUEBTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUEBTimeStamp.setStatus("current")
_EthL1IFHistPMOTUEBValidity_Type = PMValidity
_EthL1IFHistPMOTUEBValidity_Object = MibTableColumn
ethL1IFHistPMOTUEBValidity = _EthL1IFHistPMOTUEBValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 43),
    _EthL1IFHistPMOTUEBValidity_Type()
)
ethL1IFHistPMOTUEBValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUEBValidity.setStatus("current")
_EthL1IFHistPMOTUEBInitialize_Type = InitializeCmd
_EthL1IFHistPMOTUEBInitialize_Object = MibTableColumn
ethL1IFHistPMOTUEBInitialize = _EthL1IFHistPMOTUEBInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 44),
    _EthL1IFHistPMOTUEBInitialize_Type()
)
ethL1IFHistPMOTUEBInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUEBInitialize.setStatus("current")
_EthL1IFHistPMOTUBBEValue_Type = Unsigned32
_EthL1IFHistPMOTUBBEValue_Object = MibTableColumn
ethL1IFHistPMOTUBBEValue = _EthL1IFHistPMOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 45),
    _EthL1IFHistPMOTUBBEValue_Type()
)
ethL1IFHistPMOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUBBEValue.setStatus("current")
_EthL1IFHistPMOTUBBETimeStamp_Type = DateAndTime
_EthL1IFHistPMOTUBBETimeStamp_Object = MibTableColumn
ethL1IFHistPMOTUBBETimeStamp = _EthL1IFHistPMOTUBBETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 46),
    _EthL1IFHistPMOTUBBETimeStamp_Type()
)
ethL1IFHistPMOTUBBETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUBBETimeStamp.setStatus("current")
_EthL1IFHistPMOTUBBEValidity_Type = PMValidity
_EthL1IFHistPMOTUBBEValidity_Object = MibTableColumn
ethL1IFHistPMOTUBBEValidity = _EthL1IFHistPMOTUBBEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 47),
    _EthL1IFHistPMOTUBBEValidity_Type()
)
ethL1IFHistPMOTUBBEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUBBEValidity.setStatus("current")
_EthL1IFHistPMOTUBBEInitialize_Type = InitializeCmd
_EthL1IFHistPMOTUBBEInitialize_Object = MibTableColumn
ethL1IFHistPMOTUBBEInitialize = _EthL1IFHistPMOTUBBEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 48),
    _EthL1IFHistPMOTUBBEInitialize_Type()
)
ethL1IFHistPMOTUBBEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUBBEInitialize.setStatus("current")
_EthL1IFHistPMOTUESValue_Type = Unsigned32
_EthL1IFHistPMOTUESValue_Object = MibTableColumn
ethL1IFHistPMOTUESValue = _EthL1IFHistPMOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 49),
    _EthL1IFHistPMOTUESValue_Type()
)
ethL1IFHistPMOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUESValue.setStatus("current")
_EthL1IFHistPMOTUESTimeStamp_Type = DateAndTime
_EthL1IFHistPMOTUESTimeStamp_Object = MibTableColumn
ethL1IFHistPMOTUESTimeStamp = _EthL1IFHistPMOTUESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 50),
    _EthL1IFHistPMOTUESTimeStamp_Type()
)
ethL1IFHistPMOTUESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUESTimeStamp.setStatus("current")
_EthL1IFHistPMOTUESValidity_Type = PMValidity
_EthL1IFHistPMOTUESValidity_Object = MibTableColumn
ethL1IFHistPMOTUESValidity = _EthL1IFHistPMOTUESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 51),
    _EthL1IFHistPMOTUESValidity_Type()
)
ethL1IFHistPMOTUESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUESValidity.setStatus("current")
_EthL1IFHistPMOTUESInitialize_Type = InitializeCmd
_EthL1IFHistPMOTUESInitialize_Object = MibTableColumn
ethL1IFHistPMOTUESInitialize = _EthL1IFHistPMOTUESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 52),
    _EthL1IFHistPMOTUESInitialize_Type()
)
ethL1IFHistPMOTUESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUESInitialize.setStatus("current")
_EthL1IFHistPMOTUSESValue_Type = Unsigned32
_EthL1IFHistPMOTUSESValue_Object = MibTableColumn
ethL1IFHistPMOTUSESValue = _EthL1IFHistPMOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 53),
    _EthL1IFHistPMOTUSESValue_Type()
)
ethL1IFHistPMOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUSESValue.setStatus("current")
_EthL1IFHistPMOTUSESTimeStamp_Type = DateAndTime
_EthL1IFHistPMOTUSESTimeStamp_Object = MibTableColumn
ethL1IFHistPMOTUSESTimeStamp = _EthL1IFHistPMOTUSESTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 54),
    _EthL1IFHistPMOTUSESTimeStamp_Type()
)
ethL1IFHistPMOTUSESTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUSESTimeStamp.setStatus("current")
_EthL1IFHistPMOTUSESValidity_Type = PMValidity
_EthL1IFHistPMOTUSESValidity_Object = MibTableColumn
ethL1IFHistPMOTUSESValidity = _EthL1IFHistPMOTUSESValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 55),
    _EthL1IFHistPMOTUSESValidity_Type()
)
ethL1IFHistPMOTUSESValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUSESValidity.setStatus("current")
_EthL1IFHistPMOTUSESInitialize_Type = InitializeCmd
_EthL1IFHistPMOTUSESInitialize_Object = MibTableColumn
ethL1IFHistPMOTUSESInitialize = _EthL1IFHistPMOTUSESInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 56),
    _EthL1IFHistPMOTUSESInitialize_Type()
)
ethL1IFHistPMOTUSESInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUSESInitialize.setStatus("current")
_EthL1IFHistPMOTUOFSValue_Type = Unsigned32
_EthL1IFHistPMOTUOFSValue_Object = MibTableColumn
ethL1IFHistPMOTUOFSValue = _EthL1IFHistPMOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 57),
    _EthL1IFHistPMOTUOFSValue_Type()
)
ethL1IFHistPMOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUOFSValue.setStatus("current")
_EthL1IFHistPMOTUOFSTimeStamp_Type = DateAndTime
_EthL1IFHistPMOTUOFSTimeStamp_Object = MibTableColumn
ethL1IFHistPMOTUOFSTimeStamp = _EthL1IFHistPMOTUOFSTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 58),
    _EthL1IFHistPMOTUOFSTimeStamp_Type()
)
ethL1IFHistPMOTUOFSTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUOFSTimeStamp.setStatus("current")
_EthL1IFHistPMOTUOFSValidity_Type = PMValidity
_EthL1IFHistPMOTUOFSValidity_Object = MibTableColumn
ethL1IFHistPMOTUOFSValidity = _EthL1IFHistPMOTUOFSValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 59),
    _EthL1IFHistPMOTUOFSValidity_Type()
)
ethL1IFHistPMOTUOFSValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUOFSValidity.setStatus("current")
_EthL1IFHistPMOTUOFSInitialize_Type = InitializeCmd
_EthL1IFHistPMOTUOFSInitialize_Object = MibTableColumn
ethL1IFHistPMOTUOFSInitialize = _EthL1IFHistPMOTUOFSInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 60),
    _EthL1IFHistPMOTUOFSInitialize_Type()
)
ethL1IFHistPMOTUOFSInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUOFSInitialize.setStatus("current")
_EthL1IFHistPMNBITCRValue_Type = Unsigned32
_EthL1IFHistPMNBITCRValue_Object = MibTableColumn
ethL1IFHistPMNBITCRValue = _EthL1IFHistPMNBITCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 61),
    _EthL1IFHistPMNBITCRValue_Type()
)
ethL1IFHistPMNBITCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBITCRValue.setStatus("current")
_EthL1IFHistPMNBITCRTimeStamp_Type = DateAndTime
_EthL1IFHistPMNBITCRTimeStamp_Object = MibTableColumn
ethL1IFHistPMNBITCRTimeStamp = _EthL1IFHistPMNBITCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 62),
    _EthL1IFHistPMNBITCRTimeStamp_Type()
)
ethL1IFHistPMNBITCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBITCRTimeStamp.setStatus("current")
_EthL1IFHistPMNBITCRValidity_Type = PMValidity
_EthL1IFHistPMNBITCRValidity_Object = MibTableColumn
ethL1IFHistPMNBITCRValidity = _EthL1IFHistPMNBITCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 63),
    _EthL1IFHistPMNBITCRValidity_Type()
)
ethL1IFHistPMNBITCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBITCRValidity.setStatus("current")
_EthL1IFHistPMNBITCRInitialize_Type = InitializeCmd
_EthL1IFHistPMNBITCRInitialize_Object = MibTableColumn
ethL1IFHistPMNBITCRInitialize = _EthL1IFHistPMNBITCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 64),
    _EthL1IFHistPMNBITCRInitialize_Type()
)
ethL1IFHistPMNBITCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBITCRInitialize.setStatus("current")
_EthL1IFHistPMNBYTCRValue_Type = Unsigned32
_EthL1IFHistPMNBYTCRValue_Object = MibTableColumn
ethL1IFHistPMNBYTCRValue = _EthL1IFHistPMNBYTCRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 65),
    _EthL1IFHistPMNBYTCRValue_Type()
)
ethL1IFHistPMNBYTCRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBYTCRValue.setStatus("current")
_EthL1IFHistPMNBYTCRTimeStamp_Type = DateAndTime
_EthL1IFHistPMNBYTCRTimeStamp_Object = MibTableColumn
ethL1IFHistPMNBYTCRTimeStamp = _EthL1IFHistPMNBYTCRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 66),
    _EthL1IFHistPMNBYTCRTimeStamp_Type()
)
ethL1IFHistPMNBYTCRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBYTCRTimeStamp.setStatus("current")
_EthL1IFHistPMNBYTCRValidity_Type = PMValidity
_EthL1IFHistPMNBYTCRValidity_Object = MibTableColumn
ethL1IFHistPMNBYTCRValidity = _EthL1IFHistPMNBYTCRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 67),
    _EthL1IFHistPMNBYTCRValidity_Type()
)
ethL1IFHistPMNBYTCRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBYTCRValidity.setStatus("current")
_EthL1IFHistPMNBYTCRInitialize_Type = InitializeCmd
_EthL1IFHistPMNBYTCRInitialize_Object = MibTableColumn
ethL1IFHistPMNBYTCRInitialize = _EthL1IFHistPMNBYTCRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 68),
    _EthL1IFHistPMNBYTCRInitialize_Type()
)
ethL1IFHistPMNBYTCRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBYTCRInitialize.setStatus("current")
_EthL1IFHistPMUNCRCDWValue_Type = Unsigned32
_EthL1IFHistPMUNCRCDWValue_Object = MibTableColumn
ethL1IFHistPMUNCRCDWValue = _EthL1IFHistPMUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 69),
    _EthL1IFHistPMUNCRCDWValue_Type()
)
ethL1IFHistPMUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMUNCRCDWValue.setStatus("current")
_EthL1IFHistPMUNCRCDWTimeStamp_Type = DateAndTime
_EthL1IFHistPMUNCRCDWTimeStamp_Object = MibTableColumn
ethL1IFHistPMUNCRCDWTimeStamp = _EthL1IFHistPMUNCRCDWTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 70),
    _EthL1IFHistPMUNCRCDWTimeStamp_Type()
)
ethL1IFHistPMUNCRCDWTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMUNCRCDWTimeStamp.setStatus("current")
_EthL1IFHistPMUNCRCDWValidity_Type = PMValidity
_EthL1IFHistPMUNCRCDWValidity_Object = MibTableColumn
ethL1IFHistPMUNCRCDWValidity = _EthL1IFHistPMUNCRCDWValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 71),
    _EthL1IFHistPMUNCRCDWValidity_Type()
)
ethL1IFHistPMUNCRCDWValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMUNCRCDWValidity.setStatus("current")
_EthL1IFHistPMUNCRCDWInitialize_Type = InitializeCmd
_EthL1IFHistPMUNCRCDWInitialize_Object = MibTableColumn
ethL1IFHistPMUNCRCDWInitialize = _EthL1IFHistPMUNCRCDWInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 72),
    _EthL1IFHistPMUNCRCDWInitialize_Type()
)
ethL1IFHistPMUNCRCDWInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMUNCRCDWInitialize.setStatus("current")
_EthL1IFHistPMOTNBERValue_Type = DisplayString
_EthL1IFHistPMOTNBERValue_Object = MibTableColumn
ethL1IFHistPMOTNBERValue = _EthL1IFHistPMOTNBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 73),
    _EthL1IFHistPMOTNBERValue_Type()
)
ethL1IFHistPMOTNBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTNBERValue.setStatus("current")
_EthL1IFHistPMOTNBERTimeStamp_Type = DateAndTime
_EthL1IFHistPMOTNBERTimeStamp_Object = MibTableColumn
ethL1IFHistPMOTNBERTimeStamp = _EthL1IFHistPMOTNBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 74),
    _EthL1IFHistPMOTNBERTimeStamp_Type()
)
ethL1IFHistPMOTNBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTNBERTimeStamp.setStatus("current")
_EthL1IFHistPMOTNBERValidity_Type = PMValidity
_EthL1IFHistPMOTNBERValidity_Object = MibTableColumn
ethL1IFHistPMOTNBERValidity = _EthL1IFHistPMOTNBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 75),
    _EthL1IFHistPMOTNBERValidity_Type()
)
ethL1IFHistPMOTNBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTNBERValidity.setStatus("current")
_EthL1IFHistPMOTNBERInitialize_Type = InitializeCmd
_EthL1IFHistPMOTNBERInitialize_Object = MibTableColumn
ethL1IFHistPMOTNBERInitialize = _EthL1IFHistPMOTNBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 76),
    _EthL1IFHistPMOTNBERInitialize_Type()
)
ethL1IFHistPMOTNBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTNBERInitialize.setStatus("current")
_EthL1IFHistPMOTNAVGBERValue_Type = DisplayString
_EthL1IFHistPMOTNAVGBERValue_Object = MibTableColumn
ethL1IFHistPMOTNAVGBERValue = _EthL1IFHistPMOTNAVGBERValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 77),
    _EthL1IFHistPMOTNAVGBERValue_Type()
)
ethL1IFHistPMOTNAVGBERValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTNAVGBERValue.setStatus("current")
_EthL1IFHistPMOTNAVGBERTimeStamp_Type = DateAndTime
_EthL1IFHistPMOTNAVGBERTimeStamp_Object = MibTableColumn
ethL1IFHistPMOTNAVGBERTimeStamp = _EthL1IFHistPMOTNAVGBERTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 78),
    _EthL1IFHistPMOTNAVGBERTimeStamp_Type()
)
ethL1IFHistPMOTNAVGBERTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTNAVGBERTimeStamp.setStatus("current")
_EthL1IFHistPMOTNAVGBERValidity_Type = PMValidity
_EthL1IFHistPMOTNAVGBERValidity_Object = MibTableColumn
ethL1IFHistPMOTNAVGBERValidity = _EthL1IFHistPMOTNAVGBERValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 79),
    _EthL1IFHistPMOTNAVGBERValidity_Type()
)
ethL1IFHistPMOTNAVGBERValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTNAVGBERValidity.setStatus("current")
_EthL1IFHistPMOTNAVGBERInitialize_Type = InitializeCmd
_EthL1IFHistPMOTNAVGBERInitialize_Object = MibTableColumn
ethL1IFHistPMOTNAVGBERInitialize = _EthL1IFHistPMOTNAVGBERInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 80),
    _EthL1IFHistPMOTNAVGBERInitialize_Type()
)
ethL1IFHistPMOTNAVGBERInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTNAVGBERInitialize.setStatus("current")
_EthL1IFHistPMNBITCR64BitValue_Type = Unsigned64
_EthL1IFHistPMNBITCR64BitValue_Object = MibTableColumn
ethL1IFHistPMNBITCR64BitValue = _EthL1IFHistPMNBITCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 81),
    _EthL1IFHistPMNBITCR64BitValue_Type()
)
ethL1IFHistPMNBITCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBITCR64BitValue.setStatus("current")
_EthL1IFHistPMNBITCR64BitTimeStamp_Type = DateAndTime
_EthL1IFHistPMNBITCR64BitTimeStamp_Object = MibTableColumn
ethL1IFHistPMNBITCR64BitTimeStamp = _EthL1IFHistPMNBITCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 82),
    _EthL1IFHistPMNBITCR64BitTimeStamp_Type()
)
ethL1IFHistPMNBITCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBITCR64BitTimeStamp.setStatus("current")
_EthL1IFHistPMNBITCR64BitValidity_Type = PMValidity
_EthL1IFHistPMNBITCR64BitValidity_Object = MibTableColumn
ethL1IFHistPMNBITCR64BitValidity = _EthL1IFHistPMNBITCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 83),
    _EthL1IFHistPMNBITCR64BitValidity_Type()
)
ethL1IFHistPMNBITCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBITCR64BitValidity.setStatus("current")
_EthL1IFHistPMNBITCR64BitInitialize_Type = InitializeCmd
_EthL1IFHistPMNBITCR64BitInitialize_Object = MibTableColumn
ethL1IFHistPMNBITCR64BitInitialize = _EthL1IFHistPMNBITCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 84),
    _EthL1IFHistPMNBITCR64BitInitialize_Type()
)
ethL1IFHistPMNBITCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBITCR64BitInitialize.setStatus("current")
_EthL1IFHistPMNBYTCR64BitValue_Type = Unsigned64
_EthL1IFHistPMNBYTCR64BitValue_Object = MibTableColumn
ethL1IFHistPMNBYTCR64BitValue = _EthL1IFHistPMNBYTCR64BitValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 85),
    _EthL1IFHistPMNBYTCR64BitValue_Type()
)
ethL1IFHistPMNBYTCR64BitValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBYTCR64BitValue.setStatus("current")
_EthL1IFHistPMNBYTCR64BitTimeStamp_Type = DateAndTime
_EthL1IFHistPMNBYTCR64BitTimeStamp_Object = MibTableColumn
ethL1IFHistPMNBYTCR64BitTimeStamp = _EthL1IFHistPMNBYTCR64BitTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 86),
    _EthL1IFHistPMNBYTCR64BitTimeStamp_Type()
)
ethL1IFHistPMNBYTCR64BitTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBYTCR64BitTimeStamp.setStatus("current")
_EthL1IFHistPMNBYTCR64BitValidity_Type = PMValidity
_EthL1IFHistPMNBYTCR64BitValidity_Object = MibTableColumn
ethL1IFHistPMNBYTCR64BitValidity = _EthL1IFHistPMNBYTCR64BitValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 87),
    _EthL1IFHistPMNBYTCR64BitValidity_Type()
)
ethL1IFHistPMNBYTCR64BitValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBYTCR64BitValidity.setStatus("current")
_EthL1IFHistPMNBYTCR64BitInitialize_Type = InitializeCmd
_EthL1IFHistPMNBYTCR64BitInitialize_Object = MibTableColumn
ethL1IFHistPMNBYTCR64BitInitialize = _EthL1IFHistPMNBYTCR64BitInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 88),
    _EthL1IFHistPMNBYTCR64BitInitialize_Type()
)
ethL1IFHistPMNBYTCR64BitInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMNBYTCR64BitInitialize.setStatus("current")
_EthL1IFHistPMUASValue_Type = Unsigned32
_EthL1IFHistPMUASValue_Object = MibTableColumn
ethL1IFHistPMUASValue = _EthL1IFHistPMUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 89),
    _EthL1IFHistPMUASValue_Type()
)
ethL1IFHistPMUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMUASValue.setStatus("current")
_EthL1IFHistPMUASTimeStamp_Type = DateAndTime
_EthL1IFHistPMUASTimeStamp_Object = MibTableColumn
ethL1IFHistPMUASTimeStamp = _EthL1IFHistPMUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 90),
    _EthL1IFHistPMUASTimeStamp_Type()
)
ethL1IFHistPMUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMUASTimeStamp.setStatus("current")
_EthL1IFHistPMUASValidity_Type = PMValidity
_EthL1IFHistPMUASValidity_Object = MibTableColumn
ethL1IFHistPMUASValidity = _EthL1IFHistPMUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 91),
    _EthL1IFHistPMUASValidity_Type()
)
ethL1IFHistPMUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMUASValidity.setStatus("current")
_EthL1IFHistPMUASInitialize_Type = InitializeCmd
_EthL1IFHistPMUASInitialize_Object = MibTableColumn
ethL1IFHistPMUASInitialize = _EthL1IFHistPMUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 92),
    _EthL1IFHistPMUASInitialize_Type()
)
ethL1IFHistPMUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMUASInitialize.setStatus("current")
_EthL1IFHistPMOTUUASValue_Type = Unsigned32
_EthL1IFHistPMOTUUASValue_Object = MibTableColumn
ethL1IFHistPMOTUUASValue = _EthL1IFHistPMOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 93),
    _EthL1IFHistPMOTUUASValue_Type()
)
ethL1IFHistPMOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUUASValue.setStatus("current")
_EthL1IFHistPMOTUUASTimeStamp_Type = DateAndTime
_EthL1IFHistPMOTUUASTimeStamp_Object = MibTableColumn
ethL1IFHistPMOTUUASTimeStamp = _EthL1IFHistPMOTUUASTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 94),
    _EthL1IFHistPMOTUUASTimeStamp_Type()
)
ethL1IFHistPMOTUUASTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUUASTimeStamp.setStatus("current")
_EthL1IFHistPMOTUUASValidity_Type = PMValidity
_EthL1IFHistPMOTUUASValidity_Object = MibTableColumn
ethL1IFHistPMOTUUASValidity = _EthL1IFHistPMOTUUASValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 95),
    _EthL1IFHistPMOTUUASValidity_Type()
)
ethL1IFHistPMOTUUASValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUUASValidity.setStatus("current")
_EthL1IFHistPMOTUUASInitialize_Type = InitializeCmd
_EthL1IFHistPMOTUUASInitialize_Object = MibTableColumn
ethL1IFHistPMOTUUASInitialize = _EthL1IFHistPMOTUUASInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 96),
    _EthL1IFHistPMOTUUASInitialize_Type()
)
ethL1IFHistPMOTUUASInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOTUUASInitialize.setStatus("current")
_EthL1IFHistPMOPRMinValue_Type = FixedX10
_EthL1IFHistPMOPRMinValue_Object = MibTableColumn
ethL1IFHistPMOPRMinValue = _EthL1IFHistPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 97),
    _EthL1IFHistPMOPRMinValue_Type()
)
ethL1IFHistPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMinValue.setUnits("dBm/10")
_EthL1IFHistPMOPRMinTimeStamp_Type = DateAndTime
_EthL1IFHistPMOPRMinTimeStamp_Object = MibTableColumn
ethL1IFHistPMOPRMinTimeStamp = _EthL1IFHistPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 98),
    _EthL1IFHistPMOPRMinTimeStamp_Type()
)
ethL1IFHistPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMinTimeStamp.setStatus("current")
_EthL1IFHistPMOPRMinValidity_Type = PMValidity
_EthL1IFHistPMOPRMinValidity_Object = MibTableColumn
ethL1IFHistPMOPRMinValidity = _EthL1IFHistPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 99),
    _EthL1IFHistPMOPRMinValidity_Type()
)
ethL1IFHistPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMinValidity.setStatus("current")
_EthL1IFHistPMOPRMinInitialize_Type = InitializeCmd
_EthL1IFHistPMOPRMinInitialize_Object = MibTableColumn
ethL1IFHistPMOPRMinInitialize = _EthL1IFHistPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 100),
    _EthL1IFHistPMOPRMinInitialize_Type()
)
ethL1IFHistPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMinInitialize.setStatus("current")
_EthL1IFHistPMOPRMaxValue_Type = FixedX10
_EthL1IFHistPMOPRMaxValue_Object = MibTableColumn
ethL1IFHistPMOPRMaxValue = _EthL1IFHistPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 101),
    _EthL1IFHistPMOPRMaxValue_Type()
)
ethL1IFHistPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMaxValue.setUnits("dBm/10")
_EthL1IFHistPMOPRMaxTimeStamp_Type = DateAndTime
_EthL1IFHistPMOPRMaxTimeStamp_Object = MibTableColumn
ethL1IFHistPMOPRMaxTimeStamp = _EthL1IFHistPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 102),
    _EthL1IFHistPMOPRMaxTimeStamp_Type()
)
ethL1IFHistPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMaxTimeStamp.setStatus("current")
_EthL1IFHistPMOPRMaxValidity_Type = PMValidity
_EthL1IFHistPMOPRMaxValidity_Object = MibTableColumn
ethL1IFHistPMOPRMaxValidity = _EthL1IFHistPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 103),
    _EthL1IFHistPMOPRMaxValidity_Type()
)
ethL1IFHistPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMaxValidity.setStatus("current")
_EthL1IFHistPMOPRMaxInitialize_Type = InitializeCmd
_EthL1IFHistPMOPRMaxInitialize_Object = MibTableColumn
ethL1IFHistPMOPRMaxInitialize = _EthL1IFHistPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 104),
    _EthL1IFHistPMOPRMaxInitialize_Type()
)
ethL1IFHistPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRMaxInitialize.setStatus("current")
_EthL1IFHistPMOPRAvgValue_Type = FixedX10
_EthL1IFHistPMOPRAvgValue_Object = MibTableColumn
ethL1IFHistPMOPRAvgValue = _EthL1IFHistPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 105),
    _EthL1IFHistPMOPRAvgValue_Type()
)
ethL1IFHistPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRAvgValue.setUnits("dBm/10")
_EthL1IFHistPMOPRAvgTimeStamp_Type = DateAndTime
_EthL1IFHistPMOPRAvgTimeStamp_Object = MibTableColumn
ethL1IFHistPMOPRAvgTimeStamp = _EthL1IFHistPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 106),
    _EthL1IFHistPMOPRAvgTimeStamp_Type()
)
ethL1IFHistPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRAvgTimeStamp.setStatus("current")
_EthL1IFHistPMOPRAvgValidity_Type = PMValidity
_EthL1IFHistPMOPRAvgValidity_Object = MibTableColumn
ethL1IFHistPMOPRAvgValidity = _EthL1IFHistPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 107),
    _EthL1IFHistPMOPRAvgValidity_Type()
)
ethL1IFHistPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRAvgValidity.setStatus("current")
_EthL1IFHistPMOPRAvgInitialize_Type = InitializeCmd
_EthL1IFHistPMOPRAvgInitialize_Object = MibTableColumn
ethL1IFHistPMOPRAvgInitialize = _EthL1IFHistPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 108),
    _EthL1IFHistPMOPRAvgInitialize_Type()
)
ethL1IFHistPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPRAvgInitialize.setStatus("current")
_EthL1IFHistPMOPTMinValue_Type = FixedX10
_EthL1IFHistPMOPTMinValue_Object = MibTableColumn
ethL1IFHistPMOPTMinValue = _EthL1IFHistPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 109),
    _EthL1IFHistPMOPTMinValue_Type()
)
ethL1IFHistPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMinValue.setUnits("dBm/10")
_EthL1IFHistPMOPTMinTimeStamp_Type = DateAndTime
_EthL1IFHistPMOPTMinTimeStamp_Object = MibTableColumn
ethL1IFHistPMOPTMinTimeStamp = _EthL1IFHistPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 110),
    _EthL1IFHistPMOPTMinTimeStamp_Type()
)
ethL1IFHistPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMinTimeStamp.setStatus("current")
_EthL1IFHistPMOPTMinValidity_Type = PMValidity
_EthL1IFHistPMOPTMinValidity_Object = MibTableColumn
ethL1IFHistPMOPTMinValidity = _EthL1IFHistPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 111),
    _EthL1IFHistPMOPTMinValidity_Type()
)
ethL1IFHistPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMinValidity.setStatus("current")
_EthL1IFHistPMOPTMinInitialize_Type = InitializeCmd
_EthL1IFHistPMOPTMinInitialize_Object = MibTableColumn
ethL1IFHistPMOPTMinInitialize = _EthL1IFHistPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 112),
    _EthL1IFHistPMOPTMinInitialize_Type()
)
ethL1IFHistPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMinInitialize.setStatus("current")
_EthL1IFHistPMOPTMaxValue_Type = FixedX10
_EthL1IFHistPMOPTMaxValue_Object = MibTableColumn
ethL1IFHistPMOPTMaxValue = _EthL1IFHistPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 113),
    _EthL1IFHistPMOPTMaxValue_Type()
)
ethL1IFHistPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMaxValue.setUnits("dBm/10")
_EthL1IFHistPMOPTMaxTimeStamp_Type = DateAndTime
_EthL1IFHistPMOPTMaxTimeStamp_Object = MibTableColumn
ethL1IFHistPMOPTMaxTimeStamp = _EthL1IFHistPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 114),
    _EthL1IFHistPMOPTMaxTimeStamp_Type()
)
ethL1IFHistPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMaxTimeStamp.setStatus("current")
_EthL1IFHistPMOPTMaxValidity_Type = PMValidity
_EthL1IFHistPMOPTMaxValidity_Object = MibTableColumn
ethL1IFHistPMOPTMaxValidity = _EthL1IFHistPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 115),
    _EthL1IFHistPMOPTMaxValidity_Type()
)
ethL1IFHistPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMaxValidity.setStatus("current")
_EthL1IFHistPMOPTMaxInitialize_Type = InitializeCmd
_EthL1IFHistPMOPTMaxInitialize_Object = MibTableColumn
ethL1IFHistPMOPTMaxInitialize = _EthL1IFHistPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 116),
    _EthL1IFHistPMOPTMaxInitialize_Type()
)
ethL1IFHistPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTMaxInitialize.setStatus("current")
_EthL1IFHistPMOPTAvgValue_Type = FixedX10
_EthL1IFHistPMOPTAvgValue_Object = MibTableColumn
ethL1IFHistPMOPTAvgValue = _EthL1IFHistPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 117),
    _EthL1IFHistPMOPTAvgValue_Type()
)
ethL1IFHistPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTAvgValue.setUnits("dBm/10")
_EthL1IFHistPMOPTAvgTimeStamp_Type = DateAndTime
_EthL1IFHistPMOPTAvgTimeStamp_Object = MibTableColumn
ethL1IFHistPMOPTAvgTimeStamp = _EthL1IFHistPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 118),
    _EthL1IFHistPMOPTAvgTimeStamp_Type()
)
ethL1IFHistPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTAvgTimeStamp.setStatus("current")
_EthL1IFHistPMOPTAvgValidity_Type = PMValidity
_EthL1IFHistPMOPTAvgValidity_Object = MibTableColumn
ethL1IFHistPMOPTAvgValidity = _EthL1IFHistPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 119),
    _EthL1IFHistPMOPTAvgValidity_Type()
)
ethL1IFHistPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTAvgValidity.setStatus("current")
_EthL1IFHistPMOPTAvgInitialize_Type = InitializeCmd
_EthL1IFHistPMOPTAvgInitialize_Object = MibTableColumn
ethL1IFHistPMOPTAvgInitialize = _EthL1IFHistPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 120),
    _EthL1IFHistPMOPTAvgInitialize_Type()
)
ethL1IFHistPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFHistPMOPTAvgInitialize.setStatus("current")
_EthL1IFPMThresholdTable_Object = MibTable
ethL1IFPMThresholdTable = _EthL1IFPMThresholdTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28)
)
if mibBuilder.loadTexts:
    ethL1IFPMThresholdTable.setStatus("current")
_EthL1IFPMThresholdEntry_Object = MibTableRow
ethL1IFPMThresholdEntry = _EthL1IFPMThresholdEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1)
)
ethL1IFPMThresholdEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ethL1IFPMThresholdShelfIdx"),
    (0, "BTI-7000-MIB", "ethL1IFPMThresholdSlotIdx"),
    (0, "BTI-7000-MIB", "ethL1IFPMThresholdPortTypeIdx"),
    (0, "BTI-7000-MIB", "ethL1IFPMThresholdPortIdx"),
    (0, "BTI-7000-MIB", "ethL1IFPMThresholdIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    ethL1IFPMThresholdEntry.setStatus("current")


class _EthL1IFPMThresholdShelfIdx_Type(Integer32):
    """Custom type ethL1IFPMThresholdShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_EthL1IFPMThresholdShelfIdx_Type.__name__ = "Integer32"
_EthL1IFPMThresholdShelfIdx_Object = MibTableColumn
ethL1IFPMThresholdShelfIdx = _EthL1IFPMThresholdShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 1),
    _EthL1IFPMThresholdShelfIdx_Type()
)
ethL1IFPMThresholdShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdShelfIdx.setStatus("current")


class _EthL1IFPMThresholdSlotIdx_Type(Integer32):
    """Custom type ethL1IFPMThresholdSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_EthL1IFPMThresholdSlotIdx_Type.__name__ = "Integer32"
_EthL1IFPMThresholdSlotIdx_Object = MibTableColumn
ethL1IFPMThresholdSlotIdx = _EthL1IFPMThresholdSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 2),
    _EthL1IFPMThresholdSlotIdx_Type()
)
ethL1IFPMThresholdSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdSlotIdx.setStatus("current")
_EthL1IFPMThresholdPortTypeIdx_Type = PvxL1PortType
_EthL1IFPMThresholdPortTypeIdx_Object = MibTableColumn
ethL1IFPMThresholdPortTypeIdx = _EthL1IFPMThresholdPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 3),
    _EthL1IFPMThresholdPortTypeIdx_Type()
)
ethL1IFPMThresholdPortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdPortTypeIdx.setStatus("current")


class _EthL1IFPMThresholdPortIdx_Type(Integer32):
    """Custom type ethL1IFPMThresholdPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_EthL1IFPMThresholdPortIdx_Type.__name__ = "Integer32"
_EthL1IFPMThresholdPortIdx_Object = MibTableColumn
ethL1IFPMThresholdPortIdx = _EthL1IFPMThresholdPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 4),
    _EthL1IFPMThresholdPortIdx_Type()
)
ethL1IFPMThresholdPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdPortIdx.setStatus("current")
_EthL1IFPMThresholdIntervalTypeIdx_Type = PMIntervalType
_EthL1IFPMThresholdIntervalTypeIdx_Object = MibTableColumn
ethL1IFPMThresholdIntervalTypeIdx = _EthL1IFPMThresholdIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 5),
    _EthL1IFPMThresholdIntervalTypeIdx_Type()
)
ethL1IFPMThresholdIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdIntervalTypeIdx.setStatus("current")
_EthL1IFPMThresholdCVValue_Type = Unsigned32
_EthL1IFPMThresholdCVValue_Object = MibTableColumn
ethL1IFPMThresholdCVValue = _EthL1IFPMThresholdCVValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 6),
    _EthL1IFPMThresholdCVValue_Type()
)
ethL1IFPMThresholdCVValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdCVValue.setStatus("current")
_EthL1IFPMThresholdINVBLKValue_Type = Unsigned32
_EthL1IFPMThresholdINVBLKValue_Object = MibTableColumn
ethL1IFPMThresholdINVBLKValue = _EthL1IFPMThresholdINVBLKValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 7),
    _EthL1IFPMThresholdINVBLKValue_Type()
)
ethL1IFPMThresholdINVBLKValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdINVBLKValue.setStatus("current")
_EthL1IFPMThresholdESValue_Type = Unsigned32
_EthL1IFPMThresholdESValue_Object = MibTableColumn
ethL1IFPMThresholdESValue = _EthL1IFPMThresholdESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 8),
    _EthL1IFPMThresholdESValue_Type()
)
ethL1IFPMThresholdESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdESValue.setStatus("current")
_EthL1IFPMThresholdSESValue_Type = Unsigned32
_EthL1IFPMThresholdSESValue_Object = MibTableColumn
ethL1IFPMThresholdSESValue = _EthL1IFPMThresholdSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 9),
    _EthL1IFPMThresholdSESValue_Type()
)
ethL1IFPMThresholdSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdSESValue.setStatus("current")
_EthL1IFPMThresholdOTUEBValue_Type = Unsigned32
_EthL1IFPMThresholdOTUEBValue_Object = MibTableColumn
ethL1IFPMThresholdOTUEBValue = _EthL1IFPMThresholdOTUEBValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 10),
    _EthL1IFPMThresholdOTUEBValue_Type()
)
ethL1IFPMThresholdOTUEBValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdOTUEBValue.setStatus("current")
_EthL1IFPMThresholdOTUBBEValue_Type = Unsigned32
_EthL1IFPMThresholdOTUBBEValue_Object = MibTableColumn
ethL1IFPMThresholdOTUBBEValue = _EthL1IFPMThresholdOTUBBEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 11),
    _EthL1IFPMThresholdOTUBBEValue_Type()
)
ethL1IFPMThresholdOTUBBEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdOTUBBEValue.setStatus("current")
_EthL1IFPMThresholdOTUESValue_Type = Unsigned32
_EthL1IFPMThresholdOTUESValue_Object = MibTableColumn
ethL1IFPMThresholdOTUESValue = _EthL1IFPMThresholdOTUESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 12),
    _EthL1IFPMThresholdOTUESValue_Type()
)
ethL1IFPMThresholdOTUESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdOTUESValue.setStatus("current")
_EthL1IFPMThresholdOTUSESValue_Type = Unsigned32
_EthL1IFPMThresholdOTUSESValue_Object = MibTableColumn
ethL1IFPMThresholdOTUSESValue = _EthL1IFPMThresholdOTUSESValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 13),
    _EthL1IFPMThresholdOTUSESValue_Type()
)
ethL1IFPMThresholdOTUSESValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdOTUSESValue.setStatus("current")
_EthL1IFPMThresholdOTUOFSValue_Type = Unsigned32
_EthL1IFPMThresholdOTUOFSValue_Object = MibTableColumn
ethL1IFPMThresholdOTUOFSValue = _EthL1IFPMThresholdOTUOFSValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 14),
    _EthL1IFPMThresholdOTUOFSValue_Type()
)
ethL1IFPMThresholdOTUOFSValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdOTUOFSValue.setStatus("current")
_EthL1IFPMThresholdUNCRCDWValue_Type = Unsigned32
_EthL1IFPMThresholdUNCRCDWValue_Object = MibTableColumn
ethL1IFPMThresholdUNCRCDWValue = _EthL1IFPMThresholdUNCRCDWValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 15),
    _EthL1IFPMThresholdUNCRCDWValue_Type()
)
ethL1IFPMThresholdUNCRCDWValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdUNCRCDWValue.setStatus("current")
_EthL1IFPMThresholdUASValue_Type = Unsigned32
_EthL1IFPMThresholdUASValue_Object = MibTableColumn
ethL1IFPMThresholdUASValue = _EthL1IFPMThresholdUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 16),
    _EthL1IFPMThresholdUASValue_Type()
)
ethL1IFPMThresholdUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdUASValue.setStatus("current")
_EthL1IFPMThresholdOTUUASValue_Type = Unsigned32
_EthL1IFPMThresholdOTUUASValue_Object = MibTableColumn
ethL1IFPMThresholdOTUUASValue = _EthL1IFPMThresholdOTUUASValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 17),
    _EthL1IFPMThresholdOTUUASValue_Type()
)
ethL1IFPMThresholdOTUUASValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethL1IFPMThresholdOTUUASValue.setStatus("current")
_PvxL2IFCrntPMTable_Object = MibTable
pvxL2IFCrntPMTable = _PvxL2IFCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29)
)
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTable.setStatus("current")
_PvxL2IFCrntPMEntry_Object = MibTableRow
pvxL2IFCrntPMEntry = _PvxL2IFCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1)
)
pvxL2IFCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "pvxL2IFCrntPMSwitchIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFCrntPMPortTypeIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    pvxL2IFCrntPMEntry.setStatus("current")


class _PvxL2IFCrntPMSwitchIdx_Type(Integer32):
    """Custom type pvxL2IFCrntPMSwitchIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_PvxL2IFCrntPMSwitchIdx_Type.__name__ = "Integer32"
_PvxL2IFCrntPMSwitchIdx_Object = MibTableColumn
pvxL2IFCrntPMSwitchIdx = _PvxL2IFCrntPMSwitchIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 1),
    _PvxL2IFCrntPMSwitchIdx_Type()
)
pvxL2IFCrntPMSwitchIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSwitchIdx.setStatus("current")


class _PvxL2IFCrntPMShelfIdx_Type(Integer32):
    """Custom type pvxL2IFCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_PvxL2IFCrntPMShelfIdx_Type.__name__ = "Integer32"
_PvxL2IFCrntPMShelfIdx_Object = MibTableColumn
pvxL2IFCrntPMShelfIdx = _PvxL2IFCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 2),
    _PvxL2IFCrntPMShelfIdx_Type()
)
pvxL2IFCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMShelfIdx.setStatus("current")


class _PvxL2IFCrntPMSlotIdx_Type(Integer32):
    """Custom type pvxL2IFCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_PvxL2IFCrntPMSlotIdx_Type.__name__ = "Integer32"
_PvxL2IFCrntPMSlotIdx_Object = MibTableColumn
pvxL2IFCrntPMSlotIdx = _PvxL2IFCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 3),
    _PvxL2IFCrntPMSlotIdx_Type()
)
pvxL2IFCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSlotIdx.setStatus("current")
_PvxL2IFCrntPMPortTypeIdx_Type = PvxPortType
_PvxL2IFCrntPMPortTypeIdx_Object = MibTableColumn
pvxL2IFCrntPMPortTypeIdx = _PvxL2IFCrntPMPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 4),
    _PvxL2IFCrntPMPortTypeIdx_Type()
)
pvxL2IFCrntPMPortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMPortTypeIdx.setStatus("current")


class _PvxL2IFCrntPMPortIdx_Type(Integer32):
    """Custom type pvxL2IFCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_PvxL2IFCrntPMPortIdx_Type.__name__ = "Integer32"
_PvxL2IFCrntPMPortIdx_Object = MibTableColumn
pvxL2IFCrntPMPortIdx = _PvxL2IFCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 5),
    _PvxL2IFCrntPMPortIdx_Type()
)
pvxL2IFCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMPortIdx.setStatus("current")
_PvxL2IFCrntPMIntervalTypeIdx_Type = PMIntervalType
_PvxL2IFCrntPMIntervalTypeIdx_Object = MibTableColumn
pvxL2IFCrntPMIntervalTypeIdx = _PvxL2IFCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 6),
    _PvxL2IFCrntPMIntervalTypeIdx_Type()
)
pvxL2IFCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMIntervalTypeIdx.setStatus("current")
_PvxL2IFCrntPMTFRCRXValue_Type = Unsigned64
_PvxL2IFCrntPMTFRCRXValue_Object = MibTableColumn
pvxL2IFCrntPMTFRCRXValue = _PvxL2IFCrntPMTFRCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 7),
    _PvxL2IFCrntPMTFRCRXValue_Type()
)
pvxL2IFCrntPMTFRCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTFRCRXValue.setStatus("current")
_PvxL2IFCrntPMTFRCRXTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMTFRCRXTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMTFRCRXTimeStamp = _PvxL2IFCrntPMTFRCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 8),
    _PvxL2IFCrntPMTFRCRXTimeStamp_Type()
)
pvxL2IFCrntPMTFRCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTFRCRXTimeStamp.setStatus("current")
_PvxL2IFCrntPMTFRCRXValidity_Type = PMValidity
_PvxL2IFCrntPMTFRCRXValidity_Object = MibTableColumn
pvxL2IFCrntPMTFRCRXValidity = _PvxL2IFCrntPMTFRCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 9),
    _PvxL2IFCrntPMTFRCRXValidity_Type()
)
pvxL2IFCrntPMTFRCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTFRCRXValidity.setStatus("current")
_PvxL2IFCrntPMTFRCRXInitialize_Type = InitializeCmd
_PvxL2IFCrntPMTFRCRXInitialize_Object = MibTableColumn
pvxL2IFCrntPMTFRCRXInitialize = _PvxL2IFCrntPMTFRCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 10),
    _PvxL2IFCrntPMTFRCRXInitialize_Type()
)
pvxL2IFCrntPMTFRCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTFRCRXInitialize.setStatus("current")
_PvxL2IFCrntPMTFRCTXValue_Type = Unsigned64
_PvxL2IFCrntPMTFRCTXValue_Object = MibTableColumn
pvxL2IFCrntPMTFRCTXValue = _PvxL2IFCrntPMTFRCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 11),
    _PvxL2IFCrntPMTFRCTXValue_Type()
)
pvxL2IFCrntPMTFRCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTFRCTXValue.setStatus("current")
_PvxL2IFCrntPMTFRCTXTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMTFRCTXTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMTFRCTXTimeStamp = _PvxL2IFCrntPMTFRCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 12),
    _PvxL2IFCrntPMTFRCTXTimeStamp_Type()
)
pvxL2IFCrntPMTFRCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTFRCTXTimeStamp.setStatus("current")
_PvxL2IFCrntPMTFRCTXValidity_Type = PMValidity
_PvxL2IFCrntPMTFRCTXValidity_Object = MibTableColumn
pvxL2IFCrntPMTFRCTXValidity = _PvxL2IFCrntPMTFRCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 13),
    _PvxL2IFCrntPMTFRCTXValidity_Type()
)
pvxL2IFCrntPMTFRCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTFRCTXValidity.setStatus("current")
_PvxL2IFCrntPMTFRCTXInitialize_Type = InitializeCmd
_PvxL2IFCrntPMTFRCTXInitialize_Object = MibTableColumn
pvxL2IFCrntPMTFRCTXInitialize = _PvxL2IFCrntPMTFRCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 14),
    _PvxL2IFCrntPMTFRCTXInitialize_Type()
)
pvxL2IFCrntPMTFRCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTFRCTXInitialize.setStatus("current")
_PvxL2IFCrntPMFRDRValue_Type = Unsigned32
_PvxL2IFCrntPMFRDRValue_Object = MibTableColumn
pvxL2IFCrntPMFRDRValue = _PvxL2IFCrntPMFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 15),
    _PvxL2IFCrntPMFRDRValue_Type()
)
pvxL2IFCrntPMFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFRDRValue.setStatus("current")
_PvxL2IFCrntPMFRDRTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMFRDRTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMFRDRTimeStamp = _PvxL2IFCrntPMFRDRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 16),
    _PvxL2IFCrntPMFRDRTimeStamp_Type()
)
pvxL2IFCrntPMFRDRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFRDRTimeStamp.setStatus("current")
_PvxL2IFCrntPMFRDRValidity_Type = PMValidity
_PvxL2IFCrntPMFRDRValidity_Object = MibTableColumn
pvxL2IFCrntPMFRDRValidity = _PvxL2IFCrntPMFRDRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 17),
    _PvxL2IFCrntPMFRDRValidity_Type()
)
pvxL2IFCrntPMFRDRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFRDRValidity.setStatus("current")
_PvxL2IFCrntPMFRDRInitialize_Type = InitializeCmd
_PvxL2IFCrntPMFRDRInitialize_Object = MibTableColumn
pvxL2IFCrntPMFRDRInitialize = _PvxL2IFCrntPMFRDRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 18),
    _PvxL2IFCrntPMFRDRInitialize_Type()
)
pvxL2IFCrntPMFRDRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFRDRInitialize.setStatus("current")
_PvxL2IFCrntPMFCSEValue_Type = Unsigned32
_PvxL2IFCrntPMFCSEValue_Object = MibTableColumn
pvxL2IFCrntPMFCSEValue = _PvxL2IFCrntPMFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 19),
    _PvxL2IFCrntPMFCSEValue_Type()
)
pvxL2IFCrntPMFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFCSEValue.setStatus("current")
_PvxL2IFCrntPMFCSETimeStamp_Type = DateAndTime
_PvxL2IFCrntPMFCSETimeStamp_Object = MibTableColumn
pvxL2IFCrntPMFCSETimeStamp = _PvxL2IFCrntPMFCSETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 20),
    _PvxL2IFCrntPMFCSETimeStamp_Type()
)
pvxL2IFCrntPMFCSETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFCSETimeStamp.setStatus("current")
_PvxL2IFCrntPMFCSEValidity_Type = PMValidity
_PvxL2IFCrntPMFCSEValidity_Object = MibTableColumn
pvxL2IFCrntPMFCSEValidity = _PvxL2IFCrntPMFCSEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 21),
    _PvxL2IFCrntPMFCSEValidity_Type()
)
pvxL2IFCrntPMFCSEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFCSEValidity.setStatus("current")
_PvxL2IFCrntPMFCSEInitialize_Type = InitializeCmd
_PvxL2IFCrntPMFCSEInitialize_Object = MibTableColumn
pvxL2IFCrntPMFCSEInitialize = _PvxL2IFCrntPMFCSEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 22),
    _PvxL2IFCrntPMFCSEInitialize_Type()
)
pvxL2IFCrntPMFCSEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFCSEInitialize.setStatus("current")
_PvxL2IFCrntPMTBYCRXValue_Type = Unsigned64
_PvxL2IFCrntPMTBYCRXValue_Object = MibTableColumn
pvxL2IFCrntPMTBYCRXValue = _PvxL2IFCrntPMTBYCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 23),
    _PvxL2IFCrntPMTBYCRXValue_Type()
)
pvxL2IFCrntPMTBYCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTBYCRXValue.setStatus("current")
_PvxL2IFCrntPMTBYCRXTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMTBYCRXTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMTBYCRXTimeStamp = _PvxL2IFCrntPMTBYCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 24),
    _PvxL2IFCrntPMTBYCRXTimeStamp_Type()
)
pvxL2IFCrntPMTBYCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTBYCRXTimeStamp.setStatus("current")
_PvxL2IFCrntPMTBYCRXValidity_Type = PMValidity
_PvxL2IFCrntPMTBYCRXValidity_Object = MibTableColumn
pvxL2IFCrntPMTBYCRXValidity = _PvxL2IFCrntPMTBYCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 25),
    _PvxL2IFCrntPMTBYCRXValidity_Type()
)
pvxL2IFCrntPMTBYCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTBYCRXValidity.setStatus("current")
_PvxL2IFCrntPMTBYCRXInitialize_Type = InitializeCmd
_PvxL2IFCrntPMTBYCRXInitialize_Object = MibTableColumn
pvxL2IFCrntPMTBYCRXInitialize = _PvxL2IFCrntPMTBYCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 26),
    _PvxL2IFCrntPMTBYCRXInitialize_Type()
)
pvxL2IFCrntPMTBYCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTBYCRXInitialize.setStatus("current")
_PvxL2IFCrntPMTBYCTXValue_Type = Unsigned64
_PvxL2IFCrntPMTBYCTXValue_Object = MibTableColumn
pvxL2IFCrntPMTBYCTXValue = _PvxL2IFCrntPMTBYCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 27),
    _PvxL2IFCrntPMTBYCTXValue_Type()
)
pvxL2IFCrntPMTBYCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTBYCTXValue.setStatus("current")
_PvxL2IFCrntPMTBYCTXTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMTBYCTXTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMTBYCTXTimeStamp = _PvxL2IFCrntPMTBYCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 28),
    _PvxL2IFCrntPMTBYCTXTimeStamp_Type()
)
pvxL2IFCrntPMTBYCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTBYCTXTimeStamp.setStatus("current")
_PvxL2IFCrntPMTBYCTXValidity_Type = PMValidity
_PvxL2IFCrntPMTBYCTXValidity_Object = MibTableColumn
pvxL2IFCrntPMTBYCTXValidity = _PvxL2IFCrntPMTBYCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 29),
    _PvxL2IFCrntPMTBYCTXValidity_Type()
)
pvxL2IFCrntPMTBYCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTBYCTXValidity.setStatus("current")
_PvxL2IFCrntPMTBYCTXInitialize_Type = InitializeCmd
_PvxL2IFCrntPMTBYCTXInitialize_Object = MibTableColumn
pvxL2IFCrntPMTBYCTXInitialize = _PvxL2IFCrntPMTBYCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 30),
    _PvxL2IFCrntPMTBYCTXInitialize_Type()
)
pvxL2IFCrntPMTBYCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTBYCTXInitialize.setStatus("current")
_PvxL2IFCrntPMBCSTValue_Type = Unsigned64
_PvxL2IFCrntPMBCSTValue_Object = MibTableColumn
pvxL2IFCrntPMBCSTValue = _PvxL2IFCrntPMBCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 31),
    _PvxL2IFCrntPMBCSTValue_Type()
)
pvxL2IFCrntPMBCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMBCSTValue.setStatus("current")
_PvxL2IFCrntPMBCSTTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMBCSTTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMBCSTTimeStamp = _PvxL2IFCrntPMBCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 32),
    _PvxL2IFCrntPMBCSTTimeStamp_Type()
)
pvxL2IFCrntPMBCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMBCSTTimeStamp.setStatus("current")
_PvxL2IFCrntPMBCSTValidity_Type = PMValidity
_PvxL2IFCrntPMBCSTValidity_Object = MibTableColumn
pvxL2IFCrntPMBCSTValidity = _PvxL2IFCrntPMBCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 33),
    _PvxL2IFCrntPMBCSTValidity_Type()
)
pvxL2IFCrntPMBCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMBCSTValidity.setStatus("current")
_PvxL2IFCrntPMBCSTInitialize_Type = InitializeCmd
_PvxL2IFCrntPMBCSTInitialize_Object = MibTableColumn
pvxL2IFCrntPMBCSTInitialize = _PvxL2IFCrntPMBCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 34),
    _PvxL2IFCrntPMBCSTInitialize_Type()
)
pvxL2IFCrntPMBCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMBCSTInitialize.setStatus("current")
_PvxL2IFCrntPMMCSTValue_Type = Unsigned64
_PvxL2IFCrntPMMCSTValue_Object = MibTableColumn
pvxL2IFCrntPMMCSTValue = _PvxL2IFCrntPMMCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 35),
    _PvxL2IFCrntPMMCSTValue_Type()
)
pvxL2IFCrntPMMCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMMCSTValue.setStatus("current")
_PvxL2IFCrntPMMCSTTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMMCSTTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMMCSTTimeStamp = _PvxL2IFCrntPMMCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 36),
    _PvxL2IFCrntPMMCSTTimeStamp_Type()
)
pvxL2IFCrntPMMCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMMCSTTimeStamp.setStatus("current")
_PvxL2IFCrntPMMCSTValidity_Type = PMValidity
_PvxL2IFCrntPMMCSTValidity_Object = MibTableColumn
pvxL2IFCrntPMMCSTValidity = _PvxL2IFCrntPMMCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 37),
    _PvxL2IFCrntPMMCSTValidity_Type()
)
pvxL2IFCrntPMMCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMMCSTValidity.setStatus("current")
_PvxL2IFCrntPMMCSTInitialize_Type = InitializeCmd
_PvxL2IFCrntPMMCSTInitialize_Object = MibTableColumn
pvxL2IFCrntPMMCSTInitialize = _PvxL2IFCrntPMMCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 38),
    _PvxL2IFCrntPMMCSTInitialize_Type()
)
pvxL2IFCrntPMMCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMMCSTInitialize.setStatus("current")
_PvxL2IFCrntPMSIZE64Value_Type = Unsigned64
_PvxL2IFCrntPMSIZE64Value_Object = MibTableColumn
pvxL2IFCrntPMSIZE64Value = _PvxL2IFCrntPMSIZE64Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 39),
    _PvxL2IFCrntPMSIZE64Value_Type()
)
pvxL2IFCrntPMSIZE64Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE64Value.setStatus("current")
_PvxL2IFCrntPMSIZE64TimeStamp_Type = DateAndTime
_PvxL2IFCrntPMSIZE64TimeStamp_Object = MibTableColumn
pvxL2IFCrntPMSIZE64TimeStamp = _PvxL2IFCrntPMSIZE64TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 40),
    _PvxL2IFCrntPMSIZE64TimeStamp_Type()
)
pvxL2IFCrntPMSIZE64TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE64TimeStamp.setStatus("current")
_PvxL2IFCrntPMSIZE64Validity_Type = PMValidity
_PvxL2IFCrntPMSIZE64Validity_Object = MibTableColumn
pvxL2IFCrntPMSIZE64Validity = _PvxL2IFCrntPMSIZE64Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 41),
    _PvxL2IFCrntPMSIZE64Validity_Type()
)
pvxL2IFCrntPMSIZE64Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE64Validity.setStatus("current")
_PvxL2IFCrntPMSIZE64Initialize_Type = InitializeCmd
_PvxL2IFCrntPMSIZE64Initialize_Object = MibTableColumn
pvxL2IFCrntPMSIZE64Initialize = _PvxL2IFCrntPMSIZE64Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 42),
    _PvxL2IFCrntPMSIZE64Initialize_Type()
)
pvxL2IFCrntPMSIZE64Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE64Initialize.setStatus("current")
_PvxL2IFCrntPMSIZE65To127Value_Type = Unsigned64
_PvxL2IFCrntPMSIZE65To127Value_Object = MibTableColumn
pvxL2IFCrntPMSIZE65To127Value = _PvxL2IFCrntPMSIZE65To127Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 43),
    _PvxL2IFCrntPMSIZE65To127Value_Type()
)
pvxL2IFCrntPMSIZE65To127Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE65To127Value.setStatus("current")
_PvxL2IFCrntPMSIZE65To127TimeStamp_Type = DateAndTime
_PvxL2IFCrntPMSIZE65To127TimeStamp_Object = MibTableColumn
pvxL2IFCrntPMSIZE65To127TimeStamp = _PvxL2IFCrntPMSIZE65To127TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 44),
    _PvxL2IFCrntPMSIZE65To127TimeStamp_Type()
)
pvxL2IFCrntPMSIZE65To127TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE65To127TimeStamp.setStatus("current")
_PvxL2IFCrntPMSIZE65To127Validity_Type = PMValidity
_PvxL2IFCrntPMSIZE65To127Validity_Object = MibTableColumn
pvxL2IFCrntPMSIZE65To127Validity = _PvxL2IFCrntPMSIZE65To127Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 45),
    _PvxL2IFCrntPMSIZE65To127Validity_Type()
)
pvxL2IFCrntPMSIZE65To127Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE65To127Validity.setStatus("current")
_PvxL2IFCrntPMSIZE65To127Initialize_Type = InitializeCmd
_PvxL2IFCrntPMSIZE65To127Initialize_Object = MibTableColumn
pvxL2IFCrntPMSIZE65To127Initialize = _PvxL2IFCrntPMSIZE65To127Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 46),
    _PvxL2IFCrntPMSIZE65To127Initialize_Type()
)
pvxL2IFCrntPMSIZE65To127Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE65To127Initialize.setStatus("current")
_PvxL2IFCrntPMSIZE128To255Value_Type = Unsigned64
_PvxL2IFCrntPMSIZE128To255Value_Object = MibTableColumn
pvxL2IFCrntPMSIZE128To255Value = _PvxL2IFCrntPMSIZE128To255Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 47),
    _PvxL2IFCrntPMSIZE128To255Value_Type()
)
pvxL2IFCrntPMSIZE128To255Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE128To255Value.setStatus("current")
_PvxL2IFCrntPMSIZE128To255TimeStamp_Type = DateAndTime
_PvxL2IFCrntPMSIZE128To255TimeStamp_Object = MibTableColumn
pvxL2IFCrntPMSIZE128To255TimeStamp = _PvxL2IFCrntPMSIZE128To255TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 48),
    _PvxL2IFCrntPMSIZE128To255TimeStamp_Type()
)
pvxL2IFCrntPMSIZE128To255TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE128To255TimeStamp.setStatus("current")
_PvxL2IFCrntPMSIZE128To255Validity_Type = PMValidity
_PvxL2IFCrntPMSIZE128To255Validity_Object = MibTableColumn
pvxL2IFCrntPMSIZE128To255Validity = _PvxL2IFCrntPMSIZE128To255Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 49),
    _PvxL2IFCrntPMSIZE128To255Validity_Type()
)
pvxL2IFCrntPMSIZE128To255Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE128To255Validity.setStatus("current")
_PvxL2IFCrntPMSIZE128To255Initialize_Type = InitializeCmd
_PvxL2IFCrntPMSIZE128To255Initialize_Object = MibTableColumn
pvxL2IFCrntPMSIZE128To255Initialize = _PvxL2IFCrntPMSIZE128To255Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 50),
    _PvxL2IFCrntPMSIZE128To255Initialize_Type()
)
pvxL2IFCrntPMSIZE128To255Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE128To255Initialize.setStatus("current")
_PvxL2IFCrntPMSIZE256To511Value_Type = Unsigned64
_PvxL2IFCrntPMSIZE256To511Value_Object = MibTableColumn
pvxL2IFCrntPMSIZE256To511Value = _PvxL2IFCrntPMSIZE256To511Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 51),
    _PvxL2IFCrntPMSIZE256To511Value_Type()
)
pvxL2IFCrntPMSIZE256To511Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE256To511Value.setStatus("current")
_PvxL2IFCrntPMSIZE256To511TimeStamp_Type = DateAndTime
_PvxL2IFCrntPMSIZE256To511TimeStamp_Object = MibTableColumn
pvxL2IFCrntPMSIZE256To511TimeStamp = _PvxL2IFCrntPMSIZE256To511TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 52),
    _PvxL2IFCrntPMSIZE256To511TimeStamp_Type()
)
pvxL2IFCrntPMSIZE256To511TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE256To511TimeStamp.setStatus("current")
_PvxL2IFCrntPMSIZE256To511Validity_Type = PMValidity
_PvxL2IFCrntPMSIZE256To511Validity_Object = MibTableColumn
pvxL2IFCrntPMSIZE256To511Validity = _PvxL2IFCrntPMSIZE256To511Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 53),
    _PvxL2IFCrntPMSIZE256To511Validity_Type()
)
pvxL2IFCrntPMSIZE256To511Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE256To511Validity.setStatus("current")
_PvxL2IFCrntPMSIZE256To511Initialize_Type = InitializeCmd
_PvxL2IFCrntPMSIZE256To511Initialize_Object = MibTableColumn
pvxL2IFCrntPMSIZE256To511Initialize = _PvxL2IFCrntPMSIZE256To511Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 54),
    _PvxL2IFCrntPMSIZE256To511Initialize_Type()
)
pvxL2IFCrntPMSIZE256To511Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE256To511Initialize.setStatus("current")
_PvxL2IFCrntPMSIZE512To1023Value_Type = Unsigned64
_PvxL2IFCrntPMSIZE512To1023Value_Object = MibTableColumn
pvxL2IFCrntPMSIZE512To1023Value = _PvxL2IFCrntPMSIZE512To1023Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 55),
    _PvxL2IFCrntPMSIZE512To1023Value_Type()
)
pvxL2IFCrntPMSIZE512To1023Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE512To1023Value.setStatus("current")
_PvxL2IFCrntPMSIZE512To1023TimeStamp_Type = DateAndTime
_PvxL2IFCrntPMSIZE512To1023TimeStamp_Object = MibTableColumn
pvxL2IFCrntPMSIZE512To1023TimeStamp = _PvxL2IFCrntPMSIZE512To1023TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 56),
    _PvxL2IFCrntPMSIZE512To1023TimeStamp_Type()
)
pvxL2IFCrntPMSIZE512To1023TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE512To1023TimeStamp.setStatus("current")
_PvxL2IFCrntPMSIZE512To1023Validity_Type = PMValidity
_PvxL2IFCrntPMSIZE512To1023Validity_Object = MibTableColumn
pvxL2IFCrntPMSIZE512To1023Validity = _PvxL2IFCrntPMSIZE512To1023Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 57),
    _PvxL2IFCrntPMSIZE512To1023Validity_Type()
)
pvxL2IFCrntPMSIZE512To1023Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE512To1023Validity.setStatus("current")
_PvxL2IFCrntPMSIZE512To1023Initialize_Type = InitializeCmd
_PvxL2IFCrntPMSIZE512To1023Initialize_Object = MibTableColumn
pvxL2IFCrntPMSIZE512To1023Initialize = _PvxL2IFCrntPMSIZE512To1023Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 58),
    _PvxL2IFCrntPMSIZE512To1023Initialize_Type()
)
pvxL2IFCrntPMSIZE512To1023Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE512To1023Initialize.setStatus("current")
_PvxL2IFCrntPMSIZE1024To1518Value_Type = Unsigned64
_PvxL2IFCrntPMSIZE1024To1518Value_Object = MibTableColumn
pvxL2IFCrntPMSIZE1024To1518Value = _PvxL2IFCrntPMSIZE1024To1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 59),
    _PvxL2IFCrntPMSIZE1024To1518Value_Type()
)
pvxL2IFCrntPMSIZE1024To1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE1024To1518Value.setStatus("current")
_PvxL2IFCrntPMSIZE1024To1518TimeStamp_Type = DateAndTime
_PvxL2IFCrntPMSIZE1024To1518TimeStamp_Object = MibTableColumn
pvxL2IFCrntPMSIZE1024To1518TimeStamp = _PvxL2IFCrntPMSIZE1024To1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 60),
    _PvxL2IFCrntPMSIZE1024To1518TimeStamp_Type()
)
pvxL2IFCrntPMSIZE1024To1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE1024To1518TimeStamp.setStatus("current")
_PvxL2IFCrntPMSIZE1024To1518Validity_Type = PMValidity
_PvxL2IFCrntPMSIZE1024To1518Validity_Object = MibTableColumn
pvxL2IFCrntPMSIZE1024To1518Validity = _PvxL2IFCrntPMSIZE1024To1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 61),
    _PvxL2IFCrntPMSIZE1024To1518Validity_Type()
)
pvxL2IFCrntPMSIZE1024To1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE1024To1518Validity.setStatus("current")
_PvxL2IFCrntPMSIZE1024To1518Initialize_Type = InitializeCmd
_PvxL2IFCrntPMSIZE1024To1518Initialize_Object = MibTableColumn
pvxL2IFCrntPMSIZE1024To1518Initialize = _PvxL2IFCrntPMSIZE1024To1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 62),
    _PvxL2IFCrntPMSIZE1024To1518Initialize_Type()
)
pvxL2IFCrntPMSIZE1024To1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZE1024To1518Initialize.setStatus("current")
_PvxL2IFCrntPMSIZEOver1518Value_Type = Unsigned64
_PvxL2IFCrntPMSIZEOver1518Value_Object = MibTableColumn
pvxL2IFCrntPMSIZEOver1518Value = _PvxL2IFCrntPMSIZEOver1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 63),
    _PvxL2IFCrntPMSIZEOver1518Value_Type()
)
pvxL2IFCrntPMSIZEOver1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZEOver1518Value.setStatus("current")
_PvxL2IFCrntPMSIZEOver1518TimeStamp_Type = DateAndTime
_PvxL2IFCrntPMSIZEOver1518TimeStamp_Object = MibTableColumn
pvxL2IFCrntPMSIZEOver1518TimeStamp = _PvxL2IFCrntPMSIZEOver1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 64),
    _PvxL2IFCrntPMSIZEOver1518TimeStamp_Type()
)
pvxL2IFCrntPMSIZEOver1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZEOver1518TimeStamp.setStatus("current")
_PvxL2IFCrntPMSIZEOver1518Validity_Type = PMValidity
_PvxL2IFCrntPMSIZEOver1518Validity_Object = MibTableColumn
pvxL2IFCrntPMSIZEOver1518Validity = _PvxL2IFCrntPMSIZEOver1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 65),
    _PvxL2IFCrntPMSIZEOver1518Validity_Type()
)
pvxL2IFCrntPMSIZEOver1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZEOver1518Validity.setStatus("current")
_PvxL2IFCrntPMSIZEOver1518Initialize_Type = InitializeCmd
_PvxL2IFCrntPMSIZEOver1518Initialize_Object = MibTableColumn
pvxL2IFCrntPMSIZEOver1518Initialize = _PvxL2IFCrntPMSIZEOver1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 66),
    _PvxL2IFCrntPMSIZEOver1518Initialize_Type()
)
pvxL2IFCrntPMSIZEOver1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMSIZEOver1518Initialize.setStatus("current")
_PvxL2IFCrntPMTPFCRXValue_Type = Unsigned64
_PvxL2IFCrntPMTPFCRXValue_Object = MibTableColumn
pvxL2IFCrntPMTPFCRXValue = _PvxL2IFCrntPMTPFCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 67),
    _PvxL2IFCrntPMTPFCRXValue_Type()
)
pvxL2IFCrntPMTPFCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTPFCRXValue.setStatus("current")
_PvxL2IFCrntPMTPFCRXTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMTPFCRXTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMTPFCRXTimeStamp = _PvxL2IFCrntPMTPFCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 68),
    _PvxL2IFCrntPMTPFCRXTimeStamp_Type()
)
pvxL2IFCrntPMTPFCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTPFCRXTimeStamp.setStatus("current")
_PvxL2IFCrntPMTPFCRXValidity_Type = PMValidity
_PvxL2IFCrntPMTPFCRXValidity_Object = MibTableColumn
pvxL2IFCrntPMTPFCRXValidity = _PvxL2IFCrntPMTPFCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 69),
    _PvxL2IFCrntPMTPFCRXValidity_Type()
)
pvxL2IFCrntPMTPFCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTPFCRXValidity.setStatus("current")
_PvxL2IFCrntPMTPFCRXInitialize_Type = InitializeCmd
_PvxL2IFCrntPMTPFCRXInitialize_Object = MibTableColumn
pvxL2IFCrntPMTPFCRXInitialize = _PvxL2IFCrntPMTPFCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 70),
    _PvxL2IFCrntPMTPFCRXInitialize_Type()
)
pvxL2IFCrntPMTPFCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTPFCRXInitialize.setStatus("current")
_PvxL2IFCrntPMTPFCTXValue_Type = Unsigned64
_PvxL2IFCrntPMTPFCTXValue_Object = MibTableColumn
pvxL2IFCrntPMTPFCTXValue = _PvxL2IFCrntPMTPFCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 71),
    _PvxL2IFCrntPMTPFCTXValue_Type()
)
pvxL2IFCrntPMTPFCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTPFCTXValue.setStatus("current")
_PvxL2IFCrntPMTPFCTXTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMTPFCTXTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMTPFCTXTimeStamp = _PvxL2IFCrntPMTPFCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 72),
    _PvxL2IFCrntPMTPFCTXTimeStamp_Type()
)
pvxL2IFCrntPMTPFCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTPFCTXTimeStamp.setStatus("current")
_PvxL2IFCrntPMTPFCTXValidity_Type = PMValidity
_PvxL2IFCrntPMTPFCTXValidity_Object = MibTableColumn
pvxL2IFCrntPMTPFCTXValidity = _PvxL2IFCrntPMTPFCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 73),
    _PvxL2IFCrntPMTPFCTXValidity_Type()
)
pvxL2IFCrntPMTPFCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTPFCTXValidity.setStatus("current")
_PvxL2IFCrntPMTPFCTXInitialize_Type = InitializeCmd
_PvxL2IFCrntPMTPFCTXInitialize_Object = MibTableColumn
pvxL2IFCrntPMTPFCTXInitialize = _PvxL2IFCrntPMTPFCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 74),
    _PvxL2IFCrntPMTPFCTXInitialize_Type()
)
pvxL2IFCrntPMTPFCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMTPFCTXInitialize.setStatus("current")
_PvxL2IFCrntPMUSIZEValue_Type = Unsigned32
_PvxL2IFCrntPMUSIZEValue_Object = MibTableColumn
pvxL2IFCrntPMUSIZEValue = _PvxL2IFCrntPMUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 75),
    _PvxL2IFCrntPMUSIZEValue_Type()
)
pvxL2IFCrntPMUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMUSIZEValue.setStatus("current")
_PvxL2IFCrntPMUSIZETimeStamp_Type = DateAndTime
_PvxL2IFCrntPMUSIZETimeStamp_Object = MibTableColumn
pvxL2IFCrntPMUSIZETimeStamp = _PvxL2IFCrntPMUSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 76),
    _PvxL2IFCrntPMUSIZETimeStamp_Type()
)
pvxL2IFCrntPMUSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMUSIZETimeStamp.setStatus("current")
_PvxL2IFCrntPMUSIZEValidity_Type = PMValidity
_PvxL2IFCrntPMUSIZEValidity_Object = MibTableColumn
pvxL2IFCrntPMUSIZEValidity = _PvxL2IFCrntPMUSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 77),
    _PvxL2IFCrntPMUSIZEValidity_Type()
)
pvxL2IFCrntPMUSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMUSIZEValidity.setStatus("current")
_PvxL2IFCrntPMUSIZEInitialize_Type = InitializeCmd
_PvxL2IFCrntPMUSIZEInitialize_Object = MibTableColumn
pvxL2IFCrntPMUSIZEInitialize = _PvxL2IFCrntPMUSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 78),
    _PvxL2IFCrntPMUSIZEInitialize_Type()
)
pvxL2IFCrntPMUSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMUSIZEInitialize.setStatus("current")
_PvxL2IFCrntPMOSIZEValue_Type = Unsigned32
_PvxL2IFCrntPMOSIZEValue_Object = MibTableColumn
pvxL2IFCrntPMOSIZEValue = _PvxL2IFCrntPMOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 79),
    _PvxL2IFCrntPMOSIZEValue_Type()
)
pvxL2IFCrntPMOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMOSIZEValue.setStatus("current")
_PvxL2IFCrntPMOSIZETimeStamp_Type = DateAndTime
_PvxL2IFCrntPMOSIZETimeStamp_Object = MibTableColumn
pvxL2IFCrntPMOSIZETimeStamp = _PvxL2IFCrntPMOSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 80),
    _PvxL2IFCrntPMOSIZETimeStamp_Type()
)
pvxL2IFCrntPMOSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMOSIZETimeStamp.setStatus("current")
_PvxL2IFCrntPMOSIZEValidity_Type = PMValidity
_PvxL2IFCrntPMOSIZEValidity_Object = MibTableColumn
pvxL2IFCrntPMOSIZEValidity = _PvxL2IFCrntPMOSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 81),
    _PvxL2IFCrntPMOSIZEValidity_Type()
)
pvxL2IFCrntPMOSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMOSIZEValidity.setStatus("current")
_PvxL2IFCrntPMOSIZEInitialize_Type = InitializeCmd
_PvxL2IFCrntPMOSIZEInitialize_Object = MibTableColumn
pvxL2IFCrntPMOSIZEInitialize = _PvxL2IFCrntPMOSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 82),
    _PvxL2IFCrntPMOSIZEInitialize_Type()
)
pvxL2IFCrntPMOSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMOSIZEInitialize.setStatus("current")
_PvxL2IFCrntPMFRGTValue_Type = Unsigned32
_PvxL2IFCrntPMFRGTValue_Object = MibTableColumn
pvxL2IFCrntPMFRGTValue = _PvxL2IFCrntPMFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 83),
    _PvxL2IFCrntPMFRGTValue_Type()
)
pvxL2IFCrntPMFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFRGTValue.setStatus("current")
_PvxL2IFCrntPMFRGTTimeStamp_Type = DateAndTime
_PvxL2IFCrntPMFRGTTimeStamp_Object = MibTableColumn
pvxL2IFCrntPMFRGTTimeStamp = _PvxL2IFCrntPMFRGTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 84),
    _PvxL2IFCrntPMFRGTTimeStamp_Type()
)
pvxL2IFCrntPMFRGTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFRGTTimeStamp.setStatus("current")
_PvxL2IFCrntPMFRGTValidity_Type = PMValidity
_PvxL2IFCrntPMFRGTValidity_Object = MibTableColumn
pvxL2IFCrntPMFRGTValidity = _PvxL2IFCrntPMFRGTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 85),
    _PvxL2IFCrntPMFRGTValidity_Type()
)
pvxL2IFCrntPMFRGTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFRGTValidity.setStatus("current")
_PvxL2IFCrntPMFRGTInitialize_Type = InitializeCmd
_PvxL2IFCrntPMFRGTInitialize_Object = MibTableColumn
pvxL2IFCrntPMFRGTInitialize = _PvxL2IFCrntPMFRGTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 86),
    _PvxL2IFCrntPMFRGTInitialize_Type()
)
pvxL2IFCrntPMFRGTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFCrntPMFRGTInitialize.setStatus("current")
_PvxL2IFHistPMTable_Object = MibTable
pvxL2IFHistPMTable = _PvxL2IFHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30)
)
if mibBuilder.loadTexts:
    pvxL2IFHistPMTable.setStatus("current")
_PvxL2IFHistPMEntry_Object = MibTableRow
pvxL2IFHistPMEntry = _PvxL2IFHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1)
)
pvxL2IFHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "pvxL2IFHistPMSwitchIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFHistPMPortTypeIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFHistPMPortIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    pvxL2IFHistPMEntry.setStatus("current")


class _PvxL2IFHistPMSwitchIdx_Type(Integer32):
    """Custom type pvxL2IFHistPMSwitchIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_PvxL2IFHistPMSwitchIdx_Type.__name__ = "Integer32"
_PvxL2IFHistPMSwitchIdx_Object = MibTableColumn
pvxL2IFHistPMSwitchIdx = _PvxL2IFHistPMSwitchIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 1),
    _PvxL2IFHistPMSwitchIdx_Type()
)
pvxL2IFHistPMSwitchIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSwitchIdx.setStatus("current")


class _PvxL2IFHistPMShelfIdx_Type(Integer32):
    """Custom type pvxL2IFHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_PvxL2IFHistPMShelfIdx_Type.__name__ = "Integer32"
_PvxL2IFHistPMShelfIdx_Object = MibTableColumn
pvxL2IFHistPMShelfIdx = _PvxL2IFHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 2),
    _PvxL2IFHistPMShelfIdx_Type()
)
pvxL2IFHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFHistPMShelfIdx.setStatus("current")


class _PvxL2IFHistPMSlotIdx_Type(Integer32):
    """Custom type pvxL2IFHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_PvxL2IFHistPMSlotIdx_Type.__name__ = "Integer32"
_PvxL2IFHistPMSlotIdx_Object = MibTableColumn
pvxL2IFHistPMSlotIdx = _PvxL2IFHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 3),
    _PvxL2IFHistPMSlotIdx_Type()
)
pvxL2IFHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSlotIdx.setStatus("current")
_PvxL2IFHistPMPortTypeIdx_Type = PvxPortType
_PvxL2IFHistPMPortTypeIdx_Object = MibTableColumn
pvxL2IFHistPMPortTypeIdx = _PvxL2IFHistPMPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 4),
    _PvxL2IFHistPMPortTypeIdx_Type()
)
pvxL2IFHistPMPortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFHistPMPortTypeIdx.setStatus("current")


class _PvxL2IFHistPMPortIdx_Type(Integer32):
    """Custom type pvxL2IFHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_PvxL2IFHistPMPortIdx_Type.__name__ = "Integer32"
_PvxL2IFHistPMPortIdx_Object = MibTableColumn
pvxL2IFHistPMPortIdx = _PvxL2IFHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 5),
    _PvxL2IFHistPMPortIdx_Type()
)
pvxL2IFHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFHistPMPortIdx.setStatus("current")
_PvxL2IFHistPMIntervalTypeIdx_Type = PMIntervalType
_PvxL2IFHistPMIntervalTypeIdx_Object = MibTableColumn
pvxL2IFHistPMIntervalTypeIdx = _PvxL2IFHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 6),
    _PvxL2IFHistPMIntervalTypeIdx_Type()
)
pvxL2IFHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFHistPMIntervalTypeIdx.setStatus("current")


class _PvxL2IFHistPMIntervalIdx_Type(Integer32):
    """Custom type pvxL2IFHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_PvxL2IFHistPMIntervalIdx_Type.__name__ = "Integer32"
_PvxL2IFHistPMIntervalIdx_Object = MibTableColumn
pvxL2IFHistPMIntervalIdx = _PvxL2IFHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 7),
    _PvxL2IFHistPMIntervalIdx_Type()
)
pvxL2IFHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFHistPMIntervalIdx.setStatus("current")
_PvxL2IFHistPMTFRCRXValue_Type = Unsigned64
_PvxL2IFHistPMTFRCRXValue_Object = MibTableColumn
pvxL2IFHistPMTFRCRXValue = _PvxL2IFHistPMTFRCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 8),
    _PvxL2IFHistPMTFRCRXValue_Type()
)
pvxL2IFHistPMTFRCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTFRCRXValue.setStatus("current")
_PvxL2IFHistPMTFRCRXTimeStamp_Type = DateAndTime
_PvxL2IFHistPMTFRCRXTimeStamp_Object = MibTableColumn
pvxL2IFHistPMTFRCRXTimeStamp = _PvxL2IFHistPMTFRCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 9),
    _PvxL2IFHistPMTFRCRXTimeStamp_Type()
)
pvxL2IFHistPMTFRCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTFRCRXTimeStamp.setStatus("current")
_PvxL2IFHistPMTFRCRXValidity_Type = PMValidity
_PvxL2IFHistPMTFRCRXValidity_Object = MibTableColumn
pvxL2IFHistPMTFRCRXValidity = _PvxL2IFHistPMTFRCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 10),
    _PvxL2IFHistPMTFRCRXValidity_Type()
)
pvxL2IFHistPMTFRCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTFRCRXValidity.setStatus("current")
_PvxL2IFHistPMTFRCRXInitialize_Type = InitializeCmd
_PvxL2IFHistPMTFRCRXInitialize_Object = MibTableColumn
pvxL2IFHistPMTFRCRXInitialize = _PvxL2IFHistPMTFRCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 11),
    _PvxL2IFHistPMTFRCRXInitialize_Type()
)
pvxL2IFHistPMTFRCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTFRCRXInitialize.setStatus("current")
_PvxL2IFHistPMTFRCTXValue_Type = Unsigned64
_PvxL2IFHistPMTFRCTXValue_Object = MibTableColumn
pvxL2IFHistPMTFRCTXValue = _PvxL2IFHistPMTFRCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 12),
    _PvxL2IFHistPMTFRCTXValue_Type()
)
pvxL2IFHistPMTFRCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTFRCTXValue.setStatus("current")
_PvxL2IFHistPMTFRCTXTimeStamp_Type = DateAndTime
_PvxL2IFHistPMTFRCTXTimeStamp_Object = MibTableColumn
pvxL2IFHistPMTFRCTXTimeStamp = _PvxL2IFHistPMTFRCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 13),
    _PvxL2IFHistPMTFRCTXTimeStamp_Type()
)
pvxL2IFHistPMTFRCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTFRCTXTimeStamp.setStatus("current")
_PvxL2IFHistPMTFRCTXValidity_Type = PMValidity
_PvxL2IFHistPMTFRCTXValidity_Object = MibTableColumn
pvxL2IFHistPMTFRCTXValidity = _PvxL2IFHistPMTFRCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 14),
    _PvxL2IFHistPMTFRCTXValidity_Type()
)
pvxL2IFHistPMTFRCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTFRCTXValidity.setStatus("current")
_PvxL2IFHistPMTFRCTXInitialize_Type = InitializeCmd
_PvxL2IFHistPMTFRCTXInitialize_Object = MibTableColumn
pvxL2IFHistPMTFRCTXInitialize = _PvxL2IFHistPMTFRCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 15),
    _PvxL2IFHistPMTFRCTXInitialize_Type()
)
pvxL2IFHistPMTFRCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTFRCTXInitialize.setStatus("current")
_PvxL2IFHistPMFRDRValue_Type = Unsigned32
_PvxL2IFHistPMFRDRValue_Object = MibTableColumn
pvxL2IFHistPMFRDRValue = _PvxL2IFHistPMFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 16),
    _PvxL2IFHistPMFRDRValue_Type()
)
pvxL2IFHistPMFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFRDRValue.setStatus("current")
_PvxL2IFHistPMFRDRTimeStamp_Type = DateAndTime
_PvxL2IFHistPMFRDRTimeStamp_Object = MibTableColumn
pvxL2IFHistPMFRDRTimeStamp = _PvxL2IFHistPMFRDRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 17),
    _PvxL2IFHistPMFRDRTimeStamp_Type()
)
pvxL2IFHistPMFRDRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFRDRTimeStamp.setStatus("current")
_PvxL2IFHistPMFRDRValidity_Type = PMValidity
_PvxL2IFHistPMFRDRValidity_Object = MibTableColumn
pvxL2IFHistPMFRDRValidity = _PvxL2IFHistPMFRDRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 18),
    _PvxL2IFHistPMFRDRValidity_Type()
)
pvxL2IFHistPMFRDRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFRDRValidity.setStatus("current")
_PvxL2IFHistPMFRDRInitialize_Type = InitializeCmd
_PvxL2IFHistPMFRDRInitialize_Object = MibTableColumn
pvxL2IFHistPMFRDRInitialize = _PvxL2IFHistPMFRDRInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 19),
    _PvxL2IFHistPMFRDRInitialize_Type()
)
pvxL2IFHistPMFRDRInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFRDRInitialize.setStatus("current")
_PvxL2IFHistPMFCSEValue_Type = Unsigned32
_PvxL2IFHistPMFCSEValue_Object = MibTableColumn
pvxL2IFHistPMFCSEValue = _PvxL2IFHistPMFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 20),
    _PvxL2IFHistPMFCSEValue_Type()
)
pvxL2IFHistPMFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFCSEValue.setStatus("current")
_PvxL2IFHistPMFCSETimeStamp_Type = DateAndTime
_PvxL2IFHistPMFCSETimeStamp_Object = MibTableColumn
pvxL2IFHistPMFCSETimeStamp = _PvxL2IFHistPMFCSETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 21),
    _PvxL2IFHistPMFCSETimeStamp_Type()
)
pvxL2IFHistPMFCSETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFCSETimeStamp.setStatus("current")
_PvxL2IFHistPMFCSEValidity_Type = PMValidity
_PvxL2IFHistPMFCSEValidity_Object = MibTableColumn
pvxL2IFHistPMFCSEValidity = _PvxL2IFHistPMFCSEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 22),
    _PvxL2IFHistPMFCSEValidity_Type()
)
pvxL2IFHistPMFCSEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFCSEValidity.setStatus("current")
_PvxL2IFHistPMFCSEInitialize_Type = InitializeCmd
_PvxL2IFHistPMFCSEInitialize_Object = MibTableColumn
pvxL2IFHistPMFCSEInitialize = _PvxL2IFHistPMFCSEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 23),
    _PvxL2IFHistPMFCSEInitialize_Type()
)
pvxL2IFHistPMFCSEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFCSEInitialize.setStatus("current")
_PvxL2IFHistPMTBYCRXValue_Type = Unsigned64
_PvxL2IFHistPMTBYCRXValue_Object = MibTableColumn
pvxL2IFHistPMTBYCRXValue = _PvxL2IFHistPMTBYCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 24),
    _PvxL2IFHistPMTBYCRXValue_Type()
)
pvxL2IFHistPMTBYCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTBYCRXValue.setStatus("current")
_PvxL2IFHistPMTBYCRXTimeStamp_Type = DateAndTime
_PvxL2IFHistPMTBYCRXTimeStamp_Object = MibTableColumn
pvxL2IFHistPMTBYCRXTimeStamp = _PvxL2IFHistPMTBYCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 25),
    _PvxL2IFHistPMTBYCRXTimeStamp_Type()
)
pvxL2IFHistPMTBYCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTBYCRXTimeStamp.setStatus("current")
_PvxL2IFHistPMTBYCRXValidity_Type = PMValidity
_PvxL2IFHistPMTBYCRXValidity_Object = MibTableColumn
pvxL2IFHistPMTBYCRXValidity = _PvxL2IFHistPMTBYCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 26),
    _PvxL2IFHistPMTBYCRXValidity_Type()
)
pvxL2IFHistPMTBYCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTBYCRXValidity.setStatus("current")
_PvxL2IFHistPMTBYCRXInitialize_Type = InitializeCmd
_PvxL2IFHistPMTBYCRXInitialize_Object = MibTableColumn
pvxL2IFHistPMTBYCRXInitialize = _PvxL2IFHistPMTBYCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 27),
    _PvxL2IFHistPMTBYCRXInitialize_Type()
)
pvxL2IFHistPMTBYCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTBYCRXInitialize.setStatus("current")
_PvxL2IFHistPMTBYCTXValue_Type = Unsigned64
_PvxL2IFHistPMTBYCTXValue_Object = MibTableColumn
pvxL2IFHistPMTBYCTXValue = _PvxL2IFHistPMTBYCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 28),
    _PvxL2IFHistPMTBYCTXValue_Type()
)
pvxL2IFHistPMTBYCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTBYCTXValue.setStatus("current")
_PvxL2IFHistPMTBYCTXTimeStamp_Type = DateAndTime
_PvxL2IFHistPMTBYCTXTimeStamp_Object = MibTableColumn
pvxL2IFHistPMTBYCTXTimeStamp = _PvxL2IFHistPMTBYCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 29),
    _PvxL2IFHistPMTBYCTXTimeStamp_Type()
)
pvxL2IFHistPMTBYCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTBYCTXTimeStamp.setStatus("current")
_PvxL2IFHistPMTBYCTXValidity_Type = PMValidity
_PvxL2IFHistPMTBYCTXValidity_Object = MibTableColumn
pvxL2IFHistPMTBYCTXValidity = _PvxL2IFHistPMTBYCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 30),
    _PvxL2IFHistPMTBYCTXValidity_Type()
)
pvxL2IFHistPMTBYCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTBYCTXValidity.setStatus("current")
_PvxL2IFHistPMTBYCTXInitialize_Type = InitializeCmd
_PvxL2IFHistPMTBYCTXInitialize_Object = MibTableColumn
pvxL2IFHistPMTBYCTXInitialize = _PvxL2IFHistPMTBYCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 31),
    _PvxL2IFHistPMTBYCTXInitialize_Type()
)
pvxL2IFHistPMTBYCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTBYCTXInitialize.setStatus("current")
_PvxL2IFHistPMBCSTValue_Type = Unsigned64
_PvxL2IFHistPMBCSTValue_Object = MibTableColumn
pvxL2IFHistPMBCSTValue = _PvxL2IFHistPMBCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 32),
    _PvxL2IFHistPMBCSTValue_Type()
)
pvxL2IFHistPMBCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMBCSTValue.setStatus("current")
_PvxL2IFHistPMBCSTTimeStamp_Type = DateAndTime
_PvxL2IFHistPMBCSTTimeStamp_Object = MibTableColumn
pvxL2IFHistPMBCSTTimeStamp = _PvxL2IFHistPMBCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 33),
    _PvxL2IFHistPMBCSTTimeStamp_Type()
)
pvxL2IFHistPMBCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMBCSTTimeStamp.setStatus("current")
_PvxL2IFHistPMBCSTValidity_Type = PMValidity
_PvxL2IFHistPMBCSTValidity_Object = MibTableColumn
pvxL2IFHistPMBCSTValidity = _PvxL2IFHistPMBCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 34),
    _PvxL2IFHistPMBCSTValidity_Type()
)
pvxL2IFHistPMBCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMBCSTValidity.setStatus("current")
_PvxL2IFHistPMBCSTInitialize_Type = InitializeCmd
_PvxL2IFHistPMBCSTInitialize_Object = MibTableColumn
pvxL2IFHistPMBCSTInitialize = _PvxL2IFHistPMBCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 35),
    _PvxL2IFHistPMBCSTInitialize_Type()
)
pvxL2IFHistPMBCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMBCSTInitialize.setStatus("current")
_PvxL2IFHistPMMCSTValue_Type = Unsigned64
_PvxL2IFHistPMMCSTValue_Object = MibTableColumn
pvxL2IFHistPMMCSTValue = _PvxL2IFHistPMMCSTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 36),
    _PvxL2IFHistPMMCSTValue_Type()
)
pvxL2IFHistPMMCSTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMMCSTValue.setStatus("current")
_PvxL2IFHistPMMCSTTimeStamp_Type = DateAndTime
_PvxL2IFHistPMMCSTTimeStamp_Object = MibTableColumn
pvxL2IFHistPMMCSTTimeStamp = _PvxL2IFHistPMMCSTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 37),
    _PvxL2IFHistPMMCSTTimeStamp_Type()
)
pvxL2IFHistPMMCSTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMMCSTTimeStamp.setStatus("current")
_PvxL2IFHistPMMCSTValidity_Type = PMValidity
_PvxL2IFHistPMMCSTValidity_Object = MibTableColumn
pvxL2IFHistPMMCSTValidity = _PvxL2IFHistPMMCSTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 38),
    _PvxL2IFHistPMMCSTValidity_Type()
)
pvxL2IFHistPMMCSTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMMCSTValidity.setStatus("current")
_PvxL2IFHistPMMCSTInitialize_Type = InitializeCmd
_PvxL2IFHistPMMCSTInitialize_Object = MibTableColumn
pvxL2IFHistPMMCSTInitialize = _PvxL2IFHistPMMCSTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 39),
    _PvxL2IFHistPMMCSTInitialize_Type()
)
pvxL2IFHistPMMCSTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMMCSTInitialize.setStatus("current")
_PvxL2IFHistPMSIZE64Value_Type = Unsigned64
_PvxL2IFHistPMSIZE64Value_Object = MibTableColumn
pvxL2IFHistPMSIZE64Value = _PvxL2IFHistPMSIZE64Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 40),
    _PvxL2IFHistPMSIZE64Value_Type()
)
pvxL2IFHistPMSIZE64Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE64Value.setStatus("current")
_PvxL2IFHistPMSIZE64TimeStamp_Type = DateAndTime
_PvxL2IFHistPMSIZE64TimeStamp_Object = MibTableColumn
pvxL2IFHistPMSIZE64TimeStamp = _PvxL2IFHistPMSIZE64TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 41),
    _PvxL2IFHistPMSIZE64TimeStamp_Type()
)
pvxL2IFHistPMSIZE64TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE64TimeStamp.setStatus("current")
_PvxL2IFHistPMSIZE64Validity_Type = PMValidity
_PvxL2IFHistPMSIZE64Validity_Object = MibTableColumn
pvxL2IFHistPMSIZE64Validity = _PvxL2IFHistPMSIZE64Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 42),
    _PvxL2IFHistPMSIZE64Validity_Type()
)
pvxL2IFHistPMSIZE64Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE64Validity.setStatus("current")
_PvxL2IFHistPMSIZE64Initialize_Type = InitializeCmd
_PvxL2IFHistPMSIZE64Initialize_Object = MibTableColumn
pvxL2IFHistPMSIZE64Initialize = _PvxL2IFHistPMSIZE64Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 43),
    _PvxL2IFHistPMSIZE64Initialize_Type()
)
pvxL2IFHistPMSIZE64Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE64Initialize.setStatus("current")
_PvxL2IFHistPMSIZE65To127Value_Type = Unsigned64
_PvxL2IFHistPMSIZE65To127Value_Object = MibTableColumn
pvxL2IFHistPMSIZE65To127Value = _PvxL2IFHistPMSIZE65To127Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 44),
    _PvxL2IFHistPMSIZE65To127Value_Type()
)
pvxL2IFHistPMSIZE65To127Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE65To127Value.setStatus("current")
_PvxL2IFHistPMSIZE65To127TimeStamp_Type = DateAndTime
_PvxL2IFHistPMSIZE65To127TimeStamp_Object = MibTableColumn
pvxL2IFHistPMSIZE65To127TimeStamp = _PvxL2IFHistPMSIZE65To127TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 45),
    _PvxL2IFHistPMSIZE65To127TimeStamp_Type()
)
pvxL2IFHistPMSIZE65To127TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE65To127TimeStamp.setStatus("current")
_PvxL2IFHistPMSIZE65To127Validity_Type = PMValidity
_PvxL2IFHistPMSIZE65To127Validity_Object = MibTableColumn
pvxL2IFHistPMSIZE65To127Validity = _PvxL2IFHistPMSIZE65To127Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 46),
    _PvxL2IFHistPMSIZE65To127Validity_Type()
)
pvxL2IFHistPMSIZE65To127Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE65To127Validity.setStatus("current")
_PvxL2IFHistPMSIZE65To127Initialize_Type = InitializeCmd
_PvxL2IFHistPMSIZE65To127Initialize_Object = MibTableColumn
pvxL2IFHistPMSIZE65To127Initialize = _PvxL2IFHistPMSIZE65To127Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 47),
    _PvxL2IFHistPMSIZE65To127Initialize_Type()
)
pvxL2IFHistPMSIZE65To127Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE65To127Initialize.setStatus("current")
_PvxL2IFHistPMSIZE128To255Value_Type = Unsigned64
_PvxL2IFHistPMSIZE128To255Value_Object = MibTableColumn
pvxL2IFHistPMSIZE128To255Value = _PvxL2IFHistPMSIZE128To255Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 48),
    _PvxL2IFHistPMSIZE128To255Value_Type()
)
pvxL2IFHistPMSIZE128To255Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE128To255Value.setStatus("current")
_PvxL2IFHistPMSIZE128To255TimeStamp_Type = DateAndTime
_PvxL2IFHistPMSIZE128To255TimeStamp_Object = MibTableColumn
pvxL2IFHistPMSIZE128To255TimeStamp = _PvxL2IFHistPMSIZE128To255TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 49),
    _PvxL2IFHistPMSIZE128To255TimeStamp_Type()
)
pvxL2IFHistPMSIZE128To255TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE128To255TimeStamp.setStatus("current")
_PvxL2IFHistPMSIZE128To255Validity_Type = PMValidity
_PvxL2IFHistPMSIZE128To255Validity_Object = MibTableColumn
pvxL2IFHistPMSIZE128To255Validity = _PvxL2IFHistPMSIZE128To255Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 50),
    _PvxL2IFHistPMSIZE128To255Validity_Type()
)
pvxL2IFHistPMSIZE128To255Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE128To255Validity.setStatus("current")
_PvxL2IFHistPMSIZE128To255Initialize_Type = InitializeCmd
_PvxL2IFHistPMSIZE128To255Initialize_Object = MibTableColumn
pvxL2IFHistPMSIZE128To255Initialize = _PvxL2IFHistPMSIZE128To255Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 51),
    _PvxL2IFHistPMSIZE128To255Initialize_Type()
)
pvxL2IFHistPMSIZE128To255Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE128To255Initialize.setStatus("current")
_PvxL2IFHistPMSIZE256To511Value_Type = Unsigned64
_PvxL2IFHistPMSIZE256To511Value_Object = MibTableColumn
pvxL2IFHistPMSIZE256To511Value = _PvxL2IFHistPMSIZE256To511Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 52),
    _PvxL2IFHistPMSIZE256To511Value_Type()
)
pvxL2IFHistPMSIZE256To511Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE256To511Value.setStatus("current")
_PvxL2IFHistPMSIZE256To511TimeStamp_Type = DateAndTime
_PvxL2IFHistPMSIZE256To511TimeStamp_Object = MibTableColumn
pvxL2IFHistPMSIZE256To511TimeStamp = _PvxL2IFHistPMSIZE256To511TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 53),
    _PvxL2IFHistPMSIZE256To511TimeStamp_Type()
)
pvxL2IFHistPMSIZE256To511TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE256To511TimeStamp.setStatus("current")
_PvxL2IFHistPMSIZE256To511Validity_Type = PMValidity
_PvxL2IFHistPMSIZE256To511Validity_Object = MibTableColumn
pvxL2IFHistPMSIZE256To511Validity = _PvxL2IFHistPMSIZE256To511Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 54),
    _PvxL2IFHistPMSIZE256To511Validity_Type()
)
pvxL2IFHistPMSIZE256To511Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE256To511Validity.setStatus("current")
_PvxL2IFHistPMSIZE256To511Initialize_Type = InitializeCmd
_PvxL2IFHistPMSIZE256To511Initialize_Object = MibTableColumn
pvxL2IFHistPMSIZE256To511Initialize = _PvxL2IFHistPMSIZE256To511Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 55),
    _PvxL2IFHistPMSIZE256To511Initialize_Type()
)
pvxL2IFHistPMSIZE256To511Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE256To511Initialize.setStatus("current")
_PvxL2IFHistPMSIZE512To1023Value_Type = Unsigned64
_PvxL2IFHistPMSIZE512To1023Value_Object = MibTableColumn
pvxL2IFHistPMSIZE512To1023Value = _PvxL2IFHistPMSIZE512To1023Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 56),
    _PvxL2IFHistPMSIZE512To1023Value_Type()
)
pvxL2IFHistPMSIZE512To1023Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE512To1023Value.setStatus("current")
_PvxL2IFHistPMSIZE512To1023TimeStamp_Type = DateAndTime
_PvxL2IFHistPMSIZE512To1023TimeStamp_Object = MibTableColumn
pvxL2IFHistPMSIZE512To1023TimeStamp = _PvxL2IFHistPMSIZE512To1023TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 57),
    _PvxL2IFHistPMSIZE512To1023TimeStamp_Type()
)
pvxL2IFHistPMSIZE512To1023TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE512To1023TimeStamp.setStatus("current")
_PvxL2IFHistPMSIZE512To1023Validity_Type = PMValidity
_PvxL2IFHistPMSIZE512To1023Validity_Object = MibTableColumn
pvxL2IFHistPMSIZE512To1023Validity = _PvxL2IFHistPMSIZE512To1023Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 58),
    _PvxL2IFHistPMSIZE512To1023Validity_Type()
)
pvxL2IFHistPMSIZE512To1023Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE512To1023Validity.setStatus("current")
_PvxL2IFHistPMSIZE512To1023Initialize_Type = InitializeCmd
_PvxL2IFHistPMSIZE512To1023Initialize_Object = MibTableColumn
pvxL2IFHistPMSIZE512To1023Initialize = _PvxL2IFHistPMSIZE512To1023Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 59),
    _PvxL2IFHistPMSIZE512To1023Initialize_Type()
)
pvxL2IFHistPMSIZE512To1023Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE512To1023Initialize.setStatus("current")
_PvxL2IFHistPMSIZE1024To1518Value_Type = Unsigned64
_PvxL2IFHistPMSIZE1024To1518Value_Object = MibTableColumn
pvxL2IFHistPMSIZE1024To1518Value = _PvxL2IFHistPMSIZE1024To1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 60),
    _PvxL2IFHistPMSIZE1024To1518Value_Type()
)
pvxL2IFHistPMSIZE1024To1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE1024To1518Value.setStatus("current")
_PvxL2IFHistPMSIZE1024To1518TimeStamp_Type = DateAndTime
_PvxL2IFHistPMSIZE1024To1518TimeStamp_Object = MibTableColumn
pvxL2IFHistPMSIZE1024To1518TimeStamp = _PvxL2IFHistPMSIZE1024To1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 61),
    _PvxL2IFHistPMSIZE1024To1518TimeStamp_Type()
)
pvxL2IFHistPMSIZE1024To1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE1024To1518TimeStamp.setStatus("current")
_PvxL2IFHistPMSIZE1024To1518Validity_Type = PMValidity
_PvxL2IFHistPMSIZE1024To1518Validity_Object = MibTableColumn
pvxL2IFHistPMSIZE1024To1518Validity = _PvxL2IFHistPMSIZE1024To1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 62),
    _PvxL2IFHistPMSIZE1024To1518Validity_Type()
)
pvxL2IFHistPMSIZE1024To1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE1024To1518Validity.setStatus("current")
_PvxL2IFHistPMSIZE1024To1518Initialize_Type = InitializeCmd
_PvxL2IFHistPMSIZE1024To1518Initialize_Object = MibTableColumn
pvxL2IFHistPMSIZE1024To1518Initialize = _PvxL2IFHistPMSIZE1024To1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 63),
    _PvxL2IFHistPMSIZE1024To1518Initialize_Type()
)
pvxL2IFHistPMSIZE1024To1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZE1024To1518Initialize.setStatus("current")
_PvxL2IFHistPMSIZEOver1518Value_Type = Unsigned64
_PvxL2IFHistPMSIZEOver1518Value_Object = MibTableColumn
pvxL2IFHistPMSIZEOver1518Value = _PvxL2IFHistPMSIZEOver1518Value_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 64),
    _PvxL2IFHistPMSIZEOver1518Value_Type()
)
pvxL2IFHistPMSIZEOver1518Value.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZEOver1518Value.setStatus("current")
_PvxL2IFHistPMSIZEOver1518TimeStamp_Type = DateAndTime
_PvxL2IFHistPMSIZEOver1518TimeStamp_Object = MibTableColumn
pvxL2IFHistPMSIZEOver1518TimeStamp = _PvxL2IFHistPMSIZEOver1518TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 65),
    _PvxL2IFHistPMSIZEOver1518TimeStamp_Type()
)
pvxL2IFHistPMSIZEOver1518TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZEOver1518TimeStamp.setStatus("current")
_PvxL2IFHistPMSIZEOver1518Validity_Type = PMValidity
_PvxL2IFHistPMSIZEOver1518Validity_Object = MibTableColumn
pvxL2IFHistPMSIZEOver1518Validity = _PvxL2IFHistPMSIZEOver1518Validity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 66),
    _PvxL2IFHistPMSIZEOver1518Validity_Type()
)
pvxL2IFHistPMSIZEOver1518Validity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZEOver1518Validity.setStatus("current")
_PvxL2IFHistPMSIZEOver1518Initialize_Type = InitializeCmd
_PvxL2IFHistPMSIZEOver1518Initialize_Object = MibTableColumn
pvxL2IFHistPMSIZEOver1518Initialize = _PvxL2IFHistPMSIZEOver1518Initialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 67),
    _PvxL2IFHistPMSIZEOver1518Initialize_Type()
)
pvxL2IFHistPMSIZEOver1518Initialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMSIZEOver1518Initialize.setStatus("current")
_PvxL2IFHistPMTPFCRXValue_Type = Unsigned64
_PvxL2IFHistPMTPFCRXValue_Object = MibTableColumn
pvxL2IFHistPMTPFCRXValue = _PvxL2IFHistPMTPFCRXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 68),
    _PvxL2IFHistPMTPFCRXValue_Type()
)
pvxL2IFHistPMTPFCRXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTPFCRXValue.setStatus("current")
_PvxL2IFHistPMTPFCRXTimeStamp_Type = DateAndTime
_PvxL2IFHistPMTPFCRXTimeStamp_Object = MibTableColumn
pvxL2IFHistPMTPFCRXTimeStamp = _PvxL2IFHistPMTPFCRXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 69),
    _PvxL2IFHistPMTPFCRXTimeStamp_Type()
)
pvxL2IFHistPMTPFCRXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTPFCRXTimeStamp.setStatus("current")
_PvxL2IFHistPMTPFCRXValidity_Type = PMValidity
_PvxL2IFHistPMTPFCRXValidity_Object = MibTableColumn
pvxL2IFHistPMTPFCRXValidity = _PvxL2IFHistPMTPFCRXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 70),
    _PvxL2IFHistPMTPFCRXValidity_Type()
)
pvxL2IFHistPMTPFCRXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTPFCRXValidity.setStatus("current")
_PvxL2IFHistPMTPFCRXInitialize_Type = InitializeCmd
_PvxL2IFHistPMTPFCRXInitialize_Object = MibTableColumn
pvxL2IFHistPMTPFCRXInitialize = _PvxL2IFHistPMTPFCRXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 71),
    _PvxL2IFHistPMTPFCRXInitialize_Type()
)
pvxL2IFHistPMTPFCRXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTPFCRXInitialize.setStatus("current")
_PvxL2IFHistPMTPFCTXValue_Type = Unsigned64
_PvxL2IFHistPMTPFCTXValue_Object = MibTableColumn
pvxL2IFHistPMTPFCTXValue = _PvxL2IFHistPMTPFCTXValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 72),
    _PvxL2IFHistPMTPFCTXValue_Type()
)
pvxL2IFHistPMTPFCTXValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTPFCTXValue.setStatus("current")
_PvxL2IFHistPMTPFCTXTimeStamp_Type = DateAndTime
_PvxL2IFHistPMTPFCTXTimeStamp_Object = MibTableColumn
pvxL2IFHistPMTPFCTXTimeStamp = _PvxL2IFHistPMTPFCTXTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 73),
    _PvxL2IFHistPMTPFCTXTimeStamp_Type()
)
pvxL2IFHistPMTPFCTXTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTPFCTXTimeStamp.setStatus("current")
_PvxL2IFHistPMTPFCTXValidity_Type = PMValidity
_PvxL2IFHistPMTPFCTXValidity_Object = MibTableColumn
pvxL2IFHistPMTPFCTXValidity = _PvxL2IFHistPMTPFCTXValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 74),
    _PvxL2IFHistPMTPFCTXValidity_Type()
)
pvxL2IFHistPMTPFCTXValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTPFCTXValidity.setStatus("current")
_PvxL2IFHistPMTPFCTXInitialize_Type = InitializeCmd
_PvxL2IFHistPMTPFCTXInitialize_Object = MibTableColumn
pvxL2IFHistPMTPFCTXInitialize = _PvxL2IFHistPMTPFCTXInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 75),
    _PvxL2IFHistPMTPFCTXInitialize_Type()
)
pvxL2IFHistPMTPFCTXInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMTPFCTXInitialize.setStatus("current")
_PvxL2IFHistPMUSIZEValue_Type = Unsigned32
_PvxL2IFHistPMUSIZEValue_Object = MibTableColumn
pvxL2IFHistPMUSIZEValue = _PvxL2IFHistPMUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 76),
    _PvxL2IFHistPMUSIZEValue_Type()
)
pvxL2IFHistPMUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMUSIZEValue.setStatus("current")
_PvxL2IFHistPMUSIZETimeStamp_Type = DateAndTime
_PvxL2IFHistPMUSIZETimeStamp_Object = MibTableColumn
pvxL2IFHistPMUSIZETimeStamp = _PvxL2IFHistPMUSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 77),
    _PvxL2IFHistPMUSIZETimeStamp_Type()
)
pvxL2IFHistPMUSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMUSIZETimeStamp.setStatus("current")
_PvxL2IFHistPMUSIZEValidity_Type = PMValidity
_PvxL2IFHistPMUSIZEValidity_Object = MibTableColumn
pvxL2IFHistPMUSIZEValidity = _PvxL2IFHistPMUSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 78),
    _PvxL2IFHistPMUSIZEValidity_Type()
)
pvxL2IFHistPMUSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMUSIZEValidity.setStatus("current")
_PvxL2IFHistPMUSIZEInitialize_Type = InitializeCmd
_PvxL2IFHistPMUSIZEInitialize_Object = MibTableColumn
pvxL2IFHistPMUSIZEInitialize = _PvxL2IFHistPMUSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 79),
    _PvxL2IFHistPMUSIZEInitialize_Type()
)
pvxL2IFHistPMUSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMUSIZEInitialize.setStatus("current")
_PvxL2IFHistPMOSIZEValue_Type = Unsigned32
_PvxL2IFHistPMOSIZEValue_Object = MibTableColumn
pvxL2IFHistPMOSIZEValue = _PvxL2IFHistPMOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 80),
    _PvxL2IFHistPMOSIZEValue_Type()
)
pvxL2IFHistPMOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMOSIZEValue.setStatus("current")
_PvxL2IFHistPMOSIZETimeStamp_Type = DateAndTime
_PvxL2IFHistPMOSIZETimeStamp_Object = MibTableColumn
pvxL2IFHistPMOSIZETimeStamp = _PvxL2IFHistPMOSIZETimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 81),
    _PvxL2IFHistPMOSIZETimeStamp_Type()
)
pvxL2IFHistPMOSIZETimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMOSIZETimeStamp.setStatus("current")
_PvxL2IFHistPMOSIZEValidity_Type = PMValidity
_PvxL2IFHistPMOSIZEValidity_Object = MibTableColumn
pvxL2IFHistPMOSIZEValidity = _PvxL2IFHistPMOSIZEValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 82),
    _PvxL2IFHistPMOSIZEValidity_Type()
)
pvxL2IFHistPMOSIZEValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMOSIZEValidity.setStatus("current")
_PvxL2IFHistPMOSIZEInitialize_Type = InitializeCmd
_PvxL2IFHistPMOSIZEInitialize_Object = MibTableColumn
pvxL2IFHistPMOSIZEInitialize = _PvxL2IFHistPMOSIZEInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 83),
    _PvxL2IFHistPMOSIZEInitialize_Type()
)
pvxL2IFHistPMOSIZEInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMOSIZEInitialize.setStatus("current")
_PvxL2IFHistPMFRGTValue_Type = Unsigned32
_PvxL2IFHistPMFRGTValue_Object = MibTableColumn
pvxL2IFHistPMFRGTValue = _PvxL2IFHistPMFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 84),
    _PvxL2IFHistPMFRGTValue_Type()
)
pvxL2IFHistPMFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFRGTValue.setStatus("current")
_PvxL2IFHistPMFRGTTimeStamp_Type = DateAndTime
_PvxL2IFHistPMFRGTTimeStamp_Object = MibTableColumn
pvxL2IFHistPMFRGTTimeStamp = _PvxL2IFHistPMFRGTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 85),
    _PvxL2IFHistPMFRGTTimeStamp_Type()
)
pvxL2IFHistPMFRGTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFRGTTimeStamp.setStatus("current")
_PvxL2IFHistPMFRGTValidity_Type = PMValidity
_PvxL2IFHistPMFRGTValidity_Object = MibTableColumn
pvxL2IFHistPMFRGTValidity = _PvxL2IFHistPMFRGTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 86),
    _PvxL2IFHistPMFRGTValidity_Type()
)
pvxL2IFHistPMFRGTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFRGTValidity.setStatus("current")
_PvxL2IFHistPMFRGTInitialize_Type = InitializeCmd
_PvxL2IFHistPMFRGTInitialize_Object = MibTableColumn
pvxL2IFHistPMFRGTInitialize = _PvxL2IFHistPMFRGTInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 87),
    _PvxL2IFHistPMFRGTInitialize_Type()
)
pvxL2IFHistPMFRGTInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFHistPMFRGTInitialize.setStatus("current")
_PvxL2IFPMThresholdTable_Object = MibTable
pvxL2IFPMThresholdTable = _PvxL2IFPMThresholdTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31)
)
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdTable.setStatus("current")
_PvxL2IFPMThresholdEntry_Object = MibTableRow
pvxL2IFPMThresholdEntry = _PvxL2IFPMThresholdEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1)
)
pvxL2IFPMThresholdEntry.setIndexNames(
    (0, "BTI-7000-MIB", "pvxL2IFPMThresholdSwitchIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFPMThresholdShelfIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFPMThresholdSlotIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFPMThresholdPortTypeIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFPMThresholdPortIdx"),
    (0, "BTI-7000-MIB", "pvxL2IFPMThresholdIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdEntry.setStatus("current")


class _PvxL2IFPMThresholdSwitchIdx_Type(Integer32):
    """Custom type pvxL2IFPMThresholdSwitchIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_PvxL2IFPMThresholdSwitchIdx_Type.__name__ = "Integer32"
_PvxL2IFPMThresholdSwitchIdx_Object = MibTableColumn
pvxL2IFPMThresholdSwitchIdx = _PvxL2IFPMThresholdSwitchIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 1),
    _PvxL2IFPMThresholdSwitchIdx_Type()
)
pvxL2IFPMThresholdSwitchIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdSwitchIdx.setStatus("current")


class _PvxL2IFPMThresholdShelfIdx_Type(Integer32):
    """Custom type pvxL2IFPMThresholdShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_PvxL2IFPMThresholdShelfIdx_Type.__name__ = "Integer32"
_PvxL2IFPMThresholdShelfIdx_Object = MibTableColumn
pvxL2IFPMThresholdShelfIdx = _PvxL2IFPMThresholdShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 2),
    _PvxL2IFPMThresholdShelfIdx_Type()
)
pvxL2IFPMThresholdShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdShelfIdx.setStatus("current")


class _PvxL2IFPMThresholdSlotIdx_Type(Integer32):
    """Custom type pvxL2IFPMThresholdSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_PvxL2IFPMThresholdSlotIdx_Type.__name__ = "Integer32"
_PvxL2IFPMThresholdSlotIdx_Object = MibTableColumn
pvxL2IFPMThresholdSlotIdx = _PvxL2IFPMThresholdSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 3),
    _PvxL2IFPMThresholdSlotIdx_Type()
)
pvxL2IFPMThresholdSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdSlotIdx.setStatus("current")
_PvxL2IFPMThresholdPortTypeIdx_Type = PvxPortType
_PvxL2IFPMThresholdPortTypeIdx_Object = MibTableColumn
pvxL2IFPMThresholdPortTypeIdx = _PvxL2IFPMThresholdPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 4),
    _PvxL2IFPMThresholdPortTypeIdx_Type()
)
pvxL2IFPMThresholdPortTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdPortTypeIdx.setStatus("current")


class _PvxL2IFPMThresholdPortIdx_Type(Integer32):
    """Custom type pvxL2IFPMThresholdPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_PvxL2IFPMThresholdPortIdx_Type.__name__ = "Integer32"
_PvxL2IFPMThresholdPortIdx_Object = MibTableColumn
pvxL2IFPMThresholdPortIdx = _PvxL2IFPMThresholdPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 5),
    _PvxL2IFPMThresholdPortIdx_Type()
)
pvxL2IFPMThresholdPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdPortIdx.setStatus("current")
_PvxL2IFPMThresholdIntervalTypeIdx_Type = PMIntervalType
_PvxL2IFPMThresholdIntervalTypeIdx_Object = MibTableColumn
pvxL2IFPMThresholdIntervalTypeIdx = _PvxL2IFPMThresholdIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 6),
    _PvxL2IFPMThresholdIntervalTypeIdx_Type()
)
pvxL2IFPMThresholdIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdIntervalTypeIdx.setStatus("current")
_PvxL2IFPMThresholdFRDRValue_Type = Unsigned32
_PvxL2IFPMThresholdFRDRValue_Object = MibTableColumn
pvxL2IFPMThresholdFRDRValue = _PvxL2IFPMThresholdFRDRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 7),
    _PvxL2IFPMThresholdFRDRValue_Type()
)
pvxL2IFPMThresholdFRDRValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdFRDRValue.setStatus("current")
_PvxL2IFPMThresholdFCSEValue_Type = Unsigned32
_PvxL2IFPMThresholdFCSEValue_Object = MibTableColumn
pvxL2IFPMThresholdFCSEValue = _PvxL2IFPMThresholdFCSEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 8),
    _PvxL2IFPMThresholdFCSEValue_Type()
)
pvxL2IFPMThresholdFCSEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdFCSEValue.setStatus("current")
_PvxL2IFPMThresholdUSIZEValue_Type = Unsigned32
_PvxL2IFPMThresholdUSIZEValue_Object = MibTableColumn
pvxL2IFPMThresholdUSIZEValue = _PvxL2IFPMThresholdUSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 9),
    _PvxL2IFPMThresholdUSIZEValue_Type()
)
pvxL2IFPMThresholdUSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdUSIZEValue.setStatus("current")
_PvxL2IFPMThresholdOSIZEValue_Type = Unsigned32
_PvxL2IFPMThresholdOSIZEValue_Object = MibTableColumn
pvxL2IFPMThresholdOSIZEValue = _PvxL2IFPMThresholdOSIZEValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 10),
    _PvxL2IFPMThresholdOSIZEValue_Type()
)
pvxL2IFPMThresholdOSIZEValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdOSIZEValue.setStatus("current")
_PvxL2IFPMThresholdFRGTValue_Type = Unsigned32
_PvxL2IFPMThresholdFRGTValue_Object = MibTableColumn
pvxL2IFPMThresholdFRGTValue = _PvxL2IFPMThresholdFRGTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 11),
    _PvxL2IFPMThresholdFRGTValue_Type()
)
pvxL2IFPMThresholdFRGTValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvxL2IFPMThresholdFRGTValue.setStatus("current")
_BriCrntPMTable_Object = MibTable
briCrntPMTable = _BriCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38)
)
if mibBuilder.loadTexts:
    briCrntPMTable.setStatus("current")
_BriCrntPMEntry_Object = MibTableRow
briCrntPMEntry = _BriCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1)
)
briCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "briCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "briCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "briCrntPMPortIdx"),
    (0, "BTI-7000-MIB", "briCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    briCrntPMEntry.setStatus("current")


class _BriCrntPMShelfIdx_Type(Integer32):
    """Custom type briCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_BriCrntPMShelfIdx_Type.__name__ = "Integer32"
_BriCrntPMShelfIdx_Object = MibTableColumn
briCrntPMShelfIdx = _BriCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 1),
    _BriCrntPMShelfIdx_Type()
)
briCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briCrntPMShelfIdx.setStatus("current")


class _BriCrntPMSlotIdx_Type(Integer32):
    """Custom type briCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_BriCrntPMSlotIdx_Type.__name__ = "Integer32"
_BriCrntPMSlotIdx_Object = MibTableColumn
briCrntPMSlotIdx = _BriCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 2),
    _BriCrntPMSlotIdx_Type()
)
briCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briCrntPMSlotIdx.setStatus("current")


class _BriCrntPMPortIdx_Type(Integer32):
    """Custom type briCrntPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_BriCrntPMPortIdx_Type.__name__ = "Integer32"
_BriCrntPMPortIdx_Object = MibTableColumn
briCrntPMPortIdx = _BriCrntPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 3),
    _BriCrntPMPortIdx_Type()
)
briCrntPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briCrntPMPortIdx.setStatus("current")
_BriCrntPMIntervalTypeIdx_Type = PMIntervalType
_BriCrntPMIntervalTypeIdx_Object = MibTableColumn
briCrntPMIntervalTypeIdx = _BriCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 4),
    _BriCrntPMIntervalTypeIdx_Type()
)
briCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briCrntPMIntervalTypeIdx.setStatus("current")
_BriCrntPMOPRValue_Type = FixedX10
_BriCrntPMOPRValue_Object = MibTableColumn
briCrntPMOPRValue = _BriCrntPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 5),
    _BriCrntPMOPRValue_Type()
)
briCrntPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMOPRValue.setUnits("dBm/10")
_BriCrntPMOPRTimeStamp_Type = DateAndTime
_BriCrntPMOPRTimeStamp_Object = MibTableColumn
briCrntPMOPRTimeStamp = _BriCrntPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 6),
    _BriCrntPMOPRTimeStamp_Type()
)
briCrntPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRTimeStamp.setStatus("current")
_BriCrntPMOPRValidity_Type = PMValidity
_BriCrntPMOPRValidity_Object = MibTableColumn
briCrntPMOPRValidity = _BriCrntPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 7),
    _BriCrntPMOPRValidity_Type()
)
briCrntPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRValidity.setStatus("current")
_BriCrntPMOPTValue_Type = FixedX10
_BriCrntPMOPTValue_Object = MibTableColumn
briCrntPMOPTValue = _BriCrntPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 8),
    _BriCrntPMOPTValue_Type()
)
briCrntPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMOPTValue.setUnits("dBm/10")
_BriCrntPMOPTTimeStamp_Type = DateAndTime
_BriCrntPMOPTTimeStamp_Object = MibTableColumn
briCrntPMOPTTimeStamp = _BriCrntPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 9),
    _BriCrntPMOPTTimeStamp_Type()
)
briCrntPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTTimeStamp.setStatus("current")
_BriCrntPMOPTValidity_Type = PMValidity
_BriCrntPMOPTValidity_Object = MibTableColumn
briCrntPMOPTValidity = _BriCrntPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 10),
    _BriCrntPMOPTValidity_Type()
)
briCrntPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTValidity.setStatus("current")


class _BriCrntPMTempValue_Type(Integer32):
    """Custom type briCrntPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_BriCrntPMTempValue_Type.__name__ = "Integer32"
_BriCrntPMTempValue_Object = MibTableColumn
briCrntPMTempValue = _BriCrntPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 11),
    _BriCrntPMTempValue_Type()
)
briCrntPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMTempValue.setUnits("degrees Celsius")
_BriCrntPMTempTimeStamp_Type = DateAndTime
_BriCrntPMTempTimeStamp_Object = MibTableColumn
briCrntPMTempTimeStamp = _BriCrntPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 12),
    _BriCrntPMTempTimeStamp_Type()
)
briCrntPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMTempTimeStamp.setStatus("current")
_BriCrntPMTempValidity_Type = PMValidity
_BriCrntPMTempValidity_Object = MibTableColumn
briCrntPMTempValidity = _BriCrntPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 13),
    _BriCrntPMTempValidity_Type()
)
briCrntPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMTempValidity.setStatus("current")
_BriCrntPMSupplyVoltageValue_Type = FixedX10
_BriCrntPMSupplyVoltageValue_Object = MibTableColumn
briCrntPMSupplyVoltageValue = _BriCrntPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 14),
    _BriCrntPMSupplyVoltageValue_Type()
)
briCrntPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMSupplyVoltageValue.setUnits("mVolts/10")
_BriCrntPMSupplyVoltageTimeStamp_Type = DateAndTime
_BriCrntPMSupplyVoltageTimeStamp_Object = MibTableColumn
briCrntPMSupplyVoltageTimeStamp = _BriCrntPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 15),
    _BriCrntPMSupplyVoltageTimeStamp_Type()
)
briCrntPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMSupplyVoltageTimeStamp.setStatus("current")
_BriCrntPMSupplyVoltageValidity_Type = PMValidity
_BriCrntPMSupplyVoltageValidity_Object = MibTableColumn
briCrntPMSupplyVoltageValidity = _BriCrntPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 16),
    _BriCrntPMSupplyVoltageValidity_Type()
)
briCrntPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMSupplyVoltageValidity.setStatus("current")


class _BriCrntPMLBCValue_Type(Integer32):
    """Custom type briCrntPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_BriCrntPMLBCValue_Type.__name__ = "Integer32"
_BriCrntPMLBCValue_Object = MibTableColumn
briCrntPMLBCValue = _BriCrntPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 17),
    _BriCrntPMLBCValue_Type()
)
briCrntPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMLBCValue.setUnits("mAmp")
_BriCrntPMLBCTimeStamp_Type = DateAndTime
_BriCrntPMLBCTimeStamp_Object = MibTableColumn
briCrntPMLBCTimeStamp = _BriCrntPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 18),
    _BriCrntPMLBCTimeStamp_Type()
)
briCrntPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMLBCTimeStamp.setStatus("current")
_BriCrntPMLBCValidity_Type = PMValidity
_BriCrntPMLBCValidity_Object = MibTableColumn
briCrntPMLBCValidity = _BriCrntPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 19),
    _BriCrntPMLBCValidity_Type()
)
briCrntPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMLBCValidity.setStatus("current")
_BriCrntPMOPRMinValue_Type = FixedX10
_BriCrntPMOPRMinValue_Object = MibTableColumn
briCrntPMOPRMinValue = _BriCrntPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 20),
    _BriCrntPMOPRMinValue_Type()
)
briCrntPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMOPRMinValue.setUnits("dBm/10")
_BriCrntPMOPRMinTimeStamp_Type = DateAndTime
_BriCrntPMOPRMinTimeStamp_Object = MibTableColumn
briCrntPMOPRMinTimeStamp = _BriCrntPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 21),
    _BriCrntPMOPRMinTimeStamp_Type()
)
briCrntPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRMinTimeStamp.setStatus("current")
_BriCrntPMOPRMinValidity_Type = PMValidity
_BriCrntPMOPRMinValidity_Object = MibTableColumn
briCrntPMOPRMinValidity = _BriCrntPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 22),
    _BriCrntPMOPRMinValidity_Type()
)
briCrntPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRMinValidity.setStatus("current")
_BriCrntPMOPRMinInitialize_Type = InitializeCmd
_BriCrntPMOPRMinInitialize_Object = MibTableColumn
briCrntPMOPRMinInitialize = _BriCrntPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 23),
    _BriCrntPMOPRMinInitialize_Type()
)
briCrntPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briCrntPMOPRMinInitialize.setStatus("current")
_BriCrntPMOPRMaxValue_Type = FixedX10
_BriCrntPMOPRMaxValue_Object = MibTableColumn
briCrntPMOPRMaxValue = _BriCrntPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 24),
    _BriCrntPMOPRMaxValue_Type()
)
briCrntPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMOPRMaxValue.setUnits("dBm/10")
_BriCrntPMOPRMaxTimeStamp_Type = DateAndTime
_BriCrntPMOPRMaxTimeStamp_Object = MibTableColumn
briCrntPMOPRMaxTimeStamp = _BriCrntPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 25),
    _BriCrntPMOPRMaxTimeStamp_Type()
)
briCrntPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRMaxTimeStamp.setStatus("current")
_BriCrntPMOPRMaxValidity_Type = PMValidity
_BriCrntPMOPRMaxValidity_Object = MibTableColumn
briCrntPMOPRMaxValidity = _BriCrntPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 26),
    _BriCrntPMOPRMaxValidity_Type()
)
briCrntPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRMaxValidity.setStatus("current")
_BriCrntPMOPRMaxInitialize_Type = InitializeCmd
_BriCrntPMOPRMaxInitialize_Object = MibTableColumn
briCrntPMOPRMaxInitialize = _BriCrntPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 27),
    _BriCrntPMOPRMaxInitialize_Type()
)
briCrntPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briCrntPMOPRMaxInitialize.setStatus("current")
_BriCrntPMOPRAvgValue_Type = FixedX10
_BriCrntPMOPRAvgValue_Object = MibTableColumn
briCrntPMOPRAvgValue = _BriCrntPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 28),
    _BriCrntPMOPRAvgValue_Type()
)
briCrntPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMOPRAvgValue.setUnits("dBm/10")
_BriCrntPMOPRAvgTimeStamp_Type = DateAndTime
_BriCrntPMOPRAvgTimeStamp_Object = MibTableColumn
briCrntPMOPRAvgTimeStamp = _BriCrntPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 29),
    _BriCrntPMOPRAvgTimeStamp_Type()
)
briCrntPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRAvgTimeStamp.setStatus("current")
_BriCrntPMOPRAvgValidity_Type = PMValidity
_BriCrntPMOPRAvgValidity_Object = MibTableColumn
briCrntPMOPRAvgValidity = _BriCrntPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 30),
    _BriCrntPMOPRAvgValidity_Type()
)
briCrntPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPRAvgValidity.setStatus("current")
_BriCrntPMOPRAvgInitialize_Type = InitializeCmd
_BriCrntPMOPRAvgInitialize_Object = MibTableColumn
briCrntPMOPRAvgInitialize = _BriCrntPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 31),
    _BriCrntPMOPRAvgInitialize_Type()
)
briCrntPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briCrntPMOPRAvgInitialize.setStatus("current")
_BriCrntPMOPTMinValue_Type = FixedX10
_BriCrntPMOPTMinValue_Object = MibTableColumn
briCrntPMOPTMinValue = _BriCrntPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 32),
    _BriCrntPMOPTMinValue_Type()
)
briCrntPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMOPTMinValue.setUnits("dBm/10")
_BriCrntPMOPTMinTimeStamp_Type = DateAndTime
_BriCrntPMOPTMinTimeStamp_Object = MibTableColumn
briCrntPMOPTMinTimeStamp = _BriCrntPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 33),
    _BriCrntPMOPTMinTimeStamp_Type()
)
briCrntPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTMinTimeStamp.setStatus("current")
_BriCrntPMOPTMinValidity_Type = PMValidity
_BriCrntPMOPTMinValidity_Object = MibTableColumn
briCrntPMOPTMinValidity = _BriCrntPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 34),
    _BriCrntPMOPTMinValidity_Type()
)
briCrntPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTMinValidity.setStatus("current")
_BriCrntPMOPTMinInitialize_Type = InitializeCmd
_BriCrntPMOPTMinInitialize_Object = MibTableColumn
briCrntPMOPTMinInitialize = _BriCrntPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 35),
    _BriCrntPMOPTMinInitialize_Type()
)
briCrntPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briCrntPMOPTMinInitialize.setStatus("current")
_BriCrntPMOPTMaxValue_Type = FixedX10
_BriCrntPMOPTMaxValue_Object = MibTableColumn
briCrntPMOPTMaxValue = _BriCrntPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 36),
    _BriCrntPMOPTMaxValue_Type()
)
briCrntPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMOPTMaxValue.setUnits("dBm/10")
_BriCrntPMOPTMaxTimeStamp_Type = DateAndTime
_BriCrntPMOPTMaxTimeStamp_Object = MibTableColumn
briCrntPMOPTMaxTimeStamp = _BriCrntPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 37),
    _BriCrntPMOPTMaxTimeStamp_Type()
)
briCrntPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTMaxTimeStamp.setStatus("current")
_BriCrntPMOPTMaxValidity_Type = PMValidity
_BriCrntPMOPTMaxValidity_Object = MibTableColumn
briCrntPMOPTMaxValidity = _BriCrntPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 38),
    _BriCrntPMOPTMaxValidity_Type()
)
briCrntPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTMaxValidity.setStatus("current")
_BriCrntPMOPTMaxInitialize_Type = InitializeCmd
_BriCrntPMOPTMaxInitialize_Object = MibTableColumn
briCrntPMOPTMaxInitialize = _BriCrntPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 39),
    _BriCrntPMOPTMaxInitialize_Type()
)
briCrntPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briCrntPMOPTMaxInitialize.setStatus("current")
_BriCrntPMOPTAvgValue_Type = FixedX10
_BriCrntPMOPTAvgValue_Object = MibTableColumn
briCrntPMOPTAvgValue = _BriCrntPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 40),
    _BriCrntPMOPTAvgValue_Type()
)
briCrntPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    briCrntPMOPTAvgValue.setUnits("dBm/10")
_BriCrntPMOPTAvgTimeStamp_Type = DateAndTime
_BriCrntPMOPTAvgTimeStamp_Object = MibTableColumn
briCrntPMOPTAvgTimeStamp = _BriCrntPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 41),
    _BriCrntPMOPTAvgTimeStamp_Type()
)
briCrntPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTAvgTimeStamp.setStatus("current")
_BriCrntPMOPTAvgValidity_Type = PMValidity
_BriCrntPMOPTAvgValidity_Object = MibTableColumn
briCrntPMOPTAvgValidity = _BriCrntPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 42),
    _BriCrntPMOPTAvgValidity_Type()
)
briCrntPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briCrntPMOPTAvgValidity.setStatus("current")
_BriCrntPMOPTAvgInitialize_Type = InitializeCmd
_BriCrntPMOPTAvgInitialize_Object = MibTableColumn
briCrntPMOPTAvgInitialize = _BriCrntPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 43),
    _BriCrntPMOPTAvgInitialize_Type()
)
briCrntPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briCrntPMOPTAvgInitialize.setStatus("current")
_BriHistPMTable_Object = MibTable
briHistPMTable = _BriHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39)
)
if mibBuilder.loadTexts:
    briHistPMTable.setStatus("current")
_BriHistPMEntry_Object = MibTableRow
briHistPMEntry = _BriHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1)
)
briHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "briHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "briHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "briHistPMPortIdx"),
    (0, "BTI-7000-MIB", "briHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "briHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    briHistPMEntry.setStatus("current")


class _BriHistPMShelfIdx_Type(Integer32):
    """Custom type briHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_BriHistPMShelfIdx_Type.__name__ = "Integer32"
_BriHistPMShelfIdx_Object = MibTableColumn
briHistPMShelfIdx = _BriHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 1),
    _BriHistPMShelfIdx_Type()
)
briHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briHistPMShelfIdx.setStatus("current")


class _BriHistPMSlotIdx_Type(Integer32):
    """Custom type briHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_BriHistPMSlotIdx_Type.__name__ = "Integer32"
_BriHistPMSlotIdx_Object = MibTableColumn
briHistPMSlotIdx = _BriHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 2),
    _BriHistPMSlotIdx_Type()
)
briHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briHistPMSlotIdx.setStatus("current")


class _BriHistPMPortIdx_Type(Integer32):
    """Custom type briHistPMPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_BriHistPMPortIdx_Type.__name__ = "Integer32"
_BriHistPMPortIdx_Object = MibTableColumn
briHistPMPortIdx = _BriHistPMPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 3),
    _BriHistPMPortIdx_Type()
)
briHistPMPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briHistPMPortIdx.setStatus("current")
_BriHistPMIntervalTypeIdx_Type = PMIntervalType
_BriHistPMIntervalTypeIdx_Object = MibTableColumn
briHistPMIntervalTypeIdx = _BriHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 4),
    _BriHistPMIntervalTypeIdx_Type()
)
briHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briHistPMIntervalTypeIdx.setStatus("current")


class _BriHistPMIntervalIdx_Type(Integer32):
    """Custom type briHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_BriHistPMIntervalIdx_Type.__name__ = "Integer32"
_BriHistPMIntervalIdx_Object = MibTableColumn
briHistPMIntervalIdx = _BriHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 5),
    _BriHistPMIntervalIdx_Type()
)
briHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briHistPMIntervalIdx.setStatus("current")
_BriHistPMOPRValue_Type = FixedX10
_BriHistPMOPRValue_Object = MibTableColumn
briHistPMOPRValue = _BriHistPMOPRValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 6),
    _BriHistPMOPRValue_Type()
)
briHistPMOPRValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMOPRValue.setUnits("dBm/10")
_BriHistPMOPRTimeStamp_Type = DateAndTime
_BriHistPMOPRTimeStamp_Object = MibTableColumn
briHistPMOPRTimeStamp = _BriHistPMOPRTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 7),
    _BriHistPMOPRTimeStamp_Type()
)
briHistPMOPRTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRTimeStamp.setStatus("current")
_BriHistPMOPRValidity_Type = PMValidity
_BriHistPMOPRValidity_Object = MibTableColumn
briHistPMOPRValidity = _BriHistPMOPRValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 8),
    _BriHistPMOPRValidity_Type()
)
briHistPMOPRValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRValidity.setStatus("current")
_BriHistPMOPTValue_Type = FixedX10
_BriHistPMOPTValue_Object = MibTableColumn
briHistPMOPTValue = _BriHistPMOPTValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 9),
    _BriHistPMOPTValue_Type()
)
briHistPMOPTValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMOPTValue.setUnits("dBm/10")
_BriHistPMOPTTimeStamp_Type = DateAndTime
_BriHistPMOPTTimeStamp_Object = MibTableColumn
briHistPMOPTTimeStamp = _BriHistPMOPTTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 10),
    _BriHistPMOPTTimeStamp_Type()
)
briHistPMOPTTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTTimeStamp.setStatus("current")
_BriHistPMOPTValidity_Type = PMValidity
_BriHistPMOPTValidity_Object = MibTableColumn
briHistPMOPTValidity = _BriHistPMOPTValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 11),
    _BriHistPMOPTValidity_Type()
)
briHistPMOPTValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTValidity.setStatus("current")


class _BriHistPMTempValue_Type(Integer32):
    """Custom type briHistPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_BriHistPMTempValue_Type.__name__ = "Integer32"
_BriHistPMTempValue_Object = MibTableColumn
briHistPMTempValue = _BriHistPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 12),
    _BriHistPMTempValue_Type()
)
briHistPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMTempValue.setUnits("degrees Celsius")
_BriHistPMTempTimeStamp_Type = DateAndTime
_BriHistPMTempTimeStamp_Object = MibTableColumn
briHistPMTempTimeStamp = _BriHistPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 13),
    _BriHistPMTempTimeStamp_Type()
)
briHistPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMTempTimeStamp.setStatus("current")
_BriHistPMTempValidity_Type = PMValidity
_BriHistPMTempValidity_Object = MibTableColumn
briHistPMTempValidity = _BriHistPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 14),
    _BriHistPMTempValidity_Type()
)
briHistPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMTempValidity.setStatus("current")
_BriHistPMSupplyVoltageValue_Type = FixedX10
_BriHistPMSupplyVoltageValue_Object = MibTableColumn
briHistPMSupplyVoltageValue = _BriHistPMSupplyVoltageValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 15),
    _BriHistPMSupplyVoltageValue_Type()
)
briHistPMSupplyVoltageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMSupplyVoltageValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMSupplyVoltageValue.setUnits("mVolts/10")
_BriHistPMSupplyVoltageTimeStamp_Type = DateAndTime
_BriHistPMSupplyVoltageTimeStamp_Object = MibTableColumn
briHistPMSupplyVoltageTimeStamp = _BriHistPMSupplyVoltageTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 16),
    _BriHistPMSupplyVoltageTimeStamp_Type()
)
briHistPMSupplyVoltageTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMSupplyVoltageTimeStamp.setStatus("current")
_BriHistPMSupplyVoltageValidity_Type = PMValidity
_BriHistPMSupplyVoltageValidity_Object = MibTableColumn
briHistPMSupplyVoltageValidity = _BriHistPMSupplyVoltageValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 17),
    _BriHistPMSupplyVoltageValidity_Type()
)
briHistPMSupplyVoltageValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMSupplyVoltageValidity.setStatus("current")


class _BriHistPMLBCValue_Type(Integer32):
    """Custom type briHistPMLBCValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_BriHistPMLBCValue_Type.__name__ = "Integer32"
_BriHistPMLBCValue_Object = MibTableColumn
briHistPMLBCValue = _BriHistPMLBCValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 18),
    _BriHistPMLBCValue_Type()
)
briHistPMLBCValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMLBCValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMLBCValue.setUnits("mAmp")
_BriHistPMLBCTimeStamp_Type = DateAndTime
_BriHistPMLBCTimeStamp_Object = MibTableColumn
briHistPMLBCTimeStamp = _BriHistPMLBCTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 19),
    _BriHistPMLBCTimeStamp_Type()
)
briHistPMLBCTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMLBCTimeStamp.setStatus("current")
_BriHistPMLBCValidity_Type = PMValidity
_BriHistPMLBCValidity_Object = MibTableColumn
briHistPMLBCValidity = _BriHistPMLBCValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 20),
    _BriHistPMLBCValidity_Type()
)
briHistPMLBCValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMLBCValidity.setStatus("current")
_BriHistPMOPRMinValue_Type = FixedX10
_BriHistPMOPRMinValue_Object = MibTableColumn
briHistPMOPRMinValue = _BriHistPMOPRMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 21),
    _BriHistPMOPRMinValue_Type()
)
briHistPMOPRMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRMinValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMOPRMinValue.setUnits("dBm/10")
_BriHistPMOPRMinTimeStamp_Type = DateAndTime
_BriHistPMOPRMinTimeStamp_Object = MibTableColumn
briHistPMOPRMinTimeStamp = _BriHistPMOPRMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 22),
    _BriHistPMOPRMinTimeStamp_Type()
)
briHistPMOPRMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRMinTimeStamp.setStatus("current")
_BriHistPMOPRMinValidity_Type = PMValidity
_BriHistPMOPRMinValidity_Object = MibTableColumn
briHistPMOPRMinValidity = _BriHistPMOPRMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 23),
    _BriHistPMOPRMinValidity_Type()
)
briHistPMOPRMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRMinValidity.setStatus("current")
_BriHistPMOPRMinInitialize_Type = InitializeCmd
_BriHistPMOPRMinInitialize_Object = MibTableColumn
briHistPMOPRMinInitialize = _BriHistPMOPRMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 24),
    _BriHistPMOPRMinInitialize_Type()
)
briHistPMOPRMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briHistPMOPRMinInitialize.setStatus("current")
_BriHistPMOPRMaxValue_Type = FixedX10
_BriHistPMOPRMaxValue_Object = MibTableColumn
briHistPMOPRMaxValue = _BriHistPMOPRMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 25),
    _BriHistPMOPRMaxValue_Type()
)
briHistPMOPRMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMOPRMaxValue.setUnits("dBm/10")
_BriHistPMOPRMaxTimeStamp_Type = DateAndTime
_BriHistPMOPRMaxTimeStamp_Object = MibTableColumn
briHistPMOPRMaxTimeStamp = _BriHistPMOPRMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 26),
    _BriHistPMOPRMaxTimeStamp_Type()
)
briHistPMOPRMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRMaxTimeStamp.setStatus("current")
_BriHistPMOPRMaxValidity_Type = PMValidity
_BriHistPMOPRMaxValidity_Object = MibTableColumn
briHistPMOPRMaxValidity = _BriHistPMOPRMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 27),
    _BriHistPMOPRMaxValidity_Type()
)
briHistPMOPRMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRMaxValidity.setStatus("current")
_BriHistPMOPRMaxInitialize_Type = InitializeCmd
_BriHistPMOPRMaxInitialize_Object = MibTableColumn
briHistPMOPRMaxInitialize = _BriHistPMOPRMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 28),
    _BriHistPMOPRMaxInitialize_Type()
)
briHistPMOPRMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briHistPMOPRMaxInitialize.setStatus("current")
_BriHistPMOPRAvgValue_Type = FixedX10
_BriHistPMOPRAvgValue_Object = MibTableColumn
briHistPMOPRAvgValue = _BriHistPMOPRAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 29),
    _BriHistPMOPRAvgValue_Type()
)
briHistPMOPRAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMOPRAvgValue.setUnits("dBm/10")
_BriHistPMOPRAvgTimeStamp_Type = DateAndTime
_BriHistPMOPRAvgTimeStamp_Object = MibTableColumn
briHistPMOPRAvgTimeStamp = _BriHistPMOPRAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 30),
    _BriHistPMOPRAvgTimeStamp_Type()
)
briHistPMOPRAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRAvgTimeStamp.setStatus("current")
_BriHistPMOPRAvgValidity_Type = PMValidity
_BriHistPMOPRAvgValidity_Object = MibTableColumn
briHistPMOPRAvgValidity = _BriHistPMOPRAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 31),
    _BriHistPMOPRAvgValidity_Type()
)
briHistPMOPRAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPRAvgValidity.setStatus("current")
_BriHistPMOPRAvgInitialize_Type = InitializeCmd
_BriHistPMOPRAvgInitialize_Object = MibTableColumn
briHistPMOPRAvgInitialize = _BriHistPMOPRAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 32),
    _BriHistPMOPRAvgInitialize_Type()
)
briHistPMOPRAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briHistPMOPRAvgInitialize.setStatus("current")
_BriHistPMOPTMinValue_Type = FixedX10
_BriHistPMOPTMinValue_Object = MibTableColumn
briHistPMOPTMinValue = _BriHistPMOPTMinValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 33),
    _BriHistPMOPTMinValue_Type()
)
briHistPMOPTMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTMinValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMOPTMinValue.setUnits("dBm/10")
_BriHistPMOPTMinTimeStamp_Type = DateAndTime
_BriHistPMOPTMinTimeStamp_Object = MibTableColumn
briHistPMOPTMinTimeStamp = _BriHistPMOPTMinTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 34),
    _BriHistPMOPTMinTimeStamp_Type()
)
briHistPMOPTMinTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTMinTimeStamp.setStatus("current")
_BriHistPMOPTMinValidity_Type = PMValidity
_BriHistPMOPTMinValidity_Object = MibTableColumn
briHistPMOPTMinValidity = _BriHistPMOPTMinValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 35),
    _BriHistPMOPTMinValidity_Type()
)
briHistPMOPTMinValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTMinValidity.setStatus("current")
_BriHistPMOPTMinInitialize_Type = InitializeCmd
_BriHistPMOPTMinInitialize_Object = MibTableColumn
briHistPMOPTMinInitialize = _BriHistPMOPTMinInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 36),
    _BriHistPMOPTMinInitialize_Type()
)
briHistPMOPTMinInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briHistPMOPTMinInitialize.setStatus("current")
_BriHistPMOPTMaxValue_Type = FixedX10
_BriHistPMOPTMaxValue_Object = MibTableColumn
briHistPMOPTMaxValue = _BriHistPMOPTMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 37),
    _BriHistPMOPTMaxValue_Type()
)
briHistPMOPTMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMOPTMaxValue.setUnits("dBm/10")
_BriHistPMOPTMaxTimeStamp_Type = DateAndTime
_BriHistPMOPTMaxTimeStamp_Object = MibTableColumn
briHistPMOPTMaxTimeStamp = _BriHistPMOPTMaxTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 38),
    _BriHistPMOPTMaxTimeStamp_Type()
)
briHistPMOPTMaxTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTMaxTimeStamp.setStatus("current")
_BriHistPMOPTMaxValidity_Type = PMValidity
_BriHistPMOPTMaxValidity_Object = MibTableColumn
briHistPMOPTMaxValidity = _BriHistPMOPTMaxValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 39),
    _BriHistPMOPTMaxValidity_Type()
)
briHistPMOPTMaxValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTMaxValidity.setStatus("current")
_BriHistPMOPTMaxInitialize_Type = InitializeCmd
_BriHistPMOPTMaxInitialize_Object = MibTableColumn
briHistPMOPTMaxInitialize = _BriHistPMOPTMaxInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 40),
    _BriHistPMOPTMaxInitialize_Type()
)
briHistPMOPTMaxInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briHistPMOPTMaxInitialize.setStatus("current")
_BriHistPMOPTAvgValue_Type = FixedX10
_BriHistPMOPTAvgValue_Object = MibTableColumn
briHistPMOPTAvgValue = _BriHistPMOPTAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 41),
    _BriHistPMOPTAvgValue_Type()
)
briHistPMOPTAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTAvgValue.setStatus("current")
if mibBuilder.loadTexts:
    briHistPMOPTAvgValue.setUnits("dBm/10")
_BriHistPMOPTAvgTimeStamp_Type = DateAndTime
_BriHistPMOPTAvgTimeStamp_Object = MibTableColumn
briHistPMOPTAvgTimeStamp = _BriHistPMOPTAvgTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 42),
    _BriHistPMOPTAvgTimeStamp_Type()
)
briHistPMOPTAvgTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTAvgTimeStamp.setStatus("current")
_BriHistPMOPTAvgValidity_Type = PMValidity
_BriHistPMOPTAvgValidity_Object = MibTableColumn
briHistPMOPTAvgValidity = _BriHistPMOPTAvgValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 43),
    _BriHistPMOPTAvgValidity_Type()
)
briHistPMOPTAvgValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    briHistPMOPTAvgValidity.setStatus("current")
_BriHistPMOPTAvgInitialize_Type = InitializeCmd
_BriHistPMOPTAvgInitialize_Object = MibTableColumn
briHistPMOPTAvgInitialize = _BriHistPMOPTAvgInitialize_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 44),
    _BriHistPMOPTAvgInitialize_Type()
)
briHistPMOPTAvgInitialize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briHistPMOPTAvgInitialize.setStatus("current")
_CpCrntPMTable_Object = MibTable
cpCrntPMTable = _CpCrntPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49)
)
if mibBuilder.loadTexts:
    cpCrntPMTable.setStatus("current")
_CpCrntPMEntry_Object = MibTableRow
cpCrntPMEntry = _CpCrntPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1)
)
cpCrntPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "cpCrntPMCpTypeIdx"),
    (0, "BTI-7000-MIB", "cpCrntPMShelfIdx"),
    (0, "BTI-7000-MIB", "cpCrntPMSlotIdx"),
    (0, "BTI-7000-MIB", "cpCrntPMIntervalTypeIdx"),
)
if mibBuilder.loadTexts:
    cpCrntPMEntry.setStatus("current")
_CpCrntPMCpTypeIdx_Type = CpType
_CpCrntPMCpTypeIdx_Object = MibTableColumn
cpCrntPMCpTypeIdx = _CpCrntPMCpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 1),
    _CpCrntPMCpTypeIdx_Type()
)
cpCrntPMCpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCrntPMCpTypeIdx.setStatus("current")


class _CpCrntPMShelfIdx_Type(Integer32):
    """Custom type cpCrntPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_CpCrntPMShelfIdx_Type.__name__ = "Integer32"
_CpCrntPMShelfIdx_Object = MibTableColumn
cpCrntPMShelfIdx = _CpCrntPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 2),
    _CpCrntPMShelfIdx_Type()
)
cpCrntPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCrntPMShelfIdx.setStatus("current")


class _CpCrntPMSlotIdx_Type(Integer32):
    """Custom type cpCrntPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_CpCrntPMSlotIdx_Type.__name__ = "Integer32"
_CpCrntPMSlotIdx_Object = MibTableColumn
cpCrntPMSlotIdx = _CpCrntPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 3),
    _CpCrntPMSlotIdx_Type()
)
cpCrntPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCrntPMSlotIdx.setStatus("current")
_CpCrntPMIntervalTypeIdx_Type = PMIntervalType
_CpCrntPMIntervalTypeIdx_Object = MibTableColumn
cpCrntPMIntervalTypeIdx = _CpCrntPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 4),
    _CpCrntPMIntervalTypeIdx_Type()
)
cpCrntPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCrntPMIntervalTypeIdx.setStatus("current")


class _CpCrntPMTempValue_Type(Integer32):
    """Custom type cpCrntPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_CpCrntPMTempValue_Type.__name__ = "Integer32"
_CpCrntPMTempValue_Object = MibTableColumn
cpCrntPMTempValue = _CpCrntPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 5),
    _CpCrntPMTempValue_Type()
)
cpCrntPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCrntPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    cpCrntPMTempValue.setUnits("degrees Celsius")
_CpCrntPMTempTimeStamp_Type = DateAndTime
_CpCrntPMTempTimeStamp_Object = MibTableColumn
cpCrntPMTempTimeStamp = _CpCrntPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 6),
    _CpCrntPMTempTimeStamp_Type()
)
cpCrntPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCrntPMTempTimeStamp.setStatus("current")
_CpCrntPMTempValidity_Type = PMValidity
_CpCrntPMTempValidity_Object = MibTableColumn
cpCrntPMTempValidity = _CpCrntPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 7),
    _CpCrntPMTempValidity_Type()
)
cpCrntPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCrntPMTempValidity.setStatus("current")
_CpHistPMTable_Object = MibTable
cpHistPMTable = _CpHistPMTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50)
)
if mibBuilder.loadTexts:
    cpHistPMTable.setStatus("current")
_CpHistPMEntry_Object = MibTableRow
cpHistPMEntry = _CpHistPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1)
)
cpHistPMEntry.setIndexNames(
    (0, "BTI-7000-MIB", "cpHistPMCpTypeIdx"),
    (0, "BTI-7000-MIB", "cpHistPMShelfIdx"),
    (0, "BTI-7000-MIB", "cpHistPMSlotIdx"),
    (0, "BTI-7000-MIB", "cpHistPMIntervalTypeIdx"),
    (0, "BTI-7000-MIB", "cpHistPMIntervalIdx"),
)
if mibBuilder.loadTexts:
    cpHistPMEntry.setStatus("current")
_CpHistPMCpTypeIdx_Type = CpType
_CpHistPMCpTypeIdx_Object = MibTableColumn
cpHistPMCpTypeIdx = _CpHistPMCpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 1),
    _CpHistPMCpTypeIdx_Type()
)
cpHistPMCpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpHistPMCpTypeIdx.setStatus("current")


class _CpHistPMShelfIdx_Type(Integer32):
    """Custom type cpHistPMShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_CpHistPMShelfIdx_Type.__name__ = "Integer32"
_CpHistPMShelfIdx_Object = MibTableColumn
cpHistPMShelfIdx = _CpHistPMShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 2),
    _CpHistPMShelfIdx_Type()
)
cpHistPMShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpHistPMShelfIdx.setStatus("current")


class _CpHistPMSlotIdx_Type(Integer32):
    """Custom type cpHistPMSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_CpHistPMSlotIdx_Type.__name__ = "Integer32"
_CpHistPMSlotIdx_Object = MibTableColumn
cpHistPMSlotIdx = _CpHistPMSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 3),
    _CpHistPMSlotIdx_Type()
)
cpHistPMSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpHistPMSlotIdx.setStatus("current")
_CpHistPMIntervalTypeIdx_Type = PMIntervalType
_CpHistPMIntervalTypeIdx_Object = MibTableColumn
cpHistPMIntervalTypeIdx = _CpHistPMIntervalTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 4),
    _CpHistPMIntervalTypeIdx_Type()
)
cpHistPMIntervalTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpHistPMIntervalTypeIdx.setStatus("current")


class _CpHistPMIntervalIdx_Type(Integer32):
    """Custom type cpHistPMIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_CpHistPMIntervalIdx_Type.__name__ = "Integer32"
_CpHistPMIntervalIdx_Object = MibTableColumn
cpHistPMIntervalIdx = _CpHistPMIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 5),
    _CpHistPMIntervalIdx_Type()
)
cpHistPMIntervalIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpHistPMIntervalIdx.setStatus("current")


class _CpHistPMTempValue_Type(Integer32):
    """Custom type cpHistPMTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32768, 32767),
    )


_CpHistPMTempValue_Type.__name__ = "Integer32"
_CpHistPMTempValue_Object = MibTableColumn
cpHistPMTempValue = _CpHistPMTempValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 6),
    _CpHistPMTempValue_Type()
)
cpHistPMTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHistPMTempValue.setStatus("current")
if mibBuilder.loadTexts:
    cpHistPMTempValue.setUnits("degrees Celsius")
_CpHistPMTempTimeStamp_Type = DateAndTime
_CpHistPMTempTimeStamp_Object = MibTableColumn
cpHistPMTempTimeStamp = _CpHistPMTempTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 7),
    _CpHistPMTempTimeStamp_Type()
)
cpHistPMTempTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHistPMTempTimeStamp.setStatus("current")
_CpHistPMTempValidity_Type = PMValidity
_CpHistPMTempValidity_Object = MibTableColumn
cpHistPMTempValidity = _CpHistPMTempValidity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 8),
    _CpHistPMTempValidity_Type()
)
cpHistPMTempValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHistPMTempValidity.setStatus("current")
_Conditions_ObjectIdentity = ObjectIdentity
conditions = _Conditions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7)
)
_NotifObjects_ObjectIdentity = ObjectIdentity
notifObjects = _NotifObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1)
)
_CondDateAndTime_Type = DateAndTime
_CondDateAndTime_Object = MibScalar
condDateAndTime = _CondDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 1),
    _CondDateAndTime_Type()
)
condDateAndTime.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    condDateAndTime.setStatus("current")
_CondReportType_Type = CondReportType
_CondReportType_Object = MibScalar
condReportType = _CondReportType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 2),
    _CondReportType_Type()
)
condReportType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    condReportType.setStatus("current")
_CondSeverity_Type = CondSeverity
_CondSeverity_Object = MibScalar
condSeverity = _CondSeverity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 3),
    _CondSeverity_Type()
)
condSeverity.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    condSeverity.setStatus("current")
_CondServiceAffecting_Type = CondServiceAffecting
_CondServiceAffecting_Object = MibScalar
condServiceAffecting = _CondServiceAffecting_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 4),
    _CondServiceAffecting_Type()
)
condServiceAffecting.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    condServiceAffecting.setStatus("current")
_CondDescription_Type = DisplayString
_CondDescription_Object = MibScalar
condDescription = _CondDescription_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 5),
    _CondDescription_Type()
)
condDescription.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    condDescription.setStatus("current")
_CondObjectType_Type = NotifObjectType
_CondObjectType_Object = MibScalar
condObjectType = _CondObjectType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 6),
    _CondObjectType_Type()
)
condObjectType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    condObjectType.setStatus("current")
_CondCodeType_Type = NotifCodeType
_CondCodeType_Object = MibScalar
condCodeType = _CondCodeType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 7),
    _CondCodeType_Type()
)
condCodeType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    condCodeType.setStatus("current")
_ActCondTable_Object = MibTable
actCondTable = _ActCondTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2)
)
if mibBuilder.loadTexts:
    actCondTable.setStatus("current")
_ActCondEntry_Object = MibTableRow
actCondEntry = _ActCondEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1)
)
actCondEntry.setIndexNames(
    (0, "BTI-7000-MIB", "actCondNotifIdx"),
    (0, "BTI-7000-MIB", "actCondTableEntryIdx"),
    (0, "BTI-7000-MIB", "actCondInstanceIdx"),
)
if mibBuilder.loadTexts:
    actCondEntry.setStatus("current")
_ActCondNotifIdx_Type = ObjectIdentifier
_ActCondNotifIdx_Object = MibTableColumn
actCondNotifIdx = _ActCondNotifIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 1),
    _ActCondNotifIdx_Type()
)
actCondNotifIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    actCondNotifIdx.setStatus("current")
_ActCondTableEntryIdx_Type = ObjectIdentifier
_ActCondTableEntryIdx_Object = MibTableColumn
actCondTableEntryIdx = _ActCondTableEntryIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 2),
    _ActCondTableEntryIdx_Type()
)
actCondTableEntryIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    actCondTableEntryIdx.setStatus("current")


class _ActCondInstanceIdx_Type(DisplayString):
    """Custom type actCondInstanceIdx based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_ActCondInstanceIdx_Type.__name__ = "DisplayString"
_ActCondInstanceIdx_Object = MibTableColumn
actCondInstanceIdx = _ActCondInstanceIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 3),
    _ActCondInstanceIdx_Type()
)
actCondInstanceIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    actCondInstanceIdx.setStatus("current")
_ActCondReportType_Type = CondReportType
_ActCondReportType_Object = MibTableColumn
actCondReportType = _ActCondReportType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 4),
    _ActCondReportType_Type()
)
actCondReportType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actCondReportType.setStatus("current")
_ActCondDateAndTime_Type = DateAndTime
_ActCondDateAndTime_Object = MibTableColumn
actCondDateAndTime = _ActCondDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 5),
    _ActCondDateAndTime_Type()
)
actCondDateAndTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actCondDateAndTime.setStatus("current")
_ActCondSeverity_Type = CondSeverity
_ActCondSeverity_Object = MibTableColumn
actCondSeverity = _ActCondSeverity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 6),
    _ActCondSeverity_Type()
)
actCondSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actCondSeverity.setStatus("current")
_ActCondServiceAffecting_Type = CondServiceAffecting
_ActCondServiceAffecting_Object = MibTableColumn
actCondServiceAffecting = _ActCondServiceAffecting_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 7),
    _ActCondServiceAffecting_Type()
)
actCondServiceAffecting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actCondServiceAffecting.setStatus("current")
_ActCondDescription_Type = DisplayString
_ActCondDescription_Object = MibTableColumn
actCondDescription = _ActCondDescription_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 8),
    _ActCondDescription_Type()
)
actCondDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actCondDescription.setStatus("current")
_ActCondObjectType_Type = NotifObjectType
_ActCondObjectType_Object = MibTableColumn
actCondObjectType = _ActCondObjectType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 9),
    _ActCondObjectType_Type()
)
actCondObjectType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actCondObjectType.setStatus("current")
_ActCondCodeType_Type = NotifCodeType
_ActCondCodeType_Object = MibTableColumn
actCondCodeType = _ActCondCodeType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 10),
    _ActCondCodeType_Type()
)
actCondCodeType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actCondCodeType.setStatus("current")


class _ActCondSummary_Type(Integer32):
    """Custom type actCondSummary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("criticalAlarmsActive", 5),
          ("majorAlarmsActive", 4),
          ("minorAlarmsActive", 3),
          ("noActiveConditions", 1),
          ("nonAlarmedConditionsActive", 2))
    )


_ActCondSummary_Type.__name__ = "Integer32"
_ActCondSummary_Object = MibScalar
actCondSummary = _ActCondSummary_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 3),
    _ActCondSummary_Type()
)
actCondSummary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actCondSummary.setStatus("current")
_ActAlarmTable_Object = MibTable
actAlarmTable = _ActAlarmTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4)
)
if mibBuilder.loadTexts:
    actAlarmTable.setStatus("current")
_ActAlarmEntry_Object = MibTableRow
actAlarmEntry = _ActAlarmEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1)
)
actAlarmEntry.setIndexNames(
    (0, "BTI-7000-MIB", "actAlarmNotifIdx"),
    (0, "BTI-7000-MIB", "actAlarmTableEntryIdx"),
    (0, "BTI-7000-MIB", "actAlarmInstanceIdx"),
)
if mibBuilder.loadTexts:
    actAlarmEntry.setStatus("current")
_ActAlarmNotifIdx_Type = ObjectIdentifier
_ActAlarmNotifIdx_Object = MibTableColumn
actAlarmNotifIdx = _ActAlarmNotifIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 1),
    _ActAlarmNotifIdx_Type()
)
actAlarmNotifIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    actAlarmNotifIdx.setStatus("current")
_ActAlarmTableEntryIdx_Type = ObjectIdentifier
_ActAlarmTableEntryIdx_Object = MibTableColumn
actAlarmTableEntryIdx = _ActAlarmTableEntryIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 2),
    _ActAlarmTableEntryIdx_Type()
)
actAlarmTableEntryIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    actAlarmTableEntryIdx.setStatus("current")


class _ActAlarmInstanceIdx_Type(DisplayString):
    """Custom type actAlarmInstanceIdx based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_ActAlarmInstanceIdx_Type.__name__ = "DisplayString"
_ActAlarmInstanceIdx_Object = MibTableColumn
actAlarmInstanceIdx = _ActAlarmInstanceIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 3),
    _ActAlarmInstanceIdx_Type()
)
actAlarmInstanceIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    actAlarmInstanceIdx.setStatus("current")
_ActAlarmReportType_Type = CondReportType
_ActAlarmReportType_Object = MibTableColumn
actAlarmReportType = _ActAlarmReportType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 4),
    _ActAlarmReportType_Type()
)
actAlarmReportType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actAlarmReportType.setStatus("current")
_ActAlarmDateAndTime_Type = DateAndTime
_ActAlarmDateAndTime_Object = MibTableColumn
actAlarmDateAndTime = _ActAlarmDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 5),
    _ActAlarmDateAndTime_Type()
)
actAlarmDateAndTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actAlarmDateAndTime.setStatus("current")
_ActAlarmSeverity_Type = CondSeverity
_ActAlarmSeverity_Object = MibTableColumn
actAlarmSeverity = _ActAlarmSeverity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 6),
    _ActAlarmSeverity_Type()
)
actAlarmSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actAlarmSeverity.setStatus("current")
_ActAlarmServiceAffecting_Type = CondServiceAffecting
_ActAlarmServiceAffecting_Object = MibTableColumn
actAlarmServiceAffecting = _ActAlarmServiceAffecting_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 7),
    _ActAlarmServiceAffecting_Type()
)
actAlarmServiceAffecting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actAlarmServiceAffecting.setStatus("current")
_ActAlarmDescription_Type = DisplayString
_ActAlarmDescription_Object = MibTableColumn
actAlarmDescription = _ActAlarmDescription_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 8),
    _ActAlarmDescription_Type()
)
actAlarmDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actAlarmDescription.setStatus("current")
_ActAlarmObjectType_Type = NotifObjectType
_ActAlarmObjectType_Object = MibTableColumn
actAlarmObjectType = _ActAlarmObjectType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 9),
    _ActAlarmObjectType_Type()
)
actAlarmObjectType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actAlarmObjectType.setStatus("current")
_ActAlarmCodeType_Type = NotifCodeType
_ActAlarmCodeType_Object = MibTableColumn
actAlarmCodeType = _ActAlarmCodeType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 10),
    _ActAlarmCodeType_Type()
)
actAlarmCodeType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    actAlarmCodeType.setStatus("current")
_Administration_ObjectIdentity = ObjectIdentity
administration = _Administration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8)
)
_Tl1UserTable_Object = MibTable
tl1UserTable = _Tl1UserTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1)
)
if mibBuilder.loadTexts:
    tl1UserTable.setStatus("current")
_Tl1UserEntry_Object = MibTableRow
tl1UserEntry = _Tl1UserEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1, 1)
)
tl1UserEntry.setIndexNames(
    (0, "BTI-7000-MIB", "tl1UserIdx"),
)
if mibBuilder.loadTexts:
    tl1UserEntry.setStatus("current")


class _Tl1UserIdx_Type(DisplayString):
    """Custom type tl1UserIdx based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Tl1UserIdx_Type.__name__ = "DisplayString"
_Tl1UserIdx_Object = MibTableColumn
tl1UserIdx = _Tl1UserIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1, 1, 1),
    _Tl1UserIdx_Type()
)
tl1UserIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    tl1UserIdx.setStatus("current")


class _Tl1IpLockoutAddr_Type(DisplayString):
    """Custom type tl1IpLockoutAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_Tl1IpLockoutAddr_Type.__name__ = "DisplayString"
_Tl1IpLockoutAddr_Object = MibScalar
tl1IpLockoutAddr = _Tl1IpLockoutAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 2),
    _Tl1IpLockoutAddr_Type()
)
tl1IpLockoutAddr.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    tl1IpLockoutAddr.setStatus("current")
_Tl1LogTable_Object = MibTable
tl1LogTable = _Tl1LogTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3)
)
if mibBuilder.loadTexts:
    tl1LogTable.setStatus("current")
_Tl1LogEntry_Object = MibTableRow
tl1LogEntry = _Tl1LogEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1)
)
tl1LogEntry.setIndexNames(
    (0, "BTI-7000-MIB", "tl1LogIdx"),
)
if mibBuilder.loadTexts:
    tl1LogEntry.setStatus("current")
_Tl1LogIdx_Type = Unsigned32
_Tl1LogIdx_Object = MibTableColumn
tl1LogIdx = _Tl1LogIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 1),
    _Tl1LogIdx_Type()
)
tl1LogIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    tl1LogIdx.setStatus("current")


class _Tl1LogSysName_Type(DisplayString):
    """Custom type tl1LogSysName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_Tl1LogSysName_Type.__name__ = "DisplayString"
_Tl1LogSysName_Object = MibTableColumn
tl1LogSysName = _Tl1LogSysName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 2),
    _Tl1LogSysName_Type()
)
tl1LogSysName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tl1LogSysName.setStatus("current")


class _Tl1LogType_Type(Integer32):
    """Custom type tl1LogType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 1),
          ("command", 5),
          ("dbChange", 3),
          ("event", 2),
          ("rtrvcmd", 6),
          ("security", 4))
    )


_Tl1LogType_Type.__name__ = "Integer32"
_Tl1LogType_Object = MibTableColumn
tl1LogType = _Tl1LogType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 3),
    _Tl1LogType_Type()
)
tl1LogType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tl1LogType.setStatus("current")
_Tl1LogTypeSpecificLogNum_Type = Unsigned32
_Tl1LogTypeSpecificLogNum_Object = MibTableColumn
tl1LogTypeSpecificLogNum = _Tl1LogTypeSpecificLogNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 4),
    _Tl1LogTypeSpecificLogNum_Type()
)
tl1LogTypeSpecificLogNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tl1LogTypeSpecificLogNum.setStatus("current")


class _Tl1LogMsgCode_Type(DisplayString):
    """Custom type tl1LogMsgCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Tl1LogMsgCode_Type.__name__ = "DisplayString"
_Tl1LogMsgCode_Object = MibTableColumn
tl1LogMsgCode = _Tl1LogMsgCode_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 5),
    _Tl1LogMsgCode_Type()
)
tl1LogMsgCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tl1LogMsgCode.setStatus("current")
_Tl1LogDateAndTime_Type = DateAndTime
_Tl1LogDateAndTime_Object = MibTableColumn
tl1LogDateAndTime = _Tl1LogDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 6),
    _Tl1LogDateAndTime_Type()
)
tl1LogDateAndTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tl1LogDateAndTime.setStatus("current")
_Tl1LogMessage_Type = DisplayString
_Tl1LogMessage_Object = MibTableColumn
tl1LogMessage = _Tl1LogMessage_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 7),
    _Tl1LogMessage_Type()
)
tl1LogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tl1LogMessage.setStatus("current")
_LatestTl1LogNum_Type = Unsigned32
_LatestTl1LogNum_Object = MibScalar
latestTl1LogNum = _LatestTl1LogNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 4),
    _LatestTl1LogNum_Type()
)
latestTl1LogNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    latestTl1LogNum.setStatus("current")
_SnmpTrapRcvTable_Object = MibTable
snmpTrapRcvTable = _SnmpTrapRcvTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5)
)
if mibBuilder.loadTexts:
    snmpTrapRcvTable.setStatus("current")
_SnmpTrapRcvEntry_Object = MibTableRow
snmpTrapRcvEntry = _SnmpTrapRcvEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1)
)
snmpTrapRcvEntry.setIndexNames(
    (0, "BTI-7000-MIB", "snmpTrapRcvIdx"),
)
if mibBuilder.loadTexts:
    snmpTrapRcvEntry.setStatus("current")


class _SnmpTrapRcvIdx_Type(DisplayString):
    """Custom type snmpTrapRcvIdx based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SnmpTrapRcvIdx_Type.__name__ = "DisplayString"
_SnmpTrapRcvIdx_Object = MibTableColumn
snmpTrapRcvIdx = _SnmpTrapRcvIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 1),
    _SnmpTrapRcvIdx_Type()
)
snmpTrapRcvIdx.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapRcvIdx.setStatus("current")
_SnmpTrapRcvIPAddr_Type = IpAddress
_SnmpTrapRcvIPAddr_Object = MibTableColumn
snmpTrapRcvIPAddr = _SnmpTrapRcvIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 2),
    _SnmpTrapRcvIPAddr_Type()
)
snmpTrapRcvIPAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapRcvIPAddr.setStatus("current")


class _SnmpTrapRcvPort_Type(Integer32):
    """Custom type snmpTrapRcvPort based on Integer32"""
    defaultValue = 162

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SnmpTrapRcvPort_Type.__name__ = "Integer32"
_SnmpTrapRcvPort_Object = MibTableColumn
snmpTrapRcvPort = _SnmpTrapRcvPort_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 3),
    _SnmpTrapRcvPort_Type()
)
snmpTrapRcvPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapRcvPort.setStatus("current")


class _SnmpTrapRcvNotifType_Type(Integer32):
    """Custom type snmpTrapRcvNotifType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inform", 2),
          ("trap", 1))
    )


_SnmpTrapRcvNotifType_Type.__name__ = "Integer32"
_SnmpTrapRcvNotifType_Object = MibTableColumn
snmpTrapRcvNotifType = _SnmpTrapRcvNotifType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 4),
    _SnmpTrapRcvNotifType_Type()
)
snmpTrapRcvNotifType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapRcvNotifType.setStatus("current")


class _SnmpTrapRcvVersion_Type(Integer32):
    """Custom type snmpTrapRcvVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("snmpV1", 1),
          ("snmpV2c", 2),
          ("snmpV3", 3))
    )


_SnmpTrapRcvVersion_Type.__name__ = "Integer32"
_SnmpTrapRcvVersion_Object = MibTableColumn
snmpTrapRcvVersion = _SnmpTrapRcvVersion_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 5),
    _SnmpTrapRcvVersion_Type()
)
snmpTrapRcvVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapRcvVersion.setStatus("current")


class _SnmpTrapRcvCommunity_Type(DisplayString):
    """Custom type snmpTrapRcvCommunity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_SnmpTrapRcvCommunity_Type.__name__ = "DisplayString"
_SnmpTrapRcvCommunity_Object = MibTableColumn
snmpTrapRcvCommunity = _SnmpTrapRcvCommunity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 6),
    _SnmpTrapRcvCommunity_Type()
)
snmpTrapRcvCommunity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapRcvCommunity.setStatus("current")


class _SnmpTrapRcvTTL_Type(HoursAndMinutes):
    """Custom type snmpTrapRcvTTL based on HoursAndMinutes"""
    defaultValue = OctetString("000-00")


_SnmpTrapRcvTTL_Object = MibTableColumn
snmpTrapRcvTTL = _SnmpTrapRcvTTL_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 7),
    _SnmpTrapRcvTTL_Type()
)
snmpTrapRcvTTL.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapRcvTTL.setStatus("current")
_SnmpTrapRcvRowStatus_Type = RowStatus
_SnmpTrapRcvRowStatus_Object = MibTableColumn
snmpTrapRcvRowStatus = _SnmpTrapRcvRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 100),
    _SnmpTrapRcvRowStatus_Type()
)
snmpTrapRcvRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapRcvRowStatus.setStatus("current")
_Connections_ObjectIdentity = ObjectIdentity
connections = _Connections_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9)
)
_XcvrXCTable_Object = MibTable
xcvrXCTable = _XcvrXCTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1)
)
if mibBuilder.loadTexts:
    xcvrXCTable.setStatus("current")
_XcvrXCEntry_Object = MibTableRow
xcvrXCEntry = _XcvrXCEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1)
)
xcvrXCEntry.setIndexNames(
    (0, "BTI-7000-MIB", "xcvrXCSrcTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrXCSrcShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrXCSrcSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrXCSrcIdx"),
    (0, "BTI-7000-MIB", "xcvrXCDestTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrXCDestShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrXCDestSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrXCDestIdx"),
)
if mibBuilder.loadTexts:
    xcvrXCEntry.setStatus("current")
_XcvrXCSrcTypeIdx_Type = XcvrType
_XcvrXCSrcTypeIdx_Object = MibTableColumn
xcvrXCSrcTypeIdx = _XcvrXCSrcTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 1),
    _XcvrXCSrcTypeIdx_Type()
)
xcvrXCSrcTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrXCSrcTypeIdx.setStatus("current")


class _XcvrXCSrcShelfIdx_Type(Integer32):
    """Custom type xcvrXCSrcShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrXCSrcShelfIdx_Type.__name__ = "Integer32"
_XcvrXCSrcShelfIdx_Object = MibTableColumn
xcvrXCSrcShelfIdx = _XcvrXCSrcShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 2),
    _XcvrXCSrcShelfIdx_Type()
)
xcvrXCSrcShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrXCSrcShelfIdx.setStatus("current")


class _XcvrXCSrcSlotIdx_Type(Integer32):
    """Custom type xcvrXCSrcSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrXCSrcSlotIdx_Type.__name__ = "Integer32"
_XcvrXCSrcSlotIdx_Object = MibTableColumn
xcvrXCSrcSlotIdx = _XcvrXCSrcSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 3),
    _XcvrXCSrcSlotIdx_Type()
)
xcvrXCSrcSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrXCSrcSlotIdx.setStatus("current")


class _XcvrXCSrcIdx_Type(Integer32):
    """Custom type xcvrXCSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrXCSrcIdx_Type.__name__ = "Integer32"
_XcvrXCSrcIdx_Object = MibTableColumn
xcvrXCSrcIdx = _XcvrXCSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 4),
    _XcvrXCSrcIdx_Type()
)
xcvrXCSrcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrXCSrcIdx.setStatus("current")
_XcvrXCDestTypeIdx_Type = XcvrType
_XcvrXCDestTypeIdx_Object = MibTableColumn
xcvrXCDestTypeIdx = _XcvrXCDestTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 5),
    _XcvrXCDestTypeIdx_Type()
)
xcvrXCDestTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrXCDestTypeIdx.setStatus("current")


class _XcvrXCDestShelfIdx_Type(Integer32):
    """Custom type xcvrXCDestShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrXCDestShelfIdx_Type.__name__ = "Integer32"
_XcvrXCDestShelfIdx_Object = MibTableColumn
xcvrXCDestShelfIdx = _XcvrXCDestShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 6),
    _XcvrXCDestShelfIdx_Type()
)
xcvrXCDestShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrXCDestShelfIdx.setStatus("current")


class _XcvrXCDestSlotIdx_Type(Integer32):
    """Custom type xcvrXCDestSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrXCDestSlotIdx_Type.__name__ = "Integer32"
_XcvrXCDestSlotIdx_Object = MibTableColumn
xcvrXCDestSlotIdx = _XcvrXCDestSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 7),
    _XcvrXCDestSlotIdx_Type()
)
xcvrXCDestSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrXCDestSlotIdx.setStatus("current")


class _XcvrXCDestIdx_Type(Integer32):
    """Custom type xcvrXCDestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrXCDestIdx_Type.__name__ = "Integer32"
_XcvrXCDestIdx_Object = MibTableColumn
xcvrXCDestIdx = _XcvrXCDestIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 8),
    _XcvrXCDestIdx_Type()
)
xcvrXCDestIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrXCDestIdx.setStatus("current")
_XcvrXCType_Type = XCType
_XcvrXCType_Object = MibTableColumn
xcvrXCType = _XcvrXCType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 9),
    _XcvrXCType_Type()
)
xcvrXCType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrXCType.setStatus("current")
_XcvrXCRowStatus_Type = RowStatus
_XcvrXCRowStatus_Object = MibTableColumn
xcvrXCRowStatus = _XcvrXCRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 100),
    _XcvrXCRowStatus_Type()
)
xcvrXCRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrXCRowStatus.setStatus("current")
_VcgXCTable_Object = MibTable
vcgXCTable = _VcgXCTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2)
)
if mibBuilder.loadTexts:
    vcgXCTable.setStatus("current")
_VcgXCEntry_Object = MibTableRow
vcgXCEntry = _VcgXCEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1)
)
vcgXCEntry.setIndexNames(
    (0, "BTI-7000-MIB", "vcgXCSrcShelfIdx"),
    (0, "BTI-7000-MIB", "vcgXCSrcSlotIdx"),
    (0, "BTI-7000-MIB", "vcgXCSrcPortIdx"),
    (0, "BTI-7000-MIB", "vcgXCSrcIdx"),
    (0, "BTI-7000-MIB", "vcgXCDestShelfIdx"),
    (0, "BTI-7000-MIB", "vcgXCDestSlotIdx"),
    (0, "BTI-7000-MIB", "vcgXCDestPortIdx"),
    (0, "BTI-7000-MIB", "vcgXCDestIdx"),
)
if mibBuilder.loadTexts:
    vcgXCEntry.setStatus("current")


class _VcgXCSrcShelfIdx_Type(Integer32):
    """Custom type vcgXCSrcShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcgXCSrcShelfIdx_Type.__name__ = "Integer32"
_VcgXCSrcShelfIdx_Object = MibTableColumn
vcgXCSrcShelfIdx = _VcgXCSrcShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 1),
    _VcgXCSrcShelfIdx_Type()
)
vcgXCSrcShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgXCSrcShelfIdx.setStatus("current")


class _VcgXCSrcSlotIdx_Type(Integer32):
    """Custom type vcgXCSrcSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcgXCSrcSlotIdx_Type.__name__ = "Integer32"
_VcgXCSrcSlotIdx_Object = MibTableColumn
vcgXCSrcSlotIdx = _VcgXCSrcSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 2),
    _VcgXCSrcSlotIdx_Type()
)
vcgXCSrcSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgXCSrcSlotIdx.setStatus("current")


class _VcgXCSrcPortIdx_Type(Integer32):
    """Custom type vcgXCSrcPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcgXCSrcPortIdx_Type.__name__ = "Integer32"
_VcgXCSrcPortIdx_Object = MibTableColumn
vcgXCSrcPortIdx = _VcgXCSrcPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 3),
    _VcgXCSrcPortIdx_Type()
)
vcgXCSrcPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgXCSrcPortIdx.setStatus("current")


class _VcgXCSrcIdx_Type(Integer32):
    """Custom type vcgXCSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VcgXCSrcIdx_Type.__name__ = "Integer32"
_VcgXCSrcIdx_Object = MibTableColumn
vcgXCSrcIdx = _VcgXCSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 4),
    _VcgXCSrcIdx_Type()
)
vcgXCSrcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgXCSrcIdx.setStatus("current")


class _VcgXCDestShelfIdx_Type(Integer32):
    """Custom type vcgXCDestShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcgXCDestShelfIdx_Type.__name__ = "Integer32"
_VcgXCDestShelfIdx_Object = MibTableColumn
vcgXCDestShelfIdx = _VcgXCDestShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 5),
    _VcgXCDestShelfIdx_Type()
)
vcgXCDestShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgXCDestShelfIdx.setStatus("current")


class _VcgXCDestSlotIdx_Type(Integer32):
    """Custom type vcgXCDestSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcgXCDestSlotIdx_Type.__name__ = "Integer32"
_VcgXCDestSlotIdx_Object = MibTableColumn
vcgXCDestSlotIdx = _VcgXCDestSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 6),
    _VcgXCDestSlotIdx_Type()
)
vcgXCDestSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgXCDestSlotIdx.setStatus("current")


class _VcgXCDestPortIdx_Type(Integer32):
    """Custom type vcgXCDestPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_VcgXCDestPortIdx_Type.__name__ = "Integer32"
_VcgXCDestPortIdx_Object = MibTableColumn
vcgXCDestPortIdx = _VcgXCDestPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 7),
    _VcgXCDestPortIdx_Type()
)
vcgXCDestPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgXCDestPortIdx.setStatus("current")


class _VcgXCDestIdx_Type(Integer32):
    """Custom type vcgXCDestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VcgXCDestIdx_Type.__name__ = "Integer32"
_VcgXCDestIdx_Object = MibTableColumn
vcgXCDestIdx = _VcgXCDestIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 8),
    _VcgXCDestIdx_Type()
)
vcgXCDestIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcgXCDestIdx.setStatus("current")
_VcgXCType_Type = XCType
_VcgXCType_Object = MibTableColumn
vcgXCType = _VcgXCType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 9),
    _VcgXCType_Type()
)
vcgXCType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgXCType.setStatus("current")


class _VcgXCProtShelfNum_Type(Integer32):
    """Custom type vcgXCProtShelfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcgXCProtShelfNum_Type.__name__ = "Integer32"
_VcgXCProtShelfNum_Object = MibTableColumn
vcgXCProtShelfNum = _VcgXCProtShelfNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 10),
    _VcgXCProtShelfNum_Type()
)
vcgXCProtShelfNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgXCProtShelfNum.setStatus("current")


class _VcgXCProtSlotNum_Type(Integer32):
    """Custom type vcgXCProtSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcgXCProtSlotNum_Type.__name__ = "Integer32"
_VcgXCProtSlotNum_Object = MibTableColumn
vcgXCProtSlotNum = _VcgXCProtSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 11),
    _VcgXCProtSlotNum_Type()
)
vcgXCProtSlotNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgXCProtSlotNum.setStatus("current")


class _VcgXCProtPortNum_Type(Integer32):
    """Custom type vcgXCProtPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcgXCProtPortNum_Type.__name__ = "Integer32"
_VcgXCProtPortNum_Object = MibTableColumn
vcgXCProtPortNum = _VcgXCProtPortNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 12),
    _VcgXCProtPortNum_Type()
)
vcgXCProtPortNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgXCProtPortNum.setStatus("current")


class _VcgXCProtNum_Type(Integer32):
    """Custom type vcgXCProtNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VcgXCProtNum_Type.__name__ = "Integer32"
_VcgXCProtNum_Object = MibTableColumn
vcgXCProtNum = _VcgXCProtNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 13),
    _VcgXCProtNum_Type()
)
vcgXCProtNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgXCProtNum.setStatus("current")
_VcgXCRowStatus_Type = RowStatus
_VcgXCRowStatus_Object = MibTableColumn
vcgXCRowStatus = _VcgXCRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 100),
    _VcgXCRowStatus_Type()
)
vcgXCRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcgXCRowStatus.setStatus("current")
_StsnXCTable_Object = MibTable
stsnXCTable = _StsnXCTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3)
)
if mibBuilder.loadTexts:
    stsnXCTable.setStatus("current")
_StsnXCEntry_Object = MibTableRow
stsnXCEntry = _StsnXCEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1)
)
stsnXCEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stsnXCStsnTypeIdx"),
    (0, "BTI-7000-MIB", "stsnXCSrcShelfIdx"),
    (0, "BTI-7000-MIB", "stsnXCSrcSlotIdx"),
    (0, "BTI-7000-MIB", "stsnXCSrcPortIdx"),
    (0, "BTI-7000-MIB", "stsnXCSrcIdx"),
    (0, "BTI-7000-MIB", "stsnXCDestShelfIdx"),
    (0, "BTI-7000-MIB", "stsnXCDestSlotIdx"),
    (0, "BTI-7000-MIB", "stsnXCDestPortIdx"),
    (0, "BTI-7000-MIB", "stsnXCDestIdx"),
)
if mibBuilder.loadTexts:
    stsnXCEntry.setStatus("current")
_StsnXCStsnTypeIdx_Type = StsnType
_StsnXCStsnTypeIdx_Object = MibTableColumn
stsnXCStsnTypeIdx = _StsnXCStsnTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 1),
    _StsnXCStsnTypeIdx_Type()
)
stsnXCStsnTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCStsnTypeIdx.setStatus("current")


class _StsnXCSrcShelfIdx_Type(Integer32):
    """Custom type stsnXCSrcShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StsnXCSrcShelfIdx_Type.__name__ = "Integer32"
_StsnXCSrcShelfIdx_Object = MibTableColumn
stsnXCSrcShelfIdx = _StsnXCSrcShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 2),
    _StsnXCSrcShelfIdx_Type()
)
stsnXCSrcShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCSrcShelfIdx.setStatus("current")


class _StsnXCSrcSlotIdx_Type(Integer32):
    """Custom type stsnXCSrcSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_StsnXCSrcSlotIdx_Type.__name__ = "Integer32"
_StsnXCSrcSlotIdx_Object = MibTableColumn
stsnXCSrcSlotIdx = _StsnXCSrcSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 3),
    _StsnXCSrcSlotIdx_Type()
)
stsnXCSrcSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCSrcSlotIdx.setStatus("current")


class _StsnXCSrcPortIdx_Type(Integer32):
    """Custom type stsnXCSrcPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StsnXCSrcPortIdx_Type.__name__ = "Integer32"
_StsnXCSrcPortIdx_Object = MibTableColumn
stsnXCSrcPortIdx = _StsnXCSrcPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 4),
    _StsnXCSrcPortIdx_Type()
)
stsnXCSrcPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCSrcPortIdx.setStatus("current")


class _StsnXCSrcIdx_Type(Integer32):
    """Custom type stsnXCSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 192),
    )


_StsnXCSrcIdx_Type.__name__ = "Integer32"
_StsnXCSrcIdx_Object = MibTableColumn
stsnXCSrcIdx = _StsnXCSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 5),
    _StsnXCSrcIdx_Type()
)
stsnXCSrcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCSrcIdx.setStatus("current")


class _StsnXCDestShelfIdx_Type(Integer32):
    """Custom type stsnXCDestShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StsnXCDestShelfIdx_Type.__name__ = "Integer32"
_StsnXCDestShelfIdx_Object = MibTableColumn
stsnXCDestShelfIdx = _StsnXCDestShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 6),
    _StsnXCDestShelfIdx_Type()
)
stsnXCDestShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCDestShelfIdx.setStatus("current")


class _StsnXCDestSlotIdx_Type(Integer32):
    """Custom type stsnXCDestSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_StsnXCDestSlotIdx_Type.__name__ = "Integer32"
_StsnXCDestSlotIdx_Object = MibTableColumn
stsnXCDestSlotIdx = _StsnXCDestSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 7),
    _StsnXCDestSlotIdx_Type()
)
stsnXCDestSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCDestSlotIdx.setStatus("current")


class _StsnXCDestPortIdx_Type(Integer32):
    """Custom type stsnXCDestPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_StsnXCDestPortIdx_Type.__name__ = "Integer32"
_StsnXCDestPortIdx_Object = MibTableColumn
stsnXCDestPortIdx = _StsnXCDestPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 8),
    _StsnXCDestPortIdx_Type()
)
stsnXCDestPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCDestPortIdx.setStatus("current")


class _StsnXCDestIdx_Type(Integer32):
    """Custom type stsnXCDestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 192),
    )


_StsnXCDestIdx_Type.__name__ = "Integer32"
_StsnXCDestIdx_Object = MibTableColumn
stsnXCDestIdx = _StsnXCDestIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 9),
    _StsnXCDestIdx_Type()
)
stsnXCDestIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnXCDestIdx.setStatus("current")
_StsnXCType_Type = XCType
_StsnXCType_Object = MibTableColumn
stsnXCType = _StsnXCType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 10),
    _StsnXCType_Type()
)
stsnXCType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stsnXCType.setStatus("current")
_StsnXCProtTypeNum_Type = StsnType
_StsnXCProtTypeNum_Object = MibTableColumn
stsnXCProtTypeNum = _StsnXCProtTypeNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 11),
    _StsnXCProtTypeNum_Type()
)
stsnXCProtTypeNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stsnXCProtTypeNum.setStatus("current")


class _StsnXCProtShelfNum_Type(Integer32):
    """Custom type stsnXCProtShelfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StsnXCProtShelfNum_Type.__name__ = "Integer32"
_StsnXCProtShelfNum_Object = MibTableColumn
stsnXCProtShelfNum = _StsnXCProtShelfNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 12),
    _StsnXCProtShelfNum_Type()
)
stsnXCProtShelfNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stsnXCProtShelfNum.setStatus("current")


class _StsnXCProtSlotNum_Type(Integer32):
    """Custom type stsnXCProtSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_StsnXCProtSlotNum_Type.__name__ = "Integer32"
_StsnXCProtSlotNum_Object = MibTableColumn
stsnXCProtSlotNum = _StsnXCProtSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 13),
    _StsnXCProtSlotNum_Type()
)
stsnXCProtSlotNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stsnXCProtSlotNum.setStatus("current")


class _StsnXCProtPortNum_Type(Integer32):
    """Custom type stsnXCProtPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StsnXCProtPortNum_Type.__name__ = "Integer32"
_StsnXCProtPortNum_Object = MibTableColumn
stsnXCProtPortNum = _StsnXCProtPortNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 14),
    _StsnXCProtPortNum_Type()
)
stsnXCProtPortNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stsnXCProtPortNum.setStatus("current")


class _StsnXCProtNum_Type(Integer32):
    """Custom type stsnXCProtNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 192),
    )


_StsnXCProtNum_Type.__name__ = "Integer32"
_StsnXCProtNum_Object = MibTableColumn
stsnXCProtNum = _StsnXCProtNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 15),
    _StsnXCProtNum_Type()
)
stsnXCProtNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stsnXCProtNum.setStatus("current")
_StsnXCRowStatus_Type = RowStatus
_StsnXCRowStatus_Object = MibTableColumn
stsnXCRowStatus = _StsnXCRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 100),
    _StsnXCRowStatus_Type()
)
stsnXCRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stsnXCRowStatus.setStatus("current")
_VcnXCTable_Object = MibTable
vcnXCTable = _VcnXCTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4)
)
if mibBuilder.loadTexts:
    vcnXCTable.setStatus("current")
_VcnXCEntry_Object = MibTableRow
vcnXCEntry = _VcnXCEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1)
)
vcnXCEntry.setIndexNames(
    (0, "BTI-7000-MIB", "vcnXCVcnTypeIdx"),
    (0, "BTI-7000-MIB", "vcnXCSrcShelfIdx"),
    (0, "BTI-7000-MIB", "vcnXCSrcSlotIdx"),
    (0, "BTI-7000-MIB", "vcnXCSrcPortIdx"),
    (0, "BTI-7000-MIB", "vcnXCSrcIdx"),
    (0, "BTI-7000-MIB", "vcnXCDestShelfIdx"),
    (0, "BTI-7000-MIB", "vcnXCDestSlotIdx"),
    (0, "BTI-7000-MIB", "vcnXCDestPortIdx"),
    (0, "BTI-7000-MIB", "vcnXCDestIdx"),
)
if mibBuilder.loadTexts:
    vcnXCEntry.setStatus("current")
_VcnXCVcnTypeIdx_Type = VcnType
_VcnXCVcnTypeIdx_Object = MibTableColumn
vcnXCVcnTypeIdx = _VcnXCVcnTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 1),
    _VcnXCVcnTypeIdx_Type()
)
vcnXCVcnTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCVcnTypeIdx.setStatus("current")


class _VcnXCSrcShelfIdx_Type(Integer32):
    """Custom type vcnXCSrcShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcnXCSrcShelfIdx_Type.__name__ = "Integer32"
_VcnXCSrcShelfIdx_Object = MibTableColumn
vcnXCSrcShelfIdx = _VcnXCSrcShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 2),
    _VcnXCSrcShelfIdx_Type()
)
vcnXCSrcShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCSrcShelfIdx.setStatus("current")


class _VcnXCSrcSlotIdx_Type(Integer32):
    """Custom type vcnXCSrcSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_VcnXCSrcSlotIdx_Type.__name__ = "Integer32"
_VcnXCSrcSlotIdx_Object = MibTableColumn
vcnXCSrcSlotIdx = _VcnXCSrcSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 3),
    _VcnXCSrcSlotIdx_Type()
)
vcnXCSrcSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCSrcSlotIdx.setStatus("current")


class _VcnXCSrcPortIdx_Type(Integer32):
    """Custom type vcnXCSrcPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcnXCSrcPortIdx_Type.__name__ = "Integer32"
_VcnXCSrcPortIdx_Object = MibTableColumn
vcnXCSrcPortIdx = _VcnXCSrcPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 4),
    _VcnXCSrcPortIdx_Type()
)
vcnXCSrcPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCSrcPortIdx.setStatus("current")


class _VcnXCSrcIdx_Type(Integer32):
    """Custom type vcnXCSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_VcnXCSrcIdx_Type.__name__ = "Integer32"
_VcnXCSrcIdx_Object = MibTableColumn
vcnXCSrcIdx = _VcnXCSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 5),
    _VcnXCSrcIdx_Type()
)
vcnXCSrcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCSrcIdx.setStatus("current")


class _VcnXCDestShelfIdx_Type(Integer32):
    """Custom type vcnXCDestShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcnXCDestShelfIdx_Type.__name__ = "Integer32"
_VcnXCDestShelfIdx_Object = MibTableColumn
vcnXCDestShelfIdx = _VcnXCDestShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 6),
    _VcnXCDestShelfIdx_Type()
)
vcnXCDestShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCDestShelfIdx.setStatus("current")


class _VcnXCDestSlotIdx_Type(Integer32):
    """Custom type vcnXCDestSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_VcnXCDestSlotIdx_Type.__name__ = "Integer32"
_VcnXCDestSlotIdx_Object = MibTableColumn
vcnXCDestSlotIdx = _VcnXCDestSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 7),
    _VcnXCDestSlotIdx_Type()
)
vcnXCDestSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCDestSlotIdx.setStatus("current")


class _VcnXCDestPortIdx_Type(Integer32):
    """Custom type vcnXCDestPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_VcnXCDestPortIdx_Type.__name__ = "Integer32"
_VcnXCDestPortIdx_Object = MibTableColumn
vcnXCDestPortIdx = _VcnXCDestPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 8),
    _VcnXCDestPortIdx_Type()
)
vcnXCDestPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCDestPortIdx.setStatus("current")


class _VcnXCDestIdx_Type(Integer32):
    """Custom type vcnXCDestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_VcnXCDestIdx_Type.__name__ = "Integer32"
_VcnXCDestIdx_Object = MibTableColumn
vcnXCDestIdx = _VcnXCDestIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 9),
    _VcnXCDestIdx_Type()
)
vcnXCDestIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnXCDestIdx.setStatus("current")
_VcnXCType_Type = XCType
_VcnXCType_Object = MibTableColumn
vcnXCType = _VcnXCType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 10),
    _VcnXCType_Type()
)
vcnXCType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcnXCType.setStatus("current")
_VcnXCProtTypeNum_Type = VcnType
_VcnXCProtTypeNum_Object = MibTableColumn
vcnXCProtTypeNum = _VcnXCProtTypeNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 11),
    _VcnXCProtTypeNum_Type()
)
vcnXCProtTypeNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcnXCProtTypeNum.setStatus("current")


class _VcnXCProtShelfNum_Type(Integer32):
    """Custom type vcnXCProtShelfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcnXCProtShelfNum_Type.__name__ = "Integer32"
_VcnXCProtShelfNum_Object = MibTableColumn
vcnXCProtShelfNum = _VcnXCProtShelfNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 12),
    _VcnXCProtShelfNum_Type()
)
vcnXCProtShelfNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcnXCProtShelfNum.setStatus("current")


class _VcnXCProtSlotNum_Type(Integer32):
    """Custom type vcnXCProtSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_VcnXCProtSlotNum_Type.__name__ = "Integer32"
_VcnXCProtSlotNum_Object = MibTableColumn
vcnXCProtSlotNum = _VcnXCProtSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 13),
    _VcnXCProtSlotNum_Type()
)
vcnXCProtSlotNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcnXCProtSlotNum.setStatus("current")


class _VcnXCProtPortNum_Type(Integer32):
    """Custom type vcnXCProtPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcnXCProtPortNum_Type.__name__ = "Integer32"
_VcnXCProtPortNum_Object = MibTableColumn
vcnXCProtPortNum = _VcnXCProtPortNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 14),
    _VcnXCProtPortNum_Type()
)
vcnXCProtPortNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcnXCProtPortNum.setStatus("current")


class _VcnXCProtNum_Type(Integer32):
    """Custom type vcnXCProtNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_VcnXCProtNum_Type.__name__ = "Integer32"
_VcnXCProtNum_Object = MibTableColumn
vcnXCProtNum = _VcnXCProtNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 15),
    _VcnXCProtNum_Type()
)
vcnXCProtNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcnXCProtNum.setStatus("current")
_VcnXCRowStatus_Type = RowStatus
_VcnXCRowStatus_Object = MibTableColumn
vcnXCRowStatus = _VcnXCRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 100),
    _VcnXCRowStatus_Type()
)
vcnXCRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vcnXCRowStatus.setStatus("current")
_OdunXCTable_Object = MibTable
odunXCTable = _OdunXCTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5)
)
if mibBuilder.loadTexts:
    odunXCTable.setStatus("current")
_OdunXCEntry_Object = MibTableRow
odunXCEntry = _OdunXCEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1)
)
odunXCEntry.setIndexNames(
    (0, "BTI-7000-MIB", "odunXCOdunTypeIdx"),
    (0, "BTI-7000-MIB", "odunXCSrcShelfIdx"),
    (0, "BTI-7000-MIB", "odunXCSrcSlotIdx"),
    (0, "BTI-7000-MIB", "odunXCSrcPortIdx"),
    (0, "BTI-7000-MIB", "odunXCSrcIdx"),
    (0, "BTI-7000-MIB", "odunXCDestShelfIdx"),
    (0, "BTI-7000-MIB", "odunXCDestSlotIdx"),
    (0, "BTI-7000-MIB", "odunXCDestPortIdx"),
    (0, "BTI-7000-MIB", "odunXCDestIdx"),
)
if mibBuilder.loadTexts:
    odunXCEntry.setStatus("current")
_OdunXCOdunTypeIdx_Type = OdunType
_OdunXCOdunTypeIdx_Object = MibTableColumn
odunXCOdunTypeIdx = _OdunXCOdunTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 1),
    _OdunXCOdunTypeIdx_Type()
)
odunXCOdunTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCOdunTypeIdx.setStatus("current")


class _OdunXCSrcShelfIdx_Type(Integer32):
    """Custom type odunXCSrcShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OdunXCSrcShelfIdx_Type.__name__ = "Integer32"
_OdunXCSrcShelfIdx_Object = MibTableColumn
odunXCSrcShelfIdx = _OdunXCSrcShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 2),
    _OdunXCSrcShelfIdx_Type()
)
odunXCSrcShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCSrcShelfIdx.setStatus("current")


class _OdunXCSrcSlotIdx_Type(Integer32):
    """Custom type odunXCSrcSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_OdunXCSrcSlotIdx_Type.__name__ = "Integer32"
_OdunXCSrcSlotIdx_Object = MibTableColumn
odunXCSrcSlotIdx = _OdunXCSrcSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 3),
    _OdunXCSrcSlotIdx_Type()
)
odunXCSrcSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCSrcSlotIdx.setStatus("current")


class _OdunXCSrcPortIdx_Type(Integer32):
    """Custom type odunXCSrcPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_OdunXCSrcPortIdx_Type.__name__ = "Integer32"
_OdunXCSrcPortIdx_Object = MibTableColumn
odunXCSrcPortIdx = _OdunXCSrcPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 4),
    _OdunXCSrcPortIdx_Type()
)
odunXCSrcPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCSrcPortIdx.setStatus("current")


class _OdunXCSrcIdx_Type(Integer32):
    """Custom type odunXCSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_OdunXCSrcIdx_Type.__name__ = "Integer32"
_OdunXCSrcIdx_Object = MibTableColumn
odunXCSrcIdx = _OdunXCSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 5),
    _OdunXCSrcIdx_Type()
)
odunXCSrcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCSrcIdx.setStatus("current")


class _OdunXCDestShelfIdx_Type(Integer32):
    """Custom type odunXCDestShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OdunXCDestShelfIdx_Type.__name__ = "Integer32"
_OdunXCDestShelfIdx_Object = MibTableColumn
odunXCDestShelfIdx = _OdunXCDestShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 6),
    _OdunXCDestShelfIdx_Type()
)
odunXCDestShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCDestShelfIdx.setStatus("current")


class _OdunXCDestSlotIdx_Type(Integer32):
    """Custom type odunXCDestSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_OdunXCDestSlotIdx_Type.__name__ = "Integer32"
_OdunXCDestSlotIdx_Object = MibTableColumn
odunXCDestSlotIdx = _OdunXCDestSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 7),
    _OdunXCDestSlotIdx_Type()
)
odunXCDestSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCDestSlotIdx.setStatus("current")


class _OdunXCDestPortIdx_Type(Integer32):
    """Custom type odunXCDestPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_OdunXCDestPortIdx_Type.__name__ = "Integer32"
_OdunXCDestPortIdx_Object = MibTableColumn
odunXCDestPortIdx = _OdunXCDestPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 8),
    _OdunXCDestPortIdx_Type()
)
odunXCDestPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCDestPortIdx.setStatus("current")


class _OdunXCDestIdx_Type(Integer32):
    """Custom type odunXCDestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_OdunXCDestIdx_Type.__name__ = "Integer32"
_OdunXCDestIdx_Object = MibTableColumn
odunXCDestIdx = _OdunXCDestIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 9),
    _OdunXCDestIdx_Type()
)
odunXCDestIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    odunXCDestIdx.setStatus("current")
_OdunXCType_Type = XCType
_OdunXCType_Object = MibTableColumn
odunXCType = _OdunXCType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 10),
    _OdunXCType_Type()
)
odunXCType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    odunXCType.setStatus("current")
_OdunXCProtTypeNum_Type = OdunType
_OdunXCProtTypeNum_Object = MibTableColumn
odunXCProtTypeNum = _OdunXCProtTypeNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 11),
    _OdunXCProtTypeNum_Type()
)
odunXCProtTypeNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    odunXCProtTypeNum.setStatus("current")


class _OdunXCProtShelfNum_Type(Integer32):
    """Custom type odunXCProtShelfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OdunXCProtShelfNum_Type.__name__ = "Integer32"
_OdunXCProtShelfNum_Object = MibTableColumn
odunXCProtShelfNum = _OdunXCProtShelfNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 12),
    _OdunXCProtShelfNum_Type()
)
odunXCProtShelfNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    odunXCProtShelfNum.setStatus("current")


class _OdunXCProtSlotNum_Type(Integer32):
    """Custom type odunXCProtSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_OdunXCProtSlotNum_Type.__name__ = "Integer32"
_OdunXCProtSlotNum_Object = MibTableColumn
odunXCProtSlotNum = _OdunXCProtSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 13),
    _OdunXCProtSlotNum_Type()
)
odunXCProtSlotNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    odunXCProtSlotNum.setStatus("current")


class _OdunXCProtPortNum_Type(Integer32):
    """Custom type odunXCProtPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_OdunXCProtPortNum_Type.__name__ = "Integer32"
_OdunXCProtPortNum_Object = MibTableColumn
odunXCProtPortNum = _OdunXCProtPortNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 14),
    _OdunXCProtPortNum_Type()
)
odunXCProtPortNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    odunXCProtPortNum.setStatus("current")


class _OdunXCProtNum_Type(Integer32):
    """Custom type odunXCProtNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_OdunXCProtNum_Type.__name__ = "Integer32"
_OdunXCProtNum_Object = MibTableColumn
odunXCProtNum = _OdunXCProtNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 15),
    _OdunXCProtNum_Type()
)
odunXCProtNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    odunXCProtNum.setStatus("current")
_OdunXCRowStatus_Type = RowStatus
_OdunXCRowStatus_Object = MibTableColumn
odunXCRowStatus = _OdunXCRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 100),
    _OdunXCRowStatus_Type()
)
odunXCRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    odunXCRowStatus.setStatus("current")
_Protection_ObjectIdentity = ObjectIdentity
protection = _Protection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10)
)
_XcvrProtGrpTable_Object = MibTable
xcvrProtGrpTable = _XcvrProtGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1)
)
if mibBuilder.loadTexts:
    xcvrProtGrpTable.setStatus("current")
_XcvrProtGrpEntry_Object = MibTableRow
xcvrProtGrpEntry = _XcvrProtGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1)
)
xcvrProtGrpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "xcvrProtGrpWorkTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrProtGrpWorkShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrProtGrpWorkSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrProtGrpWorkIdx"),
    (0, "BTI-7000-MIB", "xcvrProtGrpProtTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrProtGrpProtShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrProtGrpProtSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrProtGrpProtIdx"),
)
if mibBuilder.loadTexts:
    xcvrProtGrpEntry.setStatus("current")
_XcvrProtGrpWorkTypeIdx_Type = XcvrType
_XcvrProtGrpWorkTypeIdx_Object = MibTableColumn
xcvrProtGrpWorkTypeIdx = _XcvrProtGrpWorkTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 1),
    _XcvrProtGrpWorkTypeIdx_Type()
)
xcvrProtGrpWorkTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtGrpWorkTypeIdx.setStatus("current")


class _XcvrProtGrpWorkShelfIdx_Type(Integer32):
    """Custom type xcvrProtGrpWorkShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrProtGrpWorkShelfIdx_Type.__name__ = "Integer32"
_XcvrProtGrpWorkShelfIdx_Object = MibTableColumn
xcvrProtGrpWorkShelfIdx = _XcvrProtGrpWorkShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 2),
    _XcvrProtGrpWorkShelfIdx_Type()
)
xcvrProtGrpWorkShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtGrpWorkShelfIdx.setStatus("current")


class _XcvrProtGrpWorkSlotIdx_Type(Integer32):
    """Custom type xcvrProtGrpWorkSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrProtGrpWorkSlotIdx_Type.__name__ = "Integer32"
_XcvrProtGrpWorkSlotIdx_Object = MibTableColumn
xcvrProtGrpWorkSlotIdx = _XcvrProtGrpWorkSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 3),
    _XcvrProtGrpWorkSlotIdx_Type()
)
xcvrProtGrpWorkSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtGrpWorkSlotIdx.setStatus("current")


class _XcvrProtGrpWorkIdx_Type(Integer32):
    """Custom type xcvrProtGrpWorkIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrProtGrpWorkIdx_Type.__name__ = "Integer32"
_XcvrProtGrpWorkIdx_Object = MibTableColumn
xcvrProtGrpWorkIdx = _XcvrProtGrpWorkIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 4),
    _XcvrProtGrpWorkIdx_Type()
)
xcvrProtGrpWorkIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtGrpWorkIdx.setStatus("current")
_XcvrProtGrpProtTypeIdx_Type = XcvrType
_XcvrProtGrpProtTypeIdx_Object = MibTableColumn
xcvrProtGrpProtTypeIdx = _XcvrProtGrpProtTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 5),
    _XcvrProtGrpProtTypeIdx_Type()
)
xcvrProtGrpProtTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtGrpProtTypeIdx.setStatus("current")


class _XcvrProtGrpProtShelfIdx_Type(Integer32):
    """Custom type xcvrProtGrpProtShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrProtGrpProtShelfIdx_Type.__name__ = "Integer32"
_XcvrProtGrpProtShelfIdx_Object = MibTableColumn
xcvrProtGrpProtShelfIdx = _XcvrProtGrpProtShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 6),
    _XcvrProtGrpProtShelfIdx_Type()
)
xcvrProtGrpProtShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtGrpProtShelfIdx.setStatus("current")


class _XcvrProtGrpProtSlotIdx_Type(Integer32):
    """Custom type xcvrProtGrpProtSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrProtGrpProtSlotIdx_Type.__name__ = "Integer32"
_XcvrProtGrpProtSlotIdx_Object = MibTableColumn
xcvrProtGrpProtSlotIdx = _XcvrProtGrpProtSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 7),
    _XcvrProtGrpProtSlotIdx_Type()
)
xcvrProtGrpProtSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtGrpProtSlotIdx.setStatus("current")


class _XcvrProtGrpProtIdx_Type(Integer32):
    """Custom type xcvrProtGrpProtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrProtGrpProtIdx_Type.__name__ = "Integer32"
_XcvrProtGrpProtIdx_Object = MibTableColumn
xcvrProtGrpProtIdx = _XcvrProtGrpProtIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 8),
    _XcvrProtGrpProtIdx_Type()
)
xcvrProtGrpProtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtGrpProtIdx.setStatus("current")


class _XcvrProtGrpId_Type(DisplayString):
    """Custom type xcvrProtGrpId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_XcvrProtGrpId_Type.__name__ = "DisplayString"
_XcvrProtGrpId_Object = MibTableColumn
xcvrProtGrpId = _XcvrProtGrpId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 9),
    _XcvrProtGrpId_Type()
)
xcvrProtGrpId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrProtGrpId.setStatus("current")
_XcvrProtGrpRowStatus_Type = RowStatus
_XcvrProtGrpRowStatus_Object = MibTableColumn
xcvrProtGrpRowStatus = _XcvrProtGrpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 100),
    _XcvrProtGrpRowStatus_Type()
)
xcvrProtGrpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcvrProtGrpRowStatus.setStatus("current")
_OcnProtGrpTable_Object = MibTable
ocnProtGrpTable = _OcnProtGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2)
)
if mibBuilder.loadTexts:
    ocnProtGrpTable.setStatus("current")
_OcnProtGrpEntry_Object = MibTableRow
ocnProtGrpEntry = _OcnProtGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1)
)
ocnProtGrpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ocnProtGrpWorkTypeIdx"),
    (0, "BTI-7000-MIB", "ocnProtGrpWorkShelfIdx"),
    (0, "BTI-7000-MIB", "ocnProtGrpWorkSlotIdx"),
    (0, "BTI-7000-MIB", "ocnProtGrpWorkPortIdx"),
    (0, "BTI-7000-MIB", "ocnProtGrpProtTypeIdx"),
    (0, "BTI-7000-MIB", "ocnProtGrpProtShelfIdx"),
    (0, "BTI-7000-MIB", "ocnProtGrpProtSlotIdx"),
    (0, "BTI-7000-MIB", "ocnProtGrpProtPortIdx"),
)
if mibBuilder.loadTexts:
    ocnProtGrpEntry.setStatus("current")
_OcnProtGrpWorkTypeIdx_Type = OcnType
_OcnProtGrpWorkTypeIdx_Object = MibTableColumn
ocnProtGrpWorkTypeIdx = _OcnProtGrpWorkTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 1),
    _OcnProtGrpWorkTypeIdx_Type()
)
ocnProtGrpWorkTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtGrpWorkTypeIdx.setStatus("current")


class _OcnProtGrpWorkShelfIdx_Type(Integer32):
    """Custom type ocnProtGrpWorkShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OcnProtGrpWorkShelfIdx_Type.__name__ = "Integer32"
_OcnProtGrpWorkShelfIdx_Object = MibTableColumn
ocnProtGrpWorkShelfIdx = _OcnProtGrpWorkShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 2),
    _OcnProtGrpWorkShelfIdx_Type()
)
ocnProtGrpWorkShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtGrpWorkShelfIdx.setStatus("current")


class _OcnProtGrpWorkSlotIdx_Type(Integer32):
    """Custom type ocnProtGrpWorkSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_OcnProtGrpWorkSlotIdx_Type.__name__ = "Integer32"
_OcnProtGrpWorkSlotIdx_Object = MibTableColumn
ocnProtGrpWorkSlotIdx = _OcnProtGrpWorkSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 3),
    _OcnProtGrpWorkSlotIdx_Type()
)
ocnProtGrpWorkSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtGrpWorkSlotIdx.setStatus("current")


class _OcnProtGrpWorkPortIdx_Type(Integer32):
    """Custom type ocnProtGrpWorkPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_OcnProtGrpWorkPortIdx_Type.__name__ = "Integer32"
_OcnProtGrpWorkPortIdx_Object = MibTableColumn
ocnProtGrpWorkPortIdx = _OcnProtGrpWorkPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 4),
    _OcnProtGrpWorkPortIdx_Type()
)
ocnProtGrpWorkPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtGrpWorkPortIdx.setStatus("current")
_OcnProtGrpProtTypeIdx_Type = OcnType
_OcnProtGrpProtTypeIdx_Object = MibTableColumn
ocnProtGrpProtTypeIdx = _OcnProtGrpProtTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 5),
    _OcnProtGrpProtTypeIdx_Type()
)
ocnProtGrpProtTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtGrpProtTypeIdx.setStatus("current")


class _OcnProtGrpProtShelfIdx_Type(Integer32):
    """Custom type ocnProtGrpProtShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OcnProtGrpProtShelfIdx_Type.__name__ = "Integer32"
_OcnProtGrpProtShelfIdx_Object = MibTableColumn
ocnProtGrpProtShelfIdx = _OcnProtGrpProtShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 6),
    _OcnProtGrpProtShelfIdx_Type()
)
ocnProtGrpProtShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtGrpProtShelfIdx.setStatus("current")


class _OcnProtGrpProtSlotIdx_Type(Integer32):
    """Custom type ocnProtGrpProtSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_OcnProtGrpProtSlotIdx_Type.__name__ = "Integer32"
_OcnProtGrpProtSlotIdx_Object = MibTableColumn
ocnProtGrpProtSlotIdx = _OcnProtGrpProtSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 7),
    _OcnProtGrpProtSlotIdx_Type()
)
ocnProtGrpProtSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtGrpProtSlotIdx.setStatus("current")


class _OcnProtGrpProtPortIdx_Type(Integer32):
    """Custom type ocnProtGrpProtPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_OcnProtGrpProtPortIdx_Type.__name__ = "Integer32"
_OcnProtGrpProtPortIdx_Object = MibTableColumn
ocnProtGrpProtPortIdx = _OcnProtGrpProtPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 8),
    _OcnProtGrpProtPortIdx_Type()
)
ocnProtGrpProtPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtGrpProtPortIdx.setStatus("current")


class _OcnProtGrpId_Type(DisplayString):
    """Custom type ocnProtGrpId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_OcnProtGrpId_Type.__name__ = "DisplayString"
_OcnProtGrpId_Object = MibTableColumn
ocnProtGrpId = _OcnProtGrpId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 9),
    _OcnProtGrpId_Type()
)
ocnProtGrpId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnProtGrpId.setStatus("current")
_OcnProtGrpRowStatus_Type = RowStatus
_OcnProtGrpRowStatus_Object = MibTableColumn
ocnProtGrpRowStatus = _OcnProtGrpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 100),
    _OcnProtGrpRowStatus_Type()
)
ocnProtGrpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ocnProtGrpRowStatus.setStatus("current")
_StmnProtGrpTable_Object = MibTable
stmnProtGrpTable = _StmnProtGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3)
)
if mibBuilder.loadTexts:
    stmnProtGrpTable.setStatus("current")
_StmnProtGrpEntry_Object = MibTableRow
stmnProtGrpEntry = _StmnProtGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1)
)
stmnProtGrpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stmnProtGrpWorkTypeIdx"),
    (0, "BTI-7000-MIB", "stmnProtGrpWorkShelfIdx"),
    (0, "BTI-7000-MIB", "stmnProtGrpWorkSlotIdx"),
    (0, "BTI-7000-MIB", "stmnProtGrpWorkPortIdx"),
    (0, "BTI-7000-MIB", "stmnProtGrpProtTypeIdx"),
    (0, "BTI-7000-MIB", "stmnProtGrpProtShelfIdx"),
    (0, "BTI-7000-MIB", "stmnProtGrpProtSlotIdx"),
    (0, "BTI-7000-MIB", "stmnProtGrpProtPortIdx"),
)
if mibBuilder.loadTexts:
    stmnProtGrpEntry.setStatus("current")
_StmnProtGrpWorkTypeIdx_Type = StmnType
_StmnProtGrpWorkTypeIdx_Object = MibTableColumn
stmnProtGrpWorkTypeIdx = _StmnProtGrpWorkTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 1),
    _StmnProtGrpWorkTypeIdx_Type()
)
stmnProtGrpWorkTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtGrpWorkTypeIdx.setStatus("current")


class _StmnProtGrpWorkShelfIdx_Type(Integer32):
    """Custom type stmnProtGrpWorkShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StmnProtGrpWorkShelfIdx_Type.__name__ = "Integer32"
_StmnProtGrpWorkShelfIdx_Object = MibTableColumn
stmnProtGrpWorkShelfIdx = _StmnProtGrpWorkShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 2),
    _StmnProtGrpWorkShelfIdx_Type()
)
stmnProtGrpWorkShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtGrpWorkShelfIdx.setStatus("current")


class _StmnProtGrpWorkSlotIdx_Type(Integer32):
    """Custom type stmnProtGrpWorkSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_StmnProtGrpWorkSlotIdx_Type.__name__ = "Integer32"
_StmnProtGrpWorkSlotIdx_Object = MibTableColumn
stmnProtGrpWorkSlotIdx = _StmnProtGrpWorkSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 3),
    _StmnProtGrpWorkSlotIdx_Type()
)
stmnProtGrpWorkSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtGrpWorkSlotIdx.setStatus("current")


class _StmnProtGrpWorkPortIdx_Type(Integer32):
    """Custom type stmnProtGrpWorkPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StmnProtGrpWorkPortIdx_Type.__name__ = "Integer32"
_StmnProtGrpWorkPortIdx_Object = MibTableColumn
stmnProtGrpWorkPortIdx = _StmnProtGrpWorkPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 4),
    _StmnProtGrpWorkPortIdx_Type()
)
stmnProtGrpWorkPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtGrpWorkPortIdx.setStatus("current")
_StmnProtGrpProtTypeIdx_Type = StmnType
_StmnProtGrpProtTypeIdx_Object = MibTableColumn
stmnProtGrpProtTypeIdx = _StmnProtGrpProtTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 5),
    _StmnProtGrpProtTypeIdx_Type()
)
stmnProtGrpProtTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtGrpProtTypeIdx.setStatus("current")


class _StmnProtGrpProtShelfIdx_Type(Integer32):
    """Custom type stmnProtGrpProtShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StmnProtGrpProtShelfIdx_Type.__name__ = "Integer32"
_StmnProtGrpProtShelfIdx_Object = MibTableColumn
stmnProtGrpProtShelfIdx = _StmnProtGrpProtShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 6),
    _StmnProtGrpProtShelfIdx_Type()
)
stmnProtGrpProtShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtGrpProtShelfIdx.setStatus("current")


class _StmnProtGrpProtSlotIdx_Type(Integer32):
    """Custom type stmnProtGrpProtSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_StmnProtGrpProtSlotIdx_Type.__name__ = "Integer32"
_StmnProtGrpProtSlotIdx_Object = MibTableColumn
stmnProtGrpProtSlotIdx = _StmnProtGrpProtSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 7),
    _StmnProtGrpProtSlotIdx_Type()
)
stmnProtGrpProtSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtGrpProtSlotIdx.setStatus("current")


class _StmnProtGrpProtPortIdx_Type(Integer32):
    """Custom type stmnProtGrpProtPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StmnProtGrpProtPortIdx_Type.__name__ = "Integer32"
_StmnProtGrpProtPortIdx_Object = MibTableColumn
stmnProtGrpProtPortIdx = _StmnProtGrpProtPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 8),
    _StmnProtGrpProtPortIdx_Type()
)
stmnProtGrpProtPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtGrpProtPortIdx.setStatus("current")


class _StmnProtGrpId_Type(DisplayString):
    """Custom type stmnProtGrpId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_StmnProtGrpId_Type.__name__ = "DisplayString"
_StmnProtGrpId_Object = MibTableColumn
stmnProtGrpId = _StmnProtGrpId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 9),
    _StmnProtGrpId_Type()
)
stmnProtGrpId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnProtGrpId.setStatus("current")
_StmnProtGrpRowStatus_Type = RowStatus
_StmnProtGrpRowStatus_Object = MibTableColumn
stmnProtGrpRowStatus = _StmnProtGrpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 100),
    _StmnProtGrpRowStatus_Type()
)
stmnProtGrpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stmnProtGrpRowStatus.setStatus("current")
_Operations_ObjectIdentity = ObjectIdentity
operations = _Operations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11)
)
_NeOperations_ObjectIdentity = ObjectIdentity
neOperations = _NeOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1)
)
_DbBackupAndRestore_ObjectIdentity = ObjectIdentity
dbBackupAndRestore = _DbBackupAndRestore_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1)
)
_DbBackupAndRestoreCmd_Type = DbBackupAndRestoreCmd
_DbBackupAndRestoreCmd_Object = MibScalar
dbBackupAndRestoreCmd = _DbBackupAndRestoreCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 1),
    _DbBackupAndRestoreCmd_Type()
)
dbBackupAndRestoreCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestoreCmd.setStatus("current")
_DbBackupAndRestoreType_Type = DbBackupAndRestoreType
_DbBackupAndRestoreType_Object = MibScalar
dbBackupAndRestoreType = _DbBackupAndRestoreType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 2),
    _DbBackupAndRestoreType_Type()
)
dbBackupAndRestoreType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestoreType.setStatus("current")
_DbBackupAndRestoreAddress_Type = IpAddress
_DbBackupAndRestoreAddress_Object = MibScalar
dbBackupAndRestoreAddress = _DbBackupAndRestoreAddress_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 3),
    _DbBackupAndRestoreAddress_Type()
)
dbBackupAndRestoreAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestoreAddress.setStatus("current")


class _DbBackupAndRestorePath_Type(DisplayString):
    """Custom type dbBackupAndRestorePath based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DbBackupAndRestorePath_Type.__name__ = "DisplayString"
_DbBackupAndRestorePath_Object = MibScalar
dbBackupAndRestorePath = _DbBackupAndRestorePath_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 4),
    _DbBackupAndRestorePath_Type()
)
dbBackupAndRestorePath.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestorePath.setStatus("current")


class _DbBackupAndRestoreFtpUser_Type(DisplayString):
    """Custom type dbBackupAndRestoreFtpUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DbBackupAndRestoreFtpUser_Type.__name__ = "DisplayString"
_DbBackupAndRestoreFtpUser_Object = MibScalar
dbBackupAndRestoreFtpUser = _DbBackupAndRestoreFtpUser_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 5),
    _DbBackupAndRestoreFtpUser_Type()
)
dbBackupAndRestoreFtpUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestoreFtpUser.setStatus("current")


class _DbBackupAndRestoreFtpPswd_Type(DisplayString):
    """Custom type dbBackupAndRestoreFtpPswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DbBackupAndRestoreFtpPswd_Type.__name__ = "DisplayString"
_DbBackupAndRestoreFtpPswd_Object = MibScalar
dbBackupAndRestoreFtpPswd = _DbBackupAndRestoreFtpPswd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 6),
    _DbBackupAndRestoreFtpPswd_Type()
)
dbBackupAndRestoreFtpPswd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestoreFtpPswd.setStatus("current")


class _DbBackupAndRestoreCheckAlm_Type(Integer32):
    """Custom type dbBackupAndRestoreCheckAlm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DbBackupAndRestoreCheckAlm_Type.__name__ = "Integer32"
_DbBackupAndRestoreCheckAlm_Object = MibScalar
dbBackupAndRestoreCheckAlm = _DbBackupAndRestoreCheckAlm_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 7),
    _DbBackupAndRestoreCheckAlm_Type()
)
dbBackupAndRestoreCheckAlm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestoreCheckAlm.setStatus("current")


class _DbBackupAndRestoreCheckSysName_Type(Integer32):
    """Custom type dbBackupAndRestoreCheckSysName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DbBackupAndRestoreCheckSysName_Type.__name__ = "Integer32"
_DbBackupAndRestoreCheckSysName_Object = MibScalar
dbBackupAndRestoreCheckSysName = _DbBackupAndRestoreCheckSysName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 8),
    _DbBackupAndRestoreCheckSysName_Type()
)
dbBackupAndRestoreCheckSysName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestoreCheckSysName.setStatus("current")


class _DbBackupAndRestoreInvokeFilename_Type(DisplayString):
    """Custom type dbBackupAndRestoreInvokeFilename based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DbBackupAndRestoreInvokeFilename_Type.__name__ = "DisplayString"
_DbBackupAndRestoreInvokeFilename_Object = MibScalar
dbBackupAndRestoreInvokeFilename = _DbBackupAndRestoreInvokeFilename_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 9),
    _DbBackupAndRestoreInvokeFilename_Type()
)
dbBackupAndRestoreInvokeFilename.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dbBackupAndRestoreInvokeFilename.setStatus("current")


class _DbBackupAndRestoreFilename_Type(DisplayString):
    """Custom type dbBackupAndRestoreFilename based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DbBackupAndRestoreFilename_Type.__name__ = "DisplayString"
_DbBackupAndRestoreFilename_Object = MibScalar
dbBackupAndRestoreFilename = _DbBackupAndRestoreFilename_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 10),
    _DbBackupAndRestoreFilename_Type()
)
dbBackupAndRestoreFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dbBackupAndRestoreFilename.setStatus("current")


class _DbBackupAndRestoreResult_Type(Integer32):
    """Custom type dbBackupAndRestoreResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("failure", 2),
          ("success", 1))
    )


_DbBackupAndRestoreResult_Type.__name__ = "Integer32"
_DbBackupAndRestoreResult_Object = MibScalar
dbBackupAndRestoreResult = _DbBackupAndRestoreResult_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 11),
    _DbBackupAndRestoreResult_Type()
)
dbBackupAndRestoreResult.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    dbBackupAndRestoreResult.setStatus("current")
_SwUpgrade_ObjectIdentity = ObjectIdentity
swUpgrade = _SwUpgrade_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2)
)
_SwUpgradeCmd_Type = SwUpgradeCmd
_SwUpgradeCmd_Object = MibScalar
swUpgradeCmd = _SwUpgradeCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 1),
    _SwUpgradeCmd_Type()
)
swUpgradeCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    swUpgradeCmd.setStatus("current")
_SwUpgradeAddress_Type = IpAddress
_SwUpgradeAddress_Object = MibScalar
swUpgradeAddress = _SwUpgradeAddress_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 2),
    _SwUpgradeAddress_Type()
)
swUpgradeAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    swUpgradeAddress.setStatus("current")


class _SwUpgradePath_Type(DisplayString):
    """Custom type swUpgradePath based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_SwUpgradePath_Type.__name__ = "DisplayString"
_SwUpgradePath_Object = MibScalar
swUpgradePath = _SwUpgradePath_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 3),
    _SwUpgradePath_Type()
)
swUpgradePath.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    swUpgradePath.setStatus("current")


class _SwUpgradeFtpUser_Type(DisplayString):
    """Custom type swUpgradeFtpUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_SwUpgradeFtpUser_Type.__name__ = "DisplayString"
_SwUpgradeFtpUser_Object = MibScalar
swUpgradeFtpUser = _SwUpgradeFtpUser_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 4),
    _SwUpgradeFtpUser_Type()
)
swUpgradeFtpUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    swUpgradeFtpUser.setStatus("current")


class _SwUpgradeFtpPswd_Type(DisplayString):
    """Custom type swUpgradeFtpPswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_SwUpgradeFtpPswd_Type.__name__ = "DisplayString"
_SwUpgradeFtpPswd_Object = MibScalar
swUpgradeFtpPswd = _SwUpgradeFtpPswd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 5),
    _SwUpgradeFtpPswd_Type()
)
swUpgradeFtpPswd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    swUpgradeFtpPswd.setStatus("current")


class _SwUpgradeInvokeRelNum_Type(DisplayString):
    """Custom type swUpgradeInvokeRelNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_SwUpgradeInvokeRelNum_Type.__name__ = "DisplayString"
_SwUpgradeInvokeRelNum_Object = MibScalar
swUpgradeInvokeRelNum = _SwUpgradeInvokeRelNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 6),
    _SwUpgradeInvokeRelNum_Type()
)
swUpgradeInvokeRelNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    swUpgradeInvokeRelNum.setStatus("current")


class _SwUpgradeCheckAlm_Type(Integer32):
    """Custom type swUpgradeCheckAlm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SwUpgradeCheckAlm_Type.__name__ = "Integer32"
_SwUpgradeCheckAlm_Object = MibScalar
swUpgradeCheckAlm = _SwUpgradeCheckAlm_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 7),
    _SwUpgradeCheckAlm_Type()
)
swUpgradeCheckAlm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    swUpgradeCheckAlm.setStatus("current")


class _SwUpgradeActiveRelNum_Type(DisplayString):
    """Custom type swUpgradeActiveRelNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_SwUpgradeActiveRelNum_Type.__name__ = "DisplayString"
_SwUpgradeActiveRelNum_Object = MibScalar
swUpgradeActiveRelNum = _SwUpgradeActiveRelNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 8),
    _SwUpgradeActiveRelNum_Type()
)
swUpgradeActiveRelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swUpgradeActiveRelNum.setStatus("current")


class _SwUpgradeInactiveRelNum_Type(DisplayString):
    """Custom type swUpgradeInactiveRelNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_SwUpgradeInactiveRelNum_Type.__name__ = "DisplayString"
_SwUpgradeInactiveRelNum_Object = MibScalar
swUpgradeInactiveRelNum = _SwUpgradeInactiveRelNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 9),
    _SwUpgradeInactiveRelNum_Type()
)
swUpgradeInactiveRelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swUpgradeInactiveRelNum.setStatus("current")
_SwUpgradeFileTransferType_Type = SwUpgradeFileTransferType
_SwUpgradeFileTransferType_Object = MibScalar
swUpgradeFileTransferType = _SwUpgradeFileTransferType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 10),
    _SwUpgradeFileTransferType_Type()
)
swUpgradeFileTransferType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    swUpgradeFileTransferType.setStatus("current")
_ShelfInvOperations_ObjectIdentity = ObjectIdentity
shelfInvOperations = _ShelfInvOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 2)
)
_SlotInvOperations_ObjectIdentity = ObjectIdentity
slotInvOperations = _SlotInvOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 3)
)
_ShelfOperations_ObjectIdentity = ObjectIdentity
shelfOperations = _ShelfOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 4)
)
_CpOperations_ObjectIdentity = ObjectIdentity
cpOperations = _CpOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5)
)
_CpRestartOpTable_Object = MibTable
cpRestartOpTable = _CpRestartOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1)
)
if mibBuilder.loadTexts:
    cpRestartOpTable.setStatus("current")
_CpRestartOpEntry_Object = MibTableRow
cpRestartOpEntry = _CpRestartOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1)
)
cpRestartOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "cpRestartOpTypeIdx"),
    (0, "BTI-7000-MIB", "cpRestartOpShelfIdx"),
    (0, "BTI-7000-MIB", "cpRestartOpSlotIdx"),
)
if mibBuilder.loadTexts:
    cpRestartOpEntry.setStatus("current")
_CpRestartOpTypeIdx_Type = CpType
_CpRestartOpTypeIdx_Object = MibTableColumn
cpRestartOpTypeIdx = _CpRestartOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 1),
    _CpRestartOpTypeIdx_Type()
)
cpRestartOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpRestartOpTypeIdx.setStatus("current")


class _CpRestartOpShelfIdx_Type(Integer32):
    """Custom type cpRestartOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_CpRestartOpShelfIdx_Type.__name__ = "Integer32"
_CpRestartOpShelfIdx_Object = MibTableColumn
cpRestartOpShelfIdx = _CpRestartOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 2),
    _CpRestartOpShelfIdx_Type()
)
cpRestartOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpRestartOpShelfIdx.setStatus("current")


class _CpRestartOpSlotIdx_Type(Integer32):
    """Custom type cpRestartOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_CpRestartOpSlotIdx_Type.__name__ = "Integer32"
_CpRestartOpSlotIdx_Object = MibTableColumn
cpRestartOpSlotIdx = _CpRestartOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 3),
    _CpRestartOpSlotIdx_Type()
)
cpRestartOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpRestartOpSlotIdx.setStatus("current")


class _CpRestartOpCmd_Type(Integer32):
    """Custom type cpRestartOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("coldRestart", 3),
          ("noOp", 1),
          ("powerOn", 4),
          ("warmRestart", 2))
    )


_CpRestartOpCmd_Type.__name__ = "Integer32"
_CpRestartOpCmd_Object = MibTableColumn
cpRestartOpCmd = _CpRestartOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 4),
    _CpRestartOpCmd_Type()
)
cpRestartOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpRestartOpCmd.setStatus("current")
_OaOperations_ObjectIdentity = ObjectIdentity
oaOperations = _OaOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6)
)
_OaOOBRSDOpTable_Object = MibTable
oaOOBRSDOpTable = _OaOOBRSDOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1)
)
if mibBuilder.loadTexts:
    oaOOBRSDOpTable.setStatus("current")
_OaOOBRSDOpEntry_Object = MibTableRow
oaOOBRSDOpEntry = _OaOOBRSDOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1)
)
oaOOBRSDOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "oaOOBRSDOpTypeIdx"),
    (0, "BTI-7000-MIB", "oaOOBRSDOpShelfIdx"),
    (0, "BTI-7000-MIB", "oaOOBRSDOpSlotIdx"),
    (0, "BTI-7000-MIB", "oaOOBRSDOpIdx"),
)
if mibBuilder.loadTexts:
    oaOOBRSDOpEntry.setStatus("current")
_OaOOBRSDOpTypeIdx_Type = OaType
_OaOOBRSDOpTypeIdx_Object = MibTableColumn
oaOOBRSDOpTypeIdx = _OaOOBRSDOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 1),
    _OaOOBRSDOpTypeIdx_Type()
)
oaOOBRSDOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaOOBRSDOpTypeIdx.setStatus("current")


class _OaOOBRSDOpShelfIdx_Type(Integer32):
    """Custom type oaOOBRSDOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OaOOBRSDOpShelfIdx_Type.__name__ = "Integer32"
_OaOOBRSDOpShelfIdx_Object = MibTableColumn
oaOOBRSDOpShelfIdx = _OaOOBRSDOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 2),
    _OaOOBRSDOpShelfIdx_Type()
)
oaOOBRSDOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaOOBRSDOpShelfIdx.setStatus("current")


class _OaOOBRSDOpSlotIdx_Type(Integer32):
    """Custom type oaOOBRSDOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OaOOBRSDOpSlotIdx_Type.__name__ = "Integer32"
_OaOOBRSDOpSlotIdx_Object = MibTableColumn
oaOOBRSDOpSlotIdx = _OaOOBRSDOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 3),
    _OaOOBRSDOpSlotIdx_Type()
)
oaOOBRSDOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaOOBRSDOpSlotIdx.setStatus("current")


class _OaOOBRSDOpIdx_Type(Integer32):
    """Custom type oaOOBRSDOpIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_OaOOBRSDOpIdx_Type.__name__ = "Integer32"
_OaOOBRSDOpIdx_Object = MibTableColumn
oaOOBRSDOpIdx = _OaOOBRSDOpIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 4),
    _OaOOBRSDOpIdx_Type()
)
oaOOBRSDOpIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oaOOBRSDOpIdx.setStatus("current")


class _OaOOBRSDOpCmd_Type(Integer32):
    """Custom type oaOOBRSDOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("overrideOBRSD", 2))
    )


_OaOOBRSDOpCmd_Type.__name__ = "Integer32"
_OaOOBRSDOpCmd_Object = MibTableColumn
oaOOBRSDOpCmd = _OaOOBRSDOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 5),
    _OaOOBRSDOpCmd_Type()
)
oaOOBRSDOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oaOOBRSDOpCmd.setStatus("current")


class _OaOOBRSDOpTimer_Type(Integer32):
    """Custom type oaOOBRSDOpTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 600),
    )


_OaOOBRSDOpTimer_Type.__name__ = "Integer32"
_OaOOBRSDOpTimer_Object = MibTableColumn
oaOOBRSDOpTimer = _OaOOBRSDOpTimer_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 6),
    _OaOOBRSDOpTimer_Type()
)
oaOOBRSDOpTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oaOOBRSDOpTimer.setStatus("current")
_DataCommsOperations_ObjectIdentity = ObjectIdentity
dataCommsOperations = _DataCommsOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7)
)
_DataCommsPingTable_Object = MibTable
dataCommsPingTable = _DataCommsPingTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1)
)
if mibBuilder.loadTexts:
    dataCommsPingTable.setStatus("current")
_DataCommsPingEntry_Object = MibTableRow
dataCommsPingEntry = _DataCommsPingEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1)
)
dataCommsPingEntry.setIndexNames(
    (0, "BTI-7000-MIB", "dataCommsPingCpTypeIdx"),
    (0, "BTI-7000-MIB", "dataCommsPingShelfIdx"),
    (0, "BTI-7000-MIB", "dataCommsPingSlotIdx"),
)
if mibBuilder.loadTexts:
    dataCommsPingEntry.setStatus("current")
_DataCommsPingCpTypeIdx_Type = CpType
_DataCommsPingCpTypeIdx_Object = MibTableColumn
dataCommsPingCpTypeIdx = _DataCommsPingCpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 1),
    _DataCommsPingCpTypeIdx_Type()
)
dataCommsPingCpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dataCommsPingCpTypeIdx.setStatus("current")


class _DataCommsPingShelfIdx_Type(Integer32):
    """Custom type dataCommsPingShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_DataCommsPingShelfIdx_Type.__name__ = "Integer32"
_DataCommsPingShelfIdx_Object = MibTableColumn
dataCommsPingShelfIdx = _DataCommsPingShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 2),
    _DataCommsPingShelfIdx_Type()
)
dataCommsPingShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dataCommsPingShelfIdx.setStatus("current")


class _DataCommsPingSlotIdx_Type(Integer32):
    """Custom type dataCommsPingSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_DataCommsPingSlotIdx_Type.__name__ = "Integer32"
_DataCommsPingSlotIdx_Object = MibTableColumn
dataCommsPingSlotIdx = _DataCommsPingSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 3),
    _DataCommsPingSlotIdx_Type()
)
dataCommsPingSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dataCommsPingSlotIdx.setStatus("current")
_DataCommsPingCmd_Type = DataCommsPingCmd
_DataCommsPingCmd_Object = MibTableColumn
dataCommsPingCmd = _DataCommsPingCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 4),
    _DataCommsPingCmd_Type()
)
dataCommsPingCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataCommsPingCmd.setStatus("current")
_DataCommsPingAddress_Type = IpAddress
_DataCommsPingAddress_Object = MibTableColumn
dataCommsPingAddress = _DataCommsPingAddress_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 5),
    _DataCommsPingAddress_Type()
)
dataCommsPingAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataCommsPingAddress.setStatus("current")


class _DataCommsPingNumAttempts_Type(Integer32):
    """Custom type dataCommsPingNumAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_DataCommsPingNumAttempts_Type.__name__ = "Integer32"
_DataCommsPingNumAttempts_Object = MibTableColumn
dataCommsPingNumAttempts = _DataCommsPingNumAttempts_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 6),
    _DataCommsPingNumAttempts_Type()
)
dataCommsPingNumAttempts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataCommsPingNumAttempts.setStatus("current")


class _DataCommsPingNumSuccesses_Type(Integer32):
    """Custom type dataCommsPingNumSuccesses based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_DataCommsPingNumSuccesses_Type.__name__ = "Integer32"
_DataCommsPingNumSuccesses_Object = MibTableColumn
dataCommsPingNumSuccesses = _DataCommsPingNumSuccesses_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 7),
    _DataCommsPingNumSuccesses_Type()
)
dataCommsPingNumSuccesses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dataCommsPingNumSuccesses.setStatus("current")
_PluggableInvOperations_ObjectIdentity = ObjectIdentity
pluggableInvOperations = _PluggableInvOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8)
)
_PluggableInvRestartOpTable_Object = MibTable
pluggableInvRestartOpTable = _PluggableInvRestartOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1)
)
if mibBuilder.loadTexts:
    pluggableInvRestartOpTable.setStatus("current")
_PluggableInvRestartOpEntry_Object = MibTableRow
pluggableInvRestartOpEntry = _PluggableInvRestartOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1)
)
pluggableInvRestartOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "pluggableInvRestartOpTypeIdx"),
    (0, "BTI-7000-MIB", "pluggableInvRestartOpShelfIdx"),
    (0, "BTI-7000-MIB", "pluggableInvRestartOpSlotIdx"),
    (0, "BTI-7000-MIB", "pluggableInvRestartOpPortIdx"),
)
if mibBuilder.loadTexts:
    pluggableInvRestartOpEntry.setStatus("current")


class _PluggableInvRestartOpTypeIdx_Type(Integer32):
    """Custom type pluggableInvRestartOpTypeIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("xfp", 3))
    )


_PluggableInvRestartOpTypeIdx_Type.__name__ = "Integer32"
_PluggableInvRestartOpTypeIdx_Object = MibTableColumn
pluggableInvRestartOpTypeIdx = _PluggableInvRestartOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 1),
    _PluggableInvRestartOpTypeIdx_Type()
)
pluggableInvRestartOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pluggableInvRestartOpTypeIdx.setStatus("current")


class _PluggableInvRestartOpShelfIdx_Type(Integer32):
    """Custom type pluggableInvRestartOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_PluggableInvRestartOpShelfIdx_Type.__name__ = "Integer32"
_PluggableInvRestartOpShelfIdx_Object = MibTableColumn
pluggableInvRestartOpShelfIdx = _PluggableInvRestartOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 2),
    _PluggableInvRestartOpShelfIdx_Type()
)
pluggableInvRestartOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pluggableInvRestartOpShelfIdx.setStatus("current")


class _PluggableInvRestartOpSlotIdx_Type(Integer32):
    """Custom type pluggableInvRestartOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_PluggableInvRestartOpSlotIdx_Type.__name__ = "Integer32"
_PluggableInvRestartOpSlotIdx_Object = MibTableColumn
pluggableInvRestartOpSlotIdx = _PluggableInvRestartOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 3),
    _PluggableInvRestartOpSlotIdx_Type()
)
pluggableInvRestartOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pluggableInvRestartOpSlotIdx.setStatus("current")


class _PluggableInvRestartOpPortIdx_Type(Integer32):
    """Custom type pluggableInvRestartOpPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 28),
    )


_PluggableInvRestartOpPortIdx_Type.__name__ = "Integer32"
_PluggableInvRestartOpPortIdx_Object = MibTableColumn
pluggableInvRestartOpPortIdx = _PluggableInvRestartOpPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 4),
    _PluggableInvRestartOpPortIdx_Type()
)
pluggableInvRestartOpPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    pluggableInvRestartOpPortIdx.setStatus("current")


class _PluggableInvRestartOpCmd_Type(Integer32):
    """Custom type pluggableInvRestartOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("coldRestart", 2),
          ("noOp", 1))
    )


_PluggableInvRestartOpCmd_Type.__name__ = "Integer32"
_PluggableInvRestartOpCmd_Object = MibTableColumn
pluggableInvRestartOpCmd = _PluggableInvRestartOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 5),
    _PluggableInvRestartOpCmd_Type()
)
pluggableInvRestartOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pluggableInvRestartOpCmd.setStatus("current")
_XcvrOperations_ObjectIdentity = ObjectIdentity
xcvrOperations = _XcvrOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9)
)
_XcvrLpbkOpTable_Object = MibTable
xcvrLpbkOpTable = _XcvrLpbkOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1)
)
if mibBuilder.loadTexts:
    xcvrLpbkOpTable.setStatus("current")
_XcvrLpbkOpEntry_Object = MibTableRow
xcvrLpbkOpEntry = _XcvrLpbkOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1)
)
xcvrLpbkOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "xcvrLpbkOpTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrLpbkOpShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrLpbkOpSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrLpbkOpIdx"),
)
if mibBuilder.loadTexts:
    xcvrLpbkOpEntry.setStatus("current")
_XcvrLpbkOpTypeIdx_Type = XcvrType
_XcvrLpbkOpTypeIdx_Object = MibTableColumn
xcvrLpbkOpTypeIdx = _XcvrLpbkOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 1),
    _XcvrLpbkOpTypeIdx_Type()
)
xcvrLpbkOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrLpbkOpTypeIdx.setStatus("current")


class _XcvrLpbkOpShelfIdx_Type(Integer32):
    """Custom type xcvrLpbkOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrLpbkOpShelfIdx_Type.__name__ = "Integer32"
_XcvrLpbkOpShelfIdx_Object = MibTableColumn
xcvrLpbkOpShelfIdx = _XcvrLpbkOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 2),
    _XcvrLpbkOpShelfIdx_Type()
)
xcvrLpbkOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrLpbkOpShelfIdx.setStatus("current")


class _XcvrLpbkOpSlotIdx_Type(Integer32):
    """Custom type xcvrLpbkOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrLpbkOpSlotIdx_Type.__name__ = "Integer32"
_XcvrLpbkOpSlotIdx_Object = MibTableColumn
xcvrLpbkOpSlotIdx = _XcvrLpbkOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 3),
    _XcvrLpbkOpSlotIdx_Type()
)
xcvrLpbkOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrLpbkOpSlotIdx.setStatus("current")


class _XcvrLpbkOpIdx_Type(Integer32):
    """Custom type xcvrLpbkOpIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrLpbkOpIdx_Type.__name__ = "Integer32"
_XcvrLpbkOpIdx_Object = MibTableColumn
xcvrLpbkOpIdx = _XcvrLpbkOpIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 4),
    _XcvrLpbkOpIdx_Type()
)
xcvrLpbkOpIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrLpbkOpIdx.setStatus("current")


class _XcvrLpbkOpCmd_Type(Integer32):
    """Custom type xcvrLpbkOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("oprLpbk", 2),
          ("oprTerminalLpbk", 4),
          ("rlsLpbk", 3))
    )


_XcvrLpbkOpCmd_Type.__name__ = "Integer32"
_XcvrLpbkOpCmd_Object = MibTableColumn
xcvrLpbkOpCmd = _XcvrLpbkOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 5),
    _XcvrLpbkOpCmd_Type()
)
xcvrLpbkOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrLpbkOpCmd.setStatus("current")
_XcvrProtSwOpTable_Object = MibTable
xcvrProtSwOpTable = _XcvrProtSwOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2)
)
if mibBuilder.loadTexts:
    xcvrProtSwOpTable.setStatus("current")
_XcvrProtSwOpEntry_Object = MibTableRow
xcvrProtSwOpEntry = _XcvrProtSwOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1)
)
xcvrProtSwOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "xcvrProtSwOpTypeIdx"),
    (0, "BTI-7000-MIB", "xcvrProtSwOpShelfIdx"),
    (0, "BTI-7000-MIB", "xcvrProtSwOpSlotIdx"),
    (0, "BTI-7000-MIB", "xcvrProtSwOpIdx"),
)
if mibBuilder.loadTexts:
    xcvrProtSwOpEntry.setStatus("current")
_XcvrProtSwOpTypeIdx_Type = XcvrType
_XcvrProtSwOpTypeIdx_Object = MibTableColumn
xcvrProtSwOpTypeIdx = _XcvrProtSwOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 1),
    _XcvrProtSwOpTypeIdx_Type()
)
xcvrProtSwOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtSwOpTypeIdx.setStatus("current")


class _XcvrProtSwOpShelfIdx_Type(Integer32):
    """Custom type xcvrProtSwOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_XcvrProtSwOpShelfIdx_Type.__name__ = "Integer32"
_XcvrProtSwOpShelfIdx_Object = MibTableColumn
xcvrProtSwOpShelfIdx = _XcvrProtSwOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 2),
    _XcvrProtSwOpShelfIdx_Type()
)
xcvrProtSwOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtSwOpShelfIdx.setStatus("current")


class _XcvrProtSwOpSlotIdx_Type(Integer32):
    """Custom type xcvrProtSwOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_XcvrProtSwOpSlotIdx_Type.__name__ = "Integer32"
_XcvrProtSwOpSlotIdx_Object = MibTableColumn
xcvrProtSwOpSlotIdx = _XcvrProtSwOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 3),
    _XcvrProtSwOpSlotIdx_Type()
)
xcvrProtSwOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtSwOpSlotIdx.setStatus("current")


class _XcvrProtSwOpIdx_Type(Integer32):
    """Custom type xcvrProtSwOpIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcvrProtSwOpIdx_Type.__name__ = "Integer32"
_XcvrProtSwOpIdx_Object = MibTableColumn
xcvrProtSwOpIdx = _XcvrProtSwOpIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 4),
    _XcvrProtSwOpIdx_Type()
)
xcvrProtSwOpIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcvrProtSwOpIdx.setStatus("current")
_XcvrProtSwOpCmd_Type = ProtSwOpCmd
_XcvrProtSwOpCmd_Object = MibTableColumn
xcvrProtSwOpCmd = _XcvrProtSwOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 5),
    _XcvrProtSwOpCmd_Type()
)
xcvrProtSwOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xcvrProtSwOpCmd.setStatus("current")
_AdminOperations_ObjectIdentity = ObjectIdentity
adminOperations = _AdminOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 10)
)
_AmdOperations_ObjectIdentity = ObjectIdentity
amdOperations = _AmdOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 11)
)
_OcnOperations_ObjectIdentity = ObjectIdentity
ocnOperations = _OcnOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12)
)
_OcnLpbkOpTable_Object = MibTable
ocnLpbkOpTable = _OcnLpbkOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1)
)
if mibBuilder.loadTexts:
    ocnLpbkOpTable.setStatus("current")
_OcnLpbkOpEntry_Object = MibTableRow
ocnLpbkOpEntry = _OcnLpbkOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1)
)
ocnLpbkOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ocnLpbkOpTypeIdx"),
    (0, "BTI-7000-MIB", "ocnLpbkOpShelfIdx"),
    (0, "BTI-7000-MIB", "ocnLpbkOpSlotIdx"),
    (0, "BTI-7000-MIB", "ocnLpbkOpPortIdx"),
)
if mibBuilder.loadTexts:
    ocnLpbkOpEntry.setStatus("current")
_OcnLpbkOpTypeIdx_Type = OcnType
_OcnLpbkOpTypeIdx_Object = MibTableColumn
ocnLpbkOpTypeIdx = _OcnLpbkOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 1),
    _OcnLpbkOpTypeIdx_Type()
)
ocnLpbkOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnLpbkOpTypeIdx.setStatus("current")


class _OcnLpbkOpShelfIdx_Type(Integer32):
    """Custom type ocnLpbkOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OcnLpbkOpShelfIdx_Type.__name__ = "Integer32"
_OcnLpbkOpShelfIdx_Object = MibTableColumn
ocnLpbkOpShelfIdx = _OcnLpbkOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 2),
    _OcnLpbkOpShelfIdx_Type()
)
ocnLpbkOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnLpbkOpShelfIdx.setStatus("current")


class _OcnLpbkOpSlotIdx_Type(Integer32):
    """Custom type ocnLpbkOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OcnLpbkOpSlotIdx_Type.__name__ = "Integer32"
_OcnLpbkOpSlotIdx_Object = MibTableColumn
ocnLpbkOpSlotIdx = _OcnLpbkOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 3),
    _OcnLpbkOpSlotIdx_Type()
)
ocnLpbkOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnLpbkOpSlotIdx.setStatus("current")


class _OcnLpbkOpPortIdx_Type(Integer32):
    """Custom type ocnLpbkOpPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_OcnLpbkOpPortIdx_Type.__name__ = "Integer32"
_OcnLpbkOpPortIdx_Object = MibTableColumn
ocnLpbkOpPortIdx = _OcnLpbkOpPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 4),
    _OcnLpbkOpPortIdx_Type()
)
ocnLpbkOpPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnLpbkOpPortIdx.setStatus("current")


class _OcnLpbkOpCmd_Type(Integer32):
    """Custom type ocnLpbkOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("oprFacilityLpbk", 2),
          ("oprTerminalLpbk", 4),
          ("rlsLpbk", 3))
    )


_OcnLpbkOpCmd_Type.__name__ = "Integer32"
_OcnLpbkOpCmd_Object = MibTableColumn
ocnLpbkOpCmd = _OcnLpbkOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 5),
    _OcnLpbkOpCmd_Type()
)
ocnLpbkOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnLpbkOpCmd.setStatus("current")
_OcnProtSwOpTable_Object = MibTable
ocnProtSwOpTable = _OcnProtSwOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2)
)
if mibBuilder.loadTexts:
    ocnProtSwOpTable.setStatus("current")
_OcnProtSwOpEntry_Object = MibTableRow
ocnProtSwOpEntry = _OcnProtSwOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1)
)
ocnProtSwOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ocnProtSwOpTypeIdx"),
    (0, "BTI-7000-MIB", "ocnProtSwOpShelfIdx"),
    (0, "BTI-7000-MIB", "ocnProtSwOpSlotIdx"),
    (0, "BTI-7000-MIB", "ocnProtSwOpIdx"),
)
if mibBuilder.loadTexts:
    ocnProtSwOpEntry.setStatus("current")
_OcnProtSwOpTypeIdx_Type = OcnType
_OcnProtSwOpTypeIdx_Object = MibTableColumn
ocnProtSwOpTypeIdx = _OcnProtSwOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 1),
    _OcnProtSwOpTypeIdx_Type()
)
ocnProtSwOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtSwOpTypeIdx.setStatus("current")


class _OcnProtSwOpShelfIdx_Type(Integer32):
    """Custom type ocnProtSwOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OcnProtSwOpShelfIdx_Type.__name__ = "Integer32"
_OcnProtSwOpShelfIdx_Object = MibTableColumn
ocnProtSwOpShelfIdx = _OcnProtSwOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 2),
    _OcnProtSwOpShelfIdx_Type()
)
ocnProtSwOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtSwOpShelfIdx.setStatus("current")


class _OcnProtSwOpSlotIdx_Type(Integer32):
    """Custom type ocnProtSwOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_OcnProtSwOpSlotIdx_Type.__name__ = "Integer32"
_OcnProtSwOpSlotIdx_Object = MibTableColumn
ocnProtSwOpSlotIdx = _OcnProtSwOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 3),
    _OcnProtSwOpSlotIdx_Type()
)
ocnProtSwOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtSwOpSlotIdx.setStatus("current")


class _OcnProtSwOpIdx_Type(Integer32):
    """Custom type ocnProtSwOpIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_OcnProtSwOpIdx_Type.__name__ = "Integer32"
_OcnProtSwOpIdx_Object = MibTableColumn
ocnProtSwOpIdx = _OcnProtSwOpIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 4),
    _OcnProtSwOpIdx_Type()
)
ocnProtSwOpIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ocnProtSwOpIdx.setStatus("current")
_OcnProtSwOpCmd_Type = ProtSwOpCmd
_OcnProtSwOpCmd_Object = MibTableColumn
ocnProtSwOpCmd = _OcnProtSwOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 5),
    _OcnProtSwOpCmd_Type()
)
ocnProtSwOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocnProtSwOpCmd.setStatus("current")
_StsnOperations_ObjectIdentity = ObjectIdentity
stsnOperations = _StsnOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13)
)
_StsnProtSwOpTable_Object = MibTable
stsnProtSwOpTable = _StsnProtSwOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1)
)
if mibBuilder.loadTexts:
    stsnProtSwOpTable.setStatus("current")
_StsnProtSwOpEntry_Object = MibTableRow
stsnProtSwOpEntry = _StsnProtSwOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1)
)
stsnProtSwOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stsnProtSwOpTypeIdx"),
    (0, "BTI-7000-MIB", "stsnProtSwOpShelfIdx"),
    (0, "BTI-7000-MIB", "stsnProtSwOpSlotIdx"),
    (0, "BTI-7000-MIB", "stsnProtSwOpPortIdx"),
    (0, "BTI-7000-MIB", "stsnProtSwOpIdx"),
)
if mibBuilder.loadTexts:
    stsnProtSwOpEntry.setStatus("current")
_StsnProtSwOpTypeIdx_Type = StsnType
_StsnProtSwOpTypeIdx_Object = MibTableColumn
stsnProtSwOpTypeIdx = _StsnProtSwOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 1),
    _StsnProtSwOpTypeIdx_Type()
)
stsnProtSwOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnProtSwOpTypeIdx.setStatus("current")


class _StsnProtSwOpShelfIdx_Type(Integer32):
    """Custom type stsnProtSwOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StsnProtSwOpShelfIdx_Type.__name__ = "Integer32"
_StsnProtSwOpShelfIdx_Object = MibTableColumn
stsnProtSwOpShelfIdx = _StsnProtSwOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 2),
    _StsnProtSwOpShelfIdx_Type()
)
stsnProtSwOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnProtSwOpShelfIdx.setStatus("current")


class _StsnProtSwOpSlotIdx_Type(Integer32):
    """Custom type stsnProtSwOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StsnProtSwOpSlotIdx_Type.__name__ = "Integer32"
_StsnProtSwOpSlotIdx_Object = MibTableColumn
stsnProtSwOpSlotIdx = _StsnProtSwOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 3),
    _StsnProtSwOpSlotIdx_Type()
)
stsnProtSwOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnProtSwOpSlotIdx.setStatus("current")


class _StsnProtSwOpPortIdx_Type(Integer32):
    """Custom type stsnProtSwOpPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StsnProtSwOpPortIdx_Type.__name__ = "Integer32"
_StsnProtSwOpPortIdx_Object = MibTableColumn
stsnProtSwOpPortIdx = _StsnProtSwOpPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 4),
    _StsnProtSwOpPortIdx_Type()
)
stsnProtSwOpPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnProtSwOpPortIdx.setStatus("current")


class _StsnProtSwOpIdx_Type(Integer32):
    """Custom type stsnProtSwOpIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 192),
    )


_StsnProtSwOpIdx_Type.__name__ = "Integer32"
_StsnProtSwOpIdx_Object = MibTableColumn
stsnProtSwOpIdx = _StsnProtSwOpIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 5),
    _StsnProtSwOpIdx_Type()
)
stsnProtSwOpIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stsnProtSwOpIdx.setStatus("current")
_StsnProtSwOpCmd_Type = ProtSwOpCmd
_StsnProtSwOpCmd_Object = MibTableColumn
stsnProtSwOpCmd = _StsnProtSwOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 6),
    _StsnProtSwOpCmd_Type()
)
stsnProtSwOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stsnProtSwOpCmd.setStatus("current")
_StmnOperations_ObjectIdentity = ObjectIdentity
stmnOperations = _StmnOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14)
)
_StmnLpbkOpTable_Object = MibTable
stmnLpbkOpTable = _StmnLpbkOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1)
)
if mibBuilder.loadTexts:
    stmnLpbkOpTable.setStatus("current")
_StmnLpbkOpEntry_Object = MibTableRow
stmnLpbkOpEntry = _StmnLpbkOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1)
)
stmnLpbkOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stmnLpbkOpTypeIdx"),
    (0, "BTI-7000-MIB", "stmnLpbkOpShelfIdx"),
    (0, "BTI-7000-MIB", "stmnLpbkOpSlotIdx"),
    (0, "BTI-7000-MIB", "stmnLpbkOpPortIdx"),
)
if mibBuilder.loadTexts:
    stmnLpbkOpEntry.setStatus("current")
_StmnLpbkOpTypeIdx_Type = StmnType
_StmnLpbkOpTypeIdx_Object = MibTableColumn
stmnLpbkOpTypeIdx = _StmnLpbkOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 1),
    _StmnLpbkOpTypeIdx_Type()
)
stmnLpbkOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnLpbkOpTypeIdx.setStatus("current")


class _StmnLpbkOpShelfIdx_Type(Integer32):
    """Custom type stmnLpbkOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StmnLpbkOpShelfIdx_Type.__name__ = "Integer32"
_StmnLpbkOpShelfIdx_Object = MibTableColumn
stmnLpbkOpShelfIdx = _StmnLpbkOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 2),
    _StmnLpbkOpShelfIdx_Type()
)
stmnLpbkOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnLpbkOpShelfIdx.setStatus("current")


class _StmnLpbkOpSlotIdx_Type(Integer32):
    """Custom type stmnLpbkOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_StmnLpbkOpSlotIdx_Type.__name__ = "Integer32"
_StmnLpbkOpSlotIdx_Object = MibTableColumn
stmnLpbkOpSlotIdx = _StmnLpbkOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 3),
    _StmnLpbkOpSlotIdx_Type()
)
stmnLpbkOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnLpbkOpSlotIdx.setStatus("current")


class _StmnLpbkOpPortIdx_Type(Integer32):
    """Custom type stmnLpbkOpPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_StmnLpbkOpPortIdx_Type.__name__ = "Integer32"
_StmnLpbkOpPortIdx_Object = MibTableColumn
stmnLpbkOpPortIdx = _StmnLpbkOpPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 4),
    _StmnLpbkOpPortIdx_Type()
)
stmnLpbkOpPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnLpbkOpPortIdx.setStatus("current")


class _StmnLpbkOpCmd_Type(Integer32):
    """Custom type stmnLpbkOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("oprFacilityLpbk", 2),
          ("oprTerminalLpbk", 4),
          ("rlsLpbk", 3))
    )


_StmnLpbkOpCmd_Type.__name__ = "Integer32"
_StmnLpbkOpCmd_Object = MibTableColumn
stmnLpbkOpCmd = _StmnLpbkOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 5),
    _StmnLpbkOpCmd_Type()
)
stmnLpbkOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnLpbkOpCmd.setStatus("current")
_StmnProtSwOpTable_Object = MibTable
stmnProtSwOpTable = _StmnProtSwOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2)
)
if mibBuilder.loadTexts:
    stmnProtSwOpTable.setStatus("current")
_StmnProtSwOpEntry_Object = MibTableRow
stmnProtSwOpEntry = _StmnProtSwOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1)
)
stmnProtSwOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "stmnProtSwOpTypeIdx"),
    (0, "BTI-7000-MIB", "stmnProtSwOpShelfIdx"),
    (0, "BTI-7000-MIB", "stmnProtSwOpSlotIdx"),
    (0, "BTI-7000-MIB", "stmnProtSwOpIdx"),
)
if mibBuilder.loadTexts:
    stmnProtSwOpEntry.setStatus("current")
_StmnProtSwOpTypeIdx_Type = StmnType
_StmnProtSwOpTypeIdx_Object = MibTableColumn
stmnProtSwOpTypeIdx = _StmnProtSwOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 1),
    _StmnProtSwOpTypeIdx_Type()
)
stmnProtSwOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtSwOpTypeIdx.setStatus("current")


class _StmnProtSwOpShelfIdx_Type(Integer32):
    """Custom type stmnProtSwOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_StmnProtSwOpShelfIdx_Type.__name__ = "Integer32"
_StmnProtSwOpShelfIdx_Object = MibTableColumn
stmnProtSwOpShelfIdx = _StmnProtSwOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 2),
    _StmnProtSwOpShelfIdx_Type()
)
stmnProtSwOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtSwOpShelfIdx.setStatus("current")


class _StmnProtSwOpSlotIdx_Type(Integer32):
    """Custom type stmnProtSwOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_StmnProtSwOpSlotIdx_Type.__name__ = "Integer32"
_StmnProtSwOpSlotIdx_Object = MibTableColumn
stmnProtSwOpSlotIdx = _StmnProtSwOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 3),
    _StmnProtSwOpSlotIdx_Type()
)
stmnProtSwOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtSwOpSlotIdx.setStatus("current")


class _StmnProtSwOpIdx_Type(Integer32):
    """Custom type stmnProtSwOpIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_StmnProtSwOpIdx_Type.__name__ = "Integer32"
_StmnProtSwOpIdx_Object = MibTableColumn
stmnProtSwOpIdx = _StmnProtSwOpIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 4),
    _StmnProtSwOpIdx_Type()
)
stmnProtSwOpIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    stmnProtSwOpIdx.setStatus("current")
_StmnProtSwOpCmd_Type = ProtSwOpCmd
_StmnProtSwOpCmd_Object = MibTableColumn
stmnProtSwOpCmd = _StmnProtSwOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 5),
    _StmnProtSwOpCmd_Type()
)
stmnProtSwOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stmnProtSwOpCmd.setStatus("current")
_VcnOperations_ObjectIdentity = ObjectIdentity
vcnOperations = _VcnOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15)
)
_VcnProtSwOpTable_Object = MibTable
vcnProtSwOpTable = _VcnProtSwOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1)
)
if mibBuilder.loadTexts:
    vcnProtSwOpTable.setStatus("current")
_VcnProtSwOpEntry_Object = MibTableRow
vcnProtSwOpEntry = _VcnProtSwOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1)
)
vcnProtSwOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "vcnProtSwOpTypeIdx"),
    (0, "BTI-7000-MIB", "vcnProtSwOpShelfIdx"),
    (0, "BTI-7000-MIB", "vcnProtSwOpSlotIdx"),
    (0, "BTI-7000-MIB", "vcnProtSwOpPortIdx"),
    (0, "BTI-7000-MIB", "vcnProtSwOpIdx"),
)
if mibBuilder.loadTexts:
    vcnProtSwOpEntry.setStatus("current")
_VcnProtSwOpTypeIdx_Type = VcnType
_VcnProtSwOpTypeIdx_Object = MibTableColumn
vcnProtSwOpTypeIdx = _VcnProtSwOpTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 1),
    _VcnProtSwOpTypeIdx_Type()
)
vcnProtSwOpTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnProtSwOpTypeIdx.setStatus("current")


class _VcnProtSwOpShelfIdx_Type(Integer32):
    """Custom type vcnProtSwOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_VcnProtSwOpShelfIdx_Type.__name__ = "Integer32"
_VcnProtSwOpShelfIdx_Object = MibTableColumn
vcnProtSwOpShelfIdx = _VcnProtSwOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 2),
    _VcnProtSwOpShelfIdx_Type()
)
vcnProtSwOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnProtSwOpShelfIdx.setStatus("current")


class _VcnProtSwOpSlotIdx_Type(Integer32):
    """Custom type vcnProtSwOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VcnProtSwOpSlotIdx_Type.__name__ = "Integer32"
_VcnProtSwOpSlotIdx_Object = MibTableColumn
vcnProtSwOpSlotIdx = _VcnProtSwOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 3),
    _VcnProtSwOpSlotIdx_Type()
)
vcnProtSwOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnProtSwOpSlotIdx.setStatus("current")


class _VcnProtSwOpPortIdx_Type(Integer32):
    """Custom type vcnProtSwOpPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VcnProtSwOpPortIdx_Type.__name__ = "Integer32"
_VcnProtSwOpPortIdx_Object = MibTableColumn
vcnProtSwOpPortIdx = _VcnProtSwOpPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 4),
    _VcnProtSwOpPortIdx_Type()
)
vcnProtSwOpPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnProtSwOpPortIdx.setStatus("current")


class _VcnProtSwOpIdx_Type(Integer32):
    """Custom type vcnProtSwOpIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_VcnProtSwOpIdx_Type.__name__ = "Integer32"
_VcnProtSwOpIdx_Object = MibTableColumn
vcnProtSwOpIdx = _VcnProtSwOpIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 5),
    _VcnProtSwOpIdx_Type()
)
vcnProtSwOpIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vcnProtSwOpIdx.setStatus("current")
_VcnProtSwOpCmd_Type = ProtSwOpCmd
_VcnProtSwOpCmd_Object = MibTableColumn
vcnProtSwOpCmd = _VcnProtSwOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 6),
    _VcnProtSwOpCmd_Type()
)
vcnProtSwOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcnProtSwOpCmd.setStatus("current")
_GeOperations_ObjectIdentity = ObjectIdentity
geOperations = _GeOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16)
)
_GeLpbkOpTable_Object = MibTable
geLpbkOpTable = _GeLpbkOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1)
)
if mibBuilder.loadTexts:
    geLpbkOpTable.setStatus("current")
_GeLpbkOpEntry_Object = MibTableRow
geLpbkOpEntry = _GeLpbkOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1)
)
geLpbkOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "geLpbkOpShelfIdx"),
    (0, "BTI-7000-MIB", "geLpbkOpSlotIdx"),
    (0, "BTI-7000-MIB", "geLpbkOpPortIdx"),
)
if mibBuilder.loadTexts:
    geLpbkOpEntry.setStatus("current")


class _GeLpbkOpShelfIdx_Type(Integer32):
    """Custom type geLpbkOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_GeLpbkOpShelfIdx_Type.__name__ = "Integer32"
_GeLpbkOpShelfIdx_Object = MibTableColumn
geLpbkOpShelfIdx = _GeLpbkOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 1),
    _GeLpbkOpShelfIdx_Type()
)
geLpbkOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geLpbkOpShelfIdx.setStatus("current")


class _GeLpbkOpSlotIdx_Type(Integer32):
    """Custom type geLpbkOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_GeLpbkOpSlotIdx_Type.__name__ = "Integer32"
_GeLpbkOpSlotIdx_Object = MibTableColumn
geLpbkOpSlotIdx = _GeLpbkOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 2),
    _GeLpbkOpSlotIdx_Type()
)
geLpbkOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geLpbkOpSlotIdx.setStatus("current")


class _GeLpbkOpPortIdx_Type(Integer32):
    """Custom type geLpbkOpPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_GeLpbkOpPortIdx_Type.__name__ = "Integer32"
_GeLpbkOpPortIdx_Object = MibTableColumn
geLpbkOpPortIdx = _GeLpbkOpPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 3),
    _GeLpbkOpPortIdx_Type()
)
geLpbkOpPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geLpbkOpPortIdx.setStatus("current")


class _GeLpbkOpCmd_Type(Integer32):
    """Custom type geLpbkOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("oprFacilityLpbk", 2),
          ("oprTerminalLpbk", 3),
          ("rlsLpbk", 4))
    )


_GeLpbkOpCmd_Type.__name__ = "Integer32"
_GeLpbkOpCmd_Object = MibTableColumn
geLpbkOpCmd = _GeLpbkOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 4),
    _GeLpbkOpCmd_Type()
)
geLpbkOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geLpbkOpCmd.setStatus("current")
_FcOperations_ObjectIdentity = ObjectIdentity
fcOperations = _FcOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17)
)
_FcLpbkOpTable_Object = MibTable
fcLpbkOpTable = _FcLpbkOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1)
)
if mibBuilder.loadTexts:
    fcLpbkOpTable.setStatus("current")
_FcLpbkOpEntry_Object = MibTableRow
fcLpbkOpEntry = _FcLpbkOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1)
)
fcLpbkOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "fcLpbkOpShelfIdx"),
    (0, "BTI-7000-MIB", "fcLpbkOpSlotIdx"),
    (0, "BTI-7000-MIB", "fcLpbkOpPortIdx"),
)
if mibBuilder.loadTexts:
    fcLpbkOpEntry.setStatus("current")


class _FcLpbkOpShelfIdx_Type(Integer32):
    """Custom type fcLpbkOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_FcLpbkOpShelfIdx_Type.__name__ = "Integer32"
_FcLpbkOpShelfIdx_Object = MibTableColumn
fcLpbkOpShelfIdx = _FcLpbkOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 1),
    _FcLpbkOpShelfIdx_Type()
)
fcLpbkOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcLpbkOpShelfIdx.setStatus("current")


class _FcLpbkOpSlotIdx_Type(Integer32):
    """Custom type fcLpbkOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_FcLpbkOpSlotIdx_Type.__name__ = "Integer32"
_FcLpbkOpSlotIdx_Object = MibTableColumn
fcLpbkOpSlotIdx = _FcLpbkOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 2),
    _FcLpbkOpSlotIdx_Type()
)
fcLpbkOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcLpbkOpSlotIdx.setStatus("current")


class _FcLpbkOpPortIdx_Type(Integer32):
    """Custom type fcLpbkOpPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_FcLpbkOpPortIdx_Type.__name__ = "Integer32"
_FcLpbkOpPortIdx_Object = MibTableColumn
fcLpbkOpPortIdx = _FcLpbkOpPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 3),
    _FcLpbkOpPortIdx_Type()
)
fcLpbkOpPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fcLpbkOpPortIdx.setStatus("current")


class _FcLpbkOpCmd_Type(Integer32):
    """Custom type fcLpbkOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("oprFacilityLpbk", 2),
          ("oprTerminalLpbk", 3),
          ("rlsLpbk", 4))
    )


_FcLpbkOpCmd_Type.__name__ = "Integer32"
_FcLpbkOpCmd_Object = MibTableColumn
fcLpbkOpCmd = _FcLpbkOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 4),
    _FcLpbkOpCmd_Type()
)
fcLpbkOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcLpbkOpCmd.setStatus("current")
_BriOperations_ObjectIdentity = ObjectIdentity
briOperations = _BriOperations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18)
)
_BriLpbkOpTable_Object = MibTable
briLpbkOpTable = _BriLpbkOpTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1)
)
if mibBuilder.loadTexts:
    briLpbkOpTable.setStatus("current")
_BriLpbkOpEntry_Object = MibTableRow
briLpbkOpEntry = _BriLpbkOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1)
)
briLpbkOpEntry.setIndexNames(
    (0, "BTI-7000-MIB", "briLpbkOpShelfIdx"),
    (0, "BTI-7000-MIB", "briLpbkOpSlotIdx"),
    (0, "BTI-7000-MIB", "briLpbkOpPortIdx"),
)
if mibBuilder.loadTexts:
    briLpbkOpEntry.setStatus("current")


class _BriLpbkOpShelfIdx_Type(Integer32):
    """Custom type briLpbkOpShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_BriLpbkOpShelfIdx_Type.__name__ = "Integer32"
_BriLpbkOpShelfIdx_Object = MibTableColumn
briLpbkOpShelfIdx = _BriLpbkOpShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 1),
    _BriLpbkOpShelfIdx_Type()
)
briLpbkOpShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briLpbkOpShelfIdx.setStatus("current")


class _BriLpbkOpSlotIdx_Type(Integer32):
    """Custom type briLpbkOpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(3, 3),
        ValueRangeConstraint(5, 5),
        ValueRangeConstraint(7, 7),
        ValueRangeConstraint(9, 9),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(13, 13),
        ValueRangeConstraint(15, 15),
        ValueRangeConstraint(17, 17),
        ValueRangeConstraint(19, 19),
    )


_BriLpbkOpSlotIdx_Type.__name__ = "Integer32"
_BriLpbkOpSlotIdx_Object = MibTableColumn
briLpbkOpSlotIdx = _BriLpbkOpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 2),
    _BriLpbkOpSlotIdx_Type()
)
briLpbkOpSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briLpbkOpSlotIdx.setStatus("current")


class _BriLpbkOpPortIdx_Type(Integer32):
    """Custom type briLpbkOpPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_BriLpbkOpPortIdx_Type.__name__ = "Integer32"
_BriLpbkOpPortIdx_Object = MibTableColumn
briLpbkOpPortIdx = _BriLpbkOpPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 3),
    _BriLpbkOpPortIdx_Type()
)
briLpbkOpPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    briLpbkOpPortIdx.setStatus("current")


class _BriLpbkOpCmd_Type(Integer32):
    """Custom type briLpbkOpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("oprFacilityLpbk", 2),
          ("oprTerminalLpbk", 3),
          ("rlsLpbk", 4))
    )


_BriLpbkOpCmd_Type.__name__ = "Integer32"
_BriLpbkOpCmd_Object = MibTableColumn
briLpbkOpCmd = _BriLpbkOpCmd_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 4),
    _BriLpbkOpCmd_Type()
)
briLpbkOpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    briLpbkOpCmd.setStatus("current")
_Synchronization_ObjectIdentity = ObjectIdentity
synchronization = _Synchronization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12)
)
_CpSynchronizationTable_Object = MibTable
cpSynchronizationTable = _CpSynchronizationTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1)
)
if mibBuilder.loadTexts:
    cpSynchronizationTable.setStatus("current")
_CpSynchronizationEntry_Object = MibTableRow
cpSynchronizationEntry = _CpSynchronizationEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1)
)
cpSynchronizationEntry.setIndexNames(
    (0, "BTI-7000-MIB", "cpSynchronizationTypeIdx"),
    (0, "BTI-7000-MIB", "cpSynchronizationShelfIdx"),
    (0, "BTI-7000-MIB", "cpSynchronizationSlotIdx"),
)
if mibBuilder.loadTexts:
    cpSynchronizationEntry.setStatus("current")
_CpSynchronizationTypeIdx_Type = CpType
_CpSynchronizationTypeIdx_Object = MibTableColumn
cpSynchronizationTypeIdx = _CpSynchronizationTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 1),
    _CpSynchronizationTypeIdx_Type()
)
cpSynchronizationTypeIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpSynchronizationTypeIdx.setStatus("current")


class _CpSynchronizationShelfIdx_Type(Integer32):
    """Custom type cpSynchronizationShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_CpSynchronizationShelfIdx_Type.__name__ = "Integer32"
_CpSynchronizationShelfIdx_Object = MibTableColumn
cpSynchronizationShelfIdx = _CpSynchronizationShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 2),
    _CpSynchronizationShelfIdx_Type()
)
cpSynchronizationShelfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpSynchronizationShelfIdx.setStatus("current")


class _CpSynchronizationSlotIdx_Type(Integer32):
    """Custom type cpSynchronizationSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_CpSynchronizationSlotIdx_Type.__name__ = "Integer32"
_CpSynchronizationSlotIdx_Object = MibTableColumn
cpSynchronizationSlotIdx = _CpSynchronizationSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 3),
    _CpSynchronizationSlotIdx_Type()
)
cpSynchronizationSlotIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpSynchronizationSlotIdx.setStatus("current")


class _CpSynchronizationTimingMode_Type(Integer32):
    """Custom type cpSynchronizationTimingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("internal", 1),
          ("line", 2))
    )


_CpSynchronizationTimingMode_Type.__name__ = "Integer32"
_CpSynchronizationTimingMode_Object = MibTableColumn
cpSynchronizationTimingMode = _CpSynchronizationTimingMode_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 4),
    _CpSynchronizationTimingMode_Type()
)
cpSynchronizationTimingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSynchronizationTimingMode.setStatus("current")


class _CpSynchronizationPrimRefSrcPortNum_Type(Integer32):
    """Custom type cpSynchronizationPrimRefSrcPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_CpSynchronizationPrimRefSrcPortNum_Type.__name__ = "Integer32"
_CpSynchronizationPrimRefSrcPortNum_Object = MibTableColumn
cpSynchronizationPrimRefSrcPortNum = _CpSynchronizationPrimRefSrcPortNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 5),
    _CpSynchronizationPrimRefSrcPortNum_Type()
)
cpSynchronizationPrimRefSrcPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSynchronizationPrimRefSrcPortNum.setStatus("current")
_CpSynchronizationPrimRefProtStatus_Type = ProtectionStatusType
_CpSynchronizationPrimRefProtStatus_Object = MibTableColumn
cpSynchronizationPrimRefProtStatus = _CpSynchronizationPrimRefProtStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 6),
    _CpSynchronizationPrimRefProtStatus_Type()
)
cpSynchronizationPrimRefProtStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSynchronizationPrimRefProtStatus.setStatus("current")
_CpSynchronizationPrimProtStatQlfr_Type = OperStatQlfr
_CpSynchronizationPrimProtStatQlfr_Object = MibTableColumn
cpSynchronizationPrimProtStatQlfr = _CpSynchronizationPrimProtStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 7),
    _CpSynchronizationPrimProtStatQlfr_Type()
)
cpSynchronizationPrimProtStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSynchronizationPrimProtStatQlfr.setStatus("current")


class _CpSynchronizationSecRefSrcPortNum_Type(Integer32):
    """Custom type cpSynchronizationSecRefSrcPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_CpSynchronizationSecRefSrcPortNum_Type.__name__ = "Integer32"
_CpSynchronizationSecRefSrcPortNum_Object = MibTableColumn
cpSynchronizationSecRefSrcPortNum = _CpSynchronizationSecRefSrcPortNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 8),
    _CpSynchronizationSecRefSrcPortNum_Type()
)
cpSynchronizationSecRefSrcPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSynchronizationSecRefSrcPortNum.setStatus("current")
_CpSynchronizationSecRefProtStatus_Type = ProtectionStatusType
_CpSynchronizationSecRefProtStatus_Object = MibTableColumn
cpSynchronizationSecRefProtStatus = _CpSynchronizationSecRefProtStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 9),
    _CpSynchronizationSecRefProtStatus_Type()
)
cpSynchronizationSecRefProtStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSynchronizationSecRefProtStatus.setStatus("current")
_CpSynchronizationSecProtStatQlfr_Type = OperStatQlfr
_CpSynchronizationSecProtStatQlfr_Object = MibTableColumn
cpSynchronizationSecProtStatQlfr = _CpSynchronizationSecProtStatQlfr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 10),
    _CpSynchronizationSecProtStatQlfr_Type()
)
cpSynchronizationSecProtStatQlfr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSynchronizationSecProtStatQlfr.setStatus("current")


class _CpSynchronizationPrimRefBasicSSM_Type(Integer32):
    """Custom type cpSynchronizationPrimRefBasicSSM based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_CpSynchronizationPrimRefBasicSSM_Type.__name__ = "Integer32"
_CpSynchronizationPrimRefBasicSSM_Object = MibTableColumn
cpSynchronizationPrimRefBasicSSM = _CpSynchronizationPrimRefBasicSSM_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 11),
    _CpSynchronizationPrimRefBasicSSM_Type()
)
cpSynchronizationPrimRefBasicSSM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSynchronizationPrimRefBasicSSM.setStatus("current")


class _CpSynchronizationSecRefBasicSSM_Type(Integer32):
    """Custom type cpSynchronizationSecRefBasicSSM based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_CpSynchronizationSecRefBasicSSM_Type.__name__ = "Integer32"
_CpSynchronizationSecRefBasicSSM_Object = MibTableColumn
cpSynchronizationSecRefBasicSSM = _CpSynchronizationSecRefBasicSSM_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 12),
    _CpSynchronizationSecRefBasicSSM_Type()
)
cpSynchronizationSecRefBasicSSM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSynchronizationSecRefBasicSSM.setStatus("current")
_CpSynchronizationSwEvtType_Type = SyncSwEvtType
_CpSynchronizationSwEvtType_Object = MibTableColumn
cpSynchronizationSwEvtType = _CpSynchronizationSwEvtType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 13),
    _CpSynchronizationSwEvtType_Type()
)
cpSynchronizationSwEvtType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    cpSynchronizationSwEvtType.setStatus("current")
_Topology_ObjectIdentity = ObjectIdentity
topology = _Topology_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13)
)
_NetworkNeighborTable_Object = MibTable
networkNeighborTable = _NetworkNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1)
)
if mibBuilder.loadTexts:
    networkNeighborTable.setStatus("current")
_NetworkNeighborEntry_Object = MibTableRow
networkNeighborEntry = _NetworkNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1)
)
networkNeighborEntry.setIndexNames(
    (0, "BTI-7000-MIB", "networkNeighborIdx"),
)
if mibBuilder.loadTexts:
    networkNeighborEntry.setStatus("current")


class _NetworkNeighborIdx_Type(DisplayString):
    """Custom type networkNeighborIdx based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_NetworkNeighborIdx_Type.__name__ = "DisplayString"
_NetworkNeighborIdx_Object = MibTableColumn
networkNeighborIdx = _NetworkNeighborIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 1),
    _NetworkNeighborIdx_Type()
)
networkNeighborIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    networkNeighborIdx.setStatus("current")
_NetworkNeighborIPAddr_Type = IpAddress
_NetworkNeighborIPAddr_Object = MibTableColumn
networkNeighborIPAddr = _NetworkNeighborIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 2),
    _NetworkNeighborIPAddr_Type()
)
networkNeighborIPAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    networkNeighborIPAddr.setStatus("current")
_NetworkNeighborRowStatus_Type = RowStatus
_NetworkNeighborRowStatus_Object = MibTableColumn
networkNeighborRowStatus = _NetworkNeighborRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 3),
    _NetworkNeighborRowStatus_Type()
)
networkNeighborRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    networkNeighborRowStatus.setStatus("current")
_OspfGeneralTable_Object = MibTable
ospfGeneralTable = _OspfGeneralTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2)
)
if mibBuilder.loadTexts:
    ospfGeneralTable.setStatus("current")
_OspfGeneralGroupEntry_Object = MibTableRow
ospfGeneralGroupEntry = _OspfGeneralGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1)
)
ospfGeneralGroupEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ospfIdx"),
)
if mibBuilder.loadTexts:
    ospfGeneralGroupEntry.setStatus("current")


class _OspfIdx_Type(Integer32):
    """Custom type ospfIdx based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_OspfIdx_Type.__name__ = "Integer32"
_OspfIdx_Object = MibTableColumn
ospfIdx = _OspfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 1),
    _OspfIdx_Type()
)
ospfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ospfIdx.setStatus("current")
_OspfRouterId_Type = IpAddress
_OspfRouterId_Object = MibTableColumn
ospfRouterId = _OspfRouterId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 2),
    _OspfRouterId_Type()
)
ospfRouterId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfRouterId.setStatus("current")


class _OspfAdminStat_Type(Integer32):
    """Custom type ospfAdminStat based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_OspfAdminStat_Type.__name__ = "Integer32"
_OspfAdminStat_Object = MibTableColumn
ospfAdminStat = _OspfAdminStat_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 3),
    _OspfAdminStat_Type()
)
ospfAdminStat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfAdminStat.setStatus("current")


class _OspfVersionNumber_Type(Integer32):
    """Custom type ospfVersionNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            2
        )
    )
    namedValues = NamedValues(
        ("version2", 2)
    )


_OspfVersionNumber_Type.__name__ = "Integer32"
_OspfVersionNumber_Object = MibTableColumn
ospfVersionNumber = _OspfVersionNumber_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 4),
    _OspfVersionNumber_Type()
)
ospfVersionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVersionNumber.setStatus("current")
_OspfAreaBdrRtrStatus_Type = TruthValue
_OspfAreaBdrRtrStatus_Object = MibTableColumn
ospfAreaBdrRtrStatus = _OspfAreaBdrRtrStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 5),
    _OspfAreaBdrRtrStatus_Type()
)
ospfAreaBdrRtrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaBdrRtrStatus.setStatus("current")


class _OspfRouteRedist_Type(Integer32):
    """Custom type ospfRouteRedist based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("all", 8),
          ("connected", 3),
          ("defOrig", 5),
          ("defOrigAndConnected", 7),
          ("defOrigAndStatic", 6),
          ("none", 1),
          ("static", 2),
          ("staticAndConnected", 4))
    )


_OspfRouteRedist_Type.__name__ = "Integer32"
_OspfRouteRedist_Object = MibTableColumn
ospfRouteRedist = _OspfRouteRedist_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 6),
    _OspfRouteRedist_Type()
)
ospfRouteRedist.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfRouteRedist.setStatus("current")
_OspfAreaId_Type = IpAddress
_OspfAreaId_Object = MibTableColumn
ospfAreaId = _OspfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 7),
    _OspfAreaId_Type()
)
ospfAreaId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfAreaId.setStatus("current")
_OspfRowStatus_Type = RowStatus
_OspfRowStatus_Object = MibTableColumn
ospfRowStatus = _OspfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 8),
    _OspfRowStatus_Type()
)
ospfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfRowStatus.setStatus("current")
_OspfIfTable_Object = MibTable
ospfIfTable = _OspfIfTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3)
)
if mibBuilder.loadTexts:
    ospfIfTable.setStatus("current")
_OspfIfEntry_Object = MibTableRow
ospfIfEntry = _OspfIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1)
)
ospfIfEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ospfIfSwitchId"),
    (0, "BTI-7000-MIB", "ospfIfShelfIdx"),
    (0, "BTI-7000-MIB", "ospfIfSlotIdx"),
    (0, "BTI-7000-MIB", "ospfIfType"),
    (0, "BTI-7000-MIB", "ospfIfIdx"),
    (0, "BTI-7000-MIB", "ospfIfSubIdx"),
)
if mibBuilder.loadTexts:
    ospfIfEntry.setStatus("current")


class _OspfIfSwitchId_Type(Integer32):
    """Custom type ospfIfSwitchId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_OspfIfSwitchId_Type.__name__ = "Integer32"
_OspfIfSwitchId_Object = MibTableColumn
ospfIfSwitchId = _OspfIfSwitchId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 1),
    _OspfIfSwitchId_Type()
)
ospfIfSwitchId.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ospfIfSwitchId.setStatus("current")


class _OspfIfShelfIdx_Type(Integer32):
    """Custom type ospfIfShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_OspfIfShelfIdx_Type.__name__ = "Integer32"
_OspfIfShelfIdx_Object = MibTableColumn
ospfIfShelfIdx = _OspfIfShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 2),
    _OspfIfShelfIdx_Type()
)
ospfIfShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ospfIfShelfIdx.setStatus("current")


class _OspfIfSlotIdx_Type(Integer32):
    """Custom type ospfIfSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6),
    )


_OspfIfSlotIdx_Type.__name__ = "Integer32"
_OspfIfSlotIdx_Object = MibTableColumn
ospfIfSlotIdx = _OspfIfSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 3),
    _OspfIfSlotIdx_Type()
)
ospfIfSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ospfIfSlotIdx.setStatus("current")


class _OspfIfType_Type(PvxPortType):
    """Custom type ospfIfType based on PvxPortType"""


_OspfIfType_Object = MibTableColumn
ospfIfType = _OspfIfType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 4),
    _OspfIfType_Type()
)
ospfIfType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ospfIfType.setStatus("current")


class _OspfIfIdx_Type(Integer32):
    """Custom type ospfIfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfIfIdx_Type.__name__ = "Integer32"
_OspfIfIdx_Object = MibTableColumn
ospfIfIdx = _OspfIfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 5),
    _OspfIfIdx_Type()
)
ospfIfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ospfIfIdx.setStatus("current")


class _OspfIfSubIdx_Type(Integer32):
    """Custom type ospfIfSubIdx based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfIfSubIdx_Type.__name__ = "Integer32"
_OspfIfSubIdx_Object = MibTableColumn
ospfIfSubIdx = _OspfIfSubIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 6),
    _OspfIfSubIdx_Type()
)
ospfIfSubIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    ospfIfSubIdx.setStatus("current")
_OspfIfAreaId_Type = AreaID
_OspfIfAreaId_Object = MibTableColumn
ospfIfAreaId = _OspfIfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 7),
    _OspfIfAreaId_Type()
)
ospfIfAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfAreaId.setStatus("current")


class _OspfIfAdminStat_Type(Integer32):
    """Custom type ospfIfAdminStat based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_OspfIfAdminStat_Type.__name__ = "Integer32"
_OspfIfAdminStat_Object = MibTableColumn
ospfIfAdminStat = _OspfIfAdminStat_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 8),
    _OspfIfAdminStat_Type()
)
ospfIfAdminStat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfIfAdminStat.setStatus("current")


class _OspfIfRtrPriority_Type(Integer32):
    """Custom type ospfIfRtrPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfIfRtrPriority_Type.__name__ = "Integer32"
_OspfIfRtrPriority_Object = MibTableColumn
ospfIfRtrPriority = _OspfIfRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 9),
    _OspfIfRtrPriority_Type()
)
ospfIfRtrPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfIfRtrPriority.setStatus("current")


class _OspfIfTransitDelay_Type(Integer32):
    """Custom type ospfIfTransitDelay based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_OspfIfTransitDelay_Type.__name__ = "Integer32"
_OspfIfTransitDelay_Object = MibTableColumn
ospfIfTransitDelay = _OspfIfTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 10),
    _OspfIfTransitDelay_Type()
)
ospfIfTransitDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfIfTransitDelay.setStatus("current")
if mibBuilder.loadTexts:
    ospfIfTransitDelay.setUnits("seconds")


class _OspfIfRetransInterval_Type(Integer32):
    """Custom type ospfIfRetransInterval based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_OspfIfRetransInterval_Type.__name__ = "Integer32"
_OspfIfRetransInterval_Object = MibTableColumn
ospfIfRetransInterval = _OspfIfRetransInterval_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 11),
    _OspfIfRetransInterval_Type()
)
ospfIfRetransInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfIfRetransInterval.setStatus("current")
if mibBuilder.loadTexts:
    ospfIfRetransInterval.setUnits("seconds")


class _OspfIfHelloInterval_Type(Integer32):
    """Custom type ospfIfHelloInterval based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfIfHelloInterval_Type.__name__ = "Integer32"
_OspfIfHelloInterval_Object = MibTableColumn
ospfIfHelloInterval = _OspfIfHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 12),
    _OspfIfHelloInterval_Type()
)
ospfIfHelloInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfIfHelloInterval.setStatus("current")
if mibBuilder.loadTexts:
    ospfIfHelloInterval.setUnits("seconds")


class _OspfIfRtrDeadInterval_Type(Integer32):
    """Custom type ospfIfRtrDeadInterval based on Integer32"""
    defaultValue = 40

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_OspfIfRtrDeadInterval_Type.__name__ = "Integer32"
_OspfIfRtrDeadInterval_Object = MibTableColumn
ospfIfRtrDeadInterval = _OspfIfRtrDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 13),
    _OspfIfRtrDeadInterval_Type()
)
ospfIfRtrDeadInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfIfRtrDeadInterval.setStatus("current")
if mibBuilder.loadTexts:
    ospfIfRtrDeadInterval.setUnits("seconds")


class _OspfIfMetricValue_Type(Integer32):
    """Custom type ospfIfMetricValue based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_OspfIfMetricValue_Type.__name__ = "Integer32"
_OspfIfMetricValue_Object = MibTableColumn
ospfIfMetricValue = _OspfIfMetricValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 14),
    _OspfIfMetricValue_Type()
)
ospfIfMetricValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfIfMetricValue.setStatus("current")
_OspfIfStatus_Type = RowStatus
_OspfIfStatus_Object = MibTableColumn
ospfIfStatus = _OspfIfStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 15),
    _OspfIfStatus_Type()
)
ospfIfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfIfStatus.setStatus("current")
_OspfLsdbTable_Object = MibTable
ospfLsdbTable = _OspfLsdbTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4)
)
if mibBuilder.loadTexts:
    ospfLsdbTable.setStatus("current")
_OspfLsdbEntry_Object = MibTableRow
ospfLsdbEntry = _OspfLsdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1)
)
ospfLsdbEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ospfLsdbAreaId"),
    (0, "BTI-7000-MIB", "ospfLsdbType"),
    (0, "BTI-7000-MIB", "ospfLsdbLsid"),
    (0, "BTI-7000-MIB", "ospfLsdbRouterId"),
)
if mibBuilder.loadTexts:
    ospfLsdbEntry.setStatus("current")
_OspfLsdbAreaId_Type = AreaID
_OspfLsdbAreaId_Object = MibTableColumn
ospfLsdbAreaId = _OspfLsdbAreaId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 1),
    _OspfLsdbAreaId_Type()
)
ospfLsdbAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbAreaId.setStatus("current")


class _OspfLsdbType_Type(Integer32):
    """Custom type ospfLsdbType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              10)
        )
    )
    namedValues = NamedValues(
        *(("areaOpaqueLink", 10),
          ("asExternalLink", 5),
          ("asSummaryLink", 4),
          ("multicastLink", 6),
          ("networkLink", 2),
          ("nssaExternalLink", 7),
          ("routerLink", 1),
          ("summaryLink", 3))
    )


_OspfLsdbType_Type.__name__ = "Integer32"
_OspfLsdbType_Object = MibTableColumn
ospfLsdbType = _OspfLsdbType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 2),
    _OspfLsdbType_Type()
)
ospfLsdbType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbType.setStatus("current")
_OspfLsdbLsid_Type = IpAddress
_OspfLsdbLsid_Object = MibTableColumn
ospfLsdbLsid = _OspfLsdbLsid_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 3),
    _OspfLsdbLsid_Type()
)
ospfLsdbLsid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbLsid.setStatus("current")
_OspfLsdbRouterId_Type = IpAddress
_OspfLsdbRouterId_Object = MibTableColumn
ospfLsdbRouterId = _OspfLsdbRouterId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 4),
    _OspfLsdbRouterId_Type()
)
ospfLsdbRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbRouterId.setStatus("current")
_OspfLsdbSequence_Type = Integer32
_OspfLsdbSequence_Object = MibTableColumn
ospfLsdbSequence = _OspfLsdbSequence_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 5),
    _OspfLsdbSequence_Type()
)
ospfLsdbSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbSequence.setStatus("current")
_OspfLsdbAge_Type = Integer32
_OspfLsdbAge_Object = MibTableColumn
ospfLsdbAge = _OspfLsdbAge_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 6),
    _OspfLsdbAge_Type()
)
ospfLsdbAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbAge.setStatus("current")
if mibBuilder.loadTexts:
    ospfLsdbAge.setUnits("seconds")
_OspfLsdbChecksum_Type = Integer32
_OspfLsdbChecksum_Object = MibTableColumn
ospfLsdbChecksum = _OspfLsdbChecksum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 7),
    _OspfLsdbChecksum_Type()
)
ospfLsdbChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbChecksum.setStatus("current")
_OspfNbrTable_Object = MibTable
ospfNbrTable = _OspfNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5)
)
if mibBuilder.loadTexts:
    ospfNbrTable.setStatus("current")
_OspfNbrEntry_Object = MibTableRow
ospfNbrEntry = _OspfNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1)
)
ospfNbrEntry.setIndexNames(
    (0, "BTI-7000-MIB", "ospfNbrIpAddr"),
    (0, "BTI-7000-MIB", "ospfNbrAddressLessIndex"),
)
if mibBuilder.loadTexts:
    ospfNbrEntry.setStatus("current")
_OspfNbrIpAddr_Type = IpAddress
_OspfNbrIpAddr_Object = MibTableColumn
ospfNbrIpAddr = _OspfNbrIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 1),
    _OspfNbrIpAddr_Type()
)
ospfNbrIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrIpAddr.setStatus("current")


class _OspfNbrAddressLessIndex_Type(Integer32):
    """Custom type ospfNbrAddressLessIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_OspfNbrAddressLessIndex_Type.__name__ = "Integer32"
_OspfNbrAddressLessIndex_Object = MibTableColumn
ospfNbrAddressLessIndex = _OspfNbrAddressLessIndex_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 2),
    _OspfNbrAddressLessIndex_Type()
)
ospfNbrAddressLessIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrAddressLessIndex.setStatus("current")
_OspfNbrRtrId_Type = IpAddress
_OspfNbrRtrId_Object = MibTableColumn
ospfNbrRtrId = _OspfNbrRtrId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 3),
    _OspfNbrRtrId_Type()
)
ospfNbrRtrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrRtrId.setStatus("current")
_OspfNbrOptions_Type = Integer32
_OspfNbrOptions_Object = MibTableColumn
ospfNbrOptions = _OspfNbrOptions_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 4),
    _OspfNbrOptions_Type()
)
ospfNbrOptions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrOptions.setStatus("current")
_OspfNbrPriority_Type = DesignatedRouterPriority
_OspfNbrPriority_Object = MibTableColumn
ospfNbrPriority = _OspfNbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 5),
    _OspfNbrPriority_Type()
)
ospfNbrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrPriority.setStatus("current")


class _OspfNbrState_Type(Integer32):
    """Custom type ospfNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("attempt", 2),
          ("down", 1),
          ("exchange", 6),
          ("exchangeStart", 5),
          ("full", 8),
          ("init", 3),
          ("loading", 7),
          ("twoWay", 4))
    )


_OspfNbrState_Type.__name__ = "Integer32"
_OspfNbrState_Object = MibTableColumn
ospfNbrState = _OspfNbrState_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 6),
    _OspfNbrState_Type()
)
ospfNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrState.setStatus("current")
_PvxObjects_ObjectIdentity = ObjectIdentity
pvxObjects = _PvxObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14)
)
_PvxBridge_ObjectIdentity = ObjectIdentity
pvxBridge = _PvxBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1)
)
_PvxL2IntfTable_Object = MibTable
pvxL2IntfTable = _PvxL2IntfTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3)
)
if mibBuilder.loadTexts:
    pvxL2IntfTable.setStatus("current")
_PvxL2IntfEntry_Object = MibTableRow
pvxL2IntfEntry = _PvxL2IntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1)
)
pvxL2IntfEntry.setIndexNames(
    (0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"),
    (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"),
)
if mibBuilder.loadTexts:
    pvxL2IntfEntry.setStatus("current")


class _PvxL2IntfSwitchIdx_Type(Integer32):
    """Custom type pvxL2IntfSwitchIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_PvxL2IntfSwitchIdx_Type.__name__ = "Integer32"
_PvxL2IntfSwitchIdx_Object = MibTableColumn
pvxL2IntfSwitchIdx = _PvxL2IntfSwitchIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 1),
    _PvxL2IntfSwitchIdx_Type()
)
pvxL2IntfSwitchIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pvxL2IntfSwitchIdx.setStatus("current")


class _PvxL2IntfShelfIdx_Type(Integer32):
    """Custom type pvxL2IntfShelfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 1),
        ValueRangeConstraint(11, 11),
        ValueRangeConstraint(21, 21),
        ValueRangeConstraint(31, 31),
    )


_PvxL2IntfShelfIdx_Type.__name__ = "Integer32"
_PvxL2IntfShelfIdx_Object = MibTableColumn
pvxL2IntfShelfIdx = _PvxL2IntfShelfIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 2),
    _PvxL2IntfShelfIdx_Type()
)
pvxL2IntfShelfIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pvxL2IntfShelfIdx.setStatus("current")


class _PvxL2IntfSlotIdx_Type(Integer32):
    """Custom type pvxL2IntfSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_PvxL2IntfSlotIdx_Type.__name__ = "Integer32"
_PvxL2IntfSlotIdx_Object = MibTableColumn
pvxL2IntfSlotIdx = _PvxL2IntfSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 3),
    _PvxL2IntfSlotIdx_Type()
)
pvxL2IntfSlotIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pvxL2IntfSlotIdx.setStatus("current")
_PvxL2IntfPortTypeIdx_Type = PvxPortType
_PvxL2IntfPortTypeIdx_Object = MibTableColumn
pvxL2IntfPortTypeIdx = _PvxL2IntfPortTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 4),
    _PvxL2IntfPortTypeIdx_Type()
)
pvxL2IntfPortTypeIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pvxL2IntfPortTypeIdx.setStatus("current")


class _PvxL2IntfPortIdx_Type(Integer32):
    """Custom type pvxL2IntfPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_PvxL2IntfPortIdx_Type.__name__ = "Integer32"
_PvxL2IntfPortIdx_Object = MibTableColumn
pvxL2IntfPortIdx = _PvxL2IntfPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 5),
    _PvxL2IntfPortIdx_Type()
)
pvxL2IntfPortIdx.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    pvxL2IntfPortIdx.setStatus("current")


class _PvxL2IntfAdminStatus_Type(Integer32):
    """Custom type pvxL2IntfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_PvxL2IntfAdminStatus_Type.__name__ = "Integer32"
_PvxL2IntfAdminStatus_Object = MibTableColumn
pvxL2IntfAdminStatus = _PvxL2IntfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 6),
    _PvxL2IntfAdminStatus_Type()
)
pvxL2IntfAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfAdminStatus.setStatus("current")
_PvxL2IntfOperStatus_Type = OperStatus
_PvxL2IntfOperStatus_Object = MibTableColumn
pvxL2IntfOperStatus = _PvxL2IntfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 7),
    _PvxL2IntfOperStatus_Type()
)
pvxL2IntfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IntfOperStatus.setStatus("current")


class _PvxL2IntfType_Type(Integer32):
    """Custom type pvxL2IntfType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cbp", 4),
          ("cep", 2),
          ("cnpPortbased", 3),
          ("pnp", 1))
    )


_PvxL2IntfType_Type.__name__ = "Integer32"
_PvxL2IntfType_Object = MibTableColumn
pvxL2IntfType = _PvxL2IntfType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 8),
    _PvxL2IntfType_Type()
)
pvxL2IntfType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfType.setStatus("current")


class _PvxL2IntfSTpid_Type(Integer32):
    """Custom type pvxL2IntfSTpid based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nni88a8", 2),
          ("nni9100", 3),
          ("uni8100", 1))
    )


_PvxL2IntfSTpid_Type.__name__ = "Integer32"
_PvxL2IntfSTpid_Object = MibTableColumn
pvxL2IntfSTpid = _PvxL2IntfSTpid_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 9),
    _PvxL2IntfSTpid_Type()
)
pvxL2IntfSTpid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfSTpid.setStatus("current")


class _PvxL2IntfPvid_Type(Integer32):
    """Custom type pvxL2IntfPvid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4090),
    )


_PvxL2IntfPvid_Type.__name__ = "Integer32"
_PvxL2IntfPvid_Object = MibTableColumn
pvxL2IntfPvid = _PvxL2IntfPvid_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 10),
    _PvxL2IntfPvid_Type()
)
pvxL2IntfPvid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfPvid.setStatus("current")


class _PvxL2IntfDefaultPriority_Type(Integer32):
    """Custom type pvxL2IntfDefaultPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_PvxL2IntfDefaultPriority_Type.__name__ = "Integer32"
_PvxL2IntfDefaultPriority_Object = MibTableColumn
pvxL2IntfDefaultPriority = _PvxL2IntfDefaultPriority_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 11),
    _PvxL2IntfDefaultPriority_Type()
)
pvxL2IntfDefaultPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfDefaultPriority.setStatus("current")


class _PvxL2IntfAllowedFrames_Type(Integer32):
    """Custom type pvxL2IntfAllowedFrames based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("priorityTagged", 3),
          ("vlanTagged", 2))
    )


_PvxL2IntfAllowedFrames_Type.__name__ = "Integer32"
_PvxL2IntfAllowedFrames_Object = MibTableColumn
pvxL2IntfAllowedFrames = _PvxL2IntfAllowedFrames_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 12),
    _PvxL2IntfAllowedFrames_Type()
)
pvxL2IntfAllowedFrames.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfAllowedFrames.setStatus("current")
_PvxL2IntfIngressFiltering_Type = TruthValue
_PvxL2IntfIngressFiltering_Object = MibTableColumn
pvxL2IntfIngressFiltering = _PvxL2IntfIngressFiltering_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 13),
    _PvxL2IntfIngressFiltering_Type()
)
pvxL2IntfIngressFiltering.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfIngressFiltering.setStatus("deprecated")
_PvxL2IntfCtrlFrmProfileId_Type = Integer32
_PvxL2IntfCtrlFrmProfileId_Object = MibTableColumn
pvxL2IntfCtrlFrmProfileId = _PvxL2IntfCtrlFrmProfileId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 14),
    _PvxL2IntfCtrlFrmProfileId_Type()
)
pvxL2IntfCtrlFrmProfileId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfCtrlFrmProfileId.setStatus("deprecated")
_PvxL2IntfMACAddr_Type = MacAddress
_PvxL2IntfMACAddr_Object = MibTableColumn
pvxL2IntfMACAddr = _PvxL2IntfMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 15),
    _PvxL2IntfMACAddr_Type()
)
pvxL2IntfMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IntfMACAddr.setStatus("current")
_PvxL2IntfRateLimit_Type = Integer32
_PvxL2IntfRateLimit_Object = MibTableColumn
pvxL2IntfRateLimit = _PvxL2IntfRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 16),
    _PvxL2IntfRateLimit_Type()
)
pvxL2IntfRateLimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfRateLimit.setStatus("current")
_PvxL2IntfCoSProfileId_Type = Integer32
_PvxL2IntfCoSProfileId_Object = MibTableColumn
pvxL2IntfCoSProfileId = _PvxL2IntfCoSProfileId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 17),
    _PvxL2IntfCoSProfileId_Type()
)
pvxL2IntfCoSProfileId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfCoSProfileId.setStatus("current")


class _PvxL2IntfIsUNI_Type(Integer32):
    """Custom type pvxL2IntfIsUNI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("neither", 1),
          ("nni", 3),
          ("uni", 2))
    )


_PvxL2IntfIsUNI_Type.__name__ = "Integer32"
_PvxL2IntfIsUNI_Object = MibTableColumn
pvxL2IntfIsUNI = _PvxL2IntfIsUNI_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 18),
    _PvxL2IntfIsUNI_Type()
)
pvxL2IntfIsUNI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvxL2IntfIsUNI.setStatus("current")


class _PvxL2IntfSchedProfName_Type(DisplayString):
    """Custom type pvxL2IntfSchedProfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PvxL2IntfSchedProfName_Type.__name__ = "DisplayString"
_PvxL2IntfSchedProfName_Object = MibTableColumn
pvxL2IntfSchedProfName = _PvxL2IntfSchedProfName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 19),
    _PvxL2IntfSchedProfName_Type()
)
pvxL2IntfSchedProfName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfSchedProfName.setStatus("current")


class _PvxL2IntfPriTCMapProfName_Type(DisplayString):
    """Custom type pvxL2IntfPriTCMapProfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PvxL2IntfPriTCMapProfName_Type.__name__ = "DisplayString"
_PvxL2IntfPriTCMapProfName_Object = MibTableColumn
pvxL2IntfPriTCMapProfName = _PvxL2IntfPriTCMapProfName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 20),
    _PvxL2IntfPriTCMapProfName_Type()
)
pvxL2IntfPriTCMapProfName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfPriTCMapProfName.setStatus("current")


class _PvxL2IntfPCPCodingProfName_Type(DisplayString):
    """Custom type pvxL2IntfPCPCodingProfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PvxL2IntfPCPCodingProfName_Type.__name__ = "DisplayString"
_PvxL2IntfPCPCodingProfName_Object = MibTableColumn
pvxL2IntfPCPCodingProfName = _PvxL2IntfPCPCodingProfName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 21),
    _PvxL2IntfPCPCodingProfName_Type()
)
pvxL2IntfPCPCodingProfName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfPCPCodingProfName.setStatus("current")


class _PvxL2IntfDscpPHBProfName_Type(DisplayString):
    """Custom type pvxL2IntfDscpPHBProfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PvxL2IntfDscpPHBProfName_Type.__name__ = "DisplayString"
_PvxL2IntfDscpPHBProfName_Object = MibTableColumn
pvxL2IntfDscpPHBProfName = _PvxL2IntfDscpPHBProfName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 22),
    _PvxL2IntfDscpPHBProfName_Type()
)
pvxL2IntfDscpPHBProfName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfDscpPHBProfName.setStatus("current")


class _PvxL2IntfCtrlFrmProfileName_Type(DisplayString):
    """Custom type pvxL2IntfCtrlFrmProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PvxL2IntfCtrlFrmProfileName_Type.__name__ = "DisplayString"
_PvxL2IntfCtrlFrmProfileName_Object = MibTableColumn
pvxL2IntfCtrlFrmProfileName = _PvxL2IntfCtrlFrmProfileName_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 23),
    _PvxL2IntfCtrlFrmProfileName_Type()
)
pvxL2IntfCtrlFrmProfileName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfCtrlFrmProfileName.setStatus("current")
_PvxL2IntfUseDei_Type = TruthValue
_PvxL2IntfUseDei_Object = MibTableColumn
pvxL2IntfUseDei = _PvxL2IntfUseDei_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 24),
    _PvxL2IntfUseDei_Type()
)
pvxL2IntfUseDei.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfUseDei.setStatus("current")


class _PvxL2IntfIngressBandwidthProfile_Type(DisplayString):
    """Custom type pvxL2IntfIngressBandwidthProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PvxL2IntfIngressBandwidthProfile_Type.__name__ = "DisplayString"
_PvxL2IntfIngressBandwidthProfile_Object = MibTableColumn
pvxL2IntfIngressBandwidthProfile = _PvxL2IntfIngressBandwidthProfile_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 25),
    _PvxL2IntfIngressBandwidthProfile_Type()
)
pvxL2IntfIngressBandwidthProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfIngressBandwidthProfile.setStatus("current")


class _PvxL2IntfEgressBandwidthProfile_Type(DisplayString):
    """Custom type pvxL2IntfEgressBandwidthProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PvxL2IntfEgressBandwidthProfile_Type.__name__ = "DisplayString"
_PvxL2IntfEgressBandwidthProfile_Object = MibTableColumn
pvxL2IntfEgressBandwidthProfile = _PvxL2IntfEgressBandwidthProfile_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 26),
    _PvxL2IntfEgressBandwidthProfile_Type()
)
pvxL2IntfEgressBandwidthProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfEgressBandwidthProfile.setStatus("current")
_PvxL2IntfTrustIncomingPCP_Type = TruthValue
_PvxL2IntfTrustIncomingPCP_Object = MibTableColumn
pvxL2IntfTrustIncomingPCP = _PvxL2IntfTrustIncomingPCP_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 27),
    _PvxL2IntfTrustIncomingPCP_Type()
)
pvxL2IntfTrustIncomingPCP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfTrustIncomingPCP.setStatus("current")
_PvxL2IntfTrustIncomingDscp_Type = TruthValue
_PvxL2IntfTrustIncomingDscp_Object = MibTableColumn
pvxL2IntfTrustIncomingDscp = _PvxL2IntfTrustIncomingDscp_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 28),
    _PvxL2IntfTrustIncomingDscp_Type()
)
pvxL2IntfTrustIncomingDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfTrustIncomingDscp.setStatus("current")


class _PvxL2IntfBcastLimit_Type(Integer32):
    """Custom type pvxL2IntfBcastLimit based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 20),
        ValueRangeConstraint(40, 40),
        ValueRangeConstraint(60, 60),
        ValueRangeConstraint(100, 100),
    )


_PvxL2IntfBcastLimit_Type.__name__ = "Integer32"
_PvxL2IntfBcastLimit_Object = MibTableColumn
pvxL2IntfBcastLimit = _PvxL2IntfBcastLimit_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 29),
    _PvxL2IntfBcastLimit_Type()
)
pvxL2IntfBcastLimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfBcastLimit.setStatus("current")


class _PvxL2IntfMcastLimit_Type(Integer32):
    """Custom type pvxL2IntfMcastLimit based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 20),
        ValueRangeConstraint(40, 40),
        ValueRangeConstraint(60, 60),
        ValueRangeConstraint(100, 100),
    )


_PvxL2IntfMcastLimit_Type.__name__ = "Integer32"
_PvxL2IntfMcastLimit_Object = MibTableColumn
pvxL2IntfMcastLimit = _PvxL2IntfMcastLimit_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 30),
    _PvxL2IntfMcastLimit_Type()
)
pvxL2IntfMcastLimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfMcastLimit.setStatus("current")


class _PvxL2IntfDlfLimit_Type(Integer32):
    """Custom type pvxL2IntfDlfLimit based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 20),
        ValueRangeConstraint(40, 40),
        ValueRangeConstraint(60, 60),
        ValueRangeConstraint(100, 100),
    )


_PvxL2IntfDlfLimit_Type.__name__ = "Integer32"
_PvxL2IntfDlfLimit_Object = MibTableColumn
pvxL2IntfDlfLimit = _PvxL2IntfDlfLimit_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 31),
    _PvxL2IntfDlfLimit_Type()
)
pvxL2IntfDlfLimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfDlfLimit.setStatus("current")
_PvxL2IntfRowStatus_Type = RowStatus
_PvxL2IntfRowStatus_Object = MibTableColumn
pvxL2IntfRowStatus = _PvxL2IntfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 100),
    _PvxL2IntfRowStatus_Type()
)
pvxL2IntfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvxL2IntfRowStatus.setStatus("current")
_PvxNotificationObjects_ObjectIdentity = ObjectIdentity
pvxNotificationObjects = _PvxNotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4)
)
_MstpNotificationObjects_ObjectIdentity = ObjectIdentity
mstpNotificationObjects = _MstpNotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1)
)
_Miscellaneous_ObjectIdentity = ObjectIdentity
miscellaneous = _Miscellaneous_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15)
)
_SetErrorInfo_ObjectIdentity = ObjectIdentity
setErrorInfo = _SetErrorInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1)
)
_SetErrorCode_Type = Integer32
_SetErrorCode_Object = MibScalar
setErrorCode = _SetErrorCode_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1, 1),
    _SetErrorCode_Type()
)
setErrorCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    setErrorCode.setStatus("current")
_SetErrorDesc_Type = DisplayString
_SetErrorDesc_Object = MibScalar
setErrorDesc = _SetErrorDesc_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1, 2),
    _SetErrorDesc_Type()
)
setErrorDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    setErrorDesc.setStatus("current")
_OpticalLayer_ObjectIdentity = ObjectIdentity
opticalLayer = _OpticalLayer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16)
)
_Notifications_ObjectIdentity = ObjectIdentity
notifications = _Notifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2)
)
_EventNotifications_ObjectIdentity = ObjectIdentity
eventNotifications = _EventNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1)
)
_EvtNotificationObjects_ObjectIdentity = ObjectIdentity
evtNotificationObjects = _EvtNotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1)
)
_EvtDateAndTime_Type = DateAndTime
_EvtDateAndTime_Object = MibScalar
evtDateAndTime = _EvtDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 1),
    _EvtDateAndTime_Type()
)
evtDateAndTime.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    evtDateAndTime.setStatus("current")
_TcaIntervalType_Type = PMIntervalType
_TcaIntervalType_Object = MibScalar
tcaIntervalType = _TcaIntervalType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 2),
    _TcaIntervalType_Type()
)
tcaIntervalType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    tcaIntervalType.setStatus("current")
_TcaDateAndTime_Type = DateAndTime
_TcaDateAndTime_Object = MibScalar
tcaDateAndTime = _TcaDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 3),
    _TcaDateAndTime_Type()
)
tcaDateAndTime.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    tcaDateAndTime.setStatus("current")
_TcaMontype_Type = PMMontype
_TcaMontype_Object = MibScalar
tcaMontype = _TcaMontype_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 4),
    _TcaMontype_Type()
)
tcaMontype.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    tcaMontype.setStatus("current")
_TcaValue_Type = Unsigned32
_TcaValue_Object = MibScalar
tcaValue = _TcaValue_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 5),
    _TcaValue_Type()
)
tcaValue.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    tcaValue.setStatus("current")
_TcaThreshold_Type = Unsigned32
_TcaThreshold_Object = MibScalar
tcaThreshold = _TcaThreshold_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 6),
    _TcaThreshold_Type()
)
tcaThreshold.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    tcaThreshold.setStatus("current")
_EvtDescription_Type = DisplayString
_EvtDescription_Object = MibScalar
evtDescription = _EvtDescription_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 7),
    _EvtDescription_Type()
)
evtDescription.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    evtDescription.setStatus("current")
_EvtObjectType_Type = NotifObjectType
_EvtObjectType_Object = MibScalar
evtObjectType = _EvtObjectType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 8),
    _EvtObjectType_Type()
)
evtObjectType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    evtObjectType.setStatus("current")
_EvtCodeType_Type = NotifCodeType
_EvtCodeType_Object = MibScalar
evtCodeType = _EvtCodeType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 9),
    _EvtCodeType_Type()
)
evtCodeType.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    evtCodeType.setStatus("current")
_NeEvtNotifications_ObjectIdentity = ObjectIdentity
neEvtNotifications = _NeEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 2)
)
_ShelfInvEvtNotifications_ObjectIdentity = ObjectIdentity
shelfInvEvtNotifications = _ShelfInvEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3)
)
_SlotInvEvtNotifications_ObjectIdentity = ObjectIdentity
slotInvEvtNotifications = _SlotInvEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4)
)
_ShelfEvtNotifications_ObjectIdentity = ObjectIdentity
shelfEvtNotifications = _ShelfEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 5)
)
_CpEvtNotifications_ObjectIdentity = ObjectIdentity
cpEvtNotifications = _CpEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6)
)
_OaEvtNotifications_ObjectIdentity = ObjectIdentity
oaEvtNotifications = _OaEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 7)
)
_DataCommsEvtNotifications_ObjectIdentity = ObjectIdentity
dataCommsEvtNotifications = _DataCommsEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8)
)
_PluggableInvEvtNotifications_ObjectIdentity = ObjectIdentity
pluggableInvEvtNotifications = _PluggableInvEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9)
)
_XcvrEvtNotifications_ObjectIdentity = ObjectIdentity
xcvrEvtNotifications = _XcvrEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10)
)
_AdminEvtNotifications_ObjectIdentity = ObjectIdentity
adminEvtNotifications = _AdminEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 11)
)
_AmdEvtNotifications_ObjectIdentity = ObjectIdentity
amdEvtNotifications = _AmdEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 12)
)
_OcnEvtNotifications_ObjectIdentity = ObjectIdentity
ocnEvtNotifications = _OcnEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13)
)
_StsnEvtNotifications_ObjectIdentity = ObjectIdentity
stsnEvtNotifications = _StsnEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14)
)
_StmnEvtNotifications_ObjectIdentity = ObjectIdentity
stmnEvtNotifications = _StmnEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15)
)
_VcnEvtNotifications_ObjectIdentity = ObjectIdentity
vcnEvtNotifications = _VcnEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16)
)
_GeEvtNotifications_ObjectIdentity = ObjectIdentity
geEvtNotifications = _GeEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17)
)
_FcEvtNotifications_ObjectIdentity = ObjectIdentity
fcEvtNotifications = _FcEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18)
)
_EthPortEvtNotifications_ObjectIdentity = ObjectIdentity
ethPortEvtNotifications = _EthPortEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21)
)
_PvxL2EvtNotifications_ObjectIdentity = ObjectIdentity
pvxL2EvtNotifications = _PvxL2EvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 22)
)
_MstpEvtNotifications_ObjectIdentity = ObjectIdentity
mstpEvtNotifications = _MstpEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23)
)
_BriEvtNotifications_ObjectIdentity = ObjectIdentity
briEvtNotifications = _BriEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 24)
)
_CpSynchronizationEvtNotifications_ObjectIdentity = ObjectIdentity
cpSynchronizationEvtNotifications = _CpSynchronizationEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 25)
)
_PvxESrvcBWPrflEvtNotifications_ObjectIdentity = ObjectIdentity
pvxESrvcBWPrflEvtNotifications = _PvxESrvcBWPrflEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 26)
)
_PvxESrvcEvtNotifications_ObjectIdentity = ObjectIdentity
pvxESrvcEvtNotifications = _PvxESrvcEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 27)
)
_PvxERPSSrvcNNIEvtNotifications_ObjectIdentity = ObjectIdentity
pvxERPSSrvcNNIEvtNotifications = _PvxERPSSrvcNNIEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 28)
)
_PvxERPSSrvcEvtNotifications_ObjectIdentity = ObjectIdentity
pvxERPSSrvcEvtNotifications = _PvxERPSSrvcEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29)
)
_PvxSlaMsmtEvtNotifications_ObjectIdentity = ObjectIdentity
pvxSlaMsmtEvtNotifications = _PvxSlaMsmtEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 30)
)
_NtpcEvtNotifications_ObjectIdentity = ObjectIdentity
ntpcEvtNotifications = _NtpcEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31)
)
_PvxSUniEvtNotifications_ObjectIdentity = ObjectIdentity
pvxSUniEvtNotifications = _PvxSUniEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 32)
)
_OlEvtNotifications_ObjectIdentity = ObjectIdentity
olEvtNotifications = _OlEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33)
)
_PvxLldpEvtNotifications_ObjectIdentity = ObjectIdentity
pvxLldpEvtNotifications = _PvxLldpEvtNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 34)
)
_ConditionNotifications_ObjectIdentity = ObjectIdentity
conditionNotifications = _ConditionNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2)
)
_NeCondNotifications_ObjectIdentity = ObjectIdentity
neCondNotifications = _NeCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 1)
)
_ShelfInvCondNotifications_ObjectIdentity = ObjectIdentity
shelfInvCondNotifications = _ShelfInvCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2)
)
_SlotInvCondNotifications_ObjectIdentity = ObjectIdentity
slotInvCondNotifications = _SlotInvCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3)
)
_ShelfCondNotifications_ObjectIdentity = ObjectIdentity
shelfCondNotifications = _ShelfCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4)
)
_CpCondNotifications_ObjectIdentity = ObjectIdentity
cpCondNotifications = _CpCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5)
)
_OaCondNotifications_ObjectIdentity = ObjectIdentity
oaCondNotifications = _OaCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6)
)
_DataCommsCondNotifications_ObjectIdentity = ObjectIdentity
dataCommsCondNotifications = _DataCommsCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7)
)
_PluggableInvCondNotifications_ObjectIdentity = ObjectIdentity
pluggableInvCondNotifications = _PluggableInvCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8)
)
_XcvrCondNotifications_ObjectIdentity = ObjectIdentity
xcvrCondNotifications = _XcvrCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9)
)
_AdminCondNotifications_ObjectIdentity = ObjectIdentity
adminCondNotifications = _AdminCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10)
)
_AmdCondNotifications_ObjectIdentity = ObjectIdentity
amdCondNotifications = _AmdCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11)
)
_OcnCondNotifications_ObjectIdentity = ObjectIdentity
ocnCondNotifications = _OcnCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12)
)
_StsnCondNotifications_ObjectIdentity = ObjectIdentity
stsnCondNotifications = _StsnCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13)
)
_StmnCondNotifications_ObjectIdentity = ObjectIdentity
stmnCondNotifications = _StmnCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14)
)
_VcnCondNotifications_ObjectIdentity = ObjectIdentity
vcnCondNotifications = _VcnCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15)
)
_GeCondNotifications_ObjectIdentity = ObjectIdentity
geCondNotifications = _GeCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16)
)
_FcCondNotifications_ObjectIdentity = ObjectIdentity
fcCondNotifications = _FcCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17)
)
_EthPortCondNotifications_ObjectIdentity = ObjectIdentity
ethPortCondNotifications = _EthPortCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20)
)
_PvxL2PortCondNotifications_ObjectIdentity = ObjectIdentity
pvxL2PortCondNotifications = _PvxL2PortCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21)
)
_MstpCondNotifications_ObjectIdentity = ObjectIdentity
mstpCondNotifications = _MstpCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 22)
)
_LagCondNotifications_ObjectIdentity = ObjectIdentity
lagCondNotifications = _LagCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 23)
)
_OdunCondNotifications_ObjectIdentity = ObjectIdentity
odunCondNotifications = _OdunCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24)
)
_BriCondNotifications_ObjectIdentity = ObjectIdentity
briCondNotifications = _BriCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25)
)
_NtpcCondNotifications_ObjectIdentity = ObjectIdentity
ntpcCondNotifications = _NtpcCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26)
)
_EnvCondNotifications_ObjectIdentity = ObjectIdentity
envCondNotifications = _EnvCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27)
)
_OlCondNotifications_ObjectIdentity = ObjectIdentity
olCondNotifications = _OlCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28)
)
_ErpsCondNotifications_ObjectIdentity = ObjectIdentity
erpsCondNotifications = _ErpsCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29)
)
_SwMemberCondNotifications_ObjectIdentity = ObjectIdentity
swMemberCondNotifications = _SwMemberCondNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 30)
)
_DbChangeNotifications_ObjectIdentity = ObjectIdentity
dbChangeNotifications = _DbChangeNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3)
)
_DbChangeNotificationsObjects_ObjectIdentity = ObjectIdentity
dbChangeNotificationsObjects = _DbChangeNotificationsObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1)
)
_DbChangeDateAndTime_Type = DateAndTime
_DbChangeDateAndTime_Object = MibScalar
dbChangeDateAndTime = _DbChangeDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 1),
    _DbChangeDateAndTime_Type()
)
dbChangeDateAndTime.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    dbChangeDateAndTime.setStatus("current")
_DbChangeSeqNum_Type = Unsigned32
_DbChangeSeqNum_Object = MibScalar
dbChangeSeqNum = _DbChangeSeqNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 2),
    _DbChangeSeqNum_Type()
)
dbChangeSeqNum.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    dbChangeSeqNum.setStatus("current")
_DbChangeOID_Type = ObjectIdentifier
_DbChangeOID_Object = MibScalar
dbChangeOID = _DbChangeOID_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 3),
    _DbChangeOID_Type()
)
dbChangeOID.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    dbChangeOID.setStatus("current")
_NotificationObjects_ObjectIdentity = ObjectIdentity
notificationObjects = _NotificationObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 4)
)
_TrapSeqNum_Type = Unsigned32
_TrapSeqNum_Object = MibScalar
trapSeqNum = _TrapSeqNum_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 4, 1),
    _TrapSeqNum_Type()
)
trapSeqNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapSeqNum.setStatus("current")
_NotificationControl_ObjectIdentity = ObjectIdentity
notificationControl = _NotificationControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5)
)
_CondNotifCtrl_ObjectIdentity = ObjectIdentity
condNotifCtrl = _CondNotifCtrl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1)
)
_CondNotifCtrlTable_Object = MibTable
condNotifCtrlTable = _CondNotifCtrlTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1)
)
if mibBuilder.loadTexts:
    condNotifCtrlTable.setStatus("current")
_CondNotifCtrlEntry_Object = MibTableRow
condNotifCtrlEntry = _CondNotifCtrlEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1)
)
condNotifCtrlEntry.setIndexNames(
    (0, "BTI-7000-MIB", "condNotifObjId"),
)
if mibBuilder.loadTexts:
    condNotifCtrlEntry.setStatus("current")
_CondNotifObjId_Type = ObjectIdentifier
_CondNotifObjId_Object = MibTableColumn
condNotifObjId = _CondNotifObjId_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 1),
    _CondNotifObjId_Type()
)
condNotifObjId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    condNotifObjId.setStatus("current")
_CondNotifSeverity_Type = CondSeverity
_CondNotifSeverity_Object = MibTableColumn
condNotifSeverity = _CondNotifSeverity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 2),
    _CondNotifSeverity_Type()
)
condNotifSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    condNotifSeverity.setStatus("current")
_CondNotifDefaultSeverity_Type = CondSeverity
_CondNotifDefaultSeverity_Object = MibTableColumn
condNotifDefaultSeverity = _CondNotifDefaultSeverity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 3),
    _CondNotifDefaultSeverity_Type()
)
condNotifDefaultSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    condNotifDefaultSeverity.setStatus("current")
_EnvCondAttrTable_Object = MibTable
envCondAttrTable = _EnvCondAttrTable_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2)
)
if mibBuilder.loadTexts:
    envCondAttrTable.setStatus("current")
_EnvCondAttrEntry_Object = MibTableRow
envCondAttrEntry = _EnvCondAttrEntry_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1)
)
envCondAttrEntry.setIndexNames(
    (0, "BTI-7000-MIB", "envCondAttrHKIIdx"),
)
if mibBuilder.loadTexts:
    envCondAttrEntry.setStatus("current")


class _EnvCondAttrHKIIdx_Type(Integer32):
    """Custom type envCondAttrHKIIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_EnvCondAttrHKIIdx_Type.__name__ = "Integer32"
_EnvCondAttrHKIIdx_Object = MibTableColumn
envCondAttrHKIIdx = _EnvCondAttrHKIIdx_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 1),
    _EnvCondAttrHKIIdx_Type()
)
envCondAttrHKIIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    envCondAttrHKIIdx.setStatus("current")
_EnvCondAttrSeverity_Type = CondSeverity
_EnvCondAttrSeverity_Object = MibTableColumn
envCondAttrSeverity = _EnvCondAttrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 2),
    _EnvCondAttrSeverity_Type()
)
envCondAttrSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    envCondAttrSeverity.setStatus("current")
_EnvCondAttrCodeType_Type = EnvNotifCodeType
_EnvCondAttrCodeType_Object = MibTableColumn
envCondAttrCodeType = _EnvCondAttrCodeType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 3),
    _EnvCondAttrCodeType_Type()
)
envCondAttrCodeType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    envCondAttrCodeType.setStatus("current")


class _EnvCondAttrDescription_Type(DisplayString):
    """Custom type envCondAttrDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_EnvCondAttrDescription_Type.__name__ = "DisplayString"
_EnvCondAttrDescription_Object = MibTableColumn
envCondAttrDescription = _EnvCondAttrDescription_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 4),
    _EnvCondAttrDescription_Type()
)
envCondAttrDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    envCondAttrDescription.setStatus("current")


class _EnvCondAttrInputType_Type(Integer32):
    """Custom type envCondAttrInputType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("normallyClosed", 2),
          ("normallyOpen", 1))
    )


_EnvCondAttrInputType_Type.__name__ = "Integer32"
_EnvCondAttrInputType_Object = MibTableColumn
envCondAttrInputType = _EnvCondAttrInputType_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 5),
    _EnvCondAttrInputType_Type()
)
envCondAttrInputType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    envCondAttrInputType.setStatus("current")
_EventNotifCtrl_ObjectIdentity = ObjectIdentity
eventNotifCtrl = _EventNotifCtrl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 2)
)


class _EventNotifState_Type(Integer32):
    """Custom type eventNotifState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eventsDisabled", 2),
          ("eventsEnabled", 1))
    )


_EventNotifState_Type.__name__ = "Integer32"
_EventNotifState_Object = MibScalar
eventNotifState = _EventNotifState_Object(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 2, 1),
    _EventNotifState_Type()
)
eventNotifState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eventNotifState.setStatus("current")

# Managed Objects groups


# Notification objects

shelfInvPluginEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3, 0, 1)
)
shelfInvPluginEvt.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "shelfInvType"),
        ("BTI-7000-MIB", "shelfInvShortName"),
        ("BTI-7000-MIB", "shelfInvName"),
        ("BTI-7000-MIB", "shelfInvChassisPEC"),
        ("BTI-7000-MIB", "shelfInvChassisCLEI"),
        ("BTI-7000-MIB", "shelfInvRev"),
        ("BTI-7000-MIB", "shelfInvConfig"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvPluginEvt.setStatus(
        "current"
    )

shelfInvUnpluginEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3, 0, 2)
)
shelfInvUnpluginEvt.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvUnpluginEvt.setStatus(
        "current"
    )

slotInvPluginEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 1)
)
slotInvPluginEvt.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "slotInvPackShortName"),
        ("BTI-7000-MIB", "slotInvPackName"),
        ("BTI-7000-MIB", "slotInvPackPEC"),
        ("BTI-7000-MIB", "slotInvPackCLEI"),
        ("BTI-7000-MIB", "slotInvPackSerialNum"),
        ("BTI-7000-MIB", "slotInvPackRev"),
        ("BTI-7000-MIB", "slotInvPackMfgDate"),
        ("BTI-7000-MIB", "slotInvPackMfgLoc"),
        ("BTI-7000-MIB", "slotInvPackTestDate"),
        ("BTI-7000-MIB", "slotInvPackTestLoc"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    slotInvPluginEvt.setStatus(
        "current"
    )

slotInvUnpluginEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 2)
)
slotInvUnpluginEvt.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUnpluginEvt.setStatus(
        "current"
    )

slotInvUpgradeStageResultEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 3)
)
slotInvUpgradeStageResultEvt.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "slotInvUpgradeStage"),
        ("BTI-7000-MIB", "slotInvUpgradeResult"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUpgradeStageResultEvt.setStatus(
        "current"
    )

shelfStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 5, 0, 1)
)
shelfStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "shelfIdx"),
        ("BTI-7000-MIB", "shelfOperStatus"),
        ("BTI-7000-MIB", "shelfOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    shelfStatusChangeEvt.setStatus(
        "current"
    )

cpStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 1)
)
cpStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "cpOperStatus"),
        ("BTI-7000-MIB", "cpOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpStatusChangeEvt.setStatus(
        "current"
    )

cpCheckUpgradeResultEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 2)
)
cpCheckUpgradeResultEvt.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "cpUpgradeResult"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpCheckUpgradeResultEvt.setStatus(
        "current"
    )

cpUpgradeTransferResultEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 3)
)
cpUpgradeTransferResultEvt.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "cpUpgradeResult"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpUpgradeTransferResultEvt.setStatus(
        "current"
    )

cpUpgradeStageResultEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 4)
)
cpUpgradeStageResultEvt.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "cpUpgradeStage"),
        ("BTI-7000-MIB", "cpUpgradeResult"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpUpgradeStageResultEvt.setStatus(
        "current"
    )

cpDbBackupResultEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 5)
)
cpDbBackupResultEvt.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "dbBackupAndRestoreAddress"),
        ("BTI-7000-MIB", "dbBackupAndRestorePath"),
        ("BTI-7000-MIB", "dbBackupAndRestoreResult"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpDbBackupResultEvt.setStatus(
        "current"
    )

cpDbRestoreTransferResultEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 6)
)
cpDbRestoreTransferResultEvt.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "dbBackupAndRestoreAddress"),
        ("BTI-7000-MIB", "dbBackupAndRestorePath"),
        ("BTI-7000-MIB", "dbBackupAndRestoreResult"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpDbRestoreTransferResultEvt.setStatus(
        "current"
    )

cpDbInvokeResultEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 7)
)
cpDbInvokeResultEvt.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "dbBackupAndRestoreResult"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpDbInvokeResultEvt.setStatus(
        "current"
    )

cpDbApplyResultEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 8)
)
cpDbApplyResultEvt.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "dbBackupAndRestoreResult"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpDbApplyResultEvt.setStatus(
        "obsolete"
    )

oaStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 7, 0, 1)
)
oaStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaOperStatus"),
        ("BTI-7000-MIB", "oaOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    oaStatusChangeEvt.setStatus(
        "current"
    )

oscStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8, 0, 1)
)
oscStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "oscShelfIdx"),
        ("BTI-7000-MIB", "oscSlotIdx"),
        ("BTI-7000-MIB", "oscIdx"),
        ("BTI-7000-MIB", "oscOperStatus"),
        ("BTI-7000-MIB", "oscOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    oscStatusChangeEvt.setStatus(
        "current"
    )

netMgmtStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8, 0, 2)
)
netMgmtStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "netMgmtIdx"),
        ("BTI-7000-MIB", "netMgmtOperStatus"),
        ("BTI-7000-MIB", "netMgmtOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    netMgmtStatusChangeEvt.setStatus(
        "current"
    )

pluggableInvPluginEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9, 0, 1)
)
pluggableInvPluginEvt.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "pluggableInvType"),
        ("BTI-7000-MIB", "pluggableInvPEC"),
        ("BTI-7000-MIB", "pluggableInvCLEI"),
        ("BTI-7000-MIB", "pluggableInvVendorName"),
        ("BTI-7000-MIB", "pluggableInvVendorOUI"),
        ("BTI-7000-MIB", "pluggableInvVendorPartNum"),
        ("BTI-7000-MIB", "pluggableInvVendorRev"),
        ("BTI-7000-MIB", "pluggableInvVendorSerialNum"),
        ("BTI-7000-MIB", "pluggableInvMfgDate"),
        ("BTI-7000-MIB", "pluggableInvConnectorType"),
        ("BTI-7000-MIB", "pluggableInvMinBitRate"),
        ("BTI-7000-MIB", "pluggableInvMaxBitRate"),
        ("BTI-7000-MIB", "pluggableInvNomBitRate"),
        ("BTI-7000-MIB", "pluggableInvEncoding"),
        ("BTI-7000-MIB", "pluggableInvWavelength"),
        ("BTI-7000-MIB", "pluggableInvReach"),
        ("BTI-7000-MIB", "pluggableInvTxFaultImpl"),
        ("BTI-7000-MIB", "pluggableInvLOSImpl"),
        ("BTI-7000-MIB", "pluggableInvDDiagImpl"),
        ("BTI-7000-MIB", "pluggableInvTxDisableImpl"),
        ("BTI-7000-MIB", "pluggableInvMedia"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvPluginEvt.setStatus(
        "current"
    )

pluggableInvUnpluginEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9, 0, 2)
)
pluggableInvUnpluginEvt.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvUnpluginEvt.setStatus(
        "current"
    )

xcvrStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 1)
)
xcvrStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "xcvrOperStatus"),
        ("BTI-7000-MIB", "xcvrOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    xcvrStatusChangeEvt.setStatus(
        "current"
    )

xcvrProtSwitchEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 2)
)
xcvrProtSwitchEvt.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "xcvrProtSwEvtType"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    xcvrProtSwitchEvt.setStatus(
        "current"
    )

xcvrTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 3)
)
xcvrTcaEvt.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    xcvrTcaEvt.setStatus(
        "current"
    )

amdStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 12, 0, 1)
)
amdStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "amdOperStatus"),
        ("BTI-7000-MIB", "amdOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    amdStatusChangeEvt.setStatus(
        "obsolete"
    )

ocnStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 1)
)
ocnStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "ocnOperStatus"),
        ("BTI-7000-MIB", "ocnOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    ocnStatusChangeEvt.setStatus(
        "current"
    )

ocnTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 2)
)
ocnTcaEvt.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    ocnTcaEvt.setStatus(
        "current"
    )

ocnProtSwitchEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 3)
)
ocnProtSwitchEvt.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "ocnProtSwEvtType"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    ocnProtSwitchEvt.setStatus(
        "current"
    )

stsnProtSwitchEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14, 0, 2)
)
stsnProtSwitchEvt.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "stsnProtSwEvtType"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    stsnProtSwitchEvt.setStatus(
        "current"
    )

stsnTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14, 0, 3)
)
stsnTcaEvt.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    stsnTcaEvt.setStatus(
        "current"
    )

stmnStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 1)
)
stmnStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "stmnOperStatus"),
        ("BTI-7000-MIB", "stmnOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    stmnStatusChangeEvt.setStatus(
        "current"
    )

stmnTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 2)
)
stmnTcaEvt.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    stmnTcaEvt.setStatus(
        "current"
    )

stmnProtSwitchEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 3)
)
stmnProtSwitchEvt.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "stmnProtSwEvtType"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    stmnProtSwitchEvt.setStatus(
        "current"
    )

vcnProtSwitchEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16, 0, 2)
)
vcnProtSwitchEvt.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "vcnProtSwEvtType"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    vcnProtSwitchEvt.setStatus(
        "current"
    )

vcnTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16, 0, 3)
)
vcnTcaEvt.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    vcnTcaEvt.setStatus(
        "current"
    )

geStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17, 0, 1)
)
geStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "geOperStatus"),
        ("BTI-7000-MIB", "geOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    geStatusChangeEvt.setStatus(
        "current"
    )

geTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17, 0, 2)
)
geTcaEvt.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    geTcaEvt.setStatus(
        "current"
    )

fcStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18, 0, 1)
)
fcStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "fcOperStatus"),
        ("BTI-7000-MIB", "fcOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    fcStatusChangeEvt.setStatus(
        "current"
    )

fcTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18, 0, 2)
)
fcTcaEvt.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    fcTcaEvt.setStatus(
        "current"
    )

ethL1IFStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21, 0, 1)
)
ethL1IFStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "ethIntfOperStatus"),
        ("BTI-7000-MIB", "ethIntfOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    ethL1IFStatusChangeEvt.setStatus(
        "current"
    )

ethL1IFTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21, 0, 2)
)
ethL1IFTcaEvt.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    ethL1IFTcaEvt.setStatus(
        "current"
    )

pvxL2IFTcaEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 22, 0, 2)
)
pvxL2IFTcaEvt.setObjects(
      *(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"),
        ("BTI-7000-MIB", "pvxL2IntfShelfIdx"),
        ("BTI-7000-MIB", "pvxL2IntfSlotIdx"),
        ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"),
        ("BTI-7000-MIB", "pvxL2IntfPortIdx"),
        ("BTI-7000-MIB", "tcaIntervalType"),
        ("BTI-7000-MIB", "tcaDateAndTime"),
        ("BTI-7000-MIB", "tcaMontype"),
        ("BTI-7000-MIB", "tcaValue"),
        ("BTI-7000-MIB", "tcaThreshold"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    pvxL2IFTcaEvt.setStatus(
        "current"
    )

briStatusChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 24, 0, 1)
)
briStatusChangeEvt.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "briOperStatus"),
        ("BTI-7000-MIB", "briOperStatQlfr"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    briStatusChangeEvt.setStatus(
        "current"
    )

cpSynchronizationSwitchEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 25, 0, 1)
)
cpSynchronizationSwitchEvt.setObjects(
      *(("BTI-7000-MIB", "cpSynchronizationTypeIdx"),
        ("BTI-7000-MIB", "cpSynchronizationShelfIdx"),
        ("BTI-7000-MIB", "cpSynchronizationSlotIdx"),
        ("BTI-7000-MIB", "cpSynchronizationSwEvtType"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    cpSynchronizationSwitchEvt.setStatus(
        "current"
    )

ntpTimeAndDateUpdateEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31, 0, 1)
)
ntpTimeAndDateUpdateEvt.setObjects(
      *(("BTI-7000-MIB", "ntpOldTimeAndDate"),
        ("BTI-7000-MIB", "ntpNewTimeAndDate"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    ntpTimeAndDateUpdateEvt.setStatus(
        "current"
    )

ntpTimingRefUpdateEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31, 0, 2)
)
ntpTimingRefUpdateEvt.setObjects(
      *(("BTI-7000-MIB", "ntpRefIP"),
        ("BTI-7000-MIB", "ntpRefStratum"),
        ("BTI-7000-MIB", "evtDateAndTime"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    ntpTimingRefUpdateEvt.setStatus(
        "current"
    )

pvxLldpRemTablesChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 34, 0, 1)
)
pvxLldpRemTablesChangeEvt.setObjects(
    ("BTI-7000-MIB", "pvxL2IntfSwitchIdx")
)
if mibBuilder.loadTexts:
    pvxLldpRemTablesChangeEvt.setStatus(
        "current"
    )

shelfInvMissingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 1)
)
shelfInvMissingCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvMissingCond.setStatus(
        "obsolete"
    )

shelfInvMissingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 2)
)
shelfInvMissingClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvMissingClear.setStatus(
        "obsolete"
    )

shelfInvUnknownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 3)
)
shelfInvUnknownCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvUnknownCond.setStatus(
        "current"
    )

shelfInvUnknownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 4)
)
shelfInvUnknownClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvUnknownClear.setStatus(
        "current"
    )

shelfInvCommCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 5)
)
shelfInvCommCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvCommCond.setStatus(
        "obsolete"
    )

shelfInvCommClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 6)
)
shelfInvCommClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvCommClear.setStatus(
        "obsolete"
    )

shelfInvPwrFeedAFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 7)
)
shelfInvPwrFeedAFailCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvPwrFeedAFailCond.setStatus(
        "current"
    )

shelfInvPwrFeedAFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 8)
)
shelfInvPwrFeedAFailClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvPwrFeedAFailClear.setStatus(
        "current"
    )

shelfInvPwrFeedBFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 9)
)
shelfInvPwrFeedBFailCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvPwrFeedBFailCond.setStatus(
        "current"
    )

shelfInvPwrFeedBFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 10)
)
shelfInvPwrFeedBFailClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvPwrFeedBFailClear.setStatus(
        "current"
    )

shelfInvPwrBrownoutCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 11)
)
shelfInvPwrBrownoutCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvPwrBrownoutCond.setStatus(
        "current"
    )

shelfInvPwrBrownoutClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 12)
)
shelfInvPwrBrownoutClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvPwrBrownoutClear.setStatus(
        "current"
    )

shelfInvSysCommCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 13)
)
shelfInvSysCommCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvSysCommCond.setStatus(
        "deprecated"
    )

shelfInvSysCommClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 14)
)
shelfInvSysCommClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvSysCommClear.setStatus(
        "deprecated"
    )

shelfInvExpansionShelfIdMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 15)
)
shelfInvExpansionShelfIdMismatchCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "shelfInvExpectedNEName"),
        ("BTI-7000-MIB", "shelfInvExpectedIPAddress"),
        ("BTI-7000-MIB", "shelfInvExpectedShelfNum"),
        ("BTI-7000-MIB", "shelfInvExpectedMSISerialNum"),
        ("BTI-7000-MIB", "shelfInvDiscoveredNEName"),
        ("BTI-7000-MIB", "shelfInvDiscoveredIPAddress"),
        ("BTI-7000-MIB", "shelfInvDiscoveredShelfNum"),
        ("BTI-7000-MIB", "shelfInvDiscoveredMSISerialNum"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvExpansionShelfIdMismatchCond.setStatus(
        "current"
    )

shelfInvExpansionShelfIdMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 16)
)
shelfInvExpansionShelfIdMismatchClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvExpansionShelfIdMismatchClear.setStatus(
        "current"
    )

shelfInvExpansionShelfCommLOSCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 17)
)
shelfInvExpansionShelfCommLOSCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvExpansionShelfCommLOSCond.setStatus(
        "current"
    )

shelfInvExpansionShelfCommLOSClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 18)
)
shelfInvExpansionShelfCommLOSClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvExpansionShelfCommLOSClear.setStatus(
        "current"
    )

shelfInvExpansionShelfCommLinkDownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 19)
)
shelfInvExpansionShelfCommLinkDownCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvExpansionShelfCommLinkDownCond.setStatus(
        "current"
    )

shelfInvExpansionShelfCommLinkDownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 20)
)
shelfInvExpansionShelfCommLinkDownClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvExpansionShelfCommLinkDownClear.setStatus(
        "current"
    )

shelfInvExpansionShelfCommDeviceUnsupportedCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 21)
)
shelfInvExpansionShelfCommDeviceUnsupportedCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvExpansionShelfCommDeviceUnsupportedCond.setStatus(
        "current"
    )

shelfInvExpansionShelfCommDeviceUnsupportedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 22)
)
shelfInvExpansionShelfCommDeviceUnsupportedClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvExpansionShelfCommDeviceUnsupportedClear.setStatus(
        "current"
    )

shelfInvTempMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 23)
)
shelfInvTempMaxCond.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvTempMaxCond.setStatus(
        "current"
    )

shelfInvTempMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 24)
)
shelfInvTempMaxClear.setObjects(
      *(("BTI-7000-MIB", "shelfInvIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfInvTempMaxClear.setStatus(
        "current"
    )

slotInvMissingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 1)
)
slotInvMissingCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvMissingCond.setStatus(
        "current"
    )

slotInvMissingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 2)
)
slotInvMissingClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvMissingClear.setStatus(
        "current"
    )

slotInvUnknownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 3)
)
slotInvUnknownCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUnknownCond.setStatus(
        "current"
    )

slotInvUnknownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 4)
)
slotInvUnknownClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUnknownClear.setStatus(
        "current"
    )

slotInvCommCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 5)
)
slotInvCommCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvCommCond.setStatus(
        "current"
    )

slotInvCommClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 6)
)
slotInvCommClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvCommClear.setStatus(
        "current"
    )

slotInvFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 7)
)
slotInvFailCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvFailCond.setStatus(
        "current"
    )

slotInvFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 8)
)
slotInvFailClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvFailClear.setStatus(
        "current"
    )

slotInvUpgradeInProgressCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 9)
)
slotInvUpgradeInProgressCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUpgradeInProgressCond.setStatus(
        "current"
    )

slotInvUpgradeInProgressClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 10)
)
slotInvUpgradeInProgressClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUpgradeInProgressClear.setStatus(
        "current"
    )

slotInvUpgradeFailureCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 11)
)
slotInvUpgradeFailureCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUpgradeFailureCond.setStatus(
        "current"
    )

slotInvUpgradeFailureClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 12)
)
slotInvUpgradeFailureClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUpgradeFailureClear.setStatus(
        "current"
    )

slotInvVersionMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 13)
)
slotInvVersionMismatchCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "slotInvSWVersion"),
        ("BTI-7000-MIB", "neSWVersion"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvVersionMismatchCond.setStatus(
        "current"
    )

slotInvVersionMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 14)
)
slotInvVersionMismatchClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvVersionMismatchClear.setStatus(
        "current"
    )

slotInvCoolingUnitFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 15)
)
slotInvCoolingUnitFailCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvCoolingUnitFailCond.setStatus(
        "current"
    )

slotInvCoolingUnitFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 16)
)
slotInvCoolingUnitFailClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvCoolingUnitFailClear.setStatus(
        "current"
    )

slotInvDspCommCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 17)
)
slotInvDspCommCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvDspCommCond.setStatus(
        "current"
    )

slotInvDspCommClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 18)
)
slotInvDspCommClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvDspCommClear.setStatus(
        "current"
    )

slotInvUnsupportedPackCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 19)
)
slotInvUnsupportedPackCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUnsupportedPackCond.setStatus(
        "current"
    )

slotInvUnsupportedPackClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 20)
)
slotInvUnsupportedPackClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvUnsupportedPackClear.setStatus(
        "current"
    )

slotInvCoolingUnitMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 21)
)
slotInvCoolingUnitMismatchCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvCoolingUnitMismatchCond.setStatus(
        "current"
    )

slotInvCoolingUnitMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 22)
)
slotInvCoolingUnitMismatchClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvCoolingUnitMismatchClear.setStatus(
        "current"
    )

slotInvPwrFeedAFuseFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 23)
)
slotInvPwrFeedAFuseFailCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvPwrFeedAFuseFailCond.setStatus(
        "current"
    )

slotInvPwrFeedAFuseFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 24)
)
slotInvPwrFeedAFuseFailClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvPwrFeedAFuseFailClear.setStatus(
        "current"
    )

slotInvPwrFeedBFuseFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 25)
)
slotInvPwrFeedBFuseFailCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvPwrFeedBFuseFailCond.setStatus(
        "current"
    )

slotInvPwrFeedBFuseFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 26)
)
slotInvPwrFeedBFuseFailClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvPwrFeedBFuseFailClear.setStatus(
        "current"
    )

slotInvPowerFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 27)
)
slotInvPowerFailCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvPowerFailCond.setStatus(
        "current"
    )

slotInvPowerFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 28)
)
slotInvPowerFailClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvPowerFailClear.setStatus(
        "current"
    )

slotInvHiTempAutoShutdownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 29)
)
slotInvHiTempAutoShutdownCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvHiTempAutoShutdownCond.setStatus(
        "current"
    )

slotInvHiTempAutoShutdownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 30)
)
slotInvHiTempAutoShutdownClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvHiTempAutoShutdownClear.setStatus(
        "current"
    )

slotInvHTThreshExceededCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 31)
)
slotInvHTThreshExceededCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvHTThreshExceededCond.setStatus(
        "current"
    )

slotInvHTThreshExceededClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 32)
)
slotInvHTThreshExceededClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvHTThreshExceededClear.setStatus(
        "current"
    )

slotInvHTSThreshExceededCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 33)
)
slotInvHTSThreshExceededCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvHTSThreshExceededCond.setStatus(
        "current"
    )

slotInvHTSThreshExceededClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 34)
)
slotInvHTSThreshExceededClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvHTSThreshExceededClear.setStatus(
        "current"
    )

slotInvHTASUnsupportedCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 35)
)
slotInvHTASUnsupportedCond.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvHTASUnsupportedCond.setStatus(
        "current"
    )

slotInvHTASUnsupportedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 36)
)
slotInvHTASUnsupportedClear.setObjects(
      *(("BTI-7000-MIB", "slotInvShelfIdx"),
        ("BTI-7000-MIB", "slotInvSlotTypeIdx"),
        ("BTI-7000-MIB", "slotInvSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    slotInvHTASUnsupportedClear.setStatus(
        "current"
    )

shelfMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 1)
)
shelfMismatchCond.setObjects(
      *(("BTI-7000-MIB", "shelfIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfMismatchCond.setStatus(
        "current"
    )

shelfMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 2)
)
shelfMismatchClear.setObjects(
      *(("BTI-7000-MIB", "shelfIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfMismatchClear.setStatus(
        "current"
    )

shelfMissingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 3)
)
shelfMissingCond.setObjects(
      *(("BTI-7000-MIB", "shelfIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfMissingCond.setStatus(
        "current"
    )

shelfMissingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 4)
)
shelfMissingClear.setObjects(
      *(("BTI-7000-MIB", "shelfIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfMissingClear.setStatus(
        "current"
    )

shelfConfigurationMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 5)
)
shelfConfigurationMismatchCond.setObjects(
      *(("BTI-7000-MIB", "shelfIdx"),
        ("BTI-7000-MIB", "shelfProvConfig"),
        ("BTI-7000-MIB", "shelfDiscConfig"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfConfigurationMismatchCond.setStatus(
        "deprecated"
    )

shelfConfigurationMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 6)
)
shelfConfigurationMismatchClear.setObjects(
      *(("BTI-7000-MIB", "shelfIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    shelfConfigurationMismatchClear.setStatus(
        "deprecated"
    )

cpMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 1)
)
cpMismatchCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpMismatchCond.setStatus(
        "current"
    )

cpMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 2)
)
cpMismatchClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpMismatchClear.setStatus(
        "current"
    )

cpConnectorMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 3)
)
cpConnectorMismatchCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpConnectorMismatchCond.setStatus(
        "current"
    )

cpConnectorMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 4)
)
cpConnectorMismatchClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpConnectorMismatchClear.setStatus(
        "current"
    )

cpInvalidProvCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 5)
)
cpInvalidProvCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpInvalidProvCond.setStatus(
        "current"
    )

cpInvalidProvClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 6)
)
cpInvalidProvClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpInvalidProvClear.setStatus(
        "current"
    )

cpSoftwareBankAFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 7)
)
cpSoftwareBankAFailCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpSoftwareBankAFailCond.setStatus(
        "current"
    )

cpSoftwareBankAFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 8)
)
cpSoftwareBankAFailClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpSoftwareBankAFailClear.setStatus(
        "current"
    )

cpSoftwareBankBFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 9)
)
cpSoftwareBankBFailCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpSoftwareBankBFailCond.setStatus(
        "current"
    )

cpSoftwareBankBFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 10)
)
cpSoftwareBankBFailClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpSoftwareBankBFailClear.setStatus(
        "current"
    )

cpUpgradeInProgressCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 11)
)
cpUpgradeInProgressCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpUpgradeInProgressCond.setStatus(
        "current"
    )

cpUpgradeInProgressClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 12)
)
cpUpgradeInProgressClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpUpgradeInProgressClear.setStatus(
        "current"
    )

cpUpgradeFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 15)
)
cpUpgradeFailCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpUpgradeFailCond.setStatus(
        "current"
    )

cpUpgradeFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 16)
)
cpUpgradeFailClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpUpgradeFailClear.setStatus(
        "current"
    )

cpDbRestoreInProgressCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 17)
)
cpDbRestoreInProgressCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpDbRestoreInProgressCond.setStatus(
        "current"
    )

cpDbRestoreInProgressClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 18)
)
cpDbRestoreInProgressClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpDbRestoreInProgressClear.setStatus(
        "current"
    )

cpDbRecoveryFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 19)
)
cpDbRecoveryFailCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpDbRecoveryFailCond.setStatus(
        "current"
    )

cpDbRecoveryFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 20)
)
cpDbRecoveryFailClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpDbRecoveryFailClear.setStatus(
        "current"
    )

cpFanFeedFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 21)
)
cpFanFeedFailCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpFanFeedFailCond.setStatus(
        "current"
    )

cpFanFeedFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 22)
)
cpFanFeedFailClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpFanFeedFailClear.setStatus(
        "current"
    )

cpStorageCardFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 23)
)
cpStorageCardFailCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpStorageCardFailCond.setStatus(
        "current"
    )

cpStorageCardFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 24)
)
cpStorageCardFailClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpStorageCardFailClear.setStatus(
        "current"
    )

cpDbDeletionInProgressCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 25)
)
cpDbDeletionInProgressCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpDbDeletionInProgressCond.setStatus(
        "current"
    )

cpDbDeletionInProgressClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 26)
)
cpDbDeletionInProgressClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpDbDeletionInProgressClear.setStatus(
        "current"
    )

cpDegradeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 27)
)
cpDegradeCond.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpDegradeCond.setStatus(
        "current"
    )

cpDegradeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 28)
)
cpDegradeClear.setObjects(
      *(("BTI-7000-MIB", "cpTypeIdx"),
        ("BTI-7000-MIB", "cpShelfIdx"),
        ("BTI-7000-MIB", "cpSlotIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    cpDegradeClear.setStatus(
        "current"
    )

oaCaseTempCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 1)
)
oaCaseTempCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaCaseTemp"),
        ("BTI-7000-MIB", "oaCaseTempMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaCaseTempCond.setStatus(
        "current"
    )

oaCaseTempClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 2)
)
oaCaseTempClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaCaseTempClear.setStatus(
        "current"
    )

oaCaseTempShutdownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 3)
)
oaCaseTempShutdownCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaCaseTemp"),
        ("BTI-7000-MIB", "oaCaseTempMaxShutdownTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaCaseTempShutdownCond.setStatus(
        "current"
    )

oaCaseTempShutdownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 4)
)
oaCaseTempShutdownClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaCaseTempShutdownClear.setStatus(
        "current"
    )

oaLaserMinTempShutdownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 5)
)
oaLaserMinTempShutdownCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaLaser1Temp"),
        ("BTI-7000-MIB", "oaLaser2Temp"),
        ("BTI-7000-MIB", "oaLaserTempMinShutdownTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaLaserMinTempShutdownCond.setStatus(
        "current"
    )

oaLaserMinTempShutdownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 6)
)
oaLaserMinTempShutdownClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaLaserMinTempShutdownClear.setStatus(
        "current"
    )

oaLaserMaxTempShutdownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 7)
)
oaLaserMaxTempShutdownCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaLaser1Temp"),
        ("BTI-7000-MIB", "oaLaser2Temp"),
        ("BTI-7000-MIB", "oaLaserTempMaxShutdownTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaLaserMaxTempShutdownCond.setStatus(
        "current"
    )

oaLaserMaxTempShutdownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 8)
)
oaLaserMaxTempShutdownClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaLaserMaxTempShutdownClear.setStatus(
        "current"
    )

oaOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 9)
)
oaOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaOpticalPwrReceived"),
        ("BTI-7000-MIB", "oaOpticalPwrReceivedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaOpticalPwrReceivedMinCond.setStatus(
        "current"
    )

oaOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 10)
)
oaOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaOpticalPwrReceivedMinClear.setStatus(
        "current"
    )

oaOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 11)
)
oaOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaOpticalPwrReceived"),
        ("BTI-7000-MIB", "oaOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

oaOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 12)
)
oaOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

oaSSIOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 13)
)
oaSSIOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaSSIOpticalPwrReceived"),
        ("BTI-7000-MIB", "oaSSIOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaSSIOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

oaSSIOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 14)
)
oaSSIOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaSSIOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

oaBackReflectionSafetyCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 17)
)
oaBackReflectionSafetyCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaBackReflectionSafetyTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaBackReflectionSafetyCond.setStatus(
        "current"
    )

oaBackReflectionSafetyClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 18)
)
oaBackReflectionSafetyClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaBackReflectionSafetyClear.setStatus(
        "current"
    )

oaOpticalPwrTransmittedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 19)
)
oaOpticalPwrTransmittedMinCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "oaOpticalPwrTransmittedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaOpticalPwrTransmittedMinCond.setStatus(
        "current"
    )

oaOpticalPwrTransmittedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 20)
)
oaOpticalPwrTransmittedMinClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaOpticalPwrTransmittedMinClear.setStatus(
        "current"
    )

oaOpticalPwrTransmittedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 21)
)
oaOpticalPwrTransmittedMaxCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "oaOpticalPwrTransmittedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaOpticalPwrTransmittedMaxCond.setStatus(
        "current"
    )

oaOpticalPwrTransmittedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 22)
)
oaOpticalPwrTransmittedMaxClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaOpticalPwrTransmittedMaxClear.setStatus(
        "current"
    )

oaMSInsertionLossCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 23)
)
oaMSInsertionLossCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "oaMSInsertionLoss"),
        ("BTI-7000-MIB", "oaMSInsertionLossMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaMSInsertionLossCond.setStatus(
        "current"
    )

oaMSInsertionLossClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 24)
)
oaMSInsertionLossClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaMSInsertionLossClear.setStatus(
        "current"
    )

oaAmplifierConditioningCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 25)
)
oaAmplifierConditioningCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaAmplifierConditioningCond.setStatus(
        "current"
    )

oaAmplifierConditioningClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 26)
)
oaAmplifierConditioningClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaAmplifierConditioningClear.setStatus(
        "current"
    )

oaDspCommCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 27)
)
oaDspCommCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaDspCommCond.setStatus(
        "current"
    )

oaDspCommClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 28)
)
oaDspCommClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaDspCommClear.setStatus(
        "current"
    )

oaBackReflectionSafetyOverrideCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 41)
)
oaBackReflectionSafetyOverrideCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaBackReflectionSafetyOverrideCond.setStatus(
        "current"
    )

oaBackReflectionSafetyOverrideClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 42)
)
oaBackReflectionSafetyOverrideClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaBackReflectionSafetyOverrideClear.setStatus(
        "current"
    )

oaBackReflectionHighThresholdCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 43)
)
oaBackReflectionHighThresholdCond.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaBackReflectionHighThresholdCond.setStatus(
        "current"
    )

oaBackReflectionHighThresholdClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 44)
)
oaBackReflectionHighThresholdClear.setObjects(
      *(("BTI-7000-MIB", "oaTypeIdx"),
        ("BTI-7000-MIB", "oaShelfIdx"),
        ("BTI-7000-MIB", "oaSlotIdx"),
        ("BTI-7000-MIB", "oaIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oaBackReflectionHighThresholdClear.setStatus(
        "current"
    )

oscLossOfSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 1)
)
oscLossOfSignalCond.setObjects(
      *(("BTI-7000-MIB", "oscShelfIdx"),
        ("BTI-7000-MIB", "oscSlotIdx"),
        ("BTI-7000-MIB", "oscIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oscLossOfSignalCond.setStatus(
        "current"
    )

oscLossOfSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 2)
)
oscLossOfSignalClear.setObjects(
      *(("BTI-7000-MIB", "oscShelfIdx"),
        ("BTI-7000-MIB", "oscSlotIdx"),
        ("BTI-7000-MIB", "oscIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oscLossOfSignalClear.setStatus(
        "current"
    )

oscSfpMissingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 3)
)
oscSfpMissingCond.setObjects(
      *(("BTI-7000-MIB", "oscShelfIdx"),
        ("BTI-7000-MIB", "oscSlotIdx"),
        ("BTI-7000-MIB", "oscIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oscSfpMissingCond.setStatus(
        "current"
    )

oscSfpMissingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 4)
)
oscSfpMissingClear.setObjects(
      *(("BTI-7000-MIB", "oscShelfIdx"),
        ("BTI-7000-MIB", "oscSlotIdx"),
        ("BTI-7000-MIB", "oscIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    oscSfpMissingClear.setStatus(
        "current"
    )

pluggableInvUnknownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 1)
)
pluggableInvUnknownCond.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvUnknownCond.setStatus(
        "current"
    )

pluggableInvUnknownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 2)
)
pluggableInvUnknownClear.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvUnknownClear.setStatus(
        "current"
    )

pluggableInvCommCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 3)
)
pluggableInvCommCond.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvCommCond.setStatus(
        "current"
    )

pluggableInvCommClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 4)
)
pluggableInvCommClear.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvCommClear.setStatus(
        "current"
    )

pluggableInvFailCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 5)
)
pluggableInvFailCond.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvFailCond.setStatus(
        "current"
    )

pluggableInvFailClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 6)
)
pluggableInvFailClear.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvFailClear.setStatus(
        "current"
    )

pluggableInvMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 7)
)
pluggableInvMismatchCond.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvMismatchCond.setStatus(
        "current"
    )

pluggableInvMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 8)
)
pluggableInvMismatchClear.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvMismatchClear.setStatus(
        "current"
    )

pluggableInvMissingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 9)
)
pluggableInvMissingCond.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvMissingCond.setStatus(
        "current"
    )

pluggableInvMissingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 10)
)
pluggableInvMissingClear.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvMissingClear.setStatus(
        "current"
    )

pluggableInvUnsupportedCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 11)
)
pluggableInvUnsupportedCond.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvUnsupportedCond.setStatus(
        "current"
    )

pluggableInvUnsupportedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 12)
)
pluggableInvUnsupportedClear.setObjects(
      *(("BTI-7000-MIB", "pluggableInvShelfIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"),
        ("BTI-7000-MIB", "pluggableInvSlotIdx"),
        ("BTI-7000-MIB", "pluggableInvPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    pluggableInvUnsupportedClear.setStatus(
        "current"
    )

xcvrMissingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 1)
)
xcvrMissingCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrMissingCond.setStatus(
        "current"
    )

xcvrMissingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 2)
)
xcvrMissingClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrMissingClear.setStatus(
        "current"
    )

xcvrMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 3)
)
xcvrMismatchCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrMismatchCond.setStatus(
        "current"
    )

xcvrMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 4)
)
xcvrMismatchClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrMismatchClear.setStatus(
        "current"
    )

xcvrRFICond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 5)
)
xcvrRFICond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrRFICond.setStatus(
        "current"
    )

xcvrRFIClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 6)
)
xcvrRFIClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrRFIClear.setStatus(
        "current"
    )

xcvrLossOfSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 7)
)
xcvrLossOfSignalCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLossOfSignalCond.setStatus(
        "current"
    )

xcvrLossOfSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 8)
)
xcvrLossOfSignalClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLossOfSignalClear.setStatus(
        "current"
    )

xcvrLossOfLockCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 9)
)
xcvrLossOfLockCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLossOfLockCond.setStatus(
        "current"
    )

xcvrLossOfLockClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 10)
)
xcvrLossOfLockClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLossOfLockClear.setStatus(
        "current"
    )

xcvrOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 11)
)
xcvrOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "xcvrOpticalPwrReceived"),
        ("BTI-7000-MIB", "xcvrOpticalPwrReceivedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceivedMinCond.setStatus(
        "current"
    )

xcvrOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 12)
)
xcvrOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceivedMinClear.setStatus(
        "current"
    )

xcvrOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 13)
)
xcvrOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "xcvrOpticalPwrReceived"),
        ("BTI-7000-MIB", "xcvrOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

xcvrOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 14)
)
xcvrOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

xcvrOpticalPwrTransmittedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 15)
)
xcvrOpticalPwrTransmittedMinCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "xcvrOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "xcvrOpticalPwrTransmittedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmittedMinCond.setStatus(
        "current"
    )

xcvrOpticalPwrTransmittedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 16)
)
xcvrOpticalPwrTransmittedMinClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmittedMinClear.setStatus(
        "current"
    )

xcvrOpticalPwrTransmittedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 17)
)
xcvrOpticalPwrTransmittedMaxCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "xcvrOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "xcvrOpticalPwrTransmittedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmittedMaxCond.setStatus(
        "current"
    )

xcvrOpticalPwrTransmittedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 18)
)
xcvrOpticalPwrTransmittedMaxClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpticalPwrTransmittedMaxClear.setStatus(
        "current"
    )

xcvrLossOfFrameCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 19)
)
xcvrLossOfFrameCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLossOfFrameCond.setStatus(
        "current"
    )

xcvrLossOfFrameClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 20)
)
xcvrLossOfFrameClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLossOfFrameClear.setStatus(
        "current"
    )

xcvrLossOfSyncCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 21)
)
xcvrLossOfSyncCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLossOfSyncCond.setStatus(
        "current"
    )

xcvrLossOfSyncClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 22)
)
xcvrLossOfSyncClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLossOfSyncClear.setStatus(
        "current"
    )

xcvrLoopbackCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 27)
)
xcvrLoopbackCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLoopbackCond.setStatus(
        "current"
    )

xcvrLoopbackClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 28)
)
xcvrLoopbackClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLoopbackClear.setStatus(
        "current"
    )

xcvrForcedSwitchToProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 29)
)
xcvrForcedSwitchToProtectionCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrForcedSwitchToProtectionCond.setStatus(
        "current"
    )

xcvrForcedSwitchToProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 30)
)
xcvrForcedSwitchToProtectionClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrForcedSwitchToProtectionClear.setStatus(
        "current"
    )

xcvrForcedSwitchToWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 31)
)
xcvrForcedSwitchToWorkingCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrForcedSwitchToWorkingCond.setStatus(
        "current"
    )

xcvrForcedSwitchToWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 32)
)
xcvrForcedSwitchToWorkingClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrForcedSwitchToWorkingClear.setStatus(
        "current"
    )

xcvrLockoutProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 33)
)
xcvrLockoutProtectionCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLockoutProtectionCond.setStatus(
        "current"
    )

xcvrLockoutProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 34)
)
xcvrLockoutProtectionClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLockoutProtectionClear.setStatus(
        "current"
    )

xcvrLockoutWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 35)
)
xcvrLockoutWorkingCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLockoutWorkingCond.setStatus(
        "current"
    )

xcvrLockoutWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 36)
)
xcvrLockoutWorkingClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLockoutWorkingClear.setStatus(
        "current"
    )

xcvrTempMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 37)
)
xcvrTempMaxCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrTempMaxCond.setStatus(
        "current"
    )

xcvrTempMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 38)
)
xcvrTempMaxClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrTempMaxClear.setStatus(
        "current"
    )

xcvrWavelengthNotAchievableCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 39)
)
xcvrWavelengthNotAchievableCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrWavelengthNotAchievableCond.setStatus(
        "current"
    )

xcvrWavelengthNotAchievableClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 40)
)
xcvrWavelengthNotAchievableClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrWavelengthNotAchievableClear.setStatus(
        "current"
    )

xcvrAlarmIndicationSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 41)
)
xcvrAlarmIndicationSignalCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrAlarmIndicationSignalCond.setStatus(
        "current"
    )

xcvrAlarmIndicationSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 42)
)
xcvrAlarmIndicationSignalClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrAlarmIndicationSignalClear.setStatus(
        "current"
    )

xcvrTraceMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 43)
)
xcvrTraceMismatchCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "xcvrReceivedTraceLabel"),
        ("BTI-7000-MIB", "xcvrExpectedTraceLabel"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrTraceMismatchCond.setStatus(
        "current"
    )

xcvrTraceMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 44)
)
xcvrTraceMismatchClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrTraceMismatchClear.setStatus(
        "current"
    )

xcvrRemoteFaultCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 45)
)
xcvrRemoteFaultCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrRemoteFaultCond.setStatus(
        "current"
    )

xcvrRemoteFaultClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 46)
)
xcvrRemoteFaultClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrRemoteFaultClear.setStatus(
        "current"
    )

xcvrSignalDegradeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 47)
)
xcvrSignalDegradeCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrSignalDegradeCond.setStatus(
        "current"
    )

xcvrSignalDegradeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 48)
)
xcvrSignalDegradeClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrSignalDegradeClear.setStatus(
        "current"
    )

xcvrOTNPayloadMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 49)
)
xcvrOTNPayloadMismatchCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOTNPayloadMismatchCond.setStatus(
        "current"
    )

xcvrOTNPayloadMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 50)
)
xcvrOTNPayloadMismatchClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOTNPayloadMismatchClear.setStatus(
        "current"
    )

xcvrLFCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 51)
)
xcvrLFCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLFCond.setStatus(
        "current"
    )

xcvrLFClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 52)
)
xcvrLFClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrLFClear.setStatus(
        "current"
    )

xcvrOpenConnectionIndicatorCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 53)
)
xcvrOpenConnectionIndicatorCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpenConnectionIndicatorCond.setStatus(
        "current"
    )

xcvrOpenConnectionIndicatorClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 54)
)
xcvrOpenConnectionIndicatorClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrOpenConnectionIndicatorClear.setStatus(
        "current"
    )

xcvrReceivedLockoutCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 55)
)
xcvrReceivedLockoutCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrReceivedLockoutCond.setStatus(
        "current"
    )

xcvrReceivedLockoutClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 56)
)
xcvrReceivedLockoutClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrReceivedLockoutClear.setStatus(
        "current"
    )

xcvrBackwardDefectIndicatorCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 57)
)
xcvrBackwardDefectIndicatorCond.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrBackwardDefectIndicatorCond.setStatus(
        "current"
    )

xcvrBackwardDefectIndicatorClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 58)
)
xcvrBackwardDefectIndicatorClear.setObjects(
      *(("BTI-7000-MIB", "xcvrTypeIdx"),
        ("BTI-7000-MIB", "xcvrShelfIdx"),
        ("BTI-7000-MIB", "xcvrSlotIdx"),
        ("BTI-7000-MIB", "xcvrIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    xcvrBackwardDefectIndicatorClear.setStatus(
        "current"
    )

tl1UserLockoutCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 1)
)
tl1UserLockoutCond.setObjects(
      *(("BTI-7000-MIB", "tl1UserIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    tl1UserLockoutCond.setStatus(
        "current"
    )

tl1UserLockoutClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 2)
)
tl1UserLockoutClear.setObjects(
      *(("BTI-7000-MIB", "tl1UserIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    tl1UserLockoutClear.setStatus(
        "current"
    )

tl1IpLockoutCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 3)
)
tl1IpLockoutCond.setObjects(
      *(("BTI-7000-MIB", "tl1IpLockoutAddr"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    tl1IpLockoutCond.setStatus(
        "current"
    )

tl1IpLockoutClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 4)
)
tl1IpLockoutClear.setObjects(
      *(("BTI-7000-MIB", "tl1IpLockoutAddr"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    tl1IpLockoutClear.setStatus(
        "current"
    )

amdLossOfSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 1)
)
amdLossOfSignalCond.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdLossOfSignalCond.setStatus(
        "obsolete"
    )

amdLossOfSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 2)
)
amdLossOfSignalClear.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdLossOfSignalClear.setStatus(
        "obsolete"
    )

amdOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 3)
)
amdOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "amdOpticalPwrReceived"),
        ("BTI-7000-MIB", "amdOpticalPwrReceivedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdOpticalPwrReceivedMinCond.setStatus(
        "obsolete"
    )

amdOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 4)
)
amdOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdOpticalPwrReceivedMinClear.setStatus(
        "obsolete"
    )

amdOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 5)
)
amdOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "amdOpticalPwrReceived"),
        ("BTI-7000-MIB", "amdOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdOpticalPwrReceivedMaxCond.setStatus(
        "obsolete"
    )

amdOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 6)
)
amdOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdOpticalPwrReceivedMaxClear.setStatus(
        "obsolete"
    )

amdTPLNACond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 7)
)
amdTPLNACond.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "amdOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "amdOpticalPwrTransmittedTarget"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdTPLNACond.setStatus(
        "obsolete"
    )

amdTPLNAClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 8)
)
amdTPLNAClear.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdTPLNAClear.setStatus(
        "obsolete"
    )

amdTALNACond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 9)
)
amdTALNACond.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "amdOpticalAttentuation"),
        ("BTI-7000-MIB", "amdOpticalAttenuationTarget"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdTALNACond.setStatus(
        "obsolete"
    )

amdTALNAClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 10)
)
amdTALNAClear.setObjects(
      *(("BTI-7000-MIB", "amdTypeIdx"),
        ("BTI-7000-MIB", "amdShelfIdx"),
        ("BTI-7000-MIB", "amdSlotIdx"),
        ("BTI-7000-MIB", "amdLineIdx"),
        ("BTI-7000-MIB", "amdPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    amdTALNAClear.setStatus(
        "obsolete"
    )

ocnLossOfSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 1)
)
ocnLossOfSignalCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLossOfSignalCond.setStatus(
        "current"
    )

ocnLossOfSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 2)
)
ocnLossOfSignalClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLossOfSignalClear.setStatus(
        "current"
    )

ocnXcvrMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 3)
)
ocnXcvrMismatchCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnXcvrMismatchCond.setStatus(
        "current"
    )

ocnXcvrMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 4)
)
ocnXcvrMismatchClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnXcvrMismatchClear.setStatus(
        "current"
    )

ocnOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 5)
)
ocnOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "ocnOpticalPwrReceived"),
        ("BTI-7000-MIB", "ocnOpticalPwrReceivedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOpticalPwrReceivedMinCond.setStatus(
        "current"
    )

ocnOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 6)
)
ocnOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOpticalPwrReceivedMinClear.setStatus(
        "current"
    )

ocnOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 7)
)
ocnOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "ocnOpticalPwrReceived"),
        ("BTI-7000-MIB", "ocnOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

ocnOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 8)
)
ocnOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

ocnOpticalPwrTransmittedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 9)
)
ocnOpticalPwrTransmittedMinCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "ocnOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "ocnOpticalPwrTransmittedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmittedMinCond.setStatus(
        "current"
    )

ocnOpticalPwrTransmittedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 10)
)
ocnOpticalPwrTransmittedMinClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmittedMinClear.setStatus(
        "current"
    )

ocnOpticalPwrTransmittedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 11)
)
ocnOpticalPwrTransmittedMaxCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "ocnOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "ocnOpticalPwrTransmittedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmittedMaxCond.setStatus(
        "current"
    )

ocnOpticalPwrTransmittedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 12)
)
ocnOpticalPwrTransmittedMaxClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOpticalPwrTransmittedMaxClear.setStatus(
        "current"
    )

ocnLossOfFrameCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 13)
)
ocnLossOfFrameCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLossOfFrameCond.setStatus(
        "current"
    )

ocnLossOfFrameClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 14)
)
ocnLossOfFrameClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLossOfFrameClear.setStatus(
        "current"
    )

ocnSignalDegradeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 15)
)
ocnSignalDegradeCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "ocnBER"),
        ("BTI-7000-MIB", "ocnBERTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnSignalDegradeCond.setStatus(
        "current"
    )

ocnSignalDegradeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 16)
)
ocnSignalDegradeClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnSignalDegradeClear.setStatus(
        "current"
    )

ocnAlarmIndicationSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 17)
)
ocnAlarmIndicationSignalCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnAlarmIndicationSignalCond.setStatus(
        "current"
    )

ocnAlarmIndicationSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 18)
)
ocnAlarmIndicationSignalClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnAlarmIndicationSignalClear.setStatus(
        "current"
    )

ocnLoopbackCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 19)
)
ocnLoopbackCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLoopbackCond.setStatus(
        "current"
    )

ocnLoopbackClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 20)
)
ocnLoopbackClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLoopbackClear.setStatus(
        "current"
    )

ocnLossOfPrimaryTimingReferenceCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 21)
)
ocnLossOfPrimaryTimingReferenceCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLossOfPrimaryTimingReferenceCond.setStatus(
        "current"
    )

ocnLossOfPrimaryTimingReferenceClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 22)
)
ocnLossOfPrimaryTimingReferenceClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLossOfPrimaryTimingReferenceClear.setStatus(
        "current"
    )

ocnLossOfSecondaryTimingReferenceCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 23)
)
ocnLossOfSecondaryTimingReferenceCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLossOfSecondaryTimingReferenceCond.setStatus(
        "current"
    )

ocnLossOfSecondaryTimingReferenceClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 24)
)
ocnLossOfSecondaryTimingReferenceClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLossOfSecondaryTimingReferenceClear.setStatus(
        "current"
    )

ocnOTNPayloadMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 25)
)
ocnOTNPayloadMismatchCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOTNPayloadMismatchCond.setStatus(
        "current"
    )

ocnOTNPayloadMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 26)
)
ocnOTNPayloadMismatchClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnOTNPayloadMismatchClear.setStatus(
        "current"
    )

ocnForcedSwitchToProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 27)
)
ocnForcedSwitchToProtectionCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnForcedSwitchToProtectionCond.setStatus(
        "current"
    )

ocnForcedSwitchToProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 28)
)
ocnForcedSwitchToProtectionClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnForcedSwitchToProtectionClear.setStatus(
        "current"
    )

ocnForcedSwitchToWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 29)
)
ocnForcedSwitchToWorkingCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnForcedSwitchToWorkingCond.setStatus(
        "current"
    )

ocnForcedSwitchToWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 30)
)
ocnForcedSwitchToWorkingClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnForcedSwitchToWorkingClear.setStatus(
        "current"
    )

ocnLockoutProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 31)
)
ocnLockoutProtectionCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLockoutProtectionCond.setStatus(
        "current"
    )

ocnLockoutProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 32)
)
ocnLockoutProtectionClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLockoutProtectionClear.setStatus(
        "current"
    )

ocnLockoutWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 33)
)
ocnLockoutWorkingCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLockoutWorkingCond.setStatus(
        "current"
    )

ocnLockoutWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 34)
)
ocnLockoutWorkingClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnLockoutWorkingClear.setStatus(
        "current"
    )

ocnWavelengthNotAchievableCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 35)
)
ocnWavelengthNotAchievableCond.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnWavelengthNotAchievableCond.setStatus(
        "current"
    )

ocnWavelengthNotAchievableClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 36)
)
ocnWavelengthNotAchievableClear.setObjects(
      *(("BTI-7000-MIB", "ocnTypeIdx"),
        ("BTI-7000-MIB", "ocnShelfIdx"),
        ("BTI-7000-MIB", "ocnSlotIdx"),
        ("BTI-7000-MIB", "ocnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ocnWavelengthNotAchievableClear.setStatus(
        "current"
    )

stsnAlarmIndicationSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 1)
)
stsnAlarmIndicationSignalCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnAlarmIndicationSignalCond.setStatus(
        "current"
    )

stsnAlarmIndicationSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 2)
)
stsnAlarmIndicationSignalClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnAlarmIndicationSignalClear.setStatus(
        "current"
    )

stsnLossOfPointerCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 3)
)
stsnLossOfPointerCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnLossOfPointerCond.setStatus(
        "current"
    )

stsnLossOfPointerClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 4)
)
stsnLossOfPointerClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnLossOfPointerClear.setStatus(
        "current"
    )

stsnUnequippedCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 5)
)
stsnUnequippedCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnUnequippedCond.setStatus(
        "current"
    )

stsnUnequippedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 6)
)
stsnUnequippedClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnUnequippedClear.setStatus(
        "current"
    )

stsnSignalDegradeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 7)
)
stsnSignalDegradeCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "stsnBER"),
        ("BTI-7000-MIB", "stsnBERTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnSignalDegradeCond.setStatus(
        "current"
    )

stsnSignalDegradeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 8)
)
stsnSignalDegradeClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnSignalDegradeClear.setStatus(
        "current"
    )

stsnForcedSwitchToProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 9)
)
stsnForcedSwitchToProtectionCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnForcedSwitchToProtectionCond.setStatus(
        "current"
    )

stsnForcedSwitchToProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 10)
)
stsnForcedSwitchToProtectionClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnForcedSwitchToProtectionClear.setStatus(
        "current"
    )

stsnForcedSwitchToWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 11)
)
stsnForcedSwitchToWorkingCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnForcedSwitchToWorkingCond.setStatus(
        "current"
    )

stsnForcedSwitchToWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 12)
)
stsnForcedSwitchToWorkingClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnForcedSwitchToWorkingClear.setStatus(
        "current"
    )

stsnLockoutProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 13)
)
stsnLockoutProtectionCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnLockoutProtectionCond.setStatus(
        "current"
    )

stsnLockoutProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 14)
)
stsnLockoutProtectionClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnLockoutProtectionClear.setStatus(
        "current"
    )

stsnLockoutWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 15)
)
stsnLockoutWorkingCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnLockoutWorkingCond.setStatus(
        "current"
    )

stsnLockoutWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 16)
)
stsnLockoutWorkingClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnLockoutWorkingClear.setStatus(
        "current"
    )

stsnConcatMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 17)
)
stsnConcatMismatchCond.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnConcatMismatchCond.setStatus(
        "current"
    )

stsnConcatMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 18)
)
stsnConcatMismatchClear.setObjects(
      *(("BTI-7000-MIB", "stsnTypeIdx"),
        ("BTI-7000-MIB", "stsnShelfIdx"),
        ("BTI-7000-MIB", "stsnSlotIdx"),
        ("BTI-7000-MIB", "stsnPortIdx"),
        ("BTI-7000-MIB", "stsnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stsnConcatMismatchClear.setStatus(
        "current"
    )

stmnLossOfSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 1)
)
stmnLossOfSignalCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLossOfSignalCond.setStatus(
        "current"
    )

stmnLossOfSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 2)
)
stmnLossOfSignalClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLossOfSignalClear.setStatus(
        "current"
    )

stmnXcvrMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 3)
)
stmnXcvrMismatchCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnXcvrMismatchCond.setStatus(
        "current"
    )

stmnXcvrMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 4)
)
stmnXcvrMismatchClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnXcvrMismatchClear.setStatus(
        "current"
    )

stmnOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 5)
)
stmnOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "stmnOpticalPwrReceived"),
        ("BTI-7000-MIB", "stmnOpticalPwrReceivedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOpticalPwrReceivedMinCond.setStatus(
        "current"
    )

stmnOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 6)
)
stmnOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOpticalPwrReceivedMinClear.setStatus(
        "current"
    )

stmnOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 7)
)
stmnOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "stmnOpticalPwrReceived"),
        ("BTI-7000-MIB", "stmnOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

stmnOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 8)
)
stmnOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

stmnOpticalPwrTransmittedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 9)
)
stmnOpticalPwrTransmittedMinCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "stmnOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "stmnOpticalPwrTransmittedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmittedMinCond.setStatus(
        "current"
    )

stmnOpticalPwrTransmittedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 10)
)
stmnOpticalPwrTransmittedMinClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmittedMinClear.setStatus(
        "current"
    )

stmnOpticalPwrTransmittedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 11)
)
stmnOpticalPwrTransmittedMaxCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "stmnOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "stmnOpticalPwrTransmittedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmittedMaxCond.setStatus(
        "current"
    )

stmnOpticalPwrTransmittedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 12)
)
stmnOpticalPwrTransmittedMaxClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOpticalPwrTransmittedMaxClear.setStatus(
        "current"
    )

stmnLossOfFrameCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 13)
)
stmnLossOfFrameCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLossOfFrameCond.setStatus(
        "current"
    )

stmnLossOfFrameClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 14)
)
stmnLossOfFrameClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLossOfFrameClear.setStatus(
        "current"
    )

stmnSignalDegradeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 15)
)
stmnSignalDegradeCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "stmnBER"),
        ("BTI-7000-MIB", "stmnBERTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnSignalDegradeCond.setStatus(
        "current"
    )

stmnSignalDegradeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 16)
)
stmnSignalDegradeClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnSignalDegradeClear.setStatus(
        "current"
    )

stmnAlarmIndicationSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 17)
)
stmnAlarmIndicationSignalCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnAlarmIndicationSignalCond.setStatus(
        "current"
    )

stmnAlarmIndicationSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 18)
)
stmnAlarmIndicationSignalClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnAlarmIndicationSignalClear.setStatus(
        "current"
    )

stmnLoopbackCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 19)
)
stmnLoopbackCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLoopbackCond.setStatus(
        "current"
    )

stmnLoopbackClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 20)
)
stmnLoopbackClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLoopbackClear.setStatus(
        "current"
    )

stmnLossOfPrimaryTimingReferenceCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 21)
)
stmnLossOfPrimaryTimingReferenceCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLossOfPrimaryTimingReferenceCond.setStatus(
        "current"
    )

stmnLossOfPrimaryTimingReferenceClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 22)
)
stmnLossOfPrimaryTimingReferenceClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLossOfPrimaryTimingReferenceClear.setStatus(
        "current"
    )

stmnLossOfSecondaryTimingReferenceCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 23)
)
stmnLossOfSecondaryTimingReferenceCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLossOfSecondaryTimingReferenceCond.setStatus(
        "current"
    )

stmnLossOfSecondaryTimingReferenceClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 24)
)
stmnLossOfSecondaryTimingReferenceClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLossOfSecondaryTimingReferenceClear.setStatus(
        "current"
    )

stmnOTNPayloadMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 25)
)
stmnOTNPayloadMismatchCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOTNPayloadMismatchCond.setStatus(
        "current"
    )

stmnOTNPayloadMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 26)
)
stmnOTNPayloadMismatchClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnOTNPayloadMismatchClear.setStatus(
        "current"
    )

stmnForcedSwitchToProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 27)
)
stmnForcedSwitchToProtectionCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnForcedSwitchToProtectionCond.setStatus(
        "current"
    )

stmnForcedSwitchToProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 28)
)
stmnForcedSwitchToProtectionClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnForcedSwitchToProtectionClear.setStatus(
        "current"
    )

stmnForcedSwitchToWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 29)
)
stmnForcedSwitchToWorkingCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnForcedSwitchToWorkingCond.setStatus(
        "current"
    )

stmnForcedSwitchToWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 30)
)
stmnForcedSwitchToWorkingClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnForcedSwitchToWorkingClear.setStatus(
        "current"
    )

stmnLockoutProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 31)
)
stmnLockoutProtectionCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLockoutProtectionCond.setStatus(
        "current"
    )

stmnLockoutProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 32)
)
stmnLockoutProtectionClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLockoutProtectionClear.setStatus(
        "current"
    )

stmnLockoutWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 33)
)
stmnLockoutWorkingCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLockoutWorkingCond.setStatus(
        "current"
    )

stmnLockoutWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 34)
)
stmnLockoutWorkingClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnLockoutWorkingClear.setStatus(
        "current"
    )

stmnWavelengthNotAchievableCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 35)
)
stmnWavelengthNotAchievableCond.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnWavelengthNotAchievableCond.setStatus(
        "current"
    )

stmnWavelengthNotAchievableClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 36)
)
stmnWavelengthNotAchievableClear.setObjects(
      *(("BTI-7000-MIB", "stmnTypeIdx"),
        ("BTI-7000-MIB", "stmnShelfIdx"),
        ("BTI-7000-MIB", "stmnSlotIdx"),
        ("BTI-7000-MIB", "stmnPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    stmnWavelengthNotAchievableClear.setStatus(
        "current"
    )

vcnAlarmIndicationSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 1)
)
vcnAlarmIndicationSignalCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnAlarmIndicationSignalCond.setStatus(
        "current"
    )

vcnAlarmIndicationSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 2)
)
vcnAlarmIndicationSignalClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnAlarmIndicationSignalClear.setStatus(
        "current"
    )

vcnLossOfPointerCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 3)
)
vcnLossOfPointerCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnLossOfPointerCond.setStatus(
        "current"
    )

vcnLossOfPointerClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 4)
)
vcnLossOfPointerClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnLossOfPointerClear.setStatus(
        "current"
    )

vcnUnequippedCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 5)
)
vcnUnequippedCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnUnequippedCond.setStatus(
        "current"
    )

vcnUnequippedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 6)
)
vcnUnequippedClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnUnequippedClear.setStatus(
        "current"
    )

vcnSignalDegradeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 7)
)
vcnSignalDegradeCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "vcnBER"),
        ("BTI-7000-MIB", "vcnBERTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnSignalDegradeCond.setStatus(
        "current"
    )

vcnSignalDegradeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 8)
)
vcnSignalDegradeClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnSignalDegradeClear.setStatus(
        "current"
    )

vcnForcedSwitchToProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 9)
)
vcnForcedSwitchToProtectionCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnForcedSwitchToProtectionCond.setStatus(
        "current"
    )

vcnForcedSwitchToProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 10)
)
vcnForcedSwitchToProtectionClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnForcedSwitchToProtectionClear.setStatus(
        "current"
    )

vcnForcedSwitchToWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 11)
)
vcnForcedSwitchToWorkingCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnForcedSwitchToWorkingCond.setStatus(
        "current"
    )

vcnForcedSwitchToWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 12)
)
vcnForcedSwitchToWorkingClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnForcedSwitchToWorkingClear.setStatus(
        "current"
    )

vcnLockoutProtectionCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 13)
)
vcnLockoutProtectionCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnLockoutProtectionCond.setStatus(
        "current"
    )

vcnLockoutProtectionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 14)
)
vcnLockoutProtectionClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnLockoutProtectionClear.setStatus(
        "current"
    )

vcnLockoutWorkingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 15)
)
vcnLockoutWorkingCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnLockoutWorkingCond.setStatus(
        "current"
    )

vcnLockoutWorkingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 16)
)
vcnLockoutWorkingClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnLockoutWorkingClear.setStatus(
        "current"
    )

vcnConcatMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 17)
)
vcnConcatMismatchCond.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnConcatMismatchCond.setStatus(
        "current"
    )

vcnConcatMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 18)
)
vcnConcatMismatchClear.setObjects(
      *(("BTI-7000-MIB", "vcnTypeIdx"),
        ("BTI-7000-MIB", "vcnShelfIdx"),
        ("BTI-7000-MIB", "vcnSlotIdx"),
        ("BTI-7000-MIB", "vcnPortIdx"),
        ("BTI-7000-MIB", "vcnIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    vcnConcatMismatchClear.setStatus(
        "current"
    )

geLossOfSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 1)
)
geLossOfSignalCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfSignalCond.setStatus(
        "current"
    )

geLossOfSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 2)
)
geLossOfSignalClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfSignalClear.setStatus(
        "current"
    )

geXcvrMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 3)
)
geXcvrMismatchCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geXcvrMismatchCond.setStatus(
        "current"
    )

geXcvrMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 4)
)
geXcvrMismatchClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geXcvrMismatchClear.setStatus(
        "current"
    )

geOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 5)
)
geOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "geOpticalPwrReceived"),
        ("BTI-7000-MIB", "geOpticalPwrReceivedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geOpticalPwrReceivedMinCond.setStatus(
        "current"
    )

geOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 6)
)
geOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geOpticalPwrReceivedMinClear.setStatus(
        "current"
    )

geOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 7)
)
geOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "geOpticalPwrReceived"),
        ("BTI-7000-MIB", "geOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

geOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 8)
)
geOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

geOpticalPwrTransmittedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 9)
)
geOpticalPwrTransmittedMinCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "geOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "geOpticalPwrTransmittedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geOpticalPwrTransmittedMinCond.setStatus(
        "current"
    )

geOpticalPwrTransmittedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 10)
)
geOpticalPwrTransmittedMinClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geOpticalPwrTransmittedMinClear.setStatus(
        "current"
    )

geOpticalPwrTransmittedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 11)
)
geOpticalPwrTransmittedMaxCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "geOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "geOpticalPwrTransmittedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geOpticalPwrTransmittedMaxCond.setStatus(
        "current"
    )

geOpticalPwrTransmittedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 12)
)
geOpticalPwrTransmittedMaxClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geOpticalPwrTransmittedMaxClear.setStatus(
        "current"
    )

geLossOfSyncCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 13)
)
geLossOfSyncCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfSyncCond.setStatus(
        "current"
    )

geLossOfSyncClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 14)
)
geLossOfSyncClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfSyncClear.setStatus(
        "current"
    )

geRemotePathFailureCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 15)
)
geRemotePathFailureCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geRemotePathFailureCond.setStatus(
        "current"
    )

geRemotePathFailureClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 16)
)
geRemotePathFailureClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geRemotePathFailureClear.setStatus(
        "current"
    )

geLossOfMultiframeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 17)
)
geLossOfMultiframeCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfMultiframeCond.setStatus(
        "current"
    )

geLossOfMultiframeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 18)
)
geLossOfMultiframeClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfMultiframeClear.setStatus(
        "current"
    )

geLossOfSequenceCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 19)
)
geLossOfSequenceCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfSequenceCond.setStatus(
        "current"
    )

geLossOfSequenceClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 20)
)
geLossOfSequenceClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfSequenceClear.setStatus(
        "current"
    )

geLossOfAlignmentCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 21)
)
geLossOfAlignmentCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfAlignmentCond.setStatus(
        "current"
    )

geLossOfAlignmentClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 22)
)
geLossOfAlignmentClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLossOfAlignmentClear.setStatus(
        "current"
    )

geLoopbackCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 23)
)
geLoopbackCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLoopbackCond.setStatus(
        "current"
    )

geLoopbackClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 24)
)
geLoopbackClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geLoopbackClear.setStatus(
        "current"
    )

geBandwidthMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 25)
)
geBandwidthMismatchCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geBandwidthMismatchCond.setStatus(
        "current"
    )

geBandwidthMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 26)
)
geBandwidthMismatchClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    geBandwidthMismatchClear.setStatus(
        "current"
    )

gePayloadMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 27)
)
gePayloadMismatchCond.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    gePayloadMismatchCond.setStatus(
        "current"
    )

gePayloadMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 28)
)
gePayloadMismatchClear.setObjects(
      *(("BTI-7000-MIB", "geShelfIdx"),
        ("BTI-7000-MIB", "geSlotIdx"),
        ("BTI-7000-MIB", "gePortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    gePayloadMismatchClear.setStatus(
        "current"
    )

fcLossOfSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 1)
)
fcLossOfSignalCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfSignalCond.setStatus(
        "current"
    )

fcLossOfSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 2)
)
fcLossOfSignalClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfSignalClear.setStatus(
        "current"
    )

fcXcvrMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 3)
)
fcXcvrMismatchCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcXcvrMismatchCond.setStatus(
        "current"
    )

fcXcvrMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 4)
)
fcXcvrMismatchClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcXcvrMismatchClear.setStatus(
        "current"
    )

fcOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 5)
)
fcOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "fcOpticalPwrReceived"),
        ("BTI-7000-MIB", "fcOpticalPwrReceivedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcOpticalPwrReceivedMinCond.setStatus(
        "current"
    )

fcOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 6)
)
fcOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcOpticalPwrReceivedMinClear.setStatus(
        "current"
    )

fcOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 7)
)
fcOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "fcOpticalPwrReceived"),
        ("BTI-7000-MIB", "fcOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

fcOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 8)
)
fcOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

fcOpticalPwrTransmittedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 9)
)
fcOpticalPwrTransmittedMinCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "fcOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "fcOpticalPwrTransmittedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcOpticalPwrTransmittedMinCond.setStatus(
        "current"
    )

fcOpticalPwrTransmittedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 10)
)
fcOpticalPwrTransmittedMinClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcOpticalPwrTransmittedMinClear.setStatus(
        "current"
    )

fcOpticalPwrTransmittedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 11)
)
fcOpticalPwrTransmittedMaxCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "fcOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "fcOpticalPwrTransmittedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcOpticalPwrTransmittedMaxCond.setStatus(
        "current"
    )

fcOpticalPwrTransmittedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 12)
)
fcOpticalPwrTransmittedMaxClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcOpticalPwrTransmittedMaxClear.setStatus(
        "current"
    )

fcLossOfSyncCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 13)
)
fcLossOfSyncCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfSyncCond.setStatus(
        "current"
    )

fcLossOfSyncClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 14)
)
fcLossOfSyncClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfSyncClear.setStatus(
        "current"
    )

fcRemotePathFailureCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 15)
)
fcRemotePathFailureCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcRemotePathFailureCond.setStatus(
        "current"
    )

fcRemotePathFailureClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 16)
)
fcRemotePathFailureClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcRemotePathFailureClear.setStatus(
        "current"
    )

fcLossOfMultiframeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 17)
)
fcLossOfMultiframeCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfMultiframeCond.setStatus(
        "current"
    )

fcLossOfMultiframeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 18)
)
fcLossOfMultiframeClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfMultiframeClear.setStatus(
        "current"
    )

fcLossOfSequenceCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 19)
)
fcLossOfSequenceCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfSequenceCond.setStatus(
        "current"
    )

fcLossOfSequenceClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 20)
)
fcLossOfSequenceClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfSequenceClear.setStatus(
        "current"
    )

fcLossOfAlignmentCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 21)
)
fcLossOfAlignmentCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfAlignmentCond.setStatus(
        "current"
    )

fcLossOfAlignmentClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 22)
)
fcLossOfAlignmentClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLossOfAlignmentClear.setStatus(
        "current"
    )

fcLoopbackCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 23)
)
fcLoopbackCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLoopbackCond.setStatus(
        "current"
    )

fcLoopbackClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 24)
)
fcLoopbackClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcLoopbackClear.setStatus(
        "current"
    )

fcBandwidthMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 25)
)
fcBandwidthMismatchCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcBandwidthMismatchCond.setStatus(
        "current"
    )

fcBandwidthMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 26)
)
fcBandwidthMismatchClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcBandwidthMismatchClear.setStatus(
        "current"
    )

fcPayloadMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 27)
)
fcPayloadMismatchCond.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcPayloadMismatchCond.setStatus(
        "current"
    )

fcPayloadMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 28)
)
fcPayloadMismatchClear.setObjects(
      *(("BTI-7000-MIB", "fcShelfIdx"),
        ("BTI-7000-MIB", "fcSlotIdx"),
        ("BTI-7000-MIB", "fcPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    fcPayloadMismatchClear.setStatus(
        "current"
    )

olsSFPMissingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 1)
)
olsSFPMissingCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsSFPMissingCond.setStatus(
        "current"
    )

olsSFPMissingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 2)
)
olsSFPMissingClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsSFPMissingClear.setStatus(
        "current"
    )

olsSFPMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 3)
)
olsSFPMismatchCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsSFPMismatchCond.setStatus(
        "current"
    )

olsSFPMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 4)
)
olsSFPMismatchClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsSFPMismatchClear.setStatus(
        "current"
    )

olsInputLOSCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 5)
)
olsInputLOSCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsInputLOSCond.setStatus(
        "current"
    )

olsInputLOSClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 6)
)
olsInputLOSClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsInputLOSClear.setStatus(
        "current"
    )

olsOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 7)
)
olsOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOpticalPwrReceivedMinCond.setStatus(
        "current"
    )

olsOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 8)
)
olsOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOpticalPwrReceivedMinClear.setStatus(
        "current"
    )

olsOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 9)
)
olsOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

olsOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 10)
)
olsOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

olsOpticalPwrTransmittedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 11)
)
olsOpticalPwrTransmittedMinCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOpticalPwrTransmittedMinCond.setStatus(
        "current"
    )

olsOpticalPwrTransmittedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 12)
)
olsOpticalPwrTransmittedMinClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOpticalPwrTransmittedMinClear.setStatus(
        "current"
    )

olsOpticalPwrTransmittedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 13)
)
olsOpticalPwrTransmittedMaxCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOpticalPwrTransmittedMaxCond.setStatus(
        "current"
    )

olsOpticalPwrTransmittedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 14)
)
olsOpticalPwrTransmittedMaxClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOpticalPwrTransmittedMaxClear.setStatus(
        "current"
    )

olsTemperatureMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 15)
)
olsTemperatureMaxCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsTemperatureMaxCond.setStatus(
        "current"
    )

olsTemperatureMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 16)
)
olsTemperatureMaxClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsTemperatureMaxClear.setStatus(
        "current"
    )

olsLoopbackCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 17)
)
olsLoopbackCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLoopbackCond.setStatus(
        "current"
    )

olsLoopbackClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 18)
)
olsLoopbackClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLoopbackClear.setStatus(
        "current"
    )

olsLossOfSyncCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 19)
)
olsLossOfSyncCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLossOfSyncCond.setStatus(
        "current"
    )

olsLossOfSyncClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 20)
)
olsLossOfSyncClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLossOfSyncClear.setStatus(
        "current"
    )

olsLossOfFrameCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 21)
)
olsLossOfFrameCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLossOfFrameCond.setStatus(
        "current"
    )

olsLossOfFrameClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 22)
)
olsLossOfFrameClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLossOfFrameClear.setStatus(
        "current"
    )

olsAlarmIndicationSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 23)
)
olsAlarmIndicationSignalCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsAlarmIndicationSignalCond.setStatus(
        "current"
    )

olsAlarmIndicationSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 24)
)
olsAlarmIndicationSignalClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsAlarmIndicationSignalClear.setStatus(
        "current"
    )

olsBackwardDefectIndicatorCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 25)
)
olsBackwardDefectIndicatorCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsBackwardDefectIndicatorCond.setStatus(
        "current"
    )

olsBackwardDefectIndicatorClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 26)
)
olsBackwardDefectIndicatorClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsBackwardDefectIndicatorClear.setStatus(
        "current"
    )

olsSignalDegradeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 27)
)
olsSignalDegradeCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsSignalDegradeCond.setStatus(
        "current"
    )

olsSignalDegradeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 28)
)
olsSignalDegradeClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsSignalDegradeClear.setStatus(
        "current"
    )

olsOTNPayloadMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 29)
)
olsOTNPayloadMismatchCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOTNPayloadMismatchCond.setStatus(
        "current"
    )

olsOTNPayloadMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 30)
)
olsOTNPayloadMismatchClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOTNPayloadMismatchClear.setStatus(
        "current"
    )

olsOTUTrailTraceMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 31)
)
olsOTUTrailTraceMismatchCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOTUTrailTraceMismatchCond.setStatus(
        "current"
    )

olsOTUTrailTraceMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 32)
)
olsOTUTrailTraceMismatchClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsOTUTrailTraceMismatchClear.setStatus(
        "current"
    )

olsRemoteFaultCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 33)
)
olsRemoteFaultCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsRemoteFaultCond.setStatus(
        "current"
    )

olsRemoteFaultClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 34)
)
olsRemoteFaultClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsRemoteFaultClear.setStatus(
        "current"
    )

olsLocalFaultCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 35)
)
olsLocalFaultCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLocalFaultCond.setStatus(
        "current"
    )

olsLocalFaultClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 36)
)
olsLocalFaultClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLocalFaultClear.setStatus(
        "current"
    )

olsWavelengthNotAchievableCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 37)
)
olsWavelengthNotAchievableCond.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsWavelengthNotAchievableCond.setStatus(
        "current"
    )

olsWavelengthNotAchievableClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 38)
)
olsWavelengthNotAchievableClear.setObjects(
      *(("BTI-7000-MIB", "ethIntfShelfIdx"),
        ("BTI-7000-MIB", "ethIntfSlotIdx"),
        ("BTI-7000-MIB", "ethIntfPortTypeIdx"),
        ("BTI-7000-MIB", "ethIntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsWavelengthNotAchievableClear.setStatus(
        "current"
    )

olsLinkDownCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21, 0, 1)
)
olsLinkDownCond.setObjects(
      *(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"),
        ("BTI-7000-MIB", "pvxL2IntfShelfIdx"),
        ("BTI-7000-MIB", "pvxL2IntfSlotIdx"),
        ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"),
        ("BTI-7000-MIB", "pvxL2IntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLinkDownCond.setStatus(
        "current"
    )

olsLinkDownClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21, 0, 2)
)
olsLinkDownClear.setObjects(
      *(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"),
        ("BTI-7000-MIB", "pvxL2IntfShelfIdx"),
        ("BTI-7000-MIB", "pvxL2IntfSlotIdx"),
        ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"),
        ("BTI-7000-MIB", "pvxL2IntfPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    olsLinkDownClear.setStatus(
        "current"
    )

odunPayloadMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 1)
)
odunPayloadMismatchCond.setObjects(
      *(("BTI-7000-MIB", "odunTypeIdx"),
        ("BTI-7000-MIB", "odunShelfIdx"),
        ("BTI-7000-MIB", "odunSlotIdx"),
        ("BTI-7000-MIB", "odunPortIdx"),
        ("BTI-7000-MIB", "odunIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    odunPayloadMismatchCond.setStatus(
        "current"
    )

odunPayloadMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 2)
)
odunPayloadMismatchClear.setObjects(
      *(("BTI-7000-MIB", "odunTypeIdx"),
        ("BTI-7000-MIB", "odunShelfIdx"),
        ("BTI-7000-MIB", "odunSlotIdx"),
        ("BTI-7000-MIB", "odunPortIdx"),
        ("BTI-7000-MIB", "odunIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    odunPayloadMismatchClear.setStatus(
        "current"
    )

odunOpenConnectionIndicatorCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 3)
)
odunOpenConnectionIndicatorCond.setObjects(
      *(("BTI-7000-MIB", "odunTypeIdx"),
        ("BTI-7000-MIB", "odunShelfIdx"),
        ("BTI-7000-MIB", "odunSlotIdx"),
        ("BTI-7000-MIB", "odunPortIdx"),
        ("BTI-7000-MIB", "odunIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    odunOpenConnectionIndicatorCond.setStatus(
        "current"
    )

odunOpenConnectionIndicatorClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 4)
)
odunOpenConnectionIndicatorClear.setObjects(
      *(("BTI-7000-MIB", "odunTypeIdx"),
        ("BTI-7000-MIB", "odunShelfIdx"),
        ("BTI-7000-MIB", "odunSlotIdx"),
        ("BTI-7000-MIB", "odunPortIdx"),
        ("BTI-7000-MIB", "odunIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    odunOpenConnectionIndicatorClear.setStatus(
        "current"
    )

briLossOfSignalCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 1)
)
briLossOfSignalCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfSignalCond.setStatus(
        "current"
    )

briLossOfSignalClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 2)
)
briLossOfSignalClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfSignalClear.setStatus(
        "current"
    )

briXcvrMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 3)
)
briXcvrMismatchCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briXcvrMismatchCond.setStatus(
        "current"
    )

briXcvrMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 4)
)
briXcvrMismatchClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briXcvrMismatchClear.setStatus(
        "current"
    )

briOpticalPwrReceivedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 5)
)
briOpticalPwrReceivedMinCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "briOpticalPwrReceived"),
        ("BTI-7000-MIB", "briOpticalPwrReceivedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briOpticalPwrReceivedMinCond.setStatus(
        "current"
    )

briOpticalPwrReceivedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 6)
)
briOpticalPwrReceivedMinClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briOpticalPwrReceivedMinClear.setStatus(
        "current"
    )

briOpticalPwrReceivedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 7)
)
briOpticalPwrReceivedMaxCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "briOpticalPwrReceived"),
        ("BTI-7000-MIB", "briOpticalPwrReceivedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briOpticalPwrReceivedMaxCond.setStatus(
        "current"
    )

briOpticalPwrReceivedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 8)
)
briOpticalPwrReceivedMaxClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briOpticalPwrReceivedMaxClear.setStatus(
        "current"
    )

briOpticalPwrTransmittedMinCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 9)
)
briOpticalPwrTransmittedMinCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "briOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "briOpticalPwrTransmittedMinTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briOpticalPwrTransmittedMinCond.setStatus(
        "current"
    )

briOpticalPwrTransmittedMinClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 10)
)
briOpticalPwrTransmittedMinClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briOpticalPwrTransmittedMinClear.setStatus(
        "current"
    )

briOpticalPwrTransmittedMaxCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 11)
)
briOpticalPwrTransmittedMaxCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "briOpticalPwrTransmitted"),
        ("BTI-7000-MIB", "briOpticalPwrTransmittedMaxTh"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briOpticalPwrTransmittedMaxCond.setStatus(
        "current"
    )

briOpticalPwrTransmittedMaxClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 12)
)
briOpticalPwrTransmittedMaxClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briOpticalPwrTransmittedMaxClear.setStatus(
        "current"
    )

briLossOfMultiframeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 13)
)
briLossOfMultiframeCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfMultiframeCond.setStatus(
        "current"
    )

briLossOfMultiframeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 14)
)
briLossOfMultiframeClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfMultiframeClear.setStatus(
        "current"
    )

briLossOfSequenceCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 15)
)
briLossOfSequenceCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfSequenceCond.setStatus(
        "current"
    )

briLossOfSequenceClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 16)
)
briLossOfSequenceClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfSequenceClear.setStatus(
        "current"
    )

briLossOfAlignmentCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 17)
)
briLossOfAlignmentCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfAlignmentCond.setStatus(
        "current"
    )

briLossOfAlignmentClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 18)
)
briLossOfAlignmentClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfAlignmentClear.setStatus(
        "current"
    )

briLoopbackCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 19)
)
briLoopbackCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLoopbackCond.setStatus(
        "current"
    )

briLoopbackClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 20)
)
briLoopbackClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLoopbackClear.setStatus(
        "current"
    )

briBandwidthMismatchCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 21)
)
briBandwidthMismatchCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briBandwidthMismatchCond.setStatus(
        "current"
    )

briBandwidthMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 22)
)
briBandwidthMismatchClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briBandwidthMismatchClear.setStatus(
        "current"
    )

briLossOfLockCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 23)
)
briLossOfLockCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfLockCond.setStatus(
        "current"
    )

briLossOfLockClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 24)
)
briLossOfLockClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briLossOfLockClear.setStatus(
        "current"
    )

briTxLockingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 25)
)
briTxLockingCond.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briTxLockingCond.setStatus(
        "current"
    )

briTxLockingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 26)
)
briTxLockingClear.setObjects(
      *(("BTI-7000-MIB", "briShelfIdx"),
        ("BTI-7000-MIB", "briSlotIdx"),
        ("BTI-7000-MIB", "briPortIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    briTxLockingClear.setStatus(
        "current"
    )

ntpAssocSrvrNotReachableCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 1)
)
ntpAssocSrvrNotReachableCond.setObjects(
      *(("BTI-7000-MIB", "ntpClientAssocIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ntpAssocSrvrNotReachableCond.setStatus(
        "current"
    )

ntpAssocSrvrNotReachableClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 2)
)
ntpAssocSrvrNotReachableClear.setObjects(
      *(("BTI-7000-MIB", "ntpClientAssocIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ntpAssocSrvrNotReachableClear.setStatus(
        "current"
    )

ntpAssocSrvrNotRespondingCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 3)
)
ntpAssocSrvrNotRespondingCond.setObjects(
      *(("BTI-7000-MIB", "ntpClientAssocIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ntpAssocSrvrNotRespondingCond.setStatus(
        "current"
    )

ntpAssocSrvrNotRespondingClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 4)
)
ntpAssocSrvrNotRespondingClear.setObjects(
      *(("BTI-7000-MIB", "ntpClientAssocIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ntpAssocSrvrNotRespondingClear.setStatus(
        "current"
    )

ntpAssocAuthenFailedCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 5)
)
ntpAssocAuthenFailedCond.setObjects(
      *(("BTI-7000-MIB", "ntpClientAssocIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ntpAssocAuthenFailedCond.setStatus(
        "current"
    )

ntpAssocAuthenFailedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 6)
)
ntpAssocAuthenFailedClear.setObjects(
      *(("BTI-7000-MIB", "ntpClientAssocIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    ntpAssocAuthenFailedClear.setStatus(
        "current"
    )

envAttrUnsupportedCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 1)
)
envAttrUnsupportedCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envAttrUnsupportedCond.setStatus(
        "current"
    )

envAttrUnsupportedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 2)
)
envAttrUnsupportedClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envAttrUnsupportedClear.setStatus(
        "current"
    )

envAirComprCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 3)
)
envAirComprCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envAirComprCond.setStatus(
        "current"
    )

envAirComprClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 4)
)
envAirComprClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envAirComprClear.setStatus(
        "current"
    )

envAirCondCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 5)
)
envAirCondCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envAirCondCond.setStatus(
        "current"
    )

envAirCondClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 6)
)
envAirCondClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envAirCondClear.setStatus(
        "current"
    )

envAirDryrCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 7)
)
envAirDryrCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envAirDryrCond.setStatus(
        "current"
    )

envAirDryrClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 8)
)
envAirDryrClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envAirDryrClear.setStatus(
        "current"
    )

envBatDschrdCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 9)
)
envBatDschrdCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envBatDschrdCond.setStatus(
        "current"
    )

envBatDschrdClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 10)
)
envBatDschrdClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envBatDschrdClear.setStatus(
        "current"
    )

envBatteryCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 11)
)
envBatteryCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envBatteryCond.setStatus(
        "current"
    )

envBatteryClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 12)
)
envBatteryClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envBatteryClear.setStatus(
        "current"
    )

envClFanCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 13)
)
envClFanCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envClFanCond.setStatus(
        "current"
    )

envClFanClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 14)
)
envClFanClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envClFanClear.setStatus(
        "current"
    )

envCpMajorCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 15)
)
envCpMajorCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envCpMajorCond.setStatus(
        "current"
    )

envCpMajorClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 16)
)
envCpMajorClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envCpMajorClear.setStatus(
        "current"
    )

envCpMinorCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 17)
)
envCpMinorCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envCpMinorCond.setStatus(
        "current"
    )

envCpMinorClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 18)
)
envCpMinorClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envCpMinorClear.setStatus(
        "current"
    )

envDoorOpenCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 19)
)
envDoorOpenCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envDoorOpenCond.setStatus(
        "current"
    )

envDoorOpenClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 20)
)
envDoorOpenClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envDoorOpenClear.setStatus(
        "current"
    )

envEngineCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 21)
)
envEngineCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envEngineCond.setStatus(
        "current"
    )

envEngineClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 22)
)
envEngineClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envEngineClear.setStatus(
        "current"
    )

envEngOprgCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 23)
)
envEngOprgCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envEngOprgCond.setStatus(
        "current"
    )

envEngOprgClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 24)
)
envEngOprgClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envEngOprgClear.setStatus(
        "current"
    )

envExplGsCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 25)
)
envExplGsCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envExplGsCond.setStatus(
        "current"
    )

envExplGsClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 26)
)
envExplGsClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envExplGsClear.setStatus(
        "current"
    )

envFirDetrCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 27)
)
envFirDetrCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envFirDetrCond.setStatus(
        "current"
    )

envFirDetrClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 28)
)
envFirDetrClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envFirDetrClear.setStatus(
        "current"
    )

envFireCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 29)
)
envFireCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envFireCond.setStatus(
        "current"
    )

envFireClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 30)
)
envFireClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envFireClear.setStatus(
        "current"
    )

envFloodCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 31)
)
envFloodCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envFloodCond.setStatus(
        "current"
    )

envFloodClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 32)
)
envFloodClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envFloodClear.setStatus(
        "current"
    )

envFuseCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 33)
)
envFuseCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envFuseCond.setStatus(
        "current"
    )

envFuseClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 34)
)
envFuseClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envFuseClear.setStatus(
        "current"
    )

envGenCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 35)
)
envGenCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envGenCond.setStatus(
        "current"
    )

envGenClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 36)
)
envGenClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envGenClear.setStatus(
        "current"
    )

envGenericCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 37)
)
envGenericCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envGenericCond.setStatus(
        "current"
    )

envGenericClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 38)
)
envGenericClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envGenericClear.setStatus(
        "current"
    )

envHiAirCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 39)
)
envHiAirCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiAirCond.setStatus(
        "current"
    )

envHiAirClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 40)
)
envHiAirClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiAirClear.setStatus(
        "current"
    )

envHiHumCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 41)
)
envHiHumCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiHumCond.setStatus(
        "current"
    )

envHiHumClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 42)
)
envHiHumClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiHumClear.setStatus(
        "current"
    )

envHiTempCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 43)
)
envHiTempCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiTempCond.setStatus(
        "current"
    )

envHiTempClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 44)
)
envHiTempClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiTempClear.setStatus(
        "current"
    )

envHiWindCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 45)
)
envHiWindCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiWindCond.setStatus(
        "current"
    )

envHiWindClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 46)
)
envHiWindClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiWindClear.setStatus(
        "current"
    )

envHiWtrCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 47)
)
envHiWtrCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiWtrCond.setStatus(
        "current"
    )

envHiWtrClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 48)
)
envHiWtrClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envHiWtrClear.setStatus(
        "current"
    )

envIceBuildupCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 49)
)
envIceBuildupCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envIceBuildupCond.setStatus(
        "current"
    )

envIceBuildupClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 50)
)
envIceBuildupClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envIceBuildupClear.setStatus(
        "current"
    )

envIntruderCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 51)
)
envIntruderCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envIntruderCond.setStatus(
        "current"
    )

envIntruderClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 52)
)
envIntruderClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envIntruderClear.setStatus(
        "current"
    )

envLwBatvgCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 53)
)
envLwBatvgCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwBatvgCond.setStatus(
        "current"
    )

envLwBatvgClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 54)
)
envLwBatvgClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwBatvgClear.setStatus(
        "current"
    )

envLwFuelCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 55)
)
envLwFuelCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwFuelCond.setStatus(
        "current"
    )

envLwFuelClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 56)
)
envLwFuelClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwFuelClear.setStatus(
        "current"
    )

envLwHumCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 57)
)
envLwHumCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwHumCond.setStatus(
        "current"
    )

envLwHumClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 58)
)
envLwHumClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwHumClear.setStatus(
        "current"
    )

envLwPresCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 59)
)
envLwPresCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwPresCond.setStatus(
        "current"
    )

envLwPresClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 60)
)
envLwPresClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwPresClear.setStatus(
        "current"
    )

envLwTempCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 61)
)
envLwTempCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwTempCond.setStatus(
        "current"
    )

envLwTempClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 62)
)
envLwTempClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwTempClear.setStatus(
        "current"
    )

envLwWtrCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 63)
)
envLwWtrCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwWtrCond.setStatus(
        "current"
    )

envLwWtrClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 64)
)
envLwWtrClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envLwWtrClear.setStatus(
        "current"
    )

envMiscCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 65)
)
envMiscCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envMiscCond.setStatus(
        "current"
    )

envMiscClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 66)
)
envMiscClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envMiscClear.setStatus(
        "current"
    )

envOpenDrCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 67)
)
envOpenDrCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envOpenDrCond.setStatus(
        "current"
    )

envOpenDrClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 68)
)
envOpenDrClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envOpenDrClear.setStatus(
        "current"
    )

envPowerCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 69)
)
envPowerCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envPowerCond.setStatus(
        "current"
    )

envPowerClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 70)
)
envPowerClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envPowerClear.setStatus(
        "current"
    )

envPumpCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 71)
)
envPumpCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envPumpCond.setStatus(
        "current"
    )

envPumpClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 72)
)
envPumpClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envPumpClear.setStatus(
        "current"
    )

envRectCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 73)
)
envRectCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envRectCond.setStatus(
        "current"
    )

envRectClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 74)
)
envRectClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envRectClear.setStatus(
        "current"
    )

envRectHiCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 75)
)
envRectHiCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envRectHiCond.setStatus(
        "current"
    )

envRectHiClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 76)
)
envRectHiClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envRectHiClear.setStatus(
        "current"
    )

envRectLoCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 77)
)
envRectLoCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envRectLoCond.setStatus(
        "current"
    )

envRectLoClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 78)
)
envRectLoClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envRectLoClear.setStatus(
        "current"
    )

envSmokeCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 79)
)
envSmokeCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envSmokeCond.setStatus(
        "current"
    )

envSmokeClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 80)
)
envSmokeClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envSmokeClear.setStatus(
        "current"
    )

envToxicGasCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 81)
)
envToxicGasCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envToxicGasCond.setStatus(
        "current"
    )

envToxicGasClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 82)
)
envToxicGasClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envToxicGasClear.setStatus(
        "current"
    )

envVentnCond = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 83)
)
envVentnCond.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envVentnCond.setStatus(
        "current"
    )

envVentnClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 84)
)
envVentnClear.setObjects(
      *(("BTI-7000-MIB", "envCondAttrHKIIdx"),
        ("BTI-7000-MIB", "condReportType"),
        ("BTI-7000-MIB", "condDateAndTime"),
        ("BTI-7000-MIB", "condSeverity"),
        ("BTI-7000-MIB", "condServiceAffecting"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "condDescription"),
        ("BTI-7000-MIB", "condObjectType"),
        ("BTI-7000-MIB", "condCodeType"))
)
if mibBuilder.loadTexts:
    envVentnClear.setStatus(
        "current"
    )

dbChangeEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 0, 2)
)
dbChangeEvt.setObjects(
      *(("BTI-7000-MIB", "dbChangeDateAndTime"),
        ("BTI-7000-MIB", "dbChangeSeqNum"),
        ("BTI-7000-MIB", "dbChangeOID"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    dbChangeEvt.setStatus(
        "current"
    )

dbChangeSecuEvt = NotificationType(
    (1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 0, 3)
)
dbChangeSecuEvt.setObjects(
      *(("BTI-7000-MIB", "dbChangeDateAndTime"),
        ("BTI-7000-MIB", "dbChangeSeqNum"),
        ("BTI-7000-MIB", "trapSeqNum"),
        ("BTI-7000-MIB", "evtDescription"),
        ("BTI-7000-MIB", "evtObjectType"),
        ("BTI-7000-MIB", "evtCodeType"))
)
if mibBuilder.loadTexts:
    dbChangeSecuEvt.setStatus(
        "current"
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "BTI-7000-MIB",
    **{"DbBackupAndRestoreCmd": DbBackupAndRestoreCmd,
       "DbBackupAndRestoreType": DbBackupAndRestoreType,
       "SwUpgradeCmd": SwUpgradeCmd,
       "SwUpgradeFileTransferType": SwUpgradeFileTransferType,
       "DataCommsPingCmd": DataCommsPingCmd,
       "bti7000Mib": bti7000Mib,
       "objects": objects,
       "networkElement": networkElement,
       "neSWVersion": neSWVersion,
       "neNum": neNum,
       "neSiteNum": neSiteNum,
       "neDateAndTime": neDateAndTime,
       "neTimeZone": neTimeZone,
       "neAutoDST": neAutoDST,
       "neGateway": neGateway,
       "neSecGateway": neSecGateway,
       "neActiveGateway": neActiveGateway,
       "neAutoProv": neAutoProv,
       "neAutoDeProv": neAutoDeProv,
       "neAutoEnabledTimer": neAutoEnabledTimer,
       "ntpClient": ntpClient,
       "ntpClientPollingRate": ntpClientPollingRate,
       "ntpClientAuthKey": ntpClientAuthKey,
       "ntpClientSyncState": ntpClientSyncState,
       "ntpClientStratum": ntpClientStratum,
       "ntpClientRefIPAddr": ntpClientRefIPAddr,
       "ntpClientAssocTable": ntpClientAssocTable,
       "ntpClientAssocEntry": ntpClientAssocEntry,
       "ntpClientAssocIdx": ntpClientAssocIdx,
       "ntpClientAssocRowStatus": ntpClientAssocRowStatus,
       "ntpOldTimeAndDate": ntpOldTimeAndDate,
       "ntpNewTimeAndDate": ntpNewTimeAndDate,
       "ntpRefIP": ntpRefIP,
       "ntpRefStratum": ntpRefStratum,
       "neFPDetect": neFPDetect,
       "neHTAutoShutdown": neHTAutoShutdown,
       "inventory": inventory,
       "shelfInvTable": shelfInvTable,
       "shelfInvEntry": shelfInvEntry,
       "shelfInvIdx": shelfInvIdx,
       "shelfInvExpectedNEName": shelfInvExpectedNEName,
       "shelfInvExpectedIPAddress": shelfInvExpectedIPAddress,
       "shelfInvExpectedShelfNum": shelfInvExpectedShelfNum,
       "shelfInvExpectedMSISerialNum": shelfInvExpectedMSISerialNum,
       "shelfInvDiscoveredNEName": shelfInvDiscoveredNEName,
       "shelfInvDiscoveredIPAddress": shelfInvDiscoveredIPAddress,
       "shelfInvDiscoveredShelfNum": shelfInvDiscoveredShelfNum,
       "shelfInvDiscoveredMSISerialNum": shelfInvDiscoveredMSISerialNum,
       "shelfInvType": shelfInvType,
       "shelfInvShortName": shelfInvShortName,
       "shelfInvName": shelfInvName,
       "shelfInvChassisPEC": shelfInvChassisPEC,
       "shelfInvChassisCLEI": shelfInvChassisCLEI,
       "shelfInvAssemblyPEC": shelfInvAssemblyPEC,
       "shelfInvRev": shelfInvRev,
       "shelfInvConfig": shelfInvConfig,
       "shelfInvUSI": shelfInvUSI,
       "shelfInvSerialNum": shelfInvSerialNum,
       "shelfInvMfgDate": shelfInvMfgDate,
       "shelfInvMfgLoc": shelfInvMfgLoc,
       "shelfInvTestDate": shelfInvTestDate,
       "shelfInvTestLoc": shelfInvTestLoc,
       "slotInvTable": slotInvTable,
       "slotInvEntry": slotInvEntry,
       "slotInvShelfIdx": slotInvShelfIdx,
       "slotInvSlotTypeIdx": slotInvSlotTypeIdx,
       "slotInvSlotIdx": slotInvSlotIdx,
       "slotInvSWVersion": slotInvSWVersion,
       "slotInvPackShortName": slotInvPackShortName,
       "slotInvPackName": slotInvPackName,
       "slotInvPackPEC": slotInvPackPEC,
       "slotInvPackCLEI": slotInvPackCLEI,
       "slotInvPackSerialNum": slotInvPackSerialNum,
       "slotInvPackRev": slotInvPackRev,
       "slotInvPackMfgDate": slotInvPackMfgDate,
       "slotInvPackMfgLoc": slotInvPackMfgLoc,
       "slotInvPackTestDate": slotInvPackTestDate,
       "slotInvPackTestLoc": slotInvPackTestLoc,
       "slotInvUpgradeStage": slotInvUpgradeStage,
       "slotInvUpgradeResult": slotInvUpgradeResult,
       "slotInvPackUSI": slotInvPackUSI,
       "slotInvTempHighTh": slotInvTempHighTh,
       "slotInvTempShutdownTh": slotInvTempShutdownTh,
       "pluggableInvTable": pluggableInvTable,
       "pluggableInvEntry": pluggableInvEntry,
       "pluggableInvShelfIdx": pluggableInvShelfIdx,
       "pluggableInvSlotTypeIdx": pluggableInvSlotTypeIdx,
       "pluggableInvSlotIdx": pluggableInvSlotIdx,
       "pluggableInvPortIdx": pluggableInvPortIdx,
       "pluggableInvType": pluggableInvType,
       "pluggableInvPEC": pluggableInvPEC,
       "pluggableInvCLEI": pluggableInvCLEI,
       "pluggableInvVendorName": pluggableInvVendorName,
       "pluggableInvVendorOUI": pluggableInvVendorOUI,
       "pluggableInvVendorPartNum": pluggableInvVendorPartNum,
       "pluggableInvVendorRev": pluggableInvVendorRev,
       "pluggableInvVendorSerialNum": pluggableInvVendorSerialNum,
       "pluggableInvMfgDate": pluggableInvMfgDate,
       "pluggableInvConnectorType": pluggableInvConnectorType,
       "pluggableInvMinBitRate": pluggableInvMinBitRate,
       "pluggableInvMaxBitRate": pluggableInvMaxBitRate,
       "pluggableInvNomBitRate": pluggableInvNomBitRate,
       "pluggableInvEncoding": pluggableInvEncoding,
       "pluggableInvWavelength": pluggableInvWavelength,
       "pluggableInvReach": pluggableInvReach,
       "pluggableInvTxFaultImpl": pluggableInvTxFaultImpl,
       "pluggableInvLOSImpl": pluggableInvLOSImpl,
       "pluggableInvDDiagImpl": pluggableInvDDiagImpl,
       "pluggableInvTxDisableImpl": pluggableInvTxDisableImpl,
       "pluggableInvMedia": pluggableInvMedia,
       "pluggableInvUSI": pluggableInvUSI,
       "pluggableInvWavelengthMin": pluggableInvWavelengthMin,
       "pluggableInvWavelengthMax": pluggableInvWavelengthMax,
       "pluggableInvWavelengthSpacing": pluggableInvWavelengthSpacing,
       "slotInvDataTable": slotInvDataTable,
       "slotInvDataEntry": slotInvDataEntry,
       "slotInvDataShelfIdx": slotInvDataShelfIdx,
       "slotInvDataSlotTypeIdx": slotInvDataSlotTypeIdx,
       "slotInvDataSlotIdx": slotInvDataSlotIdx,
       "slotInvDataRecordIdx": slotInvDataRecordIdx,
       "slotInvDataNameIdx": slotInvDataNameIdx,
       "slotInvDataValue": slotInvDataValue,
       "equipment": equipment,
       "shelfTable": shelfTable,
       "shelfEntry": shelfEntry,
       "shelfIdx": shelfIdx,
       "shelfProvConfig": shelfProvConfig,
       "shelfDiscConfig": shelfDiscConfig,
       "shelfType": shelfType,
       "shelfPEC": shelfPEC,
       "shelfAdminStatus": shelfAdminStatus,
       "shelfOperStatus": shelfOperStatus,
       "shelfOperStatQlfr": shelfOperStatQlfr,
       "shelfId": shelfId,
       "shelfCustom1": shelfCustom1,
       "shelfCustom2": shelfCustom2,
       "shelfCustom3": shelfCustom3,
       "shelfPowerFeedA": shelfPowerFeedA,
       "shelfPowerFeedB": shelfPowerFeedB,
       "shelfRowStatus": shelfRowStatus,
       "cpTable": cpTable,
       "cpEntry": cpEntry,
       "cpTypeIdx": cpTypeIdx,
       "cpShelfIdx": cpShelfIdx,
       "cpSlotIdx": cpSlotIdx,
       "cpPEC": cpPEC,
       "cpAdminStatus": cpAdminStatus,
       "cpOperStatus": cpOperStatus,
       "cpOperStatQlfr": cpOperStatQlfr,
       "cpId": cpId,
       "cpCustom1": cpCustom1,
       "cpCustom2": cpCustom2,
       "cpCustom3": cpCustom3,
       "cpUpgradeStage": cpUpgradeStage,
       "cpUpgradeResult": cpUpgradeResult,
       "cpRowStatus": cpRowStatus,
       "facilities": facilities,
       "oaTable": oaTable,
       "oaEntry": oaEntry,
       "oaTypeIdx": oaTypeIdx,
       "oaShelfIdx": oaShelfIdx,
       "oaSlotIdx": oaSlotIdx,
       "oaIdx": oaIdx,
       "oaCaseTempMaxTh": oaCaseTempMaxTh,
       "oaCaseTempMaxShutdownTh": oaCaseTempMaxShutdownTh,
       "oaLaserTempMinShutdownTh": oaLaserTempMinShutdownTh,
       "oaLaserTempMaxShutdownTh": oaLaserTempMaxShutdownTh,
       "oaOpticalPwrReceivedMinTh": oaOpticalPwrReceivedMinTh,
       "oaOpticalPwrReceivedMaxTh": oaOpticalPwrReceivedMaxTh,
       "oaSSIOpticalPwrReceivedMaxTh": oaSSIOpticalPwrReceivedMaxTh,
       "oaOpticalPwrTransmittedMinTh": oaOpticalPwrTransmittedMinTh,
       "oaOpticalPwrTransmittedMaxTh": oaOpticalPwrTransmittedMaxTh,
       "oaBackReflectionSafetyTh": oaBackReflectionSafetyTh,
       "oaMSInsertionLossMaxTh": oaMSInsertionLossMaxTh,
       "oaCaseTemp": oaCaseTemp,
       "oaLaser1Temp": oaLaser1Temp,
       "oaLaser2Temp": oaLaser2Temp,
       "oaOpticalPwrReceived": oaOpticalPwrReceived,
       "oaSSIOpticalPwrReceived": oaSSIOpticalPwrReceived,
       "oaOpticalPwrTransmitted": oaOpticalPwrTransmitted,
       "oaMSInsertionLoss": oaMSInsertionLoss,
       "oaEffectiveGain": oaEffectiveGain,
       "oaFSOOpticalPwrTransmitted": oaFSOOpticalPwrTransmitted,
       "oaLaser1Current": oaLaser1Current,
       "oaLaser2Current": oaLaser2Current,
       "oaLaser1Power": oaLaser1Power,
       "oaLaser2Power": oaLaser2Power,
       "oaOpticalBackReflection": oaOpticalBackReflection,
       "oaVariableOpticalAttenuation": oaVariableOpticalAttenuation,
       "oaAdminStatus": oaAdminStatus,
       "oaOperStatus": oaOperStatus,
       "oaOperStatQlfr": oaOperStatQlfr,
       "oaAutoEnableTimer": oaAutoEnableTimer,
       "oaActAutoEnableTimer": oaActAutoEnableTimer,
       "oaModeSetting": oaModeSetting,
       "oaGainSetting": oaGainSetting,
       "oaPwrSetting": oaPwrSetting,
       "oaTiltCompSetting": oaTiltCompSetting,
       "oaStatus": oaStatus,
       "oaLaserStatus": oaLaserStatus,
       "oaId1": oaId1,
       "oaId2": oaId2,
       "oaFiberType": oaFiberType,
       "oaGrid": oaGrid,
       "oaNumChannels": oaNumChannels,
       "oaCustom1": oaCustom1,
       "oaCustom2": oaCustom2,
       "oaCustom3": oaCustom3,
       "oaWavelength": oaWavelength,
       "oaRemoteId": oaRemoteId,
       "oaRowStatus": oaRowStatus,
       "xcvrTable": xcvrTable,
       "xcvrEntry": xcvrEntry,
       "xcvrTypeIdx": xcvrTypeIdx,
       "xcvrShelfIdx": xcvrShelfIdx,
       "xcvrSlotIdx": xcvrSlotIdx,
       "xcvrIdx": xcvrIdx,
       "xcvrOpticalPwrReceivedMinTh": xcvrOpticalPwrReceivedMinTh,
       "xcvrOpticalPwrReceivedMaxTh": xcvrOpticalPwrReceivedMaxTh,
       "xcvrOpticalPwrTransmittedMinTh": xcvrOpticalPwrTransmittedMinTh,
       "xcvrOpticalPwrTransmittedMaxTh": xcvrOpticalPwrTransmittedMaxTh,
       "xcvrOpticalPwrReceived": xcvrOpticalPwrReceived,
       "xcvrOpticalPwrTransmitted": xcvrOpticalPwrTransmitted,
       "xcvrProtSwEvtType": xcvrProtSwEvtType,
       "xcvrPEC": xcvrPEC,
       "xcvrAdminStatus": xcvrAdminStatus,
       "xcvrOperStatus": xcvrOperStatus,
       "xcvrOperStatQlfr": xcvrOperStatQlfr,
       "xcvrAutoEnableTimer": xcvrAutoEnableTimer,
       "xcvrActAutoEnableTimer": xcvrActAutoEnableTimer,
       "xcvrProtocol": xcvrProtocol,
       "xcvrWavelength": xcvrWavelength,
       "xcvrVendorPN1": xcvrVendorPN1,
       "xcvrVendorPN2": xcvrVendorPN2,
       "xcvrVendorPN3": xcvrVendorPN3,
       "xcvrPhyPMMon": xcvrPhyPMMon,
       "xcvrFPSD": xcvrFPSD,
       "xcvrLaserStatus": xcvrLaserStatus,
       "xcvrId1": xcvrId1,
       "xcvrId2": xcvrId2,
       "xcvrFiberType": xcvrFiberType,
       "xcvrGrid": xcvrGrid,
       "xcvrCustom1": xcvrCustom1,
       "xcvrCustom2": xcvrCustom2,
       "xcvrCustom3": xcvrCustom3,
       "xcvrTraceLabel": xcvrTraceLabel,
       "xcvrExpectedTraceLabel": xcvrExpectedTraceLabel,
       "xcvrReceivedTraceLabel": xcvrReceivedTraceLabel,
       "xcvrSDBERTh": xcvrSDBERTh,
       "xcvrLoopbackType": xcvrLoopbackType,
       "xcvrRemoteId": xcvrRemoteId,
       "xcvrRowStatus": xcvrRowStatus,
       "amdTable": amdTable,
       "amdEntry": amdEntry,
       "amdTypeIdx": amdTypeIdx,
       "amdShelfIdx": amdShelfIdx,
       "amdSlotIdx": amdSlotIdx,
       "amdLineIdx": amdLineIdx,
       "amdPortIdx": amdPortIdx,
       "amdOpticalPwrReceivedMinTh": amdOpticalPwrReceivedMinTh,
       "amdOpticalPwrReceivedMaxTh": amdOpticalPwrReceivedMaxTh,
       "amdOpticalPwrTransmittedTarget": amdOpticalPwrTransmittedTarget,
       "amdOpticalAttenuationTarget": amdOpticalAttenuationTarget,
       "amdOpticalPwrReceived": amdOpticalPwrReceived,
       "amdOpticalPwrTransmitted": amdOpticalPwrTransmitted,
       "amdOpticalAttentuation": amdOpticalAttentuation,
       "amdAdminStatus": amdAdminStatus,
       "amdOperStatus": amdOperStatus,
       "amdOperStatQlfr": amdOperStatQlfr,
       "amdAutoEnableTimer": amdAutoEnableTimer,
       "amdActAutoEnableTimer": amdActAutoEnableTimer,
       "amdWavelength": amdWavelength,
       "amdId1": amdId1,
       "amdId2": amdId2,
       "amdFiberType": amdFiberType,
       "amdGrid": amdGrid,
       "amdCustom1": amdCustom1,
       "amdCustom2": amdCustom2,
       "amdCustom3": amdCustom3,
       "amdRowStatus": amdRowStatus,
       "passivePortTable": passivePortTable,
       "passivePortEntry": passivePortEntry,
       "passivePortCpTypeIdx": passivePortCpTypeIdx,
       "passivePortShelfIdx": passivePortShelfIdx,
       "passivePortSlotIdx": passivePortSlotIdx,
       "passivePortLineIdx": passivePortLineIdx,
       "passivePortTypeIdx": passivePortTypeIdx,
       "passivePortId1": passivePortId1,
       "passivePortId2": passivePortId2,
       "passivePortFiberType": passivePortFiberType,
       "passivePortGrid": passivePortGrid,
       "passivePortNumChannels": passivePortNumChannels,
       "passivePortWavelength": passivePortWavelength,
       "passivePortCustom1": passivePortCustom1,
       "passivePortCustom2": passivePortCustom2,
       "passivePortCustom3": passivePortCustom3,
       "passivePortRemoteId": passivePortRemoteId,
       "passivePortRowStatus": passivePortRowStatus,
       "ocnTable": ocnTable,
       "ocnEntry": ocnEntry,
       "ocnTypeIdx": ocnTypeIdx,
       "ocnShelfIdx": ocnShelfIdx,
       "ocnSlotIdx": ocnSlotIdx,
       "ocnPortIdx": ocnPortIdx,
       "ocnOpticalPwrReceivedMinTh": ocnOpticalPwrReceivedMinTh,
       "ocnOpticalPwrReceivedMaxTh": ocnOpticalPwrReceivedMaxTh,
       "ocnOpticalPwrTransmittedMinTh": ocnOpticalPwrTransmittedMinTh,
       "ocnOpticalPwrTransmittedMaxTh": ocnOpticalPwrTransmittedMaxTh,
       "ocnOpticalPwrReceived": ocnOpticalPwrReceived,
       "ocnOpticalPwrTransmitted": ocnOpticalPwrTransmitted,
       "ocnBER": ocnBER,
       "ocnBERTh": ocnBERTh,
       "ocnPEC": ocnPEC,
       "ocnAdminStatus": ocnAdminStatus,
       "ocnOperStatus": ocnOperStatus,
       "ocnOperStatQlfr": ocnOperStatQlfr,
       "ocnAutoEnableTimer": ocnAutoEnableTimer,
       "ocnActAutoEnableTimer": ocnActAutoEnableTimer,
       "ocnWavelength": ocnWavelength,
       "ocnVendorPN1": ocnVendorPN1,
       "ocnVendorPN2": ocnVendorPN2,
       "ocnVendorPN3": ocnVendorPN3,
       "ocnPhyPMMon": ocnPhyPMMon,
       "ocnLaserStatus": ocnLaserStatus,
       "ocnId1": ocnId1,
       "ocnFiberType": ocnFiberType,
       "ocnCustom1": ocnCustom1,
       "ocnTOHTransparency": ocnTOHTransparency,
       "ocnLineMapping": ocnLineMapping,
       "ocnProtSwEvtType": ocnProtSwEvtType,
       "ocnDCCTransparency": ocnDCCTransparency,
       "ocnTransparencyChannel": ocnTransparencyChannel,
       "ocnRemoteId": ocnRemoteId,
       "ocnRowStatus": ocnRowStatus,
       "stsnTable": stsnTable,
       "stsnEntry": stsnEntry,
       "stsnTypeIdx": stsnTypeIdx,
       "stsnShelfIdx": stsnShelfIdx,
       "stsnSlotIdx": stsnSlotIdx,
       "stsnPortIdx": stsnPortIdx,
       "stsnIdx": stsnIdx,
       "stsnProtSwEvtType": stsnProtSwEvtType,
       "stsnBER": stsnBER,
       "stsnBERTh": stsnBERTh,
       "stsnProtSwStatus": stsnProtSwStatus,
       "stmnTable": stmnTable,
       "stmnEntry": stmnEntry,
       "stmnTypeIdx": stmnTypeIdx,
       "stmnShelfIdx": stmnShelfIdx,
       "stmnSlotIdx": stmnSlotIdx,
       "stmnPortIdx": stmnPortIdx,
       "stmnOpticalPwrReceivedMinTh": stmnOpticalPwrReceivedMinTh,
       "stmnOpticalPwrReceivedMaxTh": stmnOpticalPwrReceivedMaxTh,
       "stmnOpticalPwrTransmittedMinTh": stmnOpticalPwrTransmittedMinTh,
       "stmnOpticalPwrTransmittedMaxTh": stmnOpticalPwrTransmittedMaxTh,
       "stmnOpticalPwrReceived": stmnOpticalPwrReceived,
       "stmnOpticalPwrTransmitted": stmnOpticalPwrTransmitted,
       "stmnBER": stmnBER,
       "stmnBERTh": stmnBERTh,
       "stmnPEC": stmnPEC,
       "stmnAdminStatus": stmnAdminStatus,
       "stmnOperStatus": stmnOperStatus,
       "stmnOperStatQlfr": stmnOperStatQlfr,
       "stmnAutoEnableTimer": stmnAutoEnableTimer,
       "stmnActAutoEnableTimer": stmnActAutoEnableTimer,
       "stmnWavelength": stmnWavelength,
       "stmnVendorPN1": stmnVendorPN1,
       "stmnVendorPN2": stmnVendorPN2,
       "stmnVendorPN3": stmnVendorPN3,
       "stmnPhyPMMon": stmnPhyPMMon,
       "stmnLaserStatus": stmnLaserStatus,
       "stmnId1": stmnId1,
       "stmnFiberType": stmnFiberType,
       "stmnCustom1": stmnCustom1,
       "stmnTOHTransparency": stmnTOHTransparency,
       "stmnLineMapping": stmnLineMapping,
       "stmnProtSwEvtType": stmnProtSwEvtType,
       "stmnDCCTransparency": stmnDCCTransparency,
       "stmnTransparencyChannel": stmnTransparencyChannel,
       "stmnRemoteId": stmnRemoteId,
       "stmnRowStatus": stmnRowStatus,
       "vcnTable": vcnTable,
       "vcnEntry": vcnEntry,
       "vcnTypeIdx": vcnTypeIdx,
       "vcnShelfIdx": vcnShelfIdx,
       "vcnSlotIdx": vcnSlotIdx,
       "vcnPortIdx": vcnPortIdx,
       "vcnIdx": vcnIdx,
       "vcnProtSwEvtType": vcnProtSwEvtType,
       "vcnBER": vcnBER,
       "vcnBERTh": vcnBERTh,
       "vcnProtSwStatus": vcnProtSwStatus,
       "geTable": geTable,
       "geEntry": geEntry,
       "geShelfIdx": geShelfIdx,
       "geSlotIdx": geSlotIdx,
       "gePortIdx": gePortIdx,
       "geOpticalPwrReceivedMinTh": geOpticalPwrReceivedMinTh,
       "geOpticalPwrReceivedMaxTh": geOpticalPwrReceivedMaxTh,
       "geOpticalPwrTransmittedMinTh": geOpticalPwrTransmittedMinTh,
       "geOpticalPwrTransmittedMaxTh": geOpticalPwrTransmittedMaxTh,
       "geOpticalPwrReceived": geOpticalPwrReceived,
       "geOpticalPwrTransmitted": geOpticalPwrTransmitted,
       "gePEC": gePEC,
       "geAdminStatus": geAdminStatus,
       "geOperStatus": geOperStatus,
       "geOperStatQlfr": geOperStatQlfr,
       "geAutoEnableTimer": geAutoEnableTimer,
       "geActAutoEnableTimer": geActAutoEnableTimer,
       "geWavelength": geWavelength,
       "geVendorPN1": geVendorPN1,
       "geVendorPN2": geVendorPN2,
       "geVendorPN3": geVendorPN3,
       "gePhyPMMon": gePhyPMMon,
       "geFPSD": geFPSD,
       "geLaserStatus": geLaserStatus,
       "geId1": geId1,
       "geFiberType": geFiberType,
       "geCustom1": geCustom1,
       "geSpeed": geSpeed,
       "geDuplex": geDuplex,
       "geMediaRate": geMediaRate,
       "geMTU": geMTU,
       "geMACAddr": geMACAddr,
       "geGfpMode": geGfpMode,
       "geFlowControl": geFlowControl,
       "geRemoteId": geRemoteId,
       "geRowStatus": geRowStatus,
       "feTable": feTable,
       "feEntry": feEntry,
       "feShelfIdx": feShelfIdx,
       "feSlotIdx": feSlotIdx,
       "fePortIdx": fePortIdx,
       "feId1": feId1,
       "feCustom1": feCustom1,
       "feSpeed": feSpeed,
       "feDuplex": feDuplex,
       "feMediaRate": feMediaRate,
       "feMTU": feMTU,
       "feMACAddr": feMACAddr,
       "feRemoteId": feRemoteId,
       "feRowStatus": feRowStatus,
       "vcgTable": vcgTable,
       "vcgEntry": vcgEntry,
       "vcgShelfIdx": vcgShelfIdx,
       "vcgSlotIdx": vcgSlotIdx,
       "vcgPortIdx": vcgPortIdx,
       "vcgIdx": vcgIdx,
       "vcgType": vcgType,
       "vcgTimeSlotIndices": vcgTimeSlotIndices,
       "vcgRowStatus": vcgRowStatus,
       "fcTable": fcTable,
       "fcEntry": fcEntry,
       "fcShelfIdx": fcShelfIdx,
       "fcSlotIdx": fcSlotIdx,
       "fcPortIdx": fcPortIdx,
       "fcRate": fcRate,
       "fcOpticalPwrReceivedMinTh": fcOpticalPwrReceivedMinTh,
       "fcOpticalPwrReceivedMaxTh": fcOpticalPwrReceivedMaxTh,
       "fcOpticalPwrTransmittedMinTh": fcOpticalPwrTransmittedMinTh,
       "fcOpticalPwrTransmittedMaxTh": fcOpticalPwrTransmittedMaxTh,
       "fcOpticalPwrReceived": fcOpticalPwrReceived,
       "fcOpticalPwrTransmitted": fcOpticalPwrTransmitted,
       "fcPEC": fcPEC,
       "fcAdminStatus": fcAdminStatus,
       "fcOperStatus": fcOperStatus,
       "fcOperStatQlfr": fcOperStatQlfr,
       "fcAutoEnableTimer": fcAutoEnableTimer,
       "fcActAutoEnableTimer": fcActAutoEnableTimer,
       "fcWavelength": fcWavelength,
       "fcVendorPN1": fcVendorPN1,
       "fcVendorPN2": fcVendorPN2,
       "fcVendorPN3": fcVendorPN3,
       "fcPhyPMMon": fcPhyPMMon,
       "fcFPSD": fcFPSD,
       "fcLaserStatus": fcLaserStatus,
       "fcId1": fcId1,
       "fcFiberType": fcFiberType,
       "fcCustom1": fcCustom1,
       "fcGfpMode": fcGfpMode,
       "fcRemoteId": fcRemoteId,
       "fcRowStatus": fcRowStatus,
       "ethIntfTable": ethIntfTable,
       "ethIntfEntry": ethIntfEntry,
       "ethIntfShelfIdx": ethIntfShelfIdx,
       "ethIntfSlotIdx": ethIntfSlotIdx,
       "ethIntfPortTypeIdx": ethIntfPortTypeIdx,
       "ethIntfPortIdx": ethIntfPortIdx,
       "ethIntfOpticalPwrReceivedMinTh": ethIntfOpticalPwrReceivedMinTh,
       "ethIntfOpticalPwrReceivedMaxTh": ethIntfOpticalPwrReceivedMaxTh,
       "ethIntfOpticalPwrTransmittedMinTh": ethIntfOpticalPwrTransmittedMinTh,
       "ethIntfOpticalPwrTransmittedMaxTh": ethIntfOpticalPwrTransmittedMaxTh,
       "ethIntfOpticalPwrReceived": ethIntfOpticalPwrReceived,
       "ethIntfOpticalPwrTransmitted": ethIntfOpticalPwrTransmitted,
       "ethIntfPEC": ethIntfPEC,
       "ethIntfAdminStatus": ethIntfAdminStatus,
       "ethIntfOperStatus": ethIntfOperStatus,
       "ethIntfOperStatQlfr": ethIntfOperStatQlfr,
       "ethIntfAutoEnableTimer": ethIntfAutoEnableTimer,
       "ethIntfActAutoEnableTimer": ethIntfActAutoEnableTimer,
       "ethIntfWavelength": ethIntfWavelength,
       "ethIntfVendorPN1": ethIntfVendorPN1,
       "ethIntfVendorPN2": ethIntfVendorPN2,
       "ethIntfVendorPN3": ethIntfVendorPN3,
       "ethIntfPhyPMMon": ethIntfPhyPMMon,
       "ethIntfFPSD": ethIntfFPSD,
       "ethIntfLaserStatus": ethIntfLaserStatus,
       "ethIntfId1": ethIntfId1,
       "ethIntfFiberType": ethIntfFiberType,
       "ethIntfCustom1": ethIntfCustom1,
       "ethIntfSpeed": ethIntfSpeed,
       "ethIntfDuplex": ethIntfDuplex,
       "ethIntfMediaRate": ethIntfMediaRate,
       "ethIntfMTU": ethIntfMTU,
       "ethIntfLinkStatus": ethIntfLinkStatus,
       "ethIntfLagId": ethIntfLagId,
       "ethIntfLagPortPriority": ethIntfLagPortPriority,
       "ethIntfBER": ethIntfBER,
       "ethIntfMACAddr": ethIntfMACAddr,
       "ethIntfLineMapping": ethIntfLineMapping,
       "ethIntfErrorCorrection": ethIntfErrorCorrection,
       "ethIntfLpbkOpCmd": ethIntfLpbkOpCmd,
       "ethIntfRemoteId": ethIntfRemoteId,
       "ethIntfMirrorConfig": ethIntfMirrorConfig,
       "ethIntfLldpAdminStatus": ethIntfLldpAdminStatus,
       "ethIntfLldpRemChassisIdSubtype": ethIntfLldpRemChassisIdSubtype,
       "ethIntfLldpRemChassisId": ethIntfLldpRemChassisId,
       "ethIntfLldpRemPortIdSubtype": ethIntfLldpRemPortIdSubtype,
       "ethIntfLldpRemPortId": ethIntfLldpRemPortId,
       "ethIntfBouncingStateChangeCount": ethIntfBouncingStateChangeCount,
       "ethIntfRowStatus": ethIntfRowStatus,
       "odunTable": odunTable,
       "odunEntry": odunEntry,
       "odunTypeIdx": odunTypeIdx,
       "odunShelfIdx": odunShelfIdx,
       "odunSlotIdx": odunSlotIdx,
       "odunPortIdx": odunPortIdx,
       "odunIdx": odunIdx,
       "briTable": briTable,
       "briEntry": briEntry,
       "briShelfIdx": briShelfIdx,
       "briSlotIdx": briSlotIdx,
       "briPortIdx": briPortIdx,
       "briProtocol": briProtocol,
       "briOpticalPwrReceivedMinTh": briOpticalPwrReceivedMinTh,
       "briOpticalPwrReceivedMaxTh": briOpticalPwrReceivedMaxTh,
       "briOpticalPwrTransmittedMinTh": briOpticalPwrTransmittedMinTh,
       "briOpticalPwrTransmittedMaxTh": briOpticalPwrTransmittedMaxTh,
       "briOpticalPwrReceived": briOpticalPwrReceived,
       "briOpticalPwrTransmitted": briOpticalPwrTransmitted,
       "briPEC": briPEC,
       "briAdminStatus": briAdminStatus,
       "briOperStatus": briOperStatus,
       "briOperStatQlfr": briOperStatQlfr,
       "briAutoEnableTimer": briAutoEnableTimer,
       "briActAutoEnableTimer": briActAutoEnableTimer,
       "briWavelength": briWavelength,
       "briVendorPN1": briVendorPN1,
       "briVendorPN2": briVendorPN2,
       "briVendorPN3": briVendorPN3,
       "briPhyPMMon": briPhyPMMon,
       "briLaserStatus": briLaserStatus,
       "briId1": briId1,
       "briFiberType": briFiberType,
       "briCustom1": briCustom1,
       "briBitRate": briBitRate,
       "briRemoteId": briRemoteId,
       "briRowStatus": briRowStatus,
       "dataComms": dataComms,
       "oscTable": oscTable,
       "oscEntry": oscEntry,
       "oscShelfIdx": oscShelfIdx,
       "oscSlotIdx": oscSlotIdx,
       "oscIdx": oscIdx,
       "oscAdminStatus": oscAdminStatus,
       "oscOperStatus": oscOperStatus,
       "oscOperStatQlfr": oscOperStatQlfr,
       "oscCustom1": oscCustom1,
       "oscType": oscType,
       "oscUnmbrd": oscUnmbrd,
       "oscSpeed": oscSpeed,
       "oscDuplex": oscDuplex,
       "oscMediaRate": oscMediaRate,
       "oscMTU": oscMTU,
       "oscMACAddr": oscMACAddr,
       "oscIPAddr": oscIPAddr,
       "oscIPMask": oscIPMask,
       "oscIPBcast": oscIPBcast,
       "oscRowStatus": oscRowStatus,
       "netMgmtTable": netMgmtTable,
       "netMgmtEntry": netMgmtEntry,
       "netMgmtIdx": netMgmtIdx,
       "netMgmtAdminStatus": netMgmtAdminStatus,
       "netMgmtOperStatus": netMgmtOperStatus,
       "netMgmtOperStatQlfr": netMgmtOperStatQlfr,
       "netMgmtIPAddr": netMgmtIPAddr,
       "netMgmtIPMask": netMgmtIPMask,
       "netMgmtIPBcast": netMgmtIPBcast,
       "netMgmtCustom1": netMgmtCustom1,
       "netMgmtType": netMgmtType,
       "netMgmtUnmbrd": netMgmtUnmbrd,
       "netMgmtSpeed": netMgmtSpeed,
       "netMgmtDuplex": netMgmtDuplex,
       "netMgmtMediaRate": netMgmtMediaRate,
       "netMgmtMTU": netMgmtMTU,
       "netMgmtMACAddr": netMgmtMACAddr,
       "serialTable": serialTable,
       "serialEntry": serialEntry,
       "serialPortIdx": serialPortIdx,
       "serialBaudRate": serialBaudRate,
       "serialDataBits": serialDataBits,
       "serialParity": serialParity,
       "serialStopBits": serialStopBits,
       "gcc0ConfigTable": gcc0ConfigTable,
       "gcc0ConfigEntry": gcc0ConfigEntry,
       "gcc0ConfigCpTypeIdx": gcc0ConfigCpTypeIdx,
       "gcc0ConfigShelfIdx": gcc0ConfigShelfIdx,
       "gcc0ConfigSlotIdx": gcc0ConfigSlotIdx,
       "gcc0ConfigPortIdx": gcc0ConfigPortIdx,
       "gcc0ConfigMode": gcc0ConfigMode,
       "gcc0ConfigAdminStatus": gcc0ConfigAdminStatus,
       "gcc0ConfigOperStatus": gcc0ConfigOperStatus,
       "gcc0ConfigOperStatQlfr": gcc0ConfigOperStatQlfr,
       "gcc0ConfigRowStatus": gcc0ConfigRowStatus,
       "ipExtInterfaceTable": ipExtInterfaceTable,
       "ipExtInterfaceTableEntry": ipExtInterfaceTableEntry,
       "pvxL2IntfSubPortNumber": pvxL2IntfSubPortNumber,
       "ipExtIntfPrimaryState": ipExtIntfPrimaryState,
       "ipExtIntfSecondaryState": ipExtIntfSecondaryState,
       "ipExtIntfCmdPrimaryState": ipExtIntfCmdPrimaryState,
       "ipExtIntfNumberedStatus": ipExtIntfNumberedStatus,
       "ipExtIntfAddressType": ipExtIntfAddressType,
       "ipExtIntfAddress": ipExtIntfAddress,
       "ipExtIntfSubnetMask": ipExtIntfSubnetMask,
       "ipExtIntfProxyARPStatus": ipExtIntfProxyARPStatus,
       "ipExtIntfDescription": ipExtIntfDescription,
       "ipExtIntfMACAddr": ipExtIntfMACAddr,
       "ipExtIntfOperStatus": ipExtIntfOperStatus,
       "ipExtIntfType": ipExtIntfType,
       "ipExtIntfBroadcastAddress": ipExtIntfBroadcastAddress,
       "ipExtIntfSpeed": ipExtIntfSpeed,
       "ipExtIntfMode": ipExtIntfMode,
       "ipExtIntfMTUSize": ipExtIntfMTUSize,
       "ipExtIntfLastChange": ipExtIntfLastChange,
       "ipExtIntfGateway": ipExtIntfGateway,
       "ipExtIntfRowStatus": ipExtIntfRowStatus,
       "performance": performance,
       "oaCrntPMTable": oaCrntPMTable,
       "oaCrntPMEntry": oaCrntPMEntry,
       "oaCrntPMOaTypeIdx": oaCrntPMOaTypeIdx,
       "oaCrntPMShelfIdx": oaCrntPMShelfIdx,
       "oaCrntPMSlotIdx": oaCrntPMSlotIdx,
       "oaCrntPMOaIdx": oaCrntPMOaIdx,
       "oaCrntPMIntervalTypeIdx": oaCrntPMIntervalTypeIdx,
       "oaCrntPMCaseTempValue": oaCrntPMCaseTempValue,
       "oaCrntPMCaseTempTimeStamp": oaCrntPMCaseTempTimeStamp,
       "oaCrntPMCaseTempValidity": oaCrntPMCaseTempValidity,
       "oaCrntPMLaser1TempValue": oaCrntPMLaser1TempValue,
       "oaCrntPMLaser1TempTimeStamp": oaCrntPMLaser1TempTimeStamp,
       "oaCrntPMLaser1TempValidity": oaCrntPMLaser1TempValidity,
       "oaCrntPMLaser2TempValue": oaCrntPMLaser2TempValue,
       "oaCrntPMLaser2TempTimeStamp": oaCrntPMLaser2TempTimeStamp,
       "oaCrntPMLaser2TempValidity": oaCrntPMLaser2TempValidity,
       "oaCrntPMOPRValue": oaCrntPMOPRValue,
       "oaCrntPMOPRTimeStamp": oaCrntPMOPRTimeStamp,
       "oaCrntPMOPRValidity": oaCrntPMOPRValidity,
       "oaCrntPMSSIOPRValue": oaCrntPMSSIOPRValue,
       "oaCrntPMSSIOPRTimeStamp": oaCrntPMSSIOPRTimeStamp,
       "oaCrntPMSSIOPRValidity": oaCrntPMSSIOPRValidity,
       "oaCrntPMOPTValue": oaCrntPMOPTValue,
       "oaCrntPMOPTTimeStamp": oaCrntPMOPTTimeStamp,
       "oaCrntPMOPTValidity": oaCrntPMOPTValidity,
       "oaCrntPMMSInsLossValue": oaCrntPMMSInsLossValue,
       "oaCrntPMMSInsLossTimeStamp": oaCrntPMMSInsLossTimeStamp,
       "oaCrntPMMSInsLossValidity": oaCrntPMMSInsLossValidity,
       "oaCrntPMEffectiveGainValue": oaCrntPMEffectiveGainValue,
       "oaCrntPMEffectiveGainTimeStamp": oaCrntPMEffectiveGainTimeStamp,
       "oaCrntPMEffectiveGainValidity": oaCrntPMEffectiveGainValidity,
       "oaCrntPMFSOOPTValue": oaCrntPMFSOOPTValue,
       "oaCrntPMFSOOPTTimeStamp": oaCrntPMFSOOPTTimeStamp,
       "oaCrntPMFSOOPTValidity": oaCrntPMFSOOPTValidity,
       "oaCrntPMLaser1CurrentValue": oaCrntPMLaser1CurrentValue,
       "oaCrntPMLaser1CurrentTimeStamp": oaCrntPMLaser1CurrentTimeStamp,
       "oaCrntPMLaser1CurrentValidity": oaCrntPMLaser1CurrentValidity,
       "oaCrntPMLaser2CurrentValue": oaCrntPMLaser2CurrentValue,
       "oaCrntPMLaser2CurrentTimeStamp": oaCrntPMLaser2CurrentTimeStamp,
       "oaCrntPMLaser2CurrentValidity": oaCrntPMLaser2CurrentValidity,
       "oaCrntPMLaser1PowerValue": oaCrntPMLaser1PowerValue,
       "oaCrntPMLaser1PowerTimeStamp": oaCrntPMLaser1PowerTimeStamp,
       "oaCrntPMLaser1PowerValidity": oaCrntPMLaser1PowerValidity,
       "oaCrntPMLaser2PowerValue": oaCrntPMLaser2PowerValue,
       "oaCrntPMLaser2PowerTimeStamp": oaCrntPMLaser2PowerTimeStamp,
       "oaCrntPMLaser2PowerValidity": oaCrntPMLaser2PowerValidity,
       "oaCrntPMOBRValue": oaCrntPMOBRValue,
       "oaCrntPMOBRTimeStamp": oaCrntPMOBRTimeStamp,
       "oaCrntPMOBRValidity": oaCrntPMOBRValidity,
       "oaCrntPMVOAValue": oaCrntPMVOAValue,
       "oaCrntPMVOATimeStamp": oaCrntPMVOATimeStamp,
       "oaCrntPMVOAValidity": oaCrntPMVOAValidity,
       "oaHistPMTable": oaHistPMTable,
       "oaHistPMEntry": oaHistPMEntry,
       "oaHistPMOaTypeIdx": oaHistPMOaTypeIdx,
       "oaHistPMShelfIdx": oaHistPMShelfIdx,
       "oaHistPMSlotIdx": oaHistPMSlotIdx,
       "oaHistPMOaIdx": oaHistPMOaIdx,
       "oaHistPMIntervalTypeIdx": oaHistPMIntervalTypeIdx,
       "oaHistPMIntervalIdx": oaHistPMIntervalIdx,
       "oaHistPMCaseTempValue": oaHistPMCaseTempValue,
       "oaHistPMCaseTempTimeStamp": oaHistPMCaseTempTimeStamp,
       "oaHistPMCaseTempValidity": oaHistPMCaseTempValidity,
       "oaHistPMLaser1TempValue": oaHistPMLaser1TempValue,
       "oaHistPMLaser1TempTimeStamp": oaHistPMLaser1TempTimeStamp,
       "oaHistPMLaser1TempValidity": oaHistPMLaser1TempValidity,
       "oaHistPMLaser2TempValue": oaHistPMLaser2TempValue,
       "oaHistPMLaser2TempTimeStamp": oaHistPMLaser2TempTimeStamp,
       "oaHistPMLaser2TempValidity": oaHistPMLaser2TempValidity,
       "oaHistPMOPRValue": oaHistPMOPRValue,
       "oaHistPMOPRTimeStamp": oaHistPMOPRTimeStamp,
       "oaHistPMOPRValidity": oaHistPMOPRValidity,
       "oaHistPMSSIOPRValue": oaHistPMSSIOPRValue,
       "oaHistPMSSIOPRTimeStamp": oaHistPMSSIOPRTimeStamp,
       "oaHistPMSSIOPRValidity": oaHistPMSSIOPRValidity,
       "oaHistPMOPTValue": oaHistPMOPTValue,
       "oaHistPMOPTTimeStamp": oaHistPMOPTTimeStamp,
       "oaHistPMOPTValidity": oaHistPMOPTValidity,
       "oaHistPMMSInsLossValue": oaHistPMMSInsLossValue,
       "oaHistPMMSInsLossTimeStamp": oaHistPMMSInsLossTimeStamp,
       "oaHistPMMSInsLossValidity": oaHistPMMSInsLossValidity,
       "oaHistPMEffectiveGainValue": oaHistPMEffectiveGainValue,
       "oaHistPMEffectiveGainTimeStamp": oaHistPMEffectiveGainTimeStamp,
       "oaHistPMEffectiveGainValidity": oaHistPMEffectiveGainValidity,
       "oaHistPMFSOOPTValue": oaHistPMFSOOPTValue,
       "oaHistPMFSOOPTTimeStamp": oaHistPMFSOOPTTimeStamp,
       "oaHistPMFSOOPTValidity": oaHistPMFSOOPTValidity,
       "oaHistPMLaser1CurrentValue": oaHistPMLaser1CurrentValue,
       "oaHistPMLaser1CurrentTimeStamp": oaHistPMLaser1CurrentTimeStamp,
       "oaHistPMLaser1CurrentValidity": oaHistPMLaser1CurrentValidity,
       "oaHistPMLaser2CurrentValue": oaHistPMLaser2CurrentValue,
       "oaHistPMLaser2CurrentTimeStamp": oaHistPMLaser2CurrentTimeStamp,
       "oaHistPMLaser2CurrentValidity": oaHistPMLaser2CurrentValidity,
       "oaHistPMLaser1PowerValue": oaHistPMLaser1PowerValue,
       "oaHistPMLaser1PowerTimeStamp": oaHistPMLaser1PowerTimeStamp,
       "oaHistPMLaser1PowerValidity": oaHistPMLaser1PowerValidity,
       "oaHistPMLaser2PowerValue": oaHistPMLaser2PowerValue,
       "oaHistPMLaser2PowerTimeStamp": oaHistPMLaser2PowerTimeStamp,
       "oaHistPMLaser2PowerValidity": oaHistPMLaser2PowerValidity,
       "oaHistPMOBRValue": oaHistPMOBRValue,
       "oaHistPMOBRTimeStamp": oaHistPMOBRTimeStamp,
       "oaHistPMOBRValidity": oaHistPMOBRValidity,
       "oaHistPMVOAValue": oaHistPMVOAValue,
       "oaHistPMVOATimeStamp": oaHistPMVOATimeStamp,
       "oaHistPMVOAValidity": oaHistPMVOAValidity,
       "xcvrCrntPMTable": xcvrCrntPMTable,
       "xcvrCrntPMEntry": xcvrCrntPMEntry,
       "xcvrCrntPMTypeIdx": xcvrCrntPMTypeIdx,
       "xcvrCrntPMShelfIdx": xcvrCrntPMShelfIdx,
       "xcvrCrntPMSlotIdx": xcvrCrntPMSlotIdx,
       "xcvrCrntPMIdx": xcvrCrntPMIdx,
       "xcvrCrntPMIntervalTypeIdx": xcvrCrntPMIntervalTypeIdx,
       "xcvrCrntPMOPRValue": xcvrCrntPMOPRValue,
       "xcvrCrntPMOPRTimeStamp": xcvrCrntPMOPRTimeStamp,
       "xcvrCrntPMOPRValidity": xcvrCrntPMOPRValidity,
       "xcvrCrntPMOPTValue": xcvrCrntPMOPTValue,
       "xcvrCrntPMOPTTimeStamp": xcvrCrntPMOPTTimeStamp,
       "xcvrCrntPMOPTValidity": xcvrCrntPMOPTValidity,
       "xcvrCrntPMTempValue": xcvrCrntPMTempValue,
       "xcvrCrntPMTempTimeStamp": xcvrCrntPMTempTimeStamp,
       "xcvrCrntPMTempValidity": xcvrCrntPMTempValidity,
       "xcvrCrntPMSupplyVoltageValue": xcvrCrntPMSupplyVoltageValue,
       "xcvrCrntPMSupplyVoltageTimeStamp": xcvrCrntPMSupplyVoltageTimeStamp,
       "xcvrCrntPMSupplyVoltageValidity": xcvrCrntPMSupplyVoltageValidity,
       "xcvrCrntPMLBCValue": xcvrCrntPMLBCValue,
       "xcvrCrntPMLBCTimeStamp": xcvrCrntPMLBCTimeStamp,
       "xcvrCrntPMLBCValidity": xcvrCrntPMLBCValidity,
       "xcvrCrntPMCVSValue": xcvrCrntPMCVSValue,
       "xcvrCrntPMCVSTimeStamp": xcvrCrntPMCVSTimeStamp,
       "xcvrCrntPMCVSValidity": xcvrCrntPMCVSValidity,
       "xcvrCrntPMESSValue": xcvrCrntPMESSValue,
       "xcvrCrntPMESSTimeStamp": xcvrCrntPMESSTimeStamp,
       "xcvrCrntPMESSValidity": xcvrCrntPMESSValidity,
       "xcvrCrntPMSESSValue": xcvrCrntPMSESSValue,
       "xcvrCrntPMSESSTimeStamp": xcvrCrntPMSESSTimeStamp,
       "xcvrCrntPMSESSValidity": xcvrCrntPMSESSValidity,
       "xcvrCrntPMSEFSSValue": xcvrCrntPMSEFSSValue,
       "xcvrCrntPMSEFSSTimeStamp": xcvrCrntPMSEFSSTimeStamp,
       "xcvrCrntPMSEFSSValidity": xcvrCrntPMSEFSSValidity,
       "xcvrCrntPMRSEBValue": xcvrCrntPMRSEBValue,
       "xcvrCrntPMRSEBTimeStamp": xcvrCrntPMRSEBTimeStamp,
       "xcvrCrntPMRSEBValidity": xcvrCrntPMRSEBValidity,
       "xcvrCrntPMRSBBEValue": xcvrCrntPMRSBBEValue,
       "xcvrCrntPMRSBBETimeStamp": xcvrCrntPMRSBBETimeStamp,
       "xcvrCrntPMRSBBEValidity": xcvrCrntPMRSBBEValidity,
       "xcvrCrntPMRSESValue": xcvrCrntPMRSESValue,
       "xcvrCrntPMRSESTimeStamp": xcvrCrntPMRSESTimeStamp,
       "xcvrCrntPMRSESValidity": xcvrCrntPMRSESValidity,
       "xcvrCrntPMRSSESValue": xcvrCrntPMRSSESValue,
       "xcvrCrntPMRSSESTimeStamp": xcvrCrntPMRSSESTimeStamp,
       "xcvrCrntPMRSSESValidity": xcvrCrntPMRSSESValidity,
       "xcvrCrntPMRSOFSValue": xcvrCrntPMRSOFSValue,
       "xcvrCrntPMRSOFSTimeStamp": xcvrCrntPMRSOFSTimeStamp,
       "xcvrCrntPMRSOFSValidity": xcvrCrntPMRSOFSValidity,
       "xcvrCrntPMCVValue": xcvrCrntPMCVValue,
       "xcvrCrntPMCVTimeStamp": xcvrCrntPMCVTimeStamp,
       "xcvrCrntPMCVValidity": xcvrCrntPMCVValidity,
       "xcvrCrntPMESValue": xcvrCrntPMESValue,
       "xcvrCrntPMESTimeStamp": xcvrCrntPMESTimeStamp,
       "xcvrCrntPMESValidity": xcvrCrntPMESValidity,
       "xcvrCrntPMSESValue": xcvrCrntPMSESValue,
       "xcvrCrntPMSESTimeStamp": xcvrCrntPMSESTimeStamp,
       "xcvrCrntPMSESValidity": xcvrCrntPMSESValidity,
       "xcvrCrntPMINVBLKValue": xcvrCrntPMINVBLKValue,
       "xcvrCrntPMINVBLKTimeStamp": xcvrCrntPMINVBLKTimeStamp,
       "xcvrCrntPMINVBLKValidity": xcvrCrntPMINVBLKValidity,
       "xcvrCrntPMNBITCRValue": xcvrCrntPMNBITCRValue,
       "xcvrCrntPMNBITCRTimeStamp": xcvrCrntPMNBITCRTimeStamp,
       "xcvrCrntPMNBITCRValidity": xcvrCrntPMNBITCRValidity,
       "xcvrCrntPMNBYTCRValue": xcvrCrntPMNBYTCRValue,
       "xcvrCrntPMNBYTCRTimeStamp": xcvrCrntPMNBYTCRTimeStamp,
       "xcvrCrntPMNBYTCRValidity": xcvrCrntPMNBYTCRValidity,
       "xcvrCrntPMUNCRCDWValue": xcvrCrntPMUNCRCDWValue,
       "xcvrCrntPMUNCRCDWTimeStamp": xcvrCrntPMUNCRCDWTimeStamp,
       "xcvrCrntPMUNCRCDWValidity": xcvrCrntPMUNCRCDWValidity,
       "xcvrCrntPMTBYCRXValue": xcvrCrntPMTBYCRXValue,
       "xcvrCrntPMTBYCRXTimeStamp": xcvrCrntPMTBYCRXTimeStamp,
       "xcvrCrntPMTBYCRXValidity": xcvrCrntPMTBYCRXValidity,
       "xcvrCrntPMTBYCRXInitialize": xcvrCrntPMTBYCRXInitialize,
       "xcvrCrntPMTFRCRXValue": xcvrCrntPMTFRCRXValue,
       "xcvrCrntPMTFRCRXTimeStamp": xcvrCrntPMTFRCRXTimeStamp,
       "xcvrCrntPMTFRCRXValidity": xcvrCrntPMTFRCRXValidity,
       "xcvrCrntPMTFRCRXInitialize": xcvrCrntPMTFRCRXInitialize,
       "xcvrCrntPMBCSTValue": xcvrCrntPMBCSTValue,
       "xcvrCrntPMBCSTTimeStamp": xcvrCrntPMBCSTTimeStamp,
       "xcvrCrntPMBCSTValidity": xcvrCrntPMBCSTValidity,
       "xcvrCrntPMBCSTInitialize": xcvrCrntPMBCSTInitialize,
       "xcvrCrntPMMCSTValue": xcvrCrntPMMCSTValue,
       "xcvrCrntPMMCSTTimeStamp": xcvrCrntPMMCSTTimeStamp,
       "xcvrCrntPMMCSTValidity": xcvrCrntPMMCSTValidity,
       "xcvrCrntPMMCSTInitialize": xcvrCrntPMMCSTInitialize,
       "xcvrCrntPMSIZE64Value": xcvrCrntPMSIZE64Value,
       "xcvrCrntPMSIZE64TimeStamp": xcvrCrntPMSIZE64TimeStamp,
       "xcvrCrntPMSIZE64Validity": xcvrCrntPMSIZE64Validity,
       "xcvrCrntPMSIZE64Initialize": xcvrCrntPMSIZE64Initialize,
       "xcvrCrntPMSIZE65To127Value": xcvrCrntPMSIZE65To127Value,
       "xcvrCrntPMSIZE65To127TimeStamp": xcvrCrntPMSIZE65To127TimeStamp,
       "xcvrCrntPMSIZE65To127Validity": xcvrCrntPMSIZE65To127Validity,
       "xcvrCrntPMSIZE65To127Initialize": xcvrCrntPMSIZE65To127Initialize,
       "xcvrCrntPMSIZE128To255Value": xcvrCrntPMSIZE128To255Value,
       "xcvrCrntPMSIZE128To255TimeStamp": xcvrCrntPMSIZE128To255TimeStamp,
       "xcvrCrntPMSIZE128To255Validity": xcvrCrntPMSIZE128To255Validity,
       "xcvrCrntPMSIZE128To255Initialize": xcvrCrntPMSIZE128To255Initialize,
       "xcvrCrntPMSIZE256To511Value": xcvrCrntPMSIZE256To511Value,
       "xcvrCrntPMSIZE256To511TimeStamp": xcvrCrntPMSIZE256To511TimeStamp,
       "xcvrCrntPMSIZE256To511Validity": xcvrCrntPMSIZE256To511Validity,
       "xcvrCrntPMSIZE256To511Initialize": xcvrCrntPMSIZE256To511Initialize,
       "xcvrCrntPMSIZE512To1023Value": xcvrCrntPMSIZE512To1023Value,
       "xcvrCrntPMSIZE512To1023TimeStamp": xcvrCrntPMSIZE512To1023TimeStamp,
       "xcvrCrntPMSIZE512To1023Validity": xcvrCrntPMSIZE512To1023Validity,
       "xcvrCrntPMSIZE512To1023Initialize": xcvrCrntPMSIZE512To1023Initialize,
       "xcvrCrntPMSIZE1024To1518Value": xcvrCrntPMSIZE1024To1518Value,
       "xcvrCrntPMSIZE1024To1518TimeStamp": xcvrCrntPMSIZE1024To1518TimeStamp,
       "xcvrCrntPMSIZE1024To1518Validity": xcvrCrntPMSIZE1024To1518Validity,
       "xcvrCrntPMSIZE1024To1518Initialize": xcvrCrntPMSIZE1024To1518Initialize,
       "xcvrCrntPMSIZEOver1518Value": xcvrCrntPMSIZEOver1518Value,
       "xcvrCrntPMSIZEOver1518TimeStamp": xcvrCrntPMSIZEOver1518TimeStamp,
       "xcvrCrntPMSIZEOver1518Validity": xcvrCrntPMSIZEOver1518Validity,
       "xcvrCrntPMSIZEOver1518Initialize": xcvrCrntPMSIZEOver1518Initialize,
       "xcvrCrntPMFCSEValue": xcvrCrntPMFCSEValue,
       "xcvrCrntPMFCSETimeStamp": xcvrCrntPMFCSETimeStamp,
       "xcvrCrntPMFCSEValidity": xcvrCrntPMFCSEValidity,
       "xcvrCrntPMFRDRValue": xcvrCrntPMFRDRValue,
       "xcvrCrntPMFRDRTimeStamp": xcvrCrntPMFRDRTimeStamp,
       "xcvrCrntPMFRDRValidity": xcvrCrntPMFRDRValidity,
       "xcvrCrntPMUSIZEValue": xcvrCrntPMUSIZEValue,
       "xcvrCrntPMUSIZETimeStamp": xcvrCrntPMUSIZETimeStamp,
       "xcvrCrntPMUSIZEValidity": xcvrCrntPMUSIZEValidity,
       "xcvrCrntPMOSIZEValue": xcvrCrntPMOSIZEValue,
       "xcvrCrntPMOSIZETimeStamp": xcvrCrntPMOSIZETimeStamp,
       "xcvrCrntPMOSIZEValidity": xcvrCrntPMOSIZEValidity,
       "xcvrCrntPMFRGTValue": xcvrCrntPMFRGTValue,
       "xcvrCrntPMFRGTTimeStamp": xcvrCrntPMFRGTTimeStamp,
       "xcvrCrntPMFRGTValidity": xcvrCrntPMFRGTValidity,
       "xcvrCrntPMJABRValue": xcvrCrntPMJABRValue,
       "xcvrCrntPMJABRTimeStamp": xcvrCrntPMJABRTimeStamp,
       "xcvrCrntPMJABRValidity": xcvrCrntPMJABRValidity,
       "xcvrCrntPMOTUEBValue": xcvrCrntPMOTUEBValue,
       "xcvrCrntPMOTUEBTimeStamp": xcvrCrntPMOTUEBTimeStamp,
       "xcvrCrntPMOTUEBValidity": xcvrCrntPMOTUEBValidity,
       "xcvrCrntPMOTUBBEValue": xcvrCrntPMOTUBBEValue,
       "xcvrCrntPMOTUBBETimeStamp": xcvrCrntPMOTUBBETimeStamp,
       "xcvrCrntPMOTUBBEValidity": xcvrCrntPMOTUBBEValidity,
       "xcvrCrntPMOTUESValue": xcvrCrntPMOTUESValue,
       "xcvrCrntPMOTUESTimeStamp": xcvrCrntPMOTUESTimeStamp,
       "xcvrCrntPMOTUESValidity": xcvrCrntPMOTUESValidity,
       "xcvrCrntPMOTUSESValue": xcvrCrntPMOTUSESValue,
       "xcvrCrntPMOTUSESTimeStamp": xcvrCrntPMOTUSESTimeStamp,
       "xcvrCrntPMOTUSESValidity": xcvrCrntPMOTUSESValidity,
       "xcvrCrntPMOTUOFSValue": xcvrCrntPMOTUOFSValue,
       "xcvrCrntPMOTUOFSTimeStamp": xcvrCrntPMOTUOFSTimeStamp,
       "xcvrCrntPMOTUOFSValidity": xcvrCrntPMOTUOFSValidity,
       "xcvrCrntPMSupplyVoltage2Value": xcvrCrntPMSupplyVoltage2Value,
       "xcvrCrntPMSupplyVoltage2TimeStamp": xcvrCrntPMSupplyVoltage2TimeStamp,
       "xcvrCrntPMSupplyVoltage2Validity": xcvrCrntPMSupplyVoltage2Validity,
       "xcvrCrntPMCVSInitialize": xcvrCrntPMCVSInitialize,
       "xcvrCrntPMESSInitialize": xcvrCrntPMESSInitialize,
       "xcvrCrntPMSESSInitialize": xcvrCrntPMSESSInitialize,
       "xcvrCrntPMSEFSSInitialize": xcvrCrntPMSEFSSInitialize,
       "xcvrCrntPMRSEBInitialize": xcvrCrntPMRSEBInitialize,
       "xcvrCrntPMRSBBEInitialize": xcvrCrntPMRSBBEInitialize,
       "xcvrCrntPMRSESInitialize": xcvrCrntPMRSESInitialize,
       "xcvrCrntPMRSSESInitialize": xcvrCrntPMRSSESInitialize,
       "xcvrCrntPMRSOFSInitialize": xcvrCrntPMRSOFSInitialize,
       "xcvrCrntPMCVInitialize": xcvrCrntPMCVInitialize,
       "xcvrCrntPMESInitialize": xcvrCrntPMESInitialize,
       "xcvrCrntPMSESInitialize": xcvrCrntPMSESInitialize,
       "xcvrCrntPMINVBLKInitialize": xcvrCrntPMINVBLKInitialize,
       "xcvrCrntPMNBITCRInitialize": xcvrCrntPMNBITCRInitialize,
       "xcvrCrntPMNBYTCRInitialize": xcvrCrntPMNBYTCRInitialize,
       "xcvrCrntPMUNCRCDWInitialize": xcvrCrntPMUNCRCDWInitialize,
       "xcvrCrntPMFCSEInitialize": xcvrCrntPMFCSEInitialize,
       "xcvrCrntPMFRDRInitialize": xcvrCrntPMFRDRInitialize,
       "xcvrCrntPMUSIZEInitialize": xcvrCrntPMUSIZEInitialize,
       "xcvrCrntPMOSIZEInitialize": xcvrCrntPMOSIZEInitialize,
       "xcvrCrntPMFRGTInitialize": xcvrCrntPMFRGTInitialize,
       "xcvrCrntPMJABRInitialize": xcvrCrntPMJABRInitialize,
       "xcvrCrntPMOTUEBInitialize": xcvrCrntPMOTUEBInitialize,
       "xcvrCrntPMOTUBBEInitialize": xcvrCrntPMOTUBBEInitialize,
       "xcvrCrntPMOTUESInitialize": xcvrCrntPMOTUESInitialize,
       "xcvrCrntPMOTUSESInitialize": xcvrCrntPMOTUSESInitialize,
       "xcvrCrntPMOTUOFSInitialize": xcvrCrntPMOTUOFSInitialize,
       "xcvrCrntPMUASSValue": xcvrCrntPMUASSValue,
       "xcvrCrntPMUASSTimeStamp": xcvrCrntPMUASSTimeStamp,
       "xcvrCrntPMUASSValidity": xcvrCrntPMUASSValidity,
       "xcvrCrntPMUASSInitialize": xcvrCrntPMUASSInitialize,
       "xcvrCrntPMRSUASValue": xcvrCrntPMRSUASValue,
       "xcvrCrntPMRSUASTimeStamp": xcvrCrntPMRSUASTimeStamp,
       "xcvrCrntPMRSUASValidity": xcvrCrntPMRSUASValidity,
       "xcvrCrntPMRSUASInitialize": xcvrCrntPMRSUASInitialize,
       "xcvrCrntPMUASValue": xcvrCrntPMUASValue,
       "xcvrCrntPMUASTimeStamp": xcvrCrntPMUASTimeStamp,
       "xcvrCrntPMUASValidity": xcvrCrntPMUASValidity,
       "xcvrCrntPMUASInitialize": xcvrCrntPMUASInitialize,
       "xcvrCrntPMOTUUASValue": xcvrCrntPMOTUUASValue,
       "xcvrCrntPMOTUUASTimeStamp": xcvrCrntPMOTUUASTimeStamp,
       "xcvrCrntPMOTUUASValidity": xcvrCrntPMOTUUASValidity,
       "xcvrCrntPMOTUUASInitialize": xcvrCrntPMOTUUASInitialize,
       "xcvrCrntPMOTNBERValue": xcvrCrntPMOTNBERValue,
       "xcvrCrntPMOTNBERTimeStamp": xcvrCrntPMOTNBERTimeStamp,
       "xcvrCrntPMOTNBERValidity": xcvrCrntPMOTNBERValidity,
       "xcvrCrntPMOTNBERInitialize": xcvrCrntPMOTNBERInitialize,
       "xcvrCrntPMOTNAVGBERValue": xcvrCrntPMOTNAVGBERValue,
       "xcvrCrntPMOTNAVGBERTimeStamp": xcvrCrntPMOTNAVGBERTimeStamp,
       "xcvrCrntPMOTNAVGBERValidity": xcvrCrntPMOTNAVGBERValidity,
       "xcvrCrntPMOTNAVGBERInitialize": xcvrCrntPMOTNAVGBERInitialize,
       "xcvrCrntPMNBITCR64BitValue": xcvrCrntPMNBITCR64BitValue,
       "xcvrCrntPMNBITCR64BitTimeStamp": xcvrCrntPMNBITCR64BitTimeStamp,
       "xcvrCrntPMNBITCR64BitValidity": xcvrCrntPMNBITCR64BitValidity,
       "xcvrCrntPMNBITCR64BitInitialize": xcvrCrntPMNBITCR64BitInitialize,
       "xcvrCrntPMNBYTCR64BitValue": xcvrCrntPMNBYTCR64BitValue,
       "xcvrCrntPMNBYTCR64BitTimeStamp": xcvrCrntPMNBYTCR64BitTimeStamp,
       "xcvrCrntPMNBYTCR64BitValidity": xcvrCrntPMNBYTCR64BitValidity,
       "xcvrCrntPMNBYTCR64BitInitialize": xcvrCrntPMNBYTCR64BitInitialize,
       "xcvrCrntPMOPRMinValue": xcvrCrntPMOPRMinValue,
       "xcvrCrntPMOPRMinTimeStamp": xcvrCrntPMOPRMinTimeStamp,
       "xcvrCrntPMOPRMinValidity": xcvrCrntPMOPRMinValidity,
       "xcvrCrntPMOPRMinInitialize": xcvrCrntPMOPRMinInitialize,
       "xcvrCrntPMOPRMaxValue": xcvrCrntPMOPRMaxValue,
       "xcvrCrntPMOPRMaxTimeStamp": xcvrCrntPMOPRMaxTimeStamp,
       "xcvrCrntPMOPRMaxValidity": xcvrCrntPMOPRMaxValidity,
       "xcvrCrntPMOPRMaxInitialize": xcvrCrntPMOPRMaxInitialize,
       "xcvrCrntPMOPRAvgValue": xcvrCrntPMOPRAvgValue,
       "xcvrCrntPMOPRAvgTimeStamp": xcvrCrntPMOPRAvgTimeStamp,
       "xcvrCrntPMOPRAvgValidity": xcvrCrntPMOPRAvgValidity,
       "xcvrCrntPMOPRAvgInitialize": xcvrCrntPMOPRAvgInitialize,
       "xcvrCrntPMOPTMinValue": xcvrCrntPMOPTMinValue,
       "xcvrCrntPMOPTMinTimeStamp": xcvrCrntPMOPTMinTimeStamp,
       "xcvrCrntPMOPTMinValidity": xcvrCrntPMOPTMinValidity,
       "xcvrCrntPMOPTMinInitialize": xcvrCrntPMOPTMinInitialize,
       "xcvrCrntPMOPTMaxValue": xcvrCrntPMOPTMaxValue,
       "xcvrCrntPMOPTMaxTimeStamp": xcvrCrntPMOPTMaxTimeStamp,
       "xcvrCrntPMOPTMaxValidity": xcvrCrntPMOPTMaxValidity,
       "xcvrCrntPMOPTMaxInitialize": xcvrCrntPMOPTMaxInitialize,
       "xcvrCrntPMOPTAvgValue": xcvrCrntPMOPTAvgValue,
       "xcvrCrntPMOPTAvgTimeStamp": xcvrCrntPMOPTAvgTimeStamp,
       "xcvrCrntPMOPTAvgValidity": xcvrCrntPMOPTAvgValidity,
       "xcvrCrntPMOPTAvgInitialize": xcvrCrntPMOPTAvgInitialize,
       "xcvrHistPMTable": xcvrHistPMTable,
       "xcvrHistPMEntry": xcvrHistPMEntry,
       "xcvrHistPMTypeIdx": xcvrHistPMTypeIdx,
       "xcvrHistPMShelfIdx": xcvrHistPMShelfIdx,
       "xcvrHistPMSlotIdx": xcvrHistPMSlotIdx,
       "xcvrHistPMIdx": xcvrHistPMIdx,
       "xcvrHistPMIntervalTypeIdx": xcvrHistPMIntervalTypeIdx,
       "xcvrHistPMIntervalIdx": xcvrHistPMIntervalIdx,
       "xcvrHistPMOPRValue": xcvrHistPMOPRValue,
       "xcvrHistPMOPRTimeStamp": xcvrHistPMOPRTimeStamp,
       "xcvrHistPMOPRValidity": xcvrHistPMOPRValidity,
       "xcvrHistPMOPTValue": xcvrHistPMOPTValue,
       "xcvrHistPMOPTTimeStamp": xcvrHistPMOPTTimeStamp,
       "xcvrHistPMOPTValidity": xcvrHistPMOPTValidity,
       "xcvrHistPMTempValue": xcvrHistPMTempValue,
       "xcvrHistPMTempTimeStamp": xcvrHistPMTempTimeStamp,
       "xcvrHistPMTempValidity": xcvrHistPMTempValidity,
       "xcvrHistPMSupplyVoltageValue": xcvrHistPMSupplyVoltageValue,
       "xcvrHistPMSupplyVoltageTimeStamp": xcvrHistPMSupplyVoltageTimeStamp,
       "xcvrHistPMSupplyVoltageValidity": xcvrHistPMSupplyVoltageValidity,
       "xcvrHistPMLBCValue": xcvrHistPMLBCValue,
       "xcvrHistPMLBCTimeStamp": xcvrHistPMLBCTimeStamp,
       "xcvrHistPMLBCValidity": xcvrHistPMLBCValidity,
       "xcvrHistPMCVSValue": xcvrHistPMCVSValue,
       "xcvrHistPMCVSTimeStamp": xcvrHistPMCVSTimeStamp,
       "xcvrHistPMCVSValidity": xcvrHistPMCVSValidity,
       "xcvrHistPMESSValue": xcvrHistPMESSValue,
       "xcvrHistPMESSTimeStamp": xcvrHistPMESSTimeStamp,
       "xcvrHistPMESSValidity": xcvrHistPMESSValidity,
       "xcvrHistPMSESSValue": xcvrHistPMSESSValue,
       "xcvrHistPMSESSTimeStamp": xcvrHistPMSESSTimeStamp,
       "xcvrHistPMSESSValidity": xcvrHistPMSESSValidity,
       "xcvrHistPMSEFSSValue": xcvrHistPMSEFSSValue,
       "xcvrHistPMSEFSSTimeStamp": xcvrHistPMSEFSSTimeStamp,
       "xcvrHistPMSEFSSValidity": xcvrHistPMSEFSSValidity,
       "xcvrHistPMRSEBValue": xcvrHistPMRSEBValue,
       "xcvrHistPMRSEBTimeStamp": xcvrHistPMRSEBTimeStamp,
       "xcvrHistPMRSEBValidity": xcvrHistPMRSEBValidity,
       "xcvrHistPMRSBBEValue": xcvrHistPMRSBBEValue,
       "xcvrHistPMRSBBETimeStamp": xcvrHistPMRSBBETimeStamp,
       "xcvrHistPMRSBBEValidity": xcvrHistPMRSBBEValidity,
       "xcvrHistPMRSESValue": xcvrHistPMRSESValue,
       "xcvrHistPMRSESTimeStamp": xcvrHistPMRSESTimeStamp,
       "xcvrHistPMRSESValidity": xcvrHistPMRSESValidity,
       "xcvrHistPMRSSESValue": xcvrHistPMRSSESValue,
       "xcvrHistPMRSSESTimeStamp": xcvrHistPMRSSESTimeStamp,
       "xcvrHistPMRSSESValidity": xcvrHistPMRSSESValidity,
       "xcvrHistPMRSOFSValue": xcvrHistPMRSOFSValue,
       "xcvrHistPMRSOFSTimeStamp": xcvrHistPMRSOFSTimeStamp,
       "xcvrHistPMRSOFSValidity": xcvrHistPMRSOFSValidity,
       "xcvrHistPMCVValue": xcvrHistPMCVValue,
       "xcvrHistPMCVTimeStamp": xcvrHistPMCVTimeStamp,
       "xcvrHistPMCVValidity": xcvrHistPMCVValidity,
       "xcvrHistPMESValue": xcvrHistPMESValue,
       "xcvrHistPMESTimeStamp": xcvrHistPMESTimeStamp,
       "xcvrHistPMESValidity": xcvrHistPMESValidity,
       "xcvrHistPMSESValue": xcvrHistPMSESValue,
       "xcvrHistPMSESTimeStamp": xcvrHistPMSESTimeStamp,
       "xcvrHistPMSESValidity": xcvrHistPMSESValidity,
       "xcvrHistPMINVBLKValue": xcvrHistPMINVBLKValue,
       "xcvrHistPMINVBLKTimeStamp": xcvrHistPMINVBLKTimeStamp,
       "xcvrHistPMINVBLKValidity": xcvrHistPMINVBLKValidity,
       "xcvrHistPMNBITCRValue": xcvrHistPMNBITCRValue,
       "xcvrHistPMNBITCRTimeStamp": xcvrHistPMNBITCRTimeStamp,
       "xcvrHistPMNBITCRValidity": xcvrHistPMNBITCRValidity,
       "xcvrHistPMNBYTCRValue": xcvrHistPMNBYTCRValue,
       "xcvrHistPMNBYTCRTimeStamp": xcvrHistPMNBYTCRTimeStamp,
       "xcvrHistPMNBYTCRValidity": xcvrHistPMNBYTCRValidity,
       "xcvrHistPMUNCRCDWValue": xcvrHistPMUNCRCDWValue,
       "xcvrHistPMUNCRCDWTimeStamp": xcvrHistPMUNCRCDWTimeStamp,
       "xcvrHistPMUNCRCDWValidity": xcvrHistPMUNCRCDWValidity,
       "xcvrHistPMTBYCRXValue": xcvrHistPMTBYCRXValue,
       "xcvrHistPMTBYCRXTimeStamp": xcvrHistPMTBYCRXTimeStamp,
       "xcvrHistPMTBYCRXValidity": xcvrHistPMTBYCRXValidity,
       "xcvrHistPMTBYCRXInitialize": xcvrHistPMTBYCRXInitialize,
       "xcvrHistPMTFRCRXValue": xcvrHistPMTFRCRXValue,
       "xcvrHistPMTFRCRXTimeStamp": xcvrHistPMTFRCRXTimeStamp,
       "xcvrHistPMTFRCRXValidity": xcvrHistPMTFRCRXValidity,
       "xcvrHistPMTFRCRXInitialize": xcvrHistPMTFRCRXInitialize,
       "xcvrHistPMBCSTValue": xcvrHistPMBCSTValue,
       "xcvrHistPMBCSTTimeStamp": xcvrHistPMBCSTTimeStamp,
       "xcvrHistPMBCSTValidity": xcvrHistPMBCSTValidity,
       "xcvrHistPMBCSTInitialize": xcvrHistPMBCSTInitialize,
       "xcvrHistPMMCSTValue": xcvrHistPMMCSTValue,
       "xcvrHistPMMCSTTimeStamp": xcvrHistPMMCSTTimeStamp,
       "xcvrHistPMMCSTValidity": xcvrHistPMMCSTValidity,
       "xcvrHistPMMCSTInitialize": xcvrHistPMMCSTInitialize,
       "xcvrHistPMSIZE64Value": xcvrHistPMSIZE64Value,
       "xcvrHistPMSIZE64TimeStamp": xcvrHistPMSIZE64TimeStamp,
       "xcvrHistPMSIZE64Validity": xcvrHistPMSIZE64Validity,
       "xcvrHistPMSIZE64Initialize": xcvrHistPMSIZE64Initialize,
       "xcvrHistPMSIZE65To127Value": xcvrHistPMSIZE65To127Value,
       "xcvrHistPMSIZE65To127TimeStamp": xcvrHistPMSIZE65To127TimeStamp,
       "xcvrHistPMSIZE65To127Validity": xcvrHistPMSIZE65To127Validity,
       "xcvrHistPMSIZE65To127Initialize": xcvrHistPMSIZE65To127Initialize,
       "xcvrHistPMSIZE128To255Value": xcvrHistPMSIZE128To255Value,
       "xcvrHistPMSIZE128To255TimeStamp": xcvrHistPMSIZE128To255TimeStamp,
       "xcvrHistPMSIZE128To255Validity": xcvrHistPMSIZE128To255Validity,
       "xcvrHistPMSIZE128To255Initialize": xcvrHistPMSIZE128To255Initialize,
       "xcvrHistPMSIZE256To511Value": xcvrHistPMSIZE256To511Value,
       "xcvrHistPMSIZE256To511TimeStamp": xcvrHistPMSIZE256To511TimeStamp,
       "xcvrHistPMSIZE256To511Validity": xcvrHistPMSIZE256To511Validity,
       "xcvrHistPMSIZE256To511Initialize": xcvrHistPMSIZE256To511Initialize,
       "xcvrHistPMSIZE512To1023Value": xcvrHistPMSIZE512To1023Value,
       "xcvrHistPMSIZE512To1023TimeStamp": xcvrHistPMSIZE512To1023TimeStamp,
       "xcvrHistPMSIZE512To1023Validity": xcvrHistPMSIZE512To1023Validity,
       "xcvrHistPMSIZE512To1023Initialize": xcvrHistPMSIZE512To1023Initialize,
       "xcvrHistPMSIZE1024To1518Value": xcvrHistPMSIZE1024To1518Value,
       "xcvrHistPMSIZE1024To1518TimeStamp": xcvrHistPMSIZE1024To1518TimeStamp,
       "xcvrHistPMSIZE1024To1518Validity": xcvrHistPMSIZE1024To1518Validity,
       "xcvrHistPMSIZE1024To1518Initialize": xcvrHistPMSIZE1024To1518Initialize,
       "xcvrHistPMSIZEOver1518Value": xcvrHistPMSIZEOver1518Value,
       "xcvrHistPMSIZEOver1518TimeStamp": xcvrHistPMSIZEOver1518TimeStamp,
       "xcvrHistPMSIZEOver1518Validity": xcvrHistPMSIZEOver1518Validity,
       "xcvrHistPMSIZEOver1518Initialize": xcvrHistPMSIZEOver1518Initialize,
       "xcvrHistPMFCSEValue": xcvrHistPMFCSEValue,
       "xcvrHistPMFCSETimeStamp": xcvrHistPMFCSETimeStamp,
       "xcvrHistPMFCSEValidity": xcvrHistPMFCSEValidity,
       "xcvrHistPMFRDRValue": xcvrHistPMFRDRValue,
       "xcvrHistPMFRDRTimeStamp": xcvrHistPMFRDRTimeStamp,
       "xcvrHistPMFRDRValidity": xcvrHistPMFRDRValidity,
       "xcvrHistPMUSIZEValue": xcvrHistPMUSIZEValue,
       "xcvrHistPMUSIZETimeStamp": xcvrHistPMUSIZETimeStamp,
       "xcvrHistPMUSIZEValidity": xcvrHistPMUSIZEValidity,
       "xcvrHistPMOSIZEValue": xcvrHistPMOSIZEValue,
       "xcvrHistPMOSIZETimeStamp": xcvrHistPMOSIZETimeStamp,
       "xcvrHistPMOSIZEValidity": xcvrHistPMOSIZEValidity,
       "xcvrHistPMFRGTValue": xcvrHistPMFRGTValue,
       "xcvrHistPMFRGTTimeStamp": xcvrHistPMFRGTTimeStamp,
       "xcvrHistPMFRGTValidity": xcvrHistPMFRGTValidity,
       "xcvrHistPMJABRValue": xcvrHistPMJABRValue,
       "xcvrHistPMJABRTimeStamp": xcvrHistPMJABRTimeStamp,
       "xcvrHistPMJABRValidity": xcvrHistPMJABRValidity,
       "xcvrHistPMOTUEBValue": xcvrHistPMOTUEBValue,
       "xcvrHistPMOTUEBTimeStamp": xcvrHistPMOTUEBTimeStamp,
       "xcvrHistPMOTUEBValidity": xcvrHistPMOTUEBValidity,
       "xcvrHistPMOTUBBEValue": xcvrHistPMOTUBBEValue,
       "xcvrHistPMOTUBBETimeStamp": xcvrHistPMOTUBBETimeStamp,
       "xcvrHistPMOTUBBEValidity": xcvrHistPMOTUBBEValidity,
       "xcvrHistPMOTUESValue": xcvrHistPMOTUESValue,
       "xcvrHistPMOTUESTimeStamp": xcvrHistPMOTUESTimeStamp,
       "xcvrHistPMOTUESValidity": xcvrHistPMOTUESValidity,
       "xcvrHistPMOTUSESValue": xcvrHistPMOTUSESValue,
       "xcvrHistPMOTUSESTimeStamp": xcvrHistPMOTUSESTimeStamp,
       "xcvrHistPMOTUSESValidity": xcvrHistPMOTUSESValidity,
       "xcvrHistPMOTUOFSValue": xcvrHistPMOTUOFSValue,
       "xcvrHistPMOTUOFSTimeStamp": xcvrHistPMOTUOFSTimeStamp,
       "xcvrHistPMOTUOFSValidity": xcvrHistPMOTUOFSValidity,
       "xcvrHistPMSupplyVoltage2Value": xcvrHistPMSupplyVoltage2Value,
       "xcvrHistPMSupplyVoltage2TimeStamp": xcvrHistPMSupplyVoltage2TimeStamp,
       "xcvrHistPMSupplyVoltage2Validity": xcvrHistPMSupplyVoltage2Validity,
       "xcvrHistPMCVSInitialize": xcvrHistPMCVSInitialize,
       "xcvrHistPMESSInitialize": xcvrHistPMESSInitialize,
       "xcvrHistPMSESSInitialize": xcvrHistPMSESSInitialize,
       "xcvrHistPMSEFSSInitialize": xcvrHistPMSEFSSInitialize,
       "xcvrHistPMRSEBInitialize": xcvrHistPMRSEBInitialize,
       "xcvrHistPMRSBBEInitialize": xcvrHistPMRSBBEInitialize,
       "xcvrHistPMRSESInitialize": xcvrHistPMRSESInitialize,
       "xcvrHistPMRSSESInitialize": xcvrHistPMRSSESInitialize,
       "xcvrHistPMRSOFSInitialize": xcvrHistPMRSOFSInitialize,
       "xcvrHistPMCVInitialize": xcvrHistPMCVInitialize,
       "xcvrHistPMESInitialize": xcvrHistPMESInitialize,
       "xcvrHistPMSESInitialize": xcvrHistPMSESInitialize,
       "xcvrHistPMINVBLKInitialize": xcvrHistPMINVBLKInitialize,
       "xcvrHistPMNBITCRInitialize": xcvrHistPMNBITCRInitialize,
       "xcvrHistPMNBYTCRInitialize": xcvrHistPMNBYTCRInitialize,
       "xcvrHistPMUNCRCDWInitialize": xcvrHistPMUNCRCDWInitialize,
       "xcvrHistPMFCSEInitialize": xcvrHistPMFCSEInitialize,
       "xcvrHistPMFRDRInitialize": xcvrHistPMFRDRInitialize,
       "xcvrHistPMUSIZEInitialize": xcvrHistPMUSIZEInitialize,
       "xcvrHistPMOSIZEInitialize": xcvrHistPMOSIZEInitialize,
       "xcvrHistPMFRGTInitialize": xcvrHistPMFRGTInitialize,
       "xcvrHistPMJABRInitialize": xcvrHistPMJABRInitialize,
       "xcvrHistPMOTUEBInitialize": xcvrHistPMOTUEBInitialize,
       "xcvrHistPMOTUBBEInitialize": xcvrHistPMOTUBBEInitialize,
       "xcvrHistPMOTUESInitialize": xcvrHistPMOTUESInitialize,
       "xcvrHistPMOTUSESInitialize": xcvrHistPMOTUSESInitialize,
       "xcvrHistPMOTUOFSInitialize": xcvrHistPMOTUOFSInitialize,
       "xcvrHistPMUASSValue": xcvrHistPMUASSValue,
       "xcvrHistPMUASSTimeStamp": xcvrHistPMUASSTimeStamp,
       "xcvrHistPMUASSValidity": xcvrHistPMUASSValidity,
       "xcvrHistPMUASSInitialize": xcvrHistPMUASSInitialize,
       "xcvrHistPMRSUASValue": xcvrHistPMRSUASValue,
       "xcvrHistPMRSUASTimeStamp": xcvrHistPMRSUASTimeStamp,
       "xcvrHistPMRSUASValidity": xcvrHistPMRSUASValidity,
       "xcvrHistPMRSUASInitialize": xcvrHistPMRSUASInitialize,
       "xcvrHistPMUASValue": xcvrHistPMUASValue,
       "xcvrHistPMUASTimeStamp": xcvrHistPMUASTimeStamp,
       "xcvrHistPMUASValidity": xcvrHistPMUASValidity,
       "xcvrHistPMUASInitialize": xcvrHistPMUASInitialize,
       "xcvrHistPMOTUUASValue": xcvrHistPMOTUUASValue,
       "xcvrHistPMOTUUASTimeStamp": xcvrHistPMOTUUASTimeStamp,
       "xcvrHistPMOTUUASValidity": xcvrHistPMOTUUASValidity,
       "xcvrHistPMOTUUASInitialize": xcvrHistPMOTUUASInitialize,
       "xcvrHistPMOTNBERValue": xcvrHistPMOTNBERValue,
       "xcvrHistPMOTNBERTimeStamp": xcvrHistPMOTNBERTimeStamp,
       "xcvrHistPMOTNBERValidity": xcvrHistPMOTNBERValidity,
       "xcvrHistPMOTNBERInitialize": xcvrHistPMOTNBERInitialize,
       "xcvrHistPMOTNAVGBERValue": xcvrHistPMOTNAVGBERValue,
       "xcvrHistPMOTNAVGBERTimeStamp": xcvrHistPMOTNAVGBERTimeStamp,
       "xcvrHistPMOTNAVGBERValidity": xcvrHistPMOTNAVGBERValidity,
       "xcvrHistPMOTNAVGBERInitialize": xcvrHistPMOTNAVGBERInitialize,
       "xcvrHistPMNBITCR64BitValue": xcvrHistPMNBITCR64BitValue,
       "xcvrHistPMNBITCR64BitTimeStamp": xcvrHistPMNBITCR64BitTimeStamp,
       "xcvrHistPMNBITCR64BitValidity": xcvrHistPMNBITCR64BitValidity,
       "xcvrHistPMNBITCR64BitInitialize": xcvrHistPMNBITCR64BitInitialize,
       "xcvrHistPMNBYTCR64BitValue": xcvrHistPMNBYTCR64BitValue,
       "xcvrHistPMNBYTCR64BitTimeStamp": xcvrHistPMNBYTCR64BitTimeStamp,
       "xcvrHistPMNBYTCR64BitValidity": xcvrHistPMNBYTCR64BitValidity,
       "xcvrHistPMNBYTCR64BitInitialize": xcvrHistPMNBYTCR64BitInitialize,
       "xcvrHistPMOPRMinValue": xcvrHistPMOPRMinValue,
       "xcvrHistPMOPRMinTimeStamp": xcvrHistPMOPRMinTimeStamp,
       "xcvrHistPMOPRMinValidity": xcvrHistPMOPRMinValidity,
       "xcvrHistPMOPRMinInitialize": xcvrHistPMOPRMinInitialize,
       "xcvrHistPMOPRMaxValue": xcvrHistPMOPRMaxValue,
       "xcvrHistPMOPRMaxTimeStamp": xcvrHistPMOPRMaxTimeStamp,
       "xcvrHistPMOPRMaxValidity": xcvrHistPMOPRMaxValidity,
       "xcvrHistPMOPRMaxInitialize": xcvrHistPMOPRMaxInitialize,
       "xcvrHistPMOPRAvgValue": xcvrHistPMOPRAvgValue,
       "xcvrHistPMOPRAvgTimeStamp": xcvrHistPMOPRAvgTimeStamp,
       "xcvrHistPMOPRAvgValidity": xcvrHistPMOPRAvgValidity,
       "xcvrHistPMOPRAvgInitialize": xcvrHistPMOPRAvgInitialize,
       "xcvrHistPMOPTMinValue": xcvrHistPMOPTMinValue,
       "xcvrHistPMOPTMinTimeStamp": xcvrHistPMOPTMinTimeStamp,
       "xcvrHistPMOPTMinValidity": xcvrHistPMOPTMinValidity,
       "xcvrHistPMOPTMinInitialize": xcvrHistPMOPTMinInitialize,
       "xcvrHistPMOPTMaxValue": xcvrHistPMOPTMaxValue,
       "xcvrHistPMOPTMaxTimeStamp": xcvrHistPMOPTMaxTimeStamp,
       "xcvrHistPMOPTMaxValidity": xcvrHistPMOPTMaxValidity,
       "xcvrHistPMOPTMaxInitialize": xcvrHistPMOPTMaxInitialize,
       "xcvrHistPMOPTAvgValue": xcvrHistPMOPTAvgValue,
       "xcvrHistPMOPTAvgTimeStamp": xcvrHistPMOPTAvgTimeStamp,
       "xcvrHistPMOPTAvgValidity": xcvrHistPMOPTAvgValidity,
       "xcvrHistPMOPTAvgInitialize": xcvrHistPMOPTAvgInitialize,
       "xcvrPMThresholdTable": xcvrPMThresholdTable,
       "xcvrPMThresholdEntry": xcvrPMThresholdEntry,
       "xcvrPMThresholdTypeIdx": xcvrPMThresholdTypeIdx,
       "xcvrPMThresholdShelfIdx": xcvrPMThresholdShelfIdx,
       "xcvrPMThresholdSlotIdx": xcvrPMThresholdSlotIdx,
       "xcvrPMThresholdIdx": xcvrPMThresholdIdx,
       "xcvrPMThresholdIntervalTypeIdx": xcvrPMThresholdIntervalTypeIdx,
       "xcvrPMThresholdCVSValue": xcvrPMThresholdCVSValue,
       "xcvrPMThresholdESSValue": xcvrPMThresholdESSValue,
       "xcvrPMThresholdSESSValue": xcvrPMThresholdSESSValue,
       "xcvrPMThresholdSEFSSValue": xcvrPMThresholdSEFSSValue,
       "xcvrPMThresholdRSEBValue": xcvrPMThresholdRSEBValue,
       "xcvrPMThresholdRSBBEValue": xcvrPMThresholdRSBBEValue,
       "xcvrPMThresholdRSESValue": xcvrPMThresholdRSESValue,
       "xcvrPMThresholdRSSESValue": xcvrPMThresholdRSSESValue,
       "xcvrPMThresholdRSOFSValue": xcvrPMThresholdRSOFSValue,
       "xcvrPMThresholdCVValue": xcvrPMThresholdCVValue,
       "xcvrPMThresholdESValue": xcvrPMThresholdESValue,
       "xcvrPMThresholdSESValue": xcvrPMThresholdSESValue,
       "xcvrPMThresholdINVBLKValue": xcvrPMThresholdINVBLKValue,
       "xcvrPMThresholdUNCRCDWValue": xcvrPMThresholdUNCRCDWValue,
       "xcvrPMThresholdFCSEValue": xcvrPMThresholdFCSEValue,
       "xcvrPMThresholdFRDRValue": xcvrPMThresholdFRDRValue,
       "xcvrPMThresholdUSIZEValue": xcvrPMThresholdUSIZEValue,
       "xcvrPMThresholdOSIZEValue": xcvrPMThresholdOSIZEValue,
       "xcvrPMThresholdFRGTValue": xcvrPMThresholdFRGTValue,
       "xcvrPMThresholdJABRValue": xcvrPMThresholdJABRValue,
       "xcvrPMThresholdOTUEBValue": xcvrPMThresholdOTUEBValue,
       "xcvrPMThresholdOTUBBEValue": xcvrPMThresholdOTUBBEValue,
       "xcvrPMThresholdOTUESValue": xcvrPMThresholdOTUESValue,
       "xcvrPMThresholdOTUSESValue": xcvrPMThresholdOTUSESValue,
       "xcvrPMThresholdOTUOFSValue": xcvrPMThresholdOTUOFSValue,
       "xcvrPMThresholdUASSValue": xcvrPMThresholdUASSValue,
       "xcvrPMThresholdRSUASValue": xcvrPMThresholdRSUASValue,
       "xcvrPMThresholdUASValue": xcvrPMThresholdUASValue,
       "xcvrPMThresholdOTUUASValue": xcvrPMThresholdOTUUASValue,
       "amdCrntPMTable": amdCrntPMTable,
       "amdCrntPMEntry": amdCrntPMEntry,
       "amdCrntPMTypeIdx": amdCrntPMTypeIdx,
       "amdCrntPMShelfIdx": amdCrntPMShelfIdx,
       "amdCrntPMSlotIdx": amdCrntPMSlotIdx,
       "amdCrntPMLineIdx": amdCrntPMLineIdx,
       "amdCrntPMPortIdx": amdCrntPMPortIdx,
       "amdCrntPMIntervalTypeIdx": amdCrntPMIntervalTypeIdx,
       "amdCrntPMOPRValue": amdCrntPMOPRValue,
       "amdCrntPMOPRTimeStamp": amdCrntPMOPRTimeStamp,
       "amdCrntPMOPRValidity": amdCrntPMOPRValidity,
       "amdCrntPMOPTValue": amdCrntPMOPTValue,
       "amdCrntPMOPTTimeStamp": amdCrntPMOPTTimeStamp,
       "amdCrntPMOPTValidity": amdCrntPMOPTValidity,
       "amdCrntPMVOAValue": amdCrntPMVOAValue,
       "amdCrntPMVOATimeStamp": amdCrntPMVOATimeStamp,
       "amdCrntPMVOAValidity": amdCrntPMVOAValidity,
       "amdCrntPMLitChnValue": amdCrntPMLitChnValue,
       "amdCrntPMLitChnTimeStamp": amdCrntPMLitChnTimeStamp,
       "amdCrntPMLitChnValidity": amdCrntPMLitChnValidity,
       "amdHistPMTable": amdHistPMTable,
       "amdHistPMEntry": amdHistPMEntry,
       "amdHistPMTypeIdx": amdHistPMTypeIdx,
       "amdHistPMShelfIdx": amdHistPMShelfIdx,
       "amdHistPMSlotIdx": amdHistPMSlotIdx,
       "amdHistPMLineIdx": amdHistPMLineIdx,
       "amdHistPMPortIdx": amdHistPMPortIdx,
       "amdHistPMIntervalTypeIdx": amdHistPMIntervalTypeIdx,
       "amdHistPMIntervalIdx": amdHistPMIntervalIdx,
       "amdHistPMOPRValue": amdHistPMOPRValue,
       "amdHistPMOPRTimeStamp": amdHistPMOPRTimeStamp,
       "amdHistPMOPRValidity": amdHistPMOPRValidity,
       "amdHistPMOPTValue": amdHistPMOPTValue,
       "amdHistPMOPTTimeStamp": amdHistPMOPTTimeStamp,
       "amdHistPMOPTValidity": amdHistPMOPTValidity,
       "amdHistPMVOAValue": amdHistPMVOAValue,
       "amdHistPMVOATimeStamp": amdHistPMVOATimeStamp,
       "amdHistPMVOAValidity": amdHistPMVOAValidity,
       "amdHistPMLitChnValue": amdHistPMLitChnValue,
       "amdHistPMLitChnTimeStamp": amdHistPMLitChnTimeStamp,
       "amdHistPMLitChnValidity": amdHistPMLitChnValidity,
       "ocnCrntPMTable": ocnCrntPMTable,
       "ocnCrntPMEntry": ocnCrntPMEntry,
       "ocnCrntPMTypeIdx": ocnCrntPMTypeIdx,
       "ocnCrntPMShelfIdx": ocnCrntPMShelfIdx,
       "ocnCrntPMSlotIdx": ocnCrntPMSlotIdx,
       "ocnCrntPMPortIdx": ocnCrntPMPortIdx,
       "ocnCrntPMIntervalTypeIdx": ocnCrntPMIntervalTypeIdx,
       "ocnCrntPMOPRValue": ocnCrntPMOPRValue,
       "ocnCrntPMOPRTimeStamp": ocnCrntPMOPRTimeStamp,
       "ocnCrntPMOPRValidity": ocnCrntPMOPRValidity,
       "ocnCrntPMOPTValue": ocnCrntPMOPTValue,
       "ocnCrntPMOPTTimeStamp": ocnCrntPMOPTTimeStamp,
       "ocnCrntPMOPTValidity": ocnCrntPMOPTValidity,
       "ocnCrntPMTempValue": ocnCrntPMTempValue,
       "ocnCrntPMTempTimeStamp": ocnCrntPMTempTimeStamp,
       "ocnCrntPMTempValidity": ocnCrntPMTempValidity,
       "ocnCrntPMSupplyVoltageValue": ocnCrntPMSupplyVoltageValue,
       "ocnCrntPMSupplyVoltageTimeStamp": ocnCrntPMSupplyVoltageTimeStamp,
       "ocnCrntPMSupplyVoltageValidity": ocnCrntPMSupplyVoltageValidity,
       "ocnCrntPMLBCValue": ocnCrntPMLBCValue,
       "ocnCrntPMLBCTimeStamp": ocnCrntPMLBCTimeStamp,
       "ocnCrntPMLBCValidity": ocnCrntPMLBCValidity,
       "ocnCrntPMCVSValue": ocnCrntPMCVSValue,
       "ocnCrntPMCVSTimeStamp": ocnCrntPMCVSTimeStamp,
       "ocnCrntPMCVSValidity": ocnCrntPMCVSValidity,
       "ocnCrntPMESSValue": ocnCrntPMESSValue,
       "ocnCrntPMESSTimeStamp": ocnCrntPMESSTimeStamp,
       "ocnCrntPMESSValidity": ocnCrntPMESSValidity,
       "ocnCrntPMSESSValue": ocnCrntPMSESSValue,
       "ocnCrntPMSESSTimeStamp": ocnCrntPMSESSTimeStamp,
       "ocnCrntPMSESSValidity": ocnCrntPMSESSValidity,
       "ocnCrntPMSEFSSValue": ocnCrntPMSEFSSValue,
       "ocnCrntPMSEFSSTimeStamp": ocnCrntPMSEFSSTimeStamp,
       "ocnCrntPMSEFSSValidity": ocnCrntPMSEFSSValidity,
       "ocnCrntPMSupplyVoltage2Value": ocnCrntPMSupplyVoltage2Value,
       "ocnCrntPMSupplyVoltage2TimeStamp": ocnCrntPMSupplyVoltage2TimeStamp,
       "ocnCrntPMSupplyVoltage2Validity": ocnCrntPMSupplyVoltage2Validity,
       "ocnCrntPMCVLValue": ocnCrntPMCVLValue,
       "ocnCrntPMCVLTimeStamp": ocnCrntPMCVLTimeStamp,
       "ocnCrntPMCVLValidity": ocnCrntPMCVLValidity,
       "ocnCrntPMESLValue": ocnCrntPMESLValue,
       "ocnCrntPMESLTimeStamp": ocnCrntPMESLTimeStamp,
       "ocnCrntPMESLValidity": ocnCrntPMESLValidity,
       "ocnCrntPMSESLValue": ocnCrntPMSESLValue,
       "ocnCrntPMSESLTimeStamp": ocnCrntPMSESLTimeStamp,
       "ocnCrntPMSESLValidity": ocnCrntPMSESLValidity,
       "ocnCrntPMUASLValue": ocnCrntPMUASLValue,
       "ocnCrntPMUASLTimeStamp": ocnCrntPMUASLTimeStamp,
       "ocnCrntPMUASLValidity": ocnCrntPMUASLValidity,
       "ocnCrntPMOTUEBValue": ocnCrntPMOTUEBValue,
       "ocnCrntPMOTUEBTimeStamp": ocnCrntPMOTUEBTimeStamp,
       "ocnCrntPMOTUEBValidity": ocnCrntPMOTUEBValidity,
       "ocnCrntPMOTUBBEValue": ocnCrntPMOTUBBEValue,
       "ocnCrntPMOTUBBETimeStamp": ocnCrntPMOTUBBETimeStamp,
       "ocnCrntPMOTUBBEValidity": ocnCrntPMOTUBBEValidity,
       "ocnCrntPMOTUESValue": ocnCrntPMOTUESValue,
       "ocnCrntPMOTUESTimeStamp": ocnCrntPMOTUESTimeStamp,
       "ocnCrntPMOTUESValidity": ocnCrntPMOTUESValidity,
       "ocnCrntPMOTUSESValue": ocnCrntPMOTUSESValue,
       "ocnCrntPMOTUSESTimeStamp": ocnCrntPMOTUSESTimeStamp,
       "ocnCrntPMOTUSESValidity": ocnCrntPMOTUSESValidity,
       "ocnCrntPMOTUOFSValue": ocnCrntPMOTUOFSValue,
       "ocnCrntPMOTUOFSTimeStamp": ocnCrntPMOTUOFSTimeStamp,
       "ocnCrntPMOTUOFSValidity": ocnCrntPMOTUOFSValidity,
       "ocnCrntPMNBITCRValue": ocnCrntPMNBITCRValue,
       "ocnCrntPMNBITCRTimeStamp": ocnCrntPMNBITCRTimeStamp,
       "ocnCrntPMNBITCRValidity": ocnCrntPMNBITCRValidity,
       "ocnCrntPMNBYTCRValue": ocnCrntPMNBYTCRValue,
       "ocnCrntPMNBYTCRTimeStamp": ocnCrntPMNBYTCRTimeStamp,
       "ocnCrntPMNBYTCRValidity": ocnCrntPMNBYTCRValidity,
       "ocnCrntPMUNCRCDWValue": ocnCrntPMUNCRCDWValue,
       "ocnCrntPMUNCRCDWTimeStamp": ocnCrntPMUNCRCDWTimeStamp,
       "ocnCrntPMUNCRCDWValidity": ocnCrntPMUNCRCDWValidity,
       "ocnCrntPMCVSInitialize": ocnCrntPMCVSInitialize,
       "ocnCrntPMESSInitialize": ocnCrntPMESSInitialize,
       "ocnCrntPMSESSInitialize": ocnCrntPMSESSInitialize,
       "ocnCrntPMSEFSSInitialize": ocnCrntPMSEFSSInitialize,
       "ocnCrntPMCVLInitialize": ocnCrntPMCVLInitialize,
       "ocnCrntPMESLInitialize": ocnCrntPMESLInitialize,
       "ocnCrntPMSESLInitialize": ocnCrntPMSESLInitialize,
       "ocnCrntPMUASLInitialize": ocnCrntPMUASLInitialize,
       "ocnCrntPMOTUEBInitialize": ocnCrntPMOTUEBInitialize,
       "ocnCrntPMOTUBBEInitialize": ocnCrntPMOTUBBEInitialize,
       "ocnCrntPMOTUESInitialize": ocnCrntPMOTUESInitialize,
       "ocnCrntPMOTUSESInitialize": ocnCrntPMOTUSESInitialize,
       "ocnCrntPMOTUOFSInitialize": ocnCrntPMOTUOFSInitialize,
       "ocnCrntPMNBITCRInitialize": ocnCrntPMNBITCRInitialize,
       "ocnCrntPMNBYTCRInitialize": ocnCrntPMNBYTCRInitialize,
       "ocnCrntPMUNCRCDWInitialize": ocnCrntPMUNCRCDWInitialize,
       "ocnCrntPMOTNBERValue": ocnCrntPMOTNBERValue,
       "ocnCrntPMOTNBERTimeStamp": ocnCrntPMOTNBERTimeStamp,
       "ocnCrntPMOTNBERValidity": ocnCrntPMOTNBERValidity,
       "ocnCrntPMOTNBERInitialize": ocnCrntPMOTNBERInitialize,
       "ocnCrntPMOTNAVGBERValue": ocnCrntPMOTNAVGBERValue,
       "ocnCrntPMOTNAVGBERTimeStamp": ocnCrntPMOTNAVGBERTimeStamp,
       "ocnCrntPMOTNAVGBERValidity": ocnCrntPMOTNAVGBERValidity,
       "ocnCrntPMOTNAVGBERInitialize": ocnCrntPMOTNAVGBERInitialize,
       "ocnCrntPMNBITCR64BitValue": ocnCrntPMNBITCR64BitValue,
       "ocnCrntPMNBITCR64BitTimeStamp": ocnCrntPMNBITCR64BitTimeStamp,
       "ocnCrntPMNBITCR64BitValidity": ocnCrntPMNBITCR64BitValidity,
       "ocnCrntPMNBITCR64BitInitialize": ocnCrntPMNBITCR64BitInitialize,
       "ocnCrntPMNBYTCR64BitValue": ocnCrntPMNBYTCR64BitValue,
       "ocnCrntPMNBYTCR64BitTimeStamp": ocnCrntPMNBYTCR64BitTimeStamp,
       "ocnCrntPMNBYTCR64BitValidity": ocnCrntPMNBYTCR64BitValidity,
       "ocnCrntPMNBYTCR64BitInitialize": ocnCrntPMNBYTCR64BitInitialize,
       "ocnCrntPMUASSValue": ocnCrntPMUASSValue,
       "ocnCrntPMUASSTimeStamp": ocnCrntPMUASSTimeStamp,
       "ocnCrntPMUASSValidity": ocnCrntPMUASSValidity,
       "ocnCrntPMUASSInitialize": ocnCrntPMUASSInitialize,
       "ocnCrntPMOTUUASValue": ocnCrntPMOTUUASValue,
       "ocnCrntPMOTUUASTimeStamp": ocnCrntPMOTUUASTimeStamp,
       "ocnCrntPMOTUUASValidity": ocnCrntPMOTUUASValidity,
       "ocnCrntPMOTUUASInitialize": ocnCrntPMOTUUASInitialize,
       "ocnCrntPMOPRMinValue": ocnCrntPMOPRMinValue,
       "ocnCrntPMOPRMinTimeStamp": ocnCrntPMOPRMinTimeStamp,
       "ocnCrntPMOPRMinValidity": ocnCrntPMOPRMinValidity,
       "ocnCrntPMOPRMinInitialize": ocnCrntPMOPRMinInitialize,
       "ocnCrntPMOPRMaxValue": ocnCrntPMOPRMaxValue,
       "ocnCrntPMOPRMaxTimeStamp": ocnCrntPMOPRMaxTimeStamp,
       "ocnCrntPMOPRMaxValidity": ocnCrntPMOPRMaxValidity,
       "ocnCrntPMOPRMaxInitialize": ocnCrntPMOPRMaxInitialize,
       "ocnCrntPMOPRAvgValue": ocnCrntPMOPRAvgValue,
       "ocnCrntPMOPRAvgTimeStamp": ocnCrntPMOPRAvgTimeStamp,
       "ocnCrntPMOPRAvgValidity": ocnCrntPMOPRAvgValidity,
       "ocnCrntPMOPRAvgInitialize": ocnCrntPMOPRAvgInitialize,
       "ocnCrntPMOPTMinValue": ocnCrntPMOPTMinValue,
       "ocnCrntPMOPTMinTimeStamp": ocnCrntPMOPTMinTimeStamp,
       "ocnCrntPMOPTMinValidity": ocnCrntPMOPTMinValidity,
       "ocnCrntPMOPTMinInitialize": ocnCrntPMOPTMinInitialize,
       "ocnCrntPMOPTMaxValue": ocnCrntPMOPTMaxValue,
       "ocnCrntPMOPTMaxTimeStamp": ocnCrntPMOPTMaxTimeStamp,
       "ocnCrntPMOPTMaxValidity": ocnCrntPMOPTMaxValidity,
       "ocnCrntPMOPTMaxInitialize": ocnCrntPMOPTMaxInitialize,
       "ocnCrntPMOPTAvgValue": ocnCrntPMOPTAvgValue,
       "ocnCrntPMOPTAvgTimeStamp": ocnCrntPMOPTAvgTimeStamp,
       "ocnCrntPMOPTAvgValidity": ocnCrntPMOPTAvgValidity,
       "ocnCrntPMOPTAvgInitialize": ocnCrntPMOPTAvgInitialize,
       "ocnHistPMTable": ocnHistPMTable,
       "ocnHistPMEntry": ocnHistPMEntry,
       "ocnHistPMTypeIdx": ocnHistPMTypeIdx,
       "ocnHistPMShelfIdx": ocnHistPMShelfIdx,
       "ocnHistPMSlotIdx": ocnHistPMSlotIdx,
       "ocnHistPMPortIdx": ocnHistPMPortIdx,
       "ocnHistPMIntervalTypeIdx": ocnHistPMIntervalTypeIdx,
       "ocnHistPMIntervalIdx": ocnHistPMIntervalIdx,
       "ocnHistPMOPRValue": ocnHistPMOPRValue,
       "ocnHistPMOPRTimeStamp": ocnHistPMOPRTimeStamp,
       "ocnHistPMOPRValidity": ocnHistPMOPRValidity,
       "ocnHistPMOPTValue": ocnHistPMOPTValue,
       "ocnHistPMOPTTimeStamp": ocnHistPMOPTTimeStamp,
       "ocnHistPMOPTValidity": ocnHistPMOPTValidity,
       "ocnHistPMTempValue": ocnHistPMTempValue,
       "ocnHistPMTempTimeStamp": ocnHistPMTempTimeStamp,
       "ocnHistPMTempValidity": ocnHistPMTempValidity,
       "ocnHistPMSupplyVoltageValue": ocnHistPMSupplyVoltageValue,
       "ocnHistPMSupplyVoltageTimeStamp": ocnHistPMSupplyVoltageTimeStamp,
       "ocnHistPMSupplyVoltageValidity": ocnHistPMSupplyVoltageValidity,
       "ocnHistPMLBCValue": ocnHistPMLBCValue,
       "ocnHistPMLBCTimeStamp": ocnHistPMLBCTimeStamp,
       "ocnHistPMLBCValidity": ocnHistPMLBCValidity,
       "ocnHistPMCVSValue": ocnHistPMCVSValue,
       "ocnHistPMCVSTimeStamp": ocnHistPMCVSTimeStamp,
       "ocnHistPMCVSValidity": ocnHistPMCVSValidity,
       "ocnHistPMESSValue": ocnHistPMESSValue,
       "ocnHistPMESSTimeStamp": ocnHistPMESSTimeStamp,
       "ocnHistPMESSValidity": ocnHistPMESSValidity,
       "ocnHistPMSESSValue": ocnHistPMSESSValue,
       "ocnHistPMSESSTimeStamp": ocnHistPMSESSTimeStamp,
       "ocnHistPMSESSValidity": ocnHistPMSESSValidity,
       "ocnHistPMSEFSSValue": ocnHistPMSEFSSValue,
       "ocnHistPMSEFSSTimeStamp": ocnHistPMSEFSSTimeStamp,
       "ocnHistPMSEFSSValidity": ocnHistPMSEFSSValidity,
       "ocnHistPMSupplyVoltage2Value": ocnHistPMSupplyVoltage2Value,
       "ocnHistPMSupplyVoltage2TimeStamp": ocnHistPMSupplyVoltage2TimeStamp,
       "ocnHistPMSupplyVoltage2Validity": ocnHistPMSupplyVoltage2Validity,
       "ocnHistPMCVLValue": ocnHistPMCVLValue,
       "ocnHistPMCVLTimeStamp": ocnHistPMCVLTimeStamp,
       "ocnHistPMCVLValidity": ocnHistPMCVLValidity,
       "ocnHistPMESLValue": ocnHistPMESLValue,
       "ocnHistPMESLTimeStamp": ocnHistPMESLTimeStamp,
       "ocnHistPMESLValidity": ocnHistPMESLValidity,
       "ocnHistPMSESLValue": ocnHistPMSESLValue,
       "ocnHistPMSESLTimeStamp": ocnHistPMSESLTimeStamp,
       "ocnHistPMSESLValidity": ocnHistPMSESLValidity,
       "ocnHistPMUASLValue": ocnHistPMUASLValue,
       "ocnHistPMUASLTimeStamp": ocnHistPMUASLTimeStamp,
       "ocnHistPMUASLValidity": ocnHistPMUASLValidity,
       "ocnHistPMOTUEBValue": ocnHistPMOTUEBValue,
       "ocnHistPMOTUEBTimeStamp": ocnHistPMOTUEBTimeStamp,
       "ocnHistPMOTUEBValidity": ocnHistPMOTUEBValidity,
       "ocnHistPMOTUBBEValue": ocnHistPMOTUBBEValue,
       "ocnHistPMOTUBBETimeStamp": ocnHistPMOTUBBETimeStamp,
       "ocnHistPMOTUBBEValidity": ocnHistPMOTUBBEValidity,
       "ocnHistPMOTUESValue": ocnHistPMOTUESValue,
       "ocnHistPMOTUESTimeStamp": ocnHistPMOTUESTimeStamp,
       "ocnHistPMOTUESValidity": ocnHistPMOTUESValidity,
       "ocnHistPMOTUSESValue": ocnHistPMOTUSESValue,
       "ocnHistPMOTUSESTimeStamp": ocnHistPMOTUSESTimeStamp,
       "ocnHistPMOTUSESValidity": ocnHistPMOTUSESValidity,
       "ocnHistPMOTUOFSValue": ocnHistPMOTUOFSValue,
       "ocnHistPMOTUOFSTimeStamp": ocnHistPMOTUOFSTimeStamp,
       "ocnHistPMOTUOFSValidity": ocnHistPMOTUOFSValidity,
       "ocnHistPMNBITCRValue": ocnHistPMNBITCRValue,
       "ocnHistPMNBITCRTimeStamp": ocnHistPMNBITCRTimeStamp,
       "ocnHistPMNBITCRValidity": ocnHistPMNBITCRValidity,
       "ocnHistPMNBYTCRValue": ocnHistPMNBYTCRValue,
       "ocnHistPMNBYTCRTimeStamp": ocnHistPMNBYTCRTimeStamp,
       "ocnHistPMNBYTCRValidity": ocnHistPMNBYTCRValidity,
       "ocnHistPMUNCRCDWValue": ocnHistPMUNCRCDWValue,
       "ocnHistPMUNCRCDWTimeStamp": ocnHistPMUNCRCDWTimeStamp,
       "ocnHistPMUNCRCDWValidity": ocnHistPMUNCRCDWValidity,
       "ocnHistPMCVSInitialize": ocnHistPMCVSInitialize,
       "ocnHistPMESSInitialize": ocnHistPMESSInitialize,
       "ocnHistPMSESSInitialize": ocnHistPMSESSInitialize,
       "ocnHistPMSEFSSInitialize": ocnHistPMSEFSSInitialize,
       "ocnHistPMCVLInitialize": ocnHistPMCVLInitialize,
       "ocnHistPMESLInitialize": ocnHistPMESLInitialize,
       "ocnHistPMSESLInitialize": ocnHistPMSESLInitialize,
       "ocnHistPMUASLInitialize": ocnHistPMUASLInitialize,
       "ocnHistPMOTUEBInitialize": ocnHistPMOTUEBInitialize,
       "ocnHistPMOTUBBEInitialize": ocnHistPMOTUBBEInitialize,
       "ocnHistPMOTUESInitialize": ocnHistPMOTUESInitialize,
       "ocnHistPMOTUSESInitialize": ocnHistPMOTUSESInitialize,
       "ocnHistPMOTUOFSInitialize": ocnHistPMOTUOFSInitialize,
       "ocnHistPMNBITCRInitialize": ocnHistPMNBITCRInitialize,
       "ocnHistPMNBYTCRInitialize": ocnHistPMNBYTCRInitialize,
       "ocnHistPMUNCRCDWInitialize": ocnHistPMUNCRCDWInitialize,
       "ocnHistPMOTNBERValue": ocnHistPMOTNBERValue,
       "ocnHistPMOTNBERTimeStamp": ocnHistPMOTNBERTimeStamp,
       "ocnHistPMOTNBERValidity": ocnHistPMOTNBERValidity,
       "ocnHistPMOTNBERInitialize": ocnHistPMOTNBERInitialize,
       "ocnHistPMOTNAVGBERValue": ocnHistPMOTNAVGBERValue,
       "ocnHistPMOTNAVGBERTimeStamp": ocnHistPMOTNAVGBERTimeStamp,
       "ocnHistPMOTNAVGBERValidity": ocnHistPMOTNAVGBERValidity,
       "ocnHistPMOTNAVGBERInitialize": ocnHistPMOTNAVGBERInitialize,
       "ocnHistPMNBITCR64BitValue": ocnHistPMNBITCR64BitValue,
       "ocnHistPMNBITCR64BitTimeStamp": ocnHistPMNBITCR64BitTimeStamp,
       "ocnHistPMNBITCR64BitValidity": ocnHistPMNBITCR64BitValidity,
       "ocnHistPMNBITCR64BitInitialize": ocnHistPMNBITCR64BitInitialize,
       "ocnHistPMNBYTCR64BitValue": ocnHistPMNBYTCR64BitValue,
       "ocnHistPMNBYTCR64BitTimeStamp": ocnHistPMNBYTCR64BitTimeStamp,
       "ocnHistPMNBYTCR64BitValidity": ocnHistPMNBYTCR64BitValidity,
       "ocnHistPMNBYTCR64BitInitialize": ocnHistPMNBYTCR64BitInitialize,
       "ocnHistPMUASSValue": ocnHistPMUASSValue,
       "ocnHistPMUASSTimeStamp": ocnHistPMUASSTimeStamp,
       "ocnHistPMUASSValidity": ocnHistPMUASSValidity,
       "ocnHistPMUASSInitialize": ocnHistPMUASSInitialize,
       "ocnHistPMOTUUASValue": ocnHistPMOTUUASValue,
       "ocnHistPMOTUUASTimeStamp": ocnHistPMOTUUASTimeStamp,
       "ocnHistPMOTUUASValidity": ocnHistPMOTUUASValidity,
       "ocnHistPMOTUUASInitialize": ocnHistPMOTUUASInitialize,
       "ocnHistPMOPRMinValue": ocnHistPMOPRMinValue,
       "ocnHistPMOPRMinTimeStamp": ocnHistPMOPRMinTimeStamp,
       "ocnHistPMOPRMinValidity": ocnHistPMOPRMinValidity,
       "ocnHistPMOPRMinInitialize": ocnHistPMOPRMinInitialize,
       "ocnHistPMOPRMaxValue": ocnHistPMOPRMaxValue,
       "ocnHistPMOPRMaxTimeStamp": ocnHistPMOPRMaxTimeStamp,
       "ocnHistPMOPRMaxValidity": ocnHistPMOPRMaxValidity,
       "ocnHistPMOPRMaxInitialize": ocnHistPMOPRMaxInitialize,
       "ocnHistPMOPRAvgValue": ocnHistPMOPRAvgValue,
       "ocnHistPMOPRAvgTimeStamp": ocnHistPMOPRAvgTimeStamp,
       "ocnHistPMOPRAvgValidity": ocnHistPMOPRAvgValidity,
       "ocnHistPMOPRAvgInitialize": ocnHistPMOPRAvgInitialize,
       "ocnHistPMOPTMinValue": ocnHistPMOPTMinValue,
       "ocnHistPMOPTMinTimeStamp": ocnHistPMOPTMinTimeStamp,
       "ocnHistPMOPTMinValidity": ocnHistPMOPTMinValidity,
       "ocnHistPMOPTMinInitialize": ocnHistPMOPTMinInitialize,
       "ocnHistPMOPTMaxValue": ocnHistPMOPTMaxValue,
       "ocnHistPMOPTMaxTimeStamp": ocnHistPMOPTMaxTimeStamp,
       "ocnHistPMOPTMaxValidity": ocnHistPMOPTMaxValidity,
       "ocnHistPMOPTMaxInitialize": ocnHistPMOPTMaxInitialize,
       "ocnHistPMOPTAvgValue": ocnHistPMOPTAvgValue,
       "ocnHistPMOPTAvgTimeStamp": ocnHistPMOPTAvgTimeStamp,
       "ocnHistPMOPTAvgValidity": ocnHistPMOPTAvgValidity,
       "ocnHistPMOPTAvgInitialize": ocnHistPMOPTAvgInitialize,
       "ocnPMThresholdTable": ocnPMThresholdTable,
       "ocnPMThresholdEntry": ocnPMThresholdEntry,
       "ocnPMThresholdTypeIdx": ocnPMThresholdTypeIdx,
       "ocnPMThresholdShelfIdx": ocnPMThresholdShelfIdx,
       "ocnPMThresholdSlotIdx": ocnPMThresholdSlotIdx,
       "ocnPMThresholdPortIdx": ocnPMThresholdPortIdx,
       "ocnPMThresholdIntervalTypeIdx": ocnPMThresholdIntervalTypeIdx,
       "ocnPMThresholdCVSValue": ocnPMThresholdCVSValue,
       "ocnPMThresholdESSValue": ocnPMThresholdESSValue,
       "ocnPMThresholdSESSValue": ocnPMThresholdSESSValue,
       "ocnPMThresholdSEFSSValue": ocnPMThresholdSEFSSValue,
       "ocnPMThresholdCVLValue": ocnPMThresholdCVLValue,
       "ocnPMThresholdESLValue": ocnPMThresholdESLValue,
       "ocnPMThresholdSESLValue": ocnPMThresholdSESLValue,
       "ocnPMThresholdUASLValue": ocnPMThresholdUASLValue,
       "ocnPMThresholdOTUEBValue": ocnPMThresholdOTUEBValue,
       "ocnPMThresholdOTUBBEValue": ocnPMThresholdOTUBBEValue,
       "ocnPMThresholdOTUESValue": ocnPMThresholdOTUESValue,
       "ocnPMThresholdOTUSESValue": ocnPMThresholdOTUSESValue,
       "ocnPMThresholdOTUOFSValue": ocnPMThresholdOTUOFSValue,
       "ocnPMThresholdUNCRCDWValue": ocnPMThresholdUNCRCDWValue,
       "ocnPMThresholdUASSValue": ocnPMThresholdUASSValue,
       "ocnPMThresholdOTUUASValue": ocnPMThresholdOTUUASValue,
       "stsnCrntPMTable": stsnCrntPMTable,
       "stsnCrntPMEntry": stsnCrntPMEntry,
       "stsnCrntPMTypeIdx": stsnCrntPMTypeIdx,
       "stsnCrntPMShelfIdx": stsnCrntPMShelfIdx,
       "stsnCrntPMSlotIdx": stsnCrntPMSlotIdx,
       "stsnCrntPMPortIdx": stsnCrntPMPortIdx,
       "stsnCrntPMIdx": stsnCrntPMIdx,
       "stsnCrntPMIntervalTypeIdx": stsnCrntPMIntervalTypeIdx,
       "stsnCrntPMCVPValue": stsnCrntPMCVPValue,
       "stsnCrntPMCVPTimeStamp": stsnCrntPMCVPTimeStamp,
       "stsnCrntPMCVPValidity": stsnCrntPMCVPValidity,
       "stsnCrntPMESPValue": stsnCrntPMESPValue,
       "stsnCrntPMESPTimeStamp": stsnCrntPMESPTimeStamp,
       "stsnCrntPMESPValidity": stsnCrntPMESPValidity,
       "stsnCrntPMSESPValue": stsnCrntPMSESPValue,
       "stsnCrntPMSESPTimeStamp": stsnCrntPMSESPTimeStamp,
       "stsnCrntPMSESPValidity": stsnCrntPMSESPValidity,
       "stsnCrntPMUASPValue": stsnCrntPMUASPValue,
       "stsnCrntPMUASPTimeStamp": stsnCrntPMUASPTimeStamp,
       "stsnCrntPMUASPValidity": stsnCrntPMUASPValidity,
       "stsnCrntPMFCPValue": stsnCrntPMFCPValue,
       "stsnCrntPMFCPTimeStamp": stsnCrntPMFCPTimeStamp,
       "stsnCrntPMFCPValidity": stsnCrntPMFCPValidity,
       "stsnCrntPMCVPInitialize": stsnCrntPMCVPInitialize,
       "stsnCrntPMESPInitialize": stsnCrntPMESPInitialize,
       "stsnCrntPMSESPInitialize": stsnCrntPMSESPInitialize,
       "stsnCrntPMUASPInitialize": stsnCrntPMUASPInitialize,
       "stsnCrntPMFCPInitialize": stsnCrntPMFCPInitialize,
       "stsnHistPMTable": stsnHistPMTable,
       "stsnHistPMEntry": stsnHistPMEntry,
       "stsnHistPMTypeIdx": stsnHistPMTypeIdx,
       "stsnHistPMShelfIdx": stsnHistPMShelfIdx,
       "stsnHistPMSlotIdx": stsnHistPMSlotIdx,
       "stsnHistPMPortIdx": stsnHistPMPortIdx,
       "stsnHistPMIdx": stsnHistPMIdx,
       "stsnHistPMIntervalTypeIdx": stsnHistPMIntervalTypeIdx,
       "stsnHistPMIntervalIdx": stsnHistPMIntervalIdx,
       "stsnHistPMCVPValue": stsnHistPMCVPValue,
       "stsnHistPMCVPTimeStamp": stsnHistPMCVPTimeStamp,
       "stsnHistPMCVPValidity": stsnHistPMCVPValidity,
       "stsnHistPMESPValue": stsnHistPMESPValue,
       "stsnHistPMESPTimeStamp": stsnHistPMESPTimeStamp,
       "stsnHistPMESPValidity": stsnHistPMESPValidity,
       "stsnHistPMSESPValue": stsnHistPMSESPValue,
       "stsnHistPMSESPTimeStamp": stsnHistPMSESPTimeStamp,
       "stsnHistPMSESPValidity": stsnHistPMSESPValidity,
       "stsnHistPMUASPValue": stsnHistPMUASPValue,
       "stsnHistPMUASPTimeStamp": stsnHistPMUASPTimeStamp,
       "stsnHistPMUASPValidity": stsnHistPMUASPValidity,
       "stsnHistPMFCPValue": stsnHistPMFCPValue,
       "stsnHistPMFCPTimeStamp": stsnHistPMFCPTimeStamp,
       "stsnHistPMFCPValidity": stsnHistPMFCPValidity,
       "stsnHistPMCVPInitialize": stsnHistPMCVPInitialize,
       "stsnHistPMESPInitialize": stsnHistPMESPInitialize,
       "stsnHistPMSESPInitialize": stsnHistPMSESPInitialize,
       "stsnHistPMUASPInitialize": stsnHistPMUASPInitialize,
       "stsnHistPMFCPInitialize": stsnHistPMFCPInitialize,
       "stsnPMThresholdByPortTable": stsnPMThresholdByPortTable,
       "stsnPMThresholdByPortEntry": stsnPMThresholdByPortEntry,
       "stsnPMThresholdByPortTypeIdx": stsnPMThresholdByPortTypeIdx,
       "stsnPMThresholdByPortShelfIdx": stsnPMThresholdByPortShelfIdx,
       "stsnPMThresholdByPortSlotIdx": stsnPMThresholdByPortSlotIdx,
       "stsnPMThresholdByPortIdx": stsnPMThresholdByPortIdx,
       "stsnPMThresholdByPortIntervalTypeIdx": stsnPMThresholdByPortIntervalTypeIdx,
       "stsnPMThresholdByPortCVPValue": stsnPMThresholdByPortCVPValue,
       "stsnPMThresholdByPortESPValue": stsnPMThresholdByPortESPValue,
       "stsnPMThresholdByPortSESPValue": stsnPMThresholdByPortSESPValue,
       "stsnPMThresholdByPortUASPValue": stsnPMThresholdByPortUASPValue,
       "stsnPMThresholdByPortFCPValue": stsnPMThresholdByPortFCPValue,
       "stmnCrntPMTable": stmnCrntPMTable,
       "stmnCrntPMEntry": stmnCrntPMEntry,
       "stmnCrntPMTypeIdx": stmnCrntPMTypeIdx,
       "stmnCrntPMShelfIdx": stmnCrntPMShelfIdx,
       "stmnCrntPMSlotIdx": stmnCrntPMSlotIdx,
       "stmnCrntPMPortIdx": stmnCrntPMPortIdx,
       "stmnCrntPMIntervalTypeIdx": stmnCrntPMIntervalTypeIdx,
       "stmnCrntPMOPRValue": stmnCrntPMOPRValue,
       "stmnCrntPMOPRTimeStamp": stmnCrntPMOPRTimeStamp,
       "stmnCrntPMOPRValidity": stmnCrntPMOPRValidity,
       "stmnCrntPMOPTValue": stmnCrntPMOPTValue,
       "stmnCrntPMOPTTimeStamp": stmnCrntPMOPTTimeStamp,
       "stmnCrntPMOPTValidity": stmnCrntPMOPTValidity,
       "stmnCrntPMTempValue": stmnCrntPMTempValue,
       "stmnCrntPMTempTimeStamp": stmnCrntPMTempTimeStamp,
       "stmnCrntPMTempValidity": stmnCrntPMTempValidity,
       "stmnCrntPMSupplyVoltageValue": stmnCrntPMSupplyVoltageValue,
       "stmnCrntPMSupplyVoltageTimeStamp": stmnCrntPMSupplyVoltageTimeStamp,
       "stmnCrntPMSupplyVoltageValidity": stmnCrntPMSupplyVoltageValidity,
       "stmnCrntPMLBCValue": stmnCrntPMLBCValue,
       "stmnCrntPMLBCTimeStamp": stmnCrntPMLBCTimeStamp,
       "stmnCrntPMLBCValidity": stmnCrntPMLBCValidity,
       "stmnCrntPMRSEBValue": stmnCrntPMRSEBValue,
       "stmnCrntPMRSEBTimeStamp": stmnCrntPMRSEBTimeStamp,
       "stmnCrntPMRSEBValidity": stmnCrntPMRSEBValidity,
       "stmnCrntPMRSBBEValue": stmnCrntPMRSBBEValue,
       "stmnCrntPMRSBBETimeStamp": stmnCrntPMRSBBETimeStamp,
       "stmnCrntPMRSBBEValidity": stmnCrntPMRSBBEValidity,
       "stmnCrntPMRSESValue": stmnCrntPMRSESValue,
       "stmnCrntPMRSESTimeStamp": stmnCrntPMRSESTimeStamp,
       "stmnCrntPMRSESValidity": stmnCrntPMRSESValidity,
       "stmnCrntPMRSSESValue": stmnCrntPMRSSESValue,
       "stmnCrntPMRSSESTimeStamp": stmnCrntPMRSSESTimeStamp,
       "stmnCrntPMRSSESValidity": stmnCrntPMRSSESValidity,
       "stmnCrntPMRSOFSValue": stmnCrntPMRSOFSValue,
       "stmnCrntPMRSOFSTimeStamp": stmnCrntPMRSOFSTimeStamp,
       "stmnCrntPMRSOFSValidity": stmnCrntPMRSOFSValidity,
       "stmnCrntPMSupplyVoltage2Value": stmnCrntPMSupplyVoltage2Value,
       "stmnCrntPMSupplyVoltage2TimeStamp": stmnCrntPMSupplyVoltage2TimeStamp,
       "stmnCrntPMSupplyVoltage2Validity": stmnCrntPMSupplyVoltage2Validity,
       "stmnCrntPMMSEBValue": stmnCrntPMMSEBValue,
       "stmnCrntPMMSEBTimeStamp": stmnCrntPMMSEBTimeStamp,
       "stmnCrntPMMSEBValidity": stmnCrntPMMSEBValidity,
       "stmnCrntPMMSBBEValue": stmnCrntPMMSBBEValue,
       "stmnCrntPMMSBBETimeStamp": stmnCrntPMMSBBETimeStamp,
       "stmnCrntPMMSBBEValidity": stmnCrntPMMSBBEValidity,
       "stmnCrntPMMSESValue": stmnCrntPMMSESValue,
       "stmnCrntPMMSESTimeStamp": stmnCrntPMMSESTimeStamp,
       "stmnCrntPMMSESValidity": stmnCrntPMMSESValidity,
       "stmnCrntPMMSSESValue": stmnCrntPMMSSESValue,
       "stmnCrntPMMSSESTimeStamp": stmnCrntPMMSSESTimeStamp,
       "stmnCrntPMMSSESValidity": stmnCrntPMMSSESValidity,
       "stmnCrntPMMSUASValue": stmnCrntPMMSUASValue,
       "stmnCrntPMMSUASTimeStamp": stmnCrntPMMSUASTimeStamp,
       "stmnCrntPMMSUASValidity": stmnCrntPMMSUASValidity,
       "stmnCrntPMOTUEBValue": stmnCrntPMOTUEBValue,
       "stmnCrntPMOTUEBTimeStamp": stmnCrntPMOTUEBTimeStamp,
       "stmnCrntPMOTUEBValidity": stmnCrntPMOTUEBValidity,
       "stmnCrntPMOTUBBEValue": stmnCrntPMOTUBBEValue,
       "stmnCrntPMOTUBBETimeStamp": stmnCrntPMOTUBBETimeStamp,
       "stmnCrntPMOTUBBEValidity": stmnCrntPMOTUBBEValidity,
       "stmnCrntPMOTUESValue": stmnCrntPMOTUESValue,
       "stmnCrntPMOTUESTimeStamp": stmnCrntPMOTUESTimeStamp,
       "stmnCrntPMOTUESValidity": stmnCrntPMOTUESValidity,
       "stmnCrntPMOTUSESValue": stmnCrntPMOTUSESValue,
       "stmnCrntPMOTUSESTimeStamp": stmnCrntPMOTUSESTimeStamp,
       "stmnCrntPMOTUSESValidity": stmnCrntPMOTUSESValidity,
       "stmnCrntPMOTUOFSValue": stmnCrntPMOTUOFSValue,
       "stmnCrntPMOTUOFSTimeStamp": stmnCrntPMOTUOFSTimeStamp,
       "stmnCrntPMOTUOFSValidity": stmnCrntPMOTUOFSValidity,
       "stmnCrntPMNBITCRValue": stmnCrntPMNBITCRValue,
       "stmnCrntPMNBITCRTimeStamp": stmnCrntPMNBITCRTimeStamp,
       "stmnCrntPMNBITCRValidity": stmnCrntPMNBITCRValidity,
       "stmnCrntPMNBYTCRValue": stmnCrntPMNBYTCRValue,
       "stmnCrntPMNBYTCRTimeStamp": stmnCrntPMNBYTCRTimeStamp,
       "stmnCrntPMNBYTCRValidity": stmnCrntPMNBYTCRValidity,
       "stmnCrntPMUNCRCDWValue": stmnCrntPMUNCRCDWValue,
       "stmnCrntPMUNCRCDWTimeStamp": stmnCrntPMUNCRCDWTimeStamp,
       "stmnCrntPMUNCRCDWValidity": stmnCrntPMUNCRCDWValidity,
       "stmnCrntPMRSEBInitialize": stmnCrntPMRSEBInitialize,
       "stmnCrntPMRSBBEInitialize": stmnCrntPMRSBBEInitialize,
       "stmnCrntPMRSESInitialize": stmnCrntPMRSESInitialize,
       "stmnCrntPMRSSESInitialize": stmnCrntPMRSSESInitialize,
       "stmnCrntPMRSOFSInitialize": stmnCrntPMRSOFSInitialize,
       "stmnCrntPMMSEBInitialize": stmnCrntPMMSEBInitialize,
       "stmnCrntPMMSBBEInitialize": stmnCrntPMMSBBEInitialize,
       "stmnCrntPMMSESInitialize": stmnCrntPMMSESInitialize,
       "stmnCrntPMMSSESInitialize": stmnCrntPMMSSESInitialize,
       "stmnCrntPMMSUASInitialize": stmnCrntPMMSUASInitialize,
       "stmnCrntPMOTUEBInitialize": stmnCrntPMOTUEBInitialize,
       "stmnCrntPMOTUBBEInitialize": stmnCrntPMOTUBBEInitialize,
       "stmnCrntPMOTUESInitialize": stmnCrntPMOTUESInitialize,
       "stmnCrntPMOTUSESInitialize": stmnCrntPMOTUSESInitialize,
       "stmnCrntPMOTUOFSInitialize": stmnCrntPMOTUOFSInitialize,
       "stmnCrntPMNBITCRInitialize": stmnCrntPMNBITCRInitialize,
       "stmnCrntPMNBYTCRInitialize": stmnCrntPMNBYTCRInitialize,
       "stmnCrntPMUNCRCDWInitialize": stmnCrntPMUNCRCDWInitialize,
       "stmnCrntPMOTNBERValue": stmnCrntPMOTNBERValue,
       "stmnCrntPMOTNBERTimeStamp": stmnCrntPMOTNBERTimeStamp,
       "stmnCrntPMOTNBERValidity": stmnCrntPMOTNBERValidity,
       "stmnCrntPMOTNBERInitialize": stmnCrntPMOTNBERInitialize,
       "stmnCrntPMOTNAVGBERValue": stmnCrntPMOTNAVGBERValue,
       "stmnCrntPMOTNAVGBERTimeStamp": stmnCrntPMOTNAVGBERTimeStamp,
       "stmnCrntPMOTNAVGBERValidity": stmnCrntPMOTNAVGBERValidity,
       "stmnCrntPMOTNAVGBERInitialize": stmnCrntPMOTNAVGBERInitialize,
       "stmnCrntPMNBITCR64BitValue": stmnCrntPMNBITCR64BitValue,
       "stmnCrntPMNBITCR64BitTimeStamp": stmnCrntPMNBITCR64BitTimeStamp,
       "stmnCrntPMNBITCR64BitValidity": stmnCrntPMNBITCR64BitValidity,
       "stmnCrntPMNBITCR64BitInitialize": stmnCrntPMNBITCR64BitInitialize,
       "stmnCrntPMNBYTCR64BitValue": stmnCrntPMNBYTCR64BitValue,
       "stmnCrntPMNBYTCR64BitTimeStamp": stmnCrntPMNBYTCR64BitTimeStamp,
       "stmnCrntPMNBYTCR64BitValidity": stmnCrntPMNBYTCR64BitValidity,
       "stmnCrntPMNBYTCR64BitInitialize": stmnCrntPMNBYTCR64BitInitialize,
       "stmnCrntPMRSUASValue": stmnCrntPMRSUASValue,
       "stmnCrntPMRSUASTimeStamp": stmnCrntPMRSUASTimeStamp,
       "stmnCrntPMRSUASValidity": stmnCrntPMRSUASValidity,
       "stmnCrntPMRSUASInitialize": stmnCrntPMRSUASInitialize,
       "stmnCrntPMOTUUASValue": stmnCrntPMOTUUASValue,
       "stmnCrntPMOTUUASTimeStamp": stmnCrntPMOTUUASTimeStamp,
       "stmnCrntPMOTUUASValidity": stmnCrntPMOTUUASValidity,
       "stmnCrntPMOTUUASInitialize": stmnCrntPMOTUUASInitialize,
       "stmnCrntPMOPRMinValue": stmnCrntPMOPRMinValue,
       "stmnCrntPMOPRMinTimeStamp": stmnCrntPMOPRMinTimeStamp,
       "stmnCrntPMOPRMinValidity": stmnCrntPMOPRMinValidity,
       "stmnCrntPMOPRMinInitialize": stmnCrntPMOPRMinInitialize,
       "stmnCrntPMOPRMaxValue": stmnCrntPMOPRMaxValue,
       "stmnCrntPMOPRMaxTimeStamp": stmnCrntPMOPRMaxTimeStamp,
       "stmnCrntPMOPRMaxValidity": stmnCrntPMOPRMaxValidity,
       "stmnCrntPMOPRMaxInitialize": stmnCrntPMOPRMaxInitialize,
       "stmnCrntPMOPRAvgValue": stmnCrntPMOPRAvgValue,
       "stmnCrntPMOPRAvgTimeStamp": stmnCrntPMOPRAvgTimeStamp,
       "stmnCrntPMOPRAvgValidity": stmnCrntPMOPRAvgValidity,
       "stmnCrntPMOPRAvgInitialize": stmnCrntPMOPRAvgInitialize,
       "stmnCrntPMOPTMinValue": stmnCrntPMOPTMinValue,
       "stmnCrntPMOPTMinTimeStamp": stmnCrntPMOPTMinTimeStamp,
       "stmnCrntPMOPTMinValidity": stmnCrntPMOPTMinValidity,
       "stmnCrntPMOPTMinInitialize": stmnCrntPMOPTMinInitialize,
       "stmnCrntPMOPTMaxValue": stmnCrntPMOPTMaxValue,
       "stmnCrntPMOPTMaxTimeStamp": stmnCrntPMOPTMaxTimeStamp,
       "stmnCrntPMOPTMaxValidity": stmnCrntPMOPTMaxValidity,
       "stmnCrntPMOPTMaxInitialize": stmnCrntPMOPTMaxInitialize,
       "stmnCrntPMOPTAvgValue": stmnCrntPMOPTAvgValue,
       "stmnCrntPMOPTAvgTimeStamp": stmnCrntPMOPTAvgTimeStamp,
       "stmnCrntPMOPTAvgValidity": stmnCrntPMOPTAvgValidity,
       "stmnCrntPMOPTAvgInitialize": stmnCrntPMOPTAvgInitialize,
       "stmnHistPMTable": stmnHistPMTable,
       "stmnHistPMEntry": stmnHistPMEntry,
       "stmnHistPMTypeIdx": stmnHistPMTypeIdx,
       "stmnHistPMShelfIdx": stmnHistPMShelfIdx,
       "stmnHistPMSlotIdx": stmnHistPMSlotIdx,
       "stmnHistPMPortIdx": stmnHistPMPortIdx,
       "stmnHistPMIntervalTypeIdx": stmnHistPMIntervalTypeIdx,
       "stmnHistPMIntervalIdx": stmnHistPMIntervalIdx,
       "stmnHistPMOPRValue": stmnHistPMOPRValue,
       "stmnHistPMOPRTimeStamp": stmnHistPMOPRTimeStamp,
       "stmnHistPMOPRValidity": stmnHistPMOPRValidity,
       "stmnHistPMOPTValue": stmnHistPMOPTValue,
       "stmnHistPMOPTTimeStamp": stmnHistPMOPTTimeStamp,
       "stmnHistPMOPTValidity": stmnHistPMOPTValidity,
       "stmnHistPMTempValue": stmnHistPMTempValue,
       "stmnHistPMTempTimeStamp": stmnHistPMTempTimeStamp,
       "stmnHistPMTempValidity": stmnHistPMTempValidity,
       "stmnHistPMSupplyVoltageValue": stmnHistPMSupplyVoltageValue,
       "stmnHistPMSupplyVoltageTimeStamp": stmnHistPMSupplyVoltageTimeStamp,
       "stmnHistPMSupplyVoltageValidity": stmnHistPMSupplyVoltageValidity,
       "stmnHistPMLBCValue": stmnHistPMLBCValue,
       "stmnHistPMLBCTimeStamp": stmnHistPMLBCTimeStamp,
       "stmnHistPMLBCValidity": stmnHistPMLBCValidity,
       "stmnHistPMRSEBValue": stmnHistPMRSEBValue,
       "stmnHistPMRSEBTimeStamp": stmnHistPMRSEBTimeStamp,
       "stmnHistPMRSEBValidity": stmnHistPMRSEBValidity,
       "stmnHistPMRSBBEValue": stmnHistPMRSBBEValue,
       "stmnHistPMRSBBETimeStamp": stmnHistPMRSBBETimeStamp,
       "stmnHistPMRSBBEValidity": stmnHistPMRSBBEValidity,
       "stmnHistPMRSESValue": stmnHistPMRSESValue,
       "stmnHistPMRSESTimeStamp": stmnHistPMRSESTimeStamp,
       "stmnHistPMRSESValidity": stmnHistPMRSESValidity,
       "stmnHistPMRSSESValue": stmnHistPMRSSESValue,
       "stmnHistPMRSSESTimeStamp": stmnHistPMRSSESTimeStamp,
       "stmnHistPMRSSESValidity": stmnHistPMRSSESValidity,
       "stmnHistPMRSOFSValue": stmnHistPMRSOFSValue,
       "stmnHistPMRSOFSTimeStamp": stmnHistPMRSOFSTimeStamp,
       "stmnHistPMRSOFSValidity": stmnHistPMRSOFSValidity,
       "stmnHistPMSupplyVoltage2Value": stmnHistPMSupplyVoltage2Value,
       "stmnHistPMSupplyVoltage2TimeStamp": stmnHistPMSupplyVoltage2TimeStamp,
       "stmnHistPMSupplyVoltage2Validity": stmnHistPMSupplyVoltage2Validity,
       "stmnHistPMMSEBValue": stmnHistPMMSEBValue,
       "stmnHistPMMSEBTimeStamp": stmnHistPMMSEBTimeStamp,
       "stmnHistPMMSEBValidity": stmnHistPMMSEBValidity,
       "stmnHistPMMSBBEValue": stmnHistPMMSBBEValue,
       "stmnHistPMMSBBETimeStamp": stmnHistPMMSBBETimeStamp,
       "stmnHistPMMSBBEValidity": stmnHistPMMSBBEValidity,
       "stmnHistPMMSESValue": stmnHistPMMSESValue,
       "stmnHistPMMSESTimeStamp": stmnHistPMMSESTimeStamp,
       "stmnHistPMMSESValidity": stmnHistPMMSESValidity,
       "stmnHistPMMSSESValue": stmnHistPMMSSESValue,
       "stmnHistPMMSSESTimeStamp": stmnHistPMMSSESTimeStamp,
       "stmnHistPMMSSESValidity": stmnHistPMMSSESValidity,
       "stmnHistPMMSUASValue": stmnHistPMMSUASValue,
       "stmnHistPMMSUASTimeStamp": stmnHistPMMSUASTimeStamp,
       "stmnHistPMMSUASValidity": stmnHistPMMSUASValidity,
       "stmnHistPMOTUEBValue": stmnHistPMOTUEBValue,
       "stmnHistPMOTUEBTimeStamp": stmnHistPMOTUEBTimeStamp,
       "stmnHistPMOTUEBValidity": stmnHistPMOTUEBValidity,
       "stmnHistPMOTUBBEValue": stmnHistPMOTUBBEValue,
       "stmnHistPMOTUBBETimeStamp": stmnHistPMOTUBBETimeStamp,
       "stmnHistPMOTUBBEValidity": stmnHistPMOTUBBEValidity,
       "stmnHistPMOTUESValue": stmnHistPMOTUESValue,
       "stmnHistPMOTUESTimeStamp": stmnHistPMOTUESTimeStamp,
       "stmnHistPMOTUESValidity": stmnHistPMOTUESValidity,
       "stmnHistPMOTUSESValue": stmnHistPMOTUSESValue,
       "stmnHistPMOTUSESTimeStamp": stmnHistPMOTUSESTimeStamp,
       "stmnHistPMOTUSESValidity": stmnHistPMOTUSESValidity,
       "stmnHistPMOTUOFSValue": stmnHistPMOTUOFSValue,
       "stmnHistPMOTUOFSTimeStamp": stmnHistPMOTUOFSTimeStamp,
       "stmnHistPMOTUOFSValidity": stmnHistPMOTUOFSValidity,
       "stmnHistPMNBITCRValue": stmnHistPMNBITCRValue,
       "stmnHistPMNBITCRTimeStamp": stmnHistPMNBITCRTimeStamp,
       "stmnHistPMNBITCRValidity": stmnHistPMNBITCRValidity,
       "stmnHistPMNBYTCRValue": stmnHistPMNBYTCRValue,
       "stmnHistPMNBYTCRTimeStamp": stmnHistPMNBYTCRTimeStamp,
       "stmnHistPMNBYTCRValidity": stmnHistPMNBYTCRValidity,
       "stmnHistPMUNCRCDWValue": stmnHistPMUNCRCDWValue,
       "stmnHistPMUNCRCDWTimeStamp": stmnHistPMUNCRCDWTimeStamp,
       "stmnHistPMUNCRCDWValidity": stmnHistPMUNCRCDWValidity,
       "stmnHistPMRSEBInitialize": stmnHistPMRSEBInitialize,
       "stmnHistPMRSBBEInitialize": stmnHistPMRSBBEInitialize,
       "stmnHistPMRSESInitialize": stmnHistPMRSESInitialize,
       "stmnHistPMRSSESInitialize": stmnHistPMRSSESInitialize,
       "stmnHistPMRSOFSInitialize": stmnHistPMRSOFSInitialize,
       "stmnHistPMMSEBInitialize": stmnHistPMMSEBInitialize,
       "stmnHistPMMSBBEInitialize": stmnHistPMMSBBEInitialize,
       "stmnHistPMMSESInitialize": stmnHistPMMSESInitialize,
       "stmnHistPMMSSESInitialize": stmnHistPMMSSESInitialize,
       "stmnHistPMMSUASInitialize": stmnHistPMMSUASInitialize,
       "stmnHistPMOTUEBInitialize": stmnHistPMOTUEBInitialize,
       "stmnHistPMOTUBBEInitialize": stmnHistPMOTUBBEInitialize,
       "stmnHistPMOTUESInitialize": stmnHistPMOTUESInitialize,
       "stmnHistPMOTUSESInitialize": stmnHistPMOTUSESInitialize,
       "stmnHistPMOTUOFSInitialize": stmnHistPMOTUOFSInitialize,
       "stmnHistPMNBITCRInitialize": stmnHistPMNBITCRInitialize,
       "stmnHistPMNBYTCRInitialize": stmnHistPMNBYTCRInitialize,
       "stmnHistPMUNCRCDWInitialize": stmnHistPMUNCRCDWInitialize,
       "stmnHistPMOTNBERValue": stmnHistPMOTNBERValue,
       "stmnHistPMOTNBERTimeStamp": stmnHistPMOTNBERTimeStamp,
       "stmnHistPMOTNBERValidity": stmnHistPMOTNBERValidity,
       "stmnHistPMOTNBERInitialize": stmnHistPMOTNBERInitialize,
       "stmnHistPMOTNAVGBERValue": stmnHistPMOTNAVGBERValue,
       "stmnHistPMOTNAVGBERTimeStamp": stmnHistPMOTNAVGBERTimeStamp,
       "stmnHistPMOTNAVGBERValidity": stmnHistPMOTNAVGBERValidity,
       "stmnHistPMOTNAVGBERInitialize": stmnHistPMOTNAVGBERInitialize,
       "stmnHistPMNBITCR64BitValue": stmnHistPMNBITCR64BitValue,
       "stmnHistPMNBITCR64BitTimeStamp": stmnHistPMNBITCR64BitTimeStamp,
       "stmnHistPMNBITCR64BitValidity": stmnHistPMNBITCR64BitValidity,
       "stmnHistPMNBITCR64BitInitialize": stmnHistPMNBITCR64BitInitialize,
       "stmnHistPMNBYTCR64BitValue": stmnHistPMNBYTCR64BitValue,
       "stmnHistPMNBYTCR64BitTimeStamp": stmnHistPMNBYTCR64BitTimeStamp,
       "stmnHistPMNBYTCR64BitValidity": stmnHistPMNBYTCR64BitValidity,
       "stmnHistPMNBYTCR64BitInitialize": stmnHistPMNBYTCR64BitInitialize,
       "stmnHistPMRSUASValue": stmnHistPMRSUASValue,
       "stmnHistPMRSUASTimeStamp": stmnHistPMRSUASTimeStamp,
       "stmnHistPMRSUASValidity": stmnHistPMRSUASValidity,
       "stmnHistPMRSUASInitialize": stmnHistPMRSUASInitialize,
       "stmnHistPMOTUUASValue": stmnHistPMOTUUASValue,
       "stmnHistPMOTUUASTimeStamp": stmnHistPMOTUUASTimeStamp,
       "stmnHistPMOTUUASValidity": stmnHistPMOTUUASValidity,
       "stmnHistPMOTUUASInitialize": stmnHistPMOTUUASInitialize,
       "stmnHistPMOPRMinValue": stmnHistPMOPRMinValue,
       "stmnHistPMOPRMinTimeStamp": stmnHistPMOPRMinTimeStamp,
       "stmnHistPMOPRMinValidity": stmnHistPMOPRMinValidity,
       "stmnHistPMOPRMinInitialize": stmnHistPMOPRMinInitialize,
       "stmnHistPMOPRMaxValue": stmnHistPMOPRMaxValue,
       "stmnHistPMOPRMaxTimeStamp": stmnHistPMOPRMaxTimeStamp,
       "stmnHistPMOPRMaxValidity": stmnHistPMOPRMaxValidity,
       "stmnHistPMOPRMaxInitialize": stmnHistPMOPRMaxInitialize,
       "stmnHistPMOPRAvgValue": stmnHistPMOPRAvgValue,
       "stmnHistPMOPRAvgTimeStamp": stmnHistPMOPRAvgTimeStamp,
       "stmnHistPMOPRAvgValidity": stmnHistPMOPRAvgValidity,
       "stmnHistPMOPRAvgInitialize": stmnHistPMOPRAvgInitialize,
       "stmnHistPMOPTMinValue": stmnHistPMOPTMinValue,
       "stmnHistPMOPTMinTimeStamp": stmnHistPMOPTMinTimeStamp,
       "stmnHistPMOPTMinValidity": stmnHistPMOPTMinValidity,
       "stmnHistPMOPTMinInitialize": stmnHistPMOPTMinInitialize,
       "stmnHistPMOPTMaxValue": stmnHistPMOPTMaxValue,
       "stmnHistPMOPTMaxTimeStamp": stmnHistPMOPTMaxTimeStamp,
       "stmnHistPMOPTMaxValidity": stmnHistPMOPTMaxValidity,
       "stmnHistPMOPTMaxInitialize": stmnHistPMOPTMaxInitialize,
       "stmnHistPMOPTAvgValue": stmnHistPMOPTAvgValue,
       "stmnHistPMOPTAvgTimeStamp": stmnHistPMOPTAvgTimeStamp,
       "stmnHistPMOPTAvgValidity": stmnHistPMOPTAvgValidity,
       "stmnHistPMOPTAvgInitialize": stmnHistPMOPTAvgInitialize,
       "stmnPMThresholdTable": stmnPMThresholdTable,
       "stmnPMThresholdEntry": stmnPMThresholdEntry,
       "stmnPMThresholdTypeIdx": stmnPMThresholdTypeIdx,
       "stmnPMThresholdShelfIdx": stmnPMThresholdShelfIdx,
       "stmnPMThresholdSlotIdx": stmnPMThresholdSlotIdx,
       "stmnPMThresholdPortIdx": stmnPMThresholdPortIdx,
       "stmnPMThresholdIntervalTypeIdx": stmnPMThresholdIntervalTypeIdx,
       "stmnPMThresholdRSEBValue": stmnPMThresholdRSEBValue,
       "stmnPMThresholdRSBBEValue": stmnPMThresholdRSBBEValue,
       "stmnPMThresholdRSESValue": stmnPMThresholdRSESValue,
       "stmnPMThresholdRSSESValue": stmnPMThresholdRSSESValue,
       "stmnPMThresholdRSOFSValue": stmnPMThresholdRSOFSValue,
       "stmnPMThresholdMSEBValue": stmnPMThresholdMSEBValue,
       "stmnPMThresholdMSBBEValue": stmnPMThresholdMSBBEValue,
       "stmnPMThresholdMSESValue": stmnPMThresholdMSESValue,
       "stmnPMThresholdMSSESValue": stmnPMThresholdMSSESValue,
       "stmnPMThresholdMSUASValue": stmnPMThresholdMSUASValue,
       "stmnPMThresholdOTUEBValue": stmnPMThresholdOTUEBValue,
       "stmnPMThresholdOTUBBEValue": stmnPMThresholdOTUBBEValue,
       "stmnPMThresholdOTUESValue": stmnPMThresholdOTUESValue,
       "stmnPMThresholdOTUSESValue": stmnPMThresholdOTUSESValue,
       "stmnPMThresholdOTUOFSValue": stmnPMThresholdOTUOFSValue,
       "stmnPMThresholdUNCRCDWValue": stmnPMThresholdUNCRCDWValue,
       "stmnPMThresholdRSUASValue": stmnPMThresholdRSUASValue,
       "stmnPMThresholdOTUUASValue": stmnPMThresholdOTUUASValue,
       "vcnCrntPMTable": vcnCrntPMTable,
       "vcnCrntPMEntry": vcnCrntPMEntry,
       "vcnCrntPMTypeIdx": vcnCrntPMTypeIdx,
       "vcnCrntPMShelfIdx": vcnCrntPMShelfIdx,
       "vcnCrntPMSlotIdx": vcnCrntPMSlotIdx,
       "vcnCrntPMPortIdx": vcnCrntPMPortIdx,
       "vcnCrntPMIdx": vcnCrntPMIdx,
       "vcnCrntPMIntervalTypeIdx": vcnCrntPMIntervalTypeIdx,
       "vcnCrntPMHPEBValue": vcnCrntPMHPEBValue,
       "vcnCrntPMHPEBTimeStamp": vcnCrntPMHPEBTimeStamp,
       "vcnCrntPMHPEBValidity": vcnCrntPMHPEBValidity,
       "vcnCrntPMHPBBEValue": vcnCrntPMHPBBEValue,
       "vcnCrntPMHPBBETimeStamp": vcnCrntPMHPBBETimeStamp,
       "vcnCrntPMHPBBEValidity": vcnCrntPMHPBBEValidity,
       "vcnCrntPMHPESValue": vcnCrntPMHPESValue,
       "vcnCrntPMHPESTimeStamp": vcnCrntPMHPESTimeStamp,
       "vcnCrntPMHPESValidity": vcnCrntPMHPESValidity,
       "vcnCrntPMHPSESValue": vcnCrntPMHPSESValue,
       "vcnCrntPMHPSESTimeStamp": vcnCrntPMHPSESTimeStamp,
       "vcnCrntPMHPSESValidity": vcnCrntPMHPSESValidity,
       "vcnCrntPMHPUASValue": vcnCrntPMHPUASValue,
       "vcnCrntPMHPUASTimeStamp": vcnCrntPMHPUASTimeStamp,
       "vcnCrntPMHPUASValidity": vcnCrntPMHPUASValidity,
       "vcnCrntPMHPEBInitialize": vcnCrntPMHPEBInitialize,
       "vcnCrntPMHPBBEInitialize": vcnCrntPMHPBBEInitialize,
       "vcnCrntPMHPESInitialize": vcnCrntPMHPESInitialize,
       "vcnCrntPMHPSESInitialize": vcnCrntPMHPSESInitialize,
       "vcnCrntPMHPUASInitialize": vcnCrntPMHPUASInitialize,
       "vcnHistPMTable": vcnHistPMTable,
       "vcnHistPMEntry": vcnHistPMEntry,
       "vcnHistPMTypeIdx": vcnHistPMTypeIdx,
       "vcnHistPMShelfIdx": vcnHistPMShelfIdx,
       "vcnHistPMSlotIdx": vcnHistPMSlotIdx,
       "vcnHistPMPortIdx": vcnHistPMPortIdx,
       "vcnHistPMIdx": vcnHistPMIdx,
       "vcnHistPMIntervalTypeIdx": vcnHistPMIntervalTypeIdx,
       "vcnHistPMIntervalIdx": vcnHistPMIntervalIdx,
       "vcnHistPMHPEBValue": vcnHistPMHPEBValue,
       "vcnHistPMHPEBTimeStamp": vcnHistPMHPEBTimeStamp,
       "vcnHistPMHPEBValidity": vcnHistPMHPEBValidity,
       "vcnHistPMHPBBEValue": vcnHistPMHPBBEValue,
       "vcnHistPMHPBBETimeStamp": vcnHistPMHPBBETimeStamp,
       "vcnHistPMHPBBEValidity": vcnHistPMHPBBEValidity,
       "vcnHistPMHPESValue": vcnHistPMHPESValue,
       "vcnHistPMHPESTimeStamp": vcnHistPMHPESTimeStamp,
       "vcnHistPMHPESValidity": vcnHistPMHPESValidity,
       "vcnHistPMHPSESValue": vcnHistPMHPSESValue,
       "vcnHistPMHPSESTimeStamp": vcnHistPMHPSESTimeStamp,
       "vcnHistPMHPSESValidity": vcnHistPMHPSESValidity,
       "vcnHistPMHPUASValue": vcnHistPMHPUASValue,
       "vcnHistPMHPUASTimeStamp": vcnHistPMHPUASTimeStamp,
       "vcnHistPMHPUASValidity": vcnHistPMHPUASValidity,
       "vcnHistPMHPEBInitialize": vcnHistPMHPEBInitialize,
       "vcnHistPMHPBBEInitialize": vcnHistPMHPBBEInitialize,
       "vcnHistPMHPESInitialize": vcnHistPMHPESInitialize,
       "vcnHistPMHPSESInitialize": vcnHistPMHPSESInitialize,
       "vcnHistPMHPUASInitialize": vcnHistPMHPUASInitialize,
       "vcnPMThresholdByPortTable": vcnPMThresholdByPortTable,
       "vcnPMThresholdByPortEntry": vcnPMThresholdByPortEntry,
       "vcnPMThresholdByPortTypeIdx": vcnPMThresholdByPortTypeIdx,
       "vcnPMThresholdByPortShelfIdx": vcnPMThresholdByPortShelfIdx,
       "vcnPMThresholdByPortSlotIdx": vcnPMThresholdByPortSlotIdx,
       "vcnPMThresholdByPortIdx": vcnPMThresholdByPortIdx,
       "vcnPMThresholdByPortIntervalTypeIdx": vcnPMThresholdByPortIntervalTypeIdx,
       "vcnPMThresholdByPortHPEBValue": vcnPMThresholdByPortHPEBValue,
       "vcnPMThresholdByPortHPBBEValue": vcnPMThresholdByPortHPBBEValue,
       "vcnPMThresholdByPortHPESValue": vcnPMThresholdByPortHPESValue,
       "vcnPMThresholdByPortHPSESValue": vcnPMThresholdByPortHPSESValue,
       "vcnPMThresholdByPortHPUASValue": vcnPMThresholdByPortHPUASValue,
       "geCrntPMTable": geCrntPMTable,
       "geCrntPMEntry": geCrntPMEntry,
       "geCrntPMShelfIdx": geCrntPMShelfIdx,
       "geCrntPMSlotIdx": geCrntPMSlotIdx,
       "geCrntPMPortIdx": geCrntPMPortIdx,
       "geCrntPMIntervalTypeIdx": geCrntPMIntervalTypeIdx,
       "geCrntPMOPRValue": geCrntPMOPRValue,
       "geCrntPMOPRTimeStamp": geCrntPMOPRTimeStamp,
       "geCrntPMOPRValidity": geCrntPMOPRValidity,
       "geCrntPMOPTValue": geCrntPMOPTValue,
       "geCrntPMOPTTimeStamp": geCrntPMOPTTimeStamp,
       "geCrntPMOPTValidity": geCrntPMOPTValidity,
       "geCrntPMTempValue": geCrntPMTempValue,
       "geCrntPMTempTimeStamp": geCrntPMTempTimeStamp,
       "geCrntPMTempValidity": geCrntPMTempValidity,
       "geCrntPMSupplyVoltageValue": geCrntPMSupplyVoltageValue,
       "geCrntPMSupplyVoltageTimeStamp": geCrntPMSupplyVoltageTimeStamp,
       "geCrntPMSupplyVoltageValidity": geCrntPMSupplyVoltageValidity,
       "geCrntPMLBCValue": geCrntPMLBCValue,
       "geCrntPMLBCTimeStamp": geCrntPMLBCTimeStamp,
       "geCrntPMLBCValidity": geCrntPMLBCValidity,
       "geCrntPMCVValue": geCrntPMCVValue,
       "geCrntPMCVTimeStamp": geCrntPMCVTimeStamp,
       "geCrntPMCVValidity": geCrntPMCVValidity,
       "geCrntPMESValue": geCrntPMESValue,
       "geCrntPMESTimeStamp": geCrntPMESTimeStamp,
       "geCrntPMESValidity": geCrntPMESValidity,
       "geCrntPMSESValue": geCrntPMSESValue,
       "geCrntPMSESTimeStamp": geCrntPMSESTimeStamp,
       "geCrntPMSESValidity": geCrntPMSESValidity,
       "geCrntPMTFRCRXValue": geCrntPMTFRCRXValue,
       "geCrntPMTFRCRXTimeStamp": geCrntPMTFRCRXTimeStamp,
       "geCrntPMTFRCRXValidity": geCrntPMTFRCRXValidity,
       "geCrntPMTFRCRXInitialize": geCrntPMTFRCRXInitialize,
       "geCrntPMTFRCTXValue": geCrntPMTFRCTXValue,
       "geCrntPMTFRCTXTimeStamp": geCrntPMTFRCTXTimeStamp,
       "geCrntPMTFRCTXValidity": geCrntPMTFRCTXValidity,
       "geCrntPMTFRCTXInitialize": geCrntPMTFRCTXInitialize,
       "geCrntPMFRDRValue": geCrntPMFRDRValue,
       "geCrntPMFRDRTimeStamp": geCrntPMFRDRTimeStamp,
       "geCrntPMFRDRValidity": geCrntPMFRDRValidity,
       "geCrntPMFCSEValue": geCrntPMFCSEValue,
       "geCrntPMFCSETimeStamp": geCrntPMFCSETimeStamp,
       "geCrntPMFCSEValidity": geCrntPMFCSEValidity,
       "geCrntPMTBYCRXValue": geCrntPMTBYCRXValue,
       "geCrntPMTBYCRXTimeStamp": geCrntPMTBYCRXTimeStamp,
       "geCrntPMTBYCRXValidity": geCrntPMTBYCRXValidity,
       "geCrntPMTBYCRXInitialize": geCrntPMTBYCRXInitialize,
       "geCrntPMTBYCTXValue": geCrntPMTBYCTXValue,
       "geCrntPMTBYCTXTimeStamp": geCrntPMTBYCTXTimeStamp,
       "geCrntPMTBYCTXValidity": geCrntPMTBYCTXValidity,
       "geCrntPMTBYCTXInitialize": geCrntPMTBYCTXInitialize,
       "geCrntPMBCSTValue": geCrntPMBCSTValue,
       "geCrntPMBCSTTimeStamp": geCrntPMBCSTTimeStamp,
       "geCrntPMBCSTValidity": geCrntPMBCSTValidity,
       "geCrntPMBCSTInitialize": geCrntPMBCSTInitialize,
       "geCrntPMMCSTValue": geCrntPMMCSTValue,
       "geCrntPMMCSTTimeStamp": geCrntPMMCSTTimeStamp,
       "geCrntPMMCSTValidity": geCrntPMMCSTValidity,
       "geCrntPMMCSTInitialize": geCrntPMMCSTInitialize,
       "geCrntPMSIZE64Value": geCrntPMSIZE64Value,
       "geCrntPMSIZE64TimeStamp": geCrntPMSIZE64TimeStamp,
       "geCrntPMSIZE64Validity": geCrntPMSIZE64Validity,
       "geCrntPMSIZE64Initialize": geCrntPMSIZE64Initialize,
       "geCrntPMSIZE65To127Value": geCrntPMSIZE65To127Value,
       "geCrntPMSIZE65To127TimeStamp": geCrntPMSIZE65To127TimeStamp,
       "geCrntPMSIZE65To127Validity": geCrntPMSIZE65To127Validity,
       "geCrntPMSIZE65To127Initialize": geCrntPMSIZE65To127Initialize,
       "geCrntPMSIZE128To255Value": geCrntPMSIZE128To255Value,
       "geCrntPMSIZE128To255TimeStamp": geCrntPMSIZE128To255TimeStamp,
       "geCrntPMSIZE128To255Validity": geCrntPMSIZE128To255Validity,
       "geCrntPMSIZE128To255Initialize": geCrntPMSIZE128To255Initialize,
       "geCrntPMSIZE256To511Value": geCrntPMSIZE256To511Value,
       "geCrntPMSIZE256To511TimeStamp": geCrntPMSIZE256To511TimeStamp,
       "geCrntPMSIZE256To511Validity": geCrntPMSIZE256To511Validity,
       "geCrntPMSIZE256To511Initialize": geCrntPMSIZE256To511Initialize,
       "geCrntPMSIZE512To1023Value": geCrntPMSIZE512To1023Value,
       "geCrntPMSIZE512To1023TimeStamp": geCrntPMSIZE512To1023TimeStamp,
       "geCrntPMSIZE512To1023Validity": geCrntPMSIZE512To1023Validity,
       "geCrntPMSIZE512To1023Initialize": geCrntPMSIZE512To1023Initialize,
       "geCrntPMSIZE1024To1518Value": geCrntPMSIZE1024To1518Value,
       "geCrntPMSIZE1024To1518TimeStamp": geCrntPMSIZE1024To1518TimeStamp,
       "geCrntPMSIZE1024To1518Validity": geCrntPMSIZE1024To1518Validity,
       "geCrntPMSIZE1024To1518Initialize": geCrntPMSIZE1024To1518Initialize,
       "geCrntPMSIZEOver1518Value": geCrntPMSIZEOver1518Value,
       "geCrntPMSIZEOver1518TimeStamp": geCrntPMSIZEOver1518TimeStamp,
       "geCrntPMSIZEOver1518Validity": geCrntPMSIZEOver1518Validity,
       "geCrntPMSIZEOver1518Initialize": geCrntPMSIZEOver1518Initialize,
       "geCrntPMTPFCRXValue": geCrntPMTPFCRXValue,
       "geCrntPMTPFCRXTimeStamp": geCrntPMTPFCRXTimeStamp,
       "geCrntPMTPFCRXValidity": geCrntPMTPFCRXValidity,
       "geCrntPMTPFCRXInitialize": geCrntPMTPFCRXInitialize,
       "geCrntPMTPFCTXValue": geCrntPMTPFCTXValue,
       "geCrntPMTPFCTXTimeStamp": geCrntPMTPFCTXTimeStamp,
       "geCrntPMTPFCTXValidity": geCrntPMTPFCTXValidity,
       "geCrntPMTPFCTXInitialize": geCrntPMTPFCTXInitialize,
       "geCrntPMUSIZEValue": geCrntPMUSIZEValue,
       "geCrntPMUSIZETimeStamp": geCrntPMUSIZETimeStamp,
       "geCrntPMUSIZEValidity": geCrntPMUSIZEValidity,
       "geCrntPMOSIZEValue": geCrntPMOSIZEValue,
       "geCrntPMOSIZETimeStamp": geCrntPMOSIZETimeStamp,
       "geCrntPMOSIZEValidity": geCrntPMOSIZEValidity,
       "geCrntPMFRGTValue": geCrntPMFRGTValue,
       "geCrntPMFRGTTimeStamp": geCrntPMFRGTTimeStamp,
       "geCrntPMFRGTValidity": geCrntPMFRGTValidity,
       "geCrntPMJABRValue": geCrntPMJABRValue,
       "geCrntPMJABRTimeStamp": geCrntPMJABRTimeStamp,
       "geCrntPMJABRValidity": geCrntPMJABRValidity,
       "geCrntPMCVInitialize": geCrntPMCVInitialize,
       "geCrntPMESInitialize": geCrntPMESInitialize,
       "geCrntPMSESInitialize": geCrntPMSESInitialize,
       "geCrntPMFCSEInitialize": geCrntPMFCSEInitialize,
       "geCrntPMFRDRInitialize": geCrntPMFRDRInitialize,
       "geCrntPMUSIZEInitialize": geCrntPMUSIZEInitialize,
       "geCrntPMOSIZEInitialize": geCrntPMOSIZEInitialize,
       "geCrntPMFRGTInitialize": geCrntPMFRGTInitialize,
       "geCrntPMJABRInitialize": geCrntPMJABRInitialize,
       "geCrntPMUASValue": geCrntPMUASValue,
       "geCrntPMUASTimeStamp": geCrntPMUASTimeStamp,
       "geCrntPMUASValidity": geCrntPMUASValidity,
       "geCrntPMUASInitialize": geCrntPMUASInitialize,
       "geCrntPMOPRMinValue": geCrntPMOPRMinValue,
       "geCrntPMOPRMinTimeStamp": geCrntPMOPRMinTimeStamp,
       "geCrntPMOPRMinValidity": geCrntPMOPRMinValidity,
       "geCrntPMOPRMinInitialize": geCrntPMOPRMinInitialize,
       "geCrntPMOPRMaxValue": geCrntPMOPRMaxValue,
       "geCrntPMOPRMaxTimeStamp": geCrntPMOPRMaxTimeStamp,
       "geCrntPMOPRMaxValidity": geCrntPMOPRMaxValidity,
       "geCrntPMOPRMaxInitialize": geCrntPMOPRMaxInitialize,
       "geCrntPMOPRAvgValue": geCrntPMOPRAvgValue,
       "geCrntPMOPRAvgTimeStamp": geCrntPMOPRAvgTimeStamp,
       "geCrntPMOPRAvgValidity": geCrntPMOPRAvgValidity,
       "geCrntPMOPRAvgInitialize": geCrntPMOPRAvgInitialize,
       "geCrntPMOPTMinValue": geCrntPMOPTMinValue,
       "geCrntPMOPTMinTimeStamp": geCrntPMOPTMinTimeStamp,
       "geCrntPMOPTMinValidity": geCrntPMOPTMinValidity,
       "geCrntPMOPTMinInitialize": geCrntPMOPTMinInitialize,
       "geCrntPMOPTMaxValue": geCrntPMOPTMaxValue,
       "geCrntPMOPTMaxTimeStamp": geCrntPMOPTMaxTimeStamp,
       "geCrntPMOPTMaxValidity": geCrntPMOPTMaxValidity,
       "geCrntPMOPTMaxInitialize": geCrntPMOPTMaxInitialize,
       "geCrntPMOPTAvgValue": geCrntPMOPTAvgValue,
       "geCrntPMOPTAvgTimeStamp": geCrntPMOPTAvgTimeStamp,
       "geCrntPMOPTAvgValidity": geCrntPMOPTAvgValidity,
       "geCrntPMOPTAvgInitialize": geCrntPMOPTAvgInitialize,
       "geHistPMTable": geHistPMTable,
       "geHistPMEntry": geHistPMEntry,
       "geHistPMShelfIdx": geHistPMShelfIdx,
       "geHistPMSlotIdx": geHistPMSlotIdx,
       "geHistPMPortIdx": geHistPMPortIdx,
       "geHistPMIntervalTypeIdx": geHistPMIntervalTypeIdx,
       "geHistPMIntervalIdx": geHistPMIntervalIdx,
       "geHistPMOPRValue": geHistPMOPRValue,
       "geHistPMOPRTimeStamp": geHistPMOPRTimeStamp,
       "geHistPMOPRValidity": geHistPMOPRValidity,
       "geHistPMOPTValue": geHistPMOPTValue,
       "geHistPMOPTTimeStamp": geHistPMOPTTimeStamp,
       "geHistPMOPTValidity": geHistPMOPTValidity,
       "geHistPMTempValue": geHistPMTempValue,
       "geHistPMTempTimeStamp": geHistPMTempTimeStamp,
       "geHistPMTempValidity": geHistPMTempValidity,
       "geHistPMSupplyVoltageValue": geHistPMSupplyVoltageValue,
       "geHistPMSupplyVoltageTimeStamp": geHistPMSupplyVoltageTimeStamp,
       "geHistPMSupplyVoltageValidity": geHistPMSupplyVoltageValidity,
       "geHistPMLBCValue": geHistPMLBCValue,
       "geHistPMLBCTimeStamp": geHistPMLBCTimeStamp,
       "geHistPMLBCValidity": geHistPMLBCValidity,
       "geHistPMCVValue": geHistPMCVValue,
       "geHistPMCVTimeStamp": geHistPMCVTimeStamp,
       "geHistPMCVValidity": geHistPMCVValidity,
       "geHistPMESValue": geHistPMESValue,
       "geHistPMESTimeStamp": geHistPMESTimeStamp,
       "geHistPMESValidity": geHistPMESValidity,
       "geHistPMSESValue": geHistPMSESValue,
       "geHistPMSESTimeStamp": geHistPMSESTimeStamp,
       "geHistPMSESValidity": geHistPMSESValidity,
       "geHistPMTFRCRXValue": geHistPMTFRCRXValue,
       "geHistPMTFRCRXTimeStamp": geHistPMTFRCRXTimeStamp,
       "geHistPMTFRCRXValidity": geHistPMTFRCRXValidity,
       "geHistPMTFRCRXInitialize": geHistPMTFRCRXInitialize,
       "geHistPMTFRCTXValue": geHistPMTFRCTXValue,
       "geHistPMTFRCTXTimeStamp": geHistPMTFRCTXTimeStamp,
       "geHistPMTFRCTXValidity": geHistPMTFRCTXValidity,
       "geHistPMTFRCTXInitialize": geHistPMTFRCTXInitialize,
       "geHistPMFRDRValue": geHistPMFRDRValue,
       "geHistPMFRDRTimeStamp": geHistPMFRDRTimeStamp,
       "geHistPMFRDRValidity": geHistPMFRDRValidity,
       "geHistPMFCSEValue": geHistPMFCSEValue,
       "geHistPMFCSETimeStamp": geHistPMFCSETimeStamp,
       "geHistPMFCSEValidity": geHistPMFCSEValidity,
       "geHistPMTBYCRXValue": geHistPMTBYCRXValue,
       "geHistPMTBYCRXTimeStamp": geHistPMTBYCRXTimeStamp,
       "geHistPMTBYCRXValidity": geHistPMTBYCRXValidity,
       "geHistPMTBYCRXInitialize": geHistPMTBYCRXInitialize,
       "geHistPMTBYCTXValue": geHistPMTBYCTXValue,
       "geHistPMTBYCTXTimeStamp": geHistPMTBYCTXTimeStamp,
       "geHistPMTBYCTXValidity": geHistPMTBYCTXValidity,
       "geHistPMTBYCTXInitialize": geHistPMTBYCTXInitialize,
       "geHistPMBCSTValue": geHistPMBCSTValue,
       "geHistPMBCSTTimeStamp": geHistPMBCSTTimeStamp,
       "geHistPMBCSTValidity": geHistPMBCSTValidity,
       "geHistPMBCSTInitialize": geHistPMBCSTInitialize,
       "geHistPMMCSTValue": geHistPMMCSTValue,
       "geHistPMMCSTTimeStamp": geHistPMMCSTTimeStamp,
       "geHistPMMCSTValidity": geHistPMMCSTValidity,
       "geHistPMMCSTInitialize": geHistPMMCSTInitialize,
       "geHistPMSIZE64Value": geHistPMSIZE64Value,
       "geHistPMSIZE64TimeStamp": geHistPMSIZE64TimeStamp,
       "geHistPMSIZE64Validity": geHistPMSIZE64Validity,
       "geHistPMSIZE64Initialize": geHistPMSIZE64Initialize,
       "geHistPMSIZE65To127Value": geHistPMSIZE65To127Value,
       "geHistPMSIZE65To127TimeStamp": geHistPMSIZE65To127TimeStamp,
       "geHistPMSIZE65To127Validity": geHistPMSIZE65To127Validity,
       "geHistPMSIZE65To127Initialize": geHistPMSIZE65To127Initialize,
       "geHistPMSIZE128To255Value": geHistPMSIZE128To255Value,
       "geHistPMSIZE128To255TimeStamp": geHistPMSIZE128To255TimeStamp,
       "geHistPMSIZE128To255Validity": geHistPMSIZE128To255Validity,
       "geHistPMSIZE128To255Initialize": geHistPMSIZE128To255Initialize,
       "geHistPMSIZE256To511Value": geHistPMSIZE256To511Value,
       "geHistPMSIZE256To511TimeStamp": geHistPMSIZE256To511TimeStamp,
       "geHistPMSIZE256To511Validity": geHistPMSIZE256To511Validity,
       "geHistPMSIZE256To511Initialize": geHistPMSIZE256To511Initialize,
       "geHistPMSIZE512To1023Value": geHistPMSIZE512To1023Value,
       "geHistPMSIZE512To1023TimeStamp": geHistPMSIZE512To1023TimeStamp,
       "geHistPMSIZE512To1023Validity": geHistPMSIZE512To1023Validity,
       "geHistPMSIZE512To1023Initialize": geHistPMSIZE512To1023Initialize,
       "geHistPMSIZE1024To1518Value": geHistPMSIZE1024To1518Value,
       "geHistPMSIZE1024To1518TimeStamp": geHistPMSIZE1024To1518TimeStamp,
       "geHistPMSIZE1024To1518Validity": geHistPMSIZE1024To1518Validity,
       "geHistPMSIZE1024To1518Initialize": geHistPMSIZE1024To1518Initialize,
       "geHistPMSIZEOver1518Value": geHistPMSIZEOver1518Value,
       "geHistPMSIZEOver1518TimeStamp": geHistPMSIZEOver1518TimeStamp,
       "geHistPMSIZEOver1518Validity": geHistPMSIZEOver1518Validity,
       "geHistPMSIZEOver1518Initialize": geHistPMSIZEOver1518Initialize,
       "geHistPMTPFCRXValue": geHistPMTPFCRXValue,
       "geHistPMTPFCRXTimeStamp": geHistPMTPFCRXTimeStamp,
       "geHistPMTPFCRXValidity": geHistPMTPFCRXValidity,
       "geHistPMTPFCRXInitialize": geHistPMTPFCRXInitialize,
       "geHistPMTPFCTXValue": geHistPMTPFCTXValue,
       "geHistPMTPFCTXTimeStamp": geHistPMTPFCTXTimeStamp,
       "geHistPMTPFCTXValidity": geHistPMTPFCTXValidity,
       "geHistPMTPFCTXInitialize": geHistPMTPFCTXInitialize,
       "geHistPMUSIZEValue": geHistPMUSIZEValue,
       "geHistPMUSIZETimeStamp": geHistPMUSIZETimeStamp,
       "geHistPMUSIZEValidity": geHistPMUSIZEValidity,
       "geHistPMOSIZEValue": geHistPMOSIZEValue,
       "geHistPMOSIZETimeStamp": geHistPMOSIZETimeStamp,
       "geHistPMOSIZEValidity": geHistPMOSIZEValidity,
       "geHistPMFRGTValue": geHistPMFRGTValue,
       "geHistPMFRGTTimeStamp": geHistPMFRGTTimeStamp,
       "geHistPMFRGTValidity": geHistPMFRGTValidity,
       "geHistPMJABRValue": geHistPMJABRValue,
       "geHistPMJABRTimeStamp": geHistPMJABRTimeStamp,
       "geHistPMJABRValidity": geHistPMJABRValidity,
       "geHistPMCVInitialize": geHistPMCVInitialize,
       "geHistPMESInitialize": geHistPMESInitialize,
       "geHistPMSESInitialize": geHistPMSESInitialize,
       "geHistPMFCSEInitialize": geHistPMFCSEInitialize,
       "geHistPMFRDRInitialize": geHistPMFRDRInitialize,
       "geHistPMUSIZEInitialize": geHistPMUSIZEInitialize,
       "geHistPMOSIZEInitialize": geHistPMOSIZEInitialize,
       "geHistPMFRGTInitialize": geHistPMFRGTInitialize,
       "geHistPMJABRInitialize": geHistPMJABRInitialize,
       "geHistPMUASValue": geHistPMUASValue,
       "geHistPMUASTimeStamp": geHistPMUASTimeStamp,
       "geHistPMUASValidity": geHistPMUASValidity,
       "geHistPMUASInitialize": geHistPMUASInitialize,
       "geHistPMOPRMinValue": geHistPMOPRMinValue,
       "geHistPMOPRMinTimeStamp": geHistPMOPRMinTimeStamp,
       "geHistPMOPRMinValidity": geHistPMOPRMinValidity,
       "geHistPMOPRMinInitialize": geHistPMOPRMinInitialize,
       "geHistPMOPRMaxValue": geHistPMOPRMaxValue,
       "geHistPMOPRMaxTimeStamp": geHistPMOPRMaxTimeStamp,
       "geHistPMOPRMaxValidity": geHistPMOPRMaxValidity,
       "geHistPMOPRMaxInitialize": geHistPMOPRMaxInitialize,
       "geHistPMOPRAvgValue": geHistPMOPRAvgValue,
       "geHistPMOPRAvgTimeStamp": geHistPMOPRAvgTimeStamp,
       "geHistPMOPRAvgValidity": geHistPMOPRAvgValidity,
       "geHistPMOPRAvgInitialize": geHistPMOPRAvgInitialize,
       "geHistPMOPTMinValue": geHistPMOPTMinValue,
       "geHistPMOPTMinTimeStamp": geHistPMOPTMinTimeStamp,
       "geHistPMOPTMinValidity": geHistPMOPTMinValidity,
       "geHistPMOPTMinInitialize": geHistPMOPTMinInitialize,
       "geHistPMOPTMaxValue": geHistPMOPTMaxValue,
       "geHistPMOPTMaxTimeStamp": geHistPMOPTMaxTimeStamp,
       "geHistPMOPTMaxValidity": geHistPMOPTMaxValidity,
       "geHistPMOPTMaxInitialize": geHistPMOPTMaxInitialize,
       "geHistPMOPTAvgValue": geHistPMOPTAvgValue,
       "geHistPMOPTAvgTimeStamp": geHistPMOPTAvgTimeStamp,
       "geHistPMOPTAvgValidity": geHistPMOPTAvgValidity,
       "geHistPMOPTAvgInitialize": geHistPMOPTAvgInitialize,
       "gePMThresholdTable": gePMThresholdTable,
       "gePMThresholdEntry": gePMThresholdEntry,
       "gePMThresholdShelfIdx": gePMThresholdShelfIdx,
       "gePMThresholdSlotIdx": gePMThresholdSlotIdx,
       "gePMThresholdPortIdx": gePMThresholdPortIdx,
       "gePMThresholdIntervalTypeIdx": gePMThresholdIntervalTypeIdx,
       "gePMThresholdCVValue": gePMThresholdCVValue,
       "gePMThresholdESValue": gePMThresholdESValue,
       "gePMThresholdSESValue": gePMThresholdSESValue,
       "gePMThresholdFRDRValue": gePMThresholdFRDRValue,
       "gePMThresholdFCSEValue": gePMThresholdFCSEValue,
       "gePMThresholdUSIZEValue": gePMThresholdUSIZEValue,
       "gePMThresholdOSIZEValue": gePMThresholdOSIZEValue,
       "gePMThresholdFRGTValue": gePMThresholdFRGTValue,
       "gePMThresholdJABRValue": gePMThresholdJABRValue,
       "gePMThresholdUASValue": gePMThresholdUASValue,
       "fcCrntPMTable": fcCrntPMTable,
       "fcCrntPMEntry": fcCrntPMEntry,
       "fcCrntPMShelfIdx": fcCrntPMShelfIdx,
       "fcCrntPMSlotIdx": fcCrntPMSlotIdx,
       "fcCrntPMPortIdx": fcCrntPMPortIdx,
       "fcCrntPMIntervalTypeIdx": fcCrntPMIntervalTypeIdx,
       "fcCrntPMOPRValue": fcCrntPMOPRValue,
       "fcCrntPMOPRTimeStamp": fcCrntPMOPRTimeStamp,
       "fcCrntPMOPRValidity": fcCrntPMOPRValidity,
       "fcCrntPMOPTValue": fcCrntPMOPTValue,
       "fcCrntPMOPTTimeStamp": fcCrntPMOPTTimeStamp,
       "fcCrntPMOPTValidity": fcCrntPMOPTValidity,
       "fcCrntPMTempValue": fcCrntPMTempValue,
       "fcCrntPMTempTimeStamp": fcCrntPMTempTimeStamp,
       "fcCrntPMTempValidity": fcCrntPMTempValidity,
       "fcCrntPMSupplyVoltageValue": fcCrntPMSupplyVoltageValue,
       "fcCrntPMSupplyVoltageTimeStamp": fcCrntPMSupplyVoltageTimeStamp,
       "fcCrntPMSupplyVoltageValidity": fcCrntPMSupplyVoltageValidity,
       "fcCrntPMLBCValue": fcCrntPMLBCValue,
       "fcCrntPMLBCTimeStamp": fcCrntPMLBCTimeStamp,
       "fcCrntPMLBCValidity": fcCrntPMLBCValidity,
       "fcCrntPMCVValue": fcCrntPMCVValue,
       "fcCrntPMCVTimeStamp": fcCrntPMCVTimeStamp,
       "fcCrntPMCVValidity": fcCrntPMCVValidity,
       "fcCrntPMESValue": fcCrntPMESValue,
       "fcCrntPMESTimeStamp": fcCrntPMESTimeStamp,
       "fcCrntPMESValidity": fcCrntPMESValidity,
       "fcCrntPMSESValue": fcCrntPMSESValue,
       "fcCrntPMSESTimeStamp": fcCrntPMSESTimeStamp,
       "fcCrntPMSESValidity": fcCrntPMSESValidity,
       "fcCrntPMCVInitialize": fcCrntPMCVInitialize,
       "fcCrntPMESInitialize": fcCrntPMESInitialize,
       "fcCrntPMSESInitialize": fcCrntPMSESInitialize,
       "fcCrntPMUASValue": fcCrntPMUASValue,
       "fcCrntPMUASTimeStamp": fcCrntPMUASTimeStamp,
       "fcCrntPMUASValidity": fcCrntPMUASValidity,
       "fcCrntPMUASInitialize": fcCrntPMUASInitialize,
       "fcCrntPMOPRMinValue": fcCrntPMOPRMinValue,
       "fcCrntPMOPRMinTimeStamp": fcCrntPMOPRMinTimeStamp,
       "fcCrntPMOPRMinValidity": fcCrntPMOPRMinValidity,
       "fcCrntPMOPRMinInitialize": fcCrntPMOPRMinInitialize,
       "fcCrntPMOPRMaxValue": fcCrntPMOPRMaxValue,
       "fcCrntPMOPRMaxTimeStamp": fcCrntPMOPRMaxTimeStamp,
       "fcCrntPMOPRMaxValidity": fcCrntPMOPRMaxValidity,
       "fcCrntPMOPRMaxInitialize": fcCrntPMOPRMaxInitialize,
       "fcCrntPMOPRAvgValue": fcCrntPMOPRAvgValue,
       "fcCrntPMOPRAvgTimeStamp": fcCrntPMOPRAvgTimeStamp,
       "fcCrntPMOPRAvgValidity": fcCrntPMOPRAvgValidity,
       "fcCrntPMOPRAvgInitialize": fcCrntPMOPRAvgInitialize,
       "fcCrntPMOPTMinValue": fcCrntPMOPTMinValue,
       "fcCrntPMOPTMinTimeStamp": fcCrntPMOPTMinTimeStamp,
       "fcCrntPMOPTMinValidity": fcCrntPMOPTMinValidity,
       "fcCrntPMOPTMinInitialize": fcCrntPMOPTMinInitialize,
       "fcCrntPMOPTMaxValue": fcCrntPMOPTMaxValue,
       "fcCrntPMOPTMaxTimeStamp": fcCrntPMOPTMaxTimeStamp,
       "fcCrntPMOPTMaxValidity": fcCrntPMOPTMaxValidity,
       "fcCrntPMOPTMaxInitialize": fcCrntPMOPTMaxInitialize,
       "fcCrntPMOPTAvgValue": fcCrntPMOPTAvgValue,
       "fcCrntPMOPTAvgTimeStamp": fcCrntPMOPTAvgTimeStamp,
       "fcCrntPMOPTAvgValidity": fcCrntPMOPTAvgValidity,
       "fcCrntPMOPTAvgInitialize": fcCrntPMOPTAvgInitialize,
       "fcHistPMTable": fcHistPMTable,
       "fcHistPMEntry": fcHistPMEntry,
       "fcHistPMShelfIdx": fcHistPMShelfIdx,
       "fcHistPMSlotIdx": fcHistPMSlotIdx,
       "fcHistPMPortIdx": fcHistPMPortIdx,
       "fcHistPMIntervalTypeIdx": fcHistPMIntervalTypeIdx,
       "fcHistPMIntervalIdx": fcHistPMIntervalIdx,
       "fcHistPMOPRValue": fcHistPMOPRValue,
       "fcHistPMOPRTimeStamp": fcHistPMOPRTimeStamp,
       "fcHistPMOPRValidity": fcHistPMOPRValidity,
       "fcHistPMOPTValue": fcHistPMOPTValue,
       "fcHistPMOPTTimeStamp": fcHistPMOPTTimeStamp,
       "fcHistPMOPTValidity": fcHistPMOPTValidity,
       "fcHistPMTempValue": fcHistPMTempValue,
       "fcHistPMTempTimeStamp": fcHistPMTempTimeStamp,
       "fcHistPMTempValidity": fcHistPMTempValidity,
       "fcHistPMSupplyVoltageValue": fcHistPMSupplyVoltageValue,
       "fcHistPMSupplyVoltageTimeStamp": fcHistPMSupplyVoltageTimeStamp,
       "fcHistPMSupplyVoltageValidity": fcHistPMSupplyVoltageValidity,
       "fcHistPMLBCValue": fcHistPMLBCValue,
       "fcHistPMLBCTimeStamp": fcHistPMLBCTimeStamp,
       "fcHistPMLBCValidity": fcHistPMLBCValidity,
       "fcHistPMCVValue": fcHistPMCVValue,
       "fcHistPMCVTimeStamp": fcHistPMCVTimeStamp,
       "fcHistPMCVValidity": fcHistPMCVValidity,
       "fcHistPMESValue": fcHistPMESValue,
       "fcHistPMESTimeStamp": fcHistPMESTimeStamp,
       "fcHistPMESValidity": fcHistPMESValidity,
       "fcHistPMSESValue": fcHistPMSESValue,
       "fcHistPMSESTimeStamp": fcHistPMSESTimeStamp,
       "fcHistPMSESValidity": fcHistPMSESValidity,
       "fcHistPMCVInitialize": fcHistPMCVInitialize,
       "fcHistPMESInitialize": fcHistPMESInitialize,
       "fcHistPMSESInitialize": fcHistPMSESInitialize,
       "fcHistPMUASValue": fcHistPMUASValue,
       "fcHistPMUASTimeStamp": fcHistPMUASTimeStamp,
       "fcHistPMUASValidity": fcHistPMUASValidity,
       "fcHistPMUASInitialize": fcHistPMUASInitialize,
       "fcHistPMOPRMinValue": fcHistPMOPRMinValue,
       "fcHistPMOPRMinTimeStamp": fcHistPMOPRMinTimeStamp,
       "fcHistPMOPRMinValidity": fcHistPMOPRMinValidity,
       "fcHistPMOPRMinInitialize": fcHistPMOPRMinInitialize,
       "fcHistPMOPRMaxValue": fcHistPMOPRMaxValue,
       "fcHistPMOPRMaxTimeStamp": fcHistPMOPRMaxTimeStamp,
       "fcHistPMOPRMaxValidity": fcHistPMOPRMaxValidity,
       "fcHistPMOPRMaxInitialize": fcHistPMOPRMaxInitialize,
       "fcHistPMOPRAvgValue": fcHistPMOPRAvgValue,
       "fcHistPMOPRAvgTimeStamp": fcHistPMOPRAvgTimeStamp,
       "fcHistPMOPRAvgValidity": fcHistPMOPRAvgValidity,
       "fcHistPMOPRAvgInitialize": fcHistPMOPRAvgInitialize,
       "fcHistPMOPTMinValue": fcHistPMOPTMinValue,
       "fcHistPMOPTMinTimeStamp": fcHistPMOPTMinTimeStamp,
       "fcHistPMOPTMinValidity": fcHistPMOPTMinValidity,
       "fcHistPMOPTMinInitialize": fcHistPMOPTMinInitialize,
       "fcHistPMOPTMaxValue": fcHistPMOPTMaxValue,
       "fcHistPMOPTMaxTimeStamp": fcHistPMOPTMaxTimeStamp,
       "fcHistPMOPTMaxValidity": fcHistPMOPTMaxValidity,
       "fcHistPMOPTMaxInitialize": fcHistPMOPTMaxInitialize,
       "fcHistPMOPTAvgValue": fcHistPMOPTAvgValue,
       "fcHistPMOPTAvgTimeStamp": fcHistPMOPTAvgTimeStamp,
       "fcHistPMOPTAvgValidity": fcHistPMOPTAvgValidity,
       "fcHistPMOPTAvgInitialize": fcHistPMOPTAvgInitialize,
       "fcPMThresholdTable": fcPMThresholdTable,
       "fcPMThresholdEntry": fcPMThresholdEntry,
       "fcPMThresholdShelfIdx": fcPMThresholdShelfIdx,
       "fcPMThresholdSlotIdx": fcPMThresholdSlotIdx,
       "fcPMThresholdPortIdx": fcPMThresholdPortIdx,
       "fcPMThresholdIntervalTypeIdx": fcPMThresholdIntervalTypeIdx,
       "fcPMThresholdCVValue": fcPMThresholdCVValue,
       "fcPMThresholdESValue": fcPMThresholdESValue,
       "fcPMThresholdSESValue": fcPMThresholdSESValue,
       "fcPMThresholdUASValue": fcPMThresholdUASValue,
       "ethL1IFCrntPMTable": ethL1IFCrntPMTable,
       "ethL1IFCrntPMEntry": ethL1IFCrntPMEntry,
       "ethL1IFCrntPMShelfIdx": ethL1IFCrntPMShelfIdx,
       "ethL1IFCrntPMSlotIdx": ethL1IFCrntPMSlotIdx,
       "ethL1IFCrntPMPortTypeIdx": ethL1IFCrntPMPortTypeIdx,
       "ethL1IFCrntPMPortIdx": ethL1IFCrntPMPortIdx,
       "ethL1IFCrntPMIntervalTypeIdx": ethL1IFCrntPMIntervalTypeIdx,
       "ethL1IFCrntPMOPRValue": ethL1IFCrntPMOPRValue,
       "ethL1IFCrntPMOPRTimeStamp": ethL1IFCrntPMOPRTimeStamp,
       "ethL1IFCrntPMOPRValidity": ethL1IFCrntPMOPRValidity,
       "ethL1IFCrntPMOPTValue": ethL1IFCrntPMOPTValue,
       "ethL1IFCrntPMOPTTimeStamp": ethL1IFCrntPMOPTTimeStamp,
       "ethL1IFCrntPMOPTValidity": ethL1IFCrntPMOPTValidity,
       "ethL1IFCrntPMTempValue": ethL1IFCrntPMTempValue,
       "ethL1IFCrntPMTempTimeStamp": ethL1IFCrntPMTempTimeStamp,
       "ethL1IFCrntPMTempValidity": ethL1IFCrntPMTempValidity,
       "ethL1IFCrntPMSupplyVoltageValue": ethL1IFCrntPMSupplyVoltageValue,
       "ethL1IFCrntPMSupplyVoltageTimeStamp": ethL1IFCrntPMSupplyVoltageTimeStamp,
       "ethL1IFCrntPMSupplyVoltageValidity": ethL1IFCrntPMSupplyVoltageValidity,
       "ethL1IFCrntPMSupplyVoltage2Value": ethL1IFCrntPMSupplyVoltage2Value,
       "ethL1IFCrntPMSupplyVoltage2TimeStamp": ethL1IFCrntPMSupplyVoltage2TimeStamp,
       "ethL1IFCrntPMSupplyVoltage2Validity": ethL1IFCrntPMSupplyVoltage2Validity,
       "ethL1IFCrntPMLBCValue": ethL1IFCrntPMLBCValue,
       "ethL1IFCrntPMLBCTimeStamp": ethL1IFCrntPMLBCTimeStamp,
       "ethL1IFCrntPMLBCValidity": ethL1IFCrntPMLBCValidity,
       "ethL1IFCrntPMCVValue": ethL1IFCrntPMCVValue,
       "ethL1IFCrntPMCVTimeStamp": ethL1IFCrntPMCVTimeStamp,
       "ethL1IFCrntPMCVValidity": ethL1IFCrntPMCVValidity,
       "ethL1IFCrntPMCVInitialize": ethL1IFCrntPMCVInitialize,
       "ethL1IFCrntPMINVBLKValue": ethL1IFCrntPMINVBLKValue,
       "ethL1IFCrntPMINVBLKTimeStamp": ethL1IFCrntPMINVBLKTimeStamp,
       "ethL1IFCrntPMINVBLKValidity": ethL1IFCrntPMINVBLKValidity,
       "ethL1IFCrntPMINVBLKInitialize": ethL1IFCrntPMINVBLKInitialize,
       "ethL1IFCrntPMESValue": ethL1IFCrntPMESValue,
       "ethL1IFCrntPMESTimeStamp": ethL1IFCrntPMESTimeStamp,
       "ethL1IFCrntPMESValidity": ethL1IFCrntPMESValidity,
       "ethL1IFCrntPMESInitialize": ethL1IFCrntPMESInitialize,
       "ethL1IFCrntPMSESValue": ethL1IFCrntPMSESValue,
       "ethL1IFCrntPMSESTimeStamp": ethL1IFCrntPMSESTimeStamp,
       "ethL1IFCrntPMSESValidity": ethL1IFCrntPMSESValidity,
       "ethL1IFCrntPMSESInitialize": ethL1IFCrntPMSESInitialize,
       "ethL1IFCrntPMOTUEBValue": ethL1IFCrntPMOTUEBValue,
       "ethL1IFCrntPMOTUEBTimeStamp": ethL1IFCrntPMOTUEBTimeStamp,
       "ethL1IFCrntPMOTUEBValidity": ethL1IFCrntPMOTUEBValidity,
       "ethL1IFCrntPMOTUEBInitialize": ethL1IFCrntPMOTUEBInitialize,
       "ethL1IFCrntPMOTUBBEValue": ethL1IFCrntPMOTUBBEValue,
       "ethL1IFCrntPMOTUBBETimeStamp": ethL1IFCrntPMOTUBBETimeStamp,
       "ethL1IFCrntPMOTUBBEValidity": ethL1IFCrntPMOTUBBEValidity,
       "ethL1IFCrntPMOTUBBEInitialize": ethL1IFCrntPMOTUBBEInitialize,
       "ethL1IFCrntPMOTUESValue": ethL1IFCrntPMOTUESValue,
       "ethL1IFCrntPMOTUESTimeStamp": ethL1IFCrntPMOTUESTimeStamp,
       "ethL1IFCrntPMOTUESValidity": ethL1IFCrntPMOTUESValidity,
       "ethL1IFCrntPMOTUESInitialize": ethL1IFCrntPMOTUESInitialize,
       "ethL1IFCrntPMOTUSESValue": ethL1IFCrntPMOTUSESValue,
       "ethL1IFCrntPMOTUSESTimeStamp": ethL1IFCrntPMOTUSESTimeStamp,
       "ethL1IFCrntPMOTUSESValidity": ethL1IFCrntPMOTUSESValidity,
       "ethL1IFCrntPMOTUSESInitialize": ethL1IFCrntPMOTUSESInitialize,
       "ethL1IFCrntPMOTUOFSValue": ethL1IFCrntPMOTUOFSValue,
       "ethL1IFCrntPMOTUOFSTimeStamp": ethL1IFCrntPMOTUOFSTimeStamp,
       "ethL1IFCrntPMOTUOFSValidity": ethL1IFCrntPMOTUOFSValidity,
       "ethL1IFCrntPMOTUOFSInitialize": ethL1IFCrntPMOTUOFSInitialize,
       "ethL1IFCrntPMNBITCRValue": ethL1IFCrntPMNBITCRValue,
       "ethL1IFCrntPMNBITCRTimeStamp": ethL1IFCrntPMNBITCRTimeStamp,
       "ethL1IFCrntPMNBITCRValidity": ethL1IFCrntPMNBITCRValidity,
       "ethL1IFCrntPMNBITCRInitialize": ethL1IFCrntPMNBITCRInitialize,
       "ethL1IFCrntPMNBYTCRValue": ethL1IFCrntPMNBYTCRValue,
       "ethL1IFCrntPMNBYTCRTimeStamp": ethL1IFCrntPMNBYTCRTimeStamp,
       "ethL1IFCrntPMNBYTCRValidity": ethL1IFCrntPMNBYTCRValidity,
       "ethL1IFCrntPMNBYTCRInitialize": ethL1IFCrntPMNBYTCRInitialize,
       "ethL1IFCrntPMUNCRCDWValue": ethL1IFCrntPMUNCRCDWValue,
       "ethL1IFCrntPMUNCRCDWTimeStamp": ethL1IFCrntPMUNCRCDWTimeStamp,
       "ethL1IFCrntPMUNCRCDWValidity": ethL1IFCrntPMUNCRCDWValidity,
       "ethL1IFCrntPMUNCRCDWInitialize": ethL1IFCrntPMUNCRCDWInitialize,
       "ethL1IFCrntPMOTNBERValue": ethL1IFCrntPMOTNBERValue,
       "ethL1IFCrntPMOTNBERTimeStamp": ethL1IFCrntPMOTNBERTimeStamp,
       "ethL1IFCrntPMOTNBERValidity": ethL1IFCrntPMOTNBERValidity,
       "ethL1IFCrntPMOTNBERInitialize": ethL1IFCrntPMOTNBERInitialize,
       "ethL1IFCrntPMOTNAVGBERValue": ethL1IFCrntPMOTNAVGBERValue,
       "ethL1IFCrntPMOTNAVGBERTimeStamp": ethL1IFCrntPMOTNAVGBERTimeStamp,
       "ethL1IFCrntPMOTNAVGBERValidity": ethL1IFCrntPMOTNAVGBERValidity,
       "ethL1IFCrntPMOTNAVGBERInitialize": ethL1IFCrntPMOTNAVGBERInitialize,
       "ethL1IFCrntPMNBITCR64BitValue": ethL1IFCrntPMNBITCR64BitValue,
       "ethL1IFCrntPMNBITCR64BitTimeStamp": ethL1IFCrntPMNBITCR64BitTimeStamp,
       "ethL1IFCrntPMNBITCR64BitValidity": ethL1IFCrntPMNBITCR64BitValidity,
       "ethL1IFCrntPMNBITCR64BitInitialize": ethL1IFCrntPMNBITCR64BitInitialize,
       "ethL1IFCrntPMNBYTCR64BitValue": ethL1IFCrntPMNBYTCR64BitValue,
       "ethL1IFCrntPMNBYTCR64BitTimeStamp": ethL1IFCrntPMNBYTCR64BitTimeStamp,
       "ethL1IFCrntPMNBYTCR64BitValidity": ethL1IFCrntPMNBYTCR64BitValidity,
       "ethL1IFCrntPMNBYTCR64BitInitialize": ethL1IFCrntPMNBYTCR64BitInitialize,
       "ethL1IFCrntPMUASValue": ethL1IFCrntPMUASValue,
       "ethL1IFCrntPMUASTimeStamp": ethL1IFCrntPMUASTimeStamp,
       "ethL1IFCrntPMUASValidity": ethL1IFCrntPMUASValidity,
       "ethL1IFCrntPMUASInitialize": ethL1IFCrntPMUASInitialize,
       "ethL1IFCrntPMOTUUASValue": ethL1IFCrntPMOTUUASValue,
       "ethL1IFCrntPMOTUUASTimeStamp": ethL1IFCrntPMOTUUASTimeStamp,
       "ethL1IFCrntPMOTUUASValidity": ethL1IFCrntPMOTUUASValidity,
       "ethL1IFCrntPMOTUUASInitialize": ethL1IFCrntPMOTUUASInitialize,
       "ethL1IFCrntPMOPRMinValue": ethL1IFCrntPMOPRMinValue,
       "ethL1IFCrntPMOPRMinTimeStamp": ethL1IFCrntPMOPRMinTimeStamp,
       "ethL1IFCrntPMOPRMinValidity": ethL1IFCrntPMOPRMinValidity,
       "ethL1IFCrntPMOPRMinInitialize": ethL1IFCrntPMOPRMinInitialize,
       "ethL1IFCrntPMOPRMaxValue": ethL1IFCrntPMOPRMaxValue,
       "ethL1IFCrntPMOPRMaxTimeStamp": ethL1IFCrntPMOPRMaxTimeStamp,
       "ethL1IFCrntPMOPRMaxValidity": ethL1IFCrntPMOPRMaxValidity,
       "ethL1IFCrntPMOPRMaxInitialize": ethL1IFCrntPMOPRMaxInitialize,
       "ethL1IFCrntPMOPRAvgValue": ethL1IFCrntPMOPRAvgValue,
       "ethL1IFCrntPMOPRAvgTimeStamp": ethL1IFCrntPMOPRAvgTimeStamp,
       "ethL1IFCrntPMOPRAvgValidity": ethL1IFCrntPMOPRAvgValidity,
       "ethL1IFCrntPMOPRAvgInitialize": ethL1IFCrntPMOPRAvgInitialize,
       "ethL1IFCrntPMOPTMinValue": ethL1IFCrntPMOPTMinValue,
       "ethL1IFCrntPMOPTMinTimeStamp": ethL1IFCrntPMOPTMinTimeStamp,
       "ethL1IFCrntPMOPTMinValidity": ethL1IFCrntPMOPTMinValidity,
       "ethL1IFCrntPMOPTMinInitialize": ethL1IFCrntPMOPTMinInitialize,
       "ethL1IFCrntPMOPTMaxValue": ethL1IFCrntPMOPTMaxValue,
       "ethL1IFCrntPMOPTMaxTimeStamp": ethL1IFCrntPMOPTMaxTimeStamp,
       "ethL1IFCrntPMOPTMaxValidity": ethL1IFCrntPMOPTMaxValidity,
       "ethL1IFCrntPMOPTMaxInitialize": ethL1IFCrntPMOPTMaxInitialize,
       "ethL1IFCrntPMOPTAvgValue": ethL1IFCrntPMOPTAvgValue,
       "ethL1IFCrntPMOPTAvgTimeStamp": ethL1IFCrntPMOPTAvgTimeStamp,
       "ethL1IFCrntPMOPTAvgValidity": ethL1IFCrntPMOPTAvgValidity,
       "ethL1IFCrntPMOPTAvgInitialize": ethL1IFCrntPMOPTAvgInitialize,
       "ethL1IFHistPMTable": ethL1IFHistPMTable,
       "ethL1IFHistPMEntry": ethL1IFHistPMEntry,
       "ethL1IFHistPMShelfIdx": ethL1IFHistPMShelfIdx,
       "ethL1IFHistPMSlotIdx": ethL1IFHistPMSlotIdx,
       "ethL1IFHistPMPortTypeIdx": ethL1IFHistPMPortTypeIdx,
       "ethL1IFHistPMPortIdx": ethL1IFHistPMPortIdx,
       "ethL1IFHistPMIntervalTypeIdx": ethL1IFHistPMIntervalTypeIdx,
       "ethL1IFHistPMIntervalIdx": ethL1IFHistPMIntervalIdx,
       "ethL1IFHistPMOPRValue": ethL1IFHistPMOPRValue,
       "ethL1IFHistPMOPRTimeStamp": ethL1IFHistPMOPRTimeStamp,
       "ethL1IFHistPMOPRValidity": ethL1IFHistPMOPRValidity,
       "ethL1IFHistPMOPTValue": ethL1IFHistPMOPTValue,
       "ethL1IFHistPMOPTTimeStamp": ethL1IFHistPMOPTTimeStamp,
       "ethL1IFHistPMOPTValidity": ethL1IFHistPMOPTValidity,
       "ethL1IFHistPMTempValue": ethL1IFHistPMTempValue,
       "ethL1IFHistPMTempTimeStamp": ethL1IFHistPMTempTimeStamp,
       "ethL1IFHistPMTempValidity": ethL1IFHistPMTempValidity,
       "ethL1IFHistPMSupplyVoltageValue": ethL1IFHistPMSupplyVoltageValue,
       "ethL1IFHistPMSupplyVoltageTimeStamp": ethL1IFHistPMSupplyVoltageTimeStamp,
       "ethL1IFHistPMSupplyVoltageValidity": ethL1IFHistPMSupplyVoltageValidity,
       "ethL1IFHistPMSupplyVoltage2Value": ethL1IFHistPMSupplyVoltage2Value,
       "ethL1IFHistPMSupplyVoltage2TimeStamp": ethL1IFHistPMSupplyVoltage2TimeStamp,
       "ethL1IFHistPMSupplyVoltage2Validity": ethL1IFHistPMSupplyVoltage2Validity,
       "ethL1IFHistPMLBCValue": ethL1IFHistPMLBCValue,
       "ethL1IFHistPMLBCTimeStamp": ethL1IFHistPMLBCTimeStamp,
       "ethL1IFHistPMLBCValidity": ethL1IFHistPMLBCValidity,
       "ethL1IFHistPMCVValue": ethL1IFHistPMCVValue,
       "ethL1IFHistPMCVTimeStamp": ethL1IFHistPMCVTimeStamp,
       "ethL1IFHistPMCVValidity": ethL1IFHistPMCVValidity,
       "ethL1IFHistPMCVInitialize": ethL1IFHistPMCVInitialize,
       "ethL1IFHistPMINVBLKValue": ethL1IFHistPMINVBLKValue,
       "ethL1IFHistPMINVBLKTimeStamp": ethL1IFHistPMINVBLKTimeStamp,
       "ethL1IFHistPMINVBLKValidity": ethL1IFHistPMINVBLKValidity,
       "ethL1IFHistPMINVBLKInitialize": ethL1IFHistPMINVBLKInitialize,
       "ethL1IFHistPMESValue": ethL1IFHistPMESValue,
       "ethL1IFHistPMESTimeStamp": ethL1IFHistPMESTimeStamp,
       "ethL1IFHistPMESValidity": ethL1IFHistPMESValidity,
       "ethL1IFHistPMESInitialize": ethL1IFHistPMESInitialize,
       "ethL1IFHistPMSESValue": ethL1IFHistPMSESValue,
       "ethL1IFHistPMSESTimeStamp": ethL1IFHistPMSESTimeStamp,
       "ethL1IFHistPMSESValidity": ethL1IFHistPMSESValidity,
       "ethL1IFHistPMSESInitialize": ethL1IFHistPMSESInitialize,
       "ethL1IFHistPMOTUEBValue": ethL1IFHistPMOTUEBValue,
       "ethL1IFHistPMOTUEBTimeStamp": ethL1IFHistPMOTUEBTimeStamp,
       "ethL1IFHistPMOTUEBValidity": ethL1IFHistPMOTUEBValidity,
       "ethL1IFHistPMOTUEBInitialize": ethL1IFHistPMOTUEBInitialize,
       "ethL1IFHistPMOTUBBEValue": ethL1IFHistPMOTUBBEValue,
       "ethL1IFHistPMOTUBBETimeStamp": ethL1IFHistPMOTUBBETimeStamp,
       "ethL1IFHistPMOTUBBEValidity": ethL1IFHistPMOTUBBEValidity,
       "ethL1IFHistPMOTUBBEInitialize": ethL1IFHistPMOTUBBEInitialize,
       "ethL1IFHistPMOTUESValue": ethL1IFHistPMOTUESValue,
       "ethL1IFHistPMOTUESTimeStamp": ethL1IFHistPMOTUESTimeStamp,
       "ethL1IFHistPMOTUESValidity": ethL1IFHistPMOTUESValidity,
       "ethL1IFHistPMOTUESInitialize": ethL1IFHistPMOTUESInitialize,
       "ethL1IFHistPMOTUSESValue": ethL1IFHistPMOTUSESValue,
       "ethL1IFHistPMOTUSESTimeStamp": ethL1IFHistPMOTUSESTimeStamp,
       "ethL1IFHistPMOTUSESValidity": ethL1IFHistPMOTUSESValidity,
       "ethL1IFHistPMOTUSESInitialize": ethL1IFHistPMOTUSESInitialize,
       "ethL1IFHistPMOTUOFSValue": ethL1IFHistPMOTUOFSValue,
       "ethL1IFHistPMOTUOFSTimeStamp": ethL1IFHistPMOTUOFSTimeStamp,
       "ethL1IFHistPMOTUOFSValidity": ethL1IFHistPMOTUOFSValidity,
       "ethL1IFHistPMOTUOFSInitialize": ethL1IFHistPMOTUOFSInitialize,
       "ethL1IFHistPMNBITCRValue": ethL1IFHistPMNBITCRValue,
       "ethL1IFHistPMNBITCRTimeStamp": ethL1IFHistPMNBITCRTimeStamp,
       "ethL1IFHistPMNBITCRValidity": ethL1IFHistPMNBITCRValidity,
       "ethL1IFHistPMNBITCRInitialize": ethL1IFHistPMNBITCRInitialize,
       "ethL1IFHistPMNBYTCRValue": ethL1IFHistPMNBYTCRValue,
       "ethL1IFHistPMNBYTCRTimeStamp": ethL1IFHistPMNBYTCRTimeStamp,
       "ethL1IFHistPMNBYTCRValidity": ethL1IFHistPMNBYTCRValidity,
       "ethL1IFHistPMNBYTCRInitialize": ethL1IFHistPMNBYTCRInitialize,
       "ethL1IFHistPMUNCRCDWValue": ethL1IFHistPMUNCRCDWValue,
       "ethL1IFHistPMUNCRCDWTimeStamp": ethL1IFHistPMUNCRCDWTimeStamp,
       "ethL1IFHistPMUNCRCDWValidity": ethL1IFHistPMUNCRCDWValidity,
       "ethL1IFHistPMUNCRCDWInitialize": ethL1IFHistPMUNCRCDWInitialize,
       "ethL1IFHistPMOTNBERValue": ethL1IFHistPMOTNBERValue,
       "ethL1IFHistPMOTNBERTimeStamp": ethL1IFHistPMOTNBERTimeStamp,
       "ethL1IFHistPMOTNBERValidity": ethL1IFHistPMOTNBERValidity,
       "ethL1IFHistPMOTNBERInitialize": ethL1IFHistPMOTNBERInitialize,
       "ethL1IFHistPMOTNAVGBERValue": ethL1IFHistPMOTNAVGBERValue,
       "ethL1IFHistPMOTNAVGBERTimeStamp": ethL1IFHistPMOTNAVGBERTimeStamp,
       "ethL1IFHistPMOTNAVGBERValidity": ethL1IFHistPMOTNAVGBERValidity,
       "ethL1IFHistPMOTNAVGBERInitialize": ethL1IFHistPMOTNAVGBERInitialize,
       "ethL1IFHistPMNBITCR64BitValue": ethL1IFHistPMNBITCR64BitValue,
       "ethL1IFHistPMNBITCR64BitTimeStamp": ethL1IFHistPMNBITCR64BitTimeStamp,
       "ethL1IFHistPMNBITCR64BitValidity": ethL1IFHistPMNBITCR64BitValidity,
       "ethL1IFHistPMNBITCR64BitInitialize": ethL1IFHistPMNBITCR64BitInitialize,
       "ethL1IFHistPMNBYTCR64BitValue": ethL1IFHistPMNBYTCR64BitValue,
       "ethL1IFHistPMNBYTCR64BitTimeStamp": ethL1IFHistPMNBYTCR64BitTimeStamp,
       "ethL1IFHistPMNBYTCR64BitValidity": ethL1IFHistPMNBYTCR64BitValidity,
       "ethL1IFHistPMNBYTCR64BitInitialize": ethL1IFHistPMNBYTCR64BitInitialize,
       "ethL1IFHistPMUASValue": ethL1IFHistPMUASValue,
       "ethL1IFHistPMUASTimeStamp": ethL1IFHistPMUASTimeStamp,
       "ethL1IFHistPMUASValidity": ethL1IFHistPMUASValidity,
       "ethL1IFHistPMUASInitialize": ethL1IFHistPMUASInitialize,
       "ethL1IFHistPMOTUUASValue": ethL1IFHistPMOTUUASValue,
       "ethL1IFHistPMOTUUASTimeStamp": ethL1IFHistPMOTUUASTimeStamp,
       "ethL1IFHistPMOTUUASValidity": ethL1IFHistPMOTUUASValidity,
       "ethL1IFHistPMOTUUASInitialize": ethL1IFHistPMOTUUASInitialize,
       "ethL1IFHistPMOPRMinValue": ethL1IFHistPMOPRMinValue,
       "ethL1IFHistPMOPRMinTimeStamp": ethL1IFHistPMOPRMinTimeStamp,
       "ethL1IFHistPMOPRMinValidity": ethL1IFHistPMOPRMinValidity,
       "ethL1IFHistPMOPRMinInitialize": ethL1IFHistPMOPRMinInitialize,
       "ethL1IFHistPMOPRMaxValue": ethL1IFHistPMOPRMaxValue,
       "ethL1IFHistPMOPRMaxTimeStamp": ethL1IFHistPMOPRMaxTimeStamp,
       "ethL1IFHistPMOPRMaxValidity": ethL1IFHistPMOPRMaxValidity,
       "ethL1IFHistPMOPRMaxInitialize": ethL1IFHistPMOPRMaxInitialize,
       "ethL1IFHistPMOPRAvgValue": ethL1IFHistPMOPRAvgValue,
       "ethL1IFHistPMOPRAvgTimeStamp": ethL1IFHistPMOPRAvgTimeStamp,
       "ethL1IFHistPMOPRAvgValidity": ethL1IFHistPMOPRAvgValidity,
       "ethL1IFHistPMOPRAvgInitialize": ethL1IFHistPMOPRAvgInitialize,
       "ethL1IFHistPMOPTMinValue": ethL1IFHistPMOPTMinValue,
       "ethL1IFHistPMOPTMinTimeStamp": ethL1IFHistPMOPTMinTimeStamp,
       "ethL1IFHistPMOPTMinValidity": ethL1IFHistPMOPTMinValidity,
       "ethL1IFHistPMOPTMinInitialize": ethL1IFHistPMOPTMinInitialize,
       "ethL1IFHistPMOPTMaxValue": ethL1IFHistPMOPTMaxValue,
       "ethL1IFHistPMOPTMaxTimeStamp": ethL1IFHistPMOPTMaxTimeStamp,
       "ethL1IFHistPMOPTMaxValidity": ethL1IFHistPMOPTMaxValidity,
       "ethL1IFHistPMOPTMaxInitialize": ethL1IFHistPMOPTMaxInitialize,
       "ethL1IFHistPMOPTAvgValue": ethL1IFHistPMOPTAvgValue,
       "ethL1IFHistPMOPTAvgTimeStamp": ethL1IFHistPMOPTAvgTimeStamp,
       "ethL1IFHistPMOPTAvgValidity": ethL1IFHistPMOPTAvgValidity,
       "ethL1IFHistPMOPTAvgInitialize": ethL1IFHistPMOPTAvgInitialize,
       "ethL1IFPMThresholdTable": ethL1IFPMThresholdTable,
       "ethL1IFPMThresholdEntry": ethL1IFPMThresholdEntry,
       "ethL1IFPMThresholdShelfIdx": ethL1IFPMThresholdShelfIdx,
       "ethL1IFPMThresholdSlotIdx": ethL1IFPMThresholdSlotIdx,
       "ethL1IFPMThresholdPortTypeIdx": ethL1IFPMThresholdPortTypeIdx,
       "ethL1IFPMThresholdPortIdx": ethL1IFPMThresholdPortIdx,
       "ethL1IFPMThresholdIntervalTypeIdx": ethL1IFPMThresholdIntervalTypeIdx,
       "ethL1IFPMThresholdCVValue": ethL1IFPMThresholdCVValue,
       "ethL1IFPMThresholdINVBLKValue": ethL1IFPMThresholdINVBLKValue,
       "ethL1IFPMThresholdESValue": ethL1IFPMThresholdESValue,
       "ethL1IFPMThresholdSESValue": ethL1IFPMThresholdSESValue,
       "ethL1IFPMThresholdOTUEBValue": ethL1IFPMThresholdOTUEBValue,
       "ethL1IFPMThresholdOTUBBEValue": ethL1IFPMThresholdOTUBBEValue,
       "ethL1IFPMThresholdOTUESValue": ethL1IFPMThresholdOTUESValue,
       "ethL1IFPMThresholdOTUSESValue": ethL1IFPMThresholdOTUSESValue,
       "ethL1IFPMThresholdOTUOFSValue": ethL1IFPMThresholdOTUOFSValue,
       "ethL1IFPMThresholdUNCRCDWValue": ethL1IFPMThresholdUNCRCDWValue,
       "ethL1IFPMThresholdUASValue": ethL1IFPMThresholdUASValue,
       "ethL1IFPMThresholdOTUUASValue": ethL1IFPMThresholdOTUUASValue,
       "pvxL2IFCrntPMTable": pvxL2IFCrntPMTable,
       "pvxL2IFCrntPMEntry": pvxL2IFCrntPMEntry,
       "pvxL2IFCrntPMSwitchIdx": pvxL2IFCrntPMSwitchIdx,
       "pvxL2IFCrntPMShelfIdx": pvxL2IFCrntPMShelfIdx,
       "pvxL2IFCrntPMSlotIdx": pvxL2IFCrntPMSlotIdx,
       "pvxL2IFCrntPMPortTypeIdx": pvxL2IFCrntPMPortTypeIdx,
       "pvxL2IFCrntPMPortIdx": pvxL2IFCrntPMPortIdx,
       "pvxL2IFCrntPMIntervalTypeIdx": pvxL2IFCrntPMIntervalTypeIdx,
       "pvxL2IFCrntPMTFRCRXValue": pvxL2IFCrntPMTFRCRXValue,
       "pvxL2IFCrntPMTFRCRXTimeStamp": pvxL2IFCrntPMTFRCRXTimeStamp,
       "pvxL2IFCrntPMTFRCRXValidity": pvxL2IFCrntPMTFRCRXValidity,
       "pvxL2IFCrntPMTFRCRXInitialize": pvxL2IFCrntPMTFRCRXInitialize,
       "pvxL2IFCrntPMTFRCTXValue": pvxL2IFCrntPMTFRCTXValue,
       "pvxL2IFCrntPMTFRCTXTimeStamp": pvxL2IFCrntPMTFRCTXTimeStamp,
       "pvxL2IFCrntPMTFRCTXValidity": pvxL2IFCrntPMTFRCTXValidity,
       "pvxL2IFCrntPMTFRCTXInitialize": pvxL2IFCrntPMTFRCTXInitialize,
       "pvxL2IFCrntPMFRDRValue": pvxL2IFCrntPMFRDRValue,
       "pvxL2IFCrntPMFRDRTimeStamp": pvxL2IFCrntPMFRDRTimeStamp,
       "pvxL2IFCrntPMFRDRValidity": pvxL2IFCrntPMFRDRValidity,
       "pvxL2IFCrntPMFRDRInitialize": pvxL2IFCrntPMFRDRInitialize,
       "pvxL2IFCrntPMFCSEValue": pvxL2IFCrntPMFCSEValue,
       "pvxL2IFCrntPMFCSETimeStamp": pvxL2IFCrntPMFCSETimeStamp,
       "pvxL2IFCrntPMFCSEValidity": pvxL2IFCrntPMFCSEValidity,
       "pvxL2IFCrntPMFCSEInitialize": pvxL2IFCrntPMFCSEInitialize,
       "pvxL2IFCrntPMTBYCRXValue": pvxL2IFCrntPMTBYCRXValue,
       "pvxL2IFCrntPMTBYCRXTimeStamp": pvxL2IFCrntPMTBYCRXTimeStamp,
       "pvxL2IFCrntPMTBYCRXValidity": pvxL2IFCrntPMTBYCRXValidity,
       "pvxL2IFCrntPMTBYCRXInitialize": pvxL2IFCrntPMTBYCRXInitialize,
       "pvxL2IFCrntPMTBYCTXValue": pvxL2IFCrntPMTBYCTXValue,
       "pvxL2IFCrntPMTBYCTXTimeStamp": pvxL2IFCrntPMTBYCTXTimeStamp,
       "pvxL2IFCrntPMTBYCTXValidity": pvxL2IFCrntPMTBYCTXValidity,
       "pvxL2IFCrntPMTBYCTXInitialize": pvxL2IFCrntPMTBYCTXInitialize,
       "pvxL2IFCrntPMBCSTValue": pvxL2IFCrntPMBCSTValue,
       "pvxL2IFCrntPMBCSTTimeStamp": pvxL2IFCrntPMBCSTTimeStamp,
       "pvxL2IFCrntPMBCSTValidity": pvxL2IFCrntPMBCSTValidity,
       "pvxL2IFCrntPMBCSTInitialize": pvxL2IFCrntPMBCSTInitialize,
       "pvxL2IFCrntPMMCSTValue": pvxL2IFCrntPMMCSTValue,
       "pvxL2IFCrntPMMCSTTimeStamp": pvxL2IFCrntPMMCSTTimeStamp,
       "pvxL2IFCrntPMMCSTValidity": pvxL2IFCrntPMMCSTValidity,
       "pvxL2IFCrntPMMCSTInitialize": pvxL2IFCrntPMMCSTInitialize,
       "pvxL2IFCrntPMSIZE64Value": pvxL2IFCrntPMSIZE64Value,
       "pvxL2IFCrntPMSIZE64TimeStamp": pvxL2IFCrntPMSIZE64TimeStamp,
       "pvxL2IFCrntPMSIZE64Validity": pvxL2IFCrntPMSIZE64Validity,
       "pvxL2IFCrntPMSIZE64Initialize": pvxL2IFCrntPMSIZE64Initialize,
       "pvxL2IFCrntPMSIZE65To127Value": pvxL2IFCrntPMSIZE65To127Value,
       "pvxL2IFCrntPMSIZE65To127TimeStamp": pvxL2IFCrntPMSIZE65To127TimeStamp,
       "pvxL2IFCrntPMSIZE65To127Validity": pvxL2IFCrntPMSIZE65To127Validity,
       "pvxL2IFCrntPMSIZE65To127Initialize": pvxL2IFCrntPMSIZE65To127Initialize,
       "pvxL2IFCrntPMSIZE128To255Value": pvxL2IFCrntPMSIZE128To255Value,
       "pvxL2IFCrntPMSIZE128To255TimeStamp": pvxL2IFCrntPMSIZE128To255TimeStamp,
       "pvxL2IFCrntPMSIZE128To255Validity": pvxL2IFCrntPMSIZE128To255Validity,
       "pvxL2IFCrntPMSIZE128To255Initialize": pvxL2IFCrntPMSIZE128To255Initialize,
       "pvxL2IFCrntPMSIZE256To511Value": pvxL2IFCrntPMSIZE256To511Value,
       "pvxL2IFCrntPMSIZE256To511TimeStamp": pvxL2IFCrntPMSIZE256To511TimeStamp,
       "pvxL2IFCrntPMSIZE256To511Validity": pvxL2IFCrntPMSIZE256To511Validity,
       "pvxL2IFCrntPMSIZE256To511Initialize": pvxL2IFCrntPMSIZE256To511Initialize,
       "pvxL2IFCrntPMSIZE512To1023Value": pvxL2IFCrntPMSIZE512To1023Value,
       "pvxL2IFCrntPMSIZE512To1023TimeStamp": pvxL2IFCrntPMSIZE512To1023TimeStamp,
       "pvxL2IFCrntPMSIZE512To1023Validity": pvxL2IFCrntPMSIZE512To1023Validity,
       "pvxL2IFCrntPMSIZE512To1023Initialize": pvxL2IFCrntPMSIZE512To1023Initialize,
       "pvxL2IFCrntPMSIZE1024To1518Value": pvxL2IFCrntPMSIZE1024To1518Value,
       "pvxL2IFCrntPMSIZE1024To1518TimeStamp": pvxL2IFCrntPMSIZE1024To1518TimeStamp,
       "pvxL2IFCrntPMSIZE1024To1518Validity": pvxL2IFCrntPMSIZE1024To1518Validity,
       "pvxL2IFCrntPMSIZE1024To1518Initialize": pvxL2IFCrntPMSIZE1024To1518Initialize,
       "pvxL2IFCrntPMSIZEOver1518Value": pvxL2IFCrntPMSIZEOver1518Value,
       "pvxL2IFCrntPMSIZEOver1518TimeStamp": pvxL2IFCrntPMSIZEOver1518TimeStamp,
       "pvxL2IFCrntPMSIZEOver1518Validity": pvxL2IFCrntPMSIZEOver1518Validity,
       "pvxL2IFCrntPMSIZEOver1518Initialize": pvxL2IFCrntPMSIZEOver1518Initialize,
       "pvxL2IFCrntPMTPFCRXValue": pvxL2IFCrntPMTPFCRXValue,
       "pvxL2IFCrntPMTPFCRXTimeStamp": pvxL2IFCrntPMTPFCRXTimeStamp,
       "pvxL2IFCrntPMTPFCRXValidity": pvxL2IFCrntPMTPFCRXValidity,
       "pvxL2IFCrntPMTPFCRXInitialize": pvxL2IFCrntPMTPFCRXInitialize,
       "pvxL2IFCrntPMTPFCTXValue": pvxL2IFCrntPMTPFCTXValue,
       "pvxL2IFCrntPMTPFCTXTimeStamp": pvxL2IFCrntPMTPFCTXTimeStamp,
       "pvxL2IFCrntPMTPFCTXValidity": pvxL2IFCrntPMTPFCTXValidity,
       "pvxL2IFCrntPMTPFCTXInitialize": pvxL2IFCrntPMTPFCTXInitialize,
       "pvxL2IFCrntPMUSIZEValue": pvxL2IFCrntPMUSIZEValue,
       "pvxL2IFCrntPMUSIZETimeStamp": pvxL2IFCrntPMUSIZETimeStamp,
       "pvxL2IFCrntPMUSIZEValidity": pvxL2IFCrntPMUSIZEValidity,
       "pvxL2IFCrntPMUSIZEInitialize": pvxL2IFCrntPMUSIZEInitialize,
       "pvxL2IFCrntPMOSIZEValue": pvxL2IFCrntPMOSIZEValue,
       "pvxL2IFCrntPMOSIZETimeStamp": pvxL2IFCrntPMOSIZETimeStamp,
       "pvxL2IFCrntPMOSIZEValidity": pvxL2IFCrntPMOSIZEValidity,
       "pvxL2IFCrntPMOSIZEInitialize": pvxL2IFCrntPMOSIZEInitialize,
       "pvxL2IFCrntPMFRGTValue": pvxL2IFCrntPMFRGTValue,
       "pvxL2IFCrntPMFRGTTimeStamp": pvxL2IFCrntPMFRGTTimeStamp,
       "pvxL2IFCrntPMFRGTValidity": pvxL2IFCrntPMFRGTValidity,
       "pvxL2IFCrntPMFRGTInitialize": pvxL2IFCrntPMFRGTInitialize,
       "pvxL2IFHistPMTable": pvxL2IFHistPMTable,
       "pvxL2IFHistPMEntry": pvxL2IFHistPMEntry,
       "pvxL2IFHistPMSwitchIdx": pvxL2IFHistPMSwitchIdx,
       "pvxL2IFHistPMShelfIdx": pvxL2IFHistPMShelfIdx,
       "pvxL2IFHistPMSlotIdx": pvxL2IFHistPMSlotIdx,
       "pvxL2IFHistPMPortTypeIdx": pvxL2IFHistPMPortTypeIdx,
       "pvxL2IFHistPMPortIdx": pvxL2IFHistPMPortIdx,
       "pvxL2IFHistPMIntervalTypeIdx": pvxL2IFHistPMIntervalTypeIdx,
       "pvxL2IFHistPMIntervalIdx": pvxL2IFHistPMIntervalIdx,
       "pvxL2IFHistPMTFRCRXValue": pvxL2IFHistPMTFRCRXValue,
       "pvxL2IFHistPMTFRCRXTimeStamp": pvxL2IFHistPMTFRCRXTimeStamp,
       "pvxL2IFHistPMTFRCRXValidity": pvxL2IFHistPMTFRCRXValidity,
       "pvxL2IFHistPMTFRCRXInitialize": pvxL2IFHistPMTFRCRXInitialize,
       "pvxL2IFHistPMTFRCTXValue": pvxL2IFHistPMTFRCTXValue,
       "pvxL2IFHistPMTFRCTXTimeStamp": pvxL2IFHistPMTFRCTXTimeStamp,
       "pvxL2IFHistPMTFRCTXValidity": pvxL2IFHistPMTFRCTXValidity,
       "pvxL2IFHistPMTFRCTXInitialize": pvxL2IFHistPMTFRCTXInitialize,
       "pvxL2IFHistPMFRDRValue": pvxL2IFHistPMFRDRValue,
       "pvxL2IFHistPMFRDRTimeStamp": pvxL2IFHistPMFRDRTimeStamp,
       "pvxL2IFHistPMFRDRValidity": pvxL2IFHistPMFRDRValidity,
       "pvxL2IFHistPMFRDRInitialize": pvxL2IFHistPMFRDRInitialize,
       "pvxL2IFHistPMFCSEValue": pvxL2IFHistPMFCSEValue,
       "pvxL2IFHistPMFCSETimeStamp": pvxL2IFHistPMFCSETimeStamp,
       "pvxL2IFHistPMFCSEValidity": pvxL2IFHistPMFCSEValidity,
       "pvxL2IFHistPMFCSEInitialize": pvxL2IFHistPMFCSEInitialize,
       "pvxL2IFHistPMTBYCRXValue": pvxL2IFHistPMTBYCRXValue,
       "pvxL2IFHistPMTBYCRXTimeStamp": pvxL2IFHistPMTBYCRXTimeStamp,
       "pvxL2IFHistPMTBYCRXValidity": pvxL2IFHistPMTBYCRXValidity,
       "pvxL2IFHistPMTBYCRXInitialize": pvxL2IFHistPMTBYCRXInitialize,
       "pvxL2IFHistPMTBYCTXValue": pvxL2IFHistPMTBYCTXValue,
       "pvxL2IFHistPMTBYCTXTimeStamp": pvxL2IFHistPMTBYCTXTimeStamp,
       "pvxL2IFHistPMTBYCTXValidity": pvxL2IFHistPMTBYCTXValidity,
       "pvxL2IFHistPMTBYCTXInitialize": pvxL2IFHistPMTBYCTXInitialize,
       "pvxL2IFHistPMBCSTValue": pvxL2IFHistPMBCSTValue,
       "pvxL2IFHistPMBCSTTimeStamp": pvxL2IFHistPMBCSTTimeStamp,
       "pvxL2IFHistPMBCSTValidity": pvxL2IFHistPMBCSTValidity,
       "pvxL2IFHistPMBCSTInitialize": pvxL2IFHistPMBCSTInitialize,
       "pvxL2IFHistPMMCSTValue": pvxL2IFHistPMMCSTValue,
       "pvxL2IFHistPMMCSTTimeStamp": pvxL2IFHistPMMCSTTimeStamp,
       "pvxL2IFHistPMMCSTValidity": pvxL2IFHistPMMCSTValidity,
       "pvxL2IFHistPMMCSTInitialize": pvxL2IFHistPMMCSTInitialize,
       "pvxL2IFHistPMSIZE64Value": pvxL2IFHistPMSIZE64Value,
       "pvxL2IFHistPMSIZE64TimeStamp": pvxL2IFHistPMSIZE64TimeStamp,
       "pvxL2IFHistPMSIZE64Validity": pvxL2IFHistPMSIZE64Validity,
       "pvxL2IFHistPMSIZE64Initialize": pvxL2IFHistPMSIZE64Initialize,
       "pvxL2IFHistPMSIZE65To127Value": pvxL2IFHistPMSIZE65To127Value,
       "pvxL2IFHistPMSIZE65To127TimeStamp": pvxL2IFHistPMSIZE65To127TimeStamp,
       "pvxL2IFHistPMSIZE65To127Validity": pvxL2IFHistPMSIZE65To127Validity,
       "pvxL2IFHistPMSIZE65To127Initialize": pvxL2IFHistPMSIZE65To127Initialize,
       "pvxL2IFHistPMSIZE128To255Value": pvxL2IFHistPMSIZE128To255Value,
       "pvxL2IFHistPMSIZE128To255TimeStamp": pvxL2IFHistPMSIZE128To255TimeStamp,
       "pvxL2IFHistPMSIZE128To255Validity": pvxL2IFHistPMSIZE128To255Validity,
       "pvxL2IFHistPMSIZE128To255Initialize": pvxL2IFHistPMSIZE128To255Initialize,
       "pvxL2IFHistPMSIZE256To511Value": pvxL2IFHistPMSIZE256To511Value,
       "pvxL2IFHistPMSIZE256To511TimeStamp": pvxL2IFHistPMSIZE256To511TimeStamp,
       "pvxL2IFHistPMSIZE256To511Validity": pvxL2IFHistPMSIZE256To511Validity,
       "pvxL2IFHistPMSIZE256To511Initialize": pvxL2IFHistPMSIZE256To511Initialize,
       "pvxL2IFHistPMSIZE512To1023Value": pvxL2IFHistPMSIZE512To1023Value,
       "pvxL2IFHistPMSIZE512To1023TimeStamp": pvxL2IFHistPMSIZE512To1023TimeStamp,
       "pvxL2IFHistPMSIZE512To1023Validity": pvxL2IFHistPMSIZE512To1023Validity,
       "pvxL2IFHistPMSIZE512To1023Initialize": pvxL2IFHistPMSIZE512To1023Initialize,
       "pvxL2IFHistPMSIZE1024To1518Value": pvxL2IFHistPMSIZE1024To1518Value,
       "pvxL2IFHistPMSIZE1024To1518TimeStamp": pvxL2IFHistPMSIZE1024To1518TimeStamp,
       "pvxL2IFHistPMSIZE1024To1518Validity": pvxL2IFHistPMSIZE1024To1518Validity,
       "pvxL2IFHistPMSIZE1024To1518Initialize": pvxL2IFHistPMSIZE1024To1518Initialize,
       "pvxL2IFHistPMSIZEOver1518Value": pvxL2IFHistPMSIZEOver1518Value,
       "pvxL2IFHistPMSIZEOver1518TimeStamp": pvxL2IFHistPMSIZEOver1518TimeStamp,
       "pvxL2IFHistPMSIZEOver1518Validity": pvxL2IFHistPMSIZEOver1518Validity,
       "pvxL2IFHistPMSIZEOver1518Initialize": pvxL2IFHistPMSIZEOver1518Initialize,
       "pvxL2IFHistPMTPFCRXValue": pvxL2IFHistPMTPFCRXValue,
       "pvxL2IFHistPMTPFCRXTimeStamp": pvxL2IFHistPMTPFCRXTimeStamp,
       "pvxL2IFHistPMTPFCRXValidity": pvxL2IFHistPMTPFCRXValidity,
       "pvxL2IFHistPMTPFCRXInitialize": pvxL2IFHistPMTPFCRXInitialize,
       "pvxL2IFHistPMTPFCTXValue": pvxL2IFHistPMTPFCTXValue,
       "pvxL2IFHistPMTPFCTXTimeStamp": pvxL2IFHistPMTPFCTXTimeStamp,
       "pvxL2IFHistPMTPFCTXValidity": pvxL2IFHistPMTPFCTXValidity,
       "pvxL2IFHistPMTPFCTXInitialize": pvxL2IFHistPMTPFCTXInitialize,
       "pvxL2IFHistPMUSIZEValue": pvxL2IFHistPMUSIZEValue,
       "pvxL2IFHistPMUSIZETimeStamp": pvxL2IFHistPMUSIZETimeStamp,
       "pvxL2IFHistPMUSIZEValidity": pvxL2IFHistPMUSIZEValidity,
       "pvxL2IFHistPMUSIZEInitialize": pvxL2IFHistPMUSIZEInitialize,
       "pvxL2IFHistPMOSIZEValue": pvxL2IFHistPMOSIZEValue,
       "pvxL2IFHistPMOSIZETimeStamp": pvxL2IFHistPMOSIZETimeStamp,
       "pvxL2IFHistPMOSIZEValidity": pvxL2IFHistPMOSIZEValidity,
       "pvxL2IFHistPMOSIZEInitialize": pvxL2IFHistPMOSIZEInitialize,
       "pvxL2IFHistPMFRGTValue": pvxL2IFHistPMFRGTValue,
       "pvxL2IFHistPMFRGTTimeStamp": pvxL2IFHistPMFRGTTimeStamp,
       "pvxL2IFHistPMFRGTValidity": pvxL2IFHistPMFRGTValidity,
       "pvxL2IFHistPMFRGTInitialize": pvxL2IFHistPMFRGTInitialize,
       "pvxL2IFPMThresholdTable": pvxL2IFPMThresholdTable,
       "pvxL2IFPMThresholdEntry": pvxL2IFPMThresholdEntry,
       "pvxL2IFPMThresholdSwitchIdx": pvxL2IFPMThresholdSwitchIdx,
       "pvxL2IFPMThresholdShelfIdx": pvxL2IFPMThresholdShelfIdx,
       "pvxL2IFPMThresholdSlotIdx": pvxL2IFPMThresholdSlotIdx,
       "pvxL2IFPMThresholdPortTypeIdx": pvxL2IFPMThresholdPortTypeIdx,
       "pvxL2IFPMThresholdPortIdx": pvxL2IFPMThresholdPortIdx,
       "pvxL2IFPMThresholdIntervalTypeIdx": pvxL2IFPMThresholdIntervalTypeIdx,
       "pvxL2IFPMThresholdFRDRValue": pvxL2IFPMThresholdFRDRValue,
       "pvxL2IFPMThresholdFCSEValue": pvxL2IFPMThresholdFCSEValue,
       "pvxL2IFPMThresholdUSIZEValue": pvxL2IFPMThresholdUSIZEValue,
       "pvxL2IFPMThresholdOSIZEValue": pvxL2IFPMThresholdOSIZEValue,
       "pvxL2IFPMThresholdFRGTValue": pvxL2IFPMThresholdFRGTValue,
       "briCrntPMTable": briCrntPMTable,
       "briCrntPMEntry": briCrntPMEntry,
       "briCrntPMShelfIdx": briCrntPMShelfIdx,
       "briCrntPMSlotIdx": briCrntPMSlotIdx,
       "briCrntPMPortIdx": briCrntPMPortIdx,
       "briCrntPMIntervalTypeIdx": briCrntPMIntervalTypeIdx,
       "briCrntPMOPRValue": briCrntPMOPRValue,
       "briCrntPMOPRTimeStamp": briCrntPMOPRTimeStamp,
       "briCrntPMOPRValidity": briCrntPMOPRValidity,
       "briCrntPMOPTValue": briCrntPMOPTValue,
       "briCrntPMOPTTimeStamp": briCrntPMOPTTimeStamp,
       "briCrntPMOPTValidity": briCrntPMOPTValidity,
       "briCrntPMTempValue": briCrntPMTempValue,
       "briCrntPMTempTimeStamp": briCrntPMTempTimeStamp,
       "briCrntPMTempValidity": briCrntPMTempValidity,
       "briCrntPMSupplyVoltageValue": briCrntPMSupplyVoltageValue,
       "briCrntPMSupplyVoltageTimeStamp": briCrntPMSupplyVoltageTimeStamp,
       "briCrntPMSupplyVoltageValidity": briCrntPMSupplyVoltageValidity,
       "briCrntPMLBCValue": briCrntPMLBCValue,
       "briCrntPMLBCTimeStamp": briCrntPMLBCTimeStamp,
       "briCrntPMLBCValidity": briCrntPMLBCValidity,
       "briCrntPMOPRMinValue": briCrntPMOPRMinValue,
       "briCrntPMOPRMinTimeStamp": briCrntPMOPRMinTimeStamp,
       "briCrntPMOPRMinValidity": briCrntPMOPRMinValidity,
       "briCrntPMOPRMinInitialize": briCrntPMOPRMinInitialize,
       "briCrntPMOPRMaxValue": briCrntPMOPRMaxValue,
       "briCrntPMOPRMaxTimeStamp": briCrntPMOPRMaxTimeStamp,
       "briCrntPMOPRMaxValidity": briCrntPMOPRMaxValidity,
       "briCrntPMOPRMaxInitialize": briCrntPMOPRMaxInitialize,
       "briCrntPMOPRAvgValue": briCrntPMOPRAvgValue,
       "briCrntPMOPRAvgTimeStamp": briCrntPMOPRAvgTimeStamp,
       "briCrntPMOPRAvgValidity": briCrntPMOPRAvgValidity,
       "briCrntPMOPRAvgInitialize": briCrntPMOPRAvgInitialize,
       "briCrntPMOPTMinValue": briCrntPMOPTMinValue,
       "briCrntPMOPTMinTimeStamp": briCrntPMOPTMinTimeStamp,
       "briCrntPMOPTMinValidity": briCrntPMOPTMinValidity,
       "briCrntPMOPTMinInitialize": briCrntPMOPTMinInitialize,
       "briCrntPMOPTMaxValue": briCrntPMOPTMaxValue,
       "briCrntPMOPTMaxTimeStamp": briCrntPMOPTMaxTimeStamp,
       "briCrntPMOPTMaxValidity": briCrntPMOPTMaxValidity,
       "briCrntPMOPTMaxInitialize": briCrntPMOPTMaxInitialize,
       "briCrntPMOPTAvgValue": briCrntPMOPTAvgValue,
       "briCrntPMOPTAvgTimeStamp": briCrntPMOPTAvgTimeStamp,
       "briCrntPMOPTAvgValidity": briCrntPMOPTAvgValidity,
       "briCrntPMOPTAvgInitialize": briCrntPMOPTAvgInitialize,
       "briHistPMTable": briHistPMTable,
       "briHistPMEntry": briHistPMEntry,
       "briHistPMShelfIdx": briHistPMShelfIdx,
       "briHistPMSlotIdx": briHistPMSlotIdx,
       "briHistPMPortIdx": briHistPMPortIdx,
       "briHistPMIntervalTypeIdx": briHistPMIntervalTypeIdx,
       "briHistPMIntervalIdx": briHistPMIntervalIdx,
       "briHistPMOPRValue": briHistPMOPRValue,
       "briHistPMOPRTimeStamp": briHistPMOPRTimeStamp,
       "briHistPMOPRValidity": briHistPMOPRValidity,
       "briHistPMOPTValue": briHistPMOPTValue,
       "briHistPMOPTTimeStamp": briHistPMOPTTimeStamp,
       "briHistPMOPTValidity": briHistPMOPTValidity,
       "briHistPMTempValue": briHistPMTempValue,
       "briHistPMTempTimeStamp": briHistPMTempTimeStamp,
       "briHistPMTempValidity": briHistPMTempValidity,
       "briHistPMSupplyVoltageValue": briHistPMSupplyVoltageValue,
       "briHistPMSupplyVoltageTimeStamp": briHistPMSupplyVoltageTimeStamp,
       "briHistPMSupplyVoltageValidity": briHistPMSupplyVoltageValidity,
       "briHistPMLBCValue": briHistPMLBCValue,
       "briHistPMLBCTimeStamp": briHistPMLBCTimeStamp,
       "briHistPMLBCValidity": briHistPMLBCValidity,
       "briHistPMOPRMinValue": briHistPMOPRMinValue,
       "briHistPMOPRMinTimeStamp": briHistPMOPRMinTimeStamp,
       "briHistPMOPRMinValidity": briHistPMOPRMinValidity,
       "briHistPMOPRMinInitialize": briHistPMOPRMinInitialize,
       "briHistPMOPRMaxValue": briHistPMOPRMaxValue,
       "briHistPMOPRMaxTimeStamp": briHistPMOPRMaxTimeStamp,
       "briHistPMOPRMaxValidity": briHistPMOPRMaxValidity,
       "briHistPMOPRMaxInitialize": briHistPMOPRMaxInitialize,
       "briHistPMOPRAvgValue": briHistPMOPRAvgValue,
       "briHistPMOPRAvgTimeStamp": briHistPMOPRAvgTimeStamp,
       "briHistPMOPRAvgValidity": briHistPMOPRAvgValidity,
       "briHistPMOPRAvgInitialize": briHistPMOPRAvgInitialize,
       "briHistPMOPTMinValue": briHistPMOPTMinValue,
       "briHistPMOPTMinTimeStamp": briHistPMOPTMinTimeStamp,
       "briHistPMOPTMinValidity": briHistPMOPTMinValidity,
       "briHistPMOPTMinInitialize": briHistPMOPTMinInitialize,
       "briHistPMOPTMaxValue": briHistPMOPTMaxValue,
       "briHistPMOPTMaxTimeStamp": briHistPMOPTMaxTimeStamp,
       "briHistPMOPTMaxValidity": briHistPMOPTMaxValidity,
       "briHistPMOPTMaxInitialize": briHistPMOPTMaxInitialize,
       "briHistPMOPTAvgValue": briHistPMOPTAvgValue,
       "briHistPMOPTAvgTimeStamp": briHistPMOPTAvgTimeStamp,
       "briHistPMOPTAvgValidity": briHistPMOPTAvgValidity,
       "briHistPMOPTAvgInitialize": briHistPMOPTAvgInitialize,
       "cpCrntPMTable": cpCrntPMTable,
       "cpCrntPMEntry": cpCrntPMEntry,
       "cpCrntPMCpTypeIdx": cpCrntPMCpTypeIdx,
       "cpCrntPMShelfIdx": cpCrntPMShelfIdx,
       "cpCrntPMSlotIdx": cpCrntPMSlotIdx,
       "cpCrntPMIntervalTypeIdx": cpCrntPMIntervalTypeIdx,
       "cpCrntPMTempValue": cpCrntPMTempValue,
       "cpCrntPMTempTimeStamp": cpCrntPMTempTimeStamp,
       "cpCrntPMTempValidity": cpCrntPMTempValidity,
       "cpHistPMTable": cpHistPMTable,
       "cpHistPMEntry": cpHistPMEntry,
       "cpHistPMCpTypeIdx": cpHistPMCpTypeIdx,
       "cpHistPMShelfIdx": cpHistPMShelfIdx,
       "cpHistPMSlotIdx": cpHistPMSlotIdx,
       "cpHistPMIntervalTypeIdx": cpHistPMIntervalTypeIdx,
       "cpHistPMIntervalIdx": cpHistPMIntervalIdx,
       "cpHistPMTempValue": cpHistPMTempValue,
       "cpHistPMTempTimeStamp": cpHistPMTempTimeStamp,
       "cpHistPMTempValidity": cpHistPMTempValidity,
       "conditions": conditions,
       "notifObjects": notifObjects,
       "condDateAndTime": condDateAndTime,
       "condReportType": condReportType,
       "condSeverity": condSeverity,
       "condServiceAffecting": condServiceAffecting,
       "condDescription": condDescription,
       "condObjectType": condObjectType,
       "condCodeType": condCodeType,
       "actCondTable": actCondTable,
       "actCondEntry": actCondEntry,
       "actCondNotifIdx": actCondNotifIdx,
       "actCondTableEntryIdx": actCondTableEntryIdx,
       "actCondInstanceIdx": actCondInstanceIdx,
       "actCondReportType": actCondReportType,
       "actCondDateAndTime": actCondDateAndTime,
       "actCondSeverity": actCondSeverity,
       "actCondServiceAffecting": actCondServiceAffecting,
       "actCondDescription": actCondDescription,
       "actCondObjectType": actCondObjectType,
       "actCondCodeType": actCondCodeType,
       "actCondSummary": actCondSummary,
       "actAlarmTable": actAlarmTable,
       "actAlarmEntry": actAlarmEntry,
       "actAlarmNotifIdx": actAlarmNotifIdx,
       "actAlarmTableEntryIdx": actAlarmTableEntryIdx,
       "actAlarmInstanceIdx": actAlarmInstanceIdx,
       "actAlarmReportType": actAlarmReportType,
       "actAlarmDateAndTime": actAlarmDateAndTime,
       "actAlarmSeverity": actAlarmSeverity,
       "actAlarmServiceAffecting": actAlarmServiceAffecting,
       "actAlarmDescription": actAlarmDescription,
       "actAlarmObjectType": actAlarmObjectType,
       "actAlarmCodeType": actAlarmCodeType,
       "administration": administration,
       "tl1UserTable": tl1UserTable,
       "tl1UserEntry": tl1UserEntry,
       "tl1UserIdx": tl1UserIdx,
       "tl1IpLockoutAddr": tl1IpLockoutAddr,
       "tl1LogTable": tl1LogTable,
       "tl1LogEntry": tl1LogEntry,
       "tl1LogIdx": tl1LogIdx,
       "tl1LogSysName": tl1LogSysName,
       "tl1LogType": tl1LogType,
       "tl1LogTypeSpecificLogNum": tl1LogTypeSpecificLogNum,
       "tl1LogMsgCode": tl1LogMsgCode,
       "tl1LogDateAndTime": tl1LogDateAndTime,
       "tl1LogMessage": tl1LogMessage,
       "latestTl1LogNum": latestTl1LogNum,
       "snmpTrapRcvTable": snmpTrapRcvTable,
       "snmpTrapRcvEntry": snmpTrapRcvEntry,
       "snmpTrapRcvIdx": snmpTrapRcvIdx,
       "snmpTrapRcvIPAddr": snmpTrapRcvIPAddr,
       "snmpTrapRcvPort": snmpTrapRcvPort,
       "snmpTrapRcvNotifType": snmpTrapRcvNotifType,
       "snmpTrapRcvVersion": snmpTrapRcvVersion,
       "snmpTrapRcvCommunity": snmpTrapRcvCommunity,
       "snmpTrapRcvTTL": snmpTrapRcvTTL,
       "snmpTrapRcvRowStatus": snmpTrapRcvRowStatus,
       "connections": connections,
       "xcvrXCTable": xcvrXCTable,
       "xcvrXCEntry": xcvrXCEntry,
       "xcvrXCSrcTypeIdx": xcvrXCSrcTypeIdx,
       "xcvrXCSrcShelfIdx": xcvrXCSrcShelfIdx,
       "xcvrXCSrcSlotIdx": xcvrXCSrcSlotIdx,
       "xcvrXCSrcIdx": xcvrXCSrcIdx,
       "xcvrXCDestTypeIdx": xcvrXCDestTypeIdx,
       "xcvrXCDestShelfIdx": xcvrXCDestShelfIdx,
       "xcvrXCDestSlotIdx": xcvrXCDestSlotIdx,
       "xcvrXCDestIdx": xcvrXCDestIdx,
       "xcvrXCType": xcvrXCType,
       "xcvrXCRowStatus": xcvrXCRowStatus,
       "vcgXCTable": vcgXCTable,
       "vcgXCEntry": vcgXCEntry,
       "vcgXCSrcShelfIdx": vcgXCSrcShelfIdx,
       "vcgXCSrcSlotIdx": vcgXCSrcSlotIdx,
       "vcgXCSrcPortIdx": vcgXCSrcPortIdx,
       "vcgXCSrcIdx": vcgXCSrcIdx,
       "vcgXCDestShelfIdx": vcgXCDestShelfIdx,
       "vcgXCDestSlotIdx": vcgXCDestSlotIdx,
       "vcgXCDestPortIdx": vcgXCDestPortIdx,
       "vcgXCDestIdx": vcgXCDestIdx,
       "vcgXCType": vcgXCType,
       "vcgXCProtShelfNum": vcgXCProtShelfNum,
       "vcgXCProtSlotNum": vcgXCProtSlotNum,
       "vcgXCProtPortNum": vcgXCProtPortNum,
       "vcgXCProtNum": vcgXCProtNum,
       "vcgXCRowStatus": vcgXCRowStatus,
       "stsnXCTable": stsnXCTable,
       "stsnXCEntry": stsnXCEntry,
       "stsnXCStsnTypeIdx": stsnXCStsnTypeIdx,
       "stsnXCSrcShelfIdx": stsnXCSrcShelfIdx,
       "stsnXCSrcSlotIdx": stsnXCSrcSlotIdx,
       "stsnXCSrcPortIdx": stsnXCSrcPortIdx,
       "stsnXCSrcIdx": stsnXCSrcIdx,
       "stsnXCDestShelfIdx": stsnXCDestShelfIdx,
       "stsnXCDestSlotIdx": stsnXCDestSlotIdx,
       "stsnXCDestPortIdx": stsnXCDestPortIdx,
       "stsnXCDestIdx": stsnXCDestIdx,
       "stsnXCType": stsnXCType,
       "stsnXCProtTypeNum": stsnXCProtTypeNum,
       "stsnXCProtShelfNum": stsnXCProtShelfNum,
       "stsnXCProtSlotNum": stsnXCProtSlotNum,
       "stsnXCProtPortNum": stsnXCProtPortNum,
       "stsnXCProtNum": stsnXCProtNum,
       "stsnXCRowStatus": stsnXCRowStatus,
       "vcnXCTable": vcnXCTable,
       "vcnXCEntry": vcnXCEntry,
       "vcnXCVcnTypeIdx": vcnXCVcnTypeIdx,
       "vcnXCSrcShelfIdx": vcnXCSrcShelfIdx,
       "vcnXCSrcSlotIdx": vcnXCSrcSlotIdx,
       "vcnXCSrcPortIdx": vcnXCSrcPortIdx,
       "vcnXCSrcIdx": vcnXCSrcIdx,
       "vcnXCDestShelfIdx": vcnXCDestShelfIdx,
       "vcnXCDestSlotIdx": vcnXCDestSlotIdx,
       "vcnXCDestPortIdx": vcnXCDestPortIdx,
       "vcnXCDestIdx": vcnXCDestIdx,
       "vcnXCType": vcnXCType,
       "vcnXCProtTypeNum": vcnXCProtTypeNum,
       "vcnXCProtShelfNum": vcnXCProtShelfNum,
       "vcnXCProtSlotNum": vcnXCProtSlotNum,
       "vcnXCProtPortNum": vcnXCProtPortNum,
       "vcnXCProtNum": vcnXCProtNum,
       "vcnXCRowStatus": vcnXCRowStatus,
       "odunXCTable": odunXCTable,
       "odunXCEntry": odunXCEntry,
       "odunXCOdunTypeIdx": odunXCOdunTypeIdx,
       "odunXCSrcShelfIdx": odunXCSrcShelfIdx,
       "odunXCSrcSlotIdx": odunXCSrcSlotIdx,
       "odunXCSrcPortIdx": odunXCSrcPortIdx,
       "odunXCSrcIdx": odunXCSrcIdx,
       "odunXCDestShelfIdx": odunXCDestShelfIdx,
       "odunXCDestSlotIdx": odunXCDestSlotIdx,
       "odunXCDestPortIdx": odunXCDestPortIdx,
       "odunXCDestIdx": odunXCDestIdx,
       "odunXCType": odunXCType,
       "odunXCProtTypeNum": odunXCProtTypeNum,
       "odunXCProtShelfNum": odunXCProtShelfNum,
       "odunXCProtSlotNum": odunXCProtSlotNum,
       "odunXCProtPortNum": odunXCProtPortNum,
       "odunXCProtNum": odunXCProtNum,
       "odunXCRowStatus": odunXCRowStatus,
       "protection": protection,
       "xcvrProtGrpTable": xcvrProtGrpTable,
       "xcvrProtGrpEntry": xcvrProtGrpEntry,
       "xcvrProtGrpWorkTypeIdx": xcvrProtGrpWorkTypeIdx,
       "xcvrProtGrpWorkShelfIdx": xcvrProtGrpWorkShelfIdx,
       "xcvrProtGrpWorkSlotIdx": xcvrProtGrpWorkSlotIdx,
       "xcvrProtGrpWorkIdx": xcvrProtGrpWorkIdx,
       "xcvrProtGrpProtTypeIdx": xcvrProtGrpProtTypeIdx,
       "xcvrProtGrpProtShelfIdx": xcvrProtGrpProtShelfIdx,
       "xcvrProtGrpProtSlotIdx": xcvrProtGrpProtSlotIdx,
       "xcvrProtGrpProtIdx": xcvrProtGrpProtIdx,
       "xcvrProtGrpId": xcvrProtGrpId,
       "xcvrProtGrpRowStatus": xcvrProtGrpRowStatus,
       "ocnProtGrpTable": ocnProtGrpTable,
       "ocnProtGrpEntry": ocnProtGrpEntry,
       "ocnProtGrpWorkTypeIdx": ocnProtGrpWorkTypeIdx,
       "ocnProtGrpWorkShelfIdx": ocnProtGrpWorkShelfIdx,
       "ocnProtGrpWorkSlotIdx": ocnProtGrpWorkSlotIdx,
       "ocnProtGrpWorkPortIdx": ocnProtGrpWorkPortIdx,
       "ocnProtGrpProtTypeIdx": ocnProtGrpProtTypeIdx,
       "ocnProtGrpProtShelfIdx": ocnProtGrpProtShelfIdx,
       "ocnProtGrpProtSlotIdx": ocnProtGrpProtSlotIdx,
       "ocnProtGrpProtPortIdx": ocnProtGrpProtPortIdx,
       "ocnProtGrpId": ocnProtGrpId,
       "ocnProtGrpRowStatus": ocnProtGrpRowStatus,
       "stmnProtGrpTable": stmnProtGrpTable,
       "stmnProtGrpEntry": stmnProtGrpEntry,
       "stmnProtGrpWorkTypeIdx": stmnProtGrpWorkTypeIdx,
       "stmnProtGrpWorkShelfIdx": stmnProtGrpWorkShelfIdx,
       "stmnProtGrpWorkSlotIdx": stmnProtGrpWorkSlotIdx,
       "stmnProtGrpWorkPortIdx": stmnProtGrpWorkPortIdx,
       "stmnProtGrpProtTypeIdx": stmnProtGrpProtTypeIdx,
       "stmnProtGrpProtShelfIdx": stmnProtGrpProtShelfIdx,
       "stmnProtGrpProtSlotIdx": stmnProtGrpProtSlotIdx,
       "stmnProtGrpProtPortIdx": stmnProtGrpProtPortIdx,
       "stmnProtGrpId": stmnProtGrpId,
       "stmnProtGrpRowStatus": stmnProtGrpRowStatus,
       "operations": operations,
       "neOperations": neOperations,
       "dbBackupAndRestore": dbBackupAndRestore,
       "dbBackupAndRestoreCmd": dbBackupAndRestoreCmd,
       "dbBackupAndRestoreType": dbBackupAndRestoreType,
       "dbBackupAndRestoreAddress": dbBackupAndRestoreAddress,
       "dbBackupAndRestorePath": dbBackupAndRestorePath,
       "dbBackupAndRestoreFtpUser": dbBackupAndRestoreFtpUser,
       "dbBackupAndRestoreFtpPswd": dbBackupAndRestoreFtpPswd,
       "dbBackupAndRestoreCheckAlm": dbBackupAndRestoreCheckAlm,
       "dbBackupAndRestoreCheckSysName": dbBackupAndRestoreCheckSysName,
       "dbBackupAndRestoreInvokeFilename": dbBackupAndRestoreInvokeFilename,
       "dbBackupAndRestoreFilename": dbBackupAndRestoreFilename,
       "dbBackupAndRestoreResult": dbBackupAndRestoreResult,
       "swUpgrade": swUpgrade,
       "swUpgradeCmd": swUpgradeCmd,
       "swUpgradeAddress": swUpgradeAddress,
       "swUpgradePath": swUpgradePath,
       "swUpgradeFtpUser": swUpgradeFtpUser,
       "swUpgradeFtpPswd": swUpgradeFtpPswd,
       "swUpgradeInvokeRelNum": swUpgradeInvokeRelNum,
       "swUpgradeCheckAlm": swUpgradeCheckAlm,
       "swUpgradeActiveRelNum": swUpgradeActiveRelNum,
       "swUpgradeInactiveRelNum": swUpgradeInactiveRelNum,
       "swUpgradeFileTransferType": swUpgradeFileTransferType,
       "shelfInvOperations": shelfInvOperations,
       "slotInvOperations": slotInvOperations,
       "shelfOperations": shelfOperations,
       "cpOperations": cpOperations,
       "cpRestartOpTable": cpRestartOpTable,
       "cpRestartOpEntry": cpRestartOpEntry,
       "cpRestartOpTypeIdx": cpRestartOpTypeIdx,
       "cpRestartOpShelfIdx": cpRestartOpShelfIdx,
       "cpRestartOpSlotIdx": cpRestartOpSlotIdx,
       "cpRestartOpCmd": cpRestartOpCmd,
       "oaOperations": oaOperations,
       "oaOOBRSDOpTable": oaOOBRSDOpTable,
       "oaOOBRSDOpEntry": oaOOBRSDOpEntry,
       "oaOOBRSDOpTypeIdx": oaOOBRSDOpTypeIdx,
       "oaOOBRSDOpShelfIdx": oaOOBRSDOpShelfIdx,
       "oaOOBRSDOpSlotIdx": oaOOBRSDOpSlotIdx,
       "oaOOBRSDOpIdx": oaOOBRSDOpIdx,
       "oaOOBRSDOpCmd": oaOOBRSDOpCmd,
       "oaOOBRSDOpTimer": oaOOBRSDOpTimer,
       "dataCommsOperations": dataCommsOperations,
       "dataCommsPingTable": dataCommsPingTable,
       "dataCommsPingEntry": dataCommsPingEntry,
       "dataCommsPingCpTypeIdx": dataCommsPingCpTypeIdx,
       "dataCommsPingShelfIdx": dataCommsPingShelfIdx,
       "dataCommsPingSlotIdx": dataCommsPingSlotIdx,
       "dataCommsPingCmd": dataCommsPingCmd,
       "dataCommsPingAddress": dataCommsPingAddress,
       "dataCommsPingNumAttempts": dataCommsPingNumAttempts,
       "dataCommsPingNumSuccesses": dataCommsPingNumSuccesses,
       "pluggableInvOperations": pluggableInvOperations,
       "pluggableInvRestartOpTable": pluggableInvRestartOpTable,
       "pluggableInvRestartOpEntry": pluggableInvRestartOpEntry,
       "pluggableInvRestartOpTypeIdx": pluggableInvRestartOpTypeIdx,
       "pluggableInvRestartOpShelfIdx": pluggableInvRestartOpShelfIdx,
       "pluggableInvRestartOpSlotIdx": pluggableInvRestartOpSlotIdx,
       "pluggableInvRestartOpPortIdx": pluggableInvRestartOpPortIdx,
       "pluggableInvRestartOpCmd": pluggableInvRestartOpCmd,
       "xcvrOperations": xcvrOperations,
       "xcvrLpbkOpTable": xcvrLpbkOpTable,
       "xcvrLpbkOpEntry": xcvrLpbkOpEntry,
       "xcvrLpbkOpTypeIdx": xcvrLpbkOpTypeIdx,
       "xcvrLpbkOpShelfIdx": xcvrLpbkOpShelfIdx,
       "xcvrLpbkOpSlotIdx": xcvrLpbkOpSlotIdx,
       "xcvrLpbkOpIdx": xcvrLpbkOpIdx,
       "xcvrLpbkOpCmd": xcvrLpbkOpCmd,
       "xcvrProtSwOpTable": xcvrProtSwOpTable,
       "xcvrProtSwOpEntry": xcvrProtSwOpEntry,
       "xcvrProtSwOpTypeIdx": xcvrProtSwOpTypeIdx,
       "xcvrProtSwOpShelfIdx": xcvrProtSwOpShelfIdx,
       "xcvrProtSwOpSlotIdx": xcvrProtSwOpSlotIdx,
       "xcvrProtSwOpIdx": xcvrProtSwOpIdx,
       "xcvrProtSwOpCmd": xcvrProtSwOpCmd,
       "adminOperations": adminOperations,
       "amdOperations": amdOperations,
       "ocnOperations": ocnOperations,
       "ocnLpbkOpTable": ocnLpbkOpTable,
       "ocnLpbkOpEntry": ocnLpbkOpEntry,
       "ocnLpbkOpTypeIdx": ocnLpbkOpTypeIdx,
       "ocnLpbkOpShelfIdx": ocnLpbkOpShelfIdx,
       "ocnLpbkOpSlotIdx": ocnLpbkOpSlotIdx,
       "ocnLpbkOpPortIdx": ocnLpbkOpPortIdx,
       "ocnLpbkOpCmd": ocnLpbkOpCmd,
       "ocnProtSwOpTable": ocnProtSwOpTable,
       "ocnProtSwOpEntry": ocnProtSwOpEntry,
       "ocnProtSwOpTypeIdx": ocnProtSwOpTypeIdx,
       "ocnProtSwOpShelfIdx": ocnProtSwOpShelfIdx,
       "ocnProtSwOpSlotIdx": ocnProtSwOpSlotIdx,
       "ocnProtSwOpIdx": ocnProtSwOpIdx,
       "ocnProtSwOpCmd": ocnProtSwOpCmd,
       "stsnOperations": stsnOperations,
       "stsnProtSwOpTable": stsnProtSwOpTable,
       "stsnProtSwOpEntry": stsnProtSwOpEntry,
       "stsnProtSwOpTypeIdx": stsnProtSwOpTypeIdx,
       "stsnProtSwOpShelfIdx": stsnProtSwOpShelfIdx,
       "stsnProtSwOpSlotIdx": stsnProtSwOpSlotIdx,
       "stsnProtSwOpPortIdx": stsnProtSwOpPortIdx,
       "stsnProtSwOpIdx": stsnProtSwOpIdx,
       "stsnProtSwOpCmd": stsnProtSwOpCmd,
       "stmnOperations": stmnOperations,
       "stmnLpbkOpTable": stmnLpbkOpTable,
       "stmnLpbkOpEntry": stmnLpbkOpEntry,
       "stmnLpbkOpTypeIdx": stmnLpbkOpTypeIdx,
       "stmnLpbkOpShelfIdx": stmnLpbkOpShelfIdx,
       "stmnLpbkOpSlotIdx": stmnLpbkOpSlotIdx,
       "stmnLpbkOpPortIdx": stmnLpbkOpPortIdx,
       "stmnLpbkOpCmd": stmnLpbkOpCmd,
       "stmnProtSwOpTable": stmnProtSwOpTable,
       "stmnProtSwOpEntry": stmnProtSwOpEntry,
       "stmnProtSwOpTypeIdx": stmnProtSwOpTypeIdx,
       "stmnProtSwOpShelfIdx": stmnProtSwOpShelfIdx,
       "stmnProtSwOpSlotIdx": stmnProtSwOpSlotIdx,
       "stmnProtSwOpIdx": stmnProtSwOpIdx,
       "stmnProtSwOpCmd": stmnProtSwOpCmd,
       "vcnOperations": vcnOperations,
       "vcnProtSwOpTable": vcnProtSwOpTable,
       "vcnProtSwOpEntry": vcnProtSwOpEntry,
       "vcnProtSwOpTypeIdx": vcnProtSwOpTypeIdx,
       "vcnProtSwOpShelfIdx": vcnProtSwOpShelfIdx,
       "vcnProtSwOpSlotIdx": vcnProtSwOpSlotIdx,
       "vcnProtSwOpPortIdx": vcnProtSwOpPortIdx,
       "vcnProtSwOpIdx": vcnProtSwOpIdx,
       "vcnProtSwOpCmd": vcnProtSwOpCmd,
       "geOperations": geOperations,
       "geLpbkOpTable": geLpbkOpTable,
       "geLpbkOpEntry": geLpbkOpEntry,
       "geLpbkOpShelfIdx": geLpbkOpShelfIdx,
       "geLpbkOpSlotIdx": geLpbkOpSlotIdx,
       "geLpbkOpPortIdx": geLpbkOpPortIdx,
       "geLpbkOpCmd": geLpbkOpCmd,
       "fcOperations": fcOperations,
       "fcLpbkOpTable": fcLpbkOpTable,
       "fcLpbkOpEntry": fcLpbkOpEntry,
       "fcLpbkOpShelfIdx": fcLpbkOpShelfIdx,
       "fcLpbkOpSlotIdx": fcLpbkOpSlotIdx,
       "fcLpbkOpPortIdx": fcLpbkOpPortIdx,
       "fcLpbkOpCmd": fcLpbkOpCmd,
       "briOperations": briOperations,
       "briLpbkOpTable": briLpbkOpTable,
       "briLpbkOpEntry": briLpbkOpEntry,
       "briLpbkOpShelfIdx": briLpbkOpShelfIdx,
       "briLpbkOpSlotIdx": briLpbkOpSlotIdx,
       "briLpbkOpPortIdx": briLpbkOpPortIdx,
       "briLpbkOpCmd": briLpbkOpCmd,
       "synchronization": synchronization,
       "cpSynchronizationTable": cpSynchronizationTable,
       "cpSynchronizationEntry": cpSynchronizationEntry,
       "cpSynchronizationTypeIdx": cpSynchronizationTypeIdx,
       "cpSynchronizationShelfIdx": cpSynchronizationShelfIdx,
       "cpSynchronizationSlotIdx": cpSynchronizationSlotIdx,
       "cpSynchronizationTimingMode": cpSynchronizationTimingMode,
       "cpSynchronizationPrimRefSrcPortNum": cpSynchronizationPrimRefSrcPortNum,
       "cpSynchronizationPrimRefProtStatus": cpSynchronizationPrimRefProtStatus,
       "cpSynchronizationPrimProtStatQlfr": cpSynchronizationPrimProtStatQlfr,
       "cpSynchronizationSecRefSrcPortNum": cpSynchronizationSecRefSrcPortNum,
       "cpSynchronizationSecRefProtStatus": cpSynchronizationSecRefProtStatus,
       "cpSynchronizationSecProtStatQlfr": cpSynchronizationSecProtStatQlfr,
       "cpSynchronizationPrimRefBasicSSM": cpSynchronizationPrimRefBasicSSM,
       "cpSynchronizationSecRefBasicSSM": cpSynchronizationSecRefBasicSSM,
       "cpSynchronizationSwEvtType": cpSynchronizationSwEvtType,
       "topology": topology,
       "networkNeighborTable": networkNeighborTable,
       "networkNeighborEntry": networkNeighborEntry,
       "networkNeighborIdx": networkNeighborIdx,
       "networkNeighborIPAddr": networkNeighborIPAddr,
       "networkNeighborRowStatus": networkNeighborRowStatus,
       "ospfGeneralTable": ospfGeneralTable,
       "ospfGeneralGroupEntry": ospfGeneralGroupEntry,
       "ospfIdx": ospfIdx,
       "ospfRouterId": ospfRouterId,
       "ospfAdminStat": ospfAdminStat,
       "ospfVersionNumber": ospfVersionNumber,
       "ospfAreaBdrRtrStatus": ospfAreaBdrRtrStatus,
       "ospfRouteRedist": ospfRouteRedist,
       "ospfAreaId": ospfAreaId,
       "ospfRowStatus": ospfRowStatus,
       "ospfIfTable": ospfIfTable,
       "ospfIfEntry": ospfIfEntry,
       "ospfIfSwitchId": ospfIfSwitchId,
       "ospfIfShelfIdx": ospfIfShelfIdx,
       "ospfIfSlotIdx": ospfIfSlotIdx,
       "ospfIfType": ospfIfType,
       "ospfIfIdx": ospfIfIdx,
       "ospfIfSubIdx": ospfIfSubIdx,
       "ospfIfAreaId": ospfIfAreaId,
       "ospfIfAdminStat": ospfIfAdminStat,
       "ospfIfRtrPriority": ospfIfRtrPriority,
       "ospfIfTransitDelay": ospfIfTransitDelay,
       "ospfIfRetransInterval": ospfIfRetransInterval,
       "ospfIfHelloInterval": ospfIfHelloInterval,
       "ospfIfRtrDeadInterval": ospfIfRtrDeadInterval,
       "ospfIfMetricValue": ospfIfMetricValue,
       "ospfIfStatus": ospfIfStatus,
       "ospfLsdbTable": ospfLsdbTable,
       "ospfLsdbEntry": ospfLsdbEntry,
       "ospfLsdbAreaId": ospfLsdbAreaId,
       "ospfLsdbType": ospfLsdbType,
       "ospfLsdbLsid": ospfLsdbLsid,
       "ospfLsdbRouterId": ospfLsdbRouterId,
       "ospfLsdbSequence": ospfLsdbSequence,
       "ospfLsdbAge": ospfLsdbAge,
       "ospfLsdbChecksum": ospfLsdbChecksum,
       "ospfNbrTable": ospfNbrTable,
       "ospfNbrEntry": ospfNbrEntry,
       "ospfNbrIpAddr": ospfNbrIpAddr,
       "ospfNbrAddressLessIndex": ospfNbrAddressLessIndex,
       "ospfNbrRtrId": ospfNbrRtrId,
       "ospfNbrOptions": ospfNbrOptions,
       "ospfNbrPriority": ospfNbrPriority,
       "ospfNbrState": ospfNbrState,
       "pvxObjects": pvxObjects,
       "pvxBridge": pvxBridge,
       "pvxL2IntfTable": pvxL2IntfTable,
       "pvxL2IntfEntry": pvxL2IntfEntry,
       "pvxL2IntfSwitchIdx": pvxL2IntfSwitchIdx,
       "pvxL2IntfShelfIdx": pvxL2IntfShelfIdx,
       "pvxL2IntfSlotIdx": pvxL2IntfSlotIdx,
       "pvxL2IntfPortTypeIdx": pvxL2IntfPortTypeIdx,
       "pvxL2IntfPortIdx": pvxL2IntfPortIdx,
       "pvxL2IntfAdminStatus": pvxL2IntfAdminStatus,
       "pvxL2IntfOperStatus": pvxL2IntfOperStatus,
       "pvxL2IntfType": pvxL2IntfType,
       "pvxL2IntfSTpid": pvxL2IntfSTpid,
       "pvxL2IntfPvid": pvxL2IntfPvid,
       "pvxL2IntfDefaultPriority": pvxL2IntfDefaultPriority,
       "pvxL2IntfAllowedFrames": pvxL2IntfAllowedFrames,
       "pvxL2IntfIngressFiltering": pvxL2IntfIngressFiltering,
       "pvxL2IntfCtrlFrmProfileId": pvxL2IntfCtrlFrmProfileId,
       "pvxL2IntfMACAddr": pvxL2IntfMACAddr,
       "pvxL2IntfRateLimit": pvxL2IntfRateLimit,
       "pvxL2IntfCoSProfileId": pvxL2IntfCoSProfileId,
       "pvxL2IntfIsUNI": pvxL2IntfIsUNI,
       "pvxL2IntfSchedProfName": pvxL2IntfSchedProfName,
       "pvxL2IntfPriTCMapProfName": pvxL2IntfPriTCMapProfName,
       "pvxL2IntfPCPCodingProfName": pvxL2IntfPCPCodingProfName,
       "pvxL2IntfDscpPHBProfName": pvxL2IntfDscpPHBProfName,
       "pvxL2IntfCtrlFrmProfileName": pvxL2IntfCtrlFrmProfileName,
       "pvxL2IntfUseDei": pvxL2IntfUseDei,
       "pvxL2IntfIngressBandwidthProfile": pvxL2IntfIngressBandwidthProfile,
       "pvxL2IntfEgressBandwidthProfile": pvxL2IntfEgressBandwidthProfile,
       "pvxL2IntfTrustIncomingPCP": pvxL2IntfTrustIncomingPCP,
       "pvxL2IntfTrustIncomingDscp": pvxL2IntfTrustIncomingDscp,
       "pvxL2IntfBcastLimit": pvxL2IntfBcastLimit,
       "pvxL2IntfMcastLimit": pvxL2IntfMcastLimit,
       "pvxL2IntfDlfLimit": pvxL2IntfDlfLimit,
       "pvxL2IntfRowStatus": pvxL2IntfRowStatus,
       "pvxNotificationObjects": pvxNotificationObjects,
       "mstpNotificationObjects": mstpNotificationObjects,
       "miscellaneous": miscellaneous,
       "setErrorInfo": setErrorInfo,
       "setErrorCode": setErrorCode,
       "setErrorDesc": setErrorDesc,
       "opticalLayer": opticalLayer,
       "notifications": notifications,
       "eventNotifications": eventNotifications,
       "evtNotificationObjects": evtNotificationObjects,
       "evtDateAndTime": evtDateAndTime,
       "tcaIntervalType": tcaIntervalType,
       "tcaDateAndTime": tcaDateAndTime,
       "tcaMontype": tcaMontype,
       "tcaValue": tcaValue,
       "tcaThreshold": tcaThreshold,
       "evtDescription": evtDescription,
       "evtObjectType": evtObjectType,
       "evtCodeType": evtCodeType,
       "neEvtNotifications": neEvtNotifications,
       "shelfInvEvtNotifications": shelfInvEvtNotifications,
       "shelfInvPluginEvt": shelfInvPluginEvt,
       "shelfInvUnpluginEvt": shelfInvUnpluginEvt,
       "slotInvEvtNotifications": slotInvEvtNotifications,
       "slotInvPluginEvt": slotInvPluginEvt,
       "slotInvUnpluginEvt": slotInvUnpluginEvt,
       "slotInvUpgradeStageResultEvt": slotInvUpgradeStageResultEvt,
       "shelfEvtNotifications": shelfEvtNotifications,
       "shelfStatusChangeEvt": shelfStatusChangeEvt,
       "cpEvtNotifications": cpEvtNotifications,
       "cpStatusChangeEvt": cpStatusChangeEvt,
       "cpCheckUpgradeResultEvt": cpCheckUpgradeResultEvt,
       "cpUpgradeTransferResultEvt": cpUpgradeTransferResultEvt,
       "cpUpgradeStageResultEvt": cpUpgradeStageResultEvt,
       "cpDbBackupResultEvt": cpDbBackupResultEvt,
       "cpDbRestoreTransferResultEvt": cpDbRestoreTransferResultEvt,
       "cpDbInvokeResultEvt": cpDbInvokeResultEvt,
       "cpDbApplyResultEvt": cpDbApplyResultEvt,
       "oaEvtNotifications": oaEvtNotifications,
       "oaStatusChangeEvt": oaStatusChangeEvt,
       "dataCommsEvtNotifications": dataCommsEvtNotifications,
       "oscStatusChangeEvt": oscStatusChangeEvt,
       "netMgmtStatusChangeEvt": netMgmtStatusChangeEvt,
       "pluggableInvEvtNotifications": pluggableInvEvtNotifications,
       "pluggableInvPluginEvt": pluggableInvPluginEvt,
       "pluggableInvUnpluginEvt": pluggableInvUnpluginEvt,
       "xcvrEvtNotifications": xcvrEvtNotifications,
       "xcvrStatusChangeEvt": xcvrStatusChangeEvt,
       "xcvrProtSwitchEvt": xcvrProtSwitchEvt,
       "xcvrTcaEvt": xcvrTcaEvt,
       "adminEvtNotifications": adminEvtNotifications,
       "amdEvtNotifications": amdEvtNotifications,
       "amdStatusChangeEvt": amdStatusChangeEvt,
       "ocnEvtNotifications": ocnEvtNotifications,
       "ocnStatusChangeEvt": ocnStatusChangeEvt,
       "ocnTcaEvt": ocnTcaEvt,
       "ocnProtSwitchEvt": ocnProtSwitchEvt,
       "stsnEvtNotifications": stsnEvtNotifications,
       "stsnProtSwitchEvt": stsnProtSwitchEvt,
       "stsnTcaEvt": stsnTcaEvt,
       "stmnEvtNotifications": stmnEvtNotifications,
       "stmnStatusChangeEvt": stmnStatusChangeEvt,
       "stmnTcaEvt": stmnTcaEvt,
       "stmnProtSwitchEvt": stmnProtSwitchEvt,
       "vcnEvtNotifications": vcnEvtNotifications,
       "vcnProtSwitchEvt": vcnProtSwitchEvt,
       "vcnTcaEvt": vcnTcaEvt,
       "geEvtNotifications": geEvtNotifications,
       "geStatusChangeEvt": geStatusChangeEvt,
       "geTcaEvt": geTcaEvt,
       "fcEvtNotifications": fcEvtNotifications,
       "fcStatusChangeEvt": fcStatusChangeEvt,
       "fcTcaEvt": fcTcaEvt,
       "ethPortEvtNotifications": ethPortEvtNotifications,
       "ethL1IFStatusChangeEvt": ethL1IFStatusChangeEvt,
       "ethL1IFTcaEvt": ethL1IFTcaEvt,
       "pvxL2EvtNotifications": pvxL2EvtNotifications,
       "pvxL2IFTcaEvt": pvxL2IFTcaEvt,
       "mstpEvtNotifications": mstpEvtNotifications,
       "briEvtNotifications": briEvtNotifications,
       "briStatusChangeEvt": briStatusChangeEvt,
       "cpSynchronizationEvtNotifications": cpSynchronizationEvtNotifications,
       "cpSynchronizationSwitchEvt": cpSynchronizationSwitchEvt,
       "pvxESrvcBWPrflEvtNotifications": pvxESrvcBWPrflEvtNotifications,
       "pvxESrvcEvtNotifications": pvxESrvcEvtNotifications,
       "pvxERPSSrvcNNIEvtNotifications": pvxERPSSrvcNNIEvtNotifications,
       "pvxERPSSrvcEvtNotifications": pvxERPSSrvcEvtNotifications,
       "pvxSlaMsmtEvtNotifications": pvxSlaMsmtEvtNotifications,
       "ntpcEvtNotifications": ntpcEvtNotifications,
       "ntpTimeAndDateUpdateEvt": ntpTimeAndDateUpdateEvt,
       "ntpTimingRefUpdateEvt": ntpTimingRefUpdateEvt,
       "pvxSUniEvtNotifications": pvxSUniEvtNotifications,
       "olEvtNotifications": olEvtNotifications,
       "pvxLldpEvtNotifications": pvxLldpEvtNotifications,
       "pvxLldpRemTablesChangeEvt": pvxLldpRemTablesChangeEvt,
       "conditionNotifications": conditionNotifications,
       "neCondNotifications": neCondNotifications,
       "shelfInvCondNotifications": shelfInvCondNotifications,
       "shelfInvMissingCond": shelfInvMissingCond,
       "shelfInvMissingClear": shelfInvMissingClear,
       "shelfInvUnknownCond": shelfInvUnknownCond,
       "shelfInvUnknownClear": shelfInvUnknownClear,
       "shelfInvCommCond": shelfInvCommCond,
       "shelfInvCommClear": shelfInvCommClear,
       "shelfInvPwrFeedAFailCond": shelfInvPwrFeedAFailCond,
       "shelfInvPwrFeedAFailClear": shelfInvPwrFeedAFailClear,
       "shelfInvPwrFeedBFailCond": shelfInvPwrFeedBFailCond,
       "shelfInvPwrFeedBFailClear": shelfInvPwrFeedBFailClear,
       "shelfInvPwrBrownoutCond": shelfInvPwrBrownoutCond,
       "shelfInvPwrBrownoutClear": shelfInvPwrBrownoutClear,
       "shelfInvSysCommCond": shelfInvSysCommCond,
       "shelfInvSysCommClear": shelfInvSysCommClear,
       "shelfInvExpansionShelfIdMismatchCond": shelfInvExpansionShelfIdMismatchCond,
       "shelfInvExpansionShelfIdMismatchClear": shelfInvExpansionShelfIdMismatchClear,
       "shelfInvExpansionShelfCommLOSCond": shelfInvExpansionShelfCommLOSCond,
       "shelfInvExpansionShelfCommLOSClear": shelfInvExpansionShelfCommLOSClear,
       "shelfInvExpansionShelfCommLinkDownCond": shelfInvExpansionShelfCommLinkDownCond,
       "shelfInvExpansionShelfCommLinkDownClear": shelfInvExpansionShelfCommLinkDownClear,
       "shelfInvExpansionShelfCommDeviceUnsupportedCond": shelfInvExpansionShelfCommDeviceUnsupportedCond,
       "shelfInvExpansionShelfCommDeviceUnsupportedClear": shelfInvExpansionShelfCommDeviceUnsupportedClear,
       "shelfInvTempMaxCond": shelfInvTempMaxCond,
       "shelfInvTempMaxClear": shelfInvTempMaxClear,
       "slotInvCondNotifications": slotInvCondNotifications,
       "slotInvMissingCond": slotInvMissingCond,
       "slotInvMissingClear": slotInvMissingClear,
       "slotInvUnknownCond": slotInvUnknownCond,
       "slotInvUnknownClear": slotInvUnknownClear,
       "slotInvCommCond": slotInvCommCond,
       "slotInvCommClear": slotInvCommClear,
       "slotInvFailCond": slotInvFailCond,
       "slotInvFailClear": slotInvFailClear,
       "slotInvUpgradeInProgressCond": slotInvUpgradeInProgressCond,
       "slotInvUpgradeInProgressClear": slotInvUpgradeInProgressClear,
       "slotInvUpgradeFailureCond": slotInvUpgradeFailureCond,
       "slotInvUpgradeFailureClear": slotInvUpgradeFailureClear,
       "slotInvVersionMismatchCond": slotInvVersionMismatchCond,
       "slotInvVersionMismatchClear": slotInvVersionMismatchClear,
       "slotInvCoolingUnitFailCond": slotInvCoolingUnitFailCond,
       "slotInvCoolingUnitFailClear": slotInvCoolingUnitFailClear,
       "slotInvDspCommCond": slotInvDspCommCond,
       "slotInvDspCommClear": slotInvDspCommClear,
       "slotInvUnsupportedPackCond": slotInvUnsupportedPackCond,
       "slotInvUnsupportedPackClear": slotInvUnsupportedPackClear,
       "slotInvCoolingUnitMismatchCond": slotInvCoolingUnitMismatchCond,
       "slotInvCoolingUnitMismatchClear": slotInvCoolingUnitMismatchClear,
       "slotInvPwrFeedAFuseFailCond": slotInvPwrFeedAFuseFailCond,
       "slotInvPwrFeedAFuseFailClear": slotInvPwrFeedAFuseFailClear,
       "slotInvPwrFeedBFuseFailCond": slotInvPwrFeedBFuseFailCond,
       "slotInvPwrFeedBFuseFailClear": slotInvPwrFeedBFuseFailClear,
       "slotInvPowerFailCond": slotInvPowerFailCond,
       "slotInvPowerFailClear": slotInvPowerFailClear,
       "slotInvHiTempAutoShutdownCond": slotInvHiTempAutoShutdownCond,
       "slotInvHiTempAutoShutdownClear": slotInvHiTempAutoShutdownClear,
       "slotInvHTThreshExceededCond": slotInvHTThreshExceededCond,
       "slotInvHTThreshExceededClear": slotInvHTThreshExceededClear,
       "slotInvHTSThreshExceededCond": slotInvHTSThreshExceededCond,
       "slotInvHTSThreshExceededClear": slotInvHTSThreshExceededClear,
       "slotInvHTASUnsupportedCond": slotInvHTASUnsupportedCond,
       "slotInvHTASUnsupportedClear": slotInvHTASUnsupportedClear,
       "shelfCondNotifications": shelfCondNotifications,
       "shelfMismatchCond": shelfMismatchCond,
       "shelfMismatchClear": shelfMismatchClear,
       "shelfMissingCond": shelfMissingCond,
       "shelfMissingClear": shelfMissingClear,
       "shelfConfigurationMismatchCond": shelfConfigurationMismatchCond,
       "shelfConfigurationMismatchClear": shelfConfigurationMismatchClear,
       "cpCondNotifications": cpCondNotifications,
       "cpMismatchCond": cpMismatchCond,
       "cpMismatchClear": cpMismatchClear,
       "cpConnectorMismatchCond": cpConnectorMismatchCond,
       "cpConnectorMismatchClear": cpConnectorMismatchClear,
       "cpInvalidProvCond": cpInvalidProvCond,
       "cpInvalidProvClear": cpInvalidProvClear,
       "cpSoftwareBankAFailCond": cpSoftwareBankAFailCond,
       "cpSoftwareBankAFailClear": cpSoftwareBankAFailClear,
       "cpSoftwareBankBFailCond": cpSoftwareBankBFailCond,
       "cpSoftwareBankBFailClear": cpSoftwareBankBFailClear,
       "cpUpgradeInProgressCond": cpUpgradeInProgressCond,
       "cpUpgradeInProgressClear": cpUpgradeInProgressClear,
       "cpUpgradeFailCond": cpUpgradeFailCond,
       "cpUpgradeFailClear": cpUpgradeFailClear,
       "cpDbRestoreInProgressCond": cpDbRestoreInProgressCond,
       "cpDbRestoreInProgressClear": cpDbRestoreInProgressClear,
       "cpDbRecoveryFailCond": cpDbRecoveryFailCond,
       "cpDbRecoveryFailClear": cpDbRecoveryFailClear,
       "cpFanFeedFailCond": cpFanFeedFailCond,
       "cpFanFeedFailClear": cpFanFeedFailClear,
       "cpStorageCardFailCond": cpStorageCardFailCond,
       "cpStorageCardFailClear": cpStorageCardFailClear,
       "cpDbDeletionInProgressCond": cpDbDeletionInProgressCond,
       "cpDbDeletionInProgressClear": cpDbDeletionInProgressClear,
       "cpDegradeCond": cpDegradeCond,
       "cpDegradeClear": cpDegradeClear,
       "oaCondNotifications": oaCondNotifications,
       "oaCaseTempCond": oaCaseTempCond,
       "oaCaseTempClear": oaCaseTempClear,
       "oaCaseTempShutdownCond": oaCaseTempShutdownCond,
       "oaCaseTempShutdownClear": oaCaseTempShutdownClear,
       "oaLaserMinTempShutdownCond": oaLaserMinTempShutdownCond,
       "oaLaserMinTempShutdownClear": oaLaserMinTempShutdownClear,
       "oaLaserMaxTempShutdownCond": oaLaserMaxTempShutdownCond,
       "oaLaserMaxTempShutdownClear": oaLaserMaxTempShutdownClear,
       "oaOpticalPwrReceivedMinCond": oaOpticalPwrReceivedMinCond,
       "oaOpticalPwrReceivedMinClear": oaOpticalPwrReceivedMinClear,
       "oaOpticalPwrReceivedMaxCond": oaOpticalPwrReceivedMaxCond,
       "oaOpticalPwrReceivedMaxClear": oaOpticalPwrReceivedMaxClear,
       "oaSSIOpticalPwrReceivedMaxCond": oaSSIOpticalPwrReceivedMaxCond,
       "oaSSIOpticalPwrReceivedMaxClear": oaSSIOpticalPwrReceivedMaxClear,
       "oaBackReflectionSafetyCond": oaBackReflectionSafetyCond,
       "oaBackReflectionSafetyClear": oaBackReflectionSafetyClear,
       "oaOpticalPwrTransmittedMinCond": oaOpticalPwrTransmittedMinCond,
       "oaOpticalPwrTransmittedMinClear": oaOpticalPwrTransmittedMinClear,
       "oaOpticalPwrTransmittedMaxCond": oaOpticalPwrTransmittedMaxCond,
       "oaOpticalPwrTransmittedMaxClear": oaOpticalPwrTransmittedMaxClear,
       "oaMSInsertionLossCond": oaMSInsertionLossCond,
       "oaMSInsertionLossClear": oaMSInsertionLossClear,
       "oaAmplifierConditioningCond": oaAmplifierConditioningCond,
       "oaAmplifierConditioningClear": oaAmplifierConditioningClear,
       "oaDspCommCond": oaDspCommCond,
       "oaDspCommClear": oaDspCommClear,
       "oaBackReflectionSafetyOverrideCond": oaBackReflectionSafetyOverrideCond,
       "oaBackReflectionSafetyOverrideClear": oaBackReflectionSafetyOverrideClear,
       "oaBackReflectionHighThresholdCond": oaBackReflectionHighThresholdCond,
       "oaBackReflectionHighThresholdClear": oaBackReflectionHighThresholdClear,
       "dataCommsCondNotifications": dataCommsCondNotifications,
       "oscLossOfSignalCond": oscLossOfSignalCond,
       "oscLossOfSignalClear": oscLossOfSignalClear,
       "oscSfpMissingCond": oscSfpMissingCond,
       "oscSfpMissingClear": oscSfpMissingClear,
       "pluggableInvCondNotifications": pluggableInvCondNotifications,
       "pluggableInvUnknownCond": pluggableInvUnknownCond,
       "pluggableInvUnknownClear": pluggableInvUnknownClear,
       "pluggableInvCommCond": pluggableInvCommCond,
       "pluggableInvCommClear": pluggableInvCommClear,
       "pluggableInvFailCond": pluggableInvFailCond,
       "pluggableInvFailClear": pluggableInvFailClear,
       "pluggableInvMismatchCond": pluggableInvMismatchCond,
       "pluggableInvMismatchClear": pluggableInvMismatchClear,
       "pluggableInvMissingCond": pluggableInvMissingCond,
       "pluggableInvMissingClear": pluggableInvMissingClear,
       "pluggableInvUnsupportedCond": pluggableInvUnsupportedCond,
       "pluggableInvUnsupportedClear": pluggableInvUnsupportedClear,
       "xcvrCondNotifications": xcvrCondNotifications,
       "xcvrMissingCond": xcvrMissingCond,
       "xcvrMissingClear": xcvrMissingClear,
       "xcvrMismatchCond": xcvrMismatchCond,
       "xcvrMismatchClear": xcvrMismatchClear,
       "xcvrRFICond": xcvrRFICond,
       "xcvrRFIClear": xcvrRFIClear,
       "xcvrLossOfSignalCond": xcvrLossOfSignalCond,
       "xcvrLossOfSignalClear": xcvrLossOfSignalClear,
       "xcvrLossOfLockCond": xcvrLossOfLockCond,
       "xcvrLossOfLockClear": xcvrLossOfLockClear,
       "xcvrOpticalPwrReceivedMinCond": xcvrOpticalPwrReceivedMinCond,
       "xcvrOpticalPwrReceivedMinClear": xcvrOpticalPwrReceivedMinClear,
       "xcvrOpticalPwrReceivedMaxCond": xcvrOpticalPwrReceivedMaxCond,
       "xcvrOpticalPwrReceivedMaxClear": xcvrOpticalPwrReceivedMaxClear,
       "xcvrOpticalPwrTransmittedMinCond": xcvrOpticalPwrTransmittedMinCond,
       "xcvrOpticalPwrTransmittedMinClear": xcvrOpticalPwrTransmittedMinClear,
       "xcvrOpticalPwrTransmittedMaxCond": xcvrOpticalPwrTransmittedMaxCond,
       "xcvrOpticalPwrTransmittedMaxClear": xcvrOpticalPwrTransmittedMaxClear,
       "xcvrLossOfFrameCond": xcvrLossOfFrameCond,
       "xcvrLossOfFrameClear": xcvrLossOfFrameClear,
       "xcvrLossOfSyncCond": xcvrLossOfSyncCond,
       "xcvrLossOfSyncClear": xcvrLossOfSyncClear,
       "xcvrLoopbackCond": xcvrLoopbackCond,
       "xcvrLoopbackClear": xcvrLoopbackClear,
       "xcvrForcedSwitchToProtectionCond": xcvrForcedSwitchToProtectionCond,
       "xcvrForcedSwitchToProtectionClear": xcvrForcedSwitchToProtectionClear,
       "xcvrForcedSwitchToWorkingCond": xcvrForcedSwitchToWorkingCond,
       "xcvrForcedSwitchToWorkingClear": xcvrForcedSwitchToWorkingClear,
       "xcvrLockoutProtectionCond": xcvrLockoutProtectionCond,
       "xcvrLockoutProtectionClear": xcvrLockoutProtectionClear,
       "xcvrLockoutWorkingCond": xcvrLockoutWorkingCond,
       "xcvrLockoutWorkingClear": xcvrLockoutWorkingClear,
       "xcvrTempMaxCond": xcvrTempMaxCond,
       "xcvrTempMaxClear": xcvrTempMaxClear,
       "xcvrWavelengthNotAchievableCond": xcvrWavelengthNotAchievableCond,
       "xcvrWavelengthNotAchievableClear": xcvrWavelengthNotAchievableClear,
       "xcvrAlarmIndicationSignalCond": xcvrAlarmIndicationSignalCond,
       "xcvrAlarmIndicationSignalClear": xcvrAlarmIndicationSignalClear,
       "xcvrTraceMismatchCond": xcvrTraceMismatchCond,
       "xcvrTraceMismatchClear": xcvrTraceMismatchClear,
       "xcvrRemoteFaultCond": xcvrRemoteFaultCond,
       "xcvrRemoteFaultClear": xcvrRemoteFaultClear,
       "xcvrSignalDegradeCond": xcvrSignalDegradeCond,
       "xcvrSignalDegradeClear": xcvrSignalDegradeClear,
       "xcvrOTNPayloadMismatchCond": xcvrOTNPayloadMismatchCond,
       "xcvrOTNPayloadMismatchClear": xcvrOTNPayloadMismatchClear,
       "xcvrLFCond": xcvrLFCond,
       "xcvrLFClear": xcvrLFClear,
       "xcvrOpenConnectionIndicatorCond": xcvrOpenConnectionIndicatorCond,
       "xcvrOpenConnectionIndicatorClear": xcvrOpenConnectionIndicatorClear,
       "xcvrReceivedLockoutCond": xcvrReceivedLockoutCond,
       "xcvrReceivedLockoutClear": xcvrReceivedLockoutClear,
       "xcvrBackwardDefectIndicatorCond": xcvrBackwardDefectIndicatorCond,
       "xcvrBackwardDefectIndicatorClear": xcvrBackwardDefectIndicatorClear,
       "adminCondNotifications": adminCondNotifications,
       "tl1UserLockoutCond": tl1UserLockoutCond,
       "tl1UserLockoutClear": tl1UserLockoutClear,
       "tl1IpLockoutCond": tl1IpLockoutCond,
       "tl1IpLockoutClear": tl1IpLockoutClear,
       "amdCondNotifications": amdCondNotifications,
       "amdLossOfSignalCond": amdLossOfSignalCond,
       "amdLossOfSignalClear": amdLossOfSignalClear,
       "amdOpticalPwrReceivedMinCond": amdOpticalPwrReceivedMinCond,
       "amdOpticalPwrReceivedMinClear": amdOpticalPwrReceivedMinClear,
       "amdOpticalPwrReceivedMaxCond": amdOpticalPwrReceivedMaxCond,
       "amdOpticalPwrReceivedMaxClear": amdOpticalPwrReceivedMaxClear,
       "amdTPLNACond": amdTPLNACond,
       "amdTPLNAClear": amdTPLNAClear,
       "amdTALNACond": amdTALNACond,
       "amdTALNAClear": amdTALNAClear,
       "ocnCondNotifications": ocnCondNotifications,
       "ocnLossOfSignalCond": ocnLossOfSignalCond,
       "ocnLossOfSignalClear": ocnLossOfSignalClear,
       "ocnXcvrMismatchCond": ocnXcvrMismatchCond,
       "ocnXcvrMismatchClear": ocnXcvrMismatchClear,
       "ocnOpticalPwrReceivedMinCond": ocnOpticalPwrReceivedMinCond,
       "ocnOpticalPwrReceivedMinClear": ocnOpticalPwrReceivedMinClear,
       "ocnOpticalPwrReceivedMaxCond": ocnOpticalPwrReceivedMaxCond,
       "ocnOpticalPwrReceivedMaxClear": ocnOpticalPwrReceivedMaxClear,
       "ocnOpticalPwrTransmittedMinCond": ocnOpticalPwrTransmittedMinCond,
       "ocnOpticalPwrTransmittedMinClear": ocnOpticalPwrTransmittedMinClear,
       "ocnOpticalPwrTransmittedMaxCond": ocnOpticalPwrTransmittedMaxCond,
       "ocnOpticalPwrTransmittedMaxClear": ocnOpticalPwrTransmittedMaxClear,
       "ocnLossOfFrameCond": ocnLossOfFrameCond,
       "ocnLossOfFrameClear": ocnLossOfFrameClear,
       "ocnSignalDegradeCond": ocnSignalDegradeCond,
       "ocnSignalDegradeClear": ocnSignalDegradeClear,
       "ocnAlarmIndicationSignalCond": ocnAlarmIndicationSignalCond,
       "ocnAlarmIndicationSignalClear": ocnAlarmIndicationSignalClear,
       "ocnLoopbackCond": ocnLoopbackCond,
       "ocnLoopbackClear": ocnLoopbackClear,
       "ocnLossOfPrimaryTimingReferenceCond": ocnLossOfPrimaryTimingReferenceCond,
       "ocnLossOfPrimaryTimingReferenceClear": ocnLossOfPrimaryTimingReferenceClear,
       "ocnLossOfSecondaryTimingReferenceCond": ocnLossOfSecondaryTimingReferenceCond,
       "ocnLossOfSecondaryTimingReferenceClear": ocnLossOfSecondaryTimingReferenceClear,
       "ocnOTNPayloadMismatchCond": ocnOTNPayloadMismatchCond,
       "ocnOTNPayloadMismatchClear": ocnOTNPayloadMismatchClear,
       "ocnForcedSwitchToProtectionCond": ocnForcedSwitchToProtectionCond,
       "ocnForcedSwitchToProtectionClear": ocnForcedSwitchToProtectionClear,
       "ocnForcedSwitchToWorkingCond": ocnForcedSwitchToWorkingCond,
       "ocnForcedSwitchToWorkingClear": ocnForcedSwitchToWorkingClear,
       "ocnLockoutProtectionCond": ocnLockoutProtectionCond,
       "ocnLockoutProtectionClear": ocnLockoutProtectionClear,
       "ocnLockoutWorkingCond": ocnLockoutWorkingCond,
       "ocnLockoutWorkingClear": ocnLockoutWorkingClear,
       "ocnWavelengthNotAchievableCond": ocnWavelengthNotAchievableCond,
       "ocnWavelengthNotAchievableClear": ocnWavelengthNotAchievableClear,
       "stsnCondNotifications": stsnCondNotifications,
       "stsnAlarmIndicationSignalCond": stsnAlarmIndicationSignalCond,
       "stsnAlarmIndicationSignalClear": stsnAlarmIndicationSignalClear,
       "stsnLossOfPointerCond": stsnLossOfPointerCond,
       "stsnLossOfPointerClear": stsnLossOfPointerClear,
       "stsnUnequippedCond": stsnUnequippedCond,
       "stsnUnequippedClear": stsnUnequippedClear,
       "stsnSignalDegradeCond": stsnSignalDegradeCond,
       "stsnSignalDegradeClear": stsnSignalDegradeClear,
       "stsnForcedSwitchToProtectionCond": stsnForcedSwitchToProtectionCond,
       "stsnForcedSwitchToProtectionClear": stsnForcedSwitchToProtectionClear,
       "stsnForcedSwitchToWorkingCond": stsnForcedSwitchToWorkingCond,
       "stsnForcedSwitchToWorkingClear": stsnForcedSwitchToWorkingClear,
       "stsnLockoutProtectionCond": stsnLockoutProtectionCond,
       "stsnLockoutProtectionClear": stsnLockoutProtectionClear,
       "stsnLockoutWorkingCond": stsnLockoutWorkingCond,
       "stsnLockoutWorkingClear": stsnLockoutWorkingClear,
       "stsnConcatMismatchCond": stsnConcatMismatchCond,
       "stsnConcatMismatchClear": stsnConcatMismatchClear,
       "stmnCondNotifications": stmnCondNotifications,
       "stmnLossOfSignalCond": stmnLossOfSignalCond,
       "stmnLossOfSignalClear": stmnLossOfSignalClear,
       "stmnXcvrMismatchCond": stmnXcvrMismatchCond,
       "stmnXcvrMismatchClear": stmnXcvrMismatchClear,
       "stmnOpticalPwrReceivedMinCond": stmnOpticalPwrReceivedMinCond,
       "stmnOpticalPwrReceivedMinClear": stmnOpticalPwrReceivedMinClear,
       "stmnOpticalPwrReceivedMaxCond": stmnOpticalPwrReceivedMaxCond,
       "stmnOpticalPwrReceivedMaxClear": stmnOpticalPwrReceivedMaxClear,
       "stmnOpticalPwrTransmittedMinCond": stmnOpticalPwrTransmittedMinCond,
       "stmnOpticalPwrTransmittedMinClear": stmnOpticalPwrTransmittedMinClear,
       "stmnOpticalPwrTransmittedMaxCond": stmnOpticalPwrTransmittedMaxCond,
       "stmnOpticalPwrTransmittedMaxClear": stmnOpticalPwrTransmittedMaxClear,
       "stmnLossOfFrameCond": stmnLossOfFrameCond,
       "stmnLossOfFrameClear": stmnLossOfFrameClear,
       "stmnSignalDegradeCond": stmnSignalDegradeCond,
       "stmnSignalDegradeClear": stmnSignalDegradeClear,
       "stmnAlarmIndicationSignalCond": stmnAlarmIndicationSignalCond,
       "stmnAlarmIndicationSignalClear": stmnAlarmIndicationSignalClear,
       "stmnLoopbackCond": stmnLoopbackCond,
       "stmnLoopbackClear": stmnLoopbackClear,
       "stmnLossOfPrimaryTimingReferenceCond": stmnLossOfPrimaryTimingReferenceCond,
       "stmnLossOfPrimaryTimingReferenceClear": stmnLossOfPrimaryTimingReferenceClear,
       "stmnLossOfSecondaryTimingReferenceCond": stmnLossOfSecondaryTimingReferenceCond,
       "stmnLossOfSecondaryTimingReferenceClear": stmnLossOfSecondaryTimingReferenceClear,
       "stmnOTNPayloadMismatchCond": stmnOTNPayloadMismatchCond,
       "stmnOTNPayloadMismatchClear": stmnOTNPayloadMismatchClear,
       "stmnForcedSwitchToProtectionCond": stmnForcedSwitchToProtectionCond,
       "stmnForcedSwitchToProtectionClear": stmnForcedSwitchToProtectionClear,
       "stmnForcedSwitchToWorkingCond": stmnForcedSwitchToWorkingCond,
       "stmnForcedSwitchToWorkingClear": stmnForcedSwitchToWorkingClear,
       "stmnLockoutProtectionCond": stmnLockoutProtectionCond,
       "stmnLockoutProtectionClear": stmnLockoutProtectionClear,
       "stmnLockoutWorkingCond": stmnLockoutWorkingCond,
       "stmnLockoutWorkingClear": stmnLockoutWorkingClear,
       "stmnWavelengthNotAchievableCond": stmnWavelengthNotAchievableCond,
       "stmnWavelengthNotAchievableClear": stmnWavelengthNotAchievableClear,
       "vcnCondNotifications": vcnCondNotifications,
       "vcnAlarmIndicationSignalCond": vcnAlarmIndicationSignalCond,
       "vcnAlarmIndicationSignalClear": vcnAlarmIndicationSignalClear,
       "vcnLossOfPointerCond": vcnLossOfPointerCond,
       "vcnLossOfPointerClear": vcnLossOfPointerClear,
       "vcnUnequippedCond": vcnUnequippedCond,
       "vcnUnequippedClear": vcnUnequippedClear,
       "vcnSignalDegradeCond": vcnSignalDegradeCond,
       "vcnSignalDegradeClear": vcnSignalDegradeClear,
       "vcnForcedSwitchToProtectionCond": vcnForcedSwitchToProtectionCond,
       "vcnForcedSwitchToProtectionClear": vcnForcedSwitchToProtectionClear,
       "vcnForcedSwitchToWorkingCond": vcnForcedSwitchToWorkingCond,
       "vcnForcedSwitchToWorkingClear": vcnForcedSwitchToWorkingClear,
       "vcnLockoutProtectionCond": vcnLockoutProtectionCond,
       "vcnLockoutProtectionClear": vcnLockoutProtectionClear,
       "vcnLockoutWorkingCond": vcnLockoutWorkingCond,
       "vcnLockoutWorkingClear": vcnLockoutWorkingClear,
       "vcnConcatMismatchCond": vcnConcatMismatchCond,
       "vcnConcatMismatchClear": vcnConcatMismatchClear,
       "geCondNotifications": geCondNotifications,
       "geLossOfSignalCond": geLossOfSignalCond,
       "geLossOfSignalClear": geLossOfSignalClear,
       "geXcvrMismatchCond": geXcvrMismatchCond,
       "geXcvrMismatchClear": geXcvrMismatchClear,
       "geOpticalPwrReceivedMinCond": geOpticalPwrReceivedMinCond,
       "geOpticalPwrReceivedMinClear": geOpticalPwrReceivedMinClear,
       "geOpticalPwrReceivedMaxCond": geOpticalPwrReceivedMaxCond,
       "geOpticalPwrReceivedMaxClear": geOpticalPwrReceivedMaxClear,
       "geOpticalPwrTransmittedMinCond": geOpticalPwrTransmittedMinCond,
       "geOpticalPwrTransmittedMinClear": geOpticalPwrTransmittedMinClear,
       "geOpticalPwrTransmittedMaxCond": geOpticalPwrTransmittedMaxCond,
       "geOpticalPwrTransmittedMaxClear": geOpticalPwrTransmittedMaxClear,
       "geLossOfSyncCond": geLossOfSyncCond,
       "geLossOfSyncClear": geLossOfSyncClear,
       "geRemotePathFailureCond": geRemotePathFailureCond,
       "geRemotePathFailureClear": geRemotePathFailureClear,
       "geLossOfMultiframeCond": geLossOfMultiframeCond,
       "geLossOfMultiframeClear": geLossOfMultiframeClear,
       "geLossOfSequenceCond": geLossOfSequenceCond,
       "geLossOfSequenceClear": geLossOfSequenceClear,
       "geLossOfAlignmentCond": geLossOfAlignmentCond,
       "geLossOfAlignmentClear": geLossOfAlignmentClear,
       "geLoopbackCond": geLoopbackCond,
       "geLoopbackClear": geLoopbackClear,
       "geBandwidthMismatchCond": geBandwidthMismatchCond,
       "geBandwidthMismatchClear": geBandwidthMismatchClear,
       "gePayloadMismatchCond": gePayloadMismatchCond,
       "gePayloadMismatchClear": gePayloadMismatchClear,
       "fcCondNotifications": fcCondNotifications,
       "fcLossOfSignalCond": fcLossOfSignalCond,
       "fcLossOfSignalClear": fcLossOfSignalClear,
       "fcXcvrMismatchCond": fcXcvrMismatchCond,
       "fcXcvrMismatchClear": fcXcvrMismatchClear,
       "fcOpticalPwrReceivedMinCond": fcOpticalPwrReceivedMinCond,
       "fcOpticalPwrReceivedMinClear": fcOpticalPwrReceivedMinClear,
       "fcOpticalPwrReceivedMaxCond": fcOpticalPwrReceivedMaxCond,
       "fcOpticalPwrReceivedMaxClear": fcOpticalPwrReceivedMaxClear,
       "fcOpticalPwrTransmittedMinCond": fcOpticalPwrTransmittedMinCond,
       "fcOpticalPwrTransmittedMinClear": fcOpticalPwrTransmittedMinClear,
       "fcOpticalPwrTransmittedMaxCond": fcOpticalPwrTransmittedMaxCond,
       "fcOpticalPwrTransmittedMaxClear": fcOpticalPwrTransmittedMaxClear,
       "fcLossOfSyncCond": fcLossOfSyncCond,
       "fcLossOfSyncClear": fcLossOfSyncClear,
       "fcRemotePathFailureCond": fcRemotePathFailureCond,
       "fcRemotePathFailureClear": fcRemotePathFailureClear,
       "fcLossOfMultiframeCond": fcLossOfMultiframeCond,
       "fcLossOfMultiframeClear": fcLossOfMultiframeClear,
       "fcLossOfSequenceCond": fcLossOfSequenceCond,
       "fcLossOfSequenceClear": fcLossOfSequenceClear,
       "fcLossOfAlignmentCond": fcLossOfAlignmentCond,
       "fcLossOfAlignmentClear": fcLossOfAlignmentClear,
       "fcLoopbackCond": fcLoopbackCond,
       "fcLoopbackClear": fcLoopbackClear,
       "fcBandwidthMismatchCond": fcBandwidthMismatchCond,
       "fcBandwidthMismatchClear": fcBandwidthMismatchClear,
       "fcPayloadMismatchCond": fcPayloadMismatchCond,
       "fcPayloadMismatchClear": fcPayloadMismatchClear,
       "ethPortCondNotifications": ethPortCondNotifications,
       "olsSFPMissingCond": olsSFPMissingCond,
       "olsSFPMissingClear": olsSFPMissingClear,
       "olsSFPMismatchCond": olsSFPMismatchCond,
       "olsSFPMismatchClear": olsSFPMismatchClear,
       "olsInputLOSCond": olsInputLOSCond,
       "olsInputLOSClear": olsInputLOSClear,
       "olsOpticalPwrReceivedMinCond": olsOpticalPwrReceivedMinCond,
       "olsOpticalPwrReceivedMinClear": olsOpticalPwrReceivedMinClear,
       "olsOpticalPwrReceivedMaxCond": olsOpticalPwrReceivedMaxCond,
       "olsOpticalPwrReceivedMaxClear": olsOpticalPwrReceivedMaxClear,
       "olsOpticalPwrTransmittedMinCond": olsOpticalPwrTransmittedMinCond,
       "olsOpticalPwrTransmittedMinClear": olsOpticalPwrTransmittedMinClear,
       "olsOpticalPwrTransmittedMaxCond": olsOpticalPwrTransmittedMaxCond,
       "olsOpticalPwrTransmittedMaxClear": olsOpticalPwrTransmittedMaxClear,
       "olsTemperatureMaxCond": olsTemperatureMaxCond,
       "olsTemperatureMaxClear": olsTemperatureMaxClear,
       "olsLoopbackCond": olsLoopbackCond,
       "olsLoopbackClear": olsLoopbackClear,
       "olsLossOfSyncCond": olsLossOfSyncCond,
       "olsLossOfSyncClear": olsLossOfSyncClear,
       "olsLossOfFrameCond": olsLossOfFrameCond,
       "olsLossOfFrameClear": olsLossOfFrameClear,
       "olsAlarmIndicationSignalCond": olsAlarmIndicationSignalCond,
       "olsAlarmIndicationSignalClear": olsAlarmIndicationSignalClear,
       "olsBackwardDefectIndicatorCond": olsBackwardDefectIndicatorCond,
       "olsBackwardDefectIndicatorClear": olsBackwardDefectIndicatorClear,
       "olsSignalDegradeCond": olsSignalDegradeCond,
       "olsSignalDegradeClear": olsSignalDegradeClear,
       "olsOTNPayloadMismatchCond": olsOTNPayloadMismatchCond,
       "olsOTNPayloadMismatchClear": olsOTNPayloadMismatchClear,
       "olsOTUTrailTraceMismatchCond": olsOTUTrailTraceMismatchCond,
       "olsOTUTrailTraceMismatchClear": olsOTUTrailTraceMismatchClear,
       "olsRemoteFaultCond": olsRemoteFaultCond,
       "olsRemoteFaultClear": olsRemoteFaultClear,
       "olsLocalFaultCond": olsLocalFaultCond,
       "olsLocalFaultClear": olsLocalFaultClear,
       "olsWavelengthNotAchievableCond": olsWavelengthNotAchievableCond,
       "olsWavelengthNotAchievableClear": olsWavelengthNotAchievableClear,
       "pvxL2PortCondNotifications": pvxL2PortCondNotifications,
       "olsLinkDownCond": olsLinkDownCond,
       "olsLinkDownClear": olsLinkDownClear,
       "mstpCondNotifications": mstpCondNotifications,
       "lagCondNotifications": lagCondNotifications,
       "odunCondNotifications": odunCondNotifications,
       "odunPayloadMismatchCond": odunPayloadMismatchCond,
       "odunPayloadMismatchClear": odunPayloadMismatchClear,
       "odunOpenConnectionIndicatorCond": odunOpenConnectionIndicatorCond,
       "odunOpenConnectionIndicatorClear": odunOpenConnectionIndicatorClear,
       "briCondNotifications": briCondNotifications,
       "briLossOfSignalCond": briLossOfSignalCond,
       "briLossOfSignalClear": briLossOfSignalClear,
       "briXcvrMismatchCond": briXcvrMismatchCond,
       "briXcvrMismatchClear": briXcvrMismatchClear,
       "briOpticalPwrReceivedMinCond": briOpticalPwrReceivedMinCond,
       "briOpticalPwrReceivedMinClear": briOpticalPwrReceivedMinClear,
       "briOpticalPwrReceivedMaxCond": briOpticalPwrReceivedMaxCond,
       "briOpticalPwrReceivedMaxClear": briOpticalPwrReceivedMaxClear,
       "briOpticalPwrTransmittedMinCond": briOpticalPwrTransmittedMinCond,
       "briOpticalPwrTransmittedMinClear": briOpticalPwrTransmittedMinClear,
       "briOpticalPwrTransmittedMaxCond": briOpticalPwrTransmittedMaxCond,
       "briOpticalPwrTransmittedMaxClear": briOpticalPwrTransmittedMaxClear,
       "briLossOfMultiframeCond": briLossOfMultiframeCond,
       "briLossOfMultiframeClear": briLossOfMultiframeClear,
       "briLossOfSequenceCond": briLossOfSequenceCond,
       "briLossOfSequenceClear": briLossOfSequenceClear,
       "briLossOfAlignmentCond": briLossOfAlignmentCond,
       "briLossOfAlignmentClear": briLossOfAlignmentClear,
       "briLoopbackCond": briLoopbackCond,
       "briLoopbackClear": briLoopbackClear,
       "briBandwidthMismatchCond": briBandwidthMismatchCond,
       "briBandwidthMismatchClear": briBandwidthMismatchClear,
       "briLossOfLockCond": briLossOfLockCond,
       "briLossOfLockClear": briLossOfLockClear,
       "briTxLockingCond": briTxLockingCond,
       "briTxLockingClear": briTxLockingClear,
       "ntpcCondNotifications": ntpcCondNotifications,
       "ntpAssocSrvrNotReachableCond": ntpAssocSrvrNotReachableCond,
       "ntpAssocSrvrNotReachableClear": ntpAssocSrvrNotReachableClear,
       "ntpAssocSrvrNotRespondingCond": ntpAssocSrvrNotRespondingCond,
       "ntpAssocSrvrNotRespondingClear": ntpAssocSrvrNotRespondingClear,
       "ntpAssocAuthenFailedCond": ntpAssocAuthenFailedCond,
       "ntpAssocAuthenFailedClear": ntpAssocAuthenFailedClear,
       "envCondNotifications": envCondNotifications,
       "envAttrUnsupportedCond": envAttrUnsupportedCond,
       "envAttrUnsupportedClear": envAttrUnsupportedClear,
       "envAirComprCond": envAirComprCond,
       "envAirComprClear": envAirComprClear,
       "envAirCondCond": envAirCondCond,
       "envAirCondClear": envAirCondClear,
       "envAirDryrCond": envAirDryrCond,
       "envAirDryrClear": envAirDryrClear,
       "envBatDschrdCond": envBatDschrdCond,
       "envBatDschrdClear": envBatDschrdClear,
       "envBatteryCond": envBatteryCond,
       "envBatteryClear": envBatteryClear,
       "envClFanCond": envClFanCond,
       "envClFanClear": envClFanClear,
       "envCpMajorCond": envCpMajorCond,
       "envCpMajorClear": envCpMajorClear,
       "envCpMinorCond": envCpMinorCond,
       "envCpMinorClear": envCpMinorClear,
       "envDoorOpenCond": envDoorOpenCond,
       "envDoorOpenClear": envDoorOpenClear,
       "envEngineCond": envEngineCond,
       "envEngineClear": envEngineClear,
       "envEngOprgCond": envEngOprgCond,
       "envEngOprgClear": envEngOprgClear,
       "envExplGsCond": envExplGsCond,
       "envExplGsClear": envExplGsClear,
       "envFirDetrCond": envFirDetrCond,
       "envFirDetrClear": envFirDetrClear,
       "envFireCond": envFireCond,
       "envFireClear": envFireClear,
       "envFloodCond": envFloodCond,
       "envFloodClear": envFloodClear,
       "envFuseCond": envFuseCond,
       "envFuseClear": envFuseClear,
       "envGenCond": envGenCond,
       "envGenClear": envGenClear,
       "envGenericCond": envGenericCond,
       "envGenericClear": envGenericClear,
       "envHiAirCond": envHiAirCond,
       "envHiAirClear": envHiAirClear,
       "envHiHumCond": envHiHumCond,
       "envHiHumClear": envHiHumClear,
       "envHiTempCond": envHiTempCond,
       "envHiTempClear": envHiTempClear,
       "envHiWindCond": envHiWindCond,
       "envHiWindClear": envHiWindClear,
       "envHiWtrCond": envHiWtrCond,
       "envHiWtrClear": envHiWtrClear,
       "envIceBuildupCond": envIceBuildupCond,
       "envIceBuildupClear": envIceBuildupClear,
       "envIntruderCond": envIntruderCond,
       "envIntruderClear": envIntruderClear,
       "envLwBatvgCond": envLwBatvgCond,
       "envLwBatvgClear": envLwBatvgClear,
       "envLwFuelCond": envLwFuelCond,
       "envLwFuelClear": envLwFuelClear,
       "envLwHumCond": envLwHumCond,
       "envLwHumClear": envLwHumClear,
       "envLwPresCond": envLwPresCond,
       "envLwPresClear": envLwPresClear,
       "envLwTempCond": envLwTempCond,
       "envLwTempClear": envLwTempClear,
       "envLwWtrCond": envLwWtrCond,
       "envLwWtrClear": envLwWtrClear,
       "envMiscCond": envMiscCond,
       "envMiscClear": envMiscClear,
       "envOpenDrCond": envOpenDrCond,
       "envOpenDrClear": envOpenDrClear,
       "envPowerCond": envPowerCond,
       "envPowerClear": envPowerClear,
       "envPumpCond": envPumpCond,
       "envPumpClear": envPumpClear,
       "envRectCond": envRectCond,
       "envRectClear": envRectClear,
       "envRectHiCond": envRectHiCond,
       "envRectHiClear": envRectHiClear,
       "envRectLoCond": envRectLoCond,
       "envRectLoClear": envRectLoClear,
       "envSmokeCond": envSmokeCond,
       "envSmokeClear": envSmokeClear,
       "envToxicGasCond": envToxicGasCond,
       "envToxicGasClear": envToxicGasClear,
       "envVentnCond": envVentnCond,
       "envVentnClear": envVentnClear,
       "olCondNotifications": olCondNotifications,
       "erpsCondNotifications": erpsCondNotifications,
       "swMemberCondNotifications": swMemberCondNotifications,
       "dbChangeNotifications": dbChangeNotifications,
       "dbChangeEvt": dbChangeEvt,
       "dbChangeSecuEvt": dbChangeSecuEvt,
       "dbChangeNotificationsObjects": dbChangeNotificationsObjects,
       "dbChangeDateAndTime": dbChangeDateAndTime,
       "dbChangeSeqNum": dbChangeSeqNum,
       "dbChangeOID": dbChangeOID,
       "notificationObjects": notificationObjects,
       "trapSeqNum": trapSeqNum,
       "notificationControl": notificationControl,
       "condNotifCtrl": condNotifCtrl,
       "condNotifCtrlTable": condNotifCtrlTable,
       "condNotifCtrlEntry": condNotifCtrlEntry,
       "condNotifObjId": condNotifObjId,
       "condNotifSeverity": condNotifSeverity,
       "condNotifDefaultSeverity": condNotifDefaultSeverity,
       "envCondAttrTable": envCondAttrTable,
       "envCondAttrEntry": envCondAttrEntry,
       "envCondAttrHKIIdx": envCondAttrHKIIdx,
       "envCondAttrSeverity": envCondAttrSeverity,
       "envCondAttrCodeType": envCondAttrCodeType,
       "envCondAttrDescription": envCondAttrDescription,
       "envCondAttrInputType": envCondAttrInputType,
       "eventNotifCtrl": eventNotifCtrl,
       "eventNotifState": eventNotifState}
)
